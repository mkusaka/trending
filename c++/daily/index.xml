<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-15T01:29:50Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Detanup01/gbe_fork</title>
    <updated>2024-12-15T01:29:50Z</updated>
    <id>tag:github.com,2024-12-15:/Detanup01/gbe_fork</id>
    <link href="https://github.com/Detanup01/gbe_fork" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fork of https://gitlab.com/Mr_Goldberg/goldberg_emulator&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;span&gt;ðŸ”¶&lt;/span&gt; &lt;strong&gt;This is a fork&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Fork of &lt;a href=&#34;https://gitlab.com/Mr_Goldberg/goldberg_emulator&#34;&gt;https://gitlab.com/Mr_Goldberg/goldberg_emulator&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Feel free to make a PR.&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ”´&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This fork is not a takeover, not a resurrection of the original project, and not a replacement.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;This is just a fork, don&#39;t take it seriously.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;You are highly encouraged to fork/clone it and do whatever you want with it.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ”´&lt;/span&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Compatibility&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This fork is incompatible with the original repo, lots of things has changed and might be even broken.&lt;br&gt; If something doesn&#39;t work, feel free to create a pull request with the appropriate fix, otherwise ignore this fork and use the original emu.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Credits&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to everyone contributing to this project in any way possible, we try to keep the &lt;a href=&#34;https://raw.githubusercontent.com/Detanup01/gbe_fork/dev/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; updated with all the changes and their authors.&lt;/p&gt; &#xA;&lt;p&gt;This project depends on many third-party libraries and tools, credits to them for their amazing work, you can find their listing here in &lt;a href=&#34;https://raw.githubusercontent.com/Detanup01/gbe_fork/dev/CREDITS.md&#34;&gt;CREDITS.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;How to use the emu&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Always generate the interfaces file using the &lt;code&gt;generate_interfaces&lt;/code&gt; tool.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generate the proper app configuration using the &lt;code&gt;generate_emu_config&lt;/code&gt; tool.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;If things don&#39;t work, try the &lt;code&gt;ColdClientLoader&lt;/code&gt; setup.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find helper guides, scripts, and tools here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;(These guides, scripts, and tools are maintained by their authors.)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/daci12345/GBE-Autoconfigurator&#34;&gt;GBE-Autoconfigurator&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gitlab.com/detiam/Semuexec&#34;&gt;Semuexec&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/turusudiro/SteamEmuUtility&#34;&gt;Steam Emu Utility&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://rentry.co/goldberg_emulator&#34;&gt;How to use Goldberg Emulator&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/brunolee-GIT/GSE-Generator&#34;&gt;GSE-Generator&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also find instructions here in &lt;a href=&#34;https://raw.githubusercontent.com/Detanup01/gbe_fork/dev/post_build/README.release.md&#34;&gt;README.release.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;&lt;strong&gt;Compiling&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;One time setup&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Cloning the repo&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Disable automatic CRLF handling:&lt;br&gt; &lt;em&gt;Locally&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --local core.autocrlf false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Or globally/system wide&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --system core.autocrlf false&#xA;git config --global core.autocrlf false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clone the repo and its submodules &lt;strong&gt;recursively&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --recurse-submodules -j8 https://github.com/Detanup01/gbe_fork.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The switch &lt;code&gt;-j8&lt;/code&gt; is optional, it allows Git to fetch up to 8 submodules&lt;/p&gt; &#xA;&lt;p&gt;It is adviseable to always checkout submodules every now and then, to make sure they&#39;re up to date&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git submodule update --init --recursive --remote&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;For Windows:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You need Windows 10 or 8.1 + WDK&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using Visual Studio, install &lt;code&gt;Visual Studio 2022 Community&lt;/code&gt;: &lt;a href=&#34;https://visualstudio.microsoft.com/vs/community/&#34;&gt;https://visualstudio.microsoft.com/vs/community/&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Select the Workload &lt;code&gt;Desktop development with C++&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;In the &lt;code&gt;Individual componenets&lt;/code&gt; scroll to the buttom and select the &lt;strong&gt;latest&lt;/strong&gt; version of &lt;code&gt;Windows XX SDK (XX.X...)&lt;/code&gt;&lt;br&gt; For example &lt;code&gt;Windows 11 SDK (10.0.22621.0)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;MSYS2&lt;/code&gt; &lt;strong&gt;this is currently experimental and will not work due to ABI differences&lt;/strong&gt;: &lt;a href=&#34;https://www.msys2.org/&#34;&gt;https://www.msys2.org/&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;steps&lt;/summary&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;To build 64-bit binaries use either the &lt;a href=&#34;https://www.msys2.org/docs/environments/&#34;&gt;environment&lt;/a&gt; &lt;code&gt;UCRT64&lt;/code&gt; or &lt;code&gt;MINGW64&lt;/code&gt; then install the GCC toolchain&lt;br&gt; &lt;code&gt;UCRT64&lt;/code&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pacman -S mingw-w64-ucrt-x86_64-gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;code&gt;MINGW64&lt;/code&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pacman -S mingw-w64-i686-gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt;To build 32-bit binaries use the environment &lt;code&gt;MINGW32&lt;/code&gt; then install the GCC toolchain &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pacman -S mingw-w64-i686-gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python 3.10 or above: &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;https://www.python.org/downloads/windows/&lt;/a&gt;&lt;br&gt; After installation, make sure it works&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;python --version&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; Install a GUI for Git like &lt;a href=&#34;https://desktop.github.com/&#34;&gt;GitHub Desktop&lt;/a&gt;, or &lt;a href=&#34;https://www.sourcetreeapp.com/&#34;&gt;Sourcetree&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For Linux:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 20.04 LTS: &lt;a href=&#34;https://ubuntu.com/download/desktop&#34;&gt;https://ubuntu.com/download/desktop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu required packages: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt update -y&#xA;sudo apt install -y coreutils # echo, printf, etc...&#xA;sudo apt install -y build-essential&#xA;sudo apt install -y gcc-multilib # needed for 32-bit builds&#xA;sudo apt install -y g++-multilib&#xA;sudo apt install -y libglx-dev # needed for overlay build (header files   such as GL/glx.h)&#xA;sudo apt install -y libgl-dev # needed for overlay build (header files   such as GL/gl.h)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;em&gt;(Optional)&lt;/em&gt; Additional packages &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt install -y clang # clang compiler&#xA;sudo apt install -y binutils # contains the tool &#39;readelf&#39; mainly, and   other usefull binary stuff&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Python 3.10 or above &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt update -y&#xA;sudo apt install -y software-properties-common&#xA;sudo add-apt-repository ppa:deadsnakes/ppa -y&#xA;sudo apt update -y&#xA;sudo apt install -y &#34;python3.12&#34;&#xA;sudo apt install -y &#34;python3.12-dev&#34;&#xA;sudo apt install -y &#34;python3.12-venv&#34;&#xA;sudo apt install -y python3-dev&#xA;&#xA;# make sure it works&#xA;python3.12 --version&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Building dependencies&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;These are third party libraries needed to build the emu later, they are linked with the emu during its build process.&lt;br&gt; You don&#39;t need to build these dependencies every time, they rarely get updated.&lt;br&gt; The only times you&#39;ll need to rebuild them is either when their separete build folder was accedentally deleted, or when the dependencies were updated.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;On Windows:&lt;/h4&gt; &#xA;&lt;p&gt;Open CMD in the repo folder, then run the following&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To build using &lt;code&gt;Visual Studio&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;set &#34;CMAKE_GENERATOR=Visual Studio 17 2022&#34;&#xA;third-party\common\win\premake\premake5.exe --file=premake5-deps.lua --64-build --32-build   --all-ext --all-build --verbose --os=windows vs2022&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To build using &lt;code&gt;MSYS2&lt;/code&gt; &lt;strong&gt;this is currently experimental and will not work due to ABI differences&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;steps&lt;/summary&gt; &#xA;   &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; In both cases below, you can use &lt;code&gt;Clang&lt;/code&gt; compiler instead of &lt;code&gt;GCC&lt;/code&gt; by running these 2 commands in the same terminal instance&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export CC=&#34;clang&#34;&#xA;export CXX=&#34;clang++&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;To build 64-bit binaries (&lt;code&gt;UCRT64&lt;/code&gt; or &lt;code&gt;MINGW64&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export CMAKE_GENERATOR=&#34;MSYS Makefiles&#34;&#xA;./third-party/common/win/premake/premake5.exe --file=premake5-deps.lua --64-build --all-ext --all-build --verbose   --os=windows gmake2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;To build 32-bit binaries (&lt;code&gt;MINGW32&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export CMAKE_GENERATOR=&#34;MSYS Makefiles&#34;&#xA;./third-party/common/win/premake/premake5.exe --file=premake5-deps.lua --32-build --all-ext --all-build --verbose   --os=windows gmake2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extract all third party dependencies from the folder &lt;code&gt;third-party&lt;/code&gt; into the folder &lt;code&gt;build\deps\win&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build all dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;On Linux:&lt;/h4&gt; &#xA;&lt;p&gt;Open a terminal in the repo folder &lt;em&gt;(Optional)&lt;/em&gt; You can use &lt;code&gt;Clang&lt;/code&gt; compiler instead of &lt;code&gt;GCC&lt;/code&gt; by running these 2 commands in the current terminal instance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export CC=&#34;clang&#34;&#xA;export CXX=&#34;clang++&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export CMAKE_GENERATOR=&#34;Unix Makefiles&#34;&#xA;./third-party/common/linux/premake/premake5 --file=premake5-deps.lua --64-build --32-build --all-ext --all-build --verbose --os=linux gmake2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extract all third party dependencies from the folder &lt;code&gt;third-party&lt;/code&gt; into the folder &lt;code&gt;build/deps/linux&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build all dependencies (32-bit and 64-bit)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Building the emu&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;On Windows:&lt;/h3&gt; &#xA;&lt;p&gt;Open CMD in the repo folder, then run the following&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For &lt;code&gt;Visual Studio 2022&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;third-party\common\win\premake\premake5.exe --file=premake5.lua --genproto --os=windows vs2022&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can then go to the folder &lt;code&gt;build\project\vs2022\win&lt;/code&gt; and open the produced &lt;code&gt;.sln&lt;/code&gt; file in Visual Studio.&lt;br&gt; Or, if you prefer to do it from command line, open the &lt;code&gt;Developer Command Prompt for VS 2022&lt;/code&gt; inside the above folder, then:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;msbuild /nologo /v:n /p:Configuration=release,Platform=Win32 gbe.sln&#xA;&#xA;msbuild /nologo /v:n /p:Configuration=release,Platform=x64 gbe.sln&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For &lt;code&gt;MSYS2&lt;/code&gt; &lt;strong&gt;this is currently experimental and will not work due to ABI differences&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;steps&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./third-party/common/win/premake/premake5.exe --file=premake5.lua --genproto --os=windows gmake2&#xA;&#xA;cd ./build/project/gmake2/win&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; You can use &lt;code&gt;Clang&lt;/code&gt; compiler instead of &lt;code&gt;GCC&lt;/code&gt; by running these 2 commands in the current terminal instance&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export CC=&#34;clang&#34;&#xA;export CXX=&#34;clang++&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;64-bit build (&lt;code&gt;UCRT64&lt;/code&gt; or &lt;code&gt;MINGW64&lt;/code&gt;) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make config=release_x64 -j 8 all&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt;32-bit build (&lt;code&gt;MINGW32&lt;/code&gt;) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make config=release_x32 -j 8 all&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;   &lt;p&gt;To see all possible build targets&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will build a release version of the emu in the folder &lt;code&gt;build\win\&amp;lt;toolchain&amp;gt;\release&lt;/code&gt;&lt;br&gt; An example script &lt;code&gt;build_win_premake.bat&lt;/code&gt; is available, check it out&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;On Linux:&lt;/h3&gt; &#xA;&lt;p&gt;Open a terminal in the repo folder, then run the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./third-party/common/linux/premake/premake5 --file=premake5.lua --genproto --os=linux gmake2&#xA;cd ./build/project/gmake2/linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; You can use &lt;code&gt;Clang&lt;/code&gt; compiler instead of &lt;code&gt;GCC&lt;/code&gt; by running these 2 commands in the current terminal instance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export CC=&#34;clang&#34;&#xA;export CXX=&#34;clang++&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make config=release_x32 -j 8 all&#xA;make config=release_x64 -j 8 all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see all possible build targets&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build a release version of the emu in the folder &lt;code&gt;build/linux/&amp;lt;toolchain&amp;gt;/release&lt;/code&gt;&lt;br&gt; An example script &lt;code&gt;build_linux_premake.sh&lt;/code&gt; is available, check it out&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Building the tool &lt;code&gt;generate_emu_config&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Navigate to the folder &lt;code&gt;tools/generate_emu_config/&lt;/code&gt; then&lt;/p&gt; &#xA;&lt;h3&gt;On Windows:&lt;/h3&gt; &#xA;&lt;p&gt;Open CMD then:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create python virtual environemnt and install the required packages/dependencies &lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;recreate_venv_win.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build the tool using &lt;code&gt;pyinstaller&lt;/code&gt; &lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;rebuild_win.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will build the tool inside &lt;code&gt;bin\win&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;On Linux:&lt;/h3&gt; &#xA;&lt;p&gt;Open bash terminal then:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create python virtual environemnt and install the required packages/dependencies &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo ./recreate_venv_linux.sh&#xA;&lt;/code&gt;&lt;/pre&gt; You might need to edit this script to use a different python version.&lt;br&gt; Find this line and change it: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python_package=&#34;python3.12&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build the tool using &lt;code&gt;pyinstaller&lt;/code&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./rebuild_linux.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will build the tool inside &lt;code&gt;bin/linux&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Using Github CI as a builder&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This is really slow and mainly intended for the CI Workflow scripts, but you can use it as another outlet if you can&#39;t build locally.&lt;br&gt; &lt;strong&gt;You have to fork the repo first&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Initial setup&lt;/h3&gt; &#xA;&lt;p&gt;In your fork, open the &lt;code&gt;Settings&lt;/code&gt; tab from the top, then:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;From the left side panel select &lt;code&gt;Actions&lt;/code&gt; -&amp;gt; &lt;code&gt;General&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the section &lt;code&gt;Actions permissions&lt;/code&gt; select &lt;code&gt;Allow all actions and reusable workflows&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scroll down, and in the section &lt;code&gt;Workflow permissions&lt;/code&gt; select &lt;code&gt;Read and write permissions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;(Optional)&lt;/em&gt; In the section &lt;code&gt;Artifact and log retention&lt;/code&gt;, you can specify the amount of days to keep the build artifacts/archives.&lt;br&gt; It is recommended to set a reasonable number like 3-4 days, otherwise you may consume your packages storage if you use Github as a builder frequently, more details here: &lt;a href=&#34;https://docs.github.com/en/get-started/learning-about-github/githubs-plans&#34;&gt;https://docs.github.com/en/get-started/learning-about-github/githubs-plans&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Manual trigger&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to the &lt;code&gt;Actions&lt;/code&gt; tab in your fork&lt;/li&gt; &#xA; &lt;li&gt;Select the emu dependencies Workflow (ex: &lt;code&gt;Emu third-party dependencies (Windows) &lt;/code&gt;) and run it on the &lt;strong&gt;main&lt;/strong&gt; branch (ex: &lt;code&gt;dev&lt;/code&gt;).&lt;br&gt; Dependencies not created on the main branch won&#39;t be recognized by other branches or subsequent runs&lt;/li&gt; &#xA; &lt;li&gt;Select one of the Workflow scripts from the left side panel, for example &lt;code&gt;Build all emu variants (Windows)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;On the top-right, select &lt;code&gt;Run workflow&lt;/code&gt; -&amp;gt; select the desired branch (for example &lt;code&gt;dev&lt;/code&gt;) -&amp;gt; press the button &lt;code&gt;Run workflow&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;When it&#39;s done, many packages (called build artifacts) will be created for that workflow.&lt;br&gt; Make sure to select the workflow again to view its history, then select the last run at the very top to view its artifacts&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Important note:&lt;/h2&gt; &#xA;&lt;p&gt;When you build the dependencies workflows, they will be cached to decrease the build times of the next triggers and avoid unnecessary/wasteful build process.&lt;br&gt; This will cause a problem if at any time the third-party dependencies were updated, in that case you need to manually delete the cache, in your fork:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to the &lt;code&gt;Actions&lt;/code&gt; tab at the top&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Caches&lt;/code&gt; from the left side panel&lt;/li&gt; &#xA; &lt;li&gt;Delete the corresponding cache&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;strong&gt;&lt;em&gt;(Optional)&lt;/em&gt; Packaging&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This step is intended for Github CI/Workflow, but you can create a package locally.&lt;/p&gt; &#xA;&lt;h3&gt;On Windows:&lt;/h3&gt; &#xA;&lt;p&gt;Open CMD in the repos&#39;s directory, then run this script&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;package_win.bat &amp;lt;build_folder&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;build_folder&lt;/code&gt; is any folder inside &lt;code&gt;build\win&lt;/code&gt;, for example: &lt;code&gt;vs2022\release&lt;/code&gt;&lt;br&gt; The above example will create a &lt;code&gt;.7z&lt;/code&gt; archive inside &lt;code&gt;build\package\win\&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;On Linux:&lt;/h3&gt; &#xA;&lt;p&gt;Open bash terminal in the repos&#39;s directory, then run this script&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;package_linux.sh &amp;lt;build_folder&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;build_folder&lt;/code&gt; is any folder inside &lt;code&gt;build/linux&lt;/code&gt;, for example: &lt;code&gt;gmake2/release&lt;/code&gt;&lt;br&gt; The above example will create a compressed &lt;code&gt;.tar&lt;/code&gt; archive inside &lt;code&gt;build/package/linux/&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>