<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-11T01:36:28Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vaxerski/Hyprland</title>
    <updated>2022-06-11T01:36:28Z</updated>
    <id>tag:github.com,2022-06-11:/vaxerski/Hyprland</id>
    <link href="https://github.com/vaxerski/Hyprland" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hyprland is a dynamic tiling Wayland compositor that doesn&#39;t sacrifice on its looks.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vaxerski/Hyprland/main/assets/hyprland.png&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/vaxerski/Hyprland/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;Badge Workflow&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/vaxerski/Hyprland/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/vaxerski/Hyprland&#34; alt=&#34;Badge License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/tokei/lines/github/vaxerski/Hyprland&#34; alt=&#34;Badge Lines&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/vaxerski/Hyprland&#34; alt=&#34;Badge Language&#34;&gt; &lt;a href=&#34;https://github.com/vaxerski/Hyprland/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/vaxerski/Hyprland&#34; alt=&#34;Badge Pull Requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vaxerski/Hyprland/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/vaxerski/Hyprland&#34; alt=&#34;Badge Issues&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Hi-mom!-ff69b4&#34; alt=&#34;Badge Hi Mom&#34;&gt;&lt;br&gt; &lt;a href=&#34;https://discord.gg/hQ9XvMUjjr&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Join%20the-Discord%20server-6666ff&#34; alt=&#34;Badge Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;Hyprland is a dynamic tiling Wayland compositor based on wlroots that doesn&#39;t sacrifice on its looks.&lt;/p&gt; &#xA; &lt;p&gt;For Hyprland without the &lt;code&gt;land&lt;/code&gt; part, see &lt;a href=&#34;https://github.com/vaxerski/Hypr&#34;&gt;Hypr&lt;/a&gt;, the Xorg window manager.&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/vaxerski/Hyprland/wiki/Installation&#34;&gt;&lt;kbd&gt; &lt;br&gt; Install &lt;br&gt; &lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;  &lt;strong&gt;&lt;a href=&#34;https://github.com/vaxerski/Hyprland/wiki/Quick-start&#34;&gt;&lt;kbd&gt; &lt;br&gt; Quick Start &lt;br&gt; &lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;  &lt;strong&gt;&lt;a href=&#34;https://github.com/vaxerski/Hyprland/wiki/Configuring-Hyprland&#34;&gt;&lt;kbd&gt; &lt;br&gt; Configure &lt;br&gt; &lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;  &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vaxerski/Hyprland/main/docs/Contribute.md&#34;&gt;&lt;kbd&gt; &lt;br&gt; Contribute &lt;br&gt; &lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Notice&lt;/h1&gt; &#xA;&lt;p&gt;Hyprland is still in pretty early development compared to some other Wayland compositors.&lt;/p&gt; &#xA;&lt;p&gt;Although Hyprland is pretty stable, it may have some bugs.&lt;/p&gt; &#xA;&lt;h3&gt;Help Wanted&lt;/h3&gt; &#xA;&lt;p&gt;Hyprland needs testers! &lt;br&gt; Try it out and report bugs / suggestions!&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easily expandable and readable codebase&lt;/li&gt; &#xA; &lt;li&gt;Config reloaded instantly upon saving&lt;/li&gt; &#xA; &lt;li&gt;Custom bezier curve based animations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wlr_ext&lt;/code&gt; workspaces protocol support&lt;/li&gt; &#xA; &lt;li&gt;Dual Kawase blur&lt;/li&gt; &#xA; &lt;li&gt;Fully dynamic workspaces&lt;/li&gt; &#xA; &lt;li&gt;Closely follows &lt;code&gt;wlroots-git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bundled wlroots&lt;/li&gt; &#xA; &lt;li&gt;Window/layer fade in/out&lt;/li&gt; &#xA; &lt;li&gt;Tiling/pseudotiling/floating/fullscreen windows&lt;/li&gt; &#xA; &lt;li&gt;Switching workspaces between window modes on the fly&lt;/li&gt; &#xA; &lt;li&gt;Special workspace (scratchpad)&lt;/li&gt; &#xA; &lt;li&gt;Window/monitor rules&lt;/li&gt; &#xA; &lt;li&gt;Socket-based IPC&lt;/li&gt; &#xA; &lt;li&gt;Event system for bash scripts&lt;/li&gt; &#xA; &lt;li&gt;Rounded corners&lt;/li&gt; &#xA; &lt;li&gt;Full damage tracking&lt;/li&gt; &#xA; &lt;li&gt;Docks support&lt;/li&gt; &#xA; &lt;li&gt;Drawing tablet support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Gallery&lt;/h1&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/NbrTnZH.png&#34; alt=&#34;Preview A&#34;&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ZA4Fa8R.png&#34; alt=&#34;Preview B&#34;&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BpXxM8H.png&#34; alt=&#34;Preview C&#34;&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;h1&gt;Stars Over Time&lt;/h1&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://starchart.cc/vaxerski/Hyprland&#34;&gt;&lt;img src=&#34;https://starchart.cc/vaxerski/Hyprland.svg?sanitize=true&#34; alt=&#34;Stars Preview&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Special Thanks&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gitlab.freedesktop.org/wlroots/wlroots&#34;&gt;wlroots&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For their amazing library&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gitlab.freedesktop.org/wlroots/wlroots/-/blob/master/tinywl/tinywl.c&#34;&gt;tinywl&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/swaywm/sway&#34;&gt;Sway&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff the overkill way&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/inclement/vivarium&#34;&gt;Vivarium&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff the simple way&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/djpohly/dwl&#34;&gt;dwl&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff the hacky way&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/WayfireWM/wayfire&#34;&gt;Wayfire&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do some graphics stuff&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!----&gt; &#xA;&lt;!--{ Thanks }---------------------------------&gt; &#xA;&lt;!--{ Images }---------------------------------&gt; &#xA;&lt;!--{ Badges }---------------------------------&gt;</summary>
  </entry>
  <entry>
    <title>keith2018/SoftGLRender</title>
    <updated>2022-06-11T01:36:28Z</updated>
    <id>tag:github.com,2022-06-11:/keith2018/SoftGLRender</id>
    <link href="https://github.com/keith2018/SoftGLRender" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tiny C++ Software Renderer / Rasterizer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SoftGLRender&lt;/h1&gt; &#xA;&lt;p&gt;Tiny C++ Software Renderer/Rasterizer, it implements the main GPU rendering pipeline, 3D models (GLTF) are loaded by &lt;a href=&#34;https://github.com/assimp/assimp&#34;&gt;assimp&lt;/a&gt;, and using &lt;a href=&#34;https://github.com/g-truc/glm&#34;&gt;GLM&lt;/a&gt; as math library.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keith2018/SoftGLRender/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/keith2018/SoftGLRender/actions/workflows/cmake_macos.yml&#34;&gt;&lt;img src=&#34;https://github.com/keith2018/SoftGLRender/actions/workflows/cmake_macos.yml/badge.svg?sanitize=true&#34; alt=&#34;CMake MacOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/keith2018/SoftGLRender/actions/workflows/cmake_windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/keith2018/SoftGLRender/actions/workflows/cmake_windows.yml/badge.svg?sanitize=true&#34; alt=&#34;CMake Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/keith2018/SoftGLRender/actions/workflows/cmake_linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/keith2018/SoftGLRender/actions/workflows/cmake_linux.yml/badge.svg?sanitize=true&#34; alt=&#34;CMake Linux&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/keith2018/SoftGLRender/master/screenshot/helmet.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wireframe&lt;/li&gt; &#xA; &lt;li&gt;View Frustum culling&lt;/li&gt; &#xA; &lt;li&gt;Back-Front culling&lt;/li&gt; &#xA; &lt;li&gt;Orbit Camera Controller&lt;/li&gt; &#xA; &lt;li&gt;Perspective Correct Interpolation&lt;/li&gt; &#xA; &lt;li&gt;Reversed Z&lt;/li&gt; &#xA; &lt;li&gt;Early Z&lt;/li&gt; &#xA; &lt;li&gt;Tangent Space Normal Mapping&lt;/li&gt; &#xA; &lt;li&gt;Basic Lighting&lt;/li&gt; &#xA; &lt;li&gt;Blinn-Phong shading&lt;/li&gt; &#xA; &lt;li&gt;PBR &amp;amp; IBL shading&lt;/li&gt; &#xA; &lt;li&gt;Skybox CubeMap &amp;amp; Equirectangular&lt;/li&gt; &#xA; &lt;li&gt;Texture mipmaps&lt;/li&gt; &#xA; &lt;li&gt;Texture tiling and swizzling (linear, tiled, morton)&lt;/li&gt; &#xA; &lt;li&gt;Texture filtering and wrapping&lt;/li&gt; &#xA; &lt;li&gt;Shader varying partial derivative &lt;code&gt;dFdx&lt;/code&gt; &lt;code&gt;dFdy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alpha mask &amp;amp; blend&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Texture Filtering&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NEAREST&lt;/li&gt; &#xA; &lt;li&gt;LINEAR&lt;/li&gt; &#xA; &lt;li&gt;NEAREST_MIPMAP_NEAREST&lt;/li&gt; &#xA; &lt;li&gt;LINEAR_MIPMAP_NEAREST&lt;/li&gt; &#xA; &lt;li&gt;NEAREST_MIPMAP_LINEAR&lt;/li&gt; &#xA; &lt;li&gt;LINEAR_MIPMAP_LINEAR&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Texture Wrapping&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;REPEAT&lt;/li&gt; &#xA; &lt;li&gt;MIRRORED_REPEAT&lt;/li&gt; &#xA; &lt;li&gt;CLAMP_TO_EDGE&lt;/li&gt; &#xA; &lt;li&gt;CLAMP_TO_BORDER&lt;/li&gt; &#xA; &lt;li&gt;CLAMP_TO_ZERO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Texture Fetch&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lod&lt;/li&gt; &#xA; &lt;li&gt;Bias&lt;/li&gt; &#xA; &lt;li&gt;Offset&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Anti Aliasing&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SSAA&lt;/li&gt; &#xA; &lt;li&gt;FXAA&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; MSAA\TAA&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Shadow Map&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;h3&gt;Render Textured&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;BoomBox (PBR) &lt;img src=&#34;https://raw.githubusercontent.com/keith2018/SoftGLRender/master/screenshot/boombox.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Robot &lt;img src=&#34;https://raw.githubusercontent.com/keith2018/SoftGLRender/master/screenshot/robot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DamagedHelmet (PBR) &lt;img src=&#34;https://raw.githubusercontent.com/keith2018/SoftGLRender/master/screenshot/helmet.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GlassTable &lt;img src=&#34;https://raw.githubusercontent.com/keith2018/SoftGLRender/master/screenshot/glasstable.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;AfricanHead &lt;img src=&#34;https://raw.githubusercontent.com/keith2018/SoftGLRender/master/screenshot/africanhead.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Brickwall &lt;img src=&#34;https://raw.githubusercontent.com/keith2018/SoftGLRender/master/screenshot/brickwall.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cube &lt;img src=&#34;https://raw.githubusercontent.com/keith2018/SoftGLRender/master/screenshot/cube.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Render Wireframe&lt;/h3&gt; &#xA;&lt;p&gt;Check &#34;show clip&#34; to show the triangles created by frustum clip&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/keith2018/SoftGLRender/master/screenshot/clip.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/g-truc/glm&#34;&gt;GLM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dropbox/json11&#34;&gt;json11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;stb_image&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/assimp/assimp&#34;&gt;assimp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;imgui&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Clone&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:keith2018/SoftGLRender.git&#xA;cd SoftGLRender&#xA;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cmake -B ./build -DCMAKE_BUILD_TYPE=Release&#xA;cmake --build ./build --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd bin/Release&#xA;./SoftGLRender&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is licensed under the MIT License (see &lt;a href=&#34;https://raw.githubusercontent.com/keith2018/SoftGLRender/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sogou/workflow</title>
    <updated>2022-06-11T01:36:28Z</updated>
    <id>tag:github.com,2022-06-11:/sogou/workflow</id>
    <link href="https://github.com/sogou/workflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C++ Parallel Computing and Asynchronous Networking Engine&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/README_cn.md&#34;&gt;中文版入口&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sogou C++ Workflow&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sogou/workflow/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.cppreference.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-c++-red.svg?sanitize=true&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/platform-linux%20%7C%20macos20%7C%20windows-lightgrey.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-linux%20%7C%20macos%20%7C%20windows-lightgrey.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/sogou/workflow&#34;&gt;&lt;img src=&#34;https://travis-ci.com/sogou/workflow.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As &lt;strong&gt;Sogou`s C++ server engine&lt;/strong&gt;, Sogou C++ Workflow supports almost all &lt;strong&gt;back-end C++ online services&lt;/strong&gt; of Sogou, including all search services, cloud input method, online advertisements, etc., handling more than &lt;strong&gt;10 billion&lt;/strong&gt; requests every day. This is an &lt;strong&gt;enterprise-level programming engine&lt;/strong&gt; in light and elegant design which can satisfy most C++ back-end development requirements.&lt;/p&gt; &#xA;&lt;h4&gt;You can use it:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To quickly build an &lt;strong&gt;HTTP server&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &#34;workflow/WFHttpServer.h&#34;&#xA;&#xA;int main()&#xA;{&#xA;    WFHttpServer server([](WFHttpTask *task) {&#xA;        task-&amp;gt;get_resp()-&amp;gt;append_output_body(&#34;&amp;lt;html&amp;gt;Hello World!&amp;lt;/html&amp;gt;&#34;);&#xA;    });&#xA;&#xA;    if (server.start(8888) == 0) { // start server on port 8888&#xA;        getchar(); // press &#34;Enter&#34; to end.&#xA;        server.stop();&#xA;    }&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As a &lt;strong&gt;multifunctional asynchronous client&lt;/strong&gt;, it currently supports &lt;code&gt;HTTP&lt;/code&gt;, &lt;code&gt;Redis&lt;/code&gt;, &lt;code&gt;MySQL&lt;/code&gt; and &lt;code&gt;Kafka&lt;/code&gt; protocols.&lt;/li&gt; &#xA; &lt;li&gt;To implement &lt;strong&gt;client/server on user-defined protocol&lt;/strong&gt; and build your own &lt;strong&gt;RPC system&lt;/strong&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sogou/srpc&#34;&gt;srpc&lt;/a&gt; is based on it and it is an independent open source project, which supports srpc, brpc, trpc and thrift protocols.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;To build &lt;strong&gt;asynchronous workflow&lt;/strong&gt;; support common &lt;strong&gt;series&lt;/strong&gt; and &lt;strong&gt;parallel&lt;/strong&gt; structures, and also support any &lt;strong&gt;DAG&lt;/strong&gt; structures.&lt;/li&gt; &#xA; &lt;li&gt;As a &lt;strong&gt;parallel computing tool&lt;/strong&gt;. In addition to &lt;strong&gt;networking tasks&lt;/strong&gt;, Sogou C++ Workflow also includes &lt;strong&gt;the scheduling of computing tasks&lt;/strong&gt;. All types of tasks can be put into &lt;strong&gt;the same&lt;/strong&gt; flow.&lt;/li&gt; &#xA; &lt;li&gt;As an &lt;strong&gt;asynchronous file IO tool&lt;/strong&gt; in &lt;code&gt;Linux&lt;/code&gt; system, with high performance exceeding any system call. Disk file IO is also a task.&lt;/li&gt; &#xA; &lt;li&gt;To realize any &lt;strong&gt;high-performance&lt;/strong&gt; and &lt;strong&gt;high-concurrency&lt;/strong&gt; back-end service with a very complex relationship between computing and networking.&lt;/li&gt; &#xA; &lt;li&gt;To build a &lt;strong&gt;micro service&lt;/strong&gt; system. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This project has built-in &lt;strong&gt;service governance&lt;/strong&gt; and &lt;strong&gt;load balancing&lt;/strong&gt; features.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://github.com/sogou/workflow-k8s&#34;&gt;workflow-k8s&lt;/a&gt; plugin enables using name service with Kubernetes automated deployment.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Wiki link : &lt;a href=&#34;https://github.com/sogou/workflow/wiki&#34;&gt;PaaS Architecture&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Compiling and running environment&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This project supports &lt;code&gt;Linux&lt;/code&gt;, &lt;code&gt;macOS&lt;/code&gt;, &lt;code&gt;Windows&lt;/code&gt;, &lt;code&gt;Android&lt;/code&gt; and other operating systems. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Windows&lt;/code&gt; version is currently released as an independent &lt;a href=&#34;https://github.com/sogou/workflow/tree/windows&#34;&gt;branch&lt;/a&gt;, using &lt;code&gt;iocp&lt;/code&gt; to implement asynchronous networking. All user interfaces are consistent with the &lt;code&gt;Linux&lt;/code&gt; version.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Supports all CPU platforms, including 32 or 64-bit &lt;code&gt;x86&lt;/code&gt; processors, big-endian or little-endian &lt;code&gt;arm&lt;/code&gt; processors, &lt;code&gt;loongson&lt;/code&gt; processors.&lt;/li&gt; &#xA; &lt;li&gt;Relies on &lt;code&gt;OpenSSL&lt;/code&gt;; &lt;code&gt;OpenSSL 1.1&lt;/code&gt; and above is recommended. If you don&#39;t like SSL, you may checkout the &lt;a href=&#34;https://github.com/sogou/workflow/tree/nossl&#34;&gt;nossl&lt;/a&gt; branch. But still need to link &lt;code&gt;crypto&lt;/code&gt; for &lt;code&gt;md5&lt;/code&gt; and &lt;code&gt;sha1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Uses the &lt;code&gt;C++11&lt;/code&gt; standard and therefore, it should be compiled with a compiler which supports &lt;code&gt;C++11&lt;/code&gt;. Does not rely on &lt;code&gt;boost&lt;/code&gt; or &lt;code&gt;asio&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;No other dependencies. However, if you need &lt;code&gt;Kafka&lt;/code&gt; protocol, some compression libraries should be installed, including &lt;code&gt;lz4&lt;/code&gt;, &lt;code&gt;zstd&lt;/code&gt; and &lt;code&gt;snappy&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get started (Linux, macOS):&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/sogou/workflow&#xA;cd workflow&#xA;make&#xA;cd tutorial&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get started (Debian Linux, ubuntu 22.04):&lt;/h3&gt; &#xA;&lt;p&gt;Sogou C++ Workflow has been packaged for Debian Linux and ubuntu 22.04.&lt;br&gt; To install the Workflow library for development purposes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install libworkflow-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the Workflow library for deployment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install libworkflow1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Tutorials&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Client &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-01-wget.md&#34;&gt;Creating your first task：wget&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-02-redis_cli.md&#34;&gt;Implementing Redis set and get：redis_cli&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-03-wget_to_redis.md&#34;&gt;More features about series：wget_to_redis&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Server &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-04-http_echo_server.md&#34;&gt;First server：http_echo_server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-05-http_proxy.md&#34;&gt;Asynchronous server：http_proxy&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Parallel tasks and Series　 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-06-parallel_wget.md&#34;&gt;A simple parallel wget：parallel_wget&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Important topics &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-error.md&#34;&gt;About error&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-timeout.md&#34;&gt;About timeout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-config.md&#34;&gt;About global configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-dns.md&#34;&gt;About DNS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-exit.md&#34;&gt;About exit&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Computing tasks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-07-sort_task.md&#34;&gt;Using the build-in algorithm factory：sort_task&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-08-matrix_multiply.md&#34;&gt;User-defined computing task：matrix_multiply&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-go-task.md&#34;&gt;Use computing task in a simple way: go task&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Asynchronous File IO tasks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-09-http_file_server.md&#34;&gt;Http server with file IO：http_file_server&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;User-defined protocol &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-10-user_defined_protocol.md&#34;&gt;A simple user-defined protocol: client/server&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Timing tasks and counting tasks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-timer.md&#34;&gt;About timer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-counter.md&#34;&gt;About counter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-resource-pool.md&#34;&gt;About resource pool&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-module.md&#34;&gt;About module&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Service governance &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-service-governance.md&#34;&gt;About service governance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-upstream.md&#34;&gt;More documents about upstream&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Connection context &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-connection-context.md&#34;&gt;About connection context&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Built-in clients &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-12-mysql_cli.md&#34;&gt;Asynchronous MySQL client：mysql_cli&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-13-kafka_cli.md&#34;&gt;Asynchronous Kafka client: kafka_cli&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;System design features&lt;/h4&gt; &#xA;&lt;p&gt;We believe that a typical back-end program=protocol+algorithm+workflow and should be developed completely independently.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Protocol &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In most cases, users use built-in common network protocols, such as HTTP, Redis or various rpc.&lt;/li&gt; &#xA;   &lt;li&gt;Users can also easily customize user-defined network protocol. In the customization, they only need to provide serialization and deserialization functions to define their own client/server.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Algorithm &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In our design, the algorithm is a concept symmetrical to the protocol. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If protocol call is rpc, then algorithm call is an apc (Async Procedure Call).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;We have provided some general algorithms, such as sort, merge, psort, reduce, which can be used directly.&lt;/li&gt; &#xA;   &lt;li&gt;Compared with a user-defined protocol, a user-defined algorithm is much more common. Any complicated computation with clear boundaries should be packaged into an algorithm.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Workflow &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Workflow is the actual business logic, which is to put the protocols and algorithms into the flow graph for use.&lt;/li&gt; &#xA;   &lt;li&gt;The typical workflow is a closed series-parallel graph. Complex business logic may be a non-closed DAG.&lt;/li&gt; &#xA;   &lt;li&gt;The workflow graph can be constructed directly or dynamically generated based on the results of each step. All tasks are executed asynchronously.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Basic task, task factory and complex task&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Our system contains six basic tasks: networking, file IO, CPU, GPU, timer, and counter.&lt;/li&gt; &#xA; &lt;li&gt;All tasks are generated by the task factory and automatically recycled after callback. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Server task is one kind of special networking task, generated by the framework which calls the task factory, and handed over to the user through the process function.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;In most cases, the task generated by the user through the task factory is a complex task, which is transparent to the user. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For example, an HTTP request may include many asynchronous processes (DNS, redirection), but for user, it is just a networking task.&lt;/li&gt; &#xA;   &lt;li&gt;File sorting seems to be an algorithm, but it actually includes many complex interaction processes between file IO and CPU computation.&lt;/li&gt; &#xA;   &lt;li&gt;If you think of business logic as building circuits with well-designed electronic components, then each electronic component may be a complex circuit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Asynchrony and encapsulation based on &lt;code&gt;C++11 std::function&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not based on user mode coroutines. Users need to know that they are writing asynchronous programs.&lt;/li&gt; &#xA; &lt;li&gt;All calls are executed asynchronously, and there is almost no operation that occupies a thread. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Although we also provide some facilities with semi-synchronous interfaces, they are not core features.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;We try to avoid user&#39;s derivations, and encapsulate user behavior with &lt;code&gt;std::function&lt;/code&gt; instead, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The callback of any task.&lt;/li&gt; &#xA;   &lt;li&gt;Any server&#39;s process. This conforms to the &lt;code&gt;FaaS&lt;/code&gt; (Function as a Service) idea.&lt;/li&gt; &#xA;   &lt;li&gt;The realization of an algorithm is simply a &lt;code&gt;std::function&lt;/code&gt;. But the algorithm can also be implemented by derivation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Memory reclamation mechanism&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Every task will be automatically reclaimed after the callback. If a task is created but a user does not want to run it, the user needs to release it through the dismiss method.&lt;/li&gt; &#xA; &lt;li&gt;Any data in the task, such as the response of the network request, will also be recycled with the task. At this time, the user can use &lt;code&gt;std::move()&lt;/code&gt; to move the required data.&lt;/li&gt; &#xA; &lt;li&gt;SeriesWork and ParallelWork are two kinds of framework objects, which are also recycled after their callback. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When a series is a branch of a parallel, it will be recycled after the callback of the parallel that it belongs to.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;This project doesn’t use &lt;code&gt;std::shared_ptr&lt;/code&gt; to manage memory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Any other questions?&lt;/h4&gt; &#xA;&lt;p&gt;You may check the &lt;a href=&#34;https://github.com/sogou/workflow/issues/406&#34;&gt;FAQ&lt;/a&gt; and &lt;a href=&#34;https://github.com/sogou/workflow/issues&#34;&gt;issues&lt;/a&gt; list first to see if you can find the answer.&lt;/p&gt; &#xA;&lt;p&gt;You are very welcome to send the problems you encounter in use to &lt;a href=&#34;https://github.com/sogou/workflow/issues&#34;&gt;issues&lt;/a&gt;, and we will answer them as soon as possible. At the same time, more issues will also help new users.&lt;/p&gt;</summary>
  </entry>
</feed>