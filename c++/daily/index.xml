<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-29T01:21:08Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kroma-network/tachyon</title>
    <updated>2023-12-29T01:21:08Z</updated>
    <id>tag:github.com,2023-12-29:/kroma-network/tachyon</id>
    <link href="https://github.com/kroma-network/tachyon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modular ZK(Zero Knowledge) backend accelerated by GPU&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt;&#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/kroma-network/tachyon/main/tachyon_logo_horizontal.png&#34; style=&#34;width: 50%;&#34;&gt; &#xA; &lt;br&gt;&#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tachyon&lt;/strong&gt; is a Modular ZK Backend, powered by GPU.&lt;/p&gt; &#xA;&lt;h2&gt;Design Goals&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;General Purpose: A versatile ZK library empowers developers to implement any proving scheme with minimal effort, often enhancing developer productivity. To create a general-purpose backend, aligning the code structure as closely as possible with the algebraic structure is paramount.&lt;/li&gt; &#xA; &lt;li&gt;Easy to Use: Achieving widespread adoption is essential for the success of any product. Consequently, one of the key focal points of the Tachyon project is to include offering packages for various programming languages and runtimes.&lt;/li&gt; &#xA; &lt;li&gt;Blazing Fast: Tachyon&#39;s foremost requirement is speed, and not just any speed, but blazing speed! This entails Tachyon delivering exceptional performance on both CPU and GPU platforms.&lt;/li&gt; &#xA; &lt;li&gt;GPU Interoperability: Tachyon&#39;s code is designed to be compatible with both CPU and GPU in the majority of scenarios.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;p&gt;Please follow the instructions &lt;a href=&#34;https://bazel.build/install&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Ubuntu&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; sudo apt install libgmp-dev libomp-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Macos&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; brew install gmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;h4&gt;Build on Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel build --config linux //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build on Macos arm64&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel build --config macos_arm64 //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build on Macos x64&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel build --config macos_x86_64 //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;: MacOS v14.0.0 or later is recommended.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In certain versions of MacOS (prior to v13.5.1), a bug related to incorrect Bigint divide operations has been detected in the field generator when using the optimized build (&lt;code&gt;-c opt&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/kroma-network/tachyon/issues/98&#34;&gt;issue&lt;/a&gt; will be fixed as soon as possible.&lt;/p&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;h4&gt;Test on Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel test --config linux //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Test on Macos arm64&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel test --config macos_arm64 //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Test on Macos x64&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel test --config macos_x86_64 //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Polygon zkEVM backend prime field&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt;: Only x86_64 is supported.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--//:polygon_zkevm_backend&lt;/code&gt;: Enable &lt;a href=&#34;https://github.com/0xPolygonHermez/goldilocks&#34;&gt;goldilocks&lt;/a&gt; and &lt;a href=&#34;https://github.com/0xPolygonHermez/zkevm-prover&#34;&gt;zkevm-prover&lt;/a&gt; prime field backend.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel build --config ${os} --config avx512_${os} --//:polygon_zkevm_backend //...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hardware acceleration&lt;/h3&gt; &#xA;&lt;h4&gt;CUDA backend&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--config cuda&lt;/code&gt;: Enable &lt;a href=&#34;https://developer.nvidia.com/cuda-toolkit&#34;&gt;cuda&lt;/a&gt; backend.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel build --config ${os} --config cuda //...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ROCm backend&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--config rocm&lt;/code&gt;: Enable &lt;a href=&#34;https://www.amd.com/en/graphics/servers-solutions-rocm&#34;&gt;rocm&lt;/a&gt; backend.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel build --config ${os} --config rocm //...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Matplotlib&lt;/h3&gt; &#xA;&lt;h3&gt;Pyenv&lt;/h3&gt; &#xA;&lt;p&gt;If you are using pyenv, don&#39;t forget to add a option &lt;code&gt;--enable-shared&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; CONFIGURE_OPTS=--enable-shared pyenv install &amp;lt;version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; pip install matplotlib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frequently Asked Questions&lt;/h3&gt; &#xA;&lt;h4&gt;Debugging on macOS&lt;/h4&gt; &#xA;&lt;p&gt;Please add this line to your &lt;code&gt;.bazelrc.user&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build --spawn_strategy=local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build on Ubuntu 20.04&lt;/h4&gt; &#xA;&lt;p&gt;Please update g++ version and try build again! The default &lt;code&gt;g++-9&lt;/code&gt; is not working.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; sudo apt install g++-10&#xA;&amp;gt; export CC=/usr/bin/gcc-10&#xA;&amp;gt; export CXX=/usr/bin/g++-10&#xA;&amp;gt; export GCC_HOST_COMPILER_PATH=/usr/bin/gcc-10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build CUDA with rust toolchain&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Use --sandbox_debug to see verbose messages from the sandbox and retain the sandbox build root for debugging&#xA;error: linking with `external/local_config_cuda/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc` failed: exit status: 127&#xA;...&#xA;  = note: /usr/bin/env: &#39;python&#39;: No such file or directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please make your &lt;code&gt;python&lt;/code&gt; point to python interpreter to be run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; sudo apt install python-is-python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Plus, please include these lines to your &lt;code&gt;.bazelc.user&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build --action_env=PATH=/usr/bin:/usr/local/bin&#xA;build --host_action_env=PATH=/usr/bin:/usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>