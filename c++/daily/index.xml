<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-12T01:30:12Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ml-explore/mlx-swift</title>
    <updated>2025-06-12T01:30:12Z</updated>
    <id>tag:github.com,2025-06-12:/ml-explore/mlx-swift</id>
    <link href="https://github.com/ml-explore/mlx-swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift API for MLX&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MLX Swift&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ml-explore/mlx-swift/main/#installation&#34;&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://swiftpackageindex.com/ml-explore/mlx-swift/main/documentation/mlx&#34;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ml-explore/mlx-swift/main/#examples&#34;&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MLX Swift is a Swift API for &lt;a href=&#34;https://ml-explore.github.io/mlx/build/html/index.html&#34;&gt;MLX&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;MLX is an array framework for machine learning on Apple silicon. MLX Swift expands MLX to the Swift language, making research and experimentation easier on Apple silicon.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;MLX Swift has &lt;a href=&#34;https://swiftpackageindex.com/ml-explore/mlx-swift/main/documentation/mlx/examples&#34;&gt;many examples&lt;/a&gt;, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ml-explore/mlx-swift-examples/raw/main/Applications/MNISTTrainer/README.md&#34;&gt;MNISTTrainer&lt;/a&gt;: An example that runs on both iOS and macOS that downloads MNIST training data and trains a &lt;a href=&#34;https://en.wikipedia.org/wiki/LeNet&#34;&gt;LeNet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ml-explore/mlx-swift-examples/raw/main/Applications/MLXChatExample/README.md&#34;&gt;MLXChatExample&lt;/a&gt;: An example chat app that runs on both iOS and macOS that supports LLMs and VLMs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ml-explore/mlx-swift-examples/raw/main/Applications/LLMEval/README.md&#34;&gt;LLMEval&lt;/a&gt;: A simple example that runs on both iOS and macOS that downloads an LLM and tokenizer from Hugging Face and generates text from a given prompt.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ml-explore/mlx-swift-examples/raw/main/Applications/StableDiffusionExample/README.md&#34;&gt;StableDiffusionExample&lt;/a&gt;: An example that runs on both iOS and macOS that downloads a stable diffusion model from Hugging Face and generates an image from a given prompt.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ml-explore/mlx-swift-examples/raw/main/Tools/llm-tool/README.md&#34;&gt;llm-tool&lt;/a&gt;: A command line tool for generating text using a variety of LLMs available on the Hugging Face hub.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/ml-explore/mlx-swift-examples&#34;&gt;MLX Swift Examples repo&lt;/a&gt; contains the complete code and documentation for these examples, including &lt;a href=&#34;https://swiftpackageindex.com/ml-explore/mlx-swift-examples/main/documentation/mlxlmcommon/porting&#34;&gt;guidelines on porting models&lt;/a&gt; from MLX Python.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;MLX&lt;/code&gt; Swift package can be built and run from Xcode or SwiftPM. A CMake install is also provided.&lt;/p&gt; &#xA;&lt;p&gt;More details are in the &lt;a href=&#34;https://swiftpackageindex.com/ml-explore/mlx-swift/main/documentation/mlx/install&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Xcode&lt;/h3&gt; &#xA;&lt;p&gt;In Xcode you can add &lt;code&gt;https://github.com/ml-explore/mlx-swift&lt;/code&gt; as a package dependency and link &lt;code&gt;MLX&lt;/code&gt;, &lt;code&gt;MLXNN&lt;/code&gt;, &lt;code&gt;MLXOptimizers&lt;/code&gt; and &lt;code&gt;MLXRandom&lt;/code&gt; as needed.&lt;/p&gt; &#xA;&lt;h3&gt;SwiftPM&lt;/h3&gt; &#xA;&lt;p&gt;To use &lt;code&gt;MLX&lt;/code&gt; with SwiftPM you can add this to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/ml-explore/mlx-swift&#34;, from: &#34;0.10.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and add the libraries as dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [.product(name: &#34;MLX&#34;, package: &#34;mlx-swift&#34;),&#xA;               .product(name: &#34;MLXNN&#34;, package: &#34;mlx-swift&#34;),&#xA;               .product(name: &#34;MLXOptimizers&#34;, package: &#34;mlx-swift&#34;)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Note] SwiftPM (command line) cannot build the Metal shaders so the ultimate build has to be done via Xcode.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;xcodebuild&lt;/h3&gt; &#xA;&lt;p&gt;Although &lt;code&gt;SwiftPM&lt;/code&gt; (command line) cannot build the Metal shaders, &lt;code&gt;xcodebuild&lt;/code&gt; can and it can be used to do command line builds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# build and run tests&#xA;xcodebuild test -scheme mlx-swift-Package -destination &#39;platform=OS X&#39;&#xA;&#xA;# build Tutorial&#xA;xcodebuild build -scheme Tutorial -destination &#39;platform=OS X&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CMake&lt;/h3&gt; &#xA;&lt;p&gt;Building with CMake requires both CMake and Ninja to be installed. You can do this with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install cmake&#xA;brew install ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir build&#xA;cd build&#xA;cmake .. -G Ninja&#xA;ninja&#xA;./example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/ml-explore/mlx-swift/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; for more information on contributing to MLX. See the &lt;a href=&#34;https://swiftpackageindex.com/ml-explore/mlx-swift/main/documentation/mlx/install&#34;&gt;docs&lt;/a&gt; for more information on building from source, and running tests.&lt;/p&gt; &#xA;&lt;p&gt;We are grateful for all of &lt;a href=&#34;https://raw.githubusercontent.com/ml-explore/mlx-swift/main/ACKNOWLEDGMENTS.md#Individual-Contributors&#34;&gt;our contributors&lt;/a&gt;. If you contribute to MLX Swift and wish to be acknowledged, please add your name to the list in your pull request.&lt;/p&gt; &#xA;&lt;p&gt;MLX Swift was initially developed by David Koski and Ronan Collobert, and is now maintained by David Koski. MLX Swift is built on top of &lt;a href=&#34;https://github.com/ml-explore/mlx&#34;&gt;MLX&lt;/a&gt;, which was initially developed with equal contribution by Awni Hannun, Jagrit Digani, Angelos Katharopoulos, and Ronan Collobert.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/ml-explore/mlx-swift/releases&#34;&gt;Releases&lt;/a&gt;. Generally the MLX Swift version number corresponds to the same version number in &lt;a href=&#34;https://github.com/ml-explore/mlx&#34;&gt;MLX&lt;/a&gt;. Release notes indicate specifics.&lt;/p&gt; &#xA;&lt;p&gt;All capabilities in MLX (Python) should be available in MLX Swift. If you encounter any that are missing please file an issue or feel free to submit a PR.&lt;/p&gt;</summary>
  </entry>
</feed>