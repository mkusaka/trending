<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-09T01:30:35Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>epsilla-cloud/vectordb</title>
    <updated>2023-08-09T01:30:35Z</updated>
    <id>tag:github.com,2023-08-09:/epsilla-cloud/vectordb</id>
    <link href="https://github.com/epsilla-cloud/vectordb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Epsilla is a high performance Vector Database Management System&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;275&#34; alt=&#34;Epsilla Logo&#34; src=&#34;https://epsilla-misc.s3.amazonaws.com/epsilla-horizontal.png&#34;&gt; &lt;/p&gt;&#xA; &lt;p&gt;&lt;strong&gt;A scalable, high-performance, and cost-effective vector database&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://epsilla-inc.gitbook.io/epsilladb/&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://discord.gg/cDaY2CxZc5&#34;&gt;Discord&lt;/a&gt; • &lt;a href=&#34;https://twitter.com/epsilla_inc&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Epsilla is an open-source vector database. Our focus is on ensuring scalability, high performance, and cost-effectiveness of vector search. EpsillaDB bridges the gap between information retrieval and memory retention in Large Language Models. It is the Hippocampus for AI.&lt;/p&gt; &#xA;&lt;p&gt;The key features of Epsilla include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;High performance and production-scale similarity search for embedding vectors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Full fledged database management system with familiar database, table, and field concepts. Vector is just another field type.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Native Python support and REST API interface.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Epsilla&#39;s core is written in C++ and leverages the advanced academic parallel graph traversal techniques for vector indexing, achieving 10 times faster vector search than HNSW while maintaining precision levels of over 99.9%.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Run Backend in Docker&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull epsilla/vectordb&#xA;docker run --pull=always -d -p 8888:8888 -v /tmp:/tmp epsilla/vectordb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Interact with Python Client&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install pyepsilla&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pyepsilla import vectordb&#xA;&#xA;client = vectordb.Client(host=&#39;localhost&#39;, port=&#39;8888&#39;)&#xA;client.load_db(db_name=&#34;MyDB&#34;, db_path=&#34;/tmp/epsilla&#34;)&#xA;client.use_db(db_name=&#34;MyDB&#34;)&#xA;&#xA;client.create_table(&#xA;  table_name=&#34;MyTable&#34;,&#xA;  table_fields=[&#xA;    {&#34;name&#34;: &#34;ID&#34;, &#34;dataType&#34;: &#34;INT&#34;},&#xA;    {&#34;name&#34;: &#34;Doc&#34;, &#34;dataType&#34;: &#34;STRING&#34;},&#xA;    {&#34;name&#34;: &#34;Embedding&#34;, &#34;dataType&#34;: &#34;VECTOR_FLOAT&#34;, &#34;dimensions&#34;: 4}&#xA;  ]&#xA;)&#xA;&#xA;client.insert(&#xA;  table_name=&#34;MyTable&#34;,&#xA;  records=[&#xA;    {&#34;ID&#34;: 1, &#34;Doc&#34;: &#34;Berlin&#34;, &#34;Embedding&#34;: [0.05, 0.61, 0.76, 0.74]},&#xA;    {&#34;ID&#34;: 2, &#34;Doc&#34;: &#34;London&#34;, &#34;Embedding&#34;: [0.19, 0.81, 0.75, 0.11]},&#xA;    {&#34;ID&#34;: 3, &#34;Doc&#34;: &#34;Moscow&#34;, &#34;Embedding&#34;: [0.36, 0.55, 0.47, 0.94]},&#xA;    {&#34;ID&#34;: 4, &#34;Doc&#34;: &#34;San Francisco&#34;, &#34;Embedding&#34;: [0.18, 0.01, 0.85, 0.80]},&#xA;    {&#34;ID&#34;: 5, &#34;Doc&#34;: &#34;Shanghai&#34;, &#34;Embedding&#34;: [0.24, 0.18, 0.22, 0.44]}&#xA;  ]&#xA;)&#xA;&#xA;status_code, response = client.query(&#xA;  table_name=&#34;MyTable&#34;,&#xA;  query_field=&#34;Embedding&#34;,&#xA;  query_vector=[0.35, 0.55, 0.47, 0.94],&#xA;  limit=2&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>RtlDallas/KrakenMask</title>
    <updated>2023-08-09T01:30:35Z</updated>
    <id>tag:github.com,2023-08-09:/RtlDallas/KrakenMask</id>
    <link href="https://github.com/RtlDallas/KrakenMask" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sleep obfuscation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kraken Mask&lt;/h1&gt; &#xA;&lt;p&gt;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣶⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⡿⠿⢿⣿⣷⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⣷⣠⣴⣶⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠻⢿⡄⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣿⣿⣟⠉⢹⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⠿⠿⠿⠋⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠉⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⢀⣀⣀⠀⠀⠀⠀⠀⣰⣿⣿⡟⠁⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠈⢿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣴⣾⣿⣿⣿⣿⣶⡀⢀⣾⣿⣿⠋⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠹⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⢸⣿⡁⠀⠀⢀⣿⣿⢇⣾⣿⣿⠃⠀⠀⠀⠀⠀⠀⣿⡈⠙⢿⣿⣿⣿⠿⠋⢩⡇⠀⠀⠀⠀⠀⠀⠙⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀ ⠈⠛⠛⣠⣴⣿⡿⠋⢸⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⣿⣿⣶⣾⣿⣿⣿⣷⣶⣿⡇⠀⠀⠀⠀⠀⠀⠀⣻⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣠⣾⣿⡿⠋⠀⠀⢻⣿⣿⣷⡀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⢠⣿⣿⣏⣠⣤⣶⣤⠀⠀⠀⠀ ⢰⣿⣿⣟⠀⠀⠀⠀⠘⢿⣿⣿⣿⣷⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⣤⣴⣿⣿⣿⣿⠋⠀⠀⠀⠀⠀⠀⠀ ⢸⣿⣿⣿⣦⣄⣀⠀⠀⠀⠉⠙⠛⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠛⠉⢻⣿⣄⠀⠀⠀⠀⠀⠀⠀ ⠀⠙⠿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠈⢿⣿⣶⣄⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠈⠉⠉⠙⠛⠛⠛⠛⠛⣿⣿⣿⣿⠟⢋⣿⣿⣿⡿⠋⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠙⢿⣿⣧⡀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⠟⠁⠀⣿⣿⣿⠟⠀⠀⢀⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠈⢿⣿⣷⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⠏⠀⠀⢸⣿⣿⣿⠀⠀⠀⢸⣿⣿⣿⠀⠈⢻⣿⣿⣿⢿⣿⣿⣦⡀⠀⠀⠀⣸⣿⣿⠀⣀⡄ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⡟⠀⠀⠀⠸⣿⣿⣿⠀⠀⠀⢻⣿⣿⣿⠀⠀⠀⢻⣿⣿⡆⠹⢿⣿⣿⣶⣶⣾⣿⣿⣿⣿⠋⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⡿⠁⠀⠀⠀⠀⢿⣿⣿⡆⠀⠀⠸⣿⣿⣿⡄⠀⠀⠀⢿⣿⣿⠀⠀⠙⠛⠿⠿⠿⠛⠋⢸⣿⠀⠀ ⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⡿⠛⠁⠀⠀⠀⠀⠀⠘⣿⣿⣿⠀⠀⠀⣿⣿⣿⡇⠀⠀⠀⢸⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀ ⠀⠀⠀⢠⣶⣿⣿⠿⠋⠁⠒⠛⢻⣷⠀⠀⠀⠀⠀⢹⣿⣿⡇⠀⣠⣿⣿⣿⢃⣴⣿⠟⠛⢿⣿⣿⡄⠀⠀⠀⠀⠀⠀⢠⣿⣿⠀⠀ ⠀⠀⢰⣿⣿⠟⠁⠀⠀⠀⠀⢀⣾⡟⠀⠀⠀⠀⠀⠘⣿⣿⣧⣾⣿⣿⠟⠁⣾⣿⡇⠀⠀⠘⢿⣿⣿⣦⡀⠀⠀⣀⣴⣿⣿⠃⠀⠀ ⠀⠀⣿⣿⡇⠀⠀⢀⡄⠀⢠⣿⣿⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠟⠁⠀⠀⢿⣿⣇⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⡿⠟⠁⠀⠀⠀ ⠀⠀⠹⣿⣷⣄⣀⣼⡇⠀⢸⣿⣿⡀⠀⠀⠀⠀⣠⣿⣿⣿⡿⠋⠀⠀⠀⠀⢸⣿⣿⡀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠈⠛⠛⠛⠋⠀⠀⠀⢻⣿⣿⣶⣶⣶⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠛⠛⠛⠉⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣷⣄⣀⠀⢀⣀⣴⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&lt;/p&gt; &#xA;&lt;h1&gt;How it&#39;s work&lt;/h1&gt; &#xA;&lt;p&gt;A sleep obfuscation tool is used to encrypt the content of the .text section with RC4 (using SystemFunction032). To achieve this encryption, a ROP chain is employed with QueueUserAPC and NtContinue.&lt;/p&gt; &#xA;&lt;p&gt;For each sleep, the encryption key changes, and the key is generated using the BCRYPT API. All function calls in Kernel32.dll and bcrypt.dll are subjected to return address spoofing, with the fake return address being located in KernelBase.dll.&lt;/p&gt; &#xA;&lt;p&gt;The thread created spoof the start address (TpReleaseCleanupGroupMembers+0x450).&lt;/p&gt; &#xA;&lt;p&gt;For memory scanners:&lt;/p&gt; &#xA;&lt;p&gt;Moneta: The content of the .text section is encrypted with a 40-byte offset (size of SECTION HEADER), ensuring no Indicator of Compromise (IoC) with Moneta.&lt;/p&gt; &#xA;&lt;p&gt;Hunt-Sleeping-Beacons: No detection is present.&lt;/p&gt; &#xA;&lt;p&gt;Patriot: Detection occurs with structures CONTEXT pointing to VirtualProtect. A small modification is needed to evade this detection.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cracked5pider/Ekko&#34;&gt;https://github.com/Cracked5pider/Ekko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/y11en/FOLIAGE/tree/master/source&#34;&gt;https://github.com/y11en/FOLIAGE/tree/master/source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For using NtContinue with CONTEXT structure for the ROP chain.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.unknowncheats.me/forum/anti-cheat-bypass/268039-x64-return-address-spoofing-source-explanation.html&#34;&gt;https://www.unknowncheats.me/forum/anti-cheat-bypass/268039-x64-return-address-spoofing-source-explanation.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyleavery/AceLdr/raw/main/src/retaddr.c&#34;&gt;https://github.com/kyleavery/AceLdr/blob/main/src/retaddr.c&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For return address spoofing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://institute.sektor7.net/rto-maldev-adv1&#34;&gt;https://institute.sektor7.net/rto-maldev-adv1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a course on memory encryption during sleep.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>luxonis/depthai-python</title>
    <updated>2023-08-09T01:30:35Z</updated>
    <id>tag:github.com,2023-08-09:/luxonis/depthai-python</id>
    <link href="https://github.com/luxonis/depthai-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DepthAI Python Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DepthAI Python Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-green.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/depthai/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/depthai.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/luxonis/depthai-python/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/luxonis/depthai-python/actions/workflows/main.yml/badge.svg?branch=gen2_develop&#34; alt=&#34;Python Wheel CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Python bindings for C++ depthai-core library&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation is available over at &lt;a href=&#34;https://docs.luxonis.com/projects/api/en/latest/&#34;&gt;Luxonis DepthAI API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Prebuilt wheels are available in &lt;a href=&#34;https://artifacts.luxonis.com/artifactory/luxonis-python-snapshot-local/&#34;&gt;Luxonis repository&lt;/a&gt; Make sure pip is upgraded&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m pip install -U pip&#xA;python3 -m pip install --extra-index-url https://artifacts.luxonis.com/artifactory/luxonis-python-snapshot-local/ depthai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cmake &amp;gt;= 3.4&lt;/li&gt; &#xA; &lt;li&gt;C++14 compiler (clang, gcc, msvc, ...)&lt;/li&gt; &#xA; &lt;li&gt;Python3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Along these, dependencies of depthai-core are also required See: &lt;a href=&#34;https://github.com/luxonis/depthai-core#dependencies&#34;&gt;depthai-core dependencies&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;The first time you build, the repository submodules need be initialized:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --init --recursive&#xA;&#xA;# Tip: You can ask Git to do that automatically:&#xA;git config submodule.recurse true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Later submodules also need to be updated.&lt;/p&gt; &#xA;&lt;h4&gt;Local build with pip&lt;/h4&gt; &#xA;&lt;p&gt;To build and install using pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add parameter &lt;code&gt;-v&lt;/code&gt; to see the output of the building process.&lt;/p&gt; &#xA;&lt;h4&gt;Wheel with pip&lt;/h4&gt; &#xA;&lt;p&gt;To build a wheel, execute the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m pip wheel . -w wheelhouse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Shared library&lt;/h4&gt; &#xA;&lt;p&gt;To build a shared library from source perform the following:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ℹ️ To speed up build times, use &lt;code&gt;cmake --build build --parallel [num CPU cores]&lt;/code&gt; (CMake &amp;gt;= 3.12). For older versions use: Linux/macOS: &lt;code&gt;cmake --build build -- -j[num CPU cores]&lt;/code&gt;, MSVC: &lt;code&gt;cmake --build build -- /MP[num CPU cores]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -H. -Bbuild&#xA;cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To specify custom Python executable to build for, use &lt;code&gt;cmake -H. -Bbuild -D PYTHON_EXECUTABLE=/full/path/to/python&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Common issues&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Many build fails due to missing dependencies. This also happens when submodules are missing or outdated (&lt;code&gt;git submodule update --recursive&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If libraries and headers are not in standard places, or not on the search paths, CMake reports it cannot find what it needs (e.g. &lt;code&gt;libusb&lt;/code&gt;). CMake can be hinted at where to look, for exmpale: &lt;code&gt;CMAKE_LIBRARY_PATH=/opt/local/lib CMAKE_INCLUDE_PATH=/opt/local/include pip install .&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Some distribution installers may not get the desired library. For example, an install on a RaspberryPi failed, missing &lt;code&gt;libusb&lt;/code&gt;, as the default installation with APT led to v0.1.3 at the time, whereas the library here required v1.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;p&gt;To run the tests build the library with the following options&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --init --recursive&#xA;cmake -H. -Bbuild -D DEPTHAI_PYTHON_ENABLE_TESTS=ON -D DEPTHAI_PYTHON_ENABLE_EXAMPLES=ON -D DEPTHAI_PYTHON_TEST_EXAMPLES=ON&#xA;cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then navigate to &lt;code&gt;build&lt;/code&gt; folder and run &lt;code&gt;ctest&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd build&#xA;ctest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To test a specific example/test with a custom timeout (in seconds) use following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_TIMEOUT=0 ctest -R &#34;01_rgb_preview&#34; --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;TEST_TIMEOUT=0&lt;/code&gt;, the test will run until stopped or it ends.&lt;/p&gt; &#xA;&lt;h2&gt;Tested platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 10, Windows 11&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 18.04, 20.04, 22.04;&lt;/li&gt; &#xA; &lt;li&gt;Raspbian 10;&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.14.6, 10.15.4;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using &lt;a href=&#34;https://docs.docker.com/&#34;&gt;Docker&lt;/a&gt; (with &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Docker Compose&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd docs&#xA;sudo docker-compose build&#xA;sudo docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;ℹ️ You can leave out the &lt;code&gt;sudo&lt;/code&gt; if you have added your user to the &lt;code&gt;docker&lt;/code&gt; group (or are using rootless docker). Then open &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;This docker container will watch changes in the &lt;code&gt;docs/source&lt;/code&gt; directory and rebuild the docs automatically&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;First, please install the required &lt;a href=&#34;https://raw.githubusercontent.com/luxonis/depthai-python/main/#Dependencies&#34;&gt;dependencies&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Then run the following commands to build the docs website&lt;/p&gt; &lt;pre&gt;&lt;code&gt;python3 -m pip install -U pip&#xA;python3 -m pip install -r docs/requirements.txt&#xA;cmake -H. -Bbuild -D DEPTHAI_BUILD_DOCS=ON -D DEPTHAI_PYTHON_BUILD_DOCS=ON&#xA;cmake --build build --target sphinx&#xA;python3 -m http.server --bind 0.0.0.0 8000 --directory build/docs/sphinx&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then open &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This will build documentation based on current sources, so if some new changes will be made, run this command in a new terminal window to update the website source&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cmake --build build --target sphinx&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then refresh your page - it should load the updated website that was just built&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Relocation link error&lt;/h3&gt; &#xA;&lt;p&gt;Build failure on Ubuntu 18.04 (&#34;relocation ...&#34; link error) with gcc 7.4.0 (default) - &lt;a href=&#34;https://github.com/luxonis/depthai-api/issues/3&#34;&gt;&lt;strong&gt;issue #3&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;the solution was to upgrade gcc to version 8:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt install g++-8&#xA;sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 70&#xA;sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 70&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hunter&lt;/h3&gt; &#xA;&lt;p&gt;Hunter is a CMake-only dependency manager for C/C++ projects.&lt;/p&gt; &#xA;&lt;p&gt;If you are stuck with error message which mentions external libraries (subdirectory of &lt;code&gt;.hunter&lt;/code&gt;) like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/usr/bin/ld: /home/[user]/.hunter/_Base/062a19a/ccfed35/a84a713/Install/lib/liblzma.a(stream_flags_decoder.c.o): warning: relocation against `lzma_footer_magic&#39; in read-only section `.text&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Try erasing the &lt;strong&gt;Hunter&lt;/strong&gt; &lt;strong&gt;cache&lt;/strong&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Linux/MacOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm -r ~/.hunter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;del C:/.hunter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;del C:/[user]/.hunter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;LTO - link time optimization&lt;/h3&gt; &#xA;&lt;p&gt;If following message appears:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lto1: internal compiler error: in add_symbol_to_partition_1, at lto/lto-partition.c:152&#xA;Please submit a full bug report,&#xA;with preprocessed source if appropriate.&#xA;See &amp;lt;file:///usr/share/doc/gcc-10/README.Bugs&amp;gt; for instructions.&#xA;lto-wrapper: fatal error: /usr/bin/c++ returned 1 exit status&#xA;compilation terminated.&#xA;/usr/bin/ld: error: lto-wrapper failed&#xA;collect2: error: ld returned 1 exit status&#xA;make[2]: *** [CMakeFiles/depthai.dir/build.make:227: depthai.cpython-38-x86_64-linux-gnu.so] Error 1&#xA;make[1]: *** [CMakeFiles/Makefile2:98: CMakeFiles/depthai.dir/all] Error 2&#xA;make: *** [Makefile:130: all] Error 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One fix is to update linker: (In case you are on Ubuntu 20.04: &lt;code&gt;/usr/bin/ld --version&lt;/code&gt;: 2.30)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Add to the end of /etc/apt/sources.list:&#xA;&#xA;echo &#34;deb http://ro.archive.ubuntu.com/ubuntu groovy main&#34; &amp;gt;&amp;gt; /etc/apt/sources.list&#xA;&#xA;# Replace ro with your countries local cache server (check the content of the file to find out which is)&#xA;# Not mandatory, but faster&#xA;&#xA;sudo apt update&#xA;sudo apt install binutils&#xA;&#xA;# Should upgrade to 2.35.1&#xA;# Check version:&#xA;/usr/bin/ld --version&#xA;# Output should be: GNU ld (GNU Binutils for Ubuntu) 2.35.1&#xA;# Revert /etc/apt/sources.list to previous state (comment out line) to prevent updating other packages.&#xA;sudo apt update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another option is to use &lt;strong&gt;clang&lt;/strong&gt; compiler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install clang-10&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;CC=clang-10 CXX=clang++-10 cmake ..&#xA;cmake --build . --parallel&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>