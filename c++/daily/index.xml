<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-18T01:25:19Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Hagrid29/CVE-2024-2432-PaloAlto-GlobalProtect-EoP</title>
    <updated>2024-03-18T01:25:19Z</updated>
    <id>tag:github.com,2024-03-18:/Hagrid29/CVE-2024-2432-PaloAlto-GlobalProtect-EoP</id>
    <link href="https://github.com/Hagrid29/CVE-2024-2432-PaloAlto-GlobalProtect-EoP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2024-2432 Palo Alto GlobalProtect EoP&lt;/h1&gt; &#xA;&lt;p&gt;On Windows system, it was found that GlobalProtect (App version 6.1.1-5 and 6.2.0-89) was vulnerable to arbitrary file delete with elevated privileges by symbolic link attack lead to local privilege escalation on local machine.&lt;/p&gt; &#xA;&lt;p&gt;It was observed that when a Windows unprivileged user attempt to connect VPN with GlobalProtect, the process &#34;PanGpHip.exe&#34; will do the following with SYSTEM privilege:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;query directory &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-*&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if there is any directory discovered, it will furthur query directory &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-&amp;lt;random&amp;gt;\*&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if any files or directories were discovered in &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-&amp;lt;random&amp;gt;*&#34;, it will remove them&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;finally remove direcory &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-&amp;lt;random&amp;gt;&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;side note: the program can query nested directory but failed to open handle to it. So we can ignore this case&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Hagrid29/CVE-2024-2432-PaloAlto-GlobalProtect-EoP/main/img/Fig1.PNG&#34; alt=&#34;Fig1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since the directory &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-&amp;lt;random&amp;gt;&#34; could be created by current user and assigned with &#34;Modify&#34; privilege for current user, current user could modify the entire directory. With this setup, an unprivileged user is able to achieve arbitrary file delete by creating a symbolic link to a privileged location (e.g., C:\Windows\System32). Furthermore, a malicious user could achieve local privilege escalation from arbitrary file delete.&lt;/p&gt; &#xA;&lt;p&gt;To perform arbitrary file delete from a unprivileged user, the user could perform follow steps:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Method 1&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;User create folder &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-1234567&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User create file &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-1234567\12345.txt&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User set OpLock on file &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-1234567\12345.txt&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User connect VPN. The process &#34;PanGpHip.exe&#34; will attempt to remove file &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-1234567\12345.txt&#34; with SYSTEM privilege.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The process &#34;PanGpHip.exe&#34; will be paused due to the OpLock&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When OpLock is triggered, user move file &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-1234567\12345.txt&#34; to somewhere else to empty the folder&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User create junction &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-1234567&#34; to &#34;\RPC Control&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User create symbolic link &#34;GLOBAL\GLOBALROOT\RPC Control\12345.txt&#34; to target file (e.g., C:\Windows\System32\secrets.txt)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User release OpLock&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User delete symbolic link&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Target file (e.g., C:\Windows\System32\secrets.txt) would be deleted&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\PoC.exe del C:\windows\System32\secrets.txt 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Method 2&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;User create folder &#34;C:\Users&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-1234567&#34; and &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\fakedir-1234567&#34;&lt;/li&gt; &#xA; &lt;li&gt;User create file &#34;C:\Users&amp;lt;user&amp;gt;\AppData\Local\Temp\fakedir-1234567\11111.txt&#34; and User create file &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\fakedir-1234567\12345.txt&#34;&lt;/li&gt; &#xA; &lt;li&gt;User create junction &#34;C:\Users&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-1234567&#34; to &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\fakedir-1234567&#34;&lt;/li&gt; &#xA; &lt;li&gt;User set OpLock on file &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\fakedir-1234567\11111.txt&#34;&lt;/li&gt; &#xA; &lt;li&gt;User connect VPN. The process &#34;PanGpHip.exe&#34; will attempt to remove file &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-1234567\11111.txt&#34; with SYSTEM privilege.&lt;/li&gt; &#xA; &lt;li&gt;The process &#34;PanGpHip.exe&#34; will be paused due to the OpLock&lt;/li&gt; &#xA; &lt;li&gt;User remove existing junction and create junction &#34;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\waapi-1234567&#34; to &#34;\RPC Control&#34;&lt;/li&gt; &#xA; &lt;li&gt;User create symbolic link &#34;GLOBAL\GLOBALROOT\RPC Control\12345.txt&#34; to target file (e.g., C:\Windows\System32\secrets.txt)&lt;/li&gt; &#xA; &lt;li&gt;User release OpLock&lt;/li&gt; &#xA; &lt;li&gt;User delete symbolic link&lt;/li&gt; &#xA; &lt;li&gt;Target file (e.g., C:\Windows\System32\secrets.txt) would be deleted&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\PoC.exe del C:\windows\System32\secrets.txt 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To perform local privilege escalation from arbitrary file delete, we could leverage Windows Installer as described in this article &lt;a href=&#34;https://www.zerodayinitiative.com/blog/2022/3/16/abusing-arbitrary-file-deletes-to-escalate-privilege-and-other-great-tricks&#34;&gt;https://www.zerodayinitiative.com/blog/2022/3/16/abusing-arbitrary-file-deletes-to-escalate-privilege-and-other-great-tricks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Method 1&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\PoC.exe pe RollbackScript.rbs 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Method 2&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\PoC.exe pe RollbackScript.rbs 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;cmd.rbs will spawn command prompt&lt;/p&gt; &#xA;&lt;p&gt;public_run_bat.rbs will execute C:\Users\Public\run.bat&lt;/p&gt; &#xA;&lt;h1&gt;Timeline&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;06/25/2023 - Vulnerability reported to Palo Alto&lt;/li&gt; &#xA; &lt;li&gt;10/09/2023 - Palo Alto confirmed vulnerability&lt;/li&gt; &#xA; &lt;li&gt;13/03/2024 - Publication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Reference&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://security.paloaltonetworks.com/CVE-2024-2432&#34;&gt;https://security.paloaltonetworks.com/CVE-2024-2432&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>