<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-17T01:32:27Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tbnobody/OpenDTU</title>
    <updated>2022-10-17T01:32:27Z</updated>
    <id>tag:github.com,2022-10-17:/tbnobody/OpenDTU</id>
    <link href="https://github.com/tbnobody/OpenDTU" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Software for ESP32 to talk to Hoymiles Inverters&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenDTU&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tbnobody/OpenDTU/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/tbnobody/OpenDTU/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;OpenDTU Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tbnobody/OpenDTU/actions/workflows/cpplint.yml&#34;&gt;&lt;img src=&#34;https://github.com/tbnobody/OpenDTU/actions/workflows/cpplint.yml/badge.svg?sanitize=true&#34; alt=&#34;cpplint&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;This project was started from &lt;a href=&#34;https://www.mikrocontroller.net/topic/525778&#34;&gt;this&lt;/a&gt; discussion (Mikrocontroller.net). It was the goal to replace the original Hoymiles DTU (Telemetry Gateway) with their cloud access. With a lot of reverse engineering the Hoymiles protocol was decrypted and analyzed.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Several screenshots of the frontend can be found here: &lt;a href=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Currently supported Inverters&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hoymiles HM-300&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-350&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-400&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-600&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-700&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-800&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-1000&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-1200&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-1500&lt;/li&gt; &#xA; &lt;li&gt;TSUN TSOL-M350 (Maybe depending on firmware on the inverter)&lt;/li&gt; &#xA; &lt;li&gt;TSUN TSOL-M800 (Maybe depending on firmware on the inverter)&lt;/li&gt; &#xA; &lt;li&gt;TSUN TSOL-M1600 (Maybe depending on firmware on the inverter)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features for end users&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read live data from inverter&lt;/li&gt; &#xA; &lt;li&gt;Show inverters internal event log&lt;/li&gt; &#xA; &lt;li&gt;Show inverter information like firmware version, firmware build date, hardware revision and hardware version&lt;/li&gt; &#xA; &lt;li&gt;Show and set the current inverter limit&lt;/li&gt; &#xA; &lt;li&gt;Function to turn the inverter off and on&lt;/li&gt; &#xA; &lt;li&gt;Uses ESP32 microcontroller and NRF24L01+&lt;/li&gt; &#xA; &lt;li&gt;Multi-Inverter support&lt;/li&gt; &#xA; &lt;li&gt;MQTT support (with TLS)&lt;/li&gt; &#xA; &lt;li&gt;Home Assistant MQTT Auto Discovery support&lt;/li&gt; &#xA; &lt;li&gt;Nice and fancy WebApp with visualization of current data&lt;/li&gt; &#xA; &lt;li&gt;Firmware upgrade using the web UI&lt;/li&gt; &#xA; &lt;li&gt;Default source supports up to 10 inverters&lt;/li&gt; &#xA; &lt;li&gt;Time zone support&lt;/li&gt; &#xA; &lt;li&gt;Ethernet support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features for developers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The microcontroller part&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build with Arduino PlatformIO Framework for the ESP32&lt;/li&gt; &#xA;   &lt;li&gt;Uses a fork of &lt;a href=&#34;https://github.com/yubox-node-org/ESPAsyncWebServer&#34;&gt;ESPAsyncWebserver&lt;/a&gt; and &lt;a href=&#34;https://github.com/bertmelis/espMqttClient&#34;&gt;espMqttClient&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The WebApp part&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build with &lt;a href=&#34;https://vuejs.org&#34;&gt;Vue.js&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Source is written in TypeScript&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hardware you need&lt;/h2&gt; &#xA;&lt;h3&gt;ESP32 board&lt;/h3&gt; &#xA;&lt;p&gt;For ease of use, buy a &#34;ESP32 DEVKIT DOIT&#34; or &#34;ESP32 NodeMCU Development Board&#34; with an ESP32-S3 or ESP-WROOM-32 chipset on it.&lt;/p&gt; &#xA;&lt;p&gt;Sample Picture:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/nodemcu-esp32.png&#34; alt=&#34;NodeMCU-ESP32&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also supported: Board with Ethernet-Connector and Power-over-Ethernet &lt;a href=&#34;https://www.olimex.com/Products/IoT/ESP32/ESP32-POE/open-source-hardware&#34;&gt;Olimex ESP32-POE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;NRF24L01+ radio board&lt;/h3&gt; &#xA;&lt;p&gt;The PLUS sign is IMPORTANT! There are different variants available, with antenna on the printed circuit board or external antenna.&lt;/p&gt; &#xA;&lt;p&gt;Sample picture:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/nrf24l01plus.png&#34; alt=&#34;nrf24l01plus&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Buy your hardware from a trusted source, at best from a dealer/online shop in your country where you have support and the right to return non-functional hardware. When you want to buy from Amazon, AliExpress, eBay etc., take note that there is a lot of low-quality or fake hardware offered. Read customer comments and ratings carefully!&lt;/p&gt; &#xA;&lt;p&gt;A heavily incomplete list of trusted hardware shops in germany is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.az-delivery.de/&#34;&gt;AZ-Delivery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.makershop.de/&#34;&gt;Makershop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.berrybase.de/&#34;&gt;Berrybase&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This list is for your convenience only, the project is not related to any of these shops.&lt;/p&gt; &#xA;&lt;h3&gt;Power supply&lt;/h3&gt; &#xA;&lt;p&gt;Use a power suppy with 5V and 1A. The USB cable connected to your PC/Notebook may be powerful enough or may be not.&lt;/p&gt; &#xA;&lt;h2&gt;Wiring up&lt;/h2&gt; &#xA;&lt;h3&gt;Schematic&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/Wiring_ESP32_Schematic.png&#34; alt=&#34;Schematic&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Symbolic view&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/Wiring_ESP32_Symbol.png&#34; alt=&#34;Symbolic&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Change pin assignment&lt;/h3&gt; &#xA;&lt;p&gt;Its possible to change all the pins of the NRF24L01+ module. This can be achieved by editing the &#39;platformio.ini&#39; file and add/change one or more of the following lines to the &#39;build_flags&#39; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-DHOYMILES_PIN_MISO=19&#xA;-DHOYMILES_PIN_MOSI=23&#xA;-DHOYMILES_PIN_SCLK=18&#xA;-DHOYMILES_PIN_IRQ=16&#xA;-DHOYMILES_PIN_CE=4&#xA;-DHOYMILES_PIN_CS=5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Flashing and starting up&lt;/h2&gt; &#xA;&lt;h3&gt;with Visual Studio Code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;Visual Studio Code&lt;/a&gt; (from now named &#34;vscode&#34;)&lt;/li&gt; &#xA; &lt;li&gt;In Visual Studio Code, install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=platformio.platformio-ide&#34;&gt;PlatformIO Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install git and enable git in vscode - &lt;a href=&#34;https://git-scm.com/downloads/&#34;&gt;git download&lt;/a&gt; - &lt;a href=&#34;https://www.jcchouinard.com/install-git-in-vscode/&#34;&gt;Instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository (you really have to clone it, don&#39;t just download the ZIP file. During the build process the git hash gets embedded into the firmware. If you download the ZIP file a build error will occur): Inside vscode open the command palette by pressing &lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;SHIFT&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt;. Enter &lt;code&gt;git clone&lt;/code&gt;, add the repository-URL &lt;code&gt;https://github.com/tbnobody/OpenDTU&lt;/code&gt;. Next you have to choose (or create) a target directory.&lt;/li&gt; &#xA; &lt;li&gt;In vscode, choose File --&amp;gt; Open Folder and select the previously downloaded source code. (You have to select the folder which contains the &#34;platformio.ini&#34; file)&lt;/li&gt; &#xA; &lt;li&gt;There is a short &lt;a href=&#34;https://youtu.be/9cA_esv3zeA&#34;&gt;Video&lt;/a&gt; showing these steps.&lt;/li&gt; &#xA; &lt;li&gt;Adjust the COM port in the file &#34;platformio.ini&#34; for your USB-serial-converter. It occurs twice: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;upload_port&lt;/li&gt; &#xA;   &lt;li&gt;monitor_port&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Select the arrow button in the status bar (PlatformIO: Upload) to compile and upload the firmware. During the compilation, all required libraries are downloaded automatically.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;on the commandline with PlatformIO Core&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://platformio.org/install/cli&#34;&gt;PlatformIO Core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository (you really have to clone it, don&#39;t just download the ZIP file. During the build process the git hash gets embedded into the firmware. If you download the ZIP file a build error will occur)&lt;/li&gt; &#xA; &lt;li&gt;Adjust the COM port in the file &#34;platformio.ini&#34;. It occurs twice: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;upload_port&lt;/li&gt; &#xA;   &lt;li&gt;monitor_port&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;build: &lt;code&gt;platformio run -e generic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;upload to esp module: &lt;code&gt;platformio run -e generic -t upload&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;other options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;clean the sources: &lt;code&gt;platformio run -e generic -t clean&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;erase flash: &lt;code&gt;platformio run -e generic -t erase&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;using the pre-compiled .bin files&lt;/h3&gt; &#xA;&lt;p&gt;Use a ESP32 flash tool of your choice and flash the .bin files to the right addresses:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Address&lt;/th&gt; &#xA;   &lt;th&gt;File&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0x1000&lt;/td&gt; &#xA;   &lt;td&gt;bootloader_dio_40m.bin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0x8000&lt;/td&gt; &#xA;   &lt;td&gt;partitions.bin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0xe000&lt;/td&gt; &#xA;   &lt;td&gt;boot_app0.bin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0x10000&lt;/td&gt; &#xA;   &lt;td&gt;opendtu-*.bin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Make sure too uncheck the DoNotChgBin option. Otherwise you will maybe get errors like &#34;invalid header&#34;&lt;/p&gt; &#xA;&lt;h2&gt;First configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After the initial flashing of the microcontroller, an Access Point called &#34;OpenDTU-*&#34; is opened. The default password is &#34;openDTU42&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Use a web browser to open the address &lt;a href=&#34;http://192.168.4.1&#34;&gt;http://192.168.4.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Navigate to Settings --&amp;gt; Network Settings and enter your WiFi credentials&lt;/li&gt; &#xA; &lt;li&gt;OpenDTU then simultaneously connects to your WiFi AP with this credentials. Navigate to Info --&amp;gt; Network and look into section &#34;Network Interface (Station)&#34; for the IP address received via DHCP.&lt;/li&gt; &#xA; &lt;li&gt;When OpenDTU is connected to a configured WiFI AP, the &#34;OpenDTU-*&#34; Access Point is closed after 3 minutes.&lt;/li&gt; &#xA; &lt;li&gt;OpenDTU needs access to a working NTP server to get the current date &amp;amp; time. Both are sent to the inverter with each request. Default NTP server is pool.ntp.org. If your network has different requirements please change accordingly (Settings --&amp;gt; NTP Settings).&lt;/li&gt; &#xA; &lt;li&gt;Add your inverter in the inverter settings (Settings --&amp;gt; Inverter Settings)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Flashing an Update using &#34;Over The Air&#34; OTA Update&lt;/h2&gt; &#xA;&lt;p&gt;Once you have your OpenDTU running and connected to WLAN, you can do further updates through the web interface. Navigate to Settings --&amp;gt; Firmware upgrade and press the browse button. Select the firmware file from your local computer.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll find the firmware file (after a successfull build process) under &lt;code&gt;.pio/build/generic/firmware.bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After the successful upload, the OpenDTU immediately restarts into the new firmware.&lt;/p&gt; &#xA;&lt;h2&gt;MQTT Topic Documentation&lt;/h2&gt; &#xA;&lt;p&gt;A documentation of all available MQTT Topics can be found here: &lt;a href=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/MQTT_Topics.md&#34;&gt;MQTT Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Available cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thingiverse.com/thing:5435911&#34;&gt;https://www.thingiverse.com/thing:5435911&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.printables.com/model/293003-sol-opendtu-esp32-nrf24l01-case&#34;&gt;https://www.printables.com/model/293003-sol-opendtu-esp32-nrf24l01-case&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Building the WebApp&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The WebApp can be build using yarn&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;$ cd webapp&#xA;$ yarn install&#xA;$ yarn build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The updated output is placed in the &#39;webapp_dist&#39; directory&lt;/li&gt; &#xA;   &lt;li&gt;It is only necessary to build the webapp when you made changes to it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Building the microcontroller firmware&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Visual Studio Code with the PlatformIO Extension is required for building&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First: When there is no light on the solar panels, the inverter completely turns off and does not answer to OpenDTU! So if you assembled your OpenDTU in the evening, wait until tomorrow.&lt;/li&gt; &#xA; &lt;li&gt;When there is no data received from the inverter(s) - try to reduce the distance between the openDTU and the inverter (e.g. move it to the window towards the roof)&lt;/li&gt; &#xA; &lt;li&gt;Under Settings -&amp;gt; DTU Settings you can increase the transmit power &#34;PA level&#34;. Default is &#34;minimum&#34;.&lt;/li&gt; &#xA; &lt;li&gt;The NRF24L01+ needs relatively much current. With bad power supply (and especially bad cables!) a 10uF capacitor soldered directly to the NRF24L01+ board connector brings more stability (pin 1+2 are the power supply). Note the polarity of the capacitor....&lt;/li&gt; &#xA; &lt;li&gt;You can try to use an USB power supply with 1A or more instead of connecting the ESP32 to the computer.&lt;/li&gt; &#xA; &lt;li&gt;Try a different USB cable. Once again, a stable power source is important. Some USB cables are made of much plastic and very little copper inside.&lt;/li&gt; &#xA; &lt;li&gt;Double-Check that you have a radio module NRF24L01+ with a plus sign at the end. NRF24L01 module without the plus are not compatible with this project.&lt;/li&gt; &#xA; &lt;li&gt;There is no possibility of auto-discovering the inverters. Double-Check you have entered the serial numbers of the inverters correctly.&lt;/li&gt; &#xA; &lt;li&gt;OpenDTU needs access to a working NTP server to get the current date &amp;amp; time.&lt;/li&gt; &#xA; &lt;li&gt;If your problem persists, check the &lt;a href=&#34;https://github.com/tbnobody/OpenDTU/issues&#34;&gt;Issues on Github&lt;/a&gt;. Please inspect not only the open issues, also the closed issues contain useful information.&lt;/li&gt; &#xA; &lt;li&gt;Another source of information are the &lt;a href=&#34;https://github.com/tbnobody/OpenDTU/discussions/&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grindylow/ahoy&#34;&gt;Ahoy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ziyatoe/DTUsimMI1x00-Hoymiles&#34;&gt;DTU Simulator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/helgeerbe/OpenDTU_VeDirect&#34;&gt;OpenDTU extended to talk to Victrons MPPT battery chargers (Ve.Direct)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>oceanbase/miniob</title>
    <updated>2022-10-17T01:32:27Z</updated>
    <id>tag:github.com,2022-10-17:/oceanbase/miniob</id>
    <link href="https://github.com/oceanbase/miniob" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;介绍&lt;/h1&gt; &#xA;&lt;p&gt;miniob 是 OceanBase 与华中科技大学联合开发的、面向&#34;零&#34;基础同学的数据库入门实践工具。 miniob 设计的目标是让同学们快速了解数据库并深入学习数据库内核，期望通过相关训练之后，能够对数据库内核各个模块的功能及其关联有所了解，并能够在 使用数据库时，设计出高效的 SQL 。miniob 面向的对象主要是在校学生，并且诸多模块都做了简化，比如不考虑并发操作。&lt;/p&gt; &#xA;&lt;p&gt;(注意：此代码仅供学习使用，不考虑任何安全特性。)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/oceanbase/miniob&#34;&gt;GitHub 首页&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;1. 题目说明&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oceanbase/miniob/main/docs/miniob_topics.md&#34;&gt;miniob 题目描述&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;2. 开发指南&lt;/h1&gt; &#xA;&lt;h2&gt;搭建开发环境&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oceanbase/miniob/main/docs/how_to_build.md&#34;&gt;本地配置gcc环境&lt;/a&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oceanbase/miniob/main/docs/how-to-dev-using-docker.md&#34;&gt;使用Docker开发&lt;/a&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oceanbase/miniob/main/docs/how_to_dev_miniob_by_docker_on_windows.md&#34;&gt;在Windows上使用Docker&lt;/a&gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;词法、语法解析&lt;/h2&gt; &#xA;&lt;p&gt;请参考 &lt;a href=&#34;https://raw.githubusercontent.com/oceanbase/miniob/main/docs/miniob-sql-parser.md&#34;&gt;miniob 词法语法解析开发与测试&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h1&gt;3. 提交测试&lt;/h1&gt; &#xA;&lt;p&gt;题目完成并通过自测后，大家可以在 &lt;a href=&#34;https://open.oceanbase.com/train?questionId=200001&#34;&gt;miniob 训练营&lt;/a&gt; 上提交代码进行测试。&lt;/p&gt; &#xA;&lt;p&gt;客户端输出需要满足一定要求，如果你的测试结果不符合预期，请参考 &lt;a href=&#34;https://raw.githubusercontent.com/oceanbase/miniob/main/docs/miniob-output-convention.md&#34;&gt;miniob 输出约定&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h1&gt;4. 数据库管理系统实现基础讲义&lt;/h1&gt; &#xA;&lt;p&gt;由华中科技大学谢美意和左琼老师联合编撰的数据库管理系统实现教材：&lt;a href=&#34;https://raw.githubusercontent.com/oceanbase/miniob/main/docs/lectures/index.md&#34;&gt;《数据库管理系统实现基础讲义》&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;5. miniob 介绍&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://open.oceanbase.com/activities/4921877&#34;&gt;miniob 源码解析视频&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.oceanbase.com/docs/community-developer-quickstart-10000000000627363&#34;&gt;miniob 源码解析文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;（资料持续整理中，请大家自行查阅标题为“MiniOB...”的视频或文档）&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fish-shell/fish-shell</title>
    <updated>2022-10-17T01:32:27Z</updated>
    <id>tag:github.com,2022-10-17:/fish-shell/fish-shell</id>
    <link href="https://github.com/fish-shell/fish-shell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The user-friendly command line shell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;fish &amp;lt;https://fishshell.com/&amp;gt;&lt;/code&gt;__ - the friendly interactive shell |Build Status|&lt;/h1&gt; &#xA;&lt;p&gt;fish is a smart and user-friendly command line shell for macOS, Linux, and the rest of the family. fish includes features like syntax highlighting, autosuggest-as-you-type, and fancy tab completions that just work, with no configuration required.&lt;/p&gt; &#xA;&lt;p&gt;For more on fish’s design philosophy, see the &lt;code&gt;design document &amp;lt;https://fishshell.com/docs/current/design.html&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;fish generally works like other shells, like bash or zsh. A few important differences can be found at &lt;a href=&#34;https://fishshell.com/docs/current/tutorial.html&#34;&gt;https://fishshell.com/docs/current/tutorial.html&lt;/a&gt; by searching for the magic phrase “unlike other shells”.&lt;/p&gt; &#xA;&lt;p&gt;Detailed user documentation is available by running &lt;code&gt;help&lt;/code&gt; within fish, and also at &lt;a href=&#34;https://fishshell.com/docs/current/index.html&#34;&gt;https://fishshell.com/docs/current/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting fish&lt;/h2&gt; &#xA;&lt;p&gt;macOS&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;fish can be installed:&#xA;&#xA;-  using `Homebrew &amp;lt;http://brew.sh/&amp;gt;`__: ``brew install fish``&#xA;-  using `MacPorts &amp;lt;https://www.macports.org/&amp;gt;`__:&#xA;   ``sudo port install fish``&#xA;-  using the `installer from fishshell.com &amp;lt;https://fishshell.com/&amp;gt;`__&#xA;-  as a `standalone app from fishshell.com &amp;lt;https://fishshell.com/&amp;gt;`__&#xA;&#xA;Note: The minimum supported macOS version is 10.10 &#34;Yosemite&#34;.&#xA;&#xA;Packages for Linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Packages for Debian, Fedora, openSUSE, and Red Hat Enterprise Linux/CentOS are available from the &lt;code&gt;openSUSE Build Service &amp;lt;https://software.opensuse.org/download.html?project=shells%3Afish&amp;amp;package=fish&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;Packages for Ubuntu are available from the &lt;code&gt;fish PPA &amp;lt;https://launchpad.net/~fish-shell/+archive/ubuntu/release-3&amp;gt;&lt;/code&gt;__, and can be installed using the following commands:&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;sudo apt-add-repository ppa:fish-shell/release-3 sudo apt update sudo apt install fish&lt;/p&gt; &#xA;&lt;p&gt;Instructions for other distributions may be found at &lt;code&gt;fishshell.com &amp;lt;https://fishshell.com&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;Windows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;-  On Windows 10, fish can be installed under the WSL Windows Subsystem&#xA;   for Linux with the instructions for the appropriate distribution&#xA;   listed above under “Packages for Linux”, or from source with the&#xA;   instructions below.&#xA;-  Fish can also be installed on all versions of Windows using&#xA;   `Cygwin &amp;lt;https://cygwin.com/&amp;gt;`__ (from the **Shells** category).&#xA;&#xA;Building from source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If packages are not available for your platform, GPG-signed tarballs are available from &lt;code&gt;fishshell.com &amp;lt;https://fishshell.com/&amp;gt;&lt;/code&gt;__ and &lt;code&gt;fish-shell on GitHub &amp;lt;https://github.com/fish-shell/fish-shell/releases&amp;gt;&lt;/code&gt;&lt;strong&gt;. See the &lt;code&gt;Building &amp;lt;#building&amp;gt;&lt;/code&gt;&lt;/strong&gt; section for instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Running fish&lt;/h2&gt; &#xA;&lt;p&gt;Once installed, run &lt;code&gt;fish&lt;/code&gt; from your current shell to try fish out!&lt;/p&gt; &#xA;&lt;p&gt;Dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Running fish requires:&#xA;&#xA;-  curses or ncurses (preinstalled on most \*nix systems)&#xA;-  some common \*nix system utilities (currently ``mktemp``), in&#xA;   addition to the basic POSIX utilities (``cat``, ``cut``, ``dirname``,&#xA;   ``ls``, ``mkdir``, ``mkfifo``, ``rm``, ``sort``, ``tee``, ``tr``,&#xA;   ``uname`` and ``sed`` at least, but the full coreutils plus ``find`` and&#xA;   ``awk`` is preferred)&#xA;-  The gettext library, if compiled with&#xA;   translation support&#xA;&#xA;The following optional features also have specific requirements:&#xA;&#xA;-  builtin commands that have the ``--help`` option or print usage&#xA;   messages require ``nroff`` or ``mandoc`` for&#xA;   display&#xA;-  automated completion generation from manual pages requires Python 3.5+&#xA;-  the ``fish_config`` web configuration tool requires Python 3.5+ and a web browser&#xA;-  system clipboard integration (with the default Ctrl-V and Ctrl-X&#xA;   bindings) require either the ``xsel``, ``xclip``,&#xA;   ``wl-copy``/``wl-paste`` or ``pbcopy``/``pbpaste`` utilities&#xA;-  full completions for ``yarn`` and ``npm`` require the&#xA;   ``all-the-package-names`` NPM module&#xA;-  ``colorls`` is used, if installed, to add color when running ``ls`` on platforms&#xA;   that do not have color support (such as OpenBSD)&#xA;&#xA;Switching to fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to use fish as your default shell, use the following command:&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;chsh -s /usr/local/bin/fish&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;chsh&lt;/code&gt; will prompt you for your password and change your default shell. (Substitute &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; with whatever path fish was installed to, if it differs.) Log out, then log in again for the changes to take effect.&lt;/p&gt; &#xA;&lt;p&gt;Use the following command if fish isn’t already added to &lt;code&gt;/etc/shells&lt;/code&gt; to permit fish to be your login shell:&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;echo /usr/local/bin/fish | sudo tee -a /etc/shells&lt;/p&gt; &#xA;&lt;p&gt;To switch your default shell back, you can run &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; (substituting &lt;code&gt;/bin/bash&lt;/code&gt; with &lt;code&gt;/bin/tcsh&lt;/code&gt; or &lt;code&gt;/bin/zsh&lt;/code&gt; as appropriate).&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;.. _dependencies-1:&lt;/p&gt; &#xA;&lt;p&gt;Dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Compiling fish requires:&#xA;&#xA;-  a C++11 compiler (g++ 4.8 or later, or clang 3.3 or later)&#xA;-  CMake (version 3.5 or later)&#xA;-  a curses implementation such as ncurses (headers and libraries)&#xA;-  PCRE2 (headers and libraries) - optional, this will be downloaded if missing&#xA;-  gettext (headers and libraries) - optional, for translation support&#xA;&#xA;Sphinx is also optionally required to build the documentation from a&#xA;cloned git repository.&#xA;&#xA;Additionally, running the test suite requires Python 3.5+ and the pexpect package.&#xA;&#xA;Building from source (all platforms) - Makefile generator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install into &lt;code&gt;/usr/local&lt;/code&gt;, run:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;p&gt;mkdir build; cd build cmake .. make sudo make install&lt;/p&gt; &#xA;&lt;p&gt;The install directory can be changed using the &lt;code&gt;-DCMAKE_INSTALL_PREFIX&lt;/code&gt; parameter for &lt;code&gt;cmake&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Building from source (macOS) - Xcode&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Note: The minimum supported macOS version is 10.10 &#34;Yosemite&#34;.&#xA;&#xA;.. code:: bash&#xA;&#xA;   mkdir build; cd build&#xA;   cmake .. -G Xcode&#xA;&#xA;An Xcode project will now be available in the ``build`` subdirectory.&#xA;You can open it with Xcode, or run the following to build and install in&#xA;``/usr/local``:&#xA;&#xA;.. code:: bash&#xA;&#xA;   xcodebuild&#xA;   xcodebuild -scheme install&#xA;&#xA;The install directory can be changed using the&#xA;``-DCMAKE_INSTALL_PREFIX`` parameter for ``cmake``.&#xA;&#xA;Build options&#xA;~~~~~~~~~~~~~&#xA;&#xA;In addition to the normal cmake build options (like ``CMAKE_INSTALL_PREFIX``), fish has some other options available to customize it.&#xA;&#xA;- BUILD_DOCS=ON|OFF - whether to build the documentation. This is automatically set to OFF when sphinx isn&#39;t installed.&#xA;- INSTALL_DOCS=ON|OFF - whether to install the docs. This is automatically set to on when BUILD_DOCS is or prebuilt documentation is available (like when building in-tree from a tarball).&#xA;- FISH_USE_SYSTEM_PCRE2=ON|OFF - whether to use an installed pcre2. This is normally autodetected.&#xA;- MAC_CODESIGN_ID=String|OFF - the codesign ID to use on Mac, or &#34;OFF&#34; to disable codesigning.&#xA;- WITH_GETTEXT=ON|OFF - whether to build with gettext support for translations.&#xA;&#xA;Note that fish does *not* support static linking and will attempt to error out if it detects it.&#xA;&#xA;Help, it didn’t build!&#xA;~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;If fish reports that it could not find curses, try installing a curses&#xA;development package and build again.&#xA;&#xA;On Debian or Ubuntu you want:&#xA;&#xA;::&#xA;&#xA;   sudo apt install build-essential cmake ncurses-dev libncurses5-dev libpcre2-dev gettext&#xA;&#xA;On RedHat, CentOS, or Amazon EC2:&#xA;&#xA;::&#xA;&#xA;   sudo yum install ncurses-devel&#xA;&#xA;Contributing Changes to the Code&#xA;--------------------------------&#xA;&#xA;See the `Guide for Developers &amp;lt;CONTRIBUTING.rst&amp;gt;`__.&#xA;&#xA;Contact Us&#xA;----------&#xA;&#xA;Questions, comments, rants and raves can be posted to the official fish&#xA;mailing list at https://lists.sourceforge.net/lists/listinfo/fish-users&#xA;or join us on our `gitter.im&#xA;channel &amp;lt;https://gitter.im/fish-shell/fish-shell&amp;gt;`__. Or use the `fish tag&#xA;on Unix &amp;amp; Linux Stackexchange &amp;lt;https://unix.stackexchange.com/questions/tagged/fish&amp;gt;`__.&#xA;There is also a fish tag on Stackoverflow, but it is typically a poor fit.&#xA;&#xA;Found a bug? Have an awesome idea? Please `open an&#xA;issue &amp;lt;https://github.com/fish-shell/fish-shell/issues/new&amp;gt;`__.&#xA;&#xA;.. |Build Status| image:: https://github.com/fish-shell/fish-shell/workflows/make%20test/badge.svg&#xA;   :target: https://github.com/fish-shell/fish-shell/actions&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>