<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-07T01:35:03Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alibaba/higress</title>
    <updated>2022-11-07T01:35:03Z</updated>
    <id>tag:github.com,2022-11-07:/alibaba/higress</id>
    <link href="https://github.com/alibaba/higress" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Next-generation Cloud Native Gateway&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.alicdn.com/imgextra/i2/O1CN01NwxLDd20nxfGBjxmZ_!!6000000006895-2-tps-960-290.png&#34; alt=&#34;Higress&#34; width=&#34;240&#34; height=&#34;72.5&#34;&gt; &lt;br&gt; Next-generation Cloud Native Gateway &lt;/h1&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/higress/main/README_EN.md&#34;&gt; English &lt;/a&gt;&lt;a&gt;&lt;/a&gt; | 中文 &lt;/p&gt; &#xA;&lt;p&gt;Higress 是基于阿里内部两年多的 Envoy Gateway 实践沉淀，以开源 &lt;a href=&#34;https://github.com/istio/istio&#34;&gt;Istio&lt;/a&gt; 与 &lt;a href=&#34;https://github.com/envoyproxy/envoy&#34;&gt;Envoy&lt;/a&gt; 为核心构建的下一代云原生网关。Higress 实现了安全防护网关、流量网关、微服务网关三层网关合一，可以显著降低网关的部署和运维成本。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/imgextra/i4/O1CN01OgGP1728t0xeRfRYJ_!!6000000007989-0-tps-1726-1366.jpg&#34; alt=&#34;arch&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/higress/main/#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF&#34;&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/higress/main/#%E6%A0%B8%E5%BF%83%E4%BC%98%E5%8A%BF&#34;&gt;&lt;strong&gt;核心优势&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/higress/main/#quick-start&#34;&gt;&lt;strong&gt;Quick Start&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/higress/main/#%E7%A4%BE%E5%8C%BA&#34;&gt;&lt;strong&gt;社区&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用场景&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Kubernetes Ingress 网关&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Higress 可以作为 K8s 集群的 Ingress 入口网关, 并且兼容了大量 K8s Nginx Ingress 的注解，可以从 K8s Nginx Ingress 快速平滑迁移到 Higress。&lt;/p&gt; &lt;p&gt;支持 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34;&gt;Gateway API&lt;/a&gt; 标准，支持用户从 Ingress API 平滑迁移到 Gateway API。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;微服务网关&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Higress 可以作为微服务网关, 能够对接多种类型的注册中心发现服务配置路由，例如 Nacos, ZooKeeper, Consul 等。&lt;/p&gt; &lt;p&gt;并且深度集成了 &lt;a href=&#34;https://github.com/apache/dubbo&#34;&gt;Dubbo&lt;/a&gt;, &lt;a href=&#34;https://github.com/alibaba/nacos&#34;&gt;Nacos&lt;/a&gt;, &lt;a href=&#34;https://github.com/alibaba/Sentinel&#34;&gt;Sentinel&lt;/a&gt; 等微服务技术栈，基于 Envoy C++ 网关内核的出色性能，相比传统 Java 类微服务网关，可以显著降低资源使用率，减少成本。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;安全防护网关&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Higress 可以作为安全防护网关， 提供 WAF 的能力，并且支持多种认证鉴权策略，例如 key-auth, hmac-auth, jwt-auth, basic-auth, oidc 等。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;核心优势&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;生产等级&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;脱胎于阿里巴巴2年多生产验证的内部产品，支持每秒请求量达数十万级的大规模场景&lt;/p&gt; &lt;p&gt;彻底摆脱 reload 引起的流量抖动，配置变更毫秒级生效且业务无感&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;平滑演进&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;支持 Nacos/Zookeeper 等多种注册中心，可以不依赖 K8s Service 进行服务发现，支持非容器架构平滑演进到云原生架构&lt;/p&gt; &lt;p&gt;支持从 Nginx Ingress Controller 平滑迁移，支持平滑过渡到 Gateway API，支持业务架构平滑演进到 ServiceMesh&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;兼收并蓄&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;兼容 Nginx Ingress Annotation 80%+ 的使用场景，且提供功能更丰富的 Higress Annotation 注解&lt;/p&gt; &lt;p&gt;兼容 Ingress API/Gateway API/Istio API，可以组合多种 CRD 实现流量精细化管理&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;便于扩展&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;提供 Wasm、Lua、进程外三种插件扩展机制，支持多语言编写插件，生效粒度支持全局级、域名级，路由级&lt;/p&gt; &lt;p&gt;插件支持热更新，变更插件逻辑和配置都对流量无损&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/higress/main/#%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83&#34;&gt;&lt;strong&gt;本地环境&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/higress/main/#%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83&#34;&gt;&lt;strong&gt;生产环境&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;本地环境&lt;/h3&gt; &#xA;&lt;h4&gt;第一步、 安装 kubectl &amp;amp; kind&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;MacOS：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -Lo ./kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl&#xA;# for Intel Macs&#xA;[ $(uname -m) = x86_64 ]&amp;amp;&amp;amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-darwin-amd64&#xA;# for M1 / ARM Macs&#xA;[ $(uname -m) = arm64 ] &amp;amp;&amp;amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-darwin-arm64&#xA;chmod +x ./kind ./kubectl&#xA;mv ./kind ./kubectl /some-dir-in-your-PATH/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows 中使用 PowerShell:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl.exe -Lo kubectl.exe https://storage.googleapis.com/kubernetes-release/release/$(curl.exe -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/windows/amd64/kubectl.exe&#xA;curl.exe -Lo kind-windows-amd64.exe https://kind.sigs.k8s.io/dl/v0.17.0/kind-windows-amd64&#xA;Move-Item .\kind-windows-amd64.exe c:\some-dir-in-your-PATH\kind.exe&#xA;Move-Item .\kubectl.exe c:\some-dir-in-your-PATH\kubectl.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -Lo ./kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl&#xA;curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64&#xA;chmod +x ./kind ./kubectl&#xA;sudo mv ./kind ./kubectl /usr/local/bin/kind&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;第二步、 创建并启用 kind&lt;/h4&gt; &#xA;&lt;p&gt;首先创建一个集群配置文件: &lt;code&gt;cluster.conf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# cluster.conf&#xA;kind: Cluster&#xA;apiVersion: kind.x-k8s.io/v1alpha4&#xA;nodes:&#xA;- role: control-plane&#xA;  kubeadmConfigPatches:&#xA;  - |&#xA;    kind: InitConfiguration&#xA;    nodeRegistration:&#xA;      kubeletExtraArgs:&#xA;        node-labels: &#34;ingress-ready=true&#34;&#xA;  extraPortMappings:&#xA;  - containerPort: 80&#xA;    hostPort: 80&#xA;    protocol: TCP&#xA;  - containerPort: 443&#xA;    hostPort: 443&#xA;    protocol: TCP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mac &amp;amp; Linux 系统执行:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kind create cluster --name higress --config=cluster.conf&#xA;kubectl config use-context kind-higress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows 系统执行:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kind.exe create cluster --name higress --config=cluster.conf&#xA;kubectl.exe config use-context kind-higress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;第三步、 安装 istio &amp;amp; higress&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl create ns istio-system&#xA;helm install istio -n istio-system oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/charts/istio-local&#xA;kubectl create ns higress-system&#xA;helm install higress -n higress-system oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/charts/higress-local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;第四步、 创建 Ingress 资源并测试&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl apply -f https://kind.sigs.k8s.io/examples/ingress/usage.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;测试 Ingress 生效：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# should output &#34;foo&#34;&#xA;curl localhost/foo&#xA;# should output &#34;bar&#34;&#xA;curl localhost/bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;生产环境&lt;/h3&gt; &#xA;&lt;h4&gt;第一步、 安装 istio&lt;/h4&gt; &#xA;&lt;p&gt;可以选择安装 higress 发行的 istio 版本:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl create ns istio-system&#xA;helm install istio -n istio-system oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/charts/istio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或者选择安装官方 istio 版本 (将失去部分能力，例如通过 Ingress 注解实现限流的功能):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://istio.io/latest/docs/setup/install&#34;&gt;https://istio.io/latest/docs/setup/install&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;第二步、 安装 higress&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl create ns higress-system&#xA;helm install higress -n higress-system oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/charts/higress &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;第三步、 创建 Ingress 资源并测试&lt;/h4&gt; &#xA;&lt;p&gt;假设在 default 命名空间下已经部署了一个 test service，服务端口为 80 ，则创建下面这个 K8s Ingress&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: networking.k8s.io/v1&#xA;kind: Ingress&#xA;metadata:&#xA;  name: simple-example&#xA;spec:&#xA;  rules:&#xA;  - host: foo.bar.com&#xA;    http:&#xA;      paths:&#xA;      - path: /foo&#xA;        pathType: Prefix&#xA;        backend:&#xA;          service:&#xA;            name: test&#xA;            port:&#xA;              number: 80  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;测试能访问到该服务：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl &#34;$(k get svc -n higress-system higress-gateway -o jsonpath=&#39;{.status.loadBalancer.ingress[0].ip}&#39;)&#34;/foo -H &#39;host: foo.bar.com&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;社区&lt;/h2&gt; &#xA;&lt;h3&gt;感谢&lt;/h3&gt; &#xA;&lt;p&gt;如果没有 Envoy 和 Istio 的开源工作，Higress 就不可能实现，在这里向这两个项目献上最诚挚的敬意。&lt;/p&gt; &#xA;&lt;h3&gt;联系我们&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mailing list: &lt;a href=&#34;mailto:higress@googlegroups.com&#34;&gt;higress@googlegroups.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/imgextra/i3/O1CN01KwJqnM1Rnx6aMR9lD_!!6000000002157-2-tps-1437-1018.png&#34; alt=&#34;contact-us&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Chatterino/chatterino2</title>
    <updated>2022-11-07T01:35:03Z</updated>
    <id>tag:github.com,2022-11-07:/Chatterino/chatterino2</id>
    <link href="https://github.com/Chatterino/chatterino2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chat client for https://twitch.tv&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://fourtf.com/img/chatterino-icon-64.png&#34; alt=&#34;alt text&#34;&gt; Chatterino 2 &lt;a href=&#34;https://github.com/Chatterino/chatterino2/actions?query=workflow%3ABuild+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/Chatterino/chatterino2/workflows/Build/badge.svg?branch=master&#34; alt=&#34;GitHub Actions Build (Windows, Ubuntu, MacOS)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/Chatterino/chatterino2/master&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/Chatterino/chatterino2.svg?branch=master&#34; alt=&#34;Cirrus CI Build (FreeBSD only)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chocolatey.org/packages/chatterino&#34;&gt;&lt;img src=&#34;https://img.shields.io/chocolatey/v/chatterino?include_prereleases&#34; alt=&#34;Chocolatey Package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://flathub.org/apps/details/com.chatterino.chatterino&#34;&gt;&lt;img src=&#34;https://img.shields.io/flathub/v/com.chatterino.chatterino&#34; alt=&#34;Flatpak Package&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Chatterino 2 is a chat client for &lt;a href=&#34;https://twitch.tv&#34;&gt;Twitch.tv&lt;/a&gt;. The Chatterino 2 wiki can be found &lt;a href=&#34;https://wiki.chatterino.com&#34;&gt;here&lt;/a&gt;. Contribution guidelines can be found &lt;a href=&#34;https://wiki.chatterino.com/Contributing%20for%20Developers&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Current releases are available at &lt;a href=&#34;https://chatterino.com&#34;&gt;https://chatterino.com&lt;/a&gt;. Windows users can also install Chatterino &lt;a href=&#34;https://chocolatey.org/packages/chatterino&#34;&gt;from Chocolatey&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Nightly build&lt;/h2&gt; &#xA;&lt;p&gt;You can download the latest Chatterino 2 build over &lt;a href=&#34;https://github.com/Chatterino/chatterino2/releases/tag/nightly-build&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You might also need to install the &lt;a href=&#34;https://aka.ms/vs/17/release/vc_redist.x64.exe&#34;&gt;VC++ Redistributables&lt;/a&gt; from Microsoft if you do not have it installed already.&lt;br&gt; If you still receive an error about &lt;code&gt;MSVCR120.dll missing&lt;/code&gt;, then you should install the &lt;a href=&#34;https://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x64.exe&#34;&gt;VC++ 2013 Restributable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To get source code with required submodules run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/Chatterino/chatterino2.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Chatterino/chatterino2.git&#xA;cd chatterino2&#xA;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Chatterino/chatterino2/master/BUILDING_ON_WINDOWS.md&#34;&gt;Building on Windows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Chatterino/chatterino2/master/BUILDING_ON_WINDOWS_WITH_VCPKG.md&#34;&gt;Building on Windows with vcpkg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Chatterino/chatterino2/master/BUILDING_ON_LINUX.md&#34;&gt;Building on Linux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Chatterino/chatterino2/master/BUILDING_ON_MAC.md&#34;&gt;Building on Mac&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Chatterino/chatterino2/master/BUILDING_ON_FREEBSD.md&#34;&gt;Building on FreeBSD&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code style&lt;/h2&gt; &#xA;&lt;p&gt;The code is formatted using clang format in Qt Creator. &lt;a href=&#34;https://raw.githubusercontent.com/Chatterino/chatterino2/master/src/.clang-format&#34;&gt;.clang-format&lt;/a&gt; contains the style file for clang format.&lt;/p&gt; &#xA;&lt;h3&gt;Get it automated with QT Creator + Beautifier + Clang Format&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download LLVM: &lt;a href=&#34;https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/LLVM-11.0.0-win64.exe&#34;&gt;https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/LLVM-11.0.0-win64.exe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;During the installation, make sure to add it to your path&lt;/li&gt; &#xA; &lt;li&gt;In QT Creator, select &lt;code&gt;Help&lt;/code&gt; &amp;gt; &lt;code&gt;About Plugins&lt;/code&gt; &amp;gt; &lt;code&gt;C++&lt;/code&gt; &amp;gt; &lt;code&gt;Beautifier&lt;/code&gt; to enable the plugin&lt;/li&gt; &#xA; &lt;li&gt;Restart QT Creator&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Tools&lt;/code&gt; &amp;gt; &lt;code&gt;Options&lt;/code&gt; &amp;gt; &lt;code&gt;Beautifier&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Under &lt;code&gt;General&lt;/code&gt; select &lt;code&gt;Tool: ClangFormat&lt;/code&gt; and enable &lt;code&gt;Automatic Formatting on File Save&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Under &lt;code&gt;Clang Format&lt;/code&gt; select &lt;code&gt;Use predefined style: File&lt;/code&gt; and &lt;code&gt;Fallback style: None&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Qt creator should now format the documents when saving it.&lt;/p&gt; &#xA;&lt;h2&gt;Doxygen&lt;/h2&gt; &#xA;&lt;p&gt;Doxygen is used to generate project information daily and is available &lt;a href=&#34;https://doxygen.chatterino.com&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>esphome/esphome</title>
    <updated>2022-11-07T01:35:03Z</updated>
    <id>tag:github.com,2022-11-07:/esphome/esphome</id>
    <link href="https://github.com/esphome/esphome" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ESPHome is a system to control your ESP8266/ESP32 by simple yet powerful configuration files and control them remotely through Home Automation systems.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ESPHome &lt;a href=&#34;https://discord.gg/KhAMKrd&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/429907082951524364.svg?sanitize=true&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/esphome/esphome/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/esphome/esphome.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://esphome.io/&#34;&gt;&lt;img src=&#34;https://esphome.io/_images/logo-text.png&#34; alt=&#34;ESPHome Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Documentation:&lt;/strong&gt; &lt;a href=&#34;https://esphome.io/&#34;&gt;https://esphome.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For issues, please go to &lt;a href=&#34;https://github.com/esphome/issues/issues&#34;&gt;the issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For feature requests, please see &lt;a href=&#34;https://github.com/esphome/feature-requests/issues&#34;&gt;feature requests&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>