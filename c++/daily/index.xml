<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-17T01:25:30Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mrousavy/nitro</title>
    <updated>2024-09-17T01:25:30Z</updated>
    <id>tag:github.com,2024-09-17:/mrousavy/nitro</id>
    <link href="https://github.com/mrousavy/nitro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ”¥ Insanely fast native C++, Swift or Kotlin modules with a statically compiled binding layer to JSI&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://margelo.io&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./docs/static/img/banner-nitro-modules-dark.png&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;./docs/static/img/banner-nitro-modules-light.png&#34;&gt; &#xA;  &lt;img alt=&#34;Nitro Modules&#34; src=&#34;https://raw.githubusercontent.com/mrousavy/nitro/main/docs/static/img/banner-nitro-modules-light.png&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nitro Modules&lt;/strong&gt; are highly efficient native modules with a statically compiled binding layer to JSI, and typesafe JS bindings. It consists of two parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/nitro/main/packages/react-native-nitro-modules&#34;&gt;&lt;strong&gt;react-native-nitro-modules&lt;/strong&gt;&lt;/a&gt;: The core C++ library powering all nitro modules&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/nitro/main/packages/nitrogen&#34;&gt;&lt;strong&gt;nitrogen&lt;/strong&gt;&lt;/a&gt;: A code-generator for nitro module library authors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://npmjs.org/react-native-nitro-modules&#34;&gt;react-native-nitro-modules&lt;/a&gt; from npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm i react-native-nitro-modules&#xA;cd ios &amp;amp;&amp;amp; pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrousavy.github.io/nitro/&#34;&gt;&lt;strong&gt;Nitro&lt;/strong&gt; docs ðŸ“š&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/nitro/main/packages/nitrogen/README.md&#34;&gt;&lt;strong&gt;nitrogen&lt;/strong&gt;/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/nitro/main/packages/react-native-nitro-modules/README.md&#34;&gt;&lt;strong&gt;react-native-nitro-modules&lt;/strong&gt;/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/nitro/main/packages/react-native-nitro-image/README.md&#34;&gt;&lt;strong&gt;react-native-nitro-image&lt;/strong&gt; example module&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;h3&gt;Cross-platform&lt;/h3&gt; &#xA;&lt;p&gt;Cross-platform native modules can be built with C++. Any custom C++ types can be used and bridged to JS with minimal overhead.&lt;/p&gt; &#xA;&lt;p&gt;JS &amp;lt;-&amp;gt; C++ type converters are statically generated ahead of time - no more dynamic lookups or runtime parser errors! ðŸ¥³&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;iOS native modules and view components can be written either in pure C++, or pure Swift. Thanks to Swift 5.9, Swift Nitro Modules &lt;a href=&#34;https://www.swift.org/documentation/cxx-interop/&#34;&gt;bridge directly to C++&lt;/a&gt; instead of going through Objective-C message sends. Woohoo, no more Objective-C, and &lt;strong&gt;zero overhead&lt;/strong&gt; C++ -&amp;gt; Swift calls! ðŸ¥³&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Android native modules and view components can be written either in pure C++, or pure Kotlin/Java. Thanks to fbjni, even complex types can be effortlessly bridged to Kotlin/Java with minimal overhead! ðŸ”¥&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/nitro/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to learn how to contribute to the repository and the development workflow.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>