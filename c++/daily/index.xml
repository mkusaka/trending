<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-25T01:31:31Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>L8X/Roblox-Client-Optimizer</title>
    <updated>2023-04-25T01:31:31Z</updated>
    <id>tag:github.com,2023-04-25:/L8X/Roblox-Client-Optimizer</id>
    <link href="https://github.com/L8X/Roblox-Client-Optimizer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatically tweaks FFlags to optimize your Roblox client&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/L8X/Roblox-Client-Optimizer&#34;&gt; &lt;img height=&#34;200&#34; src=&#34;https://user-images.githubusercontent.com/100449899/233845084-569622a4-e8d3-4ab4-9ebc-7e03d0f01d0c.png&#34;&gt; &lt;/a&gt; &#xA; &lt;h1&gt;Roblox Client Optimizer&lt;/h1&gt; &#xA; &lt;p&gt;Roblox Client Optimizer tweaks flags to optimize your Roblox client.&lt;/p&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/L8X/Roblox-Client-Optimizer/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/L8X/Roblox-Client-Optimizer?label=Version&amp;amp;logo=GitHub&amp;amp;color=green&#34; alt=&#34;Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/L8X/Roblox-Client-Optimizer&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/L8X/Roblox-Client-Optimizer?label=Forks&amp;amp;logo=GitHub&#34; alt=&#34;Forks&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/L8X/Roblox-Client-Optimizer&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/L8X/Roblox-Client-Optimizer?label=Stars&amp;amp;logo=GitHub&amp;amp;color=yellow&#34; alt=&#34;Stars&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/L8X/Roblox-Client-Optimizer/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/L8X/Roblox-Client-Optimizer?label=License&amp;amp;logo=GitHub&#34; alt=&#34;Forks&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Roblox Client Optimizer tweaks flags to optimize your Roblox client. Click &lt;a href=&#34;https://github.com/L8X/Roblox-Client-Optimizer/releases&#34;&gt;here&lt;/a&gt; to download our latest version.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;We now have an official RCO community Discord server! Join &lt;a href=&#34;https://roblox-client-optimizer.simulhost.com/discord&#34;&gt;here!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unlocks FPS (frames per second)&lt;/li&gt; &#xA; &lt;li&gt;Optimizes caching, graphics, and textures&lt;/li&gt; &#xA; &lt;li&gt;Increases user privacy&lt;/li&gt; &#xA; &lt;li&gt;Disables Crashpad &amp;amp; Backtrace crash metrics&lt;/li&gt; &#xA; &lt;li&gt;Disables large portions of client telemetry&lt;/li&gt; &#xA; &lt;li&gt;Disables &lt;code&gt;AbuseReportScreenshot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enables font preloading and texture item preloading&lt;/li&gt; &#xA; &lt;li&gt;Enables &lt;code&gt;Memory Prioritization&lt;/code&gt; and &lt;code&gt;Performance Control&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gives you more graphics quality options (21 instead of 10)&lt;/li&gt; &#xA; &lt;li&gt;Enables &lt;code&gt;Quick Game Launch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enables the &lt;code&gt;Parallel Humanoid Manager&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enables &lt;code&gt;Batch Asset Api&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Official Websites List&lt;/h2&gt; &#xA;&lt;p&gt;The only official websites of RCO are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/L8X/Roblox-Client-Optimizer&#34;&gt;https://github.com/L8X/Roblox-Client-Optimizer&lt;/a&gt; (Official GitHub)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://roblox-client-optimizer.simulhost.com&#34;&gt;https://roblox-client-optimizer.simulhost.com&lt;/a&gt; (Official Website)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rco.ddns.net&#34;&gt;https://rco.ddns.net&lt;/a&gt; (Official Website - Deprecated)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Anything outside of these three pages (and any links listed on them) claiming to be RCO are NOT RCO and are attempting to defraud you.&lt;/p&gt; &#xA;&lt;h2&gt;Question &amp;amp; Answer&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why not manually install flags? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Manually installing flags is time consuming. When Roblox updates, you must remember to install the flag file manually again, while Roblox Client Optimizer will handle this operation automatically.&lt;/li&gt; &#xA;   &lt;li&gt;If a major bug is found within the flag file, there is no way for us to notify you to update it, therefore we&#39;ve implemented measures to automatically update our flag list if such a problem arose.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Will the software slow down my computer? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;No&lt;/strong&gt;, the software is very lightweight and only checks for updates to our flag list and updates to itself. Additionally, we use a content delivery network powered by &lt;a href=&#34;https://www.cloudflare.com&#34;&gt;Cloudflare&lt;/a&gt; and &lt;a href=&#34;https://www.fastly.com&#34;&gt;Fastly&lt;/a&gt; to optimize the bandwidth usage and file size of any flag file or downloads that the software makes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Will I get banned for using this? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;No&lt;/strong&gt;, our operations are fully compliant with the &lt;a href=&#34;https://help.roblox.com/hc/articles/115004647846-Roblox-Terms-of-Use&#34;&gt;Roblox Terms of Use&lt;/a&gt;, and we use a method that &lt;a href=&#34;https://www.roblox.com&#34;&gt;Roblox&lt;/a&gt; themselves intentionally added to the client to modify flags. Roblox Client Optimizer remains operational regardless of anti-cheat measures, as we do not inject a DLL nor modify live client memory - our software is not an exploit, or a tool used to aid in exploiting.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;What are flags? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The Roblox engine uses a system called fast flags as part of the deployment process. When code is shipped, not all of it is active by default. Rather, the changes are enabled and disabled dynamically via &lt;code&gt;FFlags&lt;/code&gt;, even after the code is live in production. We welcome you to read more about flags &lt;a href=&#34;https://devforum.roblox.com/t/254517&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/MaximumADHD/Roblox-FFlag-Tracker&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find larger Q/A in our &lt;a href=&#34;https://roblox-client-optimizer.simulhost.com/discord&#34;&gt;Discord Server!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do we collect and store user data? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;No&lt;/strong&gt;, the program itself does not collect &lt;strong&gt;ANY&lt;/strong&gt; data, telemetry, or analytics from our users. The only possible data transferred is due to your use of Roblox Client Optimizer, where the IP address of your devices is required to connect to the internet and therefore update Roblox Client Optimizer and the flag list, however our content delivery providers have an agreement with us called a Data Processing Addendum, which restricts them from using your data (just your IP address) outside of delivering the files to you that Roblox Client Optimizer requests.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;What happens to time wasting issues and pull requests? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Posting time wasting issues and pull requests may result in your account being blocked from the repository. Please ensure all contributions are meaningful and correct. Before posting an issue, try to make sure there is not already one regarding your issue, if there is, we welcome you to comment on it.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GDPR, CCPA &amp;amp; Coppa Disclosure&lt;/h3&gt; &#xA;&lt;p&gt;We are &lt;strong&gt;NOT&lt;/strong&gt; a data handler or processor, for any queries relating to data transmitted via the network traffic of Roblox Client Optimizer (keep in mind your IP address is disclosed to every website you visit), please contact &lt;a href=&#34;https://www.cloudfare.com&#34;&gt;Cloudfare&lt;/a&gt;, &lt;a href=&#34;https://www.fastly.com&#34;&gt;Fastly&lt;/a&gt;, and &lt;a href=&#34;https://www.microsoft.com&#34;&gt;Microsoft&lt;/a&gt; directly.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wondertrader/wondertrader</title>
    <updated>2023-04-25T01:31:31Z</updated>
    <id>tag:github.com,2023-04-25:/wondertrader/wondertrader</id>
    <link href="https://github.com/wondertrader/wondertrader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WonderTrader——量化研发交易一站式框架&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;http://wt.f-sailors.cn/wt/logo_qcode_noad.jpg&#34; alt=&#34;WonderTrader2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/version-0.9.7-blueviolet.svg?sanitize=true&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-windows|linux-yellow.svg&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/build-passing-brightgreen&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-orange&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;&lt;em&gt;WonderTrader&lt;/em&gt;是什么&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WonderTrader&lt;/code&gt;是一个基于&lt;code&gt;C++&lt;/code&gt;核心模块的，适应全市场&lt;strong&gt;全品种&lt;/strong&gt;交易的，&lt;strong&gt;高效率&lt;/strong&gt;、&lt;strong&gt;高可用&lt;/strong&gt;的量化交易开发框架。&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;面向于专业机构的整体架构&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;数十亿级的实盘管理规模&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;从数据落地清洗、到回测分析、再到实盘交易、运营调度，&lt;strong&gt;量化交易所有环节全覆盖&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WonderTrader&lt;/code&gt;依托于高速的&lt;code&gt;C++&lt;/code&gt;核心框架，高效易用的应用层框架（&lt;a href=&#34;https://github.com/wondertrader/wtpy&#34;&gt;wtpy&lt;/a&gt;），致力于打造一个从研发、交易、到运营、调度，全部环节全自动一站式的量化研发交易场景。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WonderTrader&lt;/code&gt;于&lt;code&gt;0.9&lt;/code&gt;开启了一个新的&lt;strong&gt;UFT引擎&lt;/strong&gt;，针对超低延时交易的需求进行实现，经过一系列的优化以后，系统延迟在&lt;strong&gt;175纳秒&lt;/strong&gt;之内。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WonderTrader&lt;/code&gt;的实盘运行架构 &lt;img src=&#34;https://raw.githubusercontent.com/wondertrader/wondertrader/master/images/prod_struture.png&#34; alt=&#34;WonderTrader实盘运行架构.png&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;WonderTrader&lt;/code&gt;的优势&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;丰富的交易引擎&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;CTA引擎&lt;/strong&gt;，也叫&lt;strong&gt;同步策略引擎&lt;/strong&gt;，一般适用于标的较少，计算逻辑较快的策略，事件+时间驱动。典型的应用场景包括单标的择时、中频以下的套利等。Demo中提供的DualThrust策略，单次重算平均耗时，Python实现版本约70多微秒，C++实现版本约4.5微秒。 &lt;img src=&#34;https://raw.githubusercontent.com/wondertrader/wondertrader/master/images/cta.jpg&#34; alt=&#34;CTA.jpg&#34;&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;SEL引擎&lt;/strong&gt;，也叫&lt;strong&gt;异步策略引擎&lt;/strong&gt;，一般适用于标的较多，计算逻辑耗时较长的策略，时间驱动。典型应用场景包括多因子选股策略、截面多空策略等。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;HFT引擎&lt;/strong&gt;，也叫&lt;strong&gt;高频策略引擎&lt;/strong&gt;，主要针对高频或者低延时策略，事件驱动，&lt;strong&gt;系统延迟在1-2微秒之间&lt;/strong&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;UFT引擎&lt;/strong&gt;，也叫&lt;strong&gt;极速策略引擎&lt;/strong&gt;，主要针对超高频或者超低延时策略，事件驱动，&lt;strong&gt;系统延迟在200纳秒之内&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/wondertrader/wondertrader/master/images/hft.jpg&#34; alt=&#34;CTA.jpg&#34;&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;完善的开发接口&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;高效易用的数据接口&lt;/strong&gt;：每个策略都会有独立的上下文模块，上下文会自动缓存策略所需要的数据，策略直接调用即可。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;简洁的信号接口&lt;/strong&gt;：策略只需要设置目标仓位，后台自动执行。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;上下文无关的策略逻辑&lt;/strong&gt;：策略不需要自己记录任何数据，每次只需要向接口查询即可，数据全部缓存在内存中，访问效率有保障。&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;专业的策略管理&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;策略组合统一管理&lt;/strong&gt;：采用策略组合的方式，主要为了配合专业机构的产品管理。一个组合盘，对应若干个策略的若干个标的，再设置一个基本的单位资金量，这就是产品管理的基本组合盘，方便扩展。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;目标仓位合并执行&lt;/strong&gt;：目标仓位合并以后，避免了自成交的风险，同时降低了保证金占用和佣金开销。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;理论部位独立存储&lt;/strong&gt;：策略的理论部位是独立存储的，组合盘的整体绩效也是独立核算的，轻松胜任内部管理。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;多账户并发执行&lt;/strong&gt;：组合的目标头寸确定以后，就通过多个交易通道同步执行，可以有效的保障不同的账户的绩效的一致性。&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;全类型的回测支持&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;语言支持全&lt;/strong&gt;：不论是&lt;code&gt;C++&lt;/code&gt;开发的策略还是&lt;code&gt;wtpy&lt;/code&gt;下开发的&lt;code&gt;python&lt;/code&gt;策略，或者其他语言子框架下开发的策略，都在&lt;strong&gt;统一的回测引擎&lt;/strong&gt;中统一回测。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;回测效率高&lt;/strong&gt;：回测引擎采用&lt;code&gt;C++&lt;/code&gt;开发，回测效率高，速度快。不管是&lt;code&gt;C++&lt;/code&gt;策略还是&lt;code&gt;Python&lt;/code&gt;策略，都能快速验证。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;策略支持完备&lt;/strong&gt;：除了&lt;strong&gt;CTA策略&lt;/strong&gt;、&lt;strong&gt;SEL策略&lt;/strong&gt;可以回测，&lt;strong&gt;HFT策略&lt;/strong&gt;、&lt;strong&gt;UFT策略&lt;/strong&gt;和&lt;strong&gt;执行单元&lt;/strong&gt;也能回测 &lt;img src=&#34;https://raw.githubusercontent.com/wondertrader/wondertrader/master/images/backtest.jpg&#34; alt=&#34;backtest.jpg&#34;&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;高效的数据伺服&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;本地数据伺服&lt;/strong&gt;：&lt;code&gt;WonderTrader&lt;/code&gt;内置的存储引擎采用本地存储，在本地建立数据伺服，通过&lt;code&gt;udp&lt;/code&gt;端口广播实时行情，实现&lt;code&gt;1+N&lt;/code&gt;的服务结构，可以同时向多个组合盘提供无差别数据服务。专业数据供应商级别的架构，支持搭建多级分发体系，轻松应对各种需求场景。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;缓存历史数据&lt;/strong&gt;：交易过程中，历史数据全部缓存到内存中，同时采用内存直接引用内存数据切片的机制，从根本上避免数据拷贝，提高访问效率。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;高效存储引擎&lt;/strong&gt;：实时数据采用&lt;code&gt;mmap&lt;/code&gt;文件，读写高速并且不会丢失数据。同时支持mysql数据库存储历史数据，更方便在此基础上搭建自有的投研数据库。&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;灵活的风险控制&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;组合盘资金风控&lt;/strong&gt;：组合盘有预设的资金规模，可以针对组合盘的虚拟资金，进行组合盘的资金风控。最大的优点是，如果组合盘处于下行阶段，触发风控以后，即使资金账户没有打到风控线，也不会再继续下行了。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;通道流量风控&lt;/strong&gt;：主要针对&lt;strong&gt;合规风险&lt;/strong&gt;，控制的是总撤单笔数、短时间内下单次数和撤单次数等指标。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;账户资金风控&lt;/strong&gt;：和一般意义上的资金风控一致，主要控制账户资金的回撤等。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;紧急人工介入&lt;/strong&gt;：提供一个紧急的人工介入的入口，通过上传一个配置文件，达到控制的目的。主要适用于单品种出现风险，如果全市场风险，人工停止系统即可。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;离合器机制&lt;/strong&gt;：离合器机制依托于信号和执行分离的机制的，主要是如果策略或组合发生风险，通过离合器机制，直接断开信号执行。优点是不影响策略的逻辑，只断开信号的执行，可以继续观察策略在特定行情阶段的表现，和理论研究相互印证。 &lt;img src=&#34;https://raw.githubusercontent.com/wondertrader/wondertrader/master/images/risk.jpg&#34; alt=&#34;risk.jpg&#34;&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;强大的控制台&lt;/strong&gt;（&lt;a href=&#34;https://github.com/wondertrader/wtpy&#34;&gt;wtpy&lt;/a&gt;的监控服务）&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;组合盘运行监控&lt;/strong&gt;：可以查看实时运行日志、策略理论数据、交易通道数据等，并提供手动启停的入口。 &lt;img src=&#34;https://raw.githubusercontent.com/wondertrader/wondertrader/master/images/monitor.png&#34; alt=&#34;monitor.jpg&#34;&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;自动调度服务&lt;/strong&gt;：全自动调度定时任务（启动、停止、重启），支持按周设置任务重复，支持进程守护。 &lt;img src=&#34;http://wt.f-sailors.cn/snapshots/schedule.jpg&#34; alt=&#34;schedule.jpg&#34;&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;实时事件通知&lt;/strong&gt;：监控服务接收组合盘推送的事件，然后转发给监控端，提示给用户。&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;回测查看器&lt;/strong&gt;：使用WtBtSnooper模块，可以进行回测数据的查看分析。 &lt;img src=&#34;https://raw.githubusercontent.com/wondertrader/wondertrader/master/images/bt_summary.png&#34; alt=&#34;bt_summary.jpg&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/wondertrader/wondertrader/master/images/bt_details.png&#34; alt=&#34;bt_details.jpg&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/wondertrader/wondertrader/master/images/bt_signals.png&#34; alt=&#34;bt_signals.jpg&#34;&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;全自动远程部署(在建)&lt;/strong&gt;：全自动在线远程部署，提供回测环境、实盘环境等多种应用场景的自动化部署服务。&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;常见应用场景&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;团队内控&lt;/strong&gt; 策略组合管理的方式，给团队内部管理提供了完美的解决方案。&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;一方面，不同投研人员，不同的策略可以组合成一个组合运行，而且每个策略都有自己的理论部位，即使交易相同标的也不会互相干扰；&lt;/li&gt; &#xA;   &lt;li&gt;另一方面，&lt;code&gt;C++&lt;/code&gt;级别的代码可以提供最大的策略保密性，投研人员不用担心策略的泄露；&lt;/li&gt; &#xA;   &lt;li&gt;策略的绩效是独立核算的，团队内部的考核指标可以很容易实现。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;多账户交易&lt;/strong&gt;（&lt;strong&gt;多产品配置&lt;/strong&gt;） 对于不同行情周期下的策略组合，一般团队都会有一个当下最适应的策略组合。但是同一时期，团队可能会同时管理很多个账户，而其实这些账户用到的策略组合都是相同的。这个时候&lt;code&gt;WonderTrader&lt;/code&gt;平台提供的&lt;strong&gt;M+1+N执行架构&lt;/strong&gt;就能够完美的满足这个需求。 &lt;img src=&#34;https://raw.githubusercontent.com/wondertrader/wondertrader/master/images/m1n.png&#34; alt=&#34;WonderTrader基本架构.jpg&#34;&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;首先，策略组合有自己的单位资金容量和对应的风险参数，以及各个策略的单位交易数量；&lt;/li&gt; &#xA;   &lt;li&gt;其次，不同的账户有不同的资金规模和风险偏好，这个时候只需要根据这些要求配置不同的手数倍率即可； &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;假如某组合盘P基本资金规模为500w，预期收益30%，最大回撤10%，收益风险比3:1；A账户使用该组合盘P交易，A账户的资金量为1000w，可以接受的最大回撤也是10%；B账户也使用该组合盘P交易，资金量也是1000w，但是可以接受的最大回撤为20%；这个时候因为A账户风险参数和基本盘一致，所以A账户的手数放大倍数为资金规模/基本盘的资金规模=1000w/500w=2倍；B账户因为可以忍受最大回撤20%，所以手数比例还要再放大一倍，即B账户可以配置4倍。&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;   &lt;li&gt;第三，不同的账户可以配置独立的风控逻辑，账户之间不会互相影响。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;多标的跟踪&lt;/strong&gt; 一些用解释型语言（如&lt;code&gt;Python&lt;/code&gt;）开发核心模块的量化交易平台，在标的数不多的情况下，能够胜任各种不同的应用场景。但是当需要跟踪的标的数达到100个以上，甚至是50个以上时，就无法满足需求了。一方面资源占用大，利用&lt;code&gt;multiprocess&lt;/code&gt;等机制，虽然各个标的独立运行，但是上百个标的就要新建上百个进程，内存和CPU开销都非常大；另一方面策略效率低，资源争强严重的情况下，策略反应也会变慢。 &lt;code&gt;WonderTrader&lt;/code&gt;核心采用&lt;code&gt;C++&lt;/code&gt;开发，数据伺服更是一开始就设计成向多个组合同时提供服务的架构，同时策略和执行剥离，信号执行和策略计算完全在两个不同的线程中独立运行。在这样的架构下，就能够很好的满足多标的跟踪的需求。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;大计算量策略&lt;/strong&gt; 一些策略计算量会非常惊人，比较典型的就是选股策略，不管是用多因子也好，还是基本面也好，都会从数千只股票中，逐步筛选，从而得到最后的目标股池。另外，一些多标的的多因子框架也具有较大的计算量。这样的策略，计算量非常庞大，耗时也长。 &lt;code&gt;WonderTrader&lt;/code&gt;的&lt;code&gt;SEL&lt;/code&gt;引擎就是为了满足这方面的需求而定制的。&lt;code&gt;SEL&lt;/code&gt;引擎采用异步时间驱动的模式，通过向引擎注册重算时间调度（支持日内，每日、每周、每月的等多种周期），定时触发重算，然后调整多标的的目标仓位，从而输出信号。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;极速交易&lt;/strong&gt; &lt;code&gt;WonderTrader&lt;/code&gt;使用&lt;code&gt;C++&lt;/code&gt;作为底层核心开发语言，一个最重要的目的就是&lt;strong&gt;追求极致性能&lt;/strong&gt;，所以&lt;code&gt;WonderTrader&lt;/code&gt;的使用场景中&lt;strong&gt;高频交易&lt;/strong&gt;或者&lt;strong&gt;极速交易&lt;/strong&gt;有一个非常大的占比。&lt;code&gt;WonderTrader&lt;/code&gt;于&lt;code&gt;v0.9&lt;/code&gt;版本开设了一个新的&lt;strong&gt;UFTEngine&lt;/strong&gt;，专门针对极速交易的场景。 和原来的&lt;code&gt;HFTEngine&lt;/code&gt;不同，&lt;code&gt;HFTEngine&lt;/code&gt;针对的是一般高频，侧重于&lt;strong&gt;向应用层提供高性能的底层组件&lt;/strong&gt;，会考虑更多的兼容性问题以及应用层对接的问题，&lt;strong&gt;系统延迟在1-2微秒之间&lt;/strong&gt;。而&lt;code&gt;UFTEngine&lt;/code&gt;则完全从&lt;code&gt;WtCore&lt;/code&gt;项目剥离，不向应用层提供接口，全部在&lt;code&gt;C++&lt;/code&gt;进行开发实现，&lt;strong&gt;系统延迟在200ns以内&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;算法交易&lt;/strong&gt; &lt;code&gt;WonderTrader&lt;/code&gt;有一个独立的执行器入口模块&lt;code&gt;WtExecMon&lt;/code&gt;，用户可以在此基础上实现算法交易。&lt;code&gt;WonderTrader&lt;/code&gt;的&lt;strong&gt;M+1+N&lt;/strong&gt;执行架构中，&lt;strong&gt;1+N&lt;/strong&gt;执行部分剥离出来，就可以作为一个&lt;strong&gt;独立算法交易执行器&lt;/strong&gt;来使用。用户在使用的时候，通过设置指定标的的目标头寸，算法执行单元就可以按照预设的算法进行交易下单。 用户可以通过实现自己的&lt;code&gt;WtExecFact&lt;/code&gt;模块，来添加更多的算法执行单元。高效的&lt;code&gt;C++&lt;/code&gt;底层，可以给算法执行单元的执行效果提供有力的保障。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;支持的交易接口&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;期货 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CTP&lt;/li&gt; &#xA;   &lt;li&gt;CTPMini&lt;/li&gt; &#xA;   &lt;li&gt;飞马Femas&lt;/li&gt; &#xA;   &lt;li&gt;艾克朗科（仅组播行情）&lt;/li&gt; &#xA;   &lt;li&gt;易达&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;期权 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CTPOpt&lt;/li&gt; &#xA;   &lt;li&gt;金证期权maOpt&lt;/li&gt; &#xA;   &lt;li&gt;QWIN二开&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;股票 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;中泰XTP&lt;/li&gt; &#xA;   &lt;li&gt;中泰XTPXAlgo&lt;/li&gt; &#xA;   &lt;li&gt;华鑫奇点&lt;/li&gt; &#xA;   &lt;li&gt;华锐ATP&lt;/li&gt; &#xA;   &lt;li&gt;宽睿OES&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;wtpy&lt;/code&gt;简介&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wondertrader/wtpy&#34;&gt;wtpy&lt;/a&gt;是构建在&lt;code&gt;WonderTrader&lt;/code&gt;核心模块之上的，使用&lt;code&gt;Python3&lt;/code&gt;开发的&lt;code&gt;WonderTrader&lt;/code&gt;的&lt;code&gt;Python3&lt;/code&gt;子框架&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Python&lt;/code&gt;作为量化领域最流行的语言，在时序数据处理上有许多非常受欢迎的强大的第三方库&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Python&lt;/code&gt;作为一种解释型语言，代码编写和调试都非常方便，不需要编译就可以直接运行&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Python&lt;/code&gt;的跨平台属性也使&lt;code&gt;Python&lt;/code&gt;可以应用到更多的场景中&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wtpy&lt;/code&gt;主要功能是作为&lt;code&gt;WonderTrader&lt;/code&gt;在&lt;code&gt;Python&lt;/code&gt;语言的外延&lt;/li&gt; &#xA; &lt;li&gt;同时&lt;code&gt;wtpy&lt;/code&gt;还内置了一个强大的监控服务组件&lt;code&gt;WtMonSvr&lt;/code&gt;。该组件提供了远程的&lt;code&gt;webui&lt;/code&gt;的监控界面，可以实时监控策略组合的运行情况，还提供全天&lt;code&gt;24×7&lt;/code&gt;的自动调度服务，为你的交易保驾护航。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;WonderTrader&lt;/code&gt;怎么获取&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WonderTrader&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;github&lt;/code&gt;地址：&lt;a href=&#34;https://github.com/wondertrader/wondertrader&#34;&gt;https://github.com/wondertrader/wondertrader&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitee&lt;/code&gt;地址：&lt;a href=&#34;https://gitee.com/wondertrader/wondertrader&#34;&gt;https://gitee.com/wondertrader/wondertrader&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wtpy&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;github&lt;/code&gt;地址：&lt;a href=&#34;https://github.com/wondertrader/wtpy&#34;&gt;https://github.com/wondertrader/wtpy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitee&lt;/code&gt;地址：&lt;a href=&#34;https://gitee.com/wondertrader/wtpy&#34;&gt;https://gitee.com/wondertrader/wtpy&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wtpy&lt;/code&gt;获取地址：&lt;a href=&#34;https://pypi.org/project/wtpy/&#34;&gt;https://pypi.org/project/wtpy/&lt;/a&gt; &lt;code&gt;wtpy&lt;/code&gt;可以直接在&lt;code&gt;python3.8&lt;/code&gt;以上的版本安装 &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install wtpy --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;WonderTrader&lt;/code&gt;延伸项目&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;将&lt;code&gt;wtpy&lt;/code&gt;作为底层回测引擎的强化学习框架&lt;code&gt;Wt4ElegantRL&lt;/code&gt; &lt;a href=&#34;https://github.com/drlgistics/Wt4ElegantRL&#34;&gt;https://github.com/drlgistics/Wt4ElegantRL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;写在最后&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;关注公众号&lt;code&gt;wondertrader&lt;/code&gt;，可以收到&lt;code&gt;WonderTrader&lt;/code&gt;的实时资讯&lt;/li&gt; &#xA; &lt;li&gt;用户交流QQ群上线：&lt;code&gt;610730738&lt;/code&gt;(加入前请先&lt;code&gt;star&lt;/code&gt;一下, 然后提供&lt;code&gt;github&lt;/code&gt;用户名)&lt;/li&gt; &#xA; &lt;li&gt;更多&lt;code&gt;WonderTrader&lt;/code&gt;的文档请看&lt;a href=&#34;https://wondertrader.github.io/&#34;&gt;https://wondertrader.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WonderTrader&lt;/code&gt;半官方文档 &lt;a href=&#34;https://dumengru.github.io/docs_wondertrader/&#34;&gt;https://dumengru.github.io/docs_wondertrader/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@ZzzzHeJ的&lt;code&gt;WonderTrader&lt;/code&gt;学习笔记&lt;a href=&#34;https://zzzzhej.github.io/WonderTrader-Learning-Notes/&#34;&gt;https://zzzzhej.github.io/WonderTrader-Learning-Notes/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>