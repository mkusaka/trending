<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-29T01:30:03Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bluewhalesystems/sold</title>
    <updated>2023-07-29T01:30:03Z</updated>
    <id>tag:github.com,2023-07-29:/bluewhalesystems/sold</id>
    <link href="https://github.com/bluewhalesystems/sold" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The sold linker&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sold: The commercial version of the mold linker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;sold&lt;/em&gt; is the commercial version of the &lt;a href=&#34;https://github.com/rui314/mold&#34;&gt;mold&lt;/a&gt; linker. Unlike the mold linker whose license is AGPL, the sold linker is available under an ordinary, per-user, per-month/year commercial license. sold is a superset of mold; in addition to all the mold&#39;s features, sold supports macOS/iOS.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/bluewhalesystems/sold/main/LICENSE.md&#34;&gt;End User Agreement License&lt;/a&gt; for the details about licensing terms. You can purchase a subscription or obtain an evaluation license at &lt;a href=&#34;https://bluewhale.systems&#34;&gt;our website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;The build instruction for sold is the same as for mold except that you check out &lt;code&gt;https://github.com/bluewhalesystems/sold.git&lt;/code&gt; instead of &lt;code&gt;https://github.com/rui314/mold.git&lt;/code&gt;. For the details, please see &lt;a href=&#34;https://github.com/rui314/mold#how-to-build&#34;&gt;https://github.com/rui314/mold#how-to-build&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;sold is installed under several different executable names as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ld.sold&lt;/code&gt;: GNU ld-compatible linker for Linux and other ELF-based systems. The instructions to use sold on Linux is the same as the mold linker. For the details, see the &lt;a href=&#34;https://github.com/rui314/mold&#34;&gt;mold&#39;s README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ld64.sold&lt;/code&gt;: Apple&#39;s ld-compatible mode for macOS/iOS. You can use the linker on macOS by adding &lt;code&gt;--ld-path=path/to/ld64.sold&lt;/code&gt; to the linker flags.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ld.mold&lt;/code&gt; and &lt;code&gt;ld64.mold&lt;/code&gt;: They are just aliases for &lt;code&gt;ld.sold&lt;/code&gt; and &lt;code&gt;ld64.sold&lt;/code&gt;, respectively, so that you don&#39;t have to change the linker name in your build system from &lt;code&gt;mold&lt;/code&gt; to &lt;code&gt;sold&lt;/code&gt; after purchasing a commercial license.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>hasherezade/exe_to_dll</title>
    <updated>2023-07-29T01:30:03Z</updated>
    <id>tag:github.com,2023-07-29:/hasherezade/exe_to_dll</id>
    <link href="https://github.com/hasherezade/exe_to_dll" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Converts a EXE into DLL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EXE_to_DLL&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/hasherezade/exe-to-dll&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/2exf5ulw51klq8wt?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hasherezade/exe_to_dll/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/hasherezade/exe_to_dll.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hasherezade/exe_to_dll/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/hasherezade/exe_to_dll/total.svg?sanitize=true&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Converts an EXE, so that it can be loaded like a DLL.&lt;br&gt; &lt;b&gt;Supports both 32 and 64 bit DLLs&lt;/b&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Inspired by the idea of &lt;a href=&#34;https://github.com/guywhataguy/&#34;&gt;@guywhataguy&lt;/a&gt;. Read more &lt;a href=&#34;https://blog.vastart.dev/2020/04/calling-arbitrary-functions-in-exes.html&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Stable builds are available in &lt;a href=&#34;https://github.com/hasherezade/exe_to_dll/releases&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Test builds can be downloaded from &lt;a href=&#34;https://ci.appveyor.com/project/hasherezade/exe-to-dll&#34;&gt;the build server&lt;/a&gt; (click on the build and choose the &#34;Artifacts&#34; tab)&lt;/p&gt; &#xA;&lt;h2&gt;Clone&lt;/h2&gt; &#xA;&lt;p&gt;Use recursive clone to get the repo together with all the submodules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/hasherezade/exe_to_dll.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;exe_to_dll&lt;/code&gt; from commandline. Arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;args: &amp;lt;input_exe&amp;gt; &amp;lt;output_dll&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;exe_to_dll.exe test_case1.exe test_case1.dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the successful conversion you should obtain a DLL exporting a &lt;code&gt;Start&lt;/code&gt; function. This is the Original Entry Point of your input application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasherezade/exe_to_dll/master/img/exp_table.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can test it by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rundll32.exe test_case1.dll,Start&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>