<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-25T01:31:17Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Moiezen/HS_SPR_CAL</title>
    <updated>2022-09-25T01:31:17Z</updated>
    <id>tag:github.com,2022-09-25:/Moiezen/HS_SPR_CAL</id>
    <link href="https://github.com/Moiezen/HS_SPR_CAL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hearthstone Spectral Pillager Rogue Calculator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HS_SPR_CAL&lt;/h1&gt; &#xA;&lt;p&gt;Hearthstone Spectral Pillager Rogue Calculator 炉石鬼灵贼计算器 持续更新中&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;写在最前面&lt;/strong&gt;：官方插件可以记牌，可以计算场攻，可以算酒馆战棋对战胜率。HDT插件还可以在酒馆战棋决赛时计算不同站位的胜率（假设对手阵容不变）。这个计算器可以计算鬼灵贼的斩杀方式。这些都是计算，没有区别。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;update[20220923]&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;现在会认为被反射工程师变为0血的鲨鱼之灵会在被使用后立即死亡。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;现在应该能够正确完整的读入光环buff了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;现在路径中有空格时能够正确保存路径至下次运行。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;以下为新特性&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;由于骨刺的存在，“刀一层数”和“刀二层数”被重做为了“下一减费”和“下二减费”，这一重做现在已经体现在界面上了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;读取的快捷键不再是ctrl而是空格，这是为了防止试图截屏时不慎触发读取。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;现在增加了读算（读取并计算）按钮，快捷键为=。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;轻微优化了内存占用，现在应该不那么容易卡死了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;现在界面中清除场上随从时，能够正常同时清除其血量了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;牌库特性&lt;/strong&gt; 现在能够读取牌库中的随从（在UI的中间），并且支持帷幕和精灵咏唱者的&lt;strong&gt;确定性&lt;/strong&gt;抽取随从效果。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;（确定性）抽取随从逻辑为，当抽取随从总量到不小于随从总数时，将所有随从置入手牌，但造成超出手牌上限的部分随从不置入。&lt;/p&gt; &#xA;&lt;p&gt;注意点1：其实“超出手牌上限的部分随从不置入”逻辑是有问题的，正确的应当为“只要有超出手牌上限的随从则任何随从都不置入”。&lt;/p&gt; &#xA;&lt;p&gt;注意点2：如果牌库中有两张A随从和一张B随从，逻辑上如果打出帷幕，手中一定会有一张A随从，但是目前不这么认为。&lt;/p&gt; &#xA;&lt;p&gt;注意点3：如果牌库中有不认识的随从或者认识但并非来自初始套牌的随从，将无法读取到其存在。&lt;/p&gt; &#xA;&lt;p&gt;注意点4：不支持行骗。&lt;/p&gt; &#xA;&lt;p&gt;以上几点在之后的更新中会被改进。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;当前版本已知特性，且接下来会改进：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;要挟应当不同于背刺。&lt;/p&gt; &#xA;&lt;p&gt;应当能够识别冰霜撕咬的光环buff。&lt;/p&gt; &#xA;&lt;p&gt;应当能够识别触手恐吓者，野蛮的女巫的手牌buff。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;当前版本其他已知特性&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;p&gt;不和己方英雄攻击力互动。&lt;/p&gt; &#xA;&lt;p&gt;不和冰箱互动。&lt;/p&gt; &#xA;&lt;p&gt;存在汉字编码兼容性差的问题。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;update[20220921]&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;修复了将黑刀识别为法术，从而可以被伺机待发减费的BUG。现在黑刀将视为新牌名“武器”。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;修复了将垂钓和行骗识别为法术，从而和老千互动并不符合预期的BUG。现在垂钓和行骗将视为新牌名“连法”。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;修复了在受到法术加费光环的影响时，算法仍然会试图优先打出假币（硬币）的BUG。现在应当能够正确工作。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;修复了在被癫狂公爵交换手牌的情况下，手牌读取可能发生错误的BUG。现在应当能够正确工作。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;修复了一些曾经作用于手牌的buff，被buff的卡牌已经离开手牌后，buff仍然会作用到当前手牌，导致手牌读取发生错误的BUG。现在应当能够正确工作。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;以下为新特性&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;现在将目标值设置为999时，读取将不会改变目标值。这适用于始终希望计算最高伤害的情形。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;现在摁Ctrl可以读取（并且原先摁Enter就可以计算）。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;现在小键盘的数字键应该有效了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;现在读取后会清空答案框。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;现在会将要挟当作1费的背刺。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;现在可以读取到更多的光环buff与手牌buff了，包括蛛魔拆解者、尼鲁巴、淤泥水管工这些光环buff，以及前沿哨所、诈死这些手牌buff。并且现在会将诈死当作2费普通法术了。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;（原先可以读取塞布、持枪、女塞、涂粉这些光环buff，以及黑刀、暗影步、幻觉药水、腾武这些手牌buff）&lt;/p&gt; &#xA;&lt;ol start=&#34;12&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;现在读取到的手牌顺序和游戏中应该一致了。随从顺序应该也一致，但是是从左到右而不是登场顺序。因此如果在实战中，如果随从的登场顺序不是从左到右，可能会导致幻觉药水的回手顺序和预期的不一致。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;现在读取的速度应当会比之前快一些，但是可能会多占用一些内存。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;随从血量特性&lt;/strong&gt; 现在手牌中的随从具有血量（在UI的最下一行），而场上的随从具有当前血量和总血量（在UI的向下倒数第五行和向下倒数第四行）。内部实现的状态做出了这样的改变，这将：&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;和背刺的互动更合理。尽管如此还是有“背刺不杀死友方随从时将不显示背刺目标”特性以及可能的其他特性。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;支持齿刺（锯齿骨刺），但目前仅支持对己方随从使用齿刺&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;算法效率可能有所降低。&lt;/p&gt; &#xA;&lt;p&gt;算法在一些极端情况下可能无法搜索到最优解（即使已经穷尽）。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;当前版本已知特性：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;必然还有一些buff未被识别从而读取错误。&lt;/p&gt; &#xA;&lt;p&gt;无法识别被沉默的随从（认为其异能仍然生效）。&lt;/p&gt; &#xA;&lt;p&gt;与敌方随从有关的老问题：允许对同一个随从用两个背刺，或者前文提到的不能对敌方随从使用骨刺。&lt;/p&gt; &#xA;&lt;p&gt;界面还需要优化：调整大小，简洁模式，一键同时读取计算，计算下回合，手动掐断，“关于”等。以及存在即使没有在进行计算，内存消耗仍然较高的问题。&lt;/p&gt; &#xA;&lt;p&gt;还未添加和牌库的交互，和冰箱的交互，等等。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;update[20220907]&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;支持的情况基本都在UI上体现了。&lt;/p&gt; &#xA;&lt;p&gt;可以手动添加法术、随从、战吼的加费光环。可以自动读入部分（写进去的）的加费光环。可以自动读入四项临时减费光环（XX层数）。&lt;/p&gt; &#xA;&lt;p&gt;修改了费用读取逻辑，改为从原始费用开始维护所有真实增益，防止（真实）费用读取受到各类光环的影响。&lt;/p&gt; &#xA;&lt;p&gt;目前UI支持鼠标和键盘，鼠标为选中-修改模式，键盘简化部分鼠标操作，支持上下左右移动选中（仅限手牌区和站场区），0-9修改数字（选中后首次修改从零起，可依次输入多位但有上限），backspace清除数字，字母修改牌名（根据二字短名的首字母），delete清除牌名，enter计算。&lt;/p&gt; &#xA;&lt;p&gt;目前UI已经能保存读取路径至dft.txt中。&lt;/p&gt; &#xA;&lt;p&gt;小提示1：将目标设置为999可以试图计算最高伤害。可以提高时限。&lt;/p&gt; &#xA;&lt;p&gt;小提示2：如果想提前计算下个回合的斩杀线，在增加水晶之后还要记得把已用牌数清空。&lt;/p&gt; &#xA;&lt;p&gt;小提示3：如果读取失败，可能是因为路径设置错误，或者路径下并不存在power.log，后者可能可以通过使用一次官方记牌器解决。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;已经整合成了多文件版本，请在Windows环境下使用cmake以得到可执行文件HSSPRCAL.exe&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;buildw/有现成的HSSPRCAL.exe，结合fml.txt使用。不对该exe运行产生的任何后果负责，如不信任请自行cmake。&lt;/p&gt; &#xA;&lt;p&gt;（虽然看上去有Linux环境下的版本，但实际上不太有）&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/foundationdb</title>
    <updated>2022-09-25T01:31:17Z</updated>
    <id>tag:github.com,2022-09-25:/apple/foundationdb</id>
    <link href="https://github.com/apple/foundationdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FoundationDB - the open source, distributed, transactional key-value store&lt;/p&gt;&lt;hr&gt;&lt;img alt=&#34;FoundationDB logo&#34; src=&#34;https://raw.githubusercontent.com/apple/foundationdb/main/documentation/FDB_logo.png?raw=true&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://codebuild.us-west-2.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiVjVzb1RQNUZTaGxGNm9iUnk4OUZ1d09GdTMzZnVOT1YzaUU1RU1xR2o2TENRWFZjb3ZrTHJEcngrZVdnNE40bXJJVDErOGVwendIL3lFWFY3Y3oxQmdjPSIsIml2UGFyYW1ldGVyU3BlYyI6IlJUbWhnaUlJVXRORUNJTjQiLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&amp;amp;branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;FoundationDB is a distributed database designed to handle large volumes of structured data across clusters of commodity servers. It organizes data as an ordered key-value store and employs ACID transactions for all operations. It is especially well-suited for read/write workloads but also has excellent performance for write-intensive workloads. Users interact with the database using API language binding.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about FoundationDB, visit &lt;a href=&#34;https://www.foundationdb.org/&#34;&gt;foundationdb.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be found online at &lt;a href=&#34;https://apple.github.io/foundationdb/&#34;&gt;https://apple.github.io/foundationdb/&lt;/a&gt;. The documentation covers details of API usage, background information on design philosophy, and extensive usage examples. Docs are built from the &lt;a href=&#34;https://raw.githubusercontent.com/apple/foundationdb/main/documentation/sphinx/source&#34;&gt;source in this repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Forums&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://forums.foundationdb.org/&#34;&gt;The FoundationDB Forums&lt;/a&gt; are the home for most of the discussion and communication about the FoundationDB project. We welcome your participation! We want FoundationDB to be a great project to be a part of and, as part of that, have established a &lt;a href=&#34;https://raw.githubusercontent.com/apple/foundationdb/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; to establish what constitutes permissible modes of interaction.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributing to FoundationDB can be in contributions to the code base, sharing your experience and insights in the community on the Forums, or contributing to projects that make use of FoundationDB. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/apple/foundationdb/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more specifics.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Binary downloads&lt;/h3&gt; &#xA;&lt;p&gt;Developers interested in using FoundationDB can get started by downloading and installing a binary package. Please see the &lt;a href=&#34;https://github.com/apple/foundationdb/releases&#34;&gt;downloads page&lt;/a&gt; for a list of available packages.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling from source&lt;/h3&gt; &#xA;&lt;p&gt;Developers on an OS for which there is no binary package, or who would like to start hacking on the code, can get started by compiling from source.&lt;/p&gt; &#xA;&lt;p&gt;The official docker image for building is &lt;a href=&#34;https://hub.docker.com/r/foundationdb/build&#34;&gt;&lt;code&gt;foundationdb/build&lt;/code&gt;&lt;/a&gt; which has all dependencies installed. The Docker image definitions used by FoundationDB team members can be found in the &lt;a href=&#34;https://github.com/FoundationDB/fdb-build-support&#34;&gt;dedicated repository.&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build outside the official docker image you&#39;ll need at least these dependencies:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install cmake Version 3.13 or higher &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.mono-project.com/download/stable/&#34;&gt;Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://ninja-build.org/&#34;&gt;Ninja&lt;/a&gt; (optional, but recommended)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If compiling for local development, please set &lt;code&gt;-DUSE_WERROR=ON&lt;/code&gt; in cmake. Our CI compiles with &lt;code&gt;-Werror&lt;/code&gt; on, so this way you&#39;ll find out about compiler warnings that break the build earlier.&lt;/p&gt; &#xA;&lt;p&gt;Once you have your dependencies, you can run cmake and then build:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check out this repository.&lt;/li&gt; &#xA; &lt;li&gt;Create a build directory (you can have the build directory anywhere you like). There is currently a directory in the source tree called build, but you should not use it. See &lt;a href=&#34;https://github.com/apple/foundationdb/issues/3098&#34;&gt;#3098&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd &amp;lt;PATH_TO_BUILD_DIRECTORY&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake -G Ninja &amp;lt;PATH_TO_FOUNDATIONDB_DIRECTORY&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ninja # If this crashes it probably ran out of memory. Try ninja -j1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Language Bindings&lt;/h3&gt; &#xA;&lt;p&gt;The language bindings that are supported by cmake will have a corresponding &lt;code&gt;README.md&lt;/code&gt; file in the corresponding &lt;code&gt;bindings/lang&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Generally, cmake will build all language bindings for which it can find all necessary dependencies. After each successful cmake run, cmake will tell you which language bindings it is going to build.&lt;/p&gt; &#xA;&lt;h3&gt;Generating &lt;code&gt;compile_commands.json&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;CMake can build a compilation database for you. However, the default generated one is not too useful as it operates on the generated files. When running make, the build system will create another &lt;code&gt;compile_commands.json&lt;/code&gt; file in the source directory. This can than be used for tools like &lt;a href=&#34;https://github.com/MaskRay/ccls&#34;&gt;CCLS&lt;/a&gt;, &lt;a href=&#34;https://github.com/cquery-project/cquery&#34;&gt;CQuery&lt;/a&gt;, etc. This way you can get code-completion and code navigation in flow. It is not yet perfect (it will show a few errors) but we are constantly working on improving the development experience.&lt;/p&gt; &#xA;&lt;p&gt;CMake will not produce a &lt;code&gt;compile_commands.json&lt;/code&gt;, you must pass &lt;code&gt;-DCMAKE_EXPORT_COMPILE_COMMANDS=ON&lt;/code&gt;. This also enables the target &lt;code&gt;processed_compile_commands&lt;/code&gt;, which rewrites &lt;code&gt;compile_commands.json&lt;/code&gt; to describe the actor compiler source file, not the post-processed output files, and places the output file in the source directory. This file should then be picked up automatically by any tooling.&lt;/p&gt; &#xA;&lt;p&gt;Note that if building inside of the &lt;code&gt;foundationdb/build&lt;/code&gt; docker image, the resulting paths will still be incorrect and require manual fixing. One will wish to re-run &lt;code&gt;cmake&lt;/code&gt; with &lt;code&gt;-DCMAKE_EXPORT_COMPILE_COMMANDS=OFF&lt;/code&gt; to prevent it from reverting the manual changes.&lt;/p&gt; &#xA;&lt;h3&gt;Using IDEs&lt;/h3&gt; &#xA;&lt;p&gt;CMake has built in support for a number of popular IDEs. However, because flow files are precompiled with the actor compiler, an IDE will not be very useful as a user will only be presented with the generated code - which is not what she wants to edit and get IDE features for.&lt;/p&gt; &#xA;&lt;p&gt;The good news is, that it is possible to generate project files for editing flow with a supported IDE. There is a CMake option called &lt;code&gt;OPEN_FOR_IDE&lt;/code&gt; which will generate a project which can be opened in an IDE for editing. You won&#39;t be able to build this project, but you will be able to edit the files and get most edit and navigation features your IDE supports.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to use XCode to make changes to FoundationDB you can create a XCode-project with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -G Xcode -DOPEN_FOR_IDE=ON &amp;lt;FDB_SOURCE_DIRECTORY&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should create a second build-directory which you will use for building and debugging.&lt;/p&gt; &#xA;&lt;h4&gt;FreeBSD&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Check out this repo on your server.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install compile-time dependencies from ports.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) Use tmpfs &amp;amp; ccache for significantly faster repeat builds&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) Install a &lt;a href=&#34;https://www.freshports.org/java/openjdk8/&#34;&gt;JDK&lt;/a&gt; for Java Bindings. FoundationDB currently builds with Java 8.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the directory where you checked out the foundationdb repo.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build from source.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo pkg install -r FreeBSD \&#xA;    shells/bash devel/cmake devel/ninja devel/ccache  \&#xA;    lang/mono lang/python3 \&#xA;    devel/boost-libs devel/libeio \&#xA;    security/openssl&#xA;mkdir .build &amp;amp;&amp;amp; cd .build&#xA;cmake -G Ninja \&#xA;    -DUSE_CCACHE=on \&#xA;    -DUSE_DTRACE=off \&#xA;    ..&#xA;ninja -j 10&#xA;# run fast tests&#xA;ctest -L fast&#xA;# run all tests&#xA;ctest --output-on-failure -v&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;There are no special requirements for Linux. A docker image can be pulled from &lt;code&gt;foundationdb/build&lt;/code&gt; that has all of FoundationDB&#39;s dependencies pre-installed, and is what the CI uses to build and test PRs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -G Ninja &amp;lt;FDB_SOURCE_DIR&amp;gt;&#xA;ninja&#xA;cpack -G DEB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For RPM simply replace &lt;code&gt;DEB&lt;/code&gt; with &lt;code&gt;RPM&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;p&gt;The build under MacOS will work the same way as on Linux. To get boost and ninja you can use &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -G Ninja &amp;lt;PATH_TO_FOUNDATIONDB_SOURCE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate a installable package,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ninja&#xA;$SRCDIR/packaging/osx/buildpkg.sh . $SRCDIR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Under Windows, only Visual Studio with ClangCl is supported&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Visual Studio 2019 (IDE or Build Tools), and enable llvm support&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake 3.15&lt;/a&gt; or higher&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://boostorg.jfrog.io/artifactory/main/release/1.77.0/source/boost_1_77_0.7z&#34;&gt;Boost 1.77.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unpack boost to C:\boost, or use &lt;code&gt;-DBOOST_ROOT=&amp;lt;PATH_TO_BOOST&amp;gt;&lt;/code&gt; with &lt;code&gt;cmake&lt;/code&gt; if unpacked elsewhere&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python&lt;/a&gt; if is not already installed by Visual Studio&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Install &lt;a href=&#34;https://developers.redhat.com/products/openjdk/download&#34;&gt;OpenJDK 11&lt;/a&gt; to build Java bindings&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Install &lt;a href=&#34;https://slproweb.com/products/Win32OpenSSL.html&#34;&gt;OpenSSL 3.x&lt;/a&gt; to build with TLS support&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Install &lt;a href=&#34;https://wixtoolset.org/&#34;&gt;WIX Toolset&lt;/a&gt; to build Windows installer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir build &amp;amp;&amp;amp; cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake -G &#34;Visual Studio 16 2019&#34; -A x64 -T ClangCl &amp;lt;PATH_TO_FOUNDATIONDB_SOURCE&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;msbuild /p:Configuration=Release foundationdb.sln&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To increase build performance, use &lt;code&gt;/p:UseMultiToolTask=true&lt;/code&gt; and &lt;code&gt;/p:CL_MPCount=&amp;lt;NUMBER_OF_PARALLEL_JOBS&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>