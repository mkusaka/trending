<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-10T01:30:26Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ShiqiYu/CPP</title>
    <updated>2023-05-10T01:30:26Z</updated>
    <id>tag:github.com,2023-05-10:/ShiqiYu/CPP</id>
    <link href="https://github.com/ShiqiYu/CPP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lecture notes, projects and other materials for Course &#39;CS205 C/C++ Program Design&#39; at Southern University of Science and Technology.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Programming in C/C++ Efficiently&lt;/h1&gt; &#xA;&lt;p&gt;Course &#39;CS205 C/C++ Program Design&#39; in 2021 Fall at Southern University of Science and Technology. The lecture videos can be found at &lt;a href=&#34;https://www.bilibili.com/video/BV1Vf4y1P7pq&#34;&gt;https://www.bilibili.com/video/BV1Vf4y1P7pq&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why Should You Take This Course?&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;C and C++ have a big overlap in syntax. The standards of C and C++ are also very long, and still in evolution to accept new features. This course will not cover all aspects of C and C++. It is impossible. The course focuses on the most important and unique parts of C and C++. Pointers and memory management will be described and explained almost through all chapters. They make many beginners even experienced developers crazy for bugs difficult to find. But they are important for computing efficiently, and also are the unique advantages of C and C++. Some people hate them, and some love them. We can say pointers and memory management make C and C++ unique to most other advanced programming languages.&lt;/p&gt; &#xA; &lt;p&gt;The course is designed for undergraduate students who have learnt Java or Python. If the students taking this course have some background knowledge of programming, such as knowing a little Java or Python, it will be helpful. If not, it is also not a problem.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week01/README.md&#34;&gt;Chapter 1: Getting Started&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The first example&lt;/li&gt; &#xA; &lt;li&gt;Different programming languages&lt;/li&gt; &#xA; &lt;li&gt;Compile and link&lt;/li&gt; &#xA; &lt;li&gt;Different errors&lt;/li&gt; &#xA; &lt;li&gt;Preprocessor and macros&lt;/li&gt; &#xA; &lt;li&gt;Simple input and output&lt;/li&gt; &#xA; &lt;li&gt;Command line arguments&lt;/li&gt; &#xA; &lt;li&gt;Exercises&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week01/Lecture01.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week01/Lab01.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week01/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week02/README.md&#34;&gt;Chapter 2: Data Types and Arithmetic Operators&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Integer numbers&lt;/li&gt; &#xA; &lt;li&gt;Different integer types&lt;/li&gt; &#xA; &lt;li&gt;Floating-point numbers&lt;/li&gt; &#xA; &lt;li&gt;Constant numbers and constant variables&lt;/li&gt; &#xA; &lt;li&gt;Arithmetic operators&lt;/li&gt; &#xA; &lt;li&gt;Special notes&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week02/Lecture02.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week02/Lab02.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week02/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week03/README.md&#34;&gt;Chapter 3: Branching and Looping Statements&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;if&lt;/code&gt; statement&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;? :&lt;/code&gt; operator&lt;/li&gt; &#xA; &lt;li&gt;Conditional expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;while&lt;/code&gt; loop&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;for&lt;/code&gt; loop&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;goto&lt;/code&gt; statement&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;switch&lt;/code&gt; statement&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week03/Lecture03.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week03/Lab03.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week03/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week04/README.md&#34;&gt;Chapter 4: Data Structures&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Arrays&lt;/li&gt; &#xA; &lt;li&gt;Strings&lt;/li&gt; &#xA; &lt;li&gt;Structures unions and enumerations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;typedef&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week04/Lecture04.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week04/Lab04.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week04/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week05/README.md&#34;&gt;Chapter 5: Memory and Pointer&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pointers&lt;/li&gt; &#xA; &lt;li&gt;Pointers and arrays&lt;/li&gt; &#xA; &lt;li&gt;Allocate memory in C style&lt;/li&gt; &#xA; &lt;li&gt;Allocate memory in C++ style&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week05/Lecture05.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week05/Lab05.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week05/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week06/README.md&#34;&gt;Chapter 6: Basics of Functions&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Functions&lt;/li&gt; &#xA; &lt;li&gt;Function parameters&lt;/li&gt; &#xA; &lt;li&gt;References&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;return&lt;/code&gt; statement&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;inline&lt;/code&gt; function&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week06/Lecture06.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week06/Lab06.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week06/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week07/README.md&#34;&gt;Chapter 7: Advances in Functions&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Default arguments&lt;/li&gt; &#xA; &lt;li&gt;Function overloading&lt;/li&gt; &#xA; &lt;li&gt;Function templates&lt;/li&gt; &#xA; &lt;li&gt;Function pointers and references&lt;/li&gt; &#xA; &lt;li&gt;Recursive functions&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week07/Lecture07.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week07/Lab07.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week07/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week08/README.md&#34;&gt;Chapter 8: Speedup Your Program&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;C and C++ with ARM&lt;/li&gt; &#xA; &lt;li&gt;Speedup your program&lt;/li&gt; &#xA; &lt;li&gt;An example with SIMD and OpenMP&lt;/li&gt; &#xA; &lt;li&gt;Avoid memory copy in OpenCV&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week08/Lecture08.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week08/Lab08.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week08/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week09/README.md&#34;&gt;Chapter 9: Basics of Classes&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Classes and objects&lt;/li&gt; &#xA; &lt;li&gt;Constructors and destructors&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;this&lt;/code&gt; pointer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;const&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; members&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week09/Lecture09.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week09/Lab09.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week09/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week10/README.md&#34;&gt;Chapter 10: Advances in Classes&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Operators in OpenCV&lt;/li&gt; &#xA; &lt;li&gt;Operator overloading&lt;/li&gt; &#xA; &lt;li&gt;Friend functions&lt;/li&gt; &#xA; &lt;li&gt;User defined type conversion&lt;/li&gt; &#xA; &lt;li&gt;Increment and decrement operators&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week10/Lecture10.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week10/Lab10.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week10/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week11/README.md&#34;&gt;Chapter 11: Dynamic Memory Management in Classes&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Some default operations&lt;/li&gt; &#xA; &lt;li&gt;An example with dynamic memory&lt;/li&gt; &#xA; &lt;li&gt;Solution1: Hard copy&lt;/li&gt; &#xA; &lt;li&gt;Solution2: Soft copy&lt;/li&gt; &#xA; &lt;li&gt;Smart pointers&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week11/Lecture11.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week11/Lab11.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week11/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week12/README.md&#34;&gt;Chapter 12: Class Inheritance&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Improve your source code&lt;/li&gt; &#xA; &lt;li&gt;Derived class&lt;/li&gt; &#xA; &lt;li&gt;Access control&lt;/li&gt; &#xA; &lt;li&gt;Virtual functions&lt;/li&gt; &#xA; &lt;li&gt;Inheritance and dynamic memory allocation&lt;/li&gt; &#xA; &lt;li&gt;Examples in opencv&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week12/Lecture12.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week12/Lab12.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week12/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week13/README.md&#34;&gt;Chapter 13: Class Templates and std Library&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Class template&lt;/li&gt; &#xA; &lt;li&gt;Template non-type parameters&lt;/li&gt; &#xA; &lt;li&gt;Class template specialization&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;std&lt;/code&gt; classes&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week13/Lecture13.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week13/Lab13.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week13/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week14/README.md&#34;&gt;Chapter 14: Error Handling&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Standard output stream and standard error stream&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Exceptions&lt;/li&gt; &#xA; &lt;li&gt;More about exceptions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nothrow&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week14/Lecture14.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week14/Lab14.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week14/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week15/README.md&#34;&gt;Chapter 15: Nested Classes and RTTI&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Friend classes&lt;/li&gt; &#xA; &lt;li&gt;Nested types&lt;/li&gt; &#xA; &lt;li&gt;RTTI and type cast operators&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week15/Lecture15.pptx&#34;&gt;Lecture notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week15/Lab15.pptx&#34;&gt;Lab notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ShiqiYu/CPP/main/week15/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Mr. Yitong Wang&#39;s repo for the course in Fall 2020. &lt;a href=&#34;https://github.com/YeeTone/CS205-2020Fall&#34;&gt;https://github.com/YeeTone/CS205-2020Fall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mr. Zheng Dong&#39;s repo for the course in Fall 2021. &lt;a href=&#34;https://github.com/XDZhelheim/CS205_C_CPP_Lab&#34;&gt;https://github.com/XDZhelheim/CS205_C_CPP_Lab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mr. Wenqian Yan&#39;s repo for the course in Fall 2022. &lt;a href=&#34;https://github.com/YanWQ-monad/SUSTech_CS205_Projects&#34;&gt;https://github.com/YanWQ-monad/SUSTech_CS205_Projects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>oatpp/oatpp</title>
    <updated>2023-05-10T01:30:26Z</updated>
    <id>tag:github.com,2023-05-10:/oatpp/oatpp</id>
    <link href="https://github.com/oatpp/oatpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌱Light and powerful C++ web framework for highly scalable and resource-efficient web application. It&#39;s zero-dependency and easy-portable.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;Oat++ Logo&#34; src=&#34;https://raw.githubusercontent.com/lganzzzo/oatpp-website-res/master/logo_x400.png&#34; width=&#34;200px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://dev.azure.com/lganzzzo/lganzzzo/_build?definitionId=1&#34;&gt; &lt;img src=&#34;https://dev.azure.com/lganzzzo/lganzzzo/_apis/build/status/oatpp.oatpp&#34; alt=&#34;oatpp build status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://gitter.im/oatpp-framework/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt; &lt;img src=&#34;https://badges.gitter.im/oatpp-framework/Lobby.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/oatpp-framework/Lobby&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Oat++&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;News&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;🎉&lt;/span&gt; Welcome the new oatpp version &lt;code&gt;1.3.0&lt;/code&gt;. Now it&#39;s better than ever! See the &lt;a href=&#34;https://github.com/oatpp/oatpp/raw/master/changelog/1.3.0.md&#34;&gt;changelog&lt;/a&gt; for details. &lt;span&gt;🎉&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Oat++ is a modern Web Framework for C++. It&#39;s fully loaded and contains all necessary components for effective production level development. It&#39;s also light and has a small memory footprint.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oatpp.io/docs/start/&#34;&gt;Get Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oatpp.io/docs/installation/unix-linux/&#34;&gt;Build For Unix/Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oatpp.io/docs/installation/windows/&#34;&gt;Build For Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oatpp/oatpp/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;About&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oatpp.io/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oatpp.io/supported-platforms/&#34;&gt;Supported Platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Latest Benchmarks: &lt;a href=&#34;https://oatpp.io/benchmark/websocket/5-million/&#34;&gt;5 Million WebSockets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oatpp/oatpp/master/CONTRIBUTING.md&#34;&gt;Contributing to Oat++&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Join Our Community&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/oatpp-framework/Lobby&#34;&gt;Gitter&lt;/a&gt; - Talk to Oat++ developers and to other Oat++ users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/oatpp_io&#34;&gt;Twitter&lt;/a&gt; - Follow Oat++ on Twitter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/oatpp/&#34;&gt;Reddit&lt;/a&gt; - Follow Oat++ subreddit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/oat%2b%2b&#34;&gt;StackOverflow (new)&lt;/a&gt; - Post a Question.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shortcuts:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oatpp.io/docs/start/high-level-overview/&#34;&gt;Oat++ High Level Overview&lt;/a&gt; - Get a quick overview of Oat++ features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-crud&#34;&gt;Example Project&lt;/a&gt; - A complete example of a &#34;CRUD&#34; service (UserService) built with Oat++. REST + Swagger-UI + SQLite.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build Powerful API And Document It With Swagger-UI&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://oatpp.io/docs/components/api-controller/&#34;&gt;ApiController&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;ENDPOINT_INFO(getUserById) {&#xA;  info-&amp;gt;summary = &#34;Get one User by userId&#34;;&#xA;&#xA;  info-&amp;gt;addResponse&amp;lt;Object&amp;lt;UserDto&amp;gt;&amp;gt;(Status::CODE_200, &#34;application/json&#34;);&#xA;  info-&amp;gt;addResponse&amp;lt;Object&amp;lt;StatusDto&amp;gt;&amp;gt;(Status::CODE_404, &#34;application/json&#34;);&#xA;  info-&amp;gt;addResponse&amp;lt;Object&amp;lt;StatusDto&amp;gt;&amp;gt;(Status::CODE_500, &#34;application/json&#34;);&#xA;&#xA;  info-&amp;gt;pathParams[&#34;userId&#34;].description = &#34;User Identifier&#34;;&#xA;}&#xA;ENDPOINT(&#34;GET&#34;, &#34;users/{userId}&#34;, getUserById,&#xA;         PATH(Int32, userId))&#xA;{&#xA;  return createDtoResponse(Status::CODE_200, m_userService.getUserById(userId));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Access Databases And Keep Your Data Consistent&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://oatpp.io/docs/components/orm/&#34;&gt;Oat++ ORM&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;QUERY(createUser,&#xA;      &#34;INSERT INTO users (username, email, role) VALUES (:username, :email, :role);&#34;,&#xA;      PARAM(oatpp::String, username), &#xA;      PARAM(oatpp::String, email), &#xA;      PARAM(oatpp::Enum&amp;lt;UserRoles&amp;gt;::AsString, role))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;h3&gt;Q: &#34;Oat++&#34; name?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;Oat&#34; is something light, organic, and green. It can be easily cooked and consumed with no effort.&lt;/li&gt; &#xA; &lt;li&gt;&#34;++&#34; gives a hint that it is &#34;something&#34; for C++.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Q: What is the main area of Oat++ application?&lt;/h3&gt; &#xA;&lt;p&gt;Oat++ is used for many different purposes, from building REST APIs that run on embedded devices to building microservices and highly-loaded cloud applications.&lt;/p&gt; &#xA;&lt;p&gt;But the majority of use cases appears to be in &lt;strong&gt;IoT&lt;/strong&gt; and &lt;strong&gt;Robotics&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Q: How portable is Oat++?&lt;/h3&gt; &#xA;&lt;p&gt;Theoretically, Oat++ can be &lt;strong&gt;easily&lt;/strong&gt; ported everywhere where you have &lt;strong&gt;threads&lt;/strong&gt; and &lt;strong&gt;network stack&lt;/strong&gt;. With an additional comparably small effort, it can be ported almost everywhere depending on how much you strip it and what would be the final binary size.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://oatpp.io/supported-platforms/&#34;&gt;supported platforms&lt;/a&gt; for additional info.&lt;/p&gt; &#xA;&lt;h3&gt;Q: What is the size of a minimal Oat++ application?&lt;/h3&gt; &#xA;&lt;p&gt;About &lt;strong&gt;1Mb&lt;/strong&gt;, depending on C/C++ std-lib and oatpp version.&lt;/p&gt; &#xA;&lt;h3&gt;Q: Which Oat++ API to choose, Simple or Async?&lt;/h3&gt; &#xA;&lt;p&gt;Always choose &lt;strong&gt;Simple API&lt;/strong&gt; wherever possible. Simple API is more developed and makes the code cleaner.&lt;/p&gt; &#xA;&lt;p&gt;Async API is designed for small, specific tasks that run at high concurrency levels ex.:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Serving file downloads to a large number of concurrent users (1K users and more).&lt;/li&gt; &#xA; &lt;li&gt;Streaming to a large number of clients (1K or more).&lt;/li&gt; &#xA; &lt;li&gt;Websocket Chat servers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For all other purposes use simple API.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;REST-API&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-crud&#34;&gt;REST Service&lt;/a&gt; - A complete example of a &#34;CRUD&#34; service (UserService) built with Oat++. REST + Swagger-UI + SQLite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-api-client&#34;&gt;REST Client&lt;/a&gt; - Example project of how-to use Retrofit-like client wrapper (ApiClient) and how it works.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;WebSocket&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lganzzzo/canchat&#34;&gt;Can Chat&lt;/a&gt; - Feature-complete rooms-based chat for tens of thousands users. Client plus Server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-websocket&#34;&gt;WebSocket&lt;/a&gt; - Collection of oatpp WebSocket examples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-yuv-websocket-stream&#34;&gt;YUV Websocket Stream&lt;/a&gt; - Example project how-to create a YUV image stream from a V4L device (i.E. Webcam) using websockets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Databases&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-crud&#34;&gt;SQLite&lt;/a&gt; - A complete example of a &#34;CRUD&#34; service. REST + Swagger-UI + SQLite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-postgresql&#34;&gt;PostgreSQL&lt;/a&gt; - Example of a production-grade entity service storing information in PostgreSQL. With Swagger-UI and configuration profiles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-mongodb&#34;&gt;MongoDB&lt;/a&gt; - Example project how to work with MongoDB using &lt;strong&gt;oatpp-mongo&lt;/strong&gt; mondule. Project is a web-service with basic CRUD and Swagger-UI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;IoT&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-iot-hue-ssdp&#34;&gt;Example-IoT-Hue&lt;/a&gt; - Example project how-to create an Philips Hue compatible REST-API that is discovered and controllable by Hue compatible Smart-Home devices like Amazon Alexa or Google Echo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Streaming&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-hls-media-stream&#34;&gt;HTTP Live Streaming Server&lt;/a&gt; - Example project on how to build an HLS-streaming server using Oat++ asynchronous API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-yuv-websocket-stream&#34;&gt;YUV Websocket Stream&lt;/a&gt; - Example project how-to create a YUV image stream from a V4L device (i.E. Webcam) using websockets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TLS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-libressl&#34;&gt;TLS With Libressl&lt;/a&gt; - Example project how-to setup secure connection and serve via HTTPS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Microservices&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-consul&#34;&gt;Consul Integration&lt;/a&gt; - Example project on how to use &lt;a href=&#34;https://oatpp.io/api/latest/oatpp-consul/rest/Client/&#34;&gt;oatpp::consul::Client&lt;/a&gt;. Consul integration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-microservices&#34;&gt;Microservices&lt;/a&gt; - Example project on how to build microservices with Oat++, and example on how to consolidate those microservices using &lt;a href=&#34;https://oatpp.io/docs/monolithization/&#34;&gt;monolithization&lt;/a&gt; technique.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Asynchronous API&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-async-api&#34;&gt;Async Service&lt;/a&gt; - Example project on how to use asynchronous API to handle a large number of simultaneous connections.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>skyline-emu/skyline-dev</title>
    <updated>2023-05-10T01:30:26Z</updated>
    <id>tag:github.com,2023-05-10:/skyline-emu/skyline-dev</id>
    <link href="https://github.com/skyline-emu/skyline-dev" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/skyline-emu/skyline&#34; target=&#34;_blank&#34;&gt; &lt;img height=&#34;60%&#34; width=&#34;60%&#34; src=&#34;https://raw.github.com/skyline-emu/branding/master/banner/skyline-banner-rounded.png&#34;&gt;&lt;br&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/XnbXNQM&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/545842171459272705.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=5865F2&amp;amp;labelColor=404EED&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/skyline-emu/skyline/actions/workflows/ci.yml&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/skyline-emu/skyline/actions/workflows/ci.yml/badge.svg?sanitize=true&#34;&gt;&lt;br&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skyline-emu/skyline-dev/texman/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/skyline-emu/skyline-dev/texman/BUILDING.md&#34;&gt;Building Guide&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Skyline&lt;/b&gt; is an experimental emulator that runs on &lt;b&gt;ARMv8 Android™&lt;/b&gt; devices and emulates the functionality of a &lt;b&gt;Nintendo Switch™&lt;/b&gt; system, licensed under &lt;a href=&#34;https://github.com/skyline-emu/skyline/raw/master/LICENSE.md&#34;&gt;&lt;b&gt;Mozilla Public License 2.0&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Contact&lt;/h3&gt; &#xA;&lt;p&gt;You can contact the core developers of Skyline at our &lt;strong&gt;&lt;a href=&#34;https://discord.gg/XnbXNQM&#34;&gt;Discord&lt;/a&gt;&lt;/strong&gt;. If you have any questions, feel free to ask. It&#39;s also a good place to just keep up with the emulator, as most talk regarding development goes on over there.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Special Thanks&lt;/h3&gt; &#xA;&lt;p&gt;A few noteworthy teams/projects who&#39;ve helped us along the way are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://ryujinx.org/&#34;&gt;Ryujinx&lt;/a&gt;:&lt;/strong&gt; We&#39;ve used Ryujinx for reference throughout the project, the accuracy of their HLE implementations of Switch subsystems make it an amazing reference. The team behind the project has been extremely helpful with any queries we&#39;ve had and have constantly helped us with any issues we&#39;ve come across. &lt;strong&gt;It should be noted that Skyline is not based on Ryujinx&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://yuzu-emu.org/&#34;&gt;yuzu&lt;/a&gt;:&lt;/strong&gt; Skyline&#39;s shader compiler is a &lt;strong&gt;fork&lt;/strong&gt; of &lt;em&gt;yuzu&lt;/em&gt;&#39;s shader compiler with Skyline-specific changes, using it allowed us to focus on the parts of GPU emulation that we could specifically optimize for mobile while having a high-quality shader compiler implementation as a base. The team behind &lt;em&gt;yuzu&lt;/em&gt; has also often helped us and have graciously provided us with a license exemption.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/switchbrew/&#34;&gt;Switchbrew&lt;/a&gt;:&lt;/strong&gt; We&#39;ve extensively used Switchbrew whether that be their &lt;strong&gt;&lt;a href=&#34;https://switchbrew.org/&#34;&gt;wiki&lt;/a&gt;&lt;/strong&gt; with its colossal amount of information on the Switch that has saved us countless hours of time or &lt;strong&gt;&lt;a href=&#34;https://github.com/switchbrew/libnx&#34;&gt;libnx&lt;/a&gt;&lt;/strong&gt; which was crucial to initial development of the emulator to ensure that our HLE kernel and sysmodule implementations were accurate.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Disclaimer&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nintendo Switch&lt;/strong&gt; is a trademark of &lt;strong&gt;Nintendo Co., Ltd&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Android&lt;/strong&gt; is a trademark of &lt;strong&gt;Google LLC&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>