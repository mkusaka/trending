<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-30T01:32:52Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>telegramdesktop/tdesktop</title>
    <updated>2022-08-30T01:32:52Z</updated>
    <id>tag:github.com,2022-08-30:/telegramdesktop/tdesktop</id>
    <link href="https://github.com/telegramdesktop/tdesktop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Telegram Desktop messaging app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://desktop.telegram.org&#34;&gt;Telegram Desktop&lt;/a&gt; – Official Messenger&lt;/h1&gt; &#xA;&lt;p&gt;This is the complete source code and the build instructions for the official &lt;a href=&#34;https://telegram.org&#34;&gt;Telegram&lt;/a&gt; messenger desktop client, based on the &lt;a href=&#34;https://core.telegram.org&#34;&gt;Telegram API&lt;/a&gt; and the &lt;a href=&#34;https://core.telegram.org/mtproto&#34;&gt;MTProto&lt;/a&gt; secure protocol.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/telegramdesktop/tdesktop/releases&#34;&gt;&lt;img src=&#34;https://badge.fury.io/gh/telegramdesktop%2Ftdesktop.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/telegramdesktop/tdesktop/actions&#34;&gt;&lt;img src=&#34;https://github.com/telegramdesktop/tdesktop/workflows/Windows./badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/telegramdesktop/tdesktop/actions&#34;&gt;&lt;img src=&#34;https://github.com/telegramdesktop/tdesktop/workflows/MacOS./badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/telegramdesktop/tdesktop/actions&#34;&gt;&lt;img src=&#34;https://github.com/telegramdesktop/tdesktop/workflows/Linux./badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/telegramdesktop/tdesktop/dev/docs/assets/preview.png&#34;&gt;&lt;img src=&#34;https://github.com/telegramdesktop/tdesktop/raw/dev/docs/assets/preview.png&#34; alt=&#34;Preview of Telegram Desktop&#34; title=&#34;Preview of Telegram Desktop&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The source code is published under GPLv3 with OpenSSL exception, the license is available &lt;a href=&#34;https://raw.githubusercontent.com/telegramdesktop/tdesktop/dev/LICENSE&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported systems&lt;/h2&gt; &#xA;&lt;p&gt;The latest version is available for&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://telegram.org/dl/desktop/win64&#34;&gt;Windows 7 and above (64 bit)&lt;/a&gt; (&lt;a href=&#34;https://telegram.org/dl/desktop/win64_portable&#34;&gt;portable&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://telegram.org/dl/desktop/win&#34;&gt;Windows 7 and above (32 bit)&lt;/a&gt; (&lt;a href=&#34;https://telegram.org/dl/desktop/win_portable&#34;&gt;portable&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://telegram.org/dl/desktop/mac&#34;&gt;macOS 10.12 and above&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://telegram.org/dl/desktop/linux&#34;&gt;Linux static build for 64 bit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snapcraft.io/telegram-desktop&#34;&gt;Snap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flathub.org/apps/details/org.telegram.desktop&#34;&gt;Flatpak&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Old system versions&lt;/h2&gt; &#xA;&lt;p&gt;Version &lt;strong&gt;2.4.4&lt;/strong&gt; was the last that supports older systems&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://updates.tdesktop.com/tosx/tsetup-osx.2.4.4.dmg&#34;&gt;OS X 10.10 and 10.11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://updates.tdesktop.com/tlinux32/tsetup32.2.4.4.tar.xz&#34;&gt;Linux static build for 32 bit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version &lt;strong&gt;1.8.15&lt;/strong&gt; was the last that supports older systems&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://updates.tdesktop.com/tsetup/tsetup.1.8.15.exe&#34;&gt;Windows XP and Vista&lt;/a&gt; (&lt;a href=&#34;https://updates.tdesktop.com/tsetup/tportable.1.8.15.zip&#34;&gt;portable&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://updates.tdesktop.com/tmac/tsetup.1.8.15.dmg&#34;&gt;OS X 10.8 and 10.9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://updates.tdesktop.com/tmac32/tsetup32.1.8.15.dmg&#34;&gt;OS X 10.6 and 10.7&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Third-party&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Qt 6 (&lt;a href=&#34;http://doc.qt.io/qt-6/lgpl.html&#34;&gt;LGPL&lt;/a&gt;) and Qt 5.15 (&lt;a href=&#34;http://doc.qt.io/qt-5/lgpl.html&#34;&gt;LGPL&lt;/a&gt;) slightly patched&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL 1.1.1 and 1.0.1 (&lt;a href=&#34;https://www.openssl.org/source/license.html&#34;&gt;OpenSSL License&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;WebRTC (&lt;a href=&#34;https://github.com/desktop-app/tg_owt/raw/master/LICENSE&#34;&gt;New BSD License&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;zlib 1.2.11 (&lt;a href=&#34;http://www.zlib.net/zlib_license.html&#34;&gt;zlib License&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;LZMA SDK 9.20 (&lt;a href=&#34;http://www.7-zip.org/sdk.html&#34;&gt;public domain&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;liblzma (&lt;a href=&#34;http://tukaani.org/xz/&#34;&gt;public domain&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Google Breakpad (&lt;a href=&#34;https://chromium.googlesource.com/breakpad/breakpad/+/master/LICENSE&#34;&gt;License&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Google Crashpad (&lt;a href=&#34;https://chromium.googlesource.com/crashpad/crashpad/+/master/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;GYP (&lt;a href=&#34;https://github.com/bnoordhuis/gyp/raw/master/LICENSE&#34;&gt;BSD License&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Ninja (&lt;a href=&#34;https://github.com/ninja-build/ninja/raw/master/COPYING&#34;&gt;Apache License 2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;OpenAL Soft (&lt;a href=&#34;https://github.com/kcat/openal-soft/raw/master/COPYING&#34;&gt;LGPL&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Opus codec (&lt;a href=&#34;http://www.opus-codec.org/license/&#34;&gt;BSD License&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;FFmpeg (&lt;a href=&#34;https://www.ffmpeg.org/legal.html&#34;&gt;LGPL&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Guideline Support Library (&lt;a href=&#34;https://github.com/Microsoft/GSL/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Range-v3 (&lt;a href=&#34;https://github.com/ericniebler/range-v3/raw/master/LICENSE.txt&#34;&gt;Boost License&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open Sans font (&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;Apache License 2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Vazir font (&lt;a href=&#34;https://github.com/rastikerdar/vazir-font/raw/master/OFL.txt&#34;&gt;SIL Open Font License 1.1&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Emoji alpha codes (&lt;a href=&#34;https://github.com/emojione/emojione/raw/master/extras/alpha-codes/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Catch test framework (&lt;a href=&#34;https://github.com/philsquared/Catch/raw/master/LICENSE.txt&#34;&gt;Boost License&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;xxHash (&lt;a href=&#34;https://github.com/Cyan4973/xxHash/raw/dev/LICENSE&#34;&gt;BSD License&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;QR Code generator (&lt;a href=&#34;https://github.com/nayuki/QR-Code-generator#license&#34;&gt;MIT License&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;CMake (&lt;a href=&#34;https://github.com/Kitware/CMake/raw/master/Copyright.txt&#34;&gt;New BSD License&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Hunspell (&lt;a href=&#34;https://github.com/hunspell/hunspell/raw/master/COPYING.LESSER&#34;&gt;LGPL&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows &lt;a href=&#34;https://raw.githubusercontent.com/telegramdesktop/tdesktop/dev/docs/building-win.md&#34;&gt;(32-bit)&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/telegramdesktop/tdesktop/dev/docs/building-win-x64.md&#34;&gt;(64-bit)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/telegramdesktop/tdesktop/dev/docs/building-mac.md&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/telegramdesktop/tdesktop/dev/docs/building-linux.md&#34;&gt;GNU/Linux using Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>BobbyAnguelov/Esoterica</title>
    <updated>2022-08-30T01:32:52Z</updated>
    <id>tag:github.com,2022-08-30:/BobbyAnguelov/Esoterica</id>
    <link href="https://github.com/BobbyAnguelov/Esoterica" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Esoterica Engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Esoterica Prototype Game Engine&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BobbyAnguelov/Esoterica/main/Docs/EE_Logo.png&#34; alt=&#34;Esoterica Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.esotericaengine.com&#34;&gt;Esoterica Engine&lt;/a&gt; is an MIT licensed prototype game engine framework. It’s intended as a technology demonstrator, an educational tool and an R&amp;amp;D framework. It contains a lot of the boilerplate machinery required for resource management, serialization, gameplay, etc. It provides a lot of references for how to potentially build a resource system, basic reflection and a AAA-level animation system. It could be a good framework for experimenting with game, AI, renderer tech or as a teaching aid for how to build game engines. Additionally, if you are more interested in building your own engine, Esoterica is a really good starting point.&lt;/p&gt; &#xA;&lt;h2&gt;Important Note: Stability!&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Esoterica is a prototype engine that&#39;s being developed in our spare time and as such there will likely be bugs and crashes (primarily with the tooling side). It is not intended as a stable production tool. If you encounter any crashes or bugs, please file issues and we&#39;ll try to get to them as soon as we can.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Help Needed: Rendering + Test Assets&lt;/h2&gt; &#xA;&lt;p&gt;There are no examples of any of the tech supplied unfortunately since we do not have any assets that I can release publically. We are looking for folks that can create some test assets that we can distribute with the engine (e.g., a character model and some animations). We can then use those assets to provide a set of examples of the various tools and features.&lt;/p&gt; &#xA;&lt;p&gt;We are also looking for a someone to help us build out the renderer. More details can be found here: &lt;a href=&#34;https://www.esotericaengine.com/contribute&#34;&gt;https://www.esotericaengine.com/contribute&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s included&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic core of a game engine (serialization, math, string handling, logging, etc...)&lt;/li&gt; &#xA; &lt;li&gt;Libclang based c++ reflection and code-generation&lt;/li&gt; &#xA; &lt;li&gt;Compiler based resource system with hot-reloading&lt;/li&gt; &#xA; &lt;li&gt;Hybrid Actor/ECS object model - &lt;a href=&#34;https://www.youtube.com/watch?v=jjEsB611kxs&#34;&gt;https://www.youtube.com/watch?v=jjEsB611kxs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;AAA quality high performance animation graph system - &lt;a href=&#34;https://www.youtube.com/watch?v=R-T3Mk5oDHI&amp;amp;t=5427s&#34;&gt;https://www.youtube.com/watch?v=R-T3Mk5oDHI&amp;amp;t=5427s&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Basic animation compression&lt;/li&gt; &#xA; &lt;li&gt;Powered Ragdoll implmentation using PhysX articulations&lt;/li&gt; &#xA; &lt;li&gt;Basic editor infrastructure and tooling using DearImgui&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Resource Pipeline&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Basic Editor&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BobbyAnguelov/Esoterica/main/Docs/EE_ResourceServer.png&#34; alt=&#34;Esoterica Resource Server&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BobbyAnguelov/Esoterica/main/Docs/EE_Editor.png&#34; alt=&#34;Esoterica Editor&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Animation Graph&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Ragdoll Editor&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BobbyAnguelov/Esoterica/main/Docs/EE_AnimGraph.png&#34; alt=&#34;Esoterica Animation Graph&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BobbyAnguelov/Esoterica/main/Docs/EE_Ragdoll.png&#34; alt=&#34;Esoterica Ragdoll&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2022&lt;/li&gt; &#xA; &lt;li&gt;FBX SDK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Esoterica&lt;/h2&gt; &#xA;&lt;p&gt;Esoterica uses vanilla msbuild for its build system. There are a set of property sheets that control all the build settings for Esoterica in the &#34;code/property sheets&#34; folder.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the external dependencies and required &lt;a href=&#34;https://drive.google.com/file/d/1cHaWZOBjjVvwwtgU7tl16_im3ylUjFF1/view?usp=sharing&#34;&gt;editor data&lt;/a&gt; and extract into the Esoterica root folder ( X:/Esoterica Path/ ). You should end up with &#39;X:/Esoterica Path/Data/&#39; and &#39;X:/Esoterica Path/External/&#39;.&lt;/li&gt; &#xA; &lt;li&gt;Download and install the FBX SDK (required for editor) - &lt;a href=&#34;https://www.autodesk.com/developer-network/platform-technologies/fbx-sdk-2020-2-1&#34;&gt;https://www.autodesk.com/developer-network/platform-technologies/fbx-sdk-2020-2-1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the EE.sln&lt;/li&gt; &#xA; &lt;li&gt;REBUILD the &#34;EE.Scripts.Reflect&#34; project - this will generate all the Esoterica reflection data&lt;/li&gt; &#xA; &lt;li&gt;Build the &#34;1. Applications&#34; solution folder - this will build all the applications needed for Esoterica to run.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Applications&lt;/h2&gt; &#xA;&lt;p&gt;Easiest way to get started, is just set the &#34;Esoterica.Applications.Editor&#34; as the startup project and hit run. If you want to run the engine, use the &#34;Esoterica.Applications.Engine&#34; project with the &#34;-map data://path_to_map.map&#34; argument.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Engine - this is the standalone Esoterica engine client&lt;/li&gt; &#xA; &lt;li&gt;Editor - This is the Esoterica editor&lt;/li&gt; &#xA; &lt;li&gt;Resource Server - This is a standalone application that will compile and provide resources to the various Esoterica applications&lt;/li&gt; &#xA; &lt;li&gt;Reflector - This generates the Esoterica reflection data&lt;/li&gt; &#xA; &lt;li&gt;Resource Compiler - This processes resource compilation requests&lt;/li&gt; &#xA; &lt;li&gt;Tester - Empty console app used for random testing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thirdparty projects used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;EASTL&lt;/li&gt; &#xA; &lt;li&gt;DearImgui&lt;/li&gt; &#xA; &lt;li&gt;EnkiTS&lt;/li&gt; &#xA; &lt;li&gt;iniparser&lt;/li&gt; &#xA; &lt;li&gt;PCG&lt;/li&gt; &#xA; &lt;li&gt;xxhash&lt;/li&gt; &#xA; &lt;li&gt;rpmalloc&lt;/li&gt; &#xA; &lt;li&gt;concurrentqueue&lt;/li&gt; &#xA; &lt;li&gt;MPack&lt;/li&gt; &#xA; &lt;li&gt;Game Networking Sockets&lt;/li&gt; &#xA; &lt;li&gt;PhysX&lt;/li&gt; &#xA; &lt;li&gt;cgltf&lt;/li&gt; &#xA; &lt;li&gt;pfd&lt;/li&gt; &#xA; &lt;li&gt;sqlite&lt;/li&gt; &#xA; &lt;li&gt;subprocess&lt;/li&gt; &#xA; &lt;li&gt;optick&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These middleware packages are also integrated but require a license to use (so they are disabled by default)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Live++&lt;/li&gt; &#xA; &lt;li&gt;Superluminal&lt;/li&gt; &#xA; &lt;li&gt;Navpower&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extra Info&lt;/h2&gt; &#xA;&lt;p&gt;If you use the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=MBulli.SmartCommandlineArguments&#34;&gt;SmartCommandLineArguments&lt;/a&gt; plugin for VS then there are supplied saved arguments to help you start the engine.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dolphin-emu/dolphin</title>
    <updated>2022-08-30T01:32:52Z</updated>
    <id>tag:github.com,2022-08-30:/dolphin-emu/dolphin</id>
    <link href="https://github.com/dolphin-emu/dolphin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dolphin is a GameCube / Wii emulator, allowing you to play games for these two platforms on PC with improvements.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dolphin - A GameCube and Wii Emulator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dolphin-emu.org/&#34;&gt;Homepage&lt;/a&gt; | &lt;a href=&#34;https://github.com/dolphin-emu/dolphin&#34;&gt;Project Site&lt;/a&gt; | &lt;a href=&#34;https://dolphin.ci&#34;&gt;Buildbot&lt;/a&gt; | &lt;a href=&#34;https://forums.dolphin-emu.org&#34;&gt;Forums&lt;/a&gt; | &lt;a href=&#34;https://wiki.dolphin-emu.org&#34;&gt;Wiki&lt;/a&gt; | &lt;a href=&#34;https://github.com/dolphin-emu/dolphin/wiki&#34;&gt;Github Wiki&lt;/a&gt; | &lt;a href=&#34;https://bugs.dolphin-emu.org/projects/emulator/issues&#34;&gt;Issue Tracker&lt;/a&gt; | &lt;a href=&#34;https://github.com/dolphin-emu/dolphin/raw/master/Contributing.md&#34;&gt;Coding Style&lt;/a&gt; | &lt;a href=&#34;https://www.transifex.com/projects/p/dolphin-emu&#34;&gt;Transifex Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dolphin is an emulator for running GameCube and Wii games on Windows, Linux, macOS, and recent Android devices. It&#39;s licensed under the terms of the GNU General Public License, version 2 or later (GPLv2+).&lt;/p&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://dolphin-emu.org/docs/faq/&#34;&gt;FAQ&lt;/a&gt; before using Dolphin.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Desktop&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows (10 or higher).&lt;/li&gt; &#xA;   &lt;li&gt;Linux.&lt;/li&gt; &#xA;   &lt;li&gt;macOS (10.14 Mojave or higher).&lt;/li&gt; &#xA;   &lt;li&gt;Unix-like systems other than Linux are not officially supported but might work.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Processor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A CPU with SSE2 support.&lt;/li&gt; &#xA;   &lt;li&gt;A modern CPU (3 GHz and Dual Core, not older than 2008) is highly recommended.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Graphics &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A reasonably modern graphics card (Direct3D 11.1 / OpenGL 3.3).&lt;/li&gt; &#xA;   &lt;li&gt;A graphics card that supports Direct3D 11.1 / OpenGL 4.4 is recommended.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Android (5.0 Lollipop or higher).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Processor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A processor with support for 64-bit applications (either ARMv8 or x86-64).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Graphics &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A graphics processor that supports OpenGL ES 3.0 or higher. Performance varies heavily with &lt;a href=&#34;https://dolphin-emu.org/blog/2013/09/26/dolphin-emulator-and-opengl-drivers-hall-fameshame/&#34;&gt;driver quality&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;A graphics processor that supports standard desktop OpenGL features is recommended for best performance.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Dolphin can only be installed on devices that satisfy the above requirements. Attempting to install on an unsupported device will fail and display an error message.&lt;/p&gt; &#xA;&lt;h2&gt;Building for Windows&lt;/h2&gt; &#xA;&lt;p&gt;Use the solution file &lt;code&gt;Source/dolphin-emu.sln&lt;/code&gt; to build Dolphin on Windows. Visual Studio 2022 17.2.3 or later is a hard requirement. Other compilers might be able to build Dolphin on Windows but have not been tested and are not recommended to be used. Git and Windows 11 SDK must be installed when building.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to pull submodules before building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;Release&#34; solution configuration includes performance optimizations for the best user experience but complicates debugging Dolphin. The &#34;Debug&#34; solution configuration is significantly slower, more verbose and less permissive but makes debugging Dolphin easier.&lt;/p&gt; &#xA;&lt;h2&gt;Building for Linux and macOS&lt;/h2&gt; &#xA;&lt;p&gt;Dolphin requires &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; for systems other than Windows. Many libraries are bundled with Dolphin and used if they&#39;re not installed on your system. CMake will inform you if a bundled library is used or if you need to install any missing packages yourself. You may refer to the &lt;a href=&#34;https://github.com/dolphin-emu/dolphin/wiki/Building-for-Linux&#34;&gt;wiki&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to pull submodules before building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS Build Steps:&lt;/h3&gt; &#xA;&lt;p&gt;A binary supporting a single architecture can be built using the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make -j $(sysctl -n hw.logicalcpu)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;An application bundle will be created in &lt;code&gt;./Binaries&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A script is also provided to build universal binaries supporting both x64 and ARM in the same application bundle using the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python ../BuildMacOSUniversalBinary.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Universal binaries will be available in the &lt;code&gt;universal&lt;/code&gt; folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Doing this is more complex as it requires installation of library dependencies for both x64 and ARM (or universal library equivalents) and may require specifying additional arguments to point to relevant library locations. Execute BuildMacOSUniversalBinary.py --help for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Linux Global Build Steps:&lt;/h3&gt; &#xA;&lt;p&gt;To install to your system.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make -j $(nproc)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo make install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Linux Local Build Steps:&lt;/h3&gt; &#xA;&lt;p&gt;Useful for development as root access is not required.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir Build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd Build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake .. -DLINUX_LOCAL_DEV=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make -j $(nproc)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ln -s ../../Data/Sys Binaries/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Linux Portable Build Steps:&lt;/h3&gt; &#xA;&lt;p&gt;Can be stored on external storage and used on different Linux systems. Or useful for having multiple distinct Dolphin setups for testing/development/TAS.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir Build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd Build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake .. -DLINUX_LOCAL_DEV=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make -j $(nproc)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cp -r ../Data/Sys/ Binaries/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;touch Binaries/portable.txt&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building for Android&lt;/h2&gt; &#xA;&lt;p&gt;These instructions assume familiarity with Android development. If you do not have an Android dev environment set up, see &lt;a href=&#34;https://raw.githubusercontent.com/dolphin-emu/dolphin/master/AndroidSetup.md&#34;&gt;AndroidSetup.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to pull submodules before building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using Android Studio, import the Gradle project located in &lt;code&gt;./Source/Android&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Android apps are compiled using a build system called Gradle. Dolphin&#39;s native component, however, is compiled using CMake. The Gradle script will attempt to run a CMake build automatically while building the Java code.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstalling&lt;/h2&gt; &#xA;&lt;p&gt;On Windows, simply remove the extracted directory, unless it was installed with the NSIS installer, in which case you can uninstall Dolphin like any other Windows application.&lt;/p&gt; &#xA;&lt;p&gt;Linux users can run &lt;code&gt;cat install_manifest.txt | xargs -d &#39;\n&#39; rm&lt;/code&gt; as root from the build directory to uninstall Dolphin from their system.&lt;/p&gt; &#xA;&lt;p&gt;macOS users can simply delete Dolphin.app to uninstall it.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you&#39;ll want to remove the global user directory if you don&#39;t plan on reinstalling Dolphin.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Usage:&#34;&gt;&#xA;Options:&#xA;  --version             show program&#39;s version number and exit&#xA;  -h, --help            show this help message and exit&#xA;  -u USER, --user=USER  User folder path&#xA;  -m MOVIE, --movie=MOVIE&#xA;                        Play a movie file&#xA;  -e &amp;lt;file&amp;gt;, --exec=&amp;lt;file&amp;gt;&#xA;                        Load the specified file&#xA;  -n &amp;lt;16-character ASCII title ID&amp;gt;, --nand_title=&amp;lt;16-character ASCII title ID&amp;gt;&#xA;                        Launch a NAND title&#xA;  -C &amp;lt;System&amp;gt;.&amp;lt;Section&amp;gt;.&amp;lt;Key&amp;gt;=&amp;lt;Value&amp;gt;, --config=&amp;lt;System&amp;gt;.&amp;lt;Section&amp;gt;.&amp;lt;Key&amp;gt;=&amp;lt;Value&amp;gt;&#xA;                        Set a configuration option&#xA;  -s &amp;lt;file&amp;gt;, --save_state=&amp;lt;file&amp;gt;&#xA;                        Load the initial save state&#xA;  -d, --debugger        Show the debugger pane and additional View menu options&#xA;  -l, --logger          Open the logger&#xA;  -b, --batch           Run Dolphin without the user interface (Requires&#xA;                        --exec or --nand-title)&#xA;  -c, --confirm         Set Confirm on Stop&#xA;  -v VIDEO_BACKEND, --video_backend=VIDEO_BACKEND&#xA;                        Specify a video backend&#xA;  -a AUDIO_EMULATION, --audio_emulation=AUDIO_EMULATION&#xA;                        Choose audio emulation from [HLE|LLE]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available DSP emulation engines are HLE (High Level Emulation) and LLE (Low Level Emulation). HLE is faster but less accurate whereas LLE is slower but close to perfect. Note that LLE has two submodes (Interpreter and Recompiler) but they cannot be selected from the command line.&lt;/p&gt; &#xA;&lt;p&gt;Available video backends are &#34;D3D&#34; and &#34;D3D12&#34; (they are only available on Windows), &#34;OGL&#34;, and &#34;Vulkan&#34;. There&#39;s also &#34;Null&#34;, which will not render anything, and &#34;Software Renderer&#34;, which uses the CPU for rendering and is intended for debugging purposes only.&lt;/p&gt; &#xA;&lt;h2&gt;DolphinTool Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: dolphin-tool COMMAND -h&#xA;&#xA;commands supported: [convert, verify, header]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Usage:&#34;&gt;&#xA;Options:&#xA;  -h, --help            show this help message and exit&#xA;  -u USER, --user=USER  User folder path, required for temporary processing&#xA;                        files.Will be automatically created if this option is&#xA;                        not set.&#xA;  -i FILE, --input=FILE&#xA;                        Path to disc image FILE.&#xA;  -o FILE, --output=FILE&#xA;                        Path to the destination FILE.&#xA;  -f FORMAT, --format=FORMAT&#xA;                        Container format to use. Default is RVZ. [iso|gcz|wia|rvz]&#xA;  -s, --scrub           Scrub junk data as part of conversion.&#xA;  -b BLOCK_SIZE, --block_size=BLOCK_SIZE&#xA;                        Block size for GCZ/WIA/RVZ formats, as an integer.&#xA;                        Suggested value for RVZ: 131072 (128 KiB)&#xA;  -c COMPRESSION, --compression=COMPRESSION&#xA;                        Compression method to use when converting to WIA/RVZ.&#xA;                        Suggested value for RVZ: zstd [none|zstd|bzip|lzma|lzma2]&#xA;  -l COMPRESSION_LEVEL, --compression_level=COMPRESSION_LEVEL&#xA;                        Level of compression for the selected method. Ignored&#xA;                        if &#39;none&#39;. Suggested value for zstd: 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: verify [options]...&#xA;&#xA;Options:&#xA;  -h, --help            show this help message and exit&#xA;  -u USER, --user=USER  User folder path, required for temporary processing&#xA;                        files.Will be automatically created if this option is&#xA;                        not set.&#xA;  -i FILE, --input=FILE&#xA;                        Path to disc image FILE.&#xA;  -a ALGORITHM, --algorithm=ALGORITHM&#xA;                        Optional. Compute and print the digest using the&#xA;                        selected algorithm, then exit. [crc32|md5|sha1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: header [options]...&#xA;&#xA;Options:&#xA;  -h, --help            show this help message and exit&#xA;  -i FILE, --input=FILE&#xA;                        Path to disc image FILE.&#xA;  -b, --block_size      Optional. Print the block size of GCZ/WIA/RVZ formats,&#xA;then exit.&#xA;  -c, --compression     Optional. Print the compression method of GCZ/WIA/RVZ&#xA;                        formats, then exit.&#xA;  -l, --compression_level&#xA;                        Optional. Print the level of compression for WIA/RVZ&#xA;                        formats, then exit.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>