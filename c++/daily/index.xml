<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-02T01:32:14Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Beep6581/RawTherapee</title>
    <updated>2023-06-02T01:32:14Z</updated>
    <id>tag:github.com,2023-06-02:/Beep6581/RawTherapee</id>
    <link href="https://github.com/Beep6581/RawTherapee" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful cross-platform raw photo processing program&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/Beep6581/RawTherapee/dev/rtdata/images/rt-logo-text-white.svg&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/Beep6581/RawTherapee/dev/rtdata/images/rt-logo-text-black.svg&#34;&gt; &#xA; &lt;img alt=&#34;RawTherapee logo&#34; src=&#34;https://raw.githubusercontent.com/Beep6581/RawTherapee/dev/%5Bhttps://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png%5D(https://raw.githubusercontent.com/Beep6581/RawTherapee/dev/rtdata/images/rt-logo-text-black.svg)&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://rawtherapee.com/images/carousel/100_rt59_provence_local_maskxxx.jpg&#34; alt=&#34;RawTherapee screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;RawTherapee is a powerful, cross-platform raw photo processing program, released as &lt;a href=&#34;https://en.wikipedia.org/wiki/Free_software&#34;&gt;libre software&lt;/a&gt; under the &lt;a href=&#34;https://opensource.org/licenses/gpl-3.0.html&#34;&gt;GNU General Public License Version 3&lt;/a&gt;. It is written mostly in C++ using a &lt;a href=&#34;https://www.gtk.org&#34;&gt;GTK+&lt;/a&gt; front-end. It uses a patched version of &lt;a href=&#34;https://www.dechifro.org/dcraw/&#34;&gt;dcraw&lt;/a&gt; for reading raw files, with an in-house solution which adds the highest quality support for certain camera models unsupported by dcraw and enhances the accuracy of certain raw files already supported by dcraw. It is notable for the advanced control it gives the user over the demosaicing and development process.&lt;/p&gt; &#xA;&lt;h2&gt;Target Audience&lt;/h2&gt; &#xA;&lt;p&gt;RawTherapee is designed for developing raw files from a broad range of digital cameras, as well as &lt;a href=&#34;https://helpx.adobe.com/photoshop/digital-negative.html&#34;&gt;HDR DNG&lt;/a&gt; files and non-raw image formats (&lt;a href=&#34;https://en.wikipedia.org/wiki/JPEG&#34;&gt;JPEG&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Tagged_Image_File_Format&#34;&gt;TIFF&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Portable_Network_Graphics&#34;&gt;PNG&lt;/a&gt;). The target audience ranges from enthusiast newcomers who wish to broaden their understanding of how digital imaging works to semi-professional photographers. Knowledge in color science is not compulsory, but it is recommended that you are eager to learn and ready to read our documentation (&lt;a href=&#34;https://rawpedia.rawtherapee.com/&#34;&gt;RawPedia&lt;/a&gt;) as well as look up basic concepts which lie outside the scope of RawPedia, such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Color_balance&#34;&gt;color balance&lt;/a&gt;, elsewhere.&lt;/p&gt; &#xA;&lt;p&gt;Professionals may use RawTherapee as well while enjoying complete freedom, but will probably lack some peripheral features such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Digital_asset_management&#34;&gt;Digital Asset Management&lt;/a&gt;, printing, uploading, etc. RawTherapee is not aimed at being an inclusive all-in-one program, and the &lt;a href=&#34;https://en.wikipedia.org/wiki/Open-source_movement&#34;&gt;open-source community&lt;/a&gt; is sufficiently developed by now to offer all those peripheral features in other specialized software.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;p&gt;Website: &lt;a href=&#34;https://www.rawtherapee.com/&#34;&gt;https://www.rawtherapee.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Forum: &lt;a href=&#34;https://discuss.pixls.us/c/software/rawtherapee&#34;&gt;https://discuss.pixls.us/c/software/rawtherapee&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Features: &lt;a href=&#34;https://rawpedia.rawtherapee.com/Features&#34;&gt;https://rawpedia.rawtherapee.com/Features&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation: &lt;a href=&#34;https://rawpedia.rawtherapee.com/&#34;&gt;https://rawpedia.rawtherapee.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download RawTherapee: &lt;a href=&#34;https://www.rawtherapee.com/downloads&#34;&gt;https://www.rawtherapee.com/downloads&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download source code tarballs: &lt;a href=&#34;https://www.rawtherapee.com/shared/source/&#34;&gt;https://www.rawtherapee.com/shared/source/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compilation, Branches and Git&lt;/h2&gt; &#xA;&lt;p&gt;Refer to RawPedia for a detailed explanation of how to get the necessary dependencies and how to compile RawTherapee.&lt;/p&gt; &#xA;&lt;p&gt;Linux: &lt;a href=&#34;https://rawpedia.rawtherapee.com/Linux&#34;&gt;https://rawpedia.rawtherapee.com/Linux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Windows: &lt;a href=&#34;https://rawpedia.rawtherapee.com/Windows&#34;&gt;https://rawpedia.rawtherapee.com/Windows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;macOS: &lt;a href=&#34;https://rawpedia.rawtherapee.com/macOS&#34;&gt;https://rawpedia.rawtherapee.com/macOS&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>adamritter/fastgron</title>
    <updated>2023-06-02T01:32:14Z</updated>
    <id>tag:github.com,2023-06-02:/adamritter/fastgron</id>
    <link href="https://github.com/adamritter/fastgron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High-performance JSON to GRON (greppable, flattened JSON) converter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fastgron&lt;/h1&gt; &#xA;&lt;p&gt;Make JSON greppable super fast!&lt;/p&gt; &#xA;&lt;p&gt;fastgron transforms JSON into discrete assignments to make it easier to grep for what you want and see the absolute &#39;path&#39; to it. It eases the exploration of APIs that return large blobs of JSON but have terrible documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fastgron&lt;/code&gt; is a high-performance JSON to GRON converter, developed in C++20, utilizing simdjson library. It&#39;s 50x faster than &lt;a href=&#34;https://github.com/tomnomnom/gron&#34;&gt;gron&lt;/a&gt; on big files (400MB/s input / 1.8GB/s output on M1 Macbook Pro), so it makes big JSON files greppable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fastgron &#34;https://api.github.com/repos/adamritter/fastgron/commits?per_page=1&#34; | fgrep commit.author&#xA;json[0].commit.author = {}&#xA;json[0].commit.author.name = &#34;adamritter&#34;&#xA;json[0].commit.author.email = &#34;58403584+adamritter@users.noreply.github.com&#34;&#xA;json[0].commit.author.date = &#34;2023-05-30T18:04:25Z&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;fastgron can work backwards too, enabling you to turn your filtered data back into JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fastgron &#34;https://api.github.com/repos/adamritter/fastgron/commits?per_page=1&#34; | fgrep commit.author | fastgron --ungron&#xA;[&#xA;  {&#xA;    &#34;commit&#34;: {&#xA;      &#34;author&#34;: {&#xA;        &#34;date&#34;: &#34;2023-05-30T18:11:03Z&#34;,&#xA;        &#34;email&#34;: &#34;58403584+adamritter@users.noreply.github.com&#34;,&#xA;        &#34;name&#34;: &#34;adamritter&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Install&lt;/h2&gt; &#xA;&lt;p&gt;MacOS, Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install fastgron&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows: Download from &lt;a href=&#34;https://github.com/adamritter/fastgron/releases/tag/v0.1.8&#34;&gt;release&lt;/a&gt; libcurl support is missing from the released binary, so http / https URLs can&#39;t yet be read directly on Windows&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cat testdata/two.json&#xA;{&#xA;    &#34;name&#34;: &#34;Tom&#34;,&#xA;    &#34;github&#34;: &#34;https://github.com/tomnomnom/&#34;,&#xA;    &#34;likes&#34;: [&#34;code&#34;, &#34;cheese&#34;, &#34;meat&#34;],&#xA;    &#34;contact&#34;: {&#xA;        &#34;email&#34;: &#34;mail@tomnomnom.com&#34;,&#xA;        &#34;twitter&#34;: &#34;@TomNomNom&#34;&#xA;    }&#xA;}&#xA;&amp;gt; fastgron testdata/two.json&#xA;json = {}&#xA;json.name = &#34;Tom&#34;&#xA;json.github = &#34;https://github.com/tomnomnom/&#34;&#xA;json.likes = []&#xA;json.likes[0] = &#34;code&#34;&#xA;json.likes[1] = &#34;cheese&#34;&#xA;json.likes[2] = &#34;meat&#34;&#xA;json.contact = {}&#xA;json.contact.email = &#34;mail@tomnomnom.com&#34;&#xA;json.contact.twitter = &#34;@TomNomNom&#34;&#xA;&#xA;&amp;gt; fastgron --help&#xA;Usage: fastgron [OPTIONS] [FILE | URL] [.path]&#xA;&#xA;positional arguments:&#xA;  FILE           file name (or &#39;-&#39; for standard input)&#xA;&#xA;options:&#xA;  -h, --help     show this help message and exit&#xA;  -V, --version  show version information and exit&#xA;  -s, --stream   enable stream mode&#xA;  -F, --fixed-string PATTERN  filter output by fixed string.&#xA;                     If -F is provided multiple times, multiple patterns are searched.&#xA;  -v, --invert-match select non-matching lines for fixed string search&#xA;  -i, --ignore-case  ignore case distinctions in PATTERN&#xA;  --sort sort output by key&#xA;  --user-agent   set user agent&#xA;  -u, --ungron   ungron: convert gron output back to JSON&#xA;  -p, -path      filter path, for example .#.3.population or cities.#.population&#xA;                 -p is optional if path starts with . and file with that name doesn&#39;t exist&#xA;  --no-indent   don&#39;t indent output&#xA;  --root        root path, default is json&#xA;  --semicolon   add semicolon to the end of each line&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The file name can be - or missing, in that case the data is read from stdin.&lt;/p&gt; &#xA;&lt;h2&gt;JSON lines (-s or --stream)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fastgron&#34;&gt;json = []&#xA;json[0] = {}&#xA;json[0].one = 1&#xA;json[0].two = 2&#xA;json[0].three = []&#xA;json[0].three[0] = 1&#xA;json[0].three[1] = 2&#xA;json[0].three[2] = 3&#xA;json[1] = {}&#xA;json[1].one = 1&#xA;json[1].two = 2&#xA;json[1].three = []&#xA;json[1].three[0] = 1&#xA;json[1].three[1] = 2&#xA;json[1].three[2] = 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Speed (50x speedup compared to gron on 190MB file)&lt;/h2&gt; &#xA;&lt;p&gt;While there&#39;s a 50x speedup for converting JSON to GRON, gron is not able to convert a 800MB file back to JSON.&lt;/p&gt; &#xA;&lt;p&gt;It takes 8s for fastgron to convert the 840MB file back to JSON.&lt;/p&gt; &#xA;&lt;p&gt;citylots.json can be downloaded here: &lt;a href=&#34;https://github.com/zemirco/sf-city-lots-json/raw/master/citylots.json&#34;&gt;https://github.com/zemirco/sf-city-lots-json/blob/master/citylots.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;time fastgron ~/Downloads/citylots.json &amp;gt; /dev/null&#xA;fastgron ~/Downloads/citylots.json &amp;gt; /dev/null  0.38s user 0.07s system 99% cpu 0.447 total&#xA;&#xA;time gron --no-sort ~/Downloads/citylots.json  &amp;gt;/dev/null&#xA;gron --no-sort ~/Downloads/citylots.json &amp;gt; /dev/null  27.60s user 30.73s system 158% cpu 36.705 total&#xA;&#xA;time fastgron --sort ~/Downloads/citylots.json &amp;gt; /dev/null&#xA;fastgron --sort ~/Downloads/citylots.json &amp;gt; /dev/null  1.05s user 0.41s system 99% cpu 1.464 total&#xA;&#xA;time gron ~/Downloads/citylots.json &amp;gt; /dev/null&#xA;gron ~/Downloads/citylots.json &amp;gt; /dev/null 52.34s user 48.46s system 117% cpu 1:25.80 total&#xA;&#xA;time fastgron ~/Downloads/citylots.json | rg UTAH&#xA;json.features[132396].properties.STREET = &#34;UTAH&#34;&#xA;json.features[132434].properties.STREET = &#34;UTAH&#34;&#xA;json.features[132438].properties.STREET = &#34;UTAH&#34;&#xA;json.features[132480].properties.STREET = &#34;UTAH&#34;&#xA;...&#xA;json.features[139041].properties.STREET = &#34;UTAH&#34;&#xA;json.features[139489].properties.STREET = &#34;UTAH&#34;&#xA;fastgron ~/Downloads/citylots.json  0.39s user 0.11s system 80% cpu 0.629 total&#xA;rg UTAH  0.07s user 0.05s system 19% cpu 0.629 total&#xA;&#xA;time fastgron -u citylots.gson &amp;gt; c2.json&#xA;fastgron -u citylots.gson &amp;gt; c2.json  5.62s user 0.47s system 99% cpu 6.122 total&#xA;&#xA;time gron -u citylots.gson &amp;gt; c3.json&#xA;[2]    8270 killed     gron -u citylots.gson &amp;gt; c3.json&#xA;gron -u citylots.gson &amp;gt; c3.json  66.99s user 61.06s system 189% cpu 1:07.75 total&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To build and run this project, you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A C++20 compatible compiler&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; (version 3.8 or higher)&lt;/li&gt; &#xA; &lt;li&gt;libcurl installed (Optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building and Installation&lt;/h2&gt; &#xA;&lt;p&gt;Here are the steps to build, test, and install &lt;code&gt;fastgron&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/adamritter/fastgron.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Move into the project directory: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd fastgron&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Make a new directory for building: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build &amp;amp;&amp;amp; cd build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Generate Makefile using CMake: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake ..&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build the project: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To install, use the following command: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only color terminal support is missing from GRON&lt;/li&gt; &#xA; &lt;li&gt;Make ungron even faster by remembering keys in the last path&lt;/li&gt; &#xA; &lt;li&gt;Paths: Implement path autocompletition, * / ?, .&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>