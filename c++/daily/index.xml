<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-13T01:32:15Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DISTRHO/Cardinal</title>
    <updated>2022-07-13T01:32:15Z</updated>
    <id>tag:github.com,2022-07-13:/DISTRHO/Cardinal</id>
    <link href="https://github.com/DISTRHO/Cardinal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Virtual modular synthesizer plugin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DISTRHO Cardinal&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Cardinal, the Rack!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cardinal is a free and open-source virtual modular synthesizer plugin, available as JACK standalone and AU, LV2, VST2 and VST3 audio plugin for FreeBSD, Linux, macOS and Windows.&lt;br&gt; It is based on the popular &lt;a href=&#34;https://vcvrack.com/&#34;&gt;VCV Rack&lt;/a&gt; but with a focus on being a fully self-contained plugin version.&lt;/p&gt; &#xA;&lt;p&gt;More specifically, this is a &lt;a href=&#34;https://github.com/DISTRHO/DPF/&#34;&gt;DPF-based&lt;/a&gt; plugin wrapper around &lt;a href=&#34;https://github.com/VCVRack/Rack/&#34;&gt;VCV Rack&lt;/a&gt;, using its code directly instead of forking the project, with the target of having a &lt;strong&gt;proper, self-contained, fully free and open-source plugin version of Rack&lt;/strong&gt;.&lt;br&gt; See the &lt;a href=&#34;https://raw.githubusercontent.com/DISTRHO/Cardinal/main/#Why&#34;&gt;why section&lt;/a&gt; below for the reasons Cardinal exists, also for frequently asked questions check this &lt;a href=&#34;https://raw.githubusercontent.com/DISTRHO/Cardinal/main/docs/FAQ.md&#34;&gt;FAQ document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Cardinal contains Rack, some 3rd-party modules and a few internal utilities all in a single binary.&lt;br&gt; All &#34;Core&#34; modules from Rack have been replaced by Cardinal equivalents, simplified to better work for an audio plugin.&lt;/p&gt; &#xA;&lt;p&gt;Cardinal does not load external modules and does not connect to the official Rack library/store.&lt;br&gt; All VCV branding has been removed (to the best of our knowledge) in order to avoid any trademark issues.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The VST3 version is in progress, already part of the build but still experimental.&lt;/strong&gt;&lt;br&gt; Prefer to use other formats if you can.&lt;/p&gt; &#xA;&lt;h2&gt;Current status&lt;/h2&gt; &#xA;&lt;p&gt;Cardinal should be considered stable, if you spot any bugs please report them.&lt;br&gt; Currently the following should be noted:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VST3 support incomplete/experimental &lt;a href=&#34;https://github.com/DISTRHO/Cardinal/issues/41&#34;&gt;#41&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows 32bit builds do not work well &lt;a href=&#34;https://github.com/DISTRHO/Cardinal/issues/80&#34;&gt;#80&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stable release&lt;/h3&gt; &#xA;&lt;p&gt;Cardinal releases have official builds for Linux, macOS and Windows.&lt;br&gt; You can find these under &lt;a href=&#34;https://github.com/DISTRHO/Cardinal/releases&#34;&gt;https://github.com/DISTRHO/Cardinal/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are Linux builds for various architectures (armhf, arm64, i686 and x86_64), macOS &#34;universal&#34; (arm64 + intel) and Windows 32 and 64bit builds. Both macOS and Windows builds have an installer.&lt;br&gt; Install instructions are available &lt;a href=&#34;https://github.com/DISTRHO/Cardinal/wiki/Install&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: Neither the macOS or Windows builds are signed, so expect warnings saying they are from an &#34;untrusted developer&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Nightly builds&lt;/h3&gt; &#xA;&lt;p&gt;You can find builds for pretty much any recent Cardinal commit &lt;a href=&#34;https://github.com/DISTRHO/Cardinal/actions/workflows/build.yml&#34;&gt;here&lt;/a&gt;.&lt;br&gt; Just click on any successful build, and scroll to the bottom to find the builds.&lt;br&gt; (note the canvas-like area in the middle prevents mouse wheel scrolling)&lt;/p&gt; &#xA;&lt;p&gt;A GitHub account is required in order to download these builds.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Basic building instructions are available in &lt;a href=&#34;https://raw.githubusercontent.com/DISTRHO/Cardinal/main/docs/BUILDING.md&#34;&gt;BUILDING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Plugin variants&lt;/h2&gt; &#xA;&lt;p&gt;Cardinal provides 3 plugin variants - &#34;main&#34;, Synth and FX.&lt;br&gt; They are all equivalent in performance and behaviour, with only the IO and metadata that changes.&lt;br&gt; This is because some hosts are very strict on which plugins are allowed as instruments vs FX, so separate variants of the same plugin are needed.&lt;/p&gt; &#xA;&lt;p&gt;FX and Synth variants both have 2 audio outputs, while &#34;main&#34; has 8.&lt;br&gt; All variants have MIDI input and output support.&lt;/p&gt; &#xA;&lt;h3&gt;Main&lt;/h3&gt; &#xA;&lt;p&gt;This variant provides 8 audio inputs and outputs and 10 CV inputs and outputs.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Due to AU and VST2 formats not supporting CV ports, this variant is not available for those formats.&lt;/p&gt; &#xA;&lt;h3&gt;Synth&lt;/h3&gt; &#xA;&lt;p&gt;This variant provides 2 audio outputs but no audio inputs or CV ports.&lt;br&gt; Plugin type is set as &#34;instrument&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;FX&lt;/h3&gt; &#xA;&lt;p&gt;This variant provides 2 audio inputs and outputs, but no CV ports.&lt;br&gt; Plugin type is set as regular &#34;effect&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Because people will ask for it. It is, well... Rack.&lt;br&gt; But a couple of modules background&#39;s have their colors flipped, because damn we want proper dark mode!&lt;/p&gt; &#xA;&lt;h3&gt;Module browser&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DISTRHO/Cardinal/main/docs/Screenshot_Module-Browser.png&#34; alt=&#34;screenshot&#34; title=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Basic patching&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DISTRHO/Cardinal/main/docs/Screenshot_Basic-Patching.png&#34; alt=&#34;screenshot&#34; title=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Carla and Ildaeil plugin hosts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DISTRHO/Cardinal/main/docs/Screenshot_Carla+Ildaeil.png&#34; alt=&#34;screenshot&#34; title=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom Fundamental modules design&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DISTRHO/Cardinal/main/docs/Screenshot_Fundamental.png&#34; alt=&#34;screenshot&#34; title=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Included modules&lt;/h2&gt; &#xA;&lt;p&gt;At the moment the following 3rd-party modules are provided:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;21kHz&lt;/li&gt; &#xA; &lt;li&gt;8Mode&lt;/li&gt; &#xA; &lt;li&gt;Aaron Static&lt;/li&gt; &#xA; &lt;li&gt;AlgoritmArte&lt;/li&gt; &#xA; &lt;li&gt;Amalgamated Harmonics&lt;/li&gt; &#xA; &lt;li&gt;Animated Circuits&lt;/li&gt; &#xA; &lt;li&gt;Arable Instruments&lt;/li&gt; &#xA; &lt;li&gt;Aria Salvatrice&lt;/li&gt; &#xA; &lt;li&gt;AS&lt;/li&gt; &#xA; &lt;li&gt;Audible Instruments&lt;/li&gt; &#xA; &lt;li&gt;Autinn&lt;/li&gt; &#xA; &lt;li&gt;Axioma&lt;/li&gt; &#xA; &lt;li&gt;Bacon Music&lt;/li&gt; &#xA; &lt;li&gt;Befaco&lt;/li&gt; &#xA; &lt;li&gt;Bidoo&lt;/li&gt; &#xA; &lt;li&gt;Bogaudio&lt;/li&gt; &#xA; &lt;li&gt;Catro/Modulo&lt;/li&gt; &#xA; &lt;li&gt;cf&lt;/li&gt; &#xA; &lt;li&gt;ChowDSP&lt;/li&gt; &#xA; &lt;li&gt;DrumKit&lt;/li&gt; &#xA; &lt;li&gt;E-Series&lt;/li&gt; &#xA; &lt;li&gt;ExpertSleepers Encoders&lt;/li&gt; &#xA; &lt;li&gt;Extratone&lt;/li&gt; &#xA; &lt;li&gt;Fehler Fabrik&lt;/li&gt; &#xA; &lt;li&gt;forsitan modulare&lt;/li&gt; &#xA; &lt;li&gt;Fundamental&lt;/li&gt; &#xA; &lt;li&gt;Glue the Giant&lt;/li&gt; &#xA; &lt;li&gt;GoodSheperd&lt;/li&gt; &#xA; &lt;li&gt;Grande&lt;/li&gt; &#xA; &lt;li&gt;Hampton Harmonics&lt;/li&gt; &#xA; &lt;li&gt;HetrickCV&lt;/li&gt; &#xA; &lt;li&gt;ihtsyn&lt;/li&gt; &#xA; &lt;li&gt;Impromptu&lt;/li&gt; &#xA; &lt;li&gt;JW-Modules&lt;/li&gt; &#xA; &lt;li&gt;kocmoc&lt;/li&gt; &#xA; &lt;li&gt;LifeFormModular&lt;/li&gt; &#xA; &lt;li&gt;Lilac Loop&lt;/li&gt; &#xA; &lt;li&gt;Little Utils&lt;/li&gt; &#xA; &lt;li&gt;Lomas Modules&lt;/li&gt; &#xA; &lt;li&gt;Lyrae Modules&lt;/li&gt; &#xA; &lt;li&gt;Meander&lt;/li&gt; &#xA; &lt;li&gt;MindMeld&lt;/li&gt; &#xA; &lt;li&gt;ML Modules&lt;/li&gt; &#xA; &lt;li&gt;Mockba Modular&lt;/li&gt; &#xA; &lt;li&gt;Mog&lt;/li&gt; &#xA; &lt;li&gt;mscHack&lt;/li&gt; &#xA; &lt;li&gt;MSM&lt;/li&gt; &#xA; &lt;li&gt;Myth&lt;/li&gt; &#xA; &lt;li&gt;Nonlinear Circuits&lt;/li&gt; &#xA; &lt;li&gt;Orbits&lt;/li&gt; &#xA; &lt;li&gt;Parable Instruments&lt;/li&gt; &#xA; &lt;li&gt;Path Set&lt;/li&gt; &#xA; &lt;li&gt;PinkTrombone&lt;/li&gt; &#xA; &lt;li&gt;Prism&lt;/li&gt; &#xA; &lt;li&gt;rackwindows&lt;/li&gt; &#xA; &lt;li&gt;repelzen&lt;/li&gt; &#xA; &lt;li&gt;Sonus Modular&lt;/li&gt; &#xA; &lt;li&gt;stocaudio&lt;/li&gt; &#xA; &lt;li&gt;unless_modules&lt;/li&gt; &#xA; &lt;li&gt;Valley&lt;/li&gt; &#xA; &lt;li&gt;Voxglitch&lt;/li&gt; &#xA; &lt;li&gt;WhatTheRack&lt;/li&gt; &#xA; &lt;li&gt;ZetaCarinae&lt;/li&gt; &#xA; &lt;li&gt;ZZC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally Cardinal provides its own modules for DAW/Host automation, time position, audio to CV pitch conversion and internal plugin hosting.&lt;/p&gt; &#xA;&lt;h3&gt;Adding modules&lt;/h3&gt; &#xA;&lt;p&gt;Install new modules on a Cardinal build is not possible, but we can add new modules to the build.&lt;br&gt; Details on this are available &lt;a href=&#34;https://github.com/DISTRHO/Cardinal/discussions/28&#34;&gt;here&lt;/a&gt;.&lt;br&gt; Also check &lt;a href=&#34;https://github.com/DISTRHO/Cardinal/wiki/Possible-modules-to-include&#34;&gt;this wiki page&lt;/a&gt; where we discuss possible modules to include.&lt;/p&gt; &#xA;&lt;h3&gt;Module restrictions&lt;/h3&gt; &#xA;&lt;p&gt;All included modules are open-source and have a GPLv3+ compatible license. (GPLv3-only modules are not allowed)&lt;br&gt; It is a requirement that the final Cardinal binary is GPLv3+ licensed.&lt;/p&gt; &#xA;&lt;p&gt;Module dependencies should be kept at a minimum, as otherwise it quickly grows the complexity of the build.&lt;br&gt; Online access (such as phone-home) is not allowed.&lt;/p&gt; &#xA;&lt;p&gt;Worth noting that a few modules have artwork licensed separately from their code.&lt;br&gt; These licenses range from CC-0 to CC-NC-ND to custom (used with permission).&lt;br&gt; An overview of the included artwork licenses can be seen &lt;a href=&#34;https://raw.githubusercontent.com/DISTRHO/Cardinal/main/docs/LICENSES.md#artwork--panel-licenses&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Even though CC-NC is problematic for packaging (some linux distributions are commercial in nature), Cardinal allows their use because of how prevalent they are across many Rack modules.&lt;br&gt; Even the Rack &#34;Component Library&#34; (which can be considered the base widget elements) is CC-NC licensed.&lt;/p&gt; &#xA;&lt;p&gt;Any artwork that uses a custom license has had explicit permission to be used in Cardinal.&lt;/p&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;Cardinal was created first and foremost as a way to have Rack as a &lt;strong&gt;proper open-source audio plugin&lt;/strong&gt;.&lt;br&gt; A proper audio plugin should be self-contained as much as possible, as to not interfere with the DAW/Host. Loading external modules clearly goes against this idea.&lt;br&gt; Not to mention being &lt;strong&gt;open-source&lt;/strong&gt;, otherwise we are at the mercy of the wishes of a company for what we can and cannot do, which is not something Cardinal&#39;s authors wish to abide by.&lt;/p&gt; &#xA;&lt;p&gt;A self-contained plugin can&#39;t be overstated, as DLL/shared-object symbol conflicts can trigger hard-to-debug crashes.&lt;br&gt; While Rack tries to mitigate this as much as possible, crashes due to conflicting modules have already been seen in v2 builds.&lt;br&gt; On the other side, Cardinal redefines class and function names as needed to avoid as many conflicts as possible.&lt;/p&gt; &#xA;&lt;p&gt;Support for ARM and non-mainstream platforms (for example BSD) has also always been missing from the official Rack since the start.&lt;br&gt; While we can patch the Rack free version to support these, same can&#39;t be done with Rack Pro with it being a closed-source product.&lt;br&gt; The online library/store only supports a very specific set of platforms too, so non-supported platforms would need any 3rd-party modules to be manually compiled to make them usable.&lt;/p&gt; &#xA;&lt;p&gt;Unhappiness with the audio threading behaviour of Rack also plays a role.&lt;br&gt; Both audio and MIDI should be locked to the host audio thread as to minimize (or even altogether remove) latency and jitter.&lt;br&gt; The use of separate threads for MIDI is bad design, one that has been corrected in DAWs and JACK-MIDI for several years...&lt;br&gt; But Rack&#39;s use of RtMidi requires separate threading, so Cardinal does not use it.&lt;/p&gt; &#xA;&lt;p&gt;Other relevant reasons include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LV2 plugin version from the start&lt;/li&gt; &#xA; &lt;li&gt;Proper dark mode support&lt;/li&gt; &#xA; &lt;li&gt;Proper optimized build (because all code is compiled to a single file, we can use LTO over the whole thing)&lt;/li&gt; &#xA; &lt;li&gt;Real CV ports to and from the plugin&lt;/li&gt; &#xA; &lt;li&gt;Removing online access from the plugin and included modules (no phone-home here!)&lt;/li&gt; &#xA; &lt;li&gt;Works as a test case for &lt;a href=&#34;https://github.com/DISTRHO/DPF/&#34;&gt;DPF&lt;/a&gt; and &lt;a href=&#34;https://github.com/falkTX/Carla/&#34;&gt;Carla&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;It is fun :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Vs. Rack Pro&lt;/h2&gt; &#xA;&lt;p&gt;It needs to be said that Cardinal project and its author(s) do not wish anything bad to the original/official Rack project.&lt;br&gt; In fact, Cardinal wouldn&#39;t exist if not for Rack v2 release. (which has many needed things to make a plugin version work)&lt;/p&gt; &#xA;&lt;p&gt;Cardinal and Rack should be able to co-exist friendly and peacefully, as they clearly have different targets.&lt;br&gt; It is likely most people will prefer to use Rack Pro for its official support and its big module collection (including commercial ones).&lt;/p&gt; &#xA;&lt;p&gt;A feature comparison between Cardinal and Rack Pro can be seen &lt;a href=&#34;https://raw.githubusercontent.com/DISTRHO/Cardinal/main/docs/DIFFERENCES.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Cardinal is licensed under GPLv3+, see &lt;a href=&#34;https://raw.githubusercontent.com/DISTRHO/Cardinal/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more details.&lt;br&gt; An overview of the included code and linked submodules can be seen &lt;a href=&#34;https://raw.githubusercontent.com/DISTRHO/Cardinal/main/docs/LICENSES.md#code-license--binary&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community chat&lt;/h2&gt; &#xA;&lt;p&gt;Currently we are all on #cardinal IRC room in irc.libera.chat server.&lt;br&gt; Come join us in your favorite IRC client or through a Matrix bridge.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ethereum/solidity</title>
    <updated>2022-07-13T01:32:15Z</updated>
    <id>tag:github.com,2022-07-13:/ethereum/solidity</id>
    <link href="https://github.com/ethereum/solidity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Solidity, the Smart Contract Programming Language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Solidity Contract-Oriented Programming Language&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/#ethereum_solidity:gitter.im&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Matrix%20-chat-brightgreen?style=plastic&amp;amp;logo=matrix&#34; alt=&#34;Matrix Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/ethereum/solidity&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitter%20-chat-brightgreen?style=plastic&amp;amp;logo=gitter&#34; alt=&#34;Gitter Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forum.soliditylang.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Solidity_Forum%20-discuss-brightgreen?style=plastic&amp;amp;logo=discourse&#34; alt=&#34;Solidity&amp;nbsp;Forum&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/solidity_lang&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/solidity_lang?style=plastic&amp;amp;logo=twitter&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fosstodon.org/@solidity&#34;&gt;&lt;img src=&#34;https://img.shields.io/mastodon/follow/000335908?domain=https%3A%2F%2Ffosstodon.org%2F&amp;amp;logo=mastodon&amp;amp;style=plastic&#34; alt=&#34;Mastodon Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can talk to us on Gitter and Matrix, tweet at us on Twitter or create a new topic in the Solidity forum. Questions, feedback, and suggestions are welcome!&lt;/p&gt; &#xA;&lt;p&gt;Solidity is a statically typed, contract-oriented, high-level language for implementing smart contracts on the Ethereum platform.&lt;/p&gt; &#xA;&lt;p&gt;For a good overview and starting point, please check out the official &lt;a href=&#34;https://soliditylang.org&#34;&gt;Solidity Language Portal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ethereum/solidity/develop/#background&#34;&gt;Background&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ethereum/solidity/develop/#build-and-install&#34;&gt;Build and Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ethereum/solidity/develop/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ethereum/solidity/develop/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ethereum/solidity/develop/#development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ethereum/solidity/develop/#maintainers&#34;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ethereum/solidity/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ethereum/solidity/develop/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;Solidity is a statically-typed curly-braces programming language designed for developing smart contracts that run on the Ethereum Virtual Machine. Smart contracts are programs that are executed inside a peer-to-peer network where nobody has special authority over the execution, and thus they allow to implement tokens of value, ownership, voting, and other kinds of logic.&lt;/p&gt; &#xA;&lt;p&gt;When deploying contracts, you should use the latest released version of Solidity. This is because breaking changes, as well as new features and bug fixes are introduced regularly. We currently use a 0.x version number &lt;a href=&#34;https://semver.org/#spec-item-4&#34;&gt;to indicate this fast pace of change&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build and Install&lt;/h2&gt; &#xA;&lt;p&gt;Instructions about how to build and install the Solidity compiler can be found in the &lt;a href=&#34;https://docs.soliditylang.org/en/latest/installing-solidity.html#building-from-source&#34;&gt;Solidity documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;A &#34;Hello World&#34; program in Solidity is of even less use than in other languages, but still:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-solidity&#34;&gt;// SPDX-License-Identifier: MIT&#xA;pragma solidity &amp;gt;=0.6.0 &amp;lt;0.9.0;&#xA;&#xA;contract HelloWorld {&#xA;    function helloWorld() external pure returns (string memory) {&#xA;        return &#34;Hello, World!&#34;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get started with Solidity, you can use &lt;a href=&#34;https://remix.ethereum.org/&#34;&gt;Remix&lt;/a&gt;, which is a browser-based IDE. Here are some example contracts:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.soliditylang.org/en/latest/solidity-by-example.html#voting&#34;&gt;Voting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.soliditylang.org/en/latest/solidity-by-example.html#blind-auction&#34;&gt;Blind Auction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.soliditylang.org/en/latest/solidity-by-example.html#safe-remote-purchase&#34;&gt;Safe remote purchase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.soliditylang.org/en/latest/solidity-by-example.html#micropayment-channel&#34;&gt;Micropayment Channel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The Solidity documentation is hosted at &lt;a href=&#34;https://docs.soliditylang.org&#34;&gt;Read the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Solidity is still under development. Contributions are always welcome! Please follow the &lt;a href=&#34;https://docs.soliditylang.org/en/latest/contributing.html&#34;&gt;Developers Guide&lt;/a&gt; if you want to help.&lt;/p&gt; &#xA;&lt;p&gt;You can find our current feature and bug priorities for forthcoming releases in the &lt;a href=&#34;https://github.com/ethereum/solidity/projects&#34;&gt;projects section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/axic&#34;&gt;@axic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chriseth&#34;&gt;@chriseth&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Solidity is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/ethereum/solidity/develop/LICENSE.txt&#34;&gt;GNU General Public License v3.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some third-party code has its &lt;a href=&#34;https://raw.githubusercontent.com/ethereum/solidity/develop/cmake/templates/license.h.in&#34;&gt;own licensing terms&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;The security policy may be &lt;a href=&#34;https://raw.githubusercontent.com/ethereum/solidity/develop/SECURITY.md&#34;&gt;found here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Z3Prover/z3</title>
    <updated>2022-07-13T01:32:15Z</updated>
    <id>tag:github.com,2022-07-13:/Z3Prover/z3</id>
    <link href="https://github.com/Z3Prover/z3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Z3 Theorem Prover&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Z3&lt;/h1&gt; &#xA;&lt;p&gt;Z3 is a theorem prover from Microsoft Research. It is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/LICENSE.txt&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are not familiar with Z3, you can start &lt;a href=&#34;https://github.com/Z3Prover/z3/wiki#background&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pre-built binaries for stable and nightly releases are available from &lt;a href=&#34;https://github.com/Z3Prover/z3/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Z3 can be built using &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/#building-z3-on-windows-using-visual-studio-command-prompt&#34;&gt;Visual Studio&lt;/a&gt;, a &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/#building-z3-using-make-and-gccclang&#34;&gt;Makefile&lt;/a&gt; or using &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/#building-z3-using-cmake&#34;&gt;CMake&lt;/a&gt;. It provides &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/#z3-bindings&#34;&gt;bindings for several programming languages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/RELEASE_NOTES&#34;&gt;release notes&lt;/a&gt; for notes on various stable releases of Z3.&lt;/p&gt; &#xA;&lt;h2&gt;Build status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Azure Pipelines&lt;/th&gt; &#xA;   &lt;th&gt;Code Coverage&lt;/th&gt; &#xA;   &lt;th&gt;Open Bugs&lt;/th&gt; &#xA;   &lt;th&gt;Android Build&lt;/th&gt; &#xA;   &lt;th&gt;WASM Build&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/Z3Public/Z3/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/Z3Public/Z3/_apis/build/status/Z3Prover.z3?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Z3Prover/z3/actions/workflows/coverage.yml&#34;&gt;&lt;img src=&#34;https://github.com/Z3Prover/z3/actions/workflows/coverage.yml/badge.svg?sanitize=true&#34; alt=&#34;CodeCoverage&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Z3Prover/z3/actions/workflows/wip.yml&#34;&gt;&lt;img src=&#34;https://github.com/Z3Prover/z3/actions/workflows/wip.yml/badge.svg?sanitize=true&#34; alt=&#34;Open Issues&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Z3Prover/z3/actions/workflows/android-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/Z3Prover/z3/actions/workflows/android-build.yml/badge.svg?sanitize=true&#34; alt=&#34;Android Build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Z3Prover/z3/actions/workflows/wasm.yml&#34;&gt;&lt;img src=&#34;https://github.com/Z3Prover/z3/actions/workflows/wasm.yml/badge.svg?sanitize=true&#34; alt=&#34;WASM Build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/z3prover/z3/pkgs/container/z3&#34;&gt;Docker image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building Z3 on Windows using Visual Studio Command Prompt&lt;/h2&gt; &#xA;&lt;p&gt;32-bit builds, start with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/mk_make.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or instead, for a 64-bit build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/mk_make.py -x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd build&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Z3 uses C++17. The recommended version of Visual Studio is therefore VS2019.&lt;/p&gt; &#xA;&lt;h2&gt;Building Z3 using make and GCC/Clang&lt;/h2&gt; &#xA;&lt;p&gt;Execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/mk_make.py&#xA;cd build&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note by default &lt;code&gt;g++&lt;/code&gt; is used as the C++ compiler if it is available. If you would prefer to use Clang change the &lt;code&gt;mk_make.py&lt;/code&gt; invocation to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CXX=clang++ CC=clang python scripts/mk_make.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that Clang &amp;lt; 3.7 does not support OpenMP.&lt;/p&gt; &#xA;&lt;p&gt;You can also build Z3 for Windows using Cygwin and the Mingw-w64 cross-compiler. To configure that case correctly, make sure to use Cygwin&#39;s own python and not some Windows installation of Python.&lt;/p&gt; &#xA;&lt;p&gt;For a 64 bit build (from Cygwin64), configure Z3&#39;s sources with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CXX=x86_64-w64-mingw32-g++ CC=x86_64-w64-mingw32-gcc AR=x86_64-w64-mingw32-ar python scripts/mk_make.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A 32 bit build should work similarly (but is untested); the same is true for 32/64 bit builds from within Cygwin32.&lt;/p&gt; &#xA;&lt;p&gt;By default, it will install z3 executable at &lt;code&gt;PREFIX/bin&lt;/code&gt;, libraries at &lt;code&gt;PREFIX/lib&lt;/code&gt;, and include files at &lt;code&gt;PREFIX/include&lt;/code&gt;, where &lt;code&gt;PREFIX&lt;/code&gt; installation prefix is inferred by the &lt;code&gt;mk_make.py&lt;/code&gt; script. It is usually &lt;code&gt;/usr&lt;/code&gt; for most Linux distros, and &lt;code&gt;/usr/local&lt;/code&gt; for FreeBSD and macOS. Use the &lt;code&gt;--prefix=&lt;/code&gt; command line option to change the install prefix. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/mk_make.py --prefix=/home/leo&#xA;cd build&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To uninstall Z3, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To clean Z3 you can delete the build directory and run the &lt;code&gt;mk_make.py&lt;/code&gt; script again.&lt;/p&gt; &#xA;&lt;h2&gt;Building Z3 using CMake&lt;/h2&gt; &#xA;&lt;p&gt;Z3 has a build system using CMake. Read the &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/README-CMake.md&#34;&gt;README-CMake.md&lt;/a&gt; file for details. It is recommended for most build tasks, except for building OCaml bindings.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Z3 itself has few dependencies. It uses C++ runtime libraries, including pthreads for multi-threading. It is optionally possible to use GMP for multi-precision integers, but Z3 contains its own self-contained multi-precision functionality. Python is required to build Z3. To build Java, .Net, OCaml, Julia APIs requires installing relevant tool chains.&lt;/p&gt; &#xA;&lt;h2&gt;Z3 bindings&lt;/h2&gt; &#xA;&lt;p&gt;Z3 has bindings for various programming languages.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;.NET&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can install a nuget package for the latest release Z3 from &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Z3/&#34;&gt;nuget.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--dotnet&lt;/code&gt; command line flag with &lt;code&gt;mk_make.py&lt;/code&gt; to enable building these.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/examples/dotnet&#34;&gt;&lt;code&gt;examples/dotnet&lt;/code&gt;&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;C&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;These are always enabled.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/examples/c&#34;&gt;&lt;code&gt;examples/c&lt;/code&gt;&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;C++&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;These are always enabled.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/examples/c++&#34;&gt;&lt;code&gt;examples/c++&lt;/code&gt;&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Java&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--java&lt;/code&gt; command line flag with &lt;code&gt;mk_make.py&lt;/code&gt; to enable building these.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/examples/java&#34;&gt;&lt;code&gt;examples/java&lt;/code&gt;&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;OCaml&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--ml&lt;/code&gt; command line flag with &lt;code&gt;mk_make.py&lt;/code&gt; to enable building these.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/examples/ml&#34;&gt;&lt;code&gt;examples/ml&lt;/code&gt;&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Python&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can install the Python wrapper for Z3 for the latest release from pypi using the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   pip install z3-solver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--python&lt;/code&gt; command line flag with &lt;code&gt;mk_make.py&lt;/code&gt; to enable building these.&lt;/p&gt; &#xA;&lt;p&gt;Note that it is required on certain platforms that the Python package directory (&lt;code&gt;site-packages&lt;/code&gt; on most distributions and &lt;code&gt;dist-packages&lt;/code&gt; on Debian based distributions) live under the install prefix. If you use a non standard prefix you can use the &lt;code&gt;--pypkgdir&lt;/code&gt; option to change the Python package directory used for installation. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/mk_make.py --prefix=/home/leo --python --pypkgdir=/home/leo/lib/python-2.7/site-packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do need to install to a non standard prefix a better approach is to use a &lt;a href=&#34;https://virtualenv.readthedocs.org/en/latest/&#34;&gt;Python virtual environment&lt;/a&gt; and install Z3 there. Python packages also work for Python3. Under Windows, recall to build inside the Visual C++ native command build environment. Note that the &lt;code&gt;build/python/z3&lt;/code&gt; directory should be accessible from where python is used with Z3 and it depends on &lt;code&gt;libz3.dll&lt;/code&gt; to be in the path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;virtualenv venv&#xA;source venv/bin/activate&#xA;python scripts/mk_make.py --python&#xA;cd build&#xA;make&#xA;make install&#xA;# You will find Z3 and the Python bindings installed in the virtual environment&#xA;venv/bin/z3 -h&#xA;...&#xA;python -c &#39;import z3; print(z3.get_version_string())&#39;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/examples/python&#34;&gt;&lt;code&gt;examples/python&lt;/code&gt;&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Julia&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The Julia package &lt;a href=&#34;https://github.com/ahumenberger/Z3.jl&#34;&gt;Z3.jl&lt;/a&gt; wraps the C++ API of Z3. Information about updating and building the Julia bindings can be found in &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/src/api/julia&#34;&gt;src/api/julia&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Web Assembly&lt;/code&gt; / &lt;code&gt;TypeScript&lt;/code&gt; / &lt;code&gt;JavaScript&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A WebAssembly build with associated TypeScript typings is published on npm as &lt;a href=&#34;https://www.npmjs.com/package/z3-solver&#34;&gt;z3-solver&lt;/a&gt;. Information about building these bindings can be found in &lt;a href=&#34;https://raw.githubusercontent.com/Z3Prover/z3/master/src/api/js&#34;&gt;src/api/js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Smalltalk (&lt;code&gt;Pharo&lt;/code&gt; / &lt;code&gt;Smalltalk/X&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Project &lt;a href=&#34;https://github.com/shingarov/MachineArithmetic&#34;&gt;MachineArithmetic&lt;/a&gt; provides Smalltalk interface to Z3&#39;s C API. For more information, see &lt;a href=&#34;https://github.com/shingarov/MachineArithmetic/raw/pure-z3/MachineArithmetic/README.md&#34;&gt;MachineArithmetic/README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;System Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Z3Prover/doc/raw/master/programmingz3/images/Z3Overall.jpg&#34; alt=&#34;System Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Interfaces&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Default input format is &lt;a href=&#34;http://smtlib.cs.uiowa.edu&#34;&gt;SMTLIB2&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other native foreign function interfaces:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://z3prover.github.io/api/html/group__cppapi.html&#34;&gt;C++ API&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://z3prover.github.io/api/html/namespace_microsoft_1_1_z3.html&#34;&gt;.NET API&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://z3prover.github.io/api/html/namespacecom_1_1microsoft_1_1z3.html&#34;&gt;Java API&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://z3prover.github.io/api/html/namespacez3py.html&#34;&gt;Python API&lt;/a&gt; (also available in &lt;a href=&#34;https://z3prover.github.io/api/html/z3.html&#34;&gt;pydoc format&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;C&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;OCaml&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ahumenberger/Z3.jl&#34;&gt;Julia&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/shingarov/MachineArithmetic/raw/pure-z3/MachineArithmetic/README.md&#34;&gt;Smalltalk&lt;/a&gt; (supports Pharo and Smalltalk/X)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>