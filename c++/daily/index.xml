<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-02T01:32:16Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/wil</title>
    <updated>2022-12-02T01:32:16Z</updated>
    <id>tag:github.com,2022-12-02:/microsoft/wil</id>
    <link href="https://github.com/microsoft/wil" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Windows Implementation Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Windows Implementation Libraries (WIL)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/msft-wil/Windows%20Implementation%20Library/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/msft-wil/Windows%20Implementation%20Library/_apis/build/status/Microsoft.wil?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Windows Implementation Libraries (WIL) is a header-only C++ library created to make life easier for developers on Windows through readable type-safe C++ interfaces for common Windows coding patterns.&lt;/p&gt; &#xA;&lt;p&gt;Some things that WIL includes to whet your appetite:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/wil/master/include/wil/resource.h&#34;&gt;&lt;code&gt;include/wil/resource.h&lt;/code&gt;&lt;/a&gt; (&lt;a href=&#34;https://github.com/Microsoft/wil/wiki/RAII-resource-wrappers&#34;&gt;documentation&lt;/a&gt;): Smart pointers and auto-releasing resource wrappers to let you manage Windows API HANDLEs, HWNDs, and other resources and resource handles with &lt;a href=&#34;https://en.cppreference.com/w/cpp/language/raii&#34;&gt;RAII&lt;/a&gt; semantics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/wil/master/include/wil/win32_helpers.h&#34;&gt;&lt;code&gt;include/wil/win32_helpers.h&lt;/code&gt;&lt;/a&gt; (&lt;a href=&#34;https://github.com/microsoft/wil/wiki/Win32-helpers&#34;&gt;documentation&lt;/a&gt;): Wrappers for API functions that save you the work of manually specifying buffer sizes, calling a function twice to get the needed buffer size and then allocate and pass the right-size buffer, casting or converting between types, and so on.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/wil/master/include/wil/registry.h&#34;&gt;&lt;code&gt;include/wil/registry.h&lt;/code&gt;&lt;/a&gt;: Registry watchers that can call a lambda function or callback you provide whenever a certain tree within the Windows registry changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/wil/master/include/wil/result.h&#34;&gt;&lt;code&gt;include/wil/result.h&lt;/code&gt;&lt;/a&gt; (&lt;a href=&#34;https://github.com/Microsoft/wil/wiki/Error-handling-helpers&#34;&gt;documentation&lt;/a&gt;): Preprocessor macros to help you check for errors from Windows API functions, in many of the myriad ways those errors are reported, and surface them as error codes or C++ exceptions in your code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/wil/master/include/wil/Tracelogging.h&#34;&gt;&lt;code&gt;include/wil/Tracelogging.h&lt;/code&gt;&lt;/a&gt;: This file contains the convenience macros that enable developers define and log telemetry. These macros use &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/tracelogging/trace-logging-portal&#34;&gt;&lt;code&gt;TraceLogging API&lt;/code&gt;&lt;/a&gt; to log data. This data can be viewed in tools such as &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/test/wpt/windows-performance-analyzer&#34;&gt;&lt;code&gt;Windows Performance Analyzer&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;WIL can be used by C++ code that uses C++ exceptions as well as code that uses returned error codes to report errors. All of WIL can be used from user-space Windows code, and some (such as the RAII resource wrappers) can even be used in kernel mode.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;This project is documented in &lt;a href=&#34;https://github.com/Microsoft/wil/wiki&#34;&gt;its GitHub wiki&lt;/a&gt;. Feel free to contribute to it!&lt;/p&gt; &#xA;&lt;h1&gt;Consuming WIL&lt;/h1&gt; &#xA;&lt;p&gt;WIL follows the &#34;live at head&#34; philosophy, so you should feel free to consume WIL directly from the GitHub repo however you please: as a GIT submodule, symbolic link, download and copy files, etc. and update to the latest version at your own cadence. Alternatively, WIL is available using a few package managers, mentioned below. These packages will be updated periodically, likely to average around once or twice per month.&lt;/p&gt; &#xA;&lt;h2&gt;Consuming WIL via NuGet&lt;/h2&gt; &#xA;&lt;p&gt;WIL is available on nuget.org under the name &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Windows.ImplementationLibrary/&#34;&gt;Microsoft.Windows.ImplementationLibrary&lt;/a&gt;. This package includes the header files under the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/wil/master/include&#34;&gt;include&lt;/a&gt; directory as well as a &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/wil/master/packaging/nuget/Microsoft.Windows.ImplementationLibrary.targets&#34;&gt;.targets&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Consuming WIL via vcpkg&lt;/h2&gt; &#xA;&lt;p&gt;WIL is also available using &lt;a href=&#34;https://github.com/microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; under the name &lt;a href=&#34;https://github.com/microsoft/vcpkg/raw/master/ports/wil/portfile.cmake&#34;&gt;wil&lt;/a&gt;. Instructions for installing packages can be found in the &lt;a href=&#34;https://github.com/microsoft/vcpkg/raw/master/docs/examples/installing-and-using-packages.md&#34;&gt;vcpkg GitHub docs&lt;/a&gt;. In general, once vcpkg is set up on the system, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\vcpkg&amp;gt; vcpkg install wil:x86-windows&#xA;C:\vcpkg&amp;gt; vcpkg install wil:x64-windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that even though WIL is a header-only library, you still need to install the package for all architectures/platforms you wish to use it with. Otherwise, WIL won&#39;t be added to the include path for the missing architectures/platforms. Execute &lt;code&gt;vcpkg help triplet&lt;/code&gt; for a list of available options.&lt;/p&gt; &#xA;&lt;h1&gt;Building/Testing&lt;/h1&gt; &#xA;&lt;p&gt;To get started testing WIL, first make sure that you have a recent version of &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio&lt;/a&gt; and the most recent &lt;a href=&#34;https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk&#34;&gt;Windows SDK&lt;/a&gt; installed. If you are doing any non-trivial work, also be sure to have a recent version of &lt;a href=&#34;http://releases.llvm.org/download.html&#34;&gt;Clang&lt;/a&gt; installed. Once everything is installed, open a VS native command window (e.g. &#34;x64 Native Tools Command Prompt for VS 2022&#34;). If you are familiar with CMake you can get started building normally. Otherwise, or if you prefer to skip all of the boilerplate, you can use one of the scripts in the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/wil/master/scripts&#34;&gt;scripts&lt;/a&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\wil&amp;gt; scripts\init.cmd -c clang -g ninja -b debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can execute &lt;code&gt;init.cmd --help&lt;/code&gt; for a summary of available options. The scripts use a common directory pattern of &lt;code&gt;build/$(compiler)$(arch)$(type)&lt;/code&gt; for the build output root. E.g. &lt;code&gt;build/clang64debug&lt;/code&gt; when using Clang as the compiler, x64 as the architecture, and Debug as the build type. It is this directory where you will want to build from. For example, if you initialized using the command above, you can build the tests like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\wil\build\clang64debug&amp;gt; ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you want to only build a single test (e.g. for improved compile times):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\wil\build\clang64debug&amp;gt; ninja witest.noexcept&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you initialized using MSBuild as the generator, there will be a &lt;code&gt;.sln&lt;/code&gt; file in the root of the build directory. You can either open the solution in Visual Studio or invoke MSBuild directly to build.&lt;/p&gt; &#xA;&lt;p&gt;The output is a number of test executables. If you used the initialization script(s) mentioned above, or if you followed the same directory naming convention of those scripts, you can use the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/wil/master/scripts/runtests.cmd&#34;&gt;runtests.cmd&lt;/a&gt; script, which will execute any test executables that have been built, erroring out - and preserving the exit code - if any test fails. Note that MSBuild will modify the output directory names, so this script is only compatible with using Ninja as the generator. If you are at the tail end of of a change, you can execute the following to get a wide range of coverage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\wil&amp;gt; scripts\init_all.cmd&#xA;C:\wil&amp;gt; scripts\build_all.cmd&#xA;C:\wil&amp;gt; scripts\runtests.cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this will only test for the architecture that corresponds to the command window you opened. You will want to repeat this process for the other architecture (e.g. by using the &#34;x86 Native Tools Command Prompt for VS 2022&#34;)&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ArthurSonzogni/FTXUI</title>
    <updated>2022-12-02T01:32:16Z</updated>
    <id>tag:github.com,2022-12-02:/ArthurSonzogni/FTXUI</id>
    <link href="https://github.com/ArthurSonzogni/FTXUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💻 C++ Functional Terminal User Interface. ❤️&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ArthurSonzogni/FTXUI/master/examples/component/homescreen.gif&#34; alt=&#34;Demo image&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ArthurSonzogni/FTXUI/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/c++-%2300599C.svg?style=flat&amp;amp;logo=c%2B%2B&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/arthursonzogni/FTXUI?color=black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ArthurSonzogni/FTXUI/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/ArthurSonzogni/FTXUI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ArthurSonzogni/FTXUI/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/ArthurSonzogni/FTXUI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ArthurSonzogni/FTXUI/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/repo-size/ArthurSonzogni/FTXUI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ArthurSonzogni/FTXUI/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/ArthurSonzogni/FTXUI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ArthurSonzogni/FTXUI/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/arthursonzogni/FTXUI?color=blue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/ArthurSonzogni/FTXUI&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/ArthurSonzogni/FTXUI/branch/master/graph/badge.svg?token=C41FdRpNVA&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/&#34;&gt;Documentation&lt;/a&gt; · &lt;a href=&#34;https://github.com/ArthurSonzogni/FTXUI/issues&#34;&gt;Report a Bug&lt;/a&gt; · &lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples.html&#34;&gt;Examples&lt;/a&gt; . &lt;a href=&#34;https://github.com/ArthurSonzogni/FTXUI/issues&#34;&gt;Request Feature&lt;/a&gt; · &lt;a href=&#34;https://github.com/ArthurSonzogni/FTXUI/pulls&#34;&gt;Send a Pull Request&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;FTXUI&lt;/h2&gt; &#xA;&lt;p&gt;&lt;i&gt;Functional Terminal (X) User interface&lt;/i&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple C++ library for terminal based user interfaces!&lt;/p&gt; &#xA;&lt;h2&gt;Feature&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Functional style. Inspired by &lt;a href=&#34;https://hackernoon.com/building-reactive-terminal-interfaces-in-c-d392ce34e649?gi=d9fb9ce35901&#34;&gt;[1]&lt;/a&gt; and &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Simple and elegant syntax (in my opinion)&lt;/li&gt; &#xA; &lt;li&gt;Keyboard &amp;amp; mouse navigation.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://en.wikipedia.org/wiki/UTF-8&#34;&gt;UTF8&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms&#34;&gt;fullwidth chars&lt;/a&gt; (→ 测试)&lt;/li&gt; &#xA; &lt;li&gt;Support for animations. &lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples/?file=component/menu_underline_animated_gallery&#34;&gt;Demo 1&lt;/a&gt;, &lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples/?file=component/button_style&#34;&gt;Demo 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for drawing. &lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples/?file=component/canvas_animated&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;No dependencies&lt;/li&gt; &#xA; &lt;li&gt;Cross platform: Linux/MacOS (main target), WebAssembly, Windows (Thanks to contributors!).&lt;/li&gt; &#xA; &lt;li&gt;Learn by &lt;a href=&#34;https://raw.githubusercontent.com/ArthurSonzogni/FTXUI/master/#documentation&#34;&gt;examples&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/ArthurSonzogni/FTXUI/master/#documentation&#34;&gt;tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple packages: CMake &lt;a href=&#34;https://bewagner.net/programming/2020/05/02/cmake-fetchcontent/&#34;&gt;FetchContent&lt;/a&gt; (preferred), vcpkg, pkgbuild, conan.&lt;/li&gt; &#xA; &lt;li&gt;Good practises: documentation, tests, fuzzers, performance tests, automated CI, automated packaging, etc...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ArthurSonzogni/ftxui-starter&#34;&gt;Starter example project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples/&#34;&gt;Examples (WebAssembly)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/#build-cmake&#34;&gt;Build using CMake&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Operating systems&lt;/h2&gt; &#xA;&lt;p&gt;This is expected to be cross platform. This supports / tests:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WebAssembly&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;MacOS&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;  vbox({&#xA;    hbox({&#xA;      text(&#34;left&#34;) | border,&#xA;      text(&#34;middle&#34;) | border | flex,&#xA;      text(&#34;right&#34;) | border,&#xA;    }),&#xA;    gauge(0.5) | border,&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;┌────┐┌───────────────────────────────────────────────────────────────┐┌─────┐&#xA;│left││middle                                                         ││right│&#xA;└────┘└───────────────────────────────────────────────────────────────┘└─────┘&#xA;┌────────────────────────────────────────────────────────────────────────────┐&#xA;│██████████████████████████████████████                                      │&#xA;└────────────────────────────────────────────────────────────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Short gallery&lt;/h2&gt; &#xA;&lt;h4&gt;DOM&lt;/h4&gt; &#xA;&lt;p&gt;This module defines a hierarchical set of Element. An element manages layout and can be responsive to the terminal dimensions.&lt;/p&gt; &#xA;&lt;p&gt;They are declared in &lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/elements_8hpp_source.html&#34;&gt;&amp;lt;ftxui/dom/elements.hpp&amp;gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Layout&lt;/summary&gt; &#xA; &lt;p&gt;Element can be arranged together:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;horizontally with &lt;code&gt;hbox&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;vertically with &lt;code&gt;vbox&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;inside a grid with &lt;code&gt;gridbox&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;wrap along one direction using the &lt;code&gt;flexbox&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Element can become flexible using the the &lt;code&gt;flex&lt;/code&gt; decorator.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2dom_2vbox_hbox_8cpp-example.html&#34;&gt;Example&lt;/a&gt; using &lt;code&gt;hbox&lt;/code&gt;, &lt;code&gt;vbox&lt;/code&gt; and &lt;code&gt;filler&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147242524-7103b5d9-1a92-4e2d-ac70-b3d6740061e3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2dom_2gridbox_8cpp-example.htmlp&#34;&gt;Example&lt;/a&gt; using gridbox:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147242972-0db1f2e9-0790-496f-86e6-ed2c604f7a73.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/ArthurSonzogni/FTXUI/raw/master/examples/dom/hflow.cpp&#34;&gt;Example&lt;/a&gt; using flexbox:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147243064-780ac7cc-605b-475f-94b8-cf7c4aed03a5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2dom_2hflow_8cpp-example.html&#34;&gt;See&lt;/a&gt; also this &lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples/?file=component/flexbox&#34;&gt;demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Style&lt;/summary&gt; &#xA; &lt;p&gt;An element can be decorated using the functions:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;bold&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;dim&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;inverted&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;underlined&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;blink&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;color&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;bgcolor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2dom_2style_gallery_8cpp-example.html&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147244118-380bf834-9e33-40df-9ff0-07c10f2598ef.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;FTXUI supports the pipe operator. It means: &lt;code&gt;decorator1(decorator2(element))&lt;/code&gt; and &lt;code&gt;element | decorator1 | decorator2&lt;/code&gt; can be used.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Colors&lt;/summary&gt; &#xA; &lt;p&gt;FTXUI support every color palette:&lt;/p&gt; &#xA; &lt;p&gt;Color &lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2dom_2color_gallery_8cpp-example.html&#34;&gt;gallery&lt;/a&gt;: &lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147248595-04c7245a-5b85-4544-809d-a5984fc6f9e7.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Border and separator&lt;/summary&gt; &#xA; &lt;p&gt;Use decorator border and element separator() to subdivide your UI:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto document = vbox({&#xA;    text(&#34;top&#34;),&#xA;    separator(),&#xA;    text(&#34;bottom&#34;),&#xA;}) | border;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2dom_2separator_8cpp-example.html&#34;&gt;Demo&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147244514-4135f24b-fb8e-4067-8896-bc53545583f7.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Text and paragraph&lt;/summary&gt; &#xA; &lt;p&gt;A simple piece of text is represented using &lt;code&gt;text(&#34;content&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;To support text wrapping following spaces the following functions are provided:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Element paragraph(std::string text);&#xA;Element paragraphAlignLeft(std::string text);&#xA;Element paragraphAlignRight(std::string text);&#xA;Element paragraphAlignCenter(std::string text);&#xA;Element paragraphAlignJustify(std::string text);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2dom_2paragraph_8cpp-example.html&#34;&gt;Paragraph example&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147251370-983a06e7-6f41-4113-92b8-942f43d34d06.gif&#34; alt=&#34;ezgif com-gif-maker (4)&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Table&lt;/summary&gt; &#xA; &lt;p&gt;A class to easily style a table of data.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2dom_2table_8cpp-example.html&#34;&gt;Example&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147250766-77d8ec9e-cf2b-486d-9866-1fd9f1bd2e6b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Canvas&lt;/summary&gt; &#xA; &lt;p&gt;Drawing can be made on a Canvas, using braille, block, or simple characters:&lt;/p&gt; &#xA; &lt;p&gt;Simple &lt;a href=&#34;https://github.com/ArthurSonzogni/FTXUI/raw/master/examples/dom/canvas.cpp&#34;&gt;example&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147245843-76cc62fb-ccb4-421b-aacf-939f9afb42fe.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;Complex &lt;a href=&#34;https://github.com/ArthurSonzogni/FTXUI/raw/master/examples/component/canvas_animated.cpp&#34;&gt;examples&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147250538-783a8246-98e0-4a25-b032-3bd3710549d1.gif&#34; alt=&#34;ezgif com-gif-maker (3)&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Component&lt;/h4&gt; &#xA;&lt;p&gt;The ftxui/component is needed when you want to produce dynamic UI, reactive to the user&#39;s input. It defines a set of ftxui::Component. A component reacts to Events (keyboard, mouse, resize, ...) and Render Element (see previous section).&lt;/p&gt; &#xA;&lt;p&gt;Prebuilt components are declared in &lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/component_8hpp_source.html&#34;&gt;&amp;lt;ftxui/component/component.hpp&amp;gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Gallery&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2component_2gallery_8cpp-example.html&#34;&gt;Gallery&lt;/a&gt; of multiple components. (&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples/?file=component/gallery&#34;&gt;demo&lt;/a&gt;)&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147247330-b60beb9f-e665-48b4-81c0-4b01ee95bc66.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Radiobox&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2component_2radiobox_8cpp-example.html&#34;&gt;Example&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147246401-809d14a5-6621-4e36-8dd9-a2d75ef2a94e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Checkbox&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2component_2checkbox_8cpp-example.html&#34;&gt;Example&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147246646-b86926a9-1ef9-4efb-af98-48a9b62acd81.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Input&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2component_2input_8cpp-example.html&#34;&gt;Example&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147247671-f1d6f606-1845-4e94-a4a0-d4273e9ae6bd.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Toggle&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2component_2toggle_8cpp-example.html&#34;&gt;Example&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147249383-e2201cf1-b7b8-4a5a-916f-d761e3e7ae40.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Slider&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2component_2slider_8cpp-example.html&#34;&gt;Example&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147249265-7e2cad75-082c-436e-affe-44a550c480ab.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Menu&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2component_2menu_8cpp-example.html&#34;&gt;Example&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147247822-0035fd6f-bb13-4b3a-b057-77eb9291582f.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;ResizableSplit&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2component_2resizable_split_8cpp-example.html&#34;&gt;Example&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147248372-c55512fe-9b96-4b08-a1df-d05cf2cae431.gif&#34; alt=&#34;ezgif com-gif-maker&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Dropdown&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2component_2dropdown_8cpp-example.html&#34;&gt;Example&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147246982-1e821751-531c-4e1f-bc37-2fa290e143cd.gif&#34; alt=&#34;youtube-video-gif (3)&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Tab&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2component_2tab_vertical_8cpp-example.html&#34;&gt;Vertical&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147250144-22ff044a-4773-4ff7-a49c-12ba4034acb4.gif&#34; alt=&#34;ezgif com-gif-maker (1)&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arthursonzogni.github.io/FTXUI/examples_2component_2tab_horizontal_8cpp-example.html&#34;&gt;Horizontal&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4759106/147250217-fe447e0f-7a99-4e08-948a-995087d9b40e.gif&#34; alt=&#34;ezgif com-gif-maker (2)&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Project using FTXUI&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to add your projects here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ArthurSonzogni/json-tui&#34;&gt;json-tui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ArthurSonzogni/git-tui&#34;&gt;git-tui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ArthurSonzogni/rgb-tui&#34;&gt;rgb-tui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ArthurSonzogni/chrome-log-beautifier&#34;&gt;chrome-log-beautifier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AnisBdz/CPU&#34;&gt;x86-64 CPU Architecture Simulation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adrianoviana87/ltuiny&#34;&gt;ltuiny&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mibli/i3-termdialogs&#34;&gt;i3-termdialogs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GiuseppeCesarano/just-fast&#34;&gt;Just-Fast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VedantParanjape/simpPRU&#34;&gt;simpPRU&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PigeonSensei/Pigeon_ros_tui&#34;&gt;Pigeon ROS TUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robinlinden/hastur&#34;&gt;hastur&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brevis/CryptoCalculator&#34;&gt;CryptoCalculator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aaleino/todoman&#34;&gt;todoman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/asari555/TimeAccumulator&#34;&gt;TimeAccumulator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gokulmaxi/vantage&#34;&gt;vantage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typon/tabdeeli&#34;&gt;tabdeeli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tusharpm/tiles&#34;&gt;tiles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cachyos/new-cli-installer&#34;&gt;cachyos-cli-installer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SAtacker/beagle-config&#34;&gt;beagle-config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DanArmor/turing_cmd&#34;&gt;turing_cmd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/StubbornVegeta/StartUp&#34;&gt;StartUp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eclipse-ecal/ecal&#34;&gt;eCAL monitor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/cpp-best-practices/game_jam&#34;&gt;cpp-best-practices/game_jam&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Several games using the FTXUI have been made during the Game Jam:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ArthurSonzogni/termBreaker&#34;&gt;TermBreaker&lt;/a&gt; &lt;a href=&#34;https://arthursonzogni.com/TermBreaker/&#34;&gt;&lt;strong&gt;[Play web version]&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cpp-best-practices/game_jam/raw/main/Jam1_April_2022/minesweeper_marathon.md&#34;&gt;Minesweeper Marathon&lt;/a&gt; &lt;a href=&#34;https://barlasgarden.com/minesweeper/index.html&#34;&gt;&lt;strong&gt;[Play web version]&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cpp-best-practices/game_jam/raw/main/Jam1_April_2022/grandrounds.md&#34;&gt;Grand Rounds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cpp-best-practices/game_jam/raw/main/Jam1_April_2022/LightsRound.v.0.1.0.md&#34;&gt;LightsRound&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cpp-best-practices/game_jam/raw/main/Jam1_April_2022/danteo.md&#34;&gt;DanteO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cpp-best-practices/game_jam/raw/main/Jam1_April_2022/sumo.md&#34;&gt;Sumo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cpp-best-practices/game_jam/raw/main/Jam1_April_2022/drag_me_around.md&#34;&gt;Drag Me aROUND&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cpp-best-practices/game_jam/raw/main/Jam1_April_2022/DisarmSelfDestruct.md&#34;&gt;DisarmSelfDestruct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cpp-best-practices/game_jam/raw/main/Jam1_April_2022/TheWorld.md&#34;&gt;TheWorld&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cpp-best-practices/game_jam/raw/main/Jam1_April_2022/smoothlife.md&#34;&gt;smoothlife&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cpp-best-practices/game_jam/raw/main/Jam1_April_2022/consu.md&#34;&gt;Consu&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;External package&lt;/h2&gt; &#xA;&lt;p&gt;It is &lt;strong&gt;highly&lt;/strong&gt; recommended to use CMake FetchContent to depend on FTXUI. This way you can specify which commit you would like to depend on.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;include(FetchContent)&#xA;&#xA;FetchContent_Declare(ftxui&#xA;  GIT_REPOSITORY https://github.com/ArthurSonzogni/ftxui&#xA;  GIT_TAG v3.0.0&#xA;)&#xA;&#xA;FetchContent_GetProperties(ftxui)&#xA;if(NOT ftxui_POPULATED)&#xA;  FetchContent_Populate(ftxui)&#xA;  add_subdirectory(${ftxui_SOURCE_DIR} ${ftxui_BINARY_DIR} EXCLUDE_FROM_ALL)&#xA;endif()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t, the following packages have been created:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vcpkg.info/port/ftxui&#34;&gt;vcpkg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/ftxui-git/&#34;&gt;Arch Linux PKGBUILD&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://conan.io/center/ftxui&#34;&gt;conan.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/ArthurSonzogni/FTXUI/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=ArthurSonzogni/FTXUI&#34;&gt; &lt;/a&gt;</summary>
  </entry>
</feed>