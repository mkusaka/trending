<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-06T01:31:41Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nomic-ai/pyllamacpp</title>
    <updated>2023-04-06T01:31:41Z</updated>
    <id>tag:github.com,2023-04-06:/nomic-ai/pyllamacpp</id>
    <link href="https://github.com/nomic-ai/pyllamacpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official supported Python bindings for llama.cpp + gpt4all&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PyLLaMACpp&lt;/h1&gt; &#xA;&lt;p&gt;Official supported Python bindings for &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt; + gpt4all&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/pyllamacpp/&#34;&gt;&lt;img src=&#34;https://badgen.net/pypi/v/pyllamacpp&#34; alt=&#34;PyPi version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For those who don&#39;t know, &lt;code&gt;llama.cpp&lt;/code&gt; is a port of Facebook&#39;s LLaMA model in pure C/C++:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Without dependencies&lt;/li&gt; &#xA;  &lt;li&gt;Apple silicon first-class citizen - optimized via ARM NEON&lt;/li&gt; &#xA;  &lt;li&gt;AVX2 support for x86 architectures&lt;/li&gt; &#xA;  &lt;li&gt;Mixed F16 / F32 precision&lt;/li&gt; &#xA;  &lt;li&gt;4-bit quantization support&lt;/li&gt; &#xA;  &lt;li&gt;Runs on the CPU&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Table of contents&lt;/h1&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nomic-ai/pyllamacpp/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nomic-ai/pyllamacpp/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nomic-ai/pyllamacpp/main/#supported-model&#34;&gt;Supported model&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nomic-ai/pyllamacpp/main/#gpt4all&#34;&gt;GPT4All&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nomic-ai/pyllamacpp/main/#discussions-and-contributions&#34;&gt;Discussions and contributions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nomic-ai/pyllamacpp/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The easy way is to use the prebuilt wheels&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pyllamacpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, the compilation process of &lt;code&gt;llama.cpp&lt;/code&gt; is taking into account the architecture of the target &lt;code&gt;CPU&lt;/code&gt;, so you might need to build it from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --recursive https://github.com/nomic-ai/pyllamacpp &amp;amp;&amp;amp; cd pyllamacpp&#xA;pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;A simple &lt;code&gt;Pythonic&lt;/code&gt; API is built on top of &lt;code&gt;llama.cpp&lt;/code&gt; C/C++ functions. You can call it from Python as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pyllamacpp.model import Model&#xA;&#xA;def new_text_callback(text: str):&#xA;    print(text, end=&#34;&#34;)&#xA;&#xA;model = Model(ggml_model=&#39;./models/gpt4all-model.bin&#39;, n_ctx=512)&#xA;model.generate(&#34;Once upon a time, &#34;, n_predict=55, new_text_callback=new_text_callback, n_threads=8)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to use the &lt;code&gt;callback&lt;/code&gt;, you can get the results from the &lt;code&gt;generate&lt;/code&gt; method once the inference is finished:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;generated_text = model.generate(&#34;Once upon a time, &#34;, n_predict=55)&#xA;print(generated_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can pass any &lt;code&gt;llama context&lt;/code&gt; &lt;a href=&#34;https://nomic-ai.github.io/pyllamacpp/#pyllamacpp.constants.LLAMA_CONTEXT_PARAMS_SCHEMA&#34;&gt;parameter&lt;/a&gt; as a keyword argument to the &lt;code&gt;Model&lt;/code&gt; class&lt;/li&gt; &#xA; &lt;li&gt;You can pass any &lt;code&gt;gpt&lt;/code&gt; &lt;a href=&#34;https://nomic-ai.github.io/pyllamacpp/#pyllamacpp.constants.GPT_PARAMS_SCHEMA&#34;&gt;parameter&lt;/a&gt; as a keyword argument to the &lt;code&gt;generarte&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;You can always refer to the &lt;a href=&#34;https://nomic-ai.github.io/pyllamacpp/&#34;&gt;short documentation&lt;/a&gt; for more details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Supported model&lt;/h1&gt; &#xA;&lt;h3&gt;GPT4All&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First &lt;a href=&#34;https://github.com/nomic-ai/gpt4all#try-it-yourself&#34;&gt;Get&lt;/a&gt; the gpt4all model.&lt;/li&gt; &#xA; &lt;li&gt;Convert it to the new &lt;code&gt;ggml&lt;/code&gt; format&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;On your terminal run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pyllamacpp-convert-gpt4all path/to/gpt4all_model.bin path/to/llama_tokenizer path/to/gpt4all-converted.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;FAQs&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Where to find the llama tokenizer? &lt;a href=&#34;https://github.com/nomic-ai/pyllamacpp/issues/5&#34;&gt;#5&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Discussions and contributions&lt;/h1&gt; &#xA;&lt;p&gt;If you find any bug, please open an &lt;a href=&#34;https://github.com/nomic-ai/pyllamacpp/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have any feedback, or you want to share how you are using this project, feel free to use the &lt;a href=&#34;https://github.com/nomic-ai/pyllamacpp/discussions&#34;&gt;Discussions&lt;/a&gt; and open a new topic.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under the same license as &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/raw/master/LICENSE&#34;&gt;llama.cpp&lt;/a&gt; (MIT &lt;a href=&#34;https://raw.githubusercontent.com/nomic-ai/pyllamacpp/main/LICENSE&#34;&gt;License&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>daisixuan/r0chrome</title>
    <updated>2023-04-06T01:31:41Z</updated>
    <id>tag:github.com,2023-04-06:/daisixuan/r0chrome</id>
    <link href="https://github.com/daisixuan/r0chrome" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h1&gt;r0chrome&lt;/h1&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;r0chrome&lt;/code&gt;是一款对chromium源码进行定制的浏览器,支持爬虫/JS逆向工程师进行辅助分析网页&lt;/li&gt; &#xA;   &lt;li&gt; &lt;h2&gt;浏览器随机指纹模块&lt;/h2&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;h3&gt;实现功能：&lt;/h3&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;gpu信息随机&#xA;webgl图像指纹随机&#xA;canvas画布指纹随机&#xA;音频指纹随机随机&#xA;canvas字体指纹随机&#xA;css字体指纹随机&#xA;屏幕分辨率随机&#xA;elements大小随机&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;h3&gt;效果&lt;/h3&gt; &lt;img src=&#34;https://raw.githubusercontent.com/daisixuan/r0chrome/master/screenshot.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;测试网站 &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://gongjux.com/fingerprint/&#34;&gt;https://gongjux.com/fingerprint/&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;h3&gt;源码&lt;/h3&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;修改的源代码在finger_change_code文件夹下&lt;/li&gt; &#xA;       &lt;li&gt;修改的代码上面有&lt;code&gt;// add &lt;/code&gt;的注释&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;h3&gt;安装包&lt;/h3&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Win版本 &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;http://www.dtasecurity.cn:20080/chrome.win.7z&#34;&gt;http://www.dtasecurity.cn:20080/chrome.win.7z&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;安装方法： &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;使用7z解压文件，在文件夹下打开chrome.exe即可使用&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;Linux版本 &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;http://www.dtasecurity.cn:20080/chromium-browser-unstable_103.0.5045.0-1_amd64.deb&#34;&gt;http://www.dtasecurity.cn:20080/chromium-browser-unstable_103.0.5045.0-1_amd64.deb&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;安装方法 &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;在ubuntu命令行中输入 &#xA;            &lt;ul&gt; &#xA;             &lt;li&gt;sudo dpkg -i chromium-browser-unstable_103.0.5045.0-1_amd64.deb&lt;/li&gt; &#xA;            &lt;/ul&gt; &lt;/li&gt; &#xA;           &lt;li&gt;然后在软件中或者命令行下即可打开浏览器&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;h2&gt;浏览器环境自吐模块&lt;/h2&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;h3&gt;实现功能(后续会增加更多的对象监控)&lt;/h3&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;window 对象监控&#xA;navigator 对象监控&#xA;document 对象监控&#xA;history 对象监控&#xA;screen 对象监控&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;h3&gt;原理简介&lt;/h3&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;对chromium源码中全局对象定义进行修改/添加，使得全局对象变得可以覆盖，从而使用JS的代理器对全局对象进行监控&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;h3&gt;源码&lt;/h3&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;修改的源代码在monitor_change_code文件夹下&lt;/li&gt; &#xA;       &lt;li&gt;修改的代码上面有&lt;code&gt;// add &lt;/code&gt;和&lt;code&gt;// change &lt;/code&gt;的注释&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;h3&gt;使用方法&lt;/h3&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;在浏览器控制台中执行proxy.js的代码(推荐在JS最先执行的时机断点（事件侦听器断点-&amp;gt;脚本-&amp;gt;脚本的第一条语句）然后运行js代码，最先取得全局对象的控制权)&lt;/li&gt; &#xA;       &lt;li&gt;然后在网页上正常操作即可在控制台得到打印的对象信息，进行环境监控，辅助JS补环境&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;h3&gt;使用方法以及效果&lt;/h3&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;先设置断点 然后刷新网页 即可在JS最先执行的时机停下(需要注意安装油猴后，会对此方法产生影响导致proxy.js脚本不生效) &lt;img src=&#34;https://raw.githubusercontent.com/daisixuan/r0chrome/master/screenshot1.jpg&#34; alt=&#34;screenshot&#34;&gt;&lt;/li&gt; &#xA;       &lt;li&gt;执行proxy.js后取消断点 然后执行网页js &lt;img src=&#34;https://raw.githubusercontent.com/daisixuan/r0chrome/master/screenshot2.jpg&#34; alt=&#34;screenshot&#34;&gt;&lt;/li&gt; &#xA;       &lt;li&gt;成功监控对象 &lt;img src=&#34;https://raw.githubusercontent.com/daisixuan/r0chrome/master/screenshot3.jpg&#34; alt=&#34;screenshot&#34;&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;h3&gt;安装包&lt;/h3&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Win版本 &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;http://www.dtasecurity.cn:20080/chrome.win.7z&#34;&gt;http://www.dtasecurity.cn:20080/chrome.win.7z&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;h3&gt;Tips&lt;/h3&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;碰到不需要打印的信息可以在proxy.js中修改代码进行过滤&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h1&gt;联系我们&lt;/h1&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;h4&gt;加v：r0ysue 进浏览器指纹随机定制群&lt;/h4&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;后续会推出其他定制浏览器的功能&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>libigl/libigl</title>
    <updated>2023-04-06T01:31:41Z</updated>
    <id>tag:github.com,2023-04-06:/libigl/libigl</id>
    <link href="https://github.com/libigl/libigl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple C++ geometry processing library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libigl - A simple C++ geometry processing library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/libigl/libigl/actions?query=workflow%3ABuild+branch%3Amain+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/libigl/libigl/workflows/Build/badge.svg?event=push&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://anaconda.org/conda-forge/igl&#34;&gt;&lt;img src=&#34;https://anaconda.org/conda-forge/igl/badges/installer/conda.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://libigl.github.io/libigl-teaser.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation, tutorial, and instructions at &lt;a href=&#34;https://libigl.github.io&#34;&gt;https://libigl.github.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;🚨 Important&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The latest version of libigl (v2.4.0) introduces some &lt;strong&gt;breaking changes&lt;/strong&gt; to its CMake build system. Please read our &lt;a href=&#34;https://libigl.github.io/changelog/&#34;&gt;changelog&lt;/a&gt; page for instructions on how to update your project accordingly.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>