<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-21T01:31:27Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PrismLauncher/PrismLauncher</title>
    <updated>2022-10-21T01:31:27Z</updated>
    <id>tag:github.com,2022-10-21:/PrismLauncher/PrismLauncher</id>
    <link href="https://github.com/PrismLauncher/PrismLauncher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A custom launcher for Minecraft that allows you to easily manage multiple installations of Minecraft at once (Fork of MultiMC)&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/PrismLauncher/PrismLauncher/develop/program_info/org.prismlauncher.PrismLauncher.logo.svg#gh-light-mode-only&#34; alt=&#34;Prism Launcher logo&#34; width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/PrismLauncher/PrismLauncher/develop/program_info/org.prismlauncher.PrismLauncher.logo-darkmode.svg#gh-dark-mode-only&#34; alt=&#34;Prism Launcher logo&#34; width=&#34;50%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Prism Launcher is a custom launcher for Minecraft that allows you to easily manage multiple installations of Minecraft at once.&lt;/p&gt; &#xA;&lt;p&gt;This is a &lt;strong&gt;fork&lt;/strong&gt; of the MultiMC Launcher and not endorsed by MultiMC.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All downloads and instructions for Prism Launcher can be found &lt;a href=&#34;https://prismlauncher.org/download/&#34;&gt;on our website&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Last build status can be found &lt;a href=&#34;https://github.com/PrismLauncher/PrismLauncher/actions&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development Builds&lt;/h3&gt; &#xA;&lt;p&gt;There are development builds available &lt;a href=&#34;https://github.com/PrismLauncher/PrismLauncher/actions&#34;&gt;here&lt;/a&gt;. These have debug information in the binaries, so their file sizes are relatively larger.&lt;/p&gt; &#xA;&lt;p&gt;Portable builds are provided for on Linux, Windows, and macOS.&lt;/p&gt; &#xA;&lt;p&gt;For Debian and Arch, you can use these packages for the latest development versions:&lt;br&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/prismlauncher-git/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/aur-prismlauncher--git-blue&#34; alt=&#34;prismlauncher-git&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mpr.makedeb.org/packages/prismlauncher-git&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/mpr-prismlauncher--git-orange&#34; alt=&#34;prismlauncher-git&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Help &amp;amp; Support&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to create an issue if you need help. However, you might find it easier to ask in the Discord server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/prismlauncher&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/1031648380885147709/widget.png?style=banner3&#34; alt=&#34;Prism Launcher Discord server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We will also soon be opening up our Matrix channels. You can already join our Matrix space:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/#prismlauncher:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/prismlauncher:matrix.org?label=PrismLauncher%20space&#34; alt=&#34;PrismLauncher Space&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We also have a subreddit you can post your issues and suggestions on:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/PrismLauncher/&#34;&gt;r/PrismLauncher&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;If you want to build Prism Launcher yourself, check &lt;a href=&#34;https://prismlauncher.org/wiki/development/build-instructions/&#34;&gt;Build Instructions&lt;/a&gt; for build instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;The translation effort for PrismLauncher is hosted on &lt;a href=&#34;https://hosted.weblate.org/projects/prismlauncher/launcher/&#34;&gt;Weblate&lt;/a&gt; and information about translating Prism Launcher is available at &lt;a href=&#34;https://github.com/PrismLauncher/Translations&#34;&gt;https://github.com/PrismLauncher/Translations&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Forking/Redistributing/Custom builds policy&lt;/h2&gt; &#xA;&lt;p&gt;We don&#39;t care what you do with your fork/custom build as long as you follow the terms of the &lt;a href=&#34;https://raw.githubusercontent.com/PrismLauncher/PrismLauncher/develop/LICENSE&#34;&gt;license&lt;/a&gt; (this is a legal responsibility), and if you made code changes rather than just packaging a custom build, please do the following as a basic courtesy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make it clear that your fork is not PrismLauncher and is not endorsed by or affiliated with the PrismLauncher project (&lt;a href=&#34;https://prismlauncher.org&#34;&gt;https://prismlauncher.org&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Go through &lt;a href=&#34;https://raw.githubusercontent.com/PrismLauncher/PrismLauncher/develop/CMakeLists.txt&#34;&gt;CMakeLists.txt&lt;/a&gt; and change PrismLauncher&#39;s API keys to your own or set them to empty strings (&lt;code&gt;&#34;&#34;&lt;/code&gt;) to disable them (this way the program will still compile but the functionality requiring those keys will be disabled).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have any questions or want any clarification on the above conditions please make an issue and ask us.&lt;/p&gt; &#xA;&lt;p&gt;Be aware that if you build this software without removing the provided API keys in &lt;a href=&#34;https://raw.githubusercontent.com/PrismLauncher/PrismLauncher/develop/CMakeLists.txt&#34;&gt;CMakeLists.txt&lt;/a&gt; you are accepting the following terms and conditions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/legal/microsoft-identity-platform/terms-of-use&#34;&gt;Microsoft Identity Platform Terms of Use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.curseforge.com/en/support/solutions/articles/9000207405-curse-forge-3rd-party-api-terms-and-conditions&#34;&gt;CurseForge 3rd Party API Terms and Conditions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you do not agree with these terms and conditions, then remove the associated API keys from the &lt;a href=&#34;https://raw.githubusercontent.com/PrismLauncher/PrismLauncher/develop/CMakeLists.txt&#34;&gt;CMakeLists.txt&lt;/a&gt; file by setting them to an empty string (&lt;code&gt;&#34;&#34;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All launcher code is available under the GPL-3.0-only license.&lt;/p&gt; &#xA;&lt;p&gt;The logo and related assets are under the CC BY-SA 4.0 license.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to JetBrains for providing us a few licenses for all their products, as part of their &lt;a href=&#34;https://www.jetbrains.com/opensource/&#34;&gt;Open Source program&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/opensource/&#34;&gt;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&#34; alt=&#34;JetBrains&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also thanks to Weblate for hosting our translation efforts.&lt;/p&gt; &#xA;&lt;a href=&#34;https://hosted.weblate.org/engage/prismlauncher/&#34;&gt; &lt;img src=&#34;https://hosted.weblate.org/widgets/prismlauncher/-/open-graph.png&#34; alt=&#34;Translation status&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Additionally, thanks to the awesome people over at &lt;a href=&#34;https://www.macstadium.com/&#34;&gt;MacStadium&lt;/a&gt;, for providing M1-Macs for development purposes!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.macstadium.com&#34;&gt;&lt;img src=&#34;https://uploads-ssl.webflow.com/5ac3c046c82724970fc60918/5c019d917bba312af7553b49_MacStadium-developerlogo.png&#34; alt=&#34;Powered by MacStadium&#34; width=&#34;300&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>paxifaer/genetic_algorithm</title>
    <updated>2022-10-21T01:31:27Z</updated>
    <id>tag:github.com,2022-10-21:/paxifaer/genetic_algorithm</id>
    <link href="https://github.com/paxifaer/genetic_algorithm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;genetic_algorithm&lt;/h1&gt; &#xA;&lt;p&gt;该项目属于棋类游戏算法设计类型： 算法采用遗传算法 origin分支采用c语言编写，Generic分支采用C++语法编写，两种方式均可header-only。 orign分支目前种群个数仅有64个，无多线程加速，运行较慢，且不再更新。 Generic版本目前使用了一些指针和多线程加速。速度上有了显著的提升，可在较短时间内。同时训练256个种群. 为提升种群数量，采用了self_play机制，简单来说就是预训练。将训练机制与实际对战时分开。兼顾了算法精度与速度&lt;/p&gt; &#xA;&lt;p&gt;有兴趣的小伙伴欢迎+q私聊：807128216&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Bl4ckM1rror/FUD-UUID-Shellcode</title>
    <updated>2022-10-21T01:31:27Z</updated>
    <id>tag:github.com,2022-10-21:/Bl4ckM1rror/FUD-UUID-Shellcode</id>
    <link href="https://github.com/Bl4ckM1rror/FUD-UUID-Shellcode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FUD-UUID-Shellcode&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Bl4ckM1rror/FUD-UUID-Shellcode/raw/main/logo.png&#34;&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Another shellcode injection technique using C++ that attempts to bypass Windows Defender using XOR encryption sorcery and UUID strings &lt;strong&gt;madness&lt;/strong&gt; :).&lt;/p&gt; &#xA;&lt;h1&gt;How it works&lt;/h1&gt; &#xA;&lt;h2&gt;Shellcode generation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Firstly, generate a payload in binary format( using either &lt;code&gt;CobaltStrike&lt;/code&gt; or &lt;code&gt;msfvenom&lt;/code&gt; ) for instance, in &lt;code&gt;msfvenom&lt;/code&gt;, you can do it like so( the payload I&#39;m using is for &lt;strong&gt;illustration&lt;/strong&gt; purposes, you can use whatever payload you want ):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;msfvenom -p windows/messagebox  -f raw -o shellcode.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then convert the shellcode( in binary/raw format ) into a &lt;code&gt;UUID&lt;/code&gt; string format using the Python3 script, &lt;code&gt;bin_to_uuid.py&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./bin_to_uuid.py -p shellcode.bin &amp;gt; uuid.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;xor&lt;/code&gt; encrypt the &lt;code&gt;UUID&lt;/code&gt; strings in the &lt;code&gt;uuid.txt&lt;/code&gt; using the Python3 script, &lt;code&gt;xor_encryptor.py&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./xor_encryptor.py uuid.txt &amp;gt; xor_crypted_out.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;C-style&lt;/code&gt; array in the file, &lt;code&gt;xor_crypted_out.txt&lt;/code&gt;, and paste it in the C++ file as an array of &lt;code&gt;unsigned char&lt;/code&gt; i.e. &lt;code&gt;unsigned char payload[]{your_output_from_xor_crypted_out.txt}&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Execution&lt;/h2&gt; &#xA;&lt;p&gt;This shellcode injection technique comprises the following subsequent steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First things first, it allocates virtual memory for payload execution and residence via &lt;code&gt;VirtualAlloc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;It &lt;code&gt;xor&lt;/code&gt; decrypts the payload using the &lt;code&gt;xor&lt;/code&gt; key value&lt;/li&gt; &#xA; &lt;li&gt;Uses &lt;code&gt;UuidFromStringA&lt;/code&gt; to convert &lt;code&gt;UUID&lt;/code&gt; strings into their binary representation and store them in the previously allocated memory. This is used to avoid the usage of suspicious APIs like &lt;code&gt;WriteProcessMemory&lt;/code&gt; or &lt;code&gt;memcpy&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;EnumChildWindows&lt;/code&gt; to execute the payload previously loaded into memory( in step 1 )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;What makes it unique?&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It doesn&#39;t use standard functions like &lt;code&gt;memcpy&lt;/code&gt; or &lt;code&gt;WriteProcessMemory&lt;/code&gt; which are known to raise alarms to AVs/EDRs, this program uses the Windows API function called &lt;code&gt;UuidFromStringA&lt;/code&gt; which can be used to decode data as well as write it to memory( &lt;strong&gt;Isn&#39;t that great folks?&lt;/strong&gt; &lt;em&gt;And please don&#39;t say &#34;NO!&#34;&lt;/em&gt; :) ).&lt;/li&gt; &#xA; &lt;li&gt;It uses the &lt;strong&gt;function call obfuscation&lt;/strong&gt; trick to call the Windows API functions&lt;/li&gt; &#xA; &lt;li&gt;Lastly, because it looks unique :) ( &lt;em&gt;Isn&#39;t it?&lt;/em&gt; :) )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Important&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You have to change the &lt;code&gt;xor&lt;/code&gt; key(line 85) to what you wish. This also has to be done in the &lt;code&gt;./xor_encryptor.py&lt;/code&gt; python3 script by changing the &lt;code&gt;KEY&lt;/code&gt; variable. The keys have to match!&lt;/li&gt; &#xA; &lt;li&gt;You have to change the default &lt;code&gt;executable filename&lt;/code&gt; value(row 90) to your filename.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mingw&lt;/code&gt; was used but you can use whichever compiler you prefer. :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compile&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simply run this at your terminal/shell:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Proof-of-Concept( PoC )&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Bl4ckM1rror/FUD-UUID-Shellcode/raw/main/PoC.png?raw=true&#34; alt=&#34;AV Scan&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Static Analysis&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Bl4ckM1rror/FUD-UUID-Shellcode/raw/main/static-analysis.png?raw=true&#34; alt=&#34;AV Scan&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;AV Scan results&lt;/h1&gt; &#xA;&lt;p&gt;The binary was scanned using &lt;a href=&#34;https://antiscan.me/scan/new/result?id=3IYj6CtMq6h8&#34;&gt;antiscan.me&lt;/a&gt; on 01/08/2022.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Bl4ckM1rror/FUD-UUID-Shellcode/raw/main/antiscan.png?raw=true&#34; alt=&#34;AV Scan&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://research.nccgroup.com/2021/01/23/rift-analysing-a-lazarus-shellcode-execution-method/&#34;&gt;https://research.nccgroup.com/2021/01/23/rift-analysing-a-lazarus-shellcode-execution-method/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>