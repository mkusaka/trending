<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-01T01:32:28Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/kvrocks</title>
    <updated>2023-07-01T01:32:28Z</updated>
    <id>tag:github.com,2023-07-01:/apache/kvrocks</id>
    <link href="https://github.com/apache/kvrocks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kvrocks is a distributed key value NoSQL database that uses RocksDB as storage engine and is compatible with Redis protocol.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://kvrocks.apache.org/img/kvrocks-featured.png&#34; alt=&#34;kvrocks_logo&#34; width=&#34;350&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/kvrocks/actions/workflows/kvrocks.yaml&#34;&gt;&lt;img src=&#34;https://github.com/apache/kvrocks/actions/workflows/kvrocks.yaml/badge.svg?sanitize=true&#34; alt=&#34;kvrocks ci actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/kvrocks/raw/unstable/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/apache/kvrocks&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/kvrocks/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/apache/kvrocks&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/kvrockscommunity/shared_invite/zt-p5928e3r-OUAK8SUgC8GOceGM6dAz6w&#34;&gt;Slack Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lists.apache.org/list.html?dev@kvrocks.apache.org&#34;&gt;Mailing List&lt;/a&gt; (&lt;a href=&#34;https://www.apache.org/foundation/mailinglists.html#subscribing&#34;&gt;how to subscribe&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Apache Kvrocks&lt;/strong&gt; is a distributed key value NoSQL database that uses RocksDB as storage engine and is compatible with Redis protocol. Kvrocks intends to decrease the cost of memory and increase the capacity while compared to Redis. The design of replication and storage was inspired by &lt;a href=&#34;https://github.com/pinterest/rocksplicator&#34;&gt;rocksplicator&lt;/a&gt; and &lt;a href=&#34;https://github.com/Qihoo360/blackwidow&#34;&gt;blackwidow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Kvrocks has the following key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redis Compatible: Users can access Apache Kvrocks via any Redis client.&lt;/li&gt; &#xA; &lt;li&gt;Namespace: Similar to Redis SELECT but equipped with token per namespace.&lt;/li&gt; &#xA; &lt;li&gt;Replication: Async replication using binlog like MySQL.&lt;/li&gt; &#xA; &lt;li&gt;High Available: Support Redis sentinel to failover when master or slave was failed.&lt;/li&gt; &#xA; &lt;li&gt;Cluster: Centralized management but accessible via any Redis cluster client.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks to designers &lt;a href=&#34;https://github.com/tianlingyu1997&#34;&gt;Lingyu Tian&lt;/a&gt; and Shili Fan for contributing the logo of Kvrocks.&lt;/p&gt; &#xA;&lt;h2&gt;Who uses Kvrocks&lt;/h2&gt; &#xA;&lt;p&gt;You can find Kvrocks users at &lt;a href=&#34;https://kvrocks.apache.org/users/&#34;&gt;the Users page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Users are encouraged to add themselves to the Users page. Either leave a comment on the &lt;a href=&#34;https://github.com/apache/kvrocks/issues/414&#34;&gt;&#34;Who is using Kvrocks&#34;&lt;/a&gt; issue, or directly send a pull request to add company or organization &lt;a href=&#34;https://github.com/apache/kvrocks-website/raw/main/src/components/UserLogos/index.tsx&#34;&gt;information&lt;/a&gt; and &lt;a href=&#34;https://github.com/apache/kvrocks-website/tree/main/static/media/users&#34;&gt;logo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build and run Kvrocks&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisite&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# CentOS / RedHat&#xA;sudo yum install -y epel-release&#xA;sudo yum install -y git gcc gcc-c++ make cmake autoconf automake libtool libstdc++-static python3 which openssl-devel&#xA;&#xA;# Ubuntu / Debian&#xA;sudo apt update&#xA;sudo apt install -y git gcc g++ make cmake autoconf automake libtool python3 libssl-dev&#xA;&#xA;# macOS&#xA;brew install autoconf automake libtool cmake openssl&#xA;&#xA;# Please force linking the openssl if still can&#39;t find after installing openssl&#xA;brew link --force openssl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;It is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone https://github.com/apache/kvrocks.git&#xA;$ cd kvrocks&#xA;$ ./x.py build # `./x.py build -h` to check more options;&#xA;               # especially, `./x.py build --ghproxy` will fetch dependencies via ghproxy.com.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with TLS support, you&#39;ll need OpenSSL development libraries (e.g. libssl-dev on Debian/Ubuntu) and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./x.py build -DENABLE_OPENSSL=ON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with lua instead of luaJIT, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./x.py build -DUSE_LUAJIT=OFF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Kvrocks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./build/kvrocks -c kvrocks.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Kvrocks using Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker run -it -p 6666:6666 apache/kvrocks&#xA;# or get the nightly image:&#xA;$ docker run -it -p 6666:6666 apache/kvrocks:nightly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connect Kvrocks service&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ redis-cli -p 6666&#xA;&#xA;127.0.0.1:6666&amp;gt; get a&#xA;(nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running test cases&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./x.py build --unittest&#xA;$ ./x.py test cpp # run C++ unit tests&#xA;$ ./x.py test go # run Golang (unit and integration) test cases&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported platforms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;macOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Namespace&lt;/h2&gt; &#xA;&lt;p&gt;Namespace is used to isolate data between users. Unlike all the Redis databases can be visited by &lt;code&gt;requirepass&lt;/code&gt;, we use one token per namespace. &lt;code&gt;requirepass&lt;/code&gt; is regraded as admin token, and only admin token allows to access the namespace command, as well as some commands like &lt;code&gt;config&lt;/code&gt;, &lt;code&gt;slaveof&lt;/code&gt;, &lt;code&gt;bgsave&lt;/code&gt;, etc. See the &lt;a href=&#34;https://kvrocks.apache.org/docs/namespace&#34;&gt;Namespace&lt;/a&gt; page for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# add token&#xA;127.0.0.1:6666&amp;gt; namespace add ns1 my_token&#xA;OK&#xA;&#xA;# update token&#xA;127.0.0.1:6666&amp;gt; namespace set ns1 new_token&#xA;OK&#xA;&#xA;# list namespace&#xA;127.0.0.1:6666&amp;gt; namespace get *&#xA;1) &#34;ns1&#34;&#xA;2) &#34;new_token&#34;&#xA;3) &#34;__namespace&#34;&#xA;4) &#34;foobared&#34;&#xA;&#xA;# delete namespace&#xA;127.0.0.1:6666&amp;gt; namespace del ns1&#xA;OK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cluster&lt;/h2&gt; &#xA;&lt;p&gt;Kvrocks implements a proxyless centralized cluster solution but its accessing method is completely compatible with the Redis cluster client. You can use Redis cluster SDKs to access the kvrocks cluster. More details, please see: &lt;a href=&#34;https://kvrocks.apache.org/docs/cluster/&#34;&gt;Kvrocks Cluster Introduction&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documents&lt;/h2&gt; &#xA;&lt;p&gt;Documents are hosted at the &lt;a href=&#34;https://kvrocks.apache.org/docs/getting-started/&#34;&gt;official website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kvrocks.apache.org/docs/supported-commands/&#34;&gt;Supported Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kvrocks.apache.org/community/data-structure-on-rocksdb/&#34;&gt;Design Complex Structure on RocksDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kvrocks.apache.org/docs/replication&#34;&gt;Replication Design&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Export the Kvrocks monitor metrics, please use &lt;a href=&#34;https://github.com/KvrocksLabs/kvrocks_exporter&#34;&gt;kvrocks_exporter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Migrate from redis to kvrocks, use &lt;a href=&#34;https://github.com/vipshop/redis-migrate-tool&#34;&gt;redis-migrate-tool&lt;/a&gt; which was developed by &lt;a href=&#34;https://github.com/vipshop&#34;&gt;vipshop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Migrate from kvrocks to redis, use &lt;code&gt;kvrocks2redis&lt;/code&gt; in the build directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Kvrocks community welcomes all forms of contribution and you can find out how to get involved on the &lt;a href=&#34;https://kvrocks.apache.org/community/&#34;&gt;Community&lt;/a&gt; and &lt;a href=&#34;https://kvrocks.apache.org/community/contributing&#34;&gt;How to Contribute&lt;/a&gt; pages.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;h3&gt;Hardware&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU: 48 cores Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz&lt;/li&gt; &#xA; &lt;li&gt;Memory: 32 GiB&lt;/li&gt; &#xA; &lt;li&gt;NET: Intel Corporation I350 Gigabit Network Connection&lt;/li&gt; &#xA; &lt;li&gt;DISK: 2TB NVMe Intel SSD DC P4600&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Benchmark Client: multi-thread redis-benchmark(unstable branch)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;1. Commands QPS&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;kvrocks: workers = 16, benchmark: 8 threads/ 512 conns / 128 payload&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;latency: 99.9% &amp;lt; 10ms&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/kvrocks/unstable/assets/chart-commands.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. QPS on different payloads&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;kvrocks: workers = 16, benchmark: 8 threads/ 512 conns&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;latency: 99.9% &amp;lt; 10ms&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/kvrocks/unstable/assets/chart-values.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3. QPS on different workers&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;kvrocks: workers = 16, benchmark: 8 threads/ 512 conns / 128 payload&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;latency: 99.9% &amp;lt; 10ms&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/kvrocks/unstable/assets/chart-threads.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Kvrocks is under the Apache License Version 2.0. See the &lt;a href=&#34;https://raw.githubusercontent.com/apache/kvrocks/unstable/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Social Media&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kvrocks.medium.com/&#34;&gt;Medium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/people/kvrocks&#34;&gt;Zhihu&lt;/a&gt; (in Chinese)&lt;/li&gt; &#xA; &lt;li&gt;WeChat Official Account (in Chinese, scan the QR code to follow)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/kvrocks/unstable/assets/wechat_account.jpg&#34; alt=&#34;WeChat official account&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chichengcn/gici-open</title>
    <updated>2023-07-01T01:32:28Z</updated>
    <id>tag:github.com,2023-07-01:/chichengcn/gici-open</id>
    <link href="https://github.com/chichengcn/gici-open" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GNSS/INS/Camera Integrated Navigation Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GICI-LIB&lt;/h1&gt; &#xA;&lt;h2&gt;GNSS/INS/Camera Integrated Navigation Library&lt;/h2&gt; &#xA;&lt;p&gt;GNSS/INS/Camera Integrated Navigation Library (GICI-LIB) is an open-source software package for Global Navigation Satellite System (GNSS), Inertial Navigation System (INS), and Camera integrated navigation. The features of GICI-LIB are:&lt;/p&gt; &#xA;&lt;p&gt;a) It is built under the Factor Graph Optimization (FGO) framework. It contains most of the possible GNSS loose and tight integration factors, INS factors, visual factors, and motion constraints, together with reliable initialization, measurement sparsification, and outlier rejection algorithms. The GNSS formulations are implemented towards four constellations and full frequencies.&lt;/p&gt; &#xA;&lt;p&gt;b) For ease of use, the software is developed under object-oriented programming features, and the graph is designed to enable the flexible addition of sensors. By simple instantiation, one can easily form any kind of multi-sensor fusion algorithm with considerable robustness.&lt;/p&gt; &#xA;&lt;p&gt;c) It supports multiple algorithms, including GNSS Single Point Positioning (SPP), Real-Time Differential (RTD), Single-Differenced GNSS (SDGNSS), Real-Time Kinematic (RTK), Precise Point Positioning (PPP), SPP-based loosely coupled (LC) and tightly coupled (TC) GNSS/Inertial Navigation System (GINS), SPP-based Solution/Raw/Raw (SRR) and Raw/Raw/Raw (RRR) GNSS/Visual/Inertial Navigation System (GVINS), RTK-based LC GINS, TC GINS, SSR GVINS, and RRR GVINS. Moreover, other integration algorithms can be instantiated by users.&lt;/p&gt; &#xA;&lt;p&gt;d) It supports multiple I/O ports, including serial, TCP/IP, NTRIP, V4L2, file, and ROS topics.&lt;/p&gt; &#xA;&lt;p&gt;e) It supports multiple message de/encoders, including RTCM2, RTCM3, Ublox raw, Septentrio raw, Novatel raw, Tersus raw, NMEA, DCB-file, ATX-file for GNSS, image-pack, image-v4l2 for image, and IMU-pack for IMU.&lt;/p&gt; &#xA;&lt;p&gt;f) It supports multiple stream and multi-algorithm processing. No maximum quantity is limited.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Authors:&lt;/strong&gt; Cheng Chi, Xin Zhang, Jiahui Liu, Yulong Sun, Zihao Zhang, and Xingqun Zhan.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contact:&lt;/strong&gt; &lt;a href=&#34;mailto:chichengcn@sjtu.edu.cn&#34;&gt;chichengcn@sjtu.edu.cn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Related Papers&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;C. Chi, X. Zhang, J. Liu, Y. Sun, Z. Zhang, and X. Zhan, &#34;GICI-LIB: A GNSS/INS/Camera Integrated Navigation Library,&#34; arXiv preprint, arXiv:2306.13268. &lt;a href=&#34;https://doi.org/10.48550/arXiv.2306.13268&#34;&gt;https://doi.org/10.48550/arXiv.2306.13268&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dataset&lt;/strong&gt; &lt;a href=&#34;https://github.com/chichengcn/gici-open-dataset.git&#34;&gt;GICI-dataset&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/chichengcn/gici-open/master/doc/manual.pdf&#34;&gt;GICI-manual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1. Dependencies&lt;/h2&gt; &#xA;&lt;h4&gt;1.1 Ubuntu&lt;/h4&gt; &#xA;&lt;p&gt;We are developing our code on Ubuntu 20.04, and tested on Ubuntu 18.04 and Ubuntu 22.04. We recommend you to use the same or similar environment if you are not familiar with cross-compiling.&lt;/p&gt; &#xA;&lt;h4&gt;1.2 Eigen 3.3 or later. REQUIRED.&lt;/h4&gt; &#xA;&lt;p&gt;Eigen is a C++ template library for linear algebra. You can find the releases on &lt;a href=&#34;https://eigen.tuxfamily.org/index.php?title=Main_Page&#34;&gt;Eigen&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;1.3 OpenCV 4.2.0 or later. REQUIRED.&lt;/h4&gt; &#xA;&lt;p&gt;OpenCV is a computer vision library. You can find the releases on &lt;a href=&#34;https://opencv.org/releases/&#34;&gt;OpenCV&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;1.4 Yaml-cpp 0.6.0 or later. REQUIRED.&lt;/h4&gt; &#xA;&lt;p&gt;Yaml-cpp is a decoder and encoder for YAML formats. We use YAML file to configure our workflow. You can find the releases on &lt;a href=&#34;https://github.com/jbeder/yaml-cpp&#34;&gt;yaml-cpp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;1.5 Glog 0.6.0 or later. REQUIRED.&lt;/h4&gt; &#xA;&lt;p&gt;Glog is a logging control library. You can find the releases on &lt;a href=&#34;https://github.com/google/glog&#34;&gt;Glog&lt;/a&gt;. You should install Glog together with &lt;a href=&#34;https://github.com/gflags/gflags&#34;&gt;Gflags&lt;/a&gt;. We suggest you install Glog from source code, rather than apt-get. Because installing from apt-get may make GICI fail to find the Glog library during compiling.&lt;/p&gt; &#xA;&lt;h4&gt;1.6 Ceres-Solver 2.1.0 or later. REQUIRED.&lt;/h4&gt; &#xA;&lt;p&gt;Ceres-Solver is a nonlinear optimization library. You can find the releases on &lt;a href=&#34;http://ceres-solver.org/&#34;&gt;Ceres-Solver&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;1.7 ROS. OPTIONAL.&lt;/h4&gt; &#xA;&lt;p&gt;ROS is a library for robot applications. We provide a ROS wrapper to enable GICI to handle some ROS messages. If you want to build GICI with ROS, you should install ROS. You can find the instructions on &lt;a href=&#34;http://wiki.ros.org/Documentation&#34;&gt;ROS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;2. Build GICI&lt;/h2&gt; &#xA;&lt;h4&gt;2.1 Normal Build&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd &amp;lt;gici-root-directory&amp;gt;&#xA;mkdir build&#xA;cd build&#xA;cmake .. -DCMAKE_BUILD_TYPE=Release&#xA;make -j8 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can run GICI via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gici_main &amp;lt;gici-config-file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.2 Build with ROS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd &amp;lt;gici-root-directory&amp;gt;/ros_wrapper&#xA;catkin_make -DCMAKE_BUILD_TYPE=Release&#xA;source ./devel/setup.bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can run GICI ROS wrapper via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rosrun gici_ros gici_ros_main &amp;lt;gici-config-file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;3. Run GICI&lt;/h2&gt; &#xA;&lt;p&gt;We provide various example YAML configuration files for non-ROS and ROS interfaces. See &lt;a href=&#34;https://raw.githubusercontent.com/chichengcn/gici-open/master/option&#34;&gt;non-ROS&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/chichengcn/gici-open/master/ros_wrapper/src/gici/option&#34;&gt;ROS&lt;/a&gt;. You can modify them according to your requirements to enable real-time estimation, pseudo-real-time, data transfer, and data storage. See our &lt;a href=&#34;https://raw.githubusercontent.com/chichengcn/gici-open/master/doc/manual.pdf&#34;&gt;documentation&lt;/a&gt; for details. Here we only illustrate how to run GICI with our datasets.&lt;/p&gt; &#xA;&lt;p&gt;You can download our datasets on &lt;a href=&#34;https://github.com/chichengcn/gici-open-dataset.git&#34;&gt;GICI-dataset&lt;/a&gt;. We provide example YAML configuration files to run different algorithms with our dataset. The usage of these configuration files are illustrated in &lt;a href=&#34;https://github.com/chichengcn/gici-open-dataset.git&#34;&gt;GICI-dataset&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We support both ROS and non-ROS visualization.&lt;/p&gt; &#xA;&lt;p&gt;The following video is an example of ROS visualization.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/dAczU-7r85U&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/chichengcn/gici-open-dataset/raw/master/figures/run/4.1_ros.png&#34; alt=&#34;ros&#34; width=&#34;500&#34; height=&#34;290&#34; border=&#34;10&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following video is an example of non-ROS visualization using &lt;a href=&#34;https://rtklib.com/&#34;&gt;RTKLIB&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/8TP0We9lOEQ&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/chichengcn/gici-open-dataset/raw/master/figures/run/4.1_non_ros.png&#34; alt=&#34;non_ros&#34; width=&#34;500&#34; height=&#34;425&#34; border=&#34;10&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4. Acknowledgment&lt;/h2&gt; &#xA;&lt;p&gt;Many of the GNSS tools, I/O handlers, and message de/encoders are inherited from &lt;a href=&#34;https://rtklib.com/&#34;&gt;RTKLIB&lt;/a&gt;. The basic FGO management and the visual and IMU factors are partly inherited from &lt;a href=&#34;https://github.com/ethz-asl/okvis&#34;&gt;OKVIS&lt;/a&gt;. The feature handler is partly inherited from &lt;a href=&#34;https://github.com/uzh-rpg/rpg_svo_pro_open&#34;&gt;SVO 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;5. License&lt;/h2&gt; &#xA;&lt;p&gt;The GICI-LIB software package is distributed under &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;GPL v3&lt;/a&gt; license. Users are freedom to modify and distribute the software as they see fit, provided that they adhere to the terms and conditions set forth in the license. This includes the ability to incorporate or use GICI-LIB with other software, whether for non-commercial or commercial purposes. However, any modifications or derivative works must also be distributed under the GPL v3 license, ensuring that the software remains free and accessible to all users.&lt;/p&gt;</summary>
  </entry>
</feed>