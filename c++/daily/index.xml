<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-29T01:32:38Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>numencyber/VulnerabilityPoC</title>
    <updated>2022-10-29T01:32:38Z</updated>
    <id>tag:github.com,2022-10-29:/numencyber/VulnerabilityPoC</id>
    <link href="https://github.com/numencyber/VulnerabilityPoC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;The PoC/Exploit of some interesting vulnerabilities&lt;/h2&gt; &#xA;&lt;h3&gt;By Vulnerability Research Team of Numen Cyber Labs&lt;/h3&gt; &#xA;&lt;p&gt;TCP/IP RCE Vulnerability (CVE-2022–34718) PoC Restoration and Analysis&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/@numencyberlabs/analysis-and-summary-of-tcp-ip-protocol-remote-code-execution-vulnerability-cve-2022-34718-8fcc28538acf&#34;&gt;https://medium.com/@numencyberlabs/analysis-and-summary-of-tcp-ip-protocol-remote-code-execution-vulnerability-cve-2022-34718-8fcc28538acf&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>7thSamurai/steganography</title>
    <updated>2022-10-29T01:32:38Z</updated>
    <id>tag:github.com,2022-10-29:/7thSamurai/steganography</id>
    <link href="https://github.com/7thSamurai/steganography" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple C++ Image Steganography tool to encrypt and hide files insde images using Least-Significant-Bit encoding.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Image Steganography Tool&lt;/h1&gt; &#xA;&lt;p&gt;Simple C++ &lt;strong&gt;Encryption&lt;/strong&gt; and &lt;strong&gt;Steganography&lt;/strong&gt; tool that uses Password-Protected-Encryption to secure a file&#39;s contents, and then proceeds to embed it insde an image&#39;s pixel-data using Least-Significant-Bit encoding. For Linux based systems.&lt;/p&gt; &#xA;&lt;h2&gt;Encoding&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./steganography encode -i data/orig.png -e data/jekyll_and_hyde.zip -o output.png&#xA;Password: 1234&#xA;* Image size: 640x426 pixels&#xA;* Encoding level: Low (Default)&#xA;* Max embed size: 132.38 KiB&#xA;* Embed size: 61.77 KiB&#xA;* Encrypted embed size: 61.78 KiB&#xA;* Generated CRC32 checksum&#xA;* Generated encryption key with PBKDF2-HMAC-SHA-256 (20000 rounds)&#xA;* Encrypted embed with AES-256-CBC&#xA;* Embedded jekyll_and_hyde.zip into image&#xA;* Sucessfully wrote to output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Original image:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/7thSamurai/steganography/main/data/orig.png&#34; alt=&#34;Original image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Image with embedded ZIP containg the entire contents of the book &#34;Dr Jekyll and Mr Hyde&#34;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/7thSamurai/steganography/main/data/output.png&#34; alt=&#34;Image with embed&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Decoding&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./steganography decode -i output.png -o &#34;out - jekyll_and_hyde.zip&#34;&#xA;Password: 1234&#xA;* Image size: 640x426 pixels&#xA;* Generated decryption key with PBKDF2-HMAC-SHA-256 (20000 rounds)&#xA;* Sucessfully decrypted header&#xA;* File signatures match&#xA;* Detected embed jekyll_and_hyde.zip&#xA;* Encoding level: Low (Default)&#xA;* Encrypted embed size: 61.78 KiB&#xA;* Successfully decrypted the embed&#xA;* Decrypted embed size: 61.77 KiB&#xA;* CRC32 checksum matches&#xA;* Successfully wrote to out - jekyll_and_hyde.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir build&#xA;$ cd build&#xA;$ cmake -DCMAKE_BUILD_TYPE=Release ..&#xA;$ make -j 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: steganography [-h] {decode,encode}&#xA;&#xA;Optional arguments:&#xA;  -h, --help   &#x9;shows help message and exits&#xA;  -v, --version&#x9;prints version information and exits&#xA;&#xA;Subcommands:&#xA;  decode        Decodes and extracts an embed-file from an image&#xA;  encode        Encodes an embed-file into an image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encoding&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: encode [-h] --input VAR --output VAR --embed VAR [--passwd VAR]&#xA;&#xA;Encodes an embed-file into an image&#xA;&#xA;Optional arguments:&#xA;  -h, --help   &#x9;shows help message and exits&#xA;  -v, --version&#x9;prints version information and exits&#xA;  -i, --input  &#x9;specify the input image. [required]&#xA;  -o, --output &#x9;specify the output image. [required]&#xA;  -e, --embed  &#x9;specify the file to embed. [required]&#xA;  -p, --passwd &#x9;specify the encryption password.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Decoding&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: decode [-h] --input VAR [--output VAR] [--passwd VAR]&#xA;&#xA;Decodes and extracts an embed-file from an image&#xA;&#xA;Optional arguments:&#xA;  -h, --help   &#x9;shows help message and exits&#xA;  -v, --version&#x9;prints version information and exits&#xA;  -i, --input  &#x9;specify the input image. [required]&#xA;  -o, --output &#x9;specify the output file. [default: &#34;&#34;]&#xA;  -p, --passwd &#x9;specify the encryption password.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Theory Of Operation&lt;/h2&gt; &#xA;&lt;h3&gt;Encoding&lt;/h3&gt; &#xA;&lt;p&gt;The program operates by first randomly generating a &lt;em&gt;128-bit Password Salt&lt;/em&gt; and a &lt;em&gt;128-bit AES Initialization Vector&lt;/em&gt; by reading binary data from &lt;strong&gt;/dev/urandom&lt;/strong&gt;. It then uses that &lt;em&gt;Password Salt&lt;/em&gt; as a parameter in generating an encryption key, by using &lt;strong&gt;PBKDF2-HMAC-SHA-256&lt;/strong&gt; on a user inputted string. A &lt;strong&gt;CRC32&lt;/strong&gt; hash of the file to embed is then calculated, and stored in the header to act as a checksum for the validity of the data. It then pads the binary data of the file to embed using the &lt;strong&gt;PKCS #7&lt;/strong&gt; algorithm, followed by actually encrypting both the header and the padded data, with &lt;strong&gt;AES-256&lt;/strong&gt; in &lt;strong&gt;CBC Mode&lt;/strong&gt;, using the previously generated &lt;em&gt;Initialization Vector&lt;/em&gt;. Now the data is actually encoded inside the image by first picking a random offset, and then going through each bit of data and storing it inside the actual image pixel data, which it accomplishes by setting the &lt;em&gt;Least-Significant-Bit&lt;/em&gt; of each channel byte of each pixel.&lt;/p&gt; &#xA;&lt;h3&gt;Decoding&lt;/h3&gt; &#xA;&lt;p&gt;The decoding process works exactly the same as the encoding process previously described above, just in reverse. The only difference is that for decoding, after the program attempts to extract and decrypt the data, it compares some of the information in the header section in an attempt to validate the extraction process. The header fields which are compared are: The 4 byte file signature custom to this program, and the &lt;strong&gt;CRC32&lt;/strong&gt; hash of the decrypted data. If any of these fields do not match to their correct values, the decryption process will fail. This should only happen if the file which you were attempting to decrypt does not actually contain an embed, if the password you entered is wrong, or if the image file was somehow corrupted.&lt;/p&gt; &#xA;&lt;h3&gt;Detection&lt;/h3&gt; &#xA;&lt;p&gt;While the detection of data being embedded in an image is a trivial task, theoretically there is no way of knowing that it was this program that did it, and theoretically there should be no known way to decrypt the data without knowing the password, that is without spending millions of years in the process of doing so.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Do not use this program to encrypt and hide important data which you wish to keep away from prying eyes. This is just a simple proof-of-concept program that I made for fun. I&#39;m no cryptographer. I&#39;m just a hobbyist, use at your own risk.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;This software is licensed under MIT. Copyright © 2022 Zach Collins&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Tencent/matrix</title>
    <updated>2022-10-29T01:32:38Z</updated>
    <id>tag:github.com,2022-10-29:/Tencent/matrix</id>
    <link href="https://github.com/Tencent/matrix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Matrix is a plugin style, non-invasive APM system developed by WeChat.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tencent/matrix/master/assets/img/readme/header.png&#34; alt=&#34;Matrix-icon&#34;&gt; &lt;a href=&#34;https://github.com/Tencent/matrix/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-BSD3-brightgreen.svg?style=flat&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/matrix/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/matrix/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Wechat%20Approved-2.0.8-red.svg?sanitize=true&#34; alt=&#34;WeChat Approved&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.circleci.com/pipelines/github/Tencent/matrix&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/Tencent/matrix.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(中文版本请参看&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/matrix/master/#matrix_cn&#34;&gt;这里&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/matrix/master/#matrix_ios_cn&#34;&gt;Matrix for iOS/macOS 中文版&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/matrix/master/#matrix_android_cn&#34;&gt;Matrix for android 中文版&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/matrix/master/#matrix_ios_en&#34;&gt;Matrix for iOS/macOS&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/matrix/master/#matrix_android_en&#34;&gt;Matrix for android&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Matrix&lt;/strong&gt; is an APM (Application Performance Manage) used in Wechat to monitor, locate and analyse performance problems. It is a &lt;strong&gt;plugin style&lt;/strong&gt;, &lt;strong&gt;non-invasive&lt;/strong&gt; solution and is currently available on iOS, macOS and Android.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a name=&#34;matrix_ios_en&#34;&gt; Matrix for iOS/macOS &lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The monitoring scope of the current tool includes: crash, lag, and memory, which includes the following three plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;WCCrashBlockMonitorPlugin：&lt;/strong&gt; Based on &lt;a href=&#34;https://github.com/kstenerud/KSCrash&#34;&gt;KSCrash&lt;/a&gt; framework, it features cutting-edge lag stack capture capabilities with crash capture.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;WCMemoryStatPlugin：&lt;/strong&gt; A memory monitoring tool that captures memory allocation and the callstack of an application&#39;s memory event.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;WCFPSMonitorPlugin：&lt;/strong&gt; A fps monitoring tool that captures main thread&#39;s callstack while user scrolling.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h4&gt;WCCrashBlockMonitorPlugin&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy integration, no code intrusion.&lt;/li&gt; &#xA; &lt;li&gt;Determine whether the app is stuck by checking the running status of the Runloop, and support both the iOS and macOS platform.&lt;/li&gt; &#xA; &lt;li&gt;Add time-consuming stack fetching, attaching the most time-consuming main thread stack to the thread snapshot log.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;WCMemoryStatPlugin&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Live recording every object&#39;s creating and the corresponding callstack of its creation, and report it when the application out-of-memory is detected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h4&gt;Install&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install with static framework&lt;/strong&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Get source code of Matrix;&lt;/li&gt; &#xA;   &lt;li&gt;Open terminal, execute &lt;code&gt;make&lt;/code&gt; in the &lt;code&gt;matrix/matrix-iOS&lt;/code&gt; directory to compile and generate static library. After compiling, the iOS platform library is in the &lt;code&gt;matrix/matrix-iOS/build_ios&lt;/code&gt; directory, and the macOS platform library is in the &lt;code&gt;matrix/matrix-iOS/build_macos&lt;/code&gt; directory.&lt;/li&gt; &#xA;   &lt;li&gt;Link with static framework in the project:&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iOS : Use &lt;code&gt;Matrix.framework&lt;/code&gt; under the &lt;code&gt;matrix/matrix-iOS/build_ios&lt;/code&gt; path, link &lt;code&gt;Matrix.framework&lt;/code&gt; to the project as a static library;&lt;/li&gt; &#xA;   &lt;li&gt;macOS : Use &lt;code&gt;Matrix.framework&lt;/code&gt; under the &lt;code&gt;matrix/matrix-iOS/build_macos&lt;/code&gt; path, link &lt;code&gt;Matrix.framework&lt;/code&gt; to the project as a static library.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ol start=&#34;4&#34;&gt; &#xA;   &lt;li&gt;Add &lt;code&gt;#import &amp;lt;Matrix/Matrix.h&amp;gt;&lt;/code&gt;, then you can use the performance probe tool of WeChat.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Start the plugins&lt;/h4&gt; &#xA;&lt;p&gt;In the following places:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Program &lt;code&gt;main&lt;/code&gt; function;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt; of &lt;code&gt;AppDelegate&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Or other places running as earlier as possible after application launching.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add a code similar to the following to start the plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;Matrix/Matrix.h&amp;gt;&#xA;  &#xA;Matrix *matrix = [Matrix sharedInstance];&#xA;MatrixBuilder *curBuilder = [[MatrixBuilder alloc] init];&#xA;curBuilder.pluginListener = self; // get the related event of plugin via the callback of the pluginListener&#xA;    &#xA;WCCrashBlockMonitorPlugin *crashBlockPlugin = [[WCCrashBlockMonitorPlugin alloc] init];    &#xA;[curBuilder addPlugin:crashBlockPlugin]; // add lag and crash monitor.&#xA;    &#xA;WCMemoryStatPlugin *memoryStatPlugin = [[WCMemoryStatPlugin alloc] init];&#xA;[curBuilder addPlugin:memoryStatPlugin]; // add memory monitor.&#xA;&#xA;WCFPSMonitorPlugin *fpsMonitorPlugin = [[WCFPSMonitorPlugin alloc] init];&#xA;[curBuilder addPlugin:fpsMonitorPlugin]; // add fps monitor.&#xA;    &#xA;[matrix addMatrixBuilder:curBuilder];&#xA;    &#xA;[crashBlockPlugin start]; // start the lag and crash monitor.&#xA;[memoryStatPlugin start]; // start memory monitor&#xA;[fpsMonitorPlugin start]; // start fps monitor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Receive callbacks to obtain monitoring data&lt;/h4&gt; &#xA;&lt;p&gt;Set &lt;code&gt;pluginListener&lt;/code&gt; of the &lt;code&gt;MatrixBuilder&lt;/code&gt; object, implement the &lt;code&gt;MatrixPluginListenerDelegate&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// set delegate&#xA;&#xA;MatrixBuilder *curBuilder = [[MatrixBuilder alloc] init];&#xA;curBuilder.pluginListener = &amp;lt;object conforms to MatrixPluginListenerDelegate&amp;gt;; &#xA;&#xA;// MatrixPluginListenerDelegate&#xA;&#xA;- (void)onInit:(id&amp;lt;MatrixPluginProtocol&amp;gt;)plugin;&#xA;- (void)onStart:(id&amp;lt;MatrixPluginProtocol&amp;gt;)plugin;&#xA;- (void)onStop:(id&amp;lt;MatrixPluginProtocol&amp;gt;)plugin;&#xA;- (void)onDestroy:(id&amp;lt;MatrixPluginProtocol&amp;gt;)plugin;&#xA;- (void)onReportIssue:(MatrixIssue *)issue;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each plugin added to &lt;code&gt;MatrixBuilder&lt;/code&gt; will call back the corresponding event via &lt;code&gt;pluginListener&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important: Get the monitoring data of the Matrix via &lt;code&gt;onReportIssue:&lt;/code&gt;, the data format info reference to &lt;a href=&#34;https://github.com/Tencent/matrix/wiki/Matrix-for-iOS-macOS-Data-Format-Description&#34;&gt;Matrix for iOS/macOS Data Format Description&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;At this point, Matrix has been integrated into the app and is beginning to collect crash, lag, and memory data. If you still have questions, check out the example: &lt;code&gt;samples/sample-iOS/MatrixDemo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a name=&#34;matrix_android_en&#34;&gt; Matrix for android &lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;APK Checker:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Analyse the APK package, give suggestions of reducing the APK&#39;s size; Compare two APK and find out the most significant increment on size&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Resource Canary:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Detect the activity leak and bitmap duplication basing on WeakReference and &lt;a href=&#34;https://github.com/square/haha&#34;&gt;Square Haha&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Trace Canary:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;FPS Monitor, Startup Performance, ANR, UI-Block / Slow Method Detection&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SQLite Lint:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Evaluate the quality of SQLite statement automatically by using SQLite official tools&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;IO Canary:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Detect the file IO issues, including performance of file IO and closeable leak&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Battery Canary:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;App thread activities monitor (Background watch &amp;amp; foreground loop watch), Sonsor usage monitor (WakeLock/Alarm/Gps/Wifi/Bluetooth), Background network activities (Wifi/Mobile) monitor.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MemGuard&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Detect heap memory overlap, use-after-free and double free issues.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h4&gt;APK Checker&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy-to-use.&lt;/strong&gt; Matrix provides a JAR tool, which is more convenient to apply to your integration systems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;More features.&lt;/strong&gt; In addition to APK Analyzer, Matrix find out the R redundancies, the dynamic libraries statically linked STL, unused resources, and supports custom checking rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visual Outputs.&lt;/strong&gt; supports HTML and JSON outputs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Resource Canary&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Separated detection and analysis.&lt;/strong&gt; Make possible to use in automated test and in release versions (monitor only).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pruned Hprof.&lt;/strong&gt; Remove the useless data in hprof and easier to upload.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Detection of duplicate bitmap.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Trace Canary&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;High performance.&lt;/strong&gt; Dynamically modify bytecode at compile time, record function cost and call stack with little performance loss.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Accurate call stack of ui-block.&lt;/strong&gt; Provide informations such as call stack, function cost, execution times to solve the problem of ui-block quickly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Non-hack.&lt;/strong&gt; High compatibility to Android versions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;More features.&lt;/strong&gt; Automatically covers multiple fluency indicators such as ui-block, startup time, activity switching, slow function detection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High-accuracy ANR detector.&lt;/strong&gt; Detect ANRs accurately and give ANR trace file with high compatibility and high stability.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;SQLite Lint&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy-to-use.&lt;/strong&gt; Non-invasive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High applicability.&lt;/strong&gt; Regardless of the amount of data, you can discover SQLite performance problems during development and testing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High standards.&lt;/strong&gt; Detection algorithms based on best practices, make SQLite statements to the highest quality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;May support multi-platform.&lt;/strong&gt; Implementing in C++ makes it possible to support multi-platform.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;IO Canary&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy-to-use.&lt;/strong&gt; Non-invasive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;More feature.&lt;/strong&gt; Including performance of file IO and closeable leak.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatible with Android P.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Battery Canary&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy-to-use.&lt;/strong&gt; Use out of box (unit tests as example).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;More feature.&lt;/strong&gt; Flexible extending with base and utils APIs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Memory Hook&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A native memory leak detection tool for Android.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Non-invasive.&lt;/strong&gt; It is based on PLT-hook(&lt;a href=&#34;https://github.com/iqiyi/xHook&#34;&gt;iqiyi/xHook&lt;/a&gt;), so we do NOT need to recompile the native libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High performance.&lt;/strong&gt; we use WeChat-Backtrace for fast unwinding which supports both aarch64 and armeabi-v7a architectures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Pthread Hook&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Java and native thread leak detection and native thread stack space trimming tool for Android.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Non-invasive.&lt;/strong&gt; It is based on PLT-hook(&lt;a href=&#34;https://github.com/iqiyi/xHook&#34;&gt;iqiyi/xHook&lt;/a&gt;), so we do NOT need to recompile the native libraries.&lt;/li&gt; &#xA; &lt;li&gt;It saves virtual memory overhead by trimming default stack size of native thread in half, which can reduce crashes caused by virtual memory insufficient under 32bit environment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;WVPreAllocHook&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A tool for saving virtual memory overhead caused by WebView preloading when WebView is not actually used. It&#39;s useful for reducing crashes caused by virtual memory insufficient under 32bit environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Non-invasive.&lt;/strong&gt; It is based on PLT-hook(&lt;a href=&#34;https://github.com/iqiyi/xHook&#34;&gt;iqiyi/xHook&lt;/a&gt;), so we do NOT need to recompile the native libraries.&lt;/li&gt; &#xA; &lt;li&gt;WebView still works after using this tool.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;MemGuard&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A tool base on GWP-Asan to detect heap memory issues.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Non-invasive.&lt;/strong&gt; It is based on PLT-hook(&lt;a href=&#34;https://github.com/iqiyi/xHook&#34;&gt;iqiyi/xHook&lt;/a&gt;), so we do NOT need to recompile the native libraries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s able to apply on specific libraries that needs to be detected by RegEx.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It detects heap memory accessing overlap, use-after-free and double free issues.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Backtrace Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A fast native backtrace component designed by Matrix based on quicken unwind tables that are generated and simplified from DWARF and ARM exception handling informations. It is about 15x ~ 30x faster than libunwindstack.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;The JCenter repository will stop service on February 1, 2022. So we uploaded Matrix(since 0.8.0) to the MavenCentral repository.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Configure &lt;code&gt;MATRIX_VERSION&lt;/code&gt; in gradle.properties.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;  MATRIX_VERSION=2.0.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add &lt;code&gt;matrix-gradle-plugin&lt;/code&gt; in your build.gradle:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;  dependencies {&#xA;      classpath (&#34;com.tencent.matrix:matrix-gradle-plugin:${MATRIX_VERSION}&#34;) { changing = true }&#xA;  }&#xA; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Add dependencies to your app/build.gradle.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;  dependencies {&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-android-lib&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-android-commons&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-trace-canary&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-resource-canary-android&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-resource-canary-common&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-io-canary&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-sqlite-lint-android-sdk&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-battery-canary&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-hooks&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-backtrace&#34;, version: MATRIX_VERSION, changing: true&#xA;  }&#xA;  &#xA;  apply plugin: &#39;com.tencent.matrix-plugin&#39;&#xA;  matrix {&#xA;    trace {&#xA;        enable = true&#x9;//if you don&#39;t want to use trace canary, set false&#xA;        baseMethodMapFile = &#34;${project.buildDir}/matrix_output/Debug.methodmap&#34;&#xA;        blackListFile = &#34;${project.projectDir}/matrixTrace/blackMethodList.txt&#34;&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Implement &lt;code&gt;PluginListener&lt;/code&gt; to receive data processed by Matrix.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public class TestPluginListener extends DefaultPluginListener {&#xA;    public static final String TAG = &#34;Matrix.TestPluginListener&#34;;&#xA;    public TestPluginListener(Context context) {&#xA;        super(context);&#xA;        &#xA;    }&#xA;&#xA;    @Override&#xA;    public void onReportIssue(Issue issue) {&#xA;        super.onReportIssue(issue);&#xA;        MatrixLog.e(TAG, issue.toString());&#xA;        &#xA;        //add your code to process data&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Matrix gradle plugin could work with Android Gradle Plugin 3.5.0/4.0.0/4.1.0 currently.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Implement &lt;code&gt;DynamicConfig&lt;/code&gt; to change parameters of Matrix.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public class DynamicConfigImplDemo implements IDynamicConfig {&#xA;    public DynamicConfigImplDemo() {}&#xA;&#xA;    public boolean isFPSEnable() { return true;}&#xA;    public boolean isTraceEnable() { return true; }&#xA;    public boolean isMatrixEnable() { return true; }&#xA;    public boolean isDumpHprof() {  return false;}&#xA;&#xA;    @Override&#xA;    public String get(String key, String defStr) {&#xA;        //hook to change default values&#xA;    }&#xA;&#xA;    @Override&#xA;    public int get(String key, int defInt) {&#xA;      //hook to change default values&#xA;    }&#xA;&#xA;    @Override&#xA;    public long get(String key, long defLong) {&#xA;        //hook to change default values&#xA;    }&#xA;&#xA;    @Override&#xA;    public boolean get(String key, boolean defBool) {&#xA;        //hook to change default values&#xA;    }&#xA;&#xA;    @Override&#xA;    public float get(String key, float defFloat) {&#xA;        //hook to change default values&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Init Matrix in the &lt;code&gt;onCreate&lt;/code&gt; of your application.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  Matrix.Builder builder = new Matrix.Builder(application); // build matrix&#xA;  builder.patchListener(new TestPluginListener(this)); // add general pluginListener&#xA;  DynamicConfigImplDemo dynamicConfig = new DynamicConfigImplDemo(); // dynamic config&#xA;  &#xA;  // init plugin &#xA;  IOCanaryPlugin ioCanaryPlugin = new IOCanaryPlugin(new IOConfig.Builder()&#xA;                    .dynamicConfig(dynamicConfig)&#xA;                    .build());&#xA;  //add to matrix               &#xA;  builder.plugin(ioCanaryPlugin);&#xA;  &#xA;  //init matrix&#xA;  Matrix.init(builder.build());&#xA;&#xA;  // start plugin &#xA;  ioCanaryPlugin.start();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more Matrix configurations, look at the &lt;a href=&#34;https://github.com/Tencent/matrix/tree/dev/samples/sample-android&#34;&gt;sample&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Since Matrix for Android has migrated to AndroidX since v0.9.0. You may need to add &#39;android.useAndroidX=true&#39; flag to gradle.properties&lt;/li&gt; &#xA; &lt;li&gt;You can get more about Matrix output at the wiki &lt;a href=&#34;https://github.com/Tencent/matrix/wiki/Matrix-Android--data-format&#34;&gt;The output of Matrix&lt;/a&gt;;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Battery Canary Usage&lt;/h4&gt; &#xA;&lt;p&gt;Init BatteryCanary as the following codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;BatteryMonitorConfig config = new BatteryMonitorConfig.Builder()&#xA;        .enable(JiffiesMonitorFeature.class)&#xA;        .enableStatPidProc(true)&#xA;        .greyJiffiesTime(30 * 1000L)&#xA;        .setCallback(new BatteryMonitorCallback.BatteryPrinter())&#xA;        .build();&#xA;&#xA;BatteryMonitorPlugin plugin = new BatteryMonitorPlugin(config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For detail usage, please reference showcase tests at &lt;code&gt;com.tencent.matrix.batterycanary.ApisTest&lt;/code&gt; or &lt;code&gt;sample.tencent.matrix.battery.BatteryCanaryInitHelper&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Backtrace Component Usage&lt;/h4&gt; &#xA;&lt;p&gt;How to init backtrace component：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;WeChatBacktrace.instance().configure(getApplicationContext()).commit();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then other components in Matrix could use Quikcen Backtrace to unwind stacktrace. See more configuration comments in &#39;WeChatBacktrace.Configuration&#39;.&lt;/p&gt; &#xA;&lt;h4&gt;APK Checker Usage&lt;/h4&gt; &#xA;&lt;p&gt;APK Checker can run independently in Jar (&lt;a href=&#34;https://repo.maven.apache.org/maven2/com/tencent/matrix/matrix-apk-canary/2.0.8/matrix-apk-canary-2.0.8.jar&#34;&gt;matrix-apk-canary-2.0.8.jar&lt;/a&gt;） mode, usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;java -jar matrix-apk-canary-2.0.8.jar&#xA;Usages: &#xA;    --config CONFIG-FILE-PATH&#xA;or&#xA;    [--input INPUT-DIR-PATH] [--apk APK-FILE-PATH] [--unzip APK-UNZIP-PATH] [--mappingTxt MAPPING-FILE-PATH] [--resMappingTxt RESGUARD-MAPPING-FILE-PATH] [--output OUTPUT-PATH] [--format OUTPUT-FORMAT] [--formatJar OUTPUT-FORMAT-JAR] [--formatConfig OUTPUT-FORMAT-CONFIG (json-array format)] [Options]&#xA;    &#xA;Options:&#xA;-manifest&#xA;     Read package info from the AndroidManifest.xml.&#xA;-fileSize [--min DOWN-LIMIT-SIZE (KB)] [--order ORDER-BY (&#39;asc&#39;|&#39;desc&#39;)] [--suffix FILTER-SUFFIX-LIST (split by &#39;,&#39;)]&#xA;     Show files whose size exceed limit size in order.&#xA;-countMethod [--group GROUP-BY (&#39;class&#39;|&#39;package&#39;)]&#xA;     Count methods in dex file, output results group by class name or package name.&#xA;-checkResProguard&#xA;     Check if the resguard was applied.&#xA;-findNonAlphaPng [--min DOWN-LIMIT-SIZE (KB)]&#xA;     Find out the non-alpha png-format files whose size exceed limit size in desc order.&#xA;-checkMultiLibrary&#xA;     Check if there are more than one library dir in the &#39;lib&#39;.&#xA;-uncompressedFile [--suffix FILTER-SUFFIX-LIST (split by &#39;,&#39;)]&#xA;     Show uncompressed file types.&#xA;-countR&#xA;     Count the R class.&#xA;-duplicatedFile&#xA;     Find out the duplicated resource files in desc order.&#xA;-checkMultiSTL  --toolnm TOOL-NM-PATH&#xA;     Check if there are more than one shared library statically linked the STL.&#xA;-unusedResources --rTxt R-TXT-FILE-PATH [--ignoreResources IGNORE-RESOURCES-LIST (split by &#39;,&#39;)]&#xA;     Find out the unused resources.&#xA;-unusedAssets [--ignoreAssets IGNORE-ASSETS-LIST (split by &#39;,&#39;)]&#xA;     Find out the unused assets file.&#xA;-unstrippedSo  --toolnm TOOL-NM-PATH&#xA;     Find out the unstripped shared library file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://github.com/Tencent/matrix/wiki/Matrix-Android-ApkChecker&#34;&gt;Matrix-APKChecker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;Any problem?&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Learn more from &lt;a href=&#34;https://github.com/Tencent/matrix/tree/master/samples/&#34;&gt;Sample&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/matrix/tree/master/matrix&#34;&gt;Source Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/matrix/wiki&#34;&gt;Wiki&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/Tencent/Matrix/wiki/Matrix-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Contact us for help&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you are interested in contributing, check out the &lt;a href=&#34;https://github.com/Tencent/Matrix/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;, also join our &lt;a href=&#34;https://opensource.tencent.com/contribution&#34;&gt;Tencent OpenSource Plan&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Matrix is under the BSD license. See the &lt;a href=&#34;https://github.com/Tencent/Matrix/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;&lt;a name=&#34;matrix_cn&#34;&gt;Matrix&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tencent/matrix/master/assets/img/readme/header.png&#34; alt=&#34;Matrix-icon&#34;&gt; &lt;a href=&#34;https://github.com/Tencent/matrix/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-BSD3-brightgreen.svg?style=flat&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Tencent/matrix/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/matrix/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Wechat%20Approved-2.0.8-red.svg?sanitize=true&#34; alt=&#34;WeChat Approved&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Matrix&lt;/strong&gt; 是一款微信研发并日常使用的应用性能接入框架，支持iOS, macOS和Android。 Matrix 通过接入各种性能监控方案，对性能监控项的异常数据进行采集和分析，输出相应的问题分析、定位与优化建议，从而帮助开发者开发出更高质量的应用。&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a name=&#34;matrix_ios_cn&#34;&gt;Matrix for iOS/macOS &lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Matrix-iOS 当前工具监控范围包括：崩溃、卡顿和内存，包含以下三款插件：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;WCCrashBlockMonitorPlugin：&lt;/strong&gt; 基于 &lt;a href=&#34;https://github.com/kstenerud/KSCrash&#34;&gt;KSCrash&lt;/a&gt; 框架开发，具有业界领先的卡顿堆栈捕获能力，同时兼备崩溃捕获能力&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;WCMemoryStatPlugin：&lt;/strong&gt; 一款性能极致的内存监控工具，能够全面捕获应用 OOM 时的内存分配以及调用堆栈情况&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;WCFPSMonitorPlugin：&lt;/strong&gt; 一款 FPS 监控工具，当用户滑动界面时，记录主线程调用栈&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;特性&lt;/h2&gt; &#xA;&lt;h4&gt;WCCrashBlockMonitorPlugin&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;接入简单，代码无侵入&lt;/li&gt; &#xA; &lt;li&gt;通过检查 Runloop 运行状态判断应用是否卡顿，同时支持 iOS/macOS 平台&lt;/li&gt; &#xA; &lt;li&gt;增加耗时堆栈提取，卡顿线程快照日志中附加最近时间最耗时的主线程堆栈&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;WCMemoryStatPlugin&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在应用运行期间获取对象存活以及相应的堆栈信息，在检测到应用 OOM 时进行上报&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;h4&gt;安装&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;通过静态库安装&lt;/strong&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;获取 Matrix 源码；&lt;/li&gt; &#xA;   &lt;li&gt;打开命令行，在 &lt;code&gt;matrix/matrix-iOS&lt;/code&gt; 代码目录下执行 &lt;code&gt;make&lt;/code&gt; 进行编译生成静态库；编译完成后，iOS 平台的库在 &lt;code&gt;matrix/matrix-iOS/build_ios&lt;/code&gt; 目录下，macOS 平台的库在 &lt;code&gt;matrix/matrix-iOS/build_macos&lt;/code&gt; 目录下；&lt;/li&gt; &#xA;   &lt;li&gt;工程引入静态库：&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iOS 平台：使用 &lt;code&gt;matrix/matrix-iOS/build_ios&lt;/code&gt; 路径下的 &lt;code&gt;Matrix.framework&lt;/code&gt;，将 &lt;code&gt;Matrix.framework&lt;/code&gt; 以静态库的方式引入工程；&lt;/li&gt; &#xA;   &lt;li&gt;macOS 平台：使用 &lt;code&gt;matrix/matrix-iOS/build_macos&lt;/code&gt; 路径下的 &lt;code&gt;Matrix.framework&lt;/code&gt;，将 &lt;code&gt;Matrix.framework&lt;/code&gt; 以静态库的方式引入工程。&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ol start=&#34;4&#34;&gt; &#xA;   &lt;li&gt;添加头文件 &lt;code&gt;#import &amp;lt;Matrix/Matrix.h&amp;gt;&lt;/code&gt;，就可以接入微信的性能探针工具了！&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;启动监控&lt;/h4&gt; &#xA;&lt;p&gt;在以下地方：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;程序 &lt;code&gt;main&lt;/code&gt; 函数入口；&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AppDelegate&lt;/code&gt; 中的 &lt;code&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt;；&lt;/li&gt; &#xA; &lt;li&gt;或者其他应用启动比较早的时间点。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;添加类似如下代码，启动插件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#import &amp;lt;Matrix/Matrix.h&amp;gt;&#xA;  &#xA;Matrix *matrix = [Matrix sharedInstance];&#xA;MatrixBuilder *curBuilder = [[MatrixBuilder alloc] init];&#xA;curBuilder.pluginListener = self; // pluginListener 回调 plugin 的相关事件&#xA;    &#xA;WCCrashBlockMonitorPlugin *crashBlockPlugin = [[WCCrashBlockMonitorPlugin alloc] init];    &#xA;[curBuilder addPlugin:crashBlockPlugin]; // 添加卡顿和崩溃监控&#xA;    &#xA;WCMemoryStatPlugin *memoryStatPlugin = [[WCMemoryStatPlugin alloc] init];&#xA;[curBuilder addPlugin:memoryStatPlugin]; // 添加内存监控功能&#xA;&#xA;WCFPSMonitorPlugin *fpsMonitorPlugin = [[WCFPSMonitorPlugin alloc] init];&#xA;[curBuilder addPlugin:fpsMonitorPlugin]; // 添加 fps 监控功能&#xA;    &#xA;[matrix addMatrixBuilder:curBuilder];&#xA;    &#xA;[crashBlockPlugin start]; // 开启卡顿和崩溃监控&#xA;[memoryStatPlugin start]; // 开启内存监控&#xA;[fpsMonitorPlugin start]; // 开启 fps 监控&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;接收回调获得监控数据&lt;/h4&gt; &#xA;&lt;p&gt;设置 MatrixBuilder 对象中的 pluginListener，实现 MatrixPluginListenerDelegate。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 设置 delegate&#xA;&#xA;MatrixBuilder *curBuilder = [[MatrixBuilder alloc] init];&#xA;curBuilder.pluginListener = &amp;lt;一个遵循 MatrixPluginListenerDelegate 的对象&amp;gt;; &#xA;&#xA;// MatrixPluginListenerDelegate&#xA;&#xA;- (void)onInit:(id&amp;lt;MatrixPluginProtocol&amp;gt;)plugin;&#xA;- (void)onStart:(id&amp;lt;MatrixPluginProtocol&amp;gt;)plugin;&#xA;- (void)onStop:(id&amp;lt;MatrixPluginProtocol&amp;gt;)plugin;&#xA;- (void)onDestroy:(id&amp;lt;MatrixPluginProtocol&amp;gt;)plugin;&#xA;- (void)onReportIssue:(MatrixIssue *)issue;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;各个添加到 MatrixBuilder 的 plugin 会将对应的事件通过 pluginListener 回调。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;重要：通过 &lt;code&gt;onReportIssue:&lt;/code&gt; 获得 Matrix 处理后的数据，监控数据格式详见：&lt;a href=&#34;https://github.com/Tencent/matrix/wiki/Matrix-for-iOS-macOS-%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E&#34;&gt;Matrix for iOS/macOS 数据格式说明&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;至此，Matrix 已经集成到应用中并且开始收集崩溃、卡顿和爆内存数据，如仍有疑问，请查看示例：&lt;code&gt;samples/sample-iOS/MatrixDemo&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a name=&#34;matrix_android_cn&#34;&gt;Matrix for Android &lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Matrix-android 当前监控范围包括：应用安装包大小，帧率变化，启动耗时，卡顿，慢方法，SQLite 操作优化，文件读写，内存泄漏等等。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;APK Checker: 针对 APK 安装包的分析检测工具，根据一系列设定好的规则，检测 APK 是否存在特定的问题，并输出较为详细的检测结果报告，用于分析排查问题以及版本追踪&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Resource Canary: 基于 WeakReference 的特性和 &lt;a href=&#34;https://github.com/square/haha&#34;&gt;Square Haha&lt;/a&gt; 库开发的 Activity 泄漏和 Bitmap 重复创建检测工具&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Trace Canary: 监控ANR、界面流畅性、启动耗时、页面切换耗时、慢函数及卡顿等问题&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SQLite Lint: 按官方最佳实践自动化检测 SQLite 语句的使用质量&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;IO Canary: 检测文件 IO 问题，包括：文件 IO 监控和 Closeable Leak 监控&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Battery Canary: 监控 App 活跃线程（待机状态 &amp;amp; 前台 Loop 监控）、ASM 调用 (WakeLock/Alarm/Gps/Wifi/Bluetooth 等传感器)、 后台流量 (Wifi/移动网络)等 Battery Historian 统计 App 耗电的数据&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MemGuard&lt;/p&gt; &lt;p&gt;检测堆内存访问越界、使用释放后的内存、重复释放等问题&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;特性&lt;/h2&gt; &#xA;&lt;p&gt;与常规的 APM 工具相比，Matrix 拥有以下特点：&lt;/p&gt; &#xA;&lt;h4&gt;APK Checker&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;具有更好的可用性：JAR 包方式提供，更方便应用到持续集成系统中，从而追踪和对比每个 APK 版本之间的变化&lt;/li&gt; &#xA; &lt;li&gt;更多的检查分析功能：除具备 APKAnalyzer 的功能外，还支持统计 APK 中包含的 R 类、检查是否有多个动态库静态链接了 STL 、搜索 APK 中包含的无用资源，以及支持自定义检查规则等&lt;/li&gt; &#xA; &lt;li&gt;输出的检查结果更加详实：支持可视化的 HTML 格式，便于分析处理的 JSON ，自定义输出等等&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Resource Canary&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;分离了检测和分析部分，便于在不打断自动化测试的前提下持续输出分析后的检测结果&lt;/li&gt; &#xA; &lt;li&gt;对检测部分生成的 Hprof 文件进行了裁剪，移除了大部分无用数据，降低了传输 Hprof 文件的开销&lt;/li&gt; &#xA; &lt;li&gt;增加了重复 Bitmap 对象检测，方便通过减少冗余 Bitmap 数量，降低内存消耗&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Trace Canary&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;编译期动态修改字节码, 高性能记录执行耗时与调用堆栈&lt;/li&gt; &#xA; &lt;li&gt;准确的定位到发生卡顿的函数，提供执行堆栈、执行耗时、执行次数等信息，帮助快速解决卡顿问题&lt;/li&gt; &#xA; &lt;li&gt;自动涵盖卡顿、启动耗时、页面切换、慢函数检测等多个流畅性指标&lt;/li&gt; &#xA; &lt;li&gt;准确监控ANR，并且能够高兼容性和稳定性地保存系统产生的ANR Trace文件&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;SQLite Lint&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;接入简单，代码无侵入&lt;/li&gt; &#xA; &lt;li&gt;数据量无关，开发、测试阶段即可发现SQLite性能隐患&lt;/li&gt; &#xA; &lt;li&gt;检测算法基于最佳实践，高标准把控SQLite质量*&lt;/li&gt; &#xA; &lt;li&gt;底层是 C++ 实现，支持多平台扩展&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;IO Canary&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;接入简单，代码无侵入&lt;/li&gt; &#xA; &lt;li&gt;性能、泄漏全面监控，对 IO 质量心中有数&lt;/li&gt; &#xA; &lt;li&gt;兼容到 Android P&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Battery Canary&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;接入简单，开箱即用&lt;/li&gt; &#xA; &lt;li&gt;预留 Base 类和 Utility 工具以便扩展监控特性&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Memory Hook&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一个检测 Android native 内存泄漏的工具&lt;/li&gt; &#xA; &lt;li&gt;无侵入，基于 PLT-hook(&lt;a href=&#34;https://github.com/iqiyi/xHook&#34;&gt;iqiyi/xHook&lt;/a&gt;)，无需重编 native 库&lt;/li&gt; &#xA; &lt;li&gt;高性能，基于 Wechat-Backtrace 进行快速 unwind 堆栈，支持 aarch64 和 armeabi-v7a 架构&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Pthread Hook&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一个检测 Android Java 和 native 线程泄漏及缩减 native 线程栈空间的工具&lt;/li&gt; &#xA; &lt;li&gt;无侵入，基于 PLT-hook(&lt;a href=&#34;https://github.com/iqiyi/xHook&#34;&gt;iqiyi/xHook&lt;/a&gt;)，无需重编 native 库&lt;/li&gt; &#xA; &lt;li&gt;通过对 native 线程的默认栈大小进行减半降低线程带来的虚拟内存开销，在 32 位环境下可缓解虚拟内存不足导致的崩溃问题&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;WVPreAllocHook&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一个用于安全释放 WebView 预分配内存以在不加载 WebView 时节省虚拟内存的工具，在 32 位环境下可缓解虚拟内存不足导致的崩溃问题&lt;/li&gt; &#xA; &lt;li&gt;无侵入，基于 PLT-hook(&lt;a href=&#34;https://github.com/iqiyi/xHook&#34;&gt;iqiyi/xHook&lt;/a&gt;)，无需重编 native 库&lt;/li&gt; &#xA; &lt;li&gt;使用该工具后 WebView 仍可正常工作&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;MemGuard&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一个基于 GWP-Asan 修改的堆内存问题检测工具&lt;/li&gt; &#xA; &lt;li&gt;无侵入，基于 PLT-hook(&lt;a href=&#34;https://github.com/iqiyi/xHook&#34;&gt;iqiyi/xHook&lt;/a&gt;)，无需重编 native 库&lt;/li&gt; &#xA; &lt;li&gt;可根据正则表达式指定被检测的目标库&lt;/li&gt; &#xA; &lt;li&gt;可检测堆内存访问越界、使用释放后的内存和双重释放等问题&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Backtrace Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基于 DWARF 以及 ARM 异常处理数据进行简化并生成全新的 quicken unwind tables 数据，用于实现可快速回溯 native 调用栈的 backtrace 组件。回溯速度约是 libunwindstack 的 15x ~ 30x 左右。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;由于 JCenter 服务将于 2022 年 2 月 1 日下线，我们已将 Matrix 新版本（&amp;gt;= 0.8.0) maven repo 发布至 MavenCentral。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在你项目根目录下的 gradle.properties 中配置要依赖的 Matrix 版本号，如：&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;  MATRIX_VERSION=2.0.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;在你项目根目录下的 build.gradle 文件添加 Matrix 依赖，如：&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;  dependencies {&#xA;      classpath (&#34;com.tencent.matrix:matrix-gradle-plugin:${MATRIX_VERSION}&#34;) { changing = true }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;接着，在 app/build.gradle 文件中添加 Matrix 各模块的依赖，如：&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;  dependencies {&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-android-lib&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-android-commons&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-trace-canary&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-resource-canary-android&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-resource-canary-common&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-io-canary&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-sqlite-lint-android-sdk&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-battery-canary&#34;, version: MATRIX_VERSION, changing: true&#xA;    implementation group: &#34;com.tencent.matrix&#34;, name: &#34;matrix-hooks&#34;, version: MATRIX_VERSION, changing: true&#xA;  }&#xA;&#xA;  apply plugin: &#39;com.tencent.matrix-plugin&#39;&#xA;  matrix {&#xA;    trace {&#xA;        enable = true&#x9;//if you don&#39;t want to use trace canary, set false&#xA;        baseMethodMapFile = &#34;${project.buildDir}/matrix_output/Debug.methodmap&#34;&#xA;        blackListFile = &#34;${project.projectDir}/matrixTrace/blackMethodList.txt&#34;&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;目前 Matrix gradle plugin 支持 Android Gradle Plugin 3.5.0/4.0.0/4.1.0。&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;实现 PluginListener，接收 Matrix 处理后的数据, 如：&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public class TestPluginListener extends DefaultPluginListener {&#xA;    public static final String TAG = &#34;Matrix.TestPluginListener&#34;;&#xA;    public TestPluginListener(Context context) {&#xA;        super(context);&#xA;        &#xA;    }&#xA;&#xA;    @Override&#xA;    public void onReportIssue(Issue issue) {&#xA;        super.onReportIssue(issue);&#xA;        MatrixLog.e(TAG, issue.toString());&#xA;        &#xA;        //add your code to process data&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;实现动态配置接口， 可修改 Matrix 内部参数. 在 sample-android 中 我们有个简单的动态接口实例&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/matrix/master/samples/sample-android/app/src/main/java/sample/tencent/matrix/config/DynamicConfigImplDemo.java&#34;&gt;DynamicConfigImplDemo.java&lt;/a&gt;, 其中参数对应的 key 位于文件 &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/matrix/master/samples/sample-android/app/src/main/java/sample/tencent/matrix/config/MatrixEnum.java&#34;&gt;MatrixEnum&lt;/a&gt;中， 摘抄部分示例如下：&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public class DynamicConfigImplDemo implements IDynamicConfig {&#xA;    public DynamicConfigImplDemo() {}&#xA;&#xA;    public boolean isFPSEnable() { return true;}&#xA;    public boolean isTraceEnable() { return true; }&#xA;    public boolean isMatrixEnable() { return true; }&#xA;    public boolean isDumpHprof() {  return false;}&#xA;&#xA;    @Override&#xA;    public String get(String key, String defStr) {&#xA;        //hook to change default values&#xA;    }&#xA;&#xA;    @Override&#xA;    public int get(String key, int defInt) {&#xA;         //hook to change default values&#xA;    }&#xA;&#xA;    @Override&#xA;    public long get(String key, long defLong) {&#xA;        //hook to change default values&#xA;    }&#xA;&#xA;    @Override&#xA;    public boolean get(String key, boolean defBool) {&#xA;        //hook to change default values&#xA;    }&#xA;&#xA;    @Override&#xA;    public float get(String key, float defFloat) {&#xA;        //hook to change default values&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;选择程序启动的位置对 Matrix 进行初始化，如在 Application 的继承类中， Init 核心逻辑如下：&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  Matrix.Builder builder = new Matrix.Builder(application); // build matrix&#xA;  builder.pluginListener(new TestPluginListener(this)); // add general pluginListener&#xA;  DynamicConfigImplDemo dynamicConfig = new DynamicConfigImplDemo(); // dynamic config&#xA;  &#xA;  // init plugin &#xA;  IOCanaryPlugin ioCanaryPlugin = new IOCanaryPlugin(new IOConfig.Builder()&#xA;                    .dynamicConfig(dynamicConfig)&#xA;                    .build());&#xA;  //add to matrix               &#xA;  builder.plugin(ioCanaryPlugin);&#xA;  &#xA;  //init matrix&#xA;  Matrix.init(builder.build());&#xA;&#xA;  // start plugin &#xA;  ioCanaryPlugin.start();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;至此，Matrix就已成功集成到你的项目中，并且开始收集和分析性能相关异常数据，如仍有疑问，请查看 &lt;a href=&#34;https://github.com/Tencent/Matrix/tree/dev/samples/sample-android/&#34;&gt;示例&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;PS：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;从 v0.9.0 开始，Matrix for Android 迁移到了 AndroidX. 你可能需要添加 &#39;android.useAndroidX=true&#39; 标志到 gradle.properties 文件里。&lt;/li&gt; &#xA; &lt;li&gt;Matrix 分析后的输出字段的含义请查看 &lt;a href=&#34;https://github.com/Tencent/matrix/wiki/Matrix-Android--data-format&#34;&gt;Matrix 输出内容的含义解析&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Battery Canary Usage&lt;/h4&gt; &#xA;&lt;p&gt;相关初始化代码如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;BatteryMonitorConfig config = new BatteryMonitorConfig.Builder()&#xA;        .enable(JiffiesMonitorFeature.class)&#xA;        .enableStatPidProc(true)&#xA;        .greyJiffiesTime(30 * 1000L)&#xA;        .setCallback(new BatteryMonitorCallback.BatteryPrinter())&#xA;        .build();&#xA;&#xA;BatteryMonitorPlugin plugin = new BatteryMonitorPlugin(config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;具体使用方式，请参考单元测试里相关用例的代码： &lt;code&gt;com.tencent.matrix.batterycanary.ApisTest&lt;/code&gt; 或 &lt;code&gt;sample.tencent.matrix.battery.BatteryCanaryInitHelper&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Backtrace Component Usage&lt;/h4&gt; &#xA;&lt;p&gt;如何初始化 backtrace 组件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;WeChatBacktrace.instance().configure(getApplicationContext()).commit();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;初始化后其他 Matrix 组件就可以使用 Quicken Backtrace 进行回溯。更多参数的配置请查看 WeChatBacktrace.Configuration 的接口注释。&lt;/p&gt; &#xA;&lt;h4&gt;APK Checker&lt;/h4&gt; &#xA;&lt;p&gt;APK Check 以独立的 jar 包提供 (&lt;a href=&#34;https://repo.maven.apache.org/maven2/com/tencent/matrix/matrix-apk-canary/2.0.8/matrix-apk-canary-2.0.8.jar&#34;&gt;matrix-apk-canary-2.0.8.jar&lt;/a&gt;），你可以运行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;java -jar matrix-apk-canary-2.0.8.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;查看 Usages 来使用它。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usages: &#xA;    --config CONFIG-FILE-PATH&#xA;or&#xA;    [--input INPUT-DIR-PATH] [--apk APK-FILE-PATH] [--unzip APK-UNZIP-PATH] [--mappingTxt MAPPING-FILE-PATH] [--resMappingTxt RESGUARD-MAPPING-FILE-PATH] [--output OUTPUT-PATH] [--format OUTPUT-FORMAT] [--formatJar OUTPUT-FORMAT-JAR] [--formatConfig OUTPUT-FORMAT-CONFIG (json-array format)] [Options]&#xA;    &#xA;Options:&#xA;-manifest&#xA;     Read package info from the AndroidManifest.xml.&#xA;-fileSize [--min DOWN-LIMIT-SIZE (KB)] [--order ORDER-BY (&#39;asc&#39;|&#39;desc&#39;)] [--suffix FILTER-SUFFIX-LIST (split by &#39;,&#39;)]&#xA;     Show files whose size exceed limit size in order.&#xA;-countMethod [--group GROUP-BY (&#39;class&#39;|&#39;package&#39;)]&#xA;     Count methods in dex file, output results group by class name or package name.&#xA;-checkResProguard&#xA;     Check if the resguard was applied.&#xA;-findNonAlphaPng [--min DOWN-LIMIT-SIZE (KB)]&#xA;     Find out the non-alpha png-format files whose size exceed limit size in desc order.&#xA;-checkMultiLibrary&#xA;     Check if there are more than one library dir in the &#39;lib&#39;.&#xA;-uncompressedFile [--suffix FILTER-SUFFIX-LIST (split by &#39;,&#39;)]&#xA;     Show uncompressed file types.&#xA;-countR&#xA;     Count the R class.&#xA;-duplicatedFile&#xA;     Find out the duplicated resource files in desc order.&#xA;-checkMultiSTL  --toolnm TOOL-NM-PATH&#xA;     Check if there are more than one shared library statically linked the STL.&#xA;-unusedResources --rTxt R-TXT-FILE-PATH [--ignoreResources IGNORE-RESOURCES-LIST (split by &#39;,&#39;)]&#xA;     Find out the unused resources.&#xA;-unusedAssets [--ignoreAssets IGNORE-ASSETS-LIST (split by &#39;,&#39;)]&#xA;     Find out the unused assets file.&#xA;-unstrippedSo  --toolnm TOOL-NM-PATH&#xA;     Find out the unstripped shared library file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;由于篇幅影响，此次不再赘述，我们在 &lt;a href=&#34;https://github.com/Tencent/matrix/wiki/Matrix-Android-ApkChecker&#34;&gt;Matrix-APKChecker&lt;/a&gt; 中进行了详细说明。&lt;/p&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;还有其他问题？&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;查看&lt;a href=&#34;https://github.com/Tencent/matrix/tree/master/samples&#34;&gt;示例&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;阅读&lt;a href=&#34;https://github.com/Tencent/matrix/tree/master/matrix&#34;&gt;源码&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;阅读 &lt;a href=&#34;https://github.com/Tencent/matrix/wiki&#34;&gt;Wiki&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/Tencent/Matrix/wiki/Matrix-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;FAQ&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;联系我们。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;参与贡献&lt;/h1&gt; &#xA;&lt;p&gt;关于 Matrix 分支管理、issue 以及 pr 规范，请阅读 &lt;a href=&#34;https://github.com/Tencent/Matrix/raw/master/CONTRIBUTING.md&#34;&gt;Matrix Contributing Guide&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.tencent.com/contribution&#34;&gt;腾讯开源激励计划&lt;/a&gt; 鼓励开发者的参与和贡献，期待你的加入。&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Matrix is under the BSD license. See the &lt;a href=&#34;https://github.com/Tencent/Matrix/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details&lt;/p&gt; &#xA;&lt;h1&gt;个人信息保护规则&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://support.weixin.qq.com/cgi-bin/mmsupportacctnodeweb-bin/pages/yTezupX6yF028Mpf&#34;&gt;Matrix SDK个人信息保护规则&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>