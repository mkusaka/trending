<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-10T01:32:18Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>facebook/redex</title>
    <updated>2023-07-10T01:32:18Z</updated>
    <id>tag:github.com,2023-07-10:/facebook/redex</id>
    <link href="https://github.com/facebook/redex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A bytecode optimizer for Android apps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ReDex: An Android Bytecode Optimizer&lt;/h1&gt; &#xA;&lt;p&gt;ReDex is an Android bytecode (dex) optimizer originally developed at Facebook. It provides a framework for reading, writing, and analyzing .dex files, and a set of optimization passes that use this framework to improve the bytecode. An APK optimized by ReDex should be smaller and faster than its source.&lt;/p&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://fbredex.com&#34;&gt;https://fbredex.com&lt;/a&gt; for full documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/facebook/redex/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; to understand how to contribute to this project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The ReDex repository is available under the &lt;a href=&#34;https://github.com/facebook/redex/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebook/igl</title>
    <updated>2023-07-10T01:32:18Z</updated>
    <id>tag:github.com,2023-07-10:/facebook/igl</id>
    <link href="https://github.com/facebook/igl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Intermediate Graphics Library (IGL) is a cross-platform library that commands the GPU. It provides a single low-level cross-platform interface on top of various graphics APIs (e.g. OpenGL, Metal and Vulkan).&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/facebook/igl/blob/main/.github/igl-full-color-white.svg?raw=true&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://github.com/facebook/igl/blob/main/.github/igl-full-color-black.svg?raw=true&#34;&gt; &#xA;  &lt;img alt=&#34;IGL Logo&#34; src=&#34;https://raw.githubusercontent.com/facebook/igl/main/.github/igl-full-color-black.svg?sanitize=true&#34; width=&#34;500&#34;&gt; &#xA; &lt;/picture&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/facebook/igl/actions&#34;&gt;&lt;img src=&#34;https://github.com/facebook/igl/actions/workflows/c-cpp.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Intermediate Graphics Library (IGL) is a cross-platform library that commands the GPU. It encapsulates common GPU functionality with a low-level cross-platform interface. IGL is designed to support multiple backends implemented on top of various graphics APIs (e.g. OpenGL, Metal and Vulkan) with a common interface.&lt;/p&gt; &#xA;&lt;p&gt;There are a lot of good options for abstracting GPU API&#39;s; each making different trade-offs. We designed IGL around the following priorities:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;Low-level, forward-looking API.&lt;/em&gt; IGL embraces modern abstractions (command buffers, state containers, bindless, etc) and is designed to give more control than OpenGL&#39;s state machine API. As a result, IGL can have leaner backends for modern API&#39;s (e.g. Metal, Vulkan).&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Minimal overhead for C++.&lt;/em&gt; IGL supports new or existing native rendering code without overhead of language interop or the need for other language runtimes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Reach + scale in production.&lt;/em&gt; IGL has been globally battle-tested for broad device reliability (especially the long-tail of Android devices as well as Quest 2/3/Pro compatibility for OpenGL/Vulkan) &lt;em&gt;and&lt;/em&gt; performance-tuned on our apps.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Supported rendering backends&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Metal 2+&lt;/li&gt; &#xA; &lt;li&gt;OpenGL 2.x (requires &lt;a href=&#34;https://registry.khronos.org/OpenGL/extensions/ARB/ARB_framebuffer_object.txt&#34;&gt;GL_ARB_framebuffer_object&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;OpenGL 3.1+&lt;/li&gt; &#xA; &lt;li&gt;OpenGL ES 2.0+&lt;/li&gt; &#xA; &lt;li&gt;Vulkan 1.1 (requires &lt;a href=&#34;https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_buffer_device_address.html&#34;&gt;VK_KHR_buffer_device_address&lt;/a&gt; and &lt;a href=&#34;https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_descriptor_indexing.html&#34;&gt;VK_EXT_descriptor_indexing&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;WebGL 2.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;macOS&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;WebAssembly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API Support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;th&gt;Linux&lt;/th&gt; &#xA;   &lt;th&gt;macOS&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vulkan 1.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt; (MoltenVK)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✖&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt; (Quest 2/3/Pro)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenGL ES 2.0 - 3.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt; (Angle)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt; (Angle)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenGL ES 3.1 - 3.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt; (Angle)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt; (Angle)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✖&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✖&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenGL 3.1 - 4.6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✖&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✖&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✖&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metal 2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✖&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✖&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✖&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Before building, run the deployment scripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 deploy_content.py&#xA;python3 deploy_deps.py&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These scripts download external third-party dependencies. Please check [Dependencies] for the full list.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd build&#xA;cmake .. -G &#34;Visual Studio 17 2022&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install clang xorg-dev libxinerama-dev libxcursor-dev libgles2-mesa-dev libegl1-mesa-dev libglfw3-dev libglew-dev libstdc++-12-dev&#xA;cd build&#xA;cmake .. -G &#34;Unix Makefiles&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd build&#xA;cmake .. -G &#34;Xcode&#34; -DIGL_WITH_VULKAN=OFF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd build&#xA;cmake .. -G Xcode -DCMAKE_TOOLCHAIN_FILE=../third-party/deps/src/ios-cmake/ios.toolchain.cmake -DPLATFORM=SIMULATOR64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Gradle project is located within the &lt;a href=&#34;https://raw.githubusercontent.com/facebook/igl/main/build/android/&#34;&gt;build/android&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/igl/main/.github/screenshot01.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/igl/main/.github/screenshot02.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;IGL is released under the MIT license, see &lt;a href=&#34;https://raw.githubusercontent.com/facebook/igl/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for the full text as well as third-party library acknowledgements. SparkSL Compiler is released under the SparkSL Compiler License, see LICENSE.md for full text.&lt;/p&gt;</summary>
  </entry>
</feed>