<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-19T01:31:57Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>id-Software/DOOM</title>
    <updated>2024-01-19T01:31:57Z</updated>
    <id>tag:github.com,2024-01-19:/id-Software/DOOM</id>
    <link href="https://github.com/id-Software/DOOM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DOOM Open Source Release&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Here it is, at long last. The DOOM source code is released for your non-profit use. You still need real DOOM data to work with this code. If you don&#39;t actually own a real copy of one of the DOOMs, you should still be able to find them at software stores.&lt;/p&gt; &#xA;&lt;p&gt;Many thanks to Bernd Kreimeier for taking the time to clean up the project and make sure that it actually works. Projects tends to rot if you leave it alone for a few years, and it takes effort for someone to deal with it again.&lt;/p&gt; &#xA;&lt;p&gt;The bad news: this code only compiles and runs on linux. We couldn&#39;t release the dos code because of a copyrighted sound library we used (wow, was that a mistake -- I write my own sound code now), and I honestly don&#39;t even know what happened to the port that microsoft did to windows.&lt;/p&gt; &#xA;&lt;p&gt;Still, the code is quite portable, and it should be straightforward to bring it up on just about any platform.&lt;/p&gt; &#xA;&lt;p&gt;I wrote this code a long, long time ago, and there are plenty of things that seem downright silly in retrospect (using polar coordinates for clipping comes to mind), but overall it should still be a usefull base to experiment and build on.&lt;/p&gt; &#xA;&lt;p&gt;The basic rendering concept -- horizontal and vertical lines of constant Z with fixed light shading per band was dead-on, but the implementation could be improved dramatically from the original code if it were revisited. The way the rendering proceded from walls to floors to sprites could be collapsed into a single front-to-back walk of the bsp tree to collect information, then draw all the contents of a subsector on the way back up the tree. It requires treating floors and ceilings as polygons, rather than just the gaps between walls, and it requires clipping sprite billboards into subsector fragments, but it would be The Right Thing.&lt;/p&gt; &#xA;&lt;p&gt;The movement and line of sight checking against the lines is one of the bigger misses that I look back on. It is messy code that had some failure cases, and there was a vastly simpler (and faster) solution sitting in front of my face. I used the BSP tree for rendering things, but I didn&#39;t realize at the time that it could also be used for environment testing. Replacing the line of sight test with a bsp line clip would be pretty easy. Sweeping volumes for movement gets a bit tougher, and touches on many of the challenges faced in quake / quake2 with edge bevels on polyhedrons.&lt;/p&gt; &#xA;&lt;p&gt;Some project ideas:&lt;/p&gt; &#xA;&lt;p&gt;Port it to your favorite operating system.&lt;/p&gt; &#xA;&lt;p&gt;Add some rendering features -- transparency, look up / down, slopes, etc.&lt;/p&gt; &#xA;&lt;p&gt;Add some game features -- weapons, jumping, ducking, flying, etc.&lt;/p&gt; &#xA;&lt;p&gt;Create a packet server based internet game.&lt;/p&gt; &#xA;&lt;p&gt;Create a client / server based internet game.&lt;/p&gt; &#xA;&lt;p&gt;Do a 3D accelerated version. On modern hardware (fast pentium + 3DFX) you probably wouldn&#39;t even need to be clever -- you could just draw the entire level and get reasonable speed. With a touch of effort, it should easily lock at 60 fps (well, there are some issues with DOOM&#39;s 35 hz timebase...). The biggest issues would probably be the non-power of two texture sizes and the walls composed of multiple textures.&lt;/p&gt; &#xA;&lt;p&gt;I don&#39;t have a real good guess at how many people are going to be playing with this, but if significant projects are undertaken, it would be cool to see a level of community cooperation. I know that most early projects are going to be rough hacks done in isolation, but I would be very pleased to see a coordinated &#39;net release of an improved, backwards compatable version of DOOM on multiple platforms next year.&lt;/p&gt; &#xA;&lt;p&gt;Have fun.&lt;/p&gt; &#xA;&lt;p&gt;John Carmack 12-23-97&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) ZeniMax Media Inc. Licensed under the GNU General Public License 2.0.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JakubMelka/PDF4QT</title>
    <updated>2024-01-19T01:31:57Z</updated>
    <id>tag:github.com,2024-01-19:/JakubMelka/PDF4QT</id>
    <link href="https://github.com/JakubMelka/PDF4QT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source PDF editor.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/JakubMelka/PDF4QT/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/JakubMelka/PDF4QT/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PDF4QT&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;(c) Jakub Melka 2018-2023&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;mailto:Mgr.Jakub.Melka@gmail.com&#34;&gt;Mgr.Jakub.Melka@gmail.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://jakubmelka.github.io/&#34;&gt;https://jakubmelka.github.io/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This software is consisting of PDF rendering library, and several applications, such as advanced document viewer, command line tool, and document page manipulator application. Software is implementing PDF functionality based on PDF Reference 2.0. It is written and maintained by Jakub Melka.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Software works on Microsoft Windows / Linux.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Software is provided without any warranty of any kind.&lt;/p&gt; &#xA;&lt;p&gt;Should you find this software beneficial, your support would be greatly appreciated &lt;a href=&#34;https://github.com/sponsors/JakubMelka&#34;&gt;&lt;span&gt;❤️&lt;/span&gt; Sponsor&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;1. ACKNOWLEDGEMENTS&lt;/h2&gt; &#xA;&lt;p&gt;This software is based in part on the work of the Independent JPEG Group.&lt;/p&gt; &#xA;&lt;p&gt;Portions of this software are copyright © 2019 The FreeType Project (&lt;a href=&#34;http://www.freetype.org&#34;&gt;www.freetype.org&lt;/a&gt;). All rights reserved.&lt;/p&gt; &#xA;&lt;h2&gt;2. LEGAL ISSUES&lt;/h2&gt; &#xA;&lt;p&gt;Both library and viewer uses more benevolent LGPL license, so it is more usable in commercial software, than GPL code only. Please see attached file - LICENSE.txt to see details. This software also uses several third party software, and user of this software must also respect licenses of third party libraries.&lt;/p&gt; &#xA;&lt;h2&gt;3. FEATURES&lt;/h2&gt; &#xA;&lt;p&gt;Software have following features (the list is not complete):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; multithreading support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; hardware accelerated rendering&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; encryption&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; color management&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; optional content handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; text layout analysis&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; signature validation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; annotations&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; form filling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; text to speech capability&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; editation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; file attachments&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; optimalization (compressing documents)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; command line tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; audio book conversion&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; internal structure inspector&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; compare documents&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; static XFA support (readonly, simple XFA only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; electronically/digitally sign documents&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; public key security encryption&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 3D PDF support &lt;em&gt;(planned in year 2024)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; create fillable forms &lt;em&gt;(planned in year 2024)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; watermarks / headers / footers &lt;em&gt;(planned in year 2024)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; presentation application &lt;em&gt;(planned in year 2024)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4. THIRD PARTY LIBRARIES&lt;/h2&gt; &#xA;&lt;p&gt;Several third-party libraries are used.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;libjpeg, see &lt;a href=&#34;https://www.ijg.org/&#34;&gt;https://www.ijg.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;FreeType, see &lt;a href=&#34;https://www.freetype.org/index.html&#34;&gt;https://www.freetype.org/index.html&lt;/a&gt;, FTL license used&lt;/li&gt; &#xA; &lt;li&gt;OpenJPEG, implementing Jpeg2000, see &lt;a href=&#34;https://www.openjpeg.org/&#34;&gt;https://www.openjpeg.org/&lt;/a&gt;, 2-clause MIT license&lt;/li&gt; &#xA; &lt;li&gt;Qt, &lt;a href=&#34;https://www.qt.io/&#34;&gt;https://www.qt.io/&lt;/a&gt;, LGPL license used&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL, &lt;a href=&#34;https://www.openssl.org/&#34;&gt;https://www.openssl.org/&lt;/a&gt;, Apache 2.0 license&lt;/li&gt; &#xA; &lt;li&gt;LittleCMS, &lt;a href=&#34;http://www.littlecms.com/&#34;&gt;http://www.littlecms.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;zlib, &lt;a href=&#34;https://zlib.net/&#34;&gt;https://zlib.net/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;5. CONTRIBUTIONS&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to this project, it is required, that you (contributor) fill and digitally sign document &lt;a href=&#34;https://raw.githubusercontent.com/JakubMelka/PDF4QT/master/CLA/Contributor_License_Agreement.pdf&#34;&gt;Contributor License Agreement&lt;/a&gt;, because I want to have a freedom to do whatever I want with my library, without obligation to someone else. But I would strongly prefer, if you want to contribute, to contribute in a form of testing, consultation, giving advices etc. I would like to write this library entirely by myself.&lt;/p&gt; &#xA;&lt;h2&gt;6. INSTALLING&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/JakubMelka/PDF4QT/releases&#34;&gt;Release page&lt;/a&gt; lists binaries for Windows, both with and without an installer.&lt;/p&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://aur.archlinux.org/packages/pdf4qt-git&#34;&gt;pdf4qt-git&lt;/a&gt; package is available in the AUR.&lt;/p&gt; &#xA;&lt;h2&gt;7. COMPILING&lt;/h2&gt; &#xA;&lt;p&gt;This software can be compiled on both Windows and Linux. A compiler supporting the C++20 standard is needed.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, you can use Visual Studio 2022 or MinGW.&lt;/p&gt; &#xA;&lt;p&gt;On Linux, a GCC version &amp;gt;= 8 should work, altough we tested it with GCC 11.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling from sources&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://vcpkg.io/en/getting-started.html&#34;&gt;vcpkg&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt; git clone https://github.com/Microsoft/vcpkg.git&#xA; ./vcpkg/bootstrap-vcpkg.sh -disableMetrics&#xA; VCPKG_ROOT=$(pwd)/vcpkg&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Check that vcpkg path is correct: &lt;code&gt;$VCPKG_ROOT/vcpkg --version&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build PDF4QT&lt;/p&gt; &lt;p&gt;2.1 Clone repo&lt;/p&gt; &lt;pre&gt;&lt;code&gt; git clone https://github.com/JakubMelka/PDF4QT&#xA; cd PDF4QT&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;2.2 Configure&lt;/p&gt; &lt;pre&gt;&lt;code&gt; cmake -B build -S . -DPDF4QT_INSTALL_QT_DEPENDENCIES=0 -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=&#39;/&#39; -DCMAKE_BUILD_TYPE=Release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For a debug build, append &lt;code&gt;-DCMAKE_BUILD_TYPE=Debug&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;It is recommended to set the VCPKG_OVERLAY_PORTS variable to &#39;PDF4QT/vcpkg/overlays&#39; to prevent crashes due to the incompatible LIBPNG library on some Linux systems.&lt;/p&gt; &lt;p&gt;2.3 Build&lt;/p&gt; &lt;pre&gt;&lt;code&gt; cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Use the &lt;a href=&#34;https://cmake.org/cmake/help/latest/manual/cmake.1.html#cmdoption-cmake-build-j&#34;&gt;&lt;code&gt;-j&lt;/code&gt; switch&lt;/a&gt; to build multiple files in parallel.&lt;/p&gt; &lt;p&gt;2.4 Install&lt;/p&gt; &lt;pre&gt;&lt;code&gt; sudo cmake --install build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To uninstall, run &lt;code&gt;sudo xargs rm &amp;lt; ./build/install_manifest.txt&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Using Qt Creator (both Windows/Linux)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download Qt 6.6 or higher, and VCPKG package manager (&lt;a href=&#34;https://vcpkg.io/en/index.html&#34;&gt;https://vcpkg.io/en/index.html&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open Qt Creator and configure the project&lt;/li&gt; &#xA; &lt;li&gt;Build&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;CMAKE Compilation Options&lt;/h3&gt; &#xA;&lt;p&gt;Several important compilation options are available and should be set before building. On Windows, CMake can prepare a Wix project to create a *.msi installer package.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PDF4QT_INSTALL_MSVC_REDISTRIBUTABLE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;Includes MSVC redistributable in installation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PDF4QT_INSTALL_PREPARE_WIX_INSTALLER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;Prepare .msi installator using Wix installer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PDF4QT_INSTALL_DEPENDENCIES&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Any&lt;/td&gt; &#xA;   &lt;td&gt;Install dependent libraries into installation directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PDF4QT_INSTALL_QT_DEPENDENCIES&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Any&lt;/td&gt; &#xA;   &lt;td&gt;Install Qt dependent libraries into installation directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;VCPKG_OVERLAY_PORTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;Set it to prevent crashes with incompatible libpng library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Following important variables should be set or checked before any attempt to compile this project:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PDF4QT_QT_ROOT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Any&lt;/td&gt; &#xA;   &lt;td&gt;Qt installation directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;QT_CREATOR_SKIP_VCPKG_SETUP&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Any&lt;/td&gt; &#xA;   &lt;td&gt;Enable or disable automatic vcpkg setup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CMAKE_PROJECT_INCLUDE_BEFORE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Any&lt;/td&gt; &#xA;   &lt;td&gt;Should be set to package manager auto setup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CMAKE_TOOLCHAIN_FILE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Any&lt;/td&gt; &#xA;   &lt;td&gt;Should be set to toolchain&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CMAKE_BUILD_TYPE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Any&lt;/td&gt; &#xA;   &lt;td&gt;Can be Release (default) or Debug&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Sample setup on Windows&lt;/h4&gt; &#xA;&lt;p&gt;Following set of variables gives sample setup for MS Windows. It is minimal initial configuration to be able to built Debug build on MS Windows.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CMAKE_BUILD_TYPE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Debug&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CMAKE_CXX_COMPILER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;%{Compiler:Executable:Cxx}&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CMAKE_C_COMPILER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;%{Compiler:Executable:C}&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CMAKE_GENERATOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ninja&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CMAKE_PREFIX_PATH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;%{Qt:QT_INSTALL_PREFIX}&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CMAKE_PROJECT_INCLUDE_BEFORE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;%{IDE:ResourcePath}/package-manager/auto-setup.cmake&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CMAKE_TOOLCHAIN_FILE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;%{Qt:QT_INSTALL_PREFIX}/lib/cmake/Qt6/qt.toolchain.cmake&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PDF4QT_QT_ROOT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;C:/Programming/Qt/6.4.0/msvc2019_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;QT_QMAKE_EXECUTABLE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;%{Qt:qmakeExecutable}&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Tested Compilers - Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2022 (Microsoft Visual C++ Compiler 17.1)&lt;/li&gt; &#xA; &lt;li&gt;MinGW 11.2.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tested Compilers - Linux&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GCC 13.1.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;8. DISCLAIMER&lt;/h2&gt; &#xA;&lt;p&gt;I wrote this project in my free time. I hope you will find it useful!&lt;/p&gt;</summary>
  </entry>
</feed>