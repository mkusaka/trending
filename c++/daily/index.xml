<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-15T01:23:51Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Mq-b/Loser-HomeWork</title>
    <updated>2023-08-15T01:23:51Z</updated>
    <id>tag:github.com,2023-08-15:/Mq-b/Loser-HomeWork</id>
    <link href="https://github.com/Mq-b/Loser-HomeWork" rel="alternate"></link>
    <summary type="html">&lt;p&gt;卢瑟们的作业，展示以及答案讲解&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.bilibili.com/video/BV1Zj411r7eP/?spm_id_from=333.999.0.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B-bilibili-cyan&#34;&gt;&lt;/a&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://qm.qq.com/cgi-bin/qm/qr?k=X-ouAYdQzPDQGUR7R-vECHDpXb7Uihdm&amp;amp;jump_from=webapi&amp;amp;authKey=5XYoNIfb913mo5Ff3P1nOhVy1pJgCM4Q6wAykQ+rpiDQSRu+tCXMN6yGOkjxIIrl&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/QQ%E7%BE%A4-%E5%8D%A2%E7%91%9F%E5%B8%9D%E5%9B%BD-blue&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://www.zhihu.com/people/o4ze4r&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E7%9F%A5%E4%B9%8E-mq%E7%99%BD-yello&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://www.youtube.com/channel/UCey35Do4RGewqr-6EiaCJrg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/video-YouTube-red&#34;&gt;&lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://visualstudio.microsoft.com/zh-hans/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/code-Modern%20C++-blue&#34;&gt;&lt;/a&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/std-C++20-yello&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/std-C++23-yello&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/compiler-GCC13-white&#34;&gt; &#xA; &lt;a href=&#34;https://visualstudio.microsoft.com/zh-hans/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/compiler-Microsoft Visual Studio Community 2022 (64 位) -white&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://zh.cppreference.com/w/cpp&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/image/cpp.svg?sanitize=true&#34; height=&#34;64&#34; width=&#34;64&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h2&gt;目录&lt;/h2&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#loser-homework&#34;&gt;Loser-HomeWork&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E5%89%8D%E8%A8%80&#34;&gt;前言&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#01%E5%AE%9E%E7%8E%B0%E7%AE%A1%E9%81%93%E8%BF%90%E7%AE%97%E7%AC%A6&#34;&gt;&lt;code&gt;01&lt;/code&gt;实现管道运算符&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C&#34;&gt;运行结果&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E7%BE%A4%E5%8F%8B%E6%8F%90%E4%BA%A4&#34;&gt;群友提交&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E6%A0%87%E5%87%86%E7%AD%94%E6%A1%88&#34;&gt;标准答案&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#02%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E9%9D%A2%E9%87%8F_f&#34;&gt;&lt;code&gt;02&lt;/code&gt;实现自定义字面量&lt;code&gt;_f&lt;/code&gt;&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-1&#34;&gt;运行结果:&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E7%BE%A4%E5%8F%8B%E6%8F%90%E4%BA%A4-1&#34;&gt;群友提交&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E6%A0%87%E5%87%86%E7%AD%94%E6%A1%88-1&#34;&gt;标准答案&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#03%E5%AE%9E%E7%8E%B0print%E4%BB%A5%E5%8F%8A%E7%89%B9%E5%8C%96stdformatter&#34;&gt;&lt;code&gt;03&lt;/code&gt;实现&lt;code&gt;print&lt;/code&gt;以及特化&lt;code&gt;std::formatter&lt;/code&gt;&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-2&#34;&gt;运行结果&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E7%BE%A4%E5%8F%8B%E6%8F%90%E4%BA%A4-2&#34;&gt;群友提交&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E6%A0%87%E5%87%86%E7%AD%94%E6%A1%88-2&#34;&gt;标准答案&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#04%E7%BB%99%E5%AE%9A%E6%A8%A1%E6%9D%BF%E7%B1%BB%E4%BF%AE%E6%94%B9%E8%AE%A9%E5%85%B6%E5%AF%B9%E6%AF%8F%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%9C%89%E4%B8%8D%E5%90%8Cid&#34;&gt;&lt;code&gt;04&lt;/code&gt;给定模板类修改，让其对每一个不同类型实例化有不同&lt;code&gt;ID&lt;/code&gt;&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-3&#34;&gt;运行结果&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E7%BE%A4%E5%8F%8B%E6%8F%90%E4%BA%A4-3&#34;&gt;群友提交&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E6%A0%87%E5%87%86%E7%AD%94%E6%A1%88-3&#34;&gt;标准答案&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#05%E5%AE%9E%E7%8E%B0scope_guard%E7%B1%BB%E5%9E%8B&#34;&gt;&lt;code&gt;05&lt;/code&gt;实现&lt;code&gt;scope_guard&lt;/code&gt;类型&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-4&#34;&gt;运行结果&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E7%BE%A4%E5%8F%8B%E6%8F%90%E4%BA%A4-4&#34;&gt;群友提交&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E6%A0%87%E5%87%86%E7%AD%94%E6%A1%88-4&#34;&gt;标准答案&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#06%E8%A7%A3%E9%87%8Astdatomic%E5%88%9D%E5%A7%8B%E5%8C%96&#34;&gt;&lt;code&gt;06&lt;/code&gt;解释&lt;code&gt;std::atomic&lt;/code&gt;初始化&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E7%BE%A4%E5%8F%8B%E6%8F%90%E4%BA%A4-5&#34;&gt;群友提交&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E6%A0%87%E5%87%86%E7%AD%94%E6%A1%88-5&#34;&gt;标准答案&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#07-throw-new-myexception&#34;&gt;&lt;code&gt;07&lt;/code&gt; &lt;strong&gt;&lt;code&gt;throw&lt;/code&gt;&lt;/strong&gt; &lt;code&gt;new MyException&lt;/code&gt;&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-5&#34;&gt;运行结果&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E7%BE%A4%E5%8F%8B%E6%8F%90%E4%BA%A4-6&#34;&gt;群友提交&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E6%A0%87%E5%87%86%E7%AD%94%E6%A1%88-6&#34;&gt;标准答案&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#08%E5%AE%9A%E4%B9%89array%E6%8E%A8%E5%AF%BC%E6%8C%87%E5%BC%95&#34;&gt;&lt;code&gt;08&lt;/code&gt;定义&lt;code&gt;array&lt;/code&gt;推导指引&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-6&#34;&gt;运行结果：&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E7%BE%A4%E5%8F%8B%E6%8F%90%E4%BA%A4-7&#34;&gt;群友提交&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/#%E6%A0%87%E5%87%86%E7%AD%94%E6%A1%88-7&#34;&gt;标准答案&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Loser-HomeWork&lt;/h1&gt; &#xA;&lt;h2&gt;前言&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;卢瑟们的作业展示。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;提交&lt;code&gt;pr&lt;/code&gt;不应当更改当前&lt;code&gt;README&lt;/code&gt;，请将作业提交到&lt;code&gt;src\群友提交&lt;/code&gt;中，比如你要提交第一个作业：&lt;/p&gt; &#xA;&lt;p&gt;你应当在&lt;code&gt;src\群友提交\第一题&lt;/code&gt;中创建一个自己的&lt;code&gt;.md&lt;/code&gt;或&lt;code&gt;.cpp&lt;/code&gt;文件，&lt;strong&gt;文件名以自己交流群ID命名（或github都可，方便找到本人即可）&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;答题的&lt;strong&gt;一般要求&lt;/strong&gt;如下（题目额外要求也自行注意看）：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;不更改&lt;code&gt;main&lt;/code&gt;函数，不得使其不运行（意思别捞偏门）。&lt;/li&gt; &#xA; &lt;li&gt;自行添加代码，在满足第一点的要求下，要能成功编译运行并与 &lt;strong&gt;给出运行结果一致&lt;/strong&gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;code&gt;01&lt;/code&gt;实现管道运算符&lt;/h2&gt; &#xA;&lt;p&gt;日期：&lt;strong&gt;&lt;code&gt;2023/7/21&lt;/code&gt;&lt;/strong&gt; 出题人：&lt;strong&gt;&lt;code&gt;mq白&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;给出代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int main(){&#xA;    std::vector v{1, 2, 3};&#xA;    std::function f {[](const int&amp;amp; i) {std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &#39; &#39;; } };&#xA;    auto f2 = [](int&amp;amp; i) {i *= i; };&#xA;    v | f2 | f;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;运行结果&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;1 4 9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;难度：&lt;strong&gt;一星&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;群友提交&lt;/h3&gt; &#xA;&lt;p&gt;答题者：&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/src/%E7%BE%A4%E5%8F%8B%E6%8F%90%E4%BA%A4/%E7%AC%AC%E4%B8%80%E9%A2%98/andyli.cpp&#34;&gt;&lt;strong&gt;&lt;code&gt;andyli&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;algorithm&amp;gt;&#xA;#include &amp;lt;vector&amp;gt;&#xA;#include &amp;lt;functional&amp;gt;&#xA;#include &amp;lt;iostream&amp;gt;&#xA;&#xA;template &amp;lt;typename R, typename F&amp;gt;&#xA;auto operator|(R&amp;amp;&amp;amp; r, F&amp;amp;&amp;amp; f) {&#xA;    for (auto&amp;amp;&amp;amp; x: r)&#xA;        f(x);&#xA;    return r;&#xA;}&#xA;int main() {&#xA;    std::vector v{1, 2, 3};&#xA;    std::function f{[](const int&amp;amp; i) { std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &#39; &#39;; }};&#xA;    auto f2 = [](int&amp;amp; i) { i *= i; };&#xA;    v | f2 | f;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;很常规，没啥问题。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;答题者：&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/src/%E7%BE%A4%E5%8F%8B%E6%8F%90%E4%BA%A4/%E7%AC%AC%E4%B8%80%E9%A2%98/mq%E6%9D%BE%E9%BC%A0.cpp&#34;&gt;&lt;strong&gt;&lt;code&gt;mq松鼠&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include&amp;lt;iostream&amp;gt;&#xA;#include &amp;lt;vector&amp;gt;&#xA;#include &amp;lt;functional&amp;gt;&#xA;&#xA;auto operator | (std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;amp; v,std::function&amp;lt;void(const int&amp;amp;)&amp;gt; f){&#xA;    for(auto&amp;amp;i:v){&#xA;        f(i);&#xA;    }&#xA;    return v;&#xA;}&#xA;auto operator | (std::vector&amp;lt;int&amp;gt;&amp;amp; v,std::function&amp;lt;void(int&amp;amp;)&amp;gt; f){&#xA;    for(auto&amp;amp;i:v){&#xA;        f(i);&#xA;    }&#xA;    return v;&#xA;}&#xA;int main(){&#xA;    std::vector v{1, 2, 3};&#xA;    std::function f {[](const int&amp;amp; i) {std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &#39;\n&#39;; } };&#xA;    auto f2 = [](int&amp;amp; i) {i *= i; };&#xA;    v | f2 | f;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;评价：闲的没事多写个重载，裱起来。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;标准答案&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;typename U, typename F&amp;gt;&#xA;    requires std::regular_invocable&amp;lt;F, U&amp;amp;&amp;gt;//可加可不加，不会就不加&#xA;std::vector&amp;lt;U&amp;gt;&amp;amp; operator|(std::vector&amp;lt;U&amp;gt;&amp;amp; v1, F f) {&#xA;    for (auto&amp;amp; i : v1) {&#xA;        f(i);&#xA;    }&#xA;    return v1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;不使用模板&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::vector&amp;lt;int&amp;gt;&amp;amp; operator|(std::vector&amp;lt;int&amp;gt;&amp;amp; v1, const std::function&amp;lt;void(int&amp;amp;)&amp;gt;&amp;amp; f) {&#xA;    for (auto&amp;amp; i : v1) {&#xA;        f(i);&#xA;    }&#xA;    return v1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;不使用范围&lt;code&gt;for&lt;/code&gt;，使用&lt;code&gt;C++20&lt;/code&gt;简写函数模板：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::vector&amp;lt;int&amp;gt;&amp;amp; operator|(auto&amp;amp; v1, const auto&amp;amp; f) {&#xA;    std::ranges::for_each(v1, f);&#xA;    return v1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;各种范式无非就是这些改来改去了，没必要再写。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;&lt;code&gt;02&lt;/code&gt;实现自定义字面量&lt;code&gt;_f&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;日期：&lt;strong&gt;&lt;code&gt;2023/7/22&lt;/code&gt;&lt;/strong&gt; 出题人：&lt;strong&gt;&lt;code&gt;mq白&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;给出代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int main(){&#xA;    std::cout &amp;lt;&amp;lt; &#34;乐 :{} *\n&#34;_f(5);&#xA;    std::cout &amp;lt;&amp;lt; &#34;乐 :{0} {0} *\n&#34;_f(5);&#xA;    std::cout &amp;lt;&amp;lt; &#34;乐 :{:b} *\n&#34;_f(0b01010101);&#xA;    std::cout &amp;lt;&amp;lt; &#34;{:*&amp;lt;10}&#34;_f(&#34;卢瑟&#34;);&#xA;    std::cout &amp;lt;&amp;lt; &#39;\n&#39;;&#xA;    int n{};&#xA;    std::cin &amp;gt;&amp;gt; n;&#xA;    std::cout &amp;lt;&amp;lt; &#34;π：{:.{}f}\n&#34;_f(std::numbers::pi_v&amp;lt;double&amp;gt;, n);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;运行结果:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;乐 :5 *&#xA;乐 :5 5 *&#xA;乐 :1010101 *&#xA;卢瑟******&#xA;6&#xA;π：3.141593&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;难度:&lt;strong&gt;二星&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;6&lt;/code&gt;为输入，决定&lt;code&gt;π&lt;/code&gt;的小数点后的位数，可自行输入更大或更小数字。 提示：&lt;code&gt;C++11用户定义字面量&lt;/code&gt;，&lt;code&gt;C++20format库&lt;/code&gt;。 难度：&lt;strong&gt;二星&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;群友提交&lt;/h3&gt; &#xA;&lt;p&gt;答题者：&lt;a href=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/src/%E7%BE%A4%E5%8F%8B%E6%8F%90%E4%BA%A4/%E7%AC%AC%E4%BA%8C%E9%A2%98/andyli.cpp&#34;&gt;&lt;strong&gt;&lt;code&gt;andyli&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;format&amp;gt;&#xA;#include &amp;lt;iostream&amp;gt;&#xA;#include &amp;lt;string_view&amp;gt;&#xA;#include &amp;lt;string&amp;gt;&#xA;&#xA;namespace impl {&#xA;    struct Helper {&#xA;        const std::string_view s;&#xA;        Helper(const char* s, std::size_t len): s(s, len) {}&#xA;        template &amp;lt;typename... Args&amp;gt;&#xA;        std::string operator()(Args&amp;amp;&amp;amp;... args) const {&#xA;            return std::vformat(s, std::make_format_args(std::forward&amp;lt;Args&amp;gt;(args)...));&#xA;        }&#xA;    };&#xA;} // namespace impl&#xA;impl::Helper operator&#34;&#34;_f(const char* s, std::size_t len) noexcept {&#xA;    return {s, len};&#xA;}&#xA;&#xA;int main() {&#xA;    std::cout &amp;lt;&amp;lt; &#34;乐 :{} *\n&#34;_f(5);&#xA;    std::cout &amp;lt;&amp;lt; &#34;乐 :{0} {0} *\n&#34;_f(5);&#xA;    std::cout &amp;lt;&amp;lt; &#34;乐 :{:b} *\n&#34;_f(0b01010101);&#xA;    std::cout &amp;lt;&amp;lt; &#34;{:*&amp;lt;10}&#34;_f(&#34;卢瑟&#34;);&#xA;    std::cout &amp;lt;&amp;lt; &#39;\n&#39;;&#xA;    int n{};&#xA;    std::cin &amp;gt;&amp;gt; n;&#xA;    std::cout &amp;lt;&amp;lt; &#34;π：{:.{}f}\n&#34;_f(std::numbers::pi_v&amp;lt;double&amp;gt;, n);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;标准答案&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;constexpr auto operator&#34;&#34;_f(const char* fmt, size_t) {&#xA;    return[=]&amp;lt;typename... T&amp;gt;(T&amp;amp;&amp;amp;... Args) { return std::vformat(fmt, std::make_format_args(std::forward&amp;lt;T&amp;gt;(Args)...)); };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;&lt;code&gt;03&lt;/code&gt;实现&lt;code&gt;print&lt;/code&gt;以及特化&lt;code&gt;std::formatter&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;日期：&lt;strong&gt;&lt;code&gt;2023/7/24&lt;/code&gt;&lt;/strong&gt; 出题人：&lt;strong&gt;&lt;code&gt;mq白&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;实现一个&lt;code&gt;print&lt;/code&gt;，如果你做了上一个作业，我相信这很简单。 要求调用形式为:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;print(格式字符串，任意类型和个数的符合格式字符串要求的参数)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct Frac {&#xA;   int a, b;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;给出自定义类型&lt;code&gt;Frace&lt;/code&gt;，要求支持&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Frac f{ 1,10 };&#xA;print(&#34;{}&#34;, f);// 结果为1/10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;运行结果&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;1/10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;难度:&lt;strong&gt;三星&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;禁止面相结果编程，使用宏等等方式，最多&lt;code&gt;B&lt;/code&gt;（指评价），本作业主要考察和学习&lt;code&gt;format&lt;/code&gt;库罢了。&lt;/p&gt; &#xA;&lt;p&gt;提示: &lt;strong&gt;&lt;code&gt;std::formatter&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;提交代码最好是网上编译了三个平台的截图，如：&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/image/%E7%AC%AC%E4%B8%89%E9%A2%98/01%E5%B1%95%E7%A4%BA.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;群友提交&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;标准答案&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;&amp;gt;&#xA;struct std::formatter&amp;lt;Frac&amp;gt;:std::formatter&amp;lt;char&amp;gt;{&#xA;    auto format(const auto&amp;amp; frac, auto&amp;amp; ctx)const{//const修饰是必须的&#xA;        return std::format_to(ctx.out(), &#34;{}/{}&#34;, frac.a, frac.b);&#xA;    }&#xA;};&#xA;void print(std::string_view fmt,auto&amp;amp;&amp;amp;...args){&#xA;    std::cout &amp;lt;&amp;lt; std::vformat(fmt, std::make_format_args(std::forward&amp;lt;decltype(args)&amp;gt;(args)...));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;我们只是非常简单的支持了&lt;strong&gt;题目要求&lt;/strong&gt;的形式，给&lt;code&gt;std::formatter&lt;/code&gt;进行特化，如果要支持比如那些&lt;code&gt;{:6}&lt;/code&gt;之类的格式化的话，显然不行，这涉及到更多的操作。 简单的特化以及&lt;a href=&#34;https://zh.cppreference.com/w/cpp/utility/format/formatter&#34;&gt;&lt;code&gt;std::formatter&lt;/code&gt;&lt;/a&gt;支持的形式可以参见&lt;a href=&#34;https://zh.cppreference.com/w/cpp/utility/format/formatter&#34;&gt;&lt;strong&gt;文档&lt;/strong&gt;&lt;/a&gt;。 一些复杂的特化，&lt;code&gt;up&lt;/code&gt;之前也有写过，在&lt;a href=&#34;https://github.com/Mq-b/Cpp20-STL-Cookbook-src#76%E4%BD%BF%E7%94%A8%E6%A0%BC%E5%BC%8F%E5%BA%93%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%96%87%E6%9C%AC&#34;&gt;&lt;strong&gt;&lt;code&gt;Cookbook&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;中；里面有对&lt;a href=&#34;https://zh.cppreference.com/w/cpp/ranges/range&#34;&gt;&lt;code&gt;std::ranges::range&lt;/code&gt;&lt;/a&gt;，和&lt;a href=&#34;https://zh.cppreference.com/w/cpp/utility/tuple&#34;&gt;&lt;code&gt;std::tuple&lt;/code&gt;&lt;/a&gt;的特化，支持所有形式。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;&lt;code&gt;04&lt;/code&gt;给定模板类修改，让其对每一个不同类型实例化有不同&lt;code&gt;ID&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;日期：&lt;strong&gt;&lt;code&gt;2023/7/25&lt;/code&gt;&lt;/strong&gt; 出题人：&lt;strong&gt;&lt;code&gt;Maxy&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include&amp;lt;iostream&amp;gt;&#xA;class ComponentBase{&#xA;protected:&#xA;    static inline size_t component_type_count = 0;&#xA;};&#xA;template&amp;lt;typename T&amp;gt;&#xA;class Component : public ComponentBase{&#xA;public:&#xA;    //todo...&#xA;    //使用任意方式更改当前模板类，使得对于任意类型X，若其继承自Component&#xA;&#xA;    //则X::component_type_id()会得到一个独一无二的size_t类型的id（对于不同的X类型返回的值应不同）&#xA;    //要求：不能使用std::type_info（禁用typeid关键字），所有id从0开始连续。&#xA;};&#xA;class A : public Component&amp;lt;A&amp;gt;&#xA;{};&#xA;class B : public Component&amp;lt;B&amp;gt;&#xA;{};&#xA;class C : public Component&amp;lt;C&amp;gt;&#xA;{};&#xA;int main()&#xA;{&#xA;    std::cout &amp;lt;&amp;lt; A::component_type_id() &amp;lt;&amp;lt; std::endl;&#xA;    std::cout &amp;lt;&amp;lt; B::component_type_id() &amp;lt;&amp;lt; std::endl;&#xA;    std::cout &amp;lt;&amp;lt; B::component_type_id() &amp;lt;&amp;lt; std::endl;&#xA;    std::cout &amp;lt;&amp;lt; A::component_type_id() &amp;lt;&amp;lt; std::endl;&#xA;    std::cout &amp;lt;&amp;lt; A::component_type_id() &amp;lt;&amp;lt; std::endl;&#xA;    std::cout &amp;lt;&amp;lt; C::component_type_id() &amp;lt;&amp;lt; std::endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;运行结果&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;0&#xA;1&#xA;1&#xA;0&#xA;0&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;难度:&lt;strong&gt;一星&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;提交应当给出多平台测试结果，如图：&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/image/%E7%AC%AC%E5%9B%9B%E9%A2%98/01%E5%B1%95%E7%A4%BA.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;群友提交&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;标准答案&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;typename T&amp;gt;&#xA;class Component : public ComponentBase{&#xA;public:&#xA;    static size_t component_type_id(){&#xA;        static size_t ID = component_type_count++;&#xA;        return ID;&#xA;    }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;分析：&lt;/p&gt; &#xA;&lt;p&gt;我们需要实现&lt;code&gt;Component&lt;/code&gt;的静态成员函数&lt;code&gt;component_type_id&lt;/code&gt;。这是从给出代码得知的：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class A : public Component&amp;lt;A&amp;gt;&#xA;{};&#xA;A::component_type_id()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;题目要求是每一个自定义类类型（假设是X）继承&lt;code&gt;Component&amp;lt;X&amp;gt;&lt;/code&gt;，调用&lt;code&gt;component_type_id()&lt;/code&gt;返回的是自己独一无二的ID。其他的类型同理。&lt;/p&gt; &#xA;&lt;p&gt;解决题目之前我们需要强调一个知识点：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;C++的模板不是具体类型，实例化之后才是，模板类的静态成员或静态成员函数也不属于模板我们可以用一段代码来展示结论：&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;&#xA;&#xA;template&amp;lt;typename T&amp;gt;&#xA;struct Test{&#xA;&#x9;inline static int n = 10;&#xA;};&#xA;&#xA;int main(){&#xA;&#x9;Test&amp;lt;int&amp;gt;::n = 1;&#xA;&#x9;std::cout &amp;lt;&amp;lt; Test&amp;lt;void&amp;gt;::n &amp;lt;&amp;lt; &#39;\n&#39;;//10&#xA;&#x9;std::cout &amp;lt;&amp;lt; Test&amp;lt;int&amp;gt;::n &amp;lt;&amp;lt; &#39;\n&#39;;//1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这段代码很轻易的就展示了静态数据成员属于模板实例化后的具体类型 &lt;code&gt;Test&amp;lt;void&amp;gt;::n&lt;/code&gt; 和 &lt;code&gt;Test&amp;lt;int&amp;gt;::n&lt;/code&gt;不是贡献的n，并且&lt;code&gt;Test&amp;lt;void&amp;gt;&lt;/code&gt;和&lt;code&gt;Test&amp;lt;int&amp;gt;&lt;/code&gt;也不是一种类型。&lt;/p&gt; &#xA;&lt;p&gt;（静态成员函数同理）&lt;/p&gt; &#xA;&lt;p&gt;所以我们的解法利用的是：不同的类型实例化&lt;code&gt;Component&lt;/code&gt;类模板，也是不同的静态成员函数，静态成员函数里面的局部静态数据成员在第一次调用的时候才会初始化，后面就不会。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;&lt;code&gt;05&lt;/code&gt;实现&lt;code&gt;scope_guard&lt;/code&gt;类型&lt;/h2&gt; &#xA;&lt;p&gt;日期：&lt;strong&gt;&lt;code&gt;2023/7/29&lt;/code&gt;&lt;/strong&gt; 出题人：&lt;strong&gt;&lt;code&gt;mq白&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;要求实现 &lt;strong&gt;&lt;code&gt;scope_guard&lt;/code&gt;&lt;/strong&gt; 类型 （ 即支恃传入任意可调用类型 , 析构的时候同时调用 ）。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;cstdio&amp;gt;&#xA;#include &amp;lt;iostream&amp;gt;&#xA;#include &amp;lt;functional&amp;gt;&#xA;&#xA;struct X {&#xA;    X() { puts(&#34;X()&#34;); }&#xA;    X(const X&amp;amp;) { puts(&#34;X(const X&amp;amp;)&#34;); }&#xA;    X(X&amp;amp;&amp;amp;) noexcept { puts(&#34;X(X&amp;amp;&amp;amp;)&#34;); }&#xA;    ~X() { puts(&#34;~X()&#34;); }&#xA;};&#xA;&#xA;int main() {&#xA;    {&#xA;        auto x = new X{};&#xA;        auto guard = scope_guard([&amp;amp;] {&#xA;            delete x;&#xA;            x = nullptr;&#xA;        });&#xA;    }&#xA;    puts(&#34;----------&#34;);&#xA;    {&#xA;        struct Test {&#xA;            void operator()(X*&amp;amp; x) {&#xA;                delete x;&#xA;                x = nullptr;&#xA;            }&#xA;        };&#xA;        auto x = new X{};&#xA;        Test t;&#xA;        auto guard = scope_guard(t, x);&#xA;    }&#xA;    puts(&#34;----------&#34;);&#xA;    {&#xA;        struct Test {&#xA;            void f(X*&amp;amp; x) {&#xA;                delete x;&#xA;                x = nullptr;&#xA;            }&#xA;        };&#xA;        auto x = new X{};&#xA;        Test t;&#xA;        auto guard = scope_guard{&amp;amp;Test::f, &amp;amp;t, x}; &#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;运行结果&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;X()&#xA;~X()&#xA;----------&#xA;X()&#xA;~X()&#xA;----------&#xA;X()&#xA;~X()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;难度:&lt;strong&gt;四星&lt;/strong&gt;（完全满足要求的情况下）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;群友提交&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;标准答案&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;使用类型擦除&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct scope_guard {&#xA;    std::function&amp;lt;void()&amp;gt;f;&#xA;    template&amp;lt;typename Func, typename...Args&amp;gt;requires std::invocable&amp;lt;Func, Args...&amp;gt;&#xA;    scope_guard(Func&amp;amp;&amp;amp; func, Args&amp;amp;&amp;amp;...args) :f{ [func = std::forward&amp;lt;Func&amp;gt;(func), ...args = std::forward&amp;lt;Args&amp;gt;(args)]() mutable {&#xA;            std::invoke(std::forward&amp;lt;std::decay_t&amp;lt;Func&amp;gt;&amp;gt;(func), std::forward&amp;lt;Args&amp;gt;(args)...);&#xA;        } }{}&#xA;    ~scope_guard() { f(); }&#xA;    scope_guard(const scope_guard&amp;amp;) = delete;&#xA;    scope_guard&amp;amp; operator=(const scope_guard&amp;amp;) = delete;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;其实大家也可以考虑直接用std::bind，我这样用lambda有点复杂的过分了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;第一次构造是外面的默认构造；&lt;/p&gt; &#xA;&lt;p&gt;第二次构造是初始化 lambda 捕获时复制构造；&lt;/p&gt; &#xA;&lt;p&gt;第三次构造是从 lambda 初始化 &lt;code&gt;std::function&lt;/code&gt; 时的移动构造；&lt;/p&gt; &#xA;&lt;p&gt;第四次构造是调用f的复制构造。&lt;/p&gt; &#xA;&lt;p&gt;第一个析构是 lambda 表达式的结果对象，里面因为 &lt;code&gt;decay-copy&lt;/code&gt; 存了个 &lt;code&gt;X&lt;/code&gt;。 &lt;code&gt;invoke&lt;/code&gt; 的东西是 &lt;code&gt;std::function&lt;/code&gt; 初始化时，通过移动构造创建的副本。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;使用 &lt;code&gt;std::tuple&lt;/code&gt;+&lt;code&gt;std::apply&lt;/code&gt;&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;typename F, typename...Args&amp;gt;&#xA;    requires requires(F f, Args...args) { std::invoke(f, args...); }&#xA;struct scope_guard {&#xA;    F f;&#xA;    std::tuple&amp;lt;Args...&amp;gt;values;&#xA;&#xA;    template&amp;lt;typename Fn, typename...Ts&amp;gt;&#xA;    scope_guard(Fn&amp;amp;&amp;amp; func, Ts&amp;amp;&amp;amp;...args) :f{ std::forward&amp;lt;Fn&amp;gt;(func) }, values{ std::forward&amp;lt;Ts&amp;gt;(args)... } {}&#xA;    ~scope_guard() {&#xA;        std::apply(f, values);&#xA;    }&#xA;    scope_guard(const scope_guard&amp;amp;) = delete;&#xA;};&#xA;&#xA;template&amp;lt;typename F, typename...Args&amp;gt;//推导指引非常重要&#xA;scope_guard(F&amp;amp;&amp;amp;, Args&amp;amp;&amp;amp;...) -&amp;gt; scope_guard&amp;lt;std::decay_t&amp;lt;F&amp;gt;, std::decay_t&amp;lt;Args&amp;gt;...&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;&lt;code&gt;06&lt;/code&gt;解释&lt;code&gt;std::atomic&lt;/code&gt;初始化&lt;/h2&gt; &#xA;&lt;p&gt;日期：&lt;strong&gt;&lt;code&gt;2023/8/2&lt;/code&gt;&lt;/strong&gt; 出题人：&lt;strong&gt;&lt;code&gt;mq白&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;&#xA;#include &amp;lt;atomic&amp;gt;&#xA;int main() {&#xA;    std::atomic&amp;lt;int&amp;gt; n = 6;&#xA;    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &#39;\n&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;解释，为什么以上&lt;a href=&#34;https://godbolt.org/z/sfEzP8136&#34;&gt;代码&lt;/a&gt;在 &lt;code&gt;C++17&lt;/code&gt; 后可以通过编译， &lt;code&gt;C++17&lt;/code&gt; 前不行？&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Mq-b/Loser-HomeWork/main/image/%E7%AC%AC%E5%85%AD%E9%A2%98/01%E5%B1%95%E7%A4%BA.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;难度:&lt;strong&gt;三星&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;群友提交&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;标准答案&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;std::atomic&amp;lt;int&amp;gt; n = 6;&lt;/code&gt;中，由于&lt;code&gt;6&lt;/code&gt;和&lt;code&gt;std::atomic&amp;lt;int&amp;gt;&lt;/code&gt;不是同一类型（但是这里其实有一个用户定义转换序列，你可以简单的认为&lt;code&gt;6&lt;/code&gt;可以隐式转换）。&lt;/p&gt; &#xA;&lt;p&gt;即调用转换构造函数：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;constexpr atomic( T desired ) noexcept;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;转换构造函数也会作为用户定义的转换序列中的一部分&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;6&lt;/code&gt;会调用转换构造函数，构造出一个临时的atomic对象用来&lt;strong&gt;直接初始化n&lt;/strong&gt;，即&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::atomic&amp;lt;int&amp;gt; n(std::atomic&amp;lt;int&amp;gt;(6))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在 &lt;strong&gt;&lt;code&gt;C++17&lt;/code&gt;之前&lt;/strong&gt; 的版本，理所应当应该查找检测复制/移动 构造函数，满足要求才可以通过编译。但是：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;atomic( const atomic&amp;amp; ) = delete;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;实际上atomic的复制构造被删除（同时移动构造也被抑制生成了）。所以自然而然的不允许。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;C++17&lt;/code&gt;的改动是：&lt;strong&gt;复制消除变为强制要求&lt;/strong&gt;。 纯右值表达式作为构造对象的参数，不会再调用移动构造，也不会去检测，而是原位构造。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;说句题外话，C++17后纯右值不可能再调用移动构造。没有移动构造或者复制构造不影响使用同类型纯右值初始化对象，如&lt;code&gt;X x{X{}}&lt;/code&gt;，即使移动/复制构造函数&lt;strong&gt;都被delete&lt;/strong&gt;，也无所谓，&lt;a href=&#34;https://godbolt.org/z/Kdncxcc3o&#34;&gt;&lt;code&gt;code&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;&lt;code&gt;07&lt;/code&gt; &lt;strong&gt;&lt;code&gt;throw&lt;/code&gt;&lt;/strong&gt; &lt;code&gt;new MyException&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;日期：&lt;strong&gt;&lt;code&gt;2023/8/6&lt;/code&gt;&lt;/strong&gt; 出题人：&lt;strong&gt;&lt;code&gt;mq白&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;给出代码:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct MyException :std::exception {&#xA;&#x9;const char* data{};&#xA;&#x9;MyException(const char* s) :data(s) { puts(&#34;MyException()&#34;); }&#xA;&#x9;~MyException() { puts(&#34;~MyException()&#34;); }&#xA;&#x9;const char* what()const noexcept { return data; }&#xA;};&#xA;void f2() {&#xA;&#x9;throw new MyException(&#34;new Exception异常....&#34;);&#xA;}&#xA;int main(){&#xA;    f2();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;灵感来源自 &lt;strong&gt;&lt;code&gt;java&lt;/code&gt;&lt;/strong&gt; 人写 &lt;strong&gt;&lt;code&gt;C++&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;在&lt;code&gt;main&lt;/code&gt;函数中自行修改代码，接取&lt;code&gt;f2()&lt;/code&gt;函数抛出的异常（&lt;code&gt;try catch&lt;/code&gt;）。&lt;/p&gt; &#xA;&lt;h3&gt;运行结果&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;MyException()&#xA;new Exception异常....&#xA;~MyException()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;难度:&lt;strong&gt;一星&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;某些IDE或者平台可能会将打印的异常信息标为红色放到第一行，即 new Exception异常.... 这句话也可能在第一行（一般终端运行不会，默认vs也无此功能）&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;群友提交&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;标准答案&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int main() {&#xA;    try{&#xA;        f2();&#xA;    }&#xA;    catch (std::exception* e){&#xA;        std::cerr &amp;lt;&amp;lt; std::unique_ptr&amp;lt;std::exception&amp;gt;(e)-&amp;gt;what() &amp;lt;&amp;lt; &#39;\n&#39;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;实际上本题是用来讽刺将&lt;code&gt;java&lt;/code&gt;的写法带入到其他语言中，也就是很经典的： &lt;strong&gt;&lt;code&gt;java&lt;/code&gt;人写什么都是&lt;code&gt;java&lt;/code&gt;&lt;/strong&gt;。 只是看我们这道题，实际上你非要说&lt;code&gt;new&lt;/code&gt;有什么不好，倒也没什么非常不行的地方，只是，没有理由自己多写一个&lt;code&gt;delete&lt;/code&gt;表达式（或者包个智能指针）。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;我希望不要有人开始幻想：&lt;code&gt;throw new MyException(&#34;new Exception异常....&#34;)&lt;/code&gt;因为是&lt;code&gt;throw&lt;/code&gt;一个指针类型，所以按指针传递，效率更高。不要让我看到这种逆天想法。如果你想到这一点，那不妨思考一下，构造临时对象的开销，以及使用&lt;code&gt;new&lt;/code&gt;表达式？ 说实话挺无聊的问题，只是防止有人想到这些点，以及抬杠罢了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;&lt;code&gt;08&lt;/code&gt;定义&lt;code&gt;array&lt;/code&gt;推导指引&lt;/h2&gt; &#xA;&lt;p&gt;日期：&lt;strong&gt;&lt;code&gt;2023/8/12&lt;/code&gt;&lt;/strong&gt; 出题人：&lt;strong&gt;&lt;code&gt;mq白&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;给出代码:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;class Ty,size_t size&amp;gt;&#xA;struct array {&#xA;    Ty* begin() { return arr; };&#xA;    Ty* end() { return arr + size; };&#xA;    Ty arr[size];&#xA;};&#xA;int main() {&#xA;    ::array arr{1, 2, 3, 4, 5};&#xA;    for (const auto&amp;amp; i : arr) {&#xA;        std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &#39; &#39;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;要求&lt;strong&gt;自定义推导指引&lt;/strong&gt;，不更改已给出代码，使得代码成功编译并满足运行结果。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;提示：可参考&lt;a href=&#34;https://zh.cppreference.com/w/cpp/container/array&#34;&gt;&lt;code&gt;std::array&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;运行结果：&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;1 2 3 4 5 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;难度:&lt;strong&gt;三星&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;群友提交&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;标准答案&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;class Ty, class...Args&amp;gt;&#xA;    requires (std::same_as&amp;lt;Ty, Args&amp;gt;&amp;amp;&amp;amp;...)//不会这个C++20约束以及里面折叠表达的用法也可以不用&#xA;array(Ty, Args...) -&amp;gt; array&amp;lt;Ty, 1 + sizeof...(Args)&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;本题的目的如你所见主要考察的是 &lt;strong&gt;&lt;code&gt;C++17&lt;/code&gt;用户定义类模板推导指引&lt;/strong&gt;。但是我更多的其实我想表达的是： 定义模板推导指引和构造函数没什么直接的关联；如题目所示，我们的&lt;code&gt;array&lt;/code&gt;是一个聚合类型，压根没有显式的用户定义构造函数，&lt;strong&gt;没有显示的构造函数并不影响我们使用自定义的用户推导指引&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如何强调只是因为大部分人对此有很多错误认知&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;推导指引实际上是按照你构造器传入的东西，来进行的这种推导，我觉得我视频里说的已经很清楚了。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt;</summary>
  </entry>
</feed>