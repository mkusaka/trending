<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-31T01:30:34Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SJTU-IPADS/PowerInfer</title>
    <updated>2025-07-31T01:30:34Z</updated>
    <id>tag:github.com,2025-07-31:/SJTU-IPADS/PowerInfer</id>
    <link href="https://github.com/SJTU-IPADS/PowerInfer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High-speed Large Language Model Serving for Local Deployment&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PowerInfer: Fast Large Language Model Serving with a Consumer-grade GPU&lt;/h1&gt; &#xA;&lt;h2&gt;TL;DR&lt;/h2&gt; &#xA;&lt;p&gt;PowerInfer is a CPU/GPU LLM inference engine leveraging &lt;strong&gt;activation locality&lt;/strong&gt; for your device.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://trendshift.io/repositories/6186&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://trendshift.io/api/badge/repositories/6186&#34; alt=&#34;SJTU-IPADS%2FPowerInfer | Trendshift&#34; style=&#34;width: 250px; height: 55px;&#34; width=&#34;250&#34; height=&#34;55&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/orgs/SJTU-IPADS/projects/2/views/2&#34;&gt;Project Kanban&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Latest News üî•&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2025/7/27] We released &lt;a href=&#34;https://huggingface.co/PowerInfer/SmallThinker-21BA3B-Instruct&#34;&gt;SmallThinker-21BA3B-Instruct&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/PowerInfer/SmallThinker-4BA0.6B-Instruct&#34;&gt;SmallThinker-4BA0.6B-Instruct&lt;/a&gt;. We also released a corresponding framework for efficient &lt;a href=&#34;https://raw.githubusercontent.com/SJTU-IPADS/PowerInfer/main/smallthinker/README.md&#34;&gt;on-device inference&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[2024/6/11] We are thrilled to introduce &lt;a href=&#34;https://arxiv.org/abs/2406.06282&#34;&gt;PowerInfer-2&lt;/a&gt;, our highly optimized inference framework designed specifically for smartphones. With TurboSparse-Mixtral-47B, it achieves an impressive speed of 11.68 tokens per second, which is up to 22 times faster than other state-of-the-art frameworks.&lt;/li&gt; &#xA; &lt;li&gt;[2024/6/11] We are thrilled to present &lt;a href=&#34;https://arxiv.org/abs/2406.05955&#34;&gt;Turbo Sparse&lt;/a&gt;, our TurboSparse models for fast inference. With just $0.1M, we sparsified the original Mistral and Mixtral model to nearly 90% sparsity while maintaining superior performance! For a Mixtral-level model, our TurboSparse-Mixtral activates only &lt;strong&gt;4B&lt;/strong&gt; parameters!&lt;/li&gt; &#xA; &lt;li&gt;[2024/5/20] &lt;strong&gt;Competition Recruitment: CCF-TCArch Customized Computing Challenge 2024&lt;/strong&gt;. The CCF TCARCH CCC is a national competition organized by the Technical Committee on Computer Architecture (TCARCH) of the China Computer Federation (CCF). This year&#39;s competition aims to optimize the PowerInfer inference engine using the open-source ROCm/HIP. More information about the competition can be found &lt;a href=&#34;https://ccf-tcarch-ccc.github.io/2024/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[2024/5/17] We now provide support for AMD devices with ROCm.&lt;/li&gt; &#xA; &lt;li&gt;[2024/3/28] We are trilled to present &lt;a href=&#34;https://github.com/SJTU-IPADS/Bamboo&#34;&gt;Bamboo LLM&lt;/a&gt; that achieves both top-level performance and unparalleled speed with PowerInfer! Experience it with Bamboo-7B &lt;a href=&#34;https://huggingface.co/PowerInfer/Bamboo-base-v0.1-gguf&#34;&gt;Base&lt;/a&gt; / &lt;a href=&#34;https://huggingface.co/PowerInfer/Bamboo-DPO-v0.1-gguf&#34;&gt;DPO&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[2024/3/14] We supported ProSparse Llama 2 (&lt;a href=&#34;https://huggingface.co/SparseLLM/prosparse-llama-2-7b&#34;&gt;7B&lt;/a&gt;/&lt;a href=&#34;https://huggingface.co/SparseLLM/prosparse-llama-2-13b&#34;&gt;13B&lt;/a&gt;), ReLU models with ~90% sparsity, matching original Llama 2&#39;s performance (Thanks THUNLP &amp;amp; ModelBest)!&lt;/li&gt; &#xA; &lt;li&gt;[2024/1/11] We supported Windows with GPU inference!&lt;/li&gt; &#xA; &lt;li&gt;[2023/12/24] We released an online &lt;a href=&#34;https://powerinfer-gradio.vercel.app/&#34;&gt;gradio demo&lt;/a&gt; for Falcon(ReLU)-40B-FP16!&lt;/li&gt; &#xA; &lt;li&gt;[2023/12/19] We officially released PowerInfer!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo üî•&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SJTU-IPADS/PowerInfer/assets/34213478/fe441a42-5fce-448b-a3e5-ea4abb43ba23&#34;&gt;https://github.com/SJTU-IPADS/PowerInfer/assets/34213478/fe441a42-5fce-448b-a3e5-ea4abb43ba23&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PowerInfer v.s. llama.cpp on a single RTX 4090(24G) running Falcon(ReLU)-40B-FP16 with a 11x speedup!&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Both PowerInfer and llama.cpp were running on the same hardware and fully utilized VRAM on RTX 4090.&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;strong&gt;Live Demo Online‚ö°Ô∏è&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Try out our &lt;a href=&#34;https://powerinfer-gradio.vercel.app/&#34;&gt;Gradio server&lt;/a&gt; hosting Falcon(ReLU)-40B-FP16 on a RTX 4090!&lt;/p&gt; &#xA; &lt;p&gt;&lt;sub&gt;Experimental and without warranties üöß&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Abstract&lt;/h2&gt; &#xA;&lt;p&gt;We introduce PowerInfer, a high-speed Large Language Model (LLM) inference engine on a personal computer (PC) equipped with a single consumer-grade GPU. The key underlying the design of PowerInfer is exploiting the high &lt;strong&gt;locality&lt;/strong&gt; inherent in LLM inference, characterized by a power-law distribution in neuron activation.&lt;/p&gt; &#xA;&lt;p&gt;This distribution indicates that a small subset of neurons, termed hot neurons, are consistently activated across inputs, while the majority, cold neurons, vary based on specific inputs. PowerInfer exploits such an insight to design a GPU-CPU hybrid inference engine: hot-activated neurons are preloaded onto the GPU for fast access, while cold-activated neurons are computed on the CPU, thus significantly reducing GPU memory demands and CPU-GPU data transfers. PowerInfer further integrates adaptive predictors and neuron-aware sparse operators, optimizing the efficiency of neuron activation and computational sparsity.&lt;/p&gt; &#xA;&lt;p&gt;Evaluation shows that PowerInfer attains an average token generation rate of 13.20 tokens/s, with a peak of 29.08 tokens/s, across various LLMs (including OPT-175B) on a single NVIDIA RTX 4090 GPU, only 18% lower than that achieved by a top-tier server-grade A100 GPU. This significantly outperforms llama.cpp by up to 11.69x while retaining model accuracy.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;PowerInfer is a high-speed and easy-to-use inference engine for deploying LLMs locally.&lt;/p&gt; &#xA;&lt;p&gt;PowerInfer is fast with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Locality-centric design&lt;/strong&gt;: Utilizes sparse activation and &#39;hot&#39;/&#39;cold&#39; neuron concept for efficient LLM inference, ensuring high speed with lower resource demands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hybrid CPU/GPU Utilization&lt;/strong&gt;: Seamlessly integrates memory/computation capabilities of CPU and GPU for a balanced workload and faster processing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PowerInfer is flexible and easy to use with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy Integration&lt;/strong&gt;: Compatible with popular &lt;a href=&#34;https://huggingface.co/SparseLLM&#34;&gt;ReLU-sparse models&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Local Deployment Ease&lt;/strong&gt;: Designed and deeply optimized for local deployment on consumer-grade hardware, enabling low-latency LLM inference and serving on a single GPU.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backward Compatibility&lt;/strong&gt;: While distinct from llama.cpp, you can make use of most of &lt;code&gt;examples/&lt;/code&gt; the same way as llama.cpp such as server and batched generation. PowerInfer also supports inference with llama.cpp&#39;s model weights for compatibility purposes, but there will be no performance gain.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use these models with PowerInfer today:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Falcon-40B&lt;/li&gt; &#xA; &lt;li&gt;Llama2 family&lt;/li&gt; &#xA; &lt;li&gt;ProSparse Llama2 family&lt;/li&gt; &#xA; &lt;li&gt;Bamboo-7B&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have tested PowerInfer on the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;x86-64 CPUs with AVX2 instructions, with or without NVIDIA GPUs, under &lt;strong&gt;Linux&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;x86-64 CPUs with AVX2 instructions, with or without NVIDIA GPUs, under &lt;strong&gt;Windows&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Apple M Chips (CPU only) on &lt;strong&gt;macOS&lt;/strong&gt;. (As we do not optimize for Mac, the performance improvement is not significant now.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And new features coming soon:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Metal backend for sparse inference on macOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please kindly refer to our &lt;a href=&#34;https://github.com/orgs/SJTU-IPADS/projects/2/views/2&#34;&gt;Project Kanban&lt;/a&gt; for our current focus of development.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SJTU-IPADS/PowerInfer/main/#setup-and-installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SJTU-IPADS/PowerInfer/main/#model-weights&#34;&gt;Model Weights&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SJTU-IPADS/PowerInfer/main/#inference&#34;&gt;Inference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup and Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Pre-requisites&lt;/h3&gt; &#xA;&lt;p&gt;PowerInfer requires the following dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CMake (3.17+)&lt;/li&gt; &#xA; &lt;li&gt;Python (3.8+) and pip (19.3+), for converting model weights and automatic FFN offloading&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get the Code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/SJTU-IPADS/PowerInfer&#xA;cd PowerInfer&#xA;pip install -r requirements.txt # install Python helpers&#39; dependencies&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;In order to build PowerInfer you have two different options. These commands are supposed to be run from the root directory of the project.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;CMake&lt;/code&gt;(3.17+):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have an NVIDIA GPU:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -S . -B build -DLLAMA_CUBLAS=ON&#xA;cmake --build build --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have an AMD GPU:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Replace &#39;1100&#39; to your card architecture name, you can get it by rocminfo&#xA;CC=/opt/rocm/llvm/bin/clang CXX=/opt/rocm/llvm/bin/clang++ cmake -S . -B build -DLLAMA_HIPBLAS=ON -DAMDGPU_TARGETS=gfx1100&#xA;cmake --build build --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have just CPU:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -S . -B build&#xA;cmake --build build --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Model Weights&lt;/h2&gt; &#xA;&lt;p&gt;PowerInfer models are stored in a special format called &lt;em&gt;PowerInfer GGUF&lt;/em&gt; based on GGUF format, consisting of both LLM weights and predictor weights.&lt;/p&gt; &#xA;&lt;h3&gt;Download PowerInfer GGUF via Hugging Face&lt;/h3&gt; &#xA;&lt;p&gt;You can obtain PowerInfer GGUF weights at &lt;code&gt;*.powerinfer.gguf&lt;/code&gt; as well as profiled model activation statistics for &#39;hot&#39;-neuron offloading from each Hugging Face repo below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Base Model&lt;/th&gt; &#xA;   &lt;th&gt;PowerInfer GGUF&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA(ReLU)-2-7B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluLLaMA-7B-PowerInfer-GGUF&#34;&gt;PowerInfer/ReluLLaMA-7B-PowerInfer-GGUF&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA(ReLU)-2-13B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluLLaMA-13B-PowerInfer-GGUF&#34;&gt;PowerInfer/ReluLLaMA-13B-PowerInfer-GGUF&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Falcon(ReLU)-40B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluFalcon-40B-PowerInfer-GGUF&#34;&gt;PowerInfer/ReluFalcon-40B-PowerInfer-GGUF&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA(ReLU)-2-70B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluLLaMA-70B-PowerInfer-GGUF&#34;&gt;PowerInfer/ReluLLaMA-70B-PowerInfer-GGUF&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ProSparse-LLaMA-2-7B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/prosparse-llama-2-7b-gguf&#34;&gt;PowerInfer/ProSparse-LLaMA-2-7B-GGUF&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ProSparse-LLaMA-2-13B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/prosparse-llama-2-13b-gguf&#34;&gt;PowerInfer/ProSparse-LLaMA-2-13B-GGUF&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bamboo-base-7B üåü&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/Bamboo-base-v0.1-gguf&#34;&gt;PowerInfer/Bamboo-base-v0.1-gguf&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bamboo-DPO-7B üåü&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/Bamboo-DPO-v0.1-gguf&#34;&gt;PowerInfer/Bamboo-DPO-v0.1-gguf&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We recommend using &lt;a href=&#34;https://huggingface.co/docs/huggingface_hub/guides/cli&#34;&gt;&lt;code&gt;huggingface-cli&lt;/code&gt;&lt;/a&gt; to download the whole model repo. For example, the following command will download &lt;a href=&#34;https://huggingface.co/PowerInfer/ReluLLaMA-7B-PowerInfer-GGUF&#34;&gt;PowerInfer/ReluLLaMA-7B-PowerInfer-GGUF&lt;/a&gt; into the &lt;code&gt;./ReluLLaMA-7B&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;huggingface-cli download --resume-download --local-dir ReluLLaMA-7B --local-dir-use-symlinks False PowerInfer/ReluLLaMA-7B-PowerInfer-GGUF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As such, PowerInfer can automatically make use of the following directory structure for feature-complete model offloading:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;‚îú‚îÄ‚îÄ *.powerinfer.gguf (Unquantized PowerInfer model)&#xA;‚îú‚îÄ‚îÄ *.q4.powerinfer.gguf (INT4 quantized PowerInfer model, if available)&#xA;‚îú‚îÄ‚îÄ activation (Profiled activation statistics for fine-grained FFN offloading)&#xA;‚îÇ   ‚îú‚îÄ‚îÄ activation_x.pt (Profiled activation statistics for layer x)&#xA;‚îÇ   ‚îî‚îÄ‚îÄ ...&#xA;‚îú‚îÄ‚îÄ *.[q4].powerinfer.gguf.generated.gpuidx (Generated GPU index at runtime for corresponding model)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Convert from Original Model Weights + Predictor Weights&lt;/h3&gt; &#xA;&lt;p&gt;Hugging Face limits single model weight to 50GiB. For unquantized models &amp;gt;= 40B, you can convert PowerInfer GGUF from the original model weights and predictor weights obtained from Hugging Face.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Base Model&lt;/th&gt; &#xA;   &lt;th&gt;Original Model&lt;/th&gt; &#xA;   &lt;th&gt;Predictor&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA(ReLU)-2-7B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/SparseLLM/ReluLLaMA-7B&#34;&gt;SparseLLM/ReluLLaMA-7B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluLLaMA-7B-Predictor&#34;&gt;PowerInfer/ReluLLaMA-7B-Predictor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA(ReLU)-2-13B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/SparseLLM/ReluLLaMA-13B&#34;&gt;SparseLLM/ReluLLaMA-13B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluLLaMA-13B-Predictor&#34;&gt;PowerInfer/ReluLLaMA-13B-Predictor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Falcon(ReLU)-40B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/SparseLLM/ReluFalcon-40B&#34;&gt;SparseLLM/ReluFalcon-40B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluFalcon-40B-Predictor&#34;&gt;PowerInfer/ReluFalcon-40B-Predictor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA(ReLU)-2-70B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/SparseLLM/ReluLLaMA-70B&#34;&gt;SparseLLM/ReluLLaMA-70B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluLLaMA-70B-Predictor&#34;&gt;PowerInfer/ReluLLaMA-70B-Predictor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ProSparse-LLaMA-2-7B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/SparseLLM/prosparse-llama-2-7b&#34;&gt;SparseLLM/ProSparse-LLaMA-2-7B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/prosparse-llama-2-7b-predictor&#34;&gt;PowerInfer/ProSparse-LLaMA-2-7B-Predictor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ProSparse-LLaMA-2-13B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/SparseLLM/prosparse-llama-2-13b&#34;&gt;SparseLLM/ProSparse-LLaMA-2-13B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/prosparse-llama-2-13b-predictor&#34;&gt;PowerInfer/ProSparse-LLaMA-2-13B-Predictor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bamboo-base-7B üåü&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/Bamboo-base-v0_1&#34;&gt;PowerInfer/Bamboo-base-v0.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/Bamboo-base-v0.1-predictor&#34;&gt;PowerInfer/Bamboo-base-v0.1-predictor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bamboo-DPO-7B üåü&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/Bamboo-DPO-v0_1&#34;&gt;PowerInfer/Bamboo-DPO-v0.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/Bamboo-DPO-v0.1-predictor&#34;&gt;PowerInfer/Bamboo-DPO-v0.1-predictor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can use the following command to convert the original model weights and predictor weights to PowerInfer GGUF:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make sure that you have done `pip install -r requirements.txt`&#xA;python convert.py --outfile /PATH/TO/POWERINFER/GGUF/REPO/MODELNAME.powerinfer.gguf /PATH/TO/ORIGINAL/MODEL /PATH/TO/PREDICTOR&#xA;# python convert.py --outfile ./ReluLLaMA-70B-PowerInfer-GGUF/llama-70b-relu.powerinfer.gguf ./SparseLLM/ReluLLaMA-70B ./PowerInfer/ReluLLaMA-70B-Predictor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the same reason, we suggest keeping the same directory structure as PowerInfer GGUF repos after conversion.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Convert Original models into dense GGUF models(compatible with llama.cpp)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python convert-dense.py --outfile /PATH/TO/DENSE/GGUF/REPO/MODELNAME.gguf /PATH/TO/ORIGINAL/MODEL&#xA;# python convert-dense.py --outfile ./Bamboo-DPO-v0.1-gguf/bamboo-7b-dpo-v0.1.gguf --outtype f16 ./Bamboo-DPO-v0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Please note that the generated dense GGUF models might not work properly with llama.cpp, as we have altered activation functions (for ReluLLaMA and Prosparse models), or the model architecture (for Bamboo models). The dense GGUF models generated by convert-dense.py can be used for PowerInfer in dense inference mode, but might not work properly with llama.cpp.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Inference&lt;/h2&gt; &#xA;&lt;p&gt;For CPU-only and CPU-GPU hybrid inference with all available VRAM, you can use the following instructions to run PowerInfer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/main -m /PATH/TO/MODEL -n $output_token_count -t $thread_num -p $prompt&#xA;# e.g.: ./build/bin/main -m ./ReluFalcon-40B-PowerInfer-GGUF/falcon-40b-relu.q4.powerinfer.gguf -n 128 -t 8 -p &#34;Once upon a time&#34;&#xA;# For Windows: .\build\bin\Release\main.exe -m .\ReluFalcon-40B-PowerInfer-GGUF\falcon-40b-relu.q4.powerinfer.gguf -n 128 -t 8 -p &#34;Once upon a time&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to limit the VRAM usage of GPU:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/main -m /PATH/TO/MODEL -n $output_token_count -t $thread_num -p $prompt --vram-budget $vram_gb&#xA;# e.g.: ./build/bin/main -m ./ReluLLaMA-7B-PowerInfer-GGUF/llama-7b-relu.powerinfer.gguf -n 128 -t 8 -p &#34;Once upon a time&#34; --vram-budget 8&#xA;# For Windows: .\build\bin\Release\main.exe -m .\ReluLLaMA-7B-PowerInfer-GGUF\llama-7b-relu.powerinfer.gguf -n 128 -t 8 -p &#34;Once upon a time&#34; --vram-budget 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Under CPU-GPU hybrid inference, PowerInfer will automatically offload all dense activation blocks to GPU, then split FFN and offload to GPU if possible.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Dense inference mode (limited support)&lt;/summary&gt; &#xA; &lt;p&gt;If you want to run PowerInfer to infer with the dense variants of the PowerInfer model family, you can use similarly as llama.cpp does:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/main -m /PATH/TO/DENSE/MODEL -n $output_token_count -t $thread_num -p $prompt -ngl $num_gpu_layers&#xA;# e.g.: ./build/bin/main -m ./Bamboo-base-v0.1-gguf/bamboo-7b-v0.1.gguf -n 128 -t 8 -p &#34;Once upon a time&#34; -ngl 12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;So is the case for other &lt;code&gt;examples/&lt;/code&gt; like &lt;code&gt;server&lt;/code&gt; and &lt;code&gt;batched_generation&lt;/code&gt;. Please note that the dense inference mode is not a &#34;compatible mode&#34; for all models. We have altered activation functions (for ReluLLaMA and Prosparse models) in this mode to match with our model family.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Serving, Perplexity Evaluation, and more applications&lt;/h2&gt; &#xA;&lt;p&gt;PowerInfer supports serving and batched generation with the same instructions as llama.cpp. Generally, you can use the same command as llama.cpp, except for &lt;code&gt;-ngl&lt;/code&gt; argument which has been replaced by &lt;code&gt;--vram-budget&lt;/code&gt; for PowerInfer. Please refer to the detailed instructions in each &lt;code&gt;examples/&lt;/code&gt; directory. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SJTU-IPADS/PowerInfer/main/examples/server/README.md&#34;&gt;Serving&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SJTU-IPADS/PowerInfer/main/examples/perplexity/README.md&#34;&gt;Perplexity Evaluation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SJTU-IPADS/PowerInfer/main/examples/batched/README.md&#34;&gt;Batched Generation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quantization&lt;/h2&gt; &#xA;&lt;p&gt;PowerInfer has optimized quantization support for INT4(&lt;code&gt;Q4_0&lt;/code&gt;) models. You can use the following instructions to quantize PowerInfer GGUF model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/quantize /PATH/TO/MODEL /PATH/TO/OUTPUT/QUANTIZED/MODEL Q4_0&#xA;# e.g.: ./build/bin/quantize ./ReluFalcon-40B-PowerInfer-GGUF/falcon-40b-relu.powerinfer.gguf ./ReluFalcon-40B-PowerInfer-GGUF/falcon-40b-relu.q4.powerinfer.gguf Q4_0&#xA;# For Windows: .\build\bin\Release\quantize.exe .\ReluFalcon-40B-PowerInfer-GGUF\falcon-40b-relu.powerinfer.gguf .\ReluFalcon-40B-PowerInfer-GGUF\falcon-40b-relu.q4.powerinfer.gguf Q4_0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can use the quantized model for inference with PowerInfer with the same instructions as above.&lt;/p&gt; &#xA;&lt;h2&gt;More Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SJTU-IPADS/PowerInfer/main/docs/token_generation_performance_tips.md&#34;&gt;Performance troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;We evaluated PowerInfer vs. llama.cpp on a single RTX 4090(24G) with a series of FP16 ReLU models under inputs of length 64, and the results are shown below. PowerInfer achieves up to 11x speedup on Falcon 40B and up to 3x speedup on Llama 2 70B.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/SJTU-IPADS/PowerInfer/assets/34213478/d700fa6c-77ba-462f-a2fc-3fd21c898f33&#34; alt=&#34;github-eval-4090&#34;&gt; &lt;sub&gt;The X axis indicates the output length, and the Y axis represents the speedup compared with llama.cpp. The number above each bar indicates the end-to-end generation speed (total prompting + generation time / total tokens generated, in tokens/s).&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;We also evaluated PowerInfer on a single RTX 2080Ti(11G) with INT4 ReLU models under inputs of length 8, and the results are illustrated in the same way as above. PowerInfer achieves up to 8x speedup on Falcon 40B and up to 3x speedup on Llama 2 70B.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/SJTU-IPADS/PowerInfer/assets/34213478/0fc1bfc4-aafc-4e82-a865-bec0143aff1a&#34; alt=&#34;github-eval-2080ti-q4&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please refer to our &lt;a href=&#34;https://ipads.se.sjtu.edu.cn/_media/publications/powerinfer-20231219.pdf&#34;&gt;paper&lt;/a&gt; for more evaluation details.&lt;/p&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;What if I encountered &lt;code&gt;CUDA_ERROR_OUT_OF_MEMORY&lt;/code&gt;?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can try to run with &lt;code&gt;--reset-gpu-index&lt;/code&gt; argument to rebuild the GPU index for this model to avoid any stale cache.&lt;/li&gt; &#xA;   &lt;li&gt;Due to our current implementation, model offloading might not be as accurate as expected. You can try with &lt;code&gt;--vram-budget&lt;/code&gt; with a slightly lower value or &lt;code&gt;--disable-gpu-index&lt;/code&gt; to disable FFN offloading.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Does PowerInfer support mistral, original llama, Qwen, ...?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Now we only support models with ReLU/ReGLU/Squared ReLU activation function. So we do not support these models now. It&#39;s worth mentioning that a &lt;a href=&#34;https://arxiv.org/pdf/2310.04564.pdf&#34;&gt;paper&lt;/a&gt; has demonstrated that using the ReLU/ReGLU activation function has a negligible impact on convergence and performance.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why is there a noticeable downgrade in the performance metrics of our current ReLU model, particularly the 70B model?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In contrast to the typical requirement of around 2T tokens for LLM training, our model&#39;s fine-tuning was conducted with only 5B tokens. This insufficient retraining has resulted in the model&#39;s inability to regain its original performance. We are actively working on updating to a more capable model, so please stay tuned.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;What if...&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Issues are welcomed! Please feel free to open an issue and attach your running environment and running parameters. We will try our best to help you.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;TODOs&lt;/h2&gt; &#xA;&lt;p&gt;We will release the code and data in the following order, please stay tuned!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Release core code of PowerInfer, supporting Llama-2, Falcon-40B.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support &lt;del&gt;Mistral-7B&lt;/del&gt; (Bamboo-7B)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support Windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support text-generation-webui&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Release perplexity evaluation code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support Metal for Mac&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Release code for OPT models&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Release predictor training code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support online split for FFN network&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support Multi-GPU&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Paper and Citation&lt;/h2&gt; &#xA;&lt;p&gt;More technical details can be found in our &lt;a href=&#34;https://ipads.se.sjtu.edu.cn/_media/publications/powerinfer-20231219.pdf&#34;&gt;paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you find PowerInfer useful or relevant to your project and research, please kindly cite our paper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{song2023powerinfer,&#xA;      title={PowerInfer: Fast Large Language Model Serving with a Consumer-grade GPU},&#xA;      author={Yixin Song and Zeyu Mi and Haotong Xie and Haibo Chen},&#xA;      year={2023},&#xA;      eprint={2312.12456},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.LG}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;We are thankful for the easily modifiable operator library &lt;a href=&#34;https://github.com/ggerganov/ggml&#34;&gt;ggml&lt;/a&gt; and execution runtime provided by &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt;. We also extend our gratitude to &lt;a href=&#34;https://nlp.csai.tsinghua.edu.cn/&#34;&gt;THUNLP&lt;/a&gt; for their support of ReLU-based sparse models. We also appreciate the research of &lt;a href=&#34;https://proceedings.mlr.press/v202/liu23am.html&#34;&gt;Deja Vu&lt;/a&gt;, which inspires PowerInfer.&lt;/p&gt;</summary>
  </entry>
</feed>