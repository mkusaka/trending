<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-03T01:26:55Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>starkware-libs/stone-prover</title>
    <updated>2023-09-03T01:26:55Z</updated>
    <id>tag:github.com,2023-09-03:/starkware-libs/stone-prover</id>
    <link href="https://github.com/starkware-libs/stone-prover" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starkware.co/stark/&#34;&gt;STARK&lt;/a&gt; is a proof system. It uses cutting-edge cryptography to provide poly-logarithmic verification resources and proof size, with minimal and post-quantum-secure assumptions.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains a prover and a verifier for STARKs, and in particular for the CPU AIR underlying the CairoZero programming language.&lt;/p&gt; &#xA;&lt;h1&gt;Installation instructions&lt;/h1&gt; &#xA;&lt;h2&gt;Building using the dockerfile&lt;/h2&gt; &#xA;&lt;p&gt;The root directory contains a dedicated Dockerfile which automatically builds the package and runs the unit tests on a simulated machine. You should have docker installed (see &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;https://docs.docker.com/get-docker/&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/starkware-libs/stone-prover.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build --tag prover .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run an end-to-end test with an example cairo program. Once the docker image is built, you can fetch the prover and verifier executables using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;container_id=$(docker create prover)&#xA;docker cp -L ${container_id}:/bin/cpu_air_prover .&#xA;docker cp -L ${container_id}:/bin/cpu_air_verifier .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating and verifying a proof of a CairoZero program&lt;/h2&gt; &#xA;&lt;p&gt;To run and prove the example program &lt;code&gt;fibonacci.cairo&lt;/code&gt;, install &lt;code&gt;cairo-lang&lt;/code&gt; version 0.12.0 (see further instructions in the &lt;a href=&#34;https://github.com/starkware-libs/cairo-lang/tree/v0.12.0&#34;&gt;cairo-lang repository&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install cairo-lang==0.12.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Navigate to the example test directory (&lt;code&gt;e2e_test&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd e2e_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile &lt;code&gt;fibonacci.cairo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cairo-compile fibonacci.cairo --output fibonacci_compiled.json --proof_mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the compiled program to generate the prover input files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cairo-run \&#xA;    --program=fibonacci_compiled.json \&#xA;    --layout=small \&#xA;    --program_input=fibonacci_input.json \&#xA;    --air_public_input=fibonacci_public_input.json \&#xA;    --air_private_input=fibonacci_private_input.json \&#xA;    --trace_file=fibonacci_trace.json \&#xA;    --memory_file=fibonacci_memory.json \&#xA;    --print_output \&#xA;    --proof_mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the prover:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cpu_air_prover \&#xA;    --out_file=fibonacci_proof.json \&#xA;    --private_input_file=fibonacci_private_input.json \&#xA;    --public_input_file=fibonacci_public_input.json \&#xA;    --prover_config_file=cpu_air_prover_config.json \&#xA;    --parameter_file=cpu_air_params.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The proof is now available in the file &lt;code&gt;fibonacci_proof.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, run the verifier to verify the proof:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cpu_air_verifier --in_file=fibonacci_proof.json &amp;amp;&amp;amp; echo &#34;Successfully verified example proof.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The verifier only checks that the proof is consistent with the public input section that appears in the proof file. The public input section itself is not checked. For example, the verifier does not check what CairoZero program is being proved, or that the builtins memory segments are of valid size. These things need to be checked externally.&lt;/p&gt;</summary>
  </entry>
</feed>