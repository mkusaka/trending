<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-19T01:42:33Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ValveSoftware/GameNetworkingSockets</title>
    <updated>2023-07-19T01:42:33Z</updated>
    <id>tag:github.com,2023-07-19:/ValveSoftware/GameNetworkingSockets</id>
    <link href="https://github.com/ValveSoftware/GameNetworkingSockets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reliable &amp; unreliable messages over UDP. Robust message fragmentation &amp; reassembly. P2P networking / NAT traversal. Encryption.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GameNetworkingSockets &lt;a href=&#34;https://github.com/ValveSoftware/GameNetworkingSockets/actions&#34;&gt;&lt;img src=&#34;https://github.com/ValveSoftware/GameNetworkingSockets/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;GameNetworkingSockets is a basic transport layer for games. The features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connection-oriented API (like TCP)&lt;/li&gt; &#xA; &lt;li&gt;... but message-oriented (like UDP), not stream-oriented.&lt;/li&gt; &#xA; &lt;li&gt;Supports both reliable and unreliable message types&lt;/li&gt; &#xA; &lt;li&gt;Messages can be larger than underlying MTU. The protocol performs fragmentation, reassembly, and retransmission for reliable messages.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/ValveSoftware/GameNetworkingSockets/master/src/steamnetworkingsockets/clientlib/SNP_WIRE_FORMAT.md&#34;&gt;reliability layer&lt;/a&gt; significantly more sophisticated than a basic TCP-style sliding window. It is based on the &#34;ack vector&#34; model from DCCP (RFC 4340, section 11.4) and Google QUIC and discussed in the context of games by &lt;a href=&#34;https://gafferongames.com/post/reliable_ordered_messages/&#34;&gt;Glenn Fiedler&lt;/a&gt;. The basic idea is for the receiver to efficiently communicate to the sender the status of every packet number (whether or not a packet was received with that number). By remembering which segments were sent in each packet, the sender can deduce which segments need to be retransmitted.&lt;/li&gt; &#xA; &lt;li&gt;Encryption. AES-GCM-256 per packet, &lt;a href=&#34;https://cr.yp.to/ecdh.html&#34;&gt;Curve25519&lt;/a&gt; for key exchange and cert signatures. The details for shared key derivation and per-packet IV are based on the &lt;a href=&#34;https://docs.google.com/document/d/1g5nIXAIkN_Y-7XJW5K45IblHd_L2f5LTaDUDwvZ5L6g/edit?usp=sharing&#34;&gt;design&lt;/a&gt; used by Google&#39;s QUIC protocol.&lt;/li&gt; &#xA; &lt;li&gt;Tools for simulating packet latency/loss, and detailed stats measurement&lt;/li&gt; &#xA; &lt;li&gt;Head-of-line blocking control and bandwidth sharing of multiple message streams (&#34;lanes&#34;) on the same connection. You can use strict priority values, softer &lt;a href=&#34;https://en.wikipedia.org/wiki/Weighted_fair_queueing&#34;&gt;weight values&lt;/a&gt; that control how bandwidth is shared, or some combination of the two methods. See &lt;a href=&#34;https://raw.githubusercontent.com/ValveSoftware/GameNetworkingSockets/master/include/steam/isteamnetworkingsockets.h&#34;&gt;&lt;code&gt;ISteamNetworkingSockets::ConfigureConnectionLanes&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;IPv6 support&lt;/li&gt; &#xA; &lt;li&gt;Peer-to-peer networking: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NAT traversal through google WebRTC&#39;s ICE implementation.&lt;/li&gt; &#xA;   &lt;li&gt;Plug in your own signaling service.&lt;/li&gt; &#xA;   &lt;li&gt;Unique &#34;symmetric connect&#34; mode.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ValveSoftware/GameNetworkingSockets/master/include/steam/isteamnetworkingmessages.h&#34;&gt;&lt;code&gt;ISteamNetworkingMessages&lt;/code&gt;&lt;/a&gt; is an interface designed to make it easy to port UDP-based code to P2P use cases. (By UDP-based, we mean non-connection-oriented code, where each time you send a packet, you specify the recipient&#39;s address.)&lt;/li&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ValveSoftware/GameNetworkingSockets/master/README_P2P.md&#34;&gt;README_P2P.md&lt;/a&gt; for more info&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Cross platform. This library has shipped on consoles, mobile platforms, and non-Steam stores, and has been used to facilitate cross-platform connectivity. Contact us to get access to the code. (We are not allowed to distribute it here.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;What it does &lt;em&gt;not&lt;/em&gt; do:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Higher level serialization of entities, delta encoding of changed state variables, etc&lt;/li&gt; &#xA; &lt;li&gt;Compression&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick API overview&lt;/h2&gt; &#xA;&lt;p&gt;To get an idea of what the API is like, here are a few things to check out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/ValveSoftware/GameNetworkingSockets/master/include/steam&#34;&gt;include/steam&lt;/a&gt; folder has the public API headers. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ValveSoftware/GameNetworkingSockets/master/include/steam/isteamnetworkingsockets.h&#34;&gt;&lt;code&gt;ISteamNetworkingSockets&lt;/code&gt;&lt;/a&gt; is the most important interface.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ValveSoftware/GameNetworkingSockets/master/include/steam/steamnetworkingtypes.h&#34;&gt;&lt;code&gt;steamnetworkingtypes.h&lt;/code&gt;&lt;/a&gt; has misc types and declarations.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://partner.steamgames.com/doc/api/ISteamNetworkingSockets&#34;&gt;Steamworks SDK documentation&lt;/a&gt; offers web-based documentation for these APIs. Note that some features are only available on Steam, such as Steam&#39;s authentication service, signaling service, and the SDR relay service.&lt;/li&gt; &#xA; &lt;li&gt;Look at these examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ValveSoftware/GameNetworkingSockets/master/examples/example_chat.cpp&#34;&gt;example_chat.cpp&lt;/a&gt;. Very simple client/server program using all reliable messages over ordinary IPv4.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ValveSoftware/GameNetworkingSockets/master/tests/test_p2p.cpp&#34;&gt;test_p2p.cpp&lt;/a&gt;. Shows how to get two hosts to connect to each other using P2P connectivity. Also an example of how to write a signaling service plugin.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ValveSoftware/GameNetworkingSockets/master/BUILDING.md&#34;&gt;BUILDING&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Language bindings&lt;/h2&gt; &#xA;&lt;p&gt;The library was written in C++, but there is also a plain C interface to facilitate binding to other languages.&lt;/p&gt; &#xA;&lt;p&gt;Third party language bindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C#: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nxrighthere/ValveSockets-CSharp&#34;&gt;https://github.com/nxrighthere/ValveSockets-CSharp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Facepunch/Facepunch.Steamworks&#34;&gt;https://github.com/Facepunch/Facepunch.Steamworks&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Go: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nielsAD/gns/&#34;&gt;https://github.com/nielsAD/gns/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why do I see &#34;Steam&#34; everywhere?&lt;/h2&gt; &#xA;&lt;p&gt;The main interface class is named SteamNetworkingSockets, and many files have &#34;steam&#34; in their name. But &lt;em&gt;Steam is not needed&lt;/em&gt;. If you don&#39;t make games or aren&#39;t on Steam, feel free to use this code for whatever purpose you want.&lt;/p&gt; &#xA;&lt;p&gt;The reason for &#34;Steam&#34; in the names is that this provides a subset of the functionality of the &lt;a href=&#34;https://partner.steamgames.com/doc/api/ISteamNetworkingSockets&#34;&gt;API&lt;/a&gt; with the same name in the Steamworks SDK. Our main reason for releasing this code is so that developers won&#39;t have any hesitation coding to the API in the Steamworks SDK. On Steam, you will link against the Steamworks version, and you can access the additional services provided by the &lt;a href=&#34;https://partner.steamgames.com/doc/features/multiplayer/steamdatagramrelay&#34;&gt;Steam Datagram Relay&lt;/a&gt; network. On other platforms and stores, as long as you ship a version of your game on Steam, you might be able to take advantage of these services. See the Steamworks documentation for more information. Because this is a live service, and we need to control our security and backward compatibility burden, at this time we are not able to offer access to SDR on other platforms to all partners.&lt;/p&gt; &#xA;&lt;p&gt;If you aren&#39;t a Steam partner, or don&#39;t have a version of your game on Steam, then use this opensource version of the API and take advantage of the permissive license to do whatever you want. We want you to take maximum advantage of the features in the Steamworks version. That won&#39;t happen if this API is a weird &#34;wart&#34; that&#39;s hidden behind &lt;code&gt;#ifdef STEAM&lt;/code&gt;, which is why we&#39;re making this opensource version available.&lt;/p&gt; &#xA;&lt;p&gt;The desire to match the Steamworks SDK also explains a somewhat anachronistic coding style and weird directory layout. This project is kept in sync with the Steam code here at Valve. When we extracted the code from the much larger codebase, we had to do some relatively gross hackery. The files in folders named &lt;code&gt;tier0&lt;/code&gt;, &lt;code&gt;tier1&lt;/code&gt;, &lt;code&gt;vstdlib&lt;/code&gt;, &lt;code&gt;common&lt;/code&gt;, etc have especially suffered trauma. Also if you see code that appears to have unnecessary layers of abstraction, it&#39;s probably because those layers are needed to support relayed connection types or some part of the Steamworks SDK.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Did you find a security vulnerability? Please inform us responsibly; you may be eligible for a bug bounty. See the &lt;a href=&#34;https://raw.githubusercontent.com/ValveSoftware/GameNetworkingSockets/master/SECURITY.md&#34;&gt;security policy&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gem5/gem5</title>
    <updated>2023-07-19T01:42:33Z</updated>
    <id>tag:github.com,2023-07-19:/gem5/gem5</id>
    <link href="https://github.com/gem5/gem5" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official repository for the gem5 computer-system architecture simulator.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is the gem5 simulator.&lt;/p&gt; &#xA;&lt;p&gt;The main website can be found at &lt;a href=&#34;http://www.gem5.org&#34;&gt;http://www.gem5.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A good starting point is &lt;a href=&#34;http://www.gem5.org/about&#34;&gt;http://www.gem5.org/about&lt;/a&gt;, and for more information about building the simulator and getting started please see &lt;a href=&#34;http://www.gem5.org/documentation&#34;&gt;http://www.gem5.org/documentation&lt;/a&gt; and &lt;a href=&#34;http://www.gem5.org/documentation/learning_gem5/introduction&#34;&gt;http://www.gem5.org/documentation/learning_gem5/introduction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build gem5, you will need the following software: g++ or clang, Python (gem5 links in the Python interpreter), SCons, zlib, m4, and lastly protobuf if you want trace capture and playback support. Please see &lt;a href=&#34;http://www.gem5.org/documentation/general_docs/building&#34;&gt;http://www.gem5.org/documentation/general_docs/building&lt;/a&gt; for more details concerning the minimum versions of these tools.&lt;/p&gt; &#xA;&lt;p&gt;Once you have all dependencies resolved, type &#39;scons build/&#xA; &lt;config&gt;&#xA;  /gem5.opt&#39; where CONFIG is one of the options in build_opts like ARM, NULL, MIPS, POWER, SPARC, X86, Garnet_standalone, etc. This will build an optimized version of the gem5 binary (gem5.opt) with the the specified configuration. See &#xA;  &lt;a href=&#34;http://www.gem5.org/documentation/general_docs/building&#34;&gt;http://www.gem5.org/documentation/general_docs/building&lt;/a&gt; for more details and options.&#xA; &lt;/config&gt;&lt;/p&gt; &#xA;&lt;p&gt;The main source tree includes these subdirectories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;build_opts: pre-made default configurations for gem5&lt;/li&gt; &#xA; &lt;li&gt;build_tools: tools used internally by gem5&#39;s build process.&lt;/li&gt; &#xA; &lt;li&gt;configs: example simulation configuration scripts&lt;/li&gt; &#xA; &lt;li&gt;ext: less-common external packages needed to build gem5&lt;/li&gt; &#xA; &lt;li&gt;include: include files for use in other programs&lt;/li&gt; &#xA; &lt;li&gt;site_scons: modular components of the build system&lt;/li&gt; &#xA; &lt;li&gt;src: source code of the gem5 simulator&lt;/li&gt; &#xA; &lt;li&gt;system: source for some optional system software for simulated systems&lt;/li&gt; &#xA; &lt;li&gt;tests: regression tests&lt;/li&gt; &#xA; &lt;li&gt;util: useful utility programs and files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run full-system simulations, you may need compiled system firmware, kernel binaries and one or more disk images, depending on gem5&#39;s configuration and what type of workload you&#39;re trying to run. Many of those resources can be downloaded from &lt;a href=&#34;http://resources.gem5.org&#34;&gt;http://resources.gem5.org&lt;/a&gt;, and/or from the git repository here: &lt;a href=&#34;https://gem5.googlesource.com/public/gem5-resources/&#34;&gt;https://gem5.googlesource.com/public/gem5-resources/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have questions, please send mail to &lt;a href=&#34;mailto:gem5-users@gem5.org&#34;&gt;gem5-users@gem5.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enjoy using gem5 and please share your modifications and extensions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>giuspen/cherrytree</title>
    <updated>2023-07-19T01:42:33Z</updated>
    <id>tag:github.com,2023-07-19:/giuspen/cherrytree</id>
    <link href="https://github.com/giuspen/cherrytree" rel="alternate"></link>
    <summary type="html">&lt;p&gt;cherrytree&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CherryTree&lt;/h1&gt; &#xA;&lt;p&gt;A hierarchical note taking application, featuring rich text and syntax highlighting, storing data in a single XML or SQLite file. The project home page is &lt;a href=&#34;https://www.giuspen.net/cherrytree/&#34;&gt;giuspen.net/cherrytree&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation Guide&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giuspen/cherrytree/master/#building-cherrytree-on-ubuntu&#34;&gt;Debian/Linux Mint/Ubuntu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giuspen/cherrytree/master/#building-cherrytree-on-arch&#34;&gt;Arch Linux/Manjaro Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giuspen/cherrytree/master/#building-cherrytree-on-gentoo&#34;&gt;Gentoo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giuspen/cherrytree/master/#building-cherrytree-on-fedora&#34;&gt;Fedora&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giuspen/cherrytree/master/#building-cherrytree-on-opensuse&#34;&gt;Opensuse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giuspen/cherrytree/master/#building-cherrytree-on-macos&#34;&gt;MacOs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giuspen/cherrytree/master/#building-cherrytree-on-windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links on used libraries&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gtkmm.org/en/documentation.shtml&#34;&gt;https://www.gtkmm.org/en/documentation.shtml&lt;/a&gt; &lt;a href=&#34;https://developer-old.gnome.org/gtkmm-tutorial/3.24/&#34;&gt;https://developer-old.gnome.org/gtkmm-tutorial/3.24/&lt;/a&gt; &lt;a href=&#34;https://developer-old.gnome.org/gtkmm/3.24/&#34;&gt;https://developer-old.gnome.org/gtkmm/3.24/&lt;/a&gt; &lt;a href=&#34;https://developer-old.gnome.org/gtkmm/3.24/hierarchy.html&#34;&gt;https://developer-old.gnome.org/gtkmm/3.24/hierarchy.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer-old.gnome.org/gtksourceviewmm/stable/&#34;&gt;https://developer-old.gnome.org/gtksourceviewmm/stable/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer-old.gnome.org/libxml++-tutorial/stable/&#34;&gt;https://developer-old.gnome.org/libxml++-tutorial/stable/&lt;/a&gt; &lt;a href=&#34;https://developer-old.gnome.org/libxml++/stable/&#34;&gt;https://developer-old.gnome.org/libxml++/stable/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.gnome.org/Projects/gspell&#34;&gt;https://wiki.gnome.org/Projects/gspell&lt;/a&gt; &lt;a href=&#34;https://developer-old.gnome.org/gspell/stable/&#34;&gt;https://developer-old.gnome.org/gspell/stable/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build/Debug with Visual Studio Code on Linux&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/setup/linux&#34;&gt;https://code.visualstudio.com/docs/setup/linux&lt;/a&gt; required installation of Extension &#34;C/C++&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd cherrytree&#xA;code .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build with: Ctrl+Shift+B Debug with: F5&lt;/p&gt; &#xA;&lt;h2&gt;Build/Debug with Visual Studio Code using a container&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to use a container as a full-featured development environment from VS Code. This works on any operating system that supports Docker.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://code.visualstudio.com/docs/remote/containers#_system-requirements&#34;&gt;system requirements&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open the project in VS Code.&lt;/li&gt; &#xA; &lt;li&gt;(optional) Edit &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; to set your &lt;code&gt;DISPLAY&lt;/code&gt; environment variable and/or edit other settings. It is also possible to run the container on a remote Docker host, see the comment at the end.&lt;/li&gt; &#xA; &lt;li&gt;Run the &lt;em&gt;Remote-Containers: Open Folder in Container...&lt;/em&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;See previous section for Build and Debug instructions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;To create a debian package&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./build.sh deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Cherrytree on Ubuntu&lt;/h2&gt; &#xA;&lt;p&gt;Install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install build-essential cmake ninja-build libgtkmm-3.0-dev libgtksourceviewmm-3.0-dev libxml++2.6-dev libsqlite3-dev gettext libgspell-1-dev libcurl4-openssl-dev libuchardet-dev libfribidi-dev libvte-2.91-dev libfmt-dev libspdlog-dev&#xA;sudo apt install texlive-latex-base dvipng # optional for LatexBoxes support&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: On Debian10 / Ubuntu 18.04 libfmt-dev and libspdlog-dev are not used since too old; bundled source code is built instead Get cherrytree source, compile and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/giuspen/cherrytree.git&#xA;cd cherrytree&#xA;git submodule update --init&#xA;./build.sh&#xA;./build/cherrytree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install documentation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install devhelp libgtkmm-3.0-doc libgtksourceviewmm-3.0-doc libglibmm-2.4-doc libpangomm-1.4-doc libxml++2.6-doc libgspell-1-doc libvte-2.91-doc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;devhelp&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xdg-open /usr/share/doc/libgtkmm-3.0-doc/reference/html/index.html&#xA;xdg-open /usr/share/doc/libgtksourceviewmm-3.0-doc/reference/html/index.html&#xA;xdg-open /usr/share/doc/libglibmm-2.4-doc/reference/html/index.html&#xA;xdg-open /usr/share/doc/libpangomm-1.4-doc/reference/html/index.html&#xA;xdg-open /usr/share/doc/libxml++2.6-doc/reference/html/index.html&#xA;xdg-open /usr/share/doc/libgspell-1-dev/html/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Cherrytree on Arch&lt;/h2&gt; &#xA;&lt;p&gt;Install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -S gtksourceviewmm libxml++2.6 gspell uchardet fmt spdlog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get cherrytree source, compile and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/giuspen/cherrytree.git&#xA;cd cherrytree&#xA;git submodule update --init&#xA;./build.sh&#xA;./build/cherrytree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Cherrytree on Gentoo&lt;/h2&gt; &#xA;&lt;p&gt;Build and Install cherrytree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo emerge cherrytree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Cherrytree on Fedora&lt;/h2&gt; &#xA;&lt;p&gt;Install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install cmake ninja-build gcc-c++ gtkmm30-devel gtksourceviewmm3-devel gspell-devel libxml++-devel libcurl-devel uchardet-devel fmt-devel spdlog-devel vte291-devel sqlite-devel&#xA;sudo dnf install texlive-scheme-basic texlive-dvipng # optional for LatexBoxes support&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get cherrytree source, compile and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/giuspen/cherrytree.git&#xA;cd cherrytree&#xA;git submodule update --init&#xA;./build.sh&#xA;./build/cherrytree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;To create an rpm package&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install rpm-build&#xA;./build.sh rpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(OPTIONAL) Download Documentation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install gtkmm30-doc gtksourceviewmm3-doc glibmm24-doc glibmm24-doc libxml++-doc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(OPTIONAL) Open Documentation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xdg-open /usr/share/doc/gtkmm-3.0/reference/html/index.html&#xA;xdg-open /usr/share/doc/gtksourceviewmm-3.0/reference/html/index.html&#xA;xdg-open /usr/share/doc/glibmm-2.4/reference/html/index.html&#xA;xdg-open /usr/share/doc/pangomm-1.4/reference/html/index.html&#xA;xdg-open /usr/share/doc/libxml++2.6/reference/html/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Cherrytree on OpenSuse&lt;/h2&gt; &#xA;&lt;p&gt;Install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo zypper install cmake ninja gcc-c++ gtkmm3-devel gtksourceviewmm3_0-devel gspell-devel libxml++26-devel sqlite3-devel libcurl-devel libuchardet-devel fmt-devel spdlog-devel vte-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get cherrytree source, compile and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/giuspen/cherrytree.git&#xA;cd cherrytree&#xA;git submodule update --init&#xA;./build.sh&#xA;./build/cherrytree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;To create an rpm package&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo zypper install rpm-build&#xA;./build.sh rpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Cherrytree on MacOS&lt;/h2&gt; &#xA;&lt;p&gt;Cherrytree is now part of &lt;a href=&#34;https://brew.sh/index_it&#34;&gt;Homebrew&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew update&#xA;brew install cherrytree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If for any reason you prefer to build it yourself, install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install cmake ninja pkg-config python3 adwaita-icon-theme fmt gspell gtksourceviewmm3 libxml++ spdlog uchardet fribidi curl vte3&#xA;brew link icu4c --force&#xA;brew install --cask basictex&#xA;sudo tlmgr update --self&#xA;sudo tlmgr install dvipng&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get cherrytree source, compile and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/giuspen/cherrytree.git&#xA;cd cherrytree&#xA;git submodule update --init&#xA;export PKG_CONFIG_PATH=&#34;/usr/local/opt/icu4c/lib/pkgconfig&#34;&#xA;./build.sh&#xA;./build/cherrytree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Cherrytree on Windows&lt;/h2&gt; &#xA;&lt;p&gt;Install MSYS2: &lt;a href=&#34;https://www.msys2.org/&#34;&gt;https://www.msys2.org/&lt;/a&gt; (we cover here the packages for 64 bit installation)&lt;/p&gt; &#xA;&lt;p&gt;Launch &#39;MSYS2 MinGW 64-bit&#39; terminal (there are 3 different terminals, make sure it is 64-bit otherwise it will cause issues)&lt;/p&gt; &#xA;&lt;p&gt;Run the following command multiple times there until there are no more updates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -Syuu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install required packages to build cherrytree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# toolchain, cmake, ninja&#xA;pacman -S --needed --noconfirm mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja&#xA;# gtkmm3, gtksourceviewmm3, libxml++2.6, sqlite3&#xA;pacman -S --needed --noconfirm mingw-w64-x86_64-gtkmm3 mingw-w64-x86_64-gtksourceviewmm3 mingw-w64-x86_64-libxml++2.6 mingw-w64-x86_64-sqlite3&#xA;# gspell, curl, uchardet, fribidi, fmt, spdlog&#xA;pacman -S --needed --noconfirm mingw-w64-x86_64-gspell mingw-w64-x86_64-curl mingw-w64-x86_64-uchardet mingw-w64-x86_64-fribidi mingw-w64-x86_64-fmt mingw-w64-x86_64-spdlog&#xA;# latex, dvipng, gettext, git, nano&#xA;pacman -S --needed --noconfirm mingw-w64-x86_64-texlive-core mingw-w64-x86_64-gettext git nano&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;use native windows theme&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir /etc/gtk-3.0&#xA;nano /etc/gtk-3.0/settings.ini&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[Settings]&#xA;gtk-theme-name=win32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;console settings&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nano ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;CHERRYTREE_CONFIG_FOLDER=&#34;C:/Users/${USER}/AppData/Local/cherrytree&#34;&#xA;[ -d ${CHERRYTREE_CONFIG_FOLDER} ] || mkdir -p ${CHERRYTREE_CONFIG_FOLDER}&#xA;alias l=&#34;ls -lah --color&#34;&#xA;alias g=git&#xA;bind &#39;&#34;\e[A&#34;:history-search-backward&#39;&#xA;bind &#39;&#34;\e[B&#34;:history-search-forward&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get cherrytree source, compile and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/giuspen/cherrytree.git&#xA;cd cherrytree&#xA;git submodule update --init&#xA;./build.sh&#xA;./build/cherrytree.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Troubleshooting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cannot build: make sure to start 64-bit terminal&lt;/li&gt; &#xA; &lt;li&gt;Cannot build: remove &lt;code&gt;cherrytree/build&lt;/code&gt; folder and start &lt;code&gt;build.sh&lt;/code&gt; script again&lt;/li&gt; &#xA; &lt;li&gt;Cannot start cherrytree: you either have to run cherrytree from the msys2 mingw64 terminal or copy and replace cherrytree in &lt;code&gt;cherrytree_0.99.X_win64_portable&lt;/code&gt; folder (downloaded from the site) by the new one, so dependencies are fulfilled&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>