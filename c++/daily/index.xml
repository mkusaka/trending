<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-22T01:30:50Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>duckdb/ducklake</title>
    <updated>2025-06-22T01:30:50Z</updated>
    <id>tag:github.com,2025-06-22:/duckdb/ducklake</id>
    <link href="https://github.com/duckdb/ducklake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DuckLake is an integrated data lake and catalog format&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;../logo/DuckLake_Logo-horizontal.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;../logo/DuckLake_Logo-horizontal-dark.svg&#34;&gt; &#xA;  &lt;img alt=&#34;DuckLake logo&#34; src=&#34;https://raw.githubusercontent.com/duckdb/ducklake/logo/DuckLake_Logo-horizontal.svg?sanitize=true&#34; height=&#34;100&#34;&gt; &#xA; &lt;/picture&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;DuckDB DuckLake Extension&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;DuckLake is released under version 0.1 and is currently experimental. If you encounter any issues, please file them &lt;a href=&#34;https://github.com/duckdb/ducklake/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;DuckLake is an open Lakehouse format that is built on SQL and Parquet. DuckLake stores metadata in a &lt;a href=&#34;https://ducklake.select/docs/stable/duckdb/usage/choosing_a_catalog_database&#34;&gt;catalog database&lt;/a&gt;, and stores data in Parquet files. The DuckLake extension allows DuckDB to directly read and write data from DuckLake.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://ducklake.select&#34;&gt;DuckLake website&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;DuckLake can be installed using the &lt;code&gt;INSTALL&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSTALL ducklake;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The latest development version can be installed from &lt;code&gt;core_nightly&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;FORCE INSTALL ducklake FROM core_nightly;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;DuckLake databases can be attached using the &lt;a href=&#34;https://duckdb.org/docs/stable/sql/statements/attach.html&#34;&gt;&lt;code&gt;ATTACH&lt;/code&gt;&lt;/a&gt; syntax, after which tables can be created, modified and queried using standard SQL.&lt;/p&gt; &#xA;&lt;p&gt;Below is a short usage example that stores the metadata in a DuckDB database file called &lt;code&gt;metadata.ducklake&lt;/code&gt;, and the data in Parquet files in the &lt;code&gt;file_path&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ATTACH &#39;ducklake:metadata.ducklake&#39; AS my_ducklake (DATA_PATH &#39;file_path/&#39;);&#xA;USE my_ducklake;&#xA;CREATE TABLE my_ducklake.my_table(id INTEGER, val VARCHAR);&#xA;INSERT INTO my_ducklake.my_table VALUES (1, &#39;Hello&#39;), (2, &#39;World&#39;);&#xA;FROM my_ducklake.my_table;&#xA;┌───────┬─────────┐&#xA;│  id   │   val   │&#xA;│ int32 │ varchar │&#xA;├───────┼─────────┤&#xA;│     1 │ Hello   │&#xA;│     2 │ World   │&#xA;└───────┴─────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Updates&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE my_ducklake.my_table SET val=&#39;DuckLake&#39; WHERE id=2;&#xA;FROM my_ducklake.my_table;&#xA;┌───────┬──────────┐&#xA;│  id   │   val    │&#xA;│ int32 │ varchar  │&#xA;├───────┼──────────┤&#xA;│     1 │ Hello    │&#xA;│     2 │ DuckLake │&#xA;└───────┴──────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Time Travel&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;FROM my_ducklake.my_table AT (VERSION =&amp;gt; 2);&#xA;┌───────┬─────────┐&#xA;│  id   │   val   │&#xA;│ int32 │ varchar │&#xA;├───────┼─────────┤&#xA;│     1 │ Hello   │&#xA;│     2 │ World   │&#xA;└───────┴─────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Schema Evolution&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE my_ducklake.my_table ADD COLUMN new_column VARCHAR;&#xA;FROM my_ducklake.my_table;&#xA;┌───────┬──────────┬────────────┐&#xA;│  id   │   val    │ new_column │&#xA;│ int32 │ varchar  │  varchar   │&#xA;├───────┼──────────┼────────────┤&#xA;│     1 │ Hello    │ NULL       │&#xA;│     2 │ DuckLake │ NULL       │&#xA;└───────┴──────────┴────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Change Data Feed&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;FROM my_ducklake.table_changes(&#39;my_table&#39;, 2, 2);&#xA;┌─────────────┬───────┬─────────────┬───────┬─────────┐&#xA;│ snapshot_id │ rowid │ change_type │  id   │   val   │&#xA;│    int64    │ int64 │   varchar   │ int32 │ varchar │&#xA;├─────────────┼───────┼─────────────┼───────┼─────────┤&#xA;│           2 │     0 │ insert      │     1 │ Hello   │&#xA;│           2 │     1 │ insert      │     2 │ World   │&#xA;└─────────────┴───────┴─────────────┴───────┴─────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://ducklake.select/docs/stable/duckdb/introduction&#34;&gt;Usage&lt;/a&gt; guide for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Building &amp;amp; Loading the Extension&lt;/h2&gt; &#xA;&lt;p&gt;To build, type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule init&#xA;git submodule update&#xA;# to build with multiple cores, use `make GEN=ninja release`&#xA;make pull&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run, run the bundled &lt;code&gt;duckdb&lt;/code&gt; shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ./build/release/duckdb&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>