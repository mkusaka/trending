<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-21T01:30:47Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>senzee1984/MutationGate</title>
    <updated>2024-01-21T01:30:47Z</updated>
    <id>tag:github.com,2024-01-21:/senzee1984/MutationGate</id>
    <link href="https://github.com/senzee1984/MutationGate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use hardware breakpoint to dynamically change SSN in run-time&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MutationGate&lt;/h1&gt; &#xA;&lt;p&gt;MutationGate is a new approach to bypass EDR&#39;s inline hooking by utilizing hardware breakpoint to redirect the syscall.&lt;/p&gt; &#xA;&lt;p&gt;It works by calling an unhooked NTAPI and replacing the unhooked NTAPI&#39;s SSN with hooked NTAPI&#39;s. In this way, the syscall is redirected to the hooked NTAPI&#39;s, and the inline hook can be bypassed without loading the 2nd ntdll module or modifying bytes within loaded ntdll&#39;s memory space.&lt;/p&gt; &#xA;&lt;p&gt;The provided project is only a &lt;code&gt;POC&lt;/code&gt;, not a comprehensive implementation. For instance, you could use this approach to set hardware breakpoints for a set of functions.&lt;/p&gt; &#xA;&lt;p&gt;The function can also be WIN32API. For instance, we can set the 1st hbp at &lt;code&gt;DrawText&lt;/code&gt; to redirect the execution to &lt;code&gt;NtDrawText&lt;/code&gt;, and the 2nd hbp replaces the SSN saved in RAX. In this way, module &lt;code&gt;kernel32.dll&lt;/code&gt; is not skipped, and the call stack looks more legitimate.&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;EDR tends to set inline hooks for various NTAPI, especially those are usually leveraged in malware, such as &lt;code&gt;NtAllocVirtualMemory&lt;/code&gt;, &lt;code&gt;NtOpenProcess&lt;/code&gt;, etc. While other NTAPI that are not usually leveraged in malware tend not to have inline hook, such as &lt;code&gt;NtDrawText&lt;/code&gt;. It is very unlikely that an EDR set inline hook for all NTAPI.&lt;/p&gt; &#xA;&lt;p&gt;Assume NTAPI &lt;code&gt;NtDrawText&lt;/code&gt; is not hooked, while NTAPI &lt;code&gt;NtQueryInformationProcess&lt;/code&gt; is hooked, the steps are as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get the address of &lt;code&gt;NtDrawText&lt;/code&gt;. It can be achieved by utilizing &lt;code&gt;GetModuleHandle&lt;/code&gt; and &lt;code&gt;GetProcAddress&lt;/code&gt; combination, or a custom implementation of them via PEB walking.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;  pNTDT = GetFuncByHash(ntdll, 0xA1920265);&#x9;//NtDrawText hash&#xA;  pNTDTOffset_8 = (PVOID)((BYTE*)pNTDT + 0x8);&#x9;//Offset 0x8 from NtDrawText&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Prepare arguments for &lt;code&gt;NtQueryInformationProcess&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set a hardware breakpoint at &lt;code&gt;NtDrawText+0x8&lt;/code&gt;, when the execution reaches this address, SSN of &lt;code&gt;NtDrawText&lt;/code&gt; is saved in RAX, but syscall is not called yet.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-windbg&#34;&gt;0:000&amp;gt; u 0x00007FFBAD00EB68-8&#xA;ntdll!NtDrawText:&#xA;00007ffb`ad00eb60 4c8bd1          mov     r10,rcx&#xA;00007ffb`ad00eb63 b8dd000000      mov     eax,0DDh&#xA;00007ffb`ad00eb68 f604250803fe7f01 test    byte ptr [SharedUserData+0x308 (00000000`7ffe0308)],1&#xA;00007ffb`ad00eb70 7503            jne     ntdll!NtDrawText+0x15 (00007ffb`ad00eb75)&#xA;00007ffb`ad00eb72 0f05            syscall&#xA;00007ffb`ad00eb74 c3              ret&#xA;00007ffb`ad00eb75 cd2e            int     2Eh&#xA;00007ffb`ad00eb77 c3              ret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Retrieve the SSN of &lt;code&gt;NtQueryInformationProcess&lt;/code&gt;. Inside the exception handler, update RAX with NtQueryInformationProcess&#39; SSN. I.e., the original SSN was replaced.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;...&amp;lt;SNIP&amp;gt;...&#xA;uint32_t GetSSNByHash(PVOID pe, uint32_t Hash) &#xA;{&#xA;&#x9;PBYTE pBase = (PBYTE)pe;&#xA;&#x9;PIMAGE_DOS_HEADER&#x9;pImgDosHdr = (PIMAGE_DOS_HEADER)pBase;&#xA;&#x9;PIMAGE_NT_HEADERS&#x9;pImgNtHdrs = (PIMAGE_NT_HEADERS)(pBase + pImgDosHdr-&amp;gt;e_lfanew);&#xA;&#x9;IMAGE_OPTIONAL_HEADER&#x9;ImgOptHdr = pImgNtHdrs-&amp;gt;OptionalHeader;&#xA;&#x9;DWORD exportdirectory_foa = RvaToFileOffset(pImgNtHdrs, ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);&#xA;&#x9;PIMAGE_EXPORT_DIRECTORY pImgExportDir = (PIMAGE_EXPORT_DIRECTORY)(pBase + exportdirectory_foa);&#x9;//Calculate corresponding offset&#xA;&#x9;PDWORD FunctionNameArray = (PDWORD)(pBase + RvaToFileOffset(pImgNtHdrs, pImgExportDir-&amp;gt;AddressOfNames));&#xA;&#x9;PDWORD FunctionAddressArray = (PDWORD)(pBase + RvaToFileOffset(pImgNtHdrs, pImgExportDir-&amp;gt;AddressOfFunctions));&#xA;&#x9;PWORD  FunctionOrdinalArray = (PWORD)(pBase + RvaToFileOffset(pImgNtHdrs, pImgExportDir-&amp;gt;AddressOfNameOrdinals));&#xA;&#xA;&#x9;for (DWORD i = 0; i &amp;lt; pImgExportDir-&amp;gt;NumberOfFunctions; i++)&#xA;&#x9;{&#xA;&#x9;&#x9;CHAR* pFunctionName = (CHAR*)(pBase + RvaToFileOffset(pImgNtHdrs, FunctionNameArray[i]));&#xA;&#x9;&#x9;DWORD Function_RVA = FunctionAddressArray[FunctionOrdinalArray[i]];&#xA;&#x9;&#x9;if (Hash == ROR13Hash(pFunctionName))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;void *ptr = malloc(10);&#xA;&#x9;&#x9;&#x9;if (ptr == NULL) {&#xA;&#x9;&#x9;&#x9;&#x9;perror(&#34;malloc failed&#34;);&#xA;&#x9;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;unsigned char byteAtOffset5 = *((unsigned char*)(pBase + RvaToFileOffset(pImgNtHdrs, Function_RVA)) + 4);&#xA;&#x9;&#x9;&#x9;//printf(&#34;Syscall number of function %s is: 0x%x\n&#34;, pFunctionName,byteAtOffset5);&#x9;//0x18&#xA;&#x9;&#x9;&#x9;free(ptr);&#xA;&#x9;&#x9;&#x9;return byteAtOffset5;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return 0x0;&#xA;}&#xA;...&amp;lt;SNIP&amp;gt;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Since we called &lt;code&gt;NtDrawText&lt;/code&gt; but with &lt;code&gt;NtQueryInformationProcess&lt;/code&gt;&#39; arguments, the call should be failed. However, since we changed the SSN, the syscall is successful.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;  fnNtQueryInformationProcess pNTQIP = (fnNtQueryInformationProcess)pNTDT;&#xA;  NTSTATUS status = pNTQIP(pi.hProcess, ProcessBasicInformation, &amp;amp;pbi, sizeof(PROCESS_BASIC_INFORMATION), NULL);&#x9;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Update&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/senzee1984/MutationGate/main/screenshot/update.jpg&#34; alt=&#34;example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;I provided an updated poc &lt;code&gt;MutationGate_Update.cpp&lt;/code&gt;. In this POC, I set 2 hbp respectively at &lt;code&gt;DrawText&lt;/code&gt; and &lt;code&gt;NtDrawText+0x8&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When the execution reaches DrawText, update the RIP to &lt;code&gt;NtDrawText+0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;When the execution reaches NtDrawText+8, update the RAX to NtQueryInformationProcess&#39; SSN.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pros: Avoid the direct call to NTAPI&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cons: From the perspective of EDR, it is DrawText initiates the syscall, while NTAPI is skipped.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/senzee1984/MutationGate/main/screenshot/poc.png&#34; alt=&#34;example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this example, NtDrawtext&#39;s SSN is &lt;code&gt;0xdd&lt;/code&gt;, &lt;code&gt;NtQueryInformationProcess&lt;/code&gt;&#39; SSN is &lt;code&gt;0x19&lt;/code&gt;, the address of NtDrawText is &lt;code&gt;0x00007FFBAD00EB60&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The call is made to NtDrawText&#39;s address, but with NtQueryInformationProcess. Since the SSN is changed from &lt;code&gt;0xdd&lt;/code&gt; to &lt;code&gt;0x19&lt;/code&gt;, the syscall is successful.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;MutationGate is not an extension or variant of various Gate. Because those Gate focus more on retrieving SSN of NTAPI, MutationGate focuses on bypassing the inline hook in NTAPI.&lt;/li&gt; &#xA; &lt;li&gt;MutationGate is able to bypass inline hook in NTAPI, however, the individual technique does not guarantee to bypass EDR, because EDR has multiple detection dimensions, inline hook is one of them.&lt;/li&gt; &#xA; &lt;li&gt;The project is a POC, not a complete and comprehensive implementation.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Advantages of MutationGate Approach&lt;/h2&gt; &#xA;&lt;p&gt;So far, some classic and common approaches to bypass EDR&#39;s inline hook include but are not limited to the following approaches:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Load the 2nd ntdll module&lt;/li&gt; &#xA; &lt;li&gt;Copy a fresh ntdll&#39;s text section to overwrite hooked ntdll&#39;s text section&lt;/li&gt; &#xA; &lt;li&gt;Overwrite hooked codes(syscall stub) with fresh code&lt;/li&gt; &#xA; &lt;li&gt;More...&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The above techniques involve the modification of loaded ntdll, or loading of the 2nd ntdll. These behaviors could be detected by EDR.&lt;/p&gt; &#xA;&lt;p&gt;While MutationGate is not the only approach that untouches loaded ntdll, it does have the advantage of not modifying the loaded ntdll module, which decreases the possibility of getting detected.&lt;/p&gt; &#xA;&lt;p&gt;And, it is very simple, no need to modify other registers, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Detection&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to detect MutationGate technique.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The &lt;code&gt;AddVectoredExceptionHandler&lt;/code&gt; call could look suspicious in a normal program.&lt;/li&gt; &#xA; &lt;li&gt;In the POC, NTAPI is called directly, which could be weird in a normal program. However, it can be resolved by adding 1 more hardware breakpoint at &lt;code&gt;DrawText&lt;/code&gt;, directing the execution to &lt;code&gt;NtDrawText&lt;/code&gt; and triggering the 2nd hardware breakpoint that replaces SSN.&lt;/li&gt; &#xA; &lt;li&gt;Call stack in kernel space could reveal clues.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Credits and References&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cyberwarfare.live/bypassing-av-edr-hooks-via-vectored-syscall-poc/&#34;&gt;https://cyberwarfare.live/bypassing-av-edr-hooks-via-vectored-syscall-poc/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://redops.at/en/blog/syscalls-via-vectored-exception-handling&#34;&gt;https://redops.at/en/blog/syscalls-via-vectored-exception-handling&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/CCob/fe3b63d80890fafeca982f76c8a3efdf&#34;&gt;https://gist.github.com/CCob/fe3b63d80890fafeca982f76c8a3efdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://malwaretech.com/2023/12/silly-edr-bypasses-and-where-to-find-them.html&#34;&gt;https://malwaretech.com/2023/12/silly-edr-bypasses-and-where-to-find-them.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Maldev Academy&lt;/p&gt; &#xA;&lt;p&gt;ChatGPT&lt;/p&gt; &#xA;&lt;h2&gt;Other Approaches Utilized Hardware Breakpoint&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Dec0ne/HWSyscalls&#34;&gt;https://github.com/Dec0ne/HWSyscalls&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rad9800/TamperingSyscalls&#34;&gt;https://github.com/rad9800/TamperingSyscalls&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/RedTeamOperations/VEH-PoC&#34;&gt;https://github.com/RedTeamOperations/VEH-PoC&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pixpark/gpupixel</title>
    <updated>2024-01-21T01:30:47Z</updated>
    <id>tag:github.com,2024-01-21:/pixpark/gpupixel</id>
    <link href="https://github.com/pixpark/gpupixel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-Platform AI Beauty Effects Library, Achieving Commercial-Grade Beauty Effects. Written in C++11, Based on OpenGL/ES and VNN.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/pixpark/gpupixel&#34;&gt;GPUPixel&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/pixpark/gpupixel/stargazers&#34;&gt;&lt;img alt=&#34;GPUPixel Stars&#34; src=&#34;https://img.shields.io/github/stars/pixpark/gpupixel?style=social&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pixpark/gpupixel/releases/latest&#34;&gt;&lt;img alt=&#34;GPUPixel Release&#34; src=&#34;https://img.shields.io/github/v/release/pixpark/gpupixel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pixpark/gpupixel/main/#&#34;&gt;&lt;img alt=&#34;GPUPixel Stars&#34; src=&#34;https://img.shields.io/badge/Platform-iOS_%7C%20macOS%20%7C%20Android-red&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pixpark/gpupixel/raw/main/LICENSE&#34;&gt;&lt;img alt=&#34;GPUPixel Stars&#34; src=&#34;https://img.shields.io/github/license/pixpark/gpupixel&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/pixpark/gpupixel/main/README_cn.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;GPUPixel&lt;/a&gt; @ &lt;a href=&#34;https://github.com/pixpark&#34;&gt;PixPark&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;⛰️ GPUPixel is a high-performance image and video AI beauty effect library written in C++11, Extremely easy to compile and integrate, with a very small library size.&lt;/p&gt; &#xA;&lt;p&gt;🔑 It is GPU-based and comes with built-in beauty effects filters that can achieve commercial-grade results.&lt;/p&gt; &#xA;&lt;p&gt;🔌 It supports platforms including iOS, Mac, Android, and it can theoretically be ported to any platform that supports OpenGL/ES.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡 The face key points detection currently utilizes the &lt;a href=&#34;https://www.faceplusplus.com.cn/&#34;&gt;Face++&lt;/a&gt; library, but it will be replaced with either &lt;strong&gt;&lt;a href=&#34;https://github.com/joyycom/VNN&#34;&gt;VNN&lt;/a&gt;&lt;/strong&gt; in the future.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Effects Preview&lt;/h2&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Video: &lt;a href=&#34;https://youtu.be/9BY1Qx1NEPs&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt; | &lt;a href=&#34;https://www.bilibili.com/video/BV1xQ4y1L7Fh/?share_source=copy_web&amp;amp;vd_source=46adcb1014fa989cfcbb4cc1e866831e&#34; target=&#34;_blank&#34;&gt;BiliBili&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Origin&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Smooth&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;White&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;ThinFace&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pixpark/gpupixel/main/docs/image/origin.gif&#34; alt=&#34;origin&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pixpark/gpupixel/main/docs/image/smooth.gif&#34; alt=&#34;smooth&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pixpark/gpupixel/main/docs/image/white.gif&#34; alt=&#34;white&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pixpark/gpupixel/main/docs/image/thinface.gif&#34; alt=&#34;thinface&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;BigEye&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Lipstick&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Blusher&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;ON-OFF&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pixpark/gpupixel/main/docs/image/bigeye.gif&#34; alt=&#34;bigeye&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pixpark/gpupixel/main/docs/image/lipstick.gif&#34; alt=&#34;lipstick&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pixpark/gpupixel/main/docs/image/blusher.gif&#34; alt=&#34;blusher&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pixpark/gpupixel/main/docs/image/on-off.gif&#34; alt=&#34;on-off&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pixpark/gpupixel/main/docs/image/arch-en.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features Compared&lt;/h2&gt; &#xA;&lt;p&gt;This table compares the features supported by &lt;strong&gt;GPUPixel&lt;/strong&gt; and &lt;strong&gt;GPUImage&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;✅: Supported | ❌: Not supported | ✏️: Planning&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/pixpark/gpupixel&#34;&gt;GPUPixel&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/BradLarson/GPUImage&#34;&gt;GPUImage&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🍎&lt;strong&gt;Filters:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Skin Smoothing Filter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Skin Whitening Filter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Face Slimming Filter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Big Eyes Filter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Lipstick Filter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Blush Filter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;More Build in Filter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🍓&lt;strong&gt;Input Formats:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YUV420P(I420)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;RGBA&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JPEG&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PNG&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NV21(for Android)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✏️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🍉&lt;strong&gt;Output Formats:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;RGBA&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YUV420P(I420)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✏️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🥑&lt;strong&gt;Platform:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iOS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mac&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Android&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Win&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✏️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✏️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;OS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;OSX&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Min Support OS Version&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.0 (API 21)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;h3&gt;iPhone&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;-&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iPhone 6P&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iPhone 8&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iPhone X&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iPhone 11&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iPhone 14 pro&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;CPU&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Time Taken&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;-&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Xiaomi 10&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Huawei Meta30&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Vivo&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;SAMSUNG&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Google Pixel&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CPU&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Time Taken&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Compilation&lt;/h2&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open &lt;code&gt;objc/gpupixel.xcodeproj&lt;/code&gt; or &lt;code&gt;objc/demo/PixDemo.xcodeproj&lt;/code&gt; Xcode project ;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the corresponding platform for compilation;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the directory ./android in Android Studio&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure NDK r21+&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Library Size&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS(.framework)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS(.framework)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android(.aar)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Size&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.4 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.6 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.1 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Refer to &lt;code&gt;./objc/demo&lt;/code&gt; or &lt;code&gt;./android&lt;/code&gt; demo&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;.h&lt;/code&gt; file&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// video data input&#xA;std::shared_ptr&amp;lt;SourceRawDataInput&amp;gt; source_raw_input_;&#xA;// beauty filter&#xA;std::shared_ptr&amp;lt;FaceBeautyFilter&amp;gt; face_beauty_filter_;&#xA;// video data output &#xA;std::shared_ptr&amp;lt;TargetRawDataOutput&amp;gt; target_raw_output_;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Create Filter, &lt;code&gt;.cpp&lt;/code&gt; file&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt; GPUPixel::GPUPixelContext::getInstance()-&amp;gt;runSync([&amp;amp;] {&#xA;    // Create filter&#xA;    source_raw_input_ = SourceRawDataInput::create();&#xA;    target_raw_output_ = TargetRawDataOutput::create();&#xA;    // Face Beauty Filter&#xA;    face_beauty_filter_ = FaceBeautyFilter::create();&#xA;    &#xA;    // Add filter&#xA;    source_raw_input_-&amp;gt;addTarget(face_beauty_filter_)-&amp;gt;addTarget(target_raw_output_);&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Input Image Data I420 or RGBA&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// ...&#xA;// YUVI420&#xA; source_raw_input_-&amp;gt;uploadBytes(width,&#xA;                                height, &#xA;                                bufferY,&#xA;                                strideY, &#xA;                                bufferU, &#xA;                                strideU,&#xA;                                bufferV, &#xA;                                strideV);&#xA;// ...&#xA;// bytes: RGBA data&#xA; source_raw_input_-&amp;gt;uploadBytes(bytes,&#xA;                                width, &#xA;                                height, &#xA;                                stride);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output Data Callback&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// I420 callback&#xA;target_raw_output_-&amp;gt;setI420Callbck([=](const uint8_t *data, &#xA;                                        int width, &#xA;                                        int height, &#xA;                                        int64_t ts) {&#xA;    size_t y_size = width * height;&#xA;    const uint8_t *uData = data + y_size;&#xA;    const uint8_t *vData = data + y_size + y_size / 4;&#xA;    // Do something you want&#xA;});&#xA;&#xA;// RGBA callback-&amp;gt;&#xA;target_raw_output_-&amp;gt;setPixelsCallbck([=](const uint8_t *data, &#xA;                                        int width, &#xA;                                        int height, &#xA;                                        int64_t ts) {&#xA;    size_t rgba_size = width * height*4;&#xA;    // Do something you want&#xA;});&#xA;&#xA;// Output data callbck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#pixpark/gpupixel&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=pixpark/gpupixel&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;h3&gt;Reference Project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BradLarson/GPUImage&#34;&gt;GPUImage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CainKernel/CainCamera&#34;&gt;CainCamera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ZZZZou/AwemeLike&#34;&gt;AwemeLike&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joyycom/VNN&#34;&gt;VNN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>