<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-06T01:32:48Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TheD1rkMtr/TakeMyRDP</title>
    <updated>2023-07-06T01:32:48Z</updated>
    <id>tag:github.com,2023-07-06:/TheD1rkMtr/TakeMyRDP</id>
    <link href="https://github.com/TheD1rkMtr/TakeMyRDP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A keystroke logger targeting the Remote Desktop Protocol (RDP) related processes, It utilizes a low-level keyboard input hook, allowing it to record keystrokes in certain contexts (like in mstsc.exe and CredentialUIBroker.exe)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TakeMyRDP&lt;/h1&gt; &#xA;&lt;p&gt;A keystroke logger targeting the Remote Desktop Protocol (RDP) related processes, It utilizes a low-level keyboard input hook, allowing it to record keystrokes in certain contexts (like in mstsc.exe and CredentialUIBroker.exe)&lt;/p&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TheD1rkMtr/FilelessPELoader/assets/123980007/b0805586-9e71-4cba-9d16-f7d6fb12cd7a&#34;&gt;https://github.com/TheD1rkMtr/FilelessPELoader/assets/123980007/b0805586-9e71-4cba-9d16-f7d6fb12cd7a&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SatDump/SatDump</title>
    <updated>2023-07-06T01:32:48Z</updated>
    <id>tag:github.com,2023-07-06:/SatDump/SatDump</id>
    <link href="https://github.com/SatDump/SatDump" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A generic satellite data processing software.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SatDump&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/altillimity/satdump/raw/master/icon.png&#34; alt=&#34;Icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A generic satellite data processing software. &lt;em&gt;Thanks Mnux for the icon!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;There now also is a &lt;a href=&#34;https://matrix.to/#/#satdump:altillimity.com&#34;&gt;Matrix&lt;/a&gt; room if you want to chat!&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Note : This is a very basic &#34;how-to&#34; skipping details and assuming some knowledge of what you are doing. For more details and advanced use cases, please see the detailed documentation.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;GUI Version&lt;/h2&gt; &#xA;&lt;h3&gt;Offline processing (recorded data)&lt;/h3&gt; &#xA;&lt;p&gt;Quick-Start :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Choose the appropriate pipeline for what you want to process&lt;/li&gt; &#xA; &lt;li&gt;Select the input file (baseband, frames, soft symbols...)&lt;/li&gt; &#xA; &lt;li&gt;Set the appropriate input level (what your file is)&lt;/li&gt; &#xA; &lt;li&gt;Check settings shown below are right (such as samplerate)&lt;/li&gt; &#xA; &lt;li&gt;Press &#34;Start&#34;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SatDump/SatDump/master/gui_example.png&#34; alt=&#34;Img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SatDump/SatDump/master/gui_example2.png&#34; alt=&#34;Img&#34;&gt;&lt;br&gt; &lt;em&gt;SatDump demodulating a DVB-S2 Baseband&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Live processing or recording (directly from your SDR)&lt;/h3&gt; &#xA;&lt;p&gt;Quick-Start :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go in the &#34;Recorder&#34; Tab&lt;/li&gt; &#xA; &lt;li&gt;Select and start your SDR Device&lt;/li&gt; &#xA; &lt;li&gt;Choose a pipeline&lt;/li&gt; &#xA; &lt;li&gt;Start it, and done!&lt;/li&gt; &#xA; &lt;li&gt;For recording, use the recording tab instead. Both processing and recording can be used at once.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SatDump/SatDump/master/gui_recording.png&#34; alt=&#34;Img&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CLI Version&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SatDump/SatDump/master/cli_example.png&#34; alt=&#34;Img&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Offline processing&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage : satdump [pipeline_id] [input_level] [input_file] [output_file_or_directory] [additional options as required]&#xA;Extra options (examples. Any parameter used in modules can be used here) :&#xA;  --samplerate [baseband_samplerate] --baseband_format [f32/s16/s8/u8] --dc_block --iq_swap&#xA;Sample command :&#xA;satdump metop_ahrpt baseband /home/user/metop_baseband.s16 metop_output_directory --samplerate 6e6 --baseband_format s16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find a list of Satellite pipelines and their parameters &lt;a href=&#34;https://raw.githubusercontent.com/SatDump/SatDump/master/docs/Satellite-pipelines.md&#34;&gt;Here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Live processing&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage : satdump live [pipeline_id] [output_file_or_directory] [additional options as required]&#xA;Extra options (examples. Any parameter used in modules or sources can be used here) :&#xA;  --samplerate [baseband_samplerate] --baseband_format [f32/i16/i8/w8] --dc_block --iq_swap&#xA;  --source [airspy/rtlsdr/etc] --gain 20 --bias&#xA;As well as --timeout in seconds&#xA;Sample command :&#xA;satdump live metop_ahrpt metop_output_directory --source airspy --samplerate 6e6 --frequency 1701.3e6 --general_gain 18 --bias --timeout 780&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find a list of all SDR Options &lt;a href=&#34;https://raw.githubusercontent.com/SatDump/SatDump/master/docs/SDR-Options.md&#34;&gt;Here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Recording&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage : satdump record [output_baseband (without extension!)] [additional options as required]&#xA;Extra options (examples. Any parameter used in sources can be used here) :&#xA;  --samplerate [baseband_samplerate] --baseband_format [f32/s16/s8/u8/w16] --dc_block --iq_swap&#xA;  --source [airspy/rtlsdr/etc] --gain 20 --bias&#xA;As well as --timeout in seconds&#xA;Sample command :&#xA;satdump record baseband_name --source airspy --samplerate 6e6 --frequency 1701.3e6 --general_gain 18 --bias --timeout 780&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Building / Installing&lt;/h1&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;On Windows the recommended method of running SatDump is getting the latest pre-built release off the &lt;a href=&#34;https://github.com/altillimity/SatDump/releases&#34;&gt;Release&lt;/a&gt; page, which includes everything you will need to run it.&lt;br&gt; Those builds are made with Visual Studio 2019 for x64, so the appropriate Visual C++ Runtime will be required (though, likely to be already installed). You can get it &lt;a href=&#34;https://support.microsoft.com/en-us/topic/the-latest-supported-visual-c-downloads-2647da03-1eea-4433-9aff-95f26a218cc0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;From there, just run either satdump-ui.exe or satdump.exe (CLI) and everything will work.&lt;/p&gt; &#xA;&lt;p&gt;If you really want to build it yourself on Windows, see the dedicated documentation [TODO].&lt;br&gt; &lt;em&gt;Note : Mingw builds are NOT supported, VOLK will not work.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Linux (or MacOS)&lt;/h3&gt; &#xA;&lt;p&gt;On Linux (or MacOS), building from source is recommended and no builds are currently provided.&lt;/p&gt; &#xA;&lt;p&gt;Here are some generic (Debian-oriented) build instructions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Linux: Install dependencies&#xA;sudo apt install git build-essential cmake g++ pkgconf libfftw3-dev libvolk2-dev libpng-dev libluajit-5.1-dev # Core dependencies. If libvolk2-dev is not available, use libvolk1-dev&#xA;sudo apt install libnng-dev                                                                                   # If this package is not found, follow build instructions below for NNG&#xA;sudo apt install librtlsdr-dev libhackrf-dev libairspy-dev libairspyhf-dev                                    # All libraries required for live processing (optional)&#xA;sudo apt install libglew-dev libglfw3-dev                                                                     # Only if you want to build the GUI Version (optional)&#xA;sudo apt install libzstd-dev                                                                                  # Only if you want to build with ZIQ Recording compression &#xA;sudo apt install libomp-dev                                                                                   # Shouldn&#39;t be required in general, but in case you have errors with OMP&#xA;(optional)&#xA;&#xA;# Optional, but recommended as it drastically &#xA;# increases speed of some operations.&#xA;# Install OpenCL. Not required on MacOS&#xA;sudo apt install ocl-icd-opencl-dev&#xA;&#xA;# If libnng-dev is not available, you will have to build it from source&#xA;git clone https://github.com/nanomsg/nng.git&#xA;cd nng&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON ..                             # MacOS&#xA;cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr .. # Linux&#xA;make -j4&#xA;sudo make install&#xA;cd ../..&#xA;rm -rf nng&#xA;&#xA;# macOS: Install dependencies&#xA;brew install cmake volk libpng glew glfw nng pkg-config llvm libomp luajit&#xA;&#xA;# macOS ONLY: build and install libfftw3&#xA;# if you install fftw via brew, cmake won&#39;t be able to find it&#xA;wget http://www.fftw.org/fftw-3.3.9.tar.gz&#xA;tar xf fftw-3.3.9.tar.gz&#xA;rm fftw-3.3.9.tar.gz&#xA;cd fftw-3.3.9&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=false -DENABLE_FLOAT=true -DENABLE_THREADS=true -DENABLE_SSE=true -DENABLE_SSE2=true -DENABLE_AVX=true -DENABLE_AVX2=true ..&#xA;make&#xA;sudo make install&#xA;cd ../..&#xA;rm -rf fftw-3.3.9&#xA;&#xA;# Finally, SatDump&#xA;git clone https://github.com/altillimity/satdump.git&#xA;cd satdump&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;# If you do not want to build the GUI Version, add -DBUILD_GUI=OFF to the command&#xA;# If you want to disable some SDRs, you can add -DPLUGIN_HACKRF_SDR_SUPPORT=OFF or similar&#xA;cmake -DCMAKE_BUILD_TYPE=Release .. # Mac OS&#xA;cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr .. # Linux&#xA;make -j`nproc`&#xA;&#xA;# To run without installing&#xA;ln -s ../pipelines .        # Symlink pipelines so it can run&#xA;ln -s ../resources .        # Symlink resources so it can run&#xA;ln -s ../satdump_cfg.json . # Symlink settings so it can run&#xA;&#xA;# To install system-wide&#xA;sudo make install&#xA;&#xA;# Run (if you want!)&#xA;# On Raspberry PIs, you will need to export MESA_GL_VERSION_OVERRIDE=4.5&#xA;./satdump-ui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;On Android, the preferred source is F-Droid [INSERT LINK WHEN POSSIBLE].&lt;/p&gt; &#xA;&lt;p&gt;If this is not an option for you, APKs are also available on the &lt;a href=&#34;https://github.com/altillimity/SatDump/releases&#34;&gt;Release&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;Do keep in mind that while pretty much all features perfectly function on Android, there may be some limitations (either due to the hardware) in some places. For example, not all SDR Devices can be used.&lt;br&gt; Supported SDR devices are :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RTL-SDR&lt;/li&gt; &#xA; &lt;li&gt;Airspy&lt;/li&gt; &#xA; &lt;li&gt;AirspyHF&lt;/li&gt; &#xA; &lt;li&gt;LimeSDR Mini&lt;/li&gt; &#xA; &lt;li&gt;HackRF&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>