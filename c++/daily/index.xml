<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-21T01:24:53Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>facontidavide/Bonxai</title>
    <updated>2023-09-21T01:24:53Z</updated>
    <id>tag:github.com,2023-09-21:/facontidavide/Bonxai</id>
    <link href="https://github.com/facontidavide/Bonxai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, hierarchical, sparse Voxel Grid&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facontidavide/Bonxai/main/doc/bonxai.png&#34; alt=&#34;Bonxai&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bonxai is a library that implements a compact hierarchical data structure that can store and manipulate volumetric data, discretized on a three-dimensional grid (AKA, a &#34;Voxel Grid&#34;).&lt;/p&gt; &#xA;&lt;p&gt;Bonxai data structure is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sparse&lt;/strong&gt;: it uses only a fraction of the memory that a dense 3D voxel grid would use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unbounded&lt;/strong&gt;: you don&#39;t need to define the boundary of the 3D space (*).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;(*) The dimension of the 3D space is virtually &#34;infinite&#34;: since &lt;strong&gt;32-bits indexes&lt;/strong&gt; are used, given a voxel size of &lt;strong&gt;1 cm&lt;/strong&gt;, the maximum range of the X, Y and Z coordinates would be about &lt;strong&gt;40.000 Km&lt;/strong&gt;. As a reference &lt;strong&gt;the diameter of planet Earth is 12.000 Km&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you are familiar with &lt;a href=&#34;https://octomap.github.io/&#34;&gt;Octomap&lt;/a&gt; and Octrees, you know that those data structures are also sparse and unbounded.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, Bonxai is &lt;strong&gt;much faster&lt;/strong&gt; and, in some cases, even more memory efficient than an Octree.&lt;/p&gt; &#xA;&lt;p&gt;This work is strongly based on &lt;a href=&#34;https://www.openvdb.org/&#34;&gt;OpenVDB&lt;/a&gt; and it can be considered an implementation of the original paper, with a couple of non-trivial changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;K. Museth, &#xA;“VDB: High-Resolution Sparse Volumes with Dynamic Topology”,&#xA;ACM Transactions on Graphics 32(3), 2013. Presented at SIGGRAPH 2013.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read the previous paper &lt;a href=&#34;http://www.museth.org/Ken/Publications_files/Museth_TOG13.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is also some overlap with this other paper, but their implementation is much** simpler, even if conceptually similar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; Eurico Pedrosa, Artur Pereira, Nuno Lau &#xA; &#34;A Sparse-Dense Approach for Efficient Grid Mapping&#34;&#xA; 2018 IEEE International Conference on Autonomous Robot Systems and Competitions (ICARSC)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bonxai&lt;/strong&gt; is currently under development and I am building this mostly for fun and for educational purposes. Don&#39;t expect any API stability for the time being.&lt;/p&gt; &#xA;&lt;h1&gt;Benchmark (preliminary)&lt;/h1&gt; &#xA;&lt;p&gt;Take these numbers with a grain of salt, since they are preliminary and the benchmark is strongly influenced by the way the data is stored. Anyway, they gave you a fair idea of what you may expect, in terms of performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-------------------------------------------&#xA;Benchmark                     Time      &#xA;-------------------------------------------&#xA;Bonxai_Create              1165 us  &#xA;Octomap_Create            25522 us  &#xA;&#xA;Bonxai_Update               851 us  &#xA;Octomap_Update             3824 us  &#xA;&#xA;Bonxai_IterateAllCells      124 us&#xA;Octomap_IterateAllCells     698 us&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; refers to creating a new VoxelGrid from scratch&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Update&lt;/strong&gt; means modifying the value of an already allocated VoxelGrid.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IterateAllCells&lt;/strong&gt; will get the value and the coordinates of all the existing cells.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to use it&lt;/h1&gt; &#xA;&lt;p&gt;The core of &lt;strong&gt;Bonxai&lt;/strong&gt; is a header-only library that you can simply copy into your project and include like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;bonxai/bonxai.hpp&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a VoxelGrid, where each cell contains an integer value and has size 0.05.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;double voxel_resolution = 0.05;&#xA;Bonxai::VoxelGrid&amp;lt;int&amp;gt; grid( voxel_resolution );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nothing prevents you from having more complex cell values, for instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;Bonxai::VoxelGrid&amp;lt;Eigen::Vector4d&amp;gt; vector_grid( voxel_resolution );&#xA;// or&#xA;struct Foo {&#xA; int a;&#xA; double b;&#xA;};&#xA;Bonxai::VoxelGrid&amp;lt;Foo&amp;gt; foo_grid( voxel_resolution );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To insert values into a cell with coordinates x, y and z, use a &lt;code&gt;VoxelGrid::Accessor&lt;/code&gt; object. In the next code sample, we will create a dense cube of cells with value 42:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Each cell will contail a `float` and it will have size 0.05&#xA;double voxel_resolution = 0.05;&#xA;Bonxai::VoxelGrid&amp;lt;float&amp;gt; grid( voxel_resolution );&#xA;&#xA;// Create this accessor once, and reuse it as much as possible.&#xA;auto accessor = grid.createAccessor();&#xA;&#xA;// Create cells with value 42.0 in a 1x1x1 cube.&#xA;// Given voxel_resolution = 0.05, this will be equivalent&#xA;// to 20x20x20 cells in the grid.&#xA;&#xA;for( double x = 0; x &amp;lt; 1.0; x += voxel_resolution ) {&#xA;  for( double y = 0; y &amp;lt; 1.0; y += voxel_resolution ) {&#xA;    for( double z = 0; z &amp;lt; 1.0; z += voxel_resolution ) {&#xA;      // discretize the position {x,y,z}&#xA;      Bonxai::CoordT coord = grid.posToCoord(x, y, z);&#xA;      accessor.setValue( coord, 42.0 );&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;// You can read (or update) the value of a cell as shown below.&#xA;// If the cell doesn&#39;t exist, `value_ptr` will be nullptr, &#xA;&#xA;Bonxai::CoordT coord = grid.posToCoord(x, y, z);&#xA;float* value_ptr = accessor.value( coord );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Note about multi-threading&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Bonxai::VoxelGrid&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; thread safe, for write operations.&lt;/p&gt; &#xA;&lt;p&gt;If you want to access the grid in &lt;strong&gt;read-only&lt;/strong&gt; mode, you can use multi-threading, but each thread should have its own &lt;code&gt;accessor&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; serialization to/from file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; full implementation of the Octomap algorithm (ray casting + probability map).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; integration with ROS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; RViz/RViz2 visualization plugins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; integration with &lt;a href=&#34;https://github.com/flexible-collision-library/fcl&#34;&gt;FCL&lt;/a&gt; for collision detection (?)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Frequently Asked Question&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;What is the point of reimplementing OpenVDB?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The number one reason is to have fun and to learn something new :)&lt;/li&gt; &#xA; &lt;li&gt;I want this library to be small and easy to integrate into larger projects. The core data structure is less than 1000 lines of code.&lt;/li&gt; &#xA; &lt;li&gt;It is not an &#34;exact&#34; rewrite, I modified a few important aspects of the algorithm to make it slightly faster, at least for my specific use cases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;How much memory does it use, compared with Octomap?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is... complicated.&lt;/p&gt; &#xA;&lt;p&gt;If you need to store very sparse point clouds, you should expect Bonxai to use more memory (20-40% more). If the point cloud is relatively dense, Bonxai might use much less memory than Octomap (less than half).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fnc12/sqlite_orm</title>
    <updated>2023-09-21T01:24:53Z</updated>
    <id>tag:github.com,2023-09-21:/fnc12/sqlite_orm</id>
    <link href="https://github.com/fnc12/sqlite_orm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;❤️ SQLite ORM light header only library for modern C++&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/fnc12/sqlite_orm/raw/master/logo.png&#34; alt=&#34;Sublime&#39;s custom image&#34; width=&#34;557&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.cppreference.com/w/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/c++-%2300599C.svg?style=for-the-badge&amp;amp;logo=c%2B%2B&amp;amp;logoColor=white&#34; alt=&#34;C++&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/sqlite-%2307405e.svg?style=for-the-badge&amp;amp;logo=sqlite&amp;amp;logoColor=white&#34; alt=&#34;SQLite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fnc12/sqlite_orm/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/githubactions-%232671E5.svg?style=for-the-badge&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fnc12/sqlite_orm/raw/dev/CMakeLists.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-%23008FBA.svg?style=for-the-badge&amp;amp;logo=cmake&amp;amp;logoColor=white&#34; alt=&#34;CMake&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/search?q=sqlite_orm&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Stackoverflow-FE7A16?style=for-the-badge&amp;amp;logo=stack-overflow&amp;amp;logoColor=white&#34; alt=&#34;Stack Overflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/fnc12&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&amp;amp;logo=paypal&amp;amp;logoColor=white&#34; alt=&#34;PayPal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/sqlite_orm&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/sqlite_orm-%231DA1F2.svg?style=for-the-badge&amp;amp;logo=Twitter&amp;amp;logoColor=white&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://patreon.com/fnc12&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Patreon-F96854?style=for-the-badge&amp;amp;logo=patreon&amp;amp;logoColor=white&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SQLite ORM&lt;/h1&gt; &#xA;&lt;p&gt;SQLite ORM light header only library for modern C++. Please read the license precisely. The project has AGPL license for open source project and MIT license after purchasing it for 50$ (using &lt;a href=&#34;https://paypal.me/fnc12&#34;&gt;PayPal&lt;/a&gt; or any different way (contact using email &lt;a href=&#34;mailto:fnc12@me.com&#34;&gt;fnc12@me.com&lt;/a&gt;)).&lt;/p&gt; &#xA;&lt;h1&gt;Status&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Branch&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Travis&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Appveyor&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/fnc12/sqlite_orm/tree/master&#34;&gt;&lt;code&gt;master&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://travis-ci.org/fnc12/sqlite_orm&#34;&gt;&lt;img src=&#34;https://travis-ci.org/fnc12/sqlite_orm.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://ci.appveyor.com/project/fnc12/sqlite-orm/history&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/fnc12/sqlite_orm?branch=master&amp;amp;svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/fnc12/sqlite_orm/tree/dev&#34;&gt;&lt;code&gt;dev&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://travis-ci.org/fnc12/sqlite_orm&#34;&gt;&lt;img src=&#34;https://travis-ci.org/fnc12/sqlite_orm.svg?branch=dev&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://ci.appveyor.com/project/fnc12/sqlite-orm/history&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/fnc12/sqlite_orm?branch=dev&amp;amp;svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Advantages&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No raw string queries&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intuitive syntax&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Comfortable interface - one code line per single query&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Built with modern C++14 features (no macros and external scripts)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CRUD support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pure select query support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prepared statements support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UNION, EXCEPT and INTERSECT support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;STL compatible&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom types binding support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BLOB support&lt;/strong&gt; - maps to &lt;code&gt;std::vector&amp;lt;char&amp;gt;&lt;/code&gt; or one can bind your custom type&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FOREIGN KEY support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Composite key support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JOIN support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Transactions support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Migrations functionality&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful conditions&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ORDER BY and LIMIT, OFFSET support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GROUP BY / DISTINCT support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;INDEX support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Follows single responsibility principle&lt;/strong&gt; - no need write code inside your data model classes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy integration&lt;/strong&gt; - single header only lib.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The only dependency&lt;/strong&gt; - libsqlite3&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ standard code style&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;In memory database support&lt;/strong&gt; - provide &lt;code&gt;:memory:&lt;/code&gt; or empty filename&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;COLLATE support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Limits setting/getting support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User defined functions support&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;sqlite_orm&lt;/code&gt; library allows to create easy data model mappings to your database schema. It is built to manage (CRUD) objects with a primary key and without it. It also allows you to specify table names and column names explicitly no matter how your classes actually named. Take a look at example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;&#xA;struct User{&#xA;    int id;&#xA;    std::string firstName;&#xA;    std::string lastName;&#xA;    int birthDate;&#xA;    std::unique_ptr&amp;lt;std::string&amp;gt; imageUrl;&#xA;    int typeId;&#xA;};&#xA;&#xA;struct UserType {&#xA;    int id;&#xA;    std::string name;&#xA;};&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So we have database with predefined schema like&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CREATE TABLE users (id integer primary key autoincrement, first_name text not null, last_name text not null, birth_date integer not null, image_url text, type_id integer not null)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CREATE TABLE user_types (id integer primary key autoincrement, name text not null DEFAULT &#39;name_placeholder&#39;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now we tell &lt;code&gt;sqlite_orm&lt;/code&gt; library about our schema and provide database filename. We create &lt;code&gt;storage&lt;/code&gt; service object that has CRUD interface. Also we create every table and every column. All code is intuitive and minimalistic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;&#xA;using namespace sqlite_orm;&#xA;auto storage = make_storage(&#34;db.sqlite&#34;,&#xA;                            make_table(&#34;users&#34;,&#xA;                                       make_column(&#34;id&#34;, &amp;amp;User::id, primary_key().autoincrement()),&#xA;                                       make_column(&#34;first_name&#34;, &amp;amp;User::firstName),&#xA;                                       make_column(&#34;last_name&#34;, &amp;amp;User::lastName),&#xA;                                       make_column(&#34;birth_date&#34;, &amp;amp;User::birthDate),&#xA;                                       make_column(&#34;image_url&#34;, &amp;amp;User::imageUrl),&#xA;                                       make_column(&#34;type_id&#34;, &amp;amp;User::typeId)),&#xA;                            make_table(&#34;user_types&#34;,&#xA;                                       make_column(&#34;id&#34;, &amp;amp;UserType::id, primary_key().autoincrement()),&#xA;                                       make_column(&#34;name&#34;, &amp;amp;UserType::name, default_value(&#34;name_placeholder&#34;))));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Too easy isn&#39;t it? You do not have to specify mapped type explicitly - it is deduced from your member pointers you pass during making a column (for example: &lt;code&gt;&amp;amp;User::id&lt;/code&gt;). To create a column you have to pass two arguments at least: its name in the table and your mapped class member pointer. You can also add extra arguments to tell your storage about column&#39;s constraints like &lt;code&gt;primary_key&lt;/code&gt;, &lt;code&gt;autoincrement&lt;/code&gt;, &lt;code&gt;default_value&lt;/code&gt;, &lt;code&gt;unique&lt;/code&gt; or &lt;code&gt;generated_always_as&lt;/code&gt; (order isn&#39;t important; &lt;code&gt;not_null&lt;/code&gt; is deduced from type automatically).&lt;/p&gt; &#xA;&lt;p&gt;More details about making storage can be found in &lt;a href=&#34;https://github.com/fnc12/sqlite_orm/wiki/Making-a-storage&#34;&gt;tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If your datamodel classes have private or protected members to map to sqlite then you can make a storage with setter and getter functions. More info in the &lt;a href=&#34;https://github.com/fnc12/sqlite_orm/raw/master/examples/private_class_members.cpp&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;CRUD&lt;/h1&gt; &#xA;&lt;p&gt;Let&#39;s create and insert new &lt;code&gt;User&lt;/code&gt; into our database. First we need to create a &lt;code&gt;User&lt;/code&gt; object with any id and call &lt;code&gt;insert&lt;/code&gt; function. It will return id of just created user or throw exception if something goes wrong.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;User user{-1, &#34;Jonh&#34;, &#34;Doe&#34;, 664416000, std::make_unique&amp;lt;std::string&amp;gt;(&#34;url_to_heaven&#34;), 3 };&#xA;    &#xA;auto insertedId = storage.insert(user);&#xA;cout &amp;lt;&amp;lt; &#34;insertedId = &#34; &amp;lt;&amp;lt; insertedId &amp;lt;&amp;lt; endl;      //  insertedId = 8&#xA;user.id = insertedId;&#xA;&#xA;User secondUser{-1, &#34;Alice&#34;, &#34;Inwonder&#34;, 831168000, {} , 2};&#xA;insertedId = storage.insert(secondUser);&#xA;secondUser.id = insertedId;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: if we need to insert a new user with specified id call &lt;code&gt;storage.replace(user);&lt;/code&gt; instead of &lt;code&gt;insert&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Next let&#39;s get our user by id.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;try{&#xA;    auto user = storage.get&amp;lt;User&amp;gt;(insertedId);&#xA;    cout &amp;lt;&amp;lt; &#34;user = &#34; &amp;lt;&amp;lt; user.firstName &amp;lt;&amp;lt; &#34; &#34; &amp;lt;&amp;lt; user.lastName &amp;lt;&amp;lt; endl;&#xA;}catch(std::system_error e) {&#xA;    cout &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; endl;&#xA;}catch(...){&#xA;    cout &amp;lt;&amp;lt; &#34;unknown exeption&#34; &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Probably you may not like throwing exceptions. Me too. Exception &lt;code&gt;std::system_error&lt;/code&gt; is thrown because return type in &lt;code&gt;get&lt;/code&gt; function is not nullable. You can use alternative version &lt;code&gt;get_pointer&lt;/code&gt; which returns &lt;code&gt;std::unique_ptr&lt;/code&gt; and doesn&#39;t throw &lt;code&gt;not_found_exception&lt;/code&gt; if nothing found - just returns &lt;code&gt;nullptr&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;if(auto user = storage.get_pointer&amp;lt;User&amp;gt;(insertedId)){&#xA;    cout &amp;lt;&amp;lt; &#34;user = &#34; &amp;lt;&amp;lt; user-&amp;gt;firstName &amp;lt;&amp;lt; &#34; &#34; &amp;lt;&amp;lt; user-&amp;gt;lastName &amp;lt;&amp;lt; endl;&#xA;}else{&#xA;    cout &amp;lt;&amp;lt; &#34;no user with id &#34; &amp;lt;&amp;lt; insertedId &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;std::unique_ptr&lt;/code&gt; is used as optional in &lt;code&gt;sqlite_orm&lt;/code&gt;. Of course there is class optional in C++14 located at &lt;code&gt;std::experimental::optional&lt;/code&gt;. But we don&#39;t want to use it until it is &lt;code&gt;experimental&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We can also update our user. It updates row by id provided in &lt;code&gt;user&lt;/code&gt; object and sets all other non &lt;code&gt;primary_key&lt;/code&gt; fields to values stored in the passed &lt;code&gt;user&lt;/code&gt; object. So you can just assign members to &lt;code&gt;user&lt;/code&gt; object you want and call &lt;code&gt;update&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;user.firstName = &#34;Nicholas&#34;;&#xA;user.imageUrl = &#34;https://cdn1.iconfinder.com/data/icons/man-icon-set/100/man_icon-21-512.png&#34;&#xA;storage.update(user);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also there is a non-CRUD update version &lt;code&gt;update_all&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;storage.update_all(set(c(&amp;amp;User::lastName) = &#34;Hardey&#34;,&#xA;                       c(&amp;amp;User::typeId) = 2),&#xA;                   where(c(&amp;amp;User::firstName) == &#34;Tom&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And delete. To delete you have to pass id only, not whole object. Also we need to explicitly tell which class of object we want to delete. Function name is &lt;code&gt;remove&lt;/code&gt; not &lt;code&gt;delete&lt;/code&gt; cause &lt;code&gt;delete&lt;/code&gt; is a reserved word in C++.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;storage.remove&amp;lt;User&amp;gt;(insertedId)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also we can extract all objects into &lt;code&gt;std::vector&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;auto allUsers = storage.get_all&amp;lt;User&amp;gt;();&#xA;cout &amp;lt;&amp;lt; &#34;allUsers (&#34; &amp;lt;&amp;lt; allUsers.size() &amp;lt;&amp;lt; &#34;):&#34; &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : allUsers) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl; //  dump returns std::string with json-like style object info. For example: { id : &#39;1&#39;, first_name : &#39;Jonh&#39;, last_name : &#39;Doe&#39;, birth_date : &#39;664416000&#39;, image_url : &#39;https://cdn1.iconfinder.com/data/icons/man-icon-set/100/man_icon-21-512.png&#39;, type_id : &#39;3&#39; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And one can specify return container type explicitly: let&#39;s get all users in &lt;code&gt;std::list&lt;/code&gt;, not &lt;code&gt;std::vector&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;auto allUsersList = storage.get_all&amp;lt;User, std::list&amp;lt;User&amp;gt;&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Container must be STL compatible (must have &lt;code&gt;push_back(T&amp;amp;&amp;amp;)&lt;/code&gt; function in this case).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;get_all&lt;/code&gt; can be too heavy for memory so you can iterate row by row (i.e. object by object):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;for(auto &amp;amp;user : storage.iterate&amp;lt;User&amp;gt;()) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;iterate&lt;/code&gt; member function returns adapter object that has &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; member functions returning iterators that fetch object on dereference operator call.&lt;/p&gt; &#xA;&lt;p&gt;CRUD functions &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;get_pointer&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; (not &lt;code&gt;insert&lt;/code&gt;) work only if your type has a primary key column. If you try to &lt;code&gt;get&lt;/code&gt; an object that is mapped to your storage but has no primary key column a &lt;code&gt;std::system_error&lt;/code&gt; will be thrown cause &lt;code&gt;sqlite_orm&lt;/code&gt; cannot detect an id. If you want to know how to perform a storage without primary key take a look at &lt;code&gt;date_time.cpp&lt;/code&gt; example in &lt;code&gt;examples&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h1&gt;Prepared statements&lt;/h1&gt; &#xA;&lt;p&gt;Prepared statements are strongly typed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//  SELECT doctor_id&#xA;//  FROM visits&#xA;//  WHERE LENGTH(patient_name) &amp;gt; 8&#xA;auto selectStatement = storage.prepare(select(&amp;amp;Visit::doctor_id, where(length(&amp;amp;Visit::patient_name) &amp;gt; 8)));&#xA;cout &amp;lt;&amp;lt; &#34;selectStatement = &#34; &amp;lt;&amp;lt; selectStatement.sql() &amp;lt;&amp;lt; endl;  //  prints &#34;SELECT doctor_id FROM ...&#34;&#xA;auto rows = storage.execute(selectStatement); //  rows is std::vector&amp;lt;decltype(Visit::doctor_id)&amp;gt;&#xA;&#xA;//  SELECT doctor_id&#xA;//  FROM visits&#xA;//  WHERE LENGTH(patient_name) &amp;gt; 11&#xA;get&amp;lt;0&amp;gt;(selectStatement) = 11;&#xA;auto rows2 = storage.execute(selectStatement);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;get&amp;lt;N&amp;gt;(statement)&lt;/code&gt; function call allows you to access fields to bind them to your statement.&lt;/p&gt; &#xA;&lt;h1&gt;Aggregate Functions&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//  SELECT AVG(id) FROM users&#xA;auto averageId = storage.avg(&amp;amp;User::id);    &#xA;cout &amp;lt;&amp;lt; &#34;averageId = &#34; &amp;lt;&amp;lt; averageId &amp;lt;&amp;lt; endl;        //  averageId = 4.5&#xA;    &#xA;//  SELECT AVG(birth_date) FROM users&#xA;auto averageBirthDate = storage.avg(&amp;amp;User::birthDate);  &#xA;cout &amp;lt;&amp;lt; &#34;averageBirthDate = &#34; &amp;lt;&amp;lt; averageBirthDate &amp;lt;&amp;lt; endl;      //  averageBirthDate = 6.64416e+08&#xA;  &#xA;//  SELECT COUNT(*) FROM users&#xA;auto usersCount = storage.count&amp;lt;User&amp;gt;();    &#xA;cout &amp;lt;&amp;lt; &#34;users count = &#34; &amp;lt;&amp;lt; usersCount &amp;lt;&amp;lt; endl;     //  users count = 8&#xA;&#xA;//  SELECT COUNT(id) FROM users&#xA;auto countId = storage.count(&amp;amp;User::id);    &#xA;cout &amp;lt;&amp;lt; &#34;countId = &#34; &amp;lt;&amp;lt; countId &amp;lt;&amp;lt; endl;        //  countId = 8&#xA;&#xA;//  SELECT COUNT(image_url) FROM users&#xA;auto countImageUrl = storage.count(&amp;amp;User::imageUrl);   &#xA;cout &amp;lt;&amp;lt; &#34;countImageUrl = &#34; &amp;lt;&amp;lt; countImageUrl &amp;lt;&amp;lt; endl;      //  countImageUrl = 5&#xA;&#xA;//  SELECT GROUP_CONCAT(id) FROM users&#xA;auto concatedUserId = storage.group_concat(&amp;amp;User::id);      &#xA;cout &amp;lt;&amp;lt; &#34;concatedUserId = &#34; &amp;lt;&amp;lt; concatedUserId &amp;lt;&amp;lt; endl;      //  concatedUserId = 1,2,3,4,5,6,7,8&#xA;&#xA;//  SELECT GROUP_CONCAT(id, &#34;---&#34;) FROM users&#xA;auto concatedUserIdWithDashes = storage.group_concat(&amp;amp;User::id, &#34;---&#34;);     &#xA;cout &amp;lt;&amp;lt; &#34;concatedUserIdWithDashes = &#34; &amp;lt;&amp;lt; concatedUserIdWithDashes &amp;lt;&amp;lt; endl;      //  concatedUserIdWithDashes = 1---2---3---4---5---6---7---8&#xA;&#xA;//  SELECT MAX(id) FROM users&#xA;if(auto maxId = storage.max(&amp;amp;User::id)){    &#xA;    cout &amp;lt;&amp;lt; &#34;maxId = &#34; &amp;lt;&amp;lt; *maxId &amp;lt;&amp;lt;endl;    //  maxId = 12  (maxId is std::unique_ptr&amp;lt;int&amp;gt;)&#xA;}else{&#xA;    cout &amp;lt;&amp;lt; &#34;maxId is null&#34; &amp;lt;&amp;lt; endl;&#xA;}&#xA;    &#xA;//  SELECT MAX(first_name) FROM users&#xA;if(auto maxFirstName = storage.max(&amp;amp;User::firstName)){ &#xA;    cout &amp;lt;&amp;lt; &#34;maxFirstName = &#34; &amp;lt;&amp;lt; *maxFirstName &amp;lt;&amp;lt; endl; //  maxFirstName = Jonh (maxFirstName is std::unique_ptr&amp;lt;std::string&amp;gt;)&#xA;}else{&#xA;    cout &amp;lt;&amp;lt; &#34;maxFirstName is null&#34; &amp;lt;&amp;lt; endl;&#xA;}&#xA;&#xA;//  SELECT MIN(id) FROM users&#xA;if(auto minId = storage.min(&amp;amp;User::id)){    &#xA;    cout &amp;lt;&amp;lt; &#34;minId = &#34; &amp;lt;&amp;lt; *minId &amp;lt;&amp;lt; endl;   //  minId = 1 (minId is std::unique_ptr&amp;lt;int&amp;gt;)&#xA;}else{&#xA;    cout &amp;lt;&amp;lt; &#34;minId is null&#34; &amp;lt;&amp;lt; endl;&#xA;}&#xA;&#xA;//  SELECT MIN(last_name) FROM users&#xA;if(auto minLastName = storage.min(&amp;amp;User::lastName)){&#xA;    cout &amp;lt;&amp;lt; &#34;minLastName = &#34; &amp;lt;&amp;lt; *minLastName &amp;lt;&amp;lt; endl;   //  minLastName = Doe&#xA;}else{&#xA;    cout &amp;lt;&amp;lt; &#34;minLastName is null&#34; &amp;lt;&amp;lt; endl;&#xA;}&#xA;&#xA;//  SELECT SUM(id) FROM users&#xA;if(auto sumId = storage.sum(&amp;amp;User::id)){    //  sumId is std::unique_ptr&amp;lt;int&amp;gt;&#xA;    cout &amp;lt;&amp;lt; &#34;sumId = &#34; &amp;lt;&amp;lt; *sumId &amp;lt;&amp;lt; endl;&#xA;}else{&#xA;    cout &amp;lt;&amp;lt; &#34;sumId is null&#34; &amp;lt;&amp;lt; endl;&#xA;}&#xA;&#xA;//  SELECT TOTAL(id) FROM users&#xA;auto totalId = storage.total(&amp;amp;User::id);&#xA;cout &amp;lt;&amp;lt; &#34;totalId = &#34; &amp;lt;&amp;lt; totalId &amp;lt;&amp;lt; endl;    //  totalId is double (always)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Where conditions&lt;/h1&gt; &#xA;&lt;p&gt;You also can select objects with custom where conditions with &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;BETWEEN&lt;/code&gt; and &lt;code&gt;LIKE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example: let&#39;s select users with id lesser than 10:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//  SELECT * FROM users WHERE id &amp;lt; 10&#xA;auto idLesserThan10 = storage.get_all&amp;lt;User&amp;gt;(where(c(&amp;amp;User::id) &amp;lt; 10));&#xA;cout &amp;lt;&amp;lt; &#34;idLesserThan10 count = &#34; &amp;lt;&amp;lt; idLesserThan10.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : idLesserThan10) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or select all users who&#39;s first name is not equal &#34;John&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//  SELECT * FROM users WHERE first_name != &#39;John&#39;&#xA;auto notJohn = storage.get_all&amp;lt;User&amp;gt;(where(c(&amp;amp;User::firstName) != &#34;John&#34;));&#xA;cout &amp;lt;&amp;lt; &#34;notJohn count = &#34; &amp;lt;&amp;lt; notJohn.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : notJohn) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By the way one can implement not equal in a different way using C++ negation operator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;auto notJohn2 = storage.get_all&amp;lt;User&amp;gt;(where(not (c(&amp;amp;User::firstName) == &#34;John&#34;)));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;!&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt; in this case cause they are equal. Also you can chain several conditions with &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; operators. Let&#39;s try to get users with query with conditions like &lt;code&gt;where id &amp;gt;= 5 and id &amp;lt;= 7 and not id = 6&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;auto id5and7 = storage.get_all&amp;lt;User&amp;gt;(where(c(&amp;amp;User::id) &amp;lt;= 7 and c(&amp;amp;User::id) &amp;gt;= 5 and not (c(&amp;amp;User::id) == 6)));&#xA;cout &amp;lt;&amp;lt; &#34;id5and7 count = &#34; &amp;lt;&amp;lt; id5and7.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : id5and7) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or let&#39;s just export two users with id 10 or id 16 (of course if these users exist):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;auto id10or16 = storage.get_all&amp;lt;User&amp;gt;(where(c(&amp;amp;User::id) == 10 or c(&amp;amp;User::id) == 16));&#xA;cout &amp;lt;&amp;lt; &#34;id10or16 count = &#34; &amp;lt;&amp;lt; id10or16.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : id10or16) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In fact you can chain together any number of different conditions with any operator from &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt;. All conditions are templated so there is no runtime overhead. And this makes &lt;code&gt;sqlite_orm&lt;/code&gt; the most powerful &lt;strong&gt;sqlite&lt;/strong&gt; C++ ORM library!&lt;/p&gt; &#xA;&lt;p&gt;Moreover you can use parentheses to set the priority of query conditions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;auto cuteConditions = storage.get_all&amp;lt;User&amp;gt;(where((c(&amp;amp;User::firstName) == &#34;John&#34; or c(&amp;amp;User::firstName) == &#34;Alex&#34;) and c(&amp;amp;User::id) == 4));  //  where (first_name = &#39;John&#39; or first_name = &#39;Alex&#39;) and id = 4&#xA;cout &amp;lt;&amp;lt; &#34;cuteConditions count = &#34; &amp;lt;&amp;lt; cuteConditions.size() &amp;lt;&amp;lt; endl; //  cuteConditions count = 1&#xA;cuteConditions = storage.get_all&amp;lt;User&amp;gt;(where(c(&amp;amp;User::firstName) == &#34;John&#34; or (c(&amp;amp;User::firstName) == &#34;Alex&#34; and c(&amp;amp;User::id) == 4)));   //  where first_name = &#39;John&#39; or (first_name = &#39;Alex&#39; and id = 4)&#xA;cout &amp;lt;&amp;lt; &#34;cuteConditions count = &#34; &amp;lt;&amp;lt; cuteConditions.size() &amp;lt;&amp;lt; endl; //  cuteConditions count = 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also we can implement &lt;code&gt;get&lt;/code&gt; by id with &lt;code&gt;get_all&lt;/code&gt; and &lt;code&gt;where&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//  SELECT * FROM users WHERE ( 2 = id )&#xA;auto idEquals2 = storage.get_all&amp;lt;User&amp;gt;(where(2 == c(&amp;amp;User::id)));&#xA;cout &amp;lt;&amp;lt; &#34;idEquals2 count = &#34; &amp;lt;&amp;lt; idEquals2.size() &amp;lt;&amp;lt; endl;&#xA;if(idEquals2.size()){&#xA;    cout &amp;lt;&amp;lt; storage.dump(idEquals2.front()) &amp;lt;&amp;lt; endl;&#xA;}else{&#xA;    cout &amp;lt;&amp;lt; &#34;user with id 2 doesn&#39;t exist&#34; &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lets try the &lt;code&gt;IN&lt;/code&gt; operator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//  SELECT * FROM users WHERE id IN (2, 4, 6, 8, 10)&#xA;auto evenLesserTen10 = storage.get_all&amp;lt;User&amp;gt;(where(in(&amp;amp;User::id, {2, 4, 6, 8, 10})));&#xA;cout &amp;lt;&amp;lt; &#34;evenLesserTen10 count = &#34; &amp;lt;&amp;lt; evenLesserTen10.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : evenLesserTen10) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&#xA;//  SELECT * FROM users WHERE last_name IN (&#34;Doe&#34;, &#34;White&#34;)&#xA;auto doesAndWhites = storage.get_all&amp;lt;User&amp;gt;(where(in(&amp;amp;User::lastName, {&#34;Doe&#34;, &#34;White&#34;})));&#xA;cout &amp;lt;&amp;lt; &#34;doesAndWhites count = &#34; &amp;lt;&amp;lt; doesAndWhites.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : doesAndWhites) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And &lt;code&gt;BETWEEN&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//  SELECT * FROM users WHERE id BETWEEN 66 AND 68&#xA;auto betweenId = storage.get_all&amp;lt;User&amp;gt;(where(between(&amp;amp;User::id, 66, 68)));&#xA;cout &amp;lt;&amp;lt; &#34;betweenId = &#34; &amp;lt;&amp;lt; betweenId.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : betweenId) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And even &lt;code&gt;LIKE&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//  SELECT * FROM users WHERE last_name LIKE &#39;D%&#39;&#xA;auto whereNameLike = storage.get_all&amp;lt;User&amp;gt;(where(like(&amp;amp;User::lastName, &#34;D%&#34;)));&#xA;cout &amp;lt;&amp;lt; &#34;whereNameLike = &#34; &amp;lt;&amp;lt; whereNameLike.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : whereNameLike) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Looks like magic but it works very simple. Cute function &lt;code&gt;c&lt;/code&gt; (column) takes a class member pointer and returns a special expression middle object that can be used with operators overloaded in &lt;code&gt;::sqlite_orm&lt;/code&gt; namespace. Operator overloads act just like functions&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;is_equal&lt;/li&gt; &#xA; &lt;li&gt;is_not_equal&lt;/li&gt; &#xA; &lt;li&gt;greater_than&lt;/li&gt; &#xA; &lt;li&gt;greater_or_equal&lt;/li&gt; &#xA; &lt;li&gt;lesser_than&lt;/li&gt; &#xA; &lt;li&gt;lesser_or_equal&lt;/li&gt; &#xA; &lt;li&gt;is_null&lt;/li&gt; &#xA; &lt;li&gt;is_not_null&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;that simulate binary comparison operator so they take 2 arguments: left hand side and right hand side. Arguments may be either member pointer of mapped class or any other expression (core/aggregate function, literal or subexpression). Binary comparison functions map arguments to text to be passed to sqlite engine to process query. Member pointers are being mapped to column names and literals/variables/constants to &#39;?&#39; and then are bound automatically. Next &lt;code&gt;where&lt;/code&gt; function places brackets around condition and adds &#34;WHERE&#34; keyword before condition text. Next resulted string appends to a query string and is being processed further.&lt;/p&gt; &#xA;&lt;p&gt;If you omit &lt;code&gt;where&lt;/code&gt; function in &lt;code&gt;get_all&lt;/code&gt; it will return all objects from a table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;auto allUsers = storage.get_all&amp;lt;User&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also you can use &lt;code&gt;remove_all&lt;/code&gt; function to perform &lt;code&gt;DELETE FROM ... WHERE&lt;/code&gt; query with the same type of conditions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;storage.remove_all&amp;lt;User&amp;gt;(where(c(&amp;amp;User::id) &amp;lt; 100));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Raw select&lt;/h1&gt; &#xA;&lt;p&gt;If you need to extract only a single column (&lt;code&gt;SELECT %column_name% FROM %table_name% WHERE %conditions%&lt;/code&gt;) you can use a non-CRUD &lt;code&gt;select&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;&#xA;//  SELECT id FROM users&#xA;auto allIds = storage.select(&amp;amp;User::id);    &#xA;cout &amp;lt;&amp;lt; &#34;allIds count = &#34; &amp;lt;&amp;lt; allIds.size() &amp;lt;&amp;lt; endl; //  allIds is std::vector&amp;lt;int&amp;gt;&#xA;for(auto &amp;amp;id : allIds) {&#xA;    cout &amp;lt;&amp;lt; id &amp;lt;&amp;lt; &#34; &#34;;&#xA;}&#xA;cout &amp;lt;&amp;lt; endl;&#xA;&#xA;//  SELECT id FROM users WHERE last_name = &#39;Doe&#39;&#xA;auto doeIds = storage.select(&amp;amp;User::id, where(c(&amp;amp;User::lastName) == &#34;Doe&#34;));&#xA;cout &amp;lt;&amp;lt; &#34;doeIds count = &#34; &amp;lt;&amp;lt; doeIds.size() &amp;lt;&amp;lt; endl; //  doeIds is std::vector&amp;lt;int&amp;gt;&#xA;for(auto &amp;amp;doeId : doeIds) {&#xA;    cout &amp;lt;&amp;lt; doeId &amp;lt;&amp;lt; &#34; &#34;;&#xA;}&#xA;cout &amp;lt;&amp;lt; endl;&#xA;&#xA;//  SELECT last_name FROM users WHERE id &amp;lt; 300&#xA;auto allLastNames = storage.select(&amp;amp;User::lastName, where(c(&amp;amp;User::id) &amp;lt; 300));    &#xA;cout &amp;lt;&amp;lt; &#34;allLastNames count = &#34; &amp;lt;&amp;lt; allLastNames.size() &amp;lt;&amp;lt; endl; //  allLastNames is std::vector&amp;lt;std::string&amp;gt;&#xA;for(auto &amp;amp;lastName : allLastNames) {&#xA;    cout &amp;lt;&amp;lt; lastName &amp;lt;&amp;lt; &#34; &#34;;&#xA;}&#xA;cout &amp;lt;&amp;lt; endl;&#xA;&#xA;//  SELECT id FROM users WHERE image_url IS NULL&#xA;auto idsWithoutUrls = storage.select(&amp;amp;User::id, where(is_null(&amp;amp;User::imageUrl)));&#xA;for(auto id : idsWithoutUrls) {&#xA;    cout &amp;lt;&amp;lt; &#34;id without image url &#34; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; endl;&#xA;}&#xA;&#xA;//  SELECT id FROM users WHERE image_url IS NOT NULL&#xA;auto idsWithUrl = storage.select(&amp;amp;User::id, where(is_not_null(&amp;amp;User::imageUrl)));&#xA;for(auto id : idsWithUrl) {&#xA;    cout &amp;lt;&amp;lt; &#34;id with image url &#34; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; endl;&#xA;}&#xA;auto idsWithUrl2 = storage.select(&amp;amp;User::id, where(not is_null(&amp;amp;User::imageUrl)));&#xA;assert(std::equal(idsWithUrl2.begin(),&#xA;                  idsWithUrl2.end(),&#xA;                  idsWithUrl.begin()));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also you&#39;re able to select several column in a vector of tuples. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//  `SELECT first_name, last_name FROM users WHERE id &amp;gt; 250 ORDER BY id`&#xA;auto partialSelect = storage.select(columns(&amp;amp;User::firstName, &amp;amp;User::lastName),&#xA;                                    where(c(&amp;amp;User::id) &amp;gt; 250),&#xA;                                    order_by(&amp;amp;User::id));&#xA;cout &amp;lt;&amp;lt; &#34;partialSelect count = &#34; &amp;lt;&amp;lt; partialSelect.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;t : partialSelect) {&#xA;    auto &amp;amp;firstName = std::get&amp;lt;0&amp;gt;(t);&#xA;    auto &amp;amp;lastName = std::get&amp;lt;1&amp;gt;(t);&#xA;    cout &amp;lt;&amp;lt; firstName &amp;lt;&amp;lt; &#34; &#34; &amp;lt;&amp;lt; lastName &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;ORDER BY support&lt;/h1&gt; &#xA;&lt;p&gt;ORDER BY query option can be applied to &lt;code&gt;get_all&lt;/code&gt; and &lt;code&gt;select&lt;/code&gt; functions just like &lt;code&gt;where&lt;/code&gt; but with &lt;code&gt;order_by&lt;/code&gt; function. It can be mixed with WHERE in a single query. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//  `SELECT * FROM users ORDER BY id`&#xA;auto orderedUsers = storage.get_all&amp;lt;User&amp;gt;(order_by(&amp;amp;User::id));&#xA;cout &amp;lt;&amp;lt; &#34;orderedUsers count = &#34; &amp;lt;&amp;lt; orderedUsers.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : orderedUsers) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&#xA;//  `SELECT * FROM users WHERE id &amp;lt; 250 ORDER BY first_name`&#xA;auto orderedUsers2 = storage.get_all&amp;lt;User&amp;gt;(where(c(&amp;amp;User::id) &amp;lt; 250), order_by(&amp;amp;User::firstName));&#xA;cout &amp;lt;&amp;lt; &#34;orderedUsers2 count = &#34; &amp;lt;&amp;lt; orderedUsers2.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : orderedUsers2) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&#xA;//  `SELECT * FROM users WHERE id &amp;gt; 100 ORDER BY first_name ASC`&#xA;auto orderedUsers3 = storage.get_all&amp;lt;User&amp;gt;(where(c(&amp;amp;User::id) &amp;gt; 100), order_by(&amp;amp;User::firstName).asc());&#xA;cout &amp;lt;&amp;lt; &#34;orderedUsers3 count = &#34; &amp;lt;&amp;lt; orderedUsers3.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : orderedUsers3) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&#xA;//  `SELECT * FROM users ORDER BY id DESC`&#xA;auto orderedUsers4 = storage.get_all&amp;lt;User&amp;gt;(order_by(&amp;amp;User::id).desc());&#xA;cout &amp;lt;&amp;lt; &#34;orderedUsers4 count = &#34; &amp;lt;&amp;lt; orderedUsers4.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : orderedUsers4) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&#xA;//  `SELECT first_name FROM users ORDER BY ID DESC`&#xA;auto orderedFirstNames = storage.select(&amp;amp;User::firstName, order_by(&amp;amp;User::id).desc());&#xA;cout &amp;lt;&amp;lt; &#34;orderedFirstNames count = &#34; &amp;lt;&amp;lt; orderedFirstNames.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;firstName : orderedFirstNames) {&#xA;    cout &amp;lt;&amp;lt; &#34;firstName = &#34; &amp;lt;&amp;lt; firstName &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;LIMIT and OFFSET&lt;/h1&gt; &#xA;&lt;p&gt;There are three available versions of &lt;code&gt;LIMIT&lt;/code&gt;/&lt;code&gt;OFFSET&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LIMIT %limit%&lt;/li&gt; &#xA; &lt;li&gt;LIMIT %limit% OFFSET %offset%&lt;/li&gt; &#xA; &lt;li&gt;LIMIT %offset%, %limit%&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All these versions available with the same interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//  `SELECT * FROM users WHERE id &amp;gt; 250 ORDER BY id LIMIT 5`&#xA;auto limited5 = storage.get_all&amp;lt;User&amp;gt;(where(c(&amp;amp;User::id) &amp;gt; 250),&#xA;                                      order_by(&amp;amp;User::id),&#xA;                                      limit(5));&#xA;cout &amp;lt;&amp;lt; &#34;limited5 count = &#34; &amp;lt;&amp;lt; limited5.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : limited5) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&#xA;//  `SELECT * FROM users WHERE id &amp;gt; 250 ORDER BY id LIMIT 5, 10`&#xA;auto limited5comma10 = storage.get_all&amp;lt;User&amp;gt;(where(c(&amp;amp;User::id) &amp;gt; 250),&#xA;                                             order_by(&amp;amp;User::id),&#xA;                                             limit(5, 10));&#xA;cout &amp;lt;&amp;lt; &#34;limited5comma10 count = &#34; &amp;lt;&amp;lt; limited5comma10.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : limited5comma10) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&#xA;//  `SELECT * FROM users WHERE id &amp;gt; 250 ORDER BY id LIMIT 5 OFFSET 10`&#xA;auto limit5offset10 = storage.get_all&amp;lt;User&amp;gt;(where(c(&amp;amp;User::id) &amp;gt; 250),&#xA;                                            order_by(&amp;amp;User::id),&#xA;                                            limit(5, offset(10)));&#xA;cout &amp;lt;&amp;lt; &#34;limit5offset10 count = &#34; &amp;lt;&amp;lt; limit5offset10.size() &amp;lt;&amp;lt; endl;&#xA;for(auto &amp;amp;user : limit5offset10) {&#xA;    cout &amp;lt;&amp;lt; storage.dump(user) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please beware that queries &lt;code&gt;LIMIT 5, 10&lt;/code&gt; and &lt;code&gt;LIMIT 5 OFFSET 10&lt;/code&gt; mean different. &lt;code&gt;LIMIT 5, 10&lt;/code&gt; means &lt;code&gt;LIMIT 10 OFFSET 5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;JOIN support&lt;/h1&gt; &#xA;&lt;p&gt;You can perform simple &lt;code&gt;JOIN&lt;/code&gt;, &lt;code&gt;CROSS JOIN&lt;/code&gt;, &lt;code&gt;INNER JOIN&lt;/code&gt;, &lt;code&gt;LEFT JOIN&lt;/code&gt; or &lt;code&gt;LEFT OUTER JOIN&lt;/code&gt; in your query. Instead of joined table specify mapped type. Example for doctors and visits:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//  SELECT a.doctor_id, a.doctor_name,&#xA;//      c.patient_name, c.vdate&#xA;//  FROM doctors a&#xA;//  LEFT JOIN visits c&#xA;//  ON a.doctor_id=c.doctor_id;&#xA;auto rows = storage2.select(columns(&amp;amp;Doctor::id, &amp;amp;Doctor::name, &amp;amp;Visit::patientName, &amp;amp;Visit::vdate),&#xA;                            left_join&amp;lt;Visit&amp;gt;(on(c(&amp;amp;Doctor::id) == &amp;amp;Visit::doctorId)));  //  one `c` call is enough cause operator overloads are templated&#xA;for(auto &amp;amp;row : rows) {&#xA;    cout &amp;lt;&amp;lt; std::get&amp;lt;0&amp;gt;(row) &amp;lt;&amp;lt; &#39;\t&#39; &amp;lt;&amp;lt; std::get&amp;lt;1&amp;gt;(row) &amp;lt;&amp;lt; &#39;\t&#39; &amp;lt;&amp;lt; std::get&amp;lt;2&amp;gt;(row) &amp;lt;&amp;lt; &#39;\t&#39; &amp;lt;&amp;lt; std::get&amp;lt;3&amp;gt;(row) &amp;lt;&amp;lt; endl;&#xA;}&#xA;cout &amp;lt;&amp;lt; endl;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simple &lt;code&gt;JOIN&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//  SELECT a.doctor_id,a.doctor_name,&#xA;//      c.patient_name,c.vdate&#xA;//  FROM doctors a&#xA;//  JOIN visits c&#xA;//  ON a.doctor_id=c.doctor_id;&#xA;rows = storage2.select(columns(&amp;amp;Doctor::id, &amp;amp;Doctor::name, &amp;amp;Visit::patientName, &amp;amp;Visit::vdate),&#xA;                       join&amp;lt;Visit&amp;gt;(on(c(&amp;amp;Doctor::id) == &amp;amp;Visit::doctorId)));&#xA;for(auto &amp;amp;row : rows) {&#xA;    cout &amp;lt;&amp;lt; std::get&amp;lt;0&amp;gt;(row) &amp;lt;&amp;lt; &#39;\t&#39; &amp;lt;&amp;lt; std::get&amp;lt;1&amp;gt;(row) &amp;lt;&amp;lt; &#39;\t&#39; &amp;lt;&amp;lt; std::get&amp;lt;2&amp;gt;(row) &amp;lt;&amp;lt; &#39;\t&#39; &amp;lt;&amp;lt; std::get&amp;lt;3&amp;gt;(row) &amp;lt;&amp;lt; endl;&#xA;}&#xA;cout &amp;lt;&amp;lt; endl;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Two &lt;code&gt;INNER JOIN&lt;/code&gt;s in one query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//  SELECT&#xA;//      trackid,&#xA;//      tracks.name AS Track,&#xA;//      albums.title AS Album,&#xA;//      artists.name AS Artist&#xA;//  FROM&#xA;//      tracks&#xA;//  INNER JOIN albums ON albums.albumid = tracks.albumid&#xA;//  INNER JOIN artists ON artists.artistid = albums.artistid;&#xA;auto innerJoinRows2 = storage.select(columns(&amp;amp;Track::trackId, &amp;amp;Track::name, &amp;amp;Album::title, &amp;amp;Artist::name),&#xA;                                     inner_join&amp;lt;Album&amp;gt;(on(c(&amp;amp;Album::albumId) == &amp;amp;Track::albumId)),&#xA;                                     inner_join&amp;lt;Artist&amp;gt;(on(c(&amp;amp;Artist::artistId) == &amp;amp;Album::artistId)));&#xA;//  innerJoinRows2 is std::vector&amp;lt;std::tuple&amp;lt;decltype(Track::trackId), decltype(Track::name), decltype(Album::title), decltype(Artist::name)&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More join examples can be found in &lt;a href=&#34;https://github.com/fnc12/sqlite_orm/raw/master/examples/left_and_inner_join.cpp&#34;&gt;examples folder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Migrations functionality&lt;/h1&gt; &#xA;&lt;p&gt;There are no explicit &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt; functions that are used to be used in migrations. Instead &lt;code&gt;sqlite_orm&lt;/code&gt; offers &lt;code&gt;sync_schema&lt;/code&gt; function that takes responsibility of comparing actual db file schema with one you specified in &lt;code&gt;make_storage&lt;/code&gt; call and if something is not equal it alters or drops/creates schema.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;storage.sync_schema();&#xA;//  or&#xA;storage.sync_schema(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please beware that &lt;code&gt;sync_schema&lt;/code&gt; doesn&#39;t guarantee that data will be saved. It &lt;em&gt;tries&lt;/em&gt; to save it only. Below you can see rules list that &lt;code&gt;sync_schema&lt;/code&gt; follows during call:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if there are excess tables exist in db they are ignored (not dropped)&lt;/li&gt; &#xA; &lt;li&gt;every table from storage is compared with it&#39;s db analog and &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;if table doesn&#39;t exist it is created&lt;/li&gt; &#xA;   &lt;li&gt;if table exists its colums are being compared with table_info from db and &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;if there are columns in db that do not exist in storage (excess) table will be dropped and recreated if &lt;code&gt;preserve&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, and table will be copied into temporary table without excess columns, source table will be dropped, copied table will be renamed to source table (sqlite remove column technique) if &lt;code&gt;preserve&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. &lt;code&gt;preserve&lt;/code&gt; is the first argument in &lt;code&gt;sync_schema&lt;/code&gt; function. It&#39;s default value is &lt;code&gt;false&lt;/code&gt;. Beware that setting it to &lt;code&gt;true&lt;/code&gt; may take time for copying table rows.&lt;/li&gt; &#xA;     &lt;li&gt;if there are columns in storage that do not exist in db they will be added using &#39;ALTER TABLE ... ADD COLUMN ...&#39; command and table data will not be dropped but if any of added columns is null but has not default value table will be dropped and recreated&lt;/li&gt; &#xA;     &lt;li&gt;if there is any column existing in both db and storage but differs by any of properties (type, pk, notnull) table will be dropped and recreated (dflt_value isn&#39;t checked cause there can be ambiguity in default values, please beware).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The best practice is to call this function right after storage creation.&lt;/p&gt; &#xA;&lt;h1&gt;Transactions&lt;/h1&gt; &#xA;&lt;p&gt;There are three ways to begin and commit/rollback transactions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;explicitly call &lt;code&gt;begin_transaction();&lt;/code&gt;, &lt;code&gt;rollback();&lt;/code&gt; or &lt;code&gt;commit();&lt;/code&gt; functions&lt;/li&gt; &#xA; &lt;li&gt;use &lt;code&gt;transaction&lt;/code&gt; function which begins transaction implicitly and takes a lambda argument which returns true for commit and false for rollback. All storage calls performed in lambda can be commited or rollbacked by returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;use &lt;code&gt;transaction_guard&lt;/code&gt; function which returns a guard object which works just like &lt;code&gt;lock_guard&lt;/code&gt; for &lt;code&gt;std::mutex&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example for explicit call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;auto secondUser = storage.get&amp;lt;User&amp;gt;(2);&#xA;&#xA;storage.begin_transaction();&#xA;secondUser.typeId = 3;&#xA;storage.update(secondUser);&#xA;storage.rollback(); //  or storage.commit();&#xA;&#xA;secondUser = storage.get&amp;lt;decltype(secondUser)&amp;gt;(secondUser.id);&#xA;assert(secondUser.typeId != 3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example for implicit call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;storage.transaction([&amp;amp;] () mutable {    //  mutable keyword allows make non-const function calls&#xA;    auto secondUser = storage.get&amp;lt;User&amp;gt;(2);&#xA;    secondUser.typeId = 1;&#xA;    storage.update(secondUser);&#xA;    auto gottaRollback = bool(rand() % 2);&#xA;    if(gottaRollback){  //  dummy condition for test&#xA;        return false;   //  exits lambda and calls ROLLBACK&#xA;    }&#xA;    return true;        //  exits lambda and calls COMMIT&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The second way guarantees that &lt;code&gt;commit&lt;/code&gt; or &lt;code&gt;rollback&lt;/code&gt; will be called. You can use either way.&lt;/p&gt; &#xA;&lt;p&gt;Trancations are useful with &lt;code&gt;changes&lt;/code&gt; sqlite function that returns number of rows modified.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;storage.transaction([&amp;amp;] () mutable {&#xA;    storage.remove_all&amp;lt;User&amp;gt;(where(c(&amp;amp;User::id) &amp;lt; 100));&#xA;    auto usersRemoved = storage.changes();&#xA;    cout &amp;lt;&amp;lt; &#34;usersRemoved = &#34; &amp;lt;&amp;lt; usersRemoved &amp;lt;&amp;lt; endl;&#xA;    return true;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will print a number of deleted users (rows). But if you call &lt;code&gt;changes&lt;/code&gt; without a transaction and your database is located in file not in RAM the result will be 0 always cause &lt;code&gt;sqlite_orm&lt;/code&gt; opens and closes connection every time you call a function without a transaction.&lt;/p&gt; &#xA;&lt;p&gt;Also a &lt;code&gt;transaction&lt;/code&gt; function returns &lt;code&gt;true&lt;/code&gt; if transaction is commited and &lt;code&gt;false&lt;/code&gt; if it is rollbacked. It can be useful if your next actions depend on transaction result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;auto commited = storage.transaction([&amp;amp;] () mutable {    &#xA;    auto secondUser = storage.get&amp;lt;User&amp;gt;(2);&#xA;    secondUser.typeId = 1;&#xA;    storage.update(secondUser);&#xA;    auto gottaRollback = bool(rand() % 2);&#xA;    if(gottaRollback){  //  dummy condition for test&#xA;        return false;   //  exits lambda and calls ROLLBACK&#xA;    }&#xA;    return true;        //  exits lambda and calls COMMIT&#xA;});&#xA;if(commited){&#xA;    cout &amp;lt;&amp;lt; &#34;Commited successfully, go on.&#34; &amp;lt;&amp;lt; endl;&#xA;}else{&#xA;    cerr &amp;lt;&amp;lt; &#34;Commit failed, process an error&#34; &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example for &lt;code&gt;transaction_guard&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;try{&#xA;  auto guard = storage.transaction_guard(); //  calls BEGIN TRANSACTION and returns guard object&#xA;  user.name = &#34;Paul&#34;;&#xA;  auto notExisting = storage.get&amp;lt;User&amp;gt;(-1); //  exception is thrown here, guard calls ROLLBACK in its destructor&#xA;  guard.commit();&#xA;}catch(...){&#xA;  cerr &amp;lt;&amp;lt; &#34;exception&#34; &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;In memory database&lt;/h1&gt; &#xA;&lt;p&gt;To manage in memory database just provide &lt;code&gt;:memory:&lt;/code&gt; or &lt;code&gt;&#34;&#34;&lt;/code&gt; instead as filename to &lt;code&gt;make_storage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Comparison with other C++ libs&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;sqlite_orm&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/SRombauts/SQLiteCpp&#34;&gt;SQLiteCpp&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/paulftw/hiberlite&#34;&gt;hiberlite&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.codesynthesis.com/products/odb/&#34;&gt;ODB&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Schema sync&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Single responsibility principle&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STL compatible&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;No raw string queries&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Transactions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Custom types binding&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Doesn&#39;t use macros and/or external codegen scripts&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Aggregate functions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prepared statements&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;p&gt;To work well your data model class must be default constructable and must not have const fields mapped to database cause they are assigned during queries. Otherwise code won&#39;t compile on line with member assignment operator.&lt;/p&gt; &#xA;&lt;p&gt;For more details please check the project &lt;a href=&#34;https://github.com/fnc12/sqlite_orm/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Installation is not necessary if you plan to use the fetchContent method, see below in Usage.&lt;/p&gt; &#xA;&lt;p&gt;Use a popular package manager like &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; and just install it with the &lt;code&gt;vcpkg install sqlite-orm&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Or you build it from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/fnc12/sqlite_orm.git sqlite_orm&#xA;cd sqlite_orm&#xA;cmake -B build&#xA;cmake --build build --target install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might need admin rights for the last command.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;CMake&lt;/h2&gt; &#xA;&lt;p&gt;If you use cmake, there are two supported ways how to use it with cmake (if another works as well or should be supported, open an issue).&lt;/p&gt; &#xA;&lt;p&gt;Either way you choose, the include path as well as the dependency sqlite3 will be set automatically on your target. So usage is straight forward, but you need to have installed sqlite3 on your system (see Requirements below)&lt;/p&gt; &#xA;&lt;h2&gt;Find Package&lt;/h2&gt; &#xA;&lt;p&gt;If you have installed the lib system wide and it&#39;s in your PATH, you can use find_package to include it in cmake. It will make a target &lt;code&gt;sqlite_orm::sqlite_orm&lt;/code&gt; available which you can link against. Have a look at examples/find_package for a full example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;find_package(SqliteOrm REQUIRED)&#xA;&#xA;target_link_libraries(main PRIVATE sqlite_orm::sqlite_orm)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fetch Content (Recommended)&lt;/h2&gt; &#xA;&lt;p&gt;Alternatively, cmake can download the project directly from github during configure stage and therefore you don&#39;t need to install the lib before. Againt a target &lt;code&gt;sqlite_orm::sqlite_orm&lt;/code&gt; will be available which you can link against. Have a look at examples/fetch_content for a full example.&lt;/p&gt; &#xA;&lt;h2&gt;No CMake&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use the lib directly with Make or something else, just set the inlcude path correctly (should be correct on Linux already), so &lt;code&gt;sqlite_orm/sqlite_orm.h&lt;/code&gt; is found. As this is a header only lib, there is nothing more you have to do.&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C++14 compatible compiler (not C++11 cause of templated lambdas in the lib).&lt;/li&gt; &#xA; &lt;li&gt;Sqlite3 installed on your system and in the path, so cmake can find it (or linked to you project if you don&#39;t use cmake)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Video from conference&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ngsilquWgpo&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/ngsilquWgpo/0.jpg&#34; alt=&#34;Video from conference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SqliteMan&lt;/h1&gt; &#xA;&lt;p&gt;In case you need a native SQLite client for macOS or Windows 10 you can use SqliteMan &lt;a href=&#34;https://sqliteman.dev&#34;&gt;https://sqliteman.dev&lt;/a&gt;. It is not a commercial. It is a free native client being developed by the maintainer of this repo.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nghttp2/nghttp2</title>
    <updated>2023-09-21T01:24:53Z</updated>
    <id>tag:github.com,2023-09-21:/nghttp2/nghttp2</id>
    <link href="https://github.com/nghttp2/nghttp2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;nghttp2 - HTTP/2 C Library and tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nghttp2 - HTTP/2 C Library&lt;/h1&gt; &#xA;&lt;p&gt;This is an implementation of the Hypertext Transfer Protocol version 2 in C.&lt;/p&gt; &#xA;&lt;p&gt;The framing layer of HTTP/2 is implemented as a reusable C library. On top of that, we have implemented an HTTP/2 client, server and proxy. We have also developed load test and benchmarking tools for HTTP/2.&lt;/p&gt; &#xA;&lt;p&gt;An HPACK encoder and decoder are available as a public API.&lt;/p&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;p&gt;nghttp2 was originally developed based on &lt;code&gt;RFC 7540 &amp;lt;https://tools.ietf.org/html/rfc7540&amp;gt;&lt;/code&gt;_ HTTP/2 and &lt;code&gt;RFC 7541 &amp;lt;https://tools.ietf.org/html/rfc7541&amp;gt;&lt;/code&gt;_ HPACK - Header Compression for HTTP/2. Now we are updating our code to implement &lt;code&gt;RFC 9113 &amp;lt;https://datatracker.ietf.org/doc/html/rfc9113&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;The nghttp2 code base was forked from the spdylay (&lt;a href=&#34;https://github.com/tatsuhiro-t/spdylay&#34;&gt;https://github.com/tatsuhiro-t/spdylay&lt;/a&gt;) project.&lt;/p&gt; &#xA;&lt;h2&gt;Public Test Server&lt;/h2&gt; &#xA;&lt;p&gt;The following endpoints are available to try out our nghttp2 implementation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://nghttp2.org/&#34;&gt;https://nghttp2.org/&lt;/a&gt; (TLS + ALPN/NPN and HTTP/3)&lt;/p&gt; &lt;p&gt;This endpoint supports &lt;code&gt;h2&lt;/code&gt;, &lt;code&gt;h2-16&lt;/code&gt;, &lt;code&gt;h2-14&lt;/code&gt;, and &lt;code&gt;http/1.1&lt;/code&gt; via ALPN/NPN and requires TLSv1.2 for HTTP/2 connection.&lt;/p&gt; &lt;p&gt;It also supports HTTP/3.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://nghttp2.org/&#34;&gt;http://nghttp2.org/&lt;/a&gt; (HTTP Upgrade and HTTP/2 Direct)&lt;/p&gt; &lt;p&gt;&lt;code&gt;h2c&lt;/code&gt; and &lt;code&gt;http/1.1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The following package is required to build the libnghttp2 library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pkg-config &amp;gt;= 0.20&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build and run the unit test programs, the following package is required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cunit &amp;gt;= 2.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build the documentation, you need to install:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sphinx (&lt;a href=&#34;http://sphinx-doc.org/&#34;&gt;http://sphinx-doc.org/&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need libnghttp2 (C library) only, then the above packages are all you need. Use &lt;code&gt;--enable-lib-only&lt;/code&gt; to ensure that only libnghttp2 is built. This avoids potential build error related to building bundled applications.&lt;/p&gt; &#xA;&lt;p&gt;To build and run the application programs (&lt;code&gt;nghttp&lt;/code&gt;, &lt;code&gt;nghttpd&lt;/code&gt;, &lt;code&gt;nghttpx&lt;/code&gt; and &lt;code&gt;h2load&lt;/code&gt;) in the &lt;code&gt;src&lt;/code&gt; directory, the following packages are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenSSL &amp;gt;= 1.0.1&lt;/li&gt; &#xA; &lt;li&gt;libev &amp;gt;= 4.11&lt;/li&gt; &#xA; &lt;li&gt;zlib &amp;gt;= 1.2.3&lt;/li&gt; &#xA; &lt;li&gt;libc-ares &amp;gt;= 1.7.5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ALPN support requires OpenSSL &amp;gt;= 1.0.2 (released 22 January 2015). LibreSSL &amp;gt;= 2.2.0 can be used instead of OpenSSL, but OpenSSL has more features than LibreSSL at the time of this writing.&lt;/p&gt; &#xA;&lt;p&gt;To enable &lt;code&gt;-a&lt;/code&gt; option (getting linked assets from the downloaded resource) in &lt;code&gt;nghttp&lt;/code&gt;, the following package is required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libxml2 &amp;gt;= 2.6.26&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To enable systemd support in nghttpx, the following package is required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libsystemd-dev &amp;gt;= 209&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The HPACK tools require the following package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;jansson &amp;gt;= 2.5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build sources under the examples directory, libevent is required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libevent-openssl &amp;gt;= 2.0.8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To mitigate heap fragmentation in long running server programs (&lt;code&gt;nghttpd&lt;/code&gt; and &lt;code&gt;nghttpx&lt;/code&gt;), jemalloc is recommended:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;jemalloc&lt;/p&gt; &lt;p&gt;.. note::&lt;/p&gt; &lt;p&gt;Alpine Linux currently does not support malloc replacement due to musl limitations. See details in issue &lt;code&gt;#762 &amp;lt;https://github.com/nghttp2/nghttp2/issues/762&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To enable mruby support for nghttpx, &lt;code&gt;mruby &amp;lt;https://github.com/mruby/mruby&amp;gt;&lt;/code&gt;_ is required. We need to build mruby with C++ ABI explicitly turned on, and probably need other mrgems, mruby is manged by git submodule under third-party/mruby directory. Currently, mruby support for nghttpx is disabled by default. To enable mruby support, use &lt;code&gt;--with-mruby&lt;/code&gt; configure option. Note that at the time of this writing, libmruby-dev and mruby packages in Debian/Ubuntu are not usable for nghttp2, since they do not enable C++ ABI. To build mruby, the following packages are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ruby&lt;/li&gt; &#xA; &lt;li&gt;bison&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;nghttpx supports &lt;code&gt;neverbleed &amp;lt;https://github.com/h2o/neverbleed&amp;gt;&lt;/code&gt;_, privilege separation engine for OpenSSL / LibreSSL. In short, it minimizes the risk of private key leakage when serious bug like Heartbleed is exploited. The neverbleed is disabled by default. To enable it, use &lt;code&gt;--with-neverbleed&lt;/code&gt; configure option.&lt;/p&gt; &#xA;&lt;p&gt;To enable the experimental HTTP/3 support for h2load and nghttpx, the following libraries are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OpenSSL with QUIC support &amp;lt;https://github.com/quictls/openssl/tree/OpenSSL_1_1_1v+quic&amp;gt;&lt;/code&gt;&lt;em&gt;; or &lt;code&gt;BoringSSL &amp;lt;https://boringssl.googlesource.com/boringssl/&amp;gt;&lt;/code&gt;&lt;/em&gt; (commit 6ca49385b168f47a50e7172d82a590b218f55e4d)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ngtcp2 &amp;lt;https://github.com/ngtcp2/ngtcp2&amp;gt;&lt;/code&gt;_ 0.19.x&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nghttp3 &amp;lt;https://github.com/ngtcp2/nghttp3&amp;gt;&lt;/code&gt;_ 0.15.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--enable-http3&lt;/code&gt; configure option to enable HTTP/3 feature for h2load and nghttpx.&lt;/p&gt; &#xA;&lt;p&gt;In order to build optional eBPF program to direct an incoming QUIC UDP datagram to a correct socket for nghttpx, the following libraries are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libbpf-dev &amp;gt;= 0.7.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--with-libbpf&lt;/code&gt; configure option to build eBPF program. libelf-dev is needed to build libbpf.&lt;/p&gt; &#xA;&lt;p&gt;For Ubuntu 20.04, you can build libbpf from &lt;code&gt;the source code &amp;lt;https://github.com/libbpf/libbpf/releases/tag/v1.2.2&amp;gt;&lt;/code&gt;_. nghttpx requires eBPF program for reloading its configuration and hot swapping its executable.&lt;/p&gt; &#xA;&lt;p&gt;Compiling libnghttp2 C source code requires a C99 compiler. gcc 4.8 is known to be adequate. In order to compile the C++ source code, gcc&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;= 6.0 or clang &amp;gt;= 6.0 is required. C++ source code requires C++14 language features.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;.. note::&lt;/p&gt; &#xA;&lt;p&gt;To enable mruby support in nghttpx, and use &lt;code&gt;--with-mruby&lt;/code&gt; configure option.&lt;/p&gt; &#xA;&lt;p&gt;.. note::&lt;/p&gt; &#xA;&lt;p&gt;Mac OS X users may need the &lt;code&gt;--disable-threads&lt;/code&gt; configure option to disable multi-threading in nghttpd, nghttpx and h2load to prevent them from crashing. A patch is welcome to make multi threading work on Mac OS X platform.&lt;/p&gt; &#xA;&lt;p&gt;.. note::&lt;/p&gt; &#xA;&lt;p&gt;To compile the associated applications (nghttp, nghttpd, nghttpx and h2load), you must use the &lt;code&gt;--enable-app&lt;/code&gt; configure option and ensure that the specified requirements above are met. Normally, configure script checks required dependencies to build these applications, and enable &lt;code&gt;--enable-app&lt;/code&gt; automatically, so you don&#39;t have to use it explicitly. But if you found that applications were not built, then using &lt;code&gt;--enable-app&lt;/code&gt; may find that cause, such as the missing dependency.&lt;/p&gt; &#xA;&lt;p&gt;.. note::&lt;/p&gt; &#xA;&lt;p&gt;In order to detect third party libraries, pkg-config is used (however we don&#39;t use pkg-config for some libraries (e.g., libev)). By default, pkg-config searches &lt;code&gt;*.pc&lt;/code&gt; file in the standard locations (e.g., /usr/lib/pkgconfig). If it is necessary to use &lt;code&gt;*.pc&lt;/code&gt; file in the custom location, specify paths to &lt;code&gt;PKG_CONFIG_PATH&lt;/code&gt; environment variable, and pass it to configure script, like so:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   $ ./configure PKG_CONFIG_PATH=/path/to/pkgconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For pkg-config managed libraries, &lt;code&gt;*_CFLAG&lt;/code&gt; and &lt;code&gt;*_LIBS&lt;/code&gt; environment variables are defined (e.g., &lt;code&gt;OPENSSL_CFLAGS&lt;/code&gt;, &lt;code&gt;OPENSSL_LIBS&lt;/code&gt;). Specifying non-empty string to these variables completely overrides pkg-config. In other words, if they are specified, pkg-config is not used for detection, and user is responsible to specify the correct values to these variables. For complete list of these variables, run &lt;code&gt;./configure -h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Ubuntu 22.04 LTS, run the following to install the required packages:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install g++ clang make binutils autoconf automake \&#xA;  autotools-dev libtool pkg-config \&#xA;  zlib1g-dev libcunit1-dev libssl-dev libxml2-dev libev-dev \&#xA;  libevent-dev libjansson-dev \&#xA;  libc-ares-dev libjemalloc-dev libsystemd-dev \&#xA;  ruby-dev bison libelf-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building nghttp2 from release tar archive&lt;/h2&gt; &#xA;&lt;p&gt;The nghttp2 project regularly releases tar archives which includes nghttp2 source code, and generated build files. They can be downloaded from &lt;code&gt;Releases &amp;lt;https://github.com/nghttp2/nghttp2/releases&amp;gt;&lt;/code&gt;_ page.&lt;/p&gt; &#xA;&lt;p&gt;Building nghttp2 from git requires autotools development packages. Building from tar archives does not require them, and thus it is much easier. The usual build step is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tar xf nghttp2-X.Y.Z.tar.bz2&#xA;$ cd nghttp2-X.Y.Z&#xA;$ ./configure&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building from git&lt;/h2&gt; &#xA;&lt;p&gt;Building from git is easy, but please be sure that at least autoconf 2.68 is used:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git submodule update --init&#xA;$ autoreconf -i&#xA;$ automake&#xA;$ autoconf&#xA;$ ./configure&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes for building on Windows (MSVC)&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to build native Windows nghttp2 dll is use &lt;code&gt;cmake &amp;lt;https://cmake.org/&amp;gt;&lt;/code&gt;&lt;em&gt;. The free version of &lt;code&gt;Visual C++ Build Tools &amp;lt;http://landinghub.visualstudio.com/visual-cpp-build-tools&amp;gt;&lt;/code&gt;&lt;/em&gt; works fine.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install cmake for windows&lt;/li&gt; &#xA; &lt;li&gt;Open &#34;Visual C++ ... Native Build Tool Command Prompt&#34;, and inside nghttp2 directly, run &lt;code&gt;cmake&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Then run &lt;code&gt;cmake --build&lt;/code&gt; to build library.&lt;/li&gt; &#xA; &lt;li&gt;nghttp2.dll, nghttp2.lib, nghttp2.exp are placed under lib directory.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note that the above steps most likely produce nghttp2 library only. No bundled applications are compiled.&lt;/p&gt; &#xA;&lt;h2&gt;Notes for building on Windows (Mingw/Cygwin)&lt;/h2&gt; &#xA;&lt;p&gt;Under Mingw environment, you can only compile the library, it&#39;s &lt;code&gt;libnghttp2-X.dll&lt;/code&gt; and &lt;code&gt;libnghttp2.a&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to compile the applications(&lt;code&gt;h2load&lt;/code&gt;, &lt;code&gt;nghttp&lt;/code&gt;, &lt;code&gt;nghttpx&lt;/code&gt;, &lt;code&gt;nghttpd&lt;/code&gt;), you need to use the Cygwin environment.&lt;/p&gt; &#xA;&lt;p&gt;Under Cygwin environment, to compile the applications you need to compile and install the libev first.&lt;/p&gt; &#xA;&lt;p&gt;Secondly, you need to undefine the macro &lt;code&gt;__STRICT_ANSI__&lt;/code&gt;, if you not, the functions &lt;code&gt;fdopen&lt;/code&gt;, &lt;code&gt;fileno&lt;/code&gt; and &lt;code&gt;strptime&lt;/code&gt; will not available.&lt;/p&gt; &#xA;&lt;p&gt;the sample command like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export CFLAGS=&#34;-U__STRICT_ANSI__ -I$libev_PREFIX/include -L$libev_PREFIX/lib&#34;&#xA;$ export CXXFLAGS=$CFLAGS&#xA;$ ./configure&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to compile the applications under &lt;code&gt;examples/&lt;/code&gt;, you need to remove or rename the &lt;code&gt;event.h&lt;/code&gt; from libev&#39;s installation, because it conflicts with libevent&#39;s installation.&lt;/p&gt; &#xA;&lt;h2&gt;Notes for installation on Linux systems&lt;/h2&gt; &#xA;&lt;p&gt;After installing nghttp2 tool suite with &lt;code&gt;make install&lt;/code&gt; one might experience a similar error:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nghttpx: error while loading shared libraries: libnghttp2.so.14: cannot open shared object file: No such file or directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means that the tool is unable to locate the &lt;code&gt;libnghttp2.so&lt;/code&gt; shared library.&lt;/p&gt; &#xA;&lt;p&gt;To update the shared library cache run &lt;code&gt;sudo ldconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building the documentation&lt;/h2&gt; &#xA;&lt;p&gt;.. note::&lt;/p&gt; &#xA;&lt;p&gt;Documentation is still incomplete.&lt;/p&gt; &#xA;&lt;p&gt;To build the documentation, run:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The documents will be generated under &lt;code&gt;doc/manual/html/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The generated documents will not be installed with &lt;code&gt;make install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The online documentation is available at &lt;a href=&#34;https://nghttp2.org/documentation/&#34;&gt;https://nghttp2.org/documentation/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build HTTP/3 enabled h2load and nghttpx&lt;/h2&gt; &#xA;&lt;p&gt;To build h2load and nghttpx with HTTP/3 feature enabled, run the configure script with &lt;code&gt;--enable-http3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For nghttpx to reload configurations and swapping its executable while gracefully terminating old worker processes, eBPF is required. Run the configure script with &lt;code&gt;--enable-http3 --with-libbpf&lt;/code&gt; to build eBPF program. The QUIC keying material must be set with &lt;code&gt;--frontend-quic-secret-file&lt;/code&gt; in order to keep the existing connections alive during reload.&lt;/p&gt; &#xA;&lt;p&gt;The detailed steps to build HTTP/3 enabled h2load and nghttpx follow.&lt;/p&gt; &#xA;&lt;p&gt;Build custom OpenSSL:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;p&gt;$ git clone --depth 1 -b OpenSSL_1_1_1v+quic &lt;a href=&#34;https://github.com/quictls/openssl&#34;&gt;https://github.com/quictls/openssl&lt;/a&gt; $ cd openssl $ ./config --prefix=$PWD/build --openssldir=/etc/ssl $ make -j$(nproc) $ make install_sw $ cd ..&lt;/p&gt; &#xA;&lt;p&gt;Build nghttp3:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;p&gt;$ git clone --depth 1 -b v0.15.0 &lt;a href=&#34;https://github.com/ngtcp2/nghttp3&#34;&gt;https://github.com/ngtcp2/nghttp3&lt;/a&gt; $ cd nghttp3 $ autoreconf -i $ ./configure --prefix=$PWD/build --enable-lib-only $ make -j$(nproc) $ make install $ cd ..&lt;/p&gt; &#xA;&lt;p&gt;Build ngtcp2:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;p&gt;$ git clone --depth 1 -b v0.19.1 &lt;a href=&#34;https://github.com/ngtcp2/ngtcp2&#34;&gt;https://github.com/ngtcp2/ngtcp2&lt;/a&gt; $ cd ngtcp2 $ autoreconf -i $ ./configure --prefix=$PWD/build --enable-lib-only &lt;br&gt; PKG_CONFIG_PATH=&#34;$PWD/../openssl/build/lib/pkgconfig&#34; $ make -j$(nproc) $ make install $ cd ..&lt;/p&gt; &#xA;&lt;p&gt;If your Linux distribution does not have libbpf-dev &amp;gt;= 0.7.0, build from source:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;p&gt;$ git clone --depth 1 -b v1.2.2 &lt;a href=&#34;https://github.com/libbpf/libbpf&#34;&gt;https://github.com/libbpf/libbpf&lt;/a&gt; $ cd libbpf $ PREFIX=$PWD/build make -C src install $ cd ..&lt;/p&gt; &#xA;&lt;p&gt;Build nghttp2:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;p&gt;$ git clone &lt;a href=&#34;https://github.com/nghttp2/nghttp2&#34;&gt;https://github.com/nghttp2/nghttp2&lt;/a&gt; $ cd nghttp2 $ git submodule update --init $ autoreconf -i $ ./configure --with-mruby --with-neverbleed --enable-http3 --with-libbpf &lt;br&gt; CC=clang-14 CXX=clang++-14 &lt;br&gt; PKG_CONFIG_PATH=&#34;$PWD/../openssl/build/lib/pkgconfig:$PWD/../nghttp3/build/lib/pkgconfig:$PWD/../ngtcp2/build/lib/pkgconfig:$PWD/../libbpf/build/lib64/pkgconfig&#34; &lt;br&gt; LDFLAGS=&#34;$LDFLAGS -Wl,-rpath,$PWD/../openssl/build/lib -Wl,-rpath,$PWD/../libbpf/build/lib64&#34; $ make -j$(nproc)&lt;/p&gt; &#xA;&lt;p&gt;The eBPF program &lt;code&gt;reuseport_kern.o&lt;/code&gt; should be found under bpf directory. Pass &lt;code&gt;--quic-bpf-program-file=bpf/reuseport_kern.o&lt;/code&gt; option to nghttpx to load it. See also &lt;code&gt;HTTP/3 section in nghttpx - HTTP/2 proxy - HOW-TO &amp;lt;https://nghttp2.org/documentation/nghttpx-howto.html#http-3&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Unit tests&lt;/h2&gt; &#xA;&lt;p&gt;Unit tests are done by simply running &lt;code&gt;make check&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Integration tests&lt;/h2&gt; &#xA;&lt;p&gt;We have the integration tests for the nghttpx proxy server. The tests are written in the &lt;code&gt;Go programming language &amp;lt;http://golang.org/&amp;gt;&lt;/code&gt;_ and uses its testing framework. We depend on the following libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;golang.org/x/net/http2&lt;/li&gt; &#xA; &lt;li&gt;golang.org/x/net/websocket&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tatsuhiro-t/go-nghttp2&#34;&gt;https://github.com/tatsuhiro-t/go-nghttp2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Go modules will download these dependencies automatically.&lt;/p&gt; &#xA;&lt;p&gt;To run the tests, run the following command under &lt;code&gt;integration-tests&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make it&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inside the tests, we use port 3009 to run the test subject server.&lt;/p&gt; &#xA;&lt;h2&gt;Migration from v0.7.15 or earlier&lt;/h2&gt; &#xA;&lt;p&gt;nghttp2 v1.0.0 introduced several backward incompatible changes. In this section, we describe these changes and how to migrate to v1.0.0.&lt;/p&gt; &#xA;&lt;p&gt;ALPN protocol ID is now &lt;code&gt;h2&lt;/code&gt; and &lt;code&gt;h2c&lt;/code&gt; ++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;p&gt;Previously we announced &lt;code&gt;h2-14&lt;/code&gt; and &lt;code&gt;h2c-14&lt;/code&gt;. v1.0.0 implements final protocol version, and we changed ALPN ID to &lt;code&gt;h2&lt;/code&gt; and &lt;code&gt;h2c&lt;/code&gt;. The macros &lt;code&gt;NGHTTP2_PROTO_VERSION_ID&lt;/code&gt;, &lt;code&gt;NGHTTP2_PROTO_VERSION_ID_LEN&lt;/code&gt;, &lt;code&gt;NGHTTP2_CLEARTEXT_PROTO_VERSION_ID&lt;/code&gt;, and &lt;code&gt;NGHTTP2_CLEARTEXT_PROTO_VERSION_ID_LEN&lt;/code&gt; have been updated to reflect this change.&lt;/p&gt; &#xA;&lt;p&gt;Basically, existing applications do not have to do anything, just recompiling is enough for this change.&lt;/p&gt; &#xA;&lt;p&gt;Use word &#34;client magic&#34; where we use &#34;client connection preface&#34; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;p&gt;We use &#34;client connection preface&#34; to mean first 24 bytes of client connection preface. This is technically not correct, since client connection preface is composed of 24 bytes client magic byte string followed by SETTINGS frame. For clarification, we call &#34;client magic&#34; for this 24 bytes byte string and updated API.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NGHTTP2_CLIENT_CONNECTION_PREFACE&lt;/code&gt; was replaced with &lt;code&gt;NGHTTP2_CLIENT_MAGIC&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NGHTTP2_CLIENT_CONNECTION_PREFACE_LEN&lt;/code&gt; was replaced with &lt;code&gt;NGHTTP2_CLIENT_MAGIC_LEN&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NGHTTP2_BAD_PREFACE&lt;/code&gt; was renamed as &lt;code&gt;NGHTTP2_BAD_CLIENT_MAGIC&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The already deprecated &lt;code&gt;NGHTTP2_CLIENT_CONNECTION_HEADER&lt;/code&gt; and &lt;code&gt;NGHTTP2_CLIENT_CONNECTION_HEADER_LEN&lt;/code&gt; were removed.&lt;/p&gt; &#xA;&lt;p&gt;If application uses these macros, just replace old ones with new ones. Since v1.0.0, client magic is sent by library (see next subsection), so client application may just remove these macro use.&lt;/p&gt; &#xA;&lt;p&gt;Client magic is sent by library +++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;p&gt;Previously nghttp2 library did not send client magic, which is first 24 bytes byte string of client connection preface, and client applications have to send it by themselves. Since v1.0.0, client magic is sent by library via first call of &lt;code&gt;nghttp2_session_send()&lt;/code&gt; or &lt;code&gt;nghttp2_session_mem_send()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The client applications which send client magic must remove the relevant code.&lt;/p&gt; &#xA;&lt;p&gt;Remove HTTP Alternative Services (Alt-Svc) related code +++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;p&gt;Alt-Svc specification is not finalized yet. To make our API stable, we have decided to remove all Alt-Svc related API from nghttp2.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NGHTTP2_EXT_ALTSVC&lt;/code&gt; was removed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nghttp2_ext_altsvc&lt;/code&gt; was removed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have already removed the functionality of Alt-Svc in v0.7 series and they have been essentially noop. The application using these macro and struct, remove those lines.&lt;/p&gt; &#xA;&lt;p&gt;Use nghttp2_error in nghttp2_on_invalid_frame_recv_callback +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;p&gt;Previously &lt;code&gt;nghttp2_on_invalid_frame_recv_cb_called&lt;/code&gt; took the &lt;code&gt;error_code&lt;/code&gt;, defined in &lt;code&gt;nghttp2_error_code&lt;/code&gt;, as parameter. But they are not detailed enough to debug. Therefore, we decided to use more detailed &lt;code&gt;nghttp2_error&lt;/code&gt; values instead.&lt;/p&gt; &#xA;&lt;p&gt;The application using this callback should update the callback signature. If it treats &lt;code&gt;error_code&lt;/code&gt; as HTTP/2 error code, update the code so that it is treated as &lt;code&gt;nghttp2_error&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Receive client magic by default +++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;p&gt;Previously nghttp2 did not process client magic (24 bytes byte string). To make it deal with it, we had to use &lt;code&gt;nghttp2_option_set_recv_client_preface()&lt;/code&gt;. Since v1.0.0, nghttp2 processes client magic by default and &lt;code&gt;nghttp2_option_set_recv_client_preface()&lt;/code&gt; was removed.&lt;/p&gt; &#xA;&lt;p&gt;Some application may want to disable this behaviour, so we added &lt;code&gt;nghttp2_option_set_no_recv_client_magic()&lt;/code&gt; to achieve this.&lt;/p&gt; &#xA;&lt;p&gt;The application using &lt;code&gt;nghttp2_option_set_recv_client_preface()&lt;/code&gt; with nonzero value, just remove it.&lt;/p&gt; &#xA;&lt;p&gt;The application using &lt;code&gt;nghttp2_option_set_recv_client_preface()&lt;/code&gt; with zero value or not using it must use &lt;code&gt;nghttp2_option_set_no_recv_client_magic()&lt;/code&gt; with nonzero value.&lt;/p&gt; &#xA;&lt;h2&gt;Client, Server and Proxy programs&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;src&lt;/code&gt; directory contains the HTTP/2 client, server and proxy programs.&lt;/p&gt; &#xA;&lt;p&gt;nghttp - client +++++++++++++++&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nghttp&lt;/code&gt; is a HTTP/2 client. It can connect to the HTTP/2 server with prior knowledge, HTTP Upgrade and NPN/ALPN TLS extension.&lt;/p&gt; &#xA;&lt;p&gt;It has verbose output mode for framing information. Here is sample output from &lt;code&gt;nghttp&lt;/code&gt; client:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nghttp -nv https://nghttp2.org&#xA;[  0.190] Connected&#xA;The negotiated protocol: h2&#xA;[  0.212] recv SETTINGS frame &amp;lt;length=12, flags=0x00, stream_id=0&amp;gt;&#xA;      (niv=2)&#xA;      [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]&#xA;      [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]&#xA;[  0.212] send SETTINGS frame &amp;lt;length=12, flags=0x00, stream_id=0&amp;gt;&#xA;      (niv=2)&#xA;      [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]&#xA;      [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]&#xA;[  0.212] send SETTINGS frame &amp;lt;length=0, flags=0x01, stream_id=0&amp;gt;&#xA;      ; ACK&#xA;      (niv=0)&#xA;[  0.212] send PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=3&amp;gt;&#xA;      (dep_stream_id=0, weight=201, exclusive=0)&#xA;[  0.212] send PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=5&amp;gt;&#xA;      (dep_stream_id=0, weight=101, exclusive=0)&#xA;[  0.212] send PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=7&amp;gt;&#xA;      (dep_stream_id=0, weight=1, exclusive=0)&#xA;[  0.212] send PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=9&amp;gt;&#xA;      (dep_stream_id=7, weight=1, exclusive=0)&#xA;[  0.212] send PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=11&amp;gt;&#xA;      (dep_stream_id=3, weight=1, exclusive=0)&#xA;[  0.212] send HEADERS frame &amp;lt;length=39, flags=0x25, stream_id=13&amp;gt;&#xA;      ; END_STREAM | END_HEADERS | PRIORITY&#xA;      (padlen=0, dep_stream_id=11, weight=16, exclusive=0)&#xA;      ; Open new stream&#xA;      :method: GET&#xA;      :path: /&#xA;      :scheme: https&#xA;      :authority: nghttp2.org&#xA;      accept: */*&#xA;      accept-encoding: gzip, deflate&#xA;      user-agent: nghttp2/1.0.1-DEV&#xA;[  0.221] recv SETTINGS frame &amp;lt;length=0, flags=0x01, stream_id=0&amp;gt;&#xA;      ; ACK&#xA;      (niv=0)&#xA;[  0.221] recv (stream_id=13) :method: GET&#xA;[  0.221] recv (stream_id=13) :scheme: https&#xA;[  0.221] recv (stream_id=13) :path: /stylesheets/screen.css&#xA;[  0.221] recv (stream_id=13) :authority: nghttp2.org&#xA;[  0.221] recv (stream_id=13) accept-encoding: gzip, deflate&#xA;[  0.222] recv (stream_id=13) user-agent: nghttp2/1.0.1-DEV&#xA;[  0.222] recv PUSH_PROMISE frame &amp;lt;length=50, flags=0x04, stream_id=13&amp;gt;&#xA;      ; END_HEADERS&#xA;      (padlen=0, promised_stream_id=2)&#xA;[  0.222] recv (stream_id=13) :status: 200&#xA;[  0.222] recv (stream_id=13) date: Thu, 21 May 2015 16:38:14 GMT&#xA;[  0.222] recv (stream_id=13) content-type: text/html&#xA;[  0.222] recv (stream_id=13) last-modified: Fri, 15 May 2015 15:38:06 GMT&#xA;[  0.222] recv (stream_id=13) etag: W/&#34;555612de-19f6&#34;&#xA;[  0.222] recv (stream_id=13) link: &amp;lt;/stylesheets/screen.css&amp;gt;; rel=preload; as=stylesheet&#xA;[  0.222] recv (stream_id=13) content-encoding: gzip&#xA;[  0.222] recv (stream_id=13) server: nghttpx nghttp2/1.0.1-DEV&#xA;[  0.222] recv (stream_id=13) via: 1.1 nghttpx&#xA;[  0.222] recv (stream_id=13) strict-transport-security: max-age=31536000&#xA;[  0.222] recv HEADERS frame &amp;lt;length=166, flags=0x04, stream_id=13&amp;gt;&#xA;      ; END_HEADERS&#xA;      (padlen=0)&#xA;      ; First response header&#xA;[  0.222] recv DATA frame &amp;lt;length=2601, flags=0x01, stream_id=13&amp;gt;&#xA;      ; END_STREAM&#xA;[  0.222] recv (stream_id=2) :status: 200&#xA;[  0.222] recv (stream_id=2) date: Thu, 21 May 2015 16:38:14 GMT&#xA;[  0.222] recv (stream_id=2) content-type: text/css&#xA;[  0.222] recv (stream_id=2) last-modified: Fri, 15 May 2015 15:38:06 GMT&#xA;[  0.222] recv (stream_id=2) etag: W/&#34;555612de-9845&#34;&#xA;[  0.222] recv (stream_id=2) content-encoding: gzip&#xA;[  0.222] recv (stream_id=2) server: nghttpx nghttp2/1.0.1-DEV&#xA;[  0.222] recv (stream_id=2) via: 1.1 nghttpx&#xA;[  0.222] recv (stream_id=2) strict-transport-security: max-age=31536000&#xA;[  0.222] recv HEADERS frame &amp;lt;length=32, flags=0x04, stream_id=2&amp;gt;&#xA;      ; END_HEADERS&#xA;      (padlen=0)&#xA;      ; First push response header&#xA;[  0.228] recv DATA frame &amp;lt;length=8715, flags=0x01, stream_id=2&amp;gt;&#xA;      ; END_STREAM&#xA;[  0.228] send GOAWAY frame &amp;lt;length=8, flags=0x00, stream_id=0&amp;gt;&#xA;      (last_stream_id=2, error_code=NO_ERROR(0x00), opaque_data(0)=[])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The HTTP Upgrade is performed like so:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nghttp -nvu http://nghttp2.org&#xA;[  0.011] Connected&#xA;[  0.011] HTTP Upgrade request&#xA;GET / HTTP/1.1&#xA;Host: nghttp2.org&#xA;Connection: Upgrade, HTTP2-Settings&#xA;Upgrade: h2c&#xA;HTTP2-Settings: AAMAAABkAAQAAP__&#xA;Accept: */*&#xA;User-Agent: nghttp2/1.0.1-DEV&#xA;&#xA;&#xA;[  0.018] HTTP Upgrade response&#xA;HTTP/1.1 101 Switching Protocols&#xA;Connection: Upgrade&#xA;Upgrade: h2c&#xA;&#xA;&#xA;[  0.018] HTTP Upgrade success&#xA;[  0.018] recv SETTINGS frame &amp;lt;length=12, flags=0x00, stream_id=0&amp;gt;&#xA;      (niv=2)&#xA;      [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]&#xA;      [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]&#xA;[  0.018] send SETTINGS frame &amp;lt;length=12, flags=0x00, stream_id=0&amp;gt;&#xA;      (niv=2)&#xA;      [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]&#xA;      [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]&#xA;[  0.018] send SETTINGS frame &amp;lt;length=0, flags=0x01, stream_id=0&amp;gt;&#xA;      ; ACK&#xA;      (niv=0)&#xA;[  0.018] send PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=3&amp;gt;&#xA;      (dep_stream_id=0, weight=201, exclusive=0)&#xA;[  0.018] send PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=5&amp;gt;&#xA;      (dep_stream_id=0, weight=101, exclusive=0)&#xA;[  0.018] send PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=7&amp;gt;&#xA;      (dep_stream_id=0, weight=1, exclusive=0)&#xA;[  0.018] send PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=9&amp;gt;&#xA;      (dep_stream_id=7, weight=1, exclusive=0)&#xA;[  0.018] send PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=11&amp;gt;&#xA;      (dep_stream_id=3, weight=1, exclusive=0)&#xA;[  0.018] send PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=1&amp;gt;&#xA;      (dep_stream_id=11, weight=16, exclusive=0)&#xA;[  0.019] recv (stream_id=1) :method: GET&#xA;[  0.019] recv (stream_id=1) :scheme: http&#xA;[  0.019] recv (stream_id=1) :path: /stylesheets/screen.css&#xA;[  0.019] recv (stream_id=1) host: nghttp2.org&#xA;[  0.019] recv (stream_id=1) user-agent: nghttp2/1.0.1-DEV&#xA;[  0.019] recv PUSH_PROMISE frame &amp;lt;length=49, flags=0x04, stream_id=1&amp;gt;&#xA;      ; END_HEADERS&#xA;      (padlen=0, promised_stream_id=2)&#xA;[  0.019] recv (stream_id=1) :status: 200&#xA;[  0.019] recv (stream_id=1) date: Thu, 21 May 2015 16:39:16 GMT&#xA;[  0.019] recv (stream_id=1) content-type: text/html&#xA;[  0.019] recv (stream_id=1) content-length: 6646&#xA;[  0.019] recv (stream_id=1) last-modified: Fri, 15 May 2015 15:38:06 GMT&#xA;[  0.019] recv (stream_id=1) etag: &#34;555612de-19f6&#34;&#xA;[  0.019] recv (stream_id=1) link: &amp;lt;/stylesheets/screen.css&amp;gt;; rel=preload; as=stylesheet&#xA;[  0.019] recv (stream_id=1) accept-ranges: bytes&#xA;[  0.019] recv (stream_id=1) server: nghttpx nghttp2/1.0.1-DEV&#xA;[  0.019] recv (stream_id=1) via: 1.1 nghttpx&#xA;[  0.019] recv HEADERS frame &amp;lt;length=157, flags=0x04, stream_id=1&amp;gt;&#xA;      ; END_HEADERS&#xA;      (padlen=0)&#xA;      ; First response header&#xA;[  0.019] recv DATA frame &amp;lt;length=6646, flags=0x01, stream_id=1&amp;gt;&#xA;      ; END_STREAM&#xA;[  0.019] recv (stream_id=2) :status: 200&#xA;[  0.019] recv (stream_id=2) date: Thu, 21 May 2015 16:39:16 GMT&#xA;[  0.019] recv (stream_id=2) content-type: text/css&#xA;[  0.019] recv (stream_id=2) content-length: 38981&#xA;[  0.019] recv (stream_id=2) last-modified: Fri, 15 May 2015 15:38:06 GMT&#xA;[  0.019] recv (stream_id=2) etag: &#34;555612de-9845&#34;&#xA;[  0.019] recv (stream_id=2) accept-ranges: bytes&#xA;[  0.019] recv (stream_id=2) server: nghttpx nghttp2/1.0.1-DEV&#xA;[  0.019] recv (stream_id=2) via: 1.1 nghttpx&#xA;[  0.019] recv HEADERS frame &amp;lt;length=36, flags=0x04, stream_id=2&amp;gt;&#xA;      ; END_HEADERS&#xA;      (padlen=0)&#xA;      ; First push response header&#xA;[  0.026] recv DATA frame &amp;lt;length=16384, flags=0x00, stream_id=2&amp;gt;&#xA;[  0.027] recv DATA frame &amp;lt;length=7952, flags=0x00, stream_id=2&amp;gt;&#xA;[  0.027] send WINDOW_UPDATE frame &amp;lt;length=4, flags=0x00, stream_id=0&amp;gt;&#xA;      (window_size_increment=33343)&#xA;[  0.032] send WINDOW_UPDATE frame &amp;lt;length=4, flags=0x00, stream_id=2&amp;gt;&#xA;      (window_size_increment=33707)&#xA;[  0.032] recv DATA frame &amp;lt;length=14645, flags=0x01, stream_id=2&amp;gt;&#xA;      ; END_STREAM&#xA;[  0.032] recv SETTINGS frame &amp;lt;length=0, flags=0x01, stream_id=0&amp;gt;&#xA;      ; ACK&#xA;      (niv=0)&#xA;[  0.032] send GOAWAY frame &amp;lt;length=8, flags=0x00, stream_id=0&amp;gt;&#xA;      (last_stream_id=2, error_code=NO_ERROR(0x00), opaque_data(0)=[])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;-s&lt;/code&gt; option, &lt;code&gt;nghttp&lt;/code&gt; prints out some timing information for requests, sorted by completion time:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nghttp -nas https://nghttp2.org/&#xA;***** Statistics *****&#xA;&#xA;Request timing:&#xA;  responseEnd: the  time  when  last  byte of  response  was  received&#xA;               relative to connectEnd&#xA; requestStart: the time  just before  first byte  of request  was sent&#xA;               relative  to connectEnd.   If  &#39;*&#39; is  shown, this  was&#xA;               pushed by server.&#xA;      process: responseEnd - requestStart&#xA;         code: HTTP status code&#xA;         size: number  of  bytes  received as  response  body  without&#xA;               inflation.&#xA;          URI: request URI&#xA;&#xA;see http://www.w3.org/TR/resource-timing/#processing-model&#xA;&#xA;sorted by &#39;complete&#39;&#xA;&#xA;id  responseEnd requestStart  process code size request path&#xA; 13    +37.19ms       +280us  36.91ms  200   2K /&#xA;  2    +72.65ms *   +36.38ms  36.26ms  200   8K /stylesheets/screen.css&#xA; 17    +77.43ms     +38.67ms  38.75ms  200   3K /javascripts/octopress.js&#xA; 15    +78.12ms     +38.66ms  39.46ms  200   3K /javascripts/modernizr-2.0.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;-r&lt;/code&gt; option, &lt;code&gt;nghttp&lt;/code&gt; writes more detailed timing data to the given file in HAR format.&lt;/p&gt; &#xA;&lt;p&gt;nghttpd - server ++++++++++++++++&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nghttpd&lt;/code&gt; is a multi-threaded static web server.&lt;/p&gt; &#xA;&lt;p&gt;By default, it uses SSL/TLS connection. Use &lt;code&gt;--no-tls&lt;/code&gt; option to disable it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nghttpd&lt;/code&gt; only accepts HTTP/2 connections via NPN/ALPN or direct HTTP/2 connections. No HTTP Upgrade is supported.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;-p&lt;/code&gt; option allows users to configure server push.&lt;/p&gt; &#xA;&lt;p&gt;Just like &lt;code&gt;nghttp&lt;/code&gt;, it has a verbose output mode for framing information. Here is sample output from &lt;code&gt;nghttpd&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nghttpd --no-tls -v 8080&#xA;IPv4: listen 0.0.0.0:8080&#xA;IPv6: listen :::8080&#xA;[id=1] [  1.521] send SETTINGS frame &amp;lt;length=6, flags=0x00, stream_id=0&amp;gt;&#xA;          (niv=1)&#xA;          [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]&#xA;[id=1] [  1.521] recv SETTINGS frame &amp;lt;length=12, flags=0x00, stream_id=0&amp;gt;&#xA;          (niv=2)&#xA;          [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]&#xA;          [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]&#xA;[id=1] [  1.521] recv SETTINGS frame &amp;lt;length=0, flags=0x01, stream_id=0&amp;gt;&#xA;          ; ACK&#xA;          (niv=0)&#xA;[id=1] [  1.521] recv PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=3&amp;gt;&#xA;          (dep_stream_id=0, weight=201, exclusive=0)&#xA;[id=1] [  1.521] recv PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=5&amp;gt;&#xA;          (dep_stream_id=0, weight=101, exclusive=0)&#xA;[id=1] [  1.521] recv PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=7&amp;gt;&#xA;          (dep_stream_id=0, weight=1, exclusive=0)&#xA;[id=1] [  1.521] recv PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=9&amp;gt;&#xA;          (dep_stream_id=7, weight=1, exclusive=0)&#xA;[id=1] [  1.521] recv PRIORITY frame &amp;lt;length=5, flags=0x00, stream_id=11&amp;gt;&#xA;          (dep_stream_id=3, weight=1, exclusive=0)&#xA;[id=1] [  1.521] recv (stream_id=13) :method: GET&#xA;[id=1] [  1.521] recv (stream_id=13) :path: /&#xA;[id=1] [  1.521] recv (stream_id=13) :scheme: http&#xA;[id=1] [  1.521] recv (stream_id=13) :authority: localhost:8080&#xA;[id=1] [  1.521] recv (stream_id=13) accept: */*&#xA;[id=1] [  1.521] recv (stream_id=13) accept-encoding: gzip, deflate&#xA;[id=1] [  1.521] recv (stream_id=13) user-agent: nghttp2/1.0.0-DEV&#xA;[id=1] [  1.521] recv HEADERS frame &amp;lt;length=41, flags=0x25, stream_id=13&amp;gt;&#xA;          ; END_STREAM | END_HEADERS | PRIORITY&#xA;          (padlen=0, dep_stream_id=11, weight=16, exclusive=0)&#xA;          ; Open new stream&#xA;[id=1] [  1.521] send SETTINGS frame &amp;lt;length=0, flags=0x01, stream_id=0&amp;gt;&#xA;          ; ACK&#xA;          (niv=0)&#xA;[id=1] [  1.521] send HEADERS frame &amp;lt;length=86, flags=0x04, stream_id=13&amp;gt;&#xA;          ; END_HEADERS&#xA;          (padlen=0)&#xA;          ; First response header&#xA;          :status: 200&#xA;          server: nghttpd nghttp2/1.0.0-DEV&#xA;          content-length: 10&#xA;          cache-control: max-age=3600&#xA;          date: Fri, 15 May 2015 14:49:04 GMT&#xA;          last-modified: Tue, 30 Sep 2014 12:40:52 GMT&#xA;[id=1] [  1.522] send DATA frame &amp;lt;length=10, flags=0x01, stream_id=13&amp;gt;&#xA;          ; END_STREAM&#xA;[id=1] [  1.522] stream_id=13 closed&#xA;[id=1] [  1.522] recv GOAWAY frame &amp;lt;length=8, flags=0x00, stream_id=0&amp;gt;&#xA;          (last_stream_id=0, error_code=NO_ERROR(0x00), opaque_data(0)=[])&#xA;[id=1] [  1.522] closed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;nghttpx - proxy +++++++++++++++&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nghttpx&lt;/code&gt; is a multi-threaded reverse proxy for HTTP/3, HTTP/2, and HTTP/1.1, and powers &lt;a href=&#34;http://nghttp2.org&#34;&gt;http://nghttp2.org&lt;/a&gt; and supports HTTP/2 server push.&lt;/p&gt; &#xA;&lt;p&gt;We reworked &lt;code&gt;nghttpx&lt;/code&gt; command-line interface, and as a result, there are several incompatibles from 1.8.0 or earlier. This is necessary to extend its capability, and secure the further feature enhancements in the future release. Please read &lt;code&gt;Migration from nghttpx v1.8.0 or earlier &amp;lt;https://nghttp2.org/documentation/nghttpx-howto.html#migration-from-nghttpx-v1-8-0-or-earlier&amp;gt;&lt;/code&gt;_ to know how to migrate from earlier releases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nghttpx&lt;/code&gt; implements &lt;code&gt;important performance-oriented features &amp;lt;https://istlsfastyet.com/#server-performance&amp;gt;&lt;/code&gt;_ in TLS, such as session IDs, session tickets (with automatic key rotation), OCSP stapling, dynamic record sizing, ALPN/NPN, forward secrecy and HTTP/2. &lt;code&gt;nghttpx&lt;/code&gt; also offers the functionality to share session cache and ticket keys among multiple &lt;code&gt;nghttpx&lt;/code&gt; instances via memcached.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nghttpx&lt;/code&gt; has 2 operation modes:&lt;/p&gt; &#xA;&lt;p&gt;================== ======================== ================ ============= Mode option Frontend Backend Note ================== ======================== ================ ============= default mode HTTP/3, HTTP/2, HTTP/1.1 HTTP/1.1, HTTP/2 Reverse proxy &lt;code&gt;--http2-proxy&lt;/code&gt; HTTP/3, HTTP/2, HTTP/1.1 HTTP/1.1, HTTP/2 Forward proxy ================== ======================== ================ =============&lt;/p&gt; &#xA;&lt;p&gt;The interesting mode at the moment is the default mode. It works like a reverse proxy and listens for HTTP/3, HTTP/2, and HTTP/1.1 and can be deployed as a SSL/TLS terminator for existing web server.&lt;/p&gt; &#xA;&lt;p&gt;In all modes, the frontend connections are encrypted by SSL/TLS by default. To disable encryption, use the &lt;code&gt;no-tls&lt;/code&gt; keyword in &lt;code&gt;--frontend&lt;/code&gt; option. If encryption is disabled, incoming HTTP/1.1 connections can be upgraded to HTTP/2 through HTTP Upgrade. On the other hard, backend connections are not encrypted by default. To encrypt backend connections, use &lt;code&gt;tls&lt;/code&gt; keyword in &lt;code&gt;--backend&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nghttpx&lt;/code&gt; supports a configuration file. See the &lt;code&gt;--conf&lt;/code&gt; option and sample configuration file &lt;code&gt;nghttpx.conf.sample&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the default mode, &lt;code&gt;nghttpx&lt;/code&gt; works as reverse proxy to the backend server:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Client &amp;lt;-- (HTTP/3, HTTP/2, HTTP/1.1) --&amp;gt; nghttpx &amp;lt;-- (HTTP/1.1, HTTP/2) --&amp;gt; Web Server&#xA;                                        [reverse proxy]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the &lt;code&gt;--http2-proxy&lt;/code&gt; option, it works as forward proxy, and it is so called secure HTTP/2 proxy:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Client &amp;lt;-- (HTTP/3, HTTP/2, HTTP/1.1) --&amp;gt; nghttpx &amp;lt;-- (HTTP/1.1) --&amp;gt; Proxy&#xA;                                         [secure proxy]          (e.g., Squid, ATS)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Client&lt;/code&gt; in the above example needs to be configured to use &lt;code&gt;nghttpx&lt;/code&gt; as secure proxy.&lt;/p&gt; &#xA;&lt;p&gt;At the time of this writing, both Chrome and Firefox support secure HTTP/2 proxy. One way to configure Chrome to use a secure proxy is to create a proxy.pac script like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: javascript&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;function FindProxyForURL(url, host) {&#xA;    return &#34;HTTPS SERVERADDR:PORT&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;SERVERADDR&lt;/code&gt; and &lt;code&gt;PORT&lt;/code&gt; is the hostname/address and port of the machine nghttpx is running on. Please note that Chrome requires a valid certificate for secure proxy.&lt;/p&gt; &#xA;&lt;p&gt;Then run Chrome with the following arguments:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ google-chrome --proxy-pac-url=file:///path/to/proxy.pac --use-npn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The backend HTTP/2 connections can be tunneled through an HTTP proxy. The proxy is specified using &lt;code&gt;--backend-http-proxy-uri&lt;/code&gt;. The following figure illustrates how nghttpx talks to the outside HTTP/2 proxy through an HTTP proxy:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Client &amp;lt;-- (HTTP/3, HTTP/2, HTTP/1.1) --&amp;gt; nghttpx &amp;lt;-- (HTTP/2) --&#xA;&#xA;        --===================---&amp;gt; HTTP/2 Proxy&#xA;          (HTTP proxy tunnel)     (e.g., nghttpx -s)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmarking tool&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;h2load&lt;/code&gt; program is a benchmarking tool for HTTP/3, HTTP/2, and HTTP/1.1. The UI of &lt;code&gt;h2load&lt;/code&gt; is heavily inspired by &lt;code&gt;weighttp&lt;/code&gt; (&lt;a href=&#34;https://github.com/lighttpd/weighttp&#34;&gt;https://github.com/lighttpd/weighttp&lt;/a&gt;). The typical usage is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ h2load -n100000 -c100 -m100 https://localhost:8443/&#xA;starting benchmark...&#xA;spawning thread #0: 100 concurrent clients, 100000 total requests&#xA;Protocol: TLSv1.2&#xA;Cipher: ECDHE-RSA-AES128-GCM-SHA256&#xA;Server Temp Key: ECDH P-256 256 bits&#xA;progress: 10% done&#xA;progress: 20% done&#xA;progress: 30% done&#xA;progress: 40% done&#xA;progress: 50% done&#xA;progress: 60% done&#xA;progress: 70% done&#xA;progress: 80% done&#xA;progress: 90% done&#xA;progress: 100% done&#xA;&#xA;finished in 771.26ms, 129658 req/s, 4.71MB/s&#xA;requests: 100000 total, 100000 started, 100000 done, 100000 succeeded, 0 failed, 0 errored&#xA;status codes: 100000 2xx, 0 3xx, 0 4xx, 0 5xx&#xA;traffic: 3812300 bytes total, 1009900 bytes headers, 1000000 bytes data&#xA;                     min         max         mean         sd        +/- sd&#xA;time for request:    25.12ms    124.55ms     51.07ms     15.36ms    84.87%&#xA;time for connect:   208.94ms    254.67ms    241.38ms      7.95ms    63.00%&#xA;time to 1st byte:   209.11ms    254.80ms    241.51ms      7.94ms    63.00%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above example issued total 100,000 requests, using 100 concurrent clients (in other words, 100 HTTP/2 sessions), and a maximum of 100 streams per client. With the &lt;code&gt;-t&lt;/code&gt; option, &lt;code&gt;h2load&lt;/code&gt; will use multiple native threads to avoid saturating a single core on client side.&lt;/p&gt; &#xA;&lt;p&gt;.. warning::&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t use this tool against publicly available servers.&lt;/strong&gt; That is considered a DOS attack. Please only use it against your private servers.&lt;/p&gt; &#xA;&lt;p&gt;If the experimental HTTP/3 is enabled, h2load can send requests to HTTP/3 server. To do this, specify &lt;code&gt;h3&lt;/code&gt; to &lt;code&gt;--npn-list&lt;/code&gt; option like so:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ h2load --npn-list h3 https://127.0.0.1:4433&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HPACK tools&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;src&lt;/code&gt; directory contains the HPACK tools. The &lt;code&gt;deflatehd&lt;/code&gt; program is a command-line header compression tool. The &lt;code&gt;inflatehd&lt;/code&gt; program is a command-line header decompression tool. Both tools read input from stdin and write output to stdout. Errors are written to stderr. They take JSON as input and output. We (mostly) use the same JSON data format described at &lt;a href=&#34;https://github.com/http2jp/hpack-test-case&#34;&gt;https://github.com/http2jp/hpack-test-case&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;deflatehd - header compressor +++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;deflatehd&lt;/code&gt; program reads JSON data or HTTP/1-style header fields from stdin and outputs compressed header block in JSON.&lt;/p&gt; &#xA;&lt;p&gt;For the JSON input, the root JSON object must include a &lt;code&gt;cases&lt;/code&gt; key. Its value has to include the sequence of input header set. They share the same compression context and are processed in the order they appear. Each item in the sequence is a JSON object and it must include a &lt;code&gt;headers&lt;/code&gt; key. Its value is an array of JSON objects, which includes exactly one name/value pair.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: json&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;cases&#34;:&#xA;  [&#xA;    {&#xA;      &#34;headers&#34;: [&#xA;        { &#34;:method&#34;: &#34;GET&#34; },&#xA;        { &#34;:path&#34;: &#34;/&#34; }&#xA;      ]&#xA;    },&#xA;    {&#xA;      &#34;headers&#34;: [&#xA;        { &#34;:method&#34;: &#34;POST&#34; },&#xA;        { &#34;:path&#34;: &#34;/&#34; }&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the &lt;code&gt;-t&lt;/code&gt; option, the program can accept more familiar HTTP/1 style header field blocks. Each header set is delimited by an empty line:&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:method: GET&#xA;:scheme: https&#xA;:path: /&#xA;&#xA;:method: POST&#xA;user-agent: nghttp2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output is in JSON object. It should include a &lt;code&gt;cases&lt;/code&gt; key and its value is an array of JSON objects, which has at least the following keys:&lt;/p&gt; &#xA;&lt;p&gt;seq The index of header set in the input.&lt;/p&gt; &#xA;&lt;p&gt;input_length The sum of the length of the name/value pairs in the input.&lt;/p&gt; &#xA;&lt;p&gt;output_length The length of the compressed header block.&lt;/p&gt; &#xA;&lt;p&gt;percentage_of_original_size &lt;code&gt;output_length&lt;/code&gt; / &lt;code&gt;input_length&lt;/code&gt; * 100&lt;/p&gt; &#xA;&lt;p&gt;wire The compressed header block as a hex string.&lt;/p&gt; &#xA;&lt;p&gt;headers The input header set.&lt;/p&gt; &#xA;&lt;p&gt;header_table_size The header table size adjusted before deflating the header set.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: json&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;cases&#34;:&#xA;  [&#xA;    {&#xA;      &#34;seq&#34;: 0,&#xA;      &#34;input_length&#34;: 66,&#xA;      &#34;output_length&#34;: 20,&#xA;      &#34;percentage_of_original_size&#34;: 30.303030303030305,&#xA;      &#34;wire&#34;: &#34;01881f3468e5891afcbf83868a3d856659c62e3f&#34;,&#xA;      &#34;headers&#34;: [&#xA;        {&#xA;          &#34;:authority&#34;: &#34;example.org&#34;&#xA;        },&#xA;        {&#xA;          &#34;:method&#34;: &#34;GET&#34;&#xA;        },&#xA;        {&#xA;          &#34;:path&#34;: &#34;/&#34;&#xA;        },&#xA;        {&#xA;          &#34;:scheme&#34;: &#34;https&#34;&#xA;        },&#xA;        {&#xA;          &#34;user-agent&#34;: &#34;nghttp2&#34;&#xA;        }&#xA;      ],&#xA;      &#34;header_table_size&#34;: 4096&#xA;    }&#xA;    ,&#xA;    {&#xA;      &#34;seq&#34;: 1,&#xA;      &#34;input_length&#34;: 74,&#xA;      &#34;output_length&#34;: 10,&#xA;      &#34;percentage_of_original_size&#34;: 13.513513513513514,&#xA;      &#34;wire&#34;: &#34;88448504252dd5918485&#34;,&#xA;      &#34;headers&#34;: [&#xA;        {&#xA;          &#34;:authority&#34;: &#34;example.org&#34;&#xA;        },&#xA;        {&#xA;          &#34;:method&#34;: &#34;POST&#34;&#xA;        },&#xA;        {&#xA;          &#34;:path&#34;: &#34;/account&#34;&#xA;        },&#xA;        {&#xA;          &#34;:scheme&#34;: &#34;https&#34;&#xA;        },&#xA;        {&#xA;          &#34;user-agent&#34;: &#34;nghttp2&#34;&#xA;        }&#xA;      ],&#xA;      &#34;header_table_size&#34;: 4096&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output can be used as the input for &lt;code&gt;inflatehd&lt;/code&gt; and &lt;code&gt;deflatehd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With the &lt;code&gt;-d&lt;/code&gt; option, the extra &lt;code&gt;header_table&lt;/code&gt; key is added and its associated value includes the state of dynamic header table after the corresponding header set was processed. The value includes at least the following keys:&lt;/p&gt; &#xA;&lt;p&gt;entries The entry in the header table. If &lt;code&gt;referenced&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, it is in the reference set. The &lt;code&gt;size&lt;/code&gt; includes the overhead (32 bytes). The &lt;code&gt;index&lt;/code&gt; corresponds to the index of header table. The &lt;code&gt;name&lt;/code&gt; is the header field name and the &lt;code&gt;value&lt;/code&gt; is the header field value.&lt;/p&gt; &#xA;&lt;p&gt;size The sum of the spaces entries occupied, this includes the entry overhead.&lt;/p&gt; &#xA;&lt;p&gt;max_size The maximum header table size.&lt;/p&gt; &#xA;&lt;p&gt;deflate_size The sum of the spaces entries occupied within &lt;code&gt;max_deflate_size&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;max_deflate_size The maximum header table size the encoder uses. This can be smaller than &lt;code&gt;max_size&lt;/code&gt;. In this case, the encoder only uses up to first &lt;code&gt;max_deflate_size&lt;/code&gt; buffer. Since the header table size is still &lt;code&gt;max_size&lt;/code&gt;, the encoder has to keep track of entries outside the &lt;code&gt;max_deflate_size&lt;/code&gt; but inside the &lt;code&gt;max_size&lt;/code&gt; and make sure that they are no longer referenced.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: json&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;cases&#34;:&#xA;  [&#xA;    {&#xA;      &#34;seq&#34;: 0,&#xA;      &#34;input_length&#34;: 66,&#xA;      &#34;output_length&#34;: 20,&#xA;      &#34;percentage_of_original_size&#34;: 30.303030303030305,&#xA;      &#34;wire&#34;: &#34;01881f3468e5891afcbf83868a3d856659c62e3f&#34;,&#xA;      &#34;headers&#34;: [&#xA;        {&#xA;          &#34;:authority&#34;: &#34;example.org&#34;&#xA;        },&#xA;        {&#xA;          &#34;:method&#34;: &#34;GET&#34;&#xA;        },&#xA;        {&#xA;          &#34;:path&#34;: &#34;/&#34;&#xA;        },&#xA;        {&#xA;          &#34;:scheme&#34;: &#34;https&#34;&#xA;        },&#xA;        {&#xA;          &#34;user-agent&#34;: &#34;nghttp2&#34;&#xA;        }&#xA;      ],&#xA;      &#34;header_table_size&#34;: 4096,&#xA;      &#34;header_table&#34;: {&#xA;        &#34;entries&#34;: [&#xA;          {&#xA;            &#34;index&#34;: 1,&#xA;            &#34;name&#34;: &#34;user-agent&#34;,&#xA;            &#34;value&#34;: &#34;nghttp2&#34;,&#xA;            &#34;referenced&#34;: true,&#xA;            &#34;size&#34;: 49&#xA;          },&#xA;          {&#xA;            &#34;index&#34;: 2,&#xA;            &#34;name&#34;: &#34;:scheme&#34;,&#xA;            &#34;value&#34;: &#34;https&#34;,&#xA;            &#34;referenced&#34;: true,&#xA;            &#34;size&#34;: 44&#xA;          },&#xA;          {&#xA;            &#34;index&#34;: 3,&#xA;            &#34;name&#34;: &#34;:path&#34;,&#xA;            &#34;value&#34;: &#34;/&#34;,&#xA;            &#34;referenced&#34;: true,&#xA;            &#34;size&#34;: 38&#xA;          },&#xA;          {&#xA;            &#34;index&#34;: 4,&#xA;            &#34;name&#34;: &#34;:method&#34;,&#xA;            &#34;value&#34;: &#34;GET&#34;,&#xA;            &#34;referenced&#34;: true,&#xA;            &#34;size&#34;: 42&#xA;          },&#xA;          {&#xA;            &#34;index&#34;: 5,&#xA;            &#34;name&#34;: &#34;:authority&#34;,&#xA;            &#34;value&#34;: &#34;example.org&#34;,&#xA;            &#34;referenced&#34;: true,&#xA;            &#34;size&#34;: 53&#xA;          }&#xA;        ],&#xA;        &#34;size&#34;: 226,&#xA;        &#34;max_size&#34;: 4096,&#xA;        &#34;deflate_size&#34;: 226,&#xA;        &#34;max_deflate_size&#34;: 4096&#xA;      }&#xA;    }&#xA;    ,&#xA;    {&#xA;      &#34;seq&#34;: 1,&#xA;      &#34;input_length&#34;: 74,&#xA;      &#34;output_length&#34;: 10,&#xA;      &#34;percentage_of_original_size&#34;: 13.513513513513514,&#xA;      &#34;wire&#34;: &#34;88448504252dd5918485&#34;,&#xA;      &#34;headers&#34;: [&#xA;        {&#xA;          &#34;:authority&#34;: &#34;example.org&#34;&#xA;        },&#xA;        {&#xA;          &#34;:method&#34;: &#34;POST&#34;&#xA;        },&#xA;        {&#xA;          &#34;:path&#34;: &#34;/account&#34;&#xA;        },&#xA;        {&#xA;          &#34;:scheme&#34;: &#34;https&#34;&#xA;        },&#xA;        {&#xA;          &#34;user-agent&#34;: &#34;nghttp2&#34;&#xA;        }&#xA;      ],&#xA;      &#34;header_table_size&#34;: 4096,&#xA;      &#34;header_table&#34;: {&#xA;        &#34;entries&#34;: [&#xA;          {&#xA;            &#34;index&#34;: 1,&#xA;            &#34;name&#34;: &#34;:method&#34;,&#xA;            &#34;value&#34;: &#34;POST&#34;,&#xA;            &#34;referenced&#34;: true,&#xA;            &#34;size&#34;: 43&#xA;          },&#xA;          {&#xA;            &#34;index&#34;: 2,&#xA;            &#34;name&#34;: &#34;user-agent&#34;,&#xA;            &#34;value&#34;: &#34;nghttp2&#34;,&#xA;            &#34;referenced&#34;: true,&#xA;            &#34;size&#34;: 49&#xA;          },&#xA;          {&#xA;            &#34;index&#34;: 3,&#xA;            &#34;name&#34;: &#34;:scheme&#34;,&#xA;            &#34;value&#34;: &#34;https&#34;,&#xA;            &#34;referenced&#34;: true,&#xA;            &#34;size&#34;: 44&#xA;          },&#xA;          {&#xA;            &#34;index&#34;: 4,&#xA;            &#34;name&#34;: &#34;:path&#34;,&#xA;            &#34;value&#34;: &#34;/&#34;,&#xA;            &#34;referenced&#34;: false,&#xA;            &#34;size&#34;: 38&#xA;          },&#xA;          {&#xA;            &#34;index&#34;: 5,&#xA;            &#34;name&#34;: &#34;:method&#34;,&#xA;            &#34;value&#34;: &#34;GET&#34;,&#xA;            &#34;referenced&#34;: false,&#xA;            &#34;size&#34;: 42&#xA;          },&#xA;          {&#xA;            &#34;index&#34;: 6,&#xA;            &#34;name&#34;: &#34;:authority&#34;,&#xA;            &#34;value&#34;: &#34;example.org&#34;,&#xA;            &#34;referenced&#34;: true,&#xA;            &#34;size&#34;: 53&#xA;          }&#xA;        ],&#xA;        &#34;size&#34;: 269,&#xA;        &#34;max_size&#34;: 4096,&#xA;        &#34;deflate_size&#34;: 269,&#xA;        &#34;max_deflate_size&#34;: 4096&#xA;      }&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;inflatehd - header decompressor +++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;inflatehd&lt;/code&gt; program reads JSON data from stdin and outputs decompressed name/value pairs in JSON.&lt;/p&gt; &#xA;&lt;p&gt;The root JSON object must include the &lt;code&gt;cases&lt;/code&gt; key. Its value has to include the sequence of compressed header blocks. They share the same compression context and are processed in the order they appear. Each item in the sequence is a JSON object and it must have at least a &lt;code&gt;wire&lt;/code&gt; key. Its value is a compressed header block as a hex string.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: json&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;cases&#34;:&#xA;  [&#xA;    { &#34;wire&#34;: &#34;8285&#34; },&#xA;    { &#34;wire&#34;: &#34;8583&#34; }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output is a JSON object. It should include a &lt;code&gt;cases&lt;/code&gt; key and its value is an array of JSON objects, which has at least following keys:&lt;/p&gt; &#xA;&lt;p&gt;seq The index of the header set in the input.&lt;/p&gt; &#xA;&lt;p&gt;headers A JSON array that includes decompressed name/value pairs.&lt;/p&gt; &#xA;&lt;p&gt;wire The compressed header block as a hex string.&lt;/p&gt; &#xA;&lt;p&gt;header_table_size The header table size adjusted before inflating compressed header block.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: json&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;cases&#34;:&#xA;  [&#xA;    {&#xA;      &#34;seq&#34;: 0,&#xA;      &#34;wire&#34;: &#34;01881f3468e5891afcbf83868a3d856659c62e3f&#34;,&#xA;      &#34;headers&#34;: [&#xA;        {&#xA;          &#34;:authority&#34;: &#34;example.org&#34;&#xA;        },&#xA;        {&#xA;          &#34;:method&#34;: &#34;GET&#34;&#xA;        },&#xA;        {&#xA;          &#34;:path&#34;: &#34;/&#34;&#xA;        },&#xA;        {&#xA;          &#34;:scheme&#34;: &#34;https&#34;&#xA;        },&#xA;        {&#xA;          &#34;user-agent&#34;: &#34;nghttp2&#34;&#xA;        }&#xA;      ],&#xA;      &#34;header_table_size&#34;: 4096&#xA;    }&#xA;    ,&#xA;    {&#xA;      &#34;seq&#34;: 1,&#xA;      &#34;wire&#34;: &#34;88448504252dd5918485&#34;,&#xA;      &#34;headers&#34;: [&#xA;        {&#xA;          &#34;:method&#34;: &#34;POST&#34;&#xA;        },&#xA;        {&#xA;          &#34;:path&#34;: &#34;/account&#34;&#xA;        },&#xA;        {&#xA;          &#34;user-agent&#34;: &#34;nghttp2&#34;&#xA;        },&#xA;        {&#xA;          &#34;:scheme&#34;: &#34;https&#34;&#xA;        },&#xA;        {&#xA;          &#34;:authority&#34;: &#34;example.org&#34;&#xA;        }&#xA;      ],&#xA;      &#34;header_table_size&#34;: 4096&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output can be used as the input for &lt;code&gt;deflatehd&lt;/code&gt; and &lt;code&gt;inflatehd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With the &lt;code&gt;-d&lt;/code&gt; option, the extra &lt;code&gt;header_table&lt;/code&gt; key is added and its associated value includes the state of the dynamic header table after the corresponding header set was processed. The format is the same as &lt;code&gt;deflatehd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;[This text was composed based on 1.2. License section of curl/libcurl project.]&lt;/p&gt; &#xA;&lt;p&gt;When contributing with code, you agree to put your changes and new code under the same license nghttp2 is already using unless stated and agreed otherwise.&lt;/p&gt; &#xA;&lt;p&gt;When changing existing source code, do not alter the copyright of the original file(s). The copyright will still be owned by the original creator(s) or those who have been assigned copyright by the original author(s).&lt;/p&gt; &#xA;&lt;p&gt;By submitting a patch to the nghttp2 project, you (or your employer, as the case may be) agree to assign the copyright of your submission to us. .. the above really needs to be reworded to pass legal muster. We will credit you for your changes as far as possible, to give credit but also to keep a trace back to who made what changes. Please always provide us with your full real name when contributing!&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;Contribution Guidelines &amp;lt;https://nghttp2.org/documentation/contribute.html&amp;gt;&lt;/code&gt;_ for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting vulnerability&lt;/h2&gt; &#xA;&lt;p&gt;If you find a vulnerability in our software, please send the email to &#34;tatsuhiro.t at gmail dot com&#34; about its details instead of submitting issues on github issue page. It is a standard practice not to disclose vulnerability information publicly until a fixed version is released, or mitigation is worked out.&lt;/p&gt; &#xA;&lt;p&gt;In the future, we may setup a dedicated mail address for this purpose.&lt;/p&gt; &#xA;&lt;h2&gt;Release schedule&lt;/h2&gt; &#xA;&lt;p&gt;In general, we follow &lt;code&gt;Semantic Versioning &amp;lt;http://semver.org/&amp;gt;&lt;/code&gt;_. We release MINOR version update every month, and usually we ship it around 25th day of every month.&lt;/p&gt; &#xA;&lt;p&gt;We may release PATCH releases between the regular releases, mainly for severe security bug fixes.&lt;/p&gt; &#xA;&lt;p&gt;We have no plan to break API compatibility changes involving soname bump, so MAJOR version will stay 1 for the foreseeable future.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License&lt;/p&gt;</summary>
  </entry>
</feed>