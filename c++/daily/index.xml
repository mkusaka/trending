<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-02T01:31:08Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DFHack/dfhack</title>
    <updated>2023-01-02T01:31:08Z</updated>
    <id>tag:github.com,2023-01-02:/DFHack/dfhack</id>
    <link href="https://github.com/DFHack/dfhack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Memory hacking library for Dwarf Fortress and a set of tools that use it&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DFHack Readme&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DFHack/dfhack/actions?query=workflow%3ABuild&#34;&gt;&lt;img src=&#34;https://github.com/DFHack/dfhack/workflows/Build/badge.svg?event=push&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dfhack.readthedocs.org&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/dfhack/badge&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Zlib_License&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-ZLib-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dfhack.org/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/793331351645323264&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DFHack is a Dwarf Fortress memory access library, distributed with scripts and plugins implementing a wide variety of useful functions and tools.&lt;/p&gt; &#xA;&lt;p&gt;The full documentation &lt;a href=&#34;https://dfhack.readthedocs.org&#34;&gt;is available online here&lt;/a&gt;. It is also accessible via the README.html page in the DFHack distribution or as raw text in the &lt;code&gt;./docs&lt;/code&gt; folder. If you&#39;re an end-user, modder, or interested in contributing to DFHack - go read those docs.&lt;/p&gt; &#xA;&lt;p&gt;If the docs are unclear or you need more help, please check out our &lt;a href=&#34;https://docs.dfhack.org/en/latest/docs/Support.html&#34;&gt;support page&lt;/a&gt; for ways to contact the DFHack developers.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>visualboyadvance-m/visualboyadvance-m</title>
    <updated>2023-01-02T01:31:08Z</updated>
    <id>tag:github.com,2023-01-02:/visualboyadvance-m/visualboyadvance-m</id>
    <link href="https://github.com/visualboyadvance-m/visualboyadvance-m" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The continuing development of the legendary VBA gameboy advance emulator.&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/#visual-boy-advance---m&#34;&gt;Visual Boy Advance - M&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/#building-a-libretro-core&#34;&gt;Building a Libretro core&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/#visual-studio-support&#34;&gt;Visual Studio Support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/#visual-studio-code-support&#34;&gt;Visual Studio Code Support&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/#optional-clangd&#34;&gt;Optional: clangd&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/#cross-compiling-for-32-bit-on-a-64-bit-host&#34;&gt;Cross compiling for 32 bit on a 64 bit host&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/#cross-compiling-for-win32&#34;&gt;Cross Compiling for Win32&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/#cmake-options&#34;&gt;CMake Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/#msys2-notes&#34;&gt;MSys2 Notes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/#debug-messages&#34;&gt;Debug Messages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/#reporting-crash-bugs&#34;&gt;Reporting Crash Bugs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/visualboyadvance-m/Lobby&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/visualboyadvance-m/Lobby.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/visualboyadvance-m/Lobby&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our bridged Discord server is &lt;a href=&#34;https://discord.gg/EpfxEuGMKH&#34;&gt;Here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We are also on &lt;em&gt;&lt;code&gt;#vba-m&lt;/code&gt;&lt;/em&gt; on &lt;a href=&#34;https://libera.chat/&#34;&gt;Libera IRC&lt;/a&gt; which has a &lt;a href=&#34;https://web.libera.chat/&#34;&gt;Web Chat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://snapcraft.io/visualboyadvance-m&#34;&gt;&lt;img src=&#34;https://snapcraft.io/static/images/badges/en/snap-store-black.svg?sanitize=true&#34; alt=&#34;Get it from the Snap Store&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Visual Boy Advance - M&lt;/h1&gt; &#xA;&lt;p&gt;Game Boy and Game Boy Advance Emulator&lt;/p&gt; &#xA;&lt;p&gt;The forums are &lt;a href=&#34;https://board.vba-m.com/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Windows and Mac builds are in the &lt;a href=&#34;https://github.com/visualboyadvance-m/visualboyadvance-m/releases&#34;&gt;releases tab&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Nightly builds for Windows and macOS are at &lt;a href=&#34;https://nightly.vba-m.com/&#34;&gt;https://nightly.vba-m.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PLESE TEST THE NIGHTLY OR MASTER WITH A FACTORY RESET BEFORE REPORTING ISSUES&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Your distribution may have packages available as well, search for &lt;code&gt;visualboyadvance-m&lt;/code&gt; or &lt;code&gt;vbam&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is also generally very easy to build from source, see below.&lt;/p&gt; &#xA;&lt;p&gt;If you are using the windows binary release and you need localization, unzip the &lt;code&gt;translations.zip&lt;/code&gt; to the same directory as the executable.&lt;/p&gt; &#xA;&lt;p&gt;If you are having issues, try resetting the config file first, go to &lt;code&gt;Help -&amp;gt; Factory Reset&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;The basic formula to build vba-m is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~ &amp;amp;&amp;amp; mkdir src &amp;amp;&amp;amp; cd src&#xA;git clone https://github.com/visualboyadvance-m/visualboyadvance-m.git&#xA;cd visualboyadvance-m&#xA;./installdeps&#xA;&#xA;# ./installdeps will give you build instructions, which will be similar to:&#xA;&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake .. -G Ninja&#xA;ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;./installdeps&lt;/code&gt; is supported on MSys2, Linux (Debian/Ubuntu, Fedora, Arch, Solus, OpenSUSE, Gentoo and RHEL/CentOS) and Mac OS X (homebrew, macports or fink.)&lt;/p&gt; &#xA;&lt;h2&gt;Building a Libretro core&lt;/h2&gt; &#xA;&lt;p&gt;Clone this repo and then,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd src/libretro&#xA;make -j`nproc`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy vbam_libretro.so to your RetroArch cores directory.&lt;/p&gt; &#xA;&lt;h2&gt;Visual Studio Support&lt;/h2&gt; &#xA;&lt;p&gt;For visual studio, dependency management is handled automatically with vcpkg, From the Visual Studio GUI, just clone the repository with git and build with the cmake configurations provided.&lt;/p&gt; &#xA;&lt;p&gt;If the GUI does not detect cmake, go to &lt;code&gt;File -&amp;gt; Open -&amp;gt; CMake&lt;/code&gt; and open the &lt;code&gt;CMakeLists.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are using 2017, make sure you have all the latest updates, some issues with cmake projects in the GUI have been fixed.&lt;/p&gt; &#xA;&lt;p&gt;You can also build from the developer command prompt or powershell with the environment loaded.&lt;/p&gt; &#xA;&lt;p&gt;Using your own user-wide installation of vcpkg is supported, just make sure the environment variable &lt;code&gt;VCPKG_ROOT&lt;/code&gt; is set.&lt;/p&gt; &#xA;&lt;p&gt;To build in the visual studio command prompt, use something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake .. -DVCPKG_TARGET_TRIPLET=x64-windows-static -DCMAKE_BUILD_TYPE=Debug -G Ninja&#xA;ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Visual Studio Code Support&lt;/h2&gt; &#xA;&lt;p&gt;On most platforms, Visual Studio Code should work as-is, as long as the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools&#34;&gt;CMake Tools extension&lt;/a&gt; is installed.&lt;/p&gt; &#xA;&lt;p&gt;There is a recommended configuration in the &lt;code&gt;vscode/settings.json&lt;/code&gt; file. To use it, copy the file to a &lt;code&gt;.vscode/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;By default, this will publish builds in the &lt;code&gt;build-vscode/&lt;/code&gt; directory. In the &lt;code&gt;vscode/settings.json&lt;/code&gt; file, there is an alternate configuration for the &lt;code&gt;&#34;cmake.buildDirectory&#34;&lt;/code&gt; option that will use different build directories for different toolchains and build configurations.&lt;/p&gt; &#xA;&lt;h3&gt;Optional: clangd&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd&#34;&gt;clangd extension&lt;/a&gt; uses clangd to provide powerful code completion, errors and warnings and references on click in VS Code.&lt;/p&gt; &#xA;&lt;p&gt;With the recommended configuration, the build configuration will generate a &lt;code&gt;compile_commands.json&lt;/code&gt; file that can be used with clangd. After configuration, you can copy that file to the root directory with a command similar to this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp build/build-vscode/compile_commands.json .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, select &#34;clangd: Restart language server&#34; from the command palette to get completion in the IDE.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;If your OS is not supported, you will need the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C++ compiler and binutils&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)&#34;&gt;make&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nasm.us/&#34;&gt;nasm&lt;/a&gt; (optional, for 32 bit builds)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And the following development libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zlib.net/&#34;&gt;zlib&lt;/a&gt; (required)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mesa3d.org/&#34;&gt;mesa&lt;/a&gt; (if using X11 or any OpenGL otherwise)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/&#34;&gt;ffmpeg&lt;/a&gt; (optional, at least version &lt;code&gt;4.0.4&lt;/code&gt;, for game recording)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/gettext/&#34;&gt;gettext&lt;/a&gt; and gettext-tools (optional, with ENABLE_NLS)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.libsdl.org/&#34;&gt;SDL2&lt;/a&gt; (required)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sfml-dev.org/&#34;&gt;SFML&lt;/a&gt; (optional, for link)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openal.org/&#34;&gt;OpenAL&lt;/a&gt; or &lt;a href=&#34;https://kcat.strangesoft.net/openal.html&#34;&gt;openal-soft&lt;/a&gt; (optional, a sound interface)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wxwidgets.org/&#34;&gt;wxWidgets&lt;/a&gt; (required for GUI, 2.8 and non-stl builds are no longer supported)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Linux and similar, you also need the version of GTK your wxWidgets is linked to (usually 2 or 3) and the xorg development libraries.&lt;/p&gt; &#xA;&lt;p&gt;Support for more OSes/distributions for &lt;code&gt;./installdeps&lt;/code&gt; is planned.&lt;/p&gt; &#xA;&lt;h2&gt;Cross compiling for 32 bit on a 64 bit host&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;./installdeps m32&lt;/code&gt; will set things up to build a 32 bit binary.&lt;/p&gt; &#xA;&lt;p&gt;This is supported on Fedora, Arch, Solus and MSYS2.&lt;/p&gt; &#xA;&lt;h2&gt;Cross Compiling for Win32&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;./installdeps&lt;/code&gt; takes one optional parameter for cross-compiling target, which may be &lt;code&gt;win32&lt;/code&gt; which is an alias for &lt;code&gt;mingw-w64-i686&lt;/code&gt; to target 32 bit Windows, or &lt;code&gt;mingw-gw64-x86_64&lt;/code&gt; for 64 bit Windows targets.&lt;/p&gt; &#xA;&lt;p&gt;The target is implicit on MSys2 depending on which MINGW shell you started (the value of &lt;code&gt;$MSYSTEM&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;On Debian/Ubuntu this uses the MXE apt repository and works quite well.&lt;/p&gt; &#xA;&lt;p&gt;On Fedora it can build using the Fedora MinGW packages, albeit with wx 2.8, no OpenGL support, and no Link support for lack of SFML.&lt;/p&gt; &#xA;&lt;p&gt;On Arch it currently doesn&#39;t work at all because the AUR stuff is completely broken, I will at some point redo the arch stuff to use MXE as well.&lt;/p&gt; &#xA;&lt;h2&gt;CMake Options&lt;/h2&gt; &#xA;&lt;p&gt;The CMake code tries to guess reasonable defaults for options, but you can override them, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cmake .. -DENABLE_LINK=NO -G Ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of particular interest is making &lt;strong&gt;Release&lt;/strong&gt; or &lt;strong&gt;Debug&lt;/strong&gt; builds, the default mode is &lt;strong&gt;Release&lt;/strong&gt;, to make a &lt;strong&gt;Debug&lt;/strong&gt; build use something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cmake .. -DCMAKE_BUILD_TYPE=Debug -G Ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the complete list:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;CMake Option&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;What it Does&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Defaults&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_SDL&lt;/td&gt; &#xA;   &lt;td&gt;Build the SDL port&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_WX&lt;/td&gt; &#xA;   &lt;td&gt;Build the wxWidgets port&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_DEBUGGER&lt;/td&gt; &#xA;   &lt;td&gt;Enable the debugger&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_NLS&lt;/td&gt; &#xA;   &lt;td&gt;Enable translations&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_ASM_CORE&lt;/td&gt; &#xA;   &lt;td&gt;Enable x86 ASM CPU cores (&lt;strong&gt;BUGGY AND DANGEROUS&lt;/strong&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_ASM&lt;/td&gt; &#xA;   &lt;td&gt;Enable the following two ASM options&lt;/td&gt; &#xA;   &lt;td&gt;ON for 32 bit builds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_ASM_SCALERS&lt;/td&gt; &#xA;   &lt;td&gt;Enable x86 ASM graphic filters&lt;/td&gt; &#xA;   &lt;td&gt;ON for 32 bit builds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_MMX&lt;/td&gt; &#xA;   &lt;td&gt;Enable MMX&lt;/td&gt; &#xA;   &lt;td&gt;ON for 32 bit builds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_LINK&lt;/td&gt; &#xA;   &lt;td&gt;Enable GBA linking functionality (requires SFML)&lt;/td&gt; &#xA;   &lt;td&gt;AUTO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_LIRC&lt;/td&gt; &#xA;   &lt;td&gt;Enable LIRC support&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_FFMPEG&lt;/td&gt; &#xA;   &lt;td&gt;Enable ffmpeg A/V recording&lt;/td&gt; &#xA;   &lt;td&gt;AUTO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_ONLINEUPDATES&lt;/td&gt; &#xA;   &lt;td&gt;Enable online update checks&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_LTO&lt;/td&gt; &#xA;   &lt;td&gt;Compile with Link Time Optimization (gcc and clang only)&lt;/td&gt; &#xA;   &lt;td&gt;ON for release build&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_GBA_LOGGING&lt;/td&gt; &#xA;   &lt;td&gt;Enable extended GBA logging&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_DIRECT3D&lt;/td&gt; &#xA;   &lt;td&gt;Direct3D rendering for wxWidgets (Windows, &lt;strong&gt;NOT IMPLEMENTED!!!&lt;/strong&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_XAUDIO2&lt;/td&gt; &#xA;   &lt;td&gt;Enable xaudio2 sound output for wxWidgets (Windows only)&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_OPENAL&lt;/td&gt; &#xA;   &lt;td&gt;Enable OpenAL for the wxWidgets port&lt;/td&gt; &#xA;   &lt;td&gt;AUTO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_SSP&lt;/td&gt; &#xA;   &lt;td&gt;Enable gcc stack protector support (gcc only)&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_ASAN&lt;/td&gt; &#xA;   &lt;td&gt;Enable libasan sanitizers (by default address, only in debug mode)&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UPSTREAM_RELEASE&lt;/td&gt; &#xA;   &lt;td&gt;Do some release tasks, like codesigning, making zip and gpg sigs.&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BUILD_TESTING&lt;/td&gt; &#xA;   &lt;td&gt;Build the tests and enable ctest support.&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VBAM_STATIC&lt;/td&gt; &#xA;   &lt;td&gt;Try link all libs statically (the following are set to ON if ON)&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SDL2_STATIC&lt;/td&gt; &#xA;   &lt;td&gt;Try to link static SDL2 libraries&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SFML_STATIC_LIBRARIES&lt;/td&gt; &#xA;   &lt;td&gt;Try to link static SFML libraries&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FFMPEG_STATIC&lt;/td&gt; &#xA;   &lt;td&gt;Try to link static ffmpeg libraries&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SSP_STATIC&lt;/td&gt; &#xA;   &lt;td&gt;Try to link static gcc stack protector library (gcc only)&lt;/td&gt; &#xA;   &lt;td&gt;OFF except Win32&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OPENAL_STATIC&lt;/td&gt; &#xA;   &lt;td&gt;Try to link static OpenAL libraries&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SSP_STATIC&lt;/td&gt; &#xA;   &lt;td&gt;Link gcc stack protecter libssp statically (gcc, with ENABLE_SSP)&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TRANSLATIONS_ONLY&lt;/td&gt; &#xA;   &lt;td&gt;Build only the translations.zip and nothing else&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note for distro packagers, we use the CMake module &lt;a href=&#34;https://cmake.org/cmake/help/v2.8.12/cmake.html#module:GNUInstallDirs&#34;&gt;GNUInstallDirs&lt;/a&gt; to configure installation directories.&lt;/p&gt; &#xA;&lt;p&gt;On Unix to use a different version of wxWidgets, set &lt;code&gt;wxWidgets_CONFIG_EXECUTABLE&lt;/code&gt; to the path to the &lt;code&gt;wx-config&lt;/code&gt; script you want to use.&lt;/p&gt; &#xA;&lt;h2&gt;MSys2 Notes&lt;/h2&gt; &#xA;&lt;p&gt;To run the resulting binary, you can simply type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./visualboyadvance-m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in the shell where you built it.&lt;/p&gt; &#xA;&lt;p&gt;If you built with &lt;code&gt;-DCMAKE_BUILD_TYPE=Debug&lt;/code&gt;, you will get a console app and will see debug messages, even in mintty.&lt;/p&gt; &#xA;&lt;p&gt;If you want to start the binary from e.g. a shortcut or Explorer, you will need to put &lt;code&gt;c:\msys64\mingw32\bin&lt;/code&gt; for 32 bit builds and &lt;code&gt;c:\msys64\mingw64\bin&lt;/code&gt; for 64 bit builds in your PATH (to edit system PATH, go to Control Panel -&amp;gt; System -&amp;gt; Advanced system settings -&amp;gt; Environment Variables.)&lt;/p&gt; &#xA;&lt;p&gt;If you want to package the binary, you will need to include the MinGW DLLs it depends on, they can install to the same directory as the binary.&lt;/p&gt; &#xA;&lt;p&gt;Our own builds are static.&lt;/p&gt; &#xA;&lt;h2&gt;Debug Messages&lt;/h2&gt; &#xA;&lt;p&gt;We have an override for &lt;code&gt;wxLogDebug()&lt;/code&gt; to make it work even in non-debug builds of wx and on windows, even in mintty.&lt;/p&gt; &#xA;&lt;p&gt;It works like &lt;code&gt;printf()&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int foo = 42;&#xA;wxLogDebug(wxT(&#34;the value of foo = %d&#34;), foo);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From the core etc. the usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;fprintf(stderr, &#34;...&#34;, ...);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will work fine.&lt;/p&gt; &#xA;&lt;p&gt;You need a debug build for this to work or to even have a console on Windows. Pass &lt;code&gt;-DCMAKE_BUILD_TYPE=Debug&lt;/code&gt; to cmake.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Crash Bugs&lt;/h2&gt; &#xA;&lt;p&gt;If the emulator crashes and you wish to report the bug, a backtrace made with debug symbols would be immensely helpful.&lt;/p&gt; &#xA;&lt;p&gt;To generate one (on Linux and MSYS2) first build in debug mode by invoking &lt;code&gt;cmake&lt;/code&gt; as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cmake .. -DCMAKE_BUILD_TYPE=Debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you&#39;ve reproduced the crash, you need the core dump file, you may need to do something such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ulimit -c unlimited&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in your shell to enable coredump files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ask.fedoraproject.org/en/question/98776/where-is-core-dump-located/?answer=98779#post-id-98779&#34;&gt;This post&lt;/a&gt; explains how to retrieve core dump on Fedora Linux (and possibly other distributions.)&lt;/p&gt; &#xA;&lt;p&gt;Once you have the core dump file, open it with &lt;code&gt;gdb&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gdb -c core ./visualboyadvance-m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the &lt;code&gt;gdb&lt;/code&gt; shell, to print the backtrace, type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This may be a bit of a hassle, but it helps us out immensely.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/visualboyadvance-m/visualboyadvance-m/master/DEVELOPER-MANUAL.md&#34;&gt;Developer Manual&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>