<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-04T01:31:48Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ANYbotics/grid_map</title>
    <updated>2022-11-04T01:31:48Z</updated>
    <id>tag:github.com,2022-11-04:/ANYbotics/grid_map</id>
    <link href="https://github.com/ANYbotics/grid_map" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universal grid map library for mobile robotic mapping&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Grid Map&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This is a C++ library with &lt;a href=&#34;http://www.ros.org&#34;&gt;ROS&lt;/a&gt; interface to manage two-dimensional grid maps with multiple data layers. It is designed for mobile robotic mapping to store data such as elevation, variance, color, friction coefficient, foothold quality, surface normal, traversability etc. It is used in the &lt;a href=&#34;https://github.com/anybotics/elevation_mapping&#34;&gt;Robot-Centric Elevation Mapping&lt;/a&gt; package designed for rough terrain navigation.&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-layered:&lt;/strong&gt; Developed for universal 2.5-dimensional grid mapping with support for any number of layers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Efficient map re-positioning:&lt;/strong&gt; Data storage is implemented as two-dimensional circular buffer. This allows for non-destructive shifting of the map&#39;s position (e.g. to follow the robot) without copying data in memory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Based on Eigen:&lt;/strong&gt; Grid map data is stored as &lt;a href=&#34;http://eigen.tuxfamily.org&#34;&gt;Eigen&lt;/a&gt; data types. Users can apply available Eigen algorithms directly to the map data for versatile and efficient data manipulation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Convenience functions:&lt;/strong&gt; Several helper methods allow for convenient and memory safe cell data access. For example, iterator functions for rectangular, circular, polygonal regions and lines are implemented.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ROS interface:&lt;/strong&gt; Grid maps can be directly converted to and from ROS message types such as PointCloud2, OccupancyGrid, GridCells, and our custom GridMap message. Conversion packages provide compatibility with &lt;a href=&#34;http://wiki.ros.org/costmap_2d&#34;&gt;costmap_2d&lt;/a&gt;, &lt;a href=&#34;http://pointclouds.org/&#34;&gt;PCL&lt;/a&gt;, and &lt;a href=&#34;https://octomap.github.io/&#34;&gt;OctoMap&lt;/a&gt; data types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenCV interface:&lt;/strong&gt; Grid maps can be seamlessly converted from and to &lt;a href=&#34;http://opencv.org/&#34;&gt;OpenCV&lt;/a&gt; image types to make use of the tools provided by &lt;a href=&#34;http://opencv.org/&#34;&gt;OpenCV&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visualizations:&lt;/strong&gt; The &lt;em&gt;grid_map_rviz_plugin&lt;/em&gt; renders grid maps as 3d surface plots (height maps) in &lt;a href=&#34;http://wiki.ros.org/rviz&#34;&gt;RViz&lt;/a&gt;. Additionally, the &lt;em&gt;grid_map_visualization&lt;/em&gt; package helps to visualize grid maps as point clouds, occupancy grids, grid cells etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Filters:&lt;/strong&gt; The &lt;em&gt;grid_map_filters&lt;/em&gt; provides are range of filters to process grid maps as a sequence of filters. Parsing of mathematical expressions allows to flexibly setup powerful computations such as thresholding, normal vectors, smoothening, variance, inpainting, and matrix kernel convolutions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is research code, expect that it changes often and any fitness for a particular purpose is disclaimed.&lt;/p&gt; &#xA;&lt;p&gt;The source code is released under a &lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/LICENSE&#34;&gt;BSD 3-Clause license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Author: Péter Fankhauser&lt;br&gt; Affiliation: &lt;a href=&#34;https://www.anybotics.com/&#34;&gt;ANYbotics&lt;/a&gt;&lt;br&gt; Maintainer: Maximilian Wulf, &lt;a href=&#34;mailto:mwulf@anybotics.com&#34;&gt;mwulf@anybotics.com&lt;/a&gt;, Magnus Gärtner, &lt;a href=&#34;mailto:mgaertner@anybotics.com&#34;&gt;mgaertner@anybotics.com&lt;/a&gt;&lt;br&gt;&lt;/strong&gt; With contributions by: Simone Arreghini, Tanja Baumann, Jeff Delmerico, Remo Diethelm, Perry Franklin, Magnus Gärtner, Ruben Grandia, Edo Jelavic, Dominic Jud, Ralph Kaestner, Philipp Krüsi, Alex Millane, Daniel Stonier, Elena Stumm, Martin Wermelinger, Christos Zalidis&lt;/p&gt; &#xA;&lt;p&gt;This projected was initially developed at ETH Zurich (Autonomous Systems Lab &amp;amp; Robotic Systems Lab).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.anymal-research.org/&#34;&gt;This work is conducted as part of ANYmal Research, a community to advance legged robotics.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_rviz_plugin/doc/grid_map_rviz_plugin_example.png&#34; alt=&#34;Grid map example in RViz&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Publications&lt;/h2&gt; &#xA;&lt;p&gt;If you use this work in an academic context, please cite the following publication:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;P. Fankhauser and M. Hutter, &lt;strong&gt;&#34;A Universal Grid Map Library: Implementation and Use Case for Rough Terrain Navigation&#34;&lt;/strong&gt;, in Robot Operating System (ROS) – The Complete Reference (Volume 1), A. Koubaa (Ed.), Springer, 2016. (&lt;a href=&#34;http://www.researchgate.net/publication/284415855&#34;&gt;PDF&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;@incollection{Fankhauser2016GridMapLibrary,&#xA;  author = {Fankhauser, P{\&#39;{e}}ter and Hutter, Marco},&#xA;  booktitle = {Robot Operating System (ROS) – The Complete Reference (Volume 1)},&#xA;  title = {{A Universal Grid Map Library: Implementation and Use Case for Rough Terrain Navigation}},&#xA;  chapter = {5},&#xA;  editor = {Koubaa, Anis},&#xA;  publisher = {Springer},&#xA;  year = {2016},&#xA;  isbn = {978-3-319-26052-5},&#xA;  doi = {10.1007/978-3-319-26054-9{\_}5},&#xA;  url = {http://www.springer.com/de/book/9783319260525}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;An introduction to the grid map library including a tutorial is given in &lt;a href=&#34;http://www.researchgate.net/publication/284415855&#34;&gt;this book chapter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The C++ API is documented here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.ros.org/kinetic/api/grid_map_core/html/index.html&#34;&gt;grid_map_core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.ros.org/kinetic/api/grid_map_ros/html/index.html&#34;&gt;grid_map_ros&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.ros.org/kinetic/api/grid_map_costmap_2d/html/index.html&#34;&gt;grid_map_costmap_2d&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.ros.org/kinetic/api/grid_map_cv/html/index.html&#34;&gt;grid_map_cv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.ros.org/kinetic/api/grid_map_filters/html/index.html&#34;&gt;grid_map_filters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.ros.org/kinetic/api/grid_map_octomap/html/index.html&#34;&gt;grid_map_octomap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.ros.org/kinetic/api/grid_map_pcl/html/index.html&#34;&gt;grid_map_pcl&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Installation from Packages&lt;/h3&gt; &#xA;&lt;p&gt;To install all packages from the grid map library as Debian packages use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install ros-$ROS_DISTRO-grid-map&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building from Source&lt;/h3&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;em&gt;grid_map_core&lt;/em&gt; package depends only on the linear algebra library &lt;a href=&#34;http://eigen.tuxfamily.org&#34;&gt;Eigen&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install libeigen3-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The other packages depend additionally on the &lt;a href=&#34;http://www.ros.org&#34;&gt;ROS&lt;/a&gt; standard installation (&lt;em&gt;roscpp&lt;/em&gt;, &lt;em&gt;tf&lt;/em&gt;, &lt;em&gt;filters&lt;/em&gt;, &lt;em&gt;sensor_msgs&lt;/em&gt;, &lt;em&gt;nav_msgs&lt;/em&gt;, and &lt;em&gt;cv_bridge&lt;/em&gt;). Other format specific conversion packages (e.g. &lt;em&gt;grid_map_cv&lt;/em&gt;, &lt;em&gt;grid_map_pcl&lt;/em&gt; etc.) depend on packages described below in &lt;em&gt;Packages Overview&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Building&lt;/h4&gt; &#xA;&lt;p&gt;To build from source, clone the latest version from this repository into your catkin workspace and compile the package using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd catkin_ws/src&#xA;git clone https://github.com/anybotics/grid_map.git&#xA;cd ../&#xA;catkin_make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To maximize performance, make sure to build in &lt;em&gt;Release&lt;/em&gt; mode. You can specify the build type by setting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;catkin_make -DCMAKE_BUILD_TYPE=Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Packages Overview&lt;/h3&gt; &#xA;&lt;p&gt;This repository consists of following packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;grid_map&lt;/strong&gt;&lt;/em&gt; is the meta-package for the grid map library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;grid_map_core&lt;/strong&gt;&lt;/em&gt; implements the algorithms of the grid map library. It provides the &lt;code&gt;GridMap&lt;/code&gt; class and several helper classes such as the iterators. This package is implemented without &lt;a href=&#34;http://www.ros.org&#34;&gt;ROS&lt;/a&gt; dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;grid_map_ros&lt;/strong&gt;&lt;/em&gt; is the main package for &lt;a href=&#34;http://www.ros.org&#34;&gt;ROS&lt;/a&gt; dependent projects using the grid map library. It provides the interfaces to convert grid maps from and to several &lt;a href=&#34;http://www.ros.org&#34;&gt;ROS&lt;/a&gt; message types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;grid_map_demos&lt;/strong&gt;&lt;/em&gt; contains several nodes for demonstration purposes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;grid_map_filters&lt;/strong&gt;&lt;/em&gt; builds on the &lt;a href=&#34;http://wiki.ros.org/filters&#34;&gt;ROS Filters&lt;/a&gt; package to process grid maps as a sequence of filters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;grid_map_msgs&lt;/strong&gt;&lt;/em&gt; holds the &lt;a href=&#34;http://www.ros.org&#34;&gt;ROS&lt;/a&gt; message and service definitions around the [grid_map_msg/GridMap] message type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;grid_map_rviz_plugin&lt;/strong&gt;&lt;/em&gt; is an &lt;a href=&#34;http://wiki.ros.org/rviz&#34;&gt;RViz&lt;/a&gt; plugin to visualize grid maps as 3d surface plots (height maps).&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;grid_map_sdf&lt;/strong&gt;&lt;/em&gt; provides an algorithm to convert an elevation map into a 3D signed distance field.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;grid_map_visualization&lt;/strong&gt;&lt;/em&gt; contains a node written to convert GridMap messages to other &lt;a href=&#34;http://www.ros.org&#34;&gt;ROS&lt;/a&gt; message types for example for visualization in &lt;a href=&#34;http://wiki.ros.org/rviz&#34;&gt;RViz&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional conversion packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;grid_map_costmap_2d&lt;/strong&gt;&lt;/em&gt; provides conversions of grid maps from &lt;a href=&#34;http://wiki.ros.org/costmap_2d&#34;&gt;costmap_2d&lt;/a&gt; map types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;grid_map_cv&lt;/strong&gt;&lt;/em&gt; provides conversions of grid maps from and to &lt;a href=&#34;http://opencv.org/&#34;&gt;OpenCV&lt;/a&gt; image types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;grid_map_octomap&lt;/strong&gt;&lt;/em&gt; provides conversions of grid maps from OctoMap (&lt;a href=&#34;https://octomap.github.io/&#34;&gt;OctoMap&lt;/a&gt;) maps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;grid_map_pcl&lt;/strong&gt;&lt;/em&gt; provides conversions of grid maps from Point Cloud Library (&lt;a href=&#34;http://pointclouds.org/&#34;&gt;PCL&lt;/a&gt;) polygon meshes and point clouds. For details, see the grid map pcl package &lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_pcl/README.md&#34;&gt;README&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Unit Tests&lt;/h3&gt; &#xA;&lt;p&gt;Run the unit tests with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;catkin_make run_tests_grid_map_core run_tests_grid_map_ros&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;catkin build grid_map --no-deps --verbose --catkin-make-args run_tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you are using &lt;a href=&#34;http://catkin-tools.readthedocs.org/&#34;&gt;catkin tools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Demonstrations&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;grid_map_demos&lt;/em&gt; package contains several demonstration nodes. Use this code to verify your installation of the grid map packages and to get you started with your own usage of the library.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/src/simple_demo_node.cpp&#34;&gt;simple_demo&lt;/a&gt;&lt;/em&gt; demonstrates a simple example for using the grid map library. This ROS node creates a grid map, adds data to it, and publishes it. To see the result in RViz, execute the command&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  roslaunch grid_map_demos simple_demo.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/src/tutorial_demo_node.cpp&#34;&gt;tutorial_demo&lt;/a&gt;&lt;/em&gt; is an extended demonstration of the library&#39;s functionalities. Launch the &lt;em&gt;tutorial_demo&lt;/em&gt; with&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  roslaunch grid_map_demos tutorial_demo.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/src/IteratorsDemo.cpp&#34;&gt;iterators_demo&lt;/a&gt;&lt;/em&gt; showcases the usage of the grid map iterators. Launch it with&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  roslaunch grid_map_demos iterators_demo.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/src/ImageToGridmapDemo.cpp&#34;&gt;image_to_gridmap_demo&lt;/a&gt;&lt;/em&gt; demonstrates how to convert data from an &lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/data/eth_logo.png&#34;&gt;image&lt;/a&gt; to a grid map. Start the demonstration with&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  roslaunch grid_map_demos image_to_gridmap_demo.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/doc/image_to_grid_map_demo_result.png&#34; alt=&#34;Image to grid map demo result&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/src/GridmapToImageDemo.cpp&#34;&gt;grid_map_to_image_demo&lt;/a&gt;&lt;/em&gt; demonstrates how to save a grid map layer to an image. Start the demonstration with&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  rosrun grid_map_demos grid_map_to_image_demo _grid_map_topic:=/grid_map _file:=/home/$USER/Desktop/grid_map_image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/src/opencv_demo_node.cpp&#34;&gt;opencv_demo&lt;/a&gt;&lt;/em&gt; demonstrates map manipulations with help of &lt;a href=&#34;http://opencv.org/&#34;&gt;OpenCV&lt;/a&gt; functions. Start the demonstration with&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  roslaunch grid_map_demos opencv_demo.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/doc/opencv_demo_result.gif&#34; alt=&#34;OpenCV demo result&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/src/resolution_change_demo_node.cpp&#34;&gt;resolution_change_demo&lt;/a&gt;&lt;/em&gt; shows how the resolution of a grid map can be changed with help of the &lt;a href=&#34;http://opencv.org/&#34;&gt;OpenCV&lt;/a&gt; image scaling methods. The see the results, use&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  roslaunch grid_map_demos resolution_change_demo.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/src/FiltersDemo.cpp&#34;&gt;filters_demo&lt;/a&gt;&lt;/em&gt; uses a chain of &lt;a href=&#34;http://wiki.ros.org/filters&#34;&gt;ROS Filters&lt;/a&gt; to process a grid map. Starting from the elevation of a terrain map, the demo uses several filters to show how to compute surface normals, use inpainting to fill holes, smoothen/blur the map, and use math expressions to detect edges, compute roughness and traversability. The filter chain setup is configured in the &lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/config/filters_demo_filter_chain.yaml&#34;&gt;&lt;code&gt;filters_demo_filter_chain.yaml&lt;/code&gt;&lt;/a&gt; file. Launch the demo with&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  roslaunch grid_map_demos filters_demo.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/doc/filters_demo.gif&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/doc/filters_demo_preview.gif&#34; alt=&#34;Filters demo results&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information about grid map filters, see &lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/#grid_map_filters&#34;&gt;grid_map_filters&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/src/InterpolationDemo.cpp&#34;&gt;interpolation_demo&lt;/a&gt;&lt;/em&gt; shows the result of different interpolation methods on the resulting surface. The start the demo, use&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  roslaunch grid_map_demos interpolation_demo.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/interpolationSineWorld.gif&#34; width=&#34;256&#34; height=&#34;252&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/interpolationGaussWorld.gif&#34; width=&#34;256&#34; height=&#34;252&#34;&gt; &#xA;&lt;p&gt;The user can play with different worlds (surfaces) and different interpolation settings in the &lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/config/interpolation_demo.yaml&#34;&gt;&lt;code&gt;interpolation_demo.yaml&lt;/code&gt;&lt;/a&gt; file. The visualization displays the ground truth in green and yellow color. The interpolation result is shown in red and purple colors. Also, the demo computes maximal and average interpolation errors, as well as the average time required for a single interpolation query.&lt;/p&gt; &#xA;&lt;p&gt;Grid map features four different interpolation methods (in order of increasing accuracy and increasing complexity):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NN&lt;/strong&gt; - Nearest Neighbour (fastest, but least accurate).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linear&lt;/strong&gt; - Linear interpolation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cubic convolution&lt;/strong&gt; - Piecewise cubic interpolation. Implemented using the cubic convolution algorithm.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cubic&lt;/strong&gt; - Cubic interpolation (slowest, but most accurate).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details check the literature listed in &lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/include/grid_map_core/CubicInterpolation.hpp&#34;&gt;&lt;code&gt;CubicInterpolation.hpp&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Conventions &amp;amp; Definitions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/grid_map_layers.pdf&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/grid_map_layers.png&#34; alt=&#34;Grid map layers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/grid_map_conventions.pdf&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/grid_map_conventions.png&#34; alt=&#34;Grid map conventions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Iterators&lt;/h3&gt; &#xA;&lt;p&gt;The grid map library contains various iterators for convenience.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Grid map&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Submap&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Circle&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Line&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Polygon&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/iterators/grid_map_iterator.gif&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/iterators/grid_map_iterator_preview.gif&#34; alt=&#34;Grid map iterator&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/iterators/submap_iterator.gif&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/iterators/submap_iterator_preview.gif&#34; alt=&#34;Submap iterator&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/iterators/circle_iterator.gif&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/iterators/circle_iterator_preview.gif&#34; alt=&#34;Circle iterator&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/iterators/line_iterator.gif&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/iterators/line_iterator_preview.gif&#34; alt=&#34;Line iterator&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/iterators/polygon_iterator.gif&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/iterators/polygon_iterator_preview.gif&#34; alt=&#34;Polygon iterator&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Ellipse&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Spiral&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/iterators/ellipse_iterator.gif&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/iterators/ellipse_iterator_preview.gif&#34; alt=&#34;Ellipse iterator&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/iterators/spiral_iterator.gif&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/iterators/spiral_iterator_preview.gif&#34; alt=&#34;Spiral iterator&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Using the iterator in a &lt;code&gt;for&lt;/code&gt; loop is common. For example, iterate over the entire grid map with the &lt;code&gt;GridMapIterator&lt;/code&gt; with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;for (grid_map::GridMapIterator iterator(map); !iterator.isPastEnd(); ++iterator) {&#xA;    cout &amp;lt;&amp;lt; &#34;The value at index &#34; &amp;lt;&amp;lt; (*iterator).transpose() &amp;lt;&amp;lt; &#34; is &#34; &amp;lt;&amp;lt; map.at(&#34;layer&#34;, *iterator) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The other grid map iterators follow the same form. You can find more examples on how to use the different iterators in the &lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/src/IteratorsDemo.cpp&#34;&gt;iterators_demo&lt;/a&gt;&lt;/em&gt; node.&lt;/p&gt; &#xA;&lt;p&gt;Note: For maximum efficiency when using iterators, it is recommended to locally store direct access to the data layers of the grid map with &lt;code&gt;grid_map::Matrix&amp;amp; data = map[&#34;layer&#34;]&lt;/code&gt; outside the &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grid_map::Matrix&amp;amp; data = map[&#34;layer&#34;];&#xA;for (GridMapIterator iterator(map); !iterator.isPastEnd(); ++iterator) {&#xA;    const Index index(*iterator);&#xA;    cout &amp;lt;&amp;lt; &#34;The value at index &#34; &amp;lt;&amp;lt; index.transpose() &amp;lt;&amp;lt; &#34; is &#34; &amp;lt;&amp;lt; data(index(0), index(1)) &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find a benchmarking of the performance of the iterators in the &lt;code&gt;iterator_benchmark&lt;/code&gt; node of the &lt;code&gt;grid_map_demos&lt;/code&gt; package which can be run with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rosrun grid_map_demos iterator_benchmark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Beware that while iterators are convenient, it is often the cleanest and most efficient to make use of the built-in &lt;a href=&#34;http://eigen.tuxfamily.org&#34;&gt;Eigen&lt;/a&gt; methods. Here are some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Setting a constant value to all cells of a layer:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  map[&#34;layer&#34;].setConstant(3.0);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Adding two layers:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  map[&#34;sum&#34;] = map[&#34;layer_1&#34;] + map[&#34;layer_2&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Scaling a layer:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  map[&#34;layer&#34;] = 2.0 * map[&#34;layer&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Max. values between two layers:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  map[&#34;max&#34;] = map[&#34;layer_1&#34;].cwiseMax(map[&#34;layer_2&#34;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compute the root mean squared error:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  map.add(&#34;error&#34;, (map.get(&#34;layer_1&#34;) - map.get(&#34;layer_2&#34;)).cwiseAbs());&#xA;  unsigned int nCells = map.getSize().prod();&#xA;  double rootMeanSquaredError = sqrt((map[&#34;error&#34;].array().pow(2).sum()) / nCells);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Changing the Position of the Map&lt;/h3&gt; &#xA;&lt;p&gt;There are two different methods to change the position of the map:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;setPosition(...)&lt;/code&gt;: Changes the position of the map without changing data stored in the map. This changes the corresponce between the data and the map frame.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;move(...)&lt;/code&gt;: Relocates the region captured by grid map w.r.t. to the static grid map frame. Use this to move the grid map boundaries without relocating the grid map data. Takes care of all the data handling, such that the grid map data is stationary in the grid map frame.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Data in the overlapping region before and after the position change remains stored.&lt;/li&gt; &#xA;   &lt;li&gt;Data that falls outside the map at its new position is discarded.&lt;/li&gt; &#xA;   &lt;li&gt;Cells that cover previously unknown regions are emptied (set to nan). The data storage is implemented as two-dimensional circular buffer to minimize computational effort.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Due to the circular buffer structure, neighbouring indices might not fall close in the map frame. This assumption only holds for indices obtained by getUnwrappedIndex().&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;&lt;code&gt;setPosition(...)&lt;/code&gt;&lt;/th&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;&lt;code&gt;move(...)&lt;/code&gt;&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/setposition_method.gif&#34; alt=&#34;Grid map iterator&#34;&gt;&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_core/doc/move_method.gif&#34; alt=&#34;Submap iterator&#34;&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;h3&gt;grid_map_rviz_plugin&lt;/h3&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;http://wiki.ros.org/rviz&#34;&gt;RViz&lt;/a&gt; plugin visualizes a grid map layer as 3d surface plot (height map). A separate layer can be chosen as layer for the color information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_rviz_plugin/doc/grid_map_rviz_plugin.png&#34; alt=&#34;Grid map visualization in RViz&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;grid_map_sdf&lt;/h3&gt; &#xA;&lt;p&gt;This package provides an efficient algorithm to convert an elevation map into a dense 3D signed distance field. Each point in the 3D grid contains the distance to the closest point in the map together with the gradient.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_sdf/doc/anymal_sdf_demo.gif&#34; alt=&#34;ANYmal SDF demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;grid_map_visualization&lt;/h3&gt; &#xA;&lt;p&gt;This node subscribes to a topic of type &lt;a href=&#34;http://docs.ros.org/api/grid_map_msgs/html/msg/GridMap.html&#34;&gt;grid_map_msgs/GridMap&lt;/a&gt; and publishes messages that can be visualized in &lt;a href=&#34;http://wiki.ros.org/rviz&#34;&gt;RViz&lt;/a&gt;. The published topics of the visualizer can be fully configure with a YAML parameter file. Any number of visualizations with different parameters can be added. An example is &lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/config/tutorial_demo.yaml&#34;&gt;here&lt;/a&gt; for the configuration file of the &lt;em&gt;tutorial_demo&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Point cloud&lt;/th&gt; &#xA;   &lt;th&gt;Vectors&lt;/th&gt; &#xA;   &lt;th&gt;Occupancy grid&lt;/th&gt; &#xA;   &lt;th&gt;Grid cells&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_visualization/doc/point_cloud.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_visualization/doc/point_cloud_preview.jpg&#34; alt=&#34;Point cloud&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_visualization/doc/vectors.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_visualization/doc/vectors_preview.jpg&#34; alt=&#34;Vectors&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_visualization/doc/occupancy_grid.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_visualization/doc/occupancy_grid_preview.jpg&#34; alt=&#34;Occupancy grid&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_visualization/doc/grid_cells.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_visualization/doc/grid_cells_preview.jpg&#34; alt=&#34;Grid cells&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;grid_map_topic&lt;/code&gt;&lt;/strong&gt; (string, default: &#34;/grid_map&#34;)&lt;/p&gt; &lt;p&gt;The name of the grid map topic to be visualized. See below for the description of the visualizers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Subscribed Topics&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;/grid_map&lt;/code&gt;&lt;/strong&gt; (&lt;a href=&#34;http://docs.ros.org/api/grid_map_msgs/html/msg/GridMap.html&#34;&gt;grid_map_msgs/GridMap&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;The grid map to visualize.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Published Topics&lt;/h4&gt; &#xA;&lt;p&gt;The published topics are configured with the &lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_demos/config/tutorial_demo.yaml&#34;&gt;YAML parameter file&lt;/a&gt;. Possible topics are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;point_cloud&lt;/code&gt;&lt;/strong&gt; (&lt;a href=&#34;http://docs.ros.org/api/sensor_msgs/html/msg/PointCloud2.html&#34;&gt;sensor_msgs/PointCloud2&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;Shows the grid map as a point cloud. Select which layer to transform as points with the &lt;code&gt;layer&lt;/code&gt; parameter.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: elevation&#xA;  type: point_cloud&#xA;  params:&#xA;   layer: elevation&#xA;   flat: false # optional&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;flat_point_cloud&lt;/code&gt;&lt;/strong&gt; (&lt;a href=&#34;http://docs.ros.org/api/sensor_msgs/html/msg/PointCloud2.html&#34;&gt;sensor_msgs/PointCloud2&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;Shows the grid map as a &#34;flat&#34; point cloud, i.e. with all points at the same height &lt;em&gt;z&lt;/em&gt;. This is convenient to visualize 2d maps or images (or even video streams) in &lt;a href=&#34;http://wiki.ros.org/rviz&#34;&gt;RViz&lt;/a&gt; with help of its &lt;code&gt;Color Transformer&lt;/code&gt;. The parameter &lt;code&gt;height&lt;/code&gt; determines the desired &lt;em&gt;z&lt;/em&gt;-position of the flat point cloud.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: flat_grid&#xA;  type: flat_point_cloud&#xA;  params:&#xA;   height: 0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: In order to omit points in the flat point cloud from empty/invalid cells, specify the layers which should be checked for validity with &lt;code&gt;setBasicLayers(...)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;vectors&lt;/code&gt;&lt;/strong&gt; (&lt;a href=&#34;http://docs.ros.org/api/visualization_msgs/html/msg/Marker.html&#34;&gt;visualization_msgs/Marker&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;Visualizes vector data of the grid map as visual markers. Specify the layers which hold the &lt;em&gt;x&lt;/em&gt;-, &lt;em&gt;y&lt;/em&gt;-, and &lt;em&gt;z&lt;/em&gt;-components of the vectors with the &lt;code&gt;layer_prefix&lt;/code&gt; parameter. The parameter &lt;code&gt;position_layer&lt;/code&gt; defines the layer to be used as start point of the vectors.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: surface_normals&#xA;  type: vectors&#xA;  params:&#xA;   layer_prefix: normal_&#xA;   position_layer: elevation&#xA;   scale: 0.06&#xA;   line_width: 0.005&#xA;   color: 15600153 # red&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;occupancy_grid&lt;/code&gt;&lt;/strong&gt; (&lt;a href=&#34;http://docs.ros.org/api/nav_msgs/html/msg/OccupancyGrid.html&#34;&gt;nav_msgs/OccupancyGrid&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;Visualizes a layer of the grid map as occupancy grid. Specify the layer to be visualized with the &lt;code&gt;layer&lt;/code&gt; parameter, and the upper and lower bound with &lt;code&gt;data_min&lt;/code&gt; and &lt;code&gt;data_max&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: traversability_grid&#xA;  type: occupancy_grid&#xA;  params:&#xA;   layer: traversability&#xA;   data_min: -0.15&#xA;   data_max: 0.15&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;grid_cells&lt;/code&gt;&lt;/strong&gt; (&lt;a href=&#34;http://docs.ros.org/api/nav_msgs/html/msg/GridCells.html&#34;&gt;nav_msgs/GridCells&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;Visualizes a layer of the grid map as grid cells. Specify the layer to be visualized with the &lt;code&gt;layer&lt;/code&gt; parameter, and the upper and lower bounds with &lt;code&gt;lower_threshold&lt;/code&gt; and &lt;code&gt;upper_threshold&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: elevation_cells&#xA;  type: grid_cells&#xA;  params:&#xA;   layer: elevation&#xA;   lower_threshold: -0.08 # optional, default: -inf&#xA;   upper_threshold: 0.08 # optional, default: inf&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;region&lt;/code&gt;&lt;/strong&gt; (&lt;a href=&#34;http://docs.ros.org/api/visualization_msgs/html/msg/Marker.html&#34;&gt;visualization_msgs/Marker&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;Shows the boundary of the grid map.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: map_region&#xA;  type: map_region&#xA;  params:&#xA;   color: 3289650&#xA;   line_width: 0.003&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Color values are in RGB form as concatenated integers (for each channel value 0-255). The values can be generated like &lt;a href=&#34;http://www.wolframalpha.com/input/?i=BitOr%5BBitShiftLeft%5Br%2C16%5D%2C+BitShiftLeft%5Bg%2C8%5D%2C+b%5D+where+%7Br%3D0%2C+g%3D255%2C+b%3D0%7D&#34;&gt;this&lt;/a&gt; as an example for the color green (red: 0, green: 255, blue: 0).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;grid_map_filters&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;grid_map_filters&lt;/em&gt; package containts several filters which can be applied a grid map to perform computations on the data in the layers. The grid map filters are based on &lt;a href=&#34;http://wiki.ros.org/filters&#34;&gt;ROS Filters&lt;/a&gt;, which means that a chain of filters can be configured as a YAML file. Furthermore, additional filters can be written and made available through the ROS plugin mechanism, such as the &lt;a href=&#34;https://raw.githubusercontent.com/ANYbotics/grid_map/master/grid_map_cv/include/grid_map_cv/InpaintFilter.hpp&#34;&gt;&lt;code&gt;InpaintFilter&lt;/code&gt;&lt;/a&gt; from the &lt;code&gt;grid_map_cv&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;Several basic filters are provided in the &lt;em&gt;grid_map_filters&lt;/em&gt; package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gridMapFilters/ThresholdFilter&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Set values in the output layer to a specified value &lt;em&gt;if&lt;/em&gt; the condition_layer is exceeding either the upper or lower threshold (only one threshold at a time).&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: lower_threshold&#xA;  type: gridMapFilters/ThresholdFilter&#xA;  params:&#xA;    condition_layer: layer_name&#xA;    output_layer: layer_name&#xA;    lower_threshold: 0.0 # alternative: upper_threshold&#xA;    set_to: 0.0 # # Other uses: .nan, .inf&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gridMapFilters/MeanInRadiusFilter&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Compute for each cell of a layer the mean value inside a radius.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: mean_in_radius&#xA;  type: gridMapFilters/MeanInRadiusFilter&#xA;  params:&#xA;    input_layer: input&#xA;    output_layer: output&#xA;    radius: 0.06 # in m.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gridMapFilters/MedianFillFilter&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Compute for each &lt;em&gt;NaN&lt;/em&gt; cell of a layer the median (of finites) inside a patch with radius. Optionally, apply median calculations for values that are already finite, the patch radius for these points is given by existing_value_radius. Note that the fill computation is only performed if the fill_mask is valid for that point.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: median&#xA;  type: gridMapFilters/MedianFillFilter&#xA;  params:&#xA;    input_layer: input&#xA;    output_layer: output&#xA;    fill_hole_radius: 0.11 # in m. &#xA;    filter_existing_values: false # Default is false. If enabled it also does a median computation for existing values. &#xA;    existing_value_radius: 0.2 # in m. Note that this option only has an effect if filter_existing_values is set true. &#xA;    fill_mask_layer: fill_mask # A layer that is used to compute which areas to fill. If not present in the input it is automatically computed. &#xA;    debug: false # If enabled, the additional debug_infill_mask_layer is published. &#xA;    debug_infill_mask_layer: infill_mask # Layer used to visualize the intermediate, sparse-outlier removed fill mask. Only published if debug is enabled.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gridMapFilters/NormalVectorsFilter&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Compute the normal vectors of a layer in a map.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: surface_normals&#xA;  type: gridMapFilters/NormalVectorsFilter&#xA;  params:&#xA;    input_layer: input&#xA;    output_layers_prefix: normal_vectors_&#xA;    radius: 0.05&#xA;    normal_vector_positive_axis: z&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gridMapFilters/NormalColorMapFilter&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Compute a new color layer based on normal vectors layers.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: surface_normals&#xA;  type: gridMapFilters/NormalColorMapFilter&#xA;  params:&#xA;    input_layers_prefix: normal_vectors_&#xA;    output_layer: normal_color&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gridMapFilters/MathExpressionFilter&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Parse and evaluate a mathematical matrix expression with layers of a grid map. See &lt;a href=&#34;https://github.com/leggedrobotics/EigenLab&#34;&gt;EigenLab&lt;/a&gt; for the documentation of the expressions.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: math_expression&#xA;  type: gridMapFilters/MathExpressionFilter&#xA;  params:&#xA;    output_layer: output&#xA;    expression: acos(normal_vectors_z) # Slope.&#xA;    # expression: abs(elevation - elevation_smooth) # Surface roughness.&#xA;    # expression: 0.5 * (1.0 - (slope / 0.6)) + 0.5 * (1.0 - (roughness / 0.1)) # Weighted and normalized sum.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gridMapFilters/SlidingWindowMathExpressionFilter&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Parse and evaluate a mathematical matrix expression within a sliding window on a layer of a grid map. See &lt;a href=&#34;https://github.com/leggedrobotics/EigenLab&#34;&gt;EigenLab&lt;/a&gt; for the documentation of the expressions.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: math_expression&#xA;  type: gridMapFilters/SlidingWindowMathExpressionFilter&#xA;  params:&#xA;    input_layer: input&#xA;    output_layer: output&#xA;    expression: meanOfFinites(input) # Box blur&#xA;    # expression: sqrt(sumOfFinites(square(input - meanOfFinites(input))) ./ numberOfFinites(input)) # Standard deviation&#xA;    # expression: &#39;sumOfFinites([0,-1,0;-1,5,-1;0,-1,0].*elevation_inpainted)&#39; # Sharpen with kernel matrix&#xA;    compute_empty_cells: true&#xA;    edge_handling: crop # options: inside, crop, empty, mean&#xA;    window_size: 5 # in number of cells (optional, default: 3), make sure to make this compatible with the kernel matrix&#xA;    # window_length: 0.05 # instead of window_size, in m&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gridMapFilters/DuplicationFilter&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Duplicate a layer of a grid map.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: duplicate&#xA;  type: gridMapFilters/DuplicationFilter&#xA;  params:&#xA;    input_layer: input&#xA;    output_layer: output&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gridMapFilters/DeletionFilter&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Delete layers from a grid map.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: delete&#xA;  type: gridMapFilters/DeletionFilter&#xA;  params:&#xA;    layers: [color, score] # List of layers.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, the &lt;em&gt;grid_map_cv&lt;/em&gt; package provides the following filters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gridMapCv/InpaintFilter&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Use OpenCV to inpaint/fill holes in a layer.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  name: inpaint&#xA;  type: gridMapCv/InpaintFilter&#xA;  params:&#xA;    input_layer: input&#xA;    output_layer: output&#xA;    radius: 0.05 # in m&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Status&lt;/h2&gt; &#xA;&lt;h3&gt;Devel Job Status&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Kinetic&lt;/th&gt; &#xA;   &lt;th&gt;Melodic&lt;/th&gt; &#xA;   &lt;th&gt;Noetic&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kdev__grid_map__ubuntu_xenial_amd64/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kdev__grid_map__ubuntu_xenial_amd64&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mdev__grid_map__ubuntu_bionic_amd64/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mdev__grid_map__ubuntu_bionic_amd64&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mdev__grid_map__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mdev__grid_map__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;doc&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kdoc__grid_map__ubuntu_xenial_amd64/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kdoc__grid_map__ubuntu_xenial_amd64&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mdoc__grid_map__ubuntu_bionic_amd64/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mdoc__grid_map__ubuntu_bionic_amd64&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mdoc__grid_map__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mdoc__grid_map__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Release Job Status&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Kinetic&lt;/th&gt; &#xA;   &lt;th&gt;Melodic&lt;/th&gt; &#xA;   &lt;th&gt;Noetic&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kbin_uX64__grid_map__ubuntu_xenial_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map__ubuntu_xenial_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mbin_uB64__grid_map__ubuntu_bionic_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map__ubuntu_bionic_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map_core&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kbin_uX64__grid_map_core__ubuntu_xenial_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_core__ubuntu_xenial_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mbin_uB64__grid_map_core__ubuntu_bionic_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_core__ubuntu_bionic_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_core__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_core__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map_costmap_2d&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kbin_uX64__grid_map_costmap_2d__ubuntu_xenial_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_costmap_2d__ubuntu_xenial_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mbin_uB64__grid_map_costmap_2d__ubuntu_bionic_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_costmap_2d__ubuntu_bionic_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_costmap_2d__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_costmap_2d__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map_cv&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kbin_uX64__grid_map_cv__ubuntu_xenial_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_cv__ubuntu_xenial_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mbin_uB64__grid_map_cv__ubuntu_bionic_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_cv__ubuntu_bionic_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_cv__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_cv__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map_demos&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kbin_uX64__grid_map_demos__ubuntu_xenial_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_demos__ubuntu_xenial_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mbin_uB64__grid_map_demos__ubuntu_bionic_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_demos__ubuntu_bionic_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_demos__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_demos__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map_filters&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kbin_uX64__grid_map_filters__ubuntu_xenial_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_filters__ubuntu_xenial_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mbin_uB64__grid_map_filters__ubuntu_bionic_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_filters__ubuntu_bionic_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_filters__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_filters__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map_loader&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kbin_uX64__grid_map_loader__ubuntu_xenial_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_loader__ubuntu_xenial_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mbin_uB64__grid_map_loader__ubuntu_bionic_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_loader__ubuntu_bionic_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_loader__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_loader__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map_msgs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kbin_uX64__grid_map_msgs__ubuntu_xenial_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_msgs__ubuntu_xenial_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mbin_uB64__grid_map_msgs__ubuntu_bionic_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_msgs__ubuntu_bionic_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_msgs__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_msgs__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map_octomap&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kbin_uX64__grid_map_octomap__ubuntu_xenial_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_octomap__ubuntu_xenial_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mbin_uB64__grid_map_octomap__ubuntu_bionic_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_octomap__ubuntu_bionic_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_octomap__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_octomap__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map_pcl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kbin_uX64__grid_map_pcl__ubuntu_xenial_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_pcl__ubuntu_xenial_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mbin_uB64__grid_map_pcl__ubuntu_bionic_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_pcl__ubuntu_bionic_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_pcl__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_pcl__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map_ros&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kbin_uX64__grid_map_ros__ubuntu_xenial_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_ros__ubuntu_xenial_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mbin_uB64__grid_map_ros__ubuntu_bionic_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_ros__ubuntu_bionic_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_ros__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_ros__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map_rviz_plugin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kbin_uX64__grid_map_rviz_plugin__ubuntu_xenial_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_rviz_plugin__ubuntu_xenial_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mbin_uB64__grid_map_rviz_plugin__ubuntu_bionic_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_rviz_plugin__ubuntu_bionic_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_rviz_plugin__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_rviz_plugin__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map_sdf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kbin_uX64__grid_map_sdf__ubuntu_xenial_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_sdf__ubuntu_xenial_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mbin_uB64__grid_map_sdf__ubuntu_bionic_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_sdf__ubuntu_bionic_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_sdf__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_sdf__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grid_map_visualization&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Kbin_uX64__grid_map_visualization__ubuntu_xenial_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_visualization__ubuntu_xenial_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Mbin_uB64__grid_map_visualization__ubuntu_bionic_amd64__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_visualization__ubuntu_bionic_amd64__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_visualization__ubuntu_focal_armhf__binary/&#34;&gt;&lt;img src=&#34;http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_visualization__ubuntu_focal_armhf__binary&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Bugs &amp;amp; Feature Requests&lt;/h2&gt; &#xA;&lt;p&gt;Please report bugs and request features using the &lt;a href=&#34;https://github.com/anybotics/grid_map/issues&#34;&gt;Issue Tracker&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zerotier/ZeroTierOne</title>
    <updated>2022-11-04T01:31:48Z</updated>
    <id>tag:github.com,2022-11-04:/zerotier/ZeroTierOne</id>
    <link href="https://github.com/zerotier/ZeroTierOne" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Smart Ethernet Switch for Earth&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZeroTier - Global Area Networking&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;This document is written for a software developer audience. For information on using ZeroTier, see the: &lt;a href=&#34;https://www.zerotier.com&#34;&gt;Website&lt;/a&gt;, &lt;a href=&#34;https://docs.zerotier.com&#34;&gt;Documentation Site&lt;/a&gt;, and &lt;a href=&#34;https://discuss.zerotier.com&#34;&gt;Discussion Forum&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;ZeroTier is a smart programmable Ethernet switch for planet Earth. It allows all networked devices, VMs, containers, and applications to communicate as if they all reside in the same physical data center or cloud region.&lt;/p&gt; &#xA;&lt;p&gt;This is accomplished by combining a cryptographically addressed and secure peer to peer network (termed VL1) with an Ethernet emulation layer somewhat similar to VXLAN (termed VL2). Our VL2 Ethernet virtualization layer includes advanced enterprise SDN features like fine grained access control rules for network micro-segmentation and security monitoring.&lt;/p&gt; &#xA;&lt;p&gt;All ZeroTier traffic is encrypted end-to-end using secret keys that only you control. Most traffic flows peer to peer, though we offer free (but slow) relaying for users who cannot establish peer to peer connections.&lt;/p&gt; &#xA;&lt;p&gt;The goals and design principles of ZeroTier are inspired by among other things the original &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43231.pdf&#34;&gt;Google BeyondCorp&lt;/a&gt; paper and the &lt;a href=&#34;https://en.wikipedia.org/wiki/Jericho_Forum&#34;&gt;Jericho Forum&lt;/a&gt; with its notion of &#34;deperimeterization.&#34;&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://www.zerotier.com/&#34;&gt;ZeroTier&#39;s site&lt;/a&gt; for more information and &lt;a href=&#34;https://www.zerotier.com/download/&#34;&gt;pre-built binary packages&lt;/a&gt;. Apps for Android and iOS are available for free in the Google Play and Apple app stores.&lt;/p&gt; &#xA;&lt;p&gt;ZeroTier is licensed under the &lt;a href=&#34;https://mariadb.com/bsl11/&#34;&gt;BSL version 1.1&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/zerotier/ZeroTierOne/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; and the &lt;a href=&#34;https://www.zerotier.com/pricing&#34;&gt;ZeroTier pricing page&lt;/a&gt; for details. ZeroTier is free to use internally in businesses and academic institutions and for non-commercial purposes. Certain types of commercial use such as building closed-source apps and devices based on ZeroTier or offering ZeroTier network controllers and network management as a SaaS service require a commercial license.&lt;/p&gt; &#xA;&lt;p&gt;A small amount of third party code is also included in ZeroTier and is not subject to our BSL license. See &lt;a href=&#34;https://raw.githubusercontent.com/zerotier/ZeroTierOne/master/AUTHORS.md&#34;&gt;AUTHORS.md&lt;/a&gt; for a list of third party code, where it is included, and the licenses that apply to it. All of the third party code in ZeroTier is liberally licensed (MIT, BSD, Apache, public domain, etc.).&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Everything in the ZeroTier world is controlled by two types of identifier: 40-bit/10-digit &lt;em&gt;ZeroTier addresses&lt;/em&gt; and 64-bit/16-digit &lt;em&gt;network IDs&lt;/em&gt;. These identifiers are easily distinguished by their length. A ZeroTier address identifies a node or &#34;device&#34; (laptop, phone, server, VM, app, etc.) while a network ID identifies a virtual Ethernet network that can be joined by devices.&lt;/p&gt; &#xA;&lt;p&gt;ZeroTier addresses can be thought of as port numbers on an enormous planet-wide enterprise Ethernet smart switch supporting VLANs. Network IDs are VLAN IDs to which these ports may be assigned. A single port can be assigned to more than one VLAN.&lt;/p&gt; &#xA;&lt;p&gt;A ZeroTier address looks like &lt;code&gt;8056c2e21c&lt;/code&gt; and a network ID looks like &lt;code&gt;8056c2e21c000001&lt;/code&gt;. Network IDs are composed of the ZeroTier address of that network&#39;s primary controller and an arbitrary 24-bit ID that identifies the network on this controller. Network controllers are roughly analogous to SDN controllers in SDN protocols like &lt;a href=&#34;https://en.wikipedia.org/wiki/OpenFlow&#34;&gt;OpenFlow&lt;/a&gt;, though as with the analogy between VXLAN and VL2 this should not be read to imply that the protocols or design are the same. You can use our convenient and inexpensive SaaS hosted controllers at &lt;a href=&#34;https://my.zerotier.com/&#34;&gt;my.zerotier.com&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/zerotier/ZeroTierOne/master/controller/&#34;&gt;run your own controller&lt;/a&gt; if you don&#39;t mind messing around with JSON configuration files or writing scripts to do so.&lt;/p&gt; &#xA;&lt;h3&gt;Project Layout&lt;/h3&gt; &#xA;&lt;p&gt;The base path contains the ZeroTier One service main entry point (&lt;code&gt;one.cpp&lt;/code&gt;), self test code, makefiles, etc.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;artwork/&lt;/code&gt;: icons, logos, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;attic/&lt;/code&gt;: old stuff and experimental code that we want to keep around for reference.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;controller/&lt;/code&gt;: the reference network controller implementation, which is built and included by default on desktop and server build targets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;debian/&lt;/code&gt;: files for building Debian packages on Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doc/&lt;/code&gt;: manual pages and other documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ext/&lt;/code&gt;: third party libraries, binaries that we ship for convenience on some platforms (Mac and Windows), and installation support files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;include/&lt;/code&gt;: include files for the ZeroTier core.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;java/&lt;/code&gt;: a JNI wrapper used with our Android mobile app. (The whole Android app is not open source but may be made so in the future.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;macui/&lt;/code&gt;: a Macintosh menu-bar app for controlling ZeroTier One, written in Objective C.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;node/&lt;/code&gt;: the ZeroTier virtual Ethernet switch core, which is designed to be entirely separate from the rest of the code and able to be built as a stand-alone OS-independent library. Note to developers: do not use C++11 features in here, since we want this to build on old embedded platforms that lack C++11 support. C++11 can be used elsewhere.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;osdep/&lt;/code&gt;: code to support and integrate with OSes, including platform-specific stuff only built for certain targets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rule-compiler/&lt;/code&gt;: JavaScript rules language compiler for defining network-level rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;service/&lt;/code&gt;: the ZeroTier One service, which wraps the ZeroTier core and provides VPN-like connectivity to virtual networks for desktops, laptops, servers, VMs, and containers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;windows/&lt;/code&gt;: Visual Studio solution files, Windows service code, and the Windows task bar app UI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zeroidc/&lt;/code&gt;: OIDC implementation used by ZeroTier service to log into SSO-enabled networks. (This part is written in Rust, and more Rust will be appearing in this repository in the future.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build and Platform Notes&lt;/h3&gt; &#xA;&lt;p&gt;To build on Mac and Linux just type &lt;code&gt;make&lt;/code&gt;. On FreeBSD and OpenBSD &lt;code&gt;gmake&lt;/code&gt; (GNU make) is required and can be installed from packages or ports. For Windows there is a Visual Studio solution in &lt;code&gt;windows/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mac&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Xcode command line tools for macOS 10.13 or newer are required.&lt;/li&gt; &#xA;   &lt;li&gt;Rust for x86_64 and ARM64 targets &lt;em&gt;if SSO is enabled in the build&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The minimum compiler versions required are GCC/G++ 4.9.3 or CLANG/CLANG++ 3.4.2. (Install &lt;code&gt;clang&lt;/code&gt; on CentOS 7 as G++ is too old.)&lt;/li&gt; &#xA;   &lt;li&gt;Linux makefiles automatically detect and prefer clang/clang++ if present as it produces smaller and slightly faster binaries in most cases. You can override by supplying CC and CXX variables on the make command line.&lt;/li&gt; &#xA;   &lt;li&gt;Rust for x86_64 and ARM64 targets &lt;em&gt;if SSO is enabled in the build&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Visual Studio 2022 on Windows 10 or newer.&lt;/li&gt; &#xA;   &lt;li&gt;Rust for x86_64 and ARM64 targets &lt;em&gt;if SSO is enabled in the build&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FreeBSD&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GNU make is required. Type &lt;code&gt;gmake&lt;/code&gt; to build.&lt;/li&gt; &#xA;   &lt;li&gt;Rust for x86_64 and ARM64 targets &lt;em&gt;if SSO is enabled in the build&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenBSD&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;There is a limit of four network memberships on OpenBSD as there are only four tap devices (&lt;code&gt;/dev/tap0&lt;/code&gt; through &lt;code&gt;/dev/tap3&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;GNU make is required. Type &lt;code&gt;gmake&lt;/code&gt; to build.&lt;/li&gt; &#xA;   &lt;li&gt;Rust for x86_64 and ARM64 targets &lt;em&gt;if SSO is enabled in the build&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Typing &lt;code&gt;make selftest&lt;/code&gt; will build a &lt;em&gt;zerotier-selftest&lt;/em&gt; binary which unit tests various internals and reports on a few aspects of the build environment. It&#39;s a good idea to try this on novel platforms or architectures.&lt;/p&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;p&gt;Running &lt;em&gt;zerotier-one&lt;/em&gt; with &lt;code&gt;-h&lt;/code&gt; option will show help.&lt;/p&gt; &#xA;&lt;p&gt;On Linux and BSD, if you built from source, you can start the service with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo ./zerotier-one -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On most distributions, macOS, and Windows, the installer will start the service and set it up to start on boot.&lt;/p&gt; &#xA;&lt;p&gt;A home folder for your system will automatically be created.&lt;/p&gt; &#xA;&lt;p&gt;The service is controlled via the JSON API, which by default is available at 127.0.0.1 port 9993. We include a &lt;em&gt;zerotier-cli&lt;/em&gt; command line utility to make API calls for standard things like joining and leaving networks. The &lt;em&gt;authtoken.secret&lt;/em&gt; file in the home folder contains the secret token for accessing this API. See &lt;a href=&#34;https://raw.githubusercontent.com/zerotier/ZeroTierOne/master/service/README.md&#34;&gt;service/README.md&lt;/a&gt; for API documentation.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s where home folders live (by default) on each OS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: &lt;code&gt;/var/lib/zerotier-one&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FreeBSD&lt;/strong&gt; / &lt;strong&gt;OpenBSD&lt;/strong&gt;: &lt;code&gt;/var/db/zerotier-one&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mac&lt;/strong&gt;: &lt;code&gt;/Library/Application Support/ZeroTier/One&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;\ProgramData\ZeroTier\One&lt;/code&gt; (That&#39;s the default. The base &#39;shared app data&#39; folder might be different if Windows is installed with a non-standard drive letter assignment or layout.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Basic Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;For most users, it just works.&lt;/p&gt; &#xA;&lt;p&gt;If you are running a local system firewall, we recommend adding a rules permitting zerotier. If you installed binaries for Windows this should be done automatically. Other platforms might require manual editing of local firewall rules depending on your configuration.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.zerotier.com/zerotier/troubleshooting&#34;&gt;documentation site&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;The Mac firewall can be found under &#34;Security&#34; in System Preferences. Linux has a variety of firewall configuration systems and tools.&lt;/p&gt; &#xA;&lt;p&gt;On CentOS check &lt;code&gt;/etc/sysconfig/iptables&lt;/code&gt; for IPTables rules. For other distributions consult your distribution&#39;s documentation. You&#39;ll also have to check the UIs or documentation for commercial third party firewall applications like Little Snitch (Mac), McAfee Firewall Enterprise (Windows), etc. if you are running any of those. Some corporate environments might have centrally managed firewall software, so you might also have to contact IT.&lt;/p&gt; &#xA;&lt;p&gt;ZeroTier One peers will automatically locate each other and communicate directly over a local wired LAN &lt;em&gt;if UDP port 9993 inbound is open&lt;/em&gt;. If that port is filtered, they won&#39;t be able to see each others&#39; LAN announcement packets. If you&#39;re experiencing poor performance between devices on the same physical network, check their firewall settings. Without LAN auto-location peers must attempt &#34;loopback&#34; NAT traversal, which sometimes fails and in any case requires that every packet traverse your external router twice.&lt;/p&gt; &#xA;&lt;p&gt;Users behind certain types of firewalls and &#34;symmetric&#34; NAT devices may not able able to connect to external peers directly at all. ZeroTier has limited support for port prediction and will &lt;em&gt;attempt&lt;/em&gt; to traverse symmetric NATs, but this doesn&#39;t always work. If P2P connectivity fails you&#39;ll be bouncing UDP packets off our relay servers resulting in slower performance. Some NAT router(s) have a configurable NAT mode, and setting this to &#34;full cone&#34; will eliminate this problem. If you do this you may also see a magical improvement for things like VoIP phones, Skype, BitTorrent, WebRTC, certain games, etc., since all of these use NAT traversal techniques similar to ours.&lt;/p&gt; &#xA;&lt;p&gt;If a firewall between you and the Internet blocks ZeroTier&#39;s UDP traffic, you will fall back to last-resort TCP tunneling to rootservers over port 443 (https impersonation). This will work almost anywhere but is &lt;em&gt;very slow&lt;/em&gt; compared to UDP or direct peer to peer connectivity.&lt;/p&gt; &#xA;&lt;p&gt;Additional help can be found in our &lt;a href=&#34;https://zerotier.atlassian.net/wiki/spaces/SD/overview&#34;&gt;knowledge base&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>