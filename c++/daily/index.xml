<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-14T01:24:24Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>badaix/snapcast</title>
    <updated>2023-08-14T01:24:24Z</updated>
    <id>tag:github.com,2023-08-14:/badaix/snapcast</id>
    <link href="https://github.com/badaix/snapcast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Synchronous multiroom audio player&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Snapcast&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/badaix/snapcast/master/doc/Snapcast_800.png&#34; alt=&#34;Snapcast&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;S&lt;/strong&gt;y&lt;strong&gt;n&lt;/strong&gt;chronous &lt;strong&gt;a&lt;/strong&gt;udio &lt;strong&gt;p&lt;/strong&gt;layer&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/badaix/snapcast/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/badaix/snapcast/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/badaix/snapcast/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/badaix/snapcast.svg?sanitize=true&#34; alt=&#34;Github Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.me/badaix&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Snapcast is a multiroom client-server audio player, where all clients are time synchronized with the server to play perfectly synced audio. It&#39;s not a standalone player, but an extension that turns your existing audio player into a Sonos-like multiroom solution.&lt;br&gt; Audio is captured by the server and routed to the connected clients. Several players can feed audio to the server in parallel and clients can be grouped to play the same audio stream.&lt;br&gt; One of the most generic ways to use Snapcast is in conjunction with the music player daemon (&lt;a href=&#34;http://www.musicpd.org/&#34;&gt;MPD&lt;/a&gt;) or &lt;a href=&#34;https://www.mopidy.com/&#34;&gt;Mopidy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/badaix/snapcast/master/doc/Overview.png&#34; alt=&#34;Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How does it work&lt;/h2&gt; &#xA;&lt;p&gt;The Snapserver reads PCM chunks from configurable stream sources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Named pipe&lt;/strong&gt;, e.g. &lt;code&gt;/tmp/snapfifo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ALSA&lt;/strong&gt; to capture line-in, microphone, alsa-loop (to capture audio from other players)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TCP&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;stdout&lt;/strong&gt; of a process&lt;/li&gt; &#xA; &lt;li&gt;Many more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The chunks are encoded and tagged with the local time. Supported codecs are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;PCM&lt;/strong&gt; lossless uncompressed&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FLAC&lt;/strong&gt; lossless compressed [default]&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vorbis&lt;/strong&gt; lossy compression&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Opus&lt;/strong&gt; lossy low-latency compression&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The encoded chunks are sent via a TCP connection to the Snapclients. Each client does continuous time synchronization with the server, so that the client is always aware of the local server time. Every received chunk is first decoded and added to the client&#39;s chunk-buffer. Knowing the server&#39;s time, the chunk is played out using a system dependend low level audio API (e.g. ALSA) at the appropriate time. Time deviations are corrected by playing faster/slower, which is done by removing/duplicating single samples (a sample at 48kHz has a duration of ~0.02ms).&lt;/p&gt; &#xA;&lt;p&gt;Typically the deviation is below 0.2ms.&lt;/p&gt; &#xA;&lt;p&gt;For more information on the binary protocol, please see the &lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/binary_protocol.md&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can either install Snapcast from a prebuilt package (recommended for new users), or build and install snapcast from source.&lt;/p&gt; &#xA;&lt;h3&gt;Install Linux packages (recommended for beginners)&lt;/h3&gt; &#xA;&lt;p&gt;Snapcast packages are available for several Linux distributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/install.md#debian&#34;&gt;Debian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/install.md#openwrt&#34;&gt;OpenWrt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/install.md#alpine-linux&#34;&gt;Alpine Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/install.md#archlinux&#34;&gt;Archlinux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/install.md#void-linux&#34;&gt;Void Linux&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Nightly builds&lt;/h3&gt; &#xA;&lt;p&gt;There are debian packages of automated builds for &lt;code&gt;armhf&lt;/code&gt; and &lt;code&gt;amd64&lt;/code&gt; in &lt;a href=&#34;https://github.com/badaix/snapos/actions&#34;&gt;Snapos Actions&lt;/a&gt;. Download and extract the archive for your architecture and follow the &lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/install.md#debian&#34;&gt;debian installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install using Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;On macOS and Linux, snapcast can be installed using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install snapcast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation from source&lt;/h3&gt; &#xA;&lt;p&gt;Please follow this &lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/build.md&#34;&gt;guide&lt;/a&gt; to build Snapcast for&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/build.md#linux-native&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/build.md#freebsd-native&#34;&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/build.md#macos-native&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/build.md#android-cross-compile&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/build.md#openwrtlede-cross-compile&#34;&gt;OpenWrt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/build.md#buildroot-cross-compile&#34;&gt;Buildroot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/build.md#raspberry-pi-cross-compile&#34;&gt;Raspberry Pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/build.md#windows-vcpkg&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SnapOS&lt;/h2&gt; &#xA;&lt;p&gt;The bravest among you may be interested in &lt;a href=&#34;https://github.com/badaix/snapos&#34;&gt;SnapOS&lt;/a&gt;, a small and fast-booting &#34;just enough&#34; OS to run Snapcast as an appliance.&lt;/p&gt; &#xA;&lt;p&gt;There is a guide (with the necessary buildfiles) available to build SnapOS, which comes in two flavors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/badaix/snapos/raw/master/buildroot-external/README.md&#34;&gt;Buildroot&lt;/a&gt; based, or&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/badaix/snapos/tree/master/openwrt&#34;&gt;OpenWrt&lt;/a&gt; based.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please note that there are no pre-built firmware packages available.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;After installation, Snapserver and Snapclient are started with the command line arguments that are configured in &lt;code&gt;/etc/default/snapserver&lt;/code&gt; and &lt;code&gt;/etc/default/snapclient&lt;/code&gt;. Allowed options are listed in the man pages (&lt;code&gt;man snapserver&lt;/code&gt;, &lt;code&gt;man snapclient&lt;/code&gt;) or by invoking the snapserver or snapclient with the &lt;code&gt;-h&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;The server configuration is done in &lt;code&gt;/etc/snapserver.conf&lt;/code&gt;. Different audio sources can by configured in the &lt;code&gt;[stream]&lt;/code&gt; section with a list of &lt;code&gt;source&lt;/code&gt; options, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[stream]&#xA;source = pipe:///tmp/snapfifo?name=Radio&amp;amp;sampleformat=48000:16:2&amp;amp;codec=flac&#xA;source = file:///home/user/Musik/Some%20wave%20file.wav?name=File&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available stream sources are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/configuration.md#pipe&#34;&gt;pipe&lt;/a&gt;: read audio from a named pipe&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/configuration.md#alsa&#34;&gt;alsa&lt;/a&gt;: read audio from an alsa device&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/configuration.md#librespot&#34;&gt;librespot&lt;/a&gt;: launches librespot and reads audio from stdout&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/configuration.md#airplay&#34;&gt;airplay&lt;/a&gt;: launches airplay and read audio from stdout&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/configuration.md#file&#34;&gt;file&lt;/a&gt;: read PCM audio from a file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/configuration.md#process&#34;&gt;process&lt;/a&gt;: launches a process and reads audio from stdout&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/configuration.md#tcp-server&#34;&gt;tcp&lt;/a&gt;: receives audio from a TCP socket, can act as client or server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/configuration.md#meta&#34;&gt;meta&lt;/a&gt;: read and mix audio from other stream sources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;p&gt;The client will use as audio backend the system&#39;s low level audio API to have the best possible control and most precise timing to achieve perfectly synced playback.&lt;/p&gt; &#xA;&lt;p&gt;Available audio backends are configured using the &lt;code&gt;--player&lt;/code&gt; command line parameter:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Backend&lt;/th&gt; &#xA;   &lt;th&gt;OS&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Parameters&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;alsa&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;ALSA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer_time=&amp;lt;total buffer size [ms]&amp;gt;&lt;/code&gt; (default 80, min 10)&lt;br&gt;&lt;code&gt;fragments=&amp;lt;number of buffers&amp;gt;&lt;/code&gt; (default 4, min 2)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pulse&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;PulseAudio&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer_time=&amp;lt;buffer size [ms]&amp;gt;&lt;/code&gt; (default 100, min 10)&lt;br&gt;&lt;code&gt;server=&amp;lt;PulseAudio server&amp;gt;&lt;/code&gt; - default not-set: use the default server&lt;br&gt;&lt;code&gt;property=&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; set PA property, can be used multiple times (default &lt;code&gt;media.role=music&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;oboe&lt;/td&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td&gt;Oboe, using OpenSL ES on Android 4.1 and AAudio on 8.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;opensl&lt;/td&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td&gt;OpenSL ES&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;coreaudio&lt;/td&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;Core Audio&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wasapi&lt;/td&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;Windows Audio Session API&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;file&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;   &lt;td&gt;Write audio to file&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filename=&amp;lt;filename&amp;gt;&lt;/code&gt; (&lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt; = &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; or a filename)&lt;br&gt;`mode=[w&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Parameters are appended to the player name, e.g. &lt;code&gt;--player alsa:buffer_time=100&lt;/code&gt;. Use &lt;code&gt;--player &amp;lt;name&amp;gt;:?&lt;/code&gt; to get a list of available options.&lt;br&gt; For some audio backends you can configure the PCM device using the &lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--soundcard&lt;/code&gt; parameter, the device is chosen by index or name. Available PCM devices can be listed with &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt;&lt;br&gt; If you are running MPD and Shairport-sync into a soundcard that only supports 48000 sample rate, you can use &lt;code&gt;--sampleformat &amp;lt;arg&amp;gt;&lt;/code&gt; and the snapclient will resample the audio from shairport-sync, for example, which is 44100 (i.e. &lt;code&gt;--sampleformat 48000:16:*&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;p&gt;You can test your installation by copying random data into the server&#39;s fifo file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat /dev/urandom &amp;gt; /tmp/snapfifo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All connected clients should play random noise now. You might raise the client&#39;s volume with &#34;alsamixer&#34;. It&#39;s also possible to let the server play a WAV file. Simply configure a &lt;code&gt;file&lt;/code&gt; stream in &lt;code&gt;/etc/snapserver.conf&lt;/code&gt;, and restart the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[stream]&#xA;source = file:///home/user/Musik/Some%20wave%20file.wav?name=test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you are using a Raspberry Pi, you might have to change your audio output to the 3.5mm jack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#The last number is the audio output with 1 being the 3.5 jack, 2 being HDMI and 0 being auto.&#xA;amixer cset numid=3 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To setup WiFi on a Raspberry Pi, you can follow this &lt;a href=&#34;https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md&#34;&gt;guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Control&lt;/h2&gt; &#xA;&lt;p&gt;Snapcast can be controlled using a &lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/json_rpc_api/control.md&#34;&gt;JSON-RPC API&lt;/a&gt; over plain TCP, HTTP, or Websockets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set client&#39;s volume&lt;/li&gt; &#xA; &lt;li&gt;Mute clients&lt;/li&gt; &#xA; &lt;li&gt;Rename clients&lt;/li&gt; &#xA; &lt;li&gt;Assign a client to a stream&lt;/li&gt; &#xA; &lt;li&gt;Manage groups&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;WebApp&lt;/h3&gt; &#xA;&lt;p&gt;The server is shipped with &lt;a href=&#34;https://github.com/badaix/snapweb&#34;&gt;Snapweb&lt;/a&gt;, this WebApp can be reached under &lt;code&gt;http://&amp;lt;snapserver host&amp;gt;:1780&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/badaix/snapweb/master/snapweb.png&#34; alt=&#34;Snapweb&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Android client&lt;/h3&gt; &#xA;&lt;p&gt;There is an Android client &lt;a href=&#34;https://github.com/badaix/snapdroid&#34;&gt;snapdroid&lt;/a&gt; available in &lt;a href=&#34;https://github.com/badaix/snapdroid/releases/latest&#34;&gt;Releases&lt;/a&gt; and on &lt;a href=&#34;https://play.google.com/store/apps/details?id=de.badaix.snapcast&#34;&gt;Google Play&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/badaix/snapcast/master/doc/snapcast_android_scaled.png&#34; alt=&#34;Snapcast for Android&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributions&lt;/h3&gt; &#xA;&lt;p&gt;There is also an unofficial WebApp from @atoomic &lt;a href=&#34;https://github.com/atoomic/snapcast-volume-ui&#34;&gt;atoomic/snapcast-volume-ui&lt;/a&gt;. This app lists all clients connected to a server and allows you to control individually the volume of each client. Once installed, you can use any mobile device, laptop, desktop, or browser.&lt;/p&gt; &#xA;&lt;p&gt;There is also an &lt;a href=&#34;https://forum.fhem.de/index.php/topic,62389.0.html&#34;&gt;unofficial FHEM module&lt;/a&gt; from @unimatrix27 which integrates a Snapcast controller into the &lt;a href=&#34;https://fhem.de/fhem.html&#34;&gt;FHEM&lt;/a&gt; home automation system.&lt;/p&gt; &#xA;&lt;p&gt;There is a &lt;a href=&#34;https://home-assistant.io/components/media_player.snapcast/&#34;&gt;snapcast component for Home Assistant&lt;/a&gt; which integrates a Snapcast controller in to the &lt;a href=&#34;https://home-assistant.io/&#34;&gt;Home Assistant&lt;/a&gt; home automation system and a &lt;a href=&#34;https://github.com/akamming/domoticz-snapcast&#34;&gt;snapcast python plugin for Domoticz&lt;/a&gt; to integrate a Snapcast controller into the &lt;a href=&#34;https://domoticz.com/&#34;&gt;Domoticz&lt;/a&gt; home automation system.&lt;/p&gt; &#xA;&lt;p&gt;For a web interface in Python, see &lt;a href=&#34;https://github.com/xkonni/snapcastr&#34;&gt;snapcastr&lt;/a&gt;, based on &lt;a href=&#34;https://github.com/happyleavesaoc/python-snapcast&#34;&gt;python-snapcast&lt;/a&gt;. This interface controls client volume and assigns streams to groups.&lt;/p&gt; &#xA;&lt;p&gt;Another web interface running on any device is &lt;a href=&#34;https://github.com/derglaus/snapcast-websockets-ui&#34;&gt;snapcast-websockets-ui&lt;/a&gt;, running entirely in the browser, which needs &lt;a href=&#34;https://github.com/novnc/websockify&#34;&gt;websockify&lt;/a&gt;. No configuration needed; features almost all functions; still needs some tuning for the optics.&lt;/p&gt; &#xA;&lt;p&gt;A web interface called &lt;a href=&#34;https://github.com/mariolukas/HydraPlay&#34;&gt;HydraPlay&lt;/a&gt; integrates Snapcast and multiple Mopidy instances. It is JavaScript based and uses Angular 7. A Snapcast web socket proxy server is needed to connect Snapcast to HydraPlay over web sockets.&lt;/p&gt; &#xA;&lt;p&gt;For Windows, there&#39;s &lt;a href=&#34;https://github.com/stijnvdb88/snap.net&#34;&gt;Snap.Net&lt;/a&gt;, a control client and player. It runs in the tray and lets you adjust client volumes with just a few clicks. The player simplifies setting up snapclient to play your music through multiple Windows sound devices simultaneously: pc speakers, hdmi audio, any usb audio devices you may have, etc. Snap.Net also runs on Android, and has limited support for iOS.&lt;/p&gt; &#xA;&lt;h2&gt;Setup of audio players/server&lt;/h2&gt; &#xA;&lt;p&gt;Snapcast can be used with a number of different audio players and servers, and so it can be integrated into your favorite audio-player solution and make it synced-multiroom capable. The only requirement is that the player&#39;s audio can be redirected into the Snapserver&#39;s fifo &lt;code&gt;/tmp/snapfifo&lt;/code&gt;. In the following configuration hints for &lt;a href=&#34;http://www.musicpd.org/&#34;&gt;MPD&lt;/a&gt; and &lt;a href=&#34;https://www.mopidy.com/&#34;&gt;Mopidy&lt;/a&gt; are given, which are base of other audio player solutions, like &lt;a href=&#34;https://volumio.org/&#34;&gt;Volumio&lt;/a&gt; or &lt;a href=&#34;http://www.runeaudio.com/&#34;&gt;RuneAudio&lt;/a&gt; (both MPD) or &lt;a href=&#34;http://www.pimusicbox.com/&#34;&gt;Pi MusicBox&lt;/a&gt; (Mopidy).&lt;/p&gt; &#xA;&lt;p&gt;The goal is to build the following chain:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;audio player software -&amp;gt; snapfifo -&amp;gt; snapserver -&amp;gt; network -&amp;gt; snapclient -&amp;gt; alsa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/player_setup.md&#34;&gt;guide&lt;/a&gt; shows how to configure different players/audio sources to redirect their audio signal into the Snapserver&#39;s fifo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/player_setup.md#mpd&#34;&gt;MPD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/player_setup.md#mopidy&#34;&gt;Mopidy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/player_setup.md#ffmpeg&#34;&gt;FFmpeg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/player_setup.md#mpv&#34;&gt;mpv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/player_setup.md#mplayer&#34;&gt;MPlayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/player_setup.md#alsa&#34;&gt;Alsa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/player_setup.md#pulseaudio&#34;&gt;PulseAudio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/player_setup.md#airplay&#34;&gt;AirPlay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/player_setup.md#spotify&#34;&gt;Spotify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/player_setup.md#process&#34;&gt;Process&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/player_setup.md#line-in&#34;&gt;Line-in&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/badaix/snapcast/develop/doc/player_setup.md#vlc&#34;&gt;VLC&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Unordered list of features that should make it into the v1.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Remote control&lt;/strong&gt; JSON-RPC API to change client latency, volume, zone,...&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Android client&lt;/strong&gt; JSON-RPC client and Snapclient&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Streams&lt;/strong&gt; Support multiple streams&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Debian packages&lt;/strong&gt; prebuild deb packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Endian&lt;/strong&gt; independent code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;OpenWrt&lt;/strong&gt; port Snapclient to OpenWrt&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Hi-Res audio&lt;/strong&gt; support (like 96kHz 24bit)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Groups&lt;/strong&gt; support multiple Groups of clients (&#34;Zones&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Ports&lt;/strong&gt; Snapclient for Windows, Mac OS X,...&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;JSON-RPC&lt;/strong&gt; Possibility to add, remove, rename streams&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Protocol specification&lt;/strong&gt; Snapcast binary streaming protocol, JSON-RPC protocol&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>