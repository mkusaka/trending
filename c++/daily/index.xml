<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T01:29:40Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chaitin/SafeLine</title>
    <updated>2023-08-27T01:29:40Z</updated>
    <id>tag:github.com,2023-08-27:/chaitin/SafeLine</id>
    <link href="https://github.com/chaitin/SafeLine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一款足够简单、足够好用、足够强的免费 WAF。基于业界领先的语义引擎检测技术，作为反向代理接入，保护你的网站不受黑客攻击。&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://waf-ce.chaitin.cn/images/403.svg?sanitize=true&#34; width=&#34;120&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;雷池 - 广受好评的社区 WAF&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/SafeLine-BEST_WAF-blue&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/chaitin/safeline.svg?color=blue&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release-date/chaitin/safeline.svg?color=blue&amp;amp;label=update&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/v/chaitin/safeline-mgt-api?color=blue&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/chaitin/safeline?style=social&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://waf-ce.chaitin.cn/&#34;&gt;官方网站&lt;/a&gt; | &lt;a href=&#34;https://demo.waf-ce.chaitin.cn:9443/dashboard&#34;&gt;在线 Demo&lt;/a&gt; | &lt;a href=&#34;https://waf-ce.chaitin.cn/posts/guide_introduction&#34;&gt;技术文档&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/chaitin/SafeLine/main/README_EN.md&#34;&gt;For English&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;一款足够简单、足够好用、足够强的免费 WAF。基于业界领先的语义引擎检测技术，作为反向代理接入，保护你的网站不受黑客攻击。&lt;/p&gt; &#xA;&lt;p&gt;核心检测能力由智能语义分析算法驱动，专为社区而生，不让黑客越雷池半步。&lt;/p&gt; &#xA;&lt;img src=&#34;https://waf-ce.chaitin.cn/images/album/0.png&#34;&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;相关源码仓库&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/chaitin/yanshi&#34;&gt;语义分析自动机引擎&lt;/a&gt; | &lt;a href=&#34;https://github.com/chaitin/safeline-open-platform&#34;&gt;流量分析插件&lt;/a&gt; | &lt;a href=&#34;https://github.com/chaitin/lua-resty-t1k&#34;&gt;T1K 协议&lt;/a&gt; | &lt;a href=&#34;https://github.com/chaitin/blazehttp&#34;&gt;测试工具&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;相关特性&lt;/h2&gt; &#xA;&lt;h4&gt;便捷性&lt;/h4&gt; &#xA;&lt;p&gt;采用容器化部署，一条命令即可完成安装，0 成本上手。安全配置开箱即用，无需人工维护，可实现安全躺平式管理。&lt;/p&gt; &#xA;&lt;h4&gt;安全性&lt;/h4&gt; &#xA;&lt;p&gt;首创业内领先的智能语义分析算法，精准检测、低误报、难绕过。语义分析算法无规则，面对未知特征的 0day 攻击不再手足无措。&lt;/p&gt; &#xA;&lt;h4&gt;高性能&lt;/h4&gt; &#xA;&lt;p&gt;无规则引擎，线性安全检测算法，平均请求检测延迟在 1 毫秒级别。并发能力强，单核轻松检测 2000+ TPS，只要硬件足够强，可支撑的流量规模无上限。&lt;/p&gt; &#xA;&lt;h4&gt;高可用&lt;/h4&gt; &#xA;&lt;p&gt;流量处理引擎基于 Nginx 开发，性能与稳定性均可得到保障。内置完善的健康检查机制，服务可用性高达 99.99%。&lt;/p&gt; &#xA;&lt;h2&gt;🚀 安装&lt;/h2&gt; &#xA;&lt;h3&gt;配置需求&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;操作系统：Linux&lt;/li&gt; &#xA; &lt;li&gt;指令架构：x86_64&lt;/li&gt; &#xA; &lt;li&gt;软件依赖：Docker 20.10.6 版本以上&lt;/li&gt; &#xA; &lt;li&gt;软件依赖：Docker Compose 2.0.0 版本以上&lt;/li&gt; &#xA; &lt;li&gt;最小化环境：1 核 CPU / 1 GB 内存 / 10 GB 磁盘&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;一键安装&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash -c &#34;$(curl -fsSLk https://waf-ce.chaitin.cn/release/latest/setup.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;更多安装方式请参考 &lt;a href=&#34;https://waf-ce.chaitin.cn/posts/guide_install&#34;&gt;安装雷池&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🕹️ 快速使用&lt;/h2&gt; &#xA;&lt;h3&gt;登录&lt;/h3&gt; &#xA;&lt;p&gt;浏览器打开后台管理页面 &lt;code&gt;https://&amp;lt;waf-ip&amp;gt;:9443&lt;/code&gt;。根据界面提示，使用 &lt;strong&gt;支持 TOTP 的认证软件&lt;/strong&gt; 扫描二维码，然后输入动态口令登录：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://waf-ce.chaitin.cn/images/gif/login.gif&#34; alt=&#34;login.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;配置防护站点&lt;/h3&gt; &#xA;&lt;p&gt;雷池以反向代理方式接入，优先于网站服务器接收流量，对流量中的攻击行为进行检测和清洗，将清洗过后的流量转发给网站服务器。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://waf-ce.chaitin.cn/images/gif/config_site.gif&#34; alt=&#34;config.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;font color=&#34;grey&#34;&gt;💡 TIPS: 添加后，执行 &lt;code&gt;curl -H &#34;Host: &amp;lt;域名&amp;gt;&#34; http://&amp;lt;WAF IP&amp;gt;:&amp;lt;端口&amp;gt;&lt;/code&gt; 应能获取到业务网站的响应。&lt;/font&gt;&lt;/p&gt; &#xA;&lt;h3&gt;测试效果&lt;/h3&gt; &#xA;&lt;p&gt;使用以下方式尝试模拟黑客攻击，看看雷池的防护效果如何&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;浏览器访问 &lt;code&gt;http://&amp;lt;IP或域名&amp;gt;:&amp;lt;端口&amp;gt;/?id=1%20AND%201=1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;浏览器访问 &lt;code&gt;http://&amp;lt;IP或域名&amp;gt;:&amp;lt;端口&amp;gt;/?a=&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://waf-ce.chaitin.cn/images/gif/detect_log.gif&#34; alt=&#34;log.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果你需要进行深度测试，请参考 &lt;a href=&#34;https://waf-ce.chaitin.cn/posts/guide_test&#34;&gt;测试防护效果&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://waf-ce.chaitin.cn/posts/faq_install&#34;&gt;安装问题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://waf-ce.chaitin.cn/posts/faq_login&#34;&gt;登录问题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://waf-ce.chaitin.cn/posts/faq_access&#34;&gt;网站无法访问&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://waf-ce.chaitin.cn/posts/faq_config&#34;&gt;配置问题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://waf-ce.chaitin.cn/posts/faq_other&#34;&gt;其他问题&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🏘️ 联系我们&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;可以通过 GitHub Issue 直接进行 Bug 反馈和功能建议&lt;/li&gt; &#xA; &lt;li&gt;可以扫描下方二维码加入雷池社区版用户讨论群&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://waf-ce.chaitin.cn/images/wechat-230825.png&#34; width=&#34;30%&#34;&gt; &#xA;&lt;h2&gt;Star History &lt;a name=&#34;star-history&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/chaitin/safeline/stargazers&#34;&gt; &lt;img width=&#34;500&#34; alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=chaitin/safeline&amp;amp;type=Date&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>goldendict/goldendict</title>
    <updated>2023-08-27T01:29:40Z</updated>
    <id>tag:github.com,2023-08-27:/goldendict/goldendict</id>
    <link href="https://github.com/goldendict/goldendict" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A feature-rich dictionary lookup program, supporting multiple dictionary formats (StarDict/Babylon/Lingvo/Dictd) and online dictionaries, featuring perfect article rendering with the complete markup, illustrations and other content retained, and allowing you to type in words without any accents or correct case.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;b&gt;GoldenDict&lt;/b&gt; is a feature-rich dictionary lookup program, supporting multiple dictionary formats (StarDict/Babylon/Lingvo/Dictd/AARD/MDict/SDict) and online dictionaries, featuring perfect article rendering with the complete markup, illustrations and other content retained, and allowing you to type in words without any accents or correct case.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This code has been run and tested on Windows XP/Vista/7, Ubuntu Linux, Mac OS X.&lt;/p&gt; &#xA;&lt;h3&gt;External Deps&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make, GCC, Git&lt;/li&gt; &#xA; &lt;li&gt;Qt framework. Minimum required version is 4.6. But Qt 4.7 or 4.8 is recommended.&lt;/li&gt; &#xA; &lt;li&gt;Qt Creator IDE is recommended for development&lt;/li&gt; &#xA; &lt;li&gt;Various libraries on Linux (png, zlib, etc)&lt;/li&gt; &#xA; &lt;li&gt;On Mac and Windows all the libraries are already included in the repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installing External Deps on Ubuntu Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install git pkg-config build-essential qt4-qmake \&#xA;     libvorbis-dev zlib1g-dev libhunspell-dev x11proto-record-dev \&#xA;     libqt4-dev libqtwebkit-dev libxtst-dev liblzo2-dev libbz2-dev \&#xA;     libao-dev libavutil-dev libavformat-dev libtiff5-dev libeb16-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing External Deps on Ubuntu Linux for Qt5&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install git pkg-config build-essential qt5-qmake \&#xA;     libvorbis-dev zlib1g-dev libhunspell-dev x11proto-record-dev \&#xA;     qtdeclarative5-dev libxtst-dev liblzo2-dev libbz2-dev \&#xA;     libao-dev libavutil-dev libavformat-dev libtiff5-dev libeb16-dev \&#xA;     libqt5webkit5-dev libqt5svg5-dev libqt5x11extras5-dev qttools5-dev \&#xA;     qttools5-dev-tools qtmultimedia5-dev libqt5multimedia5-plugins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;First, clone this repository, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/goldendict/goldendict.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then invoke &lt;code&gt;qmake-qt4&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd goldendict &amp;amp;&amp;amp; qmake-qt4 &amp;amp;&amp;amp; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case when &lt;code&gt;qmake-qt4&lt;/code&gt; does not exist, try using &lt;code&gt;qmake&lt;/code&gt; but make sure it is indeed from the Qt 4 installation. On the other hand, if you want to use &lt;code&gt;qt5&lt;/code&gt;, make sure that &lt;code&gt;qmake&lt;/code&gt; is from Qt 5 installation. If not, you can try finding it at a path like &lt;code&gt;/usr/lib/x86_64-linux-gnu/qt5/bin/qmake&lt;/code&gt;. Alternatively, you might want to load &lt;code&gt;goldendict.pro&lt;/code&gt; file from within Qt Creator, especially on Windows.&lt;/p&gt; &#xA;&lt;p&gt;Note: To compile with &lt;code&gt;libhunspell&lt;/code&gt; older than 1.5 pass &lt;code&gt;&#34;CONFIG+=old_hunspell&#34;&lt;/code&gt; to &lt;code&gt;qmake&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building with Chinese conversion support&lt;/h3&gt; &#xA;&lt;p&gt;To add Chinese conversion support you need at first install libopencc-dev package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install libopencc-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then pass &lt;code&gt;&#34;CONFIG+=chinese_conversion_support&#34;&lt;/code&gt; to &lt;code&gt;qmake&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;qmake &#34;CONFIG+=chinese_conversion_support&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building with Zim dictionaries support&lt;/h3&gt; &#xA;&lt;p&gt;To add Zim and Slob formats support you need at first install lzma-dev and zstd-dev packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install liblzma-dev libzstd-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then pass &lt;code&gt;&#34;CONFIG+=zim_support&#34;&lt;/code&gt; to &lt;code&gt;qmake&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;qmake &#34;CONFIG+=zim_support&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building without extra tiff handler&lt;/h3&gt; &#xA;&lt;p&gt;If you have problem building with libtiff5-dev package, you can pass &lt;code&gt;&#34;CONFIG+=no_extra_tiff_handler&#34;&lt;/code&gt; to &lt;code&gt;qmake&lt;/code&gt; in order to disable extra tiff support (without such extra support some b/w tiff images will not be displayed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;qmake &#34;CONFIG+=no_extra_tiff_handler&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building without Epwing format support&lt;/h3&gt; &#xA;&lt;p&gt;If you have problem building with libeb-dev package, you can pass &lt;code&gt;&#34;CONFIG+=no_epwing_support&#34;&lt;/code&gt; to &lt;code&gt;qmake&lt;/code&gt; in order to disable Epwing format support&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;qmake &#34;CONFIG+=no_epwing_support&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building without internal audio players&lt;/h3&gt; &#xA;&lt;p&gt;If you have problem building with FFmpeg/libao (for example, Ubuntu older than 12.04), you can pass &lt;code&gt;&#34;CONFIG+=no_ffmpeg_player&#34;&lt;/code&gt; to &lt;code&gt;qmake&lt;/code&gt; in order to disable FFmpeg+libao internal audio player back end:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;qmake &#34;CONFIG+=no_ffmpeg_player&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have problem building with Qt5 Multimedia or experience GStreamer run-time errors (for example, Ubuntu 14.04), you can pass &lt;code&gt;&#34;CONFIG+=no_qtmultimedia_player&#34;&lt;/code&gt; to &lt;code&gt;qmake&lt;/code&gt; in order to disable Qt Multimedia internal audio player back end:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;qmake &#34;CONFIG+=no_qtmultimedia_player&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;NB:&lt;/b&gt; All additional settings for &lt;code&gt;qmake&lt;/code&gt; that you need must be combined in one &lt;code&gt;qmake&lt;/code&gt; launch, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;qmake &#34;CONFIG+=zim_support&#34; &#34;CONFIG+=no_extra_tiff_handler&#34; &#34;CONFIG+=no_ffmpeg_player&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, invoke &lt;code&gt;make clean&lt;/code&gt; before &lt;code&gt;make&lt;/code&gt; because the setting change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make clean &amp;amp;&amp;amp; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building under Windows with MS Visual Studio&lt;/h3&gt; &#xA;&lt;p&gt;To build GoldenDict with Visual Studio take one of next library packs and unpack it to &lt;code&gt;&#34;winlibs/lib/msvc&#34;&lt;/code&gt; folder in GoldenDict sources folder.&lt;br&gt; &lt;a href=&#34;http://www.mediafire.com/file/3il4vr1l8299nxn/GoldenDict_libs_VS2013_x86_v4.7z&#34;&gt;GoldenDict_libs_VS2013_x86_v4.7z&lt;/a&gt; - for MS Visual Studio 2013, 32 bit&lt;br&gt; &lt;a href=&#34;http://www.mediafire.com/file/2itgg8bafppg6lw/GoldenDict_libs_VS2013_x64_v4.7z&#34;&gt;GoldenDict_libs_VS2013_x64_v4.7z&lt;/a&gt; - for MS Visual Studio 2013, 64 bit&lt;br&gt; &lt;a href=&#34;http://www.mediafire.com/file/0a7ygy9rn99oevm/GoldenDict_libs_VS2015_x86_v4.7z&#34;&gt;GoldenDict_libs_VS2015_x86_v4.7z&lt;/a&gt; - for MS Visual Studio 2015, 32 bit&lt;br&gt; &lt;a href=&#34;http://www.mediafire.com/file/yoy2q8af0s1467m/GoldenDict_libs_VS2015_x64_v4.7z&#34;&gt;GoldenDict_libs_VS2015_x64_v4.7z&lt;/a&gt; - for MS Visual Studio 2015, 64 bit&lt;/p&gt; &#xA;&lt;p&gt;To create project files for Visual Studio you can pass &lt;code&gt;&#34;-tp vc&#34;&lt;/code&gt; option to &lt;code&gt;qmake&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: In Qt 5.6.0 and later the &lt;code&gt;Webkit&lt;/code&gt; module was removed from official release builds. You should build it from sources to compile GoldenDict.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Installation is an optional step since the built binary can be used as-is without installation. But you can properly install via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;NB:&lt;/b&gt; Don&#39;t do that on Windows!&lt;/p&gt; &#xA;&lt;p&gt;You can uninstall via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;b&gt;GNU GPLv3+&lt;/b&gt; license, a copy of which can be found in the &lt;code&gt;LICENSE.txt&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Users looking for support should file an issue in the official &lt;a href=&#34;https://github.com/goldendict/goldendict/issues&#34;&gt;GoldenDict issue tracker&lt;/a&gt;, or even better: submit a &lt;a href=&#34;https://github.com/goldendict/goldendict/pulls&#34;&gt;pull request&lt;/a&gt; if you have a fix available. General questions should be asked on the &lt;a href=&#34;http://goldendict.org/forum/&#34;&gt;official GoldenDict forum&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>