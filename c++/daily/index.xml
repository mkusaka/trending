<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-28T01:31:53Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/orbit</title>
    <updated>2022-10-28T01:31:53Z</updated>
    <id>tag:github.com,2022-10-28:/google/orbit</id>
    <link href="https://github.com/google/orbit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C/C++ Performance Profiler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ORBIT&lt;/h1&gt; &#xA;&lt;img alt=&#34;ORBIT Logo&#34; src=&#34;https://raw.githubusercontent.com/google/orbit/main/logos/orbit_logo_simple.png&#34; align=&#34;right&#34; width=&#34;520&#34;&gt; &#xA;&lt;p&gt;Orbit, the &lt;strong&gt;O&lt;/strong&gt;pen &lt;strong&gt;R&lt;/strong&gt;untime &lt;strong&gt;B&lt;/strong&gt;inary &lt;strong&gt;I&lt;/strong&gt;nstrumentation &lt;strong&gt;T&lt;/strong&gt;ool is a standalone &lt;strong&gt;native&lt;/strong&gt; application profiler for Windows and Linux. It supports native applications written in languages such as C, C++, Rust, or Go. Its main purpose is to help developers identify the performance bottlenecks of a complex application. Orbit can be also used to visualize the execution flow of such applications.&lt;/p&gt; &#xA;&lt;p&gt;The key differentiator with many existing tools is that no alteration to the target process is necessary. Orbit does not require you to change a single line of code. It doesn&#39;t require you to recompile or even relaunch the application you want to profile. Everything is done seamlessly, right when you need it. It requires zero integration time and zero iteration time.&lt;/p&gt; &#xA;&lt;p&gt;Orbit combines sampling and dynamic instrumentation to optimize the profiling workflow. Sampling can quickly identify interesting functions to instrument. Dynamic instrumentation results in exact function entry and exit information which is presented in the form of per-thread hierarchical call graphs. Manual instrumentation markers can be added to the source code and further allows for value-tracking. Scheduling events are also shown to visualize when a thread was running and on what core. Furthermore, Orbit visualizes thread dependencies, showing which thread got blocked or unblocked by which other thread. For AMD GPUs, the submission, scheduling and hardware execution timings of a job is visualized. Additional GPU data, such as Vulkan debug markers can be retrieved using Orbit&#39;s Vulkan layer. Memory consumption and page-fault information is visualized as well.&lt;/p&gt; &#xA;&lt;p&gt;An introduction to Orbit&#39;s key features can be found in the following YouTube video: &lt;a href=&#34;https://www.youtube.com/watch?v=8V-EPBPGZPs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/orbit/main/logos/orbit_presentation_youtube.png&#34; alt=&#34;Orbit Presentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dynamic Instrumentation (no code change required)&lt;/li&gt; &#xA; &lt;li&gt;Callstack Sampling&lt;/li&gt; &#xA; &lt;li&gt;Wine/Proton Mixed-Callstack Profiling&lt;/li&gt; &#xA; &lt;li&gt;Thread Scheduling and Dependency Tracing&lt;/li&gt; &#xA; &lt;li&gt;Memory Tracing&lt;/li&gt; &#xA; &lt;li&gt;GPU Driver Tracepoints (AMD only)&lt;/li&gt; &#xA; &lt;li&gt;Vulkan Debug Label and Command Buffer Tracing (AMD only)&lt;/li&gt; &#xA; &lt;li&gt;Manual Instrumentation&lt;/li&gt; &#xA; &lt;li&gt;Source Code and Disassembly View&lt;/li&gt; &#xA; &lt;li&gt;Remote Profiling&lt;/li&gt; &#xA; &lt;li&gt;Debug Symbol Parsing (ELF, DWARF, PE and PDB)&lt;/li&gt; &#xA; &lt;li&gt;Full Serialization of Captured Data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;Orbit&#39;s focus has shifted to the Linux version. Windows local profiling is currently only supported partially and major features, such as dynamic instrumentation, are not yet implemented. It is possible however to profile Linux executables from a Windows UI instance. For Windows local profiling, please use the released &lt;a href=&#34;https://github.com/google/orbit/releases&#34;&gt;binaries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Please have a look at the first three sections of our &lt;a href=&#34;https://raw.githubusercontent.com/google/orbit/main/DEVELOPMENT.md&#34;&gt;development documentation&lt;/a&gt;. It describes how to build Orbit and what Compilers, Platforms, and Tools are supported and needed.&lt;/p&gt; &#xA;&lt;h2&gt;Workflow&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; An extensive documentation of the usage of Orbit can be found in our &lt;a href=&#34;https://raw.githubusercontent.com/google/orbit/main/documentation/DOCUMENTATION.md&#34;&gt;usage documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The following describes the basic workflow of Orbit:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Select a process in the list of currently running processes in the connection setup dialog, and click &lt;strong&gt;Start Session&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The list of loaded modules will appear at the top of the &lt;strong&gt;Symbols&lt;/strong&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Orbit tries to automatically retrieve debug information of the modules. See &lt;a href=&#34;https://raw.githubusercontent.com/google/orbit/main/documentation/DOCUMENTATION.md#load-symbols&#34;&gt;here&lt;/a&gt; on how to load symbols for modules Orbit failed to load. For successfully loaded module symbols, the &lt;strong&gt;Functions&lt;/strong&gt; tab will get populated.&lt;/li&gt; &#xA; &lt;li&gt;Select functions you wish to dynamically instrument in the &lt;strong&gt;Functions&lt;/strong&gt; tab by &lt;kbd&gt;Right-Click&lt;/kbd&gt; and choosing &lt;strong&gt;Hook&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Start profiling by pressing &lt;kbd&gt;F5&lt;/kbd&gt;. To stop profiling, press &lt;kbd&gt;F5&lt;/kbd&gt; again. You can either zoom time using &lt;kbd&gt;W&lt;/kbd&gt; and &lt;kbd&gt;S&lt;/kbd&gt; or &lt;kbd&gt;Ctrl&lt;/kbd&gt; + the scroll wheel. You can also &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Right-Click&lt;/kbd&gt; and drag to zoom to a specific time range. To scale the UI, press &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;+&lt;/kbd&gt;/&lt;kbd&gt;-&lt;/kbd&gt;. Press &lt;kbd&gt;SPACE&lt;/kbd&gt; to see the last 2 seconds of capture.&lt;/li&gt; &#xA; &lt;li&gt;You can select sections of the per-thread sampling event track to get a sampling report of your selection.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Presets&lt;/h2&gt; &#xA;&lt;p&gt;Once you have loaded the debug information for your modules and have chosen functions of interest to dynamically instrument, you can save your profiling preset so that you won&#39;t have to do this manually again. To save a preset, go to &lt;strong&gt;File&lt;/strong&gt; &amp;gt; &lt;strong&gt;Save Preset&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Feedback&lt;/h3&gt; &#xA;&lt;p&gt;Questions and comments are more than welcome: please open an &lt;a href=&#34;https://github.com/google/orbit/issues/new&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Orbit was created by &lt;a href=&#34;https://www.linkedin.com/in/pgimmig/&#34;&gt;Pierric Gimmig&lt;/a&gt;, but is now developed and maintained by a team of engineers at Google. The current maintainers are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akopich&#34;&gt;@akopich&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antonrohr&#34;&gt;@antonrohr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/beckerhe&#34;&gt;@beckerhe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danielfenner&#34;&gt;@danielfenner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dimitry-&#34;&gt;@dimitry-&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dpallotti&#34;&gt;@dpallotti&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/florian-kuebler&#34;&gt;@florian-kuebler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/karupayun&#34;&gt;@karupayun&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pierricgimmig&#34;&gt;@pierricgimmig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/reichlfl&#34;&gt;@reichlfl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ronaldfw&#34;&gt;@ronaldfw&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vickyliu-go4it&#34;&gt;@vickyliu-go4it&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vwbaker&#34;&gt;@vwbaker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/orbit/main/LICENSE&#34;&gt;License (BSD 2-clause)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;http://opensource.org/licenses/BSD-2-Clause&#34; target=&#34;_blank&#34;&gt; &lt;img style=&#34;float: right&#34; src=&#34;http://opensource.org/trademarks/opensource/OSI-Approved-License-100x137.png&#34; alt=&#34;OSI Approved License&#34;&gt; &lt;/a&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Copyright (c) 2020 The Orbit Authors. All rights reserved.&#xA;&#xA;BSD 2-Clause License&#xA;&#xA;Redistribution and use in source and binary forms, with or without&#xA;modification, are permitted provided that the following conditions are met:&#xA;&#xA;* Redistributions of source code must retain the above copyright notice, this&#xA;  list of conditions and the following disclaimer.&#xA;&#xA;* Redistributions in binary form must reproduce the above copyright notice,&#xA;  this list of conditions and the following disclaimer in the documentation&#xA;  and/or other materials provided with the distribution.&#xA;&#xA;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34;&#xA;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE&#xA;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE&#xA;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE&#xA;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL&#xA;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#xA;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER&#xA;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,&#xA;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xA;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>citizenfx/fivem</title>
    <updated>2022-10-28T01:31:53Z</updated>
    <id>tag:github.com,2022-10-28:/citizenfx/fivem</id>
    <link href="https://github.com/citizenfx/fivem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The source code for the Cfx.re modification frameworks, such as FiveM, RedM and LibertyM, as well as FXServer.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.6/assets/png/1f40c.png&#34; width=&#34;32&#34; height=&#34;32&#34;&gt; Cfx.re (FiveM/RedM)&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the code for the Cfx.re projects, among which are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fivem.net/&#34;&gt;FiveM&lt;/a&gt;, a dual-purpose (SP/MP) modification framework for the PC version of Grand Theft Auto V as released by Rockstar Games.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redm.gg/&#34;&gt;RedM&lt;/a&gt;, a modification framework for the PC version of Red Dead Redemption 2 as released by Rockstar Games.&lt;/li&gt; &#xA; &lt;li&gt;FXServer, the server component for multiplayer services on the Cfx.re projects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On the multiplayer aspect, the GTA/RAGE modifications differ from other similar modifications by utilizing the embedded game networking frameworks, building a modification framework around them, and expanding the game&#39;s functionality on an end-to-end level, directly binding to the RAGE Technology Group&#39;s base frameworks and Rockstar North&#39;s GTA codebase.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;To play FiveM, simply download the launcher binaries from the &lt;a href=&#34;https://fivem.net&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To develop FiveM, please follow the documentation in &lt;a href=&#34;https://github.com/citizenfx/fivem/tree/master/docs&#34;&gt;docs/&lt;/a&gt; in the repository.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;FiveM is licensed under a dual license, details of which are in the &lt;a href=&#34;https://github.com/citizenfx/fivem/raw/master/code/LICENSE&#34;&gt;code/LICENSE&lt;/a&gt; file in the repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>YimMenu/YimMenu</title>
    <updated>2022-10-28T01:31:53Z</updated>
    <id>tag:github.com,2022-10-28:/YimMenu/YimMenu</id>
    <link href="https://github.com/YimMenu/YimMenu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;YimMenu, a GTA V menu oriented at protecting from crashes (not all currently) and improving the overall experience.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;YimMenu made possible by &lt;a href=&#34;https://github.com/Pocakking/BigBaseV2&#34;&gt;BigBaseV2&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?color=ffab00&amp;amp;label=Online%20Version&amp;amp;query=%24.game.online&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2FYimMenu%2FYimMenu%2Fmaster%2Fmetadata.json&amp;amp;style=flat-square&amp;amp;labelColor=000000&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/dynamic/json?color=ffab00&amp;amp;label=Game%20Build&amp;amp;query=%24.game.build&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2FYimMenu%2FYimMenu%2Fmaster%2Fmetadata.json&amp;amp;style=flat-square&amp;amp;labelColor=000000&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A mod menu base for Grand Theft Auto V. Strictly for educational purposes.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#how-to-build&#34;&gt;How to build&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#git&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#premake5&#34;&gt;Premake5&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#cloning-and-generating-project-files&#34;&gt;Cloning and generating project files&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#staying-up-to-date&#34;&gt;Staying Up To Date&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#project-structure&#34;&gt;Project Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#git&#34;&gt;git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#premake5&#34;&gt;premake5&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have both of the above requirements you can skip to &lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#cloning-and-generating-project-files&#34;&gt;cloning the git repo and generating the project files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Git&lt;/h3&gt; &#xA;&lt;p&gt;If you haven&#39;t installed git on your system go and do so it is &lt;strong&gt;REQUIRED&lt;/strong&gt; for setting up a working build environment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Download Link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Premake5&lt;/h3&gt; &#xA;&lt;p&gt;Premake5 is used to generate our project files, if you haven&#39;t used it before we will need to download and add it to our &lt;a href=&#34;https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/&#34;&gt;System Path&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://premake.github.io/download/&#34;&gt;Download Link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cloning and generating project files&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repository including submodules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/YimMenu/YimMenu.git --recursive || echo &#34;You don&#39;t have git installed, install it from https://git-scm.com/download/win&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go into the directory you just cloned:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd YimMenu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate project files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GenerateProjects.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you will be able to open the solution, and simply build it in Visual Studio.&lt;/p&gt; &#xA;&lt;h2&gt;Staying Up To Date&lt;/h2&gt; &#xA;&lt;p&gt;Pull the latest changes from Github:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git pull &amp;amp;&amp;amp; git submodule update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure your Visual Studio is closed and regenerate project files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GenerateProjects.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;api/&lt;/code&gt; contains some basic example of how I&#39;d make REST api calls&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;backend/&lt;/code&gt; all features that should be ran in a loop are in here sorted by category&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gui/&lt;/code&gt; includes everything related to UI elements&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hooks/&lt;/code&gt; function hooks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;native_hooks/&lt;/code&gt; hooks to natives, currently not implemented&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;services/&lt;/code&gt; service files to interact and maintain stuff&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;util/&lt;/code&gt; general utility functions to keep code as compact and as much in one place as possible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Below is an incomplete list of feature that I believe are notable to this &#34;base&#34; or menu.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Return Native spoofing&lt;/li&gt; &#xA; &lt;li&gt;Custom &lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/BigBaseV2/src/core/globals.hpp&#34;&gt;settings&lt;/a&gt; with deep compare if changes were made include auto saving&lt;/li&gt; &#xA; &lt;li&gt;Clear and well structured source code&lt;/li&gt; &#xA; &lt;li&gt;Includes a thread pool to queue tasks that shouldn&#39;t block the game thread, very similar to fiber pool&lt;/li&gt; &#xA; &lt;li&gt;Updated natives.hpp from &lt;a href=&#34;https://nativedb.pieceof.art/natives&#34;&gt;https://nativedb.pieceof.art/natives&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Includes basic code samples to interact with an api&lt;/li&gt; &#xA; &lt;li&gt;ReClass.NET structures implemented, accessible from a global called g_local_player defined in &lt;code&gt;common.hpp&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;re free to contribute to YimMenu as long as the feature are useful, non-toxic and do not contain anything money related that might get the menu targetted by Take2.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to read the &lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
</feed>