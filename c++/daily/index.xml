<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-03T01:34:55Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>x64dbg/x64dbg</title>
    <updated>2022-10-03T01:34:55Z</updated>
    <id>tag:github.com,2022-10-03:/x64dbg/x64dbg</id>
    <link href="https://github.com/x64dbg/x64dbg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source x64/x32 debugger for windows.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;x64dbg&lt;/h1&gt; &#xA;&lt;img width=&#34;100&#34; src=&#34;https://github.com/x64dbg/x64dbg/raw/development/src/bug_black.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/mrexodia&#34;&gt;&lt;img src=&#34;https://www.bountysource.com/badge/team?team_id=18188&amp;amp;style=raised&#34; alt=&#34;BountySource&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/mrexodia/x64dbg&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/h1j489qa1mx67e0h?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/x64dbg/x64dbg&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/x64dbg/x64dbg/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://translate.x64dbg.com&#34;&gt;&lt;img src=&#34;https://d322cqt584bo4o.cloudfront.net/x64dbg/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourceforge.net/projects/x64dbg/files/latest/download&#34;&gt;&lt;img src=&#34;https://img.shields.io/sourceforge/dm/x64dbg.svg?sanitize=true&#34; alt=&#34;Download x64dbg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://telegram.me/x64dbg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-%20on%20Telegram-blue.svg?sanitize=true&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://invite.gg/x64dbg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20Discord-green.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://x64dbg-slack.herokuapp.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20Slack-red.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/x64dbg/x64dbg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20Gitter-lightseagreen.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://webchat.freenode.net/?channels=x64dbg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-%20on%20freenode-brightgreen.svg?sanitize=true&#34; alt=&#34;Freenode&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://riot.im/app/#/room/#x64dbg:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20Matrix-yellowgreen.svg?sanitize=true&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://inverse.chat/#converse/room?jid=x64dbg@conference.jwchat.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-%20on%20XMPP-orange.svg?sanitize=true&#34; alt=&#34;XMPP&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An open-source binary debugger for Windows, aimed at malware analysis and reverse engineering of executables you do not have the source code for. There are many features available and a comprehensive &lt;a href=&#34;http://plugins.x64dbg.com&#34;&gt;plugin system&lt;/a&gt; to add your own. You can find more information on the &lt;a href=&#34;https://x64dbg.com/blog&#34;&gt;blog&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/V2f5AP9.png&#34; alt=&#34;main interface&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gVjzntJ.png&#34; alt=&#34;graph&#34;&gt; &lt;img src=&#34;https://i.imgur.com/cLJwTjY.png&#34; alt=&#34;memory map&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download a snapshot from &lt;a href=&#34;https://github.com/x64dbg/x64dbg/releases&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://sourceforge.net/projects/x64dbg/files/snapshots&#34;&gt;SourceForge&lt;/a&gt; or &lt;a href=&#34;https://osdn.net/projects/x64dbg&#34;&gt;OSDN&lt;/a&gt; and extract it in a location your user has write access to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Optionally&lt;/em&gt; use &lt;code&gt;x96dbg.exe&lt;/code&gt; to register a shell extension and add shortcuts to your desktop.&lt;/li&gt; &#xA; &lt;li&gt;You can now run &lt;code&gt;x32\x32dbg.exe&lt;/code&gt; if you want to debug a 32-bit executable or &lt;code&gt;x64\x64dbg.exe&lt;/code&gt; to debug a 64-bit executable! If you are unsure you can always run &lt;code&gt;x96dbg.exe&lt;/code&gt; and chose your architecture there.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://github.com/x64dbg/x64dbg/wiki/Compiling-the-whole-project&#34;&gt;compile&lt;/a&gt; x64dbg yourself with a few easy steps!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This is a community effort and we accept pull requests! See the &lt;a href=&#34;https://github.com/x64dbg/x64dbg/raw/development/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document for more information. If you have any questions you can always &lt;a href=&#34;https://x64dbg.com/#contact&#34;&gt;contact us&lt;/a&gt; or open an &lt;a href=&#34;https://github.com/x64dbg/x64dbg/issues&#34;&gt;issue&lt;/a&gt;. You can take a look at the &lt;a href=&#34;https://github.com/x64dbg/x64dbg/issues?q=is%3Aissue+is%3Aopen+label%3Aeasy&#34;&gt;easy issues&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debugger core by &lt;a href=&#34;https://github.com/x64dbg/TitanEngine&#34;&gt;TitanEngine Community Edition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Disassembly powered by &lt;a href=&#34;https://zydis.re&#34;&gt;Zydis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Assembly powered by &lt;a href=&#34;https://github.com/x64dbg/XEDParse&#34;&gt;XEDParse&lt;/a&gt; and &lt;a href=&#34;https://github.com/asmjit&#34;&gt;asmjit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Import reconstruction powered by &lt;a href=&#34;https://github.com/NtQuery/Scylla&#34;&gt;Scylla&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON powered by &lt;a href=&#34;https://www.digip.org/jansson&#34;&gt;Jansson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Database compression powered by &lt;a href=&#34;https://bitbucket.org/mrexodia/lz4&#34;&gt;lz4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bug icon by &lt;a href=&#34;https://www.visualpharm.com&#34;&gt;VisualPharm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interface icons by &lt;a href=&#34;https://p.yusukekamiyamane.com&#34;&gt;Fugue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Website by &lt;a href=&#34;https://tr4ceflow.com&#34;&gt;tr4ceflow&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrexodia.github.io&#34;&gt;mrexodia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sigma&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.tr4ceflow.com&#34;&gt;tr4ceflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fr33project.org&#34;&gt;Dreg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Nukem9&#34;&gt;Nukem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Herz3h&#34;&gt;Herz3h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/torusrxxx&#34;&gt;torusrxxx&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code contributions&lt;/h2&gt; &#xA;&lt;p&gt;You can find an exhaustive list of GitHub contributors &lt;a href=&#34;https://github.com/x64dbg/x64dbg/graphs/contributors&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sigma for developing the initial GUI&lt;/li&gt; &#xA; &lt;li&gt;All the &lt;a href=&#34;https://www.bountysource.com/teams/x64dbg/backers&#34;&gt;donators&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Everybody adding issues!&lt;/li&gt; &#xA; &lt;li&gt;People I forgot to add to this list&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://x64dbg.com/blog/2016/07/09/Looking-for-writers.html&#34;&gt;Writers of the blog&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.exetools.com&#34;&gt;EXETools community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.tuts4you.com&#34;&gt;Tuts4You community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/resharper&#34;&gt;ReSharper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.coverity.com&#34;&gt;Coverity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;acidflash&lt;/li&gt; &#xA; &lt;li&gt;cyberbob&lt;/li&gt; &#xA; &lt;li&gt;cypher&lt;/li&gt; &#xA; &lt;li&gt;Teddy Rogers&lt;/li&gt; &#xA; &lt;li&gt;TEAM DVT&lt;/li&gt; &#xA; &lt;li&gt;DMichael&lt;/li&gt; &#xA; &lt;li&gt;Artic&lt;/li&gt; &#xA; &lt;li&gt;ahmadmansoor&lt;/li&gt; &#xA; &lt;li&gt;_pusher_&lt;/li&gt; &#xA; &lt;li&gt;firelegend&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lifeinhex.com&#34;&gt;kao&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;sstrato&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kobalicek&#34;&gt;kobalicek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/athre0z&#34;&gt;athre0z&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ZehMatt&#34;&gt;ZehMatt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/fearless0&#34;&gt;mrfearless&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Without the help of many people and other open-source projects, it would not have been possible to make x64dbg what is it today, thank you!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bigtreetech/BIGTREETECH-SKR-mini-E3</title>
    <updated>2022-10-03T01:34:55Z</updated>
    <id>tag:github.com,2022-10-03:/bigtreetech/BIGTREETECH-SKR-mini-E3</id>
    <link href="https://github.com/bigtreetech/BIGTREETECH-SKR-mini-E3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BIGTREETECH SKR-mini-E3 motherboard is a ultra-quiet, low-power, high-quality 3D printing machine control board. It is launched by the 3D printing team of Shenzhen BIGTREE technology co., LTD. This board is specially tailored for Ender 3 printer, perfectly replacing the original Ender3 printer motherboard.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BIGTREETECH SKR Mini E3 V1.x and V2.x&lt;/h1&gt; &#xA;&lt;p&gt;BIGTREETECH SKR Mini E3 V1.x and V2.x mainboards are ultra-quiet, low-power, high-quality 3D printing machine controller boards from BIQU.&lt;/p&gt; &#xA;&lt;p&gt;These and other SKR mainboard/motherboard for 3D-printers are produced by the 3D printing team of Shenzhen Bigtree Technology Co., Ltd.&lt;/p&gt; &#xA;&lt;p&gt;The first BIGTREETECH SKR Mini E3 V1.x 32-bit control boards with integrated TMC stepper-drivers was initially specially designed to be a drop-in replacement upgrade board for the Ender 3 printers by Creality, making replacing the original 8-bit mainboard/motherboard hardware used by the very popular Ender-3 3D-printer quick and easy for most users. Software updates have since released also added compatibility for other 3D-printers with a single Z-axis stepping-motor, including support for CR-10, CR-10 Mini, Ender 3 Pro from Creality.&lt;/p&gt; &#xA;&lt;p&gt;BIGTREETECH SKR Mini E3 V2.x has added additional hardware improvements and enhancements based on community feedback. Among other things, these improvements and enhancements with SKR Mini E3 V2.x include two Z-axis interface ports, and SKR Mini E3 V2.x is today, in addition to the 3D-printers already support by the V1.x boards, also compatible with CR-10S, CR-10 S4, CR-10 S5, Ender 5, Ender 5 Pro, and Ender 5 Plus from Creality.&lt;/p&gt; &#xA;&lt;p&gt;Pre-tested Marlin Firmware configuration example files for these 3D-printers with stock is available in an upstream repository here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarlinFirmware/Configurations/&#34;&gt;https://github.com/MarlinFirmware/Configurations/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: If your motherboard version is BTT SKR Mini E3 V1.x, please check the correct BIGTREETECH-SKR-mini-E3 V1.x documents which are located respectively in both the firmware directory and hardware directory with that version. For reference, you can read about main differences between SKR Mini E3 V1.0 and SKR Mini E3 V1.2 in the &lt;a href=&#34;https://github.com/bigtreetech/BIGTREETECH-SKR-mini-E3/raw/master/hardware/BTT%20SKR%20MINI%20E3%20V1.2/The%20Notement%20of%20BTT%20SKR%20MINI%20E3%20V1.2.pdf&#34;&gt;&#34;notement&#34; document for BTT SKR MINI E3 V1.2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note! After refreshing the new firmware, please always restore defaults first and then store settings, the new coordinates used for levelling will take effect, LCD option path: Configuration-&amp;gt; Restore defaults, Configuration-&amp;gt; Store settings.&lt;/p&gt; &#xA;&lt;p&gt;Disclaimer! Marlin firmware needs to be configured aND CUSTOMIZED by the customer themselves, the reason for this is that BIQU / BIGTREETECH does not know the specific hardware configuration of each individual customer and can therefore not support individual configuration of special firmware specific to each customer. BIQU customer service will however if contacted provide configuration suggestions if details on your specific hardware setup are described. Other than e-mailing to &lt;a href=&#34;mailto:support@bigtree-tech.com&#34;&gt;support@bigtree-tech.com&lt;/a&gt; it is recommended to also use the BigTreeTech Facebook group and BigTreeTech Subreddit (Reddit community) channels for support, as well as posting bug-reports and feature-request as &#34;issues&#34; on @bigtreetech GitHub repository for BIGTREETECH-SKR-mini-E3:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bigtreetech/BIGTREETECH-SKR-mini-E3/issues&#34;&gt;https://github.com/bigtreetech/BIGTREETECH-SKR-mini-E3/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.facebook.com/groups/505736576548648&#34;&gt;https://www.facebook.com/groups/505736576548648&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/BIGTREETECH/&#34;&gt;https://www.reddit.com/r/BIGTREETECH/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;18-21th of May - Added BTT SKR Mini E3 v2.0 motherboard firmware and related open source materials.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>LeelaChessZero/lc0</title>
    <updated>2022-10-03T01:34:55Z</updated>
    <id>tag:github.com,2022-10-03:/LeelaChessZero/lc0</id>
    <link href="https://github.com/LeelaChessZero/lc0" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The rewritten engine, originally for tensorflow. Now all other backends have been ported here.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/LeelaChessZero/lc0&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/LeelaChessZero/lc0.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/leelachesszero/lc0&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/3245b83otdee7oj7?svg=true&#34; alt=&#34;AppVeyor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Lc0&lt;/h1&gt; &#xA;&lt;p&gt;Lc0 is a UCI-compliant chess engine designed to play chess via neural network, specifically those of the &lt;a href=&#34;https://lczero.org&#34;&gt;LeelaChessZero project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Downloading source&lt;/h2&gt; &#xA;&lt;p&gt;Lc0 can be acquired either via a git clone or an archive download from GitHub. Be aware that there is a required submodule which isn&#39;t included in source archives.&lt;/p&gt; &#xA;&lt;p&gt;For essentially all purposes, including selfplay game generation and match play, we highly recommend using the latest &lt;code&gt;release/version&lt;/code&gt; branch (for example &lt;code&gt;release/0.28&lt;/code&gt;), which is equivalent to using the latest version tag.&lt;/p&gt; &#xA;&lt;p&gt;Versioning follows the Semantic Versioning guidelines, with major, minor and patch sections. The training server enforces game quality using the versions output by the client and engine.&lt;/p&gt; &#xA;&lt;p&gt;Download using git:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone -b release/0.28 --recurse-submodules https://github.com/LeelaChessZero/lc0.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have cloned already an old version, fetch, view and checkout a new branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git fetch --all&#xA;git branch --all&#xA;git checkout -t remotes/origin/release/0.28&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer to download an archive, you need to also download and place the submodule:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://api.github.com/repos/LeelaChessZero/lc0/zipball/release/0.28&#34;&gt;.zip&lt;/a&gt; file (&lt;a href=&#34;https://api.github.com/repos/LeelaChessZero/lc0/tarball/release/0.28&#34;&gt;.tar.gz&lt;/a&gt; archive is also available)&lt;/li&gt; &#xA; &lt;li&gt;Extract&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/LeelaChessZero/lczero-common/archive/master.zip&#34;&gt;https://github.com/LeelaChessZero/lczero-common/archive/master.zip&lt;/a&gt; (also available as &lt;a href=&#34;https://github.com/LeelaChessZero/lczero-common/archive/master.tar.gz&#34;&gt;.tar.gz&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Move the second archive into the first archive&#39;s &lt;code&gt;libs/lczero-common/&lt;/code&gt; folder and extract&lt;/li&gt; &#xA; &lt;li&gt;The final form should look like &lt;code&gt;&amp;lt;TOP&amp;gt;/libs/lczero-common/proto/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Having successfully acquired Lc0 via either of these methods, proceed to the build section below and follow the instructions for your OS.&lt;/p&gt; &#xA;&lt;h2&gt;Building and running Lc0&lt;/h2&gt; &#xA;&lt;p&gt;Building should be easier now than it was in the past. Please report any problems you have.&lt;/p&gt; &#xA;&lt;p&gt;Aside from the git submodule, lc0 requires the Meson build system and at least one backend library for evaluating the neural network, as well as the required &lt;code&gt;zlib&lt;/code&gt;. (&lt;code&gt;gtest&lt;/code&gt; is optionally used for the test suite.) If your system already has this library installed, they will be used; otherwise Meson will generate its own copy of the two (a &#34;subproject&#34;), which in turn requires that git is installed (yes, separately from cloning the actual lc0 repository). Meson also requires python and Ninja.&lt;/p&gt; &#xA;&lt;p&gt;Backend support includes (in theory) any CBLAS-compatible library for CPU usage, such as OpenBLAS or Intel&#39;s DNNL or MKL. For GPUs, OpenCL and CUDA+cudnn are supported, while DX-12 can be used in Windows 10 with latest drivers.&lt;/p&gt; &#xA;&lt;p&gt;Finally, lc0 requires a compiler supporting C++17. Minimal versions seem to be g++ v8.0, clang v5.0 (with C++17 stdlib) or Visual Studio 2017.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; that cuda checks the compiler version and stops even with newer compilers, and to work around this we have added the &lt;code&gt;nvcc_ccbin&lt;/code&gt; build option. This is more of an issue with new Linux versions, where we recommend to install &lt;code&gt;g++-7&lt;/code&gt; and add &lt;code&gt;-Dnvcc_ccbin=g++-7&lt;/code&gt; to the &lt;code&gt;build.sh&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Given those basics, the OS and backend specific instructions are below.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Generic&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install backend: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you want to use NVidia graphics cards Install &lt;a href=&#34;https://developer.nvidia.com/cuda-zone&#34;&gt;CUDA&lt;/a&gt; and &lt;a href=&#34;https://developer.nvidia.com/cudnn&#34;&gt;cuDNN&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If you want to use AMD graphics cards install OpenCL.&lt;/li&gt; &#xA;   &lt;li&gt;if you want OpenBLAS version Install OpenBLAS (&lt;code&gt;libopenblas-dev&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install ninja build (&lt;code&gt;ninja-build&lt;/code&gt;), meson, and (optionally) gtest (&lt;code&gt;libgtest-dev&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;lc0/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./build.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lc0&lt;/code&gt; will be in &lt;code&gt;lc0/build/release/&lt;/code&gt; directory&lt;/li&gt; &#xA; &lt;li&gt;Unzip a &lt;a href=&#34;https://lczero.org/play/networks/bestnets/&#34;&gt;neural network&lt;/a&gt; in the same directory as the binary.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you want to build with a different compiler, pass the &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;CXX&lt;/code&gt; environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CC=clang-6.0 CXX=clang++-6.0 ./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Note on installing CUDA on Ubuntu&lt;/h4&gt; &#xA;&lt;p&gt;Nvidia provides .deb packages. CUDA will be installed in &lt;code&gt;/usr/local/cuda-10.0&lt;/code&gt; and requires 3GB of diskspace. If your &lt;code&gt;/usr/local&lt;/code&gt; partition doesn&#39;t have that much space left you can create a symbolic link before doing the install; for example: &lt;code&gt;sudo ln -s /opt/cuda-10.0 /usr/local/cuda-10.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The instructions given on the nvidia website tell you to finish with &lt;code&gt;apt install cuda&lt;/code&gt;. However, this might not work (missing dependencies). In that case use &lt;code&gt;apt install cuda-10-0&lt;/code&gt;. Afterwards you can install the meta package &lt;code&gt;cuda&lt;/code&gt; which will cause an automatic upgrade to a newer version when that comes available (assuming you use &lt;code&gt;Installer Type deb (network)&lt;/code&gt;, if you&#39;d want that (just cuda-10-0 will stay at version 10). If you don&#39;t know what to do, only install cuda-10-0.&lt;/p&gt; &#xA;&lt;p&gt;cuDNN exists of two packages, the Runtime Library and the Developer Library (both a .deb package).&lt;/p&gt; &#xA;&lt;p&gt;Before you can download the latter you need to create a (free) &#34;developer&#34; account with nvidia for which at least a legit email address is required (their website says: The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail.). Further they ask for a name, date of birth (not visible later on), country, organisation (&#34;LeelaZero&#34; if you have none), primary industry segment (&#34;Other&#34;/none) and which development areas you are interested in (&#34;Deep Learning&#34;).&lt;/p&gt; &#xA;&lt;h4&gt;Ubuntu 18.04&lt;/h4&gt; &#xA;&lt;p&gt;For Ubuntu 18.04 you need the latest version of meson, libstdc++-8-dev, and clang-6.0 before performing the steps above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install libstdc++-8-dev clang-6.0 ninja-build pkg-config&#xA;pip3 install meson --user&#xA;CC=clang-6.0 CXX=clang++-6.0 INSTALL_PREFIX=~/.local ./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure that &lt;code&gt;~/.local/bin&lt;/code&gt; is in your &lt;code&gt;PATH&lt;/code&gt; environment variable. You can now type &lt;code&gt;lc0 --help&lt;/code&gt; and start.&lt;/p&gt; &#xA;&lt;h4&gt;Ubuntu 16.04&lt;/h4&gt; &#xA;&lt;p&gt;For Ubuntu 16.04 you need the latest version of meson, ninja, clang-6.0, and libstdc++-8:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -&#xA;sudo apt-add-repository &#39;deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main&#39;&#xA;sudo add-apt-repository ppa:ubuntu-toolchain-r/test&#xA;sudo apt-get update&#xA;sudo apt-get install clang-6.0 libstdc++-8-dev&#xA;pip3 install meson ninja --user&#xA;CC=clang-6.0 CXX=clang++-6.0 INSTALL_PREFIX=~/.local ./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure that &lt;code&gt;~/.local/bin&lt;/code&gt; is in your &lt;code&gt;PATH&lt;/code&gt; environment variable. You can now type &lt;code&gt;lc0 --help&lt;/code&gt; and start.&lt;/p&gt; &#xA;&lt;h4&gt;openSUSE (all versions)&lt;/h4&gt; &#xA;&lt;p&gt;Instructions, packages and tools for building on openSUSE are at &lt;a href=&#34;https://raw.githubusercontent.com/LeelaChessZero/lc0/master/openSUSE_install.md&#34;&gt;openSUSE_install.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/vochicong/lc0-docker&#34;&gt;https://github.com/vochicong/lc0-docker&lt;/a&gt; to run latest releases of lc0 and the client inside a Docker container.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Here are the brief instructions for CUDA/CuDNN, for details and other options see &lt;code&gt;windows-build.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Install Microsoft Visual Studio (2017 or later)&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://developer.nvidia.com/cuda-zone&#34;&gt;CUDA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://developer.nvidia.com/cudnn&#34;&gt;cuDNN&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install Python3&lt;/li&gt; &#xA; &lt;li&gt;Install Meson: &lt;code&gt;pip3 install --upgrade meson&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;build.cmd&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set &lt;code&gt;CUDA_PATH&lt;/code&gt; with your CUDA directory&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;code&gt;CUDNN_PATH&lt;/code&gt; with your cuDNN directory (may be the same with CUDA_PATH)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;build.cmd&lt;/code&gt;. It will ask permission to delete the build directory, then generate MSVS project and pause.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Then either:&lt;/p&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Hit &lt;code&gt;Enter&lt;/code&gt; to build it.&lt;/li&gt; &#xA; &lt;li&gt;Resulting binary will be &lt;code&gt;build/lc0.exe&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Or.&lt;/p&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Open generated solution &lt;code&gt;build/lc0.sln&lt;/code&gt; in Visual Studio and build yourself.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Mac&lt;/h3&gt; &#xA;&lt;p&gt;First you need to install some required packages through Terminal:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install brew as per the instructions at &lt;a href=&#34;https://brew.sh/&#34;&gt;https://brew.sh/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install python3: &lt;code&gt;brew install python3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install meson: &lt;code&gt;brew install meson&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install ninja: &lt;code&gt;brew install ninja&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(For Mac OS 10.14 Mojave, or if the other step 5 fails):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install developer tools: &lt;code&gt;xcode-select --install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;When using Mojave install SDK headers: &lt;code&gt;installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /&lt;/code&gt; (if this doesn&#39;t work, use &lt;code&gt;sudo installer&lt;/code&gt; instead of just &lt;code&gt;installer&lt;/code&gt;.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Or.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;(For MacOS 10.15 Catalina, or if the other step 5 fails):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Xcode command-line tools: &lt;code&gt;xcode-select --install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &#34;XCode Developer Tools&#34; through the app store. (First one on the list of Apps if searched.)&lt;/li&gt; &#xA; &lt;li&gt;Associate the SDK headers in XCode with a command: export CPATH=`xcrun --show-sdk-path`/usr/include&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now download the lc0 source, if you haven&#39;t already done so, following the instructions earlier in the page.&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Go to the lc0 directory.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./build.sh -Dgtest=false&lt;/code&gt; (needs step 5)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Raspberry Pi&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need to be running the latest Raspberry Pi OS &#34;buster&#34;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install OpenBLAS&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/xianyi/OpenBLAS.git&#xA;cd OpenBLAS/&#xA;make&#xA;sudo make PREFIX=/usr install&#xA;cd ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install Meson&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install meson&#xA;pip3 install ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install compiler and standard libraries&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install clang-6.0 libstdc++-8-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Clone lc0 and compile&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/LeelaChessZero/lc0.git&#xA;cd lc0&#xA;git submodule update --init --recursive&#xA;CC=clang-6.0 CXX=clang++-6.0 ./build.sh -Ddefault_library=static&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;The resulting binary will be in build/release&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Leela Chess is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;Leela Chess is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with Leela Chess. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Additional permission under GNU GPL version 3 section 7&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;The source files of Lc0 with the exception of the BLAS and OpenCL backends (all files in the &lt;code&gt;blas&lt;/code&gt; and &lt;code&gt;opencl&lt;/code&gt; sub-directories) have the following additional permission, as allowed under GNU GPL version 3 section 7:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you modify this Program, or any covered work, by linking or combining it with NVIDIA Corporation&#39;s libraries from the NVIDIA CUDA Toolkit and the NVIDIA CUDA Deep Neural Network library (or a modified version of those libraries), containing parts covered by the terms of the respective license agreement, the licensors of this Program grant you additional permission to convey the resulting work.&lt;/p&gt;</summary>
  </entry>
</feed>