<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-22T01:29:53Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WebAssembly/wabt</title>
    <updated>2024-01-22T01:29:53Z</updated>
    <id>tag:github.com,2024-01-22:/WebAssembly/wabt</id>
    <link href="https://github.com/WebAssembly/wabt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The WebAssembly Binary Toolkit&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/WebAssembly/wabt&#34;&gt;&lt;img src=&#34;https://github.com/WebAssembly/wabt/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Github CI Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;WABT: The WebAssembly Binary Toolkit&lt;/h1&gt; &#xA;&lt;p&gt;WABT (we pronounce it &#34;wabbit&#34;) is a suite of tools for WebAssembly, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/doc/wat2wasm.1.html&#34;&gt;&lt;strong&gt;wat2wasm&lt;/strong&gt;&lt;/a&gt;: translate from &lt;a href=&#34;https://webassembly.github.io/spec/core/text/index.html&#34;&gt;WebAssembly text format&lt;/a&gt; to the &lt;a href=&#34;https://webassembly.github.io/spec/core/binary/index.html&#34;&gt;WebAssembly binary format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/doc/wasm2wat.1.html&#34;&gt;&lt;strong&gt;wasm2wat&lt;/strong&gt;&lt;/a&gt;: the inverse of wat2wasm, translate from the binary format back to the text format (also known as a .wat)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/doc/wasm-objdump.1.html&#34;&gt;&lt;strong&gt;wasm-objdump&lt;/strong&gt;&lt;/a&gt;: print information about a wasm binary. Similiar to objdump.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/doc/wasm-interp.1.html&#34;&gt;&lt;strong&gt;wasm-interp&lt;/strong&gt;&lt;/a&gt;: decode and run a WebAssembly binary file using a stack-based interpreter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/doc/wasm-decompile.1.html&#34;&gt;&lt;strong&gt;wasm-decompile&lt;/strong&gt;&lt;/a&gt;: decompile a wasm binary into readable C-like syntax.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/doc/wat-desugar.1.html&#34;&gt;&lt;strong&gt;wat-desugar&lt;/strong&gt;&lt;/a&gt;: parse .wat text form as supported by the spec interpreter (s-expressions, flat syntax, or mixed) and print &#34;canonical&#34; flat format&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/doc/wasm2c.1.html&#34;&gt;&lt;strong&gt;wasm2c&lt;/strong&gt;&lt;/a&gt;: convert a WebAssembly binary file to a C source and header&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/doc/wasm-strip.1.html&#34;&gt;&lt;strong&gt;wasm-strip&lt;/strong&gt;&lt;/a&gt;: remove sections of a WebAssembly binary file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/doc/wasm-validate.1.html&#34;&gt;&lt;strong&gt;wasm-validate&lt;/strong&gt;&lt;/a&gt;: validate a file in the WebAssembly binary format&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/doc/wast2json.1.html&#34;&gt;&lt;strong&gt;wast2json&lt;/strong&gt;&lt;/a&gt;: convert a file in the wasm spec test format to a JSON file and associated wasm binary files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/doc/wasm-stats.1.html&#34;&gt;&lt;strong&gt;wasm-stats&lt;/strong&gt;&lt;/a&gt;: output stats for a module&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/doc/spectest-interp.1.html&#34;&gt;&lt;strong&gt;spectest-interp&lt;/strong&gt;&lt;/a&gt;: read a Spectest JSON file, and run its tests in the interpreter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These tools are intended for use in (or for development of) toolchains or other systems that want to manipulate WebAssembly files. Unlike the WebAssembly spec interpreter (which is written to be as simple, declarative and &#34;speccy&#34; as possible), they are written in C/C++ and designed for easier integration into other systems. Unlike &lt;a href=&#34;https://github.com/WebAssembly/binaryen&#34;&gt;Binaryen&lt;/a&gt; these tools do not aim to provide an optimization platform or a higher-level compiler target; instead they aim for full fidelity and compliance with the spec (e.g. 1:1 round-trips with no changes to instructions).&lt;/p&gt; &#xA;&lt;h2&gt;Online Demos&lt;/h2&gt; &#xA;&lt;p&gt;Wabt has been compiled to JavaScript via emscripten. Some of the functionality is available in the following demos:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/demo/&#34;&gt;index&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/demo/wat2wasm/&#34;&gt;wat2wasm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webassembly.github.io/wabt/demo/wasm2wat/&#34;&gt;wasm2wat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Proposals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Proposal: Name and link to the WebAssembly proposal repo&lt;/li&gt; &#xA; &lt;li&gt;flag: Flag to pass to the tool to enable/disable support for the feature&lt;/li&gt; &#xA; &lt;li&gt;default: Whether the feature is enabled by default&lt;/li&gt; &#xA; &lt;li&gt;binary: Whether wabt can read/write the binary format&lt;/li&gt; &#xA; &lt;li&gt;text: Whether wabt can read/write the text format&lt;/li&gt; &#xA; &lt;li&gt;validate: Whether wabt can validate the syntax&lt;/li&gt; &#xA; &lt;li&gt;interpret: Whether wabt can execute these operations in &lt;code&gt;wasm-interp&lt;/code&gt; or &lt;code&gt;spectest-interp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;wasm2c: Whether wasm2c supports these operations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Proposal&lt;/th&gt; &#xA;   &lt;th&gt;flag&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;   &lt;th&gt;binary&lt;/th&gt; &#xA;   &lt;th&gt;text&lt;/th&gt; &#xA;   &lt;th&gt;validate&lt;/th&gt; &#xA;   &lt;th&gt;interpret&lt;/th&gt; &#xA;   &lt;th&gt;wasm2c&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/exception-handling&#34;&gt;exception handling&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--enable-exceptions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/mutable-global&#34;&gt;mutable globals&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--disable-mutable-globals&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/nontrapping-float-to-int-conversions&#34;&gt;nontrapping float-to-int conversions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--disable-saturating-float-to-int&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/sign-extension-ops&#34;&gt;sign extension&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--disable-sign-extension&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/simd&#34;&gt;simd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--disable-simd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/threads&#34;&gt;threads&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--enable-threads&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/multi-value&#34;&gt;multi-value&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--disable-multi-value&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/tail-call&#34;&gt;tail-call&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--enable-tail-call&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/bulk-memory-operations&#34;&gt;bulk memory&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--disable-bulk-memory&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/reference-types&#34;&gt;reference types&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--disable-reference-types&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/annotations&#34;&gt;annotations&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--enable-annotations&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/memory64&#34;&gt;memory64&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--enable-memory64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/multi-memory&#34;&gt;multi-memory&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--enable-multi-memory&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/extended-const&#34;&gt;extended-const&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--enable-extended-const&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WebAssembly/relaxed-simd&#34;&gt;relaxed-simd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--enable-relaxed-simd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Cloning&lt;/h2&gt; &#xA;&lt;p&gt;Clone as normal, but don&#39;t forget to get the submodules as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git clone --recursive https://github.com/WebAssembly/wabt&#xA;$ cd wabt&#xA;$ git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will fetch the testsuite and gtest repos, which are needed for some tests.&lt;/p&gt; &#xA;&lt;h2&gt;Building using CMake directly (Linux and macOS)&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need &lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt;. You can then run CMake, the normal way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ mkdir build&#xA;$ cd build&#xA;$ cmake ..&#xA;$ cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will produce build files using CMake&#39;s default build generator. Read the CMake documentation for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You must create a separate directory for the build artifacts (e.g. &lt;code&gt;build&lt;/code&gt; above). Running &lt;code&gt;cmake&lt;/code&gt; from the repo root directory will not work since the build produces an executable called &lt;code&gt;wasm2c&lt;/code&gt; which conflicts with the &lt;code&gt;wasm2c&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Building using the top-level &lt;code&gt;Makefile&lt;/code&gt; (Linux and macOS)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Under the hood, this uses &lt;code&gt;make&lt;/code&gt; to run CMake, which then calls &lt;code&gt;ninja&lt;/code&gt; to perform that actual build. On some systems (typically macOS), this doesn&#39;t build properly. If you see these errors, you can build using CMake directly as described above.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll need &lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt; and &lt;a href=&#34;https://ninja-build.org&#34;&gt;Ninja&lt;/a&gt;. If you just run &lt;code&gt;make&lt;/code&gt;, it will run CMake for you, and put the result in &lt;code&gt;out/clang/Debug/&lt;/code&gt; by default:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you are on macOS, you will need to use CMake version 3.2 or higher&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the default version of the tools: a debug build using the Clang compiler.&lt;/p&gt; &#xA;&lt;p&gt;There are many make targets available for other configurations as well. They are generated from every combination of a compiler, build type and configuration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;compilers: &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;clang&lt;/code&gt;, &lt;code&gt;gcc-i686&lt;/code&gt;, &lt;code&gt;emscripten&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;build types: &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;configurations: empty, &lt;code&gt;asan&lt;/code&gt;, &lt;code&gt;msan&lt;/code&gt;, &lt;code&gt;lsan&lt;/code&gt;, &lt;code&gt;ubsan&lt;/code&gt;, &lt;code&gt;fuzz&lt;/code&gt;, &lt;code&gt;no-tests&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They are combined with dashes, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ make clang-debug&#xA;$ make gcc-i686-release&#xA;$ make clang-debug-lsan&#xA;$ make gcc-debug-no-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building (Windows)&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need &lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt;. You&#39;ll also need &lt;a href=&#34;https://www.visualstudio.com/&#34;&gt;Visual Studio&lt;/a&gt; (2015 or newer) or &lt;a href=&#34;https://www.mingw-w64.org/&#34;&gt;MinGW&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Visual Studio 2017 and later come with CMake (and the Ninja build system) out of the box, and should be on your PATH if you open a Developer Command prompt. See &lt;a href=&#34;https://aka.ms/cmake&#34;&gt;https://aka.ms/cmake&lt;/a&gt; for more details.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can run CMake from the command prompt, or use the CMake GUI tool. See &lt;a href=&#34;https://cmake.org/runningcmake/&#34;&gt;Running CMake&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;When running from the commandline, create a new directory for the build artifacts, then run cmake from this directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;&amp;gt; cd [build dir]&#xA;&amp;gt; cmake [wabt project root] -DCMAKE_BUILD_TYPE=[config] -DCMAKE_INSTALL_PREFIX=[install directory] -G [generator]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;[config]&lt;/code&gt; parameter should be a CMake build type, typically &lt;code&gt;DEBUG&lt;/code&gt; or &lt;code&gt;RELEASE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;[generator]&lt;/code&gt; parameter should be the type of project you want to generate, for example &lt;code&gt;&#34;Visual Studio 14 2015&#34;&lt;/code&gt;. You can see the list of available generators by running &lt;code&gt;cmake --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build the project, you can use Visual Studio, or you can tell CMake to do it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;&amp;gt; cmake --build [wabt project root] --config [config] --target install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build and install to the installation directory you provided above.&lt;/p&gt; &#xA;&lt;p&gt;So, for example, if you want to build the debug configuration on Visual Studio 2015:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;&amp;gt; mkdir build&#xA;&amp;gt; cd build&#xA;&amp;gt; cmake .. -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_INSTALL_PREFIX=..\ -G &#34;Visual Studio 14 2015&#34;&#xA;&amp;gt; cmake --build . --config DEBUG --target install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding new keywords to the lexer&lt;/h2&gt; &#xA;&lt;p&gt;If you want to add new keywords, you&#39;ll need to install &lt;a href=&#34;https://www.gnu.org/software/gperf/&#34;&gt;gperf&lt;/a&gt;. Before you upload your PR, please run &lt;code&gt;make update-gperf&lt;/code&gt; to update the prebuilt C++ sources in &lt;code&gt;src/prebuilt/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running wat2wasm&lt;/h2&gt; &#xA;&lt;p&gt;Some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# parse test.wat and write to .wasm binary file with the same name&#xA;$ bin/wat2wasm test.wat&#xA;&#xA;# parse test.wat and write to binary file test.wasm&#xA;$ bin/wat2wasm test.wat -o test.wasm&#xA;&#xA;# parse spec-test.wast, and write verbose output to stdout (including the&#xA;# meaning of every byte)&#xA;$ bin/wat2wasm spec-test.wast -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;--help&lt;/code&gt; to get additional help:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bin/wat2wasm --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or try the &lt;a href=&#34;https://webassembly.github.io/wabt/demo/wat2wasm/&#34;&gt;online demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running wasm2wat&lt;/h2&gt; &#xA;&lt;p&gt;Some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# parse binary file test.wasm and write text file test.wat&#xA;$ bin/wasm2wat test.wasm -o test.wat&#xA;&#xA;# parse test.wasm and write test.wat&#xA;$ bin/wasm2wat test.wasm -o test.wat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;--help&lt;/code&gt; to get additional help:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bin/wasm2wat --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or try the &lt;a href=&#34;https://webassembly.github.io/wabt/demo/wasm2wat/&#34;&gt;online demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running wasm-interp&lt;/h2&gt; &#xA;&lt;p&gt;Some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# parse binary file test.wasm, and type-check it&#xA;$ bin/wasm-interp test.wasm&#xA;&#xA;# parse test.wasm and run all its exported functions&#xA;$ bin/wasm-interp test.wasm --run-all-exports&#xA;&#xA;# parse test.wasm, run the exported functions and trace the output&#xA;$ bin/wasm-interp test.wasm --run-all-exports --trace&#xA;&#xA;# parse test.json and run the spec tests&#xA;$ bin/wasm-interp test.json --spec&#xA;&#xA;# parse test.wasm and run all its exported functions, setting the value stack&#xA;# size to 100 elements&#xA;$ bin/wasm-interp test.wasm -V 100 --run-all-exports&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;--help&lt;/code&gt; to get additional help:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bin/wasm-interp --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running wast2json&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/WebAssembly/wabt/main/docs/wast2json.md&#34;&gt;wast2json.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running wasm-decompile&lt;/h2&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# parse binary file test.wasm and write text file test.dcmp&#xA;$ bin/wasm-decompile test.wasm -o test.dcmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;--help&lt;/code&gt; to get additional help:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bin/wasm-decompile --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/WebAssembly/wabt/main/docs/decompiler.md&#34;&gt;decompiler.md&lt;/a&gt; for more information on the language being generated.&lt;/p&gt; &#xA;&lt;h2&gt;Running wasm2c&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/WebAssembly/wabt/main/wasm2c/README.md&#34;&gt;wasm2c.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running the test suite&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/WebAssembly/wabt/main/test/README.md&#34;&gt;test/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sanitizers&lt;/h2&gt; &#xA;&lt;p&gt;To build with the &lt;a href=&#34;https://github.com/google/sanitizers&#34;&gt;LLVM sanitizers&lt;/a&gt;, append the sanitizer name to the target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ make clang-debug-asan&#xA;$ make clang-debug-msan&#xA;$ make clang-debug-lsan&#xA;$ make clang-debug-ubsan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are configurations for the Address Sanitizer (ASAN), Memory Sanitizer (MSAN), Leak Sanitizer (LSAN) and Undefined Behavior Sanitizer (UBSAN). You can read about the behaviors of the sanitizers in the link above, but essentially the Address Sanitizer finds invalid memory accesses (use after free, access out-of-bounds, etc.), Memory Sanitizer finds uses of uninitialized memory, the Leak Sanitizer finds memory leaks, and the Undefined Behavior Sanitizer finds undefined behavior (surprise!).&lt;/p&gt; &#xA;&lt;p&gt;Typically, you&#39;ll just want to run all the tests for a given sanitizer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ make test-asan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run the tests for a release build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ make test-clang-release-asan&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The GitHub actions bots run all of these tests (and more). Before you land a change, you should run them too. One easy way is to use the &lt;code&gt;test-everything&lt;/code&gt; target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ make test-everything&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fuzzing&lt;/h2&gt; &#xA;&lt;p&gt;To build using the &lt;a href=&#34;https://llvm.org/docs/LibFuzzer.html&#34;&gt;LLVM fuzzer support&lt;/a&gt;, append &lt;code&gt;fuzz&lt;/code&gt; to the target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ make clang-debug-fuzz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will produce a &lt;code&gt;wasm2wat_fuzz&lt;/code&gt; binary. It can be used to fuzz the binary reader, as well as reproduce fuzzer errors found by &lt;a href=&#34;https://github.com/google/oss-fuzz/tree/master/projects/wabt&#34;&gt;oss-fuzz&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ out/clang/Debug/fuzz/wasm2wat_fuzz ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://llvm.org/docs/LibFuzzer.html&#34;&gt;libFuzzer documentation&lt;/a&gt; for more information about how to use this tool.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Maplespe/ExplorerBlurMica</title>
    <updated>2024-01-22T01:29:53Z</updated>
    <id>tag:github.com,2024-01-22:/Maplespe/ExplorerBlurMica</id>
    <link href="https://github.com/Maplespe/ExplorerBlurMica" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Add background Blur effect or Acrylic (Mica for win11) effect to explorer for win10 and win11&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ExplorerBlurMica&lt;/h1&gt; &#xA;&lt;p&gt;Add background Blur effect or Acrylic or Mica effect to explorer for win10 and win11&lt;/p&gt; &#xA;&lt;p&gt;给文件资源管理器添加背景模糊效果或Acrylic、Mica效果 适用于win10和win11&lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p&gt;| &lt;a href=&#34;https://raw.githubusercontent.com/Maplespe/ExplorerBlurMica/main/README_ZH.md&#34;&gt;中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Maplespe/ExplorerBlurMica/main/README.md&#34;&gt;English&lt;/a&gt; | This project uses &lt;a href=&#34;https://raw.githubusercontent.com/Maplespe/ExplorerBlurMica/main/COPYING.LESSER&#34;&gt;LGNU V3 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/lgpl-3.0.en.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Maplespe/ExplorerBlurMica.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Maplespe/ExplorerBlurMica/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/Maplespe/ExplorerBlurMica/total.svg?sanitize=true&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Maplespe/ExplorerBlurMica/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Maplespe/ExplorerBlurMica.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/language-c++-F34B7D.svg?sanitize=true&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/Maplespe/ExplorerBlurMica.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Effects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blur or Acrylic, Mica effects are available.&lt;/li&gt; &#xA; &lt;li&gt;Custom blend colors are available.&lt;/li&gt; &#xA; &lt;li&gt;Light/Dark Mode Adaptive.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project is for Explorer only, if you want to apply the effect globally, take a look at our other project &lt;a href=&#34;https://github.com/Maplespe/DWMBlurGlass&#34;&gt;DWMBlurGlass&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Compatible with StartAllBack, OldNewExplorer and other software that modifies window styles.&lt;/p&gt; &#xA;&lt;p&gt;It is also compatible with third-party themes.&lt;/p&gt; &#xA;&lt;h2&gt;Catalog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Maplespe/ExplorerBlurMica/main/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Maplespe/ExplorerBlurMica/main/#how-to-use&#34;&gt;How to use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Maplespe/ExplorerBlurMica/main/#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Maplespe/ExplorerBlurMica/main/#other&#34;&gt;Other&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;b&gt;Windows 11&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;23H2 WinUI3&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[config]&#xA;effect=1&#xA;clearBarBg=true&#xA;clearAddress=true&#xA;clearWinUIBg=true&#xA;[light]&#xA;r=255&#xA;g=255&#xA;b=255&#xA;a=200&#xA;....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/Maplespe/ExplorerBlurMica/raw/main/screenshot/012949.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;Dark Mode&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[config]&#xA;effect=2&#xA;clearBarBg=true&#xA;clearAddress=true&#xA;clearWinUIBg=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/Maplespe/ExplorerBlurMica/raw/main/screenshot/013256.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;22H2 XamlIslands&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[config]&#xA;effect=1&#xA;clearBarBg=true&#xA;clearAddress=true&#xA;clearWinUIBg=true&#xA;[light]&#xA;r=255&#xA;g=255&#xA;b=255&#xA;a=200&#xA;....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/Maplespe/ExplorerBlurMica/raw/main/screenshot/152834.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[config]&#xA;effect=1&#xA;clearBarBg=true&#xA;clearAddress=true&#xA;clearWinUIBg=false&#xA;[light]&#xA;r=255&#xA;g=255&#xA;b=255&#xA;a=200&#xA;....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/Maplespe/ExplorerBlurMica/raw/main/screenshot/152929.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;b&gt;Windows 10&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[config]&#xA;effect=1&#xA;clearBarBg=true&#xA;clearAddress=true&#xA;clearWinUIBg=false&#xA;[light]&#xA;r=222&#xA;g=222&#xA;b=222&#xA;a=200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/Maplespe/ExplorerBlurMica/raw/main/screenshot/230909.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the compiled program archive from the &lt;a href=&#34;https://github.com/Maplespe/ExplorerBlurMica/releases&#34;&gt;Release&lt;/a&gt; page.&lt;/li&gt; &#xA; &lt;li&gt;Unzip it to a location such as &#34;&lt;code&gt;C:\Program Files&lt;/code&gt;&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Run &#34;&lt;code&gt;register.cmd&lt;/code&gt;&#34; as administrator.&lt;/li&gt; &#xA; &lt;li&gt;Reopen the Explorer window to take effect.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;cmd: &lt;code&gt;regsvr32 &#34;you path/ExplorerBlurMica.dll&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Uninstall&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &#34;&lt;code&gt;uninstall.cmd&lt;/code&gt;&#34; as administrator.&lt;/li&gt; &#xA; &lt;li&gt;Delete the remaining files.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;cmd: &lt;code&gt;regsvr32 /u &#34;you path/ExplorerBlurMica.dll&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Note: If something happens that crashes Explorer, press and hold the &lt;code&gt;ESC&lt;/code&gt; key to open Explorer and uninstall the program.&lt;/p&gt; &#xA;&lt;h2&gt;Config&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[config]&#xA;#Effect type 0=Blur 1=Acrylic 2=Mica 3=Blur(Clear)&#xA;#Blur is only available until win11 22h2, Blur (Clear) is available in both win10 and win11, Mica is win11 only.&#xA;effect=1&#xA;#Clear the background of the address bar.&#xA;clearAddress=true&#xA;#Clear the background color of the scrollbar.&#xA;#(Note: Since the system scrollbar itself has a background color that cannot be removed,&#xA;# when this option is turned on, the scrollbar is drawn by the program and the style may be different from the system).&#xA;clearBarBg=true&#xA;#Remove the toolbar background color from the WinUI or XamlIslands section of Windows 11.&#xA;clearWinUIBg=true&#xA;[light]&#xA;#The system color scheme is the color in Light mode.&#xA;#RGBA component of background blend color&#xA;r=220&#xA;g=220&#xA;b=220&#xA;a=160&#xA;[dark]&#xA;#The system color scheme is the color in Dark mode.&#xA;r=0&#xA;g=0&#xA;b=0&#xA;a=120&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Save the configuration after modification and reopen the File Explorer window to take effect.&lt;/p&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;p&gt;Dependent on &lt;a href=&#34;https://github.com/m417z/minhook&#34;&gt;minhook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project is an independent component based on the code in the &lt;a href=&#34;https://winmoes.com/tools/12948.html&#34;&gt;MToolBox&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>