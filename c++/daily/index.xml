<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-19T01:31:13Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DarthTon/Blackbone</title>
    <updated>2023-06-19T01:31:13Z</updated>
    <id>tag:github.com,2023-06-19:/DarthTon/Blackbone</id>
    <link href="https://github.com/DarthTon/Blackbone" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Windows memory hacking library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Blackbone&lt;/h1&gt; &#xA;&lt;h3&gt;Windows memory hacking library&lt;/h3&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;x86 and x64 support&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Process interaction&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manage PEB32/PEB64&lt;/li&gt; &#xA; &lt;li&gt;Manage process through WOW64 barrier&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Process Memory&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allocate and free virtual memory&lt;/li&gt; &#xA; &lt;li&gt;Change memory protection&lt;/li&gt; &#xA; &lt;li&gt;Read/Write virtual memory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Process modules&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enumerate all (32/64 bit) modules loaded. Enumerate modules using Loader list/Section objects/PE headers methods.&lt;/li&gt; &#xA; &lt;li&gt;Get exported function address&lt;/li&gt; &#xA; &lt;li&gt;Get the main module&lt;/li&gt; &#xA; &lt;li&gt;Unlink module from loader lists&lt;/li&gt; &#xA; &lt;li&gt;Inject and eject modules (including pure IL images)&lt;/li&gt; &#xA; &lt;li&gt;Inject 64bit modules into WOW64 processes&lt;/li&gt; &#xA; &lt;li&gt;Manually map native PE images&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Threads&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enumerate threads&lt;/li&gt; &#xA; &lt;li&gt;Create and terminate threads. Support for cross-session thread creation.&lt;/li&gt; &#xA; &lt;li&gt;Get thread exit code&lt;/li&gt; &#xA; &lt;li&gt;Get main thread&lt;/li&gt; &#xA; &lt;li&gt;Manage TEB32/TEB64&lt;/li&gt; &#xA; &lt;li&gt;Join threads&lt;/li&gt; &#xA; &lt;li&gt;Suspend and resume threads&lt;/li&gt; &#xA; &lt;li&gt;Set/Remove hardware breakpoints&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pattern search&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Search for arbitrary pattern in local or remote process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Remote code execution&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Execute functions in remote process&lt;/li&gt; &#xA; &lt;li&gt;Assemble own code and execute it remotely&lt;/li&gt; &#xA; &lt;li&gt;Support for cdecl/stdcall/thiscall/fastcall conventions&lt;/li&gt; &#xA; &lt;li&gt;Support for arguments passed by value, pointer or reference, including structures&lt;/li&gt; &#xA; &lt;li&gt;FPU types are supported&lt;/li&gt; &#xA; &lt;li&gt;Execute code in new thread or any existing one&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Remote hooking&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hook functions in remote process using int3 or hardware breakpoints&lt;/li&gt; &#xA; &lt;li&gt;Hook functions upon return&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Manual map features&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;x86 and x64 image support&lt;/li&gt; &#xA; &lt;li&gt;Mapping into any arbitrary unprotected process&lt;/li&gt; &#xA; &lt;li&gt;Section mapping with proper memory protection flags&lt;/li&gt; &#xA; &lt;li&gt;Image relocations (only 2 types supported. I haven&#39;t seen a single PE image with some other relocation types)&lt;/li&gt; &#xA; &lt;li&gt;Imports and Delayed imports are resolved&lt;/li&gt; &#xA; &lt;li&gt;Bound import is resolved as a side effect, I think&lt;/li&gt; &#xA; &lt;li&gt;Module exports&lt;/li&gt; &#xA; &lt;li&gt;Loading of forwarded export images&lt;/li&gt; &#xA; &lt;li&gt;Api schema name redirection&lt;/li&gt; &#xA; &lt;li&gt;SxS redirection and isolation&lt;/li&gt; &#xA; &lt;li&gt;Activation context support&lt;/li&gt; &#xA; &lt;li&gt;Dll path resolving similar to native load order&lt;/li&gt; &#xA; &lt;li&gt;TLS callbacks. Only for one thread and only with PROCESS_ATTACH/PROCESS_DETACH reasons.&lt;/li&gt; &#xA; &lt;li&gt;Static TLS&lt;/li&gt; &#xA; &lt;li&gt;Exception handling support (SEH and C++)&lt;/li&gt; &#xA; &lt;li&gt;Adding module to some native loader structures(for basic module api support: GetModuleHandle, GetProcAdress, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Security cookie initialization&lt;/li&gt; &#xA; &lt;li&gt;C++/CLI images are supported&lt;/li&gt; &#xA; &lt;li&gt;Image unloading&lt;/li&gt; &#xA; &lt;li&gt;Increase reference counter for import libraries in case of manual import mapping&lt;/li&gt; &#xA; &lt;li&gt;Cyclic dependencies are handled properly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Driver features&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allocate/free/protect user memory&lt;/li&gt; &#xA; &lt;li&gt;Read/write user and kernel memory&lt;/li&gt; &#xA; &lt;li&gt;Disable permanent DEP for WOW64 processes&lt;/li&gt; &#xA; &lt;li&gt;Change process protection flag&lt;/li&gt; &#xA; &lt;li&gt;Change handle access rights&lt;/li&gt; &#xA; &lt;li&gt;Remap process memory&lt;/li&gt; &#xA; &lt;li&gt;Hiding allocated user-mode memory&lt;/li&gt; &#xA; &lt;li&gt;User-mode dll injection and manual mapping&lt;/li&gt; &#xA; &lt;li&gt;Manual mapping of drivers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2017 15.7 or higher&lt;/li&gt; &#xA; &lt;li&gt;Windows SDK 10.0.17134 or higher&lt;/li&gt; &#xA; &lt;li&gt;WDK 10.0.17134 or higher (driver only)&lt;/li&gt; &#xA; &lt;li&gt;VC++ 2017 Libs for Spectre (x86 and x64)&lt;/li&gt; &#xA; &lt;li&gt;Visual C++ ATL (x86/x64) with Spectre Mitigations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Blackbone is licensed under the MIT License. Dependencies are under their respective licenses.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/DarthTon/Blackbone/workflows/Library/badge.svg?branch=master&#34; alt=&#34;Library&#34;&gt; &lt;img src=&#34;https://github.com/DarthTon/Blackbone/workflows/Driver/badge.svg?branch=master&#34; alt=&#34;Driver&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>UMSKT/UMSKT</title>
    <updated>2023-06-19T01:31:13Z</updated>
    <id>tag:github.com,2023-06-19:/UMSKT/UMSKT</id>
    <link href="https://github.com/UMSKT/UMSKT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universal MS Key Toolkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;Universal MS Key Toolkit (UMSKT)&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://umskt.zulipchat.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/zulip-join_chat-brightgreen.svg?sanitize=true&#34; alt=&#34;Zulip chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://web.libera.chat/gamja/?nick=Guest?#mspid&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/libera.chat-%23mspid-brightgreen&#34; alt=&#34;libera.chat - #mspid&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/UMSKT/actions/workflows/linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/UMSKT/UMSKT/actions/workflows/linux.yml/badge.svg?sanitize=true&#34; alt=&#34;C/C++ CI (Linux)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/UMSKT/actions/workflows/windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/UMSKT/UMSKT/actions/workflows/windows.yml/badge.svg?sanitize=true&#34; alt=&#34;C/C++ CI (Windows)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Plan of Action / ToDo List&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In light of the recent exponential interest in this project I&#39;ve decided to put updates of this project here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/UMSKT/issues/8&#34;&gt;Please see ticket #8 for more information&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;strong&gt;What does it do?&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This program allows you to generate endless Windows XP / Windows Server 2003 keys. You also can use it to check your already existing keys.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;strong&gt;How does it work?&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Endermanch/XPKeygen&#34;&gt;Enderman&#39;s XPKeygen Readme explains everything in detail.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;strong&gt;How do I use it?&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It all comes down to four simple steps:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;1. Download the latest version of WindowsXPKg&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;(GitHub account required)&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download the latest experimental version using the Actions tab (&lt;a href=&#34;https://raw.githubusercontent.com/UMSKT/actions/workflows/windows.yml?query=branch%3Amaster&#34;&gt;Windows&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/UMSKT/actions/workflows/linux.yml?query=branch%3Amaster&#34;&gt;Linux&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;(GitHub account *not* required)&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download the latest release for your operating system and architecture from &lt;a href=&#34;https://raw.githubusercontent.com/UMSKT/releases&#34;&gt;the releases page&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Before continuing, please ensure you have both the &lt;code&gt;xpkey&lt;/code&gt; program and the &lt;code&gt;keys.json&lt;/code&gt; datum extracted and in the same directory&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2. Run &lt;code&gt;xpkey&lt;/code&gt; to generate a key, or add &lt;code&gt;--help&lt;/code&gt; to see more options.&lt;/h4&gt; &#xA;&lt;h4&gt;3. &lt;em&gt;(Activation step for &lt;code&gt;Retail&lt;/code&gt; and &lt;code&gt;OEM&lt;/code&gt; only)&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;After installation, you will be prompted to activate Windows.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the &lt;strong&gt;telephone activation&lt;/strong&gt; method, then, run &lt;code&gt;xpkey -i &amp;lt;Installation ID&amp;gt;&lt;/code&gt; using the &lt;code&gt;Installation ID&lt;/code&gt; the activation Wizard provides for you&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;4. Profit!&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Authors&lt;/h3&gt; &#xA;&lt;p&gt;The list of people who have helped to bring the XP generation to where it is now:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;z22&lt;/li&gt; &#xA; &lt;li&gt;MSKey&lt;/li&gt; &#xA; &lt;li&gt;sk00ter&lt;/li&gt; &#xA; &lt;li&gt;diamondggg&lt;/li&gt; &#xA; &lt;li&gt;pottzman&lt;/li&gt; &#xA; &lt;li&gt;Endermanch&lt;/li&gt; &#xA; &lt;li&gt;Neo-Desktop&lt;/li&gt; &#xA; &lt;li&gt;WitherOrNot&lt;/li&gt; &#xA; &lt;li&gt;TheTank20&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(the list will be updated to add more collaborators)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Development Requirements:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CMake, make, gcc&lt;/code&gt; (&lt;code&gt;build-essential&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OpenSSL 1.1.1+&lt;/code&gt; (&lt;code&gt;libssl-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build Steps:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd build/ &amp;amp;&amp;amp; cmake ../ &amp;amp;&amp;amp; make&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>