<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-27T01:25:45Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>localcc/PalworldModdingKit</title>
    <updated>2024-01-27T01:25:45Z</updated>
    <id>tag:github.com,2024-01-27:/localcc/PalworldModdingKit</id>
    <link href="https://github.com/localcc/PalworldModdingKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modding kit for Palworld&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Palworld game sdk&lt;/h1&gt; &#xA;&lt;p&gt;This sdk allows for creation of blueprint mods referencing game functions, which makes it possible to add custom pals, change player behavior, modify constants, etc.&lt;/p&gt; &#xA;&lt;p&gt;Simple example usage could look like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/SetInventoryWeight.png&#34; alt=&#34;Set inventory weight&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installing the sdk&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;.NET 6&lt;/h3&gt; &#xA;&lt;p&gt;For unreal build tools to function correctly, you will need to have .NET 6 installed on your system, head over to &lt;a href=&#34;https://dotnet.microsoft.com/en-us/download/dotnet/6.0/runtime?cid=getdotnetcore&amp;amp;os=windows&amp;amp;arch=x64&#34;&gt;this link&lt;/a&gt;. Here, click on the &lt;code&gt;Download x64&lt;/code&gt; button to download the runtime:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/Dotnet.png&#34; alt=&#34;Dotnet download&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Afterwards, open the installer, and install the runtime.&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio 2022&lt;/h3&gt; &#xA;&lt;p&gt;To compile the sdk you will need Visual Studio 2022 installed, you can grab it from &lt;a href=&#34;https://visualstudio.microsoft.com/vs/&#34;&gt;this&lt;/a&gt; link. A community edition version will suffice. While installing it, make sure to check the following components in the installer:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/VisualStudioInstaller.png&#34; alt=&#34;Visual Studio Installer Options&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/VisualStudioInstaller2.png&#34; alt=&#34;Visual Studio Installer Options 2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then press continue, and wait for visual studio to install.&lt;/p&gt; &#xA;&lt;h3&gt;Unreal Engine 5.1&lt;/h3&gt; &#xA;&lt;p&gt;After installing Visual Studio, we need to install Unreal Engine. To do so, open Epic Games Launcher, and head over to the &lt;code&gt;Unreal Engine&lt;/code&gt; tab. Here, go to the &lt;code&gt;Library&lt;/code&gt; tab, and press on the little yellow plus button to add a new version:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/EpicUnrealVersion.png&#34; alt=&#34;Add new Unreal Engine version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After this, you should see a new card appear with the ability to select an engine version, open the dropdown and select &lt;code&gt;5.1&lt;/code&gt;, like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/Versions.png&#34; alt=&#34;5.1 Version&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Any 5.1 version will work, it doesn&#39;t matter if it&#39;s 5.1 or 5.1.1&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Wwise&lt;/h3&gt; &#xA;&lt;p&gt;Palworld uses Wwise for it&#39;s sounds, so we will need to install this too.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Even if you are not planning on making sounds, you still need wwise, otherwise the project will not compile&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To install wwise, go to &lt;a href=&#34;https://audiokinetic.com/&#34;&gt;this&lt;/a&gt; website, and press &lt;code&gt;Download Audiokinetic Launcher&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/WwiseWebsiteDownload.png&#34; alt=&#34;Download Audiokinetic Launcher&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will require you to make an account. After downloading the launcher, install it and log in. Head over to the &lt;code&gt;Wwise&lt;/code&gt; tab. On the bottom of your screen you should see an &lt;code&gt;Install A New Version&lt;/code&gt; header. Select &lt;code&gt;2021.1.11&lt;/code&gt; as your wwise version and press install:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/WwiseInstallNewVersion.png&#34; alt=&#34;Install A New Version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;On the next page, select:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SDK (C++)&lt;/li&gt; &#xA; &lt;li&gt;Microsoft -&amp;gt; Windows -&amp;gt; Visual Studio 2022&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The selection should look like so:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/WwiseInstallSelection.png&#34; alt=&#34;Install Options&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now press next, on the plugins page you don&#39;t need to add any plugins, so hit install!&lt;/p&gt; &#xA;&lt;p&gt;After installing the Wwise sdk, head over to the &lt;code&gt;Unreal Engine&lt;/code&gt; tab, there press on the &lt;code&gt;Download&lt;/code&gt; button, and select &lt;code&gt;Offline integration files&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/WwiseOfflineIntegrationFiles.png&#34; alt=&#34;Offline integration files&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the integration version, choose the same wwise version you chose when installing the sdk, and remember the download directory, now hit install!&lt;/p&gt; &#xA;&lt;h2&gt;Sdk download&lt;/h2&gt; &#xA;&lt;p&gt;With the prerequisites out of the way, we are ready to download the sdk. Download this repo using the colored button on the top right, and presss &lt;code&gt;Download ZIP&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/DownloadZip.png&#34; alt=&#34;Download ZIP&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After downloading the repo, unpack it anywhere you want, and you should see the following file structure:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/RepoStructure.png&#34; alt=&#34;Repo Structure&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Wwise integration&lt;/h3&gt; &#xA;&lt;p&gt;Before continuing to open the sdk in unreal, we must integrate wwise manually. This is because the wwise version that the game uses, is not officially compatible with the engine version, so we have to manually copy it over.&lt;/p&gt; &#xA;&lt;p&gt;Open the directory you downloaded offline installation files for wwise in, you should see the following structure:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/WwiseOfflineIntegrationStructure.png&#34; alt=&#34;Offline installation files structure&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unpack the &lt;code&gt;Unreal.5.0.tar.xz&lt;/code&gt; archive.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You might need to do it twice, first time you unpack it, you might get a .tar file, unpack that one too.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Copy over the unpacked &lt;code&gt;Wwise&lt;/code&gt; folder into the &lt;code&gt;Plugins&lt;/code&gt; folder of the SDK.&lt;/p&gt; &#xA;&lt;p&gt;Almost done with wwise integration, now we just need to copy over the needed dlls.&lt;/p&gt; &#xA;&lt;p&gt;Open the &lt;code&gt;Wwise&lt;/code&gt; folder inside of the SDK, and create a &lt;code&gt;ThirdParty&lt;/code&gt; folder there.&lt;/p&gt; &#xA;&lt;p&gt;Now go to the folder where you installed the Wwise SDK&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] This is not the folder where you installed the integration files, but the folder where you installed the SDK&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For me this path is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Program Files (x86)\Audiokinetic\Wwise 2021.1.11.7933\SDK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inside of this folder, select:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Win32_vc170&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x64_vc170&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;include&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And copy over those folders to the &lt;code&gt;ThirdParty&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;After copying over those folders, make sure to duplicate the &lt;code&gt;vc170&lt;/code&gt; folders as &lt;code&gt;vc160&lt;/code&gt; also, so the structure will look as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/Vc160Incident.png&#34; alt=&#34;VC160 Copies&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If you continue without the following change, you will have to click OK on a dialog box that says Wwise is not compatible with the current Unreal Engine version every time you load up the editor.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To fix this, navigate to &lt;code&gt;Plugins\Wwise&lt;/code&gt; and open &lt;code&gt;Wwise.uplugin&lt;/code&gt; with any text editor. Then change the entry &lt;code&gt;&#34;EngineVersion&#34; : &#34;5.0.0&#34;,&lt;/code&gt; to &lt;code&gt;&#34;EngineVersion&#34; : &#34;5.1&#34;,&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Yay! Now we are done with integrating wwise!&lt;/p&gt; &#xA;&lt;h3&gt;Changing build tools from VS 2019 to VS 2022&lt;/h3&gt; &#xA;&lt;p&gt;In Unreal Engine 5.1, by default, Visual Studio 2019 build tools will be used if they are installed.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] The below changes should only be made if Visual Studio 2019 is installed alongside Visual Studio 2022.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If you don&#39;t see &#34;Unreal Engine&#34; in %APPDATA% that means you haven&#39;t launched Unreal Engine before. Go to Epic Games Launcher -&amp;gt; Unreal Engine -&amp;gt; Library 0&amp;gt; Click &#34;Launch&#34; on the Unreal Engine version that you&#39;ve downloaded (5.1.*). Let it load until you see the create a new project screen then close it and continue with the guide.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To change this, navigate to &lt;code&gt;%APPDATA%\Unreal Engine\UnrealBuildTool&lt;/code&gt; and open &lt;code&gt;BuildConfiguration.xml&lt;/code&gt; with your favorite XML editor.&lt;/p&gt; &#xA;&lt;p&gt;Your initial configuration will look like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34; ?&amp;gt;&#xA;&amp;lt;Configuration xmlns=&#34;https://www.unrealengine.com/BuildConfiguration&#34;&amp;gt;&#xA;&amp;lt;/Configuration&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update the configuration to look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34; ?&amp;gt;&#xA;&amp;lt;Configuration xmlns=&#34;https://www.unrealengine.com/BuildConfiguration&#34;&amp;gt;&#xA;    &amp;lt;VCProjectFileGenerator&amp;gt;&#xA;        &amp;lt;Version&amp;gt;VisualStudio2022&amp;lt;/Version&amp;gt;&#xA;    &amp;lt;/VCProjectFileGenerator&amp;gt;&#xA;    &amp;lt;WindowsPlatform&amp;gt;&#xA;        &amp;lt;Compiler&amp;gt;VisualStudio2022&amp;lt;/Compiler&amp;gt;&#xA;    &amp;lt;/WindowsPlatform&amp;gt;&#xA;&amp;lt;/Configuration&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Congratulations on making it through the configuration!&lt;/p&gt; &#xA;&lt;h2&gt;Launching&lt;/h2&gt; &#xA;&lt;p&gt;After doing all of those steps, we are ready! Double click the &lt;code&gt;Pal.uproject&lt;/code&gt; file and it should open in Unreal Engine!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If it tells you that modules are out of date and need to be recompiled, press &lt;strong&gt;YES&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Wwise will complain about not being compatible with the current Unreal Engine version, just ignore that.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] If the file doesn&#39;t open in unreal engine and instead asks you for associations, open Unreal Engine, and open the file from there instead&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You may see a popup on launch about Wwise project path issues, ignore it and press the X in the corner to close the popup.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You may think nothing is happening, unreal engine has to compile a lot of things in the background before the editor opens. This may take a LONG while.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;What do I do now?&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] The next step in the process will be to create a Compatible Blueprint Mod&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/UE4SS-RE/RE-UE4SS&#34;&gt;UE4SS Github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ue4ss.com/index.html&#34;&gt;UE4SS Offical Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fB3yT85XhVA&#34;&gt;Creating A Blueprint Mod Youtube Video&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Packaging&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Make Sure These Two Settings Have Been Enabled &lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/EditorPrefrencesExperimental.png&#34; alt=&#34;EditorPrefExp&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/ProjectSettingsPackaging.png&#34; alt=&#34;ProjectSettingsPackaging&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a Data Asset ( Primary Asset Label ) named after your mod name in your Contents folder. Set the priority to 1, and the Chunk ID to a memorable ID.&lt;/li&gt; &#xA; &lt;li&gt;Set your Mods (ModActor and any other Assets you are going to include in your mod) Chunk ID to the same you used above.&lt;/li&gt; &#xA; &lt;li&gt;Go into &lt;strong&gt;Project Settings -&amp;gt; Assets Manager&lt;/strong&gt; and verify your settings are similar below ( Make sure the rules match the primary asset label you made ) &lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/AssetsManagerSettings.png&#34; alt=&#34;AssetsManagerSettings&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Once all Chunk ID&#39;s match on each mod file you are including, you can package your project &lt;img src=&#34;https://raw.githubusercontent.com/localcc/PalworldModdingKit/main/assets/UEPackageButton.png&#34; alt=&#34;Package button&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;You should have &lt;code&gt;pakchunk{Your Chunk ID}-Windows.pak&lt;/code&gt; in the Paks output folder. Rename that to the mod name. There&#39;s your packaged mod!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If you only get &#39;pakchunk0-Windows.pak&#39; instead of your memorable ID. Go into &lt;strong&gt;Project Settings -&amp;gt; Packaging&lt;/strong&gt; Then tick &#34;Cook everything in the project content directory(ignore list of maps below)&#34;&lt;img src=&#34;https://github.com/localcc/PalworldModdingKit/assets/10259891/c06cb6c6-8e2c-4560-bb1d-22f10f7563ad&#34; alt=&#34;image (5)&#34;&gt; **&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter any issues using the SDK, feel free to open an issue, or shoot a message on discord.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/Nkb2JHu7wc&#34;&gt;Nebulae Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/qHTZNcvYsv&#34;&gt;Palworld Modding Discord&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>radj307/ARRCON</title>
    <updated>2024-01-27T01:25:45Z</updated>
    <id>tag:github.com,2024-01-27:/radj307/ARRCON</id>
    <link href="https://github.com/radj307/ARRCON" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight Source RCON client that works on Windows, macOS, &amp; Linux.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://i.imgur.com/BdC2Qz9.png&#34; alt=&#34;ARRCON Banner&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A lightweight cross-platform RCON client compatible with &lt;b&gt;any game using the Source RCON Protocol&lt;/b&gt;.&lt;br&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/radj307/ARRCON/releases&#34;&gt;&lt;img alt=&#34;GitHub release (latest by date)&#34; src=&#34;https://img.shields.io/github/v/release/radj307/ARRCON?label=Latest+Version&amp;amp;style=flat&#34;&gt;&lt;/a&gt; &#xA; &lt;nobr /&gt; &lt;a href=&#34;https://github.com/awesome-selfhosted/awesome-selfhosted#games---administrative-utilities--control-panels&#34;&gt;&lt;img alt=&#34;Mentioned in Awesome-Selfhosted&#34; src=&#34;https://awesome.re/mentioned-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA; &lt;nobr /&gt; &lt;a href=&#34;https://github.com/radj307/ARRCON/releases&#34;&gt;&lt;img alt=&#34;Downloads&#34; src=&#34;https://img.shields.io/github/downloads/radj307/ARRCON/total?label=Downloads&amp;amp;style=flat&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/radj307/ARRCON/actions/workflows/Windows.yml&#34;&gt;&lt;img alt=&#34;Windows Workflow Status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/radj307/ARRCON/Windows.yml?label=Windows&amp;amp;logo=github&amp;amp;style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/radj307/ARRCON/actions/workflows/Linux.yml&#34;&gt;&lt;img alt=&#34;Linux Workflow Status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/radj307/ARRCON/Linux.yml?label=Linux&amp;amp;logo=github&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/radj307/ARRCON/actions/workflows/Windows.yml&#34;&gt;&lt;img alt=&#34;macOS Workflow Status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/radj307/ARRCON/macOS.yml?label=macOS&amp;amp;logo=github&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/radj307/ARRCON/releases&#34;&gt;Releases&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://github.com/radj307/ARRCON/wiki&#34;&gt;Wiki&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://github.com/radj307/ARRCON/issues&#34;&gt;Issues&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Highly configurable&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross-Platform:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows&lt;/li&gt; &#xA;   &lt;li&gt;Linux&lt;/li&gt; &#xA;   &lt;li&gt;macOS&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Works for any game using the &lt;a href=&#34;https://developer.valvesoftware.com/wiki/Source_RCON_Protocol&#34;&gt;Source RCON Protocol&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Handles large packets without issue&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Handles multi-packet responses without issue&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Supports Minecraft Bukkit&#39;s colorized text&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can set delays in the INI file or directly on the commandline&lt;/li&gt; &#xA; &lt;li&gt;Supports saving a server&#39;s connection info so you can connect to it with 1 word&lt;br&gt; If you&#39;ve ever used &lt;code&gt;ssh&lt;/code&gt;&#39;s &lt;code&gt;config&lt;/code&gt; file, this will be very familiar. &lt;em&gt;(albeit with more sensible syntax)&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This can be done in a text editor &lt;strong&gt;or entirely from the commandline&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Can be used as a one-off from the commandline, or in an interactive console &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supports piped input using shell operators.&lt;br&gt; For example; &lt;code&gt;echo &#34;help&#34; | ARRCON -S myServer&lt;/code&gt; would send the &lt;code&gt;help&lt;/code&gt; command to the &lt;code&gt;myServer&lt;/code&gt; host &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Piped commands are sent &lt;em&gt;after&lt;/em&gt; any commands explicitly specified on the commandline&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can write scripts and manually execute them with the &lt;code&gt;-f&lt;/code&gt;/&lt;code&gt;--file&lt;/code&gt; options in addition to shell scripts &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Commands are separated by newlines&lt;/li&gt; &#xA;   &lt;li&gt;Commands from script files are sent &lt;em&gt;after&lt;/em&gt; any piped commands&lt;/li&gt; &#xA;   &lt;li&gt;Line comments can be written using semicolons &lt;code&gt;;&lt;/code&gt; or pound signs &#39;#&#39;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Shows an indicator when the server didn&#39;t respond to your command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Get the latest version for your OS from the &lt;a href=&#34;https://github.com/radj307/ARRCON/releases&#34;&gt;releases&lt;/a&gt; page.&lt;br&gt; If you&#39;re using the &lt;a href=&#34;https://raw.githubusercontent.com/radj307/ARRCON/main/#windows&#34;&gt;Windows&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/radj307/ARRCON/main/#macos&#34;&gt;MacOS&lt;/a&gt; versions, see the additional information below.&lt;/p&gt; &#xA;&lt;p&gt;There is no installation process required, simply extract the archive to a location of your choice, then run it using a terminal emulator.&lt;br&gt; If you want to be able to run ARRCON from any working directory without specifying its location, you must &lt;a href=&#34;https://github.com/radj307/ARRCON/wiki/Adding-To-Path&#34;&gt;add the location to your environment&#39;s PATH variable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;On newer versions of Windows, you may be required to &#34;unblock&#34; the executable before Windows will let you use it.&lt;br&gt; This is because the executable isn&#39;t signed with a Microsoft-approved signing certificate, which costs upwards of &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/dashboard/get-a-code-signing-certificate#step-2-buy-a-new-code-signing-certificate&#34;&gt;$300/year&lt;/a&gt;.&lt;br&gt; To unblock it, &lt;em&gt;&lt;strong&gt;Right-Click&lt;/strong&gt;&lt;/em&gt; on &lt;code&gt;ARRCON.exe&lt;/code&gt; in the file explorer and click &lt;em&gt;&lt;strong&gt;Properties&lt;/strong&gt;&lt;/em&gt; at the bottom of the right-click menu.&lt;br&gt; &lt;img src=&#34;https://i.imgur.com/LKLZPVX.png&#34; alt=&#34;&#34;&gt;&lt;br&gt; Check the &lt;em&gt;&lt;strong&gt;unblock&lt;/strong&gt;&lt;/em&gt; box, then click &lt;em&gt;&lt;strong&gt;Apply&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;MacOS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you&#39;re running macOS 10.9 or later, you must install &lt;code&gt;gcc&lt;/code&gt; via &lt;a href=&#34;https://brew.sh&#34;&gt;HomeBrew&lt;/a&gt; or some other package manager!&lt;/strong&gt;&lt;br&gt; If homebrew is installed, you can run this command to install and setup &lt;code&gt;gcc&lt;/code&gt; automatically: &lt;code&gt;brew install gcc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is because Apple no longer includes &lt;code&gt;libstdc++&lt;/code&gt; by default as of macOS 10.9 &lt;em&gt;(See &lt;a href=&#34;https://github.com/radj307/ARRCON/issues/11&#34;&gt;#11&lt;/a&gt;)&lt;/em&gt;, which is required for ARRCON to run.&lt;/p&gt; &#xA;&lt;h2&gt;Building from Source&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/radj307/ARRCON/wiki/Building-from-Source&#34;&gt;here&lt;/a&gt; for a brief guide on building ARRCON from source.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;ARRCON is a CLI &lt;em&gt;(Command-Line Interface)&lt;/em&gt; program, which means you need to run it through a terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;On Windows, you can use &lt;code&gt;cmd.exe&lt;/code&gt; or &lt;code&gt;powershell.exe&lt;/code&gt; by R+Clicking on the start menu and selecting &#34;Command Prompt&#34; or &#34;PowerShell&#34;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more detailed usage instructions, see the &lt;a href=&#34;https://github.com/radj307/ARRCON/wiki&#34;&gt;Getting Started&lt;/a&gt; page on the wiki.&lt;/p&gt; &#xA;&lt;p&gt;To see a list of commands, use &lt;code&gt;ARRCON -h&lt;/code&gt; or &lt;code&gt;ARRCON --help&lt;/code&gt;&lt;br&gt; To see a list of environment variables, their current values, and a description of each, use &lt;code&gt;ARRCON --print-env&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Modes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Interactive Shell&lt;/strong&gt;&lt;/em&gt;&lt;br&gt; &lt;img src=&#34;https://i.imgur.com/4d4Epkb.png&#34; alt=&#34;&#34;&gt;&lt;br&gt; Opens an interactive console session. You can send commands and view the responses in real-time.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Used by default when there are no command arguments.&lt;/li&gt; &#xA;   &lt;li&gt;Connection remains open until you disconnect or kill the process, or if the server closes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;One-Shot&lt;/strong&gt;&lt;/em&gt;&lt;br&gt; &lt;img src=&#34;https://i.imgur.com/oPX47RD.png&#34; alt=&#34;ARRCON Scripting Support&#34;&gt;&lt;br&gt; This mode is designed for scripting, it sends commands directly from the commandline in sequential order before exiting.&lt;br&gt; &lt;em&gt;(You can also open an interactive shell at the same time with the &lt;code&gt;-i&lt;/code&gt; / &lt;code&gt;--interactive&lt;/code&gt; options.)&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Supported input methods:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Commandline Parameters&lt;br&gt; &lt;em&gt;These are any arguments that are &lt;strong&gt;not&lt;/strong&gt; short/long-opts and &lt;strong&gt;not captured by&lt;/strong&gt; short/long-opts.&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Shell Scripts&lt;/li&gt; &#xA;   &lt;li&gt;Redirected input from STDIN&lt;/li&gt; &#xA;   &lt;li&gt;Script Files&lt;br&gt; Splits commands by line, and allows comments using a semicolon &lt;code&gt;;&lt;/code&gt; or pound sign &lt;code&gt;#&lt;/code&gt;.&lt;br&gt; Comments are always considered line comments.&lt;br&gt; &lt;em&gt;Use the &#39;&lt;code&gt;-f&lt;/code&gt;&#39; or &#39;&lt;code&gt;--file&lt;/code&gt;&#39; options to specify a scriptfile to load.&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you want to add a new feature, fix a bug, or just improve something that annoys you, feel free to submit pull requests and/or issues.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback &amp;amp; Requests&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to leave feedback on the issues tab!&lt;br&gt; There are a number of premade templates for the following situations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radj307/ARRCON/issues/new?assignees=radj307&amp;amp;labels=question&amp;amp;template=question.md&amp;amp;title=%5BQUESTION%5D+&#34;&gt;Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radj307/ARRCON/issues/new?assignees=radj307&amp;amp;labels=bug&amp;amp;template=bug-report.md&amp;amp;title=%5BBUG%5D+%E2%80%A6&#34;&gt;Bug Reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radj307/ARRCON/issues/new?assignees=radj307&amp;amp;labels=bug%2C+enhancement%2C+support&amp;amp;template=support-request.md&amp;amp;title=Unsupported+Title%3A+%3Ctitle%3E&#34;&gt;Protocol Support Requests&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A note on Battleye&#39;s RCON protocol:&lt;/strong&gt;&lt;br&gt; Battleye&#39;s RCON protocol requires sending &#34;keep-alive&#34; packets at least every 45 seconds to maintain the connection, which is better suited by a multithreaded GUI application, and as such will not be implemented in ARRCON.&lt;br&gt; Other protocols or game-specific implementations however, will be considered.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radj307/ARRCON/issues/new?assignees=&amp;amp;labels=enhancement%2C+new+feature+request&amp;amp;template=request-a-new-feature.md&amp;amp;title=%5BNEW%5D&#34;&gt;Feature Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radj307/ARRCON/issues/new?assignees=&amp;amp;labels=&amp;amp;template=change-an-existing-feature.md&amp;amp;title=%5BCHANGE%5D+&#34;&gt;Suggestions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radj307/ARRCON/issues/new?assignees=&amp;amp;labels=documentation&amp;amp;template=documentation-request.md&amp;amp;title=%5BDOC%5D+&#34;&gt;Documentation Suggestions or Additions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pull Requests&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to submit a pull request if you&#39;ve added a feature or fixed a bug with the project!&lt;br&gt; Contributions are always welcomed, I&#39;ll review it as soon as I see the notification.&lt;/p&gt;</summary>
  </entry>
</feed>