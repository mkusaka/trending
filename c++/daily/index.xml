<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-11T01:31:08Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NVIDIA-Omniverse/PhysX</title>
    <updated>2022-11-11T01:31:08Z</updated>
    <id>tag:github.com,2022-11-11:/NVIDIA-Omniverse/PhysX</id>
    <link href="https://github.com/NVIDIA-Omniverse/PhysX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NVIDIA PhysX SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NVIDIA PhysX&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2008-2022 NVIDIA Corporation. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.&lt;/li&gt; &#xA; &lt;li&gt;Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.&lt;/li&gt; &#xA; &lt;li&gt;Neither the name of NVIDIA CORPORATION nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to the NVIDIA PhysX source code repository.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains source releases of the PhysX and Flow SDKs used in NVIDIA Omniverse.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The user guide and API documentation are available on &lt;a href=&#34;https://nvidia-omniverse.github.io/PhysX&#34;&gt;GitHub Pages&lt;/a&gt;. Please create an &lt;a href=&#34;https://github.com/NVIDIA-Omniverse/PhysX/issues/&#34;&gt;Issue&lt;/a&gt; if you find a documentation issue.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Please see instructions specific to each of the libraries in the respective subfolder.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please use GitHub &lt;a href=&#34;https://github.com/NVIDIA-Omniverse/PhysX/discussions/&#34;&gt;Discussions&lt;/a&gt; for questions and comments.&lt;/li&gt; &#xA; &lt;li&gt;GitHub &lt;a href=&#34;https://github.com/NVIDIA-Omniverse/PhysX/issues&#34;&gt;Issues&lt;/a&gt; should only be used for bug reports or documentation issues.&lt;/li&gt; &#xA; &lt;li&gt;You can also ask questions in the NVIDIA Omniverse #physics &lt;a href=&#34;https://discord.com/invite/XWQNJDNuaC&#34;&gt;Discord Channel&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dev-cafe/cmake-cookbook</title>
    <updated>2022-11-11T01:31:08Z</updated>
    <id>tag:github.com,2022-11-11:/dev-cafe/cmake-cookbook</id>
    <link href="https://github.com/dev-cafe/cmake-cookbook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CMake Cookbook recipes.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/dev-cafe/cmake-cookbook&#34;&gt;&lt;img src=&#34;https://travis-ci.org/dev-cafe/cmake-cookbook.svg?branch=master&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/bast/cmake-cookbook&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/fvmidu9lcqvy52g8?svg=true&#34; alt=&#34;AppVeyor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/dev-cafe/cmake-cookbook&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/dev-cafe/cmake-cookbook.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dev-cafe/cmake-cookbook/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/dev-cafe/cmake-cookbook.svg?style=flat-square&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dev-cafe/cmake-cookbook/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/dev-cafe/cmake-cookbook.svg?style=flat-square&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dev-cafe/cmake-cookbook/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/dev-cafe/cmake-cookbook.svg?style=flat-square&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CMake Cookbook&lt;/h1&gt; &#xA;&lt;p&gt;This repository collects sources for the recipes contained in the &lt;a href=&#34;https://www.packtpub.com/application-development/cmake-cookbook&#34;&gt;CMake Cookbook&lt;/a&gt; published by Packt and authored by &lt;a href=&#34;https://github.com/bast&#34;&gt;Radovan Bast&lt;/a&gt; and &lt;a href=&#34;https://github.com/robertodr&#34;&gt;Roberto Di Remigio&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/.github/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/testing/README.md&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-01/README.md&#34;&gt;Chapter 1: From a Simple Executable to Libraries&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-01/recipe-01/README.md&#34;&gt;1. Compiling a single source file into an executable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-01/recipe-02/README.md&#34;&gt;2. Switching generators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-01/recipe-03/README.md&#34;&gt;3. Building and linking static and shared libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-01/recipe-04/README.md&#34;&gt;4. Controlling compilation with conditionals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-01/recipe-05/README.md&#34;&gt;5. Presenting options to the user&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-01/recipe-06/README.md&#34;&gt;6. Specifying the compiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-01/recipe-07/README.md&#34;&gt;7. Switching the build type&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-01/recipe-08/README.md&#34;&gt;8. Controlling compiler flags&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-01/recipe-09/README.md&#34;&gt;9. Setting the standard for the language&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-01/recipe-10/README.md&#34;&gt;10. Using control flow constructs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-02/README.md&#34;&gt;Chapter 2: Detecting the Environment&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-02/recipe-01/README.md&#34;&gt;1. Discovering the operating system&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-02/recipe-02/README.md&#34;&gt;2. Dealing with platform-dependent source code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-02/recipe-03/README.md&#34;&gt;3. Dealing with compiler-dependent source code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-02/recipe-04/README.md&#34;&gt;4. Discovering the host processor architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-02/recipe-05/README.md&#34;&gt;5. Discovering the host processor instruction set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-02/recipe-06/README.md&#34;&gt;6. Enabling vectorization for the Eigen library&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-03/README.md&#34;&gt;Chapter 3: Detecting External Libraries and Programs&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-03/recipe-01/README.md&#34;&gt;1. Detecting the Python interpreter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-03/recipe-02/README.md&#34;&gt;2. Detecting the Python library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-03/recipe-03/README.md&#34;&gt;3. Detecting Python modules and packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-03/recipe-04/README.md&#34;&gt;4. Detecting the BLAS and LAPACK math libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-03/recipe-05/README.md&#34;&gt;5. Detecting the OpenMP parallel environment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-03/recipe-06/README.md&#34;&gt;6. Detecting the MPI parallel environment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-03/recipe-07/README.md&#34;&gt;7. Detecting the Eigen library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-03/recipe-08/README.md&#34;&gt;8. Detecting the Boost libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-03/recipe-09/README.md&#34;&gt;9. Detecting external libraries: I. Using &lt;code&gt;pkg-config&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-03/recipe-10/README.md&#34;&gt;10. Detecting external libraries: II. Writing a find-module&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-04/README.md&#34;&gt;Chapter 4: Creating and Running Tests&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-04/recipe-01/README.md&#34;&gt;1. Creating a simple unit test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-04/recipe-02/README.md&#34;&gt;2. Defining a unit test using the Catch2 library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-04/recipe-03/README.md&#34;&gt;3. Defining a unit test and linking against Google Test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-04/recipe-04/README.md&#34;&gt;4. Defining a unit test and linking against Boost test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-04/recipe-05/README.md&#34;&gt;5. Using dynamic analysis to detect memory defects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-04/recipe-06/README.md&#34;&gt;6. Testing expected failures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-04/recipe-07/README.md&#34;&gt;7. Using timeouts for long tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-04/recipe-08/README.md&#34;&gt;8. Running tests in parallel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-04/recipe-09/README.md&#34;&gt;9. Running a subset of tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-04/recipe-10/README.md&#34;&gt;10. Using test fixtures&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-05/README.md&#34;&gt;Chapter 5: Configure-time and Build-time Operations&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-05/recipe-01/README.md&#34;&gt;1. Using platform-independent file operations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-05/recipe-02/README.md&#34;&gt;2. Running a custom command at configure time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-05/recipe-03/README.md&#34;&gt;3. Running a custom command at build time: I. Using &lt;code&gt;add_custom_command&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-05/recipe-04/README.md&#34;&gt;4. Running a custom command at build time: II. Using &lt;code&gt;add_custom_target&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-05/recipe-05/README.md&#34;&gt;5. Running custom commands for specific targets at build time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-05/recipe-06/README.md&#34;&gt;6. Probing compilation and linking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-05/recipe-07/README.md&#34;&gt;7. Probing compiler flags&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-05/recipe-08/README.md&#34;&gt;8. Probing execution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-05/recipe-09/README.md&#34;&gt;9. Fine-tuning configuration and compilation with generator expressions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-06/README.md&#34;&gt;Chapter 6: Generating Source Code&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-06/recipe-01/README.md&#34;&gt;1. Generating sources at configure time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-06/recipe-02/README.md&#34;&gt;2. Generating source code at configure time using Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-06/recipe-03/README.md&#34;&gt;3. Generating source code at build time using Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-06/recipe-04/README.md&#34;&gt;4. Recording the project version information for reproducibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-06/recipe-05/README.md&#34;&gt;5. Recording the project version from a file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-06/recipe-06/README.md&#34;&gt;6. Recording the Git hash at configure time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-06/recipe-07/README.md&#34;&gt;7. Recording the Git hash at build time&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-07/README.md&#34;&gt;Chapter 7: Structuring Projects&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-07/recipe-01/README.md&#34;&gt;1. Code reuse with functions and macros&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-07/recipe-02/README.md&#34;&gt;2. Splitting CMake sources into modules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-07/recipe-03/README.md&#34;&gt;3. Writing a function to test and set compiler flags&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-07/recipe-04/README.md&#34;&gt;4. Defining a function or macro with named arguments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-07/recipe-05/README.md&#34;&gt;5. Redefining functions and macros&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-07/recipe-06/README.md&#34;&gt;6. Deprecating functions, macros, and variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-07/recipe-07/README.md&#34;&gt;7. Limiting scope with &lt;code&gt;add_subdirectory&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-07/recipe-08/README.md&#34;&gt;8. Avoiding global variables using &lt;code&gt;target_sources&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-07/recipe-09/README.md&#34;&gt;9. Organizing Fortran projects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-08/README.md&#34;&gt;Chapter 8: The Superbuild Pattern&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-08/recipe-01/README.md&#34;&gt;1. Using the superbuild pattern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-08/recipe-02/README.md&#34;&gt;2. Managing dependencies with a superbuild: I. The Boost libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-08/recipe-03/README.md&#34;&gt;3. Managing dependencies with a superbuild: II. The FFTW library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-08/recipe-04/README.md&#34;&gt;4. Managing dependencies with a superbuild: III. The Google Test framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-08/recipe-05/README.md&#34;&gt;5. Managing your project as a superbuild&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-09/README.md&#34;&gt;Chapter 9: Mixed-language Projects&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-09/recipe-01/README.md&#34;&gt;1. Building Fortran projects that use C/C++ libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-09/recipe-02/README.md&#34;&gt;2. Building C/C++ projects that use Fortran libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-09/recipe-03/README.md&#34;&gt;3. Building C++ and Python projects using Cython&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-09/recipe-04/README.md&#34;&gt;4. Building C++ and Python projects using Boost.Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-09/recipe-05/README.md&#34;&gt;5. Building C++ and Python projects using pybind11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-09/recipe-06/README.md&#34;&gt;6. Mixing C, C++, Fortran, and Python using Python CFFI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-10/README.md&#34;&gt;Chapter 10: Writing an Installer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-10/recipe-01/README.md&#34;&gt;1. Installing your project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-10/recipe-02/README.md&#34;&gt;2. Generating export headers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-10/recipe-03/README.md&#34;&gt;3. Exporting your targets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-10/recipe-04/README.md&#34;&gt;4. Installing a superbuild&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-11/README.md&#34;&gt;Chapter 11: Packaging Projects&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-11/recipe-01/README.md&#34;&gt;1. Generating source and binary packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-11/recipe-02/README.md&#34;&gt;2. Distributing a C++/Python project built with CMake/pybind11 via PyPI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-11/recipe-03/README.md&#34;&gt;3. Distributing a C/Fortran/Python project built with CMake/CFFI via PyPI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-11/recipe-04/README.md&#34;&gt;4. Distributing a simple project as Conda package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-11/recipe-05/README.md&#34;&gt;5. Distributing a project with dependencies as Conda package&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-12/README.md&#34;&gt;Chapter 12: Building Documentation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-12/recipe-01/README.md&#34;&gt;1. Building documentation using Doxygen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-12/recipe-02/README.md&#34;&gt;2. Building documentation using Sphinx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-12/recipe-03/README.md&#34;&gt;3. Combining Doxygen and Sphinx&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-13/README.md&#34;&gt;Chapter 13: Alternative Generators and Cross-compilation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-13/recipe-01/README.md&#34;&gt;1. Cross-compiling a hello world example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-13/recipe-02/README.md&#34;&gt;2. Cross-compiling a Windows binary with OpenMP parallelization&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-14/README.md&#34;&gt;Chapter 14: Testing Dashboards&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-14/recipe-01/README.md&#34;&gt;1. Deploying tests to the CDash dashboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-14/recipe-02/README.md&#34;&gt;2. Reporting test coverage to the CDash dashboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-14/recipe-03/README.md&#34;&gt;3. Using the AddressSanitizer and reporting memory defects to CDash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-14/recipe-04/README.md&#34;&gt;4. Using the ThreadSanitizer and reporting data races to CDash&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dev-cafe/cmake-cookbook/master/chapter-15/README.md&#34;&gt;Chapter 15: Porting a Project to CMake&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>LabyrinthCore/Labyrinth</title>
    <updated>2022-11-11T01:31:08Z</updated>
    <id>tag:github.com,2022-11-11:/LabyrinthCore/Labyrinth</id>
    <link href="https://github.com/LabyrinthCore/Labyrinth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Labyrinth Core repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Labyrinth Core integration/staging tree&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://labyrinthcore.org&#34;&gt;https://labyrinthcore.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Labyrinth?&lt;/h2&gt; &#xA;&lt;p&gt;Labyrinth Core (LAB) is an open-source, Bitcoin-derived digital currency that serves as the core of our escrow service. Labyrinth Escrow is a platform where multiple parties can transact with each other, under predefined conditions, without the need for trust. This is possible due to conditions being set and executed similarly to smart contracts. The entire transaction validation happens on the chain, rendering the usual escrow attacks impractical.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Labyrinth Core is released under the terms of the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/LabyrinthCore/Labyrinth/main/COPYING&#34;&gt;COPYING&lt;/a&gt; for more information or see &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development Process&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch is regularly built (see &lt;code&gt;doc/build-*.md&lt;/code&gt; for instructions) and tested, but it is not guaranteed to be completely stable. &lt;a href=&#34;https://github.com/labyrinth/labyrinth/tags&#34;&gt;Tags&lt;/a&gt; are created regularly from release branches to indicate new official, stable release versions of Labyrinth Core.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/labyrinth-core/gui&#34;&gt;https://github.com/labyrinth-core/gui&lt;/a&gt; repository is used exclusively for the development of the GUI. Its master branch is identical in all monotree repositories. Release branches and tags do not exist, so please do not fork that repository unless it is for development reasons.&lt;/p&gt; &#xA;&lt;p&gt;The contribution workflow is described in &lt;a href=&#34;https://raw.githubusercontent.com/LabyrinthCore/Labyrinth/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; and useful hints for developers can be found in &lt;a href=&#34;https://raw.githubusercontent.com/LabyrinthCore/Labyrinth/main/doc/developer-notes.md&#34;&gt;doc/developer-notes.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Testing and code review is the bottleneck for development; we get more pull requests than we can review and test on short notice. Please be patient and help out by testing other people&#39;s pull requests, and remember this is a security-critical project where any mistake might cost people lots of money.&lt;/p&gt; &#xA;&lt;h3&gt;Automated Testing&lt;/h3&gt; &#xA;&lt;p&gt;Developers are strongly encouraged to write &lt;a href=&#34;https://raw.githubusercontent.com/LabyrinthCore/Labyrinth/main/src/test/README.md&#34;&gt;unit tests&lt;/a&gt; for new code, and to submit new unit tests for old code. Unit tests can be compiled and run (assuming they weren&#39;t disabled in configure) with: &lt;code&gt;make check&lt;/code&gt;. Further details on running and extending unit tests can be found in &lt;a href=&#34;https://raw.githubusercontent.com/LabyrinthCore/Labyrinth/main/src/test/README.md&#34;&gt;/src/test/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are also &lt;a href=&#34;https://raw.githubusercontent.com/LabyrinthCore/Labyrinth/main/test&#34;&gt;regression and integration tests&lt;/a&gt;, written in Python, that are run automatically on the build server. These tests can be run (if the &lt;a href=&#34;https://raw.githubusercontent.com/LabyrinthCore/Labyrinth/main/test&#34;&gt;test dependencies&lt;/a&gt; are installed) with: &lt;code&gt;test/functional/test_runner.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual Quality Assurance (QA) Testing&lt;/h3&gt; &#xA;&lt;p&gt;Changes should be tested by somebody other than the developer who wrote the code. This is especially important for large or high-risk changes. It is useful to add a test plan to the pull request description if testing the changes is not straightforward.&lt;/p&gt;</summary>
  </entry>
</feed>