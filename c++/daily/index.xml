<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-26T01:32:50Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PowerDNS/pdns</title>
    <updated>2022-10-26T01:32:50Z</updated>
    <id>tag:github.com,2022-10-26:/PowerDNS/pdns</id>
    <link href="https://github.com/PowerDNS/pdns" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PowerDNS Authoritative, PowerDNS Recursor, dnsdist&lt;/p&gt;&lt;hr&gt;&lt;p&gt;PowerDNS is copyright Â© 2001-2021 by PowerDNS.COM BV and lots of contributors, using the GNU GPLv2 license (see NOTICE for the exact license and exception used).&lt;/p&gt; &#xA;&lt;p&gt;All documentation can be found on &lt;a href=&#34;https://doc.powerdns.com/&#34;&gt;https://doc.powerdns.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This file may lag behind at times. For most recent updates, always check &lt;a href=&#34;https://doc.powerdns.com/authoritative/changelog/&#34;&gt;https://doc.powerdns.com/authoritative/changelog/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Another good place to look for information is: &lt;a href=&#34;https://doc.powerdns.com/authoritative/appendices/compiling.html&#34;&gt;https://doc.powerdns.com/authoritative/appendices/compiling.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To file bugs, head towards: &lt;a href=&#34;https://github.com/PowerDNS/pdns/issues&#34;&gt;https://github.com/PowerDNS/pdns/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;But please check if the issue is already reported there first.&lt;/p&gt; &#xA;&lt;h2&gt;DOCKER&lt;/h2&gt; &#xA;&lt;p&gt;This README is mirrored from GitHub to dockerhub. For information about our Docker images, please refer to &lt;a href=&#34;https://github.com/PowerDNS/pdns/raw/master/Docker-README.md&#34;&gt;https://github.com/PowerDNS/pdns/blob/master/Docker-README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;SOURCE CODE / GIT&lt;/h2&gt; &#xA;&lt;p&gt;Source code is available on GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/PowerDNS/pdns.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This repository contains the sources for the PowerDNS Recursor, the PowerDNS Authoritative Server, and dnsdist (a powerful DNS loadbalancer). All three can be built from this repository. However, all three released separately as .tar.bz2, .deb and .rpm.&lt;/p&gt; &#xA;&lt;p&gt;The different releases can be built by the help of pdns-builder, which uses a docker-based build process. To get started with this, run these commands in the root of this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule init&#xA;git submodule update&#xA;./builder/build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will bring up a USAGE-page which will explain how to build the different releases.&lt;/p&gt; &#xA;&lt;h2&gt;COMPILING Authoritative Server&lt;/h2&gt; &#xA;&lt;p&gt;The PowerDNS Authoritative Server depends on Boost, OpenSSL and Lua, and requires a compiler with C++-2017 support.&lt;/p&gt; &#xA;&lt;p&gt;On Debian 9, the following is useful:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt install g++ libboost-all-dev libtool make pkg-config default-libmysqlclient-dev libssl-dev libluajit-5.1-dev python3-venv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When building from git, the following packages are also required:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt install autoconf automake ragel bison flex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Ubuntu 18.04 (Bionic Beaver), the following packages should be installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt install libcurl4-openssl-dev luajit lua-yaml-dev libyaml-cpp-dev libtolua-dev lua5.3 autoconf automake ragel bison flex g++ libboost-all-dev libtool make pkg-config libssl-dev lua-yaml-dev libyaml-cpp-dev libluajit-5.1-dev libcurl4 gawk libsqlite3-dev python3-venv&#xA;# For DNSSEC ed25519 (algorithm 15) support with --with-libsodium&#xA;apt install libsodium-dev&#xA;# If using the gmysql (Generic MySQL) backend&#xA;apt install default-libmysqlclient-dev&#xA;# If using the gpgsql (Generic PostgreSQL) backend&#xA;apt install libpq-dev&#xA;# If using --enable-systemd (will create the service scripts so it can be managed with systemctl/service)&#xA;apt install libsystemd0 libsystemd-dev&#xA;# If using the geoip backend&#xA;apt install libmaxminddb-dev libmaxminddb0 libgeoip1 libgeoip-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then generate the configure file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;autoreconf -vi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile a very clean version, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./configure --with-modules=&#34;&#34; --disable-lua-records&#xA;make&#xA;# make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This generates a PowerDNS Authoritative Server binary with no modules built in.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://doc.powerdns.com/authoritative/backends/index.html&#34;&gt;https://doc.powerdns.com/authoritative/backends/index.html&lt;/a&gt; for a list of available modules.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;./configure&lt;/code&gt; is run without &lt;code&gt;--with-modules&lt;/code&gt;, the bind and gmysql module are built-in by default and the pipe-backend is compiled for runtime loading.&lt;/p&gt; &#xA;&lt;p&gt;To add multiple modules, try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./configure --with-modules=&#34;bind gmysql gpgsql&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you will need the development headers for PostgreSQL as well in this case.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://doc.powerdns.com/authoritative/appendices/compiling.html&#34;&gt;https://doc.powerdns.com/authoritative/appendices/compiling.html&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;If you run into C++11-related symbol trouble, please try passing &lt;code&gt;CPPFLAGS=-D_GLIBCXX_USE_CXX11_ABI=0&lt;/code&gt; (or 1) to &lt;code&gt;./configure&lt;/code&gt; to make sure you are compatible with the installed dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling the Recursor&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/PowerDNS/pdns/master/pdns/recursordist/README.md&#34;&gt;README.md&lt;/a&gt; in &lt;code&gt;pdns/recursordist/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling dnsdist&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/PowerDNS/pdns/master/pdns/README-dnsdist.md&#34;&gt;README-dnsdist.md&lt;/a&gt; in &lt;code&gt;pdns/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building the HTML documentation&lt;/h2&gt; &#xA;&lt;p&gt;The HTML documentation (as seen &lt;a href=&#34;https://doc.powerdns.com/authoritative/&#34;&gt;on the PowerDNS docs site&lt;/a&gt;) is built from ReStructured Text (rst) files located in &lt;code&gt;docs&lt;/code&gt;. They are compiled into HTML files using &lt;a href=&#34;http://www.sphinx-doc.org/en/master/index.html&#34;&gt;Sphinx&lt;/a&gt;, a documentation generator tool which is built in Python.&lt;/p&gt; &#xA;&lt;p&gt;Install the dependencies under &#34;COMPILING&#34;, and run autoreconf if you haven&#39;t already:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;autoreconf -vi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enter the &lt;code&gt;docs&lt;/code&gt; folder, and use make to build the HTML docs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd docs&#xA;make html-docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The HTML documentation will now be available in &lt;code&gt;html-docs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FreeBSD Notes&lt;/h2&gt; &#xA;&lt;p&gt;You need to compile using gmake - regular make only appears to work, but doesn&#39;t in fact. Use gmake, not make.&lt;/p&gt; &#xA;&lt;p&gt;The clang compiler installed through FreeBSD&#39;s package manager does not expose all of the C++17 features needed under the default &lt;code&gt;std=gnuc++14&lt;/code&gt;. Force the compiler to use &lt;code&gt;std=c++17&lt;/code&gt; mode instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export CXXFLAGS=-std=c++17&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;macOS Notes&lt;/h2&gt; &#xA;&lt;p&gt;PowerDNS Authoritative Server is available through Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install pdns&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to compile yourself, the dependencies can be installed using Homebrew. You need to tell configure where to find OpenSSL, too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install boost lua pkg-config ragel openssl&#xA;./configure --with-modules=&#34;&#34; PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, for PostgreSQL support, run &lt;code&gt;brew install postgresql&lt;/code&gt; and add &lt;code&gt;--with-modules=&#34;gpgsql&#34;&lt;/code&gt; to &lt;code&gt;./configure&lt;/code&gt;. For MySQL support, run &lt;code&gt;brew install mariadb&lt;/code&gt; and add &lt;code&gt;--with-modules=&#34;gmysql&#34;&lt;/code&gt; to &lt;code&gt;./configure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Linux notes&lt;/h2&gt; &#xA;&lt;p&gt;None really.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>i2Nav-WHU/KF-GINS</title>
    <updated>2022-10-26T01:32:50Z</updated>
    <id>tag:github.com,2022-10-26:/i2Nav-WHU/KF-GINS</id>
    <link href="https://github.com/i2Nav-WHU/KF-GINS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An EKF-Based GNSS/INS Integrated Navigation System&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KF-GINS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/i2Nav-WHU/KF-GINS/main/README_CN.md&#34;&gt;[ä¸­]&lt;/a&gt; â &lt;a href=&#34;https://raw.githubusercontent.com/i2Nav-WHU/KF-GINS/main/README.md&#34;&gt;[EN]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;An EKF-Based GNSS/INS Integrated Navigation System&lt;/h2&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;We open-source KF-GINS[^1], an EKF-based GNSS/INS integrated navigation system. KF-GINS implements the classical integrated navigation solution of GNSS positioning results and IMU data. The KF-GINS follows the course content of &#34;Inertial Navigation Principles and GNSS/INS Integrated Navigation&#34; by Prof. Xiaoji Niu and Dr. Qijin Chen, as a supporting resource for the cource. The software is developed in C++ programming language, and CMake is used to manage the project.&lt;/p&gt; &#xA;&lt;p&gt;The main features of KF-GINS are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A GNSS/INS loosely-coupled integrated navigation algorithm based on the extended Kalman filter architecture (error state vector), including IMU error compensation, inertial navigation solution, Kalman filter, error feedback, etc.&lt;/li&gt; &#xA; &lt;li&gt;21-dimensional error states are defined in the system, including position errors, velocity errors, attitude errors, IMU bias errors, and IMU scale factor errors&lt;/li&gt; &#xA; &lt;li&gt;The attitude errors adopt the Phi-angle model, and the velocity errors and position errors are defined in the navigation frame.&lt;/li&gt; &#xA; &lt;li&gt;The inertial navigation solution adopts the two-sample mechanization algorithm based on the linear assumption, which compensates for the second-order coning correction, the rotational motion, and the sculling motion.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Origanization:&lt;/strong&gt; &lt;a href=&#34;http://www.i2nav.com/&#34;&gt;Integrated and Intelligent Navigation (i2Nav) Group&lt;/a&gt;, GNSS Research Center, Wuhan University.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Related Reference:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;çå°éª¥, éèµ·é, &#34;&lt;a href=&#34;http://www.i2nav.com/index/newListDetail_zw.do?newskind_id=13a8654e060c40c69e5f3d4c13069078&amp;amp;newsinfo_id=40f3c65b158742c099ba3b600c983aa1&#34;&gt;æ¯æ§å¯¼èªåçä¸GNSS/INSç»åå¯¼èªè¯¾ç¨è®²ä¹&lt;/a&gt;&#34;, æ­¦æ±å¤§å­¦å¤æºæºè½å¯¼èªå®éªå®¤, 2022&lt;/li&gt; &#xA; &lt;li&gt;çå°éª¥, éèµ·é, &#34;&lt;a href=&#34;https://www.bilibili.com/video/BV1na411Z7rQ?spm_id_from=333.999.0.0&amp;amp;vd_source=a417ebe0768fc96919fe8e34c55ed591&#34;&gt;æ¯æ§å¯¼èªåçä¸GNSS/INSç»åå¯¼èªè¯¾ç¨è§é¢&lt;/a&gt;&#34;, æ­¦æ±å¤§å­¦å¤æºæºè½å¯¼èªå®éªå®¤ï¼ 2022&lt;/li&gt; &#xA; &lt;li&gt;X. Niu, Q. Zhang, L. Gong, C. Liu, H. Zhang, C. Shi, J. Wang and M. Coleman (2014). &#34;Development and evaluation of GNSS/INS data processing software for position and orientation systems.&#34; Survey Review 2014; 47(341), 87-98.&lt;/li&gt; &#xA; &lt;li&gt;ä¸¥æ­æ, ç¿æµ, æ·èæ¯å¯¼ç®æ³ä¸ç»åå¯¼èªåç. è¥¿åå·¥ä¸å¤§å­¦åºçç¤¾, 2019.&lt;/li&gt; &#xA; &lt;li&gt;E.-H. Shin, &#34;Estimation techniques for low-cost inertial navigation,&#34; Ph.D. dissertation, Dept. Geomatics Eng., Univ. of Calary, AB, Cabada, 2005&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.strapdownassociates.com/&#34;&gt;Savage, P.G.&lt;/a&gt;, &#34;Strapdown analytics, Part I&#34;, Maple Plain, MN: Strapdown Associates, 2000.&lt;/li&gt; &#xA; &lt;li&gt;Titterton David, JohnL. Weston, and John Weston, &#34;Strapdown inertial navigation technology&#34;, The Institution of Electrical Engineers, 2004.&lt;/li&gt; &#xA; &lt;li&gt;P. D. Groves, &#34;Principles of GNSS, Inertial, and Multi-sensor Integrated Navigation Systems&#34;, 2nd ed., vol. 39. Artech House, 2013.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you use this software for your academic research, please give acknowledgment as follows and cite our &lt;a href=&#34;https://raw.githubusercontent.com/i2Nav-WHU/KF-GINS/main/ref.bib&#34;&gt;related document and papers&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;English version: âThe authors would like to acknowledge the team of Prof. Xiaoji Niu of the Integrated and Intelligent Navigation (i2Nav) group from GNSS Research Center of Wuhan University for providing the open-source KF-GINS software that was used in the paper.â&#xA;ä¸­ææ¨¡æ¿ï¼âæ¬æä½èæè°¢æ­¦æ±å¤§å­¦å«æå¯¼èªå®ä½ææ¯ç ç©¶ä¸­å¿å¤æºæºè½å¯¼èªå®éªå®¤(i2Nav)çå°éª¥ææå¢éå¼æºçKF-GINSè½¯ä»¶å¹³å°ãâ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contacts:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For any technique problem, you can send an email to Liqiang Wang (&lt;a href=&#34;mailto:wlq@whu.edu.cn&#34;&gt;wlq@whu.edu.cn&lt;/a&gt;) or Dr. Hailiang Tang (&lt;a href=&#34;mailto:thl@whu.edu.cn&#34;&gt;thl@whu.edu.cn&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;For Chinese users, we also provide a QQ group (481173293) for discussion. You are requested to provide your organization and name to join the QQ group.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[^1]: We also open-sourced &lt;a href=&#34;https://github.com/i2Nav-WHU/OB_GINS&#34;&gt;OB_GINS&lt;/a&gt;, an optimization-based GNSS/INS integrated navigation system.&lt;/p&gt; &#xA;&lt;h2&gt;1 Program Compilation and Execution&lt;/h2&gt; &#xA;&lt;h3&gt;1.1 Compilation environment&lt;/h3&gt; &#xA;&lt;p&gt;KF-GINS is managed by CMake and can be complied on all of Linux, MacOS and Windows. We recommend you choose Linux environment first.&lt;/p&gt; &#xA;&lt;p&gt;The configuration file is used as a parameter to run KF-GINS after successfully compiling it. To debug the program, it is also required to add the configuration file as a parameter.&lt;/p&gt; &#xA;&lt;h3&gt;1.2 Dependency libraries&lt;/h3&gt; &#xA;&lt;p&gt;KF-GINS requires another three libraries, which are Eigen3, abseil-cpp, and yaml-cpp. We have appended them as the thirdparty libraries in the &lt;strong&gt;ThirdParty&lt;/strong&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;1.3 Compile under Linux&lt;/h3&gt; &#xA;&lt;p&gt;We recommend you use g++ complier of Ubuntu18.04 or Ubuntu20.04 to compile KF-GINS. You should install the build-essential libraries following the commonds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install cmake&#xA;sudo apt-get install build-essential&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After preparing your own compilation environment, you can clone the repository locally and compile KF-GINS as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Clone the repository&#xA;git clone https://github.com/i2Nav-WHU/KF-GINS.git ~/&#xA;&#xA;# Build KF-GINS&#xA;cd ~/KF-GINS&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;&#xA;cmake ../ -DCMAKE_BUILD_TYPE=Release &#xA;make -j8&#xA;&#xA;# Run demo dataset&#xA;cd ~/KF-GINS&#xA;./bin/KF-GINS ./dataset/kf-gins.yaml&#xA;&#xA;# Wait until the program finish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1.4 Compile under Windows&lt;/h3&gt; &#xA;&lt;p&gt;The MSVC(Microsoft Visual C/C++) compiler is generally used in Windows. We recommend you to compile KF-GINS in the VSCode software.&lt;/p&gt; &#xA;&lt;p&gt;You should first install the MSVC compiler and VScode software (including the necessary plug-ins, such as C/C++, C/C++ Extension Pack, CMake, and CMake Tools).&lt;/p&gt; &#xA;&lt;p&gt;After preparing your own compilation environment, you can clone the repository locally and open the KF-GINS folder in VSCode:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set complier: open the Command Palette (Ctrl+Shift+P) and type &#34;CMake: Select a Kit&#34;, select the MSVC compilier&lt;/li&gt; &#xA; &lt;li&gt;Set compile parameter: type &#34;CMake: Select Variant&#34; in the Command Palette, select &#34;Release&#34;&lt;/li&gt; &#xA; &lt;li&gt;Configure CMake: type &#34;CMake: Configure&#34; in the Command Palette&lt;/li&gt; &#xA; &lt;li&gt;Compile Project: type &#34;CMake: Build&#34; in the Command Palette&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Open a PowerShell or CMD terminal in the project directory and run the test dataset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;.\bin\KF-GINS.exe .\dataset\kf-gins.yaml&#xA;# The executable file may be generated in the &#39;.\bin\Release&#39; directory. Then the command is:&#xA;# .\bin\Release\KF-GINS.exe .\dataset\kf-gins.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1.5 Compile under MacOS&lt;/h3&gt; &#xA;&lt;p&gt;xcode-select and cmake in MacOS. You should install these tools following the commonds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;xcode-select --install&#xA;brew install cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After preparing your own compilation environment, you can clone the repository locally and compile KF-GINS as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Clone the repository&#xA;git clone https://github.com/i2Nav-WHU/KF-GINS.git ~/&#xA;&#xA;# Build KF-GINS&#xA;cd ~/KF-GINS&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;&#xA;cmake ../ -DCMAKE_BUILD_TYPE=Release &#xA;make -j8&#xA;&#xA;# Run demo dataset&#xA;cd ~/KF-GINS&#xA;./bin/KF-GINS ./dataset/kf-gins.yaml&#xA;&#xA;# Wait until the program finish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2 Use KF-GINS&lt;/h2&gt; &#xA;&lt;h3&gt;2.1 Prerequisite Knowledge&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Frame defination:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IMU frame: the origin is the IMU center, the three axes point forward-right-down&lt;/li&gt; &#xA; &lt;li&gt;Navigation reference frame: the origin coincides with the IMU frame, the three axes point north-east-down&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Navigation state:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;position: the geodetic coordinates of the IMU position in the Earth frame (latitude-longitude-ellipsoid height)&lt;/li&gt; &#xA; &lt;li&gt;velocity: the IMU velocity to the Earth projected in the navigation reference frame (north speed-east speed-down speed)&lt;/li&gt; &#xA; &lt;li&gt;attitude: IMU attitude to navigation frame (quaternion, direction consine matrix, or euler angles. euler angles are defined as yaw-pitch-roll, ZYX rotation order)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMU noise model:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IMU measurement noises are modeled as the Gaussian white noise&lt;/li&gt; &#xA; &lt;li&gt;IMU bias errors are modeled as the firt-order Gauss-Markov process&lt;/li&gt; &#xA; &lt;li&gt;IMU scale factor errors are modeled as the firt-order Gauss-Markov process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details on the algorithm, please refer to &lt;a href=&#34;http://www.i2nav.com/index/newListDetail_zw.do?newskind_id=13a8654e060c40c69e5f3d4c13069078&amp;amp;newsinfo_id=40f3c65b158742c099ba3b600c983aa1&#34;&gt;æ¯æ§å¯¼èªåçä¸GNSS/INSç»åå¯¼èªè¯¾ç¨è®²ä¹&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;2.2 Data format&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The IMU text file format is defined as:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Columns&lt;/th&gt; &#xA;   &lt;th&gt;Data description&lt;/th&gt; &#xA;   &lt;th&gt;Units&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;GNSS seconds of week&lt;/td&gt; &#xA;   &lt;td&gt;$s$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2~4&lt;/td&gt; &#xA;   &lt;td&gt;X-Y-Z axes incremental angles&lt;/td&gt; &#xA;   &lt;td&gt;$rad$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5~7&lt;/td&gt; &#xA;   &lt;td&gt;X-Y-Z axes incremental velocity&lt;/td&gt; &#xA;   &lt;td&gt;$m/s$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The GNSS position text file format is defined as:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Columns&lt;/th&gt; &#xA;   &lt;th&gt;Data description&lt;/th&gt; &#xA;   &lt;th&gt;Units&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;GNSS seconds of week&lt;/td&gt; &#xA;   &lt;td&gt;$s$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;latitude&lt;/td&gt; &#xA;   &lt;td&gt;$deg$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;longitude&lt;/td&gt; &#xA;   &lt;td&gt;$deg$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;ellipsoid altitude&lt;/td&gt; &#xA;   &lt;td&gt;$m$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5~7&lt;/td&gt; &#xA;   &lt;td&gt;position STD (north-east-down)&lt;/td&gt; &#xA;   &lt;td&gt;$m$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The text file format of the navigation result and the ground-truth is defined as:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Columns&lt;/th&gt; &#xA;   &lt;th&gt;Data description&lt;/th&gt; &#xA;   &lt;th&gt;Units&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;GNSS week&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;GNSS seconds of week&lt;/td&gt; &#xA;   &lt;td&gt;$s$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;latitude&lt;/td&gt; &#xA;   &lt;td&gt;$deg$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;longitude&lt;/td&gt; &#xA;   &lt;td&gt;$deg$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;ellipsoid altitude&lt;/td&gt; &#xA;   &lt;td&gt;$m$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6~8&lt;/td&gt; &#xA;   &lt;td&gt;3-D velocity (north-east-down)&lt;/td&gt; &#xA;   &lt;td&gt;$m/s$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9~11&lt;/td&gt; &#xA;   &lt;td&gt;attitude angles (roll-pitch-yaw)&lt;/td&gt; &#xA;   &lt;td&gt;$deg$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The IMU error binary file format(all double data) is defined as:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Columns&lt;/th&gt; &#xA;   &lt;th&gt;Data description&lt;/th&gt; &#xA;   &lt;th&gt;Units&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;GNSS seconds of week&lt;/td&gt; &#xA;   &lt;td&gt;$s$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2~4&lt;/td&gt; &#xA;   &lt;td&gt;X-Y-Z axes gyroscope biases&lt;/td&gt; &#xA;   &lt;td&gt;$deg/h$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5~7&lt;/td&gt; &#xA;   &lt;td&gt;X-Y-Z axes accelerometer biases&lt;/td&gt; &#xA;   &lt;td&gt;$mGal$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8~10&lt;/td&gt; &#xA;   &lt;td&gt;X-Y-Z axes gyroscope scale factors&lt;/td&gt; &#xA;   &lt;td&gt;$ppm$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11~13&lt;/td&gt; &#xA;   &lt;td&gt;X-Y-Z axes accelerometer scale factors&lt;/td&gt; &#xA;   &lt;td&gt;$ppm$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The state STD binary file format(all double data) is defined as:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Columns&lt;/th&gt; &#xA;   &lt;th&gt;Data description&lt;/th&gt; &#xA;   &lt;th&gt;Units&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;GNSS seconds of week&lt;/td&gt; &#xA;   &lt;td&gt;$s$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2~4&lt;/td&gt; &#xA;   &lt;td&gt;3-D position STD (north-east-down)&lt;/td&gt; &#xA;   &lt;td&gt;$m$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5~7&lt;/td&gt; &#xA;   &lt;td&gt;3-D velocity STD (north-east-down)&lt;/td&gt; &#xA;   &lt;td&gt;$m/s$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8~10&lt;/td&gt; &#xA;   &lt;td&gt;3-D attitude STD (roll-pitch-yaw)&lt;/td&gt; &#xA;   &lt;td&gt;$deg$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11~13&lt;/td&gt; &#xA;   &lt;td&gt;X-Y-Z axes gyroscope bias STD&lt;/td&gt; &#xA;   &lt;td&gt;$deg/h$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14~16&lt;/td&gt; &#xA;   &lt;td&gt;X-Y-Z axes accelerometer bias STD&lt;/td&gt; &#xA;   &lt;td&gt;$mGal$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17~19&lt;/td&gt; &#xA;   &lt;td&gt;X-Y-Z axes gyroscope scale factor STD&lt;/td&gt; &#xA;   &lt;td&gt;$ppm$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20~22&lt;/td&gt; &#xA;   &lt;td&gt;X-Y-Z axes accelerometer scale factor STD&lt;/td&gt; &#xA;   &lt;td&gt;$ppm$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;2.3 Initial align&lt;/h3&gt; &#xA;&lt;p&gt;KF-GINS only supports initial alignment given all initial states currently. The initial states need to be set in the configuration file (kf-gins.yaml) before executing the program.&lt;/p&gt; &#xA;&lt;h2&gt;3 Datasets&lt;/h2&gt; &#xA;&lt;h3&gt;3.1 Demo dataset&lt;/h3&gt; &#xA;&lt;p&gt;We offer a demo dataset with the configuration file, which is located in the &lt;strong&gt;dataset&lt;/strong&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;3.2 awesome-gins-datasets&lt;/h3&gt; &#xA;&lt;p&gt;Users can find our open-sourced datasets at &lt;strong&gt;&lt;a href=&#34;https://github.com/i2Nav-WHU/awesome-gins-datasets&#34;&gt;awesome-gins-datasets&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;3.3 Your own dataset&lt;/h3&gt; &#xA;&lt;p&gt;The data formats used in KF-GINS are the same as the formats defined at &lt;strong&gt;&lt;a href=&#34;https://github.com/i2Nav-WHU/awesome-gins-datasets&#34;&gt;awesome-gins-datasets&lt;/a&gt;&lt;/strong&gt;. You can follow the formats to prepare your own datasets.&lt;/p&gt; &#xA;&lt;h2&gt;4 License&lt;/h2&gt; &#xA;&lt;p&gt;The source code is released under GPLv3 license.&lt;/p&gt; &#xA;&lt;p&gt;We are still working on improving the code reliability. For any technical issues, please contact Liqiang Wang (&lt;a href=&#34;mailto:wlq@whu.edu.cn&#34;&gt;wlq@whu.edu.cn&lt;/a&gt;) or Hailiang Tang (&lt;a href=&#34;mailto:thl@whu.edu.cn&#34;&gt;thl@whu.edu.cn&lt;/a&gt;), or open an issue at this repository. For commercial usage, please contact Prof. Xiaoji Niu (&lt;a href=&#34;mailto:xjniu@whu.edu.cn&#34;&gt;xjniu@whu.edu.cn&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/cpprestsdk</title>
    <updated>2022-10-26T01:32:50Z</updated>
    <id>tag:github.com,2022-10-26:/microsoft/cpprestsdk</id>
    <link href="https://github.com/microsoft/cpprestsdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The C++ REST SDK is a Microsoft project for cloud-based client-server communication in native code using a modern asynchronous C++ API design. This project aims to help C++ developers connect to and interact with services.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;cpprestsdk is in maintenance mode and we do not recommend its use in new projects. We will continue to fix critical bugs and address security issues.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Welcome!&lt;/h2&gt; &#xA;&lt;p&gt;The C++ REST SDK is a Microsoft project for cloud-based client-server communication in native code using a modern asynchronous C++ API design. This project aims to help C++ developers connect to and interact with services.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/metapackage/cpprestsdk&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/vcpkg/cpprestsdk.svg?sanitize=true&#34; alt=&#34;Vcpkg package&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://repology.org/metapackage/cpprestsdk&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/homebrew/cpprestsdk.svg?sanitize=true&#34; alt=&#34;Homebrew package&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://repology.org/metapackage/cpprestsdk&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/ubuntu_18_04/cpprestsdk.svg?sanitize=true&#34; alt=&#34;Ubuntu 18.04 package&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://repology.org/metapackage/cpprestsdk&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/fedora_rawhide/cpprestsdk.svg?sanitize=true&#34; alt=&#34;Fedora Rawhide package&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://repology.org/metapackage/cpprestsdk&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/opensuse_tumbleweed/cpprestsdk.svg?sanitize=true&#34; alt=&#34;openSUSE Tumbleweed package&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://repology.org/metapackage/cpprestsdk&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/debian_testing/cpprestsdk.svg?sanitize=true&#34; alt=&#34;Debian Testing package&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/vclibs/cpprestsdk/_build/latest?definitionId=1&#34;&gt;&lt;img src=&#34;https://dev.azure.com/vclibs/cpprestsdk/_apis/build/status/Microsoft.cpprestsdk.Ubuntu&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; on Windows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS&amp;gt; vcpkg install cpprestsdk cpprestsdk:x64-windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://launchpad.net/ubuntu/+source/casablanca/2.8.0-2build2&#34;&gt;apt-get&lt;/a&gt; on Debian/Ubuntu&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libcpprest-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://apps.fedoraproject.org/packages/cpprest&#34;&gt;dnf&lt;/a&gt; on Fedora&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo dnf install cpprest-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/Homebrew/homebrew-core/raw/master/Formula/cpprestsdk.rb&#34;&gt;brew&lt;/a&gt; on OSX&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install cpprestsdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://www.nuget.org/packages/cpprestsdk.android/&#34;&gt;NuGet&lt;/a&gt; on Windows for Android&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PM&amp;gt; Install-Package cpprestsdk.android&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For other platforms, install options, how to build from source, and more, take a look at our &lt;a href=&#34;https://github.com/Microsoft/cpprestsdk/wiki&#34;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you have the library, look at our &lt;a href=&#34;https://github.com/Microsoft/cpprestsdk/wiki/Getting-Started-Tutorial&#34;&gt;tutorial&lt;/a&gt; to use the http_client. It walks through how to setup a project to use the C++ Rest SDK and make a basic Http request.&lt;/p&gt; &#xA;&lt;p&gt;To use from CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;cmake_minimum_required(VERSION 3.9)&#xA;project(main)&#xA;&#xA;find_package(cpprestsdk REQUIRED)&#xA;&#xA;add_executable(main main.cpp)&#xA;target_link_libraries(main PRIVATE cpprestsdk::cpprest)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What&#39;s in the SDK:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features - HTTP client/server, JSON, URI, asynchronous streams, WebSockets client, oAuth&lt;/li&gt; &#xA; &lt;li&gt;PPL Tasks - A powerful model for composing asynchronous operations based on C++ 11 features&lt;/li&gt; &#xA; &lt;li&gt;Platforms - Windows desktop, Windows Store (UWP), Linux, OS X, Unix, iOS, and Android&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://visualstudio.microsoft.com/&#34;&gt;Visual Studio 2015 and 2017&lt;/a&gt; with debugger visualizers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute Back!&lt;/h2&gt; &#xA;&lt;p&gt;Is there a feature missing that you&#39;d like to see, or found a bug that you have a fix for? Or do you have an idea or just interest in helping out in building the library? Let us know and we&#39;d love to work with you. For a good starting point on where we are headed and feature ideas, take a look at our &lt;a href=&#34;https://github.com/Microsoft/cpprestsdk/issues&#34;&gt;requested features and bugs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Big or small we&#39;d like to take your &lt;a href=&#34;https://github.com/Microsoft/cpprestsdk/wiki/Make-a-contribution-and-report-issues&#34;&gt;contributions&lt;/a&gt; back to help improve the C++ Rest SDK for everyone. If interested contact us askcasablanca at Microsoft dot com.&lt;/p&gt; &#xA;&lt;h2&gt;Having Trouble?&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d love to get your review score, whether good or bad, but even more than that, we want to fix your problem. If you submit your issue as a Review, we won&#39;t be able to respond to your problem and ask any follow-up questions that may be necessary. The most efficient way to do that is to open an issue in our &lt;a href=&#34;https://github.com/Microsoft/cpprestsdk/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/cpprestsdk/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/cpprestsdk/wiki&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/cpprestsdk/issues&#34;&gt;Issue Tracker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
</feed>