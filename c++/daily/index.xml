<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-13T01:39:34Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ac-1337/Alaa-8ball-pool-source-exposed</title>
    <updated>2022-06-13T01:39:34Z</updated>
    <id>tag:github.com,2022-06-13:/ac-1337/Alaa-8ball-pool-source-exposed</id>
    <link href="https://github.com/ac-1337/Alaa-8ball-pool-source-exposed" rel="alternate"></link>
    <summary type="html">&lt;p&gt;8ball pool heck&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alaa-8ball-pool-source-exposed&lt;/h1&gt; &#xA;&lt;p&gt;I apologise for the name&lt;/p&gt; &#xA;&lt;p&gt;Hello, this is just a fixed source i have nothing to do with him, atm. Have a nice day.&lt;/p&gt; &#xA;&lt;p&gt;Photos: &lt;a href=&#34;https://cdn.discordapp.com/attachments/976573206360113162/983119408618692618/unknown.png&#34;&gt;https://cdn.discordapp.com/attachments/976573206360113162/983119408618692618/unknown.png&lt;/a&gt; &lt;a href=&#34;https://cdn.discordapp.com/attachments/979095925542776923/983115157246992394/unknown.png&#34;&gt;https://cdn.discordapp.com/attachments/979095925542776923/983115157246992394/unknown.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;How to use:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the sln file&lt;/li&gt; &#xA; &lt;li&gt;Put Relase x64&lt;/li&gt; &#xA; &lt;li&gt;do CTRL+B&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;I dont know if you need to update offsets anyway.&lt;/p&gt; &#xA;&lt;p&gt;UPDATES: V1.0 -&amp;gt; Posted This&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zhongyang219/TrafficMonitor</title>
    <updated>2022-06-13T01:39:34Z</updated>
    <id>tag:github.com,2022-06-13:/zhongyang219/TrafficMonitor</id>
    <link href="https://github.com/zhongyang219/TrafficMonitor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;这是一个用于显示当前网速、CPU及内存利用率的桌面悬浮窗软件，并支持任务栏显示，支持更换皮肤。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;简体中文 | &lt;a href=&#34;https://raw.githubusercontent.com/zhongyang219/TrafficMonitor/master/README_en-us.md&#34;&gt;English&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://996.icu/#/en_US&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/link-996.icu-%23FF4D5B.svg?style=flat-square&#34; alt=&#34;Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/996icu/996.ICU/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Anti%20996-blue.svg?style=flat-square&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zhongyang219/TrafficMonitor/actions?query=workflow:%22Release+CI%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/zhongyang219/TrafficMonitor/Release%20CI?label=Release%20CI&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zhongyang219/TrafficMonitor/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/zhongyang219/TrafficMonitor.svg?style=flat-square&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;TrafficMonitor 简介&lt;/h1&gt; &#xA;&lt;p&gt;Traffic Monitor是一款用于Windows平台的网速监控悬浮窗软件，可以显示当前网速、CPU及内存利用率，支持嵌入到任务栏显示，支持更换皮肤、历史流量统计等功能。&lt;/p&gt; &#xA;&lt;h1&gt;相关链接：&lt;/h1&gt; &#xA;&lt;p&gt;请&lt;a href=&#34;https://github.com/zhongyang219/TrafficMonitor/releases/latest&#34;&gt;点击此处&lt;/a&gt;下载TrafficMonitor的最新版本。&lt;br&gt; 备用链接：&lt;a href=&#34;https://pan.baidu.com/s/15PMt7s-ASpyDwtS__4cUhg&#34;&gt;百度网盘下载&lt;/a&gt; 提取码：&lt;code&gt;ou0m&lt;/code&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;国内用户如果遇到Github下载缓慢的问题，可以&lt;a href=&#34;https://gitee.com/zhongyang219/TrafficMonitor&#34;&gt;点击此处&lt;/a&gt;转到此项目在Gitee上的页面。&lt;/p&gt; &#xA;&lt;p&gt;如果遇到问题，请&lt;a href=&#34;https://raw.githubusercontent.com/zhongyang219/TrafficMonitor/master/Help.md&#34;&gt;点击此处&lt;/a&gt;。&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;你也可以&lt;a href=&#34;https://github.com/zhongyang219/TrafficMonitor/actions?query=workflow:%22Release+CI%22&#34;&gt;点击此处&lt;/a&gt;下载TrafficMonitor的预发行构建版本。&lt;/p&gt; &#xA;&lt;p&gt;从1.80版本开始，TrafficMonitor加入了温度监控功能，如果你不需要温度监控功能，并且在使用1.80以上版本中遇到了问题，建议下载不含温度监控的版本（Lite版本）。（在Release页面找到文件名包含&lt;code&gt;Lite&lt;/code&gt;的版本。）&lt;/p&gt; &#xA;&lt;p&gt;TrafficMonitor依赖于Microsoft Visual C++ 运行环境，如果程序启动时提示“找不到MSVC*.dll”，请点击以下链接下载并安装Microsoft Visual C++ 运行环境。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/zh-CN/cpp/windows/latest-supported-vc-redist?view=msvc-170&#34;&gt;最新支持的 Visual C++ 可再发行程序包下载 | Microsoft Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;版本说明&lt;/h1&gt; &#xA;&lt;p&gt;TrafficMonitor提供了普通版和Lite版两种版本可用。普通版包含了所有的功能，Lite版本则不包含温度监控、显卡利用率、硬盘利用率等硬件监控功能。普通版运行需要管理员权限，而Lite版本则不需要。&lt;/p&gt; &#xA;&lt;p&gt;如果没有监控温度等硬件信息的需要，建议使用Lite版。&lt;/p&gt; &#xA;&lt;p&gt;以下是两个版本功能对比。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;   &lt;th&gt;普通版&lt;/th&gt; &#xA;   &lt;th&gt;Lite版&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;网速监控&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU、内存利用率&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU、显卡、硬盘、主板温度监控、CPU频率监控&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;显卡利用率监控&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;硬盘利用率监控&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;网络详细信息&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;插件系统&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;主窗口更换皮肤&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;需要管理员权限&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;   &lt;td&gt;否&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;主要特性&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;显示当前实现网络传输速率、CPU和内存占用率&lt;/li&gt; &#xA; &lt;li&gt;如果电脑有多个网卡，支持自动和手动选择网络连接&lt;/li&gt; &#xA; &lt;li&gt;查看网络详细信息&lt;/li&gt; &#xA; &lt;li&gt;支持嵌入到任务栏显示&lt;/li&gt; &#xA; &lt;li&gt;支持更换皮肤和自定义皮肤&lt;/li&gt; &#xA; &lt;li&gt;历史流量统计&lt;/li&gt; &#xA; &lt;li&gt;硬件信息监控&lt;/li&gt; &#xA; &lt;li&gt;插件系统&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;使用说明&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/zhongyang219/TrafficMonitor/wiki&#34;&gt;点击这里&lt;/a&gt;转到Wiki页面查看关于TrafficMonitor的详细说明文档。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;截图&lt;/h1&gt; &#xA;&lt;p&gt;主悬浮窗：&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zhongyang219/TrafficMonitor/master/Screenshots/main1.png&#34; alt=&#34;&#34;&gt;&lt;br&gt; 右键菜单：&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zhongyang219/TrafficMonitor/master/Screenshots/main.png&#34; alt=&#34;&#34;&gt;&lt;br&gt; 任务栏窗口：&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zhongyang219/TrafficMonitor/master/Screenshots/taskbar.PNG&#34; alt=&#34;&#34;&gt;&lt;br&gt; 多彩皮肤：&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zhongyang219/TrafficMonitor/master/Screenshots/skins.PNG&#34; style=&#34;zoom:80%;&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;如何使用&lt;/h1&gt; &#xA;&lt;p&gt;程序启动后在会在屏幕中显示一个显示网速的悬浮窗。在悬浮窗上点击鼠标右键可以弹出右键菜单。&lt;/p&gt; &#xA;&lt;p&gt;TrafficMonitor支持将信息显示到任务栏。但是TrafficMonitor默认只显示主窗口（悬浮窗），如果需要让它嵌入到任务栏显示，请在右键菜单中选择“显示任务栏窗口”命令。&lt;/p&gt; &#xA;&lt;p&gt;任务栏窗口支持自定义显示项目，默认情况下只显示网速，如果需要显示CPU和内存利用率，请在任务栏右键菜单中的“显示设置”子菜单下勾选需要显示的项目，如下图所示：&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/zhongyang219/TrafficMonitor/master/Screenshots/taskbar_item_settings.png&#34; style=&#34;zoom:80%;&#34;&gt; &#xA;&lt;h1&gt;自定义皮肤&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zhongyang219/TrafficMonitor/master/Screenshots/selecte_skin.png&#34; style=&#34;zoom:80%;&#34;&gt;&lt;br&gt; 在主窗口或通知区图标右键菜单上选择“其他功能”——“更换皮肤”可以打开更换皮肤界面。&lt;a href=&#34;https://github.com/zhongyang219/TrafficMonitorSkin/raw/master/%E7%9A%AE%E8%82%A4%E4%B8%8B%E8%BD%BD.md&#34;&gt;点击此处&lt;/a&gt;可以下载更多皮肤。用户还可以根据自己的需要编辑自己的皮肤。&lt;br&gt; 皮肤文件放在程序所在目录的&lt;code&gt;skins&lt;/code&gt;目录下，每个皮肤被放到单独的文件夹下，文件夹的名称就是皮肤的名称。&lt;br&gt; 其中&lt;code&gt;background.bmp&lt;/code&gt;和&lt;code&gt;background_l.bmp&lt;/code&gt;是背景图片，&lt;code&gt;skin.ini&lt;/code&gt;是皮肤的配置文件，可以通过&lt;code&gt;skin.ini&lt;/code&gt;指定文本颜色、字体、皮肤作者、每个项目的大小和位置等信息。&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;从1.80版本开始增加了xml格式的皮肤配置文件&lt;code&gt;skin.xml&lt;/code&gt;，只有xml格式的皮肤配置文件才支持温度和显卡使用率显示。&lt;/p&gt; &#xA;&lt;p&gt;详细的皮肤制作教程请点击以下链接：&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zhongyang219/TrafficMonitor/wiki/%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B&#34;&gt;皮肤制作教程 · zhongyang219/TrafficMonitor Wiki (github.com)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;推荐使用&lt;a href=&#34;https://github.com/zhongyang219/TrafficMonitorSkinEditor/releases&#34;&gt;皮肤编辑器&lt;/a&gt;来创建或编辑皮肤。&lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;选项设置&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zhongyang219/TrafficMonitor/master/Screenshots/option.jpg&#34; style=&#34;zoom:80%;&#34;&gt;&lt;br&gt; 在右键菜单选择“选项...”可以进入选项设置。在选项设置对话框中，可以单独设置主窗口和任务栏窗口的文本颜色、字体、背景颜色、网速单位、显示的文本等。&lt;br&gt; 在“常规设置”选项卡中，可以设置是否在程序时自动检查更新，以及是否需要在开机是自动运行。可以设置在什么时候需要发出消息通知。&lt;br&gt; 从1.72版本开始，支持每个项目文本颜色单独设置。勾选“指定每个项目的颜色”后，点击“文本颜色”右边的颜色框，会弹出详细颜色设置的对话框，可以在这里单独指定每个项目的颜色。&lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;插件系统&lt;/h1&gt; &#xA;&lt;p&gt;从1.82版本开始增加了插件系统，插件dll必须放在“TrafficMonitor.exe”同级目录的“plugins”目录下。程序启动后，插件会自动加载。你可以在右键菜单“更多功能”——“插件管理”中查看并管理已加载的插件。&lt;/p&gt; &#xA;&lt;p&gt;关于如何开发TrafficMonitor的说明，请参见&lt;a href=&#34;https://github.com/zhongyang219/TrafficMonitor/wiki/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97&#34;&gt;插件开发指南 · zhongyang219/TrafficMonitor Wiki (github.com)&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;要下载TrafficMonitor插件，请&lt;a href=&#34;https://github.com/zhongyang219/TrafficMonitorPlugins/raw/main/download/plugin_download.md&#34;&gt;点击这里&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h1&gt;关于硬件监控功能&lt;/h1&gt; &#xA;&lt;p&gt;从1.80版本开始，TrafficMonitor加入了硬件监控功能（包括温度监控和显卡使用率监控、CPU频率监控），它使用了第三方开源库&lt;a href=&#34;https://github.com/LibreHardwareMonitor/LibreHardwareMonitor&#34;&gt;LibreHardwareMonitor&lt;/a&gt;。如果你在使用温度监控功能时遇到了问题，请&lt;a href=&#34;https://raw.githubusercontent.com/zhongyang219/TrafficMonitor/master/Help.md#13-%E5%85%B3%E4%BA%8Etrafficmonitor%E6%B8%A9%E5%BA%A6%E7%9B%91%E6%8E%A7%E7%9A%84%E9%97%AE%E9%A2%98&#34;&gt;点击这里&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;需要注意的是，温度监控功能默认是关闭的，如果你要使用TrafficMonitor的温度监控功能，请到&lt;a href=&#34;https://github.com/zhongyang219/TrafficMonitor/wiki/%E9%80%89%E9%A1%B9%E8%AE%BE%E7%BD%AE#%E7%A1%AC%E4%BB%B6%E7%9B%91%E6%8E%A7&#34;&gt;“选项设置”-“常规设置”-“硬件监控”&lt;/a&gt;中开启。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意：硬件监控功能（包括温度监控和显卡使用率监控）可能存在一些问题，它可能会占用更多的CPU和内存。据部分用户反馈，开启温度功能后会导致程序崩溃和系统死机等问题，请在知晓以上风险后再决定开启硬件监控功能。否则，请不要使用硬件监控功能。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;更新日志&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zhongyang219/TrafficMonitor/master/UpdateLog/update_log.md&#34;&gt;点击此处查看更新日志&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>esp8266/Arduino</title>
    <updated>2022-06-13T01:39:34Z</updated>
    <id>tag:github.com,2022-06-13:/esp8266/Arduino</id>
    <link href="https://github.com/esp8266/Arduino" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ESP8266 core for Arduino&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Arduino core for ESP8266 WiFi chip&lt;/h1&gt; &#xA;&lt;h1&gt;Quick links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arduino-esp8266.readthedocs.io/en/3.0.2/&#34;&gt;Latest release documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arduino-esp8266.readthedocs.io/en/latest/&#34;&gt;Current &#34;git version&#34; documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arduino-esp8266.readthedocs.io/en/latest/installing.html#using-git-version&#34;&gt;Install git version&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/esp8266/Arduino/master/doc/installing.rst#using-git-version&#34;&gt;sources&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Arduino on ESP8266&lt;/h1&gt; &#xA;&lt;p&gt;This project brings support for the ESP8266 chip to the Arduino environment. It lets you write sketches, using familiar Arduino functions and libraries, and run them directly on ESP8266, with no external microcontroller required.&lt;/p&gt; &#xA;&lt;p&gt;ESP8266 Arduino core comes with libraries to communicate over WiFi using TCP and UDP, set up HTTP, mDNS, SSDP, and DNS servers, do OTA updates, use a file system in flash memory, and work with SD cards, servos, SPI and I2C peripherals.&lt;/p&gt; &#xA;&lt;h1&gt;Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installing options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/esp8266/Arduino/master/#installing-with-boards-manager&#34;&gt;Using Boards Manager&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/esp8266/Arduino/master/#using-git-version&#34;&gt;Using git version&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/esp8266/Arduino/master/#using-platformio&#34;&gt;Using PlatformIO&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/esp8266/Arduino/master/#building-with-make&#34;&gt;Building with make&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/esp8266/Arduino/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/esp8266/Arduino/master/#issues-and-support&#34;&gt;Issues and support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/esp8266/Arduino/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/esp8266/Arduino/master/#license-and-credits&#34;&gt;License and credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installing with Boards Manager&lt;/h3&gt; &#xA;&lt;p&gt;Starting with 1.6.4, Arduino allows installation of third-party platform packages using Boards Manager. We have packages available for Windows, Mac OS, and Linux (32 and 64 bit).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the current upstream Arduino IDE at the 1.8.9 level or later. The current version is on the &lt;a href=&#34;https://www.arduino.cc/en/software&#34;&gt;Arduino website&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Start Arduino and open the Preferences window.&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;https://arduino.esp8266.com/stable/package_esp8266com_index.json&lt;/code&gt; into the &lt;em&gt;File&amp;gt;Preferences&amp;gt;Additional Boards Manager URLs&lt;/em&gt; field of the Arduino IDE. You can add multiple URLs, separating them with commas.&lt;/li&gt; &#xA; &lt;li&gt;Open Boards Manager from Tools &amp;gt; Board menu and install &lt;em&gt;esp8266&lt;/em&gt; platform (and don&#39;t forget to select your ESP8266 board from Tools &amp;gt; Board menu after installation).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Latest release &lt;a href=&#34;https://github.com/esp8266/Arduino/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/esp8266/Arduino.svg?sanitize=true&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Boards manager link: &lt;code&gt;https://arduino.esp8266.com/stable/package_esp8266com_index.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation: &lt;a href=&#34;https://arduino-esp8266.readthedocs.io/en/3.0.2/&#34;&gt;https://arduino-esp8266.readthedocs.io/en/3.0.2/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using git version&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/esp8266/Arduino&#34;&gt;&lt;img src=&#34;https://travis-ci.org/esp8266/Arduino.svg?sanitize=true&#34; alt=&#34;Linux build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also known as latest git or master branch.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the current upstream Arduino IDE at the 1.8 level or later. The current version is on the &lt;a href=&#34;https://www.arduino.cc/en/software&#34;&gt;Arduino website&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://arduino-esp8266.readthedocs.io/en/latest/installing.html#using-git-version&#34;&gt;instructions in the documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using PlatformIO&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platformio.org?utm_source=arduino-esp8266&#34;&gt;PlatformIO&lt;/a&gt; is an open source ecosystem for IoT development with a cross-platform build system, a library manager, and full support for Espressif (ESP8266) development. It works on the following popular host operating systems: macOS, Windows, Linux 32/64, and Linux ARM (like Raspberry Pi, BeagleBone, CubieBoard).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.platformio.org/en/latest/what-is-platformio.html?utm_source=arduino-esp8266&#34;&gt;What is PlatformIO?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platformio.org/platformio-ide?utm_source=arduino-esp8266&#34;&gt;PlatformIO IDE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.platformio.org/en/latest/core.html?utm_source=arduino-esp8266&#34;&gt;PlatformIO Core&lt;/a&gt; (command line tool)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.platformio.org/en/latest/platforms/espressif8266.html?utm_source=arduino-esp8266&#34;&gt;Advanced usage&lt;/a&gt; - custom settings, uploading to SPIFFS, Over-the-Air (OTA), staging version&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.platformio.org/en/latest/ide.html?utm_source=arduino-esp8266&#34;&gt;Integration with Cloud and Standalone IDEs&lt;/a&gt; - Cloud9, Codeanywhere, Eclipse Che (Codenvy), Atom, CLion, Eclipse, Emacs, NetBeans, Qt Creator, Sublime Text, VIM, Visual Studio, and VSCode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.platformio.org/en/latest/platforms/espressif8266.html?utm_source=arduino-esp8266#examples&#34;&gt;Project Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building with make&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/plerup/makeEspArduino&#34;&gt;makeEspArduino&lt;/a&gt; is a generic makefile for any ESP8266 Arduino project. Using make instead of the Arduino IDE makes it easier to do automated and production builds.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Documentation for latest development version: &lt;a href=&#34;https://arduino-esp8266.readthedocs.io/en/latest/&#34;&gt;https://arduino-esp8266.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Issues and support&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.esp8266.com/u/arduinoanswers&#34;&gt;ESP8266 Community Forum&lt;/a&gt; is a well-established community for questions and answers about Arduino for ESP8266. Stackoverflow is also an alternative. If you need help, have a &#34;How do I...&#34; type question, have a problem with a 3rd party library not hosted in this repo, or just want to discuss how to approach a problem, please ask there.&lt;/p&gt; &#xA;&lt;p&gt;If you find the forum useful, please consider supporting it with a donation. &lt;br&gt; &lt;a href=&#34;https://www.paypal.com/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=4M56YCWV6PX66&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/paypal-donate-yellow.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you encounter an issue which you think is a bug in the ESP8266 Arduino Core or the associated libraries, or if you want to propose an enhancement, you are welcome to submit it here on Github: &lt;a href=&#34;https://github.com/esp8266/Arduino/issues&#34;&gt;https://github.com/esp8266/Arduino/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please provide as much context as possible, as well as the information requested in the issue template:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ESP8266 Arduino core version which you are using (you can check it in Boards Manager)&lt;/li&gt; &#xA; &lt;li&gt;your sketch code; please wrap it into a code block, see &lt;a href=&#34;https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code&#34;&gt;Github markdown manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;when encountering an issue that happens at run time, attach the serial output. Wrap it into a code block, just like the code.&lt;/li&gt; &#xA; &lt;li&gt;for issues that happen at compile time, enable verbose compiler output in the IDE preferences, and attach that output (also inside a code block)&lt;/li&gt; &#xA; &lt;li&gt;ESP8266 development board model&lt;/li&gt; &#xA; &lt;li&gt;IDE settings (board choice, flash size)&lt;/li&gt; &#xA; &lt;li&gt;etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;For minor fixes of code and documentation, please go ahead and submit a pull request. A gentle introduction to the process can be found &lt;a href=&#34;https://www.freecodecamp.org/news/a-simple-git-guide-and-cheat-sheet-for-open-source-contributors/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out the list of issues that are easy to fix — &lt;a href=&#34;https://github.com/esp8266/Arduino/issues?q=is%3Aopen+is%3Aissue+label%3A%22level%3A+easy%22&#34;&gt;easy issues pending&lt;/a&gt;. Working on them is a great way to move the project forward.&lt;/p&gt; &#xA;&lt;p&gt;Larger changes (rewriting parts of existing code from scratch, adding new functions to the core, adding new libraries) should generally be discussed by opening an issue first. PRs with such changes require testing and approval.&lt;/p&gt; &#xA;&lt;p&gt;Feature branches with lots of small commits (especially titled &#34;oops&#34;, &#34;fix typo&#34;, &#34;forgot to add file&#34;, etc.) should be squashed before opening a pull request. At the same time, please refrain from putting multiple unrelated changes into a single pull request.&lt;/p&gt; &#xA;&lt;h3&gt;License and credits&lt;/h3&gt; &#xA;&lt;p&gt;Arduino IDE is developed and maintained by the Arduino team. The IDE is licensed under GPL.&lt;/p&gt; &#xA;&lt;p&gt;ESP8266 core includes an xtensa gcc toolchain, which is also under GPL.&lt;/p&gt; &#xA;&lt;p&gt;Esptool.py was initially created by Fredrik Ahlberg (@themadinventor, @kongo), and is currently maintained by Angus Gratton (@projectgus) under GPL 2.0 license.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/espressif/ESP8266_NONOS_SDK&#34;&gt;Espressif&#39;s NONOS SDK&lt;/a&gt; included in this build is under Espressif MIT License.&lt;/p&gt; &#xA;&lt;p&gt;ESP8266 core files are licensed under LGPL.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pellepl/spiffs&#34;&gt;SPI Flash File System (SPIFFS)&lt;/a&gt; written by Peter Andersson is used in this project. It is distributed under the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rhempel/umm_malloc&#34;&gt;umm_malloc&lt;/a&gt; memory management library written by Ralph Hempel is used in this project. It is distributed under the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/plerup/espsoftwareserial&#34;&gt;SoftwareSerial&lt;/a&gt; library and examples written by Peter Lerup. Distributed under LGPL 2.1.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bearssl.org&#34;&gt;BearSSL&lt;/a&gt; library written by Thomas Pornin, built from &lt;a href=&#34;https://github.com/earlephilhower/bearssl-esp8266&#34;&gt;https://github.com/earlephilhower/bearssl-esp8266&lt;/a&gt;, is used in this project. It is distributed under the &lt;a href=&#34;https://bearssl.org/#legal-details&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ARMmbed/littlefs&#34;&gt;LittleFS&lt;/a&gt; library written by ARM Limited and released under the &lt;a href=&#34;https://github.com/ARMmbed/littlefs/raw/master/LICENSE.md&#34;&gt;BSD 3-clause license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pfalcon/uzlib&#34;&gt;uzlib&lt;/a&gt; library written and (c) 2014-2018 Paul Sokolovsky, licensed under the ZLib license (&lt;a href=&#34;https://www.zlib.net/zlib_license.html&#34;&gt;https://www.zlib.net/zlib_license.html&lt;/a&gt;). uzlib is based on: tinf library by Joergen Ibsen (Deflate decompression); Deflate Static Huffman tree routines by Simon Tatham; LZ77 compressor by Paul Sokolovsky; with library integrated and maintained by Paul Sokolovsky.&lt;/p&gt; &#xA;&lt;h3&gt;Other useful links&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/earlephilhower/esp-quick-toolchain&#34;&gt;Toolchain repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/d-a-v/esp82xx-nonos-linklayer&#34;&gt;Lwip link layer repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/plerup/espsoftwareserial&#34;&gt;SoftwareSerial repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mytrain/arduino-esp8266-serial-plugin&#34;&gt;Serial Monitor Arduino IDE plugin&lt;/a&gt; Original discussion &lt;a href=&#34;https://github.com/esp8266/Arduino/issues/1360&#34;&gt;here&lt;/a&gt;, quick download &lt;a href=&#34;http://mytrain.fr/cms//images/mytrain/private/ESP8266SM.v3.zip&#34;&gt;there&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dplasa/FTPClientServer&#34;&gt;FTP Client/Server Library&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>