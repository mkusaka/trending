<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-26T01:31:52Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/tensorstore</title>
    <updated>2022-09-26T01:31:52Z</updated>
    <id>tag:github.com,2022-09-26:/google/tensorstore</id>
    <link href="https://github.com/google/tensorstore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Library for reading and writing large multi-dimensional arrays.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TensorStore&lt;/h1&gt; &#xA;&lt;p&gt;Library for reading and writing large multi-dimensional arrays.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/tensorstore&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/tensorstore&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/tensorstore/actions?query=workflow%3ABuild&#34;&gt;&lt;img src=&#34;https://github.com/google/tensorstore/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://google.github.io/tensorstore&#34;&gt;&lt;img src=&#34;https://github.com/google/tensorstore/workflows/Docs/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation and installation instructions are at &lt;a href=&#34;https://google.github.io/tensorstore&#34;&gt;https://google.github.io/tensorstore&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is not an officially supported Google product.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this software except in compliance with the License. You may obtain a copy of the License at &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jzimmerman/langcc</title>
    <updated>2022-09-26T01:31:52Z</updated>
    <id>tag:github.com,2022-09-26:/jzimmerman/langcc</id>
    <link href="https://github.com/jzimmerman/langcc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;langcc: A Next-Generation Compiler Compiler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;langcc&lt;/code&gt;: A Next-Generation Compiler Compiler&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;langcc&lt;/code&gt; is a tool that takes the formal description of a language, in a standard BNF-style format, and automatically generates a compiler front-end, including data structure definitions for the language&#39;s abstract syntax trees (AST) and traversals, a lexer, a parser, and a pretty-printer. &lt;code&gt;langcc&lt;/code&gt; also serves as the companion software implementation to the following technical reports, which describe several innovations on the classic LR parsing paradigm:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zimmerman, Joe. &lt;a href=&#34;https://arxiv.org/pdf/2209.08383.pdf&#34;&gt;Practical LR Parser Generation.&lt;/a&gt; arXiv, 2022.&lt;/li&gt; &#xA; &lt;li&gt;Zimmerman, Joe. &lt;a href=&#34;https://arxiv.org/pdf/2209.08385.pdf&#34;&gt;langcc: A Next-Generation Compiler Compiler.&lt;/a&gt; arXiv, 2022.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;langcc&lt;/code&gt; can be used as a replacement for the combination of &lt;code&gt;lex&lt;/code&gt; and &lt;code&gt;yacc&lt;/code&gt; (or &lt;code&gt;flex&lt;/code&gt; and &lt;code&gt;bison&lt;/code&gt;). However, &lt;code&gt;langcc&lt;/code&gt; provides many additional features, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic generation of AST data structures, via a standalone datatype compiler (&lt;code&gt;datacc&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Full LR parser generation as the default, rather than the more restrictive LALR.&lt;/li&gt; &#xA; &lt;li&gt;Clear presentation of LR conflicts via explicit &#34;confusing input pairs&#34;, rather than opaque shift/reduce errors.&lt;/li&gt; &#xA; &lt;li&gt;Novel efficiency optimizations for LR automata.&lt;/li&gt; &#xA; &lt;li&gt;An extension of the LR paradigm to include recursive-descent (RD) parsing actions, resulting in significantly smaller and more intuitive automata.&lt;/li&gt; &#xA; &lt;li&gt;An extension of the LR paradigm to include per-symbol attributes, which are vital for the efficient implementation of many industrial language constructs.&lt;/li&gt; &#xA; &lt;li&gt;A general transformation for LR grammars (CPS), which significantly expands the class of grammars the tool can support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unlike previous compiler front-end generators, &lt;code&gt;langcc&lt;/code&gt; is efficient and general enough to capture full industrial programming languages, including Python 3.9.12 (&lt;a href=&#34;https://github.com/jzimmerman/langcc/raw/main/grammars/py.lang&#34;&gt;grammars/py.lang&lt;/a&gt;) and Golang 1.17.8 (&lt;a href=&#34;https://github.com/jzimmerman/langcc/raw/main/grammars/go.lang&#34;&gt;grammars/go.lang&lt;/a&gt;). In both cases, &lt;code&gt;langcc&lt;/code&gt; automatically generates a parser that is faster than the standard library parser for each language (resp., 1.2x and 4.3x faster). In fact, the class of grammars supported by &lt;code&gt;langcc&lt;/code&gt; is general enough that the tool is &lt;em&gt;self-hosting&lt;/em&gt;: that is, one can express the &#34;language of languages&#34; in the &#34;language of languages&#34; itself, and use &lt;code&gt;langcc&lt;/code&gt; to generate its own compiler front-end. We do this in the canonical implementation; see the files &lt;a href=&#34;https://github.com/jzimmerman/langcc/raw/main/bootstrap.sh&#34;&gt;bootstrap.sh&lt;/a&gt; and &lt;a href=&#34;https://github.com/jzimmerman/langcc/raw/main/grammars/meta.lang&#34;&gt;grammars/meta.lang&lt;/a&gt; in the source repository for more details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;langcc&lt;/code&gt; is a research prototype and has not yet been used extensively in production. However, we believe it is essentially stable and feature-complete, and can be used as a standalone tool to facilitate rapid exploration of new compilers and programming languages.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;The build has been tested on Ubuntu 22.04 and macOS 12.5, but should also run on some other versions of Ubuntu and macOS with minor adaptations.&lt;/p&gt; &#xA;&lt;p&gt;For Ubuntu 22.04:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./deps_ubuntu.sh&#xA;make -j8&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For macOS 12.5 (requires Homebrew):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./deps_macos.sh&#xA;make -j8&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And, in order to bootstrap the &lt;code&gt;langcc&lt;/code&gt; front-end itself, subsequently run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./bootstrap.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Once &lt;code&gt;langcc&lt;/code&gt; (and its companion, &lt;code&gt;datacc&lt;/code&gt;) have been installed, one can run various examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the &lt;code&gt;examples&lt;/code&gt; directory, there are two examples: &lt;code&gt;basic&lt;/code&gt; and &lt;code&gt;calc&lt;/code&gt;. Each has its own local Makefile.&lt;/li&gt; &#xA; &lt;li&gt;The main build process itself compiles &lt;code&gt;grammars/py.lang&lt;/code&gt; and &lt;code&gt;grammars/go.lang&lt;/code&gt;, producing tests &lt;code&gt;build/go_standalone_test&lt;/code&gt; and &lt;code&gt;build/py_standalone_test&lt;/code&gt;. (Note: These binaries require, respectively, repositories for Golang 1.17.8 located in the directory &lt;code&gt;../go&lt;/code&gt;, and Python 3.9.12 located in the directory &lt;code&gt;../cpython&lt;/code&gt;.)&lt;/li&gt; &#xA; &lt;li&gt;There is the language of datatypes, &lt;code&gt;grammars/data.lang&lt;/code&gt;, which describes the input of the additional standalone tool &lt;code&gt;datacc&lt;/code&gt; (used by &lt;code&gt;langcc&lt;/code&gt; to automatically generate C++ implementations of algebraic datatypes).&lt;/li&gt; &#xA; &lt;li&gt;Finally, there is the language of languages itself, &lt;code&gt;grammars/meta.lang&lt;/code&gt;. This language also serves as basic documentation, as it enumerates all of its own features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For full documentation, please see the &lt;a href=&#34;https://github.com/jzimmerman/langcc/raw/main/MANUAL.md&#34;&gt;user manual&lt;/a&gt;, as well as the &lt;a href=&#34;https://arxiv.org/pdf/2209.08383.pdf&#34;&gt;technical report&lt;/a&gt; which describes the theoretical development.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rochus-keller/LeanQt</title>
    <updated>2022-09-26T01:31:52Z</updated>
    <id>tag:github.com,2022-09-26:/rochus-keller/LeanQt</id>
    <link href="https://github.com/rochus-keller/LeanQt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LeanQt is a stripped-down Qt version easy to build from source and to integrate with an application.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Welcome to LeanQt - the lean, adaptable Qt version&lt;/h2&gt; &#xA;&lt;p&gt;LeanQt is a stripped-down Qt version which includes the essential features and is easy to build from source and to integrate with an application.&lt;/p&gt; &#xA;&lt;p&gt;My primary motivation for LeanQt was to make my Oberon compiler (and also the IDE in future) easier to compile and deploy on all relevant platforms with as few dependencies as possible. Many of my tools are based on Qt 5, which is an excellent framework that provides all the necessary features in a platform-independent way. Qt 5 has low requirements for the C++ compiler and is available virtually on all platforms where there is a C++98 compiler.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, there has been a certain proliferation over the years where Qt has been bloated with all sorts of features with questionable value. The standard binary installation of Qt swallows several gigabytes and requires a login to a commercial company server, which discourages many people. The non-essential features make the build even more complicated. The now initiated development with Qt 6 makes even higher demands on compiler and system, and follows a development that I cannot make sense of.&lt;/p&gt; &#xA;&lt;p&gt;For LeanQt I used the code of Qt 5.6.3 which was the last Qt version available under both LGPL v2.1 and v3. Instead of qmake the BUSY build system (see &lt;a href=&#34;https://github.com/rochus-keller/BUSY&#34;&gt;https://github.com/rochus-keller/BUSY&lt;/a&gt;) is used, which was one of the reasons I implemented it. LeanQt has a different source tree structure compared to the original Qt toolkit; a lot of the original subdirectories (e.g. mkspecs, qmake) are no longer required; there are no longer separate subdirectories under corelib since each was depending on every other anyway. I also added additional configuration options so it is possible to use a minimal version even without the file engine and core application (see the BUSY file in the root for more information); many changes were necessary to the original source code for this, but the API is mostly the same and thus the original Qt documentation is still valid.&lt;/p&gt; &#xA;&lt;h3&gt;State of development&lt;/h3&gt; &#xA;&lt;p&gt;This version is suited to successfully build and run the command line version of my Oberon+ compiler on x86 Linux, Windows and macOS, as well as macOS M1; other Linux architectures are work in progress.&lt;/p&gt; &#xA;&lt;p&gt;The following features are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bytearrays, strings, unicode&lt;/li&gt; &#xA; &lt;li&gt;localization&lt;/li&gt; &#xA; &lt;li&gt;collections, implicit sharing&lt;/li&gt; &#xA; &lt;li&gt;date/time, time zones&lt;/li&gt; &#xA; &lt;li&gt;variants/metatypes&lt;/li&gt; &#xA; &lt;li&gt;codecs: utf, simple, latin&lt;/li&gt; &#xA; &lt;li&gt;io device abstraction&lt;/li&gt; &#xA; &lt;li&gt;file engine&lt;/li&gt; &#xA; &lt;li&gt;text and data streams&lt;/li&gt; &#xA; &lt;li&gt;regexp&lt;/li&gt; &#xA; &lt;li&gt;logging&lt;/li&gt; &#xA; &lt;li&gt;md5 and sha1 hash&lt;/li&gt; &#xA; &lt;li&gt;geometry, json, xml&lt;/li&gt; &#xA; &lt;li&gt;rcc (resource compiler)&lt;/li&gt; &#xA; &lt;li&gt;threads&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Planned or work-in-progress features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; core objects and events, moc&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; core mimetypes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; plugin support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; QtNetwork&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; QtXml&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Long term plan&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; QtGui&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; QtWidgets&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; printing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; concurrent&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; serial port&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;No support planned&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;qmake&lt;/li&gt; &#xA; &lt;li&gt;statemachine&lt;/li&gt; &#xA; &lt;li&gt;other than minimal codecs&lt;/li&gt; &#xA; &lt;li&gt;animation&lt;/li&gt; &#xA; &lt;li&gt;dbus&lt;/li&gt; &#xA; &lt;li&gt;sql&lt;/li&gt; &#xA; &lt;li&gt;svg&lt;/li&gt; &#xA; &lt;li&gt;nfc&lt;/li&gt; &#xA; &lt;li&gt;bluetooth&lt;/li&gt; &#xA; &lt;li&gt;multimedia&lt;/li&gt; &#xA; &lt;li&gt;web and browser stuff&lt;/li&gt; &#xA; &lt;li&gt;testlib&lt;/li&gt; &#xA; &lt;li&gt;scripting, quick stuff&lt;/li&gt; &#xA; &lt;li&gt;qml&lt;/li&gt; &#xA; &lt;li&gt;all not mentioned add-ons&lt;/li&gt; &#xA; &lt;li&gt;ios, winrt, wince, android, blackberry, nacl, vxworks, haiku&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to build the Oberon+ command line compiler version with LeanQt&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new directory; we call it the root directory here&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/rochus-keller/Oberon/archive/refs/heads/master.zip&#34;&gt;https://github.com/rochus-keller/Oberon/archive/refs/heads/master.zip&lt;/a&gt; and unpack it to the root directory; rename the resulting directory to &#34;Oberon&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/rochus-keller/PeLib/archive/refs/heads/OBX.zip&#34;&gt;https://github.com/rochus-keller/PeLib/archive/refs/heads/OBX.zip&lt;/a&gt; and unpack it to the root directory; rename the resulting directory to &#34;PeLib&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/rochus-keller/MonoTools/archive/refs/heads/master.zip&#34;&gt;https://github.com/rochus-keller/MonoTools/archive/refs/heads/master.zip&lt;/a&gt; and unpack it to the root directory; rename the resulting directory to &#34;MonoTools&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/rochus-keller/LeanQt/archive/refs/heads/master.zip&#34;&gt;https://github.com/rochus-keller/LeanQt/archive/refs/heads/master.zip&lt;/a&gt; and unpack it to the root directory; rename the resulting directory to &#34;LeanQt&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/rochus-keller/BUSY/archive/refs/heads/master.zip&#34;&gt;https://github.com/rochus-keller/BUSY/archive/refs/heads/master.zip&lt;/a&gt; and unpack it to the root directory; rename the resulting directory to &#34;build&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Open a command line in the build directory and type &lt;code&gt;cc *.c -O2 -lm -O2 -o lua&lt;/code&gt; or &lt;code&gt;cl /O2 /MD /Fe:lua.exe *.c&lt;/code&gt; depending on whether you are on a Unix or Windows machine; wait a few seconds until the Lua executable is built.&lt;/li&gt; &#xA; &lt;li&gt;Now type &lt;code&gt;lua build.lua ../Oberon&lt;/code&gt;; wait a few minutes until the OBXMC executable is built; you find it in the output subdirectory.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Additional Credits&lt;/h3&gt; &#xA;&lt;p&gt;Copyright (C) 2016 by The Qt Company Ltd. Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies). Copyright (C) 1992-2005 Trolltech AS. KDAB, &lt;a href=&#34;https://www.kdab.com/kdab-contributions-to-qt-5-0-part-1/&#34;&gt;https://www.kdab.com/kdab-contributions-to-qt-5-0-part-1/&lt;/a&gt; The KDE Community, &lt;a href=&#34;https://community.kde.org/Frameworks/Epics/Contributions_to_Qt5&#34;&gt;https://community.kde.org/Frameworks/Epics/Contributions_to_Qt5&lt;/a&gt;. And many individual Qt contributors around the world (I didn&#39;t find a contributors list so far; please post a link if you have one, relating to Qt 4.0 to 5.6).&lt;/p&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;If you need support or would like to post issues or feature requests please use the Github issue list at &lt;a href=&#34;https://github.com/rochus-keller/LeanQt/issues&#34;&gt;https://github.com/rochus-keller/LeanQt/issues&lt;/a&gt; or send an email to the author.&lt;/p&gt;</summary>
  </entry>
</feed>