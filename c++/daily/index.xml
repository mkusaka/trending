<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-06T01:30:58Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Sh0ckFR/Lockbit3.0-MpClient-Defender-PoC</title>
    <updated>2022-08-06T01:30:58Z</updated>
    <id>tag:github.com,2022-08-06:/Sh0ckFR/Lockbit3.0-MpClient-Defender-PoC</id>
    <link href="https://github.com/Sh0ckFR/Lockbit3.0-MpClient-Defender-PoC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lockbit3.0 Microsoft Defender MpClient.dll DLL Hijacking PoC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lockbit3.0-MpClient-Defender-PoC&lt;/h1&gt; &#xA;&lt;p&gt;Lockbit3.0 Microsoft Defender MpClient.dll DLL Hijacking PoC&lt;/p&gt; &#xA;&lt;p&gt;Based on: LockBit ransomware abuses Windows Defender to load Cobalt Strike&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bleepingcomputer.com/news/security/lockbit-ransomware-abuses-windows-defender-to-load-cobalt-strike/&#34;&gt;https://www.bleepingcomputer.com/news/security/lockbit-ransomware-abuses-windows-defender-to-load-cobalt-strike/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to test by yourself&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new directory, copy &lt;code&gt;C:\Program Files\Windows Defender\MpCmdRun.exe&lt;/code&gt; or &lt;code&gt;C:\Program Files\Windows Defender\NisSrv.exe&lt;/code&gt; in this new directory&lt;/li&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;mpclient-mpcmdrun.dll&lt;/code&gt; or &lt;code&gt;mpclient-nissrv.dll&lt;/code&gt; (depends of the binary that you want to test) and rename the dll &lt;code&gt;mpclient.dll&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the executable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to compile&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://releases.llvm.org/download.html&#34;&gt;https://releases.llvm.org/download.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reboot your computer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to try MpCmdRun.exe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;clang++ dllmain-mpcmdrun.cpp -o mpclient.dll -shared&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to try NisSrv.exe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;clang++ dllmain-NisSrv.cpp -o mpclient.dll -shared&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Yara Rule&lt;/h2&gt; &#xA;&lt;p&gt;Check the file &lt;code&gt;lockbit3mpclientdefender.yar&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NixOS/nix</title>
    <updated>2022-08-06T01:30:58Z</updated>
    <id>tag:github.com,2022-08-06:/NixOS/nix</id>
    <link href="https://github.com/NixOS/nix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nix, the purely functional package manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nix&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/nixos&#34;&gt;&lt;img src=&#34;https://opencollective.com/nixos/tiers/supporter/badge.svg?label=Supporters&amp;amp;color=brightgreen&#34; alt=&#34;Open Collective supporters&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NixOS/nix/actions&#34;&gt;&lt;img src=&#34;https://github.com/NixOS/nix/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nix is a powerful package manager for Linux and other Unix systems that makes package management reliable and reproducible. Please refer to the &lt;a href=&#34;https://nixos.org/nix/manual&#34;&gt;Nix manual&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;On Linux and macOS the easiest way to install Nix is to run the following shell command (as a user other than root):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ curl -L https://nixos.org/nix/install | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Information on additional installation methods is available on the &lt;a href=&#34;https://nixos.org/download.html&#34;&gt;Nix download page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building And Developing&lt;/h2&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://nixos.org/manual/nix/stable/contributing/hacking.html&#34;&gt;Hacking guide&lt;/a&gt; in our manual for instruction on how to build nix from source with nix-build or how to get a development environment.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nixos.org/nix/manual&#34;&gt;Nix manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.nixos.org/project/nix&#34;&gt;Nix jobsets on hydra.nixos.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.nixos.org/&#34;&gt;NixOS Discourse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/#nix:nixos.org&#34;&gt;Matrix - #nix:nixos.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;irc://irc.libera.chat/#nixos&#34;&gt;IRC - #nixos on libera.chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Nix is released under the &lt;a href=&#34;https://raw.githubusercontent.com/NixOS/nix/master/COPYING&#34;&gt;LGPL v2.1&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>boostorg/beast</title>
    <updated>2022-08-06T01:30:58Z</updated>
    <id>tag:github.com,2022-08-06:/boostorg/beast</id>
    <link href="https://github.com/boostorg/beast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTTP and WebSocket built on Boost.Asio in C++11&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img width=&#34;880&#34; height=&#34;80&#34; alt=&#34;Boost.Beast Title&#34; src=&#34;https://raw.githubusercontent.com/boostorg/beast/master/doc/images/readme2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;HTTP and WebSocket built on Boost.Asio in C++11&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Branch&lt;/th&gt; &#xA;   &lt;th&gt;Linux / Windows&lt;/th&gt; &#xA;   &lt;th&gt;Coverage&lt;/th&gt; &#xA;   &lt;th&gt;Documentation&lt;/th&gt; &#xA;   &lt;th&gt;Matrix&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/boostorg/beast/tree/master&#34;&gt;master&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drone.cpp.al/boostorg/beast&#34;&gt;&lt;img src=&#34;https://drone.cpp.al/api/badges/boostorg/beast/status.svg?ref=refs/heads/master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://codecov.io/gh/boostorg/beast/branch/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/boostorg/beast/master.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/master/libs/beast/doc/html/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-master-brightgreen.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.boost.org/development/tests/master/developer/beast.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/matrix-master-brightgreen.svg?sanitize=true&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/boostorg/beast/tree/develop&#34;&gt;develop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drone.cpp.al/boostorg/beast&#34;&gt;&lt;img src=&#34;https://drone.cpp.al/api/badges/boostorg/beast/status.svg?ref=refs/heads/develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://codecov.io/gh/boostorg/beast/branch/develop&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/boostorg/beast/develop.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.boost.org/doc/libs/develop/libs/beast/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-develop-brightgreen.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.boost.org/development/tests/develop/developer/beast.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/matrix-develop-brightgreen.svg?sanitize=true&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boostorg/beast/develop/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boostorg/beast/develop/#appearances&#34;&gt;Appearances&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boostorg/beast/develop/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boostorg/beast/develop/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boostorg/beast/develop/#branches&#34;&gt;Git Branches&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boostorg/beast/develop/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boostorg/beast/develop/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boostorg/beast/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boostorg/beast/develop/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boostorg/beast/develop/#contributing-we-need-your-help&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Beast is a C++ header-only library serving as a foundation for writing interoperable networking libraries by providing &lt;strong&gt;low-level HTTP/1, WebSocket, and networking protocol&lt;/strong&gt; vocabulary types and algorithms using the consistent asynchronous model of Boost.Asio.&lt;/p&gt; &#xA;&lt;p&gt;This library is designed for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Symmetry:&lt;/strong&gt; Algorithms are role-agnostic; build clients, servers, or both.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ease of Use:&lt;/strong&gt; Boost.Asio users will immediately understand Beast.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Flexibility:&lt;/strong&gt; Users make the important decisions such as buffer or thread management.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance:&lt;/strong&gt; Build applications handling thousands of connections or more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Basis for Further Abstraction.&lt;/strong&gt; Components are well-suited for building upon.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Appearances&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/vinniefalco/CppCon2018&#34;&gt;CppCon 2018&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://www.bishopfox.com/case_study/securing-beast/&#34;&gt;Bishop Fox 2018&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=7FQwAjELMek&#34;&gt;&lt;img width=&#34;320&#34; height=&#34;180&#34; alt=&#34;Beast&#34; src=&#34;https://raw.githubusercontent.com/vinniefalco/CppCon2018/master/CppCon2018.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://youtu.be/4TtyYbGDAj0&#34;&gt;&lt;img width=&#34;320&#34; height=&#34;180&#34; alt=&#34;Beast Security Review&#34; src=&#34;https://raw.githubusercontent.com/vinniefalco/BeastAssets/master/BishopFox2018.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/vinniefalco/CppCon2018&#34;&gt;CppCon 2017&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;http://cppcast.com/2017/01/vinnie-falco/&#34;&gt;CppCast 2017&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vinniefalco/BeastAssets/master/CppCon2016.pdf&#34;&gt;CppCon 2016&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WsUnnYEKPnI&#34;&gt;&lt;img width=&#34;320&#34; height=&#34;180&#34; alt=&#34;Beast&#34; src=&#34;https://raw.githubusercontent.com/vinniefalco/CppCon2017/master/CppCon2017.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://cppcast.com/2017/01/vinnie-falco/&#34;&gt;&lt;img width=&#34;180&#34; height=&#34;180&#34; alt=&#34;Vinnie Falco&#34; src=&#34;https://avatars1.githubusercontent.com/u/1503976?v=3&amp;amp;u=76c56d989ef4c09625256662eca2775df78a16ad&amp;amp;s=180&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=uJZgRcvPFwI&#34;&gt;&lt;img width=&#34;320&#34; height=&#34;180&#34; alt=&#34;Beast&#34; src=&#34;https://raw.githubusercontent.com/vinniefalco/BeastAssets/master/CppCon2016.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This software is in its first official release. Interfaces may change in response to user feedback. For recent changes see the &lt;a href=&#34;https://raw.githubusercontent.com/boostorg/beast/develop/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast&#34;&gt;Official Site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.boost.org/doc/libs/master/libs/beast/&#34;&gt;Documentation&lt;/a&gt; (master branch)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vinniefalco.github.io/boost/beast/reports/autobahn/index.html&#34;&gt;Autobahn|Testsuite WebSocket Results&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This library is for programmers familiar with Boost.Asio. Users who wish to use asynchronous interfaces should already know how to create concurrent network programs using callbacks or coroutines.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++11:&lt;/strong&gt; Robust support for most language features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Boost:&lt;/strong&gt; Boost.Asio and some other parts of Boost.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenSSL:&lt;/strong&gt; Required for using TLS/Secure sockets and examples/tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When using Microsoft Visual C++, Visual Studio 2017 or later is required.&lt;/p&gt; &#xA;&lt;p&gt;One of these components is required in order to build the tests and examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Properly configured bjam/b2&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.5.1 or later (Windows only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Beast is header-only. To use it just add the necessary &lt;code&gt;#include&lt;/code&gt; line to your source files, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;boost/beast.hpp&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use coroutines you&#39;ll need to link with the Boost.Coroutine library. Please visit the Boost documentation for instructions on how to do this for your particular build system.&lt;/p&gt; &#xA;&lt;h2&gt;GitHub&lt;/h2&gt; &#xA;&lt;p&gt;To use the latest official release of Beast, simply obtain the latest Boost distribution and follow the instructions for integrating it into your development environment. If you wish to build the examples and tests, or if you wish to preview upcoming changes and features, it is suggested to clone the &#34;Boost superproject&#34; and work with Beast &#34;in-tree&#34; (meaning, the libs/beast subdirectory of the superproject).&lt;/p&gt; &#xA;&lt;p&gt;The official repository contains the following branches:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/boostorg/beast/tree/master&#34;&gt;&lt;strong&gt;master&lt;/strong&gt;&lt;/a&gt; This holds the most recent snapshot with code that is known to be stable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/boostorg/beast/tree/develop&#34;&gt;&lt;strong&gt;develop&lt;/strong&gt;&lt;/a&gt; This holds the most recent snapshot. It may contain unstable code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each of these branches requires a corresponding Boost branch and all of its subprojects. For example, if you wish to use the &lt;strong&gt;master&lt;/strong&gt; branch version of Beast, you should clone the Boost superproject, switch to the &lt;strong&gt;master&lt;/strong&gt; branch in the superproject and acquire all the Boost libraries corresponding to that branch including Beast.&lt;/p&gt; &#xA;&lt;p&gt;To clone the superproject locally, and switch into the main project&#39;s directory use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/boostorg/boost.git&#xA;cd boost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&#34;bjam&#34; is used to build Beast and the Boost libraries. On a non-Windows system use this command to build bjam:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./bootstrap.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From a Windows command line, build bjam using this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\BOOTSTRAP.BAT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building tests and examples&lt;/h2&gt; &#xA;&lt;p&gt;Building tests and examples requires OpenSSL installed. If OpenSSL is installed in a non-system location, you will need to copy the &lt;a href=&#34;https://raw.githubusercontent.com/boostorg/beast/develop/tools/user-config.jam&#34;&gt;user-config.jam&lt;/a&gt; file into your home directory and set the &lt;code&gt;OPENSSL_ROOT&lt;/code&gt; environment variable to the path that contains an installation of OpenSSL.&lt;/p&gt; &#xA;&lt;h3&gt;Ubuntu/Debian&lt;/h3&gt; &#xA;&lt;p&gt;If installed into a system directory, OpenSSL will be automatically found and used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install libssl-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;path&lt;/code&gt; in the following code snippets with the path you installed vcpkg to. Examples assume a 32-bit build, if you build a 64-bit version replace &lt;code&gt;x32-windows&lt;/code&gt; with &lt;code&gt;x64-windows&lt;/code&gt; in the path.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; and CMD:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;vcpkg install openssl --triplet x32-windows&#xA;SET OPENSSL_ROOT=path\installed\x32-windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; and PowerShell:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;vcpkg install openssl --triplet x32-windows&#xA;$env:OPENSSL_ROOT = &#34;path\x32-windows&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; and bash:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vcpkg.exe install openssl --triplet x32-windows&#xA;export OPENSSL_ROOT=path/x32-windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mac OS&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/Homebrew/brew&#34;&gt;brew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install openssl&#xA;export OPENSSL_ROOT=$(brew --prefix openssl)&#xA;# install bjam tool user specific configuration file to read OPENSSL_ROOT&#xA;# see https://www.bfgroup.xyz/b2/manual/release/index.html&#xA;cp ./libs/beast/tools/user-config.jam $HOME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure the bjam tool (also called &#34;b2&#34;) is available in the path your shell uses to find executables. The Beast project is located in &#34;libs/beast&#34; relative to the directory containing the Boot superproject. To build the Beast tests, examples, and documentation use these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PATH=$PWD:$PATH&#xA;b2 -j2 libs/beast/test cxxstd=11      # bjam must be in your $PATH&#xA;b2 -j2 libs/beast/example cxxstd=11   # &#34;-j2&#34; means use two processors&#xA;b2 libs/beast/doc                     # Doxygen and Saxon are required for this&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional instructions for configuring, using, and building libraries in superproject may be found in the &lt;a href=&#34;https://github.com/boostorg/boost/wiki/Getting-Started&#34;&gt;Boost Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Visual Studio&lt;/h2&gt; &#xA;&lt;p&gt;CMake may be used to generate a very nice Visual Studio solution and a set of Visual Studio project files using these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd libs/beast&#xA;mkdir bin&#xA;cd bin&#xA;cmake ..                                    # for 32-bit Windows builds, or&#xA;cmake -G&#34;Visual Studio 15 2017 Win64&#34; ..    # for 64-bit Windows builds (VS2017)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The files in the repository are laid out thusly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./&#xA;    bin/            Create this to hold executables and project files&#xA;    bin64/          Create this to hold 64-bit Windows executables and project files&#xA;    doc/            Source code and scripts for the documentation&#xA;    include/        Where the header files are located&#xA;    example/        Self contained example programs&#xA;    meta/           Metadata for Boost integration&#xA;    test/           The unit tests for Beast&#xA;    tools/          Scripts used for CI testing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;These examples are complete, self-contained programs that you can build and run yourself (they are in the &lt;code&gt;example&lt;/code&gt; directory).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.boost.org/doc/libs/develop/libs/beast/doc/html/beast/quick_start.html&#34;&gt;https://www.boost.org/doc/libs/develop/libs/beast/doc/html/beast/quick_start.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the Boost Software License, Version 1.0. (See accompanying file &lt;a href=&#34;https://raw.githubusercontent.com/boostorg/beast/develop/LICENSE_1_0.txt&#34;&gt;LICENSE_1_0.txt&lt;/a&gt; or copy at &lt;a href=&#34;https://www.boost.org/LICENSE_1_0.txt&#34;&gt;https://www.boost.org/LICENSE_1_0.txt&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Please report issues or questions here: &lt;a href=&#34;https://github.com/boostorg/beast/issues&#34;&gt;https://github.com/boostorg/beast/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing (We Need Your Help!)&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to contribute to Beast and help us maintain high quality, consider performing code reviews on active pull requests. Any feedback from users and stakeholders, even simple questions about how things work or why they were done a certain way, carries value and can be used to improve the library. Code review provides these benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Identify bugs&lt;/li&gt; &#xA; &lt;li&gt;Documentation proof-reading&lt;/li&gt; &#xA; &lt;li&gt;Adjust interfaces to suit use-cases&lt;/li&gt; &#xA; &lt;li&gt;Simplify code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can look through the Closed pull requests to get an idea of how reviews are performed. To give a code review just sign in with your GitHub account and then add comments to any open pull requests below, don&#39;t be shy!&lt;/p&gt; &#xA;&lt;p&gt;https://github.com/boostorg/beast/pulls&lt;/p&gt; &#xA;&lt;p&gt;Here are some resources to learn more about code reviews:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.scottnonnenberg.com/top-ten-pull-request-review-mistakes/&#34;&gt;Top 10 Pull Request Review Mistakes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://static1.smartbear.co/smartbear/media/pdfs/best-kept-secrets-of-peer-code-review_redirected.pdf&#34;&gt;Best Kept Secrets of Peer Code Review (pdf)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://static1.smartbear.co/support/media/resources/cc/11_best_practices_for_peer_code_review_redirected.pdf&#34;&gt;11 Best Practices for Peer Code Review (pdf)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.evoketechnologies.com/blog/code-review-checklist-perform-effective-code-reviews/&#34;&gt;Code Review Checklist – To Perform Effective Code Reviews&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/524235/Codeplusreviewplusguidelines&#34;&gt;Code review guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/isocpp/CppCoreGuidelines/raw/master/CppCoreGuidelines.md&#34;&gt;C++ Core Guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/library/view/c-coding-standards/0321113586/&#34;&gt;C++ Coding Standards (Sutter &amp;amp; Alexandrescu)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Beast thrives on code reviews and any sort of feedback from users and stakeholders about its interfaces. Even if you just have questions, asking them in the code review or in issues provides valuable information that can be used to improve the library - do not hesitate, no question is insignificant or unimportant!&lt;/p&gt;</summary>
  </entry>
</feed>