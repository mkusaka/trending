<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-17T01:24:01Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jesyspa/linear-cpp</title>
    <updated>2024-02-17T01:24:01Z</updated>
    <id>tag:github.com,2024-02-17:/jesyspa/linear-cpp</id>
    <link href="https://github.com/jesyspa/linear-cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An attempt at a C++ tutorial.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linear C++&lt;/h1&gt; &#xA;&lt;p&gt;A C++ tutorial that can (hopefully?) be followed without jumping from chapter to chapter at every step.&lt;/p&gt; &#xA;&lt;h2&gt;Downloads:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesyspa/linear-cpp/archive/master.zip&#34;&gt;No project files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesyspa/linear-cpp/archive/with_codeblocks_project_files.zip&#34;&gt;Code::Blocks project files&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Via a bash shell, compiling all chapters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;for a in Chapter*; do g++ -std=c++11 -o &#34;$a/out&#34; &#34;$a&#34;/*.cpp; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On OSX:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You must install XCode and the Command Line Tools package. As of 9/04/2013, Mac OS X doesn&#39;t ship with a C++11 compiler.&lt;/li&gt; &#xA; &lt;li&gt;Then use clang to build:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;for a in Chapter*; do clang++ --std=c++11 --stdlib=libc++ &#34;$a&#34;/*.cpp -o &#34;$a&#34;/out; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, when compiling your own files on either of those two platforms, I recommend you add &lt;code&gt;-Wall&lt;/code&gt; and &lt;code&gt;-Wextra&lt;/code&gt; to your flags. Clang users may also want to add &lt;code&gt;-fsanitize=undefined&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Markdown and EPUB&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/Gullumluvl&#34;&gt;@Gullumluvl&lt;/a&gt; it&#39;s possible to export these chapters as Markdown or epub files!&lt;/p&gt; &#xA;&lt;p&gt;To do so, just run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./cpp_2_markdown.py Chapter\ NN*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;NN&lt;/code&gt; is the number of the chapter.&lt;/p&gt; &#xA;&lt;p&gt;You can use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./cpp_2_markdown.py .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to build the whole book.&lt;/p&gt; &#xA;&lt;p&gt;For building an epub, make sure you have &lt;code&gt;pandoc&lt;/code&gt; and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pandoc -M author=jesyspa \&#xA;  --standalone \&#xA;  -V &#39;header-includes=&#34;&amp;lt;style&amp;gt;pre &amp;gt; code.sourceCode {white-space: pre-wrap !important;}&amp;lt;/style&amp;gt;&#34;&#39; \&#xA;  --toc --toc-depth=1 \&#xA;  -o linear-cpp.epub \&#xA;  ebook.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;header-includes&lt;/code&gt; argument is needed to wrap long code lines.&lt;/p&gt; &#xA;&lt;h2&gt;Future plans&lt;/h2&gt; &#xA;&lt;p&gt;This project is discontinued. I don&#39;t plan to update it for new C++ standards or add any new language features.&lt;/p&gt; &#xA;&lt;p&gt;Outline of what&#39;s &lt;del&gt;coming&lt;/del&gt; missing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Practical Examples&lt;/li&gt; &#xA; &lt;li&gt;Variants, Optional&lt;/li&gt; &#xA; &lt;li&gt;Most of inheritance&lt;/li&gt; &#xA; &lt;li&gt;Scope&lt;/li&gt; &#xA; &lt;li&gt;Storage Duration&lt;/li&gt; &#xA; &lt;li&gt;Undefined Behaviour&lt;/li&gt; &#xA; &lt;li&gt;File IO&lt;/li&gt; &#xA; &lt;li&gt;Libraries: Boost, Abseil...&lt;/li&gt; &#xA; &lt;li&gt;Metaprogramming&lt;/li&gt; &#xA; &lt;li&gt;C++14 and up&lt;/li&gt; &#xA; &lt;li&gt;The preprocessor&lt;/li&gt; &#xA; &lt;li&gt;Most C features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So while I&#39;m glad people have found it useful, please &lt;em&gt;don&#39;t&lt;/em&gt; rely on this by itself to learn C++! It really only scratches the surface, and you&#39;ll do yourself a service if you get a &lt;a href=&#34;https://stackoverflow.com/q/388242/559931&#34;&gt;good book&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MalwareTech/EDR-Preloader</title>
    <updated>2024-02-17T01:24:01Z</updated>
    <id>tag:github.com,2024-02-17:/MalwareTech/EDR-Preloader</id>
    <link href="https://github.com/MalwareTech/EDR-Preloader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An EDR bypass that prevents EDRs from hooking or loading DLLs into our process by hijacking the AppVerifier layer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EDR-Preloader&lt;/h1&gt; &#xA;&lt;p&gt;An EDR bypass that prevent EDRs from hooking or loading DLLs into our process by hijacking the AppVerifier layer&lt;/p&gt; &#xA;&lt;p&gt;For details, see: &lt;a href=&#34;https://malwaretech.com/2024/02/bypassing-edrs-with-edr-preload.html&#34;&gt;malwaretech.com/2024/02/bypassing-edrs-with-edr-preload.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>