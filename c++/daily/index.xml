<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-12T01:29:16Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ripose-jp/Memento</title>
    <updated>2025-02-12T01:29:16Z</updated>
    <id>tag:github.com,2025-02-12:/ripose-jp/Memento</id>
    <link href="https://github.com/ripose-jp/Memento" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An mpv-based video player for studying Japanese&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Memento&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/memento/&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/memento&#34; alt=&#34;AUR&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://flathub.org/apps/details/io.github.ripose_jp.Memento&#34;&gt;&lt;img src=&#34;https://img.shields.io/flathub/v/io.github.ripose_jp.Memento&#34; alt=&#34;Flathub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Memento is a FOSS, mpv-based video player for studying Japanese.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ripose-jp/Memento/master/example.png&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Grammar aware subtitle search&lt;/li&gt; &#xA; &lt;li&gt;Yomichan-style Kanji cards&lt;/li&gt; &#xA; &lt;li&gt;Support for Yomichan dictionaries&lt;/li&gt; &#xA; &lt;li&gt;Anki card creation through &lt;a href=&#34;https://ankiweb.net/shared/info/2055492159&#34;&gt;AnkiConnect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for mpv upscalers, plugins, and configuration files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dictionaries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.edrdg.org/jmdict/edict_doc.html&#34;&gt;JMdict&lt;/a&gt;&lt;/strong&gt; (Japanese vocabulary) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/themoeway/jmdict-yomitan/releases/latest/download/JMdict_dutch.zip&#34;&gt;JMdict_dutch.zip&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/themoeway/jmdict-yomitan/releases/latest/download/JMdict_english.zip&#34;&gt;JMdict_english.zip&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/themoeway/jmdict-yomitan/releases/latest/download/JMdict_french.zip&#34;&gt;JMdict_french.zip&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/themoeway/jmdict-yomitan/releases/latest/download/JMdict_german.zip&#34;&gt;JMdict_german.zip&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/themoeway/jmdict-yomitan/releases/latest/download/JMdict_hungarian.zip&#34;&gt;JMdict_hungarian.zip&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/themoeway/jmdict-yomitan/releases/latest/download/JMdict_russian.zip&#34;&gt;JMdict_russian.zip&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/themoeway/jmdict-yomitan/releases/latest/download/JMdict_slovenian.zip&#34;&gt;JMdict_slovenian.zip&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/themoeway/jmdict-yomitan/releases/latest/download/JMdict_spanish.zip&#34;&gt;JMdict_spanish.zip&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/themoeway/jmdict-yomitan/releases/latest/download/JMdict_swedish.zip&#34;&gt;JMdict_swedish.zip&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.edrdg.org/enamdict/enamdict_doc.html&#34;&gt;JMnedict&lt;/a&gt;&lt;/strong&gt; (Japanese names) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/themoeway/jmdict-yomitan/releases/latest/download/JMnedict.zip&#34;&gt;JMnedict.zip&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://kireicake.com/rikaicakes/&#34;&gt;KireiCake&lt;/a&gt;&lt;/strong&gt; (Japanese slang) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/FooSoft/yomichan/raw/dictionaries/kireicake.zip&#34;&gt;kireicake.zip&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://nihongo.monash.edu/kanjidic2/index.html&#34;&gt;KANJIDIC&lt;/a&gt;&lt;/strong&gt; (Japanese kanji) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/themoeway/jmdict-yomitan/releases/latest/download/KANJIDIC_english.zip&#34;&gt;KANJIDIC_english.zip&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/themoeway/jmdict-yomitan/releases/latest/download/KANJIDIC_french.zip&#34;&gt;KANJIDIC_french.zip&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/themoeway/jmdict-yomitan/releases/latest/download/KANJIDIC_portuguese.zip&#34;&gt;KANJIDIC_portuguese.zip&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/themoeway/jmdict-yomitan/releases/latest/download/KANJIDIC_spanish.zip&#34;&gt;KANJIDIC_spanish.zip&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://web.archive.org/web/20190309073023/https://forum.koohii.com/thread-9459.html#pid168613&#34;&gt;Innocent Corpus&lt;/a&gt;&lt;/strong&gt; (Term and kanji frequencies across 5000+ novels) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/FooSoft/yomichan/raw/dictionaries/innocent_corpus.zip&#34;&gt;innocent_corpus.zip&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/mifunetoshiro/kanjium&#34;&gt;Kanjium&lt;/a&gt;&lt;/strong&gt; (Pitch dictionary, see &lt;a href=&#34;https://github.com/toasted-nutbread/yomichan-pitch-accent-dictionary&#34;&gt;related project page&lt;/a&gt; for details) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/FooSoft/yomichan/raw/dictionaries/kanjium_pitch_accents.zip&#34;&gt;kanjium_pitch_accents.zip&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Can&#39;t Add Cards: Only the &#34;Show in Anki&#34; Button is Available&lt;/h3&gt; &#xA;&lt;p&gt;This means there is a mistake in your card template. When this happens, AnkiConnect will report that all potential cards are not addable. Double check your card template to see if the front of the card is missing something.&lt;/p&gt; &#xA;&lt;h3&gt;Secondary Subtitles Don&#39;t Work&lt;/h3&gt; &#xA;&lt;p&gt;Prior to mpv v0.35.0, it was impossible to set the visibility of primary and secondary subtitles independent of one another. If you haven&#39;t compiled Memento yourself and are using the provided binaries for v1.0.0 or later, this section doesn&#39;t apply to you.&lt;/p&gt; &#xA;&lt;h4&gt;Method 1&lt;/h4&gt; &#xA;&lt;p&gt;Go to Settings → Options → Search, uncheck &#34;Hide mpv subtitles when subtitle search is visible&#34;, and check &#34;Hide subtitle search when playing media&#34;.&lt;/p&gt; &#xA;&lt;p&gt;If the searchable subtitles become harder to read, consider adding a background. This can be done in Interface settings. Make sure you set the alpha/opacity channel to 255 in order to avoid your background being transparent.&lt;/p&gt; &#xA;&lt;h4&gt;Method 2&lt;/h4&gt; &#xA;&lt;p&gt;When the Memento is paused, manually toggle subtitle visibility to reveal the secondary subtitle. Subtitle visibility is bound to &lt;strong&gt;v&lt;/strong&gt; by default.&lt;/p&gt; &#xA;&lt;h3&gt;Windows: MSVCR100.dll is Missing When Trying to Stream&lt;/h3&gt; &#xA;&lt;p&gt;This error can be fixed by installing the &lt;a href=&#34;https://download.microsoft.com/download/1/6/5/165255E7-1014-4D0A-B094-B6A430A6BFFC/vcredist_x86.exe&#34;&gt;Microsoft Visual C++ 2010 Service Pack 1 Redistributable Package (x86)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Windows: Updating youtube-dl/yt-dlp&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re version of youtube-dl is out of date, you may experience degraded streaming performance or websites not working entirely.&lt;/p&gt; &#xA;&lt;p&gt;Memento&#39;s version of youtube-dl can be updated by doing the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe&#34;&gt;yt-dlp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rename the file to &lt;code&gt;youtube-dl.exe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Put &lt;code&gt;youtube-dl.exe&lt;/code&gt; in Memento&#39;s install directory. For the portable version of Memento, this is located in the same folder as the executable. For the installed version, this is located at &lt;code&gt;C:\Program Files\Memento&lt;/code&gt; by default.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;macOS: Streaming video doesn&#39;t work&lt;/h3&gt; &#xA;&lt;p&gt;This means that mpv cannot find your youtube-dl installation.&lt;/p&gt; &#xA;&lt;p&gt;To install youtube-dl, paste these commands into Terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o ~/Library/Preferences/memento/youtube-dl&#xA;chmod a+rx ~/Library/Preferences/memento/youtube-dl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS: Could not initialize MeCab&lt;/h3&gt; &#xA;&lt;p&gt;Move the Memento application to a directory that doesn&#39;t have spaces in the path like &lt;code&gt;/Applications&lt;/code&gt;. Unfortunately, this is an limitation of MeCab and there is no workaround that can be implemented.&lt;/p&gt; &#xA;&lt;h3&gt;Linux: Audio and images aren&#39;t added to Anki&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;This only applies to users of the &lt;strong&gt;Anki&lt;/strong&gt; Flatpak.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default the &lt;strong&gt;Anki&lt;/strong&gt; Flatpak doesn&#39;t have access to the &lt;code&gt;/tmp&lt;/code&gt; directory. Memento stores audio and image files here temporarily when making them available to Anki. You can give Anki access to the &lt;code&gt;/tmp&lt;/code&gt; directory by installing &lt;a href=&#34;https://flathub.org/apps/com.github.tchx84.Flatseal&#34;&gt;Flatseal&lt;/a&gt;. To do so, open Flatseal, select Anki, and add the &lt;code&gt;/tmp&lt;/code&gt; directory under &lt;strong&gt;Other files&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Qt &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Base&lt;/li&gt; &#xA;   &lt;li&gt;SVG&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;mpv&lt;/li&gt; &#xA; &lt;li&gt;sqlite3&lt;/li&gt; &#xA; &lt;li&gt;Json-C&lt;/li&gt; &#xA; &lt;li&gt;libzip&lt;/li&gt; &#xA; &lt;li&gt;youtube-dl or yt-dlp (optional)&lt;/li&gt; &#xA; &lt;li&gt;MeCab (optional) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With either ipadic or NAIST-jdic installed as a system dictionary on Linux and macOS. This only applies to self-compiled versions, not appimages or app bundles.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Python (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the best experience, install &lt;a href=&#34;https://fonts.google.com/noto/specimen/Noto+Sans+JP&#34;&gt;Noto Sans JP&lt;/a&gt; and the &lt;a href=&#34;https://drive.google.com/uc?export=download&amp;amp;id=1oyQoTB531tbhlYaOW7ugvutXZ7HSlJfW&#34;&gt;Kanji Stroke Order&lt;/a&gt; fonts.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;I do not guarantee that any branch will successfully build or be bug-free.&lt;/strong&gt; &lt;strong&gt;If you want to build a stable version of Memento, compile a &lt;a href=&#34;https://github.com/ripose-jp/Memento/releases&#34;&gt;release&lt;/a&gt; from source.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;To install Memento on Linux, type the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.msys2.org/&#34;&gt;MSYS2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;strong&gt;MSYS2 MinGW 64-bit&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure MSYS2 is up to date by running this command multiple times until it stops doing anything: &lt;pre&gt;&lt;code&gt;pacman -Syuu&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the necessary tools and dependencies: &lt;pre&gt;&lt;code&gt;pacman -S git make mingw-w64-x86_64-gcc mingw-w64-x86_64-ninja mingw-w64-x86_64-cmake mingw-w64-x86_64-python mingw-w64-x86_64-sqlite3 mingw-w64-x86_64-qt6 mingw-w64-x86_64-mpv mingw-w64-x86_64-mecab mingw-w64-x86_64-json-c mingw-w64-x86_64-libzip&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clone the repository: &lt;pre&gt;&lt;code&gt;git clone https://github.com/ripose-jp/Memento.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build Memento: &lt;pre&gt;&lt;code&gt;cd Memento&#xA;./windows/build.sh x86_64&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;The resulting file will be in &lt;pre&gt;&lt;code&gt;build/Memento_x86_64&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Clang is the only officially supported compiler for building Memento on macOS.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; with this command: &lt;pre&gt;&lt;code&gt;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the necessary tools and dependencies: &lt;pre&gt;&lt;code&gt;brew install git cmake sqlite3 qt6 mpv mecab mecab-ipadic json-c libzip&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clone the repository: &lt;pre&gt;&lt;code&gt;git clone https://github.com/ripose-jp/Memento.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build Memento: &lt;pre&gt;&lt;code&gt;cd Memento&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;The resulting executable will be: &lt;pre&gt;&lt;code&gt;Memento/build/src/Memento&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;macOS App Bundle&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow steps 1 - 3 of the macOS build instructions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dylibbundler&lt;/code&gt; is also needed when creating an app bundle, so install it with:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install dylibbundler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the &lt;strong&gt;Keychain Access&lt;/strong&gt; app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;strong&gt;Keychain Access&lt;/strong&gt; &amp;gt; &lt;strong&gt;Certificate Assistant&lt;/strong&gt; &amp;gt; &lt;strong&gt;Create a Certificate...&lt;/strong&gt; in the menubar.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Put the name of your certificate in the &#39;Name&#39; field, set the &#39;Certificate Type&#39; to &#39;Code Signing&#39;, and click &#39;Create&#39;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Return to your terminal and input:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd Memento&#xA;make appbundle CERT_NAME=&#39;&amp;lt;name entered in the last step&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The resulting app bundle will located at:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Memento/build/src/Memento.app&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Adding OCR Support&lt;/h3&gt; &#xA;&lt;p&gt;To build with OCR support, make sure that Python is installed and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install manga-ocr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Any problems you may have getting &lt;code&gt;manga-ocr&lt;/code&gt; installed using &lt;code&gt;pip&lt;/code&gt; is beyond the scope of this project. I wish you the best of luck.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;-DOCR_SUPPORT=ON&lt;/code&gt; to the &lt;code&gt;CMAKE_ARGS&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export CMAKE_ARGS=&#39;-DOCR_SUPPORT=ON&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From here follow normal build instructions for your platform.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Theoretically OCR is supported on Windows. Assuming Memento was built against msys2&#39;s version of Python, you will have to set the environment variable &lt;code&gt;PYTHONHOME&lt;/code&gt; to &lt;code&gt;C:\msys64\mingw64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Most mpv shaders, plugins, and configuration files will work without modification.&lt;/p&gt; &#xA;&lt;p&gt;It is important to note that mpv and Memento&#39;s configuration directories are &lt;strong&gt;separate&lt;/strong&gt;. This means mpv configuration files, scripts, etc. intended to modify Memento&#39;s behavior should be placed in Memento&#39;s configuration directory.&lt;/p&gt; &#xA;&lt;p&gt;The Memento configuration directory is located at:&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/.config/memento&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Version 0.5.1 and later&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;%APPDATA%\Local\memento&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Version 0.5.0-1 and earlier&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[installation directory]\config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/Library/Preferences/memento&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If any mpv binds or plugins do not work, please create an issue in the issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Before making a pull request, please read &lt;a href=&#34;https://raw.githubusercontent.com/ripose-jp/Memento/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;asbplayer&lt;/h2&gt; &#xA;&lt;p&gt;If you hate Memento, try &lt;a href=&#34;https://killergerbah.github.io/asbplayer/&#34;&gt;asbplayer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MpvWidget code is based off of libmpv example code by w4m &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mpv-player/mpv-examples/tree/master/libmpv/qt_opengl&#34;&gt;https://github.com/mpv-player/mpv-examples/tree/master/libmpv/qt_opengl&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Some code based off of Baka-MPlayer &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/u8sand/Baka-MPlayer&#34;&gt;https://github.com/u8sand/Baka-MPlayer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Hardware acceleration achieved on Linux using mpc-qt code &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mpc-qt/mpc-qt&#34;&gt;https://github.com/mpc-qt/mpc-qt&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;UI inspired by and dictionaries provided by Yomichan. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://foosoft.net/projects/yomichan/&#34;&gt;https://foosoft.net/projects/yomichan/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;OCR backend written kha-white and contributors &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kha-white/manga-ocr&#34;&gt;https://github.com/kha-white/manga-ocr&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fullscreen icons sourced from here &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.iconfinder.com/iconsets/material-core&#34;&gt;https://www.iconfinder.com/iconsets/material-core&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Various icons sourced from here &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.iconfinder.com/iconsets/ionicons&#34;&gt;https://www.iconfinder.com/iconsets/ionicons&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pause, play, skip, and seek icons sourced from here and used under the &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34;&gt;CC 3.0 License&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.iconfinder.com/iconsets/play-rounded&#34;&gt;https://www.iconfinder.com/iconsets/play-rounded&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mingw-bundledlls.py&lt;/code&gt; based on this script with a slightly expanded blacklist &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mpreisler/mingw-bundledlls&#34;&gt;https://github.com/mpreisler/mingw-bundledlls&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Flatpak manifest heavily based on the mpv Flatpak &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/flathub/io.mpv.Mpv&#34;&gt;https://github.com/flathub/io.mpv.Mpv&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>qpdf/qpdf</title>
    <updated>2025-02-12T01:29:16Z</updated>
    <id>tag:github.com,2025-02-12:/qpdf/qpdf</id>
    <link href="https://github.com/qpdf/qpdf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;qpdf: A content-preserving PDF document transformer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://qpdf.sourceforge.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qpdf/qpdf/main/logo/qpdf.svg?sanitize=true&#34; alt=&#34;qpdf&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qpdf/qpdf/actions&#34;&gt;&lt;img src=&#34;https://github.com/qpdf/qpdf/workflows/QPDF%20Build/badge.svg?sanitize=true&#34; alt=&#34;qpdf Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://qpdf.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/qpdf/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;qpdf is a command-line tool and C++ library that performs content-preserving transformations on PDF files. It supports linearization, encryption, and numerous other features. It can also be used for splitting and merging files, creating PDF files (but you have to supply all the content yourself), and inspecting files for study or analysis. qpdf does not render PDFs or perform text extraction, and it does not contain higher-level interfaces for working with page contents. It is a low-level tool for working with the structure of PDF files and can be a valuable tool for anyone who wants to do programmatic or command-line-based manipulation of PDF files.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://qpdf.readthedocs.io&#34;&gt;qpdf manual&lt;/a&gt; is hosted online at &lt;a href=&#34;https://qpdf.readthedocs.io&#34;&gt;https://qpdf.readthedocs.io&lt;/a&gt;. The project website is &lt;a href=&#34;https://qpdf.sourceforge.io&#34;&gt;https://qpdf.sourceforge.io&lt;/a&gt;. The source code repository is hosted at GitHub: &lt;a href=&#34;https://github.com/qpdf/qpdf&#34;&gt;https://github.com/qpdf/qpdf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Verifying Distributions&lt;/h1&gt; &#xA;&lt;p&gt;The public key used to sign qpdf source distributions has fingerprint &lt;code&gt;C2C9 6B10 011F E009 E6D1 DF82 8A75 D109 9801 2C7E&lt;/code&gt; and can be found at &lt;a href=&#34;https://q.ql.org/pubkey.asc&#34;&gt;https://q.ql.org/pubkey.asc&lt;/a&gt; or downloaded from a public key server.&lt;/p&gt; &#xA;&lt;h1&gt;Copyright, License&lt;/h1&gt; &#xA;&lt;p&gt;qpdf is copyright (c) 2005-2021 Jay Berkenbilt, 2022-2025 Jay Berkenbilt and Manfred Holger&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34; AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt; &#xA;&lt;p&gt;You may also see the license in the file &lt;a href=&#34;https://raw.githubusercontent.com/qpdf/qpdf/main/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; in the source distribution.&lt;/p&gt; &#xA;&lt;p&gt;Versions of qpdf prior to version 7 were released under the terms of version 2.0 of the Artistic License. At your option, you may continue to consider qpdf to be licensed under those terms. Please see the manual for additional information. The Artistic License appears in the file &lt;a href=&#34;https://raw.githubusercontent.com/qpdf/qpdf/main/Artistic-2.0&#34;&gt;Artistic-2.0&lt;/a&gt; in the source distribution.&lt;/p&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;qpdf requires a C++ compiler that supports C++-17.&lt;/p&gt; &#xA;&lt;p&gt;To compile and link something with qpdf, you can use &lt;code&gt;pkg-config&lt;/code&gt; with package name &lt;code&gt;libqpdf&lt;/code&gt; or &lt;code&gt;cmake&lt;/code&gt; with package name &lt;code&gt;qpdf&lt;/code&gt;. Here&#39;s an example of a &lt;code&gt;CMakeLists.txt&lt;/code&gt; file that builds a program with the qpdf library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake_minimum_required(VERSION 3.16)&#xA;project(some-application LANGUAGES CXX)&#xA;find_package(qpdf)&#xA;add_executable(some-application some-application.cc)&#xA;target_link_libraries(some-application qpdf::libqpdf)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;qpdf depends on the external libraries &lt;a href=&#34;https://www.zlib.net/&#34;&gt;zlib&lt;/a&gt; and &lt;a href=&#34;https://www.ijg.org/files/&#34;&gt;jpeg&lt;/a&gt;. The &lt;a href=&#34;https://libjpeg-turbo.org/&#34;&gt;libjpeg-turbo&lt;/a&gt; library is also known to work since it is compatible with the regular jpeg library, and qpdf doesn&#39;t use any interfaces that aren&#39;t present in the straight jpeg8 API. These are part of every Linux distribution and are readily available. Download information appears in the documentation. For Windows, you can download pre-built binary versions of these libraries for some compilers; see &lt;a href=&#34;https://raw.githubusercontent.com/qpdf/qpdf/main/README-windows.md&#34;&gt;README-windows.md&lt;/a&gt; for additional details.&lt;/p&gt; &#xA;&lt;p&gt;Depending on which crypto providers are enabled, then &lt;a href=&#34;https://www.gnutls.org/&#34;&gt;GnuTLS&lt;/a&gt; and &lt;a href=&#34;https://openssl.org&#34;&gt;OpenSSL&lt;/a&gt; may also be required. This is discussed more in &lt;a href=&#34;https://raw.githubusercontent.com/qpdf/qpdf/main/#crypto-providers&#34;&gt;Crypto providers&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;p&gt;Detailed information appears in the &lt;a href=&#34;https://qpdf.readthedocs.io/en/latest/installation.html&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Zopfli&lt;/h2&gt; &#xA;&lt;p&gt;If qpdf is built with &lt;a href=&#34;https://github.com/google/zopfli&#34;&gt;zopfli&lt;/a&gt; support and the &lt;code&gt;QPDF_ZOPFLI&lt;/code&gt; environment variable is set to any value other than &lt;code&gt;disabled&lt;/code&gt;, qpdf will use the zopfli compression library instead of zlib to generate flate-compressed streams. The zopfli algorithm is much slower (about 100x according to their website) than zlib but produces slightly smaller output, making it suitable for cases such as generation of archival PDFs where size is important regardless of speed. To build with zopfli support, you must have the zopfli library and header file installed.&lt;/p&gt; &#xA;&lt;p&gt;The environment variable &lt;code&gt;QPDF_ZOPFLI&lt;/code&gt; can be set to the following values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;disabled&lt;/code&gt; (or unset): do not use zopfli&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force&lt;/code&gt;: use zopfli; fail if zopfli is not compiled in&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;silent&lt;/code&gt;: use zopfli if available; otherwise silently fall back to zlib&lt;/li&gt; &#xA; &lt;li&gt;any other value: use zopfli if available, and warn if not&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Licensing terms of embedded software&lt;/h1&gt; &#xA;&lt;p&gt;qpdf makes use of zlib and jpeg libraries for its functionality. These packages can be downloaded separately from their own download locations. If the optional GnuTLS or OpenSSL crypto providers are enabled, then GnuTLS and/or OpenSSL are also required.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/qpdf/qpdf/main/NOTICE.md&#34;&gt;NOTICE&lt;/a&gt; file for information on licenses of embedded software.&lt;/p&gt; &#xA;&lt;h1&gt;Crypto providers&lt;/h1&gt; &#xA;&lt;p&gt;qpdf can use different crypto implementations. These can be selected at compile time or at runtime. The native crypto implementations that were used in all versions prior to 9.1.0 are still present, but they are not built into qpdf by default if any external providers are available at build time.&lt;/p&gt; &#xA;&lt;p&gt;The following providers are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gnutls&lt;/code&gt;: an implementation that uses the GnuTLS library to provide crypto; causes libqpdf to link with the GnuTLS library&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;openssl&lt;/code&gt;: an implementation that can use the OpenSSL (or BoringSSL) libraries to provide crypto; causes libqpdf to link with the OpenSSL library&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;native&lt;/code&gt;: a native implementation where all the source is embedded in qpdf and no external dependencies are required&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default behavior is for cmake to discover which other crypto providers can be supported based on available external libraries, to build all available external crypto providers, and to use an external provider as the default over the native one. By default, the native crypto provider will be used only if no external providers are available. This behavior can be changed with various cmake options as &lt;a href=&#34;https://qpdf.readthedocs.io/en/latest/installation.html#build-time-crypto-selection&#34;&gt;described in the manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Note about weak cryptographic algorithms&lt;/h2&gt; &#xA;&lt;p&gt;The PDF file format used to rely on RC4 for encryption. Using 256-bit keys always uses AES instead, and with 128-bit keys, you can elect to use AES. qpdf does its best to warn when someone is writing a file with weak cryptographic algorithms, but qpdf must always retain support for being able to read and even write files with weak encryption to be able to fully support older PDF files and older PDF readers.&lt;/p&gt; &#xA;&lt;h1&gt;Building from source distribution on UNIX/Linux&lt;/h1&gt; &#xA;&lt;p&gt;Starting with version 11, qpdf builds with cmake. The default configuration with cmake works on most systems. On Windows, you can build qpdf with Visual Studio using cmake without having any additional tools installed. However, to run the test suite, you need MSYS2, and you also need MSYS2 to build with mingw.&lt;/p&gt; &#xA;&lt;p&gt;Example UNIX/Linux build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo&#xA;cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example mingw build from an MSYS2 mingw shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -S . -B build -G &#39;MSYS Makefiles&#39; -DCMAKE_BUILD_TYPE=RelWithDebInfo&#xA;cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example MSVC build from an MSYS shell or from a Windows command shell with Visual Studio command-line tools in the path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -S . -B build&#xA;cmake --build build --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Installation can be done with &lt;code&gt;cmake --install&lt;/code&gt;. Packages can be made with &lt;code&gt;cpack&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The tests use &lt;code&gt;qtest&lt;/code&gt;, and the test driver is invoked by &lt;code&gt;ctest&lt;/code&gt;. To see the real underlying tests, run &lt;code&gt;ctest --verbose&lt;/code&gt; so that you can see &lt;code&gt;qtest&lt;/code&gt;&#39;s output. If you need to turn off qtest&#39;s color output, pass &lt;code&gt;-DQTEST_COLOR=0&lt;/code&gt; to cmake.&lt;/p&gt; &#xA;&lt;p&gt;For additional information, please refer to the &lt;a href=&#34;https://qpdf.readthedocs.io/en/latest/installation.html&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Building on Windows&lt;/h1&gt; &#xA;&lt;p&gt;qpdf is known to build and pass its test suite with mingw and Microsoft Visual C++. Both 32-bit and 64-bit versions work. In addition to the manual, see &lt;a href=&#34;https://raw.githubusercontent.com/qpdf/qpdf/main/README-windows.md&#34;&gt;README-windows.md&lt;/a&gt; for more details on how to build under Windows.&lt;/p&gt; &#xA;&lt;h1&gt;Building Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The qpdf manual is written in reStructured Text format and is build with &lt;a href=&#34;https://www.sphinx-doc.org&#34;&gt;sphinx&lt;/a&gt;. The sources to the user manual can be found in the &lt;code&gt;manual&lt;/code&gt; directory. For more detailed information, consult the &lt;a href=&#34;https://qpdf.readthedocs.io/en/latest/installation.html&#34;&gt;Building and Installing qpdf section of the manual&lt;/a&gt; or consult the &lt;a href=&#34;https://raw.githubusercontent.com/qpdf/qpdf/main/build-scripts/build-doc&#34;&gt;build-doc script&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Additional Notes on Build&lt;/h1&gt; &#xA;&lt;p&gt;qpdf provides cmake configuration files and pkg-config files. They support static and dynamic linking. In general, you do not need the header files from qpdf&#39;s dependencies to be available to builds that &lt;em&gt;use&lt;/em&gt; qpdf. The only exception to this is that, if you include &lt;code&gt;Pl_DCT.hh&lt;/code&gt;, you need header files from &lt;code&gt;libjpeg&lt;/code&gt;. Since this is a rare case, qpdf&#39;s cmake and pkg-config files do not automatically add a JPEG include path to the build. If you are using &lt;code&gt;Pl_DCT&lt;/code&gt; explicitly, you probably already have that configured in your build.&lt;/p&gt; &#xA;&lt;p&gt;To learn about using the library, please read comments in the header files in &lt;a href=&#34;https://raw.githubusercontent.com/qpdf/qpdf/main/include/qpdf/&#34;&gt;include/qpdf&lt;/a&gt;, especially &lt;a href=&#34;https://raw.githubusercontent.com/qpdf/qpdf/main/include/qpdf/QPDF.hh&#34;&gt;QPDF.hh&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/qpdf/qpdf/main/include/qpdf/QPDFObjectHandle.hh&#34;&gt;QPDFObjectHandle.hh&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/qpdf/qpdf/main/include/qpdf/QPDFWriter.hh&#34;&gt;QPDFWriter.hh&lt;/a&gt;. These are the best sources of documentation on the API. You can also study the code of &lt;a href=&#34;https://raw.githubusercontent.com/qpdf/qpdf/main/libqpdf/QPDFJob.cc&#34;&gt;QPDFJob.cc&lt;/a&gt;, which exercises most of the public interface. There are additional example programs in the &lt;a href=&#34;https://raw.githubusercontent.com/qpdf/qpdf/main/examples/&#34;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h1&gt;Additional Notes on Test Suite&lt;/h1&gt; &#xA;&lt;p&gt;By default, slow tests and tests that require dependencies beyond those needed to build qpdf are disabled. Slow tests include image comparison tests and large file tests. Image comparison tests can be enabled by setting the &lt;code&gt;QPDF_TEST_COMPARE_IMAGES&lt;/code&gt; environment variable to &lt;code&gt;1&lt;/code&gt;. Large file tests can be enabled setting the &lt;code&gt;QPDF_LARGE_FILE_TEST_PATH&lt;/code&gt; environment variable to the absolute path of a directory with at least 11 GB of free space that can handle files over 4 GB in size. On Windows, this should be a Windows path (e.g. &lt;code&gt;C:\LargeFileTemp&lt;/code&gt; even if the build is being run from an MSYS2 environment. The test suite provides nearly full coverage even without these tests. Unless you are making deep changes to the library that would impact the contents of the generated PDF files or testing this on a new platform for the first time, there is no real reason to run these tests. If you&#39;re just running the test suite to make sure that qpdf works for your build, the default tests are adequate.&lt;/p&gt; &#xA;&lt;p&gt;If you are packaging qpdf for a distribution and preparing a build that is run by an autobuilder, you may want to pass &lt;code&gt;-DSHOW_FAILED_TEST_OUTPUT=1&lt;/code&gt; to &lt;code&gt;cmake&lt;/code&gt; and run &lt;code&gt;ctest&lt;/code&gt; with the &lt;code&gt;--verbose&lt;/code&gt; or &lt;code&gt;--output-on-failure&lt;/code&gt; option. This way, if the test suite fails, test failure detail will be included in the build output. Otherwise, you will have to have access to the &lt;code&gt;qtest.log&lt;/code&gt; file from the build to view test failures. The Debian packages for qpdf enable this option. More notes for packagers can be found in &lt;a href=&#34;https://qpdf.readthedocs.io/en/latest/packaging.html&#34;&gt;the manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Random Number Generation&lt;/h1&gt; &#xA;&lt;p&gt;By default, qpdf uses the crypto provider for generating random numbers. The rest of this applies only if you are using the native crypto provider.&lt;/p&gt; &#xA;&lt;p&gt;If the native crypto provider is in use, then, when &lt;code&gt;qpdf&lt;/code&gt; detects either the Windows cryptography API or the existence of &lt;code&gt;/dev/urandom&lt;/code&gt;, &lt;code&gt;/dev/arandom&lt;/code&gt;, or &lt;code&gt;/dev/random&lt;/code&gt;, it uses them to generate cryptographically secure random numbers. If none of these conditions are true, the build will fail with an error. This behavior can be modified in several ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you use the cmake option &lt;code&gt;SKIP_OS_SECURE_RANDOM&lt;/code&gt; or define the &lt;code&gt;SKIP_OS_SECURE_RANDOM&lt;/code&gt; preprocessor symbol, qpdf will not attempt to use Windows cryptography or the random device. You must either supply your own random data provider or allow use of insecure random numbers.&lt;/li&gt; &#xA; &lt;li&gt;If you turn on the cmake option &lt;code&gt;USE_INSECURE_RANDOM&lt;/code&gt; or define the &lt;code&gt;USE_INSECURE_RANDOM&lt;/code&gt; preprocessor symbol, qpdf will try insecure random numbers if OS-provided secure random numbers are disabled. This is not a fallback. In order for insecure random numbers to be used, you must also disable OS secure random numbers since, otherwise, failure to find OS secure random numbers is a compile error. The insecure random number source is stdlib&#39;s &lt;code&gt;random()&lt;/code&gt; or &lt;code&gt;rand()&lt;/code&gt; calls. These random numbers are not cryptography secure, but the qpdf library is fully functional using them. Using non-secure random numbers means that it&#39;s easier in some cases to guess encryption keys.&lt;/li&gt; &#xA; &lt;li&gt;In all cases, you may supply your own random data provider. To do this, derive a class from &lt;code&gt;qpdf/RandomDataProvider&lt;/code&gt; (since version 5.1.0) and call &lt;code&gt;QUtil::setRandomDataProvider&lt;/code&gt; before you create any &lt;code&gt;QPDF&lt;/code&gt; objects. If you supply your own random data provider, it will always be used even if support for one of the other random data providers is compiled in. If you wish to avoid any possibility of your build of qpdf from using anything but a user-supplied random data provider, you can define &lt;code&gt;SKIP_OS_SECURE_RANDOM&lt;/code&gt; and not &lt;code&gt;USE_INSECURE_RANDOM&lt;/code&gt;. In this case, qpdf will throw a runtime error if any attempt is made to generate random numbers and no random data provider has been supplied.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Acknowledgments&lt;/h1&gt; &#xA;&lt;p&gt;The qpdf project has a JetBrains license through their &lt;a href=&#34;https://www.jetbrains.com/community/opensource/#support&#34;&gt;Open Source Program&lt;/a&gt;. We are grateful for this program and have been enjoying the benefits of their high-quality products.&lt;/p&gt;</summary>
  </entry>
</feed>