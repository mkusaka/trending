<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-11T01:32:51Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>picotorrent/picotorrent</title>
    <updated>2022-09-11T01:32:51Z</updated>
    <id>tag:github.com,2022-09-11:/picotorrent/picotorrent</id>
    <link href="https://github.com/picotorrent/picotorrent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiny, hackable BitTorrent client.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PicoTorrent&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/picotorrent/picotorrent/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://discord.gg/tV3dFrv&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/759537913205227580&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A tiny, hackable BitTorrent client written in modern C++. Based on Rasterbar-libtorrent to provide high performance and low memory usage.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/picotorrent/picotorrent/master/res/screenshot1.png?raw=true&#34; width=&#34;614&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Quick facts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full support for BitTorrent 2.0 (&lt;a href=&#34;http://bittorrent.org/beps/bep_0052.html&#34;&gt;BEP-52&lt;/a&gt;), v1, v2 and v1+v2 hybrid torrents.&lt;/li&gt; &#xA; &lt;li&gt;Supports DHT, PeX, LSD, UPnP.&lt;/li&gt; &#xA; &lt;li&gt;(Azureus-style) peer ID: &lt;code&gt;-PI-&lt;/code&gt;. Example: &lt;code&gt;-PI0151-&lt;/code&gt; (major: 0, minor: 15, patch: 1).&lt;/li&gt; &#xA; &lt;li&gt;User agent: &lt;code&gt;PicoTorrent/x.y.z&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Native look-and-feel across Windows versions.&lt;/li&gt; &#xA; &lt;li&gt;Easy to use with high performance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;The portable version of PicoTorrent requires manual installation of &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;the Microsoft Visual C++ Redistributable for Visual Studio 2019&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building PicoTorrent&lt;/h2&gt; &#xA;&lt;p&gt;To successfully build PicoTorrent, you need the following libraries and applications installed,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cmake.org/download/&#34;&gt;CMake (&amp;gt;= v3.14)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio 2019 Build Tools&lt;/a&gt; (or regular Visual Studio 2019) with the C++ toolset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slproweb.com/products/Win32OpenSSL.html&#34;&gt;OpenSSL v1.1.1&lt;/a&gt; (&lt;em&gt;not&lt;/em&gt; the light version) for the architecture you plan on building. Both Win32 and Win64 can be installed side by side.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.boost.org&#34;&gt;Boost 1.73.0&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chocolatey.org/install&#34;&gt;Chocolatey&lt;/a&gt; (Optional) if you plan to build or test the Chocolatey package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download&#34;&gt;.NET Core&lt;/a&gt;. Used for the build scripts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;λ git submodule update --init --recursive&#xA;λ dotnet tool restore&#xA;λ dotnet cake --platorm=[x86|x64] --configuration=[Debug|Release]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;PicoTorrent uses &lt;a href=&#34;https://translate.picotorrent.org/&#34;&gt;Weblate&lt;/a&gt; to handle the translation process. If you want to help, feel free to signup and give your contribution.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) Viktor Elofsson and contributors. PicoTorrent is provided as-is under the MIT license. For more information see &lt;a href=&#34;https://raw.githubusercontent.com/picotorrent/picotorrent/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aardappel/treesheets</title>
    <updated>2022-09-11T01:32:51Z</updated>
    <id>tag:github.com,2022-09-11:/aardappel/treesheets</id>
    <link href="https://github.com/aardappel/treesheets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TreeSheets : Free Form Data Organizer (see treesheets.com)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to the source distribution of TreeSheets!&lt;/h1&gt; &#xA;&lt;p&gt;This contains all the files needed to build TreeSheets for various platforms. If instead you just want to USE TreeSheets, you may be better off with the binaries available on &lt;a href=&#34;http://strlen.com/treesheets/&#34;&gt;http://strlen.com/treesheets/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;TreeSheets has been licensed under the ZLIB license (see ZLIB_LICENSE.txt).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/aardappel/treesheets&#34;&gt;&lt;img src=&#34;https://travis-ci.org/aardappel/treesheets.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;src&lt;/code&gt; contains all source code. The code is dense, terse, and with few comments, typical for a codebase that was never intended to be used by more than one person (me). On the positive side, you&#39;ll find the code very small and simple, with all functionality easy to find and only in one place (no copy pasting or over-engineering). Enjoy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;TS&lt;/code&gt; is the folder that contains all user-facing files, typically the build process results in an executable to be put in the root of this folder, and distributing to users is then a matter of giving them this folder.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;TODO.txt&lt;/code&gt; is the random notes I kept on ideas of myself and others on what future features could be added.&lt;/p&gt; &#xA;&lt;h2&gt;Building:&lt;/h2&gt; &#xA;&lt;p&gt;Note that YOU are responsible to know how to use compilers and C++, the hints below are all the help I will give you:&lt;/p&gt; &#xA;&lt;p&gt;All Platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TreeSheets requires the latest wxWidgets from &lt;a href=&#34;https://github.com/wxWidgets/wxWidgets.git&#34;&gt;https://github.com/wxWidgets/wxWidgets.git&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Windows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure your &lt;code&gt;wxWidgets&lt;/code&gt; folder sits parallel to the &lt;code&gt;src&lt;/code&gt; folder, that way the TreeSheets project will pick it up without further modifications&lt;/li&gt; &#xA; &lt;li&gt;Inside &lt;code&gt;wxWidgets/build/msw&lt;/code&gt;, open &lt;code&gt;wx_vc17.sln&lt;/code&gt; with Visual Studio 2022.&lt;/li&gt; &#xA; &lt;li&gt;Select all projects (except the project &lt;code&gt;_custom_build&lt;/code&gt;) in the solution explorer, and go to properties: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set configuration to debug, and C/C++ -&amp;gt; Code Generation -&amp;gt; Runtime library to Multithreaded Debug&lt;/li&gt; &#xA;   &lt;li&gt;Set configuration to release, and C/C++ -&amp;gt; Code Generation -&amp;gt; Runtime library to Multithreaded&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build solution in both x64 Debug and Release&lt;/li&gt; &#xA; &lt;li&gt;Close the wxWidgets solution&lt;/li&gt; &#xA; &lt;li&gt;&#34;treesheets&#34; contains the Visual Studio 2022 files for treesheets, open the .sln. If you&#39;ve done the above correctly, TreeSheets will now compile and pick up the wxWidgets libraries.&lt;/li&gt; &#xA; &lt;li&gt;To distribute, build an installer with &lt;code&gt;TS_installer.nsi&lt;/code&gt; (requires nsis.sourceforge.net)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Linux:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using the version of wxWidgets from &lt;a href=&#34;https://github.com/wxWidgets/wxWidgets.git&#34;&gt;https://github.com/wxWidgets/wxWidgets.git&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Follow the instructions to build there, but add &lt;code&gt;--enable-unicode&lt;/code&gt; and &lt;code&gt;--disabled-shared&lt;/code&gt; to the &lt;code&gt;configure&lt;/code&gt; step.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build with &lt;code&gt;cmake -S . -B _build -DCMAKE_BUILD_TYPE=Release&lt;/code&gt; or similar. You can change the default installation prefix (&lt;code&gt;/usr/local&lt;/code&gt;) by passing something like &lt;code&gt;-DCMAKE_INSTALL_PREFIX=/usr&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install using &lt;code&gt;sudo make -C _build install&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;There is also a &lt;code&gt;src/Makefile&lt;/code&gt;, this is deprecated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OSX:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build wxWidgets as follows (inside the wxWidgets dir): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;mkdir build_osx&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd build_osx&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;../configure --enable-unicode --disable-shared --disable-sys-libs --without-libtiff --with-osx_cocoa --enable-universal_binary=x86_64,arm64 CXXFLAGS=&#34;-stdlib=libc++&#34; LDFLAGS=&#34;-stdlib=libc++&#34; OBJCXXFLAGS=&#34;-stdlib=libc++&#34; --disable-mediactrl CC=clang CXX=clang++&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;make -j8&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sudo make install&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;use the XCode project in &lt;code&gt;osx/TreeSheets&lt;/code&gt; to build treesheets. put the resulting .app together with the files from the &lt;code&gt;TS&lt;/code&gt; folder in &lt;code&gt;osx/TreeSheetsBeta&lt;/code&gt; to distribute. Note to use the &#34;Archive&#34; operation to create a release executable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing:&lt;/h2&gt; &#xA;&lt;p&gt;I welcome contributions, especially in the form of neatly prepared pull requests. The main thing to keep in mind when contributing is to keep as close as you can to both the format and the spirit of the existing code, even if it goes against the grain of how you program normally. That means not only using the same formatting and naming conventions (which should be easy), but the same non-redundant style of code (no under-engineering, e.g. copy pasting, and no over engineering, e.g. needless abstractions).&lt;/p&gt; &#xA;&lt;p&gt;Also be economic in terms of features: treesheets tries to accomplish a lot with few features, additional user interface elements (even menu items) have a cost, and features that are only useful for very few people should probably not be in the master branch. Needless to say, performance is important too. When in doubt, ask me :)&lt;/p&gt; &#xA;&lt;p&gt;Try to keep your pull requests small (don&#39;t bundle unrelated changes) and make sure you&#39;ve done extensive testing before you submit, preferrably on multiple platforms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/DirectX-Graphics-Samples</title>
    <updated>2022-09-11T01:32:51Z</updated>
    <id>tag:github.com,2022-09-11:/microsoft/DirectX-Graphics-Samples</id>
    <link href="https://github.com/microsoft/DirectX-Graphics-Samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo contains the DirectX Graphics samples that demonstrate how to build graphics intensive applications on Windows.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DirectX-Graphics-Samples&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains the DirectX 12 Graphics samples that demonstrate how to build graphics intensive applications for Windows 10.&lt;/p&gt; &#xA;&lt;p&gt;We invite you to join us at our &lt;a href=&#34;http://discord.gg/directx&#34;&gt;discord server&lt;/a&gt;. See our &lt;a href=&#34;https://www.youtube.com/MicrosoftDirectX12andGraphicsEducation&#34;&gt;YouTube channel&lt;/a&gt; for tutorials, our &lt;a href=&#34;https://microsoft.github.io/DirectX-Specs/&#34;&gt;spec repo&lt;/a&gt; for engineering specs of our features and &lt;a href=&#34;https://devblogs.microsoft.com/directx/&#34;&gt;devblogs&lt;/a&gt; for blog posts. Follow us on Twitter &lt;a href=&#34;https://twitter.com/directx12&#34;&gt;@DirectX12&lt;/a&gt; for the latest! See the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/DirectX-Graphics-Samples/master/#related-links&#34;&gt;related links&lt;/a&gt; section for our full list of DX12-related links.&lt;/p&gt; &#xA;&lt;p&gt;Finally, make sure that you visit the &lt;a href=&#34;https://devblogs.microsoft.com/directx/landing-page/&#34;&gt;DirectX Landing Page&lt;/a&gt; for more resources for DirectX developers.&lt;/p&gt; &#xA;&lt;h2&gt;API Samples&lt;/h2&gt; &#xA;&lt;p&gt;In the Samples directory, you will find samples that attempt to break off specific features and specific usage scenarios into bite-sized chunks. For example, the ExecuteIndirect sample will show you just enough about execute indirect to get started with that feature without diving too deep into multiengine whereas the nBodyGravity sample will delve into multiengine without touching on the execute indirect feature etc. By doing this, we hope to make it easier to get started with DirectX 12.&lt;/p&gt; &#xA;&lt;h3&gt;DirectX 12 Ultimate samples&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/DirectX-Graphics-Samples/master/Samples/Desktop/D3D12MeshShaders/readme.md&#34;&gt;D3D12 Mesh Shaders&lt;/a&gt;: This sample demonstrates how Mesh shaders can be used to increase the flexibility and performance of the geometry pipeline.&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/microsoft/DirectX-Graphics-Samples/master/Samples/Desktop/D3D12MeshShaders/src/MeshletRender/Screenshot_DX12U.png&#34; alt=&#34;D3D12 Meshlet Render preview&#34; height=&#34;200&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/DirectX-Graphics-Samples/master/Samples/Desktop/D3D12VariableRateShading/readme.md&#34;&gt;D3D12 Variable Rate Shading&lt;/a&gt;: This sample demonstrates how shading rate can be reduced with little or no reduction in visual quality, leading to “free” performance.&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/microsoft/DirectX-Graphics-Samples/master/Samples/Desktop/D3D12VariableRateShading/src/Screenshot_DX12U.png&#34; alt=&#34;D3D12 Variable Rate Shading GUI&#34; height=&#34;200&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/DirectX-Graphics-Samples/master/Samples/Desktop/D3D12Raytracing/readme.md&#34;&gt;D3D12 Raytracing&lt;/a&gt;: This sample demonstrates how DirectX Raytracing (DXR) brings a new level of graphics realism to video games, previously only achievable in the movie industry.&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/microsoft/DirectX-Graphics-Samples/master/Samples/Desktop/D3D12Raytracing/src/D3D12RaytracingRealTimeDenoisedAmbientOcclusion/Screenshot_DX12U.png&#34; alt=&#34;D3D12 Raytracing Real-Time Denoised Ambient Occlusion preview&#34; height=&#34;200&#34;&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;MiniEngine: A DirectX 12 Engine Starter Kit&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the samples, we are announcing the first DirectX 12 preview release of the MiniEngine.&lt;/p&gt; &#xA;&lt;p&gt;It came from a desire to quickly dive into graphics and performance experiments. We knew we would need some basic building blocks whenever starting a new 3D app, and we had already written these things at countless previous gigs. We got tired of reinventing the wheel, so we established our own core library of helper classes and platform abstractions. We wanted to be able to create a new app by writing just the Init(), Update(), and Render() functions and leveraging as much reusable code as possible. Today our core library has been redesigned for DirectX 12 and aims to serve as an example of efficient API usage. It is obviously not exhaustive of what a game engine needs, but it can serve as the cornerstone of something new. You can also borrow whatever useful code you find.&lt;/p&gt; &#xA;&lt;h3&gt;Some features of MiniEngine&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;High-quality anti-aliased text rendering&lt;/li&gt; &#xA; &lt;li&gt;Real-time CPU and GPU profiling&lt;/li&gt; &#xA; &lt;li&gt;User-controlled variables&lt;/li&gt; &#xA; &lt;li&gt;Game controller, mouse, and keyboard input&lt;/li&gt; &#xA; &lt;li&gt;A friendly DirectXMath wrapper&lt;/li&gt; &#xA; &lt;li&gt;Perspective camera supporting traditional and reversed Z matrices&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous DDS texture loading and ZLib decompression&lt;/li&gt; &#xA; &lt;li&gt;Large library of shaders&lt;/li&gt; &#xA; &lt;li&gt;Easy shader embedding via a compile-to-header system&lt;/li&gt; &#xA; &lt;li&gt;Easy render target, depth target, and unordered access view creation&lt;/li&gt; &#xA; &lt;li&gt;A thread-safe GPU command context system (WIP)&lt;/li&gt; &#xA; &lt;li&gt;Easy-to-use dynamic constant buffers and descriptor tables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Some samples require support for DirectX 12 Ultimate, see &lt;a href=&#34;http://aka.ms/DirectX12UltimateDev&#34;&gt;this&lt;/a&gt; post for details.&lt;/p&gt; &#xA;&lt;h3&gt;Master branch&lt;/h3&gt; &#xA;&lt;p&gt;This branch is intended for the latest &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/release-information/&#34;&gt;released&lt;/a&gt; Windows 10 version.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 10 version 2004 (no new features were added in version 20H2)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/&#34;&gt;Visual Studio 2019&lt;/a&gt; with the &lt;a href=&#34;https://developer.microsoft.com/en-US/windows/downloads/windows-10-sdk&#34;&gt;Windows 10 SDK version 2004(19041)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Develop branch&lt;/h3&gt; &#xA;&lt;p&gt;This branch is intended for features available in the latest Windows Insider Preview&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows-insider/developers/get-started&#34;&gt;Windows 10 Insider Preview builds&lt;/a&gt; (&lt;a href=&#34;https://docs.microsoft.com/en-us/windows-insider/flighting&#34;&gt;Dev Channel&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/&#34;&gt;Visual Studio 2019&lt;/a&gt; with the &lt;a href=&#34;https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewSDK&#34;&gt;Windows 10 Insider Preview SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re always looking for your help to fix bugs and improve the samples. File those pull requests and we&#39;ll be happy to take a look.&lt;/p&gt; &#xA;&lt;p&gt;Troubleshooting information for this repository can be found in the site &lt;a href=&#34;https://github.com/Microsoft/DirectX-Graphics-Samples/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Related links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/directx&#34;&gt;DirectX Developer Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/directx&#34;&gt;DirectX API documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/pix/documentation/&#34;&gt;PIX on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/DirectX-Graphics-Samples/tree/master/Libraries/D3DX12&#34;&gt;D3DX12 (the D3D12 Helper Library)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/DirectX-Graphics-Samples/tree/master/Libraries/D3D12RaytracingFallback&#34;&gt;D3D12 Raytracing Fallback Layer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/DirectX-Graphics-Samples/tree/master/Libraries/D3DX12Residency&#34;&gt;D3D12 Residency Starter Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/DirectX-Graphics-Samples/tree/master/Libraries/D3DX12AffinityLayer&#34;&gt;D3D12 MultiGPU Starter Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/DirectXTK12&#34;&gt;DirectX Tool Kit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/DirectX-Debugging-Tools&#34;&gt;D3DDred debugger extension&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>