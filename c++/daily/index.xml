<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-26T01:22:50Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Wh04m1001/CVE-2023-36874</title>
    <updated>2023-08-26T01:22:50Z</updated>
    <id>tag:github.com,2023-08-26:/Wh04m1001/CVE-2023-36874</id>
    <link href="https://github.com/Wh04m1001/CVE-2023-36874" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2023-36874&lt;/h1&gt; &#xA;&lt;p&gt;For demonstration purposes only. Exploit works on vulnerable Windows clients/servers.&lt;/p&gt; &#xA;&lt;p&gt;Compile code and create c:\test\system32 directories. Place your wermgr.exe in that directory and run compiled PoC.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Wh04m1001/CVE-2023-36874/assets/44291883/417d1384-4f3f-42c0-9e07-80d4347ed9c7&#34;&gt;https://github.com/Wh04m1001/CVE-2023-36874/assets/44291883/417d1384-4f3f-42c0-9e07-80d4347ed9c7&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Testing on windows 10 19045.2006&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Wh04m1001/CVE-2023-36874/assets/44291883/483c37bc-874f-4a5c-80fd-b962057d7215&#34;&gt;https://github.com/Wh04m1001/CVE-2023-36874/assets/44291883/483c37bc-874f-4a5c-80fd-b962057d7215&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Resources:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.crowdstrike.com/blog/falcon-complete-zero-day-exploit-cve-2023-36874/&#34;&gt;https://www.crowdstrike.com/blog/falcon-complete-zero-day-exploit-cve-2023-36874/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36874&#34;&gt;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36874&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/fuzzing</title>
    <updated>2023-08-26T01:22:50Z</updated>
    <id>tag:github.com,2023-08-26:/google/fuzzing</id>
    <link href="https://github.com/google/fuzzing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tutorials, examples, discussions, research proposals, and other resources related to fuzzing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fuzzing Forum&lt;/h1&gt; &#xA;&lt;p&gt;This project aims at hosting tutorials, examples, discussions, research proposals, and other resources related to &lt;a href=&#34;https://en.wikipedia.org/wiki/Fuzzing&#34;&gt;fuzzing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;External contributions are welcome, please see &lt;a href=&#34;https://raw.githubusercontent.com/google/fuzzing/master/CONTRIBUTING&#34;&gt;CONTRIBUTING&lt;/a&gt; file for more info.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/fuzzing/raw/master/docs/why-fuzz.md&#34;&gt;Why fuzz?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/fuzzing/raw/master/docs/intro-to-fuzzing.md&#34;&gt;Introduction to fuzzing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/fuzzing/raw/master/docs/good-fuzz-target.md&#34;&gt;What makes a good fuzz target&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/fuzzing/raw/master/docs/split-inputs.md&#34;&gt;How to split a fuzzer-generated input into parts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/fuzzing/raw/master/docs/structure-aware-fuzzing.md&#34;&gt;How to write structure-aware fuzzers with libFuzzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/fuzzing/raw/master/docs/building-fuzz-targets.md&#34;&gt;How to build fuzz targets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/fuzzing/raw/master/docs/afl-based-fuzzers-overview.md&#34;&gt;Overview of AFL based fuzzers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/fuzzing/raw/master/docs/glossary.md&#34;&gt;Fuzzing glossary&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Related projects&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/oss-fuzz&#34;&gt;OSS-Fuzz&lt;/a&gt; - Continuous Fuzzing Service for Open Source Software&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/clusterfuzz&#34;&gt;ClusterFuzz&lt;/a&gt; - Scalable Fuzzing Infrastructure&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/fuzzbench&#34;&gt;FuzzBench&lt;/a&gt; - Fuzzer benchmarking as a service&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;This is not an official Google product.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BabitMF/bmf</title>
    <updated>2023-08-26T01:22:50Z</updated>
    <id>tag:github.com,2023-08-26:/BabitMF/bmf</id>
    <link href="https://github.com/BabitMF/bmf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform, customizable multimedia/video processing framework. With strong GPU acceleration, heterogeneous design, multi-language support, easy to use, multi-framework compatible and high performance, the framework is ideal for transcoding, AI inference, algorithm integration, live video streaming, and more.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BMF - Cross-platform, customizable video processing framework with strong GPU acceleration&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;BMF (Babit Multimedia Framework)&lt;/strong&gt; is a cross-platform, customizable multimedia processing framework developed by &lt;a href=&#34;https://www.bytedance.com/en&#34;&gt;&lt;strong&gt;ByteDance&lt;/strong&gt;&lt;/a&gt;. With over 4 years of testing and improvements, BMF has been tailored to adeptly tackle challenges in our real-world production environments. Now it&#39;s widely used in ByteDance&#39;s video streaming, live transcoding, cloud editing and mobile pre/post processing scenarios. More than 2 billion videos are processed by the framework everyday.&lt;/p&gt; &#xA;&lt;p&gt;Here are some key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Cross-Platform Support: Native compatibility with Linux, Windows, and Mac OS, as well as optimization for both x86 and ARM CPUs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easy to use: BMF provides Python, Go, and C++ APIs, allowing developers the flexibility to code in their favourite languages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Customizability: Developers can enhance the framework&#39;s features by adding their own modules, thanks to its decoupled architecture.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;High performance: BMF has a powerful scheduler and strong support for heterogeneous acceleration hardware. Moreover, &lt;a href=&#34;https://www.nvidia.com/&#34;&gt;&lt;strong&gt;NVIDIA&lt;/strong&gt;&lt;/a&gt; has been cooperating with us to develop a highly optimized GPU pipeline for video transcoding and AI inference.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Efficient data conversion: BMF offers seamless data format conversions across popular frameworks (FFmpeg/Numpy/PyTorch/OpenCV/TensorRT), conversion between hardware devices (CPU/GPU), and color space and pixel format conversion.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Dive deeper into BMF&#39;s capabilities on &lt;a href=&#34;https://babitmf.github.io/&#34;&gt;our website&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Experience&lt;/h2&gt; &#xA;&lt;p&gt;In this section, we will directly showcase the capabilities of the BMF framework around five dimensions: &lt;strong&gt;Transcode&lt;/strong&gt;, &lt;strong&gt;Edit&lt;/strong&gt;, &lt;strong&gt;Meeting/Broadcaster&lt;/strong&gt;, &lt;strong&gt;GPU acceleration&lt;/strong&gt;, and &lt;strong&gt;AI Inference&lt;/strong&gt;. For all the demos provided below, corresponding implementations and documentation are available on Google Colab, allowing you to experience them intuitively.&lt;/p&gt; &#xA;&lt;h3&gt;Transcode&lt;/h3&gt; &#xA;&lt;p&gt;This demo describes step-by-step how to use BMF to develop a transcoding program, including video transcoding, audio transcoding, and image transcoding. In it, you can familiarize yourself with how to use BMF and how to use FFmpeg-compatible options to achieve the capabilities you need.&lt;/p&gt; &#xA;&lt;p&gt;If you want to have a quick experiment, you can try it on &lt;a href=&#34;https://colab.research.google.com/github/BabitMF/bmf/blob/master/bmf/demo/transcode/bmf_transcode_demo.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Edit&lt;/h3&gt; &#xA;&lt;p&gt;The Edit Demo will show you how to implement a high-complexity audio and video editing pipeline through the BMF framework. We have implemented two Python modules, video_concat and video_overlay, and combined various atomic capabilities to construct a complex BMF Graph.&lt;/p&gt; &#xA;&lt;p&gt;If you want to have a quick experiment, you can try it on &lt;a href=&#34;https://colab.research.google.com/github/BabitMF/bmf/blob/master/bmf/demo/edit/bmf_edit_python.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Meeting/Broadcaster&lt;/h3&gt; &#xA;&lt;p&gt;This demo uses BMF framework to construct a simple broadcast service. The service provides an API that enables dynamic video source pulling, video layout control, audio mixing, and ultimately streaming the output to an RTMP server. This demo showcases the modularity of BMF, multi-language development, and the ability of dynamically adjusting the pipeline.&lt;/p&gt; &#xA;&lt;p&gt;Below is a screen recording demonstrating the operation of broadcaster:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/bmf/demo/broadcaster/broadcaster.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;GPU acceleration&lt;/h3&gt; &#xA;&lt;h4&gt;GPU Video Frame Extraction&lt;/h4&gt; &#xA;&lt;p&gt;The video frame extraction acceleration demo shows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;BMF flexible capability of:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Multi-language programming，we can see multi-language module work together in the demo&lt;/li&gt; &#xA;   &lt;li&gt;Ability extend easily, there are new C++, Python modules added simply&lt;/li&gt; &#xA;   &lt;li&gt;FFmpeg ability fully compatible&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hardware acceleration quickly enablement and CPU/GPU pipeline support&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Heterogeneous pipeline is supported in BMF, such as process between CPU and GPU&lt;/li&gt; &#xA;   &lt;li&gt;Usefull hardware color space convertion in BMF&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you want to have a quick experiment, you can try it on &lt;a href=&#34;https://colab.research.google.com/github/BabitMF/bmf/blob/master/bmf/demo/video_frame_extraction/video_frame_extraction_acceleration.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;GPU Video Transcoding and Filtering&lt;/h4&gt; &#xA;&lt;p&gt;The GPU transcoding and filter module demo shows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Common video/image filters in BMF accelerated by GPU&lt;/li&gt; &#xA; &lt;li&gt;How to write GPU modules in BMF&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The demo builds a transcoding pipeline which fully runs on GPU:&lt;/p&gt; &#xA;&lt;p&gt;decode-&amp;gt;scale-&amp;gt;flip-&amp;gt;rotate-&amp;gt;crop-&amp;gt;blur-&amp;gt;encode&lt;/p&gt; &#xA;&lt;p&gt;If you want to have a quick experiment, you can try it on &lt;a href=&#34;https://colab.research.google.com/github/BabitMF/bmf/blob/master/bmf/demo/gpu_module/gpu_module_demo_colab.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;AI inference&lt;/h3&gt; &#xA;&lt;h4&gt;Deoldify&lt;/h4&gt; &#xA;&lt;p&gt;This demo shows the how to integrate the state of art AI algorithms into the BMF video processing pipeline. The famous open source colorization algorithm &lt;a href=&#34;https://github.com/jantic/DeOldify&#34;&gt;DeOldify&lt;/a&gt; is wrapped as an BMF pyhton module in less than 100 lines of codes. The final effect is illustrated below, with the original video on the left side and the colored video on the right.&lt;/p&gt; &#xA;&lt;p&gt;If you want to have a quick experiment, you can try it on &lt;a href=&#34;https://colab.research.google.com/github/BabitMF/bmf/blob/master/bmf/demo/colorization_python/deoldify_demo_colab.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/bmf/demo/colorization_python/deoldify.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Super Resolution&lt;/h4&gt; &#xA;&lt;p&gt;This demo implements the super-resolution inference process of &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN&#34;&gt;Real-ESRGAN&lt;/a&gt; as a BMF module, showcasing a BMF pipeline that combines decoding, super-resolution inference and encoding.&lt;/p&gt; &#xA;&lt;p&gt;If you want to have a quick experiment, you can try it on &lt;a href=&#34;https://colab.research.google.com/github/BabitMF/bmf/blob/master/bmf/demo/video_enhance/bmf-enhance-demo.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Video Quality Score&lt;/h4&gt; &#xA;&lt;p&gt;This demo shows how to invoke our aesthetic assessment model using bmf. Our deep learning model Aesmode has achieved a binary classification accuracy of 83.8% on AVA dataset, reaching the level of academic SOTA, and can be directly used to evaluate the aesthetic degree of videos by means of frame extraction processing.&lt;/p&gt; &#xA;&lt;p&gt;If you want to have a quick experiment, you can try it on &lt;a href=&#34;https://colab.research.google.com/github/BabitMF/bmf/blob/master/bmf/demo/aesthetic_assessment/aesmod_bmfv3_fin.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Face Detect With TensorRT&lt;/h4&gt; &#xA;&lt;p&gt;This Demo shows a full-link face detect pipeline based on TensorRT acceleration, which internally uses the TensorRT-accelerated Onnx model to process the input video, and uses the NMS algorithm to filter repeated candidate boxes to form an output, which can be used to efficiently process a Face Detection Task.&lt;/p&gt; &#xA;&lt;p&gt;If you want to have a quick experiment, you can try it on &lt;a href=&#34;https://colab.research.google.com/github/BabitMF/bmf/blob/master/bmf/demo/face_detect/facedetect_demo_colab.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://babitmf.github.io/about/&#34;&gt;About BMF&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/#quick-experience&#34;&gt;Quick Experience&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/#transcode&#34;&gt;Transcode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/#edit&#34;&gt;Edit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/#meetingbroadcaster&#34;&gt;Meeting/Broadcaster&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/#gpu-acceleration&#34;&gt;GPU acceleration&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/#gpu-video-frame-extraction&#34;&gt;GPU Video Frame Extraction&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/#gpu-video-transcoding-and-filtering&#34;&gt;GPU Video Transcoding and Filtering&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/#ai-inference&#34;&gt;AI Inference&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/#deoldify&#34;&gt;Deoldify&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/#super-resolution&#34;&gt;Super Resolution&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/#video-quality-score&#34;&gt;Video Quality Score&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/#face-detect-with-tensorrt&#34;&gt;Face Detect With TensorRT&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/getting_started_yourself/&#34;&gt;Getting Started&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/getting_started_yourself/install/&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/getting_started_yourself/create_a_graph/&#34;&gt;Create a Graph&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;one of transcode example with 3 languages&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/getting_started_yourself/use_module_directly/&#34;&gt;Use Module Directly&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;sync mode with 3 languages. You can try it on:&lt;/p&gt; &lt;p&gt;Python:&lt;a href=&#34;https://colab.research.google.com/github/BabitMF/bmf/blob/master/bmf/test/sync_mode/bmf_syncmode_python.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; C++:&lt;a href=&#34;https://colab.research.google.com/github/BabitMF/bmf/blob/master/bmf/test/sync_mode/bmf_syncmode_cpp.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; Go:&lt;a href=&#34;https://colab.research.google.com/github/BabitMF/bmf/blob/master/bmf/test/sync_mode/bmf_syncmode_go.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/getting_started_yourself/create_a_module/&#34;&gt;Create a Module&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;customize module with python, C++ and Go. You can try it on &lt;a href=&#34;https://colab.research.google.com/github/BabitMF/bmf/blob/master/bmf/test/customize_module/bmf_customize_demo_latest.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/multiple_features/&#34;&gt;Multiple Features (with examples)&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/multiple_features/graph_mode/&#34;&gt;Graph Mode&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/multiple_features/graph_mode/generatemode/&#34;&gt;Generator Mode&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/multiple_features/graph_mode/syncmode/&#34;&gt;Sync Mode&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/multiple_features/graph_mode/servermode/&#34;&gt;Server Mode&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/multiple_features/graph_mode/preloadmode/&#34;&gt;Preload Mode&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/multiple_features/graph_mode/subgraphmode/&#34;&gt;Subgraph&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/multiple_features/graph_mode/pushdatamode/&#34;&gt;PushData Mode&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/multiple_features/ffmpeg_fully_compatible/&#34;&gt;FFmpeg Fully Compatible&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/multiple_features/data_backend/&#34;&gt;Data Convert Backend&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/multiple_features/dynamic_graph/&#34;&gt;Dynamic Graph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/multiple_features/gpu_hardware_acc/&#34;&gt;GPU Hardware Acceleration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/multiple_features/tools/&#34;&gt;BMF Tools&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;APIs&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/api/api_in_python/&#34;&gt;API in Python&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/api/api_in_cpp/&#34;&gt;API in Cpp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://babitmf.github.io/docs/bmf/api/api_in_go/&#34;&gt;API in Go&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/#license&#34;&gt;License&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BabitMF/bmf/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project has an &lt;a href=&#34;https://github.com/BabitMF/bmf/raw/master/LICENSE&#34;&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcomed. Please follow the &lt;a href=&#34;https://github.com/BabitMF/bmf/raw/master/CONTRIBUTING.md&#34;&gt;guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We use GitHub issues to track and resolve problems. If you have any questions, please feel free to join the discussion and work with us to find a solution.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgment&lt;/h2&gt; &#xA;&lt;p&gt;The decoder, encoder and filter reference &lt;a href=&#34;http://ffmpeg.org/&#34;&gt;ffmpeg cmdline tool&lt;/a&gt;, and are wrapped as BMF&#39;s built-in modules under a LGPL license.&lt;/p&gt; &#xA;&lt;p&gt;The project also draws inspiration from other popular frameworks, such as &lt;a href=&#34;https://github.com/kkroening/ffmpeg-python&#34;&gt;ffmpeg-python&lt;/a&gt; and &lt;a href=&#34;https://github.com/google/mediapipe&#34;&gt;mediapipe&lt;/a&gt;. Our &lt;a href=&#34;https://babitmf.github.io/&#34;&gt;website&lt;/a&gt; is using the project from &lt;a href=&#34;https://github.com/google/docsy&#34;&gt;docsy&lt;/a&gt; based on &lt;a href=&#34;https://github.com/gohugoio/hugo&#34;&gt;hugo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here, we&#39;d like to express our sincerest thanks to the developers of the above projects!&lt;/p&gt;</summary>
  </entry>
</feed>