<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-28T01:29:57Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PerformanC/ReZygisk</title>
    <updated>2024-11-28T01:29:57Z</updated>
    <id>tag:github.com,2024-11-28:/PerformanC/ReZygisk</id>
    <link href="https://github.com/PerformanC/ReZygisk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Transparent implementation of Zygisk.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ReZygisk&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PerformanC/ReZygisk/main/READMEs/README_zh-CN.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;|&lt;a href=&#34;https://raw.githubusercontent.com/PerformanC/ReZygisk/main/READMEs/README_zh-TW.md&#34;&gt;ÁπÅÈ´î‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ReZygisk is a fork of Zygisk Next, a standalone implementation of Zygisk, providing Zygisk API support for KernelSU, Magisk (besides built-in), and APatch (Work In Progress).&lt;/p&gt; &#xA;&lt;p&gt;It aims to modernize and re-write the codebase to C (from C++ and Rust), allowing a more efficient and faster implementation of the Zygisk API with a more permissive license.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] This module/fork is WIP (Work In Progress); only use .zip from the Releases.&lt;/p&gt; &#xA; &lt;p&gt;Although you may install the .zip from the &lt;a href=&#34;https://github.com/PerformanC/ReZygisk/actions&#34;&gt;Actions&lt;/a&gt; page, it is only at your discretion to install it since your device might enter bootloop.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;The latest releases of Zygisk Next are not open-source, reserving entirely the code for its developers. Not only does that limit our ability to contribute to the project, but also impossibilities the audit of the code, which is a major security concern, as Zygisk Next is a module that runs with superuser (root) privileges, having access to the entire system.&lt;/p&gt; &#xA;&lt;p&gt;The Zygisk Next developers are famous and trusted in the Android community, however, this doesn&#39;t mean that the code is not malicious or vulnerable. We (PerformanC) understand they have their reasons to keep the code closed-source, but we believe the contrary.&lt;/p&gt; &#xA;&lt;h2&gt;Advantages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FOSS (Forever)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Android NDK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native Development Kit for Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;C++ Dependencies&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dependency&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsplt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simple PLT Hook for Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re currently in the process of cooking. (Coming Soon)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are currently no available stable releases. (Coming Soon)&lt;/p&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;As of now, we don&#39;t have integration with another platform for translations but you may contribute to the &lt;a href=&#34;https://github.com/PerformanC/ReZygisk/tree/add/new-webui&#34;&gt;add/new-webui&lt;/a&gt; branch. Please don&#39;t forget to include your GitHub profile in &lt;a href=&#34;https://github.com/PerformanC/ReZygisk/raw/add/new-webui/TRANSLATOR.md&#34;&gt;TRANSLATOR.md&lt;/a&gt; so that people can see your contribution.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;For any question related to ReZygisk or other PerformanC projects, feel free to join any of the following channels below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord Channel: &lt;a href=&#34;https://discord.gg/uPveNfTuCJ&#34;&gt;PerformanC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ReZygisk Telegram Channel: &lt;a href=&#34;https://t.me/rezygiskchat&#34;&gt;@rezygiskchat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PerformanC Telegram Channel: &lt;a href=&#34;https://t.me/performancorg&#34;&gt;@performancorg&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;It is mandatory to follow PerformanC&#39;s &lt;a href=&#34;https://github.com/PerformanC/contributing&#34;&gt;Contribution Guidelines&lt;/a&gt; to contribute to ReZygisk. Following its Security Policy, Code of Conduct, and syntax standard.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ReZygisk is licensed majoritaly under GPL, by Dr-TSNG, but also AGPL 3.0, by The PerformanC Organization, for re-written code. You can read more about it on &lt;a href=&#34;https://opensource.org/licenses/AGPL-3.0&#34;&gt;Open Source Initiative&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>WiseLibs/better-sqlite3</title>
    <updated>2024-11-28T01:29:57Z</updated>
    <id>tag:github.com,2024-11-28:/WiseLibs/better-sqlite3</id>
    <link href="https://github.com/WiseLibs/better-sqlite3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The fastest and simplest library for SQLite3 in Node.js.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;better-sqlite3 &lt;a href=&#34;https://github.com/JoshuaWise/better-sqlite3/actions/workflows/build.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/JoshuaWise/better-sqlite3/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The fastest and simplest library for SQLite3 in Node.js.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full transaction support&lt;/li&gt; &#xA; &lt;li&gt;High performance, efficiency, and safety&lt;/li&gt; &#xA; &lt;li&gt;Easy-to-use synchronous API &lt;em&gt;(better concurrency than an asynchronous API... yes, you read that correctly)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for user-defined functions, aggregates, virtual tables, and extensions&lt;/li&gt; &#xA; &lt;li&gt;64-bit integers &lt;em&gt;(invisible until you need them)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Worker thread support &lt;em&gt;(for large/slow queries)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help this project stay strong! üí™&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;better-sqlite3&lt;/code&gt; is used by thousands of developers and engineers on a daily basis. Long nights and weekends were spent keeping this project strong and dependable, with no ask for compensation or funding, until now. If your company uses &lt;code&gt;better-sqlite3&lt;/code&gt;, ask your manager to consider supporting the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/JoshuaWise&#34;&gt;Become a GitHub sponsor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.patreon.com/joshuawise&#34;&gt;Become a backer on Patreon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.paypal.me/joshuathomaswise&#34;&gt;Make a one-time donation on PayPal&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How other libraries compare&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;select 1 row &amp;nbsp;&lt;code&gt;get()&lt;/code&gt;&amp;nbsp;&lt;/th&gt; &#xA;   &lt;th&gt;select 100 rows &amp;nbsp;&amp;nbsp;&lt;code&gt;all()&lt;/code&gt;&amp;nbsp;&amp;nbsp;&lt;/th&gt; &#xA;   &lt;th&gt;select 100 rows &lt;code&gt;iterate()&lt;/code&gt; 1-by-1&lt;/th&gt; &#xA;   &lt;th&gt;insert 1 row &lt;code&gt;run()&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;insert 100 rows in a transaction&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;better-sqlite3&lt;/td&gt; &#xA;   &lt;td&gt;1x&lt;/td&gt; &#xA;   &lt;td&gt;1x&lt;/td&gt; &#xA;   &lt;td&gt;1x&lt;/td&gt; &#xA;   &lt;td&gt;1x&lt;/td&gt; &#xA;   &lt;td&gt;1x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/sqlite&#34;&gt;sqlite&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com/package/sqlite3&#34;&gt;sqlite3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;11.7x slower&lt;/td&gt; &#xA;   &lt;td&gt;2.9x slower&lt;/td&gt; &#xA;   &lt;td&gt;24.4x slower&lt;/td&gt; &#xA;   &lt;td&gt;2.8x slower&lt;/td&gt; &#xA;   &lt;td&gt;15.6x slower&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can verify these results by &lt;a href=&#34;https://raw.githubusercontent.com/WiseLibs/better-sqlite3/master/docs/benchmark.md&#34;&gt;running the benchmark yourself&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install better-sqlite3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You must be using Node.js v14.21.1 or above. Prebuilt binaries are available for &lt;a href=&#34;https://nodejs.org/en/about/releases/&#34;&gt;LTS versions&lt;/a&gt;. If you have trouble installing, check the &lt;a href=&#34;https://raw.githubusercontent.com/WiseLibs/better-sqlite3/master/docs/troubleshooting.md&#34;&gt;troubleshooting guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const db = require(&#39;better-sqlite3&#39;)(&#39;foobar.db&#39;, options);&#xA;&#xA;const row = db.prepare(&#39;SELECT * FROM users WHERE id = ?&#39;).get(userId);&#xA;console.log(row.firstName, row.lastName, row.email);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Though not required, &lt;a href=&#34;https://github.com/WiseLibs/better-sqlite3/raw/master/docs/performance.md&#34;&gt;it is generally important to set the WAL pragma for performance reasons&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;db.pragma(&#39;journal_mode = WAL&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;In ES6 module notation:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Database from &#39;better-sqlite3&#39;;&#xA;const db = new Database(&#39;foobar.db&#39;, options);&#xA;db.pragma(&#39;journal_mode = WAL&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why should I use this instead of &lt;a href=&#34;https://github.com/mapbox/node-sqlite3&#34;&gt;node-sqlite3&lt;/a&gt;?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;node-sqlite3&lt;/code&gt; uses asynchronous APIs for tasks that are either CPU-bound or serialized. That&#39;s not only bad design, but it wastes tons of resources. It also causes &lt;a href=&#34;https://en.wikipedia.org/wiki/Resource_contention&#34;&gt;mutex thrashing&lt;/a&gt; which has devastating effects on performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;node-sqlite3&lt;/code&gt; exposes low-level (C language) memory management functions. &lt;code&gt;better-sqlite3&lt;/code&gt; does it the JavaScript way, allowing the garbage collector to worry about memory management.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;better-sqlite3&lt;/code&gt; is simpler to use, and it provides nice utilities for some operations that are very difficult or impossible in &lt;code&gt;node-sqlite3&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;better-sqlite3&lt;/code&gt; is much faster than &lt;code&gt;node-sqlite3&lt;/code&gt; in most cases, and just as fast in all other cases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;When is this library not appropriate?&lt;/h4&gt; &#xA;&lt;p&gt;In most cases, if you&#39;re attempting something that cannot be reasonably accomplished with &lt;code&gt;better-sqlite3&lt;/code&gt;, it probably cannot be reasonably accomplished with SQLite3 in general. For example, if you&#39;re executing queries that take one second to complete, and you expect to have many concurrent users executing those queries, no amount of asynchronicity will save you from SQLite3&#39;s serialized nature. Fortunately, SQLite3 is very &lt;em&gt;very&lt;/em&gt; fast. With proper indexing, we&#39;ve been able to achieve upward of 2000 queries per second with 5-way-joins in a 60 GB database, where each query was handling 5‚Äì50 kilobytes of real data.&lt;/p&gt; &#xA;&lt;p&gt;If you have a performance problem, the most likely causes are inefficient queries, improper indexing, or a lack of &lt;a href=&#34;https://raw.githubusercontent.com/WiseLibs/better-sqlite3/master/docs/performance.md&#34;&gt;WAL mode&lt;/a&gt;‚Äînot &lt;code&gt;better-sqlite3&lt;/code&gt; itself. However, there are some cases where &lt;code&gt;better-sqlite3&lt;/code&gt; could be inappropriate:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you expect a high volume of concurrent reads each returning many megabytes of data (i.e., videos)&lt;/li&gt; &#xA; &lt;li&gt;If you expect a high volume of concurrent writes (i.e., a social media site)&lt;/li&gt; &#xA; &lt;li&gt;If your database&#39;s size is near the terabyte range&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For these situations, you should probably use a full-fledged RDBMS such as &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WiseLibs/better-sqlite3/master/docs/api.md&#34;&gt;API documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WiseLibs/better-sqlite3/master/docs/performance.md&#34;&gt;Performance&lt;/a&gt; (also see &lt;a href=&#34;https://raw.githubusercontent.com/WiseLibs/better-sqlite3/master/docs/benchmark.md&#34;&gt;benchmark results&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WiseLibs/better-sqlite3/master/docs/integer.md&#34;&gt;64-bit integer support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WiseLibs/better-sqlite3/master/docs/threads.md&#34;&gt;Worker thread support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WiseLibs/better-sqlite3/master/docs/unsafe.md&#34;&gt;Unsafe mode (advanced)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WiseLibs/better-sqlite3/master/docs/compilation.md&#34;&gt;SQLite3 compilation (advanced)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WiseLibs/better-sqlite3/master/docs/contribution.md&#34;&gt;Contribution rules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WiseLibs/better-sqlite3/master/docs/conduct.md&#34;&gt;Code of conduct&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WiseLibs/better-sqlite3/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>