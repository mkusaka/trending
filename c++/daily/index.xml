<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-29T01:25:38Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>XRPLF/rippled</title>
    <updated>2024-01-29T01:25:38Z</updated>
    <id>tag:github.com,2024-01-29:/XRPLF/rippled</id>
    <link href="https://github.com/XRPLF/rippled" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Decentralized cryptocurrency blockchain daemon implementing the XRP Ledger protocol in C++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The XRP Ledger&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://xrpl.org/&#34;&gt;XRP Ledger&lt;/a&gt; is a decentralized cryptographic ledger powered by a network of peer-to-peer nodes. The XRP Ledger uses a novel Byzantine Fault Tolerant consensus algorithm to settle and record transactions in a secure distributed database without a central operator.&lt;/p&gt; &#xA;&lt;h2&gt;XRP&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xrpl.org/xrp.html&#34;&gt;XRP&lt;/a&gt; is a public, counterparty-free asset native to the XRP Ledger, and is designed to bridge the many different currencies in use worldwide. XRP is traded on the open-market and is available for anyone to access. The XRP Ledger was created in 2012 with a finite supply of 100 billion units of XRP.&lt;/p&gt; &#xA;&lt;h2&gt;rippled&lt;/h2&gt; &#xA;&lt;p&gt;The server software that powers the XRP Ledger is called &lt;code&gt;rippled&lt;/code&gt; and is available in this repository under the permissive &lt;a href=&#34;https://raw.githubusercontent.com/XRPLF/rippled/develop/LICENSE.md&#34;&gt;ISC open-source license&lt;/a&gt;. The &lt;code&gt;rippled&lt;/code&gt; server software is written primarily in C++ and runs on a variety of platforms. The &lt;code&gt;rippled&lt;/code&gt; server software can run in several modes depending on its &lt;a href=&#34;https://xrpl.org/rippled-server-modes.html&#34;&gt;configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in running an &lt;strong&gt;API Server&lt;/strong&gt; (including a &lt;strong&gt;Full History Server&lt;/strong&gt;) or a &lt;strong&gt;Reporting Mode&lt;/strong&gt; server, take a look at &lt;a href=&#34;https://github.com/XRPLF/clio&#34;&gt;Clio&lt;/a&gt;. rippled Reporting Mode is expected to be replaced by Clio.&lt;/p&gt; &#xA;&lt;h3&gt;Build from Source&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XRPLF/rippled/develop/BUILD.md&#34;&gt;Read the build instructions in &lt;code&gt;BUILD.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you encounter any issues, please &lt;a href=&#34;https://github.com/XRPLF/rippled/issues&#34;&gt;open an issue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Features of the XRP Ledger&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://xrpl.org/xrp-ledger-overview.html#censorship-resistant-transaction-processing&#34;&gt;Censorship-Resistant Transaction Processing&lt;/a&gt;:&lt;/strong&gt; No single party decides which transactions succeed or fail, and no one can &#34;roll back&#34; a transaction after it completes. As long as those who choose to participate in the network keep it healthy, they can settle transactions in seconds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://xrpl.org/xrp-ledger-overview.html#fast-efficient-consensus-algorithm&#34;&gt;Fast, Efficient Consensus Algorithm&lt;/a&gt;:&lt;/strong&gt; The XRP Ledger&#39;s consensus algorithm settles transactions in 4 to 5 seconds, processing at a throughput of up to 1500 transactions per second. These properties put XRP at least an order of magnitude ahead of other top digital assets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://xrpl.org/xrp-ledger-overview.html#finite-xrp-supply&#34;&gt;Finite XRP Supply&lt;/a&gt;:&lt;/strong&gt; When the XRP Ledger began, 100 billion XRP were created, and no more XRP will ever be created. The available supply of XRP decreases slowly over time as small amounts are destroyed to pay transaction costs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://xrpl.org/xrp-ledger-overview.html#responsible-software-governance&#34;&gt;Responsible Software Governance&lt;/a&gt;:&lt;/strong&gt; A team of full-time, world-class developers at Ripple maintain and continually improve the XRP Ledger&#39;s underlying software with contributions from the open-source community. Ripple acts as a steward for the technology and an advocate for its interests, and builds constructive relationships with governments and financial institutions worldwide.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://xrpl.org/xrp-ledger-overview.html#secure-adaptable-cryptography&#34;&gt;Secure, Adaptable Cryptography&lt;/a&gt;:&lt;/strong&gt; The XRP Ledger relies on industry standard digital signature systems like ECDSA (the same scheme used by Bitcoin) but also supports modern, efficient algorithms like Ed25519. The extensible nature of the XRP Ledger&#39;s software makes it possible to add and disable algorithms as the state of the art in cryptography advances.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://xrpl.org/xrp-ledger-overview.html#modern-features-for-smart-contracts&#34;&gt;Modern Features for Smart Contracts&lt;/a&gt;:&lt;/strong&gt; Features like Escrow, Checks, and Payment Channels support cutting-edge financial applications including the &lt;a href=&#34;https://interledger.org/&#34;&gt;Interledger Protocol&lt;/a&gt;. This toolbox of advanced features comes with safety features like a process for amending the network and separate checks against invariant constraints.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://xrpl.org/xrp-ledger-overview.html#on-ledger-decentralized-exchange&#34;&gt;On-Ledger Decentralized Exchange&lt;/a&gt;:&lt;/strong&gt; In addition to all the features that make XRP useful on its own, the XRP Ledger also has a fully-functional accounting system for tracking and trading obligations denominated in any way users want, and an exchange built into the protocol. The XRP Ledger can settle long, cross-currency payment paths and exchanges of multiple currencies in atomic transactions, bridging gaps of trust with XRP.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Source Code&lt;/h2&gt; &#xA;&lt;p&gt;Here are some good places to start learning the source code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the markdown files in the source tree: &lt;code&gt;src/ripple/**/*.md&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/XRPLF/rippled/develop/Builds/levelization&#34;&gt;the levelization document&lt;/a&gt; to get an idea of the internal dependency graph.&lt;/li&gt; &#xA; &lt;li&gt;In the big picture, the &lt;code&gt;main&lt;/code&gt; function constructs an &lt;code&gt;ApplicationImp&lt;/code&gt; object, which implements the &lt;code&gt;Application&lt;/code&gt; virtual interface. Almost every component in the application takes an &lt;code&gt;Application&amp;amp;&lt;/code&gt; parameter in its constructor, typically named &lt;code&gt;app&lt;/code&gt; and stored as a member variable &lt;code&gt;app_&lt;/code&gt;. This allows most components to depend on any other component.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Repository Contents&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Folder&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;./bin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Scripts and data files for Ripple integrators.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;./Builds&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Platform-specific guides for building &lt;code&gt;rippled&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;./docs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Source documentation files and doxygen config.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;./cfg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Example configuration files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;./src&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Source code.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Some of the directories under &lt;code&gt;src&lt;/code&gt; are external repositories included using git-subtree. See those directories&#39; README files for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xrpl.org/&#34;&gt;XRP Ledger Dev Portal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xrpl.org/install-rippled.html&#34;&gt;Setup and Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xrplf.github.io/rippled/&#34;&gt;Source Documentation (Doxygen)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/XRPLF/clio&#34;&gt;Clio API Server for the XRP Ledger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/g/ripple-server&#34;&gt;Mailing List for Release Announcements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLJQ55Tj1hIVZtJ_JdTvSum2qMTsedWkNi&#34;&gt;Learn more about the XRP Ledger (YouTube)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>AlexanderDzhoganov/ComfyTextures</title>
    <updated>2024-01-29T01:25:38Z</updated>
    <id>tag:github.com,2024-01-29:/AlexanderDzhoganov/ComfyTextures</id>
    <link href="https://github.com/AlexanderDzhoganov/ComfyTextures" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unreal Engine ⚔️ ComfyUI - Automatic texturing using generative diffusion models&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Comfy Textures&lt;/h1&gt; &#xA;&lt;p&gt;Comfy Textures is an Unreal Engine plugin which integrates the editor with &lt;a href=&#34;https://github.com/comfyanonymous/ComfyUI&#34;&gt;ComfyUI&lt;/a&gt;. It allows you to quickly create and refine textures for your scene using generative diffusion models.&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Single point-of-view texture projection&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Multiple point-of-view texture projection (WIP)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Perspective camera&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Orthographic camera&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Inpainting&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Image to image&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Remote ComfyUI instance support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Batch rendering (WIP)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Works out of the box with Unreal Engine 5.x. Should work with 4.x with minor code changes.&lt;/p&gt; &#xA;&lt;p&gt;Recommended at least 16GiB VRAM and 32GiB RAM for the SDXL workflows or run ComfyUI with the &lt;code&gt;--lowvram&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h2&gt;Watch the demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AlexanderDzhoganov/ComfyTextures/assets/855464/80596dea-e7d9-4fdc-b379-5f8eee11d94b&#34;&gt;https://github.com/AlexanderDzhoganov/ComfyTextures/assets/855464/80596dea-e7d9-4fdc-b379-5f8eee11d94b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AlexanderDzhoganov/ComfyTextures/assets/855464/6a674673-bbe4-42d1-a12b-f43edfc87640&#34;&gt;https://github.com/AlexanderDzhoganov/ComfyTextures/assets/855464/6a674673-bbe4-42d1-a12b-f43edfc87640&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Comfy Textures Editor Widget&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AlexanderDzhoganov/ComfyTextures/main/.ghassets/widget.png&#34; width=&#34;300&#34;&gt; &#xA;&lt;h2&gt;Support &amp;amp; Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://discord.gg/qpS7RMKGVj&#34;&gt;Discord&lt;/a&gt; for help and support.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute to the project, feel free to open a pull request or an issue.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h3&gt;Setup ComfyUI&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://github.com/comfyanonymous/ComfyUI&#34;&gt;ComfyUI&lt;/a&gt; by following the &lt;a href=&#34;https://github.com/comfyanonymous/ComfyUI?tab=readme-ov-file#installing&#34;&gt;official installation instructions&lt;/a&gt; for your OS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the necessary models and place them in the ComfyUI &lt;code&gt;models&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The models directory is relative to the ComfyUI root directory i.e. &lt;code&gt;&amp;lt;ComfyUI Root&amp;gt;/ComfyUI/models/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;models/checkpoints/sd_xl_base_1.0_0.9vae.safetensors&lt;/code&gt; - &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0/blob/main/sd_xl_base_1.0_0.9vae.safetensors&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;models/checkpoints/sd_xl_refiner_1.0_0.9vae.safetensors&lt;/code&gt; - &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-xl-refiner-1.0/blob/main/sd_xl_refiner_1.0_0.9vae.safetensors&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;models/controlnet/diffusers_xl_canny_full.safetensors&lt;/code&gt; - &lt;a href=&#34;https://huggingface.co/lllyasviel/sd_control_collection/blob/main/diffusers_xl_canny_full.safetensors&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;models/controlnet/diffusers_xl_depth_full.safetensors&lt;/code&gt; - &lt;a href=&#34;https://huggingface.co/lllyasviel/sd_control_collection/blob/main/diffusers_xl_depth_full.safetensors&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;models/loras/lcm_lora_sdxl.safetensors&lt;/code&gt; - &lt;a href=&#34;https://huggingface.co/latent-consistency/lcm-lora-sdxl/blob/main/pytorch_lora_weights.safetensors&#34;&gt;Download&lt;/a&gt; (Note: Rename the file to &lt;code&gt;lcm_lora_sdxl.safetensors&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;models/upscale_models/4x-UltraSharp.pth&lt;/code&gt; - &lt;a href=&#34;https://huggingface.co/lokCX/4x-Ultrasharp/blob/main/4x-UltraSharp.pth&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup Unreal Engine project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the Unreal project by right clicking on &lt;code&gt;MyProject.uproject&lt;/code&gt; and selecting &lt;code&gt;Generate Visual Studio project files&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This will generate a &lt;code&gt;MyProject.sln&lt;/code&gt; file in the project directory. Open the file in Visual Studio and build the project by pressing &lt;code&gt;F7&lt;/code&gt;. If you are encountering errors, make sure Visual Studio is correctly configured for Unreal Engine by following &lt;a href=&#34;https://docs.unrealengine.com/5.3/en-US/setting-up-visual-studio-development-environment-for-cplusplus-projects-in-unreal-engine/&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the project in the Unreal Engine editor.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure the plugin by going to &lt;code&gt;Project Settings -&amp;gt; Plugins -&amp;gt; Comfy Textures&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you are running ComfyUI on a remote machine, you need to set the &lt;code&gt;Comfy Url&lt;/code&gt; to the correct address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the plugin window by clicking on &lt;code&gt;Tools -&amp;gt; Editor Utility Widgets -&amp;gt; Comfy Textures Widget&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the menu item is missing you need to open the &lt;code&gt;ComfyTexturesWidget&lt;/code&gt; from the content browser in &lt;code&gt;Plugins/Comfy Textures Content/&lt;/code&gt; and click &lt;code&gt;Run Utility Widget&lt;/code&gt; in the blueprint editor.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Make sure ComfyUI is up and running before proceeding.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the actors you want to texture in the Outliner.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set your desired settings in the Comfy Textures widget.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click &lt;code&gt;Render&lt;/code&gt; to start the rendering process.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your meshes must have UVs (autogenerated UVs are fine).&lt;/li&gt; &#xA; &lt;li&gt;The plugin will automatically create a new material instance and texture for each selected actor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Modes&lt;/h2&gt; &#xA;&lt;h3&gt;Create&lt;/h3&gt; &#xA;&lt;p&gt;This mode uses a fast SDXL LCM model to create a low-resolution texture for each selected actor. Use this to quickly prototype and iterate on your scene.&lt;/p&gt; &#xA;&lt;h3&gt;Refine&lt;/h3&gt; &#xA;&lt;p&gt;This mode uses a slower SDXL workflow to refine the low-resolution textures created in the &lt;code&gt;Create&lt;/code&gt; mode. Use this to create the final high-resolution textures for your scene.&lt;/p&gt; &#xA;&lt;h3&gt;Edit&lt;/h3&gt; &#xA;&lt;p&gt;This mode allows you to edit the textures created in the &lt;code&gt;Create&lt;/code&gt; or &lt;code&gt;Refine&lt;/code&gt; mode by using an inpainting workflow. Use this mode to fix any artifacts or errors in the textures.&lt;/p&gt; &#xA;&lt;p&gt;You can select from two edit modes - &lt;code&gt;From Texture&lt;/code&gt; and &lt;code&gt;From Object&lt;/code&gt;. &lt;code&gt;From Texture&lt;/code&gt; allows you to do precise edits by painting undesired areas to magenta (255, 0, 255, 255) using Mesh Paint. &lt;code&gt;From Object&lt;/code&gt; will inpaint all selected actors.&lt;/p&gt; &#xA;&lt;h2&gt;Editing the ComfyUI Workflows&lt;/h2&gt; &#xA;&lt;p&gt;You can find the ComfyUI workflows used by the plugin in the &lt;code&gt;Plugins/ComfyTextures/Content/Workflows/Original&lt;/code&gt; folder. Load the JSONs into ComfyUI to see the full workflow and make changes. After making changes, save the workflow using the &lt;code&gt;Save (API Format)&lt;/code&gt; button in ComfyUI and copy the JSON to the corresponding file in the &lt;code&gt;Plugins/ComfyTextures/Content/Workflows&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;You need to have &lt;code&gt;Enable Dev mode Options&lt;/code&gt; enabled in the ComfyUI settings to see the &lt;code&gt;Save (API Format)&lt;/code&gt; button.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;Made by me (Alexander Dzhoganov). If you are hiring, hit me up at alexanderdzhoganov [at] gmail [dot] com.&lt;/p&gt; &#xA;&lt;p&gt;Thank you to the Stability.ai and to the ComfyUI teams for their wonderful work on Stable Diffusion and ComfyUI.&lt;/p&gt;</summary>
  </entry>
</feed>