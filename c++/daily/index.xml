<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-07T01:29:42Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stack-of-tasks/pinocchio</title>
    <updated>2024-04-07T01:29:42Z</updated>
    <id>tag:github.com,2024-04-07:/stack-of-tasks/pinocchio</id>
    <link href="https://github.com/stack-of-tasks/pinocchio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast and flexible implementation of Rigid Body Dynamics algorithms and their analytical derivatives&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/stack-of-tasks/pinocchio/master/doc/images/pinocchio-logo-large.png&#34; width=&#34;800&#34; alt=&#34;Pinocchio Logo&#34; align=&#34;center&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/BSD-2-Clause&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BSD%202--Clause-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gepettoweb.laas.fr/doc/stack-of-tasks/pinocchio/master/doxygen-html/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-online-brightgreen&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://projects.laas.fr/gepetto/doc/stack-of-tasks/pinocchio/master/coverage/&#34;&gt;&lt;img src=&#34;https://gepgitlab.laas.fr/stack-of-tasks/pinocchio/badges/master/coverage.svg?job=doc-coverage&#34; alt=&#34;Coverage Report&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://anaconda.org/conda-forge/pinocchio&#34;&gt;&lt;img src=&#34;https://img.shields.io/conda/dn/conda-forge/pinocchio.svg?sanitize=true&#34; alt=&#34;Conda Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://anaconda.org/conda-forge/pinocchio&#34;&gt;&lt;img src=&#34;https://img.shields.io/conda/vn/conda-forge/pinocchio.svg?sanitize=true&#34; alt=&#34;Conda Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/py/pin&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/pin.svg?sanitize=true&#34; alt=&#34;PyPI version&#34; height=&#34;20&#34;&gt;&lt;/a&gt; &lt;br&gt; &#xA; &lt;!--&lt;a href=&#34;https://gitlab.laas.fr/stack-of-tasks/pinocchio&#34;&gt;&lt;img src=&#34;https://gitlab.laas.fr/stack-of-tasks/pinocchio/badges/master/pipeline.svg&#34; alt=&#34;Pipeline Status&#34;&gt;&lt;/a&gt;--&gt; &lt;/p&gt; &#xA;&lt;!--Pinocchio: a C++ library for efficient Rigid Multi-body Dynamics computations&#xA;===========&#xA;--&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pinocchio&lt;/strong&gt; instantiates the state-of-the-art Rigid Body Algorithms for poly-articulated systems based on revisited Roy Featherstone&#39;s algorithms. Besides, &lt;strong&gt;Pinocchio&lt;/strong&gt; provides the analytical derivatives of the main Rigid-Body Algorithms like the Recursive Newton-Euler Algorithm or the Articulated-Body Algorithm.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pinocchio&lt;/strong&gt; was first tailored for robotics applications, but it can be used in other contexts (biomechanics, computer graphics, vision, etc.). It is built upon Eigen for linear algebra and FCL for collision detection. &lt;strong&gt;Pinocchio&lt;/strong&gt; comes with a Python interface for fast code prototyping, &lt;a href=&#34;https://github.com/conda-forge/pinocchio-feedstock#installing-pinocchio&#34;&gt;directly accessible&lt;/a&gt; through &lt;a href=&#34;https://docs.conda.io/en/latest/&#34;&gt;Conda&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pinocchio&lt;/strong&gt; is now at the heart of various robotics software as &lt;a href=&#34;https://github.com/loco-3d/crocoddyl/tree/devel&#34;&gt;Crocoddyl&lt;/a&gt;, an open-source and efficient Differential Dynamic Programming solver for robotics, the &lt;a href=&#34;http://stack-of-tasks.github.io&#34;&gt;Stack-of-Tasks&lt;/a&gt;, an open-source and versatile hierarchical controller framework or the &lt;a href=&#34;https://humanoid-path-planner.github.io/hpp-doc&#34;&gt;Humanoid Path Planner&lt;/a&gt;, open-source software for Motion and Manipulation Planning.&lt;/p&gt; &#xA;&lt;p&gt;If you want to learn more about &lt;strong&gt;Pinocchio&lt;/strong&gt; internal behaviors and main features, we invite you to read the related &lt;a href=&#34;https://hal-laas.archives-ouvertes.fr/hal-01866228&#34;&gt;paper&lt;/a&gt; and the online &lt;a href=&#34;https://gepettoweb.laas.fr/doc/stack-of-tasks/pinocchio/master/doxygen-html/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to dive into &lt;strong&gt;Pinocchio&lt;/strong&gt; directly, only one single line is sufficient (assuming you have Conda):&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt; conda install pinocchio -c conda-forge &lt;/strong&gt; &lt;/p&gt; &#xA;&lt;p&gt;or via pip (currently only available on Linux):&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt; pip install pin &lt;/strong&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stack-of-tasks/pinocchio/master/#pinocchio-main-features&#34;&gt;Pinocchio main features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stack-of-tasks/pinocchio/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stack-of-tasks/pinocchio/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stack-of-tasks/pinocchio/master/#tutorials&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stack-of-tasks/pinocchio/master/#performances&#34;&gt;Performances&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stack-of-tasks/pinocchio/master/#ongoing-developments&#34;&gt;Ongoing developments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stack-of-tasks/pinocchio/master/#visualization&#34;&gt;Visualization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stack-of-tasks/pinocchio/master/#citing-pinocchio&#34;&gt;Citing Pinocchio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stack-of-tasks/pinocchio/master/#questions-and-issues&#34;&gt;Questions and Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stack-of-tasks/pinocchio/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stack-of-tasks/pinocchio/master/#open-source-projects-relying-on-pinocchio&#34;&gt;Open-source projects relying on Pinocchio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stack-of-tasks/pinocchio/master/#acknowledgments&#34;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pinocchio main features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pinocchio&lt;/strong&gt; is fast:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C++ template library,&lt;/li&gt; &#xA; &lt;li&gt;cache friendly,&lt;/li&gt; &#xA; &lt;li&gt;automatic code generation support is available via &lt;a href=&#34;https://github.com/joaoleal/CppADCodeGen&#34;&gt;CppADCodeGen&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pinocchio&lt;/strong&gt; is versatile, implementing basic and more advanced rigid body dynamics algorithms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;forward kinematics and its analytical derivatives,&lt;/li&gt; &#xA; &lt;li&gt;forward/inverse dynamics and their analytical derivatives,&lt;/li&gt; &#xA; &lt;li&gt;centroidal dynamics and its analytical derivatives,&lt;/li&gt; &#xA; &lt;li&gt;support multiple precision arithmetic via Boost.Multiprecision or any similar framework,&lt;/li&gt; &#xA; &lt;li&gt;computations of kinematic and dynamic regressors for system identification and more,&lt;/li&gt; &#xA; &lt;li&gt;and much more with the support of modern and open-source Automatic Differentiation frameworks like &lt;a href=&#34;https://github.com/coin-or/CppAD&#34;&gt;CppAD&lt;/a&gt; or &lt;a href=&#34;https://web.casadi.org/&#34;&gt;CasADi&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pinocchio&lt;/strong&gt; is flexible:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;header only,&lt;/li&gt; &#xA; &lt;li&gt;C++ 98/03/11/14/17/20 compliant.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pinocchio&lt;/strong&gt; is extensible. &lt;strong&gt;Pinocchio&lt;/strong&gt; is multi-thread friendly. &lt;strong&gt;Pinocchio&lt;/strong&gt; is reliable and extensively tested (unit-tests, simulations, and real-world robotics applications). &lt;strong&gt;Pinocchio&lt;/strong&gt; is supported and tested on Windows, Mac OS X, Unix, and Linux (&lt;a href=&#34;http://robotpkg.openrobots.org/rbulk/robotpkg/math/pinocchio/index.html&#34;&gt;see build status here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The online &lt;strong&gt;Pinocchio&lt;/strong&gt; documentation of the last release is available &lt;a href=&#34;https://gepettoweb.laas.fr/doc/stack-of-tasks/pinocchio/master/doxygen-html/&#34;&gt;here&lt;/a&gt;. A cheat sheet pdf with the main functions and algorithms can be found &lt;a href=&#34;https://github.com/stack-of-tasks/pinocchio/raw/master/doc/pinocchio_cheat_sheet.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;We provide some basic examples of using &lt;strong&gt;Pinocchio&lt;/strong&gt; in Python in the &lt;a href=&#34;https://github.com/stack-of-tasks/pinocchio/tree/master/examples&#34;&gt;examples&lt;/a&gt; directory. Additional examples introducing &lt;strong&gt;Pinocchio&lt;/strong&gt; are also available in the &lt;a href=&#34;https://gepettoweb.laas.fr/doc/stack-of-tasks/pinocchio/master/doxygen-html/md_doc_d-practical-exercises_intro.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pinocchio&lt;/strong&gt; comes with a large bunch of tutorials aiming at introducing the basic tools for robot control. Tutorial and training documents are listed &lt;a href=&#34;https://gepettoweb.laas.fr/doc/stack-of-tasks/pinocchio/master/doxygen-html/index.html#OverviewConclu&#34;&gt;here&lt;/a&gt;. You can also consider the interactive Jupyter notebook &lt;a href=&#34;https://github.com/ymontmarin/_tps_robotique&#34;&gt;set of tutorials&lt;/a&gt; developed by &lt;a href=&#34;https://gepettoweb.laas.fr/index.php/Members/NicolasMansard&#34;&gt;Nicolas Mansard&lt;/a&gt; and &lt;a href=&#34;https://github.com/ymontmarin&#34;&gt;Yann de Mont-Marin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pinocchio continuous integrations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pinocchio&lt;/strong&gt; is constantly tested for several platforms and distributions, as reported below:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;table class=&#34;center&#34;&gt; &#xA; &lt;!-- &lt;tr&gt; &lt;td&gt; Continuous Integration &lt;/td&gt;&lt;/tr&gt;--&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; CI on ROS &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/stack-of-tasks/pinocchio/actions/workflows/ros-ci.yml&#34;&gt;&lt;img alt=&#34;ROS&#34; src=&#34;https://github.com/stack-of-tasks/pinocchio/actions/workflows/ros-ci.yml/badge.svg?branch=devel&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; CI on Linux via APT &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/stack-of-tasks/pinocchio/actions/workflows/linux.yml&#34;&gt;&lt;img alt=&#34;linux&#34; src=&#34;https://github.com/stack-of-tasks/pinocchio/actions/workflows/linux.yml/badge.svg?branch=devel&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; CI on OSX via Conda &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/stack-of-tasks/pinocchio/actions/workflows/macos-linux-conda.yml&#34;&gt;&lt;img alt=&#34;mac&#34; src=&#34;https://github.com/stack-of-tasks/pinocchio/actions/workflows/macos-linux-conda.yml/badge.svg?branch=devel&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; CI on Windows via Conda &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/stack-of-tasks/pinocchio/actions/workflows/windows-conda-clang.yml&#34;&gt;&lt;img alt=&#34;windows&#34; src=&#34;https://github.com/stack-of-tasks/pinocchio/actions/workflows/windows-conda-clang.yml/badge.svg?branch=devel&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; CI on Linux via Robotpkg &lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://gitlab.laas.fr/stack-of-tasks/pinocchio/badges/master/pipeline.svg?sanitize=true&#34; alt=&#34;Pipeline Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Performances&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pinocchio&lt;/strong&gt; exploits, at best, the sparsity induced by the kinematic tree of robotics systems. Thanks to modern programming language paradigms, &lt;strong&gt;Pinocchio&lt;/strong&gt; can unroll most of the computations directly at compile time, allowing to achieve impressive performances for a large range of robots, as illustrated by the plot below, obtained on a standard laptop equipped with an Intel Core i7 CPU @ 2.4 GHz.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/stack-of-tasks/pinocchio/master/doc/images/pinocchio-performances.png&#34; width=&#34;600&#34; alt=&#34;Pinocchio Logo&#34; align=&#34;center&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;For other benchmarks, and mainly the capacity of Pinocchio to exploit, at best, your CPU capacities using advanced code generation techniques, we refer to the technical &lt;a href=&#34;https://hal-laas.archives-ouvertes.fr/hal-01866228&#34;&gt;paper&lt;/a&gt;. In addition, the &lt;a href=&#34;https://github.com/rbd-benchmarks/rbd-benchmarks&#34;&gt;introspection&lt;/a&gt; may also help you to understand and compare the performances of the modern rigid body dynamics libraries.&lt;/p&gt; &#xA;&lt;h2&gt;Ongoing developments&lt;/h2&gt; &#xA;&lt;p&gt;If you want to follow the current developments, you can directly refer to the &lt;a href=&#34;https://github.com/stack-of-tasks/pinocchio/tree/devel&#34;&gt;devel branch&lt;/a&gt;. The &lt;a href=&#34;https://github.com/stack-of-tasks/pinocchio/tree/master/&#34;&gt;master branch&lt;/a&gt; only contains the latest release. Any new Pull Request should then be submitted on the &lt;a href=&#34;https://github.com/stack-of-tasks/pinocchio/tree/devel/&#34;&gt;devel branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pinocchio&lt;/strong&gt; can be easily installed on various Linux (Ubuntu, Fedora, etc.) and Unix distributions (Mac OS X, BSD, etc.). Please refer to the &lt;a href=&#34;http://stack-of-tasks.github.io/pinocchio/download.html&#34;&gt;installation procedure&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you only need the Python bindings of Pinocchio, you may prefer to install it through &lt;a href=&#34;https://docs.conda.io/en/latest/&#34;&gt;Conda&lt;/a&gt;. Please follow the procedure described &lt;a href=&#34;https://github.com/conda-forge/pinocchio-feedstock#installing-pinocchio&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ROS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pinocchio&lt;/strong&gt; is also deployed on ROS. You may follow its deployment status below. If you&#39;re interested in using Pinocchio on systems and/or with packages that integrate with the ROS ecosystem, we recommend the installation of Pinocchio via the binaries distributed via the ROS PPA. Here, you can install Pinocchio using &lt;code&gt;sudo apt install ros-$ROS_DISTRO-pinocchio&lt;/code&gt;. This installs Pinocchio with HPP-FCL support and with Python bindings. You can then depend on Pinocchio in your &lt;code&gt;package.xml&lt;/code&gt; config (&lt;code&gt;&amp;lt;depend&amp;gt;pinocchio&amp;lt;/depend&amp;gt;&lt;/code&gt;) and include it via CMake (&lt;code&gt;find_package(pinocchio REQUIRED)&lt;/code&gt;) -- we include support and hooks to discover the package for both ROS1 and ROS2. An example can be found &lt;a href=&#34;https://github.com/wxmerkt/pinocchio_ros_example&#34;&gt;here&lt;/a&gt;. Please note that we always advise including the &lt;code&gt;pinocchio/fwd.hpp&lt;/code&gt; header as the first include to avoid compilation errors from differing Boost-variant sizes.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ROS1&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt; &#xA;   &lt;th&gt;ROS2&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Melodic&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://build.ros.org/job/Mbin_uB64__pinocchio__ubuntu_bionic_amd64__binary&#34;&gt;&lt;img src=&#34;https://build.ros.org/job/Mbin_uB64__pinocchio__ubuntu_bionic_amd64__binary/badge/icon&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Foxy&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://build.ros2.org/job/Fbin_uF64__pinocchio__ubuntu_focal_amd64__binary&#34;&gt;&lt;img src=&#34;https://build.ros2.org/job/Fbin_uF64__pinocchio__ubuntu_focal_amd64__binary/badge/icon&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Noetic&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://build.ros.org/job/Nbin_uF64__pinocchio__ubuntu_focal_amd64__binary&#34;&gt;&lt;img src=&#34;https://build.ros.org/job/Nbin_uF64__pinocchio__ubuntu_focal_amd64__binary/badge/icon&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Galactic&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://build.ros2.org/job/Gbin_uF64__pinocchio__ubuntu_focal_amd64__binary&#34;&gt;&lt;img src=&#34;https://build.ros2.org/job/Gbin_uF64__pinocchio__ubuntu_focal_amd64__binary/badge/icon&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Humble&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://build.ros2.org/job/Hbin_uJ64__pinocchio__ubuntu_jammy_amd64__binary&#34;&gt;&lt;img src=&#34;https://build.ros2.org/job/Hbin_uJ64__pinocchio__ubuntu_jammy_amd64__binary/badge/icon&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Rolling&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://build.ros2.org/job/Rbin_uJ64__pinocchio__ubuntu_jammy_amd64__binary&#34;&gt;&lt;img src=&#34;https://build.ros2.org/job/Rbin_uJ64__pinocchio__ubuntu_jammy_amd64__binary/badge/icon&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Visualization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pinocchio&lt;/strong&gt; provides support for many open-source and free visualizers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Gepetto/gepetto-viewer&#34;&gt;Gepetto Viewer&lt;/a&gt;: a C++ viewer based on &lt;a href=&#34;https://github.com/openscenegraph/OpenSceneGraph&#34;&gt;OpenSceneGraph&lt;/a&gt; with Python bindings and Blender export. See &lt;a href=&#34;https://github.com/stack-of-tasks/pinocchio-gepetto-viewer&#34;&gt;here&lt;/a&gt; for a C++ example on mixing &lt;strong&gt;Pinocchio&lt;/strong&gt; and &lt;strong&gt;Gepetto Viewer&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rdeits/meshcat&#34;&gt;Meshcat&lt;/a&gt;: supporting visualization in Python and which can be embedded inside any browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ikalevatykh/panda3d_viewer&#34;&gt;Panda3d&lt;/a&gt;: supporting visualization in Python and which can be embedded inside any browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ros-visualization/rviz&#34;&gt;RViz&lt;/a&gt;: supporting visualization in Python and which can interact with other ROS packages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Many external viewers can also be integrated. See the example &lt;a href=&#34;https://github.com/stack-of-tasks/pinocchio/raw/master/bindings/python/pinocchio/visualize/base_visualizer.py&#34;&gt;here&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Citing Pinocchio&lt;/h2&gt; &#xA;&lt;p&gt;To cite &lt;strong&gt;Pinocchio&lt;/strong&gt; in your academic research, please use the following bibtex entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{carpentier2019pinocchio,&#xA;   title={The Pinocchio C++ library -- A fast and flexible implementation of rigid body dynamics algorithms and their analytical derivatives},&#xA;   author={Carpentier, Justin and Saurel, Guilhem and Buondonno, Gabriele and Mirabel, Joseph and Lamiraux, Florent and Stasse, Olivier and Mansard, Nicolas},&#xA;   booktitle={IEEE International Symposium on System Integrations (SII)},&#xA;   year={2019}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the following one for the link to the GitHub codebase:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{pinocchioweb,&#xA;   author = {Justin Carpentier and Florian Valenza and Nicolas Mansard and others},&#xA;   title = {Pinocchio: fast forward and inverse dynamics for poly-articulated systems},&#xA;   howpublished = {https://stack-of-tasks.github.io/pinocchio},&#xA;   year = {2015--2021}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The algorithms for the analytical derivatives of rigid-body dynamics algorithms are detailed here:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{carpentier2018analytical,&#xA;  title = {Analytical Derivatives of Rigid Body Dynamics Algorithms},&#xA;  author = {Carpentier, Justin and Mansard, Nicolas},&#xA;  booktitle = {Robotics: Science and Systems},&#xA;  year = {2018}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Questions and Issues&lt;/h2&gt; &#xA;&lt;p&gt;Do you have a question or an issue? You may either directly open a &lt;a href=&#34;https://github.com/stack-of-tasks/pinocchio/discussions/new?category=q-a&#34;&gt;new question&lt;/a&gt; or a &lt;a href=&#34;https://github.com/stack-of-tasks/pinocchio/issues&#34;&gt;new issue&lt;/a&gt; or, directly contact us via the mailing list &lt;a href=&#34;mailto:pinocchio@inria.fr&#34;&gt;pinocchio@inria.fr&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The following people have been involved in the development of &lt;strong&gt;Pinocchio&lt;/strong&gt; and are warmly thanked for their contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jcarpent.github.io&#34;&gt;Justin Carpentier&lt;/a&gt; (Inria): main developer and manager of the project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://projects.laas.fr/gepetto/index.php/Members/NicolasMansard&#34;&gt;Nicolas Mansard&lt;/a&gt; (LAAS-CNRS): initial project instructor&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://projects.laas.fr/gepetto/index.php/Members/GuilhemSaurel&#34;&gt;Guilhem Saurel&lt;/a&gt; (LAAS-CNRS): continuous integration and deployment&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://jmirabel.github.io/&#34;&gt;Joseph Mirabel&lt;/a&gt; (Eureka Robotics): Lie groups and hpp-fcl implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/antonioelkhoury&#34;&gt;Antonio El Khoury&lt;/a&gt; (Wandercraft): bug fixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://projects.laas.fr/gepetto/index.php/Members/GabrieleBuondonno&#34;&gt;Gabriele Buondono&lt;/a&gt; (LAAS-CNRS): features extension, bug fixes, and Python bindings&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fr.linkedin.com/in/florian-valenza-1b274082&#34;&gt;Florian Valenza&lt;/a&gt; (Astek): core developments and hpp-fcl support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.wolfgangmerkt.com/&#34;&gt;Wolfgang Merkt&lt;/a&gt; (University of Oxford): ROS integration and support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scholar.google.com/citations?user=NW9Io9AAAAAJ&#34;&gt;Rohan Budhiraja&lt;/a&gt; (LAAS-CNRS): features extension&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lesteve&#34;&gt;Loïc Estève&lt;/a&gt; (Inria): Conda integration and support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ikalevatykh&#34;&gt;Igor Kalevatykh&lt;/a&gt; (Inria): Panda3d viewer support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matthieuvigne&#34;&gt;Matthieu Vigne&lt;/a&gt; (Wandercraft): MeshCat viewer support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.di.ens.fr/robin.strudel/&#34;&gt;Robin Strudel&lt;/a&gt; (Inria): features extension&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scholar.google.fr/citations?user=cxSxXiQAAAAJ&amp;amp;hl=en&#34;&gt;François Keith&lt;/a&gt; (CEA): Windows support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sarah-ek&#34;&gt;Sarah El Kazdadi&lt;/a&gt; (Inria): multi-precision arithmetic support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scholar.google.com/citations?user=gYNLhEIAAAAJ&amp;amp;hl=en&#34;&gt;Nicolas Torres Alberto&lt;/a&gt; (Inria): features extension&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EtienneAr&#34;&gt;Etienne Arlaud&lt;/a&gt; (Inria): RViz viewer support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ManifoldFR&#34;&gt;Wilson Jallet&lt;/a&gt; (LAAS-CNRS/Inria): extension of Python bindings&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fabinsch&#34;&gt;Fabian Schramm&lt;/a&gt; (Inria): core developper&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shubhamsingh91&#34;&gt;Shubham Singh&lt;/a&gt; (UT Austin): second-order inverse dynamics derivatives&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scaron.info&#34;&gt;Stéphane Caron&lt;/a&gt; (Inria): core developper&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jorisv&#34;&gt;Joris Vaillant&lt;/a&gt; (Inria): core developer and manager of the project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://roboticseabass.com&#34;&gt;Sebastian Castro&lt;/a&gt; (PickNik Robotics): MeshCat viewer features extension&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have participated in the development of &lt;strong&gt;Pinocchio&lt;/strong&gt;, please add your name and contribution to this list.&lt;/p&gt; &#xA;&lt;h2&gt;Open-source projects relying on Pinocchio&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/loco-3d/crocoddyl&#34;&gt;Crocoddyl&lt;/a&gt; A software to realize model predictive control for complex robotics platforms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stack-of-tasks/tsid/&#34;&gt;TSID&lt;/a&gt; A software that implements a Task Space Inverse Dynamics QP.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://humanoid-path-planner.github.io/hpp-doc/&#34;&gt;HPP&lt;/a&gt; A SDK that implements motion planners for humanoids and other robots.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/duburcqa/jiminy&#34;&gt;Jiminy&lt;/a&gt; A simulator based on Pinocchio.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leggedrobotics/ocs2&#34;&gt;ocs2&lt;/a&gt; A toolbox for Optimal Control for Switched Systems (OCS2)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-dynamic-robot-initiative/trifinger_simulation&#34;&gt;TriFingerSimulation&lt;/a&gt; TriFinger Robot Simulation (a Robot to perform RL on manipulation).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ADVRHumanoids/casadi_kin_dyn&#34;&gt;Casadi_Kin_Dyn&lt;/a&gt; IIT Package for generation of symbolic (SX) expressions of robot kinematics and dynamics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;The development of &lt;strong&gt;Pinocchio&lt;/strong&gt; is actively supported by the &lt;a href=&#34;http://projects.laas.fr/gepetto/&#34;&gt;Gepetto team&lt;/a&gt; &lt;a href=&#34;http://www.laas.fr&#34;&gt;@LAAS-CNRS&lt;/a&gt; and the &lt;a href=&#34;https://www.di.ens.fr/willow/&#34;&gt;Willow team&lt;/a&gt; &lt;a href=&#34;http://www.inria.fr&#34;&gt;@INRIA&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>araujo88/important-algorithms</title>
    <updated>2024-04-07T01:29:42Z</updated>
    <id>tag:github.com,2024-04-07:/araujo88/important-algorithms</id>
    <link href="https://github.com/araujo88/important-algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A list of important algorithms to study&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;important-algorithms&lt;/h1&gt; &#xA;&lt;p&gt;A list of important algorithms to study&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Singly Linked List Reversal&lt;/li&gt; &#xA; &lt;li&gt;Flyod Cycle Detection Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Sliding Window&lt;/li&gt; &#xA; &lt;li&gt;Binary Search&lt;/li&gt; &#xA; &lt;li&gt;Kadane&#39;s Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Quick Select&lt;/li&gt; &#xA; &lt;li&gt;Insertion Sort&lt;/li&gt; &#xA; &lt;li&gt;Selection Sort&lt;/li&gt; &#xA; &lt;li&gt;Counting Sort&lt;/li&gt; &#xA; &lt;li&gt;Heap Sort&lt;/li&gt; &#xA; &lt;li&gt;Merge Sort&lt;/li&gt; &#xA; &lt;li&gt;Quick Sort&lt;/li&gt; &#xA; &lt;li&gt;Topological Sort&lt;/li&gt; &#xA; &lt;li&gt;Preorder Traversal of a Binary Tree&lt;/li&gt; &#xA; &lt;li&gt;Inorder Traversal of a Binary Tree&lt;/li&gt; &#xA; &lt;li&gt;Postorder Traversal of a Binary Tree&lt;/li&gt; &#xA; &lt;li&gt;Level Order Traversal&lt;/li&gt; &#xA; &lt;li&gt;Breadth First Search in a Graph&lt;/li&gt; &#xA; &lt;li&gt;Depth First Search in a Graph&lt;/li&gt; &#xA; &lt;li&gt;Flood Fill Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Kruskal&#39;s Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Floyd Warshall Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Dijkstra’s Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Bellman Ford Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Lee Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Graph Bipartite&lt;/li&gt; &#xA; &lt;li&gt;Union-Find Algorithm&lt;/li&gt; &#xA; &lt;li&gt;KMP Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Euclid&#39;s Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Boyer–Moore Majority Vote Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Dutch National Flag Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Huffman Coding Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Detect Cycle in a Directed Graph&lt;/li&gt; &#xA; &lt;li&gt;Zig Zag Traversal of a Matrix&lt;/li&gt; &#xA; &lt;li&gt;A* Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Dynamic Programming&lt;/li&gt; &#xA; &lt;li&gt;Segment Trees&lt;/li&gt; &#xA; &lt;li&gt;Binary Indexed Trees (Fenwick Trees)&lt;/li&gt; &#xA; &lt;li&gt;Rabin-Karp Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Suffix Array and Suffix Tree&lt;/li&gt; &#xA; &lt;li&gt;B+ Trees&lt;/li&gt; &#xA; &lt;li&gt;Convex Hull Algorithms (e.g., Graham Scan, Jarvis March)&lt;/li&gt; &#xA; &lt;li&gt;Strassen&#39;s Algorithm for Matrix Multiplication&lt;/li&gt; &#xA; &lt;li&gt;RSA Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Bloom Filters&lt;/li&gt; &#xA; &lt;li&gt;Fast Fourier Transform&lt;/li&gt; &#xA; &lt;li&gt;Gauss-Jordan / Gaussian Elimination&lt;/li&gt; &#xA; &lt;li&gt;Randomized Algorithms (e.g., Monte Carlo, Las Vegas)&lt;/li&gt; &#xA; &lt;li&gt;Viterbi Algorithm&lt;/li&gt; &#xA; &lt;li&gt;PageRank&lt;/li&gt; &#xA; &lt;li&gt;Lempel-Ziv-Welch (LZW) Compression&lt;/li&gt; &#xA; &lt;li&gt;Simulated Annealing&lt;/li&gt; &#xA; &lt;li&gt;Backtracking&lt;/li&gt; &#xA; &lt;li&gt;N-Queens Problem Solutions&lt;/li&gt; &#xA; &lt;li&gt;Miller-Rabin Primality Test&lt;/li&gt; &#xA; &lt;li&gt;Linear Programming (Simplex Algorithm)&lt;/li&gt; &#xA; &lt;li&gt;Minimax with Alpha-Beta Pruning&lt;/li&gt; &#xA; &lt;li&gt;Cocke-Younger-Kasami (CYK) Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Expectation-Maximization (EM) Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Apriori Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Gradient Descent and Its Variants (e.g., Stochastic Gradient Descent, Adam)&lt;/li&gt; &#xA; &lt;li&gt;Collaborative Filtering Algorithms&lt;/li&gt; &#xA; &lt;li&gt;Tarjan&#39;s Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Edmonds-Karp Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Z Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Manacher&#39;s Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Prefix Tree&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>projectM-visualizer/projectm</title>
    <updated>2024-04-07T01:29:42Z</updated>
    <id>tag:github.com,2024-04-07:/projectM-visualizer/projectm</id>
    <link href="https://github.com/projectM-visualizer/projectm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;projectM - Cross-platform Music Visualization Library. Open-source and Milkdrop-compatible.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/projectM-visualizer/projectm/actions/workflows/build_windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/projectM-visualizer/projectm/actions/workflows/build_windows.yml/badge.svg?branch=master&#34; alt=&#34;Windows Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/projectM-visualizer/projectm/actions/workflows/build_linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/projectM-visualizer/projectm/actions/workflows/build_linux.yml/badge.svg?branch=master&#34; alt=&#34;Linux Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/projectM-visualizer/projectm/actions/workflows/build_osx.yml&#34;&gt;&lt;img src=&#34;https://github.com/projectM-visualizer/projectm/actions/workflows/build_osx.yml/badge.svg?branch=master&#34; alt=&#34;macOS Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/projectM-visualizer/projectm/actions/workflows/build_emscripten.yml&#34;&gt;&lt;img src=&#34;https://github.com/projectM-visualizer/projectm/actions/workflows/build_emscripten.yml/badge.svg?branch=master&#34; alt=&#34;Emscripten Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/projectM-visualizer/projectm/actions/workflows/build_android.yml&#34;&gt;&lt;img src=&#34;https://github.com/projectM-visualizer/projectm/actions/workflows/build_android.yml/badge.svg?branch=master&#34; alt=&#34;Android Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/737206408482914387/widget.png?style=shield&#34; alt=&#34;Discord Shield&#34;&gt; &lt;a href=&#34;https://discord.gg/mMrxAqaa3W&#34;&gt;Chat with us on Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/projectM-visualizer/projectm/raw/master/docs/web/logo.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;projectM - The most advanced open-source music visualizer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Experience psychedelic and mesmerizing visuals by transforming music into equations that render into a limitless array of user-contributed visualizations.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;projectM is an open-source project that reimplements the esteemed &lt;a href=&#34;https://en.wikipedia.org/wiki/MilkDrop&#34;&gt;Winamp Milkdrop&lt;/a&gt; by Geiss in a more modern, cross-platform reusable library.&lt;/p&gt; &#xA;&lt;p&gt;Its purpose in life is to read an audio input and to produce mesmerizing visuals, detecting tempo, and rendering advanced equations into a limitless array of user-contributed visualizations.&lt;/p&gt; &#xA;&lt;h3&gt;Important: This repository only contains libprojectM for use in application development!&lt;/h3&gt; &#xA;&lt;p&gt;This repository now only contains the projectM shared/static library. All frontends, plug-ins and other tools were outsourced into separate repositories. If you&#39;re not a developer and just look for a download to run projectM visuals on your machine or device, please use one of the links listed below. The releases section in this repository only contains source-code and binary releases of the projectM development libraries and headers, which aren&#39;t useful for end users.&lt;/p&gt; &#xA;&lt;h3&gt;End-User Applications&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: projectM is currently undergoing heavy development, so the available end-user frontends are either outdated or unavailable. We&#39;ve released a few development previews, which are not feature-complete and may have bugs. As soon as we&#39;ve finished the current modernization of libprojectM, we&#39;ll release new and tested versions of most of the frontends listed below, while we may remove or replace some of those which are no longer maintained by their original developers.&lt;/p&gt; &#xA;&lt;h5&gt;Windows&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Standalone (currently only available as a &lt;a href=&#34;https://github.com/kblaschke/frontend-sdl2/releases/tag/2.0-windows-pre1&#34;&gt;development preview&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://store.steampowered.com/app/1358800/projectM_Music_Visualizer/&#34;&gt;Steam&lt;/a&gt; (Same as standalone development preview)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/store/apps/9NDCVH0VCWJN&#34;&gt;Windows Store&lt;/a&gt; (Old 3.1.12 release )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Standalone (currently only available as a &lt;a href=&#34;https://github.com/kblaschke/frontend-sdl2/releases/tag/2.0-macos-pre1&#34;&gt;development preview&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://store.steampowered.com/app/1358800/projectM_Music_Visualizer/&#34;&gt;Steam&lt;/a&gt; (Old 3.1.12 release)&lt;/li&gt; &#xA; &lt;li&gt;Music.app Plugin (currently only available as an &lt;em&gt;unsigned&lt;/em&gt; &lt;a href=&#34;https://github.com/kblaschke/frontend-music-plug-in/releases/tag/v3.0-pre1&#34;&gt;development preview&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://formulae.brew.sh/formula/projectm&#34;&gt;Brew&lt;/a&gt; (Old 3.1.12 release)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Standalone (currently only available as a &lt;a href=&#34;https://github.com/kblaschke/frontend-sdl2/releases/tag/2.0-linux-pre1&#34;&gt;development preview&lt;/a&gt; for Ubuntu 22.04 and compatible distributions)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://store.steampowered.com/app/1358800/projectM_Music_Visualizer/&#34;&gt;Steam&lt;/a&gt; (Same as standalone development preview)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Or check your distribution&#39;s package manager for a binary release. If it is outdated, please contact the package maintainer, as the projectM development team does not maintain any of the distribution-specific packages.&lt;/p&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.psperl.prjM&#34;&gt;Google Play&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Both the free and paid apps plus the Android TV app are &lt;em&gt;not&lt;/em&gt; created or supported by the projectM developers! If you have technical troubles or other inquiries, please contact the app author via the means provided in the Play Store. Any bug reports in the projectM issue tracker regarding the apps will be closed immediately.&lt;/p&gt; &#xA;&lt;h4&gt;Xbox / Windows Phone&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/store/apps/9NDCVH0VCWJN&#34;&gt;Windows Store&lt;/a&gt; (Old 3.1.12 release)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other&lt;/h4&gt; &#xA;&lt;p&gt;Source code and other resources, mostly aimed at developers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projectM-visualizer/projectm/&#34;&gt;Library source code&lt;/a&gt; (this repository)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.qt.io/&#34;&gt;Qt5&lt;/a&gt; based &lt;a href=&#34;https://www.freedesktop.org/wiki/Software/PulseAudio/&#34;&gt;PulseAudio&lt;/a&gt; and JACK desktop apps &lt;a href=&#34;https://github.com/projectM-visualizer/frontend-qt&#34;&gt;as source code for Linux&lt;/a&gt;, currently broken and needs some updating (help wanted!).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/projectm/files/&#34;&gt;ALSA, XMMS, Winamp, JACK&lt;/a&gt; (legacy 2.x sources for historic purposes, unmaintained since 2012)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Discord chat&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/mMrxAqaa3W&#34;&gt;Chat with us on Discord!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Demo Video&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=2dSam8zwSFw&#34; title=&#34;Demo&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/2dSam8zwSFw/0.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Presets&lt;/h3&gt; &#xA;&lt;p&gt;The preset files define the visualizations via pixel shaders and Milkdrop-style equations and parameters.&lt;/p&gt; &#xA;&lt;p&gt;The projectM library does not ship with any presets. The frontends come with varying preset packs which can be found in separate repositories in the projectM repository list:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projectM-visualizer/presets-milkdrop-texture-pack&#34;&gt;Base Milkdrop texture pack&lt;/a&gt; - Recommended for use with &lt;em&gt;any&lt;/em&gt; preset pack!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projectM-visualizer/presets-cream-of-the-crop&#34;&gt;Cream of the Crop Pack&lt;/a&gt; - A collection of about 10K presets compiled by Jason Fletcher. Currently, projectM&#39;s default preset pack.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projectM-visualizer/presets-projectm-classic&#34;&gt;Classic projectM Presets&lt;/a&gt; - A bit over 4K presets shipped with previous versions of projectM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projectM-visualizer/presets-milkdrop-original&#34;&gt;Milkdrop 2 Presets&lt;/a&gt; - The original preset collection shipped with Milkdrop and Winamp.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projectM-visualizer/presets-en-d&#34;&gt;En D Presets&lt;/a&gt; - About 50 presets created by &#34;En D&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Included with projectM are the bltc201, Milkdrop 1 and 2, projectM, tryptonaut and yin collections. You can grab these presets &lt;a href=&#34;http://spiegelmc.com/pub/projectm_presets.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also download an enormous 41,000 preset pack of presets &lt;a href=&#34;https://mischa.lol/projectM/presets_community.zip&#34;&gt;here&lt;/a&gt; (123MB zipped).&lt;/p&gt; &#xA;&lt;h3&gt;Also Featured In&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kodi.tv/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectM-visualizer/projectm/master/docs/web/kodi.png&#34; alt=&#34;Kodi&#34;&gt; Kodi (formerly XBMC)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://web.archive.org/web/20180628174410/http://ghostfiregames.com/helixhome.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectM-visualizer/projectm/master/docs/web/helix.jpg&#34; alt=&#34;Helix&#34;&gt; Helix&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.silverjuke.net&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectM-visualizer/projectm/master/docs/web/silverjuke.png&#34; alt=&#34;Silverjuke&#34;&gt; Silverjuke (FOSS Jukebox)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.videolan.org/vlc/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectM-visualizer/projectm/master/docs/web/vlc.png&#34; alt=&#34;VLC Media Player&#34;&gt; VLC Media Player (AKA VideoLAN Client)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Reminder: These are all third-party integrations of libprojectM and not developed or supported by the projectM development team. Please report bugs in those applications to their respective developers.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectM-visualizer/projectm/master/docs/web/projectM_screenshots/Screen%20Shot%202014-08-25%20at%2012.31.20%20AM.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectM-visualizer/projectm/master/docs/web/projectM_screenshots/Screen%20Shot%202014-08-25%20at%2012.33.50%20AM.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectM-visualizer/projectm/master/docs/web/projectM_screenshots/Screen%20Shot%202014-07-18%20at%202.14.41%20PM.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectM-visualizer/projectm/master/docs/web/projectM_screenshots/Screen%20Shot%202014-07-18%20at%202.13.53%20PM.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectM-visualizer/projectm/master/docs/web/projectM_screenshots/Screen%20Shot%202014-07-18%20at%202.15.36%20PM.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectM-visualizer/projectm/master/docs/web/projectM_screenshots/Screen%20Shot%202014-08-16%20at%204.49.32%20PM.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectM-visualizer/projectm/master/docs/web/projectM_screenshots/Screen%20Shot%202014-08-16%20at%204.50.37%20PM.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectM-visualizer/projectm/master/docs/web/projectM_screenshots/Screen%20Shot%202014-08-25%20at%2012.31.07%20AM.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lwn.net/Articles/750152/&#34;&gt;Article&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building from source&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/projectM-visualizer/projectm/master/BUILDING.md&#34;&gt;BUILDING.md&lt;/a&gt; and the &lt;a href=&#34;https://github.com/projectM-visualizer/projectm/wiki/Building-libprojectM&#34;&gt;developer documentation in the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Using the library&lt;/h1&gt; &#xA;&lt;p&gt;At its core projectM is a library, &lt;a href=&#34;https://raw.githubusercontent.com/projectM-visualizer/projectm/master/src/libprojectM&#34;&gt;libprojectM&lt;/a&gt;. This library is responsible for parsing presets, analyzing audio PCM data with beat detection and FFT, applying the preset to the audio feature data and rendering the resulting output with OpenGL. It can render to a dedicated OpenGL context or a texture.&lt;/p&gt; &#xA;&lt;p&gt;To get started using projectM in your own projects, please go to the wiki and read the &lt;a href=&#34;https://github.com/projectM-visualizer/projectm/wiki#integrating-projectm-into-applications&#34;&gt;developer documentation&lt;/a&gt; available there.&lt;/p&gt; &#xA;&lt;p&gt;There are some open-source applications that make use of libprojectM which can be found in the &lt;a href=&#34;https://github.com/projectM-visualizer&#34;&gt;projectM organization&#39;s repositories&lt;/a&gt; and elsewhere.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Todo&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve projectM using the recently-released Milkdrop source (WIP).&lt;/li&gt; &#xA; &lt;li&gt;Update the various implementations using libprojectM.&lt;/li&gt; &#xA; &lt;li&gt;Update downstream projects with new versions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;Report issues on GitHub in the respective repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projectM-visualizer/projectm/issues&#34;&gt;Rendering issues, crashes or the libprojectM core/API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projectM-visualizer/frontend-sdl2/issues&#34;&gt;Standalone SDL app&lt;/a&gt; (including the Steam release)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projectM-visualizer/frontend-uwp/issues&#34;&gt;Windows Store App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projectM-visualizer/frontend-music-plug-in/issues&#34;&gt;Apple Music plug-in&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issues regarding the &lt;strong&gt;projectM Android apps in the Play Store&lt;/strong&gt;, please contact the app author via the Play Store. We cannot help with any problems or requests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If unsure, post your issue in the main &lt;a href=&#34;https://github.com/projectM-visualizer/projectm/issues&#34;&gt;libprojectM issue tracker&lt;/a&gt;. Please always check any existing issues if your problem has already been posted by another user. If so, add your logs and findings to the existing issue instead of opening a new ticket.&lt;/p&gt; &#xA;&lt;h2&gt;Get in contact with us&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/mMrxAqaa3W&#34;&gt;Chat with us on Discord.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribute to projectM&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to help improve this project, either with documentation, code, porting, hardware or anything else please let us know! We gladly accept pull requests and issues.&lt;/p&gt; &#xA;&lt;p&gt;Before starting to write code, please take your time to read the &lt;a href=&#34;https://github.com/projectM-visualizer/projectm/wiki#contributing-to-projectm&#34;&gt;contribution guidelines&lt;/a&gt; in our wiki.&lt;/p&gt; &#xA;&lt;h2&gt;Package Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;If you maintain packages of libprojectM, we are happy to work with you! Please note well:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The main focus of this project is libprojectM. It&#39;s a library that only really depends on OpenGL. The other applications are more like examples and demos.&lt;/li&gt; &#xA; &lt;li&gt;Many of the frontend applications are likely outdated and of less utility than the core library. If you desire to use them or depend on them, please file an issue in the respective repository so we can help update them.&lt;/li&gt; &#xA; &lt;li&gt;The &#34;canonical&#34; application for actually viewing the visualizations is now &lt;a href=&#34;https://github.com/projectM-visualizer/frontend-sdl2&#34;&gt;projectM-SDL&lt;/a&gt;, based on libSDL2 because it supports audio input and is completely cross-platform.&lt;/li&gt; &#xA; &lt;li&gt;If you like Rust, there is a &lt;a href=&#34;https://github.com/projectM-visualizer/frontend-sdl-rust&#34;&gt;SDL3 rust frontend&lt;/a&gt; in the works looking for contributors.&lt;/li&gt; &#xA; &lt;li&gt;This is an open source project! If you don&#39;t like something, feel free to contribute improvements!&lt;/li&gt; &#xA; &lt;li&gt;Yes, you are looking at the official version. This is not a fork.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/projectM-visualizer/projectm/raw/master/AUTHORS.txt&#34;&gt;Authors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The core projectM library is released under the &lt;a href=&#34;https://github.com/projectM-visualizer/projectm/raw/master/LICENSE.txt&#34;&gt;GNU Lesser General Public License 2.1&lt;/a&gt; to keep any changes open-sourced, but also enable the use of libprojectM in closed-source applications (as a shared library) as long as the license terms are adhered to. The up- and downstream projects may use different licenses - please check all parts of the software to be compatible with your specific project if you plan an integration.&lt;/p&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;More information for developers is available from the &lt;a href=&#34;https://github.com/projectM-visualizer/projectm/wiki&#34;&gt;projectM Wiki&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>