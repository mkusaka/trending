<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-24T01:31:48Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/terminal</title>
    <updated>2022-07-24T01:31:48Z</updated>
    <id>tag:github.com,2022-07-24:/microsoft/terminal</id>
    <link href="https://github.com/microsoft/terminal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The new Windows Terminal and the original Windows console host, all in the same place!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/48369326/115790869-4c852b00-a37c-11eb-97f1-f61972c7800c.png&#34; alt=&#34;terminal-logos&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Welcome to the Windows Terminal, Console and Command-Line repo&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the source code for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/terminal&#34;&gt;Windows Terminal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/terminal-preview&#34;&gt;Windows Terminal Preview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The Windows console host (&lt;code&gt;conhost.exe&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Components shared between the two projects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/tree/main/src/tools/ColorTool&#34;&gt;ColorTool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/tree/main/samples&#34;&gt;Sample projects&lt;/a&gt; that show how to consume the Windows Console APIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Related repositories include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/windows/terminal&#34;&gt;Windows Terminal Documentation&lt;/a&gt; (&lt;a href=&#34;https://github.com/MicrosoftDocs/terminal&#34;&gt;Repo: Contribute to the docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MicrosoftDocs/Console-Docs&#34;&gt;Console API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/Cascadia-Code&#34;&gt;Cascadia Code Font&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing and running Windows Terminal&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ðŸ”´ Note: Windows Terminal requires Windows 10 2004 (build 19041) or later&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Microsoft Store [Recommended]&lt;/h3&gt; &#xA;&lt;p&gt;Install the &lt;a href=&#34;https://aka.ms/terminal&#34;&gt;Windows Terminal from the Microsoft Store&lt;/a&gt;. This allows you to always be on the latest version when we release new builds with automatic upgrades.&lt;/p&gt; &#xA;&lt;p&gt;This is our preferred method.&lt;/p&gt; &#xA;&lt;h3&gt;Other install methods&lt;/h3&gt; &#xA;&lt;h4&gt;Via GitHub&lt;/h4&gt; &#xA;&lt;p&gt;For users who are unable to install Windows Terminal from the Microsoft Store, released builds can be manually downloaded from this repository&#39;s &lt;a href=&#34;https://github.com/microsoft/terminal/releases&#34;&gt;Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Download the &lt;code&gt;Microsoft.WindowsTerminal_&amp;lt;versionNumber&amp;gt;.msixbundle&lt;/code&gt; file from the &lt;strong&gt;Assets&lt;/strong&gt; section. To install the app, you can simply double-click on the &lt;code&gt;.msixbundle&lt;/code&gt; file, and the app installer should automatically run. If that fails for any reason, you can try the following command at a PowerShell prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# NOTE: If you are using PowerShell 7+, please run&#xA;# Import-Module Appx -UseWindowsPowerShell&#xA;# before using Add-AppxPackage.&#xA;&#xA;Add-AppxPackage Microsoft.WindowsTerminal_&amp;lt;versionNumber&amp;gt;.msixbundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ðŸ”´ Note: If you install Terminal manually:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Terminal will not auto-update when new builds are released so you will need to regularly install the latest Terminal release to receive all the latest fixes and improvements!&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Via Windows Package Manager CLI (aka winget)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/winget-cli&#34;&gt;winget&lt;/a&gt; users can download and install the latest Terminal release by installing the &lt;code&gt;Microsoft.WindowsTerminal&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;winget install --id=Microsoft.WindowsTerminal -e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Via Chocolatey (unofficial)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt; users can download and install the latest Terminal release by installing the &lt;code&gt;microsoft-windows-terminal&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install microsoft-windows-terminal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To upgrade Windows Terminal using Chocolatey, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco upgrade microsoft-windows-terminal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have any issues when installing/upgrading the package please go to the &lt;a href=&#34;https://chocolatey.org/packages/microsoft-windows-terminal&#34;&gt;Windows Terminal package page&lt;/a&gt; and follow the &lt;a href=&#34;https://chocolatey.org/docs/package-triage-process&#34;&gt;Chocolatey triage process&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Via Scoop (unofficial)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scoop.sh&#34;&gt;Scoop&lt;/a&gt; users can download and install the latest Terminal release by installing the &lt;code&gt;windows-terminal&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;scoop bucket add extras&#xA;scoop install windows-terminal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update Windows Terminal using Scoop, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;scoop update windows-terminal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have any issues when installing/updating the package, please search for or report the same on the &lt;a href=&#34;https://github.com/lukesampson/scoop-extras/issues&#34;&gt;issues page&lt;/a&gt; of Scoop Extras bucket repository.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Windows Terminal Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;The plan for the Windows Terminal &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/terminal/main/doc/roadmap-2022.md&#34;&gt;is described here&lt;/a&gt; and will be updated as the project proceeds.&lt;/p&gt; &#xA;&lt;h2&gt;Project Build Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Build Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Terminal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/ms/terminal/_build?definitionId=136&#34;&gt;&lt;img src=&#34;https://dev.azure.com/ms/terminal/_apis/build/status/terminal%20CI?branchName=main&#34; alt=&#34;Terminal Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ColorTool&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://microsoft.visualstudio.com/_apis/public/build/definitions/c93e867a-8815-43c1-92c4-e7dd5404f1e1/17023/badge&#34; alt=&#34;Colortool Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Terminal &amp;amp; Console Overview&lt;/h2&gt; &#xA;&lt;p&gt;Please take a few minutes to review the overview below before diving into the code:&lt;/p&gt; &#xA;&lt;h3&gt;Windows Terminal&lt;/h3&gt; &#xA;&lt;p&gt;Windows Terminal is a new, modern, feature-rich, productive terminal application for command-line users. It includes many of the features most frequently requested by the Windows command-line community including support for tabs, rich text, globalization, configurability, theming &amp;amp; styling, and more.&lt;/p&gt; &#xA;&lt;p&gt;The Terminal will also need to meet our goals and measures to ensure it remains fast and efficient, and doesn&#39;t consume vast amounts of memory or power.&lt;/p&gt; &#xA;&lt;h3&gt;The Windows Console Host&lt;/h3&gt; &#xA;&lt;p&gt;The Windows Console host, &lt;code&gt;conhost.exe&lt;/code&gt;, is Windows&#39; original command-line user experience. It also hosts Windows&#39; command-line infrastructure and the Windows Console API server, input engine, rendering engine, user preferences, etc. The console host code in this repository is the actual source from which the &lt;code&gt;conhost.exe&lt;/code&gt; in Windows itself is built.&lt;/p&gt; &#xA;&lt;p&gt;Since taking ownership of the Windows command-line in 2014, the team added several new features to the Console, including background transparency, line-based selection, support for &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code&#34;&gt;ANSI / Virtual Terminal sequences&lt;/a&gt;, &lt;a href=&#34;https://devblogs.microsoft.com/commandline/24-bit-color-in-the-windows-console/&#34;&gt;24-bit color&lt;/a&gt;, a &lt;a href=&#34;https://devblogs.microsoft.com/commandline/windows-command-line-introducing-the-windows-pseudo-console-conpty/&#34;&gt;Pseudoconsole (&#34;ConPTY&#34;)&lt;/a&gt;, and more.&lt;/p&gt; &#xA;&lt;p&gt;However, because Windows Console&#39;s primary goal is to maintain backward compatibility, we have been unable to add many of the features the community (and the team) have been wanting for the last several years including tabs, unicode text, and emoji.&lt;/p&gt; &#xA;&lt;p&gt;These limitations led us to create the new Windows Terminal.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can read more about the evolution of the command-line in general, and the Windows command-line specifically in &lt;a href=&#34;https://devblogs.microsoft.com/commandline/windows-command-line-backgrounder/&#34;&gt;this accompanying series of blog posts&lt;/a&gt; on the Command-Line team&#39;s blog.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Shared Components&lt;/h3&gt; &#xA;&lt;p&gt;While overhauling Windows Console, we modernized its codebase considerably, cleanly separating logical entities into modules and classes, introduced some key extensibility points, replaced several old, home-grown collections and containers with safer, more efficient &lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/standard-library/stl-containers?view=vs-2019&#34;&gt;STL containers&lt;/a&gt;, and made the code simpler and safer by using Microsoft&#39;s &lt;a href=&#34;https://github.com/Microsoft/wil&#34;&gt;Windows Implementation Libraries - WIL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This overhaul resulted in several of Console&#39;s key components being available for re-use in any terminal implementation on Windows. These components include a new DirectWrite-based text layout and rendering engine, a text buffer capable of storing both UTF-16 and UTF-8, a VT parser/emitter, and more.&lt;/p&gt; &#xA;&lt;h3&gt;Creating the new Windows Terminal&lt;/h3&gt; &#xA;&lt;p&gt;When we started planning the new Windows Terminal application, we explored and evaluated several approaches and technology stacks. We ultimately decided that our goals would be best met by continuing our investment in our C++ codebase, which would allow us to reuse several of the aforementioned modernized components in both the existing Console and the new Terminal. Further, we realized that this would allow us to build much of the Terminal&#39;s core itself as a reusable UI control that others can incorporate into their own applications.&lt;/p&gt; &#xA;&lt;p&gt;The result of this work is contained within this repo and delivered as the Windows Terminal application you can download from the Microsoft Store, or &lt;a href=&#34;https://github.com/microsoft/terminal/releases&#34;&gt;directly from this repo&#39;s releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;For more information about Windows Terminal, you may find some of these resources useful and interesting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/commandline&#34;&gt;Command-Line Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/commandline/windows-command-line-backgrounder/&#34;&gt;Command-Line Backgrounder Blog Series&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows Terminal Launch: &lt;a href=&#34;https://www.youtube.com/watch?v=8gw0rXPMMPE&amp;amp;list=PLEHMQNlPj-Jzh9DkNpqipDGCZZuOwrQwR&amp;amp;index=2&amp;amp;t=0s&#34;&gt;Terminal &#34;Sizzle Video&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows Terminal Launch: &lt;a href=&#34;https://www.youtube.com/watch?v=KMudkRcwjCw&#34;&gt;Build 2019 Session&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run As Radio: &lt;a href=&#34;https://www.runasradio.com/Shows/Show/645&#34;&gt;Show 645 - Windows Terminal with Richard Turner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Azure Devops Podcast: &lt;a href=&#34;http://azuredevopspodcast.clear-measure.com/kayla-cinnamon-and-rich-turner-on-devops-on-the-windows-terminal-team-episode-54&#34;&gt;Episode 54 - Kayla Cinnamon and Rich Turner on DevOps on the Windows Terminal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Ignite 2019 Session: &lt;a href=&#34;https://myignite.techcommunity.microsoft.com/sessions/81329?source=sessions&#34;&gt;The Modern Windows Command Line: Windows Terminal - BRK3321&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;I built and ran the new Terminal, but it looks just like the old console&lt;/h3&gt; &#xA;&lt;p&gt;Cause: You&#39;re launching the incorrect solution in Visual Studio.&lt;/p&gt; &#xA;&lt;p&gt;Solution: Make sure you&#39;re building &amp;amp; deploying the &lt;code&gt;CascadiaPackage&lt;/code&gt; project in Visual Studio.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;âš  Note: &lt;code&gt;OpenConsole.exe&lt;/code&gt; is just a locally-built &lt;code&gt;conhost.exe&lt;/code&gt;, the classic Windows Console that hosts Windows&#39; command-line infrastructure. OpenConsole is used by Windows Terminal to connect to and communicate with command-line applications (via &lt;a href=&#34;https://devblogs.microsoft.com/commandline/windows-command-line-introducing-the-windows-pseudo-console-conpty/&#34;&gt;ConPty&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;All project documentation is located at &lt;a href=&#34;https://aka.ms/terminal-docs&#34;&gt;aka.ms/terminal-docs&lt;/a&gt;. If you would like to contribute to the documentation, please submit a pull request on the &lt;a href=&#34;https://github.com/MicrosoftDocs/terminal&#34;&gt;Windows Terminal Documentation repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are excited to work alongside you, our amazing community, to build and enhance Windows Terminal!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;BEFORE you start work on a feature/fix&lt;/strong&gt;&lt;/em&gt;, please read &amp;amp; follow our &lt;a href=&#34;https://github.com/microsoft/terminal/raw/main/CONTRIBUTING.md&#34;&gt;Contributor&#39;s Guide&lt;/a&gt; to help avoid any wasted or duplicate effort.&lt;/p&gt; &#xA;&lt;h2&gt;Communicating with the Team&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to communicate with the team is via GitHub issues.&lt;/p&gt; &#xA;&lt;p&gt;Please file new issues, feature requests and suggestions, but &lt;strong&gt;DO search for similar open/closed preexisting issues before creating a new issue.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to ask a question that you feel doesn&#39;t warrant an issue (yet), please reach out to us via Twitter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kayla Cinnamon, Program Manager: &lt;a href=&#34;https://twitter.com/cinnamon_msft&#34;&gt;@cinnamon_msft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dustin Howett, Engineering Lead: &lt;a href=&#34;https://twitter.com/DHowett&#34;&gt;@dhowett&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mike Griese, Senior Developer: &lt;a href=&#34;https://twitter.com/zadjii&#34;&gt;@zadjii&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Carlos Zamora, Developer: &lt;a href=&#34;https://twitter.com/cazamor_msft&#34;&gt;@cazamor_msft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pankaj Bhojwani, Developer&lt;/li&gt; &#xA; &lt;li&gt;Leonard Hecker, Developer: &lt;a href=&#34;https://twitter.com/LeonardHecker&#34;&gt;@LeonardHecker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer Guidance&lt;/h2&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You must be running Windows 10 2004 (build &amp;gt;= 10.0.19041.0) or later to run Windows Terminal&lt;/li&gt; &#xA; &lt;li&gt;You must &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/uwp/get-started/enable-your-device-for-development&#34;&gt;enable Developer Mode in the Windows Settings app&lt;/a&gt; to locally install and run Windows Terminal&lt;/li&gt; &#xA; &lt;li&gt;You must have &lt;a href=&#34;https://github.com/PowerShell/PowerShell/releases/latest&#34;&gt;PowerShell 7 or later&lt;/a&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;You must have the &lt;a href=&#34;https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/&#34;&gt;Windows 11 (10.0.22000.0) SDK&lt;/a&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;You must have at least &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;VS 2019&lt;/a&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;You must install the following Workloads via the VS Installer. Note: Opening the solution in VS 2019 will &lt;a href=&#34;https://devblogs.microsoft.com/setup/configure-visual-studio-across-your-organization-with-vsconfig/&#34;&gt;prompt you to install missing components automatically&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Desktop Development with C++&lt;/li&gt; &#xA;   &lt;li&gt;Universal Windows Platform Development&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;The following Individual Components&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;C++ (v142) Universal Windows Platform Tools&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You must install the &lt;a href=&#34;https://docs.microsoft.com/dotnet/framework/install/guide-for-developers#to-install-the-net-framework-developer-pack-or-targeting-pack&#34;&gt;.NET Framework Targeting Pack&lt;/a&gt; to build test projects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building the Code&lt;/h2&gt; &#xA;&lt;p&gt;This repository uses &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;git submodules&lt;/a&gt; for some of its dependencies. To make sure submodules are restored or updated, be sure to run the following prior to building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OpenConsole.sln may be built from within Visual Studio or from the command-line using a set of convenience scripts &amp;amp; tools in the &lt;strong&gt;/tools&lt;/strong&gt; directory:&lt;/p&gt; &#xA;&lt;h3&gt;Building in PowerShell&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Import-Module .\tools\OpenConsole.psm1&#xA;Set-MsBuildDevEnvironment&#xA;Invoke-OpenConsoleBuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building in Cmd&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;.\tools\razzle.cmd&#xA;bcz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running &amp;amp; Debugging&lt;/h2&gt; &#xA;&lt;p&gt;To debug the Windows Terminal in VS, right click on &lt;code&gt;CascadiaPackage&lt;/code&gt; (in the Solution Explorer) and go to properties. In the Debug menu, change &#34;Application process&#34; and &#34;Background task process&#34; to &#34;Native Only&#34;.&lt;/p&gt; &#xA;&lt;p&gt;You should then be able to build &amp;amp; debug the Terminal project by hitting &lt;kbd&gt;F5&lt;/kbd&gt;. Make sure to select either the &#34;x64&#34; or the &#34;x86&#34; platform - the Terminal doesn&#39;t build for &#34;Any Cpu&#34; (because the Terminal is a C++ application, not a C# one).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ðŸ‘‰ You will &lt;em&gt;not&lt;/em&gt; be able to launch the Terminal directly by running the WindowsTerminal.exe. For more details on why, see &lt;a href=&#34;https://github.com/microsoft/terminal/issues/926&#34;&gt;#926&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/terminal/issues/4043&#34;&gt;#4043&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Coding Guidance&lt;/h3&gt; &#xA;&lt;p&gt;Please review these brief docs below about our coding practices.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ðŸ‘‰ If you find something missing from these docs, feel free to contribute to any of our documentation files anywhere in the repository (or write some new ones!)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This is a work in progress as we learn what we&#39;ll need to provide people in order to be effective contributors to our project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/raw/main/doc/STYLE.md&#34;&gt;Coding Style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/raw/main/doc/ORGANIZATION.md&#34;&gt;Code Organization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/raw/main/doc/EXCEPTIONS.md&#34;&gt;Exceptions in our legacy codebase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/raw/main/doc/WIL.md&#34;&gt;Helpful smart pointers and macros for interfacing with Windows in WIL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>oneapi-src/oneTBB</title>
    <updated>2022-07-24T01:31:48Z</updated>
    <id>tag:github.com,2022-07-24:/oneapi-src/oneTBB</id>
    <link href="https://github.com/oneapi-src/oneTBB" rel="alternate"></link>
    <summary type="html">&lt;p&gt;oneAPI Threading Building Blocks (oneTBB)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;oneAPI Threading Building Blocks&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oneapi-src/oneTBB/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache_2.0-green.svg?sanitize=true&#34; alt=&#34;Apache License Version 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/oneapi-src/oneTBB/actions/workflows/ci.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/oneapi-src/oneTBB/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;oneTBB CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;oneTBB is a flexible C++ library that simplifies the work of adding parallelism to complex applications, even if you are not a threading expert.&lt;/p&gt; &#xA;&lt;p&gt;The library lets you easily write parallel programs that take full advantage of the multi-core performance. Such programs are portable, composable and have a future-proof scalability. oneTBB provides you with functions, interfaces, and classes to parallelize and scale the code. All you have to do is to use the templates.&lt;/p&gt; &#xA;&lt;p&gt;The library differs from typical threading packages in the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;oneTBB enables you to specify logical parallelism instead of threads.&lt;/li&gt; &#xA; &lt;li&gt;oneTBB targets threading for performance.&lt;/li&gt; &#xA; &lt;li&gt;oneTBB is compatible with other threading packages.&lt;/li&gt; &#xA; &lt;li&gt;oneTBB emphasizes scalable, data parallel programming.&lt;/li&gt; &#xA; &lt;li&gt;oneTBB relies on generic programming.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Refer to oneTBB &lt;a href=&#34;https://raw.githubusercontent.com/oneapi-src/oneTBB/master/examples&#34;&gt;examples&lt;/a&gt; and &lt;a href=&#34;https://github.com/oneapi-src/oneAPI-samples/tree/master/Libraries/oneTBB&#34;&gt;samples&lt;/a&gt; to see how you can use the library.&lt;/p&gt; &#xA;&lt;p&gt;oneTBB is a part of &lt;a href=&#34;https://oneapi.io&#34;&gt;oneAPI&lt;/a&gt;. The current branch implements version 1.1 of oneAPI Specification.&lt;/p&gt; &#xA;&lt;h2&gt;Release Information&lt;/h2&gt; &#xA;&lt;p&gt;Here are &lt;a href=&#34;https://raw.githubusercontent.com/oneapi-src/oneTBB/master/RELEASE_NOTES.md&#34;&gt;Release Notes&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/oneapi-src/oneTBB/master/SYSTEM_REQUIREMENTS.md&#34;&gt;System Requirements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spec.oneapi.com/versions/latest/elements/oneTBB/source/nested-index.html&#34;&gt;oneTBB Specification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oneapi-src.github.io/oneTBB&#34;&gt;oneTBB Developer Guide and Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oneapi-src.github.io/oneTBB/main/tbb_userguide/Migration_Guide.html&#34;&gt;Migrating from TBB to oneTBB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oneapi-src/oneTBB/master/cmake/README.md&#34;&gt;README for the CMake build system&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oneapi-src/oneTBB/master/Bazel.md&#34;&gt;Basic support for the Bazel build system&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oneapi-src/oneTBB/discussions&#34;&gt;oneTBB Discussions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/oneapi-src/oneTBB/master/INSTALL.md&#34;&gt;Installation from Sources&lt;/a&gt; to learn how to install oneTBB.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Please report issues and suggestions via &lt;a href=&#34;https://github.com/oneapi-src/oneTBB/issues&#34;&gt;GitHub issues&lt;/a&gt;. See our &lt;a href=&#34;./CONTRIBUTING.md##Issues&#34;&gt;documentation&lt;/a&gt; to learn how to work with them.&lt;/p&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We&amp;nbsp;welcome&amp;nbsp;community&amp;nbsp;contributions,&amp;nbsp;so&amp;nbsp;check&amp;nbsp;our&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/oneapi-src/oneTBB/master/CONTRIBUTING.md&#34;&gt;Contributing&amp;nbsp;Guidelines&lt;/a&gt; to&amp;nbsp;learn&amp;nbsp;more.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;oneAPI Threading Building Blocks is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/oneapi-src/oneTBB/master/LICENSE.txt&#34;&gt;Apache License, Version 2.0&lt;/a&gt;. By its terms, contributions submitted to the project are also done under that license.&lt;/p&gt; &#xA;&lt;h2&gt;Engineering team contacts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:inteltbbdevelopers@intel.com&#34;&gt;Email us.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;* All names and brands may be claimed as the property of others.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mmp/pbrt-v3</title>
    <updated>2022-07-24T01:31:48Z</updated>
    <id>tag:github.com,2022-07-24:/mmp/pbrt-v3</id>
    <link href="https://github.com/mmp/pbrt-v3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source code for pbrt, the renderer described in the third edition of &#34;Physically Based Rendering: From Theory To Implementation&#34;, by Matt Pharr, Wenzel Jakob, and Greg Humphreys.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pbrt, Version 3&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/mmp/pbrt-v3&#34;&gt;&lt;img src=&#34;https://travis-ci.org/mmp/pbrt-v3.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/mmp/pbrt-v3/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/mlm9g91ejxlcn67s/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository holds the source code to the version of pbrt that is described in the third edition of &lt;em&gt;Physically Based Rendering: From Theory to Implementation&lt;/em&gt;, by &lt;a href=&#34;http://pharr.org/matt&#34;&gt;Matt Pharr&lt;/a&gt;, &lt;a href=&#34;http://www.mitsuba-renderer.org/~wenzel/&#34;&gt;Wenzel Jakob&lt;/a&gt;, and Greg Humphreys. As before, the code is available under the BSD license.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;http://pbrt.org&#34;&gt;pbrt website&lt;/a&gt; has general information about both the &lt;em&gt;Physically Based Rendering&lt;/em&gt; book as well as many other resources for pbrt. As of October 2018, the full &lt;a href=&#34;http://www.pbr-book.org&#34;&gt;text of the book&lt;/a&gt; is now available online, for free.&lt;/p&gt; &#xA;&lt;h2&gt;Example scenes&lt;/h2&gt; &#xA;&lt;p&gt;Over 8GB of example scenes are available for download. (Many are new and weren&#39;t available with previous versions of pbrt.) See the &lt;a href=&#34;http://pbrt.org/scenes-v3.html&#34;&gt;pbrt-v3 scenes page&lt;/a&gt; on the pbrt website for information about how to download them.&lt;/p&gt; &#xA;&lt;p&gt;After downloading them, see the &lt;code&gt;README.md.html&lt;/code&gt; file in the scene distribution for more information about the scenes and preview images.&lt;/p&gt; &#xA;&lt;h2&gt;Additional resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is a &lt;a href=&#34;https://groups.google.com/forum/#!forum/pbrt&#34;&gt;pbrt Google Groups&lt;/a&gt; mailing list that can be a helpful resource.&lt;/li&gt; &#xA; &lt;li&gt;Please see the &lt;a href=&#34;http://pbrt.org/users-guide.html&#34;&gt;User&#39;s Guide&lt;/a&gt; for more information about how to check out and build the system as well as various additional information about working with pbrt.&lt;/li&gt; &#xA; &lt;li&gt;Should you find a bug in pbrt, please report it in the &lt;a href=&#34;https://github.com/mmp/pbrt-v3/issues&#34;&gt;bug tracker&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Please report any errors you find in the &lt;em&gt;Physically Based Rendering&lt;/em&gt; book to &lt;a href=&#34;mailto:authors@pbrt.org&#34;&gt;authors@pbrt.org&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: we tend to let bug reports and book errata emails pile up for a few months for processing them in batches. Don&#39;t think we don&#39;t appreciate them. :-)&lt;/p&gt; &#xA;&lt;h2&gt;Building pbrt&lt;/h2&gt; &#xA;&lt;p&gt;To check out pbrt together with all dependencies, be sure to use the &lt;code&gt;--recursive&lt;/code&gt; flag when cloning the repository, i.e.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone --recursive https://github.com/mmp/pbrt-v3/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you accidentally already cloned pbrt without this flag (or to update an pbrt source tree after a new submodule has been added, run the following command to also fetch the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;pbrt uses &lt;a href=&#34;http://www.cmake.org/&#34;&gt;cmake&lt;/a&gt; for its build system. On Linux and OS X, cmake is available via most package management systems. To get cmake for Windows, or to build it from source, see the &lt;a href=&#34;http://www.cmake.org/download/&#34;&gt;cmake downloads page&lt;/a&gt;. Once you have cmake, the next step depends on your operating system.&lt;/p&gt; &#xA;&lt;h3&gt;Makefile builds (Linux, other Unixes, and Mac)&lt;/h3&gt; &#xA;&lt;p&gt;Create a new directory for the build, change to that directory, and run &lt;code&gt;cmake [path to pbrt-v3]&lt;/code&gt;. A Makefile will be created in the current directory. Next, run &lt;code&gt;make&lt;/code&gt; to build pbrt, the obj2pbrt and imgtool utilities, and an executable that runs pbrt&#39;s unit tests. Depending on the number of cores in your system, you will probably want to supply make with the &lt;code&gt;-j&lt;/code&gt; parameter to specify the number of compilation jobs to run in parallel (e.g. &lt;code&gt;make -j8&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;By default, the makefiles that are created that will compile an optimized release build of pbrt. These builds give the highest performance when rendering, but many runtime checks are disabled in these builds and optimized builds are generally difficult to trace in a debugger.&lt;/p&gt; &#xA;&lt;p&gt;To build a debug version of pbrt, set the &lt;code&gt;CMAKE_BUILD_TYPE&lt;/code&gt; flag to &lt;code&gt;Debug&lt;/code&gt; when you run cmake to create build files to make a debug build. To do so, provide cmake with the argument &lt;code&gt;-DCMAKE_BUILD_TYPE=Debug&lt;/code&gt; and build pbrt using the resulting makefiles. (You may want to keep two build directories, one for release builds and one for debug builds, so that you don&#39;t need to switch back and forth.)&lt;/p&gt; &#xA;&lt;p&gt;Debug versions of the system run much more slowly than release builds. Therefore, in order to avoid surprisingly slow renders when debugging support isn&#39;t desired, debug versions of pbrt print a banner message indicating that they were built for debugging at startup time.&lt;/p&gt; &#xA;&lt;h3&gt;Xcode&lt;/h3&gt; &#xA;&lt;p&gt;To make an Xcode project on OS X, run &lt;code&gt;cmake -G Xcode [path to pbrt-v3]&lt;/code&gt;. A &lt;code&gt;PBRT-V3.xcodeproj&lt;/code&gt; project file that can be opened in Xcode. Note that the default build settings have an optimization level of &#34;None&#34;; you&#39;ll almost certainly want to choose &#34;Faster&#34; or &#34;Fastest&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;MSVC on Windows&lt;/h3&gt; &#xA;&lt;p&gt;On Windows, first point the cmake GUI at the directory with pbrt&#39;s source code. Create a separate directory to hold the result of the build (potentially just a directory named &#34;build&#34; inside the pbrt-v3 directory) and set that for &#34;Where to build the binaries&#34; in the GUI.&lt;/p&gt; &#xA;&lt;p&gt;Next, click &#34;Configure&#34;. Note that you will want to choose the &#34;Win64&#34; generator for your MSVC installation unless you have a clear reason to need a 32-bit build of pbrt. Once cmake has finished the configuration step, click &#34;Generate&#34;; when that&#39;s done, there will be a &#34;PBRT-V3.sln&#34; file in the build directory you specified. Open that up in MSVC and you&#39;re ready to go.&lt;/p&gt; &#xA;&lt;h3&gt;Build Configurations&lt;/h3&gt; &#xA;&lt;p&gt;There are two configuration settings that must be set when configuring the build. The first controls whether pbrt uses 32-bit or 64-bit values for floating-point computation, and the second controls whether tristimulus RGB values or sampled spectral values are used for rendering. (Both of these aren&#39;t amenable to being chosen at runtime, but must be determined at compile time for efficiency). The cmake configuration variables &lt;code&gt;PBRT_FLOAT_AS_DOUBLE&lt;/code&gt; and &lt;code&gt;PBRT_SAMPLED_SPECTRUM&lt;/code&gt; configure them, respectively.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using a GUI version of cmake, those settings should be available in the list of configuration variables; set them as desired before choosing &#39;Generate&#39;.&lt;/p&gt; &#xA;&lt;p&gt;With command-line cmake, their values can be specified when you cmake via &lt;code&gt;-DPBRT_FLOAT_AS_DOUBLE=1&lt;/code&gt;, for example.&lt;/p&gt;</summary>
  </entry>
</feed>