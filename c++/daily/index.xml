<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-20T01:31:01Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>360NENZ/Taiga74164-Akebi-GC</title>
    <updated>2023-01-20T01:31:01Z</updated>
    <id>tag:github.com,2023-01-20:/360NENZ/Taiga74164-Akebi-GC</id>
    <link href="https://github.com/360NENZ/Taiga74164-Akebi-GC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[Sync]Akebi Genshin Cheat source for OS/CN 3.0&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/360NENZ/Taiga74164-Akebi-GC/master/#&#34;&gt;&lt;img width=&#34;500&#34; height=&#34;500&#34; src=&#34;https://i.imgur.com/B8WE1Dl.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/360NENZ/Taiga74164-Akebi-GC/master/#&#34;&gt;&lt;img width=&#34;690&#34; height=&#34;133&#34; src=&#34;https://user-images.githubusercontent.com/67109235/176832764-471a6bd5-405f-43dd-97ec-c11997880993.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/360NENZ/Taiga74164-Akebi-GC/master/README_en-US.md&#34;&gt;EN&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/360NENZ/Taiga74164-Akebi-GC/master/README_zh-Hans.md&#34;&gt;简中&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/360NENZ/Taiga74164-Akebi-GC/master/README_zh-Hant.md&#34;&gt;繁中&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/360NENZ/Taiga74164-Akebi-GC/master/README_vi-vn.md&#34;&gt;VN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;ANNOUNCEMENT:&lt;/h1&gt; &#xA;&lt;p&gt;We recently just received a &lt;a href=&#34;https://github.com/github/dmca/raw/master/2022/09/2022-09-21-genshin-impact.md&#34;&gt;DMCA&lt;/a&gt; takedown from HoYoverse. Me and Callow have decided to turn the source code for the latest version private and will be available to contributors only. I will only upload stable release on this repo, our &lt;a href=&#34;https://discord.gg/akebi&#34;&gt;Discord&lt;/a&gt;, and &lt;a href=&#34;https://www.unknowncheats.me/forum/genshin-impact/512860-akebi-genshin-cheat.html&#34;&gt;UnknownCheats&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vygr/ChrysaLisp</title>
    <updated>2023-01-20T01:31:01Z</updated>
    <id>tag:github.com,2023-01-20:/vygr/ChrysaLisp</id>
    <link href="https://github.com/vygr/ChrysaLisp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parallel OS, with GUI, Terminal, OO Assembler, Class libraries, C-Script compiler, Lisp interpreter and more...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChrysaLisp&lt;/h1&gt; &#xA;&lt;p&gt;ChrysaLisp is a 64-bit, MIMD, multi-CPU, multi-threaded, multi-core, multi-user parallel operating system with features such as a GUI, terminal, OO Assembler, class libraries, C-Script compiler, Lisp interpreter, debugger, profiler, vector font engine, and more. It supports MacOS, Windows, and Linux for x64 and Aarch64 and eventually will move to bare metal. It also allows the modeling of various network topologies and the use of USB-links for joining heterogeneous host networks. It has a virtual CPU instruction set and a powerful object and class system for the assembler and high-level languages. It also has function-level dynamic binding and loading and a command terminal with a familiar interface for pipe-style command line applications. A Common Lisp-like interpreter is also provided.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vygr/ChrysaLisp/master/screen_shot_1.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vygr/ChrysaLisp/master/screen_shot_2.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vygr/ChrysaLisp/master/screen_shot_3.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vygr/ChrysaLisp/master/screen_shot_4.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vygr/ChrysaLisp/master/screen_shot_5.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vygr/ChrysaLisp/master/screen_shot_6.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vygr/ChrysaLisp/master/screen_shot_7.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vygr/ChrysaLisp/master/screen_shot_8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join us at #ChrysaLisp-OS:matrix.org for banter. &lt;a href=&#34;https://element.io/&#34;&gt;https://element.io/&lt;/a&gt; recommended.&lt;/p&gt; &#xA;&lt;p&gt;ChrysaLisp can be used on MacOS, Windows, Linux for x64, MacOS, or Linux for Aarch64. Currently, it runs on a hosted environment while experimentation is being done, but eventually it will be transitioned to run on bare metal. In the future, I plan to create a VM boot image for UniKernel appliances and a WebAssembly target for use within web browsers.&lt;/p&gt; &#xA;&lt;p&gt;ChrysaLisp allows for the simulation of various network topologies utilizing point-to-point links. Each CPU in the network is represented as a separate host process, and point-to-point links utilize shared memory to simulate CPU-to-CPU, bidirectional connections. The design intentionally does not include global bus-based networking.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;usb-links&#34; branch enables the use of a USB3/USB2 Prolific chip &#34;copy&#34; cable to connect heterogeneous host networks. This feature demonstrates that the simulated peer-to-peer network on a single machine can be applied to actual parallel hardware. Additionally, it allows users to connect their MacBooks, Windows laptops and PI4&#39;s to create their own development network, which is pretty cool.&lt;/p&gt; &#xA;&lt;p&gt;ChrysaLisp uses a virtual CPU instruction set to eliminate the use of x64, ARM, or VP64 native instructions. Currently, it compiles directly to native code, but it has the capability to also be translated to byte code form and use runtime translation.&lt;/p&gt; &#xA;&lt;p&gt;To avoid the need for register juggling for parameter passing, all functions define their register interface, and parameter sources and destinations are automatically mapped using a topological sort. If non-DAG mappings are detected, the user can address them with a temporary. The software also includes operators to make it easy to bind parameters to dynamic bound functions, relative addresses, auto-defined string pools, references, and local stack frame values. Output parameters that are not used can be ignored with an underscore.&lt;/p&gt; &#xA;&lt;p&gt;ChrysaLisp has a powerful object and class system that is not limited to just the assembler but is quite as capable as a high level language. It allows for the definition of static classes or virtual classes with inline, virtual, final, static, and override methods. The GUI and Lisp are built using this class system.&lt;/p&gt; &#xA;&lt;p&gt;It has function-level dynamic binding and loading. Functions are loaded and bound on demand as tasks are created and distributed. Currently, functions are loaded from the CPU file system where the task is located, but in the future, they will come from the server object that the task was created with and will be transported across the network as needed. Functions are shared among all tasks that use the same server object, so only one copy of a function is loaded, regardless of how many tasks use it.&lt;/p&gt; &#xA;&lt;p&gt;The system functions are accessed through a set of static classes, which makes it easy to use and eliminates the need to remember static function locations, and also decouples the source from changes at the system level. The interface definitions for these functions can be found in the &lt;em&gt;sys/xxx.inc&lt;/em&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;A command terminal with a familiar interface for pipe style command line applications is provided with args vector, stdin, stdout, stderr etc. Classes for easy construction of pipe masters and slaves, with arbitrary nesting of command line pipes. While this isn&#39;t the best way to create parallel applications it is very useful for the composition of tools and hides all the message passing behind a familiar streams based API.&lt;/p&gt; &#xA;&lt;p&gt;A Common Lisp like interpreter is provided. This is available from the command line, via the command &lt;code&gt;lisp&lt;/code&gt;. To build the entire system type &lt;code&gt;(make)&lt;/code&gt;, calculates minimum compile workload, or &lt;code&gt;(make-all)&lt;/code&gt; to do everything regardless, at the Lisp command prompt. This Lisp has a C-Script &#39;snippets&#39; capability to allow mixing of C-Script compiled expressions within assignment and function calling code. An elementary optimise pass exists for these expressions. Both the virtual assembler and C-Script compiler are written in Lisp, look in the &lt;em&gt;sys/code.inc&lt;/em&gt;, &lt;em&gt;lib/asm/xxx.inc&lt;/em&gt;, &lt;em&gt;sys/func.inc&lt;/em&gt;, &lt;em&gt;lib/trans/x64.inc&lt;/em&gt;, &lt;em&gt;lib/trans/arm64.inc&lt;/em&gt; and &lt;em&gt;lib/asm/vp.inc&lt;/em&gt; for how this is done. Some of the Lisp primitives are constructed via a boot script that each instance of a Lisp class runs on construction, see &lt;em&gt;class/lisp/boot.inc&lt;/em&gt; for details. The compilation and make environment, along with all the compile and make commands are created via the Lisp command line tool in &lt;em&gt;lib/asm/asm.inc&lt;/em&gt;, again this auto runs for each instance of the &lt;code&gt;lisp&lt;/code&gt; command run from the terminal. You can extend this with any number of additional files, just place them after the lisp command and they will execute after the &lt;em&gt;lib/asm/asm.inc&lt;/em&gt; file and before processing of stdin.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t get the idea that due to being coded in interpreted Lisp the assembler and compiler will be slow. A fully cleaned system build from source, including creation of a full recursive pre-bound boot image file, takes on the order of 2 seconds on a 2014 MacBook Pro ! Dev cycle &lt;code&gt;(make)&lt;/code&gt; and &lt;code&gt;(remake)&lt;/code&gt; under 0.5 seconds. It ain&#39;t slow !&lt;/p&gt; &#xA;&lt;p&gt;Network link routing tables are created on booting a link, and the process is distributed in nature, each link starts a flood fill that eventually reaches all the CPU&#39;s and along the way has marked all the routes from one CPU to another. All shortest routes are found, messages going off CPU are assigned to a link as the link becomes free and multiple links can and do route messages over parallel routes simultaneously. Large messages are broken into smaller fragments on sending and reconstructed at the destination to maximize use of available routes.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;-run&lt;/code&gt; command line option launches tasks on booting that CPU, such as the experimental GUI (a work in progress, &lt;code&gt;-run gui/gui/gui.lisp&lt;/code&gt;). You can change the network launch script to run more than one GUI session if you want, try launching the GUI on more than CPU 0, look in &lt;em&gt;funcs.sh&lt;/em&gt; at the &lt;code&gt;boot_cpu_gui&lt;/code&gt; function ! :)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;-l&lt;/code&gt; command line option creates a link, currently up to 1000 CPU&#39;s are allowed but that&#39;s easy to adjust. The shared memory link files are created in the tmp folder &lt;em&gt;/tmp&lt;/em&gt;, so for example &lt;em&gt;/tmp/000-001&lt;/em&gt; would be the link file for the link between CPU 000 and 001.&lt;/p&gt; &#xA;&lt;p&gt;An example network viewed with ps looks like this for a 4x4 mesh network:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./main_gui -l 011-015 -l 003-015 -l 014-015 -l 012-015&#xA;./main_gui -l 010-014 -l 002-014 -l 013-014 -l 014-015&#xA;./main_gui -l 009-013 -l 001-013 -l 012-013 -l 013-014&#xA;./main_gui -l 008-012 -l 000-012 -l 012-015 -l 012-013&#xA;./main_gui -l 007-011 -l 011-015 -l 010-011 -l 008-011&#xA;./main_gui -l 006-010 -l 010-014 -l 009-010 -l 010-011&#xA;./main_gui -l 005-009 -l 009-013 -l 008-009 -l 009-010&#xA;./main_gui -l 004-008 -l 008-012 -l 008-011 -l 008-009&#xA;./main_gui -l 003-007 -l 007-011 -l 006-007 -l 004-007&#xA;./main_gui -l 002-006 -l 006-010 -l 005-006 -l 006-007&#xA;./main_gui -l 001-005 -l 005-009 -l 004-005 -l 005-006&#xA;./main_gui -l 000-004 -l 004-008 -l 004-007 -l 004-005&#xA;./main_gui -l 003-015 -l 003-007 -l 002-003 -l 000-003&#xA;./main_gui -l 002-014 -l 002-006 -l 001-002 -l 002-003&#xA;./main_gui -l 001-013 -l 001-005 -l 000-001 -l 001-002&#xA;./main_gui -l 000-012 -l 000-004 -l 000-003 -l 000-001 -run gui/gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at the &lt;code&gt;docs/INTRO.md&lt;/code&gt; for instructions to get started on all the supported platforms.&lt;/p&gt; &#xA;&lt;p&gt;The experimental GUI requires the &lt;strong&gt;SDL2&lt;/strong&gt; library to be installed.&lt;/p&gt; &#xA;&lt;p&gt;Download these from the SDL web site.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.libsdl.org/download-2.0.php&#34;&gt;SDL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Or get them via your package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install libsdl2-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Make/Run/Stop&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at the &lt;code&gt;docs/INTRO.md&lt;/code&gt; for platform specific instructions. The following is for OSX and Linux systems. Windows has a pre-built main.exe provided, or you can configure Visual Studio to compile things yourself if you wish.&lt;/p&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;The first time you download ChrysaLisp you will only have the vp64 emulator boot image. You must create the native boot images the first time round. This is a little slower than subsequent boots and system compiles but allows us to keep the snapshot.zip file as small as possible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or on Windows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;install.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Make&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run_tui.sh [-n num_cpus] [-e] [-b base_cpu]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Text user interface based fully connected network. Each CPU has links to every other CPU. Careful with this as you can end up with a very large number of link files and shared memory regions. CPU 0 launches a terminal to the host system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run.sh [-n num_cpus] [-e] [-b base_cpu]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fully connected network. Each CPU has links to every other CPU. Careful with this as you can end up with a very large number of link files and shared memory regions. CPU 0 launches a GUI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run_star.sh [-n num_cpus] [-e] [-b base_cpu]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Star connected network. Each CPU has a link to the first CPU. CPU 0 launches a GUI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run_ring.sh [-n num_cpus] [-e] [-b base_cpu]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ring connected network. Each CPU has links to the next and previous CPU&#39;s. CPU 0 launches a GUI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run_tree.sh [-n num_cpus] [-e] [-b base_cpu]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tree connected network. Each CPU has links to its parent CPU and up to two child CPU&#39;s. CPU 0 launches a GUI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run_mesh.sh [-n num_cpus on a side] [-e] [-b base_cpu]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mesh connected network. Each CPU has links to 4 adjacent CPU&#39;s. This is similar to Transputer meshes. CPU 0 launches a GUI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run_cube.sh [-n num_cpus on a side] [-e] [-b base_cpu]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cube connected network. Each CPU has links to 6 adjacent CPU&#39;s. This is similar to TMS320C40 meshes. CPU 0 launches a GUI.&lt;/p&gt; &#xA;&lt;h3&gt;Stop&lt;/h3&gt; &#xA;&lt;p&gt;Stop with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./stop.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Snapshot&lt;/h3&gt; &#xA;&lt;p&gt;Snapshot with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make snapshot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;em&gt;snapshot.zip&lt;/em&gt; file of the &lt;em&gt;obj/&lt;/em&gt; directory containing only the host directory structures, the pre-compiled Windows &lt;em&gt;main_gui.exe&lt;/em&gt; and &lt;em&gt;main_tui.exe&lt;/em&gt; plus the VP64 &lt;em&gt;boot_image&lt;/em&gt; files !&lt;/p&gt; &#xA;&lt;p&gt;Used to create the more compact &lt;em&gt;snapshot.zip&lt;/em&gt; that goes up on Github. This must come after creation of &lt;code&gt;(make-all-platforms)&lt;/code&gt; &lt;em&gt;boot_image&lt;/em&gt; set !&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;obj/x86_64/AMD64/Darwin/&#xA;obj/x86_64/AMD64/Linux/&#xA;obj/aarch64/ARM64/Linux/&#xA;obj/aarch64/ARM64/Darwin/&#xA;obj/vp64/VP64/sys/boot_image&#xA;obj/x86_64/WIN64/Windows/main_gui.exe&#xA;obj/x86_64/WIN64/Windows/main_tui.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clean&lt;/h3&gt; &#xA;&lt;p&gt;Clean with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make clean&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>lwd-temp/Akebi-GC</title>
    <updated>2023-01-20T01:31:01Z</updated>
    <id>tag:github.com,2023-01-20:/lwd-temp/Akebi-GC</id>
    <link href="https://github.com/lwd-temp/Akebi-GC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The great software for some game that exploiting anime girls (and boys).&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lwd-temp/Akebi-GC/master/#&#34;&gt;&lt;img width=&#34;500&#34; height=&#34;500&#34; src=&#34;https://i.imgur.com/B8WE1Dl.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lwd-temp/Akebi-GC/master/#&#34;&gt;&lt;img width=&#34;690&#34; height=&#34;133&#34; src=&#34;https://user-images.githubusercontent.com/67109235/176832764-471a6bd5-405f-43dd-97ec-c11997880993.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwd-temp/Akebi-GC/master/README_en-US.md&#34;&gt;EN&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/lwd-temp/Akebi-GC/master/README_zh-Hans.md&#34;&gt;简中&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/lwd-temp/Akebi-GC/master/README_zh-Hant.md&#34;&gt;繁中&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/lwd-temp/Akebi-GC/master/README_vi-vn.md&#34;&gt;VN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;ANNOUNCEMENT:&lt;/h1&gt; &#xA;&lt;p&gt;We recently just received a DMCA takedown from HoYoverse. Me and Callow have decided to turn the source code for the latest version private and will be available to contributors only. I will only upload stable release on this repo, our &lt;a href=&#34;https://discord.gg/akebi&#34;&gt;Discord&lt;/a&gt;, and &lt;a href=&#34;https://www.unknowncheats.me/forum/genshin-impact/512860-akebi-genshin-cheat.html&#34;&gt;UnknownCheats&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>