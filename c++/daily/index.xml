<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-10T01:30:28Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>topjohnwu/zygisk-module-sample</title>
    <updated>2023-04-10T01:30:28Z</updated>
    <id>tag:github.com,2023-04-10:/topjohnwu/zygisk-module-sample</id>
    <link href="https://github.com/topjohnwu/zygisk-module-sample" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A sample project for building Zygisk modules&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Developing Zygisk Modules&lt;/h1&gt; &#xA;&lt;p&gt;This repository hosts a template zygisk module for developers to start developing Zygisk modules. Before developing Zygisk modules, you should first check out the official documentation for &lt;a href=&#34;https://topjohnwu.github.io/Magisk/guides.html&#34;&gt;Magisk Modules&lt;/a&gt;. Do not fork this repository for your new module; either manually clone this repository, or press the &#34;Use this template&#34; button in the GitHub UI.&lt;/p&gt; &#xA;&lt;p&gt;This repository is archived because it is meant to be read-only; the project is not abandoned. For any issues, please report them to the main Magisk repository.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The canonical URL of the latest public Zygisk API is &lt;a href=&#34;https://github.com/topjohnwu/zygisk-module-sample/raw/master/module/jni/zygisk.hpp&#34;&gt;module/jni/zygisk.hpp&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The header file is self documented; directly refer to the header source code for all Zygisk API details.&lt;/li&gt; &#xA; &lt;li&gt;Magisk is committed to maintain backwards compatibility forever. That is, whenever there is an API update for Zygisk in a newer Magisk version, Magisk can always load Zygisk modules built for an older Zygisk API.&lt;/li&gt; &#xA; &lt;li&gt;If you do not need the new features introduced in newer API versions, it&#39;s perfectly fine to stay on the older API version to maintain maximum compatibility.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Zygisk API&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Minimal Magisk&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Diff&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/topjohnwu/zygisk-module-sample/raw/master/module/jni/zygisk.hpp&#34;&gt;v4&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;26000&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/topjohnwu/zygisk-module-sample/compare/v3..master&#34;&gt;v3..v4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/topjohnwu/zygisk-module-sample/raw/v3/module/jni/zygisk.hpp&#34;&gt;v3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24300&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/topjohnwu/zygisk-module-sample/compare/v2..v3&#34;&gt;v2..v3&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/topjohnwu/zygisk-module-sample/raw/v2/module/jni/zygisk.hpp&#34;&gt;v2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24000&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This repository can be opened with Android Studio.&lt;/li&gt; &#xA; &lt;li&gt;Developing Zygisk modules requires a modern C++ compiler. Please use NDK r21 or higher.&lt;/li&gt; &#xA; &lt;li&gt;All the C++ code is in the &lt;a href=&#34;https://github.com/topjohnwu/zygisk-module-sample/tree/master/module/jni&#34;&gt;module/jni&lt;/a&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;DO NOT modify the default configurations in &lt;code&gt;Application.mk&lt;/code&gt; unless you know what you are doing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;C++ STL&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;APP_STL&lt;/code&gt; variable in &lt;code&gt;Application.mk&lt;/code&gt; is set to &lt;code&gt;none&lt;/code&gt;. &lt;strong&gt;DO NOT&lt;/strong&gt; use any C++ STL included in NDK.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to use C++ STL, you &lt;strong&gt;have to&lt;/strong&gt; use the &lt;code&gt;libcxx&lt;/code&gt; included as a git submodule in this repository. Zygisk modules&#39; code are injected into Zygote, and the included &lt;code&gt;libc++&lt;/code&gt; is setup to be lightweight and fully self contained that prevents conflicts with the hosting program.&lt;/li&gt; &#xA; &lt;li&gt;If you do not need STL, link to the system &lt;code&gt;libstdc++&lt;/code&gt; so that you can at least call the &lt;code&gt;new&lt;/code&gt; operator.&lt;/li&gt; &#xA; &lt;li&gt;Both configurations are demonstrated in the example &lt;code&gt;Android.mk&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the &lt;code&gt;module&lt;/code&gt; folder, call &lt;a href=&#34;https://developer.android.com/ndk/guides/ndk-build&#34;&gt;&lt;code&gt;ndk-build&lt;/code&gt;&lt;/a&gt; to compile your modules.&lt;/li&gt; &#xA; &lt;li&gt;Your module libraries will be in &lt;code&gt;libs/&amp;lt;abi&amp;gt;/lib&amp;lt;module_name&amp;gt;.so&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Copy the libraries into your module&#39;s &lt;code&gt;zygisk&lt;/code&gt; folder, with the ABI as it&#39;s file name:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;module_id&#xA;├── module.prop&#xA;└── zygisk&#xA;    ├── arm64-v8a.so&#xA;    ├── armeabi-v7a.so&#xA;    ├── x86.so&#xA;    └── x86_64.so&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Although the main Magisk project is licensed under GPLv3, the Zygisk API and its headers are not. Every source code in this repository is released under 0BSD (a public domain equivalent license), so you don&#39;t have to worry about any licensing issues while developing Zygisk modules.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cvg/limap</title>
    <updated>2023-04-10T01:30:28Z</updated>
    <id>tag:github.com,2023-04-10:/cvg/limap</id>
    <link href="https://github.com/cvg/limap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A toolbox for mapping and localization with line features.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LIMAP&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cvg/limap/main/misc/media/supp_qualitative_5x3.png&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Note&lt;/strong&gt;: More README and docs will be available soon.&lt;/h2&gt; &#xA;&lt;p&gt;LIMAP is a toolbox for mapping and localization with line features. The system was initially described in the highlight paper &lt;a href=&#34;https://arxiv.org/abs/2303.17504&#34;&gt;3D Line Mapping Revisited&lt;/a&gt; at CVPR 2023 in Vancouver, Canada. Contributors to this project are from the &lt;a href=&#34;https://cvg.ethz.ch/&#34;&gt;Computer Vision and Geometry Group&lt;/a&gt; at &lt;a href=&#34;https://ethz.ch/en.html&#34;&gt;ETH Zurich&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In this project, we provide interfaces for various geometric operations on 2D/3D lines. We support off-the-shelf SfM software including &lt;a href=&#34;http://ccwu.me/vsfm/index.html&#34;&gt;VisualSfM&lt;/a&gt;, &lt;a href=&#34;https://bundler.io/&#34;&gt;Bundler&lt;/a&gt;, and &lt;a href=&#34;https://colmap.github.io/&#34;&gt;COLMAP&lt;/a&gt; to initialize the camera poses to build 3D line maps on the database. The line detectors, matchers, and vanishing point estimators are abstracted to ensure flexibility to support recent advances and future development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Next step:&lt;/strong&gt; Hybrid incremental SfM is under development and will be included in the next round of release.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/cvg/limap/main/misc/media/barn_lsd.gif&#34; style=&#34;margin:-300px 0px -300px 0px&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the dependencies as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CMake &amp;gt;= 3.17&lt;/li&gt; &#xA; &lt;li&gt;COLMAP [&lt;a href=&#34;https://colmap.github.io/install.html&#34;&gt;Guide&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;PoseLib [&lt;a href=&#34;https://raw.githubusercontent.com/cvg/limap/main/misc/install/poselib.md&#34;&gt;Guide&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;HDF5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install libhdf5-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.9 + required packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init --recursive&#xA;&#xA;# Refer to https://pytorch.org/get-started/previous-versions/ to install pytorch compatible with your CUDA&#xA;python -m pip install torch==1.11.0 torchvision==0.12.0 &#xA;python -m pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the LIMAP Python package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m pip install -Ive . &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To double check if the package is successfully installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -c &#34;import limap&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;Example of Line Mapping&lt;/h3&gt; &#xA;&lt;p&gt;Download the test scene &lt;strong&gt;(100 images)&lt;/strong&gt; with the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/quickstart.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run &lt;strong&gt;Fitnmerge&lt;/strong&gt; (line mapping with available depth maps) on Hypersim (visualization is enabled by default):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python runners/hypersim/fitnmerge.py --output_dir outputs/quickstart_fitnmerge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run &lt;strong&gt;Line Mapping&lt;/strong&gt; (RGB-only) on Hypersim (visualization is enabled by default):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python runners/hypersim/triangulation.py --output_dir outputs/quickstart_triangulation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run &lt;strong&gt;Visualization&lt;/strong&gt; of the 3D line maps after the reconstruction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python visualize_3d_lines.py --input_dir outputs/quickstart_triangulation/finaltracks # add the camera frustums with &#34;--imagecols outputs/quickstart_triangulation/imagecols.npy&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[Tips] Options are stored in the config folder: &lt;code&gt;cfgs&lt;/code&gt;. You can easily change the options with the Python argument parser. The following shows an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python runners/hypersim/triangulation.py --sfm.hloc.descriptor sift --line2d.detector.method lsd \&#xA;                                         --line2d.visualize --triangulation.IoU_threshold 0.2 \&#xA;                                         --skip_exists --n_visible_views 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In particular, &lt;code&gt;skip_exists&lt;/code&gt; is a very useful option to avoid running point-based SfM and line detection/description repeatedly in each pass.&lt;/p&gt; &#xA;&lt;h3&gt;Example of Hybrid Point-Line Localization&lt;/h3&gt; &#xA;&lt;p&gt;We provide two query examples for localization from the &lt;em&gt;Stairs&lt;/em&gt; scene in the &lt;a href=&#34;https://www.microsoft.com/en-us/research/project/rgb-d-dataset-7-scenes/&#34;&gt;7Scenes&lt;/a&gt; Dataset, where traditional point-based methods normally struggle due to the repeated steps and lack of texture. The examples are provided in &lt;code&gt;.npy&lt;/code&gt; files: &lt;code&gt;runners/tests/localization/localization_test_data_stairs_[1|2].npy&lt;/code&gt;, which contains the necessary 2D-3D point and line correspondences along with the necessary configurations.&lt;/p&gt; &#xA;&lt;p&gt;To run the examples, for instance the first one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python runners/tests/localization.py --data runners/tests/localization_test_data_stairs_1.npy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will print the pose error estimated using point-only (hloc), and the pose error estimated by our hybrid point-line localization framework. In addition, two images will be created in the output folder (default to &lt;code&gt;outputs/test/localization&lt;/code&gt;) showing the inliers point and line correspondences in hybrid localization projected using the two estimated camera pose (by point-only and point+line) onto the query image with 2D point and line detections marked. An improved accuracy of the hybrid point-line method is expected to be observed.&lt;/p&gt; &#xA;&lt;h2&gt;Supported line detectors, matchers and VP estimators&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to use the methods with &lt;strong&gt;separate installation needed&lt;/strong&gt; you need to install it yourself with the corresponding guides. This is to avoid potential issues at the LIMAP installation to ensure a quicker start.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: PR on integration of new features are very welcome.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The following line detectors are currently supported:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iago-suarez/pytlsd&#34;&gt;LSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cvg/SOLD2&#34;&gt;SOLD2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cherubicXN/hawp&#34;&gt;HAWPv3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Siyuada7/TP-LSD&#34;&gt;TP-LSD&lt;/a&gt; (separate installation needed [&lt;a href=&#34;https://raw.githubusercontent.com/cvg/limap/main/misc/install/tp_lsd.md&#34;&gt;Guide&lt;/a&gt;])&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cvg/DeepLSD&#34;&gt;DeepLSD&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;The following line descriptors/matchers are currently supported:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iago-suarez/pytlbd&#34;&gt;LBD&lt;/a&gt; (separate installation needed [&lt;a href=&#34;https://raw.githubusercontent.com/cvg/limap/main/misc/install/lbd.md&#34;&gt;Guide&lt;/a&gt;])&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cvg/SOLD2&#34;&gt;SOLD2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yosungho/LineTR&#34;&gt;LineTR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hichem-abdellali/L2D2&#34;&gt;L2D2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Endpoint matching with &lt;a href=&#34;https://github.com/magicleap/SuperPointPretrainedNetwork&#34;&gt;SuperPoint&lt;/a&gt; + Nearest Neighbors&lt;/li&gt; &#xA; &lt;li&gt;Endpoint matching with &lt;a href=&#34;https://github.com/magicleap/SuperPointPretrainedNetwork&#34;&gt;SuperPoint&lt;/a&gt; + &lt;a href=&#34;https://github.com/magicleap/SuperGluePretrainedNetwork&#34;&gt;SuperGlue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;The following vanishing point estimators are currently supported:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/B1ueber2y/JLinkage&#34;&gt;JLinkage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danini/progressive-x&#34;&gt;Progressive-X&lt;/a&gt; (separation installation needed [&lt;a href=&#34;https://github.com/danini/progressive-x/raw/master/README.md&#34;&gt;Guide&lt;/a&gt;])&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use this code in your project, please consider citing the following paper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@InProceedings{Liu_2023_LIMAP,&#xA;    author = {Liu, Shaohui and Yu, Yifan and Pautrat, Rémi and Pollefeys, Marc and Larsson, Viktor},&#xA;    title = {3D Line Mapping Revisited},&#xA;    booktitle = {Computer Vision and Pattern Recognition (CVPR)},&#xA;    year = {2023},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project is mainly developed and maintained by &lt;a href=&#34;https://github.com/B1ueber2y/&#34;&gt;Shaohui Liu&lt;/a&gt;, &lt;a href=&#34;https://github.com/MarkYu98&#34;&gt;Yifan Yu&lt;/a&gt;, &lt;a href=&#34;https://github.com/rpautrat&#34;&gt;Rémi Pautrat&lt;/a&gt;, and &lt;a href=&#34;https://github.com/vlarsson&#34;&gt;Viktor Larsson&lt;/a&gt;. Issues and contributions are very welcome at any time.&lt;/p&gt;</summary>
  </entry>
</feed>