<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-09T01:27:36Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OpenSalamander/salamander</title>
    <updated>2023-12-09T01:27:36Z</updated>
    <id>tag:github.com,2023-12-09:/OpenSalamander/salamander</id>
    <link href="https://github.com/OpenSalamander/salamander" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Salamander&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Open Salamander&lt;/h1&gt; &#xA;&lt;p&gt;Open Salamander is a fast and reliable two-panel file manager for Windows.&lt;/p&gt; &#xA;&lt;h2&gt;Origin&lt;/h2&gt; &#xA;&lt;p&gt;The original version of Servant Salamander was developed by Petr Šolín during his studies at the Czech Technical University. He released it as freeware in 1997. After graduation, Petr Šolín founded the company &lt;a href=&#34;https://www.altap.cz/&#34;&gt;Altap&lt;/a&gt; in cooperation with Jan Ryšavý. In 2001 they released the first shareware version of the program. In 2007 a new version was renamed to Altap Salamander 2.5. Many other programmers and translators &lt;a href=&#34;https://raw.githubusercontent.com/OpenSalamander/salamander/main/AUTHORS&#34;&gt;contributed&lt;/a&gt; to the project. In 2019, Altap was acquired by &lt;a href=&#34;https://www.finesoftware.eu/&#34;&gt;Fine&lt;/a&gt;. After this acquisition, Altap Salamander 4.0 was released as freeware. In 2023, the project was open sourced under the GPLv2 license as Open Salamander 5.0.&lt;/p&gt; &#xA;&lt;p&gt;The name Servant Salamander came about when Petr Šolín and his friend Pavel Schreib were brainstorming name for this project. At that time, the well-known file managers were the aging Norton Commander and the rising Windows Commander. They questioned why a file manager should be named Commander, which implied that it commanded instead of served. This thought led to the birth of the name Servant Salamander.&lt;/p&gt; &#xA;&lt;p&gt;Please bear with us as Salamander was our first major project where we learned to program in C++. From a technology standpoint, it does not use &lt;a href=&#34;https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines&#34;&gt;C++ Core Guidelines&lt;/a&gt;, smart pointers, &lt;a href=&#34;https://en.cppreference.com/w/cpp/language/raii&#34;&gt;RAII&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/STL&#34;&gt;STL&lt;/a&gt;, or &lt;a href=&#34;https://github.com/microsoft/wil&#34;&gt;WIL&lt;/a&gt;, all of which were just beginning to evolve during the time Salamander was created. Many of the comments are written in Czech, but this is manageable due to recent progress in AI-powered translation. Salamander is a pure WinAPI application and does not use any frameworks, such as MFC.&lt;/p&gt; &#xA;&lt;p&gt;We would like to thank &lt;a href=&#34;https://www.finesoftware.eu/&#34;&gt;Fine company&lt;/a&gt; for making the open sourced Salamander release possible.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 10 or newer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio 2022&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/cpp/build/vscpp-step-0-installation?view=msvc-170&#34;&gt;Desktop development with C++&lt;/a&gt; workload installed in VS2022&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/&#34;&gt;Windows 11 (10.0.22621.0) SDK&lt;/a&gt; optional component installed in VS2022&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows&#34;&gt;PowerShell 7.2&lt;/a&gt; or newer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/answers/questions/265752/htmlhelp-workshop-download-for-chm-compiler-instal&#34;&gt;HTMLHelp Workshop 1.3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;OPENSAL_BUILD_DIR&lt;/code&gt; environment variable to specify the build directory. Make sure the path has a trailing backslah, e.q. &lt;code&gt;D:\Build\OpenSal\&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Solution &lt;code&gt;\src\vcxproj\salamand.sln&lt;/code&gt; may be built from within Visual Studio or from the command-line using &lt;code&gt;\src\vcxproj\rebuild.cmd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;\src\vcxproj\!populate_build_dir.cmd&lt;/code&gt; to populate build directory with files required to run Open Salamander.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;This project welcomes contributions to build and enhance Open Salamander!&lt;/p&gt; &#xA;&lt;h2&gt;Repository Content&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;\convert         Conversion tables for the Convert command&#xA;\doc             Documentation&#xA;\help            User manual source files&#xA;\src             Open Salamander core source code&#xA;\src\common      Shared libraries&#xA;\src\common\dep  Shared third-party libraries&#xA;\src\lang        English resources&#xA;\src\plugins     Plugins source code&#xA;\src\reglib      Access to Windows Registry files&#xA;\src\res         Image resources&#xA;\src\salmon      Crash detecting and reporting&#xA;\src\salopen     Open files helper&#xA;\src\salspawn    Process spawning helper&#xA;\src\setup       Installer and uinstaller&#xA;\src\sfx7zip     Self-extractor based on 7-Zip&#xA;\src\shellext    Shell extension DLL&#xA;\src\translator  Translate Salamander UI to other languages&#xA;\src\tserver     Trace Server to display info and error messages&#xA;\src\vcxproj     Visual Studio project files&#xA;\tools           Minor utilities&#xA;\translations    Translations into other languages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A few Altap Salamander 4.0 plugins are either not included or cannot be compiled. For instance, the PictView engine &lt;code&gt;pvw32cnv.dll&lt;/code&gt; is not open-sourced, so we should consider switching to &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/wic/-wic-about-windows-imaging-codec&#34;&gt;WIC&lt;/a&gt; or another library. The Encrypt plugin is incompatible with modern SSD disks and has been deprecated. The UnRAR plugin lacks &lt;a href=&#34;https://www.rarlab.com/rar_add.htm&#34;&gt;unrar.dll&lt;/a&gt;, and the FTP plugin is missing &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; libraries. Both issues are solvable as both projects are open source. To build WinSCP plugin you need Embarcadero C++ Builder.&lt;/p&gt; &#xA;&lt;p&gt;All the source code uses UTF-8-BOM encoding and is formatted with &lt;code&gt;clang-format&lt;/code&gt;. Refer to the &lt;code&gt;\normalize.ps1&lt;/code&gt; script for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.altap.cz/&#34;&gt;Altap Salamander Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Altap Salamander 4.0 &lt;a href=&#34;https://www.altap.cz/salamander/features/&#34;&gt;features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Altap Salamander 4.0 &lt;a href=&#34;https://www.altap.cz/salamander/help/&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Servant Salamander and Altap Salamander &lt;a href=&#34;https://www.altap.cz/salamander/changelogs/&#34;&gt;changelogs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.altap.cz/&#34;&gt;User Community Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Altap Salamander on &lt;a href=&#34;https://en.wikipedia.org/wiki/Altap_Salamander&#34;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Open Salamander is open source software licensed &lt;a href=&#34;https://raw.githubusercontent.com/OpenSalamander/salamander/main/doc/license_gpl.txt&#34;&gt;GPLv2&lt;/a&gt; and later. Individual &lt;a href=&#34;https://raw.githubusercontent.com/OpenSalamander/salamander/main/doc/third_party.txt&#34;&gt;files and libraries&lt;/a&gt; have a different, but compatible license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google-deepmind/open_spiel</title>
    <updated>2023-12-09T01:27:36Z</updated>
    <id>tag:github.com,2023-12-09:/google-deepmind/open_spiel</id>
    <link href="https://github.com/google-deepmind/open_spiel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenSpiel is a collection of environments and algorithms for research in general reinforcement learning and search/planning in games.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenSpiel: A Framework for Reinforcement Learning in Games&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openspiel.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/openspiel/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/deepmind/open_spiel/workflows/build_and_test/badge.svg?sanitize=true&#34; alt=&#34;build_and_test&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenSpiel is a collection of environments and algorithms for research in general reinforcement learning and search/planning in games. OpenSpiel supports n-player (single- and multi- agent) zero-sum, cooperative and general-sum, one-shot and sequential, strictly turn-taking and simultaneous-move, perfect and imperfect information games, as well as traditional multiagent environments such as (partially- and fully- observable) grid worlds and social dilemmas. OpenSpiel also includes tools to analyze learning dynamics and other common evaluation metrics. Games are represented as procedural extensive-form games, with some natural extensions. The core API and games are implemented in C++ and exposed to Python. Algorithms and tools are written both in C++ and Python.&lt;/p&gt; &#xA;&lt;p&gt;To try OpenSpiel in Google Colaboratory, please refer to &lt;code&gt;open_spiel/colabs&lt;/code&gt; subdirectory or start &lt;a href=&#34;https://colab.research.google.com/github/deepmind/open_spiel/blob/master/open_spiel/colabs/install_open_spiel.ipynb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google-deepmind/open_spiel/master/docs/_static/OpenSpielB.png&#34; alt=&#34;OpenSpiel visual asset&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Index&lt;/h1&gt; &#xA;&lt;p&gt;Please choose among the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-deepmind/open_spiel/master/docs/install.md&#34;&gt;Installing OpenSpiel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-deepmind/open_spiel/master/docs/intro.md&#34;&gt;Introduction to OpenSpiel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-deepmind/open_spiel/master/docs/concepts.md&#34;&gt;API Overview and First Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-deepmind/open_spiel/master/docs/api_reference.md&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-deepmind/open_spiel/master/docs/games.md&#34;&gt;Overview of Implemented Games&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-deepmind/open_spiel/master/docs/algorithms.md&#34;&gt;Overview of Implemented Algorithms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-deepmind/open_spiel/master/docs/developer_guide.md&#34;&gt;Developer Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-deepmind/open_spiel/master/docs/library.md&#34;&gt;Using OpenSpiel as a C++ Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-deepmind/open_spiel/master/docs/contributing.md&#34;&gt;Guidelines and Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-deepmind/open_spiel/master/docs/authors.md&#34;&gt;Authors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a longer introduction to the core concepts, formalisms, and terminology, including an overview of the algorithms and some results, please see &lt;a href=&#34;https://arxiv.org/abs/1908.09453&#34;&gt;OpenSpiel: A Framework for Reinforcement Learning in Games&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For an overview of OpenSpiel and example uses of the core API, please check out our tutorials:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8NCPqtPwlFQ&#34;&gt;Motivation, Core API, Brief Intro to Replictor Dynamics and Imperfect Information Games&lt;/a&gt; by Marc Lanctot. &lt;a href=&#34;http://mlanctot.info/files/OpenSpiel_Tutorial_KU_Leuven_2022.pdf&#34;&gt;(slides)&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/github/deepmind/open_spiel/blob/master/open_spiel/colabs/OpenSpielTutorial.ipynb&#34;&gt;(colab)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=o6JNHoGUXCo&#34;&gt;Motivation, Core API, Implementing CFR and REINFORCE on Kuhn poker, Leduc poker, and Goofspiel&lt;/a&gt; by Edward Lockhart. &lt;a href=&#34;http://mlanctot.info/files/open_spiel_tutorial-mar2021-comarl.pdf&#34;&gt;(slides)&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/github/deepmind/open_spiel/blob/master/open_spiel/colabs/CFR_and_REINFORCE.ipynb&#34;&gt;(colab)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use OpenSpiel in your research, please cite the paper using the following BibTeX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{LanctotEtAl2019OpenSpiel,&#xA;  title     = {{OpenSpiel}: A Framework for Reinforcement Learning in Games},&#xA;  author    = {Marc Lanctot and Edward Lockhart and Jean-Baptiste Lespiau and&#xA;               Vinicius Zambaldi and Satyaki Upadhyay and Julien P\&#39;{e}rolat and&#xA;               Sriram Srinivasan and Finbarr Timbers and Karl Tuyls and&#xA;               Shayegan Omidshafiei and Daniel Hennes and Dustin Morrill and&#xA;               Paul Muller and Timo Ewalds and Ryan Faulkner and J\&#39;{a}nos Kram\&#39;{a}r&#xA;               and Bart De Vylder and Brennan Saeta and James Bradbury and David Ding&#xA;               and Sebastian Borgeaud and Matthew Lai and Julian Schrittwieser and&#xA;               Thomas Anthony and Edward Hughes and Ivo Danihelka and Jonah Ryan-Davis},&#xA;  year      = {2019},&#xA;  eprint    = {1908.09453},&#xA;  archivePrefix = {arXiv},&#xA;  primaryClass = {cs.LG},&#xA;  journal   = {CoRR},&#xA;  volume    = {abs/1908.09453},&#xA;  url       = {http://arxiv.org/abs/1908.09453},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>couchbase/fleece</title>
    <updated>2023-12-09T01:27:36Z</updated>
    <id>tag:github.com,2023-12-09:/couchbase/fleece</id>
    <link href="https://github.com/couchbase/fleece" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A super-fast, compact, JSON-equivalent binary data format&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/couchbaselabs/fleece/workflows/Build%20and%20Test/badge.svg?sanitize=true&#34; alt=&#34;Build and Test&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Fleece&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fleece&lt;/strong&gt; is a binary encoding for semi-structured data. Its data model is a superset of JSON, adding support for binary values. It is designed to be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Very fast to read:&lt;/strong&gt; No parsing is needed, and the data can be navigated and read without any heap allocation. Fleece objects are internal pointers into the raw data. Arrays and dictionaries can be random-accessed. Performance on real-world-scale data has been clocked at 20x that of JSON. (Want proof? See the &lt;a href=&#34;https://raw.githubusercontent.com/couchbase/fleece/master/Performance.md&#34;&gt;benchmark&lt;/a&gt;.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compact:&lt;/strong&gt; Simple values will be about the same size as JSON. Complex ones may be much smaller, since repeated values, especially strings, only need to be stored once.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Efficient to convert into native objects:&lt;/strong&gt; Numbers are binary, strings are raw UTF-8 without quoting, binary data is not base64-encoded. Storing repeated values once means they only need to be converted into native objects once.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Appendable:&lt;/strong&gt; Fleece is what&#39;s known as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Persistent_data_structure&#34;&gt;persistent data structure&lt;/a&gt;. A Fleece document can be mutated by appending data to it. The mutation is in effect a delta, so it&#39;s usually much smaller than the original document. And the original document is unchanged, which is great for concurrency as well as (simple) version control.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What You Get&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation, including &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;High-level API guide &#34;&lt;a href=&#34;https://github.com/couchbaselabs/fleece/wiki/Using-Fleece&#34;&gt;Using Fleece&lt;/a&gt;&#34;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/couchbase/fleece/master/Fleece.md&#34;&gt;design document&lt;/a&gt;, with details on the data format&lt;/li&gt; &#xA;   &lt;li&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/couchbase/fleece/master/Example.md&#34;&gt;example&lt;/a&gt; showing the details of the encoding of a specific data structure, and a walkthrough of what happens when a program works with the resulting Fleece objects&lt;/li&gt; &#xA;   &lt;li&gt;Some older &lt;a href=&#34;https://raw.githubusercontent.com/couchbase/fleece/master/Performance.md&#34;&gt;performance&lt;/a&gt; figures based on the included test suite, including comparisons to JSON parsing using Apple&#39;s Foundation framework&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A C++ reference implementation, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Encoder and decoder/accessors&lt;/li&gt; &#xA;   &lt;li&gt;Extensions for converting JSON directly to Fleece or vice versa&lt;/li&gt; &#xA;   &lt;li&gt;Extensions for encoding from and decoding to Objective-C (Foundation) object trees&lt;/li&gt; &#xA;   &lt;li&gt;Extensions for mutable values, making it easy to modify Fleece documents and then save them again&lt;/li&gt; &#xA;   &lt;li&gt;Extensions for delta compression&lt;/li&gt; &#xA;   &lt;li&gt;Unit tests&lt;/li&gt; &#xA;   &lt;li&gt;Some simple performance benchmarks&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;C++ and C APIs&lt;/li&gt; &#xA; &lt;li&gt;A command-line tool, &lt;code&gt;fleece&lt;/code&gt;, that can convert JSON to Fleece or vice versa, or dump Fleece data in a human-readable form that shows the internal structure&lt;/li&gt; &#xA; &lt;li&gt;Some experimental stuff: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_array_mapped_trie&#34;&gt;Hash-Array-Mapped Trie&lt;/a&gt; implementation for building highly scaleable persistent hash tables in Fleece&lt;/li&gt; &#xA;   &lt;li&gt;At the other extreme, an extremely compact binary tree of strings that might find a use someday&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why does the world need yet another binary JSON encoding?&lt;/strong&gt;&lt;br&gt; A: Excellent question, sock puppet! Fleece is different from &lt;a href=&#34;http://bsonspec.org&#34;&gt;BSON&lt;/a&gt;, &lt;a href=&#34;https://github.com/dcodeIO/PSON&#34;&gt;PSON&lt;/a&gt;, etc. in that it&#39;s been carefully designed to not need parsing. In performance tests with other binary formats I found that, while they were faster to parse than JSON, the total time was still dominated by allocating and freeing the resulting objects, as well as the conversion from UTF-8 data to platform strings. (I was using Objective-C, but similar issues would arise if using STL or GLib or other collection frameworks.) The way around this is to structure the encoded data more like a memory dump, with &#34;pointers&#34; (relative byte offsets) and fixed-width random-accessible arrays. That&#39;s what Fleece does. As a result, it&#39;s many times faster to work with than JSON; &lt;a href=&#34;https://raw.githubusercontent.com/couchbase/fleece/master/Performance.md&#34;&gt;literally &lt;em&gt;20x faster&lt;/em&gt;&lt;/a&gt; in the included benchmark run on a Macbook Pro.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Can I use it in $LANGUAGE?&lt;/strong&gt; [where $LANGUAGE not in (&#34;C++&#34;, &#34;C&#34;)]&lt;br&gt; Not currently. It would be very nice to more bindings, and the C API should make that fairly straightforward since it&#39;s easy to call from other languages. (But any real API should follow the language&#39;s idioms, instead of being a direct translation!)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why didn&#39;t you write this in $NEW_LANGUAGE instead of crufty C++?&lt;/strong&gt;&lt;br&gt; A: I probably should have! $NEW_LANGUAGE is deservedly attracting a lot of attention for its combination of safety, readable syntax, and support for modern programming paradigms. I&#39;ve been trying out $NEW_LANGUAGE and want to write more code in it. But for this I chose C++ because it&#39;s supported on all platforms, lots of people know how to use it, and it still supports high-level abstractions (unlike C.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why did you only benchmark it against Cocoa&#39;s Foundation classes? Those are slow.&lt;/strong&gt;&lt;br&gt; Because Foundation is what I know and work with. I&#39;d love to incorporate benchmarks of other frameworks; please send a pull request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why the name &#34;Fleece&#34;?&lt;/strong&gt;&lt;br&gt; A: It&#39;s a reference to the mythical &lt;a href=&#34;https://en.wikipedia.org/wiki/Golden_Fleece&#34;&gt;Golden Fleece&lt;/a&gt;, the treasure sought by Jason and the Argonauts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Who wrote this?&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/snej&#34;&gt;Jens Alfke&lt;/a&gt;, with design input from &lt;a href=&#34;https://github.com/vmx&#34;&gt;Volker Mische&lt;/a&gt; and &lt;a href=&#34;https://github.com/daverigby&#34;&gt;Dave Rigby&lt;/a&gt;, and much help with portability and bug-fixing from &lt;a href=&#34;https://github.com/borrrden&#34;&gt;Jim Borden&lt;/a&gt;. (And thanks to Mark Nunberg for the excellent &lt;a href=&#34;https://github.com/mnunberg/jsonsl&#34;&gt;jsonsl&lt;/a&gt; parser.)&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;Fleece is in active use and development. It is a core component of Couchbase Lite 2.0, via the &lt;a href=&#34;https://github.com/couchbase/couchbase-lite-core&#34;&gt;LiteCore&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements / Compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fleece builds with Xcode, Clang, GCC and MSVC, with C++11 or later. (Yes, there are some Objective-C++ source files (&lt;code&gt;.mm&lt;/code&gt;), but those are only used to provide Objective-C glue and Mac/iOS specific benchmarks. You can ignore them on other platforms.)&lt;/li&gt; &#xA; &lt;li&gt;There are no dependencies on any external libraries, other than the standard C library and the C++ STL.&lt;/li&gt; &#xA; &lt;li&gt;It &lt;em&gt;should&lt;/em&gt; work correctly, and create interoperable data, on both little-endian and big-endian CPUs, but admittedly we are not currently testing or using Fleece on any big-endian platforms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We use Travis and Appveyor for CI, covering Clang, GCC, Xcode and MSVC on macOS, Linux and Windows. If you encounter portability problems, please file an issue and we&#39;ll fix it.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache 2.0&lt;/p&gt;</summary>
  </entry>
</feed>