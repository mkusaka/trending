<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-09T01:31:45Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AGWA/git-crypt</title>
    <updated>2022-12-09T01:31:45Z</updated>
    <id>tag:github.com,2022-12-09:/AGWA/git-crypt</id>
    <link href="https://github.com/AGWA/git-crypt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Transparent file encryption in git&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;git-crypt - transparent file encryption in git&lt;/h1&gt; &#xA;&lt;p&gt;git-crypt enables transparent encryption and decryption of files in a git repository. Files which you choose to protect are encrypted when committed, and decrypted when checked out. git-crypt lets you freely share a repository containing a mix of public and private content. git-crypt gracefully degrades, so developers without the secret key can still clone and commit to a repository with encrypted files. This lets you store your secret material (such as keys or passwords) in the same repository as your code, without requiring you to lock down your entire repository.&lt;/p&gt; &#xA;&lt;p&gt;git-crypt was written by &lt;a href=&#34;https://www.agwa.name&#34;&gt;Andrew Ayer&lt;/a&gt; (&lt;a href=&#34;mailto:agwa@andrewayer.name&#34;&gt;agwa@andrewayer.name&lt;/a&gt;). For more information, see &lt;a href=&#34;https://www.agwa.name/projects/git-crypt&#34;&gt;https://www.agwa.name/projects/git-crypt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building git-crypt&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/AGWA/git-crypt/master/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Using git-crypt&lt;/h2&gt; &#xA;&lt;p&gt;Configure a repository to use git-crypt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd repo&#xA;git-crypt init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specify files to encrypt by creating a .gitattributes file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;secretfile filter=git-crypt diff=git-crypt&#xA;*.key filter=git-crypt diff=git-crypt&#xA;secretdir/** filter=git-crypt diff=git-crypt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like a .gitignore file, it can match wildcards and should be checked into the repository. See below for more information about .gitattributes. Make sure you don&#39;t accidentally encrypt the .gitattributes file itself (or other git files like .gitignore or .gitmodules). Make sure your .gitattributes rules are in place &lt;em&gt;before&lt;/em&gt; you add sensitive files, or those files won&#39;t be encrypted!&lt;/p&gt; &#xA;&lt;p&gt;Share the repository with others (or with yourself) using GPG:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git-crypt add-gpg-user USER_ID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;USER_ID&lt;/code&gt; can be a key ID, a full fingerprint, an email address, or anything else that uniquely identifies a public key to GPG (see &#34;HOW TO SPECIFY A USER ID&#34; in the gpg man page). Note: &lt;code&gt;git-crypt add-gpg-user&lt;/code&gt; will add and commit a GPG-encrypted key file in the .git-crypt directory of the root of your repository.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can export a symmetric secret key, which you must securely convey to collaborators (GPG is not required, and no files are added to your repository):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git-crypt export-key /path/to/key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After cloning a repository with encrypted files, unlock with GPG:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git-crypt unlock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with a symmetric key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git-crypt unlock /path/to/key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s all you need to do - after git-crypt is set up (either with &lt;code&gt;git-crypt init&lt;/code&gt; or &lt;code&gt;git-crypt unlock&lt;/code&gt;), you can use git normally - encryption and decryption happen transparently.&lt;/p&gt; &#xA;&lt;h2&gt;Current Status&lt;/h2&gt; &#xA;&lt;p&gt;The latest version of git-crypt is &lt;a href=&#34;https://raw.githubusercontent.com/AGWA/git-crypt/master/NEWS.md&#34;&gt;0.7.0&lt;/a&gt;, released on 2022-04-21. git-crypt aims to be bug-free and reliable, meaning it shouldn&#39;t crash, malfunction, or expose your confidential data. However, it has not yet reached maturity, meaning it is not as documented, featureful, or easy-to-use as it should be. Additionally, there may be backwards-incompatible changes introduced before version 1.0.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;git-crypt is more secure than other transparent git encryption systems. git-crypt encrypts files using AES-256 in CTR mode with a synthetic IV derived from the SHA-1 HMAC of the file. This mode of operation is provably semantically secure under deterministic chosen-plaintext attack. That means that although the encryption is deterministic (which is required so git can distinguish when a file has and hasn&#39;t changed), it leaks no information beyond whether two files are identical or not. Other proposals for transparent git encryption use ECB or CBC with a fixed IV. These systems are not semantically secure and leak information.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;git-crypt relies on git filters, which were not designed with encryption in mind. As such, git-crypt is not the best tool for encrypting most or all of the files in a repository. Where git-crypt really shines is where most of your repository is public, but you have a few files (perhaps private keys named *.key, or a file with API credentials) which you need to encrypt. For encrypting an entire repository, consider using a system like &lt;a href=&#34;https://spwhitton.name/tech/code/git-remote-gcrypt/&#34;&gt;git-remote-gcrypt&lt;/a&gt; instead. (Note: no endorsement is made of git-remote-gcrypt&#39;s security.)&lt;/p&gt; &#xA;&lt;p&gt;git-crypt does not encrypt file names, commit messages, symlink targets, gitlinks, or other metadata.&lt;/p&gt; &#xA;&lt;p&gt;git-crypt does not hide when a file does or doesn&#39;t change, the length of a file, or the fact that two files are identical (see &#34;Security&#34; section above).&lt;/p&gt; &#xA;&lt;p&gt;git-crypt does not support revoking access to an encrypted repository which was previously granted. This applies to both multi-user GPG mode (there&#39;s no del-gpg-user command to complement add-gpg-user) and also symmetric key mode (there&#39;s no support for rotating the key). This is because it is an inherently complex problem in the context of historical data. For example, even if a key was rotated at one point in history, a user having the previous key can still access previous repository history. This problem is discussed in more detail in &lt;a href=&#34;https://github.com/AGWA/git-crypt/issues/47&#34;&gt;https://github.com/AGWA/git-crypt/issues/47&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Files encrypted with git-crypt are not compressible. Even the smallest change to an encrypted file requires git to store the entire changed file, instead of just a delta.&lt;/p&gt; &#xA;&lt;p&gt;Although git-crypt protects individual file contents with a SHA-1 HMAC, git-crypt cannot be used securely unless the entire repository is protected against tampering (an attacker who can mutate your repository can alter your .gitattributes file to disable encryption). If necessary, use git features such as signed tags instead of relying solely on git-crypt for integrity.&lt;/p&gt; &#xA;&lt;p&gt;Files encrypted with git-crypt cannot be patched with git-apply, unless the patch itself is encrypted. To generate an encrypted patch, use &lt;code&gt;git diff --no-textconv --binary&lt;/code&gt;. Alternatively, you can apply a plaintext patch outside of git using the patch command.&lt;/p&gt; &#xA;&lt;p&gt;git-crypt does not work reliably with some third-party git GUIs, such as &lt;a href=&#34;https://jira.atlassian.com/browse/SRCTREE-2511&#34;&gt;Atlassian SourceTree&lt;/a&gt; and GitHub for Mac. Files might be left in an unencrypted state.&lt;/p&gt; &#xA;&lt;h2&gt;Gitattributes File&lt;/h2&gt; &#xA;&lt;p&gt;The .gitattributes file is documented in the gitattributes(5) man page. The file pattern format is the same as the one used by .gitignore, as documented in the gitignore(5) man page, with the exception that specifying merely a directory (e.g. &lt;code&gt;/dir/&lt;/code&gt;) is &lt;em&gt;not&lt;/em&gt; sufficient to encrypt all files beneath it.&lt;/p&gt; &#xA;&lt;p&gt;Also note that the pattern &lt;code&gt;dir/*&lt;/code&gt; does not match files under sub-directories of dir/. To encrypt an entire sub-tree dir/, use &lt;code&gt;dir/**&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dir/** filter=git-crypt diff=git-crypt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The .gitattributes file must not be encrypted, so make sure wildcards don&#39;t match it accidentally. If necessary, you can exclude .gitattributes from encryption like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.gitattributes !filter !diff&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>lottie-react-native/lottie-react-native</title>
    <updated>2022-12-09T01:31:45Z</updated>
    <id>tag:github.com,2022-12-09:/lottie-react-native/lottie-react-native</id>
    <link href="https://github.com/lottie-react-native/lottie-react-native" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lottie wrapper for React Native.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lottie React Native&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/lottie-react-native&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/lottie-react-native.svg?sanitize=true&#34; alt=&#34;npm Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/lottie-react-native&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/lottie-react-native.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lottie component for React Native (&lt;a href=&#34;https://github.com/airbnb/lottie-ios&#34;&gt;iOS&lt;/a&gt;, &lt;a href=&#34;https://github.com/airbnb/lottie-android&#34;&gt;Android&lt;/a&gt;, and &lt;a href=&#34;https://github.com/CommunityToolkit/Lottie-Windows&#34;&gt;Windows&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Lottie is an ecosystem of libraries for parsing &lt;a href=&#34;http://www.adobe.com/products/aftereffects.html&#34;&gt;Adobe After Effects&lt;/a&gt; animations exported as JSON with &lt;a href=&#34;https://github.com/bodymovin/bodymovin&#34;&gt;bodymovin&lt;/a&gt; and rendering them natively!&lt;/p&gt; &#xA;&lt;p&gt;For the first time, designers can create &lt;strong&gt;and ship&lt;/strong&gt; beautiful animations without an engineer painstakingly recreating it by hand.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;h3&gt;iOS and Android&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;code&gt;lottie-react-native&lt;/code&gt; (latest):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add lottie-react-native&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;lottie-react-native&lt;/code&gt; &amp;lt;= 5.1.4 you also need to install &lt;code&gt;lottie-ios@3.4.1&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add lottie-ios@3.4.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More versioning information: &lt;a href=&#34;https://raw.githubusercontent.com/lottie-react-native/lottie-react-native/master/#versioning&#34;&gt;Here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go to your ios folder and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows (React Native &amp;gt;= 0.63)&lt;/h3&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;lottie-react-native&lt;/code&gt; npm package.&lt;/p&gt; &#xA;&lt;p&gt;Add the following to the end of your project file. For C# apps, this should come after any &lt;code&gt;Microsoft.Windows.UI.Xaml.CSharp.targets&lt;/code&gt; includes. For C++ apps, it should come after any &lt;code&gt;Microsoft.Cpp.targets&lt;/code&gt; includes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;PropertyGroup Label=&#34;LottieReactNativeProps&#34;&amp;gt;&#xA;    &amp;lt;LottieReactNativeDir&amp;gt;$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), &#39;node_modules\lottie-react-native\package.json&#39;))\node_modules\lottie-react-native&amp;lt;/LottieReactNativeDir&amp;gt;&#xA;&amp;lt;/PropertyGroup&amp;gt;&#xA;&amp;lt;ImportGroup Label=&#34;LottieReactNativeTargets&#34;&amp;gt;&#xA;    &amp;lt;Import Project=&#34;$(LottieReactNativeDir)\src\windows\cppwinrt\PropertySheets\LottieGen.Auto.targets&#34; /&amp;gt;&#xA;&amp;lt;/ImportGroup&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the LottieReactNative.vcxproj file to your Visual Studio solution to ensure it takes part in the build.&lt;/p&gt; &#xA;&lt;p&gt;For C# apps, you&#39;ll need to install the following packages through NuGet:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LottieGen.MsBuild&lt;/li&gt; &#xA; &lt;li&gt;Microsoft.UI.Xaml&lt;/li&gt; &#xA; &lt;li&gt;Win2D.uwp&lt;/li&gt; &#xA; &lt;li&gt;Microsoft.Toolkit.Uwp.UI.Lottie &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This package is used for loading JSON dynamically. If you only need codegen animation, you can set &lt;code&gt;&amp;lt;EnableLottieDynamicSource&amp;gt;false&amp;lt;/EnableLottieDynamicSource&amp;gt;&lt;/code&gt; in your project file and omit this reference.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For C++ apps, you&#39;ll need these NuGet packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LottieGen.MsBuild&lt;/li&gt; &#xA; &lt;li&gt;Microsoft.UI.Xaml&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;WinUI 2.6 (Microsoft.UI.Xaml 2.6.0) is required by default. Overriding this requires creating a Directory.Build.props file in your project root with a &lt;code&gt;&amp;lt;WinUIVersion&amp;gt;&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;In your application code where you set up your React Native Windows PackageProviders list, add the LottieReactNative provider:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// C#&#xA;PackageProviders.Add(new LottieReactNative.ReactPackageProvider(new AnimatedVisuals.LottieCodegenSourceProvider()));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// C++&#xA;#include &amp;lt;winrt/LottieReactNative.h&amp;gt;&#xA;#include &amp;lt;winrt/AnimatedVisuals.h&amp;gt;&#xA;&#xA;...&#xA;&#xA;PackageProviders().Append(winrt::LottieReactNative::ReactPackageProvider(winrt::AnimatedVisuals::LottieCodegenSourceProvider()));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Codegen animations are supported by adding LottieAnimation items to your project file. These will be compiled into your application and available at runtime by name. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- .vcxproj or .csproj --&amp;gt;&#xA;&amp;lt;ItemGroup&amp;gt;&#xA;    &amp;lt;LottieAnimation Include=&#34;Assets/Animations/MyAnimation.json&#34; Name=&#34;MyAnimation&#34; /&amp;gt;&#xA;&amp;lt;/ItemGroup&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// js&#xA;&amp;lt;LottieView source={&#34;MyAnimation&#34;} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Codegen is available to both C# and C++ applications. Dynamic loading of JSON strings at runtime is currently only supported in C# applications.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Depending on which version of React Native your app runs on you might need to install a specific version of lottie-react-native. Here&#39;s the compatibility list:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App built in React Native version&lt;/th&gt; &#xA;   &lt;th&gt;Requires lottie-react-native version&lt;/th&gt; &#xA;   &lt;th&gt;Requires lottie-ios version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;= 0.59&lt;/td&gt; &#xA;   &lt;td&gt;3.0.2&lt;/td&gt; &#xA;   &lt;td&gt;3.0.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;= 0.60&lt;/td&gt; &#xA;   &lt;td&gt;4.0.2&lt;/td&gt; &#xA;   &lt;td&gt;3.2.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;= 0.63&lt;/td&gt; &#xA;   &lt;td&gt;4.0.3&lt;/td&gt; &#xA;   &lt;td&gt;3.2.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;= 0.64&lt;/td&gt; &#xA;   &lt;td&gt;4.1.3&lt;/td&gt; &#xA;   &lt;td&gt;3.2.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;= 0.66&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt; 4.1.3 and &amp;lt;= 5.1.4&lt;/td&gt; &#xA;   &lt;td&gt;3.4.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;= 0.66&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt; 5.1.4&lt;/td&gt; &#xA;   &lt;td&gt;No need to install &lt;code&gt;lottie-ios&lt;/code&gt; separaretly&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;(If you are using TypeScript, please read &lt;a href=&#34;https://raw.githubusercontent.com/lottie-react-native/lottie-react-native/master/docs/typescript.md&#34;&gt;this first&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Lottie can be used in a declarative way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;;&#xA;import Lottie from &#39;lottie-react-native&#39;;&#xA;&#xA;export default function Animation() {&#xA;  return (&#xA;    &amp;lt;Lottie source={require(&#39;./animation.json&#39;)} autoPlay loop /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, there is an imperative API which is sometimes simpler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React, { useEffect, useRef } from &#39;react&#39;;&#xA;import Lottie from &#39;lottie-react-native&#39;;&#xA;&#xA;export default function AnimationWithImperativeApi() {&#xA;  const animationRef = useRef&amp;lt;Lottie&amp;gt;(null)&#xA;  &#xA;  useEffect(() =&amp;gt; {&#xA;    animationRef.current?.play()&#xA;&#xA;    // Or set a specific startFrame and endFrame with:&#xA;    animationRef.current?.play(30, 120);&#xA;  }, [])&#xA;&#xA;  return (&#xA;    &amp;lt;Lottie&#xA;      ref={animationRef}&#xA;      source={require(&#39;../path/to/animation.json&#39;)}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lottie&#39;s animation progress can be controlled with an &lt;code&gt;Animated&lt;/code&gt; value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React, { useEffect } from &#39;react&#39;;&#xA;import { Animated, Easing } from &#39;react-native&#39;;&#xA;import Lottie from &#39;lottie-react-native&#39;;&#xA;&#xA;export default function ControllingAnimationProgress() {&#xA;  const animationProgress = useRef(new Animated.Value(0))&#xA;&#xA;  useEffect(() =&amp;gt; {&#xA;    Animated.timing(animationProgress.current, {&#xA;      toValue: 1,&#xA;      duration: 5000,&#xA;      easing: Easing.linear,&#xA;      useNativeDriver: false&#xA;    }).start();&#xA;  }, [])&#xA;&#xA;  return (&#xA;     &amp;lt;Lottie&#xA;      source={require(&#39;../path/to/animation.json&#39;)}&#xA;      progress={animationProgress.current}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Changing color of layers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;;&#xA;import Lottie from &#39;lottie-react-native&#39;;&#xA;&#xA;export default function ChangingColorOfLayers() {&#xA;  return (&#xA;    &amp;lt;Lottie&#xA;      source={require(&#39;../path/to/animation.json&#39;)}&#xA;      colorFilters={[&#xA;        {&#xA;          keypath: &#39;button&#39;,&#xA;          color: &#39;#F00000&#39;,&#xA;        },&#xA;        {&#xA;          keypath: &#39;Sending Loader&#39;,&#xA;          color: &#39;#F00000&#39;,&#xA;        },&#xA;      ]}&#xA;      autoPlay&#xA;      loop&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;You can find the full list of props and methods available in our &lt;a href=&#34;https://github.com/airbnb/lottie-react-native/raw/master/docs/api.md&#34;&gt;API document&lt;/a&gt;. These are the most common ones:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;source&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Mandatory&lt;/strong&gt; - The source of animation. Can be referenced as a local asset by a string, or remotely with an object with a &lt;code&gt;uri&lt;/code&gt; property, or it can be an actual JS object of an animation, obtained (for example) with something like &lt;code&gt;require(&#39;../path/to/animation.json&#39;)&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;None&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;style&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Style attributes for the view, as expected in a standard &lt;a href=&#34;https://facebook.github.io/react-native/docs/layout-props.html&#34;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;aspectRatio&lt;/code&gt; exported by Bodymovin will be set. Also the &lt;code&gt;width&lt;/code&gt; if you haven&#39;t provided a &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A boolean flag indicating whether or not the animation should loop.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;autoPlay&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A boolean flag indicating whether or not the animation should start automatically when mounted. This only affects the imperative API.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;colorFilters&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An array of objects denoting layers by KeyPath and a new color filter value (as hex string).&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/airbnb/lottie-react-native/raw/master/docs/api.md&#34;&gt;More...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Not all After Effects features are supported by Lottie. If you notice there are some layers or animations missing check &lt;a href=&#34;https://github.com/airbnb/lottie/raw/master/supported-features.md&#34;&gt;this list&lt;/a&gt; to ensure they are supported.&lt;/p&gt; &#xA;&lt;h3&gt;iOS specific problems&lt;/h3&gt; &#xA;&lt;p&gt;If you have issues linking your &lt;strong&gt;iOS&lt;/strong&gt; project check out this &lt;a href=&#34;https://stackoverflow.com/questions/52536380/why-linker-link-static-libraries-with-errors-ios&#34;&gt;StackOverflow thread&lt;/a&gt; on how to fix it.&lt;/p&gt; &#xA;&lt;h3&gt;Android specific problems&lt;/h3&gt; &#xA;&lt;p&gt;If your app crashes on &lt;strong&gt;Android&lt;/strong&gt;, means auto linking didn&#39;t work. You will need to make the following changes:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;android/app/src/main/java/\&amp;lt;AppName\&amp;gt;/MainApplication.java&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add &lt;code&gt;import com.airbnb.android.react.lottie.LottiePackage;&lt;/code&gt; on the imports section&lt;/li&gt; &#xA; &lt;li&gt;add &lt;code&gt;packages.add(new LottiePackage());&lt;/code&gt; in &lt;code&gt;List&amp;lt;ReactPackage&amp;gt; getPackages()&lt;/code&gt;;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;android/app/build.gradle&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;add &lt;code&gt;implementation project(&#39;:lottie-react-native&#39;)&lt;/code&gt; in the &lt;code&gt;dependencies&lt;/code&gt; block&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;android/settings.gradle&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;include &#39;:lottie-react-native&#39;&#xA;project(&#39;:lottie-react-native&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/lottie-react-native/src/android&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More&lt;/h2&gt; &#xA;&lt;p&gt;View more documentation, FAQ, help, examples, and more at &lt;a href=&#34;https://airbnb.io/lottie/&#34;&gt;airbnb.io/lottie&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lottie-react-native/lottie-react-native/master/docs/gifs/Example1.gif&#34; alt=&#34;Example1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lottie-react-native/lottie-react-native/master/docs/gifs/Example2.gif&#34; alt=&#34;Example2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lottie-react-native/lottie-react-native/master/docs/gifs/Example3.gif&#34; alt=&#34;Example3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lottie-react-native/lottie-react-native/master/docs/gifs/Community%202_3.gif&#34; alt=&#34;Community&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lottie-react-native/lottie-react-native/master/docs/gifs/Example4.gif&#34; alt=&#34;Example4&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/STL</title>
    <updated>2022-12-09T01:31:45Z</updated>
    <id>tag:github.com,2022-12-09:/microsoft/STL</id>
    <link href="https://github.com/microsoft/STL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MSVC&#39;s implementation of the C++ Standard Library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Microsoft&#39;s C++ Standard Library&lt;/h1&gt; &#xA;&lt;p&gt;This is the official repository for Microsoft&#39;s implementation of the C++ Standard Library (also known as the STL), which ships as part of the MSVC toolset and the Visual Studio IDE.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://github.com/microsoft/STL/wiki/Changelog&#34;&gt;Changelog&lt;/a&gt; tracks which updates to this repository appear in each VS release.&lt;/li&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://microsoft.github.io/STL/&#34;&gt;Status Chart&lt;/a&gt; displays our overall progress over time.&lt;/li&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://discord.gg/XWanNww&#34;&gt;Discord server&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/vclibs/STL/_build/latest?definitionId=4&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/vclibs/STL/_apis/build/status/microsoft.STL?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What This Repo Is Useful For&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re a programmer who just wants to use the STL, you &lt;strong&gt;don&#39;t&lt;/strong&gt; need this repo. Simply install the Visual Studio IDE and select the &#34;Desktop development with C++&#34; workload.&lt;/p&gt; &#xA;&lt;p&gt;If you want to participate in the STL&#39;s development, welcome! You can report issues, comment on pull requests, and learn about what we&#39;re working on. You can also submit pull requests to fix bugs or add features: see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/STL/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can take our code and use it in other apps and libraries (according to the terms of our license, like everything else).&lt;/p&gt; &#xA;&lt;h1&gt;GitHub Migration Status&lt;/h1&gt; &#xA;&lt;p&gt;We&#39;re in the process of moving all of our work on the STL to GitHub. Current status:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Code: &lt;strong&gt;Done.&lt;/strong&gt; Our source code is available under the Apache License v2.0 with LLVM Exception. (See &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/STL/main/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/STL/main/NOTICE.txt&#34;&gt;NOTICE.txt&lt;/a&gt; for more information.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build System: &lt;strong&gt;In progress.&lt;/strong&gt; We&#39;re working on a CMake build system, which is currently capable of building one flavor of the STL (native desktop). We need to extend this to build all of the flavors required for the MSVC toolset (e.g. &lt;code&gt;/clr&lt;/code&gt;, &lt;code&gt;/clr:pure&lt;/code&gt;, OneCore, Spectre). Until that&#39;s done, we&#39;re keeping our legacy build system around in the &lt;code&gt;stl/msbuild&lt;/code&gt; subdirectory. (We&#39;re keeping those files in this repo, even though they&#39;re unusable outside of Microsoft, because they need to be updated whenever source files are added/renamed/deleted. We&#39;ll delete the legacy machinery as soon as possible.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tests: &lt;strong&gt;In progress.&lt;/strong&gt; We rely on three test suites: std, tr1, and &lt;a href=&#34;https://libcxx.llvm.org&#34;&gt;libcxx&lt;/a&gt;. We&#39;ve partially ported std and tr1, and fully ported libcxx to run under &lt;a href=&#34;https://llvm.org/docs/CommandGuide/lit.html&#34;&gt;lit&lt;/a&gt; using the various configurations/compilers we test internally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Continuous Integration: &lt;strong&gt;In progress.&lt;/strong&gt; We&#39;ve set up Azure Pipelines to validate changes to the repository. Currently, it builds the STL (native desktop for x86, x64, ARM, and ARM64). Also, it strictly verifies that all of our files have been formatted with &lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;clang-format&lt;/a&gt; and follow our other whitespace conventions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Contribution Guidelines: &lt;strong&gt;Coming soon.&lt;/strong&gt; Working on the STL&#39;s code involves following many rules. We have codebase conventions, Standard requirements, Microsoft-specific requirements, binary compatibility (ABI) requirements, and more. We&#39;re eager to begin accepting features and fixes from the community, but in addition to setting up a CI system, we need to write down all of the rules that are currently stored in our brains. (The ABI rules may be useful to other C++ libraries.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Issues: &lt;strong&gt;In progress.&lt;/strong&gt; We&#39;re going to use GitHub issues to track all of the things that we need to work on. This includes C++20 features, &lt;a href=&#34;https://cplusplus.github.io/LWG/lwg-toc.html&#34;&gt;LWG issues&lt;/a&gt;, conformance bugs, performance improvements, and other todos. There are approximately 200 active bugs in the STL&#39;s Microsoft-internal database; we need to manually replicate all of them to GitHub issues. Currently, the &lt;a href=&#34;https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3Acxx20&#34;&gt;cxx20 tag&lt;/a&gt; and &lt;a href=&#34;https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3ALWG&#34;&gt;LWG tag&lt;/a&gt; are done; every remaining work item is tracked by a GitHub issue. The &lt;a href=&#34;https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3Abug&#34;&gt;bug tag&lt;/a&gt; and &lt;a href=&#34;https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement&#34;&gt;enhancement tag&lt;/a&gt; are being populated.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plans: &lt;strong&gt;In progress.&lt;/strong&gt; We&#39;re writing up our &lt;a href=&#34;https://github.com/microsoft/STL/wiki/Roadmap&#34;&gt;Roadmap&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Goals&lt;/h1&gt; &#xA;&lt;p&gt;We&#39;re implementing the latest C++ Working Draft, currently &lt;a href=&#34;https://wg21.link/n4917&#34;&gt;N4917&lt;/a&gt;, which will eventually become the next C++ International Standard. The terms Working Draft (WD) and Working Paper (WP) are interchangeable; we often informally refer to these drafts as &#34;the Standard&#34; while being aware of the difference. (There are other relevant Standards; for example, supporting &lt;code&gt;/std:c++14&lt;/code&gt; and &lt;code&gt;/std:c++17&lt;/code&gt; involves understanding how the C++14 and C++17 Standards differ from the Working Paper, and we often need to refer to the C Standard Library and ECMAScript regular expression specifications.)&lt;/p&gt; &#xA;&lt;p&gt;Our primary goals are conformance, performance, usability, and compatibility.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Conformance: The Working Paper is a moving target; as features and LWG issue resolutions are added, we need to implement them. That can involve a lot of work, because the STL is required to behave in very specific ways and to handle users doing very unusual things.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Performance: The STL needs to be extremely fast at runtime; speed is one of C++&#39;s core strengths, and most C++ programs use the STL extensively. As a result, we spend more time on optimization than most general-purpose libraries. (However, we&#39;re wary of changes that improve some scenarios at the expense of others, or changes that make code significantly more complicated and fragile. That is, there&#39;s a &#34;complexity budget&#34; that must be spent carefully.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Usability: This includes parts of the programming experience like compiler throughput, diagnostic messages, and debugging checks. For example, we&#39;ve extensively marked the STL with &lt;code&gt;[[nodiscard]]&lt;/code&gt; attributes because this helps programmers avoid bugs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compatibility: This includes binary compatibility and source compatibility. We&#39;re keeping VS 2022 binary-compatible with VS 2015/2017/2019, which restricts what we can change in VS 2022 updates. (We&#39;ve found that significant changes are possible even though other changes are impossible, which we&#39;ll be documenting in our Contribution Guidelines soon.) While there are a few exceptions to this rule (e.g. if a feature is added to the Working Paper, we implement it, and then the feature is significantly changed before the International Standard is finalized, we reserve the right to break binary compatibility because &lt;code&gt;/std:c++latest&lt;/code&gt; offers an experimental preview of such features), binary compatibility generally overrides all other considerations, even conformance. Source compatibility refers to being able to successfully recompile user code without changes. We consider source compatibility to be important, but not all-important; breaking source compatibility can be an acceptable cost, if done for the right reasons in the right way (e.g. in a controlled manner with escape hatches).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Non-Goals&lt;/h1&gt; &#xA;&lt;p&gt;There are things that we aren&#39;t interested in doing with this project, for various reasons (most importantly, we need to focus development effort on our goals). Some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Non-goal: Porting to other platforms.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Non-goal: Adding non-Standard extensions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Non-goal: Implementing Technical Specifications. (We&#39;re prioritizing features in the Working Paper. Occasionally, we might implement some or all of a TS, often when we&#39;re working on the specification itself.)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re proposing a feature to WG21 (the C++ Standardization Committee), you&#39;re welcome (and encouraged!) to use our code as a base for a proof-of-concept implementation. These non-goals simply mean that we&#39;re unable to consider pull requests for a proposed feature until it has been voted into a Working Paper. After that happens, we&#39;ll be delighted to review a production-ready pull request.&lt;/p&gt; &#xA;&lt;h1&gt;Reporting Issues&lt;/h1&gt; &#xA;&lt;p&gt;You can report STL bugs here, where they&#39;ll be directly reviewed by maintainers. You can also report STL bugs through &lt;a href=&#34;https://aka.ms/feedback/report?space=62&#34;&gt;Developer Community&lt;/a&gt;, or the VS IDE (Help &amp;gt; Send Feedback &amp;gt; Report a Problem...).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please help us&lt;/strong&gt; efficiently process bug reports by following these rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Only STL bugs should be reported here. If it&#39;s a bug in the compiler, CRT, or IDE, please report it through Developer Community or Report A Problem. If it&#39;s a bug in the Windows SDK, please report it through the &lt;a href=&#34;https://support.microsoft.com/en-us/help/4021566/windows-10-send-feedback-to-microsoft-with-feedback-hub-app&#34;&gt;Feedback Hub&lt;/a&gt; app. If you aren&#39;t sure, try to reduce your test case and see if you can eliminate the STL&#39;s involvement while still reproducing the bug.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You should be reasonably confident that you&#39;re looking at an actual implementation bug, instead of undefined behavior or surprising-yet-Standard behavior. Comparing against other implementations can help (but remember that implementations can differ while conforming to the Standard); try &lt;a href=&#34;https://godbolt.org&#34;&gt;Compiler Explorer&lt;/a&gt;. If you still aren&#39;t sure, ask the nearest C++ expert.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You should prepare a self-contained command-line test case, ideally as small as possible. We need a source file, a command line, what happened (e.g. a compiler error, runtime misbehavior), and what you expected to happen. By &#34;self-contained&#34;, we mean that your source file has to avoid including code that we don&#39;t have. Ideally, only CRT and STL headers should be included. If you have to include other MSVC libraries, or the Windows SDK, to trigger an STL bug, that&#39;s okay. But if you need parts of your own source code to trigger the STL bug, you need to extract that for us. (On Developer Community, we&#39;ll accept zipped IDE projects if you have no other way to reproduce a bug, but this is very time-consuming for us to reduce.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A good title is helpful. We prefer &#34;&lt;code&gt;&amp;lt;header_name&amp;gt;&lt;/code&gt;: Short description of your issue&#34;. You don&#39;t usually need to mention &lt;code&gt;std::&lt;/code&gt; or C++. For example, &#34;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;: &lt;code&gt;is_cute&lt;/code&gt; should be true for &lt;code&gt;enum class FluffyKittens&lt;/code&gt;&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s okay if you report an apparent STL bug that turns out to be a compiler bug, or surprising-yet-Standard behavior. Just try to follow these rules, so we can spend more time fixing bugs and implementing features.&lt;/p&gt; &#xA;&lt;h1&gt;How To Build With The Visual Studio IDE&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Visual Studio 2022 17.5 Preview 1 or later. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Select &#34;Windows 11 SDK (10.0.22000.0)&#34; in the VS Installer.&lt;/li&gt; &#xA;   &lt;li&gt;We recommend selecting &#34;C++ CMake tools for Windows&#34; in the VS Installer. This will ensure that you&#39;re using supported versions of CMake and Ninja.&lt;/li&gt; &#xA;   &lt;li&gt;Otherwise, install &lt;a href=&#34;https://cmake.org/download&#34;&gt;CMake&lt;/a&gt; 3.24 or later, and &lt;a href=&#34;https://ninja-build.org&#34;&gt;Ninja&lt;/a&gt; 1.11.0 or later.&lt;/li&gt; &#xA;   &lt;li&gt;We recommend selecting &#34;Python 3 64-bit&#34; in the VS Installer.&lt;/li&gt; &#xA;   &lt;li&gt;Otherwise, make sure &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;Python&lt;/a&gt; 3.9 or later is available to CMake.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open Visual Studio, and choose the &#34;Clone or check out code&#34; option. Enter the URL of this repository, &lt;code&gt;https://github.com/microsoft/STL&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal in the IDE with &lt;code&gt;Ctrl + `&lt;/code&gt; (by default) or press on &#34;View&#34; in the top bar, and then &#34;Terminal&#34;.&lt;/li&gt; &#xA; &lt;li&gt;In the terminal, invoke &lt;code&gt;git submodule update --init --progress&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Choose the architecture you wish to build in the IDE, and build as you would any other project. All necessary CMake settings are set by &lt;code&gt;CMakeSettings.json&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;How To Build With A Native Tools Command Prompt&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Visual Studio 2022 17.5 Preview 1 or later. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Select &#34;Windows 11 SDK (10.0.22000.0)&#34; in the VS Installer.&lt;/li&gt; &#xA;   &lt;li&gt;We recommend selecting &#34;C++ CMake tools for Windows&#34; in the VS Installer. This will ensure that you&#39;re using supported versions of CMake and Ninja.&lt;/li&gt; &#xA;   &lt;li&gt;Otherwise, install &lt;a href=&#34;https://cmake.org/download&#34;&gt;CMake&lt;/a&gt; 3.24 or later, and &lt;a href=&#34;https://ninja-build.org&#34;&gt;Ninja&lt;/a&gt; 1.11.0 or later.&lt;/li&gt; &#xA;   &lt;li&gt;We recommend selecting &#34;Python 3 64-bit&#34; in the VS Installer.&lt;/li&gt; &#xA;   &lt;li&gt;Otherwise, make sure &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;Python&lt;/a&gt; 3.9 or later is available to CMake.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open a command prompt.&lt;/li&gt; &#xA; &lt;li&gt;Change directories to a location where you&#39;d like a clone of this STL repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/microsoft/STL --recurse-submodules&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To build the x86 target:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open an &#34;x86 Native Tools Command Prompt for VS 2022 Preview&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Change directories to the previously cloned &lt;code&gt;STL&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake -G Ninja -S . -B out\build\x86&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ninja -C out\build\x86&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To build the x64 target (recommended):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open an &#34;x64 Native Tools Command Prompt for VS 2022 Preview&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Change directories to the previously cloned &lt;code&gt;STL&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake -G Ninja -S . -B out\build\x64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ninja -C out\build\x64&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;How To Consume&lt;/h1&gt; &#xA;&lt;p&gt;Consumption of the built library is largely based on the build system you&#39;re using. There are at least 2 directories you need to hook up. Assuming you built the x64 target with the Visual Studio IDE, with the STL repository cloned to &lt;code&gt;C:\Dev\STL&lt;/code&gt;, build outputs will end up at &lt;code&gt;C:\Dev\STL\out\build\x64\out&lt;/code&gt;. Ensure that the &lt;code&gt;inc&lt;/code&gt; directory is searched for headers, and that &lt;code&gt;lib\{architecture}&lt;/code&gt; is searched for link libraries, before any defaults supplied by MSVC. The names of the import and static libraries are the same as those that ship with MSVC. As a result, the compiler &lt;code&gt;/MD&lt;/code&gt;, &lt;code&gt;/MDd&lt;/code&gt;, &lt;code&gt;/MT&lt;/code&gt;, or &lt;code&gt;/MTd&lt;/code&gt; switches will work without modification of your build scripts or command-line muscle memory.&lt;/p&gt; &#xA;&lt;p&gt;Should you choose to use the DLL flavors, the DLLs to deploy are built to &lt;code&gt;bin\{architecture}&lt;/code&gt;. Note that the DLLs generated by the CMake build system here have a suffix, defaulting to &lt;code&gt;_oss&lt;/code&gt;, which distinguishes them from the binaries that ship with MSVC. That avoids any conflict with the DLLs installed by the &lt;a href=&#34;https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads&#34;&gt;redistributables&lt;/a&gt; into System32, and ensures that other components wanting to be a &#34;guest in your process&#34;, like print drivers and shell extensions, see the export surface of the STL they were built with. Otherwise, the &#34;&lt;code&gt;msvcp140.dll&lt;/code&gt;&#34; you deployed in the same directory as your .exe would &#34;win&#34; over the versions in System32.&lt;/p&gt; &#xA;&lt;h2&gt;Complete Example Using x64 DLL Flavor&lt;/h2&gt; &#xA;&lt;p&gt;The compiler looks for include directories according to the &lt;code&gt;INCLUDE&lt;/code&gt; environment variable, and the linker looks for import library directories according to the &lt;code&gt;LIB&lt;/code&gt; environment variable, and the Windows loader will (eventually) look for DLL dependencies according to directories in the &lt;code&gt;PATH&lt;/code&gt; environment variable. From an &#34;x64 Native Tools Command Prompt for VS 2022 Preview&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Users\username\Desktop&amp;gt;set INCLUDE=C:\Dev\STL\out\build\x64\out\inc;%INCLUDE%&#xA;&#xA;C:\Users\username\Desktop&amp;gt;set LIB=C:\Dev\STL\out\build\x64\out\lib\amd64;%LIB%&#xA;&#xA;C:\Users\username\Desktop&amp;gt;set PATH=C:\Dev\STL\out\build\x64\out\bin\amd64;%PATH%&#xA;&#xA;C:\Users\username\Desktop&amp;gt;type example.cpp&#xA;#include &amp;lt;iostream&amp;gt;&#xA;&#xA;int main() {&#xA;    std::cout &amp;lt;&amp;lt; &#34;Hello STL OSS world!\n&#34;;&#xA;}&#xA;&#xA;C:\Users\username\Desktop&amp;gt;cl /nologo /EHsc /W4 /WX /MDd /std:c++latest .\example.cpp&#xA;example.cpp&#xA;&#xA;C:\Users\username\Desktop&amp;gt;.\example.exe&#xA;Hello STL OSS world!&#xA;&#xA;C:\Users\username\Desktop&amp;gt;dumpbin /IMPORTS .\example.exe | findstr msvcp&#xA;    msvcp140d_oss.dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;How To Run The Tests With A Native Tools Command Prompt&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow either &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/STL/main/#how-to-build-with-a-native-tools-command-prompt&#34;&gt;How To Build With A Native Tools Command Prompt&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/STL/main/#how-to-build-with-the-visual-studio-ide&#34;&gt;How To Build With The Visual Studio IDE&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Acquire &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;Python&lt;/a&gt; 3.9 or newer and have it on the &lt;code&gt;PATH&lt;/code&gt; (or run it directly using its absolute or relative path).&lt;/li&gt; &#xA; &lt;li&gt;Have LLVM&#39;s &lt;code&gt;bin&lt;/code&gt; directory on the &lt;code&gt;PATH&lt;/code&gt; (so &lt;code&gt;clang-cl.exe&lt;/code&gt; is available). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We recommend selecting &#34;C++ Clang tools for Windows&#34; in the VS Installer. This will automatically add LLVM to the &lt;code&gt;PATH&lt;/code&gt; of the x86 and x64 Native Tools Command Prompts, and will ensure that you&#39;re using a supported version.&lt;/li&gt; &#xA;   &lt;li&gt;Otherwise, use &lt;a href=&#34;https://releases.llvm.org/download.html&#34;&gt;LLVM&#39;s installer&lt;/a&gt; and choose to add LLVM to your &lt;code&gt;PATH&lt;/code&gt; during installation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Follow the instructions below.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running All The Tests&lt;/h2&gt; &#xA;&lt;p&gt;After configuring and building the project, running &lt;code&gt;ctest&lt;/code&gt; from the build output directory will run all the tests. CTest will only display the standard error output of tests that failed. In order to get more details from CTest&#39;s &lt;code&gt;lit&lt;/code&gt; invocations, run the tests with &lt;code&gt;ctest -V&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running A Subset Of The Tests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;${PROJECT_BINARY_DIR}\tests\utils\stl-lit\stl-lit.py&lt;/code&gt; can be invoked on a subdirectory of a testsuite and will execute all the tests under that subdirectory. This can mean executing the entirety of a single testsuite, running all tests under a category in libcxx, or running a single test in &lt;code&gt;std&lt;/code&gt; and &lt;code&gt;tr1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;These examples assume that your current directory is &lt;code&gt;C:\Dev\STL\out\build\x64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This command will run all of the testsuites with verbose output. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ctest -V&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;This command will also run all of the testsuites. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;python tests\utils\stl-lit\stl-lit.py ..\..\..\llvm-project\libcxx\test ..\..\..\tests\std ..\..\..\tests\tr1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;This command will run all of the std testsuite. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;python tests\utils\stl-lit\stl-lit.py ..\..\..\tests\std&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you want to run a subset of a testsuite, you need to point it to the right place in the sources. The following will run the single test found under VSO_0000000_any_calling_conventions. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;python tests\utils\stl-lit\stl-lit.py ..\..\..\tests\std\tests\VSO_0000000_any_calling_conventions&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can invoke &lt;code&gt;stl-lit&lt;/code&gt; with any arbitrary subdirectory of a testsuite. In libcxx this allows you to have finer control over what category of tests you would like to run. The following will run all the libcxx map tests. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;python tests\utils\stl-lit\stl-lit.py ..\..\..\llvm-project\libcxx\test\std\containers\associative\map&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Interpreting The Results Of Tests&lt;/h2&gt; &#xA;&lt;h3&gt;CTest&lt;/h3&gt; &#xA;&lt;p&gt;When running the tests via CTest, all of the testsuites are considered to be a single test. If any single test in a testsuite fails, CTest will simply report that the &lt;code&gt;stl&lt;/code&gt; test failed.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0% tests passed, 1 tests failed out of 1&#xA;&#xA;Total Test time (real) = 2441.55 sec&#xA;&#xA;The following tests FAILED:&#xA;      1 - stl (Failed)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The primary utility of CTest in this case is to conveniently invoke &lt;code&gt;stl-lit.py&lt;/code&gt; with the correct set of arguments.&lt;/p&gt; &#xA;&lt;p&gt;CTest will output everything that was sent to stderr for each of the failed testsuites, which can be used to identify which individual test within the testsuite failed. It can sometimes be helpful to run CTest with the &lt;code&gt;-V&lt;/code&gt; option in order to see the stdout of the tests.&lt;/p&gt; &#xA;&lt;h3&gt;stl-lit&lt;/h3&gt; &#xA;&lt;p&gt;When running the tests directly via the generated &lt;code&gt;stl-lit.py&lt;/code&gt; script the result of each test will be printed. The format of each result is &lt;code&gt;{Result Code}: {Testsuite Name} :: {Test Name}:{Configuration Number}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- Testing: 28 tests, 12 workers --&#xA;PASS: tr1 :: tests/cwchar1:01 (1 of 28)&#xA;PASS: tr1 :: tests/cwchar1:11 (2 of 28)&#xA;PASS: tr1 :: tests/cwchar1:02 (3 of 28)&#xA;PASS: tr1 :: tests/cwchar1:03 (4 of 28)&#xA;PASS: tr1 :: tests/cwchar1:00 (5 of 28)&#xA;PASS: tr1 :: tests/cwchar1:04 (6 of 28)&#xA;PASS: tr1 :: tests/cwchar1:05 (7 of 28)&#xA;PASS: tr1 :: tests/cwchar1:09 (8 of 28)&#xA;PASS: tr1 :: tests/cwchar1:06 (9 of 28)&#xA;UNSUPPORTED: tr1 :: tests/cwchar1:20 (10 of 28)&#xA;UNSUPPORTED: tr1 :: tests/cwchar1:21 (11 of 28)&#xA;UNSUPPORTED: tr1 :: tests/cwchar1:22 (12 of 28)&#xA;UNSUPPORTED: tr1 :: tests/cwchar1:23 (13 of 28)&#xA;UNSUPPORTED: tr1 :: tests/cwchar1:24 (14 of 28)&#xA;PASS: tr1 :: tests/cwchar1:07 (15 of 28)&#xA;PASS: tr1 :: tests/cwchar1:08 (16 of 28)&#xA;PASS: tr1 :: tests/cwchar1:10 (17 of 28)&#xA;PASS: tr1 :: tests/cwchar1:16 (18 of 28)&#xA;PASS: tr1 :: tests/cwchar1:17 (19 of 28)&#xA;PASS: tr1 :: tests/cwchar1:14 (20 of 28)&#xA;PASS: tr1 :: tests/cwchar1:12 (21 of 28)&#xA;PASS: tr1 :: tests/cwchar1:13 (22 of 28)&#xA;PASS: tr1 :: tests/cwchar1:19 (23 of 28)&#xA;PASS: tr1 :: tests/cwchar1:18 (24 of 28)&#xA;PASS: tr1 :: tests/cwchar1:15 (25 of 28)&#xA;PASS: tr1 :: tests/cwchar1:25 (26 of 28)&#xA;PASS: tr1 :: tests/cwchar1:26 (27 of 28)&#xA;PASS: tr1 :: tests/cwchar1:27 (28 of 28)&#xA;&#xA;Testing Time: 3.96s&#xA;  Expected Passes    : 23&#xA;  Unsupported Tests  : 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above example we see that 23 tests succeeded and 5 were unsupported.&lt;/p&gt; &#xA;&lt;h3&gt;Result Code Values&lt;/h3&gt; &#xA;&lt;p&gt;Our tests use the standard &lt;a href=&#34;https://llvm.org/docs/CommandGuide/lit.html#test-status-results&#34;&gt;lit result codes&lt;/a&gt;, and an undocumented result code: &lt;code&gt;SKIPPED&lt;/code&gt;. For our tests, only the &lt;code&gt;PASS&lt;/code&gt;, &lt;code&gt;XFAIL&lt;/code&gt;, &lt;code&gt;XPASS&lt;/code&gt;, &lt;code&gt;FAIL&lt;/code&gt;, &lt;code&gt;UNSUPPORTED&lt;/code&gt;, and &lt;code&gt;SKIPPED&lt;/code&gt; result codes are relevant.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;PASS&lt;/code&gt; and &lt;code&gt;FAIL&lt;/code&gt; result codes are self-explanatory. We want our tests to &lt;code&gt;PASS&lt;/code&gt; and not &lt;code&gt;FAIL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;XPASS&lt;/code&gt; and &lt;code&gt;XFAIL&lt;/code&gt; result codes are less obvious. &lt;code&gt;XPASS&lt;/code&gt; is actually a failure result and indicates that we expected a test to fail but it passed. &lt;code&gt;XFAIL&lt;/code&gt; is a successful result and indicates that we expected the test to fail and it did. Typically an &lt;code&gt;XPASS&lt;/code&gt; result means that the &lt;code&gt;expected_results.txt&lt;/code&gt; file for the testsuite needs to be modified. If the &lt;code&gt;XPASS&lt;/code&gt; result is a test legitimately passing, the usual course of action would be to remove a &lt;code&gt;FAIL&lt;/code&gt; entry from the &lt;code&gt;expected_results.txt&lt;/code&gt;. However, some tests from &lt;code&gt;libcxx&lt;/code&gt; mark themselves as &lt;code&gt;XFAIL&lt;/code&gt; (meaning they expect to fail) for features they have added tests for but have yet to implement in &lt;code&gt;libcxx&lt;/code&gt;. If the STL implements those features first the tests will begin passing unexpectedly for us and return &lt;code&gt;XPASS&lt;/code&gt; results. In order to resolve this it is necessary to add a &lt;code&gt;PASS&lt;/code&gt; entry to the &lt;code&gt;expected_results.txt&lt;/code&gt; of the testsuite in question.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;UNSUPPORTED&lt;/code&gt; result code means that the requirements for a test are not met and so it will not be run. Currently all tests which use the &lt;code&gt;/clr&lt;/code&gt; or &lt;code&gt;/clr:pure&lt;/code&gt; options are unsupported. Also, the &lt;code&gt;/BE&lt;/code&gt; option is unsupported for x86.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;SKIPPED&lt;/code&gt; result code indicates that a given test was explicitly skipped by adding a &lt;code&gt;SKIPPED&lt;/code&gt; entry to the &lt;code&gt;expected_results.txt&lt;/code&gt;. A test may be skipped for a number of reasons, which include, but are not limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;being an incorrect test&lt;/li&gt; &#xA; &lt;li&gt;taking a very long time to run&lt;/li&gt; &#xA; &lt;li&gt;failing or passing for the incorrect reason&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debugging Individual Tests&lt;/h3&gt; &#xA;&lt;p&gt;While &lt;code&gt;stl-lit&lt;/code&gt; is super awesome in finding out that &lt;em&gt;something&lt;/em&gt; is wrong or not even compiling, it is not really helpful in debugging &lt;em&gt;what&lt;/em&gt; is going wrong. However, debugging individual tests is rather simple given some additional steps. Let&#39;s assume we want to debug a new feature with tests located in &lt;code&gt;tests\std\tests\GH_XXXX_meow&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As always, build the STL from your branch and run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\STL\out\build\x64&amp;gt; ninja&#xA;C:\STL\out\build\x64&amp;gt; python tests\utils\stl-lit\stl-lit.py -v C:\STL\tests\std\tests\GH_XXXX_meow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s assume one of the tests fails an assert and we want to debug that configuration. &lt;code&gt;stl-lit&lt;/code&gt; will conveniently print the build command, which is far too long to provide here in full. The important part is to add the following options to provide debug symbols: &lt;code&gt;/Zi /Fdbark.pdb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can replace &lt;code&gt;bark&lt;/code&gt; with any descriptive name you like. Add these before the &lt;code&gt;&#34;-link&#34;&lt;/code&gt; option in the command line and recompile. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\STL\out\build\x64&amp;gt;cl &#34;C:\STL\tests\std\tests\GH_XXXX_meow\test.cpp&#34; [... more arguments ...]&#xA;&#34;-FeC:\STL\out\build\x64\tests\std\tests\GH_XXXX_meow\Output\02\GH_XXXX_meow.exe&#34; /Zi /Fdbark.pdb &#34;-link&#34;&#xA;[... more arguments ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now start debugging the test via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;devenv &#34;C:\STL\out\build\x64\tests\std\tests\GH_XXXX_meow\Output\02\GH_XXXX_meow.exe&#34;&#xA;       &#34;C:\STL\tests\std\tests\GH_XXXX_meow\test.cpp&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, this might not work right away, as Visual Studio may complain about a missing &lt;code&gt;msvcp140_oss.dll&lt;/code&gt;. The reason is that the STL builds those and other DLLs itself and we should under no circumstances overwrite the installed ones. If you are testing one of the configurations with dynamic linkage (&lt;code&gt;/MD&lt;/code&gt; or &lt;code&gt;/MDd&lt;/code&gt;) the easiest solution is to add the build folder to your path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set PATH=C:\STL\out\build\x64\out\bin\amd64;%PATH%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Benchmarking&lt;/h1&gt; &#xA;&lt;p&gt;For performance-sensitive code – containers, algorithms, and the like – you may wish to write and/or run benchmarks, and the STL team will likely run any benchmarks we do have in our PR process. Additionally, if you are writing a &#34;performance improvement&#34; PR, please add and run benchmarks to show that the PR does, in fact, improve performance.&lt;/p&gt; &#xA;&lt;p&gt;The benchmarking code is located in &lt;code&gt;benchmarks&lt;/code&gt;. Adding a new benchmark is as easy as adding a new file to &lt;code&gt;benchmarks/src&lt;/code&gt;, and then adding &lt;code&gt;add_benchmark(&amp;lt;name&amp;gt; &amp;lt;source_file&amp;gt;)&lt;/code&gt; to &lt;code&gt;benchmarks/CMakeLists.txt&lt;/code&gt;. You may also modify an existing benchmark file. We use Google&#39;s &lt;a href=&#34;https://github.com/google/benchmark&#34;&gt;Benchmark&lt;/a&gt; library, so you may find &lt;a href=&#34;https://github.com/google/benchmark/raw/main/docs/user_guide.md&#34;&gt;their documentation&lt;/a&gt; helpful, and you can also read the existing code for how &lt;em&gt;we&lt;/em&gt; use it.&lt;/p&gt; &#xA;&lt;p&gt;To run benchmarks, you&#39;ll need to first build the STL, then build the benchmarks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;cmake -B out\x64 -S . -G Ninja&#xA;cmake --build out\x64&#xA;cmake -B out\benchmark -S benchmarks -G Ninja -DSTL_BINARY_DIR=out\x64&#xA;cmake --build out\benchmark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then run your benchmark with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;out\benchmark\benchmark-&amp;lt;benchmark-name&amp;gt; --benchmark_out=&amp;lt;file&amp;gt; --benchmark_out_format=csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then you can copy this csv file into Excel, or another spreadsheet program. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;out\bench\benchmarks\benchmark-std_copy --benchmark_out=benchmark-std_copy-results.csv --benchmark_out_format=csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see all the other flags you can pass, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;out\bench\benchmarks\benchmark-&amp;lt;benchmark-name&amp;gt; --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Editing And Testing The Debugger Visualizer&lt;/h1&gt; &#xA;&lt;h3&gt;Modify The Visualizer&lt;/h3&gt; &#xA;&lt;p&gt;To modify how components are visualized in the debugger, edit the file &lt;code&gt;stl\debugger\STL.natvis&lt;/code&gt;. For more information on how to modify this file, check the &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects&#34;&gt;natvis documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Test Your Changes&lt;/h3&gt; &#xA;&lt;p&gt;You can add the natvis file to any Visual Studio C++ project if you right click your project &amp;gt; Add &amp;gt; Existing Item and select the STL.natvis file. After doing this you should be able to see your changes in a Visual Studio debugging session.&lt;/p&gt; &#xA;&lt;h1&gt;Block Diagram&lt;/h1&gt; &#xA;&lt;p&gt;The STL is built atop other compiler support libraries that ship with Windows and Visual Studio, like the UCRT, VCRuntime, and VCStartup. The following diagram describes the dependencies between those components and their ship vehicles.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart TB&#xA;    classDef default text-align:left&#xA;    subgraph VisualStudioSubgraph[Visual Studio]&#xA;        direction TB&#xA;        STLNode(&#34;&amp;lt;b&amp;gt;STL&amp;lt;/b&amp;gt;&#xA;        This repo; provides C++ Standard Library headers, separately&#xA;        compiled implementations of most of the iostreams functionality,&#xA;        and a few runtime support components like std::exception_ptr.&#34;)&#xA;        subgraph VCRuntimeSubgraph[VCRuntime]&#xA;            direction TB&#xA;            VCStartupNode(&#34;&amp;lt;b&amp;gt;VCStartup&amp;lt;/b&amp;gt;&#xA;            Provides compiler support mechanisms that&#xA;            live in each binary; such as machinery to&#xA;            call constructors and destructors for global&#xA;            variables, the entry point, and the /GS cookie.&#xA;&#xA;            Merged into static and import libraries of VCRuntime.&#34;)&#xA;            VCRuntimeNode(&#34;&amp;lt;b&amp;gt;VCRuntime&amp;lt;/b&amp;gt;&#xA;            Provides compiler support mechanisms that can be&#xA;            shared between binaries; code that the compiler calls&#xA;            on your behalf, such as the C++ exception handling&#xA;            runtime, string.h intrinsics, math intrinsics, and&#xA;            declarations for CPU-vendor-specific intrinsics.&#34;)&#xA;        end&#xA;    end&#xA;    subgraph WindowsSDKSubgraph[Windows SDK]&#xA;        UniversalCRTNode(&#34;&amp;lt;b&amp;gt;Universal CRT&amp;lt;/b&amp;gt;&#xA;        Windows component that provides C library support, such as printf,&#xA;        C locales, and some POSIX-like shims for the Windows API, like _stat.&#34;)&#xA;    end&#xA;    STLNode ==&amp;gt; VCRuntimeSubgraph &amp;amp; UniversalCRTNode&#xA;    VCStartupNode ==&amp;gt; VCRuntimeNode ==&amp;gt; UniversalCRTNode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/STL/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Code Of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) Microsoft Corporation.&lt;/p&gt; &#xA;&lt;p&gt;SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception&lt;/p&gt;</summary>
  </entry>
</feed>