<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-04T01:31:57Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TheAlgorithms/C-Plus-Plus</title>
    <updated>2022-10-04T01:31:57Z</updated>
    <id>tag:github.com,2022-10-04:/TheAlgorithms/C-Plus-Plus</id>
    <link href="https://github.com/TheAlgorithms/C-Plus-Plus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collection of various algorithms in mathematics, machine learning, computer science and physics implemented in C++ for educational purposes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Algorithms - C++ # {#mainpage}&lt;/h1&gt; &#xA;&lt;!-- the suffix in the above line is required for doxygen to consider this as the index page of the generated documentation site --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/TheAlgorithms/C-Plus-Plus&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/TheAlgorithms/C-Plus-Plus/context:cpp&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/cpp/g/TheAlgorithms/C-Plus-Plus.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: C/C++&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TheAlgorithms/C-Plus-Plus/actions/workflows/codeql_analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/TheAlgorithms/C-Plus-Plus/actions/workflows/codeql_analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;CodeQL CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/TheAlgorithms&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Chat-Gitter-ff69b4.svg?label=Chat&amp;amp;logo=gitter&amp;amp;style=flat-square&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TheAlgorithms/C-Plus-Plus/raw/master/CONTRIBUTING.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?label=Contributions&amp;amp;message=Welcome&amp;amp;color=0059b3&amp;amp;style=flat-square&#34; alt=&#34;contributions welcome&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/TheAlgorithms/C-Plus-Plus?color=red&amp;amp;style=flat-square&#34; alt=&#34;GitHub repo size&#34;&gt; &lt;a href=&#34;https://TheAlgorithms.github.io/C-Plus-Plus&#34;&gt;&lt;img src=&#34;https://github.com/TheAlgorithms/C-Plus-Plus/workflows/Doxygen%20CI/badge.svg?sanitize=true&#34; alt=&#34;Doxygen CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TheAlgorithms/C-Plus-Plus/actions?query=workflow%3A%22Awesome+CI+Workflow%22&#34;&gt;&lt;img src=&#34;https://github.com/TheAlgorithms/C-Plus-Plus/workflows/Awesome%20CI%20Workflow/badge.svg?sanitize=true&#34; alt=&#34;Awesome CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/TheAlgorithms&#34;&gt;&lt;img src=&#34;https://img.shields.io/liberapay/receives/TheAlgorithms.svg?logo=liberapay&#34; alt=&#34;Income&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/c7MnfGFGa6&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/808045925556682782.svg?logo=discord&amp;amp;colorB=5865F2&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/TheAlgorithms/donate&#34;&gt;&lt;img src=&#34;https://liberapay.com/assets/widgets/donate.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This repository is a collection of open-source implementation of a variety of algorithms implemented in C++ and licensed under &lt;a href=&#34;https://github.com/TheAlgorithms/C-Plus-Plus/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;. These algorithms span a variety of topics from computer science, mathematics and statistics, data science, machine learning, engineering, etc.. The implementations and the associated documentation are meant to provide a learning resource for educators and students. Hence, one may find more than one implementation for the same objective but using a different algorithm strategies and optimizations.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The repository provides implementations of various algorithms in one of the most fundamental general purpose languages - &lt;a href=&#34;https://en.wikipedia.org/wiki/C%2B%2B&#34;&gt;C++&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Well documented source code with detailed explanations provide a valuable resource for educators and students alike.&lt;/li&gt; &#xA; &lt;li&gt;Each source code is atomic using &lt;a href=&#34;https://en.wikipedia.org/wiki/Standard_Template_Library&#34;&gt;STL classes&lt;/a&gt; and &lt;em&gt;no external libraries&lt;/em&gt; are required for their compilation and execution. Thus, the fundamentals of the algorithms can be studied in much depth.&lt;/li&gt; &#xA; &lt;li&gt;Source codes are &lt;a href=&#34;https://github.com/TheAlgorithms/C-Plus-Plus/actions?query=workflow%3A%22Awesome+CI+Workflow%22&#34;&gt;compiled and tested&lt;/a&gt; for every commit on the latest versions of three major operating systems viz., Windows, MacOS and Ubuntu (Linux) using MSVC 16 2019, AppleClang 11.0 and GNU 7.5.0 respectively.&lt;/li&gt; &#xA; &lt;li&gt;Strict adherence to &lt;a href=&#34;https://en.wikipedia.org/wiki/C%2B%2B11&#34;&gt;C++11&lt;/a&gt; standard ensures portability of code to embedded systems as well like ESP32, ARM Cortex, etc. with little to no changes.&lt;/li&gt; &#xA; &lt;li&gt;Self-checks within programs ensure correct implementations with confidence.&lt;/li&gt; &#xA; &lt;li&gt;Modular implementations and OpenSource licensing enable the functions to be utilized conveniently in other applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://TheAlgorithms.github.io/C-Plus-Plus&#34;&gt;Online Documentation&lt;/a&gt; is generated from the repository source codes directly. The documentation contains all resources including source code snippets, details on execution of the programs, diagrammatic representation of program flow, and links to external resources where necessary. The documentation also introduces interactive source code with links to documentation for C++ STL library functions used. Click on &lt;a href=&#34;https://TheAlgorithms.github.io/C-Plus-Plus/files.html&#34;&gt;Files menu&lt;/a&gt; to see the list of all the files documented with the code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://thealgorithms.github.io/C-Plus-Plus&#34;&gt;Documentation of Algorithms in C++&lt;/a&gt; by &lt;a href=&#34;https://github.com/TheAlgorithms/C-Plus-Plus/graphs/contributors&#34;&gt;The Algorithms Contributors&lt;/a&gt; is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1&#34;&gt;CC BY-SA 4.0&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0&#34;&gt;&lt;img alt=&#34;Creative Commons License&#34; style=&#34;height:22px!important;margin-left: 3px;vertical-align:text-bottom;&#34; src=&#34;https://mirrors.creativecommons.org/presskit/icons/cc.svg?sanitize=true&#34;&gt;&lt;img alt=&#34;Credit must be given to the creator&#34; style=&#34;height:22px!important;margin-left: 3px;vertical-align:text-bottom;&#34; src=&#34;https://mirrors.creativecommons.org/presskit/icons/by.svg?sanitize=true&#34;&gt;&lt;img alt=&#34;Adaptations must be shared under the same terms&#34; style=&#34;height:22px!important;margin-left: 3px;vertical-align:text-bottom;&#34; src=&#34;https://mirrors.creativecommons.org/presskit/icons/sa.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;As a community developed and maintained repository, we welcome new un-plagiarized quality contributions. Please read our &lt;a href=&#34;https://github.com/TheAlgorithms/C-Plus-Plus/raw/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ossamamehmood/Hacktoberfest2022</title>
    <updated>2022-10-04T01:31:57Z</updated>
    <id>tag:github.com,2022-10-04:/ossamamehmood/Hacktoberfest2022</id>
    <link href="https://github.com/ossamamehmood/Hacktoberfest2022" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hacktoberfest 2022 OPEN FIRST Pull Request - FREE T-SHIRTðŸŽ‰&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hacktoberfest 2022 &lt;code&gt;OPEN FIRST&lt;/code&gt; Pull Request - &lt;code&gt;FREE T-SHIRT&lt;/code&gt;ðŸŽ‰&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ossamamehmood/Hacktoberfest2022/main/static/logo.png&#34; alt=&#34;Hacktoberfest 2021&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors of &lt;code&gt;Hacktoberfest 2022&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/ossamamehmood/Hacktoberfest2022/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=ossamamehmood/Hacktoberfest2022&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;This project is perfect for your first pull request&lt;/h2&gt; &#xA;&lt;p&gt;ðŸ—£ &lt;strong&gt;Hacktoberfest encourages participation in the open source community, which grows bigger every year. Complete the challenge and earn a limited edition T-shirt.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;ðŸ“¢ &lt;strong&gt;Register &lt;a href=&#34;https://hacktoberfest.digitalocean.com&#34;&gt;here&lt;/a&gt; for Hacktoberfest and make four pull requests (PRs) between October 1st-31st to grab free SWAGS ðŸ”¥.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/hacktoberfest-2022-blueviolet&#34; alt=&#34;Hacktober Badge&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/static/v1?label=%F0%9F%8C%9F&amp;amp;message=If%20Useful&amp;amp;style=style=flat&amp;amp;color=BC4E99&#34; alt=&#34;Star Badge&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/ossamamehmood&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributions-welcome-violet.svg?style=flat&amp;amp;logo=git&#34; alt=&#34;Contributions&#34;&gt;&lt;/a&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/ossamamehmood/hacktoberfest2022/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/ossamamehmood/hacktoberfest2022&#34; alt=&#34;Pull Requests Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ossamamehmood/hacktoberfest2022/graphs/contributors&#34;&gt;&lt;img alt=&#34;GitHub contributors&#34; src=&#34;https://img.shields.io/github/contributors/ossamamehmood/hacktoberfest2022?color=2b9348&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ossamamehmood/hacktoberfest2022/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/ossamamehmood/hacktoberfest2022?color=2b9348&#34; alt=&#34;License Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork this Repository using the button at the top on right corner.&lt;/li&gt; &#xA; &lt;li&gt;Clone your forked repository to your pc ( git clone &#34;url from clone option&#34;.)&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch for your modifications (ie. &lt;code&gt;git branch new-user&lt;/code&gt; and check it out &lt;code&gt;git checkout new-user&lt;/code&gt; or simply do &lt;code&gt;git checkout -b new-user&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Add your profile image in &lt;code&gt;static/images/&lt;/code&gt; ( use drag and drop option or upload by commands.)&lt;/li&gt; &#xA; &lt;li&gt;Add your profile data in &lt;code&gt;content/participant/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add your files (&lt;code&gt;git add -A&lt;/code&gt;), commit (&lt;code&gt;git commit -m &#34;added myself&#34;&lt;/code&gt;) and push (&lt;code&gt;git push origin new-user&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create a pull request&lt;/li&gt; &#xA; &lt;li&gt;Star this repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to make your first Pull Request&lt;/h1&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;&amp;lt;YOUR-USERNAME&amp;gt;&lt;/code&gt; with your GitHub username in this guide.&lt;/p&gt; &#xA;&lt;h2&gt;1. Add your profile picture to the folder&lt;/h2&gt; &#xA;&lt;p&gt;Add a picture picture of your choice in &lt;code&gt;static/images/&lt;/code&gt;. Accepted files are &lt;strong&gt;png&lt;/strong&gt; and &lt;strong&gt;jpg&lt;/strong&gt;, should be squared and minimum size 544x544 pixels. Ex.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;static/images/&amp;lt;YOUR-USERNAME&amp;gt;.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2. Add your profile information&lt;/h2&gt; &#xA;&lt;p&gt;Create a markdown file in your folder following the convention &lt;code&gt;content/participant/&amp;lt;YOUR-USERNAME&amp;gt;.md&lt;/code&gt;. Ex.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;content/participant/&amp;lt;YOUR-USERNAME&amp;gt;.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the next template into your file, delete the boilerplate data and fill the information with yours.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;---&#xA;name: YOURNAME&#xA;institution/company: INSTITUTION_NAME&#xA;github:USERNAME&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h2&gt; OR &lt;/h2&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;3. Create / Upload Your Code / Algorithms&lt;/h2&gt; &#xA;&lt;p&gt;Create/Upload your code in folder following the convention &lt;code&gt;Add Code Here&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Choose an extact lanaguage folder &lt;code&gt;drop your code&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Below is &lt;code&gt;an example&lt;/code&gt; to add file properly&lt;/li&gt; &#xA; &lt;li&gt;You can follow up &lt;code&gt;any languages&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;Add Code Here/PYTHON/&amp;lt;YOUR-FILERNAME&amp;gt;.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Add Code Here/C++/&amp;lt;YOUR-FILERNAME&amp;gt;.cpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can follow any pathway a &lt;code&gt;code&lt;/code&gt; or &lt;code&gt;profile information&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4. Wait for Pull Request to merge&lt;/h2&gt; &#xA;&lt;h2&gt;5. Celebrate - you&#39;ve done your first pull request!!!!!&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&#39;&#39;&#39;&#xA;Always make more then 4 pull requests.&#xA;Lets say you have made only 4 pull request to different projects,&#xA;but one project is excluded from hackoctoberfest event then your pull request will not be counted and &#xA;then you have remaining 3 valid pull requests if these projects is not excluded.&#xA;If you fail to make 4 pull requests then you can&#39;t get swags or t-shirts.&#xA;I will recommend you to make pull request to your own repo which is very very safest side for you..&#xA;keep in mind that repo has hacktoberfest topic..&#xA;&#39;&#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;+ Follow Me : } Quick Approval of Pull Request&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&#39;&#39;&#39;&#xA;To get approval of the pull request much quicker and faster (`Follow Me`)ðŸš€&#xA;&#39;&#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a href=&#34;https://github.com/ossamamehmood&#34;&gt;&lt;kbd&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/ossamamehmood?size=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;/kbd&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ossama Mehmood&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&#xA;&lt;br&gt;</summary>
  </entry>
  <entry>
    <title>epasveer/seer</title>
    <updated>2022-10-04T01:31:57Z</updated>
    <id>tag:github.com,2022-10-04:/epasveer/seer</id>
    <link href="https://github.com/epasveer/seer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Seer - a gui frontend to gdb&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Seer - a gui frontend to gdb for Linux. (Ernie Pasveer &lt;a href=&#34;mailto:epasveer@att.net&#34;&gt;epasveer@att.net&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;This project is actively worked on. The aim is a simple, yet pleasing gui to gdb.&lt;/p&gt; &#xA;&lt;p&gt;Please report any bugs or desired features to my email or create a task in my github project page.&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Linux&#xA;* C++17&#xA;* gdb with &#34;mi&#34; interpreter&#xA;* QT5 (5.15.2 or newer)&#xA;* QT5 QtCharts (5.15.2 or newer)&#xA;* QT5.12 is supported but has certain limitations.&#xA;* When building Seer from source, you will need the QT5 &#34;devel&#34; packages&#xA;  installed on your system for your distribution.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;NOTE&lt;/h1&gt; &#xA;&lt;p&gt;As of the v1.9 release, &lt;strong&gt;the Seer binary is now named &#39;seergdb&#39;&lt;/strong&gt;. Previously it was named &#39;seer&#39;. This is to remove a possibly confusion with an existing project with the same name. And, hopefully, will allow easier packaging of Seer into distributions.&lt;/p&gt; &#xA;&lt;h1&gt;GUI overview&lt;/h1&gt; &#xA;&lt;p&gt;Examples of the various Seer views and dialogs.&lt;/p&gt; &#xA;&lt;h2&gt;Main View&lt;/h2&gt; &#xA;&lt;p&gt;The main view for Seer looks like: &lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/mainview.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Source/Function/Types/Variables/Libraries&#xA;    * The list of source/header files that were used in the program.&#xA;    * Search for Functions, Types, and Static Variables.&#xA;      Dobule clicking will open the source file.&#xA;    * The list of shared libraries referenced by the program.&#xA;    * The list of source/header files can be searched in. This will &#34;shrink&#34; the list of files shown.&#xA;    * Double clicking on a file will open it in the Code Manager.&#xA;&#xA;* Variable/Register Info&#xA;    * Show variable and register values.&#xA;    * &#34;Logger&#34; - log the value of a variable. Manually enter it or double click on the variable in the file&#xA;      that is opened in the code manager.&#xA;    * &#34;Tracker&#34; - create a list of variables to show the value for whenever gdb reaches a stopping point.&#xA;      (step, next, finish, etc.) When the stopping point is reached, all variables in the list will show&#xA;      their potentially new value.&#xA;    * &#34;Registers&#34; - show the values of all cpu registgers.&#xA;&#xA;* Code Manager.&#xA;    * The large area of the middle part of the Seer gui.&#xA;    * Source files are opened in this view.&#xA;    * Text in a file can be seached for with ^F.&#xA;    * Variables can be added to the &#34;Logger&#34; by double clicking the variable name.&#xA;      Double click with CTLR key pressed will prepend variable with &#34;*&#34;.&#xA;      Double click with SHIFT key pressed will prepend variable with &#34;&amp;amp;&#34;.&#xA;      Double click with CTRL+SHIFT key pressed will prepend variable with &#34;*&amp;amp;&#34;.&#xA;    * Variables can be added to the &#34;Tracker&#34; by selecting the varible name and RMB and select&#xA;      &#34;Add variable to Tracker&#34;.&#xA;    * Variables can be added to the &#34;Memory Visualizer&#34; by selecting the varible name and RMB and select&#xA;      &#34;Add variable to Memory Visualizer&#34;.&#xA;    * A breakpoint/printpoint can be created by RMB on a specific line.&#xA;    * Can execute to a specific line by RMB on a specific line.&#xA;    * Tabs in this view can be detached by double-clicking a tab.&#xA;&#xA;* Breakpoints, Watchpoints, Catchpoints, Printpoints, manual gdb commands, and logs.&#xA;    * The area below the Code Manager.&#xA;    * Manual commands.  Manually enter a gdb or gdbmi command.&#xA;      The commands are remembered for the next Seer use.&#xA;    * Breakpoint manager. Create and manage breakpoints.&#xA;    * Watchpoint manager. Create and manage watchpoints.&#xA;      A watchpoint monitors when a variable is accessed (read, write, read/write).&#xA;    * Catchpoint manager. Create and manage catchpoints.&#xA;      A catchpoint stops execution on a C++ throw/rethrow/catch call.&#xA;    * Printpoint manager. Create and manage printpoints.&#xA;      A printpoint is like a breakpoint but it allows you to print variables at&#xA;      that printpoint. See gdb&#39;s &#39;dprintf&#39; call.&#xA;    * GDB output. A log of any output from the gdb program itself.&#xA;    * Seer output. A log of any output from the Seer program itself. As diagnostics.&#xA;    * Tabs in this view can be detached by double-clicking a tab.&#xA;&#xA;* Stack frame information.&#xA;    * Stack frame list. A frame can be double clicked to change the scope (the current function).&#xA;    * Stack frame arguments. For each frame, print the arguments passed to each function.&#xA;    * Stack locals. For the current function, print the values of the local variables.&#xA;&#xA;* Thread information.&#xA;    * Thread ids. A list of all threads. Double click on a thread id to change the scope (the current thread).&#xA;    * Thread frames. For each thread, list its stack frames.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Open Dialog&lt;/h2&gt; &#xA;&lt;p&gt;When the open executable dialog is invoked, it looks like this : &lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/opendialog.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Seer Console&lt;/h2&gt; &#xA;&lt;p&gt;All text output from the executable will go to the Seer console. Text input for the executable can be entered via the console too. &lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/console.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Assembly View&lt;/h2&gt; &#xA;&lt;p&gt;Normally Seer will just show the source code as tabs in the Code Manager. The program&#39;s assembly can also be show as a tab.&lt;/p&gt; &#xA;&lt;p&gt;Select &#34;View-&amp;gt;Assembly View&#34; and an extra tab will be shown along side the source code tabs that shows the current assembly being executed. Here is an example. &lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/mainview_assemby.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Like the source code tabs, breakpoints can be set in the assemby tab. The current instruction is highlighted.&lt;/p&gt; &#xA;&lt;p&gt;Double-clicking on entries in the &#34;Breakpoints&#34; tab and the &#34;Stack frames&#34; tab will show the assembly for those addresses.&lt;/p&gt; &#xA;&lt;p&gt;There are &#34;Nexti&#34; and &#34;Stepi&#34; hot-keys, as defined by your config settings. Normally &#34;Ctrl+F5&#34; and &#34;CTRL+F6&#34;. Using &#34;^F&#34; in the assembly tab will show a powerful search bar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The assembly feature in Seer is new. Feel free to suggest changes/features.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Memory Visualizer&lt;/h2&gt; &#xA;&lt;p&gt;When looking at the contents of raw memory in the Memory Visualizer, it looks like this :&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Memory&lt;/th&gt; &#xA;   &lt;th&gt;Disassembly&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/memoryvisualizer.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/memoryvisualizer_asm.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Array Visualizer&lt;/h2&gt; &#xA;&lt;p&gt;When looking at the contents of arrays in the Array Visualizer, it looks like this :&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Normal&lt;/th&gt; &#xA;   &lt;th&gt;Spline&lt;/th&gt; &#xA;   &lt;th&gt;Scatter&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/arrayvisualizer.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/arrayvisualizer_spline.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/arrayvisualizer_scatter.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Two arrays can be used as an X-Y plot. For example, this simple &#39;points&#39; array forms the X-Y outline of a shape.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    int main() {&#xA;        int points[] = {50,1,20,91,97,35,2,35,79,91,50,1};&#xA;        return 0;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;X values&lt;/th&gt; &#xA;   &lt;th&gt;Y values&lt;/th&gt; &#xA;   &lt;th&gt;XY Values&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/arrayvisualizer_x.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/arrayvisualizer_y.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/arrayvisualizer_xy.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Struct Visualizer&lt;/h2&gt; &#xA;&lt;p&gt;When looking at the contents of a C/C++ struct or a C++ class in the Struct Visualizer, it looks like this. This example shows the contents of &#34;*this&#34; for the current C++ class that Seer is in.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/structvisualizer.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Starting Seer&lt;/h1&gt; &#xA;&lt;p&gt;Seer is meant to easily start the program to debug from the command line. gdb has multiple methods for debugging a program. So Seer natually does too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% seergdb --start myprog arg1 arg2                  # Debug myprog with its arguments. Break in main().&#xA;% seergdb --run   myprog arg1 arg2                  # Debug myprog with its arguments. Run it immediately without breaking.&#xA;% seergdb --attach &amp;lt;pid&amp;gt;  myprog                    # Debug myprog by attaching to the currently running pid.&#xA;% seergdb --connect &amp;lt;host:port&amp;gt; myprog              # Debug myprog by connecting to the currently started gdbserver process.&#xA;% seergdb --core &amp;lt;corefile&amp;gt; myprog                  # Debug a corefile for myprog.&#xA;&#xA;% seergdb                                           # Bring up a dialog box to set the program and debug method.&#xA;% seergdb myprog arg1 arg2                          # Bring up a dialog box to set the debug method.&#xA;&#xA;% seergdb --config                                  # Bring up Seer config dialog.&#xA;                                                    # Save settings with &#39;Settings-&amp;gt;Save Configuration&#39;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A breakpoint file can be read for --start and --run modes. This file contains previously saved breakpoints (breakpoints, catchpoints, printpoints, etc.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% seergdb --run --bl myprog.brk  myprog arg1 arg2   # Debug myprog with its arguments.&#xA;                                                    # Run it immediately and break at points describe in&#xA;                                                    # myprog.brk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A breakpoint function can be set for --start and --run modes. The function can be a function name or an address (eg: _start or 0xadad23220)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% seergdb --run --bf _start myprog arg1 arg2        # Debug myprog with its arguments.&#xA;                                                    # Run it immediately and break in the function &#39;_start&#39;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Assembly Tab can be shown for --start and --run modes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% seergdb --start --sat yes myprog arg1 arg2        # Debug myprog with its arguments.&#xA;                                                    # Break in &#34;main&#34; and show the Assemby Tab.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The program&#39;s starting address can be randomizes for --start and --run modes. Normally gdb runs the program with no start address randomization.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% seergdb --start --sar yes  myprog arg1 arg2       # Debug myprog with its arguments.&#xA;                                                    # The program&#39;s start address is randomized.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &#34;-h&#34; for the full Seer help.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% seergdb -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Some of the command line options can be permamently set in the Seer configuration.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% seergdb --config                                  # Bring up Seer config dialog.&#xA;                                                    # Save settings with &#39;Settings-&amp;gt;Save Configuration&#39;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Building Seer&lt;/h1&gt; &#xA;&lt;p&gt;Download the latest code using &#39;clone&#39;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% git clone https://github.com/epasveer/seer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setup cmake and build&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd seer/src&#xA;% mkdir build&#xA;% cd build&#xA;% cmake ..&#xA;&#xA;% make seergdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the Seer binary to your bin directory of choice. One of the below. May need root access.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd seer/src/build&#xA;% cp seergdb ~/bin/seergdb&#xA;% cp seergdb /usr/local/bin/seergdb&#xA;% cp seergdb /usr/bin/seergdb&#xA;% rehash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use the &#39;install&#39; make target. Which will usually copy it to /usr/local/bin. May need root access.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd seer/src/build&#xA;% sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Debian based releases, you can use the normal tooling to build a .deb package containing Seer. You need the &lt;code&gt;build-essential&lt;/code&gt; package installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd seer&#xA;% dpkg-buildpackage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Support/Contact&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Send an email to epasveer@att.net for any bugs or features. Or create a task&#xA;in my github project page.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>