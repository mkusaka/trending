<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-07T01:30:24Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>usetrmnl/trmnl-firmware</title>
    <updated>2025-08-07T01:30:24Z</updated>
    <id>tag:github.com,2025-08-07:/usetrmnl/trmnl-firmware</id>
    <link href="https://github.com/usetrmnl/trmnl-firmware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TRMNL e-ink device firmware&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TRMNL Firmware&lt;/h1&gt; &#xA;&lt;p&gt;created for the &lt;a href=&#34;https://usetrmnl.com&#34;&gt;TRMNL&lt;/a&gt; e-ink display.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Algorithm block scheme&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TB&#xA;&#xA;    Start([&#34;Start&#34;])&#xA;    Init(&#34;Init peripherals&#34;)&#xA;    Start --&amp;gt; Init&#xA;&#xA;    IsLongRst{&#34;Reset button &#xA;      pressed &amp;gt; 5000 ms?&#34;}&#xA;    Init --&amp;gt; IsLongRst&#xA;&#xA;    ClearWifi(&#34;Wi-Fi credentials clear&#34;)&#xA;    IsLongRst --&amp;gt;|&#34;Yes&#34;| ClearWifi&#xA;    DisplayInit(&#34;Display init&#34;)&#xA;    IsLongRst --&amp;gt;|&#34;No&#34;| DisplayInit&#xA;    ClearWifi --&amp;gt; DisplayInit&#xA;    WakeReason{&#34;Wake by&#xA;      user or timer?&#34;}&#xA;    DisplayInit --&amp;gt; WakeReason&#xA;&#xA;    ClearDisplay(&#34;Display clear&#34;)&#xA;    WakeReason --&amp;gt;|&#34;User&#34;| ClearDisplay&#xA;    IsWiFiSetup{&#34;Wi-Fi saved?&#34;}&#xA;    WakeReason --&amp;gt;|&#34;Timer&#34;| IsWiFiSetup&#xA;    ClearDisplay --&amp;gt; IsWiFiSetup&#xA;    NeedConfig(&#34;Show set-up message&#34;)&#xA;    IsWiFiSetup --&amp;gt;|&#34;No&#34;| NeedConfig&#xA;&#xA;    %% Config Wifi&#xA;    RunSetup(&#34;Start config portal&#34;)&#xA;    NeedConfig --&amp;gt; RunSetup&#xA;    IsReset1{&#34;Device&#xA;      reset?&#34;}&#xA;    RunSetup --&amp;gt;|&#34;Yes&#34;| IsReset1&#xA;    WipeConfig1(&#34;API key, friendly ID and WiFi clear&#34;)&#xA;    IsReset1 --&amp;gt;|&#34;Yes&#34;| WipeConfig1&#xA;    Reboot1([&#34;Reboot&#34;])&#xA;    WipeConfig1 --&amp;gt; Reboot1&#xA;    IsWifiConnect{&#34;WiFi&#xA;      connected?&#34;}&#xA;    IsReset1 --&amp;gt;|&#34;No&#34;| IsWifiConnect&#xA;&#xA;    %% Main Body&#xA;    TryConnect{&#34;WiFi connected&#xA;      (5tries)?&#34;}&#xA;    IsWiFiSetup --&amp;gt;|&#34;Yes&#34;| TryConnect&#xA;&#xA;    ConnectError(&#34;Show connection error&#34;)&#xA;    IsWifiConnect --&amp;gt;|&#34;No&#34;| ConnectError&#xA;    TryConnect --&amp;gt;|&#34;No&#34;| ConnectError&#xA;    Sleep1([&#34;Sleep&#34;])&#xA;    ConnectError --&amp;gt; Sleep1&#xA;    ClockSync(&#34;Check synchronization&#34;)&#xA;    IsWifiConnect --&amp;gt;|&#34;Yes&#34;| ClockSync&#xA;    TryConnect --&amp;gt;|&#34;Yes&#34;| ClockSync&#xA;    IsApiSetup{&#34;API key and&#xA;      friendly ID exist?&#34;}&#xA;    ClockSync --&amp;gt; IsApiSetup&#xA;&#xA;    %% Setup&#xA;    CallSetup(&#34;Ping /api/setup&#34;)&#xA;    IsApiSetup --&amp;gt;|&#34;No&#34;| CallSetup&#xA;    IsSetupSuccess{&#34;Setup&#xA;      success?&#34;}&#xA;    CallSetup --&amp;gt; IsSetupSuccess&#xA;    SetupError(&#34;Show setup error&#34;)&#xA;    IsSetupSuccess --&amp;gt; SetupError&#xA;    Sleep2([&#34;Sleep&#34;])&#xA;    SetupError --&amp;gt; Sleep2&#xA;    &#xA;    %% Check update&#xA;    PingServer{&#34;Ping server,&#xA;      success?&#34;}&#xA;    IsApiSetup --&amp;gt;|&#34;Yes&#34;| PingServer&#xA;    IsSetupSuccess --&amp;gt;|&#34;Yes&#34;| PingServer&#xA;    PingError(&#34;Show server error&#34;)&#xA;    PingServer --&amp;gt;|&#34;No&#34;| PingError&#xA;    Sleep3([&#34;Sleep&#34;])&#xA;    PingError --&amp;gt; Sleep3&#xA;    &#xA;    %% Act on update&#xA;    IsNeedReset{&#34;Need to reset&#xA;     the device?&#34;}&#xA;    PingServer --&amp;gt;|&#34;Yes&#34;| IsNeedReset&#xA;    IsNeedReset --&amp;gt;|&#34;Yes&#34;| WipeConfig1&#xA;    IsNeedUpdate{&#34;Need to update?&#34;}&#xA;    IsNeedReset --&amp;gt;|&#34;No&#34;| IsNeedUpdate&#xA;    IsNeedUpdate --&amp;gt;|&#34;No&#34;| Sleep3&#xA;    Update(&#34;Download and update&#34;)&#xA;    IsNeedUpdate --&amp;gt;|&#34;Yes&#34;| Update&#xA;    Update --&amp;gt; Sleep3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Web Server Endpoints&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;following Wifi connection via the captive portal, device swaps its Mac Address for an API Key and Friendly ID from the server (which get saved on device).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;GET /api/setup&#xA;&#xA;headers = {&#xA;  &#39;ID&#39; =&amp;gt; &#39;XX:XX:XX:XX:XX&#39; # mac adddress&#xA;}&#xA;&#xA;response example (success):&#xA;{ &#34;status&#34;: 200, &#34;api_key&#34;: &#34;2r--SahjsAKCFksVcped2Q&#34;, &#34;friendly_id&#34;: &#34;917F0B&#34;, &#34;image_url&#34;: &#34;https://usetrmnl.com/images/setup/setup-logo.bmp&#34;, &#34;filename&#34;: &#34;empty_state&#34; }&#xA;&#xA;response example (fail, device with this Mac Address not found)&#xA;{ &#34;status&#34; =&amp;gt; 404, &#34;api_key&#34; =&amp;gt; nil, &#34;friendly_id&#34; =&amp;gt; nil, &#34;image_url&#34; =&amp;gt; nil, &#34;filename&#34; =&amp;gt; nil }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;assuming the Setup endpoint responded successfully, future requests are made solely for image / display content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;GET /api/display&#xA;&#xA;headers = {&#xA;  &#39;ID&#39; =&amp;gt; &#39;XX:XX:XX:XX&#39;,&#xA;  &#39;Access-Token&#39; =&amp;gt; &#39;2r--SahjsAKCFksVcped2Q&#39;,&#xA;  &#39;Refresh-Rate&#39; =&amp;gt; &#39;1800&#39;,&#xA;  &#39;Battery-Voltage&#39; =&amp;gt; &#39;4.1&#39;,&#xA;  &#39;FW-Version&#39; =&amp;gt; &#39;2.1.3&#39;,&#xA;  &#39;RSSI&#39; =&amp;gt; &#39;-69&#39;&#xA;}&#xA;&#xA;response example (success, device found with this access token):&#xA;{&#xA;  &#34;status&#34;=&amp;gt;0, # will be 202 if no user_id is attached to device&#xA;  &#34;image_url&#34;=&amp;gt;&#34;https://trmnl.s3.us-east-2.amazonaws.com/path-to-img.bmp&#34;,&#xA;  &#34;filename&#34;=&amp;gt;&#34;2024-09-20T00:00:00&#34;,&#xA;  &#34;update_firmware&#34;=&amp;gt;false,&#xA;  &#34;firmware_url&#34;=&amp;gt;nil,&#xA;  &#34;refresh_rate&#34;=&amp;gt;&#34;1800&#34;,&#xA;  &#34;reset_firmware&#34;=&amp;gt;false&#xA;}&#xA;&#xA;response example (success, device found AND needs soft reset):&#xA;{&#xA; &#34;status&#34;=&amp;gt;0,&#xA; &#34;image_url&#34;=&amp;gt;&#34;https://trmnl.s3.us-east-2.amazonaws.com/path-to-img.bmp&#34;,&#xA; &#34;filename&#34;=&amp;gt;&#34;name-of-img.bmp&#34;,&#xA; &#34;update_firmware&#34;=&amp;gt;false,&#xA; &#34;firmware_url&#34;=&amp;gt;nil,&#xA; &#34;refresh_rate&#34;=&amp;gt;&#34;1800&#34;,&#xA; &#34;reset_firmware&#34;=&amp;gt;true&#xA;}&#xA;&#xA;response example (success, device found AND needs firmware update):&#xA;{&#xA; &#34;status&#34;=&amp;gt;0,&#xA; &#34;image_url&#34;=&amp;gt;&#34;https://trmnl.s3.us-east-2.amazonaws.com/path-to-img.bmp&#34;,&#xA; &#34;filename&#34;=&amp;gt;&#34;name-of-img.bmp&#34;,&#xA; &#34;update_firmware&#34;=&amp;gt;true,&#xA; &#34;firmware_url&#34;=&amp;gt;&#34;https://trmnl.s3.us-east-2.amazonaws.com/path-to-firmware.bin&#34;,&#xA; &#34;refresh_rate&#34;=&amp;gt;&#34;1800&#34;,&#xA; &#34;reset_firmware&#34;=&amp;gt;false&#xA;}&#xA;&#xA;response example (fail, device not found for this access token):&#xA;{&#34;status&#34;=&amp;gt;500, &#34;error&#34;=&amp;gt;&#34;Device not found&#34;}&#xA;&#xA;if &#39;FW-Version&#39; header != web server `Setting.firmware_download_url`, server will include absolute URL from which to download firmware.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if device detects an issue with response data from the &lt;code&gt;api/display&lt;/code&gt; endpoint, logs are sent to server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;POST /api/logs&#xA;&#xA;# example request tbd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Power consumption&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Ths image displays the amount of power consumed during a work cycle that involves downloading and displaying images.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/Simple_cycle.jpg&#34; alt=&#34;Image Alt text&#34; title=&#34;Simple cycle&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This image displays the amount of power consumed while in sleep mode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/Sleep_cycle.jpg&#34; alt=&#34;Image Alt text&#34; title=&#34;Sleep cycle&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This image displays the amount of power consumed during a work cycle that involves link pinging, new firmware downloading and OTA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/OTA.jpg&#34; alt=&#34;Image Alt text&#34; title=&#34;OTA&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Full Power Cycle&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sleep 0.1mA&lt;/li&gt; &#xA; &lt;li&gt;Image refresh cycle 32.8mA during 24s&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If refreshed continuously, device will refresh 8,231 times (54 hours) on a full charge. If device is set to sleep continuously, it can sleep for 18,000 hours (750 days).&lt;/p&gt; &#xA;&lt;p&gt;15 min refresh = 78 days 5 min refresh = 29 days&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Low Battery Level&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This image shows that the battery disconnects when the voltage reaches 2.75 V:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/battery_3v3.jpg&#34; alt=&#34;Image Alt text&#34; title=&#34;Voltage battery&amp;amp;3.3V&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The pulse on the graph shows the voltage on the divider in sleep mode, further on the graph it can be seen that at the moment of disconnection of the battery on the divider under load the voltage is equal to 1V, i.e. a voltage of 1.2V under load on the divider can be considered extremely critical, which corresponds to a voltage of 1.5V in the state sleep on the divider and 3V on the battery:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/battery_divider.jpg&#34; alt=&#34;Image Alt text&#34; title=&#34;Voltage battery&amp;amp;divider&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Version Log&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/usetrmnl/firmware/releases&#34;&gt;releases&lt;/a&gt;. For older versions go &lt;a href=&#34;https://github.com/usetrmnl/firmware/issues/95&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Compilation guide&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;A more user-friendly (and non developer) guide is available here: &lt;a href=&#34;https://help.usetrmnl.com/en/articles/10271569-manually-flash-firmware&#34;&gt;https://help.usetrmnl.com/en/articles/10271569-manually-flash-firmware&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to skip the build + upload steps below, flash directly from a web browser here: &lt;a href=&#34;https://usetrmnl.com/flash&#34;&gt;https://usetrmnl.com/flash&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install VS Code: &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;https://code.visualstudio.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install PlatformIO: &lt;a href=&#34;https://platformio.org/install/ide?install=vscode&#34;&gt;https://platformio.org/install/ide?install=vscode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Git: &lt;a href=&#34;https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Visual-Studio-Code&#34;&gt;https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Visual-Studio-Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone repository: &lt;a href=&#34;https://github.com/usetrmnl/firmware&#34;&gt;https://github.com/usetrmnl/firmware&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;After cloning, open project in VS Code workspace&lt;/li&gt; &#xA; &lt;li&gt;After configuring the project, click on the PlatformIO -&amp;gt; Build button located at the bottom of the screen&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/build_icon.JPG&#34; alt=&#34;Image Alt text&#34; title=&#34;Build&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;After the compilation process is complete, you should expect to see a message in the console.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/console.JPG&#34; alt=&#34;Image Alt text&#34; title=&#34;Console&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;9&#34;&gt; &#xA; &lt;li&gt;You can find the compiled file in the folder shown in the picture.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/bin_folder.JPG&#34; alt=&#34;Image Alt text&#34; title=&#34;Bin&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Uploading guide (PlatformIO)&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Turn off PCB. Connect PCB to PC using USB-C cable. While holding down the boot button, turn on PCB. Let go of boot button. This puts board in flashing mode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mac/Windows: Select the proper COM port from drop-down list (or leave on &#34;Auto&#34;). Ubuntu: Look for something like &#34;/dev/ttyACMO USB JTAG/serial debug unit&#34; or &#34;Espressif USB JTAG/serial debug unit&#34; via lsusb.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/fs.jpg&#34; alt=&#34;Image Alt text&#34; title=&#34;FS&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Click on &#34;PlatformIO: Upload&#34; button.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Uploading guide (ESP32 Flash Download Tool)&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Tools required:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Windows OS&lt;/li&gt; &#xA; &lt;li&gt;Flash Tool 3.9.5&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/usetrmnl/firmware/tree/main/builds&#34;&gt;Firmware binary file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/usetrmnl/firmware/tree/main/builds/bin/bootloader.bin&#34;&gt;Bootloader binary file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/usetrmnl/firmware/tree/main/builds/bin/partitions.bin&#34;&gt;Partition binary file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/usetrmnl/firmware/tree/main/builds/bin/boot_app0.bin&#34;&gt;Boot app binary file&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Step 1 - Configure flash tool&lt;/h3&gt; &#xA;&lt;p&gt;open the Flash Tool (executable file), select these parameters, then clickOK:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/select_screen.jpg&#34; alt=&#34;Image Alt text&#34; title=&#34;select screen&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Step 2 - Add binaries&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Beside the top blank space, click “...” dots and select the bootloader binary file then input&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;“0x00000000” in the far right space and check the box.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Click “...” dots and select the partitions binary file then input&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;“0x00008000” in the far right space and check the box.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Click “...” dots and select the boot_app0 binary file then input&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;“0x0000e000” in the far right space and check the box.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Click “...” dots and select the firmware binary file then input&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;“0x00010000” in the far right space and check the box.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/binaries.jpg&#34; alt=&#34;Image Alt text&#34; title=&#34;binaries&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;finally, set the following parameters at the bottom of the Flash Tool interface:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/settings.jpg&#34; alt=&#34;Image Alt text&#34; title=&#34;settings&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Step 3 - Connect and flash device&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the Windows “Device Manager” program and scroll to the bottom where the USB devices can be found. each machine will have different available devices, but look for a section like this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/devices.jpg&#34; alt=&#34;Image Alt text&#34; title=&#34;devices&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Next, connect the PCB to the Windows machine with a USB-C cable. make sure the USB port is on the right, and that the PCB’s on/off switch is toggled DOWN for “off.”&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;While holding the BOOT button (below the on/off toggle), toggle the device ON by flipping the above switch UP. you may hear a sound from your Windows machine Inspect the Device Manager connections at the bottom of the interface, and a new device should appear. it may be “USB Component {{ Num }},” or something like below:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/select_device.jpg&#34; alt=&#34;Image Alt text&#34; title=&#34;select_device&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Take note of this device’s name, that is our TRMNL PCB. then back inside the Flash Tool, click to open the “COM” dropdown in the bottom right and choose the TRMNL PCB. finally, click the “START” button.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/start.jpg&#34; alt=&#34;Image Alt text&#34; title=&#34;start&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Step 4 - Prepare for new device flashing&lt;/h3&gt; &#xA;&lt;p&gt;Inside the Flash Tool click the “STOP” button.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/stop.jpg&#34; alt=&#34;Image Alt text&#34; title=&#34;stop&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next turn off (toggle DOWN) and unplug the PCB. you are now ready to flash another device - see Step 1.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Hacking guide&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to run local tests, you&#39;ll need to have g++/gcc installed (f.e., as part of MinGW) in PATH:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get MinGW online installer from &lt;a href=&#34;https://github.com/niXman/mingw-builds-binaries/&#34;&gt;https://github.com/niXman/mingw-builds-binaries/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add path to &lt;code&gt;bin&lt;/code&gt; from installed folder (f.e. &lt;code&gt;c:\mingw64\bin&lt;/code&gt;) to your PATH&lt;/li&gt; &#xA; &lt;li&gt;Restart Visual Studio Code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now you can switch from &#34;env:esp32...&#34; to &#34;esp:native&#34; clicking at the bottom of the studio (point 1):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/usetrmnl/trmnl-firmware/main/pics/vscode-footer.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;And then run platformio tests by clicking test button (point 2).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cactus-compute/cactus</title>
    <updated>2025-08-07T01:30:24Z</updated>
    <id>tag:github.com,2025-08-07:/cactus-compute/cactus</id>
    <link href="https://github.com/cactus-compute/cactus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform framework for deploying LLM/VLM/TTS models locally on smartphones.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cactus-compute/cactus/main/assets/banner.jpg&#34; alt=&#34;Logo&#34; style=&#34;border-radius: 30px; width: 100%;&#34;&gt; &#xA;&lt;span&gt; &lt;img alt=&#34;Y Combinator&#34; src=&#34;https://img.shields.io/badge/Combinator-F0652F?style=for-the-badge&amp;amp;logo=ycombinator&amp;amp;logoColor=white&#34; height=&#34;18&#34; style=&#34;vertical-align:middle;border-radius:4px;&#34;&gt; &lt;img alt=&#34;Oxford Seed Fund&#34; src=&#34;https://img.shields.io/badge/Oxford_Seed_Fund-002147?style=for-the-badge&amp;amp;logo=oxford&amp;amp;logoColor=white&#34; height=&#34;18&#34; style=&#34;vertical-align:middle;border-radius:4px;&#34;&gt; &lt;img alt=&#34;Google for Startups&#34; src=&#34;https://img.shields.io/badge/Google_For_Startups-4285F4?style=for-the-badge&amp;amp;logo=google&amp;amp;logoColor=white&#34; height=&#34;18&#34; style=&#34;vertical-align:middle;border-radius:4px;&#34;&gt; &lt;/span&gt; &#xA;&lt;h2&gt;🌍 Translations&lt;/h2&gt; &#xA;&lt;p&gt;🇬🇧 English | 🇪🇸 &lt;a href=&#34;https://raw.githubusercontent.com/cactus-compute/cactus/main/docs/README.es.md&#34;&gt;Español&lt;/a&gt; | 🇫🇷 &lt;a href=&#34;https://raw.githubusercontent.com/cactus-compute/cactus/main/docs/README.fr.md&#34;&gt;Français&lt;/a&gt; | 🇨🇳 &lt;a href=&#34;https://raw.githubusercontent.com/cactus-compute/cactus/main/docs/README.zh.md&#34;&gt;中文&lt;/a&gt; | 🇯🇵 &lt;a href=&#34;https://raw.githubusercontent.com/cactus-compute/cactus/main/docs/README.ja.md&#34;&gt;日本語&lt;/a&gt; | 🇮🇳 &lt;a href=&#34;https://raw.githubusercontent.com/cactus-compute/cactus/main/docs/README.hi.md&#34;&gt;हिंदी&lt;/a&gt; | 🇩🇪 &lt;a href=&#34;https://raw.githubusercontent.com/cactus-compute/cactus/main/docs/README.de.md&#34;&gt;Deutsch&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cross-platform framework for deploying LLM/VLM/TTS models locally in your app.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available in Flutter, React-Native and Kotlin Multiplatform.&lt;/li&gt; &#xA; &lt;li&gt;Supports any GGUF model you can find on Huggingface; Qwen, Gemma, Llama, DeepSeek etc.&lt;/li&gt; &#xA; &lt;li&gt;Run LLMs, VLMs, Embedding Models, TTS models and more.&lt;/li&gt; &#xA; &lt;li&gt;Accommodates from FP32 to as low as 2-bit quantized models, for efficiency and less device strain.&lt;/li&gt; &#xA; &lt;li&gt;Chat templates with Jinja2 support and token streaming.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/bNurx3AXTJ&#34;&gt;CLICK TO JOIN OUR DISCORD!&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://repomapr.com/cactus-compute/cactus&#34;&gt;CLICK TO VISUALISE AND QUERY REPO&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://img.shields.io/badge/Flutter-grey.svg?style=for-the-badge&amp;amp;logo=Flutter&amp;amp;logoColor=white&#34; alt=&#34;Flutter&#34;&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install:&lt;/strong&gt; Execute the following command in your project terminal: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter pub add cactus&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flutter Text Completion&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:cactus/cactus.dart&#39;;&#xA;&#xA;final lm = await CactusLM.init(&#xA;    modelUrl: &#39;https://huggingface.co/Cactus-Compute/Qwen3-600m-Instruct-GGUF/resolve/main/Qwen3-0.6B-Q8_0.gguf&#39;,&#xA;    contextSize: 2048,&#xA;);&#xA;&#xA;final messages = [ChatMessage(role: &#39;user&#39;, content: &#39;Hello!&#39;)];&#xA;final response = await lm.completion(messages, maxTokens: 100, temperature: 0.7);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flutter Embedding&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:cactus/cactus.dart&#39;;&#xA;&#xA;final lm = await CactusLM.init(&#xA;    modelUrl: &#39;https://huggingface.co/Cactus-Compute/Qwen3-600m-Instruct-GGUF/resolve/main/Qwen3-0.6B-Q8_0.gguf&#39;,&#xA;    contextSize: 2048,&#xA;    generateEmbeddings: true,&#xA;);&#xA;&#xA;final text = &#39;Your text to embed&#39;;&#xA;final result = await lm.embedding(text);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flutter VLM Completion&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:cactus/cactus.dart&#39;;&#xA;&#xA;final vlm = await CactusVLM.init(&#xA;    modelUrl: &#39;https://huggingface.co/Cactus-Compute/SmolVLM2-500m-Instruct-GGUF/resolve/main/SmolVLM2-500M-Video-Instruct-Q8_0.gguf&#39;,&#xA;    mmprojUrl: &#39;https://huggingface.co/Cactus-Compute/SmolVLM2-500m-Instruct-GGUF/resolve/main/mmproj-SmolVLM2-500M-Video-Instruct-Q8_0.gguf&#39;,&#xA;);&#xA;&#xA;final messages = [ChatMessage(role: &#39;user&#39;, content: &#39;Describe this image&#39;)];&#xA;&#xA;final response = await vlm.completion(&#xA;    messages, &#xA;    imagePaths: [&#39;/absolute/path/to/image.jpg&#39;],&#xA;    maxTokens: 200,&#xA;    temperature: 0.3,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flutter Cloud Fallback&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:cactus/cactus.dart&#39;;&#xA;&#xA;final lm = await CactusLM.init(&#xA;    modelUrl: &#39;https://huggingface.co/Cactus-Compute/Qwen3-600m-Instruct-GGUF/resolve/main/Qwen3-0.6B-Q8_0.gguf&#39;,&#xA;    contextSize: 2048,&#xA;    cactusToken: &#39;enterprise_token_here&#39;, &#xA;);&#xA;&#xA;final messages = [ChatMessage(role: &#39;user&#39;, content: &#39;Hello!&#39;)];&#xA;final response = await lm.completion(messages, maxTokens: 100, temperature: 0.7);&#xA;&#xA;// local (default): strictly only run on-device&#xA;// localfirst: fallback to cloud if device fails&#xA;// remotefirst: primarily remote, run local if API fails&#xA;// remote: strictly run on cloud &#xA;final embedding = await lm.embedding(&#39;Your text&#39;, mode: &#39;localfirst&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;N/B: See the &lt;a href=&#34;https://github.com/cactus-compute/cactus/raw/main/flutter&#34;&gt;Flutter Docs&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://img.shields.io/badge/React%20Native-grey.svg?style=for-the-badge&amp;amp;logo=react&amp;amp;logoColor=%2361DAFB&#34; alt=&#34;React Native&#34;&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install the &lt;code&gt;cactus-react-native&lt;/code&gt; package:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install cactus-react-native &amp;amp;&amp;amp; npx pod-install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;React-Native Text Completion&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { CactusLM } from &#39;cactus-react-native&#39;;&#xA;&#xA;const { lm, error } = await CactusLM.init({&#xA;    model: &#39;/path/to/model.gguf&#39;, // this is a local model file inside the app sandbox&#xA;    n_ctx: 2048,&#xA;});&#xA;&#xA;const messages = [{ role: &#39;user&#39;, content: &#39;Hello!&#39; }];&#xA;const params = { n_predict: 100, temperature: 0.7 };&#xA;const response = await lm.completion(messages, params);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;React-Native Embedding&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { CactusLM } from &#39;cactus-react-native&#39;;&#xA;&#xA;const { lm, error } = await CactusLM.init({&#xA;    model: &#39;/path/to/model.gguf&#39;, // local model file inside the app sandbox&#xA;    n_ctx: 2048,&#xA;    embedding: true,&#xA;});&#xA;&#xA;const text = &#39;Your text to embed&#39;;&#xA;const params = { normalize: true };&#xA;const result = await lm.embedding(text, params);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;React-Native VLM&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { CactusVLM } from &#39;cactus-react-native&#39;;&#xA;&#xA;const { vlm, error } = await CactusVLM.init({&#xA;    model: &#39;/path/to/vision-model.gguf&#39;, // local model file inside the app sandbox&#xA;    mmproj: &#39;/path/to/mmproj.gguf&#39;, // local model file inside the app sandbox&#xA;});&#xA;&#xA;const messages = [{ role: &#39;user&#39;, content: &#39;Describe this image&#39; }];&#xA;&#xA;const params = {&#xA;    images: [&#39;/absolute/path/to/image.jpg&#39;],&#xA;    n_predict: 200,&#xA;    temperature: 0.3,&#xA;};&#xA;&#xA;const response = await vlm.completion(messages, params);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;React-Native Agents&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { CactusAgent } from &#39;cactus-react-native&#39;;&#xA;&#xA;// we recommend Qwen 3 family, 0.6B is great&#xA;const { agent, error } = await CactusAgent.init({&#xA;    model: &#39;/path/to/model.gguf&#39;, &#xA;    n_ctx: 2048,&#xA;});&#xA;&#xA;const weatherTool = agent.addTool(&#xA;    (location: string) =&amp;gt; `Weather in ${location}: 72°F, sunny`,&#xA;    &#39;Get current weather for a location&#39;,&#xA;    {&#xA;        location: { type: &#39;string&#39;, description: &#39;City name&#39;, required: true }&#xA;    }&#xA;);&#xA;&#xA;const messages = [{ role: &#39;user&#39;, content: &#39;What\&#39;s the weather in NYC?&#39; }];&#xA;  const result = await agent.completionWithTools(messages, {&#xA;  n_predict: 200,&#xA;  temperature: 0.7,&#xA;});&#xA;&#xA;await agent.release();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Get started with an &lt;a href=&#34;https://github.com/cactus-compute/example-react-agents/&#34;&gt;example app&lt;/a&gt; built using &lt;code&gt;CactusAgent&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/cactus-compute/cactus/raw/main/react&#34;&gt;React Docs&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://img.shields.io/badge/Kotlin_Multiplatform-grey.svg?style=for-the-badge&amp;amp;logo=kotlin&amp;amp;logoColor=white&#34; alt=&#34;Kotlin Multiplatform&#34;&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add Maven Dependency:&lt;/strong&gt; Add to your KMP project&#39;s &lt;code&gt;build.gradle.kts&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;kotlin {&#xA;    sourceSets {&#xA;        commonMain {&#xA;            dependencies {&#xA;                implementation(&#34;com.cactus:library:0.2.4&#34;)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Platform Setup:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Android:&lt;/strong&gt; Works automatically - native libraries included.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;iOS:&lt;/strong&gt; In Xcode: File → Add Package Dependencies → Paste &lt;code&gt;https://github.com/cactus-compute/cactus&lt;/code&gt; → Click Add&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Kotlin Multiplatform Text Completion&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import com.cactus.CactusLM&#xA;import kotlinx.coroutines.runBlocking&#xA;&#xA;runBlocking {&#xA;    val lm = CactusLM(&#xA;        threads = 4,&#xA;        contextSize = 2048,&#xA;        gpuLayers = 0 // Set to 99 for full GPU offload&#xA;    )&#xA;    &#xA;    val downloadSuccess = lm.download(&#xA;        url = &#34;path/to/hugginface/gguf&#34;,&#xA;        filename = &#34;model_filename.gguf&#34;&#xA;    )&#xA;    val initSuccess = lm.init(&#34;qwen3-600m.gguf&#34;)&#xA;    &#xA;    val result = lm.completion(&#xA;        prompt = &#34;Hello!&#34;,&#xA;        maxTokens = 100,&#xA;        temperature = 0.7f&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Kotlin Multiplatform Speech To Text&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import com.cactus.CactusSTT&#xA;import kotlinx.coroutines.runBlocking&#xA;&#xA;runBlocking {&#xA;    val stt = CactusSTT(&#xA;        language = &#34;en-US&#34;,&#xA;        sampleRate = 16000,&#xA;        maxDuration = 30&#xA;    )&#xA;    &#xA;    // Only supports default Vosk STT model for Android &amp;amp; Apple FOundation Model&#xA;    val downloadSuccess = stt.download()&#xA;    val initSuccess = stt.init()&#xA;    &#xA;    val result = stt.transcribe()&#xA;    result?.let { sttResult -&amp;gt;&#xA;        println(&#34;Transcribed: ${sttResult.text}&#34;)&#xA;        println(&#34;Confidence: ${sttResult.confidence}&#34;)&#xA;    }&#xA;    &#xA;    // Or transcribe from audio file&#xA;    val fileResult = stt.transcribeFile(&#34;/path/to/audio.wav&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Kotlin Multiplatform VLM&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import com.cactus.CactusVLM&#xA;import kotlinx.coroutines.runBlocking&#xA;&#xA;runBlocking {&#xA;    val vlm = CactusVLM(&#xA;        threads = 4,&#xA;        contextSize = 2048,&#xA;        gpuLayers = 0 // Set to 99 for full GPU offload&#xA;    )&#xA;    &#xA;    val downloadSuccess = vlm.download(&#xA;        modelUrl = &#34;path/to/hugginface/gguf&#34;,&#xA;        mmprojUrl = &#34;path/to/hugginface/mmproj/gguf&#34;,&#xA;        modelFilename = &#34;model_filename.gguf&#34;,&#xA;        mmprojFilename = &#34;mmproj_filename.gguf&#34;&#xA;    )&#xA;    val initSuccess = vlm.init(&#34;smolvlm2-500m.gguf&#34;, &#34;mmproj-smolvlm2-500m.gguf&#34;)&#xA;    &#xA;    val result = vlm.completion(&#xA;        prompt = &#34;Describe this image&#34;,&#xA;        imagePath = &#34;/path/to/image.jpg&#34;,&#xA;        maxTokens = 200,&#xA;        temperature = 0.3f&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;N/B: See the &lt;a href=&#34;https://github.com/cactus-compute/cactus/raw/main/kotlin&#34;&gt;Kotlin Docs&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://img.shields.io/badge/C%2B%2B-grey.svg?style=for-the-badge&amp;amp;logo=c%2B%2B&amp;amp;logoColor=white&#34; alt=&#34;C++&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Cactus backend is written in C/C++ and can run directly on phones, smart tvs, watches, speakers, cameras, laptops etc. See the &lt;a href=&#34;https://github.com/cactus-compute/cactus/raw/main/cpp&#34;&gt;C++ Docs&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://img.shields.io/badge/Using_Repo_And_Examples-grey.svg?style=for-the-badge&#34; alt=&#34;Using this Repo &amp;amp; Example Apps&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;First, clone the repo with &lt;code&gt;git clone https://github.com/cactus-compute/cactus.git&lt;/code&gt;, cd into it and make all scripts executable with &lt;code&gt;chmod +x scripts/*.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build the Android JNILibs with &lt;code&gt;scripts/build-flutter-android.sh&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Build the Flutter Plugin with &lt;code&gt;scripts/build-flutter.sh&lt;/code&gt;. (MUST run before using example)&lt;/li&gt; &#xA;   &lt;li&gt;Navigate to the example app with &lt;code&gt;cd flutter/example&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Open your simulator via Xcode or Android Studio, &lt;a href=&#34;https://medium.com/@daspinola/setting-up-android-and-ios-emulators-22d82494deda&#34;&gt;walkthrough&lt;/a&gt; if you have not done this before.&lt;/li&gt; &#xA;   &lt;li&gt;Always start app with this combo &lt;code&gt;flutter clean &amp;amp;&amp;amp; flutter pub get &amp;amp;&amp;amp; flutter run&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Play with the app, and make changes either to the example app or plugin as desired.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;React Native&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build the Android JNILibs with &lt;code&gt;scripts/build-react-android.sh&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Build the Flutter Plugin with &lt;code&gt;scripts/build-react.sh&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Navigate to the example app with &lt;code&gt;cd react/example&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Setup your simulator via Xcode or Android Studio, &lt;a href=&#34;https://medium.com/@daspinola/setting-up-android-and-ios-emulators-22d82494deda&#34;&gt;walkthrough&lt;/a&gt; if you have not done this before.&lt;/li&gt; &#xA;   &lt;li&gt;Always start app with this combo &lt;code&gt;yarn &amp;amp;&amp;amp; yarn ios&lt;/code&gt; or &lt;code&gt;yarn &amp;amp;&amp;amp; yarn android&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Play with the app, and make changes either to the example app or package as desired.&lt;/li&gt; &#xA;   &lt;li&gt;For now, if changes are made in the package, you would manually copy the files/folders into the &lt;code&gt;examples/react/node_modules/cactus-react-native&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Kotlin Multiplatform&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build the Android JNILibs with &lt;code&gt;scripts/build-flutter-android.sh&lt;/code&gt;. (Flutter &amp;amp; Kotlin share same JNILibs)&lt;/li&gt; &#xA;   &lt;li&gt;Build the Kotlin library with &lt;code&gt;scripts/build-kotlin.sh&lt;/code&gt;. (MUST run before using example)&lt;/li&gt; &#xA;   &lt;li&gt;Navigate to the example app with &lt;code&gt;cd kotlin/example&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Open your simulator via Xcode or Android Studio, &lt;a href=&#34;https://medium.com/@daspinola/setting-up-android-and-ios-emulators-22d82494deda&#34;&gt;walkthrough&lt;/a&gt; if you have not done this before.&lt;/li&gt; &#xA;   &lt;li&gt;Always start app with &lt;code&gt;./gradlew :composeApp:run&lt;/code&gt; for desktop or use Android Studio/Xcode for mobile.&lt;/li&gt; &#xA;   &lt;li&gt;Play with the app, and make changes either to the example app or library as desired.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;C/C++&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Navigate to the example app with &lt;code&gt;cd cactus/example&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;There are multiple main files &lt;code&gt;main_vlm, main_llm, main_embed, main_tts&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Build both the libraries and executable using &lt;code&gt;build.sh&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Run with one of the executables &lt;code&gt;./cactus_vlm&lt;/code&gt;, &lt;code&gt;./cactus_llm&lt;/code&gt;, &lt;code&gt;./cactus_embed&lt;/code&gt;, &lt;code&gt;./cactus_tts&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Try different models and make changes as desired.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To contribute a bug fix, create a branch after making your changes with &lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code&gt; and submit a PR.&lt;/li&gt; &#xA;   &lt;li&gt;To contribute a feature, please raise as issue first so it can be discussed, to avoid intersecting with someone else.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://discord.gg/bNurx3AXTJ&#34;&gt;Join our discord&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://img.shields.io/badge/Performance-grey.svg?style=for-the-badge&#34; alt=&#34;Performance&#34;&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Device&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Gemma3 1B Q4 (toks/sec)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Qwen3 4B Q4 (toks/sec)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iPhone 16 Pro Max&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;54&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;18&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iPhone 16 Pro&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;54&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;18&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iPhone 16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;49&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iPhone 15 Pro Max&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;45&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iPhone 15 Pro&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;45&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iPhone 14 Pro Max&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;44&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OnePlus 13 5G&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;43&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Samsung Galaxy S24 Ultra&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;42&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iPhone 15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;42&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OnePlus Open&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;38&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Samsung Galaxy S23 5G&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;37&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Samsung Galaxy S24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;36&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iPhone 13 Pro&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;35&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OnePlus 12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;35&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Galaxy S25 Ultra&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;29&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OnePlus 11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;26&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iPhone 13 mini&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Redmi K70 Ultra&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xiaomi 13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Samsung Galaxy S24+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Samsung Galaxy Z Fold 4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xiaomi Poco F6 5G&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://img.shields.io/badge/Demo-grey.svg?style=for-the-badge&#34; alt=&#34;Demo&#34;&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cactus-compute/cactus/main/assets/ChatDemo.gif&#34; alt=&#34;Chat Demo&#34; width=&#34;250&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://apps.apple.com/gb/app/cactus-chat/id6744444212&#34;&gt;&lt;img alt=&#34;Download iOS App&#34; src=&#34;https://img.shields.io/badge/Try_iOS_Demo-grey?style=for-the-badge&amp;amp;logo=apple&amp;amp;logoColor=white&#34; height=&#34;25&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.rshemetsubuser.myapp&amp;amp;pcampaignid=web_share&#34;&gt;&lt;img alt=&#34;Download Android App&#34; src=&#34;https://img.shields.io/badge/Try_Android_Demo-grey?style=for-the-badge&amp;amp;logo=android&amp;amp;logoColor=white&#34; height=&#34;25&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cactus-compute/cactus/main/assets/VLMDemo.gif&#34; alt=&#34;VLM Demo&#34; width=&#34;220&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cactus-compute/cactus/main/assets/EmbeddingDemo.gif&#34; alt=&#34;Embedding Demo&#34; width=&#34;220&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://img.shields.io/badge/Our_Recommendations-grey.svg?style=for-the-badge&#34; alt=&#34;Recommendations&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;We provide a colleaction of recommended models on our &lt;a href=&#34;https://huggingface.co/Cactus-Compute?sort_models=alphabetical#models&#34;&gt;HuggingFace Page&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>