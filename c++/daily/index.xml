<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-05T01:29:27Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>steveicarus/iverilog</title>
    <updated>2025-02-05T01:29:27Z</updated>
    <id>tag:github.com,2025-02-05:/steveicarus/iverilog</id>
    <link href="https://github.com/steveicarus/iverilog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Icarus Verilog&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The ICARUS Verilog Compilation System&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2000-2019 Stephen Williams&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#what-is-icarus-verilog&#34;&gt;What is ICARUS Verilog?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#buildinginstalling-icarus-verilog-from-source&#34;&gt;Building/Installing Icarus Verilog From Source&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#compile-time-prerequisites&#34;&gt;Compile Time Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#compilation&#34;&gt;Compilation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#optional-testing&#34;&gt;(Optional) Testing&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#how-icarus-verilog-works&#34;&gt;How Icarus Verilog Works&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#preprocessing&#34;&gt;Preprocessing&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#parse&#34;&gt;Parse&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#elaboration&#34;&gt;Elaboration&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#optimization&#34;&gt;Optimization&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#code-generation&#34;&gt;Code Generation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#attributes&#34;&gt;Attributes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#running-iverilog&#34;&gt;Running iverilog&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#unsupported-constructs&#34;&gt;Unsupported Constructs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#nonstandard-constructs-or-behaviors&#34;&gt;Nonstandard Constructs or Behaviors&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#builtin-system-functions&#34;&gt;Builtin system functions&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#preprocessing-library-modules&#34;&gt;Preprocessing Library Modules&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#width-in-t-time-formats&#34;&gt;Width in %t Time Formats&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#vpiscope-iterator-on-vpiscope-objects&#34;&gt;vpiScope iterator on vpiScope objects&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#time-0-race-resolution&#34;&gt;Time 0 Race Resolution&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#nets-with-types&#34;&gt;Nets with Types&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steveicarus/iverilog/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;What is ICARUS Verilog?&lt;/h2&gt; &#xA;&lt;p&gt;Icarus Verilog is intended to compile ALL of the Verilog HDL, as described in the IEEE-1364 standard. Of course, it&#39;s not quite there yet. It does currently handle a mix of structural and behavioural constructs. For a view of the current state of Icarus Verilog, see its home page at &lt;a href=&#34;https://steveicarus.github.io/iverilog/&#34;&gt;https://steveicarus.github.io/iverilog/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Icarus Verilog is not aimed at being a simulator in the traditional sense, but a compiler that generates code employed by back-end tools.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For instructions on how to run Icarus Verilog, see the &lt;code&gt;iverilog&lt;/code&gt; man page.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Building/Installing Icarus Verilog from Source&lt;/h2&gt; &#xA;&lt;p&gt;If you are starting from the source, the build process is designed to be as simple as practical. Someone basically familiar with the target system and C/C++ compilation should be able to build the source distribution with little effort. Some actual programming skills are not required, but helpful in case of problems.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are building on Windows, see the mingw.txt file.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Compile Time Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;You can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install -y autoconf gperf make gcc g++ bison flex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need the following software to compile Icarus Verilog from source on a UNIX-like system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;GNU Make The Makefiles use some GNU extensions, so a basic POSIX make will not work. Linux systems typically come with a satisfactory make. BSD based systems (i.e., NetBSD, FreeBSD) typically have GNU make as the gmake program.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ISO C++ Compiler The ivl and ivlpp programs are written in C++ and make use of templates and some of the standard C++ library. egcs and recent gcc compilers with the associated libstdc++ are known to work. MSVC++ 5 and 6 are known to definitely &lt;em&gt;not&lt;/em&gt; work.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;bison and flex OSX note: bison 2.3 shipped with MacOS including Catalina generates broken code, but bison 3+ works. We recommend using the Fink project version of bison and flex (finkproject.org), brew version works fine either.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;gperf 3.0 or later The lexical analyzer doesn&#39;t recognize keywords directly, but instead matches symbols and looks them up in a hash table in order to get the proper lexical code. The gperf program generates the lookup table.&lt;/p&gt; &lt;p&gt;A version problem with this program is the most common cause of difficulty. See the Icarus Verilog FAQ.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;readline 4.2 or later On Linux systems, this usually means the readline-devel rpm. In any case, it is the development headers of readline that are needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;termcap The readline library, in turn, uses termcap.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;If you are building from git, you will also need software to generate the configure scripts.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;autoconf 2.53 or later This generates configure scripts from configure.ac. The 2.53 or later versions are known to work, autoconf 2.13 is reported to &lt;em&gt;not&lt;/em&gt; work.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compilation&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h4&gt;&lt;a href=&#34;https://github.com/steveicarus/iverilog/releases&#34;&gt;Compiling From Release&lt;/a&gt;&lt;/h4&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Unpack the tar-ball, &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;verilog-#########&lt;/code&gt; directory, and compile the source with the commands:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  ./configure&#xA;  make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h4&gt;Compiling From GitHub&lt;/h4&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If you are building from git, you have to run the command below before compiling the source. This will generate the &#34;configure&#34; file, which is automatically done when building from tarball.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  sh autoconf.sh&#xA;  ./configure&#xA;  make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Normally, this command automatically figures out everything it needs to know. It generally works pretty well. There are a few flags to the configure script that modify its behaviour:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;&#x9;--prefix=&amp;lt;root&amp;gt;&#xA;&#x9;&#x9;The default is /usr/local, which causes the tool suite to&#xA;&#x9;&#x9;be compiled for install in /usr/local/bin,&#xA;&#x9;&#x9;/usr/local/share/ivl, etc.&#xA;&#xA;&#x9;&#x9;I recommend that if you are configuring for precompiled&#xA;&#x9;&#x9;binaries, use --prefix=/usr.  On Solaris systems, it is&#xA;&#x9;&#x9;common to use --prefix=/opt.  You can configure for a non-root&#xA;&#x9;&#x9;install with --prefix=$HOME.&#xA;&#xA;&#x9;--enable-suffix&#xA;&#x9;--enable-suffix=&amp;lt;your-suffix&amp;gt;&#xA;&#x9;--disable-suffix&#xA;&#x9;&#x9;Enable/disable changing the names of install files to use&#xA;&#x9;&#x9;a suffix string so that this version or install can co-&#xA;&#x9;&#x9;exist with other versions. This renames the installed&#xA;&#x9;&#x9;commands (iverilog, iverilog-vpi, vvp) and the installed&#xA;&#x9;&#x9;library files and include directory so that installations&#xA;&#x9;&#x9;with the same prefix but different suffix are guaranteed&#xA;&#x9;&#x9;to not interfere with each other.&#xA;&#xA;&#x9;--host=&amp;lt;host-type&amp;gt;&#xA;&#x9;&#x9;Compile iverilog for a different platform. You can use:&#xA;&#x9;&#x9;&#x9;&#x9;x64_64-w64-mingw32 for building 64-bit Windows executables&#xA;&#x9;&#x9;&#x9;&#x9;i686-w64-mingw32 for building 32-bit Windows executables&#xA;&#x9;&#x9;&#x9;Both options require installing the required mingw-w64 packages.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;(Optional) Testing&lt;/h3&gt; &#xA;&lt;p&gt;To run a simple test before installation, execute&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The commands printed by this run might help you in running Icarus Verilog on your own Verilog sources before the package is installed by root.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Now install the files in an appropriate place. (The makefiles by default install in /usr/local unless you specify a different prefix with the &lt;code&gt;--prefix=&amp;lt;path&amp;gt;&lt;/code&gt; flag to the configure command.) You may need to do this as root to gain access to installation directories.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#x9;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Uninstallation&lt;/h3&gt; &#xA;&lt;p&gt;The generated Makefiles also include the uninstall target. This should remove all the files that &lt;code&gt;make install&lt;/code&gt; creates.&lt;/p&gt; &#xA;&lt;h2&gt;How Icarus Verilog Works&lt;/h2&gt; &#xA;&lt;p&gt;This tool includes a parser which reads in Verilog (plus extensions) and generates an internal netlist. The netlist is passed to various processing steps that transform the design to more optimal/practical forms, then is passed to a code generator for final output. The processing steps and the code generator are selected by command line switches.&lt;/p&gt; &#xA;&lt;h3&gt;Preprocessing&lt;/h3&gt; &#xA;&lt;p&gt;There is a separate program, &lt;code&gt;ivlpp&lt;/code&gt;, that does the preprocessing. This program implements the &lt;code&gt;`include&lt;/code&gt; and &lt;code&gt;`define&lt;/code&gt; directives producing output that is equivalent but without the directives. The output is a single file with line number directives, so that the actual compiler only sees a single input file. See &lt;code&gt;ivlpp/ivlpp.txt&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Parse&lt;/h3&gt; &#xA;&lt;p&gt;The Verilog compiler starts by parsing the Verilog source file. The output of the parse is a list of Module objects in &#34;pform&#34;. The pform (see &lt;code&gt;pform.h&lt;/code&gt;) is mostly a direct reflection of the compilation step. There may be dangling references, and it is not yet clear which module is the root.&lt;/p&gt; &#xA;&lt;p&gt;One can see a human-readable version of the final pform by using the &lt;code&gt;-P &amp;lt;path&amp;gt;&lt;/code&gt; flag to the &lt;code&gt;ivl&lt;/code&gt; subcommand. This will cause ivl to dump the pform into the file named &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;. (Note that this is not normally done, unless debugging the &lt;code&gt;ivl&lt;/code&gt; subcommand.)&lt;/p&gt; &#xA;&lt;h3&gt;Elaboration&lt;/h3&gt; &#xA;&lt;p&gt;This phase takes the pform and generates a netlist. The driver selects (by user request or lucky guess) the root module to elaborate, resolves references and expands the instantiations to form the design netlist. (See netlist.txt.) Final semantic checks are performed during elaboration, and some simple optimizations are performed. The netlist includes all the behavioural descriptions, as well as gates and wires.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;elaborate()&lt;/code&gt; function performs the elaboration.&lt;/p&gt; &#xA;&lt;p&gt;One can see a human-readable version of the final, elaborated and optimized netlist by using the &lt;code&gt;-N &amp;lt;path&amp;gt;&lt;/code&gt; flag to the compiler. If elaboration succeeds, the final netlist (i.e., after optimizations but before code generation) will be dumped into the file named &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Elaboration is performed in two steps: scopes and parameters first, followed by the structural and behavioural elaboration.&lt;/p&gt; &#xA;&lt;h4&gt;Scope Elaboration&lt;/h4&gt; &#xA;&lt;p&gt;This pass scans through the pform looking for scopes and parameters. A tree of NetScope objects is built up and placed in the Design object, with the root module represented by the root NetScope object. The &lt;code&gt;elab_scope.cc&lt;/code&gt; file contains most of the code for handling this phase.&lt;/p&gt; &#xA;&lt;p&gt;The tail of the elaborate_scope behaviour (after the pform is traversed) includes a scan of the NetScope tree to locate defparam assignments that were collected during scope elaboration. This is when the defparam overrides are applied to the parameters.&lt;/p&gt; &#xA;&lt;h4&gt;Netlist Elaboration&lt;/h4&gt; &#xA;&lt;p&gt;After the scopes and parameters are generated and the NetScope tree fully formed, the elaboration runs through the pform again, this time generating the structural and behavioural netlist. Parameters are elaborated and evaluated by now so all the constants of code generation are now known locally, so the netlist can be generated by simply passing through the pform.&lt;/p&gt; &#xA;&lt;h3&gt;Optimization&lt;/h3&gt; &#xA;&lt;p&gt;This is a collection of processing steps that perform optimizations that do not depend on the target technology. Examples of some useful transformations are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;eliminate null effect circuitry&lt;/li&gt; &#xA; &lt;li&gt;combinational reduction&lt;/li&gt; &#xA; &lt;li&gt;constant propagation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The actual functions performed are specified on the &lt;code&gt;ivl&lt;/code&gt; command line by the &lt;code&gt;-F&lt;/code&gt; flags (see below).&lt;/p&gt; &#xA;&lt;h3&gt;Code Generation&lt;/h3&gt; &#xA;&lt;p&gt;This step takes the design netlist and uses it to drive the code generator (see target.h). This may require transforming the design to suit the technology.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;emit()&lt;/code&gt; method of the Design class performs this step. It runs through the design elements, calling target functions as the need arises to generate actual output.&lt;/p&gt; &#xA;&lt;p&gt;The user selects the target code generator with the &lt;code&gt;-t&lt;/code&gt; flag on the command line.&lt;/p&gt; &#xA;&lt;h3&gt;Attributes&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: The $attribute syntax will soon be deprecated in favour of the Verilog-2001 attribute syntax, which is cleaner and standardized.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The parser accepts, as an extension to Verilog, the $attribute module item. The syntax of the $attribute item is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;$attribute (&amp;lt;identifier&amp;gt;, &amp;lt;key&amp;gt;, &amp;lt;value&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The $attribute keyword looks like a system task invocation. The difference here is that the parameters are more restricted than those of a system task. The &lt;code&gt;&amp;lt;identifier&amp;gt;&lt;/code&gt; must be an identifier. This will be the item to get an attribute. The &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; are strings, not expressions, that give the key and the value of the attribute to be attached to the identified object.&lt;/p&gt; &#xA;&lt;p&gt;Attributes are &lt;code&gt;[&amp;lt;key&amp;gt; &amp;lt;value&amp;gt;]&lt;/code&gt; pairs and are used to communicate with the various processing steps. See the documentation for the processing step for a list of the pertinent attributes.&lt;/p&gt; &#xA;&lt;p&gt;Attributes can also be applied to gate types. When this is done, the attribute is given to every instantiation of the primitive. The syntax for the attribute statement is the same, except that the &lt;code&gt;&amp;lt;identifier&amp;gt;&lt;/code&gt; names a primitive earlier in the compilation unit and the statement is placed in the global scope, instead of within a module. The semicolon is not part of a type attribute.&lt;/p&gt; &#xA;&lt;p&gt;Note that attributes are also occasionally used for communication between processing steps. Processing steps that are aware of others may place attributes on netlist objects to communicate information to later steps.&lt;/p&gt; &#xA;&lt;p&gt;Icarus Verilog also accepts the Verilog 2001 syntax for attributes. They have the same general meaning as with the $attribute syntax, but they are attached to objects by position instead of by name. Also, the key is a Verilog identifier instead of a string.&lt;/p&gt; &#xA;&lt;h2&gt;Running &lt;code&gt;iverilog&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The preferred way to invoke the compiler is with the &lt;code&gt;iverilog&lt;/code&gt;(1) command. This program invokes the preprocessor (&lt;code&gt;ivlpp&lt;/code&gt;) and the compiler (&lt;code&gt;ivl&lt;/code&gt;) with the proper command line options to get the job done in a friendly way. See the &lt;code&gt;iverilog&lt;/code&gt;(1) man page for usage details.&lt;/p&gt; &#xA;&lt;h3&gt;EXAMPLE: Hello World&lt;/h3&gt; &#xA;&lt;p&gt;Example: Compiling &lt;code&gt;&#34;hello.vl&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-verilog&#34;&gt;// ------------------------ hello.vl ----------------------------&#xA;&#xA;module main();&#xA;&#xA;initial&#xA;  begin&#xA;    $display(&#34;Hello World&#34;);&#xA;    $finish ;&#xA;  end&#xA;&#xA;endmodule&#xA;&#xA;// --------------------------------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ensure that &lt;code&gt;iverilog&lt;/code&gt; is on your search path, and the vpi library is available.&lt;/p&gt; &#xA;&lt;p&gt;To compile the program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#x9;iverilog hello.vl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(The above presumes that &lt;code&gt;/usr/local/include&lt;/code&gt; and &lt;code&gt;/usr/local/lib&lt;/code&gt; are part of the compiler search path, which is usually the case for &lt;code&gt;gcc&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;To run the generated program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#x9;./a.out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;-o&lt;/code&gt; switch to name the output command to be generated by the compiler. See the &lt;code&gt;iverilog&lt;/code&gt;(1) man page.&lt;/p&gt; &#xA;&lt;h2&gt;Unsupported Constructs&lt;/h2&gt; &#xA;&lt;p&gt;Icarus Verilog is in development - as such it still only supports a (growing) subset of Verilog. Below is a description of some of the currently unsupported Verilog features. This list is not exhaustive and does not account for errors in the compiler. See the Icarus Verilog web page for the current state of support for Verilog, and in particular, browse the bug report database for reported unsupported constructs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;System functions are supported, but the return value is a little tricky. See SYSTEM FUNCTION TABLE FILES in the iverilog man page.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Specify blocks are parsed but ignored in general.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trireg&lt;/code&gt; is not supported. &lt;code&gt;tri0&lt;/code&gt; and &lt;code&gt;tri1&lt;/code&gt; are supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;tran primitives, i.e. &lt;code&gt;tran&lt;/code&gt;, &lt;code&gt;tranif1&lt;/code&gt;, &lt;code&gt;tranif0&lt;/code&gt;, &lt;code&gt;rtran&lt;/code&gt;, &lt;code&gt;rtranif1&lt;/code&gt;, and &lt;code&gt;rtranif0&lt;/code&gt; are not supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Net delays, of the form &lt;code&gt;wire #N foo;&lt;/code&gt; do not work. Delays in every other context do work properly, including the V2001 form &lt;code&gt;wire #5 foo = bar;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Event controls inside non-blocking assignments are not supported. i.e.: &lt;code&gt;a &amp;lt;= @(posedge clk) b;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Macro arguments are not supported. &lt;code&gt;`define&lt;/code&gt; macros are supported, but they cannot take arguments.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Nonstandard Constructs or Behaviors&lt;/h2&gt; &#xA;&lt;p&gt;Icarus Verilog includes some features that are not part of the IEEE1364 standard, but have well-defined meaning, and also sometimes gives nonstandard (but extended) meanings to some features of the language that are defined. See the &#34;extensions.txt&#34; documentation for more details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;$is_signed(&amp;lt;expr&amp;gt;)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This system function returns 1 if the expression contained is signed, or 0 otherwise. This is mostly of use for compiler regression tests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;$sizeof(&amp;lt;expr&amp;gt;)&lt;/code&gt;, &lt;code&gt;$bits(&amp;lt;expr&amp;gt;)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;$bits&lt;/code&gt; system function returns the size in bits of the expression that is its argument. The result of this function is undefined if the argument doesn&#39;t have a self-determined size.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;$sizeof&lt;/code&gt; function is deprecated in favour of &lt;code&gt;$bits&lt;/code&gt;, which is the same thing, but included in the SystemVerilog definition.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;$simtime&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;$simtime&lt;/code&gt; system function returns as a 64bit value the simulation time, unscaled by the time units of local scope. This is different from the $time and $stime functions which return the scaled times. This function is added for regression testing of the compiler and run time, but can be used by applications who really want the simulation time.&lt;/p&gt; &lt;p&gt;Note that the simulation time can be confusing if there are lots of different &lt;code&gt; `timescales&lt;/code&gt; within a design. It is not in general possible to predict what the simulation precision will turn out to be.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;$mti_random()&lt;/code&gt;, &lt;code&gt;$mti_dist_uniform&lt;/code&gt;&lt;/p&gt; &lt;p&gt;These functions are similar to the IEEE1364 standard $random functions, but they use the Mersenne Twister (MT19937) algorithm. This is considered an excellent random number generator, but does not generate the same sequence as the standardized $random.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Builtin system functions&lt;/h3&gt; &#xA;&lt;p&gt;Certain of the system functions have well-defined meanings, so can theoretically be evaluated at compile-time, instead of using runtime VPI code. Doing so means that VPI cannot override the definitions of functions handled in this manner. On the other hand, this makes them synthesizable, and also allows for more aggressive constant propagation. The functions handled in this manner are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$bits&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$signed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$sizeof&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$unsigned&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Implementations of these system functions in VPI modules will be ignored.&lt;/p&gt; &#xA;&lt;h3&gt;Preprocessing Library Modules&lt;/h3&gt; &#xA;&lt;p&gt;Icarus Verilog does preprocess modules that are loaded from libraries via the -y mechanism. However, the only macros defined during the compilation of that file are those that it defines itself (or includes) or that are defined in the command line or command file.&lt;/p&gt; &#xA;&lt;p&gt;Specifically, macros defined in the non-library source files are not remembered when the library module is loaded. This is intentional. If it were otherwise, then compilation results might vary depending on the order that libraries are loaded, and that is too unpredictable.&lt;/p&gt; &#xA;&lt;p&gt;It is said that some commercial compilers do allow macro definitions to span library modules. That&#39;s just plain weird.&lt;/p&gt; &#xA;&lt;h3&gt;Width in &lt;code&gt;%t&lt;/code&gt; Time Formats&lt;/h3&gt; &#xA;&lt;p&gt;Standard Verilog does not allow width fields in the %t formats of display strings. For example, this is illegal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;$display(&#34;Time is %0t&#34;, $time);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Standard Verilog instead relies on the $timeformat to completely specify the format.&lt;/p&gt; &#xA;&lt;p&gt;Icarus Verilog allows the programmer to specify the field width. The &lt;code&gt;%t&lt;/code&gt; format in Icarus Verilog works exactly as it does in standard Verilog. However, if the programmer chooses to specify a minimum width (i.e., &lt;code&gt;%5t&lt;/code&gt;), then for that display Icarus Verilog will override the &lt;code&gt;$timeformat&lt;/code&gt; minimum width and use the explicit minimum width.&lt;/p&gt; &#xA;&lt;h3&gt;vpiScope Iterator on vpiScope Objects&lt;/h3&gt; &#xA;&lt;p&gt;In the VPI, the normal way to iterate over vpiScope objects contained within a vpiScope object, is the vpiInternalScope iterator. Icarus Verilog adds support for the vpiScope iterator of a vpiScope object, that iterates over &lt;em&gt;everything&lt;/em&gt; the is contained in the current scope. This is useful in cases where one wants to iterate over all the objects in a scope without iterating over all the contained types explicitly.&lt;/p&gt; &#xA;&lt;h3&gt;Time 0 Race Resolution&lt;/h3&gt; &#xA;&lt;p&gt;Combinational logic is routinely modelled using always blocks. However, this can lead to race conditions if the inputs to the combinational block are initialized in initial statements. Icarus Verilog slightly modifies time 0 scheduling by arranging for always statements with ANYEDGE sensitivity lists to be scheduled before any other threads. This causes combinational always blocks to be triggered when the values in the sensitivity list are initialized by initial threads.&lt;/p&gt; &#xA;&lt;h3&gt;Nets with Types&lt;/h3&gt; &#xA;&lt;p&gt;Icarus Verilog supports an extended syntax that allows nets and regs to be explicitly typed. The currently supported types are logic, bool and real. This implies that &lt;code&gt;logic&lt;/code&gt; and &lt;code&gt;bool&lt;/code&gt; are new keywords. Typical syntax is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-verilog&#34;&gt;&#x9;wire real foo = 1.0;&#xA;&#x9;reg logic bar, bat;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... and so forth. The syntax can be turned off by using the &lt;code&gt;-g2&lt;/code&gt; flag to iverilog, and turned on explicitly with the &lt;code&gt;-g2x&lt;/code&gt; flag to iverilog.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Except where otherwise noted, Icarus Verilog, ivl, and ivlpp are Copyright Stephen Williams. The proper notices are in the head of each file. However, I have early on received aid in the form of fixes, Verilog guidance, and especially testing from many people. Testers, in particular, include a larger community of people interested in a GPL Verilog for Linux.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mkckr0/audio-share</title>
    <updated>2025-02-05T01:29:27Z</updated>
    <id>tag:github.com,2025-02-05:/mkckr0/audio-share</id>
    <link href="https://github.com/mkckr0/audio-share" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Audio Share can share Windows/Linux computer&#39;s audio to Android phone over network, so your phone becomes the speaker of computer. (You needn&#39;t buy a new speaker😄.)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Audio Share&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mkckr0/audio-share/main/metadata/en-US/images/icon.png&#34; width=&#34;20%&#34; alt=&#34;metadata/en-US/images/icon.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mkckr0/audio-share/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/mkckr0/audio-share?logo=github&#34; alt=&#34;GitHub release (latest SemVer)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://f-droid.org/packages/io.github.mkckr0.audio_share_app&#34;&gt;&lt;img src=&#34;https://img.shields.io/f-droid/v/io.github.mkckr0.audio_share_app?logo=F-Droid&#34; alt=&#34;F-Droid&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/license/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mkckr0/audio-share&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/release-date/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date/mkckr0/audio-share&#34; alt=&#34;GitHub Release Date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/last-commit/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/mkckr0/audio-share&#34; alt=&#34;GitHub last commit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/contributors/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/mkckr0/audio-share&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/commit-activity/y/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/y/mkckr0/audio-share&#34; alt=&#34;GitHub commit activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/stars/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/mkckr0/audio-share?style=flat&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/forks/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/mkckr0/audio-share?style=flat&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/watchers/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/mkckr0/audio-share?style=flat&#34; alt=&#34;GitHub watchers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/languages/count/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/count/mkckr0/audio-share&#34; alt=&#34;GitHub language count&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/languages/top/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/top/mkckr0/audio-share&#34; alt=&#34;GitHub top language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/repo-size/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/repo-size/mkckr0/audio-share&#34; alt=&#34;GitHub repo size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/downloads/mkckr0/audio-share/total&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/mkckr0/audio-share/total?logo=github&#34; alt=&#34;GitHub all releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourceforge.net/projects/audio-share/files&#34;&gt;&lt;img src=&#34;https://img.shields.io/sourceforge/dt/audio-share.svg?logo=sourceforge&#34; alt=&#34;Download Audio Share&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/issues/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/mkckr0/audio-share&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/issues-closed/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-closed/mkckr0/audio-share&#34; alt=&#34;GitHub closed issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/issues-pr/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/mkckr0/audio-share&#34; alt=&#34;GitHub pull requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/issues-pr-closed/mkckr0/audio-share&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr-closed/mkckr0/audio-share&#34; alt=&#34;GitHub closed pull requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mkckr0/audio-share/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/mkckr0/audio-share/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mkckr0/audio-share/milestones?state=open&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/milestones/open/mkckr0/audio-share&#34; alt=&#34;GitHub number of milestones&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mkckr0/audio-share/milestone/3&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/milestones/progress-percent/mkckr0/audio-share/3&#34; alt=&#34;GitHub milestone details&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fmkckr0%2Faudio-share?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fmkckr0%2Faudio-share.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mkckr0/audio-share/releases/latest&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ehviewer-Overhauled/Art/master/get-it-on-github.svg?sanitize=true&#34; height=&#34;75&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://f-droid.org/packages/io.github.mkckr0.audio_share_app&#34;&gt;&lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; height=&#34;75&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sourceforge.net/projects/audio-share/files&#34;&gt;&lt;img alt=&#34;Download Audio Share&#34; src=&#34;https://a.fsdn.com/con/app/sf-download-button?button_size=2x&#34; width=&#34;276&#34; height=&#34;48&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Audio Share can share Windows/Linux computer&#39;s audio to Android phone over network, so your phone becomes the speaker of computer. (You needn&#39;t buy a new speaker😄.)&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mkckr0/audio-share/main/docs/img/win_01.png&#34; width=&#34;45%&#34; alt=&#34;docs/img/win_01.png&#34;&gt;&amp;nbsp; &lt;img src=&#34;https://raw.githubusercontent.com/mkckr0/audio-share/main/docs/img/win_02.png&#34; width=&#34;45%&#34; alt=&#34;docs/img/win_02.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mkckr0/audio-share/main/metadata/en-US/images/phoneScreenshots/1.png&#34; width=&#34;30%&#34; alt=&#34;metadata/en-US/images/phoneScreenshots/1.png&#34;&gt;&amp;nbsp; &lt;img src=&#34;https://raw.githubusercontent.com/mkckr0/audio-share/main/metadata/en-US/images/phoneScreenshots/2.png&#34; width=&#34;30%&#34; alt=&#34;metadata/en-US/images/phoneScreenshots/2.png&#34;&gt;&amp;nbsp; &lt;img src=&#34;https://raw.githubusercontent.com/mkckr0/audio-share/main/metadata/en-US/images/phoneScreenshots/3.png&#34; width=&#34;30%&#34; alt=&#34;metadata/en-US/images/phoneScreenshots/3.png&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mkckr0/audio-share/main/metadata/en-US/images/phoneScreenshots/4.png&#34; width=&#34;30%&#34; alt=&#34;metadata/en-US/images/phoneScreenshots/4.png&#34;&gt;&amp;nbsp; &lt;img src=&#34;https://raw.githubusercontent.com/mkckr0/audio-share/main/metadata/en-US/images/phoneScreenshots/5.png&#34; width=&#34;30%&#34; alt=&#34;metadata/en-US/images/phoneScreenshots/5.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A PC with Windows or Linux as the server. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows 10+ x86_64 with latest &lt;a href=&#34;https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist&#34;&gt;Microsoft Visual C++ 2015-2022 Redistributable (x64)&lt;/a&gt; (&lt;a href=&#34;https://aka.ms/vs/17/release/vc_redist.x64.exe&#34;&gt;vc_redist.x64.exe&lt;/a&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Linux with PipeWire.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The audio player on PC can work normally. That&#39;s to say that you should have a sound card and the audio endpoint is in available state. Otherwise, you need some &lt;a href=&#34;https://raw.githubusercontent.com/mkckr0/audio-share/main/#extra-setups-for-no-audio-endpoint&#34;&gt;extra setups&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The phone with Android 6.0(API 23)+.&lt;/li&gt; &#xA; &lt;li&gt;The network (e.g. Wi-Fi or USB tethering) that the phone can connect with the PC.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage for Windows GUI&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download APK file and AudioShareServer.exe from &lt;a href=&#34;https://github.com/mkckr0/audio-share/releases/latest&#34;&gt;latest release&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open the AudioShareServer.exe on your computer. The default arguments may work well. But you may still have to check the &#34;Host&#34; part. It&#39;s normally the LAN address, such as &lt;code&gt;192.168.xxx.xxx&lt;/code&gt;. Make sure your phone can connect your computer over this IP address. Then Click &#34;Start Server&#34; button.&lt;/li&gt; &#xA; &lt;li&gt;Install APK to your phone and open it. Modify the &#34;Host&#34; part to make sure it&#39;s same as the value of previous step, such as &lt;code&gt;192.168.xxx.xxx&lt;/code&gt;. Click &#34;▶&#34; button and enjoy the audio🎶.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage for Windows/Linux CMD&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the &lt;code&gt;audio-share-server-cmd-windows.zip&lt;/code&gt; for Windows, the &lt;code&gt;audio-share-server-cmd-linux.tar.gz&lt;/code&gt; for Linux.&lt;/li&gt; &#xA; &lt;li&gt;Uncompress the archive file.&lt;/li&gt; &#xA; &lt;li&gt;Just run &lt;code&gt;as-cmd -b&lt;/code&gt; to start the server. It will use the first LAN address as the host with the port &lt;code&gt;65530&lt;/code&gt; and select a default audio endpoint. Most of the time, it works fine. If not, then use &lt;code&gt;as-cmd -h&lt;/code&gt; to see the help, and set the proper arguments.&lt;/li&gt; &#xA; &lt;li&gt;The Windows will ask you to add firewall rules automatically while Linux won&#39;t. So if your Linux distribution enables firewall, you need to configure firewall manually.&lt;/li&gt; &#xA; &lt;li&gt;Install APK to your phone and open it. Modify the &#34;Host&#34; part to make sure it&#39;s same as the value of previous step, such as &lt;code&gt;192.168.xxx.xxx&lt;/code&gt;. Click &#34;▶&#34; button and enjoy the audio🎶.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configure Firewall Rules on Linux&lt;/h2&gt; &#xA;&lt;h3&gt;Add rules&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;address=192.168.3.2 # change it.&#xA;port=65530 # change it.&#xA;sudo firewall-cmd --add-rich-rule=&#34;rule family=ipv4 destination address=$address port port=$port protocol=tcp accept&#34;&#xA;sudo firewall-cmd --add-rich-rule=&#34;rule family=ipv4 destination address=$address port port=$port protocol=udp accept&#34;&#xA;sudo firewall-cmd --runtime-to-permanent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Check rules&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo firewall-cmd --list-rich-rules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rule family=&#34;ipv4&#34; destination address=&#34;192.168.3.2&#34; port port=&#34;65530&#34; protocol=&#34;tcp&#34; accept&#xA;rule family=&#34;ipv4&#34; destination address=&#34;192.168.3.2&#34; port port=&#34;65530&#34; protocol=&#34;udp&#34; accept&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remove rules&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;address=192.168.3.2 # change it.&#xA;port=65530 # change it.&#xA;sudo firewall-cmd --remove-rich-rule=&#34;rule family=ipv4 destination address=$address port port=$port protocol=tcp accept&#34;&#xA;sudo firewall-cmd --remove-rich-rule=&#34;rule family=ipv4 destination address=$address port port=$port protocol=udp accept&#34;&#xA;sudo firewall-cmd --runtime-to-permanent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About Audio Format&lt;/h2&gt; &#xA;&lt;p&gt;There are two kinds of audio format:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Capture audio format&lt;/li&gt; &#xA; &lt;li&gt;Transfer audio format&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The transfer audio format is uncompressed PCM data and keep same with capture audio format.&lt;/p&gt; &#xA;&lt;p&gt;You can open &lt;code&gt;server.log&lt;/code&gt; to see the transfer audio format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[2024-10-26 14:52:48.967] [info] AudioFormat:&#xA;encoding: ENCODING_PCM_16BIT&#xA;channels: 2&#xA;sample_rate: 44100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As shown above, the encoding is &lt;code&gt;16 bit integer PCM&lt;/code&gt;, the channel count is &lt;code&gt;2&lt;/code&gt;, and sample rate is &lt;code&gt;44.1kHz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Android, AudioTrack API only support the PCM audio formats listed below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ENCODING_PCM_FLOAT&#xA;ENCODING_PCM_8BIT&#xA;ENCODING_PCM_16BIT&#xA;ENCODING_PCM_24BIT_PACKED&#xA;ENCODING_PCM_32BIT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.android.com/reference/android/media/AudioFormat#encoding&#34;&gt;https://developer.android.com/reference/android/media/AudioFormat#encoding&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Audio Share support these 5 kinds of PCM format, but whether specific format is available depends on the audio endpoint.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, the default capture audio format depends on the audio endpoint&#39;s default format. You may change it by setting Sound Panel(&lt;code&gt;mmsys.cpl&lt;/code&gt;). In Sound Panel&#39;s &lt;code&gt;Playback&lt;/code&gt; tab, right click one available endpoint, and open Properties Panel, and select &lt;code&gt;Advanced&lt;/code&gt; tab, and change &lt;code&gt;Default Format&lt;/code&gt; and click &lt;code&gt;Apply&lt;/code&gt;. This can be also done in &lt;code&gt;Realtek Audio Console&lt;/code&gt;, if you use a Realtek audio card. The capture audio format must has the same channels and sample rate with the audio endpoint. So if you want to change them, you can only open Sound Panel and set default format. To be compatible with Linux, the &lt;code&gt;as-cmd&lt;/code&gt; can still set the &lt;code&gt;--channels&lt;/code&gt; or &lt;code&gt;--sample-rate&lt;/code&gt; on Windows. However, it will fallback to the proper audio format, because it doesn&#39;t support the expected in most cases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/coreaudio/device-formats&#34;&gt;https://learn.microsoft.com/en-us/windows/win32/coreaudio/device-formats&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Linux, the default capture audio format could have been given by PipeWire completely. However, the default audio encoding may be planar, such as &lt;code&gt;SPA_AUDIO_FORMAT_F32P&lt;/code&gt;. Android&#39;s AudioTrack can&#39;t play it. So the default audio encoding is forced to &lt;code&gt;SPA_AUDIO_FORMAT_F32_LE&lt;/code&gt;(32 bit float PCM with little endian). The default channels and sample rate are untouched and given by PipeWire.&lt;/p&gt; &#xA;&lt;p&gt;Note that decrease the encoding bitwise or sample rate can decrease network bandwidth, but can also increase the blank noise, also known as audio loss.&lt;/p&gt; &#xA;&lt;h2&gt;About Volume&lt;/h2&gt; &#xA;&lt;p&gt;The final volume that you hear is affected by the following volume:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PC system volume.&lt;/li&gt; &#xA; &lt;li&gt;Audio player volume on PC.&lt;/li&gt; &#xA; &lt;li&gt;Android system media volume.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Audio Volume&#34; on Android app.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Loudness Enhancer&#34; on Android app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;They are all independent.&lt;/strong&gt; If you max the volume of your PC and audio player, and still feel it&#39;s not enough, but don&#39;t want to change the Android system volume, you can increase &#34;Loudness Enhancer&#34; on app&#39;s Settings. It won&#39;t affect the system volume. The &#34;Audio Volume&#34; on app can decrease the volume you hear without changing system volume.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Too much loudness will hurt your ear!!!&lt;/strong&gt; &#34;Loudness Enhancer&#34; has a limit of &lt;code&gt;3000mB&lt;/code&gt;. It&#39;s enough for most cases. If you still need more loudness, just directly change Android system volume.&lt;/p&gt; &#xA;&lt;h2&gt;Extra Setups for &#34;No Audio Endpoint&#34;&lt;/h2&gt; &#xA;&lt;h3&gt;For Windows&lt;/h3&gt; &#xA;&lt;h4&gt;Method 1: Make audio endpoint available when speaker doesn&#39;t plug in&lt;/h4&gt; &#xA;&lt;p&gt;Realtek sound card can make audio endpoint available when speaker doesn&#39;t plug in. Just open Realtek Audio Console, select &#34;Device advanced settings&#34; tab, and switch on &#34;Disable front panel front popup dialog&#34; option. Then the audio endpoint will show up. Other sound card may have similar options. If you can&#39;t find, then turn to Method 2.&lt;/p&gt; &#xA;&lt;h4&gt;Method 2: Install a third-party virtual audio device driver&lt;/h4&gt; &#xA;&lt;p&gt;At present, I haven&#39;t find a way to create virtual audio endpoint. The only way to achieve it is to write a virtual audio device driver. But it need a EV Code Signing Certificate to sign it. Otherwise, user can&#39;t install it. I don&#39;t want to pay for it. And there are many existed third-party virtual audio device drivers. You can find one or post one that you know at &lt;a href=&#34;https://github.com/mkckr0/audio-share/discussions/59&#34;&gt;Virtual Audio Device Driver on Windows&lt;/a&gt;. Generally, a driver has an INF file. Right click it and click &#34;Install&#34; to install it.&lt;/p&gt; &#xA;&lt;h3&gt;For Linux&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to PipeWire, it&#39;s very easy for Linux to create a virtual audio endpoint, even without a root privilege. Just copy the below config to &lt;code&gt;~/.config/pipewire/pipewire.conf.d/audio-share-sink.conf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;context.objects = [&#xA;    {   factory = adapter&#xA;        args = {&#xA;           factory.name     = support.null-audio-sink&#xA;           node.name        = &#34;Audio Share Sink&#34;&#xA;           media.class      = Audio/Sink&#xA;           object.linger    = true&#xA;           audio.position   = [ FL FR ]&#xA;           priority.session = 1009&#xA;           priority.driver  = 1009&#xA;           monitor.channel-volumes = true&#xA;           monitor.passthrough = true&#xA;        }&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;systemctl --user restart pipewire&lt;/code&gt; to restart the PipeWire service.&lt;br&gt; Finally, you can see the added endpoint &#34;Audio Share Sink&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[abc@localhost ~]$ as-cmd -l&#xA;[2024-03-17 22:46:14.563] [info] pipewire header_version: 0.3.48, library_version: 0.3.67&#xA;endpoint_list:&#xA;        * id: 30   name: Audio Share Sink&#xA;total: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;h3&gt;The quick settings tile can&#39;t start playback directly&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.android.com/develop/background-work/services/foreground-services#bg-access-restrictions&#34;&gt;Restrictions on starting a foreground service from the background&lt;/a&gt;&lt;br&gt; Turns off or ignore battery optimizations can let it work.&lt;/p&gt; &#xA;&lt;h2&gt;Compile from source&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Android App&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Android Studio will import all dependencies automatically.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Server MFC&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;vcpkg is required for install dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;vcpkg install asio protobuf spdlog[wchar] wil nlohmann-json&lt;/code&gt; to install deps. The vcpkg triplet is &lt;code&gt;x64-windows-static-md&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Visual Studio 2022 with &#34;Desktop development with C++&#34; workload and &#34;C++ MFC for latest v143 build tools (x86 &amp;amp; x64)&#34; option is required for compiling.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Server CMD&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CMake and a compiler support C++20 is required. Linux also need &lt;code&gt;libpipewire-dev&lt;/code&gt; or &lt;code&gt;pipewire-devel&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Install vcpkg, and set &lt;code&gt;VPCKG_ROOT&lt;/code&gt; env. This env is required by &lt;code&gt;CMakePresets.json&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;vcpkg install asio protobuf cxxopts&lt;/code&gt; to install deps. The vcpkg triplet is &lt;code&gt;x64-windows-static-md&lt;/code&gt; for Windows, &lt;code&gt;x64-linux&lt;/code&gt; for Linux. In addition, Windows need run &lt;code&gt;vcpkg install spdlog[wchar] wil&lt;/code&gt;, and Linux need run &lt;code&gt;vcpkg install spdlog&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;cmake --preset linux-Release&lt;/code&gt; to configure.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;cmake --build --preset linux-Release&lt;/code&gt; to build. The &lt;code&gt;as-cmd&lt;/code&gt; is located at &lt;code&gt;out/install/linux-Release/bin/as-cmd&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;For Windows, replace &lt;code&gt;linux&lt;/code&gt; to &lt;code&gt;windows&lt;/code&gt; in previous two steps.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#mkckr0/audio-share&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=mkckr0/audio-share&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://opensource.org/license/apache-2-0&#34;&gt;Apache-2.0 license&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   Copyright 2022-2024 mkckr0 &amp;lt;https://github.com/mkckr0&amp;gt;&#xA;&#xA;   Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;   you may not use this file except in compliance with the License.&#xA;   You may obtain a copy of the License at&#xA;&#xA;       http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;   Unless required by applicable law or agreed to in writing, software&#xA;   distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;   See the License for the specific language governing permissions and&#xA;   limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fmkckr0%2Faudio-share?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fmkckr0%2Faudio-share.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Used Third-party Libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chriskohlhoff/asio&#34;&gt;Asio&lt;/a&gt; licensed under the &lt;a href=&#34;http://www.boost.org/LICENSE_1_0.txt&#34;&gt;BSL-1.0 license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nlohmann/json&#34;&gt;nlohmann/json&lt;/a&gt; licensed under the &lt;a href=&#34;https://github.com/nlohmann/json/raw/develop/LICENSE.MIT&#34;&gt;MIT license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/wil&#34;&gt;WIL&lt;/a&gt; licensed under the &lt;a href=&#34;https://github.com/microsoft/wil/raw/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf&#34;&gt;Protocol Buffers&lt;/a&gt; licensed under the &lt;a href=&#34;https://github.com/protocolbuffers/protobuf/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gabime/spdlog&#34;&gt;spdlog&lt;/a&gt; licensed under the &lt;a href=&#34;https://github.com/gabime/spdlog/raw/v1.x/LICENSE&#34;&gt;MIT license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fmtlib/fmt&#34;&gt;{fmt}&lt;/a&gt; licensed under the &lt;a href=&#34;https://github.com/fmtlib/fmt/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jarro2783/cxxopts&#34;&gt;cxxopts&lt;/a&gt; licensed under the &lt;a href=&#34;https://github.com/jarro2783/cxxopts/raw/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.freedesktop.org/pipewire/pipewire&#34;&gt;PipeWire&lt;/a&gt; licensed under the &lt;a href=&#34;https://gitlab.freedesktop.org/pipewire/pipewire/-/blob/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ktorio/ktor&#34;&gt;Ktor&lt;/a&gt; licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache-2.0 license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jordond/MaterialKolor&#34;&gt;MaterialKolor&lt;/a&gt; licensed under the &lt;a href=&#34;https://github.com/jordond/MaterialKolor/raw/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mosklia&#34;&gt;Mosklia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yuhuantin&#34;&gt;YuHuanTin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>