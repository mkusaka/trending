<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-12-31T01:29:01Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mikage-emu/mikage-dev</title>
    <updated>2025-12-31T01:29:01Z</updated>
    <id>tag:github.com,2025-12-31:/mikage-emu/mikage-dev</id>
    <link href="https://github.com/mikage-emu/mikage-dev" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mikage Developer Edition&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mikage Developer Edition&lt;/h1&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;p&gt;CMake and Conan 2 are required to build Mikage.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;conan install .. -of . --build=missing&lt;/code&gt; (add &lt;code&gt;-s build_type=Debug&lt;/code&gt; for Debug builds)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake -DCMAKE_BUILD_TYPE=Release .. -G Ninja -DCMAKE_PREFIX_PATH=`realpath .` &lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ninja&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some dependencies may be provided by system packages instead of building them via Conan. To enable this behavior, add the following to your Conan profile (&lt;code&gt;~/.conan2/profiles/default&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[platform_requires]&#xA;boost/1.80.0&#xA;cryptopp/8.5.0&#xA;sdl/2.0.20&#xA;range-v3/0.11.0&#xA;catch2/2.13.7&#xA;libunwind/1.8.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For the first launch, three things must be set up:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;a complete &lt;code&gt;aes_keys.txt&lt;/code&gt; must be placed in the &lt;code&gt;build&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;a virtual NAND must be bootstrapped from a game update partition&lt;/li&gt; &#xA; &lt;li&gt;the 3DS initial system setup must be run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Given any game with an update partition, steps 2 and 3 can be done by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd build &amp;amp;&amp;amp; source conanrun.sh &amp;amp;&amp;amp; ./source/mikage game.cci --bootstrap_nand --launch_menu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Currently, this probably requires a game of the EU region. Patching &lt;code&gt;SecureInfo_A&lt;/code&gt; by hand after bootstrapping may work, too.&lt;/p&gt; &#xA;&lt;p&gt;Once set up, it&#39;s sufficient to run &lt;code&gt;./source/mikage game.cci&lt;/code&gt; or &lt;code&gt;./source/mikage --launch_menu&lt;/code&gt;. You&#39;ll need to &lt;code&gt;source conanrun.sh&lt;/code&gt; to set up library directories.&lt;/p&gt; &#xA;&lt;h2&gt;Key bindings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Arrow →: A&lt;/li&gt; &#xA; &lt;li&gt;Arrow ↓: B&lt;/li&gt; &#xA; &lt;li&gt;Arrow ↑: X&lt;/li&gt; &#xA; &lt;li&gt;Arrow ←: Y&lt;/li&gt; &#xA; &lt;li&gt;WASD keys: Circle pad&lt;/li&gt; &#xA; &lt;li&gt;Backspace: HOME (press twice to power down)&lt;/li&gt; &#xA; &lt;li&gt;Q key: L&lt;/li&gt; &#xA; &lt;li&gt;E key: L&lt;/li&gt; &#xA; &lt;li&gt;IJKL keys: D-pad&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;Individual processes may be debugged through an embedded GDB remote server over network port 12345. To enable it, pass &lt;code&gt;--debug&lt;/code&gt; and &lt;code&gt;--attach_to_process &amp;lt;pid&amp;gt;&lt;/code&gt; when launching Mikage. After startup, connect via gdb using &lt;code&gt;tar ext :12345&lt;/code&gt;, wait until Mikage prints a message about waiting for the debugger attach, then type &lt;code&gt;attach &amp;lt;PID&amp;gt;&lt;/code&gt; in the gdb shell. Note that a gdb build for ARM targets may be necessary to do this. Debuggers other than gdb may work but are untested.&lt;/p&gt; &#xA;&lt;p&gt;Processes running in the emulated kernel can be introspected through a simple debug console available via telnet on port 12347.&lt;/p&gt;</summary>
  </entry>
</feed>