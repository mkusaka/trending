<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-07T01:29:38Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kuzudb/kuzu</title>
    <updated>2025-04-07T01:29:38Z</updated>
    <id>tag:github.com,2025-04-07:/kuzudb/kuzu</id>
    <link href="https://github.com/kuzudb/kuzu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Embedded property graph database built for speed. Vector search and full-text search built in. Implements Cypher.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://kuzudb.com/img/kuzu-logo.png&#34; height=&#34;100&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/kuzudb/kuzu/actions&#34;&gt; &lt;img src=&#34;https://github.com/kuzudb/kuzu/actions/workflows/ci-workflow.yml/badge.svg?branch=master&#34; alt=&#34;Github Actions Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/VtX2gw9Rug&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1196510116388806837?logo=discord&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/kuzudb&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/follow-@kuzudb-1DA1F2?logo=twitter&#34; alt=&#34;twitter&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Kuzu&lt;/h1&gt; &#xA;&lt;p&gt;Kuzu is an embedded graph database built for query speed and scalability. Kuzu is optimized for handling complex analytical workloads on very large databases and provides a set of retrieval features, such as a full text search and vector indices. Our core feature set includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flexible Property Graph Data Model and Cypher query language&lt;/li&gt; &#xA; &lt;li&gt;Embeddable, serverless integration into applications&lt;/li&gt; &#xA; &lt;li&gt;Native full text search and vector index&lt;/li&gt; &#xA; &lt;li&gt;Columnar disk-based storage&lt;/li&gt; &#xA; &lt;li&gt;Columnar sparse row-based (CSR) adjacency list/join indices&lt;/li&gt; &#xA; &lt;li&gt;Vectorized and factorized query processor&lt;/li&gt; &#xA; &lt;li&gt;Novel and very fast join algorithms&lt;/li&gt; &#xA; &lt;li&gt;Multi-core query parallelism&lt;/li&gt; &#xA; &lt;li&gt;Serializable ACID transactions&lt;/li&gt; &#xA; &lt;li&gt;Wasm (WebAssembly) bindings for fast, secure execution in the browser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Kuzu is being developed by &lt;a href=&#34;https://kuzudb.com/&#34;&gt;KÃ¹zu Inc.&lt;/a&gt; and is available under a permissible license. So try it out and help us make it better! We welcome your feedback and feature requests.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Installation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install kuzu&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NodeJS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm install kuzu&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cargo add kuzu&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;go get github.com/kuzudb/go-kuzu&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://central.sonatype.com/artifact/com.kuzudb/kuzu&#34;&gt;Maven Central&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C/C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kuzudb/kuzu/releases/latest&#34;&gt;precompiled binaries&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CLI&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kuzudb/kuzu/releases/latest&#34;&gt;precompiled binaries&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To learn more about installation, see our &lt;a href=&#34;https://docs.kuzudb.com/installation&#34;&gt;Installation&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Refer to our &lt;a href=&#34;https://docs.kuzudb.com/get-started/&#34;&gt;Getting Started&lt;/a&gt; page for your first example.&lt;/p&gt; &#xA;&lt;h2&gt;Build from Source&lt;/h2&gt; &#xA;&lt;p&gt;You can build from source using the instructions provided in the &lt;a href=&#34;https://docs.kuzudb.com/developer-guide&#34;&gt;developer guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to Kuzu. If you are interested in contributing to Kuzu, please read our &lt;a href=&#34;https://raw.githubusercontent.com/kuzudb/kuzu/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;By contributing to Kuzu, you agree that your contributions will be licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/kuzudb/kuzu/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;We provide professional support for using Kuzu, ensuring timely responses and flexible coverage. Please visit &lt;a href=&#34;https://kuzudb.com/#support&#34;&gt;here&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;You can contact us at &lt;a href=&#34;mailto:contact@kuzudb.com&#34;&gt;contact@kuzudb.com&lt;/a&gt; or &lt;a href=&#34;https://discord.gg/VtX2gw9Rug&#34;&gt;join our Discord community&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NVIDIA-RTX/NVRHI</title>
    <updated>2025-04-07T01:29:38Z</updated>
    <id>tag:github.com,2025-04-07:/NVIDIA-RTX/NVRHI</id>
    <link href="https://github.com/NVIDIA-RTX/NVRHI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NVRHI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/NVIDIA-RTX/NVRHI/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA-RTX/NVRHI/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;NVRHI (&lt;strong&gt;NV&lt;/strong&gt;IDIA &lt;strong&gt;R&lt;/strong&gt;endering &lt;strong&gt;H&lt;/strong&gt;ardware &lt;strong&gt;I&lt;/strong&gt;nterface) is a library that implements a common abstraction layer over multiple graphics APIs (GAPIs): Direct3D 11, Direct3D 12, and Vulkan 1.2. It works on Windows (x64 only) and Linux (x64 and ARM64).&lt;/p&gt; &#xA;&lt;p&gt;Key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic tracking of resource states and barrier placement (optional).&lt;/li&gt; &#xA; &lt;li&gt;Automatic tracking of resource usage and lifetime, deferred and safe resource destruction.&lt;/li&gt; &#xA; &lt;li&gt;Convenient and efficient resource binding model with little runtime overhead.&lt;/li&gt; &#xA; &lt;li&gt;Easy direct interaction with the underlying GAPI when necessary.&lt;/li&gt; &#xA; &lt;li&gt;Easy portability of the rendering code between the supported GAPIs.&lt;/li&gt; &#xA; &lt;li&gt;Hidden sub-allocation of upload buffers and versioning of constant buffers.&lt;/li&gt; &#xA; &lt;li&gt;Parallel command list recording and multi-queue rendering.&lt;/li&gt; &#xA; &lt;li&gt;Supports all types of pipelines: Graphics, Compute, Ray Tracing, and Meshlet.&lt;/li&gt; &#xA; &lt;li&gt;Validation layer and resource reflection for easy debugging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NVRHI is used in several NVIDIA SDKs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIAGameWorks/nas-sample&#34;&gt;Adaptive and Variable-Rate Shading SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA-RTX/Donut&#34;&gt;Donut Framework&lt;/a&gt; and its &lt;a href=&#34;https://github.com/NVIDIA-RTX/Donut-Samples&#34;&gt;Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIAGameWorks/Opacity-MicroMap-SDK&#34;&gt;Opacity Micro-Map SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIAGameWorks/Path-Tracing-SDK&#34;&gt;Path Tracing SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIAGameWorks/RTXDI&#34;&gt;RTXDI SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Notable third-party projects using NVRHI:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RobertBeckebans/RBDOOM-3-BFG&#34;&gt;RBDoom3-BFG&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Various early versions of NVRHI have been used in various projects created at NVIDIA, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/blog/using-turing-mesh-shaders-nvidia-asteroids-demo&#34;&gt;Asteroids demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/dlss&#34;&gt;DLSS SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/vrworks&#34;&gt;VRWorks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/vxgi&#34;&gt;VXGI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/waveworks&#34;&gt;WaveWorks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows or Linux (x64 or ARM64)&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.10&lt;/li&gt; &#xA; &lt;li&gt;A C++ 17 compiler (Visual Studio 2019, GCC 8 or Clang 6)&lt;/li&gt; &#xA; &lt;li&gt;Windows SDK version 10.0.22621.0 or later for DX12 support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building NVRHI&lt;/h2&gt; &#xA;&lt;p&gt;NVRHI can be configured to be used a set of static libraries in CMake-based projects, or as a single dynamic library.&lt;/p&gt; &#xA;&lt;p&gt;To include NVRHI into a CMake project as static libraries:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add this repository as a submodule.&lt;/li&gt; &#xA; &lt;li&gt;Add a &lt;code&gt;add_subdirectory(nvrhi)&lt;/code&gt; directive to the parent CMakeLists.txt.&lt;/li&gt; &#xA; &lt;li&gt;Add dependencies to the necessary targets: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;nvrhi&lt;/code&gt; for the interface headers, common utilities, and validation;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;nvrhi_d3d11&lt;/code&gt; for DX11 (enabled when &lt;code&gt;NVRHI_WITH_DX11&lt;/code&gt; is &lt;code&gt;ON&lt;/code&gt;);&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;nvrhi_d3d12&lt;/code&gt; for DX12 (enabled when &lt;code&gt;NVRHI_WITH_DX12&lt;/code&gt; is &lt;code&gt;ON&lt;/code&gt;); and&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;nvrhi_vk&lt;/code&gt; for Vulkan (enabled when &lt;code&gt;NVRHI_WITH_VULKAN&lt;/code&gt; is &lt;code&gt;ON&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To build NVRHI as a shared library (DLL or .so):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository recursively (including submodules).&lt;/li&gt; &#xA; &lt;li&gt;Generate the project with CMake: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set the &lt;code&gt;NVRHI_BUILD_SHARED&lt;/code&gt; variable to &lt;code&gt;ON&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Make sure to set the target platform to a 64-bit one. 32-bit builds are not supported.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build and install as normal.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using NVRHI in Applications&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA-RTX/NVRHI/main/doc/ProgrammingGuide.md&#34;&gt;programming guide&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA-RTX/NVRHI/main/doc/Tutorial.md&#34;&gt;tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;NVAPI Support&lt;/h2&gt; &#xA;&lt;p&gt;NVRHI includes optional support for certain DX11 and DX12 extensions available through the NVAPI library. The library is not distributed with NVRHI but is available separately &lt;a href=&#34;https://developer.nvidia.com/nvapi&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To enable NVAPI support, extract the NVAPI SDK into the &lt;code&gt;nvapi&lt;/code&gt; subfolder of your main project and set the &lt;code&gt;NVRHI_WITH_NVAPI&lt;/code&gt; CMake variable to &lt;code&gt;ON&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following extensions are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Opacity Micro-Maps (DX12, Ada+)&lt;/li&gt; &#xA; &lt;li&gt;Shader Execution Reordering on DX12 (DX12, Ada+)&lt;/li&gt; &#xA; &lt;li&gt;Single Pass Stereo (Pascal+)&lt;/li&gt; &#xA; &lt;li&gt;Fast Geometry Shader with optional coordinate swizzling (Maxwell+)&lt;/li&gt; &#xA; &lt;li&gt;Conservative Raster and other rasterizer features (Maxwell+)&lt;/li&gt; &#xA; &lt;li&gt;HLSL Extensions through a fake UAV slot (see &lt;a href=&#34;https://developer.nvidia.com/unlocking-gpu-intrinsics-hlsl&#34;&gt;this blog post&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RTXMU Integration&lt;/h2&gt; &#xA;&lt;p&gt;NVRHI includes an optional integration of the &lt;a href=&#34;https://github.com/NVIDIA-RTX/RTXMU&#34;&gt;RTXMU&lt;/a&gt; library. The library is included as a git submodule, and can be enabled with the &lt;code&gt;NVRHI_WITH_RTXMU&lt;/code&gt; CMake variable.&lt;/p&gt; &#xA;&lt;p&gt;When RTXMU integration is enabled, all bottom-level ray tracing acceleration structures (BLAS&#39;es) are managed by that library. All built BLAS&#39;es that have the &lt;code&gt;AllowCompaction&lt;/code&gt; flag set are automatically compacted when &lt;code&gt;ICommandList::compactBottomLevelAccelStructs&lt;/code&gt; method is called. No other configuration is necessary.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;NVRHI is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA-RTX/NVRHI/main/LICENSE.txt&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>