<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-15T01:30:55Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SpiderLabs/ModSecurity</title>
    <updated>2022-12-15T01:30:55Z</updated>
    <id>tag:github.com,2022-12-15:/SpiderLabs/ModSecurity</id>
    <link href="https://github.com/SpiderLabs/ModSecurity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ModSecurity is an open source, cross platform web application firewall (WAF) engine for Apache, IIS and Nginx that is developed by Trustwave&#39;s SpiderLabs. It has a robust event-based programming language which provides protection from a range of attacks against web applications and allows for HTTP traffic monitoring, logging and real-time analys…&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/SpiderLabs/ModSecurity/raw/v3/master/others/modsec.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/SpiderLabs/ModSecurity/workflows/Quality%20Assurance/badge.svg?sanitize=true&#34; alt=&#34;Quality Assurance&#34;&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=USHvY32Uy62L&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=USHvY32Uy62L&amp;amp;metric=alert_status&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=USHvY32Uy62L&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=USHvY32Uy62L&amp;amp;metric=sqale_rating&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=USHvY32Uy62L&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=USHvY32Uy62L&amp;amp;metric=reliability_rating&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=USHvY32Uy62L&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=USHvY32Uy62L&amp;amp;metric=security_rating&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=USHvY32Uy62L&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=USHvY32Uy62L&amp;amp;metric=vulnerabilities&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Libmodsecurity is one component of the ModSecurity v3 project. The library codebase serves as an interface to ModSecurity Connectors taking in web traffic and applying traditional ModSecurity processing. In general, it provides the capability to load/interpret rules written in the ModSecurity SecRules format and apply them to HTTP content provided by your application via Connectors.&lt;/p&gt; &#xA;&lt;p&gt;If you are looking for ModSecurity for Apache (aka ModSecurity v2.x), it is still under maintenance and available: &lt;a href=&#34;https://github.com/SpiderLabs/ModSecurity/tree/v2/master&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What is the difference between this project and the old ModSecurity (v2.x.x)?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All Apache dependencies have been removed&lt;/li&gt; &#xA; &lt;li&gt;Higher performance&lt;/li&gt; &#xA; &lt;li&gt;New features&lt;/li&gt; &#xA; &lt;li&gt;New architecture&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Libmodsecurity is a complete rewrite of the ModSecurity platform. When it was first devised the ModSecurity project started as just an Apache module. Over time the project has been extended, due to popular demand, to support other platforms including (but not limited to) Nginx and IIS. In order to provide for the growing demand for additional platform support, it has became necessary to remove the Apache dependencies underlying this project, making it more platform independent.&lt;/p&gt; &#xA;&lt;p&gt;As a result of this goal we have rearchitected Libmodsecurity such that it is no longer dependent on the Apache web server (both at compilation and during runtime). One side effect of this is that across all platforms users can expect increased performance. Additionally, we have taken this opportunity to lay the groundwork for some new features that users have been long seeking. For example we are looking to natively support auditlogs in the JSON format, along with a host of other functionality in future versions.&lt;/p&gt; &#xA;&lt;h3&gt;It is no longer just a module.&lt;/h3&gt; &#xA;&lt;p&gt;The &#39;ModSecurity&#39; branch no longer contains the traditional module logic (for Nginx, Apache, and IIS) that has traditionally been packaged all together. Instead, this branch only contains the library portion (libmodsecurity) for this project. This library is consumed by what we have termed &#39;Connectors&#39; these connectors will interface with your webserver and provide the library with a common format that it understands. Each of these connectors is maintained as a separate GitHub project. For instance, the Nginx connector is supplied by the ModSecurity-nginx project (&lt;a href=&#34;https://github.com/SpiderLabs/ModSecurity-nginx&#34;&gt;https://github.com/SpiderLabs/ModSecurity-nginx&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Keeping these connectors separated allows each project to have different release cycles, issues and development trees. Additionally, it means that when you install ModSecurity v3 you only get exactly what you need, no extras you won&#39;t be using.&lt;/p&gt; &#xA;&lt;h1&gt;Compilation&lt;/h1&gt; &#xA;&lt;p&gt;Before starting the compilation process, make sure that you have all the dependencies in place. Read the subsection “Dependencies” for further information.&lt;/p&gt; &#xA;&lt;p&gt;After the compilation make sure that there are no issues on your build/platform. We strongly recommend the utilization of the unit tests and regression tests. These test utilities are located under the subfolder ‘tests’.&lt;/p&gt; &#xA;&lt;p&gt;As a dynamic library, don’t forget that libmodsecurity must be installed to a location (folder) where you OS will be looking for dynamic libraries.&lt;/p&gt; &#xA;&lt;h3&gt;Unix (Linux, MacOS, FreeBSD, …)&lt;/h3&gt; &#xA;&lt;p&gt;On unix the project uses autotools to help the compilation process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./build.sh&#xA;$ ./configure&#xA;$ make&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Details on distribution specific builds can be found in our Wiki: &lt;a href=&#34;https://github.com/SpiderLabs/ModSecurity/wiki/Compilation-recipes&#34;&gt;Compilation Recipes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Windows build is not ready yet.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;This library is written in C++ using the C++11 standards. It also uses Flex and Yacc to produce the “Sec Rules Language” parser. Other, mandatory dependencies include YAJL, as ModSecurity uses JSON for producing logs and its testing framework, libpcre (not yet mandatory) for processing regular expressions in SecRules, and libXML2 (not yet mandatory) which is used for parsing XML requests.&lt;/p&gt; &#xA;&lt;p&gt;All others dependencies are related to operators specified within SecRules or configuration directives and may not be required for compilation. A short list of such dependencies is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libinjection is needed for the operator @detectXSS and @detectSQL&lt;/li&gt; &#xA; &lt;li&gt;curl is needed for the directive SecRemoteRules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If those libraries are missing ModSecurity will be compiled without the support for the operator @detectXSS and the configuration directive SecRemoteRules.&lt;/p&gt; &#xA;&lt;h1&gt;Library documentation&lt;/h1&gt; &#xA;&lt;p&gt;The library documentation is written within the code in Doxygen format. To generate this documentation, please use the doxygen utility with the provided configuration file, “doxygen.cfg”, located with the &#34;doc/&#34; subfolder. This will generate HTML formatted documentation including usage examples.&lt;/p&gt; &#xA;&lt;h1&gt;Library utilization&lt;/h1&gt; &#xA;&lt;p&gt;The library provides a C++ and C interface. Some resources are currently only available via the C++ interface, for instance, the capability to create custom logging mechanism (see the regression test to check for how those logging mechanism works). The objective is to have both APIs (C, C++) providing the same functionality, if you find an aspect of the API that is missing via a particular interface, please open an issue.&lt;/p&gt; &#xA;&lt;p&gt;Inside the subfolder examples, there are simple examples on how to use the API. Below some are illustrated:&lt;/p&gt; &#xA;&lt;h3&gt;Simple example using C++&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;using ModSecurity::ModSecurity;&#xA;using ModSecurity::Rules;&#xA;using ModSecurity::Transaction;&#xA;&#xA;ModSecurity *modsec;&#xA;ModSecurity::Rules *rules;&#xA;&#xA;modsec = new ModSecurity();&#xA;&#xA;rules = new Rules();&#xA;&#xA;rules-&amp;gt;loadFromUri(rules_file);&#xA;&#xA;Transaction *modsecTransaction = new Transaction(modsec, rules);&#xA;&#xA;modsecTransaction-&amp;gt;processConnection(&#34;127.0.0.1&#34;);&#xA;if (modsecTransaction-&amp;gt;intervention()) {&#xA;   std::cout &amp;lt;&amp;lt; &#34;There is an intervention&#34; &amp;lt;&amp;lt; std::endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Simple example using C&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;modsecurity/modsecurity.h&#34;&#xA;#include &#34;modsecurity/transaction.h&#34;&#xA;&#xA;&#xA;char main_rule_uri[] = &#34;basic_rules.conf&#34;;&#xA;&#xA;int main (int argc, char **argv)&#xA;{&#xA;    ModSecurity *modsec = NULL;&#xA;    Transaction *transaction = NULL;&#xA;    Rules *rules = NULL;&#xA;&#xA;    modsec = msc_init();&#xA;&#xA;    rules = msc_create_rules_set();&#xA;    msc_rules_add_file(rules, main_rule_uri);&#xA;&#xA;    transaction = msc_new_transaction(modsec, rules);&#xA;&#xA;    msc_process_connection(transaction, &#34;127.0.0.1&#34;);&#xA;    msc_process_uri(transaction, &#34;http://www.modsecurity.org/test?key1=value1&amp;amp;key2=value2&amp;amp;key3=value3&amp;amp;test=args&amp;amp;test=test&#34;);&#xA;    msc_process_request_headers(transaction);&#xA;    msc_process_request_body(transaction);&#xA;    msc_process_response_headers(transaction);&#xA;    msc_process_response_body(transaction);&#xA;&#xA;    return 0;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;You are more than welcome to contribute to this project and look forward to growing the community around this new version of ModSecurity. Areas of interest include: New functionalities, fixes, bug report, support for beginning users, or anything that you are willing to help with.&lt;/p&gt; &#xA;&lt;h2&gt;Providing patches&lt;/h2&gt; &#xA;&lt;p&gt;We prefer to have your patch within the GitHub infrastructure to facilitate our review work, and our Q.A. integration. GitHub provides excellent documentation on how to perform “Pull Requests”, more information available here: &lt;a href=&#34;https://help.github.com/articles/using-pull-requests/&#34;&gt;https://help.github.com/articles/using-pull-requests/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please respect the coding style. Pull requests can include various commits, so provide one fix or one piece of functionality per commit. Please do not change anything outside the scope of your target work (e.g. coding style in a function that you have passed by). For further information about the coding style used in this project, please check: &lt;a href=&#34;https://www.chromium.org/blink/coding-style&#34;&gt;https://www.chromium.org/blink/coding-style&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Provides explanative commit messages. Your first line should give the highlights of your patch, 3rd and on give a more detailed explanation/technical details about your patch. Patch explanation is valuable during the review process.&lt;/p&gt; &#xA;&lt;h3&gt;Don’t know where to start?&lt;/h3&gt; &#xA;&lt;p&gt;Within our code there are various items marked as TODO or FIXME that may need your attention. Check the list of items by performing a grep:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd /path/to/modsecurity-nginx&#xA;$ egrep -Rin &#34;TODO|FIXME&#34; -R *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A TODO list is also available as part of the Doxygen documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Testing your patch&lt;/h3&gt; &#xA;&lt;p&gt;Along with the manual testing, we strongly recommend you to use the our regression tests and unit tests. If you have implemented an operator, don’t forget to create unit tests for it. If you implement anything else, it is encouraged that you develop complimentary regression tests for it.&lt;/p&gt; &#xA;&lt;p&gt;The regression test and unit test utilities are native and do not demand any external tool or script, although you need to fetch the test cases from other repositories, as they are shared with other versions of ModSecurity, those others repositories git submodules. To fetch the submodules repository and run the utilities, follow the commands listed below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd /path/to/your/ModSecurity&#xA;$ git submodule foreach git pull&#xA;$ cd test&#xA;$ ./regression-tests&#xA;$ ./unit-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;Before start the debugging process, make sure of where your bug is. The problem could be on your connector or in libmodsecurity. In order to identify where the bug is, it is recommended that you develop a regression test that mimics the scenario where the bug is happening. If the bug is reproducible with the regression-test utility, then it will be far simpler to debug and ensure that it never occurs again. On Linux it is recommended that anyone undertaking debugging utilize gdb and/or valgrind as needed.&lt;/p&gt; &#xA;&lt;p&gt;During the configuration/compilation time, you may want to disable the compiler optimization making your “back traces” populated with readable data. Use the CFLAGS to disable the compilation optimization parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export CFLAGS=&#34;-g -O0&#34;&#xA;$ ./build.sh&#xA;$ ./configure&#xA;$ make&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you are facing a configuration issue or something is not working as you expected to be, please use the ModSecurity user’s mailing list. Issues on GitHub are also welcomed, but we prefer to have user ask questions on the mailing list first so that you can reach an entire community. Also don’t forget to look for existing issues before open a new one.&lt;/p&gt; &#xA;&lt;p&gt;If you are going to open a new issue on GitHub, don’t forget to tell us the version of your libmodsecurity and the version of a specific connector if there is one.&lt;/p&gt; &#xA;&lt;h3&gt;Security issue&lt;/h3&gt; &#xA;&lt;p&gt;Please do not make public any security issue. Contact us at: &lt;a href=&#34;mailto:security@modsecurity.org&#34;&gt;security@modsecurity.org&lt;/a&gt; reporting the issue. Once the problem is fixed your credit will be given.&lt;/p&gt; &#xA;&lt;h2&gt;Feature request&lt;/h2&gt; &#xA;&lt;p&gt;We are open to discussing any new feature request with the community via the mailing lists. You can alternativly, feel free to open GitHub issues requesting new features. Before opening a new issue, please check if there is one already opened on the same topic.&lt;/p&gt; &#xA;&lt;h2&gt;Bindings&lt;/h2&gt; &#xA;&lt;p&gt;The libModSecurity design allows the integration with bindings. There is an effort to avoid breaking API [binary] compatibility to make an easy integration with possible bindings. Currently, there are two notable projects maintained by the community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python - &lt;a href=&#34;https://github.com/actions-security/pymodsecurity&#34;&gt;https://github.com/actions-security/pymodsecurity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Varnish - &lt;a href=&#34;https://github.com/xdecock/vmod-modsecurity&#34;&gt;https://github.com/xdecock/vmod-modsecurity&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Packaging&lt;/h2&gt; &#xA;&lt;p&gt;Having our packages in distros on time is a desire that we have, so let us know if there is anything we can do to facilitate your work as a packager.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsor Note&lt;/h2&gt; &#xA;&lt;p&gt;Development of ModSecurity is sponsored by Trustwave. Sponsorship will end July 1, 2024. Additional information can be found here &lt;a href=&#34;https://www.trustwave.com/en-us/resources/security-resources/software-updates/end-of-sale-and-trustwave-support-for-modsecurity-web-application-firewall/&#34;&gt;https://www.trustwave.com/en-us/resources/security-resources/software-updates/end-of-sale-and-trustwave-support-for-modsecurity-web-application-firewall/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-husky/unreal-hmp</title>
    <updated>2022-12-15T01:30:55Z</updated>
    <id>tag:github.com,2022-12-15:/binary-husky/unreal-hmp</id>
    <link href="https://github.com/binary-husky/unreal-hmp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multiagent research environment toolbox based on Unreal Engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unreal-HMAP&lt;/h1&gt; &#xA;&lt;p&gt;基于UnrealEngine开发，文档正在完善中。Developed with Unreal Engine, documenting is in process.&lt;/p&gt; &#xA;&lt;p&gt;此项目处于活跃开发阶段，请打星关注哦。 &lt;strong&gt;Please &lt;code&gt;star&lt;/code&gt; the Github project. Your encouragement is extremely important to us as researchers: &lt;code&gt;https://github.com/binary-husky/unreal-hmp&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Contact us:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Qingxu Fu, CASIA, &lt;a href=&#34;mailto:fuqingxu2019@ia.ac.cn&#34;&gt;fuqingxu2019@ia.ac.cn&lt;/a&gt;，QQ505030475&lt;/li&gt; &#xA; &lt;li&gt;Tianyi Hu, CASIA, &lt;a href=&#34;mailto:hutianyi2021@ia.ac.cn&#34;&gt;hutianyi2021@ia.ac.cn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Yifan Xu, CASIA, &lt;a href=&#34;mailto:xuyifan2021@ia.ac.cn&#34;&gt;xuyifan2021@ia.ac.cn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Organization：&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Institute of Automation, Chinese Academy of Sciences&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;School of Artificial Intelligence, University of Chinese Academy of Sciences&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Yiteam Swarm Intelligent Research Group&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;简介&lt;/h1&gt; &#xA;&lt;p&gt;Unreal-Based Hybrid Multiagent Playground (Unreal-HMAP) 是基于虚幻引擎的新一代多智能体环境仿真环境。 该平台支持多队伍对抗，为第一个（也是目前为止唯一一个）基于虚幻引擎的多智能体+多队伍强化学习环境。 UHMAP面向对抗性异构多智能体强化学习场景。 接口部分采用Python编写， 虚幻引擎部分采用C++处理与Python的通讯接口，其他部分采用蓝图。 项目引入xtensor用于加速C++部分的数学运算。 在科研实验方面：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可编译为Headless的纯计算模式（即dedicated server，用于训练）&lt;/li&gt; &#xA; &lt;li&gt;可实现任意倍率的仿真加速，直到跑满CPU&lt;/li&gt; &#xA; &lt;li&gt;可重复性强。排除了UnrealEngine中各种会造成实验不可重复的蝴蝶效应因素&lt;/li&gt; &#xA; &lt;li&gt;支持大规模。与Python端的通讯协议高度优化，避免了随智能体数量增多导致的IO卡顿&lt;/li&gt; &#xA; &lt;li&gt;非常高效，极其节省CPU。Unreal引擎本身的效率远超预想。&lt;/li&gt; &#xA; &lt;li&gt;跨平台。不管是Windows、Linux还是MacOs都能编译Headless模式和渲染模式的客户端&lt;/li&gt; &#xA; &lt;li&gt;可跨OS连接训练中的Headless进程，甚至可以观看训练中的环境.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/binary-husky/unreal-hmp/master/Docs/Demo/uhmap-bbad.jpg&#34; width=&#34;300&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/binary-husky/unreal-hmp/master/Docs/Demo/uhmap-hete.jpg&#34; width=&#34;300&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- &lt;div align=&#34;center&#34;&gt;&#xA;&lt;img src=&#34;Docs/Demo/uhmap-island.jpg&#34; width=&#34;300&#34; &gt;&#xA;&lt;/div&gt; --&gt; &#xA;&lt;h1&gt;安装方法&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;第1步，必须从&lt;code&gt;源代码&lt;/code&gt;安装虚幻引擎，具体方法见虚幻引擎的官方文档：&lt;a href=&#34;https://docs.unrealengine.com/4.27/zh-CN/ProductionPipelines/DevelopmentSetup/BuildingUnrealEngine/&#34;&gt;https://docs.unrealengine.com/4.27/zh-CN/ProductionPipelines/DevelopmentSetup/BuildingUnrealEngine/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;第2步，克隆本仓库。&lt;code&gt;git clone https://github.com/binary-husky/unreal-hmp.git&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;第3步，下载github不能管理的大文件。运行&lt;code&gt;python Please_Run_This_First_To_Fetch_Big_Files.py&lt;/code&gt;。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;第4步，&lt;code&gt;右&lt;/code&gt;击上一步下载的&lt;code&gt;UHMP.uproject&lt;/code&gt;，选择&lt;code&gt;switch unreal engine version&lt;/code&gt;，再选择&lt;code&gt;source build at xxxxx&lt;/code&gt;确认。然后打开生成的&lt;code&gt;UHMP.sln&lt;/code&gt;，编译即可。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;最后，双击&lt;code&gt;UHMP.uproject&lt;/code&gt;进入虚幻引擎编辑器。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;注意，第1步和第4步较难，建议参考以下视频（视频中前1分46秒为第1步流程，后面为第4步流程）： &lt;a href=&#34;https://ageasga-my.sharepoint.com/&lt;span&gt;✌&lt;/span&gt;/g/personal/fuqingxu_yiteam_tech/EawfqsV2jF5Nsv3KF7X1-woBH-VTvELL6FSRX4cIgUboLg?e=Vmp67E&#34;&gt;https://ageasga-my.sharepoint.com/&lt;span&gt;✌&lt;/span&gt;/g/personal/fuqingxu_yiteam_tech/EawfqsV2jF5Nsv3KF7X1-woBH-VTvELL6FSRX4cIgUboLg?e=Vmp67E&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;直接安装编译后的二进制客户端&lt;/h1&gt; &#xA;&lt;p&gt;见 &lt;a href=&#34;https://github.com/binary-husky/hmp2g/raw/master/ZDOCS/use_unreal_hmap.md&#34;&gt;https://github.com/binary-husky/hmp2g/blob/master/ZDOCS/use_unreal_hmap.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;环境设计方法&lt;/h1&gt; &#xA;&lt;p&gt;文档正在完善，简单demo的视频教程见&lt;code&gt;EnvDesignTutorial.pptx&lt;/code&gt;（需要完成安装步骤3以下载此pptx文件）&lt;/p&gt; &#xA;&lt;p&gt;设计方法目录：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;第一章 虚幻引擎部分&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;建立地图（Level）&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;建立智能体蓝图（Agent Actor）&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;设计智能体蓝图程序逻辑&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Episode关键事件通知机制&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;定义动作（虚幻引擎侧）（未完待续）&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;由Python端控制Agent的自定义参数&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;第二章 Python接口部分&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;建立任务文件（SubTask）&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;修改智能体初始化代码&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;修改智能体奖励代码&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;选择各队伍的控制算法&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;全闭环调试方法&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;第三章 附录&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;无渲染加速与Linux交叉编译&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;自定义动作（未完待续）&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;项目打包方法&lt;/h1&gt; &#xA;&lt;h2&gt;运行一下脚本即可。&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;其中&lt;code&gt;Render/Server&lt;/code&gt;代表&lt;code&gt;包含图形渲染/无界面仅计算&lt;/code&gt;，后者一般用于RL训练。&lt;/li&gt; &#xA; &lt;li&gt;其中&lt;code&gt;Win/linux&lt;/code&gt;代表目标操作系统，注意在windows上编译linux程序需要安装&lt;code&gt;虚幻引擎交叉编译工具&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;python BuildlinuxRender.py&#xA;python BuildLinuxServer.py&#xA;python BuildWinRender.py&#xA;python BuildWinServer.py&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>wilicc/gpu-burn</title>
    <updated>2022-12-15T01:30:55Z</updated>
    <id>tag:github.com,2022-12-15:/wilicc/gpu-burn</id>
    <link href="https://github.com/wilicc/gpu-burn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-GPU CUDA stress test&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gpu-burn&lt;/h1&gt; &#xA;&lt;p&gt;Multi-GPU CUDA stress test &lt;a href=&#34;http://wili.cc/blog/gpu-burn.html&#34;&gt;http://wili.cc/blog/gpu-burn.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Easy docker build and run&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/wilicc/gpu-burn&#xA;cd gpu-burn&#xA;docker build -t gpu_burn .&#xA;docker run --rm --gpus all gpu_burn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;To build GPU Burn:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To remove artifacts built by GPU Burn:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make clean&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;GPU Burn builds with a default Compute Capability of 5.0. To override this with a different value:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make COMPUTE=&amp;lt;compute capability value&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;CFLAGS can be added when invoking make to add to the default list of compiler flags:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make CFLAGS=-Wall&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;LDFLAGS can be added when invoking make to add to the default list of linker flags:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make LDFLAGS=-lmylib&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;NVCCFLAGS can be added when invoking make to add to the default list of nvcc flags:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make NVCCFLAGS=-ccbin &amp;lt;path to host compiler&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;CUDAPATH can be added to point to a non standard install or specific version of the cuda toolkit (default is /usr/local/cuda):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make CUDAPATH=/usr/local/cuda-&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;CCPATH can be specified to point to a specific gcc (default is /usr/bin):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make CCPATH=/usr/local/bin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;GPU Burn&#xA;Usage: gpu_burn [OPTIONS] [TIME]&#xA;&#xA;-d&#x9;Use doubles&#xA;-tc&#x9;Use Tensor cores&#xA;-h&#x9;Show this help message&#xA;&#xA;Example:&#xA;gpu_burn -d 3600&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>