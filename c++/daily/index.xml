<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-20T01:32:45Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Neargye/magic_enum</title>
    <updated>2022-09-20T01:32:45Z</updated>
    <id>tag:github.com,2022-09-20:/Neargye/magic_enum</id>
    <link href="https://github.com/Neargye/magic_enum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Static reflection for enums (to string, from string, iteration) for modern C++, work with any enum type without any macro or boilerplate code&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://bit.ly/3OMysM8&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg?sanitize=true&#34; alt=&#34;Stand With Ukraine&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; __  __             _        ______                          _____&#xA;|  \/  |           (_)      |  ____|                        / ____|_     _&#xA;| \  / | __ _  __ _ _  ___  | |__   _ __  _   _ _ __ ___   | |   _| |_ _| |_&#xA;| |\/| |/ _` |/ _` | |/ __| |  __| | &#39;_ \| | | | &#39;_ ` _ \  | |  |_   _|_   _|&#xA;| |  | | (_| | (_| | | (__  | |____| | | | |_| | | | | | | | |____|_|   |_|&#xA;|_|  |_|\__,_|\__, |_|\___| |______|_| |_|\__,_|_| |_| |_|  \_____|&#xA;               __/ |&#xA;              |___/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Neargye/magic_enum/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Neargye/magic_enum.svg?sanitize=true&#34; alt=&#34;Github releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://conan.io/center/magic_enum&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Conan-package-blueviolet&#34; alt=&#34;Conan package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/vcpkg/tree/master/ports/magic-enum&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Vcpkg-package-blueviolet&#34; alt=&#34;Vcpkg package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.cppget.org/magic_enum?q=magic_enum&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Build2-package-blueviolet&#34; alt=&#34;Build2 package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Neargye/magic_enum.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://wandbox.org/permlink/JPMZqT9mgaUdooyC&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/try-online-blue.svg?sanitize=true&#34; alt=&#34;Try online&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godbolt.org/z/BxfmsH&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/compiler_explorer-online-blue.svg?sanitize=true&#34; alt=&#34;Compiler explorer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Magic Enum C++&lt;/h1&gt; &#xA;&lt;p&gt;Header-only C++17 library provides static reflection for enums, work with any enum type without any macro or boilerplate code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;enum_cast&lt;/code&gt; obtains enum value from string or integer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enum_value&lt;/code&gt; returns enum value at specified index.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enum_values&lt;/code&gt; obtains enum value sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enum_count&lt;/code&gt; returns number of enum values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enum_integer&lt;/code&gt; obtains integer value from enum value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enum_name&lt;/code&gt; returns name from enum value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enum_names&lt;/code&gt; obtains string enum name sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enum_entries&lt;/code&gt; obtains pair (value enum, string enum name) sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enum_index&lt;/code&gt; obtains index in enum value sequence from enum value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enum_contains&lt;/code&gt; checks whether enum contains enumerator with such value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enum_type_name&lt;/code&gt; returns name of enum type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enum_fuse&lt;/code&gt; allows multidimensional switch/cases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enum_switch&lt;/code&gt; allows runtime enum value transformation to constexpr context.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enum_for_each&lt;/code&gt; calls a function with all enum constexpr value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;is_unscoped_enum&lt;/code&gt; checks whether type is an &lt;a href=&#34;https://en.cppreference.com/w/cpp/language/enum#Unscoped_enumeration&#34;&gt;Unscoped enumeration&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;is_scoped_enum&lt;/code&gt; checks whether type is an &lt;a href=&#34;https://en.cppreference.com/w/cpp/language/enum#Scoped_enumerations&#34;&gt;Scoped enumeration&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;underlying_type&lt;/code&gt; improved UB-free &#34;SFINAE-friendly&#34; &lt;a href=&#34;https://en.cppreference.com/w/cpp/types/underlying_type&#34;&gt;underlying_type&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ostream_operators&lt;/code&gt; ostream operators for enums.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bitwise_operators&lt;/code&gt; bitwise operators for enums.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/doc/reference.md&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/doc/limitations.md&#34;&gt;Limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/#Integration&#34;&gt;Integration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C++17&lt;/li&gt; &#xA; &lt;li&gt;Header-only&lt;/li&gt; &#xA; &lt;li&gt;Dependency-free&lt;/li&gt; &#xA; &lt;li&gt;Compile-time&lt;/li&gt; &#xA; &lt;li&gt;Enum to string&lt;/li&gt; &#xA; &lt;li&gt;String to enum&lt;/li&gt; &#xA; &lt;li&gt;Iterating over enum&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/example/example.cpp&#34;&gt;Examples&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// For example color enum.&#xA;enum class Color { RED = 2, BLUE = 4, GREEN = 8 };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum value to string&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Color color = Color::RED;&#xA;auto color_name = magic_enum::enum_name(color);&#xA;// color_name -&amp;gt; &#34;RED&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;String to enum value&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::string color_name{&#34;GREEN&#34;};&#xA;auto color = magic_enum::enum_cast&amp;lt;Color&amp;gt;(color_name);&#xA;if (color.has_value()) {&#xA;  // color.value() -&amp;gt; Color::GREEN&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Integer to enum value&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int color_integer = 2;&#xA;auto color = magic_enum::enum_cast&amp;lt;Color&amp;gt;(color_integer);&#xA;if (color.has_value()) {&#xA;  // color.value() -&amp;gt; Color::RED&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Indexed access to enum value&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::size_t i = 1;&#xA;Color color = magic_enum::enum_value&amp;lt;Color&amp;gt;(i);&#xA;// color -&amp;gt; Color::BLUE&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum value sequence&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;constexpr auto colors = magic_enum::enum_values&amp;lt;Color&amp;gt;();&#xA;// colors -&amp;gt; {Color::RED, Color::BLUE, Color::GREEN}&#xA;// colors[0] -&amp;gt; Color::RED&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Number of enum elements&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;constexpr std::size_t color_count = magic_enum::enum_count&amp;lt;Color&amp;gt;();&#xA;// color_count -&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum value to integer&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Color color = Color::RED;&#xA;auto color_integer = magic_enum::enum_integer(color);&#xA;// color -&amp;gt; 2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum names sequence&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;constexpr auto color_names = magic_enum::enum_names&amp;lt;Color&amp;gt;();&#xA;// color_names -&amp;gt; {&#34;RED&#34;, &#34;BLUE&#34;, &#34;GREEN&#34;}&#xA;// color_names[0] -&amp;gt; &#34;RED&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum entries sequence&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;constexpr auto color_entries = magic_enum::enum_entries&amp;lt;Color&amp;gt;();&#xA;// color_entries -&amp;gt; {{Color::RED, &#34;RED&#34;}, {Color::BLUE, &#34;BLUE&#34;}, {Color::GREEN, &#34;GREEN&#34;}}&#xA;// color_entries[0].first -&amp;gt; Color::RED&#xA;// color_entries[0].second -&amp;gt; &#34;RED&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum fusion for multi-level switch/case statements&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;switch (magic_enum::enum_fuse(color, direction).value()) {&#xA;  case magic_enum::enum_fuse(Color::RED, Directions::Up).value(): // ...&#xA;  case magic_enum::enum_fuse(Color::BLUE, Directions::Down).value(): // ...&#xA;// ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum switch runtime value as constexpr constant&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Color color = Color::RED;&#xA;&#xA;magic_enum::enum_switch([] (auto val) {&#xA;  constexpr Color c_color = val;&#xA;  // ...&#xA;}, color);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum iterate for each enum as constexpr constant&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;magic_enum::enum_for_each&amp;lt;Color&amp;gt;([] (auto val) {&#xA;  constexpr Color c_color = val;&#xA;  // ...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ostream operator for enum&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;using namespace magic_enum::ostream_operators; // out-of-the-box ostream operators for enums.&#xA;Color color = Color::BLUE;&#xA;std::cout &amp;lt;&amp;lt; color &amp;lt;&amp;lt; std::endl; // &#34;BLUE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bitwise operator for enum&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;enum class Flags { A = 1 &amp;lt;&amp;lt; 0, B = 1 &amp;lt;&amp;lt; 1, C = 1 &amp;lt;&amp;lt; 2, D = 1 &amp;lt;&amp;lt; 3 };&#xA;using namespace magic_enum::bitwise_operators; // out-of-the-box bitwise operators for enums.&#xA;// Support operators: ~, |, &amp;amp;, ^, |=, &amp;amp;=, ^=.&#xA;Flags flags = Flags::A | Flags::B &amp;amp; ~Flags::C;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Checks whether type is an &lt;a href=&#34;https://en.cppreference.com/w/cpp/language/enum#Unscoped_enumeration&#34;&gt;Unscoped enumeration&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;enum color { red, green, blue };&#xA;enum class direction { left, right };&#xA;&#xA;magic_enum::is_unscoped_enum&amp;lt;color&amp;gt;::value -&amp;gt; true&#xA;magic_enum::is_unscoped_enum&amp;lt;direction&amp;gt;::value -&amp;gt; false&#xA;magic_enum::is_unscoped_enum&amp;lt;int&amp;gt;::value -&amp;gt; false&#xA;&#xA;// Helper variable template.&#xA;magic_enum::is_unscoped_enum_v&amp;lt;color&amp;gt; -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Checks whether type is an &lt;a href=&#34;https://en.cppreference.com/w/cpp/language/enum#Scoped_enumerations&#34;&gt;Scoped enumeration&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;enum color { red, green, blue };&#xA;enum class direction { left, right };&#xA;&#xA;magic_enum::is_scoped_enum&amp;lt;color&amp;gt;::value -&amp;gt; false&#xA;magic_enum::is_scoped_enum&amp;lt;direction&amp;gt;::value -&amp;gt; true&#xA;magic_enum::is_scoped_enum&amp;lt;int&amp;gt;::value -&amp;gt; false&#xA;&#xA;// Helper variable template.&#xA;magic_enum::is_scoped_enum_v&amp;lt;direction&amp;gt; -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Static storage enum variable to string This version is much lighter on the compile times and is not restricted to the enum_range &lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/doc/limitations.md&#34;&gt;limitation&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;constexpr Color color = Color::BLUE;&#xA;constexpr auto color_name = magic_enum::enum_name&amp;lt;color&amp;gt;();&#xA;// color_name -&amp;gt; &#34;BLUE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Remarks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;magic_enum&lt;/code&gt; does not pretend to be a silver bullet for reflection for enums, it was originally designed for small enum.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Before use, read the &lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/doc/limitations.md&#34;&gt;limitations&lt;/a&gt; of functionality.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You should add the required file &lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/include/magic_enum.hpp&#34;&gt;magic_enum.hpp&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using &lt;a href=&#34;https://github.com/Microsoft/vcpkg/&#34;&gt;vcpkg&lt;/a&gt; on your project for external dependencies, then you can use the &lt;a href=&#34;https://github.com/microsoft/vcpkg/tree/master/ports/magic-enum&#34;&gt;magic-enum package&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using &lt;a href=&#34;https://www.conan.io/&#34;&gt;Conan&lt;/a&gt; to manage your dependencies, merely add &lt;code&gt;magic_enum/x.y.z&lt;/code&gt; to your conan&#39;s requires, where &lt;code&gt;x.y.z&lt;/code&gt; is the release version you want to use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using &lt;a href=&#34;https://build2.org/&#34;&gt;Build2&lt;/a&gt; to build and manage your dependencies, add &lt;code&gt;depends: magic_enum ^x.y.z&lt;/code&gt; to the manifest file where &lt;code&gt;x.y.z&lt;/code&gt; is the release version you want to use. You can then import the target using &lt;code&gt;magic_enum%lib{magic_enum}&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alternatively, you can use something like &lt;a href=&#34;https://github.com/TheLartians/CPM&#34;&gt;CPM&lt;/a&gt; which is based on CMake&#39;s &lt;code&gt;Fetch_Content&lt;/code&gt; module.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;CPMAddPackage(&#xA;    NAME magic_enum&#xA;    GITHUB_REPOSITORY Neargye/magic_enum&#xA;    GIT_TAG x.y.z # Where `x.y.z` is the release version you want to use.&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bazel is also supported, simply add to your WORKSPACE file:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;http_archive(&#xA;    name = &#34;magic_enum&#34;,&#xA;    strip_prefix = &#34;magic_enum-&amp;lt;commit&amp;gt;&#34;,&#xA;    urls = [&#34;https://github.com/Neargye/magic_enum/archive/&amp;lt;commit&amp;gt;.zip&#34;],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To use bazel inside the repository it&#39;s possible to do:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bazel build //...&#xA;bazel test //...&#xA;bazel run //:example&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(Note that you must use a supported compiler or specify it with &lt;code&gt;export CC= &amp;lt;compiler&amp;gt;&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using &lt;a href=&#34;https://www.ros.org/&#34;&gt;Ros&lt;/a&gt;, you can include this package by adding &lt;code&gt;&amp;lt;depend&amp;gt;magic_enum&amp;lt;/depend&amp;gt;&lt;/code&gt; to your package.xml and include this package in your workspace. In your CMakeLists.txt add the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;find_package(magic_enum CONFIG REQUIRED)&#xA;...&#xA;target_link_libraries(your_executable magic_enum::magic_enum)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiler compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clang/LLVM &amp;gt;= 6&lt;/li&gt; &#xA; &lt;li&gt;MSVC++ &amp;gt;= 14.11 / Visual Studio &amp;gt;= 2017&lt;/li&gt; &#xA; &lt;li&gt;Xcode &amp;gt;= 10&lt;/li&gt; &#xA; &lt;li&gt;GCC &amp;gt;= 9&lt;/li&gt; &#xA; &lt;li&gt;MinGW &amp;gt;= 9&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>linuxdeepin/unilang</title>
    <updated>2022-09-20T01:32:45Z</updated>
    <id>tag:github.com,2022-09-20:/linuxdeepin/unilang</id>
    <link href="https://github.com/linuxdeepin/unilang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unilang&lt;/h1&gt; &#xA;&lt;p&gt;The contents in this document are available in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;English&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/linuxdeepin/unilang/master/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;© 2020-2022 UnionTech Software Technology Co., Ltd.&lt;/p&gt; &#xA;&lt;p&gt;This is the repository of the programming language named &lt;strong&gt;Unilang&lt;/strong&gt;, including documents and an interpreter as the reference implementation.&lt;/p&gt; &#xA;&lt;p&gt;See the sections below to build and use the interpreter.&lt;/p&gt; &#xA;&lt;h1&gt;About the new language&lt;/h1&gt; &#xA;&lt;p&gt;Unilang is a general purpose programming language project proposed to adapt to more effective and flexible development of desktop environment applications.&lt;/p&gt; &#xA;&lt;h2&gt;The origin&lt;/h2&gt; &#xA;&lt;p&gt;Currently, there are many options for desktop application development, with their respective advantages and disadvantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The C/C++ native application development solution as &lt;a href=&#34;https://www.qt.io/&#34;&gt;Qt&lt;/a&gt; is the mainstream solution for many Linux desktop applications. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;C/C++ have mature language standards and implementations, as well as rich development resources, including multiple language implementations with good vendor neutrality. But at the same time, it is difficult to learn, the project development cycle is often long, and the cost is high. Most of these overall problems are difficult to improve in the short term. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;C/C++ are the representatives of the most portable industrial languages. However, many widely adopted features are not standardized by the language, and also depend on many details of the underlying system, such as hot loading.&lt;/li&gt; &#xA;     &lt;li&gt;There are rich resources of C/C++ libraries, but the problems such as package management, continuous integration and compatibility issues among binary distributions cannot be effectively solved for a long time, and the fragmentation is serious, which is not conducive to rapid deployment.&lt;/li&gt; &#xA;     &lt;li&gt;As static languages, C/C++ are problematic in low development efficiency in some scenarios. As statically typed languages, the type systems are not that powerful and they contribute little on the development experience.&lt;/li&gt; &#xA;     &lt;li&gt;C/C++ can explicitly manage resources and allow the development of large-scale high-performance GUI applications. However, they are relatively easy to misuse, and it often requires more experienced developers to correctly implement the programs.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Qt has good portability and can adapt to many mainstream desktop platforms. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;However, due to technical problems such as language limitations, Qt also needs to rely on special language extensions (rather than standard C++), and its portability and extensibility at the language level are relatively poor.&lt;/li&gt; &#xA;     &lt;li&gt;Compared with other C/C++ programs, the depolyment of Qt programs require more space. Nevertheless, this has relatively minor impacts if Qt is deployed as the system libraries.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The development solution based on the non-native and dynamic language runtime as &lt;a href=&#34;https://www.electronjs.org/&#34;&gt;Electron&lt;/a&gt; is another mainstream solution. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using of popular dynamic languages can overcome the problem that some static languages are not flexible, but it is sometimes difficult to ensure the quality.&lt;/li&gt; &#xA;   &lt;li&gt;Relying on &lt;a href=&#34;https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&#34;&gt;GC&lt;/a&gt; does not require explicit memory management, which reduces some development difficulties. However, most developers find it difficult to effectively optimize the runtime mechanism, and it is easy to cause problems such as memory leaking, which greatly affects the quality and development experience of GUI applications.&lt;/li&gt; &#xA;   &lt;li&gt;Large runtimes often need to be deployed.&lt;/li&gt; &#xA;   &lt;li&gt;Some runtime implementations may have performance issues about cold start.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The hybrid solutions of native and dynamic languages as &lt;a href=&#34;https://wiki.qt.io/PySide&#34;&gt;PySide&lt;/a&gt; can solve some problems of the two options above. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;However, this kind of solutions can not automatically solve the problems brought by native language and dynamic languages themselves.&lt;/li&gt; &#xA;   &lt;li&gt;At the same time, it requires developers to understand the basic scheme and does not guarantee that it is easier to use. Otherwise, once used improperly, it is possible to integrate the defects rather than advantages of the two.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mobile apps solutions as by &lt;a href=&#34;https://flutter.dev/&#34;&gt;Flutter&lt;/a&gt; are also migrating to the desktop. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The versions ported to the desktop platforms are relatively immature.&lt;/li&gt; &#xA;   &lt;li&gt;There are usually problems similar to those in the solutions of other dynamic language runtimes due to the dynamic language being used.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;From the perspective of higher-level structure, different types of GUI solutions also have different technical limitations in the sense of architecture, which greatly limits the choices of real general solutions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compared with the traditional &lt;em&gt;retained mode&lt;/em&gt; GUI, the &lt;em&gt;immediate mode&lt;/em&gt; GUI as &lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;Dear ImGUI&lt;/a&gt; lacks the abstraction of entities, not reflecting the traditonal approach of &lt;a href=&#34;https://en.wikipedia.org/wiki/WIMP_%28computing%29&#34;&gt;WIMP metaphor&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The so-called &lt;a href=&#34;https://en.wikipedia.org/wiki/Immediate_mode_%28computer_graphics%29&#34;&gt;immediate mode&lt;/a&gt; originally focused on graphics rendering and lacked attention to UI interaction. Therefore, even if good display output is achieved, a lot of work is still needed to improve interactivity.&lt;/li&gt; &#xA;   &lt;li&gt;Due to the simplification of intermediate states, immediate mode GUI is basically difficult to extend to implement the UI automation interface in nature.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;It is difficult to overcome the specific functional limitations of the underlying implementation by relying on the &#34;native&#34; solution provided with the system. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For example, the &lt;a href=&#34;https://docs.microsoft.com/windows/win32/winmsg/extended-window-styles&#34;&gt;Win32 window style &lt;code&gt;WS_EX_LAYERED&lt;/code&gt; is only supported in the top-level windows but not in the child windows before Windows 8&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Considering the coupling with the system implementation, this actually means that solutions relying on the &#34;native&#34; experience provided by the system (such as &lt;a href=&#34;https://www.wxwidgets.org/&#34;&gt;wxWidgets&lt;/a&gt;) cannot reliably provide a consistent and portable user experience, even in different versions of the same system.&lt;/li&gt; &#xA;   &lt;li&gt;Such inconvenience is even acknowledged within the system manufacturers. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The GUI frameworks encapsulating Win32 as &lt;a href=&#34;https://docs.microsoft.com/cpp/mfc/mfc-desktop-applications&#34;&gt;MFC&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/dotnet/desktop/winforms&#34;&gt;WinForms&lt;/a&gt; are increasingly obsolete and are generally replaced by the so-called direct UI that reimplements the rendering logic (not depending on Win32 &lt;code&gt;HWND&lt;/code&gt;), such as &lt;a href=&#34;https://docs.microsoft.com/dotnet/desktop/wpf&#34;&gt;WPF&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Contrasted with other solutions, &lt;a href=&#34;https://microsoft.github.io/microsoft-ui-xaml/&#34;&gt;WinUI&lt;/a&gt; directly dropped the support for (less) old versions of the operating system in an early stage (since WinUI 2). The dependence on the old version of the system a reason for that decision.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The GUI based on Web graphical clients (browsers) has good portability and flexibility, but there are some other special problems: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The flexibility of Web-based implementations are mainly achieved by the limited combination of client languages, specifically &lt;a href=&#34;https://www.ecma-international.org/publications-and-standards/standards/ecma-262/&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;https://www.w3.org/TR/CSS/#css&#34;&gt;CSS&lt;/a&gt; and &lt;a href=&#34;https://html.spec.whatwg.org/multipage/&#34;&gt;HTML&lt;/a&gt;. Defects in these languages will long persist. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt; will be a supplement. It cannot replace JavaScript in the foreseeable future, let alone other DSLs other than JavaScript.&lt;/li&gt; &#xA;     &lt;li&gt;These technologies do not ensure good support for the development of native applications. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Historically, HTML was designed to present static documents (called &#34;pages&#34;) in the web rather than interactive dynamic programs.&lt;/li&gt; &#xA;       &lt;li&gt;As the role of the client-side patching for converting static pages into dynamic content, JavaScript and CSS were also severely limited in function in the early stage (therefore, &lt;a href=&#34;https://en.wikipedia.org/wiki/Adobe_Flash&#34;&gt;Flash&lt;/a&gt; and other technologies were once popular).&lt;/li&gt; &#xA;       &lt;li&gt;Even though standardized technical specifications such as &lt;a href=&#34;https://dom.spec.whatwg.org/&#34;&gt;DOM&lt;/a&gt; can simplify a large number of implementation details, incompatibility among different browsers is often problematic. Fortunately, as a dynamic language, JavaScript is easy to reduce problems by &lt;a href=&#34;https://en.wikipedia.org/wiki/Shim_%28computing%29&#34;&gt;shim&lt;/a&gt; (instead of re-deploying the running environment), but this is at least at the cost of adaptation workload, and it is not always feasible. For example, the lack of support for &lt;a href=&#34;https://262.ecma-international.org/6.0/#sec-tail-position-calls&#34;&gt;PTC (proper tail call)&lt;/a&gt; of ES6 can hardly be solved except modifying the underlying implementation of the language.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;The actual implementations are extremely complex, obviously more difficult to customize than other solutions. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The core parts of the browser (implementing the typesetting engine such as HTML and CSS and the runtime of languages such as JavaScript) are highly encapsulated integrated components, which are mostly implemented in C/C++, but more difficult to modify than almost all other C/C++ programs.&lt;/li&gt; &#xA;     &lt;li&gt;Therefore, Web-based GUI solutions can only bundle these native components without significant changes. Even functions not depended on by the application are not easily removed before deployment. Unless distributed by the system, this will seriously bloat the the programs.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;For some traditional factors (like security concerns), the interaction between the Web programs and the native environment is limited, and the development of desktop applications may require a lot of additional work.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Hybrid frameworks that rely on other components have path dependency problems correspondingly. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If relying on the framework of the native GUI implementation provided by the system, there are problems of the above native solution.&lt;/li&gt; &#xA;   &lt;li&gt;Relying on the frameworks having dependencies on the Web (such as Electron, &lt;a href=&#34;https://cordova.apache.org/&#34;&gt;Cordova&lt;/a&gt;, &lt;a href=&#34;https://tauri.app/&#34;&gt;Tauri&lt;/a&gt;) will bring the problems of the above Web-based solutions.&lt;/li&gt; &#xA;   &lt;li&gt;If all are relied on, all similar limitations will eventually be jointly inherited.&lt;/li&gt; &#xA;   &lt;li&gt;Nevertheless, if only using these targets as one of the optional output configurations (for instance, using WebAssembly as the generation target), there will be less problems as above.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Native but not OS-native GUI frameworks as Qt have few global architecture defects comparable to the above problems, but there are still many problems in the implementation architecture and API design, and the development experience is not satisfactory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So, no existing solution can take into account all kinds of problems and become the preferred solution for desktop development without doubt.&lt;/p&gt; &#xA;&lt;p&gt;A considerable part of the above problems (performance, deployment difficulty and portability) are directly related to the language. Looking at the language part, we find that existing languages are not able to solve all these major issues well enough, because:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Most popular standardized languages, such as C, C++ and ECMAScript, have a heavy historical burden and do not have the ability to extend the language itself to meet these needs.&lt;/li&gt; &#xA; &lt;li&gt;Dart and other languages specially designed for these solutions have problems in the basic design decisions (like relying on global GC), which make it unable to fully fit some important scenarios.&lt;/li&gt; &#xA; &lt;li&gt;Other general purpose languages, such as &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; and &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt;, do not provide GUI solutions together. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Although there are some third-party GUI projects, their advantages in design still cannot well meet the needs of desktop application development.&lt;/li&gt; &#xA;   &lt;li&gt;The language community has not focused on developing desktop applications.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are eager to have a new language to solve all the above pain points. However, it is not enough to provide a new language design and implementation. New languages are not magic to automatically solve legacy problems -- especially considering that there is no lack of &#34;new&#34; programming languages in the market, but they still do not meet the needs.&lt;/p&gt; &#xA;&lt;p&gt;One of the technical reasons for this situation is that many designs are too focused on specific requirements and lack of consideration of the general factors of long-term evolution of the language, and their applicability outside the expected target areas drops sharply, which is not universal enough; or they fail to balance universality and complexity. This makes the application field slightly deviate from the expectation and exposes the limitations of the original design. Even if users knows how to improve a language, they will encounter practical difficulties in development of the language and eventually give up.&lt;/p&gt; &#xA;&lt;p&gt;If new options are put forward without avoiding this situation, it will only further hinder the solution of the problem. Therefore, on the basis of meeting the needs, we hope that the new language can truly achieve universality in a deeper way - by reducing the built-in &lt;em&gt;ad-hoc&lt;/em&gt; features specifically for individual problem domains and replacing them with a more general set of primitive features.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Programming languages should be designed not by piling feature on top of feature, but by removing the weaknesses and restrictions that make additional features appear necessary.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p align=&#34;right&#34;&gt;—— &lt;a href=&#34;https://schemers.org/Documents/Standards/&#34;&gt;R&lt;sup&gt;n&lt;/sup&gt;RS&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://ftp.cs.wpi.edu/pub/techreports/pdf/05-07.pdf&#34;&gt;R&lt;sup&gt;-1&lt;/sup&gt;RK&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The necessity of a new language&lt;/h2&gt; &#xA;&lt;p&gt;Well ... but why a &lt;strong&gt;new&lt;/strong&gt; language?&lt;/p&gt; &#xA;&lt;p&gt;As we have known, most properties of a programming language are provided through the &lt;em&gt;features&lt;/em&gt; specificed by the language rules. Moreover, some other required properties are guaranteed by deliberately lacking of specific set of features (i.e. &lt;em&gt;misfeatures&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Users want features but not misfeatures. In reality, the concrete sets of features and misfeatures needed by users are not totally fixed. It might be easy to add new features to a current programming language. However, it is almost always quite different (if not impossible) to remove the misfeatures due to the risks on (in)compatibilities, unless the language is expected to do so, by design.&lt;/p&gt; &#xA;&lt;p&gt;There are many technical concerns to determine whether a feature satisfies our need here, and the decisions may likely vary for other uses. So, the common features set would be surprisingly small. But almost all industrial languages just provide too much, and those features are not easy to be added back on demand, by users (rather than the designers) of the language. In such case, it just means many misfeatures are unavoidable.&lt;/p&gt; &#xA;&lt;p&gt;For practical reasons, we decide to not change the current languages (which is likely to add additional complexity on the languages and to create more misfeatures to some users), but to reinvent our own wheel, to solve the problem.&lt;/p&gt; &#xA;&lt;p&gt;We also prefer only &lt;strong&gt;one&lt;/strong&gt; language to serve the needs as possible. Otherwise, we can have several languages. Such languages naturally serve to different problem domains, hence &lt;em&gt;domain-specific languages (DSLs)&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The latter might work well when such domains share few common works. On the other hand, to our experience, it is a pain to maintain different DSLs together for a slightly greater problem domain consisting of related subdomains. There are also unneeded cost on interoperability. Even we want different tool sets specialized for different problem domains, there should been more common design and implementation reused among different languages. They should not be totally independent by design. In other words, the replacements of the DSLs should better be dialects of a general-purpose language.&lt;/p&gt; &#xA;&lt;p&gt;Some users may have concerns on the look and feel of the resulted &#34;one&#34; language. It is true that a unique and universal syntax can hardly work across different problem domains, because there are conflict needs on the syntax: we may need radically different visual styles for different purpose. But there is actually no law to rules out the possibility to support more than one sets of concrete syntaxes in one language.&lt;/p&gt; &#xA;&lt;p&gt;So, the syntaxes of a language should not be the problem. If the syntax is not satisfying, just change it. This is done by users, but not the designers of the languages. Of course there is some cost, but it should be cheaper than designing and implementing a radically different language, once the underlying language is properly provided.&lt;/p&gt; &#xA;&lt;h2&gt;The methodology&lt;/h2&gt; &#xA;&lt;p&gt;As said, to design a language indeed general-purpose, we don&#39;t want to pile features at the top of the existing ones.&lt;/p&gt; &#xA;&lt;p&gt;Instead of specifying a rich feature set, we first provide the &lt;em&gt;base language&lt;/em&gt;, which only have the features fundamental enough. Such features can be used to implement other features in terms of library API. The language is then &lt;em&gt;derived&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The base language is designed specifically for the ease of integration in the very beginning. In other words, besides the common feature set, it also serves the problem domain of language derivation, which is neglected by most programming languages. It should be relatively easy to use in this aspect compare to most (if not all) mainstream programming languages. To be concrete, the basic languages works well without many popular core language features (like type systems) in other languages. This significantly decreases the risks of misfeatures from premature designs for all derivations.&lt;/p&gt; &#xA;&lt;p&gt;We acknowledge that users may have the need of out-of-box features not provided in the native language design. This is solved by allowing fundamental features of the language more programmable, i.e. most features are in the libraries.&lt;/p&gt; &#xA;&lt;p&gt;We also encourage users to add new sets of features from the current language and contribute to us in the form of libarary.&lt;/p&gt; &#xA;&lt;p&gt;This approach, like less contention with locks of smaller granularity, also improves the potential parallelism on the process of the language evolation. We have identified the high cost of communication in the development process in some major program languages and try to prevent some foreseeable problems in this way. Hopefully this would be more efficient than alternative methods.&lt;/p&gt; &#xA;&lt;h2&gt;How to do GUI?&lt;/h2&gt; &#xA;&lt;p&gt;GUI is a major problem domain with non-trivial programming works in reality. It is important and complicated enough. In particular, it has quite a lot different subdomains of problems, and many solutions already choose the mixture of different DSLs. Thus, it is a great field to experiment our methodology.&lt;/p&gt; &#xA;&lt;p&gt;Due to the intrinsic complexity of the problems, we don&#39;t expect an omnipotent solution to meet all requirements. Instead, we have different plans to improve the current status.&lt;/p&gt; &#xA;&lt;p&gt;Among all the plans, the dynamic nature of the languages plays an important role. We believe it better to be dynamic for features like widget layout, widget hierarchy, runtime object inspection and hot reloading. Any effort to implement them in a static language needs to implement a dynamic description of the program at first, essentially implementing a dynamic language if it is reusable. Avoiding the need to choose a different solution to work around the problems here is an improvment over many technologies.&lt;/p&gt; &#xA;&lt;p&gt;There are more different improvements even when compared to current solutions already using some dynamic language:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There needs only one language, rather than a mixture of different ones.&lt;/li&gt; &#xA; &lt;li&gt;To customize and extend language features specialized to any domains, including GUI, is easier.&lt;/li&gt; &#xA; &lt;li&gt;To manage resources with precise lifetime is easier, because no GC is absolutely required.&lt;/li&gt; &#xA; &lt;li&gt;Customization by end-user can be easier, because embedding a DSL for end-users (if needed) can share most semantic properties of the lanugage implementation, and there might need only minor adjustment on syntaxes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(More concrete works TBD here.)&lt;/p&gt; &#xA;&lt;h2&gt;Characteristics&lt;/h2&gt; &#xA;&lt;p&gt;Unilang is the language part of the new solution to comprehensively solve the existing problems. The distinguishing features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As a dynamic language, it provides more extensibility at the language level than other languages. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Features provided by the language core rules in most other languages are expected to be library modules implemented in Unilang, e.g. statically type checking can be provided by user programs. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Customization of the functionality of the language by user-provided components may effectively rule out unexpected dynamic features, and &lt;strong&gt;eventually get advanced development experience as in most static languages without the defects of inconvenience from the core rules of static languages&lt;/strong&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;It allows the existing language features to be complemented by adding libraries in the environment where the Unilang program has been deployed, without the need to redeploy the implementation of the toolchain.&lt;/li&gt; &#xA;     &lt;li&gt;A basic language is provided, and the practical feature set is built by extending this language in the form of libraries. Libraries are expected to be provided by this project and users.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Similar to C and C++ but different from &lt;a href=&#34;https://docs.oracle.com/javase/specs/jls/se18/html/jls-1.html&#34;&gt;Java&lt;/a&gt;, it does not explicitly require or assume specific forms of translation and execution. The implementation details such as compilation, interpretation and what image format to load are transparent to the core language rules.&lt;/li&gt; &#xA;   &lt;li&gt;There is no preset &lt;em&gt;phases of translation&lt;/em&gt; as explicitly specified in C and &lt;a href=&#34;http://eel.is/c++draft/lex.phases&#34;&gt;C++&lt;/a&gt;. There is no need of macros expanded in separated phase -- they can be replaced by functions that support first-class environments.&lt;/li&gt; &#xA;   &lt;li&gt;It supports &lt;a href=&#34;https://en.wikipedia.org/wiki/Homoiconicity&#34;&gt;homoiconicity&lt;/a&gt; and allows code as data programming.&lt;/li&gt; &#xA;   &lt;li&gt;Functions are &lt;a href=&#34;https://en.wikipedia.org/wiki/First-class_citizen&#34;&gt;first-class objects&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Environments&lt;/em&gt; have ownership of variable bindings. &lt;em&gt;First-class environments&lt;/em&gt; are supported.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;It supports C++-like object model and (currently unchecked) unsafe ownership semantics. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unlike C# or rust, it does not provide an ad-hoc &lt;code&gt;unsafe&lt;/code&gt; keyword to mark &#34;unsafe&#34; code fragments. The most primitive features are &#34;unsafe&#34; by default.&lt;/li&gt; &#xA;   &lt;li&gt;Safety is not uniquely defined by language, and users are allowed to implement customized safety of different types and degrees by ways like extending the type system.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Global GC is not required, and a subset of the language allows the same level of &#34;insecurity&#34; as C++, but ensures deterministic resource allocation. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;There is no native static check for unsafe operations, but the extensibility of the language allows direct implementation of the type system or automatic proof of stronger memory safety. It may be provided as a library in the future.&lt;/li&gt; &#xA;   &lt;li&gt;The language rules still allow the interoperations introducing GC. In particular, multiple non-global GC instances are allowed.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The language supports &lt;a href=&#34;https://www.researchgate.net/profile/William_Clinger/publication/2728133_Proper_Tail_Recursion_and_Space_Efficiency/links/02e7e53624927461c8000000/Proper-Tail-Recursion-and-Space-Efficiency.pdf&#34;&gt;PTC&lt;/a&gt; in the formal sense. This makes users have no need to work around about undefined behaviors like stack overflow in the programs. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mainstream languages do not provide such guarantees without aid of GC.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Implicit &lt;a href=&#34;https://en.wikipedia.org/wiki/Latent_typing&#34;&gt;&lt;em&gt;latent typing&lt;/em&gt;&lt;/a&gt; is used instead of explicit &lt;a href=&#34;https://en.wikipedia.org/wiki/Manifest_typing&#34;&gt;&lt;em&gt;manifest typing&lt;/em&gt;&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This naturally avoids the conflict between the user-provided extended type system and the built-in rules while maintaining scalability. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Even without extension, as an implementation detail, the language already allows &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_inference&#34;&gt;&lt;em&gt;type inference&lt;/em&gt;&lt;/a&gt; to eliminate some type checks without affecting the semantics of the programs.&lt;/li&gt; &#xA;     &lt;li&gt;User programs are allowed to extend the type system with the syntax and related checks of &lt;em&gt;type annotations&lt;/em&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Expressions are similar to those in C++ with a few different rules of &lt;a href=&#34;http://eel.is/c++draft/basic.lval&#34;&gt;&lt;em&gt;(value category)&lt;/em&gt;&lt;/a&gt;. However, unlike C++, it is not the property of statically determined expressions, but the dynamic metadata following the objects implied by the expressions.&lt;/li&gt; &#xA;   &lt;li&gt;Similar to the &lt;code&gt;const&lt;/code&gt; type qualifier in C++, objects referenced by lvalues are allowed to be marked as immutable (read-only), instead of the default convention of &lt;em&gt;immutable&lt;/em&gt; values as in languages like Rust.&lt;/li&gt; &#xA;   &lt;li&gt;Similar to the &lt;em&gt;expired value (xvalue)&lt;/em&gt; in C++, the object referenced by the lvalue may be tagged unique, allowing the resources in it to be transferred. ** &lt;em&gt;Rationale&lt;/em&gt;* In the representative decisions above, a common method is to compare the technical feasibility between different directions and adopt the option that is easy to extend to other direction. Otherwise, even if it is feasible, there will be a lot of ineffective work that should have been avoided.&lt;/li&gt; &#xA;   &lt;li&gt;Designing a static language, and then adding some rules to disguise it as a dynamic language with sufficient dynamic characteristics, is far more difficult extending rules of a dynamic lanugage to get the feature set a static language would have. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Therefore, the basic language is designed as a dynamic language at first.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Adding proofs to restore some guarantees (without conflicts to others) where they have been already abandoned, is more difficult to just adding the proofs to make fresh guarantees in the plain contexts where such guarantees are never existed before. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;For instance, in languages using ad-hoc syntax notations like &lt;code&gt;unsafe&lt;/code&gt;, ususally the safety guarantees defined by the language rules are dropped altogether, and a part of these guarantees cannot be retained. Even if this problem is ignored, these languages lack mechanisms to allow users to provide stricter guarantees integrating into current ones. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Therefore, the basic language is unsafe by default.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;As another instance, although the default immutable data structures can guarantee the &#34;correctness&#34; like &lt;a href=&#34;https://isocpp.org/wiki/faq/const-correctness&#34;&gt;const correctness&lt;/a&gt; (an instance of &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_safety&#34;&gt;&lt;em&gt;type safety&lt;/em&gt;&lt;/a&gt; that keeps the defined immutable property from being discarded), it ignores the problem that the definition of &#34;immutable&#34; is not sufficiently preciesly described and it cannot be extended by the user program. In many cases, immutability only needs to be an equivalent relationship, not an unmodifiable one. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;This may cause abuse of specific non-modifiablitity, like the case of requirements on key types of associative containers in the C++ standard library. It actually need no &lt;code&gt;const&lt;/code&gt; as currently mandated by ISO C++, because the immutablity of the key is exactly defined by &lt;a href=&#34;http://www.eel.is/c++draft/associative.reqmts#general-3&#34;&gt;the equivalent relationship derived from the comparison object&lt;/a&gt;. But the type system of C++ cannot distinguish these two case of immutablilty, leading to over-specification in the types of API, which blocks some operations on the key. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;Using unsafe casts like &lt;code&gt;const_cast&lt;/code&gt; to cease the type safety guarantee introduced by &lt;code&gt;const&lt;/code&gt; totally and assuming it not destroyed by other operations is a helpless workaround here (the &#34;more difficult&#34; situation; the type safety cannot be restored, and the effect is worse).&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;Meanwhile, type system having immutability by default, like that in Rust, more fundamentally block ways of extensibility in the sense of type formation. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;This design implies there is only one kind of immutability, unless then modifying the design of the type system by dropping the original definition of &#34;immutability&#34; and reintroduce qualification like C++&#39;s &lt;code&gt;const&lt;/code&gt; (the &#34;more difficult&#34; situation).&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;This also limits the extents of &lt;a href=&#34;https://en.wikipedia.org/wiki/Constant_folding#Constant_propagation&#34;&gt;the &lt;em&gt;constant propagation&lt;/em&gt;&lt;/a&gt; optimization in existing implementations, because in principle, the &#34;constant&#34; here only cares about whether the substitution of the generated code can maintain the semantic preservation property before and after the transformation (regarding to &lt;a href=&#34;http://www.eel.is/c++draft/intro.compliance#intro.abstract-1&#34;&gt;the abstraction machine semantics&lt;/a&gt; in the case of C++), while caring nothing about the equality on concrete values. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;If the language allows the user to express that &#34;some values with different representations are considered equivalent&#34;, the adaptability of the optimization will naturally grow.&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;Therefore, objects in the basic languages are mutable by default.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Excluding GC from a language that requires already the global GC, is far more difficult to adding the GC to a language with no mandatory of GC in its rules (especially when the GC is to be customized by users). &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Therefore, the language first excludes the dependencies on the global GC in its design.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;It is basically impossible to add extensions to a language implementation without PTC guarantee, unless the logic including the core evaluation rules is reimplemented (for example, by adding a fresh execution engine in the implementation). &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Therefore, the language first requires PTC to make sure the availablity, instead of encouraging of unreliable indirect implementations to complement the guarantee in future.&lt;/li&gt; &#xA;     &lt;li&gt;Notice most fetures other than PTC can still be relatively easily implemented correctly by indirect implementations (e.g. ECMAScript dialects transpiled by &lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt;). Threfore, most other features are not (and need not) treated specially as PTC in the core language rules.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The implementation has good interoperability with C++. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Currently, the interpreter (runtime) is implemented in C++.&lt;/li&gt; &#xA;   &lt;li&gt;With the object model in the language, Unilang objects can be mapped to C++ objects.&lt;/li&gt; &#xA;   &lt;li&gt;The language binding mostly focus on the availablity of C/C++ API for well-known ABIs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To keep universality, Unilang does not provide GUI functionailty as built-in features, but provides related APIs through libraries. In the current plan, Unilang will support Qt-based binding libraries to ease the transition of some existing desktop application projects. The language design of Unilang keeps sufficient abstract ability and extensibility, allowing direct implementation of GUI frameworks in the future.&lt;/p&gt; &#xA;&lt;h1&gt;About the documents&lt;/h1&gt; &#xA;&lt;p&gt;　　The following documents are maintained in this project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;README&lt;/code&gt;: This document. It introduces the overall status, usage and main supported features. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It is suitable for all readers interested in this project.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/linuxdeepin/unilang/master/ReleaseNotes.zh-CN.md&#34;&gt;Release notes (zh-CN)&lt;/a&gt;: Release notes of different versions. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It is suitable for all readers interested in this project.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/linuxdeepin/unilang/master/doc/Language.zh-CN.md&#34;&gt;Language specification (zh-CN)&lt;/a&gt;：This is the normative language specification, including the conforming requirements of the implementation, the supported features in the language and some informative descritpions. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It is mainly used as a reference to the contributors of this project, as well as developers of the language and its implementations.&lt;/li&gt; &#xA;   &lt;li&gt;It is the main source in determining whether the current design of the language and an implementation (both the interpreter and the library code) of the language having defects.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/linuxdeepin/unilang/master/doc/Interpreter.zh-CN.md&#34;&gt;Implementation document of the interpreter (zh-CN)&lt;/a&gt;: This document describe the design of the intpreter, which is not intended or qualified as the publicly available features in the language. The document also contains some descriptions about the project-specific plan of the evolution and decisions, as well as the related rationale. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It is sutable for the maintainers of this project (the implementors of the interpreter) and users who want to extend the language implementation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/linuxdeepin/unilang/master/doc/Introduction.zh-CN.md&#34;&gt;Introduction of the language (zh-CN)&lt;/a&gt;：This document introduces the use of the language and its features. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It is hopefully useful for beginners.&lt;/li&gt; &#xA;   &lt;li&gt;All users of this project (language, interpreter and library) are recommended to read it.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/linuxdeepin/unilang/master/doc/Features.zh-CN.md&#34;&gt;Fetures document (zh-CN)&lt;/a&gt;：This is a reference to language features as supplement to the introcuction document above. There is a (still non-exhaustive) feature list and related information of how to use them. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It is suitable for the end-users of the language (the developers using Unilang).&lt;/li&gt; &#xA;   &lt;li&gt;Users having interested in the&lt;/li&gt; &#xA;   &lt;li&gt;Users who need to have an in-depth understanding of the language and need to propose new language features are recommended read it first.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The contributors of this project shall generally be able to determine the relevance of the contents in the above documents and the corresponding implemented modifications (if any).&lt;/p&gt; &#xA;&lt;p&gt;If there is inconsistency between the contents of the document or it does not match other parts of the project, please contact the maintainers to report the defect.&lt;/p&gt; &#xA;&lt;h2&gt;Consistency&lt;/h2&gt; &#xA;&lt;p&gt;The documents shall provide no descriptions with misconceptions on the objects being documented.&lt;/p&gt; &#xA;&lt;p&gt;The documents should usually be consistent with other parts of the repository (including the interpreter and the standrd library code which is used as the reference implementation).&lt;/p&gt; &#xA;&lt;p&gt;However, as this project is in an early development stage, some documents may have differences on the requirements of consistency.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The languaged implementation &lt;em&gt;conforms&lt;/em&gt; to the language specification.&lt;/li&gt; &#xA; &lt;li&gt;Between released versions (with Git tag), the implementation document of the interpreter, introduction of the language and features document may be inconsistent to the commit revision (in &lt;code&gt;master&lt;/code&gt; branch) in a limited way.&lt;/li&gt; &#xA; &lt;li&gt;Introduction of the language and features document may be incomplete compared to the language specification, i.e. not all features are covered.&lt;/li&gt; &#xA; &lt;li&gt;In all other cases, all other contents meet the requirements in the &lt;code&gt;README&lt;/code&gt; document.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If not all requirements above are met, such inconsistent shall be treated as the defects of the documents or the objects being described in the documents.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;This project supports several ways to build.&lt;/p&gt; &#xA;&lt;p&gt;The supported hosted environments are MSYS2 MinGW32 and Linux.&lt;/p&gt; &#xA;&lt;p&gt;The following instructions using the root directory of the repository as the current working directory.&lt;/p&gt; &#xA;&lt;h2&gt;Build dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Some external dependencies are used in the source form, provided as the git submodules.&lt;/p&gt; &#xA;&lt;p&gt;The building environment relies on the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bash&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/coreutils/&#34;&gt;GNU coreutils&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;G++ supporting ISO C++, and compatible GNU binutils&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following dependencies are optional:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clang++ can be a replacement of G++.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The binary form of the following dependencies are also used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libffi&lt;/li&gt; &#xA; &lt;li&gt;LLVM 7 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;llvm-config&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Qt 5&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-config&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following commands illustrates how to prepare the build environment by package managers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Some dependencies may have been preinstalled.&#xA;# MSYS2&#xA;pacman -S --needed bash coreutils git mingw-w64-x86_64-gcc mingw-w64-x86_64-binutils mingw-w64-x86_64-libffi mingw-w64-x86_64-llvm mingw-w64-x86_64-pkgconf mingw-w64-x86_64-qt5&#xA;# Arch Linux&#xA;sudo pacman -S --needed bash coreutils git gcc binutils libffi pkgconf qt5-base&#xA;yay -S llvm70 # Or some other AUR frontend command.&#xA;# Debian (buster/bullseye)/Ubuntu (bionic-updates/focal)/Deepin&#xA;sudo apt install bash coreutils git g++ libffi-dev llvm-7-dev pkg-config qtbase5-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also the &lt;a href=&#34;https://raw.githubusercontent.com/linuxdeepin/unilang/master/#environment-configuration&#34;&gt;environment configuration&lt;/a&gt; below for some optional additional dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Qt environment requirements and assumptions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itanium-cxx-abi.github.io/cxx-abi/abi.html&#34;&gt;Itanium C++ ABI&lt;/a&gt; is used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;QT_NAMESPACE&lt;/code&gt; is not supported.&lt;/li&gt; &#xA; &lt;li&gt;Only headers and library files in the filesystem are used. There is no dependencies of other Qt files.&lt;/li&gt; &#xA; &lt;li&gt;The compiler option &lt;code&gt;-I$PREFIX/include/QtWidgets&lt;/code&gt; is used, where &lt;code&gt;$PREFIX&lt;/code&gt; is the filesystem prefix of the header inclusion directory.&lt;/li&gt; &#xA; &lt;li&gt;The linker option &lt;code&gt;-lQt5Widgets -lQt5Core&lt;/code&gt; is used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updating the build environment&lt;/h2&gt; &#xA;&lt;p&gt;Before the build, run the following command to ensure the external source dependencies are setup properly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there exists the submodule update, and the script &lt;code&gt;install-sbuild.sh&lt;/code&gt; is already executed previously, it is necessary to cleanup the intermediate file to make sure the script work properly again, by the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm -f 3rdparty/.patched&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, the follwing &lt;code&gt;git&lt;/code&gt; command can make the cleanup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clean -f -X 3rdparty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using the direct building script&lt;/h2&gt; &#xA;&lt;p&gt;Run the script &lt;code&gt;build.sh&lt;/code&gt; to build directly and the output executable file will be put into the current working directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This uses &lt;code&gt;g++&lt;/code&gt; by default. The environment variable &lt;code&gt;CXX&lt;/code&gt; can override the default, as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;env CXX=clang++ ./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default compiler options are &lt;code&gt;-std=c++11 -Wall -Wextra -g&lt;/code&gt;. Similarly, use the environment variable &lt;code&gt;CXXFLAGS&lt;/code&gt; can override the default value.&lt;/p&gt; &#xA;&lt;p&gt;The script uses shell command lines to call the compiler driver specified by &lt;code&gt;$CXX&lt;/code&gt; directly, and no parallel builds are supported. It may be slow.&lt;/p&gt; &#xA;&lt;p&gt;The advantage of this script is the ease to use without further configurations. It may be suitable for one-time testing and deployment.&lt;/p&gt; &#xA;&lt;h2&gt;Using the script of external build tools&lt;/h2&gt; &#xA;&lt;p&gt;With the &lt;a href=&#34;https://frankhb.github.io/YSLib-book/Tools/Scripts.zh-CN.html&#34;&gt;script of external build tools (zh-CN)&lt;/a&gt;, more configurations are supported. This method is more suitable for the development in this project.&lt;/p&gt; &#xA;&lt;p&gt;Currently, only x86_64 architecture is supported on Linux.&lt;/p&gt; &#xA;&lt;p&gt;The following instructions assume the number of maximum parallel build tasks as &lt;code&gt;$(nproc)&lt;/code&gt;. This can be overriden by a positive integer in the command lines.&lt;/p&gt; &#xA;&lt;h3&gt;Environment configuration&lt;/h3&gt; &#xA;&lt;p&gt;The configuration of the environment installs the tools and build dependencies, which requires to be run only once. (But it is recommended to configure again after any git submodules update.)&lt;/p&gt; &#xA;&lt;p&gt;The installed files are built from the source code in &lt;code&gt;3rdparty/YSLib&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Linux targets, first it is required to keep the external dependencies specific for the installation, even they are not used in this project at all:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://freetype.org/&#34;&gt;freetype2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, by package managers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Arch Linux&#xA;sudo pacman -S freetype2 --needed&#xA;# Debian/Ubuntu/Deepin&#xA;sudo apt install libfreetype6-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For automatic update of binary dependencies and patching the source in the script below, the following dependencies are needed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;wget&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;7za&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sed&lt;/code&gt; (avoiding Win32 ones which may corrupt the line ending)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, by package managers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# MSYS2&#xA;# XXX: Do not use mingw-w64-x86_64-sed to ensure the EOL characters as-is.&#xA;pacman -S --needed mingw-w64-x86_64-wget p7zip sed&#xA;# Arch Linux&#xA;sudo pacman -S --needed wget p7zip sed&#xA;yay -S llvm70 # Or some other AUR frontend command.&#xA;# Debian (buster/bullseye)/Ubuntu (bionic-updates/focal)/Deepin&#xA;sudo apt install wget p7zip-full sed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the script &lt;code&gt;./install-sbuild.sh&lt;/code&gt; to install the external tools and libraries. The script updates precompiled binary dependencies, then builds and deploys the tools and the libraries. The binaray dependencies are deployed directly into the source tree. Currently the prebuilt dependencies only supports the &lt;code&gt;x86_64-linux-gnu&lt;/code&gt; target. Any output files built by this project do not need to deploy these binary dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; The binary dependencies installed by the script may change as per the build environment updates. Nevertheless, currently it is guaranteed no binary-incompatible parts are depended on. Therefore, it is optional to update the binary dependencies. However, after the update of the build environment, usually the script needs to run again, to ensure up-to-date tools and libraries are installed. If the binary dependencies are no longer existing, the script will automatically fetch them from the network.&lt;/p&gt; &#xA;&lt;p&gt;The following environment variables controls the behavior of the script:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SHBuild_BuildOpt&lt;/code&gt;: The build options, defaulted to &lt;code&gt;-xj,$(nproc)&lt;/code&gt;, where &lt;code&gt;$(nproc)&lt;/code&gt; is the number of parallel builds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SHBuild_SysRoot&lt;/code&gt;: The root directory for the installation, defaulted to &lt;code&gt;&#34;3rdparty/YSLib/sysroot&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SHBuild_BuildDir&lt;/code&gt;: The directory for intermediate files during the installation, defaulted to &lt;code&gt;&#34;3rdparty/YSLib/build&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SHBuild_Rebuild_S1&lt;/code&gt;: If not empty, specify the rebuild of &lt;a href=&#34;https://frankhb.github.io/YSLib-book/Tools/SHBuild.zh-CN.html#%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%9E%84%E5%BB%BA&#34;&gt;stage 1 SHBuild (zh-CN)&lt;/a&gt; (it might be slow). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;CAUTION&lt;/strong&gt; Update of &lt;code&gt;3rdparty/YSLib/Tools/Scripts&lt;/code&gt; requires the rebuild to prevent imcompatibility.&lt;/li&gt; &#xA;   &lt;li&gt;This is not necessary in other cases. It is recommened to not rebuild to improve performance during the installation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using of the installed binary tools and dynamic libraries requires the configurations of paths, as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Configure PATH.&#xA;export PATH=$(realpath &#34;$SHBuild_SysRoot/usr/bin&#34;):$PATH&#xA;# Configure LD_LIBRARY_PATH (reqiured for Linux with non-default search path).&#xA;export LD_LIBRARY_PATH=$(realpath &#34;$SHBuild_SysRoot/usr/lib&#34;):$LD_LIBRARY_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;export&lt;/code&gt; commands can be put into the initialization scripts of the shell (such as &lt;code&gt;.bash_profile&lt;/code&gt;) so there are no need to repeat.&lt;/p&gt; &#xA;&lt;h3&gt;Building commands&lt;/h3&gt; &#xA;&lt;p&gt;After the configuration of the build environment, run the script &lt;code&gt;sbuild.sh&lt;/code&gt; to build this project.&lt;/p&gt; &#xA;&lt;p&gt;This method support parallel builds and different configurations compared to the direct building script, as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./sbuild.sh release-static -xj,$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command above specify the output built files in the directory &lt;code&gt;build/.release-static&lt;/code&gt;. To avoid the confilicts with intermediate files, the output executable files always having the suffix &lt;code&gt;.exe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;release-static&lt;/code&gt; is the &lt;strong&gt;configuration name&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let non-empty configuration name &lt;code&gt;$CONF&lt;/code&gt;, when &lt;code&gt;$SHBuild_BuildDir&lt;/code&gt; is not empty, the output directory is &lt;code&gt;SHBuild_BuildDir/.$CONF&lt;/code&gt;; otherwise, the output directory is &lt;code&gt;build/.$CONF&lt;/code&gt; .&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;$CONF&lt;/code&gt; has the prefix by &lt;code&gt;debug&lt;/code&gt;, the debug versions of the libraries (already built from &lt;code&gt;3rdparty&lt;/code&gt; source in the previously installation steps for the build environment configuration) are used automatically, otherwise libraries of non-debug version are used. When &lt;code&gt;$CONF&lt;/code&gt; has the suffix &lt;code&gt;static&lt;/code&gt;, static libraries are used instead of dynamic libraries. The use of dynamic libraries makes the output executable file relying on the files in &lt;code&gt;$LD_LIBRARY_PATH&lt;/code&gt; set up previously.&lt;/p&gt; &#xA;&lt;p&gt;Running the direct building script links against static libraries. This is roughly equivalent to the non-debug static library builds here.&lt;/p&gt; &#xA;&lt;h1&gt;Running&lt;/h1&gt; &#xA;&lt;h2&gt;Running environment&lt;/h2&gt; &#xA;&lt;p&gt;The interpreter executable file using of the dynamic library configuration relies on the correspoinding dynamic library files at runtime. It is necessary to ensure these libraries files can be found by the system (which should be prepared by the steps of the above build environment configuration), as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# MinGW32&#xA;export PATH=$(realpath &#34;$SHBuild_SysRoot/usr/bin&#34;):$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Linux&#xA;export LD_LIBRARY_PATH=$(realpath &#34;$SHBuild_SysRoot/usr/lib&#34;):$LD_LIBRARY_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If LLVM is installed to non-default location by means other than the system package manager, it may need also to configure for LLVM, as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Linux&#xA;export LD_LIBRARY_PATH=/opt/llvm70/lib:$LD_LIBRARY_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; in Linux configurations above can also be configured by other ways instead, such as &lt;a href=&#34;https://man7.org/linux/man-pages/man8/ldconfig.8.html&#34;&gt;&lt;code&gt;ldconfig&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use of static library instead can avoid the necessity of the configurations above. However, LLVM may be deployed only with dynamic libraries.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt; There is no guarantee to ensure the compatibility among external binary dependencies not configurated by the scripts. They may need other reliable ways of deployment, e.g. by the system package manager. Relying on such libraries cuases the final executable of the interpreter not portable among different system enviornments (like different Linux distrobutions).&lt;/p&gt; &#xA;&lt;h2&gt;Running the interpreter&lt;/h2&gt; &#xA;&lt;p&gt;Running the executable file of the interpreter enters the REPL, and the interpreter run in the interactive mode. Alternatively, specify a script name in the command line, then the interpreter will be run in the scripting mode, and the script will be loaded and executed. The script name &lt;code&gt;-&lt;/code&gt; is treated as the standard input.&lt;/p&gt; &#xA;&lt;p&gt;Running the interpreter with the command line option &lt;code&gt;-e&lt;/code&gt; accepts string arguments to specify the code being evaluated before entering the interactive or scripting mode. The option &lt;code&gt;-e&lt;/code&gt; can occur multiple times with one string argument for each instance. These strings are treated as Unilang source code and to be evaluated in order.&lt;/p&gt; &#xA;&lt;p&gt;The command line of interpreter also supports the POSIX convention of &lt;code&gt;--&lt;/code&gt;, which indicates all command line arguments after are not interpreted as command line options. This allows to specify script names same to options.&lt;/p&gt; &#xA;&lt;p&gt;The commond line option &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; shows the help message of the interpreter.&lt;/p&gt; &#xA;&lt;p&gt;Optionally, the environment variables are handled by the interpreter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ECHO&lt;/code&gt;: If not empty, enable REPL echo. This makes sure the interpreter prints the evaluated result after each interaction session.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UNILANG_NO_JIT&lt;/code&gt;: Disable JIT compilation, using pure interpreter instead.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UNILANG_NO_SRCINFO&lt;/code&gt;: Disable source information for diagnostic message output. The source names are still used in the diagnostics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UNILANG_PATH&lt;/code&gt;: Specify the library load path. See the descriptions of standard library &lt;code&gt;load&lt;/code&gt; in the [language specifciation (zh-CN)], as well as the descriptions of standard library operations in the &lt;a href=&#34;https://raw.githubusercontent.com/linuxdeepin/unilang/master/doc/Interpreter.zh-CN.md&#34;&gt;implementation document of the interpreter (zh-CN)&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Except the option &lt;code&gt;-e&lt;/code&gt;, with the external &lt;code&gt;echo&lt;/code&gt; command, the interpreter can support non-interactive input, such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#39;display &#34;Hello world.&#34;; () newline&#39; | ./unilang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Qt Demo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./unilang demo/qt.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;demo/qt.py&lt;/code&gt; for the Python implementation with the equivalent functionality.&lt;/p&gt; &#xA;&lt;h3&gt;Quicksort demo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./unilang demo/quicksort.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the test script&lt;/h2&gt; &#xA;&lt;p&gt;The file &lt;code&gt;test.sh&lt;/code&gt; is the test script. This can be directly with a few test cases. The script will call the interpreter internally.&lt;/p&gt; &#xA;&lt;p&gt;The test cases are specified in the script code, including call the interpreter to run the test program &lt;code&gt;test.txt&lt;/code&gt;. In REPL, &lt;code&gt;load &#34;test.txt&#34;&lt;/code&gt; also call to load the test program.&lt;/p&gt; &#xA;&lt;p&gt;The script supports following environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;UNILANG&lt;/code&gt;: Specify the path of the interpreter, defalted to &lt;code&gt;./unilang&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PTC&lt;/code&gt;: If not empty, the PTC test case is run. This requires manually termination of the process. During the running, a correct PTC implementation ensures the memory footprint of the intpreter eventually not grow over time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The built executables built using&lt;code&gt;sbuild.sh&lt;/code&gt; are not in the current working directory. This can be called by the test script as the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;UNILANG=build/.debug/unilang.exe ./test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Supported language features&lt;/h1&gt; &#xA;&lt;p&gt;See the examples &lt;a href=&#34;https://raw.githubusercontent.com/linuxdeepin/unilang/master/doc/Introduction.zh-CN.md&#34;&gt;introduction of Unilang (zh-CN)&lt;/a&gt; (not all of them are yet supported) the &lt;a href=&#34;https://raw.githubusercontent.com/linuxdeepin/unilang/master/doc/Features.zh-CN.md&#34;&gt;feature list document (zh-CN)&lt;/a&gt; for features.&lt;/p&gt; &#xA;&lt;p&gt;See also the &lt;a href=&#34;https://raw.githubusercontent.com/linuxdeepin/unilang/master/doc/Language.zh-CN.md&#34;&gt;language specification (zh-CN)&lt;/a&gt; and the design and the &lt;a href=&#34;https://raw.githubusercontent.com/linuxdeepin/unilang/master/(Interpreter.zh-CN.md)&#34;&gt;implementation document of the interpreter (zh-CN)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;Output of imprecise numbers are compatible to the format of C++ functions in &lt;code&gt;&amp;lt;cstdio&amp;gt;&lt;/code&gt;, and it is not guaranteed to have expected lexical notations when non-default locales are used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The decimal point may be not &lt;code&gt;.&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The output may have characters other than the decimal point, digits, signs and exponent indicators as the delimiters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, the output number under non-default locales may not be successfully parsed as the numerical literals.&lt;/p&gt; &#xA;&lt;h1&gt;Contribution&lt;/h1&gt; &#xA;&lt;p&gt;We encourage reporting issues and contributing modifications to the project.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/linuxdeepin/developer-center/wiki/Contribution-Guidelines-for-Developers-en&#34;&gt;Contribution Guidelines for Developers&lt;/a&gt; for basic information.&lt;/p&gt; &#xA;&lt;p&gt;However, the following probably different rules are more applicable in this project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the normative text of documentation, use the verbal forms specified by &lt;a href=&#34;https://www.iso.org/sites/directives/current/part2/index.xhtml&#34;&gt;ISO/IEC Directive 2&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; This is stricter than &lt;a href=&#34;https://www.ietf.org/rfc/rfc2119.txt&#34;&gt;RFC 2119&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Version metadata: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Versions shall conform to the conventions in &lt;a href=&#34;https://semver.org&#34;&gt;Semantic Versioning&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Explicit version numbers (including those in Git tags) are updated by maintainers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Commit messages: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If the change is non-English, the message shall in the corresponding non-English language. Otherwise, it shall be in English.&lt;/li&gt; &#xA;   &lt;li&gt;There is no requirement of using &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/&#34;&gt;Conventional Commits&lt;/a&gt;. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The format in title is &lt;code&gt;[optinal scope: ]&amp;lt;description&amp;gt;&lt;/code&gt;. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; There are no parentheses around the scope.The character sequence &lt;code&gt;: &lt;/code&gt; is optional and it appertain to the scope.&lt;/li&gt; &#xA;       &lt;li&gt;The scope should be specified as directories in the repositiory. Only when the change is not in a same top-level scope, it is global, and the scope should be omitted.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Descripitons in the title or the body should be statements.&lt;/li&gt; &#xA;     &lt;li&gt;The conventions on the body and footers share the same requirements of Conventional Commits, except there is no requirements of &lt;strong&gt;BREAKING CHANGE&lt;/strong&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Rationale&lt;/strong&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Different to widely adopted &lt;a href=&#34;https://git-scm.com/docs/git-interpret-trailers&#34;&gt;Git trailers&lt;/a&gt;, most popular projects do not use Conventional Commits at current.&lt;/li&gt; &#xA;       &lt;li&gt;There are no tools cosuming Conventional Commits in this project at current and &lt;em&gt;type&lt;/em&gt; field can be parsed.&lt;/li&gt; &#xA;       &lt;li&gt;The predifined types in Conventional Commits do not always meet the conventions in semantic versioning.&lt;/li&gt; &#xA;       &lt;li&gt;Without explicit constraints about how to specify the type, types in the title do not improve the readability of the title.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;There shall be no hard returns within a paragraph.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Text files: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Executable scripts in text files shall have the file access permission for &lt;em&gt;execute&lt;/em&gt;, with optional &lt;a href=&#34;https://en.wikipedia.org/wiki/Shebang_%28Unix%29&#34;&gt;shebang&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Other scripts in text files ahsll not have the file access permission for &lt;em&gt;execute&lt;/em&gt; and shall not have shebang. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Currently Unilang does not support shebang in source programs, and the code need to be wrapped by a call to the interpreter. This may be changed in future.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Text files already having shebang or other file headers, as well as text files only used as binary form, shall not have BOM.&lt;/li&gt; &#xA;   &lt;li&gt;If possible, text files in all other cases uses UTF-8 + BOM encoding and CR+LF EOL by default. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; This will keep sufficient metadata for &lt;em&gt;files&lt;/em&gt; and keep cross-editor portability, as well as the ease to check against the misuse.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Except license and external documents, if possible, there shall be no redundant whitespaces at end of the line and there shall be 2 empty lines at end of the file.&lt;/li&gt; &#xA;   &lt;li&gt;For text other than verbatim quoted, no more than one whitespace characters should be used to represent a single indent, except there are preferred combination in the language. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Rationale&lt;/strong&gt; There should be no chance to insert a character in the middle of an indent.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; In general, in horizontal text there should be only horizontal tabs to represent indents, except those for hangling indent in east Asian languages where a sequence of 2 U+3000 characters is preferred.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt; &lt;/code&gt; should be used for alignment. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;This makes the visal effect easy to predicate in the usual settings with monospaced fonts and more portabability than other characters.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Source code: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Text files used as program source code should contain no more than 80 characters in a line, except for necessary one-line cases such as URLs.&lt;/li&gt; &#xA;   &lt;li&gt;C++: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Language standard: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;ISO C++11 is used, excluding features incompatible to the future standards. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; For example, ISO C++20 have some changes on rules of default capture in &lt;em&gt;lambda-expression&lt;/em&gt; and the &lt;code&gt;u8&lt;/code&gt; literals, so some code may have different meaning and it shall not be used here.&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;The code shall be compatible to G++/Clang++&#39;s options &lt;code&gt;-std=c++11 -pedantic-errors&lt;/code&gt;.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Lexical style: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; The indentation and alignment rules for text files are inherited here.&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; shall be in one line by itself, except those consist a &lt;em&gt;braced-init-list&lt;/em&gt; or the outermost block of a &lt;em&gt;lambda-expression&lt;/em&gt;. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;strong&gt;Rationale&lt;/strong&gt; To balance the ease of indexing and succinctness in visual.&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;The identifier prefix &lt;code&gt;INC_Unilang_&lt;/code&gt; is reserved to the header file guards.&lt;/li&gt; &#xA;       &lt;li&gt;Except macro names, identifiers of public API shall be in &lt;code&gt;PascalCase&lt;/code&gt;.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Name lookup: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Unless specified explicitly by the design of interface, &lt;code&gt;namespace&lt;/code&gt; directives shall not be used (&lt;code&gt;using namespace&lt;/code&gt; are only allowed for internal implementations).&lt;/li&gt; &#xA;       &lt;li&gt;ADL shall be considered. Unqualified names shall be used only when there is no ambiguity.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Type names: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;No &lt;code&gt;typedef&lt;/code&gt; shall be used. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Use &lt;code&gt;using&lt;/code&gt; instead.&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;There should be one newline after the first identifier of the type name in a function declaration.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Markdown: The code shall conform to &lt;a href=&#34;https://github.github.com/gfm/&#34;&gt;GitHub Flavor Markdown&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Doxygen (currently not in use): &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;In commands, &lt;code&gt;\&lt;/code&gt; shall be used instead of &lt;code&gt;@&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;If possible, no more than one &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;/&lt;/code&gt; shall be used together. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; For instance, use &lt;code&gt;//!&lt;/code&gt; rather than &lt;code&gt;///&lt;/code&gt;.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Localization： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Currently this project does not support localized resources except the documentation.&lt;/li&gt; &#xA;   &lt;li&gt;The programs in this project do not interoperate with system locale settings (see also &lt;a href=&#34;https://raw.githubusercontent.com/linuxdeepin/unilang/master/#Known-issues&#34;&gt;Known issues&lt;/a&gt;), and all messages in the user interface are treated as in &lt;code&gt;en-US&lt;/code&gt; locale.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; The limitations above are expected removed in future.&lt;/li&gt; &#xA;   &lt;li&gt;Multilingual hyperlinks may be added at the top of each translated edition of a document. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The links shall be exist in all translated edition, if any, except the edition of the current language may not be a link and have a different visual style.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Rationale&lt;/strong&gt; Given that there is no widely adopted and out-of-box native solution for switching the language of the documentation, explicit links maintained in the document may be needed for switching the language.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; See also related discussions: &lt;a href=&#34;https://github.com/github/markup/issues/899&#34;&gt;[1]&lt;/a&gt;, &lt;a href=&#34;https://github.com/github/cmark-gfm/issues/243&#34;&gt;[2]&lt;/a&gt; and &lt;a href=&#34;https://talk.commonmark.org/t/adding-lang-lang-syntax/3998&#34;&gt;[3]&lt;/a&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;The translated edition of documents in this repository can be added as the program code. The filename of translated editions shall conform to the following rules: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Each file should be in a specific language indicated by a language code, or defaulted to &lt;code&gt;en-US&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;The language code, if any, shall occur once together with its prefixed &lt;code&gt;.&lt;/code&gt; in the filename, before the prefixed &lt;code&gt;.&lt;/code&gt; and file extension (if any).&lt;/li&gt; &#xA;     &lt;li&gt;The language code shall consist of a sequence of &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_639-1&#34;&gt;ISO 639-1&lt;/a&gt; code, &lt;code&gt;-&lt;/code&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_3166-1&#34;&gt;ISO 3166-1&lt;/a&gt; code.&lt;/li&gt; &#xA;     &lt;li&gt;The preferred captalization in the standards shall be used in the language code, i.e. the small case in ISO 639-1 and the capital case in ISO 3166-1.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; The form of the language code conforms to the recommendation of &lt;a href=&#34;https://en.wikipedia.org/wiki/IETF_language_tag&#34;&gt;IETF language tag&lt;/a&gt;, specifically, the &#34;language&#34; and &#34;region&#34; syntax elements in &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc5646.html&#34;&gt;RFC 5646&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; The filename of &lt;code&gt;en-US&lt;/code&gt; edition omits &lt;code&gt;.en-US&lt;/code&gt;. For instance, &lt;code&gt;README.md&lt;/code&gt; is the filename of the translated edition in &lt;code&gt;en-US&lt;/code&gt; locale. The corresponding edition in &lt;code&gt;zh-CN&lt;/code&gt; is &lt;code&gt;README.zh-CN.md&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Unilang is released under &lt;a href=&#34;https://spdx.org/licenses/BSD-2-Clause-Patent.html&#34;&gt;BSD-2-Clause-Patent&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>deepmind/s6</title>
    <updated>2022-09-20T01:32:45Z</updated>
    <id>tag:github.com,2022-09-20:/deepmind/s6</id>
    <link href="https://github.com/deepmind/s6" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;S6: A standalone JIT compiler library for CPython&lt;/h1&gt; &#xA;&lt;p&gt;S6 was a project that started within DeepMind in 2019 to accelerate CPython with just-in-time compilation (“JIT”). These features would be provided as a regular Python library, and no changes to the CPython interpreter itself would be necessary. S6 was aiming to do for Python what V8 did for Javascript (the name is an &lt;a href=&#34;https://en.wikipedia.org/wiki/Straight-six_engine&#34;&gt;homage&lt;/a&gt; to V8). Work was based on CPython verison 3.7. Depending on the workload, we saw speedups as high as 9.5x on common benchmarks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import s6&#xA;&#xA;@s6.jit&#xA;def foo(x):&#xA;  return x + 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project goals&lt;/h2&gt; &#xA;&lt;p&gt;Python is slow, and a lot of researchers use Python as their primary interface to build models. This can create friction for researchers, and speeding up the model building process can improve iteration and development time. The &lt;a href=&#34;https://en.wikipedia.org/wiki/Network_effect&#34;&gt;network effect&lt;/a&gt; of Python has made moving to a different language very difficult. So with Python here to stay, we looked to improve upon it.&lt;/p&gt; &#xA;&lt;p&gt;The requirements we set ourselves were:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Increase the speed of common programs x-fold: not 10%, but 10x.&lt;/li&gt; &#xA; &lt;li&gt;Be fully compatible with CPython. Most tools, libraries, and infrastructure that researchers use only work with CPython.&lt;/li&gt; &#xA; &lt;li&gt;Not require any code changes. Users should be able to import S6, wrap their top level function in a JIT annotation, and that’s it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status and support&lt;/h2&gt; &#xA;&lt;p&gt;We have stopped working on S6 internally. As such, this repository has been archived and we are not accepting pull requests or issues. We open-sourced the code and provided a design overview below to spur conversations within the Python community and inspire future work on improving Python.&lt;/p&gt; &#xA;&lt;h2&gt;Setting it up locally&lt;/h2&gt; &#xA;&lt;p&gt;We set up a Docker container and some Jupyter notebooks to allow you to build and experiment with S6. To do so, follow these steps.&lt;/p&gt; &#xA;&lt;p&gt;Set up the S6 Docker container:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/get-started/#download-and-install-docker&#34;&gt;Install docker&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the S6 docker container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build -t deepmind-s6:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can run the docker container in two different ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;By running a notebook server:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -p 8888:8888 deepmind-s6:latest jupyter lab --port 8888 --ip 0.0.0.0 --no-browser --allow-root --NotebookApp.token=SECRET_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then open &lt;code&gt;localhost:8888/lab?token=SECRET_TOKEN&lt;/code&gt; in a web browser.&lt;/p&gt; &lt;p&gt;Demo &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/s6/main/src/notebooks/hello_world.ipynb&#34;&gt;notebooks&lt;/a&gt; are found in the &lt;code&gt;notebooks&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;By running an interactive shell session:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -it deepmind-s6:latest /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The test suite for S6 can be run from within a Docker shell session with:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;(cd /open-s6/s6/build; ninja test)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Benchmark results&lt;/h2&gt; &#xA;&lt;p&gt;Overall, S6 provides a speed of up to 10x over CPython for pure Python benchmarks. Workloads that heavily rely on C APIs, like those that use NumPy, are bottlenecked by the C API calltime. Future work could include targeted optimisations in the C code to improve this; for example, use the profiling metadata to skip all the type checks normally done by C APIs.&lt;/p&gt; &#xA;&lt;p&gt;Most testing during development was against internal benchmarks, or private variants of external benchmarks. Here we report results on three public &lt;a href=&#34;https://github.com/python/pyperformance&#34;&gt;pyperformance&lt;/a&gt; benchmarks; their docstrings detail minor modifications.&lt;/p&gt; &#xA;&lt;h3&gt;Richards&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/python/pyperformance/raw/main/pyperformance/data-files/benchmarks/bm_richards/run_benchmark.py&#34;&gt;Richards&lt;/a&gt; is a common benchmark that best represents pure Python code that researchers write. For the Richards benchmark located under the benchmarks directory, if you run with 100 iterations, depending on your hardware, you should see a 7x speedup over the default Python 3.7 interpreter.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On our internal dev machines, we saw speedups of 9.5x on average.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Raytrace&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/python/pyperformance/raw/main/pyperformance/data-files/benchmarks/bm_raytrace/run_benchmark.py&#34;&gt;Raytrace&lt;/a&gt; is a pure-Python mathematical benchmark.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On our internal dev machines, we saw speedups of 3-4.5x on average.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Unpack Sequence&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/python/pyperformance/raw/main/pyperformance/data-files/benchmarks/bm_unpack_sequence/run_benchmark.py&#34;&gt;Unpack sequence&lt;/a&gt; is the worst performing benchmark we ran on S6. The cause is that S6 has its own &lt;code&gt;ceval.c&lt;/code&gt; interpreter that is not as well optimized as the standard CPython one. We had to write a separate &lt;code&gt;ceval.c&lt;/code&gt;-like interpreter in order to add hooks for S6 to compile functions and collect type feedback. With the standard unpack sequence benchmark you can see a 5x slowdown as the main &lt;code&gt;do_unpacking&lt;/code&gt; function is called once and with that one call, we use our own, slower interpreter.&lt;/p&gt; &#xA;&lt;p&gt;Even then, &lt;code&gt;UNPACK_SEQUENCE&lt;/code&gt; is a difficult bytecode to handle from a type checking perspective. Even if the input to the function is an array/tuple, an array/tuple can contain any different type and in different orderings. So we need to type check every element to make sure that the JIT&#39;d function is being passed the correct input types. Because of all this type checking, if a function either unpacks a giant array/tuple or does a lot of unpacking (like the benchmark), our compiled code can end up being slower than interpreted CPython. As such, if we detect there are many or a large unpack, we avoid compiling the function and bail out to the optimized &lt;code&gt;ceval.c&lt;/code&gt; interpreter in CPython everytime we come back to this function.&lt;/p&gt; &#xA;&lt;p&gt;With the issues of &lt;code&gt;UNPACK_SEQUENCE&lt;/code&gt; in mind, we included two version of the unpack sequence benchmark. The super slow one (0.2x speedup) is where the for-loop is in &lt;code&gt;do_unpacking&lt;/code&gt; so we never bail out to &lt;code&gt;ceval.c&lt;/code&gt; and then a faster one (0.97x speedup) where we took the for-loop out of &lt;code&gt;do_unpacking&lt;/code&gt; and instead call &lt;code&gt;do_unpacking&lt;/code&gt; &lt;code&gt;loops&lt;/code&gt; number of times.&lt;/p&gt; &#xA;&lt;h2&gt;Known limitations&lt;/h2&gt; &#xA;&lt;p&gt;S6 exists as a standalone dependency and does not require any &lt;em&gt;code&lt;/em&gt; changes in CPython. However, it was developed for an environment with two unusual features:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Native code needs to store a frame pointer, which typically requires the &lt;code&gt;-fno-omit-frame-pointer&lt;/code&gt; compiler flag when building CPython and native extensions. Without this change, jit compilation might crash in some cases.&lt;/li&gt; &#xA; &lt;li&gt;In the CPython interpreter, the function &lt;code&gt;PyFrame_FastToLocalsWithError&lt;/code&gt; needs to be intercepted by S6. We used to do this by linking Python and Python extensions with the linker flag &lt;code&gt;--wrap=PyFrame_FastToLocalsWithError&lt;/code&gt;, but this is not part of the current release, and jit compilation might misbehave in some cases.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As discussed in the &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/s6/main/#unpack-sequence&#34;&gt;unpack_sequence&lt;/a&gt; benchmark section, S6 does not run well on giant functions. To mitigate this, break up your function into smaller pieces.&lt;/p&gt; &#xA;&lt;p&gt;S6 only supports CPython 3.7, but with some changes it could be made to support later CPython versions.&lt;/p&gt; &#xA;&lt;p&gt;There is further work to be done optimising S6&#39;s strongjit. Further performance improvements would be expected from additional compiler optimisations, such as inlining.&lt;/p&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;S6 replaces the existing CPython interpreter/bytecode handler &lt;a href=&#34;https://github.com/python/cpython/raw/3.7/Python/ceval.c&#34;&gt;&lt;code&gt;ceval.c&lt;/code&gt;&lt;/a&gt; with our own &lt;code&gt;interpreter.cc&lt;/code&gt;. For every &lt;code&gt;PyCodeObject&lt;/code&gt;, S6 does the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Check to see if the function has already been compiled; if the code has, S6 looks up and runs the compiled code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the code is not compiled, S6 runs the S6 bytecode interpreter, which is very similar to the CPython interpreter.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Similarly to V8, we maintain a counter that counts how many interpreter instructions have been executed. When this reaches a threshold, the PyCodeObject at the top of the call stack is considered for compilation.&lt;/p&gt; &#xA;&lt;p&gt;To determine what code to compile, we use the Oracle which asynchronously compiles the function after a certain number of bytecode instructions and function visits. When compiling code, S6 translates it to &lt;em&gt;strongjit&lt;/em&gt;: an intermediate representation suitable for various optimization passes. CPython bytecode implementations can be complex, and translation may create many strongjit instructions per Python bytecode.&lt;/p&gt; &#xA;&lt;p&gt;Given type feedback, we may choose to make assumptions about inputs to a function in order to generate optimisation opportunities (for instance that an input is always an integer). We refer to this as function specialization. Guards are put in place to check that these assumptions hold. If they do not, then the function must be de-optimized and the bytecode is interpreted as before. Because checking the type of all arguments at every function call may be costly, and to avoid producing huge numbers of specializations, we only specialize on the common case of the type of the first argument (usually &lt;code&gt;self&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;When deoptimizing, we convert the optimized function state into CPython state (PyFrameObject) and continue with the normal interpreter. However in many cases we are not at a bytecode boundary when we deoptimize. In this case we interpret the strongjit IR until we get to a boundary point. After writing and optimizing the strongjit IR, S6 lowers it to x86 machine code using the &lt;code&gt;asmjit&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;h3&gt;Hidden classes&lt;/h3&gt; &#xA;&lt;p&gt;In its initial design, S6 used inline caching keyed on an object’s &lt;em&gt;Map&lt;/em&gt;. A Map comes from prototype-based languages (introduced in &lt;a href=&#34;https://link.springer.com/chapter/10.1007/BFb0057013&#34;&gt;SELF&lt;/a&gt;). It is also termed a &lt;em&gt;Shape&lt;/em&gt; (in V8). It attempts to describe the location of attributes within an object. All objects with the same Map have the same attributes in the same locations. An &lt;em&gt;inline cache&lt;/em&gt; memoizes the last result of an operation based on the Map of the input.&lt;/p&gt; &#xA;&lt;p&gt;Frequently we used the Map as a cache key, as any modification to the behavior of an object should result in a &lt;em&gt;Map transition&lt;/em&gt; (Maps are immutable).&lt;/p&gt; &#xA;&lt;p&gt;For example, if we have the following in Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;c.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The pseudo code of lookup would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;if map(c) == M:&#xA;  return c.__attributes__[0]&#xA;else:&#xA;  return __getattr__(c, &#34;x&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or for example, as shown in the diagram below, to get the &lt;code&gt;x&lt;/code&gt; attribute we:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Obtain the &lt;code&gt;tp_dictptr&lt;/code&gt; field from the object’s type.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;tp_dictptr&lt;/code&gt; to get the &lt;code&gt;__dict__&lt;/code&gt; field’s address from the object.&lt;/li&gt; &#xA; &lt;li&gt;Follow the &lt;code&gt;__dict__&lt;/code&gt; to get the &lt;code&gt;PyDictObject&lt;/code&gt; itself.&lt;/li&gt; &#xA; &lt;li&gt;Look at the &lt;code&gt;values&lt;/code&gt; array. The &lt;code&gt;Map&lt;/code&gt; from step 2 tells you how to map from key to value.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;(below, the red arrows are direct pointers, while purple arrows are indirect using the offset int value)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/deepmind/s6/main/src/images/attribute_access.png&#34; alt=&#34;Attribute access diagram.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;However, there are at least three issues with this approach:&lt;/p&gt; &#xA;&lt;p&gt;In almost all instances &lt;strong&gt;a cache keyed on a &lt;code&gt;Map&lt;/code&gt; is insufficient&lt;/strong&gt;, as Python’s type system allows modifications to an object’s &lt;code&gt;Type&lt;/code&gt; to modify attribute lookup on the object, even if the object has overridden a given attribute already. The example of this is data descriptors. A modification to a &lt;code&gt;Type&lt;/code&gt; potentially invalidates all associated &lt;code&gt;Map&lt;/code&gt;s. A &lt;code&gt;Map&lt;/code&gt; could be specialized on the &lt;em&gt;type version&lt;/em&gt; of its type, but this loses all the benefits of structural typing. So when we should have a monomorphic cache lookup since two types look the same (duck typing), we still require a polymorphic lookup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class C(object):&#xA;  def __init__(self):&#xA;    self.x = 2&#xA;class D(object):&#xA;  def __init__(self):&#xA;    self.x = 3&#xA;def f(a : Union[C or D]):&#xA;  return a.x  # Structurally monomorphic, nominally polymorphic.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Inline caches reference mutable data&lt;/strong&gt;. This can be a problem when dealing with functions. Holding borrowed references to function objects is unsafe, and acquiring references to function objects can be costly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def f(l, a):&#xA;  def g(x): ...&#xA;  for x in l:&#xA;    a += g(x) # inline cache holds reference to &#34;g&#34;. Unsafe if borrowed, costly&#xA;              # if increffed every time, and changes the lifetime of any object&#xA;              # captured by `g`.&#xA;  return a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We needed to &lt;strong&gt;add an extra field to &lt;code&gt;PyObject&lt;/code&gt;&lt;/strong&gt; to store the map pointer, but this would have broken ABI guarantees and made the possibility of upstreaming S6 into CPython very challenging.&lt;/p&gt; &#xA;&lt;p&gt;So instead we implemented hidden classes. Hidden classes are a parallel type system to Python’s types. They are a subcategorization of types - objects of a unique type may have different hidden classes, but objects of a unique hidden class always have the same type. In this way they are distinct from &lt;em&gt;Maps&lt;/em&gt; or &lt;em&gt;Shapes&lt;/em&gt; that provide uniqueness based only on structural typing.&lt;/p&gt; &#xA;&lt;p&gt;Hidden classes provide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Behavioral stability; if an object’s hidden class has not changed, its behavior has not changed.&lt;/li&gt; &#xA; &lt;li&gt;A dense numbering; for efficient lookup in a global dispatch table.&lt;/li&gt; &#xA; &lt;li&gt;A compile-time-inspectable enumeration of members and methods.&lt;/li&gt; &#xA; &lt;li&gt;Type information about member variables and methods.&lt;/li&gt; &#xA; &lt;li&gt;Type information is provided as a lattice in which information becomes weaker but never stronger.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Given that hidden classes contain a lattice of type information, they are not immutable, but they do change in well-defined and observable ways.&lt;/p&gt; &#xA;&lt;p&gt;CPython never uses hidden classes. They are invisible to CPython and no type queries, subclass queries will never return different information based on hidden classes.&lt;/p&gt; &#xA;&lt;h4&gt;Obtaining a class from a PyObject&lt;/h4&gt; &#xA;&lt;p&gt;We must be able to store a mapping between PyObjects and hidden classes. The mapping must be incredibly fast.&lt;/p&gt; &#xA;&lt;p&gt;One of the goals of S6 is to be import-compatible with existing CPython. Modifications to the PyObject class were not allowed, and as PyObject only contains two members (ob_refcnt and ob_type), there is nowhere to hide a class ID. Instead, we hide the hidden class ID inside PyDictObjects and PyTypeObjects.&lt;/p&gt; &#xA;&lt;p&gt;We observe that there are two categories of object - objects that behave the same as a newly created object of their type, and those that behave differently.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class A(object): pass&#xA;a = A()&#xA;b = A()  # a and b behave the same, and are of the same type, so same class ID.&#xA;b.x = 2  # Now b behaves differently from A, they must have differing class IDs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For objects that behave the same a a newly created object of the same type, we can store the class ID in the type object.&lt;/p&gt; &#xA;&lt;p&gt;For objects that behave differently: in order to behave differently they must have a &lt;code&gt;__dict__&lt;/code&gt;. This is the only means of changing behaviour. Therefore we can store the class ID in the PyDictObject used as &lt;code&gt;__dict__&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Specifically: Class identifiers are dense integers &amp;lt;= 20 bits in size.&lt;/p&gt; &#xA;&lt;p&gt;If the PyObject has a &lt;code&gt;__dict__&lt;/code&gt;, the class identifier uses the uppermost 20 bits of the &lt;code&gt;dict&lt;/code&gt;’s &lt;code&gt;ma_version_tag&lt;/code&gt; field.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise the class identifier uses the uppermost 20 bits of &lt;code&gt;PyTypeObject&lt;/code&gt;’s &lt;code&gt;tp_flags&lt;/code&gt; field. This field is 64-bits long and is already zeroed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/deepmind/s6/main/src/images/class_identifier_storage.png&#34; alt=&#34;Class identifier storage diagram.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This has implications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We don’t support hidden classes for objects with custom attribute getters or setters, because modifications to an object’s attributes require a &lt;code&gt;dict&lt;/code&gt; for us to store the class ID.&lt;/li&gt; &#xA; &lt;li&gt;If an object’s &lt;code&gt;dict&lt;/code&gt; is modified outside the visibility of S6, a new &lt;code&gt;ma_version_tag&lt;/code&gt; will be set by CPython. This will have the upper 20 bits zeroed, setting the effective class ID to 0. This allowed us to notice if our assumptions have been broken behind our back. Note that wrap-around for the other 44 bits would take 5 years if dicts were modified at 100kHz.&lt;/li&gt; &#xA; &lt;li&gt;We don’t support objects with &lt;code&gt;tp_dictoffset &amp;lt; 0&lt;/code&gt;. This means the &lt;code&gt;dict&lt;/code&gt; is offset from the end of the object in memory, which is a more complex calculation. This is rare and only really used for &lt;code&gt;str&lt;/code&gt; or &lt;code&gt;long&lt;/code&gt; subclasses.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The ability to store class IDs inside the &lt;code&gt;PyTypeObject&lt;/code&gt; allows us to store a hidden class for all objects even if they do not have a &lt;code&gt;dict&lt;/code&gt;. An example of this is builtin types, which are generally immutable. Objects that have custom attribute setters are still excluded however, because tracking whether an object still has the behaviors of its base type or not is impossible.&lt;/p&gt; &#xA;&lt;h4&gt;Behavioral changes&lt;/h4&gt; &#xA;&lt;p&gt;There are two classes of behavioral change: modifications to the type or a supertype and modifications to an object.&lt;/p&gt; &#xA;&lt;h5&gt;Type modification&lt;/h5&gt; &#xA;&lt;p&gt;Modification of a type potentially changes the behavior of all hidden classes indirectly derived from that type. Therefore, in order to use a hidden class with a type, we must ensure that we can detect all behavioral changes of the type and its supertypes.&lt;/p&gt; &#xA;&lt;p&gt;This is achieved by wrapping the modifiable members of the type and all its supertypes (&lt;code&gt;tp_setattro&lt;/code&gt;, &lt;code&gt;__bases__&lt;/code&gt;, &lt;code&gt;__class__&lt;/code&gt;) with a wrapper function that informs S6. If the type has a custom &lt;code&gt;setattro&lt;/code&gt;, we do not optimize the type.&lt;/p&gt; &#xA;&lt;p&gt;When a type is modified, the world is stopped (easy because of the GIL), compilations are halted, all affected classes are modified and if any attribute of a class was changed that generated code relied upon, the generated code is thrown away.&lt;/p&gt; &#xA;&lt;h5&gt;Object modification&lt;/h5&gt; &#xA;&lt;p&gt;If an attribute is added or deleted from an object, the object must take a class transition and have a new class. This is so that all attribute loads and stores can load and store without &lt;code&gt;nullptr&lt;/code&gt; or out of bounds guards.&lt;/p&gt; &#xA;&lt;p&gt;If an existing attribute is &lt;em&gt;modified&lt;/em&gt;, then it is possible the behavior of an object changes. Examples include modifying a method. The method table for the object is then incorrect; the object must undergo a class transition. Attributes for which modification &lt;em&gt;requires&lt;/em&gt; a class transition are marked as ‘behavioral’.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class C(object):&#xA;  def f(self): pass&#xA;&#xA;a = C()  # Has hidden class H&#xA;a.x = 2  # New hidden class, H -&amp;gt; H2 because new attribute `x`.&#xA;a.x = 3  # Same class H2 - attribute merely changed.&#xA;a.f = 4  # New hidden class, H2 -&amp;gt; H3, because `f` was a member function before&#xA;         # and thus was marked &#34;behavioral&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Cacheable attributes&lt;/h5&gt; &#xA;&lt;p&gt;Attributes that do not change value across all object instances of a class are termed ‘cacheable’. These attributes have a stable value and the code generator may emit code that relies upon this value being stable. Simple cases include a boolean attribute. An attribute-write to an attribute that is currently marked ‘cacheable’ to a different value simply removes the ‘cacheable’ flag and any code generated that relied on the attribute is thrown away.&lt;/p&gt; &#xA;&lt;h4&gt;Globals&lt;/h4&gt; &#xA;&lt;p&gt;Python code contains a large number of lookups to the &lt;code&gt;__globals__&lt;/code&gt; dict. Even a function call requires consulting the globals dict to obtain the &lt;code&gt;PyFunctionObject&lt;/code&gt; for a symbol name.&lt;/p&gt; &#xA;&lt;p&gt;We can consider this dict in the same way as we treat object &lt;code&gt;__dict__&lt;/code&gt; fields; we store a class ID in the globals dict, and can use all of the fast attribute tricks implemented for objects on global values.&lt;/p&gt; &#xA;&lt;p&gt;In particular, the &lt;code&gt;cacheable&lt;/code&gt; property described above implicitly allows us to optimize away code hidden behind global booleans that are never modified:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;DEBUG_MODE = False  # Set this to True to enable debug statements.&#xA;&#xA;def f(a):&#xA;  if DEBUG_MODE:  # This is a load of globals.DEBUG_MODE, which is known to be&#xA;    print(a)      # always False at runtime.&#xA;  return a + 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adoption of new types and objects&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Adoption&lt;/em&gt; of a type or object is where S6 determines the correct hidden class and sets it. Adoption of an object involves ensuring that its type is adopted and setting its hidden class. This may involve inspecting the dictionary to see which attributes have already been set. Adoption of a type involves creating a new hidden class, setting the &lt;code&gt;Py_TPFLAGS_S6_Adopted&lt;/code&gt; flag and overriding &lt;code&gt;tp_new&lt;/code&gt; to a wrapper function that allows us to adopt all new instances of the object.&lt;/p&gt; &#xA;&lt;p&gt;When S6 is initialized, we eagerly scan the type hierarchy to adopt all types. We override &lt;code&gt;PyTypeObject::tp_new&lt;/code&gt; to a wrapper that lets us detect and adopt newly created types.&lt;/p&gt; &#xA;&lt;p&gt;This should allow us to catch all new instances of all objects except some extension objects (Extension types that call &lt;code&gt;Py_Ready()&lt;/code&gt; for the first time &lt;em&gt;after&lt;/em&gt; we have greedily scanned the type hierarchy). These will be small in number and we can add mitigations if needed (like adopting in tactical places like &lt;code&gt;GetAttr&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Oracle&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Oracle&lt;/code&gt; class determines which functions are worth compiling and manages the compilation queue. For development/debugging, you can configure whether functions should be compiled asynchronously/synchronously, how often functions are profiled and compiled, and more.&lt;/p&gt; &#xA;&lt;p&gt;Compilation in the Oracle is a two step process. We don’t immediately compile the function we first step into. Every &lt;code&gt;profile_bytecode_instructions_interval&lt;/code&gt; instructions, the current &lt;code&gt;PyCodeObject&lt;/code&gt; is inspected and &lt;code&gt;hotness_threshold&lt;/code&gt; decremented; if &lt;code&gt;hotness_threshold&lt;/code&gt; reaches zero, the object will be optimized. This two-stage process reduces the frequency of accessing code metadata.&lt;/p&gt; &#xA;&lt;h3&gt;Arithmetic Unboxing&lt;/h3&gt; &#xA;&lt;p&gt;Since &lt;code&gt;bool&lt;/code&gt;s/&lt;code&gt;float&lt;/code&gt;s/&lt;code&gt;long&lt;/code&gt;s in Python are all objects, they are boxed types. Doing arithmetic operations on these boxed types can be very expensive compared to a single assembly instruction on values in registers. And since we collect type information, we can unbox the values from the CPython boxed types to do much faster arithmetic operations. Refer to &lt;code&gt;UnboxInst&lt;/code&gt; and &lt;code&gt;BoxInst&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;@s6.jit&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Decorator to mark the function as JITable to S6. When the callable is invoked, just-in-time compilation mode is enabled if it was not enabled already. All functions called transitively by the decorated function are considered for just-in-time compilation, but only one function is compiled at a time. Note that a function in the call stack is not necessarily compiled on the first call, but only after some number of calls. See the Oracle section for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Developer APIs&lt;/h3&gt; &#xA;&lt;p&gt;A number of internal APIs are exposed by calling &lt;code&gt;s6.inspect(foo)&lt;/code&gt; for any function &lt;code&gt;foo&lt;/code&gt; that is decorated with &lt;code&gt;@s6.jit&lt;/code&gt; or have been marked for tracing if the decorated function called the function. These are completely unnecessary during normal operation, and are made accessible for users to inspect and introspect the JIT process.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;strongjit&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns a string version of the intermediate representation used by S6 of &lt;code&gt;fn&lt;/code&gt;, which is named “strongjit”. The version returned here is the version after optimizations before it is compiled to machine code. The strongjit can be interpreted by using the &lt;code&gt;_evaluate&lt;/code&gt; method of the s6.jit object.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;is_compiled&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;fn&lt;/code&gt; is currently compiled, and &lt;code&gt;False&lt;/code&gt; otherwise.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;force_compile()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Compiles &lt;code&gt;fn&lt;/code&gt;, if it has not already been compiled. Throws an exception if the compilation fails.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;deoptimize()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Deoptimize &lt;code&gt;fn&lt;/code&gt;. This only deoptimizes the main specialization. Throws &lt;code&gt;NotCompiledError&lt;/code&gt; if not compiled&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;_evaluate(...)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Evaluates &lt;code&gt;fn&lt;/code&gt; with the S6 evaluator. &#34;Evaluating&#34; means interpreting the S6 strongjit of &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The function &lt;code&gt;fn&lt;/code&gt; needs to be compiled, otherwise execution will fall back to using the CPython interpreter and compilation will never be triggered. This function has no purpose other than debugging. If calling a compiled function with &lt;code&gt;_evaluate&lt;/code&gt; doesn&#39;t result in the same behavior as when calling it will the normal call (of a jitted function), then S6 code generation has a bug.&lt;/p&gt; &#xA;&lt;p&gt;This will apply to all functions called by &lt;code&gt;fn&lt;/code&gt; recursively except if another explicit call to the S6 API changes it. If a called function wasn&#39;t compiled, execution will revert to using the plain CPython interpreter.&lt;/p&gt; &#xA;&lt;h2&gt;Strongjit IR&lt;/h2&gt; &#xA;&lt;p&gt;Strongjit is a static single-assignment form intermediate representation (SSA IR) that uses block arguments instead of PHI instructions for control flow. To produce optimized code, Python bytecode is translated to strongjit. Successive optimisation passes improve the strongjit. The improved strongjit is then translated to assembly. The design goals of the IR were:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Textually round-trippable for testing.&lt;/li&gt; &#xA; &lt;li&gt;Compact, cache efficient. This is a JIT compiler, and we manipulate existing instructions/ops much less than frameworks like MLIR. Strongjit is, however, designed to be easily translatable to MLIR.&lt;/li&gt; &#xA; &lt;li&gt;Amenable to standard operations and traversals found in optimizing compilers&lt;/li&gt; &#xA; &lt;li&gt;Certain operations should be cheap: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Instruction insertion.&lt;/li&gt; &#xA;   &lt;li&gt;Instruction deletion.&lt;/li&gt; &#xA;   &lt;li&gt;Block insertion, deletion, splitting.&lt;/li&gt; &#xA;   &lt;li&gt;RPO traversal.&lt;/li&gt; &#xA;   &lt;li&gt;Traversing def-use chains (at least from use to def; traversing from a def to all uses is less common).&lt;/li&gt; &#xA;   &lt;li&gt;Holding a handle to an instruction that is invariant to instruction insertion/deletion.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Blocks and Instructions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Value&lt;/code&gt;s are the base of the hierarchy. Basic blocks, instructions and block arguments are all values. They can use other &lt;code&gt;Value&lt;/code&gt;s and be used in turn. &lt;code&gt;Value&lt;/code&gt;s have an operand list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Instruction&lt;/code&gt;s are &lt;code&gt;Value&lt;/code&gt;s that reside inside a &lt;code&gt;Block&lt;/code&gt;. Their address is constant and is never reused.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Block&lt;/code&gt;s are &lt;code&gt;Value&lt;/code&gt;s. &lt;code&gt;Instruction&lt;/code&gt;s can refer to &lt;code&gt;Block&lt;/code&gt;s as operands, for example &lt;code&gt;jmp &amp;amp;0&lt;/code&gt;. &lt;code&gt;Block&lt;/code&gt;s contain a doubly linked list of &lt;code&gt;Instruction&lt;/code&gt;s. &lt;code&gt;Block&lt;/code&gt;s do not own the storage for &lt;code&gt;Instruction&lt;/code&gt;s - this is owned by &lt;code&gt;Function&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Function&lt;/code&gt;s are the outermost unit of the hierarchy. They maintain a list of &lt;code&gt;Block&lt;/code&gt;s and own the storage for all &lt;code&gt;Block&lt;/code&gt;s and &lt;code&gt;Instruction&lt;/code&gt;s. The list of &lt;code&gt;Block&lt;/code&gt;s is again a doubly linked list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Offset&lt;/code&gt;: a bytecode instruction offsets. Gives a location within interpreted code. Used for exception/tracing location information and for deoptimization out of generated code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For cache locality, all instructions reside in a single deque-like container that uses tombstones when instructions are erased to keep all instruction addresses constant. This allows pointers to instructions to be stored.&lt;/p&gt; &#xA;&lt;p&gt;There is a lightweight class hierarchy that uses the instruction opcode as a discriminator (See: &lt;code&gt;casts&lt;/code&gt;) and allows rich, type safe accessors/mutators.&lt;/p&gt; &#xA;&lt;h3&gt;Instructions&lt;/h3&gt; &#xA;&lt;p&gt;See implementation in &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/s6/main/src/strongjit/instructions.h&#34;&gt;&lt;code&gt;instructions.h&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ConstantInst&lt;/code&gt;: Materializes an &lt;code&gt;int64&lt;/code&gt; immediate as a &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;JmpInst&lt;/code&gt;: An unconditional jump to a single successor.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BrInst&lt;/code&gt;: A conditional branch to two successors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;CompareInst&lt;/code&gt;: Compares two operands.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ExceptInst&lt;/code&gt;: Unconditional jump to the exception handler.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DeoptimizeIfInst&lt;/code&gt;: A conditional deoptimize. The &lt;code&gt;true_successor&lt;/code&gt; is a deoptimized block. Maintains a set of values that are required in order to run the deoptimized code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ReturnInst&lt;/code&gt;: Unconditional return.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;UnreachableInst&lt;/code&gt;: Terminate the current control flow arc with an error.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;NegateInst&lt;/code&gt;: Unary arithmetic negation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;NotInst&lt;/code&gt;: Unary boolean &lt;code&gt;not&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;AddInst&lt;/code&gt;: Binary arithmetic addition.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SubtractInst&lt;/code&gt;: Binary arithmetic subtraction.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;MultiplyInst&lt;/code&gt;: Binary arithmetic multiplication.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DivideInst&lt;/code&gt;: Binary arithmetic division.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RemainderInst&lt;/code&gt;: Binary arithmetic modulo operation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;AndInst&lt;/code&gt;: Binary boolean &lt;code&gt;and&lt;/code&gt; operation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;OrInst&lt;/code&gt;: Binary boolean &lt;code&gt;or&lt;/code&gt; operation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;XorInst&lt;/code&gt;: Binary boolean &lt;code&gt;xor&lt;/code&gt; operation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ShiftLeftInst&lt;/code&gt;: Binary shift-left operation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ShiftRightSignedInst&lt;/code&gt;: Binary signed shift-right operation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;IntToFloatInst&lt;/code&gt;: integer to float conversion.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SextInst&lt;/code&gt;: Sign-extension operation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;IncrefInst&lt;/code&gt;: Increase reference count.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DecrefInst&lt;/code&gt;: Decrease reference count.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LoadInst&lt;/code&gt;: Loads from a pointer location with optional extension.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LoadGlobalInst&lt;/code&gt;: Loads a global by name, given an index into the &lt;code&gt;kNames&lt;/code&gt; tuple. Lookup follows the Python convention, looking in the frame globals dict and then in builtins if not found in globals. The result is a borrowed reference to a &lt;code&gt;PyObject*&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; (with an appropriate exception set) if the lookup failed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;StoreInst&lt;/code&gt;: Stores to a pointer location with optional truncation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;FrameVariableInst&lt;/code&gt;: Obtains the address of a local variable. This instruction also takes an index &lt;code&gt;i&lt;/code&gt;, used with the &lt;code&gt;kConsts&lt;/code&gt;, &lt;code&gt;kNames&lt;/code&gt;, &lt;code&gt;kFastLocals&lt;/code&gt; and &lt;code&gt;kFreeVars&lt;/code&gt; kinds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;CallNativeInst&lt;/code&gt;: Calls a C function by symbol. The callee must be in a known &lt;code&gt;allowlist&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RematerializeInst&lt;/code&gt;: A lazily called &lt;code&gt;CallNativeInst&lt;/code&gt;. It exists to allow eliding work on the fast path that needs to be done if we deoptimize. An example here is eliding an attribute load for a method call. If we are forced to deoptimize before the call, for example while computing arguments, we are forced to materialize the attribute load. A &lt;code&gt;RematerializeInst&lt;/code&gt; is only run during deoptimization, if the de-optimizer finds a &lt;code&gt;RematerializeInst&lt;/code&gt; in the value stack it will call the runtime function to materialize the true value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;CallPythonInst&lt;/code&gt;: Calls a Python value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;CallAttributeInst&lt;/code&gt;: Calls an attribute on a value. This is equivalent to &lt;code&gt;(call_python (call_native s6::GetAttr $x, &#34;attr&#34;), ...)&lt;/code&gt;. The attribute is stored as a string inside the function&#39;s string table.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;CallNativeIndirectInst&lt;/code&gt;: Calls a native function through a function pointer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SafepointInst&lt;/code&gt;: A &lt;code&gt;BytecodeBeginInst&lt;/code&gt;, &lt;code&gt;YieldValueInst&lt;/code&gt; or a &lt;code&gt;DeoptimizeIfSafepointInst&lt;/code&gt;. It contains a bytecode offset, value stack and try handler stack; enough information to construct an accurate interpreter frame.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BytecodeBeginInst&lt;/code&gt;: Marks the beginning of a bytecode instruction. This contains all the information required to reconstruct a CPython interpreter state: bytecode offset, value stack contents and try-block stack contents.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;YieldValueInst&lt;/code&gt;: Yields within a generator function. The function&#39;s state is saved, and can be resumed after the yield. &lt;code&gt;YieldValueInst&lt;/code&gt; takes a single operand that is yielded to its caller, and its result is the value the caller sends back. Because generators may be deoptimized while paused, &lt;code&gt;YieldValueInst&lt;/code&gt; also holds enough information to reconstruct an interpreter frame (it is a &lt;code&gt;SafepointInst&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DeoptimizeIfSafepointInst&lt;/code&gt;: Deoptimizes if a condition is &lt;code&gt;true&lt;/code&gt; or optionally &lt;code&gt;false&lt;/code&gt;. This instruction has enough information to materialize an interpreter frame (it is a &lt;code&gt;SafepointInst&lt;/code&gt;), so it does not need to act as control flow - if deoptimization occurs then no more strongjit IR code is run.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In this way it is distinguished from &lt;code&gt;DeoptimizeIfInst&lt;/code&gt;, which deoptimizes but is not at a &lt;code&gt;Safepoint&lt;/code&gt; boundary and needs to run more strongjit code (in the evaluator, usually) to get to a boundary.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;AdvanceProfileCounterInst&lt;/code&gt;: Adds amount to the profile counter. This indicates that approximately the amount of CPython bytecodes of work has been performed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;IncrementEventCounterInst&lt;/code&gt;: Increments a named event counter managed by the &lt;code&gt;EventCounters&lt;/code&gt; singleton. Each event counter counts the number of times that it has been incremented by reaching a trace point during the execution of compiled code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;TraceBeginInst&lt;/code&gt;: Starts a trace event with a named argument in the trace category &lt;code&gt;TraceCategories::kFunctionExecution&lt;/code&gt;. The name is stored in the global intern table. Deoptimization is handled implicitly. Each &lt;code&gt;TraceBeginInst&lt;/code&gt; must be balanced by a &lt;code&gt;TraceEndInst&lt;/code&gt;. This means that a &lt;code&gt;TraceBeginInst&lt;/code&gt; inserted at the beginning of a function must be balanced by a &lt;code&gt;TraceEndInst&lt;/code&gt; at all exit points, which include:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ReturnInst&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ExceptInst&lt;/code&gt;, where the instruction has no successors.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;YieldInst&lt;/code&gt;, with a matching &lt;code&gt;TraceBeginInst&lt;/code&gt; after the &lt;code&gt;YieldInst&lt;/code&gt; to resume the event.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;TraceEndInst&lt;/code&gt;: Ends a trace event with a named argument in the trace category &lt;code&gt;TraceCategories::kFunctionExecution&lt;/code&gt;. The trace event must have been started by a corresponding &lt;code&gt;TraceBeginInst&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BoxInst&lt;/code&gt;: Constructs a Python &lt;code&gt;Long&lt;/code&gt;/&lt;code&gt;Float&lt;/code&gt;/&lt;code&gt;Boolean&lt;/code&gt; from the operand.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;UnboxInst&lt;/code&gt;: Extracts a native &lt;code&gt;Long&lt;/code&gt;/&lt;code&gt;Float&lt;/code&gt;/&lt;code&gt;Boolean&lt;/code&gt; from a Python object. If the object is not of the correct type (e.g. &lt;code&gt;PyFloat&lt;/code&gt; where &lt;code&gt;PyLong&lt;/code&gt; is expected) or, in the case of &lt;code&gt;PyLong&lt;/code&gt;, its value exceeds 64 bits, then the &lt;code&gt;overflow&lt;/code&gt; flag is set. This can be detected using &lt;code&gt;overflowed?&lt;/code&gt; as the very next instruction.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;OverflowedInst&lt;/code&gt;: Determines whether the operand overflowed. The operand must be an arithmetic or unbox instruction, and must occur immediately before this instruction in the same block.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;FloatZeroInst&lt;/code&gt;: Determines whether the operand is floating point zero, either positive or negative.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GetClassIdInst&lt;/code&gt;: Given an object, returns its class ID.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GetObjectDictInst&lt;/code&gt;: Given an object, returns its dict or zero on failure.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If the &lt;code&gt;dictoffset&lt;/code&gt; or type are known, this instruction can operate more efficiently.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GetInstanceClassIdInst&lt;/code&gt;: Given an object&#39;s &lt;code&gt;__dict__&lt;/code&gt;, returns its class ID.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;CheckClassIdInst&lt;/code&gt;: Checks if an object has a particular class ID.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LoadFromDictInst&lt;/code&gt;: Given an object&#39;s &lt;code&gt;__dict__&lt;/code&gt;, loads &lt;code&gt;__dict__.ma_values[index]&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;StoreToDictInst&lt;/code&gt;: Given an object&#39;s &lt;code&gt;__dict__&lt;/code&gt;, stores to &lt;code&gt;__dict__.ma_values[index]&lt;/code&gt; and returns the value replaced.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;CallVectorcallInst&lt;/code&gt;: Calls a native function with CPython&#39;s vectorcall calling convention.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SetObjectClassInst&lt;/code&gt;: Sets the class ID of an object. The object and its instance dictionary are passed, and the &lt;code&gt;ma_version_tag&lt;/code&gt; of the instance dictionary is written.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>