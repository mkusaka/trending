<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-05T01:31:22Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>root-project/root</title>
    <updated>2022-11-05T01:31:22Z</updated>
    <id>tag:github.com,2022-11-05:/root-project/root</id>
    <link href="https://github.com/root-project/root" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official repository for ROOT: analyzing, storing and visualizing big data, scientifically&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://root-forum.cern.ch/uploads/default/original/2X/3/3fb82b650635bc6d61461f3c47f41786afad4548.png&#34; align=&#34;right&#34; height=&#34;50&#34;&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;The ROOT system provides a set of OO frameworks with all the functionality needed to handle and analyze large amounts of data in a very efficient way. Having the data defined as a set of objects, specialized storage methods are used to get direct access to the separate attributes of the selected objects, without having to touch the bulk of the data. Included are histograming methods in an arbitrary number of dimensions, curve fitting, function evaluation, minimization, graphics and visualization classes to allow the easy setup of an analysis system that can query and process the data interactively or in batch mode, as well as a general parallel processing framework, PROOF, that can considerably speed up an analysis.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to the built-in C++ interpreter cling, the command, the scripting and the programming language are all C++. The interpreter allows for fast prototyping of the macros since it removes the time consuming compile/link cycle. It also provides a good environment to learn C++. If more performance is needed the interactively developed macros can be compiled using a C++ compiler via a machine independent transparent compiler interface called ACliC.&lt;/p&gt; &#xA;&lt;p&gt;The system has been designed in such a way that it can query its databases in parallel on clusters of workstations or many-core machines. ROOT is an open system that can be dynamically extended by linking external libraries. This makes ROOT a premier platform on which to build data acquisition, simulation and data analysis systems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/lgpl.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-LGPL%20v2.1+-blue.svg?sanitize=true&#34; alt=&#34;License: LGPL v2.1+&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/5060&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/5060/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cite&lt;/h2&gt; &#xA;&lt;p&gt;When citing ROOT, please use both the reference reported below and the DOI specific to your ROOT version available &lt;a href=&#34;https://zenodo.org/badge/latestdoi/10994345&#34;&gt;on Zenodo&lt;/a&gt; &lt;a href=&#34;https://zenodo.org/badge/latestdoi/10994345&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/10994345.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;. For example, you can copy-paste and fill in the following citation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Rene Brun and Fons Rademakers, ROOT - An Object Oriented Data Analysis Framework,&#xA;Proceedings AIHENP&#39;96 Workshop, Lausanne, Sep. 1996,&#xA;Nucl. Inst. &amp;amp; Meth. in Phys. Res. A 389 (1997) 81-86.&#xA;See also &#34;ROOT&#34; [software], Release vX.YY/ZZ, dd/mm/yyyy,&#xA;(Select the right link for your release here: https://zenodo.org/search?page=1&amp;amp;size=20&amp;amp;q=conceptrecid:848818&amp;amp;all_versions&amp;amp;sort=-version).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Live Demo for CERN Users&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cern.ch/swanserver/cgi-bin/go?projurl=https://github.com/cernphsft/rootbinder.git&#34;&gt;&lt;img src=&#34;https://swanserver.web.cern.ch/swanserver/images/badge_swan_white_150.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;These screenshots shows some of the plots (produced using ROOT) presented when the Higgs boson discovery was &lt;a href=&#34;http://home.cern/topics/higgs-boson&#34;&gt;announced at CERN&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://root.cern/gallery/higgs_plots/CMS_Data_MC_Ratio_Plot.png&#34; alt=&#34;CMS Data MC Ratio Plot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://root.cern/gallery/higgs_plots/Atlas_P0_Trends.png&#34; alt=&#34;Atlas P0 Trends&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See more screenshots on our &lt;a href=&#34;https://root.cern/gallery&#34;&gt;gallery&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://root.cern/install&#34;&gt;https://root.cern/install&lt;/a&gt; for installation instructions. For instructions on how to build ROOT from these source files, see &lt;a href=&#34;https://root.cern/install/build_from_source&#34;&gt;https://root.cern/install/build_from_source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://root.cern/get_started&#34;&gt;&#34;Getting started with ROOT&#34;&lt;/a&gt; page is then the perfect place to get familiar with ROOT.&lt;/p&gt; &#xA;&lt;h2&gt;Help and Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://root.cern/forum/&#34;&gt;Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/root-project/root/issues&#34;&gt;Issue tracker&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-5820?filter=allopenissues&#34;&gt;Previous now read-only Jira issue tracker&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.cern.ch/group/root-dev/default.aspx&#34;&gt;Mailing lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://root.cern/guides/reference-guide&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://root.cern/doc/master/group__Tutorials.html&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution Guidelines&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/root-project/root/raw/master/CONTRIBUTING.md&#34;&gt;How to contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://root.cern/coding-conventions&#34;&gt;Coding conventions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://root.cern/meetings&#34;&gt;Meetings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>electronicarts/EASTL</title>
    <updated>2022-11-05T01:31:22Z</updated>
    <id>tag:github.com,2022-11-05:/electronicarts/EASTL</id>
    <link href="https://github.com/electronicarts/EASTL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EASTL stands for Electronic Arts Standard Template Library. It is an extensive and robust implementation that has an emphasis on high performance.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EA Standard Template Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/electronicarts/EASTL&#34;&gt;&lt;img src=&#34;https://travis-ci.org/electronicarts/EASTL.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;EASTL stands for Electronic Arts Standard Template Library. It is a C++ template library of containers, algorithms, and iterators useful for runtime and tool development across multiple platforms. It is a fairly extensive and robust implementation of such a library and has an emphasis on high performance above all other considerations.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;If you are familiar with the C++ STL or have worked with other templated container/algorithm libraries, you probably don&#39;t need to read this. If you have no familiarity with C++ templates at all, then you probably will need more than this document to get you up to speed. In this case, you need to understand that templates, when used properly, are powerful vehicles for the ease of creation of optimized C++ code. A description of C++ templates is outside the scope of this documentation, but there is plenty of such documentation on the Internet.&lt;/p&gt; &#xA;&lt;p&gt;EASTL is suitable for any tools and shipping applications where the functionality of EASTL is useful. Modern compilers are capable of producing good code with templates and many people are using them in both current generation and future generation applications on multiple platforms from embedded systems to servers and mainframes.&lt;/p&gt; &#xA;&lt;h2&gt;Package Managers&lt;/h2&gt; &#xA;&lt;p&gt;You can download and install EASTL using the &lt;a href=&#34;https://github.com/conan-io/conan&#34;&gt;Conan&lt;/a&gt; package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conan install eastl/3.15.00@&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The EASTL package in conan is kept up to date by Conan team members and community contributors. If the version is out-of-date, please &lt;a href=&#34;https://github.com/conan-io/conan-center-index&#34;&gt;create an issue or pull request&lt;/a&gt; on the Conan Center Index repository.&lt;/p&gt; &#xA;&lt;p&gt;You can download and install EASTL using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;vcpkg install eastl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The EASTL port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/electronicarts/EASTL/master/doc/Introduction.md&#34;&gt;EASTL Introduction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling sources&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/electronicarts/EASTL/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details on compiling and testing the source.&lt;/p&gt; &#xA;&lt;h2&gt;Credits And Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;EASTL was created by Paul Pedriana and he maintained the project for roughly 10 years.&lt;/p&gt; &#xA;&lt;p&gt;EASTL was subsequently maintained by Roberto Parolin for more than 8 years. He was the driver and proponent for getting EASTL opensourced. Rob was a mentor to all members of the team and taught us everything we ever wanted to know about C++ spookyness.&lt;/p&gt; &#xA;&lt;p&gt;After Rob, maintenance of EASTL passed to Max Winkler for roughly a year, until landing with its current maintainer Liam Mitchell.&lt;/p&gt; &#xA;&lt;p&gt;Significant EASTL contributions were made by (in alphabetical order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Avery Lee&lt;/li&gt; &#xA; &lt;li&gt;Colin Andrews&lt;/li&gt; &#xA; &lt;li&gt;JP Flouret&lt;/li&gt; &#xA; &lt;li&gt;Liam Mitchell&lt;/li&gt; &#xA; &lt;li&gt;Matt Newport&lt;/li&gt; &#xA; &lt;li&gt;Max Winkler&lt;/li&gt; &#xA; &lt;li&gt;Paul Pedriana&lt;/li&gt; &#xA; &lt;li&gt;Roberto Parolin&lt;/li&gt; &#xA; &lt;li&gt;Simon Everett&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;h2&gt;Projects And Products Using EASTL&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Frostbite - Electronic Arts - [https://www.ea.com/frostbite]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Modified BSD License (3-Clause BSD license) see the file LICENSE in the project root.&lt;/p&gt;</summary>
  </entry>
</feed>