<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-21T01:31:08Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>g3tsyst3m/elevationstation</title>
    <updated>2023-06-21T01:31:08Z</updated>
    <id>tag:github.com,2023-06-21:/g3tsyst3m/elevationstation</id>
    <link href="https://github.com/g3tsyst3m/elevationstation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;elevate to SYSTEM any way we can! Metasploit and PSEXEC getsystem alternative&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/g3tsyst3m/tokenpoacher/assets/19558280/6a74eba4-7a60-4e13-8c5f-d592e4de8858&#34; alt=&#34;the-shining-tricycle&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Elevation Station&lt;/h1&gt; &#xA;&lt;p&gt;Stealing and Duplicating SYSTEM tokens for fun &amp;amp; profit! We duplicate things, make twin copies, and then ride away.&lt;/p&gt; &#xA;&lt;p&gt;You have used Metasploit&#39;s getsystem and SysInternals PSEXEC for getting system privs, correct? Well, here&#39;s a similar standalone version of that...but without the AV issues...at least for now 😸&lt;/p&gt; &#xA;&lt;p&gt;💵💲If you like this tool and would like to help support me in my efforts improving this solution and others like it, please feel free to hit me up on Patreon! &lt;a href=&#34;https://patreon.com/G3tSyst3m&#34;&gt;https://patreon.com/G3tSyst3m&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt;NEW! Bypass UAC and escalate from medium integrity to high (must be member of local admin group) &lt;img src=&#34;https://github.com/g3tsyst3m/elevationstation/assets/19558280/a68fb013-99b2-4cea-99d1-f549036a61d5&#34; alt=&#34;UACBypass_quality&#34;&gt;&lt;/b&gt;&lt;/p&gt;&#xA;&lt;b&gt; &lt;p&gt;&lt;b&gt;quick rundown on commands&lt;/b&gt;&lt;/p&gt; &lt;p&gt;&lt;b&gt;Duplicate Process Escalation Method &lt;img src=&#34;https://github.com/g3tsyst3m/elevationstation/assets/19558280/06b17b2f-046b-4376-b6ae-09a9e31f3821&#34; alt=&#34;dupprocess&#34;&gt; Duplicate Thread Escalation Method &lt;img src=&#34;https://github.com/g3tsyst3m/elevationstation/assets/19558280/62a2763c-c356-4f77-961b-4d8ecd671b93&#34; alt=&#34;dupthread&#34;&gt; Named Pipes Escalation method &lt;img src=&#34;https://github.com/g3tsyst3m/elevationstation/assets/19558280/3df4c841-6418-42fe-936e-423060fc3351&#34; alt=&#34;namedpipes&#34;&gt; &lt;/b&gt;&lt;/p&gt; &lt;h2&gt;What it does&lt;/h2&gt; &lt;p&gt;ElevationStation is a privilege escalation tool. It works by borrowing from commonly used escalation techniques involving duplication of process and thread tokens, named pipe escalation, and more! The current version supports escalating from local admin to SYSTEM by duplicating the primary token from a SYSTEM process, and duplicating the impersonation thread token from a SYSTEM process. It also incorporates named pipe escalation.&lt;/p&gt; &lt;h2&gt;Why reinvent the wheel with yet another privilege escalation utility?&lt;/h2&gt; &lt;p&gt;This was a combined effort between avoiding AV alerts using Metasploit and furthering my research into privilege escalation methods. In brief: My main goal here was to learn about token management and manipulation, and to effectively bypass AV. I knew there were other tools out there to achieve privilege escalation using token manip but I wanted to learn for myself how it all works.&lt;/p&gt; &lt;h2&gt;So...How does it work?&lt;/h2&gt; &lt;p&gt;Looking through the terribly organized code, you&#39;ll see I used two methods to get SYSTEM so far; stealing a Primary token from a SYSTEM level process, and stealing an Impersonation thread token to convert to a primary token from another SYSTEM level process.&lt;/p&gt; &lt;h2&gt;CreateProcessAsUser versus CreateProcessWithToken&lt;/h2&gt; &lt;p&gt;This was another driving force behind furthering my research. Unless one resorts to using named pipes for escalation, or inject a dll into a system level process, I couldn&#39;t see an easy way to spawn a SYSTEM shell within the same console AND meet token privilege requirements.&lt;/p&gt; &lt;p&gt;&lt;b&gt; Let me explain... &lt;/b&gt;&lt;/p&gt; &lt;p&gt;When using CreateProcessWithToken, it ALWAYS spawns a separate cmd shell. As best that I can tell, this &#34;bug&#34; is unavoidable. It is unfortunate, because CreateProcessWithToken doesn&#39;t demand much as far as token privileges are concerned. Yet, if you want a shell with this Windows API you&#39;re going to have to resort to dealing with a new SYSTEM shell in a separate window&lt;/p&gt; &lt;p&gt;That leads us to CreateProcessAsUser. I knew this would spawn a shell within the current shell, but I needed to find a way to achieve this without resorting to using a windows service to meet the token privilege requirements, namely:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;SE_ASSIGNPRIMARYTOKEN_NAME TEXT(&#34;SeAssignPrimaryTokenPrivilege&#34;)&lt;/li&gt; &#xA;  &lt;li&gt;SE_INCREASE_QUOTA_NAME TEXT(&#34;SeIncreaseQuotaPrivilege&#34;)&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;I found a way around that...stealing tokens from SYSTEM process threads :) We duplicate the thread IMPERSONATION token, set the thread token, and then convert it to primary and then re-run our enable privileges function. This time, the enabling of the two privileges above succeeds and we are presented with a shell within the same console using CreateProcessAsUser. No dll injections, no named pipe impersonations, just token manipulation/duplication.&lt;/p&gt; &lt;h2&gt;What are the &#34;Experimental&#34; features?&lt;/h2&gt; &lt;p&gt;Glad you asked :) There are occasions where the red teamer needs to lower their process integrity levels. This does just that...however, it&#39;s not as I&#39;d like it to be just yet. I probably need to resort to creating a restricted token when lowering the process integrity, say from SYSTEM to HIGH, or HIGH to MEDIUM. If you&#39;re running in an elevated process, it keeps the elevated token but reduces the integrity. So, that&#39;s a current &#34;bug&#34; I&#39;m working through.&lt;/p&gt; &lt;p&gt;Another experimental feature is executing various API functions using SYSTEM impersonation tokens. One could write a file to disk in another user&#39;s folder, create a new user and add them to the administrators group, etc. An example of this where we use the impersonation token to create a file under another user&#39;s directory is included in the code, but I currently have it commented out.&lt;/p&gt; &lt;h2&gt;Progress&lt;/h2&gt; &lt;p&gt;This has come a long way so far...and I&#39;ll keep adding to it and cleaning up the code as time permits me to do so. Thanks for all the support and testing!&lt;/p&gt; &lt;/b&gt;</summary>
  </entry>
  <entry>
    <title>ztxz16/fastllm</title>
    <updated>2023-06-21T01:31:08Z</updated>
    <id>tag:github.com,2023-06-21:/ztxz16/fastllm</id>
    <link href="https://github.com/ztxz16/fastllm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;纯c++的全平台llm加速库，chatglm-6B级模型单卡可达10000+token / s，支持moss, chatglm, baichuan模型，手机端流畅运行&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fastllm&lt;/h1&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;fastllm是纯c++实现，无第三方依赖的大模型库，目前支持国产大模型ChatGLM-6B，MOSS;&lt;/p&gt; &#xA;&lt;p&gt;可以在安卓设备上流畅运行ChatGLM-6B&lt;/p&gt; &#xA;&lt;p&gt;可以在支持CUDA的设备上加速计算&lt;/p&gt; &#xA;&lt;p&gt;部署交流QQ群： 831641348&lt;/p&gt; &#xA;&lt;h2&gt;推理速度&lt;/h2&gt; &#xA;&lt;p&gt;可以使用benchmark程序进行测速，根据不同配置、不同输入，推理速度也会有一些差别&lt;/p&gt; &#xA;&lt;p&gt;例如:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./benchmark -p ~/chatglm-6b-int4.bin -f ../example/benchmark/prompts/beijing.txt -b 1&#xA;./benchmark -p ~/chatglm-6b-int8.bin -f ../example/benchmark/prompts/beijing.txt -b 1&#xA;./benchmark -p ~/chatglm-6b-fp16.bin -f ../example/benchmark/prompts/hello.txt -b 512 -l 18&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;模型&lt;/th&gt; &#xA;   &lt;th&gt;Data精度&lt;/th&gt; &#xA;   &lt;th&gt;平台&lt;/th&gt; &#xA;   &lt;th&gt;Batch&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;最大推理速度(token / s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;ChatGLM-6b-int4&lt;/td&gt; &#xA;   &lt;td&gt;float32&lt;/td&gt; &#xA;   &lt;td&gt;RTX 4090&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;176&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;ChatGLM-6b-int8&lt;/td&gt; &#xA;   &lt;td&gt;float32&lt;/td&gt; &#xA;   &lt;td&gt;RTX 4090&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;121&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;ChatGLM-6b-fp16&lt;/td&gt; &#xA;   &lt;td&gt;float32&lt;/td&gt; &#xA;   &lt;td&gt;RTX 4090&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2919&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;ChatGLM-6b-fp16&lt;/td&gt; &#xA;   &lt;td&gt;float32&lt;/td&gt; &#xA;   &lt;td&gt;RTX 4090&lt;/td&gt; &#xA;   &lt;td&gt;256&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7871&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;ChatGLM-6b-fp16&lt;/td&gt; &#xA;   &lt;td&gt;float32&lt;/td&gt; &#xA;   &lt;td&gt;RTX 4090&lt;/td&gt; &#xA;   &lt;td&gt;512&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10209&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;ChatGLM-6b-int4&lt;/td&gt; &#xA;   &lt;td&gt;float32&lt;/td&gt; &#xA;   &lt;td&gt;Xiaomi 10 Pro - 4 Threads&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4 ~ 5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;编译&lt;/h2&gt; &#xA;&lt;p&gt;fastllm使用c++编写，建议使用cmake编译，需要提前安装c++编译器，make, cmake&lt;/p&gt; &#xA;&lt;p&gt;如果需要使用GPU（目前仅int8模型支持GPU加速），需要提前安装好CUDA编译环境&lt;/p&gt; &#xA;&lt;h3&gt;PC (CPU)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PC (CPU + GPU)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build-cuda&#xA;cd build-cuda&#xA;cmake .. -DUSE_CUDA=ON&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Android上需要下载NDK工具编译&#xA;mkdir build-android&#xA;cd build-android&#xA;export NDK=&amp;lt;your_ndk_directory&amp;gt;&#xA;# 如果手机不支持，那么去掉 &#34;-DCMAKE_CXX_FLAGS=-march=armv8.2a+dotprod&#34; （比较新的手机都是支持的）&#xA;cmake -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-23 -DCMAKE_CXX_FLAGS=-march=armv8.2a+dotprod ..&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;python-binding&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build-py&#xA;cd build-py&#xA;cmake .. -DUSE_CUDA=ON -DPY_API=ON&#xA;make -j4&#xA;python cli.py -p chatglm-6b-int8.bin -t 8  # 与cpp编译的运行结果保持一致&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;编译后会在build目录下生成：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;main: 示例程序&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;quant: 量化程序&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;运行示例程序&lt;/h2&gt; &#xA;&lt;p&gt;./main -h 可以查看具体参数信息，以下是一些简单示例：&lt;/p&gt; &#xA;&lt;h3&gt;运行ChatGLM-6B模型&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./main -m chatglm -p chatglm-6b-int8.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;运行baichuan模型&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./main -m baichuan -p baichuan-int8.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;运行MOSS模型&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./main -m moss -p moss-int8.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;在Android上运行&lt;/h3&gt; &#xA;&lt;p&gt;可以在Android设备上安装termux软件，并在其中执行termux-setup-storage获得读取手机文件的权限。然后将NDK编译出的main文件和模型存入手机，然后在termux中运行main文件（需要把main文件拷贝到termux的根目录下，否则无权限运行）&lt;/p&gt; &#xA;&lt;h3&gt;运行webui&lt;/h3&gt; &#xA;&lt;p&gt;webui 由 &lt;a href=&#34;http://whchen.net/index.php/About.html&#34;&gt;Jacques CHEN&lt;/a&gt; 提供&lt;/p&gt; &#xA;&lt;p&gt;编译出webui后，需要在运行目录中放入example/webui/web文件夹以及模型文件（默认为chatglm-6b-v1.1-int4.bin文件)，然后运行既可部署网页端服务&lt;/p&gt; &#xA;&lt;h2&gt;模型获取&lt;/h2&gt; &#xA;&lt;h3&gt;原始模型&lt;/h3&gt; &#xA;&lt;p&gt;如果使用原生的ChatGLM-6B模型或者MOSS模型，可以在百度网盘中直接获得量化的模型：&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pan.baidu.com/s/1DyGOWqKFbpBSSi93PJe6Ug&#34;&gt;原始模型&lt;/a&gt; 提取码：pk7q&lt;/p&gt; &#xA;&lt;p&gt;如果需要导出自己的模型，可参照如下步骤&lt;/p&gt; &#xA;&lt;h3&gt;ChatGLM模型导出&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 需要先安装ChatGLM-6B环境&#xA;# 如果使用自己finetune的模型需要修改chatglm_export.py文件中创建tokenizer, model的代码&#xA;# 如果使用量化模型，需要先编译好quant文件，这里假设已经存在build/quant文件&#xA;cd tools&#xA;python3 chatglm_export.py ../chatglm-6b.bin # 导出浮点模型&#xA;cd ../build&#xA;./quant -m chatglm -p ../chatglm-6b.bin -o ../chatglm-6b-fp16.bin -b 16 #导出float16模型&#xA;./quant -m chatglm -p ../chatglm-6b.bin -o ../chatglm-6b-int8.bin -b 8 #导出int8模型&#xA;./quant -m chatglm -p ../chatglm-6b.bin -o ../chatglm-6b-int4.bin -b 4 #导出int4模型&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;baichuan模型导出&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 需要先安装baichuan环境&#xA;# 默认使用的是经过sft训练的对话模型，如果使用其余模型需要修改导出文件&#xA;# 如果使用量化模型，需要先编译好quant文件，这里假设已经存在build/quant文件&#xA;cd tools&#xA;python3 baichuan_peft2flm.py ../baichuan.bin # 导出浮点模型&#xA;cd ../build&#xA;./quant -m baichuan -p ../baichuan.bin -o ../baichuan-fp16.bin -b 16 #导出float16模型&#xA;./quant -m baichuan -p ../baichuan.bin -o ../baichuan-int8.bin -b 8 #导出int8模型&#xA;./quant -m baichuan -p ../baichuan.bin -o ../baichuan-int4.bin -b 4 #导出int4模型&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MOSS模型导出&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 需要先安装MOSS环境&#xA;# 如果使用自己finetune的模型需要修改moss_export.py文件中创建tokenizer, model的代码&#xA;# 如果使用量化模型，需要先编译好quant文件，这里假设已经存在build/quant文件&#xA;cd tools&#xA;python3 moss_export.py ../moss.bin # 导出浮点模型&#xA;cd ../build&#xA;./quant -m moss -p ../moss.bin -o ../moss-fp16.bin -b 16 #导出float16模型&#xA;./quant -m moss -p ../moss.bin -o ../moss-int8.bin -b 8 #导出int8模型&#xA;./quant -m moss -p ../moss.bin -o ../moss-int4.bin -b 4 #导出int4模型&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;p&gt;1、opencl支持&lt;/p&gt; &#xA;&lt;p&gt;2、完善Sample功能&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>us3rT0m/OnlyUP-Trainer</title>
    <updated>2023-06-21T01:31:08Z</updated>
    <id>tag:github.com,2023-06-21:/us3rT0m/OnlyUP-Trainer</id>
    <link href="https://github.com/us3rT0m/OnlyUP-Trainer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OnlyUP Trainer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/us3rT0m/OnlyUP-Trainer/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-green.svg?sanitize=true&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/us3rT0m/OnlyUP-Trainer/total.svg?sanitize=true&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is for speedrunners. The principle is simple. You can create checkpoints and teleport there to train on particular passages of your run.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/us3rT0m/OnlyUP-Trainer/main/demo.png&#34; alt=&#34;demo.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create custom checkpoints&lt;/li&gt; &#xA; &lt;li&gt;Create a key for quick saving position&lt;/li&gt; &#xA; &lt;li&gt;Teleport to checkpoints&lt;/li&gt; &#xA; &lt;li&gt;Create a key for fast teleportation&lt;/li&gt; &#xA; &lt;li&gt;Reset dragon position&lt;/li&gt; &#xA; &lt;li&gt;Changing the speed of the dragon&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You must launch the program as an administrator&lt;/li&gt; &#xA; &lt;li&gt;Once in the game, when you can move not the main menu press &#34;Initialise trainer&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.github.com/us3rT0m&#34;&gt;@us3rT0m&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/us3rT0m/OnlyUP-Trainer/main/LICENSE.md&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you have issues, please contact us on &lt;a href=&#34;https://discord.gg/hzJu8VmFnN&#34;&gt;discord&lt;/a&gt; !&lt;/p&gt;</summary>
  </entry>
</feed>