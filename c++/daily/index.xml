<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-18T01:30:53Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NVIDIA/TensorRT</title>
    <updated>2022-08-18T01:30:53Z</updated>
    <id>tag:github.com,2022-08-18:/NVIDIA/TensorRT</id>
    <link href="https://github.com/NVIDIA/TensorRT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TensorRT is a C++ library for high performance inference on NVIDIA GPUs and deep learning accelerators.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.nvidia.com/deeplearning/sdk/tensorrt-developer-guide/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TensorRT-documentation-brightgreen.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;TensorRT Open Source Software&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the Open Source Software (OSS) components of NVIDIA TensorRT. Included are the sources for TensorRT plugins and parsers (Caffe and ONNX), as well as sample applications demonstrating usage and capabilities of the TensorRT platform. These open source software components are a subset of the TensorRT General Availability (GA) release with some extensions and bug-fixes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For code contributions to TensorRT-OSS, please see our &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT/main/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT/main/CODING-GUIDELINES.md&#34;&gt;Coding Guidelines&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For a summary of new additions and updates shipped with TensorRT-OSS releases, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For business inquiries, please contact &lt;a href=&#34;mailto:researchinquiries@nvidia.com&#34;&gt;researchinquiries@nvidia.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For press and other inquiries, please contact Hector Marinez at &lt;a href=&#34;mailto:hmarinez@nvidia.com&#34;&gt;hmarinez@nvidia.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Need enterprise support? NVIDIA global support is available for TensorRT with the &lt;a href=&#34;https://www.nvidia.com/en-us/data-center/products/ai-enterprise/&#34;&gt;NVIDIA AI Enterprise software suite&lt;/a&gt;. Check out &lt;a href=&#34;https://www.nvidia.com/en-us/launchpad/ai/ai-enterprise/&#34;&gt;NVIDIA LaunchPad&lt;/a&gt; for free access to a set of hands-on labs with TensorRT hosted on NVIDIA infrastructure.&lt;/p&gt; &#xA;&lt;h1&gt;Build&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;To build the TensorRT-OSS components, you will first need the following software packages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TensorRT GA build&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/nvidia-tensorrt-download&#34;&gt;TensorRT&lt;/a&gt; v8.4.2.4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;System Packages&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/cuda-toolkit&#34;&gt;CUDA&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Recommended versions:&lt;/li&gt; &#xA;   &lt;li&gt;cuda-11.6.x + cuDNN-8.4&lt;/li&gt; &#xA;   &lt;li&gt;cuda-10.2 + cuDNN-8.4&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ftp.gnu.org/gnu/make/&#34;&gt;GNU make&lt;/a&gt; &amp;gt;= v4.1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kitware/CMake/releases&#34;&gt;cmake&lt;/a&gt; &amp;gt;= v3.13&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;python&lt;/a&gt; &amp;gt;= v3.6.9&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pip/#history&#34;&gt;pip&lt;/a&gt; &amp;gt;= v19.0&lt;/li&gt; &#xA; &lt;li&gt;Essential utilities &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;git&lt;/a&gt;, &lt;a href=&#34;https://www.freedesktop.org/wiki/Software/pkg-config/&#34;&gt;pkg-config&lt;/a&gt;, &lt;a href=&#34;https://www.gnu.org/software/wget/faq.html#download&#34;&gt;wget&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional Packages&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Containerized build&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/install/&#34;&gt;Docker&lt;/a&gt; &amp;gt;= 19.03&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA/nvidia-docker&#34;&gt;NVIDIA Container Toolkit&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Toolchains and SDKs&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Cross compilation for Jetson platform) &lt;a href=&#34;https://developer.nvidia.com/embedded/jetpack&#34;&gt;NVIDIA JetPack&lt;/a&gt; &amp;gt;= 5.0 (current support only for TensorRT 8.4.0)&lt;/li&gt; &#xA;   &lt;li&gt;(For Windows builds) &lt;a href=&#34;https://visualstudio.microsoft.com/vs/older-downloads/&#34;&gt;Visual Studio&lt;/a&gt; 2017 Community or Enterprise edition&lt;/li&gt; &#xA;   &lt;li&gt;(Cross compilation for QNX platform) &lt;a href=&#34;https://blackberry.qnx.com/en&#34;&gt;QNX Toolchain&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PyPI packages (for demo applications/tests)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/onnx/&#34;&gt;onnx&lt;/a&gt; 1.9.0&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/onnxruntime/&#34;&gt;onnxruntime&lt;/a&gt; 1.8.0&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/tensorflow/&#34;&gt;tensorflow-gpu&lt;/a&gt; &amp;gt;= 2.5.1&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/Pillow/&#34;&gt;Pillow&lt;/a&gt; &amp;gt;= 9.0.1&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pycuda/&#34;&gt;pycuda&lt;/a&gt; &amp;lt; 2021.1&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/numpy/&#34;&gt;numpy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pytest/&#34;&gt;pytest&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Code formatting tools (for contributors)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;Clang-format&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/llvm-mirror/clang/raw/master/tools/clang-format/git-clang-format&#34;&gt;Git-clang-format&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: &lt;a href=&#34;https://github.com/onnx/onnx-tensorrt&#34;&gt;onnx-tensorrt&lt;/a&gt;, &lt;a href=&#34;http://nvlabs.github.io/cub/&#34;&gt;cub&lt;/a&gt;, and &lt;a href=&#34;https://github.com/protocolbuffers/protobuf.git&#34;&gt;protobuf&lt;/a&gt; packages are downloaded along with TensorRT OSS, and not required to be installed.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloading TensorRT Build&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;h4&gt;Download TensorRT OSS&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone -b master https://github.com/nvidia/TensorRT TensorRT&#xA;cd TensorRT&#xA;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;(Optional - if not using TensorRT container) Specify the TensorRT GA release build&lt;/h4&gt; &lt;p&gt;If using the TensorRT OSS build container, TensorRT libraries are preinstalled under &lt;code&gt;/usr/lib/x86_64-linux-gnu&lt;/code&gt; and you may skip this step.&lt;/p&gt; &lt;p&gt;Else download and extract the TensorRT GA build from &lt;a href=&#34;https://developer.nvidia.com/nvidia-tensorrt-download&#34;&gt;NVIDIA Developer Zone&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example: Ubuntu 20.04 on x86-64 with cuda-11.6.2&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/Downloads&#xA;tar -xvzf TensorRT-8.4.2.4.Linux.x86_64-gnu.cuda-11.6.cudnn8.4.tar.gz&#xA;export TRT_LIBPATH=`pwd`/TensorRT-8.4.2.4&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Example: Windows on x86-64 with cuda-11.4&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cd ~\Downloads&#xA;Expand-Archive .\TensorRT-8.4.2.4.Windows10.x86_64.cuda-11.6.cudnn8.4.zip&#xA;$Env:TRT_LIBPATH = &#39;$(Get-Location)\TensorRT-8.4.2.4&#39;&#xA;$Env:PATH += &#39;C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\15.0\Bin\&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;(Optional - for Jetson builds only) Download the JetPack SDK&lt;/h4&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Download and launch the JetPack SDK manager. Login with your NVIDIA developer account.&lt;/li&gt; &#xA;   &lt;li&gt;Select the platform and target OS (example: Jetson AGX Xavier, &lt;code&gt;Linux Jetpack 5.0&lt;/code&gt;), and click Continue.&lt;/li&gt; &#xA;   &lt;li&gt;Under &lt;code&gt;Download &amp;amp; Install Options&lt;/code&gt; change the download folder and select &lt;code&gt;Download now, Install later&lt;/code&gt;. Agree to the license terms and click Continue.&lt;/li&gt; &#xA;   &lt;li&gt;Move the extracted files into the &lt;code&gt;&amp;lt;TensorRT-OSS&amp;gt;/docker/jetpack_files&lt;/code&gt; folder.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setting Up The Build Environment&lt;/h2&gt; &#xA;&lt;p&gt;For Linux platforms, we recommend that you generate a docker container for building TensorRT OSS as described below. For native builds, on Windows for example, please install the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT/main/#prerequisites&#34;&gt;prerequisite&lt;/a&gt; &lt;em&gt;System Packages&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;h4&gt;Generate the TensorRT-OSS build container.&lt;/h4&gt; &lt;p&gt;The TensorRT-OSS build container can be generated using the supplied Dockerfiles and build script. The build container is configured for building TensorRT OSS out-of-the-box.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example: Ubuntu 20.04 on x86-64 with cuda-11.6.2 (default)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./docker/build.sh --file docker/ubuntu-20.04.Dockerfile --tag tensorrt-ubuntu20.04-cuda11.6&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Example: CentOS/RedHat 7 on x86-64 with cuda-10.2&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./docker/build.sh --file docker/centos-7.Dockerfile --tag tensorrt-centos7-cuda10.2 --cuda 10.2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Example: Ubuntu 20.04 cross-compile for Jetson (aarch64) with cuda-11.4.2 (JetPack SDK)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./docker/build.sh --file docker/ubuntu-cross-aarch64.Dockerfile --tag tensorrt-jetpack-cuda11.4&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Example: Ubuntu 20.04 on aarch64 with cuda-11.4.2&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./docker/build.sh --file docker/ubuntu-20.04-aarch64.Dockerfile --tag tensorrt-aarch64-ubuntu20.04-cuda11.4&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Launch the TensorRT-OSS build container.&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;Example: Ubuntu 20.04 build container&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./docker/launch.sh --tag tensorrt-ubuntu20.04-cuda11.6 --gpus all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE:&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Use the &lt;code&gt;--tag&lt;/code&gt; corresponding to build container generated in Step 1.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT/main/#prerequisites&#34;&gt;NVIDIA Container Toolkit&lt;/a&gt; is required for GPU access (running TensorRT applications) inside the build container.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sudo&lt;/code&gt; password for Ubuntu build containers is &#39;nvidia&#39;.&lt;/li&gt; &#xA;   &lt;li&gt;Specify port number using &lt;code&gt;--jupyter &amp;lt;port&amp;gt;&lt;/code&gt; for launching Jupyter notebooks.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building TensorRT-OSS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate Makefiles or VS project (Windows) and build.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example: Linux (x86-64) build with default cuda-11.6.2&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; cd $TRT_OSSPATH&#xA; mkdir -p build &amp;amp;&amp;amp; cd build&#xA; cmake .. -DTRT_LIB_DIR=$TRT_LIBPATH -DTRT_OUT_DIR=`pwd`/out&#xA; make -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: On CentOS7, the default g++ version does not support C++14. For native builds (not using the CentOS7 build container), first install devtoolset-8 to obtain the updated g++ toolchain as follows:&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum -y install centos-release-scl&#xA;yum-config-manager --enable rhel-server-rhscl-7-rpms&#xA;yum -y install devtoolset-8&#xA;export PATH=&#34;/opt/rh/devtoolset-8/root/bin:${PATH}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Example: Linux (aarch64) build with default cuda-11.6.2&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; cd $TRT_OSSPATH&#xA; mkdir -p build &amp;amp;&amp;amp; cd build&#xA; cmake .. -DTRT_LIB_DIR=$TRT_LIBPATH -DTRT_OUT_DIR=`pwd`/out -DCMAKE_TOOLCHAIN_FILE=$TRT_OSSPATH/cmake/toolchains/cmake_aarch64-native.toolchain&#xA; make -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Example: Native build on Jetson (aarch64) with cuda-11.4&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd $TRT_OSSPATH&#xA;mkdir -p build &amp;amp;&amp;amp; cd build&#xA;cmake .. -DTRT_LIB_DIR=$TRT_LIBPATH -DTRT_OUT_DIR=`pwd`/out -DTRT_PLATFORM_ID=aarch64 -DCUDA_VERSION=11.4&#xA;CC=/usr/bin/gcc make -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: C compiler must be explicitly specified via &lt;code&gt;CC=&lt;/code&gt; for native &lt;code&gt;aarch64&lt;/code&gt; builds of protobuf.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;Example: Ubuntu 20.04 Cross-Compile for Jetson (aarch64) with cuda-11.4 (JetPack)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; cd $TRT_OSSPATH&#xA; mkdir -p build &amp;amp;&amp;amp; cd build&#xA; cmake .. -DCMAKE_TOOLCHAIN_FILE=$TRT_OSSPATH/cmake/toolchains/cmake_aarch64.toolchain -DCUDA_VERSION=11.4 -DCUDNN_LIB=/pdk_files/cudnn/usr/lib/aarch64-linux-gnu/libcudnn.so -DCUBLAS_LIB=/usr/local/cuda-11.4/targets/aarch64-linux/lib/stubs/libcublas.so -DCUBLASLT_LIB=/usr/local/cuda-11.4/targets/aarch64-linux/lib/stubs/libcublasLt.so&#xA;&#xA; make -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: The latest JetPack SDK v5.0 only supports TensorRT 8.4.0.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;Example: Windows (x86-64) build in Powershell&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt; cd $Env:TRT_OSSPATH&#xA; mkdir -p build ; cd build&#xA; cmake .. -DTRT_LIB_DIR=$Env:TRT_LIBPATH -DTRT_OUT_DIR=&#39;$(Get-Location)\out&#39; -DCMAKE_TOOLCHAIN_FILE=..\cmake\toolchains\cmake_x64_win.toolchain&#xA; msbuild ALL_BUILD.vcxproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE:&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;The default CUDA version used by CMake is 11.6.2. To override this, for example to 10.2, append &lt;code&gt;-DCUDA_VERSION=10.2&lt;/code&gt; to the cmake command.&lt;/li&gt; &#xA;   &lt;li&gt;If samples fail to link on CentOS7, create this symbolic link: &lt;code&gt;ln -s $TRT_OUT_DIR/libnvinfer_plugin.so $TRT_OUT_DIR/libnvinfer_plugin.so.8&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Required CMake build arguments are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;TRT_LIB_DIR&lt;/code&gt;: Path to the TensorRT installation directory containing libraries.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;TRT_OUT_DIR&lt;/code&gt;: Output directory where generated build artifacts will be copied.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional CMake build arguments:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;CMAKE_BUILD_TYPE&lt;/code&gt;: Specify if binaries generated are for release or debug (contain debug symbols). Values consists of [&lt;code&gt;Release&lt;/code&gt;] | &lt;code&gt;Debug&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CUDA_VERISON&lt;/code&gt;: The version of CUDA to target, for example [&lt;code&gt;11.6.2&lt;/code&gt;].&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CUDNN_VERSION&lt;/code&gt;: The version of cuDNN to target, for example [&lt;code&gt;8.4&lt;/code&gt;].&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PROTOBUF_VERSION&lt;/code&gt;: The version of Protobuf to use, for example [&lt;code&gt;3.0.0&lt;/code&gt;]. Note: Changing this will not configure CMake to use a system version of Protobuf, it will configure CMake to download and try building that version.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CMAKE_TOOLCHAIN_FILE&lt;/code&gt;: The path to a toolchain file for cross compilation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BUILD_PARSERS&lt;/code&gt;: Specify if the parsers should be built, for example [&lt;code&gt;ON&lt;/code&gt;] | &lt;code&gt;OFF&lt;/code&gt;. If turned OFF, CMake will try to find precompiled versions of the parser libraries to use in compiling samples. First in &lt;code&gt;${TRT_LIB_DIR}&lt;/code&gt;, then on the system. If the build type is Debug, then it will prefer debug builds of the libraries before release versions if available.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BUILD_PLUGINS&lt;/code&gt;: Specify if the plugins should be built, for example [&lt;code&gt;ON&lt;/code&gt;] | &lt;code&gt;OFF&lt;/code&gt;. If turned OFF, CMake will try to find a precompiled version of the plugin library to use in compiling samples. First in &lt;code&gt;${TRT_LIB_DIR}&lt;/code&gt;, then on the system. If the build type is Debug, then it will prefer debug builds of the libraries before release versions if available.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BUILD_SAMPLES&lt;/code&gt;: Specify if the samples should be built, for example [&lt;code&gt;ON&lt;/code&gt;] | &lt;code&gt;OFF&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;GPU_ARCHS&lt;/code&gt;: GPU (SM) architectures to target. By default we generate CUDA code for all major SMs. Specific SM versions can be specified here as a quoted space-separated list to reduce compilation time and binary size. Table of compute capabilities of NVIDIA GPUs can be found &lt;a href=&#34;https://developer.nvidia.com/cuda-gpus&#34;&gt;here&lt;/a&gt;. Examples: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;NVidia A100: &lt;code&gt;-DGPU_ARCHS=&#34;80&#34;&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Tesla T4, GeForce RTX 2080: &lt;code&gt;-DGPU_ARCHS=&#34;75&#34;&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Titan V, Tesla V100: &lt;code&gt;-DGPU_ARCHS=&#34;70&#34;&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Multiple SMs: &lt;code&gt;-DGPU_ARCHS=&#34;80 75&#34;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;TRT_PLATFORM_ID&lt;/code&gt;: Bare-metal build (unlike containerized cross-compilation) on non Linux/x86 platforms must explicitly specify the target platform. Currently supported options: &lt;code&gt;x86_64&lt;/code&gt; (default), &lt;code&gt;aarch64&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;h2&gt;TensorRT Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/tensorrt&#34;&gt;TensorRT Developer Home&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/deeplearning/tensorrt/quick-start-guide/index.html&#34;&gt;TensorRT QuickStart Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html&#34;&gt;TensorRT Developer Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/deeplearning/tensorrt/sample-support-guide/index.html&#34;&gt;TensorRT Sample Support Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/deeplearning/tensorrt/index.html#tools&#34;&gt;TensorRT ONNX Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devtalk.nvidia.com/default/board/304/tensorrt/&#34;&gt;TensorRT Discussion Forums&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/deeplearning/tensorrt/release-notes/index.html&#34;&gt;TensorRT Release Notes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please refer to &lt;a href=&#34;https://docs.nvidia.com/deeplearning/tensorrt/release-notes/tensorrt-8.html#tensorrt-8&#34;&gt;TensorRT 8.4 Release Notes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Rubberduckycooly/RSDKv5-Decompilation</title>
    <updated>2022-08-18T01:30:53Z</updated>
    <id>tag:github.com,2022-08-18:/Rubberduckycooly/RSDKv5-Decompilation</id>
    <link href="https://github.com/Rubberduckycooly/RSDKv5-Decompilation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A complete decompilation of Retro Engine (v5)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/29069561/183143615-d7f77921-13cf-4c58-8c5f-6a1e76ea20e2.svg?sanitize=true&#34; alt=&#34;header&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A complete decompilation of Retro Engine v5 and v5Ultimate.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;strong&gt;SUPPORT THE DEVELOPERS OF THE RETRO ENGINE&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;p&gt;We do not own the Retro Engine in any way, shape or form, and this project would not have been possible had they not developed RSDKv5(U) in the first place. Retro Engine is currently owned by &lt;a href=&#34;https://eveningstar.studio/&#34;&gt;Evening Star&lt;/a&gt;; we highly urge you to follow &amp;amp; support their projects if you enjoyed this project of ours!&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;DO NOT USE THIS DECOMPILATION PROJECT AS A MEANS TO PIRATE SONIC MANIA OR ANY OTHER RSDKv5(U) GAMES.&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;We do not condone using this project as a means for piracy in any form. This project was made with love and care for the source material and was created for purely educational purposes.&lt;/p&gt; &#xA;&lt;h1&gt;Additional Tweaks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added a built-in mod loader and API allowing to easily create and play mods with features such as save file redirection and XML asset loading, supported by all sub-versions of v5U.&lt;/li&gt; &#xA; &lt;li&gt;Added a built-in shader compiler for backends/platforms that support it.&lt;/li&gt; &#xA; &lt;li&gt;Added various other backends to windows aside from the usual DirectX 9 backends&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to Build&lt;/h1&gt; &#xA;&lt;p&gt;First, follow the steps in &lt;a href=&#34;https://raw.githubusercontent.com/Rubberduckycooly/RSDKv5-Decompilation/master/dependencies/all/README.md&#34;&gt;the common dependency README&lt;/a&gt;, then follow the steps for your platform of choice:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Rubberduckycooly/RSDKv5-Decompilation/master/dependencies/windows/README.md&#34;&gt;Windows&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Rubberduckycooly/RSDKv5-Decompilation/master/dependencies/mac/README.md&#34;&gt;Mac&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h2&gt;Linux/Switch&lt;/h2&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Follow the &lt;a href=&#34;https://raw.githubusercontent.com/Rubberduckycooly/RSDKv5-Decompilation/master/dependencies/gl3/README.md&#34;&gt;GL3 README&lt;/a&gt; to setup the renderer&#39;s dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;For Linux, SDL for audio&lt;/strong&gt; (or if you use the SDL2 backend) &lt;strong&gt;will be required:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;On Ubuntu: &lt;code&gt;sudo apt install libsdl2-dev&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;On Fedora: &lt;code&gt;sudo dnf install SDL2-devel&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;On Arch: &lt;code&gt;sudo pacman -S sdl2&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Then, for both platforms, the makefile can be used by running &lt;code&gt;make&lt;/code&gt;. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;For Switch, pass &lt;code&gt;PLATFORM=Switch&lt;/code&gt; to the &lt;code&gt;make&lt;/code&gt; command to ensure you&#39;re building for Switch.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Rubberduckycooly/RSDKv5-Decompilation/master/dependencies/android/README.md&#34;&gt;Android&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other Platforms&lt;/h3&gt; &#xA;&lt;p&gt;Currently, the only officially supported platforms are the ones listed above. However, the backend is very modular, so the codebase is very multiplatform.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h3&gt;Q: The screen is tearing, how do I fix it?&lt;/h3&gt; &#xA;&lt;p&gt;A: Try turning on VSync in settings.ini.&lt;/p&gt; &#xA;&lt;h3&gt;Q: I found a bug/I have a feature request!&lt;/h3&gt; &#xA;&lt;p&gt;A: Submit an issue in the issues tab and we &lt;em&gt;might&lt;/em&gt; fix it in the main branch. Don&#39;t expect any major future releases, however.&lt;/p&gt; &#xA;&lt;h3&gt;Q: Is there a decompilation for RSDKv3 and/or RSDKv4 alone?&lt;/h3&gt; &#xA;&lt;p&gt;A: There is! You can find RSDKv3 &lt;a href=&#34;https://github.com/Rubberduckycooly/Sonic-CD-11-Decompilation&#34;&gt;here&lt;/a&gt; and RSDKv4 &lt;a href=&#34;https://github.com/Rubberduckycooly/Sonic-1-2-2013-Decompilation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Q: Will there be a decompilation for any other RSDK versions?&lt;/h3&gt; &#xA;&lt;p&gt;A: No. This is the last decompilation from us. This project took about 1 and a half years to do, and with it completed, we&#39;re ready to move onto other endeavours rather than continue decompiling programs forever.&lt;/p&gt; &#xA;&lt;h3&gt;Q: Are there anymore decompilation projects in the works?&lt;/h3&gt; &#xA;&lt;p&gt;A: Absolutely not. Between the last two and this one, we&#39;re done with decompiling, at least for the time being. Please do not expect any more decompilations from us, Sonic or otherwise!&lt;/p&gt; &#xA;&lt;h1&gt;Special Thanks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MGRich&#34;&gt;Chuli&lt;/a&gt; for leading ModAPI development, porting to other platforms, general decompilation assistance, helping me fix bugs, tweaking up my sometimes sloppy code and generally being really helpful and fun to work with on this project&lt;/li&gt; &#xA; &lt;li&gt;The Weigman for creating the asset bases such as the header and icons (originally made for RSDKv3 and v4, modified by Chuli)&lt;/li&gt; &#xA; &lt;li&gt;Everyone in the &lt;a href=&#34;https://dc.railgun.works/retroengine&#34;&gt;Retro Engine Modding Server&lt;/a&gt; for being supportive of me and for giving me a place to show off these things that I&#39;ve found&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contact:&lt;/h1&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://dc.railgun.works/retroengine&#34;&gt;Retro Engine Modding Discord Server&lt;/a&gt; for any extra questions you may need to know about the decompilation or modding it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nba-emu/NanoBoyAdvance</title>
    <updated>2022-08-18T01:30:53Z</updated>
    <id>tag:github.com,2022-08-18:/nba-emu/NanoBoyAdvance</id>
    <link href="https://github.com/nba-emu/NanoBoyAdvance" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A highly accurate Nintendo Game Boy Advance emulator.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;NanoBoyAdvance&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/nba-emu/NanoBoyAdvance&#34; alt=&#34;license&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/nba-emu/NanoBoyAdvance/Build/master&#34; alt=&#34;build&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;NanoBoyAdvance is a highly accurate Game Boy Advance emulator.&lt;br&gt; It aims for cycle-accurate emulation when possible, while also offering enhancements such as improved audio quality.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nba-emu/NanoBoyAdvance/master/docs/screenshot.png&#34; alt=&#34;screenshot1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very high compatibility and accuracy (see &lt;a href=&#34;https://raw.githubusercontent.com/nba-emu/NanoBoyAdvance/master/#accuracy&#34;&gt;Accuracy&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;HQ audio mixer (for games which use Nintendo&#39;s MusicPlayer2000 sound engine)&lt;/li&gt; &#xA; &lt;li&gt;Post-processing options (color correction, xBRZ upscaling and LCD ghosting simulation)&lt;/li&gt; &#xA; &lt;li&gt;Save State support (10x save slots available)&lt;/li&gt; &#xA; &lt;li&gt;Game controller support (buttons and axises can be remapped)&lt;/li&gt; &#xA; &lt;li&gt;Loading ROMs from archives (Zip, 7z, Tar and limited RAR[^1] support)&lt;/li&gt; &#xA; &lt;li&gt;RTC emulation&lt;/li&gt; &#xA; &lt;li&gt;Solar Sensor emulation (for example: for Boktai - The Sun is in Your Hand)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[^1]: RAR 5.0 is currently not supported.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;Download a recent &lt;a href=&#34;https://nightly.link/nba-emu/NanoBoyAdvance/workflows/build/master&#34;&gt;development build&lt;/a&gt; or the last &lt;a href=&#34;https://github.com/nba-emu/NanoBoyAdvance/releases&#34;&gt;stable release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Upon loading a ROM for the first time you will be prompted to assign the Game Boy Advance BIOS file.&lt;br&gt; You can &lt;a href=&#34;https://github.com/mgba-emu/bios-dump/tree/master/src&#34;&gt;dump&lt;/a&gt; it from a real console (accurate) or use an &lt;a href=&#34;https://github.com/Nebuleon/ReGBA/raw/master/bios/gba_bios.bin&#34;&gt;unofficial BIOS&lt;/a&gt; (less accurate).&lt;/p&gt; &#xA;&lt;h2&gt;Accuracy&lt;/h2&gt; &#xA;&lt;p&gt;A lot of attention to detail has been put into developing this core and making it accurate. Its CPU and timing emulation is more accurate than other software emulators right now.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cycle-accurate emulation of the CPU, DMA, timers and Game Pak prefetch buffer&lt;/li&gt; &#xA; &lt;li&gt;Passes all AGS aging cartridge tests (NBA was the first public emulator to achieve this)&lt;/li&gt; &#xA; &lt;li&gt;Passes most tests in the &lt;a href=&#34;https://github.com/mgba-emu/suite&#34;&gt;mGBA test suite&lt;/a&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/nba-emu/NanoBoyAdvance/master/docs/ACCURACY.md#mGBA-suite-comparison&#34;&gt;mGBA suite comparison&lt;/a&gt; for more details)&lt;/li&gt; &#xA; &lt;li&gt;Passes &lt;a href=&#34;https://github.com/destoer/armwrestler-gba-fixed&#34;&gt;ARMWrestler&lt;/a&gt;, &lt;a href=&#34;https://github.com/jsmolka/gba-tests&#34;&gt;gba-suite&lt;/a&gt; and &lt;a href=&#34;https://github.com/DenSinH/FuzzARM&#34;&gt;FuzzARM&lt;/a&gt; CPU tests&lt;/li&gt; &#xA; &lt;li&gt;High compatibility, including games that require emulation of peculiar hardware edge-cases (see &lt;a href=&#34;https://raw.githubusercontent.com/nba-emu/NanoBoyAdvance/master/docs/ACCURACY.md#Game-compatibility&#34;&gt;Game compatibility&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cycle-accurate PPU emulation is an active topic of research and will be implemented, once the timing has been understood and documented well enough.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nba-emu/NanoBoyAdvance/master/docs/COMPILING.md&#34;&gt;COMPILING.md&lt;/a&gt; in the &lt;code&gt;docs&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Martin Korth: for &lt;a href=&#34;http://problemkaputt.de/gbatek.htm&#34;&gt;GBATEK&lt;/a&gt;, a good piece of hardware documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/endrift&#34;&gt;endrift&lt;/a&gt;: for prior &lt;a href=&#34;http://mgba.io/tag/emulation/&#34;&gt;research&lt;/a&gt; and &lt;a href=&#34;https://github.com/mgba-emu/suite&#34;&gt;hardware tests&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/destoer&#34;&gt;destoer&lt;/a&gt;: for contributing research, tests and insightful discussions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LadyStarbreeze&#34;&gt;LadyStarbreeze&lt;/a&gt;: for contributing research, tests and insightful discussions.&lt;/li&gt; &#xA; &lt;li&gt;Pokefan531 and hunterk: for the default GBA color correction algorithm&lt;/li&gt; &#xA; &lt;li&gt;Talarubi and Near: for &lt;a href=&#34;https://near.sh/articles/video/color-emulation&#34;&gt;higan&#39;s GBA color correction algorithm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DeSmuME team and Hyllian: xBRZ upscaling code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;NanoBoyAdvance is Copyright © 2015 - 2022 fleroviux.&lt;br&gt; It is licensed under the terms of the GNU General Public License (GPL) 3.0 or any later version. See &lt;a href=&#34;https://raw.githubusercontent.com/nba-emu/NanoBoyAdvance/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Game Boy Advance is a registered trademark of Nintendo Co., Ltd.&lt;/p&gt;</summary>
  </entry>
</feed>