<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-25T01:30:32Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CLIUtils/CLI11</title>
    <updated>2022-11-25T01:30:32Z</updated>
    <id>tag:github.com,2022-11-25:/CLIUtils/CLI11</id>
    <link href="https://github.com/CLIUtils/CLI11" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CLI11 is a command line parser for C++11 and beyond that provides a rich feature set with a simple and intuitive interface.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CLI11: Command line parser for C++11&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/docs/CLI11_300.png&#34; alt=&#34;CLI11 Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/CLIUtils/CLI11&#34;&gt;&lt;img src=&#34;https://dev.azure.com/CLIUtils/CLI11/_apis/build/status/CLIUtils.CLI11?branchName=main&#34; alt=&#34;Build Status Azure&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/actions&#34;&gt;&lt;img src=&#34;https://github.com/CLIUtils/CLI11/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/HenrySchreiner/cli11&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/82niaxpaa28dwbms/branch/main?svg=true&#34; alt=&#34;Build Status AppVeyor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/CLIUtils/CLI11&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/CLIUtils/CLI11/branch/main/graph/badge.svg?token=2O4wfs8NJO&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/gh/CLIUtils/CLI11/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=CLIUtils/CLI11&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/2796b969c1b54321a02ad08affec0800&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BSD-blue.svg?sanitize=true&#34; alt=&#34;License: BSD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://zenodo.org/badge/latestdoi/80064252&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/80064252.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/CLI11gitter/Lobby&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/CLI11gitter/Lobby.svg?sanitize=true&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/CLIUtils/CLI11.svg?sanitize=true&#34; alt=&#34;Latest GHA release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/cli11/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/latest-versions/cli11.svg?sanitize=true&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://conan.io/center/cli11&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/conan-io-blue&#34; alt=&#34;Conan.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/conda-forge/cli11-feedstock&#34;&gt;&lt;img src=&#34;https://img.shields.io/conda/vn/conda-forge/cli11.svg?sanitize=true&#34; alt=&#34;Conda Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://wandbox.org/permlink/CA5bymNHh0AczdeN&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/try_2.1-online-blue.svg?sanitize=true&#34; alt=&#34;Try CLI11 2.1 online&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/CHANGELOG.md&#34;&gt;What&#39;s new&lt;/a&gt; • &lt;a href=&#34;https://cliutils.github.io/CLI11/book/&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://CLIUtils.github.io/CLI11/index.html&#34;&gt;API Reference&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CLI11 is a command line parser for C++11 and beyond that provides a rich feature set with a simple and intuitive interface.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#background&#34;&gt;Background&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#why-write-another-cli-parser&#34;&gt;Why write another CLI parser?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#other-parsers&#34;&gt;Other parsers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#features-not-supported-by-this-library&#34;&gt;Features not supported by this library&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#adding-options&#34;&gt;Adding options&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#option-types&#34;&gt;Option types&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#option-options&#34;&gt;Option options&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#validators&#34;&gt;Validators&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#transforming-validators&#34;&gt;Transforming Validators&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#validator-operations&#34;&gt;Validator operations&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#custom-validators&#34;&gt;Custom Validators&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#querying-validators&#34;&gt;Querying Validators&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#getting-results&#34;&gt;Getting Results&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#subcommands&#34;&gt;Subcommands&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#subcommand-options&#34;&gt;Subcommand options&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#option-groups&#34;&gt;Option groups&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#callbacks&#34;&gt;Callbacks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#configuration-file&#34;&gt;Configuration file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#inheriting-defaults&#34;&gt;Inheriting defaults&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#formatting&#34;&gt;Formatting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#subclassing&#34;&gt;Subclassing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#how-it-works&#34;&gt;How it works&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#utilities&#34;&gt;Utilities&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#other-libraries&#34;&gt;Other libraries&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#Examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Features that were added in the last released minor version are marked with &#34;🆕&#34;. Features only available in main are marked with &#34;🚧&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;CLI11 provides all the features you expect in a powerful command line parser, with a beautiful, minimal syntax and no dependencies beyond C++11. It is header only, and comes in a single file form for easy inclusion in projects. It is easy to use for small projects, but powerful enough for complex command line projects, and can be customized for frameworks. It is tested on &lt;a href=&#34;https://dev.azure.com/CLIUtils/CLI11&#34;&gt;Azure&lt;/a&gt; and &lt;a href=&#34;https://github.com/CLIUtils/CLI11/actions&#34;&gt;GitHub Actions&lt;/a&gt;, and was originally used by the &lt;a href=&#34;https://GooFit.github.io&#34;&gt;GooFit GPU fitting framework&lt;/a&gt;. It was inspired by &lt;a href=&#34;https://plumbum.readthedocs.io/en/latest/&#34;&gt;&lt;code&gt;plumbum.cli&lt;/code&gt;&lt;/a&gt; for Python. CLI11 has a user friendly introduction in this README, a more in-depth tutorial &lt;a href=&#34;https://cliutils.github.io/CLI11/book/&#34;&gt;GitBook&lt;/a&gt;, as well as &lt;a href=&#34;https://CLIUtils.github.io/CLI11/index.html&#34;&gt;API documentation&lt;/a&gt; generated by Travis. See the &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt; or &lt;a href=&#34;https://github.com/CLIUtils/CLI11/releases&#34;&gt;GitHub Releases&lt;/a&gt; for details for current and past releases. Also see the &lt;a href=&#34;https://iscinumpy.gitlab.io/post/announcing-cli11-10/&#34;&gt;Version 1.0 post&lt;/a&gt;, &lt;a href=&#34;https://iscinumpy.gitlab.io/post/announcing-cli11-13/&#34;&gt;Version 1.3 post&lt;/a&gt;, &lt;a href=&#34;https://iscinumpy.gitlab.io/post/announcing-cli11-16/&#34;&gt;Version 1.6 post&lt;/a&gt;, or &lt;a href=&#34;https://iscinumpy.gitlab.io/post/announcing-cli11-20/&#34;&gt;Version 2.0 post&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;You can be notified when new releases are made by subscribing to &lt;a href=&#34;https://github.com/CLIUtils/CLI11/releases.atom&#34;&gt;https://github.com/CLIUtils/CLI11/releases.atom&lt;/a&gt; on an RSS reader, like Feedly, or use the releases mode of the GitHub watching tool.&lt;/p&gt; &#xA;&lt;h3&gt;Why write another CLI parser?&lt;/h3&gt; &#xA;&lt;p&gt;An acceptable CLI parser library should be all of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to include (i.e., header only, one file if possible, &lt;strong&gt;no external requirements&lt;/strong&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Short, simple syntax: This is one of the main reasons to use a CLI parser, it should make variables from the command line nearly as easy to define as any other variables. If most of your program is hidden in CLI parsing, this is a problem for readability.&lt;/li&gt; &#xA; &lt;li&gt;C++11 or better: Should work with GCC 4.8+ (default on CentOS/RHEL 7), Clang 3.4+, AppleClang 7+, NVCC 7.0+, or MSVC 2015+.&lt;/li&gt; &#xA; &lt;li&gt;Work on Linux, macOS, and Windows.&lt;/li&gt; &#xA; &lt;li&gt;Well tested on all common platforms and compilers. &#34;Well&#34; is defined as having good coverage measured by &lt;a href=&#34;https://codecov.io/gh/CLIUtils/CLI11&#34;&gt;CodeCov&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clear help printing.&lt;/li&gt; &#xA; &lt;li&gt;Nice error messages.&lt;/li&gt; &#xA; &lt;li&gt;Standard shell idioms supported naturally, like grouping flags, a positional separator, etc.&lt;/li&gt; &#xA; &lt;li&gt;Easy to execute, with help, parse errors, etc. providing correct exit and details.&lt;/li&gt; &#xA; &lt;li&gt;Easy to extend as part of a framework that provides &#34;applications&#34; to users.&lt;/li&gt; &#xA; &lt;li&gt;Usable subcommand syntax, with support for multiple subcommands, nested subcommands, option groups, and optional fallthrough (explained later).&lt;/li&gt; &#xA; &lt;li&gt;Ability to add a configuration file (&lt;code&gt;TOML&lt;/code&gt;, &lt;code&gt;INI&lt;/code&gt;, or custom format), and produce it as well.&lt;/li&gt; &#xA; &lt;li&gt;Produce real values that can be used directly in code, not something you have pay compute time to look up, for HPC applications.&lt;/li&gt; &#xA; &lt;li&gt;Work with common types, simple custom types, and extensible to exotic types.&lt;/li&gt; &#xA; &lt;li&gt;Permissively licensed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other parsers&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;The major CLI parsers for C++ include, with my biased opinions: (click to expand)&lt;/summary&gt;&#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Library&lt;/th&gt; &#xA;    &lt;th&gt;My biased opinion&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_63_0/doc/html/program_options.html&#34;&gt;Boost Program Options&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;A great library if you already depend on Boost, but its pre-C++11 syntax is really odd and setting up the correct call in the main function is poorly documented (and is nearly a page of code). A simple wrapper for the Boost library was originally developed, but was discarded as CLI11 became more powerful. The idea of capturing a value and setting it originated with Boost PO. &lt;a href=&#34;https://iscinumpy.gitlab.io/post/comparing-cli11-and-boostpo/&#34;&gt;See this comparison.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;http://optionparser.sourceforge.net&#34;&gt;The Lean Mean C++ Option Parser&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;One header file is great, but the syntax is atrocious, in my opinion. It was quite impractical to wrap the syntax or to use in a complex project. It seems to handle standard parsing quite well.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;http://tclap.sourceforge.net&#34;&gt;TCLAP&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The not-quite-standard command line parsing causes common shortcuts to fail. It also seems to be poorly supported, with only minimal bugfixes accepted. Header only, but in quite a few files. Has not managed to get enough support to move to GitHub yet. No subcommands. Produces wrapped values.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/jarro2783/cxxopts&#34;&gt;Cxxopts&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;C++11, single file, and nice CMake support, but requires regex, therefore GCC 4.8 (CentOS 7 default) does not work. Syntax closely based on Boost PO, so not ideal but familiar.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/docopt/docopt.cpp&#34;&gt;DocOpt&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Completely different approach to program options in C++11, you write the docs and the interface is generated. Too fragile and specialized.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;After I wrote this, I also found the following libraries:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Library&lt;/th&gt; &#xA;    &lt;th&gt;My biased opinion&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://gflags.github.io/gflags&#34;&gt;GFlags&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The Google Commandline Flags library. Uses macros heavily, and is limited in scope, missing things like subcommands. It provides a simple syntax and supports config files/env vars.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://www.gnu.org/software/libc/manual/html_node/Getopt.html&#34;&gt;GetOpt&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Very limited C solution with long, convoluted syntax. Does not support much of anything, like help generation. Always available on UNIX, though (but in different flavors).&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Fytch/ProgramOptions.hxx&#34;&gt;ProgramOptions.hxx&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Interesting library, less powerful and no subcommands. Nice callback system.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Taywee/args&#34;&gt;Args&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Also interesting, and supports subcommands. I like the optional-like design, but CLI11 is cleaner and provides direct value access, and is less verbose.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/vietjtnguyen/argagg&#34;&gt;Argument Aggregator&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;I&#39;m a big fan of the &lt;a href=&#34;https://github.com/fmtlib/fmt&#34;&gt;fmt&lt;/a&gt; library, and the try-catch statement looks familiar. &lt;span&gt;👍&lt;/span&gt; Doesn&#39;t seem to support subcommands.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/philsquared/Clara&#34;&gt;Clara&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Simple library built for the excellent &lt;a href=&#34;https://github.com/philsquared/Catch&#34;&gt;Catch&lt;/a&gt; testing framework. Unique syntax, limited scope.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/adishavit/argh&#34;&gt;Argh!&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Very minimalistic C++11 parser, single header. Don&#39;t have many features. No help generation?!?! At least it&#39;s exception-free.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://codesynthesis.com/projects/cli/&#34;&gt;CLI&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Custom language and parser. Huge build-system overkill for very little benefit. Last release in 2009, but still occasionally active.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/p-ranav/argparse&#34;&gt;argparse&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;C++17 single file argument parser. Design seems similar to CLI11 in some ways. The author has several other interesting projects.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/bfgroup/Lyra&#34;&gt;lyra&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;a simple header only parser with composable options. Might work well for simple standardized parsing&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://github.com/fffaraz/awesome-cpp/raw/master/README.md#cli&#34;&gt;Awesome C++&lt;/a&gt; for a less-biased list of parsers. You can also find other single file libraries at &lt;a href=&#34;https://github.com/nothings/single_file_libs/raw/master/README.md&#34;&gt;Single file libs&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt;&#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;None of these libraries fulfill all the above requirements, or really even come close. As you probably have already guessed, CLI11 does. So, this library was designed to provide a great syntax, good compiler compatibility, and minimal installation fuss.&lt;/p&gt; &#xA;&lt;h3&gt;Features not supported by this library&lt;/h3&gt; &#xA;&lt;p&gt;There are some other possible &#34;features&#34; that are intentionally not supported by this library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Non-standard variations on syntax, like &lt;code&gt;-long&lt;/code&gt; options. This is non-standard and should be avoided, so that is enforced by this library.&lt;/li&gt; &#xA; &lt;li&gt;Completion of partial options, such as Python&#39;s &lt;code&gt;argparse&lt;/code&gt; supplies for incomplete arguments. It&#39;s better not to guess. Most third party command line parsers for python actually reimplement command line parsing rather than using argparse because of this perceived design flaw (recent versions do have an option to disable it).&lt;/li&gt; &#xA; &lt;li&gt;Autocomplete: This might eventually be added to both Plumbum and CLI11, but it is not supported yet.&lt;/li&gt; &#xA; &lt;li&gt;Wide strings / unicode: Since this uses the standard library only, it might be hard to properly implement, but I would be open to suggestions in how to do this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;To use, there are several methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All-in-one local header: Copy &lt;code&gt;CLI11.hpp&lt;/code&gt; from the &lt;a href=&#34;https://github.com/CLIUtils/CLI11/releases&#34;&gt;most recent release&lt;/a&gt; into your include directory, and you are set. This is combined from the source files for every release. This includes the entire command parser library, but does not include separate utilities (like &lt;code&gt;Timer&lt;/code&gt;, &lt;code&gt;AutoTimer&lt;/code&gt;). The utilities are completely self contained and can be copied separately.&lt;/li&gt; &#xA; &lt;li&gt;All-in-one global header: Like above, but copying the file to a shared folder location like &lt;code&gt;/opt/CLI11&lt;/code&gt;. Then, the C++ include path has to be extended to point at this folder. With CMake, use &lt;code&gt;include_directories(/opt/CLI11)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Local headers and target: Use &lt;code&gt;CLI/*.hpp&lt;/code&gt; files. You could check out the repository as a git submodule, for example. With CMake, you can use &lt;code&gt;add_subdirectory&lt;/code&gt; and the &lt;code&gt;CLI11::CLI11&lt;/code&gt; interface target when linking. If not using a submodule, you must ensure that the copied files are located inside the same tree directory than your current project, to prevent an error with CMake and &lt;code&gt;add_subdirectory&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Global headers: Use &lt;code&gt;CLI/*.hpp&lt;/code&gt; files stored in a shared folder. You could check out the git repository to a system-wide folder, for example &lt;code&gt;/opt/&lt;/code&gt;. With CMake, you could add to the include path via:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if(NOT DEFINED CLI11_DIR)&#xA;set (CLI11_DIR &#34;/opt/CLI11&#34; CACHE STRING &#34;CLI11 git repository&#34;)&#xA;endif()&#xA;include_directories(${CLI11_DIR}/include)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then in the source code (adding several headers might be needed to prevent linker errors):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &#34;CLI/App.hpp&#34;&#xA;#include &#34;CLI/Formatter.hpp&#34;&#xA;#include &#34;CLI/Config.hpp&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Global headers and target: configuring and installing the project is required for linking CLI11 to your project in the same way as you would do with any other external library. With CMake, this step allows using &lt;code&gt;find_package(CLI11 CONFIG REQUIRED)&lt;/code&gt; and then using the &lt;code&gt;CLI11::CLI11&lt;/code&gt; target when linking. If &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; was changed during install to a specific folder like &lt;code&gt;/opt/CLI11&lt;/code&gt;, then you have to pass &lt;code&gt;-DCLI11_DIR=/opt/CLI11&lt;/code&gt; when building your current project. You can also use &lt;a href=&#34;https://conan.io/center/cli11&#34;&gt;Conan.io&lt;/a&gt; or &lt;a href=&#34;https://docs.hunter.sh/en/latest/packages/pkg/CLI11.html&#34;&gt;Hunter&lt;/a&gt;. (These are just conveniences to allow you to use your favorite method of managing packages; it&#39;s just header only so including the correct path and using C++11 is all you really need.)&lt;/li&gt; &#xA; &lt;li&gt;Via FetchContent in CMake 3.14+ (or 3.11+ with more work): you can add this with fetch-content, then use the &lt;code&gt;CLI11::CLI11&lt;/code&gt; target as above, and CMake will download the project in the configure stage:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;include(FetchContent)&#xA;FetchContent_Declare(&#xA;  cli11&#xA;  GIT_REPOSITORY https://github.com/CLIUtils/CLI11&#xA;  GIT_TAG        v2.2.0&#xA;)&#xA;&#xA;FetchContent_MakeAvailable(cli11)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is highly recommended that you use the git hash for &lt;code&gt;GIT_TAG&lt;/code&gt; instead of a tag or branch, as that will both be more secure, as well as faster to reconfigure - CMake will not have to reach out to the internet to see if the tag moved. You can also download just the single header file from the releases using &lt;code&gt;file(DOWNLOAD&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build the tests, checkout the repository and use CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -S . -B build&#xA;cmake --build build&#xA;CTEST_OUTPUT_ON_FAILURE=1 cmake --build build -t test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Note: Special instructions for GCC 8&lt;/summary&gt;&#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;If you are using GCC 8 and using it in C++17 mode with CLI11. CLI11 makes use of the &lt;code&gt;&amp;lt;filesystem&amp;gt;&lt;/code&gt; header if available, but specifically for this compiler, the &lt;code&gt;filesystem&lt;/code&gt; library is separate from the standard library and needs to be linked separately. So it is available but CLI11 doesn&#39;t use it by default.&lt;/p&gt; &#xA; &lt;p&gt;Specifically &lt;code&gt;libstdc++fs&lt;/code&gt; needs to be added to the linking list and &lt;code&gt;CLI11_HAS_FILESYSTEM=1&lt;/code&gt; has to be defined. Then the filesystem variant of the Validators could be used on GCC 8. GCC 9+ does not have this issue so the &lt;code&gt;&amp;lt;filesystem&amp;gt;&lt;/code&gt; is used by default.&lt;/p&gt; &#xA; &lt;p&gt;There may also be other cases where a specific library needs to be linked.&lt;/p&gt; &#xA; &lt;p&gt;Defining &lt;code&gt;CLI11_HAS_FILESYSTEM=0&lt;/code&gt; which will remove the usage and hence any linking issue.&lt;/p&gt; &#xA; &lt;p&gt;In some cases certain clang compilations may require linking against &lt;code&gt;libc++fs&lt;/code&gt;. These situations have not been encountered so the specific situations requiring them are unknown yet.&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt;&#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Adding options&lt;/h3&gt; &#xA;&lt;p&gt;To set up, add options, and run, your main function will look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int main(int argc, char** argv) {&#xA;    CLI::App app{&#34;App description&#34;};&#xA;&#xA;    std::string filename = &#34;default&#34;;&#xA;    app.add_option(&#34;-f,--file&#34;, filename, &#34;A help string&#34;);&#xA;&#xA;    CLI11_PARSE(app, argc, argv);&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Note: If you don&#39;t like macros, this is what that macro expands to: (click to expand)&lt;/summary&gt;&#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;try {&#xA;    app.parse(argc, argv);&#xA;} catch (const CLI::ParseError &amp;amp;e) {&#xA;    return app.exit(e);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The try/catch block ensures that &lt;code&gt;-h,--help&lt;/code&gt; or a parse error will exit with the correct return code (selected from &lt;code&gt;CLI::ExitCodes&lt;/code&gt;). (The return here should be inside &lt;code&gt;main&lt;/code&gt;). You should not assume that the option values have been set inside the catch block; for example, help flags intentionally short-circuit all other processing for speed and to ensure required options and the like do not interfere.&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt;&#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;The initialization is just one line, adding options is just two each. The parse macro is just one line (or 5 for the contents of the macro). After the app runs, the filename will be set to the correct value if it was passed, otherwise it will be set to the default. You can check to see if this was passed on the command line with &lt;code&gt;app.count(&#34;--file&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Option types&lt;/h4&gt; &#xA;&lt;p&gt;While all options internally are the same type, there are several ways to add an option depending on what you need. The supported values are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// Add options&#xA;app.add_option(option_name, help_str=&#34;&#34;)&#xA;&#xA;app.add_option(option_name,&#xA;               variable_to_bind_to, // bool, char(see note), int, float, vector, enum, std::atomic, or string-like, or anything with a defined conversion from a string or that takes an int, double, or string in a constructor. Also allowed are tuples, std::array or std::pair. Also supported are complex numbers, wrapper types, and containers besides vectors of any other supported type.&#xA;               help_string=&#34;&#34;)&#xA;&#xA;app.add_option_function&amp;lt;type&amp;gt;(option_name,&#xA;               function &amp;lt;void(const type &amp;amp;value)&amp;gt;, // type can be any type supported by add_option&#xA;               help_string=&#34;&#34;)&#xA;&#xA;// char as an option type is supported before 2.0 but in 2.0 it defaulted to allowing single non numerical characters in addition to the numeric values.&#xA;&#xA;// There is a template overload which takes two template parameters the first is the type of object to assign the value to, the second is the conversion type.  The conversion type should have a known way to convert from a string, such as any of the types that work in the non-template version.  If XC is a std::pair and T is some non pair type.  Then a two argument constructor for T is called to assign the value.  For tuples or other multi element types, XC must be a single type or a tuple like object of the same size as the assignment type&#xA;app.add_option&amp;lt;typename T, typename XC&amp;gt;(option_name,&#xA;               T &amp;amp;output, // output must be assignable or constructible from a value of type XC&#xA;               help_string=&#34;&#34;)&#xA;&#xA;// Add flags&#xA;app.add_flag(option_name,&#xA;             help_string=&#34;&#34;)&#xA;&#xA;app.add_flag(option_name,&#xA;             variable_to_bind_to, // bool, int, float, complex, containers, enum, std::atomic, or string-like, or any singular object with a defined conversion from a string like add_option&#xA;             help_string=&#34;&#34;)&#xA;&#xA;app.add_flag_function(option_name,&#xA;             function &amp;lt;void(std::int64_t count)&amp;gt;,&#xA;             help_string=&#34;&#34;)&#xA;&#xA;app.add_flag_callback(option_name,function&amp;lt;void(void)&amp;gt;,help_string=&#34;&#34;)&#xA;&#xA;// Add subcommands&#xA;App* subcom = app.add_subcommand(name, description);&#xA;&#xA;Option_group *app.add_option_group(name,description);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An option name may start with any character except (&#39;-&#39;, &#39; &#39;, &#39;\n&#39;, and &#39;!&#39;). For long options, after the first character all characters are allowed except (&#39;=&#39;,&#39;:&#39;,&#39;{&#39;,&#39; &#39;, &#39;\n&#39;). For the &lt;code&gt;add_flag*&lt;/code&gt; functions &#39;{&#39; and &#39;!&#39; have special meaning which is why they are not allowed. Names are given as a comma separated string, with the dash or dashes. An option or flag can have as many names as you want, and afterward, using &lt;code&gt;count&lt;/code&gt;, you can use any of the names, with dashes as needed, to count the options. One of the names is allowed to be given without proceeding dash(es); if present the option is a positional option, and that name will be used on the help line for its positional form.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;add_option_function&amp;lt;type&amp;gt;(...&lt;/code&gt; function will typically require the template parameter be given unless a &lt;code&gt;std::function&lt;/code&gt; object with an exact match is passed. The type can be any type supported by the &lt;code&gt;add_option&lt;/code&gt; function. The function should throw an error (&lt;code&gt;CLI::ConversionError&lt;/code&gt; or &lt;code&gt;CLI::ValidationError&lt;/code&gt; possibly) if the value is not valid.&lt;/p&gt; &#xA;&lt;p&gt;The two parameter template overload can be used in cases where you want to restrict the input such as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;double val&#xA;app.add_option&amp;lt;double,unsigned int&amp;gt;(&#34;-v&#34;,val);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which would first verify the input is convertible to an &lt;code&gt;unsigned int&lt;/code&gt; before assigning it. Or using some variant type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;using vtype=std::variant&amp;lt;int, double, std::string&amp;gt;;&#xA; vtype v1;&#xA;app.add_option&amp;lt;vtype,std:string&amp;gt;(&#34;--vs&#34;,v1);&#xA;app.add_option&amp;lt;vtype,int&amp;gt;(&#34;--vi&#34;,v1);&#xA;app.add_option&amp;lt;vtype,double&amp;gt;(&#34;--vf&#34;,v1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;otherwise the output would default to a string. The &lt;code&gt;add_option&lt;/code&gt; can be used with any integral or floating point types, enumerations, or strings. Or any type that takes an int, double, or std::string in an assignment operator or constructor. If an object can take multiple varieties of those, std::string takes precedence, then double then int. To better control which one is used or to use another type for the underlying conversions use the two parameter template to directly specify the conversion type.&lt;/p&gt; &#xA;&lt;p&gt;Types such as (std or boost) &lt;code&gt;optional&amp;lt;int&amp;gt;&lt;/code&gt;, &lt;code&gt;optional&amp;lt;double&amp;gt;&lt;/code&gt;, and &lt;code&gt;optional&amp;lt;string&amp;gt;&lt;/code&gt; and any other wrapper types are supported directly. For purposes of CLI11 wrapper types are those which &lt;code&gt;value_type&lt;/code&gt; definition. See &lt;a href=&#34;https://cliutils.gitlab.io/CLI11Tutorial/chapters/advanced-topics.html#custom-converters&#34;&gt;CLI11 Advanced Topics/Custom Converters&lt;/a&gt; for information on how you can add your own converters for additional types.&lt;/p&gt; &#xA;&lt;p&gt;Vector types can also be used in the two parameter template overload&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::vector&amp;lt;double&amp;gt; v1;&#xA;app.add_option&amp;lt;std::vector&amp;lt;double&amp;gt;,int&amp;gt;(&#34;--vs&#34;,v1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;would load a vector of doubles but ensure all values can be represented as integers.&lt;/p&gt; &#xA;&lt;p&gt;Automatic direct capture of the default string is disabled when using the two parameter template. Use &lt;code&gt;set_default_str(...)&lt;/code&gt; or &lt;code&gt;-&amp;gt;default_function(std::string())&lt;/code&gt; to set the default string or capture function directly for these cases.&lt;/p&gt; &#xA;&lt;p&gt;Flag options specified through the &lt;code&gt;add_flag*&lt;/code&gt; functions allow a syntax for the option names to default particular options to a false value or any other value if some flags are passed. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;app.add_flag(&#34;--flag,!--no-flag&#34;,result,&#34;help for flag&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;specifies that if &lt;code&gt;--flag&lt;/code&gt; is passed on the command line result will be true or contain a value of 1. If &lt;code&gt;--no-flag&lt;/code&gt; is passed &lt;code&gt;result&lt;/code&gt; will contain false or -1 if &lt;code&gt;result&lt;/code&gt; is a signed integer type, or 0 if it is an unsigned type. An alternative form of the syntax is more explicit: &lt;code&gt;&#34;--flag,--no-flag{false}&#34;&lt;/code&gt;; this is equivalent to the previous example. This also works for short form options &lt;code&gt;&#34;-f,!-n&#34;&lt;/code&gt; or &lt;code&gt;&#34;-f,-n{false}&#34;&lt;/code&gt;. If &lt;code&gt;variable_to_bind_to&lt;/code&gt; is anything but an integer value the default behavior is to take the last value given, while if &lt;code&gt;variable_to_bind_to&lt;/code&gt; is an integer type the behavior will be to sum all the given arguments and return the result. This can be modified if needed by changing the &lt;code&gt;multi_option_policy&lt;/code&gt; on each flag (this is not inherited). The default value can be any value. For example if you wished to define a numerical flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;app.add_flag(&#34;-1{1},-2{2},-3{3}&#34;,result,&#34;numerical flag&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using any of those flags on the command line will result in the specified number in the output. Similar things can be done for string values, and enumerations, as long as the default value can be converted to the given type.&lt;/p&gt; &#xA;&lt;p&gt;On a &lt;code&gt;C++14&lt;/code&gt; compiler, you can pass a callback function directly to &lt;code&gt;.add_flag&lt;/code&gt;, while in C++11 mode you&#39;ll need to use &lt;code&gt;.add_flag_function&lt;/code&gt; if you want a callback function. The function will be given the number of times the flag was passed. You can throw a relevant &lt;code&gt;CLI::ParseError&lt;/code&gt; to signal a failure.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;one,-o,--one&#34;&lt;/code&gt;: Valid as long as not a flag, would create an option that can be specified positionally, or with &lt;code&gt;-o&lt;/code&gt; or &lt;code&gt;--one&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;this&#34;&lt;/code&gt; Can only be passed positionally&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;-a,-b,-c&#34;&lt;/code&gt; No limit to the number of non-positional option names&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The add commands return a pointer to an internally stored &lt;code&gt;Option&lt;/code&gt;. This option can be used directly to check for the count (&lt;code&gt;-&amp;gt;count()&lt;/code&gt;) after parsing to avoid a string based lookup.&lt;/p&gt; &#xA;&lt;h4&gt;Option options&lt;/h4&gt; &#xA;&lt;p&gt;Before parsing, you can set the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;required()&lt;/code&gt;: The program will quit if this option is not present. This is &lt;code&gt;mandatory&lt;/code&gt; in Plumbum, but required options seems to be a more standard term. For compatibility, &lt;code&gt;-&amp;gt;mandatory()&lt;/code&gt; also works.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;expected(N)&lt;/code&gt;: Take &lt;code&gt;N&lt;/code&gt; values instead of as many as possible, only for vector args. If negative, require at least &lt;code&gt;-N&lt;/code&gt;; end with &lt;code&gt;--&lt;/code&gt; or another recognized option or subcommand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;expected(MIN,MAX)&lt;/code&gt;: Set a range of expected values to accompany an option. &lt;code&gt;expected(0,1)&lt;/code&gt; is the equivalent of making a flag.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;type_name(typename)&lt;/code&gt;: Set the name of an Option&#39;s type (&lt;code&gt;type_name_fn&lt;/code&gt; allows a function instead)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;type_size(N)&lt;/code&gt;: Set the intrinsic size of an option value. The parser will require multiples of this number if negative. Most of the time this is detected automatically though can be modified for specific use cases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;type_size(MIN,MAX)&lt;/code&gt;: Set the intrinsic size of an option to a range.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;needs(opt)&lt;/code&gt;: This option requires another option to also be present, opt is an &lt;code&gt;Option&lt;/code&gt; pointer. Options can be removed from the &lt;code&gt;needs&lt;/code&gt; with &lt;code&gt;remove_needs(opt)&lt;/code&gt;. The option can also be specified with a string containing the name of the option&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;excludes(opt)&lt;/code&gt;: This option cannot be given with &lt;code&gt;opt&lt;/code&gt; present, opt is an &lt;code&gt;Option&lt;/code&gt; pointer. Can also be given as a string containing the name of the option. Options can be removed from the excludes list with &lt;code&gt;-&amp;gt;remove_excludes(opt)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;envname(name)&lt;/code&gt;: Gets the value from the environment if present and not passed on the command line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;group(name)&lt;/code&gt;: The help group to put the option in. No effect for positional options. Defaults to &lt;code&gt;&#34;Options&#34;&lt;/code&gt;. &lt;code&gt;&#34;&#34;&lt;/code&gt; will not show up in the help print (hidden).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;ignore_case()&lt;/code&gt;: Ignore the case on the command line (also works on subcommands, does not affect arguments).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;ignore_underscore()&lt;/code&gt;: Ignore any underscores in the options names (also works on subcommands, does not affect arguments). For example &#34;option_one&#34; will match with &#34;optionone&#34;. This does not apply to short form options since they only have one character&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;disable_flag_override()&lt;/code&gt;: From the command line long form flag options can be assigned a value on the command line using the &lt;code&gt;=&lt;/code&gt; notation &lt;code&gt;--flag=value&lt;/code&gt;. If this behavior is not desired, the &lt;code&gt;disable_flag_override()&lt;/code&gt; disables it and will generate an exception if it is done on the command line. The &lt;code&gt;=&lt;/code&gt; does not work with short form flag options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;allow_extra_args(true/false)&lt;/code&gt;: If set to true the option will take an unlimited number of arguments like a vector, if false it will limit the number of arguments to the size of the type used in the option. Default value depends on the nature of the type use, containers default to true, others default to false.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;delimiter(char)&lt;/code&gt;: Allows specification of a custom delimiter for separating single arguments into vector arguments, for example specifying &lt;code&gt;-&amp;gt;delimiter(&#39;,&#39;)&lt;/code&gt; on an option would result in &lt;code&gt;--opt=1,2,3&lt;/code&gt; producing 3 elements of a vector and the equivalent of --opt 1 2 3 assuming opt is a vector value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;description(str)&lt;/code&gt;: Set/change the description.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;multi_option_policy(CLI::MultiOptionPolicy::Throw)&lt;/code&gt;: Set the multi-option policy. Shortcuts available: &lt;code&gt;-&amp;gt;take_last()&lt;/code&gt;, &lt;code&gt;-&amp;gt;take_first()&lt;/code&gt;,&lt;code&gt;-&amp;gt;take_all()&lt;/code&gt;, and &lt;code&gt;-&amp;gt;join()&lt;/code&gt;. This will only affect options expecting 1 argument or bool flags (which do not inherit their default but always start with a specific policy). &lt;code&gt;-&amp;gt;join(delim)&lt;/code&gt; can also be used to join with a specific delimiter. This equivalent to calling &lt;code&gt;-&amp;gt;delimiter(delim)&lt;/code&gt; and &lt;code&gt;-&amp;gt;join()&lt;/code&gt;. Valid values are &lt;code&gt;CLI::MultiOptionPolicy::Throw&lt;/code&gt;, &lt;code&gt;CLI::MultiOptionPolicy::Throw&lt;/code&gt;, &lt;code&gt;CLI::MultiOptionPolicy::TakeLast&lt;/code&gt;, &lt;code&gt;CLI::MultiOptionPolicy::TakeFirst&lt;/code&gt;, &lt;code&gt;CLI::MultiOptionPolicy::Join&lt;/code&gt;, &lt;code&gt;CLI::MultiOptionPolicy::TakeAll&lt;/code&gt;, and &lt;code&gt;CLI::MultiOptionPolicy::Sum&lt;/code&gt; 🆕.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;check(std::string(const std::string &amp;amp;), validator_name=&#34;&#34;,validator_description=&#34;&#34;)&lt;/code&gt;: Define a check function. The function should return a non empty string with the error message if the check fails&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;check(Validator)&lt;/code&gt;: Use a Validator object to do the check see &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#validators&#34;&gt;Validators&lt;/a&gt; for a description of available Validators and how to create new ones.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;transform(std::string(std::string &amp;amp;), validator_name=&#34;&#34;,validator_description=&#34;)&lt;/code&gt;: Converts the input string into the output string, in-place in the parsed options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;transform(Validator)&lt;/code&gt;: Uses a Validator object to do the transformation see &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#validators&#34;&gt;Validators&lt;/a&gt; for a description of available Validators and how to create new ones.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;each(void(const std::string &amp;amp;)&amp;gt;&lt;/code&gt;: Run this function on each value received, as it is received. It should throw a &lt;code&gt;ValidationError&lt;/code&gt; if an error is encountered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;configurable(false)&lt;/code&gt;: Disable this option from being in a configuration file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;capture_default_str()&lt;/code&gt;: Store the current value attached and display it in the help string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;default_function(std::string())&lt;/code&gt;: Advanced: Change the function that &lt;code&gt;capture_default_str()&lt;/code&gt; uses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;always_capture_default()&lt;/code&gt;: Always run &lt;code&gt;capture_default_str()&lt;/code&gt; when creating new options. Only useful on an App&#39;s &lt;code&gt;option_defaults&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;default_str(string)&lt;/code&gt;: Set the default string directly (NO VALIDATION OR CALLBACKS). This string will also be used as a default value if no arguments are passed and the value is requested.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;default_val(value)&lt;/code&gt;: Generate the default string from a value and validate that the value is also valid. For options that assign directly to a value type the value in that type is also updated. Value must be convertible to a string(one of known types or have a stream operator). The callback may be triggered if the &lt;code&gt;run_callback_for_default&lt;/code&gt; is set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;run_callback_for_default()&lt;/code&gt;: This will force the option callback to be executed or the variable set when the &lt;code&gt;default_val&lt;/code&gt; is set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;option_text(string)&lt;/code&gt;: Sets the text between the option name and description.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;force_callback()&lt;/code&gt;: Causes the option callback or value set to be triggered even if the option was not present in parsing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;trigger_on_parse()&lt;/code&gt;: If set, causes the callback and all associated validation checks for the option to be executed when the option value is parsed vs. at the end of all parsing. This could cause the callback to be executed multiple times. Also works with positional options.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These options return the &lt;code&gt;Option&lt;/code&gt; pointer, so you can chain them together, and even skip storing the pointer entirely. The &lt;code&gt;each&lt;/code&gt; function takes any function that has the signature &lt;code&gt;void(const std::string&amp;amp;)&lt;/code&gt;; it should throw a &lt;code&gt;ValidationError&lt;/code&gt; when validation fails. The help message will have the name of the parent option prepended. Since &lt;code&gt;each&lt;/code&gt;, &lt;code&gt;check&lt;/code&gt; and &lt;code&gt;transform&lt;/code&gt; use the same underlying mechanism, you can chain as many as you want, and they will be executed in order. Operations added through &lt;code&gt;transform&lt;/code&gt; are executed first in reverse order of addition, and &lt;code&gt;check&lt;/code&gt; and &lt;code&gt;each&lt;/code&gt; are run following the transform functions in order of addition. If you just want to see the unconverted values, use &lt;code&gt;.results()&lt;/code&gt; to get the &lt;code&gt;std::vector&amp;lt;std::string&amp;gt;&lt;/code&gt; of results.&lt;/p&gt; &#xA;&lt;p&gt;On the command line, options can be given as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-a&lt;/code&gt; (flag)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-abc&lt;/code&gt; (flags can be combined)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-f filename&lt;/code&gt; (option)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-ffilename&lt;/code&gt; (no space required)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-abcf filename&lt;/code&gt; (flags and option can be combined)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--long&lt;/code&gt; (long flag)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--long_flag=true&lt;/code&gt; (long flag with equals to override default value)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--file filename&lt;/code&gt; (space)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--file=filename&lt;/code&gt; (equals)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If &lt;code&gt;allow_windows_style_options()&lt;/code&gt; is specified in the application or subcommand options can also be given as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/a&lt;/code&gt; (flag)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/f filename&lt;/code&gt; (option)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/long&lt;/code&gt; (long flag)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/file filename&lt;/code&gt; (space)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/file:filename&lt;/code&gt; (colon)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/long_flag:false&lt;/code&gt; (long flag with : to override the default value) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows style options do not allow combining short options or values not separated from the short option like with &lt;code&gt;-&lt;/code&gt; options&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Long flag options may be given with an &lt;code&gt;=&amp;lt;value&amp;gt;&lt;/code&gt; to allow specifying a false value, or some other value to the flag. See &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#configuration-file&#34;&gt;config files&lt;/a&gt; for details on the values supported. NOTE: only the &lt;code&gt;=&lt;/code&gt; or &lt;code&gt;:&lt;/code&gt; for windows-style options may be used for this, using a space will result in the argument being interpreted as a positional argument. This syntax can override the default values, and can be disabled by using &lt;code&gt;disable_flag_override()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Extra positional arguments will cause the program to exit, so at least one positional option with a vector is recommended if you want to allow extraneous arguments. If you set &lt;code&gt;.allow_extras()&lt;/code&gt; on the main &lt;code&gt;App&lt;/code&gt;, you will not get an error. You can access the missing options using &lt;code&gt;remaining&lt;/code&gt; (if you have subcommands, &lt;code&gt;app.remaining(true)&lt;/code&gt; will get all remaining options, subcommands included). If the remaining arguments are to processed by another &lt;code&gt;App&lt;/code&gt; then the function &lt;code&gt;remaining_for_passthrough()&lt;/code&gt; can be used to get the remaining arguments in reverse order such that &lt;code&gt;app.parse(vector)&lt;/code&gt; works directly and could even be used inside a subcommand callback.&lt;/p&gt; &#xA;&lt;p&gt;You can access a vector of pointers to the parsed options in the original order using &lt;code&gt;parse_order()&lt;/code&gt;. If &lt;code&gt;--&lt;/code&gt; is present in the command line that does not end an unlimited option, then everything after that is positional only.&lt;/p&gt; &#xA;&lt;h4&gt;Validators&lt;/h4&gt; &#xA;&lt;p&gt;Validators are structures to check or modify inputs, they can be used to verify that an input meets certain criteria or transform it into another value. They are added through the &lt;code&gt;check&lt;/code&gt; or &lt;code&gt;transform&lt;/code&gt; functions. The differences between the two function are that checks do not modify the input whereas transforms can and are executed before any Validators added through &lt;code&gt;check&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;CLI11 has several Validators built-in that perform some common checks&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::IsMember(...)&lt;/code&gt;: Require an option be a member of a given set. See &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#transforming-validators&#34;&gt;Transforming Validators&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::Transformer(...)&lt;/code&gt;: Modify the input using a map. See &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#transforming-validators&#34;&gt;Transforming Validators&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::CheckedTransformer(...)&lt;/code&gt;: Modify the input using a map, and require that the input is either in the set or already one of the outputs of the set. See &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#transforming-validators&#34;&gt;Transforming Validators&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::AsNumberWithUnit(...)&lt;/code&gt;: Modify the &lt;code&gt;&amp;lt;NUMBER&amp;gt; &amp;lt;UNIT&amp;gt;&lt;/code&gt; pair by matching the unit and multiplying the number by the corresponding factor. It can be used as a base for transformers, that accept things like size values (&lt;code&gt;1 KB&lt;/code&gt;) or durations (&lt;code&gt;0.33 ms&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::AsSizeValue(...)&lt;/code&gt;: Convert inputs like &lt;code&gt;100b&lt;/code&gt;, &lt;code&gt;42 KB&lt;/code&gt;, &lt;code&gt;101 Mb&lt;/code&gt;, &lt;code&gt;11 Mib&lt;/code&gt; to absolute values. &lt;code&gt;KB&lt;/code&gt; can be configured to be interpreted as 10^3 or 2^10.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::ExistingFile&lt;/code&gt;: Requires that the file exists if given.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::ExistingDirectory&lt;/code&gt;: Requires that the directory exists.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::ExistingPath&lt;/code&gt;: Requires that the path (file or directory) exists.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::NonexistentPath&lt;/code&gt;: Requires that the path does not exist.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::FileOnDefaultPath&lt;/code&gt;: Best used as a transform, Will check that a file exists either directly or in a default path and update the path appropriately. See &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#transforming-validators&#34;&gt;Transforming Validators&lt;/a&gt; for more details&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::Range(min,max)&lt;/code&gt;: Requires that the option be between min and max (make sure to use floating point if needed). Min defaults to 0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::Bounded(min,max)&lt;/code&gt;: Modify the input such that it is always between min and max (make sure to use floating point if needed). Min defaults to 0. Will produce an error if conversion is not possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::PositiveNumber&lt;/code&gt;: Requires the number be greater than 0&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::NonNegativeNumber&lt;/code&gt;: Requires the number be greater or equal to 0&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::Number&lt;/code&gt;: Requires the input be a number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::ValidIPV4&lt;/code&gt;: Requires that the option be a valid IPv4 string e.g. &lt;code&gt;&#39;255.255.255.255&#39;&lt;/code&gt;, &lt;code&gt;&#39;10.1.1.7&#39;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::TypeValidator&amp;lt;TYPE&amp;gt;&lt;/code&gt;:Requires that the option be convertible to the specified type e.g. &lt;code&gt;CLI::TypeValidator&amp;lt;unsigned int&amp;gt;()&lt;/code&gt; would require that the input be convertible to an &lt;code&gt;unsigned int&lt;/code&gt; regardless of the end conversion.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These Validators can be used by simply passing the name into the &lt;code&gt;check&lt;/code&gt; or &lt;code&gt;transform&lt;/code&gt; methods on an option&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;-&amp;gt;check(CLI::ExistingFile);&#xA;-&amp;gt;check(CLI::Range(0,10));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Validators can be merged using &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; and inverted using &lt;code&gt;!&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;-&amp;gt;check(CLI::Range(0,10)|CLI::Range(20,30));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will produce a check to ensure a value is between 0 and 10 or 20 and 30.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;-&amp;gt;check(!CLI::PositiveNumber);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will produce a check for a number less than or equal to 0.&lt;/p&gt; &#xA;&lt;h5&gt;Transforming Validators&lt;/h5&gt; &#xA;&lt;p&gt;There are a few built in Validators that let you transform values if used with the &lt;code&gt;transform&lt;/code&gt; function. If they also do some checks then they can be used &lt;code&gt;check&lt;/code&gt; but some may do nothing in that case.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::Bounded(min,max)&lt;/code&gt; will bound values between min and max and values outside of that range are limited to min or max, it will fail if the value cannot be converted and produce a &lt;code&gt;ValidationError&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;IsMember&lt;/code&gt; Validator lets you specify a set of predefined options. You can pass any container or copyable pointer (including &lt;code&gt;std::shared_ptr&lt;/code&gt;) to a container to this Validator; the container just needs to be iterable and have a &lt;code&gt;::value_type&lt;/code&gt;. The key type should be convertible from a string, You can use an initializer list directly if you like. If you need to modify the set later, the pointer form lets you do that; the type message and check will correctly refer to the current version of the set. The container passed in can be a set, vector, or a map like structure. If used in the &lt;code&gt;transform&lt;/code&gt; method the output value will be the matching key as it could be modified by filters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After specifying a set of options, you can also specify &#34;filter&#34; functions of the form &lt;code&gt;T(T)&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the type of the values. The most common choices probably will be &lt;code&gt;CLI::ignore_case&lt;/code&gt; an &lt;code&gt;CLI::ignore_underscore&lt;/code&gt;, and &lt;code&gt;CLI::ignore_space&lt;/code&gt;. These all work on strings but it is possible to define functions that work on other types. Here are some examples of &lt;code&gt;IsMember&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::IsMember({&#34;choice1&#34;, &#34;choice2&#34;})&lt;/code&gt;: Select from exact match to choices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::IsMember({&#34;choice1&#34;, &#34;choice2&#34;}, CLI::ignore_case, CLI::ignore_underscore)&lt;/code&gt;: Match things like &lt;code&gt;Choice_1&lt;/code&gt;, too.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::IsMember(std::set&amp;lt;int&amp;gt;({2,3,4}))&lt;/code&gt;: Most containers and types work; you just need &lt;code&gt;std::begin&lt;/code&gt;, &lt;code&gt;std::end&lt;/code&gt;, and &lt;code&gt;::value_type&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::IsMember(std::map&amp;lt;std::string, TYPE&amp;gt;({{&#34;one&#34;, 1}, {&#34;two&#34;, 2}}))&lt;/code&gt;: You can use maps; in &lt;code&gt;-&amp;gt;transform()&lt;/code&gt; these replace the matched value with the matched key. The value member of the map is not used in &lt;code&gt;IsMember&lt;/code&gt;, so it can be any type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;auto p = std::make_shared&amp;lt;std::vector&amp;lt;std::string&amp;gt;&amp;gt;(std::initializer_list&amp;lt;std::string&amp;gt;(&#34;one&#34;, &#34;two&#34;)); CLI::IsMember(p)&lt;/code&gt;: You can modify &lt;code&gt;p&lt;/code&gt; later.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;Transformer&lt;/code&gt; and &lt;code&gt;CheckedTransformer&lt;/code&gt; Validators transform one value into another. Any container or copyable pointer (including &lt;code&gt;std::shared_ptr&lt;/code&gt;) to a container that generates pairs of values can be passed to these &lt;code&gt;Validator&#39;s&lt;/code&gt;; the container just needs to be iterable and have a &lt;code&gt;::value_type&lt;/code&gt; that consists of pairs. The key type should be convertible from a string, and the value type should be convertible to a string You can use an initializer list directly if you like. If you need to modify the map later, the pointer form lets you do that; the description message will correctly refer to the current version of the map. &lt;code&gt;Transformer&lt;/code&gt; does not do any checking so values not in the map are ignored. &lt;code&gt;CheckedTransformer&lt;/code&gt; takes an extra step of verifying that the value is either one of the map key values, in which case it is transformed, or one of the expected output values, and if not will generate a &lt;code&gt;ValidationError&lt;/code&gt;. A Transformer placed using &lt;code&gt;check&lt;/code&gt; will not do anything.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After specifying a map of options, you can also specify &#34;filter&#34; just like in &lt;code&gt;CLI::IsMember&lt;/code&gt;. Here are some examples (&lt;code&gt;Transformer&lt;/code&gt; and &lt;code&gt;CheckedTransformer&lt;/code&gt; are interchangeable in the examples) of &lt;code&gt;Transformer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::Transformer({{&#34;key1&#34;, &#34;map1&#34;},{&#34;key2&#34;,&#34;map2&#34;}})&lt;/code&gt;: Select from key values and produce map values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::Transformer(std::map&amp;lt;std::string,int&amp;gt;({&#34;two&#34;,2},{&#34;three&#34;,3},{&#34;four&#34;,4}}))&lt;/code&gt;: most maplike containers work, the &lt;code&gt;::value_type&lt;/code&gt; needs to produce a pair of some kind.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::CheckedTransformer(std::map&amp;lt;std::string, int&amp;gt;({{&#34;one&#34;, 1}, {&#34;two&#34;, 2}}))&lt;/code&gt;: You can use maps; in &lt;code&gt;-&amp;gt;transform()&lt;/code&gt; these replace the matched key with the value. &lt;code&gt;CheckedTransformer&lt;/code&gt; also requires that the value either match one of the keys or match one of known outputs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;auto p = std::make_shared&amp;lt;CLI::TransformPairs&amp;lt;std::string&amp;gt;&amp;gt;(std::initializer_list&amp;lt;std::pair&amp;lt;std::string,std::string&amp;gt;&amp;gt;({&#34;key1&#34;, &#34;map1&#34;},{&#34;key2&#34;,&#34;map2&#34;})); CLI::Transformer(p)&lt;/code&gt;: You can modify &lt;code&gt;p&lt;/code&gt; later. &lt;code&gt;TransformPairs&amp;lt;T&amp;gt;&lt;/code&gt; is an alias for &lt;code&gt;std::vector&amp;lt;std::pair&amp;lt;&amp;lt;std::string,T&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTES: If the container used in &lt;code&gt;IsMember&lt;/code&gt;, &lt;code&gt;Transformer&lt;/code&gt;, or &lt;code&gt;CheckedTransformer&lt;/code&gt; has a &lt;code&gt;find&lt;/code&gt; function like &lt;code&gt;std::unordered_map&lt;/code&gt; or &lt;code&gt;std::map&lt;/code&gt; then that function is used to do the searching. If it does not have a &lt;code&gt;find&lt;/code&gt; function a linear search is performed. If there are filters present, the fast search is performed first, and if that fails a linear search with the filters on the key values is performed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CLI::FileOnDefaultPath(default_path)&lt;/code&gt;: 🆕 can be used to check for files in a default path. If used as a transform it will first check that a file exists, if it does nothing further is done, if it does not it tries to add a default Path to the file and search there again. If the file does not exist an error is returned normally but this can be disabled using &lt;code&gt;CLI::FileOnDefaultPath(default_path, false)&lt;/code&gt;. This allows multiple paths to be chained using multiple transform calls.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Validator operations&lt;/h5&gt; &#xA;&lt;p&gt;Validators are copyable and have a few operations that can be performed on them to alter settings. Most of the built in Validators have a default description that is displayed in the help. This can be altered via &lt;code&gt;.description(validator_description)&lt;/code&gt;. The name of a Validator, which is useful for later reference from the &lt;code&gt;get_validator(name)&lt;/code&gt; method of an &lt;code&gt;Option&lt;/code&gt; can be set via &lt;code&gt;.name(validator_name)&lt;/code&gt; The operation function of a Validator can be set via &lt;code&gt;.operation(std::function&amp;lt;std::string(std::string &amp;amp;&amp;gt;)&lt;/code&gt;. The &lt;code&gt;.active()&lt;/code&gt; function can activate or deactivate a Validator from the operation. A validator can be set to apply only to a specific element of the output. For example in a pair option &lt;code&gt;std::pair&amp;lt;int, std::string&amp;gt;&lt;/code&gt; the first element may need to be a positive integer while the second may need to be a valid file. The &lt;code&gt;.application_index(int)&lt;/code&gt; function can specify this. It is zero based and negative indices apply to all values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;opt-&amp;gt;check(CLI::Validator(CLI::PositiveNumber).application_index(0));&#xA;opt-&amp;gt;check(CLI::Validator(CLI::ExistingFile).application_index(1));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the validator operation functions return a Validator reference allowing them to be chained. For example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;opt-&amp;gt;check(CLI::Range(10,20).description(&#34;range is limited to sensible values&#34;).active(false).name(&#34;range&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will specify a check on an option with a name &#34;range&#34;, but deactivate it for the time being. The check can later be activated through&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;opt-&amp;gt;get_validator(&#34;range&#34;)-&amp;gt;active();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Custom Validators&lt;/h5&gt; &#xA;&lt;p&gt;A validator object with a custom function can be created via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;CLI::Validator(std::function&amp;lt;std::string(std::string &amp;amp;)&amp;gt;,validator_description,validator_name=&#34;&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if the operation function is set later they can be created with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;CLI::Validator(validator_description);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to create a subclass of &lt;code&gt;CLI::Validator&lt;/code&gt;, in which case it can also set a custom description function, and operation function.&lt;/p&gt; &#xA;&lt;h5&gt;Querying Validators&lt;/h5&gt; &#xA;&lt;p&gt;Once loaded into an Option, a pointer to a named Validator can be retrieved via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;opt-&amp;gt;get_validator(name);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will retrieve a Validator with the given name or throw a &lt;code&gt;CLI::OptionNotFound&lt;/code&gt; error. If no name is given or name is empty the first unnamed Validator will be returned or the first Validator if there is only one.&lt;/p&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;opt-&amp;gt;get_validator(index);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will return a validator in the index it is applied which isn&#39;t necessarily the order in which was defined. The pointer can be &lt;code&gt;nullptr&lt;/code&gt; if an invalid index is given. Validators have a few functions to query the current values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get_description()&lt;/code&gt;: Will return a description string&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_name()&lt;/code&gt;: Will return the Validator name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_active()&lt;/code&gt;: Will return the current active state, true if the Validator is active.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_application_index()&lt;/code&gt;: Will return the current application index.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_modifying()&lt;/code&gt;: Will return true if the Validator is allowed to modify the input, this can be controlled via the &lt;code&gt;non_modifying()&lt;/code&gt; method, though it is recommended to let &lt;code&gt;check&lt;/code&gt; and &lt;code&gt;transform&lt;/code&gt; option methods manipulate it if needed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Getting results&lt;/h4&gt; &#xA;&lt;p&gt;In most cases, the fastest and easiest way is to return the results through a callback or variable specified in one of the &lt;code&gt;add_*&lt;/code&gt; functions. But there are situations where this is not possible or desired. For these cases the results may be obtained through one of the following functions. Please note that these functions will do any type conversions and processing during the call so should not used in performance critical code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;results()&lt;/code&gt;: Retrieves a vector of strings with all the results in the order they were given.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&amp;gt;results(variable_to_bind_to)&lt;/code&gt;: Gets the results according to the MultiOptionPolicy and converts them just like the &lt;code&gt;add_option_function&lt;/code&gt; with a variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Value=opt-&amp;gt;as&amp;lt;type&amp;gt;()&lt;/code&gt;: Returns the result or default value directly as the specified type if possible, can be vector to return all results, and a non-vector to get the result according to the MultiOptionPolicy in place.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Subcommands&lt;/h3&gt; &#xA;&lt;p&gt;Subcommands are supported, and can be nested infinitely. To add a subcommand, call the &lt;code&gt;add_subcommand&lt;/code&gt; method with a name and an optional description. This gives a pointer to an &lt;code&gt;App&lt;/code&gt; that behaves just like the main app, and can take options or further subcommands. Add &lt;code&gt;-&amp;gt;ignore_case()&lt;/code&gt; to a subcommand to allow any variation of caps to also be accepted. &lt;code&gt;-&amp;gt;ignore_underscore()&lt;/code&gt; is similar, but for underscores. Children inherit the current setting from the parent. You cannot add multiple matching subcommand names at the same level (including &lt;code&gt;ignore_case&lt;/code&gt; and &lt;code&gt;ignore_underscore&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you want to require that at least one subcommand is given, use &lt;code&gt;.require_subcommand()&lt;/code&gt; on the parent app. You can optionally give an exact number of subcommands to require, as well. If you give two arguments, that sets the min and max number allowed. 0 for the max number allowed will allow an unlimited number of subcommands. As a handy shortcut, a single negative value N will set &#34;up to N&#34; values. Limiting the maximum number allows you to keep arguments that match a previous subcommand name from matching.&lt;/p&gt; &#xA;&lt;p&gt;If an &lt;code&gt;App&lt;/code&gt; (main or subcommand) has been parsed on the command line, &lt;code&gt;-&amp;gt;parsed&lt;/code&gt; will be true (or convert directly to bool). All &lt;code&gt;App&lt;/code&gt;s have a &lt;code&gt;get_subcommands()&lt;/code&gt; method, which returns a list of pointers to the subcommands passed on the command line. A &lt;code&gt;got_subcommand(App_or_name)&lt;/code&gt; method is also provided that will check to see if an &lt;code&gt;App&lt;/code&gt; pointer or a string name was collected on the command line.&lt;/p&gt; &#xA;&lt;p&gt;For many cases, however, using an app&#39;s callback capabilities may be easier. Every app has a set of callbacks that can be executed at various stages of parsing; a &lt;code&gt;C++&lt;/code&gt; lambda function (with capture to get parsed values) can be used as input to the callback definition function. If you throw &lt;code&gt;CLI::Success&lt;/code&gt; or &lt;code&gt;CLI::RuntimeError(return_value)&lt;/code&gt;, you can even exit the program through the callback.&lt;/p&gt; &#xA;&lt;p&gt;Multiple subcommands are allowed, to allow &lt;a href=&#34;http://click.pocoo.org&#34;&gt;&lt;code&gt;Click&lt;/code&gt;&lt;/a&gt; like series of commands (order is preserved). The same subcommand can be triggered multiple times but all positional arguments will take precedence over the second and future calls of the subcommand. &lt;code&gt;-&amp;gt;count()&lt;/code&gt; on the subcommand will return the number of times the subcommand was called. The subcommand callback will only be triggered once unless the &lt;code&gt;.immediate_callback()&lt;/code&gt; flag is set or the callback is specified through the &lt;code&gt;parse_complete_callback()&lt;/code&gt; function. The &lt;code&gt;final_callback()&lt;/code&gt; is triggered only once. In which case the callback executes on completion of the subcommand arguments but after the arguments for that subcommand have been parsed, and can be triggered multiple times.&lt;/p&gt; &#xA;&lt;p&gt;Subcommands may also have an empty name either by calling &lt;code&gt;add_subcommand&lt;/code&gt; with an empty string for the name or with no arguments. Nameless subcommands function a similarly to groups in the main &lt;code&gt;App&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#option-groups&#34;&gt;Option groups&lt;/a&gt; to see how this might work. If an option is not defined in the main App, all nameless subcommands are checked as well. This allows for the options to be defined in a composable group. The &lt;code&gt;add_subcommand&lt;/code&gt; function has an overload for adding a &lt;code&gt;shared_ptr&amp;lt;App&amp;gt;&lt;/code&gt; so the subcommand(s) could be defined in different components and merged into a main &lt;code&gt;App&lt;/code&gt;, or possibly multiple &lt;code&gt;Apps&lt;/code&gt;. Multiple nameless subcommands are allowed. Callbacks for nameless subcommands are only triggered if any options from the subcommand were parsed. Subcommand names given through the &lt;code&gt;add_subcommand&lt;/code&gt; method have the same restrictions as option names.&lt;/p&gt; &#xA;&lt;h4&gt;Subcommand options&lt;/h4&gt; &#xA;&lt;p&gt;There are several options that are supported on the main app and subcommands and option_groups. These are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.ignore_case()&lt;/code&gt;: Ignore the case of this subcommand. Inherited by added subcommands, so is usually used on the main &lt;code&gt;App&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.ignore_underscore()&lt;/code&gt;: Ignore any underscores in the subcommand name. Inherited by added subcommands, so is usually used on the main &lt;code&gt;App&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.allow_windows_style_options()&lt;/code&gt;: Allow command line options to be parsed in the form of &lt;code&gt;/s /long /file:file_name.ext&lt;/code&gt; This option does not change how options are specified in the &lt;code&gt;add_option&lt;/code&gt; calls or the ability to process options in the form of &lt;code&gt;-s --long --file=file_name.ext&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.fallthrough()&lt;/code&gt;: Allow extra unmatched options and positionals to &#34;fall through&#34; and be matched on a parent option. Subcommands always are allowed to &#34;fall through&#34; as in they will first attempt to match on the current subcommand and if they fail will progressively check parents for matching subcommands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.configurable()&lt;/code&gt;: Allow the subcommand to be triggered from a configuration file. By default subcommand options in a configuration file do not trigger a subcommand but will just update default values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.disable()&lt;/code&gt;: Specify that the subcommand is disabled, if given with a bool value it will enable or disable the subcommand or option group.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.disabled_by_default()&lt;/code&gt;: Specify that at the start of parsing the subcommand/option_group should be disabled. This is useful for allowing some Subcommands to trigger others.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.enabled_by_default()&lt;/code&gt;: Specify that at the start of each parse the subcommand/option_group should be enabled. This is useful for allowing some Subcommands to disable others.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.silent()&lt;/code&gt;: Specify that the subcommand is silent meaning that if used it won&#39;t show up in the subcommand list. This allows the use of subcommands as modifiers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.validate_positionals()&lt;/code&gt;: Specify that positionals should pass validation before matching. Validation is specified through &lt;code&gt;transform&lt;/code&gt;, &lt;code&gt;check&lt;/code&gt;, and &lt;code&gt;each&lt;/code&gt; for an option. If an argument fails validation it is not an error and matching proceeds to the next available positional or extra arguments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.validate_optional_arguments()&lt;/code&gt;:🆕 Specify that optional arguments should pass validation before being assigned to an option. Validation is specified through &lt;code&gt;transform&lt;/code&gt;, &lt;code&gt;check&lt;/code&gt;, and &lt;code&gt;each&lt;/code&gt; for an option. If an argument fails validation it is not an error and matching proceeds to the next available positional subcommand or extra arguments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.excludes(option_or_subcommand)&lt;/code&gt;: If given an option pointer or pointer to another subcommand, these subcommands cannot be given together. In the case of options, if the option is passed the subcommand cannot be used and will generate an error.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.needs(option_or_subcommand)&lt;/code&gt;: If given an option pointer or pointer to another subcommand, the subcommands will require the given option to have been given before this subcommand is validated which occurs prior to execution of any callback or after parsing is completed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.require_option()&lt;/code&gt;: Require 1 or more options or option groups be used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.require_option(N)&lt;/code&gt;: Require &lt;code&gt;N&lt;/code&gt; options or option groups, if &lt;code&gt;N&amp;gt;0&lt;/code&gt;, or up to &lt;code&gt;N&lt;/code&gt; if &lt;code&gt;N&amp;lt;0&lt;/code&gt;. &lt;code&gt;N=0&lt;/code&gt; resets to the default to 0 or more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.require_option(min, max)&lt;/code&gt;: Explicitly set min and max allowed options or option groups. Setting &lt;code&gt;max&lt;/code&gt; to 0 implies unlimited options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.require_subcommand()&lt;/code&gt;: Require 1 or more subcommands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.require_subcommand(N)&lt;/code&gt;: Require &lt;code&gt;N&lt;/code&gt; subcommands if &lt;code&gt;N&amp;gt;0&lt;/code&gt;, or up to &lt;code&gt;N&lt;/code&gt; if &lt;code&gt;N&amp;lt;0&lt;/code&gt;. &lt;code&gt;N=0&lt;/code&gt; resets to the default to 0 or more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.require_subcommand(min, max)&lt;/code&gt;: Explicitly set min and max allowed subcommands. Setting &lt;code&gt;max&lt;/code&gt; to 0 is unlimited.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.add_subcommand(name=&#34;&#34;, description=&#34;&#34;)&lt;/code&gt;: Add a subcommand, returns a pointer to the internally stored subcommand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.add_subcommand(shared_ptr&amp;lt;App&amp;gt;)&lt;/code&gt;: Add a subcommand by shared_ptr, returns a pointer to the internally stored subcommand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.remove_subcommand(App)&lt;/code&gt;: Remove a subcommand from the app or subcommand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.got_subcommand(App_or_name)&lt;/code&gt;: Check to see if a subcommand was received on the command line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.get_subcommands(filter)&lt;/code&gt;: The list of subcommands that match a particular filter function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.add_option_group(name=&#34;&#34;, description=&#34;&#34;)&lt;/code&gt;: Add an &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#option-groups&#34;&gt;option group&lt;/a&gt; to an App, an option group is specialized subcommand intended for containing groups of options or other groups for controlling how options interact.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.get_parent()&lt;/code&gt;: Get the parent App or &lt;code&gt;nullptr&lt;/code&gt; if called on main App.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.get_option(name)&lt;/code&gt;: Get an option pointer by option name will throw if the specified option is not available, nameless subcommands are also searched&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.get_option_no_throw(name)&lt;/code&gt;: Get an option pointer by option name. This function will return a &lt;code&gt;nullptr&lt;/code&gt; instead of throwing if the option is not available.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.get_options(filter)&lt;/code&gt;: Get the list of all defined option pointers (useful for processing the app for custom output formats).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.parse_order()&lt;/code&gt;: Get the list of option pointers in the order they were parsed (including duplicates).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.formatter(fmt)&lt;/code&gt;: Set a formatter, with signature &lt;code&gt;std::string(const App*, std::string, AppFormatMode)&lt;/code&gt;. See Formatting for more details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.description(str)&lt;/code&gt;: Set/change the description.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.get_description()&lt;/code&gt;: Access the description.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.alias(str)&lt;/code&gt;: set an alias for the subcommand, this allows subcommands to be called by more than one name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.parsed()&lt;/code&gt;: True if this subcommand was given on the command line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.count()&lt;/code&gt;: Returns the number of times the subcommand was called.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.count(option_name)&lt;/code&gt;: Returns the number of times a particular option was called.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.count_all()&lt;/code&gt;: Returns the total number of arguments a particular subcommand processed, on the main App it returns the total number of processed commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.name(name)&lt;/code&gt;: Add or change the name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.callback(void() function)&lt;/code&gt;: Set the callback for an app. Either sets the &lt;code&gt;pre_parse_callback&lt;/code&gt; or the &lt;code&gt;final_callback&lt;/code&gt; depending on the value of &lt;code&gt;immediate_callback&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#callbacks&#34;&gt;Subcommand callbacks&lt;/a&gt; for some additional details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.parse_complete_callback(void() function)&lt;/code&gt;: Set the callback that runs at the completion of parsing. For subcommands this is executed at the completion of the single subcommand and can be executed multiple times. See &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#callbacks&#34;&gt;Subcommand callbacks&lt;/a&gt; for some additional details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.final_callback(void() function)&lt;/code&gt;: Set the callback that runs at the end of all processing. This is the last thing that is executed before returning. See &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#callbacks&#34;&gt;Subcommand callbacks&lt;/a&gt; for some additional details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.immediate_callback()&lt;/code&gt;: Specifies whether the callback for a subcommand should be run as a &lt;code&gt;parse_complete_callback&lt;/code&gt;(true) or &lt;code&gt;final_callback&lt;/code&gt;(false). When used on the main app it will execute the main app callback prior to the callbacks for a subcommand if they do not also have the &lt;code&gt;immediate_callback&lt;/code&gt; flag set. It is preferable to use the &lt;code&gt;parse_complete_callback&lt;/code&gt; or &lt;code&gt;final_callback&lt;/code&gt; directly instead of the &lt;code&gt;callback&lt;/code&gt; and &lt;code&gt;immediate_callback&lt;/code&gt; if one wishes to control the ordering and timing of callback. Though &lt;code&gt;immediate_callback&lt;/code&gt; can be used to swap them if that is needed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.pre_parse_callback(void(std::size_t) function)&lt;/code&gt;: Set a callback that executes after the first argument of an application is processed. See &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#callbacks&#34;&gt;Subcommand callbacks&lt;/a&gt; for some additional details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.allow_extras()&lt;/code&gt;: Do not throw an error if extra arguments are left over.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.positionals_at_end()&lt;/code&gt;: Specify that positional arguments occur as the last arguments and throw an error if an unexpected positional is encountered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.prefix_command()&lt;/code&gt;: Like &lt;code&gt;allow_extras&lt;/code&gt;, but stop immediately on the first unrecognized item. It is ideal for allowing your app or subcommand to be a &#34;prefix&#34; to calling another app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.footer(message)&lt;/code&gt;: Set text to appear at the bottom of the help string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.footer(std::string())&lt;/code&gt;: Set a callback to generate a string that will appear at the end of the help string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.set_help_flag(name, message)&lt;/code&gt;: Set the help flag name and message, returns a pointer to the created option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.set_version_flag(name, versionString or callback, help_message)&lt;/code&gt;: Set the version flag name and version string or callback and optional help message, returns a pointer to the created option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.set_help_all_flag(name, message)&lt;/code&gt;: Set the help all flag name and message, returns a pointer to the created option. Expands subcommands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.failure_message(func)&lt;/code&gt;: Set the failure message function. Two provided: &lt;code&gt;CLI::FailureMessage::help&lt;/code&gt; and &lt;code&gt;CLI::FailureMessage::simple&lt;/code&gt; (the default).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.group(name)&lt;/code&gt;: Set a group name, defaults to &lt;code&gt;&#34;Subcommands&#34;&lt;/code&gt;. Setting &lt;code&gt;&#34;&#34;&lt;/code&gt; will be hide the subcommand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[option_name]&lt;/code&gt;: retrieve a const pointer to an option given by &lt;code&gt;option_name&lt;/code&gt; for Example &lt;code&gt;app[&#34;--flag1&#34;]&lt;/code&gt; will get a pointer to the option for the &#34;--flag1&#34; value, &lt;code&gt;app[&#34;--flag1&#34;]-&amp;gt;as&amp;lt;bool&amp;gt;()&lt;/code&gt; will get the results of the command line for a flag. The operation will throw an exception if the option name is not valid.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: if you have a fixed number of required positional options, that will match before subcommand names. &lt;code&gt;{}&lt;/code&gt; is an empty filter function, and any positional argument will match before repeated subcommand names.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Callbacks&lt;/h4&gt; &#xA;&lt;p&gt;A subcommand has three optional callbacks that are executed at different stages of processing. The &lt;code&gt;preparse_callback&lt;/code&gt; is executed once after the first argument of a subcommand or application is processed and gives an argument for the number of remaining arguments to process. For the main app the first argument is considered the program name, for subcommands the first argument is the subcommand name. For Option groups and nameless subcommands the first argument is after the first argument or subcommand is processed from that group. The second callback is executed after parsing. This is known as the &lt;code&gt;parse_complete_callback&lt;/code&gt;. For subcommands this is executed immediately after parsing and can be executed multiple times if a subcommand is called multiple times. On the main app this callback is executed after all the &lt;code&gt;parse_complete_callback&lt;/code&gt;s for the subcommands are executed but prior to any &lt;code&gt;final_callback&lt;/code&gt; calls in the subcommand or option groups. If the main app or subcommand has a config file, no data from the config file will be reflected in &lt;code&gt;parse_complete_callback&lt;/code&gt; on named subcommands. For &lt;code&gt;option_group&lt;/code&gt;s the &lt;code&gt;parse_complete_callback&lt;/code&gt; is executed prior to the &lt;code&gt;parse_complete_callback&lt;/code&gt; on the main app but after the &lt;code&gt;config_file&lt;/code&gt; is loaded (if specified). The &lt;code&gt;final_callback&lt;/code&gt; is executed after all processing is complete. After the &lt;code&gt;parse_complete_callback&lt;/code&gt; is executed on the main app, the used subcommand &lt;code&gt;final_callback&lt;/code&gt; are executed followed by the &#34;final callback&#34; for option groups. The last thing to execute is the &lt;code&gt;final_callback&lt;/code&gt; for the &lt;code&gt;main_app&lt;/code&gt;. For example say an application was set up like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;app.parse_complete_callback(ac1);&#xA;app.final_callback(ac2);&#xA;auto sub1=app.add_subcommand(&#34;sub1&#34;)-&amp;gt;parse_complete_callback(c1)-&amp;gt;preparse_callback(pc1);&#xA;auto sub2=app.add_subcommand(&#34;sub2&#34;)-&amp;gt;final_callback(c2)-&amp;gt;preparse_callback(pc2);&#xA;app.preparse_callback( pa);&#xA;&#xA;... A bunch of other options&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then the command line is given as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;program --opt1 opt1_val  sub1 --sub1opt --sub1optb val sub2 --sub2opt sub1 --sub1opt2 sub2 --sub2opt2 val&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pa&lt;/code&gt; will be called prior to parsing any values with an argument of 13.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pc1&lt;/code&gt; will be called immediately after processing the &lt;code&gt;sub1&lt;/code&gt; command with a value of 10.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c1&lt;/code&gt; will be called when the &lt;code&gt;sub2&lt;/code&gt; command is encountered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pc2&lt;/code&gt; will be called with value of 6 after the &lt;code&gt;sub2&lt;/code&gt; command is encountered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c1&lt;/code&gt; will be called again after the second &lt;code&gt;sub2&lt;/code&gt; command is encountered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ac1&lt;/code&gt; will be called after processing of all arguments&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c2&lt;/code&gt; will be called once after processing all arguments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ac2&lt;/code&gt; will be called last after completing all lower level callbacks have been executed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A subcommand is considered terminated when one of the following conditions are met.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;There are no more arguments to process&lt;/li&gt; &#xA; &lt;li&gt;Another subcommand is encountered that would not fit in an optional slot of the subcommand&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;positional_mark&lt;/code&gt; (&lt;code&gt;--&lt;/code&gt;) is encountered and there are no available positional slots in the subcommand.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;subcommand_terminator&lt;/code&gt; mark (&lt;code&gt;++&lt;/code&gt;) is encountered&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Prior to executed a &lt;code&gt;parse_complete_callback&lt;/code&gt; all contained options are processed before the callback is triggered. If a subcommand with a &lt;code&gt;parse_complete_callback&lt;/code&gt; is called again, then the contained options are reset, and can be triggered again.&lt;/p&gt; &#xA;&lt;h4&gt;Option groups&lt;/h4&gt; &#xA;&lt;p&gt;The subcommand method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;.add_option_group(name,description)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will create an option group, and return a pointer to it. The argument for &lt;code&gt;description&lt;/code&gt; is optional and can be omitted. An option group allows creation of a collection of options, similar to the groups function on options, but with additional controls and requirements. They allow specific sets of options to be composed and controlled as a collective. For an example see &lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/ranges.cpp&#34;&gt;range example&lt;/a&gt;. Option groups are a specialization of an App so all &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#subcommand-options&#34;&gt;functions&lt;/a&gt; that work with an App or subcommand also work on option groups. Options can be created as part of an option group using the add functions just like a subcommand, or previously created options can be added through. The name given in an option group must not contain newlines or null characters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;ogroup-&amp;gt;add_option(option_pointer);&#xA;ogroup-&amp;gt;add_options(option_pointer);&#xA;ogroup-&amp;gt;add_options(option1,option2,option3,...);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The option pointers used in this function must be options defined in the parent application of the option group otherwise an error will be generated. Subcommands can also be added via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;ogroup-&amp;gt;add_subcommand(subcom_pointer);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This results in the subcommand being moved from its parent into the option group.&lt;/p&gt; &#xA;&lt;p&gt;Options in an option group are searched for a command line match after any options in the main app, so any positionals in the main app would be matched first. So care must be taken to make sure of the order when using positional arguments and option groups. Option groups work well with &lt;code&gt;excludes&lt;/code&gt; and &lt;code&gt;require_options&lt;/code&gt; methods, as an application will treat an option group as a single option for the purpose of counting and requirements, and an option group will be considered used if any of the options or subcommands contained in it are used. Option groups allow specifying requirements such as requiring 1 of 3 options in one group and 1 of 3 options in a different group. Option groups can contain other groups as well. Disabling an option group will turn off all options within the group.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;CLI::TriggerOn&lt;/code&gt; and &lt;code&gt;CLI::TriggerOff&lt;/code&gt; methods are helper functions to allow the use of options/subcommands from one group to trigger another group on or off.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;CLI::TriggerOn(group1_pointer, triggered_group);&#xA;CLI::TriggerOff(group2_pointer, disabled_group);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These functions make use of &lt;code&gt;preparse_callback&lt;/code&gt;, &lt;code&gt;enabled_by_default()&lt;/code&gt; and &lt;code&gt;disabled_by_default&lt;/code&gt;. The triggered group may be a vector of group pointers. These methods should only be used once per group and will override any previous use of the underlying functions. More complex arrangements can be accomplished using similar methodology with a custom &lt;code&gt;preparse_callback&lt;/code&gt; function that does more.&lt;/p&gt; &#xA;&lt;p&gt;Additional helper functions &lt;code&gt;deprecate_option&lt;/code&gt; and &lt;code&gt;retire_option&lt;/code&gt; are available to deprecate or retire options&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;CLI::deprecate_option(option *, replacement_name=&#34;&#34;);&#xA;CLI::deprecate_option(App,option_name,replacement_name=&#34;&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will specify that the option is deprecated which will display a message in the help and a warning on first usage. Deprecated options function normally but will add a message in the help and display a warning on first use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;CLI::retire_option(App,option *);&#xA;CLI::retire_option(App,option_name);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will create an option that does nothing by default and will display a warning on first usage that the option is retired and has no effect. If the option exists it is replaces with a dummy option that takes the same arguments.&lt;/p&gt; &#xA;&lt;p&gt;If an empty string is passed the option group name the entire group will be hidden in the help results. For example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto hidden_group=app.add_option_group(&#34;&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will create a group such that no options in that group are displayed in the help string.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;app.set_config(option_name=&#34;&#34;,&#xA;               default_file_name=&#34;&#34;,&#xA;               help_string=&#34;Read an ini file&#34;,&#xA;               required=false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If this is called with no arguments, it will remove the configuration file option (like &lt;code&gt;set_help_flag&lt;/code&gt;). Setting a configuration option is special. If it is present, it will be read along with the normal command line arguments. The file will be read if it exists, and does not throw an error unless &lt;code&gt;required&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Configuration files are in &lt;a href=&#34;https://toml.io&#34;&gt;TOML&lt;/a&gt; format by default, though the default reader can also accept files in INI format as well. It should be noted that CLI11 does not contain a full TOML parser but can read strings from most TOML file and run them through the CLI11 parser. Other formats can be added by an adept user, some variations are available through customization points in the default formatter. An example of a TOML file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Comments are supported, using a #&#xA;# The default section is [default], case insensitive&#xA;&#xA;value = 1&#xA;str = &#34;A string&#34;&#xA;vector = [1,2,3]&#xA;str_vector = [&#34;one&#34;,&#34;two&#34;,&#34;and three&#34;]&#xA;&#xA;# Sections map to subcommands&#xA;[subcommand]&#xA;in_subcommand = Wow&#xA;sub.subcommand = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or equivalently in INI format&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;; Comments are supported, using a ;&#xA;; The default section is [default], case insensitive&#xA;&#xA;value = 1&#xA;str = &#34;A string&#34;&#xA;vector = 1 2 3&#xA;str_vector = &#34;one&#34; &#34;two&#34; &#34;and three&#34;&#xA;&#xA;; Sections map to subcommands&#xA;[subcommand]&#xA;in_subcommand = Wow&#xA;sub.subcommand = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Spaces before and after the name and argument are ignored. Multiple arguments are separated by spaces. One set of quotes will be removed, preserving spaces (the same way the command line works). Boolean options can be &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;enable&lt;/code&gt;; or &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;off&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;disable&lt;/code&gt; (case insensitive). Sections (and &lt;code&gt;.&lt;/code&gt; separated names) are treated as subcommands (note: this does not necessarily mean that subcommand was passed, it just sets the &#34;defaults&#34;). You cannot set positional-only arguments. Subcommands can be triggered from configuration files if the &lt;code&gt;configurable&lt;/code&gt; flag was set on the subcommand. Then the use of &lt;code&gt;[subcommand]&lt;/code&gt; notation will trigger a subcommand and cause it to act as if it were on the command line.&lt;/p&gt; &#xA;&lt;p&gt;To print a configuration file from the passed arguments, use &lt;code&gt;.config_to_str(default_also=false, write_description=false)&lt;/code&gt;, where &lt;code&gt;default_also&lt;/code&gt; will also show any defaulted arguments, and &lt;code&gt;write_description&lt;/code&gt; will include the app and option descriptions. See &lt;a href=&#34;https://cliutils.github.io/CLI11/book/chapters/config.html&#34;&gt;Config files&lt;/a&gt; for some additional details and customization points.&lt;/p&gt; &#xA;&lt;p&gt;If it is desired that multiple configuration be allowed. Use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;app.set_config(&#34;--config&#34;)-&amp;gt;expected(1, X);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where X is some positive number and will allow up to &lt;code&gt;X&lt;/code&gt; configuration files to be specified by separate &lt;code&gt;--config&lt;/code&gt; arguments. Value strings with quote characters in it will be printed with a single quote. All other arguments will use double quote. Empty strings will use a double quoted argument. Numerical or boolean values are not quoted.&lt;/p&gt; &#xA;&lt;p&gt;For options or flags which allow 0 arguments to be passed using an empty string in the config file, &lt;code&gt;{}&lt;/code&gt;, or &lt;code&gt;[]&lt;/code&gt; will convert the result to the default value specified via &lt;code&gt;default_str&lt;/code&gt; or &lt;code&gt;default_val&lt;/code&gt; on the option 🆕. If no user specified default is given the result is an empty string or the converted value of an empty string.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Transforms and checks can be used with the option pointer returned from set_config like any other option to validate the input if needed. It can also be used with the built in transform &lt;code&gt;CLI::FileOnDefaultPath&lt;/code&gt; to look in a default path as well as the current one. For example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;app.set_config(&#34;--config&#34;)-&amp;gt;transform(CLI::FileOnDefaultPath(&#34;/to/default/path/&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#transforming-validators&#34;&gt;Transforming Validators&lt;/a&gt; for additional details on this validator. Multiple transforms or validators can be used either by multiple calls or using &lt;code&gt;|&lt;/code&gt; operations with the transform.&lt;/p&gt; &#xA;&lt;h3&gt;Inheriting defaults&lt;/h3&gt; &#xA;&lt;p&gt;Many of the defaults for subcommands and even options are inherited from their creators. The inherited default values for subcommands are &lt;code&gt;allow_extras&lt;/code&gt;, &lt;code&gt;prefix_command&lt;/code&gt;, &lt;code&gt;ignore_case&lt;/code&gt;, &lt;code&gt;ignore_underscore&lt;/code&gt;, &lt;code&gt;fallthrough&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;,&lt;code&gt;immediate_callback&lt;/code&gt; and maximum number of required subcommands. The help flag existence, name, and description are inherited, as well.&lt;/p&gt; &#xA;&lt;p&gt;Options have defaults for &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;multi_option_policy&lt;/code&gt;, &lt;code&gt;ignore_case&lt;/code&gt;, &lt;code&gt;ignore_underscore&lt;/code&gt;, &lt;code&gt;delimiter&lt;/code&gt;, and &lt;code&gt;disable_flag_override&lt;/code&gt;. To set these defaults, you should set the &lt;code&gt;option_defaults()&lt;/code&gt; object, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;app.option_defaults()-&amp;gt;required();&#xA;// All future options will be required&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default settings for options are inherited to subcommands, as well.&lt;/p&gt; &#xA;&lt;h3&gt;Formatting&lt;/h3&gt; &#xA;&lt;p&gt;The job of formatting help printouts is delegated to a formatter callable object on Apps and Options. You are free to replace either formatter by calling &lt;code&gt;formatter(fmt)&lt;/code&gt; on an &lt;code&gt;App&lt;/code&gt;, where fmt is any copyable callable with the correct signature. CLI11 comes with a default App formatter functional, &lt;code&gt;Formatter&lt;/code&gt;. It is customizable; you can set &lt;code&gt;label(key, value)&lt;/code&gt; to replace the default labels like &lt;code&gt;REQUIRED&lt;/code&gt;, and &lt;code&gt;column_width(n)&lt;/code&gt; to set the width of the columns before you add the functional to the app or option. You can also override almost any stage of the formatting process in a subclass of either formatter. If you want to make a new formatter from scratch, you can do that too; you just need to implement the correct signature. The first argument is a const pointer to the in question. The formatter will get a &lt;code&gt;std::string&lt;/code&gt; usage name as the second option, and a &lt;code&gt;AppFormatMode&lt;/code&gt; mode for the final option. It should return a &lt;code&gt;std::string&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;AppFormatMode&lt;/code&gt; can be &lt;code&gt;Normal&lt;/code&gt;, &lt;code&gt;All&lt;/code&gt;, or &lt;code&gt;Sub&lt;/code&gt;, and it indicates the situation the help was called in. &lt;code&gt;Sub&lt;/code&gt; is optional, but the default formatter uses it to make sure expanded subcommands are called with their own formatter since you can&#39;t access anything but the call operator once a formatter has been set.&lt;/p&gt; &#xA;&lt;h3&gt;Subclassing&lt;/h3&gt; &#xA;&lt;p&gt;The App class was designed allow toolkits to subclass it, to provide preset default options (see above) and setup/teardown code. Subcommands remain an unsubclassed &lt;code&gt;App&lt;/code&gt;, since those are not expected to need setup and teardown. The default &lt;code&gt;App&lt;/code&gt; only adds a help flag, &lt;code&gt;-h,--help&lt;/code&gt;, than can removed/replaced using &lt;code&gt;.set_help_flag(name, help_string)&lt;/code&gt;. You can also set a help-all flag with &lt;code&gt;.set_help_all_flag(name, help_string)&lt;/code&gt;; this will expand the subcommands (one level only). You can remove options if you have pointers to them using &lt;code&gt;.remove_option(opt)&lt;/code&gt;. You can add a &lt;code&gt;pre_callback&lt;/code&gt; override to customize the after parse but before run behavior, while still giving the user freedom to &lt;code&gt;callback&lt;/code&gt; on the main app.&lt;/p&gt; &#xA;&lt;p&gt;The most important parse function is &lt;code&gt;parse(std::vector&amp;lt;std::string&amp;gt;)&lt;/code&gt;, which takes a reversed list of arguments (so that &lt;code&gt;pop_back&lt;/code&gt; processes the args in the correct order). &lt;code&gt;get_help_ptr&lt;/code&gt; and &lt;code&gt;get_config_ptr&lt;/code&gt; give you access to the help/config option pointers. The standard &lt;code&gt;parse&lt;/code&gt; manually sets the name from the first argument, so it should not be in this vector. You can also use &lt;code&gt;parse(string, bool)&lt;/code&gt; to split up and parse a single string; the optional boolean should be set to true if you are including the program name in the string, and false otherwise. The program name can contain spaces if it is an existing file, otherwise can be enclosed in quotes(single quote, double quote or backtick). Embedded quote characters can be escaped with &lt;code&gt;\&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, in a related note, the &lt;code&gt;App&lt;/code&gt; you get a pointer to is stored in the parent &lt;code&gt;App&lt;/code&gt; in a &lt;code&gt;shared_ptr&lt;/code&gt;s (similar to &lt;code&gt;Option&lt;/code&gt;s) and are deleted when the main &lt;code&gt;App&lt;/code&gt; goes out of scope unless the object has another owner.&lt;/p&gt; &#xA;&lt;h3&gt;How it works&lt;/h3&gt; &#xA;&lt;p&gt;Every &lt;code&gt;add_&lt;/code&gt; option you have seen so far depends on one method that takes a lambda function. Each of these methods is just making a different lambda function with capture to populate the option. The function has full access to the vector of strings, so it knows how many times an option was passed or how many arguments it received. The lambda returns &lt;code&gt;true&lt;/code&gt; if it could validate the option strings, and &lt;code&gt;false&lt;/code&gt; if it failed.&lt;/p&gt; &#xA;&lt;p&gt;Other values can be added as long as they support &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; (and defaults can be printed if they support &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;). To add a new type, for example, provide a custom &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; with an &lt;code&gt;istream&lt;/code&gt; (inside the CLI namespace is fine if you don&#39;t want to interfere with an existing &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you wanted to extend this to support a completely new type, use a lambda or add a specialization of the &lt;code&gt;lexical_cast&lt;/code&gt; function template in the namespace of the type you need to convert to. Some examples of some new parsers for &lt;code&gt;complex&amp;lt;double&amp;gt;&lt;/code&gt; that support all of the features of a standard &lt;code&gt;add_options&lt;/code&gt; call are in &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/tests/NewParseTest.cpp&#34;&gt;one of the tests&lt;/a&gt;. A simpler example is shown below:&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;app.add_option(&#34;--fancy-count&#34;, [](std::vector&amp;lt;std::string&amp;gt; val){&#xA;    std::cout &amp;lt;&amp;lt; &#34;This option was given &#34; &amp;lt;&amp;lt; val.size() &amp;lt;&amp;lt; &#34; times.&#34; &amp;lt;&amp;lt; std::endl;&#xA;    return true;&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Utilities&lt;/h3&gt; &#xA;&lt;p&gt;There are a few other utilities that are often useful in CLI programming. These are in separate headers, and do not appear in &lt;code&gt;CLI11.hpp&lt;/code&gt;, but are completely independent and can be used as needed. The &lt;code&gt;Timer&lt;/code&gt;/&lt;code&gt;AutoTimer&lt;/code&gt; class allows you to easily time a block of code, with custom print output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;{&#xA;CLI::AutoTimer timer {&#34;My Long Process&#34;, CLI::Timer::Big};&#xA;some_long_running_process();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a timer with a title (default: &lt;code&gt;Timer&lt;/code&gt;), and will customize the output using the predefined &lt;code&gt;Big&lt;/code&gt; output (default: &lt;code&gt;Simple&lt;/code&gt;). Because it is an &lt;code&gt;AutoTimer&lt;/code&gt;, it will print out the time elapsed when the timer is destroyed at the end of the block. If you use &lt;code&gt;Timer&lt;/code&gt; instead, you can use &lt;code&gt;to_string&lt;/code&gt; or &lt;code&gt;std::cout &amp;lt;&amp;lt; timer &amp;lt;&amp;lt; std::endl;&lt;/code&gt; to print the time. The print function can be any function that takes two strings, the title and the time, and returns a formatted string for printing.&lt;/p&gt; &#xA;&lt;h3&gt;Other libraries&lt;/h3&gt; &#xA;&lt;p&gt;If you use the excellent &lt;a href=&#34;https://github.com/agauniyal/rang&#34;&gt;Rang&lt;/a&gt; library to add color to your terminal in a safe, multi-platform way, you can combine it with CLI11 nicely:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::atexit([](){std::cout &amp;lt;&amp;lt; rang::style::reset;});&#xA;try {&#xA;    app.parse(argc, argv);&#xA;} catch (const CLI::ParseError &amp;amp;e) {&#xA;    std::cout &amp;lt;&amp;lt; (e.get_exit_code()==0 ? rang::fg::blue : rang::fg::red);&#xA;    return app.exit(e);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will print help in blue, errors in red, and will reset before returning the terminal to the user.&lt;/p&gt; &#xA;&lt;p&gt;If you are on a Unix-like system, and you&#39;d like to handle control-c and color, you can add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt; #include &amp;lt;csignal&amp;gt;&#xA; void signal_handler(int s) {&#xA;     std::cout &amp;lt;&amp;lt; std::endl &amp;lt;&amp;lt; rang::style::reset &amp;lt;&amp;lt; rang::fg::red &amp;lt;&amp;lt; rang::fg::bold;&#xA;     std::cout &amp;lt;&amp;lt; &#34;Control-C detected, exiting...&#34; &amp;lt;&amp;lt; rang::style::reset &amp;lt;&amp;lt; std::endl;&#xA;     std::exit(1); // will call the correct exit func, no unwinding of the stack though&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And, in your main function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;     // Nice Control-C&#xA;     struct sigaction sigIntHandler;&#xA;     sigIntHandler.sa_handler = signal_handler;&#xA;     sigemptyset(&amp;amp;sigIntHandler.sa_mask);&#xA;     sigIntHandler.sa_flags = 0;&#xA;     sigaction(SIGINT, &amp;amp;sigIntHandler, nullptr);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;The API is &lt;a href=&#34;https://CLIUtils.github.io/CLI11/index.html&#34;&gt;documented here&lt;/a&gt;. Also see the &lt;a href=&#34;https://cliutils.github.io/CLI11/book/&#34;&gt;CLI11 tutorial GitBook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Several short examples of different features are included in the repository. A brief description of each is included here&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/callback_passthrough.cpp&#34;&gt;callback_passthrough&lt;/a&gt;: Example of directly passing remaining arguments through to a callback function which generates a CLI11 application based on existing arguments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/custom_parse.cpp&#34;&gt;custom_parse&lt;/a&gt;: Based on &lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues/566&#34;&gt;Issue #566&lt;/a&gt;, example of custom parser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/digit_args.cpp&#34;&gt;digit_args&lt;/a&gt;: Based on &lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues/123&#34;&gt;Issue #123&lt;/a&gt;, uses digit flags to pass a value&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/enum.cpp&#34;&gt;enum&lt;/a&gt;: Using enumerations in an option, and the use of &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#transforming-validators&#34;&gt;CheckedTransformer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/enum_ostream.cpp&#34;&gt;enum_ostream&lt;/a&gt;: In addition to the contents of example enum.cpp, this example shows how a custom ostream operator overrides CLI11&#39;s enum streaming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/formatter.cpp&#34;&gt;formatter&lt;/a&gt;: Illustrating usage of a custom formatter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/groups.cpp&#34;&gt;groups&lt;/a&gt;: Example using groups of options for help grouping and a the timer helper class&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/inter_argument_order.cpp&#34;&gt;inter_argument_order&lt;/a&gt;: An app to practice mixing unlimited arguments, but still recover the original order.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/json.cpp&#34;&gt;json&lt;/a&gt;: Using JSON as a config file parser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/modhelp.cpp&#34;&gt;modhelp&lt;/a&gt;: How to modify the help flag to do something other than default&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/nested.cpp&#34;&gt;nested&lt;/a&gt;: Nested subcommands&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/option_groups.cpp&#34;&gt;option_groups&lt;/a&gt;: Illustrating the use of option groups and a required number of options. Based on &lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues/88&#34;&gt;Issue #88&lt;/a&gt; to set interacting groups of options&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/positional_arity.cpp&#34;&gt;positional_arity&lt;/a&gt;: Illustrating use of &lt;code&gt;preparse_callback&lt;/code&gt; to handle situations where the number of arguments can determine which should get parsed, Based on &lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues/166&#34;&gt;Issue #166&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/positional_validation.cpp&#34;&gt;positional_validation&lt;/a&gt;: Example of how positional arguments are validated using the &lt;code&gt;validate_positional&lt;/code&gt; flag, also based on &lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues/166&#34;&gt;Issue #166&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/prefix_command.cpp&#34;&gt;prefix_command&lt;/a&gt;: Illustrating use of the &lt;code&gt;prefix_command&lt;/code&gt; flag.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/ranges.cpp&#34;&gt;ranges&lt;/a&gt;: App to demonstrate exclusionary option groups based on &lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues/88&#34;&gt;Issue #88&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/shapes.cpp&#34;&gt;shapes&lt;/a&gt;: Illustrating how to set up repeated subcommands Based on &lt;a href=&#34;https://gitter.im/CLI11gitter/Lobby?at=5c7af6b965ffa019ea788cd5&#34;&gt;gitter discussion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/simple.cpp&#34;&gt;simple&lt;/a&gt;: A simple example of how to set up a CLI11 Application with different flags and options&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/subcom_help.cpp&#34;&gt;subcom_help&lt;/a&gt;: Configuring help for subcommands&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/subcom_partitioned.cpp&#34;&gt;subcom_partitioned&lt;/a&gt;: Example with a timer and subcommands generated separately and added to the main app later.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/subcommands.cpp&#34;&gt;subcommands&lt;/a&gt;: Short example of subcommands&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/raw/main/examples/validators.cpp&#34;&gt;validators&lt;/a&gt;: Example illustrating use of validators&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;To contribute, open an &lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues&#34;&gt;issue&lt;/a&gt; or &lt;a href=&#34;https://github.com/CLIUtils/CLI11/pulls&#34;&gt;pull request&lt;/a&gt; on GitHub, or ask a question on &lt;a href=&#34;https://gitter.im/CLI11gitter/Lobby&#34;&gt;gitter&lt;/a&gt;. There is also a short note to contributors &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/.github/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;. This readme roughly follows the &lt;a href=&#34;https://github.com/RichardLitt/standard-readme&#34;&gt;Standard Readme Style&lt;/a&gt; and includes a mention of almost every feature of the library. More complex features are documented in more detail in the &lt;a href=&#34;https://cliutils.github.io/CLI11/book/&#34;&gt;CLI11 tutorial GitBook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project was created by &lt;a href=&#34;https://github.com/henryiii&#34;&gt;Henry Schreiner&lt;/a&gt; and major features were added by &lt;a href=&#34;https://github.com/phlptp&#34;&gt;Philip Top&lt;/a&gt;. Special thanks to all the contributors (&lt;a href=&#34;https://allcontributors.org/docs/en/emoji-key&#34;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://iscinumpy.gitlab.io&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/4616906?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Henry Schreiner&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues?q=author%3Ahenryiii&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=henryiii&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=henryiii&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/phlptp&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/20667153?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Philip Top&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues?q=author%3Aphlptp&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=phlptp&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=phlptp&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.linkedin.com/in/cbachhuber/&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/27212661?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Christoph Bachhuber&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#example-cbachhuber&#34; title=&#34;Examples&#34;&gt;💡&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=cbachhuber&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://lambdafu.net/&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/1138455?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Marcus Brinkmann&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues?q=author%3Alambdafu&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=lambdafu&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/SkyToGround&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/58835?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jonas Nilsson&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues?q=author%3ASkyToGround&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=SkyToGround&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/dvj&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/77217?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Doug Johnston&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues?q=author%3Advj&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=dvj&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://lucas-czech.de&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/4741887?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Lucas Czech&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues?q=author%3Alczech&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=lczech&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rafiw&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/3034707?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rafi Wiener&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues?q=author%3Arafiw&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=rafiw&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/mensinda&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/3407462?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Daniel Mensinger&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-mensinda&#34; title=&#34;Packaging/porting to new platform&#34;&gt;📦&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jbriales&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/6850478?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jesus Briales&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=jbriales&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues?q=author%3Ajbriales&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://seanfisk.com/&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/410322?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sean Fisk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues?q=author%3Aseanfisk&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=seanfisk&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/fpeng1985&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/87981?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;fpeng1985&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=fpeng1985&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/almikhayl&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/6747040?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;almikhayl&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=almikhayl&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-almikhayl&#34; title=&#34;Packaging/porting to new platform&#34;&gt;📦&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/andrew-hardin&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/16496326?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Andrew Hardin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=andrew-hardin&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/SX91&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/754754?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Anton&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=SX91&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/helmesjo&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/2501070?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Fred Helmesjö&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues?q=author%3Ahelmesjo&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=helmesjo&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/skannan89&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/11918764?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kannan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues?q=author%3Askannan89&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=skannan89&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://himvis.com&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/465279?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Khem Raj&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=kraj&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.mogigoma.com/&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/130862?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Mak Kolybabi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=mogigoma&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://msoeken.github.io&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/1998245?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Mathias Soeken&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=msoeken&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/nathanhourt&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/271977?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nathan Hourt&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues?q=author%3Anathanhourt&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=nathanhourt&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/pleroux0&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/39619854?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Paul le Roux&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=pleroux0&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-pleroux0&#34; title=&#34;Packaging/porting to new platform&#34;&gt;📦&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/chfast&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/573380?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Paweł Bylica&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-chfast&#34; title=&#34;Packaging/porting to new platform&#34;&gt;📦&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/peterazmanov&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/15322318?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Peter Azmanov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=peterazmanov&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/delpinux&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/35096584?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Stéphane Del Pino&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=delpinux&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/metopa&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/3974178?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Viacheslav Kroilov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=metopa&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://cs.odu.edu/~ctsolakis&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/6725596?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;christos&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=ChristosT&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/deining&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/18169566?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;deining&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=deining&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/elszon&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/2971495?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;elszon&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=elszon&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/ncihnegn&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/12021721?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;ncihnegn&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=ncihnegn&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/nurelin&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/5276274?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;nurelin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=nurelin&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/ryan4729&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/40183301?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;ryan4729&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=ryan4729&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://izzys.casa&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/63051?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Isabella Muerte&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-slurps-mad-rips&#34; title=&#34;Packaging/porting to new platform&#34;&gt;📦&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/KOLANICH&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/240344?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;KOLANICH&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-KOLANICH&#34; title=&#34;Packaging/porting to new platform&#34;&gt;📦&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jgerityneurala&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/57360646?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;James Gerity&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=jgerityneurala&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jsoref&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/2119212?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Josh Soref&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#tool-jsoref&#34; title=&#34;Tools&#34;&gt;🔧&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/geir-t&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/35292136?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;geir-t&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-geir-t&#34; title=&#34;Packaging/porting to new platform&#34;&gt;📦&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ondrejcertik.com/&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/20568?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ondřej Čertík&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/issues?q=author%3Acertik&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://sam.hocevar.net/&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/245089?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sam Hocevar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=samhocevar&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://www.ratml.org/&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/1845039?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ryan Curtin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=rcurtin&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://mbh.sh&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/20403931?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Michael Hall&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=mbhall88&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/ferdymercury&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/10653970?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;ferdymercury&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=ferdymercury&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jakoblover&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/14160441?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jakob Lover&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=jakoblover&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/ZeeD26&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/2487468?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dominik Steinberger&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=ZeeD26&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/dfleury2&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/4805384?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;D. Fleury&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=dfleury2&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/dbarowy&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/573142?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dan Barowy&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=dbarowy&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/paddy-hack&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/6804372?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Olaf Meeuwissen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=paddy-hack&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/dryleev&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/83670813?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;dryleev&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=dryleev&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/AnticliMaxtic&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/43995389?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Max&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=AnticliMaxtic&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://profiles.sussex.ac.uk/p281168-alex-dewar/publications&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/23149834?v=4&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alex Dewar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11/commits?author=alexdewar&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-enable --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://github.com/all-contributors/all-contributors&#34;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;As of version 1.0, this library is available under a 3-Clause BSD license. See the &lt;a href=&#34;https://raw.githubusercontent.com/CLIUtils/CLI11/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;p&gt;CLI11 was developed at the &lt;a href=&#34;http://www.uc.edu&#34;&gt;University of Cincinnati&lt;/a&gt; to support of the &lt;a href=&#34;https://GooFit.github.io&#34;&gt;GooFit&lt;/a&gt; library under &lt;a href=&#34;https://nsf.gov/awardsearch/showAward?AWD_ID=1414736&#34;&gt;NSF Award 1414736&lt;/a&gt;. Version 0.9 was featured in a &lt;a href=&#34;http://diana-hep.org&#34;&gt;DIANA/HEP&lt;/a&gt; meeting at CERN (&lt;a href=&#34;https://indico.cern.ch/event/619465/contributions/2507949/attachments/1448567/2232649/20170424-diana-2.pdf&#34;&gt;see the slides&lt;/a&gt;). Please give it a try! Feedback is always welcome.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>urho3d/Urho3D</title>
    <updated>2022-11-25T01:30:32Z</updated>
    <id>tag:github.com,2022-11-25:/urho3d/Urho3D</id>
    <link href="https://github.com/urho3d/Urho3D" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform 2D and 3D game engine&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/urho3d/Urho3D/master/bin/Data/Textures/LogoLarge.png&#34; alt=&#34;Urho3D logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Urho3D&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;This repository is now focused on Russian-speaking community only. If you were looking for original version of Urho3D (international), check out:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/urho3d/Urho3D/releases/tag/1.9.0&#34;&gt;Urho3D 1.9&lt;/a&gt;: Last English version of Urho3D, unmaintained.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/rbfx/rbfx&#34;&gt;Rebel Fork&lt;/a&gt;: Reimagining of Urho3D with significant API changes, in active development.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/u3d-community/U3D&#34;&gt;U3D Community&lt;/a&gt;: Urho3D 1.8, in maintenance mode.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sincerely yours, &lt;a href=&#34;https://github.com/eugeneko&#34;&gt;Eugene Kozlov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Игровой движок, ориентированный на русскоязычное сообщество.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/urho3d/Urho3D/actions?query=workflow%3ACI%2FCD&#34;&gt;&lt;img src=&#34;https://github.com/urho3d/Urho3D/workflows/CI/CD/badge.svg?sanitize=true&#34; alt=&#34;CI/CD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/urho3d-urho3d&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/4954/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Urho3D&lt;/strong&gt; is a free lightweight, cross-platform 2D and 3D game engine implemented in C++ and released under the MIT license. Greatly inspired by OGRE and Horde3D.&lt;/p&gt; &#xA;&lt;p&gt;Main website: &lt;a href=&#34;https://urho3d.io/&#34;&gt;https://urho3d.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the MIT license, see &lt;a href=&#34;https://raw.githubusercontent.com/urho3d/Urho3D/master/licenses/urho3d/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Before making pull requests, please read the &lt;a href=&#34;https://urho3d.io/documentation/HEAD/_contribution_checklist.html&#34;&gt;Contribution checklist&lt;/a&gt; and &lt;a href=&#34;https://urho3d.io/documentation/HEAD/_coding_conventions.html&#34;&gt;Coding conventions&lt;/a&gt; pages from the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Urho3D is greatly inspired by OGRE (&lt;a href=&#34;http://www.ogre3d.org&#34;&gt;http://www.ogre3d.org&lt;/a&gt;) and Horde3D (&lt;a href=&#34;http://www.horde3d.org&#34;&gt;http://www.horde3d.org&lt;/a&gt;). Additional inspiration &amp;amp; research used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rectangle packing by Jukka Jylänki (clb) &lt;a href=&#34;http://clb.demon.fi/projects/rectangle-bin-packing&#34;&gt;http://clb.demon.fi/projects/rectangle-bin-packing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tangent generation from Terathon &lt;a href=&#34;http://www.terathon.com/code/tangent.html&#34;&gt;http://www.terathon.com/code/tangent.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fast, Minimum Storage Ray/Triangle Intersection by Möller &amp;amp; Trumbore &lt;a href=&#34;http://www.graphics.cornell.edu/pubs/1997/MT97.pdf&#34;&gt;http://www.graphics.cornell.edu/pubs/1997/MT97.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linear-Speed Vertex Cache Optimisation by Tom Forsyth &lt;a href=&#34;http://home.comcast.net/~tom_forsyth/papers/fast_vert_cache_opt.html&#34;&gt;http://home.comcast.net/~tom_forsyth/papers/fast_vert_cache_opt.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Software rasterization of triangles based on Chris Hecker&#39;s Perspective Texture Mapping series in the Game Developer magazine &lt;a href=&#34;http://chrishecker.com/Miscellaneous_Technical_Articles&#34;&gt;http://chrishecker.com/Miscellaneous_Technical_Articles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Networked Physics by Glenn Fiedler &lt;a href=&#34;http://gafferongames.com/game-physics/networked-physics/&#34;&gt;http://gafferongames.com/game-physics/networked-physics/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Euler Angle Formulas by David Eberly &lt;a href=&#34;https://www.geometrictools.com/Documentation/EulerAngles.pdf&#34;&gt;https://www.geometrictools.com/Documentation/EulerAngles.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Red Black Trees by Julienne Walker &lt;a href=&#34;http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_rbtree.aspx&#34;&gt;http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_rbtree.aspx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Comparison of several sorting algorithms by Juha Nieminen &lt;a href=&#34;http://warp.povusers.org/SortComparison/&#34;&gt;http://warp.povusers.org/SortComparison/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Urho3D uses the following third-party libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AngelScript 2.35.1 WIP (&lt;a href=&#34;http://www.angelcode.com/angelscript&#34;&gt;http://www.angelcode.com/angelscript&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Boost 1.64.0 (&lt;a href=&#34;http://www.boost.org&#34;&gt;http://www.boost.org&lt;/a&gt;) - only used for AngelScript generic bindings&lt;/li&gt; &#xA; &lt;li&gt;Box2D 2.4.1+ (&lt;a href=&#34;https://box2d.org&#34;&gt;https://box2d.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Bullet 3.06+ (&lt;a href=&#34;http://www.bulletphysics.org&#34;&gt;http://www.bulletphysics.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Civetweb 1.7 (&lt;a href=&#34;https://github.com/civetweb/civetweb&#34;&gt;https://github.com/civetweb/civetweb&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;FreeType 2.8 (&lt;a href=&#34;https://www.freetype.org&#34;&gt;https://www.freetype.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;GLEW 1.13.0 (&lt;a href=&#34;http://glew.sourceforge.net&#34;&gt;http://glew.sourceforge.net&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SLikeNet (&lt;a href=&#34;https://github.com/SLikeSoft/SLikeNet&#34;&gt;https://github.com/SLikeSoft/SLikeNet&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;libcpuid 0.4.0+ (&lt;a href=&#34;https://github.com/anrieff/libcpuid&#34;&gt;https://github.com/anrieff/libcpuid&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Lua 5.1 (&lt;a href=&#34;https://www.lua.org&#34;&gt;https://www.lua.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;LuaJIT 2.1.0+ (&lt;a href=&#34;http://www.luajit.org&#34;&gt;http://www.luajit.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;LZ4 1.7.5 (&lt;a href=&#34;https://github.com/lz4/lz4&#34;&gt;https://github.com/lz4/lz4&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Mustache 1.0 (&lt;a href=&#34;https://mustache.github.io&#34;&gt;https://mustache.github.io&lt;/a&gt;, &lt;a href=&#34;https://github.com/kainjow/Mustache&#34;&gt;https://github.com/kainjow/Mustache&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;nanodbc 2.12.4+ (&lt;a href=&#34;https://lexicalunit.github.io/nanodbc&#34;&gt;https://lexicalunit.github.io/nanodbc&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open Asset Import Library 4.1.0 (&lt;a href=&#34;http://assimp.sourceforge.net&#34;&gt;http://assimp.sourceforge.net&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;pugixml 1.12+ (&lt;a href=&#34;http://pugixml.org&#34;&gt;http://pugixml.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;RapidJSON 1.1.0+ (&lt;a href=&#34;https://github.com/Tencent/rapidjson&#34;&gt;https://github.com/Tencent/rapidjson&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Recast/Detour (&lt;a href=&#34;https://github.com/recastnavigation/recastnavigation&#34;&gt;https://github.com/recastnavigation/recastnavigation&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SDL 2.0.10+ (&lt;a href=&#34;https://www.libsdl.org&#34;&gt;https://www.libsdl.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SQLite 3.36.0 (&lt;a href=&#34;https://www.sqlite.org&#34;&gt;https://www.sqlite.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;StanHull (&lt;a href=&#34;https://codesuppository.blogspot.com/2006/03/john-ratcliffs-code-suppository-blog.html&#34;&gt;https://codesuppository.blogspot.com/2006/03/john-ratcliffs-code-suppository-blog.html&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;stb_image 2.18 (&lt;a href=&#34;https://nothings.org&#34;&gt;https://nothings.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;stb_image_write 1.08 (&lt;a href=&#34;https://nothings.org&#34;&gt;https://nothings.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;stb_rect_pack 0.11 (&lt;a href=&#34;https://nothings.org&#34;&gt;https://nothings.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;stb_vorbis 1.13b (&lt;a href=&#34;https://nothings.org&#34;&gt;https://nothings.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;tolua++ 1.0.93 (defunct - &lt;a href=&#34;http://www.codenix.com/~tolua&#34;&gt;http://www.codenix.com/~tolua&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;WebP (&lt;a href=&#34;https://chromium.googlesource.com/webm/libwebp&#34;&gt;https://chromium.googlesource.com/webm/libwebp&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ETCPACK (&lt;a href=&#34;https://github.com/Ericsson/ETCPACK&#34;&gt;https://github.com/Ericsson/ETCPACK&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Tracy 0.7.6 (&lt;a href=&#34;https://github.com/wolfpld/tracy&#34;&gt;https://github.com/wolfpld/tracy&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;DXT / PVRTC decompression code based on the Squish library and the Oolong Engine. Jack and mushroom models from the realXtend project. (&lt;a href=&#34;https://www.realxtend.org&#34;&gt;https://www.realxtend.org&lt;/a&gt;) Ninja model and terrain, water, smoke, flare and status bar textures from OGRE. BlueHighway font from Larabie Fonts. Anonymous Pro font by Mark Simonson. NinjaSnowWar sounds by Veli-Pekka Tätilä. PBR textures from Substance Share. (&lt;a href=&#34;https://share.allegorithmic.com&#34;&gt;https://share.allegorithmic.com&lt;/a&gt;) IBL textures from HDRLab&#39;s sIBL Archive. Dieselpunk Moto model by allexandr007. Mutant &amp;amp; Kachujin models from Mixamo. License / copyright information included with the assets as necessary. All other assets (including shaders) by Urho3D authors and licensed similarly as the engine itself.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Urho3D classes have been sparsely documented using Doxygen notation. To generate documentation into the &#34;Docs&#34; subdirectory, open the Doxyfile in the &#34;Docs&#34; subdirectory with doxywizard and click &#34;Run doxygen&#34; from the &#34;Run&#34; tab. Get Doxygen from &lt;a href=&#34;http://www.doxygen.org&#34;&gt;http://www.doxygen.org&lt;/a&gt; &amp;amp; Graphviz from &lt;a href=&#34;http://www.graphviz.org&#34;&gt;http://www.graphviz.org&lt;/a&gt;. See section &#34;Documentation build&#34; below on how to automate documentation generation as part of the build process.&lt;/p&gt; &#xA;&lt;p&gt;The documentation is also available online at &lt;a href=&#34;https://urho3d.io/documentation/HEAD/index.html&#34;&gt;https://urho3d.io/documentation/HEAD/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest documentation: &lt;a href=&#34;https://rurho3d.github.io&#34;&gt;https://rurho3d.github.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation on how to build Urho3D: &lt;a href=&#34;https://urho3d.io/documentation/HEAD/_building.html&#34;&gt;https://urho3d.io/documentation/HEAD/_building.html&lt;/a&gt; Documentation on how to use Urho3D as external library &lt;a href=&#34;https://urho3d.io/documentation/HEAD/_using_library.html&#34;&gt;https://urho3d.io/documentation/HEAD/_using_library.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Replace HEAD with a specific release version in the above links to obtain the documentation pertinent to the specified release. Alternatively, use the document-switcher in the documentation website to do so.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;The change history is available online at &lt;a href=&#34;https://urho3d.io/documentation/HEAD/_history.html&#34;&gt;https://urho3d.io/documentation/HEAD/_history.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>