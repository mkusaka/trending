<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-22T01:28:44Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NVIDIA/TensorRT-LLM</title>
    <updated>2023-10-22T01:28:44Z</updated>
    <id>tag:github.com,2023-10-22:/NVIDIA/TensorRT-LLM</id>
    <link href="https://github.com/NVIDIA/TensorRT-LLM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TensorRT-LLM provides users with an easy-to-use Python API to define Large Language Models (LLMs) and build TensorRT engines that contain state-of-the-art optimizations to perform inference efficiently on NVIDIA GPUs. TensorRT-LLM also contains components to create Python and C++ runtimes that execute those TensorRT engines.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;TensorRT-LLM&lt;/h1&gt; &#xA; &lt;h4&gt; A TensorRT Toolbox for Large Language Models &lt;/h4&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://nvidia.github.io/TensorRT-LLM/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.python.org/downloads/release/python-31012/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.10.12-green&#34; alt=&#34;python&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/cuda-12.2-green&#34; alt=&#34;cuda&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.nvidia.com/tensorrt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TRT-9.1-green&#34; alt=&#34;trt&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/setup.py&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/release-0.5.0-green&#34; alt=&#34;version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-blue&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/docs/source/architecture.md&#34;&gt;Architecture&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/docs/source/performance.md&#34;&gt;Results&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/&#34;&gt;Examples&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/docs/source/&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#tensorrt-llm-overview&#34;&gt;TensorRT-LLM Overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#support-matrix&#34;&gt;Support Matrix&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#advanced-topics&#34;&gt;Advanced Topics&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#quantization&#34;&gt;Quantization&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#in-flight-batching&#34;&gt;In-flight Batching&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#attention&#34;&gt;Attention&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#graph-rewriting&#34;&gt;Graph Rewriting&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#benchmarking&#34;&gt;Benchmarking&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#release-notes&#34;&gt;Release Notes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#known-issues&#34;&gt;Known issues&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h2&gt;TensorRT-LLM Overview&lt;/h2&gt; &#xA;  &lt;p&gt;TensorRT-LLM provides users with an easy-to-use Python API to define Large Language Models (LLMs) and build &lt;a href=&#34;https://developer.nvidia.com/tensorrt&#34;&gt;TensorRT&lt;/a&gt; engines that contain state-of-the-art optimizations to perform inference efficiently on NVIDIA GPUs. TensorRT-LLM also contains components to create Python and C++ runtimes that execute those TensorRT engines. It also includes a &lt;a href=&#34;https://github.com/triton-inference-server/tensorrtllm_backend&#34;&gt;backend&lt;/a&gt; for integration with the &lt;a href=&#34;https://developer.nvidia.com/nvidia-triton-inference-server&#34;&gt;NVIDIA Triton Inference Server&lt;/a&gt;; a production-quality system to serve LLMs. Models built with TensorRT-LLM can be executed on a wide range of configurations going from a single GPU to multiple nodes with multiple GPUs (using &lt;a href=&#34;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/nlp/nemo_megatron/parallelisms.html#tensor-parallelism&#34;&gt;Tensor Parallelism&lt;/a&gt; and/or &lt;a href=&#34;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/nlp/nemo_megatron/parallelisms.html#pipeline-parallelism&#34;&gt;Pipeline Parallelism&lt;/a&gt;).&lt;/p&gt; &#xA;  &lt;p&gt;The Python API of TensorRT-LLM is architectured to look similar to the &lt;a href=&#34;https://pytorch.org&#34;&gt;PyTorch&lt;/a&gt; API. It provides users with a &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/tensorrt_llm/functional.py&#34;&gt;functional&lt;/a&gt; module containing functions like &lt;code&gt;einsum&lt;/code&gt;, &lt;code&gt;softmax&lt;/code&gt;, &lt;code&gt;matmul&lt;/code&gt; or &lt;code&gt;view&lt;/code&gt;. The &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/tensorrt_llm/layers&#34;&gt;layers&lt;/a&gt; module bundles useful building blocks to assemble LLMs; like an &lt;code&gt;Attention&lt;/code&gt; block, a &lt;code&gt;MLP&lt;/code&gt; or the entire &lt;code&gt;Transformer&lt;/code&gt; layer. Model-specific components, like &lt;code&gt;GPTAttention&lt;/code&gt; or &lt;code&gt;BertAttention&lt;/code&gt;, can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/tensorrt_llm/models&#34;&gt;models&lt;/a&gt; module.&lt;/p&gt; &#xA;  &lt;p&gt;TensorRT-LLM comes with several popular models pre-defined. They can easily be modified and extended to fit custom needs. See below for a list of supported &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#Models&#34;&gt;models&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;p&gt;To maximize performance and reduce memory footprint, TensorRT-LLM allows the models to be executed using different quantization modes (see &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/gpt&#34;&gt;&lt;code&gt;examples/gpt&lt;/code&gt;&lt;/a&gt; for concrete examples). TensorRT-LLM supports INT4 or INT8 weights (and FP16 activations; a.k.a. INT4/INT8 weight-only) as well as a complete implementation of the &lt;a href=&#34;https://arxiv.org/abs/2211.10438&#34;&gt;SmoothQuant&lt;/a&gt; technique.&lt;/p&gt; &#xA;  &lt;p&gt;For a more detailed presentation of the software architecture and the key concepts used in TensorRT-LLM, we recommend you to read the following &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/docs/source/architecture.md&#34;&gt;document&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;h2&gt;Installation&lt;/h2&gt; &#xA;  &lt;p&gt;&lt;em&gt;For Windows installation, see &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/windows/&#34;&gt;&lt;code&gt;Windows/&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;p&gt;TensorRT-LLM must be built from source, instructions can be found &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/docs/source/installation.md&#34;&gt;here&lt;/a&gt;. An image of a Docker container with TensorRT-LLM and its Triton Inference Server Backend will be made available soon.&lt;/p&gt; &#xA;  &lt;p&gt;The remaining commands in that document must be executed from the TensorRT-LLM container.&lt;/p&gt; &#xA;  &lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;  &lt;p&gt;To create a TensorRT engine for an existing model, there are 3 steps:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Download pre-trained weights,&lt;/li&gt; &#xA;   &lt;li&gt;Build a fully-optimized engine of the model,&lt;/li&gt; &#xA;   &lt;li&gt;Deploy the engine.&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;p&gt;The following sections show how to use TensorRT-LLM to run the &lt;a href=&#34;https://huggingface.co/bigscience/bloom-560m&#34;&gt;BLOOM-560m&lt;/a&gt; model.&lt;/p&gt; &#xA;  &lt;p&gt;&lt;em&gt;&lt;strong&gt;0. In the BLOOM folder&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;p&gt;Inside the Docker container, you have to install the requirements:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r examples/bloom/requirements.txt&#xA;git lfs install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;&lt;em&gt;&lt;strong&gt;1. Download the model weights from HuggingFace&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;p&gt;From the BLOOM example folder, you must download the weights of the model.&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd examples/bloom&#xA;rm -rf ./bloom/560M&#xA;mkdir -p ./bloom/560M &amp;amp;&amp;amp; git clone https://huggingface.co/bigscience/bloom-560m ./bloom/560M&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;&lt;em&gt;&lt;strong&gt;2. Build the engine&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Single GPU on BLOOM 560M&#xA;python build.py --model_dir ./bloom/560M/ \&#xA;                --dtype float16 \&#xA;                --use_gemm_plugin float16 \&#xA;                --use_gpt_attention_plugin float16 \&#xA;                --output_dir ./bloom/560M/trt_engines/fp16/1-gpu/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;See the BLOOM &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/bloom&#34;&gt;example&lt;/a&gt; for more details and options regarding the &lt;code&gt;build.py&lt;/code&gt; script.&lt;/p&gt; &#xA;  &lt;p&gt;&lt;em&gt;&lt;strong&gt;3. Run&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;p&gt;The &lt;code&gt;summarize.py&lt;/code&gt; script can be used to perform the summarization of articles from the CNN Daily dataset:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python summarize.py --test_trt_llm \&#xA;                    --hf_model_location ./bloom/560M/ \&#xA;                    --data_type fp16 \&#xA;                    --engine_dir ./bloom/560M/trt_engines/fp16/1-gpu/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;More details about the script and how to run the BLOOM model can be found in the example &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/bloom&#34;&gt;folder&lt;/a&gt;. Many more &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/#models&#34;&gt;models&lt;/a&gt; than BLOOM are implemented in TensorRT-LLM. They can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/&#34;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; &#xA;  &lt;h2&gt;Support Matrix&lt;/h2&gt; &#xA;  &lt;p&gt;TensorRT-LLM optimizes the performance of a range of well-known models on NVIDIA GPUs. The following sections provide a list of supported GPU architectures as well as important features implemented in TensorRT-LLM.&lt;/p&gt; &#xA;  &lt;h3&gt;Devices&lt;/h3&gt; &#xA;  &lt;p&gt;TensorRT-LLM is rigorously tested on the following GPUs:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/data-center/h100/&#34;&gt;H100&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/data-center/l40s/&#34;&gt;L40S&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/data-center/a100/&#34;&gt;A100&lt;/a&gt;/&lt;a href=&#34;https://www.nvidia.com/en-us/data-center/products/a30-gpu/&#34;&gt;A30&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/data-center/v100/&#34;&gt;V100&lt;/a&gt; (experimental)&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;If a GPU is not listed above, it is important to note that TensorRT-LLM is expected to work on GPUs based on the Volta, Turing, Ampere, Hopper and Ada Lovelace architectures. Certain limitations may, however, apply.&lt;/p&gt; &#xA;  &lt;h3&gt;Precision&lt;/h3&gt; &#xA;  &lt;p&gt;Various numerical precisions are supported in TensorRT-LLM. The support for some of those numerical features require specific architectures:&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;     &lt;th align=&#34;left&#34;&gt;FP32&lt;/th&gt; &#xA;     &lt;th align=&#34;left&#34;&gt;FP16&lt;/th&gt; &#xA;     &lt;th align=&#34;left&#34;&gt;BF16&lt;/th&gt; &#xA;     &lt;th align=&#34;left&#34;&gt;FP8&lt;/th&gt; &#xA;     &lt;th align=&#34;left&#34;&gt;INT8&lt;/th&gt; &#xA;     &lt;th align=&#34;left&#34;&gt;INT4&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Volta (SM70)&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Turing (SM75)&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Ampere (SM80, SM86)&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Ada-Lovelace (SM89)&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Hopper (SM90)&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA;  &lt;p&gt;In this release of TensorRT-LLM, the support for FP8 and quantized data types (INT8 or INT4) is not implemented for all the models. See the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/docs/source/precision.md&#34;&gt;precision&lt;/a&gt; document and the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/&#34;&gt;examples&lt;/a&gt; folder for additional details.&lt;/p&gt; &#xA;  &lt;h3&gt;Key Features&lt;/h3&gt; &#xA;  &lt;p&gt;TensorRT-LLM contains examples that implement the following features.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Multi-head Attention(&lt;a href=&#34;https://arxiv.org/abs/1706.03762&#34;&gt;MHA&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Multi-query Attention (&lt;a href=&#34;https://arxiv.org/abs/1911.02150&#34;&gt;MQA&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Group-query Attention(&lt;a href=&#34;https://arxiv.org/abs/2307.09288&#34;&gt;GQA&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;In-flight Batching&lt;/li&gt; &#xA;   &lt;li&gt;Paged KV Cache for the Attention&lt;/li&gt; &#xA;   &lt;li&gt;Tensor Parallelism&lt;/li&gt; &#xA;   &lt;li&gt;Pipeline Parallelism&lt;/li&gt; &#xA;   &lt;li&gt;INT4/INT8 Weight-Only Quantization (W4A16 &amp;amp; W8A16)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2211.10438&#34;&gt;SmoothQuant&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2210.17323&#34;&gt;GPTQ&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2306.00978&#34;&gt;AWQ&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2209.05433&#34;&gt;FP8&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Greedy-search&lt;/li&gt; &#xA;   &lt;li&gt;Beam-search&lt;/li&gt; &#xA;   &lt;li&gt;RoPE&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;In this release of TensorRT-LLM, some of the features are not enabled for all the models listed in the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/&#34;&gt;examples&lt;/a&gt; folder.&lt;/p&gt; &#xA;  &lt;h3&gt;Models&lt;/h3&gt; &#xA;  &lt;p&gt;The list of supported models is:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/baichuan&#34;&gt;Baichuan&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/bert&#34;&gt;Bert&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/blip2&#34;&gt;Blip2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/bloom&#34;&gt;BLOOM&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/chatglm6b&#34;&gt;ChatGLM-6B&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/chatglm2-6b/&#34;&gt;ChatGLM2-6B&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/falcon&#34;&gt;Falcon&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/gpt&#34;&gt;GPT&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/gptj&#34;&gt;GPT-J&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/gpt&#34;&gt;GPT-Nemo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/gptneox&#34;&gt;GPT-NeoX&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/llama&#34;&gt;LLaMA&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/llama&#34;&gt;LLaMA-v2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/mpt&#34;&gt;MPT&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/opt&#34;&gt;OPT&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/gpt&#34;&gt;SantaCoder&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/examples/gpt&#34;&gt;StarCoder&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h2&gt;Performance&lt;/h2&gt; &#xA;  &lt;p&gt;Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/docs/source/performance.md&#34;&gt;performance&lt;/a&gt; page for performance numbers. That page contains measured numbers for four variants of popular models (GPT-J, LLAMA-7B, LLAMA-70B, Falcon-180B), measured on the H100, L40S and A100 GPU(s).&lt;/p&gt; &#xA;  &lt;h2&gt;Advanced Topics&lt;/h2&gt; &#xA;  &lt;h3&gt;Quantization&lt;/h3&gt; &#xA;  &lt;p&gt;This &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/docs/source/precision.md&#34;&gt;document&lt;/a&gt; describes the different quantization methods implemented in TensorRT-LLM and contains a support matrix for the different models.&lt;/p&gt; &#xA;  &lt;h3&gt;In-flight Batching&lt;/h3&gt; &#xA;  &lt;p&gt;TensorRT-LLM supports in-flight batching of requests (also known as continuous batching or iteration-level batching). It&#39;s a &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/docs/source/batch_manager.md&#34;&gt;technique&lt;/a&gt; that aims at reducing wait times in queues, eliminating the need for padding requests and allowing for higher GPU utilization.&lt;/p&gt; &#xA;  &lt;h3&gt;Attention&lt;/h3&gt; &#xA;  &lt;p&gt;TensorRT-LLM implements several variants of the Attention mechanism that appears in most the Large Language Models. This &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/docs/source/gpt_attention.md&#34;&gt;document&lt;/a&gt; summarizes those implementations and how they are optimized in TensorRT-LLM.&lt;/p&gt; &#xA;  &lt;h3&gt;Graph Rewriting&lt;/h3&gt; &#xA;  &lt;p&gt;TensorRT-LLM uses a declarative approach to define neural networks and contains techniques to optimize the underlying graph. For more details, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/docs/source/graph-rewriting.md&#34;&gt;doc&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;h3&gt;Benchmark&lt;/h3&gt; &#xA;  &lt;p&gt;TensorRT-LLM provides &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/benchmarks/cpp/README.md&#34;&gt;C++&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/TensorRT-LLM/release/0.5.0/benchmarks/python/README.md&#34;&gt;Python&lt;/a&gt; tools to perform benchmarking. Note, however, that it is recommended to use the C++ version.&lt;/p&gt; &#xA;  &lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;It&#39;s recommended to add options &lt;code&gt;–shm-size=1g –ulimit memlock=-1&lt;/code&gt; to the docker or nvidia-docker run command. Otherwise you may see NCCL errors when running multiple GPU inferences. See &lt;a href=&#34;https://docs.nvidia.com/deeplearning/nccl/user-guide/docs/troubleshooting.html#errors&#34;&gt;https://docs.nvidia.com/deeplearning/nccl/user-guide/docs/troubleshooting.html#errors&lt;/a&gt; for details.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;When building models, memory-related issues such as&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;pre&gt;&lt;code&gt;[09/23/2023-03:13:00] [TRT] [E] 9: GPTLMHeadModel/layers/0/attention/qkv/PLUGIN_V2_Gemm_0: could not find any supported formats consistent with input/output data types&#xA;[09/23/2023-03:13:00] [TRT] [E] 9: [pluginV2Builder.cpp::reportPluginError::24] Error Code 9: Internal Error (GPTLMHeadModel/layers/0/attention/qkv/PLUGIN_V2_Gemm_0: could not find any supported formats consistent with input/output data types)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;may happen. One possible solution is to reduce the amount of memory needed by reducing the maximum batch size, input and output lengths. Another option is to enable plugins, for example: &lt;code&gt;--use_gpt_attention_plugin&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;h2&gt;Release notes&lt;/h2&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;TensorRT-LLM requires TensorRT 9.1.0.4 and 23.08 containers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h3&gt;Change Log&lt;/h3&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;TensorRT-LLM v0.5.0 is the first public release.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h3&gt;Known Issues&lt;/h3&gt; &#xA;  &lt;h3&gt;Report Issues&lt;/h3&gt; &#xA;  &lt;p&gt;You can use GitHub issues to report issues with TensorRT-LLM.&lt;/p&gt; &#xA; &lt;/div&gt;&#xA;&lt;/div&gt;</summary>
  </entry>
</feed>