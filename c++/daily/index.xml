<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-25T01:28:52Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cdozdil/OptiScaler</title>
    <updated>2025-01-25T01:28:52Z</updated>
    <id>tag:github.com,2025-01-25:/cdozdil/OptiScaler</id>
    <link href="https://github.com/cdozdil/OptiScaler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OptiScaler is middleware that enables various upscaling technologies in DLSS2-only games. It allows non-Nvidia users to use upscaling by applying DLSS2 inputs to XeSS, FSR2, or FSR3.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/c7dad5da-0b29-4710-8a57-b58e4e407abd&#34; alt=&#34;opti-logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OptiScaler is middleware that enables various upscaling technologies in DLSS2-only games. It allows non-Nvidia users to use upscaling by applying DLSS2 inputs to XeSS, FSR2, or FSR3. It also offers extensive customization options for all users, including those with Nvidia GPUs using DLSS.&lt;/p&gt; &#xA;&lt;p&gt;Key aspects of OptiScaler:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enables XeSS, FSR2, and FSR3 in DLSS2-only games&lt;/li&gt; &#xA; &lt;li&gt;Provides tuning options for DLSS users&lt;/li&gt; &#xA; &lt;li&gt;Offers a wide range of tweaks and enhancements (RCAS &amp;amp; MAS, Output Scaling, DLSS Presets, Ratio &amp;amp; DRS Overrides etc.)&lt;/li&gt; &#xA; &lt;li&gt;Allows users to fine-tune their upscaling experience&lt;/li&gt; &#xA; &lt;li&gt;With version 0.7.0 and above experimental frame generation support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Official Discord Server: &lt;a href=&#34;https://discord.gg/2JDHx6kcXB&#34;&gt;DLSS2FSR&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;This project is based on &lt;a href=&#34;https://github.com/PotatoOfDoom&#34;&gt;PotatoOfDoom&lt;/a&gt;&#39;s excellent &lt;a href=&#34;https://github.com/PotatoOfDoom/CyberFSR2&#34;&gt;CyberFSR2&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Do not use this mod with online games. It may trigger anti-cheat software and cause bans!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Install as &lt;code&gt;non-nvngx&lt;/code&gt; (For enabling all features like Frame Gen)&lt;/h3&gt; &#xA;&lt;p&gt;To overcome DLSS 3.7&#39;s signature check requirements, I implemented a method developed by &lt;strong&gt;Artur&lt;/strong&gt; (creator of &lt;a href=&#34;https://www.nexusmods.com/site/mods/757?tab=description&#34;&gt;DLSS Enabler&lt;/a&gt;). Later, this method increased the compatibility of &lt;code&gt;OverlayMenu&lt;/code&gt;, allowed OptiScaler to &lt;strong&gt;spoof DXGI and Vulkan&lt;/strong&gt;, let users override the &lt;code&gt;nvapi64.dll&lt;/code&gt; and even let users to force Anitsotropic Filtering and Mipmap Lod Bias. In short, this installation method allowed OptiScaler to provide more features to users.&lt;/p&gt; &#xA;&lt;p&gt;Step-by-step installation (&lt;strong&gt;Nvidia users please skip to step 3&lt;/strong&gt;):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We need an Nvidia signed dll file to bypass signature checks. All games that support DLSS come with &lt;code&gt;nvngx_dlss.dll&lt;/code&gt;. Most of the time it&#39;s in the games exe folder (e.g. for Unreal Engine games it&#39;s &lt;code&gt;&amp;lt;path-to-game&amp;gt;\Binaries\Win64\&lt;/code&gt;). Some games and engines keep these third party dll&#39;s in different folders (like &lt;code&gt;plugins&lt;/code&gt;). So we need to find the &lt;code&gt;nvngx_dlss.dll&lt;/code&gt; file and copy it to the games exe folder. If it&#39;s already in the games exe folder, make a copy of it.&lt;/li&gt; &#xA; &lt;li&gt;Rename the copy of &lt;code&gt;nvngx_dlss.dll&lt;/code&gt; in the games exe folder to &lt;code&gt;nvngx.dll&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Rename OptiScaler&#39;s &lt;code&gt;nvngx.dll&lt;/code&gt; to one of the &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#optiscaler-supports-these-filenames&#34;&gt;supported filenames&lt;/a&gt; (I prefer &lt;code&gt;dxgi.dll&lt;/code&gt;) [1].&lt;/li&gt; &#xA; &lt;li&gt;Copy the renamed OptiScaler file to your game&#39;s executable folder.&lt;/li&gt; &#xA; &lt;li&gt;If your GPU is not an Nvidia one, check &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/Spoofing.md&#34;&gt;GPU spoofing options&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;OptiScaler supports these filenames&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dxgi.dll&lt;/li&gt; &#xA; &lt;li&gt;winmm.dll&lt;/li&gt; &#xA; &lt;li&gt;version.dll&lt;/li&gt; &#xA; &lt;li&gt;wininet.dll&lt;/li&gt; &#xA; &lt;li&gt;winhttp.dll&lt;/li&gt; &#xA; &lt;li&gt;OptiScaler.asi (with an ASI loader)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;[1] Linux users should add renamed dll to overrides:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;WINEDLLOVERRIDES=dxgi=n,b %COMMAND% &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there is another mod (e.g. Reshade etc.) that uses the same filename (e.g. &lt;code&gt;dxgi.dll&lt;/code&gt;), if you rename it with the &lt;code&gt;-original&lt;/code&gt; suffix (e.g. &lt;code&gt;dxgi-original.dll&lt;/code&gt;), OptiScaler will load this file instead of the original library.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can create a new folder called &lt;code&gt;plugins&lt;/code&gt; and put other mods files in this folder. OptiScaler will check this folder and if it finds the same dll file (for example &lt;code&gt;dxgi.dll&lt;/code&gt;), it will load this file instead of the original library. &lt;img src=&#34;https://github.com/cdozdil/OptiScaler/assets/35529761/c4bf2a85-107b-49ac-b002-59d00fd06982&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please don&#39;t rename the ini file, it should stay as &lt;code&gt;nvngx.ini&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install as &lt;code&gt;nvngx.dll&lt;/code&gt; (Limited features, FG and Overlay Menu will be disabled)&lt;/h3&gt; &#xA;&lt;p&gt;Step-by-step installation:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest relase from &lt;a href=&#34;https://github.com/cdozdil/OptiScaler/releases&#34;&gt;releases&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Extract the contents of the archive next to the game executable file in your games folder. (e.g. for Unreal Engine games it&#39;s &lt;code&gt;&amp;lt;path-to-game&amp;gt;\Binaries\Win64\&lt;/code&gt;) [1]&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;EnableSignatureOverride.reg&lt;/code&gt; from &lt;code&gt;DlssOverrides&lt;/code&gt; folder and confirm merge. [2][3]&lt;/li&gt; &#xA; &lt;li&gt;If your GPU is not an Nvidia one, check &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/Spoofing.md&#34;&gt;GPU spoofing options&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;[1] This package contains latest version of &lt;code&gt;libxess.dll&lt;/code&gt; and if game folder contains any older version of same library it would be overwritten. Consider backing up or renaming existing file.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;[2] Normally Streamline and games check if nvngx.dll is signed, by merging this &lt;code&gt;.reg&lt;/code&gt; file we are overriding this signature check.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;[3] Adding signature override on Linux - There are many possible setups, this one will focus on steam games:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Make sure you have protontricks installed&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Run in a terminal protontricks &#xA;   &lt;steam-appid&gt;&#xA;     regedit, replace &#xA;    &lt;steam-appid&gt;&#xA;      with an id for your game&#xA;    &lt;/steam-appid&gt;&#xA;   &lt;/steam-appid&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Press &#34;registry&#34; in the top left of the new window -&amp;gt; &lt;code&gt;Import Registry File&lt;/code&gt; -&amp;gt; navigate to and select &lt;code&gt;EnableSignatureOverride.reg&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;You should see a message saying that you successfully added the entries to the registry&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;If your game is not on Steam, it all boils down to opening regedit inside your game&#39;s prefix and importing the file.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Update OptiScaler version when using DLSS Enabler&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Delete/rename &lt;code&gt;dlss-enabler-upscaler.dll&lt;/code&gt; in game folder&lt;/li&gt; &#xA; &lt;li&gt;Extract &lt;code&gt;nvngx.dll&lt;/code&gt; file from OptiScaler 7zip file to a temp folder&lt;/li&gt; &#xA; &lt;li&gt;Rename &lt;code&gt;nvngx.dll&lt;/code&gt; to &lt;code&gt;dlss-enabler-upscaler.dll&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;dlss-enabler-upscaler.dll&lt;/code&gt; from temp folder to the game folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Uninstallation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;DisableSignatureOverride.reg&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Delete &lt;code&gt;EnableSignatureOverride.reg&lt;/code&gt;, &lt;code&gt;DisableSignatureOverride.reg&lt;/code&gt;, &lt;code&gt;nvngx.dll&lt;/code&gt;, &lt;code&gt;nvngx.ini&lt;/code&gt; files&lt;/li&gt; &#xA; &lt;li&gt;If there were a &lt;code&gt;libxess.dll&lt;/code&gt; file and you have backed it up delete the new file and restore the backed up file. If you have overwrote old file &lt;strong&gt;DO NOT&lt;/strong&gt; delete &lt;code&gt;libxess.dll&lt;/code&gt; file. If there were no &lt;code&gt;libxess.dll&lt;/code&gt; file it&#39;s safe to delete.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works?&lt;/h2&gt; &#xA;&lt;p&gt;OptiScaler implements the necessary API methods of DLSS2 &amp;amp; NVAPI to act as a middleware. It interprets calls from the game and redirects them to the chosen upscaling backend, allowing games designed for one technology to use another.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports multiple upscaling backends (XeSS, FSR 2.1.2, FSR 2.2.1, FSR 3.1 and DLSS)&lt;/li&gt; &#xA; &lt;li&gt;Experimental support for frame generation with version 0.7.0 and above&lt;/li&gt; &#xA; &lt;li&gt;Supports DLSS 3.7 and above (check &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#install-as-non-nvngx&#34;&gt;installation instructions&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Supports DLSS-D (Ray Reconstruction) on Nvidia cards (Supports changing presets and using OptiScaler enchanchements)&lt;/li&gt; &#xA; &lt;li&gt;Ability to modify DLSS/DLSS-D presets on the fly&lt;/li&gt; &#xA; &lt;li&gt;Supports XeSS v1.3.x&#39;s Ultra Performance, NativeAA modes (&lt;strong&gt;Not using XeSS 1.3.x scaling ratios&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://github.com/cdozdil/OptiScaler/raw/master/Config.md&#34;&gt;in-game menu&lt;/a&gt; for tuning and saving settings on the fly (Shortcut key is &lt;strong&gt;INSERT&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Full integration with &lt;a href=&#34;https://www.nexusmods.com/site/mods/757&#34;&gt;DLSS Enabler&lt;/a&gt; for DLSS-FG support&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RCAS&lt;/strong&gt; support with &lt;strong&gt;MAS&lt;/strong&gt; (Motion Adaptive Sharpening) for all Dx12 &amp;amp; Dx11 upscalers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Output Scaling&lt;/strong&gt; option (0.5x to 3.0x) for backends running on Dx12 &amp;amp; Dx11&lt;/li&gt; &#xA; &lt;li&gt;Supports DXGI spoofing (when running as &lt;code&gt;dxgi.dll&lt;/code&gt;) as Nvidia GPUs (with XeSS detection to enable XMX on Intel Arc cards)&lt;/li&gt; &#xA; &lt;li&gt;Supports Vulkan spoofing (needs to be enabled from &lt;code&gt;nvngi.ini&lt;/code&gt;) as Nvidia GPUs (not working for Doom Eternal)&lt;/li&gt; &#xA; &lt;li&gt;Supports loading specific &lt;code&gt;nvapi64.dll&lt;/code&gt; file (when running in non-nvngx mode)&lt;/li&gt; &#xA; &lt;li&gt;Supports loading specific &lt;code&gt;nvngx_dlss.dll&lt;/code&gt; file (when running in non-nvngx mode)&lt;/li&gt; &#xA; &lt;li&gt;Supports overriding scaling ratios&lt;/li&gt; &#xA; &lt;li&gt;Supports overriding DRS range&lt;/li&gt; &#xA; &lt;li&gt;Autofixes for &lt;a href=&#34;https://github.com/cdozdil/OptiScaler/raw/master/Config.md#resource-barriers-dx12-only&#34;&gt;colored lights&lt;/a&gt; on Unreal Engine &amp;amp; AMD graphics cards&lt;/li&gt; &#xA; &lt;li&gt;Autofixes for &lt;a href=&#34;https://github.com/cdozdil/OptiScaler/raw/master/Config.md#init-flags&#34;&gt;missing exposure texture&lt;/a&gt; information&lt;/li&gt; &#xA; &lt;li&gt;Ability to modify &lt;a href=&#34;https://github.com/cdozdil/OptiScaler/raw/master/Config.md#mipmap-lod-bias-override-dx12-only&#34;&gt;Mipmap Lod Bias&lt;/a&gt; value of game&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Please check &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/Config.md&#34;&gt;this&lt;/a&gt; document for configuration parameters and explanations. &lt;em&gt;(Will be updated)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you can&#39;t open in-game menu:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Please check that you have enabled DLSS from game options&lt;/li&gt; &#xA; &lt;li&gt;Please try opening menu while you are in-game (while 3D rendering is happening)&lt;/li&gt; &#xA; &lt;li&gt;There is a 200 frame delay before enabling in-game menu, please wait 10-15 seconds before opening menu.&lt;/li&gt; &#xA; &lt;li&gt;If you are using RTSS (MSI Afterburner, CapFrameX) please enable this setting of RTSS and try updating RTSS. &lt;img src=&#34;https://github.com/cdozdil/OptiScaler/assets/35529761/8afb24ac-662a-40ae-a97c-837369e03fc7&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please check &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/Issues.md&#34;&gt;this&lt;/a&gt; document for rest of the known issues and possible solutions for them.&lt;/p&gt; &#xA;&lt;h2&gt;Which APIs and Upscalers are Supported?&lt;/h2&gt; &#xA;&lt;p&gt;Currently OptiScaler can be used with DirectX 11, DirectX 12 and Vulkan but each API has different sets of upscaler options.&lt;/p&gt; &#xA;&lt;h4&gt;For DirectX 12&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;XeSS 1.x.x (Default)&lt;/li&gt; &#xA; &lt;li&gt;FSR2 2.1.2, 2.2.1&lt;/li&gt; &#xA; &lt;li&gt;FSR3 3.1.0 &amp;amp; FSR2 2.3.2&lt;/li&gt; &#xA; &lt;li&gt;DLSS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;For DirectX 11&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FSR2 2.2.1 (Default, native DX11)&lt;/li&gt; &#xA; &lt;li&gt;FSR3 3.1.1 (unofficial port to native DX11)&lt;/li&gt; &#xA; &lt;li&gt;XeSS 1.x.x, FSR2 2.1.2, 2.2.1, FSR3 3.1.0 &amp;amp; FSR2 2.3.2 (via background DX12 processing) [*]&lt;/li&gt; &#xA; &lt;li&gt;DLSS (native DX11)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[*] This implementations uses a background DirectX12 device to be able to use Dirext12 only upscalers. There is %10-15 performance penalty for this method but allows much more upscaler options. Also native DirectX11 implementation of FSR 2.2.1 is a backport from Unity renderer and has it&#39;s own problems which some of them avoided by OptiScaler. &lt;strong&gt;These implementations does not support Linux&lt;/strong&gt; and will result black screen.&lt;/p&gt; &#xA;&lt;h4&gt;For Vulkan&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FSR2 2.1.2 (Default)&lt;/li&gt; &#xA; &lt;li&gt;FSR2 2.2.1&lt;/li&gt; &#xA; &lt;li&gt;FSR3 3.1.0 &amp;amp; FSR2 2.3.2&lt;/li&gt; &#xA; &lt;li&gt;DLSS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compilation&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2022&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Instructions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repo with all of its submodules.&lt;/li&gt; &#xA; &lt;li&gt;Open the OptiScaler.sln with Visual Studio 2022.&lt;/li&gt; &#xA; &lt;li&gt;Build the project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@PotatoOfDoom for CyberFSR2&lt;/li&gt; &#xA; &lt;li&gt;@Artur for DLSS Enabler and helping me to implement NVAPI correctly&lt;/li&gt; &#xA; &lt;li&gt;@LukeFZ &amp;amp; @Nukem for their great mods and sharing their knowledge&lt;/li&gt; &#xA; &lt;li&gt;@FakeMichau for support, testing and feature creep&lt;/li&gt; &#xA; &lt;li&gt;@QM for continous testing efforts and helping me to reach games&lt;/li&gt; &#xA; &lt;li&gt;@Cryio, @krispy, @krisshietala, @Lordubuntu, @scz, @Veeqo for their hard work on &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1qsvM0uRW-RgAYsOVprDWK2sjCqHnd_1teYAx00_TwUY&#34;&gt;compatibility matrix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@RazzerBrazzer and DLSS2FSR community for all their support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://gitlab.freedesktop.org/freetype/freetype&#34;&gt;FreeType&lt;/a&gt; licensed under the &lt;a href=&#34;https://gitlab.freedesktop.org/freetype/freetype/-/blob/master/docs/FTL.TXT&#34;&gt;FTL&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>