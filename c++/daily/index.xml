<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-31T01:32:28Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>D1rkMtr/IORI_Loader</title>
    <updated>2022-10-31T01:32:28Z</updated>
    <id>tag:github.com,2022-10-31:/D1rkMtr/IORI_Loader</id>
    <link href="https://github.com/D1rkMtr/IORI_Loader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UUID shellcode Loader with dynamic indirect syscall implementation, syscall number/instruction get resolved dynamicaly at runtime, and the syscall number/instruction get unhooked using Halosgate technique. Function address get resolved from the PEB by offsets and comparaison by hashes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IORI_Loader - Bypass EDRs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/110354855/198591145-8688c68d-cc21-44bc-b7ec-0dd2f4f40688.png&#34; alt=&#34;iori&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;FUD advanced Loader implementing dynamic indirect syscall with syscall number and syscall instruction Unhooking with Halosgate technic. Shellcode in UUIDs format to avoid static analysis, syscall instructions and syscall number don&#39;t exist in the binary opcode which makes it avoid static analysis and they get resolved at run time. also it gets the API addresses from the PEB by offsets and the comparison is done by hashing.&lt;/p&gt; &#xA;&lt;h2&gt;Credits / References&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/smelly__vx&#34;&gt;@smelly__vx&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/am0nsec&#34;&gt;@am0nsec&lt;/a&gt; ( Creators/Publishers of the Hells Gate technique )&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/am0nsec/HellsGate&#34;&gt;https://github.com/am0nsec/HellsGate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vxug.fakedoma.in/papers/VXUG/Exclusive/HellsGate.pdf&#34;&gt;The Original Paper&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reenz0h from &lt;a href=&#34;https://twitter.com/SEKTOR7net&#34;&gt;@SEKTOR7net&lt;/a&gt; (Creator of the HalosGate technique )&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.sektor7.net/#!res/2021/halosgate.md&#34;&gt;https://blog.sektor7.net/#!res/2021/halosgate.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://institute.sektor7.net/rto-win-evasion&#34;&gt;https://institute.sektor7.net/rto-win-evasion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>binji/smolnes</title>
    <updated>2022-10-31T01:32:28Z</updated>
    <id>tag:github.com,2022-10-31:/binji/smolnes</id>
    <link href="https://github.com/binji/smolnes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NES emulator in &lt;5000 bytes of C++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;smolnes&lt;/h1&gt; &#xA;&lt;p&gt;A NES emulator in ~5000 significant bytes of c++.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Plays some mapper 0 and mapper 1 games.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/binji/smolnes/main/img/bc.gif&#34; alt=&#34;Bionic Commando&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binji/smolnes/main/img/dk.gif&#34; alt=&#34;Donkey Kong&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binji/smolnes/main/img/dw.gif&#34; alt=&#34;Dragon Warrior&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binji/smolnes/main/img/lolo.gif&#34; alt=&#34;Adventures of Lolo&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binji/smolnes/main/img/loz.gif&#34; alt=&#34;Legend of Zelda&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binji/smolnes/main/img/met.gif&#34; alt=&#34;Metroid&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binji/smolnes/main/img/mm2.gif&#34; alt=&#34;Mega Man 2&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binji/smolnes/main/img/ng.gif&#34; alt=&#34;Ninja Gaiden&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binji/smolnes/main/img/rr.gif&#34; alt=&#34;Rad Racer&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binji/smolnes/main/img/smb.gif&#34; alt=&#34;Super Mario Bros.&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binji/smolnes/main/img/tmnt.gif&#34; alt=&#34;Teenage Mutant Ninja Turtle&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/binji/smolnes/main/img/smolnes.png&#34; alt=&#34;Source Code&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Probably only builds on Linux and macOS. Needs a compiler with the &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Case-Ranges.html&#34;&gt;case range extension&lt;/a&gt;, so gcc or clang probably.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./smolnes &amp;lt;rom.nes&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keys:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DPAD-UP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;↑&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DPAD-DOWN&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;↓&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DPAD-LEFT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;←&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DPAD-RIGHT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;→&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Z&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;X&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;START&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Enter&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SELECT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Updating keys&lt;/h2&gt; &#xA;&lt;p&gt;Look for lines 23 and 24 in the source code. The following table shows which numbers map to which keyboard keys:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;number&lt;/th&gt; &#xA;   &lt;th&gt;default key&lt;/th&gt; &#xA;   &lt;th&gt;gameboy button&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;27&lt;/td&gt; &#xA;   &lt;td&gt;X&lt;/td&gt; &#xA;   &lt;td&gt;A Button&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;29&lt;/td&gt; &#xA;   &lt;td&gt;Z&lt;/td&gt; &#xA;   &lt;td&gt;B Button&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;43&lt;/td&gt; &#xA;   &lt;td&gt;Tab&lt;/td&gt; &#xA;   &lt;td&gt;Select Button&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;40&lt;/td&gt; &#xA;   &lt;td&gt;Return&lt;/td&gt; &#xA;   &lt;td&gt;Start Button&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;79&lt;/td&gt; &#xA;   &lt;td&gt;Arrow Right&lt;/td&gt; &#xA;   &lt;td&gt;DPAD Right&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;80&lt;/td&gt; &#xA;   &lt;td&gt;Arrow Left&lt;/td&gt; &#xA;   &lt;td&gt;DPAD Left&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;81&lt;/td&gt; &#xA;   &lt;td&gt;Arrow Down&lt;/td&gt; &#xA;   &lt;td&gt;DPAD Down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;82&lt;/td&gt; &#xA;   &lt;td&gt;Arrow Up&lt;/td&gt; &#xA;   &lt;td&gt;DPAD Up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Replace the numbers on this line with one from the &lt;a href=&#34;https://www.libsdl.org/tmp/SDL/include/SDL_scancode.h&#34;&gt;SDL scancode list&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yuesong-feng/30dayMakeCppServer</title>
    <updated>2022-10-31T01:32:28Z</updated>
    <id>tag:github.com,2022-10-31:/yuesong-feng/30dayMakeCppServer</id>
    <link href="https://github.com/yuesong-feng/30dayMakeCppServer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;30天自制C++服务器，包含教程和源代码&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;30天自制C++服务器&lt;/h1&gt; &#xA;&lt;h2&gt;如访问慢，可以到这里观看：&lt;a href=&#34;https://csblog.cc&#34;&gt;csblog&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;教程的配套网络库：&lt;a href=&#34;https://github.com/yuesong-feng/pine&#34;&gt;pine&lt;/a&gt;，star and fork!&lt;/p&gt; &#xA;&lt;p&gt;先说结论：不管使用什么语言，一切后台开发的根基，是面向Linux的C/C++服务器开发。&lt;/p&gt; &#xA;&lt;p&gt;几乎所有高并发服务器都是运行在Linux环境的，笔者之前也用Java、node写过服务器，但最后发现只是学会了一门技术、一门语言，而并不了解底层的基础原理。一个HTTP请求的过程，为什么可以实现高并发，如何控制TCP连接，如何处理好数据传输的逻辑等等，这些只有面向C/C++编程才能深入了解。&lt;/p&gt; &#xA;&lt;p&gt;本教程模仿《30天自制操作系统》，面向零经验的新手，教你在30天内入门Linux服务器开发。本教程更偏向实践，将会把重点放在如何写代码上，而不会花太多的篇幅讲解背后的计算机基础原理，涉及到的地方会给出相应书籍的具体章节，但这并不代表这些理论知识不重要，事实上理论基础相当重要，没有理论的支撑，构建出一个高性能服务器是无稽之谈。&lt;/p&gt; &#xA;&lt;p&gt;本教程希望读者：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;熟悉C/C++语言&lt;/li&gt; &#xA; &lt;li&gt;熟悉计算机网络基础，如TCP协议、socket原理等&lt;/li&gt; &#xA; &lt;li&gt;了解基本的操作系统基础概念，如进程、线程、内存资源、系统调用等&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;学完本教程后，你将会很轻松地看懂muduo源码。&lt;/p&gt; &#xA;&lt;p&gt;C/C++学习的一个难点在于初学时无法做出实际上的东西，没有反馈，程序都在黑乎乎的命令行里运行，不像web开发，可以随时看到自己学习的成果。本教程的代码都放在code文件夹里，每一天学习后都可以得到一个可以编译运行的服务器，不断迭代开发。&lt;/p&gt; &#xA;&lt;p&gt;在code文件夹里有每一天的代码文件夹，进入该文件夹，使用&lt;code&gt;make&lt;/code&gt;命令编译，会生成两个可执行文件，输入命令&lt;code&gt;./server&lt;/code&gt;就能看到今天的学习成果！然后新建一个Terminal，然后输入&lt;code&gt;./client&lt;/code&gt;运行客户端，与服务器交互。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day01-%E4%BB%8E%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84socket%E5%BC%80%E5%A7%8B.md&#34;&gt;day01-从一个最简单的socket开始&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day02-%E4%B8%8D%E8%A6%81%E6%94%BE%E8%BF%87%E4%BB%BB%E4%BD%95%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF.md&#34;&gt;day02-不要放过任何一个错误&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day03-%E9%AB%98%E5%B9%B6%E5%8F%91%E8%BF%98%E5%BE%97%E7%94%A8epoll.md&#34;&gt;day03-高并发还得用epoll&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day04-%E6%9D%A5%E7%9C%8B%E7%9C%8B%E6%88%91%E4%BB%AC%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%B1%BB.md&#34;&gt;day04-来看看我们的第一个类&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day05-epoll%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95-Channel%E7%99%BB%E5%9C%BA.md&#34;&gt;day05-epoll高级用法-Channel登场&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day06-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A0%B8%E5%BF%83%E7%B1%BB%E7%99%BB%E5%9C%BA.md&#34;&gt;day06-服务器与事件驱动核心类登场&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day07-%E4%B8%BA%E6%88%91%E4%BB%AC%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AAAcceptor.md&#34;&gt;day07-为我们的服务器添加一个Acceptor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day08-%E4%B8%80%E5%88%87%E7%9A%86%E6%98%AF%E7%B1%BB%EF%BC%8C%E8%BF%9ETCP%E8%BF%9E%E6%8E%A5%E4%B9%9F%E4%B8%8D%E4%BE%8B%E5%A4%96.md&#34;&gt;day08-一切皆是类，连TCP连接也不例外&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day09-%E7%BC%93%E5%86%B2%E5%8C%BA-%E5%A4%A7%E4%BD%9C%E7%94%A8.md&#34;&gt;day09-缓冲区-大作用&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day10-%E5%8A%A0%E5%85%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8.md&#34;&gt;day10-加入线程池到服务器&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day11-%E5%AE%8C%E5%96%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%8C%E5%8A%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%B5%8B%E8%AF%95%E7%A8%8B%E5%BA%8F.md&#34;&gt;day11-完善线程池，服务器成型，写测试程序&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day12-%E5%B0%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%94%B9%E5%86%99%E4%B8%BA%E4%B8%BB%E4%BB%8EReactor%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%BC%8F.md&#34;&gt;day12-将服务器改写为主从Reactor多线程模式&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day13-C++%E5%B7%A5%E7%A8%8B%E5%8C%96%E3%80%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E3%80%81%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md&#34;&gt;day13-C++工程化、代码分析、性能优化&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day14-%E6%94%AF%E6%8C%81%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E8%87%AA%E5%AE%9A%E4%B9%89%E3%80%81%E5%AE%8C%E5%96%84Connection%E7%B1%BB.md&#34;&gt;day14-支持业务逻辑自定义、完善Connection类&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer/raw/main/day15-macOS%E6%94%AF%E6%8C%81%E3%80%81%E5%AE%8C%E5%96%84%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E8%87%AA%E5%AE%9A%E4%B9%89.md&#34;&gt;day15-macOS支持、完善业务逻辑自定义&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;todo list&lt;/h3&gt; &#xA;&lt;p&gt;定时器&lt;/p&gt; &#xA;&lt;p&gt;日志系统&lt;/p&gt; &#xA;&lt;p&gt;HTTP协议支持&lt;/p&gt; &#xA;&lt;p&gt;webbench测试&lt;/p&gt; &#xA;&lt;p&gt;文件下载断点续传&lt;/p&gt; &#xA;&lt;p&gt;静态资源存储&lt;/p&gt; &#xA;&lt;p&gt;......&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;能力一般、水平有限，如果发现我的教程有不正确或者值得改进的地方，欢迎提issue或直接PR。&lt;/p&gt; &#xA;&lt;p&gt;欢迎大家为本项目贡献自己的代码，如果有你觉得更好的代码，请提issue或者直接PR，所有建议都会被考虑。&lt;/p&gt; &#xA;&lt;p&gt;贡献代码请到&lt;a href=&#34;https://github.com/yuesong-feng/pine&#34;&gt;pine&lt;/a&gt;项目，这是本教程开发的网络库，也是最新的代码版本。&lt;/p&gt;</summary>
  </entry>
</feed>