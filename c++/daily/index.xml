<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-20T01:28:06Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Alex313031/thorium</title>
    <updated>2023-10-20T01:28:06Z</updated>
    <id>tag:github.com,2023-10-20:/Alex313031/thorium</id>
    <link href="https://github.com/Alex313031/thorium" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chromium fork named after radioactive element No. 90. Windows and MacOS/Raspi/Android/Special builds are in different repositories, links are towards the top of the README.md.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/alex313031/thorium?label=Version%3A&#34; alt=&#34;GitHub tag (latest SemVer)&#34;&gt; &amp;nbsp;&lt;img src=&#34;https://img.shields.io/github/license/alex313031/thorium?color=green&amp;amp;label=License%3A&#34; alt=&#34;GitHub&#34;&gt; &amp;nbsp;&lt;img src=&#34;https://img.shields.io/github/commit-activity/w/alex313031/thorium?color=blueviolet&amp;amp;label=Commit%20Activity%3A&#34; alt=&#34;GitHub commit activity&#34;&gt; &amp;nbsp;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/ChromiumBrowser?style=social&#34; alt=&#34;Subreddit subscribers&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Thorium&lt;/h1&gt; &#xA;&lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/NEW/thorium_ver_2048_grey_old.png&#34;&gt; &#xA;&lt;h2&gt;Chromium fork for linux named after &lt;a href=&#34;https://en.wikipedia.org/wiki/Thorium&#34;&gt;radioactive element No. 90&lt;/a&gt;. Windows/MacOS/RasPi/Android/Other builds see below.&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Always built with the latest stable version of &lt;a href=&#34;https://www.chromium.org/&#34;&gt;Chromium&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Intended to behave like and have the featureset of Google Chrome, with differences/patches/enhancements listed below.&lt;/li&gt; &#xA; &lt;li&gt;Includes &lt;a href=&#34;https://www.widevine.com/&#34;&gt;Widevine&lt;/a&gt;, &lt;a href=&#34;https://tools.woolyss.com/html5-audio-video-tester/&#34;&gt;All Codecs&lt;/a&gt;, Chrome Plugins, as well as thinLTO, CFlag, LDFlag, LLVM Loop, and PGO compiler optimizations. It is built with &lt;a href=&#34;https://en.wikipedia.org/wiki/SSE4&#34;&gt;SSE4&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&#34;&gt;AVX&lt;/a&gt;, and &lt;a href=&#34;https://en.wikipedia.org/wiki/AES_instruction_set&#34;&gt;AES&lt;/a&gt;, so it won&#39;t launch on CPU&#39;s below 2nd gen Core or AMD FX, but benefits from Advanced Vector EXtensions. If your CPU lacks AVX, you can use builds from &lt;a href=&#34;https://github.com/Alex313031/Thorium-Special&#34;&gt;Thorium Special&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other Builds &amp;nbsp;&lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/STAGING/winflag_animated.gif&#34; width=&#34;34&#34;&gt; &amp;nbsp;&lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/STAGING/AVX2.png&#34; width=&#34;48&#34;&gt; &amp;nbsp;&lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/STAGING/apple.png&#34; width=&#34;30&#34;&gt; &amp;nbsp;&lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/STAGING/Android_Robot.svg?sanitize=true&#34; width=&#34;26&#34;&gt; &amp;nbsp;&lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/STAGING/Raspberry_Pi_Logo.svg?sanitize=true&#34; width=&#34;24&#34;&gt; &amp;nbsp;&lt;img src=&#34;https://raw.githubusercontent.com/Alex313031/thorium-win7/main/logos/STAGING/win7/compatible-with-windows-7.png&#34; width=&#34;28&#34;&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&amp;nbsp;– Windows builds are here &amp;gt; &lt;a href=&#34;https://github.com/Alex313031/Thorium-Win&#34;&gt;Thorium Win&lt;/a&gt; &lt;br&gt; &amp;nbsp;– AVX2 Builds for Windows and Linux &amp;gt; &lt;a href=&#34;https://github.com/Alex313031/Thorium-AVX2&#34;&gt;Thorium AVX2&lt;/a&gt; &lt;br&gt; &amp;nbsp;– MacOS (M1 and X64) builds are located at &amp;gt; &lt;a href=&#34;https://github.com/Alex313031/Thorium-Mac&#34;&gt;Thorium Mac&lt;/a&gt; &lt;br&gt; &amp;nbsp;– Android (arm32 &amp;amp; arm64) builds are located at &amp;gt; &lt;a href=&#34;https://github.com/Alex313031/Thorium-Android&#34;&gt;Thorium Android&lt;/a&gt; I might also occasionally post x86 builds. &lt;br&gt; &amp;nbsp;– Raspberry Pi builds are located at &amp;gt; &lt;a href=&#34;https://github.com/Alex313031/Thorium-Raspi&#34;&gt;Thorium Raspi&lt;/a&gt; For the Pi 3B/3B+ and Pi 4/400. &lt;br&gt; &amp;nbsp;– Special builds are located at &amp;gt; &lt;a href=&#34;https://github.com/Alex313031/Thorium-Special&#34;&gt;Thorium Special&lt;/a&gt; You can find SSE3 builds for CPUs without AVX here. &lt;br&gt; &amp;nbsp;– Thorium Website with deb repo for auto-updating on Linux &amp;gt; &lt;a href=&#34;https://thorium.rocks/&#34;&gt;https://thorium.rocks/&lt;/a&gt; &lt;br&gt; &amp;nbsp;– &lt;strong&gt;NEW&lt;/strong&gt;: Windows 7 / 8 / 8.1 / Server 2012 builds in &amp;gt; &lt;a href=&#34;https://github.com/Alex313031/thorium-win7&#34;&gt;Thorium Win7&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;FEATURES &amp;amp; DIFFERENCES BETWEEN CHROMIUM AND THORIUM &lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/NEW/bulb_light.svg#gh-dark-mode-only&#34;&gt; &lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/NEW/bulb_dark.svg#gh-light-mode-only&#34;&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Various compiler flags that improve performance and target &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&#34;&gt;AVX&lt;/a&gt; CPU&#39;s (read &lt;a href=&#34;https://github.com/Alex313031/thorium/raw/main/infra/PATCHES.md&#34;&gt;PATCHES.md&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;Experimental &lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP&#34;&gt;MPEG-DASH&lt;/a&gt; support.&lt;/li&gt; &#xA;  &lt;li&gt;HEVC/H.265 support on Linux and Windows.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://jpeg.org/jpegxl/&#34;&gt;JPEG XL&lt;/a&gt; Image File Format turned on by default.&lt;/li&gt; &#xA;  &lt;li&gt;Enable &lt;a href=&#34;https://support.google.com/chrome/answer/10538231?hl&#34;&gt;Live Caption&lt;/a&gt; (SODA) on all builds.&lt;/li&gt; &#xA;  &lt;li&gt;Experimental PDF annotation support (called &#34;Ink&#34; on ChromiumOS). # DISABLED FOR NOW BECAUSE OF CRASHES.&lt;/li&gt; &#xA;  &lt;li&gt;Patches from Debian including font rendering patch, VAAPI Patch, Intel HD support patch, native notifications patch, title bar patch, and... the VDPAU Patch!! (Rejoice Nvidia users)&lt;/li&gt; &#xA;  &lt;li&gt;VAAPI on Wayland Patch (Thanks AUR and @pierro78)&lt;/li&gt; &#xA;  &lt;li&gt;Audio Sandbox patch.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/DNS_over_HTTPS&#34;&gt;DoH&lt;/a&gt; (DNS over HTTPS) patches from Bromite.&lt;/li&gt; &#xA;  &lt;li&gt;Enable &lt;a href=&#34;https://allaboutdnt.com/&#34;&gt;Do Not Track&lt;/a&gt; by default patch from Vanadium.&lt;/li&gt; &#xA;  &lt;li&gt;Show full URLs including trailing slashes in address bar by default.&lt;/li&gt; &#xA;  &lt;li&gt;Disable &lt;a href=&#34;https://en.wikipedia.org/wiki/Federated_Learning_of_Cohorts&#34;&gt;FLOC&lt;/a&gt; patch.&lt;/li&gt; &#xA;  &lt;li&gt;Disable annoying Google API Key Infobar warning (you can still use API Keys to enable sync) from Ungoogled Chromium.&lt;/li&gt; &#xA;  &lt;li&gt;Disable annoying Default Browser Infobar warning.&lt;/li&gt; &#xA;  &lt;li&gt;Adds &lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo&lt;/a&gt;, &lt;a href=&#34;https://search.brave.com/&#34;&gt;Brave Search&lt;/a&gt;, &lt;a href=&#34;https://www.ecosia.org/&#34;&gt;Ecosia&lt;/a&gt;, &lt;a href=&#34;https://www.ask.com/&#34;&gt;Ask.com&lt;/a&gt;, and &lt;a href=&#34;https://yandex.com/&#34;&gt;Yandex.com&lt;/a&gt; in US and other locales, along with the normal search engines.&lt;/li&gt; &#xA;  &lt;li&gt;Always use the local NTP (New Tab Page) regardless of search engine.&lt;/li&gt; &#xA;  &lt;li&gt;Fix icons when distilling page content in &lt;a href=&#34;https://www.howtogeek.com/423643/how-to-use-google-chromes-hidden-reader-mode/&#34;&gt;Reader Mode&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Enable new Menu UI when right clicking the Reload button. (Adds &#39;Normal Reload&#39;, &#39;Hard Reload&#39;, and &#39;Clear Cache and Hard Reload&#39;)&lt;/li&gt; &#xA;  &lt;li&gt;Home button and Chrome Labs shown by Default.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.chromium.org/developers/design-documents/dns-prefetching/&#34;&gt;Prefetch&lt;/a&gt; settings updated to respect privacy.&lt;/li&gt; &#xA;  &lt;li&gt;Patches for &lt;a href=&#34;https://chromium.googlesource.com/chromium/src/tools/gn/+/48062805e19b4697c5fbd926dc649c78b6aaa138/README.md&#34;&gt;GN&lt;/a&gt; and &lt;a href=&#34;https://chromium.googlesource.com/chromium/src/+/HEAD/docs/design/sandbox.md&#34;&gt;chrome_sandbox&lt;/a&gt; when building.&lt;/li&gt; &#xA;  &lt;li&gt;Remove the addition of the Chrome APT sources.list during installation.&lt;/li&gt; &#xA;  &lt;li&gt;Widevine CDM Patch for Linux.&lt;/li&gt; &#xA;  &lt;li&gt;GTK auto dark mode patch&lt;/li&gt; &#xA;  &lt;li&gt;Various new flags either developed from scratch, or added from Ungoogled Chromium. See &lt;a href=&#34;https://github.com/Alex313031/thorium/raw/main/infra/PATCHES.md&#34;&gt;PATCHES.md&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Enable Parallel Downloading by Default.&lt;/li&gt; &#xA;  &lt;li&gt;Inclusion of &lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/STAGING/pak.png&#34; width=&#34;16&#34;&gt; &lt;a href=&#34;https://github.com/Alex313031/thorium/tree/main/pak_src#readme&#34;&gt;pak&lt;/a&gt; a utility for packing and unpacking the &lt;a href=&#34;https://textslashplain.com/2022/05/03/chromium-internals-pak-files/&#34;&gt;*.pak&lt;/a&gt; files in Thorium or any other Chromium based browser.&lt;/li&gt; &#xA;  &lt;li&gt;Logo and Branding/Naming changed to the Thorium logo, Thorium name, and &#34;Alex313031&#34; being appended to &#34;The Chromium Authors&#34; in credits, etc.&lt;/li&gt; &#xA;  &lt;li&gt;.desktop file includes useful cmdline flags that enable experimental or useful features. (See &lt;a href=&#34;https://github.com/Alex313031/thorium/raw/main/infra/PATCHES.md&#34;&gt;PATCHES.md&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;Includes installer patches and files to include &lt;a href=&#34;https://chromedriver.chromium.org/home&#34;&gt;ChromeDriver&lt;/a&gt; and &lt;em&gt;thorium_shell&lt;/em&gt; &lt;a href=&#34;https://chromium.googlesource.com/chromium/src/+/HEAD/docs/testing/web_tests_in_content_shell.md&#34;&gt;(content_shell)&lt;/a&gt;, with a .desktop file being provided for thorium_shell (named thorium-shell.desktop and shows in desktop environments as Thorium Content Shell). These are also included in the Windows releases, but it doesn&#39;t make a shorcut, although a .png and .ico is in the install directory for you to make your own shortcut with an icon. You can also run content_shell with the command thorium-shell (custom wrapper for it, located in /usr/bin/). You can run ChromeDriver at /usr/bin/chromedriver or chromedriver.exe on Windows. Also, patches for abseil library and mini_installer when building with AVX on Windows.&lt;/li&gt; &#xA;  &lt;li&gt;Right clicking the launcher after install gives three additional desktop actions, one to open thorium-shell, another to open in Safe Mode which disables any flags one has set in chrome://flags until the next launch, and lastly to open in Dark Mode which appends the --force-dark-mode flag.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For more info, read the &lt;a href=&#34;https://github.com/Alex313031/thorium/raw/main/infra/PATCHES.md&#34;&gt;PATCHES.md&lt;/a&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Known bugs are in the &lt;a href=&#34;https://github.com/Alex313031/thorium/raw/main/infra/BUGS.md&#34;&gt;BUGS.md&lt;/a&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;A list of Chromium command line flags can be found at &amp;gt; &lt;a href=&#34;https://peter.sh/experiments/chromium-command-line-switches&#34;&gt;https://peter.sh/experiments/chromium-command-line-switches&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building &lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/NEW/build_light.svg#gh-dark-mode-only&#34;&gt; &lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/NEW/build_dark.svg#gh-light-mode-only&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;See &amp;gt; &lt;a href=&#34;https://github.com/Alex313031/thorium/raw/main/docs/BUILDING.md&#34;&gt;https://github.com/Alex313031/thorium/blob/main/docs/BUILDING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Debugging &lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/STAGING/bug.svg?sanitize=true&#34; width=&#34;28&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;See &amp;gt; &lt;a href=&#34;https://github.com/Alex313031/thorium/tree/main/infra/DEBUG#readme&#34;&gt;https://github.com/Alex313031/thorium/tree/main/infra/DEBUG#readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&amp;nbsp;− &lt;a href=&#34;https://www.reddit.com/r/ChromiumBrowser/&#34;&gt;https://www.reddit.com/r/ChromiumBrowser/&lt;/a&gt; is a subreddit I made for Thorium and general Thorium/Chromium discussion, &lt;a href=&#34;https://thorium.rocks/&#34;&gt;https://thorium.rocks/&lt;/a&gt; is the website I made for it, and &lt;a href=&#34;https://alex313031.blogspot.com/&#34;&gt;https://alex313031.blogspot.com/&lt;/a&gt; is a blog I made relating to Thorium/ThoriumOS. &lt;br&gt; &amp;nbsp;− I also build ChromiumOS (now called ThoriumOS) with Thorium, Codecs, Widevine, linux-firmware/modules, and extra packages at &amp;gt; &lt;a href=&#34;https://github.com/Alex313031/ChromiumOS/&#34;&gt;https://github.com/Alex313031/ChromiumOS/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;− Thanks to &lt;a href=&#34;https://github.com/robrich999/&#34;&gt;https://github.com/robrich999/&lt;/a&gt; for some info and fixes that went into this project.&lt;br&gt; &amp;nbsp;− Thanks to &lt;a href=&#34;https://github.com/midzer/&#34;&gt;https://github.com/midzer/&lt;/a&gt; for support and helping with builds. &lt;br&gt; &amp;nbsp;− Also thanks to &lt;a href=&#34;https://github.com/bromite/bromite&#34;&gt;https://github.com/bromite/bromite&lt;/a&gt;, &lt;a href=&#34;https://github.com/saiarcot895/chromium-ubuntu-build&#34;&gt;https://github.com/saiarcot895/chromium-ubuntu-build&lt;/a&gt;, &lt;a href=&#34;https://github.com/Eloston/ungoogled-chromium&#34;&gt;https://github.com/Eloston/ungoogled-chromium&lt;/a&gt;, &lt;a href=&#34;https://github.com/GrapheneOS/Vanadium&#34;&gt;https://github.com/GrapheneOS/Vanadium&lt;/a&gt;, and &lt;a href=&#34;https://github.com/iridium-browser/iridium-browser&#34;&gt;https://github.com/iridium-browser/iridium-browser&lt;/a&gt; for patch code. &lt;br&gt; &amp;nbsp;− The pak_src dir, and the binaries in &lt;em&gt;pack_src/bin&lt;/em&gt; are credited to @freeer &lt;a href=&#34;https://github.com/myfreeer/chrome-pak-customizer/&#34;&gt;https://github.com/myfreeer/chrome-pak-customizer/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp; &lt;strong&gt;NOTE:&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alex313031/thorium/raw/main/infra/libpepflashplayer.so&#34;&gt;&lt;em&gt;libpepflashplayer.so&lt;/em&gt;&lt;/a&gt; is included for posterity and can be used to enable Adobe Flash on older Chromium releases. ʘ‿ʘ&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Thanks for using Thorium!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/STAGING/Thorium90_504.jpg&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/STAGING/GitHub/GitHub-Mark-Light-32px.png#gh-dark-mode-only&#34;&gt; &lt;img src=&#34;https://github.com/Alex313031/thorium/raw/main/logos/STAGING/GitHub/GitHub-Mark-32px.png#gh-light-mode-only&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zxing-cpp/zxing-cpp</title>
    <updated>2023-10-20T01:28:06Z</updated>
    <id>tag:github.com,2023-10-20:/zxing-cpp/zxing-cpp</id>
    <link href="https://github.com/zxing-cpp/zxing-cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C++ port of ZXing&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/zxing-cpp/zxing-cpp/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/zxing-cpp/zxing-cpp/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ZXing-C++&lt;/h1&gt; &#xA;&lt;p&gt;ZXing-C++ (&#34;zebra crossing&#34;) is an open-source, multi-format linear/matrix barcode image processing library implemented in C++.&lt;/p&gt; &#xA;&lt;p&gt;It was originally ported from the Java &lt;a href=&#34;https://github.com/zxing/zxing&#34;&gt;ZXing Library&lt;/a&gt; but has been developed further and now includes many improvements in terms of quality and performance. It can both read and write barcodes in a number of formats.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;You can sponsor this library at &lt;a href=&#34;https://github.com/sponsors/axxel&#34;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Named Sponsors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Liftric&#34;&gt;Liftric GmbH&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kurzdigital&#34;&gt;KURZ Digital Solutions GmbH &amp;amp; Co. KG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/usefulsensors&#34;&gt;Useful Sensors Inc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sergio-&#34;&gt;Sergio Olivo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks a lot for your contribution!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Written in pure C++17 (/C++20), no third-party dependencies (for the library itself)&lt;/li&gt; &#xA; &lt;li&gt;Thread safe&lt;/li&gt; &#xA; &lt;li&gt;Wrappers/Bindings for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zxing-cpp/zxing-cpp/master/wrappers/android/README.md&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zxing-cpp/zxing-cpp/master/wrappers/c/README.md&#34;&gt;C&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zxing-cpp/zxing-cpp/master/wrappers/ios/README.md&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zxing-cpp/zxing-cpp/master/wrappers/python/README.md&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zxing-cpp/zxing-cpp/master/wrappers/wasm/README.md&#34;&gt;WebAssembly&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zxing-cpp/zxing-cpp/master/wrappers/winrt/README.md&#34;&gt;WinRT&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_zxing&#34;&gt;Flutter&lt;/a&gt; (external project)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Formats&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Linear product&lt;/th&gt; &#xA;   &lt;th&gt;Linear industrial&lt;/th&gt; &#xA;   &lt;th&gt;Matrix&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UPC-A&lt;/td&gt; &#xA;   &lt;td&gt;Code 39&lt;/td&gt; &#xA;   &lt;td&gt;QR Code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UPC-E&lt;/td&gt; &#xA;   &lt;td&gt;Code 93&lt;/td&gt; &#xA;   &lt;td&gt;Micro QR Code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EAN-8&lt;/td&gt; &#xA;   &lt;td&gt;Code 128&lt;/td&gt; &#xA;   &lt;td&gt;Aztec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EAN-13&lt;/td&gt; &#xA;   &lt;td&gt;Codabar&lt;/td&gt; &#xA;   &lt;td&gt;DataMatrix&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DataBar&lt;/td&gt; &#xA;   &lt;td&gt;DataBar Expanded&lt;/td&gt; &#xA;   &lt;td&gt;PDF417&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ITF&lt;/td&gt; &#xA;   &lt;td&gt;MaxiCode (partial)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;[Note:]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DataBar used to be called RSS.&lt;/li&gt; &#xA; &lt;li&gt;DataBar, MaxiCode and Micro QR Code are not supported for writing.&lt;/li&gt; &#xA; &lt;li&gt;Building with C++20 (see &lt;a href=&#34;https://github.com/zxing-cpp/zxing-cpp/raw/d4b0f502775857f257d13efd25fb840ece1bca3e/CMakeLists.txt#L45&#34;&gt;CMakeLists.txt&lt;/a&gt;) changes the behaviour of the library: it then supports multi-symbol and position independent detection for DataMatrix. This comes at a noticable performace cost. To enable this in the Android library, one needs to use at least NDK &lt;a href=&#34;https://github.com/zxing-cpp/zxing-cpp/raw/d4b0f502775857f257d13efd25fb840ece1bca3e/wrappers/android/zxingcpp/build.gradle#L9&#34;&gt;version 25&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;To read barcodes:&lt;/h3&gt; &#xA;&lt;p&gt;As an example, have a look at &lt;a href=&#34;https://raw.githubusercontent.com/zxing-cpp/zxing-cpp/master/example/ZXingReader.cpp&#34;&gt;&lt;code&gt;ZXingReader.cpp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Load your image into memory (3rd-party library required).&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;ReadBarcodes()&lt;/code&gt; from &lt;a href=&#34;https://raw.githubusercontent.com/zxing-cpp/zxing-cpp/master/core/src/ReadBarcode.h&#34;&gt;&lt;code&gt;ReadBarcode.h&lt;/code&gt;&lt;/a&gt;, the simplest API to get a list of &lt;code&gt;Result&lt;/code&gt; objects.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;To write barcodes:&lt;/h3&gt; &#xA;&lt;p&gt;As an example, have a look at &lt;a href=&#34;https://raw.githubusercontent.com/zxing-cpp/zxing-cpp/master/example/ZXingWriter.cpp&#34;&gt;&lt;code&gt;ZXingWriter.cpp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/zxing-cpp/zxing-cpp/master/core/src/MultiFormatWriter.h&#34;&gt;&lt;code&gt;MultiFormatWriter&lt;/code&gt;&lt;/a&gt; instance with the format you want to generate. Set encoding and margins if needed.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;encode()&lt;/code&gt; with text content and the image size. This returns a &lt;a href=&#34;https://raw.githubusercontent.com/zxing-cpp/zxing-cpp/master/core/src/BitMatrix.h&#34;&gt;&lt;code&gt;BitMatrix&lt;/code&gt;&lt;/a&gt; which is a binary image of the barcode where &lt;code&gt;true&lt;/code&gt; == visual black and &lt;code&gt;false&lt;/code&gt; == visual white.&lt;/li&gt; &#xA; &lt;li&gt;Convert the bit matrix to your native image format. See also the &lt;code&gt;ToMatrix&amp;lt;T&amp;gt;(BitMatrix&amp;amp;)&lt;/code&gt; helper function.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Web Demos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zxing-cpp.github.io/zxing-cpp/demo_reader.html&#34;&gt;Read barcodes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zxing-cpp.github.io/zxing-cpp/demo_writer.html&#34;&gt;Write barcodes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zxing-cpp.github.io/zxing-cpp/demo_cam_reader.html&#34;&gt;Read barcodes from camera&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[Note: those live demos are not necessarily fully up-to-date at all times.]&lt;/p&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;p&gt;These are the generic instructions to build the library on Windows/macOS/Linux. For details on how to build the individual wrappers, follow the links above.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure &lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt; version 3.15 or newer is installed.&lt;/li&gt; &#xA; &lt;li&gt;Make sure a C++17 compliant compiler is installed (minimum VS 2019 16.8 / gcc 7 / clang 5).&lt;/li&gt; &#xA; &lt;li&gt;See the cmake &lt;code&gt;BUILD_...&lt;/code&gt; options to enable the testing code, python wrapper, etc.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/zxing-cpp/zxing-cpp.git --single-branch --depth 1&#xA;cmake -S zxing-cpp -B zxing-cpp.release -DCMAKE_BUILD_TYPE=Release&#xA;cmake --build zxing-cpp.release -j8 --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[Note: binary packages are available for/as &lt;a href=&#34;https://github.com/Microsoft/vcpkg/tree/master/ports/nu-book-zxing-cpp&#34;&gt;vcpkg&lt;/a&gt;, &lt;a href=&#34;https://github.com/conan-io/conan-center-index/tree/master/recipes/zxing-cpp&#34;&gt;conan&lt;/a&gt;, &lt;a href=&#34;https://github.com/msys2/MINGW-packages/tree/master/mingw-w64-zxing-cpp&#34;&gt;mingw&lt;/a&gt; and a bunch of &lt;a href=&#34;https://repology.org/project/zxing-cpp/versions&#34;&gt;linux distributions&lt;/a&gt;.]&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TileDB-Inc/TileDB</title>
    <updated>2023-10-20T01:28:06Z</updated>
    <id>tag:github.com,2023-10-20:/TileDB-Inc/TileDB</id>
    <link href="https://github.com/TileDB-Inc/TileDB" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Universal Storage Engine&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://tiledb.com&#34;&gt;&lt;img src=&#34;https://github.com/TileDB-Inc/TileDB/raw/dev/doc/source/_static/tiledb-logo_color_no_margin_@4x.png&#34; alt=&#34;TileDB logo&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TileDB-Inc/TileDB/actions/workflows/full-ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/TileDB-Inc/TileDB/actions/workflows/full-ci.yml/badge.svg?branch=dev&#34; alt=&#34;Full CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/TileDB-Inc/CI/_build/latest?definitionId=2&amp;amp;branchName=dev&#34;&gt;&lt;img src=&#34;https://dev.azure.com/TileDB-Inc/CI/_apis/build/status/TileDB-Inc.TileDB?branchName=dev&#34; alt=&#34;Azure Pipelines&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://anaconda.org/conda-forge/TileDB&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TileDB-Inc/TileDB/dev/doc/anaconda.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;https://anaconda.org/conda-forge/TileDB/badges/downloads.svg?sanitize=true&#34; alt=&#34;Anaconda download count badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The Universal Storage Engine&lt;/h1&gt; &#xA;&lt;p&gt;TileDB is a powerful engine for storing and accessing &lt;strong&gt;dense and sparse multi-dimensional arrays&lt;/strong&gt;, which can help you model any complex data efficiently. It is an embeddable C++ library that works on Linux, macOS, and Windows. It is open-sourced under the permissive MIT License, developed and maintained by &lt;a href=&#34;https://tiledb.com/&#34;&gt;TileDB, Inc&lt;/a&gt;. To distinguish this project from other TileDB offerings, we often refer to it as &lt;em&gt;TileDB Embedded&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;TileDB includes the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for both &lt;strong&gt;dense&lt;/strong&gt; and &lt;strong&gt;sparse arrays&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;strong&gt;dataframes&lt;/strong&gt; and &lt;strong&gt;key-value stores&lt;/strong&gt; (via sparse arrays)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cloud storage&lt;/strong&gt; (AWS S3, Google Cloud Storage, Azure Blob Storage)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chunked&lt;/strong&gt; (tiled) arrays&lt;/li&gt; &#xA; &lt;li&gt;Multiple &lt;strong&gt;compression&lt;/strong&gt;, &lt;strong&gt;encryption&lt;/strong&gt; and &lt;strong&gt;checksum&lt;/strong&gt; filters&lt;/li&gt; &#xA; &lt;li&gt;Fully &lt;strong&gt;multi-threaded&lt;/strong&gt; implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parallel IO&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data versioning&lt;/strong&gt; (rapid updates, time traveling)&lt;/li&gt; &#xA; &lt;li&gt;Array &lt;strong&gt;metadata&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Array &lt;strong&gt;groups&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Numerous &lt;strong&gt;APIs&lt;/strong&gt; on top of the C++ library&lt;/li&gt; &#xA; &lt;li&gt;Numerous &lt;strong&gt;integrations&lt;/strong&gt; (Spark, Dask, MariaDB, GDAL, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use TileDB to store data in a variety of applications, such as Genomics, Geospatial, Finance and more. The power of TileDB stems from the fact that any data can be modeled efficiently as either a dense or a sparse multi-dimensional array, which is the format used internally by most data science tooling. By storing your data and metadata in TileDB arrays, you abstract all the data storage and management pains, while efficiently accessing the data with your favorite data science tool.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;You can install the TileDB C++ library as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Conda (macOS, Linux, Windows):&#xA;$ conda install -c conda-forge tiledb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(see links below for Python, R, and other API installation instructions)&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use the Docker image we provide:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker pull tiledb/tiledb&#xA;$ docker run -it tiledb/tiledb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We include several &lt;a href=&#34;https://github.com/TileDB-Inc/TileDB/tree/dev/examples&#34;&gt;examples&lt;/a&gt;. You can start with the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TileDB-Inc/TileDB/raw/dev/examples/cpp_api/quickstart_dense.cc&#34;&gt;Dense array example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TileDB-Inc/TileDB/raw/dev/examples/cpp_api/quickstart_sparse.cc&#34;&gt;Sparse array example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the detailed TileDB documentation at &lt;a href=&#34;https://docs.tiledb.com&#34;&gt;https://docs.tiledb.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://docs.tiledb.com/main/how-to/installation/building-from-source&#34;&gt;building from source&lt;/a&gt; in the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Format Specification&lt;/h2&gt; &#xA;&lt;p&gt;The TileDB data format is open-source and can be found &lt;a href=&#34;https://raw.githubusercontent.com/TileDB-Inc/TileDB/dev/format_spec/FORMAT_SPEC.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Application-specific Packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TileDB-Inc/TileDB-Vector-Search&#34;&gt;TileDB-Vector-Search&lt;/a&gt;: open source, embeddable, and cloud-native vector similarity search database built on top of TileDB in high-performance C++, with an easy-to-use Python API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TileDB-Inc/TileDB-VCF&#34;&gt;TileDB-VCF&lt;/a&gt;: TileDB library and query engine for genomic variant data. (&lt;a href=&#34;https://docs.tiledb.com/main/integrations-and-extensions/genomics/population-genomics&#34;&gt;documentation&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/single-cell-data/TileDB-SOMA&#34;&gt;TileDB-SOMA&lt;/a&gt;: TileDB implementation of the &lt;a href=&#34;https://github.com/single-cell-data/SOMA&#34;&gt;SOMA&lt;/a&gt; specification for single-cell genomic data. (&lt;a href=&#34;https://github.com/single-cell-data/TileDB-SOMA#quick-start&#34;&gt;documentation&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TileDB-Inc/TileDB-BioImaging&#34;&gt;TileDB-BioImaging&lt;/a&gt;: TileDB library for biomedical imaging, with support for image-optimized compression using WebP.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;APIs&lt;/h2&gt; &#xA;&lt;p&gt;The TileDB team maintains a variety of APIs built on top of the C++ library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C (&lt;a href=&#34;https://github.com/TileDB-Inc/TileDB/tree/dev/examples/c_api&#34;&gt;examples&lt;/a&gt;, &lt;a href=&#34;https://tiledb-inc-tiledb.readthedocs-hosted.com/en/stable/c-api.html&#34;&gt;API docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;C++ (&lt;a href=&#34;https://github.com/TileDB-Inc/TileDB/tree/dev/examples/cpp_api&#34;&gt;examples&lt;/a&gt;, &lt;a href=&#34;https://tiledb-inc-tiledb.readthedocs-hosted.com/en/stable/c++-api.html&#34;&gt;API docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TileDB-Inc/TileDB-Py&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TileDB-Inc/TileDB-R&#34;&gt;R&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TileDB-Inc/TileDB-Java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TileDB-Inc/TileDB-Go&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TileDB-Inc/TileDB-CSharp&#34;&gt;C#&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;TileDB is also integrated with several popular databases and data science tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tiledb.com/main/integrations-and-extensions/distributed-computing/spark&#34;&gt;Spark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tiledb.com/main/integrations-and-extensions/distributed-computing/dask&#34;&gt;Dask&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tiledb.com/main/integrations-and-extensions/sql/mariadb&#34;&gt;MariaDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tiledb.com/main/integrations-and-extensions/sql/prestodb&#34;&gt;PrestoDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tiledb.com/main/integrations-and-extensions/distributed-computing/prestodb-1&#34;&gt;Trino&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tiledb.com/main/integrations-and-extensions/geospatial&#34;&gt;Geospatial&lt;/a&gt; (GDAL, PDAL, Rasterio)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get involved&lt;/h2&gt; &#xA;&lt;p&gt;TileDB Embedded is an open-source project and welcomes all forms of contributions. Contributors to the project should read over the &lt;a href=&#34;https://github.com/TileDB-Inc/TileDB/raw/dev/CONTRIBUTING.md&#34;&gt;contribution docs&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;d love to hear from you. Drop us a line at &lt;a href=&#34;mailto:hello@tiledb.com&#34;&gt;hello@tiledb.com&lt;/a&gt;, visit our &lt;a href=&#34;https://forum.tiledb.com/&#34;&gt;forum&lt;/a&gt; or &lt;a href=&#34;https://tiledb.com/contact&#34;&gt;contact form&lt;/a&gt;, or &lt;a href=&#34;https://twitter.com/tiledb&#34;&gt;follow us on Twitter&lt;/a&gt; to stay informed of updates and news.&lt;/p&gt;</summary>
  </entry>
</feed>