<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-05T01:29:54Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shadps4-emu/shadPS4</title>
    <updated>2024-12-05T01:29:54Z</updated>
    <id>tag:github.com,2024-12-05:/shadps4-emu/shadPS4</id>
    <link href="https://github.com/shadps4-emu/shadPS4" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PS4 emulator for Windows,Linux,MacOS&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://shadps4.net/&#34;&gt;&lt;img src=&#34;https://github.com/shadps4-emu/shadPS4/raw/main/.github/shadps4.png&#34; width=&#34;220&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;b&gt;shadPS4&lt;/b&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/bFJxfftGW6&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1080089157554155590?color=5865F2&amp;amp;label=shadPS4%20Discord&amp;amp;logo=Discord&amp;amp;logoColor=white&#34; width=&#34;240&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/shadps4-emu/shadPS4/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/shadps4-emu/shadPS4/total.svg?sanitize=true&#34; width=&#34;140&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://shadps4.net/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/shadPS4-website-8A2BE2&#34; width=&#34;150&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://x.com/shadps4&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-Join%20us-black?logo=X&amp;amp;logoColor=white&#34; width=&#34;100&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/shadps4-emu/shadPS4/stargazers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/shadps4-emu/shadPS4&#34; width=&#34;120&#34;&gt; &lt;/a&gt;&lt;/h1&gt;&#xA;&lt;a href=&#34;https://github.com/shadps4-emu/shadPS4/stargazers&#34;&gt; &lt;/a&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/shadps4-emu/shadPS4/stargazers&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://shadps4.net/&#34;&gt; &lt;img src=&#34;https://github.com/shadps4-emu/shadPS4/raw/main/documents/Screenshots/1.png&#34; width=&#34;400&#34;&gt; &lt;img src=&#34;https://github.com/shadps4-emu/shadPS4/raw/main/documents/Screenshots/2.png&#34; width=&#34;400&#34;&gt; &lt;img src=&#34;https://github.com/shadps4-emu/shadPS4/raw/main/documents/Screenshots/3.png&#34; width=&#34;400&#34;&gt; &lt;img src=&#34;https://github.com/shadps4-emu/shadPS4/raw/main/documents/Screenshots/4.png&#34; width=&#34;400&#34;&gt; &lt;/a&gt;&lt;/p&gt;&#xA;&lt;a href=&#34;https://shadps4.net/&#34;&gt; &lt;h1&gt;General information&lt;/h1&gt; &lt;p&gt;&lt;strong&gt;shadPS4&lt;/strong&gt; is an early &lt;strong&gt;PlayStation 4&lt;/strong&gt; emulator for &lt;strong&gt;Windows&lt;/strong&gt;, &lt;strong&gt;Linux&lt;/strong&gt; and &lt;strong&gt;macOS&lt;/strong&gt; written in C++.&lt;/p&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://shadps4.net/&#34;&gt;If you encounter problems or have doubts, do not hesitate to look at the &lt;/a&gt;&lt;a href=&#34;https://github.com/shadps4-emu/shadPS4/raw/main/documents/Quickstart/Quickstart.md&#34;&gt;&lt;strong&gt;Quickstart&lt;/strong&gt;&lt;/a&gt;.&lt;br&gt; To verify that a game works, you can look at &lt;a href=&#34;https://github.com/shadps4-emu/shadps4-game-compatibility&#34;&gt;&lt;strong&gt;shadPS4 Game Compatibility&lt;/strong&gt;&lt;/a&gt;.&lt;br&gt; To discuss shadPS4 development, suggest ideas or to ask for help, join our &lt;a href=&#34;https://discord.gg/bFJxfftGW6&#34;&gt;&lt;strong&gt;Discord server&lt;/strong&gt;&lt;/a&gt;.&lt;br&gt; To get the latest news, go to our &lt;a href=&#34;https://x.com/shadps4&#34;&gt;&lt;strong&gt;X (Twitter)&lt;/strong&gt;&lt;/a&gt; or our &lt;a href=&#34;https://shadps4.net/&#34;&gt;&lt;strong&gt;website&lt;/strong&gt;&lt;/a&gt;.&lt;br&gt; For those who&#39;d like to donate to the project, we now have a &lt;a href=&#34;https://ko-fi.com/shadps4&#34;&gt;&lt;strong&gt;Kofi page&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h1&gt;Status&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] shadPS4 is early in development, don&#39;t expect a flawless experience.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Currently, the emulator can successfully run games like &lt;a href=&#34;https://www.youtube.com/watch?v=wC6s0avpQRE&#34;&gt;&lt;strong&gt;Bloodborne&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=-3PA-Xwszts&#34;&gt;&lt;strong&gt;Dark Souls Remastered&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=Al7yz_5nLag&#34;&gt;&lt;strong&gt;Red Dead Redemption&lt;/strong&gt;&lt;/a&gt; and many other games.&lt;/p&gt; &#xA;&lt;h1&gt;Why&lt;/h1&gt; &#xA;&lt;p&gt;This project began as a fun project. Given our limited free time, it may take some time before shadPS4 can run more complex games, but we&#39;re committed to making small, regular updates.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;Check the build instructions for &lt;a href=&#34;https://github.com/shadps4-emu/shadPS4/raw/main/documents/building-windows.md&#34;&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;p&gt;Check the build instructions for &lt;a href=&#34;https://github.com/shadps4-emu/shadPS4/raw/main/documents/building-linux.md&#34;&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;macOS&lt;/h2&gt; &#xA;&lt;p&gt;Check the build instructions for &lt;a href=&#34;https://github.com/shadps4-emu/shadPS4/raw/main/documents/building-macos.md&#34;&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] macOS users need at least macOS 15 on Apple Silicon-based Mac devices and at least macOS 14 on Intel-based Mac devices.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Debugging and reporting issues&lt;/h1&gt; &#xA;&lt;p&gt;For more information on how to test, debug and report issues with the emulator or games, read the &lt;a href=&#34;https://github.com/shadps4-emu/shadPS4/raw/main/documents/Debugging/Debugging.md&#34;&gt;&lt;strong&gt;Debugging documentation&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Keyboard mapping&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Xbox and DualShock controllers work out of the box.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Controller button&lt;/th&gt; &#xA;   &lt;th&gt;Keyboard equivelant&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LEFT AXIS UP&lt;/td&gt; &#xA;   &lt;td&gt;W&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LEFT AXIS DOWN&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LEFT AXIS LEFT&lt;/td&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LEFT AXIS RIGHT&lt;/td&gt; &#xA;   &lt;td&gt;D&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RIGHT AXIS UP&lt;/td&gt; &#xA;   &lt;td&gt;I&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RIGHT AXIS DOWN&lt;/td&gt; &#xA;   &lt;td&gt;K&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RIGHT AXIS LEFT&lt;/td&gt; &#xA;   &lt;td&gt;J&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RIGHT AXIS RIGHT&lt;/td&gt; &#xA;   &lt;td&gt;L&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TRIANGLE&lt;/td&gt; &#xA;   &lt;td&gt;Numpad 8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CIRCLE&lt;/td&gt; &#xA;   &lt;td&gt;Numpad 6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CROSS&lt;/td&gt; &#xA;   &lt;td&gt;Numpad 2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQUARE&lt;/td&gt; &#xA;   &lt;td&gt;Numpad 4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PAD UP&lt;/td&gt; &#xA;   &lt;td&gt;UP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PAD DOWN&lt;/td&gt; &#xA;   &lt;td&gt;DOWN&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PAD LEFT&lt;/td&gt; &#xA;   &lt;td&gt;LEFT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PAD RIGHT&lt;/td&gt; &#xA;   &lt;td&gt;RIGHT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OPTIONS&lt;/td&gt; &#xA;   &lt;td&gt;RETURN&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BACK BUTTON / TOUCH PAD&lt;/td&gt; &#xA;   &lt;td&gt;SPACE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;L1&lt;/td&gt; &#xA;   &lt;td&gt;Q&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R1&lt;/td&gt; &#xA;   &lt;td&gt;U&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;L2&lt;/td&gt; &#xA;   &lt;td&gt;E&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R2&lt;/td&gt; &#xA;   &lt;td&gt;O&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;L3&lt;/td&gt; &#xA;   &lt;td&gt;X&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R3&lt;/td&gt; &#xA;   &lt;td&gt;M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Main team&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/georgemoralis&#34;&gt;&lt;strong&gt;georgemoralis&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raphaelthegreat&#34;&gt;&lt;strong&gt;raphaelthegreat&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/psucien&#34;&gt;&lt;strong&gt;psucien&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skmp&#34;&gt;&lt;strong&gt;skmp&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wheremyfoodat&#34;&gt;&lt;strong&gt;wheremyfoodat&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raziel1000&#34;&gt;&lt;strong&gt;raziel1000&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Logo is done by &lt;a href=&#34;https://github.com/Xphalnos&#34;&gt;&lt;strong&gt;Xphalnos&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you want to contribute, please look the &lt;a href=&#34;https://github.com/shadps4-emu/shadPS4/raw/main/CONTRIBUTING.md&#34;&gt;&lt;strong&gt;CONTRIBUTING.md&lt;/strong&gt;&lt;/a&gt; file.&lt;br&gt; Open a PR and we&#39;ll check it :)&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;a href=&#34;https://github.com/shadps4-emu/shadPS4/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=shadps4-emu/shadPS4&amp;amp;max=15&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Special Thanks&lt;/h1&gt; &#xA;&lt;p&gt;A few noteworthy teams/projects who&#39;ve helped us along the way are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wheremyfoodat/Panda3DS&#34;&gt;&lt;strong&gt;Panda3DS&lt;/strong&gt;&lt;/a&gt;: A multiplatform 3DS emulator from our co-author wheremyfoodat. They have been incredibly helpful in understanding and solving problems that came up from natively executing the x64 code of PS4 binaries&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/red-prig/fpPS4&#34;&gt;&lt;strong&gt;fpPS4&lt;/strong&gt;&lt;/a&gt;: The fpPS4 team has assisted massively with understanding some of the more complex parts of the PS4 operating system and libraries, by helping with reverse engineering work and research.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;yuzu&lt;/strong&gt;: Our shader compiler has been designed with yuzu&#39;s Hades compiler as a blueprint. This allowed us to focus on the challenges of emulating a modern AMD GPU while having a high-quality optimizing shader compiler implementation as a base.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/hydra-emu/hydra&#34;&gt;&lt;strong&gt;hydra&lt;/strong&gt;&lt;/a&gt;: A multisystem, multiplatform emulator (chip-8, GB, NES, N64) from Paris.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shadps4-emu/shadPS4/raw/main/LICENSE&#34;&gt;&lt;strong&gt;GPL-2.0 license&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wuye9036/CppTemplateTutorial</title>
    <updated>2024-12-05T01:29:54Z</updated>
    <id>tag:github.com,2024-12-05:/wuye9036/CppTemplateTutorial</id>
    <link href="https://github.com/wuye9036/CppTemplateTutorial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;中文的C++ Template的教学指南。与知名书籍C++ Templates不同，该系列教程将C++ Templates作为一门图灵完备的语言来讲授，以求帮助读者对Meta-Programming融会贯通。(正在施工中)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C++ Template 进阶指南 &#xA; &lt;!-- omit in toc --&gt;&lt;/h1&gt; &#xA;&lt;p&gt;章节目录由VSCode插件&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one&#34;&gt;Markdown All in One&lt;/a&gt;生成。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#1-%E5%89%8D%E8%A8%80&#34;&gt;1. 前言&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#11-c%E5%8F%A6%E7%B1%BB%E7%AE%80%E4%BB%8B%E6%AF%94%E4%BD%A0%E7%94%A8%E7%9A%84%E5%A4%8D%E6%9D%82%E4%BD%86%E6%AF%94%E4%BD%A0%E6%83%B3%E7%9A%84%E7%AE%80%E5%8D%95&#34;&gt;1.1. C++另类简介：比你用的复杂，但比你想的简单&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#12-%E9%80%82%E5%AE%9C%E8%AF%BB%E8%80%85%E7%BE%A4&#34;&gt;1.2. 适宜读者群&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#13-%E7%89%88%E6%9D%83&#34;&gt;1.3. 版权&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#14-%E6%8E%A8%E8%8D%90%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83&#34;&gt;1.4. 推荐编译环境&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#15-%E4%BD%93%E4%BE%8B&#34;&gt;1.5. 体例&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#151-%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81&#34;&gt;1.5.1. 示例代码&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#152-%E5%BC%95%E7%94%A8&#34;&gt;1.5.2. 引用&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#16-%E6%84%8F%E8%A7%81%E5%BB%BA%E8%AE%AE%E5%96%B7%E8%A1%A5%E9%81%97%E5%86%99%E4%BD%9C%E8%AE%A1%E5%88%92&#34;&gt;1.6. 意见、建议、喷、补遗、写作计划&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#2-template%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95&#34;&gt;2. Template的基本语法&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#21-%E4%BB%80%E4%B9%88%E6%98%AF%E6%A8%A1%E6%9D%BFtemplate&#34;&gt;2.1. 什么是模板(Template)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#22-%E7%B1%BB%E6%A8%A1%E6%9D%BF-class-template-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95&#34;&gt;2.2. 类模板 (Class Template) 的基本语法&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#221-%E6%A8%A1%E6%9D%BF%E7%B1%BB%E8%BF%98%E6%98%AF%E7%B1%BB%E6%A8%A1%E6%9D%BF&#34;&gt;2.2.1. “模板类”还是“类模板”&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#222-class-template%E7%9A%84%E4%B8%8E%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89&#34;&gt;2.2.2. Class Template的与成员变量定义&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#223-%E6%A8%A1%E6%9D%BF%E7%9A%84%E4%BD%BF%E7%94%A8&#34;&gt;2.2.3. 模板的使用&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#224-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E7%9A%84%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89&#34;&gt;2.2.4. 类模板的成员函数定义&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#23-%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF-function-template-%E5%85%A5%E9%97%A8&#34;&gt;2.3. 函数模板 (Function Template) 入门&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#231-%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%A3%B0%E6%98%8E%E5%92%8C%E5%AE%9A%E4%B9%89&#34;&gt;2.3.1. 函数模板的声明和定义&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#232-%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E4%BD%BF%E7%94%A8&#34;&gt;2.3.2. 函数模板的使用&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#24-%E6%95%B4%E5%9E%8B%E4%B9%9F%E5%8F%AF%E6%98%AFtemplate%E5%8F%82%E6%95%B0&#34;&gt;2.4. 整型也可是Template参数&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#25-%E6%A8%A1%E6%9D%BF%E5%BD%A2%E5%BC%8F%E4%B8%8E%E5%8A%9F%E8%83%BD%E6%98%AF%E7%BB%9F%E4%B8%80%E7%9A%84&#34;&gt;2.5. 模板形式与功能是统一的&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#3-%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&#34;&gt;3. 模板元编程基础&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#31-%E7%BC%96%E7%A8%8B%E5%85%83%E7%BC%96%E7%A8%8B%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B&#34;&gt;3.1. 编程，元编程，模板元编程&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#32-%E6%A8%A1%E6%9D%BF%E4%B8%96%E7%95%8C%E7%9A%84if-then-else%E7%B1%BB%E6%A8%A1%E6%9D%BF%E7%9A%84%E7%89%B9%E5%8C%96%E4%B8%8E%E5%81%8F%E7%89%B9%E5%8C%96&#34;&gt;3.2. 模板世界的If-Then-Else：类模板的特化与偏特化&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#321-%E6%A0%B9%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81&#34;&gt;3.2.1. 根据类型执行代码&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#322-%E7%89%B9%E5%8C%96&#34;&gt;3.2.2. 特化&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#323-%E7%89%B9%E5%8C%96%E4%B8%80%E4%BA%9B%E5%85%B6%E5%AE%83%E9%97%AE%E9%A2%98&#34;&gt;3.2.3. 特化：一些其它问题&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#33-%E5%8D%B3%E7%94%A8%E5%8D%B3%E6%8E%A8%E5%AF%BC&#34;&gt;3.3. 即用即推导&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#331-%E8%A7%86%E8%8B%A5%E6%97%A0%E7%9D%B9%E7%9A%84%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF&#34;&gt;3.3.1. 视若无睹的语法错误&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#332-%E5%90%8D%E7%A7%B0%E6%9F%A5%E6%89%BEi-am-who-i-am&#34;&gt;3.3.2. 名称查找：I am who I am&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#333-%E5%A4%9A%E4%BD%99%E7%9A%84--typename-%E5%85%B3%E9%94%AE%E5%AD%97&#34;&gt;3.3.3. “多余的” typename 关键字&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#34-%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93&#34;&gt;3.4. 本章小结&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#4-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%89%B9%E5%8C%96%E4%B8%8E%E5%81%8F%E7%89%B9%E5%8C%96&#34;&gt;4. 深入理解特化与偏特化&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#41-%E6%AD%A3%E7%A1%AE%E7%9A%84%E7%90%86%E8%A7%A3%E5%81%8F%E7%89%B9%E5%8C%96&#34;&gt;4.1. 正确的理解偏特化&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#411-%E5%81%8F%E7%89%B9%E5%8C%96%E4%B8%8E%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E7%9A%84%E6%AF%94%E8%BE%83&#34;&gt;4.1.1. 偏特化与函数重载的比较&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#412-%E4%B8%8D%E5%AE%9A%E9%95%BF%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0&#34;&gt;4.1.2. 不定长的模板参数&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#413-%E6%A8%A1%E6%9D%BF%E7%9A%84%E9%BB%98%E8%AE%A4%E5%AE%9E%E5%8F%82&#34;&gt;4.1.3. 模板的默认实参&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#42-%E5%90%8E%E6%82%94%E8%8D%AFsfinae&#34;&gt;4.2. 后悔药：SFINAE&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#43-concept-%E6%A6%82%E5%BF%B5%E5%AF%B9%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0%E7%BA%A6%E6%9D%9F%E7%9A%84%E7%9B%B4%E6%8E%A5%E6%8F%8F%E8%BF%B0&#34;&gt;4.3. Concept “概念”：对模板参数约束的直接描述&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#431-%E6%A6%82%E5%BF%B5-%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98&#34;&gt;4.3.1. “概念” 解决了什么问题&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#432-%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8&#34;&gt;4.3.2. &#34;概念&#34;入门&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuye9036/CppTemplateTutorial/master/#5-%E6%9C%AA%E5%AE%8C%E6%88%90%E7%AB%A0%E8%8A%82&#34;&gt;5. 未完成章节&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;1. 前言&lt;/h1&gt; &#xA;&lt;h2&gt;1.1. C++另类简介：比你用的复杂，但比你想的简单&lt;/h2&gt; &#xA;&lt;p&gt;C++似乎从它为世人所知的那天开始便成为天然的话题性编程语言。在它在周围有着形形色色的赞美与贬低之词。当我在微博上透露欲写此文的意愿时，也收到了很多褒贬不一的评论。作为一门语言，能拥有这么多使用并恨着它、使用并畏惧它的用户，也算是语言丛林里的奇观了。&lt;/p&gt; &#xA;&lt;p&gt;C++之所以变成一门层次丰富、结构多变、语法繁冗的语言，是有着多层次的原因的。Bjarne在《The Design and Evolution of C++》一书中，详细的解释了C++为什么会变成如今（C++98/03）的模样。这本书也是我和陈梓瀚一直对各位已经入门的新手强烈推荐的一本书。通过它你多少可以明白，C++的诸多语法要素之所以变成如今的模样，实属迫不得已。&lt;/p&gt; &#xA;&lt;p&gt;模板作为C++中最有特色的语言特性，它堪称玄学的语法和语义，理所应当的成为初学者的梦魇。甚至很多工作多年的人也对C++的模板部分保有充分的敬畏。在多数的编码标准中，Template俨然和多重继承一样，成为了一般程序员（非程序库撰写者）的禁区。甚至运用模板较多的Boost，也成为了“众矢之的”。&lt;/p&gt; &#xA;&lt;p&gt;但是实际上C++模板远没有想象的那么复杂。我们只需要换一个视角：在C++03的时候，模板本身就可以独立成为一门“语言”。它有“值”，有“函数”，有“表达式”和“语句”。除了语法比较蹩脚外，它既没有指针也没有数组，更没有C++里面复杂的继承和多态。可以说，它要比C语言要简单的多。如果我们把模板当做是一门语言来学习，那只需要花费学习OO零头的时间即可掌握。按照这样的思路，可以说在各种模板书籍中出现的多数技巧，都可以被轻松理解。&lt;/p&gt; &#xA;&lt;p&gt;简单回顾一下模板的历史。87年的时候，泛型（Generic Programming）便被纳入了C++的考虑范畴，并直接导致了后来模板语法的产生。可以说模板语法一开始就是为了在C++中提供泛型机制。92年的时候，Alexander Stepanov开始研究利用模板语法制作程序库，后来这一程序库发展成STL，并在93年被接纳入标准中。&lt;/p&gt; &#xA;&lt;p&gt;此时不少人以为STL已经是C++模板的集大成之作，C++模板技止于此。但是在95年的《C++ Report》上，John Barton和Lee Nackman提出了一个矩阵乘法的模板示例。可以说元编程在那个时候开始被很多人所关注。自此篇文章发表之后，很多大牛都开始对模板产生了浓厚的兴趣。其中对元编程技法贡献最大的当属Alexandrescu的《Modern C++ Design》及模板程序库Loki。这一2001年发表的图书间接地导致了模板元编程库的出现。书中所使用的Typelist等泛型组件，和Policy等设计方法令人耳目一新。但是因为全书用的是近乎Geek的手法来构造一切设施，因此使得此书阅读起来略有难度。&lt;/p&gt; &#xA;&lt;p&gt;2002年出版的另一本书《C++ Templates》，可以说是在Template方面的集大成之作。它详细阐述了模板的语法、提供了和模板有关的语言细节信息，举了很多有代表性例子。但是对于模板新手来说，这本书细节如此丰富，让他们随随便便就打了退堂鼓缴械投降。&lt;/p&gt; &#xA;&lt;p&gt;本文的写作初衷，就是通过“编程语言”的视角，介绍一个简单、清晰的“模板语言”。我会尽可能地将模板的诸多要素连串起来，用一些简单的例子帮助读者学习这门“语言”，让读者在编写、阅读模板代码的时候，能像 &lt;code&gt;if(exp) { dosomething(); }&lt;/code&gt;一样的信手拈来，让“模板元编程”技术成为读者牢固掌握、可举一反三的有用技能。&lt;/p&gt; &#xA;&lt;h2&gt;1.2. 适宜读者群&lt;/h2&gt; &#xA;&lt;p&gt;因为本文并不是用于C++入门，例子中也多少会牵涉一些其它知识，因此如果读者能够具备以下条件，会读起来更加轻松：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;熟悉C++的基本语法；&lt;/li&gt; &#xA; &lt;li&gt;使用过STL；&lt;/li&gt; &#xA; &lt;li&gt;熟悉一些常用的算法，以及递归等程序设计方法。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;此外，尽管第一章会介绍一些Template的基本语法，但是还是会略显单薄。因此也希望读者能对C++ Template最基本语法形式有所了解和掌握；如果会编写基本的函数模板和类模板那就更好了。&lt;/p&gt; &#xA;&lt;p&gt;诚如上节所述，本文并不是《C++ Templates》的简单重复，与《Modern C++ Design》交叠更少。从知识结构上，我建议大家可以先读本文，再阅读《C++ Templates》获取更丰富的语法与实现细节，以更进一步；《Modern C++ Design》除了元编程之外，还有很多的泛型编程示例，原则上泛型编程的部分与我所述的内容交叉不大，读者在读完1-3章了解模板的基本规则之后便可阅读《MCD》的相应章节；元编程部分（如Typelist）建议在阅读完本文之后再行阅读，或许会更易理解。&lt;/p&gt; &#xA;&lt;h2&gt;1.3. 版权&lt;/h2&gt; &#xA;&lt;p&gt;本文是随写随即同步到Github上，因此在行文中难免会遗漏引用。本文绝大部分内容应是直接承出我笔，但是也不定会有他山之石。所有指涉内容我会尽量以引号框记，或在上下文和边角注记中标示，如有遗漏烦请不吝指出。&lt;/p&gt; &#xA;&lt;p&gt;全文所有为我所撰写的部分，作者均保留所有版权。如果有需要转帖或引用，还请注明出处并告知于我。&lt;/p&gt; &#xA;&lt;h2&gt;1.4. 推荐编译环境&lt;/h2&gt; &#xA;&lt;p&gt;C++编译器众多，且对模板的支持可能存在细微差别。如果没有特别强调，本书行文过程中，使用了下列编译器来测试文中提供的代码和示例：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clang 14.0.3; 15.0 (amd64)&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio 2022 19.2+ (amd64)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;此外，部分复杂实例我们还在文中提供了在线的编译器预览以方便大家阅读和测试。在线编译器参见： &lt;a href=&#34;https://gcc.godbolt.org/&#34;&gt;&lt;code&gt;gcc.godbolt.org&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;一些示例中用到的特性所对应的C++标准：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;特性&lt;/th&gt; &#xA;   &lt;th&gt;标准&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;std::decay_t&#xA;    &lt;t&gt;&lt;/t&gt;&lt;/td&gt; &#xA;   &lt;td&gt;C++ 14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;1.5. 体例&lt;/h2&gt; &#xA;&lt;h3&gt;1.5.1. 示例代码&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void SampleCode() {&#xA;    // 这是一段示例代码&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1.5.2. 引用&lt;/h3&gt; &#xA;&lt;p&gt;引用自C++标准：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;1.1.2/1 这是一段引用或翻译自标准的文字&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;引用自其他图书：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;《书名》 这是一段引用或翻译自其他图书的文字&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;1.6. 意见、建议、喷、补遗、写作计划&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;需增加： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;模板的使用动机。&lt;/li&gt; &#xA;   &lt;li&gt;增加“如何使用本文”一节。本节将说明全书的体例（强调字体、提示语、例子的组织），所有的描述、举例、引用在重审时将按照体例要求重新组织。&lt;/li&gt; &#xA;   &lt;li&gt;除了用于描述语法的例子外，其他例子将尽量赋予实际意义，以方便阐述意图。&lt;/li&gt; &#xA;   &lt;li&gt;在合适的章节完整叙述模板的类型推导规则。Parameter-Argument, auto variable, decltype, decltype(auto)&lt;/li&gt; &#xA;   &lt;li&gt;在函数模板重载和实例化的部分讲述ADL。&lt;/li&gt; &#xA;   &lt;li&gt;变参模板处应当按照标准（Argument Packing/Unpacking）来讲解。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;建议： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;比较模板和函数的差异性&lt;/li&gt; &#xA;   &lt;li&gt;蓝色：C++14 Return type deduction for normal functions 的分析&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;2. Template的基本语法&lt;/h1&gt; &#xA;&lt;h2&gt;2.1. 什么是模板(Template)&lt;/h2&gt; &#xA;&lt;h2&gt;2.2. 类模板 (Class Template) 的基本语法&lt;/h2&gt; &#xA;&lt;h3&gt;2.2.1. “模板类”还是“类模板”&lt;/h3&gt; &#xA;&lt;h3&gt;2.2.2. Class Template的与成员变量定义&lt;/h3&gt; &#xA;&lt;p&gt;我们来回顾一下最基本的Class Template声明和定义形式：&lt;/p&gt; &#xA;&lt;p&gt;Class Template声明：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; class ClassA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Class Template定义：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; class ClassA&#xA;{&#xA;    T member;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;template&lt;/code&gt; 是C++关键字，意味着我们接下来将定义一个模板。和函数一样，模板也有一系列参数。这些参数都被囊括在template之后的&lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt;中。在上文的例子中， &lt;code&gt;typename T&lt;/code&gt;便是模板参数。回顾一下与之相似的函数参数的声明形式：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void foo(int a);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;T&lt;/code&gt;则可以类比为函数形参&lt;code&gt;a&lt;/code&gt;，这里的“模板形参”&lt;code&gt;T&lt;/code&gt;，也同函数形参一样取成任何你想要的名字；&lt;code&gt;typename&lt;/code&gt;则类似于例子中函数参数类型&lt;code&gt;int&lt;/code&gt;，它表示模板参数中的&lt;code&gt;T&lt;/code&gt;将匹配一个类型。除了 &lt;code&gt;typename&lt;/code&gt; 之外，我们在后面还要讲到，整型也可以作为模板的参数。&lt;/p&gt; &#xA;&lt;p&gt;在定义完模板参数之后，便可以定义你所需要的类。不过在定义类的时候，除了一般类可以使用的类型外，你还可以使用在模板参数中使用的类型 &lt;code&gt;T&lt;/code&gt;。可以说，这个 &lt;code&gt;T&lt;/code&gt;是模板的精髓，因为你可以通过指定模板实参，将T替换成你所需要的类型。&lt;/p&gt; &#xA;&lt;p&gt;例如我们用&lt;code&gt;ClassA&amp;lt;int&amp;gt;&lt;/code&gt;来实例化类模板ClassA，那么&lt;code&gt;ClassA&amp;lt;int&amp;gt;&lt;/code&gt;可以等同于以下的定义：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// 注意：这并不是有效的C++语法，只是为了说明模板的作用&#xA;typedef class {&#xA;    int member;&#xA;} ClassA&amp;lt;int&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可以看出，通过模板参数替换类型，可以获得很多形式相同的新类型，有效减少了代码量。这种用法，我们称之为“泛型”（Generic Programming），它最常见的应用，即是STL中的容器类模板。&lt;/p&gt; &#xA;&lt;h3&gt;2.2.3. 模板的使用&lt;/h3&gt; &#xA;&lt;p&gt;对于C++来说，类型最重要的作用之一就是用它去产生一个变量。例如我们定义了一个动态数组（列表）的类模板&lt;code&gt;vector&lt;/code&gt;，它对于任意的元素类型都具有push_back和clear的操作，我们便可以如下定义这个类：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt;&#xA;class vector&#xA;{&#xA;public:&#xA;    void push_back(T const&amp;amp;);&#xA;    void clear();&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;private:&#xA;    T* elements;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;此时我们的程序需要一个整型和一个浮点型的列表，那么便可以通过以下代码获得两个变量：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;vector&amp;lt;int&amp;gt; intArray;&#xA;vector&amp;lt;float&amp;gt; floatArray;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;此时我们就可以执行以下的操作，获得我们想要的结果：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;intArray.push_back(5);&#xA;floatArray.push_back(3.0f);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;变量定义的过程可以分成两步来看：第一步，&lt;code&gt;vector&amp;lt;int&amp;gt;&lt;/code&gt;将&lt;code&gt;int&lt;/code&gt;绑定到类模板&lt;code&gt;vector&lt;/code&gt;上，获得了一个“普通的类&lt;code&gt;vector&amp;lt;int&amp;gt;&lt;/code&gt;”；第二步通过“vector&#xA; &lt;int&gt;&#xA;  ”定义了一个变量。 与“普通的类”不同，类模板是不能直接用来定义变量的 —— 毕竟它的名字是“模板”而不是“类”。例如：&#xA; &lt;/int&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;vector unknownVector; // 错误示例&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这样就是错误的。我们把通过类型绑定将类模板变成“普通的类”的过程，称之为模板实例化（Template Instantiate）。实例化的语法是：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;模板名 &amp;lt; [模板实参1，模板实参2，...] &amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;看几个例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;vector&amp;lt;int&amp;gt;&#xA;ClassA&amp;lt;double&amp;gt;&#xA;&#xA;template &amp;lt;typename T0, typename T1&amp;gt; class ClassB&#xA;{&#xA;    // Class body ...&#xA;};&#xA;&#xA;ClassB&amp;lt;int, float&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当然，在实例化过程中，被绑定到模板参数上的类型（即模板实参）需要与模板形参正确匹配。 就如同函数一样，如果没有提供足够并匹配的参数，模板便不能正确的实例化。&lt;/p&gt; &#xA;&lt;h3&gt;2.2.4. 类模板的成员函数定义&lt;/h3&gt; &#xA;&lt;p&gt;由于C++11正式废弃“模板导出”这一特性，因此在类模板的变量在调用成员函数的时候，需要看到完整的成员函数定义。因此现在的类模板中的成员函数，通常都是以内联的方式实现。 例如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt;&#xA;class vector&#xA;{&#xA;public:&#xA;    void clear()&#xA;    {&#xA;        // Function body&#xA;    }&#xA;&#x9;&#xA;private:&#xA;    T* elements;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当然，我们也可以将&lt;code&gt;vector&amp;lt;T&amp;gt;::clear&lt;/code&gt;的定义部分放在类型之外，只不过这个时候的语法就显得蹩脚许多：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt;&#xA;class vector&#xA;{&#xA;public:&#xA;    void clear();  // 注意这里只有声明&#xA;private:&#xA;    T* elements;&#xA;};&#xA;&#xA;template &amp;lt;typename T&amp;gt;&#xA;void vector&amp;lt;T&amp;gt;::clear()  // 函数的实现放在这里&#xA;{&#xA;    // Function body&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;函数的实现部分看起来略微拗口。我第一次学到的时候，觉得&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void vector::clear()&#xA;{&#xA;    // Function body&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这样不就行了吗？但是简单想就会知道，&lt;code&gt;clear&lt;/code&gt;里面是找不到泛型类型&lt;code&gt;T&lt;/code&gt;的符号的。&lt;/p&gt; &#xA;&lt;p&gt;因此，在成员函数实现的时候，必须要提供模板参数。此外，为什么类型名不是&lt;code&gt;vector&lt;/code&gt;而是&lt;code&gt;vector&amp;lt;T&amp;gt;&lt;/code&gt;呢？ 如果你了解过模板的偏特化与特化的语法，应该能看出，这里的vector&#xA; &lt;t&gt;&#xA;  在语法上类似于特化/偏特化。实际上，这里的函数定义也确实是成员函数的偏特化。特化和偏特化的概念，本文会在第二部分详细介绍。&#xA; &lt;/t&gt;&lt;/p&gt; &#xA;&lt;p&gt;综上，正确的成员函数实现如下所示：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; // 模板参数&#xA;void vector&amp;lt;T&amp;gt; /*看起来像偏特化*/ ::clear() // 函数的实现放在这里&#xA;{&#xA;    // Function body&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2.3. 函数模板 (Function Template) 入门&lt;/h2&gt; &#xA;&lt;h3&gt;2.3.1. 函数模板的声明和定义&lt;/h3&gt; &#xA;&lt;p&gt;函数模板的语法与类模板基本相同，也是以关键字&lt;code&gt;template&lt;/code&gt;和模板参数列表作为声明与定义的开始。模板参数列表中的类型，可以出现在参数、返回值以及函数体中。比方说下面几个例子&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; void foo(T const&amp;amp; v);&#xA;&#xA;template &amp;lt;typename T&amp;gt; T foo();&#xA;&#xA;template &amp;lt;typename T, typename U&amp;gt; U foo(T const&amp;amp;);&#xA;&#xA;template &amp;lt;typename T&amp;gt; void foo()&#xA;{&#xA;    T var;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;无论是函数模板还是类模板，在实际代码中看起来都是“千变万化”的。这些“变化”，主要是因为类型被当做了参数，导致代码中可以变化的部分更多了。&lt;/p&gt; &#xA;&lt;p&gt;归根结底，模板无外乎两点：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;函数或者类里面，有一些类型我们希望它能变化一下，我们用标识符来代替它，这就是“模板参数”；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在需要这些类型的地方，写上相对应的标识符（“模板参数”）。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;当然，这里的“可变”实际上在代码编译好后就固定下来了，可以称之为编译期的可变性。&lt;/p&gt; &#xA;&lt;p&gt;这里多啰嗦一点，主要也是想告诉大家，模板其实是个很简单的东西。&lt;/p&gt; &#xA;&lt;p&gt;下面这个例子，或许可以帮助大家解决以下两个问题：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;什么样的需求会使用模板来解决？&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;怎样把脑海中的“泛型”变成真正“泛型”的代码？&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;举个例子：generic typed function ‘add’&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在我遇到的朋友中，即便如此对他解释了模板，即便他了解了模板，也仍然会对模板产生畏难情绪。毕竟从形式上来说，模板化的类和模板化的函数都要较非模板的版本更加复杂，阅读代码所需要理解的内容也有所增多。&lt;/p&gt; &#xA;&lt;p&gt;如何才能克服这一问题，最终视模板如平坦代码呢？&lt;/p&gt; &#xA;&lt;p&gt;答案只有一个：&lt;strong&gt;无他，唯手熟尔&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;在学习模板的时候，要反复做以下的思考和练习：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;提出问题：我的需求能不能用模板来解决？&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;怎么解决？&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;把解决方案用代码写出来。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如果失败了，找到原因。是知识有盲点（例如不知道怎么将 &lt;code&gt;T&amp;amp;&lt;/code&gt; 转化成 &lt;code&gt;T&lt;/code&gt;），还是不可行（比如试图利用浮点常量特化类模板，但实际上这样做是不可行的）？&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;通过重复以上的练习，应该可以对模板的语法和含义都有所掌握。如果提出问题本身有困难，或许下面这个经典案例可以作为你思考的开始：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;写一个泛型的数据结构：例如，线性表，数组，链表，二叉树；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;写一个可以在不同数据结构、不同的元素类型上工作的泛型函数，例如求和；&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;当然和“设计模式”一样，模板在实际应用中，也会有一些固定的需求和解决方案。比较常见的场景包括：泛型（最基本的用法）、通过类型获得相应的信息（型别萃取）、编译期间的计算、类型间的推导和变换（从一个类型变换成另外一个类型，比如boost::function）。这些本文在以后的章节中会陆续介绍。&lt;/p&gt; &#xA;&lt;h3&gt;2.3.2. 函数模板的使用&lt;/h3&gt; &#xA;&lt;p&gt;我们先来看一个简单的函数模板，两个数相加：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; T Add(T a, T b)&#xA;{&#xA;    return a + b;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;函数模板的调用格式是：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;函数模板名 &amp;lt; 模板参数列表 &amp;gt; ( 参数 )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;例如，我们想对两个 &lt;code&gt;int&lt;/code&gt; 求和，那么套用类的模板实例化方法，我们可以这么写：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int a = 5;&#xA;int b = 3;&#xA;int result = Add&amp;lt;int&amp;gt;(a, b);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这时我们等于拥有了一个新函数：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int Add&amp;lt;int&amp;gt;(int a, int b) { return a + b; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这时在另外一个偏远的程序角落，你也需要求和。而此时你的参数类型是 &lt;code&gt;float&lt;/code&gt; ，于是你写下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;Add&amp;lt;float&amp;gt;(a, b);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;一切看起来都很完美。但如果你具备程序员的最佳美德——懒惰——的话，你肯定会这样想，我在调用 &lt;code&gt;Add&amp;lt;int&amp;gt;(a, b)&lt;/code&gt; 的时候， &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 匹配的都是那个 &lt;code&gt;T&lt;/code&gt;。编译器就应该知道那个 &lt;code&gt;T&lt;/code&gt; 实际上是 &lt;code&gt;int&lt;/code&gt; 呀？为什么还要我多此一举写 &lt;code&gt;Add&amp;lt;int&amp;gt;&lt;/code&gt; 呢？ 唔，我想说的是，编译器的作者也是这么想的。所以实际上你在编译器里面写下以下片段：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int a = 5;&#xA;int b = 3;&#xA;int result = Add(a, b);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;编译器会心领神会地将 &lt;code&gt;Add&lt;/code&gt; 变成 &lt;code&gt;Add&amp;lt;int&amp;gt;&lt;/code&gt;。但是编译器不能面对模棱两可的答案。比如你这么写的话呢？&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int  a = 5;&#xA;char b = 3;&#xA;int  result = Add(a, b);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;第一个参数 &lt;code&gt;a&lt;/code&gt; 告诉编译器，这个 &lt;code&gt;T&lt;/code&gt; 是 &lt;code&gt;int&lt;/code&gt;。编译器点点头说，好。但是第二个参数 &lt;code&gt;b&lt;/code&gt; 不高兴了，告诉编译器说，你这个 &lt;code&gt;T&lt;/code&gt;，其实是 &lt;code&gt;char&lt;/code&gt;。 两个参数各自指导 &lt;code&gt;T&lt;/code&gt; 的类型，编译器就不知道怎么做了。在Visual Studio 2012下，会有这样的提示：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error C2782: &#39;T _1_2_2::Add(T,T)&#39; : template parameter &#39;T&#39; is ambiguous&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;好吧，&#34;ambiguous&#34;，这个提示再明确不过了。&lt;/p&gt; &#xA;&lt;p&gt;不过，只要你别逼得编译器精神分裂的话，编译器其实是非常聪明的，它可以从很多的蛛丝马迹中，猜测到你真正的意图，有如下面的例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; class A {};&#xA;&#xA;template &amp;lt;typename T&amp;gt; T foo( A&amp;lt;T&amp;gt; v );&#xA;&#xA;A&amp;lt;int&amp;gt; v;&#xA;foo(v);&#x9;// 它能准确地猜到 T 是 int.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;咦，编译器居然绕过了A这个外套，猜到了 &lt;code&gt;T&lt;/code&gt; 匹配的是 &lt;code&gt;int&lt;/code&gt;。编译器是怎么完成这一“魔法”的，我们暂且不表，2.2节时再和盘托出。&lt;/p&gt; &#xA;&lt;p&gt;下面轮到你的练习时间了。你试着写了很多的例子，但是其中一个你还是犯了疑惑：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;float data[1024];&#xA;&#xA;template &amp;lt;typename T&amp;gt; T GetValue(int i)&#xA;{&#xA;    return static_cast&amp;lt;T&amp;gt;(data[i]);&#xA;}&#xA;&#xA;float a = GetValue(0);&#x9;// 出错了！&#xA;int b = GetValue(1);&#x9;// 也出错了！&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;为什么会出错呢？你仔细想了想，原来编译器是没办法去根据返回值推断类型的。函数调用的时候，返回值被谁接受还不知道呢。如下修改后，就一切正常了：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;float a = GetValue&amp;lt;float&amp;gt;(0);&#xA;int b = GetValue&amp;lt;int&amp;gt;(1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;嗯，是不是so easy啊？嗯，你又信心满满的做了一个练习：&lt;/p&gt; &#xA;&lt;p&gt;你要写一个函数模板叫 &lt;code&gt;c_style_cast&lt;/code&gt;，顾名思义，执行的是C风格的转换。然后出于方便起见，你希望它能和 &lt;code&gt;static_cast&lt;/code&gt; 这样的内置转换有同样的写法。于是你写了一个use case。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;DstT dest = c_style_cast&amp;lt;DstT&amp;gt;(src);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;根据调用形式你知道了，有 &lt;code&gt;DstT&lt;/code&gt; 和 &lt;code&gt;SrcT&lt;/code&gt; 两个模板参数。参数只有一个， &lt;code&gt;src&lt;/code&gt;，所以函数的形参当然是这么写了： &lt;code&gt;(SrcT src)&lt;/code&gt;。实现也很简单， &lt;code&gt;(DstT)v&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;我们把手上得到的信息来拼一拼，就可以编写自己的函数模板了：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename SrcT, typename DstT&amp;gt; DstT c_style_cast(SrcT v)&#xA;{&#xA;    return (DstT)(v);&#xA;}&#xA;&#xA;int v = 0;&#xA;float i = c_style_cast&amp;lt;float&amp;gt;(v);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;嗯，很Easy嘛！我们F6一下…咦！这是什么意思！&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;error C2783: &#39;DstT _1_2_2::c_style_cast(SrcT)&#39; : could not deduce template argument for &#39;DstT&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后你仔细的比较了一下，然后发现 … 模板参数有两个，而参数里面能得到的只有 &lt;code&gt;SrcT&lt;/code&gt; 一个。结合出错信息看来关键在那个 &lt;code&gt;DstT&lt;/code&gt; 上。这个时候，你死马当活马医，把模板参数写完整了：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;float i = c_style_cast&amp;lt;int, float&amp;gt;(v);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;嗯，很顺利的通过了。难道C++不能支持让参数推导一部分模板参数吗？&lt;/p&gt; &#xA;&lt;p&gt;当然是可以的。只不过在部分推导、部分指定的情况下，编译器对模板参数的顺序是有限制的：&lt;strong&gt;先写需要指定的模板参数，再把能推导出来的模板参数放在后面&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;在这个例子中，能推导出来的是 &lt;code&gt;SrcT&lt;/code&gt;，需要指定的是 &lt;code&gt;DstT&lt;/code&gt;。把函数模板写成下面这样就可以了：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename DstT, typename SrcT&amp;gt; DstT c_style_cast(SrcT v)&#x9;// 模板参数 DstT 需要人肉指定，放前面。&#xA;{&#xA;    return (DstT)(v);&#xA;}&#xA;&#xA;int v = 0;&#xA;float i = c_style_cast&amp;lt;float&amp;gt;(v);  // 形象地说，DstT会先把你指定的参数吃掉，剩下的就交给编译器从函数参数列表中推导啦。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2.4. 整型也可是Template参数&lt;/h2&gt; &#xA;&lt;p&gt;模板参数除了类型外（包括基本类型、结构、类类型等），也可以是一个整型数（Integral Number）。这里的整型数比较宽泛，包括布尔型，不同位数、有无符号的整型，甚至包括指针。我们将整型的模板参数和类型作为模板参数来做一个对比：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; class TemplateWithType;&#xA;template &amp;lt;int      V&amp;gt; class TemplateWithValue;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;我想这个时候你也更能理解 &lt;code&gt;typename&lt;/code&gt; 的意思了：它相当于是模板参数的“类型”，告诉你 &lt;code&gt;T&lt;/code&gt; 是一个 &lt;code&gt;typename&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;按照C++ Template最初的想法，模板不就是为了提供一个类型安全、易于调试的宏吗？有类型就够了，为什么要引入整型参数呢？考虑宏，它除了代码替换，还有一个作用是作为常数出现。所以整型模板参数最基本的用途，也是定义一个常数。例如这段代码的作用：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T, int Size&amp;gt; struct Array&#xA;{&#xA;    T data[Size];&#xA;};&#xA;&#xA;Array&amp;lt;int, 16&amp;gt; arr;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;便相当于下面这段代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;class IntArrayWithSize16&#xA;{&#xA;    int data[16]; // int 替换了 T, 16 替换了 Size&#xA;};&#xA;&#xA;IntArrayWithSize16 arr;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中有一点需要注意，因为模板的匹配是在编译的时候完成的，所以实例化模板的时候所使用的参数，也必须要在编译期就能确定。例如以下的例子编译器就会报错：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;int i&amp;gt; class A {};&#xA;&#xA;void foo()&#xA;{&#xA;    int x = 3;&#xA;    A&amp;lt;5&amp;gt; a; // 正确！&#xA;    A&amp;lt;x&amp;gt; b; // error C2971: &#39;_1_3::A&#39; : template parameter &#39;i&#39; : &#39;x&#39; : a local variable cannot be used as a non-type argument&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;因为x不是一个编译期常量，所以 &lt;code&gt;A&amp;lt;x&amp;gt;&lt;/code&gt; 就会告诉你，x是一个局部变量，不能作为一个模板参数出现。&lt;/p&gt; &#xA;&lt;p&gt;嗯，这里我们再来写几个相对复杂的例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;int i&amp;gt; class A &#xA;{&#xA;public:&#xA;    void foo(int)&#xA;    {&#xA;    }&#xA;};&#xA;template &amp;lt;uint8_t a, typename b, void* c&amp;gt; class B {};&#xA;template &amp;lt;bool, void (*a)()&amp;gt; class C {};&#xA;template &amp;lt;void (A&amp;lt;3&amp;gt;::*a)(int)&amp;gt; class D {};&#xA;&#xA;template &amp;lt;int i&amp;gt; int Add(int a)&#x9;// 当然也能用于函数模板&#xA;{&#xA;    return a + i;&#xA;}&#xA;&#xA;void foo()&#xA;{&#xA;    A&amp;lt;5&amp;gt; a;&#xA;    B&amp;lt;7, A&amp;lt;5&amp;gt;, nullptr&amp;gt;&#x9;b; // 模板参数可以是一个无符号八位整数，可以是模板生成的类；可以是一个指针。&#xA;    C&amp;lt;false, &amp;amp;foo&amp;gt; c;      // 模板参数可以是一个bool类型的常量，甚至可以是一个函数指针。&#xA;    D&amp;lt;&amp;amp;A&amp;lt;3&amp;gt;::foo&amp;gt; d;       // 丧心病狂啊！它还能是一个成员函数指针！&#xA;    int x = Add&amp;lt;3&amp;gt;(5);     // x == 8。因为整型模板参数无法从函数参数获得，所以只能是手工指定啦。&#xA;}&#xA;&#xA;template &amp;lt;float a&amp;gt; class E {}; // ERROR: 别闹！早说过只能是整数类型的啦！&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当然，除了单纯的用作常数之外，整型参数还有一些其它的用途。这些“其它”用途最重要的一点是让类型也可以像整数一样运算。《Modern C++ Design》给我们展示了很多这方面的例子。不过你不用急着去阅读那本天书，我们会在做好足够的知识铺垫后，让你轻松学会这些招数。&lt;/p&gt; &#xA;&lt;h2&gt;2.5. 模板形式与功能是统一的&lt;/h2&gt; &#xA;&lt;p&gt;第一章走马观花的带着大家复习了一下C++ Template的基本语法形式，也解释了包括 &lt;code&gt;typename&lt;/code&gt; 在内，类/函数模板写法中各个语法元素的含义。形式是功能的外在体现，介绍它们也是为了让大家能理解到，模板之所以写成这种形式是有必要的，而不是语言的垃圾成分。&lt;/p&gt; &#xA;&lt;p&gt;从下一章开始，我们便进入了更加复杂和丰富的世界：讨论模板的匹配规则。其中有令人望而生畏的特化与偏特化。但是，请相信我们在序言中所提到的：将模板作为一门语言来看待，它会变得有趣而简单。&lt;/p&gt; &#xA;&lt;h1&gt;3. 模板元编程基础&lt;/h1&gt; &#xA;&lt;h2&gt;3.1. 编程，元编程，模板元编程&lt;/h2&gt; &#xA;&lt;p&gt;技术的学习是一个登山的过程。第一章是最为平坦的山脚道路。而从这一章开始，则是正式的爬坡。无论是我写作还是你阅读，都需要付出比第一章更多的代价。那么问题就是，付出更多的精力学习模板是否值得？&lt;/p&gt; &#xA;&lt;p&gt;这个问题很功利，但是一针见血。因为技术的根本目的在于解决需求。那C++的模板能做什么？&lt;/p&gt; &#xA;&lt;p&gt;一个高（树）大（新）上（风）的回答是，C++里面的模板，犹如C中的宏、C和Java中的自省（restropection）和反射（reflection），是一个改变语言内涵，拓展语言外延的存在。&lt;/p&gt; &#xA;&lt;p&gt;程序最根本的目的是什么？复现真实世界或人所构想的规律，减少重复工作的成本，或通过提升规模完成人所不能及之事。但是世间之事万千，有限的程序如何重现复杂的世界呢？&lt;/p&gt; &#xA;&lt;p&gt;答案是“抽象”。论及具体手段，无外乎“求同”与“存异”：概括一般规律，处理特殊情况。这也是软件工程所追求的目标。一般规律概括的越好，我们所付出的劳动也就越少。&lt;/p&gt; &#xA;&lt;p&gt;同样的，作为脑力劳动的产品，程序本身也是有规律性的。《Modern C++ Design》中的前言就抛出了一连串有代表性的问题：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;如何撰写更高级的C++程式？&#xA;如何应付即使在很干净的设计中仍然像雪崩一样的不相干细节？&#xA;如何构建可复用组件，使得每次在不同程式中应用组件时无需大动干戈？&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;我们以数据结构举例。在程序里，你需要一些堆栈。这个堆栈的元素可能是整数、浮点或者别的什么类型。一份整型堆栈的代码可能是：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;class StackInt&#xA;{&#xA;public:&#xA;    void push(int v);&#xA;    int pop();&#xA;    int Find(int x)&#xA;    {&#xA;        for(int i = 0; i &amp;lt; size; ++i)&#xA;        {&#xA;            if(data[i] == x) { return i; }&#xA;        }&#xA;    }&#xA;    // ... 其他代码 ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果你要支持浮点了，那么你只能将代码再次拷贝出来，并作如下修改：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;class StackFloat&#xA;{&#xA;public:&#xA;    void push(float v);&#xA;    float pop();&#xA;    int Find(float x)&#xA;    {&#xA;        for(int i = 0; i &amp;lt; size; ++i)&#xA;        {&#xA;            if(data[i] == x) { return i; }&#xA;        }&#xA;    }&#xA;    // ... 其他代码 ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当然也许你觉得这样做能充分体会代码行数增长的成就感。但是有一天，你突然发现：呀，&lt;code&gt;Find&lt;/code&gt; 函数实现有问题了。怎么办？这个时候也许你只有两份这样的代码，那好说，一一去修正就好了。如果你有十个呢？二十个？五十个？&lt;/p&gt; &#xA;&lt;p&gt;时间一长，你就厌倦了这样的生活。你觉得每个堆栈都差不多，但是又有点不一样。为了这一点点不一样，你付出了太多的时间。吃饭的时间，泡妞的时间，睡觉的时间，看岛国小电影顺便练习小臂力量的时间。&lt;/p&gt; &#xA;&lt;p&gt;于是便诞生了新的技术，来消解我们的烦恼。&lt;/p&gt; &#xA;&lt;p&gt;这个技术的名字，并不叫“模板”，而是叫“元编程”。&lt;/p&gt; &#xA;&lt;p&gt;元（meta）无论在中文还是英文里，都是个很“抽象（abstract）”的词。因为它的本意就是“抽象”。元编程，也可以说就是“编程的抽象”。用更好理解的说法，元编程意味着你撰写一段程序A，程序A会运行后生成另外一个程序B，程序B才是真正实现功能的程序。那么这个时候程序A可以称作程序B的元程序，撰写程序A的过程，就称之为“元编程”。&lt;/p&gt; &#xA;&lt;p&gt;回到我们的堆栈的例子。真正执行功能的，其实仍然是浮点的堆栈、整数的堆栈、各种你所需要的类型的堆栈。但是因为这些堆栈之间太相似了，仅仅有着些微的不同，我们为什么不能有一个将相似之处囊括起来，同时又能分别体现出不同之处的程序呢？很多语言都提供了这样的机会。C中的宏，C++中的模板，Python中的Duck Typing，广义上将都能够实现我们的思路。&lt;/p&gt; &#xA;&lt;p&gt;我们的目的，是找出程序之间的相似性，进行“元编程”。而在C++中，元编程的手段，可以是宏，也可以是模板。&lt;/p&gt; &#xA;&lt;p&gt;宏的例子姑且不论，我们来看一看模板：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt;&#xA;class Stack&#xA;{&#xA;public:&#xA;    void push(T v);&#xA;    T pop();&#xA;    int Find(T x)&#xA;    {&#xA;        for(int i = 0; i &amp;lt; size; ++i)&#xA;        {&#xA;            if(data[i] == x) { return i; }&#xA;        }&#xA;    }&#xA;    // ... 其他代码 ...&#xA;};&#xA;&#xA;typedef Stack&amp;lt;int&amp;gt;   StackInt;&#xA;typedef Stack&amp;lt;float&amp;gt; StackFloat;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;通过模板，我们可以将形形色色的堆栈代码分为两个部分，一个部分是不变的接口，以及近乎相同的实现；另外一部分是元素的类型，它们是需要变化的。因此同函数类似，需要变化的部分，由模板参数来反映；不变的部分，则是模板内的代码。可以看到，使用模板的代码，要比不使用模板的代码简洁许多。&lt;/p&gt; &#xA;&lt;p&gt;如果元编程中所有变化的量（或者说元编程的参数），都是类型，那么这样的编程，我们有个特定的称呼，叫“泛型”。&lt;/p&gt; &#xA;&lt;p&gt;但是你会问，模板的发明，仅仅是为了做和宏几乎一样的替换工作吗？可以说是，也可以说不是。一方面，很多时候模板就是为了替换类型，这个时候作用上其实和宏没什么区别。只是宏是基于文本的替换，被替换的文本本身没有任何语义。只有替换完成，编译器才能进行接下来的处理。而模板会在分析模板时以及实例化模板时时候都会进行检查，而且源代码中也能与调试符号一一对应，所以无论是编译时还是运行时，排错都相对简单。&lt;/p&gt; &#xA;&lt;p&gt;但是模板和宏也有很大的不同，否则此文也就不能成立了。模板最大的不同在于它是“可以运算”的。我们来举一个例子，不过可能有点牵强。考虑我们要写一个向量逐分量乘法。只不过这个向量，它非常的大。所以为了保证速度，我们需要使用SIMD指令进行加速。假设我们有以下指令可以使用：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Int8,16: N/A&#xA;Int32  : VInt32Mul(int32x4, int32x4)&#xA;Int64  : VInt64Mul(int64x4, int64x4)&#xA;Float  : VInt64Mul(floatx2, floatx2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;所以对于Int8和Int16，我们需要提升到Int32，而Int32和Int64，各自使用自己的指令。所以我们需要实现下的逻辑：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;for(v4a, v4b : vectorsA, vectorsB)&#xA;{&#xA;    if type is Int8, Int16&#xA;        VInt32Mul( ConvertToInt32(v4a), ConvertToInt32(v4b) )&#xA;    elif type is Int32&#xA;        VInt32Mul( v4a, v4b )&#xA;    elif type is Float&#xA;        ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这里的问题就在于，如何根据 &lt;code&gt;type&lt;/code&gt; 分别提供我们需要的实现？这里有两个难点。首先， &lt;code&gt;if(type == xxx) {}&lt;/code&gt; 是不存在于C++中的。第二，即便存在根据 &lt;code&gt;type&lt;/code&gt; 的分配方法，我们也不希望它在运行时branch，这样会变得很慢。我们希望它能按照类型直接就把代码编译好，就跟直接写的一样。&lt;/p&gt; &#xA;&lt;p&gt;嗯，聪明你果然想到了，重载也可以解决这个问题。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;GenericMul(int8x4,  int8x4);&#xA;GenericMul(int16x4, int16x4);&#xA;GenericMul(int32x4, int32x4);&#xA;GenericMul(int64x4, int64x4);&#xA;// 其它 Generic Mul ...&#xA;&#xA;for(v4a, v4b : vectorsA, vectorsB)&#xA;{&#xA;    GenericMul(v4a, v4b);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这样不就可以了吗？&lt;/p&gt; &#xA;&lt;p&gt;唔，你赢了，是这样没错。但是问题是，我这个平台是你可没见过，它叫 &lt;code&gt;Deep Thought&lt;/code&gt;， 特别缺心眼儿，不光有 &lt;code&gt;int8&lt;/code&gt;，还有更奇怪的 &lt;code&gt;int9&lt;/code&gt;, &lt;code&gt;int11&lt;/code&gt;，以及可以代表世间万物的 &lt;code&gt;int42&lt;/code&gt;。你总不能为之提供所有的重载吧？这简直就像你枚举了所有程序的输入，并为之提供了对应的输出一样。&lt;/p&gt; &#xA;&lt;p&gt;好吧，我承认这个例子还是太牵强了。不过相信我，在你阅读完第二章和第三章之后，你会将这些特性自如地运用到你的程序之中。你的程序将会变成体现模板“可运算”威力的最好例子。&lt;/p&gt; &#xA;&lt;h2&gt;3.2. 模板世界的If-Then-Else：类模板的特化与偏特化&lt;/h2&gt; &#xA;&lt;h3&gt;3.2.1. 根据类型执行代码&lt;/h3&gt; &#xA;&lt;p&gt;前一节的示例提出了一个要求：需要做出根据类型执行不同代码。要达成这一目的，模板并不是唯一的途径。比如之前我们所说的重载。如果把眼界放宽一些，虚函数也是根据类型执行代码的例子。此外，在C语言时代，也会有一些技法来达到这个目的，比如下面这个例子，我们需要对两个浮点做加法， 或者对两个整数做乘法：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;struct Variant&#xA;{&#xA;    union&#xA;    {&#xA;        int x;&#xA;        float y;&#xA;    } data;&#xA;    uint32 typeId;&#xA;};&#xA;&#xA;Variant addFloatOrMulInt(Variant const* a, Variant const* b)&#xA;{&#xA;    Variant ret;&#xA;    assert(a-&amp;gt;typeId == b-&amp;gt;typeId);&#xA;    if (a-&amp;gt;typeId == TYPE_INT)&#xA;    {&#xA;        ret.x = a-&amp;gt;x * b-&amp;gt;x;&#xA;    }&#xA;    else&#xA;    {&#xA;        ret.y = a-&amp;gt;y + b-&amp;gt;y;&#xA;    }&#xA;    return ret;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;更常见的是 &lt;code&gt;void*&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;define BIN_OP(type, a, op, b, result) (*(type *)(result)) = (*(type const *)(a)) op (*(type const*)(b))&#xA;void doDiv(void* out, void const* data0, void const* data1, DATA_TYPE type)&#xA;{&#xA;    if(type == TYPE_INT)&#xA;    {&#xA;        BIN_OP(int, data0, *, data1, out);&#xA;    }&#xA;    else&#xA;    {&#xA;        BIN_OP(float, data0, +, data1, out);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在C++中比如在 &lt;code&gt;Boost.Any&lt;/code&gt; 的实现中，运用了 &lt;code&gt;typeid&lt;/code&gt; 来查询类型信息。和 &lt;code&gt;typeid&lt;/code&gt; 同属于RTTI机制的 &lt;code&gt;dynamic_cast&lt;/code&gt;，也经常会用来做类型判别的工作。我想你应该写过类似于下面的代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;IAnimal* animal = GetAnimalFromSystem();&#xA;&#xA;IDog* maybeDog = dynamic_cast&amp;lt;IDog*&amp;gt;(animal);&#xA;if(maybeDog)&#xA;{&#xA;    maybeDog-&amp;gt;Wangwang();&#xA;}&#xA;ICat* maybeCat = dynamic_cast&amp;lt;ICat*&amp;gt;(animal);&#xA;if(maybeCat)&#xA;{&#xA;    maybeCat-&amp;gt;Moemoe();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当然，在实际的工作中，我们建议把需要 &lt;code&gt;dynamic_cast&lt;/code&gt; 后执行的代码，尽量变成虚函数。不过这个已经是另外一个问题了。我们看到，不管是哪种方法都很难避免 &lt;code&gt;if&lt;/code&gt; 的存在。而且因为输入数据的类型是模糊的，经常需要强制地、没有任何检查的转换成某个类型，因此很容易出错。&lt;/p&gt; &#xA;&lt;p&gt;但是模板与这些方法最大的区别并不在这里。模板无论其参数或者是类型，它都是一个编译期分派的办法。编译期就能确定的东西既可以做类型检查，编译器也能进行优化，砍掉任何不必要的代码执行路径。例如在上例中，&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; T addFloatOrMulInt(T a, T b);&#xA;&#xA;// 迷之代码1：用于T是float的情况&#xA;&#xA;// 迷之代码2：用于T是int时的情况&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果你运用了模板来实现，那么当传入两个不同类型的变量，或者不是 &lt;code&gt;int&lt;/code&gt; 和 &lt;code&gt;float&lt;/code&gt; 变量，编译器就会提示错误。但是如果使用了我们前述的 &lt;code&gt;Variant&lt;/code&gt; 来实现，编译器可就管不了那么多了。但是，成也编译期，败也编译期。最严重的“缺点”，就是你没办法根据用户输入或者别的什么在运行期间可能发生变化的量来决定它产生、或执行什么代码。比如下面的代码段，它是不成立的。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;int i, int j&amp;gt;&#xA;int foo() { return i + j; }&#xA;int main()&#xA;{&#xA;    cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;&#xA;    return foo&amp;lt;x, y&amp;gt;();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这点限制也粉碎了妄图用模板来包办工厂（Factory）甚至是反射的梦想。尽管在《Modern C++ Design》中（别问我为什么老举这本书，因为《C++ Templates》和《Generic Programming》我只是囫囵吞枣读过，基本不记得了)大量运用模板来简化工厂方法；同时C++11/14中的一些机制如Variadic Template更是让这一问题的解决更加彻底。但无论如何，直到C++11/14，光靠模板你就是写不出依靠类名或者ID变量产生类型实例的代码。&lt;/p&gt; &#xA;&lt;p&gt;所以说，从能力上来看，模板能做的事情都是编译期完成的。编译期完成的意思就是，当你编译一个程序的时候，所有的量就都已经确定了。比如下面的这个例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int a = 3, b = 5;&#xA;Variant aVar, bVar;&#xA;aVar.setInt(a);&#x9;&#x9;&#x9;// 我们新加上的方法，怎么实现的无所谓，大家明白意思就行了。&#xA;bVar.setInt(b);&#xA;Variant result = addFloatOrMulInt(aVar, bVar);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;除非世界末日，否则这个例子里不管你怎么蹦跶，单看代码我们就能知道， &lt;code&gt;aVar&lt;/code&gt; 和 &lt;code&gt;bVar&lt;/code&gt; 都一定会是整数。所以如果有合适的机制，编译器就能知道此处的 &lt;code&gt;addFloatOrMulInt&lt;/code&gt; 中只需要执行 &lt;code&gt;Int&lt;/code&gt; 路径上的代码，而且编译器在此处也能单独为 &lt;code&gt;Int&lt;/code&gt; 路径生成代码，从而去掉那个不必要的 &lt;code&gt;if&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;在模板代码中，这个“合适的机制”就是指“特化”和“部分特化（Partial Specialization）”，后者也叫“偏特化”。&lt;/p&gt; &#xA;&lt;h3&gt;3.2.2. 特化&lt;/h3&gt; &#xA;&lt;p&gt;我的高中物理老师对我说过一句令我受用至今的话：把自己能做的事情做好。编写模板程序也是一样。当你试图用模板解决问题之前，先撇开那些复杂的语法要素，用最直观的方式表达你的需求：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// 这里是伪代码，意思一下&#xA;&#xA;int|float addFloatOrMulInt(a, b)&#xA;{&#xA;    if(type is Int)&#xA;    {&#xA;        return a * b;&#xA;    }&#xA;    else if (type is Float)&#xA;    {&#xA;        return a + b;&#xA;    }&#xA;}&#xA;&#xA;void foo()&#xA;{&#xA;    float a, b, c;&#xA;    c = addFloatOrMulInt(a, b);&#x9;&#x9;// c = a + b;&#xA;&#x9;&#xA;    int x, y, z;&#xA;    z = addFloatOrMulInt(x, y);&#x9;&#x9;// z = x * y;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;因为这一节是讲类模板有关的特化和偏特化机制，所以我们不用普通的函数，而是用类的静态成员函数来做这个事情（这就是典型的没事找抽型）：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// 这里仍然是伪代码，意思一下，too。&#xA;class AddFloatOrMulInt&#xA;{&#xA;    static int|float Do(a, b)&#xA;    {&#xA;        if(type is Int)&#xA;        {&#xA;            return a * b;&#xA;        }&#xA;        else if (type is Float)&#xA;&#x9;{&#xA;&#x9;    return a + b;&#xA;        }&#xA;    }&#xA;};&#xA;&#xA;void foo()&#xA;{&#xA;    float a, b, c;&#xA;    c = AddFloatOrMulInt::Do(a, b); // c = a + b;&#xA;&#x9;&#xA;    int x, y, z;&#xA;    z = AddFloatOrMulInt::Do(x, y); // z = x * y;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;好，意思表达清楚了。我们先从调用方的角度，把这个形式改写一下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void foo()&#xA;{&#xA;    float a, b, c;&#xA;    c = AddFloatOrMulInt&amp;lt;float&amp;gt;::Do(a, b); // c = a + b;&#xA;&#x9;&#xA;    int x, y, z;&#xA;    z = AddFloatOrMulInt&amp;lt;int&amp;gt;::Do(x, y); // z = x * y;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;也许你不明白为什么要改写成现在这个样子。看不懂不怪你，怪我讲得不好。但是你别急，先看看这样改写以后能不能跟我们的目标接近一点。如果我们把 &lt;code&gt;AddFloatOrMulInt&amp;lt;float&amp;gt;::Do&lt;/code&gt; 看作一个普通的函数，那么我们可以写两个实现出来：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;float AddFloatOrMulInt&amp;lt;float&amp;gt;::Do(float a, float b)&#xA;{&#xA;    return a + b;&#xA;}&#xA;&#xA;int AddFloatOrMulInt&amp;lt;int&amp;gt;::Do(int a, int b)&#xA;{&#xA;    return a * b;&#xA;}&#xA;&#xA;void foo()&#xA;{&#xA;    float a, b, c;&#xA;    c = AddFloatOrMulInt&amp;lt;float&amp;gt;::Do(a, b); // c = a + b;&#xA;&#x9;&#xA;    int x, y, z;&#xA;    z = AddFloatOrMulInt&amp;lt;int&amp;gt;::Do(x, y); // z = x * y;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这样是不是就很开心了？我们更进一步，把 &lt;code&gt;AddFloatOrMulInt&amp;lt;int&amp;gt;::Do&lt;/code&gt; 换成合法的类模板：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// 这个是给float用的。&#xA;template &amp;lt;typename T&amp;gt; class AddFloatOrMulInt&#xA;{&#xA;    T Do(T a, T b)&#xA;    {&#xA;        return a + b;&#xA;    }&#xA;};&#xA;&#xA;// 这个是给int用的。&#xA;template &amp;lt;typename T&amp;gt; class AddFloatOrMulInt&#xA;{&#xA;    T Do(T a, T b)&#xA;    {&#xA;        return a * b;&#xA;    }&#xA;};&#xA;&#xA;void foo()&#xA;{&#xA;    float a, b, c;&#xA;&#xA;    // 嗯，我们需要 c = a + b;&#xA;    c = AddFloatOrMulInt&amp;lt;float&amp;gt;::Do(a, b);&#xA;    // ... 觉得哪里不对劲 ...&#xA;    // ...&#xA;    // ...&#xA;    // ...&#xA;    // 啊！有两个AddFloatOrMulInt，class看起来一模一样，要怎么区分呢！&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;好吧，问题来了！如何要让两个内容不同，但是模板参数形式相同的类进行区分呢？特化！特化（specialization）是根据一个或多个特殊的整数或类型，给出模板实例化时的一个指定内容。我们先来看特化是怎么应用到这个问题上的。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// 首先，要写出模板的一般形式（原型）&#xA;template &amp;lt;typename T&amp;gt; class AddFloatOrMulInt&#xA;{&#xA;    static T Do(T a, T b)&#xA;    {&#xA;        // 在这个例子里面一般形式里面是什么内容不重要，因为用不上&#xA;        // 这里就随便给个0吧。&#xA;        return T(0);&#xA;    }&#xA;};&#xA;&#xA;// 其次，我们要指定T是int时候的代码，这就是特化：&#xA;template &amp;lt;&amp;gt; class AddFloatOrMulInt&amp;lt;int&amp;gt;&#xA;{&#xA;public:&#xA;    static int Do(int a, int b) // &#xA;    {&#xA;        return a * b;&#xA;    }&#xA;};&#xA;&#xA;// 再次，我们要指定T是float时候的代码：&#xA;template &amp;lt;&amp;gt; class AddFloatOrMulInt&amp;lt;float&amp;gt;&#xA;{&#xA;public:&#xA;    static float Do(float a, float b)&#xA;    {&#xA;        return a + b;&#xA;    }&#xA;};&#xA;&#xA;void foo()&#xA;{&#xA;    // 这里面就不写了&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;我们再把特化的形式拿出来一瞧：这货有点怪啊： &lt;code&gt;template &amp;lt;&amp;gt; class AddFloatOrMulInt&amp;lt;int&amp;gt;&lt;/code&gt;。别急，我给你解释一下。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// 我们这个模板的基本形式是什么？&#xA;template &amp;lt;typename T&amp;gt; class AddFloatOrMulInt;&#xA;&#xA;// 但是这个类，是给T是Int的时候用的，于是我们写作&#xA;class AddFloatOrMulInt&amp;lt;int&amp;gt;;&#xA;// 当然，这里编译是通不过的。&#xA;&#xA;// 但是它又不是个普通类，而是类模板的一个特化（特例）。&#xA;// 所以前面要加模板关键字template，&#xA;// 以及模板参数列表&#xA;template &amp;lt;/* 这里要填什么？ */&amp;gt; class AddFloatOrMulInt&amp;lt;int&amp;gt;;&#xA;&#xA;// 最后，模板参数列表里面填什么？因为原型的T已经被int取代了。所以这里就不能也不需要放任何额外的参数了。&#xA;// 所以这里放空。&#xA;template &amp;lt;&amp;gt; class AddFloatOrMulInt&amp;lt;int&amp;gt;&#xA;{&#xA;    // ... 针对Int的实现 ... &#xA;};&#xA;&#xA;// Bingo!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;哈，这样就好了。我们来做一个练习。我们有一些类型，然后你要用模板做一个对照表，让类型对应上一个数字。我先来做一个示范：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;&#xA;template &amp;lt;typename T&amp;gt; class TypeToID&#xA;{&#xA;public:&#xA;    static int const ID = -1;&#xA;};&#xA;&#xA;template &amp;lt;&amp;gt; class TypeToID&amp;lt;uint8_t&amp;gt;&#xA;{&#xA;public:&#xA;    static int const ID = 0;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后呢，你的任务就是，要所有无符号的整数类型的特化（其实就是&lt;code&gt;uint8_t&lt;/code&gt;到&lt;code&gt;uint64_t&lt;/code&gt;啦），把所有的基本类型都赋予一个ID（当然是不一样的啦）。当你做完后呢，可以把类型所对应的ID打印出来，我仍然以 &lt;code&gt;uint8_t&lt;/code&gt; 为例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void PrintID()&#xA;{&#xA;    cout &amp;lt;&amp;lt; &#34;ID of uint8_t: &#34; &amp;lt;&amp;lt; TypeToID&amp;lt;uint8_t&amp;gt;::ID &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;嗯，看起来挺简单的，是吧。但是这里透露出了一个非常重要的信号，我希望你已经能察觉出来了： &lt;code&gt;TypeToID&lt;/code&gt; 如同是一个函数。这个函数只能在编译期间执行。它输入一个类型，输出一个ID。&lt;/p&gt; &#xA;&lt;p&gt;如果你体味到了这一点，那么恭喜你，你的模板元编程已经开悟了。&lt;/p&gt; &#xA;&lt;h3&gt;3.2.3. 特化：一些其它问题&lt;/h3&gt; &#xA;&lt;p&gt;在上一节结束之后，你一定做了许多的练习。我们再来做三个练习。第一，给&lt;code&gt;float&lt;/code&gt;一个ID；第二，给&lt;code&gt;void*&lt;/code&gt;一个ID；第三，给任意类型的指针一个ID。先来做第一个:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// ...&#xA;// TypeToID 的模板“原型”&#xA;// ...&#xA;&#xA;template &amp;lt;&amp;gt; class TypeToID&amp;lt;float&amp;gt;&#xA;{&#xA;public:&#xA;    static int const ID = 0xF10A7;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;嗯， 这个你已经了然于心了。那么&lt;code&gt;void*&lt;/code&gt;呢？你想了想，这已经是一个复合类型了。不错你还是战战兢兢地写了下来：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;&amp;gt; class TypeToID&amp;lt;void*&amp;gt;&#xA;{&#xA;public:&#xA;    static int const ID = 0x401d;&#xA;};&#xA;&#xA;void PrintID()&#xA;{&#xA;    cout &amp;lt;&amp;lt; &#34;ID of uint8_t: &#34; &amp;lt;&amp;lt; TypeToID&amp;lt;void*&amp;gt;::ID &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;遍译运行一下，对了。模板不过如此嘛。然后你觉得自己已经完全掌握了，并试图将所有C++类型都放到模板里面，开始了自我折磨的过程：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;class ClassB {};&#xA;&#xA;template &amp;lt;&amp;gt; class TypeToID&amp;lt;void ()&amp;gt;;      // 函数的TypeID&#xA;template &amp;lt;&amp;gt; class TypeToID&amp;lt;int[3]&amp;gt;;       // 数组的TypeID&#xA;template &amp;lt;&amp;gt; class TypeToID&amp;lt;int (int[3])&amp;gt;; // 这是以数组为参数的函数的TypeID&#xA;template &amp;lt;&amp;gt; class TypeToID&amp;lt;int (ClassB::*[3])(void*, float[2])&amp;gt;; // 我也不知道这是什么了，自己看着办吧。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;甚至连 &lt;code&gt;const&lt;/code&gt; 和 &lt;code&gt;volatile&lt;/code&gt; 都能装进去：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;&amp;gt; class TypeToID&amp;lt;int const * volatile * const volatile&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;此时就很明白了，只要 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 内填进去的是一个C++能解析的合法类型，模板都能让你特化。不过这个时候如果你一点都没有写错的话， &lt;code&gt;PrintID&lt;/code&gt; 中只打印了我们提供了特化的类型的ID。那如果我们没有为之提供特化的类型呢？比如说double？OK，实践出真知，我们来尝试着运行一下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void PrintID()&#xA;{&#xA;    cout &amp;lt;&amp;lt; &#34;ID of double: &#34; &amp;lt;&amp;lt; TypeToID&amp;lt;double&amp;gt;::ID &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;嗯，它输出的是-1。我们顺藤摸瓜会看到， &lt;code&gt;TypeToID&lt;/code&gt;的类模板“原型”的ID是值就是-1。通过这个例子可以知道，当模板实例化时提供的模板参数不能匹配到任何的特化形式的时候，它就会去匹配类模板的“原型”形式。&lt;/p&gt; &#xA;&lt;p&gt;不过这里有一个问题要理清一下。和继承不同，类模板的“原型”和它的特化类在实现上是没有关系的，并不是在类模板中写了 &lt;code&gt;ID&lt;/code&gt; 这个Member，那所有的特化就必须要加入 &lt;code&gt;ID&lt;/code&gt; 这个Member，或者特化就自动有了这个成员。完全没这回事。我们把类模板改成以下形式，或许能看的更清楚一点：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; class TypeToID&#xA;{&#xA;public:&#xA;    static int const NotID = -2;&#xA;};&#xA;&#xA;template &amp;lt;&amp;gt; class TypeToID&amp;lt;float&amp;gt;&#xA;{&#xA;public:&#xA;    static int const ID = 1;&#xA;};&#xA;&#xA;void PrintID()&#xA;{&#xA;    cout &amp;lt;&amp;lt; &#34;ID of float: &#34; &amp;lt;&amp;lt; TypeToID&amp;lt;float&amp;gt;::ID &amp;lt;&amp;lt; endl;       // Print &#34;1&#34;&#xA;    cout &amp;lt;&amp;lt; &#34;NotID of float: &#34; &amp;lt;&amp;lt; TypeToID&amp;lt;float&amp;gt;::NotID &amp;lt;&amp;lt; endl; // Error! TypeToID&amp;lt;float&amp;gt;使用的特化的类，这个类的实现没有NotID这个成员。&#xA;    cout &amp;lt;&amp;lt; &#34;ID of double: &#34; &amp;lt;&amp;lt; TypeToID&amp;lt;double&amp;gt;::ID &amp;lt;&amp;lt; endl;     // Error! TypeToID&amp;lt;double&amp;gt;是由类模板实例化出来的，它只有NotID，没有ID这个成员。&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这样就明白了。类模板和类模板的特化的作用，仅仅是指导编译器选择哪个编译，但是特化之间、特化和它原型的类模板之间，是分别独立实现的。所以如果多个特化、或者特化和对应的类模板有着类似的内容，很不好意思，你得写上若干遍了。&lt;/p&gt; &#xA;&lt;p&gt;第三个问题，是写一个模板匹配任意类型的指针。对于C语言来说，因为没有泛型的概念，因此它提供了无类型的指针&lt;code&gt;void*&lt;/code&gt;。它的优点是，所有指针都能转换成它。它的缺点是，一旦转换称它后，你就再也不知道这个指针到底是指向&lt;code&gt;float&lt;/code&gt;或者是&lt;code&gt;int&lt;/code&gt;或者是&lt;code&gt;struct&lt;/code&gt;了。&lt;/p&gt; &#xA;&lt;p&gt;比如说&lt;code&gt;copy&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;void copy(void* dst, void const* src, size_t elemSize, size_t elemCount, void (*copyElem)(void* dstElem, void const* srcElem))&#xA;{&#xA;    void const* reader = src;&#xA;    void const* writer = dst;&#xA;    for(size_t i = 0; i &amp;lt; elemCount; ++i)&#xA;    {&#xA;        copyElem(writer, reader);&#xA;        advancePointer(reader, elemSize); // 把Reader指针往后移动一些字节&#xA;        advancePointer(writer, elemSize);&#xA;     }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;为什么要提供copyElem，是因为可能有些struct需要深拷贝，所以得用特殊的copy函数。这个在C++98/03里面就体现为拷贝构造和赋值函数。&lt;/p&gt; &#xA;&lt;p&gt;但是不管怎么搞，因为这个函数的参数只是&lt;code&gt;void*&lt;/code&gt;而已，当你使用了错误的elemSize，或者传入了错误的copyElem，就必须要到运行的时候才有可能看出来。注意，这还只是有可能而已。&lt;/p&gt; &#xA;&lt;p&gt;那么C++有了模板后，能否既能匹配任意类型的指针，同时又保留了类型信息呢？答案是显然的。至于怎么写，那就得充分发挥你的直觉了：&lt;/p&gt; &#xA;&lt;p&gt;首先，我们需要一个&lt;code&gt;typename T&lt;/code&gt;来指代“任意类型”这四个字：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;接下来，我们要写函数原型：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void copy(?? dest, ?? src, size_t elemCount);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这里的 &lt;code&gt;??&lt;/code&gt; 要怎么写呢？既然我们有了模板类型参数T，那我们不如就按照经验，写 &lt;code&gt;T*&lt;/code&gt; 看看。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt;&#xA;void copy(T* dst, T const* src, size_t elemCount);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;编译一下，咦，居然通过了。看来这里的语法与我们以前学到的知识并没有什么不同。这也是语言设计最重要的一点原则：一致性。它可以让你辛辛苦苦体验到的规律不至于白费。&lt;/p&gt; &#xA;&lt;p&gt;最后就是实现：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt;&#xA;void copy(T* dst, T const* src, size_t elemCount)&#xA;{&#xA;    for(size_t i = 0; i &amp;lt; elemCount; ++i)&#xA;    {&#xA;        dst[i] = src[i];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;是不是简洁了许多？你不需要再传入size；只要你有正确的赋值函数，也不需要提供定制的copy；也不用担心dst和src的类型不匹配了。&lt;/p&gt; &#xA;&lt;p&gt;最后，我们把函数模板学到的东西，也应用到类模板里面：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; // 嗯，需要一个T&#xA;class TypeToID&amp;lt;T*&amp;gt; // 我要对所有的指针类型特化，所以这里就写T*&#xA;{&#xA;public:&#xA;    static int const ID = 0x80000000;&#x9;// 用最高位表示它是一个指针&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;最后写个例子来测试一下，看看我们的 &lt;code&gt;T*&lt;/code&gt; 能不能搞定 &lt;code&gt;float*&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void PrintID()&#xA;{&#xA;    cout &amp;lt;&amp;lt; &#34;ID of float*: &#34; &amp;lt;&amp;lt; TypeToID&amp;lt;float*&amp;gt;::ID &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;哈哈，大功告成。嗯，别急着高兴。待我问一个问题：你知道 &lt;code&gt;TypeToID&amp;lt;float*&amp;gt;&lt;/code&gt; 后，这里的T是什么吗？换句话说，你知道下面这段代码打印的是什么吗？&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// ...&#xA;// TypeToID 的其他代码，略过不表&#xA;// ...&#xA;&#xA;template &amp;lt;typename T&amp;gt; // 嗯，需要一个T&#xA;class TypeToID&amp;lt;T*&amp;gt; // 我要对所有的指针类型特化，所以这里就写T*&#xA;{&#xA;public:&#xA;    typedef T&#x9;&#x9; SameAsT;&#xA;    static int const ID = 0x80000000; // 用最高位表示它是一个指针&#xA;};&#xA;&#xA;void PrintID()&#xA;{&#xA;    cout &amp;lt;&amp;lt; &#34;ID of float*: &#34; &amp;lt;&amp;lt; TypeToID&amp;lt; TypeToID&amp;lt;float*&amp;gt;::SameAsT &amp;gt;::ID &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;别急着运行，你先猜。&lt;/p&gt; &#xA;&lt;p&gt;------------------------- 这里是给勤于思考的码猴的分割线 -------------------------------&lt;/p&gt; &#xA;&lt;p&gt;OK，猜出来了吗，T是&lt;code&gt;float&lt;/code&gt;。为什么呢？因为你用 &lt;code&gt;float *&lt;/code&gt; 匹配了 &lt;code&gt;T *&lt;/code&gt;，所以 &lt;code&gt;T&lt;/code&gt; 就对应 &lt;code&gt;float&lt;/code&gt; 了。没想清楚的自己再多体会一下。&lt;/p&gt; &#xA;&lt;p&gt;嗯，所以实际上，我们可以利用这个特性做一件事情：把指针类型的那个指针给“干掉”：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt;&#xA;class RemovePointer&#xA;{&#xA;public:&#xA;    typedef T Result;  // 如果放进来的不是一个指针，那么它就是我们要的结果。&#xA;};&#xA;&#xA;template &amp;lt;typename T&amp;gt;&#xA;class RemovePointer&amp;lt;T*&amp;gt;&#x9;// 祖传牛皮藓，专治各类指针&#xA;{&#xA;public:&#xA;    typedef T Result;  // 正如我们刚刚讲的，去掉一层指针，把 T* 这里的 T 取出来。&#xA;};&#xA;&#xA;void Foo()&#xA;{&#xA;    RemovePointer&amp;lt;float*&amp;gt;::Result x = 5.0f; // 喏，用RemovePointer后，那个Result就是把float*的指针处理掉以后的结果：float啦。&#xA;    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当然啦，这里我们实现的不算是真正的 &lt;code&gt;RemovePointer&lt;/code&gt;，因为我们只去掉了一层指针。而如果传进来的是类似 &lt;code&gt;RemovePointer&amp;lt;int**&amp;gt;&lt;/code&gt; 这样的东西呢？是的没错，去掉一层之后还是一个指针。&lt;code&gt;RemovePointer&amp;lt;int**&amp;gt;::Result&lt;/code&gt; 应该是一个 &lt;code&gt;int*&lt;/code&gt;，要怎么才能实现我们想要的呢？聪明的你一定能想到：只要像剥洋葱一样，一层一层一层地剥开，不就好了吗！相应地我们应该怎么实现呢？可以把 &lt;code&gt;RemovePointer&lt;/code&gt; 的特化版本改成这样（当然如果有一些不明白的地方你可以暂时跳过，接着往下看，很快就会明白的）：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt;&#xA;class RemovePointer&amp;lt;T*&amp;gt;&#xA;{&#xA;public:&#xA;    // 如果是传进来的是一个指针，我们就剥夺一层，直到指针形式不存在为止。&#xA;    // 例如 RemovePointer&amp;lt;int**&amp;gt;，Result 是 RemovePointer&amp;lt;int*&amp;gt;::Result，&#xA;    // 而 RemovePointer&amp;lt;int*&amp;gt;::Result 又是 int，最终就变成了我们想要的 int，其它也是类似。&#xA;    typedef typename RemovePointer&amp;lt;T&amp;gt;::Result Result;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;是的没错，这便是我们想要的 &lt;code&gt;RemovePointer&lt;/code&gt; 的样子。类似的你还可以试着实现 &lt;code&gt;RemoveConst&lt;/code&gt;, &lt;code&gt;AddPointer&lt;/code&gt; 之类的东西。&lt;/p&gt; &#xA;&lt;p&gt;OK，回到我们之前的话题，如果这个时候，我需要给 &lt;code&gt;int*&lt;/code&gt; 提供一个更加特殊的特化，那么我还得多提供一个：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// ...&#xA;// TypeToID 的其他代码，略过不表&#xA;// ...&#xA;&#xA;template &amp;lt;typename T&amp;gt; // 嗯，需要一个T&#xA;class TypeToID&amp;lt;T*&amp;gt;    // 我要对所有的指针类型特化，所以这里就写T*&#xA;{&#xA;public:&#xA;    typedef T SameAsT;&#xA;    static int const ID = 0x80000000; // 用最高位表示它是一个指针&#xA;};&#xA;&#xA;template &amp;lt;&amp;gt; // 嗯，int* 已经是个具体的不能再具体的类型了，所以模板不需要额外的类型参数了&#xA;class TypeToID&amp;lt;int*&amp;gt; // 嗯，对int*的特化。在这里呢，要把int*整体看作一个类型&#xA;{&#xA;public:&#xA;    static int const ID = 0x12345678; // 给一个缺心眼的ID&#xA;};&#xA;&#xA;void PrintID()&#xA;{&#xA;    cout &amp;lt;&amp;lt; &#34;ID of int*: &#34; &amp;lt;&amp;lt; TypeToID&amp;lt;int*&amp;gt;::ID &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;嗯，这个时候它会输出0x12345678的十进制（大概？）。 可能会有较真的人说，&lt;code&gt;int*&lt;/code&gt; 去匹配 &lt;code&gt;T&lt;/code&gt; 或者 &lt;code&gt;T*&lt;/code&gt;，也是合法的。就和你说22岁以上能结婚，那24岁当然也能结婚一样。 那为什么 &lt;code&gt;int*&lt;/code&gt; 就会找 &lt;code&gt;int*&lt;/code&gt;，&lt;code&gt;float *&lt;/code&gt;因为没有合适的特化就去找 &lt;code&gt;T*&lt;/code&gt;，更一般的就去找 &lt;code&gt;T&lt;/code&gt; 呢？废话，有专门为你准备的东西你不用，非要自己找事？这就是直觉。 但是呢，直觉对付更加复杂的问题还是没用的（也不是没用，主要是你没这个直觉了）。我们要把这个直觉，转换成合理的规则——即模板的匹配规则。 当然，这个匹配规则是对复杂问题用的，所以我们会到实在一眼看不出来的时候才会动用它。一开始我们只要把握：&lt;strong&gt;模板是从最特殊到最一般形式进行匹配的&lt;/strong&gt; 就可以了。&lt;/p&gt; &#xA;&lt;h2&gt;3.3. 即用即推导&lt;/h2&gt; &#xA;&lt;h3&gt;3.3.1. 视若无睹的语法错误&lt;/h3&gt; &#xA;&lt;p&gt;这一节我们将讲述模板一个非常重要的行为特点：那就是什么时候编译器会对模板进行推导，推导到什么程度。&lt;/p&gt; &#xA;&lt;p&gt;这一知识，对于理解模板的编译期行为、以及修正模板编译错误都非常重要。&lt;/p&gt; &#xA;&lt;p&gt;我们先来看一个例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; struct X {};&#xA;&#x9;&#xA;template &amp;lt;typename T&amp;gt; struct Y&#xA;{&#xA;    typedef X&amp;lt;T&amp;gt; ReboundType;&#x9;&#x9;&#x9;&#x9;        // 类型定义1&#xA;    typedef typename X&amp;lt;T&amp;gt;::MemberType MemberType;&#x9;// 类型定义2&#xA;    typedef UnknownType MemberType3;&#x9;&#x9;&#x9;    // 类型定义3&#xA;&#xA;    void foo()&#xA;    {&#xA;        X&amp;lt;T&amp;gt; instance0;&#xA;        typename X&amp;lt;T&amp;gt;::MemberType instance1;&#xA;        WTF instance2&#xA;        大王叫我来巡山 - + &amp;amp;&#xA;    }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;把这段代码编译一下，类型定义3出错，其它的都没问题。不过到这里你应该会有几个问题：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;不是&lt;code&gt;struct X&amp;lt;T&amp;gt;&lt;/code&gt;的定义是空的吗？为什么在&lt;code&gt;struct Y&lt;/code&gt;内的类型定义2使用了 &lt;code&gt;X&amp;lt;T&amp;gt;::MemberType&lt;/code&gt; 编译器没有报错？&lt;/li&gt; &#xA; &lt;li&gt;类型定义2中的&lt;code&gt;typename&lt;/code&gt;是什么鬼？为什么类型定义1就不需要？&lt;/li&gt; &#xA; &lt;li&gt;为什么类型定义3会导致编译错误？&lt;/li&gt; &#xA; &lt;li&gt;为什么&lt;code&gt;void foo()&lt;/code&gt;在MSVC下什么错误都没报？&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;这时我们就需要请出C++11标准 —— 中的某些概念了。这是我们到目前为止第一次参阅标准。我希望能尽量减少直接参阅标准的次数，因此即便是极为复杂的模板匹配决议我都暂时没有引入标准中的描述。 然而，Template引入的“双阶段名称查找（Two phase name lookup）”堪称是C++中最黑暗的角落 —— 这是LLVM的团队自己在博客上说的 —— 因此在这里，我们还是有必要去了解标准中是如何规定的。&lt;/p&gt; &#xA;&lt;h3&gt;3.3.2. 名称查找：I am who I am&lt;/h3&gt; &#xA;&lt;p&gt;在C++标准中对于“名称查找（name lookup）”这个高大上的名词的诠释，主要集中出现在三处。第一处是3.4节，标题名就叫“Name Lookup”；第二处在10.2节，继承关系中的名称查找；第三处在14.6节，名称解析（name resolution）。&lt;/p&gt; &#xA;&lt;p&gt;名称查找/名称解析，是编译器的基石。对编译原理稍有了解的人，都知道“符号表”的存在及重要意义。考虑一段最基本的C代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;int a = 0;&#xA;int b;&#xA;b = (a + 1) * 2;&#xA;printf(&#34;Result: %d&#34;, b);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在这段代码中，所有出现的符号可以分为以下几类：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;int&lt;/code&gt;：类型标识符，代表整型；&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;printf&lt;/code&gt;：变量名或函数名；&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;：运算符；&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;,&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;：分隔符；&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;那么，编译器怎么知道&lt;code&gt;int&lt;/code&gt;就是整数类型，&lt;code&gt;b=(a+1)*2&lt;/code&gt;中的&lt;code&gt;a&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;就是整型变量呢？这就是名称查找/名称解析的作用：它告诉编译器，这个标识符（identifer）是在哪里被声明或定义的，它究竟是什么意思。&lt;/p&gt; &#xA;&lt;p&gt;也正因为这个机制非常基础，所以它才会面临各种可能的情况，编译器也要想尽办法让它在大部分场合都表现的合理。比如我们常见的作用域规则，就是为了对付名称在不同代码块中传播、并且遇到重名要如何处理的问题。下面是一个最简单的、大家在语言入门过程中都会碰到的一个例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int a = 0;&#xA;void f() {&#xA;    int a = 0;&#xA;    a += 2;&#xA;    printf(&#34;Inside &amp;lt;a&amp;gt;: %d\n&#34;, a);&#xA;}&#xA;void g() {&#xA;    printf(&#34;Outside &amp;lt;a&amp;gt;: %d\n&#34;, a);&#xA;}&#xA;int main() {&#xA;    f();&#xA;    g();&#xA;}&#xA;&#xA;/* ------------ Console Output -----------------&#xA;Inside &amp;lt;a&amp;gt;: 2&#xA;Outside &amp;lt;a&amp;gt;: 0&#xA;--------------- Console Output -------------- */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;我想大家尽管不能处理所有名称查找中所遇到的问题，但是对一些常见的名称查找规则也有了充分的经验，可以解决一些常见的问题。 但是模板的引入，使得名称查找这一本来就不简单的基本问题变得更加复杂了。 考虑下面这个例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct A  { int a; };&#xA;struct AB { int a, b; };&#xA;struct C  { int c; };&#xA;&#xA;template &amp;lt;typename T&amp;gt; foo(T&amp;amp; v0, C&amp;amp; v1){&#xA;    v0.a = 1;&#xA;    v1.a = 2;&#xA;    v1.c = 3;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;简单分析上述代码很容易得到以下结论：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;函数&lt;code&gt;foo&lt;/code&gt;中的变量&lt;code&gt;v1&lt;/code&gt;已经确定是&lt;code&gt;struct C&lt;/code&gt;的实例，所以，&lt;code&gt;v1.a = 2;&lt;/code&gt;会导致编译错误，&lt;code&gt;v1.c = 3;&lt;/code&gt;是正确的代码；&lt;/li&gt; &#xA; &lt;li&gt;对于变量&lt;code&gt;v0&lt;/code&gt;来说，这个问题就变得很微妙。如果&lt;code&gt;v0&lt;/code&gt;是&lt;code&gt;struct A&lt;/code&gt;或者&lt;code&gt;struct AB&lt;/code&gt;的实例，那么&lt;code&gt;foo&lt;/code&gt;中的语句&lt;code&gt;v0.a = 1;&lt;/code&gt;就是正确的。如果是&lt;code&gt;struct C&lt;/code&gt;，那么这段代码就是错误的。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;因此在模板定义的地方进行语义分析，并不能&lt;strong&gt;完全&lt;/strong&gt;得出代码是正确或者错误的结论，只有到了实例化阶段，确定了模板参数的类型后，才知道这段代码正确与否。令人高兴的是，在这一问题上，我们和C++标准委员会的见地一致，说明我们的C++水平已经和Herb Sutter不分伯仲了。既然我们和Herb Sutter水平差不多，那凭什么人家就吃香喝辣？下面我们来选几条标准看看服不服：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;14.6 名称解析（Name resolution）&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; 模板定义中能够出现以下三类名称：&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;模板名称、或模板实现中所定义的名称；&lt;/li&gt; &#xA;  &lt;li&gt;和模板参数有关的名称；&lt;/li&gt; &#xA;  &lt;li&gt;模板定义所在的定义域内能看到的名称。&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;…&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;9)&lt;/strong&gt; … 如果名字查找和模板参数有关，那么查找会延期到模板参数全都确定的时候。 …&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;10)&lt;/strong&gt; 如果（模板定义内出现的）名字和模板参数无关，那么在模板定义处，就应该找得到这个名字的声明。…&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;14.6.2 依赖性名称（Dependent names）&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; …（模板定义中的）表达式和类型可能会依赖于模板参数，并且模板参数会影响到名称查找的作用域 … 如果表达式中有操作数依赖于模板参数，那么整个表达式都依赖于模板参数，名称查找延期到&lt;strong&gt;模板实例化时&lt;/strong&gt;进行。并且定义时和实例化时的上下文都会参与名称查找。（依赖性）表达式可以分为类型依赖（类型指模板参数的类型）或值依赖。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;14.6.2.2 类型依赖的表达式&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; 如果成员函数所属的类型是和模板参数有关的，那么这个成员函数中的&lt;code&gt;this&lt;/code&gt;就认为是类型依赖的。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;14.6.3 非依赖性名称（Non-dependent names）&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; 非依赖性名称在&lt;strong&gt;模板定义&lt;/strong&gt;时使用通常的名称查找规则进行名称查找。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf&#34;&gt;Working Draft: Standard of Programming Language C++, N3337&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;知道差距在哪了吗：人家会说黑话。什么时候咱们也会说黑话了，就是标准委员会成员了，反正懂得也不比他们少。不过黑话确实不太好懂 —— 怪我翻译不好的人，自己看原文，再说好懂了人家还靠什么吃饭 —— 我们来举一个例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int a;&#xA;struct B { int v; }&#xA;template &amp;lt;typename T&amp;gt; struct X {&#xA;    B b;                  // B 是第三类名字，b 是第一类&#xA;    T t;                  // T 是第二类&#xA;    X* anthor;            // X 这里代指 X&amp;lt;T&amp;gt;，第一类&#xA;    typedef int Y;        // int 是第三类&#xA;    Y y;                  // Y 是第一类&#xA;    C c;                  // C 什么都不是，编译错误。&#xA;    void foo() {&#xA;       b.v += y;          // b 是第一类，非依赖性名称&#xA;       b.v *= T::s_mem;   // T::s_mem 是第二类&#xA;                          // s_mem的作用域由T决定&#xA;                          // 依赖性名称，类型依赖&#xA;    }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;所以，按照标准的意思，名称查找会在模板定义和实例化时各做一次，分别处理非依赖性名称和依赖性名称的查找。这就是“两阶段名称查找”这一名词的由来。只不过这个术语我也不知道是谁发明的，它并没有出现的标准上，但是频繁出现在StackOverflow和Blog上。&lt;/p&gt; &#xA;&lt;p&gt;接下来，我们就来解决2.3.1节中留下的几个问题。&lt;/p&gt; &#xA;&lt;p&gt;先看第四个问题。为什么MSVC中，函数模板的定义内不管填什么编译器都不报错？因为MSVC在分析模板中成员函数定义时没有做任何事情。至于为啥连“大王叫我来巡山”都能过得去，这是C++语法/语义分析的特殊性导致的。 C++是个非常复杂的语言，以至于它的编译器，不可能通过词法-语法-语义多趟分析清晰分割，因为它的语义将会直接干扰到语法：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void foo(){&#xA;    A&amp;lt;T&amp;gt; b;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在这段简短的代码中，就包含了两个歧义的可能，一是&lt;code&gt;A&lt;/code&gt;是模板，于是&lt;code&gt;A&amp;lt;T&amp;gt;&lt;/code&gt;是一个实例化的类型，&lt;code&gt;b&lt;/code&gt;是变量，另外一种是比较表达式（Comparison Expression）的组合，&lt;code&gt;((A &amp;lt; T) &amp;gt; b)&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;甚至词法分析也会受到语义的干扰，C++11中才明确被修正的&lt;code&gt;vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&lt;/code&gt;，就因为&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;被误解为右移或流操作符，而导致某些编译器上的错误。因此，在语义没有确定之前，连语法都没有分析的价值。&lt;/p&gt; &#xA;&lt;p&gt;大约是基于如此考量，为了偷懒，MSVC将包括所有模板成员函数的语法/语义分析工作都挪到了第二个Phase，于是乎连带着语法分析都送进了第二个阶段。符合标准么？显然不符合。&lt;/p&gt; &#xA;&lt;p&gt;但是这里值得一提的是，MSVC的做法和标准相比，虽然投机取巧，但并非有弊无利。我们来先说一说坏处。考虑以下例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// ----------- X.h ------------&#xA;&#xA;template &amp;lt;typename T&amp;gt; struct X {&#xA;    // 实现代码&#xA;};&#xA;&#xA;// ---------- X.cpp -----------&#xA;&#xA;// ... 一些代码 ...&#xA;X&amp;lt;int&amp;gt; xi; &#xA;// ... 一些代码 ...&#xA;X&amp;lt;float&amp;gt; xf;&#xA;// ... 一些代码 ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;此时如果X中有一些与模板参数无关的错误，如果名称查找/语义分析在两个阶段完成，那么这些错误会很早、且唯一的被提示出来；但是如果一切都在实例化时处理，那么可能会导致不同的实例化过程提示同样的错误。而模板在运用过程中，往往会产生很多实例，此时便会大量报告同样的错误。&lt;/p&gt; &#xA;&lt;p&gt;当然，MSVC并不会真的这么做。根据推测，最终他们是合并了相同的错误。因为即便对于模板参数相关的编译错误，也只能看到最后一次实例化的错误信息：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; struct X {};&#xA;&#x9;&#xA;template &amp;lt;typename T&amp;gt; struct Y&#xA;{&#xA;    typedef X&amp;lt;T&amp;gt; ReboundType; // 类型定义1&#xA;    void foo()&#xA;    {&#xA;        X&amp;lt;T&amp;gt; instance0;&#xA;        X&amp;lt;T&amp;gt;::MemberType instance1;&#xA;        WTF instance2&#xA;    }&#xA;};&#xA;&#xA;void poo(){&#xA;    Y&amp;lt;int&amp;gt;::foo();&#xA;    Y&amp;lt;float&amp;gt;::foo();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MSVC下和模板相关的错误只有一个：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error C2039: &#39;MemberType&#39;: is not a member of &#39;X&amp;lt;T&amp;gt;&#39;&#xA;          with&#xA;          [&#xA;              T=float&#xA;          ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后是一些语法错误，比如&lt;code&gt;MemberType&lt;/code&gt;不是一个合法的标识符之类的。这样甚至你会误以为&lt;code&gt;int&lt;/code&gt;情况下模板的实例化是正确的。虽然在有了经验之后会发现这个问题挺荒唐的，但是仍然会让新手有困惑。&lt;/p&gt; &#xA;&lt;p&gt;相比之下，更加遵守标准的Clang在错误提示上就要清晰许多：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error: unknown type name &#39;WTF&#39;&#xA;    WTF instance2&#xA;    ^&#xA;error: expected &#39;;&#39; at end of declaration&#xA;    WTF instance2&#xA;                 ^&#xA;                 ;&#xA;error: no type named &#39;MemberType&#39; in &#39;X&amp;lt;int&amp;gt;&#39;&#xA;    typename X&amp;lt;T&amp;gt;::MemberType instance1;&#xA;    ~~~~~~~~~~~~~~~^~~~~~~~~~&#xA;    note: in instantiation of member function &#39;Y&amp;lt;int&amp;gt;::foo&#39; requested here&#xA;        Y&amp;lt;int&amp;gt;::foo();&#xA;                ^&#xA;error: no type named &#39;MemberType&#39; in &#39;X&amp;lt;float&amp;gt;&#39;&#xA;    typename X&amp;lt;T&amp;gt;::MemberType instance1;&#xA;    ~~~~~~~~~~~~~~~^~~~~~~~~~&#xA;    note: in instantiation of member function &#39;Y&amp;lt;float&amp;gt;::foo&#39; requested here&#xA;        Y&amp;lt;float&amp;gt;::foo();&#xA;                  ^&#xA;4 errors generated.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可以看到，Clang的提示和标准更加契合。它很好地区分了模板在定义和实例化时分别产生的错误。&lt;/p&gt; &#xA;&lt;p&gt;另一个缺点也与之类似。因为没有足够的检查，如果你写的模板没有被实例化，那么很可能缺陷会一直存在于代码之中。特别是模板代码多在头文件。虽然不如接口那么重要，但也是属于被公开的部分，别人很可能会踩到坑上。缺陷一旦传播开修复起来就没那么容易了。&lt;/p&gt; &#xA;&lt;p&gt;但是正如我前面所述，这个违背了标准的特性，并不是一无是处。首先，它可以完美的兼容标准。符合标准的、能够被正确编译的代码，一定能够被MSVC的方案所兼容。其次，它带来了一个非常有趣的特性，看下面这个例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct A;&#xA;template &amp;lt;typename T&amp;gt; struct X {&#xA;    int v;&#xA;    void convertTo(A&amp;amp; a) {&#xA;       a.v = v; // 这里需要A的实现&#xA;    }&#xA;};&#xA;&#xA;struct A { int v; };&#xA;&#xA;void main() {&#xA;    X&amp;lt;int&amp;gt; x;&#xA;    x.foo(5);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这个例子在Clang中是错误的，因为：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error: variable has incomplete type &#39;A&#39;&#xA;                        A a;&#xA;                          ^&#xA;    note: forward declaration of &#39;A&#39;&#xA;     struct A;&#xA;            ^&#xA;1 error generated.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;符合标准的写法需要将类模板的定义，和函数模板的定义分离开：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;TODO 此处例子不够恰当，并且描述有歧义。需要在未来版本中修订。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct A;&#xA;template &amp;lt;typename T&amp;gt; struct X {&#xA;    int v;&#xA;    void convertTo(A&amp;amp; a);&#xA;};&#xA;&#xA;struct A { int v; };&#xA;&#xA;template &amp;lt;typename T&amp;gt; void X&amp;lt;T&amp;gt;::convertTo(A&amp;amp; a) {&#xA;   a.v = v;&#xA;}&#xA;    &#xA;void main() {&#xA;    X&amp;lt;int&amp;gt; x;&#xA;    x.foo(5);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;但是其实我们知道，&lt;code&gt;foo&lt;/code&gt;要到实例化之后，才需要真正的做语义分析。在MSVC上，因为函数实现就是到模板实例化时才处理的，所以这个例子是完全正常工作的。因此在上面这个例子中，MSVC的实现要比标准更加易于写和维护，是不是有点写Java/C那种声明实现都在同一处的清爽感觉了呢！&lt;/p&gt; &#xA;&lt;p&gt;扩展阅读： &lt;a href=&#34;http://blog.llvm.org/2009/12/dreaded-two-phase-name-lookup.html&#34;&gt;The Dreaded Two-Phase Name Lookup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3.3.3. “多余的” typename 关键字&lt;/h3&gt; &#xA;&lt;p&gt;到了这里，2.3.1 中提到的四个问题，还有三个没有解决：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; struct X {};&#xA;&#x9;&#xA;template &amp;lt;typename T&amp;gt; struct Y&#xA;{&#xA;    typedef X&amp;lt;T&amp;gt; ReboundType;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// 这里为什么是正确的？&#xA;    typedef typename X&amp;lt;T&amp;gt;::MemberType MemberType2;&#x9;// 这里的typename是做什么的？&#xA;    typedef UnknownType MemberType3;&#x9;&#x9;&#x9;&#x9;// 这里为什么会出错？&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;我们运用我们2.3.2节中学习到的标准，来对Y内部做一下分析：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; struct Y&#xA;{&#xA;    // X可以查找到原型；&#xA;    // X&amp;lt;T&amp;gt;是一个依赖性名称，模板定义阶段并不管X&amp;lt;T&amp;gt;是不是正确的。&#xA;    typedef X&amp;lt;T&amp;gt; ReboundType;&#xA;&#x9;&#xA;    // X可以查找到原型；&#xA;    // X&amp;lt;T&amp;gt;是一个依赖性名称，X&amp;lt;T&amp;gt;::MemberType也是一个依赖性名称；&#xA;    // 所以模板声明时也不会管X模板里面有没有MemberType这回事。&#xA;    typedef typename X&amp;lt;T&amp;gt;::MemberType MemberType2;&#xA;&#x9;&#xA;    // UnknownType 不是一个依赖性名称&#xA;    // 而且这个名字在当前作用域中不存在，所以直接报错。&#xA;    typedef UnknownType MemberType3;&#x9;&#x9;&#x9;&#x9;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;下面，唯一的问题就是第二个：&lt;code&gt;typename&lt;/code&gt;是做什么的？&lt;/p&gt; &#xA;&lt;p&gt;对于用户来说，这其实是一个语法噪音。也就是说，其实就算没有它，语法上也说得过去。事实上，某些情况下MSVC的确会在标准需要的时候，不用写&lt;code&gt;typename&lt;/code&gt;。但是标准中还是规定了形如 &lt;code&gt;T::MemberType&lt;/code&gt; 这样的&lt;code&gt;qualified id&lt;/code&gt; 在默认情况下不是一个类型，而是解释为&lt;code&gt;T&lt;/code&gt;的一个成员变量&lt;code&gt;MemberType&lt;/code&gt;，只有当&lt;code&gt;typename&lt;/code&gt;修饰之后才能作为类型出现。&lt;/p&gt; &#xA;&lt;p&gt;事实上，标准对&lt;code&gt;typename&lt;/code&gt;的使用规定极为复杂，也算是整个模板中的难点之一。如果想了解所有的标准，需要阅读标准14.6节下2-7条，以及14.6.2.1第一条中对于&lt;code&gt;current instantiation&lt;/code&gt;的解释。&lt;/p&gt; &#xA;&lt;p&gt;简单来说，如果编译器能在出现的时候知道它是一个类型，那么就不需要&lt;code&gt;typename&lt;/code&gt;，如果必须要到实例化的时候才能知道它是不是合法，那么定义的时候就把这个名称作为变量而不是类型。&lt;/p&gt; &#xA;&lt;p&gt;我们用一行代码来说明这个问题：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;a * b;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在没有模板的情况下，这个语句有两种可能的意思：如果&lt;code&gt;a&lt;/code&gt;是一个类型，这就是定义了一个指针&lt;code&gt;b&lt;/code&gt;，它拥有类型&lt;code&gt;a*&lt;/code&gt;；如果&lt;code&gt;a&lt;/code&gt;是一个对象或引用，这就是计算一个表达式&lt;code&gt;a*b&lt;/code&gt;，虽然结果并没有保存下来。可是如果上面的&lt;code&gt;a&lt;/code&gt;是模板参数的成员，会发生什么呢？&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; void meow()&#xA;{&#xA; &amp;nbsp; &amp;nbsp;T::a * b; // 这是指针定义还是表达式语句？&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;编译器对模板进行语法检查的时候，必须要知道上面那一行到底是个什么——这当然可以推迟到实例化的时候进行（比如VC，这也是上面说过VC可以不加&lt;code&gt;typename&lt;/code&gt;的原因），不过那是另一个故事了——显然在模板定义的时候，编译器并不能妄断。因此，C++标准规定，在没有&lt;code&gt;typename&lt;/code&gt;约束的情况下认为这里&lt;code&gt;T::a&lt;/code&gt;不是类型，因此&lt;code&gt;T::a * b;&lt;/code&gt; 会被当作表达式语句（例如乘法）；而为了告诉编译器这是一个指针的定义，我们必须在&lt;code&gt;T::a&lt;/code&gt;之前加上&lt;code&gt;typename&lt;/code&gt;关键字，告诉编译器&lt;code&gt;T::a&lt;/code&gt;是一个类型，这样整个语句才能符合指针定义的语法。&lt;/p&gt; &#xA;&lt;p&gt;在这里，我举几个例子帮助大家理解&lt;code&gt;typename&lt;/code&gt;的用法，这几个例子已经足以涵盖日常使用&lt;a href=&#34;https://goo.gl/zCRNYx&#34;&gt;（预览）&lt;/a&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct A;&#xA;template &amp;lt;typename T&amp;gt; struct B;&#xA;template &amp;lt;typename T&amp;gt; struct X {&#xA;    typedef X&amp;lt;T&amp;gt; TA; // 编译器当然知道 X&amp;lt;T&amp;gt; 是一个类型。&#xA;    typedef X    TB; // X 等价于 X&amp;lt;T&amp;gt; 的缩写&#xA;    typedef T    TC; // T 不是一个类型还玩毛&#xA;    &#xA;    // ！！！注意我要变形了！！！&#xA;    class Y {&#xA;        typedef X&amp;lt;T&amp;gt;     TD;          // X 的内部，既然外部高枕无忧，内部更不用说了&#xA;        typedef X&amp;lt;T&amp;gt;::Y  TE;          // 嗯，这里也没问题，编译器知道Y就是当前的类型，&#xA;                                      // 这里在VS2015上会有错，需要添加 typename，&#xA;                                      // Clang 上顺利通过。&#xA;        typedef typename X&amp;lt;T*&amp;gt;::Y TF; // 这个居然要加 typename！&#xA;                                      // 因为，X&amp;lt;T*&amp;gt;和X&amp;lt;T&amp;gt;不一样哦，&#xA;                                      // 它可能会在实例化的时候被别的偏特化给抢过去实现了。&#xA;    };&#xA;    &#xA;    typedef A TG;                   // 嗯，没问题，A在外面声明啦&#xA;    typedef B&amp;lt;T&amp;gt; TH;                // B&amp;lt;T&amp;gt;也是一个类型&#xA;    typedef typename B&amp;lt;T&amp;gt;::type TI; // 嗯，因为不知道B&amp;lt;T&amp;gt;::type的信息，&#xA;                                    // 所以需要typename&#xA;    typedef B&amp;lt;int&amp;gt;::type TJ;        // B&amp;lt;int&amp;gt; 不依赖模板参数，&#xA;                                    // 所以编译器直接就实例化（instantiate）了&#xA;                                    // 但是这个时候，B并没有被实现，所以就出错了&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;3.4. 本章小结&lt;/h2&gt; &#xA;&lt;p&gt;这一章是写作中最艰难的一章，中间停滞了将近一年。因为要说清楚C++模板中一些语法噪音和设计决议并不是一件轻松的事情。不过通过这一章的学习，我们知道了下面这几件事情：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;部分特化/偏特化&lt;/strong&gt; 和 &lt;strong&gt;特化&lt;/strong&gt; 相当于是模板实例化过程中的&lt;code&gt;if-then-else&lt;/code&gt;。这使得我们根据不同类型，选择不同实现的需求得以实现；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在 2.3.3 一节我们插入了C++模板中最难理解的内容之一：名称查找。名称查找是语义分析的一个环节，模板内书写的 &lt;strong&gt;变量声明&lt;/strong&gt;、&lt;strong&gt;typedef&lt;/strong&gt;、&lt;strong&gt;类型名称&lt;/strong&gt; 甚至 &lt;strong&gt;类模板中成员函数的实现&lt;/strong&gt; 都要符合名称查找的规矩才不会出错；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;C++编译器对语义的分析的原则是“大胆假设，小心求证”：在能求证的地方尽量求证 —— 比如两段式名称查找的第一阶段；无法检查的地方假设你是正确的 —— 比如&lt;code&gt;typedef typename A&amp;lt;T&amp;gt;::MemberType X;&lt;/code&gt;在模板定义时因为&lt;code&gt;T&lt;/code&gt;不明确不会轻易判定这个语句的死刑。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;从下一章开始，我们将进入元编程环节。我们将使用大量的示例，一方面帮助巩固大家学到的模板知识，一方面也会引导大家使用函数式思维去解决常见的问题。&lt;/p&gt; &#xA;&lt;h1&gt;4. 深入理解特化与偏特化&lt;/h1&gt; &#xA;&lt;h2&gt;4.1. 正确的理解偏特化&lt;/h2&gt; &#xA;&lt;h3&gt;4.1.1. 偏特化与函数重载的比较&lt;/h3&gt; &#xA;&lt;p&gt;在前面的章节中，我们介绍了偏特化的形式、也介绍了简单的用例。因为偏特化和函数重载存在着形式上的相似性，因此初学者便会借用重载的概念，来理解偏特化的行为。只是，重载和偏特化尽管相似但仍有差异。&lt;/p&gt; &#xA;&lt;p&gt;我们来先看一个函数重载的例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void doWork(int);&#xA;void doWork(float);&#xA;void doWork(int, int);&#xA;&#xA;void f() {&#xA;    doWork(0);&#xA;    doWork(0.5f);&#xA;    doWork(0, 0);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在这个例子中，我们展现了函数重载可以在两种条件下工作：参数数量相同、类型不同；参数数量不同。&lt;/p&gt; &#xA;&lt;p&gt;仿照重载的形式，我们通过特化机制，试图实现一个模板的“重载”：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; struct DoWork;&#x9; // (0) 这是原型&#xA;&#xA;template &amp;lt;&amp;gt; struct DoWork&amp;lt;int&amp;gt; {};       // (1) 这是 int 类型的&#34;重载&#34;&#xA;template &amp;lt;&amp;gt; struct DoWork&amp;lt;float&amp;gt; {};     // (2) 这是 float 类型的&#34;重载&#34;&#xA;template &amp;lt;&amp;gt; struct DoWork&amp;lt;int, int&amp;gt; {};  // (3) 这是 int, int 类型的“重载”&#xA;&#xA;void f(){&#xA;    DoWork&amp;lt;int&amp;gt;      i;&#xA;    DoWork&amp;lt;float&amp;gt;    f;&#xA;    DoWork&amp;lt;int, int&amp;gt; ii;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这个例子在字面上“看起来”并没有什么问题，可惜编译器在编译的时候仍然提示出错了&lt;a href=&#34;http://goo.gl/zI42Zv&#34;&gt;&lt;code&gt;goo.gl/zI42Zv&lt;/code&gt;&lt;/a&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;5 : error: too many template arguments for class template &#39;DoWork&#39;&#xA;template &amp;lt;&amp;gt; struct DoWork&amp;lt;int, int&amp;gt; {}; // 这是 int, int 类型的“重载”&#xA;^ ~~~~&#xA;1 : note: template is declared here&#xA;template &amp;lt;typename T&amp;gt; struct DoWork {}; // 这是原型&#xA;~~~~~~~~~~~~~~~~~~~~~ ^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;从编译出错的失望中冷静一下，在仔细看看函数特化/偏特化和一般模板的不同之处：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; class X      {};&#xA;template &amp;lt;typename T&amp;gt; class X &amp;lt;T*&amp;gt; {};&#xA;//                            ^^^^ 注意这里&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;对，就是这个&lt;code&gt;&amp;lt;T*&amp;gt;&lt;/code&gt;，跟在X后面的“小尾巴”，我们称作实参列表，决定了第二条语句是第一条语句的跟班。所以，第二条语句，即“偏特化”，必须要符合原型X的基本形式：那就是只有一个模板参数。这也是为什么&lt;code&gt;DoWork&lt;/code&gt;尝试以&lt;code&gt;template &amp;lt;&amp;gt; struct DoWork&amp;lt;int, int&amp;gt;&lt;/code&gt;的形式偏特化的时候，编译器会提示模板实参数量过多。&lt;/p&gt; &#xA;&lt;p&gt;另外一方面，在类模板的实例化阶段，它并不会直接去寻找 &lt;code&gt;template &amp;lt;&amp;gt; struct DoWork&amp;lt;int, int&amp;gt;&lt;/code&gt;这个小跟班，而是会先找到基本形式，&lt;code&gt;template &amp;lt;typename T&amp;gt; struct DoWork;&lt;/code&gt;，然后再去寻找相应的特化。&lt;/p&gt; &#xA;&lt;p&gt;我们以&lt;code&gt;DoWork&amp;lt;int&amp;gt; i;&lt;/code&gt;为例，尝试复原一下编译器完成整个模板匹配过程的场景，帮助大家理解。看以下示例代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; struct DoWork;&#x9;      // (0) 这是原型&#xA;&#xA;template &amp;lt;&amp;gt; struct DoWork&amp;lt;int&amp;gt; {};            // (1) 这是 int 类型的特化&#xA;template &amp;lt;&amp;gt; struct DoWork&amp;lt;float&amp;gt; {};          // (2) 这是 float 类型的特化&#xA;template &amp;lt;typename U&amp;gt; struct DoWork&amp;lt;U*&amp;gt; {};   // (3) 这是指针类型的偏特化&#xA;&#xA;DoWork&amp;lt;int&amp;gt;    i;  // (4)&#xA;DoWork&amp;lt;float*&amp;gt; pf; // (5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;首先，编译器分析(0), (1), (2)三句，得知(0)是模板的原型，(1)，(2)，(3)是模板(0)的特化或偏特化。我们假设有两个字典，第一个字典存储了模板原型，我们称之为&lt;code&gt;TemplateDict&lt;/code&gt;。第二个字典&lt;code&gt;TemplateSpecDict&lt;/code&gt;，存储了模板原型所对应的特化/偏特化形式。所以编译器在处理这几句时，可以视作&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// 以下为伪代码&#xA;TemplateDict[DoWork&amp;lt;T&amp;gt;] = {&#xA;    DoWork&amp;lt;int&amp;gt;,&#xA;    DoWork&amp;lt;float&amp;gt;,&#xA;    DoWork&amp;lt;U*&amp;gt;                     &#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后 (4) 试图以&lt;code&gt;int&lt;/code&gt;实例化类模板&lt;code&gt;DoWork&lt;/code&gt;。它会在&lt;code&gt;TemplateDict&lt;/code&gt;中，找到&lt;code&gt;DoWork&lt;/code&gt;，它有一个形式参数&lt;code&gt;T&lt;/code&gt;接受类型，正好和我们实例化的要求相符合。并且此时&lt;code&gt;T&lt;/code&gt;被推导为&lt;code&gt;int&lt;/code&gt;。(5) 中的&lt;code&gt;float*&lt;/code&gt;也是同理。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;{   // 以下为 DoWork&amp;lt;int&amp;gt; 查找对应匹配的伪代码&#xA;    templateProtoInt = TemplateDict.find(DoWork, int);    // 查找模板原型，查找到(0)&#xA;    template = templatePrototype.match(int);              // 以 int 对应 int 匹配到 (1)&#xA;}&#xA;&#xA;{   // 以下为DoWork&amp;lt;float*&amp;gt; 查找对应匹配的伪代码&#xA;    templateProtoIntPtr = TemplateDict.find(DoWork, float*) // 查找模板原型，查找到(0)&#xA;    template = templateProtoIntPtr.match(float*)            // 以 float* 对应 U* 匹配到 (3)，此时U为float&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;那么根据上面的步骤所展现的基本原理，我们随便来几个练习：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T, typename U&amp;gt; struct X            ;    // 0 &#xA;                                                           // 原型有两个类型参数&#xA;                                                           // 所以下面的这些偏特化的实参列表&#xA;                                                           // 也需要两个类型参数对应&#xA;template &amp;lt;typename T&amp;gt;             struct X&amp;lt;T,  T  &amp;gt; {};    // 1&#xA;template &amp;lt;typename T&amp;gt;             struct X&amp;lt;T*, T  &amp;gt; {};    // 2&#xA;template &amp;lt;typename T&amp;gt;             struct X&amp;lt;T,  T* &amp;gt; {};    // 3&#xA;template &amp;lt;typename U&amp;gt;             struct X&amp;lt;U,  int&amp;gt; {};    // 4&#xA;template &amp;lt;typename U&amp;gt;             struct X&amp;lt;U*, int&amp;gt; {};    // 5&#xA;template &amp;lt;typename U, typename T&amp;gt; struct X&amp;lt;U*, T* &amp;gt; {};    // 6&#xA;template &amp;lt;typename U, typename T&amp;gt; struct X&amp;lt;U,  T* &amp;gt; {};    // 7&#xA;&#xA;template &amp;lt;typename T&amp;gt;             struct X&amp;lt;unique_ptr&amp;lt;T&amp;gt;, shared_ptr&amp;lt;T&amp;gt;&amp;gt;; // 8&#xA;&#xA;// 以下特化，分别对应哪个偏特化的实例？&#xA;// 此时偏特化中的T或U分别是什么类型？&#xA;&#xA;X&amp;lt;float*,  int&amp;gt;      v0;                       &#xA;X&amp;lt;double*, int&amp;gt;      v1;                       &#xA;X&amp;lt;double,  double&amp;gt;   v2;                          &#xA;X&amp;lt;float*,  double*&amp;gt;  v3;                           &#xA;X&amp;lt;float*,  float*&amp;gt;   v4;                          &#xA;X&amp;lt;double,  float*&amp;gt;   v5;                          &#xA;X&amp;lt;int,     double*&amp;gt;  v6;                           &#xA;X&amp;lt;int*,    int&amp;gt;      v7;                       &#xA;X&amp;lt;double*, double&amp;gt;   v8;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在上面这段例子中，有几个值得注意之处。首先，偏特化时的模板形参，和原型的模板形参没有任何关系。和原型不同，它的顺序完全不影响模式匹配的顺序，它只是偏特化模式，如&lt;code&gt;&amp;lt;U, int&amp;gt;&lt;/code&gt;中&lt;code&gt;U&lt;/code&gt;的声明，真正的模式，是由&lt;code&gt;&amp;lt;U, int&amp;gt;&lt;/code&gt;体现出来的。&lt;/p&gt; &#xA;&lt;p&gt;这也是为什么在特化的时候，当所有类型都已经确定，我们就可以抛弃全部的模板参数，写出&lt;code&gt;template &amp;lt;&amp;gt; struct X&amp;lt;int, float&amp;gt;&lt;/code&gt;这样的形式：因为所有列表中所有参数都确定了，就不需要额外的形式参数了。&lt;/p&gt; &#xA;&lt;p&gt;其次，作为一个模式匹配，偏特化的实参列表中展现出来的“样子”，就是它能被匹配的原因。比如，&lt;code&gt;struct X&amp;lt;T, T&amp;gt;&lt;/code&gt;中，要求模板的两个参数必须是相同的类型。而&lt;code&gt;struct X&amp;lt;T, T*&amp;gt;&lt;/code&gt;，则代表第二个模板类型参数必须是第一个模板类型参数的指针，比如&lt;code&gt;X&amp;lt;float***, float****&amp;gt;&lt;/code&gt;就能匹配上。当然，除了简单的指针、&lt;code&gt;const&lt;/code&gt;和&lt;code&gt;volatile&lt;/code&gt;修饰符，其他的类模板也可以作为偏特化时的“模式”出现，例如示例8，它要求传入同一个类型的&lt;code&gt;unique_ptr&lt;/code&gt;和&lt;code&gt;shared_ptr&lt;/code&gt;。C++标准中指出下列模式都是可以被匹配的：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;N3337, 14.8.2.5/8&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;令&lt;code&gt;T&lt;/code&gt;是模板类型实参或者类型列表（如 &lt;em&gt;int, float, double&lt;/em&gt; 这样的，&lt;code&gt;TT&lt;/code&gt;是template-template实参（参见6.2节），&lt;code&gt;i&lt;/code&gt;是模板的非类型参数（整数、指针等），则以下形式的形参都会参与匹配：&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;T&lt;/code&gt;, &lt;code&gt;cv-list T&lt;/code&gt;, &lt;code&gt;T*&lt;/code&gt;, &lt;code&gt;template-name &amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;T&amp;amp;&lt;/code&gt;, &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;T [ integer-constant ]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;type (T)&lt;/code&gt;, &lt;code&gt;T()&lt;/code&gt;, &lt;code&gt;T(T)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;T type ::*&lt;/code&gt;, &lt;code&gt;type T::*&lt;/code&gt;, &lt;code&gt;T T::*&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;T (type ::*)()&lt;/code&gt;, &lt;code&gt;type (T::*)()&lt;/code&gt;, &lt;code&gt;type (type ::*)(T)&lt;/code&gt;, &lt;code&gt;type (T::*)(T)&lt;/code&gt;, &lt;code&gt;T (type ::*)(T)&lt;/code&gt;, &lt;code&gt;T (T::*)()&lt;/code&gt;, &lt;code&gt;T (T::*)(T)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;type [i]&lt;/code&gt;, &lt;code&gt;template-name &amp;lt;i&amp;gt;&lt;/code&gt;, &lt;code&gt;TT&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;TT&amp;lt;i&amp;gt;&lt;/code&gt;, &lt;code&gt;TT&amp;lt;&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;对于某些实例化，偏特化的选择并不是唯一的。比如v4的参数是&lt;code&gt;&amp;lt;float*, float*&amp;gt;&lt;/code&gt;，能够匹配的就有三条规则，1，6和7。很显然，6还是比7好一些，因为能多匹配一个指针。但是1和6，就很难说清楚谁更好了。一个说明了两者类型相同；另外一个则说明了两者都是指针。所以在这里，编译器也没办法决定使用那个，只好报出了编译器错误。&lt;/p&gt; &#xA;&lt;p&gt;其他的示例可以先自己推测一下， 再去编译器上尝试一番：&lt;a href=&#34;http://goo.gl/9UVzje&#34;&gt;&lt;code&gt;goo.gl/9UVzje&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;4.1.2. 不定长的模板参数&lt;/h3&gt; &#xA;&lt;p&gt;不过这个时候也许你还不死心。有没有一种办法能够让例子&lt;code&gt;DoWork&lt;/code&gt;像重载一样，支持对长度不一的参数列表分别偏特化/特化呢？&lt;/p&gt; &#xA;&lt;p&gt;答案当然是肯定的。&lt;/p&gt; &#xA;&lt;p&gt;首先，首先我们要让模板实例化时的模板参数统一到相同形式上。逆向思维一下，虽然两个类型参数我们很难缩成一个参数，但是我们可以通过添加额外的参数，把一个扩展成两个呀。比如这样：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;DoWork&amp;lt;int,   void&amp;gt; i;&#xA;DoWork&amp;lt;float, void&amp;gt; f;&#xA;DoWork&amp;lt;int,   int &amp;gt; ii;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这时，我们就能写出统一的模板原型：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T0, typename T1&amp;gt; struct DoWork;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;继而偏特化/特化问题也解决了：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;&amp;gt; struct DoWork&amp;lt;int,   void&amp;gt; {};  // (1) 这是 int 类型的特化&#xA;template &amp;lt;&amp;gt; struct DoWork&amp;lt;float, void&amp;gt; {};  // (2) 这是 float 类型的特化&#xA;template &amp;lt;&amp;gt; struct DoWork&amp;lt;int,    int&amp;gt; {};  // (3) 这是 int, int 类型的特化&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;显而易见这个解决方案并不那么完美。首先，不管是偏特化还是用户实例化模板的时候，都需要多撰写好几个&lt;code&gt;void&lt;/code&gt;，而且最长的那个参数越长，需要写的就越多；其次，如果我们的&lt;code&gt;DoWork&lt;/code&gt;在程序维护的过程中新加入了一个参数列表更长的实例，那么最悲惨的事情就会发生 —— 原型、每一个偏特化、每一个实例化都要追加上&lt;code&gt;void&lt;/code&gt;以凑齐新出现的实例所需要的参数数量。&lt;/p&gt; &#xA;&lt;p&gt;所幸模板参数也有一个和函数参数相同的特性：默认实参（Default Arguments）。只需要一个例子，你们就能看明白了&lt;a href=&#34;http://goo.gl/TtmcY9&#34;&gt;&lt;code&gt;goo.gl/TtmcY9&lt;/code&gt;&lt;/a&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T0, typename T1 = void&amp;gt; struct DoWork;&#xA;&#xA;template &amp;lt;typename T&amp;gt; struct DoWork&amp;lt;T&amp;gt; {};&#xA;template &amp;lt;&amp;gt;           struct DoWork&amp;lt;int&amp;gt; {};&#xA;template &amp;lt;&amp;gt;           struct DoWork&amp;lt;float&amp;gt; {};&#xA;template &amp;lt;&amp;gt;           struct DoWork&amp;lt;int, int&amp;gt; {};&#xA;&#xA;DoWork&amp;lt;int&amp;gt; i;&#xA;DoWork&amp;lt;float&amp;gt; f;&#xA;DoWork&amp;lt;double&amp;gt; d;&#xA;DoWork&amp;lt;int, int&amp;gt; ii;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;所有参数不足，即原型中参数&lt;code&gt;T1&lt;/code&gt;没有指定的地方，都由T1自己的默认参数&lt;code&gt;void&lt;/code&gt;补齐了。&lt;/p&gt; &#xA;&lt;p&gt;但是这个方案仍然有些美中不足之处。&lt;/p&gt; &#xA;&lt;p&gt;比如，尽管我们默认了所有无效的类型都以&lt;code&gt;void&lt;/code&gt;结尾，所以正确的类型列表应该是类似于&lt;code&gt;&amp;lt;int, float, char, void, void&amp;gt;&lt;/code&gt;这样的形态。但你阻止不了你的用户写出类似于&lt;code&gt;&amp;lt;void, int, void, float, char, void, void&amp;gt;&lt;/code&gt;这样不符合约定的类型参数列表。&lt;/p&gt; &#xA;&lt;p&gt;其次，假设这段代码中有一个函数，它的参数使用了和类模板相同的参数列表类型，如下面这段代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T0, typename T1 = void&amp;gt; struct X {&#xA;    static void call(T0 const&amp;amp; p0, T1 const&amp;amp; p1);        // 0&#xA;};&#xA;&#xA;template &amp;lt;typename T0&amp;gt; struct X&amp;lt;T0&amp;gt; {&#xA;    static void call(T0 const&amp;amp; p0);                      // 1&#xA;};&#xA;&#xA;void foo(){&#xA;    X&amp;lt;int&amp;gt;::call(5);                // 调用函数 1&#xA;    X&amp;lt;int, float&amp;gt;::call(5, 0.5f);   // 调用函数 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;那么，每加一个参数就要多写一个偏特化的形式，甚至还要重复编写一些可以共享的实现。&lt;/p&gt; &#xA;&lt;p&gt;不过不管怎么说，以长参数加默认参数的方式支持变长参数是可行的做法，这也是C++98/03时代的唯一选择。&lt;/p&gt; &#xA;&lt;p&gt;例如，&lt;a href=&#34;https://github.com/boostorg/tuple/raw/develop/include/boost/tuple/detail/tuple_basic.hpp&#34;&gt;&lt;code&gt;Boost.Tuple&lt;/code&gt;&lt;/a&gt;就使用了这个方法，支持了变长的Tuple：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// Tuple 的声明，来自 boost&#xA;struct null_type;&#xA;&#xA;template &amp;lt;&#xA;  class T0 = null_type, class T1 = null_type, class T2 = null_type,&#xA;  class T3 = null_type, class T4 = null_type, class T5 = null_type,&#xA;  class T6 = null_type, class T7 = null_type, class T8 = null_type,&#xA;  class T9 = null_type&amp;gt;&#xA;class tuple;&#xA;&#xA;// Tuple的一些用例&#xA;tuple&amp;lt;int&amp;gt; a;&#xA;tuple&amp;lt;double&amp;amp;, const double&amp;amp;, const double, double*, const double*&amp;gt; b;&#xA;tuple&amp;lt;A, int(*)(char, int), B(A::*)(C&amp;amp;), C&amp;gt; c;&#xA;tuple&amp;lt;std::string, std::pair&amp;lt;A, B&amp;gt; &amp;gt; d;&#xA;tuple&amp;lt;A*, tuple&amp;lt;const A*, const B&amp;amp;, C&amp;gt;, bool, void*&amp;gt; e;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;此外，Boost.MPL也使用了这个手法将&lt;code&gt;boost::mpl::vector&lt;/code&gt;映射到&lt;code&gt;boost::mpl::vector _n_&lt;/code&gt;上。但是我们也看到了，这个方案的缺陷很明显：代码臃肿和潜在的正确性问题。此外，过度使用模板偏特化、大量冗余的类型参数也给编译器带来了沉重的负担。&lt;/p&gt; &#xA;&lt;p&gt;为了缓解这些问题，在C++11中，引入了变参模板（Variadic Template）。我们来看看支持了变参模板的C++11是如何实现tuple的：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename... Ts&amp;gt; class tuple;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;是不是一下子简洁了很多！这里的&lt;code&gt;typename... Ts&lt;/code&gt;相当于一个声明，是说&lt;code&gt;Ts&lt;/code&gt;不是一个类型，而是一个不定常的类型列表。同C语言的不定长参数一样，它通常只能放在参数列表的最后。看下面的例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename... Ts, typename U&amp;gt; class X {};              // (1) error!&#xA;template &amp;lt;typename... Ts&amp;gt;             class Y {};              // (2)&#xA;template &amp;lt;typename... Ts, typename U&amp;gt; class Y&amp;lt;U, Ts...&amp;gt; {};    // (3)&#xA;template &amp;lt;typename... Ts, typename U&amp;gt; class Y&amp;lt;Ts..., U&amp;gt; {};    // (4) error!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;为什么第(1)条语句会出错呢？(1)是模板原型，模板实例化时，要以它为基础和实例化时的类型实参相匹配。因为C++的模板是自左向右匹配的，所以不定长参数只能结尾。其他形式，无论写作&lt;code&gt;Ts, U&lt;/code&gt;，或者是&lt;code&gt;Ts, V, Us,&lt;/code&gt;，或者是&lt;code&gt;V, Ts, Us&lt;/code&gt;都是不可取的。(4) 也存在同样的问题。&lt;/p&gt; &#xA;&lt;p&gt;但是，为什么(3)中， 模板参数和(1)相同，都是&lt;code&gt;typename... Ts, typename U&lt;/code&gt;，但是编译器却并没有报错呢？&lt;/p&gt; &#xA;&lt;p&gt;答案在这一节的早些时候。(3)和(1)不同，它并不是模板的原型，它只是&lt;code&gt;Y&lt;/code&gt;的一个偏特化。回顾我们在之前所提到的，偏特化时，模板参数列表并不代表匹配顺序，它们只是为偏特化的模式提供的声明，也就是说，它们的匹配顺序，只是按照&lt;code&gt;&amp;lt;U, Ts...&amp;gt;&lt;/code&gt;来，而之前的参数只是告诉你&lt;code&gt;Ts&lt;/code&gt;是一个类型列表，而&lt;code&gt;U&lt;/code&gt;是一个类型，排名不分先后。&lt;/p&gt; &#xA;&lt;p&gt;在这里，我们只提到了变长模板参数的声明，如何使用我们将在第四章讲述。&lt;/p&gt; &#xA;&lt;h3&gt;4.1.3. 模板的默认实参&lt;/h3&gt; &#xA;&lt;p&gt;在上一节中，我们介绍了模板对默认实参的支持。当时我们的例子很简单，默认模板实参是一个确定的类型&lt;code&gt;void&lt;/code&gt;或者自定义的&lt;code&gt;null_type&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;&#xA;    typename T0, typename T1 = void, typename T2 = void&#xA;&amp;gt; class Tuple;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;实际上，模板的默认参数不仅仅可以是一个确定的类型，它还能是以其他类型为参数的一个类型表达式。 考虑下面的例子：我们要执行两个同类型变量的除法，它对浮点、整数和其他类型分别采取不同的措施。 对于浮点，执行内置除法；对于整数，要处理除零保护，防止引发异常；对于其他类型，执行一个叫做&lt;code&gt;CustomeDiv&lt;/code&gt;的函数。&lt;/p&gt; &#xA;&lt;p&gt;第一步，我们先把浮点正确的写出来：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;include &amp;lt;type_traits&amp;gt;&#xA;&#xA;template &amp;lt;typename T&amp;gt; T CustomDiv(T lhs, T rhs) {&#xA;    // Custom Div的实现&#xA;}&#xA;&#xA;template &amp;lt;typename T, bool IsFloat = std::is_floating_point&amp;lt;T&amp;gt;::value&amp;gt; struct SafeDivide {&#xA;    static T Do(T lhs, T rhs) {&#xA;        return CustomDiv(lhs, rhs);&#xA;    }&#xA;};&#xA;&#xA;template &amp;lt;typename T&amp;gt; struct SafeDivide&amp;lt;T, true&amp;gt;{    // 偏特化A&#xA;    static T Do(T lhs, T rhs){&#xA;        return lhs/rhs;&#xA;    }&#xA;};&#xA;&#xA;template &amp;lt;typename T&amp;gt; struct SafeDivide&amp;lt;T, false&amp;gt;{   // 偏特化B&#xA;    static T Do(T lhs, T rhs){&#xA;        return lhs;&#xA;    }&#xA;};&#xA;&#xA;void foo(){&#xA;    SafeDivide&amp;lt;float&amp;gt;::Do(1.0f, 2.0f);&#x9;// 调用偏特化A&#xA;    SafeDivide&amp;lt;int&amp;gt;::Do(1, 2);          // 调用偏特化B&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在实例化的时候，尽管我们只为&lt;code&gt;SafeDivide&lt;/code&gt;指定了参数&lt;code&gt;T&lt;/code&gt;，但是它的另一个参数&lt;code&gt;IsFloat&lt;/code&gt;在缺省的情况下，可以根据&lt;code&gt;T&lt;/code&gt;，求出表达式&lt;code&gt;std::is_floating_point&amp;lt;T&amp;gt;::value&lt;/code&gt;的值作为实参的值，带入到&lt;code&gt;SafeDivide&lt;/code&gt;的匹配中。&lt;/p&gt; &#xA;&lt;p&gt;嗯，这个时候我们要再把整型和其他类型纳入进来，无外乎就是加这么一个参数&lt;a href=&#34;http://goo.gl/0Lqywt&#34;&gt;&lt;code&gt;goo.gl/0Lqywt&lt;/code&gt;&lt;/a&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;include &amp;lt;complex&amp;gt;&#xA;include &amp;lt;type_traits&amp;gt;&#xA;&#xA;template &amp;lt;typename T&amp;gt; T CustomDiv(T lhs, T rhs) {&#xA;    T v;&#xA;    // Custom Div的实现&#xA;    return v;&#xA;}&#xA;&#xA;template &amp;lt;&#xA;    typename T,&#xA;    bool IsFloat = std::is_floating_point&amp;lt;T&amp;gt;::value,&#xA;    bool IsIntegral = std::is_integral&amp;lt;T&amp;gt;::value&#xA;&amp;gt; struct SafeDivide {&#xA;    static T Do(T lhs, T rhs) {&#xA;        return CustomDiv(lhs, rhs);&#xA;    }&#xA;};&#xA;&#xA;template &amp;lt;typename T&amp;gt; struct SafeDivide&amp;lt;T, true, false&amp;gt;{    // 偏特化A&#xA;    static T Do(T lhs, T rhs){&#xA;        return lhs/rhs;&#xA;    }&#xA;};&#xA;&#xA;template &amp;lt;typename T&amp;gt; struct SafeDivide&amp;lt;T, false, true&amp;gt;{   // 偏特化B&#xA;    static T Do(T lhs, T rhs){&#xA;        return rhs == 0 ? 0 : lhs/rhs;&#xA;    }&#xA;};&#xA;&#xA;void foo(){&#xA;    SafeDivide&amp;lt;float&amp;gt;::Do(1.0f, 2.0f);&#x9;                          // 调用偏特化A&#xA;    SafeDivide&amp;lt;int&amp;gt;::Do(1, 2);                                    // 调用偏特化B&#xA;    SafeDivide&amp;lt;std::complex&amp;lt;float&amp;gt;&amp;gt;::Do({1.f, 2.f}, {1.f, -2.f}); // 调用一般形式&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当然，这时也许你会注意到，&lt;code&gt;is_integral&lt;/code&gt;，&lt;code&gt;is_floating_point&lt;/code&gt;和其他类类型三者是互斥的，那能不能只使用一个条件量来进行分派呢？答案当然是可以的：&lt;a href=&#34;http://goo.gl/jYp5J2&#34;&gt;&lt;code&gt;goo.gl/jYp5J2&lt;/code&gt;&lt;/a&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;include &amp;lt;complex&amp;gt;&#xA;include &amp;lt;type_traits&amp;gt;&#xA;&#xA;template &amp;lt;typename T&amp;gt; T CustomDiv(T lhs, T rhs) {&#xA;    T v;&#xA;    // Custom Div的实现&#xA;    return v;&#xA;}&#xA;&#xA;template &amp;lt;typename T, typename Enabled = std::true_type&amp;gt; struct SafeDivide {&#xA;    static T Do(T lhs, T rhs) {&#xA;        return CustomDiv(lhs, rhs);&#xA;    }&#xA;};&#xA;&#xA;template &amp;lt;typename T&amp;gt; struct SafeDivide&amp;lt;&#xA;    T, typename std::is_floating_point&amp;lt;T&amp;gt;::type&amp;gt;{    // 偏特化A&#xA;    static T Do(T lhs, T rhs){&#xA;        return lhs/rhs;&#xA;    }&#xA;};&#xA;&#xA;template &amp;lt;typename T&amp;gt; struct SafeDivide&amp;lt;&#xA;    T, typename std::is_integral&amp;lt;T&amp;gt;::type&amp;gt;{          // 偏特化B&#xA;    static T Do(T lhs, T rhs){&#xA;        return rhs == 0 ? 0 : lhs/rhs;&#xA;    }&#xA;};&#xA;&#xA;void foo(){&#xA;    SafeDivide&amp;lt;float&amp;gt;::Do(1.0f, 2.0f);&#x9;// 调用偏特化A&#xA;    SafeDivide&amp;lt;int&amp;gt;::Do(1, 2);          // 调用偏特化B&#xA;    SafeDivide&amp;lt;std::complex&amp;lt;float&amp;gt;&amp;gt;::Do({1.f, 2.f}, {1.f, -2.f});&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;我们借助这个例子，帮助大家理解一下这个结构是怎么工作的：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;对&lt;code&gt;SafeDivide&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;通过匹配类模板的泛化形式，计算默认实参，可以知道我们要匹配的模板实参是&lt;code&gt;SafeDivide&amp;lt;int, true_type&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;计算两个偏特化的形式的匹配：A得到&lt;code&gt;&amp;lt;int, false_type&amp;gt;&lt;/code&gt;,和B得到 &lt;code&gt;&amp;lt;int, true_type&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;最后偏特化B的匹配结果和模板实参一致，使用它。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;针对&lt;code&gt;SafeDivide&amp;lt;complex&amp;lt;float&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;通过匹配类模板的泛化形式，可以知道我们要匹配的模板实参是&lt;code&gt;SafeDivide&amp;lt;complex&amp;lt;float&amp;gt;, true_type&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;计算两个偏特化形式的匹配：A和B均得到&lt;code&gt;SafeDivide&amp;lt;complex&amp;lt;float&amp;gt;, false_type&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A和B都与模板实参无法匹配，所以使用原型，调用&lt;code&gt;CustomDiv&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.2. 后悔药：SFINAE&lt;/h2&gt; &#xA;&lt;p&gt;考虑下面这个函数模板：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T, typename U&amp;gt;&#xA;void foo(T t, typename U::type u) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;到本节为止，我们所有的例子都保证了一旦咱们敲定了模板参数中 &lt;code&gt;T&lt;/code&gt; 和 &lt;code&gt;U&lt;/code&gt;，函数参变量 &lt;code&gt;t&lt;/code&gt; 和 &lt;code&gt;u&lt;/code&gt; 的类型都是成立的，比如下面这样：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct X {&#xA;    typedef float type;&#xA;};&#xA;&#xA;template &amp;lt;typename T, typename U&amp;gt;&#xA;void foo(T t, typename U::type u) {&#xA;    // ...&#xA;}&#xA;&#xA;void callFoo() {&#xA;    foo&amp;lt;int, X&amp;gt;(5, 5.0); // T == int, typename U::type == X::type == float&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;那么这里有一个可能都不算是问题的问题 —— 对于下面的代码，你认为它会提示怎么样的错误：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct X {&#xA;    typedef float type;&#xA;};&#xA;&#xA;struct Y {&#xA;    typedef float type2;&#xA;};&#xA;&#xA;template &amp;lt;typename T, typename U&amp;gt;&#xA;void foo(T t, typename U::type u) {&#xA;  // ...&#xA;}&#xA;&#xA;void callFoo() {&#xA;    foo&amp;lt;int, X&amp;gt;(5, 5.0); // T == int, typename U::type == X::type == float&#xA;    foo&amp;lt;int, Y&amp;gt;(5, 5.0); // ???&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这个时候你也许会说：啊，这个简单，&lt;code&gt;Y&lt;/code&gt; 没有 &lt;code&gt;type&lt;/code&gt; 这个成员自然会出错啦！嗯，这个时候咱们来看看Clang给出的结果：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error: no matching function for call to &#39;foo&#39;&#xA;   foo&amp;lt;int, Y&amp;gt;(5, 5.0); // ???&#xA;   ^~~~~~~~~~~&#xA;   note: candidate template ignored: substitution failure [with T = int, U = Y]: no type named &#39;type&#39; in &#39;Y&#39;&#xA;       void foo(T t, typename U::type u) {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;完整翻译过来就是，直接的出错原因是没有匹配的 &lt;code&gt;foo&lt;/code&gt; 函数，间接原因是尝试用 &lt;code&gt;[T = int, U = y]&lt;/code&gt; 做类型替换的时候失败了，所以这个函数模板就被忽略了。等等，不是出错，而是被忽略了？那么也就是说，只要有别的能匹配的类型兜着，编译器就无视这里的失败了？&lt;/p&gt; &#xA;&lt;p&gt;银河火箭队的阿喵说，就是这样。不信邪的朋友可以试试下面的代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct X {&#xA;    typedef float type;&#xA;};&#xA;&#xA;struct Y {&#xA;    typedef float type2;&#xA;};&#xA;&#xA;template &amp;lt;typename T, typename U&amp;gt;&#xA;void foo(T t, typename U::type u) {&#xA;    // ...&#xA;}&#xA;&#xA;template &amp;lt;typename T, typename U&amp;gt;&#xA;void foo(T t, typename U::type2 u) {&#xA;  // ...&#xA;} &#xA;void callFoo() {&#xA;    foo&amp;lt;int, X&amp;gt;(5, 5.0); // T == int, typename U::type == X::type == float&#xA;    foo&amp;lt;int, Y&amp;gt;( 1, 1.0 ); // ???&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这下相信编译器真的是不关心替换失败了吧。我们管这种只要有正确的候选，就无视替换失败的做法为SFINAE。&lt;/p&gt; &#xA;&lt;p&gt;我们不用纠结这个词的发音，它来自于 Substitution failure is not an error 的首字母缩写。这一句之乎者也般难懂的话，由之乎者 —— 啊，不，Substitution，Failure和Error三个词构成。&lt;/p&gt; &#xA;&lt;p&gt;我们从最简单的词“Error”开始理解。Error就是一般意义上的编译错误。一旦出现编译错误，大家都知道，编译器就会中止编译，并且停止接下来的代码生成和链接等后续活动。&lt;/p&gt; &#xA;&lt;p&gt;其次，我们再说“Failure”。很多时候光看字面意思，很多人会把 Failure 和 Error 等同起来。但是实际上Failure很多场合下只是一个中性词。比如我们看下面这个虚构的例子就知道这两者的区别了。&lt;/p&gt; &#xA;&lt;p&gt;假设我们有一个语法分析器，其中某一个规则需要匹配一个token，它可以是标识符，字面量或者是字符串，那么我们会有下面的代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;switch(token)&#xA;{&#xA;case IDENTIFIER:&#xA;    // do something&#xA;    break;&#xA;case LITERAL_NUMBER:&#xA;    // do something&#xA;    break;&#xA;case LITERAL_STRING:&#xA;    // do something&#xA;    break;&#xA;default:&#xA;    throw WrongToken(token);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;假如我们当前的token是 &lt;code&gt;LITERAL_STRING&lt;/code&gt; 的时候，那么第一步它在匹配 &lt;code&gt;IDENTIFIER&lt;/code&gt; 时，我们可以认为它失败（failure）了，但是它在第三步就会匹配上，所以它并不是一个错误。&lt;/p&gt; &#xA;&lt;p&gt;但是如果这个token既不是标识符、也不是数字字面量、也不是字符串字面量，而且我们的语法规定除了这三类值以外其他统统都是非法的时，我们才认为它是一个error。&lt;/p&gt; &#xA;&lt;p&gt;大家所熟知的函数重载也是如此。比如说下面这个例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct A {};&#xA;struct B: public A {};&#xA;struct C {};&#xA;&#xA;void foo(A const&amp;amp;) {}&#xA;void foo(B const&amp;amp;) {}&#xA;&#xA;void callFoo() {&#xA;    foo( A() );&#xA;    foo( B() );&#xA;    foo( C() );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;那么 &lt;code&gt;foo( A() )&lt;/code&gt; 虽然匹配 &lt;code&gt;foo(B const&amp;amp;)&lt;/code&gt; 会失败，但是它起码能匹配 &lt;code&gt;foo(A const&amp;amp;)&lt;/code&gt;，所以它是正确的；&lt;code&gt;foo( B() )&lt;/code&gt; 能同时匹配两个函数原型，但是 &lt;code&gt;foo(B const&amp;amp;)&lt;/code&gt; 要更好一些，因此它选择了这个原型。而 &lt;code&gt;foo( C() );&lt;/code&gt; 因为两个函数都匹配失败（Failure）了，所以它找不到相应的原型，这时才会报出一个编译器错误（Error）。&lt;/p&gt; &#xA;&lt;p&gt;所以到这里我们就明白了，在很多情况下，Failure is not an error。编译器在遇到Failure的时候，往往还需要尝试其他的可能性。&lt;/p&gt; &#xA;&lt;p&gt;好，现在我们把最后一个词，Substitution，加入到我们的字典中。现在这句话的意思就是说，我们要把 Failure is not an error 的概念，推广到Substitution阶段。&lt;/p&gt; &#xA;&lt;p&gt;所谓substitution，就是将函数模板中的形参，替换成实参的过程。概念很简洁但是实现却颇多细节，所以C++标准中对这一概念的解释比较拗口。它分别指出了以下几点：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;什么时候函数模板会发生实参 替代（Substitute） 形参的行为；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;什么样的行为被称作 Substitution；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;什么样的行为不可以被称作 Substitution Failure —— 他们叫SFINAE error。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;我们在此不再详述，有兴趣的同学可以参照&lt;a href=&#34;http://en.cppreference.com/w/cpp/language/sfinae&#34;&gt;&lt;code&gt;这里&lt;/code&gt;&lt;/a&gt;，这是标准的一个精炼版本。这里我们简单的解释一下。&lt;/p&gt; &#xA;&lt;p&gt;考虑我们有这么个函数签名：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;&#xA;    typename T0, &#xA;    // 一大坨其他模板参数&#xA;    typename U = /* 和前面T有关的一大坨 */&#xA;&amp;gt;&#xA;RType /* 和模板参数有关的一大坨 */&#xA;functionName (&#xA;    PType0 /* PType0 是和模板参数有关的一大坨 */,&#xA;    PType1 /* PType1 是和模板参数有关的一大坨 */,&#xA;    // ... 其他参数&#xA;) {&#xA;    // 实现，和模板参数有关的一大坨&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;那么，在这个函数模板被实例化的时候，所有函数签名上的“和模板参数有关的一大坨”被推导出具体类型的过程，就是替换。一个更具体的例子来解释上面的“一大坨”：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;&#xA;    typename T, &#xA;    typename U = typename vector&amp;lt;T&amp;gt;::iterator // 1&#xA;&amp;gt;&#xA;typename vector&amp;lt;T&amp;gt;::value_type  // 1&#xA;foo(&#xA;    T*, // 1&#xA;    T&amp;amp;, // 1&#xA;    typename T::internal_type, // 1&#xA;    typename add_reference&amp;lt;T&amp;gt;::type, // 1&#xA;    int // 这里都不需要 substitution&#xA;)&#xA;{&#xA;  // 根据定义，substitution只发生在函数签名上。&#xA;  // 故而整个函数实现部分都不会存在 substitution。&#xA;  // 这是一个重点需要记住。&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;所有标记为 &lt;code&gt;1&lt;/code&gt; 的部分，都是需要替换的部分，而它们在替换过程中的失败（failure），就称之为替换失败（substitution failure）。&lt;/p&gt; &#xA;&lt;p&gt;下面的代码是提供了一些替换成功和替换失败的示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct X {&#xA;    typedef int type;&#xA;};&#xA;&#xA;struct Y {&#xA;    typedef int type2;&#xA;};&#xA;&#xA;template &amp;lt;typename T&amp;gt; void foo(typename T::type);    // Foo0&#xA;template &amp;lt;typename T&amp;gt; void foo(typename T::type2);   // Foo1&#xA;template &amp;lt;typename T&amp;gt; void foo(T);                   // Foo2&#xA;&#xA;void callFoo() {&#xA;    foo&amp;lt;X&amp;gt;(5);    // Foo0: Succeed, Foo1: Failed,  Foo2: Failed&#xA;    foo&amp;lt;Y&amp;gt;(10);   // Foo0: Failed,  Foo1: Succeed, Foo2: Failed&#xA;    foo&amp;lt;int&amp;gt;(15); // Foo0: Failed,  Foo1: Failed,  Foo2: Succeed&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在这个例子中，当我们指定 &lt;code&gt;foo&amp;lt;Y&amp;gt;&lt;/code&gt; 的时候，substitution就开始工作了，而且会同时工作在三个不同的 &lt;code&gt;foo&lt;/code&gt; 签名上。如果我们仅仅因为 &lt;code&gt;Y&lt;/code&gt; 没有 &lt;code&gt;type&lt;/code&gt;，匹配 &lt;code&gt;Foo0&lt;/code&gt; 失败了，就宣布代码有错，中止编译，那显然是武断的。因为 &lt;code&gt;Foo1&lt;/code&gt; 是可以被正确替换的，我们也希望 &lt;code&gt;Foo1&lt;/code&gt; 成为 &lt;code&gt;foo&amp;lt;Y&amp;gt;&lt;/code&gt; 的原型。&lt;/p&gt; &#xA;&lt;p&gt;std/boost库中的 &lt;code&gt;enable_if&lt;/code&gt; 是 SFINAE 最直接也是最主要的应用。所以我们通过下面 &lt;code&gt;enable_if&lt;/code&gt; 的例子，来深入理解一下 SFINAE 在模板编程中的作用。&lt;/p&gt; &#xA;&lt;p&gt;假设我们有两个不同类型的计数器（counter），一种是普通的整数类型，另外一种是一个复杂对象，它从接口 &lt;code&gt;ICounter&lt;/code&gt; 继承，这个接口有一个成员叫做increase实现计数功能。现在，我们想把这两种类型的counter封装一个统一的调用：inc_counter。那么，我们直觉会简单粗暴的写出下面的代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct ICounter {&#xA;    virtual void increase() = 0;&#xA;    virtual ~ICounter() {}&#xA;};&#xA;&#xA;struct Counter: public ICounter {&#xA;    void increase() override {&#xA;        // Implements&#xA;    }&#xA;};&#xA;&#xA;template &amp;lt;typename T&amp;gt;&#xA;void inc_counter(T&amp;amp; counterObj) {&#xA;    counterObj.increase();&#xA;}&#xA;&#xA;template &amp;lt;typename T&amp;gt;&#xA;void inc_counter(T&amp;amp; intTypeCounter){&#xA;    ++intTypeCounter;&#xA;}&#xA;&#xA;void doSomething() {&#xA;    Counter cntObj;&#xA;    uint32_t cntUI32;&#xA;&#xA;    // blah blah blah&#xA;    inc_counter(cntObj);&#xA;    inc_counter(cntUI32);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;我们非常希望它展现出预期的行为。因为其实我们是知道对于任何一个调用，两个 &lt;code&gt;inc_counter&lt;/code&gt; 只有一个是能够编译正确的。“有且唯一”，我们理应当期望编译器能够挑出那个唯一来。&lt;/p&gt; &#xA;&lt;p&gt;可惜编译器做不到这一点。首先，它就告诉我们，这两个签名&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; void inc_counter(T&amp;amp; counterObj);&#xA;template &amp;lt;typename T&amp;gt; void inc_counter(T&amp;amp; intTypeCounter);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其实是一模一样的。我们遇到了 &lt;code&gt;redefinition&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;我们看看 &lt;code&gt;enable_if&lt;/code&gt; 是怎么解决这个问题的。我们通过 &lt;code&gt;enable_if&lt;/code&gt; 这个 &lt;code&gt;T&lt;/code&gt; 对于不同的实例做个限定：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; void inc_counter(&#xA;    T&amp;amp; counterObj, &#xA;    typename std::enable_if&amp;lt;&#xA;        std::is_base_of&amp;lt;ICounter, T&amp;gt;::value&#xA;    &amp;gt;::type* = nullptr );&#xA;&#xA;template &amp;lt;typename T&amp;gt; void inc_counter(&#xA;    T&amp;amp; counterInt,&#xA;    typename std::enable_if&amp;lt;&#xA;        std::is_integral&amp;lt;T&amp;gt;::value&#xA;    &amp;gt;::type* = nullptr );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后我们解释一下，这个 &lt;code&gt;enable_if&lt;/code&gt; 是怎么工作的，语法为什么这么丑：&lt;/p&gt; &#xA;&lt;p&gt;首先，替换（substitution）只有在推断函数类型的时候，才会起作用。推断函数类型需要参数的类型，所以， &lt;code&gt;typename std::enable_if&amp;lt;std::is_integral&amp;lt;T&amp;gt;::value&amp;gt;::type&lt;/code&gt; 这么一长串代码，就是为了让 &lt;code&gt;enable_if&lt;/code&gt; 参与到函数类型中；&lt;/p&gt; &#xA;&lt;p&gt;其次， &lt;code&gt;is_integral&amp;lt;T&amp;gt;::value&lt;/code&gt; 返回一个布尔类型的编译器常数，告诉我们它是或者不是一个 &lt;code&gt;integral type&lt;/code&gt;，&lt;code&gt;enable_if&amp;lt;C&amp;gt;&lt;/code&gt; 的作用就是，如果这个 &lt;code&gt;C&lt;/code&gt; 值为 &lt;code&gt;True&lt;/code&gt;，那么 &lt;code&gt;enable_if&amp;lt;C&amp;gt;::type&lt;/code&gt; 就会被推断成一个 &lt;code&gt;void&lt;/code&gt; 或者是别的什么类型，让整个函数匹配后的类型变成 &lt;code&gt;void inc_counter&amp;lt;int&amp;gt;(int &amp;amp; counterInt, void* dummy = nullptr);&lt;/code&gt; 如果这个值为 &lt;code&gt;False&lt;/code&gt; ，那么 &lt;code&gt;enable_if&amp;lt;false&amp;gt;&lt;/code&gt; 这个特化形式中，压根就没有这个 &lt;code&gt;::type&lt;/code&gt;，于是替换就失败了。和我们之前的例子中一样，这个函数原型就不会被产生出来。&lt;/p&gt; &#xA;&lt;p&gt;所以我们能保证，无论对于 &lt;code&gt;int&lt;/code&gt; 还是 &lt;code&gt;counter&lt;/code&gt; 类型的实例，我们都只有一个函数原型通过了substitution —— 这样就保证了它的“有且唯一”，编译器也不会因为你某个替换失败而无视成功的那个实例。&lt;/p&gt; &#xA;&lt;p&gt;这个例子说到了这里，熟悉C++的你，一定会站出来说我们只要把第一个签名改成：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void inc_counter(ICounter&amp;amp; counterObj);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;就能完美解决这个问题了，根本不需要这么复杂的编译器机制。&lt;/p&gt; &#xA;&lt;p&gt;嗯，你说的没错，在这里这个特性一点都没用。&lt;/p&gt; &#xA;&lt;p&gt;这也提醒我们，当你觉得需要写 &lt;code&gt;enable_if&lt;/code&gt; 的时候，首先要考虑到以下可能的替代方案：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;重载（适用于函数模板）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;偏特化（适用于类模板）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;虚函数&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;但是问题到了这里并没有结束。因为 &lt;code&gt;increase&lt;/code&gt; 毕竟是个虚函数。假如 &lt;code&gt;Counter&lt;/code&gt; 需要调用的地方实在是太多了，这个时候我们会非常期望 &lt;code&gt;increase&lt;/code&gt; 不再是个虚函数以提高性能。此时我们会调整继承层级：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct ICounter {};&#xA;struct Counter: public ICounter {&#xA;    void increase() {&#xA;        // impl&#xA;    }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;那么原有的 &lt;code&gt;void inc_counter(ICounter&amp;amp; counterObj)&lt;/code&gt; 就无法再执行下去了。这个时候你可能会考虑一些变通的办法：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt;&#xA;void inc_counter(ICounter&amp;amp; c) {};&#xA;&#xA;template &amp;lt;typename T&amp;gt;&#xA;void inc_counter(T&amp;amp; c) { ++c; };&#xA;&#xA;void doSomething() {&#xA;    Counter cntObj;&#xA;    uint32_t cntUI32;&#xA;&#xA;    // blah blah blah&#xA;    inc_counter(cntObj); // 1&#xA;    inc_counter(static_cast&amp;lt;ICounter&amp;amp;&amp;gt;(cntObj)); // 2&#xA;    inc_counter(cntUI32); // 3&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;对于调用 &lt;code&gt;1&lt;/code&gt;，因为 &lt;code&gt;cntObj&lt;/code&gt; 到 &lt;code&gt;ICounter&lt;/code&gt; 是需要类型转换的，所以比 &lt;code&gt;void inc_counter(T&amp;amp;) [T = Counter]&lt;/code&gt; 要更差一些。然后它会直接实例化后者，结果实现变成了 &lt;code&gt;++cntObj&lt;/code&gt;，BOOM！&lt;/p&gt; &#xA;&lt;p&gt;那么我们做 &lt;code&gt;2&lt;/code&gt; 试试看？嗯，工作的很好。但是等等，我们的初衷是什么来着？不就是让 &lt;code&gt;inc_counter&lt;/code&gt; 对不同的计数器类型透明吗？这不是又一夜回到解放前了？&lt;/p&gt; &#xA;&lt;p&gt;所以这个时候，就能看到 &lt;code&gt;enable_if&lt;/code&gt; 是如何通过 SFINAE 发挥威力的了：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;include &amp;lt;type_traits&amp;gt;&#xA;include &amp;lt;utility&amp;gt;&#xA;include &amp;lt;cstdint&amp;gt;&#xA;&#xA;struct ICounter {};&#xA;struct Counter: public ICounter {&#xA;    void increase() {&#xA;        // impl&#xA;    }&#xA;};&#xA;&#xA;template &amp;lt;typename T&amp;gt; void inc_counter(&#xA;    T&amp;amp; counterObj, &#xA;    typename std::enable_if&amp;lt;&#xA;        std::is_base_of&amp;lt;ICounter, T&amp;gt;::value&#xA;    &amp;gt;::type* = nullptr ){&#xA;    counterObj.increase();  &#xA;}&#xA;&#xA;template &amp;lt;typename T&amp;gt; void inc_counter(&#xA;    T&amp;amp; counterInt,&#xA;    typename std::enable_if&amp;lt;&#xA;        std::is_integral&amp;lt;T&amp;gt;::value&#xA;    &amp;gt;::type* = nullptr ){&#xA;    ++counterInt;&#xA;}&#xA;  &#xA;void doSomething() {&#xA;    Counter cntObj;&#xA;    uint32_t cntUI32;&#xA;&#xA;    // blah blah blah&#xA;    inc_counter(cntObj); // OK!&#xA;    inc_counter(cntUI32); // OK!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这个代码是不是看起来有点脏脏的。眼尖的你定睛一瞧，咦， &lt;code&gt;ICounter&lt;/code&gt; 不是已经空了吗，为什么我们还要用它作为基类呢？&lt;/p&gt; &#xA;&lt;p&gt;这是个好问题。在本例中，我们用它来区分一个&lt;code&gt;counter&lt;/code&gt;是不是继承自&lt;code&gt;ICounter&lt;/code&gt;。最终目的，是希望知道 &lt;code&gt;counter&lt;/code&gt; 有没有 &lt;code&gt;increase&lt;/code&gt; 这个函数。&lt;/p&gt; &#xA;&lt;p&gt;所以 &lt;code&gt;ICounter&lt;/code&gt; 只是相当于一个标签。而于情于理这个标签都是个累赘。但是在C++11之前，我们并没有办法去写类似于：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; void foo(T&amp;amp; c, decltype(c.increase())* = nullptr);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这样的函数签名，因为假如 &lt;code&gt;T&lt;/code&gt; 是 &lt;code&gt;int&lt;/code&gt;，那么 &lt;code&gt;c.increase()&lt;/code&gt; 这个函数调用就不存在。但它又不属于Type Failure，而是一个Expression Failure，在C++11之前它会直接导致编译器出错，这并不是我们所期望的。所以我们才退而求其次，用一个类似于标签的形式来提供我们所需要的类型信息。以后的章节，后面我们会说到，这种和类型有关的信息我们可以称之为 &lt;code&gt;type traits&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;到了C++11，它正式提供了 Expression SFINAE，这时我们就能抛开 &lt;code&gt;ICounter&lt;/code&gt; 这个无用的Tag，直接写出我们要写的东西：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct Counter {&#xA;    void increase() {&#xA;        // Implements&#xA;    }&#xA;};&#xA;&#xA;template &amp;lt;typename T&amp;gt;&#xA;void inc_counter(T&amp;amp; intTypeCounter, std::decay_t&amp;lt;decltype(++intTypeCounter)&amp;gt;* = nullptr) {&#xA;    ++intTypeCounter;&#xA;}&#xA;&#xA;template &amp;lt;typename T&amp;gt;&#xA;void inc_counter(T&amp;amp; counterObj, std::decay_t&amp;lt;decltype(counterObj.increase())&amp;gt;* = nullptr) {&#xA;    counterObj.increase();&#xA;}&#xA;&#xA;void doSomething() {&#xA;    Counter cntObj;&#xA;    uint32_t cntUI32;&#xA;&#xA;    // blah blah blah&#xA;    inc_counter(cntObj);&#xA;    inc_counter(cntUI32);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;此外，还有一种情况只能使用 SFINAE，而无法使用包括继承、重载在内的任何方法，这就是Universal Reference。比如，&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// 这里的a是个通用引用，可以准确的处理左右值引用的问题。&#xA;template &amp;lt;typename ArgT&amp;gt; void foo(ArgT&amp;amp;&amp;amp; a);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;假如我们要限定ArgT只能是 float 的衍生类型，那么写成下面这个样子是不对的，它实际上只能接受 float 的右值引用。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void foo(float&amp;amp;&amp;amp; a);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;此时的唯一选择，就是使用Universal Reference，并增加 &lt;code&gt;enable_if&lt;/code&gt; 限定类型，如下面这样：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename ArgT&amp;gt;&#xA;void foo(&#xA;    ArgT&amp;amp;&amp;amp; a, &#xA;    typename std::enabled_if&amp;lt;&#xA;        std::is_same&amp;lt;std::decay_t&amp;lt;ArgT&amp;gt;, float&amp;gt;::value&#xA;    &amp;gt;::type* = nullptr&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;从上面这些例子可以看到，SFINAE最主要的作用，是保证编译器在泛型函数、偏特化、及一般重载函数中遴选函数原型的候选列表时不被打断。除此之外，它还有一个很重要的元编程作用就是实现部分的编译期自省和反射。&lt;/p&gt; &#xA;&lt;p&gt;虽然它写起来并不直观，但是对于既没有编译器自省、也没有Concept的C++11来说，已经是最好的选择了。&lt;/p&gt; &#xA;&lt;h2&gt;4.3. Concept “概念”：对模板参数约束的直接描述&lt;/h2&gt; &#xA;&lt;h3&gt;4.3.1. “概念” 解决了什么问题&lt;/h3&gt; &#xA;&lt;p&gt;从上一节可以看出，我们兜兜转转了那么久，就是为了解决两个问题：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;在模板进行特化的时候，盘算一下并告诉编译器这里能不能特化；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在函数决议面临多个候选的时候，如果有且仅有其中一个原型能够被函数决议接纳，那就决定是你了！&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;如果语言能允许用户直接描述需求并传达给编译器，不就不用这么麻烦了么。其实在很多现代语言中，都有类似的语言要素存在，比如C的约束（constraint on type parameters)：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;public class Employee {&#xA;  // ...&#xA;}&#xA;&#xA;public class GenericList&amp;lt;T&amp;gt; where T : Employee {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;上例就非常清晰的呈现了我们对&lt;code&gt;GenericList&lt;/code&gt;中&lt;code&gt;T&lt;/code&gt;的要求是：它得是一个&lt;code&gt;Employee&lt;/code&gt;或&lt;code&gt;Employee&lt;/code&gt;的子类。&lt;/p&gt; &#xA;&lt;p&gt;这种“清晰的”类型约束，在C++中称作概念（Concept）。最早有迹可循的概念相关工作应当从2003年后就开始了。2006年Bjarne在POPL 06上的一篇报告“Specifying C++ concepts”算是“近代”Concept工作的首次公开亮相。委员会为Concept筹划数年，在2008年提出了第一版Concepts提案，试图进入C++0x的标准中。这也是Concept第一次在C++社群当中被广泛“炒作”。不过2009年的会议，让“近代”Concept在N2617草案戛然而止。&lt;/p&gt; &#xA;&lt;p&gt;2013年之后，Concept改头换面为Concept Lite提案（N3701)卷土重来，历经多方博弈和多轮演化，最终形成了我们在C++20里看到的Concept。有关于Concept的方法论和比较，B.S. 在白皮书中有过比较详细的交代。&lt;/p&gt; &#xA;&lt;p&gt;总之，在concept进入标准之后，模板特化的类型约束写起来就方便与直接多了。而且这些约束之间还可以像表达式一样复用和组合。虽然因为C++类型系统自身的琐碎导致基础库中的concept仍然相当的冗长，但是比起之前起码具备了可用性。&lt;/p&gt; &#xA;&lt;p&gt;比如我们拿上一节中最后一个例子作为对比：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// SFINAE&#xA;template &amp;lt;typename ArgT&amp;gt;&#xA;void foo(&#xA;    ArgT&amp;amp;&amp;amp; a, &#xA;    typename std::enabled_if&amp;lt;&#xA;        std::is_same&amp;lt;std::decay_t&amp;lt;ArgT&amp;gt;, float&amp;gt;::value&#xA;    &amp;gt;::type* = nullptr&#xA;);&#xA;// Concept&#xA;template &amp;lt;typename ArgT&amp;gt;&#xA;  requires std::same_as&amp;lt;std::remove_cvref&amp;lt;T&amp;gt;, float&amp;gt; &#xA;void foo(ArgT&amp;amp;&amp;amp; a)  {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可以看到，concept之后的表达式消除了语法噪音，显得更为简洁一些。而对于之前++的例子，concept下则更为扼要：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; concept Incrementable = requires (T t) { ++t; }&#xA;template &amp;lt;Incrementable T&amp;gt;&#xA;void inc_counter(T&amp;amp; intTypeCounter) { &#xA;    ++intTypeCounter;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;直接告诉编译器，我们对T的要求是你得有&lt;code&gt;++&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;当然有人会问，那能不能直接写成以下形式，不是更简单吗？&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; requires (T t) { ++t; }&#xA;void inc_counter(T&amp;amp; cnt);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;答案是：不能。 因为&lt;code&gt;requires&lt;/code&gt;作为关键字/保留字是存在二义性的。当它用于函数模板或者类模板的声明时，它是一个constraint，后面需要跟着concept表达式；而用于concept中，则是一个required expression，用于concept的求解。既然constraint后面跟着一个concept表达式，而requires也可以用来定义一个concept expression，那么一个风骚的想法形成了：我能不能用 &lt;code&gt;requires (requires (T t) {++t;})&lt;/code&gt; 来约束模板参数呢？&lt;/p&gt; &#xA;&lt;p&gt;当然是可以的！C++就是这么的简（&lt;del&gt;有&lt;/del&gt;）单（&lt;del&gt;病&lt;/del&gt;）！&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;template &amp;lt;typename T&amp;gt; requires (requires (T t) { ++t; })&#xA;void inc_counter(T&amp;amp; cnt);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;总而言之，除了这些烦人的问题，“概念”的出现，使得模板的出错提示也清爽了些许 —— 虽然大佬们都在鼓吹concept让模板出错多么好调试，但是实际上模板出错，有一半是来源自类型系统本质上的复杂性，概念并不能解决这一问题。&lt;/p&gt; &#xA;&lt;p&gt;比如这里使用SFINAE的提示：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;source&amp;gt;:23:5: error: no matching function for call to &#39;Inc&#39;&#xA;    Inc(y);&#xA;    ^~~&#xA;&amp;lt;source&amp;gt;:5:6: note: candidate template ignored: substitution failure [with T = X]: cannot increment value of type &#39;X&#39;&#xA;void Inc(T&amp;amp; v, std::decay_t&amp;lt;decltype(++v)&amp;gt;* = nullptr)&#xA;     ^                               ~~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;而这里是使用了concept的提示。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;source&amp;gt;:25:5: error: no matching function for call to &#39;Inc_Concept&#39;&#xA;    Inc_Concept(y);&#xA;    ^~~~~~~~~~~&#xA;&amp;lt;source&amp;gt;:13:6: note: candidate template ignored: constraints not satisfied [with T = X]&#xA;void Inc_Concept(T&amp;amp; v)&#xA;     ^&#xA;&amp;lt;source&amp;gt;:12:11: note: because &#39;X&#39; does not satisfy &#39;Incrementable&#39;&#xA;template &amp;lt;Incrementable T&amp;gt;&#xA;          ^&#xA;&amp;lt;source&amp;gt;:10:41: note: because &#39;++t&#39; would be invalid: cannot increment value of type &#39;X&#39;&#xA;concept Incrementable = requires(T t) { ++t; };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;虽然在这个例子中，通过 &lt;em&gt;Concept&lt;/em&gt; 获得出错提示看起来要比使用 &lt;em&gt;SFINAE&lt;/em&gt; 所获得的错误描述要更长一点，但是对于更加复杂类型来说，则会友善许多。以后会找个例子给大家陈述。&lt;/p&gt; &#xA;&lt;h3&gt;4.3.2. &#34;概念&#34;入门&lt;/h3&gt; &#xA;&lt;h1&gt;5. 未完成章节&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 6. 元编程下的数据结构与算法&#xA;## 6.1. 表达式与数值计算&#xA;## 6.2. 获得类型的属性——类型萃取（Type Traits） &#xA;## 6.3. 列表与数组&#xA;## 6.4. 字典结构&#xA;## 6.5. “快速”排序&#xA;## 6.6. 其它常用的“轮子”&#xA;&#xA;# 7. 非模板的编译期计算&#xA;&#xA;# 8. 模板的进阶技巧&#xA;## 8.1. 嵌入类&#xA;## 8.2. Template-Template Class&#xA;## 8.3. 高阶函数&#xA;## 8.4. 闭包：模板的“基于对象”&#xA;stl allocator?&#xA;mpl::apply&#xA;## 8.5. 占位符(placeholder)：在C++中实现方言的基石&#xA;## 8.6. 编译期“多态”&#xA;&#xA;#   9. 模板的威力：从foreach, transform到Linq&#xA;## 9.1. Foreach与Transform&#xA;## 9.2. Boost中的模板&#xA;Any Spirit Hana TypeErasure&#xA;## 9.3. Reactor、Linq与C++中的实践&#xA;## 9.4. 更高更快更强：从Linq到FP&#xA;&#xA;#   10. 结语：讨论有益，争端无用&#xA;## 10.1. 更好的编译器，更友善的出错信息&#xA;## 10.2. 模板的症结：易于实现，难于完美&#xA;## 10.3. 一些期望&#xA;alexandrescu 关于 min max 的讨论：《再谈Min和Max》&#xA;std::experimental::any / boost.any 对于 reference 的处理&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>