<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-02T01:32:50Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Kryptuq/Yuzu-Early-Access-files</title>
    <updated>2022-08-02T01:32:50Z</updated>
    <id>tag:github.com,2022-08-02:/Kryptuq/Yuzu-Early-Access-files</id>
    <link href="https://github.com/Kryptuq/Yuzu-Early-Access-files" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yuzu EA&#39;s here&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;yuzu (Nintendo Switch Emulator)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Kryptuq/Yuzu-Early-Access-files/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;yuzu is an experimental open-source emulator for the Nintendo Switch from the creators of &lt;a href=&#34;https://citra-emu.org/&#34;&gt;Citra&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is written in C++ with portability in mind, with builds actively maintained for Windows and Linux. The emulator is capable of running several commercial games.&lt;/p&gt; &#xA;&lt;p&gt;yuzu only emulates a subset of Switch hardware and therefore most commercial games &lt;strong&gt;do not&lt;/strong&gt; run at full speed or are not fully functional.&lt;/p&gt; &#xA;&lt;p&gt;Do you want to check which games are compatible and which ones are not? Please visit our &lt;a href=&#34;https://yuzu-emu.org/game/&#34;&gt;Compatibility page&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;yuzu is licensed under the GPLv2 (or any later version). Refer to the license.txt file included.&lt;/p&gt; &#xA;&lt;h3&gt;Downloader and Updater&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Download Link&lt;/strong&gt;: &lt;a href=&#34;https://mostlywhat.github.io/128Bit-Yuzu-Installer/&#34;&gt;128Bit Downloader&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Credits&lt;/strong&gt;: Kryptuq for Source Codes and MostlyWhat for Build Script&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Current Latest Early Access&lt;/strong&gt;: yuzu Early Access 2882&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>simplefoc/Arduino-FOC</title>
    <updated>2022-08-02T01:32:50Z</updated>
    <id>tag:github.com,2022-08-02:/simplefoc/Arduino-FOC</id>
    <link href="https://github.com/simplefoc/Arduino-FOC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Arduino FOC for BLDC and Stepper motors - Arduino Based Field Oriented Control Algorithm Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SimpleFOClibrary - &lt;strong&gt;Simple&lt;/strong&gt; Field Oriented Control (FOC) &lt;strong&gt;library&lt;/strong&gt; &lt;br&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;A Cross-Platform FOC implementation for BLDC and Stepper motors&lt;br&gt; based on the Arduino IDE and PlatformIO&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/simplefoc/Arduino-FOC/workflows/Library%20Compile/badge.svg?sanitize=true&#34; alt=&#34;Library Compile&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.ardu-badge.com/badge/Simple%20FOC.svg&#34;&gt;&lt;img src=&#34;https://www.ardu-badge.com/badge/Simple%20FOC.svg?&#34; alt=&#34;arduino-library-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://joss.theoj.org/papers/4382445f249e064e9f0a7f6c1bb06b1d&#34;&gt;&lt;img src=&#34;https://joss.theoj.org/papers/4382445f249e064e9f0a7f6c1bb06b1d/status.svg?sanitize=true&#34; alt=&#34;status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We live in very exciting times 😃! BLDC motors are entering the hobby community more and more and many great projects have already emerged leveraging their far superior dynamics and power capabilities. BLDC motors have numerous advantages over regular DC motors but they have one big disadvantage, the complexity of control. Even though it has become relatively easy to design and manufacture PCBs and create our own hardware solutions for driving BLDC motors the proper low-cost solutions are yet to come. One of the reasons for this is the apparent complexity of writing the BLDC driving algorithms, Field oriented control (FOC) being an example of one of the most efficient ones. The solutions that can be found on-line are almost exclusively very specific for certain hardware configuration and the microcontroller architecture used. Additionally, most of the efforts at this moment are still channeled towards the high-power applications of the BLDC motors and proper low-cost and low-power FOC supporting boards are very hard to find today and even may not exist. &lt;br&gt; Therefore this is an attempt to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎯 Demystify FOC algorithm and make a robust but simple Arduino library: &lt;a href=&#34;https://docs.simplefoc.com/arduino_simplefoc_library_showcase&#34;&gt;Arduino &lt;em&gt;SimpleFOClibrary&lt;/em&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;i&gt;Support as many &lt;b&gt;motor + sensor + driver + mcu&lt;/b&gt; combinations out there&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;🎯 Develop a modular FOC supporting BLDC driver boards: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;NEW&lt;/strong&gt;&lt;/em&gt; 📢: &lt;em&gt;Minimalistic&lt;/em&gt; BLDC driver (&amp;lt;3Amps) : &lt;a href=&#34;https://github.com/simplefoc/SimpleFOCMini&#34;&gt;&lt;span class=&#34;simple&#34;&gt;Simple&lt;b&gt;FOC&lt;/b&gt;Mini&lt;/span&gt; &lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Low-power&lt;/em&gt; gimbal driver (&amp;lt;5Amps) : &lt;a href=&#34;https://docs.simplefoc.com/arduino_simplefoc_shield_showcase&#34;&gt;&lt;em&gt;Arduino Simple&lt;strong&gt;FOC&lt;/strong&gt;Shield&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Medium-power&lt;/em&gt; BLDC driver (&amp;lt;30Amps): &lt;a href=&#34;https://github.com/simplefoc/Arduino-SimpleFOC-PowerShield&#34;&gt;Arduino &lt;span class=&#34;simple&#34;&gt;Simple&lt;b&gt;FOC&lt;/b&gt;PowerShield&lt;/span&gt; &lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;See also &lt;a href=&#34;https://github.com/byDagor&#34;&gt;@byDagor&lt;/a&gt;&#39;s &lt;em&gt;fully-integrated&lt;/em&gt; ESP32 based board: &lt;a href=&#34;https://github.com/byDagor/Dagor-Brushless-Controller&#34;&gt;Dagor Brushless Controller&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NEWS 📢: SimpleFOClibrary has been published in the Journal of Open Source Software&lt;/h3&gt; &#xA;&lt;p&gt; &lt;b&gt;SimpleFOC&lt;/b&gt;: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors.&lt;br&gt; A. Skuric, HS. Bank, R. Unger, O. Williams, D. González-Reyes&lt;br&gt; Journal of Open Source Software, 7(74), 4232, https://doi.org/10.21105/joss.04232 &lt;/p&gt; &#xA;&lt;blockquote class=&#34;info&#34;&gt; &#xA; &lt;p class=&#34;heading&#34;&gt;NEW RELEASE 📢: &lt;span class=&#34;simple&#34;&gt;Simple&lt;span class=&#34;foc&#34;&gt;FOC&lt;/span&gt;library&lt;/span&gt; v2.2.2 &lt;a href=&#34;https://github.com/simplefoc/Arduino-FOC/releases/tag/v2.2.2&#34;&gt;see release&lt;/a&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;GenericCurrentSense bugfix and testing&lt;/li&gt; &#xA;  &lt;li&gt;bugfix leonardo #170&lt;/li&gt; &#xA;  &lt;li&gt;bugfix - no index search after specifying natural direction&lt;/li&gt; &#xA;  &lt;li&gt;Low level API restructuring &#xA;   &lt;ul dir=&#34;auto&#34;&gt; &#xA;    &lt;li&gt;Driver API&lt;/li&gt; &#xA;    &lt;li&gt;Current sense API&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;New debugging interface - &lt;a href=&#34;https://docs.simplefoc.com/debugging&#34;&gt;see in docs&lt;/a&gt; &#xA;   &lt;ul dir=&#34;auto&#34;&gt; &#xA;    &lt;li&gt;Static class SimpleFOCDebug&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;CurrentSense API change - added method &lt;code class=&#34;highlighter-rouge&#34;&gt;linkDriver()&lt;/code&gt; - &lt;a href=&#34;https://docs.simplefoc.com/current_sense&#34;&gt;see in docs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Low-side current sensing - &lt;a href=&#34;https://docs.simplefoc.com/low_side_current_sense&#34;&gt;see in docs&lt;/a&gt; &#xA;   &lt;ul dir=&#34;auto&#34;&gt; &#xA;    &lt;li&gt;ESP32 generic support for multiple motors&lt;/li&gt; &#xA;    &lt;li&gt;Added low-side current sensing support for stm32 - only one motor &#xA;     &lt;ul dir=&#34;auto&#34;&gt; &#xA;      &lt;li&gt;f1 family&lt;/li&gt; &#xA;      &lt;li&gt;f4 family&lt;/li&gt; &#xA;      &lt;li&gt;g4 family&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;New appraoch for current estimation for torque control using voltage - &lt;a href=&#34;https://docs.simplefoc.com/voltage_torque_mode&#34;&gt;see in docs &lt;/a&gt; &#xA;   &lt;ul dir=&#34;auto&#34;&gt; &#xA;    &lt;li&gt;Support for motor KV rating - back emf estimation&lt;/li&gt; &#xA;    &lt;li&gt;Using motor phase resistance&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;KV rating and phase resistance used for open-loop current limiting as well - &lt;a href=&#34;https://docs.simplefoc.com/open_loop_motion_control&#34;&gt;see in docs &lt;/a&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Arduino &lt;em&gt;SimpleFOClibrary&lt;/em&gt; v2.2&lt;/h2&gt; &#xA;&lt;p align=&#34;&#34;&gt; &lt;a href=&#34;https://youtu.be/Y5kLeqTc6Zk&#34;&gt; &lt;img src=&#34;https://docs.simplefoc.com/extras/Images/youtube.png&#34; height=&#34;320px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;This video demonstrates the &lt;em&gt;Simple&lt;strong&gt;FOC&lt;/strong&gt;library&lt;/em&gt; basic usage, electronic connections and shows its capabilities.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy install&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arduino IDE: Arduino Library Manager integration&lt;/li&gt; &#xA;   &lt;li&gt;PlatformIO&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open-Source&lt;/strong&gt;: Full code and documentation available on github&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Goal&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support as many &lt;a href=&#34;https://docs.simplefoc.com/position_sensors&#34;&gt;sensor&lt;/a&gt; + &lt;a href=&#34;https://docs.simplefoc.com/motors&#34;&gt;motor&lt;/a&gt; + &lt;a href=&#34;https://docs.simplefoc.com/drivers&#34;&gt;driver&lt;/a&gt; + &lt;a href=&#34;https://docs.simplefoc.com/current_sense&#34;&gt;current sense&lt;/a&gt; combination as possible.&lt;/li&gt; &#xA;   &lt;li&gt;Provide the up-to-date and in-depth documentation with API references and the examples&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy to setup and configure&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Easy hardware configuration&lt;/li&gt; &#xA;   &lt;li&gt;Each hardware component is a C++ object (easy to understand)&lt;/li&gt; &#xA;   &lt;li&gt;Easy &lt;a href=&#34;https://docs.simplefoc.com/motion_control&#34;&gt;tuning the control loops&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.simplefoc.com/studio&#34;&gt;&lt;em&gt;Simple&lt;strong&gt;FOC&lt;/strong&gt;Studio&lt;/em&gt;&lt;/a&gt; configuration GUI tool&lt;/li&gt; &#xA;   &lt;li&gt;Built-in communication and monitoring&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Seamless code transfer from one microcontroller family to another&lt;/li&gt; &#xA;   &lt;li&gt;Supports multiple &lt;a href=&#34;https://docs.simplefoc.com/microcontrollers&#34;&gt;MCU architectures&lt;/a&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Arduino: UNO, MEGA, DUE, Leonardo ....&lt;/li&gt; &#xA;     &lt;li&gt;STM32&lt;/li&gt; &#xA;     &lt;li&gt;ESP32&lt;/li&gt; &#xA;     &lt;li&gt;Teensy&lt;/li&gt; &#xA;     &lt;li&gt;many more ...&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;&#34;&gt; &lt;img src=&#34;https://docs.simplefoc.com/extras/Images/uno_l6234.jpg&#34; height=&#34;170px&#34;&gt; &lt;img src=&#34;https://docs.simplefoc.com/extras/Images/hmbgc_v22.jpg&#34; height=&#34;170px&#34;&gt; &lt;img src=&#34;https://docs.simplefoc.com/extras/Images/foc_shield_v13.jpg&#34; height=&#34;170px&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full API code documentation as well as example projects and step by step guides can be found on our &lt;a href=&#34;https://docs.simplefoc.com/&#34;&gt;docs website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36178713/168475410-105e4e3d-082a-4015-98ff-d380c7992dfd.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Depending on if you want to use this library as the plug and play Arduino library or you want to get insight in the algorithm and make changes there are two ways to install this code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full library installation &lt;a href=&#34;https://docs.simplefoc.com/library_download&#34;&gt;Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PlatformIO &lt;a href=&#34;https://docs.simplefoc.com/library_platformio&#34;&gt;Docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Arduino &lt;em&gt;SimpleFOClibrary&lt;/em&gt; installation to Arduino IDE&lt;/h3&gt; &#xA;&lt;h4&gt;Arduino Library Manager&lt;/h4&gt; &#xA;&lt;p&gt;The simplest way to get hold of the library is directly by using Arduino IDE and its integrated Library Manager.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open Arduino IDE and start Arduino Library Manager by clicking: &lt;code&gt;Tools &amp;gt; Manage Libraries...&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Search for &lt;code&gt;Simple FOC&lt;/code&gt; library and install the latest version.&lt;/li&gt; &#xA; &lt;li&gt;Reopen Arduino IDE and you should have the library examples in &lt;code&gt;File &amp;gt; Examples &amp;gt; Simple FOC&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Using Github website&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to the &lt;a href=&#34;https://github.com/simplefoc/Arduino-FOC&#34;&gt;github repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click first on &lt;code&gt;Clone or Download &amp;gt; Download ZIP&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Unzip it and place it in &lt;code&gt;Arduino Libraries&lt;/code&gt; folder. Windows: &lt;code&gt;Documents &amp;gt; Arduino &amp;gt; libraries&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Reopen Arduino IDE and you should have the library examples in &lt;code&gt;File &amp;gt; Examples &amp;gt; Simple FOC&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Using terminal&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open terminal and run&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd #Arduino libraries folder&#xA;git clone https://github.com/simplefoc/Arduino-FOC.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reopen Arduino IDE and you should have the library examples in &lt;code&gt;File &amp;gt; Examples &amp;gt; Simple FOC&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community and contributing&lt;/h2&gt; &#xA;&lt;p&gt;For all the questions regarding the potential implementation, applications, supported hardware and similar please visit our &lt;a href=&#34;https://community.simplefoc.com&#34;&gt;community forum&lt;/a&gt; or our &lt;a href=&#34;https://discord.gg/kWBwuzY32n&#34;&gt;discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is always helpful to hear the stories/problems/suggestions of people implementing the code and you might find a lot of answered questions there already!&lt;/p&gt; &#xA;&lt;h3&gt;Github Issues &amp;amp; Pull requests&lt;/h3&gt; &#xA;&lt;p&gt;Please do not hesitate to leave an issue if you have problems/advices/suggestions regarding the code!&lt;/p&gt; &#xA;&lt;p&gt;Pull requests are welcome, but let&#39;s first discuss them in &lt;a href=&#34;https://community.simplefoc.com&#34;&gt;community forum&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to this porject but you are not very familiar with github, don&#39;t worry, let us know either by posting at the community forum , by posting a github issue or at our discord server.&lt;/p&gt; &#xA;&lt;h2&gt;Arduino code example&lt;/h2&gt; &#xA;&lt;p&gt;This is a simple Arduino code example implementing the velocity control program of a BLDC motor with encoder.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: This program uses all the default control parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;SimpleFOC.h&amp;gt;&#xA;&#xA;//  BLDCMotor( pole_pairs )&#xA;BLDCMotor motor = BLDCMotor(11);&#xA;//  BLDCDriver( pin_pwmA, pin_pwmB, pin_pwmC, enable (optional) )&#xA;BLDCDriver3PWM driver = BLDCDriver3PWM(9, 10, 11, 8);&#xA;//  Encoder(pin_A, pin_B, CPR)&#xA;Encoder encoder = Encoder(2, 3, 2048);&#xA;// channel A and B callbacks&#xA;void doA(){encoder.handleA();}&#xA;void doB(){encoder.handleB();}&#xA;&#xA;&#xA;void setup() {  &#xA;  // initialize encoder hardware&#xA;  encoder.init();&#xA;  // hardware interrupt enable&#xA;  encoder.enableInterrupts(doA, doB);&#xA;  // link the motor to the sensor&#xA;  motor.linkSensor(&amp;amp;encoder);&#xA;  &#xA;  // power supply voltage [V]&#xA;  driver.voltage_power_supply = 12;&#xA;  // initialise driver hardware&#xA;  driver.init();&#xA;  // link driver&#xA;  motor.linkDriver(&amp;amp;driver);&#xA;&#xA;  // set control loop type to be used&#xA;  motor.controller = MotionControlType::velocity;&#xA;  // initialize motor&#xA;  motor.init();&#xA;  &#xA;  // align encoder and start FOC&#xA;  motor.initFOC();&#xA;}&#xA;&#xA;void loop() {&#xA;  // FOC algorithm function&#xA;  motor.loopFOC();&#xA;&#xA;  // velocity control loop function&#xA;  // setting the target velocity or 2rad/s&#xA;  motor.move(2);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more details in the &lt;a href=&#34;https://docs.simplefoc.com/&#34;&gt;SimpleFOC documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example projects&lt;/h2&gt; &#xA;&lt;p&gt;Here are some of the &lt;em&gt;Simple&lt;strong&gt;FOC&lt;/strong&gt;library&lt;/em&gt; and &lt;em&gt;Simple&lt;strong&gt;FOC&lt;/strong&gt;Shield&lt;/em&gt; application examples.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://youtu.be/Ih-izQyXJCI&#34;&gt; &lt;img src=&#34;https://docs.simplefoc.com/extras/Images/youtube_pendulum.png&#34; height=&#34;200px&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://youtu.be/xTlv1rPEqv4&#34;&gt; &lt;img src=&#34;https://docs.simplefoc.com/extras/Images/youtube_haptic.png&#34; height=&#34;200px&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://youtu.be/RI4nNMF608I&#34;&gt; &lt;img src=&#34;https://docs.simplefoc.com/extras/Images/youtube_drv8302.png&#34; height=&#34;200px&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://youtu.be/zcb86TRxTxc&#34;&gt; &lt;img src=&#34;https://docs.simplefoc.com/extras/Images/youtube_stepper.png&#34; height=&#34;200px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Citing the &lt;em&gt;SimpleFOC&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;We are very happy that &lt;em&gt;Simple&lt;strong&gt;FOC&lt;/strong&gt;library&lt;/em&gt; has been used as a component of several research project and has made its way to several scientific papers. We are hoping that this trend is going to continue as the project matures and becomes more robust! A short resume paper about &lt;em&gt;Simple&lt;strong&gt;FOC&lt;/strong&gt;&lt;/em&gt; has been published in the Journal of Open Source Software:&lt;/p&gt; &#xA;&lt;p&gt; &lt;b&gt;&lt;i&gt;SimpleFOC&lt;/i&gt;&lt;/b&gt;: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors.&lt;br&gt; A. Skuric, HS. Bank, R. Unger, O. Williams, D. González-Reyes&lt;br&gt; Journal of Open Source Software, 7(74), 4232, https://doi.org/10.21105/joss.04232 &lt;/p&gt; &#xA;&lt;p&gt;If you are interested in citing &lt;em&gt;Simple&lt;strong&gt;FOC&lt;/strong&gt;library&lt;/em&gt; or some other component of &lt;em&gt;Simple&lt;strong&gt;FOC&lt;/strong&gt;project&lt;/em&gt; in your research, we suggest you to cite our paper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bib&#34;&gt;@article{simplefoc2022,&#xA;  doi = {10.21105/joss.04232},&#xA;  url = {https://doi.org/10.21105/joss.04232},&#xA;  year = {2022},&#xA;  publisher = {The Open Journal},&#xA;  volume = {7},&#xA;  number = {74},&#xA;  pages = {4232},&#xA;  author = {Antun Skuric and Hasan Sinan Bank and Richard Unger and Owen Williams and David González-Reyes},&#xA;  title = {SimpleFOC: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors},&#xA;  journal = {Journal of Open Source Software}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Arduino FOC repo structure&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Branch&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/simplefoc/Arduino-FOC&#34;&gt;master&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stable and tested library version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/simplefoc/Arduino-FOC/workflows/Library%20Compile/badge.svg?sanitize=true&#34; alt=&#34;Library Compile&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/simplefoc/Arduino-FOC/tree/dev&#34;&gt;dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Development library version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/simplefoc/Arduino-FOC/workflows/Library%20Dev%20Compile/badge.svg?branch=dev&#34; alt=&#34;Library Dev Compile&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/simplefoc/Arduino-FOC/tree/minimal&#34;&gt;minimal&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Minimal Arduino example with integrated library&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/simplefoc/Arduino-FOC/workflows/MinimalBuild/badge.svg?branch=minimal&#34; alt=&#34;MinimalBuild&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>markparticle/WebServer</title>
    <updated>2022-08-02T01:32:50Z</updated>
    <id>tag:github.com,2022-08-02:/markparticle/WebServer</id>
    <link href="https://github.com/markparticle/WebServer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C++ Linux WebServer服务器&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WebServer&lt;/h1&gt; &#xA;&lt;p&gt;用C++实现的高性能WEB服务器，经过webbenchh压力测试可以实现上万的QPS&lt;/p&gt; &#xA;&lt;h2&gt;功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;利用IO复用技术Epoll与线程池实现多线程的Reactor高并发模型；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;利用正则与状态机解析HTTP请求报文，实现处理静态资源的请求；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;利用标准库容器封装char，实现自动增长的缓冲区；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;基于小根堆实现的定时器，关闭超时的非活动连接；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;利用单例模式与阻塞队列实现异步的日志系统，记录服务器运行状态；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;利用RAII机制实现了数据库连接池，减少数据库连接建立与关闭的开销，同时实现了用户注册登录功能。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;增加logsys,threadpool测试单元(todo: timer, sqlconnpool, httprequest, httpresponse)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;环境要求&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;C++14&lt;/li&gt; &#xA; &lt;li&gt;MySql&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;目录树&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── code           源代码&#xA;│   ├── buffer&#xA;│&amp;nbsp;&amp;nbsp; ├── config&#xA;│&amp;nbsp;&amp;nbsp; ├── http&#xA;│&amp;nbsp;&amp;nbsp; ├── log&#xA;│&amp;nbsp;&amp;nbsp; ├── timer&#xA;│&amp;nbsp;&amp;nbsp; ├── pool&#xA;│&amp;nbsp;&amp;nbsp; ├── server&#xA;│&amp;nbsp;&amp;nbsp; └── main.cpp&#xA;├── test           单元测试&#xA;│   ├── Makefile&#xA;│&amp;nbsp;&amp;nbsp; └── test.cpp&#xA;├── resources      静态资源&#xA;│&amp;nbsp;&amp;nbsp; ├── index.html&#xA;│&amp;nbsp;&amp;nbsp; ├── image&#xA;│&amp;nbsp;&amp;nbsp; ├── video&#xA;│&amp;nbsp;&amp;nbsp; ├── js&#xA;│   └── css&#xA;├── bin            可执行文件&#xA;│   └── server&#xA;├── log            日志文件&#xA;├── webbench-1.5   压力测试&#xA;├── build          &#xA;│   └── Makefile&#xA;├── Makefile&#xA;├── LICENSE&#xA;└── readme.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;项目启动&lt;/h2&gt; &#xA;&lt;p&gt;需要先配置好对应的数据库&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;// 建立yourdb库&#xA;create database yourdb;&#xA;&#xA;// 创建user表&#xA;USE yourdb;&#xA;CREATE TABLE user(&#xA;    username char(50) NULL,&#xA;    password char(50) NULL&#xA;)ENGINE=InnoDB;&#xA;&#xA;// 添加数据&#xA;INSERT INTO user(username, password) VALUES(&#39;name&#39;, &#39;password&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;./bin/server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;单元测试&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd test&#xA;make&#xA;./test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;压力测试&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/markparticle/WebServer/raw/master/readme.assest/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95.png&#34; alt=&#34;image-webbench&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./webbench-1.5/webbench -c 100 -t 10 http://ip:port/&#xA;./webbench-1.5/webbench -c 1000 -t 10 http://ip:port/&#xA;./webbench-1.5/webbench -c 5000 -t 10 http://ip:port/&#xA;./webbench-1.5/webbench -c 10000 -t 10 http://ip:port/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;测试环境: Ubuntu:19.10 cpu:i5-8400 内存:8G&lt;/li&gt; &#xA; &lt;li&gt;QPS 10000+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;config配置&lt;/li&gt; &#xA; &lt;li&gt;完善单元测试&lt;/li&gt; &#xA; &lt;li&gt;实现循环缓冲区&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;致谢&lt;/h2&gt; &#xA;&lt;p&gt;Linux高性能服务器编程，游双著.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qinguoyi/TinyWebServer&#34;&gt;@qinguoyi&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>