<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-23T01:33:40Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CarlBugeja/Open-Reflow</title>
    <updated>2023-01-23T01:33:40Z</updated>
    <id>tag:github.com,2023-01-23:/CarlBugeja/Open-Reflow</id>
    <link href="https://github.com/CarlBugeja/Open-Reflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A controller for self-reflowing PCBs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Open-Reflow-Controller-Self-Reflow-PCB-&lt;/h1&gt; &#xA;&lt;p&gt;Shield: &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-CC%20BY--SA%204.0-lightgrey.svg?sanitize=true&#34; alt=&#34;CC BY-SA 4.0&#34;&gt;&lt;/a&gt; A controller for self-reflowing PCBs This work is licensed under a &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;&lt;img src=&#34;https://licensebuttons.net/l/by-sa/4.0/88x31.png&#34; alt=&#34;CC BY-SA 4.0&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>project64/project64</title>
    <updated>2023-01-23T01:33:40Z</updated>
    <id>tag:github.com,2023-01-23:/project64/project64</id>
    <link href="https://github.com/project64/project64" rel="alternate"></link>
    <summary type="html">&lt;p&gt;N64 Emulator&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/project64/project64/develop/Docs/img/icon.png&#34; alt=&#34;logo&#34; width=&#34;200&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Project64&lt;/h1&gt; &#xA;&lt;p&gt;Project64 is a free and open-source emulator for the Nintendo 64 and Nintendo 64 Disk Drive written in C++ currently only for Windows (planned support for other platforms in the future).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Development and debugging tools&lt;/li&gt; &#xA; &lt;li&gt;Save/load states&lt;/li&gt; &#xA; &lt;li&gt;Fullscreen&lt;/li&gt; &#xA; &lt;li&gt;Controller support&lt;/li&gt; &#xA; &lt;li&gt;Great language support&lt;/li&gt; &#xA; &lt;li&gt;Support for many popular N64 emulator plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/project64/project64/develop/Docs/img/screen.png&#34; alt=&#34;screenshot&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Installer for the latest stable releases are available &lt;a href=&#34;https://www.pj64-emu.com/windows-downloads&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Download nightly builds &lt;a href=&#34;https://www.pj64-emu.com/nightly-builds&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;AppVeyor (Windows x86/x64): &lt;a href=&#34;https://ci.appveyor.com/project/project64/project64/branch/develop&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/sbtwyhaexslyhgx3?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Side note: 64-bit builds are considered experimental and aren&#39;t currently supported&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Minimum requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Operating system (limited support for Windows 8.1 and below) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows XP SP3, Windows 7 SP1, Windows 8.1, and the latest version of Windows 10&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;CPU &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Intel or AMD processor with at least SSE2 support&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;RAM &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;512MB or more&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Graphics card &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DirectX 8 capable (Jabo&#39;s Direct3D8)&lt;/li&gt; &#xA;   &lt;li&gt;OpenGL 2.0 capable (3.0+ recommended) (Project64 Video)&lt;/li&gt; &#xA;   &lt;li&gt;OpenGL 3.3 capable (GLideN64)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;sub&gt;Intel integrated graphics can have issues that are not present with Nvidia and AMD GPU&#39;s even when the requirements are met.&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;For support, we ask all users read our &lt;a href=&#34;https://raw.githubusercontent.com/project64/project64/develop/Docs/SUPPORT.md&#34;&gt;support document&lt;/a&gt;. Read this &lt;em&gt;&lt;strong&gt;before&lt;/strong&gt;&lt;/em&gt; opening issues.&lt;/p&gt; &#xA;&lt;p&gt;Please join our &lt;a href=&#34;https://discord.gg/Cg3zquF&#34;&gt;Discord server&lt;/a&gt; for support, questions, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to see a changelog that is available &lt;a href=&#34;https://raw.githubusercontent.com/project64/project64/develop/Docs/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://duktape.org/&#34;&gt;Duktape&lt;/a&gt;: MIT license&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://7-zip.org/&#34;&gt;7-Zip&lt;/a&gt;: LGPL+unRAR license&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zlib.net/&#34;&gt;zlib&lt;/a&gt;: zlib license&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libpng.org/pub/png/libpng.html&#34;&gt;libpng&lt;/a&gt;: libpng license&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/discord/discord-rpc&#34;&gt;discord-rpc&lt;/a&gt;: MIT license&lt;/li&gt; &#xA; &lt;li&gt;DirectX: Copyright (C) Microsoft&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wtl.sourceforge.io/&#34;&gt;Windows Template Library&lt;/a&gt;: Common Public License&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome!&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/project64/project64/develop/.github/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; file for ways to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers and contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.github.com/project64&#34;&gt;@Project64&lt;/a&gt; - Zilmar - current maintainer&lt;/li&gt; &#xA; &lt;li&gt;Jabo - Previous contributor&lt;/li&gt; &#xA; &lt;li&gt;Smiff - Previous contributor&lt;/li&gt; &#xA; &lt;li&gt;Gent - Previous contributor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also see the list of &lt;a href=&#34;https://github.com/project64/project64/contributors&#34;&gt;community contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;ðŸ”— Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pj64-emu.com&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/Cg3zquF&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/project64/project64&#34; alt=&#34;GitHub&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/project64/project64/develop/license.md&#34;&gt;license&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wpilibsuite/allwpilib</title>
    <updated>2023-01-23T01:33:40Z</updated>
    <id>tag:github.com,2023-01-23:/wpilibsuite/allwpilib</id>
    <link href="https://github.com/wpilibsuite/allwpilib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Repository of WPILibJ and WPILibC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WPILib Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wpilibsuite/allwpilib/actions/workflows/gradle.yml&#34;&gt;&lt;img src=&#34;https://github.com/wpilibsuite/allwpilib/actions/workflows/gradle.yml/badge.svg?branch=main&#34; alt=&#34;Gradle&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.wpilib.org/allwpilib/docs/development/cpp/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-c%2B%2B-blue&#34; alt=&#34;C++ Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.wpilib.org/allwpilib/docs/development/java/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-java-orange&#34; alt=&#34;Java Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to the WPILib project. This repository contains the HAL, WPILibJ, and WPILibC projects. These are the core libraries for creating robot programs for the roboRIO.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/#wpilib-project&#34;&gt;WPILib Project&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/#wpilib-mission&#34;&gt;WPILib Mission&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/#building-wpilib&#34;&gt;Building WPILib&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/#building&#34;&gt;Building&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/#faster-builds&#34;&gt;Faster builds&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/#using-development-builds&#34;&gt;Using Development Builds&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/#custom-toolchain-location&#34;&gt;Custom toolchain location&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/#formattinglinting&#34;&gt;Formatting/Linting&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/#cmake&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/#publishing&#34;&gt;Publishing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/#structure-and-organization&#34;&gt;Structure and Organization&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/#contributing-to-wpilib&#34;&gt;Contributing to WPILib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;WPILib Mission&lt;/h2&gt; &#xA;&lt;p&gt;The WPILib Mission is to enable FIRST Robotics teams to focus on writing game-specific software rather than focusing on hardware details - &#34;raise the floor, don&#39;t lower the ceiling&#34;. We work to enable teams with limited programming knowledge and/or mentor experience to be as successful as possible, while not hampering the abilities of teams with more advanced programming capabilities. We support Kit of Parts control system components directly in the library. We also strive to keep parity between major features of each language (Java, C++, and NI&#39;s LabVIEW), so that teams aren&#39;t at a disadvantage for choosing a specific programming language. WPILib is an open source project, licensed under the BSD 3-clause license. You can find a copy of the license &lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/LICENSE.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;p&gt;Below is a list of instructions that guide you through cloning, building, publishing and using local allwpilib binaries in a robot project. This quick start is not intended as a replacement for the information further listed in this document.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository with &lt;code&gt;git clone https://github.com/wpilibsuite/allwpilib.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build the repository with &lt;code&gt;./gradlew build&lt;/code&gt; or &lt;code&gt;./gradlew build --build-cache&lt;/code&gt; if you have an internet connection&lt;/li&gt; &#xA; &lt;li&gt;Publish the artifacts locally by running &lt;code&gt;./gradlew publish&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/DevelopmentBuilds.md&#34;&gt;Update your&lt;/a&gt; &lt;code&gt;build.gradle&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/DevelopmentBuilds.md&#34;&gt;to use the artifacts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Building WPILib&lt;/h1&gt; &#xA;&lt;p&gt;Using Gradle makes building WPILib very straightforward. It only has a few dependencies on outside tools, such as the ARM cross compiler for creating roboRIO binaries.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://adoptium.net/temurin/releases/?version=11&#34;&gt;JDK 11&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note that the JRE is insufficient; the full JDK is required&lt;/li&gt; &#xA;   &lt;li&gt;On Ubuntu, run &lt;code&gt;sudo apt install openjdk-11-jdk&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;On Windows, install the JDK 11 .msi from the link above&lt;/li&gt; &#xA;   &lt;li&gt;On macOS, install the JDK 11 .pkg from the link above&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;C++ compiler &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;On Linux, install GCC 11 or greater&lt;/li&gt; &#xA;   &lt;li&gt;On Windows, install &lt;a href=&#34;https://visualstudio.microsoft.com/vs/community/&#34;&gt;Visual Studio Community 2022&lt;/a&gt; and select the C++ programming language during installation (Gradle can&#39;t use the build tools for Visual Studio)&lt;/li&gt; &#xA;   &lt;li&gt;On macOS, install the Xcode command-line build tools via &lt;code&gt;xcode-select --install&lt;/code&gt;. Xcode 13 or later is required.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;ARM compiler toolchain &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;./gradlew installRoboRioToolchain&lt;/code&gt; after cloning this repository&lt;/li&gt; &#xA;   &lt;li&gt;If the WPILib installer was used, this toolchain is already installed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Raspberry Pi toolchain (optional) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;./gradlew installArm32Toolchain&lt;/code&gt; after cloning this repository&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On macOS ARM, run &lt;code&gt;softwareupdate --install-rosetta&lt;/code&gt;. This is necessary to be able to use the macOS x86 roboRIO toolchain on ARM.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Clone the WPILib repository and follow the instructions above for installing any required tooling.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/wpilibsuite/styleguide/raw/main/README.md&#34;&gt;styleguide README&lt;/a&gt; for wpiformat setup instructions. We use clang-format 14.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;All build steps are executed using the Gradle wrapper, &lt;code&gt;gradlew&lt;/code&gt;. Each target that Gradle can build is referred to as a task. The most common Gradle task to use is &lt;code&gt;build&lt;/code&gt;. This will build all the outputs created by WPILib. To run, open a console and cd into the cloned WPILib directory. Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build a specific subproject, such as WPILibC, you must access the subproject and run the build task only on that project. Accessing a subproject in Gradle is quite easy. Simply use &lt;code&gt;:subproject_name:task_name&lt;/code&gt; with the Gradle wrapper. For example, building just WPILibC:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew :wpilibc:build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The gradlew wrapper only exists in the root of the main project, so be sure to run all commands from there. All of the subprojects have build tasks that can be run. Gradle automatically determines and rebuilds dependencies, so if you make a change in the HAL and then run &lt;code&gt;./gradlew :wpilibc:build&lt;/code&gt;, the HAL will be rebuilt, then WPILibC.&lt;/p&gt; &#xA;&lt;p&gt;There are a few tasks other than &lt;code&gt;build&lt;/code&gt; available. To see them, run the meta-task &lt;code&gt;tasks&lt;/code&gt;. This will print a list of all available tasks, with a description of each task.&lt;/p&gt; &#xA;&lt;p&gt;If opening from a fresh clone, generated java dependencies will not exist. Most IDEs will not run the generation tasks, which will cause lots of IDE errors. Manually run &lt;code&gt;./gradlew compileJava&lt;/code&gt; from a terminal to run all the compile tasks, and then refresh your IDE&#39;s configuration (In VS Code open settings.gradle and save).&lt;/p&gt; &#xA;&lt;h3&gt;Faster builds&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./gradlew build&lt;/code&gt; builds &lt;em&gt;everything&lt;/em&gt;, which includes debug and release builds for desktop and all installed cross compilers. Many developers don&#39;t need or want to build all of this. Therefore, common tasks have shortcuts to only build necessary components for common development and testing tasks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./gradlew testDesktopCpp&lt;/code&gt; and &lt;code&gt;./gradlew testDesktopJava&lt;/code&gt; will build and run the tests for &lt;code&gt;wpilibc&lt;/code&gt; and &lt;code&gt;wpilibj&lt;/code&gt; respectively. They will only build the minimum components required to run the tests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;testDesktopCpp&lt;/code&gt; and &lt;code&gt;testDesktopJava&lt;/code&gt; tasks also exist for the projects &lt;code&gt;wpiutil&lt;/code&gt;, &lt;code&gt;ntcore&lt;/code&gt;, &lt;code&gt;cscore&lt;/code&gt;, &lt;code&gt;hal&lt;/code&gt; &lt;code&gt;wpilibNewCommands&lt;/code&gt; and &lt;code&gt;cameraserver&lt;/code&gt;. These can be ran with &lt;code&gt;./gradlew :projectName:task&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./gradlew buildDesktopCpp&lt;/code&gt; and &lt;code&gt;./gradlew buildDesktopJava&lt;/code&gt; will compile &lt;code&gt;wpilibcExamples&lt;/code&gt; and &lt;code&gt;wpilibjExamples&lt;/code&gt; respectively. The results can&#39;t be ran, but they can compile.&lt;/p&gt; &#xA;&lt;h3&gt;Build Cache&lt;/h3&gt; &#xA;&lt;p&gt;Run with &lt;code&gt;--build-cache&lt;/code&gt; on the command-line to use the shared &lt;a href=&#34;https://docs.gradle.org/current/userguide/build_cache.html&#34;&gt;build cache&lt;/a&gt; artifacts generated by the continuous integration server. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew build --build-cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Development Builds&lt;/h3&gt; &#xA;&lt;p&gt;Please read the documentation available &lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/DevelopmentBuilds.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom toolchain location&lt;/h3&gt; &#xA;&lt;p&gt;If you have installed the FRC Toolchain to a directory other than the default, or if the Toolchain location is not on your System PATH, you can pass the &lt;code&gt;toolChainPath&lt;/code&gt; property to specify where it is located. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew build -PtoolChainPath=some/path/to/frc/toolchain/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Formatting/linting&lt;/h3&gt; &#xA;&lt;p&gt;Once a PR has been submitted, formatting can be run in CI by commenting &lt;code&gt;/format&lt;/code&gt; on the PR. A new commit will be pushed with the formatting changes.&lt;/p&gt; &#xA;&lt;h4&gt;wpiformat&lt;/h4&gt; &#xA;&lt;p&gt;wpiformat can be executed anywhere in the repository via &lt;code&gt;py -3 -m wpiformat -clang 14&lt;/code&gt; on Windows or &lt;code&gt;python3 -m wpiformat -clang 14&lt;/code&gt; on other platforms.&lt;/p&gt; &#xA;&lt;h4&gt;Java Code Quality Tools&lt;/h4&gt; &#xA;&lt;p&gt;The Java code quality tools Checkstyle, PMD, and Spotless can be run via &lt;code&gt;./gradlew javaFormat&lt;/code&gt;. SpotBugs can be run via the &lt;code&gt;spotbugsMain&lt;/code&gt;, &lt;code&gt;spotbugsTest&lt;/code&gt;, and &lt;code&gt;spotbugsDev&lt;/code&gt; tasks. These tools will all be run automatically by the &lt;code&gt;build&lt;/code&gt; task. To disable this behavior, pass the &lt;code&gt;-PskipJavaFormat&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;If you only want to run the Java autoformatter, run &lt;code&gt;./gradlew spotlessApply&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CMake&lt;/h3&gt; &#xA;&lt;p&gt;CMake is also supported for building. See &lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/README-CMAKE.md&#34;&gt;README-CMAKE.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Publishing&lt;/h2&gt; &#xA;&lt;p&gt;If you are building to test with other dependencies or just want to export the build as a Maven-style dependency, simply run the &lt;code&gt;publish&lt;/code&gt; task. This task will publish all available packages to ~/releases/maven/development. If you need to publish the project to a different repo, you can specify it with &lt;code&gt;-Prepo=repo_name&lt;/code&gt;. Valid options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;development - The default repo.&lt;/li&gt; &#xA; &lt;li&gt;beta - Publishes to ~/releases/maven/beta.&lt;/li&gt; &#xA; &lt;li&gt;stable - Publishes to ~/releases/maven/stable.&lt;/li&gt; &#xA; &lt;li&gt;release - Publishes to ~/releases/maven/release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The maven artifacts are described in &lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/MavenArtifacts.md&#34;&gt;MavenArtifacts.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Structure and Organization&lt;/h2&gt; &#xA;&lt;p&gt;The main WPILib code you&#39;re probably looking for is in WPILibJ and WPILibC. Those directories are split into shared, sim, and athena. Athena contains the WPILib code meant to run on your roboRIO. Sim is WPILib code meant to run on your computer, and shared is code shared between the two. Shared code must be platform-independent, since it will be compiled with both the ARM cross-compiler and whatever desktop compiler you are using (g++, msvc, etc...).&lt;/p&gt; &#xA;&lt;p&gt;The integration test directories for C++ and Java contain test code that runs on our test-system. When you submit code for review, it is tested by those programs. If you add new functionality you should make sure to write tests for it so we don&#39;t break it in the future.&lt;/p&gt; &#xA;&lt;p&gt;The hal directory contains more C++ code meant to run on the roboRIO. HAL is an acronym for &#34;Hardware Abstraction Layer&#34;, and it interfaces with the NI Libraries. The NI Libraries contain the low-level code for controlling devices on your robot. The NI Libraries are found in the &lt;a href=&#34;https://github.com/wpilibsuite/ni-libraries&#34;&gt;ni-libraries&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;The upstream_utils directory contains scripts for updating copies of thirdparty code in the repository.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/wpilibsuite/styleguide&#34;&gt;styleguide repository&lt;/a&gt; contains our style guides for C++ and Java code. Anything submitted to the WPILib project needs to follow the code style guides outlined in there. For details about the style, please see the contributors document &lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/CONTRIBUTING.md#coding-guidelines&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing to WPILib&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>