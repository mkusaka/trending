<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-26T01:28:58Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dpjudas/SurrealEngine</title>
    <updated>2024-08-26T01:28:58Z</updated>
    <id>tag:github.com,2024-08-26:/dpjudas/SurrealEngine</id>
    <link href="https://github.com/dpjudas/SurrealEngine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unreal Tournament Engine Reimplementation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Surreal Engine&lt;/h1&gt; &#xA;&lt;p&gt;The goal of this project is to reimplement enough of the original Unreal Engine to make the Unreal Tournament (UT99) maps playable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5136903/125014285-afc65580-e06d-11eb-80c0-0a1992a7d0ff.jpg&#34; alt=&#34;facingworlds&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Current status&lt;/h2&gt; &#xA;&lt;p&gt;The engine can load and render the maps. The Unrealscript VM is almost feature complete - only arrays and network conditional execution are not implemented yet.&lt;/p&gt; &#xA;&lt;p&gt;It will attempt to load all level actors and initialize the map. However, while the menus and the HUD will appear, there are still many native functions not implemented yet. It is also quite possible some events aren&#39;t firing as they should. You will therefore see exceptions shown if you interact with them and that is where the project is at.&lt;/p&gt; &#xA;&lt;p&gt;At the time of this writing, SurrealEngine can detect the following UE1 games:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unreal Tournament (v436, v451b, v469(a, b, c, d))&lt;/li&gt; &#xA; &lt;li&gt;Unreal (v200, v209, v220, v224v, v225f, v226f)&lt;/li&gt; &#xA; &lt;li&gt;Unreal Gold (v226b, v227(i, j, k_11))&lt;/li&gt; &#xA; &lt;li&gt;Deus Ex (v1002f, v1112fm)&lt;/li&gt; &#xA; &lt;li&gt;Klingon Honor Guard (219)&lt;/li&gt; &#xA; &lt;li&gt;NERF Arena Blast (v300)&lt;/li&gt; &#xA; &lt;li&gt;TNN Outdoors Pro Hunter (v200)&lt;/li&gt; &#xA; &lt;li&gt;Rune Classic (v1.10)&lt;/li&gt; &#xA; &lt;li&gt;Clive Barker&#39;s Undying (v420)&lt;/li&gt; &#xA; &lt;li&gt;Tactical-Ops: Assault on Terror (v3.4.0 and v3.5.0 - both running under UT436 and UT469 engines)&lt;/li&gt; &#xA; &lt;li&gt;Wheel of Time (v333)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;From the list above, only Unreal Tournament v436 and Unreal Gold v226 is in a relatively playable state. Running any other game (and UT versions) can and will result in crashes.&lt;/p&gt; &#xA;&lt;h3&gt;Unreal Tournament v436&lt;/h3&gt; &#xA;&lt;p&gt;The game launches, menu options will work and botmatches can be played, however the bots will barely have any AI (they move around sometimes and retaliate upon being attacked), and some maps will have some functionality missing (like DM-Morpheus will not have the &#34;X leading the match&#34; screens work).&lt;/p&gt; &#xA;&lt;h3&gt;Unreal Gold v226&lt;/h3&gt; &#xA;&lt;p&gt;The game launches, menu options will work most of the time. Single player maps can be played, as well as botmatches. The AI will behave more or less the same as how they behave in UT. Objects from Return to Na Pali have their models appear broken.&lt;/p&gt; &#xA;&lt;h3&gt;Deus Ex v1112fm&lt;/h3&gt; &#xA;&lt;p&gt;Only the intro flyby works. No keyboard or mouse inputs will be detected, as Deus Ex handles them differently than Unreal/UT.&lt;/p&gt; &#xA;&lt;h2&gt;Command line parameters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SurrealEngine [--url=&amp;lt;mapname&amp;gt;] [--engineversion=X] [Path to game folder]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can simply copy paste the SurrealEngine executable inside the System folder of your UE1 game of choice, and run it from there. If no game folder is specified, and the executable isn&#39;t in a System folder, the engine will search the registry (Windows only) for the registry keys Epic originally set. If no URL is specified it will use the default URL in the ini file (per default the intro map). The --engineversion argument overrides the internal version detected by the engine and should only be used for debugging purposes.&lt;/p&gt; &#xA;&lt;h2&gt;Windows build instructions&lt;/h2&gt; &#xA;&lt;p&gt;Use CMake to build the project. A recent version of Visual Studio, and MSVC compiler that supports C++17 is required.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, SDL2 is an optional dependency that you need to supply locally yourself (download the Visual C++ version of SDL2, extract it somewhere and point to that folder in CMake settings). Supplying SDL2 will allow you to use it as an alternative windowing system.&lt;/p&gt; &#xA;&lt;p&gt;Other than that there are no other external third party dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Linux build instructions&lt;/h2&gt; &#xA;&lt;p&gt;Use CMake to build the project. You&#39;re gonna need the development versions of the following packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cmake&lt;/li&gt; &#xA; &lt;li&gt;g++&lt;/li&gt; &#xA; &lt;li&gt;pthreads&lt;/li&gt; &#xA; &lt;li&gt;dl&lt;/li&gt; &#xA; &lt;li&gt;alsa (libasound2)&lt;/li&gt; &#xA; &lt;li&gt;SDL2&lt;/li&gt; &#xA; &lt;li&gt;waylandpp (optional) (C++ bindings for Wayland, used on ZWidget Wayland backend)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Linux, SDL2 is required, as SurrealEngine will utilise it for its windowing functionalities and native Wayland support (with &lt;code&gt;SDL_VIDEODRIVER=wayland&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Note that these packages won&#39;t always have the exact names given above, as it can change from distro to distro. In general, if you get an include error that looks like it is trying to include something external, then you are probably missing the dev package for that library. :)&lt;/p&gt; &#xA;&lt;h3&gt;Ubuntu&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# apt install cmake g++ libasound-dev libopenal-dev libdbus-1-dev libsdl2-dev libxkbcommon-dev waylandpp-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;ve installed all of the prerequisites, enter these commands in the given order from the folder you want to clone the repo to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/dpjudas/SurrealEngine.git&#xA;cd SurrealEngine&#xA;mkdir build&#xA;cd build&#xA;cmake -DCMAKE_BUILD_TYPE=Release ..&#xA;make -j 16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When compilation is successfully finished, &lt;code&gt;build&lt;/code&gt; folder should contain these 3 executables: &lt;code&gt;SurrealEngine&lt;/code&gt;, &lt;code&gt;SurrealEditor&lt;/code&gt; and &lt;code&gt;SurrealDebugger&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nisargjhaveri/WirelessAndroidAutoDongle</title>
    <updated>2024-08-26T01:28:58Z</updated>
    <id>tag:github.com,2024-08-26:/nisargjhaveri/WirelessAndroidAutoDongle</id>
    <link href="https://github.com/nisargjhaveri/WirelessAndroidAutoDongle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use Wireless Android Auto with a car that supports only wired Android Auto using a Raspberry Pi.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wireless Android Auto Dongle&lt;/h1&gt; &#xA;&lt;p&gt;Use Wireless Android Auto with a car that supports only wired Android Auto using a Raspberry Pi.&lt;/p&gt; &#xA;&lt;p&gt;This repository consists of the buildroot setup to generate an sd card image to create your own Wireless Android Auto Dongle.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Native Wireless Android Auto connection to the phone, no extra app needed on the phone.&lt;/li&gt; &#xA; &lt;li&gt;Passes through all Android Auto traffic without any modifications to ensure seamless and safe experience.&lt;/li&gt; &#xA; &lt;li&gt;Fast bootup, connection under 30 seconds.&lt;/li&gt; &#xA; &lt;li&gt;Supports multiple boards (Currently multiple Raspberry Pi boards).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Hardware&lt;/h2&gt; &#xA;&lt;p&gt;This is currently tested and built for multiple Raspberry Pi boards supporting USB OTG.&lt;/p&gt; &#xA;&lt;p&gt;The setup should technically work on any devices with these basic requirements (albeit, with some modifications).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The board should support USB OTG or Gadget mode.&lt;/li&gt; &#xA; &lt;li&gt;Has Wifi and Bluetooth. External should also work if not in-built.&lt;/li&gt; &#xA; &lt;li&gt;Should be able to operate on power provided by the car.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install and run&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nisargjhaveri/WirelessAndroidAutoDongle/releases&#34;&gt;Download a pre-built sd card image&lt;/a&gt; or build one as described below. Install the image on the SD card using your favorite tool.&lt;/p&gt; &#xA;&lt;p&gt;You may want to update the &lt;code&gt;country_code&lt;/code&gt; in the &lt;code&gt;/etc/hostapd.conf&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;First-time connection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connect the phone to headunit via USB cable, make sure Android Auto starts. Disconnect phone.&lt;/li&gt; &#xA; &lt;li&gt;Connect the board to the car. Make sure to use a data cable, with the USB OTG enabled port on the board.&lt;/li&gt; &#xA; &lt;li&gt;Open Bluetooth settings and pair the new device called &#34;AndroidAuto-Dongle&#34; or &#34;AA Wireless Dongle&#34; on your phone.&lt;/li&gt; &#xA; &lt;li&gt;After this phone should automatically connect via Wifi and the dongle will connect to the headunit via USB and start Android Auto on the car screen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Subsequent connections&lt;/h3&gt; &#xA;&lt;p&gt;From the next time, it should automatically connect to the phone and start Android Auto.&lt;/p&gt; &#xA;&lt;p&gt;Make sure your Bluetooth and Wifi are enabled on the phone.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshoot&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;ve already tried multiple times and it still does not work, you can ssh into the device and try to get some logs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connect the device to the headunit, let it boot and try to connect once. The logs are not persisted across reboots, so you need to get the logs in the same instance soon after you observe the issue.&lt;/li&gt; &#xA; &lt;li&gt;Connect to the device using wifi (SSID:AAWirelessDongle, Password: ConnectAAWirelessDongle, see &lt;a href=&#34;https://github.com/nisargjhaveri/WirelessAndroidAutoDongle/raw/main/aa_wireless_dongle/board/common/rootfs_overlay/etc/hostapd.conf&#34;&gt;hostapd.conf&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;SSH into the device (username: root, password: password, see relevant defconfigs e.g. &lt;a href=&#34;https://github.com/nisargjhaveri/WirelessAndroidAutoDongle/raw/main/aa_wireless_dongle/configs/raspberrypi0w_defconfig&#34;&gt;raspberrypi0w_defconfig&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Once you&#39;re in, try to have a look at &lt;code&gt;/var/log/messages&lt;/code&gt; file, it should have most relevant logs to start with. You can also copy the file and attach to issues you create if any.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h3&gt;Clone&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone --recurse-submodules https://github.com/nisargjhaveri/WirelessAndroidAutoDongle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build with Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker compose run --rm rpi4 # See docker-compose.yml for available options.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;rpi0w&lt;/code&gt;, &lt;code&gt;rpi02w&lt;/code&gt;, &lt;code&gt;rpi3a&lt;/code&gt; or &lt;code&gt;rpi4&lt;/code&gt; to build and generate an sdcard image. Once the build is successful, it&#39;ll copy the generated sdcard image in &lt;code&gt;images/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;bash&lt;/code&gt; service for more control over the build process and experimentation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker compose run --rm bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build with manual setup&lt;/h3&gt; &#xA;&lt;p&gt;Once you have a recursive clone, you can manually build using the following set of commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd buildroot&#xA;$ make BR2_EXTERNAL=../aa_wireless_dongle/ O=output/rpi0w raspberrypi0w_defconfig # Change output and defconfig for your board&#xA;$ cd output/rpi0w&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When successful, this should generate the sd card image at &lt;code&gt;images/sdcard.img&lt;/code&gt; in your output directory. See the &#34;Install and Run&#34; instructions above to use this image.&lt;/p&gt; &#xA;&lt;p&gt;Use one of the following defconfig for the board you intend to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;raspberrypi0w_defconfig&lt;/code&gt; - Raspberry Pi Zero W&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;raspberrypizero2w_defconfig&lt;/code&gt; - Raspberry Pi Zero 2 W&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;raspberrypi3a_defconfig&lt;/code&gt; - Raspberry Pi 3A+&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;raspberrypi4_defconfig&lt;/code&gt; - Raspberry Pi 4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tested with very limited set of headunits and cars. Let me know if it does not work with your headunit.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>