<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-23T01:30:59Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ericniebler/range-v3</title>
    <updated>2022-06-23T01:30:59Z</updated>
    <id>tag:github.com,2022-06-23:/ericniebler/range-v3</id>
    <link href="https://github.com/ericniebler/range-v3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Range library for C++14/17/20, basis for C++20&#39;s std::ranges&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;range-v3&lt;/h1&gt; &#xA;&lt;p&gt;Range library for C++14/17/20. This code was the basis of &lt;a href=&#34;https://ericniebler.github.io/std/wg21/D4128.html&#34;&gt;a formal proposal&lt;/a&gt; to add range support to the C++ standard library. That proposal evolved through a Technical Specification, and finally into &lt;a href=&#34;https://wg21.link/p0896r4&#34;&gt;P0896R4 &#34;The One Ranges Proposal&#34;&lt;/a&gt; which was merged into the C++20 working drafts in November 2018.&lt;/p&gt; &#xA;&lt;h2&gt;About:&lt;/h2&gt; &#xA;&lt;p&gt;Ranges are an extension of the Standard Template Library that makes its iterators and algorithms more powerful by making them &lt;em&gt;composable&lt;/em&gt;. Unlike other range-like solutions which seek to do away with iterators, in range-v3 ranges are an abstration layer &lt;em&gt;on top&lt;/em&gt; of iterators.&lt;/p&gt; &#xA;&lt;p&gt;Range-v3 is built on three pillars: Views, Actions, and Algorithms. The algorithms are the same as those with which you are already familiar in the STL, except that in range-v3 all the algorithms have overloads that take ranges in addition to the overloads that take iterators. Views are composable adaptations of ranges where the adaptation happens lazily as the view is iterated. And an action is an eager application of an algorithm to a container that mutates the container in-place and returns it for further processing.&lt;/p&gt; &#xA;&lt;p&gt;Views and actions use the pipe syntax (e.g., &lt;code&gt;rng | adapt1 | adapt2 | ...&lt;/code&gt;) so your code is terse and readable from left to right.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation:&lt;/h2&gt; &#xA;&lt;p&gt;Check out the (woefully incomplete) documentation &lt;a href=&#34;https://ericniebler.github.io/range-v3/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Other resources (mind the dates, the library probably has changed since then):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Usage:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Talk: &lt;a href=&#34;https://www.youtube.com/watch?v=mFUXNMfaciE&#34;&gt;CppCon 2015: Eric Niebler &#34;Ranges for the Standard Library&#34;&lt;/a&gt;, 2015.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://ericniebler.com/2014/12/07/a-slice-of-python-in-c/&#34;&gt;A slice of Python in C++&lt;/a&gt;, 07.12.2014.&lt;/li&gt; &#xA;   &lt;li&gt;Actions (back then called &lt;a href=&#34;http://ericniebler.com/2014/11/23/container-algorithms/&#34;&gt;Container Algorithms&lt;/a&gt;), 23.11.2014.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://ericniebler.com/2014/04/27/range-comprehensions/&#34;&gt;Range comprehensions&lt;/a&gt;, 27.04.2014.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://ericniebler.com/2013/11/07/input-iterators-vs-input-ranges/&#34;&gt;Input iterators vs input ranges&lt;/a&gt;, 07.11.2013.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Design / Implementation:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rationale behind range-v3: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4128.html&#34;&gt;N4128: Ranges for the standard library Revision 1&lt;/a&gt;, 2014.&lt;/li&gt; &#xA;   &lt;li&gt;Ranges TS: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4560.pdf&#34;&gt;N4560: C++ Extensions for Ranges&lt;/a&gt;, 2015.&lt;/li&gt; &#xA;   &lt;li&gt;Implementation of customization points in range-v3: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html&#34;&gt;N4381: Suggested Design for Customization Points&lt;/a&gt;, 2015.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r0.pdf&#34;&gt;P0386: Inline variables&lt;/a&gt;, 2016.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;http://ericniebler.com/2014/10/21/customization-point-design-in-c11-and-beyond/&#34;&gt;Customization Point Design in C++11 and Beyond&lt;/a&gt;, 2014.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Proxy iterators in range-v3: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://ericniebler.github.io/std/wg21/D0022.html&#34;&gt;D0022: Proxy Iterators for the Ranges Extensions&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;http://ericniebler.com/2015/01/28/to-be-or-not-to-be-an-iterator/&#34;&gt;To Be or Not to Be (an Iterator)&lt;/a&gt;, 2015.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;http://ericniebler.com/2015/02/03/iterators-plus-plus-part-1/&#34;&gt;Iterators++: Part1&lt;/a&gt;, 2015.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;http://ericniebler.com/2015/02/13/iterators-plus-plus-part-2/&#34;&gt;Iterators++: Part2&lt;/a&gt;, 2015.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;http://ericniebler.com/2015/03/03/iterators-plus-plus-part-3/&#34;&gt;Iterators++: Part3&lt;/a&gt;, 2015.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Metaprogramming utilities: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;See the &lt;a href=&#34;https://ericniebler.github.io/meta/index.html&#34;&gt;meta documentation&lt;/a&gt;, the library has changed significantly since the &lt;a href=&#34;http://ericniebler.com/2014/11/13/tiny-metaprogramming-library/&#34;&gt;2014 blog post&lt;/a&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Concept emulation layer: &lt;a href=&#34;http://ericniebler.com/2013/11/23/concept-checking-in-c11/&#34;&gt;Concept checking in C++11&lt;/a&gt;, 2013.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=zgOF4NrQllo&#34;&gt;C++Now 2014: Eric Niebler &#34;C++11 Library Design&#34;&lt;/a&gt;, 2014.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License:&lt;/h2&gt; &#xA;&lt;p&gt;Most of the source code in this project are mine, and those are under the Boost Software License. Parts are taken from Alex Stepanov&#39;s Elements of Programming, Howard Hinnant&#39;s libc++, and from the SGI STL. Please see the attached LICENSE file and the CREDITS file for the licensing and acknowledgments.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Compilers&lt;/h2&gt; &#xA;&lt;p&gt;The code is known to work on the following compilers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;clang 5.0 (or later)&lt;/li&gt; &#xA; &lt;li&gt;GCC 6.5 (or later)&lt;/li&gt; &#xA; &lt;li&gt;Clang/LLVM 6 (or later) on Windows (older versions may work - we haven&#39;t tested.)&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio 2019 (or later) on Windows, with some caveats due to range-v3&#39;s strict conformance requirements: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;range-v3 needs &lt;code&gt;/permissive-&lt;/code&gt; and either &lt;code&gt;/std:c++latest&lt;/code&gt;, &lt;code&gt;/std:c++20&lt;/code&gt;, or &lt;code&gt;/std:c++17&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Development Status:&lt;/strong&gt; This code is fairly stable, well-tested, and suitable for casual use, although currently lacking documentation. &lt;em&gt;In general&lt;/em&gt;, no promise is made about support or long-term stability. This code &lt;em&gt;will&lt;/em&gt; evolve without regard to backwards compatibility.&lt;/p&gt; &#xA;&lt;p&gt;A notable exception is anything found within the &lt;code&gt;ranges::cpp20&lt;/code&gt; namespace. Those components will change rarely or (preferably) never at all.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Build status&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;on GitHub Actions: &lt;a href=&#34;https://github.com/ericniebler/range-v3/actions&#34;&gt;&lt;img src=&#34;https://github.com/ericniebler/range-v3/workflows/range-v3%20CI/badge.svg?branch=master&#34; alt=&#34;GitHub Actions Status&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building range-v3 - Using vcpkg&lt;/h2&gt; &#xA;&lt;p&gt;You can download and install range-v3 using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;./vcpkg install range-v3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The range-v3 port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h2&gt;Building range-v3 - Using Conan&lt;/h2&gt; &#xA;&lt;p&gt;You can download and install range-v3 using the &lt;a href=&#34;https://github.com/conan-io/conan&#34;&gt;Conan&lt;/a&gt; dependency manager.&lt;/p&gt; &#xA;&lt;p&gt;Setup your CMakeLists.txt (see &lt;a href=&#34;https://docs.conan.io/en/latest/integrations/build_system.html&#34;&gt;Conan documentation&lt;/a&gt; on how to use MSBuild, Meson and others):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;project(myproject CXX)&#xA;&#xA;add_executable(${PROJECT_NAME} main.cpp)&#xA;&#xA;include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake) # Include Conan-generated file&#xA;conan_basic_setup(TARGETS) # Introduce Conan-generated targets&#xA;&#xA;target_link_libraries(${PROJECT_NAME} CONAN_PKG::range-v3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create &lt;code&gt;conanfile.txt&lt;/code&gt; in your source dir:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[requires]&#xA;range-v3/0.12.0&#xA;&#xA;[generators]&#xA;cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install and run &lt;code&gt;conan&lt;/code&gt;, then build your project as always:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install conan&#xA;mkdir build&#xA;cd build&#xA;conan install ../ --build=missing&#xA;cmake ../&#xA;cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building range-v3 - Using &lt;code&gt;build2&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://build2.org&#34;&gt;&lt;code&gt;build2&lt;/code&gt;&lt;/a&gt;, a dependency manager and build-system combined, to use &lt;code&gt;range-v3&lt;/code&gt; (or work on it):&lt;/p&gt; &#xA;&lt;p&gt;Currently this package is available in these package repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://cppget.org/range-v3/&#34;&gt;https://cppget.org/range-v3/&lt;/a&gt;&lt;/strong&gt; for released and published versions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/build2-packaging/range-v3.git&#34;&gt;&lt;strong&gt;The git repository with the sources of the &lt;code&gt;build2&lt;/code&gt; package of &lt;code&gt;range-v3&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; for unreleased or custom revisions of &lt;code&gt;range-v3&lt;/code&gt;, or for working on it with &lt;code&gt;build2&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;build2&lt;/code&gt; package name: &lt;code&gt;range-v3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Library target name : &lt;code&gt;lib{range-v3}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/build2-packaging/range-v3/raw/master/NOTES-build2.md&#34;&gt;Detailed use cases and instructions in this document&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, to make your &lt;code&gt;build2&lt;/code&gt; project depend on &lt;code&gt;range-v3&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add one of the repositories to your configurations, or in your &lt;code&gt;repositories.manifest&lt;/code&gt;, if not already there; for example: &lt;pre&gt;&lt;code&gt;:&#xA;role: prerequisite&#xA;location: https://pkg.cppget.org/1/alpha # v0.11.0 is there.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add this package as a dependency to your &lt;code&gt;manifest&lt;/code&gt; file (example for &lt;code&gt;v0.11.x&lt;/code&gt;): &lt;pre&gt;&lt;code&gt;depends: range-v3 ~0.11.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Import the target and use it as a prerequisite to your own target using &lt;code&gt;range-v3&lt;/code&gt; in the appropriate &lt;code&gt;buildfile&lt;/code&gt;: &lt;pre&gt;&lt;code&gt;import range_v3 = range-v3%lib{range-v3}&#xA;&#xA;lib{mylib} : cxx{**} ... $range_v3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then just build your project as usual (with &lt;code&gt;b&lt;/code&gt; or &lt;code&gt;bdep update&lt;/code&gt;), &lt;code&gt;build2&lt;/code&gt; will figure out the rest.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;build2&lt;/code&gt; newcomers or to get more details and use cases, you can read &lt;a href=&#34;https://github.com/build2-packaging/range-v3/raw/master/NOTES-build2.md&#34;&gt;this document&lt;/a&gt; and the &lt;a href=&#34;https://build2.org/build2-toolchain/doc/build2-toolchain-intro.xhtml&#34;&gt;&lt;code&gt;build2&lt;/code&gt; toolchain introduction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Say Thanks!&lt;/h2&gt; &#xA;&lt;p&gt;I do this work because I love it and because I love C++ and want it to be as excellent as I know it can be. If you like my work and are looking for a way to say thank you, you can leave a supportive comment on &lt;a href=&#34;http://ericniebler.com&#34;&gt;my blog&lt;/a&gt;. Or you could leave me some kudos on my Open Hub range-v3 contribution page. Just click the &lt;strong&gt;Give Kudos&lt;/strong&gt; button &lt;a href=&#34;https://www.openhub.net/p/range-v3/contributors/3053743222308608&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wenet-e2e/wenet</title>
    <updated>2022-06-23T01:30:59Z</updated>
    <id>tag:github.com,2022-06-23:/wenet-e2e/wenet</id>
    <link href="https://github.com/wenet-e2e/wenet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Production First and Production Ready End-to-End Speech Recognition Toolkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WeNet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wenet-e2e/wenet/raw/main/README_CN.md&#34;&gt;&lt;strong&gt;中文版&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wenet-e2e/wenet&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Python-3.7%7C3.8-brightgreen&#34; alt=&#34;Python-Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wenet-e2e/wenet/main/ROADMAP.md&#34;&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://wenet-e2e.github.io/wenet/&#34;&gt;&lt;strong&gt;Docs&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://wenet-e2e.github.io/wenet/papers.html&#34;&gt;&lt;strong&gt;Papers&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/wenet-e2e/wenet/tree/main/runtime/server/x86&#34;&gt;&lt;strong&gt;Runtime (x86)&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/wenet-e2e/wenet/tree/main/runtime/device/android/wenet&#34;&gt;&lt;strong&gt;Runtime (android)&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/wenet-e2e/wenet/main/docs/pretrained_models.md&#34;&gt;&lt;strong&gt;Pretrained Models&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;We&lt;/strong&gt; share neural &lt;strong&gt;Net&lt;/strong&gt; together.&lt;/p&gt; &#xA;&lt;p&gt;The main motivation of WeNet is to close the gap between research and production end-to-end (E2E) speech recognition models, to reduce the effort of productionizing E2E models, and to explore better E2E models for production.&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Production first and production ready&lt;/strong&gt;: The core design principle of WeNet. WeNet provides full stack solutions for speech recognition.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Unified solution for streaming and non-streaming ASR&lt;/em&gt;: &lt;a href=&#34;https://arxiv.org/pdf/2012.05481.pdf&#34;&gt;U2 framework&lt;/a&gt;--develop, train, and deploy only once.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Runtime solution&lt;/em&gt;: built-in server &lt;a href=&#34;https://github.com/wenet-e2e/wenet/tree/main/runtime/server/x86&#34;&gt;x86&lt;/a&gt; and on-device &lt;a href=&#34;https://github.com/wenet-e2e/wenet/tree/main/runtime/device/android/wenet&#34;&gt;android&lt;/a&gt; runtime solution.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Model exporting solution&lt;/em&gt;: built-in solution to export model to LibTorch/ONNX for inference.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;LM solution&lt;/em&gt;: built-in production-level &lt;a href=&#34;https://raw.githubusercontent.com/wenet-e2e/wenet/main/docs/lm.md&#34;&gt;LM solution&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Other production solutions&lt;/em&gt;: built-in contextual biasing, time stamp, endpoint, and n-best solutions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Accurate&lt;/strong&gt;: WeNet achieves SOTA results on a lot of public speech datasets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Light weight&lt;/strong&gt;: WeNet is easy to install, easy to use, well designed, and well documented.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;examples/$dataset/s0/README.md&lt;/code&gt; for benchmark on different speech datasets.&lt;/p&gt; &#xA;&lt;h2&gt;Installation(Python Only)&lt;/h2&gt; &#xA;&lt;p&gt;If you just want to use WeNet as a python package for speech recognition application, just install it by &lt;code&gt;pip&lt;/code&gt;, please note python 3.6+ is required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip3 install wenet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And please see &lt;a href=&#34;https://raw.githubusercontent.com/wenet-e2e/wenet/main/runtime/binding/python/README.md&#34;&gt;doc&lt;/a&gt; for usage.&lt;/p&gt; &#xA;&lt;h2&gt;Installation(Training and Developing)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/wenet-e2e/wenet.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Conda: please see &lt;a href=&#34;https://docs.conda.io/en/latest/miniconda.html&#34;&gt;https://docs.conda.io/en/latest/miniconda.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create Conda env:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;conda create -n wenet python=3.8&#xA;conda activate wenet&#xA;pip install -r requirements.txt&#xA;conda install pytorch=1.10.0 torchvision torchaudio=0.10.0 cudatoolkit=11.1 -c pytorch -c conda-forge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optionally, if you want to use x86 runtime or language model(LM), you have to build the runtime as follows. Otherwise, you can just ignore this step.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# runtime build requires cmake 3.14 or above&#xA;cd runtime/server/x86&#xA;mkdir build &amp;amp;&amp;amp; cd build &amp;amp;&amp;amp; cmake .. &amp;amp;&amp;amp; cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Discussion &amp;amp; Communication&lt;/h2&gt; &#xA;&lt;p&gt;Please visit &lt;a href=&#34;https://github.com/wenet-e2e/wenet/discussions&#34;&gt;Discussions&lt;/a&gt; for further discussion.&lt;/p&gt; &#xA;&lt;p&gt;For Chinese users, you can aslo scan the QR code on the left to follow our offical account of WeNet. We created a WeChat group for better discussion and quicker response. Please scan the personal QR code on the right, and the guy is responsible for inviting you to the chat group.&lt;/p&gt; &#xA;&lt;p&gt;If you can not access the QR image, please access it on &lt;a href=&#34;https://gitee.com/robin1001/qr/tree/master&#34;&gt;gitee&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://github.com/robin1001/qr/raw/master/wenet.jpeg&#34; width=&#34;250px&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://github.com/robin1001/qr/raw/master/binbin.jpeg&#34; width=&#34;250px&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Or you can directly discuss on &lt;a href=&#34;https://github.com/wenet-e2e/wenet/issues&#34;&gt;Github Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://www.chumenwenwen.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wenet-e2e/wenet-contributors/main/companies/chumenwenwen.png&#34; width=&#34;250px&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;http://lxie.npu-aslp.org&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wenet-e2e/wenet-contributors/main/colleges/nwpu.png&#34; width=&#34;250px&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;http://www.aishelltech.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wenet-e2e/wenet-contributors/main/companies/aishelltech.png&#34; width=&#34;250px&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;http://www.ximalaya.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wenet-e2e/wenet-contributors/main/companies/ximalaya.png&#34; width=&#34;250px&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://www.jd.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wenet-e2e/wenet-contributors/main/companies/jd.jpeg&#34; width=&#34;250px&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://horizon.ai&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wenet-e2e/wenet-contributors/main/companies/hobot.png&#34; width=&#34;250px&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://thuhcsi.github.io&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wenet-e2e/wenet-contributors/main/colleges/thu.png&#34; width=&#34;250px&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nvidia.com/en-us&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wenet-e2e/wenet-contributors/main/companies/nvidia.png&#34; width=&#34;250px&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Acknowledge&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We borrowed a lot of code from &lt;a href=&#34;https://github.com/espnet/espnet&#34;&gt;ESPnet&lt;/a&gt; for transformer based modeling.&lt;/li&gt; &#xA; &lt;li&gt;We borrowed a lot of code from &lt;a href=&#34;http://kaldi-asr.org/&#34;&gt;Kaldi&lt;/a&gt; for WFST based decoding for LM integration.&lt;/li&gt; &#xA; &lt;li&gt;We referred &lt;a href=&#34;https://github.com/srvk/eesen&#34;&gt;EESEN&lt;/a&gt; for building TLG based graph for LM integration.&lt;/li&gt; &#xA; &lt;li&gt;We referred to &lt;a href=&#34;https://github.com/ZhengkunTian/OpenTransformer/&#34;&gt;OpenTransformer&lt;/a&gt; for python batch inference of e2e models.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Citations&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{yao2021wenet,&#xA;  title={WeNet: Production oriented Streaming and Non-streaming End-to-End Speech Recognition Toolkit},&#xA;  author={Yao, Zhuoyuan and Wu, Di and Wang, Xiong and Zhang, Binbin and Yu, Fan and Yang, Chao and Peng, Zhendong and Chen, Xiaoyu and Xie, Lei and Lei, Xin},&#xA;  booktitle={Proc. Interspeech},&#xA;  year={2021},&#xA;  address={Brno, Czech Republic },&#xA;  organization={IEEE}&#xA;}&#xA;&#xA;@article{zhang2022wenet,&#xA;  title={WeNet 2.0: More Productive End-to-End Speech Recognition Toolkit},&#xA;  author={Zhang, Binbin and Wu, Di and Peng, Zhendong and Song, Xingchen and Yao, Zhuoyuan and Lv, Hang and Xie, Lei and Yang, Chao and Pan, Fuping and Niu, Jianwei},&#xA;  journal={arXiv preprint arXiv:2203.15455},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>gflags/gflags</title>
    <updated>2022-06-23T01:30:59Z</updated>
    <id>tag:github.com,2022-06-23:/gflags/gflags</id>
    <link href="https://github.com/gflags/gflags" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The gflags package contains a C++ library that implements commandline flags processing. It includes built-in support for standard types such as string and the ability to define flags in the source file in which they are used. Online documentation available at:&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/gflags/gflags&#34;&gt;&lt;img src=&#34;https://travis-ci.org/gflags/gflags.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/schuhschuh/gflags/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/4ctod566ysraus74/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The documentation of the gflags library is available online at &lt;a href=&#34;https://gflags.github.io/gflags/&#34;&gt;https://gflags.github.io/gflags/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;11 November 2018&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve just released gflags 2.2.2.&lt;/p&gt; &#xA;&lt;p&gt;This maintenance release improves life of Bazel users (no more &#34;config.h&#34; leaking into global include paths), fixes build with recent MinGW versions, and silences a number of static code analyzer and compiler warnings. The build targets exported by the CMake configuration of this library are now also prefixed by the package name &#34;gflags::&#34; following a more recent (unwritten) CMake convention. The unprefixed target names are still supported to avoid that dependent projects have to be modified due to this change in imported target names.&lt;/p&gt; &#xA;&lt;p&gt;Please report any further issues with this release using the GitHub issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;11 July 2017&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve just released gflags 2.2.1.&lt;/p&gt; &#xA;&lt;p&gt;This maintenance release primarily fixes build issues on Windows and false alarms reported by static code analyzers.&lt;/p&gt; &#xA;&lt;p&gt;Please report any further issues with this release using the GitHub issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;25 November 2016&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve finally released gflags 2.2.0.&lt;/p&gt; &#xA;&lt;p&gt;This release adds support for use of the gflags library as external dependency not only in projects using CMake, but also &lt;a href=&#34;https://bazel.build/&#34;&gt;Bazel&lt;/a&gt;, or &lt;a href=&#34;https://www.freedesktop.org/wiki/Software/pkg-config/&#34;&gt;pkg-config&lt;/a&gt;. One new minor feature is added in this release: when a command flag argument contains dashes, these are implicitly converted to underscores. This is to allow those used to separate words of the flag name by dashes to do so, while the flag variable names are required to use underscores.&lt;/p&gt; &#xA;&lt;p&gt;Memory leaks reported by valgrind should be resolved by this release. This release fixes build errors with MS Visual Studio 2015.&lt;/p&gt; &#xA;&lt;p&gt;Please report any further issues with this release using the GitHub issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;24 March 2015&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve just released gflags 2.1.2.&lt;/p&gt; &#xA;&lt;p&gt;This release completes the namespace change fixes. In particular, it restores binary ABI compatibility with release version 2.0. The deprecated &#34;google&#34; namespace is by default still kept as primary namespace while symbols are imported into the new &#34;gflags&#34; namespace. This can be overridden using the CMake variable GFLAGS_NAMESPACE.&lt;/p&gt; &#xA;&lt;p&gt;Other fixes of the build configuration are related to the (patched) CMake modules FindThreads.cmake and CheckTypeSize.cmake. These have been removed and instead the C language is enabled again even though gflags is written in C++ only.&lt;/p&gt; &#xA;&lt;p&gt;This release also marks the complete move of the gflags project from Google Code to GitHub. Email addresses of original issue reporters got lost in the process. Given the age of most issue reports, this should be negligable.&lt;/p&gt; &#xA;&lt;p&gt;Please report any further issues using the GitHub issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;30 March 2014&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve just released gflags 2.1.1.&lt;/p&gt; &#xA;&lt;p&gt;This release fixes a few bugs in the configuration of gflags_declare.h and adds a separate GFLAGS_INCLUDE_DIR CMake variable to the build configuration. Setting GFLAGS_NAMESPACE to &#34;google&#34; no longer changes also the include path of the public header files. This allows the use of the library with other Google projects such as glog which still use the deprecated &#34;google&#34; namespace for the gflags library, but include it as &#34;gflags/gflags.h&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;20 March 2014&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve just released gflags 2.1.&lt;/p&gt; &#xA;&lt;p&gt;The major changes are the use of CMake for the build configuration instead of the autotools and packaging support through CPack. The default namespace of all C++ symbols is now &#34;gflags&#34; instead of &#34;google&#34;. This can be configured via the GFLAGS_NAMESPACE variable.&lt;/p&gt; &#xA;&lt;p&gt;This release compiles with all major compilers without warnings and passed the unit tests on Ubuntu 12.04, Windows 7 (Visual Studio 2008 and 2010, Cygwin, MinGW), and Mac OS X (Xcode 5.1).&lt;/p&gt; &#xA;&lt;p&gt;The SVN repository on Google Code is now frozen and replaced by a Git repository such that it can be used as Git submodule by projects. The main hosting of this project remains at Google Code. Thanks to the distributed character of Git, I can push (and pull) changes from both GitHub and Google Code in order to keep the two public repositories in sync. When fixing an issue for a pull request through either of these hosting platforms, please reference the issue number as &lt;a href=&#34;https://code.google.com/p/support/wiki/IssueTracker#Integration_with_version_control&#34;&gt;described here&lt;/a&gt;. For the further development, I am following the &lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;Git branching model&lt;/a&gt; with feature branch names prefixed by &#34;feature/&#34; and bugfix branch names prefixed by &#34;bugfix/&#34;, respectively.&lt;/p&gt; &#xA;&lt;p&gt;Binary and source &lt;a href=&#34;https://github.com/schuhschuh/gflags/releases&#34;&gt;packages&lt;/a&gt; are available on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;14 January 2014&lt;/h2&gt; &#xA;&lt;p&gt;The migration of the build system to CMake is almost complete. What remains to be done is rewriting the tests in Python such they can be executed on non-Unix platforms and splitting them up into separate CTest tests. Though merging these changes into the master branch yet remains to be done, it is recommended to already start using the &lt;a href=&#34;https://github.com/schuhschuh/gflags/tree/cmake-migration&#34;&gt;cmake-migration&lt;/a&gt; branch.&lt;/p&gt; &#xA;&lt;h2&gt;20 April 2013&lt;/h2&gt; &#xA;&lt;p&gt;More than a year has past since I (Andreas) took over the maintenance for &lt;code&gt;gflags&lt;/code&gt;. Only few minor changes have been made since then, much to my regret. To get more involved and stimulate participation in the further development of the library, I moved the project source code today to &lt;a href=&#34;https://github.com/schuhschuh/gflags&#34;&gt;GitHub&lt;/a&gt;. I believe that the strengths of &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; will allow for better community collaboration as well as ease the integration of changes made by others. I encourage everyone who would like to contribute to send me pull requests. Git&#39;s lightweight feature branches will also provide the right tool for more radical changes which should only be merged back into the master branch after these are complete and implement the desired behavior.&lt;/p&gt; &#xA;&lt;p&gt;The SVN repository remains accessible at Google Code and I will keep the master branch of the Git repository hosted at GitHub and the trunk of the Subversion repository synchronized. Initially, I was going to simply switch the Google Code project to Git, but in this case the SVN repository would be frozen and force everyone who would like the latest development changes to use Git as well. Therefore I decided to host the public Git repository at GitHub instead.&lt;/p&gt; &#xA;&lt;p&gt;Please continue to report any issues with gflags on Google Code. The GitHub project will only be used to host the Git repository.&lt;/p&gt; &#xA;&lt;p&gt;One major change of the project structure I have in mind for the next weeks is the migration from autotools to &lt;a href=&#34;http://www.cmake.org/&#34;&gt;CMake&lt;/a&gt;. Check out the (unstable!) &lt;a href=&#34;https://github.com/schuhschuh/gflags/tree/cmake-migration&#34;&gt;cmake-migration&lt;/a&gt; branch on GitHub for details.&lt;/p&gt; &#xA;&lt;h2&gt;25 January 2012&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve just released gflags 2.0.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;google-gflags&lt;/code&gt; project has been renamed to &lt;code&gt;gflags&lt;/code&gt;. I (csilvers) am stepping down as maintainer, to be replaced by Andreas Schuh. Welcome to the team, Andreas! I&#39;ve seen the energy you have around gflags and the ideas you have for the project going forward, and look forward to having you on the team.&lt;/p&gt; &#xA;&lt;p&gt;I bumped the major version number up to 2 to reflect the new community ownership of the project. All the &lt;a href=&#34;https://raw.githubusercontent.com/gflags/gflags/master/ChangeLog.txt&#34;&gt;changes&lt;/a&gt; are related to the renaming. There are no functional changes from gflags 1.7. In particular, I&#39;ve kept the code in the namespace &lt;code&gt;google&lt;/code&gt;, though in a future version it should be renamed to &lt;code&gt;gflags&lt;/code&gt;. I&#39;ve also kept the &lt;code&gt;/usr/local/include/google/&lt;/code&gt; subdirectory as synonym of &lt;code&gt;/usr/local/include/gflags/&lt;/code&gt;, though the former name has been obsolete for some time now.&lt;/p&gt; &#xA;&lt;h2&gt;18 January 2011&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;google-gflags&lt;/code&gt; Google Code page has been renamed to &lt;code&gt;gflags&lt;/code&gt;, in preparation for the project being renamed to &lt;code&gt;gflags&lt;/code&gt;. In the coming weeks, I&#39;ll be stepping down as maintainer for the gflags project, and as part of that Google is relinquishing ownership of the project; it will now be entirely community run. The name change reflects that shift.&lt;/p&gt; &#xA;&lt;h2&gt;20 December 2011&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve just released gflags 1.7. This is a minor release; the major change is that &lt;code&gt;CommandLineFlagInfo&lt;/code&gt; now exports the address in memory where the flag is located. There has also been a bugfix involving very long --help strings, and some other minor &lt;a href=&#34;https://raw.githubusercontent.com/gflags/gflags/master/ChangeLog.txt&#34;&gt;changes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;29 July 2011&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve just released gflags 1.6. The major new feature in this release is support for setting version info, so that --version does something useful.&lt;/p&gt; &#xA;&lt;p&gt;One minor change has required bumping the library number: &lt;code&gt;ReparseCommandlineFlags&lt;/code&gt; now returns &lt;code&gt;void&lt;/code&gt; instead of &lt;code&gt;int&lt;/code&gt; (the int return value was always meaningless). Though I doubt anyone ever used this (meaningless) return value, technically it&#39;s a change to the ABI that requires a version bump. A bit sad.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also a procedural change with this release: I&#39;ve changed the internal tools used to integrate Google-supplied patches for gflags into the opensource release. These new tools should result in more frequent updates with better change descriptions. They will also result in future &lt;code&gt;ChangeLog&lt;/code&gt; entries being much more verbose (for better or for worse).&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/gflags/gflags/master/ChangeLog.txt&#34;&gt;ChangeLog&lt;/a&gt; for a full list of changes for this release.&lt;/p&gt; &#xA;&lt;h2&gt;24 January 2011&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve just released gflags 1.5. This release has only minor changes from 1.4, including some slightly better reporting in --help, and an new memory-cleanup function that can help when running gflags-using libraries under valgrind. The major change is to fix up the macros (&lt;code&gt;DEFINE_bool&lt;/code&gt; and the like) to work more reliably inside namespaces.&lt;/p&gt; &#xA;&lt;p&gt;If you have not had a problem with these macros, and don&#39;t need any of the other changes described, there is no need to upgrade. See the &lt;a href=&#34;https://raw.githubusercontent.com/gflags/gflags/master/ChangeLog.txt&#34;&gt;ChangeLog&lt;/a&gt; for a full list of changes for this release.&lt;/p&gt; &#xA;&lt;h2&gt;11 October 2010&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve just released gflags 1.4. This release has only minor changes from 1.3, including some documentation tweaks and some work to make the library smaller. If 1.3 is working well for you, there&#39;s no particular reason to upgrade.&lt;/p&gt; &#xA;&lt;h2&gt;4 January 2010&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve just released gflags 1.3. gflags now compiles under MSVC, and all tests pass. I &lt;strong&gt;really&lt;/strong&gt; never thought non-unix-y Windows folks would want gflags, but at least some of them do.&lt;/p&gt; &#xA;&lt;p&gt;The major news, though, is that I&#39;ve separated out the python package into its own library, &lt;a href=&#34;http://code.google.com/p/python-gflags&#34;&gt;python-gflags&lt;/a&gt;. If you&#39;re interested in the Python version of gflags, that&#39;s the place to get it now.&lt;/p&gt; &#xA;&lt;h2&gt;10 September 2009&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve just released gflags 1.2. The major change from gflags 1.1 is it now compiles under MinGW (as well as cygwin), and all tests pass. I never thought Windows folks would want unix-style command-line flags, since they&#39;re so different from the Windows style, but I guess I was wrong!&lt;/p&gt; &#xA;&lt;p&gt;The other changes are minor, such as support for --htmlxml in the python version of gflags.&lt;/p&gt; &#xA;&lt;h2&gt;15 April 2009&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve just released gflags 1.1. It has only minor changes fdrom gflags 1.0 (see the &lt;a href=&#34;https://raw.githubusercontent.com/gflags/gflags/master/ChangeLog.txt&#34;&gt;ChangeLog&lt;/a&gt; for details). The major change is that I moved to a new system for creating .deb and .rpm files. This allows me to create x86_64 deb and rpm files.&lt;/p&gt; &#xA;&lt;p&gt;In the process of moving to this new system, I noticed an inconsistency: the tar.gz and .rpm files created libraries named libgflags.so, but the deb file created libgoogle-gflags.so. I have fixed the deb file to create libraries like the others. I&#39;m no expert in debian packaging, but I believe this has caused the package name to change as well. Please let me know (at [&lt;a href=&#34;mailto:google-gflags@googlegroups.com&#34;&gt;mailto:google-gflags@googlegroups.com&lt;/a&gt; &lt;a href=&#34;mailto:google-gflags@googlegroups.com&#34;&gt;google-gflags@googlegroups.com&lt;/a&gt;]) if this causes problems for you -- especially if you know of a fix! I would be happy to change the deb packages to add symlinks from the old library name to the new (libgoogle-gflags.so -&amp;gt; libgflags.so), but that is beyond my knowledge of how to make .debs.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve tried to install a .rpm or .deb and it doesn&#39;t work for you, let me know. I&#39;m excited to finally have 64-bit package files, but there may still be some wrinkles in the new system to iron out.&lt;/p&gt; &#xA;&lt;h2&gt;1 October 2008&lt;/h2&gt; &#xA;&lt;p&gt;gflags 1.0rc2 was out for a few weeks without any issues, so gflags 1.0 is now released. This is much like gflags 0.9. The major change is that the .h files have been moved from &lt;code&gt;/usr/include/google&lt;/code&gt; to &lt;code&gt;/usr/include/gflags&lt;/code&gt;. While I have backwards-compatibility forwarding headeds in place, please rewrite existing code to say&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   #include &amp;lt;gflags/gflags.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;instead of&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   #include &amp;lt;google/gflags.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I&#39;ve kept the default namespace to google. You can still change with with the appropriate flag to the configure script (&lt;code&gt;./configure --help&lt;/code&gt; to see the flags). If you have feedback as to whether the default namespace should change to gflags, which would be a non-backwards-compatible change, send mail to &lt;code&gt;google-gflags@googlegroups.com&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Version 1.0 also has some neat new features, like support for bash commandline-completion of help flags. See the &lt;a href=&#34;https://raw.githubusercontent.com/gflags/gflags/master/ChangeLog.txt&#34;&gt;ChangeLog&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;If I don&#39;t hear any bad news for a few weeks, I&#39;ll release 1.0-final.&lt;/p&gt;</summary>
  </entry>
</feed>