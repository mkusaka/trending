<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-10T01:26:22Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>geoffdavis/esphome-mitsubishiheatpump</title>
    <updated>2024-02-10T01:26:22Z</updated>
    <id>tag:github.com,2024-02-10:/geoffdavis/esphome-mitsubishiheatpump</id>
    <link href="https://github.com/geoffdavis/esphome-mitsubishiheatpump" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ESPHome Climate Component for Mitsubishi Heatpumps using direct serial connection&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;esphome-mitsubishiheatpump&lt;/h1&gt; &#xA;&lt;p&gt;Wirelessly control your Mitsubishi Comfort HVAC equipment with an ESP8266 or ESP32 using the &lt;a href=&#34;https://esphome.io&#34;&gt;ESPHome&lt;/a&gt; framework.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instant feedback of command changes via RF Remote to HomeAssistant or MQTT.&lt;/li&gt; &#xA; &lt;li&gt;Direct control without the remote.&lt;/li&gt; &#xA; &lt;li&gt;Uses the &lt;a href=&#34;https://github.com/SwiCago/HeatPump&#34;&gt;SwiCago/HeatPump&lt;/a&gt; Arduino libary to talk to the unit directly via the internal &lt;code&gt;CN105&lt;/code&gt; connector.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SwiCago/HeatPump&#34;&gt;https://github.com/SwiCago/HeatPump&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ESPHome 1.19.1 or greater&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Microcontrollers&lt;/h2&gt; &#xA;&lt;p&gt;This library should work on most ESP8266 or ESP32 platforms. It has been tested with the following MCUs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generic ESP-01S board (ESP8266)&lt;/li&gt; &#xA; &lt;li&gt;WeMos D1 Mini (ESP8266)&lt;/li&gt; &#xA; &lt;li&gt;Generic ESP32 Dev Kit (ESP32)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Mitsubishi Climate Units&lt;/h2&gt; &#xA;&lt;p&gt;The underlying HeatPump library works with a number of Mitsubishi HVAC units. Basically, if the unit has a &lt;code&gt;CN105&lt;/code&gt; header on the main board, it should work with this library. The &lt;a href=&#34;https://github.com/SwiCago/HeatPump/wiki/Supported-models&#34;&gt;HeatPump wiki&lt;/a&gt; has a more exhaustive list.&lt;/p&gt; &#xA;&lt;p&gt;The same &lt;code&gt;CN105&lt;/code&gt; connector is used by the Mitsubishi KumoCloud remotes, which have a &lt;a href=&#34;https://www.mitsubishicomfort.com/kumocloud/compatibility&#34;&gt;compatibility list&lt;/a&gt; available.&lt;/p&gt; &#xA;&lt;p&gt;The whole integration with this libary and the underlying HeatPump has been tested by the author on the following units:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MSZ-GL06NA&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MFZ-KA09NA&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Step 1: Build a control circuit.&lt;/h3&gt; &#xA;&lt;p&gt;Build a control circuit with your MCU as detailed in the &lt;a href=&#34;https://github.com/SwiCago/HeatPump/raw/master/README.md#demo-circuit&#34;&gt;SwiCago/HeatPump README&lt;/a&gt;. You can use either an ESP8266 or an ESP32 for this.&lt;/p&gt; &#xA;&lt;p&gt;Note: several users have reported that they&#39;ve been able to get away with not using the pull-up resistors, and just &lt;a href=&#34;https://github.com/SwiCago/HeatPump/issues/13#issuecomment-457897457&#34;&gt;directly connecting a Wemos D1 mini to the control board&lt;/a&gt; via CN105.&lt;/p&gt; &#xA;&lt;h3&gt;Step 2: Use ESPHome 1.18.0 or higher&lt;/h3&gt; &#xA;&lt;p&gt;The code in this repository makes use of a number of features in the 1.18.0 version of ESPHome, including various Fan modes and &lt;a href=&#34;https://esphome.io/components/external_components.html&#34;&gt;external components&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Step 3: Add this repository as an external component&lt;/h3&gt; &#xA;&lt;p&gt;Add this repository to your ESPHome config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;external_components:&#xA;  - source: github://geoffdavis/esphome-mitsubishiheatpump&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 3a: Upgrading from 1.x releases&lt;/h4&gt; &#xA;&lt;p&gt;Version 2.0 and greater of this libary use the ESPHome &lt;code&gt;external_components&lt;/code&gt; feature, which is a huge step forward in terms of usability. In order to make things compile correctly, you will need to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Remove the &lt;code&gt;libraries&lt;/code&gt; section that imports &lt;code&gt;https://github.com/SwiCago/HeatPump&lt;/code&gt;, as this is handled by the &lt;code&gt;external_component&lt;/code&gt; section of manifest.&lt;/li&gt; &#xA; &lt;li&gt;Remove the &lt;code&gt;includes&lt;/code&gt; section that imports &lt;code&gt;src/esphome-mitsubishiheatpump&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete the old checkout of this repository under &lt;code&gt;src/esphome-mitsubishiheatpump&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clean your old ESPHome build directories out (3-dot menu, &#34;Clean Build Files&#34;)&lt;/li&gt; &#xA; &lt;li&gt;You may also have to delete the &lt;em&gt;esphomenodename&lt;/em&gt; directory that corresponds with your &lt;em&gt;esphomenodename.yaml&lt;/em&gt; configuration file completely. This directory may exist in your base config directory, or in &lt;code&gt;config/.esphome/build&lt;/code&gt;. Testing with ESPHome 0.18.x showed this to be necessary to get the cached copy of src/esphome-mitsubishiheatpump to go away entirely, as the &#34;Clean Build Files&#34; isn&#39;t as thorough as one would like.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Failure to delete the old source directory and remove the &lt;code&gt;includes&lt;/code&gt; and &lt;code&gt;libraries&lt;/code&gt; lines will likely result in compilation errors complaining about duplicate declarations of &lt;code&gt;MitsubishiHeatPump::traits()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Example error&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;Linking /data/bedroom_east_heatpump/.pioenvs/bedroom_east_heatpump/firmware.elf&#xA;/root/.platformio/packages/toolchain-xtensa/bin/../lib/gcc/xtensa-lx106-elf/4.8.2/../../../../xtensa-lx106-elf/bin/ld: /data/bedroom_east_heatpump/.pioenvs/bedroom_east_heatpump/src/esphome/components/mitsubishi_heatpump/espmhp.cpp.o: in function `MitsubishiHeatPump::traits()&#39;:&#xA;espmhp.cpp:(.text._ZN18MitsubishiHeatPump6traitsEv+0x4): multiple definition of `MitsubishiHeatPump::traits()&#39;; /data/bedroom_east_heatpump/.pioenvs/bedroom_east_heatpump/src/esphome-mitsubishiheatpump/espmhp.cpp.o:espmhp.cpp:(.text._ZN18MitsubishiHeatPump6traitsEv+0x80): first defined here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 4: Configure the heatpump&lt;/h3&gt; &#xA;&lt;p&gt;Add a &lt;code&gt;mitsubishi_heatpump&lt;/code&gt; to your ESPHome config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;climate:&#xA;  - platform: mitsubishi_heatpump&#xA;    name: &#34;My Heat Pump&#34;&#xA;&#xA;    # Optional&#xA;    hardware_uart: UART0&#xA;&#xA;    # Optional&#xA;    update_interval: 500ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On ESP8266 you&#39;ll need to disable logging to serial because it conflicts with the heatpump UART:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;logger:&#xA;  baud_rate: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On ESP32 you can change &lt;code&gt;hardware_uart&lt;/code&gt; to &lt;code&gt;UART1&lt;/code&gt; or &lt;code&gt;UART2&lt;/code&gt; and keep logging enabled on the main serial port.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; this component DOES NOT use the ESPHome &lt;code&gt;uart&lt;/code&gt; component, as it requires direct access to a hardware UART via the Arduino &lt;code&gt;HardwareSerial&lt;/code&gt; class. The Mitsubishi Heatpump units use an atypical serial port setting (&#34;even parity&#34;). Parity bit support is not implemented in any of the existing software serial libraries, including the one in ESPHome. There&#39;s currently no way to guarantee access to a hardware UART nor retrieve the &lt;code&gt;HardwareSerial&lt;/code&gt; handle from the &lt;code&gt;uart&lt;/code&gt; component within the ESPHome framework.&lt;/p&gt; &#xA;&lt;h1&gt;Example configuration&lt;/h1&gt; &#xA;&lt;p&gt;Below is an example configuration which will include wireless strength indicators and permit over the air updates. You&#39;ll need to create a &lt;code&gt;secrets.yaml&lt;/code&gt; file inside of your &lt;code&gt;esphome&lt;/code&gt; directory with entries for the various items prefixed with &lt;code&gt;!secret&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;substitutions:&#xA;  name: hptest&#xA;  friendly_name: Test Heatpump&#xA;&#xA;&#xA;esphome:&#xA;  name: ${name}&#xA;  platform: ESP8266&#xA;  board: esp01_1m&#xA;  # Boards tested: ESP-01S (ESP8266), Wemos D1 Mini (ESP8266); ESP32 Wifi-DevKit2&#xA;&#xA;wifi:&#xA;  ssid: !secret wifi_ssid&#xA;  password: !secret wifi_password&#xA;&#xA;  # Enable fallback hotspot (captive portal) in case wifi connection fails&#xA;  ap:&#xA;    ssid: &#34;${friendly_name} Fallback Hotspot&#34;&#xA;    password: !secret fallback_password&#xA;&#xA;# Note: if upgrading from 1.x releases of esphome-mitsubishiheatpump, be sure&#xA;# to remove any old entries from the `libraries` and `includes` section.&#xA;#libraries:&#xA;  # Remove reference to SwiCago/HeatPump&#xA;&#xA;#includes:&#xA;  # Remove reference to src/esphome-mitsubishiheatpump&#xA;&#xA;captive_portal:&#xA;&#xA;# Enable logging&#xA;logger:&#xA;  # ESP8266 only - disable serial port logging, as the HeatPump component&#xA;  # needs the sole hardware UART on the ESP8266&#xA;  baud_rate: 0&#xA;&#xA;# Enable Home Assistant API&#xA;api:&#xA;&#xA;ota:&#xA;&#xA;# Enable Web server.&#xA;web_server:&#xA;  port: 80&#xA;&#xA;  # Sync time with Home Assistant.&#xA;time:&#xA;  - platform: homeassistant&#xA;    id: homeassistant_time&#xA;&#xA;# Text sensors with general information.&#xA;text_sensor:&#xA;  # Expose ESPHome version as sensor.&#xA;  - platform: version&#xA;    name: ${name} ESPHome Version&#xA;  # Expose WiFi information as sensors.&#xA;  - platform: wifi_info&#xA;    ip_address:&#xA;      name: ${name} IP&#xA;    ssid:&#xA;      name: ${name} SSID&#xA;    bssid:&#xA;      name: ${name} BSSID&#xA;&#xA;# Sensors with general information.&#xA;sensor:&#xA;  # Uptime sensor.&#xA;  - platform: uptime&#xA;    name: ${name} Uptime&#xA;&#xA;  # WiFi Signal sensor.&#xA;  - platform: wifi_signal&#xA;    name: ${name} WiFi Signal&#xA;    update_interval: 60s&#xA;&#xA;external_components:&#xA;  - source: github://geoffdavis/esphome-mitsubishiheatpump&#xA;&#xA;climate:&#xA;  - platform: mitsubishi_heatpump&#xA;    name: &#34;${friendly_name}&#34;&#xA;&#xA;    # ESP32 only - change UART0 to UART1 or UART2 and remove the&#xA;    # logging:baud_rate above to allow the built-in UART0 to function for&#xA;    # logging.&#xA;    hardware_uart: UART0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Advanced configuration&lt;/h1&gt; &#xA;&lt;p&gt;Some models of heat pump require different baud rates or don&#39;t support all possible modes of operation. You can configure mulitple climate &#34;traits&#34; in YAML to match what your hardware supports. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;climate:&#xA;  - platform: mitsubishi_heatpump&#xA;    name: &#34;My heat pump&#34;&#xA;    hardware_uart: UART2&#xA;    baud_rate: 9600&#xA;    supports:&#xA;      mode: [HEAT_COOL, COOL, HEAT, FAN_ONLY]&#xA;      fan_mode: [AUTO, LOW, MEDIUM, HIGH]&#xA;      swing_mode: [OFF, VERTICAL]&#xA;    visual:&#xA;      min_temperature: 16&#xA;      max_temperature: 31&#xA;      temperature_step: 1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration variables that affect this library directly&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;hardware_uart&lt;/em&gt; (&lt;em&gt;Optional&lt;/em&gt;): the hardware UART instance to use for communcation with the heatpump. On ESP8266, only &lt;code&gt;UART0&lt;/code&gt; is usable. On ESP32, &lt;code&gt;UART0&lt;/code&gt;, &lt;code&gt;UART1&lt;/code&gt;, and &lt;code&gt;UART2&lt;/code&gt; are all valid choices. Default: &lt;code&gt;UART0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;baud_rate&lt;/em&gt; (&lt;em&gt;Optional&lt;/em&gt;): Serial BAUD rate used to communicate with the HeatPump. Most systems use the default value of &lt;code&gt;4800&lt;/code&gt; baud, but some use &lt;code&gt;9600&lt;/code&gt;. Default: &lt;code&gt;4800&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;update_interval&lt;/em&gt; (&lt;em&gt;Optional&lt;/em&gt;, range: 0ms to 9000ms): How often this component polls the heatpump hardware, in milliseconds. Maximum usable value is 9 seconds due to underlying issues with the HeatPump library. Default: 500ms&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;supports&lt;/em&gt; (&lt;em&gt;Optional&lt;/em&gt;): Supported features for the device. ** &lt;em&gt;mode&lt;/em&gt; (&lt;em&gt;Optional&lt;/em&gt;, list): Supported climate modes for the HeatPump. Default: &lt;code&gt;[&#39;HEAT_COOL&#39;, &#39;COOL&#39;, &#39;HEAT&#39;, &#39;DRY&#39;, &#39;FAN_ONLY&#39;]&lt;/code&gt; ** &lt;em&gt;fan_mode&lt;/em&gt; (&lt;em&gt;Optional&lt;/em&gt;, list): Supported fan speeds for the HeatPump. Default: &lt;code&gt;[&#39;AUTO&#39;, &#39;DIFFUSE&#39;, &#39;LOW&#39;, &#39;MEDIUM&#39;, &#39;MIDDLE&#39;, &#39;HIGH&#39;]&lt;/code&gt; ** &lt;em&gt;swing_mode&lt;/em&gt; (&lt;em&gt;Optional&lt;/em&gt;, list): Supported fan swing modes. Most Mitsubishi units only support the default. Default: &lt;code&gt;[&#39;OFF&#39;, &#39;VERTICAL&#39;]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;id&lt;/em&gt; (&lt;em&gt;Optional&lt;/em&gt;): used to identify multiple instances, e.g. &#34;denheatpump&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;name&lt;/em&gt; (&lt;em&gt;Required&lt;/em&gt;): The name of the climate component, e.g. &#34;Den Heatpump&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;visual&lt;/em&gt; (&lt;em&gt;Optional&lt;/em&gt;): The core &lt;code&gt;Climate&lt;/code&gt; component has several &lt;em&gt;visual&lt;/em&gt; options that can be set. See the &lt;a href=&#34;https://esphome.io/components/climate/index.html&#34;&gt;Climate Component&lt;/a&gt; documentation for details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Remote temperature&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to use an external temperature sensor to tell the heat pump what the room temperature is, rather than relying on its internal temperature sensor. You can do this by calling &lt;code&gt;set_remote_temperature(float temp)&lt;/code&gt; on the &lt;code&gt;mitsubishi_heatpump&lt;/code&gt; object in a lambda. Note that you can call &lt;code&gt;set_remote_temperature(0)&lt;/code&gt; to switch back to the internal temperature sensor.&lt;/p&gt; &#xA;&lt;p&gt;There are several ways you could make use of this functionality. One is to use a sensor automation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;climate:&#xA;  - platform: mitsubishi_heatpump&#xA;    name: &#34;Lounge heat pump&#34;&#xA;    id: hp&#xA;&#xA;sensor:&#xA;  # You could use a Bluetooth temperature sensor&#xA;  - platform: atc_mithermometer&#xA;    mac_address: &#34;XX:XX:XX:XX:XX:XX&#34;&#xA;    temperature:&#xA;      name: &#34;Lounge temperature&#34;&#xA;      on_value:&#xA;        then:&#xA;          - lambda: &#39;id(hp).set_remote_temperature(x);&#39;&#xA;&#xA;  # Or you could use a HomeAssistant sensor&#xA;  - platform: homeassistant&#xA;    name: &#34;Temperature Sensor From Home Assistant&#34;&#xA;    entity_id: sensor.temperature_sensor&#xA;    on_value:&#xA;      then:&#xA;        - lambda: &#39;id(hp).set_remote_temperature(x);&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you could define a &lt;a href=&#34;https://www.esphome.io/components/api.html#user-defined-services&#34;&gt;service&lt;/a&gt; that HomeAssistant can call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;api:&#xA;  services:&#xA;    - service: set_remote_temperature&#xA;      variables:&#xA;        temperature: float&#xA;      then:&#xA;        - lambda: &#39;id(hp).set_remote_temperature(temperature);&#39;&#xA;&#xA;    - service: use_internal_temperature&#xA;      then:&#xA;        - lambda: &#39;id(hp).set_remote_temperature(0);&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;See Also&lt;/h1&gt; &#xA;&lt;h2&gt;Other Implementations&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/gysmo38/mitsubishi2MQTT&#34;&gt;gysmo38/mitsubishi2MQTT&lt;/a&gt; Arduino sketch also uses the &lt;code&gt;SwiCago/HeatPump&lt;/code&gt; library, and works with MQTT directly. The author of this implementation found &lt;code&gt;mitsubishi2MQTT&lt;/code&gt;&#39;s WiFi stack to not be particularly robust, but the controls worked fine. Like this ESPHome repository, &lt;code&gt;mitsubishi2MQTT&lt;/code&gt; will automatically register the device in your HomeAssistant instance if you have HA configured to do so.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also the built-in to ESPHome &lt;a href=&#34;https://github.com/esphome/esphome/raw/dev/esphome/components/mitsubishi/mitsubishi.h&#34;&gt;Mitsubishi&lt;/a&gt; climate component. The big drawback with the built-in component is that it uses Infrared Remote commands to talk to the Heat Pump. By contrast, the approach used by this repository and it&#39;s underlying &lt;code&gt;HeatPump&lt;/code&gt; library allows bi-directional communication with the Mitsubishi system, and can detect when someone changes the settings via an IR remote.&lt;/p&gt; &#xA;&lt;h2&gt;Reference documentation&lt;/h2&gt; &#xA;&lt;p&gt;The author referred to the following documentation repeatedly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://esphome.io/components/sensor/custom.html&#34;&gt;ESPHome Custom Sensors Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://esphome.io/components/climate/custom.html&#34;&gt;ESPHome Custom Climate Components Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://esphome.io/components/external_components.html&#34;&gt;ESPHome External Components Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/esphome/esphome/tree/master/esphome/components/climate&#34;&gt;Source for ESPHome&#39;s Climate Component&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>