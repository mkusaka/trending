<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-18T01:31:05Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TheD1rkMtr/GithubC2</title>
    <updated>2023-02-18T01:31:05Z</updated>
    <id>tag:github.com,2023-02-18:/TheD1rkMtr/GithubC2</id>
    <link href="https://github.com/TheD1rkMtr/GithubC2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Github as C2 Demonstration , free API = free C2 Infrastructure&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GithubC2&lt;/h1&gt; &#xA;&lt;p&gt;Github as C2 Demonstration , free API = free C2 Infrastructure&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/110354855/192076474-3c1884f8-4a59-4944-b0d6-9dc59c7692f0.mp4&#34;&gt;https://user-images.githubusercontent.com/110354855/192076474-3c1884f8-4a59-4944-b0d6-9dc59c7692f0.mp4&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bupticybee/TexasSolver</title>
    <updated>2023-02-18T01:31:05Z</updated>
    <id>tag:github.com,2023-02-18:/bupticybee/TexasSolver</id>
    <link href="https://github.com/bupticybee/TexasSolver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üöÄ A very efficient Texas Holdem GTO solver ‚ô†Ô∏è‚ô•Ô∏è‚ô£Ô∏è‚ô¶Ô∏è&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CPP Texas Solver&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bupticybee/TexasSolver/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/bupticybee/TexasSolver?style=flat-square&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bupticybee/TexasSolver/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/bupticybee/TexasSolver?style=flat-square&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/github/bupticybee/TexasSolver/blob/console/TexasSolverTechDemo.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/TexasSolver/TexasSolver&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gitterHQ/gitter.png&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;README &lt;a href=&#34;https://raw.githubusercontent.com/bupticybee/TexasSolver/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/bupticybee/TexasSolver/master/README.zh-CN.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;A open sourced, extremely efficient Texas Hold&#39;em and short deck solver. See this &lt;a href=&#34;https://youtu.be/IsSJNz7sRmQ&#34;&gt;Introduction video&lt;/a&gt; for more. Supports Windows,MacOs and Linux.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bupticybee/TexasSolver/master/imgs/solver_example.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In a tree with 1~2bets + allin, it&#39;s speed exceeds piosolver on flop&lt;/li&gt; &#xA; &lt;li&gt;Support Mac, Linux and Windows&lt;/li&gt; &#xA; &lt;li&gt;Support texas holdem and shortdeck&lt;/li&gt; &#xA; &lt;li&gt;Support cross language calls&lt;/li&gt; &#xA; &lt;li&gt;Result aliged with piosolver&lt;/li&gt; &#xA; &lt;li&gt;Support dump strategy to json file&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s the c++ version of &lt;a href=&#34;https://github.com/bupticybee/TexasHoldemSolverJava&#34;&gt;TexasHoldemSolverJava&lt;/a&gt; with a ton of optimization, it&#39;s 5x faster than the java version and takes less than 1/3 memory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feel free to mess with a toy solver &lt;a href=&#34;https://colab.research.google.com/github/bupticybee/TexasSolver/blob/console/TexasSolverTechDemo.ipynb&#34;&gt;in google colab&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Download package according to your OS in &lt;a href=&#34;https://github.com/bupticybee/TexasSolver/releases&#34;&gt;release package&lt;/a&gt;, unzip it, and install is done. It&#39;s that simple.&lt;/p&gt; &#xA;&lt;h2&gt;GUI version Usage&lt;/h2&gt; &#xA;&lt;p&gt;After install the solver, double click the application binary (TexasSolverGui.exe in windows or TexasSolverGui.app in MacOS) to run TexasSolver.&lt;/p&gt; &#xA;&lt;h2&gt;Console version Usage&lt;/h2&gt; &#xA;&lt;p&gt;Please check &lt;a href=&#34;https://github.com/bupticybee/TexasSolver/tree/console#usage&#34;&gt;console version document&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h2&gt;Speed benchmark with piosolver&lt;/h2&gt; &#xA;&lt;p&gt;Piosolver and my TexasSolver(console version) run use the same settings (spr=10,flop game) and their result are aligned.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Input config&lt;/th&gt; &#xA;   &lt;th&gt;log&lt;/th&gt; &#xA;   &lt;th&gt;thread number&lt;/th&gt; &#xA;   &lt;th&gt;memory usage&lt;/th&gt; &#xA;   &lt;th&gt;accuracy&lt;/th&gt; &#xA;   &lt;th&gt;converge time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;piosolver 1.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bupticybee/TexasSolver/master/benchmark/benchmark_piosolver.txt&#34;&gt;config_piosolver&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bupticybee/TexasSolver/master/benchmark/benchmark_outputs/piosolver_log.txt&#34;&gt;log_piosolver&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;492Mb&lt;/td&gt; &#xA;   &lt;td&gt;0.29%&lt;/td&gt; &#xA;   &lt;td&gt;242s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TexasSolver 0.1.0 (Our solver)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bupticybee/TexasSolver/master/benchmark/benchmark_texassolver.txt&#34;&gt;config_texassolver&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bupticybee/TexasSolver/master/benchmark/benchmark_outputs/texassolver_log.txt&#34;&gt;log_texassolver&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;1600Mb&lt;/td&gt; &#xA;   &lt;td&gt;0.275%&lt;/td&gt; &#xA;   &lt;td&gt;172s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The compare image of their results is &lt;a href=&#34;https://raw.githubusercontent.com/bupticybee/TexasSolver/master/benchmark/benchmark_outputs/result_compair.png&#34;&gt;here&lt;/a&gt;. As you can see their result are very close.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0.en.html&#34;&gt;GNU AGPL v3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Email&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:icybee@yeah.net&#34;&gt;icybee@yeah.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Q &amp;amp; As&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: Is the solver really free?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A: Yes, for personal users, the solver is completely opensourced and free.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: Can I upload it to other websites or forums? Can I share it with my friend?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A: No, you can only put the link of this project to other website, not the binary, this project is under AGPL-V3 license, and these kind of action violates this license.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: Can I intergate it to my software?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A: If you intergate the release package(binary) into your software, Yes, you can do that. If you want to intergate the code of the solver into your software or provide service through internet, then you need to contact me for a commercial license, which is also the main profit-making method of this project.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: What framework do you use to write the ui?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A: I use QT 5.1.0 (opensourced edition) to build the GUI version. For the console version, I use Mingw + CMake.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>swoole/swoole-src</title>
    <updated>2023-02-18T01:31:05Z</updated>
    <id>tag:github.com,2023-02-18:/swoole/swoole-src</id>
    <link href="https://github.com/swoole/swoole-src" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üöÄ Coroutine-based concurrency library for PHP&lt;/p&gt;&lt;hr&gt;&lt;h2 align=&#34;center&#34;&gt; &lt;img width=&#34;200&#34; height=&#34;120&#34; alt=&#34;Swoole Logo&#34; src=&#34;https://raw.githubusercontent.com/swoole/swoole-src/master/docs/swoole-logo.svg?sanitize=true&#34;&gt; &lt;br&gt; Swoole is an event-driven, asynchronous, coroutine-based concurrency library with high performance for PHP. &lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/swoole/swoole-src/actions?query=workflow%3Alib-swoole&#34;&gt;&lt;img src=&#34;https://github.com/swoole/swoole-src/workflows/lib-swoole/badge.svg?sanitize=true&#34; alt=&#34;lib-swoole&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/swoole/swoole-src/actions?query=workflow%3Aext-swoole&#34;&gt;&lt;img src=&#34;https://github.com/swoole/swoole-src/workflows/ext-swoole/badge.svg?sanitize=true&#34; alt=&#34;ext-swoole&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/swoole/swoole-src/actions?query=workflow%3Atest-linux&#34;&gt;&lt;img src=&#34;https://github.com/swoole/swoole-src/workflows/test-linux/badge.svg?sanitize=true&#34; alt=&#34;test-linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/swoole/swoole-src/actions/workflows/framework.yml&#34;&gt;&lt;img src=&#34;https://github.com/swoole/swoole-src/actions/workflows/framework.yml/badge.svg?sanitize=true&#34; alt=&#34;Frameworks Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/swoole/swoole-src&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/swoole/swoole-src/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/phpswoole&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/twitter?icon=twitter&amp;amp;label&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.swoole.dev&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/discord?icon=discord&amp;amp;label&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/swoole/swoole-src/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/swoole/swoole-src.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/swoole/swoole-src/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/swoole/swoole-src&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/swoole-swoole-src&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/11654/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Run Swoole program by &lt;a href=&#34;https://github.com/swoole/docker-swoole&#34;&gt;Docker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm phpswoole/swoole &#34;php --ri swoole&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For details on how to use it, see: &lt;a href=&#34;https://github.com/swoole/docker-swoole#how-to-use-this-image&#34;&gt;How to Use This Image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;HTTP Service&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$http = new Swoole\Http\Server(&#39;127.0.0.1&#39;, 9501);&#xA;$http-&amp;gt;set([&#39;hook_flags&#39; =&amp;gt; SWOOLE_HOOK_ALL]);&#xA;&#xA;$http-&amp;gt;on(&#39;request&#39;, function ($request, $response) {&#xA;    $result = [];&#xA;    Co::join([&#xA;        go(function () use (&amp;amp;$result) {&#xA;            $result[&#39;google&#39;] = file_get_contents(&#34;https://www.google.com/&#34;);&#xA;        }),&#xA;        go(function () use (&amp;amp;$result) {&#xA;            $result[&#39;taobao&#39;] = file_get_contents(&#34;https://www.taobao.com/&#34;);&#xA;        })&#xA;    ]);&#xA;    $response-&amp;gt;end(json_encode($result));&#xA;});&#xA;&#xA;$http-&amp;gt;start();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Concurrency&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Co\run(function() {&#xA;    Co\go(function() {&#xA;        while(1) {&#xA;            sleep(1);&#xA;            $fp = stream_socket_client(&#34;tcp://127.0.0.1:8000&#34;, $errno, $errstr, 30);&#xA;            echo fread($fp, 8192), PHP_EOL;&#xA;        }&#xA;    });&#xA;&#xA;    Co\go(function() {&#xA;        $fp = stream_socket_server(&#34;tcp://0.0.0.0:8000&#34;, $errno, $errstr, STREAM_SERVER_BIND | STREAM_SERVER_LISTEN);&#xA;        while(1) {&#xA;            $conn = stream_socket_accept($fp);&#xA;            fwrite($conn, &#39;The local time is &#39; . date(&#39;n/j/Y g:i a&#39;));&#xA;        }&#xA;    });&#xA;&#xA;    Co\go(function() {&#xA;        $redis = new Redis();&#xA;        $redis-&amp;gt;connect(&#39;127.0.0.1&#39;, 6379);&#xA;        while(true) {&#xA;            $redis-&amp;gt;subscribe([&#39;test&#39;], function ($instance, $channelName, $message) {&#xA;                echo &#39;New redis message: &#39;.$channelName, &#34;==&amp;gt;&#34;, $message, PHP_EOL;&#xA;            });&#xA;        }&#xA;    });&#xA;&#xA;    Co\go(function() {&#xA;        $redis = new Redis();&#xA;        $redis-&amp;gt;connect(&#39;127.0.0.1&#39;, 6379);&#xA;        $count = 0;&#xA;        while(true) {&#xA;            sleep(2);&#xA;            $redis-&amp;gt;publish(&#39;test&#39;,&#39;hello, world, count=&#39;.$count++);&#xA;        }&#xA;    });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Runtime Hook&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swoole hooks the blocking io function of PHP at the &lt;code&gt;bottom layer&lt;/code&gt; and &lt;code&gt;automatically&lt;/code&gt; converts it to a non-blocking function, so that these functions can be called concurrently in coroutines.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Supported extension/functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ext-redis&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ext-mysqli&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ext-pdo_mysql&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ext-curl&lt;/code&gt; (Support &lt;code&gt;symfony&lt;/code&gt; or &lt;code&gt;guzzle&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stream functions&lt;/code&gt; (e.g. &lt;code&gt;stream_socket_client&lt;/code&gt;/&lt;code&gt;stream_socket_server&lt;/code&gt;), Supports &lt;code&gt;TCP&lt;/code&gt;/&lt;code&gt;UDP&lt;/code&gt;/&lt;code&gt;UDG&lt;/code&gt;/&lt;code&gt;Unix&lt;/code&gt;/&lt;code&gt;SSL/TLS&lt;/code&gt;/&lt;code&gt;FileSystem API&lt;/code&gt;/&lt;code&gt;Pipe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ext-socket&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ext-soap&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sleep&lt;/code&gt;/&lt;code&gt;usleep&lt;/code&gt;/&lt;code&gt;time_sleep_until&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proc_open&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gethostbyname&lt;/code&gt;/&lt;code&gt;shell_exec&lt;/code&gt;/&lt;code&gt;exec&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fread&lt;/code&gt;/&lt;code&gt;fopen&lt;/code&gt;/&lt;code&gt;fsockopen&lt;/code&gt;/&lt;code&gt;fwrite&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üõ† Develop &amp;amp; Discussion&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;IDE Helper &amp;amp; API&lt;/strong&gt;: &lt;a href=&#34;https://github.com/swoole/ide-helper&#34;&gt;https://github.com/swoole/ide-helper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Twitter&lt;/strong&gt;: &lt;a href=&#34;https://twitter.com/phpswoole&#34;&gt;https://twitter.com/phpswoole&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Discord&lt;/strong&gt;: &lt;a href=&#34;https://discord.swoole.dev&#34;&gt;https://discord.swoole.dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;‰∏≠ÊñáÊñáÊ°£&lt;/strong&gt;: &lt;a href=&#34;https://wiki.swoole.com&#34;&gt;https://wiki.swoole.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;‰∏≠ÊñáÁ§æÂå∫&lt;/strong&gt;: &lt;a href=&#34;https://wiki.swoole.com/#/other/discussion&#34;&gt;https://wiki.swoole.com/#/other/discussion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üíé Awesome Swoole&lt;/h2&gt; &#xA;&lt;p&gt;Project &lt;a href=&#34;https://github.com/swoole/awesome-swoole&#34;&gt;Awesome Swoole&lt;/a&gt; maintains a curated list of awesome things related to Swoole, including&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swoole-based frameworks and libraries.&lt;/li&gt; &#xA; &lt;li&gt;Packages to integrate Swoole with popular PHP frameworks, including Laravel, Symfony, Slim, and Yii.&lt;/li&gt; &#xA; &lt;li&gt;Books, videos, and other learning materials about Swoole.&lt;/li&gt; &#xA; &lt;li&gt;Debugging, profiling, and testing tools for developing Swoole-based applications.&lt;/li&gt; &#xA; &lt;li&gt;Coroutine-friendly packages and libraries.&lt;/li&gt; &#xA; &lt;li&gt;Other Swoole related projects and resources.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ú® Event-based&lt;/h2&gt; &#xA;&lt;p&gt;The network layer in Swoole is event-based and takes full advantage of the underlying epoll/kqueue implementation, making it really easy to serve millions of requests.&lt;/p&gt; &#xA;&lt;p&gt;Swoole 4.x uses a brand new engine kernel and now it has a full-time developer team, so we are entering an unprecedented period in PHP history which offers a unique possibility for rapid evolution in performance.&lt;/p&gt; &#xA;&lt;h2&gt;‚ö° Coroutine&lt;/h2&gt; &#xA;&lt;p&gt;Swoole 4.x or later supports the built-in coroutine with high availability, and you can use fully synchronized code to implement asynchronous performance. PHP code without any additional keywords, the underlying automatic coroutine-scheduling.&lt;/p&gt; &#xA;&lt;p&gt;Developers can understand coroutines as ultra-lightweight threads, and you can easily create thousands of coroutines in a single process.&lt;/p&gt; &#xA;&lt;h3&gt;MySQL&lt;/h3&gt; &#xA;&lt;p&gt;Concurrency 10K requests to read data from MySQL takes only 0.2s!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$s = microtime(true);&#xA;Co\run(function() {&#xA;    for ($c = 100; $c--;) {&#xA;        go(function () {&#xA;            $mysql = new Swoole\Coroutine\MySQL;&#xA;            $mysql-&amp;gt;connect([&#xA;                &#39;host&#39; =&amp;gt; &#39;127.0.0.1&#39;,&#xA;                &#39;user&#39; =&amp;gt; &#39;root&#39;,&#xA;                &#39;password&#39; =&amp;gt; &#39;root&#39;,&#xA;                &#39;database&#39; =&amp;gt; &#39;test&#39;&#xA;            ]);&#xA;            $statement = $mysql-&amp;gt;prepare(&#39;SELECT * FROM `user`&#39;);&#xA;            for ($n = 100; $n--;) {&#xA;                $result = $statement-&amp;gt;execute();&#xA;                assert(count($result) &amp;gt; 0);&#xA;            }&#xA;        });&#xA;    }&#xA;});&#xA;echo &#39;use &#39; . (microtime(true) - $s) . &#39; s&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mixed server&lt;/h3&gt; &#xA;&lt;p&gt;You can create multiple services on the single event loop: TCP, HTTP, Websocket and HTTP2, and easily handle thousands of requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function tcp_pack(string $data): string&#xA;{&#xA;    return pack(&#39;N&#39;, strlen($data)) . $data;&#xA;}&#xA;function tcp_unpack(string $data): string&#xA;{&#xA;    return substr($data, 4, unpack(&#39;N&#39;, substr($data, 0, 4))[1]);&#xA;}&#xA;$tcp_options = [&#xA;    &#39;open_length_check&#39; =&amp;gt; true,&#xA;    &#39;package_length_type&#39; =&amp;gt; &#39;N&#39;,&#xA;    &#39;package_length_offset&#39; =&amp;gt; 0,&#xA;    &#39;package_body_offset&#39; =&amp;gt; 4&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$server = new Swoole\WebSocket\Server(&#39;127.0.0.1&#39;, 9501, SWOOLE_BASE);&#xA;$server-&amp;gt;set([&#39;open_http2_protocol&#39; =&amp;gt; true]);&#xA;// http &amp;amp;&amp;amp; http2&#xA;$server-&amp;gt;on(&#39;request&#39;, function (Swoole\Http\Request $request, Swoole\Http\Response $response) {&#xA;    $response-&amp;gt;end(&#39;Hello &#39; . $request-&amp;gt;rawcontent());&#xA;});&#xA;// websocket&#xA;$server-&amp;gt;on(&#39;message&#39;, function (Swoole\WebSocket\Server $server, Swoole\WebSocket\Frame $frame) {&#xA;    $server-&amp;gt;push($frame-&amp;gt;fd, &#39;Hello &#39; . $frame-&amp;gt;data);&#xA;});&#xA;// tcp&#xA;$tcp_server = $server-&amp;gt;listen(&#39;127.0.0.1&#39;, 9502, SWOOLE_TCP);&#xA;$tcp_server-&amp;gt;set($tcp_options);&#xA;$tcp_server-&amp;gt;on(&#39;receive&#39;, function (Swoole\Server $server, int $fd, int $reactor_id, string $data) {&#xA;    $server-&amp;gt;send($fd, tcp_pack(&#39;Hello &#39; . tcp_unpack($data)));&#xA;});&#xA;$server-&amp;gt;start();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Coroutine clients&lt;/h3&gt; &#xA;&lt;p&gt;Whether you DNS query or send requests or receive responses, all of these are scheduled by coroutine automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;go(function () {&#xA;    // http&#xA;    $http_client = new Swoole\Coroutine\Http\Client(&#39;127.0.0.1&#39;, 9501);&#xA;    assert($http_client-&amp;gt;post(&#39;/&#39;, &#39;Swoole Http&#39;));&#xA;    var_dump($http_client-&amp;gt;body);&#xA;    // websocket&#xA;    $http_client-&amp;gt;upgrade(&#39;/&#39;);&#xA;    $http_client-&amp;gt;push(&#39;Swoole Websocket&#39;);&#xA;    var_dump($http_client-&amp;gt;recv()-&amp;gt;data);&#xA;});&#xA;go(function () {&#xA;    // http2&#xA;    $http2_client = new Swoole\Coroutine\Http2\Client(&#39;localhost&#39;, 9501);&#xA;    $http2_client-&amp;gt;connect();&#xA;    $http2_request = new Swoole\Http2\Request;&#xA;    $http2_request-&amp;gt;method = &#39;POST&#39;;&#xA;    $http2_request-&amp;gt;data = &#39;Swoole Http2&#39;;&#xA;    $http2_client-&amp;gt;send($http2_request);&#xA;    $http2_response = $http2_client-&amp;gt;recv();&#xA;    var_dump($http2_response-&amp;gt;data);&#xA;});&#xA;go(function () use ($tcp_options) {&#xA;    // tcp&#xA;    $tcp_client = new Swoole\Coroutine\Client(SWOOLE_TCP);&#xA;    $tcp_client-&amp;gt;set($tcp_options);&#xA;    $tcp_client-&amp;gt;connect(&#39;127.0.0.1&#39;, 9502);&#xA;    $tcp_client-&amp;gt;send(tcp_pack(&#39;Swoole Tcp&#39;));&#xA;    var_dump(tcp_unpack($tcp_client-&amp;gt;recv()));&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Channel&lt;/h3&gt; &#xA;&lt;p&gt;Channel is the only way for exchanging data between coroutines, the development combination of the &lt;code&gt;Coroutine + Channel&lt;/code&gt; is the famous CSP programming model.&lt;/p&gt; &#xA;&lt;p&gt;In Swoole development, Channel is usually used for implementing connection pool or scheduling coroutine concurrent.&lt;/p&gt; &#xA;&lt;h4&gt;The simplest example of a connection pool&lt;/h4&gt; &#xA;&lt;p&gt;In the following example, we have a thousand concurrently requests to redis. Normally, this has exceeded the maximum number of Redis connections setting and will throw a connection exception, but the connection pool based on Channel can perfectly schedule requests. We don&#39;t have to worry about connection overload.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class RedisPool&#xA;{&#xA;    /**@var \Swoole\Coroutine\Channel */&#xA;    protected $pool;&#xA;&#xA;    /**&#xA;     * RedisPool constructor.&#xA;     * @param int $size max connections&#xA;     */&#xA;    public function __construct(int $size = 100)&#xA;    {&#xA;        $this-&amp;gt;pool = new \Swoole\Coroutine\Channel($size);&#xA;        for ($i = 0; $i &amp;lt; $size; $i++) {&#xA;            $redis = new \Swoole\Coroutine\Redis();&#xA;            $res = $redis-&amp;gt;connect(&#39;127.0.0.1&#39;, 6379);&#xA;            if ($res == false) {&#xA;                throw new \RuntimeException(&#34;failed to connect redis server.&#34;);&#xA;            } else {&#xA;                $this-&amp;gt;put($redis);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    public function get(): \Swoole\Coroutine\Redis&#xA;    {&#xA;        return $this-&amp;gt;pool-&amp;gt;pop();&#xA;    }&#xA;&#xA;    public function put(\Swoole\Coroutine\Redis $redis)&#xA;    {&#xA;        $this-&amp;gt;pool-&amp;gt;push($redis);&#xA;    }&#xA;&#xA;    public function close(): void&#xA;    {&#xA;        $this-&amp;gt;pool-&amp;gt;close();&#xA;        $this-&amp;gt;pool = null;&#xA;    }&#xA;}&#xA;&#xA;go(function () {&#xA;    $pool = new RedisPool();&#xA;    // max concurrency num is more than max connections&#xA;    // but it&#39;s no problem, channel will help you with scheduling&#xA;    for ($c = 0; $c &amp;lt; 1000; $c++) {&#xA;        go(function () use ($pool, $c) {&#xA;            for ($n = 0; $n &amp;lt; 100; $n++) {&#xA;                $redis = $pool-&amp;gt;get();&#xA;                assert($redis-&amp;gt;set(&#34;awesome-{$c}-{$n}&#34;, &#39;swoole&#39;));&#xA;                assert($redis-&amp;gt;get(&#34;awesome-{$c}-{$n}&#34;) === &#39;swoole&#39;);&#xA;                assert($redis-&amp;gt;delete(&#34;awesome-{$c}-{$n}&#34;));&#xA;                $pool-&amp;gt;put($redis);&#xA;            }&#xA;        });&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Producer and consumers&lt;/h4&gt; &#xA;&lt;p&gt;Some Swoole&#39;s clients implement the defer mode for concurrency, but you can still implement it flexible with a combination of coroutines and channels.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;go(function () {&#xA;    // User: I need you to bring me some information back.&#xA;    // Channel: OK! I will be responsible for scheduling.&#xA;    $channel = new Swoole\Coroutine\Channel;&#xA;    go(function () use ($channel) {&#xA;        // Coroutine A: Ok! I will show you the github addr info&#xA;        $addr_info = Co::getaddrinfo(&#39;github.com&#39;);&#xA;        $channel-&amp;gt;push([&#39;A&#39;, json_encode($addr_info, JSON_PRETTY_PRINT)]);&#xA;    });&#xA;    go(function () use ($channel) {&#xA;        // Coroutine B: Ok! I will show you what your code look like&#xA;        $mirror = Co::readFile(__FILE__);&#xA;        $channel-&amp;gt;push([&#39;B&#39;, $mirror]);&#xA;    });&#xA;    go(function () use ($channel) {&#xA;        // Coroutine C: Ok! I will show you the date&#xA;        $channel-&amp;gt;push([&#39;C&#39;, date(DATE_W3C)]);&#xA;    });&#xA;    for ($i = 3; $i--;) {&#xA;        list($id, $data) = $channel-&amp;gt;pop();&#xA;        echo &#34;From {$id}:\n {$data}\n&#34;;&#xA;    }&#xA;    // User: Amazing, I got every information at earliest time!&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Timer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$id = Swoole\Timer::tick(100, function () {&#xA;    echo &#34;‚öôÔ∏è Do something...\n&#34;;&#xA;});&#xA;Swoole\Timer::after(500, function () use ($id) {&#xA;    Swoole\Timer::clear($id);&#xA;    echo &#34;‚è∞ Done\n&#34;;&#xA;});&#xA;Swoole\Timer::after(1000, function () use ($id) {&#xA;    if (!Swoole\Timer::exists($id)) {&#xA;        echo &#34;‚úÖ All right!\n&#34;;&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;The way of coroutine&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;go(function () {&#xA;    $i = 0;&#xA;    while (true) {&#xA;        Co::sleep(0.1);&#xA;        echo &#34;üìù Do something...\n&#34;;&#xA;        if (++$i === 5) {&#xA;            echo &#34;üõé Done\n&#34;;&#xA;            break;&#xA;        }&#xA;    }&#xA;    echo &#34;üéâ All right!\n&#34;;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üî• Amazing runtime hooks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;As of Swoole v4.1.0, we added the ability to transform synchronous PHP network libraries into co-routine libraries using a single line of code.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Simply call the &lt;code&gt;Swoole\Runtime::enableCoroutine()&lt;/code&gt; method at the top of your script. In the sample below we connect to php-redis and concurrently read 10k requests in 0.1s:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Swoole\Runtime::enableCoroutine();&#xA;$s = microtime(true);&#xA;Co\run(function() {&#xA;    for ($c = 100; $c--;) {&#xA;        go(function () {&#xA;            ($redis = new Redis)-&amp;gt;connect(&#39;127.0.0.1&#39;, 6379);&#xA;            for ($n = 100; $n--;) {&#xA;                assert($redis-&amp;gt;get(&#39;awesome&#39;) === &#39;swoole&#39;);&#xA;            }&#xA;        });&#xA;    }&#xA;});&#xA;echo &#39;use &#39; . (microtime(true) - $s) . &#39; s&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By calling this method, the Swoole kernel replaces ZendVM stream function pointers. If you use &lt;code&gt;php_stream&lt;/code&gt; based extensions, all socket operations can be dynamically converted to be asynchronous IO scheduled by coroutine at runtime!&lt;/p&gt; &#xA;&lt;h3&gt;How many things you can do in 1s?&lt;/h3&gt; &#xA;&lt;p&gt;Sleep 10K times, read, write, check and delete files 10K times, use PDO and MySQLi to communicate with the database 10K times, create a TCP server and multiple clients to communicate with each other 10K times, create a UDP server and multiple clients to communicate with each other 10K times... Everything works well in one process!&lt;/p&gt; &#xA;&lt;p&gt;Just see what the Swoole brings, just imagine...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Swoole\Runtime::enableCoroutine();&#xA;$s = microtime(true);&#xA;Co\run(function() {&#xA;    // i just want to sleep...&#xA;    for ($c = 100; $c--;) {&#xA;        go(function () {&#xA;            for ($n = 100; $n--;) {&#xA;                usleep(1000);&#xA;            }&#xA;        });&#xA;    }&#xA;&#xA;    // 10K file read and write&#xA;    for ($c = 100; $c--;) {&#xA;        go(function () use ($c) {&#xA;            $tmp_filename = &#34;/tmp/test-{$c}.php&#34;;&#xA;            for ($n = 100; $n--;) {&#xA;                $self = file_get_contents(__FILE__);&#xA;                file_put_contents($tmp_filename, $self);&#xA;                assert(file_get_contents($tmp_filename) === $self);&#xA;            }&#xA;            unlink($tmp_filename);&#xA;        });&#xA;    }&#xA;&#xA;    // 10K pdo and mysqli read&#xA;    for ($c = 50; $c--;) {&#xA;        go(function () {&#xA;            $pdo = new PDO(&#39;mysql:host=127.0.0.1;dbname=test;charset=utf8&#39;, &#39;root&#39;, &#39;root&#39;);&#xA;            $statement = $pdo-&amp;gt;prepare(&#39;SELECT * FROM `user`&#39;);&#xA;            for ($n = 100; $n--;) {&#xA;                $statement-&amp;gt;execute();&#xA;                assert(count($statement-&amp;gt;fetchAll()) &amp;gt; 0);&#xA;            }&#xA;        });&#xA;    }&#xA;    for ($c = 50; $c--;) {&#xA;        go(function () {&#xA;            $mysqli = new Mysqli(&#39;127.0.0.1&#39;, &#39;root&#39;, &#39;root&#39;, &#39;test&#39;);&#xA;            $statement = $mysqli-&amp;gt;prepare(&#39;SELECT `id` FROM `user`&#39;);&#xA;            for ($n = 100; $n--;) {&#xA;                $statement-&amp;gt;bind_result($id);&#xA;                $statement-&amp;gt;execute();&#xA;                $statement-&amp;gt;fetch();&#xA;                assert($id &amp;gt; 0);&#xA;            }&#xA;        });&#xA;    }&#xA;&#xA;    // php_stream tcp server &amp;amp; client with 12.8K requests in single process&#xA;    function tcp_pack(string $data): string&#xA;    {&#xA;        return pack(&#39;n&#39;, strlen($data)) . $data;&#xA;    }&#xA;&#xA;    function tcp_length(string $head): int&#xA;    {&#xA;        return unpack(&#39;n&#39;, $head)[1];&#xA;    }&#xA;&#xA;    go(function () {&#xA;        $ctx = stream_context_create([&#39;socket&#39; =&amp;gt; [&#39;so_reuseaddr&#39; =&amp;gt; true, &#39;backlog&#39; =&amp;gt; 128]]);&#xA;        $socket = stream_socket_server(&#xA;            &#39;tcp://0.0.0.0:9502&#39;,&#xA;            $errno, $errstr, STREAM_SERVER_BIND | STREAM_SERVER_LISTEN, $ctx&#xA;        );&#xA;        if (!$socket) {&#xA;            echo &#34;$errstr ($errno)\n&#34;;&#xA;        } else {&#xA;            $i = 0;&#xA;            while ($conn = stream_socket_accept($socket, 1)) {&#xA;                stream_set_timeout($conn, 5);&#xA;                for ($n = 100; $n--;) {&#xA;                    $data = fread($conn, tcp_length(fread($conn, 2)));&#xA;                    assert($data === &#34;Hello Swoole Server #{$n}!&#34;);&#xA;                    fwrite($conn, tcp_pack(&#34;Hello Swoole Client #{$n}!&#34;));&#xA;                }&#xA;                if (++$i === 128) {&#xA;                    fclose($socket);&#xA;                    break;&#xA;                }&#xA;            }&#xA;        }&#xA;    });&#xA;    for ($c = 128; $c--;) {&#xA;        go(function () {&#xA;            $fp = stream_socket_client(&#34;tcp://127.0.0.1:9502&#34;, $errno, $errstr, 1);&#xA;            if (!$fp) {&#xA;                echo &#34;$errstr ($errno)\n&#34;;&#xA;            } else {&#xA;                stream_set_timeout($fp, 5);&#xA;                for ($n = 100; $n--;) {&#xA;                    fwrite($fp, tcp_pack(&#34;Hello Swoole Server #{$n}!&#34;));&#xA;                    $data = fread($fp, tcp_length(fread($fp, 2)));&#xA;                    assert($data === &#34;Hello Swoole Client #{$n}!&#34;);&#xA;                }&#xA;                fclose($fp);&#xA;            }&#xA;        });&#xA;    }&#xA;&#xA;    // udp server &amp;amp; client with 12.8K requests in single process&#xA;    go(function () {&#xA;        $socket = new Swoole\Coroutine\Socket(AF_INET, SOCK_DGRAM, 0);&#xA;        $socket-&amp;gt;bind(&#39;127.0.0.1&#39;, 9503);&#xA;        $client_map = [];&#xA;        for ($c = 128; $c--;) {&#xA;            for ($n = 0; $n &amp;lt; 100; $n++) {&#xA;                $recv = $socket-&amp;gt;recvfrom($peer);&#xA;                $client_uid = &#34;{$peer[&#39;address&#39;]}:{$peer[&#39;port&#39;]}&#34;;&#xA;                $id = $client_map[$client_uid] = ($client_map[$client_uid] ?? -1) + 1;&#xA;                assert($recv === &#34;Client: Hello #{$id}!&#34;);&#xA;                $socket-&amp;gt;sendto($peer[&#39;address&#39;], $peer[&#39;port&#39;], &#34;Server: Hello #{$id}!&#34;);&#xA;            }&#xA;        }&#xA;        $socket-&amp;gt;close();&#xA;    });&#xA;    for ($c = 128; $c--;) {&#xA;        go(function () {&#xA;            $fp = stream_socket_client(&#34;udp://127.0.0.1:9503&#34;, $errno, $errstr, 1);&#xA;            if (!$fp) {&#xA;                echo &#34;$errstr ($errno)\n&#34;;&#xA;            } else {&#xA;                for ($n = 0; $n &amp;lt; 100; $n++) {&#xA;                    fwrite($fp, &#34;Client: Hello #{$n}!&#34;);&#xA;                    $recv = fread($fp, 1024);&#xA;                    list($address, $port) = explode(&#39;:&#39;, (stream_socket_get_name($fp, true)));&#xA;                    assert($address === &#39;127.0.0.1&#39; &amp;amp;&amp;amp; (int)$port === 9503);&#xA;                    assert($recv === &#34;Server: Hello #{$n}!&#34;);&#xA;                }&#xA;                fclose($fp);&#xA;            }&#xA;        });&#xA;    }&#xA;});&#xA;echo &#39;use &#39; . (microtime(true) - $s) . &#39; s&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚åõÔ∏è Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;As with any open source project, Swoole always provides the most reliable stability and the most powerful features in &lt;strong&gt;the latest released version&lt;/strong&gt;. Please ensure as much as possible that you are using the latest version.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Compiling requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux, OS X or Cygwin, WSL&lt;/li&gt; &#xA; &lt;li&gt;PHP 7.2.0 or later (The higher the version, the better the performance.)&lt;/li&gt; &#xA; &lt;li&gt;GCC 4.8 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1. Install via PECL (beginners)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pecl install swoole&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Install from source (recommended)&lt;/h3&gt; &#xA;&lt;p&gt;Please download the source packages from &lt;a href=&#34;https://github.com/swoole/swoole-src/releases&#34;&gt;Releases&lt;/a&gt; or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/swoole/swoole-src.git &amp;amp;&amp;amp; \&#xA;cd swoole-src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile and install at the source folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;phpize &amp;amp;&amp;amp; \&#xA;./configure &amp;amp;&amp;amp; \&#xA;make &amp;amp;&amp;amp; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Enable extension in PHP&lt;/h4&gt; &#xA;&lt;p&gt;After compiling and installing to the system successfully, you have to add a new line &lt;code&gt;extension=swoole.so&lt;/code&gt; to &lt;code&gt;php.ini&lt;/code&gt; to enable Swoole extension.&lt;/p&gt; &#xA;&lt;h4&gt;Extra compiler configurations&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;for example: &lt;code&gt;./configure --enable-openssl --enable-sockets&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-openssl&lt;/code&gt; or &lt;code&gt;--with-openssl-dir=DIR&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-sockets&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-mysqlnd&lt;/code&gt; (need mysqlnd, it just for supporting &lt;code&gt;$mysql-&amp;gt;escape&lt;/code&gt; method)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-swoole-curl&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Upgrade&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è If you upgrade from source, don&#39;t forget to &lt;code&gt;make clean&lt;/code&gt; before you upgrade your swoole&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;pecl upgrade swoole&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd swoole-src &amp;amp;&amp;amp; git pull &amp;amp;&amp;amp; make clean &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;if you change your PHP version, please re-run &lt;code&gt;phpize clean &amp;amp;&amp;amp; phpize&lt;/code&gt; then try to compile&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Major change since version 4.3.0&lt;/h3&gt; &#xA;&lt;p&gt;Async clients and API are moved to a separate PHP extension &lt;code&gt;swoole_async&lt;/code&gt; since version 4.3.0, install &lt;code&gt;swoole_async&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/swoole/ext-async.git&#xA;cd ext-async&#xA;phpize&#xA;./configure&#xA;make -j 4&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable it by adding a new line &lt;code&gt;extension=swoole_async.so&lt;/code&gt; to &lt;code&gt;php.ini&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üç≠ Benchmark&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On the open source &lt;a href=&#34;https://www.techempower.com/benchmarks/#section=data-r17&#34;&gt;Techempower Web Framework benchmarks&lt;/a&gt; Swoole used MySQL database benchmark to rank first, and all performance tests ranked in the first echelon.&lt;/li&gt; &#xA; &lt;li&gt;You can just run &lt;a href=&#34;https://github.com/swoole/benchmark/raw/master/benchmark.php&#34;&gt;Benchmark Script&lt;/a&gt; to quickly test the maximum QPS of Swoole-HTTP-Server on your machine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üî∞Ô∏è Security issues&lt;/h2&gt; &#xA;&lt;p&gt;Security issues should be reported privately, via email, to the Swoole develop team &lt;a href=&#34;mailto:team@swoole.com&#34;&gt;team@swoole.com&lt;/a&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message.&lt;/p&gt; &#xA;&lt;h2&gt;üñäÔ∏è Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Your contribution to Swoole development is very welcome!&lt;/p&gt; &#xA;&lt;p&gt;You may contribute in the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swoole/swoole-src/issues&#34;&gt;Report issues and feedback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Submit fixes, features via Pull Request&lt;/li&gt; &#xA; &lt;li&gt;Write/polish documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ù§Ô∏è Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://github.com/swoole/swoole-src/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;]. &lt;a href=&#34;https://github.com/swoole/swoole-src/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/swoole-src/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üéôÔ∏è Official Evangelist&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://deminy.in&#34;&gt;Demin&lt;/a&gt; has been playing with PHP since 2000, focusing on building high-performance, secure web services. He is an occasional conference speaker on PHP and Swoole, and has been working for companies in the states like eBay, Visa and Glu Mobile for years. You may find Demin on &lt;a href=&#34;https://twitter.com/deminy&#34;&gt;Twitter&lt;/a&gt; or &lt;a href=&#34;https://github.com/deminy&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üìÉ License&lt;/h2&gt; &#xA;&lt;p&gt;Apache License Version 2.0 see &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>