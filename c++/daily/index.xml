<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-09T01:31:01Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shajen/rtl-sdr-scanner-cpp</title>
    <updated>2023-02-09T01:31:01Z</updated>
    <id>tag:github.com,2023-02-09:/shajen/rtl-sdr-scanner-cpp</id>
    <link href="https://github.com/shajen/rtl-sdr-scanner-cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;This project contains sdr scanner written in &lt;code&gt;c++&lt;/code&gt; to &lt;strong&gt;scan and record multiple interesting frequencies bandwidth in the same time&lt;/strong&gt; (eg. 108 MHz, 144 MHz, 440 Mhz, etc). This is possible by switching quickly between frequencies bandwidth.&lt;/p&gt; &#xA;&lt;p&gt;Sdr scanner also allows you to record multiple transmissions simultaneously (if they are transmitted on the same band). For example, if one transmission is on 145.200 MHz and the other is on 145.600 MHz, the scanner will record and save both!&lt;/p&gt; &#xA;&lt;p&gt;It also provides easy but very powerful &lt;strong&gt;web panel&lt;/strong&gt; to explore recordings and spectrograms.&lt;/p&gt; &#xA;&lt;h1&gt;Supported devices&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rtl-sdr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HackRF&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Sample data collected&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=TSDbcb7wSjs&#34;&gt;YouTube video&lt;/a&gt; (old version)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Spectrogram&lt;/th&gt; &#xA;   &lt;th&gt;Transmission&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shajen/rtl-sdr-scanner-cpp/master/images/spectrograms.png?raw=1&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shajen/rtl-sdr-scanner-cpp/master/images/transmissions.png?raw=1&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shajen/rtl-sdr-scanner-cpp/master/images/spectrogram.png?raw=1&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shajen/rtl-sdr-scanner-cpp/master/images/transmission.png?raw=1&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;h2&gt;Install docker&lt;/h2&gt; &#xA;&lt;p&gt;If you do not have &lt;code&gt;docker&lt;/code&gt; installed, follow the instructions available at &lt;a href=&#34;https://docs.docker.com/desktop/&#34;&gt;https://docs.docker.com/desktop/&lt;/a&gt; to install &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;docker compose&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;p&gt;Download sample configuration and docker file, then run it. Customize &lt;code&gt;config.json&lt;/code&gt; to your needs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p sdr&#xA;cd sdr&#xA;wget https://github.com/shajen/rtl-sdr-scanner-cpp/raw/master/config.json&#xA;wget https://github.com/shajen/rtl-sdr-scanner-cpp/raw/master/docker-compose.yml&#xA;docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update docker images to latest version type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also remember to update &lt;code&gt;docker-compose.yml&lt;/code&gt; and &lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Panel&lt;/h2&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:8000/sdr/spectrograms/&#34;&gt;http://localhost:8000/sdr/spectrograms/&lt;/a&gt; and wait for data to collect.&lt;/p&gt; &#xA;&lt;p&gt;Admin panel available at &lt;a href=&#34;http://localhost:8000/admin/&#34;&gt;http://localhost:8000/admin/&lt;/a&gt;. Username: &lt;code&gt;admin&lt;/code&gt;, password: &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Important&lt;/h1&gt; &#xA;&lt;h2&gt;Blacklist kernel modules&lt;/h2&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;rtl-sdr&lt;/code&gt; remember to blacklist &lt;code&gt;rtl2832&lt;/code&gt; modules. Then reboot system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo nano /etc/modprobe.d/blacklist-rtl2832.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;blacklist rtl2832&#xA;blacklist dvb_usb_rtl28xxu&#xA;blacklist rtl2832_sdr&#xA;blacklist rtl8xxxu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Noise learner&lt;/h2&gt; &#xA;&lt;p&gt;To auto-detect transmissions, sdr scanner has to learn noise level every run. It takes first &lt;code&gt;n&lt;/code&gt; seconds (defined in &lt;code&gt;config.json&lt;/code&gt; as &lt;code&gt;noise_learning_time_seconds&lt;/code&gt; default is &lt;code&gt;30&lt;/code&gt; seconds). So if any transmission will appear in this period it&#39;s may not be detected by scanner later.&lt;/p&gt; &#xA;&lt;h2&gt;Torn transmissions detector&lt;/h2&gt; &#xA;&lt;p&gt;Sdr scanner has feature to avoid recording torn transmission like below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shajen/rtl-sdr-scanner-cpp/master/images/torn_transmission.png?raw=1&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It takes first &lt;code&gt;n&lt;/code&gt; seconds (defined in &lt;code&gt;config.json&lt;/code&gt; as &lt;code&gt;torn_transmission_learning_time_seconds&lt;/code&gt; default is &lt;code&gt;60&lt;/code&gt; seconds) seconds.&lt;/p&gt; &#xA;&lt;h2&gt;Auto-recording&lt;/h2&gt; &#xA;&lt;p&gt;So sdr scanner starts auto-recording transsmions after &lt;code&gt;noise_learning_time_seconds&lt;/code&gt; + &lt;code&gt;torn_transmission_learning_time_seconds&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Required resources&lt;/h2&gt; &#xA;&lt;p&gt;Using this software with &lt;code&gt;HackRF&lt;/code&gt; and &lt;code&gt;sample rate&lt;/code&gt; &lt;code&gt;10 MHz&lt;/code&gt; and above needs strong PC. In most casies, &lt;code&gt;Raspberry Pi&lt;/code&gt; will not be enough.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;HackRF&lt;/code&gt; with &lt;code&gt;sample rate&lt;/code&gt; &lt;code&gt;20 Mhz&lt;/code&gt; generates about &lt;code&gt;40 MB&lt;/code&gt; of data every second, and processing it in real-time needs a strong CPU with multiple cores and some memory resources.&lt;/p&gt; &#xA;&lt;h1&gt;Config&lt;/h1&gt; &#xA;&lt;p&gt;All of the following examples should be used in the &lt;code&gt;config.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;rtl-sdr&lt;/h2&gt; &#xA;&lt;h3&gt;single frequency range&lt;/h3&gt; &#xA;&lt;p&gt;To scan single frequency range:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;scanner_frequencies_ranges&#34;: [&#xA;    {&#xA;      &#34;device_serial&#34;: &#34;auto&#34;,&#xA;      &#34;ranges&#34;: [&#xA;        {&#xA;          &#34;start&#34;: 144000000,&#xA;          &#34;stop&#34;: 146000000,&#xA;          &#34;sample_rate&#34;: 2048000&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ppm and gain&lt;/h3&gt; &#xA;&lt;p&gt;To set &lt;code&gt;ppm&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;gain&lt;/code&gt; to &lt;code&gt;49.6&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;devices&#34;: {&#xA;    &#34;rtl_sdr&#34;: {&#xA;      &#34;ppm_error&#34;: 5,&#xA;      &#34;tuner_gain&#34;: 49.6,&#xA;      &#34;offset&#34;: 0&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HackRF&lt;/h2&gt; &#xA;&lt;h3&gt;single frequency range&lt;/h3&gt; &#xA;&lt;p&gt;To scan single frequency range:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;scanner_frequencies_ranges&#34;: [&#xA;    {&#xA;      &#34;device_serial&#34;: &#34;auto&#34;,&#xA;      &#34;ranges&#34;: [&#xA;        {&#xA;          &#34;start&#34;: 430000000,&#xA;          &#34;stop&#34;: 450000000,&#xA;          &#34;sample_rate&#34;: 20480000&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;gain&lt;/h3&gt; &#xA;&lt;p&gt;To set &lt;code&gt;lna&lt;/code&gt; to &lt;code&gt;16&lt;/code&gt; and &lt;code&gt;gain&lt;/code&gt; to &lt;code&gt;42&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;devices&#34;: {&#xA;    &#34;hack_rf&#34;: {&#xA;      &#34;lna_gain&#34;: 16,&#xA;      &#34;vga_gain&#34;: 42,&#xA;      &#34;offset&#34;: 0&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ignored frequencies&lt;/h2&gt; &#xA;&lt;p&gt;To ignore annoying frequency that you are not interested use &lt;code&gt;ignored_frequencies&lt;/code&gt;. For example to ignore frequency &lt;code&gt;144 Mhz&lt;/code&gt; with width &lt;code&gt;20 kHz&lt;/code&gt; and &lt;code&gt;145.350 Mhz&lt;/code&gt; with width &lt;code&gt;50 kHz&lt;/code&gt; use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;ignored_frequencies&#34;: [&#xA;    {&#xA;      &#34;frequency&#34;: 144000000,&#xA;      &#34;bandwidth&#34;: 20000&#xA;    },&#xA;    {&#xA;      &#34;frequency&#34;: 145350000,&#xA;      &#34;bandwidth&#34;: 50000&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use multipe devices&lt;/h2&gt; &#xA;&lt;p&gt;To use two dongles with serials &lt;code&gt;11111111&lt;/code&gt; and &lt;code&gt;22222222&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;scanner_frequencies_ranges&#34;: [&#xA;    {&#xA;      &#34;device_serial&#34;: &#34;11111111&#34;,&#xA;      &#34;ranges&#34;: [&#xA;        {&#xA;          &#34;start&#34;: 144000000,&#xA;          &#34;stop&#34;: 146000000,&#xA;          &#34;sample_rate&#34;: 2048000&#xA;        }&#xA;      ]&#xA;    },&#xA;    {&#xA;      &#34;device_serial&#34;: &#34;22222222&#34;,&#xA;      &#34;ranges&#34;: [&#xA;        {&#xA;          &#34;start&#34;: 440000000,&#xA;          &#34;stop&#34;: 442000000,&#xA;          &#34;sample_rate&#34;: 2048000&#xA;        }&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have multiple &lt;code&gt;rtl-sdr&lt;/code&gt; dongles with the same serial you can change it with &lt;code&gt;rtl_eeprom -s 12345678&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Scan multipe frequencies ranges&lt;/h2&gt; &#xA;&lt;p&gt;To scan &lt;code&gt;144 Mhz - 146 Mhz&lt;/code&gt; and &lt;code&gt;440 Mhz - 442 Mhz&lt;/code&gt; in the same time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;scanner_frequencies_ranges&#34;: [&#xA;    {&#xA;      &#34;device_serial&#34;: &#34;auto&#34;,&#xA;      &#34;ranges&#34;: [&#xA;        {&#xA;          &#34;start&#34;: 144000000,&#xA;          &#34;stop&#34;: 146000000,&#xA;          &#34;sample_rate&#34;: 2048000&#xA;        },&#xA;        {&#xA;          &#34;start&#34;: 440000000,&#xA;          &#34;stop&#34;: 442000000,&#xA;          &#34;sample_rate&#34;: 2048000&#xA;        }&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom fft&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to set custom fft on spectrogram.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;scanner_frequencies_ranges&#34;: [&#xA;    {&#xA;      &#34;device_serial&#34;: &#34;auto&#34;,&#xA;      &#34;ranges&#34;: [&#xA;        {&#xA;          &#34;start&#34;: 144000000,&#xA;          &#34;stop&#34;: 146000000,&#xA;          &#34;sample_rate&#34;: 2048000,&#xA;          &#34;fft&#34;: 16384&#xA;        }&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Debugging&lt;/h1&gt; &#xA;&lt;p&gt;If you have some problems with this software follow the steps to get debug log.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;&#34;console_log_level&#34;: &#34;trace&#34;&lt;/code&gt; in &lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then run app normally by &lt;code&gt;docker compose up&lt;/code&gt;. After the error run &lt;code&gt;docker compose logs &amp;gt; logs.txt&lt;/code&gt;. Please attach &lt;code&gt;logs.txt&lt;/code&gt; if you create a new issue. Do not paste logs directly to issue. Upload it to any file host service (&lt;a href=&#34;https://file.io/&#34;&gt;https://file.io/&lt;/a&gt;, &lt;a href=&#34;https://pastebin.com/&#34;&gt;https://pastebin.com/&lt;/a&gt; or any you like).&lt;/p&gt; &#xA;&lt;h1&gt;Timezone&lt;/h1&gt; &#xA;&lt;p&gt;If timezone detection not work correctly and it seems to use &lt;code&gt;UTC&lt;/code&gt; instead your timezone please set timezone in host system. To set &lt;code&gt;Europe/Warsaw&lt;/code&gt; type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#34;Europe/Warsaw&#34; &amp;gt; /etc/timezone&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Advanced usage&lt;/h1&gt; &#xA;&lt;h2&gt;Build from sources&lt;/h2&gt; &#xA;&lt;h3&gt;CMake&lt;/h3&gt; &#xA;&lt;p&gt;Build&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential cmake ccache libfftw3-dev libspdlog-dev librtlsdr-dev libhackrf-dev libliquid-dev nlohmann-json3-dev libmosquitto-dev libgtest-dev libgmock-dev libboost-all-dev&#xA;git clone https://github.com/shajen/rtl-sdr-scanner-cpp sdr-scanner&#xA;cd sdr-scanner&#xA;cmake -B build -DCMAKE_BUILD_TYPE=Release .&#xA;cmake --build build -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build/auto-sdr config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Build&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/shajen/rtl-sdr-scanner-cpp sdr-scanner&#xA;cd sdr-scanner&#xA;docker build -t shajen/sdr-scanner -f Dockerfile .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it -v ${PWD}/config.json:/config.json --device /dev/bus/usb:/dev/bus/usb shajen/sdr-scanner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Distributed application system&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to run every module (&lt;code&gt;sdr-broker&lt;/code&gt;, &lt;code&gt;sdr-scanner&lt;/code&gt; and &lt;code&gt;sdr-monitor&lt;/code&gt;) on different machines and connect them. Please familiar with &lt;a href=&#34;https://raw.githubusercontent.com/shajen/rtl-sdr-scanner-cpp/master/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt; to do it.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;In general don&#39;t be afraid to send pull request. Use the &#34;fork-and-pull&#34; Git workflow.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fork&lt;/strong&gt; the repo&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clone&lt;/strong&gt; the project to your own machine&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Commit&lt;/strong&gt; changes to your own branch&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Push&lt;/strong&gt; your work back up to your fork&lt;/li&gt; &#xA; &lt;li&gt;Submit a &lt;strong&gt;Pull request&lt;/strong&gt; so that we can review your changes&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;NOTE: Be sure to merge the &lt;strong&gt;latest&lt;/strong&gt; from &lt;strong&gt;upstream&lt;/strong&gt; before making a pull request!&lt;/p&gt; &#xA;&lt;h1&gt;Donations&lt;/h1&gt; &#xA;&lt;p&gt;If you enjoy this project and want to thanks, please use follow link:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate/?hosted_button_id=6JQ963AU688QN&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/webstatic/en_US/i/buttons/pp-acceptance-medium.png&#34; alt=&#34;Support via PayPal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/:license-GPLv3-blue.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;GPLv3 license&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>colmap/colmap</title>
    <updated>2023-02-09T01:31:01Z</updated>
    <id>tag:github.com,2023-02-09:/colmap/colmap</id>
    <link href="https://github.com/colmap/colmap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;COLMAP - Structure-from-Motion and Multi-View Stereo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;COLMAP&lt;/h1&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;COLMAP is a general-purpose Structure-from-Motion (SfM) and Multi-View Stereo (MVS) pipeline with a graphical and command-line interface. It offers a wide range of features for reconstruction of ordered and unordered image collections. The software is licensed under the new BSD license. If you use this project for your research, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{schoenberger2016sfm,&#xA;    author={Sch\&#34;{o}nberger, Johannes Lutz and Frahm, Jan-Michael},&#xA;    title={Structure-from-Motion Revisited},&#xA;    booktitle={Conference on Computer Vision and Pattern Recognition (CVPR)},&#xA;    year={2016},&#xA;}&#xA;&#xA;@inproceedings{schoenberger2016mvs,&#xA;    author={Sch\&#34;{o}nberger, Johannes Lutz and Zheng, Enliang and Pollefeys, Marc and Frahm, Jan-Michael},&#xA;    title={Pixelwise View Selection for Unstructured Multi-View Stereo},&#xA;    booktitle={European Conference on Computer Vision (ECCV)},&#xA;    year={2016},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the image retrieval / vocabulary tree engine, please also cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{schoenberger2016vote,&#xA;    author={Sch\&#34;{o}nberger, Johannes Lutz and Price, True and Sattler, Torsten and Frahm, Jan-Michael and Pollefeys, Marc},&#xA;    title={A Vote-and-Verify Strategy for Fast Spatial Verification in Image Retrieval},&#xA;    booktitle={Asian Conference on Computer Vision (ACCV)},&#xA;    year={2016},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The latest source code is available at &lt;a href=&#34;https://github.com/colmap/colmap&#34;&gt;https://github.com/colmap/colmap&lt;/a&gt;. COLMAP builds on top of existing works and when using specific algorithms within COLMAP, please also cite the original authors, as specified in the source code.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Executables for Windows and Mac and other resources can be downloaded from &lt;a href=&#34;https://demuc.de/colmap/&#34;&gt;https://demuc.de/colmap/&lt;/a&gt;. Executables for Linux/Unix/BSD are available at &lt;a href=&#34;https://repology.org/metapackage/colmap/versions&#34;&gt;https://repology.org/metapackage/colmap/versions&lt;/a&gt;. To build COLMAP from source, please see &lt;a href=&#34;https://colmap.github.io/install.html&#34;&gt;https://colmap.github.io/install.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the pre-built binaries from &lt;a href=&#34;https://demuc.de/colmap/&#34;&gt;https://demuc.de/colmap/&lt;/a&gt; or build the library manually as described in the documentation.&lt;/li&gt; &#xA; &lt;li&gt;Download one of the provided datasets at &lt;a href=&#34;https://demuc.de/colmap/datasets/&#34;&gt;https://demuc.de/colmap/datasets/&lt;/a&gt; or use your own images.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;strong&gt;automatic reconstruction&lt;/strong&gt; to easily build models with a single click or command.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation is available at &lt;a href=&#34;https://colmap.github.io/&#34;&gt;https://colmap.github.io/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Please, use the COLMAP Google Group at &lt;a href=&#34;https://groups.google.com/forum/#!forum/colmap&#34;&gt;https://groups.google.com/forum/#!forum/colmap&lt;/a&gt; (&lt;a href=&#34;mailto:colmap@googlegroups.com&#34;&gt;colmap@googlegroups.com&lt;/a&gt;) for questions and the GitHub issue tracker at &lt;a href=&#34;https://github.com/colmap/colmap&#34;&gt;https://github.com/colmap/colmap&lt;/a&gt; for bug reports, feature requests/additions, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;The library was written by Johannes L. Schönberger (&lt;a href=&#34;https://demuc.de/&#34;&gt;https://demuc.de/&lt;/a&gt;). Funding was provided by his PhD advisors Jan-Michael Frahm (&lt;a href=&#34;http://frahm.web.unc.edu/&#34;&gt;http://frahm.web.unc.edu/&lt;/a&gt;) and Marc Pollefeys (&lt;a href=&#34;https://people.inf.ethz.ch/pomarc/&#34;&gt;https://people.inf.ethz.ch/pomarc/&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions (bug reports, bug fixes, improvements, etc.) are very welcome and should be submitted in the form of new issues and/or pull requests on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The COLMAP library is licensed under the new BSD license. Note that this text refers only to the license for COLMAP itself, independent of its dependencies, which are separately licensed. Building COLMAP with these dependencies may affect the resulting COLMAP license.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2023, ETH Zurich and UNC Chapel Hill.&#xA;All rights reserved.&#xA;&#xA;Redistribution and use in source and binary forms, with or without&#xA;modification, are permitted provided that the following conditions are met:&#xA;&#xA;    * Redistributions of source code must retain the above copyright&#xA;      notice, this list of conditions and the following disclaimer.&#xA;&#xA;    * Redistributions in binary form must reproduce the above copyright&#xA;      notice, this list of conditions and the following disclaimer in the&#xA;      documentation and/or other materials provided with the distribution.&#xA;&#xA;    * Neither the name of ETH Zurich and UNC Chapel Hill nor the names of&#xA;      its contributors may be used to endorse or promote products derived&#xA;      from this software without specific prior written permission.&#xA;&#xA;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34;&#xA;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE&#xA;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE&#xA;ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE&#xA;LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR&#xA;CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF&#xA;SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS&#xA;INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN&#xA;CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#xA;ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE&#xA;POSSIBILITY OF SUCH DAMAGE.&#xA;&#xA;Author: Johannes L. Schoenberger (jsch-at-demuc-dot-de)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>crosire/reshade</title>
    <updated>2023-02-09T01:31:01Z</updated>
    <id>tag:github.com,2023-02-09:/crosire/reshade</id>
    <link href="https://github.com/crosire/reshade" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A generic post-processing injector for games and video software.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ReShade&lt;/h1&gt; &#xA;&lt;p&gt;This is a generic post-processing injector for games and video software. It exposes an automated way to access both frame color and depth information and a custom shader language called ReShade FX to write effects like ambient occlusion, depth of field, color correction and more which work everywhere.&lt;/p&gt; &#xA;&lt;p&gt;ReShade can optionally load &lt;strong&gt;add-ons&lt;/strong&gt;, DLLs that make use of the ReShade API to extend functionality of both ReShade and/or the application ReShade is being applied to. To get started on how to write your own add-on, check out the &lt;a href=&#34;https://raw.githubusercontent.com/crosire/reshade/main/REFERENCE.md&#34;&gt;API reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The ReShade FX shader compiler contained in this repository is standalone, so can be integrated into other projects as well. Simply add all &lt;code&gt;source/effect_*.*&lt;/code&gt; files to your project and use it similar to the &lt;a href=&#34;https://raw.githubusercontent.com/crosire/reshade/main/tools/fxc.cpp&#34;&gt;fxc example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need Visual Studio 2017 or higher to build ReShade and Python for the &lt;code&gt;gl3w&lt;/code&gt; dependency.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository including all Git submodules&lt;br&gt; &lt;code&gt;git clone --recurse-submodules https://github.com/crosire/reshade&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the Visual Studio solution&lt;/li&gt; &#xA; &lt;li&gt;Select either the &lt;code&gt;32-bit&lt;/code&gt; or &lt;code&gt;64-bit&lt;/code&gt; target platform and build the solution.&lt;br&gt; This will build ReShade and all dependencies. To build the setup tool, first build the &lt;code&gt;Release&lt;/code&gt; configuration for both &lt;code&gt;32-bit&lt;/code&gt; and &lt;code&gt;64-bit&lt;/code&gt; targets and only afterwards build the &lt;code&gt;Release Setup&lt;/code&gt; configuration (does not matter which target is selected then).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A quick overview of what some of the source code files contain:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;File&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crosire/reshade/main/source/dll_log.cpp&#34;&gt;dll_log.cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simple file logger implementation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crosire/reshade/main/source/dll_main.cpp&#34;&gt;dll_main.cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Main entry point (and optional test application)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crosire/reshade/main/source/dll_resources.cpp&#34;&gt;dll_resources.cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Access to DLL resource data (e.g. built-in shaders)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crosire/reshade/main/source/effect_lexer.cpp&#34;&gt;effect_lexer.cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lexical analyzer for C-like languages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crosire/reshade/main/source/effect_parser.cpp&#34;&gt;effect_parser.cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Parser for the ReShade FX shader language&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crosire/reshade/main/source/effect_preprocessor.cpp&#34;&gt;effect_preprocessor.cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;C-like preprocessor implementation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crosire/reshade/main/source/hook.cpp&#34;&gt;hook.cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Wrapper around MinHook which tracks associated function pointers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crosire/reshade/main/source/hook_manager.cpp&#34;&gt;hook_manager.cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Automatic hook installation based on DLL exports&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crosire/reshade/main/source/input.cpp&#34;&gt;input.cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Keyboard and mouse input management and window message queue hooks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crosire/reshade/main/source/runtime.cpp&#34;&gt;runtime.cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Core ReShade runtime including effect and preset management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crosire/reshade/main/source/runtime_gui.cpp&#34;&gt;runtime_gui.cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Overlay rendering and everything user interface related&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Any contributions to the project are welcomed, it&#39;s recommended to use GitHub &lt;a href=&#34;https://help.github.com/articles/using-pull-requests/&#34;&gt;pull requests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback and Support&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://reshade.me/forum&#34;&gt;ReShade Forum&lt;/a&gt; and &lt;a href=&#34;https://discord.gg/PrwndfH&#34;&gt;Discord&lt;/a&gt; server for feedback and support.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ReShade is licensed under the terms of the &lt;a href=&#34;https://raw.githubusercontent.com/crosire/reshade/main/LICENSE.md&#34;&gt;BSD 3-clause license&lt;/a&gt;.&lt;br&gt; Some source code files are dual-licensed and are also available under the terms of the MIT license, when stated as such at the top of those files.&lt;/p&gt;</summary>
  </entry>
</feed>