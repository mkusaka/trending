<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-06T01:30:41Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Autodesk/Aurora</title>
    <updated>2022-12-06T01:30:41Z</updated>
    <id>tag:github.com,2022-12-06:/Autodesk/Aurora</id>
    <link href="https://github.com/Autodesk/Aurora" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-time GPU path tracing with a USD Hydra render delegate&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Aurora&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Aurora&lt;/strong&gt; is a real-time path tracing renderer that leverages GPU hardware ray tracing. As a real-time renderer, it is intended to support rapid design iteration in a real-time viewport, which differs from a &#34;final frame&#34; production renderer like &lt;a href=&#34;https://www.arnoldrenderer.com&#34;&gt;Autodesk Arnold&lt;/a&gt;. Aurora has a USD Hydra render delegate called &lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/Doc/HdAurora.md&#34;&gt;HdAurora&lt;/a&gt;, which allows it to be used from a USD Hydra scene delegate. It can also be used directly through its own API, which is demonstrated with a standalone sample application called &lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/Doc/Plasma.md&#34;&gt;Plasma&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Aurora is developed and maintained by Autodesk. The software and this documentation are a work-in-progress and under active development. The contents of this repository are fully open source under &lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/LICENSE.md&#34;&gt;the Apache license&lt;/a&gt;, with &lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/CONTRIBUTING.md&#34;&gt;feature requests and code contributions&lt;/a&gt; welcome!&lt;/p&gt; &#xA;&lt;p&gt;Below you can learn about features, system requirements, how to build Aurora, how to run it, and access additional documentation.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/Doc/sample.jpg&#34; alt=&#34;Sample screenshot&#34; style=&#34;zoom:50%;&#34;&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;i&gt;Screenshots of &lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/#sample-data&#34;&gt;the Autodesk Telescope model&lt;/a&gt; rendered with Aurora. Model courtesy of &lt;a href=&#34;https://robertoziche.com&#34;&gt;Roberto Ziche&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Path tracing and the global effects that come with it: soft shadows, reflections, refractions, bounced light, and more.&lt;/li&gt; &#xA; &lt;li&gt;Interactive performance for complex scenes, using hardware ray tracing in modern GPUs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://autodesk.github.io/standard-surface&#34;&gt;Autodesk Standard Surface&lt;/a&gt; materials defined with &lt;a href=&#34;https://materialx.org&#34;&gt;MaterialX&lt;/a&gt; documents, which can represent a wide variety of real-world materials with physically-based shading. Also, independent layers of materials are supported, which can be used to implement decals.&lt;/li&gt; &#xA; &lt;li&gt;Environment lighting with a wrap-around lat-long image.&lt;/li&gt; &#xA; &lt;li&gt;Triangle geometry with object instancing.&lt;/li&gt; &#xA; &lt;li&gt;A USD Hydra render delegate (HdAurora) and standalone sample application (Plasma).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;... with new features and enhancements to performance and quality planned. This will include denoising with &lt;a href=&#34;https://developer.nvidia.com/rtx/ray-tracing/rt-denoisers&#34;&gt;NVIDIA Real-Time Denoisers&lt;/a&gt;, support for alternative material models, discrete light sources, and more.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Operating System&lt;/h3&gt; &#xA;&lt;p&gt;Aurora is officially supported on &lt;strong&gt;Windows 10&lt;/strong&gt; or &lt;strong&gt;Ubuntu 20.04&lt;/strong&gt;. Windows 11 and other Linux distributions may work, but are not yet supported.&lt;/p&gt; &#xA;&lt;p&gt;To run Aurora, the latest GPU drivers from &lt;a href=&#34;https://www.nvidia.com/download/index.aspx&#34;&gt;NVIDIA&lt;/a&gt;, &lt;a href=&#34;https://www.amd.com/en/support&#34;&gt;AMD&lt;/a&gt;, or &lt;a href=&#34;https://www.intel.com/content/www/us/en/download-center/home.html&#34;&gt;Intel&lt;/a&gt; are recommended as ray tracing API support is being actively improved. No other software is required to run Aurora.&lt;/p&gt; &#xA;&lt;h3&gt;Build Software&lt;/h3&gt; &#xA;&lt;p&gt;The following software is required to build Aurora:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Compiler:&lt;/strong&gt; &lt;a href=&#34;https://visualstudio.microsoft.com/vs/older-downloads&#34;&gt;Microsoft Visual Studio 2019&lt;/a&gt; or &lt;a href=&#34;https://releases.llvm.org&#34;&gt;Clang 11&lt;/a&gt;. Newer versions may work, but are not yet supported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt; (any recent version) from &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;the Git web site&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CMake&lt;/strong&gt; version 3.21 or later, from &lt;a href=&#34;https://cmake.org/download&#34;&gt;the CMake web site&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt; version 3.7 or later, from &lt;a href=&#34;https://www.python.org/downloads&#34;&gt;the Python web site&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Vulkan SDK&lt;/strong&gt;, which can be downloaded from &lt;a href=&#34;https://vulkan.lunarg.com/sdk/home&#34;&gt;LunarG&#39;s Vulkan SDK web site&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;The following software is also required for building on Windows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows SDK&lt;/strong&gt; version 10.0.22000.194 or later, for Windows builds. This can be installed using the Visual Studio Installer, or with a package from the &lt;a href=&#34;https://developer.microsoft.com/en-us/windows/downloads/windows-sdk&#34;&gt;Microsoft web site&lt;/a&gt;. This version is needed for a more recent build of the DirectX Shader Compiler (DXC). Note that the SDK is called &#34;Windows SDK for Windows 11&#34; but it supports Windows 10 as well.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Netwide Assembler (NASM)&lt;/strong&gt;, from &lt;a href=&#34;https://www.nasm.us&#34;&gt;the NASM web site&lt;/a&gt;. This is needed to build the JPEG library required by USD.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Linux (Ubuntu 20.04)&lt;/h4&gt; &#xA;&lt;p&gt;Clang 11 can be installed with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get update&#xA;sudo apt-get install -y build-essential clang-11 clang-format-11 clang-tidy-11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default compiler is gcc, so you will need to configure clang-11 as the default compiler using the &lt;code&gt;update-alternatives&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Certain libraries must be installed before building on Linux. These can be installed with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get -y install zlib1g-dev libjpeg-turbo8-dev libtiff-dev libpng-dev libglm-dev libglew-dev libglfw3-dev libgtest-dev libgmock-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that on Windows, these same libraries are built as part of the build instructions below.&lt;/p&gt; &#xA;&lt;h3&gt;GPU&lt;/h3&gt; &#xA;&lt;p&gt;Aurora requires a GPU with hardware ray tracing support, either through &lt;strong&gt;DirectX Raytracing&lt;/strong&gt; (DXR) on Windows, or &lt;strong&gt;Vulkan Ray Tracing&lt;/strong&gt; on Windows or Linux. These include, but are not limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NVIDIA GPUs with native ray tracing support&lt;/strong&gt; include any GPU with &#34;RTX&#34; in the brand name, including mobile GPUs. This includes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The GeForce RTX series, such as the GeForce RTX 2060.&lt;/li&gt; &#xA;   &lt;li&gt;The Quadro RTX series, such as the Quadro RTX 4000.&lt;/li&gt; &#xA;   &lt;li&gt;The RTX A series, such as the RTX A2000.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NVIDIA GPUs with compute-based support&lt;/strong&gt; include any GPU with the &#34;Pascal&#34; microarchitecture and at least 6 GB of RAM. Note that these GPUs will perform substantially slower with GPU ray tracing due to the lack of native ray tracing support. This includes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The GeForce 10 series, such as the GeForce GTX 1080.&lt;/li&gt; &#xA;   &lt;li&gt;The Quadro P series, such as the Quadro P4000.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD GPUs with native ray tracing support&lt;/strong&gt; include any GPU with the &#34;RDNA 2&#34; microarchitecture. This includes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The RX 6000 and RX 7000 series, including the mobile RX 6000M series.&lt;/li&gt; &#xA;   &lt;li&gt;The Radeon PRO W6000 series, such as the Radeon PRO W6800.&lt;/li&gt; &#xA;   &lt;li&gt;The Ryzen 7 6000 series of mobile processors, which have 600M series integrated GPUs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel GPUs with native ray tracing support&lt;/strong&gt; include any GPU with “Xe” architecture and DX12 support. This includes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The Intel™ Arc® Pro A-series for workstations, such as the Intel Arc Pro A40 and Intel Arc Pro A50.&lt;/li&gt; &#xA;   &lt;li&gt;The Intel™ Arc® A-series, such as the Intel Arc A380 and Intel Arc A770.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Graphics API Support&lt;/h2&gt; &#xA;&lt;p&gt;As noted in the system requirements above, Aurora can use either the &lt;a href=&#34;https://microsoft.github.io/DirectX-Specs/d3d/Raytracing.html&#34;&gt;DirectX Raytracing&lt;/a&gt; API (Windows only) or the &lt;a href=&#34;https://www.khronos.org/blog/ray-tracing-in-vulkan&#34;&gt;Vulkan Ray Tracing&lt;/a&gt; API (on Windows or Linux). These are referred to as &#34;backends&#34; in the build process.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, you can set a flag in the CMake configuration to enable the desired backend(s):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-D ENABLE_DIRECTX_BACKEND=[ON/OFF]&lt;/code&gt; for DirectX (default is ON).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-D ENABLE_HGI_BACKEND=[ON/OFF]&lt;/code&gt; for Vulkan (default is OFF).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Linux, &lt;code&gt;ENABLE_HGI_BACKEND&lt;/code&gt; is &lt;code&gt;ON&lt;/code&gt; and &lt;code&gt;ENABLE_DIRECTX_BACKEND&lt;/code&gt; is &lt;code&gt;OFF&lt;/code&gt; and cannot be changed.&lt;/p&gt; &#xA;&lt;p&gt;Vulkan support is provided through USD Hydra&#39;s &#34;HGI&#34; interface, using a prototype extension for Vulkan ray tracing available in &lt;a href=&#34;https://github.com/autodesk-forks/USD/tree/adsk/feature/hgiraytracing&#34;&gt;this branch of the Autodesk fork of USD&lt;/a&gt;. For this reason, USD is required when compiling Aurora with the Vulkan backend on Windows or Linux. USD is built as part of the build process described below, to support both the HdAurora render delegate and Vulkan.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: At this time Vulkan is supported on NVIDIA GPUs only.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Follow these steps to build Aurora and its dependencies and run the sample application.&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;Run the following on a command prompt with compiler tools, such as &#34;x64 Native Tools Command Prompt for VS 2019&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python Scripts\installExternals.py ..\AuroraExternals&#xA;cmake -S . -B Build -D EXTERNALS_DIR=..\AuroraExternals&#xA;cmake --build Build --config Release&#xA;cd Build\bin\Release&#xA;Plasma.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Linux (Ubuntu 20.04)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;python Scripts/installExternals.py ../AuroraExternals&#xA;cmake -S . -B Build -D EXTERNALS_DIR=../AuroraExternals/Release&#xA;cmake --build Build&#xA;cd Build/bin/Release&#xA;./Plasma --output {OUTPUT_IMAGE_FILE.png} --scene {INPUT_SCENE_FILE.obj} --renderer hgi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Aurora&lt;/h2&gt; &#xA;&lt;p&gt;Aurora includes a script that retrieves and builds dependencies (&#34;externals&#34;) from source. This script is based on the &lt;a href=&#34;https://github.com/PixarAnimationStudios/USD/tree/release/build_scripts&#34;&gt;USD build script&lt;/a&gt;. CMake is used to build Aurora directly, or to create an IDE project which can then be used to build or debug Aurora.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Download or clone&lt;/strong&gt; the contents of this repository to a location of your choice. Cloning with Git is not strictly necessary as Aurora does not currently use submodules. We refer to this location as &#34;AURORA_DIR&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Start a command line&lt;/strong&gt; with access to your C++ compiler tools. When using Visual Studio, the &#34;x64 Native Tools Command Prompt for VS 2019&#34; shortcut will provide the proper environment. The CMake and Python executables must also be available, through the PATH environment variable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Installing externals:&lt;/strong&gt; Run &lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/Scripts/installExternals.py&#34;&gt;Scripts/installExternals.py&lt;/a&gt;&lt;/em&gt; with Python in AURORA_DIR to build and install externals.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can run the install script with the desired location for storing and compiling externals as the only argument. We will refer to this location as &#34;EXTERNALS_DIR&#34;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;python Scripts/installExternals.py {EXTERNALS_DIR}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The script will retrieve the source code for all dependencies using available release packages, or clone with Git as needed. The script will also compile all of the dependencies. If you want more feedback on the script execution, you can run the script with the &lt;code&gt;-v&lt;/code&gt; option for verbose output.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The entire process takes about 30 minutes to run, and consumes about 10 GB of disk space in EXTERNALS_DIR. While USD is being compiled, the script will use most of the CPU cores, and your computer may be sluggish for a few minutes.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;--build-variant&lt;/code&gt; option to choose the build configuration of externals. It can be &lt;code&gt;Debug&lt;/code&gt;, &lt;code&gt;Release&lt;/code&gt; (default), or &lt;code&gt;All&lt;/code&gt;. On Windows, this option needs to match the CONFIGURATION value used in the next step.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;-h&lt;/code&gt; option with the script to see available options.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generating projects:&lt;/strong&gt; Run CMake in AURORA_DIR to generate build projects, e.g. a Visual Studio solution.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;You must specify the externals installation directory (EXTERNALS_DIR, above) as a CMake path variable called &lt;code&gt;EXTERNALS_DIR&lt;/code&gt;. If you are using cmake-gui, you should specify this variable before generating.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You must specify a build directory, and we refer to this location as &#34;AURORA_BUILD_DIR&#34;. The recommended build directory is {AURORA_DIR}/Build, which is filtered by &lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/.gitignore&#34;&gt;.gitignore&lt;/a&gt; so it won&#39;t appear as local changes for Git.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can use CMake on the command line or the GUI (cmake-gui). The CMake command to generate projects is as follows:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cmake -S . -B {AURORA_BUILD_DIR} -D CMAKE_BUILD_TYPE={CONFIGURATION} -D EXTERNALS_DIR={EXTERNALS_DIR}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The CONFIGURATION value can be one of &lt;code&gt;Debug&lt;/code&gt; or &lt;code&gt;Release&lt;/code&gt; (default).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can optionally specify the desired graphics API backend as described above, e.g. &lt;code&gt;-D ENABLE_HGI_BACKEND=ON&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;On Windows, you may need to specify the toolchain and architecture with &lt;code&gt;-G &#34;Visual Studio 16 2019&#34; -A x64&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Building:&lt;/strong&gt; You can load the &lt;em&gt;Aurora.sln&lt;/em&gt; Visual Studio solution file from the Aurora build directory, and build Aurora using the build configuration used with the &lt;em&gt;installExternals.py&lt;/em&gt; script (see below), or use CMake.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;The CMake command to build Aurora is as follows:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cmake --build {AURORA_BUILD_DIR} --config {CONFIGURATION} -v&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The build for a single build configuration (e.g. Debug or Release) takes about a minute and consumes about 500 MB of disk space.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Changing Configurations&lt;/h3&gt; &#xA;&lt;p&gt;By default, Aurora will be built with the &lt;em&gt;Release&lt;/em&gt; build configuration, i.e. for application deployment and best performance. To change to another configuration, see the information below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;For the externals&lt;/strong&gt; installed with the &lt;em&gt;installExternals.py&lt;/em&gt; script, you can specify the desired configuration with the &lt;code&gt;--build-variant&lt;/code&gt; option, and specify &lt;code&gt;Debug&lt;/code&gt;, &lt;code&gt;Release&lt;/code&gt; (default), or &lt;code&gt;All&lt;/code&gt;. Note that you can have multiple configurations built.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For Aurora itself&lt;/strong&gt;, you can specify the desired configuration with the &lt;code&gt;CMAKE_BUILD_TYPE&lt;/code&gt; variable when running CMake project generation, with the same values as above.&lt;/li&gt; &#xA; &lt;li&gt;On Windows, it is necessary for Aurora &lt;em&gt;and&lt;/em&gt; the externals be built with the same configuration. Since Visual Studio allows multiple configurations in a project, you must select the appropriate configuration in the Visual Studio interface, or you will get linker errors.&lt;/li&gt; &#xA; &lt;li&gt;On Linux, due to a CMake error in the debug configuration of OpenImageIO, &lt;code&gt;--build-variant&lt;/code&gt; is disabled and only the release configuration of externals is installed. However, you can build either the debug or release configuration of Aurora with the release configuration of externals. To do this, specify the configuration &lt;em&gt;subdirectory&lt;/em&gt; with the &lt;code&gt;EXTERNALS_DIR&lt;/code&gt; variable, e.g. {EXTERNALS_DIR}/Release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running Aurora&lt;/h2&gt; &#xA;&lt;p&gt;Aurora can be exercised in three ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using the &lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/Doc/Plasma.md&#34;&gt;Plasma&lt;/a&gt; sample application, either interactively or on the command line.&lt;/li&gt; &#xA; &lt;li&gt;Using the &lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/Doc/HdAurora.md&#34;&gt;HdAurora&lt;/a&gt; render delegate, through a compliant USD Hydra-based application like &lt;a href=&#34;https://graphics.pixar.com/usd/release/toolset.html&#34;&gt;Usdview&lt;/a&gt; or certain design applications.&lt;/li&gt; &#xA; &lt;li&gt;Using the Aurora unit tests, which use the &lt;a href=&#34;https://github.com/google/googletest&#34;&gt;Google Test&lt;/a&gt; framework: &lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/Tests/Foundation&#34;&gt;Foundation&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/Tests/AuroraInternals&#34;&gt;AuroraInternals&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/Tests/Aurora&#34;&gt;Aurora&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these are built with Aurora, and binaries can be found in the build output directory after following the instructions above.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Data&lt;/h2&gt; &#xA;&lt;p&gt;The Autodesk Telescope model shown above was developed by &lt;a href=&#34;https://robertoziche.com&#34;&gt;Roberto Ziche&lt;/a&gt;, and was inspired by Celestron products. It is made available for use with Aurora or any another application under &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0&#34;&gt;the CC BY 4.0 license&lt;/a&gt;. You can &lt;a href=&#34;https://drive.google.com/file/d/1RM09qDOGcRinLJTbXCsiRfQrHmKA-1aN/view?usp=share_link&#34;&gt;download a package&lt;/a&gt; containing an OBJ version for use with Plasma, or a USD version for use with Usdview or other applications.&lt;/p&gt; &#xA;&lt;p&gt;Other recommended sources of data include the &lt;a href=&#34;https://casual-effects.com/data&#34;&gt;McGuire Computer Graphics Archive&lt;/a&gt; and the &lt;a href=&#34;https://wiki.aswf.io/display/WGUSD/Sample+Assets&#34;&gt;ASWF USD Working Group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Available documentation can by found in the &lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/Doc&#34;&gt;Doc&lt;/a&gt; directory. This includes the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/Doc/Plasma.md&#34;&gt;Plasma&lt;/a&gt;: instructions for using the sample application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/Doc/HdAurora.md&#34;&gt;HdAurora&lt;/a&gt;: instructions for using the sample application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/Doc/CodingStandards.md&#34;&gt;Coding standards&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More information about contributions and licensing can be found here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/CONTRIBUTING.md&#34;&gt;How to contribute to the project&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Autodesk/Aurora/main/LICENSE.md&#34;&gt;The software license&lt;/a&gt;, which is the Apache License 2.0.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>deepmind/mujoco_mpc</title>
    <updated>2022-12-06T01:30:41Z</updated>
    <id>tag:github.com,2022-12-06:/deepmind/mujoco_mpc</id>
    <link href="https://github.com/deepmind/mujoco_mpc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Model-Predictive Control for realtime synthesis of agile motor control using MuJoCo.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt; &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/mujoco_mpc/main/#&#34;&gt;&lt;img alt=&#34;MuJoCo MPC&#34; src=&#34;https://raw.githubusercontent.com/deepmind/mujoco_mpc/main/docs/assets/banner.png&#34; width=&#34;100%&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://github.com/deepmind/mujoco_mpc/actions/workflows/build.yml?query=branch%3Amain&#34; alt=&#34;GitHub Actions&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/deepmind/mujoco_mpc/build/main&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/deepmind/mujoco_mpc/raw/main/LICENSE&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/deepmind/mujoco_mpc&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MuJoCo MPC (MJPC)&lt;/strong&gt; is an interactive application and software framework for real-time predictive control with &lt;a href=&#34;https://mujoco.org/&#34;&gt;MuJoCo&lt;/a&gt;, developed by DeepMind.&lt;/p&gt; &#xA;&lt;p&gt;MJPC allows the user to easily author and solve complex robotics tasks, and currently supports three shooting-based planners: derivative-based iLQG and Gradient Descent, and a simple yet very competitive derivative-free method called Predictive Sampling.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deepmind/mujoco_mpc/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deepmind/mujoco_mpc/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deepmind/mujoco_mpc/main/#predictive-control&#34;&gt;Predictive Control&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deepmind/mujoco_mpc/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deepmind/mujoco_mpc/main/#known-issues&#34;&gt;Known Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deepmind/mujoco_mpc/main/#citation&#34;&gt;Citation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deepmind/mujoco_mpc/main/#acknowledgments&#34;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deepmind/mujoco_mpc/main/#license-and-disclaimer&#34;&gt;License and Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You will need &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; and a working C++20 compiler to build MJPC. We recommend using &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt; and 2 of its extensions (&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools&#34;&gt;CMake Tools&lt;/a&gt; and &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools&#34;&gt;C/C++&lt;/a&gt;) to simplify the build process.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository: &lt;code&gt;git clone https://github.com/deepmind/mujoco_mpc.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configure the project with CMake (a pop-up should appear in VSCode)&lt;/li&gt; &#xA; &lt;li&gt;Build and run the &lt;code&gt;mjpc&lt;/code&gt; target. This will open and run the graphical user interface.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;For a video overview of MJPC, click below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dpmd.ai/mjpc&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/5IeKvQyuxV0/hqdefault.jpg&#34; alt=&#34;Getting Started&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a detailed dive of the graphical user interface, see the &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/mujoco_mpc/main/docs/GUI.md&#34;&gt;MJPC GUI&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Predictive Control&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/mujoco_mpc/main/docs/OVERVIEW.md&#34;&gt;Predictive Control&lt;/a&gt; documentation for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/mujoco_mpc/main/docs/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; documentation for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;MJPC is not production-quality software, it is a &lt;strong&gt;research prototype&lt;/strong&gt;. There are likely to be missing features and outright bugs. If you find any, please report them in the &lt;a href=&#34;https://github.com/deepmind/mujoco_mpc/issues&#34;&gt;issue tracker&lt;/a&gt;. Below we list some known issues, including items that we are actively working on.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We have not tested MJPC on Windows, but there should be no issues in principle.&lt;/li&gt; &#xA; &lt;li&gt;Task specification, in particular the setting of norms and their parameters in XML, is a bit clunky. We are still iterating on the design.&lt;/li&gt; &#xA; &lt;li&gt;The Gradient Descent search step is proportional to the scale of the cost function and requires per-task tuning in order to work well. This is not a bug but a property of vanilla gradient descent. It might be possible to ameliorate this with some sort of gradient normalisation, but we have not investigated this thoroughly.&lt;/li&gt; &#xA; &lt;li&gt;There is a subtle issue with iLQG that we have not yet been able to resolve. It manifests as jittery behaviour and increasing cost-to-go after only a single simulation step (right arrow key on the keyboard, in pause mode). We are currently investigating it and hope to resolve it in the near future.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use MJPC in your work, please cite our accompanying &lt;a href=&#34;https://arxiv.org/abs/2212.00541&#34;&gt;preprint&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{howell2022,&#xA;  title={{Predictive Sampling: Real-time Behaviour Synthesis with MuJoCo}},&#xA;  author={Howell, Taylor and Gileadi, Nimrod and Tunyasuvunakool, Saran and Zakka, Kevin and Erez, Tom and Tassa, Yuval},&#xA;  archivePrefix={arXiv},&#xA;  eprint={2212.00541},&#xA;  primaryClass={cs.RO},&#xA;  url={https://arxiv.org/abs/2212.00541},&#xA;  doi={10.48550/arXiv.2212.00541},&#xA;  year={2022},&#xA;  month={dec}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;The main effort required to make this repository publicly available was undertaken by &lt;a href=&#34;https://thowell.github.io/&#34;&gt;Taylor Howell&lt;/a&gt; and the DeepMind Robotics Simulation team.&lt;/p&gt; &#xA;&lt;h2&gt;License and Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;All other content is Copyright 2022 DeepMind Technologies Limited and licensed under the Apache License, Version 2.0. A copy of this license is provided in the top-level LICENSE file in this repository. You can also obtain it from &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is not an officially supported Google product.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OneLoneCoder/Javidx9</title>
    <updated>2022-12-06T01:30:41Z</updated>
    <id>tag:github.com,2022-12-06:/OneLoneCoder/Javidx9</id>
    <link href="https://github.com/OneLoneCoder/Javidx9" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official distribution of Javidx9&#39;s YouTube videos and projects&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/WhwHUMV&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/380484403458998276?logo=discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;This repository contains example code files and projects from Javidx9&#39;s YouTube Channel: &lt;a href=&#34;http://youtube.com/javidx9&#34;&gt;http://youtube.com/javidx9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The olcPixelGameEngine is alive and well, and can be found here: &lt;a href=&#34;https://github.com/OneLoneCoder/olcPixelGameEngine&#34;&gt;https://github.com/OneLoneCoder/olcPixelGameEngine&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The olcSoundWaveEngine can be found here: &lt;a href=&#34;https://github.com/OneLoneCoder/olcSoundWaveEngine&#34;&gt;https://github.com/OneLoneCoder/olcSoundWaveEngine&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository includes the now deprecated olcConsoleGameEngine ans associated projects. They are easily ported to the newer, faster, cross platform, supported and altogether better olcPixelGameEngine. Conversions between the two can be found here: &lt;a href=&#34;https://github.com/Joseph21-6147/From-ConsoleGameEngine-to-PixelGameEngine&#34;&gt;https://github.com/Joseph21-6147/From-ConsoleGameEngine-to-PixelGameEngine&lt;/a&gt; courtesy of Joseph21 - Thanks Joseph!&lt;/p&gt; &#xA;&lt;h1&gt;License (OLC-3)&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2018, 2019, 2020, 2021, 2022 OneLoneCoder.com&lt;/p&gt; &#xA;&lt;p&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Redistributions or derivations of source code must retain the above copyright notice, this list of conditions and the following disclaimer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Redistributions or derivative works in binary form must reproduce the above copyright notice. This list of conditions and the following disclaimer must be reproduced in the documentation and/or other materials provided with the distribution.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt;</summary>
  </entry>
</feed>