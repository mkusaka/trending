<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-29T01:30:21Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zrax/pycdc</title>
    <updated>2022-11-29T01:30:21Z</updated>
    <id>tag:github.com,2022-11-29:/zrax/pycdc</id>
    <link href="https://github.com/zrax/pycdc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C++ python bytecode disassembler and decompiler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Decompyle++&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;A Python Byte-code Disassembler/Decompiler&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Decompyle++ aims to translate compiled Python byte-code back into valid and human-readable Python source code. While other projects have achieved this with varied success, Decompyle++ is unique in that it seeks to support byte-code from any version of Python.&lt;/p&gt; &#xA;&lt;p&gt;Decompyle++ includes both a byte-code disassembler (pycdas) and a decompiler (pycdc).&lt;/p&gt; &#xA;&lt;p&gt;As the name implies, Decompyle++ is written in C++. If you wish to contribute, please fork us on github at &lt;a href=&#34;https://github.com/zrax/pycdc&#34;&gt;https://github.com/zrax/pycdc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building Decompyle++&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate a project or makefile with &lt;a href=&#34;http://www.cmake.org&#34;&gt;CMake&lt;/a&gt; (See CMake&#39;s documentation for details)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;The following options can be passed to CMake to control debug features:&lt;/p&gt; &#xA;    &lt;table&gt; &#xA;     &lt;thead&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;th&gt;Option&lt;/th&gt; &#xA;       &lt;th&gt;Description&lt;/th&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/thead&gt; &#xA;     &lt;tbody&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;&lt;code&gt;-DCMAKE_BUILD_TYPE=Debug&lt;/code&gt;&lt;/td&gt; &#xA;       &lt;td&gt;Produce debugging symbols&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;&lt;code&gt;-DENABLE_BLOCK_DEBUG=ON&lt;/code&gt;&lt;/td&gt; &#xA;       &lt;td&gt;Enable block debugging output&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;&lt;code&gt;-DENABLE_STACK_DEBUG=ON&lt;/code&gt;&lt;/td&gt; &#xA;       &lt;td&gt;Enable stack debugging output&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/tbody&gt; &#xA;    &lt;/table&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the generated project or makefile&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For projects (e.g. MSVC), open the generated project file and build it&lt;/li&gt; &#xA;   &lt;li&gt;For makefiles, just run &lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;To run tests (on *nix or MSYS), run &lt;code&gt;make check&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;To run pycdas&lt;/strong&gt;, the PYC Disassembler: &lt;code&gt;./pycdas [PATH TO PYC FILE]&lt;/code&gt; The byte-code disassembly is printed to stdout.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To run pycdc&lt;/strong&gt;, the PYC Decompiler: &lt;code&gt;./pycdc [PATH TO PYC FILE]&lt;/code&gt; The decompiled Python source is printed to stdout. Any errors are printed to stderr.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Marshalled code objects&lt;/strong&gt;: Both tools support Python marshalled code objects, as output from &lt;code&gt;marshal.dumps(compile(...))&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use this feature, specify &lt;code&gt;-c -v &amp;lt;version&amp;gt;&lt;/code&gt; on the command line - the version must be specified as the objects themselves do not contain version metadata.&lt;/p&gt; &#xA;&lt;h2&gt;Authors, Licence, Credits&lt;/h2&gt; &#xA;&lt;p&gt;Decompyle++ is the work of Michael Hansen and Darryl Pogue.&lt;/p&gt; &#xA;&lt;p&gt;Additional contributions from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;charlietang98&lt;/li&gt; &#xA; &lt;li&gt;Kunal Parmar&lt;/li&gt; &#xA; &lt;li&gt;Olivier Iffrig&lt;/li&gt; &#xA; &lt;li&gt;Zlodiy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is released under the terms of the GNU General Public License, version 3; See LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tildearrow/furnace</title>
    <updated>2022-11-29T01:30:21Z</updated>
    <id>tag:github.com,2022-11-29:/tildearrow/furnace</id>
    <link href="https://github.com/tildearrow/furnace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a multi-system chiptune tracker compatible with DefleMask modules&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Furnace (chiptune tracker)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tildearrow/furnace/master/papers/screenshot2.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;the biggest multi-system chiptune tracker ever made!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tildearrow/furnace/master/#downloads&#34;&gt;downloads&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/tildearrow/furnace/master/#quick-references&#34;&gt;discussion/help&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/tildearrow/furnace/master/#developer-info&#34;&gt;developer info&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/tildearrow/furnace/master/#unofficial-packages&#34;&gt;unofficial packages&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/tildearrow/furnace/master/#frequently-asked-questions&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;downloads&lt;/h2&gt; &#xA;&lt;p&gt;check out the &lt;a href=&#34;https://github.com/tildearrow/furnace/releases&#34;&gt;Releases&lt;/a&gt; page. available for Windows, macOS and Linux (AppImage).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nightly.link/tildearrow/furnace/workflows/build/master&#34;&gt;see here&lt;/a&gt; for unstable developer builds.&lt;/p&gt; &#xA;&lt;h2&gt;features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;over 50 sound chips - and counting: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Yamaha FM chips: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;YM2151 (OPM)&lt;/li&gt; &#xA;     &lt;li&gt;YM2203 (OPN)&lt;/li&gt; &#xA;     &lt;li&gt;YM2413 (OPLL)&lt;/li&gt; &#xA;     &lt;li&gt;YM2414 (OPZ) used in Yamaha TX81Z&lt;/li&gt; &#xA;     &lt;li&gt;YM2608 (OPNA) used in PC-98&lt;/li&gt; &#xA;     &lt;li&gt;YM2610 (OPNB) used in Neo Geo&lt;/li&gt; &#xA;     &lt;li&gt;YM2610B (OPNB2)&lt;/li&gt; &#xA;     &lt;li&gt;YM2612 (OPN2) used in Sega Genesis and FM Towns&lt;/li&gt; &#xA;     &lt;li&gt;YM3526 (OPL) used in C64 Sound Expander&lt;/li&gt; &#xA;     &lt;li&gt;YM3812 (OPL2)&lt;/li&gt; &#xA;     &lt;li&gt;YMF262 (OPL3) with full 4-op support!&lt;/li&gt; &#xA;     &lt;li&gt;Y8950 (OPL with ADPCM)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;square wave chips: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;AY-3-8910/YM2149(F) used in several computers and game consoles&lt;/li&gt; &#xA;     &lt;li&gt;Commodore VIC used in the VIC-20&lt;/li&gt; &#xA;     &lt;li&gt;Microchip AY8930&lt;/li&gt; &#xA;     &lt;li&gt;TI SN76489 used in Sega Master System and BBC Micro&lt;/li&gt; &#xA;     &lt;li&gt;PC Speaker&lt;/li&gt; &#xA;     &lt;li&gt;Philips SAA1099 used in SAM Coup√©&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;sample chips: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Amiga&lt;/li&gt; &#xA;     &lt;li&gt;SegaPCM - all 16 channels&lt;/li&gt; &#xA;     &lt;li&gt;Capcom QSound&lt;/li&gt; &#xA;     &lt;li&gt;Yamaha YMZ280B (PCMD8)&lt;/li&gt; &#xA;     &lt;li&gt;Ricoh RF5C68 used in Sega CD and FM Towns&lt;/li&gt; &#xA;     &lt;li&gt;OKI MSM6258 and MSM6295&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;wavetable chips: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;HuC6280 used in PC Engine&lt;/li&gt; &#xA;     &lt;li&gt;Konami Bubble System WSG&lt;/li&gt; &#xA;     &lt;li&gt;Konami SCC/SCC+&lt;/li&gt; &#xA;     &lt;li&gt;Namco arcade chips (WSG/C15/C30)&lt;/li&gt; &#xA;     &lt;li&gt;WonderSwan&lt;/li&gt; &#xA;     &lt;li&gt;Seta/Allumer X1-010&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;NES (Ricoh 2A03/2A07), with additional expansion sound support: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Konami VRC6&lt;/li&gt; &#xA;     &lt;li&gt;Konami VRC7&lt;/li&gt; &#xA;     &lt;li&gt;MMC5&lt;/li&gt; &#xA;     &lt;li&gt;Famicom Disk System&lt;/li&gt; &#xA;     &lt;li&gt;Sunsoft 5B&lt;/li&gt; &#xA;     &lt;li&gt;Namco 163&lt;/li&gt; &#xA;     &lt;li&gt;Family Noraebang (OPLL)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;SID (6581/8580) used in Commodore 64&lt;/li&gt; &#xA;   &lt;li&gt;Mikey used in Atari Lynx&lt;/li&gt; &#xA;   &lt;li&gt;ZX Spectrum beeper (SFX-like engine)&lt;/li&gt; &#xA;   &lt;li&gt;Commodore PET&lt;/li&gt; &#xA;   &lt;li&gt;TIA used in Atari 2600&lt;/li&gt; &#xA;   &lt;li&gt;Game Boy&lt;/li&gt; &#xA;   &lt;li&gt;modern/fantasy: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Commander X16 VERA&lt;/li&gt; &#xA;     &lt;li&gt;tildearrow Sound Unit&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;mix and match sound chips! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;over 200 ready to use presets from computers, game consoles and arcade boards...&lt;/li&gt; &#xA;   &lt;li&gt;...or create your own - up to 32 of them or a total of 128 channels!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;DefleMask compatibility &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;loads .dmf modules from all versions (beta 1 to 1.1.3)&lt;/li&gt; &#xA;   &lt;li&gt;saves .dmf modules - both modern and legacy &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Furnace doubles as a module downgrader&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;loads/saves .dmp instruments and .dmw wavetables as well&lt;/li&gt; &#xA;   &lt;li&gt;clean-room design (guesswork and ABX tests only, no decompilation involved)&lt;/li&gt; &#xA;   &lt;li&gt;bug/quirk implementation for increased playback accuracy through compatibility flags&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;VGM export&lt;/li&gt; &#xA; &lt;li&gt;modular layout that you may adapt to your needs&lt;/li&gt; &#xA; &lt;li&gt;audio file export - entire song, per chip or per channel&lt;/li&gt; &#xA; &lt;li&gt;quality emulation cores (Nuked, MAME, SameBoy, Mednafen PCE, NSFplay, puNES, reSID, Stella, SAASound, vgsound_emu and ymfm)&lt;/li&gt; &#xA; &lt;li&gt;wavetable synthesizer &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;available on wavetable chips&lt;/li&gt; &#xA;   &lt;li&gt;create complex sounds with ease - provide up to two wavetables, select and effect and let go!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;MIDI input support&lt;/li&gt; &#xA; &lt;li&gt;additional features: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;FM macros!&lt;/li&gt; &#xA;   &lt;li&gt;negative octaves&lt;/li&gt; &#xA;   &lt;li&gt;arbitrary pitch samples&lt;/li&gt; &#xA;   &lt;li&gt;sample loop points&lt;/li&gt; &#xA;   &lt;li&gt;SSG envelopes and ADPCM-B in Neo Geo&lt;/li&gt; &#xA;   &lt;li&gt;full duty/cutoff range in C64&lt;/li&gt; &#xA;   &lt;li&gt;ability to change tempo mid-song&lt;/li&gt; &#xA;   &lt;li&gt;multiple sub-songs in a module&lt;/li&gt; &#xA;   &lt;li&gt;per-channel oscilloscope with waveform centering&lt;/li&gt; &#xA;   &lt;li&gt;built-in sample editor&lt;/li&gt; &#xA;   &lt;li&gt;chip mixing settings&lt;/li&gt; &#xA;   &lt;li&gt;built-in visualizer in pattern view&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;open-source under GPLv2 or later.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;quick references&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;discussion&lt;/strong&gt;: see the &lt;a href=&#34;https://github.com/tildearrow/furnace/discussions&#34;&gt;Discussions&lt;/a&gt; section, or (preferably) the &lt;a href=&#34;https://discord.gg/EfrwT2wq7z&#34;&gt;official Discord server&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;help&lt;/strong&gt;: check out the &lt;a href=&#34;https://raw.githubusercontent.com/tildearrow/furnace/master/papers/doc/README.md&#34;&gt;documentation&lt;/a&gt;. it&#39;s mostly incomplete, but has details on effects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;unofficial packages&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/furnace/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/furnace.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;some people have provided packages for Unix/Unix-like distributions. here&#39;s a list.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Arch Linux&lt;/strong&gt;: &lt;a href=&#34;https://aur.archlinux.org/packages/furnace-git&#34;&gt;furnace-git is in the AUR.&lt;/a&gt; thank you Essem!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FreeBSD&lt;/strong&gt;: &lt;a href=&#34;https://www.freshports.org/audio/furnace/&#34;&gt;a package in ports&lt;/a&gt; is available courtesy of ehaupt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nix&lt;/strong&gt;: &lt;a href=&#34;https://search.nixos.org/packages?channel=unstable&amp;amp;show=furnace&amp;amp;from=0&amp;amp;size=50&amp;amp;sort=relevance&amp;amp;type=packages&amp;amp;query=furnace&#34;&gt;package&lt;/a&gt; thanks to OPNA2608.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;openSUSE&lt;/strong&gt;: &lt;a href=&#34;https://software.opensuse.org/package/furnace&#34;&gt;a package&lt;/a&gt; is available, courtesy of fpesari.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;developer info&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tildearrow/furnace/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/tildearrow/furnace/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build furnace&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;if you can&#39;t download these artifacts (because GitHub requires you to be logged in), &lt;a href=&#34;https://nightly.link/tildearrow/furnace/workflows/build/master&#34;&gt;go here&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: do not download the project&#39;s source as a .zip or .tar.gz as these do not include the project&#39;s submodules which are necessary to proceed with building. please instead use Git as shown below.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CMake&lt;/li&gt; &#xA; &lt;li&gt;JACK (optional, macOS/Linux only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;if building under Windows or macOS, no additional dependencies are required. otherwise, you may also need the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libpulse&lt;/li&gt; &#xA; &lt;li&gt;libx11&lt;/li&gt; &#xA; &lt;li&gt;libasound&lt;/li&gt; &#xA; &lt;li&gt;libGL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;some Linux distributions (e.g. Ubuntu or openSUSE) will require you to install the &lt;code&gt;-dev&lt;/code&gt; versions of these.&lt;/p&gt; &#xA;&lt;h2&gt;getting the source&lt;/h2&gt; &#xA;&lt;p&gt;type the following on a terminal/console: (make sure Git is installed)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/tildearrow/furnace.git&#xA;cd furnace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(the &lt;code&gt;--recursive&lt;/code&gt; parameter ensures submodules are fetched as well)&lt;/p&gt; &#xA;&lt;h2&gt;compilation&lt;/h2&gt; &#xA;&lt;p&gt;your typical CMake project.&lt;/p&gt; &#xA;&lt;h3&gt;Windows using MSVC&lt;/h3&gt; &#xA;&lt;p&gt;as of now tildearrow uses MinGW for Windows builds, but thanks to OPNA2608 this works again!&lt;/p&gt; &#xA;&lt;p&gt;from the developer tools command prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;msbuild ALL_BUILD.vcxproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS and Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, build scripts are provided in the &lt;code&gt;scripts/&lt;/code&gt; folder in the root of the repository.&lt;/p&gt; &#xA;&lt;h3&gt;CMake options&lt;/h3&gt; &#xA;&lt;p&gt;To add an option from the command-line: &lt;code&gt;-D&amp;lt;NAME&amp;gt;=&amp;lt;VALUE&amp;gt;&lt;/code&gt;&lt;br&gt; Example: &lt;code&gt;cmake -DBUILD_GUI=OFF -DWARNINGS_ARE_ERRORS=ON ..&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Available options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;BUILD_GUI&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build the tracker (disable to build only a headless player)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;USE_RTMIDI&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build with MIDI support using RtMidi&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;USE_SDL2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build with SDL2 (required to build with GUI)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;USE_SNDFILE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build with libsndfile (required in order to work with audio files)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;USE_BACKWARD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use backward-cpp to print a backtrace on crash/abort&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;WITH_JACK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ON&lt;/code&gt; if system-installed JACK detected, otherwise &lt;code&gt;OFF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to build with JACK support. Auto-detects if JACK is available&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;SYSTEM_FFTW&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;OFF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use a system-installed version of FFTW instead of the vendored one&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;SYSTEM_FMT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;OFF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use a system-installed version of fmt instead of the vendored one&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;SYSTEM_LIBSNDFILE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;OFF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use a system-installed version of libsndfile instead of the vendored one&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;SYSTEM_RTMIDI&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;OFF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use a system-installed version of RtMidi instead of the vendored one&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;SYSTEM_ZLIB&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;OFF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use a system-installed version of zlib instead of the vendored one&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;SYSTEM_SDL2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;OFF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use a system-installed version of SDL2 instead of the vendored one&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;WARNINGS_ARE_ERRORS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;OFF&lt;/code&gt; (but consider enabling this &amp;amp; reporting any errors that arise from it!)&lt;/td&gt; &#xA;   &lt;td&gt;Whether warnings in furnace&#39;s C++ code should be treated as errors&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;WITH_DEMOS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Install demo songs on &lt;code&gt;make install&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;WITH_INSTRUMENTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Install demo instruments on &lt;code&gt;make install&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;console usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./furnace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this opens the program.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./furnace -console &amp;lt;file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will play a compatible file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./furnace -console -view commands &amp;lt;file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will play a compatible file and enable the commands view.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;note that these commands only actually work in Linux environments. on other command lines, such as Windows&#39; Command Prompt, or MacOS Terminal, it may not work correctly.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;frequently asked questions&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;woah! 50 sound chips?! I can&#39;t believe it!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;yup, it&#39;s real.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;where&#39;s the manual?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/tildearrow/furnace/master/papers/doc/README.md&#34;&gt;papers/&lt;/a&gt;. it&#39;s kind of incomplete, but at least the sound chips section is there.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;it doesn&#39;t open under macOS!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;this is due to Apple&#39;s application signing policy. a workaround is to right click on the Furnace app icon and select Open.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;as of Monterey, this workaround no longer works (especially on ARM).&lt;/strong&gt; yeah, Apple has decided to be strict on the matter. if you happen to be on that version, use this workaround instead (on a Terminal):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xattr -d com.apple.quarantine /path/to/Furnace.app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(replace /path/to/ with the path where Furnace.app is located)&lt;/p&gt; &#xA;&lt;p&gt;you may need to log out and/or reboot after doing this.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;how do I use C64 absolute filter/duty?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;on Instrument Editor in the C64 tab there are two options to toggle these. also provided are two effects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;3xxx&lt;/code&gt;: set fine duty.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;4xxx&lt;/code&gt;: set fine cutoff. &lt;code&gt;xxx&lt;/code&gt; range is 000-7ff. additionally, you can change the cutoff and/or duty as a macro inside an instrument by clicking the &lt;code&gt;absolute cutoff macro&lt;/code&gt; and/or &lt;code&gt;absolute duty macro&lt;/code&gt; checkbox at the bottom of the instrument. (for the filter, you also need to click the checkbox that says &lt;code&gt;volume macro is cutoff macro&lt;/code&gt;.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;how do I use PCM on a PCM-capable chip?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;two possibilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the recommended way is by creating the &#34;Sample&#34; type instrument and assigning a sample to it.&lt;/li&gt; &#xA; &lt;li&gt;otherwise you may employ the DefleMask-compatible method, using &lt;code&gt;17xx&lt;/code&gt; effect.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;my .dmf song sounds very odd at a certain point&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;file a bug report. use the Issues page. it&#39;s probably another playback inaccuracy.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;my .dmf song sounds correct, but it doesn&#39;t in DefleMask&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;file a bug report &lt;strong&gt;here&lt;/strong&gt;. it still is a playback inaccuracy.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;my song sounds terrible after saving as .dmf!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;the DefleMask format has several limitations. save in Furnace song format instead (.fur).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;how do I solo channels?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;right click on the channel name.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;footnotes&lt;/h1&gt; &#xA;&lt;p&gt;copyright (C) 2021-2022 tildearrow and contributors.&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.&lt;/p&gt; &#xA;&lt;p&gt;despite the fact this program works with the .dmf file format, it is NOT affiliated with Delek or DefleMask in any way, nor it is a replacement for the original program.&lt;/p&gt;</summary>
  </entry>
</feed>