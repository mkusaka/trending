<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-14T01:31:31Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>deepmind/code_contests</title>
    <updated>2022-12-14T01:31:31Z</updated>
    <id>tag:github.com,2022-12-14:/deepmind/code_contests</id>
    <link href="https://github.com/deepmind/code_contests" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CodeContests&lt;/h1&gt; &#xA;&lt;p&gt;CodeContests is a competitive programming dataset for machine-learning. This dataset was used when training &lt;a href=&#34;https://deepmind.com/blog/article/Competitive-programming-with-AlphaCode&#34;&gt;AlphaCode&lt;/a&gt;. AlphaCode has been published in &lt;a href=&#34;https://www.science.org/doi/10.1126/science.abq1158&#34;&gt;Science&lt;/a&gt;, with a preprint on &lt;a href=&#34;https://arxiv.org/abs/2203.07814&#34;&gt;arXiv&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It consists of programming problems, from a variety of sources:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Site&lt;/th&gt; &#xA;   &lt;th&gt;URL&lt;/th&gt; &#xA;   &lt;th&gt;Source&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Aizu&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://judge.u-aizu.ac.jp&#34;&gt;https://judge.u-aizu.ac.jp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/IBM/Project_CodeNet&#34;&gt;CodeNet&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AtCoder&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://atcoder.jp&#34;&gt;https://atcoder.jp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/IBM/Project_CodeNet&#34;&gt;CodeNet&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CodeChef&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.codechef.com&#34;&gt;https://www.codechef.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ethancaballero/description2code&#34;&gt;description2code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Codeforces&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://codeforces.com&#34;&gt;https://codeforces.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ethancaballero/description2code&#34;&gt;description2code&lt;/a&gt; and Codeforces&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HackerEarth&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.hackerearth.com&#34;&gt;https://www.hackerearth.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ethancaballero/description2code&#34;&gt;description2code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Problems include test cases in the form of paired inputs and outputs, as well as both correct and incorrect human solutions in a variety of languages.&lt;/p&gt; &#xA;&lt;h2&gt;Downloading the dataset&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/sdk/docs/quickstart&#34;&gt;Install the Cloud SDK&lt;/a&gt;, which provides the &lt;code&gt;gsutil&lt;/code&gt; utility. You can then download the full data (~3GiB) with, e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gsutil -m cp -r gs://dm-code_contests /tmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The data consists of &lt;code&gt;ContestProblem&lt;/code&gt; protocol buffers in &lt;a href=&#34;https://github.com/google/riegeli&#34;&gt;Riegeli&lt;/a&gt; format. See &lt;code&gt;contest_problem.proto&lt;/code&gt; for the protocol buffer definition and documentation of its fields.&lt;/p&gt; &#xA;&lt;p&gt;The dataset contains three splits:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Split&lt;/th&gt; &#xA;   &lt;th&gt;Filename&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Training&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;code_contests_train.riegeli-*-of-00128&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Validation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;code_contests_valid.riegeli&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;code_contests_test.riegeli&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;There is example code for iterating over the dataset in C++ (in &lt;code&gt;print_names.cc&lt;/code&gt;) and Python (in &lt;code&gt;print_names_and_sources.py&lt;/code&gt;). For example, you can print the source and name of each problem in the validation data by &lt;a href=&#34;https://docs.bazel.build/versions/main/install.html&#34;&gt;installing bazel&lt;/a&gt; and then running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel run -c opt \&#xA;  :print_names_and_sources /tmp/dm-code_contests/code_contests_valid.riegeli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or do the same for the training data with the following command (which will print around 13000 lines of output):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel run -c opt \&#xA;  :print_names_and_sources /tmp/dm-code_contests/code_contests_train.riegeli*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Executing and evaluating solutions&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;execution&lt;/code&gt; subdirectory contains code for executing a solution and evaluating whether it solves a problem. &lt;code&gt;solve_example&lt;/code&gt; demonstrates this functionality, and can be run with e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel run -c opt execution:solve_example -- \&#xA;  /tmp/dm-code_contests/code_contests_valid.riegeli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The execution code defaults to using Python 3.9 and 2.7, located at &lt;code&gt;/usr/bin/python3.9&lt;/code&gt; and &lt;code&gt;/usr/bin/python2.7&lt;/code&gt;, with standard libraries at &lt;code&gt;/usr/lib/python3.9&lt;/code&gt; and &lt;code&gt;/usr/lib/python2.7&lt;/code&gt;. These can be changed with the flags defined in &lt;code&gt;py_locations.cc&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel run -c opt execution:solve_example -- \&#xA;  --valid_path=/tmp/dm-code_contests/code_contests_valid.riegeli \&#xA;  --python3_path=/usr/bin/python3.10 --python3_library_paths=/usr/lib/python3.10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported platforms&lt;/h2&gt; &#xA;&lt;p&gt;This repository is supported on Linux, compiled with clang.&lt;/p&gt; &#xA;&lt;h2&gt;Citing this work&lt;/h2&gt; &#xA;&lt;p&gt;If you use this dataset or code, please cite this paper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{&#xA;  doi:10.1126/science.abq1158,&#xA;  author = {Yujia Li  and David Choi  and Junyoung Chung  and Nate Kushman  and Julian Schrittwieser  and R{\&#39;e}mi Leblond  and Tom Eccles  and James Keeling  and Felix Gimeno  and Agustin Dal Lago  and Thomas Hubert  and Peter Choy  and Cyprien de Masson d’Autume  and Igor Babuschkin  and Xinyun Chen  and Po-Sen Huang  and Johannes Welbl  and Sven Gowal  and Alexey Cherepanov  and James Molloy  and Daniel J. Mankowitz  and Esme Sutherland Robson  and Pushmeet Kohli  and Nando de Freitas  and Koray Kavukcuoglu  and Oriol Vinyals },&#xA;  title = {Competition-level code generation with AlphaCode},&#xA;  journal = {Science},&#xA;  volume = {378},&#xA;  number = {6624},&#xA;  pages = {1092-1097},&#xA;  year = {2022},&#xA;  doi = {10.1126/science.abq1158},&#xA;  URL = {https://www.science.org/doi/abs/10.1126/science.abq1158},&#xA;  eprint = {https://www.science.org/doi/pdf/10.1126/science.abq1158},&#xA;  abstract = {Programming is a powerful and ubiquitous problem-solving tool. Systems that can assist programmers or even generate programs themselves could make programming more productive and accessible. Recent transformer-based neural network models show impressive code generation abilities yet still perform poorly on more complex tasks requiring problem-solving skills, such as competitive programming problems. Here, we introduce AlphaCode, a system for code generation that achieved an average ranking in the top 54.3\% in simulated evaluations on recent programming competitions on the Codeforces platform. AlphaCode solves problems by generating millions of diverse programs using specially trained transformer-based networks and then filtering and clustering those programs to a maximum of just 10 submissions. This result marks the first time an artificial intelligence system has performed competitively in programming competitions. Computer programming competitions are popular tests among programmers that require critical thinking informed by experience and creating solutions to unforeseen problems, both of which are key aspects of human intelligence but challenging to mimic by machine learning models. Using self-supervised learning and an encoder-decoder transformer architecture, Li et al. developed AlphaCode, a deep-learning model that can achieve approximately human-level performance on the Codeforces platform, which regularly hosts these competitions and attracts numerous participants worldwide (see the Perspective by Kolter). The development of such coding platforms could have a huge impact on programmers’ productivity. It may even change the culture of programming by shifting human work to formulating problems, with machine learning being the main one responsible for generating and executing codes. —YS Modern machine learning systems can achieve average human-level performance in popular competitive programming contests.}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code is licensed under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All non-code materials provided are made available under the terms of the CC BY 4.0 license (&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;Creative Commons Attribution 4.0 International license&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;We gratefully acknowledge the contributions of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Codeforces materials are sourced from &lt;a href=&#34;http://codeforces.com&#34;&gt;http://codeforces.com&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Description2Code materials are sourced from: &lt;a href=&#34;https://github.com/ethancaballero/description2code&#34;&gt;Description2Code Dataset&lt;/a&gt;, licensed under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT open source license&lt;/a&gt;, copyright not specified.&lt;/li&gt; &#xA; &lt;li&gt;CodeNet materials are sourced from: &lt;a href=&#34;https://github.com/IBM/Project_CodeNet&#34;&gt;Project_CodeNet&lt;/a&gt;, licensed under &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache 2.0&lt;/a&gt;, copyright not specified.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use of the third-party software, libraries code or data may be governed by separate terms and conditions or license provisions. Your use of the third-party software, libraries or code may be subject to any such terms. We make no representations here with respect to rights or abilities to use any such materials.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This is not an official Google product.&lt;/p&gt;</summary>
  </entry>
</feed>