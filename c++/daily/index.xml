<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-11T01:31:03Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BYVoid/OpenCC</title>
    <updated>2023-03-11T01:31:03Z</updated>
    <id>tag:github.com,2023-03-11:/BYVoid/OpenCC</id>
    <link href="https://github.com/BYVoid/OpenCC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Conversion between Traditional and Simplified Chinese&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Open Chinese Convert 開放中文轉換&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/BYVoid/OpenCC&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/BYVoid/OpenCC.svg?sanitize=true&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/Carbo/OpenCC&#34;&gt;&lt;img src=&#34;https://img.shields.io/appveyor/ci/Carbo/OpenCC.svg?sanitize=true&#34; alt=&#34;AppVeyor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/BYVoid/OpenCC/actions/workflows/cmake.yml&#34;&gt;&lt;img src=&#34;https://github.com/BYVoid/OpenCC/actions/workflows/cmake.yml/badge.svg?sanitize=true&#34; alt=&#34;C/C++ CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/BYVoid/OpenCC/actions/workflows/nodejs.yml&#34;&gt;&lt;img src=&#34;https://github.com/BYVoid/OpenCC/actions/workflows/nodejs.yml/badge.svg?sanitize=true&#34; alt=&#34;Node.js CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/BYVoid/OpenCC/actions/workflows/python.yml&#34;&gt;&lt;img src=&#34;https://github.com/BYVoid/OpenCC/actions/workflows/python.yml/badge.svg?sanitize=true&#34; alt=&#34;Python CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction 介紹&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://opencc.byvoid.com/img/opencc.png&#34; alt=&#34;OpenCC&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open Chinese Convert (OpenCC, 開放中文轉換) is an opensource project for conversions between Traditional Chinese, Simplified Chinese and Japanese Kanji (Shinjitai). It supports character-level and phrase-level conversion, character variant conversion and regional idioms among Mainland China, Taiwan and Hong Kong. This is not translation tool between Mandarin and Cantonese, etc.&lt;/p&gt; &#xA;&lt;p&gt;中文簡繁轉換開源項目，支持詞彙級別的轉換、異體字轉換和地區習慣用詞轉換（中國大陸、臺灣、香港、日本新字體）。不提供普通話與粵語的轉換。&lt;/p&gt; &#xA;&lt;p&gt;Discussion (Telegram): &lt;a href=&#34;https://t.me/open_chinese_convert&#34;&gt;https://t.me/open_chinese_convert&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features 特點&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;嚴格區分「一簡對多繁」和「一簡對多異」。&lt;/li&gt; &#xA; &lt;li&gt;完全兼容異體字，可以實現動態替換。&lt;/li&gt; &#xA; &lt;li&gt;嚴格審校一簡對多繁詞條，原則爲「能分則不合」。&lt;/li&gt; &#xA; &lt;li&gt;支持中國大陸、臺灣、香港異體字和地區習慣用詞轉換，如「裏」「裡」、「鼠標」「滑鼠」。&lt;/li&gt; &#xA; &lt;li&gt;詞庫和函數庫完全分離，可以自由修改、導入、擴展。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation 安裝&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/BYVoid/OpenCC/wiki/Download&#34;&gt;Download&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage 使用&lt;/h2&gt; &#xA;&lt;h3&gt;Online demo 線上轉換展示&lt;/h3&gt; &#xA;&lt;p&gt;Warning: &lt;strong&gt;This is NOT an API.&lt;/strong&gt; You will be banned if you make calls programmatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencc.byvoid.com/&#34;&gt;https://opencc.byvoid.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Node.js&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/opencc&#34;&gt;npm&lt;/a&gt; &lt;code&gt;npm install opencc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;JavaScript&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const OpenCC = require(&#39;opencc&#39;);&#xA;const converter = new OpenCC(&#39;s2t.json&#39;);&#xA;converter.convertPromise(&#34;汉字&#34;).then(converted =&amp;gt; {&#xA;  console.log(converted);  // 漢字&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TypeScript&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { OpenCC } from &#39;opencc&#39;;&#xA;async function main() {&#xA;  const converter: OpenCC = new OpenCC(&#39;s2t.json&#39;);&#xA;  const result: string = await converter.convertPromise(&#39;汉字&#39;);&#xA;  console.log(result);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/BYVoid/OpenCC/raw/master/node/demo.js&#34;&gt;demo.js&lt;/a&gt; and &lt;a href=&#34;https://github.com/BYVoid/OpenCC/raw/master/node/ts-demo.ts&#34;&gt;ts-demo.ts&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/OpenCC/&#34;&gt;PyPI&lt;/a&gt; &lt;code&gt;pip install opencc&lt;/code&gt; (Windows, Linux, Mac)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import opencc&#xA;converter = opencc.OpenCC(&#39;s2t.json&#39;)&#xA;converter.convert(&#39;汉字&#39;)  # 漢字&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;C++&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;opencc.h&#34;&#xA;&#xA;int main() {&#xA;  const opencc::SimpleConverter converter(&#34;s2t.json&#34;);&#xA;  converter.Convert(&#34;汉字&#34;);  // 漢字&#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;C&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;opencc.h&#34;&#xA;&#xA;int main() {&#xA;  opencc_t opencc = opencc_open(&#34;s2t.json&#34;);&#xA;  const char* input = &#34;汉字&#34;;&#xA;  char* converted = opencc_convert_utf8(opencc, input, strlen(input));  // 漢字&#xA;  opencc_convert_utf8_free(converted);&#xA;  opencc_close(opencc);&#xA;  return 0;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Document 文檔: &lt;a href=&#34;https://byvoid.github.io/OpenCC/&#34;&gt;https://byvoid.github.io/OpenCC/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Command Line&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;opencc --help&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opencc_dict --help&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opencc_phrase_extract --help&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Others (Unofficial)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift (iOS): &lt;a href=&#34;https://github.com/XQS6LB3A/SwiftyOpenCC&#34;&gt;SwiftyOpenCC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;iOSOpenCC (pod): &lt;a href=&#34;https://github.com/swiftdo/OpenCC&#34;&gt;iOSOpenCC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java: &lt;a href=&#34;https://github.com/houbb/opencc4j&#34;&gt;opencc4j&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android: &lt;a href=&#34;https://github.com/qichuan/android-opencc&#34;&gt;android-opencc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHP: &lt;a href=&#34;https://github.com/nauxliu/opencc4php&#34;&gt;opencc4php&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pure JavaScript: &lt;a href=&#34;https://github.com/nk2028/opencc-js&#34;&gt;opencc-js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WebAssembly: &lt;a href=&#34;https://github.com/oyyd/wasm-opencc&#34;&gt;wasm-opencc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Browser Extension: &lt;a href=&#34;https://github.com/tnychn/opencc-extension&#34;&gt;opencc-extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go (Pure): &lt;a href=&#34;https://github.com/longbridgeapp/opencc&#34;&gt;OpenCC for Go&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configurations 配置文件&lt;/h3&gt; &#xA;&lt;h4&gt;預設配置文件&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;s2t.json&lt;/code&gt; Simplified Chinese to Traditional Chinese 簡體到繁體&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;t2s.json&lt;/code&gt; Traditional Chinese to Simplified Chinese 繁體到簡體&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s2tw.json&lt;/code&gt; Simplified Chinese to Traditional Chinese (Taiwan Standard) 簡體到臺灣正體&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tw2s.json&lt;/code&gt; Traditional Chinese (Taiwan Standard) to Simplified Chinese 臺灣正體到簡體&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s2hk.json&lt;/code&gt; Simplified Chinese to Traditional Chinese (Hong Kong variant) 簡體到香港繁體&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hk2s.json&lt;/code&gt; Traditional Chinese (Hong Kong variant) to Simplified Chinese 香港繁體到簡體&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s2twp.json&lt;/code&gt; Simplified Chinese to Traditional Chinese (Taiwan Standard) with Taiwanese idiom 簡體到繁體（臺灣正體標準）並轉換爲臺灣常用詞彙&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tw2sp.json&lt;/code&gt; Traditional Chinese (Taiwan Standard) to Simplified Chinese with Mainland Chinese idiom 繁體（臺灣正體標準）到簡體並轉換爲中國大陸常用詞彙&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;t2tw.json&lt;/code&gt; Traditional Chinese (OpenCC Standard) to Taiwan Standard 繁體（OpenCC 標準）到臺灣正體&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hk2t.json&lt;/code&gt; Traditional Chinese (Hong Kong variant) to Traditional Chinese 香港繁體到繁體（OpenCC 標準）&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;t2hk.json&lt;/code&gt; Traditional Chinese (OpenCC Standard) to Hong Kong variant 繁體（OpenCC 標準）到香港繁體&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;t2jp.json&lt;/code&gt; Traditional Chinese Characters (Kyūjitai) to New Japanese Kanji (Shinjitai) 繁體（OpenCC 標準，舊字體）到日文新字體&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jp2t.json&lt;/code&gt; New Japanese Kanji (Shinjitai) to Traditional Chinese Characters (Kyūjitai) 日文新字體到繁體（OpenCC 標準，舊字體）&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tw2t.json&lt;/code&gt; Traditional Chinese (Taiwan standard) to Traditional Chinese 臺灣正體到繁體（OpenCC 標準）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build 編譯&lt;/h2&gt; &#xA;&lt;h3&gt;Build with CMake&lt;/h3&gt; &#xA;&lt;h4&gt;Linux &amp;amp; Mac OS X&lt;/h4&gt; &#xA;&lt;p&gt;g++ 4.6+ or clang 3.2+ is required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows Visual Studio:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;build.cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test 測試&lt;/h3&gt; &#xA;&lt;h4&gt;Linux &amp;amp; Mac OS X&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows Visual Studio:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;test.cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Benchmark 基準測試&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;make benchmark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example results (from Github CI):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1: ------------------------------------------------------------------&#xA;1: Benchmark                        Time             CPU   Iterations&#xA;1: ------------------------------------------------------------------&#xA;1: BM_Initialization/hk2s        1.56 ms         1.56 ms          442&#xA;1: BM_Initialization/hk2t       0.144 ms        0.144 ms         4878&#xA;1: BM_Initialization/jp2t       0.260 ms        0.260 ms         2604&#xA;1: BM_Initialization/s2hk        23.8 ms         23.8 ms           29&#xA;1: BM_Initialization/s2t         25.6 ms         25.6 ms           28&#xA;1: BM_Initialization/s2tw        24.0 ms         23.9 ms           30&#xA;1: BM_Initialization/s2twp       24.6 ms         24.6 ms           28&#xA;1: BM_Initialization/t2hk       0.052 ms        0.052 ms        12897&#xA;1: BM_Initialization/t2jp       0.141 ms        0.141 ms         5012&#xA;1: BM_Initialization/t2s         1.30 ms         1.30 ms          540&#xA;1: BM_Initialization/tw2s        1.39 ms         1.39 ms          529&#xA;1: BM_Initialization/tw2sp       1.69 ms         1.69 ms          426&#xA;1: BM_Initialization/tw2t       0.089 ms        0.089 ms         7707&#xA;1: BM_Convert2M                   582 ms          582 ms            1&#xA;1: BM_Convert/100                1.07 ms         1.07 ms          636&#xA;1: BM_Convert/1000               11.0 ms         11.0 ms           67&#xA;1: BM_Convert/10000               113 ms          113 ms            6&#xA;1: BM_Convert/100000             1176 ms         1176 ms            1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Projects using OpenCC 使用 OpenCC 的項目&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ibus/ibus-pinyin&#34;&gt;ibus-pinyin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fcitx/fcitx&#34;&gt;fcitx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rime.im/&#34;&gt;rimeime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://code.google.com/p/libgooglepinyin/&#34;&gt;libgooglepinyin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libpinyin/ibus-libpinyin&#34;&gt;ibus-libpinyin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amowu/alfred-chinese-converter&#34;&gt;alfred-chinese-converter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/goldendict/goldendict&#34;&gt;GoldenDict&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License 許可協議&lt;/h2&gt; &#xA;&lt;p&gt;Apache License 2.0&lt;/p&gt; &#xA;&lt;h2&gt;Third Party Library 第三方庫&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/s-yata/darts-clone&#34;&gt;darts-clone&lt;/a&gt; BSD License&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/s-yata/marisa-trie&#34;&gt;marisa-trie&lt;/a&gt; BSD License&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tclap.sourceforge.net/&#34;&gt;tclap&lt;/a&gt; MIT License&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/rapidjson&#34;&gt;rapidjson&lt;/a&gt; MIT License&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/googletest&#34;&gt;Google Test&lt;/a&gt; BSD License&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All these libraries are statically linked by default.&lt;/p&gt; &#xA;&lt;h2&gt;Change History 版本歷史&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BYVoid/OpenCC/raw/master/NEWS.md&#34;&gt;NEWS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Links 相關鏈接&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction 詳細介紹 &lt;a href=&#34;https://github.com/BYVoid/OpenCC/wiki/%E7%B7%A3%E7%94%B1&#34;&gt;https://github.com/BYVoid/OpenCC/wiki/%E7%B7%A3%E7%94%B1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;現代漢語常用簡繁一對多字義辨析表 &lt;a href=&#34;http://ytenx.org/byohlyuk/KienxPyan&#34;&gt;http://ytenx.org/byohlyuk/KienxPyan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors 貢獻者&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.byvoid.com/&#34;&gt;BYVoid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lotem&#34;&gt;佛振&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phuang&#34;&gt;Peng Huang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lidaobing&#34;&gt;LI Daobing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tchaikov&#34;&gt;Kefu Chai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://kanru.info/&#34;&gt;Kan-Ru Chen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/damage3025&#34;&gt;Ma Xiaojun&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://jjgod.org/&#34;&gt;Jiang Jiang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rueycheng&#34;&gt;Ruey-Cheng Chen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://home.mno2.org/&#34;&gt;Paul Meng&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ktslwy&#34;&gt;Lawrence Lau&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kunki&#34;&gt;瑾昀&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SyaoranHinata&#34;&gt;內木一郎&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.marguerite.su/&#34;&gt;Marguerite Su&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mscdex.net&#34;&gt;Brian White&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fqj.me/&#34;&gt;Qijiang Fan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LEOYoon-Tsaw&#34;&gt;LEOYoon-Tsaw&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stevenyao&#34;&gt;Steven Yao&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pellaeon&#34;&gt;Pellaeon Lin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stony-shixz&#34;&gt;stony&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/steelywing&#34;&gt;steelywing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lvxudong&#34;&gt;吕旭东&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wengxt&#34;&gt;Weng Xuetian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iwater&#34;&gt;Ma Tao&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pprkut&#34;&gt;Heinz Wiesinger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jakwings&#34;&gt;J.W&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amowu&#34;&gt;Amo Wu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mxgit1090&#34;&gt;Mark Tsai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x1997&#34;&gt;Zhe Wang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sgqy&#34;&gt;sgqy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qichuan&#34;&gt;Qichuan (Sean) ZHANG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/XadillaX&#34;&gt;Flandre Scarlet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/songchenwen&#34;&gt;宋辰文&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iwater&#34;&gt;iwater&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xpol&#34;&gt;Xpol Wan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/weihanglo&#34;&gt;Weihang Lo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pi314&#34;&gt;Cychih&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyleskimo&#34;&gt;kyleskimo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bunhere&#34;&gt;Ryuan Choi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Prcuvu&#34;&gt;Prcuvu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TonyAble&#34;&gt;Tony Able&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yxliang01&#34;&gt;Xiao Liang&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please feel free to update this list if you have contributed OpenCC.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>0voice/cpp_new_features</title>
    <updated>2023-03-11T01:31:03Z</updated>
    <id>tag:github.com,2023-03-11:/0voice/cpp_new_features</id>
    <link href="https://github.com/0voice/cpp_new_features" rel="alternate"></link>
    <summary type="html">&lt;p&gt;2021年最新整理， C++ 学习资料，含C++ 11 / 14 / 17 / 20 / 23 新特性、入门教程、推荐书籍、优质文章、学习笔记、教学视频等&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🌞🌞🌞 2021年最新整理， C++ 学习资料，含C++ 11 / 14 / 17 / 20 / 23 新特性、入门教程、推荐书籍、优质文章、学习笔记、教学视频等&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;70%&#34; height=&#34;70%&#34; src=&#34;https://user-images.githubusercontent.com/87457873/134297801-d13053cc-0a5d-4efd-9f02-9343b513fc33.png&#34;&gt; &#xA; &lt;h2&gt;🚀 直达 &lt;a href=&#34;https://raw.githubusercontent.com/0voice/cpp_new_features/main/#cpp_11&#34;&gt;（# C++11）&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/0voice/cpp_new_features/main/#cpp_14&#34;&gt;（# C++14）&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/0voice/cpp_new_features/main/#cpp_17&#34;&gt;（# C++17）&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/0voice/cpp_new_features/main/#cpp_20&#34;&gt;（# C++20）&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/0voice/cpp_new_features/main/#cpp_23&#34;&gt;（# C++23）&lt;/a&gt;&lt;/h2&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;🔥🔥🔥 &lt;a href=&#34;https://c-cpp.com/cpp&#34;&gt;【重磅推荐收藏：C++ 参考手册】&lt;/a&gt; - 11~20你想要查的，他都有&lt;/h1&gt; &#xA;&lt;h1&gt;🌋 C++ 发展历程&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;C++ 编程语言的历史可以追溯到 &lt;strong&gt;1979 年&lt;/strong&gt;，当时 Bjarne Stroustrup 为博士学位论文进行了一些开发。在 Stroustrup 可以使用的所有语言中，有一种被称为 Simula 的语言，顾名思义，它可能是一种主要为仿真而设计的语言。Simula 67 语言是 Stroustrup 使用的变体，被认为是支持面向对象编程范例的主要语言。Stroustrup 发现这种范例对包装开发很有帮助。但是，Simula 语言对于实践和实际使用而言太慢了。 随后不久，Bjarne Stroustrup 希望通过支持面向对象范例来增强 C。他深入研究了 Smalltalk 的 OO 实现，以获取有关实现的想法。但是他不愿意为此放弃性能，因此他开始从事 “C with Classes (带有类的 C）” 的工作，希望 C++ 代码运行时应具有与 C 代码相似（或更好）的性能。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;1983 年&lt;/strong&gt;，语言的名称从 “带有类的 C” 更改为 C++。C 语言中的 ++ 运算符是用于递增变量的运算符，它使您可以深入了解 Stroustrup 如何看待该语言。在此期间添加了许多新功能，其中最引人注目的是虚函数，函数重载，带有＆符号的引用，const 关键字和使用两个正斜杠的单行注释。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;1985 年&lt;/strong&gt;，Stroustrup 出版了名为*“C++ 编程语言” 的书籍*。同年，C++ 被实现为商业产品。该语言尚未正式标准化，因此使该书成为非常重要的参考。该语言在 1989 年再次进行了更新，以包括受保护的成员和静态成员，以及从多个类的继承。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;1990 年&lt;/strong&gt;，发行了*《带注释的 C++ 参考手册*》。同年，Borland 的 Turbo C++ 编译器将作为商业产品发布。Turbo C++ 添加了许多其他库，这些库会对 C++ 的开发产生相当大的影响。尽管 Turbo C++ 的最后一个稳定版本是 2006 年，但该编译器仍被广泛使用。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;1998 年&lt;/strong&gt;，C++ 标准委员会发布了第一个 C++ ISO / IEC 14882：1998 国际标准，其非正式名称为 C++ 98。据说*《带注释的 C++ 参考手册*》对标准的制定产生了很大的影响。还包括标准模板库，该模板库于 1979 年开始概念开发。2003 年，该委员会对 1998 年标准所报告的多个问题做出了回应，并对其进行了相应的修订。更改的语言称为 C++ 03。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;2005 年&lt;/strong&gt;，C++ 标准委员会发布了一份技术报告（称为 TR1），详细介绍了他们计划添加到最新 C++ 标准中的各种功能。新标准被非正式地称为 C++ 0x，因为它有望在第一个十年结束之前的某个时间发布。具有讽刺意味的是，新标准要到 2011 年年中才会发布。直到那时为止，已经发布了几份技术报告，并且一些编译器开始为新功能添加实验性支持。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;2011 年中&lt;/strong&gt;，新的 C++ 标准（称为 C++ 11）完成。Boost 库项目对新标准产生了重大影响，其中一些新模块直接来自相应的 Boost 库。一些新功能包括正则表达式支持，全面的随机化库，新的 C++ 时间库，原子支持，标准线程库 ，一种新的 for 循环语法，提供的功能类似于某些其他语言中的 foreach 循环，auto 关键字，新的容器类，对联合和数组初始化列表以及可变参数模板的更好支持。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;2014 年&lt;/strong&gt;，C++ 14（也称为 C++ 1y）作为 C++11 的一个小扩展发布，主要功能是错误修复和小的改进，国际标准投票程序草案于 2014 年 8 月中完成，加强 lambda 函数，constexpr 和类型推导特性。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;2017 年&lt;/strong&gt;，发布 C17 标准，C17 提供了很多东西。增强了核心语言和库。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;2020 年&lt;/strong&gt;，发布 C++20 标准，推出了很多重量级功能，其中比较重要的有：&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Concepts：概念改变了我们思考和编程模板的方式。它们是模板参数的语义类别。它们使您可以直接在类型系统中表达您的意图。如果出了什么问题，您会收到清晰的错误消息。&lt;/li&gt; &#xA;   &lt;li&gt;Ranges library：新的 ranges 库使它可以直接在容器上执行算法，用管道符号组成算法，并将其应用于无限数据流。&lt;/li&gt; &#xA;   &lt;li&gt;Coroutines：由于协程，C++ 中的异步编程成为主流。协程是协作任务，事件循环，无限数据流或管道的基础。&lt;/li&gt; &#xA;   &lt;li&gt;Modules：模块克服了头文件的限制。头文件和源文件的分离变得和预处理器一样过时了。最后，我们有更快的构建时间和更轻松的构建软件包的方法。&lt;/li&gt; &#xA;   &lt;li&gt;Concurrency：Atomic Smart Pointers,Joining &amp;amp; Cancellable Threads,The C20 Synchronization Library，增强了 C++ 并发编程能力；&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;🚪 入门教程&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md&#34;&gt;C++ 入门教程（41课时） - 阿里云大学&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E6%95%99%E7%A8%8B&#34;&gt;C++ 教程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E7%AE%80%E4%BB%8B&#34;&gt;C++ 简介&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE&#34;&gt;C++ 环境设置&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95&#34;&gt;C++ 基本语法&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E6%B3%A8%E9%87%8A&#34;&gt;C++ 注释&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B&#34;&gt;C++ 数据类型&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B&#34;&gt;C++ 变量类型&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F&#34;&gt;C++ 变量作用域&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%B8%B8%E9%87%8F&#34;&gt;C++ 常量&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%B1%BB%E5%9E%8B&#34;&gt;C++ 修饰符类型&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%AD%98%E5%82%A8%E7%B1%BB&#34;&gt;C++ 存储类&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E8%BF%90%E7%AE%97%E7%AC%A6&#34;&gt;C++ 运算符&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%BE%AA%E7%8E%AF&#34;&gt;C++ 循环&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%88%A4%E6%96%AD&#34;&gt;C++ 判断&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%87%BD%E6%95%B0&#34;&gt;C++ 函数&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E6%95%B0%E5%AD%97&#34;&gt;C++ 数字&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E6%95%B0%E7%BB%84&#34;&gt;C++ 数组&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%AD%97%E7%AC%A6%E4%B8%B2&#34;&gt;C++ 字符串&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E6%8C%87%E9%92%88&#34;&gt;C++ 指针&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%BC%95%E7%94%A8&#34;&gt;C++ 引用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E6%97%A5%E6%9C%9F--%E6%97%B6%E9%97%B4&#34;&gt;C++ 日期 &amp;amp; 时间&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA&#34;&gt;C++ 基本的输入输出&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&#34;&gt;C++ 数据结构&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E7%B1%BB--%E5%AF%B9%E8%B1%A1&#34;&gt;C++ 类 &amp;amp; 对象&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E7%BB%A7%E6%89%BF&#34;&gt;C++ 继承&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0&#34;&gt;C++ 重载运算符和重载函数&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%A4%9A%E6%80%81&#34;&gt;C++ 多态&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1&#34;&gt;C++ 数据抽象&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85&#34;&gt;C++ 数据封装&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E6%8E%A5%E5%8F%A3%E6%8A%BD%E8%B1%A1%E7%B1%BB&#34;&gt;C++ 接口（抽象类）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E6%96%87%E4%BB%B6%E5%92%8C%E6%B5%81&#34;&gt;C++ 文件和流&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86&#34;&gt;C++ 异常处理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98&#34;&gt;C++ 动态内存&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4&#34;&gt;C++ 命名空间&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E6%A8%A1%E6%9D%BF&#34;&gt;C++ 模板&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8&#34;&gt;C++ 预处理器&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86&#34;&gt;C++ 信号处理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E5%A4%9A%E7%BA%BF%E7%A8%8B&#34;&gt;C++ 多线程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-web-%E7%BC%96%E7%A8%8B&#34;&gt;C++ Web 编程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-stl-%E6%95%99%E7%A8%8B&#34;&gt;C++ STL 教程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%8841%E8%AF%BE%E6%97%B6%EF%BC%89%20-%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E5%AD%A6.md#c-%E6%A0%87%E5%87%86%E5%BA%93&#34;&gt;C++ 标准库&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md&#34;&gt;C++ 学习笔记&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md#%E4%B8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86&#34;&gt;一、基础知识&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;1、goto 语句(不建议使用)&lt;/li&gt; &#xA;   &lt;li&gt;2、一维数组&lt;/li&gt; &#xA;   &lt;li&gt;3、二维数组&lt;/li&gt; &#xA;   &lt;li&gt;4、函数中的值传递&lt;/li&gt; &#xA;   &lt;li&gt;5、函数的声明&lt;/li&gt; &#xA;   &lt;li&gt;6、函数的分文件编写&lt;/li&gt; &#xA;   &lt;li&gt;7、指针 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;7.1 指针的基本概念&lt;/li&gt; &#xA;     &lt;li&gt;7.2 指针变量的定义和使用&lt;/li&gt; &#xA;     &lt;li&gt;7.3 指针所占内存空间&lt;/li&gt; &#xA;     &lt;li&gt;7.4 空指针和野指针&lt;/li&gt; &#xA;     &lt;li&gt;7.5 const修饰指针&lt;/li&gt; &#xA;     &lt;li&gt;7.6 指针和数组&lt;/li&gt; &#xA;     &lt;li&gt;7.7 指针和函数&lt;/li&gt; &#xA;     &lt;li&gt;7.8 指针、数组、函数&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;8、结构体 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;8.1 结构体基本概念&lt;/li&gt; &#xA;     &lt;li&gt;8.2 结构体定义和使用&lt;/li&gt; &#xA;     &lt;li&gt;8.3 结构体数组&lt;/li&gt; &#xA;     &lt;li&gt;8.4 结构体指针&lt;/li&gt; &#xA;     &lt;li&gt;8.5 结构体嵌套结构体&lt;/li&gt; &#xA;     &lt;li&gt;8.6 结构体做函数参数&lt;/li&gt; &#xA;     &lt;li&gt;8.7 结构体中 const使用场景&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md#%E4%BA%8C%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B&#34;&gt;二、核心编程&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;1、内存分区模型 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;1.1 程序运行前&lt;/li&gt; &#xA;     &lt;li&gt;1.2 程序运行后&lt;/li&gt; &#xA;     &lt;li&gt;1.3 new操作符&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;2、引用 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;2.1 引用的基本使用&lt;/li&gt; &#xA;     &lt;li&gt;2.2 引用注意事项&lt;/li&gt; &#xA;     &lt;li&gt;2.3 引用做函数参数&lt;/li&gt; &#xA;     &lt;li&gt;2.4 引用做函数返回值&lt;/li&gt; &#xA;     &lt;li&gt;2.5 引用的本质&lt;/li&gt; &#xA;     &lt;li&gt;2.6 常量引用&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;3、函数 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;3.1 函数默认参数&lt;/li&gt; &#xA;     &lt;li&gt;3.2 函数占位参数&lt;/li&gt; &#xA;     &lt;li&gt;3.3 函数重载&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;📚 书籍推荐&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/LKc1X2mL9G9&#34;&gt;《深入理解C++11：C++11新特性解析与应用》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/30247747/&#34;&gt;《C++入门经典（第10版）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.epubit.com/bookDetails?id=UB7209840d845c9&#34;&gt;《C++ Primer Plus 第6版 中文版(异步图书出品)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://item.jd.com/12432130.html&#34;&gt;《清华计算机图书译丛：精通C++（第9版）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.tup.tsinghua.edu.cn/booksCenter/book_07894801.html&#34;&gt;《C++高级编程(第4版)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://item.jd.com/13265350.html&#34;&gt;《C++游戏编程入门（第4版）(异步图书出品)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/1110934/&#34;&gt;《STL源码剖析》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/27023080/&#34;&gt;《C++程序设计:原理与实践(基础篇)(原书第2版)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/2280545//&#34;&gt;《Accelerated C++中文版》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/6558198/&#34;&gt;《C++编程思想(两卷合订本)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/1792179/&#34;&gt;《中文版Effective STL:50条有效使用STL的经验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/5367371/&#34;&gt;《C++编程剖析:问题、方案和设计准则》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/1144020/&#34;&gt;《C++ Templates中文版》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/1103566/&#34;&gt;《C++设计新思维》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/4136223/&#34;&gt;《C++模板元编程》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26386925/&#34;&gt;《C++并发编程实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26857943/&#34;&gt;《C++程序设计语言(第1-3部分)(原书第4版)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26419721/&#34;&gt;《C++标准库(第2版)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/24868427/&#34;&gt;《Essential C++》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/1096216/&#34;&gt;《C++ 语言的设计与演化》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/1091086/&#34;&gt;《深度探索C++ 对象模型》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/1241423/&#34;&gt;《泛型编程与STL》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;📰 文章推荐&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E6%AF%8F%E4%B8%AAc%2B%2B%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E9%83%BD%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E7%9A%8410%E4%B8%AAc%2B%2B%2011%E7%89%B9%E6%80%A7.md&#34;&gt;每个c++开发人员都应该使用的10个c++11特性&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E5%9C%A8c%2B%2B%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9C%9F%E6%AD%A3%E4%BD%BF%E7%94%A8%E7%9A%8415%E4%B8%AAc%2B%2B%E7%89%B9%E6%80%A7.md&#34;&gt;在c++项目中你必须真正使用的15个c++11特性&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E5%A6%82%E4%BD%95%E5%9C%A8%20C%2B%2B11%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Lambda%20%E8%A1%A8%E8%BE%BE%E5%BC%8F.md&#34;&gt;如何在 C++11 中使用 Lambda 表达式&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3C%2B%2B11.md&#34;&gt;深入理解C++11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E5%90%90%E8%A1%80%E6%95%B4%E7%90%86%EF%BC%9AC%2B%2B11%E6%96%B0%E7%89%B9%E6%80%A7.md&#34;&gt;吐血整理：C++11新特性&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9AC++%2011%E6%96%B0%E7%89%B9%E6%80%A7.md#c11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8Bauto%E5%92%8Cdecltype%E7%9F%A5%E8%AF%86%E7%82%B9&#34;&gt;C++11新特性之auto和decltype知识点&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9AC++%2011%E6%96%B0%E7%89%B9%E6%80%A7.md#c11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91&#34;&gt;C++11新特性之左值引用、右值引用、移动语义、完美转发&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9AC++%2011%E6%96%B0%E7%89%B9%E6%80%A7.md#c11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96&#34;&gt;C++11新特性之列表初始化&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9AC++%2011%E6%96%B0%E7%89%B9%E6%80%A7.md#c11%E6%96%B0%E7%89%B9%E6%80%A7stdfunction%E5%92%8Clambda%E8%A1%A8%E8%BE%BE%E5%BC%8F&#34;&gt;C++11新特性std::function和lambda表达式&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9AC++%2011%E6%96%B0%E7%89%B9%E6%80%A7.md#c11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%94%B9%E8%BF%9B&#34;&gt;C++11新特性之模板改进&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9AC++%2011%E6%96%B0%E7%89%B9%E6%80%A7.md#c11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9&#34;&gt;C++11新特性之线程相关知识点&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9AC++%2011%E6%96%B0%E7%89%B9%E6%80%A7.md#c11-%E7%9A%84%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C-async&#34;&gt;C++11新特性之异步操作-async&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9AC++%2011%E6%96%B0%E7%89%B9%E6%80%A7.md#c11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88&#34;&gt;C++11新特性之智能指针&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B11%E5%B8%B8%E7%94%A8%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E4%B8%80%EF%BC%89.md&#34;&gt;C++11常用新特性（一）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C++11%E5%B8%B8%E7%94%A8%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E4%BA%8C%EF%BC%89.md&#34;&gt;C++11常用新特性（二）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E3%80%8CNotes%E3%80%8DC%2B%2B14%E6%96%B0%E7%89%B9%E6%80%A7%E6%B5%85%E8%B0%88.md&#34;&gt;C++14新特性浅谈&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B14%E6%96%B0%E7%89%B9%E6%80%A7%E7%9A%84%E6%89%80%E6%9C%89%E7%9F%A5%E8%AF%86%E7%82%B9%E5%85%A8%E5%9C%A8%E8%BF%99%E5%84%BF%E5%95%A6%EF%BC%81.md&#34;&gt;C++14新特性的所有知识点全在这儿啦&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3%EF%BC%9AC%2B%2B17%E6%96%B0%E7%89%B9%E6%80%A7.md&#34;&gt;总结归纳：C++17新特性&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/C%2B%2B%2020%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7.md&#34;&gt;C++ 20语言特性&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;▶ 教学视频&lt;/h1&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;【GeekBand】侯捷 - C++面向对象高级编程&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P1 C++编程简介&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P2 头文件与类的声明&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P3 构造函数&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P4 参数传递与返回值&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P5 操作符重载与临时对象&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P6 复习Complex类的实现过程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P7 三大函数：拷贝构造，拷贝复制，析构&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P8 堆，栈与内存管理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P9 复习String类的实现过程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P10 扩展补充：类模板，函数模板，及其他&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P11 组合与继承&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P13 委托相关设计&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P14 1 导读&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P15 2 conversion function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P16 3 non explicit one argument constructor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P17 4 pointer like classes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P18 5 function like classes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P19 6 namespace经验谈&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P20 7 class template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P21 8 Funtion Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P22 9 Member Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P23 10 specialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P24 11 模板偏特化&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P25 12 模板模板参数&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P26 13 关于C++标准库&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P27 14 三个主题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P28 15 Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P29 16 复合&amp;amp;继承关系下的构造和析构&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P30 17 关于vptr和vtbl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P31 18 关于this&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P32 19 0 关于Dynamic Binding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P33 19 1 关于Dynamic Binding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P34 20 关于New,Delete&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P35 21 Operator new，operator delete&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P36 22 示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P37 23 重载new,delete$示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliyundrive.com/s/HapPXxjQ1U7&#34;&gt;P38 24 Basic String使用newextra扩充申请量&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;🌰 干货铺&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/C%2B%2B_Standard_Library&#34;&gt;C++ Standard Library&lt;/a&gt; - 一系列类和函数的集合，使用核心语言编写，也是C++ISO自身标准的一部分&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Standard_Template_Library&#34;&gt;Standard Template Library&lt;/a&gt; - 标准模板库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/C_POSIX_library&#34;&gt;C POSIX library&lt;/a&gt; - POSIX系统的C标准库规范&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cplusplus&#34;&gt;ISO C++ Standards Committee&lt;/a&gt; - C++标准委员会&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://isocpp.org/faq&#34;&gt;C++ FAQ&lt;/a&gt; − C++ 常见问题&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thefreecountry.com/sourcecode/cpp.shtml?spm=5176.10731542.0.0.4fc35bde2jHhz4&#34;&gt;Free Country&lt;/a&gt; − Free Country 提供了免费的 C++ 源代码和 C++ 库，这些源代码和库涵盖了压缩、存档、游戏编程、标准模板库和 GUI 编程等 C++ 编程领域。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.hal9k.com/cug/?spm=5176.10731542.0.0.4fc35bde2jHhz4&#34;&gt;C and C++ Users Group&lt;/a&gt; − C 和 C++ 的用户团体提供了免费的涵盖各种编程领域 C++ 项目的源代码，包括 AI、动画、编译器、数据库、调试、加密、游戏、图形、GUI、语言工具、系统编程等&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.learncpp.com/&#34;&gt;LearnCpp&lt;/a&gt; - 免费学习c++编程&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codecogs.com/&#34;&gt;CodeCogs&lt;/a&gt; - CodeCogs是一项协作的开放源码库，C/C++的数值方面的组件&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codeproject.com/&#34;&gt;codeproject&lt;/a&gt; - codeproject提供的C/C++资源代码项目&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thoughtco.com/c-and-c-plus-programming-4133470&#34;&gt;thoughtco&lt;/a&gt; - 游戏有关的C++源代码&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.programmerworld.net/resources/c_library.htm&#34;&gt;Free C/C++ Libraries&lt;/a&gt; - 免费C++源代码和其它有用的工具&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.josuttis.com/libbook/examples.html&#34;&gt;The C++ Standard Library&lt;/a&gt; - 这是一个收集了数C/C++网站链接列表的网页&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.cplusplus.com/&#34;&gt;cplusplus&lt;/a&gt; - C++学习网站&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://people.sc.fsu.edu/~jburkardt/cpp_src/cpp_src.html&#34;&gt;C++ Source Codes&lt;/a&gt; - 这是一个全面的关于C++的345个源代码清单&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;🗜 框架&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stdcxx.apache.org/&#34;&gt;Apache C++ Standard Library&lt;/a&gt; : 是一系列算法，容器，迭代器和其他基本组件的集合&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stlab.adobe.com/&#34;&gt;ASL&lt;/a&gt; : Adobe源代码库提供了同行的评审和可移植的C++源代码库。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boostorg&#34;&gt;Boost&lt;/a&gt; : 大量通用C++库的集合。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bloomberg/bde&#34;&gt;BDE&lt;/a&gt; : 来自于彭博资讯实验室的开发环境。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libcinder.org/&#34;&gt;Cinder&lt;/a&gt; : 提供专业品质创造性编码的开源开发社区。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ryan.gulix.cl/fossil.cgi/cxxomfort/index&#34;&gt;Bxxomfort&lt;/a&gt; : 轻量级的，只包含头文件的库，将C++ 11的一些新特性移植到C++03中。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dlib.net/&#34;&gt;Dlib&lt;/a&gt; : 使用契约式编程和现代C++科技设计的通用的跨平台的C++库。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paulhodge/EASTL&#34;&gt;EASTL&lt;/a&gt; : EA-STL公共部分&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sumeetchhetri/ffead-cpp&#34;&gt;ffead-cpp&lt;/a&gt; : 企业应用程序开发框架&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/folly&#34;&gt;Folly&lt;/a&gt; : 由Facebook开发和使用的开源C++库。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WeAreROLI/JUCE&#34;&gt;JUCE&lt;/a&gt; : 包罗万象的C++类库，用于开发跨平台软件&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookarchive/libphenom&#34;&gt;libphenom&lt;/a&gt; : 用于构建高性能和高度可扩展性系统的事件框架。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sourcey/libsourcey&#34;&gt;LibSourcey&lt;/a&gt; : 用于实时的视频流和高性能网络应用程序的C++11 evented IO&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://loki-lib.sourceforge.net/&#34;&gt;Loki&lt;/a&gt; : C++库的设计，包括常见的设计模式和习语的实现。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/mili/&#34;&gt;MiLi&lt;/a&gt; : 只含头文件的小型C++库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openframeworks.cc/&#34;&gt;openFrameworks&lt;/a&gt; : 开发C++工具包，用于创意性编码。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.qt.io/developers/&#34;&gt;Qt&lt;/a&gt; : 跨平台的应用程序和用户界面框架&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://code.google.com/p/reason/&#34;&gt;Reason&lt;/a&gt; : 跨平台的框架，使开发者能够更容易地使用Java，.Net和Python，同时也满足了他们对C++性能和优势的需求。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://root.cern.ch/&#34;&gt;ROOT&lt;/a&gt; : 具备所有功能的一系列面向对象的框架，能够非常高效地处理和分析大量的数据，为欧洲原子能研究机构所用。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.stlport.org/&#34;&gt;STLport&lt;/a&gt; : 是STL具有代表性的版本&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stxxl.sourceforge.net/&#34;&gt;STXXL&lt;/a&gt; : 用于额外的大型数据集的标准模板库。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ultimatepp.org/&#34;&gt;Ultimate++&lt;/a&gt; : C++跨平台快速应用程序开发框架&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/wtl/&#34;&gt;Windows Template Library&lt;/a&gt; : 用于开发Windows应用程序和UI组件的C++库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jll63/yomm11&#34;&gt;Yomm11&lt;/a&gt; : C++11的开放multi-methods.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;异步事件循环&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://think-async.com/Asio/&#34;&gt;Boost.Asio&lt;/a&gt; : 用于网络和底层I/O编程的跨平台的C++库。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libev.schmorp.de/&#34;&gt;libev&lt;/a&gt; : 功能齐全，高性能的时间循环，轻微地仿效libevent，但是不再像libevent一样有局限性，也修复了它的一些bug。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libevent.org/&#34;&gt;libevent&lt;/a&gt; : 事件通知库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joyent/libuv&#34;&gt;libuv&lt;/a&gt; : 跨平台异步I/O。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/libco&#34;&gt;libco&lt;/a&gt; : 协程，微信支持8亿用户同时在线的底层IO库。功能强大&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yyzybb537/libgo&#34;&gt;libgo&lt;/a&gt; : golang风格的并发框架，C++11实现协程库&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;网络库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cflowe/ACE&#34;&gt;ACE&lt;/a&gt; : C++面向对象网络变成工具包&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://archive.codeplex.com/?p=casablanca&#34;&gt;Casablanca&lt;/a&gt; : C++ REST SDK&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cpp-netlib.org/&#34;&gt;cpp-netlib&lt;/a&gt; : 高级网络编程的开源库集合&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://curl.haxx.se/libcurl/&#34;&gt;libCurl&lt;/a&gt; : 多协议文件传输库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cesanta/mongoose&#34;&gt;Mongoose&lt;/a&gt; : 非常轻量级的网络服务器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;Muduo&lt;/a&gt; : 用于Linux多线程服务器的C++非阻塞网络库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cesanta/fossa&#34;&gt;net_skeleton&lt;/a&gt; : C/C++的TCP 客户端/服务器库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pocoproject/poco&#34;&gt;POCO&lt;/a&gt; : 用于构建网络和基于互联网应用程序的C++类库，可以运行在桌面，服务器，移动和嵌入式系统。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookarchive/RakNet&#34;&gt;RakNet&lt;/a&gt; : 为游戏开发人员提供的跨平台的开源C++网络引擎。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vinipsmaker/tufao&#34;&gt;Tufao&lt;/a&gt; : 用于Qt之上的C++构建的异步Web框架。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zaphoyd/websocketpp&#34;&gt;WebSocket++&lt;/a&gt; : 基于C++/Boost Aiso的websocket 客户端/服务器库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://zeromq.org/&#34;&gt;ZeroMQ&lt;/a&gt; : 高速，模块化的异步通信库&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;TCP/IP协议栈&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/f-stack/f-stack&#34;&gt;f-stack&lt;/a&gt; : 腾讯开源的协议栈，基于DPDK的高性能用户态协议栈。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wangbojing/NtyTcp&#34;&gt;NtyTcp&lt;/a&gt; : 单线程的协议栈的，基于netmap,DPDK,rawSocket的实现。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://savannah.nongnu.org/projects/lwip/&#34;&gt;LWIP&lt;/a&gt; : 针对 RAM 平台的精简版的 TCP/IP 协议栈实现。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mtcp-stack/mtcp&#34;&gt;mTCP&lt;/a&gt; : 针对多核系统的高可扩展性的用户空间 TCP/IP 协议栈。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freebsd.org/zh_CN/copyright/license.html&#34;&gt;4.4BSD&lt;/a&gt; : * nix的协议栈是源于4.4BSD的。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;WEB应用框架&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; : 一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.lighttpd.net/&#34;&gt;Lighttpd&lt;/a&gt; : 一款开源 Web 服务器软件，安全快速,符合行业标准,适配性强并且针对高配置环境进行了优化。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gnu.org/software/libmicrohttpd/&#34;&gt;Libmicrohttpd&lt;/a&gt; : GNU软件下的简单c库的Web服务器。API简单，快速。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://shttpd.sourceforge.net/&#34;&gt;shttpd&lt;/a&gt; : 基于Mongoose的Web服务器框架。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bel2125/civetweb&#34;&gt;CivetWeb&lt;/a&gt; : 提供易于使用，强大的，C/C++嵌入式Web服务器，带有可选的CGI，SSL和Lua支持。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cppcms.com/wikipp/en/page/main&#34;&gt;CppCMS&lt;/a&gt; : 免费高性能的Web开发框架（不是 CMS）.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ipkn/crow&#34;&gt;Crow&lt;/a&gt; : 一个C++微型web框架（灵感来自于Python Flask）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kore.io/&#34;&gt;Kore&lt;/a&gt; : 使用C语言开发的用于web应用程序的超快速和灵活的web服务器/框架。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.coralbits.com/libonion/&#34;&gt;libOnion&lt;/a&gt; : 轻量级的库，帮助你使用C编程语言创建web服务器。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jlaine/qdjango/&#34;&gt;QDjango&lt;/a&gt; : 使用C++编写的，基于Qt库的web框架，试图效仿Django API，因此得此名。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.webtoolkit.eu/wt&#34;&gt;Wt&lt;/a&gt; : 开发Web应用的C++库。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;标准库，算法与函数&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/C%2B%2B_Standard_Library&#34;&gt;C++ Standard Library&lt;/a&gt; : 是一系列类和函数的集合，使用核心语言编写，也是C++ISO自身标准的一部分。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Standard_Template_Library&#34;&gt;Standard Template Library&lt;/a&gt; : 标准模板库, STL&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cplusplus&#34;&gt;ISO C++ Standards Committee&lt;/a&gt; : C++标准委员会&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;音频库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fmod.com/&#34;&gt;FMOD&lt;/a&gt; : 易于使用的跨平台的音频引擎和音频内容的游戏创作工具。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/micknoise/Maximilian&#34;&gt;Maximilian&lt;/a&gt; : C++音频和音乐数字信号处理库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.openal.org/&#34;&gt;OpenAL&lt;/a&gt; : 开源音频库—跨平台的音频API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://opus-codec.org/&#34;&gt;Opus&lt;/a&gt; : 一个完全开放的，免版税的，高度通用的音频编解码器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.speex.org/&#34;&gt;Speex&lt;/a&gt; : 免费编解码器，为Opus所废弃&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TonicAudio/Tonic&#34;&gt;Tonic&lt;/a&gt; : C++易用和高效的音频合成&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://xiph.org/vorbis/&#34;&gt;Vorbis&lt;/a&gt; : Ogg Vorbis是一种完全开放的，非专有的，免版税的通用压缩音频格式。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;生态学&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://molpopgen.github.io/libsequence/&#34;&gt;lisequence&lt;/a&gt; : 用于表示和分析群体遗传学数据的C++库。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.seqan.de/&#34;&gt;SeqAn&lt;/a&gt; : 专注于生物数据序列分析的算法和数据结构。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vcflib/vcflib&#34;&gt;Vcflib&lt;/a&gt; : 用于解析和处理VCF文件的C++库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zeeev/wham&#34;&gt;Wham&lt;/a&gt; : 直接把联想测试应用到BAM文件的基因结构变异。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;压缩&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.bzip.org/&#34;&gt;bzip2&lt;/a&gt; : 一个完全免费，免费专利和高质量的数据压缩&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/attila_afra/doboz/src&#34;&gt;doboz&lt;/a&gt; : 能够快速解压缩的压缩库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://icculus.org/physfs/&#34;&gt;PhysicsFS&lt;/a&gt; : 对各种归档提供抽象访问的库，主要用于视频游戏，设计灵感部分来自于Quake3的文件子系统。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://projects.kde.org/projects/frameworks/karchive&#34;&gt;KArchive&lt;/a&gt; : 用于创建，读写和操作文件档案（例如zip和 tar）的库，它通过QIODevice的一系列子类，使用gzip格式，提供了透明的压缩和解压缩的数据。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/lz4/&#34;&gt;LZ4&lt;/a&gt; : 非常快速的压缩算法&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/lzham/&#34;&gt;LZHAM&lt;/a&gt; : 无损压缩数据库，压缩比率跟LZMA接近，但是解压缩速度却要快得多。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.7-zip.org/sdk.html&#34;&gt;LZMA&lt;/a&gt; : 7z格式默认和通用的压缩方法。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.matcode.com/lzmat.htm&#34;&gt;LZMAT&lt;/a&gt; : 及其快速的实时无损数据压缩库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/miniz/&#34;&gt;Minizip&lt;/a&gt; : Zlib最新bug修复，支持PKWARE磁盘跨越，AES加密和IO缓冲。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/snappy/&#34;&gt;Snappy&lt;/a&gt; : 快速压缩和解压缩&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://zlib.net/&#34;&gt;ZLib&lt;/a&gt; : 非常紧凑的数据流压缩库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://zziplib.sourceforge.net/&#34;&gt;ZZIPlib&lt;/a&gt; : 提供ZIP归档的读权限。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;并发性&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/compute&#34;&gt;Boost.Compute&lt;/a&gt; : 用于OpenCL的C++GPU计算库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HSA-Libraries/Bolt&#34;&gt;Bolt&lt;/a&gt; : 针对GPU进行优化的C++模板库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/schlangster/cpp.react&#34;&gt;C++React&lt;/a&gt; : 用于C++11的反应性编程库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.threadingbuildingblocks.org/&#34;&gt;Intel TBB&lt;/a&gt; : Intel线程构件块&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libclsph/libclsph&#34;&gt;Libclsph&lt;/a&gt; : 基于OpenCL的GPU加速SPH流体仿真库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.khronos.org/opencl/&#34;&gt;OpenCL&lt;/a&gt; : 并行编程的异构系统的开放标准&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openmp.org/&#34;&gt;OpenMP&lt;/a&gt; : OpenMP API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://thrust.github.io/&#34;&gt;Thrust&lt;/a&gt; : 类似于C++标准模板库的并行算法库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/STEllAR-GROUP/hpx/&#34;&gt;HPX&lt;/a&gt; : 用于任何规模的并行和分布式应用程序的通用C++运行时系统&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ddemidov/vexcl&#34;&gt;VexCL&lt;/a&gt; : 用于OpenCL/CUDA 的C++向量表达式模板库。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;密码学&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bcrypt.sourceforge.net/&#34;&gt;Bcrypt&lt;/a&gt; : 一个跨平台的文件加密工具，加密文件可以移植到所有可支持的操作系统和处理器中。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/klchang/beecrypt&#34;&gt;BeeCrypt&lt;/a&gt; : 快速的加密图形库，功能强大，接口方便。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://botan.randombit.net/&#34;&gt;Botan&lt;/a&gt; : C++加密库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cryptopp.com/&#34;&gt;Crypto++&lt;/a&gt; : 一个有关加密方案的免费的C++库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnupg.org/&#34;&gt;GnuPG&lt;/a&gt; : OpenPGP标准的完整实现&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnutls.org/&#34;&gt;GnuTLS&lt;/a&gt; : 实现了SSL，TLS和DTLS协议的安全通信库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gnupg.org/related_software/libgcrypt/&#34;&gt;Libgcrypt&lt;/a&gt; : 基于GnuPG的加密图形库。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/winlibs/libmcrypt&#34;&gt;Libmcrypt&lt;/a&gt; : 线程安全，提供统一的API。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.libressl.org/&#34;&gt;LibreSSL&lt;/a&gt; : 免费的SSL/TLS协议，属于2014 OpenSSL的一个分支&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libtom/libtomcrypt&#34;&gt;LibTomCrypt&lt;/a&gt; : 一个非常全面的，模块化的，可移植的加密工具&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jedisct1/libsodium&#34;&gt;libsodium&lt;/a&gt; : 基于NaCI的加密库，固执己见，容易使用&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.lysator.liu.se/~nisse/nettle/&#34;&gt;Nettle&lt;/a&gt; : 底层的加密库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; : 一个强大的，商用的，功能齐全的，开放源代码的加密库。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;数据库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paulftw/hiberlite&#34;&gt;hiberlite&lt;/a&gt; : 用于Sqlite3的C++对象关系映射&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/leveldb&#34;&gt;LevelDB&lt;/a&gt; : 快速键值存储库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symas.com/lmdb/technical/&#34;&gt;LMDB&lt;/a&gt; : 符合数据库四大基本元素的嵌入键值存储&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tangentsoft.com/mysqlpp/home&#34;&gt;MySQL++&lt;/a&gt; : 封装了MySql的C API的C++ 包装器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/rocksdb&#34;&gt;RocksDB&lt;/a&gt; : 来自Facebook的嵌入键值的快速存储&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;SQLite&lt;/a&gt; : 一个完全嵌入式的，功能齐全的关系数据库，只有几百KB，可以正确包含到你的项目中。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt; : 一个基于分布式文件存储的数据库&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;调试&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.boost.org/doc/libs/master/libs/test/doc/html/index.html&#34;&gt;Boost.Test&lt;/a&gt; : Boost测试库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/catchorg/Catch2&#34;&gt;Catch&lt;/a&gt; : 一个很时尚的，C++原生的框架，只包含头文件，用于单元测试，测试驱动开发和行为驱动开发。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freedesktop.org/wiki/Software/cppunit/&#34;&gt;CppUnit&lt;/a&gt; : 由JUnit移植过来的C++测试框架&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://code.google.com/p/googletest/&#34;&gt;GoogleTest&lt;/a&gt; : 谷歌C++测试框架&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deplinenoise/ig-debugheap&#34;&gt;ig-debugheap&lt;/a&gt; : 用于跟踪内存错误的多平台调试堆&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.almostinfinite.com/memtrack.html&#34;&gt;MemTrack&lt;/a&gt; : 用于C++跟踪内存分配&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/jonasmeyer/microprofile/src/default/&#34;&gt;MicroProfile&lt;/a&gt; : 跨平台的网络试图分析器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://unittest-cpp.sourceforge.net/&#34;&gt;UnitTest++&lt;/a&gt; : 轻量级的C++单元测试框架&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;容器&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/cpp-btree/&#34;&gt;C++ B-Tree&lt;/a&gt; : 基于B树数据结构，实现命令内存容器的模板库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/goossaert/hashmap&#34;&gt;Hashmaps&lt;/a&gt; : C++中开放寻址哈希表算法的实现&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;游戏引擎&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cocos2d-x.org/&#34;&gt;Cocos2d-x&lt;/a&gt; : 一个跨平台框架，用于构建2D游戏，互动图书，演示和其他图形应用程序。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gritengine.com/&#34;&gt;Grit&lt;/a&gt; : 社区项目，用于构建一个免费的游戏引擎，实现开放的世界3D游戏。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://irrlicht.sourceforge.net/&#34;&gt;lrrlicht&lt;/a&gt; : C++语言编写的开源高性能的实时#D引擎&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://polycode.org/&#34;&gt;PolyCode&lt;/a&gt; : C++实现的用于创建游戏的开源框架（与Lua绑定）。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;图形库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bkaradzic/bgfx&#34;&gt;bgfx&lt;/a&gt; : 跨平台的渲染库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.cairographics.org/&#34;&gt;Cairo&lt;/a&gt; : 支持多种输出设备的2D图形库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/horde3d/Horde3D&#34;&gt;Horde3D&lt;/a&gt; : 一个小型的3D渲染和动画引擎&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mosra/magnum&#34;&gt;magnum&lt;/a&gt; : C++11和OpenGL 2D/3D 图形引擎&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ogre3d.org/&#34;&gt;Ogre 3D&lt;/a&gt; : 用C++编写的一个面向场景，实时，灵活的3D渲染引擎（并非游戏引擎）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.openscenegraph.org/&#34;&gt;OpenSceneGraph&lt;/a&gt; : 具有高性能的开源3D图形工具包&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.panda3d.org/&#34;&gt;Panda3D&lt;/a&gt; : 用于3D渲染和游戏开发的框架，用Python和C++编写。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/skia&#34;&gt;Skia&lt;/a&gt; : 用于绘制文字，图形和图像的完整的2D图形库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/urho3d/Urho3D&#34;&gt;urho3d&lt;/a&gt; : 跨平台的渲染和游戏引擎。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;图像处理&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.boost.org/doc/libs/1_56_0/libs/gil/doc/index.html&#34;&gt;Boost.GIL&lt;/a&gt; : 通用图像库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/cimg/&#34;&gt;CImg&lt;/a&gt; : 用于图像处理的小型开源C++工具包&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://freeimage.sourceforge.net/&#34;&gt;FreeImage&lt;/a&gt; : 开源库，支持现在多媒体应用所需的通用图片格式和其他格式。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gdcm.sourceforge.net/wiki/index.php/Main_Page&#34;&gt;GDCM&lt;/a&gt; : Grassroots DICOM 库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itk.org/&#34;&gt;ITK&lt;/a&gt; : 跨平台的开源图像分析系统&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/script/api.php&#34;&gt;Magick++&lt;/a&gt; : ImageMagick程序的C++接口&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencv.org/&#34;&gt;OpenCV&lt;/a&gt; : 开源计算机视觉类库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/tesseract-ocr/&#34;&gt;tesseract-ocr&lt;/a&gt; : OCR引擎&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ukoethe/vigra&#34;&gt;VIGRA&lt;/a&gt; : 用于图像分析通用C++计算机视觉库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vtk.org/&#34;&gt;VTK&lt;/a&gt; : 用于3D计算机图形学，图像处理和可视化的开源免费软件系统。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;国际化&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gnu.org/software/gettext/&#34;&gt;gettext&lt;/a&gt; : GNU gettext&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://site.icu-project.org/&#34;&gt;IBM ICU&lt;/a&gt; : 提供Unicode 和全球化支持的C、C++ 和Java库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gnu.org/software/libiconv/&#34;&gt;libiconv&lt;/a&gt; : 用于不同字符编码之间的编码转换库&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Json库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cesanta/frozen&#34;&gt;frozen&lt;/a&gt; : C/C++的Jason解析生成器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akheron/jansson&#34;&gt;Jansson&lt;/a&gt; : 进行编解码和处理Jason数据的C语言库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chrismanning/jbson&#34;&gt;jbson&lt;/a&gt; : C++14中构建和迭代BSON data,和Json 文档的库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeaye/jeayeson&#34;&gt;JeayeSON&lt;/a&gt; : 非常健全的C++ JSON库，只包含头文件&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hjiang/jsonxx&#34;&gt;JSON++&lt;/a&gt; : C++ JSON 解析器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/udp/json-parser&#34;&gt;json-parser&lt;/a&gt; : 用可移植的ANSI C编写的JSON解析器，占用内存非常少&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dropbox/json11&#34;&gt;json11&lt;/a&gt; : 一个迷你的C++11 JSON库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amir-s/jute&#34;&gt;jute&lt;/a&gt; : 非常简单的C++ JSON解析器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vincenthz/libjson&#34;&gt;ibjson&lt;/a&gt; : C语言中的JSON解析和打印库，很容易和任何模型集成&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/libjson/&#34;&gt;libjson&lt;/a&gt; : 轻量级的JSON库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kazuho/picojson&#34;&gt;PicoJSON&lt;/a&gt; : C++中JSON解析序列化，只包含头文件&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qt-json/qt-json&#34;&gt;Qt-Json&lt;/a&gt; : 用于JSON数据和 QVariant层次间的相互解析的简单类&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flavio/qjson&#34;&gt;QJson&lt;/a&gt; : 将JSON数据映射到QVariant对象的基于Qt的库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/rapidjson&#34;&gt;RepidJSON&lt;/a&gt; : 用于C++的快速JSON 解析生成器，包含SAX和DOM两种风格的API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;日志&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_56_0/libs/log/doc/html/index.html&#34;&gt;Boost.Log&lt;/a&gt; : 设计非常模块化，并且具有扩展性&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zuhd-org/easyloggingpp&#34;&gt;easyloggingpp&lt;/a&gt; : C++日志库，只包含单一的头文件。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://log4cpp.sourceforge.net/&#34;&gt;Log4cpp&lt;/a&gt; : 一系列C++类库，灵活添加日志到文件，系统日志，IDSA和其他地方。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.templog.org/&#34;&gt;templog&lt;/a&gt; : 轻量级C++库，可以添加日志到你的C++应用程序中&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;机器学习，人工智能&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aigamedev/btsk&#34;&gt;btsk&lt;/a&gt; : 游戏行为树启动器工具&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://eodev.sourceforge.net/&#34;&gt;Evolving Objects&lt;/a&gt; : 基于模板的，ANSI C++演化计算库，能够帮助你非常快速地编写出自己的随机优化算法。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BVLC/caffe&#34;&gt;Caffe&lt;/a&gt; : 快速的神经网络框架&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/liuliu/ccv&#34;&gt;CCV&lt;/a&gt; : 以C语言为核心的现代计算机视觉库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mlpack.org/&#34;&gt;mlpack&lt;/a&gt; : 可扩展的C++机器学习库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opencv/opencv&#34;&gt;OpenCV&lt;/a&gt; : 开源计算机视觉库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GHamrouni/Recommender&#34;&gt;Recommender&lt;/a&gt; : 使用协同过滤进行产品推荐/建议的C语言库。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun&#34;&gt;SHOGUN&lt;/a&gt; : Shogun 机器学习工具&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/sofia-ml/&#34;&gt;sofia-ml&lt;/a&gt; : 用于机器学习的快速增量算法套件&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;数学库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://arma.sourceforge.net/&#34;&gt;Armadillo&lt;/a&gt; : 高质量的C++线性代数库，速度和易用性做到了很好的平衡。语法和MatlAB很相似&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/blaze-lib/&#34;&gt;blaze&lt;/a&gt; : 高性能的C++数学库，用于密集和稀疏算法。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ceres-solver.org/&#34;&gt;ceres-solver&lt;/a&gt; : 来自谷歌的C++库，用于建模和解决大型复杂非线性最小平方问题。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.cgal.org/&#34;&gt;CGal&lt;/a&gt; : 高效，可靠的集合算法集合&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/demianmnave/CML/wiki/The-Configurable-Math-Library&#34;&gt;CML&lt;/a&gt; : 用于游戏和图形的免费C++数学库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://eigen.tuxfamily.org/index.php?title=Main_Page&#34;&gt;Eigen&lt;/a&gt; : 高级C++模板头文件库，包括线性代数，矩阵，向量操作，数值解决和其他相关的算法。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ggt.sourceforge.net/&#34;&gt;GMTL&lt;/a&gt; : 数学图形模板库是一组广泛实现基本图形的工具。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gmplib.org/&#34;&gt;GMP&lt;/a&gt; : 用于个高精度计算的C/C++库，处理有符号整数，有理数和浮点数。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;多媒体库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gstreamer.freedesktop.org/&#34;&gt;GStreamer&lt;/a&gt; : 构建媒体处理组件图形的库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.live555.com/liveMedia/&#34;&gt;LIVE555 Streaming Media&lt;/a&gt; : 使用开放标准协议(RTP/RTCP, RTSP, SIP) 的多媒体流库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.videolan.org/LibVLC&#34;&gt;libVLC&lt;/a&gt; : libVLC (VLC SDK)媒体框架&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wang-bin/QtAV&#34;&gt;QtAV&lt;/a&gt; : 基于Qt和FFmpeg的多媒体播放框架，能够帮助你轻而易举地编写出一个播放器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.libsdl.org/&#34;&gt;SDL&lt;/a&gt; : 简单直控媒体层&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sfml-dev.org/&#34;&gt;SFML&lt;/a&gt; : 快速，简单的多媒体库&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;物理学&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/box2d/&#34;&gt;Box2D&lt;/a&gt; : 2D的游戏物理引擎。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bulletphysics/bullet3&#34;&gt;Bullet&lt;/a&gt; : 3D的游戏物理引擎。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/slembcke/Chipmunk2D&#34;&gt;Chipmunk&lt;/a&gt; : 快速，轻量级的2D游戏物理库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/liquidfun&#34;&gt;LiquidFun&lt;/a&gt; : 2D的游戏物理引擎&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ode.org/&#34;&gt;ODE&lt;/a&gt; : 开放动力学引擎-开源，高性能库，模拟刚体动力学。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanderlin/ofxBox2d&#34;&gt;ofxBox2D&lt;/a&gt; : Box2D开源框架包装器。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simbody/simbody&#34;&gt;Simbody&lt;/a&gt; : 高性能C++多体动力学/物理库，模拟关节生物力学和机械系统，像车辆，机器人和人体骨骼。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;机器人学&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://moos-ivp.org/&#34;&gt;MOOS-Ivp&lt;/a&gt; : 一组开源C++模块，提供机器人平台的自主权，尤其是自主的海洋车辆。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mrpt.org/&#34;&gt;MRPT&lt;/a&gt; : 移动机器人编程工具包&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PointCloudLibrary/pcl&#34;&gt;PCL&lt;/a&gt; : 点云库是一个独立的，大规模的开放项目，用于2D/3D图像和点云处理。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.roboticslibrary.org/&#34;&gt;Robotics Library&lt;/a&gt; : 一个独立的C++库，包括机器人动力学，运动规划和控制。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.robwork.dk/apidoc/nightly/rw/&#34;&gt;RobWork&lt;/a&gt; : 一组C++库的集合，用于机器人系统的仿真和控制。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://wiki.ros.org/&#34;&gt;ROS&lt;/a&gt; : 机器人操作系统，提供了一些库和工具帮助软件开发人员创建机器人应用程序。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;脚本&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ChaiScript/ChaiScript/&#34;&gt;ChaiScript&lt;/a&gt; : 用于C++的易于使用的嵌入式脚本语言。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.lua.org/&#34;&gt;Lua&lt;/a&gt; : 用于配置文件和基本应用程序脚本的小型快速脚本引擎。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dafrito/luacxx&#34;&gt;luacxx&lt;/a&gt; : 用于创建Lua绑定的C++ 11 API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.swig.org/&#34;&gt;SWIG&lt;/a&gt; : 一个可以让你的C++代码链接到JavaScript，Perl，PHP，Python，Tcl和Ruby的包装器/接口生成器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cesanta/v7&#34;&gt;V7&lt;/a&gt; : 嵌入式的JavaScript 引擎。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://code.google.com/p/v8/&#34;&gt;V8&lt;/a&gt; : 谷歌的快速JavaScript引擎，可以被嵌入到任何C++应用程序中。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;序列化&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://capnproto.org/&#34;&gt;Cap&#39;n Proto&lt;/a&gt; : 快速数据交换格式和RPC系统。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/USCiLab/cereal&#34;&gt;cereal&lt;/a&gt; : C++11 序列化库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/flatbuffers&#34;&gt;FlatBuffers&lt;/a&gt; : 内存高效的序列化库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/msgpack/msgpack-c&#34;&gt;MessagePack&lt;/a&gt; : C/C++的高效二进制序列化库，例如 JSON&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://code.google.com/p/protobuf/&#34;&gt;ProtoBuf&lt;/a&gt; : 协议缓冲，谷歌的数据交换格式。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/simple-binary-encoding&#34;&gt;SimpleBinaryEncoding&lt;/a&gt; : 用于低延迟应用程序的对二进制格式的应用程序信息的编码和解码。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://thrift.apache.org/&#34;&gt;Thrift&lt;/a&gt; : 高效的跨语言IPC/RPC，用于C++，Java，Python，PHP，C#和其它多种语言中，最初由Facebook开发。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;视频库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.webmproject.org/code/&#34;&gt;libvpx&lt;/a&gt; : VP8/VP9编码解码SDK&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ffmpeg.org/&#34;&gt;FFMpeg&lt;/a&gt; : 一个完整的，跨平台的解决方案，用于记录，转换视频和音频流。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/strukturag/libde265&#34;&gt;libde265&lt;/a&gt; : 开放的h.265视频编解码器的实现。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cisco/openh264&#34;&gt;OpenH264&lt;/a&gt; : 开源H.364 编解码器。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.theora.org/&#34;&gt;Theora&lt;/a&gt; : 免费开源的视频压缩格式。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;XML库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libxmlplusplus.sourceforge.net/&#34;&gt;LibXml++&lt;/a&gt; : C++的xml解析器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pugixml.org/&#34;&gt;PugiXML&lt;/a&gt; : 用于C++的，支持XPath的轻量级，简单快速的XML解析器。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rapidxml.sourceforge.net/&#34;&gt;RapidXML&lt;/a&gt; : 试图创建最快速的XML解析器，同时保持易用性，可移植性和合理的W3C兼容性。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/tinyxml/&#34;&gt;TinyXML&lt;/a&gt; : 简单小型的C++XML解析器，可以很容易地集成到其它项目中。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leethomason/tinyxml2&#34;&gt;TinyXML2&lt;/a&gt; : 简单快速的C++CML解析器，可以很容易集成到其它项目中。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/ticpp/&#34;&gt;TinyXML++&lt;/a&gt; : TinyXML的一个全新的接口，使用了C++的许多许多优势，模板，异常和更好的异常处理。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://xerces.apache.org/xerces-c/&#34;&gt;Xerces-C++&lt;/a&gt; : 用可移植的C++的子集编写的XML验证解析器。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;div id=&#34;cpp_11&#34; align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;30%&#34; height=&#34;30%&#34; src=&#34;https://user-images.githubusercontent.com/87457873/134301566-dfe24e96-44a5-48b7-9294-f72c49010c2f.jpg&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;🖥 部分代码案例&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_11_keywords&#34;&gt;关键字&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_new_keywords&#34;&gt;新增关键字&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_new_keywords_README.md#thread_local&#34;&gt;thread_local&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_new_keywords_README.md#static_assert&#34;&gt;static_assert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_new_keywords_README.md#nullptr&#34;&gt;nullptr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_new_keywords_README.md#noexcept&#34;&gt;noexcept&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_new_keywords_README.md#decltype&#34;&gt;decltype&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_new_keywords_README.md#constexpr&#34;&gt;constexpr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_new_keywords_README.md#char16_t&#34;&gt;char16_t&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_new_keywords_README.md#char16_t&#34;&gt;char32_t&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_new_keywords_README.md#alignof&#34;&gt;alignof&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_new_keywords_README.md#alignof&#34;&gt;alignas&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_meaning_changed__OR__new_meaning_added&#34;&gt;含义变化或者新增含义关键字（meaning changed or new meaning added）&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_meaning_keywords_README.md#auto&#34;&gt;auto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_meaning_keywords_README.md#clazz&#34;&gt;class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_meaning_keywords_README.md#default&#34;&gt;default&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_meaning_keywords_README.md#delete&#34;&gt;delete&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_meaning_keywords_README.md#export&#34;&gt;export&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_meaning_keywords_README.md#extern&#34;&gt;extern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_meaning_keywords_README.md#inline&#34;&gt;inline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_meaning_keywords_README.md#mutable&#34;&gt;mutable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_meaning_keywords_README.md#sizeof&#34;&gt;sizeof&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_meaning_keywords_README.md#struct&#34;&gt;struct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/001_meaning_keywords_README.md#using&#34;&gt;using&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_11_RTTI&#34;&gt;类型支持（基本类型、RTTI、类型特性）&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_RTTI_Primary_type_categories&#34;&gt;Defined in header &amp;lt;type_traits&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_void.cpp&#34;&gt;is_void&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_integral.cpp&#34;&gt;is_integral&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_floating_point.cpp&#34;&gt;is_floating_point&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_array.cpp&#34;&gt;is_array&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_enum.cpp&#34;&gt;is_enum&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_union.cpp&#34;&gt;is_union&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_class.cpp&#34;&gt;is_class&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_function.cpp&#34;&gt;is_function&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_pointer.cpp&#34;&gt;is_pointer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_lvalue_reference.cpp&#34;&gt;is_lvalue_reference&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_rvalue_reference.cpp&#34;&gt;is_rvalue_reference&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_member_object_pointer.cpp&#34;&gt;is_member_object_pointer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_member_function_pointer.cpp&#34;&gt;is_member_function_pointer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_fundamental.cpp&#34;&gt;is_fundamental&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_arithmetic.cpp&#34;&gt;is_arithmetic&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_scalar.cpp&#34;&gt;is_scalar&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_object.cpp&#34;&gt;is_object&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_compound.cpp&#34;&gt;is_compound&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_reference.cpp&#34;&gt;is_reference&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_member_pointer.cpp&#34;&gt;is_member_pointer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_const.cpp&#34;&gt;is_const&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_volatile.cpp&#34;&gt;is_volatile&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_trivial.cpp&#34;&gt;is_trivial&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_trivially_copyable.cpp&#34;&gt;is_trivially_copyable&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_standard_layout.cpp&#34;&gt;is_standard_layout&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_literal_type.cpp&#34;&gt;is_literal_type&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_empty.cpp&#34;&gt;is_empty&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_polymorphic.cpp&#34;&gt;is_polymorphic&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_abstract.cpp&#34;&gt;is_abstract&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_signed.cpp&#34;&gt;is_signed&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_unsigned.cpp&#34;&gt;is_unsigned&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_constructible.cpp&#34;&gt;is_constructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_trivially_constructible.cpp&#34;&gt;is_trivially_constructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_nothrow_constructible.cpp&#34;&gt;is_nothrow_constructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_default_constructible.cpp&#34;&gt;is_default_constructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_trivially_default_constructible.cpp&#34;&gt;is_trivially_default_constructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_nothrow_default_constructible.cpp&#34;&gt;is_nothrow_default_constructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_copy_constructible.cpp&#34;&gt;is_copy_constructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_trivially_copy_constructible.cpp&#34;&gt;is_trivially_copy_constructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_nothrow_copy_constructible.cpp&#34;&gt;is_nothrow_copy_constructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_move_constructible.cpp&#34;&gt;is_move_constructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_trivially_move_constructible.cpp&#34;&gt;is_trivially_move_constructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_nothrow_move_constructible.cpp&#34;&gt;is_nothrow_move_constructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_assignable.cpp&#34;&gt;is_assignable&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_trivially_assignable.cpp&#34;&gt;is_trivially_assignable&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_nothrow_assignable.cpp&#34;&gt;is_nothrow_assignable&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_copy_assignable.cpp&#34;&gt;is_copy_assignable&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_trivially_copy_assignable.cpp&#34;&gt;is_trivially_copy_assignable&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_nothrow_copy_assignable.cpp&#34;&gt;is_nothrow_copy_assignable&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_is_move_assignable.cpp&#34;&gt;is_move_assignable&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_trivially_move_assignable.cpp&#34;&gt;is_trivially_move_assignable&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_nothrow_move_assignable.cpp&#34;&gt;is_nothrow_move_assignable&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_destructible.cpp&#34;&gt;is_destructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_trivially_destructible.cpp&#34;&gt;is_trivially_destructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_is_nothrow_destructible.cpp&#34;&gt;is_nothrow_destructible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_rtti_std_has_virtual_destructor.cpp&#34;&gt;has_virtual_destructor&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_11_stl&#34;&gt;STL容器&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_array.cpp&#34;&gt;std::array&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_forward_list.cpp&#34;&gt;std::forward_list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_begin.cpp&#34;&gt;std::begin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_end.cpp&#34;&gt;std::end&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_move.cpp&#34;&gt;std::move&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_container_init.cpp&#34;&gt;容器初始化&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_emplace.cpp&#34;&gt;emplace&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_unordered_containers&#34;&gt;无序容器&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_unordered_map.cpp&#34;&gt;std::unordered_map&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_unordered_multimap.cpp&#34;&gt;std::unordered_multimap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_unordered_set.cpp&#34;&gt;std::unordered_set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_unordered_multiset.cpp&#34;&gt;std::unordered_multiset&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_tuple&#34;&gt;元组std::tuple&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_make_tuple.cpp&#34;&gt;std::make_tuple&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_get.cpp&#34;&gt;std::get&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_tie.cpp&#34;&gt;std::tie&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_hash&#34;&gt;hash&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_hash_std_string.cpp&#34;&gt;std::hash&amp;lt;std::string&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_hash_std_u16string.cpp&#34;&gt;std::hash&amp;lt;std::u16string&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_hash_std_u32string.cpp&#34;&gt;std::hash&amp;lt;std::u32string&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_hash_std_wstring.cpp&#34;&gt;std::hash&amp;lt;std::wstring&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_hash_std_error_code.cpp&#34;&gt;std::hash&amp;lt;std::error_code&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_hash_std_bitset.cpp&#34;&gt;std::hash&amp;lt;std::bitset&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_hash_std_type_index.cpp&#34;&gt;std::hash&amp;lt;std::type_index&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_hash_std_vector_bool.cpp&#34;&gt;std::hash&amp;lt;std::vector&amp;lt;bool&amp;gt;&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- &#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_11/003_stl_hash_std_thread_id.cpp&#34;&gt;std::hash&amp;lt;std&amp;#58;&amp;#58;thread&amp;#58;&amp;#58;id&amp;gt;&lt;/a&gt;&#xA; --&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_11_smart_pointer&#34;&gt;智能指针&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_shared_ptr.cpp&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_weak_ptr.cpp&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_unique_ptr.cpp&#34;&gt;std::unique_ptr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_auto_ptr.cpp&#34;&gt;auto_ptr(弃用)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_11_regex&#34;&gt;正则表达式&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_shared_ptr.cpp&#34;&gt;basic_regex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_weak_ptr.cpp&#34;&gt;sub_match&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_unique_ptr.cpp&#34;&gt;match_results&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_11_function&#34;&gt;函数&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_function_nonstatic&#34;&gt;非静态成员函数&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_shared_ptr.cpp&#34;&gt;cv限定函数&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_weak_ptr.cpp&#34;&gt;引用限定&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_function_template&#34;&gt;函数对象模板&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_unique_ptr.cpp&#34;&gt;std::function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_unique_ptr.cpp&#34;&gt;std::bind&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_unique_ptr.cpp&#34;&gt;std::bad_function_call&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_stl_std_unique_ptr.cpp&#34;&gt;mem_fn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_11_class&#34;&gt;类&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_class_type_alias.cpp&#34;&gt;类型别名&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_class_member_init.cpp&#34;&gt;类成员初始化&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_class_functor.cpp&#34;&gt;仿函数(functor)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_class_delegating_constructors.cpp&#34;&gt;委托构造函数&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_class_inheritance_constructor.cpp&#34;&gt;继承构造函数&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_class_move_constructor.cpp&#34;&gt;移动构造函数&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_class_move_assignment_operator.cpp&#34;&gt;移动赋值运算符&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_11_template&#34;&gt;模板&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_template_angle_bracket.cpp&#34;&gt;尖括号“&amp;gt;”&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_template_aliases.cpp&#34;&gt;别名模板&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_template_external_template.cpp&#34;&gt;外部模板&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_template_variable_parameter_template.cpp&#34;&gt;可变参数模板&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_template_default_template_parameters.cpp&#34;&gt;默认模板参数&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_11_template&#34;&gt;原子操作&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_bool.cpp&#34;&gt;std::atomic&amp;lt;bool&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_char.cpp&#34;&gt;std::atomic&amp;lt;char&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_signed_char.cpp&#34;&gt;std::atomic&amp;lt;signed char&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_unsigned_char.cpp&#34;&gt;std::atomic&amp;lt;unsigned char&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_short.cpp&#34;&gt;std::atomic&amp;lt;short&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_unsigned_short.cpp&#34;&gt;std::atomic&amp;lt;unsigned short&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_int.cpp&#34;&gt;std::atomic&amp;lt;int&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_unsigned_int.cpp&#34;&gt;std::atomic&amp;lt;unsigned int&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_long.cpp&#34;&gt;std::atomic&amp;lt;long&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_unsigned_long.cpp&#34;&gt;std::atomic&amp;lt;unsigned long&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_long_long.cpp&#34;&gt;std::atomic&amp;lt;long long&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_unsigned_long_long.cpp&#34;&gt;std::atomic&amp;lt;unsigned long long&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_char8_t.cpp&#34;&gt;std::atomic&amp;lt;char8_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_char16_t.cpp&#34;&gt;std::atomic&amp;lt;char16_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_char32_t.cpp&#34;&gt;std::atomic&amp;lt;char32_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_wchar_t.cpp&#34;&gt;std::atomic&amp;lt;wchar_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_int8_t.cpp&#34;&gt;std::atomic&amp;lt;std::int8_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_uint8_t.cpp&#34;&gt;std::atomic&amp;lt;std::uint8_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_int16_t.cpp&#34;&gt;std::atomic&amp;lt;std::int16_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_uint16_t.cpp&#34;&gt;std::atomic&amp;lt;std::uint16_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_int32_t.cpp&#34;&gt;std::atomic&amp;lt;std::int32_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_uint32_t.cpp&#34;&gt;std::atomic&amp;lt;std::uint32_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_int64_t.cpp&#34;&gt;std::atomic&amp;lt;std::int64_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_uint64_t.cpp&#34;&gt;std::atomic&amp;lt;std::uint64_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_int_least8_t.cpp&#34;&gt;std::atomic&amp;lt;std::int_least8_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_uint_least8_t.cpp&#34;&gt;std::atomic&amp;lt;std::uint_least8_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_int_least16_t.cpp&#34;&gt;std::atomic&amp;lt;std::int_least16_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_uint_least16_t.cpp&#34;&gt;std::atomic&amp;lt;std::uint_least16_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_int_least32_t.cpp&#34;&gt;std::atomic&amp;lt;std::int_least32_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_uint_least32_t.cpp&#34;&gt;std::atomic&amp;lt;std::uint_least32_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_int_least64_t.cpp&#34;&gt;std::atomic&amp;lt;std::int_least64_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_uint_least64_t.cpp&#34;&gt;std::atomic&amp;lt;std::uint_least64_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_int_fast8_t.cpp&#34;&gt;std::atomic&amp;lt;std::int_fast8_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_uint_fast8_t.cpp&#34;&gt;std::atomic&amp;lt;std::uint_fast8_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_int_fast16_t.cpp&#34;&gt;std::atomic&amp;lt;std::int_fast16_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_uint_fast16_t.cpp&#34;&gt;std::atomic&amp;lt;std::uint_fast16_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_int_fast32_t.cpp&#34;&gt;std::atomic&amp;lt;std::int_fast32_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_uint_fast32_t.cpp&#34;&gt;std::atomic&amp;lt;std::uint_fast32_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_int_fast64_t.cpp&#34;&gt;std::atomic&amp;lt;std::int_fast64_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_atomic_std_uint_fast64_t.cpp&#34;&gt;std::atomic&amp;lt;std::uint_fast64_t&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_11/003_std_atomic_std_intptr_t.cpp&#34;&gt;std::atomic&amp;lt;std::intptr_t&amp;gt;&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_11/003_std_atomic_std_uintptr_t.cpp&#34;&gt;std::atomic&amp;lt;std::uintptr_t&amp;gt;&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_11/003_std_atomic_std_size_t.cpp&#34;&gt;std::atomic&amp;lt;std::size_t&amp;gt;&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_11/003_std_atomic_std_ptrdiff_t.cpp&#34;&gt;std::atomic&amp;lt;std::ptrdiff_t&amp;gt;&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_11/003_std_atomic_std_intmax_t.cpp&#34;&gt;std::atomic&amp;lt;std::intmax_t&amp;gt;&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_11/003_std_atomic_std_uintmax_t.cpp&#34;&gt;std::atomic&amp;lt;std::uintmax_t&amp;gt;&lt;/a&gt;&#xA;--&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_11_template&#34;&gt;线程&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_thread_std_thread.cpp&#34;&gt;std::thread&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_thread_std_mutex.cpp&#34;&gt;std::mutex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_thread_std_lock.cpp&#34;&gt;std::lock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_thread_std_call_once.cpp&#34;&gt;std::call_once&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_thread_std_atomic.cpp&#34;&gt;std::atomic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_thread_std_cond_ition_variable.cpp&#34;&gt;std::cond_ition_variable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_thread_async.cpp&#34;&gt;std::async&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_thread_volatile.cpp&#34;&gt;volatile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_thread_std_future.cpp&#34;&gt;std::future&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_std_thread_std_thread_local.cpp&#34;&gt;std::thread_local&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_11_exception&#34;&gt;异常&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_exception_std_exception_ptr.cpp&#34;&gt;std::exception_ptr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_exception_std_make_exception_ptr.cpp&#34;&gt;std::make_exception_ptr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_exception_std_current_exception.cpp&#34;&gt;std::current_exception&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_exception_std_rethrow_exception.cpp&#34;&gt;std::rethrow_exception&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_exception_std_nested_exception.cpp&#34;&gt;std::nested_exception&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_exception_std_throw_with_nested.cpp&#34;&gt;std::throw_with_nested&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_exception_std_rethrow_if_nested.cpp&#34;&gt;std::rethrow_if_nested&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_11/003_exception_std_noexcept.cpp&#34;&gt;std::noexcept&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_11/003_exception_std_terminate_handler.cpp&#34;&gt;std::terminate_handler&lt;/a&gt;&#xA;--&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_11_error&#34;&gt;错误&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_error_std_error_category.cpp&#34;&gt;std::error_category&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_error_std_generic_category.cpp&#34;&gt;std::generic_category&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_error_std_error_condition.cpp&#34;&gt;std::error_condition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_error_std_errc.cpp&#34;&gt;std::errc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_error_std_error_code.cpp&#34;&gt;std::error_code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/003_error_std_system_error.cpp&#34;&gt;std::system_error&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_11_keywords&#34;&gt;新语法&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_new_pretreatment&#34;&gt;预处理&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;语法：__pragma(字符串字面量)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_pragma.cpp&#34;&gt;_Pragma运算符&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_cplusplus_macro&#34;&gt;C++宏(cplusplus macro)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_cpluscplus.h&#34;&gt;_cplusplus宏&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_for&#34;&gt;基于范围的for语句&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_for_loop.cpp&#34;&gt;for循环 for(x:range)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_alignment_support&#34;&gt;对齐支持(alignment support)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_alignof.cpp&#34;&gt;alignof&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_alignas.cpp&#34;&gt;alignas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_alignment_of.cpp&#34;&gt;std::alignment_of&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_aligned_storage.cpp&#34;&gt;std::aligned_storage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_max_align_t.cpp&#34;&gt;std::max_align_t&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_align.cpp&#34;&gt;std::align&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_explicit_conversion_operators&#34;&gt;显式转换操作符(explicit conversion operators)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_explicit.cpp&#34;&gt;explicit关键字&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_static_assert&#34;&gt;静态断言(static assert)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;语法：static_assert(常量表达式，&#34;提示字符串&#34;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_static_assert.cpp&#34;&gt;static assert&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_numeric_limits&#34;&gt;数字限制(numeric limits)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_numeric_limits.cpp&#34;&gt;数字限制&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_raw_string&#34;&gt;原始字符串(raw string)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_raw_string.cpp&#34;&gt;原始字符串&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_trailing_return_type_syntax&#34;&gt;追踪返回类型语法(trailing return type syntax)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_trailing_return_type_syntax.cpp&#34;&gt;追踪返回类型语法&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_extended_friend_syntax&#34;&gt;扩展的friend语法(extended friend syntax)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_extended_friend_syntax.cpp&#34;&gt;扩展的friend语法&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_extended_integer_types&#34;&gt;扩展的整型(extended integer types)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_extended_integer_types.cpp&#34;&gt;扩展的整型&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_unrestricted_union&#34;&gt;非受限联合体(unrestricted union)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_unrestricted_union.cpp&#34;&gt;非受限联合体&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_lnline_namespace&#34;&gt;内联名字空间(lnline namespace)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_lnline.cpp&#34;&gt;内联名字空间&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_user_defined_literals&#34;&gt;用户定义的字面量(user-defined literals)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_user_defined_literals.cpp&#34;&gt;用户定义的字面量&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_enum_class&#34;&gt;强类型枚举(scoped and strongly typed enums)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_scoped_and_strongly_typed_enums.cpp&#34;&gt;强类型枚举&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_random_device&#34;&gt;随机装置(random device)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_random_device.cpp&#34;&gt;random device&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_stdref_std_cref&#34;&gt;std::ref和std::cref&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_stdref_stdcref.cpp&#34;&gt;std::ref和std::cref&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_constexpr&#34;&gt;常量表达式(constexpr)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_constexpr.cpp&#34;&gt;constexpr&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_lamda&#34;&gt;lamda表达式&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_lamda.cpp&#34;&gt;lamda表达式&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_nullptr&#34;&gt;指针空值(nullptr)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_nullptr.cpp&#34;&gt;nullptr&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_preventing_narrowing&#34;&gt;防止类型收窄(Preventing narrowing)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_preventing_narrowing.cpp&#34;&gt;防止类型收窄&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_initializer_lists&#34;&gt;初始化列表(initializer lists)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_initializer_lists01.cpp&#34;&gt;初始化列表——Initializer List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_initializer_lists02.cpp&#34;&gt;initializer_list&#xA;   &lt;t&gt;&#xA;    (作入参)&#xA;   &lt;/t&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_Uniform_initialization_syntax_and_semantics&#34;&gt;统一的初始化语法和语义(Uniform initialization syntax and semantics)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_Uniform_initialization_syntax_and_semantics.cpp&#34;&gt;统一的初始化语法和语义&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_POD&#34;&gt;POD(plain old data)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_POD.cpp&#34;&gt;POD&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_POD&#34;&gt;long long整型&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_long_long.cpp&#34;&gt;long long&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_move_semantics&#34;&gt;移动语义(move semantics)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_move_semantics.cpp&#34;&gt;move semantics&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_rvalue_reference&#34;&gt;右值引用(rvalue reference)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_rvalue_reference.cpp&#34;&gt;rvalue reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_c99&#34;&gt;c99特性(c99)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_c99.cpp&#34;&gt;c99特性&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_11_SFINAE&#34;&gt;一般化的SFINAE规则(generalized SFINAE rules)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_11/002_grammar_SFINAE.cpp&#34;&gt;generalized SFINAE rules&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;div id=&#34;cpp_14&#34; align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;30%&#34; height=&#34;30%&#34; src=&#34;https://user-images.githubusercontent.com/87457873/134302218-7e6d1586-7210-4121-8aa0-244ddb37572a.jpg&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_14_RTTI&#34;&gt;类型支持（基本类型、RTTI、类型特性）&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_type_traits&#34;&gt;Defined in header&amp;lt;type_traits&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_type_traits_is_null_pointer.cpp&#34;&gt;检查类型是否为 std::nullptr_t&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_type_traits_is_final.cpp&#34;&gt;is_final(检查类型是否为 final 类类型)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_utility&#34;&gt;Defined in header&amp;lt;utility&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_utility_exchange.cpp&#34;&gt;exchange(将实参替换为一个新值，并返回其先前值)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_utility_integer_sequence.cpp&#34;&gt;integer_sequence(实现编译时整数数列)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header&amp;lt;initializer_list&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_initializer_list_rbegin.cpp&#34;&gt;rbegin(返回指向一个容器或数组的逆向迭代器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_initializer_list_crbegin.cpp&#34;&gt;crbegin(返回指向一个容器或数组的逆向迭代器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_initializer_list_rend.cpp&#34;&gt;rend(返回容器或数组的逆向尾迭代器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_initializer_list_crend.cpp&#34;&gt;crend(返回容器或数组的逆向尾迭代器)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header&amp;lt;iterator&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in namespace std&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_iterator_make_reverse_iterator.cpp&#34;&gt;make_reverse_iterator(创建拥有从实参推出的类型的 std::reverse_iterator)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;array&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;deque&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;forward_list&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;iterator&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;list&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;map&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;regex&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;set&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;span&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;string&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;string_view&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;unordered_map&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;unordered_set&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;vector&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in namespace std&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_stl_begin.cpp&#34;&gt;begin(返回指向容器或数组起始的迭代器)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_stl_cbegin.cpp&#34;&gt;cbegin(返回指向容器或数组起始的迭代器)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_stl_end.cpp&#34;&gt;end(返回指向容器或数组结尾的迭代器)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_stl_cend.cpp&#34;&gt;cend(返回指向容器或数组结尾的迭代器)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_stl_rbegin.cpp&#34;&gt;rbegin(返回指向一个容器或数组的逆向迭代器)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_stl_crbegin.cpp&#34;&gt;crbegin(返回指向一个容器或数组的逆向迭代器)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_stl_rend.cpp&#34;&gt;rend(返回容器或数组的逆向尾迭代器)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_14/001_stl_crend.cpp&#34;&gt;crend(返回容器或数组的逆向尾迭代器)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#x9;&#xA;* [函数返回值类型推导](https://github.com/0voice/cpp_new_features/blob/main/cpp_14/README.md#cpp_14_01)&#xA;* [lambda参数auto](https://github.com/0voice/cpp_new_features/blob/main/cpp_14/README.md#cpp_14_02)&#xA;* [变量模板](https://github.com/0voice/cpp_new_features/blob/main/cpp_14/README.md#cpp_14_03)&#xA;* [别名模板](https://github.com/0voice/cpp_new_features/blob/main/cpp_14/README.md#cpp_14_04)&#xA;* [[[deprecated]]标记](https://github.com/0voice/cpp_new_features/blob/main/cpp_14/README.md#cpp_14_05)&#xA;* [二进制字面量与整形字面量分隔符](https://github.com/0voice/cpp_new_features/blob/main/cpp_14/README.md#cpp_14_06)&#xA;* [std::make_unique](https://github.com/0voice/cpp_new_features/blob/main/cpp_14/README.md#cpp_14_07)&#xA;* [std::shared_timed_mutex与std::shared_lock](https://github.com/0voice/cpp_new_features/blob/main/cpp_14/README.md#cpp_14_08)&#xA;* [std::integer_sequence](https://github.com/0voice/cpp_new_features/blob/main/cpp_14/README.md#cpp_14_09)&#xA;* [std::exchange](https://github.com/0voice/cpp_new_features/blob/main/cpp_14/README.md#cpp_14_10)&#xA;* [std::quoted](https://github.com/0voice/cpp_new_features/blob/main/cpp_14/README.md#cpp_14_11)&#xA;--&gt; &#xA;&lt;hr&gt; &#xA;&lt;div id=&#34;cpp_17&#34; align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;30%&#34; height=&#34;30%&#34; src=&#34;https://user-images.githubusercontent.com/87457873/134302312-2c3ddfc0-7942-4263-9b02-4cec08c18e2f.jpg&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_17_keywords&#34;&gt;关键字&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_17_meaning_changed__OR__new_meaning_added&#34;&gt;含义变化或者新增含义关键字（meaning changed or new meaning added）&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/001_keywords_README.md#register&#34;&gt;register&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_17_RTTI&#34;&gt;类型支持（基本类型、RTTI、类型特性）&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_type_traits&#34;&gt;Defined in header&amp;lt;type_traits&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_byte.cpp&#34;&gt;byte(字节类型)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_is_aggregate.cpp&#34;&gt;is_aggregate(检查类型是否聚合类型)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_is_swappable_with.cpp&#34;&gt;is_swappable_with(检查一个类型的对象是否能与同类型或不同类型的对象交换)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_is_swappable.cpp&#34;&gt;is_swappable(检查一个类型的对象是否能与同类型或不同类型的对象交换)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_is_nothrow_swappable_with.cpp&#34;&gt;is_nothrow_swappable_with(检查一个类型的对象是否能与同类型或不同类型的对象交换)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_is_nothrow_swappable.cpp&#34;&gt;is_nothrow_swappable(检查一个类型的对象是否能与同类型或不同类型的对象交换)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_is_invocable.cpp&#34;&gt;is_invocable(检查类型能否以给定的实参类型调用（如同以 std::invoke）)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_is_invocable_r.cpp&#34;&gt;is_invocable_r(检查类型能否以给定的实参类型调用（如同以 std::invoke）)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_is_nothrow_invocable.cpp&#34;&gt;is_nothrow_invocable(检查类型能否以给定的实参类型调用（如同以 std::invoke）)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_is_nothrow_invocable_r.cpp&#34;&gt;is_nothrow_invocable_r(检查类型能否以给定的实参类型调用（如同以 std::invoke）)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_invoke_result.cpp&#34;&gt;invoke_result(推导以一组实参调用一个可调用对象的结果类型)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_void_t.cpp&#34;&gt;void_t(变参别名模板)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_conjunction.cpp&#34;&gt;conjunction(变参的逻辑与元函数)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_disjunction.cpp&#34;&gt;disjunction(变参的逻辑或元函数)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_ndisjunctionegation.cpp&#34;&gt;ndisjunctionegation(逻辑非元函数)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/002_type_traits_integral_constant.cpp&#34;&gt;integral_constant(具有指定值的指定类型的编译期常量)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_utility&#34;&gt;Defined in header&amp;lt;utility&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/003_utility_as_const.cpp&#34;&gt;as_const(获得到其实参的 const 引用)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_17/003_utility_in_place.cpp&#34;&gt;in_place(原位构造标签)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_17/003_utility_in_place_type.cpp&#34;&gt;in_place_type(原位构造标签)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_17/003_utility_in_place_index.cpp&#34;&gt;in_place_index(原位构造标签)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_17/003_utility_in_place_t.cpp&#34;&gt;in_place_t(原位构造标签)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_17/003_utility_in_place_type_t.cpp&#34;&gt;in_place_type_t(原位构造标签)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_17/003_utility_in_place_index_t.cpp&#34;&gt;in_place_index_t(原位构造标签)&lt;/a&gt;&#xA;--&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_tuple&#34;&gt;Defined in header&amp;lt;tuple&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/004_tuple_apply.cpp&#34;&gt;apply(以一个实参的元组来调用函数)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/004_tuple_make_from_tuple.cpp&#34;&gt;make_from_tuple(以一个实参元组构造对象)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_optional&#34;&gt;Defined in header&amp;lt;optional&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/005_optional_optional.cpp&#34;&gt;optional(可能或可能不保有一个对象的包装器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/005_optional_make_optional.cpp&#34;&gt;make_optional(创建一个 optional 对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/005_optional_std_swap.cpp&#34;&gt;std::swap(std::optional)(特化 std::swap 算法)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/005_optional_std_hash.cpp&#34;&gt;std::hash&amp;lt;std::optional&amp;gt;(特化 std::hash 算法)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/005_optional_nullopt_t.cpp&#34;&gt;nullopt_t(带未初始化状态的 optional 类型的指示器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/005_optional_bad_optional_access.cpp&#34;&gt;bad_optional_access(指示进行了到不含值的 optional 的有检查访问的异常)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/005_optional_nullopt.cpp&#34;&gt;nullopt(nullopt_t 类型对象)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_variant&#34;&gt;Defined in header&amp;lt;variant&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/006_variant_variant.cpp&#34;&gt;variant(类型安全的可辨识联合体)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/006_variant_visit.cpp&#34;&gt;visit(以一或多个 variant 所保有的各实参调用所提供的函数对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/006_variant_holds_alternative.cpp&#34;&gt;holds_alternative(检查某个 variant 是否当前持有某个给定类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/006_variant_std_get.cpp&#34;&gt;std::get(std::variant)(以给定索引或类型（若类型唯一）读取 variant 的值，错误时抛出异常)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/006_variant_get_if.cpp&#34;&gt;get_if(以给定索引或类型（若其唯一），获得指向被指向的 variant 的值的指针，错误时返回空指针)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/006_variant_std_swap.cpp&#34;&gt;std::swap(std::variant)(特化 std::swap 算法)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/006_variant_monostate.cpp&#34;&gt;monostate(用作非可默认构造类型的 variant 的首个可选项的占位符类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/006_variant_bad_variant_access.cpp&#34;&gt;bad_variant_access(非法地访问 variant 的值时抛出的异常)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/006_variant_variant_size.cpp&#34;&gt;variant_size(在编译时获得 variant 可选项列表的大小)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/006_variant_variant_size_v.cpp&#34;&gt;variant_size_v(在编译时获得 variant 可选项列表的大小)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/006_variant_variant_alternative.cpp&#34;&gt;variant_alternative(在编译时获得以其下标指定的可选项的类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/006_variant_variant_alternative_t.cpp&#34;&gt;variant_alternative_t(在编译时获得以其下标指定的可选项的类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/006_variant_std_hash.cpp&#34;&gt;std::hash&amp;lt;std::variant&amp;gt;(特化 std::hash 算法)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/006_variant_variant_npos.cpp&#34;&gt;variant_npos(非法状态的 variant 的下标)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_any&#34;&gt;Defined in header&amp;lt;any&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/007_any_any.cpp&#34;&gt;any(可保有任何可复制构造 (CopyConstructible) 类型的实例的对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/007_any_std_swap.cpp&#34;&gt;std::swap(std::any)(特化 std::swap 算法)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/007_any_any_cast.cpp&#34;&gt;any_cast(对被容纳对象的类型安全访问)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/007_any_make_any.cpp&#34;&gt;make_any(创建 any 对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/007_any_bad_any_cast.cpp&#34;&gt;bad_any_cast(当类型不匹配时按值返回形式的 any_cast 所抛出的异常)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_charconv&#34;&gt;Defined in header&amp;lt;charconv&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/008_charconv_to_chars.cpp&#34;&gt;to_chars(转换整数或浮点值到字符序列象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/008_charconv_from_chars.cpp&#34;&gt;from_chars(转换字符序列到整数或浮点值)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/008_charconv_chars_format.cpp&#34;&gt;chars_format(指定 std::to_chars 和 std::from_chars 所用的格式)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header&amp;lt;initializer_list&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/009_initializer_list_empty.cpp&#34;&gt;empty(检查容器是否为空)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/009_initializer_list_data.cpp&#34;&gt;data(获得指向底层数组的指针)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_17_Containers_library&#34;&gt;容器库&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_map&#34;&gt;Defined in header&amp;lt;map&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/010_map_insert_or_assign.cpp&#34;&gt;insert_or_assign(插入元素，或若键已存在则赋值给当前元素)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/010_map_try_emplace.cpp&#34;&gt;try_emplace(若键不存在则原位插入，若键存在则不做任何事)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/010_map_extract.cpp&#34;&gt;extract(从另一容器释出结点)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/010_map_merge.cpp&#34;&gt;merge(从另一容器接合结点)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_unordered_map&#34;&gt;Defined in header&amp;lt;unordered_map&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/011_unordered_map_insert_or_assign.cpp&#34;&gt;insert_or_assign(插入元素，或若键已存在则赋值给当前元素)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/011_unordered_map_try_emplace.cpp&#34;&gt;try_emplace(若键不存在则原位插入，若键存在则不做任何事)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/011_unordered_map_extract.cpp&#34;&gt;extract(从另一容器释出结点)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/011_unordered_map_merge.cpp&#34;&gt;merge(从另一容器接合结点)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;array&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;deque&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;forward_list&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;iterator&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;list&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;map&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;regex&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;set&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;span&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;string&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;string_view&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;unordered_map&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;unordered_set&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;vector&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in namespace std&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/012_stl_size.cpp&#34;&gt;size(返回容器或数组的大小)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/012_stl_empty.cpp&#34;&gt;empty(检查容器是否为空)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_17/012_stl_data.cpp&#34;&gt;data(获得指向底层数组的指针)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;div id=&#34;cpp_20&#34; align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;30%&#34; height=&#34;30%&#34; src=&#34;https://user-images.githubusercontent.com/87457873/134302390-53b4bfe7-eb75-4325-8376-dabd620c3a9d.jpg&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_20_keywords&#34;&gt;关键字&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_20_new_keywords&#34;&gt;新增关键字&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/001_keywords_README.md#char8_t&#34;&gt;char8_t&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/001_keywords_README.md#concept&#34;&gt;concept&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/001_keywords_README.md#consteval&#34;&gt;consteval&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/001_keywords_README.md#co_await&#34;&gt;co_await&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/001_keywords_README.md#co_return&#34;&gt;co_return&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/001_keywords_README.md#co_yield&#34;&gt;co_yield&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/001_keywords_README.md#requires&#34;&gt;requires&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cpp_20_meaning_changed__OR__new_meaning_added&#34;&gt;含义变化或者新增含义关键字（meaning changed or new meaning added）&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/001_keywords_README.md#export&#34;&gt;export&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_20_RTTI&#34;&gt;类型支持（基本类型、RTTI、类型特性）&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_type_traits&#34;&gt;Defined in header&amp;lt;type_traits&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/002_rtti_is_bounded_array.cpp&#34;&gt;is_bounded_array(检查类型是否为有已知边界的数组类型)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/002_rtti_is_unbounded_array.cpp&#34;&gt;is_unbounded_array(检查类型是否为有未知边界的数组类型)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/002_rtti_is_layout_compatible.cpp&#34;&gt;is_layout_compatible(检查二个类型是否布局兼容)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/002_rtti_is_pointer_interconvertible_base_of.cpp&#34;&gt;is_pointer_interconvertible_base_of(检查一个类型是否为另一类型的指针可互转换（起始）基类)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/002_rtti_is_pointer_interconvertible_with_class.cpp&#34;&gt;is_pointer_interconvertible_with_class(检查一个类型的对象是否与该类型的指定子对象指针可互转换)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/002_rtti_is_corresponding_member.cpp&#34;&gt;is_corresponding_member(检查二个指定成员是否在二个指定类型中的公共起始序列中彼此对应)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/002_rtti_is_nothrow_convertible.cpp&#34;&gt;is_nothrow_convertible(检查是否能转换一个类型为另一类型)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/002_rtti_remove_cvref.cpp&#34;&gt;remove_cvref(将 std::remove_cv 与 std::remove_reference 结合)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/002_rtti_common_reference.cpp&#34;&gt;common_reference(确定类型组的共用引用类型)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/002_rtti_basic_common_reference.cpp&#34;&gt;basic_common_reference(确定类型组的共用引用类型)&lt;/a&gt;&#xA;--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/002_rtti_type_identity.cpp&#34;&gt;type_identity(返回不更改的类型实参)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/002_rtti_is_constant_evaluated.cpp&#34;&gt;is_constant_evaluated(检测调用是否在常量求值的语境内发生)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_20_Coroutine&#34;&gt;协程支持&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_coroutine&#34;&gt;Defined in header&amp;lt;coroutine&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/003_rtti_coroutine_traits.cpp&#34;&gt;coroutine_traits(用于发现协程承诺类型的特征类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/003_rtti_coroutine_handle.cpp&#34;&gt;coroutine_handle(用于指代暂停或执行的协程)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/003_rtti_noop_coroutine.cpp&#34;&gt;noop_coroutine(创建在等待或销毁时无操作的协程柄)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/003_rtti_noop_coroutine_promise.cpp&#34;&gt;noop_coroutine_promise(用于无可观察作用的协程)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/003_rtti_noop_coroutine_handle.cpp&#34;&gt;noop_coroutine_handle(std::coroutine_handle&amp;lt;std::noop_coroutine_promise&amp;gt; ，有意用于指代无操作协程)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/003_rtti_suspend_never.cpp&#34;&gt;suspend_never(指示 await 表达式应该决不暂停)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/003_rtti_suspend_always.cpp&#34;&gt;suspend_always(指示 await 表达式应该始终暂停)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_20_compare&#34;&gt;三路比较&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_compare&#34;&gt;Defined in header&amp;lt;compare&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_std_coroutine_traits.cpp&#34;&gt;std::coroutine_traits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_std_coroutine_handle.cpp&#34;&gt;std::coroutine_handle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_three_way_comparable.cpp&#34;&gt;three_way_comparable(指定运算符 &amp;lt;=&amp;gt; 在给定类型上产生一致的结果)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_three_way_comparable_with.cpp&#34;&gt;three_way_comparable_with(指定运算符 &amp;lt;=&amp;gt; 在给定类型上产生一致的结果)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_partial_ordering.cpp&#34;&gt;partial_ordering(三路比较的结果类型，支持所有 6 种运算符，不可替换，并允许不可比较的值)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_weak_ordering.cpp&#34;&gt;weak_ordering(三路比较的结果类型，支持所有 6 种运算符且不可替换)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_strong_ordering.cpp&#34;&gt;strong_ordering(三路比较的结果类型，支持所有 6 种运算符且可替换)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_is_eq.cpp&#34;&gt;is_eq(具名比较函数)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_is_neq.cpp&#34;&gt;is_neq(具名比较函数)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_is_lt.cpp&#34;&gt;is_lt(具名比较函数)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_is_lteq.cpp&#34;&gt;is_lteq(具名比较函数)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_is_gt.cpp&#34;&gt;is_gt(具名比较函数)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_is_gteq.cpp&#34;&gt;is_gteq(具名比较函数)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_compare_three_way.cpp&#34;&gt;compare_three_way(实现 x &amp;lt;=&amp;gt; y 的函数对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_compare_three_way_result.cpp&#34;&gt;compare_three_way_result(获得三路比较运算符 &amp;lt;=&amp;gt; 在给定类型上的结果)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_common_comparison_category.cpp&#34;&gt;common_comparison_category(给定的全部类型都能转换到的最强比较类别)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_strong_order.cpp&#34;&gt;strong_order(进行三路比较并产生 std::strong_ordering 类型结果)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_weak_order.cpp&#34;&gt;weak_order(进行三路比较并产生 std::weak_ordering 类型结果)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_partial_order.cpp&#34;&gt;partial_order(进行三路比较并产生 std::partial_ordering 类型结果)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_compare_strong_order_fallback.cpp&#34;&gt;compare_strong_order_fallback(进行三路比较并产生 std::strong_ordering 类型的结果，即使 operator&amp;lt;=&amp;gt; 不可用)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_compare_weak_order_fallback.cpp&#34;&gt;compare_weak_order_fallback(进行三路比较并产生 std::weak_ordering 类型的结果，即使 operator&amp;lt;=&amp;gt; 不可用)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/004_rtti_compare_compare_partial_order_fallback.cpp&#34;&gt;compare_partial_order_fallback(进行三路比较并产生 std::partial_ordering 类型的结果，即使 operator&amp;lt;=&amp;gt; 不可用&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_concepts&#34;&gt;Defined in header&amp;lt;concepts&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/005_rtti_concepts_ranges_swap.cpp&#34;&gt;ranges::swap(交换两个对象的值)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_utility&#34;&gt;Defined in header&amp;lt;utility&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/006_utility_cmp_equal.cpp&#34;&gt;cmp_equal(比较二个整数值，而无转换所致的值更改)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/006_utility_cmp_not_equal.cpp&#34;&gt;cmp_not_equal(比较二个整数值，而无转换所致的值更改)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/006_utility_cmp_less.cpp&#34;&gt;cmp_less(比较二个整数值，而无转换所致的值更改)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/006_utility_cmp_less_equal.cpp&#34;&gt;cmp_less_equal(比较二个整数值，而无转换所致的值更改)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/006_utility_cmp_greater_equal.cpp&#34;&gt;cmp_greater_equal(比较二个整数值，而无转换所致的值更改)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/006_utility_in_range.cpp&#34;&gt;in_range(检查整数值是否在给定整数类型的范围内)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;### &lt;h5 id=&#34;cpp_headfile_format&#34;&gt;Defined in header&amp;lt;format&amp;gt;&lt;/h5&gt;&#xA;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_format.cpp&#34;&gt;format(在新 string 中存储参数的格式化表示)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_format_to.cpp&#34;&gt;format_to(通过输出迭代器写其参数的格式化表示)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_format_to_n.cpp&#34;&gt;format_to_n(通过输出迭代器写其参数的格式化表示，不超出指定的大小)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_formatted_size.cpp&#34;&gt;formatted_size(确定存储其参数的格式化表示所需的字符数)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_vformat.cpp&#34;&gt;vformat(std::format 的使用类型擦除的参数表示的非模板变体)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_vformat_to.cpp&#34;&gt;vformat_to(std::format_to 的使用类型擦除的参数表示的非模板变体)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_formatter.cpp&#34;&gt;formatter(定义给定类型的格式化规则的类模板)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_format_error.cpp&#34;&gt;format_error(格式化错误时抛出的异常类型)&lt;/a&gt;&#xA;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_basic_format_arg.cpp&#34;&gt;basic_format_arg(提供对用户定义格式化器的格式化参数的访问的类模板)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_basic_format_parse_context.cpp&#34;&gt;basic_format_parse_context(格式化字符串分析器状态)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_format_parse_context.cpp&#34;&gt;format_parse_context(格式化字符串分析器状态)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_wformat_parse_context.cpp&#34;&gt;wformat_parse_context(格式化字符串分析器状态)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_basic_format_context.cpp&#34;&gt;basic_format_context(格式化状态，包括所有格式化参数和输出迭代器)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_format_context.cpp&#34;&gt;format_context(格式化状态，包括所有格式化参数和输出迭代器)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_wformat_context.cpp&#34;&gt;wformat_context(格式化状态，包括所有格式化参数和输出迭代器)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_visit_format_arg.cpp&#34;&gt;visit_format_arg(用户定义格式化器的参数观览接口)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_make_format_args.cpp&#34;&gt;make_format_args(创建引用所有格式化参数的类型擦除对象，可转换到 format_args)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_make_wformat_args.cpp&#34;&gt;make_wformat_args(创建引用所有格式化参数的类型擦除对象，可转换到 format_args)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_basic_format_args.cpp&#34;&gt;basic_format_args(提供对所有格式化参数的访问的类)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_format_args.cpp&#34;&gt;format_args(提供对所有格式化参数的访问的类)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/007_format_wformat_args.cpp&#34;&gt;wformat_args(提供对所有格式化参数的访问的类)&lt;/a&gt;&#xA;--&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_memory&#34;&gt;Defined in header&amp;lt;memory&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/008_memory_uninitialized_move.cpp&#34;&gt;uninitialized_move(移动一个范围的对象到未初始化的内存区域)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/008_memory_uninitialized_move_n.cpp&#34;&gt;uninitialized_move_n(移动一定数量对象到未初始化内存区域)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/008_memory_uninitialized_default_construct.cpp&#34;&gt;uninitialized_default_construct(在范围所定义的未初始化的内存区域以默认初始化构造对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/008_memory_uninitialized_default_construct_n.cpp&#34;&gt;uninitialized_default_construct_n(在起始和计数所定义的未初始化内存区域用默认初始化构造对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/008_memory_uninitialized_value_construct.cpp&#34;&gt;uninitialized_value_construct(在范围所定义的未初始化内存中用值初始化构造对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/008_memory_uninitialized_value_construct_n.cpp&#34;&gt;uninitialized_value_construct_n(在起始和计数所定义的未初始化内存区域以值初始化构造对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/008_memory_destroy_at.cpp&#34;&gt;destroy_at(销毁在给定地址的对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/008_memory_destroy.cpp&#34;&gt;destroy(销毁一个范围中的对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/008_memory_destroy_n.cpp&#34;&gt;destroy_n(销毁范围中一定数量的对象)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;### &lt;h5 id=&#34;cpp_headfile_concepts&#34;&gt;Defined in header&amp;lt;memory_resource&amp;gt;&lt;/h5&gt;&#xA;&#x9;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/009_memory_resource_polymorphic_allocator.cpp&#34;&gt;polymorphic_allocator(以 std::memory_resource 构造，支持基于它的运行时多态的分配器)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/009_memory_resource_memory_resource.cpp&#34;&gt;memory_resource(一个抽象接口，用于各种封装内存资源的类)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/009_memory_resource_new_delete_resource.cpp&#34;&gt;new_delete_resource(返回一个静态的程序范围 std::pmr::memory_resource，它使用全局 operator new 与 operator delete 分配和解分配内存&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/009_memory_resource_null_memory_resource.cpp&#34;&gt;null_memory_resource(返回一个不进行任何分配的静态 std::pmr::memory_resource)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/009_memory_resource_get_default_resource.cpp&#34;&gt;get_default_resource(获取缺省 std::pmr::memory_resource)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/009_memory_resource_set_default_resource.cpp&#34;&gt;set_default_resource(设置缺省 std::pmr::memory_resource)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/009_memory_resource_pool_options.cpp&#34;&gt;pool_options(一组池资源的构造函数选项)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/009_memory_resource_synchronized_pool_resource.cpp&#34;&gt;synchronized_pool_resource(线程安全的 std::pmr::memory_resource，用于管理具有不同块大小的池中的分配)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/009_memory_resource_unsynchronized_pool_resource.cpp&#34;&gt;unsynchronized_pool_resource(线程不安全的 std::pmr::memory_resource，用于管理具有不同块大小的池中的分配)&lt;/a&gt;&#xA;* &lt;a href=&#34;https://github.com/0voice/cpp_new_features/blob/main/cpp_20/009_memory_resource_monotonic_buffer_resource.cpp&#34;&gt;monotonic_buffer_resource(一种特殊用途的 std::pmr::memory_resource，仅在资源被销毁时才释放所分配内存)&lt;/a&gt;&#x9;&#xA;--&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_20_compare&#34;&gt;Concepts library(概念库)&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_concepts&#34;&gt;Defined in header&amp;lt;concepts&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_same_as.cpp&#34;&gt;same_as(指定一个类型与另一类型相同)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_derived_from.cpp&#34;&gt;derived_from(指定一个类型派生自另一类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_convertible_to.cpp&#34;&gt;convertible_to(指定一个类型能隐式转换成另一类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_common_reference_with.cpp&#34;&gt;common_reference_with(指定两个类型共有一个公共引用类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_common_with.cpp&#34;&gt;common_with(指定两个类型共有一个公共类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_integral.cpp&#34;&gt;integral(指定类型为整型类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_signed_integral.cpp&#34;&gt;signed_integral(指定类型为有符号的整型类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_unsigned_integral.cpp&#34;&gt;unsigned_integral(指定类型为无符号的整型类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_floating_point.cpp&#34;&gt;floating_point(指定类型为浮点类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_assignable_from.cpp&#34;&gt;assignable_from(指定一个类型能从另一类型赋值)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_swappable.cpp&#34;&gt;swappable(指定一个类型能进行交换，或两个类型能彼此交换)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_swappable_with.cpp&#34;&gt;swappable_with(指定一个类型能进行交换，或两个类型能彼此交换)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_destructible.cpp&#34;&gt;destructible(指定能销毁该类型的对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_constructible_from.cpp&#34;&gt;constructible_from(指定该类型的变量能从一组实参类型进行构造，或绑定到一组实参类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_default_initializable.cpp&#34;&gt;default_initializable(指定能默认构造一个类型的对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_move_constructible.cpp&#34;&gt;move_constructible(指定能移动构造一个类型的对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_copy_constructible.cpp&#34;&gt;copy_constructible(指定能复制构造和移动构造一个类型的对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_boolean_testable.cpp&#34;&gt;boolean-testable(指定能用于布尔语境的类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_equality_comparable.cpp&#34;&gt;equality_comparable(指定运算符 == 为等价关系)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_equality_comparable_with.cpp&#34;&gt;equality_comparable_with(指定运算符 == 为等价关系)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_totally_ordered.cpp&#34;&gt;totally_ordered(指定比较运算符在该类型上产生全序)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_totally_ordered_with.cpp&#34;&gt;totally_ordered_with(指定比较运算符在该类型上产生全序)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_movable.cpp&#34;&gt;movable(指定能移动及交换一个类型的对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_copyable.cpp&#34;&gt;copyable(指定能复制、移动及交换一个类型的对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_semiregular.cpp&#34;&gt;semiregular(指定能赋值、移动、交换及默认构造一个类型的对象)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_regular.cpp&#34;&gt;regular(指定类型为正则，即它既为 semiregular 亦为 equality_comparable)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_invocable.cpp&#34;&gt;invocable(指定能以给定的一组实参类型调用的可调用类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_regular_invocable.cpp&#34;&gt;regular_invocable(指定能以给定的一组实参类型调用的可调用类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_predicate.cpp&#34;&gt;predicate(指定可调用类型为布尔谓词)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_relation.cpp&#34;&gt;relation(指定可调用类型为二元关系)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_equivalence_relation.cpp&#34;&gt;equivalence_relation(指定 relation 施加等价关系)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/010_concepts_strict_weak_order.cpp&#34;&gt;strict_weak_order(指定一个 relation 所强加的是严格弱序)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_20_memory&#34;&gt;动态内存管理&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_memory&#34;&gt;Defined in header&amp;lt;memory&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_uses_allocator_construction_args.cpp&#34;&gt;uses_allocator_construction_args(准备匹配给定类型所要求的使用分配器构造的口味的参数列表)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_make_obj_using_allocator.cpp&#34;&gt;make_obj_using_allocator(以使用分配器构造的手段创建给类型的对象)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_uninitialized_construct_using_allocator.cpp&#34;&gt;uninitialized_construct_using_allocator(以使用分配器构造的手段在指定的内存位置创建给定类型的对象)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_construct_at.cpp&#34;&gt;construct_at(在给定地址创建对象)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_no-throw-input-iterator.cpp&#34;&gt;no-throw-input-iterator(指定迭代器、哨位和范围上的某些操作不抛出)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_no-throw-forward-iterator.cpp&#34;&gt;no-throw-forward-iterator(指定迭代器、哨位和范围上的某些操作不抛出)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_no-throw-sentinel-for.cpp&#34;&gt;no-throw-sentinel-for(指定迭代器、哨位和范围上的某些操作不抛出)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_no-throw-input-range.cpp&#34;&gt;no-throw-input-range(指定迭代器、哨位和范围上的某些操作不抛出)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_no-throw-forward-range.cpp&#34;&gt;no-throw-forward-range(指定迭代器、哨位和范围上的某些操作不抛出)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_ranges_uninitialized_copy.cpp&#34;&gt;ranges::uninitialized_copy(复制元素范围到未初始化的内存区域)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_ranges_uninitialized_copy_n.cpp&#34;&gt;ranges::uninitialized_copy_n(复制一定量元素到未初始化的内存区域)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_ranges_uninitialized_fill.cpp&#34;&gt;ranges::uninitialized_fill(复制一个对象到范围所定义的未初始化的内存区域)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_ranges_uninitialized_fill_n.cpp&#34;&gt;ranges::uninitialized_fill_n(复制一个对象到起始与计数所定义的未初始化的内存区域)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_ranges_uninitialized_move.cpp&#34;&gt;ranges::uninitialized_move(移动对象范围到未初始化的内存区域)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_ranges_uninitialized_move_n.cpp&#34;&gt;ranges::uninitialized_move_n(移动一定量对象到未初始化的内存区域)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_ranges_uninitialized_default_construct.cpp&#34;&gt;ranges::uninitialized_default_construct(在范围所定义的未初始化的内存区域以默认初始化构造对象)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_ranges_uninitialized_default_construct_n.cpp&#34;&gt;ranges::uninitialized_default_construct_n(在起始与计数所定义的未初始化的内存区域以默认初始化构造对象)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_ranges_uninitialized_value_construct.cpp&#34;&gt;ranges::uninitialized_value_construct(在范围所定义的未初始化的内存区域以值初始化构造对象)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_ranges_uninitialized_value_construct_n.cpp&#34;&gt;ranges::uninitialized_value_construct_n(在起始与计数所定义的未初始化的内存区域以值初始化构造对象)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_ranges_destroy_at.cpp&#34;&gt;ranges::destroy_at(销毁位于给定地址的元素)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_ranges_destroy.cpp&#34;&gt;ranges::destroy(销毁范围中的元素)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_ranges_destroy_n.cpp&#34;&gt;ranges::destroy_n(销毁范围中一定量的元素)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_ranges_construct_at.cpp&#34;&gt;ranges::construct_at(在给定地址创建对象)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_to_address.cpp&#34;&gt;to_address(从指针式类型获得裸指针)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/011_memory_assume_aligned.cpp&#34;&gt;assume_aligned(告知编译器指针已对齐)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_20_memory&#34;&gt;日期和时间工具&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_chrono&#34;&gt;Defined in header&amp;lt;chrono&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_is_clock.cpp&#34;&gt;is_clock(确定类型是否为时钟 (Clock))&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_is_clock_v.cpp&#34;&gt;is_clock_v(确定类型是否为时钟 (Clock))&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_utc_clock.cpp&#34;&gt;utc_clock(协调世界时 (UTC) 的时钟 (Clock))&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_tai_clock.cpp&#34;&gt;tai_clock(国际原子时 (TAI) 的时钟 (Clock))&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_gps_clock.cpp&#34;&gt;gps_clock(GPS 时间的时钟 (Clock))&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_file_clock.cpp&#34;&gt;file_clock(用于文件时间的时钟 (Clock))&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_local_t.cpp&#34;&gt;local_t(表示本地时间的伪时钟)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_clock_time_conversion.cpp&#34;&gt;clock_time_conversion(定义如何转换一个时钟的时间点为另一个的特性类)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_clock_cast.cpp&#34;&gt;clock_cast(转换一个时钟的时间点为另一个)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_time_of_day.cpp&#34;&gt;time_of_day(表示一日中的时间)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_is_am.cpp&#34;&gt;is_am(在 12 时和 24 时格式当天时刻之间翻译)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_is_pm.cpp&#34;&gt;is_pm(在 12 时和 24 时格式当天时刻之间翻译)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_make12.cpp&#34;&gt;make12(在 12 时和 24 时格式当天时刻之间翻译)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_make24.cpp&#34;&gt;make24(在 12 时和 24 时格式当天时刻之间翻译)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_last_spec.cpp&#34;&gt;last_spec(指示一个月中最后日期或星期的标签类)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_day.cpp&#34;&gt;day(表示月之日期)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_month.cpp&#34;&gt;month(表示年之月份)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_year.cpp&#34;&gt;year(表示格里高利历中的年)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_weekday.cpp&#34;&gt;weekday(表示格里高利历中星期之日)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_weekday_indexed.cpp&#34;&gt;weekday_indexed(表示月份的第 n 个 weekday)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_weekday_last.cpp&#34;&gt;weekday_last(表示月份的最后一个 weekday)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_month_day.cpp&#34;&gt;month_day(表示特定 month 的特定 day)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_month_day_last.cpp&#34;&gt;month_day_last(表示特定 month 的最后一日)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_month_weekday.cpp&#34;&gt;month_weekday(表示特定 month 的第 n 个 weekday)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_month_weekday_last.cpp&#34;&gt;month_weekday_last(表示特定 month 的最后一个 weekday)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_year_month.cpp&#34;&gt;year_month(表示特定 year 的特定 month)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_year_month_day.cpp&#34;&gt;year_month_day(表示特定的 year 、 month 和 day)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_year_month_day_last.cpp&#34;&gt;year_month_day_last(表示特定 year 和 month 的最后一日)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_year_month_weekday.cpp&#34;&gt;year_month_weekday(表示特定 year 和 month 的第 n 个 weekday)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_year_month_weekday_last.cpp&#34;&gt;year_month_weekday_last(表示特定 year 和 month 的最后一个 weekday)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_operator.cpp&#34;&gt;operator/(创建格里高利历日期的约定语法)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_tzdb.cpp&#34;&gt;tzdb(描述 IANA 时区数据库的副本)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_tzdb_list.cpp&#34;&gt;tzdb_list(表示 tzdb 的链表)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_get_tzdb.cpp&#34;&gt;get_tzdb(访问和控制全球时区数据库信息)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_get_tzdb_list.cpp&#34;&gt;get_tzdb_list(访问和控制全球时区数据库信息)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_reload_tzdb.cpp&#34;&gt;reload_tzdb(访问和控制全球时区数据库信息)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_remote_version.cpp&#34;&gt;remote_version(访问和控制全球时区数据库信息)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_locate_zone.cpp&#34;&gt;locate_zone(定位基于其名称的 time_zone)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_current_zone.cpp&#34;&gt;current_zone(返回当前的 time_zone)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_time_zone.cpp&#34;&gt;time_zone(表示时区)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_sys_info.cpp&#34;&gt;sys_info(表示在特定时间点的关于时区的信息)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_local_info.cpp&#34;&gt;local_info(表示关于从本地时间转换到 UNIX 时间的信息)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_choose.cpp&#34;&gt;choose(选择应如何解析歧义的本地时间)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_zoned_traits.cpp&#34;&gt;zoned_traits(zoned_time 所用的时区指针的特性类)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_zoned_time.cpp&#34;&gt;zoned_time(表示时区和时间点)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_leap_second.cpp&#34;&gt;leap_second(含有关于插入闰秒的信息)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_time_zone_link.cpp&#34;&gt;time_zone_link(表示时区的替用名)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_nonexistent_local_time.cpp&#34;&gt;nonexistent_local_time(抛出以报告本地时间不存在的异常)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_ambiguous_local_time.cpp&#34;&gt;ambiguous_local_time(抛出以报告本地时间有歧义的异常)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/012_chrono_parse.cpp&#34;&gt;parse(从流分析 chrono 对象)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_20_string&#34;&gt;字符串&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_string&#34;&gt;Defined in header&amp;lt;string&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/013_string_starts_with.cpp&#34;&gt;starts_with(检查 string 是否始于给定前缀)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/013_string_ends_with.cpp&#34;&gt;ends_with(检查 string 是否终于给定后缀)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_string_view&#34;&gt;Defined in header&amp;lt;string_view&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/014_string_view_starts_with.cpp&#34;&gt;starts_with(检查 string_view 是否始于给定前缀)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/014_string_view_ends_with.cpp&#34;&gt;ends_with(检查 string_view 是否终于给定后缀)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_cuchar&#34;&gt;Defined in header&amp;lt;cuchar&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/015_cuchar_mbrtoc8.cpp&#34;&gt;mbrtoc8(转换窄多字节字符为 UTF-8 编码)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/015_cuchar_c8rtomb.cpp&#34;&gt;c8rtomb(转换 UTF-8 字符串为窄多字节编码)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_20_Containers_library&#34;&gt;容器库&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_array&#34;&gt;Defined in header&amp;lt;array&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/016_array_to_array.cpp&#34;&gt;to_array(从内建数组创建 std::array 对象)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_vector&#34;&gt;Defined in header&amp;lt;vector&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/017_vector_erase.cpp&#34;&gt;erase(std::vector)(擦除所有满足特定判别标准的元素)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/017_vector_erase_if.cpp&#34;&gt;erase_if(std::vector)(擦除所有满足特定判别标准的元素)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_map&#34;&gt;Defined in header&amp;lt;map&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/018_map_contains.cpp&#34;&gt;contains(检查容器是否含有带特定键的元素)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/018_map_erase_if.cpp&#34;&gt;erase_if(std::map)(擦除所有满足特定判别标准的元素)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_unordered_map&#34;&gt;Defined in header&amp;lt;unordered_map&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/019_unordered_map_contains.cpp&#34;&gt;contains(检查容器是否含有带特定键的元素)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/019_unordered_map_erase_if.cpp&#34;&gt;erase_if(std::unordered_map)(擦除所有满足特定判别标准的元素)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_span&#34;&gt;Defined in header&amp;lt;span&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/020_span_begin.cpp&#34;&gt;begin(返回指向起始的迭代器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/020_span_end.cpp&#34;&gt;end(返回指向末尾的迭代器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/020_span_rbegin.cpp&#34;&gt;rbegin(返回指向起始的逆向迭代器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/020_span_rend.cpp&#34;&gt;rend(返回指向末尾的逆向迭代器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/020_span_front.cpp&#34;&gt;front(访问第一个元素)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/020_span_back.cpp&#34;&gt;back(访问最后一个元素)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/020_span_dynamic_extent.cpp&#34;&gt;dynamic_extent(size_t 类型常量，指明 span 拥有动态长度)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_span&#34;&gt;Defined in namespace std&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_indirectly_readable.cpp&#34;&gt;indirectly_readable(指定类型通过应用运算符 * 可读)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_indirectly_writable.cpp&#34;&gt;indirectly_writable(指定可向迭代器所引用的对象写入值)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_weakly_incrementable.cpp&#34;&gt;weakly_incrementable(指定 semiregular 类型能以前后自增运算符自增)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_incrementable.cpp&#34;&gt;incrementable(指定 weakly_incrementable 类型上的自增操作保持相等性，而且该类型为 equality_comparable)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_input_or_output_iterator.cpp&#34;&gt;input_or_output_iterator(指定该类型对象可以自增且可以解引用)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_sentinel_for.cpp&#34;&gt;sentinel_for(指定类型为某个 input_or_output_iterator 类型的哨位类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_sized_sentinel_for.cpp&#34;&gt;sized_sentinel_for(指定可对一个迭代器和一个哨位应用 - 运算符，以在常数时间计算其距离)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_input_iterator.cpp&#34;&gt;input_iterator(指定类型为输入迭代器，即可读取其所引用的值，且可前/后自增)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_output_iterator.cpp&#34;&gt;output_iterator(指定类型为给定的值类型的输出迭代器，即可向其写入该类型的值，且可前/后自增)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_forward_iterator.cpp&#34;&gt;forward_iterator(指定 input_iterator 为向前迭代器，支持相等比较与多趟操作)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_bidirectional_iterator.cpp&#34;&gt;bidirectional_iterator(指定 forward_iterator 为双向迭代器，支持向后移动)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_random_access_iterator.cpp&#34;&gt;random_access_iterator(指定 bidirectional_iterator 为随机访问迭代器，支持常数时间内的前进和下标访问)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_contiguous_iterator.cpp&#34;&gt;contiguous_iterator(指定 random_access_iterator 为连续迭代器，指代内存中连续相接的元素)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_indirectly_readable_traits.cpp&#34;&gt;indirectly_readable_traits(计算 indirectly_readable 类型的值类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_iter_value_t.cpp&#34;&gt;iter_value_t(计算迭代器的关联类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_iter_reference_t.cpp&#34;&gt;iter_reference_t(计算迭代器的关联类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_iter_difference_t.cpp&#34;&gt;iter_difference_t(计算迭代器的关联类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_iter_rvalue_reference_t.cpp&#34;&gt;iter_rvalue_reference_t(计算迭代器的关联类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_iter_common_reference_t.cpp&#34;&gt;iter_common_reference_t(计算迭代器的关联类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_iterator_traits.cpp&#34;&gt;iterator_traits(为迭代器各项性质提供统一接口)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_input_iterator_tag.cpp&#34;&gt;input_iterator_tag(用于指示迭代器类别的空类类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_output_iterator_tag.cpp&#34;&gt;output_iterator_tag(用于指示迭代器类别的空类类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_forward_iterator_tag.cpp&#34;&gt;forward_iterator_tag(用于指示迭代器类别的空类类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_bidirectional_iterator_tag.cpp&#34;&gt;bidirectional_iterator_tag(用于指示迭代器类别的空类类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_random_access_iterator_tag.cpp&#34;&gt;random_access_iterator_tag(用于指示迭代器类别的空类类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/021_std_contiguous_iterator_tag.cpp&#34;&gt;contiguous_iterator_tag(用于指示迭代器类别的空类类型)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_span&#34;&gt;Defined in namespace std::ranges&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/022_ranges_iter_move.cpp&#34;&gt;iter_move(将解引用迭代器的结果转型为其关联的右值引用类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/022_ranges_iter_swap.cpp&#34;&gt;iter_swap(交换两个可解引用对象所引用的值)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_span&#34;&gt;Defined in namespace std&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_indirectly_readable.cpp&#34;&gt;indirectly_readable(指定类型通过应用运算符 * 可读)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_indirectly_writable.cpp&#34;&gt;indirectly_writable(指定可向迭代器所引用的对象写入值)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_weakly_incrementable.cpp&#34;&gt;weakly_incrementable(指定 semiregular 类型能以前后自增运算符自增)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_incrementable.cpp&#34;&gt;incrementable(指定 weakly_incrementable 类型上的自增操作保持相等性，而且该类型为 equality_comparable)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_input_or_output_iterator.cpp&#34;&gt;input_or_output_iterator(指定该类型对象可以自增且可以解引用)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_sentinel_for.cpp&#34;&gt;sentinel_for(指定类型为某个 input_or_output_iterator 类型的哨位类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_sized_sentinel_for.cpp&#34;&gt;sized_sentinel_for(指定可对一个迭代器和一个哨位应用 - 运算符，以在常数时间计算其距离)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_input_iterator.cpp&#34;&gt;input_iterator(指定类型为输入迭代器，即可读取其所引用的值，且可前/后自增)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_output_iterator.cpp&#34;&gt;output_iterator(指定类型为给定的值类型的输出迭代器，即可向其写入该类型的值，且可前/后自增)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_forward_iterator.cpp&#34;&gt;forward_iterator(指定 input_iterator 为向前迭代器，支持相等比较与多趟操作)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_bidirectional_iterator.cpp&#34;&gt;bidirectional_iterator(指定 forward_iterator 为双向迭代器，支持向后移动)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_random_access_iterator.cpp&#34;&gt;random_access_iterator(指定 bidirectional_iterator 为随机访问迭代器，支持常数时间内的前进和下标访问)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_contiguous_iterator.cpp&#34;&gt;contiguous_iterator(指定 random_access_iterator 为连续迭代器，指代内存中连续相接的元素)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_incrementable_traits.cpp&#34;&gt;incrementable_traits(计算 weakly_incrementable 类型的差类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_indirectly_readable_traits.cpp&#34;&gt;indirectly_readable_traits(计算 indirectly_readable 类型的值类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_iter_value_t.cpp&#34;&gt;iter_value_t(计算迭代器的关联类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_iter_reference_t.cpp&#34;&gt;iter_reference_t(计算迭代器的关联类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_iter_difference_t.cpp&#34;&gt;iter_difference_t(计算迭代器的关联类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_iter_rvalue_reference_t.cpp&#34;&gt;iter_rvalue_reference_t(计算迭代器的关联类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_iter_common_reference_t.cpp&#34;&gt;iter_common_reference_t(计算迭代器的关联类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_iterator_traits.cpp&#34;&gt;iterator_traits(为迭代器各项性质提供统一接口)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_input_iterator_tag.cpp&#34;&gt;input_iterator_tag(用于指示迭代器类别的空类类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_output_iterator_tag.cpp&#34;&gt;output_iterator_tag(用于指示迭代器类别的空类类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_forward_iterator_tag.cpp&#34;&gt;forward_iterator_tag(用于指示迭代器类别的空类类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_bidirectional_iterator_tag.cpp&#34;&gt;bidirectional_iterator_tag(用于指示迭代器类别的空类类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_random_access_iterator_tag.cpp&#34;&gt;random_access_iterator_tag(用于指示迭代器类别的空类类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/023_std_contiguous_iterator_tag.cpp&#34;&gt;contiguous_iterator_tag(用于指示迭代器类别的空类类型)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_span&#34;&gt;Defined in header &#xA; &lt;iterator&gt;&lt;/iterator&gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_span&#34;&gt;Defined in namespace std&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_indirectly_unary_invocable.cpp&#34;&gt;indirectly_unary_invocable(指定可调用类型能以解引用某个 indirectly_readable 类型的结果进行调用)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_indirectly_regular_unary_invocable.cpp&#34;&gt;indirectly_regular_unary_invocable(指定可调用类型能以解引用某个 indirectly_readable 类型的结果进行调用)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_indirect_unary_predicate.cpp&#34;&gt;indirect_unary_predicate(指定可调用类型，在以解引用一个 indirectly_readable 类型的结果进行调用时，满足 predicate)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_indirect_binary_predicate.cpp&#34;&gt;indirect_binary_predicate(指定可调用类型，在以解引用两个 indirectly_readable 类型的结果进行调用时，满足 predicate)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_indirect_equivalence_relation.cpp&#34;&gt;indirect_equivalence_relation(指定可调用类型，在以解引用两个 indirectly_readable 类型的结果进行调用时，满足 equivalence_relation)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_indirect_strict_weak_order.cpp&#34;&gt;indirect_strict_weak_order(指定可调用类型，在以解引用两个 indirectly_readable 类型的结果进行调用时，满足 strict_weak_order)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_indirectly_movable.cpp&#34;&gt;indirectly_movable(指定可从 indirectly_readable 类型移动值给 indirectly_writable 类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_indirectly_movable_storable.cpp&#34;&gt;indirectly_movable_storable(指定可从 indirectly_readable 类型移动值给 indirectly_writable 类型，且该移动可以通过中间对象进行)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_indirectly_copyable.cpp&#34;&gt;indirectly_copyable(指定可从 indirectly_readable 类型复制值给 indirectly_writable 类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_indirectly_copyable_storable.cpp&#34;&gt;indirectly_copyable_storable(指定可从 indirectly_readable 类型复制值给 indirectly_writable 类型，且该复制可以通过中间对象进行)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_indirectly_swappable.cpp&#34;&gt;indirectly_swappable(指定能交换两个 indirectly_readable 类型所引用的值)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_indirectly_comparable.cpp&#34;&gt;indirectly_comparable(指定能比较两个 indirectly_readable 类型所引用的值)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_permutable.cpp&#34;&gt;permutable(指定在原位重排元素的算法的共用要求)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_mergeable.cpp&#34;&gt;mergeable(指定通过复制元素将已排序序列归并到输出序列中的算法的要求)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_sortable.cpp&#34;&gt;sortable(指定重排序列为有序序列的算法的共用要求)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_indirect_result_t.cpp&#34;&gt;indirect_result_t(计算在解引用某组 indirectly_readable 类型的结果上调用可调用对象的结果)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_projected.cpp&#34;&gt;projected(用于对接受投影的算法指定约束的辅助模板)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_move_sentinel.cpp&#34;&gt;move_sentinel(用于 std::move_iterator 的哨位适配器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_common_iterator.cpp&#34;&gt;common_iterator(适配一个迭代器类型及其哨位为一个公共迭代器类型)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_default_sentinel_t.cpp&#34;&gt;default_sentinel_t(用于知晓其边界的迭代器的默认哨位)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_counted_iterator.cpp&#34;&gt;counted_iterator(对到范围结尾距离进行跟踪的迭代器适配器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/024_iterator_unreachable_sentinel_t.cpp&#34;&gt;unreachable_sentinel_t(始终与任何 weakly_incrementable 类型比较都不相等的哨位)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_span&#34;&gt;Defined in header &#xA; &lt;iterator&gt;&lt;/iterator&gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/025_iterator_ranges_advanc.cpp&#34;&gt;ranges::advance(令迭代器前进给定的距离或到给定的边界)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/025_iterator_ranges_distance.cpp&#34;&gt;ranges::distance(返回迭代器与哨位间的距离，或范围起始与结尾间的距离)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/025_iterator_ranges_next.cpp&#34;&gt;ranges::next(自增迭代器给定的距离或到边界)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/025_iterator_ranges_prev.cpp&#34;&gt;ranges::prev(自减迭代器给定的距离或到边界)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;array&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;deque&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;forward_list&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;iterator&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;list&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;map&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;regex&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;set&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;span&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;string&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;string_view&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;unordered_map&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;unordered_set&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in header &amp;lt;vector&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_initializer_list&#34;&gt;Defined in namespace std&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/026_std_ssize.cpp&#34;&gt;ssize(返回容器或数组的大小)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_span&#34;&gt;Defined in header &amp;lt;ranges&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_span&#34;&gt;Defined in header &amp;lt;iterator&amp;gt;&lt;/h5&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_span&#34;&gt;Defined in namespace std::ranges&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/027_ranges_ranges_begin.cpp&#34;&gt;ranges::begin(返回指向范围起始的迭代器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/027_ranges_ranges_cbegin.cpp&#34;&gt;ranges::cbegin(返回指向只读范围起始的迭代器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/027_ranges_ranges_end.cpp&#34;&gt;ranges::end(返回指示范围结尾的哨位)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/027_ranges_ranges_cend.cpp&#34;&gt;ranges::cend(返回指示只读范围结尾的哨位)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/027_ranges_ranges_rbegin.cpp&#34;&gt;ranges::rbegin(返回指向范围的逆向迭代器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/027_ranges_ranges_crbegin.cpp&#34;&gt;ranges::crbegin(返回指向只读范围的逆向迭代器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/027_ranges_ranges_rend.cpp&#34;&gt;ranges::rend(返回指向范围的逆向尾迭代器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/027_ranges_ranges_crend.cpp&#34;&gt;ranges::crend(返回指向只读范围的逆向尾迭代器)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/027_ranges_ranges_size.cpp&#34;&gt;ranges::size(获得能在常数时间内计算大小的范围的大小)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/027_ranges_ranges_ssize.cpp&#34;&gt;ranges::ssize(获得能在常数时间内计算大小的范围的大小，并将它转换成有符号整数)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/027_ranges_ranges_empty.cpp&#34;&gt;ranges::empty(检查范围是否为空)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/027_ranges_ranges_data.cpp&#34;&gt;ranges::data(获得指向连续范围的起始的指针)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_20/027_ranges_ranges_cdata.cpp&#34;&gt;ranges::cdata(获得指向只读连续范围的起始的指针)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;div id=&#34;cpp_23&#34; align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;30%&#34; height=&#34;30%&#34; src=&#34;https://user-images.githubusercontent.com/87457873/134302554-85d6bf7c-1e1d-4579-8141-8a4c3e8d92e2.jpg&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_23_RTTI&#34;&gt;类型支持（基本类型、RTTI、类型特性）&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_type_traits&#34;&gt;Defined in header&amp;lt;type_traits&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_23/001_rtti_is_scoped_enum.cpp&#34;&gt;is_scoped_enum(检查类型是否为有作用域枚举类型)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_utility&#34;&gt;Defined in header&amp;lt;utility&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_23/002_utility_to_underlying.cpp&#34;&gt;to_underlying(转换枚举到其底层类型)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_stacktrace&#34;&gt;Defined in header&amp;lt;stacktrace&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_23/003_stacktrace_stacktrace_entry.cpp&#34;&gt;stacktrace_entry(栈踪中求值的表示)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_23/003_stacktrace_basic_stacktrace.cpp&#34;&gt;basic_stacktrace(由栈踪条目组成的调用序列的近似表示)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_23_memory&#34;&gt;动态内存管理&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_memory&#34;&gt;Defined in header&amp;lt;memory&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_23/004_memory_out_ptr_t.cpp&#34;&gt;out_ptr_t(与外来指针设置器交互，并在析构时重设智能指针)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_23/004_memory_out_ptr.cpp&#34;&gt;out_ptr(以关联的智能指针和重设参数创建 out_ptr_t)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_23/004_memory_inout_ptr_t.cpp&#34;&gt;inout_ptr_t(与外来指针设置器交互，从智能指针获得初始指针值，并在析构时重设它)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_23/004_memory_inout_ptr.cpp&#34;&gt;inout_ptr(以关联的智能指针和重设参数创建 inout_ptr_t)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_23/004_memory_allocation_result.cpp&#34;&gt;allocation_result(记录由 allocate_at_least 分配的存储的地址与实际大小)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_23/004_memory_allocate_at_least.cpp&#34;&gt;allocate_at_least(经由分配器分配至少与请求的大小一样大的存储)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpp_23_string&#34;&gt;字符串&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_string&#34;&gt;Defined in header&amp;lt;string&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_23/005_string_contains.cpp&#34;&gt;contains(检查字符串是否含有给定的子串或字符)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h5 id=&#34;cpp_headfile_string_view&#34;&gt;Defined in header&amp;lt;string_view&amp;gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features/raw/main/cpp_23/005_string_view_contains.cpp&#34;&gt;contains(检查字符串视图是否含有给定的子串或字符)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;联系专栏&lt;/h2&gt; &#xA;&lt;h4&gt;零声教育，专注于c/c++Linux后台服务器开发架构技术学习提升。&lt;br&gt;&lt;/h4&gt; &#xA;&lt;p&gt;每天晚上8点【免费技术直播】：&lt;a href=&#34;https://ke.qq.com/course/417774?flowToken=1037711&#34;&gt;分享Linux，Nginx，ZeroMQ，MySQL，Redis，fastdfs，MongoDB，ZK，流媒体，CDN，P2P，K8S，Docker，TCP/IP，协程，DPDK等技术内容，立即学习。&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;关注微信公众号【后台服务架构师】——【联系我们】，获取本repo最全PDF学习文档！&lt;/h4&gt; &#xA;&lt;img width=&#34;65%&#34; height=&#34;65%&#34; src=&#34;https://user-images.githubusercontent.com/87457873/130796999-03af3f54-3719-47b4-8e41-2e762ab1c68b.png&#34;&gt;</summary>
  </entry>
  <entry>
    <title>PetoiCamp/OpenCat</title>
    <updated>2023-03-11T01:31:03Z</updated>
    <id>tag:github.com,2023-03-11:/PetoiCamp/OpenCat</id>
    <link href="https://github.com/PetoiCamp/OpenCat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An affordable Boston Dynamics-style quadruped robot dog for STEM education and AI-enhanced services.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenCat&lt;/h1&gt; &#xA;&lt;p&gt;OpenCat is the open-source Arduino and Raspberry Pi-based quadruped robotic pet framework developed by Petoi, the maker of futuristic programmable robotic pets.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/PetoiCamp/NonCodeFiles/raw/master/gif/walk.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/PetoiCamp/NonCodeFiles/raw/master/gif/run.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inspired by Boston Dynamics&#39; Big Dog, Dr. Rongzhong Li started the project in his dorm in 2016. After one year of R&amp;amp;D, he founded Petoi LLC and devoted all his resources to the startup. The goal is to foster collaboration in quadruped(four-legged) robotic research, education, and engineering development of agile and affordable quadruped robot pets, bring STEM concepts to the mass and inspire newcomers (including many kids and adults) to join the robotic AI revolution to create more applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/PetoiCamp/NonCodeFiles/raw/master/gif/slope.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The project is still a complex system only for skilled makers. Yet we want to share our design and work with the community by mass production and bring down the hardware and software costs. OpenCat has been deployed on Petoi&#39;s bionic palm-sized, realistic lifelike &lt;a href=&#34;https://www.petoi.com/collections/robots/products/petoi-nybble-robot-cat?utm_source=github&amp;amp;utm_medium=code&amp;amp;utm_campaign=nybble&#34;&gt;cute robot cat Nybble&lt;/a&gt; and &lt;a href=&#34;https://www.petoi.com/collections/robots/products/petoi-bittle-robot-dog?utm_source=github&amp;amp;utm_medium=code&amp;amp;utm_campaign=bittle&#34;&gt;high-performance robot dog Bittle&lt;/a&gt;. We now have established a production line and can ship these &lt;a href=&#34;https://www.petoi.com/store?utm_source=github&amp;amp;utm_medium=code&amp;amp;utm_campaign=store&#34;&gt;affordable robotic kits and accessories&lt;/a&gt; worldwide.&lt;/p&gt; &#xA;&lt;p&gt;This project provides a base open-source platform to create amazing programmable gaits, locomotion, and deployment of inverse kinematics quadruped robots and bring simulations to the real world via C/C++/Python programming languages. Our users have deployed &lt;a href=&#34;https://www.youtube.com/playlist?list=PLHMFXft_rV6MWNGyofDzRhpatxZuUZMdg&#34;&gt;NVIDIA Issac simulations and reinforcement learning on our robots&lt;/a&gt;. Our users have also successfully deployed OpenCat on their DIY 3D-print robot pets.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/PetoiCamp/NonCodeFiles/raw/master/gif/stand.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/PetoiCamp/NonCodeFiles/raw/master/gif/NybbleBalance.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve successfully crowdfunded these two mini robot kits and shipped thousands of units worldwide. With our customized Arduino board and servos coordinating all instinctive and sophisticated movements(walking, running, jumping, backflipping), one can clip on various sensors to bring in perception and inject artificial intelligence capabilities by mounting a Raspberry Pi or other AI chips(such as Nvidia Jetson Nano) through wired/wireless connections. Please see &lt;a href=&#34;https://www.petoi.com/pages/faq?utm_source=github&amp;amp;utm_medium=code&amp;amp;utm_campaign=faq&#34;&gt;Petoi FAQs&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;Also, Check out &lt;a href=&#34;https://www.petoi.camp/forum/showcase&#34;&gt;all of the OpenCat and Petoi robot user showcases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/PetoiCamp/NonCodeFiles/raw/master/gif/ball.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup Process:&lt;/h2&gt; &#xA;&lt;p&gt;OpenCat software works on both Nybble and Bittle, controlled by NyBoard based on ATmega328P. More detailed documentation can be found at the &lt;a href=&#34;https://docs.petoi.com&#34;&gt;Petoi Doc Center&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To configure the board:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the repo and unfold. Remove the &lt;strong&gt;-main&lt;/strong&gt; (or any branch name) suffix of the folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the file OpenCat.ino, select your robot and board version.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#define BITTLE    //Petoi 9 DOF robot dog: 1x on head + 8x on leg&#xA;//#define NYBBLE  //Petoi 11 DOF robot cat: 2x on head + 1x on tail + 8x on leg&#xA;&#xA;//#define NyBoard_V0_1&#xA;//#define NyBoard_V0_2&#xA;#define NyBoard_V1_0&#xA;//#define NyBoard_V1_1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Comment out &lt;code&gt;#define MAIN_SKETCH&lt;/code&gt; so that it will turn the code to the board configuration mode. Upload and follow the serial prompts to proceed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// #define MAIN_SKETCH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;If you activate &lt;code&gt;#define AUTO_INIT&lt;/code&gt;, the program will automatically set up without prompts. It will not reset joint offsets but calibrate the IMU. It&#39;s just a convenient option for our production line.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plug the USB uploader to the NyBoard and install the driver if no USB port is found under Arduino -&amp;gt; Tools -&amp;gt; Port.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Press the upload button (-&amp;gt;) at the top-left corner in Arduino IDE.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the serial monitor of Arduino IDE. You can find the button either under Tools, or at the top-right corner of the IDE.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Set the serial monitor as &lt;strong&gt;no line ending&lt;/strong&gt; and &lt;strong&gt;115200&lt;/strong&gt; baud rate. The serial prompts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Reset joint offsets? (Y/n)&#xA;Y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Input ‘Y’ and hit enter, if you want to reset all the joint offsets to 0.&lt;/p&gt; &#xA;&lt;p&gt;The program will do the reset, then update the constants and instinctive skills in the static memory.&lt;/p&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;IMU (Inertial Measurement Unit) calibration.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The serial prompts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Calibrate the IMU? (Y/n): &#xA;Y &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Input ‘Y’ and hit enter, if you have never calibrated the IMU or want to redo calibration.&lt;/p&gt; &#xA;&lt;p&gt;Put the robot flat on the table and don&#39;t touch it. The robot will long beep six times to give you enough time. Then it will read hundreds of sensor data and save the offsets. It will beep when the calibration finishes.&lt;/p&gt; &#xA;&lt;p&gt;When the serial monitor prints &#34;Ready!&#34;, you can close the serial monitor to do the next step.&lt;/p&gt; &#xA;&lt;ol start=&#34;9&#34;&gt; &#xA; &lt;li&gt;Uncomment &lt;code&gt;#define MAIN_SKETCH&lt;/code&gt; to make it active. This time the code becomes the normal program for the major functionalities. Upload the code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#define MAIN_SKETCH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the serial monitor prints &#34;Ready!&#34;, the robot is ready to take your next instructions.&lt;/p&gt; &#xA;&lt;ol start=&#34;10&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have never calibrated the joints’ offsets or reset the offsets in Step2, you need to calibrate them. If you boot up the robot with one side up, it will enter the calibration state automatically for you to install the legs. Otherwise, it will enter the normal rest state&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use the serial monitor to calibrate it directly. Or you may plug in the Bluetooth dongle, and use the Petoi app (on Android/iOS) for a more user-friendly interface. The mobile app is available on:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IOS: &lt;a href=&#34;https://apps.apple.com/us/app/petoi/id1581548095&#34;&gt;App Store&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android: &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.petoi.petoiapp&#34;&gt;Google Play&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can refer to the calibration section in the user manual (&lt;a href=&#34;https://bittle.petoi.com/6-calibration&#34;&gt;https://bittle.petoi.com/6-calibration&lt;/a&gt;) and Guide for the Petoi App(&lt;a href=&#34;https://docs.petoi.com/app-guide&#34;&gt;https://docs.petoi.com/app-guide&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;ol start=&#34;12&#34;&gt; &#xA; &lt;li&gt;you can use the infrared remote or other applications (such as the Petoi App, python, serial monitor ... etc.) to play with the robot (&lt;a href=&#34;https://bittle.petoi.com/7-play-with-bittle&#34;&gt;https://bittle.petoi.com/7-play-with-bittle&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For updates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;star this repository to receive timely notifications on changes.&lt;/li&gt; &#xA; &lt;li&gt;visit &lt;a href=&#34;http://www.petoi.com&#34;&gt;www.petoi.com&lt;/a&gt; and subscribe to our official newsletters for project announcements. We also host a forum at &lt;a href=&#34;https://www.petoi.com/forum&#34;&gt;petoi.camp&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;follow us on &lt;a href=&#34;https://twitter.com/petoicamp&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://www.instagram.com/petoicamp/&#34;&gt;Instagram&lt;/a&gt;, and &lt;a href=&#34;https://www.youtube.com/c/rongzhongli&#34;&gt;YouTube channel&lt;/a&gt; for fun videos and community activities.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/PetoiCamp/NonCodeFiles/raw/master/gif/backflip.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLHMFXft_rV6MWNGyofDzRhpatxZuUZMdg&#34;&gt;Advanced tutorials made by users&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLHMFXft_rV6PSS3Qu5yQ-0iPW-ohu1sM3&#34;&gt;Review, open-box, and demos by users&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/PetoiCamp/OpenCat-Old&#34;&gt;old repository for OpenCat&lt;/a&gt; is too redundant with large image logs and will be obsolete after adding compatibility notes in the documentation.&lt;/p&gt;</summary>
  </entry>
</feed>