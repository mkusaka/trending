<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-18T01:29:15Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jgromes/RadioLib</title>
    <updated>2025-02-18T01:29:15Z</updated>
    <id>tag:github.com,2025-02-18:/jgromes/RadioLib</id>
    <link href="https://github.com/jgromes/RadioLib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universal wireless communication library for embedded devices&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RadioLib &lt;img src=&#34;https://github.com/jgromes/RadioLib/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://registry.platformio.org/libraries/jgromes/RadioLib&#34;&gt;&lt;img src=&#34;https://badges.registry.platformio.org/packages/jgromes/library/RadioLib.svg?sanitize=true&#34; alt=&#34;PlatformIO Registry&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://components.espressif.com/components/jgromes/radiolib&#34;&gt;&lt;img src=&#34;https://components.espressif.com/components/jgromes/radiolib/badge.svg?sanitize=true&#34; alt=&#34;Component Registry&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;em&gt;One radio library to rule them all!&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Universal wireless communication library for embedded devices&lt;/h2&gt; &#xA;&lt;p&gt;RadioLib allows its users to integrate all sorts of different wireless communication modules, protocols and even digital modes into a single consistent system. Want to add a Bluetooth interface to your LoRa network? Sure thing! Do you just want to go really old-school and play around with radio teletype, slow-scan TV, or even Hellschreiber using nothing but a cheap radio module? Why not!&lt;/p&gt; &#xA;&lt;p&gt;RadioLib natively supports Arduino, but can run in non-Arduino environments as well! See &lt;a href=&#34;https://github.com/jgromes/RadioLib/wiki/Porting-to-non-Arduino-Platforms&#34;&gt;this Wiki page&lt;/a&gt; and &lt;a href=&#34;https://github.com/jgromes/RadioLib/tree/master/examples/NonArduino&#34;&gt;examples/NonArduino&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;RadioLib was originally created as a driver for &lt;a href=&#34;https://github.com/jgromes/RadioShield&#34;&gt;&lt;strong&gt;RadioShield&lt;/strong&gt;&lt;/a&gt;, but it can be used to control as many different wireless modules as you like - or at least as many as your microcontroller can handle!&lt;/p&gt; &#xA;&lt;h3&gt;Quick links:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jgromes/RadioLib/wiki&#34;&gt;&lt;strong&gt;Wiki&lt;/strong&gt;&lt;/a&gt; - contains useful general information on using this library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jgromes/RadioLib/wiki/Frequently-Asked-Questions&#34;&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt; - frequently asked questions, and answers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jgromes.github.io/RadioLib&#34;&gt;&lt;strong&gt;API Reference&lt;/strong&gt;&lt;/a&gt; - full API reference, automatically generated from the source code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://radiolib-org.github.io/status_decoder/decode.html&#34;&gt;&lt;strong&gt;Status Code Decoder&lt;/strong&gt;&lt;/a&gt; - decoder for status codes returned by RadioLib methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://radiolib-org.github.io/debug_decoder/decode.html&#34;&gt;&lt;strong&gt;Debug Log Decoder&lt;/strong&gt;&lt;/a&gt; - decoder for RadioLib SPI debug logs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported modules:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CC1101&lt;/strong&gt; FSK radio module&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LLCC68&lt;/strong&gt; LoRa module&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LR11x0&lt;/strong&gt; series LoRa/GFSK modules (LR1110, LR1120, LR1121)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;nRF24L01&lt;/strong&gt; 2.4 GHz module&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RF69&lt;/strong&gt; FSK/OOK radio module&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RFM2x&lt;/strong&gt; series FSK modules (RFM22, RM23)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RFM9x&lt;/strong&gt; series LoRa modules (RFM95, RM96, RFM97, RFM98)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Si443x&lt;/strong&gt; series FSK modules (Si4430, Si4431, Si4432)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;STM32WL&lt;/strong&gt; integrated microcontroller/LoRa module&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SX126x&lt;/strong&gt; series LoRa modules (SX1261, SX1262, SX1268)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SX127x&lt;/strong&gt; series LoRa modules (SX1272, SX1273, SX1276, SX1277, SX1278, SX1279)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SX128x&lt;/strong&gt; series LoRa/GFSK/BLE/FLRC modules (SX1280, SX1281, SX1282)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SX123x&lt;/strong&gt; FSK/OOK radio modules (SX1231, SX1233)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported protocols and digital modes:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sigidwiki.com/wiki/PACKET&#34;&gt;&lt;strong&gt;AX.25&lt;/strong&gt;&lt;/a&gt; using 2-FSK or AFSK for modules:&lt;br&gt; SX127x, RFM9x, SX126x, RF69, SX1231, CC1101, RFM2x, Si443x, LR11x0 and SX128x&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sigidwiki.com/wiki/RTTY&#34;&gt;&lt;strong&gt;RTTY&lt;/strong&gt;&lt;/a&gt; using 2-FSK or AFSK for modules:&lt;br&gt; SX127x, RFM9x, SX126x, RF69, SX1231, CC1101, nRF24L01, RFM2x, Si443x, LR11x0 and SX128x&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sigidwiki.com/wiki/Morse_Code_(CW)&#34;&gt;&lt;strong&gt;Morse Code&lt;/strong&gt;&lt;/a&gt; using 2-FSK or AFSK for modules:&lt;br&gt; SX127x, RFM9x, SX126x, RF69, SX1231, CC1101, nRF24L01, RFM2x, Si443x, LR11x0 and SX128x&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sigidwiki.com/wiki/SSTV&#34;&gt;&lt;strong&gt;SSTV&lt;/strong&gt;&lt;/a&gt; using 2-FSK or AFSK for modules:&lt;br&gt; SX127x, RFM9x, SX126x, RF69, SX1231, CC1101, RFM2x and Si443x&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sigidwiki.com/wiki/Hellschreiber&#34;&gt;&lt;strong&gt;Hellschreiber&lt;/strong&gt;&lt;/a&gt; using 2-FSK or AFSK for modules:&lt;br&gt; SX127x, RFM9x, SX126x, RF69, SX1231, CC1101, nRF24L01, RFM2x, Si443x, LR11x0 and SX128x&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sigidwiki.com/wiki/APRS&#34;&gt;&lt;strong&gt;APRS&lt;/strong&gt;&lt;/a&gt; using AFSK for modules:&lt;br&gt; SX127x, RFM9x, SX126x, RF69, SX1231, CC1101, nRF24L01, RFM2x, Si443x and SX128x&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sigidwiki.com/wiki/POCSAG&#34;&gt;&lt;strong&gt;POCSAG&lt;/strong&gt;&lt;/a&gt; using 2-FSK for modules:&lt;br&gt; SX127x, RFM9x, RF69, SX1231, CC1101, nRF24L01, RFM2x and Si443x&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lora-alliance.org/&#34;&gt;&lt;strong&gt;LoRaWAN&lt;/strong&gt;&lt;/a&gt; using LoRa and FSK for modules:&lt;br&gt; SX127x, RFM9x, SX126x, LR11x0 and SX128x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Arduino platforms:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arduino&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/arduino/ArduinoCore-avr&#34;&gt;&lt;strong&gt;AVR&lt;/strong&gt;&lt;/a&gt; - Arduino Uno, Mega, Leonardo, Pro Mini, Nano etc. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;NOTE: Arduino boards based on ATmega328 (Uno, Pro Mini, Nano etc.) and smaller are NOT recommended. This is because the ATmega328 MCU is very constrained in terms of program and memory size, so the library will end up taking most of the space available.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/arduino/ArduinoCore-mbed&#34;&gt;&lt;strong&gt;mbed&lt;/strong&gt;&lt;/a&gt; - Arduino Nano 33 BLE and Arduino Portenta H7&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/arduino/ArduinoCore-megaavr&#34;&gt;&lt;strong&gt;megaAVR&lt;/strong&gt;&lt;/a&gt; - Arduino Uno WiFi Rev.2 and Nano Every&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/arduino/ArduinoCore-sam&#34;&gt;&lt;strong&gt;SAM&lt;/strong&gt;&lt;/a&gt; - Arduino Due&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/arduino/ArduinoCore-samd&#34;&gt;&lt;strong&gt;SAMD&lt;/strong&gt;&lt;/a&gt; - Arduino Zero, MKR boards, M0 Pro etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/arduino/ArduinoCore-renesas&#34;&gt;&lt;strong&gt;Renesas&lt;/strong&gt;&lt;/a&gt; - Arduino Uno R4&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Adafruit&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/adafruit/ArduinoCore-samd&#34;&gt;&lt;strong&gt;SAMD&lt;/strong&gt;&lt;/a&gt; - Adafruit Feather M0 and M4 boards (Feather, Metro, Gemma, Trinket etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_nRF52_Arduino&#34;&gt;&lt;strong&gt;nRF52&lt;/strong&gt;&lt;/a&gt; - Adafruit Feather nRF528x, Bluefruit and CLUE&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Espressif&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/espressif/arduino-esp32&#34;&gt;&lt;strong&gt;ESP32&lt;/strong&gt;&lt;/a&gt; - ESP32-based boards&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/esp8266/Arduino&#34;&gt;&lt;strong&gt;ESP8266&lt;/strong&gt;&lt;/a&gt; - ESP8266-based boards&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Intel&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/arduino/ArduinoCore-arc32&#34;&gt;&lt;strong&gt;Curie&lt;/strong&gt;&lt;/a&gt; - Arduino 101&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SparkFun&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sparkfun/Arduino_Apollo3&#34;&gt;&lt;strong&gt;Apollo3&lt;/strong&gt;&lt;/a&gt; - Sparkfun Artemis Redboard&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ST Microelectronics&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/stm32duino/Arduino_Core_STM32&#34;&gt;&lt;strong&gt;STM32&lt;/strong&gt; (official core)&lt;/a&gt; - STM32 Nucleo, Discovery, Maple, BluePill, BlackPill etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rogerclarkmelbourne/Arduino_STM32&#34;&gt;&lt;strong&gt;STM32&lt;/strong&gt; (unofficial core)&lt;/a&gt; - STM32F1 and STM32F4-based boards&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MCUdude&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/MCUdude/MegaCoreX&#34;&gt;&lt;strong&gt;MegaCoreX&lt;/strong&gt;&lt;/a&gt; - megaAVR-0 series (ATmega4809, ATmega3209 etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/MCUdude/MegaCore&#34;&gt;&lt;strong&gt;MegaCore&lt;/strong&gt;&lt;/a&gt; - AVR (ATmega1281, ATmega640 etc.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Raspberry Pi&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/arduino/ArduinoCore-mbed&#34;&gt;&lt;strong&gt;RP2040&lt;/strong&gt; (official core)&lt;/a&gt; - Raspberry Pi Pico and Arduino Nano RP2040 Connect&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/earlephilhower/arduino-pico&#34;&gt;&lt;strong&gt;RP2040&lt;/strong&gt; (unofficial core)&lt;/a&gt; - Raspberry Pi Pico/RP2040-based boards&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/me-no-dev/RasPiArduino&#34;&gt;&lt;strong&gt;Raspberry Pi&lt;/strong&gt;&lt;/a&gt; - Arduino framework for RaspberryPI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Heltec&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/HelTecAutomation/CubeCell-Arduino&#34;&gt;&lt;strong&gt;CubeCell&lt;/strong&gt;&lt;/a&gt; - ASR650X series (CubeCell-Board, CubeCell-Capsule, CubeCell-Module etc.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;PJRC&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/PaulStoffregen/cores&#34;&gt;&lt;strong&gt;Teensy&lt;/strong&gt;&lt;/a&gt; - Teensy 2.x, 3.x and 4.x boards&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Silicon Labs&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/SiliconLabs/arduino&#34;&gt;&lt;strong&gt;EFR32&lt;/strong&gt;&lt;/a&gt; - Silicon Labs xG24, xG27 and other boards&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The list above is by no means exhaustive - RadioLib code is independent of the used platform! Compilation of all examples is tested for all platforms officially supported prior to releasing new version. In addition, RadioLib includes an internal hardware abstraction layer, which allows it to be easily ported even to non-Arduino environments.&lt;/p&gt;</summary>
  </entry>
</feed>