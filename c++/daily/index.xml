<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-30T01:29:09Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>colmap/glomap</title>
    <updated>2024-08-30T01:29:09Z</updated>
    <id>tag:github.com,2024-08-30:/colmap/glomap</id>
    <link href="https://github.com/colmap/glomap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GLOMAP - Global Structured-from-Motion Revisited&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GLOMAP: Global Structure-from-Motion Revisited&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://lpanaf.github.io/eccv24_glomap/&#34;&gt;Project page&lt;/a&gt; | &lt;a href=&#34;https://arxiv.org/pdf/2407.20219&#34;&gt;Paper&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;GLOMAP is a general purpose global structure-from-motion pipeline for image-based reconstruction. GLOMAP requires a COLMAP database as input and outputs a COLMAP sparse reconstruction. As compared to COLMAP, this project provides a much more efficient and scalable reconstruction process, typically 1-2 orders of magnitude faster, with on-par or superior reconstruction quality.&lt;/p&gt; &#xA;&lt;p&gt;If you use this project for your research, please cite&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{pan2024glomap,&#xA;    author={Pan, Linfei and Barath, Daniel and Pollefeys, Marc and Sch\&#34;{o}nberger, Johannes Lutz},&#xA;    title={{Global Structure-from-Motion Revisited}},&#xA;    booktitle={European Conference on Computer Vision (ECCV)},&#xA;    year={2024},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To build GLOMAP, first install &lt;a href=&#34;https://colmap.github.io/install.html#build-from-source&#34;&gt;COLMAP&lt;/a&gt; dependencies and then build GLOMAP using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir build&#xA;cd build&#xA;cmake .. -GNinja&#xA;ninja &amp;amp;&amp;amp; ninja install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pre-compiled Windows binaries can be downloaded from the official &lt;a href=&#34;https://github.com/colmap/glomap/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After installation, one can run GLOMAP by (starting from a database)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;glomap mapper --database_path DATABASE_PATH --output_path OUTPUT_PATH --image_path IMAGE_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details on the command line interface, one can type &lt;code&gt;glomap -h&lt;/code&gt; or &lt;code&gt;glomap mapper -h&lt;/code&gt; for help.&lt;/p&gt; &#xA;&lt;p&gt;We also provide a guide on improving the obtained reconstruction, which can be found &lt;a href=&#34;https://raw.githubusercontent.com/colmap/glomap/main/docs/getting_started.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GLOMAP depends on two external libraries - &lt;a href=&#34;https://github.com/colmap/colmap&#34;&gt;COLMAP&lt;/a&gt; and &lt;a href=&#34;https://github.com/PoseLib/PoseLib&#34;&gt;PoseLib&lt;/a&gt;. With the default setting, the library is built automatically by GLOMAP via &lt;code&gt;FetchContent&lt;/code&gt;. However, if a self-installed version is preferred, one can also disable the &lt;code&gt;FETCH_COLMAP&lt;/code&gt; and &lt;code&gt;FETCH_POSELIB&lt;/code&gt; CMake options.&lt;/li&gt; &#xA; &lt;li&gt;To use &lt;code&gt;FetchContent&lt;/code&gt;, the minimum required version of &lt;code&gt;cmake&lt;/code&gt; is 3.28. If a self-installed version is used, &lt;code&gt;cmake&lt;/code&gt; can be downgraded to 3.10.&lt;/li&gt; &#xA; &lt;li&gt;If your system does not provide a recent enough CMake version, you can install it as: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget https://github.com/Kitware/CMake/releases/download/v3.30.1/cmake-3.30.1.tar.gz&#xA;tar xfvz cmake-3.30.1.tar.gz &amp;amp;&amp;amp; cd cmake-3.30.1&#xA;./bootstrap &amp;amp;&amp;amp; make -j$(nproc) &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;End-to-End Example&lt;/h2&gt; &#xA;&lt;p&gt;In this section, we will use datasets from &lt;a href=&#34;https://demuc.de/colmap/datasets&#34;&gt;this link&lt;/a&gt; as examples. Download the datasets and put them under &lt;code&gt;data&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;From database&lt;/h3&gt; &#xA;&lt;p&gt;If a COLMAP database already exists, GLOMAP can directly use it to perform mapping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;glomap mapper \&#xA;    --database_path ./data/gerrard-hall/database.db \&#xA;    --image_path    ./data/gerrard-hall/images \&#xA;    --output_path   ./output/gerrard-hall/sparse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From images&lt;/h3&gt; &#xA;&lt;p&gt;To obtain a reconstruction from images, the database needs to be established first. Here, we utilize the functions from COLMAP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;colmap feature_extractor \&#xA;    --image_path    ./data/south-building/images \&#xA;    --database_path ./data/south-building/database.db&#xA;colmap exhaustive_matcher \&#xA;    --database_path ./data/south-building/database.db &#xA;glomap mapper \&#xA;    --database_path ./data/south-building/database.db \&#xA;    --image_path    ./data/south-building/images \&#xA;    --output_path   ./output/south-building/sparse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Visualize and use the results&lt;/h3&gt; &#xA;&lt;p&gt;The results are written out in the COLMAP sparse reconstruction format. Please refer to &lt;a href=&#34;https://colmap.github.io/format.html#sparse-reconstruction&#34;&gt;COLMAP&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;The reconstruction can be visualized using the COLMAP GUI, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;colmap gui --import_path ./output/south-building/sparse/0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatives like &lt;a href=&#34;https://rerun.io/examples/3d-reconstruction/glomap&#34;&gt;rerun.io&lt;/a&gt; also enable visualization of COLMAP and GLOMAP outputs.&lt;/p&gt; &#xA;&lt;p&gt;If you want to inspect the reconstruction programmatically, you can use &lt;code&gt;pycolmap&lt;/code&gt; in Python or link against COLMAP&#39;s C++ library interface.&lt;/p&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For larger scale datasets, it is recommended to use &lt;code&gt;sequential_matcher&lt;/code&gt; or &lt;code&gt;vocab_tree_matcher&lt;/code&gt; from &lt;code&gt;COLMAP&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;colmap sequential_matcher --database_path DATABASE_PATH&#xA;colmap vocab_tree_matcher --database_path DATABASE_PATH --VocabTreeMatching.vocab_tree_path VOCAB_TREE_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatively, one can use &lt;a href=&#34;https://github.com/cvg/Hierarchical-Localization/&#34;&gt;hloc&lt;/a&gt; for image retrieval and matching with learning-based descriptors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;We are highly inspired by COLMAP, PoseLib, Theia. Please consider also citing them, if using GLOMAP in your work.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Please, use GitHub Discussions at &lt;a href=&#34;https://github.com/colmap/glomap/discussions&#34;&gt;https://github.com/colmap/glomap/discussions&lt;/a&gt; for questions and the GitHub issue tracker at &lt;a href=&#34;https://github.com/colmap/glomap&#34;&gt;https://github.com/colmap/glomap&lt;/a&gt; for bug reports, feature requests/additions, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions (bug reports, bug fixes, improvements, etc.) are very welcome and should be submitted in the form of new issues and/or pull requests on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2024, ETH Zurich.&#xA;All rights reserved.&#xA;&#xA;Redistribution and use in source and binary forms, with or without&#xA;modification, are permitted provided that the following conditions are met:&#xA;&#xA;    * Redistributions of source code must retain the above copyright&#xA;      notice, this list of conditions and the following disclaimer.&#xA;&#xA;    * Redistributions in binary form must reproduce the above copyright&#xA;      notice, this list of conditions and the following disclaimer in the&#xA;      documentation and/or other materials provided with the distribution.&#xA;&#xA;    * Neither the name of ETH Zurich nor the names of its contributors may&#xA;      be used to endorse or promote products derived from this software&#xA;      without specific prior written permission.&#xA;&#xA;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34;&#xA;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE&#xA;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE&#xA;ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE&#xA;LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR&#xA;CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF&#xA;SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS&#xA;INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN&#xA;CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#xA;ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE&#xA;POSSIBILITY OF SUCH DAMAGE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>