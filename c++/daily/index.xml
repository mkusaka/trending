<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-10T01:30:47Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>es3n1n/obfuscator</title>
    <updated>2023-12-10T01:30:47Z</updated>
    <id>tag:github.com,2023-12-10:/es3n1n/obfuscator</id>
    <link href="https://github.com/es3n1n/obfuscator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Native code PE bin2bin obfuscator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Obfuscator&lt;/h1&gt; &#xA;&lt;p&gt;A native code obfuscator written in c++23.&lt;/p&gt; &#xA;&lt;h2&gt;Available transforms:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bogus Control Flow&lt;/li&gt; &#xA; &lt;li&gt;Constant Crypt&lt;/li&gt; &#xA; &lt;li&gt;Decompilation breaker (ida, ghidra)&lt;/li&gt; &#xA; &lt;li&gt;Substitution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Writeup:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.es3n1n.eu/posts/obfuscator-pt-1&#34;&gt;https://blog.es3n1n.eu/posts/obfuscator-pt-1&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jmpoep/vmprotect-3.5.1</title>
    <updated>2023-12-10T01:30:47Z</updated>
    <id>tag:github.com,2023-12-10:/jmpoep/vmprotect-3.5.1</id>
    <link href="https://github.com/jmpoep/vmprotect-3.5.1" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;VMProtect project&lt;/h2&gt; &#xA;&lt;p&gt;Building&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POSIX:&#xA;&#x9;$ ./build.sh&#xA;&#xA;Windows:&#xA;&#x9;&amp;gt; build.bat&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ml-explore/mlx</title>
    <updated>2023-12-10T01:30:47Z</updated>
    <id>tag:github.com,2023-12-10:/ml-explore/mlx</id>
    <link href="https://github.com/ml-explore/mlx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MLX: An array framework for Apple silicon&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MLX&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ml-explore/mlx/main/#quickstart&#34;&gt;&lt;strong&gt;Quickstart&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ml-explore/mlx/main/#installation&#34;&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://ml-explore.github.io/mlx/build/html/index.html&#34;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ml-explore/mlx/main/#examples&#34;&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/ml-explore/mlx&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/ml-explore/mlx.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MLX is an array framework for machine learning on Apple silicon, brought to you by Apple machine learning research.&lt;/p&gt; &#xA;&lt;p&gt;Some key features of MLX include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Familiar APIs&lt;/strong&gt;: MLX has a Python API that closely follows NumPy. MLX also has a fully featured C++ API, which closely mirrors the Python API. MLX has higher-level packages like &lt;code&gt;mlx.nn&lt;/code&gt; and &lt;code&gt;mlx.optimizers&lt;/code&gt; with APIs that closely follow PyTorch to simplify building more complex models.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Composable function transformations&lt;/strong&gt;: MLX has composable function transformations for automatic differentiation, automatic vectorization, and computation graph optimization.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lazy computation&lt;/strong&gt;: Computations in MLX are lazy. Arrays are only materialized when needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dynamic graph construction&lt;/strong&gt;: Computation graphs in MLX are built dynamically. Changing the shapes of function arguments does not trigger slow compilations, and debugging is simple and intuitive.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-device&lt;/strong&gt;: Operations can run on any of the supported devices (currently, the CPU and GPU).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unified memory&lt;/strong&gt;: A notable difference from MLX and other frameworks is the &lt;em&gt;unified memory model&lt;/em&gt;. Arrays in MLX live in shared memory. Operations on MLX arrays can be performed on any of the supported device types without moving data.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;MLX is designed by machine learning researchers for machine learning researchers. The framework is intended to be user-friendly, but still efficient to train and deploy models. The design of the framework itself is also conceptually simple. We intend to make it easy for researchers to extend and improve MLX with the goal of quickly exploring new ideas.&lt;/p&gt; &#xA;&lt;p&gt;The design of MLX is inspired by frameworks like &lt;a href=&#34;https://numpy.org/doc/stable/index.html&#34;&gt;NumPy&lt;/a&gt;, &lt;a href=&#34;https://pytorch.org/&#34;&gt;PyTorch&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/jax&#34;&gt;Jax&lt;/a&gt;, and &lt;a href=&#34;https://arrayfire.org/&#34;&gt;ArrayFire&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/ml-explore/mlx-examples&#34;&gt;MLX examples repo&lt;/a&gt; has a variety of examples, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ml-explore/mlx-examples/tree/main/transformer_lm&#34;&gt;Transformer language model&lt;/a&gt; training.&lt;/li&gt; &#xA; &lt;li&gt;Large-scale text generation with &lt;a href=&#34;https://github.com/ml-explore/mlx-examples/tree/main/llama&#34;&gt;LLaMA&lt;/a&gt; and finetuning with &lt;a href=&#34;https://github.com/ml-explore/mlx-examples/tree/main/lora&#34;&gt;LoRA&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Generating images with &lt;a href=&#34;https://github.com/ml-explore/mlx-examples/tree/main/stable_diffusion&#34;&gt;Stable Diffusion&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Speech recognition with &lt;a href=&#34;https://github.com/ml-explore/mlx-examples/tree/main/whisper&#34;&gt;OpenAI&#39;s Whisper&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://ml-explore.github.io/mlx/build/html/quick_start.html&#34;&gt;quick start guide&lt;/a&gt; in the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;MLX is available on &lt;a href=&#34;https://pypi.org/project/mlx/&#34;&gt;PyPi&lt;/a&gt;. To install the Python API, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install mlx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checkout the &lt;a href=&#34;https://ml-explore.github.io/mlx/build/html/install.html#&#34;&gt;documentation&lt;/a&gt; for more information on building the C++ and Python APIs from source.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/ml-explore/mlx/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; for more information on contributing to MLX.&lt;/p&gt;</summary>
  </entry>
</feed>