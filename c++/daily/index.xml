<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-08T01:30:26Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>uNetworking/uWebSockets</title>
    <updated>2022-08-08T01:30:26Z</updated>
    <id>tag:github.com,2022-08-08:/uNetworking/uWebSockets</id>
    <link href="https://github.com/uNetworking/uWebSockets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, secure &amp; standards compliant web server for the most demanding of applications&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/uNetworking/uWebSockets/master/misc/logo.svg?sanitize=true&#34; height=&#34;180&#34;&gt;&#xA; &lt;br&gt; &#xA; &lt;i&gt;Simple, secure&lt;/i&gt;&#xA; &lt;sup&gt;&lt;a href=&#34;https://github.com/uNetworking/uWebSockets/tree/master/fuzzing#fuzz-testing-of-various-parsers-and-mocked-examples&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&#xA; &lt;i&gt; &amp;amp; standards compliant&lt;/i&gt;&#xA; &lt;sup&gt;&lt;a href=&#34;https://unetworking.github.io/uWebSockets.js/report.pdf&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&#xA; &lt;i&gt; web server for the most demanding&lt;/i&gt;&#xA; &lt;sup&gt;&lt;a href=&#34;https://github.com/uNetworking/uWebSockets/tree/master/benchmarks#benchmark-driven-development&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&#xA; &lt;i&gt; of applications.&lt;/i&gt; &#xA; &lt;a href=&#34;https://github.com/uNetworking/uWebSockets/raw/master/misc/READMORE.md&#34;&gt;Read more...&lt;/a&gt; &#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/uNetworking/uWebSockets/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/uNetworking/uWebSockets&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/uNetworking/uWebSockets/context:cpp&#34;&gt;&lt;img alt=&#34;Language grade: C/C++&#34; src=&#34;https://img.shields.io/lgtm/grade/cpp/g/uNetworking/uWebSockets.svg?logo=lgtm&amp;amp;logoWidth=18&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://osv.dev/list?q=uwebsockets&amp;amp;affected_only=true&amp;amp;page=1&amp;amp;ecosystem=OSS-Fuzz&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/uwebsockets.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/downloads-65%20million-pink&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;h3&gt;&lt;span&gt;üîê&lt;/span&gt; Optimized security&lt;/h3&gt; &#xA;&lt;p&gt;Being meticulously optimized for speed and memory footprint, ¬µWebSockets is fast enough to do encrypted TLS 1.3 messaging quicker than most alternative servers can do even unencrypted, cleartext messaging&lt;sup&gt;&lt;a href=&#34;https://github.com/uNetworking/uWebSockets/tree/master/benchmarks#benchmark-driven-development&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, we partake in Google&#39;s OSS-Fuzz with a ~95% daily fuzzing coverage&lt;sup&gt;&lt;a href=&#34;https://github.com/uNetworking/uWebSockets/raw/master/misc/Screenshot_20210915-004009.png?raw=true&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; with no sanitizer issues. LGTM scores us flawless A+ from having zero CodeQL alerts and we compile with pedantic warning levels.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;‚ñ∂&lt;/span&gt; Rapid scripting&lt;/h3&gt; &#xA;&lt;p&gt;¬µWebSockets is written entirely in C &amp;amp; C++ but has a seamless integration for Node.js backends. This allows for rapid scripting of powerful apps, using widespread competence. See &lt;a href=&#34;https://github.com/uNetworking/uWebSockets.js&#34;&gt;¬µWebSockets.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;‚öî&lt;/span&gt; Battle proven&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ve been fully standards compliant with a perfect Autobahn|Testsuite score since 2016&lt;sup&gt;&lt;a href=&#34;https://unetworking.github.io/uWebSockets.js/report.pdf&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. ¬µWebSockets powers many of the biggest crypto exchanges in the world, handling trade volumes of multiple billions of USD every day. If you trade crypto, chances are you do so via ¬µWebSockets.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;üîã&lt;/span&gt; Batteries included&lt;/h3&gt; &#xA;&lt;p&gt;Designed around a convenient URL router with wildcard &amp;amp; parameter support - paired with efficient pub/sub features inspired by MQTT. ¬µWebSockets should be the obvious, complete starting point for any real-time web project with high demands.&lt;/p&gt; &#xA;&lt;p&gt;Start building your Http &amp;amp; WebSocket apps in a swift; &lt;a href=&#34;https://github.com/uNetworking/uWebSockets/raw/master/misc/READMORE.md&#34;&gt;read the user manual&lt;/a&gt; and &lt;a href=&#34;https://github.com/uNetworking/uWebSockets/tree/master/examples&#34;&gt;see examples&lt;/a&gt;. You can browse our &lt;a href=&#34;https://unetworking.github.io/uWebSockets.js/generated/&#34;&gt;TypeDoc&lt;/a&gt; for a quick overview.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;uWS::SSLApp({&#xA;&#xA;    /* There are tons of SSL options, see uSockets */&#xA;    .cert_file_name = &#34;cert.pem&#34;,&#xA;    .key_file_name = &#34;key.pem&#34;&#xA;    &#xA;}).get(&#34;/hello&#34;, [](auto *res, auto *req) {&#xA;&#xA;    /* You can efficiently stream huge files too */&#xA;    res-&amp;gt;writeHeader(&#34;Content-Type&#34;, &#34;text/html; charset=utf-8&#34;)-&amp;gt;end(&#34;Hello HTTP!&#34;);&#xA;    &#xA;}).ws&amp;lt;UserData&amp;gt;(&#34;/*&#34;, {&#xA;&#xA;    /* Just a few of the available handlers */&#xA;    .open = [](auto *ws) {&#xA;        /* MQTT syntax */&#xA;        ws-&amp;gt;subscribe(&#34;sensors/+/house&#34;);&#xA;    },&#xA;    .message = [](auto *ws, std::string_view message, uWS::OpCode opCode) {&#xA;        ws-&amp;gt;send(message, opCode);&#xA;    }&#xA;    &#xA;}).listen(9001, [](auto *listenSocket) {&#xA;&#xA;    if (listenSocket) {&#xA;        std::cout &amp;lt;&amp;lt; &#34;Listening on port &#34; &amp;lt;&amp;lt; 9001 &amp;lt;&amp;lt; std::endl;&#xA;    }&#xA;    &#xA;}).run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;üíº&lt;/span&gt; Commercially supported&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/uNetworking&#34;&gt;uNetworking AB&lt;/a&gt; is a Swedish consulting &amp;amp; contracting company dealing with anything related to ¬µWebSockets; development, support and customer success.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t hesitate &lt;a href=&#34;mailto:alexhultman@gmail.com&#34;&gt;sending a mail&lt;/a&gt; if you&#39;re building something large, in need of advice or having other business inquiries in mind. We&#39;ll figure out what&#39;s best for both parties and make sure you&#39;re not falling into common pitfalls.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to BitMEX, Bitfinex, Google, Coinbase, Bitwyre, AppDrag and deepstreamHub for allowing the project itself to thrive on GitHub since 2016 - this project would not be possible without these beautiful companies.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;üîß&lt;/span&gt; Customizable architecture&lt;/h3&gt; &#xA;&lt;p&gt;¬µWebSockets builds on &lt;a href=&#34;https://github.com/uNetworking/uSockets&#34;&gt;¬µSockets&lt;/a&gt;, a foundation library implementing eventing, networking and cryptography in three different layers. Every layer has multiple implementations and you control the compiled composition with flags. There are currently five event-loop integrations; libuv, ASIO, GCD and raw epoll/kqueue.&lt;/p&gt; &#xA;&lt;p&gt;In a nutshell:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WITH_WOLFSSL=1 WITH_LIBUV=1 make examples&lt;/code&gt; builds examples utilizing WolfSSL and libuv&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WITH_OPENSSL=1 make examples&lt;/code&gt; builds examples utilizing OpenSSL and the native kernel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See ¬µSockets for an up-to-date list of flags and a more detailed explanation.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;ü§ù&lt;/span&gt; Permissively licensed&lt;/h3&gt; &#xA;&lt;p&gt;Intellectual property, all rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Where such explicit notice is given, source code is licensed Apache License 2.0 which is a permissive OSI-approved license with very few limitations. Modified &#34;forks&#34; should be of nothing but licensed source code, and be made available under another product name. If you&#39;re uncertain about any of this, please ask before assuming.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BoomingTech/Piccolo</title>
    <updated>2022-08-08T01:30:26Z</updated>
    <id>tag:github.com,2022-08-08:/BoomingTech/Piccolo</id>
    <link href="https://github.com/BoomingTech/Piccolo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Piccolo (formerly Pilot) ‚Äì mini game engine for games104&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Piccolo Engine (formerly Pilot Engine)&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://games104.boomingtech.com&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/BoomingTech/Piccolo/main/engine/source/editor/resource/PiccoloEngine.png&#34; width=&#34;400&#34; alt=&#34;Piccolo Engine logo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Piccolo Engine&lt;/strong&gt; is a tiny game engine used for the &lt;a href=&#34;https://games104.boomingtech.com&#34;&gt;GAMES104&lt;/a&gt; course.&lt;/p&gt; &#xA;&lt;h2&gt;Continuous build status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Build Type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Build Windows&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/BoomingTech/Piccolo/actions/workflows/build_windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/BoomingTech/Piccolo/actions/workflows/build_windows.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Windows&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Build Linux&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/BoomingTech/Piccolo/actions/workflows/build_linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/BoomingTech/Piccolo/actions/workflows/build_linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Build macOS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/BoomingTech/Piccolo/actions/workflows/build_macos.yml&#34;&gt;&lt;img src=&#34;https://github.com/BoomingTech/Piccolo/actions/workflows/build_macos.yml/badge.svg?sanitize=true&#34; alt=&#34;Build macOS&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;To build Piccolo, you must first install the following tools.&lt;/p&gt; &#xA;&lt;h3&gt;Windows 10/11&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2019 (or more recent)&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.19 (or more recent)&lt;/li&gt; &#xA; &lt;li&gt;Git 2.1 (or more recent)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;macOS &amp;gt;= 10.15 (x86_64)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.3 (or more recent)&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.19 (or more recent)&lt;/li&gt; &#xA; &lt;li&gt;Git 2.1 (or more recent)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ubuntu 20.04&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;apt install the following packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install libxrandr-dev&#xA;sudo apt install libxrender-dev&#xA;sudo apt install libxinerama-dev&#xA;sudo apt install libxcursor-dev&#xA;sudo apt install libxi-dev&#xA;sudo apt install libglvnd-dev&#xA;sudo apt install libvulkan-dev&#xA;sudo apt install cmake&#xA;sudo apt install clang&#xA;sudo apt install libc++-dev&#xA;sudo apt install libglew-dev&#xA;sudo apt install libglfw3-dev&#xA;sudo apt install vulkan-validationlayers&#xA;sudo apt install mesa-vulkan-drivers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#runfile&#34;&gt;NVIDIA driver&lt;/a&gt; (The AMD and Intel driver is open-source, and thus is installed automatically by mesa-vulkan-drivers)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Piccolo&lt;/h2&gt; &#xA;&lt;h3&gt;Build on Windows&lt;/h3&gt; &#xA;&lt;p&gt;You may execute the &lt;strong&gt;build_windows.bat&lt;/strong&gt;. This batch file will generate the projects, and build the &lt;strong&gt;Release&lt;/strong&gt; config of &lt;strong&gt;Piccolo Engine&lt;/strong&gt; automatically. After successful build, you can find the PiccoloEditor.exe at the &lt;strong&gt;bin&lt;/strong&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Or you can use the following command to generate the &lt;strong&gt;Visual Studio&lt;/strong&gt; project firstly, then open the solution in the build directory and build it manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -S . -B build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build on macOS&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The following build instructions only tested on specific hardware of x86_64, and do not support M1 chips. For M1 compatible, we will release later.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To compile Piccolo, you must have the most recent version of Xcode installed. Then run &#39;cmake&#39; from the project&#39;s root directory, to generate a project of Xcode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -S . -B build -G &#34;Xcode&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and you can build the project with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake --build build --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can execute the &lt;strong&gt;build_macos.sh&lt;/strong&gt; to build the binaries.&lt;/p&gt; &#xA;&lt;h3&gt;Build on Ubuntu 20.04&lt;/h3&gt; &#xA;&lt;p&gt;You can execute the &lt;strong&gt;build_linux.sh&lt;/strong&gt; to build the binaries.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For documentation, please refer to the Wiki section.&lt;/p&gt; &#xA;&lt;h2&gt;Extra&lt;/h2&gt; &#xA;&lt;h3&gt;Generate Compilation Database&lt;/h3&gt; &#xA;&lt;p&gt;You can build &lt;code&gt;compile_commands.json&lt;/code&gt; with the following commands when &lt;code&gt;Unix Makefiles&lt;/code&gt; generaters are avaliable. &lt;code&gt;compile_commands.json&lt;/code&gt; is the file required by &lt;code&gt;clangd&lt;/code&gt; language server, which is a backend for cpp lsp-mode in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;For Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cmake -DCMAKE_TRY_COMPILE_TARGET_TYPE=&#34;STATIC_LIBRARY&#34; -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -S . -B compile_db_temp -G &#34;Unix Makefiles&#34;&#xA;copy compile_db_temp\compile_commands.json .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Physics Debug Renderer&lt;/h3&gt; &#xA;&lt;p&gt;Currently Physics Debug Renderer is only available on Windows. You can use the following command to generate the solution with the debugger project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cmake -S . -B build -DENABLE_PHYSICS_DEBUG_RENDERER=ON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Please clean the build directory before regenerating the solution. We&#39;ve encountered building problems in regenerating directly with previous CMakeCache.&lt;/li&gt; &#xA; &lt;li&gt;Physics Debug Renderer will run when you start PiccoloEditor. We&#39;ve synced the camera position between both scenes. But the initial camera mode in Physics Debug Renderer is wrong. Scrolling down the mouse wheel once will change the camera of Physics Debug Renderer to the correct mode.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>citra-emu/citra</title>
    <updated>2022-08-08T01:30:26Z</updated>
    <id>tag:github.com,2022-08-08:/citra-emu/citra</id>
    <link href="https://github.com/citra-emu/citra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Nintendo 3DS Emulator&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;BEFORE FILING AN ISSUE, READ THE RELEVANT SECTION IN THE &lt;a href=&#34;https://github.com/citra-emu/citra/wiki/Contributing#reporting-issues&#34;&gt;CONTRIBUTING&lt;/a&gt; FILE!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Citra&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/citra-emu/citra/actions&#34;&gt;&lt;img src=&#34;https://github.com/citra-emu/citra/workflows/citra-ci/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.bitrise.io/app/4ccd8e5720f0d13b&#34;&gt;&lt;img src=&#34;https://app.bitrise.io/app/4ccd8e5720f0d13b/status.svg?token=H32TmbCwxb3OQ-M66KbAyw&amp;amp;branch=master&#34; alt=&#34;Bitrise CI Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/FAXfZV9&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/220740965957107713?color=%237289DA&amp;amp;label=Citra&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Citra is an experimental open-source Nintendo 3DS emulator/debugger written in C++. It is written with portability in mind, with builds actively maintained for Windows, Linux and macOS.&lt;/p&gt; &#xA;&lt;p&gt;Citra emulates a subset of 3DS hardware and therefore is useful for running/debugging homebrew applications, and it is also able to run many commercial games! Some of these do not run at a playable state, but we are working every day to advance the project forward. (Playable here means compatibility of at least &#34;Okay&#34; on our &lt;a href=&#34;https://citra-emu.org/game&#34;&gt;game compatibility list&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;Citra is licensed under the GPLv2 (or any later version). Refer to the license.txt file included. Please read the &lt;a href=&#34;https://citra-emu.org/wiki/faq/&#34;&gt;FAQ&lt;/a&gt; before getting started with the project.&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://citra-emu.org/&#34;&gt;website&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Need help? Check out our &lt;a href=&#34;https://citra-emu.org/help/reference/asking/&#34;&gt;asking for help&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;For development discussion, please join us on our &lt;a href=&#34;https://citra-emu.org/discord/&#34;&gt;Discord server&lt;/a&gt; or at #citra-dev on libera.&lt;/p&gt; &#xA;&lt;h3&gt;Releases&lt;/h3&gt; &#xA;&lt;p&gt;Citra has two main release channels: Nightly and Canary.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/citra-emu/citra-nightly&#34;&gt;Nightly&lt;/a&gt; build is based on the master branch, and contains already reviewed and tested features.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/citra-emu/citra-canary&#34;&gt;Canary&lt;/a&gt; build is based on the master branch, but with additional features still under review. PRs tagged &lt;code&gt;canary-merge&lt;/code&gt; are merged only into the Canary builds.&lt;/p&gt; &#xA;&lt;p&gt;Both builds can be installed with the installer provided on the &lt;a href=&#34;https://citra-emu.org/download/&#34;&gt;website&lt;/a&gt;, but those looking for specific versions or standalone releases can find them in the release tabs of the &lt;a href=&#34;https://github.com/citra-emu/citra-nightly/releases&#34;&gt;Nightly&lt;/a&gt; and &lt;a href=&#34;https://github.com/citra-emu/citra-canary/releases&#34;&gt;Canary&lt;/a&gt; repositories.&lt;/p&gt; &#xA;&lt;p&gt;Currently, development and releases of the Android version are in &lt;a href=&#34;https://github.com/citra-emu/citra-android&#34;&gt;a separate repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A Flatpak for Citra is available on &lt;a href=&#34;https://flathub.org/apps/details/org.citra_emu.citra&#34;&gt;Flathub&lt;/a&gt;. Details on the build process can be found in &lt;a href=&#34;https://github.com/flathub/org.citra_emu.citra&#34;&gt;our Flathub repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;Most of the development happens on GitHub. It&#39;s also where &lt;a href=&#34;https://github.com/citra-emu/citra&#34;&gt;our central repository&lt;/a&gt; is hosted.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute please take a look at the &lt;a href=&#34;https://github.com/citra-emu/citra/wiki/Contributing&#34;&gt;Contributor&#39;s Guide&lt;/a&gt; and &lt;a href=&#34;https://github.com/citra-emu/citra/wiki/Developer-Information&#34;&gt;Developer Information&lt;/a&gt;. You should also contact any of the developers in the forum in order to know about the current state of the emulator because the &lt;a href=&#34;https://docs.google.com/document/d/1SWIop0uBI9IW8VGg97TAtoT_CHNoP42FzYmvG1F4QDA&#34;&gt;TODO list&lt;/a&gt; isn&#39;t maintained anymore.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute to the user interface translation, please check out the &lt;a href=&#34;https://www.transifex.com/citra/citra&#34;&gt;citra project on transifex&lt;/a&gt;. We centralize the translation work there, and periodically upstream translations.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: &lt;a href=&#34;https://github.com/citra-emu/citra/wiki/Building-For-Windows&#34;&gt;Windows Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: &lt;a href=&#34;https://github.com/citra-emu/citra/wiki/Building-For-Linux&#34;&gt;Linux Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;a href=&#34;https://github.com/citra-emu/citra/wiki/Building-for-macOS&#34;&gt;macOS Build&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;We happily accept monetary donations or donated games and hardware. Please see our &lt;a href=&#34;https://citra-emu.org/donate/&#34;&gt;donations page&lt;/a&gt; for more information on how you can contribute to Citra. Any donations received will go towards things like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3DS consoles for developers to explore the hardware&lt;/li&gt; &#xA; &lt;li&gt;3DS games for testing&lt;/li&gt; &#xA; &lt;li&gt;Any equipment required for homebrew&lt;/li&gt; &#xA; &lt;li&gt;Infrastructure setup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also more than gladly accept used 3DS consoles! If you would like to give yours away, don&#39;t hesitate to join our &lt;a href=&#34;https://citra-emu.org/discord/&#34;&gt;Discord server&lt;/a&gt; and talk to bunnei.&lt;/p&gt;</summary>
  </entry>
</feed>