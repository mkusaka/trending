<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-30T01:32:47Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>S12cybersecurity/WinDefenderKiller</title>
    <updated>2023-07-30T01:32:47Z</updated>
    <id>tag:github.com,2023-07-30:/S12cybersecurity/WinDefenderKiller</id>
    <link href="https://github.com/S12cybersecurity/WinDefenderKiller" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Windows Defender Killer | C++ Code Disabling Permanently Windows Defender using Registry Keys&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WinDefenderKiller&lt;/h1&gt; &#xA;&lt;p&gt;Windows Defender Killer | C++ Code Disabling Permanently Windows Defender using Registry Keys&lt;/p&gt; &#xA;&lt;p&gt;YouTube Video: &lt;a href=&#34;https://youtu.be/67-rp3Y16k8&#34;&gt;https://youtu.be/67-rp3Y16k8&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s compile it!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/S12cybersecurity/WinDefenderKiller/assets/79543461/7e4f97e5-0d6e-4662-9935-2b61f5fc4a32&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Command:&lt;/p&gt; &#xA;&lt;p&gt;└─# x86_64-w64-mingw32-g++ -O2 disableWinDef.cpp -o winDefKiller -I/usr/share/mingw-w64/include -L/usr/lib -s -ffunction-sections -fdata-sections -Wno-write-strings -fno-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive -Wnarrowing -fexceptions&lt;/p&gt; &#xA;&lt;p&gt;I execute it!&lt;/p&gt; &#xA;&lt;p&gt;And when i restart it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/S12cybersecurity/WinDefenderKiller/assets/79543461/2c410420-9ca4-4484-b0f1-cf547dfe1f7b&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If i try to download mimikatz malicious binary:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/S12cybersecurity/WinDefenderKiller/assets/79543461/2f5e78b0-33f0-4012-a1d8-84ae8e26b6e7&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Not detected by Windows Defender!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bloomberg/blazingmq</title>
    <updated>2023-07-30T01:32:47Z</updated>
    <id>tag:github.com,2023-07-30:/bloomberg/blazingmq</id>
    <link href="https://github.com/bloomberg/blazingmq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern high-performance open source message queuing system&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://bloomberg.github.io/blazingmq&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;docs/assets/images/blazingmq_logo_label_dark.svg&#34;&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/docs/assets/images/blazingmq_logo_label.svg?sanitize=true&#34; width=&#34;70%&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OS-Linux-blue&#34; alt=&#34;OS Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OS-AIX-blue&#34; alt=&#34;OS AIX&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OS-Solaris-blue&#34; alt=&#34;OS Solaris&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/C++-blue&#34; alt=&#34;C++&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-blue&#34; alt=&#34;CMake&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/MessageQueue-blue&#34; alt=&#34;MessageQueue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bloomberg.github.io/blazingmq&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation-blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BlazingMQ - A Modern, High-Performance Message Queue&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bloomberg.github.io/blazingmq&#34;&gt;BlazingMQ&lt;/a&gt; is an open source distributed message queueing framework, which focuses on efficiency, reliability, and a rich feature set for modern-day workflows.&lt;/p&gt; &#xA;&lt;p&gt;At its core, BlazingMQ provides durable, fault-tolerant, highly performant, and highly available queues, along with features like various message routing strategies (e.g., work queues, priority, fan-out, broadcast, etc.), compression, strong consistency, poison pill detection, etc.&lt;/p&gt; &#xA;&lt;p&gt;Message queues generally provide a loosely-coupled, asynchronous communication channel (&#34;queue&#34;) between application services (producers and consumers) that send messages to one another. You can think about it like a mailbox for communication between application programs, where &#39;producer&#39; drops a message in a mailbox and &#39;consumer&#39; picks it up at its own leisure. Messages placed into the queue are stored until the recipient retrieves and processes them. In other words, producer and consumer applications can temporally and spatially isolate themselves from each other by using a message queue to facilitate communication.&lt;/p&gt; &#xA;&lt;p&gt;BlazingMQ&#39;s back-end (message brokers) has been implemented in C++, and client libraries are available in C++, Java, and Python (the Python SDK will be published shortly as open source too!).&lt;/p&gt; &#xA;&lt;p&gt;BlazingMQ is an actively developed project and has been battle-tested in production at Bloomberg for 8+ years.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Menu&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/#contributions&#34;&gt;Contributions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/#security-vulnerability-reporting&#34;&gt;Security Vulnerability Reporting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Comprehensive documentation about BlazingMQ can be found &lt;a href=&#34;https://bloomberg.github.io/blazingmq&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bloomberg.github.io/blazingmq/docs/getting_started/blazingmq_in_action/&#34;&gt;This&lt;/a&gt; article guides readers to build, install, and experiment with BlazingMQ locally in a Docker container.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;a href=&#34;https://bloomberg.github.io/blazingmq/docs/getting_started/more_fun_with_blazingmq&#34;&gt;companion&lt;/a&gt; article, readers can learn about some intermediate and advanced features of BlazingMQ and see them in action.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bloomberg.github.io/blazingmq/docs/installation/deployment/&#34;&gt;This&lt;/a&gt; article describes the steps for installing a BlazingMQ cluster in a set of Docker containers, along with a recommended set of configurations.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;We welcome your contributions to help us improve and extend this project!&lt;/p&gt; &#xA;&lt;p&gt;We welcome issue reports &lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/issues&#34;&gt;here&lt;/a&gt;; be sure to choose the proper issue template for your issue, so that we can be sure you&#39;re providing us with the necessary information.&lt;/p&gt; &#xA;&lt;p&gt;Before sending a &lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/pulls&#34;&gt;Pull Request&lt;/a&gt;, please make sure you have read our &lt;a href=&#34;https://github.com/bloomberg/.github/raw/main/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;BlazingMQ is Apache 2.0 licensed, as found in the &lt;a href=&#34;https://raw.githubusercontent.com/bloomberg/blazingmq/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted a &lt;a href=&#34;https://github.com/bloomberg/.github/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;. If you have any concerns about the Code, or behavior which you have experienced in the project, please contact us at &lt;a href=&#34;mailto:opensource@bloomberg.net&#34;&gt;opensource@bloomberg.net&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Security Vulnerability Reporting&lt;/h2&gt; &#xA;&lt;p&gt;If you believe you have identified a security vulnerability in this project, please send an email to the project team at &lt;a href=&#34;mailto:opensource@bloomberg.net&#34;&gt;opensource@bloomberg.net&lt;/a&gt;, detailing the suspected issue and any methods you&#39;ve found to reproduce it.&lt;/p&gt; &#xA;&lt;p&gt;Please do NOT open an issue in the GitHub repository, as we&#39;d prefer to keep vulnerability reports private until we&#39;ve had an opportunity to review and address them.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>LordNoteworthy/windows-exploitation</title>
    <updated>2023-07-30T01:32:47Z</updated>
    <id>tag:github.com,2023-07-30:/LordNoteworthy/windows-exploitation</id>
    <link href="https://github.com/LordNoteworthy/windows-exploitation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My notes while studying Windows exploitation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Windows exploitation&lt;/h1&gt; &#xA;&lt;h2&gt;Types of Bugs&lt;/h2&gt; &#xA;&lt;h2&gt;Uninitialized Stack Variable&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;References a local variable or buffer, which wasn’t previously properly initialized.&lt;/li&gt; &#xA; &lt;li&gt;Usually mitigated by compiler warnings/errors, informing about potential security flaws present in the source code.&lt;/li&gt; &#xA; &lt;li&gt;Challenge: how can one control the trash bytes present on the ring-0 stack, from within a ring-3 perspective?&lt;/li&gt; &#xA; &lt;li&gt;How to exploit: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Find the kernel stack init address: &lt;code&gt;!thread&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Find the offset of our callback from this init address&lt;/li&gt; &#xA;   &lt;li&gt;Spray the Kernel Stack with User controlled input from the user mode using &lt;strong&gt;NtMapUserPhysicalPages&lt;/strong&gt; trick.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Null-Pointer Dereference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Happens when the value of the pointer is NULL, and is used by the application to point to a valid memory area.&lt;/li&gt; &#xA; &lt;li&gt;How to exploit: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Map the NULL page in user space.&lt;/li&gt; &#xA;   &lt;li&gt;Place a fake data structure in it which will cause our shell code to be executed.&lt;/li&gt; &#xA;   &lt;li&gt;Trigger the dereference bug.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Symbolic links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Leverages two fundamental concepts in Windows: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;object manager symbolic links.&lt;/li&gt; &#xA;   &lt;li&gt;NTFS junctions/mount points.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Requirements for exploitation: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A high privileged process writing to user controlled files or directories: &lt;code&gt;C:\PownMe\Link.ex&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Reading permission to the referenced directory &lt;code&gt;C:\Windows\System32\sysprep\&lt;/code&gt; and writing permissions to the directory where the junction will be stored &lt;code&gt;C:\PownMe&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;directory where the junction will be stored must be empty: &lt;code&gt;C:\PownMe&lt;/code&gt; before the reparse point is defined.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;How to find them: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;launch process monitor and filter by the process you are targeting.&lt;/li&gt; &#xA;   &lt;li&gt;look for &lt;code&gt;CreateFile&lt;/code&gt; operations by the &lt;strong&gt;SYSTEM&lt;/strong&gt; process.&lt;/li&gt; &#xA;   &lt;li&gt;then check if the target directory has the right access for the &lt;code&gt;everyone&lt;/code&gt; group or username.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Payloads&lt;/h2&gt; &#xA;&lt;h3&gt;Token Stealing Payload&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The general algorithm for the &lt;strong&gt;token stealing&lt;/strong&gt; shellcode is: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Save the drivers registers so we can restore them later and avoid crashing it.&lt;/li&gt; &#xA;   &lt;li&gt;Find the _KPRCB struct by looking in the fs segment register&lt;/li&gt; &#xA;   &lt;li&gt;Find the _KTHREAD structure corresponding to the current thread by indexing into_KPRCB.&lt;/li&gt; &#xA;   &lt;li&gt;Find the _EPROCESS structure corresponding to the current process by indexing into_KTHREAD.&lt;/li&gt; &#xA;   &lt;li&gt;Look for the _EPROCESS structure corresponding to the process with PID=4 (UniqueProcessId = 4) by walking the doubly linked list of all_EPROCESS structures that the_EPROCRESS structure contains a references to, this is the &#34;System&#34; process that always has SID ( Security Identifier) = NT AUTHORITY\SYSTEM SID.&lt;/li&gt; &#xA;   &lt;li&gt;Retrieve the address of the Token of that process.&lt;/li&gt; &#xA;   &lt;li&gt;Look for the _EPROCESS structure corresponding to the process we want to escalate (our process).&lt;/li&gt; &#xA;   &lt;li&gt;Replace the Token of the target process with the Token of the &#34;System&#34; process.&lt;/li&gt; &#xA;   &lt;li&gt;Clean up our stack and reset our registers before returning.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mitigations&lt;/h2&gt; &#xA;&lt;h3&gt;SMEP (Supervisor Mode Execution Prevention)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduced in 2011 in Intel processors based on the Ivy Bridge architecture and enabled by default since Windows 8.0.&lt;/li&gt; &#xA; &lt;li&gt;SMEP restricts executing code that lies in usermode to be executed with Ring-0 privileges, attempts result in a crash. This basically prevents EoP exploits that rely on executing a usermode payload from ever executing it.&lt;/li&gt; &#xA; &lt;li&gt;The SMEP bit is bit 20 of the CR4 register.&lt;/li&gt; &#xA; &lt;li&gt;SMEP&#39;s goal is to block kernel exploit which: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Prepares a shellcode in user memory&lt;/li&gt; &#xA;   &lt;li&gt;Redirects execution to the prepared payload, by exploiting a kernel/driver security flaw.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SMEP Bypass&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Craft a rop chain to disable SMEP (not possible with win10 vbs)&lt;/li&gt; &#xA; &lt;li&gt;Modifying nt!MmUserProbeAddress&lt;/li&gt; &#xA; &lt;li&gt;Windows Reserve Objects&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>