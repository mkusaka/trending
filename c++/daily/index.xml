<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-22T01:30:35Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dblalock/bolt</title>
    <updated>2022-06-22T01:30:35Z</updated>
    <id>tag:github.com,2022-06-22:/dblalock/bolt</id>
    <link href="https://github.com/dblalock/bolt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;10x faster matrix and vector operations&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/dblalock/bolt/raw/master/assets/bolt.jpg?raw=true&#34; alt=&#34;Bolt&#34; width=&#34;611px&#34; height=&#34;221px&#34;&gt; &#xA; &lt;!-- &lt;img src=&#34;https://github.com/dblalock/bolt/blob/master/assets/bolt.jpg?raw=true&#34; alt=&#34;Bolt&#34; width=&#34;685px&#34; height=&#34;248px&#34;/&gt; --&gt; &lt;/p&gt; &#xA;&lt;p&gt;Bolt is an algorithm for compressing vectors of real-valued data and running mathematical operations directly on the compressed representations.&lt;/p&gt; &#xA;&lt;p&gt;If you have a large collection of mostly-dense vectors and can tolerate lossy compression, Bolt can probably save you 10-200x space and compute time.&lt;/p&gt; &#xA;&lt;p&gt;Bolt also has &lt;a href=&#34;https://github.com/dblalock/bolt/raw/master/assets/bolt-theory.pdf?raw=true&#34;&gt;theoretical guarantees&lt;/a&gt; bounding the errors in its approximations.&lt;/p&gt; &#xA;&lt;p&gt;EDIT: this repo now also features the source code for &lt;a href=&#34;https://arxiv.org/abs/2106.10860&#34;&gt;MADDNESS&lt;/a&gt;, our shiny new algorithm for approximate matrix multiplication. MADDNESS has no Python wrapper yet, and is referred to as &#34;mithral&#34; in the source code. Name changed because apparently I&#39;m the only who gets Lord of the Rings references. MADDNESS runs ridiculously fast and, under reasonable assumptions, requires zero multiply-adds. Realistically, it&#39;ll be most useful for speeding up neural net inference on CPUs, but it&#39;ll take another couple papers to get it there; we need to generalize it to convolution and write the CUDA kernels to allow GPU training. See also the &lt;a href=&#34;https://github.com/dblalock/bolt/raw/master/assets/blalock-maddness-poster.png&#34;&gt;poster&lt;/a&gt; and &lt;a href=&#34;https://github.com/dblalock/bolt/raw/master/assets/snn-maddness.pdf&#34;&gt;slides&lt;/a&gt;. &#xA; &lt;!-- (it&#39;s lightweight, but still full strength! Get it? Guys...?). --&gt;&lt;/p&gt; &#xA;&lt;p&gt;EDIT2: Looking for a research project? See our &lt;a href=&#34;https://github.com/dblalock/bolt/tree/master/experiments&#34;&gt;list of ideas&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;EDIT3: See &lt;a href=&#34;https://github.com/dblalock/bolt/raw/master/BUILD.md&#34;&gt;Build.md&lt;/a&gt; for a working dockerfile that builds and runs Bolt, contributed by @mneilly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: All below code refers to the Python wrapper for Bolt and has nothing to do with MADDNESS.&lt;/strong&gt; It also seems to be &lt;a href=&#34;https://github.com/dblalock/bolt/issues/4&#34;&gt;no longer building&lt;/a&gt; for many people. If you want to use MADDNESS, see the &lt;a href=&#34;https://github.com/dblalock/bolt/raw/45454e6cfbc9300a43da6770abf9715674b47a0f/experiments/python/vq_amm.py#L273&#34;&gt;Python Implementation&lt;/a&gt; driven by &lt;a href=&#34;https://github.com/dblalock/bolt/raw/45454e6cfbc9300a43da6770abf9715674b47a0f/experiments/python/amm_main.py&#34;&gt;amm_main.py&lt;/a&gt; or &lt;a href=&#34;https://github.com/dblalock/bolt/raw/45454e6cfbc9300a43da6770abf9715674b47a0f/cpp/src/quantize/mithral.cpp&#34;&gt;C++ implementation&lt;/a&gt;. All code is ugly, but Python code should be pretty easy to add new AMM methods/variations to.&lt;/p&gt; &#xA;&lt;!-- NOTE: All the code, documentation, and results associated with Bolt&#39;s KDD paper can be found in the `experiments/` directory. See the README therein for details. A cleaned-up version of the paper is available [here](https://github.com/dblalock/bolt/blob/master/assets/bolt.pdf?raw=true). --&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;h4&gt;Python&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ brew install swig  # for wrapping C++; use apt-get, yum, etc, if not OS X&#xA;  $ pip install numpy  # bolt installation needs numpy already present&#xA;  $ git clone https://github.com/dblalock/bolt.git&#xA;  $ cd bolt &amp;amp;&amp;amp; python setup.py install&#xA;  $ pytest tests/  # optionally, run the tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run into any problems, please don&#39;t hesitate to mention it &lt;a href=&#34;https://github.com/dblalock/bolt/issues/4&#34;&gt;in the Python build problems issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;C++&lt;/h4&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt;, Google&#39;s open-source build system. Then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git clone https://github.com/dblalock/bolt.git&#xA;  $ cd bolt/cpp &amp;amp;&amp;amp; bazel run :main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;bazel run&lt;/code&gt; command will build the project and run the tests and benchmarks.&lt;/p&gt; &#xA;&lt;p&gt;If you want to integrate Bolt with another C++ project, include &lt;code&gt;cpp/src/include/public.hpp&lt;/code&gt; and add the remaining files under &lt;code&gt;cpp/src&lt;/code&gt; to your builds. You should let me know if you&#39;re interested in doing such an integration because I&#39;m hoping to see Bolt become part of many libraries and thus would be happy to help you. &#xA; &lt;!-- Note that the `BoltEncoder` object you&#39;ll interact with presently needs something else to feed it k-means centroids-see `python/bolt/bolt_api.py` for an example. --&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;p&gt;Bolt currently only supports machines with &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#Advanced_Vector_Extensions_2&#34;&gt;AVX2 instructions&lt;/a&gt;, which basically means x86 machines from fall 2013 or later. Contributions for ARM support &lt;a href=&#34;https://github.com/dblalock/bolt/issues/2&#34;&gt;are welcome&lt;/a&gt;. Also note that the Bolt Python wrapper is currently configured to require Clang, since GCC apparently &lt;a href=&#34;https://github.com/dblalock/bolt/issues/4&#34;&gt;runs into issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;Bolt is based on &lt;a href=&#34;https://en.wikipedia.org/wiki/Vector_quantization&#34;&gt;vector quantization&lt;/a&gt;. For details, see the &lt;a href=&#34;https://arxiv.org/abs/1706.10283&#34;&gt;Bolt paper&lt;/a&gt; or &lt;a href=&#34;https://github.com/dblalock/bolt/raw/master/assets/bolt-slides.pdf?raw=true&#34;&gt;slides&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Bolt includes a thorough set of speed and accuracy benchmarks. See the &lt;code&gt;experiments/&lt;/code&gt; directory. This is also what you want if you want to reproduce the results in the paper.&lt;/p&gt; &#xA;&lt;p&gt;Note that all of the timing results use the raw C++ implementation. At present, the Python wrapper is slightly slower due to Python overhead. If you&#39;re interested in having a full-speed wrapper, let me know and I&#39;ll allocate time to making this happen.&lt;/p&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X, queries = some N x D array, some iterable of length D arrays&#xA;&#xA;# these are approximately equal (though the latter are shifted and scaled)&#xA;enc = bolt.Encoder(reduction=&#39;dot&#39;).fit(X)&#xA;[np.dot(X, q) for q in queries]&#xA;[enc.transform(q) for q in queries]&#xA;&#xA;# same for these&#xA;enc = bolt.Encoder(reduction=&#39;l2&#39;).fit(X)&#xA;[np.sum((X - q) * (X - q), axis=1) for q in queries]&#xA;[enc.transform(q) for q in queries]&#xA;&#xA;# but enc.transform() is 10x faster or more&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example: Matrix-vector multiplies&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import bolt&#xA;import numpy as np&#xA;from scipy.stats import pearsonr as corr&#xA;from sklearn.datasets import load_digits&#xA;import timeit&#xA;&#xA;# for simplicity, use the sklearn digits dataset; we&#39;ll split&#xA;# it into a matrix X and a set of queries Q&#xA;X, _ = load_digits(return_X_y=True)&#xA;nqueries = 20&#xA;X, Q = X[:-nqueries], X[-nqueries:]&#xA;&#xA;enc = bolt.Encoder(reduction=&#39;dot&#39;, accuracy=&#39;lowest&#39;) # can tweak acc vs speed&#xA;enc.fit(X)&#xA;&#xA;dot_corrs = np.empty(nqueries)&#xA;for i, q in enumerate(Q):&#xA;    dots_true = np.dot(X, q)&#xA;    dots_bolt = enc.transform(q)&#xA;    dot_corrs[i] = corr(dots_true, dots_bolt)[0]&#xA;&#xA;# dot products closely preserved despite compression&#xA;print &#34;dot product correlation: {} +/- {}&#34;.format(&#xA;    np.mean(dot_corrs), np.std(dot_corrs))  # &amp;gt; .97&#xA;&#xA;# massive space savings&#xA;print(X.nbytes)  # 1777 rows * 64 cols * 8B = 909KB&#xA;print(enc.nbytes)  # 1777 * 2B = 3.55KB&#xA;&#xA;# massive time savings (~10x here, but often &amp;gt;100x on larger&#xA;# datasets with less Python overhead; see the paper)&#xA;t_np = timeit.Timer(&#xA;    lambda: [np.dot(X, q) for q in Q]).timeit(5)        # ~9ms&#xA;t_bolt = timeit.Timer(&#xA;    lambda: [enc.transform(q) for q in Q]).timeit(5)    # ~800us&#xA;print &#34;Numpy / BLAS time, Bolt time: {:.3f}ms, {:.3f}ms&#34;.format(&#xA;    t_np * 1000, t_bolt * 1000)&#xA;&#xA;# can get output without offset/scaling if needed&#xA;dots_bolt = [enc.transform(q, unquantize=True) for q in Q]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example: K-Nearest Neighbor / Maximum Inner Product Search&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# search using squared Euclidean distances&#xA;# (still using the Digits dataset from above)&#xA;enc = bolt.Encoder(&#39;l2&#39;, accuracy=&#39;high&#39;).fit(X)&#xA;bolt_knn = [enc.knn(q, k_bolt) for q in Q]  # knn for each query&#xA;&#xA;# search using dot product (maximum inner product search)&#xA;enc = bolt.Encoder(&#39;dot&#39;, accuracy=&#39;medium&#39;).fit(X)&#xA;bolt_knn = [enc.knn(q, k_bolt) for q in Q]  # knn for each query&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Miscellaneous&lt;/h2&gt; &#xA;&lt;p&gt;Bolt stands for &#34;Based On Lookup Tables&#34;. Feel free to use this exciting fact at parties.&lt;/p&gt; &#xA;&lt;!-- 2) If you use Bolt, let me know and I&#39;ll link to your project/company. --&gt;</summary>
  </entry>
  <entry>
    <title>JoeyDeVries/LearnOpenGL</title>
    <updated>2022-06-22T01:30:35Z</updated>
    <id>tag:github.com,2022-06-22:/JoeyDeVries/LearnOpenGL</id>
    <link href="https://github.com/JoeyDeVries/LearnOpenGL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code repository of all OpenGL chapters from the book and its accompanying website https://learnopengl.com&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;learnopengl.com code repository&lt;/h1&gt; &#xA;&lt;p&gt;Contains code samples for all chapters of Learn OpenGL and &lt;a href=&#34;https://learnopengl.com&#34;&gt;https://learnopengl.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Windows building&lt;/h2&gt; &#xA;&lt;p&gt;All relevant libraries are found in /libs and all DLLs found in /dlls (pre-)compiled for Windows. The CMake script knows where to find the libraries so just run CMake script and generate project of choice.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind the supplied libraries were generated with a specific compiler version which may or may not work on your system (generating a large batch of link errors). In that case it&#39;s advised to build the libraries yourself from the source.&lt;/p&gt; &#xA;&lt;h2&gt;Linux building&lt;/h2&gt; &#xA;&lt;p&gt;First make sure you have CMake, Git, and GCC by typing as root (sudo) &lt;code&gt;apt-get install g++ cmake git&lt;/code&gt; and then get the required packages: Using root (sudo) and type &lt;code&gt;apt-get install libsoil-dev libglm-dev libassimp-dev libglew-dev libglfw3-dev libxinerama-dev libxcursor-dev libxi-dev libfreetype-dev libgl1-mesa-dev xorg-dev&lt;/code&gt; . Next, run CMake (preferably CMake-gui). The source directory is LearnOpenGL and specify the build directory as LearnOpenGL/build. Creating the build directory within LearnOpenGL is important for linking to the resource files (it also will be ignored by Git). Hit configure and specify your compiler files (Unix Makefiles are recommended), resolve any missing directories or libraries, and then hit generate. Navigate to the build directory (&lt;code&gt;cd LearnOpenGL/build&lt;/code&gt;) and type &lt;code&gt;make&lt;/code&gt; in the terminal. This should generate the executables in the respective chapter folders.&lt;/p&gt; &#xA;&lt;p&gt;Note that CodeBlocks or other IDEs may have issues running the programs due to problems finding the shader and resource files, however it should still be able to generate the exectuables. To work around this problem it is possible to set an environment variable to tell the tutorials where the resource files can be found. The environment variable is named LOGL_ROOT_PATH and may be set to the path to the root of the LearnOpenGL directory tree. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;`export LOGL_ROOT_PATH=/home/user/tutorials/LearnOpenGL`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running &lt;code&gt;ls $LOGL_ROOT_PATH&lt;/code&gt; should list, among other things, this README file and the resources direcory.&lt;/p&gt; &#xA;&lt;h3&gt;Linux building in Docker&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/01e9/docker-ide&#34;&gt;this project&lt;/a&gt; you can start IDE in docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.../docker-ide/ide cpp-gpu ~/.../clion/bin/clion.sh -x11docker &#34;--gpu&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mac OS X building&lt;/h2&gt; &#xA;&lt;p&gt;Building on Mac OS X is fairly simple (thanks &lt;a href=&#34;https://github.com/hyperknot&#34;&gt;@hyperknot&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install cmake assimp glm glfw freetype&#xA;mkdir build&#xA;cd build&#xA;cmake ../.&#xA;make -j8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create Xcode project on Mac platform&lt;/h2&gt; &#xA;&lt;p&gt;Thanks &lt;a href=&#34;https://github.com/caochao&#34;&gt;@caochao&lt;/a&gt;: After cloning the repo, go to the root path of the repo, and run the command below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir xcode&#xA;cd xcode&#xA;cmake -G Xcode ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Glitter&lt;/h2&gt; &#xA;&lt;p&gt;Polytonic created a project called &lt;a href=&#34;https://github.com/Polytonic/Glitter&#34;&gt;Glitter&lt;/a&gt; that is a dead-simple boilerplate for OpenGL. Everything you need to run a single LearnOpenGL Project (including all libraries) and just that; nothing more. Perfect if you want to follow along with the chapters, without the hassle of having to manually compile and link all third party libraries!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qgis/QGIS</title>
    <updated>2022-06-22T01:30:35Z</updated>
    <id>tag:github.com,2022-06-22:/qgis/QGIS</id>
    <link href="https://github.com/qgis/QGIS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;QGIS is a free, open source, cross platform (lin/win/mac) geographical information system (GIS)&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/images/README-md/main_logo.png&#34; width=&#34;300&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qgis/QGIS/actions/workflows/run-tests.yml?query=branch%3Amaster+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/qgis/QGIS/workflows/QGIS%20tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/qgis/qgis/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/automated/qgis/qgis.svg?sanitize=true&#34; alt=&#34;Docker Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/qgis/QGIS/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/qgis/QGIS/_apis/build/status/qgis.QGIS?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/qgis/QGIS/actions/workflows/mingw64.yml?query=branch%3Amaster+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/qgis/QGIS/workflows/MingW64%20Windows%2064bit%20Build/badge.svg?sanitize=true&#34; alt=&#34;Windows cross build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.5281/zenodo.5869837&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/DOI/10.5281/zenodo.5869837.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;QGIS is a full-featured, user-friendly, free-and-open-source (FOSS) geographical information system (GIS) that runs on Unix platforms, Windows, and MacOS.&lt;/p&gt; &#xA;&lt;!-- TOC generated with https://freelance-tech-writer.github.io/table-of-contents-generator/index.html --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#1-flexible-and-powerful-spatial-data-management&#34;&gt;1. Flexible and powerful spatial data management&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#2-beautiful-cartography&#34;&gt;2. Beautiful cartography&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#3-advanced-and-robust-geospatial-analysis&#34;&gt;3. Advanced and robust geospatial analysis&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#4-powerful-customization-and-extensibility&#34;&gt;4. Powerful customization and extensibility&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#5-qgis-server&#34;&gt;5. QGIS Server&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#under-the-hood&#34;&gt;Under the hood&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#versions-and-release-cycle&#34;&gt;Versions and release cycle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#free-and-open-source&#34;&gt;Free and Open Source&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#installing-and-using-qgis&#34;&gt;Installing and using QGIS&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#help-and-support-channels&#34;&gt;Help and support channels&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#get-involved-with-the-community&#34;&gt;Get involved with the community&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#bug-reporting-and-bug-fixing&#34;&gt;Bug reporting and bug fixing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#new-features-and-enhancements&#34;&gt;New features and enhancements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#other-ways-to-contribute&#34;&gt;Other ways to contribute&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;1. Flexible and powerful spatial data management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports raster, vector, mesh, and point cloud data in a range of industry-standard formats &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Raster formats include&lt;/em&gt;: GeoPackage, GeoTIFF, GRASS, ArcInfo binary and ASCII grids, ERDAS Imagine SDTS, WMS, WCS, PostgreSQL/PostGIS, and &lt;a href=&#34;https://gdal.org/drivers/raster/index.html&#34;&gt;other GDAL supported formats&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Vector formats include&lt;/em&gt;: GeoPackage, ESRI shapefiles, GRASS, SpatiaLite, PostgreSQL/PostGIS, MSSQL, Oracle, WFS, Vector Tiles and &lt;a href=&#34;http://www.gdal.org/ogr_formats.html&#34;&gt;other OGR supported formats&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Mesh formats include&lt;/em&gt;: NetCDF, GRIB, 2DM, and &lt;a href=&#34;https://github.com/lutraconsulting/MDAL#supported-formats&#34;&gt;other MDAL supported formats&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Point-cloud format&lt;/em&gt;: LAS/LAZ and EPT datasets.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Access and display local files, spatial databases (PostGIS, SpatiaLite, SQL Server, Oracle, SAP HANA), web services (WMS, WCS, WFS, ArcGIS REST services), tile services, etc. &#xA;  &lt;!-- removed DB2 due to https://github.com/qgis/QGIS/pull/41178 --&gt;&lt;/li&gt; &#xA; &lt;li&gt;Visual and numerical digitizing and editing&lt;/li&gt; &#xA; &lt;li&gt;On-the-fly reprojection between coordinate reference systems (CRS)&lt;/li&gt; &#xA; &lt;li&gt;Temporal support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: Temporal animation&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/images/README-md/icebergs.gif&#34; alt=&#34;Example: Temporal animation&#34; title=&#34;Temporal animation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: 3D map view&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs.qgis.org/latest/en/_images/3dmapview.png&#34; alt=&#34;Example: 3D map view&#34; title=&#34;3D map view&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Beautiful cartography&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Large variety of rendering options in 2D and 3D&lt;/li&gt; &#xA; &lt;li&gt;Fine control over symbology, labeling, legends and additional graphical elements for beautifully rendered maps&lt;/li&gt; &#xA; &lt;li&gt;Near-complete replication (and significant extension) of symbology options that are available in proprietary software by ESRI&lt;/li&gt; &#xA; &lt;li&gt;Advanced styling using data-defined overrides, blending modes, and draw effects&lt;/li&gt; &#xA; &lt;li&gt;500+ built-in color ramps (cpt-city, ColorBrewer, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Create and update maps with specified scale, extent, style, and decorations via saved layouts&lt;/li&gt; &#xA; &lt;li&gt;Generate multiple maps (and reports) automatically using QGIS Atlas and QGIS Reports&lt;/li&gt; &#xA; &lt;li&gt;Flexible output direct to printer, or as image (raster), PDF, or SVG for further customization&lt;/li&gt; &#xA; &lt;li&gt;On-the-fly rendering enhancements using geometry generators (e.g. create and style new geometries from existing features)&lt;/li&gt; &#xA; &lt;li&gt;Preview modes for inclusive map making (e.g. monochrome, color blindness)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://flic.kr/p/2jFfGJP&#34;&gt;Example: Map of Bogota, Colombia in the style of Starry Starry Night, by Andrés Felipe Lancheros Sánchez&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://live.staticflickr.com/65535/50327326323_3da28f0d86_b.jpg&#34; alt=&#34;Map of Bogota, Colombia in the style of Starry Starry Night&#34; title=&#34;Map of Bogota, Colombia in the style of Starry Starry Night&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more maps created with QGIS, visit the &lt;a href=&#34;https://www.flickr.com/groups/2244553@N22/pool/with/50355460063/&#34;&gt;QGIS Map Showcase Flickr Group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/images/README-md/qgis_map_showcase.png&#34; alt=&#34;QGIS Map Showcase&#34; title=&#34;QGIS Map Showcase&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3. Advanced and robust geospatial analysis&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Powerful processing framework with 200+ native processing algorithms&lt;/li&gt; &#xA; &lt;li&gt;Access to 1000+ processing algorithms via providers such as GDAL, SAGA, GRASS, OrfeoToolbox, as well as custom models and processing scripts&lt;/li&gt; &#xA; &lt;li&gt;Geospatial database engine (filters, joins, relations, forms, etc.), as close to datasource- and format-independent as possible&lt;/li&gt; &#xA; &lt;li&gt;Immediate visualization of geospatial query and geoprocessing results&lt;/li&gt; &#xA; &lt;li&gt;Graphical modeler and batch processing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: Travel isochrones&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/images/README-md/network_analysis_2.png&#34; alt=&#34;Example: Travel isochrones&#34; title=&#34;Travel isochrones&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: Graphical model&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs.qgis.org/latest/en/_images/models_model.png&#34; alt=&#34;Example: graphical model&#34; title=&#34;Graphical model&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4. Powerful customization and extensibility&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully customizable user experience, including user interface and application settings that cater to power-users and beginners alike&lt;/li&gt; &#xA; &lt;li&gt;Rich &lt;a href=&#34;https://docs.qgis.org/testing/en/docs/user_manual/working_with_vector/expression.html&#34;&gt;expression engine&lt;/a&gt; for maximum flexibility in visualization and processing&lt;/li&gt; &#xA; &lt;li&gt;Broad and varied &lt;a href=&#34;https://plugins.qgis.org/&#34;&gt;plugin ecosystem&lt;/a&gt; that includes data connectors, digitizing aids, advanced analysis and charting tools, in-the-field data capture, conversion of ESRI style files, etc.&lt;/li&gt; &#xA; &lt;li&gt;Style manager for creating, storing, and managing styles&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plugins.qgis.org/styles/&#34;&gt;QGIS style hub&lt;/a&gt; for easy sharing of styles&lt;/li&gt; &#xA; &lt;li&gt;Python and C++ API for standalone (headless) applications as well as in-application comprehensive scripting (PyQGIS)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: Style manager&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs.qgis.org/latest/en/_images/stylemanager.png&#34; alt=&#34;Example: Style manager&#34; title=&#34;Style Manager&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: Plugins&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/images/README-md/plugins_1.png&#34; alt=&#34;Example: Plugins&#34; title=&#34;Plugins&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- Kill this one for now, since it&#39;s Python2 not 3&#xA;Example: Python console&#xA;&#xA;![Example: Python console](https://docs.qgis.org/latest/en/_images/python_console_editor.png &#34;Python console&#34;)&#xA;--&gt; &#xA;&lt;h3&gt;5. QGIS Server&lt;/h3&gt; &#xA;&lt;p&gt;Headless map server -- running on Linux, macOS, Windows, or in a docker container -- that shares the same code base as QGIS.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Industry-standard protocols (WMS, WFS, WFS3/OGC API for Features and WCS) allow plug-n-play with any software stack&lt;/li&gt; &#xA; &lt;li&gt;Works with any web server (Apache, nginx, etc) or standalone&lt;/li&gt; &#xA; &lt;li&gt;All beautiful QGIS cartography is supported with best-in-class support for printing&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable with Python scripting support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: QGIS server WMS response&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs.qgis.org/latest/en/_images/server_selection_parameter.png&#34; alt=&#34;Example: QGIS Server response to a WMS request&#34; title=&#34;QGIS Server response to a WMS request&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: QGIS server WFS response&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs.qgis.org/latest/en/_images/server_wfs3_feature.png&#34; alt=&#34;Example: QGIS Server response to a WFS Feature request&#34; title=&#34;QGIS Server response to a WFS Feature request&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Under the hood&lt;/h2&gt; &#xA;&lt;p&gt;QGIS is developed using the &lt;a href=&#34;https://qt.io&#34;&gt;Qt toolkit&lt;/a&gt; and C++, since 2002, and has a pleasing, easy to use graphical user interface with multilingual support. It is maintained by an active developer team and supported by vibrant community of GIS professionals and enthusiasts as well as geospatial data publishers and end-users.&lt;/p&gt; &#xA;&lt;h3&gt;Versions and release cycle&lt;/h3&gt; &#xA;&lt;p&gt;QGIS development and releases follow a &lt;a href=&#34;https://www.qgis.org/en/site/getinvolved/development/roadmap.html&#34;&gt;time based schedule/roadmap&lt;/a&gt;. There are three main branches of QGIS that users can install. These are the &lt;strong&gt;Long Term Release (LTR)&lt;/strong&gt; branch, &lt;strong&gt;Latest Release (LR)&lt;/strong&gt; branch, and the &lt;strong&gt;Development (Nightly)&lt;/strong&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;Every month, there is a &lt;strong&gt;Point Release&lt;/strong&gt; that provides bug-fixes to the LTR and LR.&lt;/p&gt; &#xA;&lt;h3&gt;Free and Open Source&lt;/h3&gt; &#xA;&lt;p&gt;QGIS is released under the GNU Public License (GPL) Version 2 or any later version. Developing QGIS under this license means that you can (if you want to) inspect and modify the source code and guarantees that you, our happy user will always have access to a GIS program that is free of cost and can be freely modified.&lt;/p&gt; &#xA;&lt;p&gt;QGIS is part of the Open-Source Geospatial Foundation (&lt;a href=&#34;https://www.osgeo.org/&#34;&gt;OSGeo&lt;/a&gt;), offering a range of complementary open-source GIS software projects.&lt;/p&gt; &#xA;&lt;h2&gt;Installing and using QGIS&lt;/h2&gt; &#xA;&lt;p&gt;Precompiled binaries for QGIS are available at &lt;a href=&#34;https://www.qgis.org/en/site/forusers/download.html&#34;&gt;the QGIS.org download page&lt;/a&gt;. Please follow the installation instructions carefully.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/INSTALL.md&#34;&gt;building guide&lt;/a&gt; can be used to get started with building QGIS from source.&lt;/p&gt; &#xA;&lt;p&gt;For installation of QGIS Server, see its &lt;a href=&#34;https://docs.qgis.org/testing/en/docs/server_manual/getting_started.html&#34;&gt;getting started documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;A range of &lt;a href=&#34;https://qgis.org/en/docs/index.html&#34;&gt;documentation&lt;/a&gt; is available. This includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qgis.org/latest/en/docs/training_manual/index.html&#34;&gt;Training Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qgis.org/latest/en/docs/user_manual/index.html&#34;&gt;QGIS User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qgis.org/latest/en/docs/server_manual/index.html&#34;&gt;QGIS Server Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qgis.org/en/site/forusers/visualchangelogs.html&#34;&gt;Visual Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qgis.org/latest/en/docs/documentation_guidelines/index.html&#34;&gt;Documentation Guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qgis.org/latest/en/docs/pyqgis_developer_cookbook/index.html&#34;&gt;QGIS Python (PyQGIS) Cookbook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qgis.org/pyqgis/&#34;&gt;QGIS Python (PyQGIS) API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qgis.org/api/&#34;&gt;QGIS C++ API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qgis.org/latest/en/docs/developers_guide/index.html&#34;&gt;Developers Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Help and support channels&lt;/h3&gt; &#xA;&lt;p&gt;There are several channels where you can find help and support for QGIS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using the &lt;a href=&#34;https://qgis.org&#34;&gt;QGIS community site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Joining the &lt;a href=&#34;https://lists.osgeo.org/mailman/listinfo/qgis-user&#34;&gt;qgis-users mailing list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chatting with other users real-time. &lt;em&gt;Please wait around for a response to your question as many folks on the channel are doing other things and it may take a while for them to notice your question. The following paths all take you to the same chat room:&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using an IRC client and joining the &lt;a href=&#34;http://webchat.freenode.net/?channels=#qgis&#34;&gt;#qgis&lt;/a&gt; channel on irc.freenode.net.&lt;/li&gt; &#xA;   &lt;li&gt;Using a Matrix client and joining the &lt;a href=&#34;http://matrix.to/#/#qgis:matrix.org&#34;&gt;#qgis:matrix.org&lt;/a&gt; room.&lt;/li&gt; &#xA;   &lt;li&gt;Using &lt;a href=&#34;https://gitter.im/qgis/QGIS&#34;&gt;Gitter&lt;/a&gt; chat.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;At the &lt;a href=&#34;https://gis.stackexchange.com/&#34;&gt;GIS stackexchange&lt;/a&gt; or &lt;a href=&#34;https://www.reddit.com/r/QGIS/&#34;&gt;r/QGIS reddit&lt;/a&gt;, which are not maintained by the QGIS team, but where the QGIS and broader GIS community provides lots of advice&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qgis.org/en/site/forusers/support.html&#34;&gt;Other support channels&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get involved with the community&lt;/h2&gt; &#xA;&lt;h3&gt;Bug reporting and bug fixing&lt;/h3&gt; &#xA;&lt;p&gt;You can help us &lt;strong&gt;by submitting bug reports or fixing bugs&lt;/strong&gt; in the &lt;a href=&#34;https://github.com/qgis/QGIS/issues/&#34;&gt;QGIS bug tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;New features and enhancements&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to contribute patches you can:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.github.com/forking/&#34;&gt;fork the project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;make your changes&lt;/li&gt; &#xA; &lt;li&gt;commit to your repository&lt;/li&gt; &#xA; &lt;li&gt;and then &lt;a href=&#34;https://help.github.com/articles/creating-a-pull-request-from-a-fork/&#34;&gt;create a pull request&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The development team can then review your contribution and commit it upstream as appropriate.&lt;/p&gt; &#xA;&lt;p&gt;If you commit a new feature, add &lt;code&gt;[FEATURE]&lt;/code&gt; to your commit message AND give a clear description of the new feature. The label &lt;code&gt;Needs documentation&lt;/code&gt; will be added by maintainers and will automatically create an issue on the QGIS-Documentation repo, where you or others should write documentation about it.&lt;/p&gt; &#xA;&lt;p&gt;For large-scale changes, you can open a &lt;a href=&#34;https://github.com/qgis/QGIS-Enhancement-Proposals&#34;&gt;QEP (QGIS Enhancement Proposal)&lt;/a&gt;. QEPs are used in the process of creating and discussing new enhancements or policy for QGIS.&lt;/p&gt; &#xA;&lt;h3&gt;Translations&lt;/h3&gt; &#xA;&lt;p&gt;Please help translate QGIS to your language. At this moment about forty languages are already available in the Desktop user interface and about eighty languages are available in transifex ready to be translated.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://qgis.org/en/site/getinvolved/translate.html&#34;&gt;translation&lt;/a&gt; process is managed by the &lt;a href=&#34;https://qgis.org/en/site/getinvolved/governance/governance.html#gui-translation&#34;&gt;Translation Team&lt;/a&gt; and all the activities are done under the &lt;a href=&#34;https://www.transifex.com/qgis/&#34;&gt;Transifex&lt;/a&gt; platform.&lt;/p&gt; &#xA;&lt;h3&gt;Other ways to contribute&lt;/h3&gt; &#xA;&lt;p&gt;If you are not a developer, there are many other possibilities which do not require programming skills to help QGIS to evolve. Check our &lt;a href=&#34;https://qgis.org/en/site/getinvolved/index.html&#34;&gt;project homepage for more information&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>