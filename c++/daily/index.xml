<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-04T01:30:19Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bytedance/btrace</title>
    <updated>2025-07-04T01:30:19Z</updated>
    <id>tag:github.com,2025-07-04:/bytedance/btrace</id>
    <link href="https://github.com/bytedance/btrace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ”¥ðŸ”¥ btrace (AKA RheaTrace) is a high-performance Android &amp; iOS tracing tool built on Perfetto. It not only times your methods but also reveals why theyâ€™re slow.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;btrace&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache-brightgreen.svg?style=flat&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/release-3.0.0-red.svg?style=flat&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/btrace/master/README.zh-CN.md&#34;&gt;README ä¸­æ–‡ç‰ˆ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/btrace/master/#btrace-for-android&#34;&gt;btrace for Android&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/btrace/master/#btrace-for-ios&#34;&gt;btrace for iOS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Major Update&lt;/h2&gt; &#xA;&lt;p&gt;We are proud to announce the launch of btrace 3.0, introducing an industry-first high-performance synchronized sampling-based tracing solution. Additionally, the new version now provides comprehensive iOS tracing capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;btrace for Android&lt;/h2&gt; &#xA;&lt;h3&gt;Integration&lt;/h3&gt; &#xA;&lt;p&gt;Add dependencies in app/build.gradle file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;    if (enable_btrace == &#39;true&#39;) {&#xA;        implementation &#39;com.bytedance.btrace:rhea-inhouse:3.0.0&#39;&#xA;    } else {&#xA;        implementation &#39;com.bytedance.btrace:rhea-inhouse-noop:3.0.0&#39;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;enable_btrace&lt;/code&gt; switch in the gradle.properties file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Turn on this switch when you want to build app that support tracing.&#xA;enable_btrace=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add initialization code in &lt;code&gt;attachBaseContext()&lt;/code&gt; method of your Application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;public class MyApp extends Application {&#xA;&#xA;    @Override&#xA;    protected void attachBaseContext(Context base) {&#xA;        super.attachBaseContext(base);&#xA;        // When rhea-inhouse-noop is used, RheaTrace3.init() has empty implementation.&#xA;        RheaTrace3.init(base);&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;To use btrace 3.0, follow these instructions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure that your computer has integrated adb and Java and Python3 environment.&lt;/li&gt; &#xA; &lt;li&gt;Connect your phone to your computer and make sure it can recognized by adb devices.&lt;/li&gt; &#xA; &lt;li&gt;Install the APK that integrates btrace 3.0 on your phone.&lt;/li&gt; &#xA; &lt;li&gt;Download the latest script from &#34;Script Management&#34; below to your computer.&lt;/li&gt; &#xA; &lt;li&gt;In the directory where the computer script is located, execute the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;java -jar rhea-trace-shell.jar -a ${your_package_name} -t 10 -o output.pb -r sched&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Open the generated trace file in &lt;a href=&#34;https://ui.perfetto.dev/&#34;&gt;https://ui.perfetto.dev/&lt;/a&gt; for detailed analysis.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Script Management&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Release Date&lt;/th&gt; &#xA;   &lt;th&gt;jar&lt;/th&gt; &#xA;   &lt;th&gt;Release Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.0.0&lt;/td&gt; &#xA;   &lt;td&gt;2025-06-10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://oss.sonatype.org/service/local/repositories/releases/content/com/bytedance/btrace/rhea-trace-processor/3.0.0/rhea-trace-processor-3.0.0.jar&#34;&gt;rhea-trace-shell-3.0.0.jar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;3.0 first release&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Parameters Description&lt;/h4&gt; &#xA;&lt;h5&gt;Required Parameters&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Default Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-a $applicationName&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the package name of your app&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;Optional Parameters&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Default Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-o $outputPath&lt;/td&gt; &#xA;   &lt;td&gt;${applicationName}_yyyy_MM_dd_HH_mm_ss.pb&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the path where the trace artifact is saved. By default, the value is autogenerated based on the tracing app package name and current timestamp.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-t $timeInSecond&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the duration of the tracing, in seconds.&lt;br&gt;Note that: On MacOS, interactive tracing mode will be activated if you don&#39;t specifying the tracing duration. On windows, tracing dration must be specified, because we don&#39;t support interactive tracing mode on Windows currently.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-m $mappingPath&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the mapping file path for the abofuscated app.&lt;br&gt;Note that: it&#39;s not the methodMapping file that was used in btrace 2.0, but the mapping file generated by proguard. There is no methodMapping file in btrace 3.0.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-mode $mode&lt;/td&gt; &#xA;   &lt;td&gt;Decided at runtime.&lt;/td&gt; &#xA;   &lt;td&gt;btrace currently support two kinds of modes: &#xA;    &lt;ol&gt;&#xA;     &lt;li&gt;perfetto: The default mode for systems 8.1 and above, allowing collecting system atrace and ftrace using perfetto service besides the app trace.&lt;/li&gt; &#xA;     &lt;li&gt;simple: The default mode for systems below 8.1, allowin collecting app trace only.&lt;/li&gt;&#xA;    &lt;/ol&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-maxAppTraceBufferSize $size&lt;/td&gt; &#xA;   &lt;td&gt;200000&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the maximum count of stacktraces that our buffer allows to save, previously saved stacktraces will be overwritten if the maximum limit is met.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-sampleInterval $ns&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the minimum sampling backtracing interval in nanoseconds.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-waitTraceTimeout&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the timeout seconds for waiting for tracing data writing to complete and being pulled to the PC.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-s $serial&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the device connected by adb.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-r&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Automatically restarts the app to tracing the start up stage.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--list&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays a list of supported atrace categories for the device.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Known Issues&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Problems&lt;/th&gt; &#xA;   &lt;th&gt;Advices&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;We currently only support devices running Android 8.0 or higher.&lt;/td&gt; &#xA;   &lt;td&gt;Please use devices with Android 8.0 or higher.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Java object allocation monitoring is not yet adapted for devices with Android 15 and above.&lt;/td&gt; &#xA;   &lt;td&gt;If you need to inspect object memory allocation information or require more detailed tracing, please use devices with Android versions below 15.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Devices that do not support Perfetto (mostly systems before 8.1) cannot collect system information such as CPU scheduling.&lt;/td&gt; &#xA;   &lt;td&gt;Try with -mode simple.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;32-bit devices or applications cannot collect tracing data.&lt;/td&gt; &#xA;   &lt;td&gt;Please install and use 64-bit applications on 64-bit devices.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;btrace for iOS&lt;/h2&gt; &#xA;&lt;p&gt;Record trace data offline without Instruments to help find performance issue of your app.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Clone source code, and add the following lines to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;BTrace&#39;, :path =&amp;gt; &#39;xxx/btrace-iOS&#39;&#xA;pod &#39;BTraceDebug&#39;, :path =&amp;gt; &#39;xxx/btrace-iOS&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install command line tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# using homebrew&#xA;brew install libusbmuxd&#xA;brew install poetry&#xA;# install from the BTraceTool directory&#xA;poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h4&gt;Record&lt;/h4&gt; &#xA;&lt;p&gt;Note that if &#39;-l&#39; is not specified, app must have been launched before recording.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m btrace record [-h] [-i DEVICE_ID] [-b BUNDLE_ID] [-o OUTPUT] [-t TIME_LIMIT] [-d DSYM_PATH] [-m] [-l] [-s]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Options&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-h, --help&lt;/td&gt; &#xA;   &lt;td&gt;Show help&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-i DEVICE_ID, --device_id DEVICE_ID&lt;/td&gt; &#xA;   &lt;td&gt;Device id. If not specified: &lt;br&gt;Â· If only one device is connected to Mac, it will be chosen &lt;br&gt;Â· If multiple devices are connected to Mac, prompt the user to make a selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-b BUNDLE_ID --bundle_id BUNDLE_ID&lt;/td&gt; &#xA;   &lt;td&gt;Bundle id&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-o OUTPUT --output OUTPUT&lt;/td&gt; &#xA;   &lt;td&gt;Output path. If not specified, data will be saved to &#39;~/Desktop/btrace&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-t TIME_LIMIT --time_limit TIME_LIMIT&lt;/td&gt; &#xA;   &lt;td&gt;Limit recording time, default 3600s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-d DSYM_PATH --dsym_path DSYM_PATH&lt;/td&gt; &#xA;   &lt;td&gt;Dsym file path, or app path built by Xcode in debug mode. If specifiedï¼Œflamegraph will be displayed automatically after the recording ends&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-m --main_thread_only&lt;/td&gt; &#xA;   &lt;td&gt;If given, only record main thread trace data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-l --launch&lt;/td&gt; &#xA;   &lt;td&gt;If given, app will be launched/relaunched, and start recording on app launch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-s --sys_symbol&lt;/td&gt; &#xA;   &lt;td&gt;If given, symbols in the system libraries will be parsed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;Examples&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m btrace record -i xxx -b xxx -d /xxxDebug-iphoneos/xxx.app&#xA;python3 -m btrace record -i xxx -b xxx -d /xxxDebug-iphoneos/xxx.dSYM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Stop&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ctrl + c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Parse&lt;/h4&gt; &#xA;&lt;p&gt;When should the &#39;parse&#39; command used?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#39;-d&#39; option is not specified in the &#39;record&#39; command.&lt;/li&gt; &#xA; &lt;li&gt;reopen the parsed data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m btrace parse [-h] [-d DSYM_PATH] [-f] [-s] file_path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Options&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-h, --help&lt;/td&gt; &#xA;   &lt;td&gt;Show help&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-d DSYM_PATH, --dsym_path DSYM_PATH&lt;/td&gt; &#xA;   &lt;td&gt;Dsym file path, or app path built by Xcode in debug mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-s, --sys_symbol&lt;/td&gt; &#xA;   &lt;td&gt;If given, symbols in the system libraries will be parsed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-f, --force&lt;/td&gt; &#xA;   &lt;td&gt;If given, force re-parsing trace data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;Examples&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;btrace parse -d /xxx.dSYM xxx.sqlite&#xA;btrace parse -d /xxx.app xxx.sqlite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Technology Principle&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in the internal details of btrace 3.0, you can refer to the document: &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/btrace/master/INTRODUCTION.MD&#34;&gt;btrace 3.0 Internal Principle in Detail!&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve made a lot of improvements in btrace 3.0, including better error prompts. There might still be some cases where the prompts aren&#39;t accurate enough or the messages aren&#39;t clear. If you run into any issues, just give us a shout in the Lark group below, and we&#39;ll do our best to help you out. We always appreciate any other feedback or suggestions you might have too, thanks you!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bytedance/btrace/master/assets/b/en/lark.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/btrace/master/CONTRIBUTING.MD&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/btrace/master/LICENSE&#34;&gt;Apache License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>topling/toplingdb</title>
    <updated>2025-07-04T01:30:19Z</updated>
    <id>tag:github.com,2025-07-04:/topling/toplingdb</id>
    <link href="https://github.com/topling/toplingdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ToplingDB is a cloud native LSM Key-Value Store with searchable compression algo and distributed compaction&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/topling/toplingdb/memtable_as_log_index/README-zh_cn.md&#34;&gt;ä¸­æ–‡ç‰ˆ&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;ToplingDB: A Persistent Key-Value Store for External Storage&lt;/h2&gt; &#xA;&lt;p&gt;ToplingDB is developed and maintained by &lt;a href=&#34;https://topling.cn&#34;&gt;Topling Inc&lt;/a&gt;. It is built with &lt;a href=&#34;https://github.com/facebook/rocksdb&#34;&gt;RocksDB&lt;/a&gt;. See &lt;a href=&#34;https://github.com/topling/toplingdb/wiki/ToplingDB-Branch-Name-Convention&#34;&gt;ToplingDB Branch Name Convention&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;ToplingDB requires C++17, gcc 8.3 or newer is recommended, clang also works.&lt;/p&gt; &#xA;&lt;p&gt;ToplingDB is much faster than RocksDB, you can try it by yourself:&lt;/p&gt; &#xA;&lt;h3&gt;Compile &amp;amp; run db_bench&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum -y install git libaio-devel gcc-c++ gflags-devel zlib-devel bzip2-devel libcurl-devel liburing-devel snappy-devel jemalloc-devel&#xA;#sudo apt-get update -y &amp;amp;&amp;amp; sudo apt-get install -y libjemalloc-dev libaio-dev libgflags-dev zlib1g-dev libbz2-dev libcurl4-gnutls-dev liburing-dev libsnappy-dev libbz2-dev liblz4-dev libzstd-dev&#xA;git clone https://github.com/topling/toplingdb&#xA;cd toplingdb&#xA;make -j`nproc` db_bench DEBUG_LEVEL=0&#xA;sudo make install PREFIX=/some/path # default is /usr/local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After compile, you can run bundled &lt;a href=&#34;https://raw.githubusercontent.com/topling/toplingdb/memtable_as_log_index/db_bench.sh&#34;&gt;db_bench.sh&lt;/a&gt;(use port 2011 for &lt;a href=&#34;https://github.com/topling/rockside/raw/master/sample-conf/db_bench_enterprise.yaml#L4&#34;&gt;embeded http server&lt;/a&gt;), then &lt;a href=&#34;https://github.com/topling/sideplugin-wiki-en/wiki/101&#34;&gt;use ToplingDB(maybe migrate from rocksdb)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;ToplingDB&#39;s submodule &lt;strong&gt;&lt;a href=&#34;https://github.com/topling/rockside&#34;&gt;rockside&lt;/a&gt;&lt;/strong&gt; is the entry point of ToplingDB, see &lt;strong&gt;&lt;a href=&#34;https://github.com/topling/rockside/wiki&#34;&gt;SidePlugin wiki&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ToplingDB has much more key features than RocksDB:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/topling/rockside/wiki&#34;&gt;SidePlugin&lt;/a&gt; enables users to write a json(or yaml) to define DB configs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/topling/sideplugin-wiki-en/wiki/WebView&#34;&gt;Embedded Http Server&lt;/a&gt; enables users to view almost all DB info on web, this is a component of &lt;a href=&#34;https://github.com/topling/rockside/wiki&#34;&gt;SidePlugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/topling/sideplugin-wiki-en/wiki/WebView&#34;&gt;Embedded Http Server&lt;/a&gt; enables users to &lt;a href=&#34;https://github.com/topling/sideplugin-wiki-en/wiki/Online-Change-Options&#34;&gt;online change&lt;/a&gt; db/cf options and all db meta objects(such as MemTabFactory, TableFactory, WriteBufferManager ...) without restart the running process&lt;/li&gt; &#xA; &lt;li&gt;Many improvements and refactories on RocksDB, aimed for performance and extendibility&lt;/li&gt; &#xA; &lt;li&gt;memtable as wal log index, omit Flush MemTable to L0, reduce write amp, further improves for large MemTable&lt;/li&gt; &#xA; &lt;li&gt;Topling transaction lock management, 5x faster than rocksdb&lt;/li&gt; &#xA; &lt;li&gt;MultiGet with concurrent IO by fiber/coroutine + io_uring, much faster than RocksDB&#39;s async MultiGet&lt;/li&gt; &#xA; &lt;li&gt;Topling &lt;a href=&#34;https://github.com/topling/sideplugin-wiki-en/wiki/Devirtualization-And-Key-Prefix-Cache-Principle&#34;&gt;de-virtualization&lt;/a&gt;, de-virtualize hotspot (virtual) functions, and key prefix caches, &lt;a href=&#34;https://github.com/topling/sideplugin-wiki-en/wiki/Devirtualization-And-Key-Prefix-Cache-Benchmark&#34;&gt;bechmarks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Topling zero copy for point search(Get/MultiGet) and Iterator&lt;/li&gt; &#xA; &lt;li&gt;Topling memtable as log index, omit memtable flush to L0&lt;/li&gt; &#xA; &lt;li&gt;Builtin SidePlugin&lt;strong&gt;s&lt;/strong&gt; for existing RocksDB components(Cache, Comparator, TableFactory, MemTableFactory...)&lt;/li&gt; &#xA; &lt;li&gt;Builtin Prometheus metrics support, this is based on &lt;a href=&#34;https://github.com/topling/sideplugin-wiki-en/wiki/WebView&#34;&gt;Embedded Http Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Many bugfixes for RocksDB, a small part of such fixes was &lt;a href=&#34;https://github.com/facebook/rocksdb/pulls?q=is%3Apr+author%3Arockeet&#34;&gt;Pull Requested&lt;/a&gt; to &lt;a href=&#34;https://github.com/facebook/rocksdb&#34;&gt;upstream RocksDB&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;ToplingDB cloud native DB services&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/topling/mytopling&#34;&gt;MyTopling&lt;/a&gt;(MySQL on ToplingDB), &lt;a href=&#34;https://market.aliyun.com/products?k=mytopling&#34;&gt;MyTopling on aliyun&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/topling/todis&#34;&gt;Todis&lt;/a&gt;(Redis on ToplingDB)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;ToplingDB Components&lt;/h2&gt; &#xA;&lt;p&gt;With SidePlugin mechanics, plugins/components can be physically separated from core toplingdb&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Can be compiled to a separated dynamic lib and loaded at runtime&lt;/li&gt; &#xA; &lt;li&gt;User code need not any changes, just change json/yaml files&lt;/li&gt; &#xA; &lt;li&gt;Topling&#39;s non-open-source enterprise plugins/components are delivered in this way&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Repository dir structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;toplingdb&#xA; \__ sideplugin&#xA;      \__ rockside                 (submodule , sideplugin core and framework)&#xA;      \__ topling-zip              (auto clone, zip and core lib)&#xA;      \__ cspp-memtab              (auto clone, sideplugin component)&#xA;      \__ cspp-wbwi                (auto clone, sideplugin component)&#xA;      \__ topling-sst              (auto clone, sideplugin component)&#xA;      \__ topling-rocks            (auto clone, sideplugin component)&#xA;      \__ topling-zip_table_reader (auto clone, sideplugin component)&#xA;      \__ topling-dcompact         (auto clone, sideplugin component)&#xA;           \_ tools/dcompact       (dcompact-worker binary app)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Repository&lt;/th&gt; &#xA;   &lt;th&gt;Permission&lt;/th&gt; &#xA;   &lt;th&gt;Description (and components)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/topling/toplingdb&#34;&gt;ToplingDB&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;public&lt;/td&gt; &#xA;   &lt;td&gt;Top repository, forked from &lt;a href=&#34;https://github.com/facebook/rocksdb&#34;&gt;RocksDB&lt;/a&gt; with our fixes, refactories and enhancements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/topling/rockside&#34;&gt;rockside&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;public&lt;/td&gt; &#xA;   &lt;td&gt;This is a submodule, contains:&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;SidePlugin framework and Builtin SidePlugin&lt;strong&gt;s&lt;/strong&gt;&lt;/li&gt;&#xA;     &lt;li&gt;Embedded Http Server and Prometheus metrics&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/topling/cspp-wbwi&#34;&gt;cspp-wbwi&lt;br&gt;(&lt;strong&gt;W&lt;/strong&gt;rite&lt;strong&gt;B&lt;/strong&gt;atch&lt;strong&gt;W&lt;/strong&gt;ith&lt;strong&gt;I&lt;/strong&gt;ndex)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;public&lt;/td&gt; &#xA;   &lt;td&gt;With CSPP and carefully coding, &lt;strong&gt;CSPP_WBWI&lt;/strong&gt; is 20x faster than rocksdb SkipList based WBWI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/topling/cspp-memtable&#34;&gt;cspp-memtable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;public&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;strong&gt;CSPP&lt;/strong&gt; is &lt;strong&gt;C&lt;/strong&gt;rash &lt;strong&gt;S&lt;/strong&gt;afe &lt;strong&gt;P&lt;/strong&gt;arallel &lt;strong&gt;P&lt;/strong&gt;atricia trie) MemTab, which outperforms SkipList on all aspects: 3x lower memory usage, 7x single thread performance, perfect multi-thread scaling)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/topling/topling-sst&#34;&gt;topling-sst&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;public&lt;/td&gt; &#xA;   &lt;td&gt;1. &lt;a href=&#34;https://github.com/topling/sideplugin-wiki-en/wiki/SingleFastTable&#34;&gt;SingleFastTable&lt;/a&gt;(designed for L0 and L1)&lt;br&gt; 2. VecAutoSortTable(designed for MyTopling bulk_load).&lt;br&gt; 3. Deprecated &lt;a href=&#34;https://github.com/topling/sideplugin-wiki-en/wiki/ToplingFastTable&#34;&gt;ToplingFastTable&lt;/a&gt;, CSPPAutoSortTable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/topling/topling-dcompact&#34;&gt;topling-dcompact&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;public&lt;/td&gt; &#xA;   &lt;td&gt;Distributed Compaction with general dcompact_worker application, offload compactions to elastic computing clusters, much more powerful than RocksDB&#39;s Remote Compaction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/topling/topling-rocks&#34;&gt;topling-rocks&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;private&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;For build &lt;a href=&#34;https://github.com/topling/sideplugin-wiki-en/wiki/ToplingZipTable&#34;&gt;Topling&lt;strong&gt;Zip&lt;/strong&gt;Table&lt;/a&gt;, an SST implementation optimized for RAM and SSD space, aimed for L2+ level compaction, which uses topling dedicated searchable in-memory data compression algorithms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/topling/topling-zip_table_reader&#34;&gt;topling-zip_table_reader&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;public&lt;/td&gt; &#xA;   &lt;td&gt;For read Topling&lt;strong&gt;Zip&lt;/strong&gt;Table by community users, builder of Topling&lt;strong&gt;Zip&lt;/strong&gt;Table is in &lt;a href=&#34;https://github.com/topling/topling-rocks&#34;&gt;topling-rocks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To simplify the compiling, repo&lt;strong&gt;s&lt;/strong&gt; are auto cloned in ToplingDB&#39;s Makefile, community users will auto clone public repo successfully but fail to auto clone &lt;strong&gt;private&lt;/strong&gt; repo, thus ToplingDB is built without &lt;strong&gt;private&lt;/strong&gt; components, this is so called &lt;strong&gt;community&lt;/strong&gt; version.&lt;/p&gt; &#xA;&lt;h2&gt;Configurable features&lt;/h2&gt; &#xA;&lt;p&gt;For performance and simplicity, ToplingDB disabled some RocksDB features by default:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Control MACRO&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic creation of ColumnFamily&lt;/td&gt; &#xA;   &lt;td&gt;ROCKSDB_DYNAMIC_CREATE_CF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;User level timestamp on key&lt;/td&gt; &#xA;   &lt;td&gt;TOPLINGDB_WITH_TIMESTAMP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wide Columns&lt;/td&gt; &#xA;   &lt;td&gt;TOPLINGDB_WITH_WIDE_COLUMNS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fabricated features for read&lt;/td&gt; &#xA;   &lt;td&gt;TOPLINGDB_WITH_FABRICATED_COMPLEXITY&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To enable these features, add &lt;code&gt;-D${MACRO_NAME}&lt;/code&gt; to var &lt;code&gt;EXTRA_CXXFLAGS&lt;/code&gt;, such as build ToplingDB for java with dynamic ColumnFamily:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make -j`nproc` EXTRA_CXXFLAGS=&#39;-DROCKSDB_DYNAMIC_CREATE_CF&#39; rocksdbjava&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;To conform open source license, the following term of disallowing bytedance is deleted since 2023-04-24, that is say: bytedance using ToplingDB is no longer illeagal and is not a shame.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;We disallow bytedance using this software, other terms are identidal with upstream rocksdb license,&lt;/del&gt; see &lt;a href=&#34;https://raw.githubusercontent.com/topling/toplingdb/memtable_as_log_index/LICENSE.Apache&#34;&gt;LICENSE.Apache&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/topling/toplingdb/memtable_as_log_index/COPYING&#34;&gt;COPYING&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/topling/toplingdb/memtable_as_log_index/LICENSE.leveldb&#34;&gt;LICENSE.leveldb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The terms of disallowing bytedance are also deleted in &lt;a href=&#34;https://raw.githubusercontent.com/topling/toplingdb/memtable_as_log_index/LICENSE.Apache&#34;&gt;LICENSE.Apache&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/topling/toplingdb/memtable_as_log_index/COPYING&#34;&gt;COPYING&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/topling/toplingdb/memtable_as_log_index/LICENSE.leveldb&#34;&gt;LICENSE.leveldb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;RocksDB: A Persistent Key-Value Store for Flash and RAM Storage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/facebook/rocksdb&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/facebook/rocksdb.svg?style=svg&#34; alt=&#34;CircleCI Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;RocksDB is developed and maintained by Facebook Database Engineering Team. It is built on earlier work on &lt;a href=&#34;https://github.com/google/leveldb&#34;&gt;LevelDB&lt;/a&gt; by Sanjay Ghemawat (&lt;a href=&#34;mailto:sanjay@google.com&#34;&gt;sanjay@google.com&lt;/a&gt;) and Jeff Dean (&lt;a href=&#34;mailto:jeff@google.com&#34;&gt;jeff@google.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;This code is a library that forms the core building block for a fast key-value server, especially suited for storing data on flash drives. It has a Log-Structured-Merge-Database (LSM) design with flexible tradeoffs between Write-Amplification-Factor (WAF), Read-Amplification-Factor (RAF) and Space-Amplification-Factor (SAF). It has multi-threaded compactions, making it especially suitable for storing multiple terabytes of data in a single database.&lt;/p&gt; &#xA;&lt;p&gt;Start with example usage here: &lt;a href=&#34;https://github.com/facebook/rocksdb/tree/main/examples&#34;&gt;https://github.com/facebook/rocksdb/tree/main/examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/facebook/rocksdb/wiki&#34;&gt;github wiki&lt;/a&gt; for more explanation.&lt;/p&gt; &#xA;&lt;p&gt;The public interface is in &lt;code&gt;include/&lt;/code&gt;. Callers should not include or rely on the details of any other header files in this package. Those internal APIs may be changed without warning.&lt;/p&gt; &#xA;&lt;p&gt;Questions and discussions are welcome on the &lt;a href=&#34;https://www.facebook.com/groups/rocksdb.dev/&#34;&gt;RocksDB Developers Public&lt;/a&gt; Facebook group and &lt;a href=&#34;https://groups.google.com/g/rocksdb&#34;&gt;email list&lt;/a&gt; on Google Groups.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;RocksDB is dual-licensed under both the GPLv2 (found in the COPYING file in the root directory) and Apache 2.0 License (found in the LICENSE.Apache file in the root directory). You may select, at your option, one of the above-listed licenses.&lt;/p&gt;</summary>
  </entry>
</feed>