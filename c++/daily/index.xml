<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-13T01:32:06Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>raphaelradna/xenos</title>
    <updated>2023-02-13T01:32:06Z</updated>
    <id>tag:github.com,2023-02-13:/raphaelradna/xenos</id>
    <link href="https://github.com/raphaelradna/xenos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Xenos: Xenharmonic Stochastic Synthesizer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Xenos&lt;/h1&gt; &#xA;&lt;p&gt;Xenos is a virtual instrument plug-in that implements and extends the Dynamic Stochastic Synthesis (DSS) algorithm invented by Iannis Xenakis. Programmed in C++ with the JUCE framework, Xenos is open-source, cross-platform, and can be built in a number of plug-in formats.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raphaelradna/xenos/main/Extra/xenosInterface.png&#34; alt=&#34;&#34; title=&#34;The Xenos interface&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Key features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Authentic DSS engine&lt;/li&gt; &#xA; &lt;li&gt;Xenharmonic pitch quantizer&lt;/li&gt; &#xA; &lt;li&gt;Custom scale import in the &lt;a href=&#34;https://www.huygens-fokker.org/scala/&#34;&gt;Scala&lt;/a&gt; format&lt;/li&gt; &#xA; &lt;li&gt;Ten stochastic distributions with up to two parameters each&lt;/li&gt; &#xA; &lt;li&gt;First- and second-order random walks&lt;/li&gt; &#xA; &lt;li&gt;Variable number of segments per wave cycle&lt;/li&gt; &#xA; &lt;li&gt;Variable amplitude envelope&lt;/li&gt; &#xA; &lt;li&gt;Polyphonic (64 voices by default)&lt;/li&gt; &#xA; &lt;li&gt;MIDI implementation (notes, sustain, pitch bend)&lt;/li&gt; &#xA; &lt;li&gt;External MIDI controller assignment&lt;/li&gt; &#xA; &lt;li&gt;Parameter automation&lt;/li&gt; &#xA; &lt;li&gt;Simple and streamlined interface&lt;/li&gt; &#xA; &lt;li&gt;Free and open source&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Xenos was first presented to the Meta–Xenakis Global Symposium, and is the subject of a master’s degree from the Media Arts and Technology (MAT) program at UC Santa Barbara.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start Video&lt;/h2&gt; &#xA;&lt;p&gt;Watch the &lt;a href=&#34;https://youtu.be/ha5xsKm7MtE&#34;&gt;Quick Start video&lt;/a&gt; on YouTube.&lt;/p&gt; &#xA;&lt;h2&gt;Installation Notes&lt;/h2&gt; &#xA;&lt;p&gt;Xenos has been tested on macOS 10.14.6 and Windows 10 (64-bit).&lt;/p&gt; &#xA;&lt;h3&gt;Build from Source&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://juce.com/get-juce/download&#34;&gt;JUCE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone or download &lt;a href=&#34;https://github.com/raphaelradna/xenos/archive/refs/heads/main.zip&#34;&gt;Xenos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open Xenos.jucer in the Projucer&lt;/li&gt; &#xA; &lt;li&gt;Export the project for your IDE and platform, e.g., Xcode (macOS) or Visual Studio 2019 (Windows); see &lt;a href=&#34;https://docs.juce.com/master/tutorial_new_projucer_project.html&#34;&gt;here&lt;/a&gt; for more information&lt;/li&gt; &#xA; &lt;li&gt;Compile Xenos using your IDE (or make on Linux)&lt;/li&gt; &#xA; &lt;li&gt;Move the plug-in binary, e.g., Xenos.component or Xenos.vst3, to the proper location according to your platform, host software, and plug-in format &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;e.g., &lt;code&gt;/Macintosh HD/Library/Audio/Plug-Ins/Components&lt;/code&gt; (MacOS)&lt;/li&gt; &#xA;   &lt;li&gt;e.g., &lt;code&gt;C:\Program Files\Common Files\VST3&lt;/code&gt; (Windows)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open a suitable plug-in host application and add Xenos on a software instrument track&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Pre-Built Binaries&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest Xenos release from &lt;a href=&#34;https://github.com/raphaelradna/xenos/releases&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract the plug-in binary, i.e., Xenos.component or Xenos.vst3, and move it to the proper location according to your platform, host software, and plug-in format &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;e.g., &lt;code&gt;/Macintosh HD/Library/Audio/Plug-Ins/Components&lt;/code&gt; (MacOS)&lt;/li&gt; &#xA;   &lt;li&gt;e.g., &lt;code&gt;C:\Program Files\Common Files\VST3&lt;/code&gt; (Windows)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open a suitable plug-in host application and add Xenos on a software instrument track&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>gaoxiang12/slam_in_autonomous_driving</title>
    <updated>2023-02-13T01:32:06Z</updated>
    <id>tag:github.com,2023-02-13:/gaoxiang12/slam_in_autonomous_driving</id>
    <link href="https://github.com/gaoxiang12/slam_in_autonomous_driving" rel="alternate"></link>
    <summary type="html">&lt;p&gt;《自动驾驶中的SLAM技术》对应开源代码&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;SLAM in Autonomous Driving book (SAD book)&lt;/h2&gt; &#xA;&lt;p&gt;本书向读者系统介绍了惯性导航、组合导航、激光建图、激光定位、激光惯导里程计等知识。本仓库是书籍对应的源代码仓库，可以公开使用。&lt;/p&gt; &#xA;&lt;h2&gt;注意&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本书文本目前处于审阅状态。如果您希望成为本书的审稿人，请联系：gao.xiang.thu at gmail.com&lt;/li&gt; &#xA; &lt;li&gt;成为审稿人之后，您可以查阅本书每日更新的PDF稿件。同时，您需要在两个月内向我反馈您的意见。您可以通过github issue或邮件形式将意见发送给我。&lt;/li&gt; &#xA; &lt;li&gt;如果您有意向为本书写几句推荐语，也请联系我本人。推荐语会出现在本书前言部分或者书的封底部分。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;本书的内容编排&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;第1章，概述&lt;/li&gt; &#xA; &lt;li&gt;第2章，数学基础知识回顾，几何学、运动学、KF滤波器理论，矩阵李群&lt;/li&gt; &#xA; &lt;li&gt;第3章，误差状态卡尔曼滤波器，惯性导航、卫星导航、组合导航&lt;/li&gt; &#xA; &lt;li&gt;第4章，预积分，图优化，基于预积分的组合导航&lt;/li&gt; &#xA; &lt;li&gt;第5章，点云基础处理，各种最近邻结构，点云线性拟合&lt;/li&gt; &#xA; &lt;li&gt;第6章，2D激光建图，scan matching, 似然场，子地图，2D回环检测，pose graph&lt;/li&gt; &#xA; &lt;li&gt;第7章，3D激光建图，ICP，变种ICP，NDT，NDT LO, Loam-like LO，LIO松耦合&lt;/li&gt; &#xA; &lt;li&gt;第8章，紧耦合LIO，IESKF，预积分紧耦合LIO&lt;/li&gt; &#xA; &lt;li&gt;第9章，离线建图，前端，后端，批量回环检测，地图优化，切片导出&lt;/li&gt; &#xA; &lt;li&gt;第10章，融合定位，激光定位，初始化搜索，切片地图加载，EKF融合&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;本书的特点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在这本书里，您会复现许多激光SLAM中的经典算法和数据结构。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;您需要自己推导、实现一个误差状态卡尔曼滤波器(ESKF)，把IMU和GNSS的数据喂给它，看它如何推算自己的状态。&lt;/li&gt; &#xA;   &lt;li&gt;您还会用预积分系统实现一样的功能，然后对比它们的运行方式。&lt;/li&gt; &#xA;   &lt;li&gt;接下来您会实现一遍2D激光SLAM中的常见算法：扫描匹配、似然场、子地图，占据栅格，再用回环检测来构建一个更大的地图。这些都需要您自己来完成。&lt;/li&gt; &#xA;   &lt;li&gt;在激光SLAM中，您也会自己实现一遍Kd树，处理近似最近邻，然后用这个Kd树来实现ICP，点面ICP，讨论它们有什么可以改进的地方。&lt;/li&gt; &#xA;   &lt;li&gt;然后您会实现经典的NDT算法，测试它的配准性能，然后用它来搭建一个激光里程计。它比大部分现有LO快得多。&lt;/li&gt; &#xA;   &lt;li&gt;您也会实现一个点面ICP的激光里程计，它也非常快。它工作的方式类似于Loam，但更简单。&lt;/li&gt; &#xA;   &lt;li&gt;您会想要把IMU系统也放到激光里程计中。我们会实现松耦合和紧耦合的LIO系统。同样地，您需要推导一遍迭代卡尔曼滤波器和预积分图优化。&lt;/li&gt; &#xA;   &lt;li&gt;您需要把上面的系统改成离线运行的，让回环检测运行地充分一些。最后将它做成一个离线的建图系统。&lt;/li&gt; &#xA;   &lt;li&gt;最后，您可以对上述地图进行切分，然后用来做实时定位。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;本书的大部分实现都要比类似的算法库简单的多。您可以快速地理解它们的工作方式，不需要面对复杂的接口。&lt;/li&gt; &#xA; &lt;li&gt;本书会使用非常方便的并发编程。您会发现，本书的实现往往比现有算法更高效。当然这有一部分是历史原因造成的。&lt;/li&gt; &#xA; &lt;li&gt;本书每章都会配有动态演示，像这样：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gaoxiang12/slam_in_autonomous_driving/master/doc/lio_demo.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/gaoxiang12/slam_in_autonomous_driving/master/doc/2dmapping_demo.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/gaoxiang12/slam_in_autonomous_driving/master/doc/lo_demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;希望您能喜欢本书的极简风格，发现算法的乐趣所在。&lt;/p&gt; &#xA;&lt;h2&gt;数据集&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;数据集下载链接：&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;百度云链接: &lt;a href=&#34;https://pan.baidu.com/s/1ELOcF1UTKdfiKBAaXnE8sQ?pwd=feky&#34;&gt;https://pan.baidu.com/s/1ELOcF1UTKdfiKBAaXnE8sQ?pwd=feky&lt;/a&gt; 提取码: feky&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;包含以下数据集。总量较大(270GB)，请视自己硬盘容量下载。&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;UrbanLoco (ULHK，3D激光，道路场景)&lt;/li&gt; &#xA;   &lt;li&gt;NCLT (3D激光，RTK，校园场景)&lt;/li&gt; &#xA;   &lt;li&gt;WXB (3D激光，园区场景)&lt;/li&gt; &#xA;   &lt;li&gt;2dmapping (2D激光，商场场景)&lt;/li&gt; &#xA;   &lt;li&gt;AVIA (大疆固态激光)&lt;/li&gt; &#xA;   &lt;li&gt;UTBM (3D激光，道路场景)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;其他的内置数据&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;第3,4章使用文本格式的IMU，RTK数据&lt;/li&gt; &#xA;   &lt;li&gt;第7章使用了一部分EPFL的数据作为配准点云来源&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;您应该将上述数据下载至./dataset/sad/目录下，这样许多默认参数可以正常工作。如果不那么做，您也可以手动指定这些文件路径。如果您硬盘容量不足，可以将其他硬盘的目录软链至此处。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;编译&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本书推荐的编译环境是Ubuntu 20.04。更老的Ubuntu版本需要适配gcc编译器，主要是C++17标准。更新的Ubuntu则需要您自己安装对应的ROS版本。&lt;/li&gt; &#xA; &lt;li&gt;在编译本书代码之前，请编译安装本书thirdparty/下的三方库（如果您机器上没有安装的话）。&lt;/li&gt; &#xA; &lt;li&gt;之后，使用通常的cmake, make 方式就可以编译本书所有内容了。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO项&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;将UI里的不必要信息去除&lt;/li&gt; &#xA; &lt;li&gt;整理数据集&lt;/li&gt; &#xA; &lt;li&gt;去除不必要的msg定义(尽量使用ros标准消息)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;NOTES&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[已确认] ULHK的IMU似乎和别家的不一样，已经去了gravity&lt;/li&gt; &#xA; &lt;li&gt;[已确认] NCLT的IMU在转包的时候转成了Lidar系，于是Lidar与IMU之间没有旋转的外参（本来Lidar是转了90度的），现在Lidar是X左Y后Z下，原车是X前Y右Z下。本书使用的NCLT数据均基于点云系, IMU的杆臂被忽略。&lt;/li&gt; &#xA; &lt;li&gt;[已确认] NCLT的rtk fix并不是非常稳定，平均误差在米级&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mixxxdj/mixxx</title>
    <updated>2023-02-13T01:32:06Z</updated>
    <id>tag:github.com,2023-02-13:/mixxxdj/mixxx</id>
    <link href="https://github.com/mixxxdj/mixxx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mixxx is Free DJ software that gives you everything you need to perform live mixes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mixxx&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mixxx.org/download&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/mixxxdj/mixxx.svg?sanitize=true&#34; alt=&#34;GitHub latest tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/metapackage/mixxx/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/mixxx.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mixxxdj/mixxx/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/mixxxdj/mixxx/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/mixxxdj/mixxx&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/mixxxdj/mixxx/badge.svg?sanitize=true&#34; alt=&#34;Coverage status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mixxx.zulipchat.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/zulip-join_chat-brightgreen.svg?sanitize=true&#34; alt=&#34;Zulip chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mixxx.org/donate&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mixxx.org&#34;&gt;Mixxx&lt;/a&gt; is Free DJ software that gives you everything you need to perform live DJ mixes. Mixxx works on GNU/Linux, Windows, and macOS.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;To get started with Mixxx:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;For live use, &lt;a href=&#34;https://mixxx.org/download/#stable&#34;&gt;download the latest stable version&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For experimentation and testing, &lt;a href=&#34;https://mixxx.org/download/#testing&#34;&gt;download a development release&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To live on the bleeding edge, clone the repo: &lt;code&gt;git clone https://github.com/mixxxdj/mixxx.git&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Bug tracker&lt;/h2&gt; &#xA;&lt;p&gt;The Mixxx team uses &lt;a href=&#34;https://github.com/mixxxdj/mixxx/issues&#34;&gt;Github Issues&lt;/a&gt; to manage Mixxx development.&lt;/p&gt; &#xA;&lt;p&gt;Have a bug or feature request? &lt;a href=&#34;https://github.com/mixxxdj/mixxx/issues/new/choose&#34;&gt;File a bug on Github&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Want to get involved in Mixxx development? Assign yourself a bug from the &lt;a href=&#34;https://github.com/mixxxdj/mixxx/issues?q=is%3Aopen+is%3Aissue+label%3Aeasy&#34;&gt;easy bug list&lt;/a&gt; and get started!&lt;/p&gt; &#xA;&lt;h2&gt;Building Mixxx&lt;/h2&gt; &#xA;&lt;p&gt;First, open a terminal (on Windows, use &#34;x64 Native Tools Command Prompt for &lt;a href=&#34;https://docs.microsoft.com/visualstudio/install/install-visual-studio?view=vs-2019&#34;&gt;VS 2019&lt;/a&gt;&#34;), download the mixxx source code and navigate to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/mixxxdj/mixxx.git&#xA;$ cd mixxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fetch the required dependencies and set up the build environment (on Windows, macOS and Debian/Ubuntu, you can do that by running &lt;code&gt;tools\windows_buildenv.bat&lt;/code&gt;, &lt;code&gt;source tools/macos_buildenv.sh setup&lt;/code&gt; or &lt;code&gt;source tools/debian_buildenv.sh setup&lt;/code&gt; respectively), then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir build&#xA;$ cd build&#xA;$ cmake ..&#xA;$ cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There should now be a &lt;code&gt;mixxx&lt;/code&gt; executable in the current directory that you can run. Alternatively, can generate a package using &lt;code&gt;cpack&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For help using Mixxx, there are a variety of options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://manual.mixxx.org/&#34;&gt;Mixxx manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mixxxdj/mixxx/wiki&#34;&gt;Mixxx wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mixxxdj/mixxx/wiki/Faq&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://manual.mixxx.org/2.3/en/hardware/manuals.html&#34;&gt;Hardware Compatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mixxx.org/wiki/doku.php/Creating-Skins&#34;&gt;Creating Skins&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;Help to spread Mixxx with translations into more languages, as well as to update and ensure the accuracy of existing translations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.transifex.com/projects/p/mixxxdj&#34;&gt;Help translate content&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mixxxdj/mixxx/wiki/Internationalization&#34;&gt;Mixxx i18n wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mixxx.discourse.group/c/translation/13&#34;&gt;Mixxx localization forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.transifex.com/projects/p/mixxxdj/glossary/l/en/&#34;&gt;Mixxx glossary&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Mixxx is a vibrant community of hackers, DJs and artists. To keep track of development and community news:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat with us on &lt;a href=&#34;https://mixxx.zulipchat.com/&#34;&gt;Zulip&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow us on &lt;a href=&#34;https://twitter.com/mixxxdj&#34;&gt;Twitter&lt;/a&gt; and &lt;a href=&#34;https://www.facebook.com/pages/Mixxx-DJ-Software/21723485212&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Subscribe to the &lt;a href=&#34;https://mixxx.org/news/&#34;&gt;Mixxx Blog&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Post on the &lt;a href=&#34;https://mixxx.discourse.group/&#34;&gt;Mixxx forums&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Mixxx is released under the GPLv2. See the LICENSE file for a full copy of the license.&lt;/p&gt;</summary>
  </entry>
</feed>