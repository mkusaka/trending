<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-07T01:25:29Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jinyus/related_post_gen</title>
    <updated>2023-10-07T01:25:29Z</updated>
    <id>tag:github.com,2023-10-07:/jinyus/related_post_gen</id>
    <link href="https://github.com/jinyus/related_post_gen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Data Processing benchmark featuring Rust, Go, Swift, Zig etc.&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Problem:&lt;/h3&gt; &#xA;&lt;p&gt;Given a list of posts, compute the top 5 related posts for each post based on the number of shared tags.&lt;/p&gt; &#xA;&lt;h2&gt;Steps:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the posts JSON file.&lt;/li&gt; &#xA; &lt;li&gt;Iterate over the posts and populate a map containing: &lt;code&gt;tag -&amp;gt; List&amp;lt;int&amp;gt;&lt;/code&gt;, with the int representing the post index of each post with that tag.&lt;/li&gt; &#xA; &lt;li&gt;Iterate over the posts and for each post: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create a map: &lt;code&gt;PostIndex -&amp;gt; int&lt;/code&gt; to track the number of shared tags&lt;/li&gt; &#xA;   &lt;li&gt;For each tag, Iterate over the posts that have that tag&lt;/li&gt; &#xA;   &lt;li&gt;For each post, increment the shared tag count in the map.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Sort the related posts by the number of shared tags.&lt;/li&gt; &#xA; &lt;li&gt;Write the top 5 related posts for each post to a new JSON file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run Benchmark&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run.sh go | rust | python | all&#xA;&#xA;# windows (powershell)&#xA;./run.ps1 go | rust | python | all&#xA;&#xA;or&#xA;pwsh ./run.ps1 go | rust | python | all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Rules &lt;/summary&gt; &#xA; &lt;h3&gt;No:&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;FFI (including assembly inlining)&lt;/li&gt; &#xA;  &lt;li&gt;Unsafe code blocks&lt;/li&gt; &#xA;  &lt;li&gt;Custom benchmarking&lt;/li&gt; &#xA;  &lt;li&gt;Disabling runtime checks (bounds etc)&lt;/li&gt; &#xA;  &lt;li&gt;Specific hardware targeting&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Must:&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Parse json at runtime&lt;/li&gt; &#xA;  &lt;li&gt;Not hardcode number of posts&lt;/li&gt; &#xA;  &lt;li&gt;Support up to 100 tags&lt;/li&gt; &#xA;  &lt;li&gt;Use a stable release of the compiler/runtime&lt;/li&gt; &#xA;  &lt;li&gt;Represent tags as strings&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Updated Results from github workflow (&lt;a href=&#34;https://github.com/jinyus/related_post_gen/raw/main/raw_results.md&#34;&gt;raw data&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; VM Specs &lt;/summary&gt; NB: The benchmark runs on the free tier of github workflow. &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;CPU: 2 vCPUs&lt;/li&gt; &#xA;  &lt;li&gt;RAM: 7GB&lt;/li&gt; &#xA;  &lt;li&gt;OS: Ubuntu 22.04&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources&#34;&gt;Source&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Processing Time&lt;/th&gt; &#xA;   &lt;th&gt;Total (PT + I/O)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;26.39 ms&lt;/td&gt; &#xA;   &lt;td&gt;58.1 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zig&lt;/td&gt; &#xA;   &lt;td&gt;38.00 ms&lt;/td&gt; &#xA;   &lt;td&gt;79.5 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;38.91 ms&lt;/td&gt; &#xA;   &lt;td&gt;56.7 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java (GraalVM)&lt;/td&gt; &#xA;   &lt;td&gt;40.00 ms&lt;/td&gt; &#xA;   &lt;td&gt;70.4 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Julia&lt;/td&gt; &#xA;   &lt;td&gt;42.67 ms&lt;/td&gt; &#xA;   &lt;td&gt;2.717 s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F#&lt;/td&gt; &#xA;   &lt;td&gt;45.86 ms&lt;/td&gt; &#xA;   &lt;td&gt;304.2 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Odin&lt;/td&gt; &#xA;   &lt;td&gt;46.52 ms&lt;/td&gt; &#xA;   &lt;td&gt;294.3 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nim&lt;/td&gt; &#xA;   &lt;td&gt;56.00 ms&lt;/td&gt; &#xA;   &lt;td&gt;85.6 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vlang&lt;/td&gt; &#xA;   &lt;td&gt;59.34 ms&lt;/td&gt; &#xA;   &lt;td&gt;400.6 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift&lt;/td&gt; &#xA;   &lt;td&gt;65.42 ms&lt;/td&gt; &#xA;   &lt;td&gt;442.3 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crystal&lt;/td&gt; &#xA;   &lt;td&gt;68.53 ms&lt;/td&gt; &#xA;   &lt;td&gt;126.0 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;73.48 ms&lt;/td&gt; &#xA;   &lt;td&gt;283.7 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dart VM&lt;/td&gt; &#xA;   &lt;td&gt;103.75 ms&lt;/td&gt; &#xA;   &lt;td&gt;573.1 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LuaJIT&lt;/td&gt; &#xA;   &lt;td&gt;118.00 ms&lt;/td&gt; &#xA;   &lt;td&gt;400.1 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dart AOT&lt;/td&gt; &#xA;   &lt;td&gt;141.38 ms&lt;/td&gt; &#xA;   &lt;td&gt;283.8 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JS (Deno)&lt;/td&gt; &#xA;   &lt;td&gt;183.20 ms&lt;/td&gt; &#xA;   &lt;td&gt;272.4 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JS (Node)&lt;/td&gt; &#xA;   &lt;td&gt;202.20 ms&lt;/td&gt; &#xA;   &lt;td&gt;278.4 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java (JIT)&lt;/td&gt; &#xA;   &lt;td&gt;256.69 ms&lt;/td&gt; &#xA;   &lt;td&gt;548.1 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Numpy&lt;/td&gt; &#xA;   &lt;td&gt;0.41 s&lt;/td&gt; &#xA;   &lt;td&gt;640.1 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JS (Bun)&lt;/td&gt; &#xA;   &lt;td&gt;764.40 ms&lt;/td&gt; &#xA;   &lt;td&gt;838.6 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;   &lt;td&gt;2362.72 ms&lt;/td&gt; &#xA;   &lt;td&gt;3.037 s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;2.83 s&lt;/td&gt; &#xA;   &lt;td&gt;2.904 s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Multicore Results&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Processing Time&lt;/th&gt; &#xA;   &lt;th&gt;Total (PT + I/O)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go Concurrent&lt;/td&gt; &#xA;   &lt;td&gt;18.89 ms&lt;/td&gt; &#xA;   &lt;td&gt;49.6 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust Concurrent&lt;/td&gt; &#xA;   &lt;td&gt;23.64 ms&lt;/td&gt; &#xA;   &lt;td&gt;41.8 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift Concurrent&lt;/td&gt; &#xA;   &lt;td&gt;40.02 ms&lt;/td&gt; &#xA;   &lt;td&gt;421.3 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F# Concurrent&lt;/td&gt; &#xA;   &lt;td&gt;40.57 ms&lt;/td&gt; &#xA;   &lt;td&gt;854.3 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Old Results with details (on my machine) &lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Language&lt;/th&gt; &#xA;    &lt;th&gt;Processing Time&lt;/th&gt; &#xA;    &lt;th&gt;Total (+ I/O)&lt;/th&gt; &#xA;    &lt;th&gt;Details&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Rust&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;4.5s&lt;/td&gt; &#xA;    &lt;td&gt;Initial&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Rust v2&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;2.60s&lt;/td&gt; &#xA;    &lt;td&gt;Replace std HashMap with fxHashMap by &lt;a href=&#34;https://www.reddit.com/r/rust/comments/16plgok/comment/k1rtr4x/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&#34;&gt;phazer99&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Rust v3&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;1.28s&lt;/td&gt; &#xA;    &lt;td&gt;Preallocate and reuse map and unstable sort by &lt;a href=&#34;https://www.reddit.com/r/rust/comments/16plgok/comment/k1rzo7g/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&#34;&gt;vdrmn&lt;/a&gt; and &lt;a href=&#34;https://www.reddit.com/r/rust/comments/16plgok/comment/k1rzwdx/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&#34;&gt;Darksonn&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Rust v4&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;0.13s&lt;/td&gt; &#xA;    &lt;td&gt;Use Post index as key instead of Pointer and Binary Heap by &lt;a href=&#34;https://www.reddit.com/r/rust/comments/16plgok/comment/k1s5ea0/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&#34;&gt;RB5009&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Rust v5&lt;/td&gt; &#xA;    &lt;td&gt;38ms&lt;/td&gt; &#xA;    &lt;td&gt;52ms&lt;/td&gt; &#xA;    &lt;td&gt;Rm hashing from loop and use vec[count] instead of map[index]count by RB5009&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Rust v6&lt;/td&gt; &#xA;    &lt;td&gt;23ms&lt;/td&gt; &#xA;    &lt;td&gt;36ms&lt;/td&gt; &#xA;    &lt;td&gt;Optimized Binary Heap Ops by &lt;a href=&#34;https://github.com/jinyus/related_post_gen/pull/12&#34;&gt;scottlamb&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Rust Rayon&lt;/td&gt; &#xA;    &lt;td&gt;9ms&lt;/td&gt; &#xA;    &lt;td&gt;22ms&lt;/td&gt; &#xA;    &lt;td&gt;Parallelize by &lt;a href=&#34;https://github.com/jinyus/related_post_gen/pull/4&#34;&gt;masmullin2000&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Rust Rayon&lt;/td&gt; &#xA;    &lt;td&gt;8ms&lt;/td&gt; &#xA;    &lt;td&gt;22ms&lt;/td&gt; &#xA;    &lt;td&gt;Remove comparison out of hot loop&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Go&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;1.5s&lt;/td&gt; &#xA;    &lt;td&gt;Initial&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Go v2&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;80ms&lt;/td&gt; &#xA;    &lt;td&gt;Add rust optimizations&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Go v3&lt;/td&gt; &#xA;    &lt;td&gt;56ms&lt;/td&gt; &#xA;    &lt;td&gt;70ms&lt;/td&gt; &#xA;    &lt;td&gt;Use goccy/go-json&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Go v3&lt;/td&gt; &#xA;    &lt;td&gt;34ms&lt;/td&gt; &#xA;    &lt;td&gt;55ms&lt;/td&gt; &#xA;    &lt;td&gt;Use generic binaryheap by &lt;a href=&#34;https://github.com/jinyus/related_post_gen/pull/7&#34;&gt;DrBlury&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Go v4&lt;/td&gt; &#xA;    &lt;td&gt;26ms&lt;/td&gt; &#xA;    &lt;td&gt;50ms&lt;/td&gt; &#xA;    &lt;td&gt;Replace binary heap with custom priority queue&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Go v5&lt;/td&gt; &#xA;    &lt;td&gt;20ms&lt;/td&gt; &#xA;    &lt;td&gt;43ms&lt;/td&gt; &#xA;    &lt;td&gt;Remove comparison out of hot loop&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Go Con&lt;/td&gt; &#xA;    &lt;td&gt;10ms&lt;/td&gt; &#xA;    &lt;td&gt;33ms&lt;/td&gt; &#xA;    &lt;td&gt;Go concurrency by &lt;a href=&#34;https://github.com/jinyus/related_post_gen/pull/17&#34;&gt;tirprox&lt;/a&gt; and &lt;a href=&#34;https://github.com/jinyus/related_post_gen/pull/8&#34;&gt;DrBlury&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Go Con v2&lt;/td&gt; &#xA;    &lt;td&gt;5ms&lt;/td&gt; &#xA;    &lt;td&gt;29ms&lt;/td&gt; &#xA;    &lt;td&gt;Use arena, use waitgroup, rm binheap by &lt;a href=&#34;https://github.com/jinyus/related_post_gen/pull/20&#34;&gt;DrBlury&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Python&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;7.81s&lt;/td&gt; &#xA;    &lt;td&gt;Initial&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Python v2&lt;/td&gt; &#xA;    &lt;td&gt;1.35s&lt;/td&gt; &#xA;    &lt;td&gt;1.53s&lt;/td&gt; &#xA;    &lt;td&gt;Add rust optimizations by &lt;a href=&#34;https://github.com/jinyus/related_post_gen/pull/10&#34;&gt;dave-andersen&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Numpy&lt;/td&gt; &#xA;    &lt;td&gt;0.57s&lt;/td&gt; &#xA;    &lt;td&gt;0.85s&lt;/td&gt; &#xA;    &lt;td&gt;Numpy implementation by &lt;a href=&#34;https://github.com/jinyus/related_post_gen/pull/11&#34;&gt;Copper280z&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Crystal&lt;/td&gt; &#xA;    &lt;td&gt;50ms&lt;/td&gt; &#xA;    &lt;td&gt;96ms&lt;/td&gt; &#xA;    &lt;td&gt;Inital w/ previous optimizations&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Crystal v2&lt;/td&gt; &#xA;    &lt;td&gt;33ms&lt;/td&gt; &#xA;    &lt;td&gt;72ms&lt;/td&gt; &#xA;    &lt;td&gt;Replace binary heap with custom priority queue&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Odin&lt;/td&gt; &#xA;    &lt;td&gt;110ms&lt;/td&gt; &#xA;    &lt;td&gt;397ms&lt;/td&gt; &#xA;    &lt;td&gt;Ported from golang code&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Odin v2&lt;/td&gt; &#xA;    &lt;td&gt;104ms&lt;/td&gt; &#xA;    &lt;td&gt;404ms&lt;/td&gt; &#xA;    &lt;td&gt;Remove comparison out of hot loop&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Dart VM&lt;/td&gt; &#xA;    &lt;td&gt;125ms&lt;/td&gt; &#xA;    &lt;td&gt;530ms&lt;/td&gt; &#xA;    &lt;td&gt;Ported frog golang code&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Dart bin&lt;/td&gt; &#xA;    &lt;td&gt;274ms&lt;/td&gt; &#xA;    &lt;td&gt;360ms&lt;/td&gt; &#xA;    &lt;td&gt;Compiled executable&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Vlang&lt;/td&gt; &#xA;    &lt;td&gt;339ms&lt;/td&gt; &#xA;    &lt;td&gt;560ms&lt;/td&gt; &#xA;    &lt;td&gt;Ported from golang code&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;    &lt;td&gt;⠀&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Zig&lt;/td&gt; &#xA;    &lt;td&gt;80ms&lt;/td&gt; &#xA;    &lt;td&gt;110ms&lt;/td&gt; &#xA;    &lt;td&gt;Provided by &lt;a href=&#34;https://github.com/jinyus/related_post_gen/pull/30&#34;&gt;akhildevelops&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>luigifreda/slamplay</title>
    <updated>2023-10-07T01:25:29Z</updated>
    <id>tag:github.com,2023-10-07:/luigifreda/slamplay</id>
    <link href="https://github.com/luigifreda/slamplay" rel="alternate"></link>
    <summary type="html">&lt;p&gt;slamplay is a collection of powerful tools to start playing and experimenting with SLAM in C++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;slamplay&lt;/h1&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/#slamplay&#34;&gt;slamplay&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/#1-quick-start&#34;&gt;1. Quick start&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/#2-eigen-tutorials&#34;&gt;2. Eigen Tutorials&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/#3-back-end&#34;&gt;3. Back-end&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/#31-gtsam-examples&#34;&gt;3.1. GTSAM examples&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/#32-ceres-examples&#34;&gt;3.2. Ceres examples&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/#33-g2o-examples&#34;&gt;3.3. g2o examples&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/#4-front-end&#34;&gt;4. Front-end&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/#5-io&#34;&gt;5. IO&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/#51-chrono&#34;&gt;5.1. chrono&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/#6-credits&#34;&gt;6. Credits&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;p&gt;&lt;strong&gt;slamplay&lt;/strong&gt; is a collection of powerful tools to start playing and experimenting with &lt;strong&gt;SLAM in C++&lt;/strong&gt;. It&#39;s a work in progress. It installs and makes available in a single cmake framework some of the most important&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;back-end frameworks (&lt;em&gt;g2o&lt;/em&gt;, &lt;em&gt;gtsam&lt;/em&gt;, &lt;em&gt;ceres&lt;/em&gt;, &lt;em&gt;se-sync&lt;/em&gt;, etc.),&lt;/li&gt; &#xA; &lt;li&gt;front-end tools (&lt;em&gt;opencv&lt;/em&gt;, &lt;em&gt;pcl&lt;/em&gt;, etc.),&lt;/li&gt; &#xA; &lt;li&gt;algebra and geometry libs (&lt;em&gt;eigen&lt;/em&gt;, &lt;em&gt;sophus&lt;/em&gt;, &lt;em&gt;cholmod&lt;/em&gt;, etc.),&lt;/li&gt; &#xA; &lt;li&gt;viz tools (&lt;em&gt;pangolin&lt;/em&gt;, &lt;em&gt;imgui&lt;/em&gt;, etc.),&lt;/li&gt; &#xA; &lt;li&gt;loop-closure frameworks (&lt;em&gt;DBOW3&lt;/em&gt;, &lt;em&gt;iBOW&lt;/em&gt;, etc.),&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;along with some nice examples in order to easily and quickly start with all these tools.&lt;/p&gt; &#xA;&lt;p&gt;I created &lt;strong&gt;slamplay&lt;/strong&gt; for a computer vision class I recently taught. I started developing it for fun, during my free time, taking inspiration from some repos available on the web.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/images/kitti-VO.png&#34; alt=&#34;KITTI visual odometry&#34; height=&#34;180&#34; border=&#34;1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/images/euroc-VO.png&#34; alt=&#34;EUROC VO&#34; height=&#34;180&#34; border=&#34;1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/images/direct-method.png&#34; alt=&#34;KITTI direct method for feature tracking&#34; height=&#34;180&#34; border=&#34;1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/images/clouds-viz.png&#34; alt=&#34;Pointcloud visulization&#34; height=&#34;180&#34; border=&#34;1&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This repository is structured in the following main folders (with self-explanatory names):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;algebra_geometry&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;backend&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dense_mapping&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;frontend&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;full_slam&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;loop_closure&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dense_mapping&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;utils&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;viz&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1. Quick start&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install basic dependencies:&lt;br&gt; &lt;code&gt;$ ./install_dependencies.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install OpenCV in a local folder:&lt;br&gt; &lt;code&gt;$ ./install_local_opencv.sh&lt;/code&gt;&lt;br&gt; (if you want, skip this step and set the variable &lt;code&gt;OpenCV_DIR&lt;/code&gt; in &lt;code&gt;config.sh&lt;/code&gt; with your local OpenCV path)&lt;/li&gt; &#xA; &lt;li&gt;Build the framework:&lt;br&gt; &lt;code&gt;$ ./build.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once everything is built, you can enter in the &lt;code&gt;build&lt;/code&gt; folder and test the different examples. In particular, you can enter in the &lt;code&gt;full_slam&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;configure the file &lt;code&gt;config/kitti.yaml&lt;/code&gt; (or &lt;code&gt;config/euroc.yaml&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;and run the VO app &lt;code&gt;app/run_kitti_stereo&lt;/code&gt; (or &lt;code&gt;app/run_euroc_stereo&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2. Eigen Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;See the nice &lt;a href=&#34;https://raw.githubusercontent.com/luigifreda/slamplay/master/docs/Eigen-AsciiQuickReference.txt&#34;&gt;ascii quick reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eigen.tuxfamily.org/dox/group__QuickRefPage.html&#34;&gt;Quick reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eigen.tuxfamily.org/dox/group__DenseMatrixManipulation__chapter.html&#34;&gt;Dense matrix manipulation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eigen.tuxfamily.org/dox/group__DenseLinearSolvers__chapter.html&#34;&gt;Dense linear problems and decompositions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eigen.tuxfamily.org/dox/group__Sparse__chapter.html&#34;&gt;Sparse linear algebra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eigen.tuxfamily.org/dox/group__Geometry__chapter.html&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3. Back-end&lt;/h2&gt; &#xA;&lt;p&gt;Some notes about the back-end frameworks.&lt;/p&gt; &#xA;&lt;h3&gt;3.1. GTSAM examples&lt;/h3&gt; &#xA;&lt;p&gt;Installed tag &lt;strong&gt;4.2a9&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/borglab/gtsam/tree/4.2a9/examples&#34;&gt;https://github.com/borglab/gtsam/tree/4.2a9/examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Documentation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gtsam.org/docs/&#34;&gt;https://gtsam.org/docs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gtsam.org/tutorials/intro.html&#34;&gt;https://gtsam.org/tutorials/intro.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;See &lt;code&gt;docs&lt;/code&gt; folder for further documentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;ISSUES&lt;/strong&gt; Apparently, in order to avoid &lt;em&gt;double free or corruption&lt;/em&gt; errors with gtsam on exit, we need to disable the compile option &lt;code&gt;-march=native&lt;/code&gt; when building apps that use gtsam. This can be done locally by modifying the compile flags at the folder level and removing march native optimization for gtsam-related files. Further details are in the following links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/gtborg/gtsam/issues/414/compiling-with-march-native-results-in&#34;&gt;https://bitbucket.org/gtborg/gtsam/issues/414/compiling-with-march-native-results-in&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/g/gtsam-users/c/jdySXchYVQg&#34;&gt;https://groups.google.com/g/gtsam-users/c/jdySXchYVQg&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3.2. Ceres examples&lt;/h3&gt; &#xA;&lt;p&gt;Installed tag 2.1.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ceres-solver.googlesource.com/ceres-solver/+/refs/tags/2.1.0/examples/&#34;&gt;https://ceres-solver.googlesource.com/ceres-solver/+/refs/tags/2.1.0/examples/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Documentation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ceres-solver.org/tutorial.html&#34;&gt;http://ceres-solver.org/tutorial.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;See &lt;code&gt;docs&lt;/code&gt; folder for further documentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3.3. g2o examples&lt;/h3&gt; &#xA;&lt;p&gt;Installed tag &lt;em&gt;20230223_git&lt;/em&gt;. See related &lt;a href=&#34;https://github.com/RainerKuemmerle/g2o/tree/20230223_git/g2o/examples&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Issues:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The built g2o-dependant binaries link to the system g2o (instead of the locally compiled and installed g2o) and this brings to crashes (a different g2o version is linked). There are different solutions to this problem: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Standard one (uncomfortable): use &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; to make the built binaries correctly link to the locally compiled and installed g2o.&lt;/li&gt; &#xA;   &lt;li&gt;Otherwise, we can use and set &lt;code&gt;RPATH&lt;/code&gt; (instead of &lt;code&gt;RUNPATH&lt;/code&gt;) at build time. In particular, this can be done by using some compiler options. This is what I set in my cmake configuration: &lt;code&gt;set(MY_FLAGS &#34;${MY_FLAGS} -Wl,--disable-new-dtags&#34;)&lt;/code&gt; &lt;a href=&#34;https://stackoverflow.com/questions/47117443/dynamic-linking-with-rpath-not-working-under-ubuntu-17-10&#34;&gt;https://stackoverflow.com/questions/47117443/dynamic-linking-with-rpath-not-working-under-ubuntu-17-10&lt;/a&gt; This configuration is enabled/disabled by the cmake option flag &lt;code&gt;SET_RPATH&lt;/code&gt; I added.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you get a &lt;em&gt;double free or corruption&lt;/em&gt; error with g2o (on exit), then it is very likely you used &lt;code&gt;-march=native&lt;/code&gt; option when compiling this project but you didn&#39;t use the same option for building g2o itself. This may cause some alignment inconsistencies between g2o and this project. Then, in that case, build g2o with &lt;code&gt;-march=native&lt;/code&gt; (i.e. use the cmake option &lt;code&gt;-DBUILD_WITH_MARCH_NATIVE=ON&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4. Front-end&lt;/h2&gt; &#xA;&lt;h2&gt;5. IO&lt;/h2&gt; &#xA;&lt;h3&gt;5.1. chrono&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.modernescpp.com/index.php/the-three-clocks&#34;&gt;https://www.modernescpp.com/index.php/the-three-clocks&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Differences amongst the three different clocks?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;std::chrono::sytem_clock&lt;/strong&gt;: This is the system-wide real-time clock (wall-clock). The clock has the auxiliary functions to_time_t and from_time_t to convert time points into dates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;std::chrono::steady_clock&lt;/strong&gt;: Provides as only a clock the guarantee that you can not adjust it. Therefore, std::chrono::steady_clock is the preferred clock to wait for a time duration or until a time point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;std::chrono::high_resolution_clock&lt;/strong&gt;: This is the clock with the highest accuracy, but it can be a synonym for the clock&#39;s std::chrono::system_clock or std::chrono::steady_clock.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The C++ standard provides no guarantee about the clocks&#39; accuracy, starting point, or valid time range. Typically, the starting point of std::chrono:system_clock is the 1.1.1970, the so-called UNIX-epoch. For std::chrono::steady_clock, typically the boot time of your PC.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What is the difference between steady_clock vs system_clock in layman terms?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re holding a &lt;em&gt;system_clock&lt;/em&gt; in your hand, you would call it a watch, and it would tell you what time it is.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re holding a &lt;em&gt;steady_clock&lt;/em&gt; in your hand, you would call it a stopwatch, and it would tell you how fast someone ran a lap, but it would not tell you what time it is.&lt;/p&gt; &#xA;&lt;h2&gt;6. Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This repo imported some of the C++ examples (updated, improved, and commented) of the repository &lt;a href=&#34;https://github.com/gaoxiang12/slambook2&#34;&gt;https://github.com/gaoxiang12/slambook2&lt;/a&gt;. Thanks to the Author for his great work.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to the Author of the repository &lt;a href=&#34;https://github.com/nicolov/simple_slam_loop_closure/&#34;&gt;https://github.com/nicolov/simple_slam_loop_closure/&lt;/a&gt;. I imported a couple of scripts (updated and improved) from his repository (for computing the confusion matrix).&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>espressif/arduino-esp32</title>
    <updated>2023-10-07T01:25:29Z</updated>
    <id>tag:github.com,2023-10-07:/espressif/arduino-esp32</id>
    <link href="https://github.com/espressif/arduino-esp32" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Arduino core for the ESP32&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Arduino core for the ESP32, ESP32-S2, ESP32-S3, ESP32-C3, ESP32-C6 and ESP32-H2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/espressif/arduino-esp32/workflows/ESP32%20Arduino%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.com/projects/espressif-arduino-esp32/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/actions/workflows/lib.yml?link=http://https://github.com/espressif/arduino-esp32/raw/master/LIBRARIES_TEST.md&#34;&gt;&lt;img src=&#34;https://github.com/espressif/arduino-esp32/actions/workflows/lib.yml/badge.svg?branch=master&amp;amp;event=schedule&#34; alt=&#34;External Libraries Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Need help or have a question? Join the chat at &lt;a href=&#34;https://gitter.im/espressif/arduino-esp32&#34;&gt;Gitter&lt;/a&gt; or &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions&#34;&gt;open a new Discussion&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#development-status&#34;&gt;Development Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#development-planning&#34;&gt;Development Planning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#supported-chips&#34;&gt;Supported Chips&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#decoding-exceptions&#34;&gt;Decoding exceptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#issuebug-report-template&#34;&gt;Issue/Bug report template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development Status&lt;/h3&gt; &#xA;&lt;p&gt;Latest Stable Release &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/espressif/arduino-esp32/latest/total.svg?style=plastic&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest Development Release &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/espressif/arduino-esp32/all.svg?style=plastic&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date-pre/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads-pre/espressif/arduino-esp32/latest/total.svg?style=plastic&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Development Planning&lt;/h3&gt; &#xA;&lt;p&gt;Our Development is fully tracked on this public &lt;strong&gt;&lt;a href=&#34;https://github.com/orgs/espressif/projects/3&#34;&gt;Roadmap 🎉&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For even more information you can take a look at &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions/categories/sprints-meeting-notes&#34;&gt;Sprint Meeting notes&lt;/a&gt; or join &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions/categories/monthly-community-meetings&#34;&gt;Monthly Community Meetings 🔔&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/&#34;&gt;Arduino-ESP32 Online Documentation&lt;/a&gt; to get all information about this project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html&#34;&gt;Installing (Windows, Linux and macOS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/libraries.html&#34;&gt;Libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/esp-idf_component.html&#34;&gt;Arduino as an ESP-IDF component&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/troubleshooting.html&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Chips&lt;/h3&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html#supported-soc-s&#34;&gt;supported chips&lt;/a&gt; documentation to see the list of current supported ESP32 SoCs.&lt;/p&gt; &#xA;&lt;h3&gt;Decoding exceptions&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/me-no-dev/EspExceptionDecoder&#34;&gt;EspExceptionDecoder&lt;/a&gt; to get meaningful call trace.&lt;/p&gt; &#xA;&lt;h3&gt;Issue/Bug report template&lt;/h3&gt; &#xA;&lt;p&gt;Before reporting an issue, make sure you&#39;ve searched for similar one that was already created. Also make sure to go through all the issues labelled as &lt;a href=&#34;https://github.com/espressif/arduino-esp32/issues?q=is%3Aissue+label%3A%22Type%3A+For+reference%22+&#34;&gt;Type: For reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, if you are sure no one else had the issue, follow the &lt;strong&gt;Issue template&lt;/strong&gt; or &lt;strong&gt;Feature request template&lt;/strong&gt; while reporting any &lt;a href=&#34;https://github.com/espressif/arduino-esp32/issues/new/choose&#34;&gt;new Issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;External libraries compilation test&lt;/h3&gt; &#xA;&lt;p&gt;We have set-up CI testing for external libraries for ESP32 Arduino core. You can check test results in the file &lt;a href=&#34;https://github.com/espressif/arduino-esp32/raw/gh-pages/LIBRARIES_TEST.md&#34;&gt;LIBRARIES_TEST&lt;/a&gt;. For more information and how to add your library to the test see &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/external_libraries_test.html&#34;&gt;external library testing&lt;/a&gt; in the documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We welcome contributions to the Arduino ESP32 project!&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/contributing.html&#34;&gt;contributing&lt;/a&gt; in the documentation for more information on how to contribute to the project.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We would like to have this repository in a polite and friendly atmosphere, so please be kind and respectful to others. For more details, look at &lt;a href=&#34;https://github.com/espressif/arduino-esp32/raw/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>