<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-03T01:30:51Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>s60sc/ESP32-CAM_MJPEG2SD</title>
    <updated>2023-05-03T01:30:51Z</updated>
    <id>tag:github.com,2023-05-03:/s60sc/ESP32-CAM_MJPEG2SD</id>
    <link href="https://github.com/s60sc/ESP32-CAM_MJPEG2SD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ESP32 Camera motion capture application to record JPEGs to SD card as AVI files and stream to browser as MJPEG. If a microphone is installed then a WAV file is also created. Files can be uploaded via FTP or downloaded to browser.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ESP32-CAM_MJPEG2SD&lt;/h1&gt; &#xA;&lt;p&gt;ESP32 / ESP32S3 Camera application to record JPEGs to SD card as AVI files and playback to browser as an MJPEG stream. The AVI format allows recordings to replay at correct frame rate on media players. If a microphone is installed then a WAV file is also created and stored in the AVI file.&lt;/p&gt; &#xA;&lt;p&gt;Changes for version 8.0:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;compiled for arduino-esp32 v2.0.8&lt;/li&gt; &#xA; &lt;li&gt;support for ESP32S3 (much better than ESP32)&lt;/li&gt; &#xA; &lt;li&gt;simultaneous Wifi Station and AP mode&lt;/li&gt; &#xA; &lt;li&gt;lamp has variable intensity&lt;/li&gt; &#xA; &lt;li&gt;internal code restructuring.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Changes up to version 8.6.5:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Web page improvements and jQuery removed.&lt;/li&gt; &#xA; &lt;li&gt;Support for OV5640 and OV3660 cameras, but see &lt;a href=&#34;https://raw.githubusercontent.com/s60sc/ESP32-CAM_MJPEG2SD/master/#ov5640&#34;&gt;&lt;strong&gt;OV5640&lt;/strong&gt;&lt;/a&gt; section below.&lt;/li&gt; &#xA; &lt;li&gt;Spurious error &lt;a href=&#34;https://github.com/s60sc/ESP32-CAM_MJPEG2SD/issues/155&#34;&gt;message&lt;/a&gt; removed.&lt;/li&gt; &#xA; &lt;li&gt;fix for &lt;a href=&#34;https://github.com/s60sc/ESP32-CAM_MJPEG2SD/issues/150&#34;&gt;timezone&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;fix for unwanted &lt;a href=&#34;https://github.com/s60sc/ESP32-CAM_MJPEG2SD/issues/144&#34;&gt;APs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;NTP server &lt;a href=&#34;https://github.com/s60sc/ESP32-CAM_MJPEG2SD/issues/151&#34;&gt;configurable&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Valid GitHub cert for https download&lt;/li&gt; &#xA; &lt;li&gt;Improve AP stability&lt;/li&gt; &#xA; &lt;li&gt;Improve &lt;a href=&#34;https://github.com/s60sc/ESP32-CAM_MJPEG2SD/issues/183&#34;&gt;PIR auto lamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MQTT integration added by &lt;a href=&#34;https://github.com/gemi254&#34;&gt;@gemi254&lt;/a&gt;, see &lt;a href=&#34;https://raw.githubusercontent.com/s60sc/ESP32-CAM_MJPEG2SD/master/#mqtt&#34;&gt;&lt;strong&gt;MQTT&lt;/strong&gt;&lt;/a&gt; section below.&lt;/li&gt; &#xA; &lt;li&gt;Fix for &lt;a href=&#34;https://github.com/s60sc/ESP32-CAM_MJPEG2SD/issues/198&#34;&gt;issue 198&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Added deep sleep on night, wake on LDR&lt;/li&gt; &#xA; &lt;li&gt;Fix for &lt;a href=&#34;https://github.com/s60sc/ESP32-CAM_MJPEG2SD/issues/211&#34;&gt;issue 211&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fix for &lt;a href=&#34;https://github.com/s60sc/ESP32-CAM_MJPEG2SD/issues/217&#34;&gt;issue 217&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Web log colorised for different message types&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;The application enables video capture of motion detection or timelapse recording. Examples include security cameras or wildlife monitoring. This &lt;a href=&#34;https://www.instructables.com/How-to-Make-a-WiFi-Security-Camera-ESP32-CAM-DIY-R/&#34;&gt;instructable&lt;/a&gt; by &lt;a href=&#34;https://www.instructables.com/member/Max+Imagination/&#34;&gt;Max Imagination&lt;/a&gt; shows how to build a WiFi Security Camera using an earlier version of this code, plus a later video on how to &lt;a href=&#34;https://www.youtube.com/watch?v=k_PJLkfqDuI&amp;amp;t=247s&#34;&gt;install and use&lt;/a&gt; the app.&lt;/p&gt; &#xA;&lt;p&gt;Saving a set of JPEGs as a single file is faster than as individual files and is easier to manage, particularly for small image sizes. Actual rate depends on quality and size of SD card and complexity and quality of images. A no-name 4GB SDHC labelled as Class 6 was 3 times slower than a genuine Sandisk 4GB SDHC Class 2. The following recording rates were achieved on a freshly formatted Sandisk 4GB SDHC Class 2 on a AI Thinker OV2640 board, set to maximum JPEG quality and highest clock rate.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Frame Size&lt;/th&gt; &#xA;   &lt;th&gt;OV2640 camera max fps&lt;/th&gt; &#xA;   &lt;th&gt;mjpeg2sd max fps&lt;/th&gt; &#xA;   &lt;th&gt;Detection time ms&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;96X96&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;45&lt;/td&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QQVGA&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;45&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QCIF&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;45&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HQVGA&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;45&lt;/td&gt; &#xA;   &lt;td&gt;40&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;240X240&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;45&lt;/td&gt; &#xA;   &lt;td&gt;55&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QVGA&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;40&lt;/td&gt; &#xA;   &lt;td&gt;70&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CIF&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;40&lt;/td&gt; &#xA;   &lt;td&gt;110&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HVGA&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;40&lt;/td&gt; &#xA;   &lt;td&gt;130&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VGA&lt;/td&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;80&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SVGA&lt;/td&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;120&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XGA&lt;/td&gt; &#xA;   &lt;td&gt;12.5&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;180&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HD&lt;/td&gt; &#xA;   &lt;td&gt;12.5&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;220&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SXGA&lt;/td&gt; &#xA;   &lt;td&gt;12.5&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;300&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UXGA&lt;/td&gt; &#xA;   &lt;td&gt;12.5&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;450&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The ESP32S3 (using Freenove ESP32S3 Cam board hosting ESP32S3 N8R8 module) runs the app about double the speed of the ESP32 mainly due to much faster PSRAM. It can record at the maximum OV2640 frame rates including &lt;a href=&#34;https://raw.githubusercontent.com/s60sc/ESP32-CAM_MJPEG2SD/master/#audio-recording&#34;&gt;audio&lt;/a&gt; for all frame sizes except UXGA (max 10fps).&lt;/p&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;The application was originally based on the Arduino CameraWebServer example but has since been extensively modified, including contributions made by &lt;a href=&#34;https://github.com/gemi254&#34;&gt;@gemi254&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The ESP32 Cam module has 4MB of PSRAM which is used to buffer the camera frames and the construction of the AVI file to minimise the number of SD file writes, and optimise the writes by aligning them with the SD card sector size. For playback the AVI is read from SD into a multiple sector sized buffer, and sent to the browser as timed individual frames. The SD card is used in &lt;strong&gt;MMC 1 line&lt;/strong&gt; mode, as this is practically as fast as &lt;strong&gt;MMC 4 line&lt;/strong&gt; mode and frees up pin 4 (connected to onboard Lamp), and pin 12 which can be used for eg a PIR.&lt;/p&gt; &#xA;&lt;p&gt;The AVI files are named using a date time format &lt;strong&gt;YYYYMMDD_HHMMSS&lt;/strong&gt; with added frame size, recording rate, duration and frame count, eg &lt;strong&gt;20200130_201015_VGA_15_60_900.avi&lt;/strong&gt;, and stored in a per day folder &lt;strong&gt;YYYYMMDD&lt;/strong&gt;. If audio is included the filename ends with &lt;strong&gt;_S&lt;/strong&gt;.&lt;br&gt; The ESP32 time is set from an NTP server or connected browser client.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download github files into the Arduino IDE sketch folder, removing &lt;code&gt;-master&lt;/code&gt; from the application folder name. Select the required ESP-CAM board using &lt;code&gt;CAMERA_MODEL_&lt;/code&gt; in &lt;code&gt;appGlobals.h&lt;/code&gt; unless using the defaults:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ESP32 Cam board - &lt;code&gt;CAMERA_MODEL_AI_THINKER&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;ESP32S3 Cam board - &lt;code&gt;CAMERA_MODEL_ESP32S3_EYE&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Compile with PSRAM enabled and the following Partition scheme:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ESP32 - &lt;code&gt;Minimal SPIFFS (...)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;ESP32S3 - &lt;code&gt;8M with spiffs (...)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: If you get compilation errors you need to update your &lt;code&gt;arduino-esp32&lt;/code&gt; library in the IDE using &lt;a href=&#34;https://github.com/s60sc/ESP32-CAM_MJPEG2SD/issues/61#issuecomment-1034928567&#34;&gt;Boards Manager&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The application web pages and configuration data file (except passwords) are stored in the &lt;strong&gt;/data&lt;/strong&gt; folder which needs to be copied as a folder to the SD card, or automatically downloaded from GitHub on app startup. This reduces the size of the application on flash and reduces wear as well as making updates easier.&lt;/p&gt; &#xA;&lt;p&gt;On first installation, the application will start in wifi AP mode - connect to SSID: &lt;strong&gt;ESP-CAM_MJPEG_...&lt;/strong&gt;, to allow router and password details to be entered via the web page on 192.168.4.1. The application web pages and configuration data file (except passwords) are stored in the &lt;strong&gt;/data&lt;/strong&gt; folder which is automatically downloaded to SD card from GitHub. The &lt;strong&gt;/data&lt;/strong&gt; folder can also be loaded via OTA.&lt;/p&gt; &#xA;&lt;p&gt;Subsequent updates to the application, or to the &lt;strong&gt;/data&lt;/strong&gt; folder contents, can be made using the &lt;strong&gt;OTA Upload&lt;/strong&gt; tab. The &lt;strong&gt;/data&lt;/strong&gt; folder can also be reloaded from GitHub using the &lt;strong&gt;Reload /data&lt;/strong&gt; button on the &lt;strong&gt;Edit Config&lt;/strong&gt; tab.&lt;/p&gt; &#xA;&lt;p&gt;Browser functions only tested on Chrome.&lt;/p&gt; &#xA;&lt;h2&gt;Main Function&lt;/h2&gt; &#xA;&lt;p&gt;A recording is generated either by the camera itself detecting motion as given in the &lt;a href=&#34;https://raw.githubusercontent.com/s60sc/ESP32-CAM_MJPEG2SD/master/#motion-detection-by-camera&#34;&gt;&lt;strong&gt;Motion detection by Camera&lt;/strong&gt;&lt;/a&gt; section below, or by holding a given pin high (kept low by internal pulldown when released), eg by using a PIR. In addition a recording can be requested manually using the &lt;strong&gt;Start Recording&lt;/strong&gt; button on the web page.&lt;/p&gt; &#xA;&lt;p&gt;To play back a recording, select the file using &lt;strong&gt;Select folder / file&lt;/strong&gt; on the browser to select the day folder then the required AVI file. After selecting the AVI file, press &lt;strong&gt;Start Playback&lt;/strong&gt; button to playback the recording. The &lt;strong&gt;Start Stream&lt;/strong&gt; button shows a live feed from the camera.&lt;/p&gt; &#xA;&lt;p&gt;Recordings can then be uploaded to an FTP server or downloaded to the browser for playback on a media application, eg VLC.&lt;/p&gt; &#xA;&lt;p&gt;A time lapse feature is also available which can run in parallel with motion capture. Time lapse files have the format &lt;strong&gt;20200130_201015_VGA_15_60_900_T.avi&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Other Functions and Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The operation of the application can be modified dynamically as below, by using the main web page, which should mostly be self explanatory.&lt;/p&gt; &#xA;&lt;p&gt;Connections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The FTP, Wifi, SMTP, and time zone parameters can be defined on the web page under &lt;strong&gt;Other Settings&lt;/strong&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;for &lt;strong&gt;Time Zone&lt;/strong&gt; use dropdown, or paste in values from second column &lt;a href=&#34;https://raw.githubusercontent.com/nayarsystems/posix_tz_db/master/zones.csv&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;To make the changes persistent, press the &lt;strong&gt;Save&lt;/strong&gt; button&lt;/li&gt; &#xA; &lt;li&gt;mdns name services in order to use &lt;code&gt;http://[Host Name]&lt;/code&gt; instead of ip address.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To change the recording parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Resolution&lt;/code&gt; is the pixel size of each frame&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Frame Rate&lt;/code&gt; is the required frames per second&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Quality&lt;/code&gt; is the level of JPEG compression which affects image size.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SD storage management:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Folders or files within folders can be deleted by selecting the required file or folder from the drop down list then pressing the &lt;strong&gt;Delete&lt;/strong&gt; button and confirming.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Folders or files within folders can be uploaded to a remote server via FTP by selecting the required file or folder from the drop down list then pressing the &lt;strong&gt;FTP Upload&lt;/strong&gt; button. Can be uploaded in AVI format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download selected AVI file from SD card to browser using &lt;strong&gt;Download&lt;/strong&gt; button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete, or upload and delete oldest folder when card free space is running out.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Log viewing options via web page (may slow recorded frame rate), displayed using &lt;strong&gt;Show Log&lt;/strong&gt; button:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Log to browser&lt;/strong&gt;: log is dynamically output via websocket&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Log to SD card&lt;/strong&gt;: log is stored on SD card, use &lt;strong&gt;Retrieve SD Log&lt;/strong&gt; button to retrieve or refresh.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration Web Page&lt;/h2&gt; &#xA;&lt;p&gt;More configuration details accessed via &lt;strong&gt;Edit Config&lt;/strong&gt; button, which displays further buttons:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Wifi&lt;/strong&gt;: Additional WiFi and webserver settings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Motion&lt;/strong&gt;: See &lt;a href=&#34;https://raw.githubusercontent.com/s60sc/ESP32-CAM_MJPEG2SD/master/#motion-detection-by-camera&#34;&gt;&lt;strong&gt;Motion detection by Camera&lt;/strong&gt;&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Peripherals&lt;/strong&gt; eg:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select if a PIR is to be used (which can also be used in parallel with camera motion detection).&lt;/li&gt; &#xA; &lt;li&gt;Auto switch the lamp on for nightime PIR detection.&lt;/li&gt; &#xA; &lt;li&gt;Control pan / tilt cradle for camera.&lt;/li&gt; &#xA; &lt;li&gt;Connect an external I2S microphone&lt;/li&gt; &#xA; &lt;li&gt;Connect a DS18B20 temperature sensor&lt;/li&gt; &#xA; &lt;li&gt;Monitor voltage of battery supply on ADC pin&lt;/li&gt; &#xA; &lt;li&gt;Wakeup on LDR after deep sleep at night&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that there are not enough free pins on the ESP32 camera module to allow all external sensors to be used. Pins that can be used (with some limitations) are: 3, 4, 12, 13, 33.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pin 3: Labelled U0R. Only use as input pin, as also used for flashing.&lt;/li&gt; &#xA; &lt;li&gt;pin 4: Also used for onboard lamp. Lamp can be disabled by removing its current limiting resistor.&lt;/li&gt; &#xA; &lt;li&gt;pin 12: Only use as output pin.&lt;/li&gt; &#xA; &lt;li&gt;pin 13: Is weakly pulled high.&lt;/li&gt; &#xA; &lt;li&gt;pin 33: Used by onboard red LED. Not broken out, but can repurpose the otherwise pointless VCC pin by removing its adjacent resistor marked 3V3, and the red LED current limiting resistor, then running a wire between the VCC pin and the red LED resistor solder tab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Can also use the &lt;a href=&#34;https://github.com/s60sc/ESP32-IO_Extender&#34;&gt;ESP32-IO_Extender&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;p&gt;The ESP32S3 Freenove board can support all of the above peripherals with its spare pins.&lt;/p&gt; &#xA;&lt;p&gt;On-board LEDs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ESP32 - Lamp: 4, signal: 33.&lt;/li&gt; &#xA; &lt;li&gt;ESP32S3 - Lamp: 48, signal: 2.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other&lt;/strong&gt;: SD and email management. An email can be sent when motion is detected.&lt;/p&gt; &#xA;&lt;p&gt;When a feature is enable or disabled, the ESP should be rebooted using &lt;strong&gt;Reboot ESP&lt;/strong&gt; button.&lt;/p&gt; &#xA;&lt;h2&gt;Motion detection by Camera&lt;/h2&gt; &#xA;&lt;p&gt;An AVI recording can be generated by the camera itself detecting motion using the &lt;code&gt;motionDetect.cpp&lt;/code&gt; file.&lt;br&gt; JPEG images of any size are retrieved from the camera and 1 in N images are sampled on the fly for movement by decoding them to very small grayscale bitmap images which are compared to the previous sample. The small sizes provide smoothing to remove artefacts and reduce processing time.&lt;/p&gt; &#xA;&lt;p&gt;For movement detection a high sample rate of 1 in 2 is used. When movement has been detected, the rate for checking for movement stop is reduced to 1 in 10 so that the JPEGs can be captured with only a small overhead. The &lt;strong&gt;Detection time ms&lt;/strong&gt; table shows typical time in millis to decode and analyse a frame retrieved from the OV2640 camera.&lt;/p&gt; &#xA;&lt;p&gt;Motion detection by camera is enabled by default, to disable click off &lt;strong&gt;Enable motion detect&lt;/strong&gt; button on web page.&lt;/p&gt; &#xA;&lt;p&gt;Additional options are provided on the camera index page, where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Motion Sensitivity&lt;/code&gt; sets a threshold for movement detection, higher is more sensitive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Show Motion&lt;/code&gt; if enabled and the &lt;strong&gt;Start Stream&lt;/strong&gt; button pressed, shows images of how movement is detected for calibration purposes. Gray pixels show movement, which turn to black if the motion threshold is reached.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Min Frames&lt;/code&gt; is the minimum number of frames to be captured or the file is deleted&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/s60sc/ESP32-CAM_MJPEG2SD/master/extras/motion.png&#34; alt=&#34;image1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Audio Recording&lt;/h2&gt; &#xA;&lt;p&gt;An I2S microphone can be supported, such as INMP441. PDM and analog microphones cannot be used due to limitations of I2S_NUM_1 peripheral. I2S_NUM_0 is not available as it is used by the camera. The audio is formatted as 16 bit single channel PCM with sample rate of 16kHz. The I2S microphone needs 3 free pins.&lt;/p&gt; &#xA;&lt;p&gt;Audio recording works fine on ESP32S3 but is not viable on ESP32 as it significantly slows down the frame rate.&lt;/p&gt; &#xA;&lt;p&gt;The web page has a slider for &lt;strong&gt;Microphone Gain&lt;/strong&gt;. The higher the value the higher the gain. Selecting 0 cancels the microphone. Other settings under &lt;strong&gt;Peripherals&lt;/strong&gt; button on the configuration web page.&lt;/p&gt; &#xA;&lt;h2&gt;OV5640&lt;/h2&gt; &#xA;&lt;p&gt;The OV5640 pinout is compatible with boards designed for the OV2640 but the voltage supply is too high for the internal 1.5V regulator, so the camera overheats unless a heat sink is applied.&lt;/p&gt; &#xA;&lt;p&gt;For recording purposes the OV5640 should only be used with an ESP32S3 board. Motion detection above &lt;code&gt;FHD&lt;/code&gt; framesize does not work due to &lt;code&gt;esp_jpg_decode()&lt;/code&gt; decompression &lt;a href=&#34;https://github.com/espressif/esp32-camera/issues/496&#34;&gt;error&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Recordable frame rates for the OV5460 highest framesizes on an ESP32S3 are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Frame Size&lt;/th&gt; &#xA;   &lt;th&gt;FPS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QXSGA&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WQXGA&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QXGA&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QHD&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FHD&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;P_FHD&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The OV3660 has not been tested.&lt;/p&gt; &#xA;&lt;h2&gt;MQTT&lt;/h2&gt; &#xA;&lt;p&gt;To enable MQTT, under &lt;strong&gt;Edit Config&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Others&lt;/strong&gt;, enter fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Mqtt server ip to connect&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Mqtt topic path prefix&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;optionally &lt;code&gt;Mqtt user name&lt;/code&gt; and &lt;code&gt;Mqtt user password&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Then set &lt;code&gt;Mqtt enabled&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Mqtt will auto connect if configuration is not blank on ping success.&lt;/p&gt; &#xA;&lt;p&gt;It will send messages e.g. Record On/Off Motion On/Off to the mqtt broker on channel /status.&lt;br&gt; topic: &lt;code&gt;homeassistant/sensor/ESP-CAM_MJPEG_904CAAF23A08/status -&amp;gt; {&#34;MOTION&#34;:&#34;ON&#34;, &#34;TIME&#34;:&#34;10:07:47.560&#34;}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also publish control commands to the /cmd channel in order to control camera.&lt;br&gt; topic: &lt;code&gt;homeassistant/sensor/ESP-CAM_MJPEG_904CAAF23A08/cmd -&amp;gt; dbgVerbose=1;framesize=7;fps=1&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BlocTheWorker/Inworld-Skyrim-Mod</title>
    <updated>2023-05-03T01:30:51Z</updated>
    <id>tag:github.com,2023-05-03:/BlocTheWorker/Inworld-Skyrim-Mod</id>
    <link href="https://github.com/BlocTheWorker/Inworld-Skyrim-Mod" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source Code of Skyrim&#39;s ChatGPT Inworld AI Mod. Contains C++, Papyrus and Typescript code&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BlocTheWorker/Inworld-Skyrim-Mod/main/.repo_resources/logobanner.jpg&#34; alt=&#34;Source Code Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Inworld Skyrim Mod&lt;/h1&gt; &#xA;&lt;p&gt;Inworld Skyrim Mod Source Code. This is a project that consists of three parts: a SKSE C++ plugin, Papyrus scripts, and a Typescript Node.js project. This mod aims to enhance your Skyrim experience by providing additional features and functionality. Follow the instructions below to set up and use the mod correctly.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BlocTheWorker/Inworld-Skyrim-Mod/main/#skse-c-plugin&#34;&gt;SKSE C++ Plugin&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BlocTheWorker/Inworld-Skyrim-Mod/main/#papyrus-scripts&#34;&gt;Papyrus Scripts&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BlocTheWorker/Inworld-Skyrim-Mod/main/#typescript-nodejs-project&#34;&gt;Typescript Node.js Project&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SKSE C++ Plugin&lt;/h2&gt; &#xA;&lt;p&gt;The SKSE (Skyrim Script Extender) C++ plugin is a crucial component of the mod. It extends the scripting capabilities of Skyrim, enabling the mod to function properly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code Location&lt;/strong&gt;: &lt;code&gt;SKSE&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;p&gt;This folder includes very amateurly written C++ code. Don&#39;t take it as &lt;em&gt;best practices&lt;/em&gt;, otherwise you would end up as a very very sad person. To start off, you need to know how to write SKSE mods in C++. I won&#39;t go through requirements and details in here. If you need a really good startup-refresher, I &lt;strong&gt;highly&lt;/strong&gt; suggest checking instructions provided by SkyrimScripting on her GitHub repository: &lt;a href=&#34;https://github.com/SkyrimScripting/SKSE_Template_HelloWorld&#34;&gt;SKSE Hello World Template&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Papyrus Scripts&lt;/h2&gt; &#xA;&lt;p&gt;The Papyrus scripts are the core of the mod, providing the quests and interactions with the game world.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code Location&lt;/strong&gt;: &lt;code&gt;Papyrus&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;p&gt;Once again, this code assumes you know how to work with Papyrus. To compile and use the Papyrus scripts, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the &lt;a href=&#34;https://www.creationkit.com/index.php?title=Main_Page&#34;&gt;Skyrim Creation Kit&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile the Papyrus scripts using the Creation Kit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the compiled quest to your desired location within the game world.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information on working with Papyrus scripts and the Creation Kit, consult the &lt;a href=&#34;https://www.creationkit.com/index.php?title=Papyrus&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Typescript Node.js Project&lt;/h2&gt; &#xA;&lt;p&gt;The Typescript Node.js project is responsible for handling the mod&#39;s server-side logic.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code Location&lt;/strong&gt;: &lt;code&gt;Client&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;p&gt;To set it up, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure you have &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; installed on your system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to .env file and add your credentials and workspace secrets&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the project directory and install the necessary packages using the following command: &lt;code&gt;npm install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the Node.js client by running: &lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The server should now be up and running. First time run might take a while because it will try to create all the characters from the JSON file one by one. This will happen only once and might take around ~4 minutes to set up.&lt;/p&gt; &#xA;&lt;h3&gt;Hard Requirements&lt;/h3&gt; &#xA;&lt;p&gt;You need some hard mod requirements to make this run properly as a mod. You will need the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nexusmods.com/skyrimspecialedition/mods/17561&#34;&gt;UIExtensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://skse.silverlock.org/&#34;&gt;Skyrim Script Extender&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nexusmods.com/skyrimspecialedition/mods/32444&#34;&gt;Address Library for SKSE Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nexusmods.com/skyrimspecialedition/mods/12604&#34;&gt;SkyUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nexusmods.com/skyrimspecialedition/mods/36457&#34;&gt;iWant Widgets&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Adding More Characters&lt;/h2&gt; &#xA;&lt;p&gt;System works in a way that it takes character name and searches that name in created characters before establishing connection. This means, if Ulfric Stormcloak isn&#39;t created in Inworld Workplace, then you won&#39;t be able to talk with him. What can you do? You can add this character to your list, and then, you will be able to use it. You need to go to &lt;code&gt;Client\Templates\WorldBuilding&lt;/code&gt; folder, find &lt;em&gt;&lt;strong&gt;SkyrimCharacters.json&lt;/strong&gt;&lt;/em&gt; and add your character to this list. You can create your character on Inworld server, and press &lt;code&gt;F12&lt;/code&gt; and get JSON from networking tab (to make life easier for you)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tdlib/telegram-bot-api</title>
    <updated>2023-05-03T01:30:51Z</updated>
    <id>tag:github.com,2023-05-03:/tdlib/telegram-bot-api</id>
    <link href="https://github.com/tdlib/telegram-bot-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Telegram Bot API server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Telegram Bot API&lt;/h1&gt; &#xA;&lt;p&gt;The Telegram Bot API provides an HTTP API for creating &lt;a href=&#34;https://core.telegram.org/bots&#34;&gt;Telegram Bots&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve got any questions about bots or would like to report an issue with your bot, kindly contact us at &lt;a href=&#34;https://t.me/BotSupport&#34;&gt;@BotSupport&lt;/a&gt; in Telegram.&lt;/p&gt; &#xA;&lt;p&gt;Please note that only global Bot API issues that affect all bots are suitable for this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tdlib/telegram-bot-api/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tdlib/telegram-bot-api/master/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tdlib/telegram-bot-api/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tdlib/telegram-bot-api/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tdlib/telegram-bot-api/master/#switching&#34;&gt;Moving a bot to a local server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tdlib/telegram-bot-api/master/#moving&#34;&gt;Moving a bot from one local server to another&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tdlib/telegram-bot-api/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;installation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The simplest way to build and install &lt;code&gt;Telegram Bot API server&lt;/code&gt; is to use our &lt;a href=&#34;https://tdlib.github.io/telegram-bot-api/build.html&#34;&gt;Telegram Bot API server build instructions generator&lt;/a&gt;. If you do that, you&#39;ll only need to choose the target operating system to receive the complete build instructions.&lt;/p&gt; &#xA;&lt;p&gt;In general, you need to install all &lt;code&gt;Telegram Bot API server&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tdlib/telegram-bot-api/master/#dependencies&#34;&gt;dependencies&lt;/a&gt; and compile the source code using CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recursive https://github.com/tdlib/telegram-bot-api.git&#xA;cd telegram-bot-api&#xA;mkdir build&#xA;cd build&#xA;cmake -DCMAKE_BUILD_TYPE=Release ..&#xA;cmake --build . --target install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;dependencies&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;To build and run &lt;code&gt;Telegram Bot API server&lt;/code&gt; you will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenSSL&lt;/li&gt; &#xA; &lt;li&gt;zlib&lt;/li&gt; &#xA; &lt;li&gt;C++14 compatible compiler (e.g., Clang 3.4+, GCC 4.9+, MSVC 19.0+ (Visual Studio 2015+), Intel C++ Compiler 17+) (build only)&lt;/li&gt; &#xA; &lt;li&gt;gperf (build only)&lt;/li&gt; &#xA; &lt;li&gt;CMake (3.0.2+, build only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;usage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;telegram-bot-api --help&lt;/code&gt; to receive the list of all available options of the Telegram Bot API server.&lt;/p&gt; &#xA;&lt;p&gt;The only mandatory options are &lt;code&gt;--api-id&lt;/code&gt; and &lt;code&gt;--api-hash&lt;/code&gt;. You must obtain your own &lt;code&gt;api_id&lt;/code&gt; and &lt;code&gt;api_hash&lt;/code&gt; as described in &lt;a href=&#34;https://core.telegram.org/api/obtaining_api_id&#34;&gt;https://core.telegram.org/api/obtaining_api_id&lt;/a&gt; and specify them using the &lt;code&gt;--api-id&lt;/code&gt; and &lt;code&gt;--api-hash&lt;/code&gt; options or the &lt;code&gt;TELEGRAM_API_ID&lt;/code&gt; and &lt;code&gt;TELEGRAM_API_HASH&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;p&gt;To enable Bot API features not available at &lt;code&gt;https://api.telegram.org&lt;/code&gt;, specify the option &lt;code&gt;--local&lt;/code&gt;. In the local mode the Bot API server allows to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download files without a size limit.&lt;/li&gt; &#xA; &lt;li&gt;Upload files up to 2000 MB.&lt;/li&gt; &#xA; &lt;li&gt;Upload files using their local path and &lt;a href=&#34;https://en.wikipedia.org/wiki/File_URI_scheme&#34;&gt;the file URI scheme&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use an HTTP URL for the webhook.&lt;/li&gt; &#xA; &lt;li&gt;Use any local IP address for the webhook.&lt;/li&gt; &#xA; &lt;li&gt;Use any port for the webhook.&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;em&gt;max_webhook_connections&lt;/em&gt; up to 100000.&lt;/li&gt; &#xA; &lt;li&gt;Receive the absolute local path as a value of the &lt;em&gt;file_path&lt;/em&gt; field without the need to download the file after a &lt;em&gt;getFile&lt;/em&gt; request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Telegram Bot API server accepts only HTTP requests, so a TLS termination proxy needs to be used to handle remote HTTPS requests.&lt;/p&gt; &#xA;&lt;p&gt;By default the Telegram Bot API server is launched on the port 8081, which can be changed using the option &lt;code&gt;--http-port&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://core.telegram.org/bots&#34;&gt;Bots: An introduction for developers&lt;/a&gt; for a brief description of Telegram Bots and their features.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://core.telegram.org/bots/api&#34;&gt;Telegram Bot API documentation&lt;/a&gt; for a description of the Bot API interface and a complete list of available classes, methods and updates.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://tdlib.github.io/telegram-bot-api/build.html&#34;&gt;Telegram Bot API server build instructions generator&lt;/a&gt; for detailed instructions on how to build the Telegram Bot API server.&lt;/p&gt; &#xA;&lt;p&gt;Subscribe to &lt;a href=&#34;https://t.me/botnews&#34;&gt;@BotNews&lt;/a&gt; to be the first to know about the latest updates and join the discussion in &lt;a href=&#34;https://t.me/bottalk&#34;&gt;@BotTalk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;switching&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Moving a bot to a local server&lt;/h2&gt; &#xA;&lt;p&gt;To guarantee that your bot will receive all updates, you must deregister it with the &lt;code&gt;https://api.telegram.org&lt;/code&gt; server by calling the method &lt;a href=&#34;https://core.telegram.org/bots/api#logout&#34;&gt;logOut&lt;/a&gt;. After the bot is logged out, you can replace the address to which the bot sends requests with the address of your local server and use it in the usual way. If the server is launched in &lt;code&gt;--local&lt;/code&gt; mode, make sure that the bot can correctly handle absolute file paths in response to &lt;code&gt;getFile&lt;/code&gt; requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;moving&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Moving a bot from one local server to another&lt;/h2&gt; &#xA;&lt;p&gt;If the bot is logged in on more than one server simultaneously, there is no guarantee that it will receive all updates. To move a bot from one local server to another you can use the method &lt;a href=&#34;https://core.telegram.org/bots/api#logout&#34;&gt;logOut&lt;/a&gt; to log out on the old server before switching to the new one.&lt;/p&gt; &#xA;&lt;p&gt;If you want to avoid losing updates between logging out on the old server and launching on the new server, you can remove the bot&#39;s webhook using the method &lt;a href=&#34;https://core.telegram.org/bots/api#deletewebhook&#34;&gt;deleteWebhook&lt;/a&gt;, then use the method &lt;a href=&#34;https://core.telegram.org/bots/api#close&#34;&gt;close&lt;/a&gt; to close the bot instance. After the instance is closed, locate the bot&#39;s subdirectory in the working directory of the old server by the bot&#39;s user ID, move the subdirectory to the working directory of the new server and continue sending requests to the new server as usual.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Telegram Bot API server&lt;/code&gt; source code is licensed under the terms of the Boost Software License. See &lt;a href=&#34;http://www.boost.org/LICENSE_1_0.txt&#34;&gt;LICENSE_1_0.txt&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>