<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-26T01:30:53Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>luajit-remake/luajit-remake</title>
    <updated>2022-11-26T01:30:53Z</updated>
    <id>tag:github.com,2022-11-26:/luajit-remake/luajit-remake</id>
    <link href="https://github.com/luajit-remake/luajit-remake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An ongoing attempt to re-engineer LuaJIT from scratch&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;LuaJIT Remake Project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;This is a work-in-progress.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The ultimate goal of this project is to implement a multi-tier method-JIT for Lua.&lt;/p&gt; &#xA;&lt;p&gt;We employ an unique approach where the interpreter and the JIT tiers are automatically generated from a semantical description of the bytecodes. We believe this will ultimately result in less engineering cost, cleaner and more maintainable code, as well as the &lt;em&gt;generalizability&lt;/em&gt; to support other languages.&lt;/p&gt; &#xA;&lt;p&gt;Currently we have implemented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A feature-complete Lua 5.1 interpreter, which is automatically generated from a &lt;a href=&#34;https://raw.githubusercontent.com/luajit-remake/luajit-remake/master/annotated/bytecodes&#34;&gt;semantical description of the LuaJIT bytecodes&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A completely re-engineered Lua runtime. For example, our implementation of the Lua table uses hidden class, instead of a naive hash table as in Lua/LuaJIT.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Interpreter performance comparison&lt;/h3&gt; &#xA;&lt;p&gt;On &lt;a href=&#34;https://raw.githubusercontent.com/luajit-remake/luajit-remake/master/luabench&#34;&gt;a variety of benchmarks&lt;/a&gt;, we demonstrate that our interpreter is 28% faster than LuaJIT&#39;s interpreter, and 171% faster than the official PUC Lua5.1 interpreter[^1].&lt;/p&gt; &#xA;&lt;p&gt;The following figure illustrates our performance vs LuaJIT interpreter, normalized to PUC Lua&#39;s performance. Blue shadow indicates benchmarks where we do better than LuaJIT, and red shadow indicates benchmarks where LuaJIT does better than us.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/luajit-remake/luajit-remake/master/miscellaneous/interpreter-perf-comparison.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;[^1]: The benchmarks are run on my laptop with Intel i7-12700H CPU and 32GB DDR4 memory. All benchmarks are repeated 5 times. Reported numbers are the geometric average over all benchmarks.&lt;/p&gt; &#xA;&lt;h3&gt;The JIT&lt;/h3&gt; &#xA;&lt;p&gt;The work for implementing the JIT tiers is ongoing...&lt;/p&gt; &#xA;&lt;h3&gt;Building and Testing&lt;/h3&gt; &#xA;&lt;p&gt;To build the project, make sure you have &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;python3&lt;/code&gt; installed, and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 ljr-build make release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the build is complete, you should see an executable &lt;code&gt;luajitr&lt;/code&gt; in the repository root directory. You can use it to run your Lua script, or run &lt;code&gt;bash run_bench.sh&lt;/code&gt; to run all the benchmarks.&lt;/p&gt; &#xA;&lt;h3&gt;Caveats&lt;/h3&gt; &#xA;&lt;p&gt;Please note that this is an ongoing project that is still far from production-ready.&lt;/p&gt; &#xA;&lt;p&gt;It currently comes with a number of caveats:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;GC is not implemented. (For a fair benchmark comparison with other Lua implementations, we turned off GC for their implementations as well.)&lt;/li&gt; &#xA; &lt;li&gt;It currently can only run on x86-64 Linux. I need to focus on the functionality implementations first before thinking about portability to other architecture/OS.&lt;/li&gt; &#xA; &lt;li&gt;Some standard library functions, most notably the package library (&lt;code&gt;require&lt;/code&gt; and &lt;code&gt;module&lt;/code&gt;), are not implemented.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kth-competitive-programming/kactl</title>
    <updated>2022-11-26T01:30:53Z</updated>
    <id>tag:github.com,2022-11-26:/kth-competitive-programming/kactl</id>
    <link href="https://github.com/kth-competitive-programming/kactl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KTH Algorithm Competition Template Library (... eller KTHs AC-tillverkande lapp)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KACTL&lt;/h1&gt; &#xA;&lt;p&gt;This repo hosts KACTL, &lt;a href=&#34;https://en.wikipedia.org/wiki/KTH_Royal_Institute_of_Technology&#34;&gt;KTH&lt;/a&gt;&#39;s ICPC team reference document. It consists of 25 pages of copy-pasteable C++ code, for use in ICPC-style programming competitions.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/kth-competitive-programming/kactl/main/kactl.pdf&#34;&gt;kactl.pdf&lt;/a&gt; for the final, browsable version, and &lt;a href=&#34;https://raw.githubusercontent.com/kth-competitive-programming/kactl/main/content/&#34;&gt;content/&lt;/a&gt; for raw source code.&lt;/p&gt; &#xA;&lt;h2&gt;Aspirations&lt;/h2&gt; &#xA;&lt;p&gt;KACTL algorithms should be: useful, short, fast enough, well tested, and if relevant, readable and easy to modify. They should &lt;em&gt;not&lt;/em&gt; be overly generic, since code is manually typed and that just adds overhead. Due to space issues, we also exclude algorithms that are very common/simple (e.g., Dijkstra), or very uncommon (general weighted matching).&lt;/p&gt; &#xA;&lt;p&gt;If you feel that something is missing, could be cleaned up, or notice a bug, please file an issue or &lt;a href=&#34;https://help.github.com/articles/fork-a-repo/&#34;&gt;send a pull request&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Customizing KACTL&lt;/h2&gt; &#xA;&lt;p&gt;While KACTL is usable as is, it&#39;s also easy to modify if you want to create a personalized copy. In particular, you may want to change the cover page, or make your own choice of algorithms to include -- due to space concerns, not all algorithms in the repo are included in the pdf. You may also want to enable colored syntax highlighting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;content/kactl.tex&lt;/code&gt; is the main file of KACTL, and can be edited to change team name, logo, syntax highlighting, etc. It imports &lt;code&gt;chapter.tex&lt;/code&gt; files from each of the &lt;code&gt;content/&lt;/code&gt; subdirectories, which define the contents of each chapter. These include source code, text and math in the form of LaTeX. To add/remove code from a chapter, add/remove a corresponding &lt;code&gt;\kactlimport&lt;/code&gt; line from the &lt;code&gt;chapter.tex&lt;/code&gt; file. For nicer alignment you might want to insert &lt;code&gt;\hardcolumnbreak&lt;/code&gt;, &lt;code&gt;\columnbreak&lt;/code&gt; or &lt;code&gt;\newpage&lt;/code&gt; commands, though this is usually only done before important contests, and not on the main branch. The algorithms that are not included in the pdf are left commented out in &lt;code&gt;chapter.tex&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build KACTL, type &lt;code&gt;make kactl&lt;/code&gt; (or &lt;code&gt;make fast&lt;/code&gt;) on a *nix machine -- this will update &lt;code&gt;kactl.pdf&lt;/code&gt;. (Windows might work as well, but is not tested.) &lt;code&gt;doc/README&lt;/code&gt; has a few more notes about this.&lt;/p&gt; &#xA;&lt;p&gt;Tips:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check out what&#39;s excluded by default by running &lt;code&gt;make showexcluded&lt;/code&gt;. The default configuration is chosen to be a reasonable balance for beginners and advanced teams.&lt;/li&gt; &#xA; &lt;li&gt;Take advantage of the hashing when typing in these algorithms. Each algorithm has a 6 character MD5 hash in the upper right. This hash can be generated by using &lt;code&gt;hash.sh&lt;/code&gt; or the &lt;code&gt;:Hash&lt;/code&gt; command from the &lt;code&gt;.vimrc&lt;/code&gt;. The hashing ignores whitespace and comments.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Coding style&lt;/h2&gt; &#xA;&lt;p&gt;KACTL uses a relatively terse coding style, with a handful of macros/typedefs defined in the &lt;a href=&#34;https://raw.githubusercontent.com/kth-competitive-programming/kactl/main/content/contest/template.cpp&#34;&gt;template&lt;/a&gt; that help shorten the code. Line width is 63 chars, with tabs for indentation (tab = 2 spaces in the pdf).&lt;/p&gt; &#xA;&lt;p&gt;Each algorithm contains a header with the author of the code, the date it was added, a description of the algorithm, its testing status, and preferably also source, license and time complexity.&lt;/p&gt; &#xA;&lt;p&gt;kactl.pdf is to be kept to 25 pages + cover page. Occasionally the generated kactl.pdf is committed to the repo for convenience, but not too often because it makes git operations slower.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;KACTL aims for a high level of confidence in algorithm correctness. Testing is done both on online judges and (for newer algorithms) with stress tests that compare output to a more naive algorithm for a large amount of randomly generated cases. These tests live in the &lt;code&gt;stress-tests&lt;/code&gt; directory, and are run with CI on every commit. The CI also verifies that all headers compile (except for an exclude list in &lt;code&gt;docs/scripts/skip_headers&lt;/code&gt;) and that the latex compiles.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;old-unit-tests&lt;/code&gt; contains a couple of broken unit tests, last touched about ten years ago.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;As usual for competitive programming, the licensing situation is a bit unclear. Many source files are marked with license (we try to go with &lt;a href=&#34;https://creativecommons.org/share-your-work/public-domain/cc0/&#34;&gt;CC0&lt;/a&gt;), but many also aren&#39;t. Presumably good will is to be assumed from other authors, though, and in many cases permission should not be needed since the code is not distributed. To help trace things back, sources and authors are noted in source files.&lt;/p&gt; &#xA;&lt;p&gt;Everything in &lt;code&gt;stress-tests&lt;/code&gt; is implicitly CC0, except reference implementations taken from around the Internet.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MTK911/Attiny85</title>
    <updated>2022-11-26T01:30:53Z</updated>
    <id>tag:github.com,2022-11-26:/MTK911/Attiny85</id>
    <link href="https://github.com/MTK911/Attiny85" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RubberDucky like payloads for DigiSpark Attiny85&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://i.ibb.co/jZ2wvX0/NEWEV-AT.png&#34; width=&#34;172&#34; height=&#34;123&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;DigiSpark Attiny85 poor man&#39;s RubberDucky&lt;/h1&gt; &#xA;&lt;p&gt;For people who can&#39;t buy or are too cheap to buy RubberDucky, DigiSpark Attiny85 is the solution to their problems. Because it&#39;s possible to use it as HID thanks to &#34;DigiKeyboard.h&#34; it can be use as keyboard to send keystrokes to computer which can be use for pranking your people to creating a backdoor in target system.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s here?&lt;/h2&gt; &#xA;&lt;p&gt;I have created this repo for sharing my payloads for DigiSpark Attiny85. It&#39;s my first time programming any device and so far no fires. All the payloads are tested on Attiny85 and created on Arduino IDE.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;For people like me who are new to this i would suggest visiting &lt;a href=&#34;https://maker.pro/arduino/projects/how-to-build-a-rubber-ducky-usb-with-arduino-using-a-digispark-module&#34;&gt;Maker.pro&lt;/a&gt; for instruction on setting up development environment for Attiny85.&lt;/p&gt; &#xA;&lt;h2&gt;Payloads&lt;/h2&gt; &#xA;&lt;p&gt;Following is the list of payloads i have worked on so far&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Wi-Fi password stealer: Grabs Windows saved Wi-Fi passwords and send them to your remote web server&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Windows Crasher: Various payloads for crashing windows&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;UAC Bypass: Different methods to bypass windows UAC&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;BackDoor: Creates backdoor for later access&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;KeyLogger: For logging and sending typed keys&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Windows Phisher: Phisher for windows credentials&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sam Dumper: Dump windows password files (SAM) and send them to remote location&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Payload Dropper: Download and exeute files from internet&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Instant Shell: Reverse shell payloads&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;DISCLAIMER&lt;/h2&gt; &#xA;&lt;p&gt;All the software/scripts/applications/things in this repository are provided as is, without warranty of any kind. Use of these software/scripts/applications/things is entirely at your own risk. Creator of these softwares/scripts/applications/things is not responsible for any direct or indirect damage to your own or defiantly someone else&#39;s property resulting from the use of these software/scripts/applications/things.&lt;/p&gt;</summary>
  </entry>
</feed>