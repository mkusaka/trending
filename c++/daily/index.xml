<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-21T01:30:41Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>namazso/linux_injector</title>
    <updated>2022-12-21T01:30:41Z</updated>
    <id>tag:github.com,2022-12-21:/namazso/linux_injector</id>
    <link href="https://github.com/namazso/linux_injector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple ptrace-less shared library injector for x64 Linux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;linux_injector&lt;/h1&gt; &#xA;&lt;p&gt;A simple ptrace-less shared library injector for x64 Linux.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;linux_injector &amp;lt;pid&amp;gt; &amp;lt;module&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;pid&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Target process id. Must have ptrace rights to it (required for accessing &lt;code&gt;/proc/$pid/mem&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;module&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Module to inject, will be &lt;code&gt;dlopen&lt;/code&gt;ed in the remote process. Should probably be a full path, because the remote LD_LIBRARY_PATH is used otherwise for resolution.&lt;/p&gt; &#xA;&lt;h2&gt;Modification&lt;/h2&gt; &#xA;&lt;p&gt;For control flow hijacking, this program needs a hijacking candidate. The code presented here uses &lt;code&gt;malloc&lt;/code&gt;, this can be changed by editing &lt;code&gt;FUN_NAME&lt;/code&gt; and recompiling. Make sure the hooked function can run under 100ms, so that it won&#39;t be overwritten while it executes. This means calls like &lt;code&gt;sleep&lt;/code&gt; or &lt;code&gt;wait&lt;/code&gt; are bad candidates for the initial shellcode. The function in question also needs to be more than &lt;code&gt;0x50&lt;/code&gt; long for the shellcode not to overwrite other functions.&lt;/p&gt; &#xA;&lt;h2&gt;Shortcomings&lt;/h2&gt; &#xA;&lt;p&gt;The code expects that the target uses the same libc as available to us. If it does not, then the remote symbols won&#39;t be found. This could be fixed by reading the remote libraries and scanning for our symbols in them.&lt;/p&gt; &#xA;&lt;h2&gt;Supported OS&lt;/h2&gt; &#xA;&lt;p&gt;Most Linuxes that use glibc should be supported. Tested only on Oracle Linux 8.7.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/namazso/linux_injector/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>snowie2000/mactype</title>
    <updated>2022-12-21T01:30:41Z</updated>
    <id>tag:github.com,2022-12-21:/snowie2000/mactype</id>
    <link href="https://github.com/snowie2000/mactype" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Better font rendering for Windows.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MacType&lt;/h1&gt; &#xA;&lt;p&gt;Better font rendering for Windows.&lt;/p&gt; &#xA;&lt;h2&gt;Latest beta&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/snowie2000/mactype/releases&#34;&gt;2021.1-RC1&lt;/a&gt; (Recommended)&lt;/p&gt; &#xA;&lt;h2&gt;Official site&lt;/h2&gt; &#xA;&lt;p&gt;MacType official site:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.mactype.net&#34;&gt;http://www.mactype.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s new?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Win10 compatible&lt;/li&gt; &#xA; &lt;li&gt;CET compatible&lt;/li&gt; &#xA; &lt;li&gt;Updated FreeType&lt;/li&gt; &#xA; &lt;li&gt;Support for color fonts &lt;span&gt;üòé&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;New installer&lt;/li&gt; &#xA; &lt;li&gt;Lots of bug fixes&lt;/li&gt; &#xA; &lt;li&gt;Updates for multi-monitor support&lt;/li&gt; &#xA; &lt;li&gt;Tray app can intercept explorer in Service Mode now&lt;/li&gt; &#xA; &lt;li&gt;Tweaks for diacritics&lt;/li&gt; &#xA; &lt;li&gt;Updates to EasyHook&lt;/li&gt; &#xA; &lt;li&gt;Lower CPU in Tray Mode&lt;/li&gt; &#xA; &lt;li&gt;Better DirectWrite support thanks to „Åó„Çâ„ÅÑ„Å®[http://silight.hatenablog.jp]&lt;/li&gt; &#xA; &lt;li&gt;Separate DirectWrite parameter adjustment&lt;/li&gt; &#xA; &lt;li&gt;Traditional Chinese localization greatly improved thanks to GT Wang&lt;/li&gt; &#xA; &lt;li&gt;English localization improved&lt;/li&gt; &#xA; &lt;li&gt;Added Korea localization, thanks to Ï°∞ÌòÑÌù¨&lt;/li&gt; &#xA; &lt;li&gt;MultiLang system improved&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;p&gt;MacType now accepts donations.&lt;/p&gt; &#xA;&lt;p&gt;Please visit &lt;a href=&#34;http://www.mactype.net&#34;&gt;http://www.mactype.net&lt;/a&gt; and keep an eye on the bottom right corner &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thank you for your support! Your donations will keep the server running, keep me updating, and buy more coffees &lt;span&gt;‚òï&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Please backup your profiles before upgrading!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Only Chinese simplified/Traditional and English are fully localized, some options may missing in MacType Tuner due to the strings missing in the language file. You can help with translations!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to use MacType-patch together with MacType official release, remember to add DirectWrite=0 to your profile or you will have mysterious problems&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re running 64 bit Windows, antimalware/antivirus software may conflict with MacType, because it sees MacType trying to modify running software. One possible workaround is to try running in Service Mode (recommended), or add HookChildProcesses=0 to your profile. See &lt;a href=&#34;https://github.com/snowie2000/mactype/wiki/HookChildProcesses&#34;&gt;https://github.com/snowie2000/mactype/wiki/HookChildProcesses&lt;/a&gt; for an explanation&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Office 2013 does not use DirectWrite or GDI (it uses its own custom rendering), so Office 2013 doesn&#39;t work with MacType. If this bothers you you can use Office 2010 which uses GDI or Office 2016+ which uses DirectWrite.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;WPS has a built in defense that &lt;strong&gt;UNLOADS&lt;/strong&gt; MacType automatically. The latest version has a workaround &lt;a href=&#34;https://github.com/snowie2000/mactype/wiki/WPS&#34;&gt;here&lt;/a&gt; thanks to wmjordan.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to get registry mode back&lt;/h2&gt; &#xA;&lt;p&gt;It is no longer possible to enable registry mode via the wizard in Windows 10.&lt;/p&gt; &#xA;&lt;p&gt;We have a detailed guide on how you can enable the registry mode manually in &lt;a href=&#34;https://github.com/snowie2000/mactype/wiki/Enable-registry-mode-manually&#34;&gt;wiki&lt;/a&gt;, get your screwdrivers ready before you head over to it.&lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;Check how to build &lt;a href=&#34;https://github.com/snowie2000/mactype/raw/directwrite/doc/HOWTOBUILD.md&#34;&gt;document&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Idov31/Venom</title>
    <updated>2022-12-21T01:30:41Z</updated>
    <id>tag:github.com,2022-12-21:/Idov31/Venom</id>
    <link href="https://github.com/Idov31/Venom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Venom is a library that meant to perform evasive communication using stolen browser socket&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Venom&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/C%2B%2B-00599C?style=for-the-badge&amp;amp;logo=c%2B%2B&amp;amp;logoColor=white&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Windows-0078D6?style=for-the-badge&amp;amp;logo=windows&amp;amp;logoColor=white&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Venom is a C++ library that is meant to give an alternative way to communicate, instead of creating a socket that could be traced back to the process, it creates a new &#34;hidden&#34; (there is no window shown) detached edge process (edge was chosen because it is a browser that is installed on every Windows 10+ and won&#39;t raise suspicious) and stealing one of its sockets to perform the network operations.&lt;/p&gt; &#xA;&lt;p&gt;The benefit of creating a detached browser process is that there is no danger that it will be closed accidentally by the user and the sockets exist but not communicating with any site, therefore avoiding possible collisions.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Idov31/Venom/master/img/banner.png&#34; alt=&#34;banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Venom is a single C++ header file so you can just include it in your project and use it as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Venom venom = Venom(L&#34;127.0.0.1&#34;, 3110);&#xA;&#xA;if (!venom.VenomObtainSocket()) {&#xA;    std::cerr &amp;lt;&amp;lt; &#34;[ - ] Failed to get socket.&#34; &amp;lt;&amp;lt; std::endl;&#xA;    venom.~Venom();&#xA;    return -1;&#xA;}&#xA;&#xA;// Do your stuff here.&#xA;...&#xA;&#xA;venom.~Venom();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see the &lt;a href=&#34;https://github.com/idov31/Venom/raw/master/Venom/VenomExample.cpp&#34;&gt;example&lt;/a&gt; that shows how to use the socket for sending or receiving data.&lt;/p&gt; &#xA;&lt;h2&gt;Technical Explanation&lt;/h2&gt; &#xA;&lt;p&gt;The core reason why it works, or to be exact, why the sending and receiving with a socket (possibly connected) without any problem is in the functions documentation.&lt;/p&gt; &#xA;&lt;p&gt;Before I&#39;ll explain more about that, I chose to create a new edge process over using an already opened one for 2 main reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can&#39;t know if the browser socket is already in use and it might cause a collision if you are trying to receive data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A process that you created can be closed by mistake at any time by the user, meaning cutting your communication.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now that you understood the reasons behind creating a new process, I can explain why I can use an already existing socket (which might be connected) to communicate with a target (without connecting it to it).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sending: To send, you can use &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-sendto&#34;&gt;sendto&lt;/a&gt; function and in the documentation, you can read that Microsoft wrote: &lt;em&gt;&#34;A descriptor identifying a &lt;strong&gt;(possibly connected)&lt;/strong&gt; socket.&#34;&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Moreover, you can read that they also wrote &lt;em&gt;&#34;... Even if the connectionless socket has been previously connected to a specific address, the &lt;strong&gt;to parameter overrides the destination address&lt;/strong&gt; ...&#34;&lt;/em&gt; meaning, we can override the target with sendto.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Receiving: To receive data, you can use &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-recv&#34;&gt;recv&lt;/a&gt; function and because no user using this browser process, it reduces greatly the chances of collision.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Neo23x0&#34;&gt;Florian Roth&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xcpu/winsmsd&#34;&gt;ShadowMove&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>