<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-16T01:30:35Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BOBrown/SSD-Centerloss</title>
    <updated>2023-03-16T01:30:35Z</updated>
    <id>tag:github.com,2023-03-16:/BOBrown/SSD-Centerloss</id>
    <link href="https://github.com/BOBrown/SSD-Centerloss" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A implementation of centerloss in multi_box_loss&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SSD-Centerloss&lt;/h1&gt; &#xA;&lt;p&gt;This is an unofficial trial applying Centerloss to SSD multibox_loss function&lt;/p&gt; &#xA;&lt;p&gt;Technical details are in the paper: &lt;strong&gt;A Discriminative Feature Learning Approach for Deep Face Recognition&lt;/strong&gt; &lt;a href=&#34;https://pan.baidu.com/s/1up_PWpR85HqVe10yhFzHoQ&#34;&gt;https://pan.baidu.com/s/1up_PWpR85HqVe10yhFzHoQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SSD(Single Shot MultiBox Detector) implements the multibox_loss function in the &lt;a href=&#34;https://github.com/weiliu89/caffe/tree/ssd&#34;&gt;https://github.com/weiliu89/caffe/tree/ssd&lt;/a&gt;. We can read the loss function through the coding multibox_loss_layer.h/multibox_loss_layer.cpp&lt;/p&gt; &#xA;&lt;h1&gt;Motivation:&lt;/h1&gt; &#xA;&lt;p&gt;When detecting objects on the image, we often employ, including SSD, softmax function to classify the object and L1 regression to localize the object.&lt;/p&gt; &#xA;&lt;p&gt;$$ L(x,c,l,g) = \frac{1}{N}(L_{conf}(x,c)+ \alpha L_{loc}(x,l,g))$$&lt;/p&gt; &#xA;&lt;p&gt;In the equation above, $L_{conf}$ represents the function that classifies each object, $L_{loc}$ stands for the localization function. $N$ is the number of default boxes. This equation means that averaging the sum of all of default boxes loss. Each default box will contribute to the final loss.&lt;/p&gt; &#xA;&lt;p&gt;However, for some objects that are similar to each other, learning the location information may be easy. The softmax function is hard to work due to the similarity of feature of foreground samples. Center loss can effectively decrease the feature difference between the same object. &lt;br&gt; &lt;br&gt; &lt;img src=&#34;https://github.com/BOBrown/SSD-Centerloss/raw/master/center_loss.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How to use SSD-Centerloss&lt;/h1&gt; &#xA;&lt;h3&gt;(1) add center loss layer:&lt;/h3&gt; &#xA;&lt;p&gt;Notation ~~ is the root path of your caffe-ssd dir&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp center_loss_layer.cpp  ~~/caffe-ssd/src/caffe/layers/&#xA;cp center_loss_layer.h  ~~/caffe-ssd/include/caffe/layers/&#xA;cp multibox_center_loss_layer.cpp ~~/caffe-ssd/src/caffe/layers/&#xA;cp multibox_center_loss_layer.hpp ~~/caffe-ssd/include/caffe/layers/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;(2)Then adding the following code in the caffe.proto&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;message CenterLossParameter {&#xA;  optional uint32 num_output = 1; // The number of outputs for the layer&#xA;  optional FillerParameter center_filler = 2; // The filler for the centers&#xA;  // The first axis to be lumped into a single inner product computation;&#xA;  // all preceding axes are retained in the output.&#xA;  // May be negative to index from the end (e.g., -1 for the last axis).&#xA;  optional int32 axis = 3 [default = 1];&#xA;}&#xA;&#xA;message MultiBoxCenterLossParameter{&#xA;//center_features represents the length of features that is equal to the length of object centers in each default box.&#xA;  optional uint32 center_features = 1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding in the message LayerParameter&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;optional MultiBoxCenterLossParameter multibox_center_loss_param = 211;//this value should be the only in this message&#xA;optional CenterLossParameter center_loss_param = 149;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;(3) Getting the center_features of each default box&lt;/h3&gt; &#xA;&lt;p&gt;For an instance, fc7_norm layer has 4 anchors, including aspect ratio = sqrt(2),1,1/2,2. Each anchor has 16 center_features. Therefore the num_output is 64.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;layer {&#xA;  name: &#34;fc7_norm_center_mbox_conf_new&#34;&#xA;  type: &#34;Convolution&#34;&#xA;  bottom: &#34;fc7_norm&#34;&#xA;  top: &#34;fc7_norm_center_mbox_conf&#34;&#xA;  param {&#xA;    lr_mult: 1&#xA;    decay_mult: 1&#xA;  }&#xA;  param {&#xA;    lr_mult: 2&#xA;    decay_mult: 0&#xA;  }&#xA;  convolution_param {&#xA;    num_output: 64&#xA;    pad: 1&#xA;    kernel_size: 3&#xA;    stride: 1&#xA;    weight_filler {&#xA;      type: &#34;xavier&#34;&#xA;    }&#xA;    bias_filler {&#xA;      type: &#34;constant&#34;&#xA;      value: 0&#xA;    }&#xA;  }&#xA;}&#xA;layer {&#xA;  name: &#34;fc7_norm_center_mbox_conf_perm&#34;&#xA;  type: &#34;Permute&#34;&#xA;  bottom: &#34;fc7_norm_center_mbox_conf&#34;&#xA;  top: &#34;fc7_norm_center_mbox_conf_perm&#34;&#xA;  permute_param {&#xA;    order: 0&#xA;    order: 2&#xA;    order: 3&#xA;    order: 1&#xA;  }&#xA;}&#xA;layer {&#xA;  name: &#34;fc7_norm_mbox_center_conf_flat&#34;&#xA;  type: &#34;Flatten&#34;&#xA;  bottom: &#34;fc7_norm_center_mbox_conf_perm&#34;&#xA;  top: &#34;fc7_norm_mbox_center_conf_flat&#34;&#xA;  flatten_param {&#xA;    axis: 1&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;(4) Changing the function type in train.prototxt&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;layer {&#xA;  name: &#34;mbox_loss&#34;&#xA;  type: &#34;MultiBoxCenterLoss&#34; # the type was changed&#xA;  bottom: &#34;mbox_loc&#34;&#xA;  bottom: &#34;mbox_conf&#34;&#xA;  bottom: &#34;mbox_priorbox&#34;&#xA;  bottom: &#34;label&#34;&#xA;  bottom: &#34;mbox_center_conf&#34; #mbox_center_conf is the concatenation of all the center_features in all default box.&#xA;  top: &#34;mbox_loss&#34;&#xA;  include {&#xA;    phase: TRAIN&#xA;  }&#xA;  propagate_down: true&#xA;  propagate_down: true&#xA;  propagate_down: false&#xA;  propagate_down: false&#xA;  propagate_down: true #center_features layers need backward.&#xA;  loss_param {&#xA;    normalization: VALID&#xA;  }&#xA;  multibox_loss_param {&#xA;    loc_loss_type: SMOOTH_L1&#xA;    conf_loss_type: SOFTMAX&#xA;    loc_weight: 1&#xA;    num_classes: 21&#xA;    share_location: true&#xA;    match_type: PER_PREDICTION&#xA;    overlap_threshold: 0.2&#xA;    use_prior_for_matching: true&#xA;    background_label_id: 0&#xA;    use_difficult_gt: true&#xA;    neg_pos_ratio: 3&#xA;    neg_overlap: 0.1&#xA;    code_type: CENTER_SIZE&#xA;    ignore_cross_boundary_bbox: false&#xA;    mining_type: MAX_NEGATIVE&#xA;  }&#xA;  multibox_center_loss_param { &#xA;    center_features: 16 # center_features represents the length of features that is equal to the length of object centers in each default box. &#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jellyfin/jellyfin-media-player</title>
    <updated>2023-03-16T01:30:35Z</updated>
    <id>tag:github.com,2023-03-16:/jellyfin/jellyfin-media-player</id>
    <link href="https://github.com/jellyfin/jellyfin-media-player" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jellyfin Desktop Client based on Plex Media Player&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jellyfin Media Player&lt;/h1&gt; &#xA;&lt;p&gt;Desktop client using jellyfin-web with embedded MPV player. Supports Windows, Mac OS, and Linux. Media plays within the same window using the jellyfin-web interface unlike Jellyfin Desktop. Supports audio passthrough. Based on &lt;a href=&#34;https://github.com/plexinc/plex-media-player&#34;&gt;Plex Media Player&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iwalton3/mpv-shim-misc-docs/master/images/jmp-player-win.png&#34; alt=&#34;Screenshot of Jellyfin Media Player&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Downloads:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jellyfin/jellyfin-media-player/releases&#34;&gt;Windows, Mac, and Linux Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flathub.org/apps/details/com.github.iwalton3.jellyfin-media-player&#34;&gt;Flathub (Linux)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Related Documents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Web client: &lt;a href=&#34;https://repo.jellyfin.org/releases/server/portable/versions/stable/web/&#34;&gt;https://repo.jellyfin.org/releases/server/portable/versions/stable/web/&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note: If you do not provide the web client, the application will use a fallback UI where the user must select a server which has a web client.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Web client integration documentation: &lt;a href=&#34;https://github.com/jellyfin/jellyfin-media-player/raw/master/for-web-developers.md&#34;&gt;for-web-developers.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;API Docs in &lt;a href=&#34;https://github.com/jellyfin/jellyfin-media-player/raw/master/client-api.md&#34;&gt;client-api.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tip: For help building, look at the GitHub Actions file!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building at a glance (Linux)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install build-essential autoconf automake libtool libharfbuzz-dev libfreetype6-dev libfontconfig1-dev libx11-dev libxrandr-dev libvdpau-dev libva-dev mesa-common-dev libegl1-mesa-dev yasm libasound2-dev libpulse-dev libuchardet-dev zlib1g-dev libfribidi-dev git libgnutls28-dev libgl1-mesa-dev libsdl2-dev cmake wget python g++ qtwebengine5-dev qtquickcontrols2-5-dev libqt5x11extras5-dev libcec-dev qml-module-qtquick-controls qml-module-qtwebengine qml-module-qtwebchannel qtbase5-private-dev curl unzip&#xA;mkdir ~/jmp; cd ~/jmp&#xA;git clone https://github.com/mpv-player/mpv-build.git&#xA;cd mpv-build&#xA;echo -Dlibmpv=true &amp;gt; mpv_options&#xA;echo -Dpipewire=disabled &amp;gt;&amp;gt; mpv_options # hopefully temporary&#xA;./rebuild -j4&#xA;sudo ./install&#xA;sudo ln -s /usr/local/lib/x86_64-linux-gnu/libmpv.so /usr/local/lib/x86_64-linux-gnu/libmpv.so.1&#xA;sudo ln -sf /usr/local/lib/x86_64-linux-gnu/libmpv.so /usr/local/lib/libmpv.so.2&#xA;sudo ldconfig&#xA;cd ~/jmp/&#xA;git clone https://github.com/jellyfin/jellyfin-media-player.git&#xA;cd jellyfin-media-player&#xA;./download_webclient.sh&#xA;cd build&#xA;cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=/usr/local/ ..&#xA;make -j4&#xA;sudo make install&#xA;rm -rf ~/jmp/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building for Windows&lt;/h2&gt; &#xA;&lt;p&gt;Please install:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cmake.org/download/&#34;&gt;cmake&lt;/a&gt; - cmake-3.20.0-windows-x86_64.msi &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add cmake to the path.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ninja-build/ninja/releases&#34;&gt;ninja&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Place this in the build directory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.qt.io/download-thank-you?hsLang=en&#34;&gt;QT&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This package is huge. You also need to make a QT account...&lt;/li&gt; &#xA;   &lt;li&gt;Check &#34;MSVC 2019 64-bit&#34; and &#34;Qt WebEngine&#34; under QT 5.15.2.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019&#34;&gt;VS2019 Build Tools&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Again this will use a lot of disk space. The installer is small though.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/mpv-player-windows/files/libmpv/&#34;&gt;libmpv1&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Place the contents in the build directory, in a subfolder called &lt;code&gt;mpv&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Move the contents of the &lt;code&gt;include&lt;/code&gt; folder to an &lt;code&gt;mpv&lt;/code&gt; folder inside the &lt;code&gt;include&lt;/code&gt; folder.&lt;/li&gt; &#xA;   &lt;li&gt;Move the &lt;code&gt;mpv-1.dll&lt;/code&gt; to &lt;code&gt;mpv.dll&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wixtoolset.org/releases/v3.11.2/stable&#34;&gt;WIX&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You need to run these commands in git bash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/jellyfin/jellyfin-media-player&#xA;cd jellyfin-media-player&#xA;./download_webclient.sh&#xA;cd build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open the &#34;x86_x64 Cross Tools Command Prompt for VS 2019&#34;. &lt;code&gt;cd&lt;/code&gt; to the &lt;code&gt;build&lt;/code&gt; directory. Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set PATH=%PATH%;C:\Program Files (x86)\WiX Toolset v3.11\bin&#xA;cmake -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=output -DCMAKE_MAKE_PROGRAM=ninja.exe -DQTROOT=C:/Qt/5.15.2/msvc2019_64 -DMPV_INCLUDE_DIR=mpv/include -DMPV_LIBRARY=mpv/mpv.dll -DCMAKE_INSTALL_PREFIX=output ..&#xA;lib /def:mpv\mpv.def /out:mpv\mpv.dll.lib /MACHINE:X64&#xA;ninja&#xA;ninja windows_package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building for MacOS&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://www.qt.io/download-thank-you?hsLang=en&#34;&gt;QT 5.15.2&lt;/a&gt;, remember to check &lt;code&gt;Qt WebEngine&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then run the following commands (replace &amp;lt;QT_DIR&amp;gt; with your QT installation location):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install mpv ninja&#xA;./download_webclient.sh&#xA;cd build&#xA;cmake -GNinja -DQTROOT=&amp;lt;QT_DIR&amp;gt; -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=output ..&#xA;ninja install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create redistributable bundle, some library paths need to be fixed. At the project root directory, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 ./scripts/fix-install-names.py ./build/output/Jellyfin\ Media\ Player.app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Log File Location&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows: &lt;code&gt;%LOCALAPPDATA%\JellyfinMediaPlayer\logs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux: &lt;code&gt;~/.local/share/jellyfinmediaplayer/logs/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux (Flatpak): &lt;code&gt;~/.var/app/com.github.iwalton3.jellyfin-media-player/data/jellyfinmediaplayer/logs/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;macOS: &lt;code&gt;~/Library/Logs/Jellyfin Media Player/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Config File Location&lt;/h2&gt; &#xA;&lt;p&gt;The main configuration file is called &lt;code&gt;jellyfinmediaplayer.conf&lt;/code&gt;. You can also add a &lt;code&gt;mpv.conf&lt;/code&gt; to configure MPV directly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows: &lt;code&gt;%LOCALAPPDATA%\JellyfinMediaPlayer\&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux: &lt;code&gt;~/.local/share/jellyfinmediaplayer/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux (Flatpak): &lt;code&gt;~/.var/app/com.github.iwalton3.jellyfin-media-player/data/jellyfinmediaplayer/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;macOS: &lt;code&gt;~/Library/Application Support/Jellyfin Media Player/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Web Debugger&lt;/h2&gt; &#xA;&lt;p&gt;To get browser devtools, use remote debugging.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the application with the command argument &lt;code&gt;--remote-debugging-port=9222&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open Chromium or Google Chrome.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to &lt;code&gt;chrome://inspect/#devices&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can now access the developer tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have problems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure &#34;Discover Network Targets&#34; is checked.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;code&gt;localhost:9222&lt;/code&gt; is in the list under &#34;Configure...&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;code&gt;--remote-debugging-port=9222&lt;/code&gt; is specified correctly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Jellyfin Media Player is licensed under GPL v2. See the &lt;code&gt;LICENSE&lt;/code&gt; file. Licenses of dependencies are summarized under &lt;code&gt;resources/misc/licenses.txt&lt;/code&gt;. This file can also be printed at runtime when using the &lt;code&gt;--licenses&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h2&gt;Unofficial Plugin Support&lt;/h2&gt; &#xA;&lt;p&gt;You can enable experimental support for &lt;a href=&#34;https://github.com/nicknsy/jellyscrub&#34;&gt;Jellyscrub&lt;/a&gt; and &lt;a href=&#34;https://github.com/ConfusedPolarBear/intro-skipper&#34;&gt;Skip Intro&lt;/a&gt; in client settings. These are included for convenience only and is not an endorsement or long-term commitment to ensure functionality. See &lt;code&gt;src/native&lt;/code&gt; for details on what the plugins modify code-wise.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you build MPV from source, you currently need to disable pipewire or else the client will segfault.&lt;/p&gt;</summary>
  </entry>
</feed>