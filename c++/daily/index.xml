<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-26T01:31:03Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>KTStephano/StratusGFX</title>
    <updated>2023-07-26T01:31:03Z</updated>
    <id>tag:github.com,2023-07-26:/KTStephano/StratusGFX</id>
    <link href="https://github.com/KTStephano/StratusGFX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Realtime 3D rendering engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8399235/254135954-84b9cb9a-b01e-43e0-8a3c-16217af4432e.jpg&#34; alt=&#34;logo&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Release State: &lt;strong&gt;Pre-Release/Beta&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Engine Version: 0.10&lt;/p&gt; &#xA;&lt;p&gt;Realtime 3D rendering engine. Expect bugs and instability as it is still under development. The engine is free and open source (licensed under MPL-2.0). Please feel free to contact me about any questions or issues you have!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://ktstephano.github.io/assets/v0.10/SponzaGI_Front.png&#34; alt=&#34;sponza&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;(3D Model: Intel Sponza)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://ktstephano.github.io/assets/v0.10/FinalAfterPostProcessing.png&#34; alt=&#34;sanmiguel&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;(3D Model: San Miguel)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://ktstephano.github.io/assets/v0.10/Cornell_Front.png&#34; alt=&#34;cornell_front&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://ktstephano.github.io/assets/v0.10/Cornell_Back.png&#34; alt=&#34;cornell_back&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;(3D Model: Cornell Box)&lt;/p&gt; &#xA;&lt;p&gt;-&amp;gt; &lt;a href=&#34;https://www.youtube.com/watch?v=dj0wVxwd1ng&#34;&gt;Video Feature Reel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;-&amp;gt; &lt;a href=&#34;https://ktstephano.github.io/rendering/stratusgfx/feature_reel&#34;&gt;Graphics Image Feature Reel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;-&amp;gt; &lt;a href=&#34;https://ktstephano.github.io/rendering/stratusgfx/architecture&#34;&gt;High Level Architecture Overview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;-&amp;gt; &lt;a href=&#34;https://ktstephano.github.io/rendering/stratusgfx/frame_analysis_v0_10&#34;&gt;How A Frame Is Rendered&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Purpose&lt;/h1&gt; &#xA;&lt;p&gt;This project was created as a hobby research project for learning low level engine development and implementing modern graphics techniques.&lt;/p&gt; &#xA;&lt;h1&gt;Use Cases&lt;/h1&gt; &#xA;&lt;p&gt;At its core Stratus is a rendering engine first with minimal features found in general purpose engines. Its focus is on modern 3D graphics capabilities. Because of this it has two main use cases:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;People taking it and using it as a learning resource.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Integration into other general purpose engines (new or existing) and modeling tools.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Because of the MPL license, any community changes made to the rendering code will continue to help others in new and existing projects that use it.&lt;/p&gt; &#xA;&lt;h1&gt;Current Supported Features&lt;/h1&gt; &#xA;&lt;h3&gt;Graphics&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Physically based metallic-roughness pipeline&lt;/li&gt; &#xA; &lt;li&gt;Realtime global illumination&lt;/li&gt; &#xA; &lt;li&gt;Spatiotemporal image denoising&lt;/li&gt; &#xA; &lt;li&gt;Raymarched volumetric lighting and shadowing&lt;/li&gt; &#xA; &lt;li&gt;Cascaded shadow mapping&lt;/li&gt; &#xA; &lt;li&gt;Deferred lighting&lt;/li&gt; &#xA; &lt;li&gt;Mesh LOD generation and selection&lt;/li&gt; &#xA; &lt;li&gt;GPU Frustum Culling&lt;/li&gt; &#xA; &lt;li&gt;Screen Space Ambient Occlusion (SSAO)&lt;/li&gt; &#xA; &lt;li&gt;Reinhard or ACES Tonemapping&lt;/li&gt; &#xA; &lt;li&gt;Fog&lt;/li&gt; &#xA; &lt;li&gt;Bloom&lt;/li&gt; &#xA; &lt;li&gt;Fast Approximate Anti-Aliasing (FXAA)&lt;/li&gt; &#xA; &lt;li&gt;Temporal Anti-Aliasing (TAA)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Engine&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pool allocators&lt;/li&gt; &#xA; &lt;li&gt;GPU memory allocators/managers&lt;/li&gt; &#xA; &lt;li&gt;Multi threaded utilities&lt;/li&gt; &#xA; &lt;li&gt;Concurrent hash map&lt;/li&gt; &#xA; &lt;li&gt;Entity-Component System (ECS)&lt;/li&gt; &#xA; &lt;li&gt;Logging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Modern graphics API features used&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compute shaders&lt;/li&gt; &#xA; &lt;li&gt;Direct state access&lt;/li&gt; &#xA; &lt;li&gt;Programmable vertex pulling&lt;/li&gt; &#xA; &lt;li&gt;Multi draw elements indirect&lt;/li&gt; &#xA; &lt;li&gt;Shader storage buffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Minimum Hardware Requirements&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Minimum&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU&lt;/td&gt; &#xA;   &lt;td&gt;Ryzen 3 1200 (quad core)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RAM&lt;/td&gt; &#xA;   &lt;td&gt;8 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GPU&lt;/td&gt; &#xA;   &lt;td&gt;Nvidia GTX 1050 Ti&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Building For Windows &amp;amp; Linux&lt;/h1&gt; &#xA;&lt;p&gt;This code base will currently not work on MacOS. Linux and Windows should both be fine so long as the graphics driver supports OpenGL 4.6 and the compiler supports C++17.&lt;/p&gt; &#xA;&lt;p&gt;First set up the repo&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/KTStephano/StratusGFX.git&#xA;cd StratusGFX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build 3rd party dependencies -&amp;gt; should only need to do this once per clone&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 ./dependency_build.py --assimp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;-&amp;gt; LINUX NOTE: If you get an error while building assimp, use your local package manager to install assimp instead. Then re-run the above step as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 ./dependency_build.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now build the StratusGFX source&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -Bbuild -S. -DBUILD_TESTS=OFF&#xA;cmake --build build/ -j 8 --config RelWithDebInfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -Bbuild -S. -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTS=OFF&#xA;cmake --build build/ -j 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All executables will be put into StratusGFX/Bin. Make sure you run them while inside Bin/. Good ones to run to see if it worked are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Ex00_StartupShutdown.exe (runs through initialize, run one frame, shutdown sequence)&#xA;Ex01_StratusGFX.exe (you should see a forest of red cubes since textures aren&#39;t bundled with source)&#xA;StratusEngineUnitTests.exe&#xA;StratusEngineIntegrationTests.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;First Places to Look&lt;/h1&gt; &#xA;&lt;p&gt;You can check &lt;a href=&#34;https://ktstephano.github.io/rendering/stratusgfx/architecture&#34;&gt;High Level Architecture Overview&lt;/a&gt;, or you can start by looking through the code under Examples/ExampleEnv00 and Examples/ExampleEnv01. They both depend on code that is inside of Examples/Common which is another good place to look around.&lt;/p&gt; &#xA;&lt;p&gt;None of the test scenes are bundled with this source so the rest of the environments will be completely blank when running.&lt;/p&gt; &#xA;&lt;h1&gt;Running Example Environments 2-7&lt;/h1&gt; &#xA;&lt;p&gt;When starting the examples will take a bit to load/process. You can see the status in the console. After starting you may experience some temporary frame drops but this will stabilize quickly.&lt;/p&gt; &#xA;&lt;p&gt;-&amp;gt; More in depth explanation here: &lt;a href=&#34;https://github.com/KTStephano/StratusGFX/wiki/Examples&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;A zip file containing Sponza, Interrogation Room, San Miguel, Bistro and Bathroom can be found here: &lt;a href=&#34;https://drive.google.com/file/d/1m56T8cWMwAOHTAIbxAn-891trehgJpzH/view?usp=drive_link&#34;&gt;https://drive.google.com/file/d/1m56T8cWMwAOHTAIbxAn-891trehgJpzH/view?usp=drive_link&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extract the Resources.zip folder into the root of StratusGFX. It will then be at the same level as Bin/, Examples/, Source/, Tests/. Make sure that the folder structure looks like StratusGFX/Resources/* where * will be folders such as Sponza, Bistro, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change directory into Bin/ and run the example environments.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example environment 01 will still be a forest of red cubes since its textures and models aren&#39;t part of the bundle.&lt;/p&gt; &#xA;&lt;p&gt;Credits for the 3D assets used in the examples/demos are as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sketchfab.com/3d-models/abandoned-warehouse-1e40d433ed6f48fb880a0d2172aff7ca&#34;&gt;Crytek Sponza&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/developer/topic-technology/graphics-research/samples.html&#34;&gt;Intel Sponza&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://casual-effects.com/data/&#34;&gt;San Miguel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.nvidia.com/orca/amazon-lumberyard-bistro&#34;&gt;Bistro&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.blender.org/p/gallery/5dd6d7044441651fa3decb56&#34;&gt;Junk Shop&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sketchfab.com/3d-models/the-bathroom-free-d5e5035dda434b8d9beaa7271f1c85fc&#34;&gt;The Bathroom&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sketchfab.com/3d-models/interogation-room-6e9151ec29494469a74081ddc054d569&#34;&gt;Interrogation Room&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sketchfab.com/3d-models/abandoned-warehouse-1e40d433ed6f48fb880a0d2172aff7ca&#34;&gt;Abandoned Warehouse&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Controls For Example Environments&lt;/h1&gt; &#xA;&lt;p&gt;WASD to move&lt;/p&gt; &#xA;&lt;p&gt;Left mouse to fly up, right mouse to fly down&lt;/p&gt; &#xA;&lt;p&gt;U unlocks look up/look down for camera&lt;/p&gt; &#xA;&lt;p&gt;F toggles camera light&lt;/p&gt; &#xA;&lt;p&gt;E toggles directional light&lt;/p&gt; &#xA;&lt;p&gt;G toggles global illumination&lt;/p&gt; &#xA;&lt;p&gt;R recompiles all shaders&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alibaba/async_simple</title>
    <updated>2023-07-26T01:31:03Z</updated>
    <id>tag:github.com,2023-07-26:/alibaba/async_simple</id>
    <link href="https://github.com/alibaba/async_simple" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, light-weight and easy-to-use asynchronous components&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;async_simple&lt;/h1&gt; &#xA;&lt;h6 align=&#34;center&#34;&gt;A Simple, Light-Weight Asynchronous C++ Framework&lt;/h6&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;license&#34; src=&#34;https://img.shields.io/github/license/alibaba/async_simple?style=flat-square&#34;&gt; &lt;img alt=&#34;language&#34; src=&#34;https://img.shields.io/github/languages/top/alibaba/async_simple?style=flat-square&#34;&gt; &lt;img alt=&#34;feature&#34; src=&#34;https://img.shields.io/badge/c++20-Coroutines-orange?style=flat-square&#34;&gt; &lt;img alt=&#34;last commit&#34; src=&#34;https://img.shields.io/github/last-commit/alibaba/async_simple?style=flat-square&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/async_simple/main/README_CN.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The async_simple is a library offering simple, light-weight and easy-to-use components to write asynchronous codes. The components offered include the Lazy (based on C++20 stackless coroutine), the Uthread (based on stackful coroutine) and the traditional Future/Promise.&lt;/p&gt; &#xA;&lt;h1&gt;Install Dependencies&lt;/h1&gt; &#xA;&lt;p&gt;The build of async_simple need libaio, googletest and cmake. Both libaio and googletest are optional. (Testing before using is highly suggested.)&lt;/p&gt; &#xA;&lt;h2&gt;Using apt (ubuntu and debian&#39;s)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install libaio&#xA;sudo apt install libaio-dev -y&#xA;# Install cmake&#xA;sudo apt install cmake -y&#xA;# Install bazel See: https://bazel.build/install/ubuntu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;using &lt;code&gt;apt&lt;/code&gt; to install gtest, gmock&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y libgtest-dev libgmock-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/async_simple/main/#Build-Dependencies-From-Source&#34;&gt;Try to build gtest and gmock from source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install gtest&#xA;sudo apt install libgtest-dev -y&#xA;sudo apt install cmake -y&#xA;cd /usr/src/googletest/gtest&#xA;sudo mkdir build &amp;amp;&amp;amp; cd build&#xA;sudo cmake .. &amp;amp;&amp;amp; sudo make install&#xA;cd .. &amp;amp;&amp;amp; sudo rm -rf build&#xA;cd /usr/src/googletest/gmock&#xA;sudo mkdir build &amp;amp;&amp;amp; cd build&#xA;sudo cmake .. &amp;amp;&amp;amp; sudo make install&#xA;cd .. &amp;amp;&amp;amp; sudo rm -rf build&#xA;&#xA;# Install bazel See: https://bazel.build/install/ubuntu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using yum (CentOS and Fedora)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install libaio&#xA;sudo yum install libaio-devel -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;code&gt;yum&lt;/code&gt; to install gtest, gmock&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install gtest-devel gmock-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/async_simple/main/#Build-Dependencies-From-Source&#34;&gt;Try to build gtest and gmock from source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using Pacman (Arch)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Optional&#xA;sudo pacman -S libaio&#xA;# Use cmake to build project&#xA;sudo pacman -S cmake gtest&#xA;# Use bazel to build project&#xA;sudo pacman -S bazel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Homebrew (macOS)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Use cmake to build project&#xA;brew install cmake&#xA;brew install googletest&#xA;# Use bazel to build project&#xA;brew install bazel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Install cmake&#xA;winget install cmake&#xA;# Install google-test&#xA;# TODO&#xA;# Install bazel See: https://bazel.build/install/windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Dependencies From Source&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# libaio (optional)&#xA;# you can skip this if you install libaio from packages&#xA;git clone https://pagure.io/libaio.git&#xA;cd libaio&#xA;sudo make install&#xA;# gmock and gtest&#xA;git clone git@github.com:google/googletest.git -b v1.8.x&#xA;cd googletest&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake .. &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiler Requirement&lt;/h2&gt; &#xA;&lt;p&gt;Required Compiler: clang (&amp;gt;= 10.0.0) or gcc (&amp;gt;= 10.3) or Apple-clang (&amp;gt;= 14)&lt;/p&gt; &#xA;&lt;p&gt;Note that we need to add &lt;code&gt;-Wno-maybe-uninitialized&lt;/code&gt; option when we use gcc12 due to a false positive diagnostic message by gcc12&lt;/p&gt; &#xA;&lt;p&gt;Note that when using clang15 it may be necessary to add the &lt;code&gt;-Wno-unsequenced&lt;/code&gt; option, which is a false positive of clang15. See &lt;a href=&#34;https://github.com/llvm/llvm-project/issues/56768&#34;&gt;https://github.com/llvm/llvm-project/issues/56768&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;If you meet any problem about MSVC Compiler Error C4737. Try to add option /EHa to fix the problem.&lt;/p&gt; &#xA;&lt;h2&gt;Demo example dependency&lt;/h2&gt; &#xA;&lt;p&gt;Demo example depends on standalone asio(&lt;a href=&#34;https://github.com/chriskohlhoff/asio/tree/master/asio&#34;&gt;https://github.com/chriskohlhoff/asio/tree/master/asio&lt;/a&gt;), the commit id:f70f65ae54351c209c3a24704624144bfe8e70a3&lt;/p&gt; &#xA;&lt;h1&gt;Build&lt;/h1&gt; &#xA;&lt;h2&gt;cmake&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir build &amp;amp;&amp;amp; cd build&#xA;# Specify [-DASYNC_SIMPLE_ENABLE_TESTS=OFF] to skip tests.&#xA;# Specify [-DASYNC_SIMPLE_BUILD_DEMO_EXAMPLE=OFF] to skip build demo example.&#xA;# Specify [-DASYNC_SIMPLE_DISABLE_AIO=ON] to skip the build libaio&#xA;CXX=clang++ CC=clang cmake ../ -DCMAKE_BUILD_TYPE=[Release|Debug] [-DASYNC_SIMPLE_ENABLE_TESTS=OFF] [-DASYNC_SIMPLE_BUILD_DEMO_EXAMPLE=OFF] [-DASYNC_SIMPLE_DISABLE_AIO=ON]&#xA;# for gcc, use CXX=g++ CC=gcc&#xA;make -j4&#xA;make test # optional&#xA;make install # sudo if required&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Conan is also supported. You can install async_simple to conan local cache.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build &amp;amp;&amp;amp; cd build&#xA;conan create ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;bazel&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Specify [--define=ASYNC_SIMPLE_DISABLE_AIO=true] to skip the build libaio&#xA;# Example bazel build --define=ASYNC_SIMPLE_DISABLE_AIO=true ...&#xA;bazel build ...                      # compile all target&#xA;bazel build ...:all                  # compile all target&#xA;bazel build ...:*                    # compile all target&#xA;bazel build -- ... -benchmarks/...   # compile all target except those beneath `benchmarks`&#xA;bazel test ...                       # compile and execute tests&#xA;# Specify compile a target&#xA;# Format: bazel [build|test|run] [directory name]:[binary name]&#xA;# Example&#xA;bazel build :async_simple           # only compile libasync_simple&#xA;bazel run benchmarks:benchmarking   # compile and run benchmark&#xA;bazel test async_simple/coro/test:async_simple_coro_test&#xA;# Use clang toolchain&#xA;bazel build --action_env=CXX=clang++ --action_env=CC=clang ...&#xA;# Add compile option &#xA;bazel build --copt=&#39;-O0&#39; --copt=&#39;-ggdb&#39; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://bazel.build/run/build&#34;&gt;this&lt;/a&gt; get more infomation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt; ...&lt;/code&gt; Indicates recursively scan all targets, recognized as &lt;code&gt;../..&lt;/code&gt; in &lt;code&gt;oh-my-zsh&lt;/code&gt;, can be replaced by other &lt;code&gt;shell&lt;/code&gt; or &lt;code&gt;bash -c &#39;commond&#39;&lt;/code&gt; to run, such as &lt;code&gt;bash -c &#39;bazel build&#39; ...&lt;/code&gt; or use &lt;code&gt;bazel build ...:all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;async_simple&lt;/code&gt; as a dependency, see also &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/async_simple/main/bazel/support/README.md&#34;&gt;bazel support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Docker Compile Environment&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;# for centos-7&#xA;git clone https://github.com/alibaba/async_simple.git&#xA;cd async_simple/docker/centos7&#xA;docker build . --no-cache -t async_simple:1.0 --network host&#xA;docker run -it --name test-async-simple async_simple:1.0 /bin/bash&#xA;// Has entered centos bash shell&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake3 .. -DCMAKE_BUILD_TYPE=Release&#xA;&#xA;# for ubuntu 22.04&#xA;git clone https://github.com/alibaba/async_simple.git&#xA;cd async_simple/docker/ubuntu&#xA;docker build . --no-cache -t async_simple:1.0 --network host&#xA;docker run -it --name test-async-simple async_simple:1.0 /bin/bash&#xA;// Has entered ubuntu bash shell&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;# use clang for compile&#xA;CXX=clang++-13 CC=clang-13 cmake .. -DCMAKE_BUILD_TYPE=Release&#xA;# use g++ for compile&#xA;CXX=g++-11 CC=gcc-11 cmake .. -DCMAKE_BUILD_TYPE=Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Get Started&lt;/h1&gt; &#xA;&lt;p&gt;Our documents are hosted by GitHub Pages, &lt;a href=&#34;https://alibaba.github.io/async_simple/docs.en/GetStarted.html&#34;&gt;go to Get Started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After installing and reading &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/async_simple/main/docs/docs.en/Lazy.md&#34;&gt;Lazy&lt;/a&gt; to get familiar with API, here is a &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/async_simple/main/docs/docs.en/GetStarted.md&#34;&gt;demo&lt;/a&gt; use Lazy to count char in a file.&lt;/p&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;p&gt;We also give a &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/async_simple/main/docs/docs.en/QuantitativeAnalysisReportOfCoroutinePerformance.md&#34;&gt;Quantitative Analysis Report&lt;/a&gt; Of the Lazy (based on C++20 stackless coroutine) and the Uthread (based on stackful coroutine).&lt;/p&gt; &#xA;&lt;h1&gt;C++20 Modules Support&lt;/h1&gt; &#xA;&lt;p&gt;We have &lt;strong&gt;experimental&lt;/strong&gt; support for C++20 Modules in &lt;code&gt;modules/async_simple.cppm&lt;/code&gt;. We can build the &lt;code&gt;async_simple&lt;/code&gt; module by &lt;code&gt;xmake&lt;/code&gt; and &lt;code&gt;cmake&lt;/code&gt;. We can find the related usage in &lt;code&gt;CountChar&lt;/code&gt;, &lt;code&gt;ReadFiles&lt;/code&gt;, &lt;code&gt;LazyTest.cpp&lt;/code&gt; and &lt;code&gt;FutureTest.cpp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We need clang (&amp;gt;= d18806e6733 or simply clang16) to build the &lt;code&gt;async_simple&lt;/code&gt; module. It is only tested for libstdc++10.3. Due to the current support status for C++20, it won&#39;t be a surprise if the compilation fails in higher version (or other) STLs.&lt;/p&gt; &#xA;&lt;p&gt;We can build &lt;code&gt;async_simple&lt;/code&gt; module with xmake (&amp;gt;= 0eccc6e) by the commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can build &lt;code&gt;async_simple&lt;/code&gt; module with cmake (&amp;gt;= d18806e673 or cmake3.26) by the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build_modules &amp;amp;&amp;amp; cd build_modules&#xA;CC=clang CXX=clang++ cmake .. -DCMAKE_BUILD_TYPE=Release -DASYNC_SIMPLE_BUILD_MODULES=ON -GNinja&#xA;ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that&lt;/strong&gt; the &lt;code&gt;async_simple&lt;/code&gt; module in main branch is actually a named module&#39;s wrapper for headers for compatability. We can find the practical usage of C++20 Modules in &lt;a href=&#34;https://github.com/alibaba/async_simple/tree/CXX20Modules&#34;&gt;https://github.com/alibaba/async_simple/tree/CXX20Modules&lt;/a&gt;, which contains the support for xmake and cmake as well.&lt;/p&gt; &#xA;&lt;h1&gt;Questions&lt;/h1&gt; &#xA;&lt;p&gt;For questions, we suggest to read &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/async_simple/main/docs/docs.en&#34;&gt;docs&lt;/a&gt;, &lt;a href=&#34;https://github.com/alibaba/async_simple/issues&#34;&gt;issues&lt;/a&gt; and &lt;a href=&#34;https://github.com/alibaba/async_simple/discussions&#34;&gt;discussions&lt;/a&gt; first. If there is no satisfying answer, you could file an &lt;a href=&#34;https://github.com/alibaba/async_simple/issues&#34;&gt;issues&lt;/a&gt; or start a thread in &lt;a href=&#34;https://github.com/alibaba/async_simple/discussions&#34;&gt;discussions&lt;/a&gt;. Specifically, for defect report or feature enhancement, it&#39;d be better to file an &lt;a href=&#34;https://github.com/alibaba/async_simple/issues&#34;&gt;issues&lt;/a&gt;. And for how-to-use questions, it&#39;d be better to start a thread in &lt;a href=&#34;https://github.com/alibaba/async_simple/discussions&#34;&gt;discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;How to Contribute&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/async_simple/main/docs/docs.en/HowToFixIssue.md&#34;&gt;How to fix issue&lt;/a&gt; document firstly.&lt;/li&gt; &#xA; &lt;li&gt;Run tests and &lt;code&gt;git-clang-format HEAD^&lt;/code&gt; locally for the change. Note that the version of clang-format in CI is clang-format 14. So that it is possible your local format result is inconsistency with the format result in the CI. In the case, you need to install the new clang-format or adopt the suggested change by hand. In case the format result is not good, it is OK to accept the PR temporarily and file an issue for the clang-formt.&lt;/li&gt; &#xA; &lt;li&gt;Create a PR, fill in the PR template.&lt;/li&gt; &#xA; &lt;li&gt;Choose one or more reviewers from contributors: (e.g., ChuanqiXu9, RainMark, foreverhy, qicosmos).&lt;/li&gt; &#xA; &lt;li&gt;Get approved and merged.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Contact us&lt;/h1&gt; &#xA;&lt;p&gt;Please scan the following QR code of DingTalk to contact us.&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/alibaba/async_simple/main/docs/docs.cn/images/ding_talk_group.png&#34; alt=&#34;dingtalk&#34; width=&#34;200&#34; height=&#34;200&#34; align=&#34;bottom&#34;&gt; &#xA;&lt;/center&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;async_simple is distributed under the Apache License (Version 2.0) This product contains various third-party components under other open source licenses. See the NOTICE file for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rapidsai/cuml</title>
    <updated>2023-07-26T01:31:03Z</updated>
    <id>tag:github.com,2023-07-26:/rapidsai/cuml</id>
    <link href="https://github.com/rapidsai/cuml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;cuML - RAPIDS Machine Learning Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&#xA; &lt;div align=&#34;left&#34;&gt;&#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/rapidsai/cuml/branch-23.08/img/rapids_logo.png&#34; width=&#34;90px&#34;&gt;&amp;nbsp;cuML - GPU Machine Learning Algorithms&#xA; &lt;/div&gt;&lt;/h1&gt; &#xA;&lt;p&gt;cuML is a suite of libraries that implement machine learning algorithms and mathematical primitives functions that share compatible APIs with other &lt;a href=&#34;https://rapids.ai/&#34;&gt;RAPIDS&lt;/a&gt; projects.&lt;/p&gt; &#xA;&lt;p&gt;cuML enables data scientists, researchers, and software engineers to run traditional tabular ML tasks on GPUs without going into the details of CUDA programming. In most cases, cuML&#39;s Python API matches the API from &lt;a href=&#34;https://scikit-learn.org&#34;&gt;scikit-learn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For large datasets, these GPU-based implementations can complete 10-50x faster than their CPU equivalents. For details on performance, see the &lt;a href=&#34;https://github.com/rapidsai/cuml/tree/branch-23.04/notebooks/tools&#34;&gt;cuML Benchmarks Notebook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As an example, the following Python snippet loads input and computes DBSCAN clusters, all on GPU, using cuDF:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import cudf&#xA;from cuml.cluster import DBSCAN&#xA;&#xA;# Create and populate a GPU DataFrame&#xA;gdf_float = cudf.DataFrame()&#xA;gdf_float[&#39;0&#39;] = [1.0, 2.0, 5.0]&#xA;gdf_float[&#39;1&#39;] = [4.0, 2.0, 1.0]&#xA;gdf_float[&#39;2&#39;] = [4.0, 2.0, 1.0]&#xA;&#xA;# Setup and fit clusters&#xA;dbscan_float = DBSCAN(eps=1.0, min_samples=1)&#xA;dbscan_float.fit(gdf_float)&#xA;&#xA;print(dbscan_float.labels_)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0    0&#xA;1    1&#xA;2    2&#xA;dtype: int32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;cuML also features multi-GPU and multi-node-multi-GPU operation, using &lt;a href=&#34;https://www.dask.org&#34;&gt;Dask&lt;/a&gt;, for a growing list of algorithms. The following Python snippet reads input from a CSV file and performs a NearestNeighbors query across a cluster of Dask workers, using multiple GPUs on a single node:&lt;/p&gt; &#xA;&lt;p&gt;Initialize a &lt;code&gt;LocalCUDACluster&lt;/code&gt; configured with &lt;a href=&#34;https://github.com/rapidsai/ucx-py&#34;&gt;UCX&lt;/a&gt; for fast transport of CUDA arrays&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Initialize UCX for high-speed transport of CUDA arrays&#xA;from dask_cuda import LocalCUDACluster&#xA;&#xA;# Create a Dask single-node CUDA cluster w/ one worker per device&#xA;cluster = LocalCUDACluster(protocol=&#34;ucx&#34;,&#xA;                           enable_tcp_over_ucx=True,&#xA;                           enable_nvlink=True,&#xA;                           enable_infiniband=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load data and perform &lt;code&gt;k-Nearest Neighbors&lt;/code&gt; search. &lt;code&gt;cuml.dask&lt;/code&gt; estimators also support &lt;code&gt;Dask.Array&lt;/code&gt; as input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;from dask.distributed import Client&#xA;client = Client(cluster)&#xA;&#xA;# Read CSV file in parallel across workers&#xA;import dask_cudf&#xA;df = dask_cudf.read_csv(&#34;/path/to/csv&#34;)&#xA;&#xA;# Fit a NearestNeighbors model and query it&#xA;from cuml.dask.neighbors import NearestNeighbors&#xA;nn = NearestNeighbors(n_neighbors = 10, client=client)&#xA;nn.fit(df)&#xA;neighbors = nn.kneighbors(df)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For additional examples, browse our complete &lt;a href=&#34;https://docs.rapids.ai/api/cuml/stable/&#34;&gt;API documentation&lt;/a&gt;, or check out our example &lt;a href=&#34;https://github.com/rapidsai/cuml/tree/branch-23.04/notebooks&#34;&gt;walkthrough notebooks&lt;/a&gt;. Finally, you can find complete end-to-end examples in the &lt;a href=&#34;https://github.com/rapidsai/notebooks-contrib&#34;&gt;notebooks-contrib repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Algorithms&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Algorithm&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Clustering&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Density-Based Spatial Clustering of Applications with Noise (DBSCAN)&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Hierarchical Density-Based Spatial Clustering of Applications with Noise (HDBSCAN)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;K-Means&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Single-Linkage Agglomerative Clustering&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Dimensionality Reduction&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Principal Components Analysis (PCA)&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Incremental PCA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Truncated Singular Value Decomposition (tSVD)&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Uniform Manifold Approximation and Projection (UMAP)&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU Inference via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Random Projection&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;t-Distributed Stochastic Neighbor Embedding (TSNE)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Linear Models for Regression or Classification&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linear Regression (OLS)&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linear Regression with Lasso or Ridge Regularization&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ElasticNet Regression&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LARS Regression&lt;/td&gt; &#xA;   &lt;td&gt;(experimental)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Logistic Regression&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask-GLM &lt;a href=&#34;https://github.com/daxiongshu/rapids-demos&#34;&gt;demo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Naive Bayes&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stochastic Gradient Descent (SGD), Coordinate Descent (CD), and Quasi-Newton (QN) (including L-BFGS and OWL-QN) solvers for linear models&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Nonlinear Models for Regression or Classification&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Random Forest (RF) Classification&lt;/td&gt; &#xA;   &lt;td&gt;Experimental multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Random Forest (RF) Regression&lt;/td&gt; &#xA;   &lt;td&gt;Experimental multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Inference for decision tree-based models&lt;/td&gt; &#xA;   &lt;td&gt;Forest Inference Library (FIL)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;K-Nearest Neighbors (KNN) Classification&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask+&lt;a href=&#34;https://github.com/rapidsai/ucx-py&#34;&gt;UCX&lt;/a&gt;, uses &lt;a href=&#34;https://github.com/facebookresearch/faiss&#34;&gt;Faiss&lt;/a&gt; for Nearest Neighbors Query.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;K-Nearest Neighbors (KNN) Regression&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask+&lt;a href=&#34;https://github.com/rapidsai/ucx-py&#34;&gt;UCX&lt;/a&gt;, uses &lt;a href=&#34;https://github.com/facebookresearch/faiss&#34;&gt;Faiss&lt;/a&gt; for Nearest Neighbors Query.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Support Vector Machine Classifier (SVC)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Epsilon-Support Vector Regression (SVR)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Preprocessing&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Standardization, or mean removal and variance scaling / Normalization / Encoding categorical features / Discretization / Imputation of missing values / Polynomial features generation / and coming soon custom transformers and non-linear transformation&lt;/td&gt; &#xA;   &lt;td&gt;Based on Scikit-Learn preprocessing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Time Series&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Holt-Winters Exponential Smoothing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Auto-regressive Integrated Moving Average (ARIMA)&lt;/td&gt; &#xA;   &lt;td&gt;Supports seasonality (SARIMA)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Model Explanation&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SHAP Kernel Explainer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://shap.readthedocs.io/en/latest/&#34;&gt;Based on SHAP&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SHAP Permutation Explainer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://shap.readthedocs.io/en/latest/&#34;&gt;Based on SHAP&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Execution device interoperability&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run estimators interchangeably from host/cpu or device/gpu with minimal code change &lt;a href=&#34;https://docs.rapids.ai/api/cuml/stable/execution_device_interoperability.html&#34;&gt;demo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;K-Nearest Neighbors (KNN) Search&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask+&lt;a href=&#34;https://github.com/rapidsai/ucx-py&#34;&gt;UCX&lt;/a&gt;, uses &lt;a href=&#34;https://github.com/facebookresearch/faiss&#34;&gt;Faiss&lt;/a&gt; for Nearest Neighbors Query.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://rapids.ai/start.html#rapids-release-selector&#34;&gt;the RAPIDS Release Selector&lt;/a&gt; for the command line to install either nightly or official release cuML packages via Conda or Docker.&lt;/p&gt; &#xA;&lt;h2&gt;Build/Install from Source&lt;/h2&gt; &#xA;&lt;p&gt;See the build &lt;a href=&#34;https://raw.githubusercontent.com/rapidsai/cuml/branch-23.08/BUILD.md&#34;&gt;guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/rapidsai/cuml/branch-23.08/CONTRIBUTING.md&#34;&gt;guide for contributing to cuML&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;The RAPIDS team has a number of blogs with deeper technical dives and examples. &lt;a href=&#34;https://medium.com/rapids-ai/tagged/machine-learning&#34;&gt;You can find them here on Medium.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For additional details on the technologies behind cuML, as well as a broader overview of the Python Machine Learning landscape, see &lt;a href=&#34;https://arxiv.org/abs/2002.04803&#34;&gt;&lt;em&gt;Machine Learning in Python: Main developments and technology trends in data science, machine learning, and artificial intelligence&lt;/em&gt; (2020)&lt;/a&gt; by Sebastian Raschka, Joshua Patterson, and Corey Nolet.&lt;/p&gt; &#xA;&lt;p&gt;Please consider citing this when using cuML in a project. You can use the citation BibTeX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{raschka2020machine,&#xA;  title={Machine Learning in Python: Main developments and technology trends in data science, machine learning, and artificial intelligence},&#xA;  author={Raschka, Sebastian and Patterson, Joshua and Nolet, Corey},&#xA;  journal={arXiv preprint arXiv:2002.04803},&#xA;  year={2020}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Find out more details on the &lt;a href=&#34;https://rapids.ai/community.html&#34;&gt;RAPIDS site&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&#xA; &lt;div align=&#34;left&#34;&gt;&#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/rapidsai/cuml/branch-23.08/img/rapids_logo.png&#34; width=&#34;265px&#34;&gt;&#xA; &lt;/div&gt; Open GPU Data Science&lt;/h2&gt; &#xA;&lt;p&gt;The RAPIDS suite of open source software libraries aim to enable execution of end-to-end data science and analytics pipelines entirely on GPUs. It relies on NVIDIA® CUDA® primitives for low-level compute optimization, but exposing that GPU parallelism and high-bandwidth memory speed through user-friendly Python interfaces.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rapidsai/cuml/branch-23.08/img/rapids_arrow.png&#34; width=&#34;80%&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>