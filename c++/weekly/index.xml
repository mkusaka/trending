<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-28T01:36:59Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pytorch/executorch</title>
    <updated>2024-04-28T01:36:59Z</updated>
    <id>tag:github.com,2024-04-28:/pytorch/executorch</id>
    <link href="https://github.com/pytorch/executorch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;On-device AI across mobile, embedded and edge for PyTorch&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ExecuTorch&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;ExecuTorch&lt;/strong&gt; is an end-to-end solution for enabling on-device inference capabilities across mobile and edge devices including wearables, embedded devices and microcontrollers. It is part of the PyTorch Edge ecosystem and enables efficient deployment of PyTorch models to edge devices.&lt;/p&gt; &#xA;&lt;p&gt;Key value propositions of ExecuTorch are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portability:&lt;/strong&gt; Compatibility with a wide variety of computing platforms, from high-end mobile phones to highly constrained embedded systems and microcontrollers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Productivity:&lt;/strong&gt; Enabling developers to use the same toolchains and SDK from PyTorch model authoring and conversion, to debugging and deployment to a wide variety of platforms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance:&lt;/strong&gt; Providing end users with a seamless and high-performance experience due to a lightweight runtime and utilizing full hardware capabilities such as CPUs, NPUs, and DSPs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a comprehensive technical overview of ExecuTorch and step-by-step tutorials, please visit our documentation website &lt;a href=&#34;https://pytorch.org/executorch/stable/index.html&#34;&gt;for the latest release&lt;/a&gt; (or the &lt;a href=&#34;https://pytorch.org/executorch/main/index.html&#34;&gt;main branch&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We welcome any feedback, suggestions, and bug reports from the community to help us improve our technology. Please use the &lt;a href=&#34;https://discuss.pytorch.org/c/executorch&#34;&gt;PyTorch Forums&lt;/a&gt; for discussion and feedback about ExecuTorch using the &lt;strong&gt;ExecuTorch&lt;/strong&gt; category, and our &lt;a href=&#34;https://github.com/pytorch/executorch/issues&#34;&gt;GitHub repository&lt;/a&gt; for bug reporting.&lt;/p&gt; &#xA;&lt;p&gt;We recommend using the latest release tag from the &lt;a href=&#34;https://github.com/pytorch/executorch/releases&#34;&gt;Releases&lt;/a&gt; page when developing.&lt;/p&gt; &#xA;&lt;h2&gt;Directory Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;executorch&#xA;├── backends                        #  Backend delegate implementations.&#xA;├── build                           #  Utilities for managing the build system.&#xA;├── bundled_program                 #  Utilities for attaching reference inputs and outputs to models.&#xA;├── codegen                         #  Tooling to autogenerate bindings between kernels and the runtime.&#xA;├── configurations&#xA;├── docs                            #  Static docs tooling&#xA;├── examples                        #  Examples of various user flows, such as model export, delegates, and runtime execution.&#xA;├── exir                            #  Ahead of time library, model capture and lowering apis.&#xA;|   ├── _serialize                  #  Serialize final export artifact.&#xA;|   ├── backend                     #  Backend delegate ahead of time APIs&#xA;|   ├── capture                     #  Program capture.&#xA;|   ├── dialects                    #  Op sets for various dialects in the export process.&#xA;|   ├── emit                        #  Conversion from ExportedProgram to ExecuTorch execution instructions.&#xA;|   ├── passes                      #  Built-in compiler passes.&#xA;|   ├── program                     #  Export artifacts.&#xA;|   ├── verification                #  IR verification.&#xA;├── extension                       #  Extensions built on top of the runtime.&#xA;|   ├── aten_util&#xA;|   ├── data_loader                 #  1st party data loader implementations.&#xA;|   ├── memory_allocator            #  1st party memory allocator implementations.&#xA;|   ├── pybindings                  #  Python api for executorch runtime.&#xA;|   ├── pytree                      #  C++ and Python flattening and unflattening lib for pytrees.&#xA;|   ├── testing_util&#xA;├── kernels                         #  1st party kernel implementations.&#xA;|   ├── aten&#xA;|   ├── optimized&#xA;|   ├── portable                    #  Reference implementations of ATen operators.&#xA;|   ├── prim_ops                    #  Special ops used in executorch runtime for control flow and symbolic primitives.&#xA;|   ├── quantized&#xA;├── profiler                        #  Utilities for profiling.&#xA;├── runtime                         #  Core cpp runtime&#xA;|   ├── backend                     #  Backend delegate runtime APIs&#xA;|   ├── core                        #  Core structures used across all levels of the runtime&#xA;|   ├── executor                    #  Model loading, initalization, and execution.&#xA;|   ├── kernel                      #  Kernel registration and management.&#xA;|   ├── platform                    #  Layer between architecture specific code and user calls.&#xA;├── schema                          #  ExecuTorch program definition&#xA;├── scripts                         #  Utility scripts for size management, dependency management, etc.&#xA;├── sdk                             #  Model profiling, debugging, and introspection.&#xA;├── shim                            #  Compatibility layer between OSS and Internal builds&#xA;├── test                            #  Broad scoped end2end tests&#xA;├── third-party                     #  Third-party dependencies&#xA;├── util&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ExecuTorch is BSD licensed, as found in the LICENSE file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ggerganov/llama.cpp</title>
    <updated>2024-04-28T01:36:59Z</updated>
    <id>tag:github.com,2024-04-28:/ggerganov/llama.cpp</id>
    <link href="https://github.com/ggerganov/llama.cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LLM inference in C/C++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;llama.cpp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1991296/230134379-7181e485-c521-4d23-a0d6-f7b3b61ba524.png&#34; alt=&#34;llama&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/users/ggerganov/projects/7&#34;&gt;Roadmap&lt;/a&gt; / &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/discussions/3471&#34;&gt;Project status&lt;/a&gt; / &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/discussions/205&#34;&gt;Manifesto&lt;/a&gt; / &lt;a href=&#34;https://github.com/ggerganov/ggml&#34;&gt;ggml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inference of Meta&#39;s &lt;a href=&#34;https://arxiv.org/abs/2302.13971&#34;&gt;LLaMA&lt;/a&gt; model (and others) in pure C/C++&lt;/p&gt; &#xA;&lt;h3&gt;Recent API changes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2024 Apr 21] &lt;code&gt;llama_token_to_piece&lt;/code&gt; can now optionally render special tokens &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/6807&#34;&gt;https://github.com/ggerganov/llama.cpp/pull/6807&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2024 Apr 4] State and session file functions reorganized under &lt;code&gt;llama_state_*&lt;/code&gt; &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/6341&#34;&gt;https://github.com/ggerganov/llama.cpp/pull/6341&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2024 Mar 26] Logits and embeddings API updated for compactness &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/6122&#34;&gt;https://github.com/ggerganov/llama.cpp/pull/6122&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2024 Mar 13] Add &lt;code&gt;llama_synchronize()&lt;/code&gt; + &lt;code&gt;llama_context_params.n_ubatch&lt;/code&gt; &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/6017&#34;&gt;https://github.com/ggerganov/llama.cpp/pull/6017&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2024 Mar 8] &lt;code&gt;llama_kv_cache_seq_rm()&lt;/code&gt; returns a &lt;code&gt;bool&lt;/code&gt; instead of &lt;code&gt;void&lt;/code&gt;, and new &lt;code&gt;llama_n_seq_max()&lt;/code&gt; returns the upper limit of acceptable &lt;code&gt;seq_id&lt;/code&gt; in batches (relevant when dealing with multiple sequences) &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/5328&#34;&gt;https://github.com/ggerganov/llama.cpp/pull/5328&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2024 Mar 4] Embeddings API updated &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/5796&#34;&gt;https://github.com/ggerganov/llama.cpp/pull/5796&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2024 Mar 3] &lt;code&gt;struct llama_context_params&lt;/code&gt; &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/5849&#34;&gt;https://github.com/ggerganov/llama.cpp/pull/5849&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hot topics&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;MoE memory layout has been updated - reconvert models for &lt;code&gt;mmap&lt;/code&gt; support and regenerate &lt;code&gt;imatrix&lt;/code&gt; &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/6387&#34;&gt;https://github.com/ggerganov/llama.cpp/pull/6387&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Model sharding instructions using &lt;code&gt;gguf-split&lt;/code&gt; &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/discussions/6404&#34;&gt;https://github.com/ggerganov/llama.cpp/discussions/6404&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fix major bug in Metal batched inference &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/6225&#34;&gt;https://github.com/ggerganov/llama.cpp/pull/6225&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multi-GPU pipeline parallelism support &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/6017&#34;&gt;https://github.com/ggerganov/llama.cpp/pull/6017&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Looking for contributions to add Deepseek support: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/issues/5981&#34;&gt;https://github.com/ggerganov/llama.cpp/issues/5981&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Quantization blind testing: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/discussions/5962&#34;&gt;https://github.com/ggerganov/llama.cpp/discussions/5962&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Initial Mamba support has been added: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/5328&#34;&gt;https://github.com/ggerganov/llama.cpp/pull/5328&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#description&#34;&gt;Description&lt;/a&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#get-the-code&#34;&gt;Get the Code&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#blas-build&#34;&gt;BLAS Build&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#prepare-and-quantize&#34;&gt;Prepare and Quantize&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#run-the-quantized-model&#34;&gt;Run the quantized model&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#memorydisk-requirements&#34;&gt;Memory/Disk Requirements&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#quantization&#34;&gt;Quantization&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#interactive-mode&#34;&gt;Interactive mode&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#constrained-output-with-grammars&#34;&gt;Constrained output with grammars&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#instruct-mode&#34;&gt;Instruct mode&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#obtaining-and-using-the-facebook-llama-2-model&#34;&gt;Obtaining and using the Facebook LLaMA 2 model&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#seminal-papers-and-background-on-the-models&#34;&gt;Seminal papers and background on the models&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#perplexity-measuring-model-quality&#34;&gt;Perplexity (measuring model quality)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#android&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#coding-guidelines&#34;&gt;Coding guidelines&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#docs&#34;&gt;Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;The main goal of &lt;code&gt;llama.cpp&lt;/code&gt; is to enable LLM inference with minimal setup and state-of-the-art performance on a wide variety of hardware - locally and in the cloud.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Plain C/C++ implementation without any dependencies&lt;/li&gt; &#xA; &lt;li&gt;Apple silicon is a first-class citizen - optimized via ARM NEON, Accelerate and Metal frameworks&lt;/li&gt; &#xA; &lt;li&gt;AVX, AVX2 and AVX512 support for x86 architectures&lt;/li&gt; &#xA; &lt;li&gt;1.5-bit, 2-bit, 3-bit, 4-bit, 5-bit, 6-bit, and 8-bit integer quantization for faster inference and reduced memory use&lt;/li&gt; &#xA; &lt;li&gt;Custom CUDA kernels for running LLMs on NVIDIA GPUs (support for AMD GPUs via HIP)&lt;/li&gt; &#xA; &lt;li&gt;Vulkan, SYCL, and (partial) OpenCL backend support&lt;/li&gt; &#xA; &lt;li&gt;CPU+GPU hybrid inference to partially accelerate models larger than the total VRAM capacity&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since its &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/issues/33#issuecomment-1465108022&#34;&gt;inception&lt;/a&gt;, the project has improved significantly thanks to many contributions. It is the main playground for developing new features for the &lt;a href=&#34;https://github.com/ggerganov/ggml&#34;&gt;ggml&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported platforms:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mac OS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Windows (via CMake)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Docker&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; FreeBSD&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported models:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Typically finetunes of the base models below are supported as well.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; LLaMA 🦙&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; LLaMA 2 🦙🦙&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; LLaMA 3 🦙🦙🦙&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/mistralai/Mistral-7B-v0.1&#34;&gt;Mistral 7B&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=mistral-ai/Mixtral&#34;&gt;Mixtral MoE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/databricks/dbrx-instruct&#34;&gt;DBRX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=tiiuae/falcon&#34;&gt;Falcon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/ymcui/Chinese-LLaMA-Alpaca&#34;&gt;Chinese LLaMA / Alpaca&lt;/a&gt; and &lt;a href=&#34;https://github.com/ymcui/Chinese-LLaMA-Alpaca-2&#34;&gt;Chinese LLaMA-2 / Alpaca-2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/bofenghuang/vigogne&#34;&gt;Vigogne (French)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://bair.berkeley.edu/blog/2023/04/03/koala/&#34;&gt;Koala&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=baichuan-inc/Baichuan&#34;&gt;Baichuan 1 &amp;amp; 2&lt;/a&gt; + &lt;a href=&#34;https://huggingface.co/hiyouga/baichuan-7b-sft&#34;&gt;derivations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=BAAI/Aquila&#34;&gt;Aquila 1 &amp;amp; 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/3187&#34;&gt;Starcoder models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/smallcloudai/Refact-1_6B-fim&#34;&gt;Refact&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/3410&#34;&gt;Persimmon 8B&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/3417&#34;&gt;MPT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/3553&#34;&gt;Bloom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=01-ai/Yi&#34;&gt;Yi models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/stabilityai&#34;&gt;StableLM models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=deepseek-ai/deepseek&#34;&gt;Deepseek models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=Qwen/Qwen&#34;&gt;Qwen models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/3557&#34;&gt;PLaMo-13B&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=microsoft/phi&#34;&gt;Phi models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/gpt2&#34;&gt;GPT-2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/5118&#34;&gt;Orion 14B&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=internlm2&#34;&gt;InternLM2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/WisdomShell/codeshell&#34;&gt;CodeShell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://ai.google.dev/gemma&#34;&gt;Gemma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/state-spaces/mamba&#34;&gt;Mamba&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/keyfan/grok-1-hf&#34;&gt;Grok-1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=xverse&#34;&gt;Xverse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=CohereForAI/c4ai-command-r&#34;&gt;Command-R models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=sea-lion&#34;&gt;SEA-LION&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/GritLM/GritLM-7B&#34;&gt;GritLM-7B&lt;/a&gt; + &lt;a href=&#34;https://huggingface.co/GritLM/GritLM-8x7B&#34;&gt;GritLM-8x7B&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://allenai.org/olmo&#34;&gt;OLMo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(instructions for supporting more models: &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/docs/HOWTO-add-model.md&#34;&gt;HOWTO-add-model.md&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Multimodal models:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/collections/liuhaotian/llava-15-653aac15d994e992e2677a7e&#34;&gt;LLaVA 1.5 models&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/collections/liuhaotian/llava-16-65b9e40155f60fd046a5ccf2&#34;&gt;LLaVA 1.6 models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=SkunkworksAI/Bakllava&#34;&gt;BakLLaVA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/NousResearch/Obsidian-3B-V0.5&#34;&gt;Obsidian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=Lin-Chen/ShareGPT4V&#34;&gt;ShareGPT4V&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=mobileVLM&#34;&gt;MobileVLM 1.7B/3B models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=Yi-VL&#34;&gt;Yi-VL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/models?search=MiniCPM&#34;&gt;Mini CPM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/vikhyatk/moondream2&#34;&gt;Moondream&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;HTTP server&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/examples/server&#34;&gt;llama.cpp web server&lt;/a&gt; is a lightweight &lt;a href=&#34;https://github.com/openai/openai-openapi&#34;&gt;OpenAI API&lt;/a&gt; compatible HTTP server that can be used to serve local models and easily connect them to existing clients.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bindings:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python: &lt;a href=&#34;https://github.com/abetlen/llama-cpp-python&#34;&gt;abetlen/llama-cpp-python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go: &lt;a href=&#34;https://github.com/go-skynet/go-llama.cpp&#34;&gt;go-skynet/go-llama.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Node.js: &lt;a href=&#34;https://github.com/withcatai/node-llama-cpp&#34;&gt;withcatai/node-llama-cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JS/TS (llama.cpp server client): &lt;a href=&#34;https://modelfusion.dev/integration/model-provider/llamacpp&#34;&gt;lgrammel/modelfusion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JavaScript/Wasm (works in browser): &lt;a href=&#34;https://github.com/tangledgroup/llama-cpp-wasm&#34;&gt;tangledgroup/llama-cpp-wasm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Typescript/Wasm (nicer API, available on npm): &lt;a href=&#34;https://github.com/ngxson/wllama&#34;&gt;ngxson/wllama&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby: &lt;a href=&#34;https://github.com/yoshoku/llama_cpp.rb&#34;&gt;yoshoku/llama_cpp.rb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust (more features): &lt;a href=&#34;https://github.com/edgenai/llama_cpp-rs&#34;&gt;edgenai/llama_cpp-rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust (nicer API): &lt;a href=&#34;https://github.com/mdrokz/rust-llama.cpp&#34;&gt;mdrokz/rust-llama.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust (more direct bindings): &lt;a href=&#34;https://github.com/utilityai/llama-cpp-rs&#34;&gt;utilityai/llama-cpp-rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C#/.NET: &lt;a href=&#34;https://github.com/SciSharp/LLamaSharp&#34;&gt;SciSharp/LLamaSharp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scala 3: &lt;a href=&#34;https://github.com/donderom/llm4s&#34;&gt;donderom/llm4s&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clojure: &lt;a href=&#34;https://github.com/phronmophobic/llama.clj&#34;&gt;phronmophobic/llama.clj&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;React Native: &lt;a href=&#34;https://github.com/mybigday/llama.rn&#34;&gt;mybigday/llama.rn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java: &lt;a href=&#34;https://github.com/kherud/java-llama.cpp&#34;&gt;kherud/java-llama.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zig: &lt;a href=&#34;https://github.com/Deins/llama.cpp.zig&#34;&gt;deins/llama.cpp.zig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Flutter/Dart: &lt;a href=&#34;https://github.com/netdur/llama_cpp_dart&#34;&gt;netdur/llama_cpp_dart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHP (API bindings and features built on top of llama.cpp): &lt;a href=&#34;https://github.com/distantmagic/resonance&#34;&gt;distantmagic/resonance&lt;/a&gt; &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/6326&#34;&gt;(more info)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;UI:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless otherwise noted these projects are open-source with permissive licensing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iohub/coLLaMA&#34;&gt;iohub/collama&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/janhq/jan&#34;&gt;janhq/jan&lt;/a&gt; (AGPL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nat/openplayground&#34;&gt;nat/openplayground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://faraday.dev/&#34;&gt;Faraday&lt;/a&gt; (proprietary)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lmstudio.ai/&#34;&gt;LMStudio&lt;/a&gt; (proprietary)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mudler/LocalAI&#34;&gt;LocalAI&lt;/a&gt; (MIT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LostRuins/koboldcpp&#34;&gt;LostRuins/koboldcpp&lt;/a&gt; (AGPL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mozilla-Ocho/llamafile&#34;&gt;Mozilla-Ocho/llamafile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nomic-ai/gpt4all&#34;&gt;nomic-ai/gpt4all&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ollama/ollama&#34;&gt;ollama/ollama&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oobabooga/text-generation-webui&#34;&gt;oobabooga/text-generation-webui&lt;/a&gt; (AGPL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/psugihara/FreeChat&#34;&gt;psugihara/FreeChat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cztomsik/ava&#34;&gt;cztomsik/ava&lt;/a&gt; (MIT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ptsochantaris/emeltal&#34;&gt;ptsochantaris/emeltal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pythops/tenere&#34;&gt;pythops/tenere&lt;/a&gt; (AGPL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://recurse.chat/&#34;&gt;RecurseChat&lt;/a&gt; (proprietary)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/semperai/amica&#34;&gt;semperai/amica&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/withcatai/catai&#34;&gt;withcatai/catai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mobile-Artificial-Intelligence/maid&#34;&gt;Mobile-Artificial-Intelligence/maid&lt;/a&gt; (MIT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://msty.app&#34;&gt;Msty&lt;/a&gt; (proprietary)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/guinmoon/LLMFarm?tab=readme-ov-file&#34;&gt;LLMFarm&lt;/a&gt; (MIT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zhouwg/kantv?tab=readme-ov-file&#34;&gt;KanTV&lt;/a&gt;(Apachev2.0 or later)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexpinel/Dot&#34;&gt;Dot&lt;/a&gt; (GPL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mindmac.app&#34;&gt;MindMac&lt;/a&gt; (proprietary)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/firatkiral/kodibot&#34;&gt;KodiBot&lt;/a&gt; (GPL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ylsdamxssjxxdd/eva&#34;&gt;eva&lt;/a&gt; (MIT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yaroslavyaroslav/OpenAI-sublime-text&#34;&gt;AI Sublime Text plugin&lt;/a&gt; (MIT)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;(to have a project listed here, it should clearly state that it depends on &lt;code&gt;llama.cpp&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Here is a typical run using LLaMA v2 13B on M2 Ultra:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make -j &amp;amp;&amp;amp; ./main -m models/llama-13b-v2/ggml-model-q4_0.gguf -p &#34;Building a website can be done in 10 simple steps:\nStep 1:&#34; -n 400 -e&#xA;I llama.cpp build info:&#xA;I UNAME_S:  Darwin&#xA;I UNAME_P:  arm&#xA;I UNAME_M:  arm64&#xA;I CFLAGS:   -I.            -O3 -std=c11   -fPIC -DNDEBUG -Wall -Wextra -Wpedantic -Wcast-qual -Wdouble-promotion -Wshadow -Wstrict-prototypes -Wpointer-arith -Wmissing-prototypes -pthread -DGGML_USE_K_QUANTS -DGGML_USE_ACCELERATE&#xA;I CXXFLAGS: -I. -I./common -O3 -std=c++11 -fPIC -DNDEBUG -Wall -Wextra -Wpedantic -Wcast-qual -Wno-unused-function -Wno-multichar -pthread -DGGML_USE_K_QUANTS&#xA;I LDFLAGS:   -framework Accelerate&#xA;I CC:       Apple clang version 14.0.3 (clang-1403.0.22.14.1)&#xA;I CXX:      Apple clang version 14.0.3 (clang-1403.0.22.14.1)&#xA;&#xA;make: Nothing to be done for `default&#39;.&#xA;main: build = 1041 (cf658ad)&#xA;main: seed  = 1692823051&#xA;llama_model_loader: loaded meta data with 16 key-value pairs and 363 tensors from models/llama-13b-v2/ggml-model-q4_0.gguf (version GGUF V1 (latest))&#xA;llama_model_loader: - type  f32:   81 tensors&#xA;llama_model_loader: - type q4_0:  281 tensors&#xA;llama_model_loader: - type q6_K:    1 tensors&#xA;llm_load_print_meta: format         = GGUF V1 (latest)&#xA;llm_load_print_meta: arch           = llama&#xA;llm_load_print_meta: vocab type     = SPM&#xA;llm_load_print_meta: n_vocab        = 32000&#xA;llm_load_print_meta: n_merges       = 0&#xA;llm_load_print_meta: n_ctx_train    = 4096&#xA;llm_load_print_meta: n_ctx          = 512&#xA;llm_load_print_meta: n_embd         = 5120&#xA;llm_load_print_meta: n_head         = 40&#xA;llm_load_print_meta: n_head_kv      = 40&#xA;llm_load_print_meta: n_layer        = 40&#xA;llm_load_print_meta: n_rot          = 128&#xA;llm_load_print_meta: n_gqa          = 1&#xA;llm_load_print_meta: f_norm_eps     = 1.0e-05&#xA;llm_load_print_meta: f_norm_rms_eps = 1.0e-05&#xA;llm_load_print_meta: n_ff           = 13824&#xA;llm_load_print_meta: freq_base      = 10000.0&#xA;llm_load_print_meta: freq_scale     = 1&#xA;llm_load_print_meta: model type     = 13B&#xA;llm_load_print_meta: model ftype    = mostly Q4_0&#xA;llm_load_print_meta: model size     = 13.02 B&#xA;llm_load_print_meta: general.name   = LLaMA v2&#xA;llm_load_print_meta: BOS token = 1 &#39;&amp;lt;s&amp;gt;&#39;&#xA;llm_load_print_meta: EOS token = 2 &#39;&amp;lt;/s&amp;gt;&#39;&#xA;llm_load_print_meta: UNK token = 0 &#39;&amp;lt;unk&amp;gt;&#39;&#xA;llm_load_print_meta: LF token  = 13 &#39;&amp;lt;0x0A&amp;gt;&#39;&#xA;llm_load_tensors: ggml ctx size =    0.11 MB&#xA;llm_load_tensors: mem required  = 7024.01 MB (+  400.00 MB per state)&#xA;...................................................................................................&#xA;llama_new_context_with_model: kv self size  =  400.00 MB&#xA;llama_new_context_with_model: compute buffer total size =   75.41 MB&#xA;&#xA;system_info: n_threads = 16 / 24 | AVX = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 1 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 0 | VSX = 0 |&#xA;sampling: repeat_last_n = 64, repeat_penalty = 1.100000, presence_penalty = 0.000000, frequency_penalty = 0.000000, top_k = 40, tfs_z = 1.000000, top_p = 0.950000, typical_p = 1.000000, temp = 0.800000, mirostat = 0, mirostat_lr = 0.100000, mirostat_ent = 5.000000&#xA;generate: n_ctx = 512, n_batch = 512, n_predict = 400, n_keep = 0&#xA;&#xA;&#xA; Building a website can be done in 10 simple steps:&#xA;Step 1: Find the right website platform.&#xA;Step 2: Choose your domain name and hosting plan.&#xA;Step 3: Design your website layout.&#xA;Step 4: Write your website content and add images.&#xA;Step 5: Install security features to protect your site from hackers or spammers&#xA;Step 6: Test your website on multiple browsers, mobile devices, operating systems etc…&#xA;Step 7: Test it again with people who are not related to you personally – friends or family members will work just fine!&#xA;Step 8: Start marketing and promoting the website via social media channels or paid ads&#xA;Step 9: Analyze how many visitors have come to your site so far, what type of people visit more often than others (e.g., men vs women) etc…&#xA;Step 10: Continue to improve upon all aspects mentioned above by following trends in web design and staying up-to-date on new technologies that can enhance user experience even further!&#xA;How does a Website Work?&#xA;A website works by having pages, which are made of HTML code. This code tells your computer how to display the content on each page you visit – whether it’s an image or text file (like PDFs). In order for someone else’s browser not only be able but also want those same results when accessing any given URL; some additional steps need taken by way of programming scripts that will add functionality such as making links clickable!&#xA;The most common type is called static HTML pages because they remain unchanged over time unless modified manually (either through editing files directly or using an interface such as WordPress). They are usually served up via HTTP protocols – this means anyone can access them without having any special privileges like being part of a group who is allowed into restricted areas online; however, there may still exist some limitations depending upon where one lives geographically speaking.&#xA;How to&#xA;llama_print_timings:        load time =   576.45 ms&#xA;llama_print_timings:      sample time =   283.10 ms /   400 runs   (    0.71 ms per token,  1412.91 tokens per second)&#xA;llama_print_timings: prompt eval time =   599.83 ms /    19 tokens (   31.57 ms per token,    31.68 tokens per second)&#xA;llama_print_timings:        eval time = 24513.59 ms /   399 runs   (   61.44 ms per token,    16.28 tokens per second)&#xA;llama_print_timings:       total time = 25431.49 ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is another demo of running both LLaMA-7B and &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp&#34;&gt;whisper.cpp&lt;/a&gt; on a single M1 Pro MacBook:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1991296/224442907-7693d4be-acaa-4e01-8b4f-add84093ffff.mp4&#34;&gt;https://user-images.githubusercontent.com/1991296/224442907-7693d4be-acaa-4e01-8b4f-add84093ffff.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here are the end-to-end binary build and model conversion steps for most supported models.&lt;/p&gt; &#xA;&lt;h3&gt;Get the Code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ggerganov/llama.cpp&#xA;cd llama.cpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;In order to build llama.cpp you have three different options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;On Linux or MacOS:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;On Windows:&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Download the latest fortran version of &lt;a href=&#34;https://github.com/skeeto/w64devkit/releases&#34;&gt;w64devkit&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Extract &lt;code&gt;w64devkit&lt;/code&gt; on your pc.&lt;/li&gt; &#xA;     &lt;li&gt;Run &lt;code&gt;w64devkit.exe&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Use the &lt;code&gt;cd&lt;/code&gt; command to reach the &lt;code&gt;llama.cpp&lt;/code&gt; folder.&lt;/li&gt; &#xA;     &lt;li&gt;From here you can run: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;CMake&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;cmake --build . --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;Zig&lt;/code&gt; (version 0.11 or later):&lt;/p&gt; &lt;p&gt;Building for optimization levels and CPU features can be accomplished using standard build arguments, for example AVX2, FMA, F16C, it&#39;s also possible to cross compile for other operating systems and architectures:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zig build -Doptimize=ReleaseFast -Dtarget=x86_64-windows-gnu -Dcpu=x86_64+avx2+fma+f16c&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;zig targets&lt;/code&gt; command will give you valid options to use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;gmake&lt;/code&gt; (FreeBSD):&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Install and activate &lt;a href=&#34;https://wiki.freebsd.org/Graphics&#34;&gt;DRM in FreeBSD&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Add your user to &lt;strong&gt;video&lt;/strong&gt; group&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Install compilation dependencies.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pkg install gmake automake autoconf pkgconf llvm15 clinfo clover \&#xA;    opencl clblast openblas&#xA;&#xA;gmake CC=/usr/local/bin/clang15 CXX=/usr/local/bin/clang++15 -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; With this packages you can build llama.cpp with OPENBLAS and CLBLAST support for use OpenCL GPU acceleration in FreeBSD. Please read the instructions for use and activate this options in this document below.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Metal Build&lt;/h3&gt; &#xA;&lt;p&gt;On MacOS, Metal is enabled by default. Using Metal makes the computation run on the GPU. To disable the Metal build at compile time use the &lt;code&gt;LLAMA_NO_METAL=1&lt;/code&gt; flag or the &lt;code&gt;LLAMA_METAL=OFF&lt;/code&gt; cmake option.&lt;/p&gt; &#xA;&lt;p&gt;When built with Metal support, you can explicitly disable GPU inference with the &lt;code&gt;--n-gpu-layers|-ngl 0&lt;/code&gt; command-line argument.&lt;/p&gt; &#xA;&lt;h3&gt;MPI Build&lt;/h3&gt; &#xA;&lt;p&gt;MPI lets you distribute the computation over a cluster of machines. Because of the serial nature of LLM prediction, this won&#39;t yield any end-to-end speed-ups, but it will let you run larger models than would otherwise fit into RAM on a single machine.&lt;/p&gt; &#xA;&lt;p&gt;First you will need MPI libraries installed on your system. The two most popular (only?) options are &lt;a href=&#34;https://www.mpich.org&#34;&gt;MPICH&lt;/a&gt; and &lt;a href=&#34;https://www.open-mpi.org&#34;&gt;OpenMPI&lt;/a&gt;. Either can be installed with a package manager (&lt;code&gt;apt&lt;/code&gt;, Homebrew, MacPorts, etc).&lt;/p&gt; &#xA;&lt;p&gt;Next you will need to build the project with &lt;code&gt;LLAMA_MPI&lt;/code&gt; set to true on all machines; if you&#39;re building with &lt;code&gt;make&lt;/code&gt;, you will also need to specify an MPI-capable compiler (when building with CMake, this is configured automatically):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make CC=mpicc CXX=mpicxx LLAMA_MPI=1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;CMake&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -S . -B build -DLLAMA_MPI=ON&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once the programs are built, download/convert the weights on all of the machines in your cluster. The paths to the weights and programs should be identical on all machines.&lt;/p&gt; &#xA;&lt;p&gt;Next, ensure password-less SSH access to each machine from the primary host, and create a &lt;code&gt;hostfile&lt;/code&gt; with a list of the hostnames and their relative &#34;weights&#34; (slots). If you want to use localhost for computation, use its local subnet IP address rather than the loopback address or &#34;localhost&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example hostfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;192.168.0.1:2&#xA;malvolio.local:1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will distribute the computation across 2 processes on the first host and 1 process on the second host. Each process will use roughly an equal amount of RAM. Try to keep these numbers small, as inter-process (intra-host) communication is expensive.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you&#39;re ready to run a computation using &lt;code&gt;mpirun&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mpirun -hostfile hostfile -n 3 ./main -m ./models/7B/ggml-model-q4_0.gguf -n 128&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BLAS Build&lt;/h3&gt; &#xA;&lt;p&gt;Building the program with BLAS support may lead to some performance improvements in prompt processing using batch sizes higher than 32 (the default is 512). Support with CPU-only BLAS implementations doesn&#39;t affect the normal generation performance. We may see generation performance improvements with GPU-involved BLAS implementations, e.g. cuBLAS, hipBLAS and CLBlast. There are currently several different BLAS implementations available for build and use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;Accelerate Framework:&lt;/h4&gt; &lt;p&gt;This is only available on Mac PCs and it&#39;s enabled by default. You can just build using the normal instructions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;OpenBLAS:&lt;/h4&gt; &lt;p&gt;This provides BLAS acceleration using only the CPU. Make sure to have OpenBLAS installed on your machine.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Using &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;On Linux:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make LLAMA_OPENBLAS=1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;On Windows:&lt;/p&gt; &#xA;      &lt;ol&gt; &#xA;       &lt;li&gt; &lt;p&gt;Download the latest fortran version of &lt;a href=&#34;https://github.com/skeeto/w64devkit/releases&#34;&gt;w64devkit&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;Download the latest version of &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/releases&#34;&gt;OpenBLAS for Windows&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;Extract &lt;code&gt;w64devkit&lt;/code&gt; on your pc.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;From the OpenBLAS zip that you just downloaded copy &lt;code&gt;libopenblas.a&lt;/code&gt;, located inside the &lt;code&gt;lib&lt;/code&gt; folder, inside &lt;code&gt;w64devkit\x86_64-w64-mingw32\lib&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;From the same OpenBLAS zip copy the content of the &lt;code&gt;include&lt;/code&gt; folder inside &lt;code&gt;w64devkit\x86_64-w64-mingw32\include&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;Run &lt;code&gt;w64devkit.exe&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;cd&lt;/code&gt; command to reach the &lt;code&gt;llama.cpp&lt;/code&gt; folder.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;From here you can run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make LLAMA_OPENBLAS=1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;      &lt;/ol&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Using &lt;code&gt;CMake&lt;/code&gt; on Linux:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cd build&#xA;cmake .. -DLLAMA_BLAS=ON -DLLAMA_BLAS_VENDOR=OpenBLAS&#xA;cmake --build . --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;BLIS&lt;/h4&gt; &lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/docs/BLIS.md&#34;&gt;BLIS.md&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;SYCL&lt;/h4&gt; &lt;p&gt;SYCL is a higher-level programming model to improve programming productivity on various hardware accelerators.&lt;/p&gt; &lt;p&gt;llama.cpp based on SYCL is used to &lt;strong&gt;support Intel GPU&lt;/strong&gt; (Data Center Max series, Flex series, Arc series, Built-in GPU and iGPU).&lt;/p&gt; &lt;p&gt;For detailed info, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/README-sycl.md&#34;&gt;llama.cpp for SYCL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Intel oneMKL&lt;/h4&gt; &lt;p&gt;Building through oneAPI compilers will make avx_vnni instruction set available for intel processors that do not support avx512 and avx512_vnni. Please note that this build config &lt;strong&gt;does not support Intel GPU&lt;/strong&gt;. For Intel GPU support, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/README-sycl.md&#34;&gt;llama.cpp for SYCL&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Using manual oneAPI installation: By default, &lt;code&gt;LLAMA_BLAS_VENDOR&lt;/code&gt; is set to &lt;code&gt;Generic&lt;/code&gt;, so if you already sourced intel environment script and assign &lt;code&gt;-DLLAMA_BLAS=ON&lt;/code&gt; in cmake, the mkl version of Blas will automatically been selected. Otherwise please install oneAPI and follow the below steps:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cd build&#xA;source /opt/intel/oneapi/setvars.sh # You can skip this step if  in oneapi-basekit docker image, only required for manual installation&#xA;cmake .. -DLLAMA_BLAS=ON -DLLAMA_BLAS_VENDOR=Intel10_64lp -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icpx -DLLAMA_NATIVE=ON&#xA;cmake --build . --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Using oneAPI docker image: If you do not want to source the environment vars and install oneAPI manually, you can also build the code using intel docker container: &lt;a href=&#34;https://hub.docker.com/r/intel/oneapi-basekit&#34;&gt;oneAPI-basekit&lt;/a&gt;. Then, you can use the commands given above.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Check &lt;a href=&#34;https://www.intel.com/content/www/us/en/content-details/791610/optimizing-and-running-llama2-on-intel-cpu.html&#34;&gt;Optimizing and Running LLaMA2 on Intel® CPU&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;CUDA&lt;/h4&gt; &lt;p&gt;This provides GPU acceleration using the CUDA cores of your Nvidia GPU. Make sure to have the CUDA toolkit installed. You can download it from your Linux distro&#39;s package manager (e.g. &lt;code&gt;apt install nvidia-cuda-toolkit&lt;/code&gt;) or from here: &lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA Toolkit&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For Jetson user, if you have Jetson Orin, you can try this: &lt;a href=&#34;https://www.jetson-ai-lab.com/tutorial_text-generation.html&#34;&gt;Offical Support&lt;/a&gt;. If you are using an old model(nano/TX2), need some additional operations before compiling.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Using &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make LLAMA_CUDA=1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Using &lt;code&gt;CMake&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cd build&#xA;cmake .. -DLLAMA_CUDA=ON&#xA;cmake --build . --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;The environment variable &lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#env-vars&#34;&gt;&lt;code&gt;CUDA_VISIBLE_DEVICES&lt;/code&gt;&lt;/a&gt; can be used to specify which GPU(s) will be used. The following compilation options are also available to tweak performance:&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Option&lt;/th&gt; &#xA;     &lt;th&gt;Legal values&lt;/th&gt; &#xA;     &lt;th&gt;Default&lt;/th&gt; &#xA;     &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;LLAMA_CUDA_FORCE_DMMV&lt;/td&gt; &#xA;     &lt;td&gt;Boolean&lt;/td&gt; &#xA;     &lt;td&gt;false&lt;/td&gt; &#xA;     &lt;td&gt;Force the use of dequantization + matrix vector multiplication kernels instead of using kernels that do matrix vector multiplication on quantized data. By default the decision is made based on compute capability (MMVQ for 6.1/Pascal/GTX 1000 or higher). Does not affect k-quants.&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;LLAMA_CUDA_DMMV_X&lt;/td&gt; &#xA;     &lt;td&gt;Positive integer &amp;gt;= 32&lt;/td&gt; &#xA;     &lt;td&gt;32&lt;/td&gt; &#xA;     &lt;td&gt;Number of values in x direction processed by the CUDA dequantization + matrix vector multiplication kernel per iteration. Increasing this value can improve performance on fast GPUs. Power of 2 heavily recommended. Does not affect k-quants.&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;LLAMA_CUDA_MMV_Y&lt;/td&gt; &#xA;     &lt;td&gt;Positive integer&lt;/td&gt; &#xA;     &lt;td&gt;1&lt;/td&gt; &#xA;     &lt;td&gt;Block size in y direction for the CUDA mul mat vec kernels. Increasing this value can improve performance on fast GPUs. Power of 2 recommended.&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;LLAMA_CUDA_F16&lt;/td&gt; &#xA;     &lt;td&gt;Boolean&lt;/td&gt; &#xA;     &lt;td&gt;false&lt;/td&gt; &#xA;     &lt;td&gt;If enabled, use half-precision floating point arithmetic for the CUDA dequantization + mul mat vec kernels and for the q4_1 and q5_1 matrix matrix multiplication kernels. Can improve performance on relatively recent GPUs.&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;LLAMA_CUDA_KQUANTS_ITER&lt;/td&gt; &#xA;     &lt;td&gt;1 or 2&lt;/td&gt; &#xA;     &lt;td&gt;2&lt;/td&gt; &#xA;     &lt;td&gt;Number of values processed per iteration and per CUDA thread for Q2_K and Q6_K quantization formats. Setting this value to 1 can improve performance for slow GPUs.&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;LLAMA_CUDA_PEER_MAX_BATCH_SIZE&lt;/td&gt; &#xA;     &lt;td&gt;Positive integer&lt;/td&gt; &#xA;     &lt;td&gt;128&lt;/td&gt; &#xA;     &lt;td&gt;Maximum batch size for which to enable peer access between multiple GPUs. Peer access requires either Linux or NVLink. When using NVLink enabling peer access for larger batch sizes is potentially beneficial.&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;hipBLAS&lt;/h4&gt; &lt;p&gt;This provides BLAS acceleration on HIP-supported AMD GPUs. Make sure to have ROCm installed. You can download it from your Linux distro&#39;s package manager or from here: &lt;a href=&#34;https://rocm.docs.amd.com/projects/install-on-linux/en/latest/tutorial/quick-start.html#rocm-install-quick&#34;&gt;ROCm Quick Start (Linux)&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Using &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make LLAMA_HIPBLAS=1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Using &lt;code&gt;CMake&lt;/code&gt; for Linux (assuming a gfx1030-compatible AMD GPU):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CC=/opt/rocm/llvm/bin/clang CXX=/opt/rocm/llvm/bin/clang++ \&#xA;    cmake -H. -Bbuild -DLLAMA_HIPBLAS=ON -DAMDGPU_TARGETS=gfx1030 -DCMAKE_BUILD_TYPE=Release \&#xA;    &amp;amp;&amp;amp; cmake --build build -- -j 16&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;On Linux it is also possible to use unified memory architecture (UMA) to share main memory between the CPU and integrated GPU by setting &lt;code&gt;-DLLAMA_HIP_UMA=ON&#34;&lt;/code&gt;. However, this hurts performance for non-integrated GPUs (but enables working with integrated GPUs).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Using &lt;code&gt;make&lt;/code&gt; (example for target gfx1030, build with 16 CPU threads):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make -j16 LLAMA_HIPBLAS=1 LLAMA_HIP_UMA=1 AMDGPU_TARGETS=gfx1030&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Using &lt;code&gt;CMake&lt;/code&gt; for Windows (using x64 Native Tools Command Prompt for VS, and assuming a gfx1100-compatible AMD GPU):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;set PATH=%HIP_PATH%\bin;%PATH%&#xA;mkdir build&#xA;cd build&#xA;cmake -G Ninja -DAMDGPU_TARGETS=gfx1100 -DLLAMA_HIPBLAS=ON -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release ..&#xA;cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Make sure that &lt;code&gt;AMDGPU_TARGETS&lt;/code&gt; is set to the GPU arch you want to compile for. The above example uses &lt;code&gt;gfx1100&lt;/code&gt; that corresponds to Radeon RX 7900XTX/XT/GRE. You can find a list of targets &lt;a href=&#34;https://llvm.org/docs/AMDGPUUsage.html#processors&#34;&gt;here&lt;/a&gt; Find your gpu version string by matching the most significant version information from &lt;code&gt;rocminfo | grep gfx | head -1 | awk &#39;{print $2}&#39;&lt;/code&gt; with the list of processors, e.g. &lt;code&gt;gfx1035&lt;/code&gt; maps to &lt;code&gt;gfx1030&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;The environment variable &lt;a href=&#34;https://rocm.docs.amd.com/en/latest/understand/gpu_isolation.html#hip-visible-devices&#34;&gt;&lt;code&gt;HIP_VISIBLE_DEVICES&lt;/code&gt;&lt;/a&gt; can be used to specify which GPU(s) will be used. If your GPU is not officially supported you can use the environment variable [&lt;code&gt;HSA_OVERRIDE_GFX_VERSION&lt;/code&gt;] set to a similar GPU, for example 10.3.0 on RDNA2 (e.g. gfx1030, gfx1031, or gfx1035) or 11.0.0 on RDNA3. The following compilation options are also available to tweak performance (yes, they refer to CUDA, not HIP, because it uses the same code as the cuBLAS version above):&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Option&lt;/th&gt; &#xA;     &lt;th&gt;Legal values&lt;/th&gt; &#xA;     &lt;th&gt;Default&lt;/th&gt; &#xA;     &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;LLAMA_CUDA_DMMV_X&lt;/td&gt; &#xA;     &lt;td&gt;Positive integer &amp;gt;= 32&lt;/td&gt; &#xA;     &lt;td&gt;32&lt;/td&gt; &#xA;     &lt;td&gt;Number of values in x direction processed by the HIP dequantization + matrix vector multiplication kernel per iteration. Increasing this value can improve performance on fast GPUs. Power of 2 heavily recommended. Does not affect k-quants.&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;LLAMA_CUDA_MMV_Y&lt;/td&gt; &#xA;     &lt;td&gt;Positive integer&lt;/td&gt; &#xA;     &lt;td&gt;1&lt;/td&gt; &#xA;     &lt;td&gt;Block size in y direction for the HIP mul mat vec kernels. Increasing this value can improve performance on fast GPUs. Power of 2 recommended. Does not affect k-quants.&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;LLAMA_CUDA_KQUANTS_ITER&lt;/td&gt; &#xA;     &lt;td&gt;1 or 2&lt;/td&gt; &#xA;     &lt;td&gt;2&lt;/td&gt; &#xA;     &lt;td&gt;Number of values processed per iteration and per HIP thread for Q2_K and Q6_K quantization formats. Setting this value to 1 can improve performance for slow GPUs.&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;CLBlast&lt;/h4&gt; &lt;p&gt;OpenCL acceleration is provided by the matrix multiplication kernels from the &lt;a href=&#34;https://github.com/CNugteren/CLBlast&#34;&gt;CLBlast&lt;/a&gt; project and custom kernels for ggml that can generate tokens on the GPU.&lt;/p&gt; &lt;p&gt;You will need the &lt;a href=&#34;https://github.com/KhronosGroup/OpenCL-SDK&#34;&gt;OpenCL SDK&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;For Ubuntu, Debian, and Fedora the packages &lt;code&gt;opencl-headers&lt;/code&gt;, &lt;code&gt;ocl-icd&lt;/code&gt; may be needed.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;For Windows, a pre-built SDK is available on the &lt;a href=&#34;https://github.com/KhronosGroup/OpenCL-SDK/releases&#34;&gt;OpenCL Releases&lt;/a&gt; page.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Installing the OpenCL SDK from source&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recurse-submodules https://github.com/KhronosGroup/OpenCL-SDK.git&#xA;mkdir OpenCL-SDK/build&#xA;cd OpenCL-SDK/build&#xA;cmake .. -DBUILD_DOCS=OFF \&#xA;  -DBUILD_EXAMPLES=OFF \&#xA;  -DBUILD_TESTING=OFF \&#xA;  -DOPENCL_SDK_BUILD_SAMPLES=OFF \&#xA;  -DOPENCL_SDK_TEST_SAMPLES=OFF&#xA;cmake --build . --config Release&#xA;cmake --install . --prefix /some/path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h5&gt;Installing CLBlast&lt;/h5&gt; &lt;p&gt;Pre-built CLBlast binaries may be found on the &lt;a href=&#34;https://github.com/CNugteren/CLBlast/releases&#34;&gt;CLBlast Releases&lt;/a&gt; page. For Unix variants, it may also be found in your operating system&#39;s packages.&lt;/p&gt; &lt;p&gt;Linux packaging: Fedora Linux:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install clblast&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Alternatively, they may be built from source.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Windows:&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;set OPENCL_SDK_ROOT=&#34;C:/OpenCL-SDK-v2023.04.17-Win-x64&#34;&#xA;git clone https://github.com/CNugteren/CLBlast.git&#xA;mkdir CLBlast\build&#xA;cd CLBlast\build&#xA;cmake .. -DBUILD_SHARED_LIBS=OFF -DOVERRIDE_MSVC_FLAGS_TO_MT=OFF -DTUNERS=OFF -DOPENCL_ROOT=%OPENCL_SDK_ROOT% -G &#34;Visual Studio 17 2022&#34; -A x64&#xA;cmake --build . --config Release&#xA;cmake --install . --prefix C:/CLBlast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt;&lt;/li&gt; &#xA;   &lt;li&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Unix:&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/CNugteren/CLBlast.git&#xA;mkdir CLBlast/build&#xA;cd CLBlast/build&#xA;cmake .. -DBUILD_SHARED_LIBS=OFF -DTUNERS=OFF&#xA;cmake --build . --config Release&#xA;cmake --install . --prefix /some/path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;p&gt;Where &lt;code&gt;/some/path&lt;/code&gt; is where the built library will be installed (default is &lt;code&gt;/usr/local&lt;/code&gt;).&lt;/p&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h5&gt;Building Llama with CLBlast&lt;/h5&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build with make: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make LLAMA_CLBLAST=1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;CMake (Unix): &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir build&#xA;cd build&#xA;cmake .. -DLLAMA_CLBLAST=ON -DCLBlast_DIR=/some/path&#xA;cmake --build . --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;CMake (Windows): &lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;set CL_BLAST_CMAKE_PKG=&#34;C:/CLBlast/lib/cmake/CLBlast&#34;&#xA;git clone https://github.com/ggerganov/llama.cpp&#xA;cd llama.cpp&#xA;mkdir build&#xA;cd build&#xA;cmake .. -DBUILD_SHARED_LIBS=OFF -DLLAMA_CLBLAST=ON -DCMAKE_PREFIX_PATH=%CL_BLAST_CMAKE_PKG% -G &#34;Visual Studio 17 2022&#34; -A x64&#xA;cmake --build . --config Release&#xA;cmake --install . --prefix C:/LlamaCPP&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h5&gt;Running Llama with CLBlast&lt;/h5&gt; &lt;p&gt;The CLBlast build supports &lt;code&gt;--gpu-layers|-ngl&lt;/code&gt; like the CUDA version does.&lt;/p&gt; &lt;p&gt;To select the correct platform (driver) and device (GPU), you can use the environment variables &lt;code&gt;GGML_OPENCL_PLATFORM&lt;/code&gt; and &lt;code&gt;GGML_OPENCL_DEVICE&lt;/code&gt;. The selection can be a number (starting from 0) or a text string to search:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;GGML_OPENCL_PLATFORM=1 ./main ...&#xA;GGML_OPENCL_DEVICE=2 ./main ...&#xA;GGML_OPENCL_PLATFORM=Intel ./main ...&#xA;GGML_OPENCL_PLATFORM=AMD GGML_OPENCL_DEVICE=1 ./main ...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The default behavior is to find the first GPU device, but when it is an integrated GPU on a laptop, for instance, the selectors are useful. Using the variables it is possible to select a CPU-based driver as well, if so desired.&lt;/p&gt; &lt;p&gt;You can get a list of platforms and devices from the &lt;code&gt;clinfo -l&lt;/code&gt; command, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Vulkan&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;With docker&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;You don&#39;t need to install Vulkan SDK. It will be installed inside the container.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Build the image&#xA;docker build -t llama-cpp-vulkan -f .devops/main-vulkan.Dockerfile .&#xA;&#xA;# Then, use it:&#xA;docker run -it --rm -v &#34;$(pwd):/app:Z&#34; --device /dev/dri/renderD128:/dev/dri/renderD128 --device /dev/dri/card1:/dev/dri/card1 llama-cpp-vulkan -m &#34;/app/models/YOUR_MODEL_FILE&#34; -p &#34;Building a website can be done in 10 simple steps:&#34; -n 400 -e -ngl 33&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Without docker&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Firstly, you need to make sure you have installed &lt;a href=&#34;https://vulkan.lunarg.com/doc/view/latest/linux/getting_started_ubuntu.html&#34;&gt;Vulkan SDK&lt;/a&gt;&lt;/p&gt; &lt;p&gt;For example, on Ubuntu 22.04 (jammy), use the command below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | apt-key add -&#xA;wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list https://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list&#xA;apt update -y&#xA;apt-get install -y vulkan-sdk&#xA;# To verify the installation, use the command below:&#xA;vulkaninfo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Alternatively your package manager might be able to provide the appropiate libraries. For example for Ubuntu 22.04 you can install &lt;code&gt;libvulkan-dev&lt;/code&gt; instead.&lt;/p&gt; &lt;p&gt;Then, build llama.cpp using the cmake command below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p build&#xA;cd build&#xA;cmake .. -DLLAMA_VULKAN=1&#xA;cmake --build . --config Release&#xA;# Test the output binary (with &#34;-ngl 33&#34; to offload all layers to GPU)&#xA;./bin/main -m &#34;PATH_TO_MODEL&#34; -p &#34;Hi you how are you&#34; -n 50 -e -ngl 33 -t 4&#xA;&#xA;# You should see in the output, ggml_vulkan detected your GPU. For example:&#xA;# ggml_vulkan: Using Intel(R) Graphics (ADL GT2) | uma: 1 | fp16: 1 | warp size: 32&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prepare and Quantize&lt;/h3&gt; &#xA;&lt;p&gt;To obtain the official LLaMA 2 weights please see the &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/#obtaining-and-using-the-facebook-llama-2-model&#34;&gt;Obtaining and using the Facebook LLaMA 2 model&lt;/a&gt; section. There is also a large selection of pre-quantized &lt;code&gt;gguf&lt;/code&gt; models available on Hugging Face.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# obtain the official LLaMA model weights and place them in ./models&#xA;ls ./models&#xA;llama-2-7b tokenizer_checklist.chk tokenizer.model&#xA;# [Optional] for models using BPE tokenizers&#xA;ls ./models&#xA;&amp;lt;folder containing weights and tokenizer json&amp;gt; vocab.json&#xA;# [Optional] for PyTorch .bin models like Mistral-7B&#xA;ls ./models&#xA;&amp;lt;folder containing weights and tokenizer json&amp;gt;&#xA;&#xA;# install Python dependencies&#xA;python3 -m pip install -r requirements.txt&#xA;&#xA;# convert the model to ggml FP16 format&#xA;python3 convert.py models/mymodel/&#xA;&#xA;# [Optional] for models using BPE tokenizers&#xA;python convert.py models/mymodel/ --vocab-type bpe&#xA;&#xA;# quantize the model to 4-bits (using Q4_K_M method)&#xA;./quantize ./models/mymodel/ggml-model-f16.gguf ./models/mymodel/ggml-model-Q4_K_M.gguf Q4_K_M&#xA;&#xA;# update the gguf filetype to current version if older version is now unsupported&#xA;./quantize ./models/mymodel/ggml-model-Q4_K_M.gguf ./models/mymodel/ggml-model-Q4_K_M-v2.gguf COPY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the quantized model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# start inference on a gguf model&#xA;./main -m ./models/mymodel/ggml-model-Q4_K_M.gguf -n 128&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When running the larger models, make sure you have enough disk space to store all the intermediate files.&lt;/p&gt; &#xA;&lt;h3&gt;Running on Windows with prebuilt binaries&lt;/h3&gt; &#xA;&lt;p&gt;You will find prebuilt Windows binaries on the release page.&lt;/p&gt; &#xA;&lt;p&gt;Simply download and extract the latest zip package of choice: (e.g. &lt;code&gt;llama-b1380-bin-win-avx2-x64.zip&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;From the unzipped folder, open a terminal/cmd window here and place a pre-converted &lt;code&gt;.gguf&lt;/code&gt; model file. Test out the main example like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\main -m llama-2-7b.Q4_0.gguf -n 128&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Memory/Disk Requirements&lt;/h3&gt; &#xA;&lt;p&gt;As the models are currently fully loaded into memory, you will need adequate disk space to save them and sufficient RAM to load them. At the moment, memory and disk requirements are the same.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Model&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Original size&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Quantized size (Q4_0)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7B&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;13 GB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.9 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;13B&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;24 GB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7.8 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;30B&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;60 GB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;19.5 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;65B&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;120 GB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;38.5 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Quantization&lt;/h3&gt; &#xA;&lt;p&gt;Several quantization methods are supported. They differ in the resulting model disk size and inference speed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(outdated)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Measure&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;F16&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Q4_0&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Q4_1&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Q5_0&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Q5_1&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Q8_0&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7B&lt;/td&gt; &#xA;   &lt;td&gt;perplexity&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.9066&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.1565&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.0912&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.9862&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.9481&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.9070&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7B&lt;/td&gt; &#xA;   &lt;td&gt;file size&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;13.0G&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.5G&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.9G&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.3G&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.7G&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.7G&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7B&lt;/td&gt; &#xA;   &lt;td&gt;ms/tok @ 4th&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;127&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;55&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;54&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;76&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;83&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;72&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7B&lt;/td&gt; &#xA;   &lt;td&gt;ms/tok @ 8th&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;122&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;43&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;45&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;52&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;67&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7B&lt;/td&gt; &#xA;   &lt;td&gt;bits/weight&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;16.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.5&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.5&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;8.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;13B&lt;/td&gt; &#xA;   &lt;td&gt;perplexity&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.2543&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.3860&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.3608&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.2856&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.2706&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.2548&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;13B&lt;/td&gt; &#xA;   &lt;td&gt;file size&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;25.0G&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.8G&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7.6G&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;8.3G&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9.1G&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;13G&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;13B&lt;/td&gt; &#xA;   &lt;td&gt;ms/tok @ 4th&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;103&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;105&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;148&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;160&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;131&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;13B&lt;/td&gt; &#xA;   &lt;td&gt;ms/tok @ 8th&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;73&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;82&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;98&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;105&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;128&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;13B&lt;/td&gt; &#xA;   &lt;td&gt;bits/weight&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;16.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.5&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.5&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;8.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/1684&#34;&gt;k-quants&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;recent k-quants improvements and new i-quants &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/2707&#34;&gt;#2707&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/2807&#34;&gt;#2807&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/4773&#34;&gt;#4773 - 2-bit i-quants (inference)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/4856&#34;&gt;#4856 - 2-bit i-quants (inference)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/4861&#34;&gt;#4861 - importance matrix&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/4872&#34;&gt;#4872 - MoE models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/4897&#34;&gt;#4897 - 2-bit quantization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/4930&#34;&gt;#4930 - imatrix for all k-quants&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/4957&#34;&gt;#4951 - imatrix on the GPU&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/4969&#34;&gt;#4969 - imatrix for legacy quants&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/4996&#34;&gt;#4996 - k-qunats tuning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/5060&#34;&gt;#5060 - Q3_K_XS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/5196&#34;&gt;#5196 - 3-bit i-quants&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/5320&#34;&gt;quantization tuning&lt;/a&gt;, &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/5334&#34;&gt;another one&lt;/a&gt;, and &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/5361&#34;&gt;another one&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Perplexity (measuring model quality)&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;perplexity&lt;/code&gt; example to measure perplexity over a given prompt (lower perplexity is better). For more information, see &lt;a href=&#34;https://huggingface.co/docs/transformers/perplexity&#34;&gt;https://huggingface.co/docs/transformers/perplexity&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The perplexity measurements in table above are done against the &lt;code&gt;wikitext2&lt;/code&gt; test dataset (&lt;a href=&#34;https://paperswithcode.com/dataset/wikitext-2&#34;&gt;https://paperswithcode.com/dataset/wikitext-2&lt;/a&gt;), with context length of 512. The time per token is measured on a MacBook M1 Pro 32GB RAM using 4 and 8 threads.&lt;/p&gt; &#xA;&lt;h4&gt;How to run&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download/extract: &lt;a href=&#34;https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip&#34;&gt;https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./perplexity -m models/7B/ggml-model-q4_0.gguf -f wiki.test.raw&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Output:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;perplexity : calculating perplexity over 655 chunks&#xA;24.43 seconds per pass - ETA 4.45 hours&#xA;[1]4.5970,[2]5.1807,[3]6.0382,...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And after 4.45 hours, you will have the final perplexity.&lt;/p&gt; &#xA;&lt;h3&gt;Interactive mode&lt;/h3&gt; &#xA;&lt;p&gt;If you want a more ChatGPT-like experience, you can run in interactive mode by passing &lt;code&gt;-i&lt;/code&gt; as a parameter. In this mode, you can always interrupt generation by pressing Ctrl+C and entering one or more lines of text, which will be converted into tokens and appended to the current context. You can also specify a &lt;em&gt;reverse prompt&lt;/em&gt; with the parameter &lt;code&gt;-r &#34;reverse prompt string&#34;&lt;/code&gt;. This will result in user input being prompted whenever the exact tokens of the reverse prompt string are encountered in the generation. A typical use is to use a prompt that makes LLaMA emulate a chat between multiple users, say Alice and Bob, and pass &lt;code&gt;-r &#34;Alice:&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of a few-shot interaction, invoked with the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# default arguments using a 7B model&#xA;./examples/chat.sh&#xA;&#xA;# advanced chat with a 13B model&#xA;./examples/chat-13B.sh&#xA;&#xA;# custom arguments using a 13B model&#xA;./main -m ./models/13B/ggml-model-q4_0.gguf -n 256 --repeat_penalty 1.0 --color -i -r &#34;User:&#34; -f prompts/chat-with-bob.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the use of &lt;code&gt;--color&lt;/code&gt; to distinguish between user input and generated text. Other parameters are explained in more detail in the &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/examples/main/README.md&#34;&gt;README&lt;/a&gt; for the &lt;code&gt;main&lt;/code&gt; example program.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1991296/224575029-2af3c7dc-5a65-4f64-a6bb-517a532aea38.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Persistent Interaction&lt;/h3&gt; &#xA;&lt;p&gt;The prompt, user inputs, and model generations can be saved and resumed across calls to &lt;code&gt;./main&lt;/code&gt; by leveraging &lt;code&gt;--prompt-cache&lt;/code&gt; and &lt;code&gt;--prompt-cache-all&lt;/code&gt;. The &lt;code&gt;./examples/chat-persistent.sh&lt;/code&gt; script demonstrates this with support for long-running, resumable chat sessions. To use this example, you must provide a file to cache the initial chat prompt and a directory to save the chat session, and may optionally provide the same variables as &lt;code&gt;chat-13B.sh&lt;/code&gt;. The same prompt cache can be reused for new chat sessions. Note that both prompt cache and chat directory are tied to the initial prompt (&lt;code&gt;PROMPT_TEMPLATE&lt;/code&gt;) and the model file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start a new chat&#xA;PROMPT_CACHE_FILE=chat.prompt.bin CHAT_SAVE_DIR=./chat/default ./examples/chat-persistent.sh&#xA;&#xA;# Resume that chat&#xA;PROMPT_CACHE_FILE=chat.prompt.bin CHAT_SAVE_DIR=./chat/default ./examples/chat-persistent.sh&#xA;&#xA;# Start a different chat with the same prompt/model&#xA;PROMPT_CACHE_FILE=chat.prompt.bin CHAT_SAVE_DIR=./chat/another ./examples/chat-persistent.sh&#xA;&#xA;# Different prompt cache for different prompt/model&#xA;PROMPT_TEMPLATE=./prompts/chat-with-bob.txt PROMPT_CACHE_FILE=bob.prompt.bin \&#xA;    CHAT_SAVE_DIR=./chat/bob ./examples/chat-persistent.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Constrained output with grammars&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;llama.cpp&lt;/code&gt; supports grammars to constrain model output. For example, you can force the model to output JSON only:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./main -m ./models/13B/ggml-model-q4_0.gguf -n 256 --grammar-file grammars/json.gbnf -p &#39;Request: schedule a call at 8pm; Command:&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;grammars/&lt;/code&gt; folder contains a handful of sample grammars. To write your own, check out the &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/grammars/README.md&#34;&gt;GBNF Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For authoring more complex JSON grammars, you can also check out &lt;a href=&#34;https://grammar.intrinsiclabs.ai/&#34;&gt;https://grammar.intrinsiclabs.ai/&lt;/a&gt;, a browser app that lets you write TypeScript interfaces which it compiles to GBNF grammars that you can save for local use. Note that the app is built and maintained by members of the community, please file any issues or FRs on &lt;a href=&#34;http://github.com/intrinsiclabsai/gbnfgen&#34;&gt;its repo&lt;/a&gt; and not this one.&lt;/p&gt; &#xA;&lt;h3&gt;Instruct mode&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First, download and place the &lt;code&gt;ggml&lt;/code&gt; model into the &lt;code&gt;./models&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;main&lt;/code&gt; tool like this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./examples/alpaca.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;== Running in interactive mode. ==&#xA; - Press Ctrl+C to interject at any time.&#xA; - Press Return to return control to LLaMA.&#xA; - If you want to submit another line, end your input in &#39;\&#39;.&#xA;&#xA; Below is an instruction that describes a task. Write a response that appropriately completes the request.&#xA;&#xA;&amp;gt; How many letters are there in the English alphabet?&#xA;There 26 letters in the English Alphabet&#xA;&amp;gt; What is the most common way of transportation in Amsterdam?&#xA;The majority (54%) are using public transit. This includes buses, trams and metros with over 100 lines throughout the city which make it very accessible for tourists to navigate around town as well as locals who commute by tram or metro on a daily basis&#xA;&amp;gt; List 5 words that start with &#34;ca&#34;.&#xA;cadaver, cauliflower, cabbage (vegetable), catalpa (tree) and Cailleach.&#xA;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Obtaining and using the Facebook LLaMA 2 model&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refer to &lt;a href=&#34;https://ai.meta.com/resources/models-and-libraries/llama-downloads/&#34;&gt;Facebook&#39;s LLaMA download page&lt;/a&gt; if you want to access the model data.&lt;/li&gt; &#xA; &lt;li&gt;Alternatively, if you want to save time and space, you can download already converted and quantized models from &lt;a href=&#34;https://huggingface.co/TheBloke&#34;&gt;TheBloke&lt;/a&gt;, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-7B-GGUF&#34;&gt;LLaMA 2 7B base&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-13B-GGUF&#34;&gt;LLaMA 2 13B base&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-70B-GGUF&#34;&gt;LLaMA 2 70B base&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-7B-chat-GGUF&#34;&gt;LLaMA 2 7B chat&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-13B-chat-GGUF&#34;&gt;LLaMA 2 13B chat&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-70B-chat-GGUF&#34;&gt;LLaMA 2 70B chat&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Seminal papers and background on the models&lt;/h3&gt; &#xA;&lt;p&gt;If your issue is with model generation quality, then please at least scan the following links and papers to understand the limitations of LLaMA models. This is especially important when choosing an appropriate model size and appreciating both the significant and subtle differences between LLaMA models and ChatGPT:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LLaMA: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ai.facebook.com/blog/large-language-model-llama-meta-ai/&#34;&gt;Introducing LLaMA: A foundational, 65-billion-parameter large language model&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2302.13971&#34;&gt;LLaMA: Open and Efficient Foundation Language Models&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;GPT-3 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2005.14165&#34;&gt;Language Models are Few-Shot Learners&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;GPT-3.5 / InstructGPT / ChatGPT: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://openai.com/research/instruction-following&#34;&gt;Aligning language models to follow instructions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2203.02155&#34;&gt;Training language models to follow instructions with human feedback&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;h4&gt;Building the Project using Android NDK&lt;/h4&gt; &#xA;&lt;p&gt;You can easily run &lt;code&gt;llama.cpp&lt;/code&gt; on Android device with &lt;a href=&#34;https://termux.dev/&#34;&gt;termux&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, install the essential packages for termux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install clang wget git cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Second, obtain the &lt;a href=&#34;https://developer.android.com/ndk&#34;&gt;Android NDK&lt;/a&gt; and then build with CMake:&lt;/p&gt; &#xA;&lt;p&gt;You can execute the following commands on your computer to avoid downloading the NDK to your mobile. Of course, you can also do this in Termux.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir build-android&#xA;$ cd build-android&#xA;$ export NDK=&amp;lt;your_ndk_directory&amp;gt;&#xA;$ cmake -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-23 -DCMAKE_C_FLAGS=-march=armv8.4a+dotprod ..&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://termux.dev/&#34;&gt;termux&lt;/a&gt; on your device and run &lt;code&gt;termux-setup-storage&lt;/code&gt; to get access to your SD card. Finally, copy these built &lt;code&gt;llama&lt;/code&gt; binaries and the model file to your device storage. Because the file permissions in the Android sdcard cannot be changed, you can copy the executable files to the &lt;code&gt;/data/data/com.termux/files/home/bin&lt;/code&gt; path, and then execute the following commands in Termux to add executable permission:&lt;/p&gt; &#xA;&lt;p&gt;(Assumed that you have pushed the built executable files to the /sdcard/llama.cpp/bin path using &lt;code&gt;adb push&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$cp -r /sdcard/llama.cpp/bin /data/data/com.termux/files/home/&#xA;$cd /data/data/com.termux/files/home/bin&#xA;$chmod +x ./*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download model &lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-7B-Chat-GGUF/blob/main/llama-2-7b-chat.Q4_K_M.gguf&#34;&gt;llama-2-7b-chat.Q4_K_M.gguf&lt;/a&gt;, and push it to &lt;code&gt;/sdcard/llama.cpp/&lt;/code&gt;, then move it to &lt;code&gt;/data/data/com.termux/files/home/model/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$mv /sdcard/llama.cpp/llama-2-7b-chat.Q4_K_M.gguf /data/data/com.termux/files/home/model/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can start chatting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$cd /data/data/com.termux/files/home/bin&#xA;$./main -m ../model/llama-2-7b-chat.Q4_K_M.gguf -n 128 -cml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is a demo of an interactive session running on Pixel 5 phone:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/271616/225014776-1d567049-ad71-4ef2-b050-55b0b3b9274c.mp4&#34;&gt;https://user-images.githubusercontent.com/271616/225014776-1d567049-ad71-4ef2-b050-55b0b3b9274c.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Building the Project using Termux (F-Droid)&lt;/h4&gt; &#xA;&lt;p&gt;Termux from F-Droid offers an alternative route to execute the project on an Android device. This method empowers you to construct the project right from within the terminal, negating the requirement for a rooted device or SD Card.&lt;/p&gt; &#xA;&lt;p&gt;Outlined below are the directives for installing the project using OpenBLAS and CLBlast. This combination is specifically designed to deliver peak performance on recent devices that feature a GPU.&lt;/p&gt; &#xA;&lt;p&gt;If you opt to utilize OpenBLAS, you&#39;ll need to install the corresponding package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install libopenblas&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Subsequently, if you decide to incorporate CLBlast, you&#39;ll first need to install the requisite OpenCL packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install ocl-icd opencl-headers opencl-clhpp clinfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to compile CLBlast, you&#39;ll need to first clone the respective Git repository, which can be found at this URL: &lt;a href=&#34;https://github.com/CNugteren/CLBlast&#34;&gt;https://github.com/CNugteren/CLBlast&lt;/a&gt;. Alongside this, clone this repository into your home directory. Once this is done, navigate to the CLBlast folder and execute the commands detailed below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .&#xA;make&#xA;cp libclblast.so* $PREFIX/lib&#xA;cp ./include/clblast.h ../llama.cpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Following the previous steps, navigate to the LlamaCpp directory. To compile it with OpenBLAS and CLBlast, execute the command provided below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp /data/data/com.termux/files/usr/include/openblas/cblas.h .&#xA;cp /data/data/com.termux/files/usr/include/openblas/openblas_config.h .&#xA;make LLAMA_CLBLAST=1 //(sometimes you need to run this command twice)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon completion of the aforementioned steps, you will have successfully compiled the project. To run it using CLBlast, a slight adjustment is required: a command must be issued to direct the operations towards your device&#39;s physical GPU, rather than the virtual one. The necessary command is detailed below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GGML_OPENCL_PLATFORM=0&#xA;GGML_OPENCL_DEVICE=0&#xA;export LD_LIBRARY_PATH=/vendor/lib64:$LD_LIBRARY_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note: some Android devices, like the Zenfone 8, need the following command instead - &#34;export LD_LIBRARY_PATH=/system/vendor/lib64:$LD_LIBRARY_PATH&#34;. Source: &lt;a href=&#34;https://www.reddit.com/r/termux/comments/kc3ynp/opencl_working_in_termux_more_in_comments/&#34;&gt;https://www.reddit.com/r/termux/comments/kc3ynp/opencl_working_in_termux_more_in_comments/&lt;/a&gt; )&lt;/p&gt; &#xA;&lt;p&gt;For easy and swift re-execution, consider documenting this final part in a .sh script file. This will enable you to rerun the process with minimal hassle.&lt;/p&gt; &#xA;&lt;p&gt;Place your desired model into the &lt;code&gt;~/llama.cpp/models/&lt;/code&gt; directory and execute the &lt;code&gt;./main (...)&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker must be installed and running on your system.&lt;/li&gt; &#xA; &lt;li&gt;Create a folder to store big models &amp;amp; intermediate files (ex. /llama/models)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Images&lt;/h4&gt; &#xA;&lt;p&gt;We have three Docker images available for this project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/ggerganov/llama.cpp:full&lt;/code&gt;: This image includes both the main executable file and the tools to convert LLaMA models into ggml and convert into 4-bit quantization. (platforms: &lt;code&gt;linux/amd64&lt;/code&gt;, &lt;code&gt;linux/arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/ggerganov/llama.cpp:light&lt;/code&gt;: This image only includes the main executable file. (platforms: &lt;code&gt;linux/amd64&lt;/code&gt;, &lt;code&gt;linux/arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/ggerganov/llama.cpp:server&lt;/code&gt;: This image only includes the server executable file. (platforms: &lt;code&gt;linux/amd64&lt;/code&gt;, &lt;code&gt;linux/arm64&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Additionally, there the following images, similar to the above:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/ggerganov/llama.cpp:full-cuda&lt;/code&gt;: Same as &lt;code&gt;full&lt;/code&gt; but compiled with CUDA support. (platforms: &lt;code&gt;linux/amd64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/ggerganov/llama.cpp:light-cuda&lt;/code&gt;: Same as &lt;code&gt;light&lt;/code&gt; but compiled with CUDA support. (platforms: &lt;code&gt;linux/amd64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/ggerganov/llama.cpp:server-cuda&lt;/code&gt;: Same as &lt;code&gt;server&lt;/code&gt; but compiled with CUDA support. (platforms: &lt;code&gt;linux/amd64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/ggerganov/llama.cpp:full-rocm&lt;/code&gt;: Same as &lt;code&gt;full&lt;/code&gt; but compiled with ROCm support. (platforms: &lt;code&gt;linux/amd64&lt;/code&gt;, &lt;code&gt;linux/arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/ggerganov/llama.cpp:light-rocm&lt;/code&gt;: Same as &lt;code&gt;light&lt;/code&gt; but compiled with ROCm support. (platforms: &lt;code&gt;linux/amd64&lt;/code&gt;, &lt;code&gt;linux/arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/ggerganov/llama.cpp:server-rocm&lt;/code&gt;: Same as &lt;code&gt;server&lt;/code&gt; but compiled with ROCm support. (platforms: &lt;code&gt;linux/amd64&lt;/code&gt;, &lt;code&gt;linux/arm64&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The GPU enabled images are not currently tested by CI beyond being built. They are not built with any variation from the ones in the Dockerfiles defined in &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/.devops/&#34;&gt;.devops/&lt;/a&gt; and the GitHub Action defined in &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/.github/workflows/docker.yml&#34;&gt;.github/workflows/docker.yml&lt;/a&gt;. If you need different settings (for example, a different CUDA or ROCm library, you&#39;ll need to build the images locally for now).&lt;/p&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;p&gt;The easiest way to download the models, convert them to ggml and optimize them is with the --all-in-one command which includes the full docker image.&lt;/p&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;/path/to/models&lt;/code&gt; below with the actual path where you downloaded the models.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v /path/to/models:/models ghcr.io/ggerganov/llama.cpp:full --all-in-one &#34;/models/&#34; 7B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On completion, you are ready to play!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v /path/to/models:/models ghcr.io/ggerganov/llama.cpp:full --run -m /models/7B/ggml-model-q4_0.gguf -p &#34;Building a website can be done in 10 simple steps:&#34; -n 512&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with a light image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v /path/to/models:/models ghcr.io/ggerganov/llama.cpp:light -m /models/7B/ggml-model-q4_0.gguf -p &#34;Building a website can be done in 10 simple steps:&#34; -n 512&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with a server image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v /path/to/models:/models -p 8000:8000 ghcr.io/ggerganov/llama.cpp:server -m /models/7B/ggml-model-q4_0.gguf --port 8000 --host 0.0.0.0 -n 512&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker With CUDA&lt;/h3&gt; &#xA;&lt;p&gt;Assuming one has the &lt;a href=&#34;https://github.com/NVIDIA/nvidia-container-toolkit&#34;&gt;nvidia-container-toolkit&lt;/a&gt; properly installed on Linux, or is using a GPU enabled cloud, &lt;code&gt;cuBLAS&lt;/code&gt; should be accessible inside the container.&lt;/p&gt; &#xA;&lt;h4&gt;Building Locally&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t local/llama.cpp:full-cuda -f .devops/full-cuda.Dockerfile .&#xA;docker build -t local/llama.cpp:light-cuda -f .devops/main-cuda.Dockerfile .&#xA;docker build -t local/llama.cpp:server-cuda -f .devops/server-cuda.Dockerfile .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may want to pass in some different &lt;code&gt;ARGS&lt;/code&gt;, depending on the CUDA environment supported by your container host, as well as the GPU architecture.&lt;/p&gt; &#xA;&lt;p&gt;The defaults are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CUDA_VERSION&lt;/code&gt; set to &lt;code&gt;11.7.1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CUDA_DOCKER_ARCH&lt;/code&gt; set to &lt;code&gt;all&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The resulting images, are essentially the same as the non-CUDA images:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;local/llama.cpp:full-cuda&lt;/code&gt;: This image includes both the main executable file and the tools to convert LLaMA models into ggml and convert into 4-bit quantization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;local/llama.cpp:light-cuda&lt;/code&gt;: This image only includes the main executable file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;local/llama.cpp:server-cuda&lt;/code&gt;: This image only includes the server executable file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;p&gt;After building locally, Usage is similar to the non-CUDA examples, but you&#39;ll need to add the &lt;code&gt;--gpus&lt;/code&gt; flag. You will also want to use the &lt;code&gt;--n-gpu-layers&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --gpus all -v /path/to/models:/models local/llama.cpp:full-cuda --run -m /models/7B/ggml-model-q4_0.gguf -p &#34;Building a website can be done in 10 simple steps:&#34; -n 512 --n-gpu-layers 1&#xA;docker run --gpus all -v /path/to/models:/models local/llama.cpp:light-cuda -m /models/7B/ggml-model-q4_0.gguf -p &#34;Building a website can be done in 10 simple steps:&#34; -n 512 --n-gpu-layers 1&#xA;docker run --gpus all -v /path/to/models:/models local/llama.cpp:server-cuda -m /models/7B/ggml-model-q4_0.gguf --port 8000 --host 0.0.0.0 -n 512 --n-gpu-layers 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributors can open PRs&lt;/li&gt; &#xA; &lt;li&gt;Collaborators can push to branches in the &lt;code&gt;llama.cpp&lt;/code&gt; repo and merge PRs into the &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt; &#xA; &lt;li&gt;Collaborators will be invited based on contributions&lt;/li&gt; &#xA; &lt;li&gt;Any help with managing issues and PRs is very appreciated!&lt;/li&gt; &#xA; &lt;li&gt;Make sure to read this: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/discussions/205&#34;&gt;Inference at the edge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A bit of backstory for those who are interested: &lt;a href=&#34;https://changelog.com/podcast/532&#34;&gt;Changelog podcast&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Coding guidelines&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Avoid adding third-party dependencies, extra files, extra headers, etc.&lt;/li&gt; &#xA; &lt;li&gt;Always consider cross-compatibility with other operating systems and architectures&lt;/li&gt; &#xA; &lt;li&gt;Avoid fancy looking modern STL constructs, use basic &lt;code&gt;for&lt;/code&gt; loops, avoid templates, keep it simple&lt;/li&gt; &#xA; &lt;li&gt;There are no strict rules for the code style, but try to follow the patterns in the code (indentation, spaces, etc.). Vertical alignment makes things more readable and easier to batch edit&lt;/li&gt; &#xA; &lt;li&gt;Clean-up any trailing whitespaces, use 4 spaces for indentation, brackets on the same line, &lt;code&gt;void * ptr&lt;/code&gt;, &lt;code&gt;int &amp;amp; a&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;good first issues&lt;/a&gt; for tasks suitable for first contributions&lt;/li&gt; &#xA; &lt;li&gt;Tensors store data in row-major order. We refer to dimension 0 as columns, 1 as rows, 2 as matrices&lt;/li&gt; &#xA; &lt;li&gt;Matrix multiplication is unconventional: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/raw/880e352277fc017df4d5794f0c21c44e1eae2b84/ggml.h#L1058-L1064&#34;&gt;&lt;code&gt;C = ggml_mul_mat(ctx, A, B)&lt;/code&gt;&lt;/a&gt; means $C^T = A B^T \Leftrightarrow C = B A^T.$&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/media/matmul.png&#34; alt=&#34;matmul&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/examples/main/README.md&#34;&gt;main&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/examples/server/README.md&#34;&gt;server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/examples/jeopardy/README.md&#34;&gt;jeopardy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/docs/BLIS.md&#34;&gt;BLIS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/docs/token_generation_performance_tips.md&#34;&gt;Performance troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/wiki/GGML-Tips-&amp;amp;-Tricks&#34;&gt;GGML tips &amp;amp; tricks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/llama.cpp/master/grammars/README.md&#34;&gt;GBNF grammars&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>alexbatalov/fallout1-ce</title>
    <updated>2024-04-28T01:36:59Z</updated>
    <id>tag:github.com,2024-04-28:/alexbatalov/fallout1-ce</id>
    <link href="https://github.com/alexbatalov/fallout1-ce" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fallout for modern operating systems&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fallout Community Edition&lt;/h1&gt; &#xA;&lt;p&gt;Fallout Community Edition is a fully working re-implementation of Fallout, with the same original gameplay, engine bugfixes, and some quality of life improvements, that works (mostly) hassle-free on multiple platforms.&lt;/p&gt; &#xA;&lt;p&gt;There is also &lt;a href=&#34;https://github.com/alexbatalov/fallout2-ce&#34;&gt;Fallout 2 Community Edition&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You must own the game to play. Purchase your copy on &lt;a href=&#34;https://www.gog.com/game/fallout&#34;&gt;GOG&lt;/a&gt; or &lt;a href=&#34;https://store.steampowered.com/app/38400&#34;&gt;Steam&lt;/a&gt;. Download latest &lt;a href=&#34;https://github.com/alexbatalov/fallout1-ce/releases&#34;&gt;release&lt;/a&gt; or build from source. You can also check latest &lt;a href=&#34;https://github.com/alexbatalov/fallout1-ce/actions&#34;&gt;debug&lt;/a&gt; build intended for testers.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Download and copy &lt;code&gt;fallout-ce.exe&lt;/code&gt; to your &lt;code&gt;Fallout&lt;/code&gt; folder. It serves as a drop-in replacement for &lt;code&gt;falloutw.exe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use Windows installation as a base - it contains data assets needed to play. Copy &lt;code&gt;Fallout&lt;/code&gt; folder somewhere, for example &lt;code&gt;/home/john/Desktop/Fallout&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alternatively you can extract the needed files from the GoG installer:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo apt install innoextract&#xA;$ innoextract ~/Downloads/setup_fallout_2.1.0.18.exe -I app&#xA;$ mv app Fallout&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Download and copy &lt;code&gt;fallout-ce&lt;/code&gt; to this folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://libsdl.org/download-2.0.php&#34;&gt;SDL2&lt;/a&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo apt install libsdl2-2.0-0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./fallout-ce&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: macOS 10.11 (El Capitan) or higher is required. Runs natively on Intel-based Macs and Apple Silicon.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use Windows installation as a base - it contains data assets needed to play. Copy &lt;code&gt;Fallout&lt;/code&gt; folder somewhere, for example &lt;code&gt;/Applications/Fallout&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alternatively you can use Fallout from MacPlay/The Omni Group as a base - you need to extract game assets from the original bundle. Mount CD/DMG, right click &lt;code&gt;Fallout&lt;/code&gt; -&amp;gt; &lt;code&gt;Show Package Contents&lt;/code&gt;, navigate to &lt;code&gt;Contents/Resources&lt;/code&gt;. Copy &lt;code&gt;GameData&lt;/code&gt; folder somewhere, for example &lt;code&gt;/Applications/Fallout&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or if you&#39;re a Terminal user and have Homebrew installed you can extract the needed files from the GoG installer:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew install innoextract&#xA;$ innoextract ~/Downloads/setup_fallout_2.1.0.18.exe -I app&#xA;$ mv app /Applications/Fallout&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Download and copy &lt;code&gt;fallout-ce.app&lt;/code&gt; to this folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;fallout-ce.app&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Fallout was designed with mouse in mind. There are many controls that require precise cursor positioning, which is not possible with fingers. Current control scheme resembles trackpad usage:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;One finger moves mouse cursor around.&lt;/li&gt; &#xA;  &lt;li&gt;Tap one finger for left mouse click.&lt;/li&gt; &#xA;  &lt;li&gt;Tap two fingers for right mouse click (switches mouse cursor mode).&lt;/li&gt; &#xA;  &lt;li&gt;Move two fingers to scroll current view (map view, worldmap view, inventory scrollers).&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: From Android standpoint release and debug builds are different apps. Both apps require their own copy of game assets and have their own savegames. This is intentional. As a gamer just stick with release version and check for updates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use Windows installation as a base - it contains data assets needed to play. Copy &lt;code&gt;Fallout&lt;/code&gt; folder to your device, for example to &lt;code&gt;Downloads&lt;/code&gt;. You need &lt;code&gt;master.dat&lt;/code&gt;, &lt;code&gt;critter.dat&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt; folder. Watch for file names - keep (or make) them lowercased (see &lt;a href=&#34;https://raw.githubusercontent.com/alexbatalov/fallout1-ce/main/#configuration&#34;&gt;Configuration&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;code&gt;fallout-ce.apk&lt;/code&gt; and copy it to your device. Open it with file explorer, follow instructions (install from unknown source).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When you run the game for the first time it will immediately present file picker. Select the folder from the first step. Wait until this data is copied. A loading dialog will appear, just wait for about 30 seconds. The game will start automatically.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: See Android note on controls.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;code&gt;fallout-ce.ipa&lt;/code&gt;. Use sideloading applications (&lt;a href=&#34;https://altstore.io/&#34;&gt;AltStore&lt;/a&gt; or &lt;a href=&#34;https://sideloadly.io/&#34;&gt;Sideloadly&lt;/a&gt;) to install it to your device. Alternatively you can always build from source with your own signing certificate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the game once. You&#39;ll see error message saying &#34;Could not find the master datafile...&#34;. This step is needed for iOS to expose the game via File Sharing feature.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use Finder (macOS Catalina and later) or iTunes (Windows and macOS Mojave or earlier) to copy &lt;code&gt;master.dat&lt;/code&gt;, &lt;code&gt;critter.dat&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt; folder to &#34;Fallout&#34; app (&lt;a href=&#34;https://support.apple.com/HT210598&#34;&gt;how-to&lt;/a&gt;). Watch for file names - keep (or make) them lowercased (see &lt;a href=&#34;https://raw.githubusercontent.com/alexbatalov/fallout1-ce/main/#configuration&#34;&gt;Configuration&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The main configuration file is &lt;code&gt;fallout.cfg&lt;/code&gt;. There are several important settings you might need to adjust for your installation. Depending on your Fallout distribution main game assets &lt;code&gt;master.dat&lt;/code&gt;, &lt;code&gt;critter.dat&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt; folder might be either all lowercased, or all uppercased. You can either update &lt;code&gt;master_dat&lt;/code&gt;, &lt;code&gt;critter_dat&lt;/code&gt;, &lt;code&gt;master_patches&lt;/code&gt; and &lt;code&gt;critter_patches&lt;/code&gt; settings to match your file names, or rename files to match entries in your &lt;code&gt;fallout.cfg&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;sound&lt;/code&gt; folder (with &lt;code&gt;music&lt;/code&gt; folder inside) might be located either in &lt;code&gt;data&lt;/code&gt; folder, or be in the Fallout folder. Update &lt;code&gt;music_path1&lt;/code&gt; setting to match your hierarchy, usually it&#39;s &lt;code&gt;data/sound/music/&lt;/code&gt; or &lt;code&gt;sound/music/&lt;/code&gt;. Make sure it match your path exactly (so it might be &lt;code&gt;SOUND/MUSIC/&lt;/code&gt; if you&#39;ve installed Fallout from CD). Music files themselves (with &lt;code&gt;ACM&lt;/code&gt; extension) should be all uppercased, regardless of &lt;code&gt;sound&lt;/code&gt; and &lt;code&gt;music&lt;/code&gt; folders.&lt;/p&gt; &#xA;&lt;p&gt;The second configuration file is &lt;code&gt;f1_res.ini&lt;/code&gt;. Use it to change game window size and enable/disable fullscreen mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[MAIN]&#xA;SCR_WIDTH=1280&#xA;SCR_HEIGHT=720&#xA;WINDOWED=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recommendations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Desktops&lt;/strong&gt;: Use any size you see fit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tablets&lt;/strong&gt;: Set these values to logical resolution of your device, for example iPad Pro 11 is 1668x2388 (pixels), but it&#39;s logical resolution is 834x1194 (points).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mobile phones&lt;/strong&gt;: Set height to 480, calculate width according to your device screen (aspect) ratio, for example Samsung S21 is 20:9 device, so the width should be 480 * 20 / 9 = 1067.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In time this stuff will receive in-game interface, right now you have to do it manually.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Here is a couple of current goals. Open up an issue if you have suggestion or feature request.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Update to v1.2&lt;/strong&gt;. This project is based on Reference Edition which implements v1.1 released in November 1997. There is a newer v1.2 released in March 1998 which at least contains important multilingual support.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Backport some Fallout 2 features&lt;/strong&gt;. Fallout 2 (with some Sfall additions) added many great improvements and quality of life enhancements to the original Fallout engine. Many deserve to be backported to Fallout 1. Keep in mind this is a different game, with slightly different gameplay balance (which is a fragile thing on its own).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The source code is this repository is available under the &lt;a href=&#34;https://raw.githubusercontent.com/alexbatalov/fallout1-ce/main/LICENSE.md&#34;&gt;Sustainable Use License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>