<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-27T01:42:51Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openscad/openscad</title>
    <updated>2025-04-27T01:42:51Z</updated>
    <id>tag:github.com,2025-04-27:/openscad/openscad</id>
    <link href="https://github.com/openscad/openscad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenSCAD - The Programmers Solid 3D CAD Modeller&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/openscad/openscad/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/checks-status/openscad/openscad/master.svg?logo=github&amp;amp;label=build&amp;amp;logoColor=black&amp;amp;colorA=f9d72c&amp;amp;style=plastic&#34; alt=&#34;GitHub (master)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/openscad/openscad/tree/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/openscad/openscad/master.svg?logo=circleci&amp;amp;logoColor=black&amp;amp;colorA=f9d72c&amp;amp;style=plastic&#34; alt=&#34;CircleCI (master)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/2510&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/2510.svg?colorA=f9d72c&amp;amp;logoColor=black&amp;amp;style=plastic&#34; alt=&#34;Coverity Scan&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kiwiirc.com/client/irc.libera.chat/#openscad&#34;&gt;&lt;img src=&#34;https://kiwiirc.com/buttons/irc.libera.chat/openscad.png&#34; alt=&#34;Visit our IRC channel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is OpenSCAD?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/openscad/donate&#34;&gt;&lt;img align=&#34;right&#34; src=&#34;https://opencollective.com/openscad/donate/button@2x.png?color=white&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;p&gt;OpenSCAD is a software for creating solid 3D CAD objects. It is free software and available for Linux/UNIX, MS Windows and macOS.&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unlike most free software for creating 3D models (such as the famous application Blender), OpenSCAD focuses on the CAD aspects rather than the artistic aspects of 3D modeling. Thus this might be the application you are looking for when you are planning to create 3D models of machine parts but probably not the tool for creating computer-animated movies.&lt;/p&gt; &#xA;&lt;p&gt;OpenSCAD is not an interactive modeler. Instead it is more like a 3D-compiler that reads a script file that describes the object and renders the 3D model from this script file (see examples below). This gives you, the designer, complete control over the modeling process and enables you to easily change any step in the modeling process or make designs that are defined by configurable parameters.&lt;/p&gt; &#xA;&lt;p&gt;OpenSCAD provides two main modeling techniques: First there is constructive solid geometry (aka CSG) and second there is extrusion of 2D outlines. As the data exchange format for these 2D outlines Autocad DXF files are used. In addition to 2D paths for extrusion it is also possible to read design parameters from DXF files. Besides DXF files OpenSCAD can read and create 3D models in the STL and OFF file formats.&lt;/p&gt; &#xA;&lt;h1&gt;Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openscad/openscad/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openscad/openscad/master/#documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openscad/openscad/master/#building-openscad&#34;&gt;Building OpenSCAD&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openscad/openscad/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openscad/openscad/master/#getting-the-source-code&#34;&gt;Getting the source code&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openscad/openscad/master/#building-for-macos&#34;&gt;Building for macOS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openscad/openscad/master/#building-for-linuxbsd&#34;&gt;Building for Linux/BSD&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openscad/openscad/master/#building-for-linuxbsd-on-systems-with-older-or-missing-dependencies&#34;&gt;Building for Linux/BSD on systems with older or missing dependencies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openscad/openscad/master/#building-for-windows&#34;&gt;Building for Windows&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openscad/openscad/master/#compilation&#34;&gt;Compilation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;p&gt;You can download the latest binaries of OpenSCAD at &lt;a href=&#34;https://www.openscad.org/downloads.html&#34;&gt;https://www.openscad.org/downloads.html&lt;/a&gt;. Install binaries as you would any other software.&lt;/p&gt; &#xA;&lt;p&gt;When you open OpenSCAD, you&#39;ll see three frames within the window. The left frame is where you&#39;ll write code to model 3D objects. The right frame is where you&#39;ll see the 3D rendering of your model.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s make a tree! Type the following code into the left frame:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cylinder(h = 30, r = 8);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then render the 3D model by hitting F5. Now you can see a cylinder for the trunk in our tree. Now let&#39;s add the bushy/leafy part of the tree represented by a sphere. To do so, we will union a cylinder and a sphere.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;union() {&#xA;  cylinder(h = 30, r = 8);&#xA;  sphere(20);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But, it&#39;s not quite right! The bushy/leafy are around the base of the tree. We need to move the sphere up the z-axis.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;union() {&#xA;  cylinder(h = 30, r = 8);&#xA;  translate([0, 0, 40]) sphere(20);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And that&#39;s it! You made your first 3D model! There are other primitive shapes that you can combine with other set operations (union, intersection, difference) and transformations (rotate, scale, translate) to make complex models! Check out all the other language features in the &lt;a href=&#34;https://en.wikibooks.org/wiki/OpenSCAD_User_Manual&#34;&gt;OpenSCAD Manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Have a look at the OpenSCAD Homepage (&lt;a href=&#34;https://www.openscad.org/documentation.html&#34;&gt;https://www.openscad.org/documentation.html&lt;/a&gt;) for documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Building OpenSCAD&lt;/h2&gt; &#xA;&lt;p&gt;To build OpenSCAD from source, follow the instructions for the platform applicable to you below.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;To build OpenSCAD, you need some libraries and tools. The version numbers in brackets specify the versions which have been used for development. Other versions may or may not work as well.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using a newer version of Ubuntu, you can install these libraries from aptitude. If you&#39;re using Mac, or an older Linux/BSD, there are build scripts that download and compile the libraries from source. Follow the instructions for the platform you&#39;re compiling on below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A C++ compiler supporting C++17&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cmake.org/&#34;&gt;cmake (3.5 -&amp;gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qt.io/&#34;&gt;Qt (5.12 -&amp;gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://riverbankcomputing.com/software/qscintilla/&#34;&gt;QScintilla2 (2.9 -&amp;gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cgal.org/&#34;&gt;CGAL (5.4 -&amp;gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gmplib.org/&#34;&gt;GMP (5.x)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mpfr.org/&#34;&gt;MPFR (3.x)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.boost.org/&#34;&gt;boost (1.61 -&amp;gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.opencsg.org/&#34;&gt;OpenCSG (1.4.2 -&amp;gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://glew.sourceforge.net/&#34;&gt;GLEW (1.5.4 -&amp;gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eigen.tuxfamily.org/&#34;&gt;Eigen (3.x)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.gnome.org/glib/&#34;&gt;glib2 (2.x)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fontconfig.org/&#34;&gt;fontconfig (2.10 -&amp;gt; )&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://freetype.org/&#34;&gt;freetype2 (2.4 -&amp;gt; )&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freedesktop.org/wiki/Software/HarfBuzz/&#34;&gt;harfbuzz (0.9.19 -&amp;gt; )&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libzip.org/&#34;&gt;libzip (0.10.1 -&amp;gt; )&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/bison/&#34;&gt;Bison (2.4 -&amp;gt; )&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://flex.sourceforge.net/&#34;&gt;Flex (2.5.35 -&amp;gt; )&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freedesktop.org/wiki/Software/pkg-config/&#34;&gt;pkg-config (0.26 -&amp;gt; )&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/double-conversion/&#34;&gt;double-conversion (2.0.1 -&amp;gt; )&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the test suite, additional requirements are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python3 (3.8 -&amp;gt; )&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ghostscript.com/index.html&#34;&gt;Ghostscript (10.x -&amp;gt;)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Getting the source code&lt;/h3&gt; &#xA;&lt;p&gt;Install git (&lt;a href=&#34;https://git-scm.com/&#34;&gt;https://git-scm.com/&lt;/a&gt;) onto your system. Then run a clone:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/openscad/openscad.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will download the latest sources into a directory named &lt;code&gt;openscad&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To pull the various submodules (incl. the &lt;a href=&#34;https://github.com/openscad/MCAD&#34;&gt;MCAD library&lt;/a&gt;), do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd openscad&#xA;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building for macOS&lt;/h3&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode&lt;/li&gt; &#xA; &lt;li&gt;automake, libtool, cmake, pkg-config, wget, meson, python-packaging (we recommend installing these using Homebrew)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install Dependencies:&lt;/p&gt; &#xA;&lt;p&gt;After building dependencies using one of the following options, follow the instructions in the &lt;em&gt;Compilation&lt;/em&gt; section.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;From source&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Run the script that sets up the environment variables:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; source scripts/setenv-macos.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then run the script to compile all the dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; ./scripts/macosx-build-dependencies.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Homebrew&lt;/strong&gt; (assumes &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; is already installed)&lt;/p&gt; &lt;pre&gt;&lt;code&gt; ./scripts/macosx-build-homebrew.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Building for Linux/BSD&lt;/h3&gt; &#xA;&lt;p&gt;First, make sure that you have git installed (often packaged as &#39;git-core&#39; or &#39;scmgit&#39;). Once you&#39;ve cloned this git repository, download and install the dependency packages listed above using your system&#39;s package manager. A convenience script is provided that can help with this process on some systems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo ./scripts/uni-get-dependencies.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing dependencies, check their versions. You can run this script to help you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./scripts/check-dependencies.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take care that you don&#39;t have old local copies anywhere (&lt;code&gt;/usr/local/&lt;/code&gt;). If all dependencies are present and of a high enough version, skip ahead to the Compilation instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Building for Linux/BSD on systems with older or missing dependencies&lt;/h3&gt; &#xA;&lt;p&gt;If some of your system dependency libraries are missing or old, then you can download and build newer versions into &lt;code&gt;$HOME/openscad_deps&lt;/code&gt; by following this process. First, run the script that sets up the environment variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source ./scripts/setenv-unibuild.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the script to compile all the prerequisite libraries above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./scripts/uni-build-dependencies.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that huge dependencies like gcc, qt, or glib2 are not included here, only the smaller ones (boost, CGAL, opencsg, etc). After the build, again check dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./scripts/check-dependencies.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, follow the Compilation instructions below.&lt;/p&gt; &#xA;&lt;h3&gt;Building on Nix&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/openscad/openscad/master/scripts/nix&#34;&gt;development Nix shell&lt;/a&gt; is included for local, incremental compilation.&lt;/p&gt; &#xA;&lt;h3&gt;Building for Windows&lt;/h3&gt; &#xA;&lt;p&gt;OpenSCAD for Windows is usually cross-compiled from Linux. If you wish to attempt an MSVC build on Windows, please see this site: &lt;a href=&#34;https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Building_on_Windows&#34;&gt;https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Building_on_Windows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To cross-build, first make sure that you have all necessary dependencies of the MXE project ( listed at &lt;a href=&#34;https://mxe.cc/#requirements&#34;&gt;https://mxe.cc/#requirements&lt;/a&gt; ). Don&#39;t install MXE itself, the scripts below will do that for you under &lt;code&gt;$HOME/openscad_deps/mxe&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then get your development tools installed to get GCC. Then after you&#39;ve cloned this git repository, start a new clean bash shell and run the script that sets up the environment variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source ./scripts/setenv-mingw-xbuild.sh 64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the script to download &amp;amp; compile all the prerequisite libraries above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./scripts/mingw-x-build-dependencies.sh 64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this process can take several hours, and tens of gigabytes of disk space, as it uses the &lt;a href=&#34;https://mxe.cc&#34;&gt;https://mxe.cc&lt;/a&gt; system to cross-build many libraries. After it is complete, build OpenSCAD and package it to an installer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./scripts/release-common.sh mingw64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a 32-bit Windows cross-build, replace 64 with 32 in the above instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Building for WebAssembly&lt;/h3&gt; &#xA;&lt;p&gt;We support building OpenSCAD headless for WebAssembly w/ Emscripten, using a premade Docker image built in &lt;a href=&#34;https://github.com/openscad/openscad-wasm&#34;&gt;openscad/openscad-wasm&lt;/a&gt; (which also has usage examples)&lt;/p&gt; &#xA;&lt;p&gt;####&amp;nbsp;Browser&lt;/p&gt; &#xA;&lt;p&gt;The following command creates &lt;code&gt;build-web/openscad.wasm&lt;/code&gt; &amp;amp; &lt;code&gt;build-web/openscad.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/wasm-base-docker-run.sh emcmake cmake -B build-web -DCMAKE_BUILD_TYPE=Debug -DEXPERIMENTAL=1&#xA;./scripts/wasm-base-docker-run.sh cmake --build build-web -j2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openscad/openscad-playground&#34;&gt;openscad/openscad-playground&lt;/a&gt; uses this WASM build to provide a &lt;a href=&#34;https://ochafik.com/openscad2/&#34;&gt;Web UI&lt;/a&gt; with a subset of features of OpenSCAD.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] With a debug build (&lt;code&gt;-DCMAKE_BUILD_TYPE=Debug&lt;/code&gt;), you can set C++ breakpoints in Firefox and in Chrome (the latter &lt;a href=&#34;https://developer.chrome.com/docs/devtools/wasm&#34;&gt;needs an extension&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Standalone node.js build&lt;/h4&gt; &#xA;&lt;p&gt;The following command creates &lt;code&gt;build-node/openscad.js&lt;/code&gt;, which is executable (requires &lt;code&gt;node&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/wasm-base-docker-run.sh emcmake cmake -B build-node -DWASM_BUILD_TYPE=node -DCMAKE_BUILD_TYPE=Debug -DEXPERIMENTAL=1&#xA;./scripts/wasm-base-docker-run.sh cmake --build build-node -j2&#xA;build-node/openscad.js --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] With a debug build (&lt;code&gt;-DCMAKE_BUILD_TYPE=Debug&lt;/code&gt;), you can set C++ breakpoints in VSCode + Node (&lt;a href=&#34;https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_debugging-webassembly&#34;&gt;needs an extension&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Compilation&lt;/h3&gt; &#xA;&lt;p&gt;First, run &lt;code&gt;cmake -B build -DEXPERIMENTAL=1&lt;/code&gt; to generate a Makefile in the &lt;code&gt;build&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;cmake --build build&lt;/code&gt;. Finally, on Linux you might run &lt;code&gt;cmake --install build&lt;/code&gt; as root.&lt;/p&gt; &#xA;&lt;p&gt;If you had problems compiling from source, raise a new issue in the &lt;a href=&#34;https://github.com/openscad/openscad/issues&#34;&gt;issue tracker on the github page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This site and it&#39;s subpages can also be helpful: &lt;a href=&#34;https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Building_OpenSCAD_from_Sources&#34;&gt;https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Building_OpenSCAD_from_Sources&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once built, you can run tests with &lt;code&gt;ctest&lt;/code&gt; from the &lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Note: Both &lt;code&gt;cmake --build&lt;/code&gt; and &lt;code&gt;ctest&lt;/code&gt; accepts a &lt;code&gt;-j N&lt;/code&gt; argument for distributing the load over &lt;code&gt;N&lt;/code&gt; parallel processes.&lt;/p&gt; &#xA;&lt;h3&gt;Running CI workflows locally&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://circleci.com/docs/2.0/local-cli/&#34;&gt;circleci-cli&lt;/a&gt; (you&#39;ll need an API key)&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: we also use GitHub Workflows, but only to run tests on Windows (which we cross-build for in the Linux-based CircleCI workflows below). Also, &lt;a href=&#34;https://github.com/nektos/act&#34;&gt;act&lt;/a&gt; doesn&#39;t like our submodule setup anyway.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the CI jobs&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# When &#34;successful&#34;, these will fail to upload at the very end of the workflow.&#xA;circleci local execute --job  openscad-mxe-64bit&#xA;circleci local execute --job  openscad-mxe-32bit&#xA;circleci local execute --job  openscad-appimage-64bit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: openscad-macos can&#39;t be built locally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If/when GCC gets randomly killed, give docker more RAM (e.g. 4GB per concurrent image you plan to run)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To debug the jobs more interactively, you can go the manual route (inspect .circleci/config.yml to get the actual docker image you need)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --entrypoint=/bin/bash -it openscad/mxe-x86_64-gui:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then once you get the console:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/%your username%/openscad.git workspace&#xA;cd workspace&#xA;git checkout %your branch%&#xA;git submodule init&#xA;git submodule update&#xA;&#xA;# Then execute the commands from .circleci/config.yml:&#xA;#    export NUMCPU=2&#xA;#    ...&#xA;#    ./scripts/release-common.sh -snapshot -mingw64 -v &#34;$OPENSCAD_VERSION&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>colmap/colmap</title>
    <updated>2025-04-27T01:42:51Z</updated>
    <id>tag:github.com,2025-04-27:/colmap/colmap</id>
    <link href="https://github.com/colmap/colmap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;COLMAP - Structure-from-Motion and Multi-View Stereo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;COLMAP&lt;/h1&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;COLMAP is a general-purpose Structure-from-Motion (SfM) and Multi-View Stereo (MVS) pipeline with a graphical and command-line interface. It offers a wide range of features for reconstruction of ordered and unordered image collections. The software is licensed under the new BSD license. If you use this project for your research, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{schoenberger2016sfm,&#xA;    author={Sch\&#34;{o}nberger, Johannes Lutz and Frahm, Jan-Michael},&#xA;    title={Structure-from-Motion Revisited},&#xA;    booktitle={Conference on Computer Vision and Pattern Recognition (CVPR)},&#xA;    year={2016},&#xA;}&#xA;&#xA;@inproceedings{schoenberger2016mvs,&#xA;    author={Sch\&#34;{o}nberger, Johannes Lutz and Zheng, Enliang and Pollefeys, Marc and Frahm, Jan-Michael},&#xA;    title={Pixelwise View Selection for Unstructured Multi-View Stereo},&#xA;    booktitle={European Conference on Computer Vision (ECCV)},&#xA;    year={2016},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the image retrieval / vocabulary tree engine, please also cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{schoenberger2016vote,&#xA;    author={Sch\&#34;{o}nberger, Johannes Lutz and Price, True and Sattler, Torsten and Frahm, Jan-Michael and Pollefeys, Marc},&#xA;    title={A Vote-and-Verify Strategy for Fast Spatial Verification in Image Retrieval},&#xA;    booktitle={Asian Conference on Computer Vision (ACCV)},&#xA;    year={2016},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The latest source code is available at &lt;a href=&#34;https://github.com/colmap/colmap&#34;&gt;https://github.com/colmap/colmap&lt;/a&gt;. COLMAP builds on top of existing works and when using specific algorithms within COLMAP, please also cite the original authors, as specified in the source code, and consider citing relevant third-party dependencies (most notably ceres-solver, poselib, sift-gpu, vlfeat).&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binaries for &lt;strong&gt;Windows&lt;/strong&gt; and other resources can be downloaded from &lt;a href=&#34;https://github.com/colmap/colmap/releases&#34;&gt;https://github.com/colmap/colmap/releases&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Binaries for &lt;strong&gt;Linux/Unix/BSD&lt;/strong&gt; are available at &lt;a href=&#34;https://repology.org/metapackage/colmap/versions&#34;&gt;https://repology.org/metapackage/colmap/versions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Pre-built &lt;strong&gt;Docker&lt;/strong&gt; images are available at &lt;a href=&#34;https://hub.docker.com/r/colmap/colmap&#34;&gt;https://hub.docker.com/r/colmap/colmap&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python bindings&lt;/strong&gt; are available at &lt;a href=&#34;https://pypi.org/project/pycolmap&#34;&gt;https://pypi.org/project/pycolmap&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To &lt;strong&gt;build from source&lt;/strong&gt;, please see &lt;a href=&#34;https://colmap.github.io/install.html&#34;&gt;https://colmap.github.io/install.html&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download pre-built binaries or build from source.&lt;/li&gt; &#xA; &lt;li&gt;Download one of the provided datasets at &lt;a href=&#34;https://demuc.de/colmap/datasets/&#34;&gt;https://demuc.de/colmap/datasets/&lt;/a&gt; or use your own images.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;strong&gt;automatic reconstruction&lt;/strong&gt; to easily build models with a single click or command.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation is available at &lt;a href=&#34;https://colmap.github.io/&#34;&gt;https://colmap.github.io/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Please, use GitHub Discussions at &lt;a href=&#34;https://github.com/colmap/colmap/discussions&#34;&gt;https://github.com/colmap/colmap/discussions&lt;/a&gt; for questions and the GitHub issue tracker at &lt;a href=&#34;https://github.com/colmap/colmap&#34;&gt;https://github.com/colmap/colmap&lt;/a&gt; for bug reports, feature requests/additions, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;COLMAP was originally written by &lt;a href=&#34;https://demuc.de/&#34;&gt;Johannes Schönberger&lt;/a&gt; with funding provided by his PhD advisors Jan-Michael Frahm and Marc Pollefeys. The team of core project maintainers currently includes &lt;a href=&#34;https://github.com/ahojnnes&#34;&gt;Johannes Schönberger&lt;/a&gt;, &lt;a href=&#34;https://github.com/sarlinpe&#34;&gt;Paul-Edouard Sarlin&lt;/a&gt;, and &lt;a href=&#34;https://github.com/B1ueber2y&#34;&gt;Shaohui Liu&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Python bindings in PyCOLMAP were originally added by &lt;a href=&#34;https://github.com/mihaidusmanu&#34;&gt;Mihai Dusmanu&lt;/a&gt;, &lt;a href=&#34;https://github.com/Phil26AT&#34;&gt;Philipp Lindenberger&lt;/a&gt;, and &lt;a href=&#34;https://github.com/sarlinpe&#34;&gt;Paul-Edouard Sarlin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The project has also benefitted from countless community contributions, including bug fixes, improvements, new features, third-party tooling, and community support (special credits to &lt;a href=&#34;https://tsattler.github.io&#34;&gt;Torsten Sattler&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions (bug reports, bug fixes, improvements, etc.) are very welcome and should be submitted in the form of new issues and/or pull requests on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The COLMAP library is licensed under the new BSD license. Note that this text refers only to the license for COLMAP itself, independent of its thirdparty dependencies, which are separately licensed. Building COLMAP with these dependencies may affect the resulting COLMAP license.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c), ETH Zurich and UNC Chapel Hill.&#xA;All rights reserved.&#xA;&#xA;Redistribution and use in source and binary forms, with or without&#xA;modification, are permitted provided that the following conditions are met:&#xA;&#xA;    * Redistributions of source code must retain the above copyright&#xA;      notice, this list of conditions and the following disclaimer.&#xA;&#xA;    * Redistributions in binary form must reproduce the above copyright&#xA;      notice, this list of conditions and the following disclaimer in the&#xA;      documentation and/or other materials provided with the distribution.&#xA;&#xA;    * Neither the name of ETH Zurich and UNC Chapel Hill nor the names of&#xA;      its contributors may be used to endorse or promote products derived&#xA;      from this software without specific prior written permission.&#xA;&#xA;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34;&#xA;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE&#xA;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE&#xA;ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE&#xA;LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR&#xA;CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF&#xA;SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS&#xA;INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN&#xA;CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#xA;ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE&#xA;POSSIBILITY OF SUCH DAMAGE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>hku-mars/FAST_LIO</title>
    <updated>2025-04-27T01:42:51Z</updated>
    <id>tag:github.com,2025-04-27:/hku-mars/FAST_LIO</id>
    <link href="https://github.com/hku-mars/FAST_LIO" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A computationally efficient and robust LiDAR-inertial odometry (LIO) package&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Related Works and Extended Application&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;SLAM:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hku-mars/ikd-Tree&#34;&gt;ikd-Tree&lt;/a&gt;: A state-of-art dynamic KD-Tree for 3D kNN search.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hku-mars/r2live&#34;&gt;R2LIVE&lt;/a&gt;: A high-precision LiDAR-inertial-Vision fusion work using FAST-LIO as LiDAR-inertial front-end.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hku-mars/LiDAR_IMU_Init&#34;&gt;LI_Init&lt;/a&gt;: A robust, real-time LiDAR-IMU extrinsic initialization and synchronization package..&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HViktorTsoi/FAST_LIO_LOCALIZATION&#34;&gt;FAST-LIO-LOCALIZATION&lt;/a&gt;: The integration of FAST-LIO with &lt;strong&gt;Re-localization&lt;/strong&gt; function module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hku-mars/FAST-LIVO&#34;&gt;FAST-LIVO&lt;/a&gt; | &lt;a href=&#34;https://github.com/hku-mars/FAST-LIVO2&#34;&gt;FAST-LIVO2&lt;/a&gt;: A state-of-art LiDAR-inertial-visual odometry (LIVO) system with high computational efficiency, robustness, and pixel-level accuracy.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Control and Plan:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hku-mars/IKFoM&#34;&gt;IKFOM&lt;/a&gt;: A Toolbox for fast and high-precision on-manifold Kalman filter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hku-mars/dyn_small_obs_avoidance&#34;&gt;UAV Avoiding Dynamic Obstacles&lt;/a&gt;: One of the implementation of FAST-LIO in robot&#39;s planning.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wikgrQbE6Cs&#34;&gt;UGV Demo&lt;/a&gt;: Model Predictive Control for Trajectory Tracking on Differentiable Manifolds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2202.12177&#34;&gt;Bubble Planner&lt;/a&gt;: Planning High-speed Smooth Quadrotor Trajectories using Receding Corridors.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- 10. [**FAST-LIVO**](https://github.com/hku-mars/FAST-LIVO): Fast and Tightly-coupled Sparse-Direct LiDAR-Inertial-Visual Odometry. --&gt; &#xA;&lt;h2&gt;FAST-LIO&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;FAST-LIO&lt;/strong&gt; (Fast LiDAR-Inertial Odometry) is a computationally efficient and robust LiDAR-inertial odometry package. It fuses LiDAR feature points with IMU data using a tightly-coupled iterated extended Kalman filter to allow robust navigation in fast-motion, noisy or cluttered environments where degeneration occurs. Our package address many key issues:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fast iterated Kalman filter for odometry optimization;&lt;/li&gt; &#xA; &lt;li&gt;Automaticaly initialized at most steady environments;&lt;/li&gt; &#xA; &lt;li&gt;Parallel KD-Tree Search to decrease the computation;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;FAST-LIO 2.0 (2021-07-05 Update)&lt;/h2&gt; &#xA;&lt;!-- ![image](doc/real_experiment2.gif) --&gt; &#xA;&lt;!-- [![Watch the video](doc/real_exp_2.png)](https://youtu.be/2OvjGnxszf8) --&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/real_experiment2.gif&#34; width=&#34;49.6%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/ulhkwh_fastlio.gif&#34; width=&#34;49.6%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Related video:&lt;/strong&gt; &lt;a href=&#34;https://youtu.be/2OvjGnxszf8&#34;&gt;FAST-LIO2&lt;/a&gt;, &lt;a href=&#34;https://youtu.be/iYCY6T79oNU&#34;&gt;FAST-LIO1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pipeline:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/overview_fastlio2.svg?sanitize=true&#34; width=&#34;99%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;New Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Incremental mapping using &lt;a href=&#34;https://github.com/hku-mars/ikd-Tree&#34;&gt;ikd-Tree&lt;/a&gt;, achieve faster speed and over 100Hz LiDAR rate.&lt;/li&gt; &#xA; &lt;li&gt;Direct odometry (scan to map) on Raw LiDAR points (feature extraction can be disabled), achieving better accuracy.&lt;/li&gt; &#xA; &lt;li&gt;Since no requirements for feature extraction, FAST-LIO2 can support many types of LiDAR including spinning (Velodyne, Ouster) and solid-state (Livox Avia, Horizon, MID-70) LiDARs, and can be easily extended to support more LiDARs.&lt;/li&gt; &#xA; &lt;li&gt;Support external IMU.&lt;/li&gt; &#xA; &lt;li&gt;Support ARM-based platforms including Khadas VIM3, Nivida TX2, Raspberry Pi 4B(8G RAM).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Related papers&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/Fast_LIO_2.pdf&#34;&gt;FAST-LIO2: Fast Direct LiDAR-inertial Odometry&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2010.08196&#34;&gt;FAST-LIO: A Fast, Robust LiDAR-inertial Odometry Package by Tightly-Coupled Iterated Kalman Filter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contributors&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/XW-HKU&#34;&gt;Wei Xu 徐威&lt;/a&gt;，&lt;a href=&#34;https://github.com/Ecstasy-EC&#34;&gt;Yixi Cai 蔡逸熙&lt;/a&gt;，&lt;a href=&#34;https://github.com/Joanna-HE&#34;&gt;Dongjiao He 贺东娇&lt;/a&gt;，&lt;a href=&#34;https://github.com/zfc-zfc&#34;&gt;Fangcheng Zhu 朱方程&lt;/a&gt;，&lt;a href=&#34;https://github.com/ziv-lin&#34;&gt;Jiarong Lin 林家荣&lt;/a&gt;，&lt;a href=&#34;https://github.com/Zale-Liu&#34;&gt;Zheng Liu 刘政&lt;/a&gt;, &lt;a href=&#34;https://github.com/borongyuan&#34;&gt;Borong Yuan&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- &lt;div align=&#34;center&#34;&gt;&#xA;    &lt;img src=&#34;doc/results/HKU_HW.png&#34; width = 49% &gt;&#xA;    &lt;img src=&#34;doc/results/HKU_MB_001.png&#34; width = 49% &gt;&#xA;&lt;/div&gt; --&gt; &#xA;&lt;h2&gt;1. Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;1.1 &lt;strong&gt;Ubuntu&lt;/strong&gt; and &lt;strong&gt;ROS&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ubuntu &amp;gt;= 16.04&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;Ubuntu 18.04 or higher&lt;/strong&gt;, the &lt;strong&gt;default&lt;/strong&gt; PCL and Eigen is enough for FAST-LIO to work normally.&lt;/p&gt; &#xA;&lt;p&gt;ROS &amp;gt;= Melodic. &lt;a href=&#34;http://wiki.ros.org/ROS/Installation&#34;&gt;ROS Installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;1.2. &lt;strong&gt;PCL &amp;amp;&amp;amp; Eigen&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;PCL &amp;gt;= 1.8, Follow &lt;a href=&#34;http://www.pointclouds.org/downloads/linux.html&#34;&gt;PCL Installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Eigen &amp;gt;= 3.3.4, Follow &lt;a href=&#34;http://eigen.tuxfamily.org/index.php?title=Main_Page&#34;&gt;Eigen Installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;1.3. &lt;strong&gt;livox_ros_driver&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://github.com/Livox-SDK/livox_ros_driver&#34;&gt;livox_ros_driver Installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Remarks:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Since the FAST-LIO must support Livox serials LiDAR firstly, so the &lt;strong&gt;livox_ros_driver&lt;/strong&gt; must be installed and &lt;strong&gt;sourced&lt;/strong&gt; before run any FAST-LIO luanch file.&lt;/li&gt; &#xA; &lt;li&gt;How to source? The easiest way is add the line &lt;code&gt;source $Livox_ros_driver_dir$/devel/setup.bash&lt;/code&gt; to the end of file &lt;code&gt;~/.bashrc&lt;/code&gt;, where &lt;code&gt;$Livox_ros_driver_dir$&lt;/code&gt; is the directory of the livox ros driver workspace (should be the &lt;code&gt;ws_livox&lt;/code&gt; directory if you completely followed the livox official document).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2. Build&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use docker conatiner to run fastlio2, please install the docker on you machine. Follow &lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/&#34;&gt;Docker Installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;2.1 Docker Container&lt;/h3&gt; &#xA;&lt;p&gt;User can create a new script with anyname by the following command in linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;touch &amp;lt;your_custom_name&amp;gt;.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Place the following code inside the &lt;code&gt;&amp;lt;your_custom_name&amp;gt;.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/bin/bash&#xA;mkdir docker_ws&#xA;# Script to run ROS Kinetic with GUI support in Docker&#xA;&#xA;# Allow X server to be accessed from the local machine&#xA;xhost +local:&#xA;&#xA;# Container name&#xA;CONTAINER_NAME=&#34;fastlio2&#34;&#xA;&#xA;# Run the Docker container&#xA;docker run -itd \&#xA;  --name=$CONTAINER_NAME \&#xA;  --user mars_ugv \&#xA;  --network host \&#xA;  --ipc=host \&#xA;  -v /home/$USER/docker_ws:/home/mars_ugv/docker_ws \&#xA;  --privileged \&#xA;  --env=&#34;QT_X11_NO_MITSHM=1&#34; \&#xA;  --volume=&#34;/etc/localtime:/etc/localtime:ro&#34; \&#xA;  -v /dev/bus/usb:/dev/bus/usb \&#xA;  --device=/dev/dri \&#xA;  --group-add video \&#xA;  -v /tmp/.X11-unix:/tmp/.X11-unix \&#xA;  --env=&#34;DISPLAY=$DISPLAY&#34; \&#xA;  kenny0407/marslab_fastlio2:latest \&#xA;  /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;execute the following command to grant execute permissions to the script, making it runnable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo chmod +x &amp;lt;your_custom_name&amp;gt;.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;execute the following command to download the image and create the container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./&amp;lt;your_custom_name&amp;gt;.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Script explanation:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The docker run command provided below creates a container with a tag, using an image from Docker Hub. The download duration for this image can differ depending on the user&#39;s network speed.&lt;/li&gt; &#xA; &lt;li&gt;This command also establishes a new workspace called &lt;code&gt;docker_ws&lt;/code&gt;, which serves as a shared folder between the Docker container and the host machine. This means that if users wish to run the rosbag example, they need to download the rosbag file and place it in the &lt;code&gt;docker_ws&lt;/code&gt; directory on their host machine.&lt;/li&gt; &#xA; &lt;li&gt;Subsequently, a folder with the same name inside the Docker container will receive this file. Users can then easily play the file within Docker.&lt;/li&gt; &#xA; &lt;li&gt;In this example, we&#39;ve shared the network of the host machine with the Docker container. Consequently, if users execute the &lt;code&gt;rostopic list&lt;/code&gt; command, they will observe identical output whether they run it on the host machine or inside the Docker container.&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.2 Build from source&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repository and catkin_make:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    cd ~/$A_ROS_DIR$/src&#xA;    git clone https://github.com/hku-mars/FAST_LIO.git&#xA;    cd FAST_LIO&#xA;    git submodule update --init&#xA;    cd ../..&#xA;    catkin_make&#xA;    source devel/setup.bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remember to source the livox_ros_driver before build (follow 1.3 &lt;strong&gt;livox_ros_driver&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;If you want to use a custom build of PCL, add the following line to ~/.bashrc &lt;code&gt;export PCL_ROOT={CUSTOM_PCL_PATH}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3. Directly run&lt;/h2&gt; &#xA;&lt;p&gt;Noted:&lt;/p&gt; &#xA;&lt;p&gt;A. Please make sure the IMU and LiDAR are &lt;strong&gt;Synchronized&lt;/strong&gt;, that&#39;s important.&lt;/p&gt; &#xA;&lt;p&gt;B. The warning message &#34;Failed to find match for field &#39;time&#39;.&#34; means the timestamps of each LiDAR points are missed in the rosbag file. That is important for the forward propagation and backwark propagation.&lt;/p&gt; &#xA;&lt;p&gt;C. We recommend to set the &lt;strong&gt;extrinsic_est_en&lt;/strong&gt; to false if the extrinsic is give. As for the extrinsic initiallization, please refer to our recent work: &lt;a href=&#34;https://github.com/hku-mars/LiDAR_IMU_Init&#34;&gt;&lt;strong&gt;Robust Real-time LiDAR-inertial Initialization&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;3.1 For Avia&lt;/h3&gt; &#xA;&lt;p&gt;Connect to your PC to Livox Avia LiDAR by following &lt;a href=&#34;https://github.com/Livox-SDK/livox_ros_driver&#34;&gt;Livox-ros-driver installation&lt;/a&gt;, then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    cd ~/$FAST_LIO_ROS_DIR$&#xA;    source devel/setup.bash&#xA;    roslaunch fast_lio mapping_avia.launch&#xA;    roslaunch livox_ros_driver livox_lidar_msg.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For livox serials, FAST-LIO only support the data collected by the &lt;code&gt;livox_lidar_msg.launch&lt;/code&gt; since only its &lt;code&gt;livox_ros_driver/CustomMsg&lt;/code&gt; data structure produces the timestamp of each LiDAR point which is very important for the motion undistortion. &lt;code&gt;livox_lidar.launch&lt;/code&gt; can not produce it right now.&lt;/li&gt; &#xA; &lt;li&gt;If you want to change the frame rate, please modify the &lt;strong&gt;publish_freq&lt;/strong&gt; parameter in the &lt;a href=&#34;https://github.com/Livox-SDK/livox_ros_driver/raw/master/livox_ros_driver/launch/livox_lidar_msg.launch&#34;&gt;livox_lidar_msg.launch&lt;/a&gt; of &lt;a href=&#34;https://github.com/Livox-SDK/livox_ros_driver&#34;&gt;Livox-ros-driver&lt;/a&gt; before make the livox_ros_driver pakage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3.2 For Livox serials with external IMU&lt;/h3&gt; &#xA;&lt;p&gt;mapping_avia.launch theratically supports mid-70, mid-40 or other livox serial LiDAR, but need to setup some parameters befor run:&lt;/p&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;config/avia.yaml&lt;/code&gt; to set the below parameters:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;LiDAR point cloud topic name: &lt;code&gt;lid_topic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;IMU topic name: &lt;code&gt;imu_topic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Translational extrinsic: &lt;code&gt;extrinsic_T&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rotational extrinsic: &lt;code&gt;extrinsic_R&lt;/code&gt; (only support rotation matrix)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The extrinsic parameters in FAST-LIO is defined as the LiDAR&#39;s pose (position and rotation matrix) in IMU body frame (i.e. the IMU is the base frame). They can be found in the official manual.&lt;/li&gt; &#xA; &lt;li&gt;FAST-LIO produces a very simple software time sync for livox LiDAR, set parameter &lt;code&gt;time_sync_en&lt;/code&gt; to ture to turn on. But turn on &lt;strong&gt;ONLY IF external time synchronization is really not possible&lt;/strong&gt;, since the software time sync cannot make sure accuracy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3.3 For Velodyne or Ouster (Velodyne as an example)&lt;/h3&gt; &#xA;&lt;p&gt;Step A: Setup before run&lt;/p&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;config/velodyne.yaml&lt;/code&gt; to set the below parameters:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;LiDAR point cloud topic name: &lt;code&gt;lid_topic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;IMU topic name: &lt;code&gt;imu_topic&lt;/code&gt; (both internal and external, 6-aixes or 9-axies are fine)&lt;/li&gt; &#xA; &lt;li&gt;Set the parameter &lt;code&gt;timestamp_unit&lt;/code&gt; based on the unit of &lt;strong&gt;time&lt;/strong&gt; (Velodyne) or &lt;strong&gt;t&lt;/strong&gt; (Ouster) field in PoindCloud2 rostopic&lt;/li&gt; &#xA; &lt;li&gt;Line number (we tested 16, 32 and 64 line, but not tested 128 or above): &lt;code&gt;scan_line&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Translational extrinsic: &lt;code&gt;extrinsic_T&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rotational extrinsic: &lt;code&gt;extrinsic_R&lt;/code&gt; (only support rotation matrix)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The extrinsic parameters in FAST-LIO is defined as the LiDAR&#39;s pose (position and rotation matrix) in IMU body frame (i.e. the IMU is the base frame).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Step B: Run below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    cd ~/$FAST_LIO_ROS_DIR$&#xA;    source devel/setup.bash&#xA;    roslaunch fast_lio mapping_velodyne.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Step C: Run LiDAR&#39;s ros driver or play rosbag.&lt;/p&gt; &#xA;&lt;h3&gt;3.4 For MARSIM Simulator&lt;/h3&gt; &#xA;&lt;p&gt;Install MARSIM: &lt;a href=&#34;https://github.com/hku-mars/MARSIM&#34;&gt;https://github.com/hku-mars/MARSIM&lt;/a&gt; and run MARSIM as below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/$MARSIM_ROS_DIR$&#xA;roslaunch test_interface single_drone_avia.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then Run FAST-LIO:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;roslaunch fast_lio mapping_marsim.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.5 PCD file save&lt;/h3&gt; &#xA;&lt;p&gt;Set &lt;code&gt;pcd_save_enable&lt;/code&gt; in launchfile to &lt;code&gt;1&lt;/code&gt;. All the scans (in global frame) will be accumulated and saved to the file &lt;code&gt;FAST_LIO/PCD/scans.pcd&lt;/code&gt; after the FAST-LIO is terminated. &lt;code&gt;pcl_viewer scans.pcd&lt;/code&gt; can visualize the point clouds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tips for pcl_viewer:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;change what to visualize/color by pressing keyboard 1,2,3,4,5 when pcl_viewer is running.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;    1 is all random&#xA;    2 is X values&#xA;    3 is Y values&#xA;    4 is Z values&#xA;    5 is intensity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4. Rosbag Example&lt;/h2&gt; &#xA;&lt;h3&gt;4.1 Livox Avia Rosbag&lt;/h3&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/results/HKU_LG_Indoor.png&#34; width=&#34;47%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/results/HKU_MB_002.png&#34; width=&#34;51%&#34;&gt; &#xA; &lt;p&gt;Files: Can be downloaded from &lt;a href=&#34;https://drive.google.com/drive/folders/1CGYEJ9-wWjr8INyan6q1BZz_5VtGB-fP?usp=sharing&#34;&gt;google drive&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;roslaunch fast_lio mapping_avia.launch&#xA;rosbag play YOUR_DOWNLOADED.bag&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;4.2 Velodyne HDL-32E Rosbag&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;NCLT Dataset&lt;/strong&gt;: Original bin file can be found &lt;a href=&#34;http://robots.engin.umich.edu/nclt/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;We produce &lt;a href=&#34;https://drive.google.com/drive/folders/1blQJuAB4S80NwZmpM6oALyHWvBljPSOE?usp=sharing&#34;&gt;Rosbag Files&lt;/a&gt; and &lt;a href=&#34;https://drive.google.com/file/d/1QC9IRBv2_-cgo_AEvL62E1ml1IL9ht6J/view?usp=sharing&#34;&gt;a python script&lt;/a&gt; to generate Rosbag files: &lt;code&gt;python3 sensordata_to_rosbag_fastlio.py bin_file_dir bag_name.bag&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;roslaunch fast_lio mapping_velodyne.launch&#xA;rosbag play YOUR_DOWNLOADED.bag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h2&gt;5.Implementation on UAV&lt;/h2&gt; &#xA; &lt;p&gt;In order to validate the robustness and computational efficiency of FAST-LIO in actual mobile robots, we build a small-scale quadrotor which can carry a Livox Avia LiDAR with 70 degree FoV and a DJI Manifold 2-C onboard computer with a 1.8 GHz Intel i7-8550U CPU and 8 G RAM, as shown in below.&lt;/p&gt; &#xA; &lt;p&gt;The main structure of this UAV is 3d printed (Aluminum or PLA), the .stl file will be open-sourced in the future.&lt;/p&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/uav01.jpg&#34; width=&#34;40.5%&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/uav_system.png&#34; width=&#34;57%&#34;&gt; &#xA; &lt;/div&gt; &#xA; &lt;h2&gt;6.Acknowledgments&lt;/h2&gt; &#xA; &lt;p&gt;Thanks for LOAM(J. Zhang and S. Singh. LOAM: Lidar Odometry and Mapping in Real-time), &lt;a href=&#34;https://github.com/Livox-SDK/livox_mapping&#34;&gt;Livox_Mapping&lt;/a&gt;, &lt;a href=&#34;https://github.com/ChaoqinRobotics/LINS---LiDAR-inertial-SLAM&#34;&gt;LINS&lt;/a&gt; and &lt;a href=&#34;https://github.com/hku-mars/loam_livox&#34;&gt;Loam_Livox&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>