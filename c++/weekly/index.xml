<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-02T01:40:12Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>endless-sky/endless-sky</title>
    <updated>2025-02-02T01:40:12Z</updated>
    <id>tag:github.com,2025-02-02:/endless-sky/endless-sky</id>
    <link href="https://github.com/endless-sky/endless-sky" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Space exploration, trading, and combat game.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Endless Sky&lt;/h1&gt; &#xA;&lt;p&gt;Explore other star systems. Earn money by trading, carrying passengers, or completing missions. Use your earnings to buy a better ship or to upgrade the weapons and engines on your current one. Blow up pirates. Take sides in a civil war. Or leave human space behind and hope to find some friendly aliens whose culture is more civilized than your own...&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Endless Sky is a sandbox-style space exploration game similar to Elite, Escape Velocity, or Star Control. You start out as the captain of a tiny spaceship and can choose what to do from there. The game includes a major plot line and many minor missions, but you can choose whether you want to play through the plot or strike out on your own as a merchant or bounty hunter or explorer.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/endless-sky/endless-sky/wiki/PlayersManual&#34;&gt;player&#39;s manual&lt;/a&gt; for more information, or the &lt;a href=&#34;https://endless-sky.github.io/&#34;&gt;home page&lt;/a&gt; for screenshots and the occasional blog post.&lt;/p&gt; &#xA;&lt;h2&gt;Installing the game&lt;/h2&gt; &#xA;&lt;p&gt;Official releases of Endless Sky are available as direct downloads from &lt;a href=&#34;https://github.com/endless-sky/endless-sky/releases/latest&#34;&gt;GitHub&lt;/a&gt;, on &lt;a href=&#34;https://store.steampowered.com/app/404410/Endless_Sky/&#34;&gt;Steam&lt;/a&gt;, on &lt;a href=&#34;https://gog.com/game/endless_sky&#34;&gt;GOG&lt;/a&gt;, and on &lt;a href=&#34;https://flathub.org/apps/details/io.github.endless_sky.endless_sky&#34;&gt;Flathub&lt;/a&gt;. Other package managers may also include the game, though the specific version provided may not be up-to-date.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Endless Sky has very minimal system requirements, meaning most systems should be able to run the game. The most restrictive requirement is likely that your device must support at least OpenGL 3.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Minimum&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Recommended&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RAM&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;750 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graphics&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;OpenGL 3.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;OpenGL 3.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Storage Free&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;350 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.5 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;Development is done using &lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt; to compile the project. Most popular IDEs are supported through their respective CMake integration. &lt;a href=&#34;https://scons.org/&#34;&gt;SCons&lt;/a&gt; was the primary build tool up until 0.9.16, and some files and information continue to be available for it.&lt;/p&gt; &#xA;&lt;p&gt;For full installation instructions, consult the &lt;a href=&#34;https://raw.githubusercontent.com/endless-sky/endless-sky/master/docs/readme-cmake.md&#34;&gt;Build Instructions&lt;/a&gt; readme.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;As a free and open source game, Endless Sky is the product of many people&#39;s work. Contributions of artwork, storylines, and other writing are most in-demand, though there is a loosely defined &lt;a href=&#34;https://github.com/endless-sky/endless-sky/wiki/DevelopmentRoadmap&#34;&gt;roadmap&lt;/a&gt;. Those who wish to &lt;a href=&#34;https://raw.githubusercontent.com/endless-sky/endless-sky/master/docs/CONTRIBUTING.md&#34;&gt;contribute&lt;/a&gt; are encouraged to review the &lt;a href=&#34;https://github.com/endless-sky/endless-sky/wiki&#34;&gt;wiki&lt;/a&gt;, and to post in the &lt;a href=&#34;https://discord.gg/ZeuASSx&#34;&gt;community-run Discord&lt;/a&gt; beforehand. Those who prefer to use Steam can use its &lt;a href=&#34;https://steamcommunity.com/app/404410/discussions/&#34;&gt;discussion rooms&lt;/a&gt; as well, or GitHub&#39;s &lt;a href=&#34;https://github.com/endless-sky/endless-sky/discussions&#34;&gt;discussion zone&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Endless Sky&#39;s main discussion and development area was once &lt;a href=&#34;https://groups.google.com/g/endless-sky&#34;&gt;Google Groups&lt;/a&gt;, but due to factors outside our control, it is now inaccessible to new users, and should not be used anymore.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Endless Sky is a free, open source game. The &lt;a href=&#34;https://github.com/endless-sky/endless-sky/&#34;&gt;source code&lt;/a&gt; is available under the GPL v3 license, and all the artwork is either public domain or released under a variety of Creative Commons (and similarly permissive) licenses. (To determine the copyright status of any of the artwork, consult the &lt;a href=&#34;https://github.com/endless-sky/endless-sky/raw/master/copyright&#34;&gt;copyright file&lt;/a&gt;.)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openxla/xla</title>
    <updated>2025-02-02T01:40:12Z</updated>
    <id>tag:github.com,2025-02-02:/openxla/xla</id>
    <link href="https://github.com/openxla/xla" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A machine learning compiler for GPUs, CPUs, and ML accelerators&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XLA&lt;/h1&gt; &#xA;&lt;p&gt;XLA (Accelerated Linear Algebra) is an open-source machine learning (ML) compiler for GPUs, CPUs, and ML accelerators.&lt;/p&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;docs/images/openxla_dark.svg&#34;&gt; &#xA; &lt;img alt=&#34;OpenXLA Ecosystem&#34; src=&#34;https://raw.githubusercontent.com/openxla/xla/main/docs/images/openxla.svg?sanitize=true&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;The XLA compiler takes models from popular ML frameworks such as PyTorch, TensorFlow, and JAX, and optimizes them for high-performance execution across different hardware platforms including GPUs, CPUs, and ML accelerators.&lt;/p&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use XLA to compile your ML project, refer to the corresponding documentation for your ML framework:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pytorch.org/xla&#34;&gt;PyTorch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tensorflow.org/xla&#34;&gt;TensorFlow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jax.readthedocs.io/en/latest/notebooks/quickstart.html&#34;&gt;JAX&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re not contributing code to the XLA compiler, you don&#39;t need to clone and build this repo. Everything here is intended for XLA contributors who want to develop the compiler and XLA integrators who want to debug or add support for ML frontends and hardware backends.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to XLA, review &lt;a href=&#34;https://raw.githubusercontent.com/openxla/xla/main/docs/contributing.md&#34;&gt;How to Contribute&lt;/a&gt; and then see the &lt;a href=&#34;https://raw.githubusercontent.com/openxla/xla/main/docs/developer_guide.md&#34;&gt;developer guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contacts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For questions, contact the maintainers - maintainers at openxla.org&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openxla/community&#34;&gt;Community Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;While under TensorFlow governance, all community spaces for SIG OpenXLA are subject to the &lt;a href=&#34;https://github.com/tensorflow/tensorflow/raw/master/CODE_OF_CONDUCT.md&#34;&gt;TensorFlow Code of Conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>simdjson/simdjson</title>
    <updated>2025-02-02T01:40:12Z</updated>
    <id>tag:github.com,2025-02-02:/simdjson/simdjson</id>
    <link href="https://github.com/simdjson/simdjson" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parsing gigabytes of JSON per second : used by Facebook/Meta Velox, the Node.js runtime, ClickHouse, WatermelonDB, Apache Doris, Milvus, StarRocks&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://simdjson.org/plots.html&#34;&gt;&lt;img src=&#34;https://github.com/simdjson/simdjson/workflows/Ubuntu%2020.04%20CI%20(GCC%209)/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu 20.04 CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:simdjson&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/simdjson.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/LICENSE-MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://simdjson.github.io/simdjson/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-doxygen-green.svg?sanitize=true&#34; alt=&#34;Doxygen Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;simdjson : Parsing gigabytes of JSON per second&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/images/logo.png&#34; width=&#34;10%&#34; style=&#34;float: right&#34;&gt; JSON is everywhere on the Internet. Servers spend a *lot* of time parsing it. We need a fresh approach. The simdjson library uses commonly available SIMD instructions and microparallel algorithms to parse JSON 4x faster than RapidJSON and 25x faster than JSON for Modern C++. &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast:&lt;/strong&gt; Over 4x faster than commonly used production-grade JSON parsers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Record Breaking Features:&lt;/strong&gt; Minify JSON at 6 GB/s, validate UTF-8 at 13 GB/s, NDJSON at 3.5 GB/s.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy:&lt;/strong&gt; First-class, easy to use and carefully documented APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strict:&lt;/strong&gt; Full JSON and UTF-8 validation, lossless parsing. Performance with no compromises.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatic:&lt;/strong&gt; Selects a CPU-tailored parser at runtime. No configuration needed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reliable:&lt;/strong&gt; From memory allocation to error handling, simdjson&#39;s design avoids surprises.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Peer Reviewed:&lt;/strong&gt; Our research appears in venues like VLDB Journal, Software: Practice and Experience.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This library is part of the &lt;a href=&#34;https://awesomecpp.com&#34;&gt;Awesome Modern C++&lt;/a&gt; list.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#real-world-usage&#34;&gt;Real-world usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#godbolt&#34;&gt;Godbolt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#performance-results&#34;&gt;Performance results&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#packages&#34;&gt;Packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#bindings-and-ports-of-simdjson&#34;&gt;Bindings and Ports of simdjson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#about-simdjson&#34;&gt;About simdjson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#funding&#34;&gt;Funding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#contributing-to-simdjson&#34;&gt;Contributing to simdjson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Real-world usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ClickHouse/ClickHouse&#34;&gt;ClickHouse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://velox-lib.io&#34;&gt;Meta Velox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/paxml&#34;&gt;Google Pax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/milvus-io/milvus&#34;&gt;milvus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://questdb.io/blog/questdb-release-8-0-3/&#34;&gt;QuestDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aras-p/ClangBuildAnalyzer&#34;&gt;Clang Build Analyzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shopify/heap-profiler&#34;&gt;Shopify HeapProfiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/StarRocks/starrocks&#34;&gt;StarRocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/FishStore&#34;&gt;Microsoft FishStore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intel/pcm&#34;&gt;Intel PCM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Nozbe/WatermelonDB&#34;&gt;WatermelonDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/doris&#34;&gt;Apache Doris&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34;&gt;Dgraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unum-cloud/ujrpc&#34;&gt;UJRPC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spnda/fastgltf&#34;&gt;fastgltf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tenzir/vast&#34;&gt;vast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ada-url/ada&#34;&gt;ada-url&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adamritter/fastgron&#34;&gt;fastgron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wasmedge.org&#34;&gt;WasmEdge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/logicalclocks/rondb&#34;&gt;RonDB&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are planning to use simdjson in a product, please work from one of our releases.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The simdjson library is easily consumable with a single .h and .cpp file.&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Prerequisites: &lt;code&gt;g++&lt;/code&gt; (version 7 or better) or &lt;code&gt;clang++&lt;/code&gt; (version 6 or better), and a 64-bit system with a command-line shell (e.g., Linux, macOS, freeBSD). We also support programming environments like Visual Studio and Xcode, but different steps are needed. Users of clang++ may need to specify the C++ version (e.g., &lt;code&gt;c++ -std=c++17&lt;/code&gt;) since clang++ tends to default on C++98.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.h&#34;&gt;simdjson.h&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.cpp&#34;&gt;simdjson.cpp&lt;/a&gt; into a directory, along with the sample file &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/jsonexamples/twitter.json&#34;&gt;twitter.json&lt;/a&gt;. You can download them with the &lt;code&gt;wget&lt;/code&gt; utility:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.h https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.cpp https://raw.githubusercontent.com/simdjson/simdjson/master/jsonexamples/twitter.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create &lt;code&gt;quickstart.cpp&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;&#xA;#include &#34;simdjson.h&#34;&#xA;using namespace simdjson;&#xA;int main(void) {&#xA;    ondemand::parser parser;&#xA;    padded_string json = padded_string::load(&#34;twitter.json&#34;);&#xA;    ondemand::document tweets = parser.iterate(json);&#xA;    std::cout &amp;lt;&amp;lt; uint64_t(tweets[&#34;search_metadata&#34;][&#34;count&#34;]) &amp;lt;&amp;lt; &#34; results.&#34; &amp;lt;&amp;lt; std::endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;c++ -o quickstart quickstart.cpp simdjson.cpp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./quickstart&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt; 100 results.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Usage documentation is available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/basics.md&#34;&gt;Basics&lt;/a&gt; is an overview of how to use simdjson and its APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/performance.md&#34;&gt;Performance&lt;/a&gt; shows some more advanced scenarios and how to tune for them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/implementation-selection.md&#34;&gt;Implementation Selection&lt;/a&gt; describes runtime CPU detection and how you can work with it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://simdjson.github.io/simdjson/&#34;&gt;API&lt;/a&gt; contains the automatically generated API documentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Godbolt&lt;/h2&gt; &#xA;&lt;p&gt;Some users may want to browse code along with the compiled assembly. You want to check out the following lists of examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://godbolt.org/z/7G5qE4sr9&#34;&gt;simdjson examples with errors handled through exceptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://godbolt.org/z/e9dWb9E4v&#34;&gt;simdjson examples with errors without exceptions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance results&lt;/h2&gt; &#xA;&lt;p&gt;The simdjson library uses three-quarters less instructions than state-of-the-art parser &lt;a href=&#34;https://rapidjson.org&#34;&gt;RapidJSON&lt;/a&gt;. To our knowledge, simdjson is the first fully-validating JSON parser to run at &lt;a href=&#34;https://en.wikipedia.org/wiki/Gigabyte&#34;&gt;gigabytes per second&lt;/a&gt; (GB/s) on commodity processors. It can parse millions of JSON documents per second on a single core.&lt;/p&gt; &#xA;&lt;p&gt;The following figure represents parsing speed in GB/s for parsing various files on an Intel Skylake processor (3.4 GHz) using the GNU GCC 10 compiler (with the -O3 flag). We compare against the best and fastest C++ libraries on benchmarks that load and process the data. The simdjson library offers full unicode (&lt;a href=&#34;https://en.wikipedia.org/wiki/UTF-8&#34;&gt;UTF-8&lt;/a&gt;) validation and exact number parsing.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/rome.png&#34; width=&#34;60%&#34;&gt; &#xA;&lt;p&gt;The simdjson library offers high speed whether it processes tiny files (e.g., 300 bytes) or larger files (e.g., 3MB). The following plot presents parsing speed for &lt;a href=&#34;https://github.com/simdjson/simdjson_experiments_vldb2019/raw/master/experiments/growing/gen.py&#34;&gt;synthetic files over various sizes generated with a script&lt;/a&gt; on a 3.4 GHz Skylake processor (GNU GCC 9, -O3).&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/growing.png&#34; width=&#34;60%&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simdjson/simdjson_experiments_vldb2019&#34;&gt;All our experiments are reproducible&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For NDJSON files, we can exceed 3 GB/s with &lt;a href=&#34;https://github.com/simdjson/simdjson/raw/master/doc/parse_many.md&#34;&gt;our multithreaded parsing functions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/simdjson/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/simdjson.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bindings and Ports of simdjson&lt;/h2&gt; &#xA;&lt;p&gt;We distinguish between &#34;bindings&#34; (which just wrap the C++ code) and a port to another programming language (which reimplements everything).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/michaeleisel/zippyjson&#34;&gt;ZippyJSON&lt;/a&gt;: Swift bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gerrymanoim/libpy_simdjson/&#34;&gt;libpy_simdjson&lt;/a&gt;: high-speed Python bindings for simdjson using &lt;a href=&#34;https://github.com/quantopian/libpy&#34;&gt;libpy&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TkTech/pysimdjson&#34;&gt;pysimdjson&lt;/a&gt;: Python bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TeskaLabs/cysimdjson&#34;&gt;cysimdjson&lt;/a&gt;: high-speed Python bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simd-lite&#34;&gt;simdjson-rs&lt;/a&gt;: Rust port.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SunDoge/simdjson-rust&#34;&gt;simdjson-rust&lt;/a&gt;: Rust wrapper (bindings).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EgorBo/SimdJsonSharp&#34;&gt;SimdJsonSharp&lt;/a&gt;: C# version for .NET Core (bindings and full port).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/luizperes/simdjson_nodejs&#34;&gt;simdjson_nodejs&lt;/a&gt;: Node.js bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crazyxman/simdjson_php&#34;&gt;simdjson_php&lt;/a&gt;: PHP bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/saka1/simdjson_ruby&#34;&gt;simdjson_ruby&lt;/a&gt;: Ruby bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anilmaurya/fast_jsonparser&#34;&gt;fast_jsonparser&lt;/a&gt;: Ruby bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/minio/simdjson-go&#34;&gt;simdjson-go&lt;/a&gt;: Go port using Golang assembly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eddelbuettel/rcppsimdjson&#34;&gt;rcppsimdjson&lt;/a&gt;: R bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ChomperT/simdjson_erlang&#34;&gt;simdjson_erlang&lt;/a&gt;: erlang bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/saleyn/simdjsone&#34;&gt;simdjsone&lt;/a&gt;: erlang bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FourierTransformer/lua-simdjson&#34;&gt;lua-simdjson&lt;/a&gt;: lua bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/hermes-json&#34;&gt;hermes-json&lt;/a&gt;: haskell bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/travisstaloch/simdjzon&#34;&gt;simdjzon&lt;/a&gt;: zig port.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rawleyfowler/JSON-simd&#34;&gt;JSON-Simd&lt;/a&gt;: Raku bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::SIMD&#34;&gt;JSON::SIMD&lt;/a&gt;: Perl bindings; fully-featured JSON module that uses simdjson for decoding.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sainttttt/gemmaJSON&#34;&gt;gemmaJSON&lt;/a&gt;: Nim JSON parser based on simdjson bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simdjson/simdjson-java&#34;&gt;simdjson-java&lt;/a&gt;: Java port.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About simdjson&lt;/h2&gt; &#xA;&lt;p&gt;The simdjson library takes advantage of modern microarchitectures, parallelizing with SIMD vector instructions, reducing branch misprediction, and reducing data dependency to take advantage of each CPU&#39;s multiple execution cores.&lt;/p&gt; &#xA;&lt;p&gt;Our default front-end is called On-Demand, and we wrote a paper about it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;John Keiser, Daniel Lemire, &lt;a href=&#34;http://arxiv.org/abs/2312.17149&#34;&gt;On-Demand JSON: A Better Way to Parse Documents?&lt;/a&gt;, Software: Practice and Experience 54 (6), 2024.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some people &lt;a href=&#34;https://arxiv.org/abs/1902.08318&#34;&gt;enjoy reading the first (2019) simdjson paper&lt;/a&gt;: A description of the design and implementation of simdjson is in our research article:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Geoff Langdale, Daniel Lemire, &lt;a href=&#34;https://arxiv.org/abs/1902.08318&#34;&gt;Parsing Gigabytes of JSON per Second&lt;/a&gt;, VLDB Journal 28 (6), 2019.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have an in-depth paper focused on the UTF-8 validation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;John Keiser, Daniel Lemire, &lt;a href=&#34;https://arxiv.org/abs/2010.03090&#34;&gt;Validating UTF-8 In Less Than One Instruction Per Byte&lt;/a&gt;, Software: Practice &amp;amp; Experience 51 (5), 2021.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also have an informal &lt;a href=&#34;https://branchfree.org/2019/02/25/paper-parsing-gigabytes-of-json-per-second/&#34;&gt;blog post providing some background and context&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the video inclined, &lt;br&gt; &lt;a href=&#34;http://www.youtube.com/watch?v=wlvKAT7SZIQ&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/wlvKAT7SZIQ/0.jpg&#34; alt=&#34;simdjson at QCon San Francisco 2019&#34;&gt;&lt;/a&gt;&lt;br&gt; (It was the best voted talk, we&#39;re kinda proud of it.)&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;The work is supported by the Natural Sciences and Engineering Research Council of Canada under grants RGPIN-2017-03910 and RGPIN-2024-03787.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to simdjson&lt;/h2&gt; &#xA;&lt;p&gt;Head over to &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for information on contributing to simdjson, and &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/HACKING.md&#34;&gt;HACKING.md&lt;/a&gt; for information on source, building, and architecture/design.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is made available under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;Apache License 2.0&lt;/a&gt; as well as under the MIT License. As a user, you can pick the license you prefer.&lt;/p&gt; &#xA;&lt;p&gt;Under Windows, we build some tools using the windows/dirent_portable.h file (which is outside our library code): it is under the liberal (business-friendly) MIT license.&lt;/p&gt; &#xA;&lt;p&gt;For compilers that do not support &lt;a href=&#34;https://en.wikipedia.org/wiki/C%2B%2B17&#34;&gt;C++17&lt;/a&gt;, we bundle the string-view library which is published under the &lt;a href=&#34;http://www.boost.org/LICENSE_1_0.txt&#34;&gt;Boost license&lt;/a&gt;. Like the Apache license, the Boost license is a permissive license allowing commercial redistribution.&lt;/p&gt; &#xA;&lt;p&gt;For efficient number serialization, we bundle Florian Loitsch&#39;s implementation of the Grisu2 algorithm for binary to decimal floating-point numbers. The implementation was slightly modified by JSON for Modern C++ library. Both Florian Loitsch&#39;s implementation and JSON for Modern C++ are provided under the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;For runtime dispatching, we use some code from the PyTorch project licensed under 3-clause BSD.&lt;/p&gt;</summary>
  </entry>
</feed>