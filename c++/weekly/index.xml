<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-31T02:02:13Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>carbon-language/carbon-lang</title>
    <updated>2022-07-31T02:02:13Z</updated>
    <id>tag:github.com,2022-07-31:/carbon-language/carbon-lang</id>
    <link href="https://github.com/carbon-language/carbon-lang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Carbon Language&#39;s main repository: documents, design, implementation, and related tools. (NOTE: Carbon Language is experimental; see README)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Carbon Language: &lt;br&gt; An experimental successor to C++&lt;/h1&gt; &#xA;&lt;!--&#xA;Part of the Carbon Language project, under the Apache License v2.0 with LLVM&#xA;Exceptions. See /LICENSE for license information.&#xA;SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception&#xA;--&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/#why-build-carbon&#34;&gt;Why?&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/#language-goals&#34;&gt;Goals&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/#project-status&#34;&gt;Status&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/#getting-started&#34;&gt;Getting started&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/#join-us&#34;&gt;Join us&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;See our &lt;a href=&#34;https://youtu.be/omrY53kbVoA&#34;&gt;announcement video&lt;/a&gt; from &lt;a href=&#34;https://cppnorth.ca/&#34;&gt;CppNorth&lt;/a&gt;.&lt;/strong&gt; Note that Carbon is &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/#project-status&#34;&gt;not ready for use&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/images/snippets.md#quicksort&#34;&gt; &#xA; &lt;!--&#xA;Edit snippet in docs/images/snippets.md and:&#xA;https://drive.google.com/drive/folders/1-rsUjiya7dSZ87L8kpZmu3MZghRVxzLA&#xA;--&gt; &lt;img src=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/images/quicksort_snippet.svg?sanitize=true&#34; align=&#34;right&#34; width=&#34;575&#34; alt=&#34;Quicksort code in Carbon. Follow the link to read more.&#34;&gt; &lt;/a&gt; &#xA;&lt;!--&#xA;Don&#39;t let the text wrap too narrowly to the left of the above image.&#xA;The `div` reduces the vertical height.&#xA;GitHub will autolink `img`, but won&#39;t produce a link when `href=&#34;#&#34;`.&#xA;--&gt; &#xA;&lt;div&gt;&#xA; &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/#&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/images/bumper.png&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fast and works with C++&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Performance matching C++ using LLVM, with low-level access to bits and addresses&lt;/li&gt; &#xA; &lt;li&gt;Interoperate with your existing C++ code, from inheritance to templates&lt;/li&gt; &#xA; &lt;li&gt;Fast and scalable builds that work with your existing C++ build systems&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Modern and evolving&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Solid language foundations that are easy to learn, especially if you have used C++&lt;/li&gt; &#xA; &lt;li&gt;Easy, tool-based upgrades between Carbon versions&lt;/li&gt; &#xA; &lt;li&gt;Safer fundamentals, and an incremental path towards a memory-safe subset&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Welcoming open-source community&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clear goals and priorities with robust governance&lt;/li&gt; &#xA; &lt;li&gt;Community that works to be welcoming, inclusive, and friendly&lt;/li&gt; &#xA; &lt;li&gt;Batteries-included approach: compiler, libraries, docs, tools, package manager, and more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why build Carbon?&lt;/h2&gt; &#xA;&lt;p&gt;C++ remains the dominant programming language for performance-critical software, with massive and growing codebases and investments. However, it is struggling to improve and meet developers&#39; needs, as outlined above, in no small part due to accumulating decades of technical debt. Incrementally improving C++ is &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/project/difficulties_improving_cpp.md&#34;&gt;extremely difficult&lt;/a&gt;, both due to the technical debt itself and challenges with its evolution process. The best way to address these problems is to avoid inheriting the legacy of C or C++ directly, and instead start with solid language foundations like &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/#generics&#34;&gt;modern generics system&lt;/a&gt;, modular code organization, and consistent, simple syntax.&lt;/p&gt; &#xA;&lt;p&gt;Existing modern languages already provide an excellent developer experience: Go, Swift, Kotlin, Rust, and many more. &lt;strong&gt;Developers that &lt;em&gt;can&lt;/em&gt; use one of these existing languages &lt;em&gt;should&lt;/em&gt;.&lt;/strong&gt; Unfortunately, the designs of these languages present significant barriers to adoption and migration from C++. These barriers range from changes in the idiomatic design of software to performance overhead.&lt;/p&gt; &#xA;&lt;p&gt;Carbon is fundamentally &lt;strong&gt;a successor language approach&lt;/strong&gt;, rather than an attempt to incrementally evolve C++. It is designed around interoperability with C++ as well as large-scale adoption and migration for existing C++ codebases and developers. A successor language for C++ requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance matching C++&lt;/strong&gt;, an essential property for our developers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Seamless, bidirectional interoperability with C++&lt;/strong&gt;, such that a library anywhere in an existing C++ stack can adopt Carbon without porting the rest.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A gentle learning curve&lt;/strong&gt; with reasonable familiarity for C++ developers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Comparable expressivity&lt;/strong&gt; and support for existing software&#39;s design and architecture.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scalable migration&lt;/strong&gt;, with some level of source-to-source translation for idiomatic C++ code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With this approach, we can build on top of C++&#39;s existing ecosystem, and bring along existing investments, codebases, and developer populations. There are a few languages that have followed this model for other ecosystems, and Carbon aims to fill an analogous role for C++:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JavaScript → TypeScript&lt;/li&gt; &#xA; &lt;li&gt;Java → Kotlin&lt;/li&gt; &#xA; &lt;li&gt;C++ → &lt;strong&gt;&lt;em&gt;Carbon&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Language Goals&lt;/h2&gt; &#xA;&lt;p&gt;We are designing Carbon to support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Performance-critical software&lt;/li&gt; &#xA; &lt;li&gt;Software and language evolution&lt;/li&gt; &#xA; &lt;li&gt;Code that is easy to read, understand, and write&lt;/li&gt; &#xA; &lt;li&gt;Practical safety and testing mechanisms&lt;/li&gt; &#xA; &lt;li&gt;Fast and scalable development&lt;/li&gt; &#xA; &lt;li&gt;Modern OS platforms, hardware architectures, and environments&lt;/li&gt; &#xA; &lt;li&gt;Interoperability with and migration from existing C++ code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While many languages share subsets of these goals, what distinguishes Carbon is their combination.&lt;/p&gt; &#xA;&lt;p&gt;We also have explicit &lt;em&gt;non-goals&lt;/em&gt; for Carbon, notably including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A stable &lt;a href=&#34;https://en.wikipedia.org/wiki/Application_binary_interface&#34;&gt;application binary interface&lt;/a&gt; (ABI) for the entire language and library&lt;/li&gt; &#xA; &lt;li&gt;Perfect backwards or forwards compatibility&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Our detailed &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/project/goals.md&#34;&gt;goals&lt;/a&gt; document fleshes out these ideas and provides a deeper view into our goals for the Carbon project and language.&lt;/p&gt; &#xA;&lt;h2&gt;Project status&lt;/h2&gt; &#xA;&lt;p&gt;Carbon Language is currently an experimental project. There is no working compiler or toolchain. You can see the demo interpreter for Carbon on &lt;a href=&#34;http://carbon.compiler-explorer.com/&#34;&gt;compiler-explorer.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We want to better understand whether we can build a language that meets our successor language criteria, and whether the resulting language can gather a critical mass of interest within the larger C++ industry and community.&lt;/p&gt; &#xA;&lt;p&gt;Currently, we have fleshed out several core aspects of both Carbon the project and the language:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The strategy of the Carbon Language and project.&lt;/li&gt; &#xA; &lt;li&gt;An open-source project structure, governance model, and evolution process.&lt;/li&gt; &#xA; &lt;li&gt;Critical and foundational aspects of the language design informed by our experience with C++ and the most difficult challenges we anticipate. This includes designs for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Generics&lt;/li&gt; &#xA;   &lt;li&gt;Class types&lt;/li&gt; &#xA;   &lt;li&gt;Inheritance&lt;/li&gt; &#xA;   &lt;li&gt;Operator overloading&lt;/li&gt; &#xA;   &lt;li&gt;Lexical and syntactic structure&lt;/li&gt; &#xA;   &lt;li&gt;Code organization and modular structure&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A prototype interpreter demo that can both run isolated examples and gives a detailed analysis of the specific semantic model and abstract machine of Carbon. We call this the &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/explorer/&#34;&gt;Carbon Explorer&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re interested in contributing, we would love help &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/project/roadmap.md#completing-the-language-design&#34;&gt;completing the 0.1 language designs&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/project/roadmap.md#demo-implementation-of-core-features-with-working-examples&#34;&gt;completing the Carbon Explorer implementation of this design&lt;/a&gt;. We are also currently working to get more broad feedback and participation from the C++ community. Beyond that, we plan to prioritize C++ interoperability and a realistic toolchain that implements the 0.1 language and can be used to evaluate Carbon in more detail.&lt;/p&gt; &#xA;&lt;p&gt;You can see our &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/project/roadmap.md&#34;&gt;full roadmap&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Carbon and C++&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re already a C++ developer, Carbon should have a gentle learning curve. It is built out of a consistent set of language constructs that should feel familiar and be easy to read and understand.&lt;/p&gt; &#xA;&lt;p&gt;C++ code like this:&lt;/p&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/images/snippets.md#c&#34;&gt; &#xA; &lt;!--&#xA;Edit snippet in docs/images/snippets.md and:&#xA;https://drive.google.com/drive/folders/1-rsUjiya7dSZ87L8kpZmu3MZghRVxzLA&#xA;--&gt; &lt;img src=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/images/cpp_snippet.svg?sanitize=true&#34; width=&#34;600&#34; alt=&#34;A snippet of C++ code. Follow the link to read it.&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;corresponds to this Carbon code:&lt;/p&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/images/snippets.md#carbon&#34;&gt; &#xA; &lt;!--&#xA;Edit snippet in docs/images/snippets.md and:&#xA;https://drive.google.com/drive/folders/1-rsUjiya7dSZ87L8kpZmu3MZghRVxzLA&#xA;--&gt; &lt;img src=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/images/carbon_snippet.svg?sanitize=true&#34; width=&#34;600&#34; alt=&#34;A snippet of converted Carbon code. Follow the link to read it.&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;You can call Carbon from C++ without overhead and the other way around. This means you migrate a single C++ library to Carbon within an application, or write new Carbon on top of your existing C++ investment. For example:&lt;/p&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/images/snippets.md#mixed&#34;&gt; &#xA; &lt;!--&#xA;Edit snippet in docs/images/snippets.md and:&#xA;https://drive.google.com/drive/folders/1-rsUjiya7dSZ87L8kpZmu3MZghRVxzLA&#xA;--&gt; &lt;img src=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/images/mixed_snippet.svg?sanitize=true&#34; width=&#34;600&#34; alt=&#34;A snippet of mixed Carbon and C++ code. Follow the link to read it.&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/design/interoperability/philosophy_and_goals.md&#34;&gt;C++ interop in Carbon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Beyond interoperability between Carbon and C++, we&#39;re also planning to support migration tools that will mechanically translate idiomatic C++ code into Carbon code to help you switch an existing C++ codebase to Carbon.&lt;/p&gt; &#xA;&lt;h2&gt;Generics&lt;/h2&gt; &#xA;&lt;p&gt;Carbon provides a &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/design/generics/overview.md#what-are-generics&#34;&gt;modern generics system&lt;/a&gt;&lt;/strong&gt; with checked definitions, while still &lt;strong&gt;supporting opt-in &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/design/templates.md&#34;&gt;templates&lt;/a&gt; for seamless C++ interop&lt;/strong&gt;. Checked generics provide several advantages compared to C++ templates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generic definitions are fully type-checked&lt;/strong&gt;, removing the need to instantiate to check for errors and giving greater confidence in code. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Avoids the compile-time cost of re-checking the definition for every instantiation.&lt;/li&gt; &#xA;   &lt;li&gt;When using a definition-checked generic, usage error messages are clearer, directly showing which requirements are not met.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enables automatic, opt-in type erasure and dynamic dispatch&lt;/strong&gt; without a separate implementation. This can reduce the binary size and enables constructs like heterogeneous containers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strong, checked interfaces&lt;/strong&gt; mean fewer accidental dependencies on implementation details and a clearer contract for consumers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Without sacrificing these advantages, &lt;strong&gt;Carbon generics support specialization&lt;/strong&gt;, ensuring it can fully address performance-critical use cases of C++ templates. For more details about Carbon&#39;s generics, see their &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/design/generics&#34;&gt;design&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In addition to easy and powerful interop with C++, Carbon templates can be constrained and incrementally migrated to checked generics at a fine granularity and with a smooth evolutionary path.&lt;/p&gt; &#xA;&lt;h2&gt;Memory safety&lt;/h2&gt; &#xA;&lt;p&gt;Safety, and especially &lt;a href=&#34;https://en.wikipedia.org/wiki/Memory_safety&#34;&gt;memory safety&lt;/a&gt;, remains a key challenge for C++ and something a successor language needs to address. Our initial priority and focus is on immediately addressing important, low-hanging fruit in the safety space:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tracking uninitialized states better, increased enforcement of initialization, and systematically providing hardening against initialization bugs when desired.&lt;/li&gt; &#xA; &lt;li&gt;Designing fundamental APIs and idioms to support dynamic bounds checks in debug and hardened builds.&lt;/li&gt; &#xA; &lt;li&gt;Having a default debug build mode that is both cheaper and more comprehensive than existing C++ build modes even when combined with &lt;a href=&#34;https://github.com/google/sanitizers/wiki/AddressSanitizer&#34;&gt;Address Sanitizer&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once we can migrate code into Carbon, we will have a simplified language with room in the design space to add any necessary annotations or features, and infrastructure like &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/#generics&#34;&gt;generics&lt;/a&gt; to support safer design patterns. Longer term, we will build on this to introduce &lt;strong&gt;a safe Carbon subset&lt;/strong&gt;. This will be a large and complex undertaking, and won&#39;t be in the 0.1 design. Meanwhile, we are closely watching and learning from efforts to add memory safe semantics onto C++ such as Rust-inspired &lt;a href=&#34;https://discourse.llvm.org/t/rfc-lifetime-annotations-for-c/61377&#34;&gt;lifetime annotations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;You can get started playing with Carbon by checking out the codebase and using the Carbon explorer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Install bazelisk using Homebrew.&#xA;$ brew install bazelisk&#xA;&#xA;# Install Clang/LLVM using Homebrew.&#xA;# Many Clang/LLVM releases aren&#39;t built with options we rely on.&#xA;$ brew install llvm&#xA;$ export PATH=&#34;$(brew --prefix llvm)/bin:${PATH}&#34;&#xA;&#xA;# Download Carbon&#39;s code.&#xA;$ git clone https://github.com/carbon-language/carbon-lang&#xA;$ cd carbon-lang&#xA;&#xA;# Build and run the explorer.&#xA;$ bazel run //explorer -- ./explorer/testdata/print/format_only.carbon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These instructions assume &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; is installed; see our &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/project/contribution_tools.md&#34;&gt;contribution tools documentation&lt;/a&gt; for more extensive tooling instructions.&lt;/p&gt; &#xA;&lt;p&gt;Learn more about the Carbon project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/project/goals.md&#34;&gt;Project goals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/design&#34;&gt;Language design overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/explorer&#34;&gt;Carbon Explorer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/docs/project/faq.md&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Join us&lt;/h2&gt; &#xA;&lt;p&gt;Carbon is committed to a welcoming and inclusive environment where everyone can contribute.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To watch for major release announcements, subscribe to our &lt;a href=&#34;https://github.com/carbon-language/carbon-lang/discussions/1020&#34;&gt;Carbon release post on GitHub&lt;/a&gt; and &lt;a href=&#34;https://github.com/carbon-language/carbon-lang&#34;&gt;star carbon-lang&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To join the design discussion, join our &lt;a href=&#34;https://github.com/carbon-language/carbon-lang/discussions&#34;&gt;GitHub forum&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;See our &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/carbon-language/carbon-lang/trunk/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; for information about the Carbon development community.&lt;/li&gt; &#xA; &lt;li&gt;We discuss Carbon on &lt;a href=&#34;https://discord.gg/ZjVdShJDAs&#34;&gt;Discord&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mitsuba-renderer/mitsuba3</title>
    <updated>2022-07-31T02:02:13Z</updated>
    <id>tag:github.com,2022-07-31:/mitsuba-renderer/mitsuba3</id>
    <link href="https://github.com/mitsuba-renderer/mitsuba3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mitsuba 3: A Retargetable Forward and Inverse Renderer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mitsuba-renderer/mitsuba-data/master/docs/images/banners/banner_01.jpg&#34; alt=&#34;Mitsuba banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Mitsuba Renderer 3&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Documentation&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Tutorial videos&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://mitsuba.readthedocs.io/en/latest/&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/mitsuba/badge/?version=latest&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=9Ja9buZx0Cs&amp;amp;list=PLI9y-85z_Po6da-pyTNGTns2n4fhpbLe5&amp;amp;index=1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/YouTube-View-green?style=plastic&amp;amp;logo=youtube&#34; alt=&#34;vids&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://rgl-ci.epfl.ch/viewType.html?buildTypeId=Mitsuba3_LinuxAmd64Clang10&amp;amp;guest=1&#34;&gt;&lt;img src=&#34;https://rgl-ci.epfl.ch/app/rest/builds/buildType(id:Mitsuba3_LinuxAmd64Clang10)/statusIcon.svg?sanitize=true&#34; alt=&#34;rgl-ci&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://rgl-ci.epfl.ch/viewType.html?buildTypeId=Mitsuba3_LinuxAmd64gcc9&amp;amp;guest=1&#34;&gt;&lt;img src=&#34;https://rgl-ci.epfl.ch/app/rest/builds/buildType(id:Mitsuba3_LinuxAmd64gcc9)/statusIcon.svg?sanitize=true&#34; alt=&#34;rgl-ci&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://rgl-ci.epfl.ch/viewType.html?buildTypeId=Mitsuba3_WindowsAmd64msvc2020&amp;amp;guest=1&#34;&gt;&lt;img src=&#34;https://rgl-ci.epfl.ch/app/rest/builds/buildType(id:Mitsuba3_WindowsAmd64msvc2020)/statusIcon.svg?sanitize=true&#34; alt=&#34;rgl-ci&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Mitsuba 3 is a research-oriented rendering system for forward and inverse light transport simulation developed at &lt;a href=&#34;https://www.epfl.ch&#34;&gt;EPFL&lt;/a&gt; in Switzerland. It consists of a core library and a set of plugins that implement functionality ranging from materials and light sources to complete rendering algorithms.&lt;/p&gt; &#xA;&lt;p&gt;Mitsuba 3 is &lt;em&gt;retargetable&lt;/em&gt;: this means that the underlying implementations and data structures can transform to accomplish various different tasks. For example, the same code can simulate both scalar (classic one-ray-at-a-time) RGB transport or differential spectral transport on the GPU. This all builds on &lt;a href=&#34;https://github.com/mitsuba-renderer/drjit&#34;&gt;Dr.Jit&lt;/a&gt;, a specialized &lt;em&gt;just-in-time&lt;/em&gt; (JIT) compiler developed specifically for this project.&lt;/p&gt; &#xA;&lt;h2&gt;Main Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt;: Mitsuba 3 has been tested on Linux (&lt;code&gt;x86_64&lt;/code&gt;), macOS (&lt;code&gt;aarch64&lt;/code&gt;, &lt;code&gt;x86_64&lt;/code&gt;), and Windows (&lt;code&gt;x86_64&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;High performance&lt;/strong&gt;: The underlying Dr.Jit compiler fuses rendering code into kernels that achieve state-of-the-art performance using an LLVM backend targeting the CPU and a CUDA/OptiX backend targeting NVIDIA GPUs with ray tracing hardware acceleration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Python first&lt;/strong&gt;: Mitsuba 3 is deeply integrated with Python. Materials, textures, and even full rendering algorithms can be developed in Python, which the system JIT-compiles (and optionally differentiates) on the fly. This enables the experimentation needed for research in computer graphics and other disciplines.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Differentiation&lt;/strong&gt;: Mitsuba 3 is a differentiable renderer, meaning that it can compute derivatives of the entire simulation with respect to input parameters such as camera pose, geometry, BSDFs, textures, and volumes. It implements recent differentiable rendering algorithms developed at EPFL.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Spectral &amp;amp; Polarization&lt;/strong&gt;: Mitsuba 3 can be used as a monochromatic renderer, RGB-based renderer, or spectral renderer. Each variant can optionally account for the effects of polarization if desired.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tutorial videos, documentation&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve recorded several &lt;a href=&#34;https://www.youtube.com/watch?v=9Ja9buZx0Cs&amp;amp;list=PLI9y-85z_Po6da-pyTNGTns2n4fhpbLe5&amp;amp;index=1&#34;&gt;YouTube videos&lt;/a&gt; that provide a gentle introduction Mitsuba 3 and Dr.Jit. Beyond this you can find complete Juypter notebooks covering a variety of applications, how-to guides, and reference documentation on &lt;a href=&#34;https://mitsuba.readthedocs.io/en/latest/&#34;&gt;readthedocs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We provide pre-compiled binary wheels via PyPI. Installing Mitsuba this way is as simple as running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install mitsuba&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;on the command line. The Python package includes four variants by default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scalar_spectral&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scalar_rgb&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;llvm_ad_rgb&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cuda_ad_rgb&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The first two perform classic one-ray-at-a-time simulation using either a RGB or spectral color representation, while the latter two can be used for inverse rendering on the CPU or GPU. To access additional variants, you will need to compile a custom version of Dr.Jit using CMake. Please see the &lt;a href=&#34;https://mitsuba.readthedocs.io/en/latest/src/developer_guide/compiling.html&#34;&gt;documentation&lt;/a&gt; for details on this.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Python &amp;gt;= 3.8&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(optional) For computation on the GPU: &lt;code&gt;Nvidia driver &amp;gt;= 495.89&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(optional) For vectorized / parallel computation on the CPU: &lt;code&gt;LLVM &amp;gt;= 11.1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here is a simple &#34;Hello World&#34; example that shows how simple it is to render a scene using Mitsuba 3 from Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import the library using the alias &#34;mi&#34;&#xA;import mitsuba as mi&#xA;# Set the variant of the renderer&#xA;mi.set_variant(&#39;scalar_rgb&#39;)&#xA;# Load a scene&#xA;scene = mi.load_dict(mi.cornell_box())&#xA;# Render the scene&#xA;img = mi.render(scene)&#xA;# Write the rendered image to an EXR file&#xA;mi.Bitmap(img).write(&#39;cbox.exr&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tutorials and example notebooks covering a variety of applications can be found in the &lt;a href=&#34;https://mitsuba.readthedocs.io/en/latest/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This project was created by &lt;a href=&#34;https://rgl.epfl.ch/people/wjakob&#34;&gt;Wenzel Jakob&lt;/a&gt;. Significant features and/or improvements to the code were contributed by &lt;a href=&#34;https://speierers.github.io/&#34;&gt;Sébastien Speierer&lt;/a&gt;, &lt;a href=&#34;https://github.com/njroussel&#34;&gt;Nicolas Roussel&lt;/a&gt;, &lt;a href=&#34;https://merlin.nimierdavid.fr/&#34;&gt;Merlin Nimier-David&lt;/a&gt;, &lt;a href=&#34;https://dvicini.github.io/&#34;&gt;Delio Vicini&lt;/a&gt;, &lt;a href=&#34;https://tizianzeltner.com/&#34;&gt;Tizian Zeltner&lt;/a&gt;, &lt;a href=&#34;https://bnicolet.com/&#34;&gt;Baptiste Nicolet&lt;/a&gt;, &lt;a href=&#34;https://mcrespo.me/&#34;&gt;Miguel Crespo&lt;/a&gt;, &lt;a href=&#34;https://github.com/leroyvn&#34;&gt;Vincent Leroy&lt;/a&gt;, and &lt;a href=&#34;https://github.com/ziyi-zhang&#34;&gt;Ziyi Zhang&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>doitsujin/dxvk</title>
    <updated>2022-07-31T02:02:13Z</updated>
    <id>tag:github.com,2022-07-31:/doitsujin/dxvk</id>
    <link href="https://github.com/doitsujin/dxvk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vulkan-based implementation of D3D9, D3D10 and D3D11 for Linux / Wine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DXVK&lt;/h1&gt; &#xA;&lt;p&gt;A Vulkan-based translation layer for Direct3D 9/10/11 which allows running 3D applications on Linux using Wine.&lt;/p&gt; &#xA;&lt;p&gt;For the current status of the project, please refer to the &lt;a href=&#34;https://github.com/doitsujin/dxvk/wiki&#34;&gt;project wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The most recent development builds can be found &lt;a href=&#34;https://github.com/doitsujin/dxvk/actions/workflows/artifacts.yml?query=branch%3Amaster&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Release builds can be found &lt;a href=&#34;https://github.com/doitsujin/dxvk/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;In order to install a DXVK package obtained from the &lt;a href=&#34;https://github.com/doitsujin/dxvk/releases&#34;&gt;release&lt;/a&gt; page into a given wine prefix, run the following commands from within the DXVK directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export WINEPREFIX=/path/to/.wine-prefix&#xA;./setup_dxvk.sh install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will &lt;strong&gt;copy&lt;/strong&gt; the DLLs into the &lt;code&gt;system32&lt;/code&gt; and &lt;code&gt;syswow64&lt;/code&gt; directories of your wine prefix and set up the required DLL overrides. Pure 32-bit prefixes are also supported.&lt;/p&gt; &#xA;&lt;p&gt;The setup script optionally takes the following arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--symlink&lt;/code&gt;: Create symbolic links to the DLL files instead of copying them. This is especially useful for development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--with-d3d10&lt;/code&gt;: Install the &lt;code&gt;d3d10{_1}.dll&lt;/code&gt; helper libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--without-dxgi&lt;/code&gt;: Do not install DXVK&#39;s DXGI implementation and use the one provided by wine instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Verify that your application uses DXVK instead of wined3d by checking for the presence of the log file &lt;code&gt;d3d9.log&lt;/code&gt; or &lt;code&gt;d3d11.log&lt;/code&gt; in the application&#39;s directory, or by enabling the HUD (see notes below).&lt;/p&gt; &#xA;&lt;p&gt;In order to remove DXVK from a prefix, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export WINEPREFIX=/path/to/.wine-prefix&#xA;./setup_dxvk.sh uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.winehq.org/&#34;&gt;wine 3.10&lt;/a&gt; or newer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mesonbuild.com/&#34;&gt;Meson&lt;/a&gt; build system (at least version 0.49)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mingw-w64.org&#34;&gt;Mingw-w64&lt;/a&gt; compiler and headers (at least version 8.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glslang&#34;&gt;glslang&lt;/a&gt; compiler&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building DLLs&lt;/h3&gt; &#xA;&lt;h4&gt;The simple way&lt;/h4&gt; &#xA;&lt;p&gt;Inside the DXVK directory, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./package-release.sh master /your/target/directory --no-package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a folder &lt;code&gt;dxvk-master&lt;/code&gt; in &lt;code&gt;/your/target/directory&lt;/code&gt;, which contains both 32-bit and 64-bit versions of DXVK, which can be set up in the same way as the release versions as noted above.&lt;/p&gt; &#xA;&lt;p&gt;In order to preserve the build directories for development, pass &lt;code&gt;--dev-build&lt;/code&gt; to the script. This option implies &lt;code&gt;--no-package&lt;/code&gt;. After making changes to the source code, you can then do the following to rebuild DXVK:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# change to build.32 for 32-bit&#xA;cd /your/target/directory/build.64&#xA;ninja install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Compiling manually&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 64-bit build. For 32-bit builds, replace&#xA;# build-win64.txt with build-win32.txt&#xA;meson --cross-file build-win64.txt --buildtype release --prefix /your/dxvk/directory build.w64&#xA;cd build.w64&#xA;ninja install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The D3D9, D3D10, D3D11 and DXGI DLLs will be located in &lt;code&gt;/your/dxvk/directory/bin&lt;/code&gt;. Setup has to be done manually in this case.&lt;/p&gt; &#xA;&lt;h3&gt;Notes on Vulkan drivers&lt;/h3&gt; &#xA;&lt;p&gt;Before reporting an issue, please check the &lt;a href=&#34;https://github.com/doitsujin/dxvk/wiki/Driver-support&#34;&gt;Wiki&lt;/a&gt; page on the current driver status and make sure you run a recent enough driver version for your hardware.&lt;/p&gt; &#xA;&lt;h3&gt;Online multi-player games&lt;/h3&gt; &#xA;&lt;p&gt;Manipulation of Direct3D libraries in multi-player games may be considered cheating and can get your account &lt;strong&gt;banned&lt;/strong&gt;. This may also apply to single-player games with an embedded or dedicated multiplayer portion. &lt;strong&gt;Use at your own risk.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;HUD&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;DXVK_HUD&lt;/code&gt; environment variable controls a HUD which can display the framerate and some stat counters. It accepts a comma-separated list of the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;devinfo&lt;/code&gt;: Displays the name of the GPU and the driver version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fps&lt;/code&gt;: Shows the current frame rate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;frametimes&lt;/code&gt;: Shows a frame time graph.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;submissions&lt;/code&gt;: Shows the number of command buffers submitted per frame.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;drawcalls&lt;/code&gt;: Shows the number of draw calls and render passes per frame.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pipelines&lt;/code&gt;: Shows the total number of graphics and compute pipelines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;descriptors&lt;/code&gt;: Shows the number of descriptor pools and descriptor sets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;memory&lt;/code&gt;: Shows the amount of device memory allocated and used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gpuload&lt;/code&gt;: Shows estimated GPU load. May be inaccurate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;version&lt;/code&gt;: Shows DXVK version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;api&lt;/code&gt;: Shows the D3D feature level used by the application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cs&lt;/code&gt;: Shows worker thread statistics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compiler&lt;/code&gt;: Shows shader compiler activity&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;samplers&lt;/code&gt;: Shows the current number of sampler pairs used &lt;em&gt;[D3D9 Only]&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scale=x&lt;/code&gt;: Scales the HUD by a factor of &lt;code&gt;x&lt;/code&gt; (e.g. &lt;code&gt;1.5&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, &lt;code&gt;DXVK_HUD=1&lt;/code&gt; has the same effect as &lt;code&gt;DXVK_HUD=devinfo,fps&lt;/code&gt;, and &lt;code&gt;DXVK_HUD=full&lt;/code&gt; enables all available HUD elements.&lt;/p&gt; &#xA;&lt;h3&gt;Frame rate limit&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;DXVK_FRAME_RATE&lt;/code&gt; environment variable can be used to limit the frame rate. A value of &lt;code&gt;0&lt;/code&gt; uncaps the frame rate, while any positive value will limit rendering to the given number of frames per second. Alternatively, the configuration file can be used.&lt;/p&gt; &#xA;&lt;h3&gt;Device filter&lt;/h3&gt; &#xA;&lt;p&gt;Some applications do not provide a method to select a different GPU. In that case, DXVK can be forced to use a given device:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DXVK_FILTER_DEVICE_NAME=&#34;Device Name&#34;&lt;/code&gt; Selects devices with a matching Vulkan device name, which can be retrieved with tools such as &lt;code&gt;vulkaninfo&lt;/code&gt;. Matches on substrings, so &#34;VEGA&#34; or &#34;AMD RADV VEGA10&#34; is supported if the full device name is &#34;AMD RADV VEGA10 (LLVM 9.0.0)&#34;, for example. If the substring matches more than one device, the first device matched will be used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the device filter is configured incorrectly, it may filter out all devices and applications will be unable to create a D3D device.&lt;/p&gt; &#xA;&lt;h3&gt;State cache&lt;/h3&gt; &#xA;&lt;p&gt;DXVK caches pipeline state by default, so that shaders can be recompiled ahead of time on subsequent runs of an application, even if the driver&#39;s own shader cache got invalidated in the meantime. This cache is enabled by default, and generally reduces stuttering.&lt;/p&gt; &#xA;&lt;p&gt;The following environment variables can be used to control the cache:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DXVK_STATE_CACHE&lt;/code&gt;: Controls the state cache. The following values are supported: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;disable&lt;/code&gt;: Disables the cache entirely.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;reset&lt;/code&gt;: Clears the cache file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DXVK_STATE_CACHE_PATH=/some/directory&lt;/code&gt; Specifies a directory where to put the cache files. Defaults to the current working directory of the application.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;The following environment variables can be used for &lt;strong&gt;debugging&lt;/strong&gt; purposes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;VK_INSTANCE_LAYERS=VK_LAYER_KHRONOS_validation&lt;/code&gt; Enables Vulkan debug layers. Highly recommended for troubleshooting rendering issues and driver crashes. Requires the Vulkan SDK to be installed on the host system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DXVK_LOG_LEVEL=none|error|warn|info|debug&lt;/code&gt; Controls message logging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DXVK_LOG_PATH=/some/directory&lt;/code&gt; Changes path where log files are stored. Set to &lt;code&gt;none&lt;/code&gt; to disable log file creation entirely, without disabling logging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DXVK_CONFIG_FILE=/xxx/dxvk.conf&lt;/code&gt; Sets path to the configuration file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DXVK_PERF_EVENTS=1&lt;/code&gt; Enables use of the VK_EXT_debug_utils extension for translating performance event markers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;DXVK requires threading support from your mingw-w64 build environment. If you are missing this, you may see &#34;error: ‘std::cv_status’ has not been declared&#34; or similar threading related errors.&lt;/p&gt; &#xA;&lt;p&gt;On Debian and Ubuntu, this can be resolved by using the posix alternate, which supports threading. For example, choose the posix alternate from these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;update-alternatives --config x86_64-w64-mingw32-gcc&#xA;update-alternatives --config x86_64-w64-mingw32-g++&#xA;update-alternatives --config i686-w64-mingw32-gcc&#xA;update-alternatives --config i686-w64-mingw32-g++&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For non debian based distros, make sure that your mingw-w64-gcc cross compiler does have &lt;code&gt;--enable-threads=posix&lt;/code&gt; enabled during configure. If your distro does ship its mingw-w64-gcc binary with &lt;code&gt;--enable-threads=win32&lt;/code&gt; you might have to recompile locally or open a bug at your distro&#39;s bugtracker to ask for it.&lt;/p&gt;</summary>
  </entry>
</feed>