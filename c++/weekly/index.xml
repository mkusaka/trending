<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-06T01:41:53Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LadybirdBrowser/ladybird</title>
    <updated>2024-10-06T01:41:53Z</updated>
    <id>tag:github.com,2024-10-06:/LadybirdBrowser/ladybird</id>
    <link href="https://github.com/LadybirdBrowser/ladybird" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Truly independent web browser&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ladybird&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ladybird.org&#34;&gt;Ladybird&lt;/a&gt; is a truly independent web browser, using a novel engine based on web standards.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Ladybird is in a pre-alpha state, and only suitable for use by developers&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;We aim to build a complete, usable browser for the modern web.&lt;/p&gt; &#xA;&lt;p&gt;Ladybird uses a multi-process architecture with a main UI process, several WebContent renderer processes, an ImageDecoder process, and a RequestServer process.&lt;/p&gt; &#xA;&lt;p&gt;Image decoding and network connections are done out of process to be more robust against malicious content. Each tab has its own renderer process, which is sandboxed from the rest of the system.&lt;/p&gt; &#xA;&lt;p&gt;At the moment, many core library support components are inherited from SerenityOS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LibWeb: Web rendering engine&lt;/li&gt; &#xA; &lt;li&gt;LibJS: JavaScript engine&lt;/li&gt; &#xA; &lt;li&gt;LibWasm: WebAssembly implementation&lt;/li&gt; &#xA; &lt;li&gt;LibCrypto/LibTLS: Cryptography primitives and Transport Layer Security&lt;/li&gt; &#xA; &lt;li&gt;LibHTTP: HTTP/1.1 client&lt;/li&gt; &#xA; &lt;li&gt;LibGfx: 2D Graphics Library, Image Decoding and Rendering&lt;/li&gt; &#xA; &lt;li&gt;LibArchive: Archive file format support&lt;/li&gt; &#xA; &lt;li&gt;LibUnicode: Unicode and locale support&lt;/li&gt; &#xA; &lt;li&gt;LibMedia: Audio and video playback&lt;/li&gt; &#xA; &lt;li&gt;LibCore: Event loop, OS abstraction layer&lt;/li&gt; &#xA; &lt;li&gt;LibIPC: Inter-process communication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How do I build and run this?&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/LadybirdBrowser/ladybird/master/Documentation/BuildInstructionsLadybird.md&#34;&gt;build instructions&lt;/a&gt; for information on how to build Ladybird.&lt;/p&gt; &#xA;&lt;p&gt;Ladybird runs on Linux, macOS, Windows (with WSL2), and many other *Nixes.&lt;/p&gt; &#xA;&lt;h2&gt;How do I read the documentation?&lt;/h2&gt; &#xA;&lt;p&gt;Code-related documentation can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/LadybirdBrowser/ladybird/master/Documentation/&#34;&gt;documentation&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Get in touch and participate!&lt;/h2&gt; &#xA;&lt;p&gt;Join &lt;a href=&#34;https://discord.gg/nvfjVJ4Svh&#34;&gt;our Discord server&lt;/a&gt; to participate in development discussion.&lt;/p&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/LadybirdBrowser/ladybird/master/Documentation/GettingStartedContributing.md&#34;&gt;Getting started contributing&lt;/a&gt; if you plan to contribute to Ladybird for the first time.&lt;/p&gt; &#xA;&lt;p&gt;Before opening an issue, please see the &lt;a href=&#34;https://raw.githubusercontent.com/LadybirdBrowser/ladybird/master/CONTRIBUTING.md#issue-policy&#34;&gt;issue policy&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/LadybirdBrowser/ladybird/master/ISSUES.md&#34;&gt;detailed issue-reporting guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The full contribution guidelines can be found in &lt;a href=&#34;https://raw.githubusercontent.com/LadybirdBrowser/ladybird/master/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Ladybird is licensed under a 2-clause BSD license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dolphin-emu/dolphin</title>
    <updated>2024-10-06T01:41:53Z</updated>
    <id>tag:github.com,2024-10-06:/dolphin-emu/dolphin</id>
    <link href="https://github.com/dolphin-emu/dolphin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dolphin is a GameCube / Wii emulator, allowing you to play games for these two platforms on PC with improvements.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dolphin - A GameCube and Wii Emulator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dolphin-emu.org/&#34;&gt;Homepage&lt;/a&gt; | &lt;a href=&#34;https://github.com/dolphin-emu/dolphin&#34;&gt;Project Site&lt;/a&gt; | &lt;a href=&#34;https://dolphin.ci/&#34;&gt;Buildbot&lt;/a&gt; | &lt;a href=&#34;https://forums.dolphin-emu.org/&#34;&gt;Forums&lt;/a&gt; | &lt;a href=&#34;https://wiki.dolphin-emu.org/&#34;&gt;Wiki&lt;/a&gt; | &lt;a href=&#34;https://github.com/dolphin-emu/dolphin/wiki&#34;&gt;GitHub Wiki&lt;/a&gt; | &lt;a href=&#34;https://bugs.dolphin-emu.org/projects/emulator/issues&#34;&gt;Issue Tracker&lt;/a&gt; | &lt;a href=&#34;https://github.com/dolphin-emu/dolphin/raw/master/Contributing.md&#34;&gt;Coding Style&lt;/a&gt; | &lt;a href=&#34;https://app.transifex.com/dolphinemu/dolphin-emu/dashboard/&#34;&gt;Transifex Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dolphin is an emulator for running GameCube and Wii games on Windows, Linux, macOS, and recent Android devices. It&#39;s licensed under the terms of the GNU General Public License, version 2 or later (GPLv2+).&lt;/p&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://dolphin-emu.org/docs/faq/&#34;&gt;FAQ&lt;/a&gt; before using Dolphin.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Desktop&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows (10 or higher).&lt;/li&gt; &#xA;   &lt;li&gt;Linux.&lt;/li&gt; &#xA;   &lt;li&gt;macOS (10.15 Catalina or higher).&lt;/li&gt; &#xA;   &lt;li&gt;Unix-like systems other than Linux are not officially supported but might work.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Processor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A CPU with SSE2 support.&lt;/li&gt; &#xA;   &lt;li&gt;A modern CPU (3 GHz and Dual Core, not older than 2008) is highly recommended.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Graphics &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A reasonably modern graphics card (Direct3D 11.1 / OpenGL 3.3).&lt;/li&gt; &#xA;   &lt;li&gt;A graphics card that supports Direct3D 11.1 / OpenGL 4.4 is recommended.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Android (5.0 Lollipop or higher).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Processor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A processor with support for 64-bit applications (either ARMv8 or x86-64).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Graphics &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A graphics processor that supports OpenGL ES 3.0 or higher. Performance varies heavily with &lt;a href=&#34;https://dolphin-emu.org/blog/2013/09/26/dolphin-emulator-and-opengl-drivers-hall-fameshame/&#34;&gt;driver quality&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;A graphics processor that supports standard desktop OpenGL features is recommended for best performance.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Dolphin can only be installed on devices that satisfy the above requirements. Attempting to install on an unsupported device will fail and display an error message.&lt;/p&gt; &#xA;&lt;h2&gt;Building for Windows&lt;/h2&gt; &#xA;&lt;p&gt;Use the solution file &lt;code&gt;Source/dolphin-emu.sln&lt;/code&gt; to build Dolphin on Windows. Dolphin targets the latest MSVC shipped with Visual Studio or Build Tools. Other compilers might be able to build Dolphin on Windows but have not been tested and are not recommended to be used. Git and latest Windows SDK must be installed when building.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to pull submodules before building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;Release&#34; solution configuration includes performance optimizations for the best user experience but complicates debugging Dolphin. The &#34;Debug&#34; solution configuration is significantly slower, more verbose and less permissive but makes debugging Dolphin easier.&lt;/p&gt; &#xA;&lt;h2&gt;Building for Linux and macOS&lt;/h2&gt; &#xA;&lt;p&gt;Dolphin requires &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; for systems other than Windows. You need a recent version of GCC or Clang with decent c++20 support. CMake will inform you if your compiler is too old. Many libraries are bundled with Dolphin and used if they&#39;re not installed on your system. CMake will inform you if a bundled library is used or if you need to install any missing packages yourself. You may refer to the &lt;a href=&#34;https://github.com/dolphin-emu/dolphin/wiki/Building-for-Linux&#34;&gt;wiki&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to pull submodules before building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS Build Steps:&lt;/h3&gt; &#xA;&lt;p&gt;A binary supporting a single architecture can be built using the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make -j $(sysctl -n hw.logicalcpu)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;An application bundle will be created in &lt;code&gt;./Binaries&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A script is also provided to build universal binaries supporting both x64 and ARM in the same application bundle using the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python ../BuildMacOSUniversalBinary.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Universal binaries will be available in the &lt;code&gt;universal&lt;/code&gt; folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Doing this is more complex as it requires installation of library dependencies for both x64 and ARM (or universal library equivalents) and may require specifying additional arguments to point to relevant library locations. Execute BuildMacOSUniversalBinary.py --help for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Linux Global Build Steps:&lt;/h3&gt; &#xA;&lt;p&gt;To install to your system.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make -j $(nproc)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo make install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Linux Local Build Steps:&lt;/h3&gt; &#xA;&lt;p&gt;Useful for development as root access is not required.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir Build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd Build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake .. -DLINUX_LOCAL_DEV=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make -j $(nproc)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ln -s ../../Data/Sys Binaries/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Linux Portable Build Steps:&lt;/h3&gt; &#xA;&lt;p&gt;Can be stored on external storage and used on different Linux systems. Or useful for having multiple distinct Dolphin setups for testing/development/TAS.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir Build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd Build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake .. -DLINUX_LOCAL_DEV=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make -j $(nproc)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cp -r ../Data/Sys/ Binaries/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;touch Binaries/portable.txt&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building for Android&lt;/h2&gt; &#xA;&lt;p&gt;These instructions assume familiarity with Android development. If you do not have an Android dev environment set up, see &lt;a href=&#34;https://raw.githubusercontent.com/dolphin-emu/dolphin/master/AndroidSetup.md&#34;&gt;AndroidSetup.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to pull submodules before building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using Android Studio, import the Gradle project located in &lt;code&gt;./Source/Android&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Android apps are compiled using a build system called Gradle. Dolphin&#39;s native component, however, is compiled using CMake. The Gradle script will attempt to run a CMake build automatically while building the Java code.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstalling&lt;/h2&gt; &#xA;&lt;p&gt;On Windows, simply remove the extracted directory, unless it was installed with the NSIS installer, in which case you can uninstall Dolphin like any other Windows application.&lt;/p&gt; &#xA;&lt;p&gt;Linux users can run &lt;code&gt;cat install_manifest.txt | xargs -d &#39;\n&#39; rm&lt;/code&gt; as root from the build directory to uninstall Dolphin from their system.&lt;/p&gt; &#xA;&lt;p&gt;macOS users can simply delete Dolphin.app to uninstall it.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you&#39;ll want to remove the global user directory if you don&#39;t plan on reinstalling Dolphin.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: Dolphin.exe [options]... [FILE]...&#xA;&#xA;Options:&#xA;  --version             show program&#39;s version number and exit&#xA;  -h, --help            show this help message and exit&#xA;  -u USER, --user=USER  User folder path&#xA;  -m MOVIE, --movie=MOVIE&#xA;                        Play a movie file&#xA;  -e &amp;lt;file&amp;gt;, --exec=&amp;lt;file&amp;gt;&#xA;                        Load the specified file&#xA;  -n &amp;lt;16-character ASCII title ID&amp;gt;, --nand_title=&amp;lt;16-character ASCII title ID&amp;gt;&#xA;                        Launch a NAND title&#xA;  -C &amp;lt;System&amp;gt;.&amp;lt;Section&amp;gt;.&amp;lt;Key&amp;gt;=&amp;lt;Value&amp;gt;, --config=&amp;lt;System&amp;gt;.&amp;lt;Section&amp;gt;.&amp;lt;Key&amp;gt;=&amp;lt;Value&amp;gt;&#xA;                        Set a configuration option&#xA;  -s &amp;lt;file&amp;gt;, --save_state=&amp;lt;file&amp;gt;&#xA;                        Load the initial save state&#xA;  -d, --debugger        Show the debugger pane and additional View menu options&#xA;  -l, --logger          Open the logger&#xA;  -b, --batch           Run Dolphin without the user interface (Requires&#xA;                        --exec or --nand-title)&#xA;  -c, --confirm         Set Confirm on Stop&#xA;  -v VIDEO_BACKEND, --video_backend=VIDEO_BACKEND&#xA;                        Specify a video backend&#xA;  -a AUDIO_EMULATION, --audio_emulation=AUDIO_EMULATION&#xA;                        Choose audio emulation from [HLE|LLE]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available DSP emulation engines are HLE (High Level Emulation) and LLE (Low Level Emulation). HLE is faster but less accurate whereas LLE is slower but close to perfect. Note that LLE has two submodes (Interpreter and Recompiler) but they cannot be selected from the command line.&lt;/p&gt; &#xA;&lt;p&gt;Available video backends are &#34;D3D&#34; and &#34;D3D12&#34; (they are only available on Windows), &#34;OGL&#34;, and &#34;Vulkan&#34;. There&#39;s also &#34;Null&#34;, which will not render anything, and &#34;Software Renderer&#34;, which uses the CPU for rendering and is intended for debugging purposes only.&lt;/p&gt; &#xA;&lt;h2&gt;DolphinTool Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: dolphin-tool COMMAND -h&#xA;&#xA;commands supported: [convert, verify, header, extract]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: convert [options]... [FILE]...&#xA;&#xA;Options:&#xA;  -h, --help            show this help message and exit&#xA;  -u USER, --user=USER  User folder path, required for temporary processing&#xA;                        files.Will be automatically created if this option is&#xA;                        not set.&#xA;  -i FILE, --input=FILE&#xA;                        Path to disc image FILE.&#xA;  -o FILE, --output=FILE&#xA;                        Path to the destination FILE.&#xA;  -f FORMAT, --format=FORMAT&#xA;                        Container format to use. Default is RVZ. [iso|gcz|wia|rvz]&#xA;  -s, --scrub           Scrub junk data as part of conversion.&#xA;  -b BLOCK_SIZE, --block_size=BLOCK_SIZE&#xA;                        Block size for GCZ/WIA/RVZ formats, as an integer.&#xA;                        Suggested value for RVZ: 131072 (128 KiB)&#xA;  -c COMPRESSION, --compression=COMPRESSION&#xA;                        Compression method to use when converting to WIA/RVZ.&#xA;                        Suggested value for RVZ: zstd [none|zstd|bzip|lzma|lzma2]&#xA;  -l COMPRESSION_LEVEL, --compression_level=COMPRESSION_LEVEL&#xA;                        Level of compression for the selected method. Ignored&#xA;                        if &#39;none&#39;. Suggested value for zstd: 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: verify [options]...&#xA;&#xA;Options:&#xA;  -h, --help            show this help message and exit&#xA;  -u USER, --user=USER  User folder path, required for temporary processing&#xA;                        files.Will be automatically created if this option is&#xA;                        not set.&#xA;  -i FILE, --input=FILE&#xA;                        Path to disc image FILE.&#xA;  -a ALGORITHM, --algorithm=ALGORITHM&#xA;                        Optional. Compute and print the digest using the&#xA;                        selected algorithm, then exit. [crc32|md5|sha1|rchash]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: header [options]...&#xA;&#xA;Options:&#xA;  -h, --help            show this help message and exit&#xA;  -i FILE, --input=FILE&#xA;                        Path to disc image FILE.&#xA;  -b, --block_size      Optional. Print the block size of GCZ/WIA/RVZ formats,&#xA;then exit.&#xA;  -c, --compression     Optional. Print the compression method of GCZ/WIA/RVZ&#xA;                        formats, then exit.&#xA;  -l, --compression_level&#xA;                        Optional. Print the level of compression for WIA/RVZ&#xA;                        formats, then exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: extract [options]...&#xA;&#xA;Options:&#xA;  -h, --help            show this help message and exit&#xA;  -i FILE, --input=FILE&#xA;                        Path to disc image FILE.&#xA;  -o FOLDER, --output=FOLDER&#xA;                        Path to the destination FOLDER.&#xA;  -p PARTITION, --partition=PARTITION&#xA;                        Which specific partition you want to extract.&#xA;  -s SINGLE, --single=SINGLE&#xA;                        Which specific file/directory you want to extract.&#xA;  -l, --list            List all files in volume/partition. Will print the&#xA;                        directory/file specified with --single if defined.&#xA;  -q, --quiet           Mute all messages except for errors.&#xA;  -g, --gameonly        Only extracts the DATA partition.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>OpenStickCommunity/GP2040-CE</title>
    <updated>2024-10-06T01:41:53Z</updated>
    <id>tag:github.com,2024-10-06:/OpenStickCommunity/GP2040-CE</id>
    <link href="https://github.com/OpenStickCommunity/GP2040-CE" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-Platform Gamepad Firmware for Raspberry Pi Pico and other RP2040 boards&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gp2040-ce.info&#34;&gt; &lt;img alt=&#34;GP2040-CE&#34; src=&#34;https://raw.githubusercontent.com/OpenStickCommunity/Site/main/docs/assets/images/gp2040-ce-logo.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Multi-Platform Gamepad Firmware for RP2040 &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/OpenStickCommunity/GP2040-CE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/OpenStickCommunity/GP2040-CE/cmake.yml&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://img.shields.io/badge/inputlag.science-0.86%20ms-blue&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/MiSTer%20latency-0.765%20ms-blue&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt; GP2040-CE (Community Edition) is a gamepad firmware for the Raspberry Pi Pico and other boards based on the RP2040 microcontrollers that combines multi-platform compatibility, low latency and a rich feature set to provide endless customization possibilities without sacrificing performance. &lt;/p&gt; &#xA;&lt;p&gt; GP2040-CE is compatible with PC, PS3, PS4, PS5, Nintendo Switch, Xbox One, Steam Deck, MiSTer and Android. &lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gp2040-ce.info/downloads&#34;&gt;Downloads&lt;/a&gt; | &lt;a href=&#34;https://gp2040-ce.info/installation&#34;&gt;Installation&lt;/a&gt; | &lt;a href=&#34;https://gp2040-ce.info/controller-build/wiring&#34;&gt;Wiring&lt;/a&gt; | &lt;a href=&#34;https://gp2040-ce.info/usage&#34;&gt;Usage&lt;/a&gt; | &lt;a href=&#34;https://gp2040-ce.info/faq/faq-general&#34;&gt;FAQ&lt;/a&gt; | &lt;a href=&#34;https://github.com/OpenStickCommunity/GP2040-CE&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Full documentation can be found at &lt;a href=&#34;https://gp2040-ce.info&#34;&gt;https://gp2040-ce.info&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select from 13 input modes including X-Input, Nintendo Switch, Playstation 4/5, Xbox One, D-Input, and Keyboard&lt;/li&gt; &#xA; &lt;li&gt;Input latency average of 0.76ms in Xinput and 0.91ms for Playstation 5.&lt;/li&gt; &#xA; &lt;li&gt;Multiple SOCD cleaning modes - Up Priority (a.k.a. Stickless), Neutral, and Second Input Priority.&lt;/li&gt; &#xA; &lt;li&gt;Left and Right stick emulation via D-pad inputs as well as dedicated toggle switches.&lt;/li&gt; &#xA; &lt;li&gt;Dual direction via D-pad + LS/RS.&lt;/li&gt; &#xA; &lt;li&gt;Reversed input via a button.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gp2040-ce.info/add-ons/turbo&#34;&gt;Turbo and Turbo LED&lt;/a&gt; with selectable speed&lt;/li&gt; &#xA; &lt;li&gt;Per-button RGB LED support.&lt;/li&gt; &#xA; &lt;li&gt;PWM Player indicator LED support (XInput only).&lt;/li&gt; &#xA; &lt;li&gt;Multiple LED profiles support.&lt;/li&gt; &#xA; &lt;li&gt;Support for 128x64 monochrome I2C displays - SSD1306, SH1106, and SH1107 compatible.&lt;/li&gt; &#xA; &lt;li&gt;Custom startup splash screen and easy image upload via web configuration.&lt;/li&gt; &#xA; &lt;li&gt;Support for passive buzzer speaker (3v or 5v).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gp2040-ce.info/web-configurator&#34;&gt;Built-in, embedded web configuration&lt;/a&gt; - No download required!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://gp2040-ce.info/usage&#34;&gt;GP2040-CE Usage&lt;/a&gt; page for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Input latency is tested using the methodology outlined at &lt;a href=&#34;https://inputlag.science/controller/methodology&#34;&gt;WydD&#39;s inputlag.science website&lt;/a&gt;, using the default 1000 Hz (1 ms) polling rate in the firmware. You can read more about the setup we use to conduct latency testing &lt;a href=&#34;https://github.com/OpenStickCommunity/Site/raw/main/latency_testing/README.md&#34;&gt;HERE&lt;/a&gt; if you are interested in testing for yourself or would just like to know more about the devices used to do the testing.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;   &lt;th&gt;Poll Rate&lt;/th&gt; &#xA;   &lt;th&gt;Min&lt;/th&gt; &#xA;   &lt;th&gt;Max&lt;/th&gt; &#xA;   &lt;th&gt;Avg&lt;/th&gt; &#xA;   &lt;th&gt;Stdev&lt;/th&gt; &#xA;   &lt;th&gt;% on time&lt;/th&gt; &#xA;   &lt;th&gt;%1f skip&lt;/th&gt; &#xA;   &lt;th&gt;%2f skip&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v0.7.9&lt;/td&gt; &#xA;   &lt;td&gt;Xinput&lt;/td&gt; &#xA;   &lt;td&gt;1 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.45 ms&lt;/td&gt; &#xA;   &lt;td&gt;1.28 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.76 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.24 ms&lt;/td&gt; &#xA;   &lt;td&gt;98.48%&lt;/td&gt; &#xA;   &lt;td&gt;1.52%&lt;/td&gt; &#xA;   &lt;td&gt;0%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v0.7.9&lt;/td&gt; &#xA;   &lt;td&gt;Switch&lt;/td&gt; &#xA;   &lt;td&gt;1 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.41 ms&lt;/td&gt; &#xA;   &lt;td&gt;1.23 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.72 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.24 ms&lt;/td&gt; &#xA;   &lt;td&gt;98.53%&lt;/td&gt; &#xA;   &lt;td&gt;1.47%&lt;/td&gt; &#xA;   &lt;td&gt;0%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v0.7.9&lt;/td&gt; &#xA;   &lt;td&gt;Dinput (PS3)&lt;/td&gt; &#xA;   &lt;td&gt;1 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.44 ms&lt;/td&gt; &#xA;   &lt;td&gt;1.27 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.75 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.24 ms&lt;/td&gt; &#xA;   &lt;td&gt;98.49%&lt;/td&gt; &#xA;   &lt;td&gt;1.51%&lt;/td&gt; &#xA;   &lt;td&gt;0%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v0.7.9&lt;/td&gt; &#xA;   &lt;td&gt;PS4&lt;/td&gt; &#xA;   &lt;td&gt;1 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.55 ms&lt;/td&gt; &#xA;   &lt;td&gt;2.26 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.90 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.32 ms&lt;/td&gt; &#xA;   &lt;td&gt;98.21%&lt;/td&gt; &#xA;   &lt;td&gt;1.79%&lt;/td&gt; &#xA;   &lt;td&gt;0%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v0.7.9&lt;/td&gt; &#xA;   &lt;td&gt;PS5&lt;/td&gt; &#xA;   &lt;td&gt;1 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.55 ms&lt;/td&gt; &#xA;   &lt;td&gt;2.33 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.91 ms&lt;/td&gt; &#xA;   &lt;td&gt;0.33 ms&lt;/td&gt; &#xA;   &lt;td&gt;98.18%&lt;/td&gt; &#xA;   &lt;td&gt;1.82%&lt;/td&gt; &#xA;   &lt;td&gt;0%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Full results can be found in the &lt;a href=&#34;https://github.com/OpenStickCommunity/Site/raw/main/latency_testing/GP2040-CE_Firmware_Latency_Test_Results_v0.7.9.xlsx&#34;&gt;GP2040-CE v0.7.9 Firmware Latency Test Results&lt;/a&gt; .xlsx Sheet.&lt;/p&gt; &#xA;&lt;p&gt;Results from v0.7.8 can be found &lt;a href=&#34;https://github.com/OpenStickCommunity/Site/raw/main/latency_testing/GP2040-CE_Firmware_Latency_Test_Results_v0.7.8.xlsx&#34;&gt;HERE&lt;/a&gt;. Previous results can be found in the &lt;code&gt;latency_testing&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to discuss features, issues or anything else related to GP2040-CE please &lt;a href=&#34;https://github.com/OpenStickCommunity/GP2040-CE/issues/new&#34;&gt;create an issue&lt;/a&gt; or join the &lt;a href=&#34;https://discord.gg/k2pxhke7q8&#34;&gt;OpenStick GP2040-CE Discord&lt;/a&gt; support channel.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Want to help improve GP2040-CE? There are a bunch of ways to contribute!&lt;/p&gt; &#xA;&lt;h3&gt;Community Participation&lt;/h3&gt; &#xA;&lt;p&gt;Have an idea for a cool new feature, or just want to discuss some technical details with the developers? Join the &lt;a href=&#34;https://discord.gg/k2pxhke7q8&#34;&gt;OpenStick GP2040-CE Discord&lt;/a&gt; server to participate in our active and ever-growing community!&lt;/p&gt; &#xA;&lt;h3&gt;Pull Requests&lt;/h3&gt; &#xA;&lt;p&gt;Pull requests are welcome and encouraged for enhancements, bug fixes and documentation updates.&lt;/p&gt; &#xA;&lt;p&gt;Please respect the coding style of the file(s) you are working in, and enforce the use of the &lt;code&gt;.editorconfig&lt;/code&gt; file when present.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FeralAI&#34;&gt;FeralAI&lt;/a&gt; for building &lt;a href=&#34;https://github.com/FeralAI/GP2040&#34;&gt;GP2040&lt;/a&gt; and laying the foundation for this community project&lt;/li&gt; &#xA; &lt;li&gt;Ha Thach&#39;s excellent &lt;a href=&#34;https://github.com/hathach/tinyusb&#34;&gt;TinyUSB library&lt;/a&gt; examples&lt;/li&gt; &#xA; &lt;li&gt;fluffymadness&#39;s &lt;a href=&#34;https://github.com/fluffymadness/tinyusb-xinput&#34;&gt;tinyusb-xinput&lt;/a&gt; sample&lt;/li&gt; &#xA; &lt;li&gt;Kevin Boone&#39;s &lt;a href=&#34;https://kevinboone.me/picoflash.html&#34;&gt;blog post on using RP2040 flash memory as emulated EEPROM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bitbank2&#34;&gt;bitbank2&lt;/a&gt; for the &lt;a href=&#34;https://github.com/bitbank2/OneBitDisplay&#34;&gt;OneBitDisplay&lt;/a&gt; and &lt;a href=&#34;https://github.com/bitbank2/BitBang_I2C&#34;&gt;BitBang_I2C&lt;/a&gt; libraries, which were ported for use with the Pico SDK&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arntsonl&#34;&gt;arntsonl&lt;/a&gt; for the amazing cleanup and feature additions that brought us to v0.5.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alirin222&#34;&gt;alirin222&lt;/a&gt; for the awesome turbo code (&lt;a href=&#34;https://twitter.com/alirin222&#34;&gt;@alirin222&lt;/a&gt; on Twitter)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deeebug&#34;&gt;deeebug&lt;/a&gt; for improvements to the web-UI and fixing the PS3 home button issue&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheTrainGoes/GP2040-Projects&#34;&gt;TheTrain&lt;/a&gt; and &lt;a href=&#34;https://github.com/Fortinbra&#34;&gt;Fortinbra&lt;/a&gt; for helping keep our community chugging along&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/passinglink/passinglink&#34;&gt;PassingLink&lt;/a&gt; for the technical details and code for PS4 implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youssef-habchi.com/&#34;&gt;Youssef Habchi&lt;/a&gt; for allowing us to purchase a license to use Road Rage font for the project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tamanegitaro/&#34;&gt;tamanegitaro&lt;/a&gt; and &lt;a href=&#34;https://github.com/alirin222&#34;&gt;alirin222&lt;/a&gt; for the basis of the mini/classic controller work&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ryzee119&#34;&gt;Ryzee119&lt;/a&gt; for the wonderful &lt;a href=&#34;https://github.com/Ryzee119/ogx360_t4/&#34;&gt;ogx360_t4&lt;/a&gt; and xid_driver library for Original Xbox support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Santroller/Santroller&#34;&gt;Santroller&lt;/a&gt; and &lt;a href=&#34;https://github.com/matlo/GIMX&#34;&gt;GIMX&lt;/a&gt; for technical examples of Xbox One authentication using pass-through&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>