<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:01:02Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dogecoin/dogecoin</title>
    <updated>2022-06-02T02:01:02Z</updated>
    <id>tag:github.com,2022-06-02:/dogecoin/dogecoin</id>
    <link href="https://github.com/dogecoin/dogecoin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;very currency&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Dogecoin Core [DOGE, Ð] &lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://static.tumblr.com/ppdj5y9/Ae9mxmxtp/300coin.png&#34; alt=&#34;Dogecoin&#34; width=&#34;300&#34;&gt; &lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://dogecoin.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Doge-Coin-yellow.svg?sanitize=true&#34; alt=&#34;DogecoinBadge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dogecoin.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Much-Wow-yellow.svg?sanitize=true&#34; alt=&#34;MuchWow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Select language: EN | &lt;a href=&#34;https://raw.githubusercontent.com/dogecoin/dogecoin/master/README_zh_CN.md&#34;&gt;CN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dogecoin is a community-driven cryptocurrency that was inspired by a Shiba Inu meme. The Dogecoin Core software allows anyone to operate a node in the Dogecoin blockchain networks and uses the Scrypt hashing method for Proof of Work. It is adapted from Bitcoin Core and other cryptocurrencies.&lt;/p&gt; &#xA;&lt;p&gt;For information about the default fees used on the Dogecoin network, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/dogecoin/dogecoin/master/doc/fee-recommendation.md&#34;&gt;fee recommendation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Website:&lt;/strong&gt; &lt;a href=&#34;https://dogecoin.com&#34;&gt;dogecoin.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage 💻&lt;/h2&gt; &#xA;&lt;p&gt;To start your journey with Dogecoin Core, see the &lt;a href=&#34;https://raw.githubusercontent.com/dogecoin/dogecoin/master/INSTALL.md&#34;&gt;installation guide&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/dogecoin/dogecoin/master/doc/getting-started.md&#34;&gt;getting started&lt;/a&gt; tutorial.&lt;/p&gt; &#xA;&lt;p&gt;The JSON-RPC API provided by Dogecoin Core is self-documenting and can be browsed with &lt;code&gt;dogecoin-cli help&lt;/code&gt;, while detailed information for each command can be viewed with &lt;code&gt;dogecoin-cli help &amp;lt;command&amp;gt;&lt;/code&gt;. Alternatively, see the &lt;a href=&#34;https://developer.bitcoin.org/reference/rpc/&#34;&gt;Bitcoin Core documentation&lt;/a&gt; - which implement a similar protocol - to get a browsable version.&lt;/p&gt; &#xA;&lt;h3&gt;Such ports&lt;/h3&gt; &#xA;&lt;p&gt;Dogecoin Core by default uses port &lt;code&gt;22556&lt;/code&gt; for peer-to-peer communication that is needed to synchronize the &#34;mainnet&#34; blockchain and stay informed of new transactions and blocks. Additionally, a JSONRPC port can be opened, which defaults to port &lt;code&gt;22555&lt;/code&gt; for mainnet nodes. It is strongly recommended to not expose RPC ports to the public internet.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Function&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;mainnet&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;testnet&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;regtest&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;P2P&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;22556&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;44556&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;18444&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;RPC&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;22555&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;44555&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;18332&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Ongoing development - Moon plan 🌒&lt;/h2&gt; &#xA;&lt;p&gt;Dogecoin Core is an open source and community driven software. The development process is open and publicly visible; anyone can see, discuss and work on the software.&lt;/p&gt; &#xA;&lt;p&gt;Main development resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dogecoin/dogecoin/projects&#34;&gt;Github Projects&lt;/a&gt; is used to follow planned and in-progress work for upcoming releases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dogecoin/dogecoin/discussions&#34;&gt;Github Discussion&lt;/a&gt; is used to discuss features, planned and unplanned, related to both the development of the Dogecoin Core software, the underlying protocols and the DOGE asset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/dogecoindev/&#34;&gt;Dogecoindev subreddit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Version strategy&lt;/h3&gt; &#xA;&lt;p&gt;Version numbers are following &lt;code&gt;major.minor.patch&lt;/code&gt; semantics.&lt;/p&gt; &#xA;&lt;h3&gt;Branches&lt;/h3&gt; &#xA;&lt;p&gt;There are 3 types of branches in this repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;master:&lt;/strong&gt; Stable, contains the latest version of the latest &lt;em&gt;major.minor&lt;/em&gt; release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;maintenance:&lt;/strong&gt; Stable, contains the latest version of previous releases, which are still under active maintenance. Format: &lt;code&gt;&amp;lt;version&amp;gt;-maint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;development:&lt;/strong&gt; Unstable, contains new code for planned releases. Format: &lt;code&gt;&amp;lt;version&amp;gt;-dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Master and maintenance branches are exclusively mutable by release. Planned&lt;/em&gt; &lt;em&gt;releases will always have a development branch and pull requests should be&lt;/em&gt; &lt;em&gt;submitted against those. Maintenance branches are there for &lt;strong&gt;bug fixes only,&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;please submit new features against the development branch with the highest version.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing 🤝&lt;/h2&gt; &#xA;&lt;p&gt;If you find a bug or experience issues with this software, please report it using the &lt;a href=&#34;https://github.com/dogecoin/dogecoin/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=bug_report.md&amp;amp;title=%5Bbug%5D+&#34;&gt;issue system&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/dogecoin/dogecoin/master/CONTRIBUTING.md&#34;&gt;the contribution guide&lt;/a&gt; to see how you can participate in the development of Dogecoin Core. There are often &lt;a href=&#34;https://github.com/dogecoin/dogecoin/labels/help%20wanted&#34;&gt;topics seeking help&lt;/a&gt; where your contributions will have high impact and get very appreciation. wow.&lt;/p&gt; &#xA;&lt;h2&gt;Communities 🚀🍾&lt;/h2&gt; &#xA;&lt;p&gt;You can join the communities on different social media. To see what&#39;s going on, meet people &amp;amp; discuss, find the lastest meme, learn about Dogecoin, give or ask for help, to share your project.&lt;/p&gt; &#xA;&lt;p&gt;Here are some places to visit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/dogecoin/&#34;&gt;Dogecoin subreddit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/dogeducation/&#34;&gt;Dogeducation subreddit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/dogecoin&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/dogecoin&#34;&gt;Dogecoin Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Very Much Frequently Asked Questions ❓&lt;/h2&gt; &#xA;&lt;p&gt;Do you have a question regarding Dogecoin? An answer is perhaps already in the &lt;a href=&#34;https://raw.githubusercontent.com/dogecoin/dogecoin/master/doc/FAQ.md&#34;&gt;FAQ&lt;/a&gt; or the &lt;a href=&#34;https://github.com/dogecoin/dogecoin/discussions/categories/q-a&#34;&gt;Q&amp;amp;A section&lt;/a&gt; of the discussion board!&lt;/p&gt; &#xA;&lt;h2&gt;License - Much license ⚖️&lt;/h2&gt; &#xA;&lt;p&gt;Dogecoin Core is released under the terms of the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/dogecoin/dogecoin/master/COPYING&#34;&gt;COPYING&lt;/a&gt; for more information or see &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;opensource.org&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>applenob/Cpp_Primer_Practice</title>
    <updated>2022-06-02T02:01:02Z</updated>
    <id>tag:github.com,2022-06-02:/applenob/Cpp_Primer_Practice</id>
    <link href="https://github.com/applenob/Cpp_Primer_Practice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;搞定C++👊。C++ Primer 中文版第5版学习仓库，包括笔记和课后练习答案。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cpp Primer 学习&lt;/h1&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;p&gt;《C++ Primer 中文版（第 5 版）》学习仓库，包括&lt;strong&gt;笔记&lt;/strong&gt;和&lt;strong&gt;课后练习答案&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;环境&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;system: ubuntu 16.04&lt;/li&gt; &#xA; &lt;li&gt;IDE: VS Code&lt;/li&gt; &#xA; &lt;li&gt;compiler: g++&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/25708312/&#34;&gt;豆瓣链接&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;目录&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;第1章 : 开始 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch01.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch01.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;第 I 部分 : C++基础 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;第2章 : 变量和基本类型 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch02.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch02.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;第3章 : 字符串、向量和数组 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch03.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch03.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;第4章 : 表达式 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch04.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch04.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;第5章 : 语句 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch05.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch05.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;第6章 : 函数 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch06.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch06.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;第7章 : 类 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch07.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch07.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;第 II 部分 : C++标准库 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;第8章 : IO库 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch08.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch08.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;第9章 : 顺序容器 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch09.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch09.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;第10章 : 泛型算法 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch10.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch10.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;第11章 : 关联容器 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch11.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch11.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;第12章 : 动态内存 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch12.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch12.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;第 III 部分 : 类设计者的工具 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;第13章 : 拷贝控制 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch13.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch13.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;第14章 : 重载与类型转换 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch14.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch14.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;第15章 : 面向对象程序设计 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch15.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch15.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;第16章 : 模版与泛型编程 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch16.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch16.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;第 IV 部分 : 高级主题 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;第17章 : 标准库与特殊设施 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch17.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch17.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;第18章 : 用于大型程序的工具 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch18.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch18.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;第19章 : 特殊工具与技术 &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/notes/ch19.md&#34;&gt;笔记&lt;/a&gt; &lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice/tree/master/excersize/ch19.md&#34;&gt;练习&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;参考&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mooophy/Cpp-Primer&#34;&gt;C++ Primer 5 Answers(C++11/14)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huangmingchuan/Cpp_Primer_Answers&#34;&gt;《C++ Primer》第五版中文版习题答案&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;参与贡献&lt;/h2&gt; &#xA;&lt;p&gt;本仓库由多位小伙伴一起参与编写，欢迎大家对本仓库进行补充，一起帮大家更好地理解这本“大部头”。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>loveBabbar/CodeHelp-DSA-Busted-Series</title>
    <updated>2022-06-02T02:01:02Z</updated>
    <id>tag:github.com,2022-06-02:/loveBabbar/CodeHelp-DSA-Busted-Series</id>
    <link href="https://github.com/loveBabbar/CodeHelp-DSA-Busted-Series" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo is creating providing students easy access to all the programs taught under Codehelp&#39;s DSA Busted Series.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CodeHelp-DSA-Busted-Series&lt;/h1&gt; &#xA;&lt;p&gt;Hello Jee,&lt;/p&gt; &#xA;&lt;p&gt;This repo is for the students for easy access to all the programs taught under Codehelp&#39;s DSA Busted Series.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WQoB2z67hvY&amp;amp;list=PLDzeHZWIZsTryvtXdMr6rPh4IDexB5NIA&#34;&gt;DSA Busted Series&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Youtube Channel: CodeHelp - by Babbar&lt;/p&gt; &#xA;&lt;p&gt;Your Instructor: Love Babbar&lt;/p&gt; &#xA;&lt;p&gt;Learn a Lot, Enjoy a Lot.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SymbianSource/oss.FCL.sf.os.kernelhwsrv</title>
    <updated>2022-06-02T02:01:02Z</updated>
    <id>tag:github.com,2022-06-02:/SymbianSource/oss.FCL.sf.os.kernelhwsrv</id>
    <link href="https://github.com/SymbianSource/oss.FCL.sf.os.kernelhwsrv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Symbian OS Kernel&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>Speek-App/Speek</title>
    <updated>2022-06-02T02:01:02Z</updated>
    <id>tag:github.com,2022-06-02:/Speek-App/Speek</id>
    <link href="https://github.com/Speek-App/Speek" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Privacy focused messenger that doesn&#39;t trust anyone with your identity, your contact list, or your communications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Speek! Secure Messenger&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BSD_3--Clause-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Speek.Chat is currently available for OS X (10.12 or later), Linux and Windows. Visit the &lt;a href=&#34;https://github.com/Speek-App/Speek/releases&#34;&gt;releases page&lt;/a&gt; for the latest version and changelog. Alternatively, the newest version of Speek.Chat is also available on the &lt;a href=&#34;https://apps.apple.com/us/app/speek/id1609665326&#34;&gt;MacOS Appstore&lt;/a&gt;, the &lt;a href=&#34;https://www.microsoft.com/en-us/p/speek/9plhbg7k1wzn?activetab=pivot:overviewtab&#34;&gt;Microsoft Store&lt;/a&gt; and the &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.speek.chat&#34;&gt;Google Play Store&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Speek-App/Speek/main/images/Screenshot2.jpg&#34; width=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Speek is serverless, stores no metadata, requires no ID or phone number and all messages including file transfers are end-to-end encrypted and routed via the Tor network. This makes it possible that IP addresses are never public and users can stay anonymous. Furthermore, due to its decentralized (p2p) nature, there is no middleman server that could be compromised, taken down or leak user information such as IP addresses, contacts, metadata or even messages.&lt;/p&gt; &#xA;&lt;p&gt;Users are only identified via public keys. Each user can share their public key with others to add them to their contact list.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can chat without exposing your identity (or IP address) to &lt;em&gt;anyone&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nobody can discover who your contacts are or when you talk (&lt;em&gt;metadata-free!&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Your messages and data are never stored on any servers and you can converse without middlemen.&lt;/li&gt; &#xA; &lt;li&gt;There are no servers or operators that could be compromised, exposing your information.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s cross-platform and easy for non-technical users.&lt;/li&gt; &#xA; &lt;li&gt;All your messages are private. Nothing is stored and there is no meta-data. Once you close Speek! all your messages are deleted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How it works&lt;/h3&gt; &#xA;&lt;p&gt;Speek.Chat is a peer-to-peer instant messaging system built on the Tor Network &lt;a href=&#34;https://www.torproject.org/docs/hidden-services.html.en&#34;&gt;hidden services&lt;/a&gt;. Your login is your hidden service address, and contacts connect to you (not an intermediate server) through Tor. The rendezvous system makes it extremely hard for anyone to learn your identity from your address.&lt;/p&gt; &#xA;&lt;p&gt;Speek.Chat is not affiliated with or endorsed by The Tor Project.&lt;/p&gt; &#xA;&lt;p&gt;For more information, you can &lt;a href=&#34;https://www.torproject.org/about/overview.html.en&#34;&gt;read about Tor&lt;/a&gt; and &lt;a href=&#34;https://github.com/Speek-App/Speek/raw/main/doc/design.md&#34;&gt;learn about Speek.Chat&#39;s design&lt;/a&gt; or &lt;a href=&#34;https://github.com/Speek-App/Speek/raw/main/doc/protocol.md&#34;&gt;protocol&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Downloads&lt;/h3&gt; &#xA;&lt;p&gt;Speek.Chat is currently available for OS X (10.12 or later), Linux and Windows. Visit the &lt;a href=&#34;https://github.com/Speek-App/Speek/releases&#34;&gt;releases page&lt;/a&gt; for the latest version and changelog. Alternatively, the newest version of Speek.Chat is also available on the &lt;a href=&#34;https://www.microsoft.com/en-us/p/speek/9plhbg7k1wzn?activetab=pivot:overviewtab&#34;&gt;Microsoft Store&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Everything is &lt;a href=&#34;https://github.com/Speek-App/Speek/raw/main/src/LICENSE&#34;&gt;open-source&lt;/a&gt; and open to contribution.&lt;/p&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/Speek-App/Speek/raw/main/BUILDING.md&#34;&gt;BUILDING&lt;/a&gt; for Linux, OS X, and Windows build instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;p&gt;Bugs can be reported on the &lt;a href=&#34;https://github.com/Speek-App/Speek/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mysql/mysql-server</title>
    <updated>2022-06-02T02:01:02Z</updated>
    <id>tag:github.com,2022-06-02:/mysql/mysql-server</id>
    <link href="https://github.com/mysql/mysql-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MySQL Server, the world&#39;s most popular open source database, and MySQL Cluster, a real-time, open source transactional database.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Copyright (c) 2000, 2022, Oracle and/or its affiliates.&lt;/p&gt; &#xA;&lt;p&gt;This is a release of MySQL, an SQL database server.&lt;/p&gt; &#xA;&lt;p&gt;License information can be found in the LICENSE file.&lt;/p&gt; &#xA;&lt;p&gt;In test packages where this file is renamed README-test, the license file is renamed LICENSE-test.&lt;/p&gt; &#xA;&lt;p&gt;This distribution may include materials developed by third parties. For license and attribution notices for these materials, please refer to the LICENSE file.&lt;/p&gt; &#xA;&lt;p&gt;For further information on MySQL or additional documentation, visit &lt;a href=&#34;http://dev.mysql.com/doc/&#34;&gt;http://dev.mysql.com/doc/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For additional downloads and the source of MySQL, visit &lt;a href=&#34;http://dev.mysql.com/downloads/&#34;&gt;http://dev.mysql.com/downloads/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MySQL is brought to you by the MySQL team at Oracle.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>simdjson/simdjson</title>
    <updated>2022-06-02T02:01:02Z</updated>
    <id>tag:github.com,2022-06-02:/simdjson/simdjson</id>
    <link href="https://github.com/simdjson/simdjson" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parsing gigabytes of JSON per second&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/simdjson/simdjson/workflows/Ubuntu%2018.04%20CI%20(GCC%207)/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu 18.04 CI&#34;&gt; &lt;a href=&#34;https://simdjson.org/plots.html&#34;&gt;&lt;img src=&#34;https://github.com/simdjson/simdjson/workflows/Ubuntu%2020.04%20CI%20(GCC%209)/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu 20.04 CI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/simdjson/simdjson/workflows/VS16-CI/badge.svg?sanitize=true&#34; alt=&#34;VS16-CI&#34;&gt; &lt;img src=&#34;https://github.com/simdjson/simdjson/workflows/MinGW64-CI/badge.svg?sanitize=true&#34; alt=&#34;MinGW64-CI&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://simdjson.org/api/2.0.0/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-doxygen-green.svg?sanitize=true&#34; alt=&#34;Doxygen Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;simdjson : Parsing gigabytes of JSON per second&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/images/logo.png&#34; width=&#34;10%&#34; style=&#34;float: right&#34;&gt; JSON is everywhere on the Internet. Servers spend a *lot* of time parsing it. We need a fresh approach. The simdjson library uses commonly available SIMD instructions and microparallel algorithms to parse JSON 4x faster than RapidJSON and 25x faster than JSON for Modern C++. &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast:&lt;/strong&gt; Over 4x faster than commonly used production-grade JSON parsers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Record Breaking Features:&lt;/strong&gt; Minify JSON at 6 GB/s, validate UTF-8 at 13 GB/s, NDJSON at 3.5 GB/s.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy:&lt;/strong&gt; First-class, easy to use and carefully documented APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strict:&lt;/strong&gt; Full JSON and UTF-8 validation, lossless parsing. Performance with no compromises.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatic:&lt;/strong&gt; Selects a CPU-tailored parser at runtime. No configuration needed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reliable:&lt;/strong&gt; From memory allocation to error handling, simdjson&#39;s design avoids surprises.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Peer Reviewed:&lt;/strong&gt; Our research appears in venues like VLDB Journal, Software: Practice and Experience.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This library is part of the &lt;a href=&#34;https://awesomecpp.com&#34;&gt;Awesome Modern C++&lt;/a&gt; list.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#performance-results&#34;&gt;Performance results&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#real-world-usage&#34;&gt;Real-world usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#bindings-and-ports-of-simdjson&#34;&gt;Bindings and Ports of simdjson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#about-simdjson&#34;&gt;About simdjson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#funding&#34;&gt;Funding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#contributing-to-simdjson&#34;&gt;Contributing to simdjson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The simdjson library is easily consumable with a single .h and .cpp file.&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Prerequisites: &lt;code&gt;g++&lt;/code&gt; (version 7 or better) or &lt;code&gt;clang++&lt;/code&gt; (version 6 or better), and a 64-bit system with a command-line shell (e.g., Linux, macOS, freeBSD). We also support programming environments like Visual Studio and Xcode, but different steps are needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.h&#34;&gt;simdjson.h&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.cpp&#34;&gt;simdjson.cpp&lt;/a&gt; into a directory, along with the sample file &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/jsonexamples/twitter.json&#34;&gt;twitter.json&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.h https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.cpp https://raw.githubusercontent.com/simdjson/simdjson/master/jsonexamples/twitter.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create &lt;code&gt;quickstart.cpp&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;&#xA;#include &#34;simdjson.h&#34;&#xA;using namespace simdjson;&#xA;int main(void) {&#xA;    ondemand::parser parser;&#xA;    padded_string json = padded_string::load(&#34;twitter.json&#34;);&#xA;    ondemand::document tweets = parser.iterate(json);&#xA;    std::cout &amp;lt;&amp;lt; uint64_t(tweets[&#34;search_metadata&#34;][&#34;count&#34;]) &amp;lt;&amp;lt; &#34; results.&#34; &amp;lt;&amp;lt; std::endl;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;c++ -o quickstart quickstart.cpp simdjson.cpp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./quickstart&lt;/code&gt; &lt;pre&gt;&lt;code&gt;100 results.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Usage documentation is available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/basics.md&#34;&gt;Basics&lt;/a&gt; is an overview of how to use simdjson and its APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/performance.md&#34;&gt;Performance&lt;/a&gt; shows some more advanced scenarios and how to tune for them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/implementation-selection.md&#34;&gt;Implementation Selection&lt;/a&gt; describes runtime CPU detection and how you can work with it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://simdjson.org/api/1.0.0/annotated.html&#34;&gt;API&lt;/a&gt; contains the automatically generated API documentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance results&lt;/h2&gt; &#xA;&lt;p&gt;The simdjson library uses three-quarters less instructions than state-of-the-art parser &lt;a href=&#34;https://rapidjson.org&#34;&gt;RapidJSON&lt;/a&gt;. To our knowledge, simdjson is the first fully-validating JSON parser to run at &lt;a href=&#34;https://en.wikipedia.org/wiki/Gigabyte&#34;&gt;gigabytes per second&lt;/a&gt; (GB/s) on commodity processors. It can parse millions of JSON documents per second on a single core.&lt;/p&gt; &#xA;&lt;p&gt;The following figure represents parsing speed in GB/s for parsing various files on an Intel Skylake processor (3.4 GHz) using the GNU GCC 10 compiler (with the -O3 flag). We compare against the best and fastest C++ libraries on benchmarks that load and process the data. The simdjson library offers full unicode (&lt;a href=&#34;https://en.wikipedia.org/wiki/UTF-8&#34;&gt;UTF-8&lt;/a&gt;) validation and exact number parsing.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/rome.png&#34; width=&#34;60%&#34;&gt; &#xA;&lt;p&gt;The simdjson library offers high speed whether it processes tiny files (e.g., 300 bytes) or larger files (e.g., 3MB). The following plot presents parsing speed for &lt;a href=&#34;https://github.com/simdjson/simdjson_experiments_vldb2019/raw/master/experiments/growing/gen.py&#34;&gt;synthetic files over various sizes generated with a script&lt;/a&gt; on a 3.4 GHz Skylake processor (GNU GCC 9, -O3).&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/growing.png&#34; width=&#34;60%&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simdjson/simdjson_experiments_vldb2019&#34;&gt;All our experiments are reproducible&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For NDJSON files, we can exceed 3 GB/s with &lt;a href=&#34;https://github.com/simdjson/simdjson/raw/master/doc/parse_many.md&#34;&gt;our multithreaded parsing functions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Real-world usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/FishStore&#34;&gt;Microsoft FishStore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yandex/ClickHouse&#34;&gt;Yandex ClickHouse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aras-p/ClangBuildAnalyzer&#34;&gt;Clang Build Analyzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shopify/heap-profiler&#34;&gt;Shopify HeapProfiler&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are planning to use simdjson in a product, please work from one of our releases.&lt;/p&gt; &#xA;&lt;h2&gt;Bindings and Ports of simdjson&lt;/h2&gt; &#xA;&lt;p&gt;We distinguish between &#34;bindings&#34; (which just wrap the C++ code) and a port to another programming language (which reimplements everything).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/michaeleisel/zippyjson&#34;&gt;ZippyJSON&lt;/a&gt;: Swift bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gerrymanoim/libpy_simdjson/&#34;&gt;libpy_simdjson&lt;/a&gt;: high-speed Python bindings for simdjson using &lt;a href=&#34;https://github.com/quantopian/libpy&#34;&gt;libpy&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TkTech/pysimdjson&#34;&gt;pysimdjson&lt;/a&gt;: Python bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TeskaLabs/cysimdjson&#34;&gt;cysimdjson&lt;/a&gt;: high-speed Python bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simd-lite&#34;&gt;simdjson-rs&lt;/a&gt;: Rust port.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SunDoge/simdjson-rust&#34;&gt;simdjson-rust&lt;/a&gt;: Rust wrapper (bindings).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EgorBo/SimdJsonSharp&#34;&gt;SimdJsonSharp&lt;/a&gt;: C# version for .NET Core (bindings and full port).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/luizperes/simdjson_nodejs&#34;&gt;simdjson_nodejs&lt;/a&gt;: Node.js bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crazyxman/simdjson_php&#34;&gt;simdjson_php&lt;/a&gt;: PHP bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/saka1/simdjson_ruby&#34;&gt;simdjson_ruby&lt;/a&gt;: Ruby bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anilmaurya/fast_jsonparser&#34;&gt;fast_jsonparser&lt;/a&gt;: Ruby bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/minio/simdjson-go&#34;&gt;simdjson-go&lt;/a&gt;: Go port using Golang assembly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eddelbuettel/rcppsimdjson&#34;&gt;rcppsimdjson&lt;/a&gt;: R bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ChomperT/simdjson_erlang&#34;&gt;simdjson_erlang&lt;/a&gt;: erlang bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FourierTransformer/lua-simdjson&#34;&gt;lua-simdjson&lt;/a&gt;: lua bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/hermes-json&#34;&gt;hermes-json&lt;/a&gt;: haskell bindings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About simdjson&lt;/h2&gt; &#xA;&lt;p&gt;The simdjson library takes advantage of modern microarchitectures, parallelizing with SIMD vector instructions, reducing branch misprediction, and reducing data dependency to take advantage of each CPU&#39;s multiple execution cores.&lt;/p&gt; &#xA;&lt;p&gt;Some people &lt;a href=&#34;https://arxiv.org/abs/1902.08318&#34;&gt;enjoy reading our paper&lt;/a&gt;: A description of the design and implementation of simdjson is in our research article:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Geoff Langdale, Daniel Lemire, &lt;a href=&#34;https://arxiv.org/abs/1902.08318&#34;&gt;Parsing Gigabytes of JSON per Second&lt;/a&gt;, VLDB Journal 28 (6), 2019.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have an in-depth paper focused on the UTF-8 validation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;John Keiser, Daniel Lemire, &lt;a href=&#34;https://arxiv.org/abs/2010.03090&#34;&gt;Validating UTF-8 In Less Than One Instruction Per Byte&lt;/a&gt;, Software: Practice &amp;amp; Experience 51 (5), 2021.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also have an informal &lt;a href=&#34;https://branchfree.org/2019/02/25/paper-parsing-gigabytes-of-json-per-second/&#34;&gt;blog post providing some background and context&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the video inclined, &lt;br&gt; &lt;a href=&#34;http://www.youtube.com/watch?v=wlvKAT7SZIQ&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/wlvKAT7SZIQ/0.jpg&#34; alt=&#34;simdjson at QCon San Francisco 2019&#34;&gt;&lt;/a&gt;&lt;br&gt; (It was the best voted talk, we&#39;re kinda proud of it.)&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;The work is supported by the Natural Sciences and Engineering Research Council of Canada under grant number RGPIN-2017-03910.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to simdjson&lt;/h2&gt; &#xA;&lt;p&gt;Head over to &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for information on contributing to simdjson, and &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/HACKING.md&#34;&gt;HACKING.md&lt;/a&gt; for information on source, building, and architecture/design.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is made available under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Under Windows, we build some tools using the windows/dirent_portable.h file (which is outside our library code): it under the liberal (business-friendly) MIT license.&lt;/p&gt; &#xA;&lt;p&gt;For compilers that do not support &lt;a href=&#34;https://en.wikipedia.org/wiki/C%2B%2B17&#34;&gt;C++17&lt;/a&gt;, we bundle the string-view library which is published under the &lt;a href=&#34;http://www.boost.org/LICENSE_1_0.txt&#34;&gt;Boost license&lt;/a&gt;. Like the Apache license, the Boost license is a permissive license allowing commercial redistribution.&lt;/p&gt; &#xA;&lt;p&gt;For efficient number serialization, we bundle Florian Loitsch&#39;s implementation of the Grisu2 algorithm for binary to decimal floating-point numbers. The implementation was slightly modified by JSON for Modern C++ library. Both Florian Loitsch&#39;s implementation and JSON for Modern C++ are provided under the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;For runtime dispatching, we use some code from the PyTorch project licensed under 3-clause BSD.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Akebi-Group/Akebi-GC</title>
    <updated>2022-06-02T02:01:02Z</updated>
    <id>tag:github.com,2022-06-02:/Akebi-Group/Akebi-GC</id>
    <link href="https://github.com/Akebi-Group/Akebi-GC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The great software for some game that exploiting anime girls (and boys).&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Akebi GC&lt;/h1&gt; The great software for some game that exploiting anime girls (and boys). &#xA;&lt;p&gt;In first week after 2.7 update cheat can be unstable. Please create issue, if you catch a crash after updating to 2.7.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;It is reccomended to use &lt;a href=&#34;https://visualstudio.microsoft.com/&#34;&gt;Visual Studio 2022.&lt;/a&gt; As well as setting up &lt;strong&gt;&lt;code&gt;cheat-library&lt;/code&gt;&lt;/strong&gt; as startup project. &lt;strong&gt;The following is a recommended procedure, but others may be used.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone repository with &lt;code&gt;git clone --recurse-submodules https://github.com/Akebi-Group/Akebi-GC.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Akebi-GC/akebi-gc.sln&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build solution &lt;code&gt;akebi-gc.sln&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Release&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Head over to the releases page&lt;/li&gt; &#xA; &lt;li&gt;Download the latest binaries&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;(1-2 are optional if you didn&#39;t build from source)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open &lt;code&gt;/bin&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open Compiled version (debug, release)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Insure that &lt;code&gt;CLibrary.dll&lt;/code&gt; is in the same folder that &lt;code&gt;injector.exe&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;injector.exe&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Features&lt;/h1&gt; &#xA;&lt;h4&gt;General&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Protection Bypass&lt;/li&gt; &#xA; &lt;li&gt;In-Game GUI&lt;/li&gt; &#xA; &lt;li&gt;Hotkeys&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Player&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;God Mode&lt;/li&gt; &#xA; &lt;li&gt;Unlimited Stamina&lt;/li&gt; &#xA; &lt;li&gt;Dumb Enemies (Enemies don&#39;t attack)&lt;/li&gt; &#xA; &lt;li&gt;Player&lt;/li&gt; &#xA; &lt;li&gt;Multiply Attacks&lt;/li&gt; &#xA; &lt;li&gt;No Cooldown Skill/Ultimate&lt;/li&gt; &#xA; &lt;li&gt;No Cooldown Sprint&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;World&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Auto Loot&lt;/li&gt; &#xA; &lt;li&gt;Auto Talk&lt;/li&gt; &#xA; &lt;li&gt;Killaura&lt;/li&gt; &#xA; &lt;li&gt;Auto Tree Farm&lt;/li&gt; &#xA; &lt;li&gt;Mob Vacuum&lt;/li&gt; &#xA; &lt;li&gt;Auto Fish&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Teleport&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chest/Oculi Teleport (Teleports to nearest)&lt;/li&gt; &#xA; &lt;li&gt;Map Teleport (Teleport to mark on map)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Visuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ESP&lt;/li&gt; &#xA; &lt;li&gt;Interactive Map&lt;/li&gt; &#xA; &lt;li&gt;Elemental Sight&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Debugging&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Entity List&lt;/li&gt; &#xA; &lt;li&gt;Position Info&lt;/li&gt; &#xA; &lt;li&gt;FPS Graph&lt;/li&gt; &#xA; &lt;li&gt;Packet Sniffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Demo&lt;/h1&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Map Teleportation&lt;/summary&gt; &#xA; &lt;img src=&#34;https://github.com/CallowBlack/gif-demos/raw/main/genshin-cheat/map-teleport-demo.gif&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Noclip&lt;/summary&gt; &#xA; &lt;img src=&#34;https://github.com/CallowBlack/gif-demos/raw/main/genshin-cheat/noclip-demo.gif&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;TP to Oculi&lt;/summary&gt; &#xA; &lt;img src=&#34;https://github.com/CallowBlack/gif-demos/raw/main/genshin-cheat/oculi-teleport-demo.gif&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;TP to Chests&lt;/summary&gt; &#xA; &lt;img src=&#34;https://github.com/CallowBlack/gif-demos/raw/main/genshin-cheat/chest-teleport-demo.gif&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Rapid Fire&lt;/summary&gt; &#xA; &lt;img src=&#34;https://github.com/CallowBlack/gif-demos/raw/main/genshin-cheat/rapid-fire-demo.gif&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Auto Talk&lt;/summary&gt; &#xA; &lt;img src=&#34;https://github.com/CallowBlack/gif-demos/raw/main/genshin-cheat/auto-talk-demo.gif&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Roadmap&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cutscene Skipping&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create database for chests, oculi, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Contributing&lt;/h1&gt; &#xA;&lt;h2&gt;Adding a feature&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the Project&lt;/li&gt; &#xA; &lt;li&gt;Create your Feature Branch (&lt;code&gt;git checkout -b feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your Changes (&lt;code&gt;git commit -m &#39;Add some AmazingFeature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the Branch (&lt;code&gt;git push origin feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Suggestions&lt;/h2&gt; &#xA;&lt;p&gt;Open an issue with the title of the suggesstion you want to make. In the description, make sure it is descriptive enough so our devs can understand what you want and how you want it.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to the short explanation for bug reporting, as well as the bug report template.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Find a bug and write down what happened, as well as your first thoughts on what you think caused it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try to reproduce the bug. For this you need to understand what actually happened, leading up to the bug and when the actual bug happened. To make sure you get all this information correctly taking various forms of documentations, such as video, screenshots etc is essential. These steps makes it a lot easier to try and figure out what actually happened. Try to replicate the scenario where the bug appeared, as close to the original as possible. What we would recommend for this step is using the bug reporting template which can be found on page 2 and simply adding the information you have / find in there.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;can it be reproduced? Yes or no. If yes: Explain in as much detail as possible what happens when the bug occurs and why it occurs. Try and explain it as cleanly and as concise as possible to make sure that the coders don’t have to read an essay to understand what could be a simple bug with a simple fix. For this, remember that information is very subjective so it is much better to over communicate than to risk confusion. If no: Try to provide as much information about the bug as possible, so that the testers will be able to replicate the scenario in which the bug occurred more easily so we can try to reproduce the bug.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tell us which version you are using. Otherwise we would be getting bug reports on the same issue, that has been infact fixed in the latest commits. copy the SHA / Version Number of the latest commit when you built the mod. For example: &lt;code&gt;bd17a00ec388f3b93624280cde9e1c66e740edf9&lt;/code&gt; / Release 0.7&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Notes: Please remember to always record your testing sessions on your local hard drive and then upload them unlisted to youtube to conserve memory space on your computer and to give us easy access to your replays. This is to ensure that the optimal amount of documentation is available for the bug testers and coders to use as a guideline for either replicating scenarios, reproducing bugs or fixing them.&lt;/p&gt; &#xA;&lt;p&gt;TL:DR Record all your stuff while playing the mod and report any bugs to the issues section of this repository.&lt;/p&gt; &#xA;&lt;h3&gt;Bug reporting template&lt;/h3&gt; &#xA;&lt;p&gt;Title: e.g. “Instantly kill enemy with Shackles“ Description: “Game crashed if x, y, z“&lt;/p&gt; &#xA;&lt;p&gt;-- Footer -- Date Occured: 5 / 3 / 2022 Is it reproducible: Yes / Occasionally / No Latest Commit used: &lt;code&gt;bd17a00ec388f3b93624280cde9e1c66e740edf9&lt;/code&gt; Release Version: 0.7&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SpiderLabs/ModSecurity</title>
    <updated>2022-06-02T02:01:02Z</updated>
    <id>tag:github.com,2022-06-02:/SpiderLabs/ModSecurity</id>
    <link href="https://github.com/SpiderLabs/ModSecurity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ModSecurity is an open source, cross platform web application firewall (WAF) engine for Apache, IIS and Nginx that is developed by Trustwave&#39;s SpiderLabs. It has a robust event-based programming language which provides protection from a range of attacks against web applications and allows for HTTP traffic monitoring, logging and real-time analys…&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/SpiderLabs/ModSecurity/raw/v3/master/others/modsec.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/SpiderLabs/ModSecurity/workflows/Quality%20Assurance/badge.svg?sanitize=true&#34; alt=&#34;Quality Assurance&#34;&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=USHvY32Uy62L&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=USHvY32Uy62L&amp;amp;metric=alert_status&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=USHvY32Uy62L&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=USHvY32Uy62L&amp;amp;metric=sqale_rating&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=USHvY32Uy62L&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=USHvY32Uy62L&amp;amp;metric=reliability_rating&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=USHvY32Uy62L&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=USHvY32Uy62L&amp;amp;metric=security_rating&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=USHvY32Uy62L&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=USHvY32Uy62L&amp;amp;metric=vulnerabilities&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Libmodsecurity is one component of the ModSecurity v3 project. The library codebase serves as an interface to ModSecurity Connectors taking in web traffic and applying traditional ModSecurity processing. In general, it provides the capability to load/interpret rules written in the ModSecurity SecRules format and apply them to HTTP content provided by your application via Connectors.&lt;/p&gt; &#xA;&lt;p&gt;If you are looking for ModSecurity for Apache (aka ModSecurity v2.x), it is still under maintenance and available: &lt;a href=&#34;https://github.com/SpiderLabs/ModSecurity/tree/v2/master&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What is the difference between this project and the old ModSecurity (v2.x.x)?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All Apache dependencies have been removed&lt;/li&gt; &#xA; &lt;li&gt;Higher performance&lt;/li&gt; &#xA; &lt;li&gt;New features&lt;/li&gt; &#xA; &lt;li&gt;New architecture&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Libmodsecurity is a complete rewrite of the ModSecurity platform. When it was first devised the ModSecurity project started as just an Apache module. Over time the project has been extended, due to popular demand, to support other platforms including (but not limited to) Nginx and IIS. In order to provide for the growing demand for additional platform support, it has became necessary to remove the Apache dependencies underlying this project, making it more platform independent.&lt;/p&gt; &#xA;&lt;p&gt;As a result of this goal we have rearchitected Libmodsecurity such that it is no longer dependent on the Apache web server (both at compilation and during runtime). One side effect of this is that across all platforms users can expect increased performance. Additionally, we have taken this opportunity to lay the groundwork for some new features that users have been long seeking. For example we are looking to natively support auditlogs in the JSON format, along with a host of other functionality in future versions.&lt;/p&gt; &#xA;&lt;h3&gt;It is no longer just a module.&lt;/h3&gt; &#xA;&lt;p&gt;The &#39;ModSecurity&#39; branch no longer contains the traditional module logic (for Nginx, Apache, and IIS) that has traditionally been packaged all together. Instead, this branch only contains the library portion (libmodsecurity) for this project. This library is consumed by what we have termed &#39;Connectors&#39; these connectors will interface with your webserver and provide the library with a common format that it understands. Each of these connectors is maintained as a separate GitHub project. For instance, the Nginx connector is supplied by the ModSecurity-nginx project (&lt;a href=&#34;https://github.com/SpiderLabs/ModSecurity-nginx&#34;&gt;https://github.com/SpiderLabs/ModSecurity-nginx&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Keeping these connectors separated allows each project to have different release cycles, issues and development trees. Additionally, it means that when you install ModSecurity v3 you only get exactly what you need, no extras you won&#39;t be using.&lt;/p&gt; &#xA;&lt;h1&gt;Compilation&lt;/h1&gt; &#xA;&lt;p&gt;Before starting the compilation process, make sure that you have all the dependencies in place. Read the subsection “Dependencies” for further information.&lt;/p&gt; &#xA;&lt;p&gt;After the compilation make sure that there are no issues on your build/platform. We strongly recommend the utilization of the unit tests and regression tests. These test utilities are located under the subfolder ‘tests’.&lt;/p&gt; &#xA;&lt;p&gt;As a dynamic library, don’t forget that libmodsecurity must be installed to a location (folder) where you OS will be looking for dynamic libraries.&lt;/p&gt; &#xA;&lt;h3&gt;Unix (Linux, MacOS, FreeBSD, …)&lt;/h3&gt; &#xA;&lt;p&gt;On unix the project uses autotools to help the compilation process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./build.sh&#xA;$ ./configure&#xA;$ make&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Details on distribution specific builds can be found in our Wiki: &lt;a href=&#34;https://github.com/SpiderLabs/ModSecurity/wiki/Compilation-recipes&#34;&gt;Compilation Recipes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Windows build is not ready yet.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;This library is written in C++ using the C++11 standards. It also uses Flex and Yacc to produce the “Sec Rules Language” parser. Other, mandatory dependencies include YAJL, as ModSecurity uses JSON for producing logs and its testing framework, libpcre (not yet mandatory) for processing regular expressions in SecRules, and libXML2 (not yet mandatory) which is used for parsing XML requests.&lt;/p&gt; &#xA;&lt;p&gt;All others dependencies are related to operators specified within SecRules or configuration directives and may not be required for compilation. A short list of such dependencies is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libinjection is needed for the operator @detectXSS and @detectSQL&lt;/li&gt; &#xA; &lt;li&gt;curl is needed for the directive SecRemoteRules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If those libraries are missing ModSecurity will be compiled without the support for the operator @detectXSS and the configuration directive SecRemoteRules.&lt;/p&gt; &#xA;&lt;h1&gt;Library documentation&lt;/h1&gt; &#xA;&lt;p&gt;The library documentation is written within the code in Doxygen format. To generate this documentation, please use the doxygen utility with the provided configuration file, “doxygen.cfg”, located with the &#34;doc/&#34; subfolder. This will generate HTML formatted documentation including usage examples.&lt;/p&gt; &#xA;&lt;h1&gt;Library utilization&lt;/h1&gt; &#xA;&lt;p&gt;The library provides a C++ and C interface. Some resources are currently only available via the C++ interface, for instance, the capability to create custom logging mechanism (see the regression test to check for how those logging mechanism works). The objective is to have both APIs (C, C++) providing the same functionality, if you find an aspect of the API that is missing via a particular interface, please open an issue.&lt;/p&gt; &#xA;&lt;p&gt;Inside the subfolder examples, there are simple examples on how to use the API. Below some are illustrated:&lt;/p&gt; &#xA;&lt;h3&gt;Simple example using C++&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;using ModSecurity::ModSecurity;&#xA;using ModSecurity::Rules;&#xA;using ModSecurity::Transaction;&#xA;&#xA;ModSecurity *modsec;&#xA;ModSecurity::Rules *rules;&#xA;&#xA;modsec = new ModSecurity();&#xA;&#xA;rules = new Rules();&#xA;&#xA;rules-&amp;gt;loadFromUri(rules_file);&#xA;&#xA;Transaction *modsecTransaction = new Transaction(modsec, rules);&#xA;&#xA;modsecTransaction-&amp;gt;processConnection(&#34;127.0.0.1&#34;);&#xA;if (modsecTransaction-&amp;gt;intervention()) {&#xA;   std::cout &amp;lt;&amp;lt; &#34;There is an intervention&#34; &amp;lt;&amp;lt; std::endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Simple example using C&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;modsecurity/modsecurity.h&#34;&#xA;#include &#34;modsecurity/transaction.h&#34;&#xA;&#xA;&#xA;char main_rule_uri[] = &#34;basic_rules.conf&#34;;&#xA;&#xA;int main (int argc, char **argv)&#xA;{&#xA;    ModSecurity *modsec = NULL;&#xA;    Transaction *transaction = NULL;&#xA;    Rules *rules = NULL;&#xA;&#xA;    modsec = msc_init();&#xA;&#xA;    rules = msc_create_rules_set();&#xA;    msc_rules_add_file(rules, main_rule_uri);&#xA;&#xA;    transaction = msc_new_transaction(modsec, rules);&#xA;&#xA;    msc_process_connection(transaction, &#34;127.0.0.1&#34;);&#xA;    msc_process_uri(transaction, &#34;http://www.modsecurity.org/test?key1=value1&amp;amp;key2=value2&amp;amp;key3=value3&amp;amp;test=args&amp;amp;test=test&#34;);&#xA;    msc_process_request_headers(transaction);&#xA;    msc_process_request_body(transaction);&#xA;    msc_process_response_headers(transaction);&#xA;    msc_process_response_body(transaction);&#xA;&#xA;    return 0;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;You are more than welcome to contribute to this project and look forward to growing the community around this new version of ModSecurity. Areas of interest include: New functionalities, fixes, bug report, support for beginning users, or anything that you are willing to help with.&lt;/p&gt; &#xA;&lt;h2&gt;Providing patches&lt;/h2&gt; &#xA;&lt;p&gt;We prefer to have your patch within the GitHub infrastructure to facilitate our review work, and our Q.A. integration. GitHub provides excellent documentation on how to perform “Pull Requests”, more information available here: &lt;a href=&#34;https://help.github.com/articles/using-pull-requests/&#34;&gt;https://help.github.com/articles/using-pull-requests/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please respect the coding style. Pull requests can include various commits, so provide one fix or one piece of functionality per commit. Please do not change anything outside the scope of your target work (e.g. coding style in a function that you have passed by). For further information about the coding style used in this project, please check: &lt;a href=&#34;https://www.chromium.org/blink/coding-style&#34;&gt;https://www.chromium.org/blink/coding-style&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Provides explanative commit messages. Your first line should give the highlights of your patch, 3rd and on give a more detailed explanation/technical details about your patch. Patch explanation is valuable during the review process.&lt;/p&gt; &#xA;&lt;h3&gt;Don’t know where to start?&lt;/h3&gt; &#xA;&lt;p&gt;Within our code there are various items marked as TODO or FIXME that may need your attention. Check the list of items by performing a grep:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd /path/to/modsecurity-nginx&#xA;$ egrep -Rin &#34;TODO|FIXME&#34; -R *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A TODO list is also available as part of the Doxygen documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Testing your patch&lt;/h3&gt; &#xA;&lt;p&gt;Along with the manual testing, we strongly recommend you to use the our regression tests and unit tests. If you have implemented an operator, don’t forget to create unit tests for it. If you implement anything else, it is encouraged that you develop complimentary regression tests for it.&lt;/p&gt; &#xA;&lt;p&gt;The regression test and unit test utilities are native and do not demand any external tool or script, although you need to fetch the test cases from other repositories, as they are shared with other versions of ModSecurity, those others repositories git submodules. To fetch the submodules repository and run the utilities, follow the commands listed below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd /path/to/your/ModSecurity&#xA;$ git submodule foreach git pull&#xA;$ cd test&#xA;$ ./regression-tests&#xA;$ ./unit-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;Before start the debugging process, make sure of where your bug is. The problem could be on your connector or in libmodsecurity. In order to identify where the bug is, it is recommended that you develop a regression test that mimics the scenario where the bug is happening. If the bug is reproducible with the regression-test utility, then it will be far simpler to debug and ensure that it never occurs again. On Linux it is recommended that anyone undertaking debugging utilize gdb and/or valgrind as needed.&lt;/p&gt; &#xA;&lt;p&gt;During the configuration/compilation time, you may want to disable the compiler optimization making your “back traces” populated with readable data. Use the CFLAGS to disable the compilation optimization parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export CFLAGS=&#34;-g -O0&#34;&#xA;$ ./build.sh&#xA;$ ./configure&#xA;$ make&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you are facing a configuration issue or something is not working as you expected to be, please use the ModSecurity user’s mailing list. Issues on GitHub are also welcomed, but we prefer to have user ask questions on the mailing list first so that you can reach an entire community. Also don’t forget to look for existing issues before open a new one.&lt;/p&gt; &#xA;&lt;p&gt;If you are going to open a new issue on GitHub, don’t forget to tell us the version of your libmodsecurity and the version of a specific connector if there is one.&lt;/p&gt; &#xA;&lt;h3&gt;Security issue&lt;/h3&gt; &#xA;&lt;p&gt;Please do not make public any security issue. Contact us at: &lt;a href=&#34;mailto:security@modsecurity.org&#34;&gt;security@modsecurity.org&lt;/a&gt; reporting the issue. Once the problem is fixed your credit will be given.&lt;/p&gt; &#xA;&lt;h2&gt;Feature request&lt;/h2&gt; &#xA;&lt;p&gt;We are open to discussing any new feature request with the community via the mailing lists. You can alternativly, feel free to open GitHub issues requesting new features. Before opening a new issue, please check if there is one already opened on the same topic.&lt;/p&gt; &#xA;&lt;h2&gt;Bindings&lt;/h2&gt; &#xA;&lt;p&gt;The libModSecurity design allows the integration with bindings. There is an effort to avoid breaking API [binary] compatibility to make an easy integration with possible bindings. Currently, there are two notable projects maintained by the community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python - &lt;a href=&#34;https://github.com/actions-security/pymodsecurity&#34;&gt;https://github.com/actions-security/pymodsecurity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Varnish - &lt;a href=&#34;https://github.com/xdecock/vmod-modsecurity&#34;&gt;https://github.com/xdecock/vmod-modsecurity&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Packaging&lt;/h2&gt; &#xA;&lt;p&gt;Having our packages in distros on time is a desire that we have, so let us know if there is anything we can do to facilitate your work as a packager.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsor Note&lt;/h2&gt; &#xA;&lt;p&gt;Development of ModSecurity is sponsored by Trustwave. Sponsorship will end July 1, 2024. Additional information can be found here &lt;a href=&#34;https://www.trustwave.com/en-us/resources/security-resources/software-updates/end-of-sale-and-trustwave-support-for-modsecurity-web-application-firewall/&#34;&gt;https://www.trustwave.com/en-us/resources/security-resources/software-updates/end-of-sale-and-trustwave-support-for-modsecurity-web-application-firewall/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>neutralinojs/neutralinojs</title>
    <updated>2022-06-02T02:01:02Z</updated>
    <id>tag:github.com,2022-06-02:/neutralinojs/neutralinojs</id>
    <link href="https://github.com/neutralinojs/neutralinojs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Portable and lightweight cross-platform desktop application development framework&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://cdn.rawgit.com/neutralinojs/neutralinojs.github.io/b667f2c2/docs/nllogo.png&#34; style=&#34;width:300px;&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neutralinojs/neutralinojs/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/neutralinojs/neutralinojs&#34; alt=&#34;GitHub release (latest by date)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/neutralinojs/neutralinojs/commits/main&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/neutralinojs/neutralinojs.svg?sanitize=true&#34; alt=&#34;GitHub last commit&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/neutralinojs/neutralinojs/actions/workflows/test_suite.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt; &lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fneutralinojs%2Fneutralinojs?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fneutralinojs%2Fneutralinojs.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Neutralinojs is a lightweight and portable desktop application development framework. It lets you develop lightweight cross-platform desktop applications using JavaScript, HTML and CSS. Apps built with Neutralinojs can run on Linux, macOS, Windows, Web, and Chrome. Also, you can extend Neutralinojs with any programming language (via extensions IPC) and use Neutralinojs as a part of any source file (via child processes IPC).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Elanis/web-to-desktop-framework-comparison&#34;&gt;Neutralinojs vs Electron vs NW.JS vs Tauri vs NodeGui vs Flutter vs .Net MAUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neutralinojs/evaluation&#34;&gt;Neutralinojs vs Electron vs NW.js (2018)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neutralinojs/roadmap#roadmap-2022&#34;&gt;Roadmap for 2022&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Get started with the neu CLI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; # Creating a new app&#xA; npm i -g @neutralinojs/neu&#xA; neu create hello-world&#xA; cd hello-world&#xA; neu run&#xA; &#xA; # Building your app (No compilation - takes less than a second)&#xA; neu build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start building apps: &lt;a href=&#34;https://neutralino.js.org/docs&#34;&gt;neutralino.js.org/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why Neutralinojs?&lt;/h2&gt; &#xA;&lt;p&gt;In Electron and NWjs, you have to install NodeJs and hundreds of dependency libraries. Embedded Chromium and Node make simple apps bloaty. Neutralinojs offers a lightweight and portable SDK which is an alternative for Electron and NW.js. Neutralinojs doesn&#39;t bundle Chromium and uses the existing web browser library in the operating system (Eg: gtk-webkit2 on Linux). Neutralinojs implements a WebSocket connection for native operations and embeds a static web server to serve the web content. Also, it offers a built-in &lt;a href=&#34;https://github.com/neutralinojs/neutralino.js&#34;&gt;JavaScript client library&lt;/a&gt; for developers.&lt;/p&gt; &#xA;&lt;p&gt;Ask questions on StackOverflow using tag &lt;a href=&#34;https://stackoverflow.com/questions/tagged/neutralinojs&#34;&gt;neutralinojs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;https://neutralino.js.org/docs/contributing/framework-developer-guide&#34;&gt;contribution guide&lt;/a&gt;. We use GitHub Discussions, Slack, and Discord for quick discussions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/cybpp4guTJ&#34;&gt;Join on Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neutralinojs/neutralinojs/discussions&#34;&gt;Start a thread on Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/neutralinojs/shared_invite/zt-b7mbivj5-pKpO6U5drmeT68vKD_pc6w&#34;&gt;Join on Slack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Neutralinojs contributors:&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/neutralinojs/neutralinojs/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.firebaseapp.com/image?repo=neutralinojs/neutralinojs&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Image created with &lt;a href=&#34;https://contributors-img.firebaseapp.com&#34;&gt;contributors-img&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Subprojects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Builds are powered by &lt;a href=&#34;https://codezri.org/docs/buildzri/intro&#34;&gt;BuildZri&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Releases are powered by &lt;a href=&#34;https://codezri.org/docs/releasezri/intro&#34;&gt;ReleaseZri&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors and Donators&lt;/h2&gt; &#xA;&lt;p&gt;Organizations and individuals support Neutralinojs development. See: &lt;a href=&#34;https://codezri.org/sponsors&#34;&gt;https://codezri.org/sponsors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you like to support our work, you can donate to Neutralinojs via &lt;a href=&#34;https://www.patreon.com/shalithasuranga&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/shalithasuranga&#34;&gt;&lt;img src=&#34;https://c5.patreon.com/external/logo/become_a_patron_button.png&#34; alt=&#34;Become a Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licenses and Copyrights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neutralinojs core: MIT. Copyright (c) 2021 Neutralinojs and contributors.&lt;/li&gt; &#xA; &lt;li&gt;C++ websocket client/server library: BSD-3-Clause from &lt;a href=&#34;https://github.com/zaphoyd/websocketpp&#34;&gt;zaphoyd/websocketpp&lt;/a&gt;. Copyright (c) 2014, Peter Thorson. All rights reserved.&lt;/li&gt; &#xA; &lt;li&gt;JSON parser library: MIT from &lt;a href=&#34;https://github.com/nlohmann/json&#34;&gt;nlohmann/json&lt;/a&gt;. Copyright (c) 2013-2021 Niels Lohmann.&lt;/li&gt; &#xA; &lt;li&gt;Cross-platform webview library: MIT from &lt;a href=&#34;https://github.com/webview/webview&#34;&gt;webview/webview&lt;/a&gt;. Copyright (c) 2017 Serge Zaitsev.&lt;/li&gt; &#xA; &lt;li&gt;Cross-platform tray library: MIT from &lt;a href=&#34;https://github.com/zserge/tray&#34;&gt;zserge/tray&lt;/a&gt;. Copyright (c) 2017 Serge Zaitsev.&lt;/li&gt; &#xA; &lt;li&gt;Cross-platform GUI dialogs library: WTFPL from &lt;a href=&#34;https://github.com/samhocevar/portable-file-dialogs&#34;&gt;samhocevar/portable-file-dialogs&lt;/a&gt;. Copyright (c) 2018—2020 Sam Hocevar &lt;a href=&#34;mailto:sam@hocevar.net&#34;&gt;sam@hocevar.net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Base64 encoder/decoder library: MIT from &lt;a href=&#34;https://github.com/tobiaslocker/base64&#34;&gt;tobiaslocker/base64&lt;/a&gt;. Copyright (c) 2019 Tobias Locker.&lt;/li&gt; &#xA; &lt;li&gt;Cross-platform known platform directories API: MIT from &lt;a href=&#34;https://github.com/sago007/PlatformFolders&#34;&gt;sago007/PlatformFolders&lt;/a&gt;. Copyright (c) 2015 Poul Sander.&lt;/li&gt; &#xA; &lt;li&gt;C++ logging library: MIT from &lt;a href=&#34;https://github.com/amrayn/easyloggingpp&#34;&gt;amrayn/easyloggingpp&lt;/a&gt;. Copyright (c) 2012-2018 Amrayn Web Services. Copyright (c) 2012-2018 @abumusamq&lt;/li&gt; &#xA; &lt;li&gt;Cross-platform process library: MIT from &lt;a href=&#34;https://gitlab.com/eidheim/tiny-process-library&#34;&gt;eidheim/tiny-process-library&lt;/a&gt;. Copyright (c) 2015-2020 Ole Christian Eidheim.&lt;/li&gt; &#xA; &lt;li&gt;Asio standalone C++ library: &lt;a href=&#34;https://www.boost.org/LICENSE_1_0.txt&#34;&gt;Boost License v1.0&lt;/a&gt; from &lt;a href=&#34;https://github.com/chriskohlhoff/asio&#34;&gt;chriskohlhoff/asio&lt;/a&gt;. Copyright (c) 2003-2021 Christopher M. Kohlhoff (chris at kohlhoff dot com)&lt;/li&gt; &#xA; &lt;li&gt;Cross-platform C++ clipboard library: MIT from &lt;a href=&#34;https://github.com/dacap/clip&#34;&gt;dacap/clip&lt;/a&gt;. Copyright (c) 2015-2021 David Capello&lt;/li&gt; &#xA; &lt;li&gt;Logo design credits: &lt;a href=&#34;https://www.iconspng.com/image/2688/atom-orange&#34;&gt;IconsPng&lt;/a&gt;. Copyright free as mentioned in their website.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/neutralinojs/neutralinojs/main/LICENSE&#34;&gt;Complete license details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fneutralinojs%2Fneutralinojs?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fneutralinojs%2Fneutralinojs.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>