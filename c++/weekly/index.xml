<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-18T01:44:25Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>taichi-dev/taichi</title>
    <updated>2022-09-18T01:44:25Z</updated>
    <id>tag:github.com,2022-09-18:/taichi-dev/taichi</id>
    <link href="https://github.com/taichi-dev/taichi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Productive &amp; portable high-performance programming in Python.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;500px&#34; src=&#34;https://github.com/taichi-dev/taichi/raw/master/misc/logo.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichi/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/taichi-dev/taichi?color=blue&amp;amp;label=Latest%20Release&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/taichi&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/taichi&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/taichi-dev/taichi/actions/workflows/testing.yml&#34;&gt;&lt;img src=&#34;https://github.com/taichi-dev/taichi/actions/workflows/testing.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/taichi-dev/taichi/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/taichi-dev/taichi/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;Nightly Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/taichicommunity/shared_invite/zt-14ic8j6no-Fd~wKNpfskXLfqDr58Tddg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/join-us%20on%20slack-gray.svg?longCache=true&amp;amp;logo=slack&amp;amp;colorB=red&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install taichi  # Install Taichi Lang&#xA;ti gallery          # Launch demo gallery&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What is Taichi Lang?&lt;/h2&gt; &#xA;&lt;p&gt;Taichi Lang is an open-source, imperative, parallel programming language for high-performance numerical computation. It is embedded in Python and uses just-in-time (JIT) compiler frameworks, for example LLVM, to offload the compute-intensive Python code to the native GPU or CPU instructions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichi/raw/master/python/taichi/examples/simulation/fractal.py#L1-L31&#34;&gt; &lt;img src=&#34;https://github.com/taichi-dev/public_files/raw/master/taichi/fractal_code.png&#34; height=&#34;270px&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/fractal_small.gif&#34; height=&#34;270px&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The language has broad applications spanning real-time physical simulation, numerical computation, augmented reality, artificial intelligence, vision and robotics, visual effects in films and games, general-purpose computing, and much more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichi/raw/master/python/taichi/examples/simulation/mpm128.py&#34;&gt;&lt;img src=&#34;https://github.com/taichi-dev/public_files/raw/master/taichi/mpm128.gif&#34; height=&#34;192px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/taichi-dev/quantaichi&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/smoke_3d.gif&#34; height=&#34;192px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/taichi-dev/taichi/raw/master/python/taichi/examples/rendering/sdf_renderer.py&#34;&gt;&lt;img src=&#34;https://github.com/taichi-dev/public_files/raw/master/taichi/sdf_renderer.jpg&#34; height=&#34;192px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/taichi-dev/taichi/raw/master/python/taichi/examples/simulation/euler.py&#34;&gt;&lt;img src=&#34;https://github.com/taichi-dev/public_files/raw/master/taichi/euler.gif&#34; height=&#34;192px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/taichi-dev/quantaichi&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/elastic_letters.gif&#34; height=&#34;213px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/taichi-dev/quantaichi&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/fluid_with_bunnies.gif&#34; height=&#34;213px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/taichi-dev/taichi/master/#demos&#34;&gt;...More&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why Taichi Lang?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built around Python: Taichi Lang shares almost the same syntax with Python, allowing you to write algorithms with minimal language barrier. It is also well integrated into the Python ecosystem, including NumPy and PyTorch.&lt;/li&gt; &#xA; &lt;li&gt;Flexibility: Taichi Lang provides a set of generic data containers known as &lt;em&gt;SNode&lt;/em&gt; (/ˈsnoʊd/), an effective mechanism for composing hierarchical, multi-dimensional fields. This can cover many use patterns in numerical simulation (e.g. &lt;a href=&#34;https://docs.taichi-lang.org/docs/sparse&#34;&gt;spatially sparse computing&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Performance: With the &lt;code&gt;@ti.kernel&lt;/code&gt; decorator, Taichi Lang&#39;s JIT compiler automatically compiles your Python functions into efficient GPU or CPU machine code for parallel execution.&lt;/li&gt; &#xA; &lt;li&gt;Portability: Write your code once and run it everywhere. Currently, Taichi Lang supports most mainstream GPU APIs, such as CUDA and Vulkan.&lt;/li&gt; &#xA; &lt;li&gt;... and many more features! A cross-platform, Vulkan-based 3D visualizer, &lt;a href=&#34;https://docs.taichi-lang.org/docs/differentiable_programming&#34;&gt;differentiable programming&lt;/a&gt;, &lt;a href=&#34;https://github.com/taichi-dev/quantaichi&#34;&gt;quantized computation&lt;/a&gt; (experimental), etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Prerequisites&lt;/summary&gt; &#xA; &lt;!--TODO: Precise OS versions--&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Operating systems &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Windows&lt;/li&gt; &#xA;    &lt;li&gt;Linux&lt;/li&gt; &#xA;    &lt;li&gt;macOS&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Python: 3.6 ~ 3.10 (64-bit only)&lt;/li&gt; &#xA;  &lt;li&gt;Compute backends &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;x64/ARM CPUs&lt;/li&gt; &#xA;    &lt;li&gt;CUDA&lt;/li&gt; &#xA;    &lt;li&gt;Vulkan&lt;/li&gt; &#xA;    &lt;li&gt;OpenGL (4.3+)&lt;/li&gt; &#xA;    &lt;li&gt;Apple Metal&lt;/li&gt; &#xA;    &lt;li&gt;WebAssembly (experiemental)&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Use Python&#39;s package installer &lt;strong&gt;pip&lt;/strong&gt; to install Taichi Lang:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install --upgrade taichi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;We also provide a nightly package. Note that nightly packages may crash because they are not fully tested. We cannot guarantee their validity, and you are at your own risk trying out our latest, untested features. The nightly packages can be installed from our self-hosted PyPI (Using self-hosted PyPI allows us to provide more frequent releases over a longer period of time)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -i https://pypi.taichi.graphics/simple/ taichi-nightly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run your &#34;Hello, world!&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Here is how you can program a 2D fractal in Taichi:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# python/taichi/examples/simulation/fractal.py&#xA;&#xA;import taichi as ti&#xA;&#xA;ti.init(arch=ti.gpu)&#xA;&#xA;n = 320&#xA;pixels = ti.field(dtype=float, shape=(n * 2, n))&#xA;&#xA;&#xA;@ti.func&#xA;def complex_sqr(z):&#xA;    return ti.Vector([z[0]**2 - z[1]**2, z[1] * z[0] * 2])&#xA;&#xA;&#xA;@ti.kernel&#xA;def paint(t: float):&#xA;    for i, j in pixels:  # Parallelized over all pixels&#xA;        c = ti.Vector([-0.8, ti.cos(t) * 0.2])&#xA;        z = ti.Vector([i / n - 1, j / n - 0.5]) * 2&#xA;        iterations = 0&#xA;        while z.norm() &amp;lt; 20 and iterations &amp;lt; 50:&#xA;            z = complex_sqr(z) + c&#xA;            iterations += 1&#xA;        pixels[i, j] = 1 - iterations * 0.02&#xA;&#xA;&#xA;gui = ti.GUI(&#34;Julia Set&#34;, res=(n * 2, n))&#xA;&#xA;for i in range(1000000):&#xA;    paint(i * 0.03)&#xA;    gui.set_image(pixels)&#xA;    gui.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;If Taichi Lang is properly installed, you should get the animation below 🎉:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichi/raw/master/python/taichi/examples/simulation/fractal.py#L1-L31&#34;&gt; &lt;/a&gt;&lt;img src=&#34;https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/fractal_small.gif&#34; height=&#34;270px&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.taichi-lang.org&#34;&gt;Get started&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to try our our experimental features or build Taichi Lang for your own environments, see &lt;a href=&#34;https://docs.taichi-lang.org/docs/dev_install&#34;&gt;Developer installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.taichi-lang.org/&#34;&gt;Technical documents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.taichi-lang.org/api/&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.taichi-lang.org/blog&#34;&gt;Blog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Kudos to all of our amazing contributors! Taichi Lang thrives through open-source. In that spirit, we welcome all kinds of contributions from the community. If you would like to participate, check out the &lt;a href=&#34;https://raw.githubusercontent.com/taichi-dev/taichi/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichi/graphs/contributors&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/contributors_taichi-dev_taichi_12.png&#34; width=&#34;800px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Contributor avatars are randomly shuffled.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Taichi Lang is distributed under the terms of Apache License (Version 2.0).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/taichi-dev/taichi/raw/master/LICENSE&#34;&gt;Apache License&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;h3&gt;Event&lt;/h3&gt; &#xA;&lt;p&gt;Voxel Challenge 2022 is open for &lt;a href=&#34;https://github.com/taichi-dev/voxel-challenge/issues/11&#34;&gt;submissions&lt;/a&gt; until 18th May. Find out more &lt;a href=&#34;https://github.com/taichi-dev/community/tree/main/events/voxel-challenge&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Join our discussions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/taichicommunity/shared_invite/zt-14ic8j6no-Fd~wKNpfskXLfqDr58Tddg&#34;&gt;Slack Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichi/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.taichi.graphics/&#34;&gt;太极编程语言中文论坛&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Report an issue&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you spot an technical or documentation issue, file an issue at &lt;a href=&#34;https://github.com/taichi-dev/taichi/issues&#34;&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you spot any security issue, mail directly to &lt;a href=&#34;mailto:security@taichi.graphics?subject = Taichi Security Problem&#34;&gt;&lt;/a&gt;&lt;a href=&#34;mailto:security@taichi.graphics&#34;&gt;security@taichi.graphics&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contact us&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://taichicommunity.slack.com/join/shared_invite/zt-14ic8j6no-Fd~wKNpfskXLfqDr58Tddg#/shared-invite/email&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WeChat: Drop us a message at &lt;a href=&#34;mailto:community@taichi.graphics&#34;&gt;&lt;/a&gt;&lt;a href=&#34;mailto:community@taichi.graphics&#34;&gt;community@taichi.graphics&lt;/a&gt; first, and we&#39;ll follow up.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;h3&gt;Demos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichi/tree/master/python/taichi/examples&#34;&gt;Taichi Lang examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taichi-dev/advanced_examples&#34;&gt;Advanced Taichi Lang examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taichi-dev/awesome-taichi&#34;&gt;Awesome Taichi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taichi-dev/difftaichi&#34;&gt;DiffTaichi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichi_elements&#34;&gt;Taichi elements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichi_houdini&#34;&gt;Taichi Houdini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/taichi-dev/taichi/master/misc/links.md&#34;&gt;More...&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Lectures &amp;amp; talks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SIGGRAPH 2020 course on Taichi basics: &lt;a href=&#34;https://youtu.be/Y0-76n3aZFA&#34;&gt;YouTube&lt;/a&gt;, &lt;a href=&#34;https://www.bilibili.com/video/BV1kA411n7jk/&#34;&gt;Bilibili&lt;/a&gt;, &lt;a href=&#34;https://yuanming.taichi.graphics/publication/2020-taichi-tutorial/taichi-tutorial.pdf&#34;&gt;slides (pdf)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Chinagraph 2020 用太极编写物理引擎: &lt;a href=&#34;https://www.bilibili.com/video/BV1gA411j7H5&#34;&gt;哔哩哔哩&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GAMES 201 高级物理引擎实战指南 2020: &lt;a href=&#34;https://github.com/taichi-dev/games201&#34;&gt;课件&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;太极图形课第一季：&lt;a href=&#34;https://github.com/taichiCourse01&#34;&gt;课件&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichicon&#34;&gt;TaichiCon&lt;/a&gt;: Taichi Developer Conferences&lt;/li&gt; &#xA; &lt;li&gt;More to come...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Citations&lt;/h3&gt; &#xA;&lt;p&gt;If you use Taichi Lang in your research, please cite the corresponding papers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yuanming.taichi.graphics/publication/2019-taichi/taichi-lang.pdf&#34;&gt;&lt;strong&gt;(SIGGRAPH Asia 2019) Taichi: High-Performance Computation on Sparse Data Structures&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://youtu.be/wKw8LMF3Djo&#34;&gt;[Video]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/taichi-dev/taichi/master/misc/taichi_bibtex.txt&#34;&gt;[BibTex]&lt;/a&gt; &lt;a href=&#34;https://github.com/taichi-dev/taichi&#34;&gt;[Code]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/1910.00935&#34;&gt;&lt;strong&gt;(ICLR 2020) DiffTaichi: Differentiable Programming for Physical Simulation&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=Z1xvAZve9aE&#34;&gt;[Video]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/taichi-dev/taichi/master/misc/difftaichi_bibtex.txt&#34;&gt;[BibTex]&lt;/a&gt; &lt;a href=&#34;https://github.com/yuanming-hu/difftaichi&#34;&gt;[Code]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yuanming.taichi.graphics/publication/2021-quantaichi/quantaichi.pdf&#34;&gt;&lt;strong&gt;(SIGGRAPH 2021) QuanTaichi: A Compiler for Quantized Simulations&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=0jdrAQOxJlY&#34;&gt;[Video]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/taichi-dev/taichi/master/misc/quantaichi_bibtex.txt&#34;&gt;[BibTex]&lt;/a&gt; &lt;a href=&#34;https://github.com/taichi-dev/quantaichi&#34;&gt;[Code]&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>protocolbuffers/protobuf</title>
    <updated>2022-09-18T01:44:25Z</updated>
    <id>tag:github.com,2022-09-18:/protocolbuffers/protobuf</id>
    <link href="https://github.com/protocolbuffers/protobuf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Protocol Buffers - Google&#39;s data interchange format&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Protocol Buffers - Google&#39;s data interchange format&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2008 Google Inc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;https://developers.google.com/protocol-buffers/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Protocol Buffers (a.k.a., protobuf) are Google&#39;s language-neutral, platform-neutral, extensible mechanism for serializing structured data. You can find &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;protobuf&#39;s documentation on the Google Developers site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This README file contains protobuf installation instructions. To install protobuf, you need to install the protocol compiler (used to compile .proto files) and the protobuf runtime for your chosen programming language.&lt;/p&gt; &#xA;&lt;h2&gt;Protocol Compiler Installation&lt;/h2&gt; &#xA;&lt;p&gt;The protocol compiler is written in C++. If you are using C++, please follow the &lt;a href=&#34;https://raw.githubusercontent.com/protocolbuffers/protobuf/main/src/README.md&#34;&gt;C++ Installation Instructions&lt;/a&gt; to install protoc along with the C++ runtime.&lt;/p&gt; &#xA;&lt;p&gt;For non-C++ users, the simplest way to install the protocol compiler is to download a pre-built binary from our release page:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf/releases&#34;&gt;https://github.com/protocolbuffers/protobuf/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the downloads section of each release, you can find pre-built binaries in zip packages: protoc-$VERSION-$PLATFORM.zip. It contains the protoc binary as well as a set of standard .proto files distributed along with protobuf.&lt;/p&gt; &#xA;&lt;p&gt;If you are looking for an old version that is not available in the release page, check out the maven repo here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/com/google/protobuf/protoc/&#34;&gt;https://repo1.maven.org/maven2/com/google/protobuf/protoc/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;These pre-built binaries are only provided for released versions. If you want to use the github main version at HEAD, or you need to modify protobuf code, or you are using C++, it&#39;s recommended to build your own protoc binary from source.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to build protoc binary from source, see the &lt;a href=&#34;https://raw.githubusercontent.com/protocolbuffers/protobuf/main/src/README.md&#34;&gt;C++ Installation Instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Protobuf Runtime Installation&lt;/h2&gt; &#xA;&lt;p&gt;Protobuf supports several different programming languages. For each programming language, you can find instructions in the corresponding source directory about how to install protobuf runtime for that specific language:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Source&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++ (include C++ runtime and protoc)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protocolbuffers/protobuf/main/src&#34;&gt;src&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protocolbuffers/protobuf/main/java&#34;&gt;java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protocolbuffers/protobuf/main/python&#34;&gt;python&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Objective-C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protocolbuffers/protobuf/main/objectivec&#34;&gt;objectivec&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protocolbuffers/protobuf/main/csharp&#34;&gt;csharp&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protocolbuffers/protobuf/main/ruby&#34;&gt;ruby&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf-go&#34;&gt;protocolbuffers/protobuf-go&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protocolbuffers/protobuf/main/php&#34;&gt;php&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dart&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dart-lang/protobuf&#34;&gt;dart-lang/protobuf&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Javascript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf-javascript&#34;&gt;protocolbuffers/protobuf-javascript&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The best way to learn how to use protobuf is to follow the tutorials in our developer guide:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/tutorials&#34;&gt;https://developers.google.com/protocol-buffers/docs/tutorials&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to learn from code examples, take a look at the examples in the &lt;a href=&#34;https://raw.githubusercontent.com/protocolbuffers/protobuf/main/examples&#34;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The complete documentation for Protocol Buffers is available via the web at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;https://developers.google.com/protocol-buffers/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developer Community&lt;/h2&gt; &#xA;&lt;p&gt;To be alerted to upcoming changes in Protocol Buffers and connect with protobuf developers and users, &lt;a href=&#34;https://groups.google.com/g/protobuf&#34;&gt;join the Google Group&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/terminal</title>
    <updated>2022-09-18T01:44:25Z</updated>
    <id>tag:github.com,2022-09-18:/microsoft/terminal</id>
    <link href="https://github.com/microsoft/terminal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The new Windows Terminal and the original Windows console host, all in the same place!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/48369326/115790869-4c852b00-a37c-11eb-97f1-f61972c7800c.png&#34; alt=&#34;terminal-logos&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Welcome to the Windows Terminal, Console and Command-Line repo&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the source code for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/terminal&#34;&gt;Windows Terminal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/terminal-preview&#34;&gt;Windows Terminal Preview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The Windows console host (&lt;code&gt;conhost.exe&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Components shared between the two projects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/tree/main/src/tools/ColorTool&#34;&gt;ColorTool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/tree/main/samples&#34;&gt;Sample projects&lt;/a&gt; that show how to consume the Windows Console APIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Related repositories include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/windows/terminal&#34;&gt;Windows Terminal Documentation&lt;/a&gt; (&lt;a href=&#34;https://github.com/MicrosoftDocs/terminal&#34;&gt;Repo: Contribute to the docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MicrosoftDocs/Console-Docs&#34;&gt;Console API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/Cascadia-Code&#34;&gt;Cascadia Code Font&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing and running Windows Terminal&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Windows Terminal requires Windows 10 2004 (build 19041) or later&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Microsoft Store [Recommended]&lt;/h3&gt; &#xA;&lt;p&gt;Install the &lt;a href=&#34;https://aka.ms/terminal&#34;&gt;Windows Terminal from the Microsoft Store&lt;/a&gt;. This allows you to always be on the latest version when we release new builds with automatic upgrades.&lt;/p&gt; &#xA;&lt;p&gt;This is our preferred method.&lt;/p&gt; &#xA;&lt;h3&gt;Other install methods&lt;/h3&gt; &#xA;&lt;h4&gt;Via GitHub&lt;/h4&gt; &#xA;&lt;p&gt;For users who are unable to install Windows Terminal from the Microsoft Store, released builds can be manually downloaded from this repository&#39;s &lt;a href=&#34;https://github.com/microsoft/terminal/releases&#34;&gt;Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Download the &lt;code&gt;Microsoft.WindowsTerminal_&amp;lt;versionNumber&amp;gt;.msixbundle&lt;/code&gt; file from the &lt;strong&gt;Assets&lt;/strong&gt; section. To install the app, you can simply double-click on the &lt;code&gt;.msixbundle&lt;/code&gt; file, and the app installer should automatically run. If that fails for any reason, you can try the following command at a PowerShell prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# NOTE: If you are using PowerShell 7+, please run&#xA;# Import-Module Appx -UseWindowsPowerShell&#xA;# before using Add-AppxPackage.&#xA;&#xA;Add-AppxPackage Microsoft.WindowsTerminal_&amp;lt;versionNumber&amp;gt;.msixbundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you install Terminal manually:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;You may need to install the &lt;a href=&#34;https://docs.microsoft.com/troubleshoot/cpp/c-runtime-packages-desktop-bridge#how-to-install-and-update-desktop-framework-packages&#34;&gt;VC++ v14 Desktop Framework Package&lt;/a&gt;.&lt;br&gt; This should only be necessary on older builds of Windows 10 and only if you get an error about missing framework packages.&lt;/li&gt; &#xA;  &lt;li&gt;Terminal will not auto-update when new builds are released so you will need to regularly install the latest Terminal release to receive all the latest fixes and improvements!&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Via Windows Package Manager CLI (aka winget)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/winget-cli&#34;&gt;winget&lt;/a&gt; users can download and install the latest Terminal release by installing the &lt;code&gt;Microsoft.WindowsTerminal&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;winget install --id=Microsoft.WindowsTerminal -e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Via Chocolatey (unofficial)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt; users can download and install the latest Terminal release by installing the &lt;code&gt;microsoft-windows-terminal&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install microsoft-windows-terminal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To upgrade Windows Terminal using Chocolatey, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco upgrade microsoft-windows-terminal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have any issues when installing/upgrading the package please go to the &lt;a href=&#34;https://chocolatey.org/packages/microsoft-windows-terminal&#34;&gt;Windows Terminal package page&lt;/a&gt; and follow the &lt;a href=&#34;https://chocolatey.org/docs/package-triage-process&#34;&gt;Chocolatey triage process&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Via Scoop (unofficial)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scoop.sh&#34;&gt;Scoop&lt;/a&gt; users can download and install the latest Terminal release by installing the &lt;code&gt;windows-terminal&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;scoop bucket add extras&#xA;scoop install windows-terminal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update Windows Terminal using Scoop, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;scoop update windows-terminal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have any issues when installing/updating the package, please search for or report the same on the &lt;a href=&#34;https://github.com/lukesampson/scoop-extras/issues&#34;&gt;issues page&lt;/a&gt; of Scoop Extras bucket repository.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Windows Terminal Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;The plan for the Windows Terminal &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/terminal/main/doc/roadmap-2022.md&#34;&gt;is described here&lt;/a&gt; and will be updated as the project proceeds.&lt;/p&gt; &#xA;&lt;h2&gt;Project Build Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Build Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Terminal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/ms/terminal/_build?definitionId=136&#34;&gt;&lt;img src=&#34;https://dev.azure.com/ms/terminal/_apis/build/status/terminal%20CI?branchName=main&#34; alt=&#34;Terminal Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ColorTool&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://microsoft.visualstudio.com/_apis/public/build/definitions/c93e867a-8815-43c1-92c4-e7dd5404f1e1/17023/badge&#34; alt=&#34;Colortool Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Terminal &amp;amp; Console Overview&lt;/h2&gt; &#xA;&lt;p&gt;Please take a few minutes to review the overview below before diving into the code:&lt;/p&gt; &#xA;&lt;h3&gt;Windows Terminal&lt;/h3&gt; &#xA;&lt;p&gt;Windows Terminal is a new, modern, feature-rich, productive terminal application for command-line users. It includes many of the features most frequently requested by the Windows command-line community including support for tabs, rich text, globalization, configurability, theming &amp;amp; styling, and more.&lt;/p&gt; &#xA;&lt;p&gt;The Terminal will also need to meet our goals and measures to ensure it remains fast and efficient, and doesn&#39;t consume vast amounts of memory or power.&lt;/p&gt; &#xA;&lt;h3&gt;The Windows Console Host&lt;/h3&gt; &#xA;&lt;p&gt;The Windows Console host, &lt;code&gt;conhost.exe&lt;/code&gt;, is Windows&#39; original command-line user experience. It also hosts Windows&#39; command-line infrastructure and the Windows Console API server, input engine, rendering engine, user preferences, etc. The console host code in this repository is the actual source from which the &lt;code&gt;conhost.exe&lt;/code&gt; in Windows itself is built.&lt;/p&gt; &#xA;&lt;p&gt;Since taking ownership of the Windows command-line in 2014, the team added several new features to the Console, including background transparency, line-based selection, support for &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code&#34;&gt;ANSI / Virtual Terminal sequences&lt;/a&gt;, &lt;a href=&#34;https://devblogs.microsoft.com/commandline/24-bit-color-in-the-windows-console/&#34;&gt;24-bit color&lt;/a&gt;, a &lt;a href=&#34;https://devblogs.microsoft.com/commandline/windows-command-line-introducing-the-windows-pseudo-console-conpty/&#34;&gt;Pseudoconsole (&#34;ConPTY&#34;)&lt;/a&gt;, and more.&lt;/p&gt; &#xA;&lt;p&gt;However, because Windows Console&#39;s primary goal is to maintain backward compatibility, we have been unable to add many of the features the community (and the team) have been wanting for the last several years including tabs, unicode text, and emoji.&lt;/p&gt; &#xA;&lt;p&gt;These limitations led us to create the new Windows Terminal.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can read more about the evolution of the command-line in general, and the Windows command-line specifically in &lt;a href=&#34;https://devblogs.microsoft.com/commandline/windows-command-line-backgrounder/&#34;&gt;this accompanying series of blog posts&lt;/a&gt; on the Command-Line team&#39;s blog.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Shared Components&lt;/h3&gt; &#xA;&lt;p&gt;While overhauling Windows Console, we modernized its codebase considerably, cleanly separating logical entities into modules and classes, introduced some key extensibility points, replaced several old, home-grown collections and containers with safer, more efficient &lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/standard-library/stl-containers?view=vs-2022&#34;&gt;STL containers&lt;/a&gt;, and made the code simpler and safer by using Microsoft&#39;s &lt;a href=&#34;https://github.com/Microsoft/wil&#34;&gt;Windows Implementation Libraries - WIL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This overhaul resulted in several of Console&#39;s key components being available for re-use in any terminal implementation on Windows. These components include a new DirectWrite-based text layout and rendering engine, a text buffer capable of storing both UTF-16 and UTF-8, a VT parser/emitter, and more.&lt;/p&gt; &#xA;&lt;h3&gt;Creating the new Windows Terminal&lt;/h3&gt; &#xA;&lt;p&gt;When we started planning the new Windows Terminal application, we explored and evaluated several approaches and technology stacks. We ultimately decided that our goals would be best met by continuing our investment in our C++ codebase, which would allow us to reuse several of the aforementioned modernized components in both the existing Console and the new Terminal. Further, we realized that this would allow us to build much of the Terminal&#39;s core itself as a reusable UI control that others can incorporate into their own applications.&lt;/p&gt; &#xA;&lt;p&gt;The result of this work is contained within this repo and delivered as the Windows Terminal application you can download from the Microsoft Store, or &lt;a href=&#34;https://github.com/microsoft/terminal/releases&#34;&gt;directly from this repo&#39;s releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;For more information about Windows Terminal, you may find some of these resources useful and interesting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/commandline&#34;&gt;Command-Line Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/commandline/windows-command-line-backgrounder/&#34;&gt;Command-Line Backgrounder Blog Series&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows Terminal Launch: &lt;a href=&#34;https://www.youtube.com/watch?v=8gw0rXPMMPE&amp;amp;list=PLEHMQNlPj-Jzh9DkNpqipDGCZZuOwrQwR&amp;amp;index=2&amp;amp;t=0s&#34;&gt;Terminal &#34;Sizzle Video&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows Terminal Launch: &lt;a href=&#34;https://www.youtube.com/watch?v=KMudkRcwjCw&#34;&gt;Build 2019 Session&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run As Radio: &lt;a href=&#34;https://www.runasradio.com/Shows/Show/645&#34;&gt;Show 645 - Windows Terminal with Richard Turner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Azure Devops Podcast: &lt;a href=&#34;http://azuredevopspodcast.clear-measure.com/kayla-cinnamon-and-rich-turner-on-devops-on-the-windows-terminal-team-episode-54&#34;&gt;Episode 54 - Kayla Cinnamon and Rich Turner on DevOps on the Windows Terminal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Ignite 2019 Session: &lt;a href=&#34;https://myignite.techcommunity.microsoft.com/sessions/81329?source=sessions&#34;&gt;The Modern Windows Command Line: Windows Terminal - BRK3321&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;I built and ran the new Terminal, but it looks just like the old console&lt;/h3&gt; &#xA;&lt;p&gt;Cause: You&#39;re launching the incorrect solution in Visual Studio.&lt;/p&gt; &#xA;&lt;p&gt;Solution: Make sure you&#39;re building &amp;amp; deploying the &lt;code&gt;CascadiaPackage&lt;/code&gt; project in Visual Studio.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;OpenConsole.exe&lt;/code&gt; is just a locally-built &lt;code&gt;conhost.exe&lt;/code&gt;, the classic Windows Console that hosts Windows&#39; command-line infrastructure. OpenConsole is used by Windows Terminal to connect to and communicate with command-line applications (via &lt;a href=&#34;https://devblogs.microsoft.com/commandline/windows-command-line-introducing-the-windows-pseudo-console-conpty/&#34;&gt;ConPty&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;All project documentation is located at &lt;a href=&#34;https://aka.ms/terminal-docs&#34;&gt;aka.ms/terminal-docs&lt;/a&gt;. If you would like to contribute to the documentation, please submit a pull request on the &lt;a href=&#34;https://github.com/MicrosoftDocs/terminal&#34;&gt;Windows Terminal Documentation repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are excited to work alongside you, our amazing community, to build and enhance Windows Terminal!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;BEFORE you start work on a feature/fix&lt;/strong&gt;&lt;/em&gt;, please read &amp;amp; follow our &lt;a href=&#34;https://github.com/microsoft/terminal/raw/main/CONTRIBUTING.md&#34;&gt;Contributor&#39;s Guide&lt;/a&gt; to help avoid any wasted or duplicate effort.&lt;/p&gt; &#xA;&lt;h2&gt;Communicating with the Team&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to communicate with the team is via GitHub issues.&lt;/p&gt; &#xA;&lt;p&gt;Please file new issues, feature requests and suggestions, but &lt;strong&gt;DO search for similar open/closed preexisting issues before creating a new issue.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to ask a question that you feel doesn&#39;t warrant an issue (yet), please reach out to us via Twitter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kayla Cinnamon, Program Manager: &lt;a href=&#34;https://twitter.com/cinnamon_msft&#34;&gt;@cinnamon_msft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dustin Howett, Engineering Lead: &lt;a href=&#34;https://twitter.com/DHowett&#34;&gt;@dhowett&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mike Griese, Senior Developer: &lt;a href=&#34;https://twitter.com/zadjii&#34;&gt;@zadjii&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Carlos Zamora, Developer: &lt;a href=&#34;https://twitter.com/cazamor_msft&#34;&gt;@cazamor_msft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pankaj Bhojwani, Developer&lt;/li&gt; &#xA; &lt;li&gt;Leonard Hecker, Developer: &lt;a href=&#34;https://twitter.com/LeonardHecker&#34;&gt;@LeonardHecker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer Guidance&lt;/h2&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You must be running Windows 10 2004 (build &amp;gt;= 10.0.19041.0) or later to run Windows Terminal&lt;/li&gt; &#xA; &lt;li&gt;You must &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/uwp/get-started/enable-your-device-for-development&#34;&gt;enable Developer Mode in the Windows Settings app&lt;/a&gt; to locally install and run Windows Terminal&lt;/li&gt; &#xA; &lt;li&gt;You must have &lt;a href=&#34;https://github.com/PowerShell/PowerShell/releases/latest&#34;&gt;PowerShell 7 or later&lt;/a&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;You must have the &lt;a href=&#34;https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/&#34;&gt;Windows 11 (10.0.22000.0) SDK&lt;/a&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;You must have at least &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;VS 2022&lt;/a&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;You must install the following Workloads via the VS Installer. Note: Opening the solution in VS 2022 will &lt;a href=&#34;https://devblogs.microsoft.com/setup/configure-visual-studio-across-your-organization-with-vsconfig/&#34;&gt;prompt you to install missing components automatically&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Desktop Development with C++&lt;/li&gt; &#xA;   &lt;li&gt;Universal Windows Platform Development&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;The following Individual Components&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;C++ (v143) Universal Windows Platform Tools&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You must install the &lt;a href=&#34;https://docs.microsoft.com/dotnet/framework/install/guide-for-developers#to-install-the-net-framework-developer-pack-or-targeting-pack&#34;&gt;.NET Framework Targeting Pack&lt;/a&gt; to build test projects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building the Code&lt;/h2&gt; &#xA;&lt;p&gt;This repository uses &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;git submodules&lt;/a&gt; for some of its dependencies. To make sure submodules are restored or updated, be sure to run the following prior to building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OpenConsole.sln may be built from within Visual Studio or from the command-line using a set of convenience scripts &amp;amp; tools in the &lt;strong&gt;/tools&lt;/strong&gt; directory:&lt;/p&gt; &#xA;&lt;h3&gt;Building in PowerShell&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Import-Module .\tools\OpenConsole.psm1&#xA;Set-MsBuildDevEnvironment&#xA;Invoke-OpenConsoleBuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building in Cmd&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;.\tools\razzle.cmd&#xA;bcz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running &amp;amp; Debugging&lt;/h2&gt; &#xA;&lt;p&gt;To debug the Windows Terminal in VS, right click on &lt;code&gt;CascadiaPackage&lt;/code&gt; (in the Solution Explorer) and go to properties. In the Debug menu, change &#34;Application process&#34; and &#34;Background task process&#34; to &#34;Native Only&#34;.&lt;/p&gt; &#xA;&lt;p&gt;You should then be able to build &amp;amp; debug the Terminal project by hitting &lt;kbd&gt;F5&lt;/kbd&gt;. Make sure to select either the &#34;x64&#34; or the &#34;x86&#34; platform - the Terminal doesn&#39;t build for &#34;Any Cpu&#34; (because the Terminal is a C++ application, not a C# one).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;👉 You will &lt;em&gt;not&lt;/em&gt; be able to launch the Terminal directly by running the WindowsTerminal.exe. For more details on why, see &lt;a href=&#34;https://github.com/microsoft/terminal/issues/926&#34;&gt;#926&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/terminal/issues/4043&#34;&gt;#4043&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Coding Guidance&lt;/h3&gt; &#xA;&lt;p&gt;Please review these brief docs below about our coding practices.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;👉 If you find something missing from these docs, feel free to contribute to any of our documentation files anywhere in the repository (or write some new ones!)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This is a work in progress as we learn what we&#39;ll need to provide people in order to be effective contributors to our project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/raw/main/doc/STYLE.md&#34;&gt;Coding Style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/raw/main/doc/ORGANIZATION.md&#34;&gt;Code Organization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/raw/main/doc/EXCEPTIONS.md&#34;&gt;Exceptions in our legacy codebase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/raw/main/doc/WIL.md&#34;&gt;Helpful smart pointers and macros for interfacing with Windows in WIL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
</feed>