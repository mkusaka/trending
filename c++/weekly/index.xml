<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-03T01:41:07Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ssloy/tinyrenderer</title>
    <updated>2024-03-03T01:41:07Z</updated>
    <id>tag:github.com,2024-03-03:/ssloy/tinyrenderer</id>
    <link href="https://github.com/ssloy/tinyrenderer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A brief computer graphics / rendering course&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tiny Renderer or how OpenGL works: software rendering in 500 lines of code&lt;/h1&gt; &#xA;&lt;h1&gt;Check &lt;a href=&#34;https://github.com/ssloy/tinyrenderer/wiki&#34;&gt;the wiki&lt;/a&gt; for the detailed lessons.&lt;/h1&gt; &#xA;&lt;h2&gt;compilation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/ssloy/tinyrenderer.git &amp;amp;&amp;amp;&#xA;cd tinyrenderer &amp;amp;&amp;amp;&#xA;mkdir build &amp;amp;&amp;amp;&#xA;cd build &amp;amp;&amp;amp;&#xA;cmake .. &amp;amp;&amp;amp;&#xA;cmake --build . -j &amp;amp;&amp;amp;&#xA;./tinyrenderer ../obj/diablo3_pose/diablo3_pose.obj ../obj/floor.obj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rendered image is saved to &lt;code&gt;framebuffer.tga&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can open the project in Gitpod, a free online dev evironment for GitHub: &lt;a href=&#34;https://gitpod.io/#https://github.com/ssloy/tinyrenderer&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On open, the editor will compile &amp;amp; run the program as well as open the resulting image in the editor&#39;s preview. Just change the code in the editor and rerun the script (use the terminal&#39;s history) to see updated images.&lt;/p&gt; &#xA;&lt;h2&gt;The main idea&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;My source code is irrelevant. Read the wiki and implement your own renderer. Only when you suffer through all the tiny details you will learn what is going on.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In &lt;a href=&#34;https://github.com/ssloy/tinyrenderer/wiki&#34;&gt;this series of articles&lt;/a&gt;, I want to show the way OpenGL works by writing its clone (a much simplified one). Surprisingly enough, I often meet people who cannot overcome the initial hurdle of learning OpenGL / DirectX. Thus, I have prepared a short series of lectures, after which my students show quite good renderers.&lt;/p&gt; &#xA;&lt;p&gt;So, the task is formulated as follows: using no third-party libraries (especially graphic ones), get something like this picture:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/00-home/africanhead.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Warning: this is a training material that will loosely repeat the structure of the OpenGL library. It will be a software renderer. &lt;strong&gt;I do not want to show how to write applications for OpenGL. I want to show how OpenGL works.&lt;/strong&gt; I am deeply convinced that it is impossible to write efficient applications using 3D libraries without understanding this.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;I will try to make the final code about 500 lines. My students need 10 to 20 programming hours to begin making such renderers. At the input, we get a test file with a polygonal wire + pictures with textures. At the output, we’ll get a rendered model. No graphical interface, the program simply generates an image.&lt;/p&gt; &#xA;&lt;p&gt;Since the goal is to minimize external dependencies, I give my students just one class that allows working with &lt;a href=&#34;http://en.wikipedia.org/wiki/Truevision_TGA&#34;&gt;TGA&lt;/a&gt; files. It’s one of the simplest formats that supports images in RGB/RGBA/black and white formats. So, as a starting point, we’ll obtain a simple way to work with pictures. You should note that the only functionality available at the very beginning (in addition to loading and saving images) is the capability to set the color of one pixel.&lt;/p&gt; &#xA;&lt;p&gt;There are no functions for drawing line segments and triangles. We’ll have to do all of this by hand. I provide my source code that I write in parallel with students. But I would not recommend using it, as this doesn’t make sense. The entire code is available on github, and &lt;a href=&#34;https://github.com/ssloy/tinyrenderer/tree/909fe20934ba5334144d2c748805690a1fa4c89f&#34;&gt;here&lt;/a&gt; you will find the source code I give to my students.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &#34;tgaimage.h&#34;&#xA;const TGAColor white = TGAColor(255, 255, 255, 255);&#xA;const TGAColor red   = TGAColor(255, 0,   0,   255);&#xA;int main(int argc, char** argv) {&#xA;        TGAImage image(100, 100, TGAImage::RGB);&#xA;        image.set(52, 41, red);&#xA;        image.write_tga_file(&#34;output.tga&#34;);`&#xA;        return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output.tga should look something like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/00-home/reddot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Teaser: few examples made with the renderer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/00-home/demon.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/00-home/diablo-glow.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/00-home/boggie.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/00-home/diablo-ssao.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>InfpHub/Raptor</title>
    <updated>2024-03-03T01:41:07Z</updated>
    <id>tag:github.com,2024-03-03:/InfpHub/Raptor</id>
    <link href="https://github.com/InfpHub/Raptor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;第三方阿里云盘桌面应用客户端&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Raptor&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://changelog.com/jsparty/96&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Powered%20by-Qt-49CF59.svg?sanitize=true&#34; alt=&#34;Powered by Qt&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/InfpPointPlus/Raptor/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discuss%20on-GitHub-00A4FF&#34; alt=&#34;Discuss on GitHub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;使用 Qt 和 C++ 构建的低内存、小而美的第三方阿里云盘桌面应用客户端🚀&lt;/p&gt; &#xA;&lt;p&gt;Raptor 由 &lt;strong&gt;Qt5&lt;/strong&gt; 💚 驱动，与其他基于 Chromium 的解决方案（如 Electron）相比，这使得其 CPU 和内存使用较低&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;我们已提供&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🧬 用户 - 持久化登录，多用户登录，多用户切换&lt;/li&gt; &#xA; &lt;li&gt;📉 文件（夹） - 创建/多级创建文件夹/重命名/搜索&lt;/li&gt; &#xA; &lt;li&gt;💅 文件（夹） - 移动/复制&lt;/li&gt; &#xA; &lt;li&gt;✅ 文件（夹） - 上传/下载/唤起第三方下载器下载&lt;/li&gt; &#xA; &lt;li&gt;🎪 视频 - MPV/VLC/PotPlayer&lt;/li&gt; &#xA; &lt;li&gt;💸 分享 - 创建分享/导入分享&lt;/li&gt; &#xA; &lt;li&gt;🦹🏻‍♀️ 秒传 - 创建秒传/导入秒传&lt;/li&gt; &#xA; &lt;li&gt;⭐️ 收藏 - 收藏/取消收藏/搜索&lt;/li&gt; &#xA; &lt;li&gt;🕵️‍♂️ 回收站 - 清空/删除/恢复&lt;/li&gt; &#xA; &lt;li&gt;📚 Plus - 跨网盘文件复制&lt;/li&gt; &#xA; &lt;li&gt;🏅 UI - 可自由修改的字体，图标与主题&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;今后的工作&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;升级到 Qt6 以支持 DPI&lt;/li&gt; &#xA; &lt;li&gt;全速下载&lt;/li&gt; &#xA; &lt;li&gt;主流 Linux 桌面系统适配（也许是 Qt，也许是 PyQt，也许是也许...）&lt;/li&gt; &#xA; &lt;li&gt;在线文档站点搭建&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;从代码开始&lt;/h2&gt; &#xA;&lt;p&gt;本节对于那些想要从源代码构建 Raptor 的人来说很有用&lt;/p&gt; &#xA;&lt;h3&gt;必要的工具集&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2019&lt;/li&gt; &#xA; &lt;li&gt;Qt 5.15（静态或动态）&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.5 及其更高版本&lt;/li&gt; &#xA; &lt;li&gt;JetBrains CLion 2024&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;第三方依赖库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zint.org.uk&#34;&gt;ZInt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://curl.se&#34;&gt;Curl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cryptopp.com&#34;&gt;Crypto++&lt;/a&gt;（仅静态编译需要）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sass-lang.com&#34;&gt;Sass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bitcoin-core/secp256k1&#34;&gt;SECP256K1&lt;/a&gt;（仅动态编译需要）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;编译之后按照 &lt;code&gt;CMakeList.txt&lt;/code&gt; 中的头文件路径和库路径放置&lt;/p&gt; &#xA;&lt;h3&gt;即刻开始构建&lt;/h3&gt; &#xA;&lt;h4&gt;Debug&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用 JetBrains CLion 打开 Raptor&lt;/li&gt; &#xA; &lt;li&gt;根据向导配置 Visual Studio 工具集&lt;/li&gt; &#xA; &lt;li&gt;修改 &lt;code&gt;CMakeList.txt&lt;/code&gt; 中的 &lt;code&gt;CMAKE_PREFIX_PATH&lt;/code&gt; 为您的 Qt 安装目录&lt;/li&gt; &#xA; &lt;li&gt;修改 &lt;code&gt;CMakeList.txt&lt;/code&gt; 中的 &lt;code&gt;Standalone&lt;/code&gt; 为 &lt;code&gt;ON&lt;/code&gt; （静态编译） 或者 &lt;code&gt;OFF&lt;/code&gt; （动态编译）&lt;/li&gt; &#xA; &lt;li&gt;点击右上角编译图标以构建&lt;/li&gt; &#xA; &lt;li&gt;最后，在 &lt;code&gt;Target/[x64|x86]/[Debug|Release]/[Static|Share]&lt;/code&gt; 中可查看二进制程序&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Release&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;编辑 &lt;code&gt;Script&lt;/code&gt; 中的脚本，修改 &lt;code&gt;QT_DIR&lt;/code&gt; 和 &lt;code&gt;Visual Studio 2019 命令提示符&lt;/code&gt; 为相应目录&lt;/li&gt; &#xA; &lt;li&gt;运行相关脚本。稍等片刻，在 &lt;code&gt;Dist&lt;/code&gt; 中即可查看压缩好的二进制发行包&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PS：如果您选择静态编译则对应的 Qt 工具集也必须是静态的，动态编译则需要动态编译的 Qt 工具集&lt;/p&gt; &#xA;&lt;h2&gt;声明&lt;/h2&gt; &#xA;&lt;p&gt;Raptor 是自由软件，依据 &lt;a href=&#34;https://www.gnu.org/licenses&#34;&gt;GNU General Public License V3.0&lt;/a&gt; 授权发布。你可以再分发之和/或依照由自由软件基金会发布的 GNU 通用公共许可证修改之，无论是版本 3 许可证，还是（按你的决定）任何以后版都可以。发布 Raptor 是希望它能有用，但是并无保障；甚至连可销售和符合某个特定的目的都不保证。请参看 GNU 通用公共许可证，了解详情。你应该随程序获得一份 GNU 通用公共许可证的复本。如果没有，请看 &lt;a href=&#34;https://www.gnu.org/licenses&#34;&gt;在线许可证&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Raptor 所使用的第三方依赖库，其许可可在 &lt;code&gt;Store/Legal&lt;/code&gt; 中找到&lt;/p&gt; &#xA;&lt;h2&gt;需要您的支持&lt;/h2&gt; &#xA;&lt;p&gt;Raptor 是一个开源项目，需要您的支持。如果你喜欢这个项目，请考虑通过点击这个 Github 存储库上的 Star 按钮来支持我的工作&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>osquery/osquery</title>
    <updated>2024-03-03T01:41:07Z</updated>
    <id>tag:github.com,2024-03-03:/osquery/osquery</id>
    <link href="https://github.com/osquery/osquery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SQL powered operating system instrumentation, monitoring, and analytics.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;osquery&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;osquery logo&#34; width=&#34;200&#34; src=&#34;https://github.com/osquery/osquery/raw/master/docs/img/logo-2x-dark.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; osquery is a SQL powered operating system instrumentation, monitoring, and analytics framework. &lt;br&gt; Available for Linux, macOS, and Windows. &lt;/p&gt; &#xA;&lt;h2&gt;Information and resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Homepage: &lt;a href=&#34;https://osquery.io&#34;&gt;osquery.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Downloads: &lt;a href=&#34;https://osquery.io/downloads&#34;&gt;osquery.io/downloads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Documentation: &lt;a href=&#34;https://osquery.readthedocs.org&#34;&gt;ReadTheDocs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stack Overflow: &lt;a href=&#34;https://stackoverflow.com/questions/tagged/osquery&#34;&gt;Stack Overflow questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Table Schema: &lt;a href=&#34;https://osquery.io/schema&#34;&gt;osquery.io/schema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Query Packs: &lt;a href=&#34;https://github.com/osquery/osquery/tree/master/packs&#34;&gt;osquery.io/packs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Slack: &lt;a href=&#34;https://chat.osquery.io/c/general&#34;&gt;Browse the archives&lt;/a&gt; or &lt;a href=&#34;https://join.slack.com/t/osquery/shared_invite/zt-1wi6cdgf7-zR2wt7FZ0ClHj6tEym6KFQ&#34;&gt;Join the conversation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build Status: &lt;a href=&#34;https://github.com/osquery/osquery/actions/workflows/hosted_runners.yml&#34;&gt;&lt;img src=&#34;https://github.com/osquery/osquery/actions/workflows/hosted_runners.yml/badge.svg?branch=master&#34; alt=&#34;GitHub Actions Build x86 Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/osquery/osquery/actions/workflows/self_hosted_runners.yml&#34;&gt;&lt;img src=&#34;https://github.com/osquery/osquery/actions/workflows/self_hosted_runners.yml/badge.svg?branch=master&#34; alt=&#34;GitHub Actions Build AArch64 Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://osquery.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/osquery/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CII Best Practices: &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/3125&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/3125/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is osquery?&lt;/h2&gt; &#xA;&lt;p&gt;osquery exposes an operating system as a high-performance relational database. This allows you to write SQL-based queries to explore operating system data. With osquery, SQL tables represent abstract concepts such as running processes, loaded kernel modules, open network connections, browser plugins, hardware events or file hashes.&lt;/p&gt; &#xA;&lt;p&gt;SQL tables are implemented via a simple plugin and extensions API. A variety of tables already exist and more are being written: &lt;a href=&#34;https://osquery.io/schema/&#34;&gt;https://osquery.io/schema&lt;/a&gt;. To best understand the expressiveness that is afforded to you by osquery, consider the following SQL queries:&lt;/p&gt; &#xA;&lt;p&gt;List the &lt;a href=&#34;https://osquery.io/schema/current#users&#34;&gt;&lt;code&gt;users&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM users;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://osquery.io/schema/current#processes&#34;&gt;&lt;code&gt;processes&lt;/code&gt;&lt;/a&gt; that have a deleted executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM processes WHERE on_disk = 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get the process name, port, and PID, for processes listening on all interfaces:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT DISTINCT processes.name, listening_ports.port, processes.pid&#xA;  FROM listening_ports JOIN processes USING (pid)&#xA;  WHERE listening_ports.address = &#39;0.0.0.0&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Find every macOS LaunchDaemon that launches an executable and keeps it running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT name, program || program_arguments AS executable&#xA;  FROM launchd&#xA;  WHERE (run_at_load = 1 AND keep_alive = 1)&#xA;  AND (program != &#39;&#39; OR program_arguments != &#39;&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check for ARP anomalies from the host&#39;s perspective:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT address, mac, COUNT(mac) AS mac_count&#xA;  FROM arp_cache GROUP BY mac&#xA;  HAVING count(mac) &amp;gt; 1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you could also use a SQL sub-query to accomplish the same result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT address, mac, mac_count&#xA;  FROM&#xA;    (SELECT address, mac, COUNT(mac) AS mac_count FROM arp_cache GROUP BY mac)&#xA;  WHERE mac_count &amp;gt; 1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These queries can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;performed on an ad-hoc basis to explore operating system state using the &lt;a href=&#34;https://osquery.readthedocs.org/en/latest/introduction/using-osqueryi/&#34;&gt;osqueryi&lt;/a&gt; shell&lt;/li&gt; &#xA; &lt;li&gt;executed via a &lt;a href=&#34;https://osquery.readthedocs.org/en/latest/introduction/using-osqueryd/&#34;&gt;scheduler&lt;/a&gt; to monitor operating system state across a set of hosts&lt;/li&gt; &#xA; &lt;li&gt;launched from custom applications using osquery Thrift APIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download &amp;amp; Install&lt;/h2&gt; &#xA;&lt;p&gt;To download the latest stable builds and for repository information and installation instructions visit &lt;a href=&#34;https://osquery.io/downloads/&#34;&gt;https://osquery.io/downloads&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We use a simple numbered versioning scheme &lt;code&gt;X.Y.Z&lt;/code&gt;, where X is a major version, Y is a minor, and Z is a patch. We plan minor releases roughly every two months. These releases are tracked on our &lt;a href=&#34;https://github.com/osquery/osquery/milestones&#34;&gt;Milestones&lt;/a&gt; page. A patch release is used when there are unforeseen bugs with our minor release and we need to quickly patch. A rare &#39;revision&#39; release might be used if we need to change build configurations.&lt;/p&gt; &#xA;&lt;p&gt;Major, minor, and patch releases are tagged on GitHub and can be viewed on the &lt;a href=&#34;https://github.com/osquery/osquery/releases&#34;&gt;Releases&lt;/a&gt; page. We open a new &lt;a href=&#34;https://github.com/osquery/osquery/raw/master/.github/ISSUE_TEMPLATE/New_Release.md&#34;&gt;Release Checklist&lt;/a&gt; issue when we prepare a minor release. If you are interested in the status of a release, please find the corresponding checklist issue, and note that the issue will be marked closed when we are finished the checklist. We consider a release &#39;in testing&#39; during the period of hosting new downloads on our website and adding them to our hosted repositories. We will mark the release as &#39;stable&#39; on GitHub when enough testing has occurred, this usually takes two weeks.&lt;/p&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;Building osquery from source is encouraged! Check out our &lt;a href=&#34;https://osquery.readthedocs.io/en/latest/development/building/&#34;&gt;build guide&lt;/a&gt;. Also check out our &lt;a href=&#34;https://raw.githubusercontent.com/osquery/osquery/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; and join the community on &lt;a href=&#34;https://join.slack.com/t/osquery/shared_invite/zt-1wi6cdgf7-zR2wt7FZ0ClHj6tEym6KFQ&#34;&gt;Slack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Osquery fleet managers&lt;/h2&gt; &#xA;&lt;p&gt;There are many osquery fleet managers out there. The osquery project does not endorse, recommend, or test these. They are provided as a starting point&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/fleetdm/fleet&#34;&gt;Fleet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open Core&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.kolide.com&#34;&gt;Kolide&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Commercial&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jmpsec/osctrl&#34;&gt;OSCTRL&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open Source&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zentralopensource/zentral&#34;&gt;Zentral&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open Source&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zercurity/zercurity&#34;&gt;Zercurity&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Freemium&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;By contributing to osquery you agree that your contributions will be licensed as defined on the LICENSE file.&lt;/p&gt; &#xA;&lt;h2&gt;Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;We keep track of security announcements in our tagged version release notes on GitHub. We aggregate these into &lt;a href=&#34;https://raw.githubusercontent.com/osquery/osquery/master/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt; too.&lt;/p&gt; &#xA;&lt;h2&gt;Learn more&lt;/h2&gt; &#xA;&lt;p&gt;The osquery documentation is available &lt;a href=&#34;https://osquery.readthedocs.org&#34;&gt;online&lt;/a&gt;. Documentation for older releases can be found by version number, &lt;a href=&#34;https://readthedocs.org/projects/osquery/&#34;&gt;as well&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in learning more about osquery read the &lt;a href=&#34;https://code.facebook.com/posts/844436395567983/introducing-osquery/&#34;&gt;launch blog post&lt;/a&gt; for background on the project, visit the &lt;a href=&#34;https://osquery.readthedocs.org/&#34;&gt;users guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Development and usage discussion is happening in the osquery Slack, grab an invite &lt;a href=&#34;https://join.slack.com/t/osquery/shared_invite/zt-1wi6cdgf7-zR2wt7FZ0ClHj6tEym6KFQ&#34;&gt;here&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
</feed>