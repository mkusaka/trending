<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-14T01:51:41Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emuPlace/emuThreeDS</title>
    <updated>2023-05-14T01:51:41Z</updated>
    <id>tag:github.com,2023-05-14:/emuPlace/emuThreeDS</id>
    <link href="https://github.com/emuPlace/emuThreeDS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nintendo 3DS emulator for Apple devices based on Citra.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;emuThreeDS&lt;/h1&gt; &#xA;&lt;p&gt;Nintendo 3DS emulator for Apple devices based on Citra.&lt;/p&gt; &#xA;&lt;span&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=Built%20with&amp;amp;message=C%2B%2B&amp;amp;color=blue&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=License&amp;amp;message=GPLv3&amp;amp;color=blue&#34;&gt; &lt;/span&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Support the development of emuThreeDS by going to the links below!&lt;/p&gt; &#xA;&lt;span&gt; &lt;a href=&#34;https://buymeacoffee.com/antiquecodes&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=Support&amp;amp;message=Buy%20Me%20A%20Coffee&amp;amp;color=yellow&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://ko-fi.com/antiquecodes&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=Support&amp;amp;message=Ko-Fi&amp;amp;color=brown&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://paypal.com/paypalme/officialantique&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=Support&amp;amp;message=PayPal&amp;amp;color=009cde&#34;&gt; &lt;/a&gt; &lt;/span&gt; &#xA;&lt;h2&gt;Coming in v1.0.6&lt;/h2&gt; &#xA;&lt;h3&gt;Amiibo Support&lt;/h3&gt; &#xA;&lt;p&gt;Amiibo support seems to be broken in v1.0.5.1. This will be fixed in v1.0.6.&lt;/p&gt; &#xA;&lt;h3&gt;Landscape Support&lt;/h3&gt; &#xA;&lt;p&gt;Landscape support was removed in v1.0.5.1 while testing portrait touch support. This will be reimplemented in v1.0.6.&lt;/p&gt; &#xA;&lt;h3&gt;Virtual Controller Support&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please note, &lt;strong&gt;touch&lt;/strong&gt; and &lt;strong&gt;virtual (on-screen) controller&lt;/strong&gt; support are different things with &lt;strong&gt;touch&lt;/strong&gt; referring to the lower screen.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Virtual (on-screen) controller support seems to be broken in v1.0.5.1. This will be fixed in v1.0.6.&lt;/p&gt; &#xA;&lt;h3&gt;Improved Settings&lt;/h3&gt; &#xA;&lt;p&gt;Settings will be receiving an overhaul to replace the existing sdl2_config.ini in v1.0.6.&lt;/p&gt; &#xA;&lt;h3&gt;Improved Audio&lt;/h3&gt; &#xA;&lt;p&gt;Audio seems to be broken in v1.0.5.1 when Bluetooth is connected. This will be fixed in v1.0.6&lt;/p&gt; &#xA;&lt;h2&gt;Latest Changes&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/emuPlace/emuThreeDS/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pineappleEA/pineapple-src</title>
    <updated>2023-05-14T01:51:41Z</updated>
    <id>tag:github.com,2023-05-14:/pineappleEA/pineapple-src</id>
    <link href="https://github.com/pineappleEA/pineapple-src" rel="alternate"></link>
    <summary type="html">&lt;p&gt;yuzu Early Access source code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;yuzu emulator early access&lt;/h1&gt; &#xA;&lt;p&gt;This is the source code for early-access 3588.&lt;/p&gt; &#xA;&lt;h2&gt;Legal Notice&lt;/h2&gt; &#xA;&lt;p&gt;yuzu is a GPLv3 program, which allows fully free redistribution of its source code.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>oatpp/oatpp</title>
    <updated>2023-05-14T01:51:41Z</updated>
    <id>tag:github.com,2023-05-14:/oatpp/oatpp</id>
    <link href="https://github.com/oatpp/oatpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸŒ±Light and powerful C++ web framework for highly scalable and resource-efficient web application. It&#39;s zero-dependency and easy-portable.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;Oat++ Logo&#34; src=&#34;https://raw.githubusercontent.com/lganzzzo/oatpp-website-res/master/logo_x400.png&#34; width=&#34;200px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://dev.azure.com/lganzzzo/lganzzzo/_build?definitionId=1&#34;&gt; &lt;img src=&#34;https://dev.azure.com/lganzzzo/lganzzzo/_apis/build/status/oatpp.oatpp&#34; alt=&#34;oatpp build status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://gitter.im/oatpp-framework/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt; &lt;img src=&#34;https://badges.gitter.im/oatpp-framework/Lobby.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/oatpp-framework/Lobby&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Oat++&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;News&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;ðŸŽ‰&lt;/span&gt; Welcome the new oatpp version &lt;code&gt;1.3.0&lt;/code&gt;. Now it&#39;s better than ever! See the &lt;a href=&#34;https://github.com/oatpp/oatpp/raw/master/changelog/1.3.0.md&#34;&gt;changelog&lt;/a&gt; for details. &lt;span&gt;ðŸŽ‰&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Oat++ is a modern Web Framework for C++. It&#39;s fully loaded and contains all necessary components for effective production level development. It&#39;s also light and has a small memory footprint.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oatpp.io/docs/start/&#34;&gt;Get Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oatpp.io/docs/installation/unix-linux/&#34;&gt;Build For Unix/Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oatpp.io/docs/installation/windows/&#34;&gt;Build For Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oatpp/oatpp/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;About&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oatpp.io/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oatpp.io/supported-platforms/&#34;&gt;Supported Platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Latest Benchmarks: &lt;a href=&#34;https://oatpp.io/benchmark/websocket/5-million/&#34;&gt;5 Million WebSockets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oatpp/oatpp/master/CONTRIBUTING.md&#34;&gt;Contributing to Oat++&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Join Our Community&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/oatpp-framework/Lobby&#34;&gt;Gitter&lt;/a&gt; - Talk to Oat++ developers and to other Oat++ users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/oatpp_io&#34;&gt;Twitter&lt;/a&gt; - Follow Oat++ on Twitter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/oatpp/&#34;&gt;Reddit&lt;/a&gt; - Follow Oat++ subreddit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/oat%2b%2b&#34;&gt;StackOverflow (new)&lt;/a&gt; - Post a Question.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shortcuts:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oatpp.io/docs/start/high-level-overview/&#34;&gt;Oat++ High Level Overview&lt;/a&gt; - Get a quick overview of Oat++ features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-crud&#34;&gt;Example Project&lt;/a&gt; - A complete example of a &#34;CRUD&#34; service (UserService) built with Oat++. REST + Swagger-UI + SQLite.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build Powerful API And Document It With Swagger-UI&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://oatpp.io/docs/components/api-controller/&#34;&gt;ApiController&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;ENDPOINT_INFO(getUserById) {&#xA;  info-&amp;gt;summary = &#34;Get one User by userId&#34;;&#xA;&#xA;  info-&amp;gt;addResponse&amp;lt;Object&amp;lt;UserDto&amp;gt;&amp;gt;(Status::CODE_200, &#34;application/json&#34;);&#xA;  info-&amp;gt;addResponse&amp;lt;Object&amp;lt;StatusDto&amp;gt;&amp;gt;(Status::CODE_404, &#34;application/json&#34;);&#xA;  info-&amp;gt;addResponse&amp;lt;Object&amp;lt;StatusDto&amp;gt;&amp;gt;(Status::CODE_500, &#34;application/json&#34;);&#xA;&#xA;  info-&amp;gt;pathParams[&#34;userId&#34;].description = &#34;User Identifier&#34;;&#xA;}&#xA;ENDPOINT(&#34;GET&#34;, &#34;users/{userId}&#34;, getUserById,&#xA;         PATH(Int32, userId))&#xA;{&#xA;  return createDtoResponse(Status::CODE_200, m_userService.getUserById(userId));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Access Databases And Keep Your Data Consistent&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://oatpp.io/docs/components/orm/&#34;&gt;Oat++ ORM&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;QUERY(createUser,&#xA;      &#34;INSERT INTO users (username, email, role) VALUES (:username, :email, :role);&#34;,&#xA;      PARAM(oatpp::String, username), &#xA;      PARAM(oatpp::String, email), &#xA;      PARAM(oatpp::Enum&amp;lt;UserRoles&amp;gt;::AsString, role))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;h3&gt;Q: &#34;Oat++&#34; name?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;Oat&#34; is something light, organic, and green. It can be easily cooked and consumed with no effort.&lt;/li&gt; &#xA; &lt;li&gt;&#34;++&#34; gives a hint that it is &#34;something&#34; for C++.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Q: What is the main area of Oat++ application?&lt;/h3&gt; &#xA;&lt;p&gt;Oat++ is used for many different purposes, from building REST APIs that run on embedded devices to building microservices and highly-loaded cloud applications.&lt;/p&gt; &#xA;&lt;p&gt;But the majority of use cases appears to be in &lt;strong&gt;IoT&lt;/strong&gt; and &lt;strong&gt;Robotics&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Q: How portable is Oat++?&lt;/h3&gt; &#xA;&lt;p&gt;Theoretically, Oat++ can be &lt;strong&gt;easily&lt;/strong&gt; ported everywhere where you have &lt;strong&gt;threads&lt;/strong&gt; and &lt;strong&gt;network stack&lt;/strong&gt;. With an additional comparably small effort, it can be ported almost everywhere depending on how much you strip it and what would be the final binary size.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://oatpp.io/supported-platforms/&#34;&gt;supported platforms&lt;/a&gt; for additional info.&lt;/p&gt; &#xA;&lt;h3&gt;Q: What is the size of a minimal Oat++ application?&lt;/h3&gt; &#xA;&lt;p&gt;About &lt;strong&gt;1Mb&lt;/strong&gt;, depending on C/C++ std-lib and oatpp version.&lt;/p&gt; &#xA;&lt;h3&gt;Q: Which Oat++ API to choose, Simple or Async?&lt;/h3&gt; &#xA;&lt;p&gt;Always choose &lt;strong&gt;Simple API&lt;/strong&gt; wherever possible. Simple API is more developed and makes the code cleaner.&lt;/p&gt; &#xA;&lt;p&gt;Async API is designed for small, specific tasks that run at high concurrency levels ex.:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Serving file downloads to a large number of concurrent users (1K users and more).&lt;/li&gt; &#xA; &lt;li&gt;Streaming to a large number of clients (1K or more).&lt;/li&gt; &#xA; &lt;li&gt;Websocket Chat servers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For all other purposes use simple API.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;REST-API&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-crud&#34;&gt;REST Service&lt;/a&gt; - A complete example of a &#34;CRUD&#34; service (UserService) built with Oat++. REST + Swagger-UI + SQLite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-api-client&#34;&gt;REST Client&lt;/a&gt; - Example project of how-to use Retrofit-like client wrapper (ApiClient) and how it works.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;WebSocket&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lganzzzo/canchat&#34;&gt;Can Chat&lt;/a&gt; - Feature-complete rooms-based chat for tens of thousands users. Client plus Server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-websocket&#34;&gt;WebSocket&lt;/a&gt; - Collection of oatpp WebSocket examples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-yuv-websocket-stream&#34;&gt;YUV Websocket Stream&lt;/a&gt; - Example project how-to create a YUV image stream from a V4L device (i.E. Webcam) using websockets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Databases&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-crud&#34;&gt;SQLite&lt;/a&gt; - A complete example of a &#34;CRUD&#34; service. REST + Swagger-UI + SQLite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-postgresql&#34;&gt;PostgreSQL&lt;/a&gt; - Example of a production-grade entity service storing information in PostgreSQL. With Swagger-UI and configuration profiles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-mongodb&#34;&gt;MongoDB&lt;/a&gt; - Example project how to work with MongoDB using &lt;strong&gt;oatpp-mongo&lt;/strong&gt; mondule. Project is a web-service with basic CRUD and Swagger-UI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;IoT&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-iot-hue-ssdp&#34;&gt;Example-IoT-Hue&lt;/a&gt; - Example project how-to create an Philips Hue compatible REST-API that is discovered and controllable by Hue compatible Smart-Home devices like Amazon Alexa or Google Echo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Streaming&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-hls-media-stream&#34;&gt;HTTP Live Streaming Server&lt;/a&gt; - Example project on how to build an HLS-streaming server using Oat++ asynchronous API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-yuv-websocket-stream&#34;&gt;YUV Websocket Stream&lt;/a&gt; - Example project how-to create a YUV image stream from a V4L device (i.E. Webcam) using websockets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TLS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-libressl&#34;&gt;TLS With Libressl&lt;/a&gt; - Example project how-to setup secure connection and serve via HTTPS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Microservices&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-consul&#34;&gt;Consul Integration&lt;/a&gt; - Example project on how to use &lt;a href=&#34;https://oatpp.io/api/latest/oatpp-consul/rest/Client/&#34;&gt;oatpp::consul::Client&lt;/a&gt;. Consul integration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-microservices&#34;&gt;Microservices&lt;/a&gt; - Example project on how to build microservices with Oat++, and example on how to consolidate those microservices using &lt;a href=&#34;https://oatpp.io/docs/monolithization/&#34;&gt;monolithization&lt;/a&gt; technique.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Asynchronous API&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oatpp/example-async-api&#34;&gt;Async Service&lt;/a&gt; - Example project on how to use asynchronous API to handle a large number of simultaneous connections.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>