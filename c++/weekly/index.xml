<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-27T01:37:35Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bambulab/BambuStudio</title>
    <updated>2024-10-27T01:37:35Z</updated>
    <id>tag:github.com,2024-10-27:/bambulab/BambuStudio</id>
    <link href="https://github.com/bambulab/BambuStudio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PC Software for BambuLab and other 3D printers&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/106916061/179006347-497d24c0-9bd6-45b7-8c49-d5cc8ecfe5d7.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BambuStudio&lt;/h1&gt; &#xA;&lt;p&gt;Bambu Studio is a cutting-edge, feature-rich slicing software.&lt;br&gt; It contains project-based workflows, systematically optimized slicing algorithms, and an easy-to-use graphic interface, bringing users an incredibly smooth printing experience.&lt;/p&gt; &#xA;&lt;p&gt;Prebuilt Windows, macOS 64-bit and Linux releases are available through the &lt;a href=&#34;https://github.com/bambulab/BambuStudio/releases/&#34;&gt;github releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bambu Studio is based on &lt;a href=&#34;https://github.com/prusa3d/PrusaSlicer&#34;&gt;PrusaSlicer&lt;/a&gt; by Prusa Research, which is from &lt;a href=&#34;https://github.com/Slic3r/Slic3r&#34;&gt;Slic3r&lt;/a&gt; by Alessandro Ranellucci and the RepRap community.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/bambulab/BambuStudio/wiki&#34;&gt;wiki&lt;/a&gt; and the &lt;a href=&#34;https://github.com/bambulab/BambuStudio/tree/master/doc&#34;&gt;documentation directory&lt;/a&gt; for more informations.&lt;/p&gt; &#xA;&lt;h1&gt;What are Bambu Studio&#39;s main features?&lt;/h1&gt; &#xA;&lt;p&gt;Key features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic slicing features &amp;amp; GCode viewer&lt;/li&gt; &#xA; &lt;li&gt;Multiple plates management&lt;/li&gt; &#xA; &lt;li&gt;Remote control &amp;amp; monitoring&lt;/li&gt; &#xA; &lt;li&gt;Auto-arrange objects&lt;/li&gt; &#xA; &lt;li&gt;Auto-orient objects&lt;/li&gt; &#xA; &lt;li&gt;Hybrid/Tree/Normal support types, Customized support&lt;/li&gt; &#xA; &lt;li&gt;multi-material printing and rich painting tools&lt;/li&gt; &#xA; &lt;li&gt;multi-platform (Win/Mac/Linux) support&lt;/li&gt; &#xA; &lt;li&gt;Global/Object/Part level slicing parameters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other major features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Advanced cooling logic controlling fan speed and dynamic print speed&lt;/li&gt; &#xA; &lt;li&gt;Auto brim according to mechanical analysis&lt;/li&gt; &#xA; &lt;li&gt;Support arc path(G2/G3)&lt;/li&gt; &#xA; &lt;li&gt;Support STEP format&lt;/li&gt; &#xA; &lt;li&gt;Assembly &amp;amp; explosion view&lt;/li&gt; &#xA; &lt;li&gt;Flushing transition-filament into infill/object during filament change&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to compile&lt;/h1&gt; &#xA;&lt;p&gt;Following platforms are currently supported to compile:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 64-bit, &lt;a href=&#34;https://github.com/bambulab/BambuStudio/wiki/Windows-Compile-Guide&#34;&gt;Compile Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mac 64-bit, &lt;a href=&#34;https://github.com/bambulab/BambuStudio/wiki/Mac-Compile-Guide&#34;&gt;Compile Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux, &lt;a href=&#34;https://github.com/bambulab/BambuStudio/wiki/Linux-Compile-Guide&#34;&gt;Compile Guide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;currently we only provide linux appimages on &lt;a href=&#34;https://github.com/bambulab/BambuStudio/releases&#34;&gt;github releases&lt;/a&gt; for Ubuntu/Fedora, and a &lt;a href=&#34;https://flathub.org/apps/com.bambulab.BambuStudio&#34;&gt;flathub version&lt;/a&gt; can be used for all the linux platforms&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Report issue&lt;/h1&gt; &#xA;&lt;p&gt;You can add an issue to the &lt;a href=&#34;https://github.com/bambulab/BambuStudio/issues&#34;&gt;github tracker&lt;/a&gt; if &lt;strong&gt;it isn&#39;t already present.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Bambu Studio is licensed under the GNU Affero General Public License, version 3. Bambu Studio is based on PrusaSlicer by PrusaResearch.&lt;/p&gt; &#xA;&lt;p&gt;PrusaSlicer is licensed under the GNU Affero General Public License, version 3. PrusaSlicer is owned by Prusa Research. PrusaSlicer is originally based on Slic3r by Alessandro Ranellucci.&lt;/p&gt; &#xA;&lt;p&gt;Slic3r is licensed under the GNU Affero General Public License, version 3. Slic3r was created by Alessandro Ranellucci with the help of many other contributors.&lt;/p&gt; &#xA;&lt;p&gt;The GNU Affero General Public License, version 3 ensures that if you use any part of this software in any way (even behind a web server), your software must be released under the same license.&lt;/p&gt; &#xA;&lt;p&gt;The bambu networking plugin is based on non-free libraries. It is optional to the Bambu Studio and provides extended networking functionalities for users. By default, after installing Bambu Studio without the networking plugin, you can initiate printing through the SD card after slicing is completed.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/libphonenumber</title>
    <updated>2024-10-27T01:37:35Z</updated>
    <id>tag:github.com,2024-10-27:/google/libphonenumber</id>
    <link href="https://github.com/google/libphonenumber" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google&#39;s common Java, C++ and JavaScript library for parsing, formatting, and validating international phone numbers.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;right&#34;&gt; &lt;img src=&#34;https://travis-ci.org/google/libphonenumber.svg?branch=master&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;What is it?&lt;/h1&gt; &#xA;&lt;p&gt;Google&#39;s common Java, C++ and JavaScript library for parsing, formatting, and validating international phone numbers. The Java version is optimized for running on smartphones, and is used by the Android framework since 4.0 (Ice Cream Sandwich).&lt;/p&gt; &#xA;&lt;h1&gt;Quick links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reporting an issue?&lt;/strong&gt; Want to send a pull request? See the &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/FAQ.md&#34;&gt;frequently asked questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fun! &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/FALSEHOODS.md&#34;&gt;Falsehoods Programmers Believe About Phone Numbers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Look for &lt;a href=&#34;https://github.com/google/libphonenumber/find/master&#34;&gt;&lt;code&gt;README&lt;/code&gt;s&lt;/a&gt; in directories relevant to the code you&#39;re interested in.&lt;/li&gt; &#xA; &lt;li&gt;For contributors and porters: &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/run-java-demo.md&#34;&gt;How to run the Java demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For porters: &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/making-metadata-changes.md&#34;&gt;How to make metadata changes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Highlights of functionality&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parsing, formatting, and validating phone numbers for all countries/regions of the world.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getNumberType&lt;/code&gt; - gets the type of the number based on the number itself; able to distinguish Fixed-line, Mobile, Toll-free, Premium Rate, Shared Cost, VoIP, Personal Numbers, UAN, Pager, and Voicemail (whenever feasible).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isNumberMatch&lt;/code&gt; - gets a confidence level on whether two numbers could be the same.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getExampleNumber&lt;/code&gt; and &lt;code&gt;getExampleNumberForType&lt;/code&gt; - provide valid example numbers for all countries/regions, with the option of specifying which type of example phone number is needed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isPossibleNumber&lt;/code&gt; - quickly guesses whether a number is a possible phone number by using only the length information, much faster than a full validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isValidNumber&lt;/code&gt; - full validation of a phone number for a region using length and prefix information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AsYouTypeFormatter&lt;/code&gt; - formats phone numbers on-the-fly when users enter each digit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;findNumbers&lt;/code&gt; - finds numbers in text.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PhoneNumberOfflineGeocoder&lt;/code&gt; - provides geographical information related to a phone number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PhoneNumberToCarrierMapper&lt;/code&gt; - provides carrier information related to a phone number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PhoneNumberToTimeZonesMapper&lt;/code&gt; - provides timezone information related to a phone number.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;h2&gt;Java&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://libphonenumber.appspot.com/&#34;&gt;Java demo&lt;/a&gt; is updated with a slight delay after the GitHub release.&lt;/p&gt; &#xA;&lt;p&gt;Last demo update: v8.13.48.&lt;/p&gt; &#xA;&lt;p&gt;Note: Even though the library (main branch/&lt;a href=&#34;https://repo1.maven.org/maven2/com/googlecode/libphonenumber/libphonenumber/8.12.56/&#34;&gt;maven release&lt;/a&gt;) is at v8.12.57, because of some deployment issues, we were unable to update the Java demo with the new binary version. We will soon fix this. Meantime, please use JS demo.&lt;/p&gt; &#xA;&lt;p&gt;If this number is lower than the &lt;a href=&#34;https://github.com/google/libphonenumber/releases&#34;&gt;latest release&#39;s version number&lt;/a&gt;, we are between releases and the demo may be at either version.&lt;/p&gt; &#xA;&lt;h3&gt;Demo App&lt;/h3&gt; &#xA;&lt;p&gt;There is a demo Android App called &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/java/demoapp&#34;&gt;E.164 Formatter&lt;/a&gt; in this repository. The purpose of this App is to show an example of how the library can be used in a real-life situation, in this case specifically in an Android App using Java.&lt;/p&gt; &#xA;&lt;h2&gt;JavaScript&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/google/libphonenumber/raw/master/javascript/i18n/phonenumbers/demo-compiled.html&#34;&gt;JavaScript demo&lt;/a&gt; may be run at various tags; this link will take you to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Java code&lt;/h1&gt; &#xA;&lt;p&gt;To include the Java code in your application, either integrate with Maven (see &lt;a href=&#34;https://github.com/google/libphonenumber/wiki&#34;&gt;wiki&lt;/a&gt;) or download the latest jars from the &lt;a href=&#34;https://repo1.maven.org/maven2/com/googlecode/libphonenumber/libphonenumber/&#34;&gt;Maven repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Javadoc&lt;/h1&gt; &#xA;&lt;p&gt;Javadoc is automatically updated to reflect the latest release at &lt;a href=&#34;https://javadoc.io/doc/com.googlecode.libphonenumber/libphonenumber/&#34;&gt;https://javadoc.io/doc/com.googlecode.libphonenumber/libphonenumber/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Versioning and Announcements&lt;/h1&gt; &#xA;&lt;p&gt;We generally choose the release number following these guidelines.&lt;/p&gt; &#xA;&lt;p&gt;If any of the changes pushed to master since the last release are incompatible with the intent / specification of an existing libphonenumber API or may cause libphonenumber (Java, C++, or JS) clients to have to change their code to keep building, we publish a major release. For example, if the last release were 7.7.3, the new one would be 8.0.0.&lt;/p&gt; &#xA;&lt;p&gt;If any of those changes &lt;em&gt;enable&lt;/em&gt; clients to update their code to take advantage of new functionality, and if clients would have to roll-back these changes in the event that the release was marked as &#34;bad&#34;, we publish a minor release. For example, we&#39;d go from 7.7.3 to 7.8.0.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, including when a release contains only &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/FAQ.md#metadata_definition&#34;&gt;metadata&lt;/a&gt; changes, we publish a sub-minor release, e.g. 7.7.3 to 7.7.4.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes we make internal changes to the code or metadata that, while not affecting compatibility for clients, could affect compatibility for &lt;strong&gt;porters&lt;/strong&gt; of the library. For such changes we make announcements to &lt;a href=&#34;https://groups.google.com/forum/#!forum/libphonenumber-discuss&#34;&gt;libphonenumber-discuss&lt;/a&gt;. Such changes are not reflected in the version number, and we would publish a sub-minor release if there were no other changes.&lt;/p&gt; &#xA;&lt;p&gt;Want to get notified of new releases? During most of the year, excepting holidays and extenuating circumstances, we release fortnightly. We update &lt;a href=&#34;https://github.com/google/libphonenumber/releases&#34;&gt;release tags&lt;/a&gt; and document detailed &lt;a href=&#34;https://github.com/google/libphonenumber/raw/master/release_notes.txt&#34;&gt;release notes&lt;/a&gt;. We also send an announcement to &lt;a href=&#34;https://groups.google.com/forum/#!forum/libphonenumber-discuss&#34;&gt;libphonenumber-discuss&lt;/a&gt; for every release.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Examples&lt;/h1&gt; &#xA;&lt;p&gt;Let&#39;s say you have a string representing a phone number from Switzerland. This is how you parse/normalize it into a &lt;code&gt;PhoneNumber&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String swissNumberStr = &#34;044 668 18 00&#34;;&#xA;PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();&#xA;try {&#xA;  PhoneNumber swissNumberProto = phoneUtil.parse(swissNumberStr, &#34;CH&#34;);&#xA;} catch (NumberParseException e) {&#xA;  System.err.println(&#34;NumberParseException was thrown: &#34; + e.toString());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, &lt;code&gt;swissNumberProto&lt;/code&gt; contains:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;country_code&#34;: 41,&#xA;  &#34;national_number&#34;: 446681800&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;PhoneNumber&lt;/code&gt; is a class that was originally auto-generated from &lt;code&gt;phonenumber.proto&lt;/code&gt; with necessary modifications for efficiency. For details on the meaning of each field, refer to &lt;code&gt;resources/phonenumber.proto&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now let us validate whether the number is valid:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;boolean isValid = phoneUtil.isValidNumber(swissNumberProto); // returns true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a few formats supported by the formatting method, as illustrated below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Produces &#34;+41 44 668 18 00&#34;&#xA;System.out.println(phoneUtil.format(swissNumberProto, PhoneNumberFormat.INTERNATIONAL));&#xA;// Produces &#34;044 668 18 00&#34;&#xA;System.out.println(phoneUtil.format(swissNumberProto, PhoneNumberFormat.NATIONAL));&#xA;// Produces &#34;+41446681800&#34;&#xA;System.out.println(phoneUtil.format(swissNumberProto, PhoneNumberFormat.E164));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could also choose to format the number in the way it is dialed from another country:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Produces &#34;011 41 44 668 1800&#34;, the number when it is dialed in the United States.&#xA;System.out.println(phoneUtil.formatOutOfCountryCallingNumber(swissNumberProto, &#34;US&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Formatting Phone Numbers &#39;as you type&#39;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();&#xA;AsYouTypeFormatter formatter = phoneUtil.getAsYouTypeFormatter(&#34;US&#34;);&#xA;System.out.println(formatter.inputDigit(&#39;6&#39;));  // Outputs &#34;6&#34;&#xA;...  // Input more digits&#xA;System.out.println(formatter.inputDigit(&#39;3&#39;));  // Now outputs &#34;650 253&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Geocoding Phone Numbers&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PhoneNumberOfflineGeocoder geocoder = PhoneNumberOfflineGeocoder.getInstance();&#xA;// Outputs &#34;Zurich&#34;&#xA;System.out.println(geocoder.getDescriptionForNumber(swissNumberProto, Locale.ENGLISH));&#xA;// Outputs &#34;Zürich&#34;&#xA;System.out.println(geocoder.getDescriptionForNumber(swissNumberProto, Locale.GERMAN));&#xA;// Outputs &#34;Zurigo&#34;&#xA;System.out.println(geocoder.getDescriptionForNumber(swissNumberProto, Locale.ITALIAN));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mapping Phone Numbers to original carriers&lt;/h2&gt; &#xA;&lt;p&gt;Caveat: We do not provide data about the current carrier of a phone number, only the original carrier who is assigned the corresponding range. Read about &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/FAQ.md#what-is-mobile-number-portability&#34;&gt;number portability&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PhoneNumber swissMobileNumber =&#xA;    new PhoneNumber().setCountryCode(41).setNationalNumber(798765432L);&#xA;PhoneNumberToCarrierMapper carrierMapper = PhoneNumberToCarrierMapper.getInstance();&#xA;// Outputs &#34;Swisscom&#34;&#xA;System.out.println(carrierMapper.getNameForNumber(swissMobileNumber, Locale.ENGLISH));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples on how to use the library can be found in the &lt;a href=&#34;https://github.com/google/libphonenumber/tree/master/java/libphonenumber/test/com/google/i18n/phonenumbers&#34;&gt;unit tests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Third-party Ports&lt;/h1&gt; &#xA;&lt;p&gt;Several third-party ports of the phone number library are known to us. We share them here in case they&#39;re useful for developers.&lt;/p&gt; &#xA;&lt;p&gt;However, we emphasize that these ports are by developers outside the libphonenumber project. We do not evaluate their quality or influence their maintenance processes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C#: &lt;a href=&#34;https://github.com/twcclegg/libphonenumber-csharp&#34;&gt;https://github.com/twcclegg/libphonenumber-csharp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gleam: &lt;a href=&#34;https://github.com/massivefermion/phony&#34;&gt;https://github.com/massivefermion/phony&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go: &lt;a href=&#34;https://github.com/nyaruka/phonenumbers&#34;&gt;https://github.com/nyaruka/phonenumbers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Objective-c: &lt;a href=&#34;https://github.com/iziz/libPhoneNumber-iOS&#34;&gt;https://github.com/iziz/libPhoneNumber-iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swift: &lt;a href=&#34;https://github.com/marmelroy/PhoneNumberKit&#34;&gt;https://github.com/marmelroy/PhoneNumberKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHP: &lt;a href=&#34;https://github.com/giggsey/libphonenumber-for-php&#34;&gt;https://github.com/giggsey/libphonenumber-for-php&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL in-database types: &lt;a href=&#34;https://github.com/blm768/pg-libphonenumber&#34;&gt;https://github.com/blm768/pg-libphonenumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python: &lt;a href=&#34;https://github.com/daviddrysdale/python-phonenumbers&#34;&gt;https://github.com/daviddrysdale/python-phonenumbers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby: &lt;a href=&#34;https://github.com/ianks/mini_phone&#34;&gt;https://github.com/ianks/mini_phone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby: &lt;a href=&#34;https://github.com/daddyz/phonelib&#34;&gt;https://github.com/daddyz/phonelib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby: &lt;a href=&#34;https://github.com/mobi/telephone_number&#34;&gt;https://github.com/mobi/telephone_number&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust: &lt;a href=&#34;https://github.com/1aim/rust-phonenumber&#34;&gt;https://github.com/1aim/rust-phonenumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Erlang: &lt;a href=&#34;https://github.com/marinakr/libphonenumber_erlang&#34;&gt;https://github.com/marinakr/libphonenumber_erlang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clojure: &lt;a href=&#34;https://github.com/randomseed-io/phone-number&#34;&gt;https://github.com/randomseed-io/phone-number&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;R: &lt;a href=&#34;https://github.com/socialresearchcentre/dialr/&#34;&gt;https://github.com/socialresearchcentre/dialr/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elixir: &lt;a href=&#34;https://github.com/socialpaymentsbv/ex_phone_number&#34;&gt;https://github.com/socialpaymentsbv/ex_phone_number&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Salesforce: &lt;a href=&#34;https://appexchange.salesforce.com/appxListingDetail?listingId=a0N3A00000G12oJUAR&#34;&gt;https://appexchange.salesforce.com/appxListingDetail?listingId=a0N3A00000G12oJUAR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dart: &lt;a href=&#34;https://github.com/superakabo/dlibphonenumber&#34;&gt;https://github.com/superakabo/dlibphonenumber&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatives to our own versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android-optimized: Our Java version loads the metadata from &lt;code&gt;Class#getResourcesAsStream&lt;/code&gt; and asks that Android apps follow the Android loading best practices of repackaging the metadata and loading from &lt;code&gt;AssetManager#open()&lt;/code&gt; themselves (&lt;a href=&#34;https://github.com/google/libphonenumber/raw/master/FAQ.md#optimize-loads&#34;&gt;FAQ&lt;/a&gt;). If you don&#39;t want to do this, check out the port at &lt;a href=&#34;https://github.com/MichaelRocks/libphonenumber-android&#34;&gt;https://github.com/MichaelRocks/libphonenumber-android&lt;/a&gt;, which does repackage the metadata and use &lt;code&gt;AssetManager#open()&lt;/code&gt;, and may be depended on without needing those specific loading optimizations from clients. You should also check out the port at &lt;a href=&#34;https://github.com/lionscribe/libphonenumber-android&#34;&gt;https://github.com/lionscribe/libphonenumber-android&lt;/a&gt; which also supports geocoding, and only requires a one line code change.&lt;/li&gt; &#xA; &lt;li&gt;Javascript: If you don&#39;t want to use our version, which depends on Closure, there are several other options, including &lt;a href=&#34;https://github.com/catamphetamine/libphonenumber-js&#34;&gt;https://github.com/catamphetamine/libphonenumber-js&lt;/a&gt; - a stripped-down rewrite, about 110 KB in size - and &lt;a href=&#34;https://github.com/seegno/google-libphonenumber&#34;&gt;https://github.com/seegno/google-libphonenumber&lt;/a&gt; - a browserify-compatible wrapper around the original unmodified library installable via npm, which packs the Google Closure library, about 420 KB in size.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tools based on libphonenumber metadata:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scala: &lt;a href=&#34;https://github.com/mr-tolmach/raf&#34;&gt;https://github.com/mr-tolmach/raf&lt;/a&gt; - library for generating valid phone numbers in the E.164 format&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>