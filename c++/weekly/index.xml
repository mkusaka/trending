<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-25T01:53:17Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>YimMenu/YimMenu</title>
    <updated>2023-06-25T01:53:17Z</updated>
    <id>tag:github.com,2023-06-25:/YimMenu/YimMenu</id>
    <link href="https://github.com/YimMenu/YimMenu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;YimMenu, a GTA V menu protecting against a wide ranges of the public crashes and improving the overall experience.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;YimMenu&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?color=ffab00&amp;amp;label=Online%20Version&amp;amp;query=%24.game.online&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2FYimMenu%2FYimMenu%2Fmaster%2Fmetadata.json&amp;amp;style=flat-square&amp;amp;labelColor=000000&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/dynamic/json?color=ffab00&amp;amp;label=Game%20Build&amp;amp;query=%24.game.build&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2FYimMenu%2FYimMenu%2Fmaster%2Fmetadata.json&amp;amp;style=flat-square&amp;amp;labelColor=000000&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A mod menu base for Grand Theft Auto V. Strictly for educational purposes.&lt;/p&gt; &#xA;&lt;p&gt;YimMenu is originally based of off &lt;a href=&#34;https://github.com/Pocakking/BigBaseV2&#34;&gt;BigBaseV2&lt;/a&gt; which was an amazing base at the time but nowadays is a bit dated. So here I am with an up-to-date menu focusing on protecting the user from toxic modders.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#how-to-build&#34;&gt;How to build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#make-your-own-flavour-of-yimmenu&#34;&gt;Make your own flavour of YimMenu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#staying-up-to-date&#34;&gt;Staying Up To Date&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#project-structure&#34;&gt;Project Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to compile YimMenu&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://github.com/YimMenu/YimMenu/wiki/Setup-your-PC-for-YimMenu-Development&#34;&gt;SETUP&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;h2&gt;Make your own flavour of YimMenu&lt;/h2&gt; &#xA;&lt;p&gt;Fork YimMenu and git clone that repository instead of &lt;a href=&#34;https://github.com/YimMenu/YimMenu.git&#34;&gt;https://github.com/YimMenu/YimMenu.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click the below link to make your own fork of YimMenu: &lt;a href=&#34;https://github.com/YimMenu/YimMenu/fork&#34;&gt;https://github.com/YimMenu/YimMenu/fork&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Staying Up To Date&lt;/h2&gt; &#xA;&lt;p&gt;Pull the latest changes from this repository.&lt;/p&gt; &#xA;&lt;p&gt;With a command line it is as easy as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CMake should be handling removed / added files automatically without any user input.&lt;/p&gt; &#xA;&lt;p&gt;If this is not the case for some reason you&#39;ll have to redo the steps in the &lt;a href=&#34;https://github.com/YimMenu/YimMenu/wiki/Setup-your-PC-for-YimMenu-Development#making-changes-to-the-source-code&#34;&gt;Making changes to the source code section of the SETUP&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are doing custom modifications to the codebase and have a fork you are on your own for staying up to date with upstream (this repository), google stuff like &#34;merge from upstream&#34; and learn how to use Git.&lt;/p&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;backend/&lt;/code&gt; all features that should be ran in a loop are in here sorted by category&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gui/&lt;/code&gt; includes everything related to UI elements&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hooks/&lt;/code&gt; function hooks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;native_hooks/&lt;/code&gt; hooks to natives&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;services/&lt;/code&gt; service files to interact and maintain stuff&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;util/&lt;/code&gt; general utility functions to keep code as compact and as much in one place as possible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;re free to contribute to YimMenu as long as the features are useful, not overly toxic and do not contain anything money related that might get the menu targeted by Take2.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to read the &lt;a href=&#34;https://raw.githubusercontent.com/YimMenu/YimMenu/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pentilm/FDTDMetamaterial</title>
    <updated>2023-06-25T01:53:17Z</updated>
    <id>tag:github.com,2023-06-25:/pentilm/FDTDMetamaterial</id>
    <link href="https://github.com/pentilm/FDTDMetamaterial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C++ codes for FDTD Maxwell&#39;s equation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FDTD for Metamaterial Backward Wave Propagation Simulation&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the C++ source code for simulating metamaterial backward wave propagation using the Finite-Difference Time-Domain (FDTD) method.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pentilm/FDTDMetamaterial/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pentilm/FDTDMetamaterial/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pentilm/FDTDMetamaterial/master/#acknowledgments&#34;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To run the simulation, execute the &lt;code&gt;drive.cpp&lt;/code&gt; file. You can do this by compiling the file with a C++ compiler like g++, and then running the executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;g++ -o drive drive.cpp&#xA;./drive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the GPL License. For more information, see the LICENSE.md file in this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;This code has been developed and analyzed based on the principles outlined in the following paper:&lt;/p&gt; &#xA;&lt;p&gt;Wang, X., Li, J. and Fang, Z., 2018. Development and analysis of Crank‐Nicolson scheme for metamaterial Maxwell&#39;s equations on nonuniform rectangular grids. Numerical Methods for Partial Differential Equations, 34(6), pp.2040-2059.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mrousavy/react-native-mmkv</title>
    <updated>2023-06-25T01:53:17Z</updated>
    <id>tag:github.com,2023-06-25:/mrousavy/react-native-mmkv</id>
    <link href="https://github.com/mrousavy/react-native-mmkv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚡️ The fastest key/value storage for React Native. ~30x faster than AsyncStorage!&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://margelo.io&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/img/banner.svg?sanitize=true&#34; width=&#34;100%&#34;&gt; &lt;/a&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;MMKV&lt;/h1&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt;The fastest key/value storage for React Native.&lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a align=&#34;center&#34; href=&#34;https://github.com/mrousavy?tab=followers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/followers/mrousavy?label=Follow%20%40mrousavy&amp;amp;style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;a align=&#34;center&#34; href=&#34;https://twitter.com/mrousavy&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/mrousavy?label=Follow%20%40mrousavy&amp;amp;style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://github.com/sponsors/mrousavy&#34;&gt; &lt;img align=&#34;right&#34; width=&#34;160&#34; alt=&#34;This library helped you? Consider sponsoring!&#34; src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/.github/funding-octocat.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;MMKV&lt;/strong&gt; is an efficient, small mobile key-value storage framework developed by WeChat. See &lt;a href=&#34;https://github.com/Tencent/MMKV&#34;&gt;Tencent/MMKV&lt;/a&gt; for more information&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;react-native-mmkv&lt;/strong&gt; is a library that allows you to easily use &lt;strong&gt;MMKV&lt;/strong&gt; inside your React Native applications. It provides fast and direct bindings to the native C++ library which are accessible through a simple JS API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Get&lt;/strong&gt; and &lt;strong&gt;set&lt;/strong&gt; strings, booleans and numbers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fully synchronous&lt;/strong&gt; calls, no async/await, no Promises, no Bridge.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Encryption&lt;/strong&gt; support (secure storage)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple instances&lt;/strong&gt; support (separate user-data with global data)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customize storage location&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High performance&lt;/strong&gt; because everything is &lt;strong&gt;written in C++&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;~30x faster than AsyncStorage&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Uses &lt;a href=&#34;https://github.com/react-native-community/discussions-and-proposals/issues/91&#34;&gt;&lt;strong&gt;JSI&lt;/strong&gt;&lt;/a&gt; instead of the &#34;old&#34; Bridge&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;iOS&lt;/strong&gt;, &lt;strong&gt;Android&lt;/strong&gt; and &lt;strong&gt;Web&lt;/strong&gt; support&lt;/li&gt; &#xA; &lt;li&gt;Easy to use &lt;strong&gt;React Hooks&lt;/strong&gt; API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;a href=&#34;https://getstream.io/chat/react-native-chat/tutorial/?utm_source=Github&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=Github_Jan2022_ReactNative&amp;amp;utm_term=react-native-mmkv&#34;&gt; &lt;img align=&#34;right&#34; src=&#34;https://theme.zdassets.com/theme_assets/9442057/efc3820e436f9150bc8cf34267fff4df052a1f9c.png&#34; height=&#34;40&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;react-native-mmkv is sponsored by &lt;strong&gt;getstream.io&lt;/strong&gt;. &lt;br&gt; &lt;a href=&#34;https://getstream.io/chat/react-native-chat/tutorial/?utm_source=Github&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=Github_Jan2022_ReactNative&amp;amp;utm_term=react-native-mmkv&#34;&gt;Try the React Native Chat tutorial 💬&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mrousavy/StorageBenchmark&#34;&gt;StorageBenchmark&lt;/a&gt; compares popular storage libraries against each other by reading a value from storage for 1000 times:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/mrousavy/StorageBenchmark&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/img/benchmark_1000_get.png&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt; &lt;b&gt;MMKV vs other storage libraries&lt;/b&gt;: Reading a value from Storage 1000 times. &lt;br&gt; Measured in milliseconds on an iPhone 11 Pro, lower is better. &lt;br&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;React Native&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn add react-native-mmkv&#xA;cd ios &amp;amp;&amp;amp; pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx expo install react-native-mmkv&#xA;npx expo prebuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Create a new instance&lt;/h3&gt; &#xA;&lt;p&gt;To create a new instance of the MMKV storage, use the &lt;code&gt;MMKV&lt;/code&gt; constructor. It is recommended that you re-use this instance throughout your entire app instead of creating a new instance each time, so &lt;code&gt;export&lt;/code&gt; the &lt;code&gt;storage&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;h4&gt;Default&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { MMKV } from &#39;react-native-mmkv&#39;&#xA;&#xA;export const storage = new MMKV()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates a new storage instance using the default MMKV storage ID (&lt;code&gt;mmkv.default&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;App Groups&lt;/h4&gt; &#xA;&lt;p&gt;If you want to share MMKV data between your app and other apps or app extensions in the same group, open &lt;code&gt;Info.plist&lt;/code&gt; and create an &lt;code&gt;AppGroup&lt;/code&gt; key with your app group&#39;s value. MMKV will then automatically store data inside the app group which can be read and written to from other apps or app extensions in the same group by making use of MMKV&#39;s multi processing mode. See &lt;a href=&#34;https://developer.apple.com/documentation/xcode/configuring-app-groups&#34;&gt;Configuring App Groups&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Customize&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { MMKV } from &#39;react-native-mmkv&#39;&#xA;&#xA;export const storage = new MMKV({&#xA;  id: `user-${userId}-storage`,&#xA;  path: `${USER_DIRECTORY}/storage`,&#xA;  encryptionKey: &#39;hunter2&#39;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates a new storage instance using a custom MMKV storage ID. By using a custom storage ID, your storage is separated from the default MMKV storage of your app.&lt;/p&gt; &#xA;&lt;p&gt;The following values can be configured:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;id&lt;/code&gt;: The MMKV instance&#39;s ID. If you want to use multiple instances, use different IDs. For example, you can separate the global app&#39;s storage and a logged-in user&#39;s storage. (required if &lt;code&gt;path&lt;/code&gt; or &lt;code&gt;encryptionKey&lt;/code&gt; fields are specified, otherwise defaults to: &lt;code&gt;&#39;mmkv.default&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: The MMKV instance&#39;s root path. By default, MMKV stores file inside &lt;code&gt;$(Documents)/mmkv/&lt;/code&gt;. You can customize MMKV&#39;s root directory on MMKV initialization (documentation: &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/iOS_advance#customize-location&#34;&gt;iOS&lt;/a&gt; / &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/android_advance#customize-location&#34;&gt;Android&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;encryptionKey&lt;/code&gt;: The MMKV instance&#39;s encryption/decryption key. By default, MMKV stores all key-values in plain text on file, relying on iOS&#39;s/Android&#39;s sandbox to make sure the file is encrypted. Should you worry about information leaking, you can choose to encrypt MMKV. (documentation: &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/iOS_advance#encryption&#34;&gt;iOS&lt;/a&gt; / &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/android_advance#encryption&#34;&gt;Android&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Set&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;storage.set(&#39;user.name&#39;, &#39;Marc&#39;)&#xA;storage.set(&#39;user.age&#39;, 21)&#xA;storage.set(&#39;is-mmkv-fast-asf&#39;, true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const username = storage.getString(&#39;user.name&#39;) // &#39;Marc&#39;&#xA;const age = storage.getNumber(&#39;user.age&#39;) // 21&#xA;const isMmkvFastAsf = storage.getBoolean(&#39;is-mmkv-fast-asf&#39;) // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Keys&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// checking if a specific key exists&#xA;const hasUsername = storage.contains(&#39;user.name&#39;)&#xA;&#xA;// getting all keys&#xA;const keys = storage.getAllKeys() // [&#39;user.name&#39;, &#39;user.age&#39;, &#39;is-mmkv-fast-asf&#39;]&#xA;&#xA;// delete a specific key + value&#xA;storage.delete(&#39;user.name&#39;)&#xA;&#xA;// delete all keys&#xA;storage.clearAll()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Objects&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const user = {&#xA;  username: &#39;Marc&#39;,&#xA;  age: 21&#xA;}&#xA;&#xA;// Serialize the object into a JSON string&#xA;storage.set(&#39;user&#39;, JSON.stringify(user))&#xA;&#xA;// Deserialize the JSON string into an object&#xA;const jsonUser = storage.getString(&#39;user&#39;) // { &#39;username&#39;: &#39;Marc&#39;, &#39;age&#39;: 21 }&#xA;const userObject = JSON.parse(jsonUser)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encryption&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// encrypt all data with a private key&#xA;storage.recrypt(&#39;hunter2&#39;)&#xA;&#xA;// remove encryption&#xA;storage.recrypt(undefined)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Buffers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;storage.set(&#39;someToken&#39;, new Uint8Array([1, 100, 255]))&#xA;const buffer = storage.getBuffer(&#39;someToken&#39;)&#xA;console.log(buffer) // [1, 100, 255]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing with Jest&lt;/h2&gt; &#xA;&lt;p&gt;A mocked MMKV instance is automatically used when testing with Jest, so you will be able to use &lt;code&gt;new MMKV()&lt;/code&gt; as per normal in your tests. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/example/test/MMKV.test.ts&#34;&gt;example/test/MMKV.test.ts&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/docs/HOOKS.md&#34;&gt;Hooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/docs/LISTENERS.md&#34;&gt;Value-change Listeners&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/docs/MIGRATE_FROM_ASYNC_STORAGE.md&#34;&gt;Migrate from AsyncStorage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/docs/WRAPPER_REDUX.md&#34;&gt;Using MMKV with redux-persist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/docs/WRAPPER_RECOIL.md&#34;&gt;Using MMKV with recoil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/docs/WRAPPER_MOBX.md&#34;&gt;Using MMKV with mobx-persist-storage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/docs/WRAPPER_MOBXPERSIST.md&#34;&gt;Using MMKV with mobx-persist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/docs/WRAPPER_ZUSTAND_PERSIST_MIDDLEWARE.md&#34;&gt;Using MMKV with zustand persist-middleware&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/docs/WRAPPER_JOTAI.md&#34;&gt;Using MMKV with jotai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/docs/WRAPPER_REACT_QUERY.md&#34;&gt;Using MMKV with react-query&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrousavy/react-native-mmkv/issues/100#issuecomment-886477361&#34;&gt;How is this library different from &lt;strong&gt;react-native-mmkv-storage&lt;/strong&gt;?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LocalStorage and In-Memory Storage (Web)&lt;/h2&gt; &#xA;&lt;p&gt;If a user chooses to disable LocalStorage in their browser, the library will automatically provide a limited in-memory storage as an alternative. However, this in-memory storage won&#39;t persist data, and users may experience data loss if they refresh the page or close their browser. To optimize user experience, consider implementing a suitable solution within your app to address this scenario.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;As the library uses JSI for synchronous native methods access, remote debugging (e.g. with Chrome) is no longer possible. Instead, you should use &lt;a href=&#34;https://fbflipper.com&#34;&gt;Flipper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Flipper&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/muchobien/flipper-plugin-react-native-mmkv&#34;&gt;flipper-plugin-react-native-mmkv&lt;/a&gt; to debug your MMKV storage using Flipper. You can also simply &lt;code&gt;console.log&lt;/code&gt; an MMKV instance.&lt;/p&gt; &#xA;&lt;h3&gt;Reactotron&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://www.npmjs.com/package/reactotron-react-native-mmkv&#34;&gt;reactotron-react-native-mmkv&lt;/a&gt; to automatically log writes to your MMKV storage using Reactotron. &lt;a href=&#34;https://www.npmjs.com/package/reactotron-react-native-mmkv&#34;&gt;See the docs for how to setup this plugin with Reactotron.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Adopting at scale&lt;/h2&gt; &#xA;&lt;p&gt;react-native-mmkv is provided &lt;em&gt;as is&lt;/em&gt;, I work on it in my free time.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re integrating react-native-mmkv in a production app, consider &lt;a href=&#34;https://github.com/sponsors/mrousavy&#34;&gt;funding this project&lt;/a&gt; and &lt;a href=&#34;mailto:me@mrousavy.com?subject=Adopting react-native-mmkv at scale&#34;&gt;contact me&lt;/a&gt; to receive premium enterprise support, help with issues, prioritize bugfixes, request features, help at integrating react-native-mmkv, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-mmkv/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to learn how to contribute to the repository and the development workflow.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>