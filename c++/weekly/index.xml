<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-06T01:40:20Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/perfetto</title>
    <updated>2025-07-06T01:40:20Z</updated>
    <id>tag:github.com,2025-07-06:/google/perfetto</id>
    <link href="https://github.com/google/perfetto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Production-grade client-side tracing, profiling, and analysis for complex software systems.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Perfetto - System profiling, app tracing and trace analysis&lt;/h1&gt; &#xA;&lt;p&gt;Perfetto is an open-source suite of SDKs, daemons and tools which use &lt;strong&gt;tracing&lt;/strong&gt; to help developers understand the behaviour of complex systems and root-cause functional and performance issues on client and embedded systems.&lt;/p&gt; &#xA;&lt;p&gt;It is a production-grade tool that is the default tracing system for the &lt;strong&gt;Android operating system&lt;/strong&gt; and the &lt;strong&gt;Chromium browser&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/perfetto/main/docs/images/perfetto-stack.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Core Components&lt;/h2&gt; &#xA;&lt;p&gt;Perfetto is not a single tool, but a collection of components that work together:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;High-performance tracing daemons:&lt;/strong&gt; For capturing tracing information from many processes on a single machine into a unified trace file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Low-overhead tracing SDK:&lt;/strong&gt; A C++17 library for direct userspace-to-userspace tracing of timings and state changes in your application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensive OS-level probes:&lt;/strong&gt; For capturing system-wide context on Android and Linux (e.g. scheduling states, CPU frequencies, memory profiling, callstack sampling).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Browser-based UI:&lt;/strong&gt; A powerful, fully local UI for visualizing and exploring large, multi-GB traces on a timeline. It works in all major browsers, requires no installation, and can open traces from other tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SQL-based analysis library:&lt;/strong&gt; A powerful engine that allows you to programmatically query traces using SQL to automate analysis and extract custom metrics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why Use Perfetto?&lt;/h2&gt; &#xA;&lt;p&gt;Perfetto was designed to be a versatile and powerful tracing system for a wide range of use cases.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;For Android App &amp;amp; Platform Developers:&lt;/strong&gt; Debug and root-cause functional and performance issues like slow startups, dropped frames (jank), animation glitches, low memory kills, and ANRs. Profile both Java/Kotlin and native C++ memory usage with heap dumps and profiles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For C/C++ Developers (Linux, macOS, Windows):&lt;/strong&gt; Use the &lt;a href=&#34;https://raw.githubusercontent.com/google/perfetto/main/docs/instrumentation/tracing-sdk.md&#34;&gt;Tracing SDK&lt;/a&gt; to instrument your application with custom trace points to understand its execution flow, find performance bottlenecks, and debug complex behavior. On Linux, you can also perform detailed CPU and native heap profiling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For Linux Kernel &amp;amp; System Developers:&lt;/strong&gt; Get deep insights into kernel behavior. Perfetto acts as an efficient userspace daemon for &lt;code&gt;ftrace&lt;/code&gt;, allowing you to visualize scheduling, syscalls, interrupts, and custom kernel tracepoints on a timeline.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For Chromium Developers:&lt;/strong&gt; Perfetto is the tracing backend for &lt;code&gt;chrome://tracing&lt;/code&gt;. Use it to debug and root-cause issues in the browser, V8, and Blink.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For Performance Engineers &amp;amp; SREs:&lt;/strong&gt; Analyze and visualize a wide range of profiling and tracing formats, not just Perfetto&#39;s. Use the powerful SQL interface to programmatically analyze traces from tools like &lt;strong&gt;Linux perf&lt;/strong&gt;, &lt;strong&gt;macOS Instruments&lt;/strong&gt;, &lt;strong&gt;Chrome JSON traces&lt;/strong&gt;, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve designed our documentation to guide you to the right information as quickly as possible, whether you&#39;re a newcomer to performance analysis or an experienced developer.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;New to tracing?&lt;/strong&gt; If you&#39;re unfamiliar with concepts like tracing and profiling, start here:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/perfetto/main/docs/tracing-101.md&#34;&gt;&lt;strong&gt;What is Tracing?&lt;/strong&gt;&lt;/a&gt; - A gentle introduction to the world of performance analysis.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ready to dive in?&lt;/strong&gt; Our &#34;Getting Started&#34; guide is the main entry point for all users. It will help you find the right tutorials and documentation for your specific needs:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/perfetto/main/docs/getting-started/start-using-perfetto.md&#34;&gt;&lt;strong&gt;How do I start using Perfetto?&lt;/strong&gt;&lt;/a&gt; - Find your path based on your role and goals (e.g., Android App Developer, C/C++ Developer, etc.).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Want the full overview?&lt;/strong&gt; For a comprehensive look at what Perfetto is, why it&#39;s useful, and who uses it, see our main documentation page:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/perfetto/main/docs/README.md&#34;&gt;&lt;strong&gt;Perfetto Documentation Home&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Community &amp;amp; Support&lt;/h2&gt; &#xA;&lt;p&gt;Have questions? Need help?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/google/perfetto/discussions/categories/q-a&#34;&gt;GitHub Discussions&lt;/a&gt;:&lt;/strong&gt; For Q&amp;amp;A and general discussions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/google/perfetto/issues&#34;&gt;GitHub Issues&lt;/a&gt;:&lt;/strong&gt; For bug reports.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://discord.gg/35ShE3A&#34;&gt;Discord&lt;/a&gt;:&lt;/strong&gt; For live chat with the community and developers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We follow &lt;a href=&#34;https://opensource.google/conduct/&#34;&gt;Google&#39;s Open Source Community Guidelines&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>unitreerobotics/unitree_sdk2</title>
    <updated>2025-07-06T01:40:20Z</updated>
    <id>tag:github.com,2025-07-06:/unitreerobotics/unitree_sdk2</id>
    <link href="https://github.com/unitreerobotics/unitree_sdk2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unitree robot sdk version 2. https://support.unitree.com/home/zh/developer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;unitree_sdk2&lt;/h1&gt; &#xA;&lt;p&gt;Unitree robot sdk version 2.&lt;/p&gt; &#xA;&lt;h3&gt;Prebuild environment&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OS (Ubuntu 20.04 LTS)&lt;/li&gt; &#xA; &lt;li&gt;CPU (aarch64 and x86_64)&lt;/li&gt; &#xA; &lt;li&gt;Compiler (gcc version 9.4.0)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build examples&lt;/h3&gt; &#xA;&lt;p&gt;To build the examples inside this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To build your own application with the SDK, you can install the unitree_sdk2 to your system directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install unitree_sdk2 to a specified directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cd build&#xA;cmake .. -DCMAKE_INSTALL_PREFIX=/opt/unitree_robotics&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can refer to &lt;code&gt;example/cmake_sample&lt;/code&gt; on how to import the unitree_sdk2 into your CMake project.&lt;/p&gt; &#xA;&lt;p&gt;Note that if you install the library to other places other than &lt;code&gt;/opt/unitree_robotics&lt;/code&gt;, you need to make sure the path is added to &#34;${CMAKE_PREFIX_PATH}&#34; so that cmake can find it with &#34;find_package()&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Notice&lt;/h3&gt; &#xA;&lt;p&gt;For more reference information, please go to &lt;a href=&#34;https://support.unitree.com/home/zh/developer&#34;&gt;Unitree Document Center&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bytedance/btrace</title>
    <updated>2025-07-06T01:40:20Z</updated>
    <id>tag:github.com,2025-07-06:/bytedance/btrace</id>
    <link href="https://github.com/bytedance/btrace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ”¥ðŸ”¥ btrace (AKA RheaTrace) is a high-performance Android &amp; iOS tracing tool built on Perfetto. It not only times your methods but also reveals why theyâ€™re slow.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;btrace&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache-brightgreen.svg?style=flat&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/release-3.0.0-red.svg?style=flat&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/btrace/master/README.zh-CN.md&#34;&gt;README ä¸­æ–‡ç‰ˆ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/btrace/master/#btrace-for-android&#34;&gt;btrace for Android&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/btrace/master/#btrace-for-ios&#34;&gt;btrace for iOS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Major Update&lt;/h2&gt; &#xA;&lt;p&gt;We are proud to announce the launch of btrace 3.0, introducing an industry-first high-performance synchronized sampling-based tracing solution. Additionally, the new version now provides comprehensive iOS tracing capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;btrace for Android&lt;/h2&gt; &#xA;&lt;h3&gt;Integration&lt;/h3&gt; &#xA;&lt;p&gt;Add dependencies in app/build.gradle file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;    if (enable_btrace == &#39;true&#39;) {&#xA;        implementation &#39;com.bytedance.btrace:rhea-inhouse:3.0.0&#39;&#xA;    } else {&#xA;        implementation &#39;com.bytedance.btrace:rhea-inhouse-noop:3.0.0&#39;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;enable_btrace&lt;/code&gt; switch in the gradle.properties file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Turn on this switch when you want to build app that support tracing.&#xA;enable_btrace=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add initialization code in &lt;code&gt;attachBaseContext()&lt;/code&gt; method of your Application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;public class MyApp extends Application {&#xA;&#xA;    @Override&#xA;    protected void attachBaseContext(Context base) {&#xA;        super.attachBaseContext(base);&#xA;        // When rhea-inhouse-noop is used, RheaTrace3.init() has empty implementation.&#xA;        RheaTrace3.init(base);&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;To use btrace 3.0, follow these instructions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure that your computer has integrated adb and Java and Python3 environment.&lt;/li&gt; &#xA; &lt;li&gt;Connect your phone to your computer and make sure it can recognized by adb devices.&lt;/li&gt; &#xA; &lt;li&gt;Install the APK that integrates btrace 3.0 on your phone.&lt;/li&gt; &#xA; &lt;li&gt;Download the latest script from &#34;Script Management&#34; below to your computer.&lt;/li&gt; &#xA; &lt;li&gt;In the directory where the computer script is located, execute the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;java -jar rhea-trace-shell.jar -a ${your_package_name} -t 10 -o output.pb -r sched&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Open the generated trace file in &lt;a href=&#34;https://ui.perfetto.dev/&#34;&gt;https://ui.perfetto.dev/&lt;/a&gt; for detailed analysis.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Script Management&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Release Date&lt;/th&gt; &#xA;   &lt;th&gt;jar&lt;/th&gt; &#xA;   &lt;th&gt;Release Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.0.0&lt;/td&gt; &#xA;   &lt;td&gt;2025-06-10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://oss.sonatype.org/service/local/repositories/releases/content/com/bytedance/btrace/rhea-trace-processor/3.0.0/rhea-trace-processor-3.0.0.jar&#34;&gt;rhea-trace-shell-3.0.0.jar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;3.0 first release&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Parameters Description&lt;/h4&gt; &#xA;&lt;h5&gt;Required Parameters&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Default Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-a $applicationName&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the package name of your app&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;Optional Parameters&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Default Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-o $outputPath&lt;/td&gt; &#xA;   &lt;td&gt;${applicationName}_yyyy_MM_dd_HH_mm_ss.pb&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the path where the trace artifact is saved. By default, the value is autogenerated based on the tracing app package name and current timestamp.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-t $timeInSecond&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the duration of the tracing, in seconds.&lt;br&gt;Note that: On MacOS, interactive tracing mode will be activated if you don&#39;t specifying the tracing duration. On windows, tracing dration must be specified, because we don&#39;t support interactive tracing mode on Windows currently.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-m $mappingPath&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the mapping file path for the abofuscated app.&lt;br&gt;Note that: it&#39;s not the methodMapping file that was used in btrace 2.0, but the mapping file generated by proguard. There is no methodMapping file in btrace 3.0.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-mode $mode&lt;/td&gt; &#xA;   &lt;td&gt;Decided at runtime.&lt;/td&gt; &#xA;   &lt;td&gt;btrace currently support two kinds of modes: &#xA;    &lt;ol&gt;&#xA;     &lt;li&gt;perfetto: The default mode for systems 8.1 and above, allowing collecting system atrace and ftrace using perfetto service besides the app trace.&lt;/li&gt; &#xA;     &lt;li&gt;simple: The default mode for systems below 8.1, allowin collecting app trace only.&lt;/li&gt;&#xA;    &lt;/ol&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-maxAppTraceBufferSize $size&lt;/td&gt; &#xA;   &lt;td&gt;200000&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the maximum count of stacktraces that our buffer allows to save, previously saved stacktraces will be overwritten if the maximum limit is met.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-sampleInterval $ns&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the minimum sampling backtracing interval in nanoseconds.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-waitTraceTimeout&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the timeout seconds for waiting for tracing data writing to complete and being pulled to the PC.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-s $serial&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the device connected by adb.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-r&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Automatically restarts the app to tracing the start up stage.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--list&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays a list of supported atrace categories for the device.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Known Issues&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Problems&lt;/th&gt; &#xA;   &lt;th&gt;Advices&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;We currently only support devices running Android 8.0 or higher.&lt;/td&gt; &#xA;   &lt;td&gt;Please use devices with Android 8.0 or higher.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Java object allocation monitoring is not yet adapted for devices with Android 15 and above.&lt;/td&gt; &#xA;   &lt;td&gt;If you need to inspect object memory allocation information or require more detailed tracing, please use devices with Android versions below 15.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Devices that do not support Perfetto (mostly systems before 8.1) cannot collect system information such as CPU scheduling.&lt;/td&gt; &#xA;   &lt;td&gt;Try with -mode simple.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;32-bit devices or applications cannot collect tracing data.&lt;/td&gt; &#xA;   &lt;td&gt;Please install and use 64-bit applications on 64-bit devices.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;btrace for iOS&lt;/h2&gt; &#xA;&lt;p&gt;Record trace data offline without Instruments to help find performance issue of your app.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Clone source code, and add the following lines to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;BTrace&#39;, :path =&amp;gt; &#39;xxx/btrace-iOS&#39;&#xA;pod &#39;BTraceDebug&#39;, :path =&amp;gt; &#39;xxx/btrace-iOS&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install command line tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# using homebrew&#xA;brew install libusbmuxd&#xA;brew install poetry&#xA;# install from the BTraceTool directory&#xA;poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h4&gt;Record&lt;/h4&gt; &#xA;&lt;p&gt;Note that if &#39;-l&#39; is not specified, app must have been launched before recording.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m btrace record [-h] [-i DEVICE_ID] [-b BUNDLE_ID] [-o OUTPUT] [-t TIME_LIMIT] [-d DSYM_PATH] [-m] [-l] [-s]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Options&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-h, --help&lt;/td&gt; &#xA;   &lt;td&gt;Show help&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-i DEVICE_ID, --device_id DEVICE_ID&lt;/td&gt; &#xA;   &lt;td&gt;Device id. If not specified: &lt;br&gt;Â· If only one device is connected to Mac, it will be chosen &lt;br&gt;Â· If multiple devices are connected to Mac, prompt the user to make a selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-b BUNDLE_ID --bundle_id BUNDLE_ID&lt;/td&gt; &#xA;   &lt;td&gt;Bundle id&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-o OUTPUT --output OUTPUT&lt;/td&gt; &#xA;   &lt;td&gt;Output path. If not specified, data will be saved to &#39;~/Desktop/btrace&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-t TIME_LIMIT --time_limit TIME_LIMIT&lt;/td&gt; &#xA;   &lt;td&gt;Limit recording time, default 3600s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-d DSYM_PATH --dsym_path DSYM_PATH&lt;/td&gt; &#xA;   &lt;td&gt;Dsym file path, or app path built by Xcode in debug mode. If specifiedï¼Œflamegraph will be displayed automatically after the recording ends&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-m --main_thread_only&lt;/td&gt; &#xA;   &lt;td&gt;If given, only record main thread trace data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-l --launch&lt;/td&gt; &#xA;   &lt;td&gt;If given, app will be launched/relaunched, and start recording on app launch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-s --sys_symbol&lt;/td&gt; &#xA;   &lt;td&gt;If given, symbols in the system libraries will be parsed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;Examples&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m btrace record -i xxx -b xxx -d /xxxDebug-iphoneos/xxx.app&#xA;python3 -m btrace record -i xxx -b xxx -d /xxxDebug-iphoneos/xxx.dSYM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Stop&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ctrl + c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Parse&lt;/h4&gt; &#xA;&lt;p&gt;When should the &#39;parse&#39; command used?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#39;-d&#39; option is not specified in the &#39;record&#39; command.&lt;/li&gt; &#xA; &lt;li&gt;reopen the parsed data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m btrace parse [-h] [-d DSYM_PATH] [-f] [-s] file_path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Options&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-h, --help&lt;/td&gt; &#xA;   &lt;td&gt;Show help&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-d DSYM_PATH, --dsym_path DSYM_PATH&lt;/td&gt; &#xA;   &lt;td&gt;Dsym file path, or app path built by Xcode in debug mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-s, --sys_symbol&lt;/td&gt; &#xA;   &lt;td&gt;If given, symbols in the system libraries will be parsed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-f, --force&lt;/td&gt; &#xA;   &lt;td&gt;If given, force re-parsing trace data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;Examples&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;btrace parse -d /xxx.dSYM xxx.sqlite&#xA;btrace parse -d /xxx.app xxx.sqlite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Technology Principle&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in the internal details of btrace 3.0, you can refer to the document: &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/btrace/master/INTRODUCTION.MD&#34;&gt;btrace 3.0 Internal Principle in Detail!&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve made a lot of improvements in btrace 3.0, including better error prompts. There might still be some cases where the prompts aren&#39;t accurate enough or the messages aren&#39;t clear. If you run into any issues, just give us a shout in the Lark group below, and we&#39;ll do our best to help you out. We always appreciate any other feedback or suggestions you might have too, thanks you!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bytedance/btrace/master/assets/b/en/lark.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/btrace/master/CONTRIBUTING.MD&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/btrace/master/LICENSE&#34;&gt;Apache License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>