<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-21T01:53:06Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jomjol/AI-on-the-edge-device</title>
    <updated>2022-08-21T01:53:06Z</updated>
    <id>tag:github.com,2022-08-21:/jomjol/AI-on-the-edge-device</id>
    <link href="https://github.com/jomjol/AI-on-the-edge-device" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AI-on-the-edge-device&lt;/h1&gt; &#xA;&lt;p&gt;This is an example of Artificial Intelligence (AI) calculations on a very cheap hardware.&lt;/p&gt; &#xA;&lt;h3&gt;Details on &lt;strong&gt;function&lt;/strong&gt;, &lt;strong&gt;installation&lt;/strong&gt; and &lt;strong&gt;configuration&lt;/strong&gt; can be found on the &lt;strong&gt;&lt;a href=&#34;https://github.com/jomjol/AI-on-the-edge-device/wiki&#34;&gt;Wiki Page&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A 3d-printable housing can be found here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thingiverse.com/thing:4573481&#34;&gt;https://www.thingiverse.com/thing:4573481&lt;/a&gt; (Water Meter)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thingiverse.com/thing:5028229&#34;&gt;https://www.thingiverse.com/thing:5028229&lt;/a&gt; (Power Meter)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thingiverse.com/thing:4571627&#34;&gt;https://www.thingiverse.com/thing:4571627&lt;/a&gt; (ESP32-Cam housing only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/images/watermeter_all.jpg&#34; width=&#34;200&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/images/main.jpg&#34; width=&#34;200&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/images/size.png&#34; width=&#34;200&#34;&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/images/watermeter.jpg&#34; width=&#34;600&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/images/powermeter.jpg&#34; width=&#34;600&#34;&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you would like to support the developer with a cup of coffee you can do that via &lt;a href=&#34;https://www.paypal.com/donate?hosted_button_id=8TRSVYNYKDSWL&#34;&gt;Paypal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;form action=&#34;https://www.paypal.com/donate&#34; method=&#34;post&#34; target=&#34;_top&#34;&gt; &#xA; &lt;input type=&#34;hidden&#34; name=&#34;hosted_button_id&#34; value=&#34;8TRSVYNYKDSWL&#34;&gt; &#xA; &lt;input type=&#34;image&#34; src=&#34;https://www.paypalobjects.com/en_US/DK/i/btn/btn_donateCC_LG.gif&#34; border=&#34;0&#34; name=&#34;submit&#34; title=&#34;PayPal - The safer, easier way to pay online!&#34; alt=&#34;Donate with PayPal button&#34;&gt; &#xA; &lt;img alt=&#34;&#34; border=&#34;0&#34; src=&#34;https://www.paypal.com/en_DE/i/scr/pixel.gif&#34; width=&#34;1&#34; height=&#34;1&#34;&gt; &#xA;&lt;/form&gt; If you have any technical topics, you can file a issue in this repository. &#xA;&lt;p&gt;In other cases you can contact the developer via email: &lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/images/mail.jpg&#34; height=&#34;25&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Change log&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;General remark:&lt;/strong&gt; Besides the file &lt;code&gt;firmware.bin&lt;/code&gt;, typically the content of &lt;code&gt;/html&lt;/code&gt; will need to be updated!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h5&gt;11.0.1 - Intermediate Digits&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NEW v11.0.1&lt;/strong&gt;: Bug Fix InfluxDB configuration (only update of html.zip necessary)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Implementation of new CNN types to detect intermediate values of digits with rolling numbers&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;By default the old algo (0, 1, ..., 9, &#34;N&#34;) is active (due to the limited types of digits trained so far)&lt;/li&gt; &#xA;   &lt;li&gt;Activation can be done by selection a tflite file with the new trained model in the &#39;config.ini&#39;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Details can be found in the &lt;a href=&#34;https://github.com/jomjol/AI-on-the-edge-device/wiki/Neural-Network-Types&#34;&gt;wiki&lt;/a&gt;&lt;/strong&gt; (different types, trained image types, naming convention)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Updated neural network files (and adaption to new naming convention)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Published a tool to download and combine log files - **Thanks to **&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Files see &lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/tbd&#34;&gt;&#39;/tools/logfile-tool&#39;&lt;/a&gt;, How-to see &lt;a href=&#34;https://github.com/jomjol/AI-on-the-edge-device/wiki/Gasmeter-Log-Downloader&#34;&gt;wiki&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bug Fix: InfluxDB enabling in grahic configuration&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Logfile downloader and combiner (Thx to &lt;a href=&#34;https://github.com/reserve85&#34;&gt;reserve85&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Files see &lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/tbd&#34;&gt;&#39;/tools/logfile-tool&#39;&lt;/a&gt;, How-to see &lt;a href=&#34;https://github.com/jomjol/AI-on-the-edge-device/wiki/Gasmeter-Log-Downloader&#34;&gt;wiki&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional Ideas&lt;/h2&gt; &#xA;&lt;p&gt;There are some ideas and feature requests which are not followed currently - mainly due to capacity reasons on side of the developer. They are collected here: &lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/FeatureRequest.md&#34;&gt;FeatureRequest.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;h5&gt;10.6.2 - Stability Increase (2022-07-24)&lt;/h5&gt; &#xA;&lt;h5&gt;9.2.0 - External Illumination (2021-12-02)&lt;/h5&gt; &#xA;&lt;h5&gt;8.5.0 Multi Meter Support (2021-10-07)&lt;/h5&gt; &#xA;&lt;h5&gt;7.1.2 MQTT-Update - (2021-06-17)&lt;/h5&gt; &#xA;&lt;h5&gt;6.7.2 Image Processing in Memory - (2021-05-01)&lt;/h5&gt; &#xA;&lt;h5&gt;5.0.0 Setup Modus - (2020-12-06)&lt;/h5&gt; &#xA;&lt;h5&gt;4.1.1 Configuration editor - (2020-12-02)&lt;/h5&gt; &#xA;&lt;h5&gt;4.0.0 Tflite Core - (2020-11-15)&lt;/h5&gt; &#xA;&lt;h5&gt;3.1.0 MQTT-Client - (2020-10-26)&lt;/h5&gt; &#xA;&lt;h5&gt;2.2.1 Version Control - (2020-09-27)&lt;/h5&gt; &#xA;&lt;h5&gt;2.1.0 Decimal Shift, Chrome &amp;amp; Edge - (2020-09-25)&lt;/h5&gt; &#xA;&lt;h5&gt;2.0.0 Layout update - (2020-09-12)&lt;/h5&gt; &#xA;&lt;h5&gt;1.1.3 Initial Version - (2020-09-09)&lt;/h5&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/Changelog.md&#34;&gt;Full Changelog&lt;/a&gt;&lt;/h4&gt;</summary>
  </entry>
  <entry>
    <title>ValveSoftware/Proton</title>
    <updated>2022-08-21T01:53:06Z</updated>
    <id>tag:github.com,2022-08-21:/ValveSoftware/Proton</id>
    <link href="https://github.com/ValveSoftware/Proton" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compatibility tool for Steam Play based on Wine and additional components&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Proton&lt;/strong&gt; is a tool for use with the Steam client which allows games which are exclusive to Windows to run on the Linux operating system. It uses Wine to facilitate this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Most users should use Proton provided by the Steam Client itself.&lt;/strong&gt; See &lt;a href=&#34;https://steamcommunity.com/games/221410/announcements/detail/1696055855739350561&#34;&gt;this Steam Community post&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;The source code is provided to enable advanced users the ability to alter Proton. For example, some users may wish to use a different version of Wine with a particular title.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The changelog&lt;/strong&gt; is available on &lt;a href=&#34;https://github.com/ValveSoftware/Proton/wiki/Changelog&#34;&gt;our wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Obtaining Proton sources&lt;/h2&gt; &#xA;&lt;p&gt;Acquire Proton&#39;s source by cloning &lt;a href=&#34;https://github.com/ValveSoftware/Proton&#34;&gt;https://github.com/ValveSoftware/Proton&lt;/a&gt; and checking out the branch you desire.&lt;/p&gt; &#xA;&lt;p&gt;You can clone the latest Proton to your system with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recurse-submodules https://github.com/ValveSoftware/Proton.git proton&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to update submodules when switching between branches:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout experimental_6.3&#xA;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to change any subcomponent, now is the time to do so. For example, if you wish to make changes to Wine, you would apply them to the &lt;code&gt;wine/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Building Proton&lt;/h2&gt; &#xA;&lt;p&gt;Most of Proton builds inside the Proton SDK container with very few dependencies on the host side.&lt;/p&gt; &#xA;&lt;h2&gt;Preparing the build environment&lt;/h2&gt; &#xA;&lt;p&gt;You need either a Docker or a Podman setup. We highly recommend &lt;a href=&#34;https://github.com/containers/podman/raw/main/docs/tutorials/rootless_tutorial.md&#34;&gt;the rootless Podman setup&lt;/a&gt;. Please refer to your distribution&#39;s documentation for setup instructions (e.g. Arch &lt;a href=&#34;https://wiki.archlinux.org/title/Podman&#34;&gt;Podman&lt;/a&gt; / &lt;a href=&#34;https://wiki.archlinux.org/title/Docker&#34;&gt;Docker&lt;/a&gt;, Debian &lt;a href=&#34;https://wiki.debian.org/Podman&#34;&gt;Podman&lt;/a&gt; / &lt;a href=&#34;https://wiki.debian.org/Docker&#34;&gt;Docker&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;The Easy Way&lt;/h2&gt; &#xA;&lt;p&gt;We provide a top-level Makefile which will execute most of the build commands for you.&lt;/p&gt; &#xA;&lt;p&gt;After checking out the repository and updating its submodules, assuming that you have a working Docker or Podman setup, you can build and install Proton with a simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your build system is missing dependencies, it will fail quickly with a clear error message.&lt;/p&gt; &#xA;&lt;p&gt;After the build finishes, you may need to restart the Steam client to see the new Proton tool. The tool&#39;s name in the Steam client will be based on the currently checked out branch of Proton. You can override this name using the &lt;code&gt;build_name&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;make help&lt;/code&gt; for other build targets and options.&lt;/p&gt; &#xA;&lt;h2&gt;Manual building&lt;/h2&gt; &#xA;&lt;h3&gt;Configuring the build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ../build &amp;amp;&amp;amp; cd ../build&#xA;../proton/configure.sh --enable-ccache --build-name=my_build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running &lt;code&gt;configure.sh&lt;/code&gt; will create a &lt;code&gt;Makefile&lt;/code&gt; allowing you to build Proton. The scripts checks if containers are functional and prompt you if any host-side dependencies are missing. You should run the command from a directory created specifically for your build.&lt;/p&gt; &#xA;&lt;p&gt;The configuration script tries to discover a working Docker or Podman setup to use, but you can force a compatible engine with &lt;code&gt;--container-engine=&amp;lt;executable_name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can enable ccache with &lt;code&gt;--enable-cache&lt;/code&gt; flag. This will mount your &lt;code&gt;$CCACHE_DIR&lt;/code&gt; or &lt;code&gt;$HOME/.ccache&lt;/code&gt; inside the container.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--proton-sdk-image=registry.gitlab.steamos.cloud/proton/soldier/sdk:&amp;lt;version&amp;gt;&lt;/code&gt; can be used to build with a custom version of the Proton SDK images.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;code&gt;--help&lt;/code&gt; for other configuration options.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: If &lt;strong&gt;SELinux&lt;/strong&gt; is in use, the Proton build container may fail to access your user&#39;s files. This is caused by &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security-enhanced_linux/sect-security-enhanced_linux-working_with_selinux-selinux_contexts_labeling_files&#34;&gt;SELinux&#39;s filesystem labels&lt;/a&gt;. You may pass the &lt;code&gt;--relabel-volumes&lt;/code&gt; switch to configure to cause the &lt;a href=&#34;https://docs.docker.com/storage/bind-mounts/&#34;&gt;container engine to relabel its bind-mounts&lt;/a&gt; and allow access to those files from within the container. This can be dangerous when used with system directories. Proceed with caution and refer your container engine&#39;s manual.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important make targets:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; - install Proton into your user&#39;s Steam directory, see the &lt;a href=&#34;https://raw.githubusercontent.com/ValveSoftware/Proton/proton_7.0/#install-proton-locally&#34;&gt;install Proton locally&lt;/a&gt; section for details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make redist&lt;/code&gt; - create a redistribute build (&lt;code&gt;redist/&lt;/code&gt;) that can be copied to &lt;code&gt;~/.steam/root/compatibilitytools.d/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make deploy&lt;/code&gt; - create a deployment build (&lt;code&gt;deploy/&lt;/code&gt;). This is what we use to deploy Proton to Steam users via Steamworks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make module=&amp;lt;module&amp;gt; module&lt;/code&gt; - build both 32- and 64-bit versions of the specified wine module. This allows rapid iteration on one module. This target is only useful after building Proton.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make dxvk&lt;/code&gt; / &lt;code&gt;make vkd3d-proton&lt;/code&gt; - rebuild DXVK / vkd3d-proton.&lt;/p&gt; &#xA;&lt;h3&gt;Debug Builds&lt;/h3&gt; &#xA;&lt;p&gt;To prevent symbol stripping add &lt;code&gt;UNSTRIPPED_BUILD=1&lt;/code&gt; to the &lt;code&gt;make&lt;/code&gt; invocation. This should be used only with a clean build directory.&lt;/p&gt; &#xA;&lt;p&gt;E.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir ../debug-proton-build &amp;amp;&amp;amp; cd ../debug-proton-build&#xA;../proton/configure.sh --enable-ccache --build-name=debug_build&#xA;make UNSTRIPPED_BUILD=1 install`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install Proton locally&lt;/h2&gt; &#xA;&lt;p&gt;Steam ships with several versions of Proton, which games will use by default or that you can select in Steam Settings&#39; Steam Play page. Steam also supports running games with local builds of Proton, which you can install on your machine.&lt;/p&gt; &#xA;&lt;p&gt;To install a local build of Proton into Steam, make a new directory in &lt;code&gt;~/.steam/root/compatibilitytools.d/&lt;/code&gt; with a tool name of your choosing and place the directory containing your redistributable build under that path.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;make install&lt;/code&gt; target will perform this task for you, installing the Proton build into the Steam folder for the current user. You will have to restart the Steam client for it to pick up on a new tool.&lt;/p&gt; &#xA;&lt;p&gt;A correct local tool installation should look similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;compatibilitytools.d/my_proton/&#xA;├── compatibilitytool.vdf&#xA;├── filelock.py&#xA;├── LICENSE&#xA;├── proton&#xA;├── proton_dist.tar&#xA;├── toolmanifest.vdf&#xA;├── user_settings.sample.py&#xA;└── version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable your local build in Steam, go to the Steam Play section of the Settings window. If the build was correctly installed, you should see &#34;proton-localbuild&#34; in the drop-down list of compatibility tools.&lt;/p&gt; &#xA;&lt;p&gt;Each component of this software is used under the terms of their licenses. See the &lt;code&gt;LICENSE&lt;/code&gt; files here, as well as the &lt;code&gt;LICENSE&lt;/code&gt;, &lt;code&gt;COPYING&lt;/code&gt;, etc files in each submodule and directory for details. If you distribute a built version of Proton to other users, you must adhere to the terms of these licenses.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;Proton builds have their symbols stripped by default. You can switch to &#34;debug&#34; beta branch in Steam (search for Proton in your library, Properties... -&amp;gt; BETAS -&amp;gt; select &#34;debug&#34;) or build without stripping (see &lt;a href=&#34;https://raw.githubusercontent.com/ValveSoftware/Proton/proton_7.0/#debug-builds&#34;&gt;Debug Builds section&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The symbols are provided through the accompanying &lt;code&gt;.debug&lt;/code&gt; files which may need to be explicitly loaded by the debugging tools. For GDB there&#39;s a helper script &lt;code&gt;wine/tools/gdbinit.py&lt;/code&gt; (source it) that provides &lt;code&gt;load-symbol-files&lt;/code&gt; (or &lt;code&gt;lsf&lt;/code&gt; for short) command which loads the symbols for all the mapped files.&lt;/p&gt; &#xA;&lt;h2&gt;Runtime Config Options&lt;/h2&gt; &#xA;&lt;p&gt;Proton can be tuned at runtime to help certain games run. The Steam client sets some options for known games using the &lt;code&gt;STEAM_COMPAT_CONFIG&lt;/code&gt; variable. You can override these options using the environment variables described below.&lt;/p&gt; &#xA;&lt;p&gt;The best way to set these environment overrides for all games is by renaming &lt;code&gt;user_settings.sample.py&lt;/code&gt; to &lt;code&gt;user_settings.py&lt;/code&gt; and modifying it appropriately. This file is located in the Proton installation directory in your Steam library (often &lt;code&gt;~/.steam/steam/steamapps/common/Proton #.#&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you want to change the runtime configuration for a specific game, you can use the &lt;code&gt;Set Launch Options&lt;/code&gt; setting in the game&#39;s &lt;code&gt;Properties&lt;/code&gt; dialog in the Steam client. Set the variable, followed by &lt;code&gt;%command%&lt;/code&gt;. For example, input &#34;&lt;code&gt;PROTON_USE_WINED3D=1 %command%&lt;/code&gt;&#34; to use the OpenGL-based wined3d renderer instead of the Vulkan-based DXVK renderer.&lt;/p&gt; &#xA;&lt;p&gt;To enable an option, set the variable to a non-&lt;code&gt;0&lt;/code&gt; value. To disable an option, set the variable to &lt;code&gt;0&lt;/code&gt;. To use Steam&#39;s default configuration, do not specify the variable at all.&lt;/p&gt; &#xA;&lt;p&gt;All of the below are runtime options. They do not effect permanent changes to the Wine prefix. Removing the option will revert to the previous behavior.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Compat config string&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Environment Variable&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_LOG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Convenience method for dumping a useful debug log to &lt;code&gt;$PROTON_LOG_DIR/steam-$APPID.log&lt;/code&gt;. Set to &lt;code&gt;1&lt;/code&gt; to enable default logging, or set to a string to be appended to the default &lt;code&gt;WINEDEBUG&lt;/code&gt; channels.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_LOG_DIR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Output log files into the directory specified. Defaults to your home directory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_DUMP_DEBUG_COMMANDS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When running a game, Proton will write some useful debug scripts for that game into &lt;code&gt;$PROTON_DEBUG_DIR/proton_$USER/&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_DEBUG_DIR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Root directory for the Proton debug scripts, &lt;code&gt;/tmp&lt;/code&gt; by default.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_WAIT_ATTACH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Wait for a debugger to attach to steam.exe before launching the game process. To attach to the game process at startup, debuggers should be set to follow child processes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_CRASH_REPORT_DIR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Write crash logs into this directory. Does not clean up old logs, so may eat all your disk space eventually.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;wined3d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_USE_WINED3D&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use OpenGL-based wined3d instead of Vulkan-based DXVK for d3d11, d3d10, and d3d9.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;nod3d11&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_NO_D3D11&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disable &lt;code&gt;d3d11.dll&lt;/code&gt;, for d3d11 games which can fall back to and run better with d3d9.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;nod3d10&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_NO_D3D10&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disable &lt;code&gt;d3d10.dll&lt;/code&gt; and &lt;code&gt;dxgi.dll&lt;/code&gt;, for d3d10 games which can fall back to and run better with d3d9.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;noesync&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_NO_ESYNC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use eventfd-based in-process synchronization primitives.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;nofsync&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_NO_FSYNC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use futex-based in-process synchronization primitives. (Automatically disabled on systems with no &lt;code&gt;FUTEX_WAIT_MULTIPLE&lt;/code&gt; support.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;noxim&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_NO_XIM&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enabled by default. Do not attempt to use XIM (X Input Methods) support. XIM support is known to cause crashes with libx11 older than version 1.7.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;enablenvapi&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_ENABLE_NVAPI&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable NVIDIA&#39;s NVAPI GPU support library.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;nativevulkanloader&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the Vulkan loader shipped with the game instead of Proton&#39;s built-in Vulkan loader. This breaks VR support, but is required by a few games.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;forcelgadd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_FORCE_LARGE_ADDRESS_AWARE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Force Wine to enable the LARGE_ADDRESS_AWARE flag for all executables. Enabled by default.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;heapdelayfree&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_HEAP_DELAY_FREE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Delay freeing some memory, to work around application use-after-free bugs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gamedrive&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_SET_GAME_DRIVE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Create an S: drive which points to the Steam Library which contains the game.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;noforcelgadd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disable forcelgadd. If both this and &lt;code&gt;forcelgadd&lt;/code&gt; are set, enabled wins.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;oldglstr&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_OLD_GL_STRING&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Set some driver overrides to limit the length of the GL extension string, for old games that crash on very long extension strings.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;vkd3dfl12&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Force the Direct3D 12 feature level to 12, regardless of driver support.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;vkd3dbindlesstb&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Put &lt;code&gt;force_bindless_texel_buffer&lt;/code&gt; into &lt;code&gt;VKD3D_CONFIG&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;nomfdxgiman&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;WINE_DO_NOT_CREATE_DXGI_DEVICE_MANAGER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable hack to work around video issues in some games due to incomplete IMFDXGIDeviceManager support.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;noopwr&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;WINE_DISABLE_VULKAN_OPWR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable hack to disable Vulkan other process window rendering which sometimes causes issues on Wayland due to blit being one frame behind.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;hidenvgpu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_HIDE_NVIDIA_GPU&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Force Nvidia GPUs to always be reported as AMD GPUs. Some games require this if they depend on Windows-only Nvidia driver functionality. See also DXVK&#39;s nvapiHack config, which only affects reporting from Direct3D.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;WINE_FULLSCREEN_INTEGER_SCALING&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable integer scaling mode, to give sharp pixels when upscaling.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;cmdlineappend:&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Append the string after the colon as an argument to the game command. May be specified more than once. Escape commas and backslashes with a backslash.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;nowritewatch&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_NO_WRITE_WATCH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disable support for memory write watches in ntdll. This is a very dangerous hack and should only be applied if you have verified that the game can operate without write watches. This improves performance for some very specific games (e.g. CoreRT-based games).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;nosteamffmpeg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_NO_STEAM_FFMPEG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ignore ffmpeg that ships with Steam. Some videos may not play.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;seccomp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_USE_SECCOMP&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Note: Obsoleted in Proton 5.13.&lt;/strong&gt; In older versions, enable seccomp-bpf filter to emulate native syscalls, required for some DRM protections to work.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;d9vk&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;PROTON_USE_D9VK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Note: Obsoleted in Proton 5.0.&lt;/strong&gt; In older versions, use Vulkan-based DXVK instead of OpenGL-based wined3d for d3d9.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- Target:  GitHub Flavor Markdown.  To test locally:  pandoc -f markdown_github -t html README.md  --&gt;</summary>
  </entry>
  <entry>
    <title>electron/electron</title>
    <updated>2022-08-21T01:53:06Z</updated>
    <id>tag:github.com,2022-08-21:/electron/electron</id>
    <link href="https://github.com/electron/electron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build cross-platform desktop apps with JavaScript, HTML, and CSS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://electronjs.org&#34;&gt;&lt;img src=&#34;https://electronjs.org/images/electron-logo.svg?sanitize=true&#34; alt=&#34;Electron Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/electron/electron/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/electron/electron/tree/main.svg?style=shield&#34; alt=&#34;CircleCI Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/electron-bot/electron-ljo26/branch/main&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/4lggi9dpjc1qob7k/branch/main?svg=true&#34; alt=&#34;AppVeyor Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/electronjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/745037351163527189?color=%237289DA&amp;amp;label=chat&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Electron Discord Invite&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;📝&lt;/span&gt; Available Translations: 🇨🇳 🇧🇷 🇪🇸 🇯🇵 🇷🇺 🇫🇷 🇺🇸 🇩🇪. View these docs in other languages on our &lt;a href=&#34;https://crowdin.com/project/electron&#34;&gt;Crowdin&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;The Electron framework lets you write cross-platform desktop applications using JavaScript, HTML and CSS. It is based on &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; and &lt;a href=&#34;https://www.chromium.org&#34;&gt;Chromium&lt;/a&gt; and is used by the &lt;a href=&#34;https://github.com/atom/atom&#34;&gt;Atom editor&lt;/a&gt; and many other &lt;a href=&#34;https://electronjs.org/apps&#34;&gt;apps&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://twitter.com/electronjs&#34;&gt;@ElectronJS&lt;/a&gt; on Twitter for important announcements.&lt;/p&gt; &#xA;&lt;p&gt;This project adheres to the Contributor Covenant &lt;a href=&#34;https://github.com/electron/electron/tree/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;. By participating, you are expected to uphold this code. Please report unacceptable behavior to &lt;a href=&#34;mailto:coc@electronjs.org&#34;&gt;coc@electronjs.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install prebuilt Electron binaries, use &lt;a href=&#34;https://docs.npmjs.com/&#34;&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/a&gt;. The preferred method is to install Electron as a development dependency in your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install electron --save-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more installation options and troubleshooting tips, see &lt;a href=&#34;https://raw.githubusercontent.com/electron/electron/main/docs/tutorial/installation.md&#34;&gt;installation&lt;/a&gt;. For info on how to manage Electron versions in your apps, see &lt;a href=&#34;https://raw.githubusercontent.com/electron/electron/main/docs/tutorial/electron-versioning.md&#34;&gt;Electron versioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Platform support&lt;/h2&gt; &#xA;&lt;p&gt;Each Electron release provides binaries for macOS, Windows, and Linux.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS (El Capitan and up): Electron provides 64-bit Intel and ARM binaries for macOS. Apple Silicon support was added in Electron 11.&lt;/li&gt; &#xA; &lt;li&gt;Windows (Windows 7 and up): Electron provides &lt;code&gt;ia32&lt;/code&gt; (&lt;code&gt;x86&lt;/code&gt;), &lt;code&gt;x64&lt;/code&gt; (&lt;code&gt;amd64&lt;/code&gt;), and &lt;code&gt;arm64&lt;/code&gt; binaries for Windows. Windows on ARM support was added in Electron 5.0.8.&lt;/li&gt; &#xA; &lt;li&gt;Linux: The prebuilt binaries of Electron are built on Ubuntu 20.04. They have also been verified to work on: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu 14.04 and newer&lt;/li&gt; &#xA;   &lt;li&gt;Fedora 24 and newer&lt;/li&gt; &#xA;   &lt;li&gt;Debian 8 and newer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start &amp;amp; Electron Fiddle&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/electron/fiddle&#34;&gt;&lt;code&gt;Electron Fiddle&lt;/code&gt;&lt;/a&gt; to build, run, and package small Electron experiments, to see code examples for all of Electron&#39;s APIs, and to try out different versions of Electron. It&#39;s designed to make the start of your journey with Electron easier.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, clone and run the &lt;a href=&#34;https://github.com/electron/electron-quick-start&#34;&gt;electron/electron-quick-start&lt;/a&gt; repository to see a minimal Electron app in action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/electron/electron-quick-start&#xA;cd electron-quick-start&#xA;npm install&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources for learning Electron&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://electronjs.org/docs&#34;&gt;electronjs.org/docs&lt;/a&gt; - All of Electron&#39;s documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/electron/fiddle&#34;&gt;electron/fiddle&lt;/a&gt; - A tool to build, run, and package small Electron experiments&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/electron/electron-quick-start&#34;&gt;electron/electron-quick-start&lt;/a&gt; - A very basic starter Electron app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://electronjs.org/community#boilerplates&#34;&gt;electronjs.org/community#boilerplates&lt;/a&gt; - Sample starter apps created by the community&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Programmatic usage&lt;/h2&gt; &#xA;&lt;p&gt;Most people use Electron from the command line, but if you require &lt;code&gt;electron&lt;/code&gt; inside your &lt;strong&gt;Node app&lt;/strong&gt; (not your Electron app) it will return the file path to the binary. Use this to spawn Electron from Node scripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const electron = require(&#39;electron&#39;)&#xA;const proc = require(&#39;child_process&#39;)&#xA;&#xA;// will print something similar to /Users/maf/.../Electron&#xA;console.log(electron)&#xA;&#xA;// spawn Electron&#xA;const child = proc.spawn(electron)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mirrors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://npmmirror.com/mirrors/electron/&#34;&gt;China&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://www.electronjs.org/docs/latest/tutorial/installation#mirror&#34;&gt;Advanced Installation Instructions&lt;/a&gt; to learn how to use a custom mirror.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation translations&lt;/h2&gt; &#xA;&lt;p&gt;We crowdsource translations for our documentation via &lt;a href=&#34;https://crowdin.com/project/electron&#34;&gt;Crowdin&lt;/a&gt;. We currently accept translations for Chinese (Simplified), French, German, Japanese, Portuguese, Russian, and Spanish.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in reporting/fixing issues and contributing directly to the code base, please see &lt;a href=&#34;https://raw.githubusercontent.com/electron/electron/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information on what we&#39;re looking for and how to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Info on reporting bugs, getting help, finding third-party tools and sample apps, and more can be found on the &lt;a href=&#34;https://www.electronjs.org/community&#34;&gt;Community page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/electron/electron/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;When using Electron logos, make sure to follow &lt;a href=&#34;https://openjsf.org/wp-content/uploads/sites/84/2021/01/OpenJS-Foundation-Trademark-Policy-2021-01-12.docx.pdf&#34;&gt;OpenJS Foundation Trademark Policy&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>