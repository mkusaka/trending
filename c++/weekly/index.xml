<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-11T01:41:08Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AlexandreRouma/SDRPlusPlus</title>
    <updated>2022-09-11T01:41:08Z</updated>
    <id>tag:github.com,2022-09-11:/AlexandreRouma/SDRPlusPlus</id>
    <link href="https://github.com/AlexandreRouma/SDRPlusPlus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-Platform SDR Software&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SDR++, The bloat-free SDR software&lt;br&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Ter2MQJ.png&#34; alt=&#34;Screenshot&#34;&gt; SDR++ is a cross-platform and open source SDR software with the aim of being bloat free and simple to use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/AlexandreRouma/SDRPlusPlus/workflows/Build%20Binaries/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patreon.com/ryzerth&#34;&gt;Patreon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/aFgWjyD&#34;&gt;Discord Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/sdrpp/&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IRC: &lt;code&gt;#sdrpp&lt;/code&gt; (&lt;a href=&#34;https://libera.chat&#34;&gt;libera.chat&lt;/a&gt;) &lt;strong&gt;&lt;strong&gt;NO LONGER ACTIVE, JOIN DISCORD INSTEAD&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multi VFO&lt;/li&gt; &#xA; &lt;li&gt;Wide hardware support (both through SoapySDR and dedicated modules)&lt;/li&gt; &#xA; &lt;li&gt;SIMD accelerated DSP&lt;/li&gt; &#xA; &lt;li&gt;Cross-platform (Windows, Linux, OSX and BSD)&lt;/li&gt; &#xA; &lt;li&gt;Full waterfall update when possible. Makes browsing signals easier and more pleasant&lt;/li&gt; &#xA; &lt;li&gt;Modular design (easily write your own plugins)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installing&lt;/h1&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest release from &lt;a href=&#34;https://github.com/AlexandreRouma/SDRPlusPlus/releases&#34;&gt;the Releases page&lt;/a&gt; and extract to the directory of your choice.&lt;/p&gt; &#xA;&lt;p&gt;To create a desktop shortcut, rightclick the exe and select &lt;code&gt;Send to -&amp;gt; Desktop (create shortcut)&lt;/code&gt;, then, rename the shortcut on the desktop to whatever you want.&lt;/p&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;h3&gt;Debian-based (Ubuntu, Mint, etc)&lt;/h3&gt; &#xA;&lt;p&gt;Download the latest release from &lt;a href=&#34;https://github.com/AlexandreRouma/SDRPlusPlus/releases&#34;&gt;the Releases page&lt;/a&gt; and extract to the directory of your choice.&lt;/p&gt; &#xA;&lt;p&gt;Then, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install libfftw3-dev libglfw3-dev libvolk2-dev libsoapysdr-dev libairspyhf-dev libiio-dev libad9361-dev librtaudio-dev libhackrf-dev&#xA;sudo dpkg -i sdrpp_debian_amd64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;libvolk2-dev&lt;/code&gt; is not available, use &lt;code&gt;libvolk1-dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Arch-based&lt;/h3&gt; &#xA;&lt;p&gt;Install the latest release from the &lt;a href=&#34;https://aur.archlinux.org/packages/sdrpp-git/&#34;&gt;sdrpp-git&lt;/a&gt; AUR package&lt;/p&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;p&gt;There are currently no existing packages for other distributions, for these systems you&#39;ll have to &lt;a href=&#34;https://github.com/AlexandreRouma/SDRPlusPlus#building-on-linux--bsd&#34;&gt;build from source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;MacOS&lt;/h2&gt; &#xA;&lt;p&gt;Download the app bundle from the latest &lt;a href=&#34;https://www.sdrpp.org/nightly&#34;&gt;nightly build&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;BSD&lt;/h2&gt; &#xA;&lt;p&gt;There are currently no BSD packages, refer to &lt;a href=&#34;https://github.com/AlexandreRouma/SDRPlusPlus#building-on-linux--bsd&#34;&gt;Building on Linux / BSD&lt;/a&gt; for instructions on building from source.&lt;/p&gt; &#xA;&lt;h1&gt;Building on Windows&lt;/h1&gt; &#xA;&lt;p&gt;The preferred IDE is &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VS Code&lt;/a&gt; in order to have similar development experience across platforms and to build with CMake using the command line.&lt;/p&gt; &#xA;&lt;h2&gt;Install dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cmake.org&#34;&gt;cmake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vcpkg.io&#34;&gt;vcpkg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pothosware/PothosSDR&#34;&gt;PothosSDR&lt;/a&gt; (This will install libraries for most SDRs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.music.mcgill.ca/~gary/rtaudio/&#34;&gt;RtAudio&lt;/a&gt; (You have to build and install it in &lt;code&gt;C:/Program Files (x86)/RtAudio/&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After this, install the following dependencies using vcpkg:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fftw3&lt;/li&gt; &#xA; &lt;li&gt;glfw3&lt;/li&gt; &#xA; &lt;li&gt;zstd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You are probably going to build in 64 bit so make sure vcpkg installs the correct versions using &lt;code&gt;.\vcpkg.exe install &amp;lt;package&amp;gt;:x64-windows&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building using the command line&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Replace &lt;code&gt;&amp;lt;vcpkg install directory&amp;gt;&lt;/code&gt; with vcpkg&#39;s install directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake .. &#34;-DCMAKE_TOOLCHAIN_FILE=&amp;lt;vcpkg install directory&amp;gt;/scripts/buildsystems/vcpkg.cmake&#34; -G &#34;Visual Studio 16 2019&#34;&#xA;cmake --build . --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running for development&lt;/h2&gt; &#xA;&lt;h3&gt;Create a new configuration root directory&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;./create_root.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create the &lt;code&gt;root_dev&lt;/code&gt; directory that will be used to save the configs of sdrpp and the modules.&lt;/p&gt; &#xA;&lt;p&gt;You will next need to edit the &lt;code&gt;root_dev/config.json&lt;/code&gt; file to point to the modules that were built. If the file is missing in your folder run the application once and it will create one with default value -- see later on how to run the application.&lt;/p&gt; &#xA;&lt;h3&gt;Run SDR++ from the command line&lt;/h3&gt; &#xA;&lt;p&gt;From the top directory, you can simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;./build/Release/sdrpp.exe -r root_dev -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you wish to run from the build directory e.g. &lt;code&gt;build/Release&lt;/code&gt; and adapt the relative path to the &lt;code&gt;root_dev&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;./sdrpp.exe -r ../../root_dev -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;-s&lt;/code&gt; argument is for keeping the console active in order to see the error messages.&lt;/p&gt; &#xA;&lt;p&gt;Because all the paths are relative, for the rest of the command line instructions we are going to assume you are running from the top directory using the former command. As mentioned previously you need to edit &lt;code&gt;root_dev/config.json&lt;/code&gt; to add the modules that were built. From the default configuration file you need to add the paths in the &lt;code&gt;modules&lt;/code&gt; section. Add to this list all the modules you wish to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;...&#xA;&#34;modules&#34;: [&#xA;    &#34;./build/radio/Release/radio.dll&#34;,&#xA;    &#34;./build/recorder/Release/recorder.dll&#34;,&#xA;    &#34;./build/rtl_tcp_source/Release/rtl_tcp_source.dll&#34;,&#xA;    &#34;./build/soapy_source/Release/soapy_source.dll&#34;,&#xA;    &#34;./build/audio_sink/Release/audio_sink.dll&#34;&#xA;]&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need to change the location of the resource and module directories, for development, I recommend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;...&#xA;&#34;modulesDirectory&#34;: &#34;root_dev/modules&#34;,&#xA;...&#xA;&#34;resourcesDirectory&#34;: &#34;root_dev/res&#34;,&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember that these paths will be relative to the run directory.&lt;/p&gt; &#xA;&lt;h2&gt;Installing SDR++&lt;/h2&gt; &#xA;&lt;p&gt;If you choose to run SDR++ for development, you do not need this step. First, copy over the exe and DLLs from &lt;code&gt;build/Release/&lt;/code&gt; to &lt;code&gt;root_dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Next you need to copy over all the modules that were compiled. To do so, copy the DLL file of the module (located in its build folder given below) to the &lt;code&gt;root_dev/modules&lt;/code&gt; directory and other DLLs (that do not have the exact name of the module) to the &lt;code&gt;root_dev&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;The modules built will be some of the following (Repeat the instructions above for all you wish to use):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;build/radio/Release/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build/recorder/Release/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build/rtl_tcp_source/Release/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build/spyserver_source/Release/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build/soapy_source/Release/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build/airspyhf_source/Release/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build/plutosdr_source/Release/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build/audio_sink/Release/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building on Linux / BSD&lt;/h1&gt; &#xA;&lt;h2&gt;Select which modules you wish to build&lt;/h2&gt; &#xA;&lt;p&gt;Depending on which module you want to build, you will need to install some additional dependencies. Here are listed every module that requires addition dependencies. If a module enabled by default and you do not wish to install a particular dependency (or can&#39;t, eg. the BladeRF module on Debian Buster), you can disable it using the module parameter listed in the table below&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;soapy_source: SoapySDR + drivers for each SDRs (see SoapySDR docs)&lt;/li&gt; &#xA; &lt;li&gt;airspyhf_source: libairspyhf&lt;/li&gt; &#xA; &lt;li&gt;plutosdr_source: libiio, libad9361&lt;/li&gt; &#xA; &lt;li&gt;audio_sink: librtaudio-dev&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cmake&lt;/li&gt; &#xA; &lt;li&gt;fftw3&lt;/li&gt; &#xA; &lt;li&gt;glfw&lt;/li&gt; &#xA; &lt;li&gt;libvolk&lt;/li&gt; &#xA; &lt;li&gt;zstd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next install dependencies based on the modules you wish to build (See previous step)&lt;/p&gt; &#xA;&lt;p&gt;Note: make sure you&#39;re using GCC 8 or later as older versions do not have &lt;code&gt;std::filesystem&lt;/code&gt; built-in.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;replace &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; with the number of threads you wish to use to build&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;make -j&amp;lt;N&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create a new root directory&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh ./create_root.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running for development&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to install SDR++, skip to the next step&lt;/p&gt; &#xA;&lt;p&gt;First run SDR++ from the build directory to generate a default config file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./sdrpp -r ../root_dev/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you will need to edit the &lt;code&gt;root_dev/config.json&lt;/code&gt; file to point to the modules that were built. Here is an example of what it should look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;...&#xA;&#34;modules&#34;: [&#xA;    &#34;./build/radio/radio.so&#34;,&#xA;    &#34;./build/recorder/recorder.so&#34;,&#xA;    &#34;./build/rtl_tcp_source/rtl_tcp_source.so&#34;,&#xA;    &#34;./build/soapy_source/soapy_source.so&#34;,&#xA;    &#34;./build/audio_sink/audio_sink.so&#34;&#xA;]&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: You can generate this list automatically by running &lt;code&gt;find . | grep &#39;\.so&#39; | sed &#39;s/^/&#34;/&#39; | sed &#39;s/$/&#34;,/&#39; | sed &#39;/sdrpp_core.so/d&#39;&lt;/code&gt; in the build directory.&lt;/p&gt; &#xA;&lt;p&gt;You also need to change the location of the resource and module directories, for development, I recommend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;...&#xA;&#34;modulesDirectory&#34;: &#34;./root_dev/modules&#34;,&#xA;...&#xA;&#34;resourcesDirectory&#34;: &#34;./root_dev/res&#34;,&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember that these paths will be relative to the run directory.&lt;/p&gt; &#xA;&lt;p&gt;Of course, remember to add entries for all modules that were built and that you wish to use.&lt;/p&gt; &#xA;&lt;p&gt;Next, from the top directory, you can simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build/sdrpp -r root_dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you wish to run from the build directory, you will need to correct the directories in the config.json file, and then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./sdrpp -r ../root_dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing SDR++&lt;/h2&gt; &#xA;&lt;p&gt;To install SDR++, run the following command in your &lt;code&gt;build&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Building on MacOS&lt;/h1&gt; &#xA;&lt;p&gt;No instructions yet, follow the CI script if you know what you&#39;re doing or just install the app bundle.&lt;/p&gt; &#xA;&lt;h1&gt;Module List&lt;/h1&gt; &#xA;&lt;p&gt;Not all modules are built by default. I decided to disable the build of those with large libraries, libraries that can&#39;t be installed through the package manager (or pothos) and those that are still in beta. Modules in beta are still included in releases for the most part but not enabled in SDR++ (need to be instantiated).&lt;/p&gt; &#xA;&lt;h2&gt;Sources&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Stage&lt;/th&gt; &#xA;   &lt;th&gt;Dependencies&lt;/th&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Built by default&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Built in Release&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Enabled in SDR++ by default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;airspy_source&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;libairspy&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_AIRSPY_SOURCE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;airspyhf_source&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;libairspyhf&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_AIRSPYHF_SOURCE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bladerf_source&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;libbladeRF&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_BLADERF_SOURCE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⚠️ (not Debian Buster)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;file_source&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_FILE_SOURCE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hackrf_source&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;libhackrf&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_HACKRF_SOURCE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;limesdr_source&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;liblimesuite&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_LIMESDR_SOURCE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rtl_sdr_source&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;librtlsdr&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_RTL_SDR_SOURCE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rtl_tcp_source&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_RTL_TCP_SOURCE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sdrplay_source&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;SDRplay API&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_SDRPLAY_SOURCE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;soapy_source&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;soapysdr&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_SOAPY_SOURCE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;spyserver_source&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_SPYSERVER_SOURCE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;plutosdr_source&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;libiio, libad9361&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_PLUTOSDR_SOURCE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Sinks&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Stage&lt;/th&gt; &#xA;   &lt;th&gt;Dependencies&lt;/th&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Built by default&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Built in Release&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Enabled in SDR++ by default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;audio_sink&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;rtaudio&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_AUDIO_SINK&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;network_sink&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_NETWORK_SINK&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;new_portaudio_sink&lt;/td&gt; &#xA;   &lt;td&gt;Beta&lt;/td&gt; &#xA;   &lt;td&gt;portaudio&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_NEW_PORTAUDIO_SINK&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Decoders&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Stage&lt;/th&gt; &#xA;   &lt;th&gt;Dependencies&lt;/th&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Built by default&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Built in Release&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Enabled in SDR++ by default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;falcon9_decoder&lt;/td&gt; &#xA;   &lt;td&gt;Unfinished&lt;/td&gt; &#xA;   &lt;td&gt;ffplay&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_FALCON9_DECODER&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;m17_decoder&lt;/td&gt; &#xA;   &lt;td&gt;Beta&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_M17_DECODER&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;meteor_demodulator&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_METEOR_DEMODULATOR&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;radio&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_RADIO&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;weather_sat_decoder&lt;/td&gt; &#xA;   &lt;td&gt;Unfinished&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_WEATHER_SAT_DECODER&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Stage&lt;/th&gt; &#xA;   &lt;th&gt;Dependencies&lt;/th&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Built by default&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Built in Release&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Enabled in SDR++ by default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;discord_integration&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_DISCORD_PRESENCE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;frequency_manager&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_FREQUENCY_MANAGER&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;recorder&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_RECORDER&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rigctl_server&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_RIGCTL_SERVER&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⛔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;scanner&lt;/td&gt; &#xA;   &lt;td&gt;Beta&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;OPT_BUILD_SCANNER&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;p&gt;First, please make sure you&#39;re running the latest automated build. If your issue is linked to a bug it is likely that is has already been fixed in later releases&lt;/p&gt; &#xA;&lt;h2&gt;SDR++ crashes then it won&#39;t start again no matter what&lt;/h2&gt; &#xA;&lt;p&gt;This is a bug in 1.0.0 that was fixed in 1.0.1&lt;/p&gt; &#xA;&lt;p&gt;In some cases, if a crash happened while the config was being saved, the config file would be corrupted and SDR++ would refuse to start because of it.&lt;/p&gt; &#xA;&lt;p&gt;This has now been fixed. If a config file is corrupted it&#39;ll just reset it to its default state.&lt;/p&gt; &#xA;&lt;h2&gt;&#34;hash collision&#34; error when starting&lt;/h2&gt; &#xA;&lt;p&gt;You likely installed the &lt;code&gt;soapysdr-module-all&lt;/code&gt; package on Ubuntu/Debian. If not it&#39;s still a SoapySDR bug caused by multiple soapy modules coming in conflict. Uninstall anything related to SoapySDR then install soapysdr itself and only the soapy modules you actually need.&lt;/p&gt; &#xA;&lt;h2&gt;&#34;I don&#39;t see -insert module name here-, what&#39;s going on?&#34;&lt;/h2&gt; &#xA;&lt;p&gt;If the module was included in a later update, it&#39;s not enabled in the config. The easiest way to fix this is just to delete the &lt;code&gt;config.json&lt;/code&gt; file and let SDR++ recreate it (you will lose your setting relating to the main UI like VFO colors, zoom level and theme). The best option however is to edit the config file to add an instance of the module you wish to have enabled (see the Module List).&lt;/p&gt; &#xA;&lt;h2&gt;SDR++ crashes when stopping a RTL-SDR&lt;/h2&gt; &#xA;&lt;p&gt;This is a bug recently introduced by libusb1.4 To solve, this, simply downgrade to libusb1.3&lt;/p&gt; &#xA;&lt;h2&gt;SDR++ crashes when starting a HackRF&lt;/h2&gt; &#xA;&lt;p&gt;If you also have the SoapySDR module loaded (not necessarily enabled), this is a bug in libhackrf. It&#39;s caused by libhackrf not checking if it&#39;s already initialized. The solution until a fixed libhackrf version is released is to completely remove the soapy_source module from SDR++. To do this, delete &lt;code&gt;modules/soapy_source.dll&lt;/code&gt; on windows or &lt;code&gt;/usr/lib/sdrpp/plugins/soapy_source.so&lt;/code&gt; on linux.&lt;/p&gt; &#xA;&lt;h2&gt;Issue not listed here?&lt;/h2&gt; &#xA;&lt;p&gt;If you still have an issue, please open an issue about it or ask on the discord. I&#39;ll try to respond as quickly as I can. Please avoid trying to contact me on every platform imaginable thinking I&#39;ll respond faster though...&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Feel free to submit pull requests and report bugs via the GitHub issue tracker. I will soon publish a contributing.md listing the code style to use.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;h2&gt;Patrons&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bob Logan&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/corvus-ch&#34;&gt;Christian Häusler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Croccydile&lt;/li&gt; &#xA; &lt;li&gt;Dale L Puckett (K0HYD)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://linkedin.com/in/dagnelli&#34;&gt;Daniele D&#39;Agnelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;D. Jones&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.eb3frn.net/&#34;&gt;EB3FRN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Eric Johnson&lt;/li&gt; &#xA; &lt;li&gt;Ernest Murphy (NH7L)&lt;/li&gt; &#xA; &lt;li&gt;Flinger Films&lt;/li&gt; &#xA; &lt;li&gt;gringogrigio&lt;/li&gt; &#xA; &lt;li&gt;Joe Cupano&lt;/li&gt; &#xA; &lt;li&gt;Kezza&lt;/li&gt; &#xA; &lt;li&gt;Krys Kamieniecki&lt;/li&gt; &#xA; &lt;li&gt;Lee Donaghy&lt;/li&gt; &#xA; &lt;li&gt;Lee KD1SQ&lt;/li&gt; &#xA; &lt;li&gt;.lozenge. (Hank Hill)&lt;/li&gt; &#xA; &lt;li&gt;ON4MU&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://passion-radio.com/&#34;&gt;Passion-Radio.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paul Maine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scannerschool.com/&#34;&gt;Scanner School&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://signalseverywhere.com/&#34;&gt;SignalsEverywhere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Syne Ardwin (WI9SYN)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/W4IPAstroke5&#34;&gt;W4IPA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexandreRouma/SDRPlusPlus/master/github.com/reppiZ&#34;&gt;Zipper&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Aang23&#34;&gt;Aang23&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wingrime&#34;&gt;Alexsey Shestacov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aosync&#34;&gt;Aosync&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/benkyd&#34;&gt;Benjamin Kyd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bvernoux&#34;&gt;Benjamin Vernoux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cropinghigh&#34;&gt;Cropinghigh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://f4eed.wordpress.com/&#34;&gt;Fred F4EED&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/howard0su&#34;&gt;Howard0su&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;John Donkersley&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JoshuaKimsey&#34;&gt;Joshua Kimsey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mnhauke&#34;&gt;Martin Hauke&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marvin-sinister&#34;&gt;Marvin Sinister&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mbiette&#34;&gt;Maxime Biette&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thotypous&#34;&gt;Paulo Matias&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/raov_birbtog&#34;&gt;Raov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Starman0620&#34;&gt;Cam K.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shuyuan-liu&#34;&gt;Shuyuan Liu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://esaille.me/&#34;&gt;Syne Ardwin (WI9SYN)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zakrent&#34;&gt;Szymon Zakrent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Manawyrm&#34;&gt;Tobias Mädel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Youssef Touil&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/invader-zimm&#34;&gt;Zimm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Libraries used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pothosware/SoapySDR&#34;&gt;SoapySDR (PothosWare)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;Dear ImGui (ocornut)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gabime/spdlog&#34;&gt;spdlog (gabime)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nlohmann/json&#34;&gt;json (nlohmann)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.portaudio.com/&#34;&gt;rtaudio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/samhocevar/portable-file-dialogs&#34;&gt;Portable File Dialogs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>google/leveldb</title>
    <updated>2022-09-11T01:41:08Z</updated>
    <id>tag:github.com,2022-09-11:/google/leveldb</id>
    <link href="https://github.com/google/leveldb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;This repository is receiving very limited maintenance. We will only review the following types of changes.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Fixes for critical bugs, such as data loss or memory corruption&lt;/li&gt; &#xA;  &lt;li&gt;Changes absolutely needed by internally supported leveldb clients. These typically fix breakage introduced by a language/standard library/OS update&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/leveldb/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/google/leveldb/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Authors: Sanjay Ghemawat (&lt;a href=&#34;mailto:sanjay@google.com&#34;&gt;sanjay@google.com&lt;/a&gt;) and Jeff Dean (&lt;a href=&#34;mailto:jeff@google.com&#34;&gt;jeff@google.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keys and values are arbitrary byte arrays.&lt;/li&gt; &#xA; &lt;li&gt;Data is stored sorted by key.&lt;/li&gt; &#xA; &lt;li&gt;Callers can provide a custom comparison function to override the sort order.&lt;/li&gt; &#xA; &lt;li&gt;The basic operations are &lt;code&gt;Put(key,value)&lt;/code&gt;, &lt;code&gt;Get(key)&lt;/code&gt;, &lt;code&gt;Delete(key)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Multiple changes can be made in one atomic batch.&lt;/li&gt; &#xA; &lt;li&gt;Users can create a transient snapshot to get a consistent view of data.&lt;/li&gt; &#xA; &lt;li&gt;Forward and backward iteration is supported over the data.&lt;/li&gt; &#xA; &lt;li&gt;Data is automatically compressed using the &lt;a href=&#34;https://google.github.io/snappy/&#34;&gt;Snappy compression library&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;External activity (file system operations etc.) is relayed through a virtual interface so users can customize the operating system interactions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/leveldb/raw/main/doc/index.md&#34;&gt;LevelDB library documentation&lt;/a&gt; is online and bundled with the source code.&lt;/p&gt; &#xA;&lt;h1&gt;Limitations&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is not a SQL database. It does not have a relational data model, it does not support SQL queries, and it has no support for indexes.&lt;/li&gt; &#xA; &lt;li&gt;Only a single process (possibly multi-threaded) can access a particular database at a time.&lt;/li&gt; &#xA; &lt;li&gt;There is no client-server support builtin to the library. An application that needs such support will have to wrap their own server around the library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting the Source&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recurse-submodules https://github.com/google/leveldb.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;This project supports &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; out of the box.&lt;/p&gt; &#xA;&lt;h3&gt;Build for POSIX&lt;/h3&gt; &#xA;&lt;p&gt;Quick start:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p build &amp;amp;&amp;amp; cd build&#xA;cmake -DCMAKE_BUILD_TYPE=Release .. &amp;amp;&amp;amp; cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building for Windows&lt;/h3&gt; &#xA;&lt;p&gt;First generate the Visual Studio 2017 project/solution files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;mkdir build&#xA;cd build&#xA;cmake -G &#34;Visual Studio 15&#34; ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default default will build for x86. For 64-bit run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;cmake -G &#34;Visual Studio 15 Win64&#34; ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile the Windows solution from the command-line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;devenv /build Debug leveldb.sln&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or open leveldb.sln in Visual Studio and build from within.&lt;/p&gt; &#xA;&lt;p&gt;Please see the CMake documentation and &lt;code&gt;CMakeLists.txt&lt;/code&gt; for more advanced usage.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing to the leveldb Project&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;This repository is receiving very limited maintenance. We will only review the following types of changes.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Bug fixes&lt;/li&gt; &#xA;  &lt;li&gt;Changes absolutely needed by internally supported leveldb clients. These typically fix breakage introduced by a language/standard library/OS update&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The leveldb project welcomes contributions. leveldb&#39;s primary goal is to be a reliable and fast key/value store. Changes that are in line with the features/limitations outlined above, and meet the requirements below, will be considered.&lt;/p&gt; &#xA;&lt;p&gt;Contribution requirements:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tested platforms only&lt;/strong&gt;. We &lt;em&gt;generally&lt;/em&gt; will only accept changes for platforms that are compiled and tested. This means POSIX (for Linux and macOS) or Windows. Very small changes will sometimes be accepted, but consider that more of an exception than the rule.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stable API&lt;/strong&gt;. We strive very hard to maintain a stable API. Changes that require changes for projects using leveldb &lt;em&gt;might&lt;/em&gt; be rejected without sufficient benefit to the project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tests&lt;/strong&gt;: All changes must be accompanied by a new (or changed) test, or a sufficient explanation as to why a new (or changed) test is not required.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Consistent Style&lt;/strong&gt;: This project conforms to the &lt;a href=&#34;https://google.github.io/styleguide/cppguide.html&#34;&gt;Google C++ Style Guide&lt;/a&gt;. To ensure your changes are properly formatted please run:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;clang-format -i --style=file &amp;lt;file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We are unlikely to accept contributions to the build configuration files, such as &lt;code&gt;CMakeLists.txt&lt;/code&gt;. We are focused on maintaining a build configuration that allows us to test that the project works in a few supported configurations inside Google. We are not currently interested in supporting other requirements, such as different operating systems, compilers, or build systems.&lt;/p&gt; &#xA;&lt;h2&gt;Submitting a Pull Request&lt;/h2&gt; &#xA;&lt;p&gt;Before any pull request will be accepted the author must first sign a Contributor License Agreement (CLA) at &lt;a href=&#34;https://cla.developers.google.com/&#34;&gt;https://cla.developers.google.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to keep the commit timeline linear &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Squashing-Commits&#34;&gt;squash&lt;/a&gt; your changes down to a single commit and &lt;a href=&#34;https://git-scm.com/docs/git-rebase&#34;&gt;rebase&lt;/a&gt; on google/leveldb/main. This keeps the commit timeline linear and more easily sync&#39;ed with the internal repository at Google. More information at GitHub&#39;s &lt;a href=&#34;https://help.github.com/articles/about-git-rebase/&#34;&gt;About Git rebase&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;p&gt;Here is a performance report (with explanations) from the run of the included db_bench program. The results are somewhat noisy, but should be enough to get a ballpark performance estimate.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;We use a database with a million entries. Each entry has a 16 byte key, and a 100 byte value. Values used by the benchmark compress to about half their original size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;LevelDB:    version 1.1&#xA;Date:       Sun May  1 12:11:26 2011&#xA;CPU:        4 x Intel(R) Core(TM)2 Quad CPU    Q6600  @ 2.40GHz&#xA;CPUCache:   4096 KB&#xA;Keys:       16 bytes each&#xA;Values:     100 bytes each (50 bytes after compression)&#xA;Entries:    1000000&#xA;Raw Size:   110.6 MB (estimated)&#xA;File Size:  62.9 MB (estimated)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Write performance&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;fill&#34; benchmarks create a brand new database, in either sequential, or random order. The &#34;fillsync&#34; benchmark flushes data from the operating system to the disk after every operation; the other write operations leave the data sitting in the operating system buffer cache for a while. The &#34;overwrite&#34; benchmark does random writes that update existing keys in the database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fillseq      :       1.765 micros/op;   62.7 MB/s&#xA;fillsync     :     268.409 micros/op;    0.4 MB/s (10000 ops)&#xA;fillrandom   :       2.460 micros/op;   45.0 MB/s&#xA;overwrite    :       2.380 micros/op;   46.5 MB/s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each &#34;op&#34; above corresponds to a write of a single key/value pair. I.e., a random write benchmark goes at approximately 400,000 writes per second.&lt;/p&gt; &#xA;&lt;p&gt;Each &#34;fillsync&#34; operation costs much less (0.3 millisecond) than a disk seek (typically 10 milliseconds). We suspect that this is because the hard disk itself is buffering the update in its memory and responding before the data has been written to the platter. This may or may not be safe based on whether or not the hard disk has enough power to save its memory in the event of a power failure.&lt;/p&gt; &#xA;&lt;h2&gt;Read performance&lt;/h2&gt; &#xA;&lt;p&gt;We list the performance of reading sequentially in both the forward and reverse direction, and also the performance of a random lookup. Note that the database created by the benchmark is quite small. Therefore the report characterizes the performance of leveldb when the working set fits in memory. The cost of reading a piece of data that is not present in the operating system buffer cache will be dominated by the one or two disk seeks needed to fetch the data from disk. Write performance will be mostly unaffected by whether or not the working set fits in memory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;readrandom  : 16.677 micros/op;  (approximately 60,000 reads per second)&#xA;readseq     :  0.476 micros/op;  232.3 MB/s&#xA;readreverse :  0.724 micros/op;  152.9 MB/s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LevelDB compacts its underlying storage data in the background to improve read performance. The results listed above were done immediately after a lot of random writes. The results after compactions (which are usually triggered automatically) are better.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;readrandom  : 11.602 micros/op;  (approximately 85,000 reads per second)&#xA;readseq     :  0.423 micros/op;  261.8 MB/s&#xA;readreverse :  0.663 micros/op;  166.9 MB/s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some of the high cost of reads comes from repeated decompression of blocks read from disk. If we supply enough cache to the leveldb so it can hold the uncompressed blocks in memory, the read performance improves again:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;readrandom  : 9.775 micros/op;  (approximately 100,000 reads per second before compaction)&#xA;readrandom  : 5.215 micros/op;  (approximately 190,000 reads per second after compaction)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Repository contents&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/leveldb/main/doc/index.md&#34;&gt;doc/index.md&lt;/a&gt; for more explanation. See &lt;a href=&#34;https://raw.githubusercontent.com/google/leveldb/main/doc/impl.md&#34;&gt;doc/impl.md&lt;/a&gt; for a brief overview of the implementation.&lt;/p&gt; &#xA;&lt;p&gt;The public interface is in include/leveldb/*.h. Callers should not include or rely on the details of any other header files in this package. Those internal APIs may be changed without warning.&lt;/p&gt; &#xA;&lt;p&gt;Guide to header files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;include/leveldb/db.h&lt;/strong&gt;: Main interface to the DB: Start here.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;include/leveldb/options.h&lt;/strong&gt;: Control over the behavior of an entire database, and also control over the behavior of individual reads and writes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;include/leveldb/comparator.h&lt;/strong&gt;: Abstraction for user-specified comparison function. If you want just bytewise comparison of keys, you can use the default comparator, but clients can write their own comparator implementations if they want custom ordering (e.g. to handle different character encodings, etc.).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;include/leveldb/iterator.h&lt;/strong&gt;: Interface for iterating over data. You can get an iterator from a DB object.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;include/leveldb/write_batch.h&lt;/strong&gt;: Interface for atomically applying multiple updates to a database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;include/leveldb/slice.h&lt;/strong&gt;: A simple module for maintaining a pointer and a length into some other byte array.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;include/leveldb/status.h&lt;/strong&gt;: Status is returned from many of the public interfaces and is used to report success and various kinds of errors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;include/leveldb/env.h&lt;/strong&gt;: Abstraction of the OS environment. A posix implementation of this interface is in util/env_posix.cc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;include/leveldb/table.h, include/leveldb/table_builder.h&lt;/strong&gt;: Lower-level modules that most clients probably won&#39;t use directly.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>turanszkij/WickedEngine</title>
    <updated>2022-09-11T01:41:08Z</updated>
    <id>tag:github.com,2022-09-11:/turanszkij/WickedEngine</id>
    <link href="https://github.com/turanszkij/WickedEngine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;3D engine with modern graphics&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; src=&#34;https://raw.githubusercontent.com/turanszkij/WickedEngine/master/Content/logo_small.png&#34; width=&#34;180px&#34;&gt; &#xA;&lt;h1&gt;Wicked Engine&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/turanszkij/WickedEngine/actions&#34;&gt;&lt;img src=&#34;https://github.com/turanszkij/WickedEngine/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Github Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/CFjRYmE&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/602811659224088577?logo=discord&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=turanszkij&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/turanszkij.svg?style=social&#34; alt=&#34;follow on Twitter&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://store.steampowered.com/app/1967460/Wicked_Engine/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Steam-383838.svg?style=for-the-badge&amp;amp;logo=steam&#34; alt=&#34;Steam&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.microsoft.com/store/productId/9PPMV065W9QJ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Microsoft_Store-748FB2.svg?style=for-the-badge&amp;amp;logo=microsoft&#34; alt=&#34;Store&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://turanszkij.files.wordpress.com/2019/02/emitterskinned2.gif&#34; width=&#34;256px&#34;&gt; Wicked Engine is an open-source C++ engine focusing on modern rendering techniques and performance. Use this as a framework for your graphics projects, or learning. Some programming skills are required for the best experience, but some simple tools like an Editor are also included. It is free to be used for anything good.&#xA;&lt;br&gt; This project is hosted on &#xA;&lt;a href=&#34;https://github.com/turanszkij/WickedEngine/&#34;&gt;GitHub&lt;/a&gt;. &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/turanszkij/WickedEngine/master/Content/Documentation/WickedEngine-Documentation.md&#34;&gt;Documentation&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/turanszkij/WickedEngine/master/Content/Documentation/ScriptingAPI-Documentation.md&#34;&gt;Scripting API Documentation&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/turanszkij/WickedEngine/master/features.txt&#34;&gt;Features&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wickedengine.net/&#34;&gt;Devblog&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLLN-1FTGyLU_HJoC5zx6hJkB3D2XLiaxS&#34;&gt;Videos&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can download the source code by using Git and cloning the repository, or downloading it as zip. You can also choose to download a pre-built version of the Editor or Tests applications, which will allow you to try out features, load content and execute LUA scripts.&lt;br&gt; Tip: try loading models or scripts from the Content folder using the Editor app to see how everything works. &lt;br&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://turanszkij.files.wordpress.com/2018/11/physics.gif&#34; width=&#34;256px&#34;&gt; &#xA;&lt;h3&gt;Platforms:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 10 or newer&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;UWP&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to build:&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;To build Wicked Engine for Windows 10, use Visual Studio and the provided &lt;code&gt;WickedEngine.sln&lt;/code&gt; solution file. There are a couple of projects that you can run up front: Editor, Tests and Template. You just have to set either as startup project and press F5 in Visual Studio to build and run. For optimal performance, choose &lt;code&gt;Release&lt;/code&gt; mode, for the best debugging experience, choose &lt;code&gt;Debug&lt;/code&gt; mode.&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://turanszkij.files.wordpress.com/2020/08/fighting_game_small-1.gif&#34; width=&#34;256px&#34;&gt; &#xA;&lt;p&gt;If you want to develop an application that uses Wicked Engine, you can build the WickedEngine static library project for the appropriate platform, such as &lt;code&gt;WickedEngine_Windows&lt;/code&gt; and link against it. Including the &lt;code&gt;&#34;WickedEngine.h&#34;&lt;/code&gt; header will attempt to link the binaries for the appropriate platform, but search directories should be set up beforehand. For example, you can set additional library directories to &lt;code&gt;$(SolutionDir)BUILD\$(Platform)\$(Configuration)&lt;/code&gt; by default. For examples, see the &lt;code&gt;Template&lt;/code&gt;, &lt;code&gt;Tests&lt;/code&gt;, and &lt;code&gt;Editor&lt;/code&gt; projects.&lt;/p&gt; &#xA;&lt;p&gt;You can also dowload prebuilt and packaged versions of the Editor and Tests here: &lt;a href=&#34;https://github.com/turanszkij/WickedEngine/actions&#34;&gt;&lt;img src=&#34;https://github.com/turanszkij/WickedEngine/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Github Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have questions or stuck, please use the &lt;code&gt;windows&lt;/code&gt; communication channel on Discord: &lt;a href=&#34;https://discord.gg/CFjRYmE&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/602811659224088577?logo=discord&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: Building 32-bit and ARM versions should be possible, but no longer provided by default. You will need to configure the solution for these platforms yourself if you want this. For ARM platform, also use the &lt;code&gt;-DBT_USE_DOUBLE_PRECISION=1&lt;/code&gt; definition when compiling.&lt;/p&gt; &#xA;&lt;p&gt;Cmake: It is possible to build the windows version with Cmake, but the recommended way is to use the provided WickedEngine.sln file with Visual Studio.&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;To build the engine for Linux, use Cmake. You can find a sample build script for Ubuntu 20.04 &lt;a href=&#34;https://raw.githubusercontent.com/turanszkij/WickedEngine/master/.github/workflows/build.yml&#34;&gt;here&lt;/a&gt; (in the linux section). You might need to install some dependencies, such as Cmake (3.7 or newer), g++ compiler (C++ 17 compliant version) and SDL2. For Ubuntu 20.04, you can use the following commands to install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update&#xA;sudo apt install libsdl2-dev&#xA;sudo apt install build-essential&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the engine, editor and tests, use &lt;code&gt;cmake&lt;/code&gt; and then &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cd build&#xA;cmake .. -DCMAKE_BUILD_TYPE=Release&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to develop an application that uses Wicked Engine, you will have to link to libWickedEngine.a and &lt;code&gt;#include &#34;WickedEngine.h&#34;&lt;/code&gt; into the source code. For examples, look at the Cmake files, or the Tests and the Editor applications.&lt;/p&gt; &#xA;&lt;p&gt;You can also dowload prebuilt and packaged versions of the Editor and Tests here: &lt;a href=&#34;https://github.com/turanszkij/WickedEngine/actions&#34;&gt;&lt;img src=&#34;https://github.com/turanszkij/WickedEngine/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Github Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have questions or stuck, please use the &lt;code&gt;linux&lt;/code&gt; communication channel on Discord: &lt;a href=&#34;https://discord.gg/CFjRYmE&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/602811659224088577?logo=discord&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Examples:&lt;/h3&gt; &#xA;&lt;h4&gt;Initialization (C++):&lt;/h4&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://turanszkij.files.wordpress.com/2018/05/sphinit.gif&#34; width=&#34;256px&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// Include engine headers:&#xA;#include &#34;WickedEngine.h&#34;&#xA;&#xA;// Create the Wicked Engine application:&#xA;wi::Application application;&#xA;&#xA;// Assign window that you will render to:&#xA;application.SetWindow(hWnd);&#xA;&#xA;// Run the application:&#xA;while(true) {&#xA;   application.Run(); &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Basics (C++):&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wi::RenderPath3D myGame; // Declare a game screen component, aka &#34;RenderPath&#34; (you could also override its Update(), Render() etc. functions). &#xA;application.ActivatePath(&amp;amp;myGame); // Register your game to the application. It will call Start(), Update(), Render(), etc. from now on...&#xA;&#xA;wi::scene::LoadModel(&#34;myModel.wiscene&#34;); // Simply load a model into the current global scene&#xA;wi::scene::GetScene(); // Get the current global scene&#xA;&#xA;wi::scene::Scene scene2; // create a separate scene&#xA;wi::scene::LoadModel(scene2, &#34;myModel2.wiscene&#34;); // Load model into a separate scene&#xA;wi::scene::GetScene().Merge(scene2); // Combine separate scene with global scene&#xA;&#xA;myGame.setFXAAEnabled(true); // You can enable post process effects this way...&#xA;&#xA;wi::RenderPath2D myMenuScreen; // This is an other render path, but now a simple 2D one. It can only render 2D graphics by default (like a menu for example)&#xA;application.ActivatePath(&amp;amp;myMenuScreen); // activate the menu, the previous path (myGame) will be stopped&#xA;&#xA;wi::Sprite mySprite(&#34;image.png&#34;); // There are many utilities, such as a &#34;sprite&#34; helper class&#xA;myMenuScreen.AddSprite(&amp;amp;mySprite); // The 2D render path is ready to handle sprite and font rendering for you&#xA;&#xA;wi::audio::Sound mySound;&#xA;wi::audio::CreateSound(&#34;explosion.wav&#34;, &amp;amp;mySound); // Loads a sound file&#xA;wi::audio::SoundInstance mySoundInstance;&#xA;wi::audio::CreateSoundInstance(&amp;amp;mySound, &amp;amp;mySoundInstance); // Instances the sound file, it can be played now&#xA;wi::audio::Play(&amp;amp;mySoundInstance); // Play the sound instance&#xA;wi::audio::SetVolume(0.6, &amp;amp;mySoundInstance); // Set the volume of this soundinstance&#xA;wi::audio::SetVolume(0.2); // Set the master volume&#xA;&#xA;if (wi::input::Press(wi::input::KEYBOARD_BUTTON_SPACE)) { wi::audio::Stop(&amp;amp;mySoundInstance); } // You can check if a button is pressed or not (this only triggers once)&#xA;if (wi::input::Down(wi::input::KEYBOARD_BUTTON_SPACE)) { wi::audio::Play(&amp;amp;mySoundInstance); } // You can check if a button is pushed down or not (this triggers repeatedly)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Scripting (LUA):&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Set a rendering path for the application&#xA;path = RenderPath3D;&#xA;application.SetActivePath(path);    -- &#34;application&#34; is created automatically by wi::Application&#xA;&#xA;-- Load a model entity into the global scene:&#xA;entity = LoadModel(&#34;myModel.wiscene&#34;);&#xA;&#xA;-- Load a model entity into a separate scene:&#xA;scene2 = Scene()&#xA;entity2 = LoadModel(scene2, &#34;myModel2.wiscene&#34;);&#xA;&#xA;-- Combine the separate scene with the global scene:&#xA;scene.Merge(scene2);&#xA;&#xA;-- Get the current global scene:&#xA;scene = GetScene();&#xA;&#xA;-- Move model to the right using the entity-component system:&#xA;transform = scene.Component_GetTransform(entity);&#xA;transform.Translate(Vector(2, 0, 0));&#xA;&#xA;-- Print any WickedEngine class information to the backlog:&#xA;getprops(application);&#x9;-- prints the application methods&#xA;getprops(scene);&#x9;-- prints the Scene class methods&#xA;getprops(path);&#x9;-- prints the deferred render path methods&#xA;&#xA;-- Play a sound:&#xA;sound = Sound()&#xA;audio.CreateSound(&#34;explosion.wav&#34;, sound)&#xA;soundinstance = SoundInstance()&#xA;audio.CreateSoundInstance(sound, soundinstance)  -- several instances can be created from one file&#xA;audio.Play(soundinstance)&#xA;audio.SetVolume(0.6, soundinstance)  -- sets the volume of this soundinstance&#xA;audio.SetVolume(0.2)  -- sets the master volume&#xA;&#xA;-- Check for input:&#xA;if(input.Press(KEYBOARD_BUTTON_LEFT)) then&#xA;   audio.Play(soundinstance); -- this will play the sound if you press the left arrow on the keyboard&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;i&gt;(You can enter lua scripts into the backlog (HOME button), or the startup.lua script which is always executed on application startup if it is found near the app, or load a script via dofile(&#34;script.lua&#34;) command)&lt;/i&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more code samples and advanced use cases, please see the example projects, like the Template_Windows, Tests, or Editor project. There are also sample models and scripts included with Wicked Engine in the Content/models and Content/scripts folders. Check them out to learn about more features.&lt;/p&gt; &#xA;&lt;h3&gt;Scripting API:&lt;/h3&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://turanszkij.files.wordpress.com/2018/11/hairparticle2.gif&#34; width=&#34;256px&#34;&gt; &#xA;&lt;p&gt;You can use a great number of engine features through the Lua scripting api, which can even be used real time while the program is running. The included applications, like the Editor, contain a scripting input method toggled by the &#34;Home&#34; key. A blue screen will be presented where the user can type in LUA commands. It is very minimal in regards to input methods. For further details, please check the scripting API documentation: &lt;a href=&#34;https://raw.githubusercontent.com/turanszkij/WickedEngine/master/Content/Documentation/ScriptingAPI-Documentation.md&#34;&gt;Wicked Engine Scripting API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Model import/export:&lt;/h3&gt; &#xA;&lt;p&gt;The native model format is the &lt;b&gt;WISCENE&lt;/b&gt; format. Any application using Wicked Engine can open this format efficiently.&lt;/p&gt; &#xA;&lt;p&gt;In addition, the Editor supports the importing of some common model formats (the list will potentially grow):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;b&gt;OBJ&lt;/b&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;GLTF 2.0&lt;/b&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;VRM&lt;/b&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The preferred workflow is to import models into the Editor, and save them as &lt;b&gt;WISCENE&lt;/b&gt;, then any Wicked Engine application can open them.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Graphics API:&lt;/h3&gt; &#xA;&lt;p&gt;The default renderer is &lt;code&gt;DirectX 12&lt;/code&gt; on Windows and &lt;code&gt;Vulkan&lt;/code&gt; on Linux. The &lt;code&gt;DirectX 11&lt;/code&gt; renderer is no longer available starting from version 0.57.0, but it can be found on the &lt;a href=&#34;https://github.com/turanszkij/WickedEngine/tree/dx11-backup&#34;&gt;dx11-backup branch&lt;/a&gt;. You can specify command line arguments (without any prefix) to switch between render devices or other settings. Currently the list of options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Argument&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dx12&lt;/td&gt; &#xA;   &lt;td&gt;Use DirectX 12 rendering device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vulkan&lt;/td&gt; &#xA;   &lt;td&gt;Use Vulkan rendering device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;debugdevice&lt;/td&gt; &#xA;   &lt;td&gt;Use debug layer for graphics API validation. Performance will be degraded, but graphics warnings and errors will be written to &#34;Output&#34; window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gpuvalidation&lt;/td&gt; &#xA;   &lt;td&gt;Use GPU Based Validation for graphics. This must be used together with the debugdevice argument. Currently DX12 only.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;alwaysactive&lt;/td&gt; &#xA;   &lt;td&gt;The application will not be paused when the window is in the background.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://turanszkij.files.wordpress.com/2018/11/soft.gif&#34; width=&#34;256px&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Other software using Wicked Engine&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.game-guru.com/max&#34;&gt;Game Guru MAX&lt;/a&gt;: Easy to use game creator software&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0SxXmnSQ6Q4&#34;&gt;Flytrap&lt;/a&gt;: Demoscene production by qop&lt;/li&gt; &#xA; &lt;li&gt;Your project: add your project to this readme and open a pull request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;If you are having trouble getting the applications to run, make sure that you satisfy the following conditions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you built the application with Visual Studio, run it from the Visual Studio environment, where the executable working directory is set up to be the Project directory (not the build directory where the exe will be found)&lt;/li&gt; &#xA; &lt;li&gt;If you want to run an application without Visual Studio, either copy the executable from the BUILD directory to the correct project directory, or set the working directory appropriately. You can also check the Working directory setting in Visual Studio to find out the right working directory of every project.&lt;/li&gt; &#xA; &lt;li&gt;If you want to build UWP application, then you will first need to build the shaders into a shader dump. For that, build and run the &lt;code&gt;offlineshadercompiler&lt;/code&gt; project with the &lt;code&gt;hlsl6 shaderdump&lt;/code&gt; command line arguments. If the &lt;code&gt;wiShaderDump.h&lt;/code&gt; file is successfully generated, rebuilding the engine will embed all the shader files so they are not loaded separately. But embedded shaders also cannot be recompiled during runtime.&lt;/li&gt; &#xA; &lt;li&gt;If you experience crashes, follow these steps to find out the problem: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;make sure your environment is up to date, with latest graphics drivers and operating system updates.&lt;/li&gt; &#xA;   &lt;li&gt;see if there is a wiBackLog.txt in your user temp folder (for example: C:\Users\username\AppData\Local\Temp), and request help on Discord or Github issue&lt;/li&gt; &#xA;   &lt;li&gt;build the engine in Debug mode and try to run it, see where it crashes, provide call stack on Discord or Github issue&lt;/li&gt; &#xA;   &lt;li&gt;run the engine with the &lt;code&gt;debugdevice&lt;/code&gt; command argument and post the text from your console output window when the crash happens&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Screenshots:&lt;/h3&gt; &#xA;&lt;p&gt;Procedural terrain generator: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2022/04/procedural_terrain.png&#34; alt=&#34;ProceduralTerrain&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Path tracing: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2022/04/sanmiguel.png&#34; alt=&#34;PathTracing&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dynamic Diffuse Global Illumination (DDGI): &lt;img src=&#34;https://turanszkij.files.wordpress.com/2022/04/ddgi.png&#34; alt=&#34;DDGI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Snow storm with particle systems: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2022/04/snowstorm.png&#34; alt=&#34;SnowStorm&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sponza scene with voxel GI enabled: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2020/08/vxgi_sponza_small.png&#34; alt=&#34;Sponza&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Damaged Helmet sample model imported from GLTF: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2019/03/damagedhelmet.png&#34; alt=&#34;Sponza&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bokeh Depth of Field (Lain model by &lt;a href=&#34;https://sketchfab.com/3d-models/lain-20-bf255be16da34df08d48abb5443a6706&#34;&gt;woopoodle at Sketchfab&lt;/a&gt;): &lt;img src=&#34;https://turanszkij.files.wordpress.com/2020/08/dof_bokeh_small.png&#34; alt=&#34;DepthOfField&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Motion blur (fighting game sample): &lt;img src=&#34;https://turanszkij.files.wordpress.com/2019/12/motionblur.png&#34; alt=&#34;MotionBlur&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stochastic Screen Space Reflections: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2020/08/ssr.png&#34; alt=&#34;ScreenSpaceReflections&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Real time ray traced shadows and ambient occlusion (DXR, VK_KHR_raytracing): &lt;img src=&#34;https://turanszkij.files.wordpress.com/2020/08/dxr_rtao_rtshadow_small.png&#34; alt=&#34;RaytracedShadows&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bloom: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2020/08/bloom_new.png&#34; alt=&#34;Bloom&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Path tracing in the living room (model from &lt;a href=&#34;http://casual-effects.com/data/index.html&#34;&gt;Morgan McGuire&#39;s graphics archive&lt;/a&gt;): &lt;img src=&#34;https://turanszkij.files.wordpress.com/2019/09/livingroom.jpg&#34; alt=&#34;LivingRoom&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;City scene with a light map (model by &lt;a href=&#34;https://www.cgtrader.com/michaelmilesgallie&#34;&gt;Michael Gallie at CgTrader&lt;/a&gt;): &lt;img src=&#34;https://turanszkij.files.wordpress.com/2019/01/city1.png&#34; alt=&#34;City&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Path tracing in the city: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2019/01/city2.png&#34; alt=&#34;Balcony&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Path traced caustics: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2019/01/trace.png&#34; alt=&#34;Caustics&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vegetation particle system and depth of field: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2020/08/grass.png&#34; alt=&#34;Vegetation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bistro scene from Amazon Lumberyard (model from &lt;a href=&#34;http://casual-effects.com/data/index.html&#34;&gt;Morgan McGuire&#39;s graphics archive&lt;/a&gt;): &lt;img src=&#34;https://turanszkij.files.wordpress.com/2019/01/bistro_out_0.png&#34; alt=&#34;Bistro_out&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bistro scene from the inside: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2019/01/bistro_in_2.png&#34; alt=&#34;Bistro_in&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Parallax occlusion mapping: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2019/01/pom.png&#34; alt=&#34;ParallxOcclusionMapping&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Large scale particle simulation on the GPU: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2020/08/particles_2.png&#34; alt=&#34;ParticleSimulation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tiled light culling in the Bistro: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2019/02/bistro_heatmap-1.png&#34; alt=&#34;TiledLightCulling&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;GPU-based BVH builder: &lt;img src=&#34;https://turanszkij.files.wordpress.com/2019/07/bvh_livingroom.png&#34; alt=&#34;GPU_BVH&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>