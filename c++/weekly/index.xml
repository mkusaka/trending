<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-10T01:47:42Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jbeder/yaml-cpp</title>
    <updated>2024-03-10T01:47:42Z</updated>
    <id>tag:github.com,2024-03-10:/jbeder/yaml-cpp</id>
    <link href="https://github.com/jbeder/yaml-cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A YAML parser and emitter in C++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;yaml-cpp &lt;img src=&#34;https://github.com/jbeder/yaml-cpp/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://codedocs.xyz/jbeder/yaml-cpp/&#34;&gt;&lt;img src=&#34;https://codedocs.xyz/jbeder/yaml-cpp.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;yaml-cpp&lt;/code&gt; is a &lt;a href=&#34;http://www.yaml.org/&#34;&gt;YAML&lt;/a&gt; parser and emitter in C++ matching the &lt;a href=&#34;http://www.yaml.org/spec/1.2/spec.html&#34;&gt;YAML 1.2 spec&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jbeder/yaml-cpp/wiki/Tutorial&#34;&gt;Tutorial&lt;/a&gt; and &lt;a href=&#34;https://github.com/jbeder/yaml-cpp/wiki/How-To-Emit-YAML&#34;&gt;How to Emit YAML&lt;/a&gt; for reference. For the old API (until 0.5.0), see &lt;a href=&#34;https://github.com/jbeder/yaml-cpp/wiki/How-To-Parse-A-Document-(Old-API)&#34;&gt;How To Parse A Document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Any Problems?&lt;/h2&gt; &#xA;&lt;p&gt;If you find a bug, post an &lt;a href=&#34;https://github.com/jbeder/yaml-cpp/issues&#34;&gt;issue&lt;/a&gt;! If you have questions about how to use yaml-cpp, please post it on &lt;a href=&#34;http://stackoverflow.com&#34;&gt;http://stackoverflow.com&lt;/a&gt; and tag it &lt;a href=&#34;http://stackoverflow.com/questions/tagged/yaml-cpp&#34;&gt;&lt;code&gt;yaml-cpp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to Build&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;yaml-cpp&lt;/code&gt; uses &lt;a href=&#34;http://www.cmake.org&#34;&gt;CMake&lt;/a&gt; to support cross-platform building. Install &lt;a href=&#34;http://www.cmake.org&#34;&gt;CMake&lt;/a&gt; &lt;em&gt;(Resources -&amp;gt; Download)&lt;/em&gt; before proceeding. The basic steps to build are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you don&#39;t use the provided installer for your platform, make sure that you add &lt;code&gt;CMake&lt;/code&gt;&#39;s bin folder to your path.&lt;/p&gt; &#xA;&lt;h4&gt;1. Navigate into the source directory, create build folder and run &lt;code&gt;CMake&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir build&#xA;cd build&#xA;cmake [-G generator] [-DYAML_BUILD_SHARED_LIBS=on|OFF] ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;generator&lt;/code&gt; option is the build system you&#39;d like to use. Run &lt;code&gt;cmake&lt;/code&gt; without arguments to see a full list of available generators.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;On Windows, you might use &#34;Visual Studio 12 2013&#34; (VS 2013 32-bits), or &#34;Visual Studio 14 2015 Win64&#34; (VS 2015 64-bits).&lt;/li&gt; &#xA;   &lt;li&gt;On OS X, you might use &#34;Xcode&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;On a UNIX-like system, omit the option (for a Makefile).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;yaml-cpp&lt;/code&gt; builds a static library by default, you may want to build a shared library by specifying &lt;code&gt;-DYAML_BUILD_SHARED_LIBS=ON&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode.html&#34;&gt;Debug mode of the GNU standard C++ library&lt;/a&gt; can be used when both &lt;code&gt;yaml-cpp&lt;/code&gt; and client code is compiled with the &lt;code&gt;_GLIBCXX_DEBUG&lt;/code&gt; flag (e.g. by calling CMake with &lt;code&gt;-D CMAKE_CXX_FLAGS_DEBUG=&#39;-g -D_GLIBCXX_DEBUG&#39;&lt;/code&gt; option).&lt;/p&gt; &lt;p&gt;Note that for &lt;code&gt;yaml-cpp&lt;/code&gt; unit tests to run successfully, the &lt;em&gt;GoogleTest&lt;/em&gt; library also must be built with this flag, i.e. the system one cannot be used (the &lt;em&gt;YAML_USE_SYSTEM_GTEST&lt;/em&gt; CMake option must be &lt;em&gt;OFF&lt;/em&gt;, which is the default).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For more options on customizing the build, see the &lt;a href=&#34;https://github.com/jbeder/yaml-cpp/raw/master/CMakeLists.txt&#34;&gt;CMakeLists.txt&lt;/a&gt; file.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2. Build it!&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The command you&#39;ll need to run depends on the generator you chose earlier.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To clean up, just remove the &lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;How to Integrate it within your project using CMake&lt;/h2&gt; &#xA;&lt;p&gt;You can use for example FetchContent :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;include(FetchContent)&#xA;&#xA;FetchContent_Declare(&#xA;  yaml-cpp&#xA;  GIT_REPOSITORY https://github.com/jbeder/yaml-cpp.git&#xA;  GIT_TAG &amp;lt;tag_name&amp;gt; # Can be a tag (yaml-cpp-x.x.x), a commit hash, or a branch name (master)&#xA;)&#xA;FetchContent_GetProperties(yaml-cpp)&#xA;&#xA;if(NOT yaml-cpp_POPULATED)&#xA;  message(STATUS &#34;Fetching yaml-cpp...&#34;)&#xA;  FetchContent_Populate(yaml-cpp)&#xA;  add_subdirectory(${yaml-cpp_SOURCE_DIR} ${yaml-cpp_BINARY_DIR})&#xA;endif()&#xA;&#xA;target_link_libraries(YOUR_LIBRARY PUBLIC yaml-cpp::yaml-cpp) # The library or executable that require yaml-cpp library&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Recent Releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jbeder/yaml-cpp/releases/tag/yaml-cpp-0.6.0&#34;&gt;yaml-cpp 0.6.0&lt;/a&gt; released! This release requires C++11, and no longer depends on Boost.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jbeder/yaml-cpp/releases/tag/release-0.3.0&#34;&gt;yaml-cpp 0.3.0&lt;/a&gt; is still available if you want the old API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The old API will continue to be supported, and will still receive bugfixes!&lt;/strong&gt; The 0.3.x and 0.4.x versions will be old API releases, and 0.5.x and above will all be new API releases.&lt;/p&gt; &#xA;&lt;h1&gt;API Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The autogenerated API reference is hosted on &lt;a href=&#34;https://codedocs.xyz/jbeder/yaml-cpp/index.html&#34;&gt;CodeDocs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Third Party Integrations&lt;/h1&gt; &#xA;&lt;p&gt;The following projects are not officially supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/brcha/d392b2fe5f1e427cc8a6&#34;&gt;Qt wrapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jwindgassen/UnrealYAML&#34;&gt;UnrealEngine Wrapper&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>melonDS-emu/melonDS</title>
    <updated>2024-03-10T01:47:42Z</updated>
    <id>tag:github.com,2024-03-10:/melonDS-emu/melonDS</id>
    <link href="https://github.com/melonDS-emu/melonDS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DS emulator, sorta&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/melonDS-emu/melonDS/master/res/icon/melon_128x128.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;&lt;b&gt;melonDS&lt;/b&gt;&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://melonds.kuribo64.net/&#34; alt=&#34;melonDS website&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/website-melonds.kuribo64.net-%2331352e.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melonds.kuribo64.net/downloads.php&#34; alt=&#34;Release: 0.9.5&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/release-0.9.5-%235c913b.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34; alt=&#34;License: GPLv3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-%23ff554d.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kiwiirc.com/client/irc.badnik.net/?nick=IRC-Source_?#melonds&#34; alt=&#34;IRC channel: #melonds&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/IRC%20chat-%23melonds-%23dd2e44.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/melonDS-emu/melonDS/actions?query=workflow%3A%22CMake+Build+%28Windows+x86-64%29%22+event%3Apush&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/melonDS-emu/melonDS/build-windows.yml?label=Windows%20x86-64&amp;amp;logo=GitHub&amp;amp;branch=master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/melonDS-emu/melonDS/actions?query=workflow%3A%22CMake+Build+%28Ubuntu+x86-64%29%22+event%3Apush&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/melonDS-emu/melonDS/build-ubuntu.yml?label=Linux%20x86-64&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/melonDS-emu/melonDS/actions?query=workflow%3A%22CMake+Build+%28Ubuntu+aarch64%29%22+event%3Apush&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/melonDS-emu/melonDS/build-ubuntu-aarch64.yml?label=Linux%20ARM64&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/melonDS-emu/melonDS/actions/workflows/build-macos-universal.yml?query=event%3Apush&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/melonDS-emu/melonDS/build-macos.yml?label=macOS%20Universal&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;/p&gt; DS emulator, sorta &#xA;&lt;p&gt;The goal is to do things right and fast, akin to blargSNES (but hopefully better). But also to, you know, have a fun challenge :)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;Firmware boot (not direct boot) requires a BIOS/firmware dump from an original DS or DS Lite. DS firmwares dumped from a DSi or 3DS aren&#39;t bootable and only contain configuration data, thus they are only suitable when booting games directly.&lt;/p&gt; &#xA;&lt;h3&gt;Possible firmware sizes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;128KB: DSi/3DS DS-mode firmware (reduced size due to lacking bootcode)&lt;/li&gt; &#xA; &lt;li&gt;256KB: regular DS firmware&lt;/li&gt; &#xA; &lt;li&gt;512KB: iQue DS firmware&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;DS BIOS dumps from a DSi or 3DS can be used with no compatibility issues. DSi BIOS dumps (in DSi mode) are not compatible. Or maybe they are. I don&#39;t know.&lt;/p&gt; &#xA;&lt;p&gt;As for the rest, the interface should be pretty straightforward. If you have a question, don&#39;t hesitate to ask, though!&lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu 22.04: &lt;code&gt;sudo apt install cmake extra-cmake-modules libcurl4-gnutls-dev libpcap0.8-dev libsdl2-dev qtbase5-dev qtbase5-private-dev qtmultimedia5-dev libslirp-dev libarchive-dev libzstd-dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Older Ubuntu: &lt;code&gt;sudo apt install cmake extra-cmake-modules libcurl4-gnutls-dev libpcap0.8-dev libsdl2-dev qt5-default qtbase5-private-dev qtmultimedia5-dev libslirp-dev libarchive-dev libzstd-dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Arch Linux: &lt;code&gt;sudo pacman -S base-devel cmake extra-cmake-modules git libpcap sdl2 qt5-base qt5-multimedia libslirp libarchive zstd&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the melonDS repository and prepare:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/melonDS-emu/melonDS&#xA;cd melonDS&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -B build&#xA;cmake --build build -j$(nproc --all)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.msys2.org/&#34;&gt;MSYS2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;strong&gt;MSYS2 MinGW 64-bit&lt;/strong&gt; terminal&lt;/li&gt; &#xA; &lt;li&gt;Update the packages using &lt;code&gt;pacman -Syu&lt;/code&gt; and reopen the terminal if it asks you to&lt;/li&gt; &#xA; &lt;li&gt;Install git to clone the repository &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pacman -S git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download the melonDS repository and prepare: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/melonDS-emu/melonDS&#xA;cd melonDS&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Dynamic builds (with DLLs)&lt;/h4&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Install dependencies: &lt;code&gt;pacman -S mingw-w64-x86_64-{cmake,SDL2,toolchain,qt5-base,qt5-svg,qt5-multimedia,qt5-tools,libslirp,libarchive,zstd}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -B build&#xA;cmake --build build&#xA;cd build&#xA;../tools/msys-dist.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If everything went well, melonDS and the libraries it needs should now be in the &lt;code&gt;dist&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h4&gt;Static builds (without DLLs, standalone executable)&lt;/h4&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Install dependencies: &lt;code&gt;pacman -S mingw-w64-x86_64-{cmake,SDL2,toolchain,qt5-static,libslirp,libarchive,zstd}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -B build -DBUILD_STATIC=ON -DCMAKE_PREFIX_PATH=/mingw64/qt5-static&#xA;cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If everything went well, melonDS should now be in the &lt;code&gt;build&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew Package Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies: &lt;code&gt;brew install git pkg-config cmake sdl2 qt@6 libslirp libarchive zstd&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the melonDS repository and prepare: &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git clone https://github.com/melonDS-emu/melonDS&#xA;cd melonDS&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Compile: &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;cmake -B build -DCMAKE_PREFIX_PATH=&#34;$(brew --prefix qt@6);$(brew --prefix libarchive)&#34; -DUSE_QT6=ON&#xA;cmake --build build -j$(sysctl -n hw.logicalcpu)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If everything went well, melonDS.app should now be in the &lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h4&gt;Self-contained app bundle&lt;/h4&gt; &#xA;&lt;p&gt;If you want an app bundle that can be distributed to other computers without needing to install dependencies through Homebrew, you can additionally run &lt;code&gt; ../tools/mac-bundle.rb melonDS.app&lt;/code&gt; after the build is completed, or add &lt;code&gt;-DMACOS_BUNDLE_LIBS=ON&lt;/code&gt; to the first CMake command.&lt;/p&gt; &#xA;&lt;h2&gt;TODO LIST&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;better DSi emulation&lt;/li&gt; &#xA; &lt;li&gt;better OpenGL rendering&lt;/li&gt; &#xA; &lt;li&gt;netplay&lt;/li&gt; &#xA; &lt;li&gt;the impossible quest of pixel-perfect 3D graphics&lt;/li&gt; &#xA; &lt;li&gt;support for rendering screens to separate windows&lt;/li&gt; &#xA; &lt;li&gt;emulating some fancy addons&lt;/li&gt; &#xA; &lt;li&gt;other non-core shit (debugger, graphics viewers, etc)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO LIST FOR LATER (low priority)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;big-endian compatibility (Wii, etc)&lt;/li&gt; &#xA; &lt;li&gt;LCD refresh time (used by some games for blending effects)&lt;/li&gt; &#xA; &lt;li&gt;any feature you can eventually ask for that isn&#39;t outright stupid&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Martin for GBAtek, a good piece of documentation&lt;/li&gt; &#xA; &lt;li&gt;Cydrak for the extra 3D GPU research&lt;/li&gt; &#xA; &lt;li&gt;limittox for the icon&lt;/li&gt; &#xA; &lt;li&gt;All of you comrades who have been testing melonDS, reporting issues, suggesting shit, etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;&lt;img src=&#34;https://www.gnu.org/graphics/gplv3-127x51.png&#34; alt=&#34;GNU GPLv3 Image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;melonDS is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;h3&gt;External&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Images used in the Input Config Dialog - see &lt;code&gt;src/frontend/qt_sdl/InputConfig/resources/LICENSE.md&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>idaholab/moose</title>
    <updated>2024-03-10T01:47:42Z</updated>
    <id>tag:github.com,2024-03-10:/idaholab/moose</id>
    <link href="https://github.com/idaholab/moose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multiphysics Object Oriented Simulation Environment&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MOOSE&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://civet.inl.gov/repo/idaholab/moose/&#34;&gt;&lt;img src=&#34;https://civet.inl.gov/idaholab/moose/master/branch_status.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Multiphysics Object-Oriented Simulation Environment (MOOSE) is a finite-element, multiphysics framework primarily developed by &lt;a href=&#34;http://www.inl.gov&#34;&gt;Idaho National Laboratory&lt;/a&gt;. It provides a high-level interface to some of the most sophisticated &lt;a href=&#34;http://www.mcs.anl.gov/petsc/&#34;&gt;nonlinear solver technology&lt;/a&gt; on the planet. MOOSE presents a straightforward API that aligns well with the real-world problems scientists and engineers need to tackle. Every detail about how an engineer interacts with MOOSE has been thought through, from the installation process through running your simulation on state of the art supercomputers, the MOOSE system will accelerate your research.&lt;/p&gt; &#xA;&lt;p&gt;Some of the capability at your fingertips:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully-coupled, fully-implicit multiphysics solver&lt;/li&gt; &#xA; &lt;li&gt;Dimension independent physics&lt;/li&gt; &#xA; &lt;li&gt;Automatically parallel (largest runs &amp;gt;100,000 CPU cores!)&lt;/li&gt; &#xA; &lt;li&gt;Modular development simplifies code reuse&lt;/li&gt; &#xA; &lt;li&gt;Built-in mesh adaptivity&lt;/li&gt; &#xA; &lt;li&gt;Continuous and Discontinuous Galerkin (DG) (at the same time!)&lt;/li&gt; &#xA; &lt;li&gt;Intuitive parallel multiscale solves (see videos below)&lt;/li&gt; &#xA; &lt;li&gt;Dimension agnostic, parallel geometric search (for contact related applications)&lt;/li&gt; &#xA; &lt;li&gt;Flexible, pluggable graphical user interface&lt;/li&gt; &#xA; &lt;li&gt;~30 pluggable interfaces allow specialization of every part of the solve&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;More Information&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;For more information, including installation instructions, please see the official website: &lt;a href=&#34;https://mooseframework.org&#34;&gt;mooseframework.org&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;For information on how to contribute code changes to MOOSE please &lt;a href=&#34;https://mooseframework.org/framework/contributing.html&#34;&gt;see this article&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>