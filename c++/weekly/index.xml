<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-15T01:42:48Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zrax/pycdc</title>
    <updated>2023-10-15T01:42:48Z</updated>
    <id>tag:github.com,2023-10-15:/zrax/pycdc</id>
    <link href="https://github.com/zrax/pycdc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C++ python bytecode disassembler and decompiler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Decompyle++&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;A Python Byte-code Disassembler/Decompiler&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Decompyle++ aims to translate compiled Python byte-code back into valid and human-readable Python source code. While other projects have achieved this with varied success, Decompyle++ is unique in that it seeks to support byte-code from any version of Python.&lt;/p&gt; &#xA;&lt;p&gt;Decompyle++ includes both a byte-code disassembler (pycdas) and a decompiler (pycdc).&lt;/p&gt; &#xA;&lt;p&gt;As the name implies, Decompyle++ is written in C++. If you wish to contribute, please fork us on github at &lt;a href=&#34;https://github.com/zrax/pycdc&#34;&gt;https://github.com/zrax/pycdc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building Decompyle++&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate a project or makefile with &lt;a href=&#34;http://www.cmake.org&#34;&gt;CMake&lt;/a&gt; (See CMake&#39;s documentation for details)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;The following options can be passed to CMake to control debug features:&lt;/p&gt; &#xA;    &lt;table&gt; &#xA;     &lt;thead&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;th&gt;Option&lt;/th&gt; &#xA;       &lt;th&gt;Description&lt;/th&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/thead&gt; &#xA;     &lt;tbody&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;&lt;code&gt;-DCMAKE_BUILD_TYPE=Debug&lt;/code&gt;&lt;/td&gt; &#xA;       &lt;td&gt;Produce debugging symbols&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;&lt;code&gt;-DENABLE_BLOCK_DEBUG=ON&lt;/code&gt;&lt;/td&gt; &#xA;       &lt;td&gt;Enable block debugging output&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;&lt;code&gt;-DENABLE_STACK_DEBUG=ON&lt;/code&gt;&lt;/td&gt; &#xA;       &lt;td&gt;Enable stack debugging output&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/tbody&gt; &#xA;    &lt;/table&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the generated project or makefile&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For projects (e.g. MSVC), open the generated project file and build it&lt;/li&gt; &#xA;   &lt;li&gt;For makefiles, just run &lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;To run tests (on *nix or MSYS), run &lt;code&gt;make check&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;To run pycdas&lt;/strong&gt;, the PYC Disassembler: &lt;code&gt;./pycdas [PATH TO PYC FILE]&lt;/code&gt; The byte-code disassembly is printed to stdout.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To run pycdc&lt;/strong&gt;, the PYC Decompiler: &lt;code&gt;./pycdc [PATH TO PYC FILE]&lt;/code&gt; The decompiled Python source is printed to stdout. Any errors are printed to stderr.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Marshalled code objects&lt;/strong&gt;: Both tools support Python marshalled code objects, as output from &lt;code&gt;marshal.dumps(compile(...))&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use this feature, specify &lt;code&gt;-c -v &amp;lt;version&amp;gt;&lt;/code&gt; on the command line - the version must be specified as the objects themselves do not contain version metadata.&lt;/p&gt; &#xA;&lt;h2&gt;Authors, Licence, Credits&lt;/h2&gt; &#xA;&lt;p&gt;Decompyle++ is the work of Michael Hansen and Darryl Pogue.&lt;/p&gt; &#xA;&lt;p&gt;Additional contributions from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;charlietang98&lt;/li&gt; &#xA; &lt;li&gt;Kunal Parmar&lt;/li&gt; &#xA; &lt;li&gt;Olivier Iffrig&lt;/li&gt; &#xA; &lt;li&gt;Zlodiy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is released under the terms of the GNU General Public License, version 3; See LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>danielkrupinski/Osiris</title>
    <updated>2023-10-15T01:42:48Z</updated>
    <id>tag:github.com,2023-10-15:/danielkrupinski/Osiris</id>
    <link href="https://github.com/danielkrupinski/Osiris" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free and open-source game hack for Counter-Strike 2, written in modern C++. For Windows and Linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Osiris&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/danielkrupinski/Osiris/workflows/Windows/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Windows&#34;&gt; &lt;img src=&#34;https://github.com/danielkrupinski/Osiris/workflows/Linux/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Linux&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Free and open-source game hack for &lt;strong&gt;Counter-Strike 2&lt;/strong&gt;. Compatible with the latest Steam version of the game. Cross-platform - available for Windows and Linux systems.&lt;/p&gt; &#xA;&lt;h2&gt;Technical features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C++ runtime library (CRT) is not used in release builds&lt;/li&gt; &#xA; &lt;li&gt;No heap memory allocations&lt;/li&gt; &#xA; &lt;li&gt;No static imports in release build on Windows&lt;/li&gt; &#xA; &lt;li&gt;No threads are created&lt;/li&gt; &#xA; &lt;li&gt;Exceptions are not used&lt;/li&gt; &#xA; &lt;li&gt;No external dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft Visual Studio 2022 with Windows SDK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CMake 3.16 or newer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;gcc 11 or newer&lt;/strong&gt; or &lt;strong&gt;clang 13 or newer&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compiling from source&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;Open &lt;strong&gt;Osiris.sln&lt;/strong&gt; in Visual Studio 2022, set build configuration to &lt;strong&gt;Release | x64&lt;/strong&gt;. Press &lt;em&gt;Build solution&lt;/em&gt; and you should receive &lt;strong&gt;Osiris.dll&lt;/strong&gt; file.&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;Configure with CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DCMAKE_BUILD_TYPE=Release -B build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake --build build -j $(nproc --all)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After following these steps you should receive &lt;strong&gt;libOsiris.so&lt;/strong&gt; file in &lt;strong&gt;build/Source/&lt;/strong&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Loading / Injecting into game process&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;You need a &lt;strong&gt;DLL injector&lt;/strong&gt; to inject (load) &lt;strong&gt;Osiris.dll&lt;/strong&gt; into game process.&lt;/p&gt; &#xA;&lt;p&gt;Counter-Strike 2 blocks LoadLibrary injection method, so you have to use a manual mapping (aka reflective DLL injection) injector.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Xenos&lt;/strong&gt; and &lt;strong&gt;Extreme Injector&lt;/strong&gt; are known to be &lt;strong&gt;detected&lt;/strong&gt; by VAC.&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;You can simply run the following script in the directory containing &lt;strong&gt;libOsiris.so&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo gdb -batch-silent -p $(pidof cs2) -ex &#34;call (void*)dlopen(\&#34;$PWD/libOsiris.so\&#34;, 2)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, this injection method might be detected by VAC as gdb is visible under &lt;strong&gt;TracerPid&lt;/strong&gt; in &lt;code&gt;/proc/$(pidof cs2)/status&lt;/code&gt; for the duration of the injection.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Copyright (c) 2018-2023 Daniel Krupi≈Ñski&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://opensource.org/licenses/mit-license.php&#34;&gt;MIT License&lt;/a&gt; - see the&amp;nbsp;&lt;a href=&#34;https://github.com/danielkrupinski/Osiris/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/or-tools</title>
    <updated>2023-10-15T01:42:48Z</updated>
    <id>tag:github.com,2023-10-15:/google/or-tools</id>
    <link href="https://github.com/google/or-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google&#39;s Operations Research tools:&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OR-Tools - Google Optimization Tools&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/ortools/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/ortools.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/ortools/#files&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/ortools.svg?sanitize=true&#34; alt=&#34;PyPI download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mybinder.org/v2/gh/google/or-tools/main&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge.svg?sanitize=true&#34; alt=&#34;Binder&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://www.nuget.org/packages/Google.OrTools&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Google.OrTools.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Google.OrTools&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Google.OrTools.svg?sanitize=true&#34; alt=&#34;NuGet download&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://mvnrepository.com/artifact/com.google.ortools/ortools-java&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.google.ortools/ortools-java&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://discord.gg/ENkQrdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/693088862481678374?color=7289DA&amp;amp;logo=discord&amp;amp;style=plastic&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Google&#39;s software suite for combinatorial optimization.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/#about&#34;&gt;About OR-Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/#codemap&#34;&gt;Codemap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;about&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About OR-Tools&lt;/h2&gt; &#xA;&lt;p&gt;Google Optimization Tools (a.k.a., OR-Tools) is an open-source, fast and portable software suite for solving combinatorial optimization problems.&lt;/p&gt; &#xA;&lt;p&gt;The suite contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Two constraint programming solver (CP* and CP-SAT);&lt;/li&gt; &#xA; &lt;li&gt;Two linear programming solvers (Glop and PDLP);&lt;/li&gt; &#xA; &lt;li&gt;Wrappers around commercial and other open source solvers, including mixed integer solvers;&lt;/li&gt; &#xA; &lt;li&gt;Bin packing and knapsack algorithms;&lt;/li&gt; &#xA; &lt;li&gt;Algorithms for the Traveling Salesman Problem and Vehicle Routing Problem;&lt;/li&gt; &#xA; &lt;li&gt;Graph algorithms (shortest paths, min cost flow, max flow, linear sum assignment).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We wrote OR-Tools in C++, but provide wrappers in Python, C# and Java.&lt;/p&gt; &#xA;&lt;h2&gt;Codemap&lt;/h2&gt; &#xA;&lt;p&gt;This software suite is composed of the following components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/Makefile&#34;&gt;Makefile&lt;/a&gt; Top-level for &lt;a href=&#34;https://www.gnu.org/software/make/manual/make.html&#34;&gt;GNU Make&lt;/a&gt; based build.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/makefiles&#34;&gt;makefiles&lt;/a&gt; Subsidiary Make files, CI and build system documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/CMakeLists.txt&#34;&gt;CMakeLists.txt&lt;/a&gt; Top-level for &lt;a href=&#34;https://cmake.org/cmake/help/latest/&#34;&gt;CMake&lt;/a&gt; based build.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/cmake&#34;&gt;cmake&lt;/a&gt; Subsidiary CMake files, CI and build system documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/WORKSPACE&#34;&gt;WORKSPACE&lt;/a&gt; Top-level for &lt;a href=&#34;https://bazel.build/start/bazel-intro&#34;&gt;Bazel&lt;/a&gt; based build.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/bazel&#34;&gt;bazel&lt;/a&gt; Subsidiary Bazel files, CI and build system documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools&#34;&gt;ortools&lt;/a&gt; Root directory for source code. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/base&#34;&gt;base&lt;/a&gt; Basic utilities.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/algorithms&#34;&gt;algorithms&lt;/a&gt; Basic algorithms. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/algorithms/samples&#34;&gt;samples&lt;/a&gt; Carefully crafted samples.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/graph&#34;&gt;graph&lt;/a&gt; Graph algorithms. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/graph/samples&#34;&gt;samples&lt;/a&gt; Carefully crafted samples.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/linear_solver&#34;&gt;linear_solver&lt;/a&gt; Linear solver wrapper. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/linear_solver/samples&#34;&gt;samples&lt;/a&gt; Carefully crafted samples.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/glop&#34;&gt;glop&lt;/a&gt; Simplex-based linear programming solver. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/glop/samples&#34;&gt;samples&lt;/a&gt; Carefully crafted samples.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/pdlp&#34;&gt;pdlp&lt;/a&gt; First-order linear programming solver. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/pdlp/samples&#34;&gt;samples&lt;/a&gt; Carefully crafted samples.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/lp_data&#34;&gt;lp_data&lt;/a&gt; Data structures for linear models.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/constraint_solver&#34;&gt;constraint_solver&lt;/a&gt; Constraint and Routing solver. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/constraint_solver/docs&#34;&gt;docs&lt;/a&gt; Documentation of the component.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/constraint_solver/samples&#34;&gt;samples&lt;/a&gt; Carefully crafted samples.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/sat&#34;&gt;sat&lt;/a&gt; SAT solver. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/sat/docs&#34;&gt;docs&lt;/a&gt; Documentation of the component.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/sat/samples&#34;&gt;samples&lt;/a&gt; Carefully crafted samples.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/bop&#34;&gt;bop&lt;/a&gt; Boolean solver based on SAT.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/ortools/util&#34;&gt;util&lt;/a&gt; Utilities needed by the constraint solver&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/examples&#34;&gt;examples&lt;/a&gt; Root directory for all examples. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/examples/contrib&#34;&gt;contrib&lt;/a&gt; Examples from the community.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/examples/cpp&#34;&gt;cpp&lt;/a&gt; C++ examples.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/examples/dotnet&#34;&gt;dotnet&lt;/a&gt; .Net examples.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/examples/java&#34;&gt;java&lt;/a&gt; Java examples.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/examples/python&#34;&gt;python&lt;/a&gt; Python examples.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/examples/notebook&#34;&gt;notebook&lt;/a&gt; Jupyter/IPython notebooks.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/examples/flatzinc&#34;&gt;flatzinc&lt;/a&gt; FlatZinc examples.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/examples/tests&#34;&gt;tests&lt;/a&gt; Unit tests and bug reports.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/tools&#34;&gt;tools&lt;/a&gt; Delivery Tools (e.g. Windows GNU binaries, scripts, release dockers)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This software suite has been tested under:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 18.04 LTS and up (64-bit);&lt;/li&gt; &#xA; &lt;li&gt;Apple macOS Mojave with Xcode 9.x (64-bit);&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Windows with Visual Studio 2019 (64-bit).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OR-Tools currently builds with a Makefile, but also provides Bazel and CMake support.&lt;/p&gt; &#xA;&lt;p&gt;For installation instructions (both source and binary), please visit &lt;a href=&#34;https://developers.google.com/optimization/introduction/installing&#34;&gt;https://developers.google.com/optimization/introduction/installing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build from source using Make (legacy)&lt;/h3&gt; &#xA;&lt;p&gt;We provide a Make based build.&lt;br&gt;Please check the &lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/makefiles/README.md&#34;&gt;Make build instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build from source using CMake&lt;/h3&gt; &#xA;&lt;p&gt;We provide a CMake based build.&lt;br&gt;Please check the &lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/cmake/README.md&#34;&gt;CMake build instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build from source using Bazel&lt;/h3&gt; &#xA;&lt;p&gt;We provide a Bazel based build.&lt;br&gt;Please check the &lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/bazel/README.md&#34;&gt;Bazel build instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The best way to learn how to use OR-Tools is to follow the tutorials in our developer guide:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/optimization/introduction/get_started&#34;&gt;https://developers.google.com/optimization/introduction/get_started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to learn from code examples, take a look at the examples in the &lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/examples&#34;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The complete documentation for OR-Tools is available at: &lt;a href=&#34;https://developers.google.com/optimization/&#34;&gt;https://developers.google.com/optimization/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file contains instructions on how to submit the Contributor License Agreement before sending any pull requests (PRs). Of course, if you&#39;re new to the project, it&#39;s usually best to discuss any proposals and reach consensus before sending your first PR.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The OR-Tools software suite is licensed under the terms of the Apache License 2.0. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/or-tools/stable/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>