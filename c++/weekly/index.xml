<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-03T01:46:17Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wesnoth/wesnoth</title>
    <updated>2023-12-03T01:46:17Z</updated>
    <id>tag:github.com,2023-12-03:/wesnoth/wesnoth</id>
    <link href="https://github.com/wesnoth/wesnoth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source, turn-based strategy game with a high fantasy theme.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v2-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v2&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Branch&lt;/th&gt; &#xA;   &lt;th&gt;CI status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Master&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wesnoth/wesnoth/actions/workflows/ci-main.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/wesnoth/wesnoth/actions/workflows/ci-main.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wesnoth/wesnoth/actions/workflows/ci-main.yml?query=branch%3A1.16&#34;&gt;&lt;img src=&#34;https://github.com/wesnoth/wesnoth/actions/workflows/ci-main.yml/badge.svg?branch=1.16&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;The Battle for Wesnoth&lt;/strong&gt; is an Open Source, turn-based tactical strategy game with a high fantasy theme, featuring both singleplayer and online/hotseat multiplayer combat. Fight a desperate battle to reclaim the throne of Wesnoth, search for the key to immortality, or take part in any number of other adventures.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;The official Battle for Wesnoth Forums: &lt;a href=&#34;https://forums.wesnoth.org/&#34;&gt;https://forums.wesnoth.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Discord: &lt;a href=&#34;https://discord.gg/battleforwesnoth&#34;&gt;https://discord.gg/battleforwesnoth&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;IRC: &lt;a href=&#34;https://wiki.wesnoth.org/Support#IRC&#34;&gt;https://wiki.wesnoth.org/Support#IRC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mastodon: &lt;a href=&#34;https://fosstodon.org/@wesnoth&#34;&gt;https://fosstodon.org/@wesnoth&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Steam forums: &lt;a href=&#34;https://steamcommunity.com/app/599390/discussions/&#34;&gt;https://steamcommunity.com/app/599390/discussions/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A variety of different campaigns, each with their own tactical challenges, emotionally charged story, and multiple difficulty levels.&lt;/li&gt; &#xA; &lt;li&gt;A detailed world and storytelling with hundreds of sprites, animations, and characters.&lt;/li&gt; &#xA; &lt;li&gt;Many different unit skills and traits across several factions.&lt;/li&gt; &#xA; &lt;li&gt;A map editor with multiple tools, hundreds types of terrain, and the ability for you to save and share maps with others. Create your own scenarios/battles for near infinite replayability.&lt;/li&gt; &#xA; &lt;li&gt;Highly moddable, allowing a wide array of community created map packs, eras, and entire campaigns.&lt;/li&gt; &#xA; &lt;li&gt;Online and local multiplayer gameplay to play with friends, strangers, or against the AI.&lt;/li&gt; &#xA; &lt;li&gt;Changeable settings for base gameplay, with nearly limitless options for different hotkey configurations.&lt;/li&gt; &#xA; &lt;li&gt;Beautifully composed playlist that captures the era and grandiosity of this lore-filled high-fantasy world.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Wesnoth can be played on Windows, macOS, and Linux, and can be installed using:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://store.steampowered.com/app/599390/Battle_for_Wesnoth/&#34;&gt;Steam&lt;/a&gt; (all)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wesnoth.itch.io/battle-for-wesnoth&#34;&gt;itch.io&lt;/a&gt; (Windows and macOS)&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://apps.apple.com/us/app/the-battle-for-wesnoth/id1450738104&#34;&gt;macOS App Store&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;standalone installers on &lt;a href=&#34;https://sourceforge.net/projects/wesnoth/files/&#34;&gt;SourceForge&lt;/a&gt; (Windows and macOS)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flathub.org/apps/details/org.wesnoth.Wesnoth&#34;&gt;Flatpak&lt;/a&gt; (Linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, Wesnoth is available for &lt;a href=&#34;https://apps.apple.com/us/app/battle-for-wesnoth/id575852062&#34;&gt;iOS&lt;/a&gt; and &lt;a href=&#34;https://play.google.com/store/apps/details?id=it.alessandropira.wesnoth114&#34;&gt;Android&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build the game from source, see &lt;a href=&#34;https://raw.githubusercontent.com/wesnoth/wesnoth/master/INSTALL.md&#34;&gt;INSTALL&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Wesnoth is most in need of skilled C++ developers (C++14 and later), however there are things that nearly anyone can help with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple tasks in C++.&lt;/li&gt; &#xA; &lt;li&gt;The Lua and WML used for content scripting.&lt;/li&gt; &#xA; &lt;li&gt;Python used by various external tools.&lt;/li&gt; &#xA; &lt;li&gt;Even play testing and giving feedback on updated campaigns!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, Wesnoth lacks art for a variety of unit animations - anyone who would be interested in lending a hand in updating existing unit sprites or creating animations should take a look at the &lt;a href=&#34;https://forums.wesnoth.org/viewforum.php?f=9&#34;&gt;Art Contributions&lt;/a&gt; forum as well as contact our current art director.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/wesnoth/wesnoth/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For any questions, the best place to start is to simply join Wesnoth&#39;s forums, Discord, or IRC and start asking!&lt;/p&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;p&gt;Donations can be sent via &lt;a href=&#34;https://www.spi-inc.org/projects/wesnoth/&#34;&gt;Software in the Public Interest&lt;/a&gt;, &lt;a href=&#34;https://liberapay.com/Wesnoth&#34;&gt;Liberapay&lt;/a&gt;, as well as when downloading through itch.io. All money donated is used to pay for project expenses such as server rent and art commissions, and is very much appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All source code is licensed under the GNU GPL v2+. Most art and music is also licensed under the GNU GPL v2+, however new contributions are now licensed under the Creative Commons BY-SA v4.0. For more detailed information on Wesnoth&#39;s licensing, see the wiki:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.wesnoth.org/Wesnoth:Copyrights&#34;&gt;https://wiki.wesnoth.org/Wesnoth:Copyrights&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More Information&lt;/h2&gt; &#xA;&lt;p&gt;For extensive documentation about all aspects of the game, see the official Battle for Wesnoth web site:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wesnoth.org/&#34;&gt;https://www.wesnoth.org/&lt;/a&gt; &lt;a href=&#34;https://wiki.wesnoth.org/&#34;&gt;https://wiki.wesnoth.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A (translated) description of how to play the game can be found in doc/manual/manual.*.html, or online at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.wesnoth.org/WesnothManual&#34;&gt;https://wiki.wesnoth.org/WesnothManual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For information on creating your own maps, scenarios, and other content, see:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.wesnoth.org/Create&#34;&gt;https://wiki.wesnoth.org/Create&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Gallery&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.wesnoth.org/images/sshots/wesnoth-1.16.0-1.jpg&#34; alt=&#34;screenshot_main_menu&#34;&gt; &lt;img src=&#34;https://www.wesnoth.org/images/sshots/wesnoth-1.16.0-2.jpg&#34; alt=&#34;scrreenshot_isars_cross&#34;&gt; &lt;img src=&#34;https://www.wesnoth.org/images/sshots/wesnoth-1.16.0-5.jpg&#34; alt=&#34;screenshot_campaign_menu&#34;&gt; &lt;img src=&#34;https://www.wesnoth.org/images/sshots/wesnoth-1.16.0-8.jpg&#34; alt=&#34;screenshot_map&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>danmar/cppcheck</title>
    <updated>2023-12-03T01:46:17Z</updated>
    <id>tag:github.com,2023-12-03:/danmar/cppcheck</id>
    <link href="https://github.com/danmar/cppcheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;static analysis of C/C++ code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;Cppcheck&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;OSS-Fuzz&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Coverity Scan Build Status&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;License&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:cppcheck&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/cppcheck.svg?sanitize=true&#34; alt=&#34;OSS-Fuzz&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scan.coverity.com/projects/512&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/512.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://opensource.org/licenses/GPL-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL3.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;About the name&lt;/h2&gt; &#xA;&lt;p&gt;The original name of this program was &#34;C++check&#34;, but it was later changed to &#34;Cppcheck&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Despite the name, Cppcheck is designed for both C and C++.&lt;/p&gt; &#xA;&lt;h2&gt;Manual&lt;/h2&gt; &#xA;&lt;p&gt;A manual is available &lt;a href=&#34;https://cppcheck.sourceforge.io/manual.pdf&#34;&gt;online&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Donate CPU&lt;/h2&gt; &#xA;&lt;p&gt;Cppcheck is a hobby project with limited resources. You can help us by donating CPU (1 core or as many as you like). It is simple:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download (and extract) Cppcheck source code.&lt;/li&gt; &#xA; &lt;li&gt;Run script: &lt;code&gt;python cppcheck/tools/donate-cpu.py&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The script will analyse debian source code and upload the results to a cppcheck server. We need these results both to improve Cppcheck and to detect regressions.&lt;/p&gt; &#xA;&lt;p&gt;You can stop the script whenever you like with Ctrl C.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;Any C++11 compiler should work. For compilers with partial C++11 support it may work. If your compiler has the C++11 features that are available in Visual Studio 2013 / GCC 4.8 then it will work.&lt;/p&gt; &#xA;&lt;p&gt;To build the GUI, you need Qt.&lt;/p&gt; &#xA;&lt;p&gt;When building the command line tool, &lt;a href=&#34;http://www.pcre.org/&#34;&gt;PCRE&lt;/a&gt; is optional. It is used if you build with rules.&lt;/p&gt; &#xA;&lt;p&gt;There are multiple compilation choices:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;qmake - cross platform build tool&lt;/li&gt; &#xA; &lt;li&gt;cmake - cross platform build tool&lt;/li&gt; &#xA; &lt;li&gt;Windows: Visual Studio (VS 2013 and above)&lt;/li&gt; &#xA; &lt;li&gt;Windows: Qt Creator + mingw&lt;/li&gt; &#xA; &lt;li&gt;gnu make&lt;/li&gt; &#xA; &lt;li&gt;g++ 4.8 (or later)&lt;/li&gt; &#xA; &lt;li&gt;clang++&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;cmake&lt;/h3&gt; &#xA;&lt;p&gt;Example, compiling Cppcheck with cmake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to compile the GUI you can use the flag. -DBUILD_GUI=ON&lt;/p&gt; &#xA;&lt;p&gt;For rules support (requires pcre) use the flag. -DHAVE_RULES=ON&lt;/p&gt; &#xA;&lt;p&gt;For release builds it is recommended that you use: -DUSE_MATCHCOMPILER=ON&lt;/p&gt; &#xA;&lt;p&gt;Using cmake you can generate project files for Visual Studio,XCode,etc.&lt;/p&gt; &#xA;&lt;h4&gt;Building a specific configuration&lt;/h4&gt; &#xA;&lt;p&gt;For single-configuration generators (like &#34;Unix Makefiles&#34;) you can generate and build a specific configuration (e.g. &#34;RelWithDebInfo&#34;) using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir build_RelWithDebInfo&#xA;cd build_RelWithDebInfo&#xA;cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..&#xA;cmake --build . --config RelWithDebInfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For multi-configuration generators (like &#34;Visual Studio 17 2022&#34;) the same is achieved using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;cmake --build . --config RelWithDebInfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;qmake&lt;/h3&gt; &#xA;&lt;p&gt;NOTE: This has been deprecated and will be removed in a future version. Please use CMake instead.&lt;/p&gt; &#xA;&lt;p&gt;You can use the gui/gui.pro file to build the GUI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd gui&#xA;qmake&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Visual Studio&lt;/h3&gt; &#xA;&lt;p&gt;Use the cppcheck.sln file. The file is configured for Visual Studio 2019, but the platform toolset can be changed easily to older or newer versions. The solution contains platform targets for both x86 and x64.&lt;/p&gt; &#xA;&lt;p&gt;To compile with rules, select &#34;Release-PCRE&#34; or &#34;Debug-PCRE&#34; configuration. pcre.lib (pcre64.lib for x64 builds) and pcre.h are expected to be in /externals then. A current version of PCRE for Visual Studio can be obtained using &lt;a href=&#34;https://github.com/microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio (from command line)&lt;/h3&gt; &#xA;&lt;p&gt;If you do not wish to use the Visual Studio IDE, you can compile cppcheck from the command line the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;msbuild cppcheck.sln&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;VS Code (on Windows)&lt;/h3&gt; &#xA;&lt;p&gt;Install MSYS2 to get GNU toolchain with g++ and gdb (&lt;a href=&#34;https://www.msys2.org/&#34;&gt;https://www.msys2.org/&lt;/a&gt;). Create a settings.json file in the .vscode folder with the following content (adjust path as necessary):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;terminal.integrated.shell.windows&#34;: &#34;C:\\msys64\\usr\\bin\\bash.exe&#34;,&#xA;    &#34;terminal.integrated.shellArgs.windows&#34;: [&#xA;        &#34;--login&#34;,&#xA;    ],&#xA;    &#34;terminal.integrated.env.windows&#34;: {&#xA;        &#34;CHERE_INVOKING&#34;: &#34;1&#34;,&#xA;        &#34;MSYSTEM&#34;: &#34;MINGW64&#34;,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &#34;make&#34; in the terminal to build cppcheck.&lt;/p&gt; &#xA;&lt;p&gt;For debugging create a launch.json file in the .vscode folder with the following content, which covers configuration for debugging cppcheck and misra.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    // Use IntelliSense to learn about possible attributes.&#xA;    // Hover to view descriptions of existing attributes.&#xA;    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387&#xA;    &#34;version&#34;: &#34;0.2.0&#34;,&#xA;    &#34;configurations&#34;: [&#xA;        {&#xA;            &#34;name&#34;: &#34;cppcheck&#34;,&#xA;            &#34;type&#34;: &#34;cppdbg&#34;,&#xA;            &#34;request&#34;: &#34;launch&#34;,&#xA;            &#34;program&#34;: &#34;${workspaceFolder}/cppcheck.exe&#34;,&#xA;            &#34;args&#34;: [&#xA;                &#34;--dump&#34;,&#xA;                &#34;${workspaceFolder}/addons/test/misra/misra-test.c&#34;&#xA;            ],&#xA;            &#34;stopAtEntry&#34;: false,&#xA;            &#34;cwd&#34;: &#34;${workspaceFolder}&#34;,&#xA;            &#34;environment&#34;: [],&#xA;            &#34;externalConsole&#34;: true,&#xA;            &#34;MIMode&#34;: &#34;gdb&#34;,&#xA;            &#34;miDebuggerPath&#34;: &#34;C:/msys64/mingw64/bin/gdb.exe&#34;,&#xA;            &#34;setupCommands&#34;: [&#xA;                {&#xA;                    &#34;description&#34;: &#34;Enable pretty-printing for gdb&#34;,&#xA;                    &#34;text&#34;: &#34;-enable-pretty-printing&#34;,&#xA;                    &#34;ignoreFailures&#34;: true&#xA;                }&#xA;            ]&#xA;        },&#xA;        {&#xA;            &#34;name&#34;: &#34;misra.py&#34;,&#xA;            &#34;type&#34;: &#34;python&#34;,&#xA;            &#34;request&#34;: &#34;launch&#34;,&#xA;            &#34;program&#34;: &#34;${workspaceFolder}/addons/misra.py&#34;,&#xA;            &#34;console&#34;: &#34;integratedTerminal&#34;,&#xA;            &#34;args&#34;: [&#xA;                &#34;${workspaceFolder}/addons/test/misra/misra-test.c.dump&#34;&#xA;            ]&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Qt Creator + MinGW&lt;/h3&gt; &#xA;&lt;p&gt;The PCRE dll is needed to build the CLI. It can be downloaded here: &lt;a href=&#34;http://software-download.name/pcre-library-windows/&#34;&gt;http://software-download.name/pcre-library-windows/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;GNU make&lt;/h3&gt; &#xA;&lt;p&gt;Simple, unoptimized build (no dependencies):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The recommended release build is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make MATCHCOMPILER=yes FILESDIR=/usr/share/cppcheck HAVE_RULES=yes CXXFLAGS=&#34;-O2 -DNDEBUG -Wall -Wno-sign-compare -Wno-unused-function&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Flags:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;MATCHCOMPILER=yes&lt;/code&gt; Python is used to optimise cppcheck. The Token::Match patterns are converted into C++ code at compile time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;FILESDIR=/usr/share/cppcheck&lt;/code&gt; Specify folder where cppcheck files are installed (addons, cfg, platform)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HAVE_RULES=yes&lt;/code&gt; Enable rules (PCRE is required if this is used)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;CXXFLAGS=&#34;-O2 -DNDEBUG -Wall -Wno-sign-compare -Wno-unused-function&#34;&lt;/code&gt; Enables most compiler optimizations, disables cppcheck-internal debugging code and enables basic compiler warnings.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;g++ (for experts)&lt;/h3&gt; &#xA;&lt;p&gt;If you just want to build Cppcheck without dependencies then you can use this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;g++ -o cppcheck -std=c++11 -Iexternals -Iexternals/simplecpp -Iexternals/tinyxml2 -Iexternals/picojson -Ilib cli/*.cpp lib/*.cpp externals/simplecpp/simplecpp.cpp externals/tinyxml2/*.cpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use &lt;code&gt;--rule&lt;/code&gt; and &lt;code&gt;--rule-file&lt;/code&gt; then dependencies are needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;g++ -o cppcheck -std=c++11 -lpcre -DHAVE_RULES -Ilib -Iexternals -Iexternals/simplecpp -Iexternals/tinyxml2 cli/*.cpp lib/*.cpp externals/simplecpp/simplecpp.cpp externals/tinyxml2/*.cpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MinGW&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mingw32-make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter the following error with &lt;code&gt;MATCHCOMPILER=yes&lt;/code&gt; you need to specify your Python interpreter via &lt;code&gt;PYTHON_INTERPRETER&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;process_begin: CreateProcess(NULL, which python3, ...) failed.&#xA;makefile:24: pipe: No error&#xA;process_begin: CreateProcess(NULL, which python, ...) failed.&#xA;makefile:27: pipe: No error&#xA;makefile:30: *** Did not find a Python interpreter.  Stop.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Compiler/IDE&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create an empty project file / makefile.&lt;/li&gt; &#xA; &lt;li&gt;Add all cpp files in the cppcheck cli and lib folders to the project file / makefile.&lt;/li&gt; &#xA; &lt;li&gt;Add all cpp files in the externals folders to the project file / makefile.&lt;/li&gt; &#xA; &lt;li&gt;Compile.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Cross compiling Win32 (CLI) version of Cppcheck in Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install mingw32&#xA;make CXX=i586-mingw32msvc-g++ LDFLAGS=&#34;-lshlwapi&#34; RDYNAMIC=&#34;&#34;&#xA;mv cppcheck cppcheck.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;p&gt;Besides building yourself on the platform of your choice there are also several ways to obtain pre-built packages.&lt;br&gt; &lt;em&gt;Note:&lt;/em&gt; The non-Windows packages are not maintained by the Cppcheck team but by the respective packagers instead.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Windows) An official Windows installer is available via the official Cppcheck SourceForge page: &lt;a href=&#34;https://cppcheck.sourceforge.io/&#34;&gt;https://cppcheck.sourceforge.io/&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;(Linux/Unix) Many major distros offer Cppcheck packages via their integrated package managers (&lt;code&gt;yum&lt;/code&gt;, &lt;code&gt;apt&lt;/code&gt;, &lt;code&gt;pacman&lt;/code&gt;, etc.). See &lt;a href=&#34;https://pkgs.org/search/?q=cppcheck&#34;&gt;https://pkgs.org/search/?q=cppcheck&lt;/a&gt; for an overview.&lt;/li&gt; &#xA; &lt;li&gt;(Linux/Unix) Unless you are using a &#34;rolling&#34; distro, it is likely that they are not carrying the latest version. There are several external (mainly unsupported) repositories like AUR (ArchLinux), PPA (ubuntu), EPEL (CentOS/Fedora) etc. which provide up-to-date packages.&lt;/li&gt; &#xA; &lt;li&gt;(Linux/Unix) The Canonical Snapcraft package is unmaintained and contains a very old version. Please refrain from using it! See &lt;a href=&#34;https://trac.cppcheck.net/ticket/11641&#34;&gt;https://trac.cppcheck.net/ticket/11641&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;(MacOS) A package is available via Homebrew (&lt;code&gt;brew&lt;/code&gt;). See &lt;a href=&#34;https://formulae.brew.sh/formula/cppcheck#default&#34;&gt;https://formulae.brew.sh/formula/cppcheck#default&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Webpage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cppcheck.sourceforge.io/&#34;&gt;https://cppcheck.sourceforge.io/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yuzu-emu/yuzu-android</title>
    <updated>2023-12-03T01:46:17Z</updated>
    <id>tag:github.com,2023-12-03:/yuzu-emu/yuzu-android</id>
    <link href="https://github.com/yuzu-emu/yuzu-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Pull Request&lt;/th&gt; &#xA;   &lt;th&gt;Commit&lt;/th&gt; &#xA;   &lt;th&gt;Title&lt;/th&gt; &#xA;   &lt;th&gt;Author&lt;/th&gt; &#xA;   &lt;th&gt;Merged?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yuzu-emu/yuzu//pull/12235&#34;&gt;12235&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yuzu-emu/yuzu//pull/12235/files&#34;&gt;&lt;code&gt;e7dd968ac&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;renderer_vulkan: adjust window origin and swizzle independently&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/liamwhite/&#34;&gt;liamwhite&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yuzu-emu/yuzu//pull/12263&#34;&gt;12263&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yuzu-emu/yuzu//pull/12263/files&#34;&gt;&lt;code&gt;45b616158&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;file_sys: handle null romfs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/liamwhite/&#34;&gt;liamwhite&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;End of merge log. You can find the original README.md below the break.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;!--&#xA;SPDX-FileCopyrightText: 2018 yuzu Emulator Project&#xA;SPDX-License-Identifier: GPL-2.0-or-later&#xA;--&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://yuzu-emu.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-assets/master/icons/icon.png&#34; alt=&#34;yuzu&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;b&gt;yuzu&lt;/b&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;&lt;b&gt;yuzu&lt;/b&gt; is the world&#39;s most popular, open-source, Nintendo Switch emulator — started by the creators of &lt;a href=&#34;https://citra-emu.org&#34; target=&#34;_blank&#34;&gt;Citra&lt;/a&gt;. &lt;br&gt; It is written in C++ with portability in mind, and we actively maintain builds for Windows, Linux and Android. &lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://dev.azure.com/yuzu-emu/yuzu/&#34;&gt; &lt;img src=&#34;https://dev.azure.com/yuzu-emu/yuzu/_apis/build/status/yuzu%20mainline?branchName=master&#34; alt=&#34;Azure Mainline CI Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/u77vRWY&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/398318088170242053?color=5865F2&amp;amp;label=yuzu&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-android/master/#compatibility&#34;&gt;Compatibility&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-android/master/#development&#34;&gt;Development&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-android/master/#building&#34;&gt;Building&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-android/master/#download&#34;&gt;Download&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-android/master/#support&#34;&gt;Support&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-android/master/#license&#34;&gt;License&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;The emulator is capable of running most commercial games at full speed, provided you meet the &lt;a href=&#34;https://yuzu-emu.org/help/quickstart/#hardware-requirements&#34;&gt;necessary hardware requirements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a full list of games yuzu supports, please visit our &lt;a href=&#34;https://yuzu-emu.org/game/&#34;&gt;Compatibility page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://yuzu-emu.org/&#34;&gt;website&lt;/a&gt; for the latest news on exciting features, monthly progress reports, and more!&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Most of the development happens on GitHub. It&#39;s also where &lt;a href=&#34;https://github.com/yuzu-emu/yuzu&#34;&gt;our central repository&lt;/a&gt; is hosted. For development discussion, please join us on &lt;a href=&#34;https://discord.com/invite/u77vRWY&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute, please take a look at the &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/wiki/Contributing&#34;&gt;Contributor&#39;s Guide&lt;/a&gt; and &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/wiki/Developer-Information&#34;&gt;Developer Information&lt;/a&gt;. You can also contact any of the developers on Discord in order to know about the current state of the emulator.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute to the user interface translation project, please check out the &lt;a href=&#34;https://www.transifex.com/yuzu-emulator/yuzu&#34;&gt;yuzu project on transifex&lt;/a&gt;. We centralize translation work there, and periodically upstream translations.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/wiki/Building-For-Windows&#34;&gt;Windows Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/wiki/Building-For-Linux&#34;&gt;Linux Build&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download the latest releases automatically via the installer on our &lt;a href=&#34;https://yuzu-emu.org/downloads/&#34;&gt;downloads&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you enjoy the project and want to support us financially, check out our Patreon!&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.patreon.com/yuzuteam&#34;&gt; &lt;img src=&#34;https://c5.patreon.com/external/logo/become_a_patron_button@2x.png&#34; width=&#34;160&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Any donations received will go towards things like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Switch consoles to explore and reverse-engineer the hardware&lt;/li&gt; &#xA; &lt;li&gt;Switch games for testing, reverse-engineering, and implementing new features&lt;/li&gt; &#xA; &lt;li&gt;Web hosting and infrastructure setup&lt;/li&gt; &#xA; &lt;li&gt;Software licenses (e.g. Visual Studio, IDA Pro, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Additional hardware (e.g. GPUs as-needed to improve rendering support, other peripherals to add support for, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you wish to support us a different way, please join our &lt;a href=&#34;https://discord.gg/u77vRWY&#34;&gt;Discord&lt;/a&gt; and talk to bunnei. You may also contact: &lt;a href=&#34;mailto:donations@yuzu-emu.org&#34;&gt;donations@yuzu-emu.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;yuzu is licensed under the GPLv3 (or any later version). Refer to the &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/raw/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
</feed>