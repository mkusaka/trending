<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-22T01:48:07Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>oceanbase/oceanbase</title>
    <updated>2023-10-22T01:48:07Z</updated>
    <id>tag:github.com,2023-10-22:/oceanbase/oceanbase</id>
    <link href="https://github.com/oceanbase/oceanbase" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OceanBase is an enterprise distributed relational database with high availability, high performance, horizontal scalability, and compatibility with SQL standards.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/oceanbase/oceanbase&#34;&gt; &lt;img alt=&#34;OceanBase Logo&#34; src=&#34;https://raw.githubusercontent.com/oceanbase/oceanbase/master/images/logo.svg?sanitize=true&#34; width=&#34;50%&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/oceanbase/oceanbase/raw/master/LICENSE&#34;&gt; &lt;img alt=&#34;license&#34; src=&#34;https://img.shields.io/badge/license-MulanPubL--2.0-blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/oceanbase/oceanbase/releases/latest&#34;&gt; &lt;img alt=&#34;license&#34; src=&#34;https://img.shields.io/badge/dynamic/json?color=blue&amp;amp;label=release&amp;amp;query=tag_name&amp;amp;url=https%3A%2F%2Fapi.github.com%2Frepos%2Foceanbase%2Foceanbase%2Freleases%2Flatest&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/oceanbase/oceanbase&#34;&gt; &lt;img alt=&#34;stars&#34; src=&#34;https://img.shields.io/badge/dynamic/json?color=blue&amp;amp;label=stars&amp;amp;query=stargazers_count&amp;amp;url=https%3A%2F%2Fapi.github.com%2Frepos%2Foceanbase%2Foceanbase&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/oceanbase/oceanbase&#34;&gt; &lt;img alt=&#34;forks&#34; src=&#34;https://img.shields.io/badge/dynamic/json?color=blue&amp;amp;label=forks&amp;amp;query=forks&amp;amp;url=https%3A%2F%2Fapi.github.com%2Frepos%2Foceanbase%2Foceanbase&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://en.oceanbase.com/docs/oceanbase-database&#34;&gt; &lt;img alt=&#34;English doc&#34; src=&#34;https://img.shields.io/badge/docs-English-blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.oceanbase.com/docs/oceanbase-database-cn&#34;&gt; &lt;img alt=&#34;Chinese doc&#34; src=&#34;https://img.shields.io/badge/ÊñáÊ°£-ÁÆÄ‰Ωì‰∏≠Êñá-blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/oceanbase/oceanbase/actions/workflows/compile.yml&#34;&gt; &lt;img alt=&#34;building status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/oceanbase/oceanbase/compile.yml?branch=master&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/oceanbase/oceanbase/commits/master&#34;&gt; &lt;img alt=&#34;last commit&#34; src=&#34;https://img.shields.io/github/last-commit/oceanbase/oceanbase/master&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/oceanbase/shared_invite/zt-1e25oz3ol-lJ6YNqPHaKwY_mhhioyEuw&#34;&gt; &lt;img alt=&#34;Join Slack&#34; src=&#34;https://img.shields.io/badge/slack-Join%20Oceanbase-brightgreen?logo=slack&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/oceanbase/oceanbase/master/README_CN.md&#34;&gt;‰∏≠ÊñáÁâà&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OceanBase Database&lt;/strong&gt; is a distributed relational database. It is developed entirely by Ant Group. OceanBase Database is built on a common server cluster. Based on the &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/lamport-paxos.pdf&#34;&gt;Paxos&lt;/a&gt; protocol and its distributed structure, OceanBase Database provides high availability and linear scalability. OceanBase Database is not dependent on specific hardware architectures.&lt;/p&gt; &#xA;&lt;h1&gt;Key features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Transparent Scalability&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;An OceanBase cluster can be scaled out to 1,500 nodes transparently, handling petabytes of data and a trillion rows of records.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ultra-fast Performance&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The only distributed database that has refreshed both TPC-C record, at 707 million tmpC, and TPC-H record, at 15.26 million QphH @30000GB.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Real-time Operational Analytics&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;A unified system for both transactional and real-time operational analytics workloads.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Continuous Availability&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;OceanBase Database adopts Paxos Consensus algorithm to achieve Zero RPO and less than 8 seconds of RTO. Supports intra-city/remote disaster recovery, enabling multi-activity in multiple locations and zero data loss.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MySQL Compatible&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;OceanBase Database is highly compatible with MySQL, which ensures that zero or few modification is needed for migration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cost Effeciency&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The cutting-edge compression technology saves 70%-90% of storage costs without compromising performance. The multi-tenancy architecture achieves higher resource utilization.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://en.oceanbase.com/product/opensource&#34;&gt;key features&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Quick start&lt;/h1&gt; &#xA;&lt;h2&gt;üî• Start with all-in-one&lt;/h2&gt; &#xA;&lt;p&gt;You can quickly deploy a standalone OceanBase Database to experience with the following commands.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Linux Only&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# download and install all-in-one package (internet connection is required)&#xA;bash -c &#34;$(curl -s https://obbusiness-private.oss-cn-shanghai.aliyuncs.com/download-center/opensource/oceanbase-all-in-one/installer.sh)&#34;&#xA;source ~/.oceanbase-all-in-one/bin/env.sh&#xA;&#xA;# quickly deploy OceanBase database&#xA;obd demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üê≥ Start with docker&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Start an OceanBase Database instance:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Deploy a mini standalone instance.&#xA;docker run -p 2881:2881 --name oceanbase-ce -e MINI_MODE=1 -d oceanbase/oceanbase-ce&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect to the OceanBase Database instance:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker exec -it oceanbase-ce ob-mysql sys # Connect to the root user of the sys tenant.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://en.oceanbase.com/docs/community-observer-en-10000000000829647&#34;&gt;Quick experience&lt;/a&gt; or &lt;a href=&#34;https://open.oceanbase.com/quickStart&#34;&gt;Quick Start (Simplified Chinese)&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;üë®‚Äçüíª Start developing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/oceanbase/oceanbase/wiki/Compile&#34;&gt;OceanBase Developer Document&lt;/a&gt; to learn how to compile and deploy a manually compiled observer.&lt;/p&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;For future plans, see &lt;a href=&#34;https://github.com/oceanbase/oceanbase/issues/1364&#34;&gt;Roadmap 2023&lt;/a&gt;. See also &lt;a href=&#34;https://github.com/orgs/oceanbase/projects&#34;&gt;OceanBase Roadmap&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Case study&lt;/h1&gt; &#xA;&lt;p&gt;OceanBase has been serving more than 400 customers upgrade their database from different industries, including Financial Services, Telecom, Retail, Internet and more.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://en.oceanbase.com/customer/home&#34;&gt;success stories&lt;/a&gt; and &lt;a href=&#34;https://github.com/oceanbase/oceanbase/issues/1301&#34;&gt;Who is using OceanBase&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h1&gt;System architecture&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.oceanbase.com/docs/community-observer-en-10000000000829641&#34;&gt;Introduction to system architecture&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributions are highly appreciated. Read the &lt;a href=&#34;https://raw.githubusercontent.com/oceanbase/oceanbase/master/docs/README.md&#34;&gt;development guide&lt;/a&gt; to getting started.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;OceanBase Database is licensed under the Mulan Public License, Version 2. See the &lt;a href=&#34;https://raw.githubusercontent.com/oceanbase/oceanbase/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more info.&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;Join the OceanBase community via:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/oceanbase/shared_invite/zt-1e25oz3ol-lJ6YNqPHaKwY_mhhioyEuw&#34;&gt;Slack Workspace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ask.oceanbase.com/&#34;&gt;Chinese User Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DingTalk Group: 33254054 (&lt;a href=&#34;https://raw.githubusercontent.com/oceanbase/oceanbase/master/images/dingtalk.svg&#34;&gt;QR code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;WeChat Group (Add the assistant with WeChat ID: OBCE666)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>google-deepmind/mujoco</title>
    <updated>2023-10-22T01:48:07Z</updated>
    <id>tag:github.com,2023-10-22:/google-deepmind/mujoco</id>
    <link href="https://github.com/google-deepmind/mujoco" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-Joint dynamics with Contact. A general purpose physics simulator.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt; &lt;a href=&#34;https://raw.githubusercontent.com/google-deepmind/mujoco/main/#&#34;&gt;&lt;img alt=&#34;MuJoCo&#34; src=&#34;https://raw.githubusercontent.com/google-deepmind/mujoco/main/banner.png&#34; width=&#34;100%&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://github.com/google-deepmind/mujoco/actions/workflows/build.yml?query=branch%3Amain&#34; alt=&#34;GitHub Actions&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/google-deepmind/mujoco/build.yml?branch=main&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://mujoco.readthedocs.io/&#34; alt=&#34;Documentation&#34;&gt; &lt;img src=&#34;https://readthedocs.org/projects/mujoco/badge/?version=latest&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/google-deepmind/mujoco/raw/main/LICENSE&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/google-deepmind/mujoco&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MuJoCo&lt;/strong&gt; stands for &lt;strong&gt;Mu&lt;/strong&gt;lti-&lt;strong&gt;Jo&lt;/strong&gt;int dynamics with &lt;strong&gt;Co&lt;/strong&gt;ntact. It is a general purpose physics engine that aims to facilitate research and development in robotics, biomechanics, graphics and animation, machine learning, and other areas which demand fast and accurate simulation of articulated structures interacting with their environment.&lt;/p&gt; &#xA;&lt;p&gt;This repository is maintained by &lt;a href=&#34;https://www.deepmind.com/&#34;&gt;Google DeepMind&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;MuJoCo has a C API and is intended for researchers and developers. The runtime simulation module is tuned to maximize performance and operates on low-level data structures that are preallocated by the built-in XML compiler. The library includes interactive visualization with a native GUI, rendered in OpenGL. MuJoCo further exposes a large number of utility functions for computing physics-related quantities.&lt;/p&gt; &#xA;&lt;p&gt;We also provide &lt;a href=&#34;https://mujoco.readthedocs.io/en/stable/python.html#python-bindings&#34;&gt;Python bindings&lt;/a&gt; and a plug-in for the &lt;a href=&#34;https://unity.com/&#34;&gt;Unity&lt;/a&gt; game engine.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;MuJoCo&#39;s documentation can be found at &lt;a href=&#34;https://mujoco.readthedocs.io&#34;&gt;mujoco.readthedocs.io&lt;/a&gt;. Upcoming features due for the next release can be found in the &lt;a href=&#34;https://mujoco.readthedocs.io/en/latest/changelog.html&#34;&gt;changelog&lt;/a&gt; in the latest branch.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;There are two easy ways to get started with MuJoCo:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run &lt;code&gt;simulate&lt;/code&gt; on your machine.&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=0ORsj_E17B0&#34;&gt;This video&lt;/a&gt; shows a screen capture of &lt;code&gt;simulate&lt;/code&gt;, MuJoCo&#39;s native interactive viewer. Follow the steps described in the &lt;a href=&#34;https://mujoco.readthedocs.io/en/latest/programming#getting-started&#34;&gt;Getting Started&lt;/a&gt; section of the documentation to get &lt;code&gt;simulate&lt;/code&gt; running on your machine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Explore our online IPython notebooks.&lt;/strong&gt; If you are a Python user, you might want to start with our tutorial notebooks running on Google Colab:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The first tutorial focuses on the basics of MuJoCo: &lt;a href=&#34;https://colab.research.google.com/github/google-deepmind/mujoco/blob/main/python/tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For a more advanced example, see the LQR tutorial which creates an LQR controller to balance a humanoid on one leg using MuJoCo&#39;s dynamics derivatives: &lt;a href=&#34;https://colab.research.google.com/github/google-deepmind/mujoco/blob/main/python/LQR.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prebuilt binaries&lt;/h3&gt; &#xA;&lt;p&gt;Versioned releases are available as precompiled binaries from the GitHub &lt;a href=&#34;https://github.com/google-deepmind/mujoco/releases&#34;&gt;releases page&lt;/a&gt;, built for Linux (x86-64 and AArch64), Windows (x86-64 only), and macOS (universal). This is the recommended way to use the software.&lt;/p&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;Users who wish to build MuJoCo from source should consult the &lt;a href=&#34;https://mujoco.readthedocs.io/en/latest/programming#building-mujoco-from-source&#34;&gt;build from source&lt;/a&gt; section of the documentation. However, please note that the commit at the tip of the &lt;code&gt;main&lt;/code&gt; branch may be unstable.&lt;/p&gt; &#xA;&lt;h3&gt;Python (&amp;gt;= 3.8)&lt;/h3&gt; &#xA;&lt;p&gt;The native Python bindings, which come pre-packaged with a copy of MuJoCo, can be installed from &lt;a href=&#34;https://pypi.org/project/mujoco/&#34;&gt;PyPI&lt;/a&gt; via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install mujoco&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that Pre-built Linux wheels target &lt;code&gt;manylinux2014&lt;/code&gt;, see &lt;a href=&#34;https://github.com/pypa/manylinux&#34;&gt;here&lt;/a&gt; for compatible distributions. For more information such as building the bindings from source, see the &lt;a href=&#34;https://mujoco.readthedocs.io/en/stable/python.html#python-bindings&#34;&gt;Python bindings&lt;/a&gt; section of the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome community engagement: questions, requests for help, bug reports and feature requests. To read more about bug reports, feature requests and more ambitious contributions, please see our &lt;a href=&#34;https://raw.githubusercontent.com/google-deepmind/mujoco/main/CONTRIBUTING.md&#34;&gt;contributors guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/google-deepmind/mujoco/main/STYLEGUIDE.md&#34;&gt;style guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Asking Questions&lt;/h2&gt; &#xA;&lt;p&gt;Questions and requests for help are welcome on the GitHub &lt;a href=&#34;https://github.com/google-deepmind/mujoco/issues&#34;&gt;Issues&lt;/a&gt; page and should focus on a specific problem or question.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google-deepmind/mujoco/discussions&#34;&gt;Discussions&lt;/a&gt; should address wider concerns that might require input from multiple participants.&lt;/p&gt; &#xA;&lt;p&gt;Here are some guidelines for asking good questions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Search for existing questions or issues that touch on the same subject.&lt;/p&gt; &lt;p&gt;You can add comments to existing threads or start new ones. If you start a new thread and there are existing relevant threads, please link to them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use a clear and specific title. Try to include keywords that will make your question easy for other to find in the future.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Introduce yourself and your project more generally.&lt;/p&gt; &lt;p&gt;If your level of expertise is exceptional (either high or low), and it might be relevant to what we can assume you know, please state that as well.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Take a step back and tell us what you&#39;re trying to accomplish, if we understand you goal we might suggest a different type of solution than the one you are having problems with&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make it easy for others to reproduce the problem or understand your question.&lt;/p&gt; &lt;p&gt;If this requires a model, please include it. Try to make the model minimal: remove elements that are unrelated to your question. Pure XML models should be inlined. Models requiring binary assets (meshes, textures), should be attached as a &lt;code&gt;.zip&lt;/code&gt; file. Please make sure the included model is loadable before you attach it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Include an illustrative screenshot or video, if relevant.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tell us how you are accessing MuJoCo (C API, Python bindings, etc.) and which MuJoCo version and operating system you are using.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Related software&lt;/h2&gt; &#xA;&lt;p&gt;MuJoCo forms the backbone of many environment packages, but these are too many to list here individually. Below we focus on bindings and converters.&lt;/p&gt; &#xA;&lt;h3&gt;Bindings&lt;/h3&gt; &#xA;&lt;p&gt;These packages give users of various languages access to MuJoCo functionality:&lt;/p&gt; &#xA;&lt;h4&gt;First-party bindings:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mujoco.readthedocs.io/en/stable/python.html&#34;&gt;Python bindings&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/google-deepmind/dm_control&#34;&gt;dm_control&lt;/a&gt;, Google DeepMind&#39;s related environment stack, includes &lt;a href=&#34;https://github.com/google-deepmind/dm_control/raw/main/dm_control/mjcf/README.md&#34;&gt;PyMJCF&lt;/a&gt;, a module for procedural manipulation of MuJoCo models.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mujoco.readthedocs.io/en/stable/unity.html&#34;&gt;C# bindings and Unity plug-in&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Third-party bindings:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;WebAssembly&lt;/strong&gt;: &lt;a href=&#34;https://github.com/zalo/mujoco_wasm&#34;&gt;mujoco_wasm&lt;/a&gt; by &lt;a href=&#34;https://github.com/zalo&#34;&gt;@zalo&lt;/a&gt; with contributions by &lt;a href=&#34;https://github.com/kevinzakka&#34;&gt;@kevinzakka&lt;/a&gt;, based on the &lt;a href=&#34;https://github.com/stillonearth/MuJoCo-WASM&#34;&gt;emscripten build&lt;/a&gt; by &lt;a href=&#34;https://github.com/stillonearth&#34;&gt;@stillonearth&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;span&gt;‚û°&lt;/span&gt; &lt;a href=&#34;https://zalo.github.io/mujoco_wasm/&#34;&gt;Click here&lt;/a&gt; for a live demo of MuJoCo running in your browser.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MATLAB Simulink&lt;/strong&gt;: &lt;a href=&#34;https://github.com/mathworks-robotics/mujoco-simulink-blockset&#34;&gt;Simulink Blockset for MuJoCo Simulator&lt;/a&gt; by &lt;a href=&#34;https://github.com/vmanoj1996&#34;&gt;Manoj Velmurugan&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Swift&lt;/strong&gt;: &lt;a href=&#34;https://github.com/liuliu/swift-mujoco&#34;&gt;swift-mujoco&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;: &lt;a href=&#34;https://github.com/CommonWealthRobotics/mujoco-java&#34;&gt;mujoco-java&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Julia&lt;/strong&gt;: &lt;a href=&#34;https://github.com/Lyceum/MuJoCo.jl&#34;&gt;Lyceum&lt;/a&gt; (unmaintained)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Converters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenSim&lt;/strong&gt;: &lt;a href=&#34;https://github.com/MyoHub/myoconverter&#34;&gt;MyoConverter&lt;/a&gt; converts OpenSim models to MJCF.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SDFormat&lt;/strong&gt;: &lt;a href=&#34;https://github.com/gazebosim/gz-mujoco/&#34;&gt;gz-mujoco&lt;/a&gt; is a two-way SDFormat &amp;lt;-&amp;gt; MJCF conversion tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OBJ&lt;/strong&gt;: &lt;a href=&#34;https://github.com/kevinzakka/obj2mjcf&#34;&gt;obj2mjcf&lt;/a&gt; a script for converting composite OBJ files into a loadable MJCF model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use MuJoCo for published research, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{todorov2012mujoco,&#xA;  title={MuJoCo: A physics engine for model-based control},&#xA;  author={Todorov, Emanuel and Erez, Tom and Tassa, Yuval},&#xA;  booktitle={2012 IEEE/RSJ International Conference on Intelligent Robots and Systems},&#xA;  pages={5026--5033},&#xA;  year={2012},&#xA;  organization={IEEE},&#xA;  doi={10.1109/IROS.2012.6386109}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License and Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2021 DeepMind Technologies Limited.&lt;/p&gt; &#xA;&lt;p&gt;Box collision code (&lt;a href=&#34;https://github.com/google-deepmind/mujoco/raw/main/src/engine/engine_collision_box.c&#34;&gt;&lt;code&gt;engine_collision_box.c&lt;/code&gt;&lt;/a&gt;) is Copyright 2016 Svetoslav Kolev.&lt;/p&gt; &#xA;&lt;p&gt;ReStructuredText documents, images, and videos in the &lt;code&gt;doc&lt;/code&gt; directory are made available under the terms of the Creative Commons Attribution 4.0 (CC BY 4.0) license. You may obtain a copy of the License at &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;https://creativecommons.org/licenses/by/4.0/legalcode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Source code is licensed under the Apache License, Version 2.0. You may obtain a copy of the License at &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is not an officially supported Google product.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/glog</title>
    <updated>2023-10-22T01:48:07Z</updated>
    <id>tag:github.com,2023-10-22:/google/glog</id>
    <link href="https://github.com/google/glog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C++ implementation of the Google logging module&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google Logging Library&lt;/h1&gt; &#xA;&lt;p&gt;|Linux Github actions| |Windows Github actions| |macOS Github actions| |Codecov|&lt;/p&gt; &#xA;&lt;p&gt;Google Logging (glog) is a C++14 library that implements application-level logging. The library provides logging APIs based on C++-style streams and various helper macros.&lt;/p&gt; &#xA;&lt;p&gt;.. role:: cmake(code) :language: cmake&lt;/p&gt; &#xA;&lt;p&gt;.. role:: cmd(code) :language: bash&lt;/p&gt; &#xA;&lt;p&gt;.. role:: cpp(code) :language: cpp&lt;/p&gt; &#xA;&lt;p&gt;.. role:: bazel(code) :language: starlark&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You can log a message by simply streaming things to &lt;code&gt;LOG&lt;/code&gt;\ (&amp;lt;a particular &lt;code&gt;severity level &amp;lt;#severity-levels&amp;gt;&lt;/code&gt;__&amp;gt;), e.g.,&lt;/p&gt; &#xA;&lt;p&gt;.. code:: cpp&lt;/p&gt; &#xA;&lt;p&gt;#include &amp;lt;glog/logging.h&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;int main(int argc, char* argv[]) { // Initialize Google‚Äôs logging library. google::InitGoogleLogging(argv[0]);&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   // ...&#xA;   LOG(INFO) &amp;lt;&amp;lt; &#34;Found &#34; &amp;lt;&amp;lt; num_cookies &amp;lt;&amp;lt; &#34; cookies&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;}&lt;/p&gt; &#xA;&lt;p&gt;For a detailed overview of glog features and their usage, please refer to the &lt;code&gt;user guide &amp;lt;#user-guide&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;.. contents:: Table of Contents&lt;/p&gt; &#xA;&lt;h2&gt;Building from Source&lt;/h2&gt; &#xA;&lt;p&gt;glog supports multiple build systems for compiling the project from source: &lt;code&gt;Bazel &amp;lt;#bazel&amp;gt;&lt;/code&gt;&lt;strong&gt;, &lt;code&gt;CMake &amp;lt;#cmake&amp;gt;&lt;/code&gt;&lt;/strong&gt;, &lt;code&gt;vcpkg &amp;lt;#vcpkg&amp;gt;&lt;/code&gt;&lt;strong&gt;, and &lt;code&gt;conan &amp;lt;#conan&amp;gt;&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bazel&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;To use glog within a project which uses the&#xA;`Bazel &amp;lt;https://bazel.build/&amp;gt;`__ build tool, add the following lines to&#xA;your ``WORKSPACE`` file:&#xA;&#xA;.. code:: bazel&#xA;&#xA;   load(&#34;@bazel_tools//tools/build_defs/repo:http.bzl&#34;, &#34;http_archive&#34;)&#xA;&#xA;   http_archive(&#xA;       name = &#34;com_github_gflags_gflags&#34;,&#xA;       sha256 = &#34;34af2f15cf7367513b352bdcd2493ab14ce43692d2dcd9dfc499492966c64dcf&#34;,&#xA;       strip_prefix = &#34;gflags-2.2.2&#34;,&#xA;       urls = [&#34;https://github.com/gflags/gflags/archive/v2.2.2.tar.gz&#34;],&#xA;   )&#xA;&#xA;   http_archive(&#xA;       name = &#34;com_github_google_glog&#34;,&#xA;       sha256 = &#34;122fb6b712808ef43fbf80f75c52a21c9760683dae470154f02bddfc61135022&#34;,&#xA;       strip_prefix = &#34;glog-0.6.0&#34;,&#xA;       urls = [&#34;https://github.com/google/glog/archive/v0.6.0.zip&#34;],&#xA;   )&#xA;&#xA;You can then add :bazel:`@com_github_google_glog//:glog` to the deps section&#xA;of a :bazel:`cc_binary` or :bazel:`cc_library` rule, and :code:`#include&#xA;&amp;lt;glog/logging.h&amp;gt;` to include it in your source code. Here‚Äôs a simple example:&#xA;&#xA;.. code:: bazel&#xA;&#xA;   cc_binary(&#xA;       name = &#34;main&#34;,&#xA;       srcs = [&#34;main.cc&#34;],&#xA;       deps = [&#34;@com_github_google_glog//:glog&#34;],&#xA;   )&#xA;&#xA;CMake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;glog also supports CMake that can be used to build the project on a wide range of platforms. If you don‚Äôt have CMake installed already, you can download it for from CMake‚Äôs &lt;code&gt;official website &amp;lt;http://www.cmake.org&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;CMake works by generating native makefiles or build projects that can be used in the compiler environment of your choice. You can either build glog with CMake as a standalone project or it can be incorporated into an existing CMake build for another project.&lt;/p&gt; &#xA;&lt;p&gt;Building glog with CMake ^^^^^^^^^^^^^^^^^^^^^^^^&lt;/p&gt; &#xA;&lt;p&gt;When building glog as a standalone project, on Unix-like systems with GNU Make as build tool, the typical workflow is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get the source code and change to it. e.g., cloning with git:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; git clone https://github.com/google/glog.git&#xA; cd glog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run CMake to configure the build tree.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; cmake -S . -B build -G &#34;Unix Makefiles&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CMake provides different generators, and by default will pick the most relevant one to your environment. If you need a specific version of Visual Studio, use :cmd:&lt;code&gt;cmake . -G &amp;lt;generator-name&amp;gt;&lt;/code&gt;, and see :cmd:&lt;code&gt;cmake --help&lt;/code&gt; for the available generators. Also see :cmd:&lt;code&gt;-T &amp;lt;toolset-name&amp;gt;&lt;/code&gt;, which can be used to request the native x64 toolchain with :cmd:&lt;code&gt;-T host=x64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Afterwards, generated files can be used to compile the project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Test the build software (optional).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; cmake --build build --target test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Install the built files (optional).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; cmake --build build --target install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Consuming glog in a CMake Project ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/p&gt; &#xA;&lt;p&gt;If you have glog installed in your system, you can use the CMake command :cmake:&lt;code&gt;find_package&lt;/code&gt; to build against glog in your CMake Project as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: cmake&lt;/p&gt; &#xA;&lt;p&gt;cmake_minimum_required (VERSION 3.16) project (myproj VERSION 1.0)&lt;/p&gt; &#xA;&lt;p&gt;find_package (glog 0.6.0 REQUIRED)&lt;/p&gt; &#xA;&lt;p&gt;add_executable (myapp main.cpp) target_link_libraries (myapp glog::glog)&lt;/p&gt; &#xA;&lt;p&gt;Compile definitions and options will be added automatically to your target as needed.&lt;/p&gt; &#xA;&lt;p&gt;Incorporating glog into a CMake Project ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/p&gt; &#xA;&lt;p&gt;You can also use the CMake command :cmake:&lt;code&gt;add_subdirectory&lt;/code&gt; to include glog directly from a subdirectory of your project by replacing the :cmake:&lt;code&gt;find_package&lt;/code&gt; call from the previous example by :cmake:&lt;code&gt;add_subdirectory&lt;/code&gt;. The :cmake:&lt;code&gt;glog::glog&lt;/code&gt; target is in this case an :cmake:&lt;code&gt;ALIAS&lt;/code&gt; library target for the &lt;code&gt;glog&lt;/code&gt; library target.&lt;/p&gt; &#xA;&lt;p&gt;Again, compile definitions and options will be added automatically to your target as needed.&lt;/p&gt; &#xA;&lt;p&gt;vcpkg&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;You can download and install glog using the `vcpkg&#xA;&amp;lt;https://github.com/Microsoft/vcpkg&amp;gt;`__ dependency manager:&#xA;&#xA;.. code:: bash&#xA;&#xA;   git clone https://github.com/Microsoft/vcpkg.git&#xA;   cd vcpkg&#xA;   ./bootstrap-vcpkg.sh&#xA;   ./vcpkg integrate install&#xA;   ./vcpkg install glog&#xA;&#xA;The glog port in vcpkg is kept up to date by Microsoft team members and&#xA;community contributors. If the version is out of date, please create an&#xA;issue or pull request on the vcpkg repository.&#xA;&#xA;conan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can download and install glog using the &lt;code&gt;conan &amp;lt;https://conan.io&amp;gt;&lt;/code&gt;__ package manager:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;p&gt;pip install conan conan install -r conancenter glog/&#xA; &lt;glog-version&gt;&#xA;  @&#xA; &lt;/glog-version&gt;&lt;/p&gt; &#xA;&lt;p&gt;The glog recipe in conan center is kept up to date by conan center index community contributors. If the version is out of date, please create an issue or pull request on the &lt;code&gt;conan-center-index &amp;lt;https://github.com/conan-io/conan-center-index&amp;gt;&lt;/code&gt;__ repository.&lt;/p&gt; &#xA;&lt;h2&gt;User Guide&lt;/h2&gt; &#xA;&lt;p&gt;glog defines a series of macros that simplify many common logging tasks. You can log messages by severity level, control logging behavior from the command line, log based on conditionals, abort the program when expected conditions are not met, introduce your own verbose logging levels, customize the prefix attached to log messages, and more.&lt;/p&gt; &#xA;&lt;p&gt;Following sections describe the functionality supported by glog. Please note this description may not be complete but limited to the most useful ones. If you want to find less common features, please check header files under &lt;code&gt;src/glog &amp;lt;src/glog&amp;gt;&lt;/code&gt;__ directory.&lt;/p&gt; &#xA;&lt;p&gt;Severity Levels&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;You can specify one of the following severity levels (in increasing&#xA;order of severity): ``INFO``, ``WARNING``, ``ERROR``, and ``FATAL``.&#xA;Logging a ``FATAL`` message terminates the program (after the message is&#xA;logged). Note that messages of a given severity are logged not only in&#xA;the logfile for that severity, but also in all logfiles of lower&#xA;severity. E.g., a message of severity ``FATAL`` will be logged to the&#xA;logfiles of severity ``FATAL``, ``ERROR``, ``WARNING``, and ``INFO``.&#xA;&#xA;The ``DFATAL`` severity logs a ``FATAL`` error in debug mode (i.e.,&#xA;there is no ``NDEBUG`` macro defined), but avoids halting the program in&#xA;production by automatically reducing the severity to ``ERROR``.&#xA;&#xA;Unless otherwise specified, glog writes to the filename&#xA;``/tmp/\&amp;lt;program name\&amp;gt;.\&amp;lt;hostname\&amp;gt;.\&amp;lt;user name\&amp;gt;.log.\&amp;lt;severity level\&amp;gt;.\&amp;lt;date\&amp;gt;-\&amp;lt;time\&amp;gt;.\&amp;lt;pid\&amp;gt;``&#xA;(e.g.,&#xA;``/tmp/hello_world.example.com.hamaji.log.INFO.20080709-222411.10474``).&#xA;By default, glog copies the log messages of severity level ``ERROR`` or&#xA;``FATAL`` to standard error (``stderr``) in addition to log files.&#xA;&#xA;Setting Flags&#xA;~~~~~~~~~~~~~&#xA;&#xA;Several flags influence glog‚Äôs output behavior. If the `Google gflags library&#xA;&amp;lt;https://github.com/gflags/gflags&amp;gt;`__ is installed on your machine, the build&#xA;system will automatically detect and use it, allowing you to pass flags on the&#xA;command line. For example, if you want to turn the flag :cmd:`--logtostderr` on,&#xA;you can start your application with the following command line:&#xA;&#xA;.. code:: bash&#xA;&#xA;   ./your_application --logtostderr=1&#xA;&#xA;If the Google gflags library isn‚Äôt installed, you set flags via&#xA;environment variables, prefixing the flag name with ``GLOG_``, e.g.,&#xA;&#xA;.. code:: bash&#xA;&#xA;   GLOG_logtostderr=1 ./your_application&#xA;&#xA;The following flags are most commonly used:&#xA;&#xA;``logtostderr`` (``bool``, default=\ ``false``)&#xA;   Log messages to ``stderr`` instead of logfiles. Note: you can set&#xA;   binary flags to ``true`` by specifying ``1``, ``true``, or ``yes``&#xA;   (case insensitive). Also, you can set binary flags to ``false`` by&#xA;   specifying ``0``, ``false``, or ``no`` (again, case insensitive).&#xA;&#xA;``stderrthreshold`` (``int``, default=2, which is ``ERROR``)&#xA;   Copy log messages at or above this level to stderr in addition to&#xA;   logfiles. The numbers of severity levels ``INFO``, ``WARNING``,&#xA;   ``ERROR``, and ``FATAL`` are 0, 1, 2, and 3, respectively.&#xA;&#xA;``minloglevel`` (``int``, default=0, which is ``INFO``)&#xA;   Log messages at or above this level. Again, the numbers of severity&#xA;   levels ``INFO``, ``WARNING``, ``ERROR``, and ``FATAL`` are 0, 1, 2,&#xA;   and 3, respectively.&#xA;&#xA;``log_dir`` (``string``, default=&#34;&#34;)&#xA;   If specified, logfiles are written into this directory instead of the&#xA;   default logging directory.&#xA;&#xA;``v`` (``int``, default=0)&#xA;   Show all ``VLOG(m)`` messages for ``m`` less or equal the value of&#xA;   this flag. Overridable by :cmd:`--vmodule`. See `the section about&#xA;   verbose logging &amp;lt;#verbose-logging&amp;gt;`__ for more detail.&#xA;&#xA;``vmodule`` (``string``, default=&#34;&#34;)&#xA;   Per-module verbose level. The argument has to contain a&#xA;   comma-separated list of &amp;lt;module name&amp;gt;=&amp;lt;log level&amp;gt;. &amp;lt;module name&amp;gt; is a&#xA;   glob pattern (e.g., ``gfs*`` for all modules whose name starts with&#xA;   &#34;gfs&#34;), matched against the filename base (that is, name ignoring&#xA;   .cc/.h./-inl.h). &amp;lt;log level&amp;gt; overrides any value given by :cmd:`--v`.&#xA;   See also `the section about verbose logging &amp;lt;#verbose-logging&amp;gt;`__.&#xA;&#xA;There are some other flags defined in logging.cc. Please grep the source&#xA;code for ``DEFINE_`` to see a complete list of all flags.&#xA;&#xA;You can also modify flag values in your program by modifying global&#xA;variables ``FLAGS_*`` . Most settings start working immediately after&#xA;you update ``FLAGS_*`` . The exceptions are the flags related to&#xA;destination files. For example, you might want to set ``FLAGS_log_dir``&#xA;before calling :cpp:`google::InitGoogleLogging` . Here is an example:&#xA;&#xA;.. code:: cpp&#xA;&#xA;   LOG(INFO) &amp;lt;&amp;lt; &#34;file&#34;;&#xA;   // Most flags work immediately after updating values.&#xA;   FLAGS_logtostderr = 1;&#xA;   LOG(INFO) &amp;lt;&amp;lt; &#34;stderr&#34;;&#xA;   FLAGS_logtostderr = 0;&#xA;   // This won‚Äôt change the log destination. If you want to set this&#xA;   // value, you should do this before google::InitGoogleLogging .&#xA;   FLAGS_log_dir = &#34;/some/log/directory&#34;;&#xA;   LOG(INFO) &amp;lt;&amp;lt; &#34;the same file&#34;;&#xA;&#xA;Conditional / Occasional Logging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes, you may only want to log a message under certain conditions. You can use the following macros to perform conditional logging:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: cpp&lt;/p&gt; &#xA;&lt;p&gt;LOG_IF(INFO, num_cookies &amp;gt; 10) &amp;lt;&amp;lt; &#34;Got lots of cookies&#34;;&lt;/p&gt; &#xA;&lt;p&gt;The &#34;Got lots of cookies&#34; message is logged only when the variable &lt;code&gt;num_cookies&lt;/code&gt; exceeds 10. If a line of code is executed many times, it may be useful to only log a message at certain intervals. This kind of logging is most useful for informational messages.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: cpp&lt;/p&gt; &#xA;&lt;p&gt;LOG_EVERY_N(INFO, 10) &amp;lt;&amp;lt; &#34;Got the &#34; &amp;lt;&amp;lt; google::COUNTER &amp;lt;&amp;lt; &#34;th cookie&#34;;&lt;/p&gt; &#xA;&lt;p&gt;The above line outputs a log messages on the 1st, 11th, 21st, ... times it is executed. Note that the special &lt;code&gt;google::COUNTER&lt;/code&gt; value is used to identify which repetition is happening.&lt;/p&gt; &#xA;&lt;p&gt;You can combine conditional and occasional logging with the following macro.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: cpp&lt;/p&gt; &#xA;&lt;p&gt;LOG_IF_EVERY_N(INFO, (size &amp;gt; 1024), 10) &amp;lt;&amp;lt; &#34;Got the &#34; &amp;lt;&amp;lt; google::COUNTER &amp;lt;&amp;lt; &#34;th big cookie&#34;;&lt;/p&gt; &#xA;&lt;p&gt;Instead of outputting a message every nth time, you can also limit the output to the first n occurrences:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: cpp&lt;/p&gt; &#xA;&lt;p&gt;LOG_FIRST_N(INFO, 20) &amp;lt;&amp;lt; &#34;Got the &#34; &amp;lt;&amp;lt; google::COUNTER &amp;lt;&amp;lt; &#34;th cookie&#34;;&lt;/p&gt; &#xA;&lt;p&gt;Outputs log messages for the first 20 times it is executed. Again, the &lt;code&gt;google::COUNTER&lt;/code&gt; identifier indicates which repetition is happening.&lt;/p&gt; &#xA;&lt;p&gt;Other times, it is desired to only log a message periodically based on a time. So for example, to log a message every 10ms:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: cpp&lt;/p&gt; &#xA;&lt;p&gt;LOG_EVERY_T(INFO, 0.01) &amp;lt;&amp;lt; &#34;Got a cookie&#34;;&lt;/p&gt; &#xA;&lt;p&gt;Or every 2.35s:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: cpp&lt;/p&gt; &#xA;&lt;p&gt;LOG_EVERY_T(INFO, 2.35) &amp;lt;&amp;lt; &#34;Got a cookie&#34;;&lt;/p&gt; &#xA;&lt;p&gt;Debug Mode Support&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Special &#34;debug mode&#34; logging macros only have an effect in debug mode&#xA;and are compiled away to nothing for non-debug mode compiles. Use these&#xA;macros to avoid slowing down your production application due to&#xA;excessive logging.&#xA;&#xA;.. code:: cpp&#xA;&#xA;   DLOG(INFO) &amp;lt;&amp;lt; &#34;Found cookies&#34;;&#xA;   DLOG_IF(INFO, num_cookies &amp;gt; 10) &amp;lt;&amp;lt; &#34;Got lots of cookies&#34;;&#xA;   DLOG_EVERY_N(INFO, 10) &amp;lt;&amp;lt; &#34;Got the &#34; &amp;lt;&amp;lt; google::COUNTER &amp;lt;&amp;lt; &#34;th cookie&#34;;&#xA;&#xA;&#xA;``CHECK`` Macros&#xA;~~~~~~~~~~~~~~~~&#xA;&#xA;It is a good practice to check expected conditions in your program&#xA;frequently to detect errors as early as possible. The ``CHECK`` macro&#xA;provides the ability to abort the application when a condition is not&#xA;met, similar to the ``assert`` macro defined in the standard C library.&#xA;&#xA;``CHECK`` aborts the application if a condition is not true. Unlike&#xA;``assert``, it is \*not\* controlled by ``NDEBUG``, so the check will be&#xA;executed regardless of compilation mode. Therefore, ``fp-&amp;gt;Write(x)`` in&#xA;the following example is always executed:&#xA;&#xA;.. code:: cpp&#xA;&#xA;   CHECK(fp-&amp;gt;Write(x) == 4) &amp;lt;&amp;lt; &#34;Write failed!&#34;;&#xA;&#xA;There are various helper macros for equality/inequality checks -&#xA;``CHECK_EQ``, ``CHECK_NE``, ``CHECK_LE``, ``CHECK_LT``, ``CHECK_GE``,&#xA;and ``CHECK_GT``. They compare two values, and log a ``FATAL`` message&#xA;including the two values when the result is not as expected. The values&#xA;must have :cpp:`operator&amp;lt;&amp;lt;(ostream, ...)` defined.&#xA;&#xA;You may append to the error message like so:&#xA;&#xA;.. code:: cpp&#xA;&#xA;   CHECK_NE(1, 2) &amp;lt;&amp;lt; &#34;: The world must be ending!&#34;;&#xA;&#xA;We are very careful to ensure that each argument is evaluated exactly&#xA;once, and that anything which is legal to pass as a function argument is&#xA;legal here. In particular, the arguments may be temporary expressions&#xA;which will end up being destroyed at the end of the apparent statement,&#xA;for example:&#xA;&#xA;.. code:: cpp&#xA;&#xA;   CHECK_EQ(string(&#34;abc&#34;)[1], ‚Äôb‚Äô);&#xA;&#xA;The compiler reports an error if one of the arguments is a pointer and the other&#xA;is :cpp:`nullptr`. To work around this, simply :cpp:`static_cast` :cpp:`nullptr` to&#xA;the type of the desired pointer.&#xA;&#xA;.. code:: cpp&#xA;&#xA;   CHECK_EQ(some_ptr, static_cast&amp;lt;SomeType*&amp;gt;(nullptr));&#xA;&#xA;Better yet, use the ``CHECK_NOTNULL`` macro:&#xA;&#xA;.. code:: cpp&#xA;&#xA;   CHECK_NOTNULL(some_ptr);&#xA;   some_ptr-&amp;gt;DoSomething();&#xA;&#xA;Since this macro returns the given pointer, this is very useful in&#xA;constructor initializer lists.&#xA;&#xA;.. code:: cpp&#xA;&#xA;   struct S {&#xA;       S(Something* ptr) : ptr_(CHECK_NOTNULL(ptr)) {}&#xA;       Something* ptr_;&#xA;   };&#xA;&#xA;Note that you cannot use this macro as a C++ stream due to this feature.&#xA;Please use ``CHECK_EQ`` described above to log a custom message before&#xA;aborting the application.&#xA;&#xA;If you are comparing C strings (:cpp:`char *`), a handy set of macros performs&#xA;case sensitive as well as case insensitive comparisons - ``CHECK_STREQ``,&#xA;``CHECK_STRNE``, ``CHECK_STRCASEEQ``, and ``CHECK_STRCASENE``. The CASE versions&#xA;are case-insensitive. You can safely pass :cpp:`nullptr` pointers for this macro. They&#xA;treat :cpp:`nullptr` and any non-:cpp:`nullptr` string as not equal. Two :cpp:`nullptr`\&#xA;s are equal.&#xA;&#xA;Note that both arguments may be temporary strings which are destructed&#xA;at the end of the current &#34;full expression&#34; (e.g.,&#xA;:cpp:`CHECK_STREQ(Foo().c_str(), Bar().c_str())` where ``Foo`` and ``Bar``&#xA;return C++‚Äôs :cpp:`std::string`).&#xA;&#xA;The ``CHECK_DOUBLE_EQ`` macro checks the equality of two floating point&#xA;values, accepting a small error margin. ``CHECK_NEAR`` accepts a third&#xA;floating point argument, which specifies the acceptable error margin.&#xA;&#xA;Verbose Logging&#xA;~~~~~~~~~~~~~~~&#xA;&#xA;When you are chasing difficult bugs, thorough log messages are very useful.&#xA;However, you may want to ignore too verbose messages in usual development. For&#xA;such verbose logging, glog provides the ``VLOG`` macro, which allows you to&#xA;define your own numeric logging levels. The :cmd:`--v` command line option&#xA;controls which verbose messages are logged:&#xA;&#xA;.. code:: cpp&#xA;&#xA;   VLOG(1) &amp;lt;&amp;lt; &#34;I‚Äôm printed when you run the program with --v=1 or higher&#34;;&#xA;   VLOG(2) &amp;lt;&amp;lt; &#34;I‚Äôm printed when you run the program with --v=2 or higher&#34;;&#xA;&#xA;With ``VLOG``, the lower the verbose level, the more likely messages are to be&#xA;logged. For example, if :cmd:`--v==1`, ``VLOG(1)`` will log, but ``VLOG(2)``&#xA;will not log. This is opposite of the severity level, where ``INFO`` is 0, and&#xA;``ERROR`` is 2. :cmd:`--minloglevel` of 1 will log ``WARNING`` and above. Though&#xA;you can specify any integers for both ``VLOG`` macro and :cmd:`--v` flag, the&#xA;common values for them are small positive integers. For example, if you write&#xA;``VLOG(0)``, you should specify :cmd:`--v=-1` or lower to silence it. This is&#xA;less useful since we may not want verbose logs by default in most cases. The&#xA;``VLOG`` macros always log at the ``INFO`` log level (when they log at all).&#xA;&#xA;Verbose logging can be controlled from the command line on a per-module&#xA;basis:&#xA;&#xA;.. code:: bash&#xA;&#xA;   --vmodule=mapreduce=2,file=1,gfs*=3 --v=0&#xA;&#xA;will:&#xA;&#xA;(a) Print ``VLOG(2)`` and lower messages from mapreduce.{h,cc}&#xA;(b) Print ``VLOG(1)`` and lower messages from file.{h,cc}&#xA;(c) Print ``VLOG(3)`` and lower messages from files prefixed with &#34;gfs&#34;&#xA;(d) Print ``VLOG(0)`` and lower messages from elsewhere&#xA;&#xA;The wildcarding functionality shown by (c) supports both ‚Äô*‚Äô (matches 0&#xA;or more characters) and ‚Äô?‚Äô (matches any single character) wildcards.&#xA;Please also check the section about `command line flags &amp;lt;#setting-flags&amp;gt;`__.&#xA;&#xA;There‚Äôs also ``VLOG_IS_ON(n)`` &#34;verbose level&#34; condition macro. This&#xA;macro returns true when the :cmd:`--v` is equal or greater than ``n``. To&#xA;be used as&#xA;&#xA;.. code:: cpp&#xA;&#xA;   if (VLOG_IS_ON(2)) {&#xA;       // do some logging preparation and logging&#xA;       // that can‚Äôt be accomplished with just VLOG(2) &amp;lt;&amp;lt; ...;&#xA;   }&#xA;&#xA;Verbose level condition macros ``VLOG_IF``, ``VLOG_EVERY_N`` and&#xA;``VLOG_IF_EVERY_N`` behave analogous to ``LOG_IF``, ``LOG_EVERY_N``,&#xA;``LOF_IF_EVERY``, but accept a numeric verbosity level as opposed to a&#xA;severity level.&#xA;&#xA;.. code:: cpp&#xA;&#xA;   VLOG_IF(1, (size &amp;gt; 1024))&#xA;      &amp;lt;&amp;lt; &#34;I‚Äôm printed when size is more than 1024 and when you run the &#34;&#xA;         &#34;program with --v=1 or more&#34;;&#xA;   VLOG_EVERY_N(1, 10)&#xA;      &amp;lt;&amp;lt; &#34;I‚Äôm printed every 10th occurrence, and when you run the program &#34;&#xA;         &#34;with --v=1 or more. Present occurrence is &#34; &amp;lt;&amp;lt; google::COUNTER;&#xA;   VLOG_IF_EVERY_N(1, (size &amp;gt; 1024), 10)&#xA;      &amp;lt;&amp;lt; &#34;I‚Äôm printed on every 10th occurrence of case when size is more &#34;&#xA;         &#34; than 1024, when you run the program with --v=1 or more. &#34;;&#xA;         &#34;Present occurrence is &#34; &amp;lt;&amp;lt; google::COUNTER;&#xA;&#xA;&#xA;Custom Log Prefix Format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;glog supports changing the format of the prefix attached to log messages by receiving a user-provided callback to be used to generate such strings.&lt;/p&gt; &#xA;&lt;p&gt;For each log entry, the callback will be invoked with a &lt;code&gt;LogMessageInfo&lt;/code&gt; struct containing the severity, filename, line number, thread ID, and time of the event. It will also be given a reference to the output stream, whose contents will be prepended to the actual message in the final log line.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: cpp&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/* This function writes a prefix that matches glog&#39;s default format.&#xA; * (The third parameter can be used to receive user-supplied data, and is&#xA; * nullptr by default.)&#xA; */&#xA;void CustomPrefix(std::ostream &amp;amp;s, const LogMessageInfo &amp;amp;l, void*) {&#xA;   s &amp;lt;&amp;lt; l.severity[0]&#xA;   &amp;lt;&amp;lt; setw(4) &amp;lt;&amp;lt; 1900 + l.time.year()&#xA;   &amp;lt;&amp;lt; setw(2) &amp;lt;&amp;lt; 1 + l.time.month()&#xA;   &amp;lt;&amp;lt; setw(2) &amp;lt;&amp;lt; l.time.day()&#xA;   &amp;lt;&amp;lt; &#39; &#39;&#xA;   &amp;lt;&amp;lt; setw(2) &amp;lt;&amp;lt; l.time.hour() &amp;lt;&amp;lt; &#39;:&#39;&#xA;   &amp;lt;&amp;lt; setw(2) &amp;lt;&amp;lt; l.time.min()  &amp;lt;&amp;lt; &#39;:&#39;&#xA;   &amp;lt;&amp;lt; setw(2) &amp;lt;&amp;lt; l.time.sec() &amp;lt;&amp;lt; &#34;.&#34;&#xA;   &amp;lt;&amp;lt; setw(6) &amp;lt;&amp;lt; l.time.usec()&#xA;   &amp;lt;&amp;lt; &#39; &#39;&#xA;   &amp;lt;&amp;lt; setfill(&#39; &#39;) &amp;lt;&amp;lt; setw(5)&#xA;   &amp;lt;&amp;lt; l.thread_id &amp;lt;&amp;lt; setfill(&#39;0&#39;)&#xA;   &amp;lt;&amp;lt; &#39; &#39;&#xA;   &amp;lt;&amp;lt; l.filename &amp;lt;&amp;lt; &#39;:&#39; &amp;lt;&amp;lt; l.line_number &amp;lt;&amp;lt; &#34;]&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable the use of &lt;code&gt;CustomPrefix()&lt;/code&gt;, simply give glog a pointer to it during initialization: &lt;code&gt;InitGoogleLogging(argv[0], &amp;amp;CustomPrefix);&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Optionally, &lt;code&gt;InitGoogleLogging()&lt;/code&gt; takes a third argument of type &lt;code&gt;void*&lt;/code&gt; to pass on to the callback function.&lt;/p&gt; &#xA;&lt;p&gt;Failure Signal Handler&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;The library provides a convenient signal handler that will dump useful&#xA;information when the program crashes on certain signals such as ``SIGSEGV``. The&#xA;signal handler can be installed by :cpp:`google::InstallFailureSignalHandler()`.&#xA;The following is an example of output from the signal handler.&#xA;&#xA;::&#xA;&#xA;   *** Aborted at 1225095260 (unix time) try &#34;date -d @1225095260&#34; if you are using GNU date ***&#xA;   *** SIGSEGV (@0x0) received by PID 17711 (TID 0x7f893090a6f0) from PID 0; stack trace: ***&#xA;   PC: @           0x412eb1 TestWaitingLogSink::send()&#xA;       @     0x7f892fb417d0 (unknown)&#xA;       @           0x412eb1 TestWaitingLogSink::send()&#xA;       @     0x7f89304f7f06 google::LogMessage::SendToLog()&#xA;       @     0x7f89304f35af google::LogMessage::Flush()&#xA;       @     0x7f89304f3739 google::LogMessage::~LogMessage()&#xA;       @           0x408cf4 TestLogSinkWaitTillSent()&#xA;       @           0x4115de main&#xA;       @     0x7f892f7ef1c4 (unknown)&#xA;       @           0x4046f9 (unknown)&#xA;&#xA;By default, the signal handler writes the failure dump to the standard&#xA;error. You can customize the destination by :cpp:`InstallFailureWriter()`.&#xA;&#xA;Performance of Messages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The conditional logging macros provided by glog (e.g., &lt;code&gt;CHECK&lt;/code&gt;, &lt;code&gt;LOG_IF&lt;/code&gt;, &lt;code&gt;VLOG&lt;/code&gt;, etc.) are carefully implemented and don‚Äôt execute the right hand side expressions when the conditions are false. So, the following check may not sacrifice the performance of your application.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: cpp&lt;/p&gt; &#xA;&lt;p&gt;CHECK(obj.ok) &amp;lt;&amp;lt; obj.CreatePrettyFormattedStringButVerySlow();&lt;/p&gt; &#xA;&lt;p&gt;User-defined Failure Function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;``FATAL`` severity level messages or unsatisfied ``CHECK`` condition&#xA;terminate your program. You can change the behavior of the termination&#xA;by :cpp:`InstallFailureFunction`.&#xA;&#xA;.. code:: cpp&#xA;&#xA;   void YourFailureFunction() {&#xA;     // Reports something...&#xA;     exit(EXIT_FAILURE);&#xA;   }&#xA;&#xA;   int main(int argc, char* argv[]) {&#xA;     google::InstallFailureFunction(&amp;amp;YourFailureFunction);&#xA;   }&#xA;&#xA;By default, glog tries to dump stacktrace and makes the program exit&#xA;with status 1. The stacktrace is produced only when you run the program&#xA;on an architecture for which glog supports stack tracing (as of&#xA;September 2008, glog supports stack tracing for x86 and x86_64).&#xA;&#xA;Raw Logging&#xA;~~~~~~~~~~~&#xA;&#xA;The header file ``&amp;lt;glog/raw_logging.h&amp;gt;`` can be used for thread-safe logging,&#xA;which does not allocate any memory or acquire any locks. Therefore, the macros&#xA;defined in this header file can be used by low-level memory allocation and&#xA;synchronization code. Please check `src/glog/raw_logging.h.in&#xA;&amp;lt;src/glog/raw_logging.h.in&amp;gt;`__ for detail.&#xA;&#xA;Google Style ``perror()``&#xA;~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;``PLOG()`` and ``PLOG_IF()`` and ``PCHECK()`` behave exactly like their&#xA;``LOG*`` and ``CHECK`` equivalents with the addition that they append a&#xA;description of the current state of errno to their output lines. E.g.&#xA;&#xA;.. code:: cpp&#xA;&#xA;   PCHECK(write(1, nullptr, 2) &amp;gt;= 0) &amp;lt;&amp;lt; &#34;Write nullptr failed&#34;;&#xA;&#xA;This check fails with the following error message.&#xA;&#xA;::&#xA;&#xA;   F0825 185142 test.cc:22] Check failed: write(1, nullptr, 2) &amp;gt;= 0 Write nullptr failed: Bad address [14]&#xA;&#xA;Syslog&#xA;~~~~~~&#xA;&#xA;``SYSLOG``, ``SYSLOG_IF``, and ``SYSLOG_EVERY_N`` macros are available.&#xA;These log to syslog in addition to the normal logs. Be aware that&#xA;logging to syslog can drastically impact performance, especially if&#xA;syslog is configured for remote logging! Make sure you understand the&#xA;implications of outputting to syslog before you use these macros. In&#xA;general, it‚Äôs wise to use these macros sparingly.&#xA;&#xA;Strip Logging Messages&#xA;~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;Strings used in log messages can increase the size of your binary and&#xA;present a privacy concern. You can therefore instruct glog to remove all&#xA;strings which fall below a certain severity level by using the&#xA;``GOOGLE_STRIP_LOG`` macro:&#xA;&#xA;If your application has code like this:&#xA;&#xA;.. code:: cpp&#xA;&#xA;   #define GOOGLE_STRIP_LOG 1    // this must go before the #include!&#xA;   #include &amp;lt;glog/logging.h&amp;gt;&#xA;&#xA;The compiler will remove the log messages whose severities are less than&#xA;the specified integer value. Since ``VLOG`` logs at the severity level&#xA;``INFO`` (numeric value ``0``), setting ``GOOGLE_STRIP_LOG`` to 1 or&#xA;greater removes all log messages associated with ``VLOG``\ s as well as&#xA;``INFO`` log statements.&#xA;&#xA;Automatically Remove Old Logs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable the log cleaner:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: cpp&lt;/p&gt; &#xA;&lt;p&gt;google::EnableLogCleaner(3); // keep your logs for 3 days&lt;/p&gt; &#xA;&lt;p&gt;And then glog will check if there are overdue logs whenever a flush is performed. In this example, any log file from your project whose last modified time is greater than 3 days will be unlink()ed.&lt;/p&gt; &#xA;&lt;p&gt;This feature can be disabled at any time (if it has been enabled)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: cpp&lt;/p&gt; &#xA;&lt;p&gt;google::DisableLogCleaner();&lt;/p&gt; &#xA;&lt;p&gt;Notes for Windows Users&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;glog defines a severity level ``ERROR``, which is also defined in&#xA;``windows.h`` . You can make glog not define ``INFO``, ``WARNING``,&#xA;``ERROR``, and ``FATAL`` by defining ``GLOG_NO_ABBREVIATED_SEVERITIES``&#xA;before including ``glog/logging.h`` . Even with this macro, you can&#xA;still use the iostream like logging facilities:&#xA;&#xA;.. code:: cpp&#xA;&#xA;   #define GLOG_NO_ABBREVIATED_SEVERITIES&#xA;   #include &amp;lt;windows.h&amp;gt;&#xA;   #include &amp;lt;glog/logging.h&amp;gt;&#xA;&#xA;   // ...&#xA;&#xA;   LOG(ERROR) &amp;lt;&amp;lt; &#34;This should work&#34;;&#xA;   LOG_IF(ERROR, x &amp;gt; y) &amp;lt;&amp;lt; &#34;This should be also OK&#34;;&#xA;&#xA;However, you cannot use ``INFO``, ``WARNING``, ``ERROR``, and ``FATAL``&#xA;anymore for functions defined in ``glog/logging.h`` .&#xA;&#xA;.. code:: cpp&#xA;&#xA;   #define GLOG_NO_ABBREVIATED_SEVERITIES&#xA;   #include &amp;lt;windows.h&amp;gt;&#xA;   #include &amp;lt;glog/logging.h&amp;gt;&#xA;&#xA;   // ...&#xA;&#xA;   // This won‚Äôt work.&#xA;   // google::FlushLogFiles(google::ERROR);&#xA;&#xA;   // Use this instead.&#xA;   google::FlushLogFiles(google::GLOG_ERROR);&#xA;&#xA;If you don‚Äôt need ``ERROR`` defined by ``windows.h``, there are a couple&#xA;of more workarounds which sometimes don‚Äôt work:&#xA;&#xA;-  ``#define WIN32_LEAN_AND_MEAN`` or ``NOGDI`` **before** you&#xA;   ``#include windows.h``.&#xA;-  ``#undef ERROR`` **after** you ``#include windows.h`` .&#xA;&#xA;See `this&#xA;issue &amp;lt;http://code.google.com/p/google-glog/issues/detail?id=33&amp;gt;`__ for&#xA;more detail.&#xA;&#xA;&#xA;Installation Notes for 64-bit Linux Systems&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The glibc built-in stack-unwinder on 64-bit systems has some problems with glog. (In particular, if you are using :cpp:&lt;code&gt;InstallFailureSignalHandler()&lt;/code&gt;, the signal may be raised in the middle of malloc, holding some malloc-related locks when they invoke the stack unwinder. The built-in stack unwinder may call malloc recursively, which may require the thread to acquire a lock it already holds: deadlock.)&lt;/p&gt; &#xA;&lt;p&gt;For that reason, if you use a 64-bit system and you need :cpp:&lt;code&gt;InstallFailureSignalHandler()&lt;/code&gt;, we strongly recommend you install &lt;code&gt;libunwind&lt;/code&gt; before trying to configure or install google glog. libunwind can be found &lt;code&gt;here &amp;lt;http://download.savannah.nongnu.org/releases/libunwind/libunwind-snap-070410.tar.gz&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;Even if you already have &lt;code&gt;libunwind&lt;/code&gt; installed, you will probably still need to install from the snapshot to get the latest version.&lt;/p&gt; &#xA;&lt;p&gt;Caution: if you install libunwind from the URL above, be aware that you may have trouble if you try to statically link your binary with glog: that is, if you link with &lt;code&gt;gcc -static -lgcc_eh ...&lt;/code&gt;. This is because both &lt;code&gt;libunwind&lt;/code&gt; and &lt;code&gt;libgcc&lt;/code&gt; implement the same C++ exception handling APIs, but they implement them differently on some platforms. This is not likely to be a problem on ia64, but may be on x86-64.&lt;/p&gt; &#xA;&lt;p&gt;Also, if you link binaries statically, make sure that you add :cmd:&lt;code&gt;-Wl,--eh-frame-hdr&lt;/code&gt; to your linker options. This is required so that &lt;code&gt;libunwind&lt;/code&gt; can find the information generated by the compiler required for stack unwinding.&lt;/p&gt; &#xA;&lt;p&gt;Using :cmd:&lt;code&gt;-static&lt;/code&gt; is rare, though, so unless you know this will affect you it probably won‚Äôt.&lt;/p&gt; &#xA;&lt;p&gt;If you cannot or do not wish to install libunwind, you can still try to use two kinds of stack-unwinder: 1. glibc built-in stack-unwinder and 2. frame pointer based stack-unwinder.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;As we already mentioned, glibc‚Äôs unwinder has a deadlock issue. However, if you don‚Äôt use :cpp:&lt;code&gt;InstallFailureSignalHandler()&lt;/code&gt; or you don‚Äôt worry about the rare possibilities of deadlocks, you can use this stack-unwinder. If you specify no options and &lt;code&gt;libunwind&lt;/code&gt; isn‚Äôt detected on your system, the configure script chooses this unwinder by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The frame pointer based stack unwinder requires that your application, the glog library, and system libraries like libc, all be compiled with a frame pointer. This is &lt;em&gt;not&lt;/em&gt; the default for x86-64.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We‚Äôd love to accept your patches and contributions to this project. There are a just a few small guidelines you need to follow.&lt;/p&gt; &#xA;&lt;p&gt;Contributor License Agreement (CLA)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Contributions to any Google project must be accompanied by a Contributor&#xA;License Agreement. This is not a copyright **assignment**, it simply&#xA;gives Google permission to use and redistribute your contributions as&#xA;part of the project.&#xA;&#xA;* If you are an individual writing original source code and you‚Äôre sure&#xA;  you own the intellectual property, then you‚Äôll need to sign an&#xA;  `individual&#xA;  CLA &amp;lt;https://developers.google.com/open-source/cla/individual&amp;gt;`__.&#xA;* If you work for a company that wants to allow you to contribute your&#xA;  work, then you‚Äôll need to sign a `corporate&#xA;  CLA &amp;lt;https://developers.google.com/open-source/cla/corporate&amp;gt;`__.&#xA;&#xA;You generally only need to submit a CLA once, so if you‚Äôve already&#xA;submitted one (even if it was for a different project), you probably&#xA;don‚Äôt need to do it again.&#xA;&#xA;Once your CLA is submitted (or if you already submitted one for another&#xA;Google project), make a commit adding yourself to the&#xA;`AUTHORS &amp;lt;./AUTHORS&amp;gt;`__ and `CONTRIBUTORS &amp;lt;./CONTRIBUTORS&amp;gt;`__ files. This&#xA;commit can be part of your first `pull&#xA;request &amp;lt;https://help.github.com/articles/creating-a-pull-request&amp;gt;`__.&#xA;&#xA;Submitting a Patch&#xA;~~~~~~~~~~~~~~~~~~&#xA;&#xA;1. It‚Äôs generally best to start by opening a new issue describing the&#xA;   bug or feature you‚Äôre intending to fix. Even if you think it‚Äôs&#xA;   relatively minor, it‚Äôs helpful to know what people are working on.&#xA;   Mention in the initial issue that you are planning to work on that&#xA;   bug or feature so that it can be assigned to you.&#xA;2. Follow the normal process of&#xA;   `forking &amp;lt;https://help.github.com/articles/fork-a-repo&amp;gt;`__ the&#xA;   project, and setup a new branch to work in. It‚Äôs important that each&#xA;   group of changes be done in separate branches in order to ensure that&#xA;   a pull request only includes the commits related to that bug or&#xA;   feature.&#xA;3. Do your best to have `well-formed commit&#xA;   messages &amp;lt;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&amp;gt;`__&#xA;   for each change. This provides consistency throughout the project,&#xA;   and ensures that commit messages are able to be formatted properly by&#xA;   various git tools.&#xA;4. Finally, push the commits to your fork and submit a `pull&#xA;   request &amp;lt;https://help.github.com/articles/creating-a-pull-request&amp;gt;`__.&#xA;&#xA;&#xA;.. |Linux Github actions| image:: https://github.com/google/glog/actions/workflows/linux.yml/badge.svg&#xA;   :target: https://github.com/google/glog/actions&#xA;.. |Windows Github actions| image:: https://github.com/google/glog/actions/workflows/windows.yml/badge.svg&#xA;   :target: https://github.com/google/glog/actions&#xA;.. |macOS Github actions| image:: https://github.com/google/glog/actions/workflows/macos.yml/badge.svg&#xA;   :target: https://github.com/google/glog/actions&#xA;.. |Codecov| image:: https://codecov.io/gh/google/glog/branch/master/graph/badge.svg?token=8an420vNju&#xA;   :target: https://codecov.io/gh/google/glog&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>