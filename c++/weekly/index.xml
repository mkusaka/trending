<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-04T01:54:06Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dalathegreat/BYD-Battery-Emulator-For-Gen24</title>
    <updated>2023-06-04T01:54:06Z</updated>
    <id>tag:github.com,2023-06-04:/dalathegreat/BYD-Battery-Emulator-For-Gen24</id>
    <link href="https://github.com/dalathegreat/BYD-Battery-Emulator-For-Gen24" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This software converts the LEAF CAN into Modbus RTU registers understood by solar inverters that take the BYD 11kWh HVM battery&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BYD-Battery-Emulator-For-Gen24 ⚡🔋&lt;/h1&gt; &#xA;&lt;p&gt;This software converts the LEAF CAN into Modbus RTU registers understood by solar inverters that accept the BYD 11kWh HVM battery. This enables a very easy way to use EV batteries for plug&#39;n&#39;play storage solutions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dalathegreat/BYD-Battery-Emulator-For-Gen24/raw/main/Images/Fronius.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hardware requirements 📜&lt;/h2&gt; &#xA;&lt;p&gt;This code fits on the LilyGo ESP32 T-CAN485 devboard , see &lt;a href=&#34;https://github.com/Xinyuan-LilyGO/T-CAN485&#34;&gt;https://github.com/Xinyuan-LilyGO/T-CAN485&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will also need a Nissan LEAF battery, any model year will do&lt;/p&gt; &#xA;&lt;p&gt;Finally, you will need a hybrid solar inverter that accepts the BYD battery communication standard, for example the Fronius Gen24&lt;/p&gt; &#xA;&lt;h2&gt;Installation basics 🪛&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Connect one end of the LilyGo RS485 to the Gen24 Modbus&lt;/li&gt; &#xA; &lt;li&gt;Connect the other end of the LilyGo to the CAN side of a LEAF battery&lt;/li&gt; &#xA; &lt;li&gt;Wire up high voltage cable between the Gen24 and the LEAF battery. Install a DC high voltage fuse.&lt;/li&gt; &#xA; &lt;li&gt;Add a 12V power source to power the LilyGo and the LEAF battery (uninterruptible PSU or 12V lead acid recommended in parallel)&lt;/li&gt; &#xA; &lt;li&gt;Manually handle pre-charge circuit + positive/negative contactor on LEAF battery for now (circuit will be improved soon)&lt;/li&gt; &#xA; &lt;li&gt;Enjoy a big cheap grid connected battery!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Wiring examples 💡&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s how to wire up the communication between the components. &lt;img src=&#34;https://github.com/dalathegreat/BYD-Battery-Emulator-For-Gen24/raw/main/Images/Wiring.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to connect the high voltage lines &lt;img src=&#34;https://github.com/dalathegreat/BYD-Battery-Emulator-For-Gen24/raw/main/Images/HighVoltageWiring.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to wire up battery low voltage wiring &lt;img src=&#34;https://github.com/dalathegreat/BYD-Battery-Emulator-For-Gen24/raw/main/Images/BatteryControlWiring.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more examples showing wiring, see the Example#####.jpg pictures in the &#39;Images&#39; folder &lt;a href=&#34;https://github.com/dalathegreat/BYD-Battery-Emulator-For-Gen24/tree/main/Images&#34;&gt;https://github.com/dalathegreat/BYD-Battery-Emulator-For-Gen24/tree/main/Images&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to compile the software 💻&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the Arduino IDE: &lt;a href=&#34;https://www.arduino.cc/en/software&#34;&gt;https://www.arduino.cc/en/software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;When the Arduino IDE has been started; Click &#34;File&#34; in the upper left corner -&amp;gt; Preferences -&amp;gt; Additional Development &amp;gt;Board Manager URL -&amp;gt; Enter the URL in the input box &lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json&#34;&gt;https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to &#34;Boards Manager&#34;, and install the ESP32 package by Espressif Systems&lt;/li&gt; &#xA; &lt;li&gt;The arduino settings should be set to &#34;ESP32 Dev Module&#34; with the following settings; &lt;img src=&#34;https://github.com/Xinyuan-LilyGO/T-CAN485/raw/main/img/arduino_setting.png&#34; alt=&#34;alt text&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Press Verify and Upload to send the sketch to the board&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Dependencies 📖&lt;/h2&gt; &#xA;&lt;p&gt;This code uses two libraries, ESP32-Arduino-CAN (&lt;a href=&#34;https://github.com/miwagner/ESP32-Arduino-CAN/&#34;&gt;https://github.com/miwagner/ESP32-Arduino-CAN/&lt;/a&gt;) slightly modified for this usecase, and the eModbus library (&lt;a href=&#34;https://github.com/eModbus/eModbus&#34;&gt;https://github.com/eModbus/eModbus&lt;/a&gt;). Both these are already located in the Software folder for an easy start.&lt;/p&gt; &#xA;&lt;p&gt;It is also based on the info found in the following excellent repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/pelle8/gen24&#34;&gt;https://gitlab.com/pelle8/gen24&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/burra/byd_battery&#34;&gt;https://github.com/burra/byd_battery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flodorn/TeslaBMSV2&#34;&gt;https://github.com/flodorn/TeslaBMSV2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Like this project? 💖&lt;/h2&gt; &#xA;&lt;p&gt;Leave a ⭐ If you think this project is useful. Consider hopping onto my Patreon to encourage more open-source projects!&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.patreon.com/dala&#34;&gt; &lt;img src=&#34;https://c5.patreon.com/external/logo/become_a_patron_button@2x.png&#34; width=&#34;160&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>alibaba/higress</title>
    <updated>2023-06-04T01:54:06Z</updated>
    <id>tag:github.com,2023-06-04:/alibaba/higress</id>
    <link href="https://github.com/alibaba/higress" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Next-generation Cloud Native Gateway | 下一代云原生网关&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.alicdn.com/imgextra/i2/O1CN01NwxLDd20nxfGBjxmZ_!!6000000006895-2-tps-960-290.png&#34; alt=&#34;Higress&#34; width=&#34;240&#34; height=&#34;72.5&#34;&gt; &lt;br&gt; Next-generation Cloud Native Gateway &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/higress/actions&#34;&gt;&lt;img src=&#34;https://github.com/alibaba/higress/workflows/build%20and%20codecov/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/alibaba/higress.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://higress.io/&#34;&gt;&lt;strong&gt;官网&lt;/strong&gt;&lt;/a&gt; &amp;nbsp; | &amp;nbsp; &lt;a href=&#34;https://higress.io/zh-cn/docs/overview/what-is-higress&#34;&gt;&lt;strong&gt;文档&lt;/strong&gt;&lt;/a&gt; &amp;nbsp; | &amp;nbsp; &lt;a href=&#34;https://higress.io/zh-cn/blog&#34;&gt;&lt;strong&gt;博客&lt;/strong&gt;&lt;/a&gt; &amp;nbsp; | &amp;nbsp; &lt;a href=&#34;https://higress.io/zh-cn/docs/developers/developers_dev&#34;&gt;&lt;strong&gt;开发指引&lt;/strong&gt;&lt;/a&gt; &amp;nbsp; | &amp;nbsp; &lt;a href=&#34;https://www.aliyun.com/product/aliware/mse?spm=higress-website.topbar.0.0.0&#34;&gt;&lt;strong&gt;Higress 企业版&lt;/strong&gt;&lt;/a&gt; &amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/higress/main/README_EN.md&#34;&gt; English &lt;/a&gt;&lt;a&gt;&lt;/a&gt; | 中文 &lt;/p&gt; &#xA;&lt;p&gt;Higress 是基于阿里内部两年多的 Envoy Gateway 实践沉淀，以开源 &lt;a href=&#34;https://github.com/istio/istio&#34;&gt;Istio&lt;/a&gt; 与 &lt;a href=&#34;https://github.com/envoyproxy/envoy&#34;&gt;Envoy&lt;/a&gt; 为核心构建的下一代云原生网关。Higress 实现了安全防护网关、流量网关、微服务网关三层网关合一，可以显著降低网关的部署和运维成本。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/imgextra/i1/O1CN01iO9ph825juHbOIg75_!!6000000007563-2-tps-2483-2024.png&#34; alt=&#34;arch&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/higress/main/#%E5%8A%9F%E8%83%BD%E5%B1%95%E7%A4%BA&#34;&gt;&lt;strong&gt;功能展示&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/higress/main/#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF&#34;&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/higress/main/#%E6%A0%B8%E5%BF%83%E4%BC%98%E5%8A%BF&#34;&gt;&lt;strong&gt;核心优势&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://higress.io/zh-cn/docs/user/quickstart&#34;&gt;&lt;strong&gt;Quick Start&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/higress/main/#%E7%A4%BE%E5%8C%BA&#34;&gt;&lt;strong&gt;社区&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用场景&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Kubernetes Ingress 网关&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Higress 可以作为 K8s 集群的 Ingress 入口网关, 并且兼容了大量 K8s Nginx Ingress 的注解，可以从 K8s Nginx Ingress 快速平滑迁移到 Higress。&lt;/p&gt; &lt;p&gt;支持 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34;&gt;Gateway API&lt;/a&gt; 标准，支持用户从 Ingress API 平滑迁移到 Gateway API。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;微服务网关&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Higress 可以作为微服务网关, 能够对接多种类型的注册中心发现服务配置路由，例如 Nacos, ZooKeeper, Consul, Eureka 等。&lt;/p&gt; &lt;p&gt;并且深度集成了 &lt;a href=&#34;https://github.com/apache/dubbo&#34;&gt;Dubbo&lt;/a&gt;, &lt;a href=&#34;https://github.com/alibaba/nacos&#34;&gt;Nacos&lt;/a&gt;, &lt;a href=&#34;https://github.com/alibaba/Sentinel&#34;&gt;Sentinel&lt;/a&gt; 等微服务技术栈，基于 Envoy C++ 网关内核的出色性能，相比传统 Java 类微服务网关，可以显著降低资源使用率，减少成本。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;安全防护网关&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Higress 可以作为安全防护网关， 提供 WAF 的能力，并且支持多种认证鉴权策略，例如 key-auth, hmac-auth, jwt-auth, basic-auth, oidc 等。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;核心优势&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;生产等级&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;脱胎于阿里巴巴2年多生产验证的内部产品，支持每秒请求量达数十万级的大规模场景。&lt;/p&gt; &lt;p&gt;彻底摆脱 reload 引起的流量抖动，配置变更毫秒级生效且业务无感。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;平滑演进&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;支持 Nacos/Zookeeper/Eureka 等多种注册中心，可以不依赖 K8s Service 进行服务发现，支持非容器架构平滑演进到云原生架构。&lt;/p&gt; &lt;p&gt;支持从 Nginx Ingress Controller 平滑迁移，支持平滑过渡到 Gateway API，支持业务架构平滑演进到 ServiceMesh。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;兼收并蓄&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;兼容 Nginx Ingress Annotation 80%+ 的使用场景，且提供功能更丰富的 Higress Annotation 注解。&lt;/p&gt; &lt;p&gt;兼容 Ingress API/Gateway API/Istio API，可以组合多种 CRD 实现流量精细化管理。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;便于扩展&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;提供 Wasm、Lua、进程外三种插件扩展机制，支持多语言编写插件，生效粒度支持全局级、域名级，路由级。&lt;/p&gt; &lt;p&gt;插件支持热更新，变更插件逻辑和配置都对流量无损。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;功能展示&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;丰富的可观测&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;提供开箱即用的可观测，Grafana&amp;amp;Prometheus 可以使用内置的也可对接自建的&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/higress/main/docs/images/monitor.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;插件扩展机制&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;官方提供了多种插件，用户也可以&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/higress/main/plugins/wasm-go&#34;&gt;开发&lt;/a&gt;自己的插件，构建成 docker/oci 镜像后在控制台配置，可以实时变更插件逻辑，对流量完全无损。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/higress/main/docs/images/plugin.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;多种服务发现&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;默认提供 K8s Service 服务发现，通过配置可以对接 Nacos/ZooKeeper 等注册中心实现服务发现，也可以基于静态 IP 或者 DNS 来发现&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/higress/main/docs/images/service-source.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;域名和证书&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;可以创建管理 TLS 证书，并配置域名的 HTTP/HTTPS 行为，域名策略里支持对特定域名生效插件&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/higress/main/docs/images/domain.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;丰富的路由能力&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;通过上面定义的服务发现机制，发现的服务会出现在服务列表中；创建路由时，选择域名，定义路由匹配机制，再选择目标服务进行路由；路由策略里支持对特定路由生效插件&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/higress/main/docs/images/route-service.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;社区&lt;/h2&gt; &#xA;&lt;h3&gt;感谢&lt;/h3&gt; &#xA;&lt;p&gt;如果没有 Envoy 和 Istio 的开源工作，Higress 就不可能实现，在这里向这两个项目献上最诚挚的敬意。&lt;/p&gt; &#xA;&lt;h3&gt;联系我们&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mailing list: &lt;a href=&#34;mailto:higress@googlegroups.com&#34;&gt;higress@googlegroups.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;社区交流群:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/imgextra/i1/O1CN01d7LmWu1rMB71rfRhA_!!6000000005616-2-tps-720-405.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;开发者群：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/imgextra/i2/O1CN010jFMgn1qTDaHqeIgH_!!6000000005496-2-tps-406-531.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/onnxruntime</title>
    <updated>2023-06-04T01:54:06Z</updated>
    <id>tag:github.com,2023-06-04:/microsoft/onnxruntime</id>
    <link href="https://github.com/microsoft/onnxruntime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ONNX Runtime: cross-platform, high performance ML inferencing and training accelerator&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;50%&#34; src=&#34;https://raw.githubusercontent.com/microsoft/onnxruntime/main/docs/images/ONNX_Runtime_logo_dark.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ONNX Runtime is a cross-platform inference and training machine-learning accelerator&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ONNX Runtime inference&lt;/strong&gt; can enable faster customer experiences and lower costs, supporting models from deep learning frameworks such as PyTorch and TensorFlow/Keras as well as classical machine learning libraries such as scikit-learn, LightGBM, XGBoost, etc. ONNX Runtime is compatible with different hardware, drivers, and operating systems, and provides optimal performance by leveraging hardware accelerators where applicable alongside graph optimizations and transforms. &lt;a href=&#34;https://www.onnxruntime.ai/docs/#onnx-runtime-for-inferencing&#34;&gt;Learn more →&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ONNX Runtime training&lt;/strong&gt; can accelerate the model training time on multi-node NVIDIA GPUs for transformer models with a one-line addition for existing PyTorch training scripts. &lt;a href=&#34;https://www.onnxruntime.ai/docs/#onnx-runtime-for-training&#34;&gt;Learn more →&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Get Started &amp;amp; Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;General Information&lt;/strong&gt;: &lt;a href=&#34;https://onnxruntime.ai&#34;&gt;onnxruntime.ai&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Usage documention and tutorials&lt;/strong&gt;: &lt;a href=&#34;https://onnxruntime.ai/docs&#34;&gt;onnxruntime.ai/docs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;YouTube video tutorials&lt;/strong&gt;: &lt;a href=&#34;https://www.youtube.com/@ONNXRuntime&#34;&gt;youtube.com/@ONNXRuntime&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/onnxruntime/wiki/Upcoming-Release-Roadmap&#34;&gt;&lt;strong&gt;Upcoming Release Roadmap&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Companion sample repositories&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ONNX Runtime Inferencing: &lt;a href=&#34;https://github.com/microsoft/onnxruntime-inference-examples&#34;&gt;microsoft/onnxruntime-inference-examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;ONNX Runtime Training: &lt;a href=&#34;https://github.com/microsoft/onnxruntime-training-examples&#34;&gt;microsoft/onnxruntime-training-examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Builtin Pipeline Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;System&lt;/th&gt; &#xA;   &lt;th&gt;Inference&lt;/th&gt; &#xA;   &lt;th&gt;Training&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=9&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Windows%20CPU%20CI%20Pipeline?label=Windows+CPU&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=10&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Windows%20GPU%20CI%20Pipeline?label=Windows+GPU&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=47&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Windows%20GPU%20TensorRT%20CI%20Pipeline?label=Windows+GPU+TensorRT&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=11&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Linux%20CPU%20CI%20Pipeline?label=Linux+CPU&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=64&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Linux%20CPU%20Minimal%20Build%20E2E%20CI%20Pipeline?label=Linux+CPU+Minimal+Build&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=12&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Linux%20GPU%20CI%20Pipeline?label=Linux+GPU&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=45&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Linux%20GPU%20TensorRT%20CI%20Pipeline?label=Linux+GPU+TensorRT&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=55&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Linux%20OpenVINO%20CI%20Pipeline?label=Linux+OpenVINO&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=86&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/orttraining-linux-ci-pipeline?label=Linux+CPU+Training&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=84&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/orttraining-linux-gpu-ci-pipeline?label=Linux+GPU+Training&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=148&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/orttraining/orttraining-ortmodule-distributed?label=Training+Distributed&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mac&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=13&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/MacOS%20CI%20Pipeline?label=MacOS+CPU&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=53&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Android%20CI%20Pipeline?label=Android&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=134&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/iOS%20CI%20Pipeline?label=iOS&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Web&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=161&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/ONNX%20Runtime%20Web%20CI%20Pipeline?label=Web&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Other&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=187&amp;amp;repoName=microsoft%2Fonnxruntime&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/onnxruntime-binary-size-checks-ci-pipeline?repoName=microsoft%2Fonnxruntime&amp;amp;label=Binary+Size+Check&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=164&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/onnxruntime-python-checks-ci-pipeline?label=Python+Checks&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Third-party Pipeline Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;System&lt;/th&gt; &#xA;   &lt;th&gt;Inference&lt;/th&gt; &#xA;   &lt;th&gt;Training&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Ascend/onnxruntime/actions/workflows/build-and-test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/Ascend/onnxruntime/actions/workflows/build-and-test.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Data/Telemetry&lt;/h2&gt; &#xA;&lt;p&gt;Windows distributions of this project may collect usage data and send it to Microsoft to help improve our products and services. See the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/onnxruntime/main/docs/Privacy.md&#34;&gt;privacy statement&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions and Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions! Please see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/onnxruntime/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For feature requests or bug reports, please file a &lt;a href=&#34;https://github.com/Microsoft/onnxruntime/issues&#34;&gt;GitHub Issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For general discussion or questions, please use &lt;a href=&#34;https://github.com/microsoft/onnxruntime/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/onnxruntime/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>