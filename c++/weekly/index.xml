<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-07T01:50:10Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ThePhD/sol2</title>
    <updated>2024-04-07T01:50:10Z</updated>
    <id>tag:github.com,2024-04-07:/ThePhD/sol2</id>
    <link href="https://github.com/ThePhD/sol2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sol3 (sol2 v3.0) - a C++ &lt;-&gt; Lua API wrapper with advanced features and top notch performance - is here, and it&#39;s great! Documentation:&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sol2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://sol2.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/sol2/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;sol2 is a C++ library binding to Lua. It currently supports all Lua versions 5.1+ (LuaJIT 2.0+ and MoonJIT included). sol2 aims to be easy to use and easy to add to a project. The library is header-only for easy integration with projects, and a single header can be used for drag-and-drop start up.&lt;/p&gt; &#xA;&lt;h2&gt;Sneak Peek&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;sol/sol.hpp&amp;gt;&#xA;#include &amp;lt;cassert&amp;gt;&#xA;&#xA;int main() {&#xA;    sol::state lua;&#xA;    int x = 0;&#xA;    lua.set_function(&#34;beep&#34;, [&amp;amp;x]{ ++x; });&#xA;    lua.script(&#34;beep()&#34;);&#xA;    assert(x == 1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;sol/sol.hpp&amp;gt;&#xA;#include &amp;lt;cassert&amp;gt;&#xA;&#xA;struct vars {&#xA;    int boop = 0;&#xA;};&#xA;&#xA;int main() {&#xA;    sol::state lua;&#xA;    lua.new_usertype&amp;lt;vars&amp;gt;(&#34;vars&#34;, &#34;boop&#34;, &amp;amp;vars::boop);&#xA;    lua.script(&#34;beep = vars.new()\n&#34;&#xA;               &#34;beep.boop = 1&#34;);&#xA;    assert(lua.get&amp;lt;vars&amp;gt;(&#34;beep&#34;).boop == 1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples are given in the examples directory &lt;a href=&#34;https://github.com/ThePhD/sol2/tree/develop/examples&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Find it &lt;a href=&#34;http://sol2.rtfd.io/&#34;&gt;here&lt;/a&gt;. A run-through kind of tutorial is &lt;a href=&#34;http://sol2.readthedocs.io/en/latest/tutorial/all-the-things.html&#34;&gt;here&lt;/a&gt;! The API documentation goes over most cases (particularly, the &#34;api/usertype&#34; and &#34;api/table_proxy&#34; and &#34;api/function&#34; sections) that should still get you off your feet and going, and there&#39;s an examples directory &lt;a href=&#34;https://github.com/ThePhD/sol2/tree/develop/examples&#34;&gt;here&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h1&gt;&#34;I need X Feature or Fix, Right Now™&#34;&lt;/h1&gt; &#xA;&lt;p&gt;Find the support option that&#39;s right for you, &lt;a href=&#34;https://github.com/ThePhD/.github/raw/main/SUPPORT.md&#34;&gt;here&lt;/a&gt;! If you&#39;re happy to wait, you can just file a boring issue and we&#39;ll get to it Whenever There Is Time™.&lt;/p&gt; &#xA;&lt;h2&gt;I want to donate to help!&lt;/h2&gt; &#xA;&lt;p&gt;You can find &lt;a href=&#34;https://github.com/ThePhD/.github/raw/main/SUPPORT.md#support-in-general&#34;&gt;donation and sponorship options here&lt;/a&gt; and from the little heart button near the top of this repository that will take you to a bevy of links in which you can donate and show support for this project and others!&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://sol2.readthedocs.io/en/latest/benchmarks.html&#34;&gt;Fastest in the land&lt;/a&gt; (see: sol2 bar in graph).&lt;/li&gt; &#xA; &lt;li&gt;Supports retrieval and setting of multiple types including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;std::string&lt;/code&gt;, &lt;code&gt;std::wstring&lt;/code&gt;, &lt;code&gt;std::u16string&lt;/code&gt; and &lt;code&gt;std::u32string&lt;/code&gt; support (and for views).&lt;/li&gt; &#xA;   &lt;li&gt;understands and works with containers such as &lt;code&gt;std::map/unordered_map&lt;/code&gt;, c-style arrays, vectors, non-standard custom containers and more.&lt;/li&gt; &#xA;   &lt;li&gt;user-defined types, with or &lt;strong&gt;without&lt;/strong&gt; registering that type&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;std::unique_ptr&lt;/code&gt;, &lt;code&gt;std::shared_ptr&lt;/code&gt;, and optional support of other pointer types like &lt;code&gt;boost::shared_ptr&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;custom &lt;code&gt;optional&amp;lt;T&amp;gt;&lt;/code&gt; that works with references, and support for the inferior &lt;code&gt;std::optional&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;C++17 support for variants and similar new types.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Lambda, function, and member function bindings are supported.&lt;/li&gt; &#xA; &lt;li&gt;Intermediate type for checking if a variable exists.&lt;/li&gt; &#xA; &lt;li&gt;Simple API that completely abstracts away the C stack API, including &lt;code&gt;protected_function&lt;/code&gt; with the ability to use an error-handling function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;operator[]&lt;/code&gt;-style manipulation of tables&lt;/li&gt; &#xA; &lt;li&gt;C++ type representations in Lua userdata as &lt;code&gt;usertype&lt;/code&gt;s with guaranteed cleanup.&lt;/li&gt; &#xA; &lt;li&gt;Customization points to allow your C++ objects to be pushed and retrieved from Lua as multiple consecutive objects, or anything else you desire!&lt;/li&gt; &#xA; &lt;li&gt;Overloaded function calls: &lt;code&gt;my_function(1); my_function(&#34;Hello&#34;)&lt;/code&gt; in the same Lua script route to different function calls based on parameters&lt;/li&gt; &#xA; &lt;li&gt;Support for tables, nested tables, table iteration with &lt;code&gt;table.for_each&lt;/code&gt; / &lt;code&gt;begin()&lt;/code&gt; and &lt;code&gt;end()&lt;/code&gt; iterators.&lt;/li&gt; &#xA; &lt;li&gt;Zero string overhead for usertype function lookup.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Compilers&lt;/h2&gt; &#xA;&lt;p&gt;sol2 makes use of C++17 features. GCC 7.x.x and Clang 3.9.x (with &lt;code&gt;-std=c++1z&lt;/code&gt; and appropriate standard library) or higher should be able to compile without problems. However, the officially supported and CI-tested compilers are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GCC 7.x.x+ (MinGW 7.x.x+)&lt;/li&gt; &#xA; &lt;li&gt;Clang 3.9.x+&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio 2017 Community (Visual C++ 15.0)+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please make sure you use the &lt;code&gt;-std=c++2a&lt;/code&gt;, &lt;code&gt;-std=c++1z&lt;/code&gt;, &lt;code&gt;-std=c++17&lt;/code&gt; or better standard flags (some of these flags are the defaults in later versions of GCC, such as 7+ and better).&lt;/p&gt; &#xA;&lt;p&gt;If you would like support for an older compiler (at the cost of some features), use the latest tagged sol2 branch. If you would like support for an even older compiler, feel free to contact me for a Custom Solution.&lt;/p&gt; &#xA;&lt;p&gt;sol2 is checked by-hand for other platforms as well, including Android-based builds with GCC and iOS-based builds out of XCode with Apple-clang. It should work on both of these platforms, so long as you have the proper standards flags. If something doesn&#39;t work or you need special options, you may need to look into the different ways to support the project to have it done for you!&lt;/p&gt; &#xA;&lt;h2&gt;Creating a single header&lt;/h2&gt; &#xA;&lt;p&gt;You can grab a single header (and the single forward header) out of the library &lt;a href=&#34;https://github.com/ThePhD/sol2/tree/develop/single&#34;&gt;here&lt;/a&gt;. For stable version, check the releases tab on GitHub for a provided single header file for maximum ease of use. A script called &lt;a href=&#34;https://github.com/ThePhD/sol2/raw/develop/single/single.py&#34;&gt;&lt;code&gt;single.py&lt;/code&gt;&lt;/a&gt; is provided in the repository if there&#39;s some bleeding edge change that hasn&#39;t been published on the releases page. You can run this script to create a single file version of the library so you can only include that part of it. Check &lt;code&gt;single.py --help&lt;/code&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;If you use CMake, you can also configure and generate a project that will generate the &lt;code&gt;sol2_single_header&lt;/code&gt; for you. You can also include the project using CMake. Run CMake for more details. Thanks @Nava2, @alkino, @mrgreywater and others for help with making the CMake build a reality.&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;Testing turns on certain CI-only variables in the CMake to test a myriad of configuration options. You can generate the tests by running CMake and configuring &lt;code&gt;SOL2_TESTS&lt;/code&gt;, &lt;code&gt;SOL2_TESTS_SINGLE&lt;/code&gt;, &lt;code&gt;SOL2_TESTS_EXAMPLES&lt;/code&gt;, and &lt;code&gt;SOL2_EXAMPLES&lt;/code&gt; to be on. Make sure &lt;code&gt;SOL2_SINGLE&lt;/code&gt; is also on.&lt;/p&gt; &#xA;&lt;p&gt;You will need any flavor of python3 and an available compiler. The testing suite will build its own version of Lua and LuaJIT, so you do not have to provide one (you may provide one with the &lt;code&gt;LUA_LOCAL_DIR&lt;/code&gt; variable).&lt;/p&gt; &#xA;&lt;h1&gt;Presentations&lt;/h1&gt; &#xA;&lt;p&gt;&#34;A Sun For the Moon - A Zero-Overhead Lua Abstraction using C++&#34;&lt;br&gt; ThePhD Lua Workshop 2016 - Mashape, San Francisco, CA&lt;br&gt; &lt;a href=&#34;https://github.com/ThePhD/sol2/raw/develop/docs/presentations/2016.10.14%20-%20ThePhD%20-%20No%20Overhead%20C%20Abstraction.pdf&#34;&gt;Deck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#34;Wrapping Lua C in C++ - Efficiently, Nicely, and with a Touch of Magic&#34;&lt;br&gt; ThePhD Boston C++ Meetup November 2017 - CiC (Milk Street), Boston, MA&lt;br&gt; &lt;a href=&#34;https://github.com/ThePhD/sol2/raw/develop/docs/presentations/2017.11.08%20-%20ThePhD%20-%20Wrapping%20Lua%20C%20in%20C%2B%2B.pdf&#34;&gt;Deck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#34;Biting the CMake Bullet&#34;&lt;br&gt; ThePhD Boston C++ Meetup February 2018 - CiC (Main Street), Cambridge, MA&lt;br&gt; &lt;a href=&#34;https://github.com/ThePhD/sol2/raw/develop/docs/presentations/2018.02.06%20-%20ThePhD%20-%20Biting%20the%20CMake%20Bullet.pdf&#34;&gt;Deck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#34;Compile Fast, Run Faster, Scale Forever: A look into the sol2 Library&#34;&lt;br&gt; ThePhD C++Now 2018 - Hudson Commons, Aspen Physics Center, Aspen, Colorado&lt;br&gt; &lt;a href=&#34;https://github.com/ThePhD/sol2/raw/develop/docs/presentations/2018.05.10%20-%20ThePhD%20-%20Compile%20Fast%2C%20Run%20Faster%2C%20Scale%20Forever.pdf&#34;&gt;Deck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#34;Scripting at the Speed of Thought: Using Lua in C++ with sol2&#34;&lt;br&gt; ThePhD CppCon 2018 - 404 Keystone, Meydenbauer Center, Aspen, Colorado&lt;br&gt; &lt;a href=&#34;https://github.com/ThePhD/sol2/raw/develop/docs/presentations/2018.09.28%20-%20ThePhD%20-%20Scripting%20at%20the%20Speed%20of%20Thought.pdf&#34;&gt;Deck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#34;The Plan for Tomorrow: Compile-Time Extension Points in C++&#34; ThePhD C++Now 2019 - Flug Auditorium, Aspen Physics Center, Aspen, Colorado &lt;a href=&#34;https://github.com/ThePhD/sol2/raw/develop/docs/presentations/2019.05.10%20-%20ThePhD%20-%20The%20Plan%20for%20Tomorrow%20-%20Compile-Time%20Extension%20Points%20in%20C%2b%2b.pdf&#34;&gt;Deck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;sol2 is distributed with an MIT License. You can see LICENSE.txt for more info.&lt;/p&gt; &#xA;&lt;p&gt;If you need a custom solution, &lt;a href=&#34;https://soasis.org/contact/opensource/&#34;&gt;feel free to reach out&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tzapu/WiFiManager</title>
    <updated>2024-04-07T01:50:10Z</updated>
    <id>tag:github.com,2024-04-07:/tzapu/WiFiManager</id>
    <link href="https://github.com/tzapu/WiFiManager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ESP8266 WiFi Connection manager with web captive portal&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WiFiManager&lt;/h1&gt; &#xA;&lt;p&gt;Espressif ESPx WiFi Connection manager with fallback web configuration portal&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; This Documentation is out of date, see notes below&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#release&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/tzapu/WiFiManager?include_prereleases&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tzapu/WiFiManager/actions/workflows/compile_library.yml&#34;&gt;&lt;img src=&#34;https://github.com/tzapu/WiFiManager/actions/workflows/compile_library.yml/badge.svg?sanitize=true&#34; alt=&#34;Build CI Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tzapu/WiFiManager/actions/workflows/compile_examples.yaml&#34;&gt;&lt;img src=&#34;https://github.com/tzapu/WiFiManager/actions/workflows/compile_examples.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build CI Status Examples&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.ardu-badge.com/WiFiManager&#34;&gt;&lt;img src=&#34;https://www.ardu-badge.com/badge/WiFiManager.svg?&#34; alt=&#34;arduino-library-badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platformio.org/lib/show/567/WiFiManager/installation&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PlatformIO-Library-orange?&#34; alt=&#34;Build with PlatformIO&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.espressif.com/en/products/socs/esp8266&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ESP-8266-000000.svg?longCache=true&amp;amp;style=flat&amp;amp;colorA=CC101F&#34; alt=&#34;ESP8266&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.espressif.com/en/products/socs/esp32&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ESP-32-000000.svg?longCache=true&amp;amp;style=flat&amp;amp;colorA=CC101F&#34; alt=&#34;ESP32&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.espressif.com/en/products/socs/esp32-s2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ESP-32S2-000000.svg?longCache=true&amp;amp;style=flat&amp;amp;colorA=CC101F&#34; alt=&#34;ESP32&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.espressif.com/en/products/socs/esp32-c3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ESP-32C3-000000.svg?longCache=true&amp;amp;style=flat&amp;amp;colorA=CC101F&#34; alt=&#34;ESP32&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.espressif.com/en/products/socs/esp32-S3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ESP-32S3-000000.svg?longCache=true&amp;amp;style=flat&amp;amp;colorA=CC101F&#34; alt=&#34;ESP32&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Member to Member Support / Chat&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/tablatronix/WiFiManager?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/tablatronix/WiFiManager.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/tablatronix/WiFiManager&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/nS5WGkaQH5&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-WiFiManager-%237289da.svg?logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; The configuration portal is of the captive variety, so on various devices it will present the configuration dialogue as soon as you connect to the created access point.&lt;/p&gt; &#xA;&lt;p&gt;Works with the &lt;a href=&#34;https://github.com/esp8266/Arduino&#34;&gt;ESP8266 Arduino&lt;/a&gt; and &lt;a href=&#34;https://github.com/espressif/arduino-esp32&#34;&gt;ESP32 Arduino&lt;/a&gt; platforms.&lt;/p&gt; &#xA;&lt;h3&gt;Known Issues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation needs to be updated, see &lt;a href=&#34;https://github.com/tzapu/WiFiManager/issues/500&#34;&gt;https://github.com/tzapu/WiFiManager/issues/500&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#how-it-works&#34;&gt;How it works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#wishlist&#34;&gt;Wishlist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#quick-start&#34;&gt;Quick start&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Installing &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#install-through-library-manager&#34;&gt;Arduino - Through Library Manager&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#checkout-from-github&#34;&gt;Arduino - From Github&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#install-using-platformio&#34;&gt;PlatformIO&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#using&#34;&gt;Using&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#password-protect-the-configuration-access-point&#34;&gt;Access Point Password&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#callbacks&#34;&gt;Callbacks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#configuration-portal-timeout&#34;&gt;Configuration Portal Timeout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#on-demand-configuration-portal&#34;&gt;On Demand Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#custom-parameters&#34;&gt;Custom Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#custom-ip-configuration&#34;&gt;Custom IP Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#filter-networks&#34;&gt;Filter Low Quality Networks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#debug&#34;&gt;Debug Output&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#contributions-and-thanks&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When your ESP starts up, it sets it up in Station mode and tries to connect to a previously saved Access Point&lt;/li&gt; &#xA; &lt;li&gt;if this is unsuccessful (or no previous network saved) it moves the ESP into Access Point mode and spins up a DNS and WebServer (default ip 192.168.4.1)&lt;/li&gt; &#xA; &lt;li&gt;using any wifi enabled device with a browser (computer, phone, tablet) connect to the newly created Access Point&lt;/li&gt; &#xA; &lt;li&gt;because of the Captive Portal and the DNS server you will either get a &#39;Join to network&#39; type of popup or get any domain you try to access redirected to the configuration portal&lt;/li&gt; &#xA; &lt;li&gt;choose one of the access points scanned, enter password, click save&lt;/li&gt; &#xA; &lt;li&gt;ESP will try to connect. If successful, it relinquishes control back to your app. If not, reconnect to AP and reconfigure.&lt;/li&gt; &#xA; &lt;li&gt;There are options to change this behavior or manually start the configportal and webportal independantly as well as run them in non blocking mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How It Looks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/YPvW9eql.png&#34; alt=&#34;ESP8266 WiFi Captive Portal Homepage&#34;&gt; &lt;img src=&#34;http://i.imgur.com/oicWJ4gl.png&#34; alt=&#34;ESP8266 WiFi Captive Portal Configuration&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Wishlist&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; remove dependency on EEPROM library&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; move HTML Strings to PROGMEM&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cleanup and streamline code (although this is ongoing)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; if timeout is set, extend it when a page is fetched in AP mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add ability to configure more parameters than ssid/password&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; maybe allow setting ip of ESP after reboot&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add to Arduino Library Manager&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add to PlatformIO&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; add multiple sets of network credentials&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; allow users to customize CSS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; rewrite documentation for simplicity, based on scenarios/goals&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ESP32 support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; rely on the SDK&#39;s built in auto connect more than forcing a connect&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add non blocking mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; easy customization of strings&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; hostname support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; fix various bugs and workarounds for esp SDK issues&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; additional info page items&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; last status display / faiilure reason&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; customizeable menu&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; seperate custom params page&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ondemand webportal&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; complete refactor of code to segment functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; wiif scan icons or percentage display&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; invert class for dark mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; more template tokens&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; progmem for all strings&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; new callbacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; new callouts / filters&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; shared web server instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; latest esp idf/sdk support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; wm is now non persistent, will not erase or change stored esp config on esp8266&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; tons of debugging output / levels&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; disable captiveportal&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; preload wiifscans, faster page loads&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; softap stability fixes when sta is not connected&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;You can either install through the Arduino Library Manager or checkout the latest changes or a release from github&lt;/p&gt; &#xA;&lt;h4&gt;Install through Library Manager&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Currently version 0.8+ works with release 2.4.0 or newer of the &lt;a href=&#34;https://github.com/esp8266/Arduino&#34;&gt;ESP8266 core for Arduino&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;in Arduino IDE got to Sketch/Include Library/Manage Libraries &lt;img src=&#34;http://i.imgur.com/9BkEBkR.png&#34; alt=&#34;Manage Libraries&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;search for WiFiManager &lt;img src=&#34;http://i.imgur.com/18yIai8.png&#34; alt=&#34;WiFiManager package&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;click Install and start &lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#using&#34;&gt;using it&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Checkout from github&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Github version works with release 2.4.0 or newer of the &lt;a href=&#34;https://github.com/esp8266/Arduino&#34;&gt;ESP8266 core for Arduino&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Checkout library to your Arduino libraries folder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Include in your sketch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;WiFiManager.h&amp;gt;          //https://github.com/tzapu/WiFiManager WiFi Configuration Magic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initialize library, in your setup function add, NOTEif you are using non blocking you will make sure you create this in global scope or handle appropriatly , it will not work if in setup and using non blocking mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;WiFiManager wifiManager;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Also in the setup function add&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//first parameter is name of access point, second is the password&#xA;wifiManager.autoConnect(&#34;AP-NAME&#34;, &#34;AP-PASSWORD&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you just want an unsecured access point&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.autoConnect(&#34;AP-NAME&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you want to use and auto generated name from &#39;ESP&#39; and the esp&#39;s Chip ID use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.autoConnect();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you write your sketch and start the ESP, it will try to connect to WiFi. If it fails it starts in Access Point mode. While in AP mode, connect to it then open a browser to the gateway IP, default 192.168.4.1, configure wifi, save and it should reboot and connect.&lt;/p&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://github.com/tzapu/WiFiManager/tree/master/examples&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Install Using PlatformIO&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platformio.org/&#34;&gt;PlatformIO&lt;/a&gt; is an emerging ecosystem for IoT development, and is an alternative to using the Arduino IDE. Install &lt;code&gt;WiFiManager&lt;/code&gt; using the platformio &lt;a href=&#34;https://docs.platformio.org/en/latest/librarymanager/index.html#librarymanager&#34;&gt;library manager&lt;/a&gt; in your editor, or using the &lt;a href=&#34;https://docs.platformio.org/en/latest/core/index.html&#34;&gt;PlatformIO Core CLI&lt;/a&gt;, or by adding it to your &lt;code&gt;platformio.ini&lt;/code&gt; as shown below (recommended approach).&lt;/p&gt; &#xA;&lt;p&gt;The simplest way is to open the &lt;code&gt;platformio.ini&lt;/code&gt; file at the root of your project, and &lt;code&gt;WifiManager&lt;/code&gt; to the common top-level env &lt;code&gt;lib_deps&lt;/code&gt; key like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[env]&#xA;lib_deps =&#xA;&#x9;WiFiManager&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;[env]&#xA;lib_deps =&#xA;&#x9;https://github.com/tzapu/WiFiManager.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h4&gt;Password protect the configuration Access Point&lt;/h4&gt; &#xA;&lt;p&gt;You can and should password protect the configuration access point. Simply add the password as a second parameter to &lt;code&gt;autoConnect&lt;/code&gt;. A short password seems to have unpredictable results so use one that&#39;s around 8 characters or more in length. The guidelines are that a wifi password must consist of 8 to 63 ASCII-encoded characters in the range of 32 to 126 (decimal)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.autoConnect(&#34;AutoConnectAP&#34;, &#34;password&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Callbacks&lt;/h4&gt; &#xA;&lt;h5&gt;Enter Config mode&lt;/h5&gt; &#xA;&lt;p&gt;Use this if you need to do something when your device enters configuration mode on failed WiFi connection attempt. Before &lt;code&gt;autoConnect()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setAPCallback(configModeCallback);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;configModeCallback&lt;/code&gt; declaration and example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void configModeCallback (WiFiManager *myWiFiManager) {&#xA;  Serial.println(&#34;Entered config mode&#34;);&#xA;  Serial.println(WiFi.softAPIP());&#xA;&#xA;  Serial.println(myWiFiManager-&amp;gt;getConfigPortalSSID());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Save settings&lt;/h5&gt; &#xA;&lt;p&gt;This gets called when custom parameters have been set &lt;strong&gt;AND&lt;/strong&gt; a connection has been established. Use it to set a flag, so when all the configuration finishes, you can save the extra parameters somewhere.&lt;/p&gt; &#xA;&lt;p&gt;IF YOU NEED TO SAVE PARAMETERS EVEN ON WIFI FAIL OR EMPTY, you must set &lt;code&gt;setBreakAfterConfig&lt;/code&gt; to true, or else saveConfigCallback will not be called.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//if this is set, it will exit after config, even if connection is unsuccessful.&#xA;    void          setBreakAfterConfig(boolean shouldBreak);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/tzapu/WiFiManager/tree/master/examples/Parameters/SPIFFS/AutoConnectWithFSParameters&#34;&gt;AutoConnectWithFSParameters Example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setSaveConfigCallback(saveConfigCallback);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;saveConfigCallback&lt;/code&gt; declaration and example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//flag for saving data&#xA;bool shouldSaveConfig = false;&#xA;&#xA;//callback notifying us of the need to save config&#xA;void saveConfigCallback () {&#xA;  Serial.println(&#34;Should save config&#34;);&#xA;  shouldSaveConfig = true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuration Portal Timeout&lt;/h4&gt; &#xA;&lt;p&gt;If you need to set a timeout so the ESP doesn&#39;t hang waiting to be configured, for instance after a power failure, you can add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setConfigPortalTimeout(180);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will wait 3 minutes (180 seconds). When the time passes, the autoConnect function will return, no matter the outcome. Check for connection and if it&#39;s still not established do whatever is needed (on some modules I restart them to retry, on others I enter deep sleep)&lt;/p&gt; &#xA;&lt;h4&gt;On Demand Configuration Portal&lt;/h4&gt; &#xA;&lt;p&gt;If you would rather start the configuration portal on demand rather than automatically on a failed connection attempt, then this is for you.&lt;/p&gt; &#xA;&lt;p&gt;Instead of calling &lt;code&gt;autoConnect()&lt;/code&gt; which does all the connecting and failover configuration portal setup for you, you need to use &lt;code&gt;startConfigPortal()&lt;/code&gt;. &lt;strong&gt;Do not use BOTH.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example usage&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void loop() {&#xA;  // is configuration portal requested?&#xA;  if ( digitalRead(TRIGGER_PIN) == LOW ) {&#xA;    WiFiManager wifiManager;&#xA;    wifiManager.startConfigPortal(&#34;OnDemandAP&#34;);&#xA;    Serial.println(&#34;connected...yeey :)&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See example for a more complex version. &lt;a href=&#34;https://github.com/tzapu/WiFiManager/tree/master/examples/OnDemand/OnDemandConfigPortal&#34;&gt;OnDemandConfigPortal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Exiting from the Configuration Portal&lt;/h4&gt; &#xA;&lt;p&gt;Normally, once entered, the configuration portal will continue to loop until WiFi credentials have been successfully entered or a timeout is reached. If you&#39;d prefer to exit without joining a WiFi network, say becuase you&#39;re going to put the ESP into AP mode, then press the &#34;Exit&#34; button on the main webpage. If started via &lt;code&gt;autoConnect&lt;/code&gt; or &lt;code&gt;startConfigPortal&lt;/code&gt; then it will return &lt;code&gt;false (portalAbortResult)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Custom Parameters&lt;/h4&gt; &#xA;&lt;p&gt;You can use WiFiManager to collect more parameters than just SSID and password. This could be helpful for configuring stuff like MQTT host and port, &lt;a href=&#34;http://www.blynk.cc&#34;&gt;blynk&lt;/a&gt; or &lt;a href=&#34;http://emoncms.org&#34;&gt;emoncms&lt;/a&gt; tokens, just to name a few. &lt;strong&gt;You are responsible for saving and loading these custom values.&lt;/strong&gt; The library just collects and displays the data for you as a convenience. Usage scenario would be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;load values from somewhere (EEPROM/FS) or generate some defaults&lt;/li&gt; &#xA; &lt;li&gt;add the custom parameters to WiFiManager using&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt; // id/name, placeholder/prompt, default, length&#xA; WiFiManagerParameter custom_mqtt_server(&#34;server&#34;, &#34;mqtt server&#34;, mqtt_server, 40);&#xA; wifiManager.addParameter(&amp;amp;custom_mqtt_server);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if connection to AP fails, configuration portal starts and you can set /change the values (or use on demand configuration portal)&lt;/li&gt; &#xA; &lt;li&gt;once configuration is done and connection is established save config callback() is called&lt;/li&gt; &#xA; &lt;li&gt;once WiFiManager returns control to your application, read and save the new values using the &lt;code&gt;WiFiManagerParameter&lt;/code&gt; object.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt; mqtt_server = custom_mqtt_server.getValue();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature is a lot more involved than all the others, so here are some examples to fully show how it is done. You should also take a look at adding custom HTML to your form.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Save and load custom parameters to file system in json form &lt;a href=&#34;https://github.com/tzapu/WiFiManager/tree/master/examples/Parameters/SPIFFS/AutoConnectWithFSParameters&#34;&gt;AutoConnectWithFSParameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Save and load custom parameters to EEPROM&lt;/em&gt; (not done yet)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom IP Configuration&lt;/h4&gt; &#xA;&lt;p&gt;You can set a custom IP for both AP (access point, config mode) and STA (station mode, client mode, normal project state)&lt;/p&gt; &#xA;&lt;h5&gt;Custom Access Point IP Configuration&lt;/h5&gt; &#xA;&lt;p&gt;This will set your captive portal to a specific IP should you need/want such a feature. Add the following snippet before &lt;code&gt;autoConnect()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//set custom ip for portal&#xA;wifiManager.setAPStaticIPConfig(IPAddress(10,0,1,1), IPAddress(10,0,1,1), IPAddress(255,255,255,0));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Custom Station (client) Static IP Configuration&lt;/h5&gt; &#xA;&lt;p&gt;This will make use the specified IP configuration instead of using DHCP in station mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setSTAStaticIPConfig(IPAddress(192,168,0,99), IPAddress(192,168,0,1), IPAddress(255,255,255,0)); // optional DNS 4th argument&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a couple of examples in the examples folder that show you how to set a static IP and even how to configure it through the web configuration portal.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: You should fill DNS server if you have HTTP requests with hostnames or syncronize time (NTP). It&#39;s the same as gateway ip or a popular (Google DNS: 8.8.8.8).&lt;/p&gt; &#xA;&lt;h4&gt;Custom HTML, CSS, Javascript&lt;/h4&gt; &#xA;&lt;p&gt;There are various ways in which you can inject custom HTML, CSS or Javascript into the configuration portal. The options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;inject custom head element You can use this to any html bit to the head of the configuration portal. If you add a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element, bare in mind it overwrites the included css, not replaces.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setCustomHeadElement(&#34;&amp;lt;style&amp;gt;html{filter: invert(100%); -webkit-filter: invert(100%);}&amp;lt;/style&amp;gt;&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;inject a custom bit of html in the configuration/param form&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;WiFiManagerParameter custom_text(&#34;&amp;lt;p&amp;gt;This is just a text paragraph&amp;lt;/p&amp;gt;&#34;);&#xA;wifiManager.addParameter(&amp;amp;custom_text);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;inject a custom bit of html in a configuration form element Just add the bit you want added as the last parameter to the custom parameter constructor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;WiFiManagerParameter custom_mqtt_server(&#34;server&#34;, &#34;mqtt server&#34;, &#34;iot.eclipse&#34;, 40, &#34; readonly&#34;);&#xA;wifiManager.addParameter(&amp;amp;custom_mqtt_server);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Theming&lt;/h4&gt; &#xA;&lt;p&gt;You can customize certain elements of the default template with some builtin classes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-CPP&#34;&gt;wifiManager.setClass(&#34;invert&#34;); // dark theme&#xA;wifiManager.setScanDispPerc(true); // display percentages instead of graphs for RSSI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are additional classes in the css you can use in your custom html , see the example template.&lt;/p&gt; &#xA;&lt;h4&gt;Filter Networks&lt;/h4&gt; &#xA;&lt;p&gt;You can filter networks based on signal quality and show/hide duplicate networks.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you would like to filter low signal quality networks you can tell WiFiManager to not show networks below an arbitrary quality %;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setMinimumSignalQuality(10);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will not show networks under 10% signal quality. If you omit the parameter it defaults to 8%;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can also remove or show duplicate networks (default is remove). Use this function to show (or hide) all networks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setRemoveDuplicateAPs(false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debug&lt;/h4&gt; &#xA;&lt;p&gt;Debug is enabled by default on &lt;code&gt;Serial&lt;/code&gt; in non-stable releases. To disable add before autoConnect/startConfigPortal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setDebugOutput(false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass in a custom stream via constructor&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-CPP&#34;&gt;WiFiManager wifiManager(Serial1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can customize the debug level by changing &lt;code&gt;_debugLevel&lt;/code&gt; in source options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DEBUG_ERROR&lt;/li&gt; &#xA; &lt;li&gt;DEBUG_NOTIFY&lt;/li&gt; &#xA; &lt;li&gt;DEBUG_VERBOSE&lt;/li&gt; &#xA; &lt;li&gt;DEBUG_DEV&lt;/li&gt; &#xA; &lt;li&gt;DEBUG_MAX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you get compilation errors, more often than not, you may need to install a newer version of the ESP8266 core for Arduino.&lt;/p&gt; &#xA;&lt;p&gt;Changes added on 0.8 should make the latest trunk work without compilation errors. Tested down to ESP8266 core 2.0.0. &lt;strong&gt;Please update to version 0.8&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;I am trying to keep releases working with release versions of the core, so they can be installed through boards manager, but if you checkout the latest version directly from github, sometimes, the library will only work if you update the ESP8266 core to the latest version because I am using some newly added function.&lt;/p&gt; &#xA;&lt;p&gt;If you connect to the created configuration Access Point but the configuration portal does not show up, just open a browser and type in the IP of the web portal, by default &lt;code&gt;192.168.4.1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If trying to connect ends up in an endless loop, try to add &lt;code&gt;setConnectTimeout(60)&lt;/code&gt; before &lt;code&gt;autoConnect();&lt;/code&gt;. The parameter is timeout to try connecting in seconds.&lt;/p&gt; &#xA;&lt;p&gt;I get stuck in ap mode when the power goes out or modem resets, try a setConfigPortalTimeout(seconds). This will cause the configportal to close after no activity, and you can reboot or attempt reconnection in your code.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;h3&gt;1.0.1&lt;/h3&gt; &#xA;&lt;h3&gt;Development Overview&lt;/h3&gt; &#xA;&lt;h4&gt;Added Public Methods&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;setConfigPortalBlocking&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setShowStaticFields&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setCaptivePortalEnable&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setRestorePersistent&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setCaptivePortalClientCheck&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setWebPortalClientCheck&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;startWebPortal&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;stopWebPortal&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;process&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;disconnect&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt; debugSoftAPConfig&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt; debugPlatformInfo&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setScanDispPerc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setHostname&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setMenu(menu_page_t[])&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setWiFiAutoReconnect&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt; setSTAStaticIPConfig(..,dns)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setShowDnsFields&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getLastConxResult&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getWLStatusString&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getModeString&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getWiFiIsSaved&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setShowInfoErase&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setEnableConfigPortal&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setCountry&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setClass&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;htmleEtities&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;WiFiManagerParameter&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;WiFiManagerParameter(id,label)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;WiFiManagerParameter.setValue(value,length)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getParameters&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getParametersCount&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Constructors&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;WiFiManager(Stream&amp;amp; consolePort)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;define flags&lt;/h4&gt; &#xA;&lt;p&gt;❗️ &lt;strong&gt;Defines cannot be set in user sketches&lt;/strong&gt; &lt;code&gt;#define WM_MDNS // use MDNS&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#define WM_FIXERASECONFIG // use erase flash fix, esp8266 2.4.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#define WM_ERASE_NVS // esp32 erase(true) will erase NVS&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#include &amp;lt;rom/rtc.h&amp;gt; // esp32 info page will show last reset reasons if this file is included&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Changes Overview&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ESP32 support ( fairly stable )&lt;/li&gt; &#xA; &lt;li&gt;complete refactor of strings &lt;code&gt;strings_en.h&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;adds new tokens for wifiscan, and some classes (left , invert icons, MSG color)&lt;/li&gt; &#xA; &lt;li&gt;adds status callout panel default, primary, special colors&lt;/li&gt; &#xA; &lt;li&gt;adds tons of info on info page, and erase capability&lt;/li&gt; &#xA; &lt;li&gt;adds signal icons, replaces percentage ( has hover titles )&lt;/li&gt; &#xA; &lt;li&gt;adds labels to all inputs (replaces placeholders)&lt;/li&gt; &#xA; &lt;li&gt;all html ( and eventually all strings except debug) moved to &lt;code&gt;strings_en.h&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;added additional debugging, compressed debug lines, debuglevels&lt;/li&gt; &#xA; &lt;li&gt;persistent disabled, and restored via de/con-stuctor (uses &lt;code&gt;setRestorePersistent&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;should retain all user modes including AP, should not overwrite or persist user modes or configs,even STA (&lt;code&gt;storeSTAmode&lt;/code&gt;) (BUGGY)&lt;/li&gt; &#xA; &lt;li&gt;⚠️ return values may have changed depending on portal abort, or timeout ( &lt;code&gt;portalTimeoutResult&lt;/code&gt;,&lt;code&gt;portalAbortResult&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;params memory is auto allocated by increment of &lt;code&gt;WIFI_MANAGER_MAX_PARAMS(5)&lt;/code&gt; when exceeded, user no longer needs to specify this at all.&lt;/li&gt; &#xA; &lt;li&gt;addparameter now returns bool, and it returns false if param ID is not alphanum [0-9,A-Z,a-z,_]&lt;/li&gt; &#xA; &lt;li&gt;param field ids allow {I} token to use param_n instead of string in case someones wants to change this due to i18n or character issues&lt;/li&gt; &#xA; &lt;li&gt;provides &lt;code&gt;#DEFINE FIXERASECONFIG&lt;/code&gt; to help deal with &lt;a href=&#34;https://github.com/esp8266/Arduino/pull/3635&#34;&gt;https://github.com/esp8266/Arduino/pull/3635&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;failure reason reporting on portal&lt;/li&gt; &#xA; &lt;li&gt;set esp8266 sta hostname, esp32 sta+ap hostname ( DHCP client id)&lt;/li&gt; &#xA; &lt;li&gt;pass in debug stream in constructor WiFiManager(Stream&amp;amp; consolePort)&lt;/li&gt; &#xA; &lt;li&gt;you can force ip fields off with showxfields(false) if you set _disableIpFields=true&lt;/li&gt; &#xA; &lt;li&gt;param menu/page (setup) added to separate params from wifi page, handled automatically by setMenu&lt;/li&gt; &#xA; &lt;li&gt;set custom root menu&lt;/li&gt; &#xA; &lt;li&gt;disable configportal on autoconnect&lt;/li&gt; &#xA; &lt;li&gt;wm parameters init is now protected, allowing child classes, example included&lt;/li&gt; &#xA; &lt;li&gt;wifiscans are precached and async for faster page loads, refresh forces rescan&lt;/li&gt; &#xA; &lt;li&gt;adds esp32 gettemperature ( currently commented out, useful for relative measurement only )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;0.12&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;removed 204 header response&lt;/li&gt; &#xA; &lt;li&gt;fixed incompatibility with other libs using isnan and other std:: functions without namespace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;0.11&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a lot more reliable reconnecting to networks&lt;/li&gt; &#xA; &lt;li&gt;custom html in custom parameters (for read only params)&lt;/li&gt; &#xA; &lt;li&gt;custom html in custom parameter form (like labels)&lt;/li&gt; &#xA; &lt;li&gt;custom head element (like custom css)&lt;/li&gt; &#xA; &lt;li&gt;sort networks based on signal quality&lt;/li&gt; &#xA; &lt;li&gt;remove duplicate networks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;0.10&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;some css changes&lt;/li&gt; &#xA; &lt;li&gt;bug fixes and speed improvements&lt;/li&gt; &#xA; &lt;li&gt;added an alternative to waitForConnectResult() for debugging&lt;/li&gt; &#xA; &lt;li&gt;changed &lt;code&gt;setTimeout(seconds)&lt;/code&gt; to &lt;code&gt;setConfigPortalTimeout(seconds)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributions and thanks&lt;/h3&gt; &#xA;&lt;p&gt;The support and help I got from the community has been nothing short of phenomenal. I can&#39;t thank you guys enough. This is my first real attept in developing open source stuff and I must say, now I understand why people are so dedicated to it, it is because of all the wonderful people involved.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;THANK YOU&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The esp8266 and esp32 arduino and idf maintainers!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tablatronix&#34;&gt;Shawn A aka tablatronix&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/liebman&#34;&gt;liebman&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dontsovcmc&#34;&gt;Evgeny Dontsov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cmarrin&#34;&gt;Chris Marrin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bbx10&#34;&gt;bbx10&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kentaylor&#34;&gt;kentaylor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/domonetic&#34;&gt;Maximiliano Duarte&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alltheblinkythings&#34;&gt;alltheblinkythings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/niklaswall&#34;&gt;Niklas Wall&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zaporylie&#34;&gt;Jakub Piasecki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alwynallan&#34;&gt;Peter Allan&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/j0hnlittle&#34;&gt;John Little&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/markaswift&#34;&gt;markaswift&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/franklinvv&#34;&gt;franklinvv&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/riccibitti&#34;&gt;Alberto Ricci Bitti&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SebiPanther&#34;&gt;SebiPanther&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jonathanendersby&#34;&gt;jonathanendersby&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/walthercarsten&#34;&gt;walthercarsten&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And countless others&lt;/p&gt; &#xA;&lt;h4&gt;Inspiration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.esp8266.com/viewtopic.php?f=29&amp;amp;t=2520&#34;&gt;http://www.esp8266.com/viewtopic.php?f=29&amp;amp;t=2520&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chriscook8/esp-arduino-apboot&#34;&gt;https://github.com/chriscook8/esp-arduino-apboot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/esp8266/Arduino/tree/master/libraries/DNSServer/examples/CaptivePortalAdvanced&#34;&gt;https://github.com/esp8266/Arduino/tree/master/libraries/DNSServer/examples/CaptivePortalAdvanced&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Built by AlexT &lt;a href=&#34;https://github.com/tzapu&#34;&gt;https://github.com/tzapu&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Neargye/magic_enum</title>
    <updated>2024-04-07T01:50:10Z</updated>
    <id>tag:github.com,2024-04-07:/Neargye/magic_enum</id>
    <link href="https://github.com/Neargye/magic_enum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Static reflection for enums (to string, from string, iteration) for modern C++, work with any enum type without any macro or boilerplate code&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Neargye/magic_enum/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Neargye/magic_enum.svg?sanitize=true&#34; alt=&#34;Github releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://conan.io/center/recipes/magic_enum&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Conan-package-blueviolet&#34; alt=&#34;Conan package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/vcpkg/tree/master/ports/magic-enum&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Vcpkg-package-blueviolet&#34; alt=&#34;Vcpkg package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.cppget.org/magic_enum?q=magic_enum&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Build2-package-blueviolet&#34; alt=&#34;Build2 package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mesonbuild/wrapdb/raw/master/subprojects/magic_enum.wrap&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Meson-wrap-blueviolet&#34; alt=&#34;Meson wrap&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Neargye/magic_enum.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godbolt.org/z/feqcPa5G6&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/compiler_explorer-online-blue.svg?sanitize=true&#34; alt=&#34;Compiler explorer&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://securityscorecards.dev/viewer/?uri=github.com/Neargye/magic_enum&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/Neargye/magic_enum/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stand-with-ukraine.pp.ua&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg?sanitize=true&#34; alt=&#34;Stand With Ukraine&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Magic Enum C++&lt;/h1&gt; &#xA;&lt;p&gt;Header-only C++17 library provides static reflection for enums, work with any enum type without any macro or boilerplate code.&lt;/p&gt; &#xA;&lt;p&gt;If you like this project, please consider donating to one of the funds that help victims of the war in Ukraine: &lt;a href=&#34;https://u24.gov.ua&#34;&gt;https://u24.gov.ua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/doc/reference.md&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/doc/limitations.md&#34;&gt;Limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/#Integration&#34;&gt;Integration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/example/&#34;&gt;Features &amp;amp; Examples&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum value to string&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Color color = Color::RED;&#xA;auto color_name = magic_enum::enum_name(color);&#xA;// color_name -&amp;gt; &#34;RED&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;String to enum value&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::string color_name{&#34;GREEN&#34;};&#xA;auto color = magic_enum::enum_cast&amp;lt;Color&amp;gt;(color_name);&#xA;if (color.has_value()) {&#xA;  // color.value() -&amp;gt; Color::GREEN&#xA;}&#xA;&#xA;// case insensitive enum_cast&#xA;auto color = magic_enum::enum_cast&amp;lt;Color&amp;gt;(value, magic_enum::case_insensitive);&#xA;&#xA;// enum_cast with BinaryPredicate&#xA;auto color = magic_enum::enum_cast&amp;lt;Color&amp;gt;(value, [](char lhs, char rhs) { return std::tolower(lhs) == std::tolower(rhs); }&#xA;&#xA;// enum_cast with default&#xA;auto color_or_default = magic_enum::enum_cast&amp;lt;Color&amp;gt;(value).value_or(Color::NONE);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Integer to enum value&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int color_integer = 2;&#xA;auto color = magic_enum::enum_cast&amp;lt;Color&amp;gt;(color_integer);&#xA;if (color.has_value()) {&#xA;  // color.value() -&amp;gt; Color::BLUE&#xA;}&#xA;&#xA;auto color_or_default = magic_enum::enum_cast&amp;lt;Color&amp;gt;(value).value_or(Color::NONE);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Indexed access to enum value&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::size_t i = 0;&#xA;Color color = magic_enum::enum_value&amp;lt;Color&amp;gt;(i);&#xA;// color -&amp;gt; Color::RED&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum value sequence&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;constexpr auto colors = magic_enum::enum_values&amp;lt;Color&amp;gt;();&#xA;// colors -&amp;gt; {Color::RED, Color::BLUE, Color::GREEN}&#xA;// colors[0] -&amp;gt; Color::RED&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Number of enum elements&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;constexpr std::size_t color_count = magic_enum::enum_count&amp;lt;Color&amp;gt;();&#xA;// color_count -&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum value to integer&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Color color = Color::RED;&#xA;auto color_integer = magic_enum::enum_integer(color); // or magic_enum::enum_underlying(color);&#xA;// color_integer -&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum names sequence&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;constexpr auto color_names = magic_enum::enum_names&amp;lt;Color&amp;gt;();&#xA;// color_names -&amp;gt; {&#34;RED&#34;, &#34;BLUE&#34;, &#34;GREEN&#34;}&#xA;// color_names[0] -&amp;gt; &#34;RED&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum entries sequence&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;constexpr auto color_entries = magic_enum::enum_entries&amp;lt;Color&amp;gt;();&#xA;// color_entries -&amp;gt; {{Color::RED, &#34;RED&#34;}, {Color::BLUE, &#34;BLUE&#34;}, {Color::GREEN, &#34;GREEN&#34;}}&#xA;// color_entries[0].first -&amp;gt; Color::RED&#xA;// color_entries[0].second -&amp;gt; &#34;RED&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum fusion for multi-level switch/case statements&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;switch (magic_enum::enum_fuse(color, direction).value()) {&#xA;  case magic_enum::enum_fuse(Color::RED, Directions::Up).value(): // ...&#xA;  case magic_enum::enum_fuse(Color::BLUE, Directions::Down).value(): // ...&#xA;// ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum switch runtime value as constexpr constant&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Color color = Color::RED;&#xA;magic_enum::enum_switch([] (auto val) {&#xA;  constexpr Color c_color = val;&#xA;  // ...&#xA;}, color);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum iterate for each enum as constexpr constant&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;magic_enum::enum_for_each&amp;lt;Color&amp;gt;([] (auto val) {&#xA;  constexpr Color c_color = val;&#xA;  // ...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check if enum contains&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;magic_enum::enum_contains(Color::GREEN); // -&amp;gt; true&#xA;magic_enum::enum_contains&amp;lt;Color&amp;gt;(2); // -&amp;gt; true&#xA;magic_enum::enum_contains&amp;lt;Color&amp;gt;(123); // -&amp;gt; false&#xA;magic_enum::enum_contains&amp;lt;Color&amp;gt;(&#34;GREEN&#34;); // -&amp;gt; true&#xA;magic_enum::enum_contains&amp;lt;Color&amp;gt;(&#34;fda&#34;); // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum index in sequence&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;constexpr auto color_index = magic_enum::enum_index(Color::BLUE);&#xA;// color_index.value() -&amp;gt; 1&#xA;// color_index.has_value() -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Functions for flags&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;enum Directions : std::uint64_t {&#xA;  Left = 1,&#xA;  Down = 2,&#xA;  Up = 4,&#xA;  Right = 8,&#xA;};&#xA;template &amp;lt;&amp;gt;&#xA;struct magic_enum::customize::enum_range&amp;lt;Directions&amp;gt; {&#xA;  static constexpr bool is_flags = true;&#xA;};&#xA;&#xA;magic_enum::enum_flags_name(Directions::Up | Directions::Right); // -&amp;gt; &#34;Directions::Up|Directions::Right&#34;&#xA;magic_enum::enum_flags_contains(Directions::Up | Directions::Right); // -&amp;gt; true&#xA;magic_enum::enum_flags_cast(3); // -&amp;gt; &#34;Directions::Left|Directions::Down&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enum type name&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Color color = Color::RED;&#xA;auto type_name = magic_enum::enum_type_name&amp;lt;decltype(color)&amp;gt;();&#xA;// type_name -&amp;gt; &#34;Color&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;IOstream operator for enum&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;using magic_enum::iostream_operators::operator&amp;lt;&amp;lt;; // out-of-the-box ostream operators for enums.&#xA;Color color = Color::BLUE;&#xA;std::cout &amp;lt;&amp;lt; color &amp;lt;&amp;lt; std::endl; // &#34;BLUE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;using magic_enum::iostream_operators::operator&amp;gt;&amp;gt;; // out-of-the-box istream operators for enums.&#xA;Color color;&#xA;std::cin &amp;gt;&amp;gt; color;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bitwise operator for enum&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;enum class Flags { A = 1 &amp;lt;&amp;lt; 0, B = 1 &amp;lt;&amp;lt; 1, C = 1 &amp;lt;&amp;lt; 2, D = 1 &amp;lt;&amp;lt; 3 };&#xA;using namespace magic_enum::bitwise_operators; // out-of-the-box bitwise operators for enums.&#xA;// Support operators: ~, |, &amp;amp;, ^, |=, &amp;amp;=, ^=.&#xA;Flags flags = Flags::A | Flags::B &amp;amp; ~Flags::C;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Checks whether type is an &lt;a href=&#34;https://en.cppreference.com/w/cpp/language/enum#Unscoped_enumeration&#34;&gt;Unscoped enumeration&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;enum color { red, green, blue };&#xA;enum class direction { left, right };&#xA;&#xA;magic_enum::is_unscoped_enum&amp;lt;color&amp;gt;::value -&amp;gt; true&#xA;magic_enum::is_unscoped_enum&amp;lt;direction&amp;gt;::value -&amp;gt; false&#xA;magic_enum::is_unscoped_enum&amp;lt;int&amp;gt;::value -&amp;gt; false&#xA;&#xA;// Helper variable template.&#xA;magic_enum::is_unscoped_enum_v&amp;lt;color&amp;gt; -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Checks whether type is an &lt;a href=&#34;https://en.cppreference.com/w/cpp/language/enum#Scoped_enumerations&#34;&gt;Scoped enumeration&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;enum color { red, green, blue };&#xA;enum class direction { left, right };&#xA;&#xA;magic_enum::is_scoped_enum&amp;lt;color&amp;gt;::value -&amp;gt; false&#xA;magic_enum::is_scoped_enum&amp;lt;direction&amp;gt;::value -&amp;gt; true&#xA;magic_enum::is_scoped_enum&amp;lt;int&amp;gt;::value -&amp;gt; false&#xA;&#xA;// Helper variable template.&#xA;magic_enum::is_scoped_enum_v&amp;lt;direction&amp;gt; -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Static storage enum variable to string This version is much lighter on the compile times and is not restricted to the enum_range &lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/doc/limitations.md&#34;&gt;limitation&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;constexpr Color color = Color::BLUE;&#xA;constexpr auto color_name = magic_enum::enum_name&amp;lt;color&amp;gt;();&#xA;// color_name -&amp;gt; &#34;BLUE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;containers::array&lt;/code&gt; array container for enums.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;magic_enum::containers::array&amp;lt;Color, RGB&amp;gt; color_rgb_array {};&#xA;color_rgb_array[Color::RED] = {255, 0, 0};&#xA;color_rgb_array[Color::GREEN] = {0, 255, 0};&#xA;color_rgb_array[Color::BLUE] = {0, 0, 255};&#xA;magic_enum::containers::get&amp;lt;Color::BLUE&amp;gt;(color_rgb_array) // -&amp;gt; RGB{0, 0, 255}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;containers::bitset&lt;/code&gt; bitset container for enums.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;constexpr magic_enum::containers::bitset&amp;lt;Color&amp;gt; color_bitset_red_green {Color::RED|Color::GREEN};&#xA;bool all = color_bitset_red_green.all();&#xA;// all -&amp;gt; false&#xA;// Color::BLUE is missing&#xA;bool test = color_bitset_red_green.test(Color::RED);&#xA;// test -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;containers::set&lt;/code&gt; set container for enums.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto color_set = magic_enum::containers::set&amp;lt;Color&amp;gt;();&#xA;bool empty = color_set.empty();&#xA;// empty -&amp;gt; true&#xA;color_set.insert(Color::GREEN);&#xA;color_set.insert(Color::BLUE);&#xA;color_set.insert(Color::RED);&#xA;std::size_t size = color_set.size();&#xA;// size -&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Improved UB-free &#34;SFINAE-friendly&#34; &lt;a href=&#34;https://en.cppreference.com/w/cpp/types/underlying_type&#34;&gt;underlying_type&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;magic_enum::underlying_type&amp;lt;color&amp;gt;::type -&amp;gt; int&#xA;&#xA;// Helper types.&#xA;magic_enum::underlying_type_t&amp;lt;Direction&amp;gt; -&amp;gt; int&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Remarks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;magic_enum&lt;/code&gt; does not pretend to be a silver bullet for reflection for enums, it was originally designed for small enum.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Before use, read the &lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/doc/limitations.md&#34;&gt;limitations&lt;/a&gt; of functionality.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You should add the required file &lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/include/magic_enum.hpp&#34;&gt;magic_enum.hpp&lt;/a&gt;, and optionally other headers from &lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/include/&#34;&gt;include dir&lt;/a&gt; or &lt;a href=&#34;https://github.com/Neargye/magic_enum/releases/latest&#34;&gt;release archive&lt;/a&gt;. Alternatively, you can build the library with CMake.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using &lt;a href=&#34;https://github.com/Microsoft/vcpkg/&#34;&gt;vcpkg&lt;/a&gt; on your project for external dependencies, then you can use the &lt;a href=&#34;https://github.com/microsoft/vcpkg/tree/master/ports/magic-enum&#34;&gt;magic-enum package&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using &lt;a href=&#34;https://www.conan.io/&#34;&gt;Conan&lt;/a&gt; to manage your dependencies, merely add &lt;code&gt;magic_enum/x.y.z&lt;/code&gt; to your conan&#39;s requires, where &lt;code&gt;x.y.z&lt;/code&gt; is the release version you want to use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using &lt;a href=&#34;https://build2.org/&#34;&gt;Build2&lt;/a&gt; to build and manage your dependencies, add &lt;code&gt;depends: magic_enum ^x.y.z&lt;/code&gt; to the manifest file where &lt;code&gt;x.y.z&lt;/code&gt; is the release version you want to use. You can then import the target using &lt;code&gt;magic_enum%lib{magic_enum}&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alternatively, you can use something like &lt;a href=&#34;https://github.com/TheLartians/CPM&#34;&gt;CPM&lt;/a&gt; which is based on CMake&#39;s &lt;code&gt;Fetch_Content&lt;/code&gt; module.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;CPMAddPackage(&#xA;    NAME magic_enum&#xA;    GITHUB_REPOSITORY Neargye/magic_enum&#xA;    GIT_TAG x.y.z # Where `x.y.z` is the release version you want to use.&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bazel is also supported, simply add to your WORKSPACE file:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;http_archive(&#xA;    name = &#34;magic_enum&#34;,&#xA;    strip_prefix = &#34;magic_enum-&amp;lt;commit&amp;gt;&#34;,&#xA;    urls = [&#34;https://github.com/Neargye/magic_enum/archive/&amp;lt;commit&amp;gt;.zip&#34;],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To use bazel inside the repository it&#39;s possible to do:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bazel build //...&#xA;bazel test //...&#xA;bazel run //example&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(Note that you must use a supported compiler or specify it with &lt;code&gt;export CC= &amp;lt;compiler&amp;gt;&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using &lt;a href=&#34;https://www.ros.org/&#34;&gt;Ros&lt;/a&gt;, you can include this package by adding &lt;code&gt;&amp;lt;depend&amp;gt;magic_enum&amp;lt;/depend&amp;gt;&lt;/code&gt; to your package.xml and include this package in your workspace. In your CMakeLists.txt add the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;find_package(magic_enum CONFIG REQUIRED)&#xA;...&#xA;target_link_libraries(your_executable magic_enum::magic_enum)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiler compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clang/LLVM &amp;gt;= 5&lt;/li&gt; &#xA; &lt;li&gt;MSVC++ &amp;gt;= 14.11 / Visual Studio &amp;gt;= 2017&lt;/li&gt; &#xA; &lt;li&gt;Xcode &amp;gt;= 10&lt;/li&gt; &#xA; &lt;li&gt;GCC &amp;gt;= 9&lt;/li&gt; &#xA; &lt;li&gt;MinGW &amp;gt;= 9&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/Neargye/magic_enum/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/h2&gt;</summary>
  </entry>
</feed>