<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-10T06:03:44Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/WindowsAppSDK</title>
    <updated>2025-08-10T06:03:44Z</updated>
    <id>tag:github.com,2025-08-10:/microsoft/WindowsAppSDK</id>
    <link href="https://github.com/microsoft/WindowsAppSDK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Windows App SDK empowers all Windows desktop apps with modern Windows UI, APIs, and platform features, including back-compat support, shipped via NuGet.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://aka.ms/winappsdk&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/microsoft/WindowsAppSDK/main/docs/images/header.png&#34; alt=&#34;Windows App SDK Banner&#34; /&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Windows App SDK&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://learn.microsoft.com/windows/apps/windows-app-sdk&#34;&gt;About&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&#34;https://learn.microsoft.com/windows/apps/desktop&#34;&gt;Documentation&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&#34;https://learn.microsoft.com/windows/apps/windows-app-sdk/release-channels&#34;&gt;Release notes&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&#34;https://github.com/microsoft/WindowsAppSDK-Samples&#34;&gt;Samples&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a style=&#34;text-decoration:none&#34; href=&#34;https://www.nuget.org/packages/Microsoft.WindowsAppSDK&#34;&gt; &lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.WindowsAppSDK&#34; alt=&#34;WindowsAppSDK NuGet&#34; /&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aka.ms/winappsdk&#34;&gt;Windows App SDK&lt;/a&gt; (formerly Project Reunion) is a set of libraries, frameworks, components, and tools that you can use in your apps to access powerful Windows platform functionality from all kinds of apps on many versions of Windows. The Windows App SDK combines the powers of Win32 native applications alongside modern API usage techniques, so your apps light up everywhere your users are.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;WinUI 3 support:&lt;/strong&gt; &lt;a href=&#34;https://aka.ms/winui&#34;&gt;WinUI&lt;/a&gt; embodies Fluent Design to enable intuitive, accessible, and powerful experiences and the latest user interface patterns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Access modern features:&lt;/strong&gt; &lt;a href=&#34;https://github.com/microsoft/WindowsAppSDK/issues/11&#34;&gt;Modern resource tooling&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/WindowsAppSDK/issues/9&#34;&gt;modern lifecycle helpers&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/WindowsAppSDK/issues/10&#34;&gt;startup tasks&lt;/a&gt;, and more without having to rewrite your app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backwards compatibility:&lt;/strong&gt; Down to Windows 10 1809 (build 17763). There may be some API that are dependent on new OS features (like new Action Center functionality), however we will do our best to ensure this is the exception and not the norm, and provide reasonable fallbacks when possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wide platform support:&lt;/strong&gt; Win32, WPF, WinForms, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use your current installer:&lt;/strong&gt; no requirement to use MSIX, but there are &lt;a href=&#34;https://docs.microsoft.com/windows/msix/overview#key-features&#34;&gt;reliability/security benefits to using MSIX&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìã Getting started with Windows App SDK&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/windows/apps/winui/winui3/create-your-first-winui3-app&#34;&gt;Build your first app with Windows App SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/windowsappsdkdocs&#34;&gt;Developer documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/windows/apps/get-started/samples&#34;&gt;Samples &amp;amp; resources&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/WindowsAppSDK-Samples&#34;&gt;Windows App SDK samples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/WinUI-Gallery&#34;&gt;WinUI 3 Gallery&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/ai-dev-gallery&#34;&gt;AI Dev Gallery (Preview)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/CommunityToolkit/Windows&#34;&gt;Windows Community Toolkit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/TemplateStudio&#34;&gt;Template Studio&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WindowsAppSDK/main/docs/faq.md&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WindowsAppSDK/main/docs/contributor-guide.md&#34;&gt;Contribution guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WindowsAppSDK/main/docs/roadmap.md&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows App SDK family repositories &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/microsoft-ui-xaml&#34;&gt;WinUI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/CppWinRT&#34;&gt;C++/WinRT&lt;/a&gt; and &lt;a href=&#34;https://github.com/microsoft/CsWinRT&#34;&gt;C#/WinRT&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/msix-packaging&#34;&gt;MSIX packaging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üë®‚Äçüíª Join in and stay connected&lt;/h2&gt; &#xA;&lt;p&gt;Interested in WinUI and Windows App SDK? Come join us on the quarterly &lt;a href=&#34;https://www.youtube.com/playlist?list=PLI_J2v67C23ZqsolUDaHoFkF1GKvGrttB&#34;&gt;WinUI Community Calls&lt;/a&gt;. You can find and tag us on X using &lt;a href=&#34;https://twitter.com/search?q=%23WindowsAppSDK&#34;&gt;#WindowsAppSDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üñºÔ∏è WinUI 3 Gallery&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to also check out the &lt;a href=&#34;https://aka.ms/winui-gallery&#34;&gt;WinUI 3 Gallery&lt;/a&gt;, our interactive sample experience showing everything you can do with WinUI and Windows App SDK.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/WindowsAppSDK/main/docs/images/winui-gallery.png&#34; alt=&#34;WinUI 3 Gallery&#34; width=&#34;400&#34; /&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a style=&#34;text-decoration:none&#34; href=&#34;https://apps.microsoft.com/detail/9p3jfpwwdzrc?launch=true&amp;amp;mode=full&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://get.microsoft.com/images/en-us%20dark.svg&#34; width=&#34;200&#34; /&gt; &#xA;   &lt;img src=&#34;https://get.microsoft.com/images/en-us%20light.svg?sanitize=true&#34; width=&#34;200&#34; /&gt; &#xA;  &lt;/picture&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üì¢ Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/microsoft/WindowsAppSDK/issues/new/choose&#34;&gt;File a new issue&lt;/a&gt;:&lt;/strong&gt; Tell us what problem you&#39;re trying to solve, how you&#39;ve tried to solve it so far, and what would be the ideal solution for your app. Bonus points if there&#39;s a gist or existing repo we can look at with you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/microsoft/WindowsAppSDK/discussions/categories/q-a&#34;&gt;Ask a question&lt;/a&gt;:&lt;/strong&gt; Also, have a look at our &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WindowsAppSDK/main/docs/faq.md&#34;&gt;FAQ on WinAppSDK&lt;/a&gt; page, which we will update periodically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/microsoft/WindowsAppSDK/discussions&#34;&gt;Start a discussion&lt;/a&gt;:&lt;/strong&gt; Let&#39;s start a Discussion issue to see if others are interested in a cool new idea you&#39;ve been thinking about that isn&#39;t quite ready to be filed as a more formal Feature Proposal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WindowsAppSDK/main/docs/contributor-guide.md&#34;&gt;Code contributions&lt;/a&gt;:&lt;/strong&gt; See our &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WindowsAppSDK/main/docs/contributor-guide.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data collection&lt;/h2&gt; &#xA;&lt;p&gt;This project collects usage data and sends it to Microsoft to help improve our products and services. Note, however, that no data collection is performed when using your private builds.&lt;/p&gt; &#xA;&lt;p&gt;Privacy information can be found at &lt;a href=&#34;https://privacy.microsoft.com&#34;&gt;https://privacy.microsoft.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ai-dynamo/nixl</title>
    <updated>2025-08-10T06:03:44Z</updated>
    <id>tag:github.com,2025-08-10:/ai-dynamo/nixl</id>
    <link href="https://github.com/ai-dynamo/nixl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NVIDIA Inference Xfer Library (NIXL)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NVIDIA Inference Xfer Library (NIXL)&lt;/h1&gt; &#xA;&lt;p&gt;NVIDIA Inference Xfer Library (NIXL) is targeted for accelerating point to point communications in AI inference frameworks such as NVIDIA Dynamo, while providing an abstraction over various types of memory (e.g., CPU and GPU) and storage (e.g., file, block and object store) through a modular plug-in architecture.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ai-dynamo/nixl/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/ai-dynamo/nixl&#34; alt=&#34;GitHub Release&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Pre-build Distributions&lt;/h2&gt; &#xA;&lt;h3&gt;PyPI Wheel&lt;/h3&gt; &#xA;&lt;p&gt;The nixl python API and libraries, including UCX, are available directly through PyPI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install nixl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prerequisites for source build&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$ sudo apt install build-essential cmake pkg-config&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Fedora:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$ sudo dnf install gcc-c++ cmake pkg-config&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$ pip3 install meson ninja pybind11&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;UCX&lt;/h3&gt; &#xA;&lt;p&gt;NIXL was tested with UCX version 1.18.0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/NVIDIA/gdrcopy&#34;&gt;GDRCopy&lt;/a&gt; is available on Github and is necessary for maximum performance, but UCX and NIXL will work without it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ wget https://github.com/openucx/ucx/releases/download/v1.18.0/ucx-1.18.0.tar.gz&#xA;$ tar xzf ucx-1.18.0.tar.gz&#xA;$ cd ucx-1.18.0&#xA;$ ./configure                          \&#xA;    --enable-shared                    \&#xA;    --disable-static                   \&#xA;    --disable-doxygen-doc              \&#xA;    --enable-optimizations             \&#xA;    --enable-cma                       \&#xA;    --enable-devel-headers             \&#xA;    --with-cuda=&amp;lt;cuda install&amp;gt;         \&#xA;    --with-verbs                       \&#xA;    --with-dm                          \&#xA;    --with-gdrcopy=&amp;lt;gdrcopy install&amp;gt;   \&#xA;    --enable-mt&#xA;$ make -j&#xA;$ make -j install-strip&#xA;$ ldconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ETCD (Optional)&lt;/h3&gt; &#xA;&lt;p&gt;NIXL can use ETCD for metadata distribution and coordination between nodes in distributed environments. To use ETCD with NIXL:&lt;/p&gt; &#xA;&lt;h4&gt;ETCD Server and Client&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt install etcd etcd-server etcd-client&#xA;&#xA;# Or use Docker&#xA;$ docker run -d -p 2379:2379 quay.io/coreos/etcd:v3.5.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ETCD CPP API&lt;/h4&gt; &#xA;&lt;p&gt;Installed from &lt;a href=&#34;https://github.com/etcd-cpp-apiv3/etcd-cpp-apiv3&#34;&gt;https://github.com/etcd-cpp-apiv3/etcd-cpp-apiv3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt install libgrpc-dev libgrpc++-dev libprotobuf-dev protobuf-compiler-grpc&#xA;$ sudo apt install libcpprest-dev&#xA;$ git clone https://github.com/etcd-cpp-apiv3/etcd-cpp-apiv3.git&#xA;$ cd etcd-cpp-apiv3&#xA;$ mkdir build &amp;amp;&amp;amp; cd build&#xA;$ cmake ..&#xA;$ make -j$(nproc) &amp;amp;&amp;amp; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Additional plugins&lt;/h3&gt; &#xA;&lt;p&gt;Some plugins may have additional build requirements, see them here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai-dynamo/nixl/main/src/plugins/mooncake/README.md&#34;&gt;Mooncake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai-dynamo/nixl/main/src/plugins/posix/README.md&#34;&gt;POSIX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai-dynamo/nixl/main/src/plugins/cuda_gds/README.md&#34;&gt;GDS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Build &amp;amp; install&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ meson setup &amp;lt;name_of_build_dir&amp;gt;&#xA;$ cd &amp;lt;name_of_build_dir&amp;gt;&#xA;$ ninja&#xA;$ ninja install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build Options&lt;/h3&gt; &#xA;&lt;p&gt;NIXL supports several build options that can be specified during the meson setup phase:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Basic build setup with default options&#xA;$ meson setup &amp;lt;name_of_build_dir&amp;gt;&#xA;&#xA;# Setup with custom options (example)&#xA;$ meson setup &amp;lt;name_of_build_dir&amp;gt; \&#xA;    -Dbuild_docs=true \           # Build Doxygen documentation&#xA;    -Ducx_path=/path/to/ucx \     # Custom UCX installation path&#xA;    -Dinstall_headers=true \      # Install development headers&#xA;    -Ddisable_gds_backend=false   # Enable GDS backend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Common build options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;build_docs&lt;/code&gt;: Build Doxygen documentation (default: false)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ucx_path&lt;/code&gt;: Path to UCX installation (default: system path)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;install_headers&lt;/code&gt;: Install development headers (default: true)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;disable_gds_backend&lt;/code&gt;: Disable GDS backend (default: false)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cudapath_inc&lt;/code&gt;, &lt;code&gt;cudapath_lib&lt;/code&gt;: Custom CUDA paths&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;static_plugins&lt;/code&gt;: Comma-separated list of plugins to build statically&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building Documentation&lt;/h3&gt; &#xA;&lt;p&gt;If you have Doxygen installed, you can build the documentation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Configure with documentation enabled&#xA;$ meson setup &amp;lt;name_of_build_dir&amp;gt; -Dbuild_docs=true&#xA;$ cd &amp;lt;name_of_build_dir&amp;gt;&#xA;$ ninja&#xA;&#xA;# Documentation will be generated in &amp;lt;name_of_build_dir&amp;gt;/html&#xA;# After installation (ninja install), documentation will be available in &amp;lt;prefix&amp;gt;/share/doc/nixl/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python Interface&lt;/h3&gt; &#xA;&lt;p&gt;NIXL provides Python bindings through pybind11. For detailed Python API documentation, see &lt;a href=&#34;https://raw.githubusercontent.com/ai-dynamo/nixl/main/docs/python_api.md&#34;&gt;docs/python_api.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The preferred way to install the Python bindings is through pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install nixl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or build from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# From the root nixl directory&#xA;pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Python examples, see &lt;a href=&#34;https://raw.githubusercontent.com/ai-dynamo/nixl/main/examples/python/&#34;&gt;examples/python/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rust Bindings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build with default NIXL installation (/opt/nvidia/nvda_nixl)&#xA;$ cd src/bindings/rust&#xA;$ cargo build --release&#xA;&#xA;# Or specify custom NIXL location&#xA;$ NIXL_PREFIX=/path/to/nixl cargo build --release&#xA;&#xA;# Run tests&#xA;$ cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use in your project by adding to &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;nixl-sys = { path = &#34;path/to/nixl/bindings/rust&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other build options&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ai-dynamo/nixl/main/contrib/README.md&#34;&gt;contrib/README.md&lt;/a&gt; for more build options.&lt;/p&gt; &#xA;&lt;h3&gt;Building Docker container&lt;/h3&gt; &#xA;&lt;p&gt;To build the docker container, first clone the current repository. Also make sure you are able to pull docker images to your machine before attempting to build the container.&lt;/p&gt; &#xA;&lt;p&gt;Run the following from the root folder of the cloned NIXL repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./contrib/build-container.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the container is built with Ubuntu 24.04. To build a container for Ubuntu 22.04 use the --os option as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./contrib/build-container.sh --os ubuntu22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see all the options supported by the container use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./contrib/build-container.sh -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The container also includes a prebuilt python wheel in /workspace/dist if required for installing/distributing. Also, the wheel can be built with a separate script (see below).&lt;/p&gt; &#xA;&lt;h3&gt;Building the python wheel&lt;/h3&gt; &#xA;&lt;p&gt;The contrib folder also includes a script to build the python wheel with the UCX dependencies. Note, that UCX and other NIXL dependencies are required to be installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./contrib/build-wheel.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running with ETCD&lt;/h2&gt; &#xA;&lt;p&gt;NIXL can use ETCD for metadata exchange between distributed nodes. This is especially useful in containerized or cloud-native environments.&lt;/p&gt; &#xA;&lt;h3&gt;Environment Setup&lt;/h3&gt; &#xA;&lt;p&gt;To use ETCD with NIXL, set the following environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Set ETCD endpoints (required) - replace localhost with the hostname of the etcd server&#xA;export NIXL_ETCD_ENDPOINTS=&#34;http://localhost:2379&#34;&#xA;&#xA;# Set ETCD namespace (optional, defaults to /nixl/agents)&#xA;export NIXL_ETCD_NAMESPACE=&#34;/nixl/agents&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running the ETCD Example&lt;/h3&gt; &#xA;&lt;p&gt;NIXL includes an example demonstrating metadata exchange and data transfer using ETCD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start an ETCD server if not already running&#xA;# For example:&#xA;# docker run -d -p 2379:2379 quay.io/coreos/etcd:v3.5.1&#xA;&#xA;# Set the ETCD env variables as above&#xA;&#xA;# Run the example. The two agents in the example will exchange metadata through ETCD&#xA;# and perform data transfers&#xA;./&amp;lt;nixl_build_path&amp;gt;/examples/nixl_etcd_example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nixlbench Benchmark&lt;/h3&gt; &#xA;&lt;p&gt;For more comprehensive testing, the nixlbench benchmarking tool supports ETCD for worker coordination:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build nixlbench (see benchmark/nixlbench/README.md for details)&#xA;cd benchmark/nixlbench&#xA;meson setup build &amp;amp;&amp;amp; cd build &amp;amp;&amp;amp; ninja&#xA;&#xA;# Run benchmark with ETCD&#xA;./nixlbench --etcd-endpoints http://localhost:2379 --backend UCX --initiator_seg_type VRAM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ai-dynamo/nixl/tree/main/examples/cpp&#34;&gt;C++ examples&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ai-dynamo/nixl/tree/main/examples/python&#34;&gt;Python examples&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Third-Party Components&lt;/h2&gt; &#xA;&lt;p&gt;This project will download and install additional third-party open source software projects. Review the license terms of these open source projects before use.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OHF-Voice/piper1-gpl</title>
    <updated>2025-08-10T06:03:44Z</updated>
    <id>tag:github.com,2025-08-10:/OHF-Voice/piper1-gpl</id>
    <link href="https://github.com/OHF-Voice/piper1-gpl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast and local neural text-to-speech engine&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OHF-Voice/piper1-gpl/main/etc/logo.png&#34; alt=&#34;Piper&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;A fast and local neural text-to-speech engine that embeds &lt;a href=&#34;https://github.com/espeak-ng/espeak-ng&#34;&gt;espeak-ng&lt;/a&gt; for phonemization.&lt;/p&gt; &#xA;&lt;p&gt;Install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install piper-tts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üéß &lt;a href=&#34;https://rhasspy.github.io/piper-samples&#34;&gt;Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üí° &lt;a href=&#34;https://rhasspy.github.io/piper-samples/demo.html&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üó£Ô∏è &lt;a href=&#34;https://github.com/OHF-Voice/piper1-gpl/raw/main/docs/VOICES.md&#34;&gt;Voices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üñ•Ô∏è &lt;a href=&#34;https://github.com/OHF-Voice/piper1-gpl/raw/main/docs/CLI.md&#34;&gt;Command-line interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üåê &lt;a href=&#34;https://github.com/OHF-Voice/piper1-gpl/raw/main/docs/API_HTTP.md&#34;&gt;Web server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üêç &lt;a href=&#34;https://github.com/OHF-Voice/piper1-gpl/raw/main/docs/API_PYTHON.md&#34;&gt;Python API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üîß &lt;a href=&#34;https://github.com/OHF-Voice/piper1-gpl/tree/main/libpiper&#34;&gt;C/C++ API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üèãÔ∏è &lt;a href=&#34;https://github.com/OHF-Voice/piper1-gpl/raw/main/docs/TRAINING.md&#34;&gt;Training new voices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üõ†Ô∏è &lt;a href=&#34;https://github.com/OHF-Voice/piper1-gpl/raw/main/docs/BUILDING.md&#34;&gt;Building manually&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr /&gt; &#xA;&lt;p&gt;People/projects using Piper:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/home-assistant/addons/raw/master/piper/README.md&#34;&gt;Home Assistant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nvaccess.org/post/in-process-8th-may-2023/#voices&#34;&gt;NVDA - NonVisual Desktop Access&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techrxiv.org/articles/preprint/Image_Captioning_for_the_Visually_Impaired_and_Blind_A_Recipe_for_Low-Resource_Languages/22133894&#34;&gt;Image Captioning for the Visually Impaired and Blind: A Recipe for Low-Resource Languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/rjq5eZoWWSo&#34;&gt;Video tutorial by Thorsten M√ºller&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenVoiceOS/ovos-tts-plugin-piper&#34;&gt;Open Voice Operating System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shahizat/jetsonGPT&#34;&gt;JetsonGPT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-skynet/LocalAI&#34;&gt;LocalAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lernstick.ch/&#34;&gt;Lernstick EDU / EXAM: reading clipboard content aloud with language detection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phyce/rl-natural-speech&#34;&gt;Natural Speech - A plugin for Runelite, an OSRS Client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/evuraan/mintPiper&#34;&gt;mintPiper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wolandark/vim-piper&#34;&gt;Vim-Piper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Dz95q6XYjwY&#34;&gt;POTaTOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phyce/Narration-Studio&#34;&gt;Narration Studio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://basictts.com/&#34;&gt;Basic TTS&lt;/a&gt; - Simple online text-to-speech converter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.openhomefoundation.org/&#34;&gt;&lt;img src=&#34;https://www.openhomefoundation.org/badges/ohf-library.png&#34; alt=&#34;A library from the Open Home Foundation&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- Links --&gt;</summary>
  </entry>
</feed>