<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-31T01:46:19Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>infiniflow/infinity</title>
    <updated>2024-12-31T01:46:19Z</updated>
    <id>tag:github.com,2024-12-31:/infiniflow/infinity</id>
    <link href="https://github.com/infiniflow/infinity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The AI-native database built for LLM applications, providing incredibly fast vector and full-text search&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;187&#34; src=&#34;https://user-images.githubusercontent.com/93570324/234292265-889228a8-7a68-4e2d-b891-f75262410af1.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;The AI-native database built for LLM applications, providing incredibly fast vector and full-text search&lt;/b&gt; &lt;/p&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/infiniflow/infinity/issues/338&#34;&gt;Roadmap 2024&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/infiniflowai&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/jEfRUwEYEV&#34;&gt;Discord&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/@InfiniFlow-AI&#34;&gt;YouTube&lt;/a&gt; | &lt;/h4&gt; &#xA;&lt;p&gt;Infinity is a cutting-edge AI-native database that provides a wide range of search capabilities for rich data types such as vectors, full-text, and structured data. It provides robust support for various LLM applications, including search, recommenders, question-answering, conversational AI, copilot, content generation, and many more &lt;strong&gt;RAG&lt;/strong&gt; (Retrieval-augmented Generation) applications.&lt;/p&gt; &#xA;&lt;h2&gt;üåü Key Features&lt;/h2&gt; &#xA;&lt;p&gt;Infinity comes with high performance, flexibility, ease-of-use, and many features designed to address the challenges facing the next-generation AI applications:&lt;/p&gt; &#xA;&lt;h3&gt;‚ö°Ô∏è Incredibly fast&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Achieves 0.1 milliseconds query latency on million-scale vector datasets.&lt;/li&gt; &#xA; &lt;li&gt;Up to 10K QPS on million-scale vector datasets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/infinity/main/docs/benchmark.md&#34;&gt;Benchmark report&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;üîÆ Fused search&lt;/h3&gt; &#xA;&lt;p&gt;Supports a fused search of multiple embeddings and full text, in addition to filtering.&lt;/p&gt; &#xA;&lt;h3&gt;üçî Rich data types&lt;/h3&gt; &#xA;&lt;p&gt;Supports a wide range of data types including strings, numerics, vectors, and more.&lt;/p&gt; &#xA;&lt;h3&gt;üéÅ Ease-of-use&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intuitive Python API. See the &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/infinity/main/docs/pysdk_api_reference.md&#34;&gt;Python API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A single-binary architecture with no dependencies, making deployment a breeze.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üéÆ Get Started&lt;/h2&gt; &#xA;&lt;h3&gt;Deploy Infinity database&lt;/h3&gt; &#xA;&lt;h4&gt;Deploy using binary package on Linux x86_64&lt;/h4&gt; &#xA;&lt;p&gt;You can download the binary package (deb, rpm, or tgz) for your respective host operating system from &lt;a href=&#34;https://github.com/infiniflow/infinity/releases&#34;&gt;https://github.com/infiniflow/infinity/releases&lt;/a&gt;. These packages are designed to be compatible with Linux x86_64 hosts that are no older than CentOS 7. They are statically linked, except for glibc. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo rpm -i infinity-0.1.0-dev-x86_64.rpm&#xA;sudo systemctl start infinity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Deploy using Docker on Linux x86_64 and MacOS x86_64&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull infiniflow/infinity:nightly&#xA;docker run -d --name infinity -v /tmp/infinity/:/tmp/infinity --network=host infiniflow/infinity:nightly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Infinity&#39;s Python client&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install infinity_sdk &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Import necessary modules&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import infinity&#xA;import infinity.index as index&#xA;from infinity.common import REMOTE_HOST&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connect to the remote server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;infinity_obj = infinity.connect(REMOTE_HOST)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get a database&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;db = infinity_obj.get_database(&#34;default&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a table&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Drop my_table if it already exists&#xA;db.drop_table(&#34;my_table&#34;, if_exists=True)&#xA;# Create a table named &#34;my_table&#34;&#xA;table = db.create_table(&#34;my_table&#34;, {&#34;num&#34;: &#34;integer&#34;, &#34;body&#34;: &#34;varchar&#34;, &#34;vec&#34;: &#34;vector, 4, float&#34;}, None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Insert two records&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table.insert([{&#34;num&#34;: 1, &#34;body&#34;: &#34;unnecessary and harmful&#34;, &#34;vec&#34;: [1.0, 1.2, 0.8, 0.9]}])&#xA;table.insert([{&#34;num&#34;: 2, &#34;body&#34;: &#34;Office for Harmful Blooms&#34;, &#34;vec&#34;: [4.0, 4.2, 4.3, 4.5]}])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Execute a vector search&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;res = table.output([&#34;*&#34;]).knn(&#34;vec&#34;, [3.0, 2.8, 2.7, 3.1], &#34;float&#34;, &#34;ip&#34;, 2).to_pl()&#xA;print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üí° For more information about the Python API, see the &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/infinity/main/docs/pysdk_api_reference.md&#34;&gt;Python API Reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Build from Source&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/infinity/main/docs/build_from_source.md&#34;&gt;Build from Source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üìú Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/infiniflow/infinity/issues/338&#34;&gt;Infinity Roadmap 2024&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üôå Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/jEfRUwEYEV&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/infiniflowai&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/infiniflow/infinity/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/@InfiniFlow-AI&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Nukem9/dlssg-to-fsr3</title>
    <updated>2024-12-31T01:46:19Z</updated>
    <id>tag:github.com,2024-12-31:/Nukem9/dlssg-to-fsr3</id>
    <link href="https://github.com/Nukem9/dlssg-to-fsr3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Adds AMD FSR3 Frame Generation to games by replacing Nvidia DLSS-G Frame Generation (nvngx_dlssg).&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Builds have been moved to Nexus Mods.&lt;/h2&gt; &#xA;&lt;h3&gt;Download link: &lt;a href=&#34;https://www.nexusmods.com/site/mods/738?tab=files&#34;&gt;https://www.nexusmods.com/site/mods/738?tab=files&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Installation instructions are the exact same. You can keep using video guides. Moving to Nexus Mods is to make my life easier.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ExpressLRS/ExpressLRS</title>
    <updated>2024-12-31T01:46:19Z</updated>
    <id>tag:github.com,2024-12-31:/ExpressLRS/ExpressLRS</id>
    <link href="https://github.com/ExpressLRS/ExpressLRS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;STM32/ESP32/ESP8285-based High-Performance Radio Link for RC applications&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/ExpressLRS/ExpressLRS-Hardware/raw/master/img/banner.png?raw=true&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/ExpressLRS/ExpressLRS/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/ExpressLRS/ExpressLRS?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ExpressLRS/ExpressLRS/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/ExpressLRS/ExpressLRS/build.yml?logo=github&amp;amp;style=flat-square&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ExpressLRS/ExpressLRS/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/ExpressLRS/ExpressLRS?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ExpressLRS/ExpressLRS/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/ExpressLRS/ExpressLRS?style=flat-square&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/expresslrs&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/596350022191415318?color=%235865F2&amp;amp;logo=discord&amp;amp;logoColor=%23FFFFFF&amp;amp;style=flat-square&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/center&gt; &#xA;&lt;h2&gt;Support ExpressLRS&lt;/h2&gt; &#xA;&lt;p&gt;You can support ExpressLRS by contributing code, testing new features, sharing your ideas, or helping others get started. We are exceptionally grateful for those who donate their time to our passion.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have time to lend a hand in that way but still want to have an impact, consider donating. Donations are used for infrastructure costs and to buy test equipment needed to further the project and make it securely accessible. ExpressLRS accepts donations through Open Collective, which provides recognition of donors and transparency on how that support is utilized.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/expresslrs&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/backers/expresslrs?label=Open%20Collective%20backers&amp;amp;style=flat-square&#34; alt=&#34;Open Collective backers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We appreciate all forms of contribution and hope you will join us on Discord!&lt;/p&gt; &#xA;&lt;h2&gt;Website&lt;/h2&gt; &#xA;&lt;p&gt;For general information on the project please refer to our guides on the &lt;a href=&#34;https://www.expresslrs.org/&#34;&gt;website&lt;/a&gt;, and our &lt;a href=&#34;https://www.expresslrs.org/2.0/faq/&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;ExpressLRS is an open source Radio Link for Radio Control applications. Designed to be the best FPV Racing link, it is based on the fantastic Semtech &lt;strong&gt;SX127x&lt;/strong&gt;/&lt;strong&gt;SX1280&lt;/strong&gt; LoRa hardware combined with an Espressif or STM32 Processor. Using LoRa modulation as well as reduced packet size it achieves best in class range and latency. It achieves this using a highly optimized over-the-air packet structure, giving simultaneous range and latency advantages. It supports both 900 MHz and 2.4 GHz links, each with their own benefits. 900 MHz supports a maximum of 200 Hz packet rate, with higher penetration. 2.4 GHz supports a blistering fast 1000 Hz on &lt;a href=&#34;http://edgetx.org/&#34;&gt;EdgeTX&lt;/a&gt;. With over 60 different hardware targets and 13 hardware manufacturers, the choice of hardware is ever growing, with different hardware suited to different requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Configurator&lt;/h2&gt; &#xA;&lt;p&gt;To configure your ExpressLRS hardware, the ExpressLRS Configurator can be used, which is found here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ExpressLRS/ExpressLRS-Configurator/releases/&#34;&gt;https://github.com/ExpressLRS/ExpressLRS-Configurator/releases/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;We have both a &lt;a href=&#34;https://discord.gg/expresslrs&#34;&gt;Discord Server&lt;/a&gt; and &lt;a href=&#34;https://www.facebook.com/groups/636441730280366&#34;&gt;Facebook Group&lt;/a&gt;, which have great support for new users and constant ongoing development discussion&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;ExpressLRS has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1000 Hz Packet Rate&lt;/li&gt; &#xA; &lt;li&gt;Telemetry (Betaflight Lua Compatibility)&lt;/li&gt; &#xA; &lt;li&gt;Wifi Updates&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth Sim Joystick&lt;/li&gt; &#xA; &lt;li&gt;Oled &amp;amp; TFT Displays&lt;/li&gt; &#xA; &lt;li&gt;2.4 GHz or 900 MHz RC Link&lt;/li&gt; &#xA; &lt;li&gt;Ceramic Antenna - allows for easier installation into micros&lt;/li&gt; &#xA; &lt;li&gt;VTX and VRX Frequency adjustments from the Lua&lt;/li&gt; &#xA; &lt;li&gt;Bind Phrases - no need for button binding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;with many more features on the way!&lt;/p&gt; &#xA;&lt;h2&gt;Supported Hardware&lt;/h2&gt; &#xA;&lt;p&gt;ExpressLRS currently supports hardware from the following manufacturers: AxisFlying, BETAFPV, Flywoo, FrSky, HappyModel, HiYounger, HGLRC, ImmersionRC, iFlight, JHEMCU, Jumper, Matek, NamimnoRC, QuadKopters and SIYI.&lt;/p&gt; &#xA;&lt;p&gt;For an exhaustive list of hardware targets and their user guides, check out the &lt;a href=&#34;https://www.expresslrs.org/2.0/hardware/supported-hardware/&#34;&gt;Supported Hardware&lt;/a&gt; and &lt;a href=&#34;https://www.expresslrs.org/2.0/hardware/receiver-selection/&#34;&gt;Receiver Selection&lt;/a&gt; pages on the website. We do not manufacture any of our hardware, so we can only provide limited support on defective hardware.&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;If you are a developer and would like to contribute to the project, feel free to join the &lt;a href=&#34;https://discord.gg/expresslrs&#34;&gt;discord&lt;/a&gt; and chat about bugs and issues. You can also look for issues at the &lt;a href=&#34;https://github.com/ExpressLRS/ExpressLRS/issues&#34;&gt;GitHub Issue Tracker&lt;/a&gt;. The best thing to do is to submit a Pull Request to the GitHub Repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ExpressLRS/ExpressLRS-Hardware/raw/master/img/community.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>