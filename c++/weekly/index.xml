<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-29T01:38:41Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>EsotericSoftware/spine-runtimes</title>
    <updated>2025-06-29T01:38:41Z</updated>
    <id>tag:github.com,2025-06-29:/EsotericSoftware/spine-runtimes</id>
    <link href="https://github.com/EsotericSoftware/spine-runtimes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;2D skeletal animation runtimes for Spine.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spine Runtimes&lt;/h1&gt; &#xA;&lt;p&gt;This GitHub project hosts the Spine Runtimes which are needed to use &lt;a href=&#34;http://esotericsoftware.com/&#34;&gt;Spine&lt;/a&gt; 2D skeletal animation data with various game toolkits.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;You are welcome to evaluate the Spine Runtimes and the examples we provide in this repository free of charge.&lt;/p&gt; &#xA;&lt;p&gt;You can integrate the Spine Runtimes into your software free of charge, but users of your software must have their own &lt;a href=&#34;https://esotericsoftware.com/spine-purchase&#34;&gt;Spine license&lt;/a&gt;. Please make your users aware of this requirement! This option is often chosen by those making development tools, such as an SDK, game toolkit, or software library.&lt;/p&gt; &#xA;&lt;p&gt;In order to distribute your software containing the Spine Runtimes to others that don&#39;t have a Spine license, you need a &lt;a href=&#34;https://esotericsoftware.com/spine-purchase&#34;&gt;Spine license&lt;/a&gt; at the time of integration. Then you can distribute your software containing the Spine Runtimes however you like, provided others don&#39;t modify it or use it to create new software. If others want to do that, they&#39;ll need their own Spine license.&lt;/p&gt; &#xA;&lt;p&gt;For the official legal terms governing the Spine Runtimes, please read the &lt;a href=&#34;http://esotericsoftware.com/spine-runtimes-license&#34;&gt;Spine Runtimes License Agreement&lt;/a&gt; and Section 2 of the &lt;a href=&#34;http://esotericsoftware.com/spine-editor-license#s2&#34;&gt;Spine Editor License Agreement&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;http://esotericsoftware.com/spine-runtimes-guide&#34;&gt;Spine Runtimes Guide&lt;/a&gt; for detailed information about using the Spine Runtimes. The Spine &lt;a href=&#34;http://esotericsoftware.com/spine-documentation#runtimesTitle&#34;&gt;documentation page&lt;/a&gt; provides further information about tools and data formats. For runtime specific documentation, refer to the &lt;code&gt;README.md&lt;/code&gt; file in each runtime directory.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs, enhancements, and tasks&lt;/h2&gt; &#xA;&lt;p&gt;Review our backlog of bugs, enhancements, and tasks in the &lt;a href=&#34;https://github.com/EsotericSoftware/spine-runtimes/issues&#34;&gt;spine-runtimes&lt;/a&gt; and &lt;a href=&#34;https://github.com/EsotericSoftware/spine-editor/issues&#34;&gt;spine-editor&lt;/a&gt; issue trackers. Our &lt;a href=&#34;http://esotericsoftware.com/spine-roadmap&#34;&gt;roadmap&lt;/a&gt; provides a more convenient view of the same issue tracker information.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;The default branch on GitHub is stable and works with data exported from the latest, non-beta version of the Spine editor. New development is done in an &lt;code&gt;X.X-beta&lt;/code&gt; branch, which may be a work in progress. Important changes to the runtimes can be reviewed in the &lt;a href=&#34;https://raw.githubusercontent.com/EsotericSoftware/spine-runtimes/4.2/CHANGELOG.md&#34;&gt;CHANGELOG.md file&lt;/a&gt;. Occasionally the Spine Runtimes are &lt;a href=&#34;https://github.com/EsotericSoftware/spine-runtimes/releases&#34;&gt;tagged&lt;/a&gt; with the specific Spine editor version they work with.&lt;/p&gt; &#xA;&lt;p&gt;It is highly suggested to &lt;a href=&#34;http://esotericsoftware.com/spine-settings#Version&#34;&gt;freeze&lt;/a&gt; the Spine editor version to match the Spine Runtimes source being used and to update them in lock step. See the &lt;a href=&#34;http://esotericsoftware.com/spine-runtime-architecture#Versioning&#34;&gt;Spine Runtimes Guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;In order to merge your contributions, we need a signed &lt;a href=&#34;http://esotericsoftware.com/licenses/cla.txt&#34;&gt;contributor license agreement (CLA)&lt;/a&gt; from you. You can send a copy of the CLA to &lt;a href=&#34;mailto:contact@esotericsoftware.com&#34;&gt;contact@esotericsoftware.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When possible, it is best to base your contributions on the current beta branch (&lt;code&gt;X.X-beta&lt;/code&gt;). Please be sure to follow the style and formatting you find in the respective runtime code to which you are contributing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>isledecomp/isle-portable</title>
    <updated>2025-06-29T01:38:41Z</updated>
    <id>tag:github.com,2025-06-29:/isledecomp/isle-portable</id>
    <link href="https://github.com/isledecomp/isle-portable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A portable version of LEGO Island (1997)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LEGO Island, portable&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLbpl-gZkNl2Db4xcAsT_xOfOwRk-2DPHL&#34;&gt;Development Vlog&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/isledecomp/isle-portable/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; | &lt;a href=&#34;https://matrix.to/#/%23isledecomp:matrix.org&#34;&gt;Matrix&lt;/a&gt; | &lt;a href=&#34;https://forum.mattkc.com/viewforum.php?f=1&#34;&gt;Forums&lt;/a&gt; | &lt;a href=&#34;https://www.patreon.com/mattkc&#34;&gt;Patreon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This initiative is a portable version of LEGO Island (Version 1.1, English) based on the &lt;a href=&#34;https://github.com/isledecomp/isle&#34;&gt;decompilation project&lt;/a&gt;. Our primary goal is to transform the codebase to achieve platform independence, thereby enhancing compatibility across various systems while preserving the original game&#39;s experience as faithfully as possible.&lt;/p&gt; &#xA;&lt;p&gt;Please note: this project is dedicated to achieving platform independence without altering the core gameplay, adding new features, enhancing visual quality, or rewriting code for improvement&#39;s sake. While those are worthwhile objectives, they are not within the scope of this project.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;h3&gt;Supported platforms&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/isledecomp/isle-portable/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/isledecomp/isle-portable/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/isledecomp/isle-portable/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/isledecomp/isle-portable/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/isledecomp/isle-portable/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/isledecomp/isle-portable/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://isle.pizza&#34;&gt;Web&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/isledecomp/isle-portable/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/isledecomp/isle-portable/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We are actively working to support more platforms. If you have experience with a particular platform, we encourage you to contribute to &lt;code&gt;isle-portable&lt;/code&gt;. You can find a &lt;a href=&#34;https://github.com/isledecomp/isle-portable/wiki/Work%E2%80%90in%E2%80%90progress-ports&#34;&gt;list of ongoing efforts&lt;/a&gt; in our Wiki.&lt;/p&gt; &#xA;&lt;h3&gt;Library substitutions&lt;/h3&gt; &#xA;&lt;p&gt;To achieve our goal of platform independence, we need to replace any Windows-only libraries with platform-independent alternatives. This ensures that our codebase remains versatile and compatible across various systems. The following table serves as an overview of major libraries / subsystems and their chosen replacements. For any significant changes or additions, it&#39;s recommended to discuss them with the team on the Matrix chat first to ensure consistency and alignment with our project&#39;s objectives.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library/subsystem&lt;/th&gt; &#xA;   &lt;th&gt;Substitution&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Window, Events&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.libsdl.org/&#34;&gt;SDL3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/search?q=repo%3Aisledecomp%2Fisle-portable+%22%2F%2F+%5Blibrary%3Awindow%5D%22&amp;amp;type=code&#34;&gt;Remarks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows Registry (Configuration)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gitlab.com/iniparser/iniparser&#34;&gt;libiniparser&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/search?q=repo%3Aisledecomp%2Fisle-portable+%22%2F%2F+%5Blibrary%3Aconfig%5D%22&amp;amp;type=code&#34;&gt;Remarks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Filesystem&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.libsdl.org/&#34;&gt;SDL3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/search?q=repo%3Aisledecomp%2Fisle-portable+%22%2F%2F+%5Blibrary%3Afilesystem%5D%22&amp;amp;type=code&#34;&gt;Remarks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Threads, Mutexes (Synchronization)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.libsdl.org/&#34;&gt;SDL3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/search?q=repo%3Aisledecomp%2Fisle-portable+%22%2F%2F+%5Blibrary%3Asynchronization%5D%22&amp;amp;type=code&#34;&gt;Remarks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Keyboard/Mouse, DirectInput (Input)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.libsdl.org/&#34;&gt;SDL3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/search?q=repo%3Aisledecomp%2Fisle-portable+%22%2F%2F+%5Blibrary%3Ainput%5D%22&amp;amp;type=code&#34;&gt;Remarks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Joystick/Gamepad, DirectInput (Input)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.libsdl.org/&#34;&gt;SDL3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/search?q=repo%3Aisledecomp%2Fisle-portable+%22%2F%2F+%5Blibrary%3Ainput%5D%22&amp;amp;type=code&#34;&gt;Remarks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WinMM, DirectSound (Audio)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.libsdl.org/&#34;&gt;SDL3&lt;/a&gt;, &lt;a href=&#34;https://miniaud.io/&#34;&gt;miniaudio&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/search?q=repo%3Aisledecomp%2Fisle-portable+%22%2F%2F+%5Blibrary%3Aaudio%5D%22&amp;amp;type=code&#34;&gt;Remarks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DirectDraw (2D video)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.libsdl.org/&#34;&gt;SDL3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/search?q=repo%3Aisledecomp%2Fisle-portable+%22%2F%2F+%5Blibrary%3A2d%5D%22&amp;amp;type=code&#34;&gt;Remarks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/isledecomp/isle/tree/master/3rdparty/smacker&#34;&gt;Smacker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/foxtacles/libsmacker&#34;&gt;libsmacker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/search?q=repo%3Aisledecomp%2Fisle-portable%20%22%2F%2F%20%5Blibrary%3Alibsmacker%5D%22&amp;amp;type=code&#34;&gt;Remarks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Direct3D (3D video)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.libsdl.org/&#34;&gt;SDL3 (Vulkan, Metal, D3D12)&lt;/a&gt;, D3D9, OpenGL, OpenGL ES, Software&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/search?q=repo%3Aisledecomp%2Fisle-portable+%22%2F%2F+%5Blibrary%3A3d%5D%22&amp;amp;type=code&#34;&gt;Remarks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Direct3D Retained Mode&lt;/td&gt; &#xA;   &lt;td&gt;Custom re-implementation&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/search?q=repo%3Aisledecomp%2Fisle-portable+%22%2F%2F+%5Blibrary%3Aretained%5D%22&amp;amp;type=code&#34;&gt;Remarks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/isledecomp/isle/tree/master/3rdparty/smartheap&#34;&gt;SmartHeap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default memory allocator&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;This project uses the &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; build system, which allows for a high degree of versatility regarding compilers and development environments. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/isledecomp/isle-portable/master/.github/workflows//ci.yml&#34;&gt;GitHub action&lt;/a&gt; for guidance.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;An existing copy of LEGO Island is required to use this project.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;As it stands, the builds provided in the Releases tab are for developers; as such, they may not work properly for end-users. Work is currently ongoing to create workable release builds ready for gameplay and general use by end-users. If you are technically inclined, you may find it easiest to compile the project yourself to get it running at this current point in time.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in helping or contributing to this project, check out the &lt;a href=&#34;https://raw.githubusercontent.com/isledecomp/isle-portable/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; page.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mirage-project/mirage</title>
    <updated>2025-06-29T01:38:41Z</updated>
    <id>tag:github.com,2025-06-29:/mirage-project/mirage</id>
    <link href="https://github.com/mirage-project/mirage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirage: Automatically Generating Fast GPU Kernels without Programming in Triton/CUDA&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Mirage Persistent Kernel: Compiling LLMs into a MegaKernel&lt;/h1&gt; &#xA; &lt;p&gt;| &lt;a href=&#34;https://join.slack.com/t/miragesystem/shared_invite/zt-37reobr1i-SKjxeYF3GXdPDoCvtVbjTQ&#34;&gt;Join Slack&lt;/a&gt; | &lt;a href=&#34;https://github.com/mirage-project/mirage/issues/325&#34;&gt;Roadmap&lt;/a&gt; | &lt;a href=&#34;https://zhihaojia.medium.com/compiling-llms-into-a-megakernel-a-path-to-low-latency-inference-cf7840913c17&#34;&gt;Blog Post&lt;/a&gt; |&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest News&lt;/em&gt; ðŸ”¥&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2025/06] We released &lt;a href=&#34;https://github.com/mirage-project/mirage/tree/mpk&#34;&gt;Mirage Persistent Kernel (MPK)&lt;/a&gt;, a compiler and runtime that automatically transforms multi-GPU LLM inference into a high-performance megakernel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mirage Persistent Kernel (MPK)&lt;/strong&gt; is a compiler and runtime system that automatically transforms LLM inference into a single megakernelâ€”a fused GPU kernel that performs all necessary computation and communication within a single kernel launch. This end-to-end GPU fusion approach reduces LLM inference latency by 1.2Ã— to 6.7Ã—, all while requiring minimal developer effort.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Installation&lt;/h2&gt; &#xA;&lt;p&gt;The fastest way to try MPK is to install it directly from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive --branch mpk https://www.github.com/mirage-project/mirage&#xA;cd mirage&#xA;pip install -e . -v&#xA;export MIRAGE_HOME=$pwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ðŸ”§[2025/06/19] We are working on pre-built binary wheels for MPK and will update the installation instructions once they are available.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Mirage allows you to compile LLMs from the Hugging Face model zoo into a megakernel using just a few dozen lines of Pythonâ€”mainly to define the kernelâ€™s inputs and outputs. See &lt;a href=&#34;https://github.com/mirage-project/mirage/raw/mpk/demo/qwen3/demo.py&#34;&gt;this demo script&lt;/a&gt; that compiles the Qwen3-8B model into a megakernel.&lt;/p&gt; &#xA;&lt;p&gt;We start by running the demo with native Triton and FlashInfer kernels:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python demo/qwen3/demo.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile and execute the megakernel using MPK:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python demo/qwen3/demo.py --use-mirage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable profiling (which visualizes the execution timeline of each task):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python demo/qwen3/demo.py --use-mirage --profiling&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How MPK Works&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;ve imported the Mirage package, you can instantiate a persistent kernel using the following API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import mirage as mi&#xA;mpk = mi.PersistentKernel(&#xA;    world_size=world_size,&#xA;    mpi_rank=rank,&#xA;    num_workers=96,&#xA;    num_local_schedulers=48,&#xA;    num_remote_schedulers=0,&#xA;    meta_tensors=[step, tokens],&#xA;    profiler_tensor=profiler_tensor,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;world_size&lt;/code&gt; and &lt;code&gt;mpi_rank&lt;/code&gt;: number of GPUs and current GPU rank.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;num_workers&lt;/code&gt;, &lt;code&gt;num_local_schedulers&lt;/code&gt;, &lt;code&gt;num_remote_schedulers&lt;/code&gt;: the number of workers, local schedulers, and remote schedulers. They must match the number of physical SMs (&lt;code&gt;num_workers&lt;/code&gt; + (&lt;code&gt;num_local_schedulers&lt;/code&gt; + &lt;code&gt;num_remote_schedulers&lt;/code&gt;) / 4).&lt;/li&gt; &#xA; &lt;li&gt;The megakernel currently requires two meta tensors: &lt;code&gt;step&lt;/code&gt; is an array of integer tracking the current decoding step, and is incremented by MPK after each decoding iteration; &lt;code&gt;tokens&lt;/code&gt; is a tensor of shape [&lt;code&gt;num_requests&lt;/code&gt;, &lt;code&gt;seq_length&lt;/code&gt;] storing prompts and MPK generated tokens.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To attach an existing &lt;code&gt;PyTorch.Tensor&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = mpk.attach_input(torch_tensor=torch_tensor, name=&#34;torch_tensor_name&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt; is used by MPK to refer to the tensor in the generated megakernel in CUDA.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To allocate a new tensor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;y = mpk.new_tensor(&#xA;    dims=(batch_size, hidden_size),&#xA;    dtype=mi.bfloat16,&#xA;    name=&#34;embed_out&#34;,&#xA;    io_category=&#34;cuda_tensor&#34;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dims&lt;/code&gt; and &lt;code&gt;dtype&lt;/code&gt; specify the dimensions and data type of the tensor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt; is used by MPK to refer to this new tensor in the megakernel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io_category&lt;/code&gt; indicates how the tensor is allocated and must be &lt;code&gt;cuda_tensor&lt;/code&gt; or &lt;code&gt;nvshmem_tensor&lt;/code&gt; (the latter is required for remote GPU access, e.g., during all-reduce).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Defining the Computation Graph&lt;/h3&gt; &#xA;&lt;p&gt;You can compose the LLMâ€™s computation graph by chaining fused operations. For example: &lt;code&gt;rmsnorm_linear_layer&lt;/code&gt; fuses an RMSNorm layer and a Linear layer in the megakernel.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mpk.rmsnorm_linear_layer(&#xA;    input=x,&#xA;    weight_norm=w_norm,&#xA;    weight_linear=w_qkv,&#xA;    output=attn_in,&#xA;    grid_dim=(96, 1, 1),&#xA;    block_dim=(128, 1, 1),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;weight_norm&lt;/code&gt; and &lt;code&gt;weight_linear&lt;/code&gt; are the weight tensors for RMSNorm and Linear.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; are the input and output tensors of this fused layer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;grid_dim&lt;/code&gt; and &lt;code&gt;block_dim&lt;/code&gt; specifies the number of thread blocks (i.e., number of tasks in the task graph) and number of thread within each thread block. To minimize latency, it is suggested that the total number of thread blocks is a multiplier of the number of workers to avoid outliers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compilation &amp;amp; Execution&lt;/h3&gt; &#xA;&lt;p&gt;Once the computation graph is defined, compile it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mpk.compile()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the optimized megakernel as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mpk()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;We welcome feedback, contributions, and collaborations from the community! Please join our &lt;a href=&#34;https://join.slack.com/t/mirage-ag11870/shared_invite/zt-37reobr1i-SKjxeYF3GXdPDoCvtVbjTQ&#34;&gt;Slack channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please let us know if you encounter any bugs or have any suggestions by &lt;a href=&#34;https://github.com/mirage-project/mirage/issues&#34;&gt;submitting an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;A paper describing Mirage&#39;s techniques is available &lt;a href=&#34;https://arxiv.org/abs/2405.05751&#34;&gt;on arxiv&lt;/a&gt;. Please cite Mirage as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings {wu2024mirage,&#xA;title={Mirage: A Multi-Level Superoptimizer for Tensor Programs}, &#xA;author={Mengdi Wu and Xinhao Cheng and Shengyu Liu and Chunan Shi and Jianan Ji and Kit Ao and Praveen Velliengiri and Xupeng Miao and Oded Padon and Zhihao Jia},&#xA;booktitle = {19th USENIX Symposium on Operating Systems Design and Implementation (OSDI 25)},&#xA;year = {2025},&#xA;address = {Boston, MA},&#xA;publisher = {USENIX Association},&#xA;month = jul&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Mirage uses Apache License 2.0.&lt;/p&gt;</summary>
  </entry>
</feed>