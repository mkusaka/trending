<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T01:58:28Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>topjohnwu/Magisk</title>
    <updated>2022-06-03T01:58:28Z</updated>
    <id>tag:github.com,2022-06-03:/topjohnwu/Magisk</id>
    <link href="https://github.com/topjohnwu/Magisk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Magic Mask for Android&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/topjohnwu/Magisk/master/docs/images/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/topjohnwu/magisk-files/count/count.json&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?color=green&amp;amp;label=Downloads&amp;amp;query=totalString&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Ftopjohnwu%2Fmagisk-files%2Fcount%2Fcount.json&amp;amp;cacheSeconds=1800&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;This is not an officially supported Google product&lt;/h4&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Magisk is a suite of open source software for customizing Android, supporting devices higher than Android 5.0.&lt;br&gt; Some highlight features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;MagiskSU&lt;/strong&gt;: Provide root access for applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Magisk Modules&lt;/strong&gt;: Modify read-only partitions by installing modules&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MagiskBoot&lt;/strong&gt;: The most complete tool for unpacking and repacking Android boot images&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zygisk&lt;/strong&gt;: Run code in every Android applications&#39; processes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/topjohnwu/Magisk/&#34;&gt;Github&lt;/a&gt; is the only source where you can get official Magisk information and downloads.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/topjohnwu/Magisk/releases/tag/v24.3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Magisk-v24.3-blue&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/topjohnwu/Magisk/releases/tag/v24.3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Magisk%20Beta-v24.3-blue&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/topjohnwu/magisk-files/canary/app-release.apk&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Magisk-Canary-red&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/topjohnwu/magisk-files/canary/app-debug.apk&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Magisk-Debug-red&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://topjohnwu.github.io/Magisk/install.html&#34;&gt;Installation Instruction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://topjohnwu.github.io/Magisk/&#34;&gt;Magisk Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.didgeridoohan.com/magisk/HomePage&#34;&gt;Magisk Troubleshoot Wiki&lt;/a&gt; (by &lt;a href=&#34;https://github.com/Didgeridoohan&#34;&gt;@Didgeridoohan&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bug Reports&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Only bug reports from Debug builds will be accepted.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For installation issues, upload both boot image and install logs.&lt;br&gt; For Magisk issues, upload boot logcat or dmesg.&lt;br&gt; For Magisk app crashes, record and upload the logcat when the crash occurs.&lt;/p&gt; &#xA;&lt;h2&gt;Building and Development&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Magisk builds on any OS Android Studio supports. Install Android Studio and do the initial setups.&lt;/li&gt; &#xA; &lt;li&gt;Clone sources: &lt;code&gt;git clone --recurse-submodules https://github.com/topjohnwu/Magisk.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Python 3.6+ &lt;br&gt; (Windows only: select &lt;strong&gt;&#39;Add Python to PATH&#39;&lt;/strong&gt; in installer, and run &lt;code&gt;pip install colorama&lt;/code&gt; after install)&lt;/li&gt; &#xA; &lt;li&gt;Configure to use the JDK bundled in Android Studio: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;macOS: &lt;code&gt;export JAVA_HOME=&#34;/Applications/Android Studio.app/Contents/jre/Contents/Home&#34;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Linux: &lt;code&gt;export PATH=&#34;/path/to/androidstudio/jre/bin:$PATH&#34;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: Add &lt;code&gt;C:\Path\To\Android Studio\jre\bin&lt;/code&gt; to environment variable &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set environment variable &lt;code&gt;ANDROID_SDK_ROOT&lt;/code&gt; to the Android SDK folder (can be found in Android Studio settings)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./build.py ndk&lt;/code&gt; to let the script download and install NDK for you&lt;/li&gt; &#xA; &lt;li&gt;To start building, run &lt;code&gt;build.py&lt;/code&gt; to see your options. &lt;br&gt; For each action, use &lt;code&gt;-h&lt;/code&gt; to access help (e.g. &lt;code&gt;./build.py all -h&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;To start development, open the project with Android Studio. The IDE can be used for both app (Kotlin/Java) and native (C++/C) sources.&lt;/li&gt; &#xA; &lt;li&gt;Optionally, set custom configs with &lt;code&gt;config.prop&lt;/code&gt;. A sample &lt;code&gt;config.prop.sample&lt;/code&gt; is provided.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Signing and Distribution&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The certificate of the key used to sign the final Magisk APK product is also directly embedded into some executables. In release builds, Magisk&#39;s root daemon will enforce this certificate check and reject and forcefully uninstall any non-matching Magisk apps to protect users from malicious and unverified Magisk APKs.&lt;/li&gt; &#xA; &lt;li&gt;To do any development on Magisk itself, switch to an &lt;strong&gt;official debug build and reinstall Magisk&lt;/strong&gt; to bypass the signature check.&lt;/li&gt; &#xA; &lt;li&gt;To distribute your own Magisk builds signed with your own keys, set your signing configs in &lt;code&gt;config.prop&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://developer.android.com/studio/publish/app-signing.html#generate-key&#34;&gt;Google&#39;s Documentation&lt;/a&gt; for more details on generating your own key.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Translation Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Default string resources for the Magisk app and its stub APK are located here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;app/src/main/res/values/strings.xml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stub/src/main/res/values/strings.xml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Translate each and place them in the respective locations (&lt;code&gt;[module]/src/main/res/values-[lang]/strings.xml&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Magisk, including all git submodules are free software:&#xA;you can redistribute it and/or modify it under the terms of the&#xA;GNU General Public License as published by the Free Software Foundation,&#xA;either version 3 of the License, or (at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>aristocratos/btop</title>
    <updated>2022-06-03T01:58:28Z</updated>
    <id>tag:github.com,2022-06-03:/aristocratos/btop</id>
    <link href="https://github.com/aristocratos/btop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A monitor of resources&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/Img/logo.png&#34; alt=&#34;btop++&#34;&gt;&lt;/h1&gt; &#xA;&lt;a href=&#34;https://repology.org/project/btop/versions&#34;&gt; &lt;img src=&#34;https://repology.org/badge/vertical-allrepos/btop.svg?sanitize=true&#34; alt=&#34;Packaging status&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/-Linux-grey?logo=linux&#34; alt=&#34;Linux&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-OSX-black?logo=apple&#34; alt=&#34;OSX&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-FreeBSD-red?logo=freebsd&#34; alt=&#34;FreeBSD&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Usage-System%20resource%20monitor-yellow&#34; alt=&#34;Usage&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/cpp-c%2B%2B20-green&#34; alt=&#34;c++20&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/aristocratos/btop?label=release&#34; alt=&#34;latest_release&#34;&gt; &lt;a href=&#34;https://paypal.me/aristocratos&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Donate-yellow?logo=paypal&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/aristocratos&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Sponsor-red?logo=github&#34; alt=&#34;Sponsor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ko-fi.com/aristocratos&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Buy%20me%20a%20Coffee-grey?logo=Ko-fi&#34; alt=&#34;Coffee&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snapcraft.io/btop&#34;&gt;&lt;img src=&#34;https://snapcraft.io/btop/badge.svg?sanitize=true&#34; alt=&#34;btop&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Continuous Build Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-macos.yml&#34;&gt;&lt;img src=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-macos.yml/badge.svg?sanitize=true&#34; alt=&#34;Continuous Build MacOS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Index&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#news&#34;&gt;News&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#documents&#34;&gt;Documents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#themes&#34;&gt;Themes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#support-and-funding&#34;&gt;Support and funding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; (Read this if you are having issues!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#help-menu&#34;&gt;Keybindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#installation&#34;&gt;Installation Linux/OSX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#compilation-linux&#34;&gt;Compilation Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#compilation-osx&#34;&gt;Compilation OSX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#compilation-freebsd&#34;&gt;Compilation FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#installing-the-snap&#34;&gt;Installing the snap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#configurability&#34;&gt;Configurability&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;h5&gt;16 January 2022&lt;/h5&gt; &#xA;&lt;p&gt;Release v1.2.0 with FreeBSD support. No release binaries for FreeBSD provided as of yet.&lt;/p&gt; &#xA;&lt;p&gt;Again a big thanks to &lt;a href=&#34;https://github.com/joske&#34;&gt;@joske&lt;/a&gt; for his porting efforts!&lt;/p&gt; &#xA;&lt;p&gt;Since compatibility with Linux, MacOS and FreeBSD are done, the focus going forward will be on new features like GPU monitoring.&lt;/p&gt; &#xA;&lt;h5&gt;13 November 2021&lt;/h5&gt; &#xA;&lt;p&gt;Release v1.1.0 with OSX support. Binaries in &lt;a href=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-macos.yml&#34;&gt;continuous-build-macos&lt;/a&gt; are only x86 for now. Macos binaries + installer are included for both x86 and ARM64 (Apple Silicon) in the releases.&lt;/p&gt; &#xA;&lt;p&gt;Big thank you to &lt;a href=&#34;https://github.com/joske&#34;&gt;@joske&lt;/a&gt; who wrote the vast majority of the implementation!&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;More...&lt;/summary&gt; &#xA; &lt;h5&gt;30 October 2021&lt;/h5&gt; &#xA; &lt;p&gt;Work on the OSX and FreeBSD branches, both initiated and mostly worked on by &lt;a href=&#34;https://github.com/joske&#34;&gt;@joske&lt;/a&gt;, will likely be completed in the coming weeks. The OSX branch has some memory leaks that needs to be sorted out and both have some issues with the processes cpu usage calculation and other smaller issues that needs fixing.&lt;/p&gt; &#xA; &lt;p&gt;If you want to help out, test for bugs/fix bugs or just try out the branches:&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install and use Homebrew or MacPorts package managers for easy dependency installation&#xA;brew install coreutils make gcc@11&#xA;git clone https://github.com/aristocratos/btop.git&#xA;cd btop&#xA;git checkout OSX&#xA;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;FreeBSD&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pkg install gmake gcc11 coreutils git&#xA;git clone https://github.com/aristocratos/btop.git&#xA;cd btop&#xA;git checkout freebsd&#xA;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Note that GNU make (&lt;code&gt;gmake&lt;/code&gt;) is recommended but not required for OSX but it is required on FreeBSD.&lt;/p&gt; &#xA; &lt;h5&gt;6 October 2021&lt;/h5&gt; &#xA; &lt;p&gt;OsX development have been started by &lt;a href=&#34;https://github.com/joske&#34;&gt;@joske&lt;/a&gt;, big thanks :) See branch &lt;a href=&#34;https://github.com/aristocratos/btop/tree/OSX&#34;&gt;OSX&lt;/a&gt; for current progress.&lt;/p&gt; &#xA; &lt;h5&gt;18 September 2021&lt;/h5&gt; &#xA; &lt;p&gt;The Linux version of btop++ is complete. Released as version 1.0.0&lt;/p&gt; &#xA; &lt;p&gt;I will be providing statically compiled binaries for a range of architectures in every release for those having problems compiling.&lt;/p&gt; &#xA; &lt;p&gt;For compilation GCC 10 is required, GCC 11 preferred.&lt;/p&gt; &#xA; &lt;p&gt;Please report any bugs to the &lt;a href=&#34;https://github.com/aristocratos/btop/issues/new?assignees=aristocratos&amp;amp;labels=bug&amp;amp;template=bug_report.md&amp;amp;title=%5BBUG%5D&#34;&gt;Issues&lt;/a&gt; page.&lt;/p&gt; &#xA; &lt;p&gt;The development plan right now:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;1.1.0 Mac OsX support&lt;/li&gt; &#xA;  &lt;li&gt;1.2.0 FreeBSD support&lt;/li&gt; &#xA;  &lt;li&gt;1.3.0 Support for GPU monitoring&lt;/li&gt; &#xA;  &lt;li&gt;1.X.0 Other platforms and features...&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Windows support is not in the plans as of now, but if anyone else wants to take it on, I will try to help.&lt;/p&gt; &#xA; &lt;h5&gt;5 May 2021&lt;/h5&gt; &#xA; &lt;p&gt;This project is gonna take some time until it has complete feature parity with bpytop, since all system information gathering will have to be written from scratch without any external libraries. And will need some help in the form of code contributions to get complete support for BSD and OSX.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Documents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT.md&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Resource monitor that shows usage and stats for processor, memory, disks, network and processes.&lt;/p&gt; &#xA;&lt;p&gt;C++ version and continuation of &lt;a href=&#34;https://github.com/aristocratos/bashtop&#34;&gt;bashtop&lt;/a&gt; and &lt;a href=&#34;https://github.com/aristocratos/bpytop&#34;&gt;bpytop&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to use, with a game inspired menu system.&lt;/li&gt; &#xA; &lt;li&gt;Full mouse support, all buttons with a highlighted key is clickable and mouse scroll works in process list and menu boxes.&lt;/li&gt; &#xA; &lt;li&gt;Fast and responsive UI with UP, DOWN keys process selection.&lt;/li&gt; &#xA; &lt;li&gt;Function for showing detailed stats for selected process.&lt;/li&gt; &#xA; &lt;li&gt;Ability to filter processes.&lt;/li&gt; &#xA; &lt;li&gt;Easy switching between sorting options.&lt;/li&gt; &#xA; &lt;li&gt;Tree view of processes.&lt;/li&gt; &#xA; &lt;li&gt;Send any signal to selected process.&lt;/li&gt; &#xA; &lt;li&gt;UI menu for changing all config file options.&lt;/li&gt; &#xA; &lt;li&gt;Auto scaling graph for network usage.&lt;/li&gt; &#xA; &lt;li&gt;Shows IO activity and speeds for disks&lt;/li&gt; &#xA; &lt;li&gt;Battery meter&lt;/li&gt; &#xA; &lt;li&gt;Selectable symbols for the graphs&lt;/li&gt; &#xA; &lt;li&gt;Custom presets&lt;/li&gt; &#xA; &lt;li&gt;And more...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Themes&lt;/h2&gt; &#xA;&lt;p&gt;Btop++ uses the same theme files as bpytop and bashtop (some color values missing in bashtop themes) .&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/aristocratos/btop/tree/master/themes&#34;&gt;themes&lt;/a&gt; folder for available themes.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;make install&lt;/code&gt; command places the default themes in &lt;code&gt;[$PREFIX or /usr/local]/share/btop/themes&lt;/code&gt;. User created themes should be placed in &lt;code&gt;$XDG_CONFIG_HOME/btop/themes&lt;/code&gt; or &lt;code&gt;$HOME/.config/btop/themes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let me know if you want to contribute with new themes.&lt;/p&gt; &#xA;&lt;h2&gt;Support and funding&lt;/h2&gt; &#xA;&lt;p&gt;You can sponsor this project through github, see &lt;a href=&#34;https://github.com/sponsors/aristocratos&#34;&gt;my sponsors page&lt;/a&gt; for options.&lt;/p&gt; &#xA;&lt;p&gt;Or donate through &lt;a href=&#34;https://paypal.me/aristocratos&#34;&gt;paypal&lt;/a&gt; or &lt;a href=&#34;https://ko-fi.com/aristocratos&#34;&gt;ko-fi&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any support is greatly appreciated!&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;For best experience, a terminal with support for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;24-bit truecolor (&lt;a href=&#34;https://gist.github.com/XVilka/8346728&#34;&gt;See list of terminals with truecolor support&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;256-color terminals are supported through 24-bit to 256-color conversion when setting &#34;truecolor&#34; to False in the options or with &#34;-lc/--low-color&#34; arguments.&lt;/li&gt; &#xA; &lt;li&gt;16 color TTY mode will be activated if a real tty device is detected. Can be forced with &#34;-t/--tty_on&#34; arguments.&lt;/li&gt; &#xA; &lt;li&gt;Wide characters (Are sometimes problematic in web-based terminals)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also needs a UTF8 locale and a font that covers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unicode Block “Braille Patterns” U+2800 - U+28FF (Not needed in TTY mode or with graphs set to type: block or tty.)&lt;/li&gt; &#xA; &lt;li&gt;Unicode Block “Geometric Shapes” U+25A0 - U+25FF&lt;/li&gt; &#xA; &lt;li&gt;Unicode Block &#34;Box Drawing&#34; and &#34;Block Elements&#34; U+2500 - U+259F&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Notice (Text rendering issues)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are having problems with the characters in the graphs not looking like they do in the screenshots, it&#39;s likely a problem with your systems configured fallback font not having support for braille characters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/Terminus/terminus-ttf-4.40.1&#34;&gt;Terminess Powerline&lt;/a&gt; for an example of a font that includes the braille symbols.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See comments by @sgleizes &lt;a href=&#34;https://github.com/aristocratos/bpytop/issues/100#issuecomment-684036827&#34;&gt;link&lt;/a&gt; and @XenHat &lt;a href=&#34;https://github.com/aristocratos/bpytop/issues/100#issuecomment-691585587&#34;&gt;link&lt;/a&gt; in issue #100 for possible solutions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If text are misaligned and you are using Konsole or Yakuake, turning off &#34;Bi-Directional text rendering&#34; is a possible fix.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Characters clipping in to each other or text/border misalignments is not bugs caused by btop, but most likely a fontconfig or terminal problem where the braille characters making up the graphs aren&#39;t rendered correctly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Look to the creators of the terminal emulator you use to fix these issues if the previous mentioned fixes don&#39;t work for you.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h4&gt;Main UI showing details for a selected process&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/Img/normal.png&#34; alt=&#34;Screenshot 1&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Main UI in TTY mode&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/Img/tty.png&#34; alt=&#34;Screenshot 2&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Main UI with custom options&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/Img/alt.png&#34; alt=&#34;Screenshot 3&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Main-menu&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/Img/main-menu.png&#34; alt=&#34;Screenshot 3&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Options-menu&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/Img/options-menu.png&#34; alt=&#34;Screenshot 4&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Help-menu&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/Img/help-menu.png&#34; alt=&#34;Screenshot 5&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Binaries for Linux are statically compiled with musl and works on kernel 2.6.39 and newer&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Download btop-(VERSION)-(ARCH)-(PLATFORM).tbz from &lt;a href=&#34;https://github.com/aristocratos/btop/releases/latest&#34;&gt;latest release&lt;/a&gt; and unpack to a new folder&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Notice! Use x86_64 for 64-bit x86 systems, i486 and i686 are 32-bit!&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install (from created folder)&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Run install.sh or:&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# use &#34;make install PREFIX=/target/dir&#34; to set target, default: /usr/local&#xA;# only use &#34;sudo&#34; when installing to a NON user owned directory&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;(Optional) Set suid bit to make btop always run as root (or other user)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Enables signal sending to any process without starting with &lt;code&gt;sudo&lt;/code&gt; and can prevent /proc read permissions problems on some systems.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Run setuid.sh or:&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run after make install and use same PREFIX if any was used at install&#xA;# set SU_USER and SU_GROUP to select user and group, default is root:root&#xA;sudo make setuid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Run uninstall.sh or:&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Show help&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Binary release (from native os repo)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;openSUSE&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Tumbleweed:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo zypper in btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;For all other versions, see &lt;a href=&#34;https://software.opensuse.org/package/btop&#34;&gt;openSUSE Software: btop&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Binary release on Homebrew (macOS (x86_64 &amp;amp; ARM64) / Linux (x86_64))&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://formulae.brew.sh/formula/btop&#34;&gt;Homebrew&lt;/a&gt;&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compilation Linux&lt;/h2&gt; &#xA;&lt;p&gt;Needs GCC 10 or higher, (GCC 11 or above strongly recommended for better CPU efficiency in the compiled binary).&lt;/p&gt; &#xA;&lt;p&gt;The makefile also needs GNU coreutils and &lt;code&gt;sed&lt;/code&gt; (should already be installed on any modern distribution).&lt;/p&gt; &#xA;&lt;p&gt;For a &lt;code&gt;cmake&lt;/code&gt; based build alternative see the &lt;a href=&#34;https://github.com/jan-guenter/btop/tree/main&#34;&gt;fork&lt;/a&gt; by @jan-guenter&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install dependencies (example for Ubuntu 21.04 Hirsute)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Use gcc-10 g++-10 if gcc-11 isn&#39;t available&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install coreutils sed git build-essential gcc-11 g++-11&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aristocratos/btop.git&#xA;cd btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;STATIC=true&lt;/code&gt; to &lt;code&gt;make&lt;/code&gt; command for static compilation.&lt;/p&gt; &lt;p&gt;Notice! If using LDAP Authentication, usernames will show as UID number for LDAP users if compiling statically with glibc.&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;QUIET=true&lt;/code&gt; for less verbose output.&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;STRIP=true&lt;/code&gt; to force stripping of debug symbols (adds &lt;code&gt;-s&lt;/code&gt; linker flag).&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;ARCH=&amp;lt;architecture&amp;gt;&lt;/code&gt; to manually set the target architecture. If omitted the makefile uses the machine triple (output of &lt;code&gt;-dumpmachine&lt;/code&gt; compiler parameter) to detect the target system.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;ADDFLAGS&lt;/code&gt; variable for appending flags to both compiler and linker.&lt;/p&gt; &lt;p&gt;For example: &lt;code&gt;ADDFLAGS=-march=native&lt;/code&gt; might give a performance boost if compiling only for your own system.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;g++&lt;/code&gt; is linked to an older version of gcc on your system specify the correct version by appending &lt;code&gt;CXX=g++-10&lt;/code&gt; or &lt;code&gt;CXX=g++-11&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;PREFIX=/target/dir&lt;/code&gt; to set target, default: &lt;code&gt;/usr/local&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Notice! Only use &#34;sudo&#34; when installing to a NON user owned directory.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;(Optional) Set suid bit to make btop always run as root (or other user)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;No need for &lt;code&gt;sudo&lt;/code&gt; to enable signal sending to any process and to prevent /proc read permissions problems on some systems.&lt;/p&gt; &lt;p&gt;Run after make install and use same PREFIX if any was used at install.&lt;/p&gt; &lt;p&gt;Set &lt;code&gt;SU_USER&lt;/code&gt; and &lt;code&gt;SU_GROUP&lt;/code&gt; to select user and group, default is &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make setuid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove any object files from source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove all object files, binaries and created directories in source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make distclean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Show help&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compilation OSX&lt;/h2&gt; &#xA;&lt;p&gt;Needs GCC 10 or higher, (GCC 11 or above strongly recommended for better CPU efficiency in the compiled binary).&lt;/p&gt; &#xA;&lt;p&gt;The makefile also needs GNU coreutils and &lt;code&gt;sed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install and use Homebrew or MacPorts package managers for easy dependency installation&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install dependencies (example for Homebrew)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install coreutils make gcc@11&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aristocratos/btop.git&#xA;cd btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;STATIC=true&lt;/code&gt; to &lt;code&gt;make&lt;/code&gt; command for static compilation (only libgcc and libstdc++ will be static!).&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;QUIET=true&lt;/code&gt; for less verbose output.&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;STRIP=true&lt;/code&gt; to force stripping of debug symbols (adds &lt;code&gt;-s&lt;/code&gt; linker flag).&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;ARCH=&amp;lt;architecture&amp;gt;&lt;/code&gt; to manually set the target architecture. If omitted the makefile uses the machine triple (output of &lt;code&gt;-dumpmachine&lt;/code&gt; compiler parameter) to detect the target system.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;ADDFLAGS&lt;/code&gt; variable for appending flags to both compiler and linker.&lt;/p&gt; &lt;p&gt;For example: &lt;code&gt;ADDFLAGS=-march=native&lt;/code&gt; might give a performance boost if compiling only for your own system.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;PREFIX=/target/dir&lt;/code&gt; to set target, default: &lt;code&gt;/usr/local&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Notice! Only use &#34;sudo&#34; when installing to a NON user owned directory.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;(Recommended) Set suid bit to make btop always run as root (or other user)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;No need for &lt;code&gt;sudo&lt;/code&gt; to see information for non user owned processes and to enable signal sending to any process.&lt;/p&gt; &lt;p&gt;Run after make install and use same PREFIX if any was used at install.&lt;/p&gt; &lt;p&gt;Set &lt;code&gt;SU_USER&lt;/code&gt; and &lt;code&gt;SU_GROUP&lt;/code&gt; to select user and group, default is &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;wheel&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake setuid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove any object files from source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove all object files, binaries and created directories in source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake distclean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Show help&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compilation FreeBSD&lt;/h2&gt; &#xA;&lt;p&gt;Needs GCC 10 or higher, (GCC 11 or above strongly recommended for better CPU efficiency in the compiled binary).&lt;/p&gt; &#xA;&lt;p&gt;Note that GNU make (&lt;code&gt;gmake&lt;/code&gt;) is required to compile on FreeBSD.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install dependencies&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pkg install gmake gcc11 coreutils git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aristocratos/btop.git&#xA;cd btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;STATIC=true&lt;/code&gt; to &lt;code&gt;make&lt;/code&gt; command for static compilation.&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;QUIET=true&lt;/code&gt; for less verbose output.&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;STRIP=true&lt;/code&gt; to force stripping of debug symbols (adds &lt;code&gt;-s&lt;/code&gt; linker flag).&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;ARCH=&amp;lt;architecture&amp;gt;&lt;/code&gt; to manually set the target architecture. If omitted the makefile uses the machine triple (output of &lt;code&gt;-dumpmachine&lt;/code&gt; compiler parameter) to detect the target system.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;ADDFLAGS&lt;/code&gt; variable for appending flags to both compiler and linker.&lt;/p&gt; &lt;p&gt;For example: &lt;code&gt;ADDFLAGS=-march=native&lt;/code&gt; might give a performance boost if compiling only for your own system.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Append &lt;code&gt;PREFIX=/target/dir&lt;/code&gt; to set target, default: &lt;code&gt;/usr/local&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Notice! Only use &#34;sudo&#34; when installing to a NON user owned directory.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;(Recommended) Set suid bit to make btop always run as root (or other user)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;No need for &lt;code&gt;sudo&lt;/code&gt; to see information for non user owned processes and to enable signal sending to any process.&lt;/p&gt; &lt;p&gt;Run after make install and use same PREFIX if any was used at install.&lt;/p&gt; &lt;p&gt;Set &lt;code&gt;SU_USER&lt;/code&gt; and &lt;code&gt;SU_GROUP&lt;/code&gt; to select user and group, default is &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;wheel&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake setuid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove any object files from source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove all object files, binaries and created directories in source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake distclean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Show help&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing the snap&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://snapcraft.io/btop&#34;&gt;&lt;img src=&#34;https://snapcraft.io/btop/badge.svg?sanitize=true&#34; alt=&#34;btop&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install the snap&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo snap install btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install the latest snap from the edge channel&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo snap install btop --edge&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Connect the interface&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo snap connect btop:removable-media&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configurability&lt;/h2&gt; &#xA;&lt;p&gt;All options changeable from within UI. Config and log files stored in &lt;code&gt;$XDG_CONFIG_HOME/btop&lt;/code&gt; or &lt;code&gt;$HOME/.config/btop&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;h4&gt;btop.conf: (auto generated if not found)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#? Config file for btop v. 1.2.2&#xA;&#xA;#* Name of a btop++/bpytop/bashtop formatted &#34;.theme&#34; file, &#34;Default&#34; and &#34;TTY&#34; for builtin themes.&#xA;#* Themes should be placed in &#34;../share/btop/themes&#34; relative to binary or &#34;$HOME/.config/btop/themes&#34;&#xA;color_theme = &#34;Default&#34;&#xA;&#xA;#* If the theme set background should be shown, set to False if you want terminal background transparency.&#xA;theme_background = True&#xA;&#xA;#* Sets if 24-bit truecolor should be used, will convert 24-bit colors to 256 color (6x6x6 color cube) if false.&#xA;truecolor = True&#xA;&#xA;#* Set to true to force tty mode regardless if a real tty has been detected or not.&#xA;#* Will force 16-color mode and TTY theme, set all graph symbols to &#34;tty&#34; and swap out other non tty friendly symbols.&#xA;force_tty = False&#xA;&#xA;#* Define presets for the layout of the boxes. Preset 0 is always all boxes shown with default settings. Max 9 presets.&#xA;#* Format: &#34;box_name:P:G,box_name:P:G&#34; P=(0 or 1) for alternate positions, G=graph symbol to use for box.&#xA;#* Use withespace &#34; &#34; as separator between different presets.&#xA;#* Example: &#34;cpu:0:default,mem:0:tty,proc:1:default cpu:0:braille,proc:0:tty&#34;&#xA;presets = &#34;cpu:1:default,proc:0:default cpu:0:default,mem:0:default,net:0:default cpu:0:block,net:0:tty&#34;&#xA;&#xA;#* Set to True to enable &#34;h,j,k,l,g,G&#34; keys for directional control in lists.&#xA;#* Conflicting keys for h:&#34;help&#34; and k:&#34;kill&#34; is accessible while holding shift.&#xA;vim_keys = False&#xA;&#xA;#* Rounded corners on boxes, is ignored if TTY mode is ON.&#xA;rounded_corners = True&#xA;&#xA;#* Default symbols to use for graph creation, &#34;braille&#34;, &#34;block&#34; or &#34;tty&#34;.&#xA;#* &#34;braille&#34; offers the highest resolution but might not be included in all fonts.&#xA;#* &#34;block&#34; has half the resolution of braille but uses more common characters.&#xA;#* &#34;tty&#34; uses only 3 different symbols but will work with most fonts and should work in a real TTY.&#xA;#* Note that &#34;tty&#34; only has half the horizontal resolution of the other two, so will show a shorter historical view.&#xA;graph_symbol = &#34;braille&#34;&#xA;&#xA;# Graph symbol to use for graphs in cpu box, &#34;default&#34;, &#34;braille&#34;, &#34;block&#34; or &#34;tty&#34;.&#xA;graph_symbol_cpu = &#34;default&#34;&#xA;&#xA;# Graph symbol to use for graphs in cpu box, &#34;default&#34;, &#34;braille&#34;, &#34;block&#34; or &#34;tty&#34;.&#xA;graph_symbol_mem = &#34;default&#34;&#xA;&#xA;# Graph symbol to use for graphs in cpu box, &#34;default&#34;, &#34;braille&#34;, &#34;block&#34; or &#34;tty&#34;.&#xA;graph_symbol_net = &#34;default&#34;&#xA;&#xA;# Graph symbol to use for graphs in cpu box, &#34;default&#34;, &#34;braille&#34;, &#34;block&#34; or &#34;tty&#34;.&#xA;graph_symbol_proc = &#34;default&#34;&#xA;&#xA;#* Manually set which boxes to show. Available values are &#34;cpu mem net proc&#34;, separate values with whitespace.&#xA;shown_boxes = &#34;proc cpu mem net&#34;&#xA;&#xA;#* Update time in milliseconds, recommended 2000 ms or above for better sample times for graphs.&#xA;update_ms = 1500&#xA;&#xA;#* Processes sorting, &#34;pid&#34; &#34;program&#34; &#34;arguments&#34; &#34;threads&#34; &#34;user&#34; &#34;memory&#34; &#34;cpu lazy&#34; &#34;cpu responsive&#34;,&#xA;#* &#34;cpu lazy&#34; sorts top process over time (easier to follow), &#34;cpu responsive&#34; updates top process directly.&#xA;proc_sorting = &#34;cpu lazy&#34;&#xA;&#xA;#* Reverse sorting order, True or False.&#xA;proc_reversed = False&#xA;&#xA;#* Show processes as a tree.&#xA;proc_tree = False&#xA;&#xA;#* Use the cpu graph colors in the process list.&#xA;proc_colors = True&#xA;&#xA;#* Use a darkening gradient in the process list.&#xA;proc_gradient = True&#xA;&#xA;#* If process cpu usage should be of the core it&#39;s running on or usage of the total available cpu power.&#xA;proc_per_core = True&#xA;&#xA;#* Show process memory as bytes instead of percent.&#xA;proc_mem_bytes = True&#xA;&#xA;#* Use /proc/[pid]/smaps for memory information in the process info box (very slow but more accurate)&#xA;proc_info_smaps = False&#xA;&#xA;#* Show proc box on left side of screen instead of right.&#xA;proc_left = False&#xA;&#xA;#* Sets the CPU stat shown in upper half of the CPU graph, &#34;total&#34; is always available.&#xA;#* Select from a list of detected attributes from the options menu.&#xA;cpu_graph_upper = &#34;total&#34;&#xA;&#xA;#* Sets the CPU stat shown in lower half of the CPU graph, &#34;total&#34; is always available.&#xA;#* Select from a list of detected attributes from the options menu.&#xA;cpu_graph_lower = &#34;total&#34;&#xA;&#xA;#* Toggles if the lower CPU graph should be inverted.&#xA;cpu_invert_lower = True&#xA;&#xA;#* Set to True to completely disable the lower CPU graph.&#xA;cpu_single_graph = False&#xA;&#xA;#* Show cpu box at bottom of screen instead of top.&#xA;cpu_bottom = False&#xA;&#xA;#* Shows the system uptime in the CPU box.&#xA;show_uptime = True&#xA;&#xA;#* Show cpu temperature.&#xA;check_temp = True&#xA;&#xA;#* Which sensor to use for cpu temperature, use options menu to select from list of available sensors.&#xA;cpu_sensor = &#34;Auto&#34;&#xA;&#xA;#* Show temperatures for cpu cores also if check_temp is True and sensors has been found.&#xA;show_coretemp = True&#xA;&#xA;#* Set a custom mapping between core and coretemp, can be needed on certain cpus to get correct temperature for correct core.&#xA;#* Use lm-sensors or similar to see which cores are reporting temperatures on your machine.&#xA;#* Format &#34;x:y&#34; x=core with wrong temp, y=core with correct temp, use space as separator between multiple entries.&#xA;#* Example: &#34;4:0 5:1 6:3&#34;&#xA;cpu_core_map = &#34;&#34;&#xA;&#xA;#* Which temperature scale to use, available values: &#34;celsius&#34;, &#34;fahrenheit&#34;, &#34;kelvin&#34; and &#34;rankine&#34;.&#xA;temp_scale = &#34;celsius&#34;&#xA;&#xA;#* Use base 10 for bits/bytes sizes, KB = 1000 instead of KiB = 1024.&#xA;base_10_sizes = False&#xA;&#xA;#* Show CPU frequency.&#xA;show_cpu_freq = True&#xA;&#xA;#* Draw a clock at top of screen, formatting according to strftime, empty string to disable.&#xA;#* Special formatting: /host = hostname | /user = username | /uptime = system uptime&#xA;clock_format = &#34;%H:%M&#34;&#xA;&#xA;#* Update main ui in background when menus are showing, set this to false if the menus is flickering too much for comfort.&#xA;background_update = True&#xA;&#xA;#* Custom cpu model name, empty string to disable.&#xA;custom_cpu_name = &#34;&#34;&#xA;&#xA;#* Optional filter for shown disks, should be full path of a mountpoint, separate multiple values with whitespace &#34; &#34;.&#xA;#* Begin line with &#34;exclude=&#34; to change to exclude filter, otherwise defaults to &#34;most include&#34; filter. Example: disks_filter=&#34;exclude=/boot /home/user&#34;.&#xA;disks_filter = &#34;exclude=/boot&#34;&#xA;&#xA;#* Show graphs instead of meters for memory values.&#xA;mem_graphs = True&#xA;&#xA;#* Show mem box below net box instead of above.&#xA;mem_below_net = False&#xA;&#xA;#* If swap memory should be shown in memory box.&#xA;show_swap = True&#xA;&#xA;#* Show swap as a disk, ignores show_swap value above, inserts itself after first disk.&#xA;swap_disk = True&#xA;&#xA;#* If mem box should be split to also show disks info.&#xA;show_disks = True&#xA;&#xA;#* Filter out non physical disks. Set this to False to include network disks, RAM disks and similar.&#xA;only_physical = True&#xA;&#xA;#* Read disks list from /etc/fstab. This also disables only_physical.&#xA;use_fstab = False&#xA;&#xA;#* Set to true to show available disk space for privileged users.&#xA;disk_free_priv = False&#xA;&#xA;#* Toggles if io activity % (disk busy time) should be shown in regular disk usage view.&#xA;show_io_stat = True&#xA;&#xA;#* Toggles io mode for disks, showing big graphs for disk read/write speeds.&#xA;io_mode = False&#xA;&#xA;#* Set to True to show combined read/write io graphs in io mode.&#xA;io_graph_combined = False&#xA;&#xA;#* Set the top speed for the io graphs in MiB/s (100 by default), use format &#34;mountpoint:speed&#34; separate disks with whitespace &#34; &#34;.&#xA;#* Example: &#34;/mnt/media:100 /:20 /boot:1&#34;.&#xA;io_graph_speeds = &#34;&#34;&#xA;&#xA;#* Set fixed values for network graphs in Mebibits. Is only used if net_auto is also set to False.&#xA;net_download = 100&#xA;&#xA;net_upload = 100&#xA;&#xA;#* Use network graphs auto rescaling mode, ignores any values set above and rescales down to 10 Kibibytes at the lowest.&#xA;net_auto = True&#xA;&#xA;#* Sync the auto scaling for download and upload to whichever currently has the highest scale.&#xA;net_sync = False&#xA;&#xA;#* Starts with the Network Interface specified here.&#xA;net_iface = &#34;br0&#34;&#xA;&#xA;#* Show battery stats in top right if battery is present.&#xA;show_battery = True&#xA;&#xA;#* Which battery to use if multiple are present. &#34;Auto&#34; for auto detection.&#xA;selected_battery = &#34;Auto&#34;&#xA;&#xA;#* Set loglevel for &#34;~/.config/btop/btop.log&#34; levels are: &#34;ERROR&#34; &#34;WARNING&#34; &#34;INFO&#34; &#34;DEBUG&#34;.&#xA;#* The level set includes all lower levels, i.e. &#34;DEBUG&#34; will show all logging info.&#xA;log_level = &#34;DEBUG&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Command line options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;usage: btop [-h] [-v] [-/+t] [-p &amp;lt;id&amp;gt;] [--utf-force] [--debug]&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;  -v, --version         show version info and exit&#xA;  -lc, --low-color      disable truecolor, converts 24-bit colors to 256-color&#xA;  -t, --tty_on          force (ON) tty mode, max 16 colors and tty friendly graph symbols&#xA;  +t, --tty_off         force (OFF) tty mode&#xA;  -p, --preset &amp;lt;id&amp;gt;     start with preset, integer value between 0-9&#xA;  --utf-force           force start even if no UTF-8 locale was detected&#xA;  --debug               start in DEBUG mode: shows microsecond timer for information collect&#xA;                        and screen draw functions and sets loglevel to DEBUG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>x64dbg/x64dbg</title>
    <updated>2022-06-03T01:58:28Z</updated>
    <id>tag:github.com,2022-06-03:/x64dbg/x64dbg</id>
    <link href="https://github.com/x64dbg/x64dbg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source x64/x32 debugger for windows.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;x64dbg&lt;/h1&gt; &#xA;&lt;img width=&#34;100&#34; src=&#34;https://github.com/x64dbg/x64dbg/raw/development/src/bug_black.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/mrexodia&#34;&gt;&lt;img src=&#34;https://www.bountysource.com/badge/team?team_id=18188&amp;amp;style=raised&#34; alt=&#34;BountySource&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/mrexodia/x64dbg&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/h1j489qa1mx67e0h?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/x64dbg/x64dbg&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/x64dbg/x64dbg/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://translate.x64dbg.com&#34;&gt;&lt;img src=&#34;https://d322cqt584bo4o.cloudfront.net/x64dbg/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourceforge.net/projects/x64dbg/files/latest/download&#34;&gt;&lt;img src=&#34;https://img.shields.io/sourceforge/dm/x64dbg.svg?sanitize=true&#34; alt=&#34;Download x64dbg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://telegram.me/x64dbg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-%20on%20Telegram-blue.svg?sanitize=true&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://invite.gg/x64dbg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20Discord-green.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://x64dbg-slack.herokuapp.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20Slack-red.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/x64dbg/x64dbg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20Gitter-lightseagreen.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://webchat.freenode.net/?channels=x64dbg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-%20on%20freenode-brightgreen.svg?sanitize=true&#34; alt=&#34;Freenode&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://riot.im/app/#/room/#x64dbg:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20Matrix-yellowgreen.svg?sanitize=true&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://inverse.chat/#converse/room?jid=x64dbg@conference.jwchat.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-%20on%20XMPP-orange.svg?sanitize=true&#34; alt=&#34;XMPP&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An open-source binary debugger for Windows, aimed at malware analysis and reverse engineering of executables you do not have the source code for. There are many features available and a comprehensive &lt;a href=&#34;http://plugins.x64dbg.com&#34;&gt;plugin system&lt;/a&gt; to add your own. You can find more information on the &lt;a href=&#34;https://x64dbg.com/blog&#34;&gt;blog&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/V2f5AP9.png&#34; alt=&#34;main interface&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gVjzntJ.png&#34; alt=&#34;graph&#34;&gt; &lt;img src=&#34;https://i.imgur.com/cLJwTjY.png&#34; alt=&#34;memory map&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download a snapshot from &lt;a href=&#34;https://github.com/x64dbg/x64dbg/releases&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://sourceforge.net/projects/x64dbg/files/snapshots&#34;&gt;SourceForge&lt;/a&gt; or &lt;a href=&#34;https://osdn.net/projects/x64dbg&#34;&gt;OSDN&lt;/a&gt; and extract it in a location your user has write access to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Optionally&lt;/em&gt; use &lt;code&gt;x96dbg.exe&lt;/code&gt; to register a shell extension and add shortcuts to your desktop.&lt;/li&gt; &#xA; &lt;li&gt;You can now run &lt;code&gt;x32\x32dbg.exe&lt;/code&gt; if you want to debug a 32-bit executable or &lt;code&gt;x64\x64dbg.exe&lt;/code&gt; to debug a 64-bit executable! If you are unsure you can always run &lt;code&gt;x96dbg.exe&lt;/code&gt; and chose your architecture there.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://github.com/x64dbg/x64dbg/wiki/Compiling-the-whole-project&#34;&gt;compile&lt;/a&gt; x64dbg yourself with a few easy steps!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This is a community effort and we accept pull requests! See the &lt;a href=&#34;https://github.com/x64dbg/x64dbg/raw/development/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document for more information. If you have any questions you can always &lt;a href=&#34;https://x64dbg.com/#contact&#34;&gt;contact us&lt;/a&gt; or open an &lt;a href=&#34;https://github.com/x64dbg/x64dbg/issues&#34;&gt;issue&lt;/a&gt;. You can take a look at the &lt;a href=&#34;https://github.com/x64dbg/x64dbg/issues?q=is%3Aissue+is%3Aopen+label%3Aeasy&#34;&gt;easy issues&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debugger core by &lt;a href=&#34;https://github.com/x64dbg/TitanEngine&#34;&gt;TitanEngine Community Edition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Disassembly powered by &lt;a href=&#34;https://zydis.re&#34;&gt;Zydis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Assembly powered by &lt;a href=&#34;https://github.com/x64dbg/XEDParse&#34;&gt;XEDParse&lt;/a&gt; and &lt;a href=&#34;https://github.com/asmjit&#34;&gt;asmjit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Import reconstruction powered by &lt;a href=&#34;https://github.com/NtQuery/Scylla&#34;&gt;Scylla&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON powered by &lt;a href=&#34;https://www.digip.org/jansson&#34;&gt;Jansson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Database compression powered by &lt;a href=&#34;https://bitbucket.org/mrexodia/lz4&#34;&gt;lz4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bug icon by &lt;a href=&#34;https://www.visualpharm.com&#34;&gt;VisualPharm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interface icons by &lt;a href=&#34;https://p.yusukekamiyamane.com&#34;&gt;Fugue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Website by &lt;a href=&#34;https://tr4ceflow.com&#34;&gt;tr4ceflow&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrexodia.github.io&#34;&gt;mrexodia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sigma&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.tr4ceflow.com&#34;&gt;tr4ceflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fr33project.org&#34;&gt;Dreg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Nukem9&#34;&gt;Nukem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Herz3h&#34;&gt;Herz3h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/torusrxxx&#34;&gt;torusrxxx&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code contributions&lt;/h2&gt; &#xA;&lt;p&gt;You can find an exhaustive list of GitHub contributors &lt;a href=&#34;https://github.com/x64dbg/x64dbg/graphs/contributors&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sigma for developing the initial GUI&lt;/li&gt; &#xA; &lt;li&gt;All the &lt;a href=&#34;https://www.bountysource.com/teams/x64dbg/backers&#34;&gt;donators&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Everybody adding issues!&lt;/li&gt; &#xA; &lt;li&gt;People I forgot to add to this list&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://x64dbg.com/blog/2016/07/09/Looking-for-writers.html&#34;&gt;Writers of the blog&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.exetools.com&#34;&gt;EXETools community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.tuts4you.com&#34;&gt;Tuts4You community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/resharper&#34;&gt;ReSharper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.coverity.com&#34;&gt;Coverity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;acidflash&lt;/li&gt; &#xA; &lt;li&gt;cyberbob&lt;/li&gt; &#xA; &lt;li&gt;cypher&lt;/li&gt; &#xA; &lt;li&gt;Teddy Rogers&lt;/li&gt; &#xA; &lt;li&gt;TEAM DVT&lt;/li&gt; &#xA; &lt;li&gt;DMichael&lt;/li&gt; &#xA; &lt;li&gt;Artic&lt;/li&gt; &#xA; &lt;li&gt;ahmadmansoor&lt;/li&gt; &#xA; &lt;li&gt;_pusher_&lt;/li&gt; &#xA; &lt;li&gt;firelegend&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lifeinhex.com&#34;&gt;kao&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;sstrato&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kobalicek&#34;&gt;kobalicek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/athre0z&#34;&gt;athre0z&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ZehMatt&#34;&gt;ZehMatt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Without the help of many people and other open-source projects, it would not have been possible to make x64dbg what is it today, thank you!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vaxerski/Hyprland</title>
    <updated>2022-06-03T01:58:28Z</updated>
    <id>tag:github.com,2022-06-03:/vaxerski/Hyprland</id>
    <link href="https://github.com/vaxerski/Hyprland" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hyprland is a dynamic tiling Wayland compositor that doesn&#39;t sacrifice on its looks.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vaxerski/Hyprland/main/assets/hyprland.png&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/vaxerski/Hyprland/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;Badge Workflow&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/vaxerski/Hyprland/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/vaxerski/Hyprland&#34; alt=&#34;Badge License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/tokei/lines/github/vaxerski/Hyprland&#34; alt=&#34;Badge Lines&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/vaxerski/Hyprland&#34; alt=&#34;Badge Language&#34;&gt; &lt;a href=&#34;https://github.com/vaxerski/Hyprland/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/vaxerski/Hyprland&#34; alt=&#34;Badge Pull Requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vaxerski/Hyprland/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/vaxerski/Hyprland&#34; alt=&#34;Badge Issues&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Hi-mom!-ff69b4&#34; alt=&#34;Badge Hi Mom&#34;&gt;&lt;br&gt; &lt;a href=&#34;https://discord.gg/hQ9XvMUjjr&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Join%20the-Discord%20server-6666ff&#34; alt=&#34;Badge Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;Hyprland is a dynamic tiling Wayland compositor based on wlroots that doesn&#39;t sacrifice on its looks.&lt;/p&gt; &#xA; &lt;p&gt;For Hyprland without the &lt;code&gt;land&lt;/code&gt; part, see &lt;a href=&#34;https://github.com/vaxerski/Hypr&#34;&gt;Hypr&lt;/a&gt;, the Xorg window manager.&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/vaxerski/Hyprland/wiki/Installation&#34;&gt;&lt;kbd&gt; &lt;br&gt; Install &lt;br&gt; &lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;  &lt;strong&gt;&lt;a href=&#34;https://github.com/vaxerski/Hyprland/wiki/Quick-start&#34;&gt;&lt;kbd&gt; &lt;br&gt; Quick Start &lt;br&gt; &lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;  &lt;strong&gt;&lt;a href=&#34;https://github.com/vaxerski/Hyprland/wiki/Configuring-Hyprland&#34;&gt;&lt;kbd&gt; &lt;br&gt; Configure &lt;br&gt; &lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;  &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vaxerski/Hyprland/main/docs/Contribute.md&#34;&gt;&lt;kbd&gt; &lt;br&gt; Contribute &lt;br&gt; &lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Notice&lt;/h1&gt; &#xA;&lt;p&gt;Hyprland is still in pretty early development compared to some other Wayland compositors.&lt;/p&gt; &#xA;&lt;p&gt;Although Hyprland is pretty stable, it may have some bugs.&lt;/p&gt; &#xA;&lt;h3&gt;Help Wanted&lt;/h3&gt; &#xA;&lt;p&gt;Hyprland needs testers! &lt;br&gt; Try it out and report bugs / suggestions!&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easily expandable and readable codebase&lt;/li&gt; &#xA; &lt;li&gt;Config reloaded instantly upon saving&lt;/li&gt; &#xA; &lt;li&gt;Custom bezier curve based animations&lt;/li&gt; &#xA; &lt;li&gt;wlr_ext workspaces protocol support&lt;/li&gt; &#xA; &lt;li&gt;Dual Kawase blur&lt;/li&gt; &#xA; &lt;li&gt;Fully dynamic workspaces&lt;/li&gt; &#xA; &lt;li&gt;Closely follows wlroots-git&lt;/li&gt; &#xA; &lt;li&gt;Bundled wlroots&lt;/li&gt; &#xA; &lt;li&gt;Window / layer fade in / out&lt;/li&gt; &#xA; &lt;li&gt;Tiling / floating / fullscreen windows&lt;/li&gt; &#xA; &lt;li&gt;Special Workspace (Scratchpad)&lt;/li&gt; &#xA; &lt;li&gt;Window / monitor rules&lt;/li&gt; &#xA; &lt;li&gt;Socket-based IPC&lt;/li&gt; &#xA; &lt;li&gt;Event System for bash scripts&lt;/li&gt; &#xA; &lt;li&gt;Rounded corners&lt;/li&gt; &#xA; &lt;li&gt;Full Damage tracking&lt;/li&gt; &#xA; &lt;li&gt;Docks support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Gallery&lt;/h1&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/NbrTnZH.png&#34; alt=&#34;Preview A&#34;&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ZA4Fa8R.png&#34; alt=&#34;Preview B&#34;&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BpXxM8H.png&#34; alt=&#34;Preview C&#34;&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;h1&gt;Stars Over Time&lt;/h1&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://starchart.cc/vaxerski/Hyprland&#34;&gt;&lt;img src=&#34;https://starchart.cc/vaxerski/Hyprland.svg?sanitize=true&#34; alt=&#34;Stars Preview&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Special Thanks&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gitlab.freedesktop.org/wlroots/wlroots&#34;&gt;wlroots&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For their amazing library&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gitlab.freedesktop.org/wlroots/wlroots/-/blob/master/tinywl/tinywl.c&#34;&gt;tinywl&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/swaywm/sway&#34;&gt;Sway&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff the overkill way&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/inclement/vivarium&#34;&gt;Vivarium&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff the simple way&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/djpohly/dwl&#34;&gt;dwl&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff the hacky way&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/WayfireWM/wayfire&#34;&gt;Wayfire&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do some graphics stuff&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!----&gt; &#xA;&lt;!--{ Thanks }---------------------------------&gt; &#xA;&lt;!--{ Images }---------------------------------&gt; &#xA;&lt;!--{ Badges }---------------------------------&gt;</summary>
  </entry>
  <entry>
    <title>fmtlib/fmt</title>
    <updated>2022-06-03T01:58:28Z</updated>
    <id>tag:github.com,2022-06-03:/fmtlib/fmt</id>
    <link href="https://github.com/fmtlib/fmt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern formatting library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/&#34;&gt;https://user-images.githubusercontent.com/&lt;/a&gt; 576385/156254208-f5b743a9-88cf-439d-b0c0-923d53e8d551.png :width: 25% :alt: {fmt}&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/fmtlib/fmt/workflows/linux/badge.svg&#34;&gt;https://github.com/fmtlib/fmt/workflows/linux/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/fmtlib/fmt/actions?query=workflow%3Alinux&#34;&gt;https://github.com/fmtlib/fmt/actions?query=workflow%3Alinux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/fmtlib/fmt/workflows/macos/badge.svg&#34;&gt;https://github.com/fmtlib/fmt/workflows/macos/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/fmtlib/fmt/actions?query=workflow%3Amacos&#34;&gt;https://github.com/fmtlib/fmt/actions?query=workflow%3Amacos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/fmtlib/fmt/workflows/windows/badge.svg&#34;&gt;https://github.com/fmtlib/fmt/workflows/windows/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/fmtlib/fmt/actions?query=workflow%3Awindows&#34;&gt;https://github.com/fmtlib/fmt/actions?query=workflow%3Awindows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://ci.appveyor.com/api/projects/status/ehjkiefde6gucy1v?svg=true&#34;&gt;https://ci.appveyor.com/api/projects/status/ehjkiefde6gucy1v?svg=true&lt;/a&gt; :target: &lt;a href=&#34;https://ci.appveyor.com/project/vitaut/fmt&#34;&gt;https://ci.appveyor.com/project/vitaut/fmt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/fmt.svg&#34;&gt;https://oss-fuzz-build-logs.storage.googleapis.com/badges/fmt.svg&lt;/a&gt; :alt: fmt is continuously fuzzed at oss-fuzz :target: &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?%5C&#34;&gt;https://bugs.chromium.org/p/oss-fuzz/issues/list?\&lt;/a&gt; colspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20&lt;br&gt; Summary&amp;amp;q=proj%3Dfmt&amp;amp;can=1&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/badge/stackoverflow-fmt-blue.svg&#34;&gt;https://img.shields.io/badge/stackoverflow-fmt-blue.svg&lt;/a&gt; :alt: Ask questions at StackOverflow with the tag fmt :target: &lt;a href=&#34;https://stackoverflow.com/questions/tagged/fmt&#34;&gt;https://stackoverflow.com/questions/tagged/fmt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;{fmt}&lt;/strong&gt; is an open-source formatting library providing a fast and safe alternative to C stdio and C++ iostreams.&lt;/p&gt; &#xA;&lt;p&gt;If you like this project, please consider donating to one of the funds that help victims of the war in Ukraine: &lt;a href=&#34;https://www.stopputin.net/&#34;&gt;https://www.stopputin.net/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Documentation &amp;lt;https://fmt.dev&amp;gt;&lt;/code&gt;__&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Cheat Sheets &amp;lt;https://hackingcpp.com/cpp/libs/fmt.html&amp;gt;&lt;/code&gt;__&lt;/p&gt; &#xA;&lt;p&gt;Q&amp;amp;A: ask questions on &lt;code&gt;StackOverflow with the tag fmt &amp;lt;https://stackoverflow.com/questions/tagged/fmt&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;Try {fmt} in &lt;code&gt;Compiler Explorer &amp;lt;https://godbolt.org/z/Eq5763&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple &lt;code&gt;format API &amp;lt;https://fmt.dev/latest/api.html&amp;gt;&lt;/code&gt;_ with positional arguments for localization&lt;/li&gt; &#xA; &lt;li&gt;Implementation of &lt;code&gt;C++20 std::format &amp;lt;https://en.cppreference.com/w/cpp/utility/format&amp;gt;&lt;/code&gt;__&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Format string syntax &amp;lt;https://fmt.dev/latest/syntax.html&amp;gt;&lt;/code&gt;_ similar to Python&#39;s &lt;code&gt;format &amp;lt;https://docs.python.org/3/library/stdtypes.html#str.format&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Fast IEEE 754 floating-point formatter with correct rounding, shortness and round-trip guarantees&lt;/li&gt; &#xA; &lt;li&gt;Safe &lt;code&gt;printf implementation &amp;lt;https://fmt.dev/latest/api.html#printf-formatting&amp;gt;&lt;/code&gt;_ including the POSIX extension for positional arguments&lt;/li&gt; &#xA; &lt;li&gt;Extensibility: &lt;code&gt;support for user-defined types &amp;lt;https://fmt.dev/latest/api.html#formatting-user-defined-types&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;High performance: faster than common standard library implementations of &lt;code&gt;(s)printf&lt;/code&gt;, iostreams, &lt;code&gt;to_string&lt;/code&gt; and &lt;code&gt;to_chars&lt;/code&gt;, see &lt;code&gt;Speed tests&lt;/code&gt;_ and &lt;code&gt;Converting a hundred million integers to strings per second &amp;lt;http://www.zverovich.net/2020/06/13/fast-int-to-string-revisited.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Small code size both in terms of source code with the minimum configuration consisting of just three files, &lt;code&gt;core.h&lt;/code&gt;, &lt;code&gt;format.h&lt;/code&gt; and &lt;code&gt;format-inl.h&lt;/code&gt;, and compiled code; see &lt;code&gt;Compile time and code bloat&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Reliability: the library has an extensive set of &lt;code&gt;tests &amp;lt;https://github.com/fmtlib/fmt/tree/master/test&amp;gt;&lt;/code&gt;_ and is &lt;code&gt;continuously fuzzed &amp;lt;https://bugs.chromium.org/p/oss-fuzz/issues/list?colspec=ID%20Type%20 Component%20Status%20Proj%20Reported%20Owner%20Summary&amp;amp;q=proj%3Dfmt&amp;amp;can=1&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Safety: the library is fully type safe, errors in format strings can be reported at compile time, automatic memory management prevents buffer overflow errors&lt;/li&gt; &#xA; &lt;li&gt;Ease of use: small self-contained code base, no external dependencies, permissive MIT &lt;code&gt;license &amp;lt;https://github.com/fmtlib/fmt/blob/master/LICENSE.rst&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Portability &amp;lt;https://fmt.dev/latest/index.html#portability&amp;gt;&lt;/code&gt;_ with consistent output across platforms and support for older compilers&lt;/li&gt; &#xA; &lt;li&gt;Clean warning-free codebase even on high warning levels such as &lt;code&gt;-Wall -Wextra -pedantic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Locale-independence by default&lt;/li&gt; &#xA; &lt;li&gt;Optional header-only configuration enabled with the &lt;code&gt;FMT_HEADER_ONLY&lt;/code&gt; macro&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;code&gt;documentation &amp;lt;https://fmt.dev&amp;gt;&lt;/code&gt;_ for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print to stdout&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/Tevcjh&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;fmt/core.h&amp;gt;&#xA;&#xA;int main() {&#xA;  fmt::print(&#34;Hello, world!\n&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Format a string&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/oK8h33&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;std::string s = fmt::format(&#34;The answer is {}.&#34;, 42);&#xA;// s == &#34;The answer is 42.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Format a string using positional arguments&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/Yn7Txe&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;std::string s = fmt::format(&#34;I&#39;d rather be {1} than {0}.&#34;, &#34;right&#34;, &#34;happy&#34;);&#xA;// s == &#34;I&#39;d rather be happy than right.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print chrono durations&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/K8s4Mc&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;fmt/chrono.h&amp;gt;&#xA;&#xA;int main() {&#xA;  using namespace std::literals::chrono_literals;&#xA;  fmt::print(&#34;Default format: {} {}\n&#34;, 42s, 100ms);&#xA;  fmt::print(&#34;strftime-like format: {:%H:%M:%S}\n&#34;, 3h + 15min + 30s);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Default format: 42s 100ms&#xA;strftime-like format: 03:15:30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print a container&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/MxM1YqjE7&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;vector&amp;gt;&#xA;#include &amp;lt;fmt/ranges.h&amp;gt;&#xA;&#xA;int main() {&#xA;  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};&#xA;  fmt::print(&#34;{}\n&#34;, v);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[1, 2, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Check a format string at compile time&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;std::string s = fmt::format(&#34;{:d}&#34;, &#34;I am not a number&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gives a compile-time error in C++20 because &lt;code&gt;d&lt;/code&gt; is an invalid format specifier for a string.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Write a file from a single thread&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;fmt/os.h&amp;gt;&#xA;&#xA;int main() {&#xA;  auto out = fmt::output_file(&#34;guide.txt&#34;);&#xA;  out.print(&#34;Don&#39;t {}&#34;, &#34;Panic&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be &lt;code&gt;5 to 9 times faster than fprintf &amp;lt;http://www.zverovich.net/2020/08/04/optimal-file-buffer-size.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print with colors and text styles&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;fmt/color.h&amp;gt;&#xA;&#xA;int main() {&#xA;  fmt::print(fg(fmt::color::crimson) | fmt::emphasis::bold,&#xA;             &#34;Hello, {}!\n&#34;, &#34;world&#34;);&#xA;  fmt::print(fg(fmt::color::floral_white) | bg(fmt::color::slate_gray) |&#xA;             fmt::emphasis::underline, &#34;Hello, {}!\n&#34;, &#34;мир&#34;);&#xA;  fmt::print(fg(fmt::color::steel_blue) | fmt::emphasis::italic,&#xA;             &#34;Hello, {}!\n&#34;, &#34;世界&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output on a modern terminal:&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/&#34;&gt;https://user-images.githubusercontent.com/&lt;/a&gt; 576385/88485597-d312f600-cf2b-11ea-9cbe-61f535a86e28.png&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Speed tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;================= ============= ===========&#xA;Library           Method        Run Time, s&#xA;================= ============= ===========&#xA;libc              printf          1.04&#xA;libc++            std::ostream    3.05&#xA;{fmt} 6.1.1       fmt::print      0.75&#xA;Boost Format 1.67 boost::format   7.24&#xA;Folly Format      folly::format   2.23&#xA;================= ============= ===========&#xA;&#xA;{fmt} is the fastest of the benchmarked methods, ~35% faster than ``printf``.&#xA;&#xA;The above results were generated by building ``tinyformat_test.cpp`` on macOS&#xA;10.14.6 with ``clang++ -O3 -DNDEBUG -DSPEED_TEST -DHAVE_FORMAT``, and taking the&#xA;best of three runs. In the test, the format string ``&#34;%0.10f:%04d:%+g:%s:%p:%c:%%\n&#34;``&#xA;or equivalent is filled 2,000,000 times with output sent to ``/dev/null``; for&#xA;further details refer to the `source&#xA;&amp;lt;https://github.com/fmtlib/format-benchmark/blob/master/src/tinyformat-test.cc&amp;gt;`_.&#xA;&#xA;{fmt} is up to 20-30x faster than ``std::ostringstream`` and ``sprintf`` on&#xA;floating-point formatting (`dtoa-benchmark &amp;lt;https://github.com/fmtlib/dtoa-benchmark&amp;gt;`_)&#xA;and faster than `double-conversion &amp;lt;https://github.com/google/double-conversion&amp;gt;`_ and&#xA;`ryu &amp;lt;https://github.com/ulfjack/ryu&amp;gt;`_:&#xA;&#xA;.. image:: https://user-images.githubusercontent.com/576385/&#xA;           95684665-11719600-0ba8-11eb-8e5b-972ff4e49428.png&#xA;   :target: https://fmt.dev/unknown_mac64_clang12.0.html&#xA;&#xA;Compile time and code bloat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script &lt;code&gt;bloat-test.py &amp;lt;https://github.com/fmtlib/format-benchmark/blob/master/bloat-test.py&amp;gt;&lt;/code&gt;_ from &lt;code&gt;format-benchmark &amp;lt;https://github.com/fmtlib/format-benchmark&amp;gt;&lt;/code&gt;_ tests compile time and code bloat for nontrivial projects. It generates 100 translation units and uses &lt;code&gt;printf()&lt;/code&gt; or its alternative five times in each to simulate a medium sized project. The resulting executable size and compile time (Apple LLVM version 8.1.0 (clang-802.0.42), macOS Sierra, best of three) is shown in the following tables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optimized build (-O3)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;============= =============== ==================== ================== Method Compile Time, s Executable size, KiB Stripped size, KiB ============= =============== ==================== ================== printf 2.6 29 26 printf+string 16.4 29 26 iostreams 31.1 59 55 {fmt} 19.0 37 34 Boost Format 91.9 226 203 Folly Format 115.7 101 88 ============= =============== ==================== ==================&lt;/p&gt; &#xA;&lt;p&gt;As you can see, {fmt} has 60% less overhead in terms of resulting binary code size compared to iostreams and comes pretty close to &lt;code&gt;printf&lt;/code&gt;. Boost Format and Folly Format have the largest overheads.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;printf+string&lt;/code&gt; is the same as &lt;code&gt;printf&lt;/code&gt; but with extra &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; include to measure the overhead of the latter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Non-optimized build&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;============= =============== ==================== ================== Method Compile Time, s Executable size, KiB Stripped size, KiB ============= =============== ==================== ================== printf 2.2 33 30 printf+string 16.0 33 30 iostreams 28.3 56 52 {fmt} 18.2 59 50 Boost Format 54.1 365 303 Folly Format 79.9 445 430 ============= =============== ==================== ==================&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;libc&lt;/code&gt;, &lt;code&gt;lib(std)c++&lt;/code&gt; and &lt;code&gt;libfmt&lt;/code&gt; are all linked as shared libraries to compare formatting function overhead only. Boost Format is a header-only library so it doesn&#39;t provide any linkage options.&lt;/p&gt; &#xA;&lt;p&gt;Running the tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Please refer to `Building the library`__ for the instructions on how to build&#xA;the library and run the unit tests.&#xA;&#xA;__ https://fmt.dev/latest/usage.html#building-the-library&#xA;&#xA;Benchmarks reside in a separate repository,&#xA;`format-benchmarks &amp;lt;https://github.com/fmtlib/format-benchmark&amp;gt;`_,&#xA;so to run the benchmarks you first need to clone this repository and&#xA;generate Makefiles with CMake::&#xA;&#xA;    $ git clone --recursive https://github.com/fmtlib/format-benchmark.git&#xA;    $ cd format-benchmark&#xA;    $ cmake .&#xA;&#xA;Then you can run the speed test::&#xA;&#xA;    $ make speed-test&#xA;&#xA;or the bloat test::&#xA;&#xA;    $ make bloat-test&#xA;    &#xA;Migrating code&#xA;--------------&#xA;&#xA;`clang-tidy-fmt &amp;lt;https://github.com/mikecrowe/clang-tidy-fmt&amp;gt;`_ provides clang&#xA;tidy checks for converting occurrences of ``printf`` and ``fprintf`` to&#xA;``fmt::print``.&#xA;&#xA;Projects using this library&#xA;---------------------------&#xA;&#xA;* `0 A.D. &amp;lt;https://play0ad.com/&amp;gt;`_: a free, open-source, cross-platform&#xA;  real-time strategy game&#xA;&#xA;* `2GIS &amp;lt;https://2gis.ru/&amp;gt;`_: free business listings with a city map&#xA;&#xA;* `AMPL/MP &amp;lt;https://github.com/ampl/mp&amp;gt;`_:&#xA;  an open-source library for mathematical programming&#xA;&#xA;* `Aseprite &amp;lt;https://github.com/aseprite/aseprite&amp;gt;`_:&#xA;  animated sprite editor &amp;amp; pixel art tool &#xA;&#xA;* `AvioBook &amp;lt;https://www.aviobook.aero/en&amp;gt;`_: a comprehensive aircraft&#xA;  operations suite&#xA;  &#xA;* `Blizzard Battle.net &amp;lt;https://battle.net/&amp;gt;`_: an online gaming platform&#xA;  &#xA;* `Celestia &amp;lt;https://celestia.space/&amp;gt;`_: real-time 3D visualization of space&#xA;&#xA;* `Ceph &amp;lt;https://ceph.com/&amp;gt;`_: a scalable distributed storage system&#xA;&#xA;* `ccache &amp;lt;https://ccache.dev/&amp;gt;`_: a compiler cache&#xA;&#xA;* `ClickHouse &amp;lt;https://github.com/ClickHouse/ClickHouse&amp;gt;`_: analytical database&#xA;  management system&#xA;&#xA;* `CUAUV &amp;lt;https://cuauv.org/&amp;gt;`_: Cornell University&#39;s autonomous underwater&#xA;  vehicle&#xA;&#xA;* `Drake &amp;lt;https://drake.mit.edu/&amp;gt;`_: a planning, control, and analysis toolbox&#xA;  for nonlinear dynamical systems (MIT)&#xA;&#xA;* `Envoy &amp;lt;https://lyft.github.io/envoy/&amp;gt;`_: C++ L7 proxy and communication bus&#xA;  (Lyft)&#xA;&#xA;* `FiveM &amp;lt;https://fivem.net/&amp;gt;`_: a modification framework for GTA V&#xA;&#xA;* `fmtlog &amp;lt;https://github.com/MengRao/fmtlog&amp;gt;`_: a performant fmtlib-style&#xA;  logging library with latency in nanoseconds&#xA;&#xA;* `Folly &amp;lt;https://github.com/facebook/folly&amp;gt;`_: Facebook open-source library&#xA;&#xA;* `GemRB &amp;lt;https://gemrb.org/&amp;gt;`_: a portable open-source implementation of&#xA;  Bioware’s Infinity Engine&#xA;&#xA;* `Grand Mountain Adventure&#xA;  &amp;lt;https://store.steampowered.com/app/1247360/Grand_Mountain_Adventure/&amp;gt;`_:&#xA;  a beautiful open-world ski &amp;amp; snowboarding game&#xA;&#xA;* `HarpyWar/pvpgn &amp;lt;https://github.com/pvpgn/pvpgn-server&amp;gt;`_:&#xA;  Player vs Player Gaming Network with tweaks&#xA;&#xA;* `KBEngine &amp;lt;https://github.com/kbengine/kbengine&amp;gt;`_: an open-source MMOG server&#xA;  engine&#xA;&#xA;* `Keypirinha &amp;lt;https://keypirinha.com/&amp;gt;`_: a semantic launcher for Windows&#xA;&#xA;* `Kodi &amp;lt;https://kodi.tv/&amp;gt;`_ (formerly xbmc): home theater software&#xA;&#xA;* `Knuth &amp;lt;https://kth.cash/&amp;gt;`_: high-performance Bitcoin full-node&#xA;&#xA;* `Microsoft Verona &amp;lt;https://github.com/microsoft/verona&amp;gt;`_:&#xA;  research programming language for concurrent ownership&#xA;&#xA;* `MongoDB &amp;lt;https://mongodb.com/&amp;gt;`_: distributed document database&#xA;&#xA;* `MongoDB Smasher &amp;lt;https://github.com/duckie/mongo_smasher&amp;gt;`_: a small tool to&#xA;  generate randomized datasets&#xA;&#xA;* `OpenSpace &amp;lt;https://openspaceproject.com/&amp;gt;`_: an open-source&#xA;  astrovisualization framework&#xA;&#xA;* `PenUltima Online (POL) &amp;lt;https://www.polserver.com/&amp;gt;`_:&#xA;  an MMO server, compatible with most Ultima Online clients&#xA;&#xA;* `PyTorch &amp;lt;https://github.com/pytorch/pytorch&amp;gt;`_: an open-source machine&#xA;  learning library&#xA;&#xA;* `quasardb &amp;lt;https://www.quasardb.net/&amp;gt;`_: a distributed, high-performance,&#xA;  associative database&#xA;  &#xA;* `Quill &amp;lt;https://github.com/odygrd/quill&amp;gt;`_: asynchronous low-latency logging library&#xA;&#xA;* `QKW &amp;lt;https://github.com/ravijanjam/qkw&amp;gt;`_: generalizing aliasing to simplify&#xA;  navigation, and executing complex multi-line terminal command sequences&#xA;&#xA;* `redis-cerberus &amp;lt;https://github.com/HunanTV/redis-cerberus&amp;gt;`_: a Redis cluster&#xA;  proxy&#xA;&#xA;* `redpanda &amp;lt;https://vectorized.io/redpanda&amp;gt;`_: a 10x faster Kafka® replacement&#xA;  for mission critical systems written in C++&#xA;&#xA;* `rpclib &amp;lt;http://rpclib.net/&amp;gt;`_: a modern C++ msgpack-RPC server and client&#xA;  library&#xA;&#xA;* `Salesforce Analytics Cloud&#xA;  &amp;lt;https://www.salesforce.com/analytics-cloud/overview/&amp;gt;`_:&#xA;  business intelligence software&#xA;&#xA;* `Scylla &amp;lt;https://www.scylladb.com/&amp;gt;`_: a Cassandra-compatible NoSQL data store&#xA;  that can handle 1 million transactions per second on a single server&#xA;&#xA;* `Seastar &amp;lt;http://www.seastar-project.org/&amp;gt;`_: an advanced, open-source C++&#xA;  framework for high-performance server applications on modern hardware&#xA;&#xA;* `spdlog &amp;lt;https://github.com/gabime/spdlog&amp;gt;`_: super fast C++ logging library&#xA;&#xA;* `Stellar &amp;lt;https://www.stellar.org/&amp;gt;`_: financial platform&#xA;&#xA;* `Touch Surgery &amp;lt;https://www.touchsurgery.com/&amp;gt;`_: surgery simulator&#xA;&#xA;* `TrinityCore &amp;lt;https://github.com/TrinityCore/TrinityCore&amp;gt;`_: open-source&#xA;  MMORPG framework&#xA;&#xA;* `Windows Terminal &amp;lt;https://github.com/microsoft/terminal&amp;gt;`_: the new Windows&#xA;  terminal&#xA;&#xA;`More... &amp;lt;https://github.com/search?q=fmtlib&amp;amp;type=Code&amp;gt;`_&#xA;&#xA;If you are aware of other projects using this library, please let me know&#xA;by `email &amp;lt;mailto:victor.zverovich@gmail.com&amp;gt;`_ or by submitting an&#xA;`issue &amp;lt;https://github.com/fmtlib/fmt/issues&amp;gt;`_.&#xA;&#xA;Motivation&#xA;----------&#xA;&#xA;So why yet another formatting library?&#xA;&#xA;There are plenty of methods for doing this task, from standard ones like&#xA;the printf family of function and iostreams to Boost Format and FastFormat&#xA;libraries. The reason for creating a new library is that every existing&#xA;solution that I found either had serious issues or didn&#39;t provide&#xA;all the features I needed.&#xA;&#xA;printf&#xA;~~~~~~&#xA;&#xA;The good thing about ``printf`` is that it is pretty fast and readily available&#xA;being a part of the C standard library. The main drawback is that it&#xA;doesn&#39;t support user-defined types. ``printf`` also has safety issues although&#xA;they are somewhat mitigated with `__attribute__ ((format (printf, ...))&#xA;&amp;lt;https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html&amp;gt;`_ in GCC.&#xA;There is a POSIX extension that adds positional arguments required for&#xA;`i18n &amp;lt;https://en.wikipedia.org/wiki/Internationalization_and_localization&amp;gt;`_&#xA;to ``printf`` but it is not a part of C99 and may not be available on some&#xA;platforms.&#xA;&#xA;iostreams&#xA;~~~~~~~~~&#xA;&#xA;The main issue with iostreams is best illustrated with an example:&#xA;&#xA;.. code:: c++&#xA;&#xA;    std::cout &amp;lt;&amp;lt; std::setprecision(2) &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; 1.23456 &amp;lt;&amp;lt; &#34;\n&#34;;&#xA;&#xA;which is a lot of typing compared to printf:&#xA;&#xA;.. code:: c++&#xA;&#xA;    printf(&#34;%.2f\n&#34;, 1.23456);&#xA;&#xA;Matthew Wilson, the author of FastFormat, called this &#34;chevron hell&#34;. iostreams&#xA;don&#39;t support positional arguments by design.&#xA;&#xA;The good part is that iostreams support user-defined types and are safe although&#xA;error handling is awkward.&#xA;&#xA;Boost Format&#xA;~~~~~~~~~~~~&#xA;&#xA;This is a very powerful library which supports both ``printf``-like format&#xA;strings and positional arguments. Its main drawback is performance. According to&#xA;various benchmarks, it is much slower than other methods considered here. Boost&#xA;Format also has excessive build times and severe code bloat issues (see&#xA;`Benchmarks`_).&#xA;&#xA;FastFormat&#xA;~~~~~~~~~~&#xA;&#xA;This is an interesting library which is fast, safe and has positional arguments.&#xA;However, it has significant limitations, citing its author:&#xA;&#xA;    Three features that have no hope of being accommodated within the&#xA;    current design are:&#xA;&#xA;    * Leading zeros (or any other non-space padding)&#xA;    * Octal/hexadecimal encoding&#xA;    * Runtime width/alignment specification&#xA;&#xA;It is also quite big and has a heavy dependency, STLSoft, which might be too&#xA;restrictive for using it in some projects.&#xA;&#xA;Boost Spirit.Karma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is not really a formatting library but I decided to include it here for completeness. As iostreams, it suffers from the problem of mixing verbatim text with arguments. The library is pretty fast, but slower on integer formatting than &lt;code&gt;fmt::format_to&lt;/code&gt; with format string compilation on Karma&#39;s own benchmark, see &lt;code&gt;Converting a hundred million integers to strings per second &amp;lt;http://www.zverovich.net/2020/06/13/fast-int-to-string-revisited.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;{fmt} is distributed under the MIT &lt;code&gt;license &amp;lt;https://github.com/fmtlib/fmt/blob/master/LICENSE.rst&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation License&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Format String Syntax &amp;lt;https://fmt.dev/latest/syntax.html&amp;gt;&lt;/code&gt;_ section in the documentation is based on the one from Python &lt;code&gt;string module documentation &amp;lt;https://docs.python.org/3/library/string.html#module-string&amp;gt;&lt;/code&gt;&lt;em&gt;. For this reason the documentation is distributed under the Python Software Foundation license available in &lt;code&gt;doc/python-license.txt &amp;lt;https://raw.github.com/fmtlib/fmt/master/doc/python-license.txt&amp;gt;&lt;/code&gt;&lt;/em&gt;. It only applies if you distribute the documentation of {fmt}.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;The {fmt} library is maintained by Victor Zverovich (&lt;code&gt;vitaut &amp;lt;https://github.com/vitaut&amp;gt;&lt;/code&gt;&lt;em&gt;) and Jonathan Müller (&lt;code&gt;foonathan &amp;lt;https://github.com/foonathan&amp;gt;&lt;/code&gt;&lt;/em&gt;) with contributions from many other people. See &lt;code&gt;Contributors &amp;lt;https://github.com/fmtlib/fmt/graphs/contributors&amp;gt;&lt;/code&gt;_ and &lt;code&gt;Releases &amp;lt;https://github.com/fmtlib/fmt/releases&amp;gt;&lt;/code&gt;_ for some of the names. Let us know if your contribution is not listed or mentioned incorrectly and we&#39;ll make it right.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>johnBuffer/NoCol</title>
    <updated>2022-06-03T01:58:28Z</updated>
    <id>tag:github.com,2022-06-03:/johnBuffer/NoCol</id>
    <link href="https://github.com/johnBuffer/NoCol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Trajectories finder&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&#39;Anti-collision&#39; system, as demonstrated in this &lt;a href=&#34;https://www.youtube.com/watch?v=SqpIcsN0FTI&#34;&gt;YouTube video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/159109/115645659-bc4cd480-a2ee-11eb-885e-ab72cb75205d.png&#34; alt=&#34;Picture of various sized balls missing one another&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following keyboard shortcuts are available&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;E&lt;/kbd&gt; toggle v-sync. V-sync limits the number of frames per second, so disabling it speeds up the simulation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;A&lt;/kbd&gt; toggle the visibility of the traces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;space&lt;/kbd&gt; toggle slow-motion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;R&lt;/kbd&gt; reset the view.&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;esc&lt;/kbd&gt; close the application.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can zoom into the simulation by scrolling, and move around by dragging with the mouse.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebook/yoga</title>
    <updated>2022-06-03T01:58:28Z</updated>
    <id>tag:github.com,2022-06-03:/facebook/yoga</id>
    <link href="https://github.com/facebook/yoga" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yoga is a cross-platform layout engine which implements Flexbox. Follow https://twitter.com/yogalayout for updates.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Yoga &lt;a href=&#34;https://opensource.fb.com/support-ukraine&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&amp;amp;labelColor=005BBB&#34; alt=&#34;Support Ukraine&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/YogaKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/YogaKit.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/yoga-layout&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/yoga-layout.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bintray.com/facebook/maven/com.facebook.yoga%3Ayoga/_latestVersion&#34;&gt;&lt;img src=&#34;https://img.shields.io/bintray/v/facebook/maven/com.facebook.yoga:yoga.svg?sanitize=true&#34; alt=&#34;bintray&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Facebook.Yoga&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Facebook.Yoga.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Yoga builds with &lt;a href=&#34;https://buckbuild.com&#34;&gt;buck&lt;/a&gt;. Make sure you install buck before contributing to Yoga. Yoga&#39;s main implementation is in C++, with bindings to supported languages and frameworks. When making changes to Yoga please ensure the changes are also propagated to these bindings when applicable.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;For testing we rely on &lt;a href=&#34;https://github.com/google/googletest&#34;&gt;gtest&lt;/a&gt; as a submodule. After cloning Yoga run &lt;code&gt;git submodule init&lt;/code&gt; followed by &lt;code&gt;git submodule update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For any changes you make you should ensure that all the tests are passing. In case you make any fixes or additions to the library please also add tests for that change to ensure we don&#39;t break anything in the future. Tests are located in the &lt;code&gt;tests&lt;/code&gt; directory. Run the tests by executing &lt;code&gt;buck test //:yoga&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instead of manually writing a test which ensures parity with web implementations of Flexbox you can run &lt;code&gt;gentest/gentest.rb&lt;/code&gt; to generate a test for you. You can write html which you want to verify in Yoga, in &lt;code&gt;gentest/fixtures&lt;/code&gt; folder, such as the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&#34;my_test&#34; style=&#34;width: 100px; height: 100px; align-items: center;&#34;&amp;gt;&#xA;  &amp;lt;div style=&#34;width: 50px; height: 50px;&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;gentest/gentest.rb&lt;/code&gt; to generate test code and re-run &lt;code&gt;buck test //:yoga&lt;/code&gt; to validate the behavior. One test case will be generated for every root &lt;code&gt;div&lt;/code&gt; in the input html.&lt;/p&gt; &#xA;&lt;p&gt;You may need to install the latest watir-webdriver gem (&lt;code&gt;gem install watir-webdriver&lt;/code&gt;) and &lt;a href=&#34;https://sites.google.com/a/chromium.org/chromedriver/&#34;&gt;ChromeDriver&lt;/a&gt; to run &lt;code&gt;gentest/gentest.rb&lt;/code&gt; Ruby script.&lt;/p&gt; &#xA;&lt;h3&gt;.NET&lt;/h3&gt; &#xA;&lt;p&gt;.NET testing is not integrated in buck yet, you might need to set up .NET testing environment. We have a script which to launch C# test on macOS, &lt;code&gt;csharp/tests/Facebook.Yoga/test_macos.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Benchmarks are located in &lt;code&gt;benchmark/YGBenchmark.c&lt;/code&gt; and can be run with &lt;code&gt;buck run //benchmark:benchmark&lt;/code&gt;. If you think your change has affected performance please run this before and after your change to validate that nothing has regressed. Benchmarks are run on every commit in CI.&lt;/p&gt; &#xA;&lt;h3&gt;JavaScript&lt;/h3&gt; &#xA;&lt;p&gt;Installing through NPM&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install yoga-layout&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default this will install the library and try to build for all platforms (node, browser asm, and standalone webpack). You may receive errors if you do not have the required platform development tools already installed. To preset the platform you&#39;d like to build for you can set a .npmrc property first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm config set yoga-layout:platform standalone&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will now only run the standalone webpack build upon install.&lt;/p&gt; &#xA;&lt;h2&gt;Build Platforms&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;all (default)&lt;/td&gt; &#xA;   &lt;td&gt;Builds all of these platforms.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;browser&lt;/td&gt; &#xA;   &lt;td&gt;Builds asm js browser version.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;node&lt;/td&gt; &#xA;   &lt;td&gt;Builds node js version.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;standalone&lt;/td&gt; &#xA;   &lt;td&gt;Runs webpack.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Does nothing. You can use the prepackaged libs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Maintainer Release Guide&lt;/h2&gt; &#xA;&lt;p&gt;To publish a new release, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ensure you have your GPG key set up and your &lt;a href=&#34;https://oss.sonatype.org/&#34;&gt;OSS Sonatype&lt;/a&gt; credentials handy.&lt;/li&gt; &#xA; &lt;li&gt;Add the follow entries to either your local &lt;code&gt;gradle.properties&lt;/code&gt; (don&#39;t forget to revert) or your global &lt;code&gt;~/.gradle/gradle.properties&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# You get these from https://oss.sonatype.org/#profile;User%20Token&#xA;mavenCentralRepositoryUsername=&amp;lt;username&amp;gt;&#xA;mavenCentralRepositoryPassword=&amp;lt;password&amp;gt;&#xA;&#xA;# You can get the keyId (in GPG 1.4 format) by running `gpg1 --list-keys`.&#xA;signing.secretKeyRingFile=&amp;lt;/path/to/secring.gpg&amp;gt;&#xA;signing.keyId=&amp;lt;key_id&amp;gt;&#xA;signing.password=&amp;lt;key_password&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Change the &lt;code&gt;VERSION_NAME&lt;/code&gt; in &lt;code&gt;gradle.properties&lt;/code&gt; to a non-SNAPSHOT release.&lt;/li&gt; &#xA; &lt;li&gt;Commit and land the version change.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./gradlew publishToMaven&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./gradlew closeAndReleaseRepository&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Change the &lt;code&gt;VERSION_NAME&lt;/code&gt; in &lt;code&gt;gradle.properties&lt;/code&gt; back to a new SNAPSHOT release.&lt;/li&gt; &#xA; &lt;li&gt;Commit and land the version change.&lt;/li&gt; &#xA; &lt;li&gt;Celebrate! You&#39;ve made a release!&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>ArduPilot/ardupilot</title>
    <updated>2022-06-03T01:58:28Z</updated>
    <id>tag:github.com,2022-06-03:/ArduPilot/ardupilot</id>
    <link href="https://github.com/ArduPilot/ardupilot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ArduPlane, ArduCopter, ArduRover, ArduSub source&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ArduPilot Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ardupilot.org/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/674039678562861068.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;a href=&#34;https://ardupilot.org/discord&#34;&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ardupilot.org/discord&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_sitl_copter.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/workflows/test%20copter/badge.svg?branch=master&#34; alt=&#34;Test Copter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_sitl_plane.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/workflows/test%20plane/badge.svg?branch=master&#34; alt=&#34;Test Plane&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_sitl_rover.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/workflows/test%20rover/badge.svg?branch=master&#34; alt=&#34;Test Rover&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_sitl_sub.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/workflows/test%20sub/badge.svg?branch=master&#34; alt=&#34;Test Sub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_sitl_tracker.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/workflows/test%20tracker/badge.svg?branch=master&#34; alt=&#34;Test Tracker&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_sitl_periph.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/workflows/test%20ap_periph/badge.svg?branch=master&#34; alt=&#34;Test AP_Periph&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_chibios.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/workflows/test%20chibios/badge.svg?branch=master&#34; alt=&#34;Test Chibios&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_linux_sbc.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/workflows/test%20Linux%20SBC/badge.svg?branch=master&#34; alt=&#34;Test Linux SBC&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_replay.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/workflows/test%20replay/badge.svg?branch=master&#34; alt=&#34;Test Replay&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_unit_tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/workflows/test%20unit%20tests/badge.svg?branch=master&#34; alt=&#34;Test Unit Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_size.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_size.yml/badge.svg?sanitize=true&#34; alt=&#34;test size&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_environment.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_environment.yml/badge.svg?branch=master&#34; alt=&#34;Test Environment Setup&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/cygwin_build.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/cygwin_build.yml/badge.svg?sanitize=true&#34; alt=&#34;Cygwin Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/macos_build.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/macos_build.yml/badge.svg?sanitize=true&#34; alt=&#34;Macos Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scan.coverity.com/projects/ardupilot-ardupilot&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/5331/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_coverage.yml&#34;&gt;&lt;img src=&#34;https://github.com/ArduPilot/ardupilot/actions/workflows/test_coverage.yml/badge.svg?branch=master&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://autotest.ardupilot.org/&#34;&gt;&lt;img src=&#34;https://autotest.ardupilot.org/autotest-badge.svg?sanitize=true&#34; alt=&#34;Autotest Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ArduPilot is the most advanced, full-featured, and reliable open source autopilot software available. It has been under development since 2010 by a diverse team of professional engineers, computer scientists, and community contributors. Our autopilot software is capable of controlling almost any vehicle system imaginable, from conventional airplanes, quad planes, multi-rotors, and helicopters to rovers, boats, balance bots, and even submarines. It is continually being expanded to provide support for new emerging vehicle types.&lt;/p&gt; &#xA;&lt;h2&gt;The ArduPilot project is made up of:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ArduCopter: &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/tree/master/ArduCopter&#34;&gt;code&lt;/a&gt;, &lt;a href=&#34;https://ardupilot.org/copter/index.html&#34;&gt;wiki&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ArduPlane: &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/tree/master/ArduPlane&#34;&gt;code&lt;/a&gt;, &lt;a href=&#34;https://ardupilot.org/plane/index.html&#34;&gt;wiki&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rover: &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/tree/master/Rover&#34;&gt;code&lt;/a&gt;, &lt;a href=&#34;https://ardupilot.org/rover/index.html&#34;&gt;wiki&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ArduSub : &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/tree/master/ArduSub&#34;&gt;code&lt;/a&gt;, &lt;a href=&#34;http://ardusub.com/&#34;&gt;wiki&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Antenna Tracker : &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/tree/master/AntennaTracker&#34;&gt;code&lt;/a&gt;, &lt;a href=&#34;https://ardupilot.org/antennatracker/index.html&#34;&gt;wiki&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;User Support &amp;amp; Discussion Forums&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Support Forum: &lt;a href=&#34;https://discuss.ardupilot.org/&#34;&gt;https://discuss.ardupilot.org/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Community Site: &lt;a href=&#34;https://ardupilot.org&#34;&gt;https://ardupilot.org&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer Information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Github repository: &lt;a href=&#34;https://github.com/ArduPilot/ardupilot&#34;&gt;https://github.com/ArduPilot/ardupilot&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Main developer wiki: &lt;a href=&#34;https://ardupilot.org/dev/&#34;&gt;https://ardupilot.org/dev/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Developer discussion: &lt;a href=&#34;https://discuss.ardupilot.org&#34;&gt;https://discuss.ardupilot.org&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Developer chat: &lt;a href=&#34;https://discord.com/channels/ardupilot&#34;&gt;https://discord.com/channels/ardupilot&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Top Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ArduPilot/ardupilot/graphs/contributors&#34;&gt;Flight code contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ArduPilot/ardupilot_wiki/graphs/contributors&#34;&gt;Wiki contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discuss.ardupilot.org/u?order=post_count&amp;amp;period=quarterly&#34;&gt;Most active support forum users&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ardupilot.org/about/Partners&#34;&gt;Partners who contribute financially&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How To Get Involved&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The ArduPilot project is open source and we encourage participation and code contributions: &lt;a href=&#34;https://ardupilot.org/dev/docs/contributing.html&#34;&gt;guidelines for contributors to the ardupilot codebase&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We have an active group of Beta Testers to help us improve our code: &lt;a href=&#34;https://ardupilot.org/dev/docs/release-procedures.html&#34;&gt;release procedures&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Desired Enhancements and Bugs can be posted to the &lt;a href=&#34;https://github.com/ArduPilot/ardupilot/issues&#34;&gt;issues list&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Help other users with log analysis in the &lt;a href=&#34;https://discuss.ardupilot.org/&#34;&gt;support forums&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Improve the wiki and chat with other &lt;a href=&#34;https://discord.com/channels/ardupilot&#34;&gt;wiki editors on Discord #documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Contact the developers on one of the &lt;a href=&#34;https://ardupilot.org/copter/docs/common-contact-us.html&#34;&gt;communication channels&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The ArduPilot project is licensed under the GNU General Public License, version 3.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dev.ardupilot.com/wiki/license-gplv3&#34;&gt;Overview of license&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ArduPilot/ardupilot/raw/master/COPYING.txt&#34;&gt;Full Text&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;ArduPilot is comprised of several parts, vehicles and boards. The list below contains the people that regularly contribute to the project and are responsible for reviewing patches on their specific area.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tridge&#34;&gt;Andrew Tridgell&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Vehicle&lt;/strong&gt;&lt;/em&gt;: Plane, AntennaTracker&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Board&lt;/strong&gt;&lt;/em&gt;: Pixhawk, Pixhawk2, PixRacer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oxinarf&#34;&gt;Francisco Ferreira&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Bug Master&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gmorph&#34;&gt;Grant Morphett&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Vehicle&lt;/strong&gt;&lt;/em&gt;: Rover&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williangalvani&#34;&gt;Willian Galvani&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Vehicle&lt;/strong&gt;&lt;/em&gt;: Sub&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lucasdemarchi&#34;&gt;Lucas De Marchi&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: Linux&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WickedShell&#34;&gt;Michael du Breuil&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: Batteries&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: GPS&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: Scripting&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/peterbarker&#34;&gt;Peter Barker&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: DataFlash, Tools&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rmackay9&#34;&gt;Randy Mackay&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Vehicle&lt;/strong&gt;&lt;/em&gt;: Copter, Rover, AntennaTracker&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bugobliterator&#34;&gt;Siddharth Purohit&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: CAN, Compass&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Board&lt;/strong&gt;&lt;/em&gt;: Cube*&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/magicrub&#34;&gt;Tom Pittenger&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Vehicle&lt;/strong&gt;&lt;/em&gt;: Plane&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bnsgeyer&#34;&gt;Bill Geyer&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Vehicle&lt;/strong&gt;&lt;/em&gt;: TradHeli&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emilecastelnuovo&#34;&gt;Emile Castelnuovo&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Board&lt;/strong&gt;&lt;/em&gt;: VRBrain&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/staroselskii&#34;&gt;Georgii Staroselskii&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Board&lt;/strong&gt;&lt;/em&gt;: NavIO&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/guludo&#34;&gt;Gustavo José de Sousa&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: Build system&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jberaud&#34;&gt;Julien Beraud&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Board&lt;/strong&gt;&lt;/em&gt;: Bebop &amp;amp; Bebop 2&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lthall&#34;&gt;Leonard Hall&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: Copter attitude control and navigation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Pedals2Paddles&#34;&gt;Matt Lawrence&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Vehicle&lt;/strong&gt;&lt;/em&gt;: 3DR Solo &amp;amp; Solo based vehicles&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/badzz&#34;&gt;Matthias Badaire&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: FRSky&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mirkix&#34;&gt;Mirko Denecke&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Board&lt;/strong&gt;&lt;/em&gt;: BBBmini, BeagleBone Blue, PocketPilot&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/priseborough&#34;&gt;Paul Riseborough&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: AP_NavEKF2&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: AP_NavEKF3&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vmayoral&#34;&gt;Víctor Mayoral Vilches&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Board&lt;/strong&gt;&lt;/em&gt;: PXF, Erle-Brain 2, PXFmini&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amilcarlucas&#34;&gt;Amilcar Lucas&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: Marvelmind&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/samuelctabor&#34;&gt;Samuel Tabor&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: Soaring/Gliding&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Hwurzburg&#34;&gt;Henry Wurzburg&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: OSD&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Site&lt;/strong&gt;&lt;/em&gt;: Wiki&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IamPete1&#34;&gt;Peter Hall&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Vehicle&lt;/strong&gt;&lt;/em&gt;: Tailsitters&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Vehicle&lt;/strong&gt;&lt;/em&gt;: Sailboat&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: Scripting&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andyp1per&#34;&gt;Andy Piper&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: Crossfire&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: ESC&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: OSD&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: SmartAudio&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yaapu&#34;&gt;Alessandro Apostoli &lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: Telemetry&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: OSD&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rishabsingh3003&#34;&gt;Rishabh Singh &lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: Avoidance/Proximity&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/davidbuzz&#34;&gt;David Bussenschutt &lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: ESP32,AP_HAL_ESP32&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Silvanosky&#34;&gt;Charles Villard &lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;Subsystem&lt;/strong&gt;&lt;/em&gt;: ESP32,AP_HAL_ESP32&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>symforce-org/symforce</title>
    <updated>2022-06-03T01:58:28Z</updated>
    <id>tag:github.com,2022-06-03:/symforce-org/symforce</id>
    <link href="https://github.com/symforce-org/symforce" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast symbolic computation, code generation, and nonlinear optimization for robotics&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/symforce-org/symforce/main/docs/static/images/symforce_banner.png#gh-light-mode-only&#34; alt=&#34;SymForce&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/symforce-org/symforce/main/docs/static/images/symforce_banner_dark.png#gh-dark-mode-only&#34; alt=&#34;SymForce&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://symforce.org&#34;&gt;&lt;img alt=&#34;Documentation&#34; src=&#34;https://img.shields.io/badge/api-docs-blue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/symforce-org/symforce&#34;&gt;&lt;img alt=&#34;Source Code&#34; src=&#34;https://img.shields.io/badge/source-code-blue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/symforce-org/symforce/issues&#34;&gt;&lt;img alt=&#34;Issues&#34; src=&#34;https://img.shields.io/badge/issue-tracker-blue&#34;&gt;&lt;/a&gt; &lt;img alt=&#34;Python 3.8 | 3.9 | 3.10&#34; src=&#34;https://img.shields.io/pypi/pyversions/symforce&#34;&gt; &lt;img alt=&#34;C++14&#34; src=&#34;https://img.shields.io/badge/c++-14-blue&#34;&gt; &lt;a href=&#34;https://pypi.org/project/symforce/&#34;&gt;&lt;img alt=&#34;PyPI&#34; src=&#34;https://img.shields.io/pypi/v/symforce&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/symforce-org/symforce/tree/main/LICENSE&#34;&gt;&lt;img alt=&#34;Apache License&#34; src=&#34;https://img.shields.io/pypi/l/symforce&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;SymForce is a fast symbolic computation and code generation library for robotics applications like computer vision, state estimation, motion planning, and controls. It combines the development speed and flexibility of symbolic mathematics with the performance of autogenerated, highly optimized code in C++ or any target runtime language. SymForce contains three independently useful systems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Symbolic Toolkit&lt;/strong&gt; - builds on the SymPy API to provide rigorous geometric and camera types, lie group calculus, singularity handling, and tools to model complex problems&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Code Generator&lt;/strong&gt; - transforms symbolic expressions into blazing-fast, branchless code with clean APIs and minimal dependencies, with a template system to target any language&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Optimization Library&lt;/strong&gt; - a fast tangent-space optimization library based on factor graphs, with a highly optimized implementation for real-time robotics applications&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SymForce automatically computes tangent space Jacobians, eliminating the need for any bug-prone handwritten derivatives. Generated functions can be directly used as factors in our nonlinear optimizer. This workflow enables faster runtime functions, faster development time, and fewer lines of handwritten code versus alternative methods.&lt;/p&gt; &#xA;&lt;p&gt;SymForce is developed and maintained by &lt;a href=&#34;https://skydio.com/&#34;&gt;Skydio&lt;/a&gt;. It is used in production to accelerate tasks like SLAM, bundle adjustment, calibration, and sparse nonlinear MPC for autonomous robots at scale.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img alt=&#34;SymForce&#34; src=&#34;https://raw.githubusercontent.com/symforce-org/symforce/main/docs/static/images/symforce_diagram.png&#34; width=&#34;700px&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;Features:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Symbolic implementations of geometry and camera types with Lie group operations&lt;/li&gt; &#xA; &lt;li&gt;Code generation of fast native runtime code from symbolic expressions, reducing duplication and minimizing bugs&lt;/li&gt; &#xA; &lt;li&gt;Novel tools to compute fast and correct tangent-space jacobians for any expression, avoiding all handwritten derivatives&lt;/li&gt; &#xA; &lt;li&gt;Strategies for flattening computation and leveraging sparsity that can yield 10x speedups over standard autodiff&lt;/li&gt; &#xA; &lt;li&gt;A fast tangent-space optimization library in C++ and Python based on factor graphs&lt;/li&gt; &#xA; &lt;li&gt;Rapid prototyping and analysis of complex problems with symbolic math, with a seamless workflow into production use&lt;/li&gt; &#xA; &lt;li&gt;Embedded-friendly C++ generation of templated Eigen code with zero dynamic memory allocation&lt;/li&gt; &#xA; &lt;li&gt;Highly performant, modular, tested, and extensible code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Read the paper: &lt;a href=&#34;https://arxiv.org/abs/2204.07889&#34;&gt;https://arxiv.org/abs/2204.07889&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;SymForce was published to &lt;a href=&#34;https://roboticsconference.org/&#34;&gt;RSS 2022&lt;/a&gt;. Please cite it as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{Martiros-RSS-22,&#xA;    author    = {Hayk Martiros AND Aaron Miller AND Nathan Bucki AND Bradley Solliday AND Ryan Kennedy AND Jack Zhu AND Tung Dang AND Dominic Pattison AND Harrison Zheng AND Teo Tomic AND Peter Henry AND Gareth Cross AND Josiah VanderMey AND Alvin Sun AND Samuel Wang AND Kristen Holtz},&#xA;    title     = {{SymForce: Symbolic Computation and Code Generation for Robotics}},&#xA;    booktitle = {Proceedings of Robotics: Science and Systems},&#xA;    year      = {2022},&#xA;    doi       = {10.15607/RSS.2022.XVIII.041}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;Install with pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install symforce&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify the installation in Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from symforce import geo&#xA;&amp;gt;&amp;gt;&amp;gt; geo.Rot3()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs pre-compiled C++ components of SymForce on Linux and Mac using pip wheels, but does not include C++ headers. If you want to compile against C++ SymForce types (like &lt;code&gt;sym::Optimizer&lt;/code&gt;), you currently need to &lt;a href=&#34;https://raw.githubusercontent.com/symforce-org/symforce/main/#build-from-source&#34;&gt;build from source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Tutorial&lt;/h1&gt; &#xA;&lt;p&gt;Let&#39;s walk through a simple example of modeling and solving an optimization problem with SymForce. In this example a robot moves through a 2D plane and the goal is to estimate its pose at multiple time steps given noisy measurements.&lt;/p&gt; &#xA;&lt;p&gt;The robot measures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the distance it traveled from an odometry sensor&lt;/li&gt; &#xA; &lt;li&gt;relative bearing angles to known landmarks in the scene&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The robot&#39;s heading angle is defined counter-clockwise from the x-axis, and its relative bearing measurements are defined from the robot&#39;s forward direction:&lt;/p&gt; &#xA;&lt;img alt=&#34;Robot 2D Triangulation Figure&#34; src=&#34;https://raw.githubusercontent.com/symforce-org/symforce/main/docs/static/images/robot_2d_triangulation/robot_2d_triangulation_figure.png&#34; width=&#34;350px&#34;&gt; &#xA;&lt;h2&gt;Explore the math&lt;/h2&gt; &#xA;&lt;p&gt;Import the augmented SymPy API and geometry module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from symforce import sympy as sm&#xA;from symforce import geo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a symbolic 2D pose and landmark location. Using symbolic variables lets us explore and build up the math in a pure form.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pose = geo.Pose2(&#xA;    t=geo.V2.symbolic(&#34;t&#34;),&#xA;    R=geo.Rot2.symbolic(&#34;R&#34;)&#xA;)&#xA;landmark = geo.V2.symbolic(&#34;L&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s transform the landmark into the local frame of the robot. We choose to represent poses as &lt;code&gt;world_T_body&lt;/code&gt;, meaning that to take a landmark in the world frame and get its position in the body frame, we do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;landmark_body = pose.inverse() * landmark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math={\begin{bmatrix}  R_{re} L_0 %2B R_{im} L_1 - R_{im} t_1 - R_{re} t_0 \\  -R_{im} L_0 %2B R_{re} L_1 %2B R_{im} t_0 %2B R_{re} t_1\end{bmatrix}}#gh-light-mode-only&#34; width=&#34;250px&#34;&gt; &lt;img src=&#34;https://render.githubusercontent.com/render/math?math={\color{white} \begin{bmatrix}  R_{re} L_0 %2B R_{im} L_1 - R_{im} t_1 - R_{re} t_0 \\  -R_{im} L_0 %2B R_{re} L_1 %2B R_{im} t_0 %2B R_{re} t_1\end{bmatrix}}#gh-dark-mode-only&#34; width=&#34;250px&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- $&#xA;\begin{bmatrix}&#xA;  R_{re} L_0 + R_{im} L_1 - R_{im} t_1 - R_{re} t_0 \\&#xA;  -R_{im} L_0 + R_{re} L_1 + R_{im} t_0 + R_{re} t_1&#xA;\end{bmatrix}&#xA;$ --&gt; &#xA;&lt;p&gt;You can see that &lt;code&gt;geo.Rot2&lt;/code&gt; is represented internally by a complex number (𝑅𝑟𝑒, 𝑅𝑖𝑚) and we can study how it rotates the landmark 𝐿.&lt;/p&gt; &#xA;&lt;p&gt;For exploration purposes, let&#39;s take the jacobian of the body-frame landmark with respect to the tangent space of the &lt;code&gt;Pose2&lt;/code&gt;, parameterized as (𝜃, 𝑥, 𝑦):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;landmark_body.jacobian(pose)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math={\begin{bmatrix}-L_0 R_{im} %2B L_1 R_{re} %2B t_0 R_{im} - t_1 R_{re}, %26 -R_{re}, %26 -R_{im} \\ -L_0 R_{re} - L_1 R_{im} %2B t_0 R_{re} %2B t_1 R_{im}, %26  R_{im}, %26 -R_{re}\end{bmatrix}}#gh-light-mode-only&#34; width=&#34;350px&#34;&gt; &lt;img src=&#34;https://render.githubusercontent.com/render/math?math={\color{white} \begin{bmatrix}-L_0 R_{im} %2B L_1 R_{re} %2B t_0 R_{im} - t_1 R_{re}, %26 -R_{re}, %26 -R_{im} \\ -L_0 R_{re} - L_1 R_{im} %2B t_0 R_{re} %2B t_1 R_{im}, %26  R_{im}, %26 -R_{re}\end{bmatrix}}#gh-dark-mode-only&#34; width=&#34;350px&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- $&#xA;\begin{bmatrix}&#xA;  -L_0*R_{im} + L1*R_{re} + t_0*R_{im} - t_1*R_{re}, &amp; -R_{re}, &amp; -R_{im} \\&#xA;  -L_0*R_{re} - L1*R_{im} + t_0*R_{re} + t_1*R_{im}, &amp;  R_{im}, &amp; -R_{re}&#xA;\end{bmatrix}&#xA;$ --&gt; &#xA;&lt;p&gt;Note that even though the orientation is stored as a complex number, the tangent space is a scalar angle and SymForce understands that.&lt;/p&gt; &#xA;&lt;p&gt;Now compute the relative bearing angle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sm.atan2(landmark_body[1], landmark_body[0])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math={atan_2(-R_{im} L_0 %2B R_{re} L_1 %2B R_{im} t_0 %2B R_{re} t_1, R_{re} L_0 %2B R_{im} L_1 - R_{im} t_1 - R_{re} t_0)}#gh-light-mode-only&#34; width=&#34;500px&#34;&gt; &lt;img src=&#34;https://render.githubusercontent.com/render/math?math={\color{white} atan_2(-R_{im} L_0 %2B R_{re} L_1 %2B R_{im} t_0 %2B R_{re} t_1, R_{re} L_0 %2B R_{im} L_1 - R_{im} t_1 - R_{re} t_0)}#gh-dark-mode-only&#34; width=&#34;500px&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- $&#xA;atan_2(-R_{im} L_0 + R_{re} L_1 + R_{im} t_0 + R_{re} t_1, R_{re} L_0  + R_{im} L_1 - R_{im} t_1 - R_{re} t_0)&#xA;$ --&gt; &#xA;&lt;p&gt;One important note is that &lt;code&gt;atan2&lt;/code&gt; is singular at (0, 0). In SymForce we handle this by placing a symbol ϵ (epsilon) that preserves the value of an expression in the limit of ϵ → 0, but allows evaluating at runtime with a very small nonzero value. Functions with singularities accept an &lt;code&gt;epsilon&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;geo.V3.symbolic(&#34;x&#34;).norm(epsilon=sm.epsilon)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math={\sqrt{x_0^2 %2B x_1^2 %2B x_2^2 %2B \epsilon}}#gh-light-mode-only&#34; width=&#34;135px&#34;&gt; &lt;img src=&#34;https://render.githubusercontent.com/render/math?math={\color{white} \sqrt{x_0^2 %2B x_1^2 %2B x_2^2 %2B \epsilon}}#gh-dark-mode-only&#34; width=&#34;135px&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- $\sqrt{x_0^2 + x_1^2 + x_2^2 + \epsilon}$ --&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://symforce.org/notebooks/epsilon_tutorial.html&#34;&gt;Epsilon Tutorial&lt;/a&gt; in the SymForce Docs for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Build an optimization problem&lt;/h2&gt; &#xA;&lt;p&gt;We will model this problem as a factor graph and solve it with nonlinear least-squares.&lt;/p&gt; &#xA;&lt;p&gt;The residual function comprises of two terms - one for the bearing measurements and one for the odometry measurements. Let&#39;s formalize the math we just defined for the bearing measurements into a symbolic residual function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from symforce import typing as T&#xA;&#xA;def bearing_residual(&#xA;    pose: geo.Pose2, landmark: geo.V2, angle: T.Scalar, epsilon: T.Scalar&#xA;) -&amp;gt; geo.V1:&#xA;    t_body = pose.inverse() * landmark&#xA;    predicted_angle = sm.atan2(t_body[1], t_body[0], epsilon=epsilon)&#xA;    return geo.V1(sm.wrap_angle(predicted_angle - angle))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function takes in a pose and landmark variable and returns the error between the predicted bearing angle and a measured value. Note that we call &lt;code&gt;sm.wrap_angle&lt;/code&gt; on the angle difference to prevent wraparound effects.&lt;/p&gt; &#xA;&lt;p&gt;The residual for distance traveled is even simpler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def odometry_residual(&#xA;    pose_a: geo.Pose2, pose_b: geo.Pose2, dist: T.Scalar, epsilon: T.Scalar&#xA;) -&amp;gt; geo.V1:&#xA;    return geo.V1((pose_b.t - pose_a.t).norm(epsilon=epsilon) - dist)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can create &lt;a href=&#34;https://symforce.org/api/symforce.opt.factor.html?highlight=factor#module-symforce.opt.factor&#34;&gt;&lt;code&gt;Factor&lt;/code&gt;&lt;/a&gt; objects from the residual functions and a set of keys. The keys are named strings for the function arguments, which will be accessed by name from a &lt;a href=&#34;https://symforce.org/api/symforce.values.values.html&#34;&gt;&lt;code&gt;Values&lt;/code&gt;&lt;/a&gt; class we later instantiate with numerical quantities.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from symforce.opt.factor import Factor&#xA;&#xA;num_poses = 3&#xA;num_landmarks = 3&#xA;&#xA;factors = []&#xA;&#xA;# Bearing factors&#xA;for i in range(num_poses):&#xA;    for j in range(num_landmarks):&#xA;        factors.append(Factor(&#xA;            residual=bearing_residual,&#xA;            keys=[f&#34;poses[{i}]&#34;, f&#34;landmarks[{j}]&#34;, f&#34;angles[{i}][{j}]&#34;, &#34;epsilon&#34;],&#xA;        ))&#xA;&#xA;# Odometry factors&#xA;for i in range(num_poses - 1):&#xA;    factors.append(Factor(&#xA;        residual=odometry_residual,&#xA;        keys=[f&#34;poses[{i}]&#34;, f&#34;poses[{i + 1}]&#34;, f&#34;distances[{i}]&#34;, &#34;epsilon&#34;],&#xA;    ))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is a visualization of the structure of this factor graph:&lt;/p&gt; &#xA;&lt;img alt=&#34;Robot 2D Triangulation Factor Graph&#34; src=&#34;https://raw.githubusercontent.com/symforce-org/symforce/main/docs/static/images/robot_2d_triangulation/robot_2d_triangulation_factor_graph.png&#34; width=&#34;600px&#34;&gt; &#xA;&lt;h2&gt;Solve the problem&lt;/h2&gt; &#xA;&lt;p&gt;Our goal is to find poses of the robot that minimize the residual of this factor graph, assuming the landmark positions in the world are known. We create an &lt;a href=&#34;https://symforce.org/api/symforce.opt.optimizer.html?highlight=optimizer#module-symforce.opt.optimizer&#34;&gt;&lt;code&gt;Optimizer&lt;/code&gt;&lt;/a&gt; with these factors and tell it to only optimize the pose keys (the rest are held constant):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from symforce.opt.optimizer import Optimizer&#xA;&#xA;optimizer = Optimizer(&#xA;    factors=factors,&#xA;    optimized_keys=[f&#34;poses[{i}]&#34; for i in range(num_poses)],&#xA;    # So that we save more information about each iteration, to visualize later:&#xA;    debug_stats=True,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we need to instantiate numerical &lt;a href=&#34;https://symforce.org/api/symforce.values.values.html?highlight=values#module-symforce.values.values&#34;&gt;&lt;code&gt;Values&lt;/code&gt;&lt;/a&gt; for the problem, including an initial guess for our unknown poses (just set them to identity).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np&#xA;from symforce.values import Values&#xA;&#xA;initial_values = Values(&#xA;    poses=[geo.Pose2.identity()] * num_poses,&#xA;    landmarks=[geo.V2(-2, 2), geo.V2(1, -3), geo.V2(5, 2)],&#xA;    distances=[1.7, 1.4],&#xA;    angles=np.deg2rad([[145, 335, 55], [185, 310, 70], [215, 310, 70]]).tolist(),&#xA;    epsilon=sm.default_epsilon,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run the optimization! This returns an &lt;a href=&#34;https://symforce.org/api/symforce.opt.optimizer.html?highlight=optimizer#symforce.opt.optimizer.Optimizer.Result&#34;&gt;&lt;code&gt;Optimizer.Result&lt;/code&gt;&lt;/a&gt; object that contains the optimized values, error statistics, and per-iteration debug stats (if enabled).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result = optimizer.optimize(initial_values)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s visualize what the optimizer did. The orange circles represent the fixed landmarks, the blue circles represent the robot, and the dotted lines represent the bearing measurements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from symforce.examples.robot_2d_triangulation.plotting import plot_solution&#xA;plot_solution(optimizer, result)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Robot 2D Triangulation Solution&#34; src=&#34;https://raw.githubusercontent.com/symforce-org/symforce/main/docs/static/images/robot_2d_triangulation/robot_2d_triangulation_iterations.gif&#34; width=&#34;600px&#34;&gt; &#xA;&lt;p&gt;All of the code for this example can also be found in &lt;code&gt;symforce/examples/robot_2d_triangulation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Symbolic vs Numerical Types&lt;/h2&gt; &#xA;&lt;p&gt;SymForce provides &lt;code&gt;sym&lt;/code&gt; packages with runtime code for geometry and camera types that are generated from its symbolic &lt;code&gt;geo&lt;/code&gt; and &lt;code&gt;cam&lt;/code&gt; packages. As such, there are multiple versions of a class like &lt;code&gt;Pose3&lt;/code&gt; and it can be a common source of confusion.&lt;/p&gt; &#xA;&lt;p&gt;The canonical symbolic class &lt;a href=&#34;https://symforce.org/api/symforce.geo.pose3.html&#34;&gt;&lt;code&gt;geo.Pose3&lt;/code&gt;&lt;/a&gt; lives in the &lt;code&gt;symforce&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from symforce import geo&#xA;geo.Pose3.identity()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The autogenerated Python runtime class &lt;a href=&#34;https://symforce.org/api-gen-py/sym.pose3.html?highlight=pose3#module-sym.pose3&#34;&gt;&lt;code&gt;sym.Pose3&lt;/code&gt;&lt;/a&gt; lives in the &lt;code&gt;sym&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sym&#xA;sym.Pose3.identity()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The autogenerated C++ runtime class &lt;a href=&#34;https://symforce.org/api-gen-cpp/class/classsym_1_1Pose3.html&#34;&gt;&lt;code&gt;sym::Pose3&lt;/code&gt;&lt;/a&gt; lives in the &lt;code&gt;sym::&lt;/code&gt; namespace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;sym::Pose3&amp;lt;double&amp;gt;::Identity()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The matrix type for symbolic code is &lt;a href=&#34;https://symforce.org/api/symforce.geo.matrix.html?highlight=matrix#module-symforce.geo.matrix&#34;&gt;&lt;code&gt;geo.Matrix&lt;/code&gt;&lt;/a&gt;, for generated Python is &lt;a href=&#34;https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html&#34;&gt;&lt;code&gt;numpy.ndarray&lt;/code&gt;&lt;/a&gt;, and for C++ is &lt;a href=&#34;https://eigen.tuxfamily.org/dox/group__TutorialMatrixClass.html&#34;&gt;&lt;code&gt;Eigen::Matrix&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The symbolic classes can also handle numerical values, but will be dramatically slower than the generated classes. The symbolic classes must be used when defining functions for codegen and optimization. Generated functions always accept the runtime types.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Codegen&lt;/code&gt; or &lt;code&gt;Factor&lt;/code&gt; objects require symbolic types and functions to do math and generate code. However, once code is generated, numerical types should be used when invoking generated functions and in the initial values when calling the &lt;code&gt;Optimizer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As a convenience, the Python &lt;code&gt;Optimizer&lt;/code&gt; class can accept symbolic types in its &lt;code&gt;Values&lt;/code&gt; and convert to numerical types before invoking generated functions. This is done in the tutorial example for simplicity.&lt;/p&gt; &#xA;&lt;h2&gt;Generate runtime C++ code&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s look under the hood to understand how that optimization worked. For each factor, SymForce introspects the form of the symbolic function, passes through symbolic inputs to build an output expression, automatically computes tangent-space jacobians of those output expressions wrt the optimized variables, and generates fast runtime code for them.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://symforce.org/api/symforce.codegen.codegen.html?highlight=codegen#module-symforce.codegen.codegen&#34;&gt;&lt;code&gt;Codegen&lt;/code&gt;&lt;/a&gt; class is the central tool for generating runtime code from symbolic expressions. In this case, we pass it the bearing residual function and configure it to generate C++ code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from symforce.codegen import Codegen, CppConfig&#xA;&#xA;codegen = Codegen.function(bearing_residual, config=CppConfig())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can then create another &lt;code&gt;Codegen&lt;/code&gt; object that computes a Gauss-Newton linearization from this Codegen object. It does this by introspecting and symbolically differentiating the given arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;codegen_linearization = codegen.with_linearization(&#xA;    which_args=[&#34;pose&#34;]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate a C++ function that computes the linearization wrt the pose argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;metadata = codegen_linearization.generate_function()&#xA;print(open(metadata.generated_files[0]).read())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This C++ code depends only on Eigen and computes the results in a single flat function that shares all common sub-expressions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#pragma once&#xA;&#xA;#include &amp;lt;Eigen/Dense&amp;gt;&#xA;&#xA;#include &amp;lt;sym/pose2.h&amp;gt;&#xA;&#xA;namespace sym {&#xA;&#xA;/**&#xA; * This function was autogenerated from a symbolic function. Do not modify by hand.&#xA; *&#xA; * Symbolic function: bearing_residual&#xA; *&#xA; * Args:&#xA; *     pose: Pose2&#xA; *     landmark: Matrix21&#xA; *     angle: Scalar&#xA; *     epsilon: Scalar&#xA; *&#xA; * Outputs:&#xA; *     res: Matrix11&#xA; *     jacobian: (1x3) jacobian of res wrt arg pose (3)&#xA; *     hessian: (3x3) Gauss-Newton hessian for arg pose (3)&#xA; *     rhs: (3x1) Gauss-Newton rhs for arg pose (3)&#xA; */&#xA;template &amp;lt;typename Scalar&amp;gt;&#xA;void BearingFactor(const sym::Pose2&amp;lt;Scalar&amp;gt;&amp;amp; pose, const Eigen::Matrix&amp;lt;Scalar, 2, 1&amp;gt;&amp;amp; landmark,&#xA;                   const Scalar angle, const Scalar epsilon,&#xA;                   Eigen::Matrix&amp;lt;Scalar, 1, 1&amp;gt;* const res = nullptr,&#xA;                   Eigen::Matrix&amp;lt;Scalar, 1, 3&amp;gt;* const jacobian = nullptr,&#xA;                   Eigen::Matrix&amp;lt;Scalar, 3, 3&amp;gt;* const hessian = nullptr,&#xA;                   Eigen::Matrix&amp;lt;Scalar, 3, 1&amp;gt;* const rhs = nullptr) {&#xA;  // Total ops: 66&#xA;&#xA;  // Input arrays&#xA;  const Eigen::Matrix&amp;lt;Scalar, 4, 1&amp;gt;&amp;amp; _pose = pose.Data();&#xA;&#xA;  // Intermediate terms (24)&#xA;  const Scalar _tmp0 = _pose[1] * _pose[2];&#xA;  const Scalar _tmp1 = _pose[0] * _pose[3];&#xA;  const Scalar _tmp2 = _pose[0] * landmark(1, 0) - _pose[1] * landmark(0, 0);&#xA;  const Scalar _tmp3 = _tmp0 - _tmp1 + _tmp2;&#xA;  const Scalar _tmp4 = _pose[0] * _pose[2] + _pose[1] * _pose[3];&#xA;  const Scalar _tmp5 = _pose[1] * landmark(1, 0);&#xA;  const Scalar _tmp6 = _pose[0] * landmark(0, 0);&#xA;  const Scalar _tmp7 = -_tmp4 + _tmp5 + _tmp6;&#xA;  const Scalar _tmp8 = _tmp7 + epsilon * ((((_tmp7) &amp;gt; 0) - ((_tmp7) &amp;lt; 0)) + Scalar(0.5));&#xA;  const Scalar _tmp9 = -angle + std::atan2(_tmp3, _tmp8);&#xA;  const Scalar _tmp10 =&#xA;      _tmp9 - 2 * Scalar(M_PI) *&#xA;                  std::floor((Scalar(1) / Scalar(2)) * (_tmp9 + Scalar(M_PI)) / Scalar(M_PI));&#xA;  const Scalar _tmp11 = Scalar(1.0) / (_tmp8);&#xA;  const Scalar _tmp12 = std::pow(_tmp8, Scalar(2));&#xA;  const Scalar _tmp13 = _tmp3 / _tmp12;&#xA;  const Scalar _tmp14 = _tmp11 * (_tmp4 - _tmp5 - _tmp6) - _tmp13 * (_tmp0 - _tmp1 + _tmp2);&#xA;  const Scalar _tmp15 = _tmp12 + std::pow(_tmp3, Scalar(2));&#xA;  const Scalar _tmp16 = _tmp12 / _tmp15;&#xA;  const Scalar _tmp17 = _tmp14 * _tmp16;&#xA;  const Scalar _tmp18 = _pose[0] * _tmp13 + _pose[1] * _tmp11;&#xA;  const Scalar _tmp19 = _tmp16 * _tmp18;&#xA;  const Scalar _tmp20 = -_pose[0] * _tmp11 + _pose[1] * _tmp13;&#xA;  const Scalar _tmp21 = _tmp16 * _tmp20;&#xA;  const Scalar _tmp22 = std::pow(_tmp8, Scalar(4)) / std::pow(_tmp15, Scalar(2));&#xA;  const Scalar _tmp23 = _tmp18 * _tmp22;&#xA;&#xA;  // Output terms (4)&#xA;  if (res != nullptr) {&#xA;    Eigen::Matrix&amp;lt;Scalar, 1, 1&amp;gt;&amp;amp; _res = (*res);&#xA;&#xA;    _res(0, 0) = _tmp10;&#xA;  }&#xA;&#xA;  if (jacobian != nullptr) {&#xA;    Eigen::Matrix&amp;lt;Scalar, 1, 3&amp;gt;&amp;amp; _jacobian = (*jacobian);&#xA;&#xA;    _jacobian(0, 0) = _tmp17;&#xA;    _jacobian(0, 1) = _tmp19;&#xA;    _jacobian(0, 2) = _tmp21;&#xA;  }&#xA;&#xA;  if (hessian != nullptr) {&#xA;    Eigen::Matrix&amp;lt;Scalar, 3, 3&amp;gt;&amp;amp; _hessian = (*hessian);&#xA;&#xA;    _hessian(0, 0) = std::pow(_tmp14, Scalar(2)) * _tmp22;&#xA;    _hessian(0, 1) = 0;&#xA;    _hessian(0, 2) = 0;&#xA;    _hessian(1, 0) = _tmp14 * _tmp23;&#xA;    _hessian(1, 1) = std::pow(_tmp18, Scalar(2)) * _tmp22;&#xA;    _hessian(1, 2) = 0;&#xA;    _hessian(2, 0) = _tmp14 * _tmp20 * _tmp22;&#xA;    _hessian(2, 1) = _tmp20 * _tmp23;&#xA;    _hessian(2, 2) = std::pow(_tmp20, Scalar(2)) * _tmp22;&#xA;  }&#xA;&#xA;  if (rhs != nullptr) {&#xA;    Eigen::Matrix&amp;lt;Scalar, 3, 1&amp;gt;&amp;amp; _rhs = (*rhs);&#xA;&#xA;    _rhs(0, 0) = _tmp10 * _tmp17;&#xA;    _rhs(1, 0) = _tmp10 * _tmp19;&#xA;    _rhs(2, 0) = _tmp10 * _tmp21;&#xA;  }&#xA;}&#xA;&#xA;}  // namespace sym&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SymForce can also generate runtime Python code that depends only on &lt;code&gt;numpy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The code generation system is written with pluggable &lt;a href=&#34;https://palletsprojects.com/p/jinja/&#34;&gt;jinja&lt;/a&gt; templates to minimize the work to add new backend languages. Some of our top candidates to add are TypeScript, CUDA, and PyTorch.&lt;/p&gt; &#xA;&lt;h2&gt;Optimize from C++&lt;/h2&gt; &#xA;&lt;p&gt;Now that we can generate C++ functions for each residual function, we can also run the optimization purely from C++ to get Python entirely out of the loop for production use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;const int num_poses = 3;&#xA;const int num_landmarks = 3;&#xA;&#xA;std::vector&amp;lt;sym::Factor&amp;lt;double&amp;gt;&amp;gt; factors;&#xA;&#xA;// Bearing factors&#xA;for (int i = 0; i &amp;lt; num_poses; ++i) {&#xA;    for (int j = 0; j &amp;lt; num_landmarks; ++j) {&#xA;        factors.push_back(sym::Factor&amp;lt;double&amp;gt;::Hessian(&#xA;            &amp;amp;sym::BearingFactor,&#xA;            {{&#39;P&#39;, i}, {&#39;L&#39;, j}, {&#39;a&#39;, i, j}, {&#39;e&#39;}},  // keys&#xA;            {{&#39;P&#39;, i}}  // keys to optimize&#xA;        ));&#xA;    }&#xA;}&#xA;&#xA;// Odometry factors&#xA;for (int i = 0; i &amp;lt; num_poses - 1; ++i) {&#xA;    factors.push_back(sym::Factor&amp;lt;double&amp;gt;::Hessian(&#xA;        &amp;amp;sym::OdometryFactor,&#xA;        {{&#39;P&#39;, i}, {&#39;P&#39;, i + 1}, {&#39;d&#39;, i}, {&#39;e&#39;}},  // keys&#xA;        {{&#39;P&#39;, i}, {&#39;P&#39;, i + 1}}  // keys to optimize&#xA;    ));&#xA;}&#xA;&#xA;sym::Optimizer&amp;lt;double&amp;gt; optimizer(&#xA;    params,&#xA;    factors,&#xA;    sym::kDefaultEpsilon&amp;lt;double&amp;gt;&#xA;);&#xA;&#xA;sym::Values&amp;lt;double&amp;gt; values;&#xA;for (int i = 0; i &amp;lt; num_poses; ++i) {&#xA;    values.Set({&#39;P&#39;, i}, sym::Pose2::Identity());&#xA;}&#xA;// ... (initialize all keys)&#xA;&#xA;// Optimize!&#xA;const auto stats = optimizer.Optimize(&amp;amp;values);&#xA;&#xA;std::cout &amp;lt;&amp;lt; &#34;Optimized values:&#34; &amp;lt;&amp;lt; values &amp;lt;&amp;lt; std::endl;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This tutorial shows the central workflow in SymForce for creating symbolic expressions, generating code, and optimizing. This approach works well for a wide range of complex problems in robotics, computer vision, and applied science.&lt;/p&gt; &#xA;&lt;p&gt;However, each piece may also be used independently. The optimization machinery can work with handwritten functions, and the symbolic math and code generation is useful outside of any optimization context.&lt;/p&gt; &#xA;&lt;!-- $&#xA;&lt;span style=&#34;color:blue&#34;&gt;TODO: I wanted to show `geo.V1(sm.atan2(landmark_body[1], landmark_body[0])).jacobian(pose.R)`, but you have to call `sm.simplify` to get the expression to -1, otherwise it&#39;s more complicated. All this is also showing up extraneously in the generated code. Discuss what to show.&lt;/span&gt;&#xA;&#xA;\frac{&#xA;    (-\frac{&#xA;        (-R_{im} L_0 + R_{re} L_1 + R_{im} t_0 + R_{re} t_1)^2&#xA;    }{&#xA;        (R_{re} L_0 + R_{im} L_1 - R_{im} t_1 - R_{re} t_0)^2&#xA;    } + \frac{&#xA;&#xA;        }{&#xA;&#xA;        })(R_{re} L_0 + R_{im} L_1 - R_{im} t_1 - R_{re} t_0)^2&#xA;    }{&#xA;        (-R_{im} L_0 + R_{re} L_1 + R_{im} t_0 + R_{re} t_1)^2 +&#xA;        (R_{re} L_0 + R_{im} L_1 - R_{im} t_1 - R_{re} t_0)^2&#xA;    }&#xA;$ --&gt; &#xA;&lt;p&gt;To learn more, visit the SymForce tutorials &lt;a href=&#34;https://symforce.org/#guides&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Build from Source&lt;/h1&gt; &#xA;&lt;p&gt;SymForce requires Python 3.8 or later. We strongly suggest creating a virtual python environment.&lt;/p&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;gmp&lt;/code&gt; package with one of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install libgmp-dev            # Ubuntu&#xA;brew install gmp                  # Mac&#xA;conda install -c conda-forge gmp  # Conda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SymForce contains both C++ and Python code. The C++ code is built using CMake. You can build the package either by calling pip, or by calling CMake directly. If building with &lt;code&gt;pip&lt;/code&gt;, this will call CMake under the hood, and run the same CMake build for the C++ components.&lt;/p&gt; &#xA;&lt;p&gt;If you encounter build issues, please file an &lt;a href=&#34;https://github.com/symforce-org/symforce/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build with pip&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to build and install SymForce if you only plan on making Python changes is with pip. From the symforce directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the C++ components of SymForce, but you won&#39;t be able to run &lt;code&gt;pip install -e .&lt;/code&gt; repeatedly if you need to rebuild C++ code. If you&#39;re changing C++ code and rebuilding, you should build with CMake directly as described &lt;a href=&#34;https://raw.githubusercontent.com/symforce-org/symforce/main/#build-with-cmake&#34;&gt;below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install .&lt;/code&gt; will not install pinned versions of SymForce&#39;s dependencies, it&#39;ll install any compatible versions. It also won&#39;t install all packages required to run all of the SymForce tests and build all of the targets (e.g. building the docs or running the linters). If you want all packages required for that, you should &lt;code&gt;pip install .[dev]&lt;/code&gt; instead (or one of the other groups of extra requirements in our &lt;code&gt;setup.py&lt;/code&gt;). If you additionally want pinned versions of our dependencies, which are the exact versions guaranteed by CI to pass all of our tests, you can install them from &lt;code&gt;pip install -r dev_requirements.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build with CMake&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ll be modifying the C++ parts of SymForce, you should build with CMake directly instead - this method will not install SymForce into your Python environment, so you&#39;ll need to add it to your PYTHONPATH separately.&lt;/p&gt; &#xA;&lt;p&gt;Install python requirements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r dev_requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build SymForce (requires C++14 or later):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;make -j $(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll then need to add SymForce (along with &lt;code&gt;gen/python&lt;/code&gt; and &lt;code&gt;third_party/skymarshal&lt;/code&gt; within symforce) to your PYTHONPATH in order to use them.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;SymForce is released under the &lt;a href=&#34;https://spdx.org/licenses/Apache-2.0.html&#34;&gt;Apache 2.0&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/symforce-org/symforce/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Sponsors&lt;/h1&gt; &#xA;&lt;p&gt;SymForce is developed and maintained by &lt;a href=&#34;https://skydio.com/&#34;&gt;Skydio&lt;/a&gt;. It is released as a free and open-source library for the robotics community.&lt;/p&gt; &#xA;&lt;a href=&#34;http://skydio.com#gh-light-mode-only&#34;&gt; &lt;img alt=&#34;Skydio Logo&#34; src=&#34;https://raw.githubusercontent.com/symforce-org/symforce/main/docs/static/images/skydio-logo-2.png&#34; width=&#34;300px&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;http://skydio.com#gh-dark-mode-only&#34;&gt; &lt;img alt=&#34;Skydio Logo&#34; src=&#34;https://raw.githubusercontent.com/symforce-org/symforce/main/docs/static/images/skydio-logo-2-white.png&#34; width=&#34;300px&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;While SymForce already powers tens of thousands of robots at Skydio, the public library is new and we are releasing it in beta stage. This is just the beginning, and we are excited for engagement from the community. Thank you for helping us develop SymForce! The best way to get started is to file &lt;a href=&#34;https://github.com/symforce-org/symforce/issues&#34;&gt;issues&lt;/a&gt; for bugs or desired features.&lt;/p&gt; &#xA;&lt;p&gt;There are many features we&#39;re excited to add to SymForce and would love to see contributed by the community. Most are outlined in the issues, but some major desired contributions are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add more backend languages, such as TypeScript, CUDA, GLSL/HLSL, and PyTorch&lt;/li&gt; &#xA; &lt;li&gt;Easily swap in approximate or architecture-specific implementations of primitive functions, such as trig functions&lt;/li&gt; &#xA; &lt;li&gt;Support for WebAssembly compilation&lt;/li&gt; &#xA; &lt;li&gt;More Lie group types, in particular Sim(3)&lt;/li&gt; &#xA; &lt;li&gt;Support for constraints in our optimizer&lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://ispc.github.io/&#34;&gt;ISPC&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>