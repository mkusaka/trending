<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T01:50:07Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ossamamehmood/Hacktoberfest2023</title>
    <updated>2023-10-01T01:50:07Z</updated>
    <id>tag:github.com,2023-10-01:/ossamamehmood/Hacktoberfest2023</id>
    <link href="https://github.com/ossamamehmood/Hacktoberfest2023" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hacktoberfest 2023 OPEN FIRST Pull Request - FREE T-SHIRTüéâ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HacktoberFest 2023 &lt;code&gt;OPEN FIRST&lt;/code&gt; Pull Request - &lt;code&gt;FREE T-SHIRT&lt;/code&gt;üéâ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ossamamehmood/Hacktoberfest2023/raw/main/.github/logo.png&#34; alt=&#34;HacktoberFest 2023&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors of &lt;code&gt;Hacktoberfest 2023&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/ossamamehmood/Hacktoberfest2023/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=ossamamehmood/Hacktoberfest2023&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;This Project Is Perfect For Your First Pull Request&lt;/h2&gt; &#xA;&lt;p&gt;üó£ &lt;strong&gt;Hacktoberfest encourages participation in the open-source community, which grows bigger every year. Complete the challenge and earn a limited edition T-shirt.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;üì¢ &lt;strong&gt;Register &lt;a href=&#34;https://hacktoberfest.digitalocean.com&#34;&gt;here&lt;/a&gt; for Hacktoberfest and make four pull requests (PRs) between October 1st-31st to grab free SWAGS üî•.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/hacktoberfest-2023-blueviolet&#34; alt=&#34;Hacktober Badge&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/static/v1?label=%F0%9F%8C%9F&amp;amp;message=If%20Useful&amp;amp;style=style=flat&amp;amp;color=BC4E99&#34; alt=&#34;Star Badge&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/ossamamehmood&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributions-welcome-violet.svg?style=flat&amp;amp;logo=git&#34; alt=&#34;Contributions&#34;&gt;&lt;/a&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/ossamamehmood/hacktoberfest2023/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/ossamamehmood/hacktoberfest2023&#34; alt=&#34;Pull Requests Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ossamamehmood/hacktoberfest2023/graphs/contributors&#34;&gt;&lt;img alt=&#34;GitHub contributors&#34; src=&#34;https://img.shields.io/github/contributors/ossamamehmood/hacktoberfest2023?color=2b9348&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ossamamehmood/hacktoberfest2023/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/ossamamehmood/hacktoberfest2023?color=2b9348&#34; alt=&#34;License Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;INSTRUCTIONS-&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork this Repository using the button at the top on the right corner.&lt;/li&gt; &#xA; &lt;li&gt;Clone your forked repository to your PC ( git clone &#34;url from clone option.)&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch for your modifications (ie. &lt;code&gt;git branch new-user and check it out &lt;/code&gt;git checkout new-user&lt;code&gt;or simply do&lt;/code&gt;git checkout -b new-user`)&lt;/li&gt; &#xA; &lt;li&gt;Add your profile image in &lt;code&gt;static/images/&lt;/code&gt; ( use drag and drop option or upload by commands.)&lt;/li&gt; &#xA; &lt;li&gt;Add your profile data in &lt;code&gt;content/participant/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add your files (&lt;code&gt;git add -A&lt;/code&gt;), commit (&lt;code&gt;git commit -m &#34;added myself&#34;&lt;/code&gt;) and push (&lt;code&gt;git push origin new-user&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create a pull request&lt;/li&gt; &#xA; &lt;li&gt;Star this repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How To Make Your First Pull Request&lt;/h1&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;&amp;lt;YOUR-USERNAME&amp;gt;&lt;/code&gt; with your GitHub username in this guide.&lt;/p&gt; &#xA;&lt;h2&gt;1. Add your profile picture to the folder&lt;/h2&gt; &#xA;&lt;p&gt;Add a picture of your choice in &lt;code&gt;static/images/&lt;/code&gt;. Accepted files are &lt;strong&gt;png&lt;/strong&gt; and &lt;strong&gt;jpg&lt;/strong&gt;, should be squared and minimum size 544x544 pixels. Ex.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;static/images/&amp;lt;YOUR-USERNAME&amp;gt;.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2. Add your profile information&lt;/h2&gt; &#xA;&lt;p&gt;Create a markdown file in your folder following the convention &lt;code&gt;content/participant/&amp;lt;YOUR-USERNAME&amp;gt;.md&lt;/code&gt;. Ex.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;content/participant/&amp;lt;YOUR-USERNAME&amp;gt;.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the next template into your file, delete the boilerplate data and fill the information with yours.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;---&#xA;name: YOURNAME&#xA;institution/company: INSTITUTION_NAME&#xA;github: USERNAME&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h2&gt; OR &lt;/h2&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;3. Create / Upload Your Code / Algorithms&lt;/h2&gt; &#xA;&lt;p&gt;Create/Upload your code in the folder following the convention &lt;code&gt;Add Code Here&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Choose an extract language folder &lt;code&gt;drop your code&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Below is &lt;code&gt;an example&lt;/code&gt; to add file properly&lt;/li&gt; &#xA; &lt;li&gt;You can follow up &lt;code&gt;any languages&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;Add Code Here/PYTHON/&amp;lt;YOUR-FILERNAME&amp;gt;.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Add Code Here/C++/&amp;lt;YOUR-FILERNAME&amp;gt;.cpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can follow any pathway a &lt;code&gt;code&lt;/code&gt; or &lt;code&gt;profile information&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4. Wait for Pull Request to merge&lt;/h2&gt; &#xA;&lt;h2&gt;5. Celebrate - you&#39;ve done your first pull request!!&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&#39;&#39;&#39;&#xA;Always make more than 4 pull requests.&#xA;Let&#39;s say you have made only 4 pull requests to different projects,&#xA;but one project is excluded from hackoctoberfest event then your pull request will not be counted and &#xA;then you have the remaining 3 valid pull requests if these projects are not excluded.&#xA;If you fail to make 4 pull requests then you can&#39;t get swags or t-shirts.&#xA;I will recommend you make a pull request to your own repo which is very very safe for you.&#xA;Keep in mind that the repo has hacktoberfest topic.&#xA;&#39;&#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;+ Follow Me : } Quick Approval of Pull Request&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&#39;&#39;&#39;&#xA;To get approval of the pull request much quicker and faster (`Follow Me`)üöÄ&#xA;&#39;&#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a href=&#34;https://github.com/ossamamehmood&#34;&gt;&lt;kbd&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/ossamamehmood?size=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;/kbd&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ossama Mehmood&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&#xA;&lt;br&gt;</summary>
  </entry>
  <entry>
    <title>valhalla/valhalla</title>
    <updated>2023-10-01T01:50:07Z</updated>
    <id>tag:github.com,2023-10-01:/valhalla/valhalla</id>
    <link href="https://github.com/valhalla/valhalla" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source Routing Engine for OpenStreetMap&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt; ‚ñà‚ñà‚ñí   ‚ñà‚ñì ‚ñÑ‚ñÑ‚ñÑ       ‚ñà‚ñà‚ñì     ‚ñà‚ñà‚ñë ‚ñà‚ñà  ‚ñÑ‚ñÑ‚ñÑ       ‚ñà‚ñà‚ñì     ‚ñà‚ñà‚ñì    ‚ñÑ‚ñÑ‚ñÑ&#xA;‚ñì‚ñà‚ñà‚ñë   ‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñì‚ñà‚ñà‚ñí    ‚ñì‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñì‚ñà‚ñà‚ñí    ‚ñì‚ñà‚ñà‚ñí   ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ&#xA; ‚ñì‚ñà‚ñà  ‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñà‚ñà‚ñë   ‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ&#xA;  ‚ñí‚ñà‚ñà ‚ñà‚ñë‚ñë‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñí‚ñà‚ñà‚ñë    ‚ñë‚ñì‚ñà ‚ñë‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñà‚ñà‚ñë   ‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà&#xA;   ‚ñí‚ñÄ‚ñà‚ñë   ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñì‚ñà‚ñí‚ñë‚ñà‚ñà‚ñì ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí&#xA;   ‚ñë ‚ñê‚ñë   ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñë‚ñì  ‚ñë ‚ñí ‚ñë‚ñë‚ñí‚ñë‚ñí ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñë‚ñì  ‚ñë‚ñë ‚ñí‚ñë‚ñì  ‚ñë‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë&#xA;   ‚ñë ‚ñë‚ñë    ‚ñí   ‚ñí‚ñí ‚ñë‚ñë ‚ñë ‚ñí  ‚ñë ‚ñí ‚ñë‚ñí‚ñë ‚ñë  ‚ñí   ‚ñí‚ñí ‚ñë‚ñë ‚ñë ‚ñí  ‚ñë‚ñë ‚ñë ‚ñí  ‚ñë ‚ñí   ‚ñí‚ñí ‚ñë&#xA;     ‚ñë‚ñë    ‚ñë   ‚ñí     ‚ñë ‚ñë    ‚ñë  ‚ñë‚ñë ‚ñë  ‚ñë   ‚ñí     ‚ñë ‚ñë     ‚ñë ‚ñë    ‚ñë   ‚ñí&#xA;      ‚ñë        ‚ñë  ‚ñë    ‚ñë  ‚ñë ‚ñë  ‚ñë  ‚ñë      ‚ñë  ‚ñë    ‚ñë  ‚ñë    ‚ñë  ‚ñë     ‚ñë  ‚ñë&#xA;     ‚ñë&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Valhalla is an open source routing engine and accompanying libraries for use with OpenStreetMap data. Valhalla also includes tools like time+distance matrix computation, isochrones, elevation sampling, map matching and tour optimization (Travelling Salesman).&lt;/p&gt; &#xA;&lt;h2&gt;Build Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Linux/MacOs&lt;/th&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;th&gt;MinGW64&lt;/th&gt; &#xA;   &lt;th&gt;Code Coverage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://circleci.com/gh/valhalla/valhalla/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/valhalla/valhalla/tree/master.svg?style=svg&#34; alt=&#34;Circle CI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/valhalla1/valhalla/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/valhalla1/valhalla/_apis/build/status/valhalla.valhalla?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/valhalla/valhalla/workflows/Valhalla%20MinGW%20Build/badge.svg?sanitize=true&#34; alt=&#34;Valhalla MinGW Build&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://codecov.io/gh/valhalla/valhalla&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/valhalla/valhalla/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Valhalla, and all of the projects under the Valhalla organization, use the &lt;a href=&#34;https://raw.githubusercontent.com/valhalla/valhalla/master/COPYING&#34;&gt;MIT License&lt;/a&gt;. Avatar/logo by &lt;a href=&#34;https://www.instagram.com/jaykaydraws/&#34;&gt;Jordan&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;OpenStreetMap data in the &lt;code&gt;./test/data&lt;/code&gt; is licensed under &lt;a href=&#34;https://opendatacommons.org/licenses/odbl/&#34;&gt;ODbL&lt;/a&gt; and &lt;a href=&#34;https://www.openstreetmap.org/copyright&#34;&gt;copyrighted&lt;/a&gt; by OSM contributors. Additional information on licenses and other requirements concerning the data sources most frequently used by Valhalla can be found in &lt;a href=&#34;https://valhalla.github.io/valhalla/mjolnir/data_sources/&#34;&gt;the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;There are several key features that we hope can differentiate the Valhalla project from other routing and network analysis engines. They are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open source software, on open source data with a very liberal license. Should allow for transparency in development, encourage contribution and community input, and foster use in other projects.&lt;/li&gt; &#xA; &lt;li&gt;Tiled hierarchical data structure. Should allow users to have a small memory footprint on memory constrained devices, enable offline routing, provide a means for regional extracts and partial updates.&lt;/li&gt; &#xA; &lt;li&gt;Dynamic, runtime costing of edges and vertices within the graph via a plugin architecture. Should allow for customization and alternate route generation.&lt;/li&gt; &#xA; &lt;li&gt;C++ based API. Should allow for cross compilation of the various pieces to enable routing on offline portable devices.&lt;/li&gt; &#xA; &lt;li&gt;A plugin based narrative and manoeuvre generation architecture. Should allow for generation that is customized either to the administrative area or to the target locale.&lt;/li&gt; &#xA; &lt;li&gt;Multi-modal and time-based routes. Should allow for mixing auto, pedestrian, bike and public transportation in the same route or setting a time by which one must arrive at a location.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo Server&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fossgis.de&#34;&gt;FOSSGIS e.V.&lt;/a&gt; hosts a demo server which is open to the public and includes a full planet graph with an &lt;a href=&#34;https://github.com/gis-ops/valhalla-app&#34;&gt;open-source web app&lt;/a&gt; on &lt;a href=&#34;https://valhalla.openstreetmap.de&#34;&gt;https://valhalla.openstreetmap.de&lt;/a&gt;. The HTTP API is accessible on a slightly different subdomain, e.g. &lt;a href=&#34;https://valhalla1.openstreetmap.de/isochrone&#34;&gt;https://valhalla1.openstreetmap.de/isochrone&lt;/a&gt;. Usage of the demo server follows the usual fair-usage policy as OSRM &amp;amp; Nominatim demo servers (somewhat enforced by &lt;a href=&#34;https://github.com/valhalla/valhalla/discussions/3373#discussioncomment-1644713&#34;&gt;rate limits&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Platform Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Valhalla is fully functional on many Linux and Mac OS distributions, and is also used on iOS and Android devices.&lt;/p&gt; &#xA;&lt;p&gt;For Windows, not all functionality is fully supported yet. Building the Valhalla library works flawlessly, as well as the following application modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TOOLS&lt;/code&gt;: utilities to query and benchmark various components&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DATA_TOOLS&lt;/code&gt;: utilities to build input data and handle transit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PYTHON_BINDINGS&lt;/code&gt;: use all actions (route, isochrones, matrix etc) via the Valhalla Python library (needs a full (i.e. development) Python distribution in the &lt;code&gt;PATH&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Organization&lt;/h2&gt; &#xA;&lt;p&gt;The Valhalla organization is comprised of several library modules each responsible for a different function. The layout of the various modules is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/midgard&#34;&gt;Midgard&lt;/a&gt; - Basic geographic and geometric algorithms for use in the various other projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/baldr&#34;&gt;Baldr&lt;/a&gt; - The base data structures for accessing and caching tiled route data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/sif&#34;&gt;Sif&lt;/a&gt; - Library used in costing of graph nodes and edges. This can be used as input to &lt;code&gt;loki&lt;/code&gt; and &lt;code&gt;thor&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/skadi&#34;&gt;Skadi&lt;/a&gt; - Library and service for accessing elevation data. This can be used as input to &lt;code&gt;mjolnir&lt;/code&gt; or as a standalone service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/mjolnir&#34;&gt;Mjolnir&lt;/a&gt; - Tools for turning open data into Valhalla graph tiles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/loki&#34;&gt;Loki&lt;/a&gt; - Library used to search graph tiles and correlate input locations to an entity within a tile. This correlated entity (edge or vertex) can be used as input to &lt;code&gt;thor&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/meili&#34;&gt;Meili&lt;/a&gt; - Library used to for map-matching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/thor&#34;&gt;Thor&lt;/a&gt; - Library used to generate a path through the graph tile hierarchy. This path and attribution along the path can be used as input to &lt;code&gt;odin&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/odin&#34;&gt;Odin&lt;/a&gt; - Library used to generate manoeuvres and narrative based on a path. This set of directions information can be used as input to &lt;code&gt;tyr&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/tyr&#34;&gt;Tyr&lt;/a&gt; - Service used to handle http requests for a route communicating with all of the other valhalla APIs. The service will format output from &lt;code&gt;odin&lt;/code&gt; and support json (and eventually protocol buffer) output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/src&#34;&gt;Tools&lt;/a&gt; - A set command line tools that exercise bits of functionality from the library components above and provide the basis for quality testing and performance benchmarking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/demos&#34;&gt;Demos&lt;/a&gt; - A set of demos which allows interacting with the service and APIs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation is stored in the &lt;code&gt;docs/&lt;/code&gt; folder in this GitHub repository. It can be viewed at &lt;a href=&#34;https://valhalla.github.io/valhalla&#34;&gt;valhalla.github.io/valhalla&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To run Valhalla locally or your own server, we recommend using our Docker image. Checkout our docker image here: &lt;a href=&#34;https://github.com/orgs/valhalla/packages&#34;&gt;https://github.com/orgs/valhalla/packages&lt;/a&gt;. Also, there&#39;s a &lt;a href=&#34;https://github.com/gis-ops/docker-valhalla&#34;&gt;community Docker image&lt;/a&gt; with more &#34;magic&#34; than the native one.&lt;/p&gt; &#xA;&lt;p&gt;If you want to build Valhalla from source, follow the &lt;a href=&#34;https://valhalla.github.io/valhalla/building/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information on binaries, see &lt;a href=&#34;https://raw.githubusercontent.com/valhalla/valhalla/master/#command-line-tools&#34;&gt;Command Line Tools&lt;/a&gt; section below and the &lt;a href=&#34;https://valhalla.github.io/valhalla&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We &lt;span&gt;‚ù§Ô∏è&lt;/span&gt; contributions to Valhalla. They could be non-technical, e.g. translations into other languages via &lt;a href=&#34;https://www.transifex.com/valhalla/valhalla-phrases/locales-en-us-json--transifex/&#34;&gt;Transifex&lt;/a&gt; or documentation improvements, or technical ones like bug fixes or feature implementations. It&#39;s important to open an issue before setting out to work on a PR.&lt;/p&gt; &#xA;&lt;p&gt;Ideally, get familiar with our &lt;a href=&#34;https://github.com/valhalla/valhalla/raw/master/CONTRIBUTING.md&#34;&gt;Contribution guidelines&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Valhalla includes several microbenchmarks which you can build and run using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make benchmarks&#xA;make run-benchmarks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;They are enabled by the &lt;code&gt;-DENABLE_BENCHMARKS=On&lt;/code&gt; CMake flag and are currently only available for Linux and MacOS.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Tools&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;valhalla_service&lt;/code&gt; aka one-shot mode&lt;/h3&gt; &#xA;&lt;p&gt;If you can&#39;t (e.g. Windows Server) or don&#39;t want to have the full-fledged HTTP API running, you can have the (almost) exact same behavior with the &#39;valhalla_service&#39; executable in so-called &#34;one-shot&#34; mode. It&#39;s simple, just pass the config file, the action (route, isochrone, matrix etc) and the stringified JSON request (or alternatively a file containing the request to circumvent shell command length issues):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;valhalla_service valhalla.json isochrone &#39;{&#34;locations&#34;:[{&#34;lat&#34;:42.552448,&#34;lon&#34;:1.564865}],&#34;costing&#34;:&#34;auto&#34;,&#34;contours&#34;:[{&#34;time&#34;:10,&#34;color&#34;:&#34;ff0000&#34;}], &#34;show_locations&#34;:true}&#39;&#xA;# Alternatively you can pass a file with the same contents&#xA;valhalla_service valhalla.json isochrone isochrone_request.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s important to note that all Valhalla logs for one-shot mode are piped to &lt;code&gt;stderr&lt;/code&gt; while the actual JSON response will be in &lt;code&gt;stdout&lt;/code&gt;. To completely silence the logs, pass &lt;code&gt;type: &#34;&#34;&lt;/code&gt; to &lt;code&gt;midgard.logging&lt;/code&gt; in the config file.&lt;/p&gt; &#xA;&lt;h3&gt;Batch Script Tool&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/raw/master/run_route_scripts/README.md&#34;&gt;Batch Run_Route&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;p&gt;The following projects are open-source and built with the intention to make it easier to use Valhalla and its features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenStreetMapSpeeds/&#34;&gt;&lt;strong&gt;OpenStreetMapSpeeds&lt;/strong&gt;&lt;/a&gt;: A project conflating open GPS data to improve Valhalla&#39;s speed classification. The current JSON is from early 2022 and can be downloaded &lt;a href=&#34;https://raw.githubusercontent.com/OpenStreetMapSpeeds/schema/master/default_speeds.json&#34;&gt;here&lt;/a&gt; and used by setting the path in the &lt;code&gt;mjolnir.default_speeds_config&lt;/code&gt; config option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gis-ops/docker-valhalla&#34;&gt;&lt;strong&gt;docker-valhalla&lt;/strong&gt;&lt;/a&gt;: An easy-to-use, relatively magical Docker image for Valhalla, which only requires setting a few environment variables in &lt;code&gt;docker-compose.yml&lt;/code&gt; to get a full-featured Valhalla instance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/itayankri/valhalla-operator&#34;&gt;&lt;strong&gt;valhalla-operator&lt;/strong&gt;&lt;/a&gt;: A k8s operator to deploy and manage Valhalla.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gis-ops/valhalla-app&#34;&gt;&lt;strong&gt;valhalla-app&lt;/strong&gt;&lt;/a&gt;: A React based web app for Valhalla, powering &lt;a href=&#34;https://valhalla.openstreetmap.de/&#34;&gt;https://valhalla.openstreetmap.de/&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gis-ops/valhalla-qgis-plugin&#34;&gt;&lt;strong&gt;valhalla-qgis-plugin&lt;/strong&gt;&lt;/a&gt;: A QGIS plugin for Valhalla, also available in the &lt;a href=&#34;https://plugins.qgis.org/plugins/valhalla/&#34;&gt;official QGIS plugin store&lt;/a&gt;. &lt;strong&gt;Note&lt;/strong&gt;, it&#39;s almost deprecated and will be replaced with a much superior alternative.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gis-ops/routingpy&#34;&gt;&lt;strong&gt;routingpy&lt;/strong&gt;&lt;/a&gt;: A Python client for most open-source routing engines, including Valhalla, with a common interface for all engines. Available on &lt;a href=&#34;https://pypi.org/project/routingpy/&#34;&gt;PyPI&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gis-ops/routingjs&#34;&gt;&lt;strong&gt;routingjs&lt;/strong&gt;&lt;/a&gt;: A TypeScript client for most open-source routing engines, including Valhalla, with a common interface for all engines. Available as engine-specific packages on &lt;a href=&#34;https://www.npmjs.com/package/@routingjs/valhalla&#34;&gt;npm&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gis-ops/pyvalhalla&#34;&gt;&lt;strong&gt;pyvalhalla&lt;/strong&gt;&lt;/a&gt;: Python bindings for Valhalla, so its APIs can be used from within Python without a HTTP service. Available on &lt;a href=&#34;https://pypi.org/project/pyvalhalla/&#34;&gt;PyPI&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JuliaBinaryWrappers/Valhalla_jll.jl&#34;&gt;&lt;strong&gt;Valhalla_jll.jl&lt;/strong&gt;&lt;/a&gt;: Valhalla binaries shipped for Julia.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>google/benchmark</title>
    <updated>2023-10-01T01:50:07Z</updated>
    <id>tag:github.com,2023-10-01:/google/benchmark</id>
    <link href="https://github.com/google/benchmark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A microbenchmark support library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Benchmark&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/benchmark/actions?query=workflow%3Abuild-and-test&#34;&gt;&lt;img src=&#34;https://github.com/google/benchmark/workflows/build-and-test/badge.svg?sanitize=true&#34; alt=&#34;build-and-test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/benchmark/actions/workflows/bazel.yml&#34;&gt;&lt;img src=&#34;https://github.com/google/benchmark/actions/workflows/bazel.yml/badge.svg?sanitize=true&#34; alt=&#34;bazel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/benchmark/actions?query=workflow%3Apylint&#34;&gt;&lt;img src=&#34;https://github.com/google/benchmark/workflows/pylint/badge.svg?sanitize=true&#34; alt=&#34;pylint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/benchmark/actions?query=workflow%3Atest-bindings&#34;&gt;&lt;img src=&#34;https://github.com/google/benchmark/workflows/test-bindings/badge.svg?sanitize=true&#34; alt=&#34;test-bindings&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/google/benchmark&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/google/benchmark/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/cz7UX7wKC2&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/1125694995928719494/widget.png?style=shield&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A library to benchmark code snippets, similar to unit tests. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;benchmark/benchmark.h&amp;gt;&#xA;&#xA;static void BM_SomeFunction(benchmark::State&amp;amp; state) {&#xA;  // Perform setup here&#xA;  for (auto _ : state) {&#xA;    // This code gets timed&#xA;    SomeFunction();&#xA;  }&#xA;}&#xA;// Register the function as a benchmark&#xA;BENCHMARK(BM_SomeFunction);&#xA;// Run the benchmark&#xA;BENCHMARK_MAIN();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started, see &lt;a href=&#34;https://raw.githubusercontent.com/google/benchmark/main/#requirements&#34;&gt;Requirements&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/google/benchmark/main/#installation&#34;&gt;Installation&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/google/benchmark/main/#usage&#34;&gt;Usage&lt;/a&gt; for a full example and the &lt;a href=&#34;https://raw.githubusercontent.com/google/benchmark/main/docs/user_guide.md&#34;&gt;User Guide&lt;/a&gt; for a more comprehensive feature overview.&lt;/p&gt; &#xA;&lt;p&gt;It may also help to read the &lt;a href=&#34;https://github.com/google/googletest/raw/main/docs/primer.md&#34;&gt;Google Test documentation&lt;/a&gt; as some of the structural aspects of the APIs are similar.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/forum/benchmark-discuss&#34;&gt;Discussion group&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;IRC channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libera.chat&#34;&gt;libera&lt;/a&gt; #benchmark&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/benchmark/main/docs/tools.md&#34;&gt;Additional Tooling Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/benchmark/main/docs/AssemblyTests.md&#34;&gt;Assembly Testing Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/benchmark/main/docs/python_bindings.md&#34;&gt;Building and installing Python bindings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The library can be used with C++03. However, it requires C++11 to build, including compiler and standard library support.&lt;/p&gt; &#xA;&lt;p&gt;The following minimum versions are required to build the library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GCC 4.8&lt;/li&gt; &#xA; &lt;li&gt;Clang 3.4&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio 14 2015&lt;/li&gt; &#xA; &lt;li&gt;Intel 2015 Update 1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/benchmark/main/docs/platform_specific_build_instructions.md&#34;&gt;Platform-Specific Build Instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This describes the installation process using cmake. As pre-requisites, you&#39;ll need git and cmake installed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/benchmark/main/docs/dependencies.md&#34;&gt;dependencies.md&lt;/a&gt; for more details regarding supported versions of build tools.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Check out the library.&#xA;$ git clone https://github.com/google/benchmark.git&#xA;# Go to the library root directory&#xA;$ cd benchmark&#xA;# Make a build directory to place the build output.&#xA;$ cmake -E make_directory &#34;build&#34;&#xA;# Generate build system files with cmake, and download any dependencies.&#xA;$ cmake -E chdir &#34;build&#34; cmake -DBENCHMARK_DOWNLOAD_DEPENDENCIES=on -DCMAKE_BUILD_TYPE=Release ../&#xA;# or, starting with CMake 3.13, use a simpler form:&#xA;# cmake -DCMAKE_BUILD_TYPE=Release -S . -B &#34;build&#34;&#xA;# Build the library.&#xA;$ cmake --build &#34;build&#34; --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This builds the &lt;code&gt;benchmark&lt;/code&gt; and &lt;code&gt;benchmark_main&lt;/code&gt; libraries and tests. On a unix system, the build directory should now look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/benchmark&#xA;  /build&#xA;    /src&#xA;      /libbenchmark.a&#xA;      /libbenchmark_main.a&#xA;    /test&#xA;      ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, you can run the tests to check the build.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake -E chdir &#34;build&#34; ctest --build-config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to install the library globally, also run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo cmake --build &#34;build&#34; --config Release --target install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that Google Benchmark requires Google Test to build and run the tests. This dependency can be provided two ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Checkout the Google Test sources into &lt;code&gt;benchmark/googletest&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, if &lt;code&gt;-DBENCHMARK_DOWNLOAD_DEPENDENCIES=ON&lt;/code&gt; is specified during configuration as above, the library will automatically download and build any required dependencies.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you do not wish to build and run the tests, add &lt;code&gt;-DBENCHMARK_ENABLE_GTEST_TESTS=OFF&lt;/code&gt; to &lt;code&gt;CMAKE_ARGS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Debug vs Release&lt;/h3&gt; &#xA;&lt;p&gt;By default, benchmark builds as a debug library. You will see a warning in the output when this is the case. To build it as a release library instead, add &lt;code&gt;-DCMAKE_BUILD_TYPE=Release&lt;/code&gt; when generating the build system files, as shown above. The use of &lt;code&gt;--config Release&lt;/code&gt; in build commands is needed to properly support multi-configuration tools (like Visual Studio for example) and can be skipped for other build systems (like Makefile).&lt;/p&gt; &#xA;&lt;p&gt;To enable link-time optimisation, also add &lt;code&gt;-DBENCHMARK_ENABLE_LTO=true&lt;/code&gt; when generating the build system files.&lt;/p&gt; &#xA;&lt;p&gt;If you are using gcc, you might need to set &lt;code&gt;GCC_AR&lt;/code&gt; and &lt;code&gt;GCC_RANLIB&lt;/code&gt; cmake cache variables, if autodetection fails.&lt;/p&gt; &#xA;&lt;p&gt;If you are using clang, you may need to set &lt;code&gt;LLVMAR_EXECUTABLE&lt;/code&gt;, &lt;code&gt;LLVMNM_EXECUTABLE&lt;/code&gt; and &lt;code&gt;LLVMRANLIB_EXECUTABLE&lt;/code&gt; cmake cache variables.&lt;/p&gt; &#xA;&lt;p&gt;To enable sanitizer checks (eg., &lt;code&gt;asan&lt;/code&gt; and &lt;code&gt;tsan&lt;/code&gt;), add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; -DCMAKE_C_FLAGS=&#34;-g -O2 -fno-omit-frame-pointer -fsanitize=address -fsanitize=thread -fno-sanitize-recover=all&#34;&#xA; -DCMAKE_CXX_FLAGS=&#34;-g -O2 -fno-omit-frame-pointer -fsanitize=address -fsanitize=thread -fno-sanitize-recover=all &#34;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stable and Experimental Library Versions&lt;/h3&gt; &#xA;&lt;p&gt;The main branch contains the latest stable version of the benchmarking library; the API of which can be considered largely stable, with source breaking changes being made only upon the release of a new major version.&lt;/p&gt; &#xA;&lt;p&gt;Newer, experimental, features are implemented and tested on the &lt;a href=&#34;https://github.com/google/benchmark/tree/v2&#34;&gt;&lt;code&gt;v2&lt;/code&gt; branch&lt;/a&gt;. Users who wish to use, test, and provide feedback on the new features are encouraged to try this branch. However, this branch provides no stability guarantees and reserves the right to change and break the API at any time.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Basic usage&lt;/h3&gt; &#xA;&lt;p&gt;Define a function that executes the code to measure, register it as a benchmark function using the &lt;code&gt;BENCHMARK&lt;/code&gt; macro, and ensure an appropriate &lt;code&gt;main&lt;/code&gt; function is available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;benchmark/benchmark.h&amp;gt;&#xA;&#xA;static void BM_StringCreation(benchmark::State&amp;amp; state) {&#xA;  for (auto _ : state)&#xA;    std::string empty_string;&#xA;}&#xA;// Register the function as a benchmark&#xA;BENCHMARK(BM_StringCreation);&#xA;&#xA;// Define another benchmark&#xA;static void BM_StringCopy(benchmark::State&amp;amp; state) {&#xA;  std::string x = &#34;hello&#34;;&#xA;  for (auto _ : state)&#xA;    std::string copy(x);&#xA;}&#xA;BENCHMARK(BM_StringCopy);&#xA;&#xA;BENCHMARK_MAIN();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the benchmark, compile and link against the &lt;code&gt;benchmark&lt;/code&gt; library (libbenchmark.a/.so). If you followed the build steps above, this library will be under the build directory you created.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Example on linux after running the build steps above. Assumes the&#xA;# `benchmark` and `build` directories are under the current directory.&#xA;$ g++ mybenchmark.cc -std=c++11 -isystem benchmark/include \&#xA;  -Lbenchmark/build/src -lbenchmark -lpthread -o mybenchmark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, link against the &lt;code&gt;benchmark_main&lt;/code&gt; library and remove &lt;code&gt;BENCHMARK_MAIN();&lt;/code&gt; above to get the same behavior.&lt;/p&gt; &#xA;&lt;p&gt;The compiled executable will run all benchmarks by default. Pass the &lt;code&gt;--help&lt;/code&gt; flag for option information or see the &lt;a href=&#34;https://raw.githubusercontent.com/google/benchmark/main/docs/user_guide.md&#34;&gt;User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Usage with CMake&lt;/h3&gt; &#xA;&lt;p&gt;If using CMake, it is recommended to link against the project-provided &lt;code&gt;benchmark::benchmark&lt;/code&gt; and &lt;code&gt;benchmark::benchmark_main&lt;/code&gt; targets using &lt;code&gt;target_link_libraries&lt;/code&gt;. It is possible to use &lt;code&gt;find_package&lt;/code&gt; to import an installed version of the library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;find_package(benchmark REQUIRED)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, &lt;code&gt;add_subdirectory&lt;/code&gt; will incorporate the library directly in to one&#39;s CMake project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;add_subdirectory(benchmark)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Either way, link to the library as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;target_link_libraries(MyTarget benchmark::benchmark)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>