<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-26T01:49:58Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>raulmur/ORB_SLAM2</title>
    <updated>2023-03-26T01:49:58Z</updated>
    <id>tag:github.com,2023-03-26:/raulmur/ORB_SLAM2</id>
    <link href="https://github.com/raulmur/ORB_SLAM2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-Time SLAM for Monocular, Stereo and RGB-D Cameras, with Loop Detection and Relocalization Capabilities&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ORB-SLAM2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Authors:&lt;/strong&gt; &lt;a href=&#34;http://webdiis.unizar.es/~raulmur/&#34;&gt;Raul Mur-Artal&lt;/a&gt;, &lt;a href=&#34;http://webdiis.unizar.es/~jdtardos/&#34;&gt;Juan D. Tardos&lt;/a&gt;, &lt;a href=&#34;http://webdiis.unizar.es/~josemari/&#34;&gt;J. M. M. Montiel&lt;/a&gt; and &lt;a href=&#34;http://doriangalvez.com/&#34;&gt;Dorian Galvez-Lopez&lt;/a&gt; (&lt;a href=&#34;https://github.com/dorian3d/DBoW2&#34;&gt;DBoW2&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;13 Jan 2017&lt;/strong&gt;: OpenCV 3 and Eigen 3.3 are now supported.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;22 Dec 2016&lt;/strong&gt;: Added AR demo (see section 7).&lt;/p&gt; &#xA;&lt;p&gt;ORB-SLAM2 is a real-time SLAM library for &lt;strong&gt;Monocular&lt;/strong&gt;, &lt;strong&gt;Stereo&lt;/strong&gt; and &lt;strong&gt;RGB-D&lt;/strong&gt; cameras that computes the camera trajectory and a sparse 3D reconstruction (in the stereo and RGB-D case with true scale). It is able to detect loops and relocalize the camera in real time. We provide examples to run the SLAM system in the &lt;a href=&#34;http://www.cvlibs.net/datasets/kitti/eval_odometry.php&#34;&gt;KITTI dataset&lt;/a&gt; as stereo or monocular, in the &lt;a href=&#34;http://vision.in.tum.de/data/datasets/rgbd-dataset&#34;&gt;TUM dataset&lt;/a&gt; as RGB-D or monocular, and in the &lt;a href=&#34;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&#34;&gt;EuRoC dataset&lt;/a&gt; as stereo or monocular. We also provide a ROS node to process live monocular, stereo or RGB-D streams. &lt;strong&gt;The library can be compiled without ROS&lt;/strong&gt;. ORB-SLAM2 provides a GUI to change between a &lt;em&gt;SLAM Mode&lt;/em&gt; and &lt;em&gt;Localization Mode&lt;/em&gt;, see section 9 of this document.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/embed/ufvPS5wJAx0&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/ufvPS5wJAx0/0.jpg&#34; alt=&#34;ORB-SLAM2&#34; width=&#34;240&#34; height=&#34;180&#34; border=&#34;10&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/embed/T-9PYCKhDLM&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/T-9PYCKhDLM/0.jpg&#34; alt=&#34;ORB-SLAM2&#34; width=&#34;240&#34; height=&#34;180&#34; border=&#34;10&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/embed/kPwy8yA4CKM&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/kPwy8yA4CKM/0.jpg&#34; alt=&#34;ORB-SLAM2&#34; width=&#34;240&#34; height=&#34;180&#34; border=&#34;10&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Related Publications:&lt;/h3&gt; &#xA;&lt;p&gt;[Monocular] Raúl Mur-Artal, J. M. M. Montiel and Juan D. Tardós. &lt;strong&gt;ORB-SLAM: A Versatile and Accurate Monocular SLAM System&lt;/strong&gt;. &lt;em&gt;IEEE Transactions on Robotics,&lt;/em&gt; vol. 31, no. 5, pp. 1147-1163, 2015. (&lt;strong&gt;2015 IEEE Transactions on Robotics Best Paper Award&lt;/strong&gt;). &lt;strong&gt;&lt;a href=&#34;http://webdiis.unizar.es/~raulmur/MurMontielTardosTRO15.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[Stereo and RGB-D] Raúl Mur-Artal and Juan D. Tardós. &lt;strong&gt;ORB-SLAM2: an Open-Source SLAM System for Monocular, Stereo and RGB-D Cameras&lt;/strong&gt;. &lt;em&gt;IEEE Transactions on Robotics,&lt;/em&gt; vol. 33, no. 5, pp. 1255-1262, 2017. &lt;strong&gt;&lt;a href=&#34;https://128.84.21.199/pdf/1610.06475.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[DBoW2 Place Recognizer] Dorian Gálvez-López and Juan D. Tardós. &lt;strong&gt;Bags of Binary Words for Fast Place Recognition in Image Sequences&lt;/strong&gt;. &lt;em&gt;IEEE Transactions on Robotics,&lt;/em&gt; vol. 28, no. 5, pp. 1188-1197, 2012. &lt;strong&gt;&lt;a href=&#34;http://doriangalvez.com/php/dl.php?dlp=GalvezTRO12.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;1. License&lt;/h1&gt; &#xA;&lt;p&gt;ORB-SLAM2 is released under a &lt;a href=&#34;https://github.com/raulmur/ORB_SLAM2/raw/master/License-gpl.txt&#34;&gt;GPLv3 license&lt;/a&gt;. For a list of all code/library dependencies (and associated licenses), please see &lt;a href=&#34;https://github.com/raulmur/ORB_SLAM2/raw/master/Dependencies.md&#34;&gt;Dependencies.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a closed-source version of ORB-SLAM2 for commercial purposes, please contact the authors: orbslam (at) unizar (dot) es.&lt;/p&gt; &#xA;&lt;p&gt;If you use ORB-SLAM2 (Monocular) in an academic work, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{murTRO2015,&#xA;  title={{ORB-SLAM}: a Versatile and Accurate Monocular {SLAM} System},&#xA;  author={Mur-Artal, Ra\&#39;ul, Montiel, J. M. M. and Tard\&#39;os, Juan D.},&#xA;  journal={IEEE Transactions on Robotics},&#xA;  volume={31},&#xA;  number={5},&#xA;  pages={1147--1163},&#xA;  doi = {10.1109/TRO.2015.2463671},&#xA;  year={2015}&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you use ORB-SLAM2 (Stereo or RGB-D) in an academic work, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{murORB2,&#xA;  title={{ORB-SLAM2}: an Open-Source {SLAM} System for Monocular, Stereo and {RGB-D} Cameras},&#xA;  author={Mur-Artal, Ra\&#39;ul and Tard\&#39;os, Juan D.},&#xA;  journal={IEEE Transactions on Robotics},&#xA;  volume={33},&#xA;  number={5},&#xA;  pages={1255--1262},&#xA;  doi = {10.1109/TRO.2017.2705103},&#xA;  year={2017}&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;2. Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;We have tested the library in &lt;strong&gt;Ubuntu 12.04&lt;/strong&gt;, &lt;strong&gt;14.04&lt;/strong&gt; and &lt;strong&gt;16.04&lt;/strong&gt;, but it should be easy to compile in other platforms. A powerful computer (e.g. i7) will ensure real-time performance and provide more stable and accurate results.&lt;/p&gt; &#xA;&lt;h2&gt;C++11 or C++0x Compiler&lt;/h2&gt; &#xA;&lt;p&gt;We use the new thread and chrono functionalities of C++11.&lt;/p&gt; &#xA;&lt;h2&gt;Pangolin&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/stevenlovegrove/Pangolin&#34;&gt;Pangolin&lt;/a&gt; for visualization and user interface. Dowload and install instructions can be found at: &lt;a href=&#34;https://github.com/stevenlovegrove/Pangolin&#34;&gt;https://github.com/stevenlovegrove/Pangolin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;OpenCV&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;http://opencv.org&#34;&gt;OpenCV&lt;/a&gt; to manipulate images and features. Dowload and install instructions can be found at: &lt;a href=&#34;http://opencv.org&#34;&gt;http://opencv.org&lt;/a&gt;. &lt;strong&gt;Required at leat 2.4.3. Tested with OpenCV 2.4.11 and OpenCV 3.2&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Eigen3&lt;/h2&gt; &#xA;&lt;p&gt;Required by g2o (see below). Download and install instructions can be found at: &lt;a href=&#34;http://eigen.tuxfamily.org&#34;&gt;http://eigen.tuxfamily.org&lt;/a&gt;. &lt;strong&gt;Required at least 3.1.0&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;DBoW2 and g2o (Included in Thirdparty folder)&lt;/h2&gt; &#xA;&lt;p&gt;We use modified versions of the &lt;a href=&#34;https://github.com/dorian3d/DBoW2&#34;&gt;DBoW2&lt;/a&gt; library to perform place recognition and &lt;a href=&#34;https://github.com/RainerKuemmerle/g2o&#34;&gt;g2o&lt;/a&gt; library to perform non-linear optimizations. Both modified libraries (which are BSD) are included in the &lt;em&gt;Thirdparty&lt;/em&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;ROS (optional)&lt;/h2&gt; &#xA;&lt;p&gt;We provide some examples to process the live input of a monocular, stereo or RGB-D camera using &lt;a href=&#34;https://raw.githubusercontent.com/raulmur/ORB_SLAM2/master/ros.org&#34;&gt;ROS&lt;/a&gt;. Building these examples is optional. In case you want to use ROS, a version Hydro or newer is needed.&lt;/p&gt; &#xA;&lt;h1&gt;3. Building ORB-SLAM2 library and examples&lt;/h1&gt; &#xA;&lt;p&gt;Clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/raulmur/ORB_SLAM2.git ORB_SLAM2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We provide a script &lt;code&gt;build.sh&lt;/code&gt; to build the &lt;em&gt;Thirdparty&lt;/em&gt; libraries and &lt;em&gt;ORB-SLAM2&lt;/em&gt;. Please make sure you have installed all required dependencies (see section 2). Execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ORB_SLAM2&#xA;chmod +x build.sh&#xA;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create &lt;strong&gt;libORB_SLAM2.so&lt;/strong&gt; at &lt;em&gt;lib&lt;/em&gt; folder and the executables &lt;strong&gt;mono_tum&lt;/strong&gt;, &lt;strong&gt;mono_kitti&lt;/strong&gt;, &lt;strong&gt;rgbd_tum&lt;/strong&gt;, &lt;strong&gt;stereo_kitti&lt;/strong&gt;, &lt;strong&gt;mono_euroc&lt;/strong&gt; and &lt;strong&gt;stereo_euroc&lt;/strong&gt; in &lt;em&gt;Examples&lt;/em&gt; folder.&lt;/p&gt; &#xA;&lt;h1&gt;4. Monocular Examples&lt;/h1&gt; &#xA;&lt;h2&gt;TUM Dataset&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download a sequence from &lt;a href=&#34;http://vision.in.tum.de/data/datasets/rgbd-dataset/download&#34;&gt;http://vision.in.tum.de/data/datasets/rgbd-dataset/download&lt;/a&gt; and uncompress it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the following command. Change &lt;code&gt;TUMX.yaml&lt;/code&gt; to TUM1.yaml,TUM2.yaml or TUM3.yaml for freiburg1, freiburg2 and freiburg3 sequences respectively. Change &lt;code&gt;PATH_TO_SEQUENCE_FOLDER&lt;/code&gt;to the uncompressed sequence folder.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/Monocular/mono_tum Vocabulary/ORBvoc.txt Examples/Monocular/TUMX.yaml PATH_TO_SEQUENCE_FOLDER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;KITTI Dataset&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the dataset (grayscale images) from &lt;a href=&#34;http://www.cvlibs.net/datasets/kitti/eval_odometry.php&#34;&gt;http://www.cvlibs.net/datasets/kitti/eval_odometry.php&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the following command. Change &lt;code&gt;KITTIX.yaml&lt;/code&gt;by KITTI00-02.yaml, KITTI03.yaml or KITTI04-12.yaml for sequence 0 to 2, 3, and 4 to 12 respectively. Change &lt;code&gt;PATH_TO_DATASET_FOLDER&lt;/code&gt; to the uncompressed dataset folder. Change &lt;code&gt;SEQUENCE_NUMBER&lt;/code&gt; to 00, 01, 02,.., 11.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/Monocular/mono_kitti Vocabulary/ORBvoc.txt Examples/Monocular/KITTIX.yaml PATH_TO_DATASET_FOLDER/dataset/sequences/SEQUENCE_NUMBER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;EuRoC Dataset&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download a sequence (ASL format) from &lt;a href=&#34;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&#34;&gt;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the following first command for V1 and V2 sequences, or the second command for MH sequences. Change PATH_TO_SEQUENCE_FOLDER and SEQUENCE according to the sequence you want to run.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/Monocular/mono_euroc Vocabulary/ORBvoc.txt Examples/Monocular/EuRoC.yaml PATH_TO_SEQUENCE_FOLDER/mav0/cam0/data Examples/Monocular/EuRoC_TimeStamps/SEQUENCE.txt &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/Monocular/mono_euroc Vocabulary/ORBvoc.txt Examples/Monocular/EuRoC.yaml PATH_TO_SEQUENCE/cam0/data Examples/Monocular/EuRoC_TimeStamps/SEQUENCE.txt &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;5. Stereo Examples&lt;/h1&gt; &#xA;&lt;h2&gt;KITTI Dataset&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the dataset (grayscale images) from &lt;a href=&#34;http://www.cvlibs.net/datasets/kitti/eval_odometry.php&#34;&gt;http://www.cvlibs.net/datasets/kitti/eval_odometry.php&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the following command. Change &lt;code&gt;KITTIX.yaml&lt;/code&gt;to KITTI00-02.yaml, KITTI03.yaml or KITTI04-12.yaml for sequence 0 to 2, 3, and 4 to 12 respectively. Change &lt;code&gt;PATH_TO_DATASET_FOLDER&lt;/code&gt; to the uncompressed dataset folder. Change &lt;code&gt;SEQUENCE_NUMBER&lt;/code&gt; to 00, 01, 02,.., 11.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/Stereo/stereo_kitti Vocabulary/ORBvoc.txt Examples/Stereo/KITTIX.yaml PATH_TO_DATASET_FOLDER/dataset/sequences/SEQUENCE_NUMBER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;EuRoC Dataset&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download a sequence (ASL format) from &lt;a href=&#34;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&#34;&gt;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the following first command for V1 and V2 sequences, or the second command for MH sequences. Change PATH_TO_SEQUENCE_FOLDER and SEQUENCE according to the sequence you want to run.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/Stereo/stereo_euroc Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml PATH_TO_SEQUENCE/mav0/cam0/data PATH_TO_SEQUENCE/mav0/cam1/data Examples/Stereo/EuRoC_TimeStamps/SEQUENCE.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/Stereo/stereo_euroc Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml PATH_TO_SEQUENCE/cam0/data PATH_TO_SEQUENCE/cam1/data Examples/Stereo/EuRoC_TimeStamps/SEQUENCE.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;6. RGB-D Example&lt;/h1&gt; &#xA;&lt;h2&gt;TUM Dataset&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download a sequence from &lt;a href=&#34;http://vision.in.tum.de/data/datasets/rgbd-dataset/download&#34;&gt;http://vision.in.tum.de/data/datasets/rgbd-dataset/download&lt;/a&gt; and uncompress it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Associate RGB images and depth images using the python script &lt;a href=&#34;http://vision.in.tum.de/data/datasets/rgbd-dataset/tools&#34;&gt;associate.py&lt;/a&gt;. We already provide associations for some of the sequences in &lt;em&gt;Examples/RGB-D/associations/&lt;/em&gt;. You can generate your own associations file executing:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python associate.py PATH_TO_SEQUENCE/rgb.txt PATH_TO_SEQUENCE/depth.txt &amp;gt; associations.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Execute the following command. Change &lt;code&gt;TUMX.yaml&lt;/code&gt; to TUM1.yaml,TUM2.yaml or TUM3.yaml for freiburg1, freiburg2 and freiburg3 sequences respectively. Change &lt;code&gt;PATH_TO_SEQUENCE_FOLDER&lt;/code&gt;to the uncompressed sequence folder. Change &lt;code&gt;ASSOCIATIONS_FILE&lt;/code&gt; to the path to the corresponding associations file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/RGB-D/rgbd_tum Vocabulary/ORBvoc.txt Examples/RGB-D/TUMX.yaml PATH_TO_SEQUENCE_FOLDER ASSOCIATIONS_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;7. ROS Examples&lt;/h1&gt; &#xA;&lt;h3&gt;Building the nodes for mono, monoAR, stereo and RGB-D&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the path including &lt;em&gt;Examples/ROS/ORB_SLAM2&lt;/em&gt; to the ROS_PACKAGE_PATH environment variable. Open .bashrc file and add at the end the following line. Replace PATH by the folder where you cloned ORB_SLAM2:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;export ROS_PACKAGE_PATH=${ROS_PACKAGE_PATH}:PATH/ORB_SLAM2/Examples/ROS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;build_ros.sh&lt;/code&gt; script:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod +x build_ros.sh&#xA;./build_ros.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Monocular Node&lt;/h3&gt; &#xA;&lt;p&gt;For a monocular input from topic &lt;code&gt;/camera/image_raw&lt;/code&gt; run node ORB_SLAM2/Mono. You will need to provide the vocabulary file and a settings file. See the monocular examples above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rosrun ORB_SLAM2 Mono PATH_TO_VOCABULARY PATH_TO_SETTINGS_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Monocular Augmented Reality Demo&lt;/h3&gt; &#xA;&lt;p&gt;This is a demo of augmented reality where you can use an interface to insert virtual cubes in planar regions of the scene. The node reads images from topic &lt;code&gt;/camera/image_raw&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rosrun ORB_SLAM2 MonoAR PATH_TO_VOCABULARY PATH_TO_SETTINGS_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Stereo Node&lt;/h3&gt; &#xA;&lt;p&gt;For a stereo input from topic &lt;code&gt;/camera/left/image_raw&lt;/code&gt; and &lt;code&gt;/camera/right/image_raw&lt;/code&gt; run node ORB_SLAM2/Stereo. You will need to provide the vocabulary file and a settings file. If you &lt;strong&gt;provide rectification matrices&lt;/strong&gt; (see Examples/Stereo/EuRoC.yaml example), the node will recitify the images online, &lt;strong&gt;otherwise images must be pre-rectified&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rosrun ORB_SLAM2 Stereo PATH_TO_VOCABULARY PATH_TO_SETTINGS_FILE ONLINE_RECTIFICATION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: Download a rosbag (e.g. V1_01_easy.bag) from the EuRoC dataset (&lt;a href=&#34;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&#34;&gt;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&lt;/a&gt;). Open 3 tabs on the terminal and run the following command at each tab:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;roscore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;rosrun ORB_SLAM2 Stereo Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;rosbag play --pause V1_01_easy.bag /cam0/image_raw:=/camera/left/image_raw /cam1/image_raw:=/camera/right/image_raw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once ORB-SLAM2 has loaded the vocabulary, press space in the rosbag tab. Enjoy!. Note: a powerful computer is required to run the most exigent sequences of this dataset.&lt;/p&gt; &#xA;&lt;h3&gt;Running RGB_D Node&lt;/h3&gt; &#xA;&lt;p&gt;For an RGB-D input from topics &lt;code&gt;/camera/rgb/image_raw&lt;/code&gt; and &lt;code&gt;/camera/depth_registered/image_raw&lt;/code&gt;, run node ORB_SLAM2/RGBD. You will need to provide the vocabulary file and a settings file. See the RGB-D example above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rosrun ORB_SLAM2 RGBD PATH_TO_VOCABULARY PATH_TO_SETTINGS_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;8. Processing your own sequences&lt;/h1&gt; &#xA;&lt;p&gt;You will need to create a settings file with the calibration of your camera. See the settings file provided for the TUM and KITTI datasets for monocular, stereo and RGB-D cameras. We use the calibration model of OpenCV. See the examples to learn how to create a program that makes use of the ORB-SLAM2 library and how to pass images to the SLAM system. Stereo input must be synchronized and rectified. RGB-D input must be synchronized and depth registered.&lt;/p&gt; &#xA;&lt;h1&gt;9. SLAM and Localization Modes&lt;/h1&gt; &#xA;&lt;p&gt;You can change between the &lt;em&gt;SLAM&lt;/em&gt; and &lt;em&gt;Localization mode&lt;/em&gt; using the GUI of the map viewer.&lt;/p&gt; &#xA;&lt;h3&gt;SLAM Mode&lt;/h3&gt; &#xA;&lt;p&gt;This is the default mode. The system runs in parallal three threads: Tracking, Local Mapping and Loop Closing. The system localizes the camera, builds new map and tries to close loops.&lt;/p&gt; &#xA;&lt;h3&gt;Localization Mode&lt;/h3&gt; &#xA;&lt;p&gt;This mode can be used when you have a good map of your working area. In this mode the Local Mapping and Loop Closing are deactivated. The system localizes the camera in the map (which is no longer updated), using relocalization if needed.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>encrypted-def/basic-algo-lecture</title>
    <updated>2023-03-26T01:49:58Z</updated>
    <id>tag:github.com,2023-03-26:/encrypted-def/basic-algo-lecture</id>
    <link href="https://github.com/encrypted-def/basic-algo-lecture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;바킹독의 실전 알고리즘 강의 자료&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;중요한 공지&lt;/h3&gt; &#xA;&lt;p&gt;📡문제집 풀이 집단 지성 프로젝트📡를 진행중입니다. &lt;a href=&#34;https://raw.githubusercontent.com/encrypted-def/basic-algo-lecture/master/docs/solution-request.md&#34;&gt;링크&lt;/a&gt;를 참고해주세요.&lt;/p&gt; &#xA;&lt;p&gt;질문을 하기 전 &lt;a href=&#34;https://raw.githubusercontent.com/encrypted-def/basic-algo-lecture/master/docs/how-to-ask.md&#34;&gt;이 글&lt;/a&gt;을 꼭 참고해주세요.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;🐕 바킹독의 실전 알고리즘 🐕&lt;/h1&gt; &#xA;&lt;h2&gt;설명&lt;/h2&gt; &#xA;&lt;p&gt;이 강좌는 &lt;strong&gt;실전성&lt;/strong&gt;에 가장 큰 의미를 둔 C++ 언어 기반 실전 알고리즘 강좌입니다. 청자가 C/C++ 문법은 알고 있지만 자료구조와 알고리즘에 대한 선수 지식이 없다는 가정하에 커리큘럼을 구성했습니다.&lt;/p&gt; &#xA;&lt;p&gt;주 타겟은 코딩테스트를 대비하는 대학생/취업준비생이지만 정보올림피아드/USACO/코드잼 등의 알고리즘 대회를 준비하고자 하는 분들도 이 강좌를 통해 대회에 필요한 기본기를 익힐 수 있습니다.&lt;/p&gt; &#xA;&lt;p&gt;강좌는 주제에 대한 이론을 익히고 &lt;a href=&#34;https://www.acmicpc.net/&#34;&gt;백준 온라인 저지&lt;/a&gt;에 있는 관련 문제를 풀이하는 방식으로 진행됩니다.&lt;/p&gt; &#xA;&lt;p&gt;개인차는 있겠지만 1주일에 40시간 이상 투자할 수 있다고 할 때 완강까지 2-4개월 정도 걸립니다. 완강을 한다면 앞으로 코딩테스트에서 애를 먹을 일은 절대 없을 것이고 일정상 완강을 할 수 없는 상황이라면 &lt;code&gt;0x11강 - 그리디&lt;/code&gt;까지만 익히고 코딩테스트에 임해도 충분히 승산이 있습니다.&lt;/p&gt; &#xA;&lt;h2&gt;강의의 장점&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;강의자가 알고리즘을 많이 잘하고 경험이 풍부합니다🤣(OJ 2000+ solve, 코드포스 레이팅 2400+, KOI/ICPC/SCPC/카카오 코드 페스티벌 수상 등). 수년간 강의자가 몸으로 부딪치며 쌓아온 경험을 바탕으로 고수의 시각에서 문제에 접근, 이해하고 실전적인 코드를 작성하는 요령을 강의에 잘 녹여냈습니다.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2018년 12월 처음 강의를 시작한 때로부터 지금까지 4년이 넘는 시간동안 블로그와 유튜브를 통해 모두에게 공개되어 피드백을 계속 받아왔기 때문에 강의 내용과 코드의 오류가 적고, 리뉴얼을 통해 보다 더 자세하고 초보자에게 친절한 강의가 되게끔 내용을 작성했습니다.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;백준 온라인 저지를 통해 연습 문제를 제공합니다. 그리고 강의에서 같이 다룬 80여개의 문제 이외에도 주제별로 문제 목록을 기본 문제/응용 문제로 분류해서 제공하고 풀이를 모아두었기 때문에 강의를 듣고난 후 문제를 풀며 학습을 할 수 있습니다.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;C언어는 알고 있는데 C++을 몰라요. C++을 먼저 배우고 올까요?&lt;/h3&gt; &#xA;&lt;p&gt;강의에서는 사실상 C++의 STL만 가져와서 사용할 뿐 상속, 스마트 포인터 등과 같은 C++ 고급 문법/개념은 등장하지도 않고 알고 있을 필요도 없습니다. 또 다소 생소할 수 있는 C++ 문법들에 대해서는 설명을 해두었기 때문에 설령 C++을 이전에 다뤄본 적이 없다고 해도 C언어만 잘 알고 있다면 강의를 따라오는데 큰 문제가 없습니다.&lt;/p&gt; &#xA;&lt;h3&gt;C/C++ 대신 자바/파이썬만 아는데 강의를 들어도 괜찮을까요?&lt;/h3&gt; &#xA;&lt;p&gt;코딩테스트 언어 선택에 대한 제 생각은 &lt;a href=&#34;https://blog.encrypted.gg/965&#34;&gt;이 글&lt;/a&gt;을 참고해주세요. 강의에서 효율적인 구현은 이론 못지않게 큰 부분을 담당하고 있습니다. 추후에 자바/파이썬 버전을 제작할 생각이 아주 약간 있긴 하지만 기약이 없고 현재로서는 모든 구현이 C++으로 제공되기 때문에 시간이 여유롭다면 주 언어를 C++로 변경하는 것을 추천드립니다.&lt;/p&gt; &#xA;&lt;p&gt;꼭 자바/파이썬으로 코딩테스트를 치려고 한다면 당장은 달리 방법이 없습니다. 그래도 C/C++에 특화된 구현을 제외한 나머지 내용은 언어와 크게 상관이 없으니 일단 강의를 한 번 보고, 도저히 안되겠다 싶으면 제 강의 대신 코딩테스트를 치고자 하는 언어에 특화된 강의를 찾아서 보시면 됩니다.&lt;/p&gt; &#xA;&lt;h3&gt;자료구조는 별도로 학습해야 하나요?&lt;/h3&gt; &#xA;&lt;p&gt;강의에는 자료구조에 대한 내용이 같이 포함되어 있습니다.&lt;/p&gt; &#xA;&lt;h3&gt;슬라이드나 기타 강의 자료를 개인 블로그에 복습용으로 올려도 되나요?&lt;/h3&gt; &#xA;&lt;p&gt;비상업적 &amp;amp; 출처 표시 조건 하에 가능합니다.&lt;/p&gt; &#xA;&lt;h3&gt;강의를 꼭 순서대로 들어야 하나요?&lt;/h3&gt; &#xA;&lt;p&gt;강의의 배치는 난이도순입니다. 또한 마치 선수과목과 같이 앞쪽 강의를 들어야 뒷쪽 강의를 이해할 수 있는 경우가 있어서(ex : 스택 -&amp;gt; 스택의 활용, 재귀 -&amp;gt; 백트래킹, 재귀 -&amp;gt; 정렬 I 등등) 가능하면 순서대로 듣는 것을 추천드립니다.&lt;/p&gt; &#xA;&lt;p&gt;부득이하게 뒷쪽 강의를 먼저 들어야 하는 상황이라면, 듣다보면 앞쪽에서 필요한 개념이 무엇인지 감이 올텐데 그걸 참고해서 필요한 앞쪽 강의만 찾아서 들으시면 됩니다.&lt;/p&gt; &#xA;&lt;h3&gt;질문은 어디에 하면 되나요?&lt;/h3&gt; &#xA;&lt;p&gt;다른 사람도 질문을 참고할 수 있게 해당 강의 블로그 글 or 동영상에 댓글로 달아주세요. 개인적인 질문은 admin [at] encrypted.gg 메일로 보내주시면 됩니다. 질문을 하기 전 &lt;a href=&#34;https://raw.githubusercontent.com/encrypted-def/basic-algo-lecture/master/docs/how-to-ask.md&#34;&gt;이 글&lt;/a&gt;을 꼭 참고해주세요.&lt;/p&gt; &#xA;&lt;h2&gt;리뉴얼 예상 목차&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;0x00강 - 오리엔테이션&#xA;0x01강 - 기초 코드 작성 요령 I&#xA;0x02강 - 기초 코드 작성 요령 II&#xA;0x03강 - 배열&#xA;0x04강 - 연결 리스트&#xA;0x05강 - 스택&#xA;0x06강 - 큐&#xA;0x07강 - 덱&#xA;0x08강 - 스택의 활용(수식의 괄호 쌍)&#xA;0x09강 - BFS&#xA;0x0A강 - DFS&#xA;0x0B강 - 재귀&#xA;0x0C강 - 백트래킹&#xA;0x0D강 - 시뮬레이션&#xA;0x0E강 - 정렬 I&#xA;0x0F강 - 정렬 II&#xA;0x10강 - 다이나믹 프로그래밍&#xA;0x11강 - 그리디&#xA;0x12강 - 수학&#xA;0x13강 - 이분탐색&#xA;0x14강 - 투 포인터&#xA;0x15강 - 해시&#xA;0x16강 - 이진 검색 트리&#xA;0x17강 - 우선순위 큐&#xA;0x18강 - 그래프&#xA;0x19강 - 트리&#xA;0x1A강 - 위상정렬&#xA;0x1B강 - 최소 신장 트리&#xA;0x1C강 - 플로이드 알고리즘&#xA;0x1D강 - 다익스트라 알고리즘&#xA;0x1E강 - KMP 알고리즘 &#xA;0x1F강 - 트라이&#xA;부록 A - 문자열 기초&#xA;부록 B - 동적 배열&#xA;부록 C - 비트마스킹&#xA;부록 D - Union Find&#xA;부록 E - 다이나믹 프로그래밍 심화&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;External Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.encrypted.gg/category/%EA%B0%95%EC%A2%8C/%EC%8B%A4%EC%A0%84%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&#34;&gt;실전 알고리즘 강좌 블로그&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/c/baaarkingdog&#34;&gt;유튜브&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/encrypted-def/basic-algo-lecture&#34;&gt;깃헙 리포지토리&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/encrypted-def/basic-algo-lecture/master/workbook.md&#34;&gt;문제집 링크&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;메일 주소 : admin [at] encrypted.gg&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Const-me/Whisper</title>
    <updated>2023-03-26T01:49:58Z</updated>
    <id>tag:github.com,2023-03-26:/Const-me/Whisper</id>
    <link href="https://github.com/Const-me/Whisper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High-performance GPGPU inference of OpenAI&#39;s Whisper automatic speech recognition (ASR) model&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This project is a Windows port of the &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp&#34;&gt;whisper.cpp&lt;/a&gt; implementation.&lt;br&gt; Which in turn is a C++ port of &lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;OpenAI&#39;s Whisper&lt;/a&gt; automatic speech recognition (ASR) model.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Start Guide&lt;/h1&gt; &#xA;&lt;p&gt;Download WhisperDesktop.zip from the “Releases” section of this repository, unpack the ZIP, and run WhisperDesktop.exe.&lt;/p&gt; &#xA;&lt;p&gt;On the first screen it will ask you to download a model.&lt;br&gt; I recommend &lt;code&gt;ggml-medium.bin&lt;/code&gt; (1.42GB in size), because I’ve mostly tested the software with that model.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Const-me/Whisper/master/gui-load-model.png&#34; alt=&#34;Load Model Screen&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The next screen allows to transcribe an audio file.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Const-me/Whisper/master/gui-transcribe.png&#34; alt=&#34;Transcribe Screen&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There’s another screen which allows to capture and transcribe or translate live audio from a microphone.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Const-me/Whisper/master/gui-capture.png&#34; alt=&#34;Capture Screen&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Vendor-agnostic GPGPU based on DirectCompute; another name for that technology is “compute shaders in Direct3D 11”&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plain C++ implementation, no runtime dependencies except essential OS components&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Much faster than OpenAI’s implementation.&lt;br&gt; On my desktop computer with GeForce &lt;a href=&#34;https://en.wikipedia.org/wiki/GeForce_10_series#GeForce_10_(10xx)_series_for_desktops&#34;&gt;1080Ti&lt;/a&gt; GPU, medium model, &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/1/1f/George_W_Bush_Columbia_FINAL.ogg&#34;&gt;3:24 min speech&lt;/a&gt; took 45 seconds to transcribe with PyTorch and CUDA, but only 19 seconds with my implementation and DirectCompute.&lt;br&gt; Funfact: that’s 9.63 gigabytes runtime dependencies, versus 431 kilobytes &lt;code&gt;Whisper.dll&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mixed F16 / F32 precision: Windows &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/direct3ddxgi/format-support-for-direct3d-feature-level-10-0-hardware#dxgi_format_r16_floatfcs-54&#34;&gt;requires support&lt;/a&gt; of &lt;code&gt;R16_FLOAT&lt;/code&gt; buffers since D3D version 10.0&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Built-in performance profiler which measures execution time of individual compute shaders&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Low memory usage&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Media Foundation for audio handling, supports most audio and video formats (with the notable exception of Ogg Vorbis), and most audio capture devices which work on Windows (except some professional ones, which only implementing &lt;a href=&#34;https://en.wikipedia.org/wiki/Audio_Stream_Input/Output&#34;&gt;ASIO&lt;/a&gt; API).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Voice activity detection for audio capture.&lt;br&gt; The implementation is based on the &lt;a href=&#34;https://www.researchgate.net/publication/255667085_A_simple_but_efficient_real-time_voice_activity_detection_algorithm&#34;&gt;2009 article&lt;/a&gt; “A simple but efficient real-time voice activity detection algorithm” by Mohammad Moattar and Mahdi Homayoonpoor.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easy to use COM-style API. Idiomatic C# wrapper &lt;a href=&#34;https://www.nuget.org/packages/WhisperNet/&#34;&gt;available on nuget&lt;/a&gt;.&lt;br&gt; Version 1.10 &lt;a href=&#34;https://github.com/Const-me/Whisper/tree/master/WhisperPS&#34;&gt;introduced&lt;/a&gt; scripting support for PowerShell 5.1, that’s the older “Windows PowerShell” version which comes pre-installed on Windows.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pre-built binaries available&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The only supported platform is 64-bit Windows.&lt;br&gt; Should work on Windows 8.1 or newer, but I have only tested on Windows 10.&lt;br&gt; The library requires a Direct3D 11.0 capable GPU, which in 2023 simply means “any hardware GPU”. The most recent GPU without D3D 11.0 support was Intel &lt;a href=&#34;https://en.wikipedia.org/wiki/Sandy_Bridge&#34;&gt;Sandy Bridge&lt;/a&gt; from 2011.&lt;/p&gt; &#xA;&lt;p&gt;On the CPU side, the library requires &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&#34;&gt;AVX1&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/F16C&#34;&gt;F16C&lt;/a&gt; support.&lt;/p&gt; &#xA;&lt;h1&gt;Developer Guide&lt;/h1&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open &lt;code&gt;WhisperCpp.sln&lt;/code&gt; in Visual Studio 2022. I’m using the freeware community edition, version 17.4.4.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Switch to &lt;code&gt;Release&lt;/code&gt; configuration&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build and run &lt;code&gt;CompressShaders&lt;/code&gt; C# project, in the &lt;code&gt;Tools&lt;/code&gt; subfolder of the solution. To run that project, right click in visual studio, “Set as startup project”, then in the main menu of VS “Debug / Start Without Debugging”. When completed successfully, you should see a console window with a line like that:&lt;br&gt; &lt;code&gt;Compressed 46 compute shaders, 123.5 kb -&amp;gt; 18.0 kb&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build &lt;code&gt;Whisper&lt;/code&gt; project to get the native DLL, or &lt;code&gt;WhisperNet&lt;/code&gt; for the C# wrapper and nuget package, or the examples.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Other Notes&lt;/h2&gt; &#xA;&lt;p&gt;If you gonna consume the library in a software built with Visual C++ 2022 or newer, you probably redistribute Visual C++ runtime DLLs in the form of the &lt;code&gt;.msm&lt;/code&gt; merge module, or &lt;a href=&#34;https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170&#34;&gt;vc_redist.x64.exe&lt;/a&gt; binary.&lt;br&gt; If you do that, right click on the &lt;code&gt;Whisper&lt;/code&gt; project, Properties, C/C++, Code Generation, switch “Runtime Library” setting from &lt;code&gt;Multi-threaded (/MT)&lt;/code&gt; to &lt;code&gt;Multi-threaded DLL (/MD)&lt;/code&gt;, and rebuild: the binary will become smaller.&lt;/p&gt; &#xA;&lt;p&gt;The library includes &lt;a href=&#34;https://renderdoc.org/&#34;&gt;RenderDoc&lt;/a&gt; GPU debugger integration.&lt;br&gt; When launched your program from RenderDoc, hold F12 key to capture the compute calls.&lt;br&gt; If you gonna debug HLSL shaders, use the debug build of the DLL, it includes debug build of the shaders and you’ll get better UX in the debugger.&lt;/p&gt; &#xA;&lt;p&gt;The repository includes a lot of code which was only used for development: couple alternative model implementations, compatible FP64 versions of some compute shaders, debug tracing and the tool to compare the traces, etc.&lt;br&gt; That stuff is disabled by preprocessor macros or &lt;code&gt;constexpr&lt;/code&gt; flags, I hope it’s fine to keep here.&lt;/p&gt; &#xA;&lt;h2&gt;Performance Notes&lt;/h2&gt; &#xA;&lt;p&gt;I have a limited selection of GPUs in this house.&lt;br&gt; Specifically, I have optimized for nVidia 1080Ti, Radeon Vega 8 inside Ryzen 7 5700G, and Radeon Vega 7 inside Ryzen 5 5600U.&lt;br&gt; &lt;a href=&#34;https://github.com/Const-me/Whisper/raw/master/SampleClips/summary.tsv&#34;&gt;Here’s the summary&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The nVidia delivers relative speed 5.8 for the large model, 10.6 for the medium model.&lt;br&gt; The AMD Ryzen 5 5600U APU delivers relative speed about 2.2 for the medium model. Not great, but still, much faster than realtime.&lt;/p&gt; &#xA;&lt;p&gt;I have also tested on &lt;a href=&#34;https://en.wikipedia.org/wiki/GeForce_16_series#Desktop&#34;&gt;nVidia 1650&lt;/a&gt;: slower than 1080Ti but pretty good, much faster than realtime.&lt;br&gt; I have also tested on Intel HD Graphics 4000 inside Core i7-3612QM, the relative speed was 0.14 for medium model, 0.44 for small model. That’s much slower than realtime, but I was happy to find my software works even on the integrated mobile GPU &lt;a href=&#34;https://ark.intel.com/products/64901&#34;&gt;launched&lt;/a&gt; in 2012.&lt;/p&gt; &#xA;&lt;p&gt;I’m not sure the performance is ideal on discrete AMD GPUs, or integrated Intel GPUs, have not specifically optimized for them.&lt;br&gt; Ideally, they might need slightly different builds of a couple of the most expensive compute shaders, &lt;code&gt;mulMatTiled.hlsl&lt;/code&gt; and &lt;code&gt;mulMatByRowTiled.hlsl&lt;/code&gt;&lt;br&gt; And maybe other adjustments, like the &lt;code&gt;useReshapedMatMul()&lt;/code&gt; value in &lt;code&gt;Whisper/D3D/device.h&lt;/code&gt; header file.&lt;/p&gt; &#xA;&lt;p&gt;I don’t know how to measure that, but I have a feeling the bottleneck is memory, not compute.&lt;br&gt; Someone on Hacker News &lt;a href=&#34;https://news.ycombinator.com/item?id=34408429&#34;&gt;has tested&lt;/a&gt; on &lt;a href=&#34;https://en.wikipedia.org/wiki/GeForce_30_series#Desktop&#34;&gt;3060Ti&lt;/a&gt;, the version with GDDR6 memory. Compared to 1080Ti, that GPU has 1.3x FP32 FLOPS, but 0.92x VRAM bandwidth. The app was about 10% slower on the 3060Ti.&lt;/p&gt; &#xA;&lt;h2&gt;Further Optimisations&lt;/h2&gt; &#xA;&lt;p&gt;I have only spent a few days optimizing performance of these shaders.&lt;br&gt; It might be possible to do much better, here’s a few ideas.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Newer GPUs like Radeon Vega or nVidia 1650 have higher FP16 performance compared to FP32, yet my compute shaders are only using FP32 data type.&lt;br&gt; &lt;a href=&#34;https://therealmjp.github.io/posts/shader-fp16/&#34;&gt;Half The Precision, Twice The Fun&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the current version, FP16 tensors are using shader resource views to upcast loaded values, and unordered access views to downcast stored ones.&lt;br&gt; Might be a good idea to switch to &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/direct3d11/direct3d-11-advanced-stages-cs-resources#byte-address-buffer&#34;&gt;byte address buffers&lt;/a&gt;, load/store complete 4-bytes values, and upcast / downcast in HLSL with &lt;code&gt;f16tof32&lt;/code&gt; / &lt;code&gt;f32tof16&lt;/code&gt; intrinsics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the current version all shaders are compiled offline, and &lt;code&gt;Whisper.dll&lt;/code&gt; includes DXBC byte codes.&lt;br&gt; The HLSL compiler &lt;code&gt;D3DCompiler_47.dll&lt;/code&gt; is an OS component, and is pretty fast. For the expensive compute shaders, it’s probably a good idea to ship HLSL instead of DXBC, and &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/api/d3dcompiler/nf-d3dcompiler-d3dcompile&#34;&gt;compile&lt;/a&gt; on startup with environment-specific &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/api/d3dcommon/ns-d3dcommon-d3d_shader_macro&#34;&gt;values&lt;/a&gt; for the macros.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It might be a good idea to upgrade the whole thing from D3D11 to D3D12.&lt;br&gt; The newer API is harder to use, but includes potentially useful features not exposed to D3D11: &lt;a href=&#34;https://github.com/Microsoft/DirectXShaderCompiler/wiki/Wave-Intrinsics&#34;&gt;wave intrinsics&lt;/a&gt;, and &lt;a href=&#34;https://github.com/microsoft/DirectXShaderCompiler/wiki/16-Bit-Scalar-Types&#34;&gt;explicit FP16&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Missing Features&lt;/h2&gt; &#xA;&lt;p&gt;Automatic language detection is not implemented.&lt;/p&gt; &#xA;&lt;p&gt;In the current version there’s high latency for realtime audio capture.&lt;br&gt; Specifically, depending on voice detection the figure is about 5-10 seconds.&lt;br&gt; At least in my tests, the model wasn’t happy when I supplied too short pieces of the audio.&lt;br&gt; I have increased the latency and called it a day, but ideally this needs a better fix for optimal UX.&lt;/p&gt; &#xA;&lt;h1&gt;Final Words&lt;/h1&gt; &#xA;&lt;p&gt;From my perspective, this is an unpaid hobby project, which I completed over the 2022-23 winter holydays.&lt;br&gt; The code probably has bugs.&lt;br&gt; The software is provided “as is”, without warranty of any kind.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/ggerganov&#34;&gt;Georgi Gerganov&lt;/a&gt; for &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp&#34;&gt;whisper.cpp&lt;/a&gt; implementation, and the models in GGML binary format.&lt;br&gt; I don’t program Python, and I don’t know anything about the ML ecosystem.&lt;br&gt; I wouldn’t even start this project without a good C++ reference implementation, to test my version against.&lt;/p&gt; &#xA;&lt;p&gt;That whisper.cpp project has an example which &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp/raw/master/examples/talk/gpt-2.cpp&#34;&gt;uses&lt;/a&gt; the same GGML implementation to run another OpenAI’s model, &lt;a href=&#34;https://en.wikipedia.org/wiki/GPT-2&#34;&gt;GPT-2&lt;/a&gt;.&lt;br&gt; It shouldn’t be hard to support that ML model with the compute shaders and relevant infrastructure already implemented in this project.&lt;/p&gt; &#xA;&lt;p&gt;If you find this useful, I’ll be very grateful if you consider a donation to &lt;a href=&#34;https://savelife.in.ua/en/&#34;&gt;“Come Back Alive” foundation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>