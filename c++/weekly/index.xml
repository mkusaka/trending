<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-09T01:39:16Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rapidsai/cuml</title>
    <updated>2024-06-09T01:39:16Z</updated>
    <id>tag:github.com,2024-06-09:/rapidsai/cuml</id>
    <link href="https://github.com/rapidsai/cuml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;cuML - RAPIDS Machine Learning Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&#xA; &lt;div align=&#34;left&#34;&gt;&#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/rapidsai/cuml/branch-24.08/img/rapids_logo.png&#34; width=&#34;90px&#34;&gt;&amp;nbsp;cuML - GPU Machine Learning Algorithms&#xA; &lt;/div&gt;&lt;/h1&gt; &#xA;&lt;p&gt;cuML is a suite of libraries that implement machine learning algorithms and mathematical primitives functions that share compatible APIs with other &lt;a href=&#34;https://rapids.ai/&#34;&gt;RAPIDS&lt;/a&gt; projects.&lt;/p&gt; &#xA;&lt;p&gt;cuML enables data scientists, researchers, and software engineers to run traditional tabular ML tasks on GPUs without going into the details of CUDA programming. In most cases, cuML&#39;s Python API matches the API from &lt;a href=&#34;https://scikit-learn.org&#34;&gt;scikit-learn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For large datasets, these GPU-based implementations can complete 10-50x faster than their CPU equivalents. For details on performance, see the &lt;a href=&#34;https://github.com/rapidsai/cuml/tree/branch-24.08/notebooks/tools&#34;&gt;cuML Benchmarks Notebook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As an example, the following Python snippet loads input and computes DBSCAN clusters, all on GPU, using cuDF:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import cudf&#xA;from cuml.cluster import DBSCAN&#xA;&#xA;# Create and populate a GPU DataFrame&#xA;gdf_float = cudf.DataFrame()&#xA;gdf_float[&#39;0&#39;] = [1.0, 2.0, 5.0]&#xA;gdf_float[&#39;1&#39;] = [4.0, 2.0, 1.0]&#xA;gdf_float[&#39;2&#39;] = [4.0, 2.0, 1.0]&#xA;&#xA;# Setup and fit clusters&#xA;dbscan_float = DBSCAN(eps=1.0, min_samples=1)&#xA;dbscan_float.fit(gdf_float)&#xA;&#xA;print(dbscan_float.labels_)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0    0&#xA;1    1&#xA;2    2&#xA;dtype: int32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;cuML also features multi-GPU and multi-node-multi-GPU operation, using &lt;a href=&#34;https://www.dask.org&#34;&gt;Dask&lt;/a&gt;, for a growing list of algorithms. The following Python snippet reads input from a CSV file and performs a NearestNeighbors query across a cluster of Dask workers, using multiple GPUs on a single node:&lt;/p&gt; &#xA;&lt;p&gt;Initialize a &lt;code&gt;LocalCUDACluster&lt;/code&gt; configured with &lt;a href=&#34;https://github.com/rapidsai/ucx-py&#34;&gt;UCX&lt;/a&gt; for fast transport of CUDA arrays&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Initialize UCX for high-speed transport of CUDA arrays&#xA;from dask_cuda import LocalCUDACluster&#xA;&#xA;# Create a Dask single-node CUDA cluster w/ one worker per device&#xA;cluster = LocalCUDACluster(protocol=&#34;ucx&#34;,&#xA;                           enable_tcp_over_ucx=True,&#xA;                           enable_nvlink=True,&#xA;                           enable_infiniband=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load data and perform &lt;code&gt;k-Nearest Neighbors&lt;/code&gt; search. &lt;code&gt;cuml.dask&lt;/code&gt; estimators also support &lt;code&gt;Dask.Array&lt;/code&gt; as input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;from dask.distributed import Client&#xA;client = Client(cluster)&#xA;&#xA;# Read CSV file in parallel across workers&#xA;import dask_cudf&#xA;df = dask_cudf.read_csv(&#34;/path/to/csv&#34;)&#xA;&#xA;# Fit a NearestNeighbors model and query it&#xA;from cuml.dask.neighbors import NearestNeighbors&#xA;nn = NearestNeighbors(n_neighbors = 10, client=client)&#xA;nn.fit(df)&#xA;neighbors = nn.kneighbors(df)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For additional examples, browse our complete &lt;a href=&#34;https://docs.rapids.ai/api/cuml/stable/&#34;&gt;API documentation&lt;/a&gt;, or check out our example &lt;a href=&#34;https://github.com/rapidsai/cuml/tree/branch-24.08/notebooks&#34;&gt;walkthrough notebooks&lt;/a&gt;. Finally, you can find complete end-to-end examples in the &lt;a href=&#34;https://github.com/rapidsai/notebooks-contrib&#34;&gt;notebooks-contrib repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Algorithms&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Algorithm&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Clustering&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Density-Based Spatial Clustering of Applications with Noise (DBSCAN)&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Hierarchical Density-Based Spatial Clustering of Applications with Noise (HDBSCAN)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;K-Means&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Single-Linkage Agglomerative Clustering&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Dimensionality Reduction&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Principal Components Analysis (PCA)&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Incremental PCA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Truncated Singular Value Decomposition (tSVD)&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Uniform Manifold Approximation and Projection (UMAP)&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU Inference via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Random Projection&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;t-Distributed Stochastic Neighbor Embedding (TSNE)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Linear Models for Regression or Classification&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linear Regression (OLS)&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linear Regression with Lasso or Ridge Regularization&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ElasticNet Regression&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LARS Regression&lt;/td&gt; &#xA;   &lt;td&gt;(experimental)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Logistic Regression&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask-GLM &lt;a href=&#34;https://github.com/daxiongshu/rapids-demos&#34;&gt;demo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Naive Bayes&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stochastic Gradient Descent (SGD), Coordinate Descent (CD), and Quasi-Newton (QN) (including L-BFGS and OWL-QN) solvers for linear models&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Nonlinear Models for Regression or Classification&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Random Forest (RF) Classification&lt;/td&gt; &#xA;   &lt;td&gt;Experimental multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Random Forest (RF) Regression&lt;/td&gt; &#xA;   &lt;td&gt;Experimental multi-node multi-GPU via Dask&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Inference for decision tree-based models&lt;/td&gt; &#xA;   &lt;td&gt;Forest Inference Library (FIL)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;K-Nearest Neighbors (KNN) Classification&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask+&lt;a href=&#34;https://github.com/rapidsai/ucx-py&#34;&gt;UCX&lt;/a&gt;, uses &lt;a href=&#34;https://github.com/facebookresearch/faiss&#34;&gt;Faiss&lt;/a&gt; for Nearest Neighbors Query.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;K-Nearest Neighbors (KNN) Regression&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask+&lt;a href=&#34;https://github.com/rapidsai/ucx-py&#34;&gt;UCX&lt;/a&gt;, uses &lt;a href=&#34;https://github.com/facebookresearch/faiss&#34;&gt;Faiss&lt;/a&gt; for Nearest Neighbors Query.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Support Vector Machine Classifier (SVC)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Epsilon-Support Vector Regression (SVR)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Preprocessing&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Standardization, or mean removal and variance scaling / Normalization / Encoding categorical features / Discretization / Imputation of missing values / Polynomial features generation / and coming soon custom transformers and non-linear transformation&lt;/td&gt; &#xA;   &lt;td&gt;Based on Scikit-Learn preprocessing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Time Series&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Holt-Winters Exponential Smoothing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Auto-regressive Integrated Moving Average (ARIMA)&lt;/td&gt; &#xA;   &lt;td&gt;Supports seasonality (SARIMA)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Model Explanation&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SHAP Kernel Explainer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://shap.readthedocs.io/en/latest/&#34;&gt;Based on SHAP&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SHAP Permutation Explainer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://shap.readthedocs.io/en/latest/&#34;&gt;Based on SHAP&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Execution device interoperability&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run estimators interchangeably from host/cpu or device/gpu with minimal code change &lt;a href=&#34;https://docs.rapids.ai/api/cuml/stable/execution_device_interoperability.html&#34;&gt;demo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;K-Nearest Neighbors (KNN) Search&lt;/td&gt; &#xA;   &lt;td&gt;Multi-node multi-GPU via Dask+&lt;a href=&#34;https://github.com/rapidsai/ucx-py&#34;&gt;UCX&lt;/a&gt;, uses &lt;a href=&#34;https://github.com/facebookresearch/faiss&#34;&gt;Faiss&lt;/a&gt; for Nearest Neighbors Query.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.rapids.ai/install#selector&#34;&gt;the RAPIDS Release Selector&lt;/a&gt; for the command line to install either nightly or official release cuML packages via Conda or Docker.&lt;/p&gt; &#xA;&lt;h2&gt;Build/Install from Source&lt;/h2&gt; &#xA;&lt;p&gt;See the build &lt;a href=&#34;https://raw.githubusercontent.com/rapidsai/cuml/branch-24.08/BUILD.md&#34;&gt;guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/rapidsai/cuml/branch-24.08/CONTRIBUTING.md&#34;&gt;guide for contributing to cuML&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;The RAPIDS team has a number of blogs with deeper technical dives and examples. &lt;a href=&#34;https://medium.com/rapids-ai/tagged/machine-learning&#34;&gt;You can find them here on Medium.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For additional details on the technologies behind cuML, as well as a broader overview of the Python Machine Learning landscape, see &lt;a href=&#34;https://arxiv.org/abs/2002.04803&#34;&gt;&lt;em&gt;Machine Learning in Python: Main developments and technology trends in data science, machine learning, and artificial intelligence&lt;/em&gt; (2020)&lt;/a&gt; by Sebastian Raschka, Joshua Patterson, and Corey Nolet.&lt;/p&gt; &#xA;&lt;p&gt;Please consider citing this when using cuML in a project. You can use the citation BibTeX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{raschka2020machine,&#xA;  title={Machine Learning in Python: Main developments and technology trends in data science, machine learning, and artificial intelligence},&#xA;  author={Raschka, Sebastian and Patterson, Joshua and Nolet, Corey},&#xA;  journal={arXiv preprint arXiv:2002.04803},&#xA;  year={2020}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Find out more details on the &lt;a href=&#34;https://rapids.ai/community.html&#34;&gt;RAPIDS site&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&#xA; &lt;div align=&#34;left&#34;&gt;&#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/rapidsai/cuml/branch-24.08/img/rapids_logo.png&#34; width=&#34;265px&#34;&gt;&#xA; &lt;/div&gt; Open GPU Data Science&lt;/h2&gt; &#xA;&lt;p&gt;The RAPIDS suite of open source software libraries aim to enable execution of end-to-end data science and analytics pipelines entirely on GPUs. It relies on NVIDIA® CUDA® primitives for low-level compute optimization, but exposing that GPU parallelism and high-bandwidth memory speed through user-friendly Python interfaces.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rapidsai/cuml/branch-24.08/img/rapids_arrow.png&#34; width=&#34;80%&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>IfcOpenShell/IfcOpenShell</title>
    <updated>2024-06-09T01:39:16Z</updated>
    <id>tag:github.com,2024-06-09:/IfcOpenShell/IfcOpenShell</id>
    <link href="https://github.com/IfcOpenShell/IfcOpenShell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source IFC library and geometry engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IfcOpenShell&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/IfcOpenShell/IfcOpenShell/assets/88302/34901387-e2dd-4a0c-8e38-9ffc32a66cde&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;IfcOpenShell is an open source (&lt;a href=&#34;https://github.com/IfcOpenShell/IfcOpenShell/tree/master/COPYING.LESSER&#34; title=&#34;LGPL-3.0-or-later&#34;&gt;LGPL&lt;/a&gt;) software library for working with Industry Foundation Classes (&lt;a href=&#34;https://technical.buildingsmart.org/standards/ifc/&#34; title=&#34;IFC&#34;&gt;IFC&lt;/a&gt;). Complete parsing support is provided for &lt;a href=&#34;https://standards.buildingsmart.org/IFC/RELEASE/IFC2x3/TC1/HTML/&#34; title=&#34;IFC2x3 TC1&#34;&gt;IFC2x3 TC1&lt;/a&gt;, &lt;a href=&#34;https://standards.buildingsmart.org/IFC/RELEASE/IFC4/ADD2_TC1/HTML/&#34; title=&#34;IFC4 Add2 TC1&#34;&gt;IFC4 Add2 TC1&lt;/a&gt;, IFC4x1, IFC4x2, and &lt;a href=&#34;https://standards.buildingsmart.org/IFC/RELEASE/IFC4_3/&#34; title=&#34;IFC4x3 Add2&#34;&gt;IFC4x3 Add2&lt;/a&gt;. Extensive geometric support is implemented for the IFC releases &lt;a href=&#34;https://standards.buildingsmart.org/IFC/RELEASE/IFC2x3/TC1/HTML/&#34; title=&#34;IFC2x3 TC1&#34;&gt;IFC2x3 TC1&lt;/a&gt; and &lt;a href=&#34;https://standards.buildingsmart.org/IFC/RELEASE/IFC4/ADD2_TC1/HTML/&#34; title=&#34;IFC4 Add2 TC1&#34;&gt;IFC4 Add2 TC1&lt;/a&gt;. Extending with support for arbitrary IFC schemas is possible at compile-time when using C++ and at run-time when using Python.&lt;/p&gt; &#xA;&lt;p&gt;In addition to a C++ and Python API, IfcOpenShell comes with an ecosystem of tools, notably including IfcConvert (an application to convert IFC models to other formats), the BlenderBIM Add-on (an add-on to Blender providing a graphical IFC authoring platform), and many other libraries, CLI apps, and more. Support is also provided for auxiliary standards such as BCF and IDS.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ifcopenshell.org&#34;&gt;IfcOpenShell Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ifcopenshell.org&#34;&gt;IfcOpenShell Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.ifcopenshell.org/ifcopenshell/installation.html&#34;&gt;IfcOpenShell C++ Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.ifcopenshell.org/ifcopenshell-python/installation.html&#34;&gt;IfcOpenShell Python Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.ifcopenshell.org/ifcopenshell-python/hello_world.html&#34;&gt;IfcOpenShell Python Hello World Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blenderbim.org&#34;&gt;BlenderBIM Add-on Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.blenderbim.org/index.html&#34;&gt;BlenderBIM Add-on Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.blenderbim.org/users/installation.html&#34;&gt;Add-on Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.blenderbim.org/users/exploring_an_ifc_model.html&#34;&gt;Exploring an IFC model&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Service&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Anaconda Daily Build&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://anaconda.org/ifcopenshell/ifcopenshell&#34;&gt;&lt;img src=&#34;https://img.shields.io/conda/vn/ifcopenshell/ifcopenshell&#34; alt=&#34;Anaconda-Server Badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Anaconda v0.7.0 Stable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://anaconda.org/conda-forge/ifcopenshell&#34;&gt;&lt;img src=&#34;https://img.shields.io/conda/vn/conda-forge/ifcopenshell&#34; alt=&#34;Anaconda-Server Badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PyPi Daily Build&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.org/project/ifcopenshell/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/ifcopenshell&#34; alt=&#34;PyPi Badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ArchLinux AUR Package Stable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/ifcopenshell&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/ifcopenshell&#34; alt=&#34;AUR Badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ArchLinux AUR Package git&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/ifcopenshell-git&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/ifcopenshell-git&#34; alt=&#34;AUR Badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BlenderBIM Add-on Chocolatey (under moderation)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://community.chocolatey.org/packages/blenderbim-nightly/&#34;&gt;&lt;img src=&#34;https://img.shields.io/chocolatey/v/blenderbim-nightly&#34; alt=&#34;Chocolatey Badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sponsor development on OpenCollective&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://opencollective.com/opensourcebim/&#34;&gt;&lt;img src=&#34;https://opencollective.com/opensourcebim/tiers/badge.svg?sanitize=true&#34; alt=&#34;Financial Contributors&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker hub&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/aecgeeks/ifcopenshell&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/aecgeeks/ifcopenshell&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;Those marked with an asterisk are part of IfcOpenShell.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bcf&lt;/td&gt; &#xA;   &lt;td&gt;Library to read and write BCF-XML and query OpenCDE BCF-API modules&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;blenderbim&lt;/td&gt; &#xA;   &lt;td&gt;Add-on to Blender providing a graphical native IFC authoring platform&lt;/td&gt; &#xA;   &lt;td&gt;GPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bsdd&lt;/td&gt; &#xA;   &lt;td&gt;Library to query the bSDD API&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifc2ca&lt;/td&gt; &#xA;   &lt;td&gt;Utility to convert IFC structural analysis models to Code_Aster&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifc4d&lt;/td&gt; &#xA;   &lt;td&gt;Convert to and from IFC and project management software&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifc5d&lt;/td&gt; &#xA;   &lt;td&gt;Report and optimise cost information from IFC&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcbimtester&lt;/td&gt; &#xA;   &lt;td&gt;Wrapper for Gherkin based unit testing for IFC models&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcblender&lt;/td&gt; &#xA;   &lt;td&gt;Historic Blender IFC import add-on&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifccityjson&lt;/td&gt; &#xA;   &lt;td&gt;Convert CityJSON to IFC&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcclash&lt;/td&gt; &#xA;   &lt;td&gt;Clash detection library and CLI app&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcconvert&lt;/td&gt; &#xA;   &lt;td&gt;CLI app to convert IFC to many other formats&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifccsv&lt;/td&gt; &#xA;   &lt;td&gt;Library and CLI app to export and import schedules from IFC&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcdiff&lt;/td&gt; &#xA;   &lt;td&gt;Compare changes between IFC models&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcfm&lt;/td&gt; &#xA;   &lt;td&gt;Extract IFC data for FM handover requirements&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcgeom&lt;/td&gt; &#xA;   &lt;td&gt;Internal library for IfcOpenShell&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcgeom_schema_agnostic&lt;/td&gt; &#xA;   &lt;td&gt;Internal library for IfcOpenShell&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcgeomserver&lt;/td&gt; &#xA;   &lt;td&gt;Internal library for IfcOpenShell&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcjni&lt;/td&gt; &#xA;   &lt;td&gt;Internal library for IfcOpenShell&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcmax&lt;/td&gt; &#xA;   &lt;td&gt;Historic extension for IFC support in 3DS Max&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcopenshell-python&lt;/td&gt; &#xA;   &lt;td&gt;Python library for IFC manipulation&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcparse&lt;/td&gt; &#xA;   &lt;td&gt;Internal library for IfcOpenShell&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcpatch&lt;/td&gt; &#xA;   &lt;td&gt;Utility to run pre-packaged scripts to manipulate IFCs&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcsverchok&lt;/td&gt; &#xA;   &lt;td&gt;Blender Add-on for visual node programming with IFC&lt;/td&gt; &#xA;   &lt;td&gt;GPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifctester&lt;/td&gt; &#xA;   &lt;td&gt;Library, CLI and webapp for IDS model auditing&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ifcwrap&lt;/td&gt; &#xA;   &lt;td&gt;Internal library for IfcOpenShell&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;qtviewer&lt;/td&gt; &#xA;   &lt;td&gt;Internal library for IfcOpenShell&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;serializers&lt;/td&gt; &#xA;   &lt;td&gt;Internal library for IfcOpenShell&lt;/td&gt; &#xA;   &lt;td&gt;LGPL-3.0-or-later*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>defold/defold</title>
    <updated>2024-06-09T01:39:16Z</updated>
    <id>tag:github.com,2024-06-09:/defold/defold</id>
    <link href="https://github.com/defold/defold" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Defold is a completely free to use game engine for development of desktop, mobile and web games.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/defold/defold/workflows/CI%20-%20Main/badge.svg?sanitize=true&#34; alt=&#34;CI - Main&#34;&gt; &lt;img src=&#34;https://github.com/defold/defold/workflows/CI%20-%20Editor%20Only/badge.svg?sanitize=true&#34; alt=&#34;CI - Editor Only&#34;&gt; &lt;img src=&#34;https://github.com/defold/defold/workflows/CI%20-%20Engine%20nightly/badge.svg?sanitize=true&#34; alt=&#34;CI - Engine nightly&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/cHBde7J&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/250018174974689280?color=%237289DA&amp;amp;label=defold&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Join the chat at https://discord.gg/cHBde7J&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Defold&lt;/h1&gt; &#xA;&lt;p&gt;Repository for the Defold engine, editor and command line tools.&lt;/p&gt; &#xA;&lt;h2&gt;Supported by&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melsoft-games.com/&#34;&gt;&lt;img src=&#34;https://defold.com/images/logo/others/melsoft-black.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://defold.com/images/spacer32.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.rive.app&#34;&gt;&lt;img src=&#34;https://defold.com/images/logo/others/rive-black.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://defold.com/images/spacer32.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.poki.com&#34;&gt;&lt;img src=&#34;https://defold.com/images/logo/others/poki-black.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://defold.com/images/spacer32.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.opgames.org&#34;&gt;&lt;img src=&#34;https://defold.com/images/logo/others/op-games-color.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://defold.com/images/spacer32.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.heroiclabs.com&#34;&gt;&lt;img src=&#34;https://defold.com/images/logo/others/heroiclabs-blue.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://defold.com/images/spacer32.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://king.com/&#34;&gt;&lt;img src=&#34;https://defold.com/images/logo/others/king-color.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Folder Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;build_tools&lt;/strong&gt; - Build configuration and build tools used by build scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ci&lt;/strong&gt; - Continuous integration files for GitHub CI (&lt;a href=&#34;https://raw.githubusercontent.com/defold/defold/dev/README_CI.md&#34;&gt;more info&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;com.dynamo.cr&lt;/strong&gt; - Bob&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;engine&lt;/strong&gt; - Engine&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;editor&lt;/strong&gt; - Editor&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;packages&lt;/strong&gt; - External packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;scripts&lt;/strong&gt; - Build and utility scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;share&lt;/strong&gt; - Misc shared stuff used by other tools. Waf build-scripts, valgrind suppression files, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup and Build&lt;/h2&gt; &#xA;&lt;h3&gt;Setup Engine&lt;/h3&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://raw.githubusercontent.com/defold/defold/dev/README_SETUP.md&#34;&gt;setup guide&lt;/a&gt; to install all of the tools needed to build the Defold engine.&lt;/p&gt; &#xA;&lt;h3&gt;Build Engine&lt;/h3&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://raw.githubusercontent.com/defold/defold/dev/README_BUILD.md&#34;&gt;build instructions&lt;/a&gt; to build the engine and command line tools.&lt;/p&gt; &#xA;&lt;h3&gt;Setup, Build and Run Editor&lt;/h3&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://raw.githubusercontent.com/defold/defold/dev/editor/README.md&#34;&gt;instructions&lt;/a&gt; in the editor folder.&lt;/p&gt; &#xA;&lt;h2&gt;Engine Overview&lt;/h2&gt; &#xA;&lt;p&gt;An overview of the engine architecture and additional engine information can be &lt;a href=&#34;https://raw.githubusercontent.com/defold/defold/dev/engine/docs/README.md&#34;&gt;viewed here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Platform Specifics&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/defold/defold/dev/README_IOS.md&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/defold/defold/dev/README_ANDROID.md&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/defold/defold/dev/README_EMSCRIPTEN.md&#34;&gt;HTML5/Emscripten&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Releasing a new version&lt;/h2&gt; &#xA;&lt;p&gt;The release process is documented &lt;a href=&#34;https://raw.githubusercontent.com/defold/defold/dev/RELEASE.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Complying with licenses&lt;/h2&gt; &#xA;&lt;p&gt;A full list of third party software licenses along with information on how to give attribution and include the licenses in your game can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/defold/defold/dev/COMPLYING_WITH_LICENSES.md&#34;&gt;COMPLYING WITH LICENSES&lt;/a&gt; document in the Defold repository on GitHub.&lt;/p&gt;</summary>
  </entry>
</feed>