<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-15T01:51:30Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openai/triton</title>
    <updated>2023-01-15T01:51:30Z</updated>
    <id>tag:github.com,2023-01-15:/openai/triton</id>
    <link href="https://github.com/openai/triton" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Development repository for the Triton language and compiler&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://cdn.openai.com/triton/assets/triton-logo.png&#34; alt=&#34;Triton logo&#34; width=&#34;88&#34; height=&#34;100&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openai/triton/actions/workflows/wheels.yml&#34;&gt;&lt;img src=&#34;https://github.com/openai/triton/actions/workflows/wheels.yml/badge.svg?sanitize=true&#34; alt=&#34;Wheels&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;&lt;code&gt;Documentation&lt;/code&gt;&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://triton-lang.org/&#34;&gt;&lt;img src=&#34;https://github.com/openai/triton/actions/workflows/documentation.yml/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Triton&lt;/h1&gt; &#xA;&lt;p&gt;This is the development repository of Triton, a language and compiler for writing highly efficient custom Deep-Learning primitives. The aim of Triton is to provide an open-source environment to write fast code at higher productivity than CUDA, but also with higher flexibility than other existing DSLs.&lt;/p&gt; &#xA;&lt;p&gt;The foundations of this project are described in the following MAPL2019 publication: &lt;a href=&#34;http://www.eecs.harvard.edu/~htk/publication/2019-mapl-tillet-kung-cox.pdf&#34;&gt;Triton: An Intermediate Language and Compiler for Tiled Neural Network Computations&lt;/a&gt;. Please consider citing this work if you use Triton!&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://triton-lang.org&#34;&gt;official documentation&lt;/a&gt; contains installation instructions and tutorials.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can install the latest stable release of Triton from pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install triton&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Binary wheels are available for CPython 3.6-3.9 and PyPy 3.6-3.7.&lt;/p&gt; &#xA;&lt;p&gt;And the latest nightly release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -U --pre triton&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Install from source&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/openai/triton.git;&#xA;cd triton/python;&#xA;pip install cmake; # build time dependency&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Changelog&lt;/h1&gt; &#xA;&lt;p&gt;Version 1.1 is out! New features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Many, many bugfixes&lt;/li&gt; &#xA; &lt;li&gt;More documentation&lt;/li&gt; &#xA; &lt;li&gt;Automatic on-disk caching of compiled binary objects&lt;/li&gt; &#xA; &lt;li&gt;Random Number Generation&lt;/li&gt; &#xA; &lt;li&gt;Faster (up to 2x on A100), cleaner blocksparse ops&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Community contributions are more than welcome, whether it be to fix bugs or to add new features. Feel free to open GitHub issues about your contribution ideas, and we will review them. A contributor&#39;s guide containing general guidelines is coming soon!&lt;/p&gt; &#xA;&lt;p&gt;If you’re interested in joining our team and working on Triton &amp;amp; GPU kernels, &lt;a href=&#34;https://openai.com/jobs/#acceleration&#34;&gt;we’re hiring&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h1&gt;Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;Supported Platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported Hardware:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NVIDIA GPUs (Compute Capability 7.0+)&lt;/li&gt; &#xA; &lt;li&gt;Under development: AMD GPUs, CPUs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;Triton is a fairly recent project, and it is under active development. We expect it to be pretty useful in a wide variety of cases, but don&#39;t be surprised if it&#39;s a bit rough around the edges :)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Tencent/MMKV</title>
    <updated>2023-01-15T01:51:30Z</updated>
    <id>tag:github.com,2023-01-15:/Tencent/MMKV</id>
    <link href="https://github.com/Tencent/MMKV" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An efficient, small mobile key-value storage framework developed by WeChat. Works on Android, iOS, macOS, Windows, and POSIX.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Tencent/MMKV/raw/master/LICENSE.TXT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD_3-brightgreen.svg?style=flat&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/MMKV/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/MMKV/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/release-1.2.15-brightgreen.svg?sanitize=true&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/home&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platform-%20Android%20%7C%20iOS%2FmacOS%20%7C%20Win32%20%7C%20POSIX-brightgreen.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;中文版本请参看&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/MMKV/master/README_CN.md&#34;&gt;这里&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MMKV is an &lt;strong&gt;efficient&lt;/strong&gt;, &lt;strong&gt;small&lt;/strong&gt;, &lt;strong&gt;easy-to-use&lt;/strong&gt; mobile key-value storage framework used in the WeChat application. It&#39;s currently available on &lt;strong&gt;Android&lt;/strong&gt;, &lt;strong&gt;iOS/macOS&lt;/strong&gt;, &lt;strong&gt;Win32&lt;/strong&gt; and &lt;strong&gt;POSIX&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;MMKV for Android&lt;/h1&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient&lt;/strong&gt;. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of Android to achieve the best performance.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Multi-Process concurrency&lt;/strong&gt;: MMKV supports concurrent read-read and read-write access between processes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easy-to-use&lt;/strong&gt;. You can use MMKV as you go. All changes are saved immediately, no &lt;code&gt;sync&lt;/code&gt;, no &lt;code&gt;apply&lt;/code&gt; calls needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Small&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A handful of files&lt;/strong&gt;: MMKV contains process locks, encode/decode helpers and mmap logics, and nothing more. It&#39;s really tidy.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;About 50K in binary size&lt;/strong&gt;: MMKV adds about 50K per architecture on App size, and much less when zipped (APK).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation Via Maven&lt;/h3&gt; &#xA;&lt;p&gt;Add the following lines to &lt;code&gt;build.gradle&lt;/code&gt; on your app module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#39;com.tencent:mmkv:1.2.15&#39;&#xA;    // replace &#34;1.2.15&#34; with any available version&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting from v1.2.8, MMKV has been &lt;strong&gt;migrated to Maven Central&lt;/strong&gt;.&lt;br&gt; For other installation options, see &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/android_setup&#34;&gt;Android Setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Tutorial&lt;/h3&gt; &#xA;&lt;p&gt;You can use MMKV as you go. All changes are saved immediately, no &lt;code&gt;sync&lt;/code&gt;, no &lt;code&gt;apply&lt;/code&gt; calls needed.&lt;br&gt; Setup MMKV on App startup, say your &lt;code&gt;Application&lt;/code&gt; class, add these lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public void onCreate() {&#xA;    super.onCreate();&#xA;&#xA;    String rootDir = MMKV.initialize(this);&#xA;    System.out.println(&#34;mmkv root: &#34; + rootDir);&#xA;    //……&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV has a global instance, that can be used directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;import com.tencent.mmkv.MMKV;&#xA;    &#xA;MMKV kv = MMKV.defaultMMKV();&#xA;&#xA;kv.encode(&#34;bool&#34;, true);&#xA;boolean bValue = kv.decodeBool(&#34;bool&#34;);&#xA;&#xA;kv.encode(&#34;int&#34;, Integer.MIN_VALUE);&#xA;int iValue = kv.decodeInt(&#34;int&#34;);&#xA;&#xA;kv.encode(&#34;string&#34;, &#34;Hello from mmkv&#34;);&#xA;String str = kv.decodeString(&#34;string&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV also supports &lt;strong&gt;Multi-Process Access&lt;/strong&gt;. Full tutorials can be found here &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/android_tutorial&#34;&gt;Android Tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Writing random &lt;code&gt;int&lt;/code&gt; for 1000 times, we get this chart:&lt;br&gt; &lt;img src=&#34;https://github.com/Tencent/MMKV/wiki/assets/profile_android_mini.png&#34; alt=&#34;&#34;&gt;&lt;br&gt; For more benchmark data, please refer to &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/android_benchmark&#34;&gt;our benchmark&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;MMKV for iOS/macOS&lt;/h1&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient&lt;/strong&gt;. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of iOS/macOS to achieve the best performance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easy-to-use&lt;/strong&gt;. You can use MMKV as you go, no configurations are needed. All changes are saved immediately, no &lt;code&gt;synchronize&lt;/code&gt; calls are needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Small&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A handful of files&lt;/strong&gt;: MMKV contains encode/decode helpers and mmap logics and nothing more. It&#39;s really tidy.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Less than 30K in binary size&lt;/strong&gt;: MMKV adds less than 30K per architecture on App size, and much less when zipped (IPA).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation Via CocoaPods:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://guides.CocoaPods.org/using/getting-started.html&#34;&gt;CocoaPods&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Open the terminal, &lt;code&gt;cd&lt;/code&gt; to your project directory, run &lt;code&gt;pod repo update&lt;/code&gt; to make CocoaPods aware of the latest available MMKV versions;&lt;/li&gt; &#xA; &lt;li&gt;Edit your Podfile, add &lt;code&gt;pod &#39;MMKV&#39;&lt;/code&gt; to your app target;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;.xcworkspace&lt;/code&gt; file generated by CocoaPods;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;#import &amp;lt;MMKV/MMKV.h&amp;gt;&lt;/code&gt; to your source file and we are done.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For other installation options, see &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/iOS_setup&#34;&gt;iOS/macOS Setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Tutorial&lt;/h3&gt; &#xA;&lt;p&gt;You can use MMKV as you go, no configurations are needed. All changes are saved immediately, no &lt;code&gt;synchronize&lt;/code&gt; calls are needed. Setup MMKV on App startup, in your &lt;code&gt;-[MyApp application: didFinishLaunchingWithOptions:]&lt;/code&gt;, add these lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {&#xA;    // init MMKV in the main thread&#xA;    [MMKV initializeMMKV:nil];&#xA;&#xA;    //...&#xA;    return YES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV has a global instance, that can be used directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MMKV *mmkv = [MMKV defaultMMKV];&#xA;    &#xA;[mmkv setBool:YES forKey:@&#34;bool&#34;];&#xA;BOOL bValue = [mmkv getBoolForKey:@&#34;bool&#34;];&#xA;    &#xA;[mmkv setInt32:-1024 forKey:@&#34;int32&#34;];&#xA;int32_t iValue = [mmkv getInt32ForKey:@&#34;int32&#34;];&#xA;    &#xA;[mmkv setString:@&#34;hello, mmkv&#34; forKey:@&#34;string&#34;];&#xA;NSString *str = [mmkv getStringForKey:@&#34;string&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV also supports &lt;strong&gt;Multi-Process Access&lt;/strong&gt;. Full tutorials can be found &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/iOS_tutorial&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Writing random &lt;code&gt;int&lt;/code&gt; for 10000 times, we get this chart:&lt;br&gt; &lt;img src=&#34;https://github.com/Tencent/MMKV/wiki/assets/profile_mini.png&#34; alt=&#34;&#34;&gt;&lt;br&gt; For more benchmark data, please refer to &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/iOS_benchmark&#34;&gt;our benchmark&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;MMKV for Win32&lt;/h1&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient&lt;/strong&gt;. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of Windows to achieve the best performance.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Multi-Process concurrency&lt;/strong&gt;: MMKV supports concurrent read-read and read-write access between processes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easy-to-use&lt;/strong&gt;. You can use MMKV as you go. All changes are saved immediately, no &lt;code&gt;save&lt;/code&gt;, no &lt;code&gt;sync&lt;/code&gt; calls are needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Small&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A handful of files&lt;/strong&gt;: MMKV contains process locks, encode/decode helpers and mmap logics, and nothing more. It&#39;s really tidy.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;About 10K in binary size&lt;/strong&gt;: MMKV adds about 10K on application size, and much less when zipped.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation Via Source&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Getting source code from git repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/Tencent/MMKV.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;Win32/MMKV/MMKV.vcxproj&lt;/code&gt; to your solution;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;MMKV&lt;/code&gt; project to your project&#39;s dependencies;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;$(OutDir)include&lt;/code&gt; to your project&#39;s &lt;code&gt;C/C++&lt;/code&gt; -&amp;gt; &lt;code&gt;General&lt;/code&gt; -&amp;gt; &lt;code&gt;Additional Include Directories&lt;/code&gt;;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;$(OutDir)&lt;/code&gt; to your project&#39;s &lt;code&gt;Linker&lt;/code&gt; -&amp;gt; &lt;code&gt;General&lt;/code&gt; -&amp;gt; &lt;code&gt;Additional Library Directories&lt;/code&gt;;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;MMKV.lib&lt;/code&gt; to your project&#39;s &lt;code&gt;Linker&lt;/code&gt; -&amp;gt; &lt;code&gt;Input&lt;/code&gt; -&amp;gt; &lt;code&gt;Additional Dependencies&lt;/code&gt;;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;#include &amp;lt;MMKV/MMKV.h&amp;gt;&lt;/code&gt; to your source file and we are done.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;note:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;MMKV is compiled with &lt;code&gt;MT/MTd&lt;/code&gt; runtime by default. If your project uses &lt;code&gt;MD/MDd&lt;/code&gt;, you should change MMKV&#39;s setting to match your project&#39;s (&lt;code&gt;C/C++&lt;/code&gt; -&amp;gt; &lt;code&gt;Code Generation&lt;/code&gt; -&amp;gt; &lt;code&gt;Runtime Library&lt;/code&gt;), or vice versa.&lt;/li&gt; &#xA; &lt;li&gt;MMKV is developed with Visual Studio 2017, change the &lt;code&gt;Platform Toolset&lt;/code&gt; if you use a different version of Visual Studio.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For other installation options, see &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/windows_setup&#34;&gt;Win32 Setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Tutorial&lt;/h3&gt; &#xA;&lt;p&gt;You can use MMKV as you go. All changes are saved immediately, no &lt;code&gt;sync&lt;/code&gt;, no &lt;code&gt;save&lt;/code&gt; calls needed.&lt;br&gt; Setup MMKV on App startup, say in your &lt;code&gt;main()&lt;/code&gt;, add these lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;MMKV/MMKV.h&amp;gt;&#xA;&#xA;int main() {&#xA;    std::wstring rootDir = getYourAppDocumentDir();&#xA;    MMKV::initializeMMKV(rootDir);&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV has a global instance, that can be used directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;auto mmkv = MMKV::defaultMMKV();&#xA;&#xA;mmkv-&amp;gt;set(true, &#34;bool&#34;);&#xA;std::cout &amp;lt;&amp;lt; &#34;bool = &#34; &amp;lt;&amp;lt; mmkv-&amp;gt;getBool(&#34;bool&#34;) &amp;lt;&amp;lt; std::endl;&#xA;&#xA;mmkv-&amp;gt;set(1024, &#34;int32&#34;);&#xA;std::cout &amp;lt;&amp;lt; &#34;int32 = &#34; &amp;lt;&amp;lt; mmkv-&amp;gt;getInt32(&#34;int32&#34;) &amp;lt;&amp;lt; std::endl;&#xA;&#xA;mmkv-&amp;gt;set(&#34;Hello, MMKV for Win32&#34;, &#34;string&#34;);&#xA;std::string result;&#xA;mmkv-&amp;gt;getString(&#34;string&#34;, result);&#xA;std::cout &amp;lt;&amp;lt; &#34;string = &#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV also supports &lt;strong&gt;Multi-Process Access&lt;/strong&gt;. Full tutorials can be found here &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/windows_tutorial&#34;&gt;Win32 Tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;MMKV for POSIX&lt;/h1&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient&lt;/strong&gt;. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of POSIX to achieve the best performance.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Multi-Process concurrency&lt;/strong&gt;: MMKV supports concurrent read-read and read-write access between processes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easy-to-use&lt;/strong&gt;. You can use MMKV as you go. All changes are saved immediately, no &lt;code&gt;save&lt;/code&gt;, no &lt;code&gt;sync&lt;/code&gt; calls are needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Small&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A handful of files&lt;/strong&gt;: MMKV contains process locks, encode/decode helpers and mmap logics, and nothing more. It&#39;s really tidy.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;About 7K in binary size&lt;/strong&gt;: MMKV adds about 7K on application size, and much less when zipped.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation Via CMake&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Getting source code from the git repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/Tencent/MMKV.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit your &lt;code&gt;CMakeLists.txt&lt;/code&gt;, add those lines:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;add_subdirectory(mmkv/POSIX/src mmkv)&#xA;target_link_libraries(MyApp&#xA;    mmkv)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;#include &#34;MMKV.h&#34;&lt;/code&gt; to your source file and we are done.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For other installation options, see &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/posix_setup&#34;&gt;POSIX Setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Tutorial&lt;/h3&gt; &#xA;&lt;p&gt;You can use MMKV as you go. All changes are saved immediately, no &lt;code&gt;sync&lt;/code&gt;, no &lt;code&gt;save&lt;/code&gt; calls needed.&lt;br&gt; Setup MMKV on App startup, say in your &lt;code&gt;main()&lt;/code&gt;, add these lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &#34;MMKV.h&#34;&#xA;&#xA;int main() {&#xA;    std::string rootDir = getYourAppDocumentDir();&#xA;    MMKV::initializeMMKV(rootDir);&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV has a global instance, that can be used directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;auto mmkv = MMKV::defaultMMKV();&#xA;&#xA;mmkv-&amp;gt;set(true, &#34;bool&#34;);&#xA;std::cout &amp;lt;&amp;lt; &#34;bool = &#34; &amp;lt;&amp;lt; mmkv-&amp;gt;getBool(&#34;bool&#34;) &amp;lt;&amp;lt; std::endl;&#xA;&#xA;mmkv-&amp;gt;set(1024, &#34;int32&#34;);&#xA;std::cout &amp;lt;&amp;lt; &#34;int32 = &#34; &amp;lt;&amp;lt; mmkv-&amp;gt;getInt32(&#34;int32&#34;) &amp;lt;&amp;lt; std::endl;&#xA;&#xA;mmkv-&amp;gt;set(&#34;Hello, MMKV for Win32&#34;, &#34;string&#34;);&#xA;std::string result;&#xA;mmkv-&amp;gt;getString(&#34;string&#34;, result);&#xA;std::cout &amp;lt;&amp;lt; &#34;string = &#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV also supports &lt;strong&gt;Multi-Process Access&lt;/strong&gt;. Full tutorials can be found here &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/posix_tutorial&#34;&gt;POSIX Tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MMKV is published under the BSD 3-Clause license. For details check out the &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/MMKV/master/LICENSE.TXT&#34;&gt;LICENSE.TXT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/MMKV/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for details of change history.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in contributing, check out the &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/MMKV/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;, also join our &lt;a href=&#34;https://opensource.tencent.com/contribution&#34;&gt;Tencent OpenSource Plan&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To give clarity of what is expected of our members, MMKV has adopted the code of conduct defined by the Contributor Covenant, which is widely used. And we think it articulates our values well. For more, check out the &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/MMKV/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ &amp;amp; Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt; first. Should there be any questions, don&#39;t hesitate to create &lt;a href=&#34;https://github.com/Tencent/MMKV/issues&#34;&gt;issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Personal Information Protection Rules&lt;/h2&gt; &#xA;&lt;p&gt;User privacy is taken very seriously: MMKV does not obtain, collect or upload any personal information. Please refer to the &lt;a href=&#34;https://support.weixin.qq.com/cgi-bin/mmsupportacctnodeweb-bin/pages/aY5BAtRiO1BpoHxo&#34;&gt;MMKV SDK Personal Information Protection Rules&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/filament</title>
    <updated>2023-01-15T01:51:30Z</updated>
    <id>tag:github.com,2023-01-15:/google/filament</id>
    <link href="https://github.com/google/filament" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Filament is a real-time physically based rendering engine for Android, iOS, Windows, Linux, macOS, and WebGL2&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Filament&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/filament/actions?query=workflow%3AAndroid&#34;&gt;&lt;img src=&#34;https://github.com/google/filament/workflows/Android/badge.svg?sanitize=true&#34; alt=&#34;Android Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/filament/actions?query=workflow%3AiOS&#34;&gt;&lt;img src=&#34;https://github.com/google/filament/workflows/iOS/badge.svg?sanitize=true&#34; alt=&#34;iOS Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/filament/actions?query=workflow%3ALinux&#34;&gt;&lt;img src=&#34;https://github.com/google/filament/workflows/Linux/badge.svg?sanitize=true&#34; alt=&#34;Linux Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/filament/actions?query=workflow%3AmacOS&#34;&gt;&lt;img src=&#34;https://github.com/google/filament/workflows/macOS/badge.svg?sanitize=true&#34; alt=&#34;macOS Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/filament/actions?query=workflow%3AWindows&#34;&gt;&lt;img src=&#34;https://github.com/google/filament/workflows/Windows/badge.svg?sanitize=true&#34; alt=&#34;Windows Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/filament/actions?query=workflow%3AWeb&#34;&gt;&lt;img src=&#34;https://github.com/google/filament/workflows/Web/badge.svg?sanitize=true&#34; alt=&#34;Web Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Filament is a real-time physically based rendering engine for Android, iOS, Linux, macOS, Windows, and WebGL. It is designed to be as small as possible and as efficient as possible on Android.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/filament/releases&#34;&gt;Download Filament releases&lt;/a&gt; to access stable builds. Filament release archives contains host-side tools that are required to generate assets.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you always use tools from the same release as the runtime library. This is particularly important for &lt;code&gt;matc&lt;/code&gt; (material compiler).&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d rather build Filament yourself, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/google/filament/main/BUILDING.md&#34;&gt;build manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Android projects can simply declare Filament libraries as Maven dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {&#xA;    // ...&#xA;    mavenCentral()&#xA;}&#xA;&#xA;dependencies {&#xA;    implementation &#39;com.google.android.filament:filament-android:1.31.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are all the libraries available in the group &lt;code&gt;com.google.android.filament&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Artifact&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filament-android&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filament-android/badge.svg?subject=filament-android&#34; alt=&#34;filament-android&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Filament rendering engine itself.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/gltfio-android&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/gltfio-android/badge.svg?subject=gltfio-android&#34; alt=&#34;gltfio-android&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A glTF 2.0 loader for Filament, depends on &lt;code&gt;filament-android&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/gltfio-android-lite&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/gltfio-android-lite/badge.svg?subject=gltfio-android-lite&#34; alt=&#34;gltfio-android-lite&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Trimmed version of &lt;code&gt;gltfio&lt;/code&gt; that does not support some glTF extensions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filament-utils-android&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filament-utils-android/badge.svg?subject=filament-utils-android&#34; alt=&#34;filament-utils-android&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;KTX loading, Kotlin math, and camera utilities, depends on &lt;code&gt;gltfio-android&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filamat-android&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filamat-android/badge.svg?subject=filamat-android&#34; alt=&#34;filamat-android&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A runtime material builder/compiler. This library is large but contains a full shader compiler/validator/optimizer and supports both OpenGL and Vulkan.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filamat-android-lite&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filamat-android-lite/badge.svg?subject=filamat-android-lite&#34; alt=&#34;filamat-android-lite&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A much smaller alternative to &lt;code&gt;filamat-android&lt;/code&gt; that can only generate OpenGL shaders. It does not provide validation or optimizations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;iOS projects can use CocoaPods to install the latest release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;Filament&#39;, &#39;~&amp;gt; 1.31.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Snapshots&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to live on the edge, you can download a continuous build by following the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Find the &lt;a href=&#34;https://github.com/google/filament/commits/main&#34;&gt;commit&lt;/a&gt; you&#39;re interested in.&lt;/li&gt; &#xA; &lt;li&gt;Click the green check mark under the commit message.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;em&gt;Details&lt;/em&gt; link for the platform you&#39;re interested in.&lt;/li&gt; &#xA; &lt;li&gt;On the top left click &lt;em&gt;Summary&lt;/em&gt;, then in the &lt;em&gt;Artifacts&lt;/em&gt; section choose the desired artifact.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google.github.io/filament/Filament.html&#34;&gt;Filament&lt;/a&gt;, an in-depth explanation of real-time physically based rendering, the graphics capabilities and implementation of Filament. This document explains the math and reasoning behind most of our decisions. This document is a good introduction to PBR for graphics programmers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google.github.io/filament/Materials.html&#34;&gt;Materials&lt;/a&gt;, the full reference documentation for our material system. This document explains our different material models, how to use the material compiler &lt;code&gt;matc&lt;/code&gt; and how to write custom materials.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google.github.io/filament/Material%20Properties.pdf&#34;&gt;Material Properties&lt;/a&gt;, a reference sheet for the standard material model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/filament/main/docs/images/samples/example_bistro1.jpg&#34; alt=&#34;Night scene&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/filament/main/docs/images/samples/example_bistro2.jpg&#34; alt=&#34;Night scene&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/filament/main/docs/images/samples/example_materials1.jpg&#34; alt=&#34;Materials&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/filament/main/docs/images/samples/example_materials2.jpg&#34; alt=&#34;Materials&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/filament/main/docs/images/samples/example_helmet.jpg&#34; alt=&#34;Helmet&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/filament/main/docs/images/samples/example_ssr.jpg&#34; alt=&#34;Screen-space refraction&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;APIs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Native C++ API for Android, iOS, Linux, macOS and Windows&lt;/li&gt; &#xA; &lt;li&gt;Java/JNI API for Android&lt;/li&gt; &#xA; &lt;li&gt;JavaScript API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Backends&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenGL 4.1+ for Linux, macOS and Windows&lt;/li&gt; &#xA; &lt;li&gt;OpenGL ES 3.0+ for Android and iOS&lt;/li&gt; &#xA; &lt;li&gt;Metal for macOS and iOS&lt;/li&gt; &#xA; &lt;li&gt;Vulkan 1.0 for Android, Linux, macOS, and Windows&lt;/li&gt; &#xA; &lt;li&gt;WebGL 2.0 for all platforms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Rendering&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clustered forward renderer&lt;/li&gt; &#xA; &lt;li&gt;Cook-Torrance microfacet specular BRDF&lt;/li&gt; &#xA; &lt;li&gt;Lambertian diffuse BRDF&lt;/li&gt; &#xA; &lt;li&gt;Custom lighting/surface shading&lt;/li&gt; &#xA; &lt;li&gt;HDR/linear lighting&lt;/li&gt; &#xA; &lt;li&gt;Metallic workflow&lt;/li&gt; &#xA; &lt;li&gt;Clear coat&lt;/li&gt; &#xA; &lt;li&gt;Anisotropic lighting&lt;/li&gt; &#xA; &lt;li&gt;Approximated translucent (subsurface) materials&lt;/li&gt; &#xA; &lt;li&gt;Cloth/fabric/sheen shading&lt;/li&gt; &#xA; &lt;li&gt;Normal mapping &amp;amp; ambient occlusion mapping&lt;/li&gt; &#xA; &lt;li&gt;Image-based lighting&lt;/li&gt; &#xA; &lt;li&gt;Physically-based camera (shutter speed, sensitivity and aperture)&lt;/li&gt; &#xA; &lt;li&gt;Physical light units&lt;/li&gt; &#xA; &lt;li&gt;Point lights, spot lights, and directional light&lt;/li&gt; &#xA; &lt;li&gt;Specular anti-aliasing&lt;/li&gt; &#xA; &lt;li&gt;Point, spot, and directional light shadows&lt;/li&gt; &#xA; &lt;li&gt;Cascaded shadows&lt;/li&gt; &#xA; &lt;li&gt;EVSM, PCSS, DPCF, or PCF shadows&lt;/li&gt; &#xA; &lt;li&gt;Transparent shadows&lt;/li&gt; &#xA; &lt;li&gt;Contact shadows&lt;/li&gt; &#xA; &lt;li&gt;Screen-space ambient occlusion&lt;/li&gt; &#xA; &lt;li&gt;Screen-space reflections&lt;/li&gt; &#xA; &lt;li&gt;Screen-space refraction&lt;/li&gt; &#xA; &lt;li&gt;Global fog&lt;/li&gt; &#xA; &lt;li&gt;Dynamic resolution (with support for AMD FidelityFX FSR)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Post processing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HDR bloom&lt;/li&gt; &#xA; &lt;li&gt;Depth of field bokeh&lt;/li&gt; &#xA; &lt;li&gt;Multiple tone mappers: generic (customizable), ACES, filmic, etc.&lt;/li&gt; &#xA; &lt;li&gt;Color and tone management: luminance scaling, gamut mapping&lt;/li&gt; &#xA; &lt;li&gt;Color grading: exposure, night adaptation, white balance, channel mixer, shadows/mid-tones/highlights, ASC CDL, contrast, saturation, etc.&lt;/li&gt; &#xA; &lt;li&gt;TAA, FXAA, MSAA&lt;/li&gt; &#xA; &lt;li&gt;Screen-space lens flares&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;glTF 2.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Encodings&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Embeded&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Binary&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Primitive Types&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Points&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Lines&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Line Loop&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Line Strip&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Triangles&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Triangle Strip&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Triangle Fan&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Animation&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Transform animation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linear interpolation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Morph animation &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sparse accessor&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Skin animation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Joint animation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extensions&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_draco_mesh_compression&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_lights_punctual&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_clearcoat&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_emissive_strength&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_ior&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_pbrSpecularGlossiness&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_sheen&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_transmission&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_unlit&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_variants&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_volume&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_mesh_quantization&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_texture_basisu&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_texture_transform&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; EXT_meshopt_compression&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rendering with Filament&lt;/h2&gt; &#xA;&lt;h3&gt;Native Linux, macOS and Windows&lt;/h3&gt; &#xA;&lt;p&gt;You must create an &lt;code&gt;Engine&lt;/code&gt;, a &lt;code&gt;Renderer&lt;/code&gt; and a &lt;code&gt;SwapChain&lt;/code&gt;. The &lt;code&gt;SwapChain&lt;/code&gt; is created from a native window pointer (an &lt;code&gt;NSView&lt;/code&gt; on macOS or a &lt;code&gt;HWND&lt;/code&gt; on Windows for instance):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;Engine* engine = Engine::create();&#xA;SwapChain* swapChain = engine-&amp;gt;createSwapChain(nativeWindow);&#xA;Renderer* renderer = engine-&amp;gt;createRenderer();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To render a frame you must then create a &lt;code&gt;View&lt;/code&gt;, a &lt;code&gt;Scene&lt;/code&gt; and a &lt;code&gt;Camera&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;Camera* camera = engine-&amp;gt;createCamera(EntityManager::get().create());&#xA;View* view = engine-&amp;gt;createView();&#xA;Scene* scene = engine-&amp;gt;createScene();&#xA;&#xA;view-&amp;gt;setCamera(camera);&#xA;view-&amp;gt;setScene(scene);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Renderables are added to the scene:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;Entity renderable = EntityManager::get().create();&#xA;// build a quad&#xA;RenderableManager::Builder(1)&#xA;        .boundingBox({{ -1, -1, -1 }, { 1, 1, 1 }})&#xA;        .material(0, materialInstance)&#xA;        .geometry(0, RenderableManager::PrimitiveType::TRIANGLES, vertexBuffer, indexBuffer, 0, 6)&#xA;        .culling(false)&#xA;        .build(*engine, renderable);&#xA;scene-&amp;gt;addEntity(renderable);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The material instance is obtained from a material, itself loaded from a binary blob generated by &lt;code&gt;matc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;Material* material = Material::Builder()&#xA;        .package((void*) BAKED_MATERIAL_PACKAGE, sizeof(BAKED_MATERIAL_PACKAGE))&#xA;        .build(*engine);&#xA;MaterialInstance* materialInstance = material-&amp;gt;createInstance();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To learn more about materials and &lt;code&gt;matc&lt;/code&gt;, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/google/filament/main/docs/Materials.md.html&#34;&gt;materials documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To render, simply pass the &lt;code&gt;View&lt;/code&gt; to the &lt;code&gt;Renderer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// beginFrame() returns false if we need to skip a frame&#xA;if (renderer-&amp;gt;beginFrame(swapChain)) {&#xA;    // for each View&#xA;    renderer-&amp;gt;render(view);&#xA;    renderer-&amp;gt;endFrame();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For complete examples of Linux, macOS and Windows Filament applications, look at the source files in the &lt;code&gt;samples/&lt;/code&gt; directory. These samples are all based on &lt;code&gt;libs/filamentapp/&lt;/code&gt; which contains the code that creates a native window with SDL2 and initializes the Filament engine, renderer and views.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to prepare environment maps for image-based lighting please refer to &lt;a href=&#34;https://github.com/google/filament/raw/main/BUILDING.md#running-the-native-samples&#34;&gt;BUILDING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;code&gt;android/samples&lt;/code&gt; for examples of how to use Filament on Android.&lt;/p&gt; &#xA;&lt;p&gt;You must always first initialize Filament by calling &lt;code&gt;Filament.init()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Rendering with Filament on Android is similar to rendering from native code (the APIs are largely the same across languages). You can render into a &lt;code&gt;Surface&lt;/code&gt; by passing a &lt;code&gt;Surface&lt;/code&gt; to the &lt;code&gt;createSwapChain&lt;/code&gt; method. This allows you to render to a &lt;code&gt;SurfaceTexture&lt;/code&gt;, a &lt;code&gt;TextureView&lt;/code&gt; or a &lt;code&gt;SurfaceView&lt;/code&gt;. To make things easier we provide an Android specific API called &lt;code&gt;UiHelper&lt;/code&gt; in the package &lt;code&gt;com.google.android.filament.android&lt;/code&gt;. All you need to do is set a render callback on the helper and attach your &lt;code&gt;SurfaceView&lt;/code&gt; or &lt;code&gt;TextureView&lt;/code&gt; to it. You are still responsible for creating the swap chain in the &lt;code&gt;onNativeWindowChanged()&lt;/code&gt; callback.&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;Filament is supported on iOS 11.0 and above. See &lt;code&gt;ios/samples&lt;/code&gt; for examples of using Filament on iOS.&lt;/p&gt; &#xA;&lt;p&gt;Filament on iOS is largely the same as native rendering with C++. A &lt;code&gt;CAEAGLLayer&lt;/code&gt; or &lt;code&gt;CAMetalLayer&lt;/code&gt; is passed to the &lt;code&gt;createSwapChain&lt;/code&gt; method. Filament for iOS supports both Metal (preferred) and OpenGL ES.&lt;/p&gt; &#xA;&lt;h2&gt;Assets&lt;/h2&gt; &#xA;&lt;p&gt;To get started you can use the textures and environment maps found respectively in &lt;code&gt;third_party/textures&lt;/code&gt; and &lt;code&gt;third_party/environments&lt;/code&gt;. These assets are under CC0 license. Please refer to their respective &lt;code&gt;URL.txt&lt;/code&gt; files to know more about the original authors.&lt;/p&gt; &#xA;&lt;p&gt;Environments must be pre-processed using &lt;a href=&#34;https://github.com/google/filament/raw/main/BUILDING.md#running-the-native-samples&#34;&gt;&lt;code&gt;cmgen&lt;/code&gt;&lt;/a&gt; or using the &lt;code&gt;libiblprefilter&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;h2&gt;How to make contributions&lt;/h2&gt; &#xA;&lt;p&gt;Please read and follow the steps in &lt;a href=&#34;https://raw.githubusercontent.com/google/filament/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;. Make sure you are familiar with the &lt;a href=&#34;https://raw.githubusercontent.com/google/filament/main/CODE_STYLE.md&#34;&gt;code style&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Directory structure&lt;/h2&gt; &#xA;&lt;p&gt;This repository not only contains the core Filament engine, but also its supporting libraries and tools.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;android&lt;/code&gt;: Android libraries and projects &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;filamat-android&lt;/code&gt;: Filament material generation library (AAR) for Android&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filament-android&lt;/code&gt;: Filament library (AAR) for Android&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filament-utils-android&lt;/code&gt;: Extra utilities (KTX loader, math types, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gltfio-android&lt;/code&gt;: Filament glTF loading library (AAR) for Android&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;samples&lt;/code&gt;: Android-specific Filament samples&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;art&lt;/code&gt;: Source for various artworks (logos, PDF manuals, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;assets&lt;/code&gt;: 3D assets to use with sample applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build&lt;/code&gt;: CMake build scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docs&lt;/code&gt;: Documentation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;math&lt;/code&gt;: Mathematica notebooks used to explore BRDFs, equations, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filament&lt;/code&gt;: Filament rendering engine (minimal dependencies) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;backend&lt;/code&gt;: Rendering backends/drivers (Vulkan, Metal, OpenGL/ES)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ide&lt;/code&gt;: Configuration files for IDEs (CLion, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ios&lt;/code&gt;: Sample projects for iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libs&lt;/code&gt;: Libraries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bluegl&lt;/code&gt;: OpenGL bindings for macOS, Linux and Windows&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bluevk&lt;/code&gt;: Vulkan bindings for macOS, Linux, Windows and Android&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;camutils&lt;/code&gt;: Camera manipulation utilities&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filabridge&lt;/code&gt;: Library shared by the Filament engine and host tools&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filaflat&lt;/code&gt;: Serialization/deserialization library used for materials&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filagui&lt;/code&gt;: Helper library for &lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;Dear ImGui&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filamat&lt;/code&gt;: Material generation library&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filamentapp&lt;/code&gt;: SDL2 skeleton to build sample apps&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filameshio&lt;/code&gt;: Tiny filamesh parsing library (see also &lt;code&gt;tools/filamesh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;geometry&lt;/code&gt;: Mesh-related utilities&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gltfio&lt;/code&gt;: Loader for glTF 2.0&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ibl&lt;/code&gt;: IBL generation tools&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;image&lt;/code&gt;: Image filtering and simple transforms&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;imageio&lt;/code&gt;: Image file reading / writing, only intended for internal use&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;matdbg&lt;/code&gt;: DebugServer for inspecting shaders at run-time (debug builds only)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;math&lt;/code&gt;: Math library&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mathio&lt;/code&gt;: Math types support for output streams&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;utils&lt;/code&gt;: Utility library (threads, memory, data structures, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;viewer&lt;/code&gt;: glTF viewer library (requires gltfio)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;samples&lt;/code&gt;: Sample desktop applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shaders&lt;/code&gt;: Shaders used by &lt;code&gt;filamat&lt;/code&gt; and &lt;code&gt;matc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;third_party&lt;/code&gt;: External libraries and assets &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;environments&lt;/code&gt;: Environment maps under CC0 license that can be used with &lt;code&gt;cmgen&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;models&lt;/code&gt;: Models under permissive licenses&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;textures&lt;/code&gt;: Textures under CC0 license&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tools&lt;/code&gt;: Host tools &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cmgen&lt;/code&gt;: Image-based lighting asset generator&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filamesh&lt;/code&gt;: Mesh converter&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;glslminifier&lt;/code&gt;: Minifies GLSL source code&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;matc&lt;/code&gt;: Material compiler&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;matinfo&lt;/code&gt; Displays information about materials compiled with &lt;code&gt;matc&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mipgen&lt;/code&gt; Generates a series of miplevels from a source image&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;normal-blending&lt;/code&gt;: Tool to blend normal maps&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resgen&lt;/code&gt; Aggregates binary blobs into embeddable resources&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;roughness-prefilter&lt;/code&gt;: Pre-filters a roughness map from a normal map to reduce aliasing&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;specular-color&lt;/code&gt;: Computes the specular color of conductors based on spectral data&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;web&lt;/code&gt;: JavaScript bindings, documentation, and samples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/google/filament/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This is not an officially supported Google product.&lt;/p&gt;</summary>
  </entry>
</feed>