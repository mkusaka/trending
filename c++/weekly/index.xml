<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-24T01:42:11Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>2swap/swaptube</title>
    <updated>2025-08-24T01:42:11Z</updated>
    <id>tag:github.com,2025-08-24:/2swap/swaptube</id>
    <link href="https://github.com/2swap/swaptube" rel="alternate"></link>
    <summary type="html">&lt;p&gt;youtube video renderer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwapTube&lt;/h1&gt; &#xA;&lt;p&gt;This is the repository I use to render &lt;a href=&#34;https://www.youtube.com/@twoswap&#34;&gt;my YouTube videos&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;SwapTube is built on FFMPEG, but most of the functionalities above the layer of video and audio encoding are custom-written. The project does not use any fancy graphics libraries, with a few exceptions for particular functionalities.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;External Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;The following external dependencies are required for specific functionalities within the project. These dependencies must be installed if you want to use the related features.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Item&lt;/th&gt; &#xA;   &lt;th&gt;What functionality is it needed for?&lt;/th&gt; &#xA;   &lt;th&gt;Used Where?&lt;/th&gt; &#xA;   &lt;th&gt;Used How?&lt;/th&gt; &#xA;   &lt;th&gt;Sample Ubuntu Installation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CMake&lt;/td&gt; &#xA;   &lt;td&gt;Everything&lt;/td&gt; &#xA;   &lt;td&gt;go.sh script&lt;/td&gt; &#xA;   &lt;td&gt;Compiles the project&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apt install cmake&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FFMPEG 5.0 or higher, and associated development libraries&lt;/td&gt; &#xA;   &lt;td&gt;Everything&lt;/td&gt; &#xA;   &lt;td&gt;audio_video folder&lt;/td&gt; &#xA;   &lt;td&gt;Encoding and processing video and audio streams&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apt install ffmpeg libswscale-dev libavcodec-dev libavformat-dev libavdevice-dev libavutil-dev libavfilter-dev&lt;/code&gt; Note: compiling ffmpeg from source, it will likely be compiled with support for extra features detected on your system, which are not baked into my CMake config. I suggest installing a precompiled binary.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CUDA&lt;/td&gt; &#xA;   &lt;td&gt;Accelerating simulations and video rendering&lt;/td&gt; &#xA;   &lt;td&gt;Anything that references the CUDA src dir (most computationally expensive scenes)&lt;/td&gt; &#xA;   &lt;td&gt;Various&lt;/td&gt; &#xA;   &lt;td&gt;Hardware-dependent&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gnuplot&lt;/td&gt; &#xA;   &lt;td&gt;Debug plot generation&lt;/td&gt; &#xA;   &lt;td&gt;DebugPlot.h&lt;/td&gt; &#xA;   &lt;td&gt;Data dumped in out/ is rendered to a PNG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apt install gnuplot&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GLM&lt;/td&gt; &#xA;   &lt;td&gt;Graphs and 3D Graphics&lt;/td&gt; &#xA;   &lt;td&gt;3d_scene.cpp, Graph.cpp&lt;/td&gt; &#xA;   &lt;td&gt;Vectors and quaternions to represent and rotate objects in space&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apt install libglm-dev&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MicroTeX&lt;/td&gt; &#xA;   &lt;td&gt;In-Video LaTeX, LatexScene&lt;/td&gt; &#xA;   &lt;td&gt;visual_media.cpp&lt;/td&gt; &#xA;   &lt;td&gt;Converts LaTeX equations into SVG files for rendering&lt;/td&gt; &#xA;   &lt;td&gt;Instructions are here: &lt;a href=&#34;https://github.com/NanoMichael/MicroTeX/&#34;&gt;https://github.com/NanoMichael/MicroTeX/&lt;/a&gt; You should install MicroTeX in MicroTeX-master alongside the swaptube checkout. Instructions will be printed if not found.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RSVG and GLib&lt;/td&gt; &#xA;   &lt;td&gt;In-Video LaTeX&lt;/td&gt; &#xA;   &lt;td&gt;visual_media.cpp&lt;/td&gt; &#xA;   &lt;td&gt;Loads and renders SVG files into pixel data&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apt install librsvg2-dev libglib2.0-dev&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cairo&lt;/td&gt; &#xA;   &lt;td&gt;In-Video LaTeX&lt;/td&gt; &#xA;   &lt;td&gt;visual_media.cpp&lt;/td&gt; &#xA;   &lt;td&gt;Renders SVG files onto Cairo surfaces and converts them to pixel data&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apt install libcairo2-dev&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Eigen&lt;/td&gt; &#xA;   &lt;td&gt;Rendering Complex Polynomials&lt;/td&gt; &#xA;   &lt;td&gt;complex_plot_scene.cpp&lt;/td&gt; &#xA;   &lt;td&gt;Finding zeros to render plots of complex-valued functions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apt install libeigen3-dev&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LibPNG&lt;/td&gt; &#xA;   &lt;td&gt;PNG scenes&lt;/td&gt; &#xA;   &lt;td&gt;visual_media.cpp&lt;/td&gt; &#xA;   &lt;td&gt;Reads PNG files and converts them to pixel data&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apt install libpng-dev&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;How to Run&lt;/h2&gt; &#xA;&lt;p&gt;When you have created a project file in &lt;code&gt;projects/yourprojectname.cpp&lt;/code&gt;, you can compile and run the whole project by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./go.sh yourprojectname 640 360&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swaptube defaults to a framerate of 30 FPS and a sample rate of 48000 Hz. If you need to change these for whatever reason, they are specified in &lt;code&gt;go.sh&lt;/code&gt; and &lt;code&gt;record_audios.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Repository Structure&lt;/h2&gt; &#xA;&lt;h3&gt;Top-Level Files and Folders&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;./src/&lt;/strong&gt;: Source folder structure is documented in the readme inside of it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;./out/&lt;/strong&gt;: Contains the output files (videos, corresponding subtitle files, data tables, and gnuplots) generated by swaptube.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Each subfolder corresponds to a project, and under that project, each render is stored in a separate folder named by timestamp.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;./media/&lt;/strong&gt;: Stores input media files used by the project. This includes script recordings, generated LaTeX, source MP4s, and source PNGs.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You should not ever need to manually modify anything here, with the exception of placing source PNGs and MP4s. Audio should be recorded using &lt;code&gt;record_audios.py&lt;/code&gt; after rendering your project.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Some_Project/&lt;/code&gt;: Put media for your project here. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;record_list.tsv&lt;/code&gt;: This will be generated by the program after rendering your project, and is read by the &lt;code&gt;record_audios.py&lt;/code&gt; script so that you can record your script easily in bulk.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;./build/&lt;/strong&gt;: Contains various files and directories created during the build process, such as CMake cache, object files, and build scripts, but most importantly, the compiled binary. Caches and miscellaneous data products may also be dumped here, for example discovered connect 4 steady states and graphs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;record_audios.py&lt;/strong&gt;: Reads the record_list.tsv file and permits you to quickly record all of the audio files for your video script.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;go.sh&lt;/strong&gt;: The program entry point!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Design Philosophy&lt;/h2&gt; &#xA;&lt;h3&gt;Time Control&lt;/h3&gt; &#xA;&lt;p&gt;Swaptube uses a 2-layer time organization system. At the highest level, the video is divided into Macroblocks, which can be thought of as atomic units of audio. Macroblocks are divided into Microblocks, which are represent atomic time units controlling visual transformations. Such division permits the user to define a video with an in-line script, such that SwapTube will do all time management and the user does not need to manually time each segment of video. Furthermore, this permits native transitions: since a transition occurs over either a Macroblock or Microblock, Swaptube knows the duration of time over which the transition occurs, and can manage that transition automatically through State.&lt;/p&gt; &#xA;&lt;h4&gt;Macroblocks&lt;/h4&gt; &#xA;&lt;p&gt;There are a few types of macroblocks: FileBlocks, SilenceBlocks, GeneratedBlocks, etc. FileBlocks are defined by a filepath to an audio file inside the media folder. SilenceBlocks are defined by a duration in seconds, and GeneratedBlocks are defined by a buffered array of audio samples generated in the project file. A macroblock can be created using &lt;code&gt;yourscene.stage_macroblock(FileBlock(&#34;youraudio_no_file_extension&#34;), 2);&lt;/code&gt; which stages the macroblock to contain 2 microblocks.&lt;/p&gt; &#xA;&lt;h4&gt;Microblocks&lt;/h4&gt; &#xA;&lt;p&gt;After a Macroblock has been staged with &lt;code&gt;n&lt;/code&gt; microblocks, the project file will render each microblock by calling &lt;code&gt;yourscene.render_microblock();&lt;/code&gt;. Be sure to call this function &lt;code&gt;n&lt;/code&gt; times, or else SwapTube will failout.&lt;/p&gt; &#xA;&lt;h4&gt;Smoketesting&lt;/h4&gt; &#xA;&lt;p&gt;In order to ensure that BOTH your time control is defined correctly (the appropriate number of microblocks are rendered) and that the project file does not crash due to a runtime error in the project file definition WITHOUT potentially kicking off a multi-hour render, you can run &lt;code&gt;./go.sh MyProjectName 640 360 -s&lt;/code&gt;. Nothing will be rendered and no DataObjects will be manipulated, and the width and height of the video will be ignored. Smoketesting also updates the record_list.tsv file, so you can record your audio script after smoketesting without performing a full render.&lt;/p&gt; &#xA;&lt;h3&gt;Scenes, State, and Data&lt;/h3&gt; &#xA;&lt;p&gt;The data structure that a single frame is rendered as a function of has three parts, roughly split up to differences in their nature:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scene&lt;/strong&gt;: The Scene is the object which is constructed by the user in the project file. It fundamentally defines &lt;strong&gt;what&lt;/strong&gt; is rendered. For example, a MandelbrotScene is responsible for rendering Mandelbrot Sets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;State&lt;/strong&gt;: State can be thought of as any numerical information used by the Scene to render a particular frame. This controls things such as the opacity of certain objects, or, following the Mandelbrot example, the zoom level of the Mandelbrot set. All scenes have a StateManager, and when the user whishes to modify the scene&#39;s state, they can do so by calling functions on the StateManager. Usually these will be &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;transition&lt;/code&gt; function calls. Since State uniquely contains numerical information, swaptube will handle all the clean transitions of state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data&lt;/strong&gt;: Data is the non-numerical stateful information which is remembered by the Scene. A good example is the LambdaScene, which draws a Tromp Lambda Diagram, and stores as data that particular lambda expression. This type of information is non-numerical, and cannot be naively interpolated for a transition, so it must be kept in a DataObject with an interface defined in the Scene and DataObject.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>cifertech/nRFBox</title>
    <updated>2025-08-24T01:42:11Z</updated>
    <id>tag:github.com,2025-08-24:/cifertech/nRFBox</id>
    <link href="https://github.com/cifertech/nRFBox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source ESP32-powered tool to scan, jam, spoof, and master BLE, Wi-Fi, and 2.4GHz networks.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/62047147/195847997-97553030-3b79-4643-9f2c-1f04bba6b989.png&#34; alt=&#34;logo&#34; width=&#34;100&#34; height=&#34;auto&#34; /&gt; &#xA; &lt;h1&gt; nRFBOX &lt;/h1&gt; &#xA; &lt;p&gt; All-in-One Gadget for BLE and 2.4GHz Networks &lt;/p&gt; &#xA; &lt;!-- Badges --&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/cifertech/nrfbox&#34; title=&#34;Go to GitHub repo&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=cifertech&amp;amp;message=nrfbox&amp;amp;color=purple&amp;amp;logo=github&#34; alt=&#34;cifertech - nrfbox&#34; /&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/cifertech/nrfbox/total&#34; alt=&#34;GitHub Downloads (all assets, all releases)&#34; /&gt; &lt;a href=&#34;https://github.com/cifertech/nrfbox&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/cifertech/nrfbox?style=social&#34; alt=&#34;stars - nrfbox&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cifertech/nrfbox&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/cifertech/nrfbox?style=social&#34; alt=&#34;forks - nrfbox&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h4&gt; &lt;a href=&#34;https://twitter.com/techcifer&#34;&gt;TWITTER&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://www.instagram.com/cifertech/&#34;&gt;INSTAGRAM&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://www.youtube.com/@techcifer&#34;&gt;YOUTUBE&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://cifertech.net/&#34;&gt;WEBSITE&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;/div&gt; &#xA;&lt;br /&gt; &#xA;&lt;h2&gt;📖 Explore the nRFBox Wiki&lt;/h2&gt; &#xA;&lt;p&gt;Complete project story, in-depth tutorials, and all the features in &lt;a href=&#34;https://github.com/cifertech/nRFBox/wiki&#34;&gt;Wiki&lt;/a&gt;! From Wi-Fi deauthentication attacks to Sub-GHz signal replay, the Wiki covers everything you need to get started. &lt;a href=&#34;https://github.com/cifertech/nRFBox/wiki&#34;&gt;Click here to explore now!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div&gt;&#xA; &amp;nbsp;&#xA;&lt;/div&gt; &#xA;&lt;h2&gt;🛠 Functionality Status and Reliability&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Reliability&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Scanner&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;High&lt;/td&gt; &#xA;   &lt;td&gt;Reliably scans the 2.4 GHz band to detect active channels and nearby devices. Occasional misses in high-interference environments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Analyzer&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;High&lt;/td&gt; &#xA;   &lt;td&gt;Provides useful insights into detected signals, but additional updates are needed for improved accuracy and detailed analysis.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Jammer&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;High&lt;/td&gt; &#xA;   &lt;td&gt;Basic jamming works but effectiveness varies by device type and signal strength. Testing on select channels is recommended.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;BLE Jammer&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;High&lt;/td&gt; &#xA;   &lt;td&gt;Disrupts BLE devices inconsistently. Further improvements are needed to ensure stability and effectiveness across BLE variants.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;BLE Spoofer&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;Low&lt;/td&gt; &#xA;   &lt;td&gt;Capable of simulating basic BLE signals but has limited compatibility. Best for controlled testing scenarios.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Sour Apple&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;Low&lt;/td&gt; &#xA;   &lt;td&gt;Specialized attack method with limited reliability; effective only under specific conditions. Further tuning is required.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;When using &lt;strong&gt;multiple NRF24&lt;/strong&gt; modules, the power demands can exceed the capabilities of the onboard power supply or regulator. Running three NRF modules simultaneously may cause instability, leading to intermittent failures or causing the nRFBox to stop functioning altogether.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Range Limitations&lt;/strong&gt;: The jammer is most effective at short range. Beyond a certain distance, the signal weakens, making it harder to consistently disrupt communication.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Device Variability&lt;/strong&gt;: Different devices react to jamming signals in varying ways. Some may be more resistant.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;div&gt;&#xA; &amp;nbsp;&#xA;&lt;/div&gt; &#xA;&lt;!-- About the Project --&gt; &#xA;&lt;h2&gt;&lt;span&gt;🌟&lt;/span&gt; About the Project&lt;/h2&gt; &#xA;&lt;p&gt;nRFBOX is a wireless toolkit designed to explore, analyze, and interact with various wireless communication protocols. It combines the ESP32 Wroom32U, NRF24 modules, an OLED display, and other components to create a multifunctional device that can act as a scanner, analyzer, jammer, BLE jammer, BLE spoofer, and perform advanced tasks such as the &#34;Sour Apple&#34; attack.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/user-attachments/assets/1d49f15d-45be-4ed4-b92a-842d628c8695&#34; alt=&#34;screenshot&#34; width=&#34;Auto&#34; height=&#34;Auto&#34; /&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- Features --&gt; &#xA;&lt;h3&gt;🎯 Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scanner&lt;/strong&gt; - Scans the 2.4GHz frequency band to detect active channels and devices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Analyzer&lt;/strong&gt; - Analyzes the detected signals and provides detailed information about the activity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Jammer&lt;/strong&gt; - Jams wireless communication on selected channels to test network robustness.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BLE Jammer&lt;/strong&gt; - Specifically targets Bluetooth Low Energy (BLE) devices to disrupt their communication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BLE Spoofer&lt;/strong&gt; - Spoofs BLE devices to simulate various BLE signals for testing and research.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sour Apple&lt;/strong&gt; - A specialized attack for testing security measures against specific wireless vulnerabilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Proto Kill Mode&lt;/strong&gt; - Proto Kill has evolved into a powerful tool for disrupting various protocols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WiFi Scanner&lt;/strong&gt; - Scan for hidden and visible BLE devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BLE Scanner&lt;/strong&gt; - List nearby Wi-Fi networks with extended details&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wi-Fi Deauthentication Attack&lt;/strong&gt; - Send deauthentication frames to disrupt client connections&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Explore the nRFBOX&#39;s features in detail at the &lt;a href=&#34;https://github.com/cifertech/nRFBox/wiki/Features&#34;&gt;nRFBOX Wiki&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;div&gt;&#xA; &amp;nbsp;&#xA;&lt;/div&gt; &#xA;&lt;!-- nRFBOX V2 --&gt; &#xA;&lt;h2&gt;&lt;span&gt;👀&lt;/span&gt; nRFBox Versions: Then and Now&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td style=&#34;text-align: center;&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/b121fe84-c789-409a-85f5-21f6d5854347&#34; alt=&#34;nRFBOX V1&#34; style=&#34;width: 400px; border: 1px solid #ccc; border-radius: 5px;&#34; /&gt; &lt;p style=&#34;font-style: italic; font-size: 14px; margin-top: 5px;&#34;&gt;nRFBox-v1 based on Arduino&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align: center;&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/a044ab5e-346c-415f-b1fb-f65aa04c520a&#34; alt=&#34;nRFBOX V2&#34; style=&#34;width: 400px; border: 1px solid #ccc; border-radius: 5px;&#34; /&gt; &lt;p style=&#34;font-style: italic; font-size: 14px; margin-top: 5px;&#34;&gt;nRFBox-v2 based on ESP32&lt;/p&gt; &lt;/td&gt;  &#xA;   &lt;td style=&#34;text-align: center;&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/bee71205-64b0-4f40-bf15-2675d3468bc1&#34; alt=&#34;nRFBOX V3&#34; style=&#34;width: 400px; border: 1px solid #ccc; border-radius: 5px;&#34; /&gt; &lt;p style=&#34;font-style: italic; font-size: 14px; margin-top: 5px;&#34;&gt;nRFBox-v3 based on ESP32&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;div&gt;&#xA; &amp;nbsp;&#xA;&lt;/div&gt; &#xA;&lt;!-- License --&gt; &#xA;&lt;h2&gt;&lt;span&gt;⚠&lt;/span&gt; License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License. See LICENSE.txt for more information.&lt;/p&gt; &#xA;&lt;div&gt;&#xA; &amp;nbsp;&#xA;&lt;/div&gt; &#xA;&lt;!-- Contact --&gt; &#xA;&lt;h2&gt;&lt;span&gt;🤝&lt;/span&gt; Contact&lt;/h2&gt; &#xA;&lt;p&gt;▶ Support me on Patreon &lt;a href=&#34;https://www.patreon.com/cifertech&#34;&gt;patreon.com/cifertech&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CiferTech - &lt;a href=&#34;https://twitter.com/techcifer&#34;&gt;@twitter&lt;/a&gt; - &lt;a href=&#34;mailto:CiferTech@gmali.com&#34;&gt;CiferTech@gmali.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project Link: &lt;a href=&#34;https://github.com/cifertech/nrfbox&#34;&gt;https://github.com/cifertech/nRFBOX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div&gt;&#xA; &amp;nbsp;&#xA;&lt;/div&gt; &#xA;&lt;!-- Acknowledgments --&gt; &#xA;&lt;h2&gt;&lt;span&gt;💎&lt;/span&gt; Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The libraries and projects listed below are used in the nRFBox Project:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.arduino.cc/t/poor-mans-2-4-ghz-scanner/54846&#34;&gt;Poor Man’s 2.4 GHz Scanner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/upiir/arduino_oled_menu&#34;&gt;arduino_oled_menu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hugorezende/nRF24L01-WiFi-Jammer&#34;&gt;nRF24L01-WiFi-Jammer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexbeliaev/Universal-RC-system/tree/master&#34;&gt;Universal-RC-system&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ECTO-1A/AppleJuice&#34;&gt;AppleJuice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RapierXbox/ESP32-Sour-Apple&#34;&gt;ESP32-Sour-Apple&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Community Contributors&lt;/strong&gt;: Thanks to everyone who helped improve nRFBox! Your support is much appreciated!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Librum-Reader/Librum</title>
    <updated>2025-08-24T01:42:11Z</updated>
    <id>tag:github.com,2025-08-24:/Librum-Reader/Librum</id>
    <link href="https://github.com/Librum-Reader/Librum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Librum client application&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Librum&lt;/h1&gt; &#xA;&lt;p&gt;Librum is an application designed to make reading &lt;b&gt;enjoyable&lt;/b&gt; and &lt;b&gt;straightforward&lt;/b&gt; for everyone.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s not &lt;strong&gt;just&lt;/strong&gt; an e-book reader. With Librum, you can manage your own online library and access it from any device anytime, anywhere. It has features like note-taking, AI tooling, and highlighting, while offering customization to make it as personal as you want!&lt;/p&gt; &#xA;&lt;p&gt;Librum also provides free access to over 70,000 books and personal reading statistics while being free and completely open source.&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;p&gt;Download Librum from &lt;a href=&#34;https://librumreader.com&#34;&gt;our website&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Librum-Reader/Librum/main/#Preview&#34;&gt;Preview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Librum-Reader/Librum/main/#Contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Librum-Reader/Librum/main/#Contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Librum-Reader/Librum/main/#Donations&#34;&gt;Donations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Librum-Reader/Librum/main/#Translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Librum-Reader/Librum/main/#Documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Librum-Reader/Librum/main/#Self-hosting&#34;&gt;Self-hosting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Librum-Reader/Librum/main/#Details&#34;&gt;Details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Librum-Reader/Librum/main/#Build-Guide&#34;&gt;Build Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br /&gt; &#xA;&lt;h1&gt;Preview&lt;/h1&gt; &#xA;&lt;p&gt;Setup and manage your own online library&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Librum-Reader/Librum/assets/69865187/ea94fc68-1bf0-4933-8d80-43a57c6590c5&#34; alt=&#34;HomeScreenDark&#34; /&gt;&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;p&gt;A simple and modern interface&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Librum-Reader/Librum/assets/69865187/bf1d0401-62bd-4f4e-b008-523fb2efd275&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;p&gt;Add your books to collections, tag them, and sort them in any way you want&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Librum-Reader/Librum/assets/69865187/00fec031-a835-4cae-89f1-79dbce24b356&#34; alt=&#34;folders_dark&#34; /&gt;&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;p&gt;Customize Librum to make it personal to you&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Librum-Reader/Librum/assets/69865187/b8995cf1-a0e6-4993-8c8b-92f7f8e79ebd&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;d to support Librum&#39;s development, check out: &lt;a href=&#34;https://librumreader.com/contribute&#34;&gt;https://librumreader.com/contribute&lt;/a&gt; &lt;br /&gt; &lt;br /&gt; All of the current feature requests, bugs and tasks are listed in the &lt;a href=&#34;https://github.com/Librum-Reader/Librum/issues&#34;&gt;issues&lt;/a&gt;. Easy tasks are labeled &#34;good first issue&#34;, so that is a good starting point. &lt;br /&gt; &lt;br /&gt; PS: Feel free to tag me (@DavidLazarescu) in the comments of any issue if you have questions.&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;p&gt;For questions, you can reach us under: &lt;a href=&#34;mailto:help@librumreader.com&#34;&gt;help@librumreader.com&lt;/a&gt; &lt;br /&gt; For business related contact, reach out to us here: &lt;a href=&#34;mailto:contact@librumreader.com&#34;&gt;contact@librumreader.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;h1&gt;Donations&lt;/h1&gt; &#xA;&lt;p&gt;Donations make it possible for us to cover our server costs and allow us to make investments into new areas of development. &lt;br /&gt; If you would like to support us, check out: &lt;a href=&#34;https://librumreader.com/contribute/donate&#34;&gt;https://librumreader.com/contribute/donate&lt;/a&gt; or become a Github sponsor! &lt;br /&gt; &lt;br /&gt; As a team of opensource developers we rely on donations to continue working on projects like Librum. Your help is greatly appreciated.&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;h1&gt;Translations&lt;/h1&gt; &#xA;&lt;p&gt;Librum is currently available in the languages listed &lt;a href=&#34;https://github.com/Librum-Reader/Librum/tree/main/src/presentation/translations&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to translate Librum to another language, follow the steps below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/Librum-Reader/Librum/raw/dev/develop/src/presentation/translations/librum_en.ts&#34;&gt;this file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rename the file to contain your language&#39;s suffix, e.g. &#34;librum_ru.ts&#34; for Russian or &#34;librum_de.ts&#34; for German&lt;/li&gt; &#xA; &lt;li&gt;Download the translation software (Qt Linguist) either for Windows from &lt;a href=&#34;https://github.com/thurask/Qt-Linguist&#34;&gt;here&lt;/a&gt; or using the &lt;a href=&#34;https://www.qt.io/download-open-source&#34;&gt;Qt Installer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Now start Qt Linguist, open the downloaded file, set the target language to the language you want to translate to and start translating. (Check out &lt;a href=&#34;https://youtu.be/xNIz78IPBu0?t=347&#34;&gt;this guide&lt;/a&gt; for a quick overview of Qt Linguist)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you are done, create a pull request or open up an issue with your new translation file!&lt;br /&gt; If you run into any problems, need guidance or have questions, feel free to reach out to us at: &lt;a href=&#34;mailto:contact@librumreader.com&#34;&gt;contact@librumreader.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure that your translations are approximately the same length as the original text&lt;/li&gt; &#xA; &lt;li&gt;Please carefully check for spelling mistakes (including punctuation and capitalization)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br /&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;For documentation go to &lt;a href=&#34;https://github.com/Librum-Reader/Librum/wiki&#34;&gt;Librum&#39;s GitHub-wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;h1&gt;Self-hosting&lt;/h1&gt; &#xA;&lt;p&gt;To self-host Librum you need to run &lt;a href=&#34;https://github.com/Librum-Reader/Librum-Server&#34;&gt;Librum-Server&lt;/a&gt; locally (instructions can be found &lt;a href=&#34;https://github.com/Librum-Reader/Librum-Server#self-hosting&#34;&gt;here&lt;/a&gt;) and tell the client to use your self-hosted server by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Linux) Editing ~/.config/Librum-Reader/Librum.conf and setting &lt;code&gt;selfHosted=true&lt;/code&gt; and &lt;code&gt;serverHost&lt;/code&gt; to your server&#39;s url (e.g. &lt;code&gt;serverHost=https://127.0.0.1:5001&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;(Windows) Opening the registry editor (Press &lt;code&gt;Win + R&lt;/code&gt; and search for &lt;code&gt;regedit&lt;/code&gt;), navigating to &lt;code&gt;HKEY_CURRENT_USER\Software\Librum-Reader\Librum&lt;/code&gt; and setting &lt;code&gt;selfHosted=true&lt;/code&gt; and &lt;code&gt;serverHost&lt;/code&gt; to your server&#39;s url&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure to run the application before following the steps above, to generate the required files.&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;h1&gt;Details&lt;/h1&gt; &#xA;&lt;h3&gt;Supported platforms&lt;/h3&gt; &#xA;&lt;p&gt;Part of Librum&#39;s aim is to work on &lt;strong&gt;any&lt;/strong&gt; platform. No matter where you are or which device you use, you can always continue your book with Librum, as it is &lt;b&gt;cross platform&lt;/b&gt;.&lt;br /&gt; We support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;GNU/Linux&lt;/li&gt; &#xA; &lt;li&gt;MacOS&lt;/li&gt; &#xA; &lt;li&gt;IOS (Coming Soon)&lt;/li&gt; &#xA; &lt;li&gt;Android (Coming Soon)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br /&gt; &#xA;&lt;h3&gt;Supported formats&lt;/h3&gt; &#xA;&lt;p&gt;Librum is the best choice for all kinds of books, since Librum supports &lt;b&gt;all&lt;/b&gt; major book formats&lt;br /&gt; including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PDF&lt;/li&gt; &#xA; &lt;li&gt;EPUB&lt;/li&gt; &#xA; &lt;li&gt;CBZ (Comic books)&lt;/li&gt; &#xA; &lt;li&gt;FB2&lt;/li&gt; &#xA; &lt;li&gt;TIFF&lt;/li&gt; &#xA; &lt;li&gt;Mobi&lt;/li&gt; &#xA; &lt;li&gt;XPS&lt;/li&gt; &#xA; &lt;li&gt;Images&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And many more!&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;p&gt;Librum&#39;s objective is to make your reading more &lt;b&gt;productive&lt;/b&gt;; to that end, we provide you with a variety of features that you can access via a &lt;b&gt;simple&lt;/b&gt; and &lt;b&gt;straightforward&lt;/b&gt; interface.&lt;br /&gt; These features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A modern e-reader&lt;/li&gt; &#xA; &lt;li&gt;A personalized and customizable online library&lt;/li&gt; &#xA; &lt;li&gt;Book meta-data editing&lt;/li&gt; &#xA; &lt;li&gt;A free in-app bookstore with more than 70,000 books&lt;/li&gt; &#xA; &lt;li&gt;Book syncing across all of your devices&lt;/li&gt; &#xA; &lt;li&gt;Highlighting&lt;/li&gt; &#xA; &lt;li&gt;Bookmarking&lt;/li&gt; &#xA; &lt;li&gt;Text search&lt;/li&gt; &#xA; &lt;li&gt;Unlimited customization&lt;/li&gt; &#xA; &lt;li&gt;Fine-grained organization through Librum&#39;s folder system&lt;/li&gt; &#xA; &lt;li&gt;Note-taking (Coming Soon)&lt;/li&gt; &#xA; &lt;li&gt;TTS (Coming Soon)&lt;/li&gt; &#xA; &lt;li&gt;Personalized reading statistics (Coming Soon)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Want a new feature? Feel free to leave a feature request ticket!&lt;/p&gt; &#xA;&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Build Guide&lt;/h1&gt; &#xA;&lt;p&gt;Follow this guide to build Librum from source. &lt;br /&gt;&lt;/p&gt; &#xA;&lt;h2&gt;For GNU/Linux&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cmake (&lt;a href=&#34;https://cmake.org/download&#34;&gt;https://cmake.org/download&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;make (&lt;a href=&#34;http://ftp.gnu.org/gnu/make&#34;&gt;http://ftp.gnu.org/gnu/make&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;g++ (&lt;a href=&#34;https://gcc.gnu.org&#34;&gt;https://gcc.gnu.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;python3-venv (on ubuntu use &lt;code&gt;sudo apt install python3-venv&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Qt 6.5 (&lt;a href=&#34;https://www.qt.io/download-open-source&#34;&gt;https://www.qt.io/download-open-source&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;The installation is straight forward, just follow the steps below:&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/Librum-Reader/Librum.git --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Step into the cloned project folder. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd Librum&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create the build folder and step into it. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir build-Release&#xA;cd build-Release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run cmake. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=Off -DCMAKE_PREFIX_PATH=&amp;lt;path/to/Qt&amp;gt; ..&#xA;&lt;/code&gt;&lt;/pre&gt; Set &lt;code&gt;CMAKE_PREFIX_PATH&lt;/code&gt; to your Qt installation path. Installing Qt via the online installer usually installs it to &lt;code&gt;/home/&amp;lt;name&amp;gt;/Qt/&amp;lt;version&amp;gt;/gcc_64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build the project &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake --build . -j $(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install Librum &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake --install .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;br /&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;Here are solutions to some common errors. If your error is not listed here, please open an issue. &lt;br /&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Error: &lt;code&gt;Failed to find required Qt component &#34;Quick&#34;.&lt;/code&gt;&lt;br /&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Solution: Install the libGL mesa dev package, on ubuntu its &lt;code&gt;sudo apt install libgl1-mesa-dev&lt;/code&gt; and on fedora its &lt;code&gt;sudo dnf install mesa-libGL-devel&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Error: &lt;code&gt;Could not load the qt platform plugin &#34;xcb&#34; even though it was found&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Solution: Install the libxcb-cursor-dev, on ubuntu its &lt;code&gt;sudo apt install libxcb-cursor-dev&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br /&gt; &#xA;&lt;h2&gt;For Windows&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cmake (&lt;a href=&#34;https://cmake.org/download&#34;&gt;https://cmake.org/download&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio &lt;b&gt;19&lt;/b&gt; (&lt;a href=&#34;https://visualstudio.microsoft.com/de/vs/older-downloads&#34;&gt;https://visualstudio.microsoft.com/de/vs/older-downloads&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Python (&lt;a href=&#34;https://www.python.org/downloads&#34;&gt;https://www.python.org/downloads&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Qt 6.5 (&lt;a href=&#34;https://www.qt.io/download-open-source&#34;&gt;https://www.qt.io/download-open-source&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To build Librum on windows, run the following commands in the Powershell:&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/Librum-Reader/Librum.git --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Step into the cloned project folder. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd Librum&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create the build folder and step into it. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir build&#xA;cd build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run cmake. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -DBUILD_TESTS=Off -DCMAKE_PREFIX_PATH=&amp;lt;path/to/qt&amp;gt; ..&#xA;&lt;/code&gt;&lt;/pre&gt; Set &lt;code&gt;CMAKE_PREFIX_PATH&lt;/code&gt; to your Qt installation path. Installing Qt via the online installer usually installs it to &lt;code&gt;&amp;lt;Drive&amp;gt;\\Qt\\&amp;lt;version&amp;gt;\\msvc2019_64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build the project &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake --build . --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run the app &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./librum&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Additional Info&lt;/h3&gt; &#xA;&lt;p&gt;Here are some things to keep in mind during the build process. &lt;br /&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure to add cmake and the Qt binaries to the &lt;code&gt;PATH&lt;/code&gt; environment variable&lt;/li&gt; &#xA; &lt;li&gt;You need Visual Studio 2019, newer versions will &lt;strong&gt;not&lt;/strong&gt; work&lt;/li&gt; &#xA; &lt;li&gt;For the Qt installation, you &lt;strong&gt;only&lt;/strong&gt; need to choose &#34;MSVC 2019 64-bit&#34;, you can untick everything else to reduce the download size&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br /&gt; &#xA;&lt;h2&gt;For MacOS&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cmake (&lt;a href=&#34;https://cmake.org/download&#34;&gt;https://cmake.org/download&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;make (&lt;a href=&#34;http://ftp.gnu.org/gnu/make&#34;&gt;http://ftp.gnu.org/gnu/make&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;g++ (&lt;a href=&#34;https://gcc.gnu.org&#34;&gt;https://gcc.gnu.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;python3 (&lt;a href=&#34;https://www.python.org/downloads&#34;&gt;https://www.python.org/downloads&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Qt 6.5 (&lt;a href=&#34;https://www.qt.io/download-open-source&#34;&gt;https://www.qt.io/download-open-source&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;The installation is straight forward, just follow the steps below:&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/Librum-Reader/Librum.git --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Step into the cloned project folder. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd Librum&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create the build folder and step into it. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir build-Release&#xA;cd build-Release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run cmake. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=Off -DCMAKE_PREFIX_PATH=&amp;lt;path/to/Qt&amp;gt; ..&#xA;&lt;/code&gt;&lt;/pre&gt; Set &lt;code&gt;CMAKE_PREFIX_PATH&lt;/code&gt; to your Qt installation path. Installing Qt via the online installer usually installs it to &lt;code&gt;/Users/&amp;lt;name&amp;gt;/Qt/&amp;lt;version&amp;gt;/macos&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build the project &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake --build . -j $(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install Librum &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake --install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: Make sure to add &lt;code&gt;/usr/local/lib&lt;/code&gt; to your DYLIB path, for MacOS to find the installed libraries by exporting &lt;code&gt;DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/usr/local/lib&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;br /&gt;</summary>
  </entry>
</feed>