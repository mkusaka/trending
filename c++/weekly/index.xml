<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-20T01:41:04Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>luau-lang/luau</title>
    <updated>2025-07-20T01:41:04Z</updated>
    <id>tag:github.com,2025-07-20:/luau-lang/luau</id>
    <link href="https://github.com/luau-lang/luau" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast, small, safe, gradually typed embeddable scripting language derived from Lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Luau &lt;img src=&#34;https://github.com/luau-lang/luau/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/luau-lang/luau&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/luau-lang/luau/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Luau (lowercase u, /ˈlu.aʊ/) is a fast, small, safe, gradually typed embeddable scripting language derived from &lt;a href=&#34;https://lua.org&#34;&gt;Lua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is designed to be backwards compatible with Lua 5.1, as well as incorporating &lt;a href=&#34;https://luau.org/compatibility&#34;&gt;some features&lt;/a&gt; from future Lua releases, but also expands the feature set (most notably with type annotations and a state-of-the-art type inference system). Luau is largely implemented from scratch, with the language runtime being a very heavily modified version of Lua 5.1 runtime, with completely rewritten interpreter and other &lt;a href=&#34;https://luau.org/performance&#34;&gt;performance innovations&lt;/a&gt;. The runtime mostly preserves Lua 5.1 API, so existing bindings should be more or less compatible with a few caveats.&lt;/p&gt; &#xA;&lt;p&gt;Luau is used by Roblox game developers to write game code, and by Roblox engineers to implement large parts of the user-facing application code as well as portions of the editor (Roblox Studio) as plugins. Roblox chose to open-source Luau to foster collaboration within the Roblox community as well as to allow other companies and communities to benefit from the ongoing language and runtime innovation. More recently, Luau has seen adoption in games like Alan Wake 2, Farming Simulator 2025, Second Life, and Warframe.&lt;/p&gt; &#xA;&lt;p&gt;This repository hosts source code for the language implementation and associated tooling. Documentation for the language is available at &lt;a href=&#34;https://luau.org/&#34;&gt;https://luau.org/&lt;/a&gt; and accepts contributions via &lt;a href=&#34;https://github.com/luau-lang/site&#34;&gt;site repository&lt;/a&gt;; the language is evolved through RFCs that are located in &lt;a href=&#34;https://github.com/luau-lang/rfcs&#34;&gt;rfcs repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Luau is an embeddable programming language, but it also comes with two command-line tools by default, &lt;code&gt;luau&lt;/code&gt; and &lt;code&gt;luau-analyze&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;luau&lt;/code&gt; is a command-line REPL and can also run input files. Note that REPL runs in a sandboxed environment and as such doesn&#39;t have access to the underlying file system except for ability to &lt;code&gt;require&lt;/code&gt; modules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;luau-analyze&lt;/code&gt; is a command-line type checker and linter; given a set of input files, it produces errors/warnings according to the file configuration, which can be customized by using &lt;code&gt;--!&lt;/code&gt; comments in the files or &lt;a href=&#34;https://rfcs.luau.org/config-luaurc&#34;&gt;&lt;code&gt;.luaurc&lt;/code&gt;&lt;/a&gt; files. For details, please refer to our &lt;a href=&#34;https://luau.org/typecheck&#34;&gt;type checking&lt;/a&gt; and &lt;a href=&#34;https://luau.org/lint&#34;&gt;linting&lt;/a&gt; documentation. Our community maintains a language server frontend for &lt;code&gt;luau-analyze&lt;/code&gt; called &lt;a href=&#34;https://github.com/JohnnyMorganz/luau-lsp&#34;&gt;luau-lsp&lt;/a&gt; for use with text editors.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can install and run Luau by downloading the compiled binaries from &lt;a href=&#34;https://github.com/luau-lang/luau/releases&#34;&gt;a recent release&lt;/a&gt;; note that &lt;code&gt;luau&lt;/code&gt; and &lt;code&gt;luau-analyze&lt;/code&gt; binaries from the archives will need to be added to PATH or copied to a directory like &lt;code&gt;/usr/local/bin&lt;/code&gt; on Linux/macOS.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use one of the packaged distributions (note that these are not maintained by Luau development team):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS: &lt;a href=&#34;https://docs.brew.sh/Installation&#34;&gt;Install Homebrew&lt;/a&gt; and run &lt;code&gt;brew install luau&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arch Linux: Luau has been added to the official Arch Linux packages repository under the extras repository (see &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/luau/&#34;&gt;&lt;code&gt;luau&lt;/code&gt;&lt;/a&gt;), simply install using &lt;code&gt;pacman&lt;/code&gt;: &lt;code&gt;pacman -Syu luau&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alpine Linux: &lt;a href=&#34;https://wiki.alpinelinux.org/w/index.php?title=Enable_Community_Repository&#34;&gt;Enable community repositories&lt;/a&gt; and run &lt;code&gt;apk add luau&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gentoo Linux: Luau is &lt;a href=&#34;https://packages.gentoo.org/packages/dev-lang/luau&#34;&gt;officially packaged by Gentoo&lt;/a&gt; and can be installed using &lt;code&gt;emerge dev-lang/luau&lt;/code&gt;. You may have to unmask the package first before installing it (which can be done by including the &lt;code&gt;--autounmask=y&lt;/code&gt; option in the &lt;code&gt;emerge&lt;/code&gt; command).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After installing, you will want to validate the installation was successful by running the test case &lt;a href=&#34;https://luau.org/getting-started&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;On all platforms, you can use CMake to run the following commands to build Luau binaries from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir cmake &amp;amp;&amp;amp; cd cmake&#xA;cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo&#xA;cmake --build . --target Luau.Repl.CLI --config RelWithDebInfo&#xA;cmake --build . --target Luau.Analyze.CLI --config RelWithDebInfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, on Linux and macOS, you can also use &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make config=release luau luau-analyze&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate Luau into your CMake application projects as a library, at the minimum, you&#39;ll need to depend on &lt;code&gt;Luau.Compiler&lt;/code&gt; and &lt;code&gt;Luau.VM&lt;/code&gt; projects. From there you need to create a new Luau state (using Lua 5.x API such as &lt;code&gt;lua_newstate&lt;/code&gt;), compile source to bytecode and load it into the VM like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// needs lua.h and luacode.h&#xA;size_t bytecodeSize = 0;&#xA;char* bytecode = luau_compile(source, strlen(source), NULL, &amp;amp;bytecodeSize);&#xA;int result = luau_load(L, chunkname, bytecode, bytecodeSize, 0);&#xA;free(bytecode);&#xA;&#xA;if (result == 0)&#xA;    return 1; /* return chunk main function */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details about the use of the host API, you currently need to consult &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#3&#34;&gt;Lua 5.x API&lt;/a&gt;. Luau closely tracks that API but has a few deviations, such as the need to compile source separately (which is important to be able to deploy VM without a compiler), and the lack of &lt;code&gt;__gc&lt;/code&gt; support (use &lt;code&gt;lua_newuserdatadtor&lt;/code&gt; instead).&lt;/p&gt; &#xA;&lt;p&gt;To gain advantage of many performance improvements, it&#39;s highly recommended to use the &lt;code&gt;safeenv&lt;/code&gt; feature, which sandboxes individual scripts&#39; global tables from each other, and protects builtin libraries from monkey-patching. For this to work, you must call &lt;code&gt;luaL_sandbox&lt;/code&gt; on the global state and &lt;code&gt;luaL_sandboxthread&lt;/code&gt; for each new script&#39;s execution thread.&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;Luau has an internal test suite; in CMake builds, it is split into two targets, &lt;code&gt;Luau.UnitTest&lt;/code&gt; (for the bytecode compiler and type checker/linter tests) and &lt;code&gt;Luau.Conformance&lt;/code&gt; (for the VM tests). The unit tests are written in C++, whereas the conformance tests are largely written in Luau (see &lt;code&gt;tests/conformance&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Makefile builds combine both into a single target that can be run via &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Dependencies&lt;/h1&gt; &#xA;&lt;p&gt;Luau uses C++ as its implementation language. The runtime requires C++11, while the compiler and analysis components require C++17. It should build without issues using Microsoft Visual Studio 2017 or later, or gcc-7 or clang-7 or later.&lt;/p&gt; &#xA;&lt;p&gt;Other than the STL/CRT, Luau library components don&#39;t have external dependencies. The test suite depends on the &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt; testing framework, and the REPL command-line depends on &lt;a href=&#34;https://github.com/daanx/isocline&#34;&gt;isocline&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Luau implementation is distributed under the terms of &lt;a href=&#34;https://github.com/luau-lang/luau/raw/master/LICENSE.txt&#34;&gt;MIT License&lt;/a&gt;. It is based on the Lua 5.x implementation, also under the MIT License.&lt;/p&gt; &#xA;&lt;p&gt;When Luau is integrated into external projects, we ask that you honor the license agreement and include Luau attribution into the user-facing product documentation. Attribution making use of the &lt;a href=&#34;https://github.com/luau-lang/site/raw/master/logo.svg&#34;&gt;Luau logo&lt;/a&gt; is also encouraged when reasonable.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chromium/chromium</title>
    <updated>2025-07-20T01:41:04Z</updated>
    <id>tag:github.com,2025-07-20:/chromium/chromium</id>
    <link href="https://github.com/chromium/chromium" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official GitHub mirror of the Chromium source&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub Copilot Integration in Chromium&lt;/h1&gt; &#xA;&lt;p&gt;This directory provides instructions and prompts for integrating GitHub Copilot with the chromium codebase.&lt;/p&gt; &#xA;&lt;p&gt;This directory is currently in a prototyping state and may be removed in the future. As we add support for multiple coding IDE/agents, we will likely pull common prompts and instructions into a central directory with stubs for bespoke IDE/agent integration. Please check with your organization before using GitHub Copilot.&lt;/p&gt; &#xA;&lt;h2&gt;Where is copilot-instructions.md?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chromium/chromium/copilot-instructions.md&#34;&gt;&lt;code&gt;copilot-intructions.md&lt;/code&gt;&lt;/a&gt; is typically a single instruction file that contains default instructions for a workspace. These instructions are automatically included in every chat request.&lt;/p&gt; &#xA;&lt;p&gt;Until the prompt in &lt;code&gt;copilot-intructions.md&lt;/code&gt; is generally agreed upon for the chromium repo, this file is intentionally excluded from the repo, and added to the &lt;a href=&#34;https://raw.githubusercontent.com/chromium/chromium/.gitignore&#34;&gt;.gitignore&lt;/a&gt; for your customization.&lt;/p&gt; &#xA;&lt;p&gt;For generating your own &lt;code&gt;copilot-intructions.md&lt;/code&gt;, type &lt;code&gt;/create_copilot_instructions&lt;/code&gt; in GitHub Copilot to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Code Layout&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chromium/chromium/main/instructions/&#34;&gt;.github/instructions&lt;/a&gt;: Custom instructions for specific tasks. For example, you can create instruction files for different programming languages, frameworks, or project types. You can attach individual prompt files to a chat request, or you can configure them to be automatically included for specific files or folders with &lt;code&gt;applyTo&lt;/code&gt; syntax.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chromium/chromium/main/prompts/&#34;&gt;.github/prompts&lt;/a&gt;: Prompt files can be easily triggered from chat with &lt;code&gt;/&lt;/code&gt; and allow you to craft complete prompts in Markdown files. Unlike custom instructions that supplement your chat queries prompts, prompt files are standalone prompts that you can store within your workspace and share with others. With prompt files, you can create reusable templates for common tasks, store domain expertise in the codebase, and standardize AI interactions across your team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chromium/chromium/main/resources/&#34;&gt;.github/resources&lt;/a&gt;: Prompt files that are resources for use by other prompts and instructions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;User Specific Prompts&lt;/h2&gt; &#xA;&lt;p&gt;Users can create their own prompts or instructions that match the regex &lt;code&gt;.github/**/user_.md&lt;/code&gt; which is captured in the &lt;a href=&#34;https://raw.githubusercontent.com/chromium/chromium/.gitignore&#34;&gt;.gitignore&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing Guidelines&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;/git_commit_ghc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chromium/chromium/main/instructions/&#34;&gt;.github/instructions&lt;/a&gt;: Instructions that are automatically picked up using &lt;code&gt;applyTo&lt;/code&gt; syntax will have a much higher review bar then those without it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chromium/chromium/main/prompts/&#34;&gt;.github/prompts&lt;/a&gt;: All prompts should specify a &lt;code&gt;mode&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chromium/chromium/main/resources/&#34;&gt;.github/resources&lt;/a&gt;: All prompt resources should have an active reference or usecase a file in &lt;code&gt;instructions&lt;/code&gt; or &lt;code&gt;prompts&lt;/code&gt;, and should be cleaned up if their references are modified or removed.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>