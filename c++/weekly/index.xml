<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-19T01:59:21Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Atmosphere-NX/Atmosphere</title>
    <updated>2022-06-19T01:59:21Z</updated>
    <id>tag:github.com,2022-06-19:/Atmosphere-NX/Atmosphere</id>
    <link href="https://github.com/Atmosphere-NX/Atmosphere" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Atmosphère is a work-in-progress customized firmware for the Nintendo Switch.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Atmosphere-NX/Atmosphere/master/img/banner.png?raw=true&#34; alt=&#34;Banner&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv2-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;https://discordapp.com/invite/ZdqEhed&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/b4175720ede4f2621aa066ffbabb70ae30044679/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d446973636f72642d627269676874677265656e2e737667&#34; alt=&#34;Chat on Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Atmosphère is a work-in-progress customized firmware for the Nintendo Switch.&lt;/p&gt; &#xA;&lt;h1&gt;Components&lt;/h1&gt; &#xA;&lt;p&gt;Atmosphère consists of multiple components, each of which replaces/modifies a different component of the system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fusée: First-stage Loader, responsible for loading and validating stage 2 (custom TrustZone) plus package2 (Kernel/FIRM sysmodules), and patching them as needed. This replaces all functionality normally in Package1loader/NX Bootloader. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sept: Payload used to enable support for runtime key derivation on 7.0.0.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Exosphère: Customized TrustZone, to run a customized Secure Monitor&lt;/li&gt; &#xA; &lt;li&gt;Thermosphère: EL2 EmuNAND support, i.e. backing up and using virtualized/redirected NAND images&lt;/li&gt; &#xA; &lt;li&gt;Stratosphère: Custom Sysmodule(s), both Rosalina style to extend the kernel/provide new features, and of the loader reimplementation style to hook important system actions&lt;/li&gt; &#xA; &lt;li&gt;Troposphère: Application-level Horizon OS patches, used to implement desirable CFW features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Licensing&lt;/h1&gt; &#xA;&lt;p&gt;This software is licensed under the terms of the GPLv2, with exemptions for specific projects noted below.&lt;/p&gt; &#xA;&lt;p&gt;You can find a copy of the license in the &lt;a href=&#34;https://raw.githubusercontent.com/Atmosphere-NX/Atmosphere/master/LICENSE&#34;&gt;LICENSE file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Exemptions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/yuzu-emu/yuzu&#34;&gt;yuzu Nintendo Switch emulator&lt;/a&gt; and the &lt;a href=&#34;https://github.com/orgs/Ryujinx&#34;&gt;Ryujinx Team and Contributors&lt;/a&gt; are exempt from GPLv2 licensing. They are permitted, each at their individual discretion, to instead license any source code authored for the Atmosphère project as either GPLv2 or later or the &lt;a href=&#34;https://github.com/Atmosphere-NX/Atmosphere/raw/master/docs/licensing_exemptions/MIT_LICENSE&#34;&gt;MIT license&lt;/a&gt;. In doing so, they may alter, supplement, or entirely remove the copyright notice for each file they choose to relicense. Neither the Atmosphère project nor its individual contributors shall assert their moral rights against any of the aforementioned projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Nintendo&#34;&gt;Nintendo&lt;/a&gt; is exempt from GPLv2 licensing and may (at its option) instead license any source code authored for the Atmosphère project under the Zero-Clause BSD license.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;Atmosphère is currently being developed and maintained by &lt;strong&gt;SciresM&lt;/strong&gt;, &lt;strong&gt;TuxSH&lt;/strong&gt;, &lt;strong&gt;hexkyz&lt;/strong&gt;, and &lt;strong&gt;fincs&lt;/strong&gt;.&lt;br&gt; In no particular order, we credit the following for their invaluable contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;switchbrew&lt;/strong&gt; for the &lt;a href=&#34;https://github.com/switchbrew/libnx&#34;&gt;libnx&lt;/a&gt; project and the extensive &lt;a href=&#34;http://switchbrew.org&#34;&gt;documentation, research and tool development&lt;/a&gt; pertaining to the Nintendo Switch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;devkitPro&lt;/strong&gt; for the &lt;a href=&#34;https://devkitpro.org/&#34;&gt;devkitA64&lt;/a&gt; toolchain and libnx support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ReSwitched Team&lt;/strong&gt; for additional &lt;a href=&#34;https://reswitched.team/&#34;&gt;documentation, research and tool development&lt;/a&gt; pertaining to the Nintendo Switch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ChaN&lt;/strong&gt; for the &lt;a href=&#34;http://elm-chan.org/fsw/ff/00index_e.html&#34;&gt;FatFs&lt;/a&gt; module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Marcus Geelnard&lt;/strong&gt; for the &lt;a href=&#34;https://sourceforge.net/projects/bcl/files/bcl/bcl-1.2.0&#34;&gt;bcl-1.2.0&lt;/a&gt; library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;naehrwert&lt;/strong&gt; and &lt;strong&gt;st4rk&lt;/strong&gt; for the original &lt;a href=&#34;https://github.com/nwert/hekate&#34;&gt;hekate&lt;/a&gt; project and its hwinit code base.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CTCaer&lt;/strong&gt; for the continued &lt;a href=&#34;https://github.com/CTCaer/hekate&#34;&gt;hekate&lt;/a&gt; project&#39;s fork and the &lt;a href=&#34;https://github.com/CTCaer/minerva_tc&#34;&gt;minerva_tc&lt;/a&gt; project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;m4xw&lt;/strong&gt; for development of the &lt;a href=&#34;https://github.com/m4xw/emummc&#34;&gt;emuMMC&lt;/a&gt; project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Riley&lt;/strong&gt; for suggesting &#34;Atmosphere&#34; as a Horizon OS reimplementation+customization project name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;hedgeberg&lt;/strong&gt; for research and hardware testing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lioncash&lt;/strong&gt; for code cleanup and general improvements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;jaames&lt;/strong&gt; for designing and providing Atmosphère&#39;s graphical resources.&lt;/li&gt; &#xA; &lt;li&gt;Everyone who submitted entries for Atmosphère&#39;s &lt;a href=&#34;https://github.com/Atmosphere-NX/Atmosphere-splashes&#34;&gt;splash design contest&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;All those who actively contribute to the Atmosphère repository.&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>gabime/spdlog</title>
    <updated>2022-06-19T01:59:21Z</updated>
    <id>tag:github.com,2022-06-19:/gabime/spdlog</id>
    <link href="https://github.com/gabime/spdlog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast C++ logging library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;spdlog&lt;/h1&gt; &#xA;&lt;p&gt;Very fast, header-only/compiled, C++ logging library. &lt;a href=&#34;https://app.travis-ci.com/gabime/spdlog&#34;&gt;&lt;img src=&#34;https://app.travis-ci.com/gabime/spdlog.svg?branch=v1.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://ci.appveyor.com/project/gabime/spdlog&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/d2jnxclg20vd0o50?svg=true&amp;amp;branch=v1.x&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gabime/spdlog/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/gabime/spdlog.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h4&gt;Header only version&lt;/h4&gt; &#xA;&lt;p&gt;Copy the include &lt;a href=&#34;https://github.com/gabime/spdlog/tree/v1.x/include/spdlog&#34;&gt;folder&lt;/a&gt; to your build tree and use a C++11 compiler.&lt;/p&gt; &#xA;&lt;h4&gt;Static lib version (recommended - much faster compile times)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git clone https://github.com/gabime/spdlog.git&#xA;$ cd spdlog &amp;amp;&amp;amp; mkdir build &amp;amp;&amp;amp; cd build&#xA;$ cmake .. &amp;amp;&amp;amp; make -j&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;see example &lt;a href=&#34;https://github.com/gabime/spdlog/raw/v1.x/example/CMakeLists.txt&#34;&gt;CMakeLists.txt&lt;/a&gt; on how to use.&lt;/p&gt; &#xA;&lt;h2&gt;Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux, FreeBSD, OpenBSD, Solaris, AIX&lt;/li&gt; &#xA; &lt;li&gt;Windows (msvc 2013+, cygwin)&lt;/li&gt; &#xA; &lt;li&gt;macOS (clang 3.5+)&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Package managers:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debian: &lt;code&gt;sudo apt install libspdlog-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Homebrew: &lt;code&gt;brew install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;MacPorts: &lt;code&gt;sudo port install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD: &lt;code&gt;pkg install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fedora: &lt;code&gt;dnf install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gentoo: &lt;code&gt;emerge dev-libs/spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arch Linux: &lt;code&gt;pacman -S spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;vcpkg: &lt;code&gt;vcpkg install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;conan: &lt;code&gt;spdlog/[&amp;gt;=1.4.1]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;conda: &lt;code&gt;conda install -c conda-forge spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;build2: &lt;code&gt;depends: spdlog ^1.8.2&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very fast (see &lt;a href=&#34;https://raw.githubusercontent.com/gabime/spdlog/v1.x/#benchmarks&#34;&gt;benchmarks&lt;/a&gt; below).&lt;/li&gt; &#xA; &lt;li&gt;Headers only or compiled&lt;/li&gt; &#xA; &lt;li&gt;Feature rich formatting, using the excellent &lt;a href=&#34;https://github.com/fmtlib/fmt&#34;&gt;fmt&lt;/a&gt; library.&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous mode (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gabime/spdlog/wiki/3.-Custom-formatting&#34;&gt;Custom&lt;/a&gt; formatting.&lt;/li&gt; &#xA; &lt;li&gt;Multi/Single threaded loggers.&lt;/li&gt; &#xA; &lt;li&gt;Various log targets: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rotating log files.&lt;/li&gt; &#xA;   &lt;li&gt;Daily log files.&lt;/li&gt; &#xA;   &lt;li&gt;Console logging (colors supported).&lt;/li&gt; &#xA;   &lt;li&gt;syslog.&lt;/li&gt; &#xA;   &lt;li&gt;Windows event log.&lt;/li&gt; &#xA;   &lt;li&gt;Windows debugger (&lt;code&gt;OutputDebugString(..)&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Easily &lt;a href=&#34;https://github.com/gabime/spdlog/wiki/4.-Sinks#implementing-your-own-sink&#34;&gt;extendable&lt;/a&gt; with custom log targets.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Log filtering - log levels can be modified in runtime as well as in compile time.&lt;/li&gt; &#xA; &lt;li&gt;Support for loading log levels from argv or from environment var.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gabime/spdlog/v1.x/#backtrace-support&#34;&gt;Backtrace&lt;/a&gt; support - store debug messages in a ring buffer and display later on demand.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage samples&lt;/h2&gt; &#xA;&lt;h4&gt;Basic usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/spdlog.h&#34;&#xA;&#xA;int main() &#xA;{&#xA;    spdlog::info(&#34;Welcome to spdlog!&#34;);&#xA;    spdlog::error(&#34;Some error message with arg: {}&#34;, 1);&#xA;    &#xA;    spdlog::warn(&#34;Easy padding in numbers like {:08d}&#34;, 12);&#xA;    spdlog::critical(&#34;Support for int: {0:d};  hex: {0:x};  oct: {0:o}; bin: {0:b}&#34;, 42);&#xA;    spdlog::info(&#34;Support for floats {:03.2f}&#34;, 1.23456);&#xA;    spdlog::info(&#34;Positional args are {1} {0}..&#34;, &#34;too&#34;, &#34;supported&#34;);&#xA;    spdlog::info(&#34;{:&amp;lt;30}&#34;, &#34;left aligned&#34;);&#xA;    &#xA;    spdlog::set_level(spdlog::level::debug); // Set global log level to debug&#xA;    spdlog::debug(&#34;This message should be displayed..&#34;);    &#xA;    &#xA;    // change log pattern&#xA;    spdlog::set_pattern(&#34;[%H:%M:%S %z] [%n] [%^---%L---%$] [thread %t] %v&#34;);&#xA;    &#xA;    // Compile time log levels&#xA;    // define SPDLOG_ACTIVE_LEVEL to desired level&#xA;    SPDLOG_TRACE(&#34;Some trace message with param {}&#34;, 42);&#xA;    SPDLOG_DEBUG(&#34;Some debug message&#34;);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Create stdout/stderr logger object&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/spdlog.h&#34;&#xA;#include &#34;spdlog/sinks/stdout_color_sinks.h&#34;&#xA;void stdout_example()&#xA;{&#xA;    // create color multi threaded logger&#xA;    auto console = spdlog::stdout_color_mt(&#34;console&#34;);    &#xA;    auto err_logger = spdlog::stderr_color_mt(&#34;stderr&#34;);    &#xA;    spdlog::get(&#34;console&#34;)-&amp;gt;info(&#34;loggers can be retrieved from a global registry using the spdlog::get(logger_name)&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Basic file logger&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/sinks/basic_file_sink.h&#34;&#xA;void basic_logfile_example()&#xA;{&#xA;    try &#xA;    {&#xA;        auto logger = spdlog::basic_logger_mt(&#34;basic_logger&#34;, &#34;logs/basic-log.txt&#34;);&#xA;    }&#xA;    catch (const spdlog::spdlog_ex &amp;amp;ex)&#xA;    {&#xA;        std::cout &amp;lt;&amp;lt; &#34;Log init failed: &#34; &amp;lt;&amp;lt; ex.what() &amp;lt;&amp;lt; std::endl;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Rotating files&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/sinks/rotating_file_sink.h&#34;&#xA;void rotating_example()&#xA;{&#xA;    // Create a file rotating logger with 5mb size max and 3 rotated files&#xA;    auto max_size = 1048576 * 5;&#xA;    auto max_files = 3;&#xA;    auto logger = spdlog::rotating_logger_mt(&#34;some_logger_name&#34;, &#34;logs/rotating.txt&#34;, max_size, max_files);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Daily files&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;&#xA;#include &#34;spdlog/sinks/daily_file_sink.h&#34;&#xA;void daily_example()&#xA;{&#xA;    // Create a daily logger - a new file is created every day on 2:30am&#xA;    auto logger = spdlog::daily_logger_mt(&#34;daily_logger&#34;, &#34;logs/daily.txt&#34;, 2, 30);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Backtrace support&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Debug messages can be stored in a ring buffer instead of being logged immediately.&#xA;// This is useful in order to display debug logs only when really needed (e.g. when error happens).&#xA;// When needed, call dump_backtrace() to see them.&#xA;&#xA;spdlog::enable_backtrace(32); // Store the latest 32 messages in a buffer. Older messages will be dropped.&#xA;// or my_logger-&amp;gt;enable_backtrace(32)..&#xA;for(int i = 0; i &amp;lt; 100; i++)&#xA;{&#xA;  spdlog::debug(&#34;Backtrace message {}&#34;, i); // not logged yet..&#xA;}&#xA;// e.g. if some error happened:&#xA;spdlog::dump_backtrace(); // log them now! show the last 32 messages&#xA;&#xA;// or my_logger-&amp;gt;dump_backtrace(32)..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Periodic flush&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// periodically flush all *registered* loggers every 3 seconds:&#xA;// warning: only use if all your loggers are thread safe (&#34;_mt&#34; loggers)&#xA;spdlog::flush_every(std::chrono::seconds(3));&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Stopwatch&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Stopwatch support for spdlog&#xA;#include &#34;spdlog/stopwatch.h&#34;&#xA;void stopwatch_example()&#xA;{&#xA;    spdlog::stopwatch sw;    &#xA;    spdlog::debug(&#34;Elapsed {}&#34;, sw);&#xA;    spdlog::debug(&#34;Elapsed {:.3}&#34;, sw);       &#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Log binary data in hex&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// many types of std::container&amp;lt;char&amp;gt; types can be used.&#xA;// ranges are supported too.&#xA;// format flags:&#xA;// {:X} - print in uppercase.&#xA;// {:s} - don&#39;t separate each byte with space.&#xA;// {:p} - don&#39;t print the position on each line start.&#xA;// {:n} - don&#39;t split the output to lines.&#xA;// {:a} - show ASCII if :n is not set.&#xA;&#xA;#include &#34;spdlog/fmt/bin_to_hex.h&#34;&#xA;&#xA;void binary_example()&#xA;{&#xA;    auto console = spdlog::get(&#34;console&#34;);&#xA;    std::array&amp;lt;char, 80&amp;gt; buf;&#xA;    console-&amp;gt;info(&#34;Binary example: {}&#34;, spdlog::to_hex(buf));&#xA;    console-&amp;gt;info(&#34;Another binary example:{:n}&#34;, spdlog::to_hex(std::begin(buf), std::begin(buf) + 10));&#xA;    // more examples:&#xA;    // logger-&amp;gt;info(&#34;uppercase: {:X}&#34;, spdlog::to_hex(buf));&#xA;    // logger-&amp;gt;info(&#34;uppercase, no delimiters: {:Xs}&#34;, spdlog::to_hex(buf));&#xA;    // logger-&amp;gt;info(&#34;uppercase, no delimiters, no position info: {:Xsp}&#34;, spdlog::to_hex(buf));&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Logger with multi sinks - each with different format and log level&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;&#xA;// create logger with 2 targets with different log levels and formats.&#xA;// the console will show only warnings or errors, while the file will log all.&#xA;void multi_sink_example()&#xA;{&#xA;    auto console_sink = std::make_shared&amp;lt;spdlog::sinks::stdout_color_sink_mt&amp;gt;();&#xA;    console_sink-&amp;gt;set_level(spdlog::level::warn);&#xA;    console_sink-&amp;gt;set_pattern(&#34;[multi_sink_example] [%^%l%$] %v&#34;);&#xA;&#xA;    auto file_sink = std::make_shared&amp;lt;spdlog::sinks::basic_file_sink_mt&amp;gt;(&#34;logs/multisink.txt&#34;, true);&#xA;    file_sink-&amp;gt;set_level(spdlog::level::trace);&#xA;&#xA;    spdlog::logger logger(&#34;multi_sink&#34;, {console_sink, file_sink});&#xA;    logger.set_level(spdlog::level::debug);&#xA;    logger.warn(&#34;this should appear in both console and file&#34;);&#xA;    logger.info(&#34;this message should not appear in the console, only in the file&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Asynchronous logging&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/async.h&#34;&#xA;#include &#34;spdlog/sinks/basic_file_sink.h&#34;&#xA;void async_example()&#xA;{&#xA;    // default thread pool settings can be modified *before* creating the async logger:&#xA;    // spdlog::init_thread_pool(8192, 1); // queue with 8k items and 1 backing thread.&#xA;    auto async_file = spdlog::basic_logger_mt&amp;lt;spdlog::async_factory&amp;gt;(&#34;async_file_logger&#34;, &#34;logs/async_log.txt&#34;);&#xA;    // alternatively:&#xA;    // auto async_file = spdlog::create_async&amp;lt;spdlog::sinks::basic_file_sink_mt&amp;gt;(&#34;async_file_logger&#34;, &#34;logs/async_log.txt&#34;);   &#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Asynchronous logger with multi sinks&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/sinks/stdout_color_sinks.h&#34;&#xA;#include &#34;spdlog/sinks/rotating_file_sink.h&#34;&#xA;&#xA;void multi_sink_example2()&#xA;{&#xA;    spdlog::init_thread_pool(8192, 1);&#xA;    auto stdout_sink = std::make_shared&amp;lt;spdlog::sinks::stdout_color_sink_mt &amp;gt;();&#xA;    auto rotating_sink = std::make_shared&amp;lt;spdlog::sinks::rotating_file_sink_mt&amp;gt;(&#34;mylog.txt&#34;, 1024*1024*10, 3);&#xA;    std::vector&amp;lt;spdlog::sink_ptr&amp;gt; sinks {stdout_sink, rotating_sink};&#xA;    auto logger = std::make_shared&amp;lt;spdlog::async_logger&amp;gt;(&#34;loggername&#34;, sinks.begin(), sinks.end(), spdlog::thread_pool(), spdlog::async_overflow_policy::block);&#xA;    spdlog::register_logger(logger);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;User defined types&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// user defined types logging by implementing operator&amp;lt;&amp;lt;&#xA;#include &#34;spdlog/fmt/ostr.h&#34; // must be included&#xA;struct my_type&#xA;{&#xA;    int i;&#xA;    template&amp;lt;typename OStream&amp;gt;&#xA;    friend OStream &amp;amp;operator&amp;lt;&amp;lt;(OStream &amp;amp;os, const my_type &amp;amp;c)&#xA;    {&#xA;        return os &amp;lt;&amp;lt; &#34;[my_type i=&#34; &amp;lt;&amp;lt; c.i &amp;lt;&amp;lt; &#34;]&#34;;&#xA;    }&#xA;};&#xA;&#xA;void user_defined_example()&#xA;{&#xA;    spdlog::get(&#34;console&#34;)-&amp;gt;info(&#34;user defined type: {}&#34;, my_type{14});&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;User defined flags in the log pattern&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Log patterns can contain custom flags.&#xA;// the following example will add new flag &#39;%*&#39; - which will be bound to a &amp;lt;my_formatter_flag&amp;gt; instance.&#xA;#include &#34;spdlog/pattern_formatter.h&#34;&#xA;class my_formatter_flag : public spdlog::custom_flag_formatter&#xA;{&#xA;public:&#xA;    void format(const spdlog::details::log_msg &amp;amp;, const std::tm &amp;amp;, spdlog::memory_buf_t &amp;amp;dest) override&#xA;    {&#xA;        std::string some_txt = &#34;custom-flag&#34;;&#xA;        dest.append(some_txt.data(), some_txt.data() + some_txt.size());&#xA;    }&#xA;&#xA;    std::unique_ptr&amp;lt;custom_flag_formatter&amp;gt; clone() const override&#xA;    {&#xA;        return spdlog::details::make_unique&amp;lt;my_formatter_flag&amp;gt;();&#xA;    }&#xA;};&#xA;&#xA;void custom_flags_example()&#xA;{    &#xA;    auto formatter = std::make_unique&amp;lt;spdlog::pattern_formatter&amp;gt;();&#xA;    formatter-&amp;gt;add_flag&amp;lt;my_formatter_flag&amp;gt;(&#39;*&#39;).set_pattern(&#34;[%n] [%*] [%^%l%$] %v&#34;);&#xA;    spdlog::set_formatter(std::move(formatter));&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Custom error handler&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void err_handler_example()&#xA;{&#xA;    // can be set globally or per logger(logger-&amp;gt;set_error_handler(..))&#xA;    spdlog::set_error_handler([](const std::string &amp;amp;msg) { spdlog::get(&#34;console&#34;)-&amp;gt;error(&#34;*** LOGGER ERROR ***: {}&#34;, msg); });&#xA;    spdlog::get(&#34;console&#34;)-&amp;gt;info(&#34;some invalid message to trigger an error {}{}{}{}&#34;, 3);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;syslog&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/sinks/syslog_sink.h&#34;&#xA;void syslog_example()&#xA;{&#xA;    std::string ident = &#34;spdlog-example&#34;;&#xA;    auto syslog_logger = spdlog::syslog_logger_mt(&#34;syslog&#34;, ident, LOG_PID);&#xA;    syslog_logger-&amp;gt;warn(&#34;This is warning that will end up in syslog.&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Android example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/sinks/android_sink.h&#34;&#xA;void android_example()&#xA;{&#xA;    std::string tag = &#34;spdlog-android&#34;;&#xA;    auto android_logger = spdlog::android_logger_mt(&#34;android&#34;, tag);&#xA;    android_logger-&amp;gt;critical(&#34;Use \&#34;adb shell logcat\&#34; to view this message.&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Load log levels from env variable or from argv&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/cfg/env.h&#34;&#xA;int main (int argc, char *argv[])&#xA;{&#xA;    spdlog::cfg::load_env_levels();&#xA;    // or from command line:&#xA;    // ./example SPDLOG_LEVEL=info,mylogger=trace&#xA;    // #include &#34;spdlog/cfg/argv.h&#34; // for loading levels from argv&#xA;    // spdlog::cfg::load_argv_levels(argc, argv);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So then you can:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export SPDLOG_LEVEL=info,mylogger=trace&#xA;$ ./example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Log file open/close event handlers&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// You can get callbacks from spdlog before/after log file has been opened or closed. &#xA;// This is useful for cleanup procedures or for adding someting the start/end of the log files.&#xA;void file_events_example()&#xA;{&#xA;    // pass the spdlog::file_event_handlers to file sinks for open/close log file notifications&#xA;    spdlog::file_event_handlers handlers;&#xA;    handlers.before_open = [](spdlog::filename_t filename) { spdlog::info(&#34;Before opening {}&#34;, filename); };&#xA;    handlers.after_open = [](spdlog::filename_t filename, std::FILE *fstream) { fputs(&#34;After opening\n&#34;, fstream); };&#xA;    handlers.before_close = [](spdlog::filename_t filename, std::FILE *fstream) { fputs(&#34;Before closing\n&#34;, fstream); };&#xA;    handlers.after_close = [](spdlog::filename_t filename) { spdlog::info(&#34;After closing {}&#34;, filename); };&#xA;    auto my_logger = spdlog::basic_logger_st(&#34;some_logger&#34;, &#34;logs/events-sample.txt&#34;, true, handlers);        &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Replace the Default Logger&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void replace_default_logger_example()&#xA;{&#xA;    auto new_logger = spdlog::basic_logger_mt(&#34;new_default_logger&#34;, &#34;logs/new-default-log.txt&#34;, true);&#xA;    spdlog::set_default_logger(new_logger);&#xA;    spdlog::info(&#34;new logger log message&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Below are some &lt;a href=&#34;https://github.com/gabime/spdlog/raw/v1.x/bench/bench.cpp&#34;&gt;benchmarks&lt;/a&gt; done in Ubuntu 64 bit, Intel i7-4770 CPU @ 3.40GHz&lt;/p&gt; &#xA;&lt;h4&gt;Synchronous mode&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;[info] **************************************************************&#xA;[info] Single thread, 1,000,000 iterations&#xA;[info] **************************************************************&#xA;[info] basic_st         Elapsed: 0.17 secs        5,777,626/sec&#xA;[info] rotating_st      Elapsed: 0.18 secs        5,475,894/sec&#xA;[info] daily_st         Elapsed: 0.20 secs        5,062,659/sec&#xA;[info] empty_logger     Elapsed: 0.07 secs       14,127,300/sec&#xA;[info] **************************************************************&#xA;[info] C-string (400 bytes). Single thread, 1,000,000 iterations&#xA;[info] **************************************************************&#xA;[info] basic_st         Elapsed: 0.41 secs        2,412,483/sec&#xA;[info] rotating_st      Elapsed: 0.72 secs        1,389,196/sec&#xA;[info] daily_st         Elapsed: 0.42 secs        2,393,298/sec&#xA;[info] null_st          Elapsed: 0.04 secs       27,446,957/sec&#xA;[info] **************************************************************&#xA;[info] 10 threads, competing over the same logger object, 1,000,000 iterations&#xA;[info] **************************************************************&#xA;[info] basic_mt         Elapsed: 0.60 secs        1,659,613/sec&#xA;[info] rotating_mt      Elapsed: 0.62 secs        1,612,493/sec&#xA;[info] daily_mt         Elapsed: 0.61 secs        1,638,305/sec&#xA;[info] null_mt          Elapsed: 0.16 secs        6,272,758/sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Asynchronous mode&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;[info] -------------------------------------------------&#xA;[info] Messages     : 1,000,000&#xA;[info] Threads      : 10&#xA;[info] Queue        : 8,192 slots&#xA;[info] Queue memory : 8,192 x 272 = 2,176 KB &#xA;[info] -------------------------------------------------&#xA;[info] &#xA;[info] *********************************&#xA;[info] Queue Overflow Policy: block&#xA;[info] *********************************&#xA;[info] Elapsed: 1.70784 secs     585,535/sec&#xA;[info] Elapsed: 1.69805 secs     588,910/sec&#xA;[info] Elapsed: 1.7026 secs      587,337/sec&#xA;[info] &#xA;[info] *********************************&#xA;[info] Queue Overflow Policy: overrun&#xA;[info] *********************************&#xA;[info] Elapsed: 0.372816 secs    2,682,285/sec&#xA;[info] Elapsed: 0.379758 secs    2,633,255/sec&#xA;[info] Elapsed: 0.373532 secs    2,677,147/sec&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be found in the &lt;a href=&#34;https://github.com/gabime/spdlog/wiki/1.-QuickStart&#34;&gt;wiki&lt;/a&gt; pages.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://www.jetbrains.com/?from=spdlog&#34;&gt;JetBrains&lt;/a&gt; for donating product licenses to help develop &lt;strong&gt;spdlog&lt;/strong&gt; &lt;a href=&#34;https://www.jetbrains.com/?from=spdlog&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gabime/spdlog/v1.x/logos/jetbrains-variant-4.svg?sanitize=true&#34; width=&#34;94&#34; align=&#34;center&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Light-City/CPlusPlusThings</title>
    <updated>2022-06-19T01:59:21Z</updated>
    <id>tag:github.com,2022-06-19:/Light-City/CPlusPlusThings</id>
    <link href="https://github.com/Light-City/CPlusPlusThings" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C++那些事&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C++ 那些事&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/README_EN.md&#34;&gt;English version is here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;感谢各位对《C++ 那些事》的支持，现将内容也同步至网站，可以打开网站直接阅读~欢迎大家 star、转发、PR。&lt;/p&gt; &#xA;&lt;p&gt;因服务器到期，暂时关闭以下站点，请大家阅读仓库即可，感谢支持。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;del&gt;&lt;a href=&#34;https://light-city.club/sc/&#34;&gt;直通点&lt;/a&gt;&lt;/del&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;关于作者&lt;/h3&gt; &#xA;&lt;p&gt;公众号已开放两大入口，分别是专辑与菜单，可以直接在微信公众号上阅读《C++ 那些事》内容，配上该仓库的代码，将会非常的爽，建议大家关注一波。&lt;/p&gt; &#xA;&lt;p&gt;个人公众号：guangcity&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://light-city.club/sc/assets/images/wechat.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;欢迎大家反馈及 C++ 交流，本人在微信创建了 C++ 那些事交流群，优质的 C++ 资源交流区，期待大家关注上面公众号，点击公众号右下角-&amp;gt;联系我，拉你入群。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;另外，下面是我自己建立的知识星球，会带大家做一些小项目以及源码解读等方面成长。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.hualigs.cn/image/60a24728bb736.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;项目运行&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;代码环境&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Ubuntu 18.04&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;编辑工具&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;CLion&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;编译器&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;gcc/g++&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;尽量用 g++，因为一开始我用的 vim 写的，所以纯 g++，后来用编译器 CLion，部分有 CMakeLists.txt 文件，直接导入就行，后面会更新这个文件包含整个项目，持续关注~&lt;/p&gt; &#xA;&lt;h3&gt;0.项目概要&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;中文名：&lt;strong&gt;C++ 那些事&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;英文名：&lt;strong&gt;Stories About C Plus Plus&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这是一个适合初学者从&lt;u&gt;&lt;strong&gt;入门到进阶&lt;/strong&gt;&lt;/u&gt;的仓库，解决了&lt;u&gt;&lt;strong&gt;面试者与学习者&lt;/strong&gt;&lt;/u&gt;想要&lt;u&gt;&lt;strong&gt;深入 C++&lt;/strong&gt;&lt;/u&gt; 及如何&lt;u&gt;&lt;strong&gt;入坑 C++&lt;/strong&gt;&lt;/u&gt; 的问题。除此之外，本仓库拓展了更加深入的源码分析，多线程并发等的知识，是一个比较全面的 C++ 学习从入门到进阶提升的仓库。&lt;/p&gt; &#xA;&lt;h3&gt;1.基础进阶&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/const&#34;&gt;&lt;code&gt;const&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/static&#34;&gt;&lt;code&gt;static&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/this&#34;&gt;&lt;code&gt;this&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/inline&#34;&gt;&lt;code&gt;inline&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/sizeof&#34;&gt;&lt;code&gt;sizeof&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/func_pointer&#34;&gt;函数指针那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/abstract&#34;&gt;纯虚函数和抽象类那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/vptr_vtable&#34;&gt;&lt;code&gt;vptr_vtable&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/virtual&#34;&gt;&lt;code&gt;virtual&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/volatile&#34;&gt;&lt;code&gt;volatile&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/assert&#34;&gt;&lt;code&gt;assert&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/bit&#34;&gt;位域那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/extern&#34;&gt;&lt;code&gt;extern&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/struct&#34;&gt;&lt;code&gt;struct&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/struct_class&#34;&gt;&lt;code&gt;struct&lt;/code&gt; 与 &lt;code&gt;class&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/union&#34;&gt;&lt;code&gt;union&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/c_poly&#34;&gt;&lt;code&gt;c&lt;/code&gt; 实现 &lt;code&gt;c++&lt;/code&gt; 多态那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/explicit&#34;&gt;&lt;code&gt;explicit&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/friend&#34;&gt;&lt;code&gt;friend&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/using&#34;&gt;&lt;code&gt;using&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/maohao&#34;&gt;&lt;code&gt;::&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/enum&#34;&gt;&lt;code&gt;enum&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/decltype&#34;&gt;&lt;code&gt;decltype&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/pointer_refer&#34;&gt;引用与指针那些事&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/macro&#34;&gt;宏那些事&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.实战系列&lt;/h3&gt; &#xA;&lt;h4&gt;2.1 &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice&#34;&gt;10 日狂练&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day1&#34;&gt;day1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;基本 c++ 语法&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day2&#34;&gt;day2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;递归、结构体、枚举、静态变量等&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day3&#34;&gt;day3&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;函数&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day4&#34;&gt;day4&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;函数深入&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day5&#34;&gt;day5&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;继承多态&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day6&#34;&gt;day6&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;虚函数、抽象类&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day7&#34;&gt;day7&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;运算符重载&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day8&#34;&gt;day8&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;模板与 STL&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day9&#34;&gt;day9&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;异常&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day10&#34;&gt;day10&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;文件与流&lt;/p&gt; &#xA;&lt;h4&gt;2.2 &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/&#34;&gt;重点实战练习&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;├── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E4%B8%AD%E6%8B%AC%E5%8F%B7%E9%87%8D%E8%BD%BD.cpp&#34;&gt;中括号重载.cpp&lt;/a&gt; ├── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E6%97%B6%E9%92%9F++%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD.cpp&#34;&gt;时钟++运算符重载.cpp&lt;/a&gt; ├── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E4%B9%8B%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2.cpp&#34;&gt;运算符重载之强制转换.cpp&lt;/a&gt; └── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E9%87%8D%E8%BD%BD%E5%9C%86%E6%8B%AC%E5%8F%B7%E7%9A%84%E6%97%B6%E9%92%9F.cpp&#34;&gt;重载圆括号的时钟.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;├── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF.cpp&#34;&gt;函数模板.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;├── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84.cpp&#34;&gt;动态数组.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;├── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E5%AD%97%E5%85%B8%E6%8F%92%E5%85%A5%E4%B8%8E%E6%9F%A5%E6%89%BE.cpp&#34;&gt;字典插入与查找.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;├── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7.cpp&#34;&gt;异常捕获.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;├── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E7%B1%BB%E6%A8%A1%E6%9D%BF%E4%B9%8B%E6%A0%88.cpp&#34;&gt;类模板之栈.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;├── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E7%B1%BB%E6%A8%A1%E6%9D%BF%E7%89%B9%E5%8C%96%E4%B9%8B%E6%95%B0%E7%BB%84.cpp&#34;&gt;类模板特化之数组.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;├── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%B0%81%E8%A3%85.cpp&#34;&gt;继承与封装.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;├── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E7%BB%BC%E5%90%88%E9%A2%98.cpp&#34;&gt;读写文件综合题.cpp&lt;/a&gt; ├── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD.cpp&#34;&gt;输入输出运算符重载.cpp&lt;/a&gt; ├── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E9%87%8D%E8%BD%BD.cpp&#34;&gt;输入输出重载.cpp&lt;/a&gt; ├── &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F.cpp&#34;&gt;输出格式.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3.&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0&#34;&gt;C++2.0 新特性&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;3.0 概况&lt;/h4&gt; &#xA;&lt;p&gt;C++2.0 是一个简称，意为「现代 C++」，包括 C++11/14/17/20。&lt;/p&gt; &#xA;&lt;h4&gt;3.1 &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11&#34;&gt;C++11 新特性&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/variadic&#34;&gt;Variadic Templates&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Spaces in Template Expressions&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;vector&amp;lt;list&amp;lt;int&amp;gt; &amp;gt; //ok in each C++ version&#xA;vector&amp;lt;list&amp;lt;int&amp;gt;&amp;gt; // before c++ 11 error error: ‘&amp;gt;&amp;gt;’ should be ‘&amp;gt; &amp;gt;’ within a nested template argument list,c++11后可以正常通过&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/nullptr.cpp&#34;&gt;nullptr and nullptr_t&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/auto.cpp&#34;&gt;Automatic Type Deduction with auto&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/uniform_initialization.cpp&#34;&gt;Uniform Initialization &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/initializer.cpp&#34;&gt;initializer_list&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/explicit.cpp&#34;&gt;explicit for ctors taking more than one argument&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/auto.cpp&#34;&gt;range-based for statement&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;for(decl:col) {&#xA;    statement&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/default_delete.cpp&#34;&gt;=default,=delete&lt;/a&gt;&lt;/p&gt; &lt;p&gt;如果你自行定义了一个 &lt;code&gt;ctor&lt;/code&gt;, 那么编译器就不会给你一个 &lt;code&gt;default ctor&lt;/code&gt; 如果强制加上 &lt;code&gt;=default&lt;/code&gt;, 就可以重新获得并使用 &lt;code&gt;default ctor&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alias(化名) Template (template typedef)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/alias.cpp&#34;&gt;alias.cpp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/template_template.cpp&#34;&gt;template_template.cpp&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/template_template.cpp&#34;&gt;template template parameter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/type_alias.cpp&#34;&gt;type alias&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/noexcept.cpp&#34;&gt;noexcept&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/override.cpp&#34;&gt;override&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/final.cpp&#34;&gt;final&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/decltype.cpp&#34;&gt;decltype&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/lambda.cpp&#34;&gt;lambda&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/rvalue.cpp&#34;&gt;Rvalue reference&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/move.cpp&#34;&gt;move aware class&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;容器-结构与分类&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(1) 序列式容器包括：&lt;code&gt;array&lt;/code&gt;(C++2.0 新引入),&lt;code&gt;vector&lt;/code&gt;,&lt;code&gt;deque&lt;/code&gt;,&lt;code&gt;list&lt;/code&gt;,&lt;code&gt;forward_list&lt;/code&gt;(C++2.0 新引入)&lt;/li&gt; &#xA;   &lt;li&gt;(2) 关联式容器包括：&lt;code&gt;set/multiset&lt;/code&gt;,&lt;code&gt;map/multimap&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;(3) 无序容器(C++2.0 新引入,更换原先 &lt;code&gt;hash_xxx&lt;/code&gt; 为 &lt;code&gt;unordered_xxx&lt;/code&gt;)包括：&lt;code&gt;unordered_map/unordered_multimap,unordered_set/unordered_multiset&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/hash.cpp&#34;&gt;Hash Function&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/c++2.0/c++11/tuple.cpp&#34;&gt;tuple&lt;/a&gt;&lt;/p&gt; &lt;p&gt;学习资料：&lt;a href=&#34;https://www.bilibili.com/video/av51863195?from=search&amp;amp;seid=3610634846288253061&#34;&gt;https://www.bilibili.com/video/av51863195?from=search&amp;amp;seid=3610634846288253061&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;3.2 C++14/17/20&lt;/h4&gt; &#xA;&lt;p&gt;待更新...&lt;/p&gt; &#xA;&lt;h3&gt;4.设计模式&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/design_pattern/singleton&#34;&gt;单例模式&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/design_pattern/producer_consumer&#34;&gt;生产消费者模式&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;5. &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl&#34;&gt;STL 源码剖析&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;STL 源码剖析：gcc 4.9.1&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/array.md&#34;&gt;array&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/deque.md&#34;&gt;deque&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/queue_stack.md&#34;&gt;queue and stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/list.md&#34;&gt;list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/vector.md&#34;&gt;vector&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/typename.md&#34;&gt;typename&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/traits.md&#34;&gt;traits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/iterator.md&#34;&gt;iterator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/%E8%B0%88%E8%B0%88STL%E8%AE%BE%E8%AE%A1%E4%B9%8BEBO%E4%BC%98%E5%8C%96.md&#34;&gt;谈谈 STL 设计之 EBO 优化&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/rb_tree.md&#34;&gt;rb_tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/set_multiset.md&#34;&gt;set and multiset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/map_multimap.md&#34;&gt;map and multimap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/hashtable.md&#34;&gt;hashtable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/myhashtable.md&#34;&gt;myhashtable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/unordered_map.md&#34;&gt;unordered_map&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;6. &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/concurrency&#34;&gt;并发编程&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;6.1 C++ Concurrency in Action&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/concurrency/concurrency_v1/chapter1&#34;&gt;第一章&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/concurrency/concurrency_v1/chapter2&#34;&gt;第二章&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;学习资料：&lt;a href=&#34;https://downdemo.gitbook.io/cpp-concurrency-in-action-2ed/&#34;&gt;https://downdemo.gitbook.io/cpp-concurrency-in-action-2ed/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;6.2 多线程与多进程&lt;/h4&gt; &#xA;&lt;h5&gt;6.2.1 Threading In C++&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/concurrency/Threading_In_CPlusPlus/1.thread&#34;&gt;介绍&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/concurrency/Threading_In_CPlusPlus/2.create_type&#34;&gt;创建线程的五种类型&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/concurrency/Threading_In_CPlusPlus/3.join_detach&#34;&gt;Join 与 Detachs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/concurrency/Threading_In_CPlusPlus/4.mutex&#34;&gt;mutex in C++ Threading&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;学习自：&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eZ8yKZo-PGw&amp;amp;list=PLk6CEY9XxSIAeK-EAh3hB4fgNvYkYmghp&amp;amp;index=4&#34;&gt;https://www.youtube.com/watch?v=eZ8yKZo-PGw&amp;amp;list=PLk6CEY9XxSIAeK-EAh3hB4fgNvYkYmghp&amp;amp;index=4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;7. &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/codingStyleIdioms&#34;&gt;C++ 惯用法&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h5&gt;你最喜欢的 c++ 编程风格惯用法是什么?&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/codingStyleIdioms/1_classInitializers&#34;&gt;1.类初始化列表&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/codingStyleIdioms/2_enumclass_namespace&#34;&gt;2.枚举类替换命名空间&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/codingStyleIdioms/3_RAII&#34;&gt;3.RAII (资源获取即初始化)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/codingStyleIdioms/4_copy-swap&#34;&gt;4.copy and swap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/codingStyleIdioms/5_pImpl&#34;&gt;5.pImpl (指针指向具体实现)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;8.学习课程&lt;/h3&gt; &#xA;&lt;h4&gt;8.1 &lt;a href=&#34;https://time.geekbang.org/channel/home&#34;&gt;极客时间《现代 C++ 实战 30 讲》&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/RAII&#34;&gt;堆、栈、RAII：C++ 里该如何管理资源？&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_++_30/RAII/heap.cpp&#34;&gt;堆&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/RAII/stack.cpp&#34;&gt;栈&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/RAII/RAII.cpp&#34;&gt;RAII&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/smart_ptr&#34;&gt;自己动手，实现 C++ 的智能指针&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/smart_ptr/auto_scope.cpp&#34;&gt;auto_ptr、scope_ptr&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/smart_ptr/unique_ptr.cpp&#34;&gt;unique_ptr&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/smart_ptr/shared_ptr.cpp&#34;&gt;shared_ptr&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/reference&#34;&gt;右值和移动究竟解决了什么问题？&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/reference/reference.cpp&#34;&gt;左值与右值&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/reference/lifetime.cpp&#34;&gt;延长声明周期&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/reference/collapses.cpp&#34;&gt;引用折叠&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/reference/forward.cpp&#34;&gt;完美转发&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/reference/don&#39;treturnReference.cpp&#34;&gt;不要返回本地变量的引用&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/container1&#34;&gt;容器 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/container2&#34;&gt;容器 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/exception&#34;&gt;异常&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/literalAssert&#34;&gt;字面量、静态断言和成员函数说明符&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/returnObj&#34;&gt;是不是应该返回对象？&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/compilerpoly&#34;&gt;编译期多态：泛型编程和模板入门&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/compilercompute&#34;&gt;译期能做些什么？一个完整的计算世界&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/SFINAE&#34;&gt;SFINAE：不是错误的替换失败是怎么回事?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/constexpr&#34;&gt;constexpr：一个常态的世界&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/functionLambda&#34;&gt;函数对象和 lambda：进入函数式编程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_C++_30/memorymodel_atomic&#34;&gt;内存模型和 atomic：理解并发的复杂性&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;9.工具篇&lt;/h3&gt; &#xA;&lt;h4&gt;9.1 &lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/tool/output&#34;&gt;容器快捷输出工具&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;对吴老师的代码进行了修改，&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/tool/output/output_container.h&#34;&gt;点击此处直通代码&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;输入：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;map&amp;lt;int, int&amp;gt; mp{&#xA;            {1, 1},&#xA;            {2, 4},&#xA;            {3, 9}};&#xA;    cout &amp;lt;&amp;lt; mp &amp;lt;&amp;lt; endl;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;输出结果显示：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;{ 1 =&amp;gt; 1, 2 =&amp;gt; 4, 3 =&amp;gt; 9 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;9.2 像 Python 一样简单输出（Jupyter Notebook）&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/tool/%E5%83%8FPython%E4%B8%80%E6%A0%B7%E7%8E%A9CC++.md&#34;&gt;像 Python 一样玩 C/C++&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;9.3 观察编译过程变化&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cppinsights.io/&#34;&gt;https://cppinsights.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;9.4 C++ 的 Debug 工具 dbg-macro&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/tool/C++%E7%9A%84Debug%E5%B7%A5%E5%85%B7dbg-macro.md&#34;&gt;C++ 的 Debug 工具 dbg-macro&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;9.5 在 Linux 上的 Debug 工具 rr - 拥有回到过去的能力&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/tool/%E7%94%A8rr%E6%9D%A5%E8%BF%9B%E8%A1%8Cdebug.md&#34;&gt;用 rr 来进行 debug&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;10.拓展部分&lt;/h3&gt; &#xA;&lt;h4&gt;10.1 一些问题&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/extension/some_problem/string_int.md&#34;&gt;C++ 中如何将 string 类型转换为 int 类型？&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;11.贡献者&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;贡献人&lt;/th&gt; &#xA;   &lt;th&gt;地址&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;光城&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Light-City&#34;&gt;https://github.com/Light-City&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ChungZH&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ChungZH&#34;&gt;https://github.com/ChungZH&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xliu79&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/xliu79&#34;&gt;https://github.com/xliu79&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;12.赞助我&lt;/h3&gt; &#xA;&lt;p&gt;如果觉得不错，赞助我吧~&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34; style=&#34;height=200 width=&#34; 200&#34;&gt; &lt;img src=&#34;https://light-city.club/sc/assets/images/alipay.jpg&#34; height=&#34;200&#34; width=&#34;200&#34;&gt;&lt;br&gt; 支付宝 &lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34; style=&#34;height=200 width=&#34; 200&#34;&gt; &lt;img src=&#34;https://light-city.club/sc/assets/images/wechat.png&#34; height=&#34;200&#34; width=&#34;200&#34;&gt;&lt;br&gt; 微信 &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>