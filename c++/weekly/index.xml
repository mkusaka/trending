<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-26T02:01:04Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rui314/mold</title>
    <updated>2022-06-26T02:01:04Z</updated>
    <id>tag:github.com,2022-06-26:/rui314/mold</id>
    <link href="https://github.com/rui314/mold" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mold: A Modern Linker&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mold: A Modern Linker&lt;/h1&gt; &#xA;&lt;p&gt;mold is a faster drop-in replacement for existing Unix linkers. It is several times faster than the LLVM lld linker, the second-fastest open-source linker which I originally created a few years ago. mold is designed to increase developer productivity by reducing build time, especially in rapid debug-edit-rebuild cycles.&lt;/p&gt; &#xA;&lt;p&gt;Here is a performance comparison of GNU gold, LLVM lld, and mold for linking final debuginfo-enabled executables of major large programs on a simulated 8-core 16-threads machine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rui314/mold/main/docs/comparison.png&#34; alt=&#34;Link speed comparison&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Program (linker output size)&lt;/th&gt; &#xA;   &lt;th&gt;GNU gold&lt;/th&gt; &#xA;   &lt;th&gt;LLVM lld&lt;/th&gt; &#xA;   &lt;th&gt;mold&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chrome 96 (1.89 GiB)&lt;/td&gt; &#xA;   &lt;td&gt;53.86s&lt;/td&gt; &#xA;   &lt;td&gt;11.74s&lt;/td&gt; &#xA;   &lt;td&gt;2.21s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clang 13 (3.18 GiB)&lt;/td&gt; &#xA;   &lt;td&gt;64.12s&lt;/td&gt; &#xA;   &lt;td&gt;5.82s&lt;/td&gt; &#xA;   &lt;td&gt;2.90s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Firefox 89 libxul (1.64 GiB)&lt;/td&gt; &#xA;   &lt;td&gt;32.95s&lt;/td&gt; &#xA;   &lt;td&gt;6.80s&lt;/td&gt; &#xA;   &lt;td&gt;1.42s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;mold is so fast that it is only 2x &lt;em&gt;slower&lt;/em&gt; than &lt;code&gt;cp&lt;/code&gt; on the same machine. Feel free to &lt;a href=&#34;https://github.com/rui314/mold/issues&#34;&gt;file a bug&lt;/a&gt; if you find mold is not faster than other linkers.&lt;/p&gt; &#xA;&lt;p&gt;mold currently supports x86-64, i386, ARM32, ARM64 and 64-bit RISC-V.&lt;/p&gt; &#xA;&lt;h2&gt;Why does the speed of linking matter?&lt;/h2&gt; &#xA;&lt;p&gt;If you are using a compiled language such as C, C++ or Rust, a build consists of two phases. In the first phase, a compiler compiles source files into object files (&lt;code&gt;.o&lt;/code&gt; files). In the second phase, a linker takes all object files to combine them into a single executable or a shared library file.&lt;/p&gt; &#xA;&lt;p&gt;The second phase takes a long time if your build output is large. mold can make it faster, saving your time and keeping you from being distracted while waiting for a long build to finish. The difference is most noticeable when you are in rapid debug-edit-rebuild cycles.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Binary packages for the following systems are currently available.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/mold/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/mold.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;mold is written in C++20, so if you build mold yourself, you need a recent version of a C++ compiler and a C++ standard library. GCC 10.2 or Clang 12.0.0 (or later) as well as libstdc++ 10 or libc++ 7 (or later) are recommended.&lt;/p&gt; &#xA;&lt;h3&gt;Install dependencies&lt;/h3&gt; &#xA;&lt;p&gt;To install build dependencies, run &lt;code&gt;./install-build-deps.sh&lt;/code&gt; in this directory. It recognizes your Linux distribution and tries to install necessary packages. You may want to run it as root.&lt;/p&gt; &#xA;&lt;h3&gt;Compile mold&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/rui314/mold.git&#xA;cd mold&#xA;git checkout v1.3.0&#xA;make -j$(nproc) CXX=clang++&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may need to pass a C++20 compiler command name to &lt;code&gt;make&lt;/code&gt;. In the above case, &lt;code&gt;clang++&lt;/code&gt; is passed. If it doesn&#39;t work for you, try a specific version of a compiler such as &lt;code&gt;g++-10&lt;/code&gt; or &lt;code&gt;clang++-12&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;mold&lt;/code&gt; is installed to &lt;code&gt;/usr/local/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t use a recent enough Linux distribution, or if for any reason &lt;code&gt;make&lt;/code&gt; in the above commands doesn&#39;t work for you, you can use Docker to build it in a Docker environment. To do so, just run &lt;code&gt;./dist.sh&lt;/code&gt; in this directory instead of running &lt;code&gt;make -j$(nproc)&lt;/code&gt;. The shell script pulls a Docker image, builds mold and auxiliary files inside it, and packs them into a single tar file &lt;code&gt;mold-$version-$arch-linux.tar.gz&lt;/code&gt;. You can extract the tar file anywhere and use &lt;code&gt;mold&lt;/code&gt; executable in it.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;A classic way to use mold&lt;/summary&gt; &#xA; &lt;p&gt;On Unix, the linker command (which is usually &lt;code&gt;/usr/bin/ld&lt;/code&gt;) is invoked indirectly by the compiler driver (which is usually &lt;code&gt;cc&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt; or &lt;code&gt;clang&lt;/code&gt;), which is typically in turn indirectly invoked by &lt;code&gt;make&lt;/code&gt; or some other build system command.&lt;/p&gt; &#xA; &lt;p&gt;If you can specify an additional command line option to your compiler driver by modifying build system&#39;s config files, add one of the following flags to use &lt;code&gt;mold&lt;/code&gt; instead of &lt;code&gt;/usr/bin/ld&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Clang: pass &lt;code&gt;-fuse-ld=mold&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;GCC 12.1.0 or later: pass &lt;code&gt;-fuse-ld=mold&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;GCC before 12.1.0: &lt;code&gt;-fuse-ld&lt;/code&gt; does not accept &lt;code&gt;mold&lt;/code&gt; as a valid argument, so you need to use &lt;code&gt;-B&lt;/code&gt; option instead. &lt;code&gt;-B&lt;/code&gt; is an option to tell GCC where to look for external commands such as &lt;code&gt;ld&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you have installed mold with &lt;code&gt;make install&lt;/code&gt;, there should be a directory named &lt;code&gt;/usr/libexec/mold&lt;/code&gt; (or &lt;code&gt;/usr/local/libexec/mold&lt;/code&gt;, depending on your &lt;code&gt;$PREFIX&lt;/code&gt;), and &lt;code&gt;ld&lt;/code&gt; command should be there. The &lt;code&gt;ld&lt;/code&gt; is actually a symlink to &lt;code&gt;mold&lt;/code&gt;. So, all you need is to pass &lt;code&gt;-B/usr/libexec/mold&lt;/code&gt; (or &lt;code&gt;-B/usr/local/libexec/mold&lt;/code&gt;) to GCC.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;If you haven&#39;t installed &lt;code&gt;mold&lt;/code&gt; to any &lt;code&gt;$PATH&lt;/code&gt;, you can still pass &lt;code&gt;-fuse-ld=/absolute/path/to/mold&lt;/code&gt; to clang to use mold. GCC does not take an absolute path as an argument for &lt;code&gt;-fuse-ld&lt;/code&gt; though.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;If you are using Rust&lt;/summary&gt; &#xA; &lt;p&gt;Create &lt;code&gt;.cargo/config.toml&lt;/code&gt; in your project directory with the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;[target.x86_64-unknown-linux-gnu]&#xA;linker = &#34;clang&#34;&#xA;rustflags = [&#34;-C&#34;, &#34;link-arg=-fuse-ld=/path/to/mold&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;where &lt;code&gt;/path/to/mold&lt;/code&gt; is an absolute path to &lt;code&gt;mold&lt;/code&gt; exectuable. Please make sure you have installed &lt;code&gt;clang&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;If you want to use mold for all projects, put the above snippet to &lt;code&gt;~/.cargo/config.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;mold -run&lt;/summary&gt; &#xA; &lt;p&gt;It is sometimes very hard to pass an appropriate command line option to &lt;code&gt;cc&lt;/code&gt; to specify an alternative linker. To deal with the situation, mold has a feature to intercept all invocations of &lt;code&gt;ld&lt;/code&gt;, &lt;code&gt;ld.lld&lt;/code&gt; or &lt;code&gt;ld.gold&lt;/code&gt; and redirect it to itself. To use the feature, run &lt;code&gt;make&lt;/code&gt; (or another build command) as a subcommand of mold as follows:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mold -run make &amp;lt;make-options-if-any&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Internally, mold invokes a given command with &lt;code&gt;LD_PRELOAD&lt;/code&gt; environment variable set to its companion shared object file. The shared object file intercepts all function calls to &lt;code&gt;exec(3)&lt;/code&gt;-family functions to replace &lt;code&gt;argv[0]&lt;/code&gt; with &lt;code&gt;mold&lt;/code&gt; if it is &lt;code&gt;ld&lt;/code&gt;, &lt;code&gt;ld.gold&lt;/code&gt; or &lt;code&gt;ld.lld&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;GitHub Actions&lt;/summary&gt; &#xA; &lt;p&gt;You can use our &lt;a href=&#34;https://github.com/rui314/setup-mold&#34;&gt;setup-mold&lt;/a&gt; GitHub Action to speed up GitHub-hosted continuous build. GitHub Actions runs on a two-core machine, but mold is still significantly faster than the default GNU linker there especially when a program being linked is large.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Verify that you are using mold&lt;/summary&gt; &#xA; &lt;p&gt;mold leaves its identification string in &lt;code&gt;.comment&lt;/code&gt; section in an output file. You can print it out to verify that you are actually using mold.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ readelf -p .comment &amp;lt;executable-file&amp;gt;&#xA;&#xA;String dump of section &#39;.comment&#39;:&#xA;  [     0]  GCC: (Ubuntu 10.2.0-5ubuntu1~20.04) 10.2.0&#xA;  [    2b]  mold 9a1679b47d9b22012ec7dfbda97c8983956716f7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If &lt;code&gt;mold&lt;/code&gt; is in &lt;code&gt;.comment&lt;/code&gt;, the file is created by mold.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Why is mold so fast?&lt;/h2&gt; &#xA;&lt;p&gt;One reason is because it simply uses faster algorithms and efficient data structures than other linkers do. The other reason is that the new linker is highly parallelized.&lt;/p&gt; &#xA;&lt;p&gt;Here is a side-by-side comparison of per-core CPU usage of lld (left) and mold (right). They are linking the same program, Chromium executable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rui314/mold/main/docs/htop.gif&#34; alt=&#34;CPU usage comparison in htop animation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As you can see, mold uses all available cores throughout its execution and finishes quickly. On the other hand, lld failed to use available cores most of the time. In this demo, the maximum parallelism is artificially capped to 16 so that the bars fit in the GIF.&lt;/p&gt; &#xA;&lt;p&gt;For details, please read &lt;a href=&#34;https://raw.githubusercontent.com/rui314/mold/main/docs/design.md&#34;&gt;design notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;mold is available under AGPL. Note that that does not mean that you have to license your program under AGPL if you use mold to link your program. An output of the mold linker is a derived work of the object files and libraries you pass to the linker but not a derived work of the mold linker itself.&lt;/p&gt; &#xA;&lt;p&gt;Besides that, you can also buy a commercial, non-AGPL license with technical support from our company, Blue Whale Systems PTE LTD. If you are a big company, please consider obtaining it before making hundreds or thousands of developers of your company to depend on mold. mold is mostly a single-person open-source project, and just like other open-source projects, we are not legally obligated to keep maintaining it. A legally-binding commercial license contract addresses the concern. By purchasing a license, you are guaranteed that mold will be maintained for you. Please &lt;a href=&#34;mailto:contact@bluewhale.systems&#34;&gt;contact us&lt;/a&gt; for a commercial license inquiry.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>scottbez1/smartknob</title>
    <updated>2022-06-26T02:01:04Z</updated>
    <id>tag:github.com,2022-06-26:/scottbez1/smartknob</id>
    <link href="https://github.com/scottbez1/smartknob" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haptic input knob with software-defined endstops and virtual detents&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SmartKnob&lt;/h1&gt; &#xA;&lt;p&gt;SmartKnob is an open-source input device with software-configurable endstops and virtual detents.&lt;/p&gt; &#xA;&lt;p&gt;A brushless gimbal motor is paired with a magnetic encoder to provide closed-loop torque feedback control, making it possible to dynamically create and adjust the feel of detents and endstops.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/scottbez1/smartknob/actions/workflows/electronics.yml&#34;&gt;&lt;img src=&#34;https://github.com/scottbez1/smartknob/actions/workflows/electronics.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/scottbez1/smartknob/actions/workflows/pio.yml&#34;&gt;&lt;img src=&#34;https://github.com/scottbez1/smartknob/actions/workflows/pio.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Designs&lt;/h1&gt; &#xA;&lt;h2&gt;SmartKnob View&lt;/h2&gt; &#xA;&lt;p&gt;Premium SmartKnob experience. Under active development.&lt;/p&gt; &#xA;&lt;p&gt;⚠️ &lt;strong&gt;Update (2022-03-24): As a result of the popularity of this project, it seems like the recommended motors are unfortunately no longer available.&lt;/strong&gt; I expect that these motors are simply no longer in production and therefore limited stock was available (for future reference in case you find them being sold elsewhere at a higher price, they were originally selling for US$2.56 each before this project was published). However... 👇&lt;/p&gt; &#xA;&lt;p&gt;💡 &lt;strong&gt;There is an ongoing search for new motors in &lt;a href=&#34;https://github.com/scottbez1/smartknob/issues/16&#34;&gt;issue #16&lt;/a&gt;&lt;/strong&gt; - follow along there for the latest info (or join in and help us find a good replacement). Any change in motor will likely require substantial redesigns, so &lt;em&gt;don&#39;t order PCBs/printed parts until there is more clarity on the motor.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;240x240 round LCD (&#34;GC9A01&#34;), protected by 39.5mm watch glass on rotor&lt;/li&gt; &#xA; &lt;li&gt;BLDC gimbal motor, with a hollow shaft for mechanically &amp;amp; electrically connecting the LCD&lt;/li&gt; &#xA; &lt;li&gt;Powered by ESP32-PICO-V3-02 (Lilygo TMicro32 Plus module)&lt;/li&gt; &#xA; &lt;li&gt;PCB flexure and strain gauges used for press detection (haptic feedback provided via the motor)&lt;/li&gt; &#xA; &lt;li&gt;8 side-firing RGB LEDs (SK6812-SIDE-A) illuminate ring around the knob&lt;/li&gt; &#xA; &lt;li&gt;USB-C (2.0) connector for 5V power and serial data/programming (CH340)&lt;/li&gt; &#xA; &lt;li&gt;VEML7700 ambient light sensor for automatic backlight &amp;amp; LED intensity adjustment&lt;/li&gt; &#xA; &lt;li&gt;Versatile back plate for mounting - use either 4x screws, or 2x 3M medium Command strips (with cutouts for accessing removal tabs after installation)&lt;/li&gt; &#xA; &lt;li&gt;Front cover snaps on for easy access to the PCB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Current status:&lt;/strong&gt; Not recommended for general use (mechanical and electrical revisions are planned)&lt;/p&gt; &#xA;&lt;h3&gt;Demo video&lt;/h3&gt; &#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=ip641WmY4pA&#34;&gt; &lt;img src=&#34;https://img.youtube.com/vi/ip641WmY4pA/maxresdefault.jpg&#34; width=&#34;480&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;3D CAD&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/scottbez1/smartknob/master/doc/img/explodedv145.gif&#34; alt=&#34;Exploded view&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest Fusion 360 Model: &lt;a href=&#34;https://a360.co/3BzkU0n&#34;&gt;https://a360.co/3BzkU0n&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build your own?&lt;/h3&gt; &#xA;&lt;p&gt;While this is a &#34;DIY&#34; open-source project, it is not yet a mature plug-and-play project. If you intend to build your own, note that it requires advanced soldering experience to build - very small-pitch surface-mount soldering is required (reflow or hot air recommended), and assembly is quite time-consuming and delicate. Please go into it with the expectation that you will almost certainly need to be able to troubleshoot some hardware and firmware issues yourself - I recommend reviewing/understanding the schematics and basic firmware before jumping in!&lt;/p&gt; &#xA;&lt;p&gt;More documentation on the BOM and what parts you need to order is coming in the future - thanks so much for your interest! Follow me on &lt;a href=&#34;https://twitter.com/scottbez1&#34;&gt;Twitter&lt;/a&gt; for the latest updates on this and other projects.&lt;/p&gt; &#xA;&lt;p&gt;View the latest auto-generated (untested) &lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-ibom.html&#34;&gt;Base PCB Interactive BOM&lt;/a&gt; and &lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-ibom.html&#34;&gt;Screen PCB Interactive BOM&lt;/a&gt; (or, the combined &lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-bom.csv&#34;&gt;BOM csv&lt;/a&gt;) for electronics/hardware parts list. ⚠️ These are auto-generated from the latest untested revision on GitHub. For tested/stable/recommended artifacts, use a &lt;a href=&#34;https://github.com/scottbez1/smartknob/releases&#34;&gt;release&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;A few miscellaneous notes in the meantime:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This can &lt;em&gt;probably&lt;/em&gt; be FDM 3D printed with a well-tuned printer, but the parts shown in videos/photos were MJF printed in nylon for tight tolerances and better surface finish&lt;/li&gt; &#xA; &lt;li&gt;If you wanted a simpler build, you could omit the LCD and just merge the knob + glass from the model into a single STL to get a closed-top knob&lt;/li&gt; &#xA; &lt;li&gt;There&#39;s limited space inside the LCD mount for wiring, and 8 wires need to fit through the hole in the center. I used 30 AWG wire-wrapping wire. Enamel-coated wire would probably work too.&lt;/li&gt; &#xA; &lt;li&gt;Strain gauges are BF350-3AA, and glued in place with CA glue (I&#39;ll include video of this process in the future, but essentially I used kapton tape to pick up the strain gauge and hold it in place during curing). This has to be done after reflow soldering, and would be hard to remove/fix in case of a mistake, so MAKE SURE TO PRACTICE GLUING strain gauges to other items before attempting on the PCB!&lt;/li&gt; &#xA; &lt;li&gt;The TMC6300 is &lt;em&gt;tiny&lt;/em&gt; and has a bottom pad, so I would seriously consider getting a stencil along with the PCB order. Even with the stencil I needed to manually clean up some bridging afterward; I &lt;em&gt;highly&lt;/em&gt; recommend Chip Quik NC191 gel flux, available on &lt;a href=&#34;https://amzn.to/3MGDSr5&#34;&gt;Amazon&lt;/a&gt; (or use this &lt;a href=&#34;https://www.amazon.com/Smooth-Flow-No-Clean-syringe-plunger/dp/B08KJPG3NZ&#34;&gt;non-affiliate link&lt;/a&gt; instead) or from your electronics distributor of choice. Flux is also very helpful when soldering the LCD ribbon cable to to screen PCB.&lt;/li&gt; &#xA; &lt;li&gt;For breadboard prototyping, the &lt;a href=&#34;https://www.trinamic.com/support/eval-kits/details/tmc6300-bob/&#34;&gt;TMC6300-BOB&lt;/a&gt; is awesome and way easier to work with than the bare chip if you just want to play around with low current BLDC motors&lt;/li&gt; &#xA; &lt;li&gt;For AliExpress purchases: I highly recommend &lt;strong&gt;only&lt;/strong&gt; using AliExpress Standard Shipping (purchasing in the US). I have had multiple purchases take months or never get delivered when purchased with Cainiao or other low cost shipping options, whereas AliExpress Standard is very reliable and generally faster in my experience.&lt;/li&gt; &#xA; &lt;li&gt;Make sure to check the &lt;a href=&#34;https://github.com/scottbez1/smartknob/issues&#34;&gt;open issues&lt;/a&gt; - this design is not yet &#34;stable&#34;, so beware that everything may not go smoothly. I would not recommend ordering these parts yourself until the &lt;a href=&#34;https://github.com/scottbez1/smartknob/milestone/1&#34;&gt;stable release v1.0 milestone&lt;/a&gt; is complete, as there are some mechanical interference issues in the current revision.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Future plans:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;consider switch to using an ESP32-S3-MINI-1 module (once Arduino core support is complete), as that would allow for direct USB HID support (for joystick/macro-pad type input to a computer)&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth HID support?&lt;/li&gt; &#xA; &lt;li&gt;get wifi configured and working (probably MQTT?). Currently memory is an issue with the full display framebuffer sprite. PSRAM might fix this (requires newer ESP-IDF &amp;amp; unreleased Arduino core, and from a brief test I got horrible performance with PSRAM enabled), or the next item might help reduce memory:&lt;/li&gt; &#xA; &lt;li&gt;migrate to LVGL, for better display rendering and easy support for menus, etc. Shouldn&#39;t require a full 240x240x24b framebuffer in memory, freeing some for wifi, etc.&lt;/li&gt; &#xA; &lt;li&gt;integrate nanopb for structured serial data (see &lt;a href=&#34;https://github.com/scottbez1/splitflap/raw/1440aba54d5b0d822ec5da68762431879988d7ef/arduino/splitflap/esp32/splitflap/serial_proto_protocol.cpp&#34;&gt;splitflap protobuf protocol&lt;/a&gt; for example)&lt;/li&gt; &#xA; &lt;li&gt;Home Assistant integration, or other real-world applications&lt;/li&gt; &#xA; &lt;li&gt;???&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/scottbez1/&#34;&gt;Profit&lt;/a&gt; 😉&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Base PCB&lt;/h4&gt; &#xA;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-front-3d.png&#34;&gt; &lt;img src=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-front-3d.png&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-back-3d.png&#34;&gt; &lt;img src=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-back-3d.png&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Ordering notes: use white soldermask, for reflecting light from RGB LED ring around the knob. Should be 1.2mm thick (not &#34;standard&#34; 1.6mm).&lt;/p&gt; &#xA;&lt;p&gt;Latest auto-generated (untested and likely broken!) artifacts⚠️:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-schematic.pdf&#34;&gt;Schematic&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-ibom.html&#34;&gt;Interactive BOM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-pcb-packet.pdf&#34;&gt;PCB Packet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-jlc/gerbers.zip&#34;&gt;Gerbers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;⚠️ For tested/stable/recommended artifacts, use a &lt;a href=&#34;https://github.com/scottbez1/smartknob/releases&#34;&gt;release&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h4&gt;Screen PCB&lt;/h4&gt; &#xA;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-front-3d.png&#34;&gt; &lt;img src=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-front-3d.png&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-back-3d.png&#34;&gt; &lt;img src=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-back-3d.png&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Ordering notes: Must be 1.2mm thick (not &#34;standard&#34; 1.6mm) per mechanical design.&lt;/p&gt; &#xA;&lt;p&gt;Latest auto-generated (untested and likely broken!) artifacts⚠️:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-schematic.pdf&#34;&gt;Schematic&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-ibom.html&#34;&gt;Interactive BOM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-pcb-packet.pdf&#34;&gt;PCB Packet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-jlc/gerbers.zip&#34;&gt;Gerbers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;⚠️ For tested/stable/recommended artifacts, use a &lt;a href=&#34;https://github.com/scottbez1/smartknob/releases&#34;&gt;release&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h2&gt;SmartKnob Mini&lt;/h2&gt; &#xA;&lt;p&gt;Planned for the future.&lt;/p&gt; &#xA;&lt;h1&gt;Frequently Asked Questions (FAQ)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;How much does it cost?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;I wish I could tell you now, but I don&#39;t actually know off the top of my head. Check back soon - I&#39;ve only built 1 so far, which was the result of a bunch of tinkering and prototyping over an extended period, so I don&#39;t have all the expenses tallied up yet. Certainly less than $200 in parts, and maybe closer to $100?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Does it work with XYZ?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Not yet. So far I&#39;ve only implemented enough firmware for the demo shown in the video, so you can&#39;t actually use it for anything productive yet. The basic detent configuration API is there, but not much else. Lots of firmware work remains to be done. If you build one, I&#39;d love your help adding support for XYZ though!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Can I buy one as a kit or already assembled?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Probably not? Or at least, I don&#39;t have any immediate plans to sell them myself. It&#39;s not that I don&#39;t want you to be happy, but hardware is a hard business and I just work on this stuff in my free time.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s open source with a fairly permissive license though, so in theory anyone could start offering kits/assemblies. If someone does go down that route of selling them, note that attribution is &lt;em&gt;required&lt;/em&gt; (and I wouldn&#39;t say no to &lt;a href=&#34;https://github.com/sponsors/scottbez1/&#34;&gt;royalties/tips/thanks&lt;/a&gt; if you&#39;re in a giving mood 🙂).&lt;/p&gt; &#xA;&lt;h2&gt;General Component Info&lt;/h2&gt; &#xA;&lt;h3&gt;Magnetic encoders&lt;/h3&gt; &#xA;&lt;h4&gt;MT6701 (MagnTek)&lt;/h4&gt; &#xA;&lt;p&gt;Excellent sensor at a reasonable price - highly recommended. Less noisy than TLV493D, and more responsive (control loop is more stable) using SSI.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lots of IO options - SSI, I2C, and ABZ - should offer good response latency&lt;/li&gt; &#xA; &lt;li&gt;SSI includes CRC to validate data&lt;/li&gt; &#xA; &lt;li&gt;No power-down or low-power options - may not be ideal for battery-powered devices&lt;/li&gt; &#xA; &lt;li&gt;Not available from US distributors (Mouser, Digi-Key)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.magntek.com.cn/upload/MT6701_Rev.1.5.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lcsc.com/product-detail/Angle-Linear-Position-Sensors_Magn-Tek-MT6701CT-STD_C2856764.html&#34;&gt;Ordering (LCSC)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;TLV493D (Infineon)&lt;/h4&gt; &#xA;&lt;p&gt;A mediocre choice. Easy to prototype with using &lt;a href=&#34;https://www.adafruit.com/product/4366&#34;&gt;Adafruit&#39;s QWIIC breakout board&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In my testing, it is a little noisy, requiring filtering/smoothing that can slow responsiveness, hurting control loop stability. Or, with less filtering, the noise can easily be &#34;amplified&#34; by the derivative component in the PID motor torque controller, causing audible (and tactile) humming/buzzing.&lt;/p&gt; &#xA;&lt;p&gt;There is also apparently a known silicon issue that causes the internal ADC to sometimes completely lock up, requiring a full reset and re-configuration. See section 5.6 in the &lt;a href=&#34;https://www.infineon.com/dgdl/Infineon-TLV493D-A1B6_3DMagnetic-UM-v01_03-EN.pdf?fileId=5546d46261d5e6820161e75721903ddd&#34;&gt;User Manual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;In the Master Controlled Mode (MCM) or the Fast Mode (FM) the ADC conversion may hang up. A hang up can&#xA;be detected by:&#xA; - Frame Counter (FRM) counter stucks and does not increment anymore.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In my experience testing 4 different Adafruit breakout boards, 2 of them (50%) regularly exhibit this lockup behavior within a minute or two of use. It is possible to detect and auto-reset (and there is code in the project to do so), but it is slow and may cause undesirable jumps/delays if the sensor locks up often.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.mouser.com/datasheet/2/196/Infineon_TLV493D_A1B6_DataSheet_v01_10_EN-1227967.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;AS5600 (AMS)&lt;/h4&gt; &#xA;&lt;p&gt;A mediocre choice. Cheap breakout boards are readily available.&lt;/p&gt; &#xA;&lt;p&gt;In my testing, it&#39;s fairly noisy (anecdotally, noisier than the TLV493d), requiring filtering/smoothing that can slow responsiveness, hurting control loop stability. Additionally, it saturates at a lower magnetic field strength than other sensors I tested, requiring a significant air gap (8-10mm) when used with a strong neodymium diametric magnet like &lt;a href=&#34;https://www.digikey.com/en/products/detail/radial-magnets-inc/8995/5126077&#34;&gt;Radial Magnets 8995&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ams.com/documents/20143/36005/AS5600_DS000365_5-00.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Motor drivers&lt;/h3&gt; &#xA;&lt;h4&gt;TMC6300-LA&lt;/h4&gt; &#xA;&lt;p&gt;This is a relatively new IC and it&#39;s a perfect match! There generally aren&#39;t any other drivers (with integrated fets) that meet the requirements for the low-voltage and low-current motors used in this project (DRV8316 might work, but has not been tested).&lt;/p&gt; &#xA;&lt;p&gt;Highlights:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2-11V DC motor supply input&lt;/li&gt; &#xA; &lt;li&gt;Up to 1.2A RMS&lt;/li&gt; &#xA; &lt;li&gt;Tiny (3x3mm QFN)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.trinamic.com/fileadmin/assets/Products/ICs_Documents/TMC6300_datasheet_rev1.07.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.trinamic.com/products/integrated-circuits/details/tmc6300-la/&#34;&gt;Product page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Motors&lt;/h3&gt; &#xA;&lt;h4&gt;32mm Rotor, Hollow Shaft, Diametric magnet&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scottbez1/smartknob/master/doc/img/motors/PXL_20220121_221746595.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/scottbez1/smartknob/master/doc/img/motors/PXL_20220121_221746595.jpg&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/scottbez1/smartknob/master/doc/img/motors/PXL_20220121_221738745.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/scottbez1/smartknob/master/doc/img/motors/PXL_20220121_221738745.jpg&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;32mm rotor&lt;/li&gt; &#xA; &lt;li&gt;15mm overall height (including magnet), 12.75mm height w/o magnet, 9mm rotor height&lt;/li&gt; &#xA; &lt;li&gt;low/zero cogging - excellent for completely smooth input&lt;/li&gt; &#xA; &lt;li&gt;5.9mm hollow shaft&lt;/li&gt; &#xA; &lt;li&gt;built-in diametric magnet for encoder&lt;/li&gt; &#xA; &lt;li&gt;Proven option&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is overall the easiest motor to get started with. Low cogging and a built-in diametric magnet are great!&lt;/p&gt; &#xA;&lt;p&gt;Sadly, does not seem to be available any longer.&lt;/p&gt; &#xA;&lt;h1&gt;Firmware&lt;/h1&gt; &#xA;&lt;p&gt;TODO: document this&lt;/p&gt; &#xA;&lt;p&gt;Also TODO: implement a lot more of the firmware&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;This project was greatly inspired by Jesse Schoch&#39;s video &#34;&lt;a href=&#34;https://www.youtube.com/watch?v=1gPQfDkX3BU&#34;&gt;haptic textures and virtual detents&lt;/a&gt;&#34; and the corresponding &lt;a href=&#34;https://community.simplefoc.com/t/haptic-textures/301&#34;&gt;discussion in the SimpleFOC community&lt;/a&gt;. Seriously, this project wouldn&#39;t exist if not for that video - thank you Jesse!&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under Apache v2 (software, electronics, documentation) and Creative Commons Attribution 4.0 (hardware/mechanical) (see &lt;a href=&#34;https://raw.githubusercontent.com/scottbez1/smartknob/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; and &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2022 Scott Bezek&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>facebook/folly</title>
    <updated>2022-06-26T02:01:04Z</updated>
    <id>tag:github.com,2022-06-26:/facebook/folly</id>
    <link href="https://github.com/facebook/folly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source C++ library developed and used at Facebook.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Folly: Facebook Open-source Library&lt;/h1&gt; &#xA;&lt;a href=&#34;https://opensource.facebook.com/support-ukraine&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&amp;amp;labelColor=005BBB&#34; alt=&#34;Support Ukraine - Help Provide Humanitarian Aid to Ukraine.&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;What is &lt;code&gt;folly&lt;/code&gt;?&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/folly/main/static/logo.svg?sanitize=true&#34; alt=&#34;Logo Folly&#34; width=&#34;15%&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;Folly (acronymed loosely after Facebook Open Source Library) is a library of C++14 components designed with practicality and efficiency in mind. &lt;strong&gt;Folly contains a variety of core library components used extensively at Facebook&lt;/strong&gt;. In particular, it&#39;s often a dependency of Facebook&#39;s other open source C++ efforts and place where those projects can share code.&lt;/p&gt; &#xA;&lt;p&gt;It complements (as opposed to competing against) offerings such as Boost and of course &lt;code&gt;std&lt;/code&gt;. In fact, we embark on defining our own component only when something we need is either not available, or does not meet the needed performance profile. We endeavor to remove things from folly if or when &lt;code&gt;std&lt;/code&gt; or Boost obsoletes them.&lt;/p&gt; &#xA;&lt;p&gt;Performance concerns permeate much of Folly, sometimes leading to designs that are more idiosyncratic than they would otherwise be (see e.g. &lt;code&gt;PackedSyncPtr.h&lt;/code&gt;, &lt;code&gt;SmallLocks.h&lt;/code&gt;). Good performance at large scale is a unifying theme in all of Folly.&lt;/p&gt; &#xA;&lt;h2&gt;Check it out in the intro video&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Wr_IfOICYSs&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/Wr_IfOICYSs/0.jpg&#34; alt=&#34;Explain Like I’m 5: Folly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Logical Design&lt;/h1&gt; &#xA;&lt;p&gt;Folly is a collection of relatively independent components, some as simple as a few symbols. There is no restriction on internal dependencies, meaning that a given folly module may use any other folly components.&lt;/p&gt; &#xA;&lt;p&gt;All symbols are defined in the top-level namespace &lt;code&gt;folly&lt;/code&gt;, except of course macros. Macro names are ALL_UPPERCASE and should be prefixed with &lt;code&gt;FOLLY_&lt;/code&gt;. Namespace &lt;code&gt;folly&lt;/code&gt; defines other internal namespaces such as &lt;code&gt;internal&lt;/code&gt; or &lt;code&gt;detail&lt;/code&gt;. User code should not depend on symbols in those namespaces.&lt;/p&gt; &#xA;&lt;p&gt;Folly has an &lt;code&gt;experimental&lt;/code&gt; directory as well. This designation connotes primarily that we feel the API may change heavily over time. This code, typically, is still in heavy use and is well tested.&lt;/p&gt; &#xA;&lt;h1&gt;Physical Design&lt;/h1&gt; &#xA;&lt;p&gt;At the top level Folly uses the classic &#34;stuttering&#34; scheme &lt;code&gt;folly/folly&lt;/code&gt; used by Boost and others. The first directory serves as an installation root of the library (with possible versioning a la &lt;code&gt;folly-1.0/&lt;/code&gt;), and the second is to distinguish the library when including files, e.g. &lt;code&gt;#include &amp;lt;folly/FBString.h&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The directory structure is flat (mimicking the namespace structure), i.e. we don&#39;t have an elaborate directory hierarchy (it is possible this will change in future versions). The subdirectory &lt;code&gt;experimental&lt;/code&gt; contains files that are used inside folly and possibly at Facebook but not considered stable enough for client use. Your code should not use files in &lt;code&gt;folly/experimental&lt;/code&gt; lest it may break when you update Folly.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;folly/folly/test&lt;/code&gt; subdirectory includes the unittests for all components, usually named &lt;code&gt;ComponentXyzTest.cpp&lt;/code&gt; for each &lt;code&gt;ComponentXyz.*&lt;/code&gt;. The &lt;code&gt;folly/folly/docs&lt;/code&gt; directory contains documentation.&lt;/p&gt; &#xA;&lt;h1&gt;What&#39;s in it?&lt;/h1&gt; &#xA;&lt;p&gt;Because of folly&#39;s fairly flat structure, the best way to see what&#39;s in it is to look at the headers in &lt;a href=&#34;https://github.com/facebook/folly/tree/main/folly&#34;&gt;top level &lt;code&gt;folly/&lt;/code&gt; directory&lt;/a&gt;. You can also check the &lt;a href=&#34;https://raw.githubusercontent.com/facebook/folly/main/folly/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt; folder&lt;/a&gt; for documentation, starting with the &lt;a href=&#34;https://raw.githubusercontent.com/facebook/folly/main/folly/docs/Overview.md&#34;&gt;overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Folly is published on GitHub at &lt;a href=&#34;https://github.com/facebook/folly&#34;&gt;https://github.com/facebook/folly&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Build Notes&lt;/h1&gt; &#xA;&lt;p&gt;Because folly does not provide any ABI compatibility guarantees from commit to commit, we generally recommend building folly as a static library.&lt;/p&gt; &#xA;&lt;p&gt;folly supports gcc (5.1+), clang, or MSVC. It should run on Linux (x86-32, x86-64, and ARM), iOS, macOS, and Windows (x86-64). The CMake build is only tested on some of these platforms; at a minimum, we aim to support macOS and Linux (on the latest Ubuntu LTS release or newer.)&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;getdeps.py&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This script is used by many of Meta&#39;s OSS tools. It will download and build all of the necessary dependencies first, and will then invoke cmake etc to build folly. This will help ensure that you build with relevant versions of all of the dependent libraries, taking into account what versions are installed locally on your system.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s written in python so you&#39;ll need python3.6 or later on your PATH. It works on Linux, macOS and Windows.&lt;/p&gt; &#xA;&lt;p&gt;The settings for folly&#39;s cmake build are held in its getdeps manifest &lt;code&gt;build/fbcode_builder/manifests/folly&lt;/code&gt;, which you can edit locally if desired.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;If on Linux or MacOS (with homebrew installed) you can install system dependencies to save building them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Clone the repo&#xA;git clone https://github.com/facebook/folly&#xA;# Install dependencies&#xA;cd folly&#xA;sudo ./build/fbcode_builder/getdeps.py install-system-deps --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to see the packages before installing them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build/fbcode_builder/getdeps.py install-system-deps --dry-run --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On other platforms or if on Linux and without system dependencies &lt;code&gt;getdeps.py&lt;/code&gt; will mostly download and build them for you during the build step.&lt;/p&gt; &#xA;&lt;p&gt;Some of the dependencies &lt;code&gt;getdeps.py&lt;/code&gt; uses and installs are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a version of boost compiled with C++14 support.&lt;/li&gt; &#xA; &lt;li&gt;googletest is required to build and run folly&#39;s tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;This script will download and build all of the necessary dependencies first, and will then invoke cmake etc to build folly. This will help ensure that you build with relevant versions of all of the dependent libraries, taking into account what versions are installed locally on your system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getdeps.py&lt;/code&gt; currently requires python 3.6+ to be on your path.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getdeps.py&lt;/code&gt; will invoke cmake etc&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Clone the repo&#xA;git clone https://github.com/facebook/folly&#xA;cd folly&#xA;# Build, using system dependencies if available&#xA;python3 ./build/fbcode_builder/getdeps.py --allow-system-packages build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It puts output in its scratch area:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;installed/folly/lib/libfolly.a&lt;/code&gt;: Library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also specify a &lt;code&gt;--scratch-path&lt;/code&gt; argument to control the location of the scratch directory used for the build. You can find the default scratch install location from logs or with &lt;code&gt;python3 ./build/fbcode_builder/getdeps.py show-inst-dir&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are also &lt;code&gt;--install-dir&lt;/code&gt; and &lt;code&gt;--install-prefix&lt;/code&gt; arguments to provide some more fine-grained control of the installation directories. However, given that folly provides no compatibility guarantees between commits we generally recommend building and installing the libraries to a temporary location, and then pointing your project&#39;s build at this temporary location, rather than installing folly in the traditional system installation directories. e.g., if you are building with CMake you can use the &lt;code&gt;CMAKE_PREFIX_PATH&lt;/code&gt; variable to allow CMake to find folly in this temporary installation directory when building your project.&lt;/p&gt; &#xA;&lt;p&gt;If you want to invoke &lt;code&gt;cmake&lt;/code&gt; again to iterate, there is a helpful &lt;code&gt;run_cmake.py&lt;/code&gt; script output in the scratch build directory. You can find the scratch build directory from logs or with &lt;code&gt;python3 ./build/fbcode_builder/getdeps.py show-build-dir&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Run tests&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;getdeps.py&lt;/code&gt; will build the tests for folly. To run them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd folly&#xA;python3 ./build/fbcode_builder/getdeps.py --allow-system-packages test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;build.sh&lt;/code&gt;/&lt;code&gt;build.bat&lt;/code&gt; wrapper&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;build.sh&lt;/code&gt; can be used on Linux and MacOS, on Windows use the &lt;code&gt;build.bat&lt;/code&gt; script instead. Its a wrapper around &lt;code&gt;getdeps.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build with cmake directly&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want to let getdeps invoke cmake for you then by default, building the tests is disabled as part of the CMake &lt;code&gt;all&lt;/code&gt; target. To build the tests, specify &lt;code&gt;-DBUILD_TESTS=ON&lt;/code&gt; to CMake at configure time.&lt;/p&gt; &#xA;&lt;p&gt;NB if you want to invoke &lt;code&gt;cmake&lt;/code&gt; again to iterate on a &lt;code&gt;getdeps.py&lt;/code&gt; build, there is a helpful &lt;code&gt;run_cmake.py&lt;/code&gt; script output in the scratch-path build directory. You can find the scratch build directory from logs or with &lt;code&gt;python3 ./build/fbcode_builder/getdeps.py show-build-dir&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Running tests with ctests also works if you cd to the build dir, e.g. &lt;code&gt; &lt;/code&gt;(cd $(python3 ./build/fbcode_builder/getdeps.py show-build-dir) &amp;amp;&amp;amp; ctest)`&lt;/p&gt; &#xA;&lt;h3&gt;Finding dependencies in non-default locations&lt;/h3&gt; &#xA;&lt;p&gt;If you have boost, gtest, or other dependencies installed in a non-default location, you can use the &lt;code&gt;CMAKE_INCLUDE_PATH&lt;/code&gt; and &lt;code&gt;CMAKE_LIBRARY_PATH&lt;/code&gt; variables to make CMAKE look also look for header files and libraries in non-standard locations. For example, to also search the directories &lt;code&gt;/alt/include/path1&lt;/code&gt; and &lt;code&gt;/alt/include/path2&lt;/code&gt; for header files and the directories &lt;code&gt;/alt/lib/path1&lt;/code&gt; and &lt;code&gt;/alt/lib/path2&lt;/code&gt; for libraries, you can invoke &lt;code&gt;cmake&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake \&#xA;  -DCMAKE_INCLUDE_PATH=/alt/include/path1:/alt/include/path2 \&#xA;  -DCMAKE_LIBRARY_PATH=/alt/lib/path1:/alt/lib/path2 ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ubuntu LTS, CentOS Stream, Fedora&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;getdeps.py&lt;/code&gt; approach above. We test in CI on Ubuntu LTS, and occasionally on other distros.&lt;/p&gt; &#xA;&lt;p&gt;If you find the set of system packages is not quite right for your chosen distro, you can specify distro version specific overrides in the dependency manifests (e.g. &lt;a href=&#34;https://github.com/facebook/folly/raw/main/build/fbcode_builder/manifests/boost&#34;&gt;https://github.com/facebook/folly/blob/main/build/fbcode_builder/manifests/boost&lt;/a&gt; ). You could probably make it work on most recent Ubuntu/Debian or Fedora/Redhat derived distributions.&lt;/p&gt; &#xA;&lt;p&gt;At time of writing (Dec 2021) there is a build break on GCC 11.x based systems in lang_badge_test. If you don&#39;t need badge functionality you can work around by commenting it out from CMakeLists.txt (unfortunately fbthrift does need it)&lt;/p&gt; &#xA;&lt;h2&gt;Windows (Vcpkg)&lt;/h2&gt; &#xA;&lt;p&gt;Note that many tests are disabled for folly Windows builds, you can see them in the log from the cmake configure step, or by looking for WINDOWS_DISABLED in &lt;code&gt;CMakeLists.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;That said, &lt;code&gt;getdeps.py&lt;/code&gt; builds work on Windows and are tested in CI.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer, you can try Vcpkg. folly is available in &lt;a href=&#34;https://github.com/Microsoft/vcpkg#vcpkg&#34;&gt;Vcpkg&lt;/a&gt; and releases may be built via &lt;code&gt;vcpkg install folly:x64-windows&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also use &lt;code&gt;vcpkg install folly:x64-windows --head&lt;/code&gt; to build against &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;macOS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;getdeps.py&lt;/code&gt; builds work on macOS and are tested in CI, however if you prefer, you can try one of the macOS package managers&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;folly is available as a Formula and releases may be built via &lt;code&gt;brew install folly&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also use &lt;code&gt;folly/build/bootstrap-osx-homebrew.sh&lt;/code&gt; to build against &lt;code&gt;main&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ./folly/build/bootstrap-osx-homebrew.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a build directory &lt;code&gt;_build&lt;/code&gt; in the top-level.&lt;/p&gt; &#xA;&lt;h3&gt;MacPorts&lt;/h3&gt; &#xA;&lt;p&gt;Install the required packages from MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  sudo port install \&#xA;    boost \&#xA;    cmake \&#xA;    gflags \&#xA;    git \&#xA;    google-glog \&#xA;    libevent \&#xA;    libtool \&#xA;    lz4 \&#xA;    lzma \&#xA;    openssl \&#xA;    snappy \&#xA;    xz \&#xA;    zlib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download and install double-conversion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  git clone https://github.com/google/double-conversion.git&#xA;  cd double-conversion&#xA;  cmake -DBUILD_SHARED_LIBS=ON .&#xA;  make&#xA;  sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download and install folly with the parameters listed below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  git clone https://github.com/facebook/folly.git&#xA;  cd folly&#xA;  mkdir _build&#xA;  cd _build&#xA;  cmake ..&#xA;  make&#xA;  sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>