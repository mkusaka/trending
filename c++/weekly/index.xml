<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-07T01:45:06Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MihailRis/VoxelEngine-Cpp</title>
    <updated>2024-01-07T01:45:06Z</updated>
    <id>tag:github.com,2024-01-07:/MihailRis/VoxelEngine-Cpp</id>
    <link href="https://github.com/MihailRis/VoxelEngine-Cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minecraft-like game engine in C++ with OpenGL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Run with compiled executable file:&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/15v_PwtbPRQ0ytDok-1ucHYks2T2cZdnt/view?usp=sharing&#34;&gt;Windows (64 bit)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MihailRis/VoxelEngine-Cpp/releases/download/v16/VoxelEngine-0.16-x86_64.AppImage&#34;&gt;Linux AppImage (x86_64)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Controls:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;&lt;strong&gt;Esc&lt;/strong&gt;&lt;/kbd&gt; - pause&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;&lt;strong&gt;Tab&lt;/strong&gt;&lt;/kbd&gt; - open inventory&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;&lt;strong&gt;W&lt;/strong&gt;&lt;/kbd&gt; &lt;kbd&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/kbd&gt; &lt;kbd&gt;&lt;strong&gt;S&lt;/strong&gt;&lt;/kbd&gt; &lt;kbd&gt;&lt;strong&gt;D&lt;/strong&gt;&lt;/kbd&gt; - movement&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;&lt;strong&gt;Space&lt;/strong&gt;&lt;/kbd&gt; - jump&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;&lt;strong&gt;LMB&lt;/strong&gt;&lt;/kbd&gt; - remove block&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;&lt;strong&gt;RMB&lt;/strong&gt;&lt;/kbd&gt; - place block&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;&lt;strong&gt;F&lt;/strong&gt;&lt;/kbd&gt; - toggle flight mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;&lt;strong&gt;N&lt;/strong&gt;&lt;/kbd&gt; - noclip mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;&lt;strong&gt;F1&lt;/strong&gt;&lt;/kbd&gt; - toggle interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;&lt;strong&gt;F2&lt;/strong&gt;&lt;/kbd&gt; - save screenshot&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;&lt;strong&gt;F3&lt;/strong&gt;&lt;/kbd&gt; - debug mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;&lt;strong&gt;F5&lt;/strong&gt;&lt;/kbd&gt; - reload chunks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build with CMake&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recursive https://github.com/MihailRis/VoxelEngine-Cpp.git&#xA;cd VoxelEngine-Cpp&#xA;mkdir build&#xA;cd build&#xA;cmake -DCMAKE_BUILD_TYPE=Release ..&#xA;cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install libs:&lt;/h2&gt; &#xA;&lt;h4&gt;Debian-based distro:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install libglfw3-dev libglfw3 libglew-dev libglm-dev libpng-dev libopenal-dev libluajit-5.1-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CMake missing LUA_INCLUDE_DIR and LUA_LIBRARIES fix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo ln -s /usr/lib/x86_64-linux-gnu/libluajit-5.1.a /usr/lib/x86_64-linux-gnu/liblua5.1.a&#xA;sudo ln -s /usr/include/luajit-2.1 /usr/include/lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;RHEL-based distro:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install glfw-devel glfw glew-devel glm-devel libpng-devel openal-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;+ install LuaJIT&lt;/p&gt; &#xA;&lt;h4&gt;Arch-based distro:&lt;/h4&gt; &#xA;&lt;p&gt;If you use X11&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -S glfw-x11 glew glm libpng openal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use Wayland&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -S glfw-wayland glew glm libpng openal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;+ install LuaJIT&lt;/p&gt; &#xA;&lt;h4&gt;LuaJIT installation:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://luajit.org/git/luajit.git&#xA;cd luajit&#xA;make &amp;amp;&amp;amp; sudo make install INSTALL_INC=/usr/include/lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install glfw3 glew glm libpng lua luajit openal-soft&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If homebrew for some reason could not install the necessary packages: &lt;code&gt;lua luajit openal-soft&lt;/code&gt;, then download, install and compile them manually (Lua, LuaJIT and OpenAL).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kroma-network/tachyon</title>
    <updated>2024-01-07T01:45:06Z</updated>
    <id>tag:github.com,2024-01-07:/kroma-network/tachyon</id>
    <link href="https://github.com/kroma-network/tachyon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modular ZK(Zero Knowledge) backend accelerated by GPU&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt;&#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/kroma-network/tachyon/main/tachyon_logo_horizontal.png&#34; style=&#34;width: 50%;&#34;&gt; &#xA; &lt;br&gt;&#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tachyon&lt;/strong&gt; is a Modular ZK Backend, powered by GPU.&lt;/p&gt; &#xA;&lt;h2&gt;Design Goals&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;General Purpose: A versatile ZK library empowers developers to implement any proving scheme with minimal effort, often enhancing developer productivity. To create a general-purpose backend, aligning the code structure as closely as possible with the algebraic structure is paramount.&lt;/li&gt; &#xA; &lt;li&gt;Easy to Use: Achieving widespread adoption is essential for the success of any product. Consequently, one of the key focal points of the Tachyon project is to include offering packages for various programming languages and runtimes.&lt;/li&gt; &#xA; &lt;li&gt;Blazing Fast: Tachyon&#39;s foremost requirement is speed, and not just any speed, but blazing speed! This entails Tachyon delivering exceptional performance on both CPU and GPU platforms.&lt;/li&gt; &#xA; &lt;li&gt;GPU Interoperability: Tachyon&#39;s code is designed to be compatible with both CPU and GPU in the majority of scenarios.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;p&gt;Please follow the instructions &lt;a href=&#34;https://bazel.build/install&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Ubuntu&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; sudo apt install libgmp-dev libomp-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Macos&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; brew install gmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;h4&gt;Build on Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel build --config linux //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build on Macos arm64&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel build --config macos_arm64 //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build on Macos x64&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel build --config macos_x86_64 //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;: MacOS v14.0.0 or later is recommended.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In certain versions of MacOS (prior to v13.5.1), a bug related to incorrect Bigint divide operations has been detected in the field generator when using the optimized build (&lt;code&gt;-c opt&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/kroma-network/tachyon/issues/98&#34;&gt;issue&lt;/a&gt; will be fixed as soon as possible.&lt;/p&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;h4&gt;Test on Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel test --config linux //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Test on Macos arm64&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel test --config macos_arm64 //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Test on Macos x64&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel test --config macos_x86_64 //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Polygon zkEVM backend prime field&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt;: Only x86_64 is supported.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--//:polygon_zkevm_backend&lt;/code&gt;: Enable &lt;a href=&#34;https://github.com/0xPolygonHermez/goldilocks&#34;&gt;goldilocks&lt;/a&gt; and &lt;a href=&#34;https://github.com/0xPolygonHermez/zkevm-prover&#34;&gt;zkevm-prover&lt;/a&gt; prime field backend.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel build --config ${os} --config avx512_${os} --//:polygon_zkevm_backend //...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hardware acceleration&lt;/h3&gt; &#xA;&lt;h4&gt;CUDA backend&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--config cuda&lt;/code&gt;: Enable &lt;a href=&#34;https://developer.nvidia.com/cuda-toolkit&#34;&gt;cuda&lt;/a&gt; backend.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel build --config ${os} --config cuda //...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ROCm backend&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--config rocm&lt;/code&gt;: Enable &lt;a href=&#34;https://www.amd.com/en/graphics/servers-solutions-rocm&#34;&gt;rocm&lt;/a&gt; backend.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bazel build --config ${os} --config rocm //...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Matplotlib&lt;/h3&gt; &#xA;&lt;h3&gt;Pyenv&lt;/h3&gt; &#xA;&lt;p&gt;If you are using pyenv, don&#39;t forget to add a option &lt;code&gt;--enable-shared&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; CONFIGURE_OPTS=--enable-shared pyenv install &amp;lt;version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; pip install matplotlib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frequently Asked Questions&lt;/h3&gt; &#xA;&lt;h4&gt;Debugging on macOS&lt;/h4&gt; &#xA;&lt;p&gt;Please add this line to your &lt;code&gt;.bazelrc.user&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build --spawn_strategy=local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build on Ubuntu 20.04&lt;/h4&gt; &#xA;&lt;p&gt;Please update g++ version and try build again! The default &lt;code&gt;g++-9&lt;/code&gt; is not working.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; sudo apt install g++-10&#xA;&amp;gt; export CC=/usr/bin/gcc-10&#xA;&amp;gt; export CXX=/usr/bin/g++-10&#xA;&amp;gt; export GCC_HOST_COMPILER_PATH=/usr/bin/gcc-10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build CUDA with rust toolchain&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Use --sandbox_debug to see verbose messages from the sandbox and retain the sandbox build root for debugging&#xA;error: linking with `external/local_config_cuda/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc` failed: exit status: 127&#xA;...&#xA;  = note: /usr/bin/env: &#39;python&#39;: No such file or directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please make your &lt;code&gt;python&lt;/code&gt; point to python interpreter to be run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; sudo apt install python-is-python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Plus, please include these lines to your &lt;code&gt;.bazelc.user&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build --action_env=PATH=/usr/bin:/usr/local/bin&#xA;build --host_action_env=PATH=/usr/bin:/usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>meshtastic/firmware</title>
    <updated>2024-01-07T01:45:06Z</updated>
    <id>tag:github.com,2024-01-07:/meshtastic/firmware</id>
    <link href="https://github.com/meshtastic/firmware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Meshtastic device firmware&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Meshtastic Firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/meshtastic/firmware/total&#34; alt=&#34;GitHub release downloads&#34;&gt; &lt;a href=&#34;https://github.com/meshtastic/firmware/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/meshtastic/firmware/main_matrix.yml?branch=master&amp;amp;label=actions&amp;amp;logo=github&amp;amp;color=yellow&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cla-assistant.io/meshtastic/firmware&#34;&gt;&lt;img src=&#34;https://cla-assistant.io/readme/badge/meshtastic/firmware&#34; alt=&#34;CLA assistant&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/meshtastic/&#34;&gt;&lt;img src=&#34;https://opencollective.com/meshtastic/tiers/badge.svg?label=Fiscal%20Contributors&amp;amp;color=deeppink&#34; alt=&#34;Fiscal Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://vercel.com?utm_source=meshtastic&amp;amp;utm_campaign=oss&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Powered%20by&amp;amp;message=Vercel&amp;amp;style=flat&amp;amp;logo=vercel&amp;amp;color=000000&#34; alt=&#34;Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the device firmware for the Meshtastic project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://meshtastic.org/docs/development/firmware/build&#34;&gt;Building Instructions&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://meshtastic.org/docs/getting-started/flashing-firmware/&#34;&gt;Flashing Instructions&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stats&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://repobeats.axiom.co/api/embed/a92f097d9197ae853e780ec53d7d126e545629ab.svg?sanitize=true&#34; alt=&#34;Alt&#34; title=&#34;Repobeats analytics image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>