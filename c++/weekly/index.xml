<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-27T01:42:50Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/flatbuffers</title>
    <updated>2022-11-27T01:42:50Z</updated>
    <id>tag:github.com,2022-11-27:/google/flatbuffers</id>
    <link href="https://github.com/google/flatbuffers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FlatBuffers: Memory Efficient Serialization Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;http://google.github.io/flatbuffers/fpl_logo_small.png&#34; alt=&#34;logo&#34;&gt; FlatBuffers&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/google/flatbuffers/actions/workflows/build.yml/badge.svg?branch=master&#34; alt=&#34;Build status&#34;&gt; &lt;a href=&#34;https://buildkite.com/bazel/flatbuffers&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/7979d93bc6279aa539971f271253c65d5e8fe2fe43c90bbb25.svg?sanitize=true&#34; alt=&#34;BuildKite status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:flatbuffers&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/flatbuffers.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://api.securityscorecards.dev/projects/github.com/google/flatbuffers&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/google/flatbuffers/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/google/flatbuffers?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/google/flatbuffers.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/google/flatbuffers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https:///discord.gg/6qgKs3R&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/656202785926152206.svg?sanitize=true&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/wvo&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/wvo.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/dbaileychess&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/dbaileychess.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FlatBuffers&lt;/strong&gt; is a cross platform serialization library architected for maximum memory efficiency. It allows you to directly access serialized data without parsing/unpacking it first, while still having great forwards/backwards compatibility.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Go to our &lt;a href=&#34;https://google.github.io/flatbuffers&#34;&gt;landing page&lt;/a&gt; to browse our documentation.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported operating systems&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;macOS&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;And any others with a recent C++ compiler (C++ 11 and newer)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported programming languages&lt;/h2&gt; &#xA;&lt;p&gt;Code generation and runtime libraries for many popular languages.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;C&lt;/li&gt; &#xA; &lt;li&gt;C++ - &lt;a href=&#34;https://snapcraft.io/flatbuffers&#34;&gt;snapcraft.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C# - &lt;a href=&#34;https://www.nuget.org/packages/Google.FlatBuffers&#34;&gt;nuget.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dart - &lt;a href=&#34;https://pub.dev/packages/flat_buffers&#34;&gt;pub.dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go - &lt;a href=&#34;https://pkg.go.dev/github.com/google/flatbuffers/go&#34;&gt;go.dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java - &lt;a href=&#34;https://search.maven.org/artifact/com.google.flatbuffers/flatbuffers-java&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JavaScript - &lt;a href=&#34;https://www.npmjs.com/package/flatbuffers&#34;&gt;NPM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kotlin&lt;/li&gt; &#xA; &lt;li&gt;Lobster&lt;/li&gt; &#xA; &lt;li&gt;Lua&lt;/li&gt; &#xA; &lt;li&gt;PHP&lt;/li&gt; &#xA; &lt;li&gt;Python - &lt;a href=&#34;https://pypi.org/project/flatbuffers/&#34;&gt;PyPi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust - &lt;a href=&#34;https://crates.io/crates/flatbuffers&#34;&gt;crates.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA; &lt;li&gt;TypeScript - &lt;a href=&#34;https://www.npmjs.com/package/flatbuffers&#34;&gt;NPM&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;and more in progress...&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/flatbuffers/pull/7362&#34;&gt;Nim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/google/flatbuffers/issues&#34;&gt;FlatBuffers Issues Tracker&lt;/a&gt; to submit an issue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/search?q=flatbuffers&#34;&gt;stackoverflow.com&lt;/a&gt; with &lt;a href=&#34;https://stackoverflow.com/questions/tagged/flatbuffers&#34;&gt;&lt;code&gt;flatbuffers&lt;/code&gt; tag&lt;/a&gt; for any questions regarding FlatBuffers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;To contribute to this project,&lt;/em&gt; see &lt;a href=&#34;http://github.com/google/flatbuffers/blob/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/flatbuffers&#34;&gt;FlatBuffers Google Group&lt;/a&gt; to discuss FlatBuffers with other developers and users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https:///discord.gg/6qgKs3R&#34;&gt;Discord Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/google/flatbuffers&#34;&gt;Gitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/google/flatbuffers/master/SECURITY.md&#34;&gt;Security Policy&lt;/a&gt; for reporting vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Flatbuffers&lt;/em&gt; is licensed under the Apache License, Version 2.0. See &lt;a href=&#34;https://github.com/google/flatbuffers/raw/master/LICENSE.txt&#34;&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt; &#xA;&lt;br&gt;</summary>
  </entry>
  <entry>
    <title>BoomingTech/Piccolo</title>
    <updated>2022-11-27T01:42:50Z</updated>
    <id>tag:github.com,2022-11-27:/BoomingTech/Piccolo</id>
    <link href="https://github.com/BoomingTech/Piccolo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Piccolo (formerly Pilot) â€“ mini game engine for games104&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Piccolo Engine (formerly Pilot Engine)&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://games104.boomingtech.com&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/BoomingTech/Piccolo/main/engine/source/editor/resource/PiccoloEngine.png&#34; width=&#34;400&#34; alt=&#34;Piccolo Engine logo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Piccolo Engine&lt;/strong&gt; is a tiny game engine used for the &lt;a href=&#34;https://games104.boomingtech.com&#34;&gt;GAMES104&lt;/a&gt; course.&lt;/p&gt; &#xA;&lt;h2&gt;Continuous build status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Build Type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Build Windows&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/BoomingTech/Piccolo/actions/workflows/build_windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/BoomingTech/Piccolo/actions/workflows/build_windows.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Windows&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Build Linux&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/BoomingTech/Piccolo/actions/workflows/build_linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/BoomingTech/Piccolo/actions/workflows/build_linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Build macOS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/BoomingTech/Piccolo/actions/workflows/build_macos.yml&#34;&gt;&lt;img src=&#34;https://github.com/BoomingTech/Piccolo/actions/workflows/build_macos.yml/badge.svg?sanitize=true&#34; alt=&#34;Build macOS&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;To build Piccolo, you must first install the following tools.&lt;/p&gt; &#xA;&lt;h3&gt;Windows 10/11&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2019 (or more recent)&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.19 (or more recent)&lt;/li&gt; &#xA; &lt;li&gt;Git 2.1 (or more recent)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;macOS &amp;gt;= 10.15 (x86_64)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.3 (or more recent)&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.19 (or more recent)&lt;/li&gt; &#xA; &lt;li&gt;Git 2.1 (or more recent)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ubuntu 20.04&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;apt install the following packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install libxrandr-dev&#xA;sudo apt install libxrender-dev&#xA;sudo apt install libxinerama-dev&#xA;sudo apt install libxcursor-dev&#xA;sudo apt install libxi-dev&#xA;sudo apt install libglvnd-dev&#xA;sudo apt install libvulkan-dev&#xA;sudo apt install cmake&#xA;sudo apt install clang&#xA;sudo apt install libc++-dev&#xA;sudo apt install libglew-dev&#xA;sudo apt install libglfw3-dev&#xA;sudo apt install vulkan-validationlayers&#xA;sudo apt install mesa-vulkan-drivers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#runfile&#34;&gt;NVIDIA driver&lt;/a&gt; (The AMD and Intel driver is open-source, and thus is installed automatically by mesa-vulkan-drivers)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Piccolo&lt;/h2&gt; &#xA;&lt;h3&gt;Build on Windows&lt;/h3&gt; &#xA;&lt;p&gt;You may execute the &lt;strong&gt;build_windows.bat&lt;/strong&gt;. This batch file will generate the projects, and build the &lt;strong&gt;Release&lt;/strong&gt; config of &lt;strong&gt;Piccolo Engine&lt;/strong&gt; automatically. After successful build, you can find the PiccoloEditor.exe at the &lt;strong&gt;bin&lt;/strong&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Or you can use the following command to generate the &lt;strong&gt;Visual Studio&lt;/strong&gt; project firstly, then open the solution in the build directory and build it manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -S . -B build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build on macOS&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The following build instructions only tested on specific hardware of x86_64, and do not support M1 chips. For M1 compatible, we will release later.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To compile Piccolo, you must have the most recent version of Xcode installed. Then run &#39;cmake&#39; from the project&#39;s root directory, to generate a project of Xcode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -S . -B build -G &#34;Xcode&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and you can build the project with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake --build build --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can execute the &lt;strong&gt;build_macos.sh&lt;/strong&gt; to build the binaries.&lt;/p&gt; &#xA;&lt;h3&gt;Build on Ubuntu 20.04&lt;/h3&gt; &#xA;&lt;p&gt;You can execute the &lt;strong&gt;build_linux.sh&lt;/strong&gt; to build the binaries.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For documentation, please refer to the Wiki section.&lt;/p&gt; &#xA;&lt;h2&gt;Extra&lt;/h2&gt; &#xA;&lt;h3&gt;Vulkan Validation Layer: Validation Error&lt;/h3&gt; &#xA;&lt;p&gt;We have noticed some developers on Windows encounted PiccoloEditor.exe could run normally but reported an exception Vulkan Validation Layer: Validation Error when debugging. You can solve this problem by installing Vulkan SDK (official newest version will do).&lt;/p&gt; &#xA;&lt;h3&gt;Generate Compilation Database&lt;/h3&gt; &#xA;&lt;p&gt;You can build &lt;code&gt;compile_commands.json&lt;/code&gt; with the following commands when &lt;code&gt;Unix Makefiles&lt;/code&gt; generaters are avaliable. &lt;code&gt;compile_commands.json&lt;/code&gt; is the file required by &lt;code&gt;clangd&lt;/code&gt; language server, which is a backend for cpp lsp-mode in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;For Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cmake -DCMAKE_TRY_COMPILE_TARGET_TYPE=&#34;STATIC_LIBRARY&#34; -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -S . -B compile_db_temp -G &#34;Unix Makefiles&#34;&#xA;copy compile_db_temp\compile_commands.json .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Physics Debug Renderer&lt;/h3&gt; &#xA;&lt;p&gt;Currently Physics Debug Renderer is only available on Windows. You can use the following command to generate the solution with the debugger project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cmake -S . -B build -DENABLE_PHYSICS_DEBUG_RENDERER=ON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Please clean the build directory before regenerating the solution. We&#39;ve encountered building problems in regenerating directly with previous CMakeCache.&lt;/li&gt; &#xA; &lt;li&gt;Physics Debug Renderer will run when you start PiccoloEditor. We&#39;ve synced the camera position between both scenes. But the initial camera mode in Physics Debug Renderer is wrong. Scrolling down the mouse wheel once will change the camera of Physics Debug Renderer to the correct mode.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>justcallmekoko/ESP32Marauder</title>
    <updated>2022-11-27T01:42:50Z</updated>
    <id>tag:github.com,2022-11-27:/justcallmekoko/ESP32Marauder</id>
    <link href="https://github.com/justcallmekoko/ESP32Marauder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A suite of WiFi/Bluetooth offensive and defensive tools for the ESP32&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ESP32 Marauder v0.9.17&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;Marauder logo&#34; src=&#34;https://github.com/justcallmekoko/ESP32Marauder/raw/master/pictures/marauder3L.jpg?raw=true&#34; width=&#34;300&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;A suite of WiFi/Bluetooth offensive and defensive tools for the ESP32&lt;/b&gt; &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/justcallmekoko/ESP32Marauder/raw/master/LICENSE&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/justcallmekoko/ESP32Marauder&#34;&gt;&lt;img alt=&#34;Gitter&#34; src=&#34;https://badges.gitter.im/justcallmekoko/ESP32Marauder.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/justcallmekoko/ESP32Marauder/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/justcallmekoko/ESP32Marauder/total&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=jcmkyoutube&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/jcmkyoutube?style=social&amp;amp;logo=twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.instagram.com/just.call.me.koko&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Follow%20Me-Instagram-orange&#34; alt=&#34;Instagram&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://www.tindie.com/products/justcallmekoko/esp32-marauder/&#34;&gt;&lt;img src=&#34;https://d2ss6ovg47m0r5.cloudfront.net/badges/tindie-larges.png&#34; alt=&#34;I sell on Tindie&#34; width=&#34;200&#34; height=&#34;104&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://www.twitch.tv/willstunforfood&#34;&gt;&lt;img src=&#34;https://assets.stickpng.com/images/580b57fcd9996e24bc43c540.png&#34; alt=&#34;Twitch WillStunForFood&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/justcallmekoko/ESP32Marauder/actions/workflows/build_push.yml&#34;&gt;&lt;img src=&#34;https://github.com/justcallmekoko/ESP32Marauder/actions/workflows/build_push.yml/badge.svg?sanitize=true&#34; alt=&#34;Build and Push&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://github.com/justcallmekoko/ESP32Marauder/releases/latest&#34;&gt;latest release&lt;/a&gt; of the firmware.&lt;/p&gt; &#xA;&lt;p&gt;Check out the project &lt;a href=&#34;https://github.com/justcallmekoko/ESP32Marauder/wiki&#34;&gt;wiki&lt;/a&gt; for a full overview of the ESP32 Marauder&lt;/p&gt; &#xA;&lt;h1&gt;For Sale Now&lt;/h1&gt; &#xA;&lt;p&gt;You can buy the ESP32 Marauder using &lt;a href=&#34;https://www.tindie.com/products/justcallmekoko/esp32-marauder/&#34;&gt;this link&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>