<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-26T01:47:57Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jrouwe/JoltPhysics</title>
    <updated>2023-11-26T01:47:57Z</updated>
    <id>tag:github.com,2023-11-26:/jrouwe/JoltPhysics</id>
    <link href="https://github.com/jrouwe/JoltPhysics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A multi core friendly rigid body physics and collision detection library, written in C++, suitable for games and VR applications.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cla-assistant.io/jrouwe/JoltPhysics&#34;&gt;&lt;img src=&#34;https://cla-assistant.io/readme/badge/jrouwe/JoltPhysics&#34; alt=&#34;CLA assistant&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jrouwe/JoltPhysics/actions/&#34;&gt;&lt;img src=&#34;https://github.com/jrouwe/JoltPhysics/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=jrouwe_JoltPhysics&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=jrouwe_JoltPhysics&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=jrouwe_JoltPhysics&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=jrouwe_JoltPhysics&amp;amp;metric=bugs&#34; alt=&#34;Bugs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=jrouwe_JoltPhysics&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=jrouwe_JoltPhysics&amp;amp;metric=code_smells&#34; alt=&#34;Code Smells&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Jolt Physics&lt;/h1&gt; &#xA;&lt;p&gt;A multi core friendly rigid body physics and collision detection library suitable for games and VR applications, used by Horizon Forbidden West.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.playstation.com/en-us/games/horizon-forbidden-west/&#34;&gt;&lt;img src=&#34;https://jrouwe.nl/jolt/Horizon_Forbidden_West.png&#34; alt=&#34;Horizon Forbidden West Cover Art&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pwyCW0yNKMA&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/pwyCW0yNKMA/hqdefault.jpg&#34; alt=&#34;Ragdoll Pile&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;em&gt;A YouTube video showing a ragdoll pile simulated with Jolt Physics.&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more demos and &lt;a href=&#34;https://www.youtube.com/watch?v=pwyCW0yNKMA&amp;amp;list=PLYXVwtOr1CBxbA50jVg2dKUQvHW_5OOom&#34;&gt;videos&lt;/a&gt; go to the &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Docs/Samples.md&#34;&gt;Samples&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;To get started, look at the &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/HelloWorld/HelloWorld.cpp&#34;&gt;HelloWorld&lt;/a&gt; example. A &lt;a href=&#34;https://github.com/jrouwe/JoltPhysicsHelloWorld&#34;&gt;HelloWorld example using CMake FetchContent&lt;/a&gt; is also available to show how you can integrate Jolt Physics in a CMake project.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in how Jolt scales with multiple CPUs and compares to other physics engines, take a look at &lt;a href=&#34;https://jrouwe.nl/jolt/JoltPhysicsMulticoreScaling.pdf&#34;&gt;this document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The slides for my GDC 2022 talk &lt;a href=&#34;https://gdcvault.com/play/1027560/Architecting-Jolt-Physics-for-Horizon&#34;&gt;Architecting Jolt Physics for &#39;Horizon Forbidden West&#39;&lt;/a&gt; are now available (&lt;a href=&#34;https://gdcvault.com/play/1027891/Architecting-Jolt-Physics-for-Horizon&#34;&gt;video here&lt;/a&gt;)!&lt;/p&gt; &#xA;&lt;h2&gt;Design Considerations&lt;/h2&gt; &#xA;&lt;p&gt;So why create yet another physics engine? First of all, this has been a personal learning project and secondly I wanted to address some issues that I had with existing physics engines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In games we usually need to do many more things than to simulate the physics world and we need to do this across multiple threads. We therefore place a lot of emphasis on concurrently accessing the physics simulation data outside of the main physics simulation update: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sections of the world can be loaded / unloaded in the background. A batch of physics bodies can be prepared on a background thread without locking or affecting the physics simulation and then inserted into the world all at once with a minimal impact on performance.&lt;/li&gt; &#xA;   &lt;li&gt;Collision queries can run in parallel with other operations like insertion / removal of bodies. The query code is guaranteed to see a body in a consistent state, but when a body is changed during a collision query there is no guarantee if the change is visible to the query or not. If a thread modifies the position of a body and then does a collision query, it will immediately see the updated state (this is often a problem when working with a read version and a write version of the world).&lt;/li&gt; &#xA;   &lt;li&gt;It is also possible to run collision queries in parallel to the main physics simulation by doing the broad phase query before the simulation step. This way, long running processes (like navigation mesh generation) can be spread out across multiple frames while still running the physics simulation every frame.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;One of the main sources of performance problems we found was waking up too many bodies while loading / unloading content. Therefore, bodies will not automatically wake up when created and neighboring bodies will not be woken up when bodies are removed. This can be triggered manually if desired.&lt;/li&gt; &#xA; &lt;li&gt;The simulation runs deterministically, so you could replicate a simulation to a remote client by merely replicating the inputs to the simulation. Read the &lt;a href=&#34;https://jrouwe.github.io/JoltPhysics/&#34;&gt;Deterministic Simulation&lt;/a&gt; section to understand the limits of this.&lt;/li&gt; &#xA; &lt;li&gt;The simulation of this physics engine tries to simulate behavior of rigid bodies in the real world but makes approximations in the simulation so should mainly be used for games or VR simulations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information see the &lt;a href=&#34;https://jrouwe.github.io/JoltPhysics/&#34;&gt;Architecture and API documentation&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simulation of rigid bodies of various shapes using continuous collision detection: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sphere.&lt;/li&gt; &#xA;   &lt;li&gt;Box.&lt;/li&gt; &#xA;   &lt;li&gt;Capsule.&lt;/li&gt; &#xA;   &lt;li&gt;Tapered-capsule.&lt;/li&gt; &#xA;   &lt;li&gt;Cylinder.&lt;/li&gt; &#xA;   &lt;li&gt;Convex hull.&lt;/li&gt; &#xA;   &lt;li&gt;Compound.&lt;/li&gt; &#xA;   &lt;li&gt;Mesh (triangle).&lt;/li&gt; &#xA;   &lt;li&gt;Terrain (height field).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Simulation of constraints between bodies: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fixed.&lt;/li&gt; &#xA;   &lt;li&gt;Point.&lt;/li&gt; &#xA;   &lt;li&gt;Distance (including springs).&lt;/li&gt; &#xA;   &lt;li&gt;Hinge.&lt;/li&gt; &#xA;   &lt;li&gt;Slider (also called prismatic).&lt;/li&gt; &#xA;   &lt;li&gt;Cone.&lt;/li&gt; &#xA;   &lt;li&gt;Rack and Pinion.&lt;/li&gt; &#xA;   &lt;li&gt;Gear.&lt;/li&gt; &#xA;   &lt;li&gt;Pulley.&lt;/li&gt; &#xA;   &lt;li&gt;Smooth spline paths.&lt;/li&gt; &#xA;   &lt;li&gt;Swing-twist (for humanoid shoulders).&lt;/li&gt; &#xA;   &lt;li&gt;6 DOF.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Motors to drive the constraints.&lt;/li&gt; &#xA; &lt;li&gt;Collision detection: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Casting rays.&lt;/li&gt; &#xA;   &lt;li&gt;Testing shapes vs shapes.&lt;/li&gt; &#xA;   &lt;li&gt;Casting a shape vs another shape.&lt;/li&gt; &#xA;   &lt;li&gt;Broadphase only tests for quickly determining which objects may intersect.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Sensors (trigger volumes).&lt;/li&gt; &#xA; &lt;li&gt;Animated ragdolls: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Hard keying (kinematic only rigid bodies).&lt;/li&gt; &#xA;   &lt;li&gt;Soft keying (setting velocities on dynamic rigid bodies).&lt;/li&gt; &#xA;   &lt;li&gt;Driving constraint motors to an animated pose.&lt;/li&gt; &#xA;   &lt;li&gt;Mapping a high detail (animation) skeleton onto a low detail (ragdoll) skeleton and vice versa.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Game character simulation (capsule) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rigid body character. Moves during the physics simulation. Cheapest option and most accurate collision response between character and dynamic bodies.&lt;/li&gt; &#xA;   &lt;li&gt;Virtual character. Does not have a rigid body in the world but simulates one using collision checks. Updated outside of the physics update for more control. Less accurate interaction with dynamic bodies.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Vehicles &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Wheeled vehicles.&lt;/li&gt; &#xA;   &lt;li&gt;Tracked vehicles.&lt;/li&gt; &#xA;   &lt;li&gt;Motorcycles.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Soft body simulation (e.g. a soft ball or piece of cloth).&lt;/li&gt; &#xA; &lt;li&gt;Water buoyancy calculations.&lt;/li&gt; &#xA; &lt;li&gt;An optional double precision mode that allows large worlds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows (VS2019, VS2022) x86/x64/ARM32/ARM64 (Desktop/UWP)&lt;/li&gt; &#xA; &lt;li&gt;Linux (tested on Ubuntu 22.04) x64/ARM64&lt;/li&gt; &#xA; &lt;li&gt;Android (tested on Android 14) x86/x64/ARM32/ARM64&lt;/li&gt; &#xA; &lt;li&gt;Platform Blue (a popular game console) x64&lt;/li&gt; &#xA; &lt;li&gt;macOS (tested on Monterey) x64/ARM64&lt;/li&gt; &#xA; &lt;li&gt;iOS (tested on iOS 15) x64/ARM64&lt;/li&gt; &#xA; &lt;li&gt;WebAssembly, see &lt;a href=&#34;https://github.com/jrouwe/JoltPhysics.js&#34;&gt;this&lt;/a&gt; separate project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Required CPU features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On x86 the minimal requirements are SSE2 but the library can be compiled using SSE4.1, SSE4.2, AVX, AVX2, or AVX512.&lt;/li&gt; &#xA; &lt;li&gt;On ARM64 the library requires NEON with FP16 support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The library has been tested to compile with Cl (Visual Studio 2019-2022), Clang 10+ and GCC 9+.&lt;/li&gt; &#xA; &lt;li&gt;It uses C++17 and only depends on the standard template library.&lt;/li&gt; &#xA; &lt;li&gt;It doesn&#39;t make use of compiler generated RTTI or exceptions.&lt;/li&gt; &#xA; &lt;li&gt;If you want to run on Platform Blue you&#39;ll need to provide your own build environment and PlatformBlue.h file due to NDA requirements (see Core.h for further info).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For build instructions go to the &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Build/README.md&#34;&gt;Build&lt;/a&gt; section. When upgrading from an older version of the library go to the &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Docs/ReleaseNotes.md&#34;&gt;Release Notes&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Docs/APIChanges.md&#34;&gt;API Changes&lt;/a&gt; sections.&lt;/p&gt; &#xA;&lt;h2&gt;Folder Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Assets - This folder contains assets used by the TestFramework, Samples and JoltViewer.&lt;/li&gt; &#xA; &lt;li&gt;Build - Contains everything needed to build the library, see the &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Build/README.md&#34;&gt;Build&lt;/a&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;Docs - Contains documentation for the library.&lt;/li&gt; &#xA; &lt;li&gt;HelloWorld - A simple application demonstrating how to use the Jolt Physics library.&lt;/li&gt; &#xA; &lt;li&gt;Jolt - All source code for the library is in this folder.&lt;/li&gt; &#xA; &lt;li&gt;JoltViewer - It is possible to record the output of the physics engine using the DebugRendererRecorder class (a .jor file), this folder contains the source code to an application that can visualize a recording. This is useful for e.g. visualizing the output of the PerformanceTest from different platforms. Currently available on Windows only.&lt;/li&gt; &#xA; &lt;li&gt;PerformanceTest - Contains a simple application that runs a &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Docs/PerformanceTest.md&#34;&gt;performance test&lt;/a&gt; and collects timing information.&lt;/li&gt; &#xA; &lt;li&gt;Samples - This contains the sample application, see the &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Docs/Samples.md&#34;&gt;Samples&lt;/a&gt; section. Currently available on Windows only.&lt;/li&gt; &#xA; &lt;li&gt;TestFramework - A rendering framework to visualize the results of the physics engine. Used by Samples and JoltViewer. Currently available on Windows only.&lt;/li&gt; &#xA; &lt;li&gt;UnitTests - A set of unit tests to validate the behavior of the physics engine.&lt;/li&gt; &#xA; &lt;li&gt;WebIncludes - A number of JavaScript resources used by the internal profiling framework of the physics engine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bindings For Other Languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C &lt;a href=&#34;https://github.com/michal-z/zig-gamedev/tree/main/libs/zphysics/libs&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/amerkoleci/JoltPhysicsSharp/tree/main/src/joltc&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amerkoleci/JoltPhysicsSharp&#34;&gt;C#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aecsocket/jolt-java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrouwe/JoltPhysics.js&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/michal-z/zig-gamedev/tree/main/libs/zphysics&#34;&gt;Zig&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integrations in Other Engines&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/godot-jolt/godot-jolt&#34;&gt;Godot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Joshua-Ashton/VPhysics-Jolt&#34;&gt;Source Engine&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Docs/ProjectsUsingJolt.md&#34;&gt;a list of projects that use Jolt Physics here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is distributed under the &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;All contributions are welcome! If you intend to make larger changes, please discuss first in the GitHub Discussion section. For non-trivial changes, we require that you agree to a &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/ContributorAgreement.md&#34;&gt;Contributor Agreement&lt;/a&gt;. When you create a PR, &lt;a href=&#34;https://cla-assistant.io/&#34;&gt;CLA assistant&lt;/a&gt; will prompt you to sign it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chiteroman/PlayIntegrityFix</title>
    <updated>2023-11-26T01:47:57Z</updated>
    <id>tag:github.com,2023-11-26:/chiteroman/PlayIntegrityFix</id>
    <link href="https://github.com/chiteroman/PlayIntegrityFix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fix Play Integrity (and SafetyNet) verdicts.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Play Integrity Fix&lt;/h1&gt; &#xA;&lt;p&gt;A Zygisk module which fix &#34;ctsProfileMatch&#34; (SafetyNet) and &#34;MEETS_DEVICE_INTEGRITY&#34; (Play Integrity).&lt;/p&gt; &#xA;&lt;p&gt;To use this module you must have one of this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Magisk with Zygisk enabled.&lt;/li&gt; &#xA; &lt;li&gt;KernelSU with &lt;a href=&#34;https://github.com/Dr-TSNG/ZygiskNext&#34;&gt;ZygiskNext&lt;/a&gt; module installed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chiteroman/PlayIntegrityFix/releases/latest&#34;&gt;&lt;strong&gt;Download the latest here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Telegram group&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/playintegrityfix&#34;&gt;https://t.me/playintegrityfix&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://paypal.me/chiteroman&#34;&gt;PayPal&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Official posts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xdaforums.com/t/module-play-integrity-fix-safetynet-fix.4607985/&#34;&gt;XDA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About module&lt;/h2&gt; &#xA;&lt;p&gt;It injects a classes.dex file to modify few fields in android.os.Build class. Also, in native code it creates a hook to modify system properties. The purpose of the module is to avoid a hardware attestation.&lt;/p&gt; &#xA;&lt;h2&gt;About &#39;pif.json&#39; file&lt;/h2&gt; &#xA;&lt;p&gt;You can modify this file to spoof android.os.Build fields in GMS unstable process and try to pass Device verdict. You can&#39;t use values from recent devices due this devices must use a hardware attestation.&lt;/p&gt; &#xA;&lt;h2&gt;Failing BASIC verdict&lt;/h2&gt; &#xA;&lt;p&gt;If you are failing basicIntegrity (SafetyNet) or MEETS_BASIC_INTEGRITY (Play Integrity) something is wrong in your setup. My recommended steps in order to find the problem:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Disable all modules except mine.&lt;/li&gt; &#xA; &lt;li&gt;Check your SELinux (must be enforced).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some modules which modify system can trigger DroidGuard detection, never hook GMS processes.&lt;/p&gt; &#xA;&lt;h2&gt;Certify Play Store and fix Google Wallet&lt;/h2&gt; &#xA;&lt;p&gt;Follow this steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flash my module in Magisk/KernelSU (if you already have my module, just ignore this step).&lt;/li&gt; &#xA; &lt;li&gt;Clear Google Wallet cache (if you have it).&lt;/li&gt; &#xA; &lt;li&gt;Clear Google Play Store cache and data.&lt;/li&gt; &#xA; &lt;li&gt;Clear GMS (com.google.android.gms) cache and data (or just reboot without clear and waiting some time).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reboot and done!&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Fails to meet device integrity (KernelSU)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Disable ZygiskNext&lt;/li&gt; &#xA; &lt;li&gt;Reboot&lt;/li&gt; &#xA; &lt;li&gt;Enable ZygiskNext&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Passes device integrity, but fails in Wallet (even after clearing cache)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remove all data from Google Play Services&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Guide&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chiteroman/PlayIntegrityFix/main/wallet-troubleshoot-1.jpg&#34; alt=&#34;Google services cache&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/chiteroman/PlayIntegrityFix/main/wallet-troubleshoot-2.jpg&#34; alt=&#34;Removing all data&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Read module logs&lt;/h2&gt; &#xA;&lt;p&gt;You can read module logs using this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;adb shell &#34;logcat | grep &#39;PIF&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Can this module pass MEETS_STRONG_INTEGRITY?&lt;/h2&gt; &#xA;&lt;p&gt;No.&lt;/p&gt; &#xA;&lt;h2&gt;About Play Integrity, SafetyNet is deprecated&lt;/h2&gt; &#xA;&lt;p&gt;You can read more info here: &lt;a href=&#34;https://xdaforums.com/t/info-play-integrity-api-replacement-for-safetynet.4479337/&#34;&gt;click me&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>drogonframework/drogon</title>
    <updated>2023-11-26T01:47:57Z</updated>
    <id>tag:github.com,2023-11-26:/drogonframework/drogon</id>
    <link href="https://github.com/drogonframework/drogon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Drogon: A C++14/17/20 based HTTP web application framework running on Linux/macOS/Unix/Windows&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/an-tao/drogon/wiki/images/drogon-white17.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/drogonframework/drogon/actions&#34;&gt;&lt;img src=&#34;https://github.com/an-tao/drogon/workflows/Build%20Drogon/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/drogon-web/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/drogon-web/community.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/drogon-web/community&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/joinchat/_mMNGv0748ZkMDAx&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-2CA5E0?style=flat&amp;amp;logo=telegram&amp;amp;logoColor=white&#34; alt=&#34;Join the telegram group at https://t.me/joinchat/_mMNGv0748ZkMDAx&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud.docker.com/u/drogonframework/repository/docker/drogonframework/drogon&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Docker-image-blue.svg?sanitize=true&#34; alt=&#34;Docker image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/drogonframework/drogon/master/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/drogonframework/drogon/master/README.zh-TW.md&#34;&gt;繁體中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Drogon&lt;/strong&gt; is a C++17/20 based HTTP application framework. Drogon can be used to easily build various types of web application server programs using C++. &lt;strong&gt;Drogon&lt;/strong&gt; is the name of a dragon in the American TV series &#34;Game of Thrones&#34; that I really like.&lt;/p&gt; &#xA;&lt;p&gt;Drogon is a cross-platform framework, It supports Linux, macOS, FreeBSD, OpenBSD, HaikuOS, and Windows. Its main features are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use a non-blocking I/O network lib based on epoll (kqueue under macOS/FreeBSD) to provide high-concurrency, high-performance network IO, please visit the &lt;a href=&#34;https://www.techempower.com/benchmarks/#section=data-r19&amp;amp;hw=ph&amp;amp;test=composite&#34;&gt;TFB Tests Results&lt;/a&gt; for more details;&lt;/li&gt; &#xA; &lt;li&gt;Provide a completely asynchronous programming mode;&lt;/li&gt; &#xA; &lt;li&gt;Support Http1.0/1.1 (server side and client side);&lt;/li&gt; &#xA; &lt;li&gt;Based on template, a simple reflection mechanism is implemented to completely decouple the main program framework, controllers and views.&lt;/li&gt; &#xA; &lt;li&gt;Support cookies and built-in sessions;&lt;/li&gt; &#xA; &lt;li&gt;Support back-end rendering, the controller generates the data to the view to generate the Html page. Views are described by CSP template files, C++ codes are embedded into Html pages through CSP tags. And the drogon command-line tool automatically generates the C++ code files for compilation;&lt;/li&gt; &#xA; &lt;li&gt;Support view page dynamic loading (dynamic compilation and loading at runtime);&lt;/li&gt; &#xA; &lt;li&gt;Provide a convenient and flexible routing solution from the path to the controller handler;&lt;/li&gt; &#xA; &lt;li&gt;Support filter chains to facilitate the execution of unified logic (such as login verification, Http Method constraint verification, etc.) before handling HTTP requests;&lt;/li&gt; &#xA; &lt;li&gt;Support https (based on OpenSSL);&lt;/li&gt; &#xA; &lt;li&gt;Support WebSocket (server side and client side);&lt;/li&gt; &#xA; &lt;li&gt;Support JSON format request and response, very friendly to the Restful API application development;&lt;/li&gt; &#xA; &lt;li&gt;Support file download and upload;&lt;/li&gt; &#xA; &lt;li&gt;Support gzip, brotli compression transmission;&lt;/li&gt; &#xA; &lt;li&gt;Support pipelining;&lt;/li&gt; &#xA; &lt;li&gt;Provide a lightweight command line tool, drogon_ctl, to simplify the creation of various classes in Drogon and the generation of view code;&lt;/li&gt; &#xA; &lt;li&gt;Support non-blocking I/O based asynchronously reading and writing database (PostgreSQL and MySQL(MariaDB) database);&lt;/li&gt; &#xA; &lt;li&gt;Support asynchronously reading and writing sqlite3 database based on thread pool;&lt;/li&gt; &#xA; &lt;li&gt;Support Redis with asynchronous reading and writing;&lt;/li&gt; &#xA; &lt;li&gt;Support ARM Architecture;&lt;/li&gt; &#xA; &lt;li&gt;Provide a convenient lightweight ORM implementation that supports for regular object-to-database bidirectional mapping;&lt;/li&gt; &#xA; &lt;li&gt;Support plugins which can be installed by the configuration file at load time;&lt;/li&gt; &#xA; &lt;li&gt;Support AOP with build-in joinpoints.&lt;/li&gt; &#xA; &lt;li&gt;Support C++ coroutines&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;A very simple example&lt;/h2&gt; &#xA;&lt;p&gt;Unlike most C++ frameworks, the main program of the drogon application can be kept clean and simple. Drogon uses a few tricks to decouple controllers from the main program. The routing settings of controllers can be done through macros or configuration file.&lt;/p&gt; &#xA;&lt;p&gt;Below is the main program of a typical drogon application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;drogon/drogon.h&amp;gt;&#xA;using namespace drogon;&#xA;int main()&#xA;{&#xA;    app().setLogPath(&#34;./&#34;)&#xA;         .setLogLevel(trantor::Logger::kWarn)&#xA;         .addListener(&#34;0.0.0.0&#34;, 80)&#xA;         .setThreadNum(16)&#xA;         .enableRunAsDaemon()&#xA;         .run();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can be further simplified by using configuration file as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;drogon/drogon.h&amp;gt;&#xA;using namespace drogon;&#xA;int main()&#xA;{&#xA;    app().loadConfigFile(&#34;./config.json&#34;).run();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Drogon provides some interfaces for adding controller logic directly in the main() function, for example, user can register a handler like this in Drogon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;app().registerHandler(&#34;/test?username={name}&#34;,&#xA;                    [](const HttpRequestPtr&amp;amp; req,&#xA;                       std::function&amp;lt;void (const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback,&#xA;                       const std::string &amp;amp;name)&#xA;                    {&#xA;                        Json::Value json;&#xA;                        json[&#34;result&#34;]=&#34;ok&#34;;&#xA;                        json[&#34;message&#34;]=std::string(&#34;hello,&#34;)+name;&#xA;                        auto resp=HttpResponse::newHttpJsonResponse(json);&#xA;                        callback(resp);&#xA;                    },&#xA;                    {Get,&#34;LoginFilter&#34;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While such interfaces look intuitive, they are not suitable for complex business logic scenarios. Assuming there are tens or even hundreds of handlers that need to be registered in the framework, isn&#39;t it a better practice to implement them separately in their respective classes? So unless your logic is very simple, we don&#39;t recommend using above interfaces. Instead, we can create an HttpSimpleController as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/// The TestCtrl.h file&#xA;#pragma once&#xA;#include &amp;lt;drogon/HttpSimpleController.h&amp;gt;&#xA;using namespace drogon;&#xA;class TestCtrl:public drogon::HttpSimpleController&amp;lt;TestCtrl&amp;gt;&#xA;{&#xA;public:&#xA;    void asyncHandleHttpRequest(const HttpRequestPtr&amp;amp; req, std::function&amp;lt;void (const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback) override;&#xA;    PATH_LIST_BEGIN&#xA;    PATH_ADD(&#34;/test&#34;,Get);&#xA;    PATH_LIST_END&#xA;};&#xA;&#xA;/// The TestCtrl.cc file&#xA;#include &#34;TestCtrl.h&#34;&#xA;void TestCtrl::asyncHandleHttpRequest(const HttpRequestPtr&amp;amp; req,&#xA;                                      std::function&amp;lt;void (const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback)&#xA;{&#xA;    //write your application logic here&#xA;    auto resp = HttpResponse::newHttpResponse();&#xA;    resp-&amp;gt;setBody(&#34;&amp;lt;p&amp;gt;Hello, world!&amp;lt;/p&amp;gt;&#34;);&#xA;    resp-&amp;gt;setExpiredTime(0);&#xA;    callback(resp);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Most of the above programs can be automatically generated by the command line tool &lt;code&gt;drogon_ctl&lt;/code&gt; provided by drogon&lt;/strong&gt; (The command is &lt;code&gt;drogon_ctl create controller TestCtrl&lt;/code&gt;). All the user needs to do is add their own business logic. In the example, the controller returns a &lt;code&gt;Hello, world!&lt;/code&gt; string when the client accesses the &lt;code&gt;http://ip/test&lt;/code&gt; URL.&lt;/p&gt; &#xA;&lt;p&gt;For JSON format response, we create the controller as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/// The header file&#xA;#pragma once&#xA;#include &amp;lt;drogon/HttpSimpleController.h&amp;gt;&#xA;using namespace drogon;&#xA;class JsonCtrl : public drogon::HttpSimpleController&amp;lt;JsonCtrl&amp;gt;&#xA;{&#xA;  public:&#xA;    void asyncHandleHttpRequest(const HttpRequestPtr &amp;amp;req, std::function&amp;lt;void(const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback) override;&#xA;    PATH_LIST_BEGIN&#xA;    //list path definitions here;&#xA;    PATH_ADD(&#34;/json&#34;, Get);&#xA;    PATH_LIST_END&#xA;};&#xA;&#xA;/// The source file&#xA;#include &#34;JsonCtrl.h&#34;&#xA;void JsonCtrl::asyncHandleHttpRequest(const HttpRequestPtr &amp;amp;req,&#xA;                                      std::function&amp;lt;void(const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback)&#xA;{&#xA;    Json::Value ret;&#xA;    ret[&#34;message&#34;] = &#34;Hello, World!&#34;;&#xA;    auto resp = HttpResponse::newHttpJsonResponse(ret);&#xA;    callback(resp);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s go a step further and create a demo RESTful API with the HttpController class, as shown below (Omit the source file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/// The header file&#xA;#pragma once&#xA;#include &amp;lt;drogon/HttpController.h&amp;gt;&#xA;using namespace drogon;&#xA;namespace api&#xA;{&#xA;namespace v1&#xA;{&#xA;class User : public drogon::HttpController&amp;lt;User&amp;gt;&#xA;{&#xA;  public:&#xA;    METHOD_LIST_BEGIN&#xA;    //use METHOD_ADD to add your custom processing function here;&#xA;    METHOD_ADD(User::getInfo, &#34;/{id}&#34;, Get);                  //path is /api/v1/User/{arg1}&#xA;    METHOD_ADD(User::getDetailInfo, &#34;/{id}/detailinfo&#34;, Get);  //path is /api/v1/User/{arg1}/detailinfo&#xA;    METHOD_ADD(User::newUser, &#34;/{name}&#34;, Post);                 //path is /api/v1/User/{arg1}&#xA;    METHOD_LIST_END&#xA;    //your declaration of processing function maybe like this:&#xA;    void getInfo(const HttpRequestPtr &amp;amp;req, std::function&amp;lt;void(const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback, int userId) const;&#xA;    void getDetailInfo(const HttpRequestPtr &amp;amp;req, std::function&amp;lt;void(const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback, int userId) const;&#xA;    void newUser(const HttpRequestPtr &amp;amp;req, std::function&amp;lt;void(const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback, std::string &amp;amp;&amp;amp;userName);&#xA;  public:&#xA;    User()&#xA;    {&#xA;        LOG_DEBUG &amp;lt;&amp;lt; &#34;User constructor!&#34;;&#xA;    }&#xA;};&#xA;} // namespace v1&#xA;} // namespace api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, users can use the &lt;code&gt;HttpController&lt;/code&gt; to map paths and parameters at the same time. This is a very convenient way to create a RESTful API application.&lt;/p&gt; &#xA;&lt;p&gt;In addition, you can also find that all handler interfaces are in asynchronous mode, where the response is returned by a callback object. This design is for performance reasons because in asynchronous mode the drogon application can handle a large number of concurrent requests with a small number of threads.&lt;/p&gt; &#xA;&lt;p&gt;After compiling all of the above source files, we get a very simple web application. This is a good start. &lt;strong&gt;For more information, please visit the &lt;a href=&#34;https://github.com/an-tao/drogon/wiki/ENG-01-Overview&#34;&gt;wiki&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cross-compilation&lt;/h2&gt; &#xA;&lt;p&gt;Drogon supports cross-compilation, you should define the &lt;code&gt;CMAKE_SYSTEM_NAME&lt;/code&gt; in toolchain file, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;set(CMAKE_SYSTEM_NAME Linux)&#xA;set(CMAKE_SYSTEM_PROCESSOR arm)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can disable building options for examples and drogon_ctl by settings &lt;code&gt;BUILD_EXAMPLES&lt;/code&gt; and &lt;code&gt;BUILD_CTL&lt;/code&gt; to &lt;code&gt;OFF&lt;/code&gt; in the toolchain file.&lt;/p&gt; &#xA;&lt;h2&gt;Building options&lt;/h2&gt; &#xA;&lt;p&gt;Drogon provides some building options, you can enable or disable them by setting the corresponding variables to &lt;code&gt;ON&lt;/code&gt; or &lt;code&gt;OFF&lt;/code&gt; in the cmake command line, cmake file etc...&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Option name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;BUILD_CTL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build drogon_ctl&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;BUILD_EXAMPLES&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build examples&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;BUILD_ORM&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build orm&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;COZ_PROFILING&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use coz for profiling&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;BUILD_SHARED_LIBS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build drogon as a shared lib&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;BUILD_DOC&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build Doxygen documentation&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;BUILD_BROTLI&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build Brotli&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;BUILD_YAML_CONFIG&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build yaml config&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;USE_SUBMODULE&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use trantor as a submodule&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/drogonframework/drogon/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contributors-svg.opencollective.com/drogon/contributors.svg?width=890&amp;amp;button=false&#34; alt=&#34;Code contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Every contribution is welcome. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/drogonframework/drogon/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>