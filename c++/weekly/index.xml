<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-22T01:37:03Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stenzek/duckstation</title>
    <updated>2024-09-22T01:37:03Z</updated>
    <id>tag:github.com,2024-09-22:/stenzek/duckstation</id>
    <link href="https://github.com/stenzek/duckstation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast PlayStation 1 emulator for x86-64/AArch32/AArch64/RV64&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DuckStation - PlayStation 1, aka. PSX Emulator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#features&#34;&gt;Features&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#downloading-and-running&#34;&gt;Downloading and Running&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#building&#34;&gt;Building&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#disclaimers&#34;&gt;Disclaimers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Latest Builds for Windows 10/11 (x64/ARM64), Linux (AppImage/Flatpak), and macOS (11.0+ Universal):&lt;/strong&gt; &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/tag/latest&#34;&gt;https://github.com/stenzek/duckstation/releases/tag/latest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Game Compatibility List:&lt;/strong&gt; &lt;a href=&#34;https://docs.google.com/spreadsheets/d/e/2PACX-1vRE0jjiK_aldpICoy5kVQlpk2f81Vo6P4p9vfg4d7YoTOoDlH4PQHoXjTD2F7SdN8SSBLoEAItaIqQo/pubhtml&#34;&gt;https://docs.google.com/spreadsheets/d/e/2PACX-1vRE0jjiK_aldpICoy5kVQlpk2f81Vo6P4p9vfg4d7YoTOoDlH4PQHoXjTD2F7SdN8SSBLoEAItaIqQo/pubhtml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Discord Server:&lt;/strong&gt; &lt;a href=&#34;https://www.duckstation.org/discord.html&#34;&gt;https://www.duckstation.org/discord.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DuckStation is an simulator/emulator of the Sony PlayStation(TM) console, focusing on playability, speed, and long-term maintainability. The goal is to be as accurate as possible while maintaining performance suitable for low-end devices. &#34;Hack&#34; options are discouraged, the default configuration should support all playable games with only some of the enhancements having compatibility issues.&lt;/p&gt; &#xA;&lt;p&gt;A PS1 or PS2 &#34;BIOS&#34; ROM image is required to to start the emulator and to play games. You can use an image from any hardware version or region, although mismatching game regions and BIOS regions may have compatibility issues. A ROM image is not provided with the emulator for legal reasons, you should dump this from your own console using Caetla or other means.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;DuckStation features a fully-featured frontend built using Qt, as well as a fullscreen/TV UI based on Dear ImGui.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/main-qt.png&#34; alt=&#34;Main Window Screenshot&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/bigduck.png&#34; alt=&#34;Fullscreen UI Screenshot&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Other features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU Recompiler/JIT (x86-64, armv7/AArch32, AArch64, RISC-V/RV64).&lt;/li&gt; &#xA; &lt;li&gt;Hardware (D3D11, D3D12, OpenGL, Vulkan, Metal) and software rendering.&lt;/li&gt; &#xA; &lt;li&gt;Upscaling, texture filtering, and true colour (24-bit) in hardware renderers.&lt;/li&gt; &#xA; &lt;li&gt;Accurate blending via Rasterizer Order Views/Fragment Shader Interlock.&lt;/li&gt; &#xA; &lt;li&gt;PGXP for geometry precision, texture correction, and depth buffer emulation.&lt;/li&gt; &#xA; &lt;li&gt;Motion adaptive deinterlacing.&lt;/li&gt; &#xA; &lt;li&gt;Adaptive downsampling filter.&lt;/li&gt; &#xA; &lt;li&gt;Screen rotation for vertical or &#34;TATE&#34; shmup games.&lt;/li&gt; &#xA; &lt;li&gt;Post processing shader chains (GLSL and Reshade FX).&lt;/li&gt; &#xA; &lt;li&gt;&#34;Fast boot&#34; for skipping BIOS splash/intro.&lt;/li&gt; &#xA; &lt;li&gt;Save state support, with runahead and rewind.&lt;/li&gt; &#xA; &lt;li&gt;Windows, Linux, macOS support.&lt;/li&gt; &#xA; &lt;li&gt;Supports reading directly from CD, bin/cue images, raw bin/img files, MAME CHD, single-track ECM, MDS/MDF, and unencrypted PBP formats.&lt;/li&gt; &#xA; &lt;li&gt;Preloading of disc images to RAM to avoid disk sleeping hitches.&lt;/li&gt; &#xA; &lt;li&gt;Automatic loading/applying of PPF patches.&lt;/li&gt; &#xA; &lt;li&gt;Direct booting of homebrew executables.&lt;/li&gt; &#xA; &lt;li&gt;Direct loading of Portable Sound Format (psf) files.&lt;/li&gt; &#xA; &lt;li&gt;Time stretched audio when running outside of 100% speed, and surround sound expansion.&lt;/li&gt; &#xA; &lt;li&gt;Digital and analog controllers for input (rumble is forwarded to host).&lt;/li&gt; &#xA; &lt;li&gt;GunCon and Justifier lightgun support (simulated with mouse).&lt;/li&gt; &#xA; &lt;li&gt;NeGcon support.&lt;/li&gt; &#xA; &lt;li&gt;Qt and &#34;Big Picture&#34; UI.&lt;/li&gt; &#xA; &lt;li&gt;Automatic updates with preview and latest channels.&lt;/li&gt; &#xA; &lt;li&gt;Automatic content scanning - game titles/hashes are provided by redump.org.&lt;/li&gt; &#xA; &lt;li&gt;Optional automatic switching of memory cards for each game.&lt;/li&gt; &#xA; &lt;li&gt;Supports loading cheats from existing lists.&lt;/li&gt; &#xA; &lt;li&gt;Memory card editor and save importer.&lt;/li&gt; &#xA; &lt;li&gt;Emulated CPU overclocking.&lt;/li&gt; &#xA; &lt;li&gt;Integrated and remote debugging.&lt;/li&gt; &#xA; &lt;li&gt;Multitap controllers (up to 8 devices).&lt;/li&gt; &#xA; &lt;li&gt;RetroAchievements.&lt;/li&gt; &#xA; &lt;li&gt;Discord Rich Presence.&lt;/li&gt; &#xA; &lt;li&gt;Video capture with Media Foundation (Windows) and &lt;a href=&#34;https://www.ffmpeg.org/&#34;&gt;FFmpeg&lt;/a&gt; (All Platforms) backends.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A CPU faster than a potato. But it needs to be x86_64 (SSE4.1), AArch32/armv7, AArch64/ARMv8, or RISC-V/RV64.&lt;/li&gt; &#xA; &lt;li&gt;For the hardware renderers, a GPU capable of OpenGL 3.1/OpenGL ES 3.1/Direct3D 11 Feature Level 10.0 (or Vulkan 1.0) and above. So, basically anything made in the last 10 years or so.&lt;/li&gt; &#xA; &lt;li&gt;SDL, XInput or DInput compatible game controller (e.g. XB360/XBOne/XBSeries). DualShock 3 users on Windows will need to install the official DualShock 3 drivers included as part of PlayStation Now.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloading and running&lt;/h2&gt; &#xA;&lt;p&gt;Binaries of DuckStation for Windows x64/ARM64, Linux x86_64 (in AppImage/Flatpak formats), and macOS Universal Binaries are available via GitHub Releases and are automatically built with every commit/push.&lt;/p&gt; &#xA;&lt;p&gt;As per the terms of CC-BY-NC-ND, redistribution of &lt;strong&gt;unmodified releases and code&lt;/strong&gt; is permitted. However, we would prefer if you linked to &lt;a href=&#34;https://www.duckstation.org/&#34;&gt;https://www.duckstation.org/&lt;/a&gt; instead. Please note that pre-configured settings and packages are considered modifications.&lt;/p&gt; &#xA;&lt;p&gt;For x86 machines (most systems), you will need a CPU that supports the SSE4.1 instruction set. This includes all CPUs manufactured after 2007. If you want to use DuckStation with a CPU that is older, &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/tag/v0.1-6995&#34;&gt;v0.1-6995&lt;/a&gt; is the last version that does not require SSE4.1.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;DuckStation &lt;strong&gt;requires&lt;/strong&gt; Windows 10/11, specifically version 1809 or newer. If you are still using Windows 7/8/8.1, DuckStation &lt;strong&gt;will not run&lt;/strong&gt; on your operating system. Running these operating systems in 2023 should be considered a security risk, and I would recommend updating to something which receives vendor support. If you must use an older operating system, &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/tag/v0.1-5624&#34;&gt;v0.1-5624&lt;/a&gt; is the last version which will run. But do not expect to recieve any assistance, these builds are no longer supported.&lt;/p&gt; &#xA;&lt;p&gt;To download:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/tag/latest&#34;&gt;https://github.com/stenzek/duckstation/releases/tag/latest&lt;/a&gt;, and download the Windows x64 build. This is a zip archive containing the prebuilt binary.&lt;/li&gt; &#xA; &lt;li&gt;Alternatively, direct download link: &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/download/latest/duckstation-windows-x64-release.zip&#34;&gt;https://github.com/stenzek/duckstation/releases/download/latest/duckstation-windows-x64-release.zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract the archive &lt;strong&gt;to a subdirectory&lt;/strong&gt;. The archive has no root subdirectory, so extracting to the current directory will drop a bunch of files in your download directory if you do not extract to a subdirectory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once downloaded and extracted, you can launch the emulator with &lt;code&gt;duckstation-qt-x64-ReleaseLTCG.exe&lt;/code&gt;. Follow the Setup Wizard to get started.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you get an error about &lt;code&gt;vcruntime140_1.dll&lt;/code&gt; being missing, you will need to update your Visual C++ runtime.&lt;/strong&gt; You can do that from this page: &lt;a href=&#34;https://support.microsoft.com/en-au/help/2977003/the-latest-supported-visual-c-downloads&#34;&gt;https://support.microsoft.com/en-au/help/2977003/the-latest-supported-visual-c-downloads&lt;/a&gt;. Specifically, you want the x64 runtime, which can be downloaded from &lt;a href=&#34;https://aka.ms/vs/17/release/vc_redist.x64.exe&#34;&gt;https://aka.ms/vs/17/release/vc_redist.x64.exe&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;DuckStation is provided for x86_64 Linux in AppImage and Flatpak formats. The release on &lt;a href=&#34;https://flathub.org/apps/org.duckstation.DuckStation&#34;&gt;Flathub&lt;/a&gt; is official, and synchronized with the latest rolling/stable release on GitHub.&lt;/p&gt; &#xA;&lt;h4&gt;AppImage&lt;/h4&gt; &#xA;&lt;p&gt;The AppImages require a distribution equivalent to Ubuntu 22.04 or newer to run.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/tag/latest&#34;&gt;https://github.com/stenzek/duckstation/releases/tag/latest&lt;/a&gt;, and download &lt;code&gt;duckstation-x64.AppImage&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;chmod a+x&lt;/code&gt; on the downloaded AppImage -- following this step, the AppImage can be run like a typical executable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Flatpak&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/tag/latest&#34;&gt;https://github.com/stenzek/duckstation/releases/tag/latest&lt;/a&gt;, and download &lt;code&gt;duckstation-x64.flatpak&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;flatpak install ./duckstation-x64.flatpak&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or, if you have FlatHub set up:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;flatpak install org.duckstation.DuckStation&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use &lt;code&gt;flatpak run org.duckstation.DuckStation&lt;/code&gt; to start, or select &lt;code&gt;DuckStation&lt;/code&gt; in the launcher of your desktop environment. Follow the Setup Wizard to get started.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Universal MacOS builds are provided for both x64 and ARM64 (Apple Silicon).&lt;/p&gt; &#xA;&lt;p&gt;MacOS Big Sir (11.0) is required, as this is also the minimum requirement for Qt.&lt;/p&gt; &#xA;&lt;p&gt;To download:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/tag/latest&#34;&gt;https://github.com/stenzek/duckstation/releases/tag/latest&lt;/a&gt;, and download &lt;code&gt;duckstation-mac-release.zip&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Extract the zip by double-clicking it.&lt;/li&gt; &#xA; &lt;li&gt;Open DuckStation.app, optionally moving it to your desired location first.&lt;/li&gt; &#xA; &lt;li&gt;Depending on GateKeeper configuration, you may need to right click -&amp;gt; Open the first time you run it, as code signing certificates are out of the question for a project which brings in zero revenue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;You will need a device with armv7 (32-bit ARM), AArch64 (64-bit ARM), or x86_64 (64-bit x86). 64-bit is preferred, the requirements are higher for 32-bit, you&#39;ll probably want at least a 1.5GHz CPU.&lt;/p&gt; &#xA;&lt;p&gt;Download from Google Play: &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.github.stenzek.duckstation&#34;&gt;https://play.google.com/store/apps/details?id=com.github.stenzek.duckstation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;APK and Beta Downloads: &lt;a href=&#34;https://www.duckstation.org/android/&#34;&gt;https://www.duckstation.org/android/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;No support is provided for the Android app&lt;/strong&gt;, it is free and your expectations should be in line with that. Please &lt;strong&gt;do not&lt;/strong&gt; email me about issues about it, or ask for help, you will be ignored.&lt;/p&gt; &#xA;&lt;p&gt;To use:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install and run the app for the first time.&lt;/li&gt; &#xA; &lt;li&gt;Follow the setup wizard.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you have an external controller, you will need to map the buttons and sticks in settings.&lt;/p&gt; &#xA;&lt;h3&gt;LibCrypt protection and SBI files&lt;/h3&gt; &#xA;&lt;p&gt;A number of PAL region games use LibCrypt protection, requiring additional CD subchannel information to run properly. libcrypt not functioning usually manifests as hanging or crashing, but can sometimes affect gameplay too, depending on how the game implemented it.&lt;/p&gt; &#xA;&lt;p&gt;For these games, make sure that the CD image and its corresponding SBI (.sbi) file have the same name and are placed in the same directory. DuckStation will automatically load the SBI file when it is found next to the CD image.&lt;/p&gt; &#xA;&lt;p&gt;For example, if your disc image was named &lt;code&gt;Spyro3.cue&lt;/code&gt;, you would place the SBI file in the same directory, and name it &lt;code&gt;Spyro3.sbi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;CHD images with built-in subchannel information are also supported.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2022&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the respository: &lt;code&gt;git clone https://github.com/stenzek/duckstation.git&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Download the dependencies pack from &lt;a href=&#34;https://github.com/stenzek/duckstation-ext-qt-minimal/releases/download/latest/deps-x64.7z&#34;&gt;https://github.com/stenzek/duckstation-ext-qt-minimal/releases/download/latest/deps-x64.7z&lt;/a&gt;, and extract it to &lt;code&gt;dep\msvc&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open the Visual Studio solution &lt;code&gt;duckstation.sln&lt;/code&gt; in the root, or &#34;Open Folder&#34; for cmake build.&lt;/li&gt; &#xA; &lt;li&gt;Build solution.&lt;/li&gt; &#xA; &lt;li&gt;Binaries are located in &lt;code&gt;bin/x64&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;duckstation-qt-x64-Release.exe&lt;/code&gt; or whichever config you used.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Required Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;Ubuntu/Debian package names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;autoconf automake build-essential clang cmake curl extra-cmake-modules git libasound2-dev libcurl4-openssl-dev libdbus-1-dev libdecor-0-dev libegl-dev libevdev-dev libfontconfig-dev libfreetype-dev libgtk-3-dev libgudev-1.0-dev libharfbuzz-dev libinput-dev libopengl-dev libpipewire-0.3-dev libpulse-dev libssl-dev libudev-dev libwayland-dev libx11-dev libx11-xcb-dev libxcb1-dev libxcb-composite0-dev libxcb-cursor-dev libxcb-damage0-dev libxcb-glx0-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-present-dev libxcb-randr0-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-shape0-dev libxcb-shm0-dev libxcb-sync-dev libxcb-util-dev libxcb-xfixes0-dev libxcb-xinput-dev libxcb-xkb-dev libxext-dev libxkbcommon-x11-dev libxrandr-dev libtool lld llvm nasm ninja-build pkg-config zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fedora package names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;alsa-lib-devel autoconf automake brotli-devel clang cmake dbus-devel egl-wayland-devel extra-cmake-modules fontconfig-devel gcc-c++ gtk3-devel libavcodec-free-devel libavformat-free-devel libavutil-free-devel libcurl-devel libdecor-devel libevdev-devel libICE-devel libinput-devel libSM-devel libswresample-free-devel libswscale-free-devel libX11-devel libXau-devel libxcb-devel libXcomposite-devel libXcursor-devel libXext-devel libXfixes-devel libXft-devel libXi-devel libxkbcommon-devel libxkbcommon-x11-devel libXpresent-devel libXrandr-devel libXrender-devel libtool lld llvm make mesa-libEGL-devel mesa-libGL-devel nasm ninja-build openssl-devel patch pcre2-devel perl-Digest-SHA pipewire-devel pulseaudio-libs-devel systemd-devel wayland-devel xcb-util-cursor-devel xcb-util-devel xcb-util-errors-devel xcb-util-image-devel xcb-util-keysyms-devel xcb-util-renderutil-devel xcb-util-wm-devel xcb-util-xrm-devel zlib-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Building&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository: &lt;code&gt;git clone https://github.com/stenzek/duckstation.git&lt;/code&gt;, &lt;code&gt;cd duckstation&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Build dependencies. You can save these outside of the tree if you like. This will take a while. &lt;code&gt;scripts/deps/build-dependencies-linux.sh deps&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run CMake to configure the build system. Assuming a build subdirectory of &lt;code&gt;build-release&lt;/code&gt;, run &lt;code&gt;cmake -B build-release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_EXE_LINKER_FLAGS_INIT=&#34;-fuse-ld=lld&#34; -DCMAKE_MODULE_LINKER_FLAGS_INIT=&#34;-fuse-ld=lld&#34; -DCMAKE_SHARED_LINKER_FLAGS_INIT=&#34;-fuse-ld=lld&#34; -DCMAKE_PREFIX_PATH=&#34;$PWD/deps&#34; -G Ninja&lt;/code&gt;. If you want a release (optimized) build, include &lt;code&gt;-DCMAKE_BUILD_TYPE=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Compile the source code. For the example above, run &lt;code&gt;ninja -C build-release&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the binary, located in the build directory under &lt;code&gt;./build-release/bin/duckstation-qt&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CMake&lt;/li&gt; &#xA; &lt;li&gt;Xcode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository: &lt;code&gt;git clone https://github.com/stenzek/duckstation.git&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Build the dependencies. This will take a while. &lt;code&gt;scripts/deps/build-dependencies-mac.sh deps&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run CMake to configure the build system: &lt;code&gt;cmake -Bbuild-release -DCMAKE_BUILD_TYPE=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON -DCMAKE_PREFIX_PATH=&#34;$PWD/deps&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Compile the source code: &lt;code&gt;cmake --build build-release --parallel&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the binary, located in the build directory under &lt;code&gt;bin/DuckStation.app&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;User Directories&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;User Directory&#34; is where you should place your BIOS images, where settings are saved to, and memory cards/save states are saved by default. An optional &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#sdl-game-controller-database&#34;&gt;SDL game controller database file&lt;/a&gt; can be also placed here.&lt;/p&gt; &#xA;&lt;p&gt;This is located in the following places depending on the platform you&#39;re using:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows: My Documents\DuckStation&lt;/li&gt; &#xA; &lt;li&gt;Linux: &lt;code&gt;$XDG_DATA_HOME/duckstation&lt;/code&gt;, or &lt;code&gt;~/.local/share/duckstation&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;macOS: &lt;code&gt;~/Library/Application Support/DuckStation&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So, if you were using Linux, you would place your BIOS images in &lt;code&gt;~/.local/share/duckstation/bios&lt;/code&gt;. This directory will be created upon running DuckStation for the first time.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to use a &#34;portable&#34; build, where the user directory is the same as where the executable is located, create an empty file named &lt;code&gt;portable.txt&lt;/code&gt; in the same directory as the DuckStation executable.&lt;/p&gt; &#xA;&lt;h2&gt;Bindings for Qt frontend&lt;/h2&gt; &#xA;&lt;p&gt;Your keyboard or game controller can be used to simulate a variety of PlayStation controllers. Controller input is supported through DInput, XInput, and SDL backends and can be changed through &lt;code&gt;Settings -&amp;gt; Controllers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To bind your input device, go to &lt;code&gt;Settings -&amp;gt; Controllers&lt;/code&gt;, and select the virtual controller you want to map. Automatic mapping handles the majority of ocntrollers. However, if you need to manually bind a controller, click the box below the button/axis name, and press the key or button on your input device that you wish to bind to.&lt;/p&gt; &#xA;&lt;h2&gt;SDL Game Controller Database&lt;/h2&gt; &#xA;&lt;p&gt;DuckStation releases ship with a database of game controller mappings for the SDL controller backend, courtesy of &lt;a href=&#34;https://github.com/mdqinc/SDL_GameControllerDB&#34;&gt;https://github.com/mdqinc/SDL_GameControllerDB&lt;/a&gt;. The included &lt;code&gt;gamecontrollerdb.txt&lt;/code&gt; file can be found in the &lt;code&gt;resources&lt;/code&gt; subdirectory of the DuckStation program directory.&lt;/p&gt; &#xA;&lt;p&gt;If you are experiencing issues binding your controller with the SDL controller backend, you may need to add a custom mapping to the database file. Make a copy of &lt;code&gt;gamecontrollerdb.txt&lt;/code&gt; and place it in your &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#user-directories&#34;&gt;user directory&lt;/a&gt; (or directly in the program directory, if running in portable mode) and then follow the instructions in the &lt;a href=&#34;https://github.com/mdqinc/SDL_GameControllerDB&#34;&gt;SDL_GameControllerDB repository&lt;/a&gt; for creating a new mapping. Add this mapping to the new copy of &lt;code&gt;gamecontrollerdb.txt&lt;/code&gt; and your controller should then be recognized properly.&lt;/p&gt; &#xA;&lt;h2&gt;Default bindings&lt;/h2&gt; &#xA;&lt;p&gt;Bindings for controllers and hotkeys can be changed in &lt;code&gt;Settings -&amp;gt; Controllers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Controller 1:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Left Stick:&lt;/strong&gt; W/A/S/D&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Right Stick:&lt;/strong&gt; T/F/G/H&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;D-Pad:&lt;/strong&gt; Up/Left/Down/Right&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Triangle/Square/Circle/Cross:&lt;/strong&gt; I/J/L/K&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;L1/R1:&lt;/strong&gt; Q/E&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;L2/R2:&lt;/strong&gt; 1/3&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;L3/R3:&lt;/strong&gt; 2/4&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start:&lt;/strong&gt; Enter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Select:&lt;/strong&gt; Backspace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hotkeys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Escape:&lt;/strong&gt; Open Pause Menu&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;F1:&lt;/strong&gt; Load State&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;F2:&lt;/strong&gt; Save State&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;F3:&lt;/strong&gt; Select Previous Save State&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;F4:&lt;/strong&gt; Select Next Save State&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;F10:&lt;/strong&gt; Save Screenshot&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;F11:&lt;/strong&gt; Toggle Fullscreen&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tab:&lt;/strong&gt; Temporarily Disable Speed Limiter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Space:&lt;/strong&gt; Pause/Resume Emulation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimers&lt;/h2&gt; &#xA;&lt;p&gt;Icon by icons8: &lt;a href=&#34;https://icons8.com/icon/74847/platforms.undefined.short-title&#34;&gt;https://icons8.com/icon/74847/platforms.undefined.short-title&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#34;PlayStation&#34; and &#34;PSX&#34; are registered trademarks of Sony Interactive Entertainment Europe Limited. This project is not affiliated in any way with Sony Interactive Entertainment.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>deskflow/deskflow</title>
    <updated>2024-09-22T01:37:03Z</updated>
    <id>tag:github.com,2024-09-22:/deskflow/deskflow</id>
    <link href="https://github.com/deskflow/deskflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deskflow lets you share one mouse and keyboard between multiple computers on Windows, macOS and Linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Deskflow&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] We&#39;re on Libera Chat IRC network (&lt;code&gt;#deskflow&lt;/code&gt; or &lt;code&gt;#deskflow-dev&lt;/code&gt;).&lt;/p&gt; &#xA; &lt;p&gt;Or if you want to stay on GitHub, you can &lt;a href=&#34;https://github.com/deskflow/deskflow/discussions&#34;&gt;start a new discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] 🚀 Deskflow is now the upstream project for Synergy.&lt;/p&gt; &#xA; &lt;p&gt;The project has been renamed to draw a line between the community-run project (now Deskflow), and the commercially licensed product, Synergy.&lt;/p&gt; &#xA; &lt;p&gt;We are currently in the process of renaming the project to Deskflow and moving all licensing code downstream.&lt;/p&gt; &#xA; &lt;p&gt;Hold on to your butts, this is going to be a hell of a ride.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/deskflow/deskflow/discussions/7517&#34;&gt;Join the discussion&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/deskflow/deskflow/wiki/Relationship-with-Synergy&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/deskflow/deskflow-artwork/refs/heads/main/synergy-sponsor.svg?sanitize=true&#34; alt=&#34;Sponsored by: Synergy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/deskflow/deskflow/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/deskflow/deskflow?display_name=release&amp;amp;label=latest%20version&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/deskflow/deskflow/commits/master/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/deskflow/deskflow&#34; alt=&#34;GitHub commit activity&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/deskflow/deskflow&#34; alt=&#34;GitHub top language&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/deskflow/deskflow/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/deskflow/deskflow&#34; alt=&#34;GitHub License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=deskflow_deskflow&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=deskflow_deskflow&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/deskflow/deskflow/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/deskflow/deskflow/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/deskflow/deskflow/actions/workflows/codeql-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/deskflow/deskflow/actions/workflows/codeql-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;CodeQL Analysis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/deskflow/deskflow/actions/workflows/sonarcloud-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/deskflow/deskflow/actions/workflows/sonarcloud-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;SonarCloud Analysis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/deskflow/deskflow/actions/workflows/build-containers.yml&#34;&gt;&lt;img src=&#34;https://github.com/deskflow/deskflow/actions/workflows/build-containers.yml/badge.svg?sanitize=true&#34; alt=&#34;Build containers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deskflow&lt;/strong&gt; is a free and open source keyboard and mouse sharing app. Use the keyboard, mouse, or trackpad of one computer to control nearby computers, and work seamlessly between them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Wayland support:&lt;/strong&gt; Experimental support in &lt;a href=&#34;https://github.com/deskflow/deskflow/releases/tag/1.16.0-beta%2Br2&#34;&gt;Deskflow v1.16&lt;/a&gt; (required &amp;gt;= GNOME 46 or KDE Plasma 6.1).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/faf5bd69-336c-4bd0-ace3-e911f199d961&#34; alt=&#34;Deskflow&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use Deskflow you can follow the &lt;a href=&#34;https://raw.githubusercontent.com/deskflow/deskflow/master/#build-quick-start&#34;&gt;Build Quick Start&lt;/a&gt;, use one of our packages, or if it&#39;s available by your favorite package repository, install &lt;code&gt;deskflow&lt;/code&gt; (see: &lt;a href=&#34;https://raw.githubusercontent.com/deskflow/deskflow/master/#how-to-install-packages&#34;&gt;installing packages&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Project values&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Motivated by the community interests (not business-driven)&lt;/li&gt; &#xA; &lt;li&gt;Privacy by default (no update check or phone home on by default)&lt;/li&gt; &#xA; &lt;li&gt;Nothing customer-related (this is all moved downstream to Synergy)&lt;/li&gt; &#xA; &lt;li&gt;Have fun; we don&#39;t need to worry about impressing anyone&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ways to get involved&lt;/h2&gt; &#xA;&lt;p&gt;Here are a few ways to join in with the project and get involved:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build the latest &lt;code&gt;master&lt;/code&gt; version (see below) and &lt;a href=&#34;https://github.com/deskflow/deskflow/issues&#34;&gt;report a bug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deskflow/deskflow/wiki/Contributing&#34;&gt;Submit a PR&lt;/a&gt; (pull request) with a bug fix or improvement&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deskflow/deskflow/issues&#34;&gt;Let us know&lt;/a&gt; if you have an idea for an improvement&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Quick Start&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Check the &lt;a href=&#34;https://github.com/deskflow/deskflow/wiki/Build-Guide&#34;&gt;Build Guide&lt;/a&gt; wiki page if you have problems.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Dependencies:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can either copy/paste the commands for your OS from &lt;a href=&#34;https://raw.githubusercontent.com/deskflow/deskflow/master/config.yaml&#34;&gt;&lt;code&gt;config.yaml&lt;/code&gt;&lt;/a&gt; or use the deps script.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Linux, macOS, or BSD-derived:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./scripts/install_deps.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Windows:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/install_deps.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Configure:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Linux, macOS, or BSD-derived:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -B build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Windows:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -B build --preset=windows-release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Build:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake --build build -j8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Test:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build/bin/unittests&#xA;./build/bin/integtests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. Run&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build/bin/deskflow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to install (packages)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;macOS:&lt;/em&gt; &lt;em&gt;(coming soon)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install deskflow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Fedora, Red Hat, etc:&lt;/em&gt; &lt;em&gt;(coming soon)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo dnf install deskflow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Debian, Ubuntu, etc:&lt;/em&gt; &lt;em&gt;(coming soon)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install deskflow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Arch, Manjaro, etc:&lt;/em&gt; &lt;em&gt;(coming soon)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pacman -S deskflow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Windows:&lt;/em&gt; &lt;em&gt;(coming soon)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install deskflow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We are working with package maintainers to have our new package name adopted.&lt;/p&gt; &#xA;&lt;h2&gt;Operating Systems&lt;/h2&gt; &#xA;&lt;p&gt;We support all major operating systems, including Windows, macOS, Linux, and Unix-like BSD-derived.&lt;/p&gt; &#xA;&lt;p&gt;All Linux distributions are supported, primarily focusing on: Debian, Ubuntu, Linux Mint, Fedora, RHEL, AlmaLinux, Rocky Linux, Arch Linux, openSUSE, Gentoo.&lt;/p&gt; &#xA;&lt;p&gt;We officially support FreeBSD, and would also like to support: OpenBSD, NetBSD, DragonFly, Solaris.&lt;/p&gt; &#xA;&lt;h2&gt;Collaborative Projects&lt;/h2&gt; &#xA;&lt;p&gt;In the open source developer community, similar projects collaborate for the betterment of all mouse and keyboard sharing tools. We aim for idea sharing and interoperability.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/feschber/lan-mouse&#34;&gt;&lt;strong&gt;Lan Mouse&lt;/strong&gt;&lt;/a&gt; - Rust implementation with the goal of having native front-ends and interoperability with Deskflow/Synergy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-leap/input-leap&#34;&gt;&lt;strong&gt;Input Leap&lt;/strong&gt;&lt;/a&gt; - Deskflow/Synergy-derivative with the goal of continuing what Barrier started, after Barrier became a dead fork.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deskflow/deskflow/wiki/Relationship-with-Synergy&#34;&gt;&lt;strong&gt;Synergy&lt;/strong&gt;&lt;/a&gt; - Downstream commercial fork and Deskflow sponsor, geared toward adapting upstream to customer needs, offering business and enterprise licensing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Is Deskflow compatible with Lan Mouse or Input Leap?&lt;/h3&gt; &#xA;&lt;p&gt;We would love to see compatibility between our fellow open source projects, Lan Mouse and Input Leap. This idea is discussed from time in the communities for all of our projects, so it may happen in the not-too-distant future.&lt;/p&gt; &#xA;&lt;h3&gt;If I want to solve issues in Deskflow do I need to contribute to a fork?&lt;/h3&gt; &#xA;&lt;p&gt;We welcome PRs (pull requests) from the community. If you&#39;d like to make a change, please feel free to &lt;a href=&#34;https://github.com/deskflow/deskflow/discussions&#34;&gt;start a discussion&lt;/a&gt; or &lt;a href=&#34;https://github.com/deskflow/deskflow/wiki/Contributing&#34;&gt;open a PR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Is clipboard sharing supported?&lt;/h3&gt; &#xA;&lt;p&gt;Absolutely. The clipboard-sharing feature is a cornerstone feature of the product and we are committed to maintaining and improving that feature.&lt;/p&gt; &#xA;&lt;h3&gt;Is Wayland for Linux supported?&lt;/h3&gt; &#xA;&lt;p&gt;Yes! Wayland (the Linux display server protocol aimed to become the successor of the X Window System) is an important platform for us. The &lt;a href=&#34;https://gitlab.freedesktop.org/libinput/libei&#34;&gt;&lt;code&gt;libei&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/flatpak/libportal&#34;&gt;&lt;code&gt;libportal&lt;/code&gt;&lt;/a&gt; libraries enable Wayland support for Deskflow. We would like to give special thanks to Peter Hutterer, who is the author of &lt;code&gt;libei&lt;/code&gt;, a major contributor to &lt;code&gt;libportal&lt;/code&gt;, and the author of the Wayland implementation in Deskflow. Others such as Olivier Fourdan and Povilas Kanapickas helped with the Wayland implementation.&lt;/p&gt; &#xA;&lt;h3&gt;Where did it all start?&lt;/h3&gt; &#xA;&lt;p&gt;Deskflow was first created as Synergy in 2001 by Chris Schoeneman. Read about the &lt;a href=&#34;https://github.com/deskflow/deskflow/wiki/History&#34;&gt;history of the project&lt;/a&gt; on our wiki.&lt;/p&gt; &#xA;&lt;h2&gt;Repology&lt;/h2&gt; &#xA;&lt;p&gt;Repology monitors a huge number of package repositories and other sources comparing package versions across them and gathering other information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/deskflow/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/deskflow.svg?exclude_unsupported=1&#34; alt=&#34;Repology&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/deskflow/deskflow/master/LICENSE&#34;&gt;GPL-2.0&lt;/a&gt; with an &lt;a href=&#34;https://raw.githubusercontent.com/deskflow/deskflow/master/LICENSE_EXCEPTION&#34;&gt;OpenSSL exception&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sz3/libcimbar</title>
    <updated>2024-09-22T01:37:03Z</updated>
    <id>tag:github.com,2024-09-22:/sz3/libcimbar</id>
    <link href="https://github.com/sz3/libcimbar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Optimized implementation for color-icon-matrix barcodes&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;a href=&#34;https://github.com/sz3/cimbar&#34;&gt;INTRODUCTION&lt;/a&gt; | &lt;a href=&#34;https://github.com/sz3/cimbar/raw/master/ABOUT.md&#34;&gt;ABOUT&lt;/a&gt; | &lt;a href=&#34;https://github.com/sz3/cfc&#34;&gt;CFC&lt;/a&gt; | LIBCIMBAR&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sz3/libcimbar/master/DETAILS.md&#34;&gt;DETAILS&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/sz3/libcimbar/master/PERFORMANCE.md&#34;&gt;PERFORMANCE&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/sz3/libcimbar/master/TODO.md&#34;&gt;TODO&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;libcimbar: Color Icon Matrix Barcodes&lt;/h2&gt; &#xA;&lt;p&gt;Behold: an experimental barcode format for air-gapped data transfer.&lt;/p&gt; &#xA;&lt;p&gt;It can sustain speeds of 850 kilobits/s (~106 KB/s) using just a computer monitor and a smartphone camera!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/sz3/cimbar-samples/raw/v0.6/b/4cecc30f.png&#34; width=&#34;70%&#34; title=&#34;A non-animated mode-B cimbar code&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Explain?&lt;/h2&gt; &#xA;&lt;p&gt;The encoder outputs an animated barcode to a computer or smartphone screen:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Encoder web app: &lt;a href=&#34;https://cimbar.org&#34;&gt;https://cimbar.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While the decoder is a cell phone app that uses the phone camera to read the animated barcode:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Decoder android app: &lt;a href=&#34;https://github.com/sz3/cfc&#34;&gt;https://github.com/sz3/cfc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;No internet/bluetooth/NFC/etc is used. All data is transmitted through the camera lens. You can try it out yourself, or take my word that it works. :)&lt;/p&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cimbar&lt;/code&gt; is a high-density 2D barcode format. Data is stored in a grid of colored tiles -- bits are encoded based on which tile is chosen, and which color is chosen to draw the tile. Reed Solomon error correction is applied on the data, to account for the lossy nature of the video -&amp;gt; digital decoding. Sub-1% error rates are expected, and corrected.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;libcimbar&lt;/code&gt;, this optimized implementation, includes a simple protocol for file encoding built on fountain codes (&lt;code&gt;wirehair&lt;/code&gt;) and zstd compression. Files of up to 33MB (after compression!) are encoded in a series of cimbar codes, which can be output as images or a live video feed. Once enough distinct image frames have been decoded successfully, the file will be reconstructed and decompressed successfully. This is true even if the images are received out of order, or if some have been corrupted or are missing.&lt;/p&gt; &#xA;&lt;h2&gt;Platforms&lt;/h2&gt; &#xA;&lt;p&gt;The code is written in C++, and developed/tested on amd64+linux, arm64+android (decoder only), and emscripten+WASM (encoder only). It probably works, or can be made to work, on other platforms.&lt;/p&gt; &#xA;&lt;p&gt;Crucially, because the encoder compiles to asmjs and wasm, it can run on anything with a modern web browser. For offline use, you can either install cimbar.org as a progressive web app, or &lt;a href=&#34;https://github.com/sz3/libcimbar/releases/latest&#34;&gt;download the latest release&lt;/a&gt; of &lt;code&gt;cimbar_js.html&lt;/code&gt;, save it locally, and open it in your web browser.&lt;/p&gt; &#xA;&lt;h2&gt;Library dependencies&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencv.org/&#34;&gt;OpenCV&lt;/a&gt; and &lt;a href=&#34;https://github.com/glfw/glfw&#34;&gt;GLFW&lt;/a&gt; (+ OpenGL ES headers) must be installed before building. All other dependencies are included in the source tree.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;opencv - &lt;a href=&#34;https://opencv.org/&#34;&gt;https://opencv.org/&lt;/a&gt; (&lt;code&gt;libopencv-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;GLFW - &lt;a href=&#34;https://github.com/glfw/glfw&#34;&gt;https://github.com/glfw/glfw&lt;/a&gt; (&lt;code&gt;libglfw3-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;GLES3/gl3.h - &lt;code&gt;libgles2-mesa-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;base - &lt;a href=&#34;https://github.com/r-lyeh-archived/base&#34;&gt;https://github.com/r-lyeh-archived/base&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;catch2 - &lt;a href=&#34;https://github.com/catchorg/Catch2&#34;&gt;https://github.com/catchorg/Catch2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;concurrentqueue - &lt;a href=&#34;https://github.com/cameron314/concurrentqueue&#34;&gt;https://github.com/cameron314/concurrentqueue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;cxxopts - &lt;a href=&#34;https://github.com/jarro2783/cxxopts&#34;&gt;https://github.com/jarro2783/cxxopts&lt;/a&gt; (used for command line tools)&lt;/li&gt; &#xA; &lt;li&gt;fmt - &lt;a href=&#34;https://github.com/fmtlib/fmt&#34;&gt;https://github.com/fmtlib/fmt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;intx - &lt;a href=&#34;https://github.com/chfast/intx&#34;&gt;https://github.com/chfast/intx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;libcorrect - &lt;a href=&#34;https://github.com/quiet/libcorrect&#34;&gt;https://github.com/quiet/libcorrect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;libpopcnt - &lt;a href=&#34;https://github.com/kimwalisch/libpopcnt&#34;&gt;https://github.com/kimwalisch/libpopcnt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PicoSHA2 - &lt;a href=&#34;https://github.com/okdshin/PicoSHA2&#34;&gt;https://github.com/okdshin/PicoSHA2&lt;/a&gt; (used for testing)&lt;/li&gt; &#xA; &lt;li&gt;stb_image - &lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;https://github.com/nothings/stb&lt;/a&gt; (for loading embedded pngs)&lt;/li&gt; &#xA; &lt;li&gt;wirehair - &lt;a href=&#34;https://github.com/catid/wirehair&#34;&gt;https://github.com/catid/wirehair&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;zstd - &lt;a href=&#34;https://github.com/facebook/zstd&#34;&gt;https://github.com/facebook/zstd&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;install opencv and GLFW. On ubuntu/debian, this looks like:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install libopencv-dev libglfw3-dev libgles2-mesa-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;run the cmake + make incantation&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .&#xA;make -j7&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, libcimbar will try to install build products under &lt;code&gt;./dist/bin/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build cimbar.js (what cimbar.org uses), see &lt;a href=&#34;https://raw.githubusercontent.com/sz3/libcimbar/master/WASM.md&#34;&gt;WASM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Encode:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;large input files may fill up your disk with pngs!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;./cimbar --encode -i inputfile.txt -o outputprefix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Decode (extracts file into output directory):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./cimbar outputprefix*.png -o /tmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Decode a series of encoded images from stdin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo outputprefix*.png | ./cimbar -o /tmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Encode and animate to window:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./cimbar_send inputfile.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also encode a file using &lt;a href=&#34;https://cimbar.org&#34;&gt;cimbar.org&lt;/a&gt;, or the latest &lt;a href=&#34;https://github.com/sz3/libcimbar/releases/latest&#34;&gt;release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance numbers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sz3/libcimbar/master/PERFORMANCE.md&#34;&gt;PERFORMANCE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Implementation details&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sz3/libcimbar/master/DETAILS.md&#34;&gt;DETAILS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Room for improvement/next steps&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sz3/libcimbar/master/TODO.md&#34;&gt;TODO&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JohannesBuchner/imagehash/&#34;&gt;https://github.com/JohannesBuchner/imagehash/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/divan/txqr&#34;&gt;https://github.com/divan/txqr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/High_Capacity_Color_Barcode&#34;&gt;https://en.wikipedia.org/wiki/High_Capacity_Color_Barcode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Would you like to know more?&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/sz3/cimbar&#34;&gt;INTRODUCTION&lt;/a&gt; | &lt;a href=&#34;https://github.com/sz3/cimbar/raw/master/ABOUT.md&#34;&gt;ABOUT&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
</feed>