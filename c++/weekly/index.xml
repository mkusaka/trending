<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-23T01:40:32Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>78/xiaozhi-esp32</title>
    <updated>2025-02-23T01:40:32Z</updated>
    <id>tag:github.com,2025-02-23:/78/xiaozhi-esp32</id>
    <link href="https://github.com/78/xiaozhi-esp32" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build your own AI friend&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;小智 AI 聊天机器人 （XiaoZhi AI Chatbot）&lt;/h1&gt; &#xA;&lt;p&gt;（中文 | &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/README_en.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/README_ja.md&#34;&gt;日本語&lt;/a&gt;）&lt;/p&gt; &#xA;&lt;p&gt;这是虾哥的第一个硬件作品。&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://www.bilibili.com/video/BV11msTenEH3/&#34;&gt;ESP32+SenseVoice+Qwen72B打造你的AI聊天伴侣！【bilibili】&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://www.bilibili.com/video/BV1GQP6eNEFG/&#34;&gt;给小智装上 DeepSeek 的聪明大脑【bilibili】&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://www.bilibili.com/video/BV1XnmFYLEJN/&#34;&gt;手工打造你的 AI 女友，新手入门教程【bilibili】&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;项目目的&lt;/h2&gt; &#xA;&lt;p&gt;本项目是一个开源项目，以 MIT 许可证发布，允许任何人免费使用，并可以用于商业用途。&lt;/p&gt; &#xA;&lt;p&gt;我们希望通过这个项目，能够帮助更多人入门 AI 硬件开发，了解如何将当下飞速发展的大语言模型应用到实际的硬件设备中。无论你是对 AI 感兴趣的学生，还是想要探索新技术的开发者，都可以通过这个项目获得宝贵的学习经验。&lt;/p&gt; &#xA;&lt;p&gt;欢迎所有人参与到项目的开发和改进中来。如果你有任何想法或建议，请随时提出 Issue 或加入群聊。&lt;/p&gt; &#xA;&lt;p&gt;学习交流 QQ 群：946599635&lt;/p&gt; &#xA;&lt;h2&gt;已实现功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wi-Fi / ML307 Cat.1 4G&lt;/li&gt; &#xA; &lt;li&gt;BOOT 键唤醒和打断，支持点击和长按两种触发方式&lt;/li&gt; &#xA; &lt;li&gt;离线语音唤醒 &lt;a href=&#34;https://github.com/espressif/esp-sr&#34;&gt;ESP-SR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;流式语音对话（WebSocket 或 UDP 协议）&lt;/li&gt; &#xA; &lt;li&gt;支持国语、粤语、英语、日语、韩语 5 种语言识别 &lt;a href=&#34;https://github.com/FunAudioLLM/SenseVoice&#34;&gt;SenseVoice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;声纹识别，识别是谁在喊 AI 的名字 &lt;a href=&#34;https://github.com/modelscope/3D-Speaker&#34;&gt;3D Speaker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;大模型 TTS（火山引擎 或 CosyVoice）&lt;/li&gt; &#xA; &lt;li&gt;大模型 LLM（Qwen, DeepSeek, Doubao）&lt;/li&gt; &#xA; &lt;li&gt;可配置的提示词和音色（自定义角色）&lt;/li&gt; &#xA; &lt;li&gt;短期记忆，每轮对话后自我总结&lt;/li&gt; &#xA; &lt;li&gt;OLED / LCD 显示屏，显示信号强弱或对话内容&lt;/li&gt; &#xA; &lt;li&gt;支持 LCD 显示图片表情&lt;/li&gt; &#xA; &lt;li&gt;支持多语言（中文、英文）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;硬件部分&lt;/h2&gt; &#xA;&lt;h3&gt;面包板手工制作实践&lt;/h3&gt; &#xA;&lt;p&gt;详见飞书文档教程：&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://ccnphfhqs21z.feishu.cn/wiki/F5krwD16viZoF0kKkvDcrZNYnhb?from=from_copylink&#34;&gt;《小智 AI 聊天机器人百科全书》&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;面包板效果图如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/wiring2.jpg&#34; alt=&#34;面包板效果图&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;已支持的开源硬件&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oshwhub.com/li-chuang-kai-fa-ban/li-chuang-shi-zhan-pai-esp32-s3-kai-fa-ban&#34; target=&#34;_blank&#34; title=&#34;立创·实战派 ESP32-S3 开发板&#34;&gt;立创·实战派 ESP32-S3 开发板&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/espressif/esp-box&#34; target=&#34;_blank&#34; title=&#34;乐鑫 ESP32-S3-BOX3&#34;&gt;乐鑫 ESP32-S3-BOX3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.m5stack.com/zh_CN/core/CoreS3&#34; target=&#34;_blank&#34; title=&#34;M5Stack CoreS3&#34;&gt;M5Stack CoreS3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.m5stack.com/en/atom/Atomic%20Echo%20Base&#34; target=&#34;_blank&#34; title=&#34;AtomS3R + Echo Base&#34;&gt;AtomS3R + Echo Base&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.m5stack.com/en/core/ATOM%20Matrix&#34; target=&#34;_blank&#34; title=&#34;AtomMatrix + Echo Base&#34;&gt;AtomMatrix + Echo Base&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gf.bilibili.com/item/detail/1108782064&#34; target=&#34;_blank&#34; title=&#34;神奇按钮 2.4&#34;&gt;神奇按钮 2.4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.waveshare.net/shop/ESP32-S3-Touch-AMOLED-1.8.htm&#34; target=&#34;_blank&#34; title=&#34;微雪电子 ESP32-S3-Touch-AMOLED-1.8&#34;&gt;微雪电子 ESP32-S3-Touch-AMOLED-1.8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Xinyuan-LilyGO/T-Circle-S3&#34; target=&#34;_blank&#34; title=&#34;LILYGO T-Circle-S3&#34;&gt;LILYGO T-Circle-S3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oshwhub.com/tenclass01/xmini_c3&#34; target=&#34;_blank&#34; title=&#34;虾哥 Mini C3&#34;&gt;虾哥 Mini C3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oshwhub.com/movecall/moji-xiaozhi-ai-derivative-editi&#34; target=&#34;_blank&#34; title=&#34;Movecall Moji ESP32S3&#34;&gt;Moji 小智AI衍生版&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WMnologo/xingzhi-ai&#34; target=&#34;_blank&#34; title=&#34;无名科技Nologo-星智-1.54&#34;&gt;无名科技Nologo-星智-1.54TFT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WMnologo/xingzhi-ai&#34; target=&#34;_blank&#34; title=&#34;无名科技Nologo-星智-0.96&#34;&gt;无名科技Nologo-星智-0.96TFT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div style=&#34;display: flex; justify-content: space-between;&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/lichuang-s3.jpg&#34; target=&#34;_blank&#34; title=&#34;立创·实战派 ESP32-S3 开发板&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/lichuang-s3.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/espbox3.jpg&#34; target=&#34;_blank&#34; title=&#34;乐鑫 ESP32-S3-BOX3&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/espbox3.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/m5cores3.jpg&#34; target=&#34;_blank&#34; title=&#34;M5Stack CoreS3&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/m5cores3.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/atoms3r.jpg&#34; target=&#34;_blank&#34; title=&#34;AtomS3R + Echo Base&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/atoms3r.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/magiclick.jpg&#34; target=&#34;_blank&#34; title=&#34;神奇按钮 2.4&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/magiclick.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/waveshare.jpg&#34; target=&#34;_blank&#34; title=&#34;微雪电子 ESP32-S3-Touch-AMOLED-1.8&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/waveshare.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/lilygo-t-circle-s3.jpg&#34; target=&#34;_blank&#34; title=&#34;LILYGO T-Circle-S3&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/lilygo-t-circle-s3.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/xmini-c3.jpg&#34; target=&#34;_blank&#34; title=&#34;虾哥 Mini C3&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/xmini-c3.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/movecall-moji-esp32s3.jpg&#34; target=&#34;_blank&#34; title=&#34;Movecall Moji 小智AI衍生版&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/movecall-moji-esp32s3.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/wmnologo_xingzhi_1.54.jpg&#34; target=&#34;_blank&#34; title=&#34;无名科技Nologo-星智-1.54&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/wmnologo_xingzhi_1.54.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/wmnologo_xingzhi_0.96.jpg&#34; target=&#34;_blank&#34; title=&#34;无名科技Nologo-星智-0.96&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/wmnologo_xingzhi_0.96.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;固件部分&lt;/h2&gt; &#xA;&lt;h3&gt;免开发环境烧录&lt;/h3&gt; &#xA;&lt;p&gt;新手第一次操作建议先不要搭建开发环境，直接使用免开发环境烧录的固件。&lt;/p&gt; &#xA;&lt;p&gt;固件默认接入 &lt;a href=&#34;https://xiaozhi.me&#34;&gt;xiaozhi.me&lt;/a&gt; 官方服务器，目前个人用户注册账号可以免费使用 Qwen 实时模型。&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://ccnphfhqs21z.feishu.cn/wiki/Zpz4wXBtdimBrLk25WdcXzxcnNS&#34;&gt;Flash烧录固件（无IDF开发环境）&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;开发环境&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cursor 或 VSCode&lt;/li&gt; &#xA; &lt;li&gt;安装 ESP-IDF 插件，选择 SDK 版本 5.3 或以上&lt;/li&gt; &#xA; &lt;li&gt;Linux 比 Windows 更好，编译速度快，也免去驱动问题的困扰&lt;/li&gt; &#xA; &lt;li&gt;使用 Google C++ 代码风格，提交代码时请确保符合规范&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;智能体配置&lt;/h2&gt; &#xA;&lt;p&gt;如果你已经拥有一个小智 AI 聊天机器人设备，可以登录 &lt;a href=&#34;https://xiaozhi.me&#34;&gt;xiaozhi.me&lt;/a&gt; 控制台进行配置。&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://www.bilibili.com/video/BV1jUCUY2EKM/&#34;&gt;后台操作视频教程（旧版界面）&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;技术原理与私有化部署&lt;/h2&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/websocket.md&#34;&gt;一份详细的 WebSocket 通信协议文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;在个人电脑上部署服务器，可以参考另一位作者同样以 MIT 许可证开源的项目 &lt;a href=&#34;https://github.com/xinnan-tech/xiaozhi-esp32-server&#34;&gt;xiaozhi-esp32-server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;a href=&#34;https://star-history.com/#78/xiaozhi-esp32&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=78/xiaozhi-esp32&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=78/xiaozhi-esp32&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=78/xiaozhi-esp32&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>LibreCAD/LibreCAD</title>
    <updated>2025-02-23T01:40:32Z</updated>
    <id>tag:github.com,2025-02-23:/LibreCAD/LibreCAD</id>
    <link href="https://github.com/LibreCAD/LibreCAD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LibreCAD is a cross-platform 2D CAD program written in C++17. It can read DXF/DWG files and can write DXF/PDF/SVG files. It supports point/line/circle/ellipse/parabola/spline primitives. The user interface is highly customizable, and has dozens of translations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LibreCAD &lt;a href=&#34;https://travis-ci.org/LibreCAD/LibreCAD&#34;&gt;&lt;img src=&#34;https://travis-ci.org/LibreCAD/LibreCAD.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LibreCAD/LibreCAD/wiki/Download&#34;&gt;→ Download ←&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.librecad.org&#34;&gt;LibreCAD&lt;/a&gt; is a 2D CAD drawing tool based on the community edition of &lt;a href=&#34;https://www.qcad.org&#34;&gt;QCAD&lt;/a&gt;. LibreCAD uses the cross-platform framework &lt;a href=&#34;https://www.qt.io/download-open-source/&#34;&gt;Qt&lt;/a&gt;, which means it works with most operating systems.&lt;br&gt; The user interface is translated in over 30 languages. &lt;a href=&#34;https://translate.librecad.org&#34;&gt;https://translate.librecad.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;LibreCAD is free software; you can redistribute it and/or modify&lt;br&gt; it under the terms of the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-2.0.html&#34;&gt;GNU General Public License version 2&lt;/a&gt; (GPLv2)&lt;br&gt; as published by the Free Software Foundation.&lt;br&gt; Please read the &lt;a href=&#34;https://raw.githubusercontent.com/LibreCAD/LibreCAD/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for additional information.&lt;/p&gt; &#xA;&lt;p&gt;The master branch represents the latest pre-release code,&lt;br&gt; and now requires Qt 6.4.0 or newer.&lt;br&gt; The 2.2.1 branch requires Qt 5.15.0 or newer. The 2.2 branch requires Qt 5.2.1 or newer. The 2.1 branch will be the last to support Qt4.&lt;br&gt; The 2.0 branch will be the last to support the QCAD toolbar. &lt;a href=&#34;https://travis-ci.org/LibreCAD/LibreCAD&#34;&gt;&lt;img src=&#34;https://travis-ci.org/LibreCAD/LibreCAD.svg?branch=2.0&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;DXF Converter&lt;/h2&gt; &#xA;&lt;p&gt;LibreCAD can be used as dxf to a pdf, png or svg converter. For example, to convert a foo.dxf to foo.pdf, foo.png or foo.svg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ librecad dxf2pdf foo.dxf&#xA;$ librecad dxf2png foo.dxf&#xA;$ librecad dxf2svg foo.dxf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Releases and Milestones&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LibreCAD/LibreCAD/releases&#34;&gt;Releases and Prereleases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LibreCAD/LibreCAD/milestones&#34;&gt;Milestones&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;libdxfrw&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LibreCAD/libdxfrw&#34;&gt;libdxfrw&lt;/a&gt; is an associated project that allows LibreCAD to read DXF and DWG files.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requests and Bug reports&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LibreCAD/LibreCAD/issues&#34;&gt;GitHub issues (preferred)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourceforge.net/p/librecad/_list/tickets?source=navbar&#34;&gt;SourceForge tickets (disabled)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Users Documentation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://librecad.readthedocs.io/&#34;&gt;Users Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dokuwiki.librecad.org/&#34;&gt;Wiki Main Page&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Questions or Comments&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.librecad.org/&#34;&gt;LibreCAD&#39;s Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IRC: &lt;a href=&#34;https://web.libera.chat/#librecad&#34;&gt;#librecad&lt;/a&gt; at libera.chat&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Building&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.qt.io/download-open-source/&#34;&gt;Qt&lt;/a&gt; 6.4.0+ (MinGW version on Windows)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.boost.org/&#34;&gt;Boost&lt;/a&gt; 1.55.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More information: &lt;a href=&#34;https://github.com/LibreCAD/LibreCAD/wiki/Build-from-source&#34;&gt;Build from source&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LibreCAD/LibreCAD/wiki/Git-and-GitHub&#34;&gt;Git and GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LibreCAD/LibreCAD/wiki/Becoming-a-developer&#34;&gt;Becoming a developer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is a &lt;a href=&#34;https://github.com/LibreCAD/Resources&#34;&gt;resources repository&lt;/a&gt; for people that want to indirectly&lt;br&gt; contribute to the project by supplying icons, stylesheets, documentation, templates...&lt;/p&gt; &#xA;&lt;p&gt;Associated downloads: &lt;a href=&#34;https://sourceforge.net/projects/librecad/files/Resources/&#34;&gt;https://sourceforge.net/projects/librecad/files/Resources/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libcpr/cpr</title>
    <updated>2025-02-23T01:40:32Z</updated>
    <id>tag:github.com,2025-02-23:/libcpr/cpr</id>
    <link href="https://github.com/libcpr/cpr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C++ Requests: Curl for People, a spiritual port of Python Requests.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C++ Requests: Curl for People &lt;img align=&#34;right&#34; height=&#34;40&#34; src=&#34;http://i.imgur.com/d9Xtyts.png&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.libcpr.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-online-informational?style=flat&amp;amp;link=https://docs.libcpr.org/&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/libcpr/cpr/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://gitter.im/libcpr/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/libcpr/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Announcements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This project is being maintained by &lt;a href=&#34;https://github.com/com8&#34;&gt;Fabian Sauter&lt;/a&gt; and &lt;a href=&#34;https://github.com/KingKili&#34;&gt;Kilian Traub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For quick help, and discussion libcpr also offers a &lt;a href=&#34;https://gitter.im/libcpr/community?utm_source=share-link&amp;amp;utm_medium=link&amp;amp;utm_campaign=share-link&#34;&gt;gitter&lt;/a&gt; chat.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Releases&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Release&lt;/th&gt; &#xA;   &lt;th&gt;Min. C++ Standard&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;master&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpp17&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/-preview-orange&#34; alt=&#34;alt text&#34; title=&#34;preview&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.11.x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpp17&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.10.x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpp17&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/-unsupported-red&#34; alt=&#34;alt text&#34; title=&#34;unsupported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;= 1.9.x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpp11&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/-unsupported-red&#34; alt=&#34;alt text&#34; title=&#34;unsupported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;TLDR&lt;/h2&gt; &#xA;&lt;p&gt;C++ Requests is a simple wrapper around &lt;a href=&#34;http://curl.haxx.se/libcurl&#34;&gt;libcurl&lt;/a&gt; inspired by the excellent &lt;a href=&#34;https://github.com/kennethreitz/requests&#34;&gt;Python Requests&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;Despite its name, libcurl&#39;s easy interface is far from simple, and errors and frustration often arise from mistakes or misuse. By leveraging the more expressive features of &lt;code&gt;C++17&lt;/code&gt; (or &lt;code&gt;C++11&lt;/code&gt; if using cpr &amp;lt;`= 1.9.x), this library distills the process of making network calls into a few clear and concise idioms.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a quick GET request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;cpr/cpr.h&amp;gt;&#xA;&#xA;int main(int argc, char** argv) {&#xA;    cpr::Response r = cpr::Get(cpr::Url{&#34;https://api.github.com/repos/whoshuu/cpr/contributors&#34;},&#xA;                      cpr::Authentication{&#34;user&#34;, &#34;pass&#34;, cpr::AuthMode::BASIC},&#xA;                      cpr::Parameters{{&#34;anon&#34;, &#34;true&#34;}, {&#34;key&#34;, &#34;value&#34;}});&#xA;    r.status_code;                  // 200&#xA;    r.header[&#34;content-type&#34;];       // application/json; charset=utf-8&#xA;    r.text;                         // JSON text string&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here&#39;s &lt;a href=&#34;https://gist.github.com/whoshuu/2dc858b8730079602044&#34;&gt;less functional, more complicated code, without cpr&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.libcpr.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-online-informational?style=for-the-badge&amp;amp;link=https://docs.libcpr.org/&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;br&gt; You can find the latest documentation &lt;a href=&#34;https://docs.libcpr.org/&#34;&gt;here&lt;/a&gt;. It&#39;s a work in progress, but it should give you a better idea of how to use the library than the &lt;a href=&#34;https://github.com/libcpr/cpr/tree/master/test&#34;&gt;tests&lt;/a&gt; currently do.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;C++ Requests currently supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom headers&lt;/li&gt; &#xA; &lt;li&gt;URL-encoded parameters&lt;/li&gt; &#xA; &lt;li&gt;URL-encoded POST values&lt;/li&gt; &#xA; &lt;li&gt;Multipart form POST upload&lt;/li&gt; &#xA; &lt;li&gt;File POST upload&lt;/li&gt; &#xA; &lt;li&gt;Basic authentication&lt;/li&gt; &#xA; &lt;li&gt;Bearer authentication&lt;/li&gt; &#xA; &lt;li&gt;Digest authentication&lt;/li&gt; &#xA; &lt;li&gt;NTLM authentication&lt;/li&gt; &#xA; &lt;li&gt;Connection and request timeout specification&lt;/li&gt; &#xA; &lt;li&gt;Timeout for low speed connection&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous requests&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🍪&lt;/span&gt; support!&lt;/li&gt; &#xA; &lt;li&gt;Proxy support&lt;/li&gt; &#xA; &lt;li&gt;Callback interfaces&lt;/li&gt; &#xA; &lt;li&gt;PUT methods&lt;/li&gt; &#xA; &lt;li&gt;DELETE methods&lt;/li&gt; &#xA; &lt;li&gt;HEAD methods&lt;/li&gt; &#xA; &lt;li&gt;OPTIONS methods&lt;/li&gt; &#xA; &lt;li&gt;PATCH methods&lt;/li&gt; &#xA; &lt;li&gt;Thread Safe access to &lt;a href=&#34;https://curl.haxx.se/libcurl/c/threadsafe.html&#34;&gt;libCurl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL and WinSSL support for HTTPS requests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Planned&lt;/h2&gt; &#xA;&lt;p&gt;For a quick overview about the planned features, have a look at the next &lt;a href=&#34;https://github.com/libcpr/cpr/milestones&#34;&gt;Milestones&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;CMake&lt;/h3&gt; &#xA;&lt;h4&gt;fetch_content:&lt;/h4&gt; &#xA;&lt;p&gt;If you already have a CMake project you need to integrate C++ Requests with, the primary way is to use &lt;code&gt;fetch_content&lt;/code&gt;. Add the following to your &lt;code&gt;CMakeLists.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;include(FetchContent)&#xA;FetchContent_Declare(cpr GIT_REPOSITORY https://github.com/libcpr/cpr.git&#xA;                         GIT_TAG dec9422db3af470641f8b0d90e4b451c4daebf64) # Replace with your desired git commit from: https://github.com/libcpr/cpr/releases&#xA;FetchContent_MakeAvailable(cpr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will produce the target &lt;code&gt;cpr::cpr&lt;/code&gt; which you can link against the typical way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;target_link_libraries(your_target_name PRIVATE cpr::cpr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That should do it! There&#39;s no need to handle &lt;code&gt;libcurl&lt;/code&gt; yourself. All dependencies are taken care of for you. All of this can be found in an example &lt;a href=&#34;https://github.com/libcpr/example-cmake-fetch-content&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;find_package():&lt;/h4&gt; &#xA;&lt;p&gt;If you prefer not to use &lt;code&gt;fetch_content&lt;/code&gt;, you can download, build, and install the library and then use CMake &lt;code&gt;find_package()&lt;/code&gt; function to integrate it into a project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this feature is feasible only if CPR_USE_SYSTEM_CURL is set. (see &lt;a href=&#34;https://github.com/libcpr/cpr/pull/645&#34;&gt;#645&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;git clone https://github.com/libcpr/cpr.git&#xA;cd cpr &amp;amp;&amp;amp; mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake .. -DCPR_USE_SYSTEM_CURL=ON&#xA;cmake --build . --parallel&#xA;sudo cmake --install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build Static Library&lt;/h4&gt; &#xA;&lt;p&gt;As an alternative if you want to switch between a static or shared version of cpr use &lt;a href=&#34;https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html&#34;&gt;&#39;-DBUILD_SHARED_LIBS=ON/OFF&#39;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;git clone https://github.com/libcpr/cpr.git&#xA;cd cpr &amp;amp;&amp;amp; mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake .. -DCPR_USE_SYSTEM_CURL=ON -DBUILD_SHARED_LIBS=OFF&#xA;cmake --build . --parallel&#xA;sudo cmake --install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your &lt;code&gt;CMakeLists.txt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;find_package(cpr REQUIRED)&#xA;add_executable(your_target_name your_target_name.cpp)&#xA;target_link_libraries(your_target_name PRIVATE cpr::cpr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tests&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;cpr&lt;/code&gt; provides a bunch of tests that can be executed via the following commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;git clone https://github.com/libcpr/cpr.git&#xA;cd cpr &amp;amp;&amp;amp; mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake .. -DCPR_BUILD_TESTS=ON # There are other test related options like &#39;CPR_BUILD_TESTS_SSL&#39; and &#39;CPR_BUILD_TESTS_PROXY&#39;&#xA;cmake --build . --parallel&#xA;ctest -VV # -VV is optional since it enables verbose output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/hedronvision/bazel-make-cc-https-easy&#34;&gt;hedronvision/bazel-make-cc-https-easy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Packages for Linux Distributions&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you may install a package specific to your Linux distribution. Since so few distributions currently have a package for cpr, most users will not be able to run your program with this approach.&lt;/p&gt; &#xA;&lt;p&gt;Currently, we are aware of packages for the following distributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/cpr&#34;&gt;Arch Linux (AUR)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://src.fedoraproject.org/rpms/cpr&#34;&gt;Fedora Linux&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If there&#39;s no package for your distribution, try making one! If you do, and it is added to your distribution&#39;s repositories, please submit a pull request to add it to the list above. However, please only do this if you plan to actively maintain the package.&lt;/p&gt; &#xA;&lt;h3&gt;NuGet Package&lt;/h3&gt; &#xA;&lt;p&gt;For Windows, there is also a libcpr NuGet package available. Currently, x86 and x64 builds are supported with release and debug configuration.&lt;/p&gt; &#xA;&lt;p&gt;The package can be found here: &lt;a href=&#34;https://www.nuget.org/packages/libcpr/&#34;&gt;NuGet.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Port for macOS&lt;/h3&gt; &#xA;&lt;p&gt;On macOS you may install cpr via &lt;a href=&#34;https://ports.macports.org/port/cpr&#34;&gt;MacPorts.org&lt;/a&gt; (arm64, x86_64, powerpc)&lt;/p&gt; &#xA;&lt;h3&gt;FreeBSD Port&lt;/h3&gt; &#xA;&lt;p&gt;On FreeBSD, you can issue &lt;code&gt;pkg install cpr&lt;/code&gt; or use the Ports tree to install it.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The only explicit requirements are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;code&gt;C++17&lt;/code&gt; compatible compiler such as Clang or GCC. The minimum required version of GCC is unknown, so if anyone has trouble building this library with a specific version of GCC, do let us know&lt;/li&gt; &#xA; &lt;li&gt;in case you only have a &lt;code&gt;C++11&lt;/code&gt; compatible compiler available, all versions below cpr 1.9.x are for you. The 1.10.0 release of cpr switches to &lt;code&gt;C++17&lt;/code&gt; as a requirement.&lt;/li&gt; &#xA; &lt;li&gt;If you would like to perform https requests &lt;code&gt;OpenSSL&lt;/code&gt; and its development libraries are required.&lt;/li&gt; &#xA; &lt;li&gt;If you do not use the built-in version of &lt;a href=&#34;https://github.com/curl/curl&#34;&gt;curl&lt;/a&gt; but instead use your systems version, make sure you use a version &lt;code&gt;&amp;gt;= 7.64.0&lt;/code&gt;. Lower versions are not supported. This means you need Debian &lt;code&gt;&amp;gt;= 10&lt;/code&gt; or Ubuntu &lt;code&gt;&amp;gt;= 20.04 LTS&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building cpr - Using vcpkg&lt;/h2&gt; &#xA;&lt;p&gt;You can download and install cpr using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;./vcpkg install cpr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;cpr&lt;/code&gt; port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h2&gt;Building cpr - Using Conan&lt;/h2&gt; &#xA;&lt;p&gt;You can download and install &lt;code&gt;cpr&lt;/code&gt; using the &lt;a href=&#34;https://conan.io/&#34;&gt;Conan&lt;/a&gt; package manager. Setup your CMakeLists.txt (see &lt;a href=&#34;https://docs.conan.io/en/latest/integrations/build_system.html&#34;&gt;Conan documentation&lt;/a&gt; on how to use MSBuild, Meson and others). An example can be found &lt;a href=&#34;https://github.com/libcpr/example-cmake-conan&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;cpr&lt;/code&gt; package in Conan is kept up to date by Conan contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/conan-io/conan-center-index&#34;&gt;create an issue or pull request&lt;/a&gt; on the &lt;code&gt;conan-center-index&lt;/code&gt; repository.&lt;/p&gt;</summary>
  </entry>
</feed>