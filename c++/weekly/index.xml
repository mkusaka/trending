<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-23T01:50:49Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sogou/workflow</title>
    <updated>2023-07-23T01:50:49Z</updated>
    <id>tag:github.com,2023-07-23:/sogou/workflow</id>
    <link href="https://github.com/sogou/workflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C++ Parallel Computing and Asynchronous Networking Engine&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/README_cn.md&#34;&gt;简体中文版（推荐）&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sogou C++ Workflow&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sogou/workflow/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.cppreference.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-c++-red.svg?sanitize=true&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/platform-linux%20%7C%20macos20%7C%20windows-lightgrey.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-linux%20%7C%20macos%20%7C%20windows-lightgrey.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sogou/workflow/actions?query=workflow%3A%22ci+build%22++&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/sogou/workflow/ci.yml?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As &lt;strong&gt;Sogou`s C++ server engine&lt;/strong&gt;, Sogou C++ Workflow supports almost all &lt;strong&gt;back-end C++ online services&lt;/strong&gt; of Sogou, including all search services, cloud input method, online advertisements, etc., handling more than &lt;strong&gt;10 billion&lt;/strong&gt; requests every day. This is an &lt;strong&gt;enterprise-level programming engine&lt;/strong&gt; in light and elegant design which can satisfy most C++ back-end development requirements.&lt;/p&gt; &#xA;&lt;h4&gt;You can use it:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To quickly build an &lt;strong&gt;HTTP server&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &#34;workflow/WFHttpServer.h&#34;&#xA;&#xA;int main()&#xA;{&#xA;    WFHttpServer server([](WFHttpTask *task) {&#xA;        task-&amp;gt;get_resp()-&amp;gt;append_output_body(&#34;&amp;lt;html&amp;gt;Hello World!&amp;lt;/html&amp;gt;&#34;);&#xA;    });&#xA;&#xA;    if (server.start(8888) == 0) { // start server on port 8888&#xA;        getchar(); // press &#34;Enter&#34; to end.&#xA;        server.stop();&#xA;    }&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As a &lt;strong&gt;multifunctional asynchronous client&lt;/strong&gt;, it currently supports &lt;code&gt;HTTP&lt;/code&gt;, &lt;code&gt;Redis&lt;/code&gt;, &lt;code&gt;MySQL&lt;/code&gt; and &lt;code&gt;Kafka&lt;/code&gt; protocols.&lt;/li&gt; &#xA; &lt;li&gt;To implement &lt;strong&gt;client/server on user-defined protocol&lt;/strong&gt; and build your own &lt;strong&gt;RPC system&lt;/strong&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sogou/srpc&#34;&gt;srpc&lt;/a&gt; is based on it and it is an independent open source project, which supports srpc, brpc, trpc and thrift protocols.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;To build &lt;strong&gt;asynchronous workflow&lt;/strong&gt;; support common &lt;strong&gt;series&lt;/strong&gt; and &lt;strong&gt;parallel&lt;/strong&gt; structures, and also support any &lt;strong&gt;DAG&lt;/strong&gt; structures.&lt;/li&gt; &#xA; &lt;li&gt;As a &lt;strong&gt;parallel computing tool&lt;/strong&gt;. In addition to &lt;strong&gt;networking tasks&lt;/strong&gt;, Sogou C++ Workflow also includes &lt;strong&gt;the scheduling of computing tasks&lt;/strong&gt;. All types of tasks can be put into &lt;strong&gt;the same&lt;/strong&gt; flow.&lt;/li&gt; &#xA; &lt;li&gt;As an &lt;strong&gt;asynchronous file IO tool&lt;/strong&gt; in &lt;code&gt;Linux&lt;/code&gt; system, with high performance exceeding any system call. Disk file IO is also a task.&lt;/li&gt; &#xA; &lt;li&gt;To realize any &lt;strong&gt;high-performance&lt;/strong&gt; and &lt;strong&gt;high-concurrency&lt;/strong&gt; back-end service with a very complex relationship between computing and networking.&lt;/li&gt; &#xA; &lt;li&gt;To build a &lt;strong&gt;micro service&lt;/strong&gt; system. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This project has built-in &lt;strong&gt;service governance&lt;/strong&gt; and &lt;strong&gt;load balancing&lt;/strong&gt; features.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Wiki link : &lt;a href=&#34;https://github.com/sogou/workflow/wiki&#34;&gt;PaaS Architecture&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Compiling and running environment&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This project supports &lt;code&gt;Linux&lt;/code&gt;, &lt;code&gt;macOS&lt;/code&gt;, &lt;code&gt;Windows&lt;/code&gt;, &lt;code&gt;Android&lt;/code&gt; and other operating systems. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Windows&lt;/code&gt; version is currently released as an independent &lt;a href=&#34;https://github.com/sogou/workflow/tree/windows&#34;&gt;branch&lt;/a&gt;, using &lt;code&gt;iocp&lt;/code&gt; to implement asynchronous networking. All user interfaces are consistent with the &lt;code&gt;Linux&lt;/code&gt; version.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Supports all CPU platforms, including 32 or 64-bit &lt;code&gt;x86&lt;/code&gt; processors, big-endian or little-endian &lt;code&gt;arm&lt;/code&gt; processors, &lt;code&gt;loongson&lt;/code&gt; processors.&lt;/li&gt; &#xA; &lt;li&gt;Master branch requires SSL and &lt;code&gt;OpenSSL 1.1&lt;/code&gt; or above is recommended. Fully compatible with BoringSSL. If you don&#39;t like SSL, you may checkout the &lt;a href=&#34;https://github.com/sogou/workflow/tree/nossl&#34;&gt;nossl&lt;/a&gt; branch.&lt;/li&gt; &#xA; &lt;li&gt;Uses the &lt;code&gt;C++11&lt;/code&gt; standard and therefore, it should be compiled with a compiler which supports &lt;code&gt;C++11&lt;/code&gt;. Does not rely on &lt;code&gt;boost&lt;/code&gt; or &lt;code&gt;asio&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;No other dependencies. However, if you need &lt;code&gt;Kafka&lt;/code&gt; protocol, some compression libraries should be installed, including &lt;code&gt;lz4&lt;/code&gt;, &lt;code&gt;zstd&lt;/code&gt; and &lt;code&gt;snappy&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get started (Linux, macOS):&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/sogou/workflow&#xA;cd workflow&#xA;make&#xA;cd tutorial&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;With SRPC Tool (NEW!)：&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sogou/srpc/raw/master/tools/README.md&#34;&gt;https://github.com/sogou/srpc/blob/master/tools/README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;With &lt;a href=&#34;https://launchpad.net/ubuntu/+source/workflow&#34;&gt;apt-get&lt;/a&gt; on Debian Linux, ubuntu:&lt;/h4&gt; &#xA;&lt;p&gt;Sogou C++ Workflow has been packaged for Debian Linux and ubuntu 22.04.&lt;br&gt; To install the Workflow library for development purposes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install libworkflow-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the Workflow library for deployment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install libworkflow1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;With &lt;a href=&#34;https://packages.fedoraproject.org/pkgs/workflow&#34;&gt;dnf&lt;/a&gt; on Fedora Linux:&lt;/h4&gt; &#xA;&lt;p&gt;Sogou C++ Workflow has been packaged for Fedora Linux.&lt;br&gt; To install the Workflow library for development purposes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install workflow-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the Workflow library for deployment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install workflow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;With xmake&lt;/h4&gt; &#xA;&lt;p&gt;If you want to use xmake to build workflow, you can see &lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/xmake.md&#34;&gt;xmake build document&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Tutorials&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Client &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-01-wget.md&#34;&gt;Creating your first task：wget&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-02-redis_cli.md&#34;&gt;Implementing Redis set and get：redis_cli&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-03-wget_to_redis.md&#34;&gt;More features about series：wget_to_redis&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Server &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-04-http_echo_server.md&#34;&gt;First server：http_echo_server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-05-http_proxy.md&#34;&gt;Asynchronous server：http_proxy&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Parallel tasks and Series　 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-06-parallel_wget.md&#34;&gt;A simple parallel wget：parallel_wget&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Important topics &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-error.md&#34;&gt;About error&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-timeout.md&#34;&gt;About timeout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-config.md&#34;&gt;About global configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-dns.md&#34;&gt;About DNS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-exit.md&#34;&gt;About exit&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Computing tasks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-07-sort_task.md&#34;&gt;Using the build-in algorithm factory：sort_task&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-08-matrix_multiply.md&#34;&gt;User-defined computing task：matrix_multiply&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-go-task.md&#34;&gt;Use computing task in a simple way: go task&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Asynchronous File IO tasks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-09-http_file_server.md&#34;&gt;Http server with file IO：http_file_server&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;User-defined protocol &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-10-user_defined_protocol.md&#34;&gt;A simple user-defined protocol: client/server&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Other important tasks/components &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-timer.md&#34;&gt;About timer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-counter.md&#34;&gt;About counter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-resource-pool.md&#34;&gt;About resource pool&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-module.md&#34;&gt;About module&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-11-graph_task.md&#34;&gt;About DAG&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Service governance &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-service-governance.md&#34;&gt;About service governance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-upstream.md&#34;&gt;More documents about upstream&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Connection context &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-connection-context.md&#34;&gt;About connection context&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Built-in clients &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-12-mysql_cli.md&#34;&gt;Asynchronous MySQL client：mysql_cli&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-13-kafka_cli.md&#34;&gt;Asynchronous Kafka client: kafka_cli&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Programming paradigm&lt;/h4&gt; &#xA;&lt;p&gt;We believe that a typical back-end program=protocol+algorithm+workflow and should be developed completely independently.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Protocol &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In most cases, users use built-in common network protocols, such as HTTP, Redis or various rpc.&lt;/li&gt; &#xA;   &lt;li&gt;Users can also easily customize user-defined network protocol. In the customization, they only need to provide serialization and deserialization functions to define their own client/server.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Algorithm &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In our design, the algorithm is a concept symmetrical to the protocol. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If protocol call is rpc, then algorithm call is an apc (Async Procedure Call).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;We have provided some general algorithms, such as sort, merge, psort, reduce, which can be used directly.&lt;/li&gt; &#xA;   &lt;li&gt;Compared with a user-defined protocol, a user-defined algorithm is much more common. Any complicated computation with clear boundaries should be packaged into an algorithm.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Workflow &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Workflow is the actual business logic, which is to put the protocols and algorithms into the flow graph for use.&lt;/li&gt; &#xA;   &lt;li&gt;The typical workflow is a closed series-parallel graph. Complex business logic may be a non-closed DAG.&lt;/li&gt; &#xA;   &lt;li&gt;The workflow graph can be constructed directly or dynamically generated based on the results of each step. All tasks are executed asynchronously.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Basic task, task factory and complex task&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Our system contains six basic tasks: networking, file IO, CPU, GPU, timer, and counter.&lt;/li&gt; &#xA; &lt;li&gt;All tasks are generated by the task factory and automatically recycled after callback. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Server task is one kind of special networking task, generated by the framework which calls the task factory, and handed over to the user through the process function.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;In most cases, the task generated by the user through the task factory is a complex task, which is transparent to the user. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For example, an HTTP request may include many asynchronous processes (DNS, redirection), but for user, it is just a networking task.&lt;/li&gt; &#xA;   &lt;li&gt;File sorting seems to be an algorithm, but it actually includes many complex interaction processes between file IO and CPU computation.&lt;/li&gt; &#xA;   &lt;li&gt;If you think of business logic as building circuits with well-designed electronic components, then each electronic component may be a complex circuit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Asynchrony and encapsulation based on &lt;code&gt;C++11 std::function&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not based on user mode coroutines. Users need to know that they are writing asynchronous programs.&lt;/li&gt; &#xA; &lt;li&gt;All calls are executed asynchronously, and there is almost no operation that occupies a thread. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Although we also provide some facilities with semi-synchronous interfaces, they are not core features.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;We try to avoid user&#39;s derivations, and encapsulate user behavior with &lt;code&gt;std::function&lt;/code&gt; instead, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The callback of any task.&lt;/li&gt; &#xA;   &lt;li&gt;Any server&#39;s process. This conforms to the &lt;code&gt;FaaS&lt;/code&gt; (Function as a Service) idea.&lt;/li&gt; &#xA;   &lt;li&gt;The realization of an algorithm is simply a &lt;code&gt;std::function&lt;/code&gt;. But the algorithm can also be implemented by derivation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Memory reclamation mechanism&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Every task will be automatically reclaimed after the callback. If a task is created but a user does not want to run it, the user needs to release it through the dismiss method.&lt;/li&gt; &#xA; &lt;li&gt;Any data in the task, such as the response of the network request, will also be recycled with the task. At this time, the user can use &lt;code&gt;std::move()&lt;/code&gt; to move the required data.&lt;/li&gt; &#xA; &lt;li&gt;SeriesWork and ParallelWork are two kinds of framework objects, which are also recycled after their callback. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When a series is a branch of a parallel, it will be recycled after the callback of the parallel that it belongs to.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;This project doesn’t use &lt;code&gt;std::shared_ptr&lt;/code&gt; to manage memory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Any other questions?&lt;/h4&gt; &#xA;&lt;p&gt;You may check the &lt;a href=&#34;https://github.com/sogou/workflow/issues/406&#34;&gt;FAQ&lt;/a&gt; and &lt;a href=&#34;https://github.com/sogou/workflow/issues&#34;&gt;issues&lt;/a&gt; list first to see if you can find the answer.&lt;/p&gt; &#xA;&lt;p&gt;You are very welcome to send the problems you encounter in use to &lt;a href=&#34;https://github.com/sogou/workflow/issues&#34;&gt;issues&lt;/a&gt;, and we will answer them as soon as possible. At the same time, more issues will also help new users.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mozilla/DeepSpeech</title>
    <updated>2023-07-23T01:50:49Z</updated>
    <id>tag:github.com,2023-07-23:/mozilla/DeepSpeech</id>
    <link href="https://github.com/mozilla/DeepSpeech" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DeepSpeech is an open source embedded (offline, on-device) speech-to-text engine which can run in real time on devices ranging from a Raspberry Pi 4 to high power GPU servers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Project DeepSpeech&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://readthedocs.org/projects/deepspeech/badge/?version=latest&#34;&gt;https://readthedocs.org/projects/deepspeech/badge/?version=latest&lt;/a&gt; :target: &lt;a href=&#34;https://deepspeech.readthedocs.io/?badge=latest&#34;&gt;https://deepspeech.readthedocs.io/?badge=latest&lt;/a&gt; :alt: Documentation&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/mozilla/DeepSpeech/actions/workflows/macOS-amd64.yml/badge.svg&#34;&gt;https://github.com/mozilla/DeepSpeech/actions/workflows/macOS-amd64.yml/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/mozilla/DeepSpeech/actions/workflows/macOS-amd64.yml&#34;&gt;https://github.com/mozilla/DeepSpeech/actions/workflows/macOS-amd64.yml&lt;/a&gt; :alt: macOS builds&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/mozilla/DeepSpeech/actions/workflows/lint.yml/badge.svg&#34;&gt;https://github.com/mozilla/DeepSpeech/actions/workflows/lint.yml/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/mozilla/DeepSpeech/actions/workflows/lint.yml&#34;&gt;https://github.com/mozilla/DeepSpeech/actions/workflows/lint.yml&lt;/a&gt; :alt: Linters&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/mozilla/DeepSpeech/actions/workflows/docker.yml/badge.svg&#34;&gt;https://github.com/mozilla/DeepSpeech/actions/workflows/docker.yml/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/mozilla/DeepSpeech/actions/workflows/docker.yml&#34;&gt;https://github.com/mozilla/DeepSpeech/actions/workflows/docker.yml&lt;/a&gt; :alt: Docker Images&lt;/p&gt; &#xA;&lt;p&gt;DeepSpeech is an open-source Speech-To-Text engine, using a model trained by machine learning techniques based on &lt;code&gt;Baidu&#39;s Deep Speech research paper &amp;lt;https://arxiv.org/abs/1412.5567&amp;gt;&lt;/code&gt;&lt;em&gt;. Project DeepSpeech uses Google&#39;s &lt;code&gt;TensorFlow &amp;lt;https://www.tensorflow.org/&amp;gt;&lt;/code&gt;&lt;/em&gt; to make the implementation easier.&lt;/p&gt; &#xA;&lt;p&gt;Documentation for installation, usage, and training models are available on &lt;code&gt;deepspeech.readthedocs.io &amp;lt;https://deepspeech.readthedocs.io/?badge=latest&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;For the latest release, including pre-trained models and checkpoints, &lt;code&gt;see the latest release on GitHub &amp;lt;https://github.com/mozilla/DeepSpeech/releases/latest&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;For contribution guidelines, see &lt;code&gt;CONTRIBUTING.rst &amp;lt;CONTRIBUTING.rst&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;For contact and support information, see &lt;code&gt;SUPPORT.rst &amp;lt;SUPPORT.rst&amp;gt;&lt;/code&gt;_.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ZikangYuan/sr_lio</title>
    <updated>2023-07-23T01:50:49Z</updated>
    <id>tag:github.com,2023-07-23:/ZikangYuan/sr_lio</id>
    <link href="https://github.com/ZikangYuan/sr_lio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A LiDAR-inertial odometry (LIO) package that can adjust the execution frequency beyond the sweep frequency&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SR-LIO&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;SR-LIO&lt;/strong&gt; (LiDAR-Inertial Odometry with Sweep Reconstruction) is an accurate and robust bundle adjustment (BA) based LiDAR-inertial odometry (LIO) that can increase the execution frequency beyond the sweep frequency. It segments and reconstructs raw input sweeps from spinning LiDAR to obtain reconstructed sweeps with higher frequency. Such method can shorten the time period of IMU pre-integration, and thus reduce the error of IMU pre-integration. Based on the proposed sweep reconstruction method, we build our newly designed BA based LIO system and achieve the state-of-the-art accuracy.&lt;/p&gt; &#xA;&lt;h2&gt;Related Work&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2210.10424&#34;&gt;SR-LIO: LiDAR-Inertial Odometry with Sweep Reconstruction&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Authors: &lt;a href=&#34;https://scholar.google.com/citations?hl=zh-CN&amp;amp;user=acxdM9gAAAAJ&#34;&gt;&lt;em&gt;Zikang Yuan&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://scholar.google.com/citations?hl=zh-CN&amp;amp;user=zwgGSkEAAAAJ&amp;amp;view_op=list_works&amp;amp;gmla=ABEO0Yrl4-YPuowyntSYyCW760yxM5-IWkF8FGV4t9bs9qz1oWrqnlHmPdbt7LMcMDc04kl2puqRR4FaZvaCUONsX7MQhuAC6a--VS2pTsuwj-CyKgWp3iWDP2TS0I__Zui5da4&#34;&gt;&lt;em&gt;Fengtian Lang&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;https://scholar.google.com/citations?user=lsz8OOYAAAAJ&amp;amp;hl=zh-CN&#34;&gt;&lt;em&gt;Xin Yang&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo Video (2022-10-17 Update)&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;x15 Real-Time Performance&lt;/strong&gt; on sequence &lt;em&gt;nclt_2013-01-10&lt;/em&gt; (left), and the &lt;strong&gt;Resulted Global Map and Trajectory&lt;/strong&gt; on sequence &lt;em&gt;nclt_2013-01-10&lt;/em&gt; (right). It is important to emphasize that &lt;strong&gt;&#34;x15&#34; is the multiplier relative to the 10 Hz raw input LiDAR sweep&lt;/strong&gt;, not relative to the processing frequency of our system. On our currently hardware platform (&lt;strong&gt;Intel Core i7-12700 and 32 GB RAM&lt;/strong&gt;), &lt;strong&gt;SR-LIO&lt;/strong&gt; cannot run in real-time after the raw input LiDAR sweeps are reconstructed from 10 Hz to 30 Hz.&lt;/p&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/ZikangYuan/sr_lio/main/doc/running.gif&#34; width=&#34;49.6%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/ZikangYuan/sr_lio/main/doc/result.gif&#34; width=&#34;49.6%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Related video:&lt;/strong&gt;: &lt;a href=&#34;https://youtu.be/KYGFNe-8On4&#34;&gt;Real-Time Performance&lt;/a&gt;, &lt;a href=&#34;https://youtu.be/7XpBDc41uUA&#34;&gt;Global Map and Trajectory&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pipeline:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/ZikangYuan/sr_lio/main/doc/framework-sr_lio.png&#34; width=&#34;99%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;New Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The proposed &lt;strong&gt;Sweep Reconstruction&lt;/strong&gt; module splits the original sweep packet into continuous point cloud data streams, and then re-packages point cloud data streams in a multiplexing way to obtain sweeps with higher frequency, which is &lt;strong&gt;illustrated by the figure as follow&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/ZikangYuan/sr_lio/main/doc/sweep_reconstruction.png&#34; width=&#34;99%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sweep Reconstruction&lt;/strong&gt; can effectively reduce the time interval for each IMU pre-integration, reducing the IMU pre-integration error and enabling the usage of BA based LiDAR-inertial optimization.&lt;/li&gt; &#xA; &lt;li&gt;Following &lt;a href=&#34;https://github.com/jedeschaud/ct_icp&#34;&gt;CT-ICP&lt;/a&gt;, &lt;strong&gt;SR-LIO&lt;/strong&gt; represents the state of two moments in each sweep: 1) at the beginning time of a sweep, and 2) at the end time of the sweep.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SR-LIO&lt;/strong&gt; proposes &lt;strong&gt;Multi-Segment LIO Optimization&lt;/strong&gt; for equally optimize all state variables during the period of a reconstructed sweep.&lt;/li&gt; &#xA; &lt;li&gt;All details about the Jacobian matrixes are available in the appendix of &lt;a href=&#34;https://arxiv.org/abs/2210.10424&#34;&gt;our article&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;1. Requirements&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;GCC &amp;gt;= 5.4.0&lt;/p&gt; &#xA; &lt;p&gt;Cmake &amp;gt;= 3.0.2&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://eigen.tuxfamily.org/index.php?title=Main_Page&#34;&gt;Eigen3&lt;/a&gt; &amp;gt;= 3.2.8&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pointclouds.org/downloads/&#34;&gt;PCL&lt;/a&gt; == 1.7 for Ubuntu 16.04, and == 1.8 for Ubuntu 18.04&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://ceres-solver.org/installation.html&#34;&gt;Ceres&lt;/a&gt; &amp;gt;= 1.14&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://wiki.ros.org/ROS/Installation&#34;&gt;ROS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;Have Tested On:&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;OS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;GCC&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Cmake&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Eigen3&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;PCL&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Ceres&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Ubuntu 16.04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.4.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.16.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.2.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Ubuntu 18.04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7.5.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.11.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.3.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;2. Create ROS workspace&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p ~/SR-LIO/src&#xA;cd SR-LIO/src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Clone the directory and build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ZikangYuan/sr_lio.git&#xA;cd ..&#xA;catkin_make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run on Public Datasets&lt;/h2&gt; &#xA;&lt;p&gt;Noted:&lt;/p&gt; &#xA;&lt;p&gt;A. Except fot the external parameters between IMU and LiDAR, and the value of gravitational acceleration, &lt;strong&gt;the parameter configurations used in different datasets are exactly the same&lt;/strong&gt; to demonstrate the stability and robustness of &lt;strong&gt;SR-LIO&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;B. Please make sure the LiDAR point clouds have the &#34;ring&#34; channel information.&lt;/p&gt; &#xA;&lt;p&gt;C. The warning message &#34;Failed to find match for field &#39;time&#39;.&#34; doesn&#39;t matter. It can be ignored.&lt;/p&gt; &#xA;&lt;p&gt;D. &lt;strong&gt;Please create a folder named &#34;output&#34; before running.&lt;/strong&gt; When &lt;strong&gt;SR-LIO&lt;/strong&gt; is running, the estimated pose is recorded in real time in the &lt;strong&gt;pose.txt&lt;/strong&gt; located in the &lt;strong&gt;output folder&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;E. If you want to get some visualization of the split and recombine, please set the &lt;strong&gt;debug_output&lt;/strong&gt; parameter in the launch file to 1 (true). After that, you can get some .pcd files in &lt;strong&gt;&#34;output/cloud_frame&#34;&lt;/strong&gt; and &lt;strong&gt;&#34;output/cut_sweep&#34;&lt;/strong&gt; folders.&lt;/p&gt; &#xA;&lt;p&gt;F. As the groundtruth acquisition of some datasets (&lt;em&gt;UTBM&lt;/em&gt; and &lt;em&gt;ULHK&lt;/em&gt;) are extremely complicated, in order to facilitate evaluation, &lt;strong&gt;we store the pose ground truth of the three datasets used by us as &lt;a href=&#34;https://vision.in.tum.de/data/datasets/rgbd-dataset&#34;&gt;TUM&lt;/a&gt; format. Please down load from &lt;a href=&#34;https://drive.google.com/drive/folders/1WnvzUzP_s70p4myPf5fsP1Jtr_62PnL1&#34;&gt;Google drive&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;1. Run on &lt;a href=&#34;http://robots.engin.umich.edu/nclt/&#34;&gt;&lt;em&gt;NCLT&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The time for finishing a sweep by the LiDAR of &lt;em&gt;NCLT&lt;/em&gt; is not 100ms, but 130~140ms (around 7.5 Hz). Therefore, we need to package the data stream of the &lt;em&gt;NCLT&lt;/em&gt; dataset as 7.5 Hz sweep packages. The &lt;strong&gt;nclt_to_rosbag.py&lt;/strong&gt; in the &lt;strong&gt;&#34;tools&#34;&lt;/strong&gt; folder can be used to package 7.5 Hz sweeps and linearly interpolated 100 Hz IMU data into a rosbag file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 nclt_to_rosbag.py PATH_OF_NVLT_SEQUENCE_FOLDER PATH_OF_OUTPUT_BAG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, please go to the workspace of &lt;strong&gt;SR-LIO&lt;/strong&gt; and type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd SR-LIO&#xA;source devel/setup.bash&#xA;roslaunch sr_lio lio_nclt.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open the terminal in the path of the bag file, and type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rosbag play SEQUENCE_NAME.bag --clock -d 1.0 -r 0.2 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Run on &lt;a href=&#34;https://epan-utbm.github.io/utbm_robocar_dataset/#Downloads&#34;&gt;&lt;em&gt;UTBM&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Before evaluating on &lt;em&gt;UTBM&lt;/em&gt; dataset, a dependency needs to be installed. If your OS are Ubuntu 16.04, please type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install ros-kinetic-velodyne &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your OS are Ubuntu 18.04, please type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install ros-melodic-velodyne &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open the terminal in the path of &lt;strong&gt;SR-LIO&lt;/strong&gt;, and type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source devel/setup.bash&#xA;roslaunch sr_lio lio_utbm.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open the terminal in the path of the bag file, and type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rosbag play SEQUENCE_NAME.bag --clock -d 1.0 -r 0.2 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Run on &lt;a href=&#34;https://github.com/weisongwen/UrbanLoco&#34;&gt;&lt;em&gt;ULHK&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;For sequence &lt;em&gt;HK-Data-2019-01-17&lt;/em&gt; and &lt;em&gt;HK-Data-2019-03-17&lt;/em&gt;, the imu data does not include the gravity acceleration component, and the topic of LiDAR point cloud data is &lt;em&gt;/velodyne_points_0&lt;/em&gt;. For other sequences of &lt;em&gt;ULHK&lt;/em&gt; used by us, the imu data includes the gravity acceleration component, and the topic of LiDAR point cloud data is &lt;em&gt;/velodyne_points&lt;/em&gt;. Therefore, we provide two launch files for the &lt;em&gt;ULHK&lt;/em&gt; dataset.&lt;/p&gt; &#xA;&lt;p&gt;If you test &lt;strong&gt;SR-LIO&lt;/strong&gt; on &lt;em&gt;HK-Data-2019-01-17&lt;/em&gt; or &lt;em&gt;HK-Data-2019-03-17&lt;/em&gt;, please type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source devel/setup.bash&#xA;roslaunch sr_lio lio_ulhk1.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you test &lt;strong&gt;SR-LIO&lt;/strong&gt; on &lt;em&gt;HK-Data-2019-03-16-1&lt;/em&gt;, &lt;em&gt;HK-Data-2019-04-26-1&lt;/em&gt; or &lt;em&gt;HK-Data-2019-04-26-2&lt;/em&gt;, please type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sourcr devel/setup.bash&#xA;roslaunch sr_lio lio_ulhk2.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open the terminal in the path of the bag file, and type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rosbag play SEQUENCE_NAME.bag --clock -d 1.0 -r 0.2 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. Adjustment of &#34;-r&#34; when play rosbag&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;-r&lt;/strong&gt; is used to control the rosbag playback speed. For example, when we set &lt;strong&gt;-r 0.2&lt;/strong&gt;, the playback speed of this operation is 1/5 of the original data acquisition rate. Theoretically, when the input LiDAR sweeps are reconstituted from 10 Hz to 30 Hz, we need to complete the processing of a sweep within (1000/30)ms. However, our system could not achieve such excellent computational efficiency on existing hardware platforms. By slowing down the playback of rosbag packets, we can give our system more time to process each sweep.&lt;/p&gt; &#xA;&lt;p&gt;The most significant parameters affecting the efficiency of our system are the registration times of ICP and the iteration times of each registration. Therefore, for each sequence, we test the time consumption with different number of ICP point cloud registration and different number of iteration solutions for each registration. For each test, we also record the pose accuracy (i.e., ATE) to explore how many registration and iterations are need to reach the best pose accuracy. The results are arranged in the following table. &lt;strong&gt;Please refer to the Table VII of &lt;a href=&#34;https://arxiv.org/abs/2210.10424&#34;&gt;our article&lt;/a&gt; to select the &#34;-r&#34; parameter.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use our work in your research project, please consider citing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{yuan2022sr,&#xA;  title={SR-LIO: LiDAR-Inertial Odometry with Sweep Reconstruction},&#xA;  author={Yuan, Zikang and Lang, Fengtian and Yang, Xin},&#xA;  journal={arXiv preprint arXiv:2210.10424},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for &lt;a href=&#34;https://github.com/jedeschaud/ct_icp&#34;&gt;CT-ICP&lt;/a&gt;, &lt;a href=&#34;https://github.com/hku-mars/FAST_LIO&#34;&gt;Fast-LIO&lt;/a&gt;, &lt;a href=&#34;https://github.com/HKUST-Aerial-Robotics/VINS-Mono&#34;&gt;VINs-Mono&lt;/a&gt; and &lt;a href=&#34;https://github.com/vell001/open_vins&#34;&gt;Open-VINs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks for &lt;a href=&#34;https://github.com/chengwei0427&#34;&gt;&lt;strong&gt;chengwei&lt;/strong&gt;&lt;/a&gt; for solving the problem that SR-LIO cannot run successfully under the specific mode (motion_compensation: CONSTANT_VELOCITY, distance: POINT_TO_PLANE).&lt;/p&gt;</summary>
  </entry>
</feed>