<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-10T01:39:38Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>qgis/QGIS</title>
    <updated>2024-11-10T01:39:38Z</updated>
    <id>tag:github.com,2024-11-10:/qgis/QGIS</id>
    <link href="https://github.com/qgis/QGIS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;QGIS is a free, open source, cross platform (lin/win/mac) geographical information system (GIS)&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/images/README-md/main_logo.png&#34; width=&#34;300&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qgis/QGIS/actions/workflows/run-tests.yml?query=branch%3Amaster+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/qgis/QGIS/actions/workflows/run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;ðŸ§ª QGIS tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/qgis/qgis/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/automated/qgis/qgis.svg?sanitize=true&#34; alt=&#34;Docker Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/qgis/QGIS/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/qgis/QGIS/_apis/build/status/qgis.QGIS?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://securityscorecards.dev/viewer/?uri=github.com/qgis/QGIS&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/qgis/QGIS/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.bestpractices.dev/projects/1581&#34;&gt;&lt;img src=&#34;https://www.bestpractices.dev/projects/1581/badge&#34; alt=&#34;OpenSSF Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/qgis/QGIS/actions/workflows/mingw64.yml?query=branch%3Amaster+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/qgis/QGIS/actions/workflows/mingw64.yml/badge.svg?sanitize=true&#34; alt=&#34;ðŸªŸ MingW64 Windows 64bit Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.5281/zenodo.5869837&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/DOI/10.5281/zenodo.5869837.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;QGIS is a full-featured, user-friendly, free-and-open-source (FOSS) geographical information system (GIS) that runs on Unix platforms, Windows, and MacOS.&lt;/p&gt; &#xA;&lt;!-- TOC generated with https://freelance-tech-writer.github.io/table-of-contents-generator/index.html --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#1-flexible-and-powerful-spatial-data-management&#34;&gt;1. Flexible and powerful spatial data management&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#2-beautiful-cartography&#34;&gt;2. Beautiful cartography&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#3-advanced-and-robust-geospatial-analysis&#34;&gt;3. Advanced and robust geospatial analysis&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#4-powerful-customization-and-extensibility&#34;&gt;4. Powerful customization and extensibility&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#5-qgis-server&#34;&gt;5. QGIS Server&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#under-the-hood&#34;&gt;Under the hood&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#versions-and-release-cycle&#34;&gt;Versions and release cycle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#free-and-open-source&#34;&gt;Free and Open Source&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#installing-and-using-qgis&#34;&gt;Installing and using QGIS&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#help-and-support-channels&#34;&gt;Help and support channels&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#get-involved-with-the-community&#34;&gt;Get involved with the community&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#bug-reporting-and-bug-fixing&#34;&gt;Bug reporting and bug fixing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#new-features-and-enhancements&#34;&gt;New features and enhancements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/#other-ways-to-contribute&#34;&gt;Other ways to contribute&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;1. Flexible and powerful spatial data management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for raster, vector, mesh, and point cloud data in a range of industry-standard formats &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Raster formats include&lt;/em&gt;: GeoPackage, GeoTIFF, GRASS, ArcInfo binary and ASCII grids, ERDAS Imagine SDTS, WMS, WCS, PostgreSQL/PostGIS, and &lt;a href=&#34;https://gdal.org/drivers/raster/index.html&#34;&gt;other GDAL supported formats&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Vector formats include&lt;/em&gt;: GeoPackage, ESRI shapefiles, GRASS, SpatiaLite, PostgreSQL/PostGIS, MSSQL, Oracle, WFS, Vector Tiles and &lt;a href=&#34;https://www.gdal.org/ogr_formats.html&#34;&gt;other OGR supported formats&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Mesh formats include&lt;/em&gt;: NetCDF, GRIB, 2DM, and &lt;a href=&#34;https://github.com/lutraconsulting/MDAL#supported-formats&#34;&gt;other MDAL supported formats&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Point-cloud format&lt;/em&gt;: LAS/LAZ and EPT datasets.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Data abstraction framework, with local files, spatial databases (PostGIS, SpatiaLite, SQL Server, Oracle, SAP HANA), and web services (WMS, WCS, WFS, ArcGIS REST) all accessed through a unified data model and browser interface, and as flexible layers in user-created projects&lt;/li&gt; &#xA; &lt;li&gt;Spatial data creation via visual and numerical digitizing and editing, as well as georeferencing of raster and vector data&lt;/li&gt; &#xA; &lt;li&gt;On-the-fly reprojection between coordinate reference systems (CRS)&lt;/li&gt; &#xA; &lt;li&gt;Nominatim (OpenStreetMap) geocoder access&lt;/li&gt; &#xA; &lt;li&gt;Temporal support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: Temporal animation&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/images/README-md/icebergs.gif&#34; alt=&#34;Example: Temporal animation&#34; title=&#34;Temporal animation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: 3D map view&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs.qgis.org/latest/en/_images/3dmapview.png&#34; alt=&#34;Example: 3D map view&#34; title=&#34;3D map view&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Beautiful cartography&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Large variety of rendering options in 2D and 3D&lt;/li&gt; &#xA; &lt;li&gt;Fine control over symbology, labeling, legends and additional graphical elements for beautifully rendered maps&lt;/li&gt; &#xA; &lt;li&gt;Respect for embedded styling in many spatial data sources (e.g. KML and TAB files, Mapbox-GL styled vector tiles)&lt;/li&gt; &#xA; &lt;li&gt;In particular, near-complete replication (and significant extension) of symbology options that are available in proprietary software by ESRI&lt;/li&gt; &#xA; &lt;li&gt;Advanced styling using data-defined overrides, blending modes, and draw effects&lt;/li&gt; &#xA; &lt;li&gt;500+ built-in color ramps (cpt-city, ColorBrewer, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Create and update maps with specified scale, extent, style, and decorations via saved layouts&lt;/li&gt; &#xA; &lt;li&gt;Generate multiple maps (and reports) automatically using QGIS Atlas and QGIS Reports&lt;/li&gt; &#xA; &lt;li&gt;Display and export elevation profile plots with flexible symbology&lt;/li&gt; &#xA; &lt;li&gt;Flexible output direct to printer, or as image (raster), PDF, or SVG for further customization&lt;/li&gt; &#xA; &lt;li&gt;On-the-fly rendering enhancements using geometry generators (e.g. create and style new geometries from existing features)&lt;/li&gt; &#xA; &lt;li&gt;Preview modes for inclusive map making (e.g. monochrome, color blindness)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://flic.kr/p/2jFfGJP&#34;&gt;Example: Map of Bogota, Colombia in the style of Starry Starry Night, by AndrÃ©s Felipe Lancheros SÃ¡nchez&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://live.staticflickr.com/65535/50327326323_3da28f0d86_b.jpg&#34; alt=&#34;Map of Bogota, Colombia in the style of Starry Starry Night&#34; title=&#34;Map of Bogota, Colombia in the style of Starry Starry Night&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more maps created with QGIS, visit the &lt;a href=&#34;https://www.flickr.com/groups/2244553@N22/pool/with/50355460063/&#34;&gt;QGIS Map Showcase Flickr Group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/images/README-md/qgis_map_showcase.png&#34; alt=&#34;QGIS Map Showcase&#34; title=&#34;QGIS Map Showcase&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3. Advanced and robust geospatial analysis&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Powerful processing framework with 200+ native processing algorithms&lt;/li&gt; &#xA; &lt;li&gt;Access to 1000+ processing algorithms via providers such as GDAL, SAGA, GRASS, OrfeoToolbox, as well as custom models and processing scripts&lt;/li&gt; &#xA; &lt;li&gt;Geospatial database engine (filters, joins, relations, forms, etc.), as close to datasource- and format-independent as possible&lt;/li&gt; &#xA; &lt;li&gt;Immediate visualization of geospatial query and geoprocessing results&lt;/li&gt; &#xA; &lt;li&gt;Model designer and batch processing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: Travel isochrones&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/images/README-md/network_analysis_2.png&#34; alt=&#34;Example: Travel isochrones&#34; title=&#34;Travel isochrones&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: Model designer&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs.qgis.org/latest/en/_images/models_model.png&#34; alt=&#34;Example: model designer&#34; title=&#34;Model designer&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4. Powerful customization and extensibility&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully customizable user experience, including user interface and application settings that cater to power-users and beginners alike&lt;/li&gt; &#xA; &lt;li&gt;Rich &lt;a href=&#34;https://docs.qgis.org/testing/en/docs/user_manual/working_with_vector/expression.html&#34;&gt;expression engine&lt;/a&gt; for maximum flexibility in visualization and processing&lt;/li&gt; &#xA; &lt;li&gt;Broad and varied &lt;a href=&#34;https://plugins.qgis.org/&#34;&gt;plugin ecosystem&lt;/a&gt; that includes data connectors, digitizing aids, advanced analysis and charting tools, in-the-field data capture, conversion of ESRI style files, etc.&lt;/li&gt; &#xA; &lt;li&gt;Style manager for creating, storing, and managing styles&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plugins.qgis.org/styles/&#34;&gt;QGIS style hub&lt;/a&gt; for easy sharing of styles&lt;/li&gt; &#xA; &lt;li&gt;Python and C++ API for standalone (headless) applications as well as in-application comprehensive scripting (PyQGIS)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: Style manager&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs.qgis.org/latest/en/_images/stylemanager.png&#34; alt=&#34;Example: Style manager&#34; title=&#34;Style Manager&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: Plugins&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/images/README-md/plugins_1.png&#34; alt=&#34;Example: Plugins&#34; title=&#34;Plugins&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- Kill this one for now, since the example provided is Python2 not 3&#xA;Example: Python console&#xA;&#xA;![Example: Python console](https://docs.qgis.org/latest/en/_images/python_console_editor.png &#34;Python console&#34;)&#xA;--&gt; &#xA;&lt;h3&gt;5. QGIS Server&lt;/h3&gt; &#xA;&lt;p&gt;Headless map server -- running on Linux, macOS, Windows, or in a docker container -- that shares the same code base as QGIS.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Industry-standard protocols (WMS, WFS, WFS3/OGC API for Features and WCS) allow plug-n-play with any software stack&lt;/li&gt; &#xA; &lt;li&gt;Works with any web server (Apache, nginx, etc) or standalone&lt;/li&gt; &#xA; &lt;li&gt;All beautiful QGIS cartography is supported with best-in-class support for printing&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable with Python scripting support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: QGIS server WMS response&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs.qgis.org/latest/en/_images/server_selection_parameter.png&#34; alt=&#34;Example: QGIS Server response to a WMS request&#34; title=&#34;QGIS Server response to a WMS request&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example: QGIS server WFS response&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs.qgis.org/latest/en/_images/server_wfs3_feature.png&#34; alt=&#34;Example: QGIS Server response to a WFS Feature request&#34; title=&#34;QGIS Server response to a WFS Feature request&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Under the hood&lt;/h2&gt; &#xA;&lt;p&gt;QGIS is developed using the &lt;a href=&#34;https://qt.io&#34;&gt;Qt toolkit&lt;/a&gt; and C++, since 2002, and has a pleasing, easy to use graphical user interface with multilingual support. It is maintained by an active developer team and supported by vibrant community of GIS professionals and enthusiasts as well as geospatial data publishers and end-users.&lt;/p&gt; &#xA;&lt;h3&gt;Versions and release cycle&lt;/h3&gt; &#xA;&lt;p&gt;QGIS development and releases follow a &lt;a href=&#34;https://www.qgis.org/en/site/getinvolved/development/roadmap.html&#34;&gt;time based schedule/roadmap&lt;/a&gt;. There are three main branches of QGIS that users can install. These are the &lt;strong&gt;Long Term Release (LTR)&lt;/strong&gt; branch, the &lt;strong&gt;Latest Release (LR)&lt;/strong&gt; branch, and the &lt;strong&gt;Development (Nightly)&lt;/strong&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;Every month, there is a &lt;strong&gt;Point Release&lt;/strong&gt; that provides bug-fixes to the LTR and LR.&lt;/p&gt; &#xA;&lt;h3&gt;Free and Open Source&lt;/h3&gt; &#xA;&lt;p&gt;QGIS is released under the GNU Public License (GPL) Version 2 or any later version. Developing QGIS under this license means that you can (if you want to) inspect and modify the source code and guarantees that you, our happy user will always have access to a GIS program that is free of cost and can be freely modified.&lt;/p&gt; &#xA;&lt;p&gt;QGIS is part of the Open-Source Geospatial Foundation (&lt;a href=&#34;https://www.osgeo.org/&#34;&gt;OSGeo&lt;/a&gt;), offering a range of complementary open-source GIS software projects.&lt;/p&gt; &#xA;&lt;h2&gt;Installing and using QGIS&lt;/h2&gt; &#xA;&lt;p&gt;Precompiled binaries for QGIS are available at &lt;a href=&#34;https://www.qgis.org/en/site/forusers/download.html&#34;&gt;the QGIS.org download page&lt;/a&gt;. Please follow the installation instructions carefully.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/INSTALL.md&#34;&gt;building guide&lt;/a&gt; can be used to get started with building QGIS from source.&lt;/p&gt; &#xA;&lt;p&gt;For installation of QGIS Server, see its &lt;a href=&#34;https://docs.qgis.org/testing/en/docs/server_manual/getting_started.html&#34;&gt;getting started documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;A range of &lt;a href=&#34;https://qgis.org/en/docs/index.html&#34;&gt;documentation&lt;/a&gt; is available. This includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qgis.org/latest/en/docs/training_manual/index.html&#34;&gt;Training Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qgis.org/latest/en/docs/user_manual/index.html&#34;&gt;QGIS User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qgis.org/latest/en/docs/server_manual/index.html&#34;&gt;QGIS Server Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qgis.org/en/site/forusers/visualchangelogs.html&#34;&gt;Visual Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qgis.org/latest/en/docs/documentation_guidelines/index.html&#34;&gt;Documentation Guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qgis.org/latest/en/docs/pyqgis_developer_cookbook/index.html&#34;&gt;QGIS Python (PyQGIS) Cookbook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qgis.org/pyqgis/&#34;&gt;QGIS Python (PyQGIS) API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qgis.org/api/&#34;&gt;QGIS C++ API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qgis.org/latest/en/docs/developers_guide/index.html&#34;&gt;Developers Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Help and support channels&lt;/h3&gt; &#xA;&lt;p&gt;There are several channels where you can find help and support for QGIS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using the &lt;a href=&#34;https://qgis.org&#34;&gt;QGIS community site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Joining the &lt;a href=&#34;https://lists.osgeo.org/mailman/listinfo/qgis-user&#34;&gt;qgis-users mailing list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chatting with other users real-time. &lt;em&gt;Please wait around for a response to your question as many folks on the channel are doing other things and it may take a while for them to notice your question. The following paths all take you to the same chat room:&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using an IRC client and joining the &lt;a href=&#34;https://web.libera.chat/?channels=#qgis&#34;&gt;#qgis&lt;/a&gt; channel on irc.libera.chat.&lt;/li&gt; &#xA;   &lt;li&gt;Using a Matrix client and joining the &lt;a href=&#34;https://matrix.to/#/%23qgis:osgeo.org&#34;&gt;#qgis:osgeo.org&lt;/a&gt; room.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;At the &lt;a href=&#34;https://gis.stackexchange.com/&#34;&gt;GIS stackexchange&lt;/a&gt; or &lt;a href=&#34;https://www.reddit.com/r/QGIS/&#34;&gt;r/QGIS reddit&lt;/a&gt;, which are not maintained by the QGIS team, but where the QGIS and broader GIS community provides lots of advice&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qgis.org/en/site/forusers/support.html&#34;&gt;Other support channels&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get involved with the community&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qgis/QGIS/master/CONTRIBUTING.md&#34;&gt;Contribution guidelines for this project&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FastLED/FastLED</title>
    <updated>2024-11-10T01:39:38Z</updated>
    <id>tag:github.com,2024-11-10:/FastLED/FastLED</id>
    <link href="https://github.com/FastLED/FastLED" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The FastLED library for colored LED animation on Arduino. Please direct questions/requests for help to the FastLED Reddit community: http://fastled.io/r We&#39;d like to use github &#34;issues&#34; just for tracking library bugs / enhancements.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FastLED&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.ardu-badge.com/FastLED&#34;&gt;&lt;img src=&#34;https://www.ardu-badge.com/badge/FastLED.svg?sanitize=true&#34; alt=&#34;arduino-library-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_unit_test.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_unit_test.yml/badge.svg?sanitize=true&#34; alt=&#34;unit tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/arduino_library_lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/arduino_library_lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Arduino Library Lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://fastled.io/docs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Docs-Doxygen-blue.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/FastLED/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/reddit-/r/FastLED-orange.svg?logo=reddit&#34; alt=&#34;Reddit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://star-history.com/#fastled/fastled&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=fastled/fastled&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=fastled/fastled&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=fastled/fastled&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;The led driver for tiny computers the size of a quarter, more or less.&lt;/p&gt; &#xA;&lt;p&gt;esp32, teensy, arduino, raspberri pi, attiny family and more.&lt;/p&gt; &#xA;&lt;p&gt;This is a library for easily &amp;amp; efficiently controlling a wide variety of LED chipsets, like the ones sold by Adafruit (NeoPixel, DotStar, LPD8806), Sparkfun (WS2801), and AliExpress. In addition to writing to the LEDs, this library also includes a number of functions for high-performing 8-bit math for manipulating your RGB values, as well as low level classes for abstracting out access to pins and SPI hardware, while still keeping things as fast as possible.&lt;/p&gt; &#xA;&lt;p&gt;We have multiple goals with this library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quick start for new developers - hook up your LEDs and go, no need to think about specifics of the LED chipsets being used&lt;/li&gt; &#xA; &lt;li&gt;Zero pain switching LED chipsets - you get some new LEDs that the library supports, just change the definition of LEDs you&#39;re using, et. voila! Your code is running with the new LEDs.&lt;/li&gt; &#xA; &lt;li&gt;High performance - with features like zero cost global brightness scaling, high performance 8-bit math for RGB manipulation, and some of the fastest bit-bang&#39;d SPI support around, FastLED wants to keep as many CPU cycles available for your LED patterns as possible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;This is an Arduino Sketch that will run on Arduino Uno/Esp32/Raspberri Pi&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// New feature! Overclocking WS2812&#xA;// #define FASTLED_OVERCLOCK 1.2 // 20% overclock ~ 960 khz.&#xA;#include &amp;lt;FastLED.h&amp;gt;&#xA;#define NUM_LEDS 60&#xA;#define DATA_PIN 6&#xA;CRGB leds[NUM_LEDS];&#xA;void setup() { FastLED.addLeds&amp;lt;NEOPIXEL, DATA_PIN&amp;gt;(leds, NUM_LEDS); }&#xA;void loop() {&#xA;&#x9;leds[0] = CRGB::White; FastLED.show(); delay(30);&#xA;&#x9;leds[0] = CRGB::Black; FastLED.show(); delay(30);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more examples see this &lt;a href=&#34;https://raw.githubusercontent.com/FastLED/FastLED/master/examples&#34;&gt;link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;h4&gt;Arduino&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_uno.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_uno.yml/badge.svg?sanitize=true&#34; alt=&#34;uno&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_attiny13.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_attiny13.yml/badge.svg?sanitize=true&#34; alt=&#34;attiny13&#34;&gt;&lt;/a&gt; &lt;em&gt;needs pin definitions for this board&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_attiny85.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_attiny85.yml/badge.svg?sanitize=true&#34; alt=&#34;attiny85&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_attiny1604.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_attiny1604.yml/badge.svg?sanitize=true&#34; alt=&#34;attiny1604&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_attiny1616.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_attiny1616.yml/badge.svg?sanitize=true&#34; alt=&#34;attiny1616&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_attiny4313.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_attiny4313.yml/badge.svg?sanitize=true&#34; alt=&#34;attiny4313&#34;&gt;&lt;/a&gt; &lt;em&gt;needs pin definitions for this board&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_yun.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_yun.yml/badge.svg?sanitize=true&#34; alt=&#34;yun&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_digix.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_digix.yml/badge.svg?sanitize=true&#34; alt=&#34;digix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_uno_r4_wifif.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_uno_r4_wifif.yml/badge.svg?sanitize=true&#34; alt=&#34;uno_r4_wifi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_nano_every.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_nano_every.yml/badge.svg?sanitize=true&#34; alt=&#34;nano_every&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Teensy&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_teensy30.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_teensy30.yml/badge.svg?sanitize=true&#34; alt=&#34;teensy30&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_teensy31.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_teensy31.yml/badge.svg?sanitize=true&#34; alt=&#34;teensy31&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_teensyLC.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_teensyLC.yml/badge.svg?sanitize=true&#34; alt=&#34;teensyLC&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_teensy40.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_teensy40.yml/badge.svg?sanitize=true&#34; alt=&#34;teensy40&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_teensy41.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_teensy41.yml/badge.svg?sanitize=true&#34; alt=&#34;teensy41&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Specific Features&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_teensy_octo.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_teensy_octo.yml/badge.svg?sanitize=true&#34; alt=&#34;teensy_octoWS2811&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;NRF&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_adafruit_feather_nrf52840_sense.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_adafruit_feather_nrf52840_sense.yml/badge.svg?sanitize=true&#34; alt=&#34;nrf52840_sense&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_nrf52840_dk.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_nrf52840_dk.yml/badge.svg?sanitize=true&#34; alt=&#34;nordicnrf52_dk&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_adafruit_xiaoblesense.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_adafruit_xiaoblesense.yml/badge.svg?sanitize=true&#34; alt=&#34;adafruit_xiaoblesense&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_nrf52_xiaoblesense.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_nrf52_xiaoblesense.yml/badge.svg?sanitize=true&#34; alt=&#34;nrf52_xiaoblesense&#34;&gt;&lt;/a&gt; (This board has mbed engine but doesn&#39;t compile against Arduino.h right now for some unknown reason.)&lt;/p&gt; &#xA;&lt;h4&gt;STM&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_bluepill.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_bluepill.yml/badge.svg?sanitize=true&#34; alt=&#34;bluepill&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_maple_map.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_maple_map.yml/badge.svg?sanitize=true&#34; alt=&#34;maple_mini&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_stm103tb.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_stm103tb.yml/badge.svg?sanitize=true&#34; alt=&#34;stm103tb&#34;&gt;&lt;/a&gt; (PlatformIO doesn&#39;t support this board yet and we don&#39;t know what the build info is to support this is yet)&lt;/p&gt; &#xA;&lt;h4&gt;Raspberry Pi&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_rp2040.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_rp2040.yml/badge.svg?sanitize=true&#34; alt=&#34;rp2040&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_rp2350.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_rp2350.yml/badge.svg?sanitize=true&#34; alt=&#34;rp2350&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Esp&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp8622.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp8622.yml/badge.svg?sanitize=true&#34; alt=&#34;esp32-8266&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32dev.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32dev.yml/badge.svg?sanitize=true&#34; alt=&#34;esp32dev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32wroom.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32wroom.yml/badge.svg?sanitize=true&#34; alt=&#34;esp32wroom&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32c2.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32c2.yml/badge.svg?sanitize=true&#34; alt=&#34;esp32c2&#34;&gt;&lt;/a&gt; &lt;em&gt;might work with alternative settings, missing RMT device&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32c3.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32c3.yml/badge.svg?sanitize=true&#34; alt=&#34;esp32c3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32s3.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32s3.yml/badge.svg?sanitize=true&#34; alt=&#34;esp32s3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32c6.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32c6.yml/badge.svg?sanitize=true&#34; alt=&#34;esp32c6&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32h2.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32h2.yml/badge.svg?sanitize=true&#34; alt=&#34;esp32h2&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Specific features&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32rmt.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32rmt.yml/badge.svg?sanitize=true&#34; alt=&#34;esp32rmt_51&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32_i2s_ws2812.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp32_i2s_ws2812.yml/badge.svg?sanitize=true&#34; alt=&#34;esp32_i2s_ws2812&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp_extra_libs.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_esp_extra_libs.yml/badge.svg?sanitize=true&#34; alt=&#34;esp32 extra libs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Espressif&#39;s current evaluation of FastLED&#39;s compatibility with their product sheet can be found &lt;a href=&#34;https://github.com/espressif/arduino-esp32/raw/gh-pages/LIBRARIES_TEST.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;x86&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_linux.yml/badge.svg?sanitize=true&#34; alt=&#34;linux_native&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Wasm&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_wasm.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_wasm.yml/badge.svg?sanitize=true&#34; alt=&#34;wasm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compiled Library Size Check&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/check_attiny85.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/check_attiny85.yml/badge.svg?sanitize=true&#34; alt=&#34;attiny85_binary_size&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/check_uno_size.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/check_uno_size.yml/badge.svg?sanitize=true&#34; alt=&#34;uno_binary_size&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/check_esp32_size.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/check_esp32_size.yml/badge.svg?sanitize=true&#34; alt=&#34;esp32dev_binary_size&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/check_teensy41_size.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/check_teensy41_size.yml/badge.svg?sanitize=true&#34; alt=&#34;teensy41_binary_size&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;New in 3.9.2!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/be98fbe6-0ec7-492d-8ed1-b7eb6c627e86&#34; alt=&#34;image&#34;&gt; Update: max overclock has been reported at +70%: &lt;a href=&#34;https://www.reddit.com/r/FastLED/comments/1gkcb6m/fastled_fastled_led_overclock_17/&#34;&gt;https://www.reddit.com/r/FastLED/comments/1gkcb6m/fastled_fastled_led_overclock_17/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Arduino IDE / PlatformIO Dual Repo&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ve created a custom repo you can try to start your projects. This repo is designed to be used with VSCode + PlatformIO but is also &lt;em&gt;backwards compatible with the Arduino IDE&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;PlatformIO is an extension to VSCode and is generally viewed as a much better experience than the Arduino IDE. You get auto completion tools like intellisense and CoPilot and the ability to install tools like crash decoding. Anything you can do in Arduino IDE you can do with PlatformIO.&lt;/p&gt; &#xA;&lt;p&gt;Get started here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/PlatformIO-Starter&#34;&gt;https://github.com/FastLED/PlatformIO-Starter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ArduinoIDE&lt;/h3&gt; &#xA;&lt;p&gt;When running the Arduino IDE you need to do the additional installation step of installing FastLED in the global Arduino IDE package manager.&lt;/p&gt; &#xA;&lt;p&gt;Install the library using either &lt;a href=&#34;https://github.com/FastLED/FastLED/releases/latest/&#34;&gt;the .zip file from the latest release&lt;/a&gt; or by searching for &#34;FastLED&#34; in the libraries manager of the Arduino IDE. &lt;a href=&#34;https://docs.arduino.cc/software/ide-v1/tutorials/installing-libraries&#34;&gt;See the Arduino documentation on how to install libraries for more information.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_default.yml&#34;&gt;&lt;img src=&#34;https://github.com/FastLED/FastLED/actions/workflows/build_default.yml/badge.svg?sanitize=true&#34; alt=&#34;clone and compile&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to make changes to FastLED then please&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FastLED/FastLED/fork&#34;&gt;Fork&lt;/a&gt; the &lt;a href=&#34;https://github.com/FastLED/FastLED&#34;&gt;https://github.com/FastLED/FastLED&lt;/a&gt; repo into your github account.&lt;/li&gt; &#xA; &lt;li&gt;Open up the folder with VSCode. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Make sure VSCode had the platformio extension.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Once FastLED is loading with platformio, give it some time to download the dependencies (esp32-s3 (default) has a 1+GB download!)&lt;/li&gt; &#xA; &lt;li&gt;Click the platformio compile &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Then upload to your device&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/FastLED/FastLED/master/dev/dev.ino&#34;&gt;dev/dev.ino&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;1220&#34; alt=&#34;image&#34; src=&#34;https://github.com/user-attachments/assets/66f1832d-3cfb-4633-8af8-e66148bcad1b&#34;&gt; &#xA;&lt;p&gt;When changes are made then push to your fork to your repo and git will give you a url to trigger a pull request into the master repo.&lt;/p&gt; &#xA;&lt;h3&gt;Testing other devices&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;run &lt;a href=&#34;https://raw.githubusercontent.com/FastLED/FastLED/master/compile&#34;&gt;compile&lt;/a&gt; and then select your board&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Available boards:&#xA;[0]: ATtiny1616&#xA;[1]: adafruit_feather_nrf52840_sense&#xA;[2]: attiny85&#xA;[3]: bluepill&#xA;[4]: digix&#xA;[5]: esp01&#xA;[6]: esp32-c2-devkitm-1&#xA;[7]: esp32-c3-devkitm-1&#xA;[8]: esp32-c6-devkitc-1&#xA;[9]: esp32-s3-devkitc-1&#xA;[10]: esp32dev&#xA;[11]: esp32dev_i2s&#xA;[12]: esp32dev_idf44&#xA;[13]: esp32rmt_51&#xA;[14]: nano_every&#xA;[15]: rpipico&#xA;[16]: rpipico2&#xA;[17]: teensy30&#xA;[18]: teensy41&#xA;[19]: uno&#xA;[20]: uno_r4_wifi&#xA;[21]: xiaoblesense_adafruit&#xA;[22]: yun&#xA;[all]: All boards&#xA;Enter the number of the board you want to use: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Help and Support&lt;/h2&gt; &#xA;&lt;p&gt;If you need help with using the library, please consider visiting the Reddit community at &lt;a href=&#34;https://reddit.com/r/FastLED&#34;&gt;https://reddit.com/r/FastLED&lt;/a&gt;. There are thousands of knowledgeable FastLED users in that group and a plethora of solutions in the post history.&lt;/p&gt; &#xA;&lt;p&gt;If you are looking for documentation on how something in the library works, please see the Doxygen documentation online at &lt;a href=&#34;http://fastled.io/docs&#34;&gt;http://fastled.io/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you run into bugs with the library, or if you&#39;d like to request support for a particular platform or LED chipset, please submit an issue at &lt;a href=&#34;http://fastled.io/issues&#34;&gt;http://fastled.io/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported LED Chipsets&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a list of all the LED chipsets are supported. More details on the LED chipsets are included &lt;a href=&#34;https://github.com/FastLED/FastLED/wiki/Chipset-reference&#34;&gt;on our wiki page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adafruit&#39;s DotStars - aka APA102&lt;/li&gt; &#xA; &lt;li&gt;Adafruit&#39;s Neopixel - aka WS2812B (also WS2811/WS2812/WS2813, also supported in lo-speed mode) - a 3 wire addressable LED chipset&lt;/li&gt; &#xA; &lt;li&gt;TM1809/4 - 3 wire chipset, cheaply available on aliexpress.com&lt;/li&gt; &#xA; &lt;li&gt;TM1803 - 3 wire chipset, sold by RadioShack&lt;/li&gt; &#xA; &lt;li&gt;UCS1903 - another 3 wire LED chipset, cheap&lt;/li&gt; &#xA; &lt;li&gt;GW6205 - another 3 wire LED chipset&lt;/li&gt; &#xA; &lt;li&gt;LPD8806 - SPI based chipset, very high speed&lt;/li&gt; &#xA; &lt;li&gt;WS2801 - SPI based chipset, cheap and widely available&lt;/li&gt; &#xA; &lt;li&gt;SM16716 - SPI based chipset&lt;/li&gt; &#xA; &lt;li&gt;APA102 - SPI based chipset &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;APA102HD - Same as APA102 but with a high definition gamma correction function applied at the driver level.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;P9813 - aka Cool Neon&#39;s Total Control Lighting&lt;/li&gt; &#xA; &lt;li&gt;DMX - send rgb data out over DMX using Arduino DMX libraries&lt;/li&gt; &#xA; &lt;li&gt;SmartMatrix panels - needs the SmartMatrix library (&lt;a href=&#34;https://github.com/pixelmatix/SmartMatrix&#34;&gt;https://github.com/pixelmatix/SmartMatrix&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;LPD6803 - SPI based chpiset, chip CMODE pin must be set to 1 (inside oscillator mode)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;HL1606, and &#34;595&#34;-style shift registers are no longer supported by the library. The older Version 1 of the library (&#34;FastSPI_LED&#34;) has support for these, but is missing many of the advanced features of current versions and is no longer being maintained.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;Right now the library is supported on a variety of arduino compatible platforms. If it&#39;s ARM or AVR and uses the arduino software (or a modified version of it to build) then it is likely supported. Note that we have a long list of upcoming platforms to support, so if you don&#39;t see what you&#39;re looking for here, ask, it may be on the roadmap (or may already be supported). N.B. at the moment we are only supporting the stock compilers that ship with the arduino software. Support for upgraded compilers, as well as using AVR studio and skipping the arduino entirely, should be coming in a near future release.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adafruit Trinket &amp;amp; Gemma - Trinket Pro may be supported, but haven&#39;t tested to confirm yet&lt;/li&gt; &#xA; &lt;li&gt;Arduino &amp;amp; compatibles - straight up Arduino devices, Uno, Duo, Leonardo, Mega, Nano, etc...&lt;/li&gt; &#xA; &lt;li&gt;Arduino Due and the digistump DigiX&lt;/li&gt; &#xA; &lt;li&gt;Arduino YÃºn&lt;/li&gt; &#xA; &lt;li&gt;Arduino Zero&lt;/li&gt; &#xA; &lt;li&gt;AVR microcontrollers - ATtiny, ATmega and more families&lt;/li&gt; &#xA; &lt;li&gt;ESP32 based boards&lt;/li&gt; &#xA; &lt;li&gt;ESP8266 using the Arduino board definitions from &lt;a href=&#34;http://arduino.esp8266.com/stable/package_esp8266com_index.json&#34;&gt;http://arduino.esp8266.com/stable/package_esp8266com_index.json&lt;/a&gt; - please be sure to also read &lt;a href=&#34;https://github.com/FastLED/FastLED/wiki/ESP8266-notes&#34;&gt;https://github.com/FastLED/FastLED/wiki/ESP8266-notes&lt;/a&gt; for information specific to the 8266.&lt;/li&gt; &#xA; &lt;li&gt;Teensy 2, Teensy++ 2, Teensy 3.0, Teensy 3.1/3.2, Teensy LC, Teensy 3.5, Teensy 3.6, and Teensy 4.0 - arduino compatible from pjrc.com with some extra goodies (note the teensy LC, 3.2, 3.5, 3.6, 4.0 are ARM, not AVR!)&lt;/li&gt; &#xA; &lt;li&gt;RFDuino&lt;/li&gt; &#xA; &lt;li&gt;SparkCore&lt;/li&gt; &#xA; &lt;li&gt;The wino board - &lt;a href=&#34;http://wino-board.com&#34;&gt;http://wino-board.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;What types of platforms are we thinking about supporting in the future? Here&#39;s a short list: ChipKit32, Maple, Beagleboard&lt;/p&gt; &#xA;&lt;h1&gt;Special Notes on APA102 and the &#39;High Definition&#39; Mode in FastLED&lt;/h1&gt; &#xA;&lt;p&gt;The APA102 LED driver includes a 5-bit per-LED brightness component. Previously, this feature was not fully utilized, except through a workaround that defined a global brightness affecting all LEDs uniformly rather than individually.&lt;/p&gt; &#xA;&lt;p&gt;In FastLED the APA102 chipset will have extra resolution in comparison to the WS2812 RGB8 mode.&lt;/p&gt; &#xA;&lt;p&gt;There are two modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;APA102 &#34;Regular Mode&#34; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Has enhanced color resolution when using the &#34;global brightness&#34; factor&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;APA102HD Mode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Applies automatic gamma correction at the driver level using &#34;pseudo 13-bit&#34; color mixing.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;APA102HD Mode&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FastLED/FastLED/master/examples/Apa102HD/&#34;&gt;example: examples/APA102HD&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;By introducing a 5-bit gamma bit-shift algorithm, we now effectively leverage this per-LED brightness control. Faced with the decision to either rewrite the entire &lt;code&gt;CRGB&lt;/code&gt; library to expose the 5-bit brightnessâ€”including adaptations for formats like RGBWâ€”or to retain the existing RGB8 format used by FastLED and implement the enhancement at the driver level, the latter option was chosen. This approach avoids widespread changes and maintains compatibility; if RGB8 suffices for game development, it is adequate for LED development as well.&lt;/p&gt; &#xA;&lt;p&gt;The term &#34;Pseudo-13-bit&#34; arises because the additional resolution becomes significant only when all color components are at low values. For example, colors like &lt;code&gt;CRGB(255, 255, 254)&lt;/code&gt; or &lt;code&gt;CRGB(255, 1, 1)&lt;/code&gt; do not benefit from increased resolution due to the dominance of the brighter components. However, in low-light conditions with colors such as &lt;code&gt;CRGB(8, 8, 8)&lt;/code&gt;, where the maximum component value is low, the pseudo-13-bit algorithm significantly enhances resolutionâ€”precisely where increased resolution is most desired.&lt;/p&gt; &#xA;&lt;p&gt;Gamma correction is applied to preserve the RGB8 format and because future LEDs are expected to support gamma correction inherently. In game development, the 0-255 color values are based on the gamma scale rather than the linear power scale. LEDs like the WS2812 operate on a linear power scale, which results in washed-out, undersaturated colors when displaying captured video directly. Implementing software gamma correction for RGB8 severely reduces color resolution.&lt;/p&gt; &#xA;&lt;p&gt;To address this, an internal gamma scale mapping is applied:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RGB8 â†’ RGB16 + 5-bit gamma â†’ RGB8 + 5-bit gamma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;During the conversion back to RGB8, the brightness from the 5-bit gamma is bit-shifted into the RGB components. Each time the 5-bit brightness is shifted right, the RGB components are shifted left. For example:&lt;/p&gt; &#xA;&lt;p&gt;Starting with &lt;code&gt;RGB(4, 4, 4)&lt;/code&gt; and a 5-bit brightness value of 31:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shift RGB components left, shift 5-bit brightness right: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;RGB(8, 8, 8)&lt;/code&gt;, brightness 15&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;RGB(16, 16, 16)&lt;/code&gt;, brightness 7&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;RGB(32, 32, 32)&lt;/code&gt;, brightness 3&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;RGB(64, 64, 64)&lt;/code&gt;, brightness 1 (final state)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This simplified illustration omits that the actual processing occurs in 16-bit space rather than 8-bit, but the fundamental concept remains the same.&lt;/p&gt; &#xA;&lt;p&gt;By truncating the gamma-corrected RGB16 values back to RGB8, the LEDs receive pre-boosted RGB components and pre-dimmed 5-bit brightness values. This method preserves minor color details over a greater range, offering a valuable trade-off and leading to the designation of this mode as &#34;APA102HD.&#34;&lt;/p&gt; &#xA;&lt;p&gt;In version 3.9.0, the algorithm was completely rewritten to function natively on 8-bit controllers like the &lt;code&gt;__AVR__&lt;/code&gt; chipsets without significant performance loss. Previously, accumulating the numerator and denominator during the brightness bit-shifting process introduced extra bits that were ultimately truncated. Testing revealed that equivalent resolution could be achieved using straightforward bit-shifting, which also significantly reduced code size on AVR platforms with the new algorithm.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Further Enhancements in Version 3.9.0&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additionally, version 3.9.0 separated the color temperature from the global brightness scale. Before this update, global brightness was pre-mixed with the component scalesâ€”a method suitable for the WS2812&#39;s RGB8 format but not for the APA102&#39;s RGB8 plus 5-bit brightness. The update saw the global brightness and color scales separated for non-AVR chipsets. While the WS2812 continues to use pre-mixed values for performance reasons on AVR chipsets, the APA102 now performs component mixing within the &#34;pseudo-13-bit space.&#34;&lt;/p&gt; &#xA;&lt;p&gt;Although APA102HD mode offers the highest dynamic range, the standard APA102 mode also benefits from increased resolution when adjusting global brightness. In this mode, instead of pre-mixing scales and multiplying them against each &lt;code&gt;CRGB&lt;/code&gt; value, the global brightness is applied to the 5-bit brightness component, and only the color scales are multiplied against the &lt;code&gt;CRGB&lt;/code&gt; values. This approach is superior because each component of the color scale typically exceeds 127, providing ample high-order bits to preserve color information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;I hope this explanation clarifies the enhancements and the rationale behind these implementation choices. If you have any questions or require further clarification, please do not hesitate to ask.&lt;/p&gt; &#xA;&lt;h3&gt;Porting FastLED to a new platform&lt;/h3&gt; &#xA;&lt;p&gt;Information on porting FastLED can be found in the file &lt;a href=&#34;https://raw.githubusercontent.com/FastLED/FastLED/master/PORTING.md&#34;&gt;PORTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What about that name?&lt;/h2&gt; &#xA;&lt;p&gt;Wait, what happened to FastSPI_LED and FastSPI_LED2? The library was initially named FastSPI_LED because it was focused on very fast and efficient SPI access. However, since then, the library has expanded to support a number of LED chipsets that don&#39;t use SPI, as well as a number of math and utility functions for LED processing across the board. We decided that the name FastLED more accurately represents the totality of what the library provides, everything fast, for LEDs.&lt;/p&gt; &#xA;&lt;h2&gt;For more information&lt;/h2&gt; &#xA;&lt;p&gt;Check out the official site &lt;a href=&#34;http://fastled.io&#34;&gt;http://fastled.io&lt;/a&gt; for links to documentation, issues, and news&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TODO&lt;/em&gt; - get candy&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/STL</title>
    <updated>2024-11-10T01:39:38Z</updated>
    <id>tag:github.com,2024-11-10:/microsoft/STL</id>
    <link href="https://github.com/microsoft/STL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MSVC&#39;s implementation of the C++ Standard Library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Microsoft&#39;s C++ Standard Library&lt;/h1&gt; &#xA;&lt;p&gt;This is the official repository for Microsoft&#39;s implementation of the C++ Standard Library (also known as the STL), which ships as part of the MSVC toolset and the Visual Studio IDE.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://github.com/microsoft/STL/wiki/Changelog&#34;&gt;Changelog&lt;/a&gt; tracks which updates to this repository appear in each VS release.&lt;/li&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://microsoft.github.io/STL/&#34;&gt;Status Chart&lt;/a&gt; displays our overall progress over time.&lt;/li&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://discord.gg/XWanNww&#34;&gt;Discord server&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.azure.com/vclibs/STL/_build/latest?definitionId=4&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/vclibs/STL/_apis/build/status%2FSTL-CI?branchName=main&#34; alt=&#34;CI Status Badge&#34; title=&#34;STL-CI&#34;&gt;&lt;/a&gt; (STL-CI build status)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.azure.com/vclibs/STL/_build/latest?definitionId=5&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/vclibs/STL/_apis/build/status%2FSTL-ASan-CI?branchName=main&#34; alt=&#34;ASan CI Status Badge&#34; title=&#34;STL-ASan-CI&#34;&gt;&lt;/a&gt; (STL-ASan-CI build status)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;What This Repo Is Useful For&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re a programmer who just wants to use the STL, you &lt;strong&gt;don&#39;t&lt;/strong&gt; need this repo. Simply install the Visual Studio IDE and select the &#34;Desktop development with C++&#34; workload.&lt;/p&gt; &#xA;&lt;p&gt;If you want to participate in the STL&#39;s development, welcome! You can report issues, comment on pull requests, and learn about what we&#39;re working on. You can also submit pull requests to fix bugs or add features: see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/STL/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can take our code and use it in other apps and libraries (according to the terms of our license, like everything else).&lt;/p&gt; &#xA;&lt;h1&gt;GitHub Migration Status&lt;/h1&gt; &#xA;&lt;p&gt;We&#39;re in the process of moving all of our work on the STL to GitHub. Current status:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Code: &lt;strong&gt;Done.&lt;/strong&gt; Our source code is available under the Apache License v2.0 with LLVM Exception. (See &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/STL/main/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/STL/main/NOTICE.txt&#34;&gt;NOTICE.txt&lt;/a&gt; for more information.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build System: &lt;strong&gt;In progress.&lt;/strong&gt; We&#39;re working on a CMake build system, which is currently capable of building one flavor of the STL (native desktop). We need to extend this to build all of the flavors required for the MSVC toolset (e.g. &lt;code&gt;/clr&lt;/code&gt;, &lt;code&gt;/clr:pure&lt;/code&gt;, OneCore, Spectre). Until that&#39;s done, we&#39;re keeping our legacy build system around in the &lt;code&gt;stl/msbuild&lt;/code&gt; subdirectory. (We&#39;re keeping those files in this repo, even though they&#39;re unusable outside of Microsoft, because they need to be updated whenever source files are added/renamed/deleted. We&#39;ll delete the legacy machinery as soon as possible.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tests: &lt;strong&gt;In progress.&lt;/strong&gt; We rely on three test suites: std, tr1, and &lt;a href=&#34;https://libcxx.llvm.org&#34;&gt;libcxx&lt;/a&gt;. We&#39;ve partially ported std and tr1, and fully ported libcxx to run under &lt;a href=&#34;https://llvm.org/docs/CommandGuide/lit.html&#34;&gt;lit&lt;/a&gt; using the various configurations/compilers we test internally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Continuous Integration: &lt;strong&gt;In progress.&lt;/strong&gt; We&#39;ve set up Azure Pipelines to validate changes to the repository. Currently, it builds the STL (native desktop for x86, x64, ARM, and ARM64). Also, it strictly verifies that all of our files have been formatted with &lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;clang-format&lt;/a&gt; and follow our other whitespace conventions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Contribution Guidelines: &lt;strong&gt;Coming soon.&lt;/strong&gt; Working on the STL&#39;s code involves following many rules. We have codebase conventions, Standard requirements, Microsoft-specific requirements, binary compatibility (ABI) requirements, and more. We&#39;re eager to begin accepting features and fixes from the community, but in addition to setting up a CI system, we need to write down all of the rules that are currently stored in our brains. (The ABI rules may be useful to other C++ libraries.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Issues: &lt;strong&gt;In progress.&lt;/strong&gt; We&#39;re going to use GitHub issues to track all of the things that we need to work on. This includes C++20 features, &lt;a href=&#34;https://cplusplus.github.io/LWG/lwg-toc.html&#34;&gt;LWG issues&lt;/a&gt;, conformance bugs, performance improvements, and other todos. There are approximately 200 active bugs in the STL&#39;s Microsoft-internal database; we need to manually replicate all of them to GitHub issues. Currently, the &lt;a href=&#34;https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3Acxx20&#34;&gt;cxx20 tag&lt;/a&gt; and &lt;a href=&#34;https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3ALWG&#34;&gt;LWG tag&lt;/a&gt; are done; every remaining work item is tracked by a GitHub issue. The &lt;a href=&#34;https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3Abug&#34;&gt;bug tag&lt;/a&gt; and &lt;a href=&#34;https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement&#34;&gt;enhancement tag&lt;/a&gt; are being populated.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plans: &lt;strong&gt;In progress.&lt;/strong&gt; We&#39;re writing up our &lt;a href=&#34;https://github.com/microsoft/STL/wiki/Roadmap&#34;&gt;Roadmap&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Goals&lt;/h1&gt; &#xA;&lt;p&gt;We&#39;re implementing the latest C++ Working Draft, currently &lt;a href=&#34;https://wg21.link/N4993&#34;&gt;N4993&lt;/a&gt;, which will eventually become the next C++ International Standard. The terms Working Draft (WD) and Working Paper (WP) are interchangeable; we often informally refer to these drafts as &#34;the Standard&#34; while being aware of the difference. (There are other relevant Standards; for example, supporting &lt;code&gt;/std:c++14&lt;/code&gt; and &lt;code&gt;/std:c++17&lt;/code&gt; involves understanding how the C++14 and C++17 Standards differ from the Working Paper, and we often need to refer to the C Standard Library and ECMAScript regular expression specifications.)&lt;/p&gt; &#xA;&lt;p&gt;Our primary goals are conformance, performance, usability, and compatibility.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Conformance: The Working Paper is a moving target; as features and LWG issue resolutions are added, we need to implement them. That can involve a lot of work because the STL is required to behave in very specific ways and to handle users doing very unusual things.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Performance: The STL needs to be extremely fast at runtime; speed is one of C++&#39;s core strengths and most C++ programs use the STL extensively. As a result, we spend more time on optimization than most general-purpose libraries. (However, we&#39;re wary of changes that improve some scenarios at the expense of others, or changes that make code significantly more complicated and fragile. That is, there&#39;s a &#34;complexity budget&#34; that must be spent carefully.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Usability: This includes parts of the programming experience like compiler throughput, diagnostic messages, and debugging checks. For example, we&#39;ve extensively marked the STL with &lt;code&gt;[[nodiscard]]&lt;/code&gt; attributes because this helps programmers avoid bugs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compatibility: This includes binary compatibility and source compatibility. We&#39;re keeping VS 2022 binary-compatible with VS 2015/2017/2019, which restricts what we can change in VS 2022 updates. (We&#39;ve found that significant changes are possible even though other changes are impossible, which we&#39;ll be documenting in our Contribution Guidelines soon.) While there are a few exceptions to this rule (e.g. if a feature is added to the Working Paper, we implement it, and then the feature is significantly changed before the International Standard is finalized, we reserve the right to break binary compatibility because &lt;code&gt;/std:c++latest&lt;/code&gt; offers an experimental preview of such features), binary compatibility generally overrides all other considerations, even conformance. Source compatibility refers to being able to successfully recompile user code without changes. We consider source compatibility to be important, but not all-important; breaking source compatibility can be an acceptable cost if done for the right reasons in the right way (e.g. in a controlled manner with escape hatches).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Non-Goals&lt;/h1&gt; &#xA;&lt;p&gt;There are things that we aren&#39;t interested in doing with this project, for various reasons (most importantly, we need to focus development effort on our goals). Some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Non-goal: Porting to other platforms.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Non-goal: Adding non-Standard extensions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Non-goal: Implementing Technical Specifications. (We&#39;re prioritizing features in the Working Paper. Occasionally, we might implement some or all of a TS, often when we&#39;re working on the specification itself.)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re proposing a feature to WG21 (the C++ Standardization Committee), you&#39;re welcome (and encouraged!) to use our code as a base for a proof-of-concept implementation. These non-goals simply mean that we&#39;re unable to consider pull requests for a proposed feature until it has been voted into a Working Paper. After that happens, we&#39;ll be delighted to review a production-ready pull request.&lt;/p&gt; &#xA;&lt;h1&gt;Reporting Issues&lt;/h1&gt; &#xA;&lt;p&gt;You can report STL bugs here, where they&#39;ll be directly reviewed by maintainers. You can also report STL bugs through &lt;a href=&#34;https://aka.ms/feedback/report?space=62&#34;&gt;Developer Community&lt;/a&gt;, or the VS IDE (Help &amp;gt; Send Feedback &amp;gt; Report a Problem...).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please help us&lt;/strong&gt; efficiently process bug reports by following these rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Only STL bugs should be reported here. If it&#39;s a bug in the compiler, CRT, or IDE, please report it through Developer Community or Report A Problem. If it&#39;s a bug in the Windows SDK, please report it through the &lt;a href=&#34;https://support.microsoft.com/en-us/help/4021566/windows-10-send-feedback-to-microsoft-with-feedback-hub-app&#34;&gt;Feedback Hub&lt;/a&gt; app. If you aren&#39;t sure, try to reduce your test case and see if you can eliminate the STL&#39;s involvement while still reproducing the bug.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You should be reasonably confident that you&#39;re looking at an actual implementation bug, instead of undefined behavior or surprising-yet-Standard behavior. Comparing against other implementations can help (but remember that implementations can differ while conforming to the Standard); try &lt;a href=&#34;https://godbolt.org&#34;&gt;Compiler Explorer&lt;/a&gt;. If you still aren&#39;t sure, ask the nearest C++ expert.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You should prepare a self-contained command-line test case, ideally as small as possible. We need a source file, a command line, what happened (e.g. a compiler error, runtime misbehavior), and what you expected to happen. By &#34;self-contained&#34;, we mean that your source file has to avoid including code that we don&#39;t have. Ideally, only CRT and STL headers should be included. If you have to include other MSVC libraries, or the Windows SDK, to trigger an STL bug, that&#39;s okay. But if you need parts of your own source code to trigger the STL bug, you need to extract that for us. (On Developer Community, we&#39;ll accept zipped IDE projects if you have no other way to reproduce a bug, but this is very time-consuming for us to reduce.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A good title is helpful. We prefer &#34;&lt;code&gt;&amp;lt;header_name&amp;gt;&lt;/code&gt;: Short description of your issue&#34;. You don&#39;t usually need to mention &lt;code&gt;std::&lt;/code&gt; or C++. For example, &#34;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;: &lt;code&gt;is_cute&lt;/code&gt; should be true for &lt;code&gt;enum class FluffyKittens&lt;/code&gt;&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s okay if you report an apparent STL bug that turns out to be a compiler bug or surprising-yet-Standard behavior. Just try to follow these rules, so we can spend more time fixing bugs and implementing features.&lt;/p&gt; &#xA;&lt;h1&gt;How To Build With The Visual Studio IDE&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Visual Studio 2022 17.12 Preview 3 or later. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Select &#34;Windows 11 SDK (10.0.22621.0)&#34; in the VS Installer.&lt;/li&gt; &#xA;   &lt;li&gt;Select &#34;MSVC v143 - VS 2022 C++ ARM64/ARM64EC build tools (Latest)&#34; in the VS Installer if you would like to build the ARM64/ARM64EC target.&lt;/li&gt; &#xA;   &lt;li&gt;Select &#34;MSVC v143 - VS 2022 C++ ARM build tools (Latest)&#34; in the VS Installer if you would like to build the ARM target.&lt;/li&gt; &#xA;   &lt;li&gt;We recommend selecting &#34;C++ CMake tools for Windows&#34; in the VS Installer. This will ensure that you&#39;re using supported versions of CMake and Ninja.&lt;/li&gt; &#xA;   &lt;li&gt;Otherwise, install &lt;a href=&#34;https://cmake.org/download&#34;&gt;CMake&lt;/a&gt; 3.29.0 or later, and &lt;a href=&#34;https://ninja-build.org&#34;&gt;Ninja&lt;/a&gt; 1.12.1 or later.&lt;/li&gt; &#xA;   &lt;li&gt;Make sure &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;Python&lt;/a&gt; 3.13 or later is available to CMake.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open Visual Studio, and choose the &#34;Clone or check out code&#34; option. Enter the URL of this repository, &lt;code&gt;https://github.com/microsoft/STL&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal in the IDE with &lt;code&gt;Ctrl + `&lt;/code&gt; (by default) or press on &#34;View&#34; in the top bar, and then &#34;Terminal&#34;.&lt;/li&gt; &#xA; &lt;li&gt;In the terminal, invoke &lt;code&gt;git submodule update --init --progress&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Choose the architecture you wish to build in the IDE, and build as you would any other project. All necessary CMake settings are set by &lt;code&gt;CMakePresets.json&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;How To Build With A Native Tools Command Prompt&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Visual Studio 2022 17.12 Preview 3 or later. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Select &#34;Windows 11 SDK (10.0.22621.0)&#34; in the VS Installer.&lt;/li&gt; &#xA;   &lt;li&gt;Select &#34;MSVC v143 - VS 2022 C++ ARM64/ARM64EC build tools (Latest)&#34; in the VS Installer if you would like to build the ARM64/ARM64EC target.&lt;/li&gt; &#xA;   &lt;li&gt;Select &#34;MSVC v143 - VS 2022 C++ ARM build tools (Latest)&#34; in the VS Installer if you would like to build the ARM target.&lt;/li&gt; &#xA;   &lt;li&gt;We recommend selecting &#34;C++ CMake tools for Windows&#34; in the VS Installer. This will ensure that you&#39;re using supported versions of CMake and Ninja.&lt;/li&gt; &#xA;   &lt;li&gt;Otherwise, install &lt;a href=&#34;https://cmake.org/download&#34;&gt;CMake&lt;/a&gt; 3.29.0 or later, and &lt;a href=&#34;https://ninja-build.org&#34;&gt;Ninja&lt;/a&gt; 1.12.1 or later.&lt;/li&gt; &#xA;   &lt;li&gt;Make sure &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;Python&lt;/a&gt; 3.13 or later is available to CMake.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open a command prompt.&lt;/li&gt; &#xA; &lt;li&gt;Change directories to a location where you&#39;d like a clone of this STL repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/microsoft/STL.git --recurse-submodules&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To build the x86 target:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open an &#34;x86 Native Tools Command Prompt for VS 2022 Preview&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Change directories to the previously cloned &lt;code&gt;STL&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake --preset x86&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake --build --preset x86&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To build the x64 target (recommended):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open an &#34;x64 Native Tools Command Prompt for VS 2022 Preview&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Change directories to the previously cloned &lt;code&gt;STL&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake --preset x64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake --build --preset x64&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To build the ARM target:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Auxiliary\Build\vcvarsall.bat&#34; x64_arm&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you installed VS to a non-default location, change this path accordingly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Change directories to the previously cloned &lt;code&gt;STL&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake --preset ARM&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake --build --preset ARM&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To build the ARM64 target:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Auxiliary\Build\vcvarsall.bat&#34; x64_arm64&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you installed VS to a non-default location, change this path accordingly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Change directories to the previously cloned &lt;code&gt;STL&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake --preset ARM64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake --build --preset ARM64&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To build the ARM64EC target:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Auxiliary\Build\vcvarsall.bat&#34; x64_arm64&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you installed VS to a non-default location, change this path accordingly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Change directories to the previously cloned &lt;code&gt;STL&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake --preset ARM64EC&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake --build --preset ARM64EC&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;How To Consume&lt;/h1&gt; &#xA;&lt;p&gt;Consumption of the built library is largely based on the build system you&#39;re using. There are at least 2 directories you need to hook up. Assuming you built the x64 target with the Visual Studio IDE, with the STL repository cloned to &lt;code&gt;C:\Dev\STL&lt;/code&gt;, build outputs will end up at &lt;code&gt;C:\Dev\STL\out\x64\out&lt;/code&gt;. Ensure that the &lt;code&gt;inc&lt;/code&gt; directory is searched for headers, and that &lt;code&gt;lib\{architecture}&lt;/code&gt; is searched for link libraries, before any defaults supplied by MSVC. The names of the import and static libraries are the same as those that ship with MSVC. As a result, the compiler &lt;code&gt;/MD&lt;/code&gt;, &lt;code&gt;/MDd&lt;/code&gt;, &lt;code&gt;/MT&lt;/code&gt;, or &lt;code&gt;/MTd&lt;/code&gt; switches will work without modification of your build scripts or command-line muscle memory.&lt;/p&gt; &#xA;&lt;p&gt;Should you choose to use the DLL flavors, the DLLs to deploy are built to &lt;code&gt;bin\{architecture}&lt;/code&gt;. Note that the DLLs generated by the CMake build system here have a suffix, defaulting to &lt;code&gt;_oss&lt;/code&gt;, which distinguishes them from the binaries that ship with MSVC. That avoids any conflict with the DLLs installed by the &lt;a href=&#34;https://learn.microsoft.com/en-US/cpp/windows/latest-supported-vc-redist&#34;&gt;redistributables&lt;/a&gt; into System32 and ensures that other components wanting to be a &#34;guest in your process&#34;, like print drivers and shell extensions, see the export surface of the STL they were built with. Otherwise, the &#34;&lt;code&gt;msvcp140.dll&lt;/code&gt;&#34; you deployed in the same directory as your .exe would &#34;win&#34; over the versions in System32.&lt;/p&gt; &#xA;&lt;p&gt;The compiler looks for include directories according to the &lt;code&gt;INCLUDE&lt;/code&gt; environment variable, and the linker looks for import library directories according to the &lt;code&gt;LIB&lt;/code&gt; environment variable, and the Windows loader will (eventually) look for DLL dependencies according to directories in the &lt;code&gt;PATH&lt;/code&gt; environment variable. The build generates a batch script named &lt;code&gt;set_environment.bat&lt;/code&gt; in the output directory. If you run this script in a VS Developer Command Prompt, it will insert the proper directories into the &lt;code&gt;INCLUDE&lt;/code&gt;, &lt;code&gt;LIB&lt;/code&gt;, and &lt;code&gt;PATH&lt;/code&gt; environment variables to ensure that the built headers and libraries are used.&lt;/p&gt; &#xA;&lt;h2&gt;Complete Example Using x64 DLL Flavor&lt;/h2&gt; &#xA;&lt;p&gt;From an &#34;x64 Native Tools Command Prompt for VS 2022 Preview&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Users\username\Desktop&amp;gt;C:\Dev\STL\out\x64\set_environment.bat&#xA;&#xA;C:\Users\username\Desktop&amp;gt;type example.cpp&#xA;#include &amp;lt;iostream&amp;gt;&#xA;&#xA;int main() {&#xA;    std::cout &amp;lt;&amp;lt; &#34;Hello STL OSS world!\n&#34;;&#xA;}&#xA;&#xA;C:\Users\username\Desktop&amp;gt;cl /nologo /EHsc /W4 /WX /MDd /std:c++latest .\example.cpp&#xA;example.cpp&#xA;&#xA;C:\Users\username\Desktop&amp;gt;.\example.exe&#xA;Hello STL OSS world!&#xA;&#xA;C:\Users\username\Desktop&amp;gt;dumpbin /DEPENDENTS .\example.exe | findstr msvcp&#xA;    msvcp140d_oss.dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;How To Run The Tests With A Native Tools Command Prompt&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow either &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/STL/main/#how-to-build-with-a-native-tools-command-prompt&#34;&gt;How To Build With A Native Tools Command Prompt&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/STL/main/#how-to-build-with-the-visual-studio-ide&#34;&gt;How To Build With The Visual Studio IDE&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Acquire &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;Python&lt;/a&gt; 3.13 or newer and have it on the &lt;code&gt;PATH&lt;/code&gt; (or run it directly using its absolute or relative path).&lt;/li&gt; &#xA; &lt;li&gt;Have LLVM&#39;s &lt;code&gt;bin&lt;/code&gt; directory on the &lt;code&gt;PATH&lt;/code&gt; (so &lt;code&gt;clang-cl.exe&lt;/code&gt; is available). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We recommend selecting &#34;C++ Clang tools for Windows&#34; in the VS Installer. This will automatically add LLVM to the &lt;code&gt;PATH&lt;/code&gt; of the x86 and x64 Native Tools Command Prompts, and will ensure that you&#39;re using a supported version.&lt;/li&gt; &#xA;   &lt;li&gt;Otherwise, use &lt;a href=&#34;https://releases.llvm.org/download.html&#34;&gt;LLVM&#39;s installer&lt;/a&gt; and choose to add LLVM to your &lt;code&gt;PATH&lt;/code&gt; during installation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Follow the instructions below.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running All The Tests&lt;/h2&gt; &#xA;&lt;p&gt;After configuring and building the project, running &lt;code&gt;ctest&lt;/code&gt; from the build output directory will run all the tests. CTest will only display the standard error output of tests that failed. In order to get more details from CTest&#39;s &lt;code&gt;lit&lt;/code&gt; invocations, run the tests with &lt;code&gt;ctest -V&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running A Subset Of The Tests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;${PROJECT_BINARY_DIR}\tests\utils\stl-lit\stl-lit.py&lt;/code&gt; can be invoked on a subdirectory of a test suite and will execute all the tests under that subdirectory. This can mean executing the entirety of a single test suite, running all tests under a category in libcxx, or running a single test in &lt;code&gt;std&lt;/code&gt; and &lt;code&gt;tr1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;These examples assume that your current directory is &lt;code&gt;C:\Dev\STL\out\x64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This command will run all of the test suites with verbose output. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ctest -V&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;This command will also run all of the test suites. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;python tests\utils\stl-lit\stl-lit.py ..\..\llvm-project\libcxx\test ..\..\tests\std ..\..\tests\tr1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;This command will run all of the std test suite. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;python tests\utils\stl-lit\stl-lit.py ..\..\tests\std&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you want to run a subset of a test suite, you need to point it to the right place in the sources. The following will run the single test found under VSO_0000000_any_calling_conventions. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;python tests\utils\stl-lit\stl-lit.py ..\..\tests\std\tests\VSO_0000000_any_calling_conventions&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can invoke &lt;code&gt;stl-lit&lt;/code&gt; with any arbitrary subdirectory of a test suite. In libcxx this allows you to have finer control over what category of tests you would like to run. The following will run all the libcxx map tests. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;python tests\utils\stl-lit\stl-lit.py ..\..\llvm-project\libcxx\test\std\containers\associative\map&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can also use the &lt;code&gt;--filter&lt;/code&gt; option to include tests whose names match a regular expression. The following command will run tests with &#34;atomic_wait&#34; in their names in both the std and libcxx test suites. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;python tests\utils\stl-lit\stl-lit.py ..\..\llvm-project\libcxx\test ..\..\tests\std --filter=atomic_wait&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;There&#39;s also a &lt;code&gt;--filter-out&lt;/code&gt; option to exclude tests matching a regular expression; &lt;code&gt;--filter=iota --filter-out=view&lt;/code&gt; would run tests with names matching &#34;iota&#34; but not &#34;view&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Interpreting The Results Of Tests&lt;/h2&gt; &#xA;&lt;h3&gt;CTest&lt;/h3&gt; &#xA;&lt;p&gt;When running the tests via CTest, all of the test suites are considered to be a single test. If any single test in a test suite fails, CTest will simply report that the &lt;code&gt;stl&lt;/code&gt; test failed.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0% tests passed, 1 tests failed out of 1&#xA;&#xA;Total Test time (real) = 2441.55 sec&#xA;&#xA;The following tests FAILED:&#xA;      1 - stl (Failed)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The primary utility of CTest in this case is to conveniently invoke &lt;code&gt;stl-lit.py&lt;/code&gt; with the correct set of arguments.&lt;/p&gt; &#xA;&lt;p&gt;CTest will output everything that was sent to stderr for each of the failed test suites, which can be used to identify which individual test within the test suite failed. It can sometimes be helpful to run CTest with the &lt;code&gt;-V&lt;/code&gt; option in order to see the stdout of the tests.&lt;/p&gt; &#xA;&lt;h3&gt;stl-lit&lt;/h3&gt; &#xA;&lt;p&gt;When running the tests directly via the generated &lt;code&gt;stl-lit.py&lt;/code&gt; script the result of each test will be printed. The format of each result is &lt;code&gt;{Result Code}: {Test Suite Name} :: {Test Name}:{Configuration Number}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- Testing: 28 tests, 12 workers --&#xA;PASS: tr1 :: tests/cwchar1:01 (1 of 28)&#xA;PASS: tr1 :: tests/cwchar1:11 (2 of 28)&#xA;PASS: tr1 :: tests/cwchar1:02 (3 of 28)&#xA;PASS: tr1 :: tests/cwchar1:03 (4 of 28)&#xA;PASS: tr1 :: tests/cwchar1:00 (5 of 28)&#xA;PASS: tr1 :: tests/cwchar1:04 (6 of 28)&#xA;PASS: tr1 :: tests/cwchar1:05 (7 of 28)&#xA;PASS: tr1 :: tests/cwchar1:09 (8 of 28)&#xA;PASS: tr1 :: tests/cwchar1:06 (9 of 28)&#xA;UNSUPPORTED: tr1 :: tests/cwchar1:20 (10 of 28)&#xA;UNSUPPORTED: tr1 :: tests/cwchar1:21 (11 of 28)&#xA;UNSUPPORTED: tr1 :: tests/cwchar1:22 (12 of 28)&#xA;UNSUPPORTED: tr1 :: tests/cwchar1:23 (13 of 28)&#xA;UNSUPPORTED: tr1 :: tests/cwchar1:24 (14 of 28)&#xA;PASS: tr1 :: tests/cwchar1:07 (15 of 28)&#xA;PASS: tr1 :: tests/cwchar1:08 (16 of 28)&#xA;PASS: tr1 :: tests/cwchar1:10 (17 of 28)&#xA;PASS: tr1 :: tests/cwchar1:16 (18 of 28)&#xA;PASS: tr1 :: tests/cwchar1:17 (19 of 28)&#xA;PASS: tr1 :: tests/cwchar1:14 (20 of 28)&#xA;PASS: tr1 :: tests/cwchar1:12 (21 of 28)&#xA;PASS: tr1 :: tests/cwchar1:13 (22 of 28)&#xA;PASS: tr1 :: tests/cwchar1:19 (23 of 28)&#xA;PASS: tr1 :: tests/cwchar1:18 (24 of 28)&#xA;PASS: tr1 :: tests/cwchar1:15 (25 of 28)&#xA;PASS: tr1 :: tests/cwchar1:25 (26 of 28)&#xA;PASS: tr1 :: tests/cwchar1:26 (27 of 28)&#xA;PASS: tr1 :: tests/cwchar1:27 (28 of 28)&#xA;&#xA;Testing Time: 3.96s&#xA;  Expected Passes    : 23&#xA;  Unsupported Tests  : 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above example, we see that 23 tests succeeded and 5 were unsupported.&lt;/p&gt; &#xA;&lt;h3&gt;Result Code Values&lt;/h3&gt; &#xA;&lt;p&gt;Our tests use the standard &lt;a href=&#34;https://llvm.org/docs/CommandGuide/lit.html#test-status-results&#34;&gt;lit result codes&lt;/a&gt;, and an undocumented result code: &lt;code&gt;SKIPPED&lt;/code&gt;. For our tests, only the &lt;code&gt;PASS&lt;/code&gt;, &lt;code&gt;XFAIL&lt;/code&gt;, &lt;code&gt;XPASS&lt;/code&gt;, &lt;code&gt;FAIL&lt;/code&gt;, &lt;code&gt;UNSUPPORTED&lt;/code&gt;, and &lt;code&gt;SKIPPED&lt;/code&gt; result codes are relevant.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;PASS&lt;/code&gt; and &lt;code&gt;FAIL&lt;/code&gt; result codes are self-explanatory. We want our tests to &lt;code&gt;PASS&lt;/code&gt; and not &lt;code&gt;FAIL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;XPASS&lt;/code&gt; and &lt;code&gt;XFAIL&lt;/code&gt; result codes are less obvious. &lt;code&gt;XPASS&lt;/code&gt; is actually a failure result and indicates that we expected a test to fail but it passed. &lt;code&gt;XFAIL&lt;/code&gt; is a successful result and indicates that we expected the test to fail and it did. Typically an &lt;code&gt;XPASS&lt;/code&gt; result means that the &lt;code&gt;expected_results.txt&lt;/code&gt; file for the test suite needs to be modified. If the &lt;code&gt;XPASS&lt;/code&gt; result is a test legitimately passing, the usual course of action would be to remove a &lt;code&gt;FAIL&lt;/code&gt; entry from the &lt;code&gt;expected_results.txt&lt;/code&gt;. However, some tests from &lt;code&gt;libcxx&lt;/code&gt; mark themselves as &lt;code&gt;XFAIL&lt;/code&gt; (meaning they expect to fail) for features they have added tests for but have yet to implement in &lt;code&gt;libcxx&lt;/code&gt;. If the STL implements those features first the tests will begin passing unexpectedly for us and return &lt;code&gt;XPASS&lt;/code&gt; results. In order to resolve this it is necessary to add a &lt;code&gt;PASS&lt;/code&gt; entry to the &lt;code&gt;expected_results.txt&lt;/code&gt; of the test suite in question.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;UNSUPPORTED&lt;/code&gt; result code means that the requirements for a test are not met and so it will not be run. Currently, all tests which use the &lt;code&gt;/clr&lt;/code&gt; or &lt;code&gt;/clr:pure&lt;/code&gt; options are unsupported. Also, the &lt;code&gt;/BE&lt;/code&gt; option is unsupported for x86.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;SKIPPED&lt;/code&gt; result code indicates that a given test was explicitly skipped by adding a &lt;code&gt;SKIPPED&lt;/code&gt; entry to the &lt;code&gt;expected_results.txt&lt;/code&gt;. A test may be skipped for a number of reasons, which include, but are not limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;being an incorrect test&lt;/li&gt; &#xA; &lt;li&gt;taking a very long time to run&lt;/li&gt; &#xA; &lt;li&gt;failing or passing for the incorrect reason&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debugging Individual Tests&lt;/h3&gt; &#xA;&lt;p&gt;While &lt;code&gt;stl-lit&lt;/code&gt; is super awesome in finding out that &lt;em&gt;something&lt;/em&gt; is wrong or not even compiling, it is not really helpful in debugging &lt;em&gt;what&lt;/em&gt; is going wrong. However, debugging individual tests is rather simple given some additional steps. Let&#39;s assume we want to debug a new feature with tests located in &lt;code&gt;tests\std\tests\GH_XXXX_meow&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As always, build the STL from your branch and run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\STL\out\x64&amp;gt; ninja&#xA;C:\STL\out\x64&amp;gt; python tests\utils\stl-lit\stl-lit.py -v C:\STL\tests\std\tests\GH_XXXX_meow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s assume one of the tests fails an assert and we want to debug that configuration. &lt;code&gt;stl-lit&lt;/code&gt; will conveniently print the build command, which is far too long to provide here in full. The important part is to add the following options to provide debug symbols: &lt;code&gt;/Zi /Fdbark.pdb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can replace &lt;code&gt;bark&lt;/code&gt; with any descriptive name you like. Add these before the &lt;code&gt;&#34;-link&#34;&lt;/code&gt; option in the command line and recompile. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\STL\out\x64&amp;gt;cl &#34;C:\STL\tests\std\tests\GH_XXXX_meow\test.cpp&#34; [... more arguments ...]&#xA;&#34;-FeC:\STL\out\x64\tests\std\tests\GH_XXXX_meow\Output\02\GH_XXXX_meow.exe&#34; /Zi /Fdbark.pdb &#34;-link&#34;&#xA;[... more arguments ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now start debugging the test via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;devenv &#34;C:\STL\out\x64\tests\std\tests\GH_XXXX_meow\Output\02\GH_XXXX_meow.exe&#34;&#xA;       &#34;C:\STL\tests\std\tests\GH_XXXX_meow\test.cpp&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, this might not work right away, as Visual Studio may complain about a missing &lt;code&gt;msvcp140_oss.dll&lt;/code&gt;. The reason is that the STL builds those and other DLLs itself and we should under no circumstances overwrite the installed ones. If you are testing one of the configurations with dynamic linkage (&lt;code&gt;/MD&lt;/code&gt; or &lt;code&gt;/MDd&lt;/code&gt;) the easiest solution is to add the build folder to your path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set PATH=C:\STL\out\x64\out\bin\amd64;%PATH%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Tests With Address Sanitizer (ASan)&lt;/h2&gt; &#xA;&lt;p&gt;You don&#39;t need any extra steps to run with test code and the code in STL headers instrumented with &lt;a href=&#34;https://learn.microsoft.com/en-us/cpp/sanitizers/asan&#34;&gt;ASan&lt;/a&gt;. The test matrices include both ASan and non-ASan configurations.&lt;/p&gt; &#xA;&lt;p&gt;However, to instrument the separately-compiled code (the DLL, the satellites, the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/STL/main/docs/import_library.md&#34;&gt;Import Library&lt;/a&gt; - everything that&#39;s in &lt;code&gt;/stl/src&lt;/code&gt;), you need to build the STL with ASan. Change the build steps to add &lt;code&gt;-DSTL_ASAN_BUILD=ON&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake --preset x64 -DSTL_ASAN_BUILD=ON&#xA;cmake --build --preset x64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ASan-instrumented STL binaries require that the executable be instrumented as well, so you&#39;ll have to skip the non-ASan configurations by passing &lt;code&gt;-Dtags=ASAN&lt;/code&gt; to &lt;code&gt;stl-lit.py&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python tests\utils\stl-lit\stl-lit.py ..\..\tests\std\tests\VSO_0000000_vector_algorithms -Dtags=ASAN -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Benchmarking&lt;/h1&gt; &#xA;&lt;p&gt;For performance-sensitive code â€“ containers, algorithms, and the like â€“ you may wish to write and/or run benchmarks, and the STL team will likely run any benchmarks we do have in our PR process. Additionally, if you are writing a &#34;performance improvement&#34; PR, please add and run benchmarks to show that the PR does, in fact, improve performance.&lt;/p&gt; &#xA;&lt;p&gt;The benchmarking code is located in &lt;code&gt;benchmarks&lt;/code&gt;. Adding a new benchmark is as easy as adding a new file to &lt;code&gt;benchmarks/src&lt;/code&gt;, and then adding &lt;code&gt;add_benchmark(&amp;lt;name&amp;gt; &amp;lt;source_file&amp;gt;)&lt;/code&gt; to &lt;code&gt;benchmarks/CMakeLists.txt&lt;/code&gt;. You may also modify an existing benchmark file. We use Google&#39;s &lt;a href=&#34;https://github.com/google/benchmark&#34;&gt;Benchmark&lt;/a&gt; library, so you may find &lt;a href=&#34;https://github.com/google/benchmark/raw/main/docs/user_guide.md&#34;&gt;their documentation&lt;/a&gt; helpful, and you can also read the existing code for how &lt;em&gt;we&lt;/em&gt; use it.&lt;/p&gt; &#xA;&lt;p&gt;To run benchmarks, you&#39;ll need to first build the STL, then build the benchmarks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;cmake --preset x64&#xA;cmake --build --preset x64&#xA;cmake -B out\bench -S benchmarks -G Ninja -DSTL_BINARY_DIR=out\x64&#xA;cmake --build out\bench&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then run your benchmark with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;out\bench\benchmark-&amp;lt;benchmark-name&amp;gt; --benchmark_out=&amp;lt;file&amp;gt; --benchmark_out_format=csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then you can copy this CSV file into Excel, or another spreadsheet program. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;out\bench\benchmark-std_copy --benchmark_out=benchmark-std_copy-results.csv --benchmark_out_format=csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see all the other flags you can pass, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;out\bench\benchmark-&amp;lt;benchmark-name&amp;gt; --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Editing And Testing The Debugger Visualizer&lt;/h1&gt; &#xA;&lt;h3&gt;Modify The Visualizer&lt;/h3&gt; &#xA;&lt;p&gt;To modify how components are visualized in the debugger, edit the file &lt;code&gt;stl\debugger\STL.natvis&lt;/code&gt;. For more information on how to modify this file, check the &lt;a href=&#34;https://learn.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects&#34;&gt;natvis documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Test Your Changes&lt;/h3&gt; &#xA;&lt;p&gt;You can add the natvis file to any Visual Studio C++ project if you right-click your project &amp;gt; Add &amp;gt; Existing Item and select the STL.natvis file. After doing this you should be able to see your changes in a Visual Studio debugging session.&lt;/p&gt; &#xA;&lt;h1&gt;Block Diagram&lt;/h1&gt; &#xA;&lt;p&gt;The STL is built atop other compiler support libraries that ship with Windows and Visual Studio, like the UCRT, VCRuntime, and VCStartup. The following diagram describes the dependencies between those components and their ship vehicles.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart TB&#xA;%%{ init: {&#34;flowchart&#34;: {&#34;htmlLabels&#34;: true}} }%%&#xA;    classDef default text-align:left&#xA;    subgraph VisualStudioSubgraph[Visual Studio]&#xA;        direction TB&#xA;        STLNode(&#34;&amp;lt;b&amp;gt;STL&amp;lt;/b&amp;gt;&#xA;        This repo; provides C++ Standard Library headers, separately&#xA;        compiled implementations of most of the iostreams functionality,&#xA;        and a few runtime support components like std::exception_ptr.&#34;)&#xA;        subgraph VCRuntimeSubgraph[VCRuntime]&#xA;            direction TB&#xA;            VCStartupNode(&#34;&amp;lt;b&amp;gt;VCStartup&amp;lt;/b&amp;gt;&#xA;            Provides compiler support mechanisms that&#xA;            live in each binary; such as machinery to&#xA;            call constructors and destructors for global&#xA;            variables, the entry point, and the /GS cookie.&#xA;&#xA;            Merged into static and import libraries of VCRuntime.&#34;)&#xA;            VCRuntimeNode(&#34;&amp;lt;b&amp;gt;VCRuntime&amp;lt;/b&amp;gt;&#xA;            Provides compiler support mechanisms that can be&#xA;            shared between binaries; code that the compiler calls&#xA;            on your behalf, such as the C++ exception handling&#xA;            runtime, string.h intrinsics, math intrinsics, and&#xA;            declarations for CPU-vendor-specific intrinsics.&#34;)&#xA;        end&#xA;    end&#xA;    subgraph WindowsSDKSubgraph[Windows SDK]&#xA;        UniversalCRTNode(&#34;&amp;lt;b&amp;gt;Universal CRT&amp;lt;/b&amp;gt;&#xA;        Windows component that provides C library support, such as printf,&#xA;        C locales, and some POSIX-like shims for the Windows API, like _stat.&#34;)&#xA;    end&#xA;    STLNode ==&amp;gt; VCRuntimeSubgraph &amp;amp; UniversalCRTNode&#xA;    VCStartupNode ==&amp;gt; VCRuntimeNode ==&amp;gt; UniversalCRTNode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/STL/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Code Of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/STL/main/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) Microsoft Corporation.&lt;/p&gt; &#xA;&lt;p&gt;SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception&lt;/p&gt;</summary>
  </entry>
</feed>