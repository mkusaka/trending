<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-01T01:41:09Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Serial-Studio/Serial-Studio</title>
    <updated>2024-12-01T01:41:09Z</updated>
    <id>tag:github.com,2024-12-01:/Serial-Studio/Serial-Studio</id>
    <link href="https://github.com/Serial-Studio/Serial-Studio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flexible data visualization software for embedded devices and projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Serial Studio&lt;/h1&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/Serial-Studio/Serial-Studio/master/#&#34;&gt; &lt;img width=&#34;192px&#34; height=&#34;192px&#34; src=&#34;https://raw.githubusercontent.com/Serial-Studio/Serial-Studio/master/doc/icon.svg?sanitize=true&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Serial-Studio/Serial-Studio/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/Serial-Studio/Serial-Studio?style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;Github commits&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Serial-Studio/Serial-Studio/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/Serial-Studio/Serial-Studio?style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Serial-Studio/Serial-Studio/pull/new&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen?style=for-the-badge&#34; alt=&#34;PR&#39;s Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Serial-Studio/Serial-Studio/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/Serial-Studio/Serial-Studio/total.svg?style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://instagram.com/serialstudio.app&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Instagram-E4405F?style=for-the-badge&amp;amp;logo=instagram&amp;amp;logoColor=white&#34; alt=&#34;Instagram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/donate?hosted_button_id=XN68J47QJKYDE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&amp;amp;logo=paypal&amp;amp;logoColor=white&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Serial Studio is a multi-platform, versatile data visualization tool designed for embedded engineers, students, hackers, and teachers. It allows users to visualize, analyze, and represent data from their projects and devices without needing custom, project-specific visualization software. Serial Studio offers a flexible solution that adapts to a wide range of use cases, making it ideal for both educational and professional environments.&lt;/p&gt; &#xA;&lt;p&gt;The tool was born out of my experience in multiple CanSat-based competitions, where I often found myself developing new Ground Station Software for each project. Over time, I realized it would be more efficient and sustainable to maintain a single, flexible Ground Station Software that allows users to define how incoming data is processed and displayed.&lt;/p&gt; &#xA;&lt;p&gt;Today, Serial Studio is a powerful and adaptable tool, suitable not only for CanSat competitions but for any data acquisition and visualization project. It supports data retrieval from a wide range of sources, including hardware and software serial ports, MQTT, Bluetooth Low Energy (BLE), and network sockets (TCP/UDP).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Read this document in other languages&lt;/em&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/Serial-Studio/Serial-Studio/master/doc/README_ES.md&#34;&gt;Espa√±ol&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Serial-Studio/Serial-Studio/master/doc/README_ZH.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Serial-Studio/Serial-Studio/master/doc/README_DE.md&#34;&gt;Deutsch&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Serial-Studio/Serial-Studio/master/doc/README_RU.md&#34;&gt;–†—É—Å—Å–∫–∏–π&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Serial-Studio/Serial-Studio/master/doc/README_FR.md&#34;&gt;Fran√ßais&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Serial-Studio/Serial-Studio/master/doc/screenshot.png&#34; alt=&#34;Software usage&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross-platform:&lt;/strong&gt; Compatible with Windows, macOS, and Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CSV Export:&lt;/strong&gt; Easily saves received data in CSV files for further analysis or processing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support for multiple data sources:&lt;/strong&gt; Handles a wide variety of sources, including serial ports, MQTT, Bluetooth Low Energy (BLE), and network sockets (TCP/UDP).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable visualization:&lt;/strong&gt; Allows users to define and display data using various widgets, configurable via the project editor to meet specific needs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable frame analysis:&lt;/strong&gt; Provides the option to modify a JavaScript function to interpret incoming data frames, enabling the preprocessing of raw sensor data and handling of complex binary formats.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MQTT publishing and receiving:&lt;/strong&gt; Sends and receives data over the internet, enabling real-time data visualization from anywhere in the world.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Visit the &lt;strong&gt;&lt;a href=&#34;https://github.com/Serial-Studio/Serial-Studio/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/strong&gt; for comprehensive guides, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Installation Instructions:&lt;/strong&gt; Set up Serial Studio on Windows, macOS, or Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Quick Start Guide:&lt;/strong&gt; Learn how to connect your device and visualize data in minutes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advanced Topics:&lt;/strong&gt; Explore data flow, frame parsing, and building custom dashboards.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Examples:&lt;/strong&gt; Examples with code, projects, and explanations to help you learn Serial Studio.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;To compile Serial Studio, the only required dependency is &lt;a href=&#34;http://www.qt.io/download-open-source/&#34;&gt;Qt&lt;/a&gt;, preferrably with all plugins &amp;amp; modules installed. The desktop application compiles with &lt;strong&gt;Qt 6.8.0&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re compiling on GNU/Linux, you‚Äôll also need to install &lt;code&gt;libgl1-mesa-dev&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install libgl1-mesa-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Qt is installed, you can compile the project by opening the &lt;strong&gt;CMakeLists.txt&lt;/strong&gt; file in your preferred IDE or by using the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cd build &#xA;cmake ../ -DPRODUCTION_OPTIMIZATION=ON -DCMAKE_BUILD_TYPE=Release&#xA;cmake --build . -j 16 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support &amp;amp; Tipping&lt;/h2&gt; &#xA;&lt;p&gt;Open source software thrives on collaboration, creativity, and the generosity of its users. By supporting Serial Studio, you are directly contributing to its growth, sustainability, and ability to impact countless developers, makers, educators and innovators around the world.&lt;/p&gt; &#xA;&lt;p&gt;If this project has helped you or inspired you, consider supporting it with a donation. Even small contributions make a big difference. Your generosity will keep this tool evolving and help more people to unlock their potential with open source software.&lt;/p&gt; &#xA;&lt;p&gt;üëâ &lt;a href=&#34;https://www.paypal.com/donate?hosted_button_id=XN68J47QJKYDE&#34;&gt;Donate/Tip Here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License. For more details, see the &lt;a href=&#34;https://raw.githubusercontent.com/Serial-Studio/Serial-Studio/master/LICENSE.md&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OpenXRay/xray-16</title>
    <updated>2024-12-01T01:41:09Z</updated>
    <id>tag:github.com,2024-12-01:/OpenXRay/xray-16</id>
    <link href="https://github.com/OpenXRay/xray-16" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Improved version of the X-Ray Engine, the game engine used in the world-famous S.T.A.L.K.E.R. game series by GSC Game World. Join OpenXRay! ;)&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/OpenXRay&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/OpenXRay/xray-16/dev/misc/media/OpenXRayCover.png&#34; alt=&#34;Open for everyone&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; OpenXRay &lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenXRay&lt;/strong&gt; is an improved version of the X-Ray Engine, the game engine used in the world-famous S.T.A.L.K.E.R. game series by GSC Game World.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make it a drop-in replacement for original engine. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Aim at 99% compatibility and same behaviour, where possible.&lt;/li&gt; &#xA;   &lt;li&gt;Compile engine into a single executable file that you can just drop into &lt;code&gt;bin&lt;/code&gt; folder. (see &lt;a href=&#34;https://github.com/OpenXRay/xray-16/issues/210&#34;&gt;#210&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Support all three games in the series: SOC/CS/COP. (see &lt;a href=&#34;https://raw.githubusercontent.com/OpenXRay/xray-16/dev/#supported-games&#34;&gt;Supported games&lt;/a&gt; below)&lt;/li&gt; &#xA; &lt;li&gt;Fix original S.T.A.L.K.E.R. series bugs.&lt;/li&gt; &#xA; &lt;li&gt;Introduce a solid platform for modmakers: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Add frame/render graph for those who want to add new graphics features.&lt;/li&gt; &#xA;   &lt;li&gt;Improve performance via refactoring the code, parallelizing the engine, making it multithreaded.&lt;/li&gt; &#xA;   &lt;li&gt;Add new scripting, development and debugging features.&lt;/li&gt; &#xA;   &lt;li&gt;New game SDK with new features.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clean up engine code, make it easily portable to new platforms, minimize platform-specific code.&lt;/li&gt; &#xA; &lt;li&gt;Enhance player&#39;s experience with new graphics, gameplay and other features that can be enabled optionally. (by default, we stay close to vanilla)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Main differences from original X-Ray are:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for 64-bit.&lt;/li&gt; &#xA; &lt;li&gt;Support for ARM, ARM64, E2K (Elbrus 2000), PPC64LE.&lt;/li&gt; &#xA; &lt;li&gt;Works on Linux, macOS, OSL (Elbrus OS).&lt;/li&gt; &#xA; &lt;li&gt;New OpenGL renderer. (currently, requires OpenGL 4.1 minimum, lowering to at least OpenGL 3.3 is planned)&lt;/li&gt; &#xA; &lt;li&gt;Improved performance, better FPS.&lt;/li&gt; &#xA; &lt;li&gt;Original bugs fixes.&lt;/li&gt; &#xA; &lt;li&gt;New features for modmakers.&lt;/li&gt; &#xA; &lt;li&gt;Gamepad support. (not yet finished, but you can try already, see &lt;a href=&#34;https://github.com/OpenXRay/xray-16/issues/943&#34;&gt;#943&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;New game SDK being currently developed. (see &lt;a href=&#34;https://github.com/OpenXRay/xray-16/wiki/%5BEN%5D-Game-Editor&#34;&gt;Game Editor&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can see the detailed differences table &lt;a href=&#34;https://github.com/OpenXRay/xray-16/wiki/%5BEN%5D-Differences-from-original-X%E2%80%90Ray&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported games&lt;/h2&gt; &#xA;&lt;p&gt;OpenXRay is based on X-Ray 1.6.02, used in S.T.A.L.K.E.R.: Call of Pripyat, so initially it supported only this game. &lt;br&gt; Currently, we are working on support for all three games in the series.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Call of Pripyat&lt;/th&gt; &#xA;   &lt;th&gt;Clear Sky&lt;/th&gt; &#xA;   &lt;th&gt;Shadow of Chernobyl&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Release candidate (see &lt;a href=&#34;https://github.com/OpenXRay/xray-16/issues/382&#34;&gt;#382&lt;/a&gt;).&lt;br&gt;Minor bugs possible, but game is stable finishable.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Not supported&lt;/strong&gt; yet (see &lt;a href=&#34;https://github.com/OpenXRay/xray-16/issues/392&#34;&gt;#392&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation:&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to visit our &lt;a href=&#34;https://github.com/OpenXRay/xray-16/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;How to&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Build and setup&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OpenXRay/xray-16/wiki/%5BEN%5D-How-to-build-and-setup-on-Windows&#34;&gt;On Windows&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OpenXRay/xray-16/wiki/%5BEN%5D-How-to-build-and-setup-on-Linux&#34;&gt;On Linux&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Install and play&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OpenXRay/xray-16/wiki/%5BEN%5D-How-to-install-and-play&#34;&gt;On Windows&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All contributions are more than welcomed. There are several ways how you can contribute:&lt;/p&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/sjRMQwv&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/410170555619082240?label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Play and enjoy the game, &lt;a href=&#34;https://github.com/OpenXRay/xray-16/issues/new/choose&#34;&gt;file an Issue&lt;/a&gt; when you encounter any bugs, or you have an enhancement request.&lt;/p&gt; &#xA;&lt;p&gt;Join us on our &lt;a href=&#34;https://discord.gg/sjRMQwv&#34;&gt;Discord&lt;/a&gt;, subscribe to our &lt;a href=&#34;https://www.youtube.com/OpenXRay&#34;&gt;YouTube channel&lt;/a&gt;, join our &lt;a href=&#34;https://vk.com/openxray&#34;&gt;VK group&lt;/a&gt;, leave a comment, put a like and communicate there! &lt;br&gt; Also you can put a star on this repository :)&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OpenXRay/xray-16/actions/workflows/cibuild.yml&#34;&gt;&lt;img src=&#34;https://github.com/OpenXRay/xray-16/actions/workflows/cibuild.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/OpenXRay/xray-16/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/OpenXRay/xray-16.svg?label=Contributors&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join our efforts in making our beloved game better, send pull requests, participate in discussions and code reviews!&lt;/p&gt; &#xA;&lt;p&gt;It is a place to share ideas on what to implement, gather people that want to work on the engine, and work on the source code. However, the following things should be taken into consideration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We want to keep the game close to the vanilla, so if you want to introduce new gameplay features, make sure it is optional, and doesn&#39;t break compatibility with original game resources (i.e. everything in &lt;code&gt;gamedata&lt;/code&gt; folder and &lt;code&gt;.db*&lt;/code&gt;/&lt;code&gt;.xdb&lt;/code&gt; archives). You also may want to add non-gameplay features, fix bugs, or improve engine performance and code quality.&lt;/li&gt; &#xA; &lt;li&gt;Major changes should be discussed before implementation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Take a look at our &lt;a href=&#34;https://github.com/openxray/xray-16/issues&#34;&gt;Issues&lt;/a&gt; page:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See issues labeled as &lt;a href=&#34;https://github.com/OpenXRay/xray-16/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22Good+first+issue%22&#34;&gt;good first issue&lt;/a&gt; to get familiar with the engine code in practice.&lt;/li&gt; &#xA; &lt;li&gt;You may also want to look at issues labeled as &lt;a href=&#34;https://github.com/OpenXRay/xray-16/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22Help+wanted%22&#34;&gt;help wanted&lt;/a&gt;. Some of them are difficult ones, though.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;dev&lt;/code&gt; branch is the default and base branch for the project. It is used for development, and all pull requests should go there. But be aware that this branch sometimes may be broken, and we can only rarely do force pushes to this branch.&lt;/p&gt; &#xA;&lt;p&gt;Be advised that this is a community project not sanctioned by GSC Game World in any way ‚Äì and they remain the copyright holders of all the original source code and S.T.A.L.K.E.R. franchise. However, they know about many community projects, including this, and support the S.T.A.L.K.E.R. community efforts to make the game better.&lt;/p&gt; &#xA;&lt;h3&gt;Funding&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/openxray&#34;&gt;&lt;img src=&#34;https://opencollective.com/openxray/tiers/badge.svg?label=Financial%20contributors&#34; alt=&#34;Financial Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/OpenXRay&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/openxray?color=brightgreen&amp;amp;label=Sponsors&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://patreon.com/openxray&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fwww.patreon.com%2Fapi%2Fcampaigns%2F5950725&amp;amp;query=data.attributes.patron_count&amp;amp;suffix=%20Patrons&amp;amp;color=success&amp;amp;label=Patreon&amp;amp;style=flat&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may provide financial support for this project by donating via different ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://boosty.to/openxray&#34;&gt;Boosty&lt;/a&gt; ‚Äì a large part of the team is located in Russia, if you have an ability to donate through Boosty, please use it, since we don&#39;t have an ability to withdraw funds from services like Patreon, etc. to our local Russian banking cards/accounts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/OpenXRay&#34;&gt;GitHub Sponsors&lt;/a&gt;, &lt;a href=&#34;https://patreon.com/openxray&#34;&gt;Patreon&lt;/a&gt;, &lt;a href=&#34;https://opencollective.com/openxray&#34;&gt;Open Collective&lt;/a&gt; ‚Äì funds raised from these services will be used to support our developers outside of Russia, and also we may use them to pay for paid services on GitHub, AppVeyor, etc.&lt;/li&gt; &#xA; &lt;li&gt;BTC: 363ZUoWcQe9fDvRPK9Kee2YuPdyhSFQpr2&lt;/li&gt; &#xA; &lt;li&gt;ETH: 0x45a4fe8566e76946591e1eeabf190aa09b1cdb66&lt;/li&gt; &#xA; &lt;li&gt;TRX: TGx7QAhTPsRcwnb4mwCtNDU7NF6kuoACpt&lt;/li&gt; &#xA; &lt;li&gt;Please, contact @xottab_duty in &lt;a href=&#34;https://raw.githubusercontent.com/OpenXRay/xray-16/dev/discord.gg/sjRMQwv&#34;&gt;our Discord&lt;/a&gt; if you would like to use another cryptocurrency.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you for your support!&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gsc-game.com/&#34;&gt;GSC Game World&lt;/a&gt; ‚Äì for creating S.T.A.L.K.E.R. and supporting the community;&lt;/li&gt; &#xA; &lt;li&gt;Loxotron ‚Äì for making the engine sources available;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenXRay/xray-16/graphs/contributors&#34;&gt;All the OpenXRay contributors&lt;/a&gt; ‚Äì for making the project better. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The first OpenXRay team (2014-2017) ‚Äì for being at the origins of the project. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/nitrocaster&#34;&gt;nitrocaster&lt;/a&gt; ‚Äì original project founder.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/Kaffeine&#34;&gt;Kaffeine&lt;/a&gt; ‚Äì initial work on the Linux port, refactoring, polishing.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/CrossVR&#34;&gt;Armada651&lt;/a&gt; ‚Äì creation of the OpenGL renderer, work on the build system, other project maintenance work.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/andrew-boyarshin&#34;&gt;andrew-boyarshin&lt;/a&gt; ‚Äì work on the build system.&lt;/li&gt; &#xA;     &lt;li&gt;Swartz27 ‚Äì work on renderer features.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/awdavies&#34;&gt;awdavies&lt;/a&gt; ‚Äì project maintenance work.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;The second OpenXRay team (2017-now) ‚Äì for continuing work on the project. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/Xottab-DUTY&#34;&gt;Xottab_DUTY&lt;/a&gt; ‚Äì current project leader.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/intorr&#34;&gt;intorr&lt;/a&gt; ‚Äì work on the project quality. (memory leaks, refactoring, optimizations)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/eagleivg&#34;&gt;eagleivg&lt;/a&gt; ‚Äì main part of the work on Linux port.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/q4a&#34;&gt;q4a&lt;/a&gt; ‚Äì main part of the work on Linux port.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/SkyLoaderr&#34;&gt;SkyLoader&lt;/a&gt; ‚Äì OpenGL renderer improvements and polishing, other project work.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/qweasdd136963&#34;&gt;qweasdd136963&lt;/a&gt; ‚Äì supporting the &lt;a href=&#34;https://github.com/qweasdd136963/OXR_CoC&#34;&gt;OXR_COC&lt;/a&gt; project (Call of Chernobyl port to latest OpenXRay), other project work on new features, refactoring and bug fixing.&lt;/li&gt; &#xA;     &lt;li&gt;JohnDoe_71Rus ‚Äì our regular tester.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/007exe&#34;&gt;Chip_exe&lt;/a&gt; ‚Äì work on Linux port, maintaining AUR package, our regular tester.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/a1batross&#34;&gt;a1batross&lt;/a&gt; ‚Äì work on Linux port.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/FreeZoneMods&#34;&gt;The Sin!&lt;/a&gt; ‚Äì new features, refactoring, bug fixing polishing.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/Zegeri&#34;&gt;Zegeri&lt;/a&gt; ‚Äì work on Linux port, code quality, fixes, polishing.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/drug007&#34;&gt;drug007&lt;/a&gt; ‚Äì work on Linux port.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/vTurbine&#34;&gt;vTurbine&lt;/a&gt; ‚Äì work on renderer unification, refactoring, polishing.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/Zigatun&#34;&gt;Zigatun&lt;/a&gt; ‚Äì work on ARM port.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/Masterkatze&#34;&gt;Masterkatze&lt;/a&gt; ‚Äì work on the build system, bug fixing.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/ChugunovRoman&#34;&gt;Chugunov Roman&lt;/a&gt; ‚Äì work on &lt;a href=&#34;https://github.com/ChugunovRoman/xray-16&#34;&gt;porting Call of Chernobyl to latest OpenXRay&lt;/a&gt;, extending functionality for modmakers.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/yohjimane&#34;&gt;yohjimane&lt;/a&gt; ‚Äì work on original game bugs fixes and new features.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Other contributors: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/alexgdi&#34;&gt;alexgdi&lt;/a&gt; ‚Äì work on organizing project infrastructure, external dependencies.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/NeoAnomaly&#34;&gt;NeoAnomaly&lt;/a&gt; ‚Äì help with debug functionality on Windows.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/RainbowZerg&#34;&gt;RainbowZerg&lt;/a&gt; ‚Äì work on the renderer features, bug fixing.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/FozeSt&#34;&gt;FozeSt&lt;/a&gt; ‚Äì help with some fixes and features.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/mrnotbadguy&#34;&gt;mrnotbadguy&lt;/a&gt; ‚Äì work on gamepads support and bug fixing.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/devnexen&#34;&gt;devnexen&lt;/a&gt; ‚Äì work on FreeBSD support and portability.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/ZeeWanderer&#34;&gt;ZeeWanderer&lt;/a&gt; ‚Äì work on the build system.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/GeorgeIvlev&#34;&gt;GeorgeIvlev&lt;/a&gt; ‚Äì work on the build system, bug fixing.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/TmLev&#34;&gt;TmLev&lt;/a&gt; ‚Äì work on code quality and Docker support.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/Plotja&#34;&gt;Plotja&lt;/a&gt; ‚Äì work on new gameplay features, bug fixes, portability, polishing.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/dimhotepus&#34;&gt;dimhotepus&lt;/a&gt; ‚Äì work on code quality.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/HeapRaid&#34;&gt;HeapRaid&lt;/a&gt; ‚Äì work on renderer cleanup, code quality, portability.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/Vertver&#34;&gt;Vertver&lt;/a&gt; ‚Äì work on macOS support.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/Lnd-stoL&#34;&gt;Lnd-stoL&lt;/a&gt; ‚Äì work on macOS support.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/GermanAizek&#34;&gt;GermanAizek&lt;/a&gt; ‚Äì work on code quality, finding and fixing vanilla bugs.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/dasehak&#34;&gt;dasehak&lt;/a&gt; ‚Äì work on FreeBSD support, finding and fixing vanilla bugs.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Particular projects: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/xrOxygen&#34;&gt;Oxygen&lt;/a&gt; ‚Äì for being our friends and giving tips and help with new features, optimizations, bug fixes, etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ShokerStlk/xray-16-SWM&#34;&gt;Shoker Weapon Mod&lt;/a&gt; and &lt;a href=&#34;https://github.com/ShokerStlk&#34;&gt;Shoker&lt;/a&gt; ‚Äì for contributing new features, bug fixing.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Im-dex/xray-162&#34;&gt;Im-Dex&lt;/a&gt; ‚Äì for the work on the engine.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/OGSR/OGSR-Engine&#34;&gt;OGSR&lt;/a&gt; ‚Äì for amazing work on Shadow of Chernobyl.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/revolucas/CoC-Xray&#34;&gt;Call of Chernobyl&lt;/a&gt; and its contributors ‚Äì for useful new features, bug fixes and optimizations.&lt;/li&gt; &#xA;   &lt;li&gt;Lost Alpha ‚Äì for their effort on restoring the old game concept.&lt;/li&gt; &#xA;   &lt;li&gt;Lost Alpha DC ‚Äì for continuing work on Lost Alpha.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Individuals: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tamlin-mike&#34;&gt;tamlin-mike&lt;/a&gt; ‚Äì for work on the build system.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/0xBADEAFFE&#34;&gt;Vincent&lt;/a&gt; ‚Äì for work on the Linux port.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/abramcumner&#34;&gt;abramcumner&lt;/a&gt; ‚Äì for useful fixes and additions.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/morrey&#34;&gt;Morrey&lt;/a&gt; ‚Äì for work on Clear Sky support and his Return to Clear Sky mod.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Companies: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.cppdepend.com&#34;&gt;CoderGears&lt;/a&gt; ‚Äì thanks for providing a &lt;a href=&#34;https://www.cppdepend.com/cppdependfoross&#34;&gt;free Pro Licence for CppDepend&lt;/a&gt;, an amazing and powerful tool for C and C++. &lt;br&gt; &lt;a href=&#34;https://www.cppdepend.com&#34;&gt;&lt;img src=&#34;https://www.cppdepend.com/images/cppdependlogo.png&#34; alt=&#34;CppDepend logo&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pvs-studio.com/pvs-studio/?utm_source=website&amp;amp;utm_medium=github&amp;amp;utm_campaign=open_source&#34;&gt;PVS-Studio LLC&lt;/a&gt; ‚Äì thanks for proving us a &lt;a href=&#34;https://pvs-studio.ru/ru/order/open-source-license/?utm_source=website&amp;amp;utm_medium=github&amp;amp;utm_campaign=open_source&#34;&gt;free licence&lt;/a&gt; for PVS-Studio, a static analyzer for C, C++, C#, and Java code.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your work is being used in our project and you are not mentioned here or in the &lt;a href=&#34;https://github.com/OpenXRay/xray-16/graphs/contributors&#34;&gt;contributors page&lt;/a&gt;, please, write to us and we will add you. Or send us a pull request with you added to this list ;)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alibaba/MNN</title>
    <updated>2024-12-01T01:41:09Z</updated>
    <id>tag:github.com,2024-12-01:/alibaba/MNN</id>
    <link href="https://github.com/alibaba/MNN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MNN is a blazing fast, lightweight deep learning framework, battle-tested by business-critical use cases in Alibaba&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/MNN/master/doc/banner.png&#34; alt=&#34;MNN&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/MNN/master/README_CN.md&#34;&gt;‰∏≠ÊñáÁâàÊú¨&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.mnn.zone&#34;&gt;MNN Homepage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;MNN is a highly efficient and lightweight deep learning framework. It supports inference and training of deep learning models and has industry-leading performance for inference and training on-device. At present, MNN has been integrated into more than 30 apps of Alibaba Inc, such as Taobao, Tmall, Youku, DingTalk, Xianyu, etc., covering more than 70 usage scenarios such as live broadcast, short video capture, search recommendation, product searching by image, interactive marketing, equity distribution, security risk control. In addition, MNN is also used on embedded devices, such as IoT.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/MNN/tree/master/transformers/llm&#34;&gt;MNN-LLM&lt;/a&gt; is a large language model runtime solution developed based on the MNN engine. The mission of this project is to deploy LLM models locally on everyone&#39;s platforms(Mobile Phone/PC/IOT). It supports popular large language models such as Qianwen, Baichuan, Zhipu, LLAMA, and others. &lt;a href=&#34;https://mnn-docs.readthedocs.io/en/latest/transformers/llm.html&#34;&gt;MNN-LLM User guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/MNN/tree/master/transformers/diffusion&#34;&gt;MNN-Diffusion&lt;/a&gt; is a stable diffusion model runtime solution developed based on the MNN engine. The mission of this project is to deploy stable diffusion models locally on everyone&#39;s platforms. &lt;a href=&#34;https://mnn-docs.readthedocs.io/en/latest/transformers/diffusion.html&#34;&gt;MNN-Diffusion User guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/MNN/master/doc/architecture.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inside Alibaba, &lt;a href=&#34;https://mp.weixin.qq.com/s/5I1ISpx8lQqvCS8tGd6EJw&#34;&gt;MNN&lt;/a&gt; works as the basic module of the compute container in the &lt;a href=&#34;https://mp.weixin.qq.com/s/qpeCETty0BqqNJV9CMJafA&#34;&gt;Walle&lt;/a&gt; System, the first end-to-end, general-purpose, and large-scale production system for device-cloud collaborative machine learning, which has been published in the top system conference OSDI‚Äô22. The key design principles of MNN and the extensive benchmark testing results (vs. TensorFlow, TensorFlow Lite, PyTorch, PyTorch Mobile, TVM) can be found in the OSDI paper. The scripts and instructions for benchmark testing are put in the path ‚Äú/benchmark‚Äù. If MNN or the design of Walle helps your research or production use, please cite our OSDI paper as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings {proc:osdi22:walle,&#xA;    author = {Chengfei Lv and Chaoyue Niu and Renjie Gu and Xiaotang Jiang and Zhaode Wang and Bin Liu and Ziqi Wu and Qiulin Yao and Congyu Huang and Panos Huang and Tao Huang and Hui Shu and Jinde Song and Bin Zou and Peng Lan and Guohuan Xu and Fei Wu and Shaojie Tang and Fan Wu and Guihai Chen},&#xA;    title = {Walle: An {End-to-End}, {General-Purpose}, and {Large-Scale} Production System for {Device-Cloud} Collaborative Machine Learning},&#xA;    booktitle = {16th USENIX Symposium on Operating Systems Design and Implementation (OSDI 22)},&#xA;    year = {2022},&#xA;    isbn = {978-1-939133-28-1},&#xA;    address = {Carlsbad, CA},&#xA;    pages = {249--265},&#xA;    url = {https://www.usenix.org/conference/osdi22/presentation/lv},&#xA;    publisher = {USENIX Association},&#xA;    month = jul,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation and Workbench&lt;/h2&gt; &#xA;&lt;p&gt;MNN&#39;s docs are in place in &lt;a href=&#34;https://mnn-docs.readthedocs.io/en/latest&#34;&gt;Read the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also read docs/README to build docs&#39;s html.&lt;/p&gt; &#xA;&lt;p&gt;MNN Workbench could be downloaded from &lt;a href=&#34;http://www.mnn.zone&#34;&gt;MNN&#39;s homepage&lt;/a&gt;, which provides pretrained models, visualized training tools, and one-click deployment of models to devices.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;h3&gt;Lightweight&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optimized for devices, no dependencies, can be easily deployed to mobile devices and a variety of embedded devices.&lt;/li&gt; &#xA; &lt;li&gt;iOS platform: static library size will full option for armv7+arm64 platforms is about 12MB, size increase of linked executables is about 2M.&lt;/li&gt; &#xA; &lt;li&gt;Android platform: core so size is about 800KB (armv7a - c++_shared).&lt;/li&gt; &#xA; &lt;li&gt;Using MNN_BUILD_MINI can reduce package size by about 25%, with a limit of fixed model input size&lt;/li&gt; &#xA; &lt;li&gt;Support FP16 / Int8 quantize, can reduce model size 50%-70%&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Versatility&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports &lt;code&gt;Tensorflow&lt;/code&gt;, &lt;code&gt;Caffe&lt;/code&gt;, &lt;code&gt;ONNX&lt;/code&gt;,&lt;code&gt;Torchscripts&lt;/code&gt; and supports common neural networks such as &lt;code&gt;CNN&lt;/code&gt;, &lt;code&gt;RNN&lt;/code&gt;, &lt;code&gt;GAN&lt;/code&gt;, &lt;code&gt;Transformer&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Supports AI model with multi-inputs or multi-outputs, every kind of dimension format, dynamic inputs, controlflow.&lt;/li&gt; &#xA; &lt;li&gt;MNN supports approximate full OPs used for the AI Model. The converter supports 178 &lt;code&gt;Tensorflow&lt;/code&gt; OPs, 52 &lt;code&gt;Caffe&lt;/code&gt; OPs, 163 &lt;code&gt;Torchscripts&lt;/code&gt; OPs, 158 &lt;code&gt;ONNX&lt;/code&gt; OPs.&lt;/li&gt; &#xA; &lt;li&gt;Supports iOS 8.0+, Android 4.3+, and embedded devices with POSIX interface.&lt;/li&gt; &#xA; &lt;li&gt;Supports hybrid computing on multiple devices. Currently supports CPU and GPU.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;High performance&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implements core computing with lots of optimized assembly code to make full use of the ARM / x64 CPU.&lt;/li&gt; &#xA; &lt;li&gt;Use Metal / OpenCL / Vulkan to support GPU inference on mobile.&lt;/li&gt; &#xA; &lt;li&gt;Use CUDA and tensorcore to support NVIDIA GPU for better performance&lt;/li&gt; &#xA; &lt;li&gt;Convolution and transposition convolution algorithms are efficient and stable. The Winograd convolution algorithm is widely used to better symmetric convolutions such as 3x3,4x4,5x5,6x6,7x7.&lt;/li&gt; &#xA; &lt;li&gt;Twice speed increase for the new architecture ARM v8.2 with FP16 half-precision calculation support. 2.5 faster to use sdot for ARM v8.2 and VNNI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ease of use&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support use MNN&#39;s OP to do numerical calculating like numpy.&lt;/li&gt; &#xA; &lt;li&gt;Support lightweight image process module like OpenCV, which is only 100k.&lt;/li&gt; &#xA; &lt;li&gt;Support build model and train it on PC / mobile.&lt;/li&gt; &#xA; &lt;li&gt;MNN Python API helps ML engineers to easily use MNN to infer, train, and process images, without dipping their toes in C++ code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Architecture / Precision MNN supported is shown below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;S ÔºöSupport and work well, deeply optimized, recommend to use&lt;/li&gt; &#xA; &lt;li&gt;A ÔºöSupport and work well, can use&lt;/li&gt; &#xA; &lt;li&gt;B ÔºöSupport but has bug or not optimized, no recommend to use&lt;/li&gt; &#xA; &lt;li&gt;C ÔºöNot Support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Architecture / Precision&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Normal&lt;/th&gt; &#xA;   &lt;th&gt;FP16&lt;/th&gt; &#xA;   &lt;th&gt;BF16&lt;/th&gt; &#xA;   &lt;th&gt;Int8&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU&lt;/td&gt; &#xA;   &lt;td&gt;Native&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86/x64-SSE4.1&lt;/td&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86/x64-AVX2&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86/x64-AVX512&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARMv7a&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;S (ARMv8.2)&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARMv8&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;S (ARMv8.2)&lt;/td&gt; &#xA;   &lt;td&gt;S(ARMv8.6)&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GPU&lt;/td&gt; &#xA;   &lt;td&gt;OpenCL&lt;/td&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Vulkan&lt;/td&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Metal&lt;/td&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CUDA&lt;/td&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NPU&lt;/td&gt; &#xA;   &lt;td&gt;CoreML&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HIAI&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NNAPI&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;p&gt;Base on MNN (Tensor compute engine), we provided a series of tools for inference, train and general computation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MNN-Converter: Convert other models to MNN models for inference, such as Tensorflow(lite), Caffe, ONNX, Torchscripts. And do graph optimization to reduce computation.&lt;/li&gt; &#xA; &lt;li&gt;MNN-Compress: Compress model to reduce size and increase performance / speed&lt;/li&gt; &#xA; &lt;li&gt;MNN-Express: Support model with controlflow, use MNN&#39;s OP to do general-purpose computing.&lt;/li&gt; &#xA; &lt;li&gt;MNN-CV: An OpenCV-like library, but based on MNN and then much more lightweight.&lt;/li&gt; &#xA; &lt;li&gt;MNN-Train: Support train MNN model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Discuss and Get Help From the MNN Community&lt;/h2&gt; &#xA;&lt;p&gt;The group discussions are predominantly Chinese. But we welcome and will help English speakers.&lt;/p&gt; &#xA;&lt;p&gt;Dingtalk discussion groups:&lt;/p&gt; &#xA;&lt;p&gt;Group #1 (Full): 23329087&lt;/p&gt; &#xA;&lt;p&gt;Group #2 (Full): 23350225&lt;/p&gt; &#xA;&lt;p&gt;Group #3: QR code:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/MNN/master/doc/dingdingmnn3.png&#34; alt=&#34;MNN-3&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Historical Paper&lt;/h2&gt; &#xA;&lt;p&gt;The preliminary version of MNN, as mobile inference engine and with the focus on manual optimization, has also been published in MLSys 2020. Please cite the paper, if MNN previously helped your research:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{alibaba2020mnn,&#xA;  author = {Jiang, Xiaotang and Wang, Huan and Chen, Yiliu and Wu, Ziqi and Wang, Lichuan and Zou, Bin and Yang, Yafeng and Cui, Zongyang and Cai, Yu and Yu, Tianhang and Lv, Chengfei and Wu, Zhihua},&#xA;  title = {MNN: A Universal and Efficient Inference Engine},&#xA;  booktitle = {MLSys},&#xA;  year = {2020}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache 2.0&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;MNN participants: Taobao Technology Department, Search Engineering Team, DAMO Team, Youku and other Alibaba Group employees.&lt;/p&gt; &#xA;&lt;p&gt;MNN refers to the following projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BVLC/caffe&#34;&gt;Caffe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/flatbuffers&#34;&gt;flatbuffer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/gemmlowp&#34;&gt;gemmlowp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.github.com/googlesamples/android-vulkan-tutorials&#34;&gt;Google Vulkan demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/halide/Halide&#34;&gt;Halide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/XiaoMi/mace&#34;&gt;Mace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onnx/onnx&#34;&gt;ONNX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf&#34;&gt;protobuffer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/skia&#34;&gt;skia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tensorflow/tensorflow&#34;&gt;Tensorflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/ncnn&#34;&gt;ncnn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PaddlePaddle/paddle-mobile&#34;&gt;paddle-mobile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;stb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/rapidjson&#34;&gt;rapidjson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pybind/pybind11&#34;&gt;pybind11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pytorch/pytorch&#34;&gt;pytorch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huawei-noah/bolt&#34;&gt;bolt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chromium.googlesource.com/libyuv/libyuv&#34;&gt;libyuv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libjpeg-turbo/libjpeg-turbo&#34;&gt;libjpeg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opencv/opencv&#34;&gt;opencv&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>