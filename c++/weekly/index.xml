<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:43:12Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SerenityOS/serenity</title>
    <updated>2022-08-28T01:43:12Z</updated>
    <id>tag:github.com,2022-08-28:/SerenityOS/serenity</id>
    <link href="https://github.com/SerenityOS/serenity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Serenity Operating System üêû&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SerenityOS&lt;/h1&gt; &#xA;&lt;p&gt;Graphical Unix-like operating system for x86 computers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SerenityOS/serenity/actions?query=workflow%3A%22Build%2C%20lint%2C%20and%20test%22&#34;&gt;&lt;img src=&#34;https://github.com/SerenityOS/serenity/workflows/Build,%20lint,%20and%20test/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/SerenityOS/SerenityOS/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/SerenityOS/SerenityOS/_apis/build/status/CI?branchName=master&#34; alt=&#34;Azure DevOps Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:serenity&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/serenity.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=SerenityOS_serenity&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=SerenityOS_serenity&amp;amp;metric=ncloc&#34; alt=&#34;Sonar Cube Static Analysis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/serenityos&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/830522505605283862.svg?logo=discord&amp;amp;logoColor=white&amp;amp;logoWidth=20&amp;amp;labelColor=7289DA&amp;amp;label=Discord&amp;amp;color=17cf48&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;SerenityOS is a love letter to &#39;90s user interfaces with a custom Unix-like core. It flatters with sincerity by stealing beautiful ideas from various other systems.&lt;/p&gt; &#xA;&lt;p&gt;Roughly speaking, the goal is a marriage between the aesthetic of late-1990s productivity software and the power-user accessibility of late-2000s *nix. This is a system by us, for us, based on the things we like.&lt;/p&gt; &#xA;&lt;p&gt;You can watch videos of the system being developed on YouTube:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtube.com/andreaskling&#34;&gt;Andreas Kling&#39;s channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtube.com/linusgroh&#34;&gt;Linus Groh&#39;s channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/c/kleinesfilmroellchen&#34;&gt;kleines Filmr√∂llchen&#39;s channel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;: &lt;a href=&#34;https://github.com/SerenityOS/serenity/raw/master/Documentation/FAQ.md&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SerenityOS/serenity/master/Meta/Screenshots/screenshot-b36968c.png&#34; alt=&#34;Screenshot as of b36968c.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modern x86 32-bit and 64-bit kernel with pre-emptive multi-threading&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SerenityOS/serenity/master/Userland/Applications/Browser/&#34;&gt;Browser&lt;/a&gt; with JavaScript, WebAssembly, and more (check the spec compliance for &lt;a href=&#34;https://libjs.dev/test262/&#34;&gt;JS&lt;/a&gt;, &lt;a href=&#34;https://css.tobyase.de/&#34;&gt;CSS&lt;/a&gt;, and &lt;a href=&#34;https://libjs.dev/wasm/&#34;&gt;WASM&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Security features (hardware protections, limited userland capabilities, W^X memory, &lt;code&gt;pledge&lt;/code&gt; &amp;amp; &lt;code&gt;unveil&lt;/code&gt;, (K)ASLR, OOM-resistance, web-content isolation, state-of-the-art TLS algorithms, ...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SerenityOS/serenity/master/Userland/Services/&#34;&gt;System services&lt;/a&gt; (WindowServer, LoginServer, AudioServer, WebServer, RequestServer, CrashServer, ...) and modern IPC&lt;/li&gt; &#xA; &lt;li&gt;Good POSIX compatibility (&lt;a href=&#34;https://raw.githubusercontent.com/SerenityOS/serenity/master/Userland/Libraries/LibC/&#34;&gt;LibC&lt;/a&gt;, Shell, syscalls, signals, pseudoterminals, filesystem notifications, standard Unix &lt;a href=&#34;https://raw.githubusercontent.com/SerenityOS/serenity/master/Userland/Utilities/&#34;&gt;utilities&lt;/a&gt;, ...)&lt;/li&gt; &#xA; &lt;li&gt;POSIX-like virtual file systems (/proc, /dev, /sys, /tmp, ...) and ext2 file system&lt;/li&gt; &#xA; &lt;li&gt;Network stack and applications with support for IPv4, TCP, UDP; DNS, HTTP, Gemini, IMAP, NTP&lt;/li&gt; &#xA; &lt;li&gt;Profiling, debugging and other development tools (Kernel-supported profiling, detailed program analysis with software emulation in UserspaceEmulator, CrashReporter, interactive GUI playground, HexEditor, HackStudio IDE for C++ and more)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SerenityOS/serenity/master/Userland/Libraries/&#34;&gt;Libraries&lt;/a&gt; for everything from cryptography to OpenGL, audio, JavaScript, GUI, playing chess, ...&lt;/li&gt; &#xA; &lt;li&gt;Support for many common and uncommon file formats (PNG, JPEG, GIF, MP3, WAV, FLAC, ZIP, TAR, PDF, QOI, Gemini, ...)&lt;/li&gt; &#xA; &lt;li&gt;Unified style and design philosophy, flexible theming system, &lt;a href=&#34;https://fonts.serenityos.net/font-family&#34;&gt;custom (bitmap and vector) fonts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SerenityOS/serenity/master/Userland/Games/&#34;&gt;Games&lt;/a&gt; (Solitaire, Minesweeper, 2048, chess, Conway&#39;s Game of Life, ...) and &lt;a href=&#34;https://raw.githubusercontent.com/SerenityOS/serenity/master/Userland/Demos/&#34;&gt;demos&lt;/a&gt; (CatDog, Starfield, Eyes, mandelbrot set, WidgetGallery, ...)&lt;/li&gt; &#xA; &lt;li&gt;Every-day GUI programs and utilities (Spreadsheet with JavaScript, TextEditor, Terminal, PixelPaint, various multimedia viewers and players, Mail, Assistant, Calculator, ...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;... and all of the above are right in this repository, no extra dependencies, built from-scratch by us :^)&lt;/p&gt; &#xA;&lt;p&gt;Additionally, there are &lt;a href=&#34;https://raw.githubusercontent.com/SerenityOS/serenity/master/Ports/AvailablePorts.md&#34;&gt;over two hundred ports of popular open-source software&lt;/a&gt;, including games, compilers, Unix tools, multimedia apps and more.&lt;/p&gt; &#xA;&lt;h2&gt;How do I read the documentation?&lt;/h2&gt; &#xA;&lt;p&gt;Man pages are available online at &lt;a href=&#34;https://man.serenityos.org&#34;&gt;man.serenityos.org&lt;/a&gt;. These pages are generated from the Markdown source files in &lt;a href=&#34;https://github.com/SerenityOS/serenity/tree/master/Base/usr/share/man&#34;&gt;&lt;code&gt;Base/usr/share/man&lt;/code&gt;&lt;/a&gt; and updated automatically.&lt;/p&gt; &#xA;&lt;p&gt;When running SerenityOS you can use &lt;code&gt;man&lt;/code&gt; for the terminal interface, or &lt;code&gt;help&lt;/code&gt; for the GUI.&lt;/p&gt; &#xA;&lt;p&gt;Code-related documentation can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/SerenityOS/serenity/master/Documentation/&#34;&gt;documentation&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;How do I build and run this?&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/SerenityOS/serenity/raw/master/Documentation/BuildInstructions.md&#34;&gt;SerenityOS build instructions&lt;/a&gt;. Serenity runs on Linux, macOS (aarch64 might be a challenge), Windows (with WSL2) and many other *Nixes with hardware or software virtualization.&lt;/p&gt; &#xA;&lt;h2&gt;Get in touch and participate!&lt;/h2&gt; &#xA;&lt;p&gt;Join our Discord server: &lt;a href=&#34;https://discord.gg/serenityos&#34;&gt;SerenityOS Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before opening an issue, please see the &lt;a href=&#34;https://github.com/SerenityOS/serenity/raw/master/CONTRIBUTING.md#issue-policy&#34;&gt;issue policy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A general guide for contributing can be found in &lt;a href=&#34;https://raw.githubusercontent.com/SerenityOS/serenity/master/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Andreas Kling&lt;/strong&gt; - &lt;a href=&#34;https://twitter.com/awesomekling&#34;&gt;awesomekling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Robin Burchell&lt;/strong&gt; - &lt;a href=&#34;https://github.com/rburchell&#34;&gt;rburchell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conrad Pankoff&lt;/strong&gt; - &lt;a href=&#34;https://github.com/deoxxa&#34;&gt;deoxxa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sergey Bugaev&lt;/strong&gt; - &lt;a href=&#34;https://github.com/bugaevc&#34;&gt;bugaevc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Liav A&lt;/strong&gt; - &lt;a href=&#34;https://github.com/supercomputer7&#34;&gt;supercomputer7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linus Groh&lt;/strong&gt; - &lt;a href=&#34;https://github.com/linusg&#34;&gt;linusg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ali Mohammad Pur&lt;/strong&gt; - &lt;a href=&#34;https://github.com/alimpfard&#34;&gt;alimpfard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shannon Booth&lt;/strong&gt; - &lt;a href=&#34;https://github.com/shannonbooth&#34;&gt;shannonbooth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;H√ºseyin ASLIT√úRK&lt;/strong&gt; - &lt;a href=&#34;https://github.com/asliturk&#34;&gt;asliturk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Matthew Olsson&lt;/strong&gt; - &lt;a href=&#34;https://github.com/mattco98&#34;&gt;mattco98&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nico Weber&lt;/strong&gt; - &lt;a href=&#34;https://github.com/nico&#34;&gt;nico&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brian Gianforcaro&lt;/strong&gt; - &lt;a href=&#34;https://github.com/bgianfo&#34;&gt;bgianfo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ben Wiederhake&lt;/strong&gt; - &lt;a href=&#34;https://github.com/BenWiederhake&#34;&gt;BenWiederhake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tom&lt;/strong&gt; - &lt;a href=&#34;https://github.com/tomuta&#34;&gt;tomuta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Paul Scharnofske&lt;/strong&gt; - &lt;a href=&#34;https://github.com/asynts&#34;&gt;asynts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Itamar Shenhar&lt;/strong&gt; - &lt;a href=&#34;https://github.com/itamar8910&#34;&gt;itamar8910&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Luke Wilde&lt;/strong&gt; - &lt;a href=&#34;https://github.com/Lubrsi&#34;&gt;Lubrsi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brendan Coles&lt;/strong&gt; - &lt;a href=&#34;https://github.com/bcoles&#34;&gt;bcoles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Andrew Kaster&lt;/strong&gt; - &lt;a href=&#34;https://github.com/ADKaster&#34;&gt;ADKaster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;thankyouverycool&lt;/strong&gt; - &lt;a href=&#34;https://github.com/thankyouverycool&#34;&gt;thankyouverycool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Idan Horowitz&lt;/strong&gt; - &lt;a href=&#34;https://github.com/IdanHo&#34;&gt;IdanHo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gunnar Beutner&lt;/strong&gt; - &lt;a href=&#34;https://github.com/gunnarbeutner&#34;&gt;gunnarbeutner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tim Flynn&lt;/strong&gt; - &lt;a href=&#34;https://github.com/trflynn89&#34;&gt;trflynn89&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Jean-Baptiste Boric&lt;/strong&gt; - &lt;a href=&#34;https://github.com/boricj&#34;&gt;boricj&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stephan Unverwerth&lt;/strong&gt; - &lt;a href=&#34;https://github.com/sunverwerth&#34;&gt;sunverwerth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Max Wipfli&lt;/strong&gt; - &lt;a href=&#34;https://github.com/MaxWipfli&#34;&gt;MaxWipfli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Daniel Bertalan&lt;/strong&gt; - &lt;a href=&#34;https://github.com/BertalanD&#34;&gt;BertalanD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Jelle Raaijmakers&lt;/strong&gt; - &lt;a href=&#34;https://github.com/GMTA&#34;&gt;GMTA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sam Atkins&lt;/strong&gt; - &lt;a href=&#34;https://github.com/AtkinsSJ&#34;&gt;AtkinsSJ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tobias Christiansen&lt;/strong&gt; - &lt;a href=&#34;https://github.com/TobyAsE&#34;&gt;TobyAsE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lenny Maiorani&lt;/strong&gt; - &lt;a href=&#34;https://github.com/ldm5180&#34;&gt;ldm5180&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;sin-ack&lt;/strong&gt; - &lt;a href=&#34;https://github.com/sin-ack&#34;&gt;sin-ack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Jesse Buhagiar&lt;/strong&gt; - &lt;a href=&#34;https://github.com/Quaker762&#34;&gt;Quaker762&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Peter Elliott&lt;/strong&gt; - &lt;a href=&#34;https://github.com/Petelliott&#34;&gt;Petelliott&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Karol Kosek&lt;/strong&gt; - &lt;a href=&#34;https://github.com/krkk&#34;&gt;krkk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mustafa Quraish&lt;/strong&gt; - &lt;a href=&#34;https://github.com/mustafaquraish&#34;&gt;mustafaquraish&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;David Tuin&lt;/strong&gt; - &lt;a href=&#34;https://github.com/davidot&#34;&gt;davidot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Leon Albrecht&lt;/strong&gt; - &lt;a href=&#34;https://github.com/Hendiadyoin1&#34;&gt;Hendiadyoin1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tim Schumacher&lt;/strong&gt; - &lt;a href=&#34;https://github.com/timschumi&#34;&gt;timschumi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Marcus Nilsson&lt;/strong&gt; - &lt;a href=&#34;https://github.com/metmo&#34;&gt;metmo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gegga Thor&lt;/strong&gt; - &lt;a href=&#34;https://github.com/Xexxa&#34;&gt;Xexxa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;kleines Filmr√∂llchen&lt;/strong&gt; - &lt;a href=&#34;https://github.com/kleinesfilmroellchen&#34;&gt;kleinesfilmroellchen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Kenneth Myhra&lt;/strong&gt; - &lt;a href=&#34;https://github.com/kennethmyhra&#34;&gt;kennethmyhra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Maciej&lt;/strong&gt; - &lt;a href=&#34;https://github.com/sppmacd&#34;&gt;sppmacd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sahan Fernando&lt;/strong&gt; - &lt;a href=&#34;https://github.com/ccapitalK&#34;&gt;ccapitalK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Benjamin Maxwell&lt;/strong&gt; - &lt;a href=&#34;https://github.com/MacDue&#34;&gt;MacDue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dennis Esternon&lt;/strong&gt; - &lt;a href=&#34;https://github.com/djwisdom&#34;&gt;djwisdom&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And many more! &lt;a href=&#34;https://github.com/SerenityOS/serenity/graphs/contributors&#34;&gt;See here&lt;/a&gt; for a full contributor list. The people listed above have landed more than 100 commits in the project. :^)&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SerenityOS is licensed under a 2-clause BSD license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fmtlib/fmt</title>
    <updated>2022-08-28T01:43:12Z</updated>
    <id>tag:github.com,2022-08-28:/fmtlib/fmt</id>
    <link href="https://github.com/fmtlib/fmt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern formatting library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/&#34;&gt;https://user-images.githubusercontent.com/&lt;/a&gt; 576385/156254208-f5b743a9-88cf-439d-b0c0-923d53e8d551.png :width: 25% :alt: {fmt}&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/fmtlib/fmt/workflows/linux/badge.svg&#34;&gt;https://github.com/fmtlib/fmt/workflows/linux/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/fmtlib/fmt/actions?query=workflow%3Alinux&#34;&gt;https://github.com/fmtlib/fmt/actions?query=workflow%3Alinux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/fmtlib/fmt/workflows/macos/badge.svg&#34;&gt;https://github.com/fmtlib/fmt/workflows/macos/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/fmtlib/fmt/actions?query=workflow%3Amacos&#34;&gt;https://github.com/fmtlib/fmt/actions?query=workflow%3Amacos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/fmtlib/fmt/workflows/windows/badge.svg&#34;&gt;https://github.com/fmtlib/fmt/workflows/windows/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/fmtlib/fmt/actions?query=workflow%3Awindows&#34;&gt;https://github.com/fmtlib/fmt/actions?query=workflow%3Awindows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/fmt.svg&#34;&gt;https://oss-fuzz-build-logs.storage.googleapis.com/badges/fmt.svg&lt;/a&gt; :alt: fmt is continuously fuzzed at oss-fuzz :target: &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?%5C&#34;&gt;https://bugs.chromium.org/p/oss-fuzz/issues/list?\&lt;/a&gt; colspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20&lt;br&gt; Summary&amp;amp;q=proj%3Dfmt&amp;amp;can=1&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/badge/stackoverflow-fmt-blue.svg&#34;&gt;https://img.shields.io/badge/stackoverflow-fmt-blue.svg&lt;/a&gt; :alt: Ask questions at StackOverflow with the tag fmt :target: &lt;a href=&#34;https://stackoverflow.com/questions/tagged/fmt&#34;&gt;https://stackoverflow.com/questions/tagged/fmt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;{fmt}&lt;/strong&gt; is an open-source formatting library providing a fast and safe alternative to C stdio and C++ iostreams.&lt;/p&gt; &#xA;&lt;p&gt;If you like this project, please consider donating to one of the funds that help victims of the war in Ukraine: &lt;a href=&#34;https://www.stopputin.net/&#34;&gt;https://www.stopputin.net/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Documentation &amp;lt;https://fmt.dev&amp;gt;&lt;/code&gt;__&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Cheat Sheets &amp;lt;https://hackingcpp.com/cpp/libs/fmt.html&amp;gt;&lt;/code&gt;__&lt;/p&gt; &#xA;&lt;p&gt;Q&amp;amp;A: ask questions on &lt;code&gt;StackOverflow with the tag fmt &amp;lt;https://stackoverflow.com/questions/tagged/fmt&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;Try {fmt} in &lt;code&gt;Compiler Explorer &amp;lt;https://godbolt.org/z/Eq5763&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple &lt;code&gt;format API &amp;lt;https://fmt.dev/latest/api.html&amp;gt;&lt;/code&gt;_ with positional arguments for localization&lt;/li&gt; &#xA; &lt;li&gt;Implementation of &lt;code&gt;C++20 std::format &amp;lt;https://en.cppreference.com/w/cpp/utility/format&amp;gt;&lt;/code&gt;__&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Format string syntax &amp;lt;https://fmt.dev/latest/syntax.html&amp;gt;&lt;/code&gt;_ similar to Python&#39;s &lt;code&gt;format &amp;lt;https://docs.python.org/3/library/stdtypes.html#str.format&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Fast IEEE 754 floating-point formatter with correct rounding, shortness and round-trip guarantees&lt;/li&gt; &#xA; &lt;li&gt;Safe &lt;code&gt;printf implementation &amp;lt;https://fmt.dev/latest/api.html#printf-formatting&amp;gt;&lt;/code&gt;_ including the POSIX extension for positional arguments&lt;/li&gt; &#xA; &lt;li&gt;Extensibility: &lt;code&gt;support for user-defined types &amp;lt;https://fmt.dev/latest/api.html#formatting-user-defined-types&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;High performance: faster than common standard library implementations of &lt;code&gt;(s)printf&lt;/code&gt;, iostreams, &lt;code&gt;to_string&lt;/code&gt; and &lt;code&gt;to_chars&lt;/code&gt;, see &lt;code&gt;Speed tests&lt;/code&gt;_ and &lt;code&gt;Converting a hundred million integers to strings per second &amp;lt;http://www.zverovich.net/2020/06/13/fast-int-to-string-revisited.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Small code size both in terms of source code with the minimum configuration consisting of just three files, &lt;code&gt;core.h&lt;/code&gt;, &lt;code&gt;format.h&lt;/code&gt; and &lt;code&gt;format-inl.h&lt;/code&gt;, and compiled code; see &lt;code&gt;Compile time and code bloat&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Reliability: the library has an extensive set of &lt;code&gt;tests &amp;lt;https://github.com/fmtlib/fmt/tree/master/test&amp;gt;&lt;/code&gt;_ and is &lt;code&gt;continuously fuzzed &amp;lt;https://bugs.chromium.org/p/oss-fuzz/issues/list?colspec=ID%20Type%20 Component%20Status%20Proj%20Reported%20Owner%20Summary&amp;amp;q=proj%3Dfmt&amp;amp;can=1&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Safety: the library is fully type safe, errors in format strings can be reported at compile time, automatic memory management prevents buffer overflow errors&lt;/li&gt; &#xA; &lt;li&gt;Ease of use: small self-contained code base, no external dependencies, permissive MIT &lt;code&gt;license &amp;lt;https://github.com/fmtlib/fmt/blob/master/LICENSE.rst&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Portability &amp;lt;https://fmt.dev/latest/index.html#portability&amp;gt;&lt;/code&gt;_ with consistent output across platforms and support for older compilers&lt;/li&gt; &#xA; &lt;li&gt;Clean warning-free codebase even on high warning levels such as &lt;code&gt;-Wall -Wextra -pedantic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Locale-independence by default&lt;/li&gt; &#xA; &lt;li&gt;Optional header-only configuration enabled with the &lt;code&gt;FMT_HEADER_ONLY&lt;/code&gt; macro&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;code&gt;documentation &amp;lt;https://fmt.dev&amp;gt;&lt;/code&gt;_ for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print to stdout&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/Tevcjh&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;fmt/core.h&amp;gt;&#xA;&#xA;int main() {&#xA;  fmt::print(&#34;Hello, world!\n&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Format a string&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/oK8h33&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;std::string s = fmt::format(&#34;The answer is {}.&#34;, 42);&#xA;// s == &#34;The answer is 42.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Format a string using positional arguments&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/Yn7Txe&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;std::string s = fmt::format(&#34;I&#39;d rather be {1} than {0}.&#34;, &#34;right&#34;, &#34;happy&#34;);&#xA;// s == &#34;I&#39;d rather be happy than right.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print chrono durations&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/K8s4Mc&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;fmt/chrono.h&amp;gt;&#xA;&#xA;int main() {&#xA;  using namespace std::literals::chrono_literals;&#xA;  fmt::print(&#34;Default format: {} {}\n&#34;, 42s, 100ms);&#xA;  fmt::print(&#34;strftime-like format: {:%H:%M:%S}\n&#34;, 3h + 15min + 30s);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Default format: 42s 100ms&#xA;strftime-like format: 03:15:30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print a container&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/MxM1YqjE7&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;vector&amp;gt;&#xA;#include &amp;lt;fmt/ranges.h&amp;gt;&#xA;&#xA;int main() {&#xA;  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};&#xA;  fmt::print(&#34;{}\n&#34;, v);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[1, 2, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Check a format string at compile time&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;std::string s = fmt::format(&#34;{:d}&#34;, &#34;I am not a number&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gives a compile-time error in C++20 because &lt;code&gt;d&lt;/code&gt; is an invalid format specifier for a string.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Write a file from a single thread&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;fmt/os.h&amp;gt;&#xA;&#xA;int main() {&#xA;  auto out = fmt::output_file(&#34;guide.txt&#34;);&#xA;  out.print(&#34;Don&#39;t {}&#34;, &#34;Panic&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be &lt;code&gt;5 to 9 times faster than fprintf &amp;lt;http://www.zverovich.net/2020/08/04/optimal-file-buffer-size.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print with colors and text styles&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;fmt/color.h&amp;gt;&#xA;&#xA;int main() {&#xA;  fmt::print(fg(fmt::color::crimson) | fmt::emphasis::bold,&#xA;             &#34;Hello, {}!\n&#34;, &#34;world&#34;);&#xA;  fmt::print(fg(fmt::color::floral_white) | bg(fmt::color::slate_gray) |&#xA;             fmt::emphasis::underline, &#34;Hello, {}!\n&#34;, &#34;–º–∏—Ä&#34;);&#xA;  fmt::print(fg(fmt::color::steel_blue) | fmt::emphasis::italic,&#xA;             &#34;Hello, {}!\n&#34;, &#34;‰∏ñÁïå&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output on a modern terminal:&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/&#34;&gt;https://user-images.githubusercontent.com/&lt;/a&gt; 576385/88485597-d312f600-cf2b-11ea-9cbe-61f535a86e28.png&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Speed tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;================= ============= ===========&#xA;Library           Method        Run Time, s&#xA;================= ============= ===========&#xA;libc              printf          1.04&#xA;libc++            std::ostream    3.05&#xA;{fmt} 6.1.1       fmt::print      0.75&#xA;Boost Format 1.67 boost::format   7.24&#xA;Folly Format      folly::format   2.23&#xA;================= ============= ===========&#xA;&#xA;{fmt} is the fastest of the benchmarked methods, ~35% faster than ``printf``.&#xA;&#xA;The above results were generated by building ``tinyformat_test.cpp`` on macOS&#xA;10.14.6 with ``clang++ -O3 -DNDEBUG -DSPEED_TEST -DHAVE_FORMAT``, and taking the&#xA;best of three runs. In the test, the format string ``&#34;%0.10f:%04d:%+g:%s:%p:%c:%%\n&#34;``&#xA;or equivalent is filled 2,000,000 times with output sent to ``/dev/null``; for&#xA;further details refer to the `source&#xA;&amp;lt;https://github.com/fmtlib/format-benchmark/blob/master/src/tinyformat-test.cc&amp;gt;`_.&#xA;&#xA;{fmt} is up to 20-30x faster than ``std::ostringstream`` and ``sprintf`` on&#xA;floating-point formatting (`dtoa-benchmark &amp;lt;https://github.com/fmtlib/dtoa-benchmark&amp;gt;`_)&#xA;and faster than `double-conversion &amp;lt;https://github.com/google/double-conversion&amp;gt;`_ and&#xA;`ryu &amp;lt;https://github.com/ulfjack/ryu&amp;gt;`_:&#xA;&#xA;.. image:: https://user-images.githubusercontent.com/576385/&#xA;           95684665-11719600-0ba8-11eb-8e5b-972ff4e49428.png&#xA;   :target: https://fmt.dev/unknown_mac64_clang12.0.html&#xA;&#xA;Compile time and code bloat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script &lt;code&gt;bloat-test.py &amp;lt;https://github.com/fmtlib/format-benchmark/blob/master/bloat-test.py&amp;gt;&lt;/code&gt;_ from &lt;code&gt;format-benchmark &amp;lt;https://github.com/fmtlib/format-benchmark&amp;gt;&lt;/code&gt;_ tests compile time and code bloat for nontrivial projects. It generates 100 translation units and uses &lt;code&gt;printf()&lt;/code&gt; or its alternative five times in each to simulate a medium sized project. The resulting executable size and compile time (Apple LLVM version 8.1.0 (clang-802.0.42), macOS Sierra, best of three) is shown in the following tables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optimized build (-O3)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;============= =============== ==================== ================== Method Compile Time, s Executable size, KiB Stripped size, KiB ============= =============== ==================== ================== printf 2.6 29 26 printf+string 16.4 29 26 iostreams 31.1 59 55 {fmt} 19.0 37 34 Boost Format 91.9 226 203 Folly Format 115.7 101 88 ============= =============== ==================== ==================&lt;/p&gt; &#xA;&lt;p&gt;As you can see, {fmt} has 60% less overhead in terms of resulting binary code size compared to iostreams and comes pretty close to &lt;code&gt;printf&lt;/code&gt;. Boost Format and Folly Format have the largest overheads.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;printf+string&lt;/code&gt; is the same as &lt;code&gt;printf&lt;/code&gt; but with extra &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; include to measure the overhead of the latter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Non-optimized build&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;============= =============== ==================== ================== Method Compile Time, s Executable size, KiB Stripped size, KiB ============= =============== ==================== ================== printf 2.2 33 30 printf+string 16.0 33 30 iostreams 28.3 56 52 {fmt} 18.2 59 50 Boost Format 54.1 365 303 Folly Format 79.9 445 430 ============= =============== ==================== ==================&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;libc&lt;/code&gt;, &lt;code&gt;lib(std)c++&lt;/code&gt; and &lt;code&gt;libfmt&lt;/code&gt; are all linked as shared libraries to compare formatting function overhead only. Boost Format is a header-only library so it doesn&#39;t provide any linkage options.&lt;/p&gt; &#xA;&lt;p&gt;Running the tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Please refer to `Building the library`__ for the instructions on how to build&#xA;the library and run the unit tests.&#xA;&#xA;__ https://fmt.dev/latest/usage.html#building-the-library&#xA;&#xA;Benchmarks reside in a separate repository,&#xA;`format-benchmarks &amp;lt;https://github.com/fmtlib/format-benchmark&amp;gt;`_,&#xA;so to run the benchmarks you first need to clone this repository and&#xA;generate Makefiles with CMake::&#xA;&#xA;    $ git clone --recursive https://github.com/fmtlib/format-benchmark.git&#xA;    $ cd format-benchmark&#xA;    $ cmake .&#xA;&#xA;Then you can run the speed test::&#xA;&#xA;    $ make speed-test&#xA;&#xA;or the bloat test::&#xA;&#xA;    $ make bloat-test&#xA;    &#xA;Migrating code&#xA;--------------&#xA;&#xA;`clang-tidy-fmt &amp;lt;https://github.com/mikecrowe/clang-tidy-fmt&amp;gt;`_ provides clang&#xA;tidy checks for converting occurrences of ``printf`` and ``fprintf`` to&#xA;``fmt::print``.&#xA;&#xA;Projects using this library&#xA;---------------------------&#xA;&#xA;* `0 A.D. &amp;lt;https://play0ad.com/&amp;gt;`_: a free, open-source, cross-platform&#xA;  real-time strategy game&#xA;&#xA;* `2GIS &amp;lt;https://2gis.ru/&amp;gt;`_: free business listings with a city map&#xA;&#xA;* `AMPL/MP &amp;lt;https://github.com/ampl/mp&amp;gt;`_:&#xA;  an open-source library for mathematical programming&#xA;&#xA;* `Aseprite &amp;lt;https://github.com/aseprite/aseprite&amp;gt;`_:&#xA;  animated sprite editor &amp;amp; pixel art tool &#xA;&#xA;* `AvioBook &amp;lt;https://www.aviobook.aero/en&amp;gt;`_: a comprehensive aircraft&#xA;  operations suite&#xA;  &#xA;* `Blizzard Battle.net &amp;lt;https://battle.net/&amp;gt;`_: an online gaming platform&#xA;  &#xA;* `Celestia &amp;lt;https://celestia.space/&amp;gt;`_: real-time 3D visualization of space&#xA;&#xA;* `Ceph &amp;lt;https://ceph.com/&amp;gt;`_: a scalable distributed storage system&#xA;&#xA;* `ccache &amp;lt;https://ccache.dev/&amp;gt;`_: a compiler cache&#xA;&#xA;* `ClickHouse &amp;lt;https://github.com/ClickHouse/ClickHouse&amp;gt;`_: analytical database&#xA;  management system&#xA;&#xA;* `CUAUV &amp;lt;https://cuauv.org/&amp;gt;`_: Cornell University&#39;s autonomous underwater&#xA;  vehicle&#xA;&#xA;* `Drake &amp;lt;https://drake.mit.edu/&amp;gt;`_: a planning, control, and analysis toolbox&#xA;  for nonlinear dynamical systems (MIT)&#xA;&#xA;* `Envoy &amp;lt;https://lyft.github.io/envoy/&amp;gt;`_: C++ L7 proxy and communication bus&#xA;  (Lyft)&#xA;&#xA;* `FiveM &amp;lt;https://fivem.net/&amp;gt;`_: a modification framework for GTA V&#xA;&#xA;* `fmtlog &amp;lt;https://github.com/MengRao/fmtlog&amp;gt;`_: a performant fmtlib-style&#xA;  logging library with latency in nanoseconds&#xA;&#xA;* `Folly &amp;lt;https://github.com/facebook/folly&amp;gt;`_: Facebook open-source library&#xA;&#xA;* `GemRB &amp;lt;https://gemrb.org/&amp;gt;`_: a portable open-source implementation of&#xA;  Bioware‚Äôs Infinity Engine&#xA;&#xA;* `Grand Mountain Adventure&#xA;  &amp;lt;https://store.steampowered.com/app/1247360/Grand_Mountain_Adventure/&amp;gt;`_:&#xA;  a beautiful open-world ski &amp;amp; snowboarding game&#xA;&#xA;* `HarpyWar/pvpgn &amp;lt;https://github.com/pvpgn/pvpgn-server&amp;gt;`_:&#xA;  Player vs Player Gaming Network with tweaks&#xA;&#xA;* `KBEngine &amp;lt;https://github.com/kbengine/kbengine&amp;gt;`_: an open-source MMOG server&#xA;  engine&#xA;&#xA;* `Keypirinha &amp;lt;https://keypirinha.com/&amp;gt;`_: a semantic launcher for Windows&#xA;&#xA;* `Kodi &amp;lt;https://kodi.tv/&amp;gt;`_ (formerly xbmc): home theater software&#xA;&#xA;* `Knuth &amp;lt;https://kth.cash/&amp;gt;`_: high-performance Bitcoin full-node&#xA;&#xA;* `Microsoft Verona &amp;lt;https://github.com/microsoft/verona&amp;gt;`_:&#xA;  research programming language for concurrent ownership&#xA;&#xA;* `MongoDB &amp;lt;https://mongodb.com/&amp;gt;`_: distributed document database&#xA;&#xA;* `MongoDB Smasher &amp;lt;https://github.com/duckie/mongo_smasher&amp;gt;`_: a small tool to&#xA;  generate randomized datasets&#xA;&#xA;* `OpenSpace &amp;lt;https://openspaceproject.com/&amp;gt;`_: an open-source&#xA;  astrovisualization framework&#xA;&#xA;* `PenUltima Online (POL) &amp;lt;https://www.polserver.com/&amp;gt;`_:&#xA;  an MMO server, compatible with most Ultima Online clients&#xA;&#xA;* `PyTorch &amp;lt;https://github.com/pytorch/pytorch&amp;gt;`_: an open-source machine&#xA;  learning library&#xA;&#xA;* `quasardb &amp;lt;https://www.quasardb.net/&amp;gt;`_: a distributed, high-performance,&#xA;  associative database&#xA;  &#xA;* `Quill &amp;lt;https://github.com/odygrd/quill&amp;gt;`_: asynchronous low-latency logging library&#xA;&#xA;* `QKW &amp;lt;https://github.com/ravijanjam/qkw&amp;gt;`_: generalizing aliasing to simplify&#xA;  navigation, and executing complex multi-line terminal command sequences&#xA;&#xA;* `redis-cerberus &amp;lt;https://github.com/HunanTV/redis-cerberus&amp;gt;`_: a Redis cluster&#xA;  proxy&#xA;&#xA;* `redpanda &amp;lt;https://vectorized.io/redpanda&amp;gt;`_: a 10x faster Kafka¬Æ replacement&#xA;  for mission critical systems written in C++&#xA;&#xA;* `rpclib &amp;lt;http://rpclib.net/&amp;gt;`_: a modern C++ msgpack-RPC server and client&#xA;  library&#xA;&#xA;* `Salesforce Analytics Cloud&#xA;  &amp;lt;https://www.salesforce.com/analytics-cloud/overview/&amp;gt;`_:&#xA;  business intelligence software&#xA;&#xA;* `Scylla &amp;lt;https://www.scylladb.com/&amp;gt;`_: a Cassandra-compatible NoSQL data store&#xA;  that can handle 1 million transactions per second on a single server&#xA;&#xA;* `Seastar &amp;lt;http://www.seastar-project.org/&amp;gt;`_: an advanced, open-source C++&#xA;  framework for high-performance server applications on modern hardware&#xA;&#xA;* `spdlog &amp;lt;https://github.com/gabime/spdlog&amp;gt;`_: super fast C++ logging library&#xA;&#xA;* `Stellar &amp;lt;https://www.stellar.org/&amp;gt;`_: financial platform&#xA;&#xA;* `Touch Surgery &amp;lt;https://www.touchsurgery.com/&amp;gt;`_: surgery simulator&#xA;&#xA;* `TrinityCore &amp;lt;https://github.com/TrinityCore/TrinityCore&amp;gt;`_: open-source&#xA;  MMORPG framework&#xA;&#xA;* `Windows Terminal &amp;lt;https://github.com/microsoft/terminal&amp;gt;`_: the new Windows&#xA;  terminal&#xA;&#xA;`More... &amp;lt;https://github.com/search?q=fmtlib&amp;amp;type=Code&amp;gt;`_&#xA;&#xA;If you are aware of other projects using this library, please let me know&#xA;by `email &amp;lt;mailto:victor.zverovich@gmail.com&amp;gt;`_ or by submitting an&#xA;`issue &amp;lt;https://github.com/fmtlib/fmt/issues&amp;gt;`_.&#xA;&#xA;Motivation&#xA;----------&#xA;&#xA;So why yet another formatting library?&#xA;&#xA;There are plenty of methods for doing this task, from standard ones like&#xA;the printf family of function and iostreams to Boost Format and FastFormat&#xA;libraries. The reason for creating a new library is that every existing&#xA;solution that I found either had serious issues or didn&#39;t provide&#xA;all the features I needed.&#xA;&#xA;printf&#xA;~~~~~~&#xA;&#xA;The good thing about ``printf`` is that it is pretty fast and readily available&#xA;being a part of the C standard library. The main drawback is that it&#xA;doesn&#39;t support user-defined types. ``printf`` also has safety issues although&#xA;they are somewhat mitigated with `__attribute__ ((format (printf, ...))&#xA;&amp;lt;https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html&amp;gt;`_ in GCC.&#xA;There is a POSIX extension that adds positional arguments required for&#xA;`i18n &amp;lt;https://en.wikipedia.org/wiki/Internationalization_and_localization&amp;gt;`_&#xA;to ``printf`` but it is not a part of C99 and may not be available on some&#xA;platforms.&#xA;&#xA;iostreams&#xA;~~~~~~~~~&#xA;&#xA;The main issue with iostreams is best illustrated with an example:&#xA;&#xA;.. code:: c++&#xA;&#xA;    std::cout &amp;lt;&amp;lt; std::setprecision(2) &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; 1.23456 &amp;lt;&amp;lt; &#34;\n&#34;;&#xA;&#xA;which is a lot of typing compared to printf:&#xA;&#xA;.. code:: c++&#xA;&#xA;    printf(&#34;%.2f\n&#34;, 1.23456);&#xA;&#xA;Matthew Wilson, the author of FastFormat, called this &#34;chevron hell&#34;. iostreams&#xA;don&#39;t support positional arguments by design.&#xA;&#xA;The good part is that iostreams support user-defined types and are safe although&#xA;error handling is awkward.&#xA;&#xA;Boost Format&#xA;~~~~~~~~~~~~&#xA;&#xA;This is a very powerful library which supports both ``printf``-like format&#xA;strings and positional arguments. Its main drawback is performance. According to&#xA;various benchmarks, it is much slower than other methods considered here. Boost&#xA;Format also has excessive build times and severe code bloat issues (see&#xA;`Benchmarks`_).&#xA;&#xA;FastFormat&#xA;~~~~~~~~~~&#xA;&#xA;This is an interesting library which is fast, safe and has positional arguments.&#xA;However, it has significant limitations, citing its author:&#xA;&#xA;    Three features that have no hope of being accommodated within the&#xA;    current design are:&#xA;&#xA;    * Leading zeros (or any other non-space padding)&#xA;    * Octal/hexadecimal encoding&#xA;    * Runtime width/alignment specification&#xA;&#xA;It is also quite big and has a heavy dependency, STLSoft, which might be too&#xA;restrictive for using it in some projects.&#xA;&#xA;Boost Spirit.Karma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is not really a formatting library but I decided to include it here for completeness. As iostreams, it suffers from the problem of mixing verbatim text with arguments. The library is pretty fast, but slower on integer formatting than &lt;code&gt;fmt::format_to&lt;/code&gt; with format string compilation on Karma&#39;s own benchmark, see &lt;code&gt;Converting a hundred million integers to strings per second &amp;lt;http://www.zverovich.net/2020/06/13/fast-int-to-string-revisited.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;{fmt} is distributed under the MIT &lt;code&gt;license &amp;lt;https://github.com/fmtlib/fmt/blob/master/LICENSE.rst&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation License&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Format String Syntax &amp;lt;https://fmt.dev/latest/syntax.html&amp;gt;&lt;/code&gt;_ section in the documentation is based on the one from Python &lt;code&gt;string module documentation &amp;lt;https://docs.python.org/3/library/string.html#module-string&amp;gt;&lt;/code&gt;&lt;em&gt;. For this reason the documentation is distributed under the Python Software Foundation license available in &lt;code&gt;doc/python-license.txt &amp;lt;https://raw.github.com/fmtlib/fmt/master/doc/python-license.txt&amp;gt;&lt;/code&gt;&lt;/em&gt;. It only applies if you distribute the documentation of {fmt}.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;The {fmt} library is maintained by Victor Zverovich (&lt;code&gt;vitaut &amp;lt;https://github.com/vitaut&amp;gt;&lt;/code&gt;&lt;em&gt;) and Jonathan M√ºller (&lt;code&gt;foonathan &amp;lt;https://github.com/foonathan&amp;gt;&lt;/code&gt;&lt;/em&gt;) with contributions from many other people. See &lt;code&gt;Contributors &amp;lt;https://github.com/fmtlib/fmt/graphs/contributors&amp;gt;&lt;/code&gt;_ and &lt;code&gt;Releases &amp;lt;https://github.com/fmtlib/fmt/releases&amp;gt;&lt;/code&gt;_ for some of the names. Let us know if your contribution is not listed or mentioned incorrectly and we&#39;ll make it right.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nickrehm/dRehmFlight</title>
    <updated>2022-08-28T01:43:12Z</updated>
    <id>tag:github.com,2022-08-28:/nickrehm/dRehmFlight</id>
    <link href="https://github.com/nickrehm/dRehmFlight" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Teensy/Arduino flight controller and stabilization for small-scale VTOL vehicles&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/nickrehm/dRehmFlight/raw/master/dRehmFlight%20Logo.png&#34; alt=&#34;dRehmFlight Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=tlD0C5CrWcA&amp;amp;lc=Ugx6m02xjHk8QH19vd94AaABAg&#34;&gt;Intro Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.rcgroups.com/forums/showthread.php?3706571-dRehmFlight-VTOL-Teensy-Flight-Controller-and-Stabilization&#34;&gt;RcGroups Support Thread&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;dRehmFlight is the flight controller for hobbyists, hackers, and non-coders interested in stabilizing their wacky and unique flying creations. The code and supporting documentation is built to bring someone up to speed on VTOL flight stabilization concepts as quickly and painlessly as possible. The code is written and presented in a way that is intuitive, easy to follow, and most importantly: all in one place. No more digging through countless folders and confusing classes just to add an &#39;if&#39; statement for your custom drone application. This flight controller uses an Arduino-compatible microcontroller, so there is no confusing flashing or compiling process necessary. If you can use Arduino, you can start expanding the capabilites of this flight controller to your liking.&lt;/p&gt; &#xA;&lt;p&gt;dRehmFlight has been used as a teaching tool for aircraft stabilization and flight control principles in universities and tech companies around the world. It is not meant to out-perform other flight controller packages on the market, or be used in a commercial sense. It is best suited for rapid prototyping or allowing a radio control hobbyist to get their feet wet in flight control code for their VTOL project. Much more information is included in the dRehmFlight VTOL Documentation .pdf.&lt;/p&gt; &#xA;&lt;p&gt;This code is entirely free to use and will stay that way forever. If you found this helpful for your project, donations are appreciated: &lt;a href=&#34;https://www.paypal.me/NicholasRehm&#34;&gt;Paypal Donation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;New in Beta 1.3:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spektrum DSM Satellite RX Support&lt;/li&gt; &#xA; &lt;li&gt;One-time IMU calibration&lt;/li&gt; &#xA; &lt;li&gt;ESC calibration functionality&lt;/li&gt; &#xA; &lt;li&gt;Motor arming bug fix&lt;/li&gt; &#xA; &lt;li&gt;Code and comment clean up&lt;/li&gt; &#xA; &lt;li&gt;Small bug fixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hardware Requirements&lt;/h3&gt; &#xA;&lt;p&gt;This flight controller is based off of the Teensy 4.0 microcontroller and MPU6050 6DOF IMU. The following components (available on Amazon) are required to complete the flight controller assembly:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Teensy 4.0&lt;/strong&gt;: &lt;a href=&#34;https://amzn.to/3oFG3QN&#34;&gt;https://amzn.to/3oFG3QN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternative Links&lt;/strong&gt;: &lt;a href=&#34;https://www.sparkfun.com/products/15583&#34;&gt;Sparkfun&lt;/a&gt;, &lt;a href=&#34;https://www.adafruit.com/product/4323&#34;&gt;Adafruit&lt;/a&gt;, &lt;a href=&#34;https://www.electromaker.io/shop/product/teensy-40?gclid=Cj0KCQjwxIOXBhCrARIsAL1QFCYcZsU4tRXVgeqfOOJyg_zPV2MXTeJM2QwJ6zafMTsCb6MjWthk7r8aAn6hEALw_wcB&#34;&gt;Electromaker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Due to supply chain issues, the Teensy 4.0 has been frequently out of stock throughout 2022. The Teensy 4.1 is generally in stock more often and is immediately compatible with the dRehmFlight pin mappings (plus you get extra bonus pins!): &lt;a href=&#34;https://amzn.to/3c1OSSw&#34;&gt;https://amzn.to/3c1OSSw&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;GY-521 MPU6050 IMU&lt;/strong&gt;: &lt;a href=&#34;https://amzn.to/3edF1Vn&#34;&gt;https://amzn.to/3edF1Vn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;These (and all Amazon links contained within the supporting documentation) are Amazon Affiliate links; by purchasing from these, I receive a small portion of the revenue at no cost to you. I appreciate any and all support!&lt;/p&gt; &#xA;&lt;h3&gt;Software Requirments&lt;/h3&gt; &#xA;&lt;p&gt;Code is uploaded to the board using the Arduino IDE; download the latest version here: &lt;a href=&#34;https://www.arduino.cc/en/main/software&#34;&gt;https://www.arduino.cc/en/main/software&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To connect to the Teensy, you must also download and install the Teensyduino arduino add-on; download and instructions available here: &lt;a href=&#34;https://www.pjrc.com/teensy/td_download.html&#34;&gt;https://www.pjrc.com/teensy/td_download.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial Videos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=EBXBEB-Xv7w&amp;amp;&#34;&gt;Building the Flight Controller Hardware&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Wdc1o6eSsMo&#34;&gt;Setting Up Your Radio Connection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pi4PiBFPt70&#34;&gt;Mounting and Configuring the IMU&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_n5GBudUf5Q&amp;amp;lc=UgwvXX18w7FtJH1ClLl4AaABAg&#34;&gt;How the Flight Controller Code Works&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RqdcZD0ZoUk&#34;&gt;Building and Coding an RC F-35 VTOL&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Flight Videos&lt;/h2&gt; &#xA;&lt;p&gt;dRehmflight has been successfully implemented on the following platforms:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Autonomous Quadrotor:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=p8frNNYQNV4&#34;&gt;https://www.youtube.com/watch?v=p8frNNYQNV4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quadrotor Biplane VTOL:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=rk4tUKM6bd0&#34;&gt;https://www.youtube.com/watch?v=rk4tUKM6bd0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dual Cyclocopter:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=JoVmejDsMrM&amp;amp;&#34;&gt;https://www.youtube.com/watch?v=JoVmejDsMrM&amp;amp;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;VTOL F-35 Tricopter:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=RqdcZD0ZoUk&#34;&gt;https://www.youtube.com/watch?v=RqdcZD0ZoUk&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Model SpaceX Starhopper:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=VsyFejn40Ss&#34;&gt;https://www.youtube.com/watch?v=VsyFejn40Ss&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Model SpaceX Starship:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=5lwH7xJnB4I&#34;&gt;https://www.youtube.com/watch?v=5lwH7xJnB4I&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Inverted Pendulum Drone Stabilization:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=XmYRQi48s-8&#34;&gt;https://www.youtube.com/watch?v=XmYRQi48s-8&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fixed Wing Ground Effect Vehicle:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=uaY2G5Kbj_g&#34;&gt;https://www.youtube.com/watch?v=uaY2G5Kbj_g&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spinning Tricopter VTOL:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=7JH1_ZKV7t4&#34;&gt;https://www.youtube.com/watch?v=7JH1_ZKV7t4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Model Joby EVTOL:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=Dd2N_lyO_SQ&#34;&gt;https://www.youtube.com/watch?v=Dd2N_lyO_SQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Model V-22 Osprey:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=2OGkYfOs9EU&#34;&gt;https://www.youtube.com/watch?v=2OGkYfOs9EU&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tricopter Tailsitter:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=8MJNfkEBRMY&#34;&gt;https://www.youtube.com/watch?v=8MJNfkEBRMY&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tail-less Albatross:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=1ifR_cvjpjk&#34;&gt;https://www.youtube.com/watch?v=1ifR_cvjpjk&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bicopter VTOL:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=XPXN0QejqM0&#34;&gt;https://www.youtube.com/watch?v=XPXN0QejqM0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I would love to see your flying creations and maybe feature them here as well. Please email me at &lt;a href=&#34;mailto:NicholasRehmYT@gmail.com&#34;&gt;NicholasRehmYT@gmail.com&lt;/a&gt; with any videos/pics of your project. -Nick Rehm&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This code is a shared, open source flight controller for small micro aerial vehicles and is intended to be modified to suit your needs. It is NOT intended to be used on manned vehicles. I do not claim any responsibility for any damage or injury that may be inflicted as a result of the use of this code. Use and modify at your own risk. More specifically put:&lt;/p&gt; &#xA;&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE CONTRIBUTORS &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hits.seeyoufarm.com&#34;&gt;&lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fnickrehm%2FdRehmFlight&amp;amp;count_bg=%23E30F0F&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=hits&amp;amp;edge_flat=false&#34; alt=&#34;Hits&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>