<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-15T01:42:00Z</updated>
  <subtitle>Weekly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>odygrd/quill</title>
    <updated>2024-09-15T01:42:00Z</updated>
    <id>tag:github.com,2024-09-15:/odygrd/quill</id>
    <link href="https://github.com/odygrd/quill" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Asynchronous Low Latency C++ Logging Library&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/odygrd/quill/master/docs/logo.png&#34; alt=&#34;logo&#34; width=&#34;200&#34; height=&#34;auto&#34;&gt; &#xA; &lt;h1&gt;Quill&lt;/h1&gt; &#xA; &lt;p&gt;&lt;b&gt;Asynchronous Low Latency C++ Logging Library&lt;/b&gt;&lt;/p&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://github.com/odygrd/quill/actions?query=workflow%3Alinux&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/odygrd/quill/linux.yml?branch=master&amp;amp;label=linux&amp;amp;logo=linux&amp;amp;style=flat-square&#34; alt=&#34;linux-ci&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/odygrd/quill/actions?query=workflow%3Amacos&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/odygrd/quill/macos.yml?branch=master&amp;amp;label=macos&amp;amp;logo=apple&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;macos-ci&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/odygrd/quill/actions?query=workflow%3Awindows&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/odygrd/quill/windows.yml?branch=master&amp;amp;label=windows&amp;amp;logo=windows&amp;amp;logoColor=blue&amp;amp;style=flat-square&#34; alt=&#34;windows-ci&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://codecov.io/gh/odygrd/quill&#34;&gt; &lt;img src=&#34;https://img.shields.io/codecov/c/gh/odygrd/quill/master.svg?logo=codecov&amp;amp;style=flat-square&#34; alt=&#34;Codecov&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://app.codacy.com/gh/odygrd/quill/dashboard?utm_source=gh&amp;amp;utm_medium=referral&amp;amp;utm_content=&amp;amp;utm_campaign=Badge_grade&#34;&gt; &lt;img src=&#34;https://img.shields.io/codacy/grade/cd387bc34658475d98bff84db3ad5287?logo=codacy&amp;amp;style=flat-square&#34; alt=&#34;Codacy&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://www.codefactor.io/repository/github/odygrd/quill&#34;&gt; &lt;img src=&#34;https://img.shields.io/codefactor/grade/github/odygrd/quill?logo=codefactor&amp;amp;style=flat-square&#34; alt=&#34;CodeFactor&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://en.wikipedia.org/wiki/C%2B%2B17&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/language-C%2B%2B17-red.svg?style=flat-square&#34; alt=&#34;language&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;h4&gt; &lt;a href=&#34;https://quillcpp.readthedocs.io&#34; title=&#34;Explore the full documentation&#34;&gt;üìö Documentation&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&#34;https://quillcpp.readthedocs.io/en/latest/cheat_sheet.html&#34; title=&#34;Quick reference for common tasks&#34;&gt;‚ö° Cheat Sheet&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&#34;https://github.com/odygrd/quill/issues/new?assignees=&amp;amp;labels=&amp;amp;projects=&amp;amp;template=bug-report.md&amp;amp;title=&#34; title=&#34;Report a bug or issue&#34;&gt;üêõ Report Bug&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&#34;https://github.com/odygrd/quill/issues/new?assignees=&amp;amp;labels=&amp;amp;projects=&amp;amp;template=feature_request.md&amp;amp;title=&#34;&gt;üí° Request Feature&lt;/a&gt; &lt;/h4&gt; &#xA; &lt;div align=&#34;center&#34;&gt;&#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/odygrd/quill/master/docs/quill_demo.gif&#34; width=&#34;75%&#34;&gt;&#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üß≠ Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/odygrd/quill/master/#-introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/odygrd/quill/master/#-quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/odygrd/quill/master/#-features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/odygrd/quill/master/#-performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/odygrd/quill/master/#-usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/odygrd/quill/master/#-design&#34;&gt;Design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/odygrd/quill/master/#-caveats&#34;&gt;Caveats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/odygrd/quill/master/#-license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ú® Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Quill is a high-performance asynchronous logging library. It is particularly suited for performance-critical applications where every microsecond counts.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance-Focused&lt;/strong&gt;: Quill consistently outperforms many popular logging libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feature-Rich&lt;/strong&gt;: Packed with advanced features to meet diverse logging needs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Battle-Tested&lt;/strong&gt;: Proven in demanding production environments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensive Documentation&lt;/strong&gt;: Comprehensive guides and examples available.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Community-Driven&lt;/strong&gt;: Open to contributions, feedback, and feature requests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Try it on &lt;a href=&#34;https://godbolt.org/z/81srfYr64&#34;&gt;Compiler Explorer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚è© Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Getting started is easy and straightforward. Follow these steps to integrate the library into your project:&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;You can install Quill using the package manager of your choice:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Package Manager&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Installation Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;vcpkg&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;vcpkg install quill&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Conan&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;conan install quill&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Homebrew&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;brew install quill&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Meson WrapDB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;meson wrap install quill&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Conda&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;conda install -c conda-forge quill&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Bzlmod&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bazel_dep(name = &#34;quill&#34;, version = &#34;x.y.z&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;xmake&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;xrepo install quill&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;nix&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;nix-shell -p quill-log&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Once installed, you can start using Quill with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;quill/Backend.h&#34;&#xA;#include &#34;quill/Frontend.h&#34;&#xA;#include &#34;quill/LogMacros.h&#34;&#xA;#include &#34;quill/Logger.h&#34;&#xA;#include &#34;quill/sinks/ConsoleSink.h&#34;&#xA;#include &amp;lt;string_view&amp;gt;&#xA;&#xA;int main()&#xA;{&#xA;  quill::Backend::start();&#xA;&#xA;  quill::Logger* logger = quill::Frontend::create_or_get_logger(&#xA;    &#34;root&#34;, quill::Frontend::create_or_get_sink&amp;lt;quill::ConsoleSink&amp;gt;(&#34;sink_id_1&#34;));&#xA;&#xA;  LOG_INFO(logger, &#34;Hello from {}!&#34;, std::string_view{&#34;Quill&#34;});&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üéØ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;High-Performance&lt;/strong&gt;: Ultra-low latency performance. View &lt;a href=&#34;http://github.com/odygrd/quill#performance&#34;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Asynchronous Processing&lt;/strong&gt;: Background thread handles formatting and I/O, keeping your main thread responsive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Minimal Header Includes&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Frontend&lt;/strong&gt;: Only &lt;code&gt;Logger.h&lt;/code&gt; and &lt;code&gt;LogMacros.h&lt;/code&gt; needed for logging. Lightweight with minimal dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Backend&lt;/strong&gt;: Single &lt;code&gt;.cpp&lt;/code&gt; file inclusion. No backend code injection into other translation units.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compile-Time Optimization&lt;/strong&gt;: Eliminate specific log levels at compile time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom Formatters&lt;/strong&gt;: Define your own log output patterns. See &lt;a href=&#34;https://quillcpp.readthedocs.io/en/latest/formatters.html&#34;&gt;Formatters&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Timestamp-Ordered Logs&lt;/strong&gt;: Simplify debugging of multithreaded applications with chronologically ordered logs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible Timestamps&lt;/strong&gt;: Support for &lt;code&gt;rdtsc&lt;/code&gt;, &lt;code&gt;chrono&lt;/code&gt;, or &lt;code&gt;custom clocks&lt;/code&gt; - ideal for simulations and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backtrace Logging&lt;/strong&gt;: Store messages in a ring buffer for on-demand display. See &lt;a href=&#34;https://quillcpp.readthedocs.io/en/latest/backtrace_logging.html&#34;&gt;Backtrace Logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple Output Sinks&lt;/strong&gt;: Console (with color), files (with rotation), JSON, ability to create custom sinks and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Log Filtering&lt;/strong&gt;: Process only relevant messages. See &lt;a href=&#34;https://quillcpp.readthedocs.io/en/latest/filters.html&#34;&gt;Filters&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JSON Logging&lt;/strong&gt;: Structured log output. See &lt;a href=&#34;https://quillcpp.readthedocs.io/en/latest/json_logging.html&#34;&gt;JSON Logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configurable Queue Modes&lt;/strong&gt;: &lt;code&gt;bounded/unbounded&lt;/code&gt; and &lt;code&gt;blocking/dropping&lt;/code&gt; options with monitoring on dropped messages, queue reallocations, and blocked hot threads.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Crash Handling&lt;/strong&gt;: Built-in signal handler for log preservation during crashes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Huge Pages Support (Linux)&lt;/strong&gt;: Leverage huge pages on the hot path for optimized performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wide Character Support (Windows)&lt;/strong&gt;: Compatible with ASCII-encoded wide strings and STL containers consisting of wide strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exception-Free Option&lt;/strong&gt;: Configurable builds with or without exception handling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clean Codebase&lt;/strong&gt;: Maintained to high standards, warning-free even at strict levels.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type-Safe API&lt;/strong&gt;: Built on &lt;a href=&#34;http://github.com/fmtlib/fmt&#34;&gt;{fmt}&lt;/a&gt; library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üöÄ Performance&lt;/h2&gt; &#xA;&lt;h3&gt;System Configuration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;OS:&lt;/strong&gt; Linux RHEL 9.4&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CPU:&lt;/strong&gt; Intel Core i5-12600 (12th Gen) @ 4.8 GHz&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compiler:&lt;/strong&gt; GCC 13.1&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Benchmark-Tuned System:&lt;/strong&gt; The system is specifically tuned for benchmarking.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Command Line Parameters:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cat /proc/cmdline&#xA;BOOT_IMAGE=(hd0,gpt2)/vmlinuz-5.14.0-427.13.1.el9_4.x86_64 root=/dev/mapper/rhel-root ro crashkernel=1G-4G:192M,4G-64G:256M,64G-:512M resume=/dev/mapper/rhel-swap rd.lvm.lv=rhel/root rd.lvm.lv=rhel/swap rhgb quiet nohz=on nohz_full=1-5 rcu_nocbs=1-5 isolcpus=1-5 mitigations=off transparent_hugepage=never intel_pstate=disable nosoftlockup irqaffinity=0 processor.max_cstate=1 nosoftirqd sched_tick_offload=0 spec_store_bypass_disable=off spectre_v2=off iommu=pt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find the benchmark code on the &lt;a href=&#34;http://github.com/odygrd/logger_benchmarks&#34;&gt;logger_benchmarks&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h3&gt;Latency&lt;/h3&gt; &#xA;&lt;p&gt;The results presented in the tables below are measured in &lt;code&gt;nanoseconds (ns)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The tables are sorted by the 95th percentile&lt;/p&gt; &#xA;&lt;h4&gt;Logging Numbers&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;LOG_INFO(logger, &#34;Logging int: {}, int: {}, double: {}&#34;, i, j, d)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;1 Thread Logging&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;50th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;75th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;90th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;95th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;99th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;99.9th&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/odygrd/quill&#34;&gt;Quill Bounded Dropping Queue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/MengRao/fmtlog&#34;&gt;fmtlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/odygrd/quill&#34;&gt;Quill Unbounded Queue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/PlatformLab/NanoLog&#34;&gt;PlatformLab NanoLog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/Morgan-Stanley/binlog&#34;&gt;MS BinLog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;56&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;93&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/choll/xtr&#34;&gt;XTR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;29&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;33&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;53&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/mattiasflodin/reckless&#34;&gt;Reckless&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;26&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;28&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;31&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;32&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;35&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;49&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/Iyengar111/NanoLog&#34;&gt;Iyengar NanoLog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;83&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;96&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;117&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;125&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;152&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;197&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/gabime/spdlog&#34;&gt;spdlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;143&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;147&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;152&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;158&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;165&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;177&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/KjellKod/g3log&#34;&gt;g3log&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1161&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1259&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1329&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1419&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1602&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1827&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/odygrd/quill/master/docs%2Fcharts%2Fnumbers_1_thread_logging.webp&#34; alt=&#34;numbers_1_thread_logging.webp&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;4 Threads Logging Simultaneously&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;50th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;75th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;90th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;95th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;99th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;99.9th&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/MengRao/fmtlog&#34;&gt;fmtlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/odygrd/quill&#34;&gt;Quill Bounded Dropping Queue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/choll/xtr&#34;&gt;XTR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;31&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;38&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/odygrd/quill&#34;&gt;Quill Unbounded Queue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/PlatformLab/NanoLog&#34;&gt;PlatformLab NanoLog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;27&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;32&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/Morgan-Stanley/binlog&#34;&gt;MS BinLog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;62&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;100&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/mattiasflodin/reckless&#34;&gt;Reckless&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;26&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;28&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;34&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;55&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/Iyengar111/NanoLog&#34;&gt;Iyengar NanoLog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;58&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;90&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;123&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;131&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;168&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;242&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/gabime/spdlog&#34;&gt;spdlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;210&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;243&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;288&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;313&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;382&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;694&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/KjellKod/g3log&#34;&gt;g3log&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1271&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1337&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1396&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1437&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1614&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1899&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/odygrd/quill/master/docs%2Fcharts%2Fnumbers_4_thread_logging.webp&#34; alt=&#34;numbers_4_thread_logging.webp&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Logging Large Strings&lt;/h4&gt; &#xA;&lt;p&gt;Logging &lt;code&gt;std::string&lt;/code&gt; over 35 characters to prevent the short string optimization.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LOG_INFO(logger, &#34;Logging int: {}, int: {}, string: {}&#34;, i, j, large_string)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;1 Thread Logging&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;50th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;75th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;90th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;95th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;99th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;99.9th&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/odygrd/quill&#34;&gt;Quill Bounded Dropping Queue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/MengRao/fmtlog&#34;&gt;fmtlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/odygrd/quill&#34;&gt;Quill Unbounded Queue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;19&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/Morgan-Stanley/binlog&#34;&gt;MS BinLog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;61&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;100&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/PlatformLab/NanoLog&#34;&gt;PlatformLab NanoLog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;27&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;33&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;39&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/choll/xtr&#34;&gt;XTR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;29&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;31&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;35&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;54&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/mattiasflodin/reckless&#34;&gt;Reckless&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;91&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;107&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;115&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;118&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;124&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;135&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/Iyengar111/NanoLog&#34;&gt;Iyengar NanoLog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;86&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;97&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;119&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;128&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;159&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;268&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/gabime/spdlog&#34;&gt;spdlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;120&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;124&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;128&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;132&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;141&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;151&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/KjellKod/g3log&#34;&gt;g3log&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;881&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;956&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1018&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1089&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1264&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1494&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/odygrd/quill/master/docs%2Fcharts%2Flarge_strings_1_thread_logging.webp&#34; alt=&#34;large_strings_1_thread_logging.webp&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;4 Threads Logging Simultaneously&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;50th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;75th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;90th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;95th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;99th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;99.9th&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/choll/xtr&#34;&gt;XTR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;32&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;40&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/MengRao/fmtlog&#34;&gt;fmtlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;19&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/odygrd/quill&#34;&gt;Quill Bounded Dropping Queue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;19&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/odygrd/quill&#34;&gt;Quill Unbounded Queue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;21&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/Morgan-Stanley/binlog&#34;&gt;MS BinLog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;27&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;28&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;65&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;105&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/PlatformLab/NanoLog&#34;&gt;PlatformLab NanoLog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;32&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;38&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;44&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;51&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/mattiasflodin/reckless&#34;&gt;Reckless&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;79&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;94&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;104&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;107&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;114&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;132&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/Iyengar111/NanoLog&#34;&gt;Iyengar NanoLog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;85&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;93&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;125&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;133&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;168&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;237&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/gabime/spdlog&#34;&gt;spdlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;178&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;218&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;261&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;281&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;381&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;651&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/KjellKod/g3log&#34;&gt;g3log&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;992&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1055&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1121&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1178&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1360&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1600&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/odygrd/quill/master/docs%2Fcharts%2Flarge_strings_4_thread_logging.webp&#34; alt=&#34;large_strings_4_thread_logging.webp&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Logging Complex Types&lt;/h4&gt; &#xA;&lt;p&gt;Logging &lt;code&gt;std::vector&amp;lt;std::string&amp;gt;&lt;/code&gt; containing 16 large strings, each ranging from 50 to 60 characters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LOG_INFO(logger, &#34;Logging int: {}, int: {}, vector: {}&#34;, i, j, v)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;1 Thread Logging&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;50th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;75th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;90th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;95th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;99th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;99.9th&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/odygrd/quill&#34;&gt;Quill Bounded Dropping Queue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;48&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;53&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;55&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;58&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;62&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/odygrd/quill&#34;&gt;Quill Unbounded Queue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;54&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;56&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;57&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;58&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;61&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;66&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/Morgan-Stanley/binlog&#34;&gt;MS BinLog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;68&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;69&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;72&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;74&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;79&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;281&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/choll/xtr&#34;&gt;XTR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;284&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;294&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;340&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;346&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;356&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;575&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/MengRao/fmtlog&#34;&gt;fmtlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;711&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;730&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;754&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;770&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;804&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;834&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/gabime/spdlog&#34;&gt;spdlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6191&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6261&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6330&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6386&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6633&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7320&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/odygrd/quill/master/docs%2Fcharts%2Fvector_1_thread_logging.webp&#34; alt=&#34;vector_1_thread_logging.webp&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;4 Threads Logging Simultaneously&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;50th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;75th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;90th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;95th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;99th&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;99.9th&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/odygrd/quill&#34;&gt;Quill Bounded Dropping Queue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;52&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;54&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;56&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;60&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;82&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/Morgan-Stanley/binlog&#34;&gt;MS BinLog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;70&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;72&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;75&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;79&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;88&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;286&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/odygrd/quill&#34;&gt;Quill Unbounded Queue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;97&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;107&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;116&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;122&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;135&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;148&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/choll/xtr&#34;&gt;XTR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;512&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;711&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;761&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;791&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;865&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;945&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/MengRao/fmtlog&#34;&gt;fmtlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;780&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;804&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;823&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;835&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;860&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;896&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/gabime/spdlog&#34;&gt;spdlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6469&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6549&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6641&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6735&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7631&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9430&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/odygrd/quill/master/docs%2Fcharts%2Fvector_4_thread_logging.webp&#34; alt=&#34;vector_4_thread_logging.webp&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The benchmark methodology involves logging 20 messages in a loop, calculating and storing the average latency for those 20 messages, then waiting around ~2 milliseconds, and repeating this process for a specified number of iterations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;In the &lt;code&gt;Quill Bounded Dropping&lt;/code&gt; benchmarks, the dropping queue size is set to &lt;code&gt;262,144&lt;/code&gt; bytes, which is double the default size of &lt;code&gt;131,072&lt;/code&gt; bytes.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Throughput&lt;/h3&gt; &#xA;&lt;p&gt;Throughput is measured by calculating the maximum number of log messages the backend logging thread can write to a log file per second.&lt;/p&gt; &#xA;&lt;p&gt;The tests were run on the same system used for the latency benchmarks.&lt;/p&gt; &#xA;&lt;p&gt;Although Quill‚Äôs primary focus is not on maximizing throughput, it efficiently manages log messages across multiple threads. Benchmarking throughput of asynchronous logging libraries presents certain challenges. Some libraries may drop log messages, leading to smaller-than-expected log files, while others only provide asynchronous flushing, making it difficult to verify when the backend thread has fully processed all messages.&lt;/p&gt; &#xA;&lt;p&gt;For comparison, we benchmark against other asynchronous logging libraries that offer guaranteed logging with a flush-and-wait mechanism.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;MS BinLog&lt;/code&gt; writes log data to a binary file, which requires offline formatting with an additional program‚Äîthis makes it an unfair comparison, but it is included for reference.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, &lt;code&gt;Platformlab Nanolog&lt;/code&gt; also outputs binary logs and is expected to deliver high throughput. However, for reasons unexplained, the benchmark runs significantly slower (10x longer) than the other libraries, so it is excluded from the table.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;million msg/second&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;elapsed time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/Morgan-Stanley/binlog&#34;&gt;MS BinLog (binary log)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;64.98&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;61 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/odygrd/quill&#34;&gt;Quill&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.65&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;859 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/gabime/spdlog&#34;&gt;spdlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.53&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1131 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/MengRao/fmtlog&#34;&gt;fmtlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.83&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1411 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/mattiasflodin/reckless&#34;&gt;Reckless&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.74&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1459 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/choll/xtr&#34;&gt;XTR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.60&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1537 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/odygrd/quill/master/docs%2Fcharts%2Fthroughput_chart.webp&#34; alt=&#34;throughput_chart.webp&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Compilation Time&lt;/h3&gt; &#xA;&lt;p&gt;Compile times are measured using &lt;code&gt;clang 15&lt;/code&gt; and for &lt;code&gt;Release&lt;/code&gt; build.&lt;/p&gt; &#xA;&lt;p&gt;Below, you can find the additional headers that the library will include when you need to log, following the &lt;a href=&#34;https://github.com/odygrd/quill/raw/master/examples/recommended_usage/recommended_usage.cpp&#34;&gt;recommended_usage&lt;/a&gt; example&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/odygrd/quill/master/docs%2Fquill_v5_1_compiler_profile.speedscope.png&#34; alt=&#34;quill_v5_1_compiler_profile.speedscope.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is also a compile-time benchmark measuring the compilation time of 2000 auto-generated log statements with various arguments. You can find it &lt;a href=&#34;https://github.com/odygrd/quill/raw/master/benchmarks/compile_time/compile_time_bench.cpp&#34;&gt;here&lt;/a&gt;. It takes approximately 30 seconds to compile.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/odygrd/quill/master/docs%2Fquill_v5_1_compiler_bench.speedscope.png&#34; alt=&#34;quill_v5_1_compiler_bench.speedscope.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Verdict&lt;/h3&gt; &#xA;&lt;p&gt;Quill excels in hot path latency benchmarks and supports high throughput, offering a rich set of features that outshines other logging libraries.&lt;/p&gt; &#xA;&lt;p&gt;The human-readable log files facilitate easier debugging and analysis. While initially larger, they compress efficiently, with the size difference between human-readable and binary logs becoming minimal once zipped.&lt;/p&gt; &#xA;&lt;p&gt;For example, for the same amount of messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ms_binlog_backend_total_time.blog (binary log): 177 MB&#xA;ms_binlog_backend_total_time.zip (zipped binary log): 35 MB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;quill_backend_total_time.log (human-readable log): 448 MB&#xA;quill_backend_total_time.zip (zipped human-readable log): 47 MB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If Quill were not available, MS BinLog would be a strong alternative. It delivers great latency on the hot path and generates smaller binary log files. However, the binary logs necessitate offline processing with additional tools, which can be less convenient.&lt;/p&gt; &#xA;&lt;h2&gt;üß© Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;quill/Backend.h&#34;&#xA;#include &#34;quill/Frontend.h&#34;&#xA;#include &#34;quill/LogMacros.h&#34;&#xA;#include &#34;quill/Logger.h&#34;&#xA;#include &#34;quill/sinks/ConsoleSink.h&#34;&#xA;#include &#34;quill/std/Array.h&#34;&#xA;&#xA;#include &amp;lt;string&amp;gt;&#xA;#include &amp;lt;utility&amp;gt;&#xA;&#xA;int main()&#xA;{&#xA;  // Backend  &#xA;  quill::BackendOptions backend_options;&#xA;  quill::Backend::start(backend_options);&#xA;&#xA;  // Frontend&#xA;  auto console_sink = quill::Frontend::create_or_get_sink&amp;lt;quill::ConsoleSink&amp;gt;(&#34;sink_id_1&#34;);&#xA;  quill::Logger* logger = quill::Frontend::create_or_get_logger(&#34;root&#34;, std::move(console_sink));&#xA;&#xA;  // Change the LogLevel to print everything&#xA;  logger-&amp;gt;set_log_level(quill::LogLevel::TraceL3);&#xA;&#xA;  // A log message with number 123&#xA;  int a = 123;&#xA;  std::string l = &#34;log&#34;;&#xA;  LOG_INFO(logger, &#34;A {} message with number {}&#34;, l, a);&#xA;&#xA;  // libfmt formatting language is supported 3.14e+00&#xA;  double pi = 3.141592653589793;&#xA;  LOG_INFO(logger, &#34;libfmt formatting language is supported {:.2e}&#34;, pi);&#xA;&#xA;  // Logging STD types is supported [1, 2, 3]&#xA;  std::array&amp;lt;int, 3&amp;gt; arr = {1, 2, 3};&#xA;  LOG_INFO(logger, &#34;Logging STD types is supported {}&#34;, arr);&#xA;&#xA;  // Logging STD types is supported [arr: [1, 2, 3]]&#xA;  LOGV_INFO(logger, &#34;Logging STD types is supported&#34;, arr);&#xA;&#xA;  // A message with two variables [a: 123, b: 3.17]&#xA;  double b = 3.17;&#xA;  LOGV_INFO(logger, &#34;A message with two variables&#34;, a, b);&#xA;&#xA;  for (uint32_t i = 0; i &amp;lt; 10; ++i)&#xA;  {&#xA;    // Will only log the message once per second&#xA;    LOG_INFO_LIMIT(std::chrono::seconds{1}, logger, &#34;A {} message with number {}&#34;, l, a);&#xA;    LOGV_INFO_LIMIT(std::chrono::seconds{1}, logger, &#34;A message with two variables&#34;, a, b);&#xA;  }&#xA;&#xA;  LOG_TRACE_L3(logger, &#34;Support for floats {:03.2f}&#34;, 1.23456);&#xA;  LOG_TRACE_L2(logger, &#34;Positional arguments are {1} {0} &#34;, &#34;too&#34;, &#34;supported&#34;);&#xA;  LOG_TRACE_L1(logger, &#34;{:&amp;gt;30}&#34;, std::string_view {&#34;right aligned&#34;});&#xA;  LOG_DEBUG(logger, &#34;Debugging foo {}&#34;, 1234);&#xA;  LOG_INFO(logger, &#34;Welcome to Quill!&#34;);&#xA;  LOG_WARNING(logger, &#34;A warning message.&#34;);&#xA;  LOG_ERROR(logger, &#34;An error message. error code {}&#34;, 123);&#xA;  LOG_CRITICAL(logger, &#34;A critical error.&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Output&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/odygrd/quill/master/docs%2Fexample_output.png&#34; alt=&#34;example_output.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;External CMake&lt;/h3&gt; &#xA;&lt;h4&gt;Building and Installing Quill&lt;/h4&gt; &#xA;&lt;p&gt;To get started with Quill, clone the repository and install it using CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone http://github.com/odygrd/quill.git&#xA;mkdir cmake_build&#xA;cd cmake_build&#xA;cmake ..&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom Installation&lt;/strong&gt;: Specify a custom directory with &lt;code&gt;-DCMAKE_INSTALL_PREFIX=/path/to/install/dir&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build Examples&lt;/strong&gt;: Include examples with &lt;code&gt;-DQUILL_BUILD_EXAMPLES=ON&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next, add Quill to your project using &lt;code&gt;find_package()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;find_package(quill REQUIRED)&#xA;target_link_libraries(your_target PUBLIC quill::quill)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample Directory Structure&lt;/h4&gt; &#xA;&lt;p&gt;Organize your project directory like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my_project/&#xA;‚îú‚îÄ‚îÄ CMakeLists.txt&#xA;‚îú‚îÄ‚îÄ main.cpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample CMakeLists.txt&lt;/h4&gt; &#xA;&lt;p&gt;Here‚Äôs a sample &lt;code&gt;CMakeLists.txt&lt;/code&gt; to get you started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;# If Quill is in a non-standard directory, specify its path.&#xA;set(CMAKE_PREFIX_PATH /path/to/quill)&#xA;&#xA;# Find and link the Quill library.&#xA;find_package(quill REQUIRED)&#xA;add_executable(example main.cpp)&#xA;target_link_libraries(example PUBLIC quill::quill)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Embedded CMake&lt;/h3&gt; &#xA;&lt;p&gt;For a more integrated approach, embed Quill directly into your project:&lt;/p&gt; &#xA;&lt;h4&gt;Sample Directory Structure&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;my_project/&#xA;‚îú‚îÄ‚îÄ quill/            # Quill repo folder&#xA;‚îú‚îÄ‚îÄ CMakeLists.txt&#xA;‚îú‚îÄ‚îÄ main.cpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample CMakeLists.txt&lt;/h4&gt; &#xA;&lt;p&gt;Use this &lt;code&gt;CMakeLists.txt&lt;/code&gt; to include Quill directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;cmake_minimum_required(VERSION 3.1.0)&#xA;project(my_project)&#xA;&#xA;set(CMAKE_CXX_STANDARD 17)&#xA;set(CMAKE_CXX_STANDARD_REQUIRED ON)&#xA;&#xA;add_subdirectory(quill)&#xA;add_executable(my_project main.cpp)&#xA;target_link_libraries(my_project PUBLIC quill::quill)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android NDK&lt;/h3&gt; &#xA;&lt;p&gt;Building Quill for Android? Add this flag during configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-DQUILL_NO_THREAD_NAME_SUPPORT:BOOL=ON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Meson&lt;/h3&gt; &#xA;&lt;h4&gt;Using WrapDB&lt;/h4&gt; &#xA;&lt;p&gt;Easily integrate Quill with Meson‚Äôs &lt;code&gt;wrapdb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;meson wrap install quill&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manual Integration&lt;/h4&gt; &#xA;&lt;p&gt;Copy the repository contents to your &lt;code&gt;subprojects&lt;/code&gt; directory and add the following to your &lt;code&gt;meson.build&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-meson&#34;&gt;quill = subproject(&#39;quill&#39;)&#xA;quill_dep = quill.get_variable(&#39;quill_dep&#39;)&#xA;my_build_target = executable(&#39;name&#39;, &#39;main.cpp&#39;, dependencies : [quill_dep], install : true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;h4&gt;Using Blzmod&lt;/h4&gt; &#xA;&lt;p&gt;Quill is available on &lt;code&gt;BLZMOD&lt;/code&gt; for easy integration.&lt;/p&gt; &#xA;&lt;h4&gt;Manual Integration&lt;/h4&gt; &#xA;&lt;p&gt;For manual setup, add Quill to your &lt;code&gt;BUILD.bazel&lt;/code&gt; file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bazel&#34;&gt;cc_binary(name = &#34;app&#34;, srcs = [&#34;main.cpp&#34;], deps = [&#34;//quill_path:quill&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìê Design&lt;/h2&gt; &#xA;&lt;h3&gt;Frontend (caller-thread)&lt;/h3&gt; &#xA;&lt;p&gt;When invoking a &lt;code&gt;LOG_&lt;/code&gt; macro:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Creates a static constexpr metadata object to store &lt;code&gt;Metadata&lt;/code&gt; such as the format string and source location.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pushes the data SPSC lock-free queue. For each log message, the following variables are pushed&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;timestamp&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Current timestamp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metadata*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Pointer to metadata information&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logger*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Pointer to the logger instance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DecodeFunc&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;A pointer to a templated function containing all the log message argument types, used for decoding the message&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Args...&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;A serialized binary copy of each log message argument that was passed to the &lt;code&gt;LOG_&lt;/code&gt; macro&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Backend&lt;/h3&gt; &#xA;&lt;p&gt;Consumes each message from the SPSC queue, retrieves all the necessary information and then formats the message. Subsequently, forwards the log message to all Sinks associated with the Logger.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/odygrd/quill/master/docs%2Fdesign.jpg&#34; alt=&#34;design.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üö® Caveats&lt;/h2&gt; &#xA;&lt;p&gt;Quill may not work well with &lt;code&gt;fork()&lt;/code&gt; since it spawns a background thread and &lt;code&gt;fork()&lt;/code&gt; doesn&#39;t work well with multithreading.&lt;/p&gt; &#xA;&lt;p&gt;If your application uses &lt;code&gt;fork()&lt;/code&gt; and you want to log in the child processes as well, you should call &lt;code&gt;quill::start()&lt;/code&gt; after the &lt;code&gt;fork()&lt;/code&gt; call. Additionally, you should ensure that you write to different files in the parent and child processes to avoid conflicts.&lt;/p&gt; &#xA;&lt;p&gt;For example :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;quill/Backend.h&#34;&#xA;#include &#34;quill/Frontend.h&#34;&#xA;#include &#34;quill/LogMacros.h&#34;&#xA;#include &#34;quill/Logger.h&#34;&#xA;#include &#34;quill/sinks/FileSink.h&#34;&#xA;&#xA;int main()&#xA;{&#xA;  // DO NOT CALL THIS BEFORE FORK&#xA;  // quill::Backend::start();&#xA;&#xA;  if (fork() == 0)&#xA;  {&#xA;    quill::Backend::start();&#xA;        &#xA;    // Get or create a handler to the file - Write to a different file&#xA;    auto file_sink = quill::Frontend::create_or_get_sink&amp;lt;quill::FileSink&amp;gt;(&#xA;      &#34;child.log&#34;);&#xA;    &#xA;    quill::Logger* logger = quill::Frontend::create_or_get_logger(&#34;root&#34;, std::move(file_sink));&#xA;&#xA;    QUILL_LOG_INFO(logger, &#34;Hello from Child {}&#34;, 123);&#xA;  }&#xA;  else&#xA;  {&#xA;    quill::Backend::start();&#xA;          &#xA;    // Get or create a handler to the file - Write to a different file&#xA;    auto file_sink = quill::Frontend::create_or_get_sink&amp;lt;quill::FileSink&amp;gt;(&#xA;      &#34;parent.log&#34;);&#xA;    &#xA;    quill::Logger* logger = quill::Frontend::create_or_get_logger(&#34;root&#34;, std::move(file_sink));&#xA;    &#xA;    QUILL_LOG_INFO(logger, &#34;Hello from Parent {}&#34;, 123);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìù License&lt;/h2&gt; &#xA;&lt;p&gt;Quill is licensed under the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Quill depends on third party libraries with separate copyright notices and license terms. Your use of the source code for these subcomponents is subject to the terms and conditions of the following licenses.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(&lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;) &lt;a href=&#34;http://github.com/fmtlib/fmt/blob/master/LICENSE.rst&#34;&gt;{fmt}&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(&lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;) &lt;a href=&#34;http://github.com/onqtam/doctest/blob/master/LICENSE.txt&#34;&gt;doctest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>swiftlang/swift</title>
    <updated>2024-09-15T01:42:00Z</updated>
    <id>tag:github.com,2024-09-15:/swiftlang/swift</id>
    <link href="https://github.com/swiftlang/swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Swift Programming Language&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://www.swift.org/assets/images/swift~dark.svg&#34;&gt; &#xA; &lt;img src=&#34;https://www.swift.org/assets/images/swift.svg?sanitize=true&#34; alt=&#34;Swift logo&#34; height=&#34;70&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;h1&gt;Swift Programming Language&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Architecture&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Build&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86_64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-macos&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-macos/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Ubuntu 20.04&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86_64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-20_04&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-20_04/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Ubuntu 20.04&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;AArch64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-20_04-aarch64&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-20_04-aarch64/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Ubuntu 22.04&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86_64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-22_04&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-22_04/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Ubuntu 22.04&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;AArch64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-22_04-aarch64&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-22_04-aarch64/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Ubuntu 24.04&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86_64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-24_04&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-24_04/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Ubuntu 24.04&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;AArch64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-24_04-aarch64&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-24_04-aarch64/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Amazon Linux 2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86_64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-amazon-linux-2&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-amazon-linux-2/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Amazon Linux 2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;AArch64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-amazon-linux-2-aarch64&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-amazon-linux-2-aarch64/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Universal Base Image 9&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86_64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-ubi-9&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-ubi-9/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Debian 12&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86_64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-debian-12&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-debian-12/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Debian 12&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;AArch64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-debian-12-aarch64&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-debian-12-aarch64/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Fedora 39&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86_64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-fedora-39&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-fedora-39/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Fedora 39&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;AArch64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-fedora-39-aarch64&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-fedora-39-aarch64/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Windows 10&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86_64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci-external.swift.org/job/swift-main-windows-toolchain&#34;&gt;&lt;img src=&#34;https://ci-external.swift.org/job/swift-main-windows-toolchain/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Windows 10&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ARM64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci-external.swift.org/job/swift-main-windows-toolchain-arm64&#34;&gt;&lt;img src=&#34;https://ci-external.swift.org/job/swift-main-windows-toolchain-arm64/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cross-Compilation Targets&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Target&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Build&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;wasm32-unknown-wasi&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-pr-test-crosscompile-wasm-ubuntu-20_04&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-pr-test-crosscompile-wasm-ubuntu-20_04/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift Community-Hosted CI Platforms&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;OS&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Architecture&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Build&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/apple/swift-community-hosted-continuous-integration/raw/main/nodes/x86_64_ubuntu_16_04_LTS_android.json&#34;&gt;Android&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ARMv7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci-external.swift.org/job/oss-swift-RA-linux-ubuntu-16.04-android&#34;&gt;&lt;img src=&#34;https://ci-external.swift.org/job/oss-swift-RA-linux-ubuntu-16.04-android/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/apple/swift-community-hosted-continuous-integration/raw/main/nodes/x86_64_ubuntu_16_04_LTS_android.json&#34;&gt;Android&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;AArch64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci-external.swift.org/job/oss-swift-RA-linux-ubuntu-16.04-android-arm64&#34;&gt;&lt;img src=&#34;https://ci-external.swift.org/job/oss-swift-RA-linux-ubuntu-16.04-android-arm64/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/apple/swift-community-hosted-continuous-integration/raw/main/nodes/x86_64_windows_2019_VS2019.json&#34;&gt;Windows 2019 (VS 2019)&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86_64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci-external.swift.org/job/oss-swift-windows-x86_64-vs2019&#34;&gt;&lt;img src=&#34;https://ci-external.swift.org/job/oss-swift-windows-x86_64-vs2019/lastCompletedBuild/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Welcome to Swift&lt;/h2&gt; &#xA;&lt;p&gt;Swift is a high-performance system programming language. It has a clean and modern syntax, offers seamless access to existing C and Objective-C code and frameworks, and is memory-safe by default.&lt;/p&gt; &#xA;&lt;p&gt;Although inspired by Objective-C and many other languages, Swift is not itself a C-derived language. As a complete and independent language, Swift packages core features like flow control, data structures, and functions, with high-level constructs like objects, protocols, closures, and generics. Swift embraces modules, eliminating the need for headers and the code duplication they entail.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about the programming language, visit &lt;a href=&#34;https://swift.org/documentation/&#34;&gt;swift.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/#contributing-to-swift&#34;&gt;Contributing to Swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/#swift-toolchains&#34;&gt;Swift Toolchains&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/#build-failures&#34;&gt;Build Failures&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/#learning-more&#34;&gt;Learning More&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to Swift&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to Swift are welcomed and encouraged! Please see the &lt;a href=&#34;https://swift.org/contributing/&#34;&gt;Contributing to Swift guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before submitting the pull request, please make sure you have &lt;a href=&#34;https://github.com/apple/swift/raw/main/docs/ContinuousIntegration.md&#34;&gt;tested your changes&lt;/a&gt; and that they follow the Swift project &lt;a href=&#34;https://swift.org/contributing/#contributing-code&#34;&gt;guidelines for contributing code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To be a truly great community, &lt;a href=&#34;https://swift.org/&#34;&gt;Swift.org&lt;/a&gt; needs to welcome developers from all walks of life, with different backgrounds, and with a wide range of experience. A diverse and friendly community will have more great ideas, more unique perspectives, and produce more great code. We will work diligently to make the Swift community welcoming to everyone.&lt;/p&gt; &#xA;&lt;p&gt;To give clarity of what is expected of our members, Swift has adopted the code of conduct defined by the Contributor Covenant. This document is used across many open source communities, and we think it articulates our values well. For more, see the &lt;a href=&#34;https://swift.org/code-of-conduct/&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributing fixes and features to the compiler: See our &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/HowToGuides/FirstPullRequest.md&#34;&gt;How to Submit Your First Pull Request guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Building the compiler as a one-off: See our &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/HowToGuides/GettingStarted.md&#34;&gt;Getting Started guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Building a toolchain as a one-off: Follow the &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/HowToGuides/GettingStarted.md&#34;&gt;Getting Started guide&lt;/a&gt; up until the &#34;Building the project&#34; section. After that, follow the instructions in the &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/#swift-toolchains&#34;&gt;Swift Toolchains&lt;/a&gt; section below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also have an &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/HowToGuides/FAQ.md&#34;&gt;FAQ&lt;/a&gt; that answers common questions.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Toolchains&lt;/h3&gt; &#xA;&lt;h4&gt;Building&lt;/h4&gt; &#xA;&lt;p&gt;Swift toolchains are created using the script &lt;a href=&#34;https://github.com/apple/swift/raw/main/utils/build-toolchain&#34;&gt;build-toolchain&lt;/a&gt;. This script is used by swift.org&#39;s CI to produce snapshots and can allow for one to locally reproduce such builds for development or distribution purposes. A typical invocation looks like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  $ ./swift/utils/build-toolchain $BUNDLE_PREFIX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;$BUNDLE_PREFIX&lt;/code&gt; is a string that will be prepended to the build date to give the bundle identifier of the toolchain&#39;s &lt;code&gt;Info.plist&lt;/code&gt;. For instance, if &lt;code&gt;$BUNDLE_PREFIX&lt;/code&gt; was &lt;code&gt;com.example&lt;/code&gt;, the toolchain produced will have the bundle identifier &lt;code&gt;com.example.YYYYMMDD&lt;/code&gt;. It will be created in the directory you run the script with a filename of the form: &lt;code&gt;swift-LOCAL-YYYY-MM-DD-a-osx.tar.gz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Beyond building the toolchain, &lt;code&gt;build-toolchain&lt;/code&gt; also supports the following (non-exhaustive) set of useful options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--dry-run&lt;/code&gt;: Perform a dry run build. This is off by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--test&lt;/code&gt;: Test the toolchain after it has been compiled. This is off by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--distcc&lt;/code&gt;: Use distcc to speed up the build by distributing the C++ part of the swift build. This is off by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--sccache&lt;/code&gt;: Use sccache to speed up subsequent builds of the compiler by caching more C++ build artifacts. This is off by default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More options may be added over time. Please pass &lt;code&gt;--help&lt;/code&gt; to &lt;code&gt;build-toolchain&lt;/code&gt; to see the full set of options.&lt;/p&gt; &#xA;&lt;h4&gt;Installing into Xcode&lt;/h4&gt; &#xA;&lt;p&gt;On macOS if one wants to install such a toolchain into Xcode:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Untar and copy the toolchain to one of &lt;code&gt;/Library/Developer/Toolchains/&lt;/code&gt; or &lt;code&gt;~/Library/Developer/Toolchains/&lt;/code&gt;. E.g.:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  $ sudo tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx.tar.gz -C /&#xA;  $ tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx.tar.gz -C ~/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script also generates an archive containing debug symbols which can be installed over the main archive allowing symbolication of any compiler crashes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  $ sudo tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx-symbols.tar.gz -C /&#xA;  $ tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx-symbols.tar.gz -C ~/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Specify the local toolchain for Xcode&#39;s use via &lt;code&gt;Xcode-&amp;gt;Toolchains&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build Failures&lt;/h3&gt; &#xA;&lt;p&gt;Try the suggestions in &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/HowToGuides/GettingStarted.md#troubleshooting-build-issues&#34;&gt;Troubleshooting build issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you are using the &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/HowToGuides/GettingStarted.md#installing-dependencies&#34;&gt;correct release&lt;/a&gt; of Xcode.&lt;/p&gt; &#xA;&lt;p&gt;If you have changed Xcode versions but still encounter errors that appear to be related to the Xcode version, try passing &lt;code&gt;--clean&lt;/code&gt; to &lt;code&gt;build-script&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When a new version of Xcode is released, you can update your build without recompiling the entire project by passing &lt;code&gt;--reconfigure&lt;/code&gt; to &lt;code&gt;build-script&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Learning More&lt;/h2&gt; &#xA;&lt;p&gt;Be sure to look at the &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/README.md&#34;&gt;documentation index&lt;/a&gt; for a bird&#39;s eye view of the available documentation. In particular, the documents titled &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/DebuggingTheCompiler.md&#34;&gt;Debugging the Swift Compiler&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/ContinuousIntegration.md&#34;&gt;Continuous Integration for Swift&lt;/a&gt; are very helpful to understand before submitting your first PR.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>official-stockfish/Stockfish</title>
    <updated>2024-09-15T01:42:00Z</updated>
    <id>tag:github.com,2024-09-15:/official-stockfish/Stockfish</id>
    <link href="https://github.com/official-stockfish/Stockfish" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A free and strong UCI chess engine&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://stockfishchess.org&#34;&gt;&lt;img src=&#34;https://stockfishchess.org/images/logo/icon_128x128.png&#34; alt=&#34;Stockfish&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h3&gt;Stockfish&lt;/h3&gt; &#xA; &lt;p&gt;A free and strong UCI chess engine. &lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/official-stockfish/Stockfish/wiki&#34;&gt;Explore Stockfish docs ¬ª&lt;/a&gt;&lt;/strong&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/official-stockfish/Stockfish/issues/new?assignees=&amp;amp;labels=&amp;amp;template=BUG-REPORT.yml&#34;&gt;Report bug&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/official-stockfish/Stockfish/discussions/new&#34;&gt;Open a discussion&lt;/a&gt; ¬∑ &lt;a href=&#34;https://discord.gg/GWDRS3kU6R&#34;&gt;Discord&lt;/a&gt; ¬∑ &lt;a href=&#34;https://stockfishchess.org/blog/&#34;&gt;Blog&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/official-stockfish/Stockfish/actions/workflows/stockfish.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/official-stockfish/Stockfish/stockfish.yml?branch=master&amp;amp;style=for-the-badge&amp;amp;label=stockfish&amp;amp;logo=github&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/official-stockfish/Stockfish/raw/master/Copying.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/official-stockfish/Stockfish?style=for-the-badge&amp;amp;label=license&amp;amp;color=success&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/official-stockfish/Stockfish/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/official-stockfish/Stockfish?style=for-the-badge&amp;amp;label=official%20release&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/official-stockfish/Stockfish/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commits-since/official-stockfish/Stockfish/latest?style=for-the-badge&#34; alt=&#34;Commits&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://stockfishchess.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/website?style=for-the-badge&amp;amp;down_color=red&amp;amp;down_message=Offline&amp;amp;label=website&amp;amp;up_color=success&amp;amp;up_message=Online&amp;amp;url=https%3A%2F%2Fstockfishchess.org&#34; alt=&#34;Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tests.stockfishchess.org/tests&#34;&gt;&lt;img src=&#34;https://img.shields.io/website?style=for-the-badge&amp;amp;down_color=red&amp;amp;down_message=Offline&amp;amp;label=Fishtest&amp;amp;up_color=success&amp;amp;up_message=Online&amp;amp;url=https%3A%2F%2Ftests.stockfishchess.org%2Ftests%2Ffinished&#34; alt=&#34;Fishtest&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/GWDRS3kU6R&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/435943710472011776?style=for-the-badge&amp;amp;label=discord&amp;amp;logo=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stockfishchess.org&#34;&gt;Stockfish&lt;/a&gt; is a &lt;strong&gt;free and strong UCI chess engine&lt;/strong&gt; derived from Glaurung 2.1 that analyzes chess positions and computes the optimal moves.&lt;/p&gt; &#xA;&lt;p&gt;Stockfish &lt;strong&gt;does not include a graphical user interface&lt;/strong&gt; (GUI) that is required to display a chessboard and to make it easy to input moves. These GUIs are developed independently from Stockfish and are available online. &lt;strong&gt;Read the documentation for your GUI&lt;/strong&gt; of choice for information about how to use Stockfish with it.&lt;/p&gt; &#xA;&lt;p&gt;See also the Stockfish &lt;a href=&#34;https://github.com/official-stockfish/Stockfish/wiki/Download-and-usage&#34;&gt;documentation&lt;/a&gt; for further usage help.&lt;/p&gt; &#xA;&lt;h2&gt;Files&lt;/h2&gt; &#xA;&lt;p&gt;This distribution of Stockfish consists of the following files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/official-stockfish/Stockfish/raw/master/README.md&#34;&gt;README.md&lt;/a&gt;, the file you are currently reading.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/official-stockfish/Stockfish/raw/master/Copying.txt&#34;&gt;Copying.txt&lt;/a&gt;, a text file containing the GNU General Public License version 3.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/official-stockfish/Stockfish/raw/master/AUTHORS&#34;&gt;AUTHORS&lt;/a&gt;, a text file with the list of authors for the project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/official-stockfish/Stockfish/tree/master/src&#34;&gt;src&lt;/a&gt;, a subdirectory containing the full source code, including a Makefile that can be used to compile Stockfish on Unix-like systems.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;a file with the .nnue extension, storing the neural network for the NNUE evaluation. Binary distributions will have this file embedded.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/official-stockfish/Stockfish/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Donating hardware&lt;/h3&gt; &#xA;&lt;p&gt;Improving Stockfish requires a massive amount of testing. You can donate your hardware resources by installing the &lt;a href=&#34;https://github.com/official-stockfish/fishtest/wiki/Running-the-worker&#34;&gt;Fishtest Worker&lt;/a&gt; and viewing the current tests on &lt;a href=&#34;https://tests.stockfishchess.org/tests&#34;&gt;Fishtest&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Improving the code&lt;/h3&gt; &#xA;&lt;p&gt;In the &lt;a href=&#34;https://www.chessprogramming.org/Main_Page&#34;&gt;chessprogramming wiki&lt;/a&gt;, many techniques used in Stockfish are explained with a lot of background information. The &lt;a href=&#34;https://www.chessprogramming.org/Stockfish&#34;&gt;section on Stockfish&lt;/a&gt; describes many features and techniques used by Stockfish. However, it is generic rather than focused on Stockfish&#39;s precise implementation.&lt;/p&gt; &#xA;&lt;p&gt;The engine testing is done on &lt;a href=&#34;https://tests.stockfishchess.org/tests&#34;&gt;Fishtest&lt;/a&gt;. If you want to help improve Stockfish, please read this &lt;a href=&#34;https://github.com/official-stockfish/fishtest/wiki/Creating-my-first-test&#34;&gt;guideline&lt;/a&gt; first, where the basics of Stockfish development are explained.&lt;/p&gt; &#xA;&lt;p&gt;Discussions about Stockfish take place these days mainly in the Stockfish &lt;a href=&#34;https://discord.gg/GWDRS3kU6R&#34;&gt;Discord server&lt;/a&gt;. This is also the best place to ask questions about the codebase and how to improve it.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling Stockfish&lt;/h2&gt; &#xA;&lt;p&gt;Stockfish has support for 32 or 64-bit CPUs, certain hardware instructions, big-endian machines such as Power PC, and other platforms.&lt;/p&gt; &#xA;&lt;p&gt;On Unix-like systems, it should be easy to compile Stockfish directly from the source code with the included Makefile in the folder &lt;code&gt;src&lt;/code&gt;. In general, it is recommended to run &lt;code&gt;make help&lt;/code&gt; to see a list of make targets with corresponding descriptions. An example suitable for most Intel and AMD chips:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src&#xA;make -j profile-build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detailed compilation instructions for all platforms can be found in our &lt;a href=&#34;https://github.com/official-stockfish/Stockfish/wiki/Compiling-from-source&#34;&gt;documentation&lt;/a&gt;. Our wiki also has information about the &lt;a href=&#34;https://github.com/official-stockfish/Stockfish/wiki/UCI-&amp;amp;-Commands&#34;&gt;UCI commands&lt;/a&gt; supported by Stockfish.&lt;/p&gt; &#xA;&lt;h2&gt;Terms of use&lt;/h2&gt; &#xA;&lt;p&gt;Stockfish is free and distributed under the &lt;a href=&#34;https://github.com/official-stockfish/Stockfish/raw/master/Copying.txt&#34;&gt;&lt;strong&gt;GNU General Public License version 3&lt;/strong&gt;&lt;/a&gt; (GPL v3). Essentially, this means you are free to do almost exactly what you want with the program, including distributing it among your friends, making it available for download from your website, selling it (either by itself or as part of some bigger software package), or using it as the starting point for a software project of your own.&lt;/p&gt; &#xA;&lt;p&gt;The only real limitation is that whenever you distribute Stockfish in some way, you MUST always include the license and the full source code (or a pointer to where the source code can be found) to generate the exact binary you are distributing. If you make any changes to the source code, these changes must also be made available under GPL v3.&lt;/p&gt;</summary>
  </entry>
</feed>