<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-01T02:09:37Z</updated>
  <subtitle>Monthly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yuzu-emu/yuzu</title>
    <updated>2023-06-01T02:09:37Z</updated>
    <id>tag:github.com,2023-06-01:/yuzu-emu/yuzu</id>
    <link href="https://github.com/yuzu-emu/yuzu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nintendo Switch Emulator&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://yuzu-emu.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-assets/master/icons/icon.png&#34; alt=&#34;yuzu&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;b&gt;yuzu&lt;/b&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;&lt;b&gt;yuzu&lt;/b&gt; is the world&#39;s most popular, open-source, Nintendo Switch emulator — started by the creators of &lt;a href=&#34;https://citra-emu.org&#34; target=&#34;_blank&#34;&gt;Citra&lt;/a&gt;. &lt;br&gt; It is written in C++ with portability in mind, and we actively maintain builds for Windows and Linux. &lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://dev.azure.com/yuzu-emu/yuzu/&#34;&gt; &lt;img src=&#34;https://dev.azure.com/yuzu-emu/yuzu/_apis/build/status/yuzu%20mainline?branchName=master&#34; alt=&#34;Azure Mainline CI Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/u77vRWY&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/398318088170242053?color=5865F2&amp;amp;label=yuzu&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu/master/#compatibility&#34;&gt;Compatibility&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu/master/#development&#34;&gt;Development&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu/master/#building&#34;&gt;Building&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu/master/#download&#34;&gt;Download&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu/master/#support&#34;&gt;Support&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu/master/#license&#34;&gt;License&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;The emulator is capable of running most commercial games at full speed, provided you meet the &lt;a href=&#34;https://yuzu-emu.org/help/quickstart/#hardware-requirements&#34;&gt;necessary hardware requirements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a full list of games yuzu support, please visit our &lt;a href=&#34;https://yuzu-emu.org/game/&#34;&gt;Compatibility page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://yuzu-emu.org/&#34;&gt;website&lt;/a&gt; for the latest news on exciting features, monthly progress reports, and more!&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Most of the development happens on GitHub. It&#39;s also where &lt;a href=&#34;https://github.com/yuzu-emu/yuzu&#34;&gt;our central repository&lt;/a&gt; is hosted. For development discussion, please join us on &lt;a href=&#34;https://discord.com/invite/u77vRWY&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute, please take a look at the &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/wiki/Contributing&#34;&gt;Contributor&#39;s Guide&lt;/a&gt; and &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/wiki/Developer-Information&#34;&gt;Developer Information&lt;/a&gt;. You can also contact any of the developers on Discord in order to know about the current state of the emulator.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute to the user interface translation project, please check out the &lt;a href=&#34;https://www.transifex.com/yuzu-emulator/yuzu&#34;&gt;yuzu project on transifex&lt;/a&gt;. We centralize translation work there, and periodically upstream translations.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/wiki/Building-For-Windows&#34;&gt;Windows Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/wiki/Building-For-Linux&#34;&gt;Linux Build&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download the latest releases automatically via the installer on our &lt;a href=&#34;https://yuzu-emu.org/downloads/&#34;&gt;downloads&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you enjoy the project and want to support us financially, check out our Patreon!&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.patreon.com/yuzuteam&#34;&gt; &lt;img src=&#34;https://c5.patreon.com/external/logo/become_a_patron_button@2x.png&#34; width=&#34;160&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Any donations received will go towards things like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Switch consoles to explore and reverse-engineer the hardware&lt;/li&gt; &#xA; &lt;li&gt;Switch games for testing, reverse-engineering, and implementing new features&lt;/li&gt; &#xA; &lt;li&gt;Web hosting and infrastructure setup&lt;/li&gt; &#xA; &lt;li&gt;Software licenses (e.g. Visual Studio, IDA Pro, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Additional hardware (e.g. GPUs as-needed to improve rendering support, other peripherals to add support for, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you wish to support us a different way, please join our &lt;a href=&#34;https://discord.gg/u77vRWY&#34;&gt;Discord&lt;/a&gt; and talk to bunnei. You may also contact: &lt;a href=&#34;mailto:donations@yuzu-emu.org&#34;&gt;donations@yuzu-emu.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;yuzu is licensed under the GPLv3 (or any later version). Refer to the &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/raw/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dolphin-emu/dolphin</title>
    <updated>2023-06-01T02:09:37Z</updated>
    <id>tag:github.com,2023-06-01:/dolphin-emu/dolphin</id>
    <link href="https://github.com/dolphin-emu/dolphin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dolphin is a GameCube / Wii emulator, allowing you to play games for these two platforms on PC with improvements.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dolphin - A GameCube and Wii Emulator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dolphin-emu.org/&#34;&gt;Homepage&lt;/a&gt; | &lt;a href=&#34;https://github.com/dolphin-emu/dolphin&#34;&gt;Project Site&lt;/a&gt; | &lt;a href=&#34;https://dolphin.ci/&#34;&gt;Buildbot&lt;/a&gt; | &lt;a href=&#34;https://forums.dolphin-emu.org/&#34;&gt;Forums&lt;/a&gt; | &lt;a href=&#34;https://wiki.dolphin-emu.org/&#34;&gt;Wiki&lt;/a&gt; | &lt;a href=&#34;https://github.com/dolphin-emu/dolphin/wiki&#34;&gt;GitHub Wiki&lt;/a&gt; | &lt;a href=&#34;https://bugs.dolphin-emu.org/projects/emulator/issues&#34;&gt;Issue Tracker&lt;/a&gt; | &lt;a href=&#34;https://github.com/dolphin-emu/dolphin/raw/master/Contributing.md&#34;&gt;Coding Style&lt;/a&gt; | &lt;a href=&#34;https://app.transifex.com/delroth/dolphin-emu/dashboard/&#34;&gt;Transifex Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dolphin is an emulator for running GameCube and Wii games on Windows, Linux, macOS, and recent Android devices. It&#39;s licensed under the terms of the GNU General Public License, version 2 or later (GPLv2+).&lt;/p&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://dolphin-emu.org/docs/faq/&#34;&gt;FAQ&lt;/a&gt; before using Dolphin.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Desktop&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows (10 or higher).&lt;/li&gt; &#xA;   &lt;li&gt;Linux.&lt;/li&gt; &#xA;   &lt;li&gt;macOS (10.15 Catalina or higher).&lt;/li&gt; &#xA;   &lt;li&gt;Unix-like systems other than Linux are not officially supported but might work.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Processor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A CPU with SSE2 support.&lt;/li&gt; &#xA;   &lt;li&gt;A modern CPU (3 GHz and Dual Core, not older than 2008) is highly recommended.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Graphics &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A reasonably modern graphics card (Direct3D 11.1 / OpenGL 3.3).&lt;/li&gt; &#xA;   &lt;li&gt;A graphics card that supports Direct3D 11.1 / OpenGL 4.4 is recommended.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Android (5.0 Lollipop or higher).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Processor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A processor with support for 64-bit applications (either ARMv8 or x86-64).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Graphics &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A graphics processor that supports OpenGL ES 3.0 or higher. Performance varies heavily with &lt;a href=&#34;https://dolphin-emu.org/blog/2013/09/26/dolphin-emulator-and-opengl-drivers-hall-fameshame/&#34;&gt;driver quality&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;A graphics processor that supports standard desktop OpenGL features is recommended for best performance.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Dolphin can only be installed on devices that satisfy the above requirements. Attempting to install on an unsupported device will fail and display an error message.&lt;/p&gt; &#xA;&lt;h2&gt;Building for Windows&lt;/h2&gt; &#xA;&lt;p&gt;Use the solution file &lt;code&gt;Source/dolphin-emu.sln&lt;/code&gt; to build Dolphin on Windows. Dolphin targets the latest MSVC shipped with Visual Studio or Build Tools. Other compilers might be able to build Dolphin on Windows but have not been tested and are not recommended to be used. Git and latest Windows SDK must be installed when building.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to pull submodules before building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;Release&#34; solution configuration includes performance optimizations for the best user experience but complicates debugging Dolphin. The &#34;Debug&#34; solution configuration is significantly slower, more verbose and less permissive but makes debugging Dolphin easier.&lt;/p&gt; &#xA;&lt;h2&gt;Building for Linux and macOS&lt;/h2&gt; &#xA;&lt;p&gt;Dolphin requires &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; for systems other than Windows. You need a recent version of GCC or Clang with decent c++20 support. CMake will inform you if your compiler is too old. Many libraries are bundled with Dolphin and used if they&#39;re not installed on your system. CMake will inform you if a bundled library is used or if you need to install any missing packages yourself. You may refer to the &lt;a href=&#34;https://github.com/dolphin-emu/dolphin/wiki/Building-for-Linux&#34;&gt;wiki&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to pull submodules before building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS Build Steps:&lt;/h3&gt; &#xA;&lt;p&gt;A binary supporting a single architecture can be built using the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make -j $(sysctl -n hw.logicalcpu)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;An application bundle will be created in &lt;code&gt;./Binaries&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A script is also provided to build universal binaries supporting both x64 and ARM in the same application bundle using the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python ../BuildMacOSUniversalBinary.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Universal binaries will be available in the &lt;code&gt;universal&lt;/code&gt; folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Doing this is more complex as it requires installation of library dependencies for both x64 and ARM (or universal library equivalents) and may require specifying additional arguments to point to relevant library locations. Execute BuildMacOSUniversalBinary.py --help for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Linux Global Build Steps:&lt;/h3&gt; &#xA;&lt;p&gt;To install to your system.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make -j $(nproc)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo make install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Linux Local Build Steps:&lt;/h3&gt; &#xA;&lt;p&gt;Useful for development as root access is not required.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir Build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd Build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake .. -DLINUX_LOCAL_DEV=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make -j $(nproc)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ln -s ../../Data/Sys Binaries/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Linux Portable Build Steps:&lt;/h3&gt; &#xA;&lt;p&gt;Can be stored on external storage and used on different Linux systems. Or useful for having multiple distinct Dolphin setups for testing/development/TAS.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir Build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd Build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake .. -DLINUX_LOCAL_DEV=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make -j $(nproc)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cp -r ../Data/Sys/ Binaries/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;touch Binaries/portable.txt&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building for Android&lt;/h2&gt; &#xA;&lt;p&gt;These instructions assume familiarity with Android development. If you do not have an Android dev environment set up, see &lt;a href=&#34;https://raw.githubusercontent.com/dolphin-emu/dolphin/master/AndroidSetup.md&#34;&gt;AndroidSetup.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to pull submodules before building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using Android Studio, import the Gradle project located in &lt;code&gt;./Source/Android&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Android apps are compiled using a build system called Gradle. Dolphin&#39;s native component, however, is compiled using CMake. The Gradle script will attempt to run a CMake build automatically while building the Java code.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstalling&lt;/h2&gt; &#xA;&lt;p&gt;On Windows, simply remove the extracted directory, unless it was installed with the NSIS installer, in which case you can uninstall Dolphin like any other Windows application.&lt;/p&gt; &#xA;&lt;p&gt;Linux users can run &lt;code&gt;cat install_manifest.txt | xargs -d &#39;\n&#39; rm&lt;/code&gt; as root from the build directory to uninstall Dolphin from their system.&lt;/p&gt; &#xA;&lt;p&gt;macOS users can simply delete Dolphin.app to uninstall it.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you&#39;ll want to remove the global user directory if you don&#39;t plan on reinstalling Dolphin.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: Dolphin.exe [options]... [FILE]...&#xA;&#xA;Options:&#xA;  --version             show program&#39;s version number and exit&#xA;  -h, --help            show this help message and exit&#xA;  -u USER, --user=USER  User folder path&#xA;  -m MOVIE, --movie=MOVIE&#xA;                        Play a movie file&#xA;  -e &amp;lt;file&amp;gt;, --exec=&amp;lt;file&amp;gt;&#xA;                        Load the specified file&#xA;  -n &amp;lt;16-character ASCII title ID&amp;gt;, --nand_title=&amp;lt;16-character ASCII title ID&amp;gt;&#xA;                        Launch a NAND title&#xA;  -C &amp;lt;System&amp;gt;.&amp;lt;Section&amp;gt;.&amp;lt;Key&amp;gt;=&amp;lt;Value&amp;gt;, --config=&amp;lt;System&amp;gt;.&amp;lt;Section&amp;gt;.&amp;lt;Key&amp;gt;=&amp;lt;Value&amp;gt;&#xA;                        Set a configuration option&#xA;  -s &amp;lt;file&amp;gt;, --save_state=&amp;lt;file&amp;gt;&#xA;                        Load the initial save state&#xA;  -d, --debugger        Show the debugger pane and additional View menu options&#xA;  -l, --logger          Open the logger&#xA;  -b, --batch           Run Dolphin without the user interface (Requires&#xA;                        --exec or --nand-title)&#xA;  -c, --confirm         Set Confirm on Stop&#xA;  -v VIDEO_BACKEND, --video_backend=VIDEO_BACKEND&#xA;                        Specify a video backend&#xA;  -a AUDIO_EMULATION, --audio_emulation=AUDIO_EMULATION&#xA;                        Choose audio emulation from [HLE|LLE]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available DSP emulation engines are HLE (High Level Emulation) and LLE (Low Level Emulation). HLE is faster but less accurate whereas LLE is slower but close to perfect. Note that LLE has two submodes (Interpreter and Recompiler) but they cannot be selected from the command line.&lt;/p&gt; &#xA;&lt;p&gt;Available video backends are &#34;D3D&#34; and &#34;D3D12&#34; (they are only available on Windows), &#34;OGL&#34;, and &#34;Vulkan&#34;. There&#39;s also &#34;Null&#34;, which will not render anything, and &#34;Software Renderer&#34;, which uses the CPU for rendering and is intended for debugging purposes only.&lt;/p&gt; &#xA;&lt;h2&gt;DolphinTool Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: dolphin-tool COMMAND -h&#xA;&#xA;commands supported: [convert, verify, header]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: convert [options]... [FILE]...&#xA;&#xA;Options:&#xA;  -h, --help            show this help message and exit&#xA;  -u USER, --user=USER  User folder path, required for temporary processing&#xA;                        files.Will be automatically created if this option is&#xA;                        not set.&#xA;  -i FILE, --input=FILE&#xA;                        Path to disc image FILE.&#xA;  -o FILE, --output=FILE&#xA;                        Path to the destination FILE.&#xA;  -f FORMAT, --format=FORMAT&#xA;                        Container format to use. Default is RVZ. [iso|gcz|wia|rvz]&#xA;  -s, --scrub           Scrub junk data as part of conversion.&#xA;  -b BLOCK_SIZE, --block_size=BLOCK_SIZE&#xA;                        Block size for GCZ/WIA/RVZ formats, as an integer.&#xA;                        Suggested value for RVZ: 131072 (128 KiB)&#xA;  -c COMPRESSION, --compression=COMPRESSION&#xA;                        Compression method to use when converting to WIA/RVZ.&#xA;                        Suggested value for RVZ: zstd [none|zstd|bzip|lzma|lzma2]&#xA;  -l COMPRESSION_LEVEL, --compression_level=COMPRESSION_LEVEL&#xA;                        Level of compression for the selected method. Ignored&#xA;                        if &#39;none&#39;. Suggested value for zstd: 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: verify [options]...&#xA;&#xA;Options:&#xA;  -h, --help            show this help message and exit&#xA;  -u USER, --user=USER  User folder path, required for temporary processing&#xA;                        files.Will be automatically created if this option is&#xA;                        not set.&#xA;  -i FILE, --input=FILE&#xA;                        Path to disc image FILE.&#xA;  -a ALGORITHM, --algorithm=ALGORITHM&#xA;                        Optional. Compute and print the digest using the&#xA;                        selected algorithm, then exit. [crc32|md5|sha1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: header [options]...&#xA;&#xA;Options:&#xA;  -h, --help            show this help message and exit&#xA;  -i FILE, --input=FILE&#xA;                        Path to disc image FILE.&#xA;  -b, --block_size      Optional. Print the block size of GCZ/WIA/RVZ formats,&#xA;then exit.&#xA;  -c, --compression     Optional. Print the compression method of GCZ/WIA/RVZ&#xA;                        formats, then exit.&#xA;  -l, --compression_level&#xA;                        Optional. Print the level of compression for WIA/RVZ&#xA;                        formats, then exit.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>scottbez1/smartknob</title>
    <updated>2023-06-01T02:09:37Z</updated>
    <id>tag:github.com,2023-06-01:/scottbez1/smartknob</id>
    <link href="https://github.com/scottbez1/smartknob" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haptic input knob with software-defined endstops and virtual detents&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SmartKnob&lt;/h1&gt; &#xA;&lt;p&gt;SmartKnob is an open-source input device with software-configurable endstops and virtual detents.&lt;/p&gt; &#xA;&lt;p&gt;A brushless gimbal motor is paired with a magnetic encoder to provide closed-loop torque feedback control, making it possible to dynamically create and adjust the feel of detents and endstops.&lt;/p&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://discord.gg/5jyhjcbTnR&#34;&gt;Discord community&lt;/a&gt; to discuss the project with others, show off your build, or help answer each others&#39; questions!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/scottbez1/smartknob/actions/workflows/electronics.yml&#34;&gt;&lt;img src=&#34;https://github.com/scottbez1/smartknob/actions/workflows/electronics.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/scottbez1/smartknob/actions/workflows/pio.yml&#34;&gt;&lt;img src=&#34;https://github.com/scottbez1/smartknob/actions/workflows/pio.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Designs&lt;/h1&gt; &#xA;&lt;h2&gt;SmartKnob View&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;SmartKnob View&#34; is the premium SmartKnob experience with an integrated display shown in my &lt;a href=&#34;https://www.youtube.com/watch?v=ip641WmY4pA&#34;&gt;demo video&lt;/a&gt;. Under active development.&lt;/p&gt; &#xA;&lt;p&gt;🎉 &lt;strong&gt;Motors are &lt;a href=&#34;https://www.sparkfun.com/products/20441&#34;&gt;now available&lt;/a&gt;!&lt;/strong&gt; If you&#39;ve been following this project, you&#39;ll know that the recommended motors went out of stock nearly immediately after it was published. Thanks to &lt;a href=&#34;https://github.com/scottbez1/smartknob/issues/16#issuecomment-1094482805%5D&#34;&gt;the community&lt;/a&gt;, we were able to identify the likely original manufacturer, and recently SparkFun Electronics has been getting them produced and regularly &lt;a href=&#34;https://www.sparkfun.com/products/20441&#34;&gt;stocking them&lt;/a&gt;! (However, they&#39;ve been selling out quickly each time they restock, so definitely sign up for backorder notifications if they&#39;re out of stock when you check). Thanks to everyone who helped search and investigate different motor options along the way!&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;240x240 round LCD (&#34;GC9A01&#34;), protected by 39.5mm watch glass on rotor&lt;/li&gt; &#xA; &lt;li&gt;BLDC gimbal motor, with a hollow shaft for mechanically &amp;amp; electrically connecting the LCD&lt;/li&gt; &#xA; &lt;li&gt;Powered by ESP32-PICO-V3-02 (Lilygo TMicro32 Plus module)&lt;/li&gt; &#xA; &lt;li&gt;PCB flexure and strain gauges used for press detection (haptic feedback provided via the motor)&lt;/li&gt; &#xA; &lt;li&gt;8 side-firing RGB LEDs (SK6812-SIDE-A) illuminate ring around the knob&lt;/li&gt; &#xA; &lt;li&gt;USB-C (2.0) connector for 5V power and serial data/programming (CH340)&lt;/li&gt; &#xA; &lt;li&gt;VEML7700 ambient light sensor for automatic backlight &amp;amp; LED intensity adjustment&lt;/li&gt; &#xA; &lt;li&gt;Versatile back plate for mounting - use either 4x screws, or 2x 3M medium Command strips (with cutouts for accessing removal tabs after installation)&lt;/li&gt; &#xA; &lt;li&gt;Front cover snaps on for easy access to the PCB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Current status:&lt;/strong&gt; Not recommended for general use (mechanical and electrical revisions may be needed depending on motor/electronics availability)&lt;/p&gt; &#xA;&lt;h3&gt;Demo video&lt;/h3&gt; &#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=ip641WmY4pA&#34;&gt; &lt;img src=&#34;https://img.youtube.com/vi/ip641WmY4pA/maxresdefault.jpg&#34; width=&#34;480&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;How it works&lt;/h3&gt; &#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=Q76dMggUH1M&#34;&gt; &lt;img src=&#34;https://img.youtube.com/vi/Q76dMggUH1M/maxresdefault.jpg&#34; width=&#34;480&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;3D CAD&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/scottbez1/smartknob/master/doc/img/explodedv145.gif&#34; alt=&#34;Exploded view&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest Fusion 360 Model: &lt;a href=&#34;https://a360.co/3BzkU0n&#34;&gt;https://a360.co/3BzkU0n&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build your own?&lt;/h3&gt; &#xA;&lt;p&gt;While this is a &#34;DIY&#34; open-source project, it is not yet a mature plug-and-play project. If you intend to build your own, note that it requires advanced soldering experience to build - very small-pitch surface-mount soldering is required (reflow or hot air recommended), and assembly is quite time-consuming and delicate. Please go into it with the expectation that you will almost certainly need to be able to troubleshoot some hardware and firmware issues yourself - I recommend reviewing/understanding the schematics and basic firmware before jumping in!&lt;/p&gt; &#xA;&lt;p&gt;More documentation on the BOM and what parts you need to order is coming in the future - thanks so much for your interest! Follow me on &lt;a href=&#34;https://twitter.com/scottbez1&#34;&gt;Twitter&lt;/a&gt; for the latest updates on this and other projects.&lt;/p&gt; &#xA;&lt;p&gt;View the latest auto-generated (untested) &lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-ibom.html&#34;&gt;Base PCB Interactive BOM&lt;/a&gt; and &lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-ibom.html&#34;&gt;Screen PCB Interactive BOM&lt;/a&gt; (or, the combined &lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-bom.csv&#34;&gt;BOM csv&lt;/a&gt;) for electronics/hardware parts list. ⚠️ These are auto-generated from the latest untested revision on GitHub. For tested/stable/recommended artifacts, use a &lt;a href=&#34;https://github.com/scottbez1/smartknob/releases&#34;&gt;release&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;A few miscellaneous notes in the meantime:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This can &lt;em&gt;probably&lt;/em&gt; be FDM 3D printed with a well-tuned printer, but the parts shown in videos/photos were MJF printed in nylon for tight tolerances and better surface finish&lt;/li&gt; &#xA; &lt;li&gt;If you wanted a simpler build, you could omit the LCD and just merge the knob + glass from the model into a single STL to get a closed-top knob&lt;/li&gt; &#xA; &lt;li&gt;There&#39;s limited space inside the LCD mount for wiring, and 8 wires need to fit through the hole in the center. I used 30 AWG wire-wrapping wire. Enamel-coated wire would probably work too.&lt;/li&gt; &#xA; &lt;li&gt;Strain gauges are BF350-3AA, and glued in place with CA glue (I&#39;ll include video of this process in the future, but essentially I used kapton tape to pick up the strain gauge and hold it in place during curing). This has to be done after reflow soldering, and would be hard to remove/fix in case of a mistake, so MAKE SURE TO PRACTICE GLUING strain gauges to other items before attempting on the PCB!&lt;/li&gt; &#xA; &lt;li&gt;The TMC6300 is &lt;em&gt;tiny&lt;/em&gt; and has a bottom pad, so I would seriously consider getting a stencil along with the PCB order. Even with the stencil I needed to manually clean up some bridging afterward; I &lt;em&gt;highly&lt;/em&gt; recommend Chip Quik NC191 gel flux, available on &lt;a href=&#34;https://amzn.to/3MGDSr5&#34;&gt;Amazon&lt;/a&gt; (or use this &lt;a href=&#34;https://www.amazon.com/Smooth-Flow-No-Clean-syringe-plunger/dp/B08KJPG3NZ&#34;&gt;non-affiliate link&lt;/a&gt; instead) or from your electronics distributor of choice. Flux is also very helpful when soldering the LCD ribbon cable to to screen PCB.&lt;/li&gt; &#xA; &lt;li&gt;For breadboard prototyping, the &lt;a href=&#34;https://www.trinamic.com/support/eval-kits/details/tmc6300-bob/&#34;&gt;TMC6300-BOB&lt;/a&gt; is awesome and way easier to work with than the bare chip if you just want to play around with low current BLDC motors&lt;/li&gt; &#xA; &lt;li&gt;For AliExpress purchases: I highly recommend &lt;strong&gt;only&lt;/strong&gt; using AliExpress Standard Shipping (purchasing in the US). I have had multiple purchases take months or never get delivered when purchased with Cainiao or other low cost shipping options, whereas AliExpress Standard is very reliable and generally faster in my experience.&lt;/li&gt; &#xA; &lt;li&gt;Make sure to check the &lt;a href=&#34;https://github.com/scottbez1/smartknob/issues&#34;&gt;open issues&lt;/a&gt; - this design is not yet &#34;stable&#34;, so beware that everything may not go smoothly. I would not recommend ordering these parts yourself until the &lt;a href=&#34;https://github.com/scottbez1/smartknob/milestone/1&#34;&gt;stable release v1.0 milestone&lt;/a&gt; is complete, as there are some mechanical interference issues in the current revision.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Future plans:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;consider switch to using an ESP32-S3-MINI-1 module (once Arduino core support is complete), as that would allow for direct USB HID support (for joystick/macro-pad type input to a computer)&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth HID support?&lt;/li&gt; &#xA; &lt;li&gt;get wifi configured and working (probably MQTT?). Currently memory is an issue with the full display framebuffer sprite. PSRAM might fix this (requires newer ESP-IDF &amp;amp; unreleased Arduino core, and from a brief test I got horrible performance with PSRAM enabled), or the next item might help reduce memory:&lt;/li&gt; &#xA; &lt;li&gt;migrate to LVGL, for better display rendering and easy support for menus, etc. Shouldn&#39;t require a full 240x240x24b framebuffer in memory, freeing some for wifi, etc.&lt;/li&gt; &#xA; &lt;li&gt;Home Assistant integration, or other real-world applications&lt;/li&gt; &#xA; &lt;li&gt;???&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/scottbez1/&#34;&gt;Profit&lt;/a&gt; 😉&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Base PCB&lt;/h4&gt; &#xA;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-front-3d.png&#34;&gt; &lt;img src=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-front-3d.png&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-back-3d.png&#34;&gt; &lt;img src=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-back-3d.png&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Ordering notes: use white soldermask, for reflecting light from RGB LED ring around the knob. Should be 1.2mm thick (not &#34;standard&#34; 1.6mm).&lt;/p&gt; &#xA;&lt;p&gt;If you are ordering a stencil for solder paste from JLCPCB and plan to apply paste by hand (as &lt;a href=&#34;https://youtu.be/Q76dMggUH1M?t=372&#34;&gt;shown in the video&lt;/a&gt;) without a stencil frame/machine, make sure to select &lt;strong&gt;&#34;Customized size&#34;&lt;/strong&gt; and enter smaller dimensions (e.g. 100mm x 100mm) to avoid getting a much larger stencil than you need. This will also likely reduce the cost of shipping substantially! Also, select only the &lt;strong&gt;Top&lt;/strong&gt; side; the bottom only has 2 SMT components - the motor connector and VEML7700 ALS - so it&#39;s not worth getting a stencil for that.&lt;/p&gt; &#xA;&lt;p&gt;Latest auto-generated (untested and likely broken!) artifacts⚠️:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-schematic.pdf&#34;&gt;Schematic&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-ibom.html&#34;&gt;Interactive BOM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-pcb-packet.pdf&#34;&gt;PCB Packet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_base-jlc/gerbers.zip&#34;&gt;Gerbers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;⚠️ For tested/stable/recommended artifacts, use a &lt;a href=&#34;https://github.com/scottbez1/smartknob/releases&#34;&gt;release&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h4&gt;Screen PCB&lt;/h4&gt; &#xA;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-front-3d.png&#34;&gt; &lt;img src=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-front-3d.png&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-back-3d.png&#34;&gt; &lt;img src=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-back-3d.png&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Ordering notes: Must be 1.2mm thick (not &#34;standard&#34; 1.6mm) per mechanical design.&lt;/p&gt; &#xA;&lt;p&gt;There are few enough components on the Screen PCB that I chose to hand-solder them rather than reflow with solder paste and a stencil, but if you order a stencil, see the note above about selecting a &#34;Customized size&#34; to be easier to handle and save on shipping. Also make sure to select the &lt;strong&gt;Bottom&lt;/strong&gt; side only; all the components are on the bottom side of the screen PCB.&lt;/p&gt; &#xA;&lt;p&gt;Latest auto-generated (untested and likely broken!) artifacts⚠️:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-schematic.pdf&#34;&gt;Schematic&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-ibom.html&#34;&gt;Interactive BOM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-pcb-packet.pdf&#34;&gt;PCB Packet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://smartknob-artifacts.s3.us-west-1.amazonaws.com/master/electronics/view_screen-jlc/gerbers.zip&#34;&gt;Gerbers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;⚠️ For tested/stable/recommended artifacts, use a &lt;a href=&#34;https://github.com/scottbez1/smartknob/releases&#34;&gt;release&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h2&gt;NanoFOC (3rd party)&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re looking to tinker with FOC/haptic feedback, but don&#39;t want to build a full SmartKnob View yourself, I can recommend the NanoFOC DevKit++, an &lt;a href=&#34;https://github.com/katbinaris/nanofoc_devkit&#34;&gt;open-source design&lt;/a&gt; made and &lt;a href=&#34;https://store.binaris.io/products/nanofoc-devkit&#34;&gt;sold&lt;/a&gt; by a member of the SmartKnob community! It&#39;s super compact and is a great testbed or core for building your own BLDC-based haptic input device.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.shopify.com/s/files/1/0729/7433/6335/products/IMG_20230418_120554-01.jpg?width=416&#34; alt=&#34;Image of the NanoFOC PCB&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The NanoFOC uses an ESP32-S3, and the SmartKnob firmware works on it out of the box; just select the &lt;code&gt;nanofoc&lt;/code&gt; environment in PlatformIO rather than the &lt;code&gt;view&lt;/code&gt; environment when uploading.&lt;/p&gt; &#xA;&lt;h1&gt;Frequently Asked Questions (FAQ)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;How much does it cost?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;I wish I could tell you now, but I don&#39;t actually know off the top of my head. Check back soon - I&#39;ve only built a few so far, which was the result of a bunch of tinkering and prototyping over an extended period, so I don&#39;t have all the expenses tallied up yet. Probably less than $200 in parts? But some items have gotten more expensive, and you may be limited by minimum order quantities or shipping charges from multiple separate suppliers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Does it work with XYZ?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Not yet, regardless of whatever &#34;XYZ&#34; you&#39;re thinking of. So far I&#39;ve only implemented enough firmware for the demo shown in the video, so you can&#39;t actually use it for anything productive yet. The basic detent configuration API is there, but not much else. Lots of firmware work remains to be done. If you build one, I&#39;d love your help adding support for &#34;XYZ&#34; though!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Can I buy one as a kit or already assembled?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Probably not? Or at least, I don&#39;t have any immediate plans to sell them myself. It&#39;s not that I don&#39;t want you to be happy, but hardware is a hard business and I just work on this stuff in my free time.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s open source with a fairly permissive license though, so in theory anyone could start offering kits/assemblies. If someone does go down that route of selling them, note that attribution is &lt;em&gt;required&lt;/em&gt; (and I wouldn&#39;t say no to &lt;a href=&#34;https://github.com/sponsors/scottbez1/&#34;&gt;royalties/tips/thanks&lt;/a&gt; if you&#39;re in a giving mood 🙂).&lt;/p&gt; &#xA;&lt;h1&gt;Firmware and Software&lt;/h1&gt; &#xA;&lt;p&gt;More extensive documentation of the firmware and software (and how to get started) can be found in the dedicated &lt;a href=&#34;https://paper.dropbox.com/doc/SmartKnob-firmware-and-software--Byho6npe9XvZLZLxJ_8bK5TqAg-VUb9nq7btuhnHw5KlgJIH#:h2=Calibration&#34;&gt;SmartKnob Firmware and Software Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;General Component Info&lt;/h2&gt; &#xA;&lt;h3&gt;Magnetic encoders&lt;/h3&gt; &#xA;&lt;h4&gt;MT6701 (MagnTek)&lt;/h4&gt; &#xA;&lt;p&gt;Excellent sensor at a reasonable price - highly recommended. Less noisy than TLV493D, and more responsive (control loop is more stable) using SSI.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lots of IO options - SSI, I2C, and ABZ - should offer good response latency&lt;/li&gt; &#xA; &lt;li&gt;SSI includes CRC to validate data&lt;/li&gt; &#xA; &lt;li&gt;No power-down or low-power options - may not be ideal for battery-powered devices&lt;/li&gt; &#xA; &lt;li&gt;Not available from US distributors (Mouser, Digi-Key)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.magntek.com.cn/upload/MT6701_Rev.1.5.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lcsc.com/product-detail/Angle-Linear-Position-Sensors_Magn-Tek-MT6701CT-STD_C2856764.html&#34;&gt;Ordering (LCSC)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;TLV493D (Infineon)&lt;/h4&gt; &#xA;&lt;p&gt;Not used in the SmartKnob view, but a common/popular magnetic encoder in general. It&#39;s a mediocre choice for a haptic feedback implementation. Easy to prototype with using &lt;a href=&#34;https://www.adafruit.com/product/4366&#34;&gt;Adafruit&#39;s QWIIC breakout board&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In my testing, it&#39;s noisy, requiring filtering/smoothing that can slow responsiveness, hurting control loop stability. Or, with less filtering, the noise can easily be &#34;amplified&#34; by the derivative component in the PID motor torque controller, causing audible (and tactile) humming/buzzing.&lt;/p&gt; &#xA;&lt;p&gt;But the bigger issue is that there is apparently a known silicon issue that causes the internal ADC to sometimes completely lock up, requiring a full reset and re-configuration, which can cause delays/gaps in data! See section 5.6 in the &lt;a href=&#34;https://www.infineon.com/dgdl/Infineon-TLV493D-A1B6_3DMagnetic-UM-v01_03-EN.pdf?fileId=5546d46261d5e6820161e75721903ddd&#34;&gt;User Manual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;In the Master Controlled Mode (MCM) or the Fast Mode (FM) the ADC conversion may hang up. A hang up can&#xA;be detected by:&#xA; - Frame Counter (FRM) counter stucks and does not increment anymore.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In my experience testing 4 different Adafruit breakout boards, 2 of them (50%) regularly exhibit this lockup behavior within a minute or two of use. It is possible to detect and auto-reset (and there is code in the project to do so), but it is slow and may cause undesirable jumps/delays if the sensor locks up often.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.mouser.com/datasheet/2/196/Infineon_TLV493D_A1B6_DataSheet_v01_10_EN-1227967.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;AS5600 (AMS)&lt;/h4&gt; &#xA;&lt;p&gt;A mediocre choice. Cheap breakout boards are readily available.&lt;/p&gt; &#xA;&lt;p&gt;In my testing, it&#39;s fairly noisy (anecdotally, noisier than the TLV493d), requiring filtering/smoothing that can slow responsiveness, hurting control loop stability. Additionally, it saturates at a lower magnetic field strength than other sensors I tested, requiring a significant air gap (8-10mm) when used with a strong neodymium diametric magnet like &lt;a href=&#34;https://www.digikey.com/en/products/detail/radial-magnets-inc/8995/5126077&#34;&gt;Radial Magnets 8995&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ams.com/documents/20143/36005/AS5600_DS000365_5-00.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Motor drivers&lt;/h3&gt; &#xA;&lt;h4&gt;TMC6300-LA&lt;/h4&gt; &#xA;&lt;p&gt;This is a relatively new IC and it&#39;s a perfect match! There generally aren&#39;t any other drivers (with integrated fets) that meet the requirements for the low-voltage and low-current motors used in this project (DRV8316 might work, but has not been tested).&lt;/p&gt; &#xA;&lt;p&gt;Highlights:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2-11V DC motor supply input&lt;/li&gt; &#xA; &lt;li&gt;Up to 1.2A RMS&lt;/li&gt; &#xA; &lt;li&gt;Tiny (3x3mm QFN)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.trinamic.com/fileadmin/assets/Products/ICs_Documents/TMC6300_datasheet_rev1.07.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.trinamic.com/products/integrated-circuits/details/tmc6300-la/&#34;&gt;Product page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Motors&lt;/h3&gt; &#xA;&lt;h4&gt;32mm Rotor, Hollow Shaft, Diametric magnet&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scottbez1/smartknob/master/doc/img/motors/PXL_20220121_221746595.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/scottbez1/smartknob/master/doc/img/motors/PXL_20220121_221746595.jpg&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/scottbez1/smartknob/master/doc/img/motors/PXL_20220121_221738745.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/scottbez1/smartknob/master/doc/img/motors/PXL_20220121_221738745.jpg&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;32mm rotor&lt;/li&gt; &#xA; &lt;li&gt;15mm overall height (including magnet), 12.75mm height w/o magnet, 9mm rotor height&lt;/li&gt; &#xA; &lt;li&gt;low/zero cogging - excellent for completely smooth input&lt;/li&gt; &#xA; &lt;li&gt;5.9mm hollow shaft&lt;/li&gt; &#xA; &lt;li&gt;built-in diametric magnet for encoder&lt;/li&gt; &#xA; &lt;li&gt;Proven option&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is overall the easiest motor to get started with. Low cogging and a built-in diametric magnet are great!&lt;/p&gt; &#xA;&lt;p&gt;Available &lt;a href=&#34;https://www.sparkfun.com/products/20441&#34;&gt;from SparkFun&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;This project was greatly inspired by Jesse Schoch&#39;s video &#34;&lt;a href=&#34;https://www.youtube.com/watch?v=1gPQfDkX3BU&#34;&gt;haptic textures and virtual detents&lt;/a&gt;&#34; and the corresponding &lt;a href=&#34;https://community.simplefoc.com/t/haptic-textures/301&#34;&gt;discussion in the SimpleFOC community&lt;/a&gt;. Seriously, this project wouldn&#39;t exist if not for that video - thank you Jesse!&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under Apache v2 (software, electronics, documentation) and Creative Commons Attribution 4.0 (hardware/mechanical) (see &lt;a href=&#34;https://raw.githubusercontent.com/scottbez1/smartknob/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; and &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2022 Scott Bezek&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>