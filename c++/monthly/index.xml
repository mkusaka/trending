<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-01T01:58:53Z</updated>
  <subtitle>Monthly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Aircoookie/WLED</title>
    <updated>2022-12-01T01:58:53Z</updated>
    <id>tag:github.com,2022-12-01:/Aircoookie/WLED</id>
    <link href="https://github.com/Aircoookie/WLED" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Control WS2812B and many more types of digital RGB LEDs with an ESP8266 or ESP32 over WiFi!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Aircoookie/WLED/main/images/wled_logo_akemi.png&#34;&gt; &lt;a href=&#34;https://github.com/Aircoookie/WLED/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Aircoookie/WLED.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Aircoookie/WLED/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Aircoookie/wled?color=blue&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://wled.discourse.group&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/topics?colorB=blue&amp;amp;label=forum&amp;amp;server=https%3A%2F%2Fwled.discourse.group%2F&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/KuqP7NE&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/473448917040758787.svg?colorB=blue&amp;amp;label=discord&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kno.wled.ge&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/quick_start-wiki-blue.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Aircoookie/WLED-App&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/app-wled-blue.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/Aircoookie/WLED&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?style=flat-square&amp;amp;logo=gitpod&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Welcome to my project WLED! ‚ú®&lt;/h1&gt; &#xA;&lt;p&gt;A fast and feature-rich implementation of an ESP8266/ESP32 webserver to control NeoPixel (WS2812B, WS2811, SK6812) LEDs or also SPI based chipsets like the WS2801 and APA102!&lt;/p&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WS2812FX library integrated for over 100 special effects&lt;/li&gt; &#xA; &lt;li&gt;FastLED noise effects and 50 palettes&lt;/li&gt; &#xA; &lt;li&gt;Modern UI with color, effect and segment controls&lt;/li&gt; &#xA; &lt;li&gt;Segments to set different effects and colors to parts of the LEDs&lt;/li&gt; &#xA; &lt;li&gt;Settings page - configuration over network&lt;/li&gt; &#xA; &lt;li&gt;Access Point and station mode - automatic failsafe AP&lt;/li&gt; &#xA; &lt;li&gt;Up to 10 LED outputs per instance&lt;/li&gt; &#xA; &lt;li&gt;Support for RGBW strips&lt;/li&gt; &#xA; &lt;li&gt;Up to 250 user presets to save and load colors/effects easily, supports cycling through them.&lt;/li&gt; &#xA; &lt;li&gt;Presets can be used to automatically execute API calls&lt;/li&gt; &#xA; &lt;li&gt;Nightlight function (gradually dims down)&lt;/li&gt; &#xA; &lt;li&gt;Full OTA software updatability (HTTP + ArduinoOTA), password protectable&lt;/li&gt; &#xA; &lt;li&gt;Configurable analog clock (Cronixie, 7-segment and EleksTube IPS clock support via usermods)&lt;/li&gt; &#xA; &lt;li&gt;Configurable Auto Brightness limit for safer operation&lt;/li&gt; &#xA; &lt;li&gt;Filesystem-based config for easier backup of presets and settings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üí° Supported light control interfaces&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WLED app for &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.aircoookie.WLED&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://apps.apple.com/us/app/wled/id1475695033&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON and HTTP request APIs&lt;/li&gt; &#xA; &lt;li&gt;MQTT&lt;/li&gt; &#xA; &lt;li&gt;Blynk IoT&lt;/li&gt; &#xA; &lt;li&gt;E1.31, Art-Net, DDP and TPM2.net&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/diyhue/diyHue&#34;&gt;diyHue&lt;/a&gt; (Wled is supported by diyHue, including Hue Sync Entertainment under udp. Thanks to &lt;a href=&#34;https://github.com/gmallios&#34;&gt;Gregory Mallios&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hyperion-project/hyperion.ng&#34;&gt;Hyperion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;UDP realtime&lt;/li&gt; &#xA; &lt;li&gt;Alexa voice control (including dimming and color)&lt;/li&gt; &#xA; &lt;li&gt;Sync to Philips hue lights&lt;/li&gt; &#xA; &lt;li&gt;Adalight (PC ambilight via serial) and TPM2&lt;/li&gt; &#xA; &lt;li&gt;Sync color of multiple WLED devices (UDP notifier)&lt;/li&gt; &#xA; &lt;li&gt;Infrared remotes (24-key RGB, receiver required)&lt;/li&gt; &#xA; &lt;li&gt;Simple timers/schedules (time from NTP, timezones/DST supported)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì≤ Quick start guide and documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://kno.wled.ge&#34;&gt;documentation on our official site&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kno.wled.ge/basics/tutorials/&#34;&gt;On this page&lt;/a&gt; you can find excellent tutorials made by the community and helpful tools to help you get your new lamp up and running!&lt;/p&gt; &#xA;&lt;h2&gt;üñºÔ∏è User interface&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Aircoookie/WLED/main/images/macbook-pro-space-gray-on-the-wooden-table.jpg&#34; width=&#34;50%&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Aircoookie/WLED/main/images/walking-with-iphone-x.jpg&#34; width=&#34;50%&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üíæ Compatible hardware&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://kno.wled.ge/basics/compatible-hardware&#34;&gt;here&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;‚úåÔ∏è Other&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the MIT license&lt;br&gt; Credits &lt;a href=&#34;https://kno.wled.ge/about/contributors/&#34;&gt;here&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Join the Discord server to discuss everything about WLED!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/KuqP7NE&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/473448917040758787/widget.png?style=banner2&#34; width=&#34;25%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out the WLED &lt;a href=&#34;https://wled.discourse.group&#34;&gt;Discourse forum&lt;/a&gt;!&lt;br&gt; You can also send me mails to &lt;a href=&#34;mailto:dev.aircoookie@gmail.com&#34;&gt;dev.aircoookie@gmail.com&lt;/a&gt;, but please only do so if you want to talk to me privately.&lt;br&gt; If WLED really brightens up your every day, you can &lt;a href=&#34;https://paypal.me/aircoookie&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/send%20me%20a%20small%20gift-paypal-blue.svg?style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt;&lt;br&gt; If you are sensitive to photosensitive epilepsy it is not recommended that you use this software.&lt;br&gt; In case you still want to try, don&#39;t use strobe, lighting or noise modes or high effect speed settings. As per the MIT license, I assume no liability for any damage to you or any other person or equipment.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rui314/mold</title>
    <updated>2022-12-01T01:58:53Z</updated>
    <id>tag:github.com,2022-12-01:/rui314/mold</id>
    <link href="https://github.com/rui314/mold" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mold: A Modern Linker ü¶†&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mold: A Modern Linker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;i&gt;This is a repo of a free, AGPL-licensed version of the linker. If you are looking for a commercial, non-AGPL version of the same linker, please visit the &lt;a href=&#34;https://github.com/bluewhalesystems/sold&#34;&gt;repo of the sold linker&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt; &#xA;&lt;p&gt;mold is a faster drop-in replacement for existing Unix linkers. It is several times faster than the LLVM lld linker, the second-fastest open-source linker which I originally created a few years ago. mold is designed to increase developer productivity by reducing build time, especially in rapid debug-edit-rebuild cycles.&lt;/p&gt; &#xA;&lt;p&gt;Here is a performance comparison of GNU gold, LLVM lld, and mold for linking final debuginfo-enabled executables of major large programs on a simulated 8-core 16-threads machine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rui314/mold/main/docs/comparison.png&#34; alt=&#34;Link speed comparison&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Program (linker output size)&lt;/th&gt; &#xA;   &lt;th&gt;GNU gold&lt;/th&gt; &#xA;   &lt;th&gt;LLVM lld&lt;/th&gt; &#xA;   &lt;th&gt;mold&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chrome 96 (1.89 GiB)&lt;/td&gt; &#xA;   &lt;td&gt;53.86s&lt;/td&gt; &#xA;   &lt;td&gt;11.74s&lt;/td&gt; &#xA;   &lt;td&gt;2.21s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clang 13 (3.18 GiB)&lt;/td&gt; &#xA;   &lt;td&gt;64.12s&lt;/td&gt; &#xA;   &lt;td&gt;5.82s&lt;/td&gt; &#xA;   &lt;td&gt;2.90s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Firefox 89 libxul (1.64 GiB)&lt;/td&gt; &#xA;   &lt;td&gt;32.95s&lt;/td&gt; &#xA;   &lt;td&gt;6.80s&lt;/td&gt; &#xA;   &lt;td&gt;1.42s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;mold is so fast that it is only 2x &lt;em&gt;slower&lt;/em&gt; than &lt;code&gt;cp&lt;/code&gt; on the same machine. Feel free to &lt;a href=&#34;https://github.com/rui314/mold/issues&#34;&gt;file a bug&lt;/a&gt; if you find mold is not faster than other linkers.&lt;/p&gt; &#xA;&lt;p&gt;mold supports x86-64, i386, ARM64, ARM32, 64-bit/32-bit little/big-endian RISC-V, 64-bit big-endian PowerPC ELFv1, 64-bit little-endian PowerPC ELFv2, s390x, SPARC64 and m68k.&lt;/p&gt; &#xA;&lt;h2&gt;Why does the speed of linking matter?&lt;/h2&gt; &#xA;&lt;p&gt;If you are using a compiled language such as C, C++ or Rust, a build consists of two phases. In the first phase, a compiler compiles source files into object files (&lt;code&gt;.o&lt;/code&gt; files). In the second phase, a linker takes all object files to combine them into a single executable or a shared library file.&lt;/p&gt; &#xA;&lt;p&gt;The second phase takes a long time if your build output is large. mold can make it faster, saving your time and keeping you from being distracted while waiting for a long build to finish. The difference is most noticeable when you are in rapid debug-edit-rebuild cycles.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Binary packages for the following systems are currently available.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/mold/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/mold.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;mold is written in C++20, so if you build mold yourself, you need a recent version of a C++ compiler and a C++ standard library. GCC 10.2 or Clang 12.0.0 (or later) as well as libstdc++ 10 or libc++ 7 (or later) are recommended.&lt;/p&gt; &#xA;&lt;h3&gt;Install dependencies&lt;/h3&gt; &#xA;&lt;p&gt;To install build dependencies, run &lt;code&gt;./install-build-deps.sh&lt;/code&gt; in this directory. It recognizes your Linux distribution and tries to install necessary packages. You may want to run it as root.&lt;/p&gt; &#xA;&lt;h3&gt;Compile mold&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/rui314/mold.git&#xA;mkdir mold/build&#xA;cd mold/build&#xA;git checkout v1.7.1&#xA;../install-build-deps.sh&#xA;cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=c++ ..&#xA;cmake --build . -j $(nproc)&#xA;sudo cmake --install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may need to pass a C++20 compiler command name to &lt;code&gt;cmake&lt;/code&gt;. In the above case, &lt;code&gt;c++&lt;/code&gt; is passed. If it doesn&#39;t work for you, try a specific version of a compiler such as &lt;code&gt;g++-10&lt;/code&gt; or &lt;code&gt;clang++-12&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;mold&lt;/code&gt; is installed to &lt;code&gt;/usr/local/bin&lt;/code&gt;. You can change that by passing &lt;code&gt;-DCMAKE_INSTALL_PREFIX=&amp;lt;directory&amp;gt;&lt;/code&gt;. For other cmake options, see the comments in &lt;code&gt;CMakeLists.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t use a recent enough Linux distribution, or if for any reason &lt;code&gt;cmake&lt;/code&gt; in the above commands doesn&#39;t work for you, you can use Docker to build it in a Docker environment. To do so, just run &lt;code&gt;./dist.sh&lt;/code&gt; in this directory instead of &lt;code&gt;cmake&lt;/code&gt;. The shell script pulls a Docker image, builds mold and auxiliary files inside it, and packs them into a single tar file &lt;code&gt;mold-$version-$arch-linux.tar.gz&lt;/code&gt;. You can extract the tar file anywhere and use &lt;code&gt;mold&lt;/code&gt; executable in it.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;A classic way to use mold&lt;/summary&gt; &#xA; &lt;p&gt;On Unix, the linker command (which is usually &lt;code&gt;/usr/bin/ld&lt;/code&gt;) is invoked indirectly by the compiler driver (which is usually &lt;code&gt;cc&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt; or &lt;code&gt;clang&lt;/code&gt;), which is typically in turn indirectly invoked by &lt;code&gt;make&lt;/code&gt; or some other build system command.&lt;/p&gt; &#xA; &lt;p&gt;If you can specify an additional command line option to your compiler driver by modifying build system&#39;s config files, add one of the following flags to use &lt;code&gt;mold&lt;/code&gt; instead of &lt;code&gt;/usr/bin/ld&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Clang: pass &lt;code&gt;-fuse-ld=mold&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;GCC 12.1.0 or later: pass &lt;code&gt;-fuse-ld=mold&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;GCC before 12.1.0: &lt;code&gt;-fuse-ld&lt;/code&gt; does not accept &lt;code&gt;mold&lt;/code&gt; as a valid argument, so you need to use &lt;code&gt;-B&lt;/code&gt; option instead. &lt;code&gt;-B&lt;/code&gt; is an option to tell GCC where to look for external commands such as &lt;code&gt;ld&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you have installed mold with &lt;code&gt;make install&lt;/code&gt;, there should be a directory named &lt;code&gt;/usr/libexec/mold&lt;/code&gt; (or &lt;code&gt;/usr/local/libexec/mold&lt;/code&gt;, depending on your &lt;code&gt;$PREFIX&lt;/code&gt;), and &lt;code&gt;ld&lt;/code&gt; command should be there. The &lt;code&gt;ld&lt;/code&gt; is actually a symlink to &lt;code&gt;mold&lt;/code&gt;. So, all you need is to pass &lt;code&gt;-B/usr/libexec/mold&lt;/code&gt; (or &lt;code&gt;-B/usr/local/libexec/mold&lt;/code&gt;) to GCC.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;If you haven&#39;t installed &lt;code&gt;mold&lt;/code&gt; to any &lt;code&gt;$PATH&lt;/code&gt;, you can still pass &lt;code&gt;-fuse-ld=/absolute/path/to/mold&lt;/code&gt; to clang to use mold. GCC does not take an absolute path as an argument for &lt;code&gt;-fuse-ld&lt;/code&gt; though.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;If you are using Rust&lt;/summary&gt; &#xA; &lt;p&gt;Create &lt;code&gt;.cargo/config.toml&lt;/code&gt; in your project directory with the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[target.x86_64-unknown-linux-gnu]&#xA;linker = &#34;clang&#34;&#xA;rustflags = [&#34;-C&#34;, &#34;link-arg=-fuse-ld=/path/to/mold&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;where &lt;code&gt;/path/to/mold&lt;/code&gt; is an absolute path to &lt;code&gt;mold&lt;/code&gt; exectuable. In the above example, we use &lt;code&gt;clang&lt;/code&gt; as a linker driver as it can always take the &lt;code&gt;-fuse-ld&lt;/code&gt; option. If your GCC is recent enough to recognize the option, you may be able to remove the &lt;code&gt;linker = &#34;clang&#34;&lt;/code&gt; line.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[target.x86_64-unknown-linux-gnu]&#xA;rustflags = [&#34;-C&#34;, &#34;link-arg=-fuse-ld=/path/to/mold&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you want to use mold for all projects, put the above snippet to &lt;code&gt;~/.cargo/config.toml&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;If you are using macOS, you can modify &lt;code&gt;config.toml&lt;/code&gt; in a similar manner. Here is an example with &lt;code&gt;mold&lt;/code&gt; installed via &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[target.x86_64-apple-darwin]&#xA;linker = &#34;clang&#34;&#xA;rustflags = [&#34;-C&#34;, &#34;link-arg=-fuse-ld=mold&#34;]&#xA;&#xA;[target.aarch64-apple-darwin]&#xA;linker = &#34;clang&#34;&#xA;rustflags = [&#34;-C&#34;, &#34;link-arg=-fuse-ld=mold&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;If you are using Nim&lt;/summary&gt; &#xA; &lt;p&gt;Create &lt;code&gt;config.nims&lt;/code&gt; in your project directory with the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-nim&#34;&gt;when findExe(&#34;mold&#34;).len &amp;gt; 0 and defined(linux):&#xA;  switch(&#34;passL&#34;, &#34;-fuse-ld=mold&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;where &lt;code&gt;mold&lt;/code&gt; must be included in the PATH environment variable. In this example The above example uses &lt;code&gt;gcc&lt;/code&gt; as the linker driver. Use the &lt;code&gt;fuse-ld&lt;/code&gt; option. If your GCC is recent enough to recognize this option.&lt;/p&gt; &#xA; &lt;p&gt;If you want to use mold for all projects, put the above snippet to &lt;code&gt;~/.config/config.nims&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;If you are using macOS, you can modify config.nims in a similar manner. Here is an example with mold installed via Homebrew.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-nim&#34;&gt;when findExe(&#34;ld64.mold&#34;).len &amp;gt; 0 and defined(macosx):&#xA;  switch(&#34;passL&#34;, &#34;-fuse-ld=ld64.mold&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;mold -run&lt;/summary&gt; &#xA; &lt;p&gt;It is sometimes very hard to pass an appropriate command line option to &lt;code&gt;cc&lt;/code&gt; to specify an alternative linker. To deal with the situation, mold has a feature to intercept all invocations of &lt;code&gt;ld&lt;/code&gt;, &lt;code&gt;ld.lld&lt;/code&gt; or &lt;code&gt;ld.gold&lt;/code&gt; and redirect it to itself. To use the feature, run &lt;code&gt;make&lt;/code&gt; (or another build command) as a subcommand of mold as follows:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mold -run make &amp;lt;make-options-if-any&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Internally, mold invokes a given command with &lt;code&gt;LD_PRELOAD&lt;/code&gt; environment variable set to its companion shared object file. The shared object file intercepts all function calls to &lt;code&gt;exec(3)&lt;/code&gt;-family functions to replace &lt;code&gt;argv[0]&lt;/code&gt; with &lt;code&gt;mold&lt;/code&gt; if it is &lt;code&gt;ld&lt;/code&gt;, &lt;code&gt;ld.gold&lt;/code&gt; or &lt;code&gt;ld.lld&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;On macOS&lt;/summary&gt; &#xA; &lt;p&gt;mold/macOS is available as an alpha version. It can be used to build not only macOS apps but also iOS apps because their binary formats are the same.&lt;/p&gt; &#xA; &lt;p&gt;The command name of mold/macOS is &lt;code&gt;ld64.mold&lt;/code&gt;. If you build mold on macOS, it still produces &lt;code&gt;mold&lt;/code&gt; and &lt;code&gt;ld.mold&lt;/code&gt;, but these executables are useful only for cross compilation (i.e. building Linux apps on macOS.)&lt;/p&gt; &#xA; &lt;p&gt;If you find any issue with mold/macOS, please file it to &lt;a href=&#34;https://github.com/rui314/mold/issues&#34;&gt;our GitHub Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;GitHub Actions&lt;/summary&gt; &#xA; &lt;p&gt;You can use our &lt;a href=&#34;https://github.com/rui314/setup-mold&#34;&gt;setup-mold&lt;/a&gt; GitHub Action to speed up GitHub-hosted continuous build. GitHub Actions runs on a two-core machine, but mold is still significantly faster than the default GNU linker there especially when a program being linked is large.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Verify that you are using mold&lt;/summary&gt; &#xA; &lt;p&gt;mold leaves its identification string in &lt;code&gt;.comment&lt;/code&gt; section in an output file. You can print it out to verify that you are actually using mold.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ readelf -p .comment &amp;lt;executable-file&amp;gt;&#xA;&#xA;String dump of section &#39;.comment&#39;:&#xA;  [     0]  GCC: (Ubuntu 10.2.0-5ubuntu1~20.04) 10.2.0&#xA;  [    2b]  mold 9a1679b47d9b22012ec7dfbda97c8983956716f7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If &lt;code&gt;mold&lt;/code&gt; is in &lt;code&gt;.comment&lt;/code&gt;, the file is created by mold.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Online manual&lt;/summary&gt; &#xA; &lt;p&gt;Since mold is a drop-in replacement, you should be able to use it without reading its manual. But just in case you need it, it&#39;s available online at &lt;a href=&#34;https://rui314.github.io/mold.html&#34;&gt;here&lt;/a&gt;. You can also read the same manual by &lt;code&gt;man mold&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Why is mold so fast?&lt;/h2&gt; &#xA;&lt;p&gt;One reason is because it simply uses faster algorithms and efficient data structures than other linkers do. The other reason is that the new linker is highly parallelized.&lt;/p&gt; &#xA;&lt;p&gt;Here is a side-by-side comparison of per-core CPU usage of lld (left) and mold (right). They are linking the same program, Chromium executable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rui314/mold/main/docs/htop.gif&#34; alt=&#34;CPU usage comparison in htop animation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As you can see, mold uses all available cores throughout its execution and finishes quickly. On the other hand, lld failed to use available cores most of the time. In this demo, the maximum parallelism is artificially capped to 16 so that the bars fit in the GIF.&lt;/p&gt; &#xA;&lt;p&gt;For details, please read &lt;a href=&#34;https://raw.githubusercontent.com/rui314/mold/main/docs/design.md&#34;&gt;design notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;mold is available under AGPL. Note that that does not mean that you have to license your program under AGPL if you use mold to link your program. An output of the mold linker is a derived work of the object files and libraries you pass to the linker but not a derived work of the mold linker itself.&lt;/p&gt; &#xA;&lt;p&gt;Besides that, you can also buy a commercial, non-AGPL license with technical support from our company, Blue Whale Systems PTE LTD. If you are a big company, please consider obtaining it before making hundreds or thousands of developers of your company to depend on mold. mold is mostly a single-person open-source project, and just like other open-source projects, we are not legally obligated to keep maintaining it. A legally-binding commercial license contract addresses the concern. By purchasing a license, you are guaranteed that mold will be maintained for you. Please &lt;a href=&#34;mailto:contact@bluewhale.systems&#34;&gt;contact us&lt;/a&gt; for a commercial license inquiry.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;We accept donations via &lt;a href=&#34;https://github.com/sponsors/rui314&#34;&gt;GitHub Sponsors&lt;/a&gt; and &lt;a href=&#34;https://opencollective.com/mold-linker&#34;&gt;OpenCollective&lt;/a&gt;. We thank you to everybody who sponsors our project. In particular, we&#39;d like to acknowledge the following people and organizations who have sponsored $128/month or more:&lt;/p&gt; &#xA;&lt;h3&gt;Corporate sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mercury.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rui314/mold/main/docs/mercury-logo.png&#34; align=&#34;center&#34; height=&#34;120&#34; width=&#34;400&#34; alt=&#34;Mercury&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uber.com&#34;&gt;Uber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/signal-slot&#34;&gt;Signal Slot Inc.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Individual sponsors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/300baud&#34;&gt;300baud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/repi&#34;&gt;Johan Andersson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lazyparser&#34;&gt;Wei Wu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyle-elliott&#34;&gt;kyle-elliott&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>redpanda-data/redpanda</title>
    <updated>2022-12-01T01:58:53Z</updated>
    <id>tag:github.com,2022-12-01:/redpanda-data/redpanda</id>
    <link href="https://github.com/redpanda-data/redpanda" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Redpanda is a streaming data platform for developers. Kafka API compatible. 10x faster. No ZooKeeper. No JVM!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Redpanda&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://redpanda.com/documentation&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-black&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://redpanda.com/slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-purple&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=redpandadata&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/redpandadata.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/redpanda-data/redpanda/workflows/Go/badge.svg?sanitize=true&#34; alt=&#34;Go&#34;&gt; &lt;img src=&#34;https://github.com/redpanda-data/redpanda/workflows/build-test/badge.svg?sanitize=true&#34; alt=&#34;C++&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://redpanda.com/redpanda&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://redpanda.com/redpanda&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/redpanda-data/redpanda/dev/docs/PANDA_sitting.jpg&#34; alt=&#34;redpanda sitting&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://static.scarf.sh/a.png?x-pxid=3c187215-e862-4b67-8057-45aa9a779055&#34;&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;Redpanda is a streaming platform for mission critical workloads. Kafka¬Æ compatible, No Zookeeper¬Æ, no JVM, and no code changes required. Use all your favorite open source tooling - 10x faster.&lt;/p&gt; &#xA;&lt;p&gt;We are building a real-time streaming engine for modern applications - from the enterprise to the solo dev prototyping a react application on her laptop. We go beyond the Kafka protocol, into the future of streaming with inline WASM transforms and geo-replicated hierarchical storage. A new platform that scales with you from the smallest projects to petabytes of data distributed across the globe.&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://redpanda.com/slack&#34;&gt;Slack&lt;/a&gt; is the main way the community interacts with one another in real time :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/redpanda-data/redpanda/discussions&#34;&gt;Github Discussion&lt;/a&gt; is preferred for longer, async, thoughtful discussions&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/redpanda-data/redpanda/issues&#34;&gt;GitHub Issues&lt;/a&gt; is reserved only for actual issues. Please use the mailing list for discussions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/redpanda-data/redpanda/dev/CODE_OF_CONDUCT.md&#34;&gt;Code of conduct&lt;/a&gt; code of conduct for the community&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/redpanda-data/redpanda/dev/CONTRIBUTING.md&#34;&gt;Contributing docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h2&gt;Prebuilt Packages&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using our free &amp;amp; prebuilt stable releases below.&lt;/p&gt; &#xA;&lt;h3&gt;On MacOS&lt;/h3&gt; &#xA;&lt;p&gt;Simply download our &lt;code&gt;rpk&lt;/code&gt; &lt;a href=&#34;https://github.com/redpanda-data/redpanda/releases&#34;&gt;binary here&lt;/a&gt;. We require Docker on MacOS&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install redpanda-data/tap/redpanda &amp;amp;&amp;amp; rpk container start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Debian/Ubuntu&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -1sLf \&#xA;  &#39;https://dl.redpanda.com/nzc4ZYQK3WRGd9sy/redpanda/cfg/setup/bash.deb.sh&#39; \&#xA;  | sudo -E bash&#xA;  &#xA;sudo apt-get install redpanda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Fedora/RedHat/Amazon Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -1sLf \&#xA;  &#39;https://dl.redpanda.com/nzc4ZYQK3WRGd9sy/redpanda/cfg/setup/bash.rpm.sh&#39; \&#xA;  | sudo -E bash&#xA;  &#xA;sudo yum install redpanda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GitHub Actions&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    - name: start redpanda&#xA;      uses: redpanda-data/github-action@v0.1.3&#xA;      with:&#xA;        version: &#34;latest&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you should be able to connect to &lt;code&gt;redpanda&lt;/code&gt; (kafka-api) running at &lt;code&gt;localhost:9092&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build Manually&lt;/h2&gt; &#xA;&lt;p&gt;We provide a very simple build system that uses your system libraries. We recommend users leverage our pre-built stable releases which are vetted, tested, and reproducible with exact versions of the entire transitive dependency graph, including exact compilers all built from source. The only thing we do not build yet is the Linux Kernel, but soon!&lt;/p&gt; &#xA;&lt;p&gt;For hackers, here is the short and sweet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo ./install-dependencies.sh &amp;amp;&amp;amp; CC=clang CXX=clang++ ./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For quicker dev setup, we provide a &lt;a href=&#34;https://raw.githubusercontent.com/redpanda-data/redpanda/dev/tools/docker/README.md&#34;&gt;docker image&lt;/a&gt; with the toolchain installed.&lt;/p&gt; &#xA;&lt;h1&gt;Release candidate builds&lt;/h1&gt; &#xA;&lt;p&gt;We create a release candidate (RC) build when we get close to a new release and publish these to make new features available for testing. RC builds are not recommended for production use.&lt;/p&gt; &#xA;&lt;h2&gt;RC releases on Debian/Ubuntu&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -1sLf \&#xA;  &#39;https://dl.redpanda.com/E4xN1tVe3Xy60GTx/redpanda-unstable/setup.deb.sh&#39; \&#xA;  | sudo -E bash&#xA;&#xA;sudo apt-get install redpanda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RC releases on Fedora/RedHat/Amazon Linux&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -1sLf \&#xA;  &#39;https://dl.redpanda.com/E4xN1tVe3Xy60GTx/redpanda-unstable/setup.rpm.sh&#39; \&#xA;  | sudo -E bash&#xA;&#xA;sudo yum install redpanda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RC releases on Docker&lt;/h2&gt; &#xA;&lt;p&gt;This is an example with the &lt;code&gt;v22.1.1-rc1&lt;/code&gt; version prior to the 22.1.1 release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull docker.redpanda.com/vectorized/redpanda-unstable:v22.1.1-rc1&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>