<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-01T01:48:21Z</updated>
  <subtitle>Monthly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ml-explore/mlx</title>
    <updated>2025-07-01T01:48:21Z</updated>
    <id>tag:github.com,2025-07-01:/ml-explore/mlx</id>
    <link href="https://github.com/ml-explore/mlx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MLX: An array framework for Apple silicon&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MLX&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ml-explore/mlx/main/#quickstart&#34;&gt;&lt;strong&gt;Quickstart&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ml-explore/mlx/main/#installation&#34;&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://ml-explore.github.io/mlx/build/html/index.html&#34;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ml-explore/mlx/main/#examples&#34;&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/ml-explore/mlx&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/ml-explore/mlx.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MLX is an array framework for machine learning on Apple silicon, brought to you by Apple machine learning research.&lt;/p&gt; &#xA;&lt;p&gt;Some key features of MLX include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Familiar APIs&lt;/strong&gt;: MLX has a Python API that closely follows NumPy. MLX also has fully featured C++, &lt;a href=&#34;https://github.com/ml-explore/mlx-c&#34;&gt;C&lt;/a&gt;, and &lt;a href=&#34;https://github.com/ml-explore/mlx-swift/&#34;&gt;Swift&lt;/a&gt; APIs, which closely mirror the Python API. MLX has higher-level packages like &lt;code&gt;mlx.nn&lt;/code&gt; and &lt;code&gt;mlx.optimizers&lt;/code&gt; with APIs that closely follow PyTorch to simplify building more complex models.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Composable function transformations&lt;/strong&gt;: MLX supports composable function transformations for automatic differentiation, automatic vectorization, and computation graph optimization.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lazy computation&lt;/strong&gt;: Computations in MLX are lazy. Arrays are only materialized when needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dynamic graph construction&lt;/strong&gt;: Computation graphs in MLX are constructed dynamically. Changing the shapes of function arguments does not trigger slow compilations, and debugging is simple and intuitive.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-device&lt;/strong&gt;: Operations can run on any of the supported devices (currently the CPU and the GPU).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unified memory&lt;/strong&gt;: A notable difference from MLX and other frameworks is the &lt;em&gt;unified memory model&lt;/em&gt;. Arrays in MLX live in shared memory. Operations on MLX arrays can be performed on any of the supported device types without transferring data.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;MLX is designed by machine learning researchers for machine learning researchers. The framework is intended to be user-friendly, but still efficient to train and deploy models. The design of the framework itself is also conceptually simple. We intend to make it easy for researchers to extend and improve MLX with the goal of quickly exploring new ideas.&lt;/p&gt; &#xA;&lt;p&gt;The design of MLX is inspired by frameworks like &lt;a href=&#34;https://numpy.org/doc/stable/index.html&#34;&gt;NumPy&lt;/a&gt;, &lt;a href=&#34;https://pytorch.org/&#34;&gt;PyTorch&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/jax&#34;&gt;Jax&lt;/a&gt;, and &lt;a href=&#34;https://arrayfire.org/&#34;&gt;ArrayFire&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/ml-explore/mlx-examples&#34;&gt;MLX examples repo&lt;/a&gt; has a variety of examples, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ml-explore/mlx-examples/tree/main/transformer_lm&#34;&gt;Transformer language model&lt;/a&gt; training.&lt;/li&gt; &#xA; &lt;li&gt;Large-scale text generation with &lt;a href=&#34;https://github.com/ml-explore/mlx-examples/tree/main/llms/llama&#34;&gt;LLaMA&lt;/a&gt; and finetuning with &lt;a href=&#34;https://github.com/ml-explore/mlx-examples/tree/main/lora&#34;&gt;LoRA&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Generating images with &lt;a href=&#34;https://github.com/ml-explore/mlx-examples/tree/main/stable_diffusion&#34;&gt;Stable Diffusion&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Speech recognition with &lt;a href=&#34;https://github.com/ml-explore/mlx-examples/tree/main/whisper&#34;&gt;OpenAI&#39;s Whisper&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://ml-explore.github.io/mlx/build/html/usage/quick_start.html&#34;&gt;quick start guide&lt;/a&gt; in the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;MLX is available on &lt;a href=&#34;https://pypi.org/project/mlx/&#34;&gt;PyPI&lt;/a&gt;. To install the Python API, run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;With &lt;code&gt;pip&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install mlx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;With &lt;code&gt;conda&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge mlx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checkout the &lt;a href=&#34;https://ml-explore.github.io/mlx/build/html/install.html#&#34;&gt;documentation&lt;/a&gt; for more information on building the C++ and Python APIs from source.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/ml-explore/mlx/tree/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; for more information on contributing to MLX. See the &lt;a href=&#34;https://ml-explore.github.io/mlx/build/html/install.html&#34;&gt;docs&lt;/a&gt; for more information on building from source, and running tests.&lt;/p&gt; &#xA;&lt;p&gt;We are grateful for all of &lt;a href=&#34;https://github.com/ml-explore/mlx/tree/main/ACKNOWLEDGMENTS.md#Individual-Contributors&#34;&gt;our contributors&lt;/a&gt;. If you contribute to MLX and wish to be acknowledged, please add your name to the list in your pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Citing MLX&lt;/h2&gt; &#xA;&lt;p&gt;The MLX software suite was initially developed with equal contribution by Awni Hannun, Jagrit Digani, Angelos Katharopoulos, and Ronan Collobert. If you find MLX useful in your research and wish to cite it, please use the following BibTex entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@software{mlx2023,&#xA;  author = {Awni Hannun and Jagrit Digani and Angelos Katharopoulos and Ronan Collobert},&#xA;  title = {{MLX}: Efficient and flexible machine learning on Apple silicon},&#xA;  url = {https://github.com/ml-explore},&#xA;  version = {0.0},&#xA;  year = {2023},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>duckdb/ducklake</title>
    <updated>2025-07-01T01:48:21Z</updated>
    <id>tag:github.com,2025-07-01:/duckdb/ducklake</id>
    <link href="https://github.com/duckdb/ducklake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DuckLake is an integrated data lake and catalog format&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;../logo/DuckLake_Logo-horizontal.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;../logo/DuckLake_Logo-horizontal-dark.svg&#34;&gt; &#xA;  &lt;img alt=&#34;DuckLake logo&#34; src=&#34;https://raw.githubusercontent.com/duckdb/ducklake/logo/DuckLake_Logo-horizontal.svg?sanitize=true&#34; height=&#34;100&#34;&gt; &#xA; &lt;/picture&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;DuckDB DuckLake Extension&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;DuckLake is released under version 0.1 and is currently experimental. If you encounter any issues, please file them &lt;a href=&#34;https://github.com/duckdb/ducklake/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;DuckLake is an open Lakehouse format that is built on SQL and Parquet. DuckLake stores metadata in a &lt;a href=&#34;https://ducklake.select/docs/stable/duckdb/usage/choosing_a_catalog_database&#34;&gt;catalog database&lt;/a&gt;, and stores data in Parquet files. The DuckLake extension allows DuckDB to directly read and write data from DuckLake.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://ducklake.select&#34;&gt;DuckLake website&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;DuckLake can be installed using the &lt;code&gt;INSTALL&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSTALL ducklake;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The latest development version can be installed from &lt;code&gt;core_nightly&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;FORCE INSTALL ducklake FROM core_nightly;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;DuckLake databases can be attached using the &lt;a href=&#34;https://duckdb.org/docs/stable/sql/statements/attach.html&#34;&gt;&lt;code&gt;ATTACH&lt;/code&gt;&lt;/a&gt; syntax, after which tables can be created, modified and queried using standard SQL.&lt;/p&gt; &#xA;&lt;p&gt;Below is a short usage example that stores the metadata in a DuckDB database file called &lt;code&gt;metadata.ducklake&lt;/code&gt;, and the data in Parquet files in the &lt;code&gt;file_path&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ATTACH &#39;ducklake:metadata.ducklake&#39; AS my_ducklake (DATA_PATH &#39;file_path/&#39;);&#xA;USE my_ducklake;&#xA;CREATE TABLE my_ducklake.my_table(id INTEGER, val VARCHAR);&#xA;INSERT INTO my_ducklake.my_table VALUES (1, &#39;Hello&#39;), (2, &#39;World&#39;);&#xA;FROM my_ducklake.my_table;&#xA;┌───────┬─────────┐&#xA;│  id   │   val   │&#xA;│ int32 │ varchar │&#xA;├───────┼─────────┤&#xA;│     1 │ Hello   │&#xA;│     2 │ World   │&#xA;└───────┴─────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Updates&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE my_ducklake.my_table SET val=&#39;DuckLake&#39; WHERE id=2;&#xA;FROM my_ducklake.my_table;&#xA;┌───────┬──────────┐&#xA;│  id   │   val    │&#xA;│ int32 │ varchar  │&#xA;├───────┼──────────┤&#xA;│     1 │ Hello    │&#xA;│     2 │ DuckLake │&#xA;└───────┴──────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Time Travel&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;FROM my_ducklake.my_table AT (VERSION =&amp;gt; 2);&#xA;┌───────┬─────────┐&#xA;│  id   │   val   │&#xA;│ int32 │ varchar │&#xA;├───────┼─────────┤&#xA;│     1 │ Hello   │&#xA;│     2 │ World   │&#xA;└───────┴─────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Schema Evolution&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE my_ducklake.my_table ADD COLUMN new_column VARCHAR;&#xA;FROM my_ducklake.my_table;&#xA;┌───────┬──────────┬────────────┐&#xA;│  id   │   val    │ new_column │&#xA;│ int32 │ varchar  │  varchar   │&#xA;├───────┼──────────┼────────────┤&#xA;│     1 │ Hello    │ NULL       │&#xA;│     2 │ DuckLake │ NULL       │&#xA;└───────┴──────────┴────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Change Data Feed&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;FROM my_ducklake.table_changes(&#39;my_table&#39;, 2, 2);&#xA;┌─────────────┬───────┬─────────────┬───────┬─────────┐&#xA;│ snapshot_id │ rowid │ change_type │  id   │   val   │&#xA;│    int64    │ int64 │   varchar   │ int32 │ varchar │&#xA;├─────────────┼───────┼─────────────┼───────┼─────────┤&#xA;│           2 │     0 │ insert      │     1 │ Hello   │&#xA;│           2 │     1 │ insert      │     2 │ World   │&#xA;└─────────────┴───────┴─────────────┴───────┴─────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://ducklake.select/docs/stable/duckdb/introduction&#34;&gt;Usage&lt;/a&gt; guide for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Building &amp;amp; Loading the Extension&lt;/h2&gt; &#xA;&lt;p&gt;To build, type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule init&#xA;git submodule update&#xA;# to build with multiple cores, use `make GEN=ninja release`&#xA;make pull&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run, run the bundled &lt;code&gt;duckdb&lt;/code&gt; shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ./build/release/duckdb&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>swiftlang/swift</title>
    <updated>2025-07-01T01:48:21Z</updated>
    <id>tag:github.com,2025-07-01:/swiftlang/swift</id>
    <link href="https://github.com/swiftlang/swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Swift Programming Language&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://www.swift.org/assets/images/swift~dark.svg&#34;&gt; &#xA; &lt;img src=&#34;https://www.swift.org/assets/images/swift.svg?sanitize=true&#34; alt=&#34;Swift logo&#34; height=&#34;70&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;h1&gt;Swift Programming Language&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;&lt;strong&gt;OS&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Status&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;macOS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-macos&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-macos/lastCompletedBuild/badge/icon?subject=universal&#34; alt=&#34;macOS Universal Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Ubuntu 20.04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-20_04&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-20_04/lastCompletedBuild/badge/icon?subject=x86_64&#34; alt=&#34;Ubuntu 20.04 x86_64 Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-20_04-aarch64&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-20_04-aarch64/lastCompletedBuild/badge/icon?subject=aarch64&#34; alt=&#34;Ubuntu 20.04 aarch64 Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Ubuntu 22.04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-22_04&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-22_04/lastCompletedBuild/badge/icon?subject=x86_64&#34; alt=&#34;Ubuntu 22.04 x86_64 Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-22_04-aarch64&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-22_04-aarch64/lastCompletedBuild/badge/icon?subject=aarch64&#34; alt=&#34;Ubuntu 22.04 aarch64 Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Ubuntu 24.04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-24_04&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-24_04/lastCompletedBuild/badge/icon?subject=x86_64&#34; alt=&#34;Ubuntu 24.04 x86_64 Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-24_04-aarch64&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-ubuntu-24_04-aarch64/lastCompletedBuild/badge/icon?subject=aarch64&#34; alt=&#34;Ubuntu 24.04 aarch64 Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Amazon Linux 2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-amazon-linux-2&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-amazon-linux-2/lastCompletedBuild/badge/icon?subject=x86_64&#34; alt=&#34;Amazon Linux 2 x86_64 Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-amazon-linux-2-aarch64&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-amazon-linux-2-aarch64/lastCompletedBuild/badge/icon?subject=aarch64&#34; alt=&#34;Amazon Linux 2 aarch64 Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Debian 12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-debian-12&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-debian-12/lastCompletedBuild/badge/icon?subject=x86_64&#34; alt=&#34;Debian 12 x86_64 Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-debian-12-aarch64&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-debian-12-aarch64/lastCompletedBuild/badge/icon?subject=aarch64&#34; alt=&#34;Debian 12 aarch64 Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci-external.swift.org/job/swift-main-windows-toolchain&#34;&gt;&lt;img src=&#34;https://ci-external.swift.org/job/swift-main-windows-toolchain/lastCompletedBuild/badge/icon?subject=x86_64&#34; alt=&#34;Windows 10 x86_64 Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-external.swift.org/job/swift-main-windows-toolchain-arm64&#34;&gt;&lt;img src=&#34;https://ci-external.swift.org/job/swift-main-windows-toolchain-arm64/lastCompletedBuild/badge/icon?subject=arm64&#34; alt=&#34;Windows 10 arm64 Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Universal Base Image 9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-package-ubi-9&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-package-ubi-9/lastCompletedBuild/badge/icon?subject=x86_64&#34; alt=&#34;Universal Base Image 9 x86_64 Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;strong&gt;Cross-Compilation Targets&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;wasm32-unknown-wasi&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/oss-swift-pr-test-crosscompile-wasm-ubuntu-20_04&#34;&gt;&lt;img src=&#34;https://ci.swift.org/job/oss-swift-pr-test-crosscompile-wasm-ubuntu-20_04/lastCompletedBuild/badge/icon&#34; alt=&#34;wasm32-unknown-wasi Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;strong&gt;Community-Hosted CI Platforms&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://github.com/swiftlang/swift-community-hosted-continuous-integration/raw/main/nodes/x86_64_ubuntu_24_04_android.json&#34;&gt;Android&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci-external.swift.org/job/oss-swift-RA-linux-ubuntu-24.04-android-build&#34;&gt;&lt;img src=&#34;https://ci-external.swift.org/job/oss-swift-RA-linux-ubuntu-24.04-android-build/lastCompletedBuild/badge/icon?subject=x86_64&#34; alt=&#34;Android x86_64 Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-external.swift.org/job/oss-swift-RA-linux-ubuntu-24.04-android-arm64&#34;&gt;&lt;img src=&#34;https://ci-external.swift.org/job/oss-swift-RA-linux-ubuntu-24.04-android-arm64/lastCompletedBuild/badge/icon?subject=aarch64&#34; alt=&#34;Android aarch64 Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Welcome to Swift&lt;/h2&gt; &#xA;&lt;p&gt;Swift is a high-performance system programming language. It has a clean and modern syntax, offers seamless access to existing C and Objective-C code and frameworks, and is memory-safe by default.&lt;/p&gt; &#xA;&lt;p&gt;Although inspired by Objective-C and many other languages, Swift is not itself a C-derived language. As a complete and independent language, Swift packages core features like flow control, data structures, and functions, with high-level constructs like objects, protocols, closures, and generics. Swift embraces modules, eliminating the need for headers and the code duplication they entail.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about the programming language, visit &lt;a href=&#34;https://swift.org/documentation/&#34;&gt;swift.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/#contributing-to-swift&#34;&gt;Contributing to Swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/#swift-toolchains&#34;&gt;Swift Toolchains&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/#build-failures&#34;&gt;Build Failures&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/#learning-more&#34;&gt;Learning More&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to Swift&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to Swift are welcomed and encouraged! Please see the &lt;a href=&#34;https://swift.org/contributing/&#34;&gt;Contributing to Swift guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before submitting the pull request, please make sure you have &lt;a href=&#34;https://github.com/apple/swift/raw/main/docs/ContinuousIntegration.md&#34;&gt;tested your changes&lt;/a&gt; and that they follow the Swift project &lt;a href=&#34;https://swift.org/contributing/#contributing-code&#34;&gt;guidelines for contributing code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To be a truly great community, &lt;a href=&#34;https://swift.org/&#34;&gt;Swift.org&lt;/a&gt; needs to welcome developers from all walks of life, with different backgrounds, and with a wide range of experience. A diverse and friendly community will have more great ideas, more unique perspectives, and produce more great code. We will work diligently to make the Swift community welcoming to everyone.&lt;/p&gt; &#xA;&lt;p&gt;To give clarity of what is expected of our members, Swift has adopted the code of conduct defined by the Contributor Covenant. This document is used across many open source communities, and we think it articulates our values well. For more, see the &lt;a href=&#34;https://swift.org/code-of-conduct/&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributing fixes and features to the compiler: See our &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/HowToGuides/FirstPullRequest.md&#34;&gt;How to Submit Your First Pull Request guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Building the compiler as a one-off: See our &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/HowToGuides/GettingStarted.md&#34;&gt;Getting Started guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Building a toolchain as a one-off: Follow the &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/HowToGuides/GettingStarted.md&#34;&gt;Getting Started guide&lt;/a&gt; up until the &#34;Building the project&#34; section. After that, follow the instructions in the &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/#swift-toolchains&#34;&gt;Swift Toolchains&lt;/a&gt; section below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also have an &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/HowToGuides/FAQ.md&#34;&gt;FAQ&lt;/a&gt; that answers common questions.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Toolchains&lt;/h3&gt; &#xA;&lt;h4&gt;Building&lt;/h4&gt; &#xA;&lt;p&gt;Swift toolchains are created using the script &lt;a href=&#34;https://github.com/apple/swift/raw/main/utils/build-toolchain&#34;&gt;build-toolchain&lt;/a&gt;. This script is used by swift.org&#39;s CI to produce snapshots and can allow for one to locally reproduce such builds for development or distribution purposes. A typical invocation looks like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  $ ./swift/utils/build-toolchain $BUNDLE_PREFIX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;$BUNDLE_PREFIX&lt;/code&gt; is a string that will be prepended to the build date to give the bundle identifier of the toolchain&#39;s &lt;code&gt;Info.plist&lt;/code&gt;. For instance, if &lt;code&gt;$BUNDLE_PREFIX&lt;/code&gt; was &lt;code&gt;com.example&lt;/code&gt;, the toolchain produced will have the bundle identifier &lt;code&gt;com.example.YYYYMMDD&lt;/code&gt;. It will be created in the directory you run the script with a filename of the form: &lt;code&gt;swift-LOCAL-YYYY-MM-DD-a-osx.tar.gz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Beyond building the toolchain, &lt;code&gt;build-toolchain&lt;/code&gt; also supports the following (non-exhaustive) set of useful options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--dry-run&lt;/code&gt;: Perform a dry run build. This is off by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--test&lt;/code&gt;: Test the toolchain after it has been compiled. This is off by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--distcc&lt;/code&gt;: Use distcc to speed up the build by distributing the C++ part of the swift build. This is off by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--sccache&lt;/code&gt;: Use sccache to speed up subsequent builds of the compiler by caching more C++ build artifacts. This is off by default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More options may be added over time. Please pass &lt;code&gt;--help&lt;/code&gt; to &lt;code&gt;build-toolchain&lt;/code&gt; to see the full set of options.&lt;/p&gt; &#xA;&lt;h4&gt;Installing into Xcode&lt;/h4&gt; &#xA;&lt;p&gt;On macOS if one wants to install such a toolchain into Xcode:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Untar and copy the toolchain to one of &lt;code&gt;/Library/Developer/Toolchains/&lt;/code&gt; or &lt;code&gt;~/Library/Developer/Toolchains/&lt;/code&gt;. E.g.:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  $ sudo tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx.tar.gz -C /&#xA;  $ tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx.tar.gz -C ~/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script also generates an archive containing debug symbols which can be installed over the main archive allowing symbolication of any compiler crashes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  $ sudo tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx-symbols.tar.gz -C /&#xA;  $ tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx-symbols.tar.gz -C ~/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Specify the local toolchain for Xcode&#39;s use via &lt;code&gt;Xcode-&amp;gt;Toolchains&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build Failures&lt;/h3&gt; &#xA;&lt;p&gt;Try the suggestions in &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/HowToGuides/GettingStarted.md#troubleshooting-build-issues&#34;&gt;Troubleshooting build issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you are using the &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/HowToGuides/GettingStarted.md#installing-dependencies&#34;&gt;correct release&lt;/a&gt; of Xcode.&lt;/p&gt; &#xA;&lt;p&gt;If you have changed Xcode versions but still encounter errors that appear to be related to the Xcode version, try passing &lt;code&gt;--clean&lt;/code&gt; to &lt;code&gt;build-script&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When a new version of Xcode is released, you can update your build without recompiling the entire project by passing &lt;code&gt;--reconfigure&lt;/code&gt; to &lt;code&gt;build-script&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Learning More&lt;/h2&gt; &#xA;&lt;p&gt;Be sure to look at the &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/README.md&#34;&gt;documentation index&lt;/a&gt; for a bird&#39;s eye view of the available documentation. In particular, the documents titled &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/DebuggingTheCompiler.md&#34;&gt;Debugging the Swift Compiler&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift/main/docs/ContinuousIntegration.md&#34;&gt;Continuous Integration for Swift&lt;/a&gt; are very helpful to understand before submitting your first PR.&lt;/p&gt;</summary>
  </entry>
</feed>