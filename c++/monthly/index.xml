<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-01T01:48:54Z</updated>
  <subtitle>Monthly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>duckdb/duckdb</title>
    <updated>2022-09-01T01:48:54Z</updated>
    <id>tag:github.com,2022-09-01:/duckdb/duckdb</id>
    <link href="https://github.com/duckdb/duckdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DuckDB is an in-process SQL OLAP Database Management System&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://duckdb.org/images/DuckDB_Logo_dl.png&#34; height=&#34;50&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/duckdb/duckdb/actions&#34;&gt; &lt;img src=&#34;https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=master&#34; alt=&#34;Github Actions Badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/cwida/duckdb&#34;&gt; &lt;img src=&#34;https://www.codefactor.io/repository/github/cwida/duckdb/badge&#34; alt=&#34;CodeFactor&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/duckdb/duckdb&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN&#34; alt=&#34;codecov&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/tcvwpjfnZx&#34;&gt; &lt;img src=&#34;https://shields.io/discord/909674491309850675&#34; alt=&#34;discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;DuckDB&lt;/h2&gt; &#xA;&lt;p&gt;DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to &lt;a href=&#34;https://duckdb.org/why_duckdb&#34;&gt;the Why DuckDB page on our website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you want to install and use DuckDB, please see &lt;a href=&#34;https://www.duckdb.org&#34;&gt;our website&lt;/a&gt; for installation and usage instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Data Import&lt;/h2&gt; &#xA;&lt;p&gt;For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM &#39;myfile.csv&#39;;&#xA;SELECT * FROM &#39;myfile.parquet&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to our &lt;a href=&#34;https://duckdb.org/docs/data/overview&#34;&gt;Data Import&lt;/a&gt; section for more information.&lt;/p&gt; &#xA;&lt;h2&gt;SQL Reference&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://duckdb.org/docs/sql/introduction&#34;&gt;website&lt;/a&gt; contains a reference of functions and SQL constructs available in DuckDB.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;For development, DuckDB requires &lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt;, Python3 and a &lt;code&gt;C++11&lt;/code&gt; compliant compiler. Run &lt;code&gt;make&lt;/code&gt; in the root directory to compile the sources. For development, use &lt;code&gt;make debug&lt;/code&gt; to build a non-optimized debug version. You should run &lt;code&gt;make unit&lt;/code&gt; and &lt;code&gt;make allunit&lt;/code&gt; to verify that your version works properly after making changes. To test performance, you can run &lt;code&gt;BUILD_BENCHMARK=1 BUILD_TPCH=1 make&lt;/code&gt; and then perform several standard benchmarks from the root directory by executing &lt;code&gt;./build/release/benchmark/benchmark_runner&lt;/code&gt;. The detail of benchmarks is in our &lt;a href=&#34;https://raw.githubusercontent.com/duckdb/duckdb/master/benchmark/README.md&#34;&gt;Benchmark Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please also refer to our &lt;a href=&#34;https://raw.githubusercontent.com/duckdb/duckdb/master/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MarlinFirmware/Marlin</title>
    <updated>2022-09-01T01:48:54Z</updated>
    <id>tag:github.com,2022-09-01:/MarlinFirmware/Marlin</id>
    <link href="https://github.com/MarlinFirmware/Marlin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Marlin is an optimized firmware for RepRap 3D printers based on the Arduino platform. | Many commercial 3D printers come with Marlin installed. Check with your vendor if you need source code for your specific machine.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MarlinFirmware/Marlin/bugfix-2.1.x/buildroot/share/pixmaps/logo/marlin-outrun-nf-500.png&#34; height=&#34;250&#34; alt=&#34;MarlinFirmware&#39;s logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Marlin 3D Printer Firmware&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/MarlinFirmware/Marlin/bugfix-2.1.x/LICENSE&#34;&gt;&lt;img alt=&#34;GPL-V3.0 License&#34; src=&#34;https://img.shields.io/github/license/marlinfirmware/marlin.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/graphs/contributors&#34;&gt;&lt;img alt=&#34;Contributors&#34; src=&#34;https://img.shields.io/github/contributors/marlinfirmware/marlin.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/releases&#34;&gt;&lt;img alt=&#34;Last Release Date&#34; src=&#34;https://img.shields.io/github/release-date/MarlinFirmware/Marlin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/actions&#34;&gt;&lt;img alt=&#34;CI Status&#34; src=&#34;https://github.com/MarlinFirmware/Marlin/actions/workflows/test-builds.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/thinkyhead&#34;&gt;&lt;img alt=&#34;GitHub Sponsors&#34; src=&#34;https://img.shields.io/github/sponsors/thinkyhead?color=db61a2&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://twitter.com/MarlinFirmware&#34;&gt;&lt;img alt=&#34;Follow MarlinFirmware on Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/MarlinFirmware?style=social&amp;amp;logo=twitter&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Additional documentation can be found at the &lt;a href=&#34;https://marlinfw.org/&#34;&gt;Marlin Home Page&lt;/a&gt;. Please test this firmware and let us know if it misbehaves in any way. Volunteers are standing by!&lt;/p&gt; &#xA;&lt;h2&gt;Marlin 2.1 Bugfix Branch&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not for production use. Use with caution!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Marlin 2.1 takes this popular RepRap firmware to the next level by adding support for much faster 32-bit and ARM-based boards while improving support for 8-bit AVR boards. Read about Marlin&#39;s decision to use a &#34;Hardware Abstraction Layer&#34; below.&lt;/p&gt; &#xA;&lt;p&gt;This branch is for patches to the latest 2.1.x release version. Periodically this branch will form the basis for the next minor 2.1.x release.&lt;/p&gt; &#xA;&lt;p&gt;Download earlier versions of Marlin on the &lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/releases&#34;&gt;Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example Configurations&lt;/h2&gt; &#xA;&lt;p&gt;Before building Marlin you&#39;ll need to configure it for your specific hardware. Your vendor should have already provided source code with configurations for the installed firmware, but if you ever decide to upgrade you&#39;ll need updated configuration files. Marlin users have contributed dozens of tested example configurations to get you started. Visit the &lt;a href=&#34;https://github.com/MarlinFirmware/Configurations&#34;&gt;MarlinFirmware/Configurations&lt;/a&gt; repository to find the right configuration for your hardware.&lt;/p&gt; &#xA;&lt;h2&gt;Building Marlin 2.1&lt;/h2&gt; &#xA;&lt;p&gt;To build Marlin 2.1 you&#39;ll need &lt;a href=&#34;https://www.arduino.cc/en/main/software&#34;&gt;Arduino IDE 1.8.8 or newer&lt;/a&gt; or &lt;a href=&#34;https://docs.platformio.org/en/latest/ide.html#platformio-ide&#34;&gt;PlatformIO&lt;/a&gt;. We&#39;ve posted detailed instructions on &lt;a href=&#34;https://marlinfw.org/docs/basics/install_arduino.html&#34;&gt;Building Marlin with Arduino&lt;/a&gt; and &lt;a href=&#34;https://marlinfw.org/docs/basics/install_rearm.html&#34;&gt;Building Marlin with PlatformIO for ReArm&lt;/a&gt; (which applies well to other 32-bit boards).&lt;/p&gt; &#xA;&lt;h2&gt;Hardware Abstraction Layer (HAL)&lt;/h2&gt; &#xA;&lt;p&gt;Marlin 2.0 introduced a layer of abstraction to allow all the existing high-level code to be built for 32-bit platforms while still retaining full 8-bit AVR compatibility. Retaining AVR compatibility and a single code-base is important to us, because we want to make sure that features and patches get as much testing and attention as possible, and that all platforms always benefit from the latest improvements.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Platforms&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;MCU&lt;/th&gt; &#xA;   &lt;th&gt;Example Boards&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.arduino.cc/&#34;&gt;Arduino AVR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ATmega&lt;/td&gt; &#xA;   &lt;td&gt;RAMPS, Melzi, RAMBo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.microchip.com/en-us/product/AT90USB1286&#34;&gt;Teensy++ 2.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AT90USB1286&lt;/td&gt; &#xA;   &lt;td&gt;Printrboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.arduino.cc/en/Guide/ArduinoDue&#34;&gt;Arduino Due&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SAM3X8E&lt;/td&gt; &#xA;   &lt;td&gt;RAMPS-FD, RADDS, RAMPS4DUE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/espressif/arduino-esp32&#34;&gt;ESP32&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ESP32&lt;/td&gt; &#xA;   &lt;td&gt;FYSETC E4, E4d@BOX, MRR&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/general-purpose-mcus/lpc1700-cortex-m3/512-kb-flash-64-kb-sram-ethernet-usb-lqfp100-package:LPC1768FBD100&#34;&gt;LPC1768&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M3&lt;/td&gt; &#xA;   &lt;td&gt;MKS SBASE, Re-ARM, Selena Compact&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/general-purpose-mcus/lpc1700-cortex-m3/512-kb-flash-64-kb-sram-ethernet-usb-lqfp100-package:LPC1769FBD100&#34;&gt;LPC1769&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M3&lt;/td&gt; &#xA;   &lt;td&gt;Smoothieboard, Azteeg X5 mini, TH3D EZBoard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.st.com/en/microcontrollers-microprocessors/stm32f103.html&#34;&gt;STM32F103&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M3&lt;/td&gt; &#xA;   &lt;td&gt;Malyan M200, GTM32 Pro, MKS Robin, BTT SKR Mini&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.st.com/en/microcontrollers-microprocessors/stm32f401.html&#34;&gt;STM32F401&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M4&lt;/td&gt; &#xA;   &lt;td&gt;ARMED, Rumba32, SKR Pro, Lerdge, FYSETC S6, Artillery Ruby&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.st.com/en/microcontrollers-microprocessors/stm32f7x6.html&#34;&gt;STM32F7x6&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M7&lt;/td&gt; &#xA;   &lt;td&gt;The Borg, RemRam V1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.st.com/en/microcontrollers-microprocessors/stm32g0x1.html&#34;&gt;STM32G0B1RET6&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M0+&lt;/td&gt; &#xA;   &lt;td&gt;BigTreeTech SKR mini E3 V3.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.st.com/en/microcontrollers-microprocessors/stm32h743-753.html&#34;&gt;STM32H743xIT6&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M7&lt;/td&gt; &#xA;   &lt;td&gt;BigTreeTech SKR V3.0, SKR EZ V3.0, SKR SE BX V2.0/V3.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.adafruit.com/product/4064&#34;&gt;SAMD51P20A&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M4&lt;/td&gt; &#xA;   &lt;td&gt;Adafruit Grand Central M4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.pjrc.com/store/teensy35.html&#34;&gt;Teensy 3.5&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.pjrc.com/store/teensy36.html&#34;&gt;Teensy 3.6&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.pjrc.com/store/teensy40.html&#34;&gt;Teensy 4.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.pjrc.com/store/teensy41.html&#34;&gt;Teensy 4.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux Native&lt;/td&gt; &#xA;   &lt;td&gt;x86/ARM/etc.&lt;/td&gt; &#xA;   &lt;td&gt;Raspberry Pi&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Submitting Patches&lt;/h2&gt; &#xA;&lt;p&gt;Proposed patches should be submitted as a Pull Request against the (&lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/tree/bugfix-2.1.x&#34;&gt;bugfix-2.1.x&lt;/a&gt;) branch.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This branch is for fixing bugs and integrating any new features for the duration of the Marlin 2.0.x life-cycle.&lt;/li&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://marlinfw.org/docs/development/coding_standards.html&#34;&gt;Coding Standards&lt;/a&gt; to gain points with the maintainers.&lt;/li&gt; &#xA; &lt;li&gt;Please submit Feature Requests and Bug Reports to the &lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/issues/new/choose&#34;&gt;Issue Queue&lt;/a&gt;. Support resources are also listed there.&lt;/li&gt; &#xA; &lt;li&gt;Whenever you add new features, be sure to add tests to &lt;code&gt;buildroot/tests&lt;/code&gt; and then run your tests locally, if possible. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It&#39;s optional: Running all the tests on Windows might take a long time, and they will run anyway on GitHub.&lt;/li&gt; &#xA;   &lt;li&gt;If you&#39;re running the tests on Linux (or on WSL with the code on a Linux volume) the speed is much faster.&lt;/li&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;make tests-all-local&lt;/code&gt; or &lt;code&gt;make tests-single-local TEST_TARGET=...&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If you prefer Docker you can use &lt;code&gt;make tests-all-local-docker&lt;/code&gt; or &lt;code&gt;make tests-all-local-docker TEST_TARGET=...&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Marlin Support&lt;/h2&gt; &#xA;&lt;p&gt;The Issue Queue is reserved for Bug Reports and Feature Requests. To get help with configuration and troubleshooting, please use the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marlinfw.org&#34;&gt;Marlin Documentation&lt;/a&gt; - Official Marlin documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/n5NJ59y&#34;&gt;Marlin Discord&lt;/a&gt; - Discuss issues with Marlin users and developers&lt;/li&gt; &#xA; &lt;li&gt;Facebook Group &lt;a href=&#34;https://www.facebook.com/groups/1049718498464482/&#34;&gt;&#34;Marlin Firmware&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RepRap.org &lt;a href=&#34;https://forums.reprap.org/list.php?415&#34;&gt;Marlin Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Facebook Group &lt;a href=&#34;https://www.facebook.com/groups/3Dtechtalk/&#34;&gt;&#34;Marlin Firmware for 3D Printers&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/results?search_query=marlin+configuration&#34;&gt;Marlin Configuration&lt;/a&gt; on YouTube&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Marlin is constantly improving thanks to a huge number of contributors from all over the world bringing their specialties and talents. Huge thanks are due to &lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/graphs/contributors&#34;&gt;all the contributors&lt;/a&gt; who regularly patch up bugs, help direct traffic, and basically keep Marlin from falling apart. Marlin&#39;s continued existence would not be possible without them.&lt;/p&gt; &#xA;&lt;h2&gt;Administration&lt;/h2&gt; &#xA;&lt;p&gt;Regular users can open and close their own issues, but only the administrators can do project-related things like add labels, merge changes, set milestones, and kick trolls. The current Marlin admin team consists of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scott Lahteine [&lt;a href=&#34;https://github.com/thinkyhead&#34;&gt;@thinkyhead&lt;/a&gt;] - USA - Project Maintainer &amp;nbsp; &lt;a href=&#34;https://www.thinkyhead.com/donate-to-marlin&#34;&gt;💸 Donate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Roxanne Neufeld [&lt;a href=&#34;https://github.com/Roxy-3D&#34;&gt;@Roxy-3D&lt;/a&gt;] - USA&lt;/li&gt; &#xA; &lt;li&gt;Keith Bennett [&lt;a href=&#34;https://github.com/thisiskeithb&#34;&gt;@thisiskeithb&lt;/a&gt;] - USA &amp;nbsp; &lt;a href=&#34;https://github.com/sponsors/thisiskeithb&#34;&gt;💸 Donate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Peter Ellens [&lt;a href=&#34;https://github.com/ellensp&#34;&gt;@ellensp&lt;/a&gt;] - New Zealand &amp;nbsp; &lt;a href=&#34;https://ko-fi.com/ellensp&#34;&gt;💸 Donate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Victor Oliveira [&lt;a href=&#34;https://github.com/rhapsodyv&#34;&gt;@rhapsodyv&lt;/a&gt;] - Brazil&lt;/li&gt; &#xA; &lt;li&gt;Chris Pepper [&lt;a href=&#34;https://github.com/p3p&#34;&gt;@p3p&lt;/a&gt;] - UK&lt;/li&gt; &#xA; &lt;li&gt;Jason Smith [&lt;a href=&#34;https://github.com/sjasonsmith&#34;&gt;@sjasonsmith&lt;/a&gt;] - USA&lt;/li&gt; &#xA; &lt;li&gt;Luu Lac [&lt;a href=&#34;https://github.com/shitcreek&#34;&gt;@shitcreek&lt;/a&gt;] - USA&lt;/li&gt; &#xA; &lt;li&gt;Bob Kuhn [&lt;a href=&#34;https://github.com/Bob-the-Kuhn&#34;&gt;@Bob-the-Kuhn&lt;/a&gt;] - USA&lt;/li&gt; &#xA; &lt;li&gt;Erik van der Zalm [&lt;a href=&#34;https://github.com/ErikZalm&#34;&gt;@ErikZalm&lt;/a&gt;] - Netherlands &amp;nbsp; &lt;a href=&#34;https://flattr.com/submit/auto?user_id=ErikZalm&amp;amp;url=https://github.com/MarlinFirmware/Marlin&amp;amp;title=Marlin&amp;amp;language=&amp;amp;tags=github&amp;amp;category=software&#34;&gt;💸 Donate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Marlin is published under the &lt;a href=&#34;https://raw.githubusercontent.com/MarlinFirmware/Marlin/bugfix-2.1.x/LICENSE&#34;&gt;GPL license&lt;/a&gt; because we believe in open development. The GPL comes with both rights and obligations. Whether you use Marlin firmware as the driver for your open or closed-source product, you must keep Marlin open, and you must provide your compatible Marlin source code to end users upon request. The most straightforward way to comply with the Marlin license is to make a fork of Marlin on Github, perform your modifications, and direct users to your modified fork.&lt;/p&gt; &#xA;&lt;p&gt;While we can&#39;t prevent the use of this code in products (3D printers, CNC, etc.) that are closed source or crippled by a patent, we would prefer that you choose another firmware or, better yet, make your own.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stenzek/duckstation</title>
    <updated>2022-09-01T01:48:54Z</updated>
    <id>tag:github.com,2022-09-01:/stenzek/duckstation</id>
    <link href="https://github.com/stenzek/duckstation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast PlayStation 1 emulator for x86-64/AArch32/AArch64&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DuckStation - PlayStation 1, aka. PSX Emulator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#latest-news&#34;&gt;Latest News&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#features&#34;&gt;Features&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#downloading-and-running&#34;&gt;Downloading and Running&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#building&#34;&gt;Building&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#disclaimers&#34;&gt;Disclaimers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Discord Server:&lt;/strong&gt; &lt;a href=&#34;https://discord.gg/Buktv3t&#34;&gt;https://discord.gg/Buktv3t&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Latest Builds for Windows and Linux (AppImage)&lt;/strong&gt; &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/tag/latest&#34;&gt;https://github.com/stenzek/duckstation/releases/tag/latest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Game Compatibility List:&lt;/strong&gt; &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1H66MxViRjjE5f8hOl5RQmF5woS1murio2dsLn14kEqo/edit&#34;&gt;https://docs.google.com/spreadsheets/d/1H66MxViRjjE5f8hOl5RQmF5woS1murio2dsLn14kEqo/edit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Wiki:&lt;/strong&gt; &lt;a href=&#34;https://www.duckstation.org/wiki/&#34;&gt;https://www.duckstation.org/wiki/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DuckStation is an simulator/emulator of the Sony PlayStation(TM) console, focusing on playability, speed, and long-term maintainability. The goal is to be as accurate as possible while maintaining performance suitable for low-end devices. &#34;Hack&#34; options are discouraged, the default configuration should support all playable games with only some of the enhancements having compatibility issues.&lt;/p&gt; &#xA;&lt;p&gt;A &#34;BIOS&#34; ROM image is required to to start the emulator and to play games. You can use an image from any hardware version or region, although mismatching game regions and BIOS regions may have compatibility issues. A ROM image is not provided with the emulator for legal reasons, you should dump this from your own console using Caetla or other means.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;DuckStation features a fully-featured frontend built using Qt, as well as a fullscreen/TV UI based on Dear ImGui.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/main-qt.png&#34; alt=&#34;Main Window Screenshot&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/bigduck.png&#34; alt=&#34;Fullscreen UI Screenshot&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Other features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU Recompiler/JIT (x86-64, armv7/AArch32 and AArch64)&lt;/li&gt; &#xA; &lt;li&gt;Hardware (D3D11, D3D12, OpenGL, Vulkan) and software rendering&lt;/li&gt; &#xA; &lt;li&gt;Upscaling, texture filtering, and true colour (24-bit) in hardware renderers&lt;/li&gt; &#xA; &lt;li&gt;PGXP for geometry precision, texture correction, and depth buffer emulation&lt;/li&gt; &#xA; &lt;li&gt;Adaptive downsampling filter&lt;/li&gt; &#xA; &lt;li&gt;Post processing shader chains&lt;/li&gt; &#xA; &lt;li&gt;&#34;Fast boot&#34; for skipping BIOS splash/intro&lt;/li&gt; &#xA; &lt;li&gt;Save state support&lt;/li&gt; &#xA; &lt;li&gt;Windows, Linux, &lt;strong&gt;highly experimental&lt;/strong&gt; macOS support&lt;/li&gt; &#xA; &lt;li&gt;Supports bin/cue images, raw bin/img files, MAME CHD, single-track ECM, MDS/MDF, and unencrypted PBP formats.&lt;/li&gt; &#xA; &lt;li&gt;Direct booting of homebrew executables&lt;/li&gt; &#xA; &lt;li&gt;Direct loading of Portable Sound Format (psf) files&lt;/li&gt; &#xA; &lt;li&gt;Digital and analog controllers for input (rumble is forwarded to host)&lt;/li&gt; &#xA; &lt;li&gt;Namco GunCon lightgun support (simulated with mouse)&lt;/li&gt; &#xA; &lt;li&gt;NeGcon support&lt;/li&gt; &#xA; &lt;li&gt;Qt and &#34;Big Picture&#34; UI&lt;/li&gt; &#xA; &lt;li&gt;Automatic updates for Windows builds&lt;/li&gt; &#xA; &lt;li&gt;Automatic content scanning - game titles/hashes are provided by redump.org&lt;/li&gt; &#xA; &lt;li&gt;Optional automatic switching of memory cards for each game&lt;/li&gt; &#xA; &lt;li&gt;Supports loading cheats from existing lists&lt;/li&gt; &#xA; &lt;li&gt;Memory card editor and save importer&lt;/li&gt; &#xA; &lt;li&gt;Emulated CPU overclocking&lt;/li&gt; &#xA; &lt;li&gt;Integrated and remote debugging&lt;/li&gt; &#xA; &lt;li&gt;Multitap controllers (up to 8 devices)&lt;/li&gt; &#xA; &lt;li&gt;RetroAchievements&lt;/li&gt; &#xA; &lt;li&gt;Automatic loading/applying of PPF patches&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A CPU faster than a potato. But it needs to be x86_64, AArch32/armv7, or AArch64/ARMv8, otherwise you won&#39;t get a recompiler and it&#39;ll be slow.&lt;/li&gt; &#xA; &lt;li&gt;For the hardware renderers, a GPU capable of OpenGL 3.1/OpenGL ES 3.0/Direct3D 11 Feature Level 10.0 (or Vulkan 1.0) and above. So, basically anything made in the last 10 years or so.&lt;/li&gt; &#xA; &lt;li&gt;SDL, XInput or DInput compatible game controller (e.g. XB360/XBOne). DualShock 3 users on Windows will need to install the official DualShock 3 drivers included as part of PlayStation Now.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloading and running&lt;/h2&gt; &#xA;&lt;p&gt;Binaries of DuckStation for Windows x64/ARM64, Linux x86_64 (in AppImage format), and Android ARMv7/ARMv8 are available via GitHub Releases and are automatically built with every commit/push. Binaries or packages distributed through other sources may be out of date and are not supported by the developer, please speak to them for support, not us.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows 10 is the only version of Windows supported by the developer.&lt;/strong&gt; Windows 7/8 may work, but is not supported. I am aware some users are still using Windows 7, but it is no longer supported by Microsoft and too much effort to get running on modern hardware. Game bugs are unlikely to be affected by the operating system, however performance issues should be verified on Windows 10 before reporting.&lt;/p&gt; &#xA;&lt;p&gt;To download:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/tag/latest&#34;&gt;https://github.com/stenzek/duckstation/releases/tag/latest&lt;/a&gt;, and download the Windows x64 build. This is a zip archive containing the prebuilt binary.&lt;/li&gt; &#xA; &lt;li&gt;Alternatively, direct download link: &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/download/latest/duckstation-windows-x64-release.zip&#34;&gt;https://github.com/stenzek/duckstation/releases/download/latest/duckstation-windows-x64-release.zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract the archive &lt;strong&gt;to a subdirectory&lt;/strong&gt;. The archive has no root subdirectory, so extracting to the current directory will drop a bunch of files in your download directory if you do not extract to a subdirectory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once downloaded and extracted, you can launch the emulator with &lt;code&gt;duckstation-qt-x64-ReleaseLTCG.exe&lt;/code&gt;. To set up:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Either configure the path to a BIOS image in the settings, or copy one or more PlayStation BIOS images to the bios/ subdirectory. On Windows, by default this will be located in &lt;code&gt;C:\Users\YOUR_USERNAME\Documents\DuckStation\bios&lt;/code&gt;. If you don&#39;t want to use the Documents directory to save the BIOS/memory cards/etc, you can use portable mode. See &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#user-directories&#34;&gt;User directory&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If using the Qt frontend, add the directories containing your disc images by clicking &lt;code&gt;Settings-&amp;gt;Add Game Directory&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select a game from the list, or open a disc image file and enjoy.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you get an error about &lt;code&gt;vcruntime140_1.dll&lt;/code&gt; being missing, you will need to update your Visual C++ runtime.&lt;/strong&gt; You can do that from this page: &lt;a href=&#34;https://support.microsoft.com/en-au/help/2977003/the-latest-supported-visual-c-downloads&#34;&gt;https://support.microsoft.com/en-au/help/2977003/the-latest-supported-visual-c-downloads&lt;/a&gt;. Specifically, you want the x64 runtime, which can be downloaded from &lt;a href=&#34;https://aka.ms/vs/17/release/vc_redist.x64.exe&#34;&gt;https://aka.ms/vs/17/release/vc_redist.x64.exe&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows 7 users, TLS 1.2 is not supported by default and you will not be able to use the automatic updater or RetroAchievements.&lt;/strong&gt; This knowledge base article contains instructions for enabling TLS 1.1/1.2: &lt;a href=&#34;https://support.microsoft.com/en-us/topic/update-to-enable-tls-1-1-and-tls-1-2-as-default-secure-protocols-in-winhttp-in-windows-c4bd73d2-31d7-761e-0178-11268bb10392&#34;&gt;https://support.microsoft.com/en-us/topic/update-to-enable-tls-1-1-and-tls-1-2-as-default-secure-protocols-in-winhttp-in-windows-c4bd73d2-31d7-761e-0178-11268bb10392&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Qt frontend includes an automatic update checker. Builds downloaded after 2020/08/07 will automatically check for updates each time the emulator starts, this can be disabled in Settings. Alternatively, you can force an update check by clicking &lt;code&gt;Help-&amp;gt;Check for Updates&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;The only supported version of DuckStation for Linux are the AppImages in the releases page. The AppImages require a distribution equivalent to Ubuntu 20.04 or newer to run, which is also the minimum requirement for Qt 6. If you are using a packaged version of DuckStation from another source, please do not ask us for assistance and speak to your packager instead, they have a history of breaking things and there&#39;s a good chance that&#39;s the issue.&lt;/p&gt; &#xA;&lt;h4&gt;Binaries&lt;/h4&gt; &#xA;&lt;p&gt;To download:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/tag/preview&#34;&gt;https://github.com/stenzek/duckstation/releases/tag/preview&lt;/a&gt;, and download &lt;code&gt;duckstation-qt.AppImage&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;chmod a+x&lt;/code&gt; on the downloaded AppImage -- following this step, the AppImage can be run like a typical executable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Universal MacOS builds are provided for both x64 and ARM64 (Apple Silicon). However, due to lack of hardware, investigating issues is difficult, so we can&#39;t guarantee everything functions as intended.&lt;/p&gt; &#xA;&lt;p&gt;To download:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/tag/preview&#34;&gt;https://github.com/stenzek/duckstation/releases/tag/preview&lt;/a&gt;, and download &lt;code&gt;duckstation-mac-release.zip&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Extract the zip by double-clicking it.&lt;/li&gt; &#xA; &lt;li&gt;Open DuckStation.app, optionally moving it to your desired location first.&lt;/li&gt; &#xA; &lt;li&gt;Depending on GateKeeper configuration, you may need to right click -&amp;gt; Open the first time you run it, as code signing certificates are out of the question for a project which brings in zero revenue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;You will need a device with armv7 (32-bit ARM), AArch64 (64-bit ARM), or x86_64 (64-bit x86). 64-bit is preferred, the requirements are higher for 32-bit, you&#39;ll probably want at least a 1.5GHz CPU.&lt;/p&gt; &#xA;&lt;p&gt;Google Play is the preferred distribution mechanism and will result in smaller download sizes: &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.github.stenzek.duckstation&#34;&gt;https://play.google.com/store/apps/details?id=com.github.stenzek.duckstation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;No support is provided for the Android app&lt;/strong&gt;, it is free and your expectations should be in line with that. Please &lt;strong&gt;do not&lt;/strong&gt; email me about issues about it, they will be ignored. This repository should also not be used to raise issues about the app, as it does not contain the app code, only the desktop versions.&lt;/p&gt; &#xA;&lt;p&gt;If you must use an APK, download links are:&lt;/p&gt; &#xA;&lt;p&gt;Download link: &lt;a href=&#34;https://www.duckstation.org/android/duckstation-android.apk&#34;&gt;https://www.duckstation.org/android/duckstation-android.apk&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Changelog link: &lt;a href=&#34;https://www.duckstation.org/android/changelog.txt&#34;&gt;https://www.duckstation.org/android/changelog.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install and run the app for the first time.&lt;/li&gt; &#xA; &lt;li&gt;Add game directories by tapping the add button and selecting a directory. You can add additional directories afterwards by selecting &#34;Edit Game Directories&#34; from the menu.&lt;/li&gt; &#xA; &lt;li&gt;Tap a game to start. When you start a game for the first time it will prompt you to import a BIOS image.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you have an external controller, you will need to map the buttons and sticks in settings.&lt;/p&gt; &#xA;&lt;h3&gt;LibCrypt protection and SBI files&lt;/h3&gt; &#xA;&lt;p&gt;A number of PAL region games use LibCrypt protection, requiring additional CD subchannel information to run properly. libcrypt not functioning usually manifests as hanging or crashing, but can sometimes affect gameplay too, depending on how the game implemented it.&lt;/p&gt; &#xA;&lt;p&gt;For these games, make sure that the CD image and its corresponding SBI (.sbi) file have the same name and are placed in the same directory. DuckStation will automatically load the SBI file when it is found next to the CD image.&lt;/p&gt; &#xA;&lt;p&gt;For example, if your disc image was named &lt;code&gt;Spyro3.cue&lt;/code&gt;, you would place the SBI file in the same directory, and name it &lt;code&gt;Spyro3.sbi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2022&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the respository with submodules (&lt;code&gt;git clone --recursive https://github.com/stenzek/duckstation.git&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Open the Visual Studio solution &lt;code&gt;duckstation.sln&lt;/code&gt; in the root, or &#34;Open Folder&#34; for cmake build.&lt;/li&gt; &#xA; &lt;li&gt;Build solution.&lt;/li&gt; &#xA; &lt;li&gt;Binaries are located in &lt;code&gt;bin/x64&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;duckstation-qt-x64-Release.exe&lt;/code&gt; or whichever config you used.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Requirements (Debian/Ubuntu package names):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CMake (&lt;code&gt;cmake&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SDL2 (at least version 2.0.22) (&lt;code&gt;libsdl2-dev&lt;/code&gt;, &lt;code&gt;libxrandr-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;pkgconfig (&lt;code&gt;pkg-config&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Qt 6 (at least version 6.1.0) (&lt;code&gt;qtbase6-dev&lt;/code&gt;, &lt;code&gt;qtbase6-private-dev&lt;/code&gt;, &lt;code&gt;qtbase6-dev-tools&lt;/code&gt;, &lt;code&gt;qttools6-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;libevdev (&lt;code&gt;libevdev-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;git (&lt;code&gt;git&lt;/code&gt;) (Note: needed to clone the repository and at build time)&lt;/li&gt; &#xA; &lt;li&gt;When Wayland is enabled (default): &lt;code&gt;libwayland-dev&lt;/code&gt; &lt;code&gt;libwayland-egl-backend-dev&lt;/code&gt; &lt;code&gt;extra-cmake-modules&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Optional for RetroAchievements (on by default): libcurl (&lt;code&gt;libcurl4-gnutls-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Optional for framebuffer output: DRM/GBM (&lt;code&gt;libgbm-dev&lt;/code&gt;, &lt;code&gt;libdrm-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Optional for faster building: Ninja (&lt;code&gt;ninja-build&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository. Submodules aren&#39;t necessary, there is only one and it is only used for Windows (&lt;code&gt;git clone https://github.com/stenzek/duckstation.git -b dev&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Create a build directory, either in-tree or elsewhere.&lt;/li&gt; &#xA; &lt;li&gt;Run CMake to configure the build system. Assuming a build subdirectory of &lt;code&gt;build-release&lt;/code&gt;, run &lt;code&gt;cmake -Bbuild-release -DCMAKE_BUILD_TYPE=Release&lt;/code&gt;. If you have installed Ninja, add &lt;code&gt;-GNinja&lt;/code&gt; at the end of the CMake command line for faster builds.&lt;/li&gt; &#xA; &lt;li&gt;Compile the source code. For the example above, run &lt;code&gt;cmake --build build-release --parallel&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the binary, located in the build directory under &lt;code&gt;bin/duckstation-qt&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; macOS is highly experimental and not tested by the developer. Use at your own risk; things may be horribly broken. Vulkan support may be unstable, so sticking to OpenGL or software renderer is recommended.&lt;/p&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CMake&lt;/li&gt; &#xA; &lt;li&gt;SDL2 (at least version 2.0.22)&lt;/li&gt; &#xA; &lt;li&gt;Qt 6 (at least version 6.1.0)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional (recommended for faster builds):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ninja&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository. Submodules aren&#39;t necessary; there is only one and it is only used for Windows (&lt;code&gt;git clone https://github.com/stenzek/duckstation.git&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Run CMake to configure the build system: &lt;code&gt;cmake -Bbuild-release -DCMAKE_BUILD_TYPE=Release -DBUILD_QT_FRONTEND=ON -DUSE_SDL2=ON&lt;/code&gt;. You may need to specify &lt;code&gt;-DQt6_DIR&lt;/code&gt; depending on your system. If you have installed Ninja, add &lt;code&gt;-GNinja&lt;/code&gt; at the end of the CMake command line for faster builds.&lt;/li&gt; &#xA; &lt;li&gt;Compile the source code: &lt;code&gt;cmake --build build-release --parallel&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the binary, located in the build directory under &lt;code&gt;bin/DuckStation.app&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;User Directories&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;User Directory&#34; is where you should place your BIOS images, where settings are saved to, and memory cards/save states are saved by default. An optional &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#sdl-game-controller-database&#34;&gt;SDL game controller database file&lt;/a&gt; can be also placed here.&lt;/p&gt; &#xA;&lt;p&gt;This is located in the following places depending on the platform you&#39;re using:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows: My Documents\DuckStation&lt;/li&gt; &#xA; &lt;li&gt;Linux: &lt;code&gt;$XDG_DATA_HOME/duckstation&lt;/code&gt;, or &lt;code&gt;~/.local/share/duckstation&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;macOS: &lt;code&gt;~/Library/Application Support/DuckStation&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So, if you were using Linux, you would place your BIOS images in &lt;code&gt;~/.local/share/duckstation/bios&lt;/code&gt;. This directory will be created upon running DuckStation for the first time.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to use a &#34;portable&#34; build, where the user directory is the same as where the executable is located, create an empty file named &lt;code&gt;portable.txt&lt;/code&gt; in the same directory as the DuckStation executable.&lt;/p&gt; &#xA;&lt;h2&gt;Bindings for Qt frontend&lt;/h2&gt; &#xA;&lt;p&gt;Your keyboard or game controller can be used to simulate a variety of PlayStation controllers. Controller input is supported through DInput, XInput, and SDL backends and can be changed through &lt;code&gt;Settings -&amp;gt; General Settings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To bind your input device, go to &lt;code&gt;Settings -&amp;gt; Controller Settings&lt;/code&gt;. Each of the buttons/axes for the simulated controller will be listed, alongside the corresponding key/button on your device that it is currently bound to. To rebind, click the box next to the button/axis name, and press the key or button on your input device that you wish to bind to. When binding rumble, simply press any button on the controller you wish to send rumble to.&lt;/p&gt; &#xA;&lt;h2&gt;SDL Game Controller Database&lt;/h2&gt; &#xA;&lt;p&gt;DuckStation releases ship with a database of game controller mappings for the SDL controller backend, courtesy of &lt;a href=&#34;https://github.com/gabomdq/SDL_GameControllerDB&#34;&gt;https://github.com/gabomdq/SDL_GameControllerDB&lt;/a&gt;. The included &lt;code&gt;gamecontrollerdb.txt&lt;/code&gt; file can be found in the &lt;code&gt;database&lt;/code&gt; subdirectory of the DuckStation program directory.&lt;/p&gt; &#xA;&lt;p&gt;If you are experiencing issues binding your controller with the SDL controller backend, you may need to add a custom mapping to the database file. Make a copy of &lt;code&gt;gamecontrollerdb.txt&lt;/code&gt; and place it in your &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#user-directories&#34;&gt;user directory&lt;/a&gt; (or directly in the program directory, if running in portable mode) and then follow the instructions in the &lt;a href=&#34;https://github.com/gabomdq/SDL_GameControllerDB&#34;&gt;SDL_GameControllerDB repository&lt;/a&gt; for creating a new mapping. Add this mapping to the new copy of &lt;code&gt;gamecontrollerdb.txt&lt;/code&gt; and your controller should then be recognized properly.&lt;/p&gt; &#xA;&lt;h2&gt;Default bindings&lt;/h2&gt; &#xA;&lt;p&gt;Controller 1:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;D-Pad:&lt;/strong&gt; W/A/S/D&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Triangle/Square/Circle/Cross:&lt;/strong&gt; Numpad8/Numpad4/Numpad6/Numpad2&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;L1/R1:&lt;/strong&gt; Q/E&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;L2/R2:&lt;/strong&gt; 1/3&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start:&lt;/strong&gt; Enter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Select:&lt;/strong&gt; Backspace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hotkeys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Escape:&lt;/strong&gt; Power off console&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;F11:&lt;/strong&gt; Toggle fullscreen&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tab:&lt;/strong&gt; Temporarily disable speed limiter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Space:&lt;/strong&gt; Pause/resume emulation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/monkey.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/monkey.jpg&#34; alt=&#34;Monkey Hero&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/rrt4.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/rrt4.jpg&#34; alt=&#34;Ridge Racer Type 4&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/tr2.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/tr2.jpg&#34; alt=&#34;Tomb Raider 2&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/quake2.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/quake2.jpg&#34; alt=&#34;Quake 2&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/croc.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/croc.jpg&#34; alt=&#34;Croc&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/croc2.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/croc2.jpg&#34; alt=&#34;Croc 2&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/ff7.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/ff7.jpg&#34; alt=&#34;Final Fantasy 7&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/mm8.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/mm8.jpg&#34; alt=&#34;Mega Man 8&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/ff8.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/ff8.jpg&#34; alt=&#34;Final Fantasy 8 in Fullscreen UI&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/spyro.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/spyro.jpg&#34; alt=&#34;Spyro in Fullscreen UI&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/tof.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/tof.jpg&#34; alt=&#34;Threads of Fate in Fullscreen UI&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/gamegrid.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/gamegrid.png&#34; alt=&#34;Game Grid&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Disclaimers&lt;/h2&gt; &#xA;&lt;p&gt;Icon by icons8: &lt;a href=&#34;https://icons8.com/icon/74847/platforms.undefined.short-title&#34;&gt;https://icons8.com/icon/74847/platforms.undefined.short-title&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#34;PlayStation&#34; and &#34;PSX&#34; are registered trademarks of Sony Interactive Entertainment Europe Limited. This project is not affiliated in any way with Sony Interactive Entertainment.&lt;/p&gt;</summary>
  </entry>
</feed>