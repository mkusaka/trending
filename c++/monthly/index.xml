<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-01T01:53:12Z</updated>
  <subtitle>Monthly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NVIDIA/cutlass</title>
    <updated>2025-03-01T01:53:12Z</updated>
    <id>tag:github.com,2025-03-01:/NVIDIA/cutlass</id>
    <link href="https://github.com/NVIDIA/cutlass" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CUDA Templates for Linear Algebra Subroutines&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/images/gemm-hierarchy-with-epilogue-no-labels.png&#34; alt=&#34;ALT&#34; title=&#34;Complete CUDA GEMM decomposition&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CUTLASS 3.8.0&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;CUTLASS 3.8.0 - January 2025&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;CUTLASS is a collection of CUDA C++ template abstractions for implementing high-performance matrix-matrix multiplication (GEMM) and related computations at all levels and scales within CUDA. It incorporates strategies for hierarchical decomposition and data movement similar to those used to implement cuBLAS and cuDNN. CUTLASS decomposes these &#34;moving parts&#34; into reusable, modular software components abstracted by C++ template classes. Primitives for different levels of a conceptual parallelization hierarchy can be specialized and tuned via custom tiling sizes, data types, and other algorithmic policy. The resulting flexibility simplifies their use as building blocks within custom kernels and applications.&lt;/p&gt; &#xA;&lt;p&gt;To support a wide variety of applications, CUTLASS provides extensive support for mixed-precision computations, providing specialized data-movement and multiply-accumulate abstractions for FP64, FP32, TF32, FP16, BF16, &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/27_ampere_3xtf32_fast_accurate_tensorop_gemm&#34;&gt;FP32 emulation via tensor core instruction&lt;/a&gt;, 8b floating point types (e5m2 and e4m3), block scaled data types (NVIDIA NVFP4 and OCP standard MXFP4, MXFP6, MXFP8), narrow integer types (4 and 8b signed and unsigned integers), and binary 1b data types (where architectures allow for the native support of such data types). CUTLASS demonstrates optimal matrix multiply operations targeting the programmable, high-throughput &lt;em&gt;Tensor Cores&lt;/em&gt; implemented by NVIDIA&#39;s Volta, Turing, Ampere, Ada, Hopper, and Blackwell architectures.&lt;/p&gt; &#xA;&lt;p&gt;In addition to GEMMs, CUTLASS implements high-performance convolution via the implicit GEMM algorithm. Implicit GEMM is the formulation of a convolution operation as a GEMM thereby taking advantage of CUTLASS&#39;s modular GEMM pipeline. This allows CUTLASS to build convolutions by reusing highly-optimized GEMM components.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/quickstart.md&#34;&gt;Quick Start Guide&lt;/a&gt; to get started quickly.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/functionality.md&#34;&gt;functionality docs&lt;/a&gt; for a more comprehensive list of kernel level features, data types, instructions, and minimum supported by CUTLASS on each GPU architecture.&lt;/p&gt; &#xA;&lt;h1&gt;What&#39;s New in CUTLASS 3.8&lt;/h1&gt; &#xA;&lt;p&gt;CUTLASS 3.8 is the first release that supports the NVIDIA Blackwell SM100 architecture. For a background on Blackwell&#39;s new features, please consult the PTX documentation for CUDA 12.8.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for new CuTe building blocks specifically for Blackwell SM100 architecture: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cute/atom/mma_traits_sm100.hpp&#34;&gt;5th generation Blackwell Tensor Core instructions (TCGen05)&lt;/a&gt; via CuTe MMA atoms.&lt;/li&gt; &#xA;   &lt;li&gt;Extensions to &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cute/atom/copy_traits_sm100_tma.hpp&#34;&gt;Tensor Memory Accelerator&lt;/a&gt; via CuTe Copy atoms.&lt;/li&gt; &#xA;   &lt;li&gt;Exposure of Blackwell&#39;s new tensor memory (note: distinct from TMA) as &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cute/pointer.hpp&#34;&gt;&lt;code&gt;tmem&lt;/code&gt;&lt;/a&gt; across CuTe as a first class data locale.&lt;/li&gt; &#xA;   &lt;li&gt;Exposure of &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cute/atom/copy_traits_sm100.hpp&#34;&gt;&lt;code&gt;tmem-&amp;gt;rmem&lt;/code&gt;, &lt;code&gt;rmem-&amp;gt;tmem&lt;/code&gt; and &lt;code&gt;smem-&amp;gt;tmem data movement instructions&lt;/code&gt;&lt;/a&gt; as copy atoms in CuTe.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cute/atom/copy_traits_sm100.hpp&#34;&gt;&lt;code&gt;make_tmem_copy()&lt;/code&gt;&lt;/a&gt; utility method to ease creation of tiled copies for tmem copy atoms.&lt;/li&gt; &#xA;   &lt;li&gt;Support for &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cute/atom/copy_traits_sm100.hpp&#34;&gt;new variants of LDSM on Blackwell&lt;/a&gt; via CuTe Copy atoms.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Support for new CUTLASS building blocks specifically for Blackwell SM100 architecture: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Various narrow precision &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/exmy_base.h&#34;&gt;FP4, FP6, and FP8&lt;/a&gt; formats as well as their &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/float_subbyte.h&#34;&gt;block-scaled variants NVFP4, MXFP4, MXFP6, and MXFP8&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/pipeline/sm100_pipeline.hpp&#34;&gt;Pipelines that implement Blackwell specific synchronization&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/cluster_launch.hpp&#34;&gt;Cluster launch control API supporting preferred and fallback cluster shapes&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Data types including NVFP4, MXFP4, MXFP6, and MXFP8 and all their supported element and scale factor types.&lt;/li&gt; &#xA;   &lt;li&gt;Tile schedulers using &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/blackwell_cluster_launch_control.md&#34;&gt;Blackwell&#39;s Cluster Launch Control (CLC) feature&lt;/a&gt; to implement dynamic persistence scheduling for &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/kernel/sm100_tile_scheduler.hpp&#34;&gt;GEMMs&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/kernel/sm100_tile_scheduler_stream_k.hpp&#34;&gt;stream-K&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Extensions to testbeds and reference check code for unit tests and CUTLASS profiler.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Full support for Blackwell SM100 kernels in CUTLASS 3.x API: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/kernel/sm100_gemm_tma_warpspecialized.hpp&#34;&gt;Blackwell specific kernel layers&lt;/a&gt; that &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Implement a new warp-specialization recipe tuned specifically for Blackwell SM100 architecture.&lt;/li&gt; &#xA;     &lt;li&gt;Leverage all the new features such as CLC based tile scheduling, preferred cluster, and TMEM based double buffering of accumulators.&lt;/li&gt; &#xA;     &lt;li&gt;Support stream-K load balancing for all kernel types everywhere via composable scheduler support.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Blackwell collective mainloops that target the TCGen05 MMA instructions (both SS and TS) for &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/collective/sm100_mma_warpspecialized.hpp&#34;&gt;Non-block scaled data types without support for pointer array and grouped GEMM with TMA&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/collective/sm100_mma_array_warpspecialized.hpp&#34;&gt;Non-block scaled data types with support for pointer array and grouped GEMM with TMA&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/collective/sm100_blockscaled_mma_warpspecialized.hpp&#34;&gt;Block scaled data types without support for pointer array and grouped GEMM with TMA&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/collective/sm100_blockscaled_mma_array_warpspecialized.hpp&#34;&gt;Block scaled data types with support for pointer array and grouped GEMM with TMA&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Blackwell &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/conv/collective/sm100_implicit_gemm_umma_warpspecialized.hpp&#34;&gt;collective mainloop for convolution kernels&lt;/a&gt; supporting non-block scaled data types for fprop, dgrad, and wgrad.&lt;/li&gt; &#xA;   &lt;li&gt;New &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/dispatch_policy.hpp&#34;&gt;GEMM&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/conv/dispatch_policy.hpp&#34;&gt;convolution&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/epilogue/dispatch_policy.hpp&#34;&gt;epilogue&lt;/a&gt; dispatch policies for collectives, kernel layers, and builders.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/epilogue/collective/sm100_epilogue_tma_warpspecialized.hpp&#34;&gt;Blackwell epilogue that supports loading accumulators from &lt;code&gt;tmem&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;&#34;&gt;full set of EVT fusions&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;CUTLASS library and profiler integration for block scaled data types for kernel emission, profiling, and verification. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support for preferred and fallback cluster shapes via profiler command line arguments parsing to set dynamic cluster shapes.&lt;/li&gt; &#xA;   &lt;li&gt;Support for dynamic datatypes by parsing profiler via profiler command line arguments parsing to set dynamic datatype setting in TCGen05 MMA instruction descriptors.&lt;/li&gt; &#xA;   &lt;li&gt;Support for mixed input GEMM kernels on Hopper in the profiler.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;New CUTLASS profiler flag &lt;code&gt;use-cuda-graphs&lt;/code&gt; to reduce overheads when benchmarking launch-bound kernels.&lt;/li&gt; &#xA; &lt;li&gt;A new 3.x version of grouped GEMM to the CUTLASS library and generates kernels for Hopper and Blackwell. Now grouped GEMM support is enabled in the CUTLASS profiler (&lt;code&gt;./cutlass_profiler --operation=GroupedGemm --help&lt;/code&gt; for details).&lt;/li&gt; &#xA; &lt;li&gt;Set of examples that demonstrate the usage of the 3.x API for targeting Blackwell SM100 architecture: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/70_blackwell_gemm/&#34;&gt;Basic FP16 and FP8 GEMMs with minimal changes from Hopper examples&lt;/a&gt;, demonstrating ease of migration for off the shelf kernels using the 3.x collective builder API.&lt;/li&gt; &#xA;   &lt;li&gt;GEMM with &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/71_blackwell_gemm_with_collective_builder/71_blackwell_gemm_with_collective_builder.cu&#34;&gt;opt-in collective builder schedules showcasing available recipes&lt;/a&gt; for Blackwell.&lt;/li&gt; &#xA;   &lt;li&gt;Block scaled data type GEMMs targeting Blackwell&#39;s native block scaled Tensor Cores: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/72_blackwell_narrow_precision_gemm/72a_blackwell_nvfp4_bf16_gemm.cu&#34;&gt;NVFP4 inputs with BF16 output&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/72_blackwell_narrow_precision_gemm/72b_blackwell_nvfp4_nvfp4_gemm.cu&#34;&gt;NVFP4 inputs with NVFP4 output&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/72_blackwell_narrow_precision_gemm/72c_blackwell_mixed_mxfp8_bf16_gemm.cu&#34;&gt;Mixed MXFP8 and MXFP6 inputs with BF16 output&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;GEMM example demonstrating &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/73_blackwell_gemm_preferred_cluster/blackwell_gemm_preferred_cluster.cu&#34;&gt;Blackwell&#39;s new preferred cluster support via dynamic cluster shapes&lt;/a&gt; for increased occupancy.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/74_blackwell_gemm_streamk/blackwell_gemm_streamk.cu&#34;&gt;GEMM with CLC based StreamK scheduler for load balancing&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Grouped GEMM for &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/75_blackwell_grouped_gemm/75_blackwell_grouped_gemm.cu&#34;&gt;vanilla FP8 data inputs&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/75_blackwell_grouped_gemm/75_blackwell_grouped_gemm_block_scaled.cu&#34;&gt;NVFP4 block scaled inputs&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Convolution kernels for &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/76_blackwell_conv/76_blackwell_conv_fprop.cu&#34;&gt;fprop&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/76_blackwell_conv/76_blackwell_conv_dgrad.cu&#34;&gt;dgrad&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/76_blackwell_conv/76_blackwell_conv_wgrad.cu&#34;&gt;wgrad&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/77_blackwell_fmha/77_blackwell_fmha.cu&#34;&gt;Fused multi-head attention fprop kernel&lt;/a&gt; supporting fp16/bf16/fp8 data types across head dims of 32,64, and 128.&lt;/li&gt; &#xA;   &lt;li&gt;A new BF16x9 GEMM &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/78_blackwell_emulated_bf16x9_gemm/78_blackwell_emulated_bf16x9_gemm.cu&#34;&gt;kernel&lt;/a&gt; that emulates FP32 GEMM (SGEMM) using BF16 operations.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set of examples that demonstrate the usage of the 3.x API for targeting Hopper architecture: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A set of new &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/69_hopper_mixed_dtype_grouped_gemm/&#34;&gt;Hopper grouped GEMM kernels&lt;/a&gt; that support mixed A and B datatypes.&lt;/li&gt; &#xA;   &lt;li&gt;A new &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/67_hopper_fp8_warp_specialized_gemm_with_blockwise_scaling/67_hopper_fp8_warp_specialized_gemm_with_groupwise_scaling.cu&#34;&gt;Hopper FP8 GEMM with groupwise scaling&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Documentation updates: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/quickstart.md#instantiating-a-blackwell-gemm-kernel&#34;&gt;Quickstart - instantiating a Blackwell block-scaled GEMM&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Detailed &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/blackwell_functionality.md&#34;&gt;Blackwell block-scaled GEMM functionality documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;A new &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/functionality.md&#34;&gt;functionality documentation&lt;/a&gt; specifically for 3.x API comprehensively documenting all supported kernel types, data types, kernel features, minimum CUDA tookit support etc for 3.x supported architectures.&lt;/li&gt; &#xA;   &lt;li&gt;Updates to &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/README.md#compatibility&#34;&gt;compatibility&lt;/a&gt; section regarding supported compilers, operating systems, CUDA Toolkits, Hardware Architectures, and &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/README.md#Target-Architecture&#34;&gt;Target Architecture&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: CUTLASS 3.x builds are known to be down on Windows platforms for all CUDA toolkits. CUTLASS team is working on a fix.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for details of all past releases and updates.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;p&gt;CUTLASS primitives are very efficient. When used to construct device-wide GEMM kernels, they exhibit nearly optimal utilization of peak theoretical throughput. The figure below shows CUTLASS 3.8&#39;s performance as a % of theoretical peak utilization on various input and output data types when run on NVIDIA Blackwell SM100 architecture GPU.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/images/cutlass-3.8-blackwell-gemm-peak-performance.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The two figures below show the continual CUTLASS performance improvements on an &lt;a href=&#34;https://www.nvidia.com/en-us/data-center/h100/&#34;&gt;NVIDIA H100&lt;/a&gt; (NVIDIA Hopper architecture) since CUTLASS 3.1. CUTLASS 3.5.1 was compiled with the &lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA 12.5u1 Toolkit&lt;/a&gt;. Tensor Core operations are implemented using CUDA&#39;s &lt;a href=&#34;https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#warp-level-matrix-instructions-mma&#34;&gt;mma&lt;/a&gt; and &lt;a href=&#34;https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#asynchronous-warpgroup-level-matrix-instructions&#34;&gt;wgmma&lt;/a&gt; instructions.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/images/cutlass-3.5.1-gemm-peak-performance.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/images/cutlass-3.5.1-gemm-peak-performance-fp8.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CuTe&lt;/h1&gt; &#xA;&lt;p&gt;CUTLASS 3.0 introduced a new core library, CuTe, to describe and manipulate tensors of threads and data. CuTe is a collection of C++ CUDA template abstractions for defining and operating on hierarchically multidimensional layouts of threads and data. CuTe provides &lt;code&gt;Layout&lt;/code&gt; and &lt;code&gt;Tensor&lt;/code&gt; objects that compactly package the type, shape, memory space, and layout of data, while performing the complicated indexing for the user. This lets programmers focus on the logical descriptions of their algorithms while CuTe does the mechanical bookkeeping for them. With these tools, we can quickly design, implement, and modify all dense linear algebra operations.&lt;/p&gt; &#xA;&lt;p&gt;The core abstractions of CuTe are hierarchically multidimensional layouts which can be composed with data arrays to represent tensors. The representation of layouts is powerful enough to represent nearly everything we need to implement efficient dense linear algebra. Layouts can also be combined and manipulated via functional composition, on which we build a large set of common operations such as tiling and partitioning.&lt;/p&gt; &#xA;&lt;p&gt;CUTLASS 3.0 and beyond adopts CuTe throughout the GEMM hierarchy in its templates. This greatly simplifies the design and improves code composability and readability. More documentation specific to CuTe can be found in its &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/cute/00_quickstart.md&#34;&gt;dedicated documentation directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;Minimum requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Architecture: Volta (compute capability 7.0)&lt;/li&gt; &#xA; &lt;li&gt;Compiler: Must support at least C++17&lt;/li&gt; &#xA; &lt;li&gt;CUDA Toolkit version: 11.4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CUTLASS requires a C++17 host compiler and performs best when built with the &lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;&lt;strong&gt;CUDA 12.8 Toolkit&lt;/strong&gt;&lt;/a&gt;. It is also compatible with CUDA 11.4, CUDA 11.5, CUDA 11.6, CUDA 11.7, CUDA 11.8, and all other CUDA 12.x versions.&lt;/p&gt; &#xA;&lt;h2&gt;Operating Systems&lt;/h2&gt; &#xA;&lt;p&gt;We have tested the following environments.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Operating System&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Compiler&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu 18.04&lt;/td&gt; &#xA;   &lt;td&gt;GCC 7.5.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu 20.04&lt;/td&gt; &#xA;   &lt;td&gt;GCC 10.3.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu 22.04&lt;/td&gt; &#xA;   &lt;td&gt;GCC 11.2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note: GCC 8.5.0 has known regressions regarding fold expressions and overloaded operators. Using GCC 7.5.0 or (preferred) GCC &amp;gt;= 9 is recommended.&lt;/p&gt; &#xA;&lt;p&gt;Note: CUTLASS 3.x builds are known to be down on Windows platforms for all CUDA toolkits. CUTLASS team is working on a fix.&lt;/p&gt; &#xA;&lt;h2&gt;Hardware&lt;/h2&gt; &#xA;&lt;p&gt;CUTLASS runs successfully on the following NVIDIA GPUs, and it is expected to be efficient on Volta, Turing, Ampere, Ada, and Hopper architecture based NVIDIA GPUs.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;GPU&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;CUDA Compute Capability&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Minimum CUDA Toolkit Required by CUTLASS-3&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA V100 Tensor Core GPU&lt;/td&gt; &#xA;   &lt;td&gt;7.0&lt;/td&gt; &#xA;   &lt;td&gt;11.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA TitanV&lt;/td&gt; &#xA;   &lt;td&gt;7.0&lt;/td&gt; &#xA;   &lt;td&gt;11.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA GeForce RTX 20x0 series&lt;/td&gt; &#xA;   &lt;td&gt;7.5&lt;/td&gt; &#xA;   &lt;td&gt;11.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA T4&lt;/td&gt; &#xA;   &lt;td&gt;7.5&lt;/td&gt; &#xA;   &lt;td&gt;11.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA A100 Tensor Core GPU&lt;/td&gt; &#xA;   &lt;td&gt;8.0&lt;/td&gt; &#xA;   &lt;td&gt;11.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA A10&lt;/td&gt; &#xA;   &lt;td&gt;8.6&lt;/td&gt; &#xA;   &lt;td&gt;11.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA GeForce RTX 30x0 series&lt;/td&gt; &#xA;   &lt;td&gt;8.6&lt;/td&gt; &#xA;   &lt;td&gt;11.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA GeForce RTX 40x0 series&lt;/td&gt; &#xA;   &lt;td&gt;8.9&lt;/td&gt; &#xA;   &lt;td&gt;11.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA L40&lt;/td&gt; &#xA;   &lt;td&gt;8.9&lt;/td&gt; &#xA;   &lt;td&gt;11.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA H100 Tensor Core GPU&lt;/td&gt; &#xA;   &lt;td&gt;9.0&lt;/td&gt; &#xA;   &lt;td&gt;11.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA H200 Tensor Core GPU&lt;/td&gt; &#xA;   &lt;td&gt;9.0&lt;/td&gt; &#xA;   &lt;td&gt;11.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA B200 Tensor Core GPU&lt;/td&gt; &#xA;   &lt;td&gt;10.0&lt;/td&gt; &#xA;   &lt;td&gt;12.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Target Architecture&lt;/h2&gt; &#xA;&lt;p&gt;In general, PTX code generated for one target architecture can be run on future architectures (i.e., it is forward compatible). However, CUDA 12.0 introduced the concept of &#34;architecture-accelerated features&#34; whose PTX does not have forward compatibility guarantees. Several Hopper and Blackwell PTX instructions fall under this category of architecture-accelerated features, and thus require a &lt;code&gt;sm_90a&lt;/code&gt; or &lt;code&gt;sm100a&lt;/code&gt; target architecture (note the &#34;a&#34; appended). For more details on this and other architecture-accelerated instructions, please refer to the &lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#feature-availability&#34;&gt;CUDA Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The target architecture information is passed on to CUTLASS via the cmake flag &lt;code&gt;CUTLASS_NVCC_ARCHS&lt;/code&gt;. In order to maximize performance on Hopper GH100, users are required to build CUTLASS with &lt;code&gt;90a&lt;/code&gt; as the target architecture. If a user accidentally builds a kernel which uses SM90a features (e.g. Hopper Tensor Core Instructions), using the SM90 target (note the lack of &#34;a&#34;), with either CUDA Toolkit 12 or 11.8, the kernel is expected to fail with a runtime error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .. -DCUTLASS_NVCC_ARCHS=&#34;90a&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .. -DCUTLASS_NVCC_ARCHS=&#34;100a&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The NVIDIA Blackwell SM100 architecture used in the datacenter products has a different compute capability than the one underpinning NVIDIA Blackwell GeForce RTX 50 series GPUs. As a result, kernels compiled for Blackwell SM100 architecture with arch conditional features (using &lt;code&gt;sm100a&lt;/code&gt;) are not compatible with RTX 50 series GPUs.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/functionality.md&#34;&gt;functionality documentation&lt;/a&gt; for details on which kernels require which target architectures.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;CUTLASS is described in the following documents and the accompanying &lt;a href=&#34;https://nvidia.github.io/cutlass&#34;&gt;Doxygen documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/quickstart.md&#34;&gt;Quick Start Guide&lt;/a&gt; - basics of building and running CUTLASS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/functionality.md&#34;&gt;Functionality&lt;/a&gt; - summarizes functionality available in CUTLASS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/efficient_gemm.md&#34;&gt;Efficient GEMM in CUDA&lt;/a&gt; - describes how GEMM kernels may be implemented efficiently in CUDA&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/cutlass_3x_design.md&#34;&gt;CUTLASS 3.x Design&lt;/a&gt; - describes the CUTLASS 3.x design, its benefits, and how CuTe enables us to write much more composable components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/gemm_api_3x.md&#34;&gt;GEMM API 3.x&lt;/a&gt; - describes the CUTLASS 3.x GEMM model and C++ template concepts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/gemm_api.md&#34;&gt;GEMM API 2.x&lt;/a&gt; - describes the CUTLASS 2.x GEMM model and C++ template concepts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/implicit_gemm_convolution.md&#34;&gt;Implicit GEMM Convolution&lt;/a&gt; - describes 2-D and 3-D convolution in CUTLASS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/code_organization.md&#34;&gt;Code Organization&lt;/a&gt; - describes the organization and contents of the CUTLASS project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/terminology.md&#34;&gt;Terminology&lt;/a&gt; - describes terms used in the code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/programming_guidelines.md&#34;&gt;Programming Guidelines&lt;/a&gt; - guidelines for writing efficient modern CUDA C++&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/fundamental_types.md&#34;&gt;Fundamental types&lt;/a&gt; - describes basic C++ classes used in CUTLASS to represent numeric quantities and arrays&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/layout.md&#34;&gt;Layouts&lt;/a&gt; - describes layouts of matrices and tensors in memory&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/tile_iterator_concept.md&#34;&gt;Tile Iterators&lt;/a&gt; - describes C++ concepts for iterating over tiles of matrices in memory&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/profiler.md&#34;&gt;CUTLASS Profiler&lt;/a&gt; - command-line driven profiling application&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/utilities.md&#34;&gt;CUTLASS Utilities&lt;/a&gt; - additional templates used to facilitate rapid development&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/dependent_kernel_launch.md&#34;&gt;Dependent kernel launch&lt;/a&gt; - describes a new feature in Hopper which allows overlapping dependent kernels in the same stream, and how it is used in CUTLASS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;p&gt;We have also described the structure of an efficient GEMM in our talk at the &lt;a href=&#34;http://on-demand.gputechconf.com/gtc/2018/presentation/s8854-cutlass-software-primitives-for-dense-linear-algebra-at-all-levels-and-scales-within-cuda.pdf&#34;&gt;GPU Technology Conference 2018&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/on-demand/session/gtcsiliconvalley2018-s8854/&#34;&gt;CUTLASS: Software Primitives for Dense Linear Algebra at All Levels and Scales within CUDA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/on-demand/session/gtcsj20-s21745/&#34;&gt;Developing CUDA Kernels to Push Tensor Cores to the Absolute Limit on NVIDIA A100&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/on-demand/session/gtcspring21-s31883/&#34;&gt;Accelerating Convolution with Tensor Cores in CUTLASS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/on-demand/session/gtcspring22-s41996/&#34;&gt;Accelerating Backward Data Gradient by Increasing Tensor Core Utilization in CUTLASS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/on-demand/session/gtcfall22-a41131/&#34;&gt;CUTLASS: Python API, Enhancements, and NVIDIA Hopper&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building CUTLASS&lt;/h1&gt; &#xA;&lt;p&gt;CUTLASS is a header-only template library and does not need to be built to be used by other projects. Client applications should target CUTLASS&#39;s &lt;code&gt;include/&lt;/code&gt; directory in their include paths.&lt;/p&gt; &#xA;&lt;p&gt;CUTLASS unit tests, examples, and utilities can be build with CMake. The minimum version of CMake is given in the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/quickstart.md&#34;&gt;Quickstart guide&lt;/a&gt;. Make sure the &lt;code&gt;CUDACXX&lt;/code&gt; environment variable points to NVCC in the CUDA Toolkit installed on your system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export CUDACXX=${CUDA_INSTALL_PATH}/bin/nvcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a build directory within the CUTLASS project, then run CMake. By default CUTLASS will build kernels for CUDA architecture versions 5.0, 6.0, 6.1, 7.0, 7.5, 8.0, 8.6, 8.9, and 9.0. To reduce compile time you can specify the architectures to build CUTLASS for by changing the CMake configuration setting &lt;code&gt;CUTLASS_NVCC_ARCHS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir build &amp;amp;&amp;amp; cd build&#xA;&#xA;$ cmake .. -DCUTLASS_NVCC_ARCHS=80               # compiles for NVIDIA&#39;s Ampere Architecture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From the &lt;code&gt;build/&lt;/code&gt; directory, compile and run the CUTLASS unit tests by building the target &lt;code&gt;test_unit&lt;/code&gt; with make.&lt;/p&gt; &#xA;&lt;p&gt;The unit tests are organized as several binaries mirroring the top-level namespaces of CUTLASS, and they may be executed in parallel via make&#39;s &lt;code&gt;-j&lt;/code&gt; command line argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make test_unit -j&#xA;...&#xA;...&#xA;...&#xA;[----------] Global test environment tear-down&#xA;[==========] 946 tests from 57 test cases ran. (10812 ms total)&#xA;[  PASSED  ] 946 tests.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All tests should pass on supported platforms, though the exact number of tests may vary over time.&lt;/p&gt; &#xA;&lt;h1&gt;Project Structure&lt;/h1&gt; &#xA;&lt;p&gt;CUTLASS is arranged as a header-only library along with Utilities, Tools, Examples, and unit tests. &lt;a href=&#34;https://nvidia.github.io/cutlass&#34;&gt;Doxygen documentation&lt;/a&gt; provides a complete list of files, classes, and template concepts defined in the CUTLASS project.&lt;/p&gt; &#xA;&lt;p&gt;A detailed explanation of the source code organization may be found in the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/code_organization.md&#34;&gt;CUTLASS documentation&lt;/a&gt;, but several main components are summarized below.&lt;/p&gt; &#xA;&lt;h2&gt;CUTLASS Template Library&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;include/                     # client applications should target this directory in their build&#39;s include paths&#xA;&#xA;  cutlass/                   # CUDA Templates for Linear Algebra Subroutines and Solvers - headers only&#xA;&#xA;    arch/                    # direct exposure of architecture features (including instruction-level GEMMs)&#xA;&#xA;    conv/                    # code specialized for convolution&#xA;&#xA;    epilogue/                # code specialized for the epilogue of gemm/convolution&#xA;&#xA;    gemm/                    # code specialized for general matrix product computations&#xA;&#xA;    layout/                  # layout definitions for matrices, tensors, and other mathematical objects in memory&#xA;&#xA;    platform/                # CUDA-capable Standard Library components&#xA;&#xA;    reduction/               # bandwidth-limited reduction kernels that do not fit the &#34;gemm&#34; model&#xA;&#xA;    thread/                  # simt code that can be performed within a CUDA thread&#xA;    &#xA;    transform/               # code specialized for layout, type, and domain transformations&#xA;&#xA;    *                        # core vocabulary types, containers, and basic numeric operations&#xA;&#xA;  cute/                      # CuTe Layout, layout algebra, MMA/Copy atoms, tiled MMA/Copy&#xA;&#xA;    algorithm/               # Definitions of core operations such as copy, gemm, and operations on cute::tuples&#xA;&#xA;    arch/                    # Bare bones PTX wrapper structs for copy and math instructions&#xA;&#xA;    atom/                    # Meta-information either link to or built from arch/ operators&#xA;&#xA;      mma_atom.hpp           # cute::Mma_Atom and cute::TiledMma&#xA;&#xA;      copy_atom.hpp          # cute::Copy_Atom and cute::TiledCopy&#xA;&#xA;      *sm*.hpp               # Arch specific meta-information for copy and math operations&#xA;&#xA;    *                        # Core library types such as Shape, Stride, Layout, Tensor, and associated operations&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CUTLASS SDK Examples&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples&#34;&gt;CUTLASS SDK examples&lt;/a&gt; apply CUTLASS templates to implement basic computations.&lt;/p&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/&#xA;  library/                   # CUTLASS Instance Library - contains instantiations of all supported CUTLASS templates&#xA;    include/&#xA;      cutlass/&#xA;        library/&#xA;&#xA;  profiler/                  # CUTLASS Profiler         - command-line utility for executing operations in the&#xA;                             #                            CUTLASS Library&#xA;  &#xA;  util/                      # CUTLASS Utilities        - contains numerous helper classes for&#xA;    include/                 #                            manging tensors in device memory, reference&#xA;      cutlass/               #                            implementations for GEMM, random initialization&#xA;        util/                #                            of tensors, and I/O.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;test/unit/&lt;/code&gt; directory consist of unit tests implemented with Google Test that demonstrate basic usage of Core API components and complete tests of the CUTLASS GEMM computations.&lt;/p&gt; &#xA;&lt;p&gt;Instructions for building and running the Unit tests are described in the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/quickstart.md&#34;&gt;Quickstart guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Performance Profiling&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;tools/profiler/&lt;/code&gt; directory contains a command-line utility for launching each of the GEMM kernels. It can be built as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make cutlass_profiler -j16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building all GEMM and Convolution kernels (&lt;em&gt;long&lt;/em&gt; build times)&lt;/h2&gt; &#xA;&lt;p&gt;By default, only one tile size is instantiated for each data type, math instruction, and layout. To instantiate all, set the following environment variable when running CMake from an empty &lt;code&gt;build/&lt;/code&gt; directory. Beware, this results in &lt;em&gt;tens of thousands&lt;/em&gt; of kernels and long build times. This would also result in a large binary size and on some platforms linker to fail on building the library. Therefore, it&#39;s highly recommended to generate only a subset of kernels as demonstrated in the sub-section below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake .. -DCUTLASS_NVCC_ARCHS=90a -DCUTLASS_LIBRARY_KERNELS=all&#xA;...&#xA;$ make cutlass_profiler -j16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building a subset of GEMM and Convolution kernels (&lt;em&gt;reduced&lt;/em&gt; build times)&lt;/h2&gt; &#xA;&lt;p&gt;To compile strictly one kernel or a small set of kernels, a comma-delimited list of kernel names with wildcard characters may be used to reduce the set of kernels. The following examples show building exactly one or a subset of kernels for NVIDIA Ampere and Turing architecture:&lt;/p&gt; &#xA;&lt;h3&gt;Building a subset Tensor Core GEMM kernels&lt;/h3&gt; &#xA;&lt;p&gt;To compile a subset of Tensor Core GEMM kernels with FP32 accumulation and FP16 input targeting NVIDIA Ampere and Turing architecture, use the below cmake command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake .. -DCUTLASS_NVCC_ARCHS=&#39;75;80&#39; -DCUTLASS_LIBRARY_KERNELS=cutlass_tensorop_s*gemm_f16_*_nt_align8&#xA;...&#xA;$ make cutlass_profiler -j16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example command line for profiling a subset of Tensor Core GEMM kernels is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./tools/profiler/cutlass_profiler --kernels=cutlass_tensorop_s*gemm_f16_*_nt_align8 --m=3456 --n=4096 --k=4096&#xA;&#xA;...&#xA;=============================&#xA;  Problem ID: 1&#xA;&#xA;        Provider: CUTLASS&#xA;   OperationKind: gemm&#xA;       Operation: cutlass_tensorop_s1688gemm_f16_256x128_32x2_nt_align8&#xA;&#xA;          Status: Success&#xA;    Verification: ON&#xA;     Disposition: Passed&#xA;&#xA;reference_device: Passed&#xA;          cuBLAS: Passed&#xA;&#xA;       Arguments: --gemm_kind=universal --m=3456 --n=4096 --k=4096 --A=f16:column --B=f16:row --C=f32:column --alpha=1  \&#xA;                  --beta=0 --split_k_slices=1 --batch_count=1 --op_class=tensorop --accum=f32 --cta_m=256 --cta_n=128  \&#xA;                  --cta_k=32 --stages=2 --warps_m=4 --warps_n=2 --warps_k=1 --inst_m=16 --inst_n=8 --inst_k=8 --min_cc=75  \&#xA;                  --max_cc=1024&#xA;&#xA;           Bytes: 118489088  bytes&#xA;           FLOPs: 115992428544  flops&#xA;&#xA;         Runtime: 1.55948  ms&#xA;          Memory: 70.7616 GiB/s&#xA;&#xA;            Math: 74378.8 GFLOP/s&#xA;&#xA;&#xA;&#xA;=============================&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building one CUDA Core GEMM kernel&lt;/h3&gt; &#xA;&lt;p&gt;To compile one SGEMM kernel targeting NVIDIA Ampere and Turing architecture, use the below cmake command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake .. -DCUTLASS_NVCC_ARCHS=&#39;75;80&#39; -DCUTLASS_LIBRARY_KERNELS=cutlass_simt_sgemm_128x128_8x2_nn_align1&#xA;...&#xA;$ make cutlass_profiler -j16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example command line for profiling single SGEMM CUDA kernel is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./tools/profiler/cutlass_profiler --kernels=sgemm --m=3456 --n=4096 --k=4096&#xA;&#xA;=============================&#xA;  Problem ID: 1&#xA;&#xA;        Provider: CUTLASS&#xA;   OperationKind: gemm&#xA;       Operation: cutlass_simt_sgemm_128x128_8x2_nn_align1&#xA;&#xA;          Status: Success&#xA;    Verification: ON&#xA;     Disposition: Passed&#xA;&#xA;          cuBLAS: Passed&#xA;&#xA;       Arguments: --m=3456 --n=4096 --k=4096 --A=f32:column --B=f32:column --C=f32:column --alpha=1 --beta=0 --split_k_slices=1  \&#xA;                  --batch_count=1 --op_class=simt --accum=f32 --cta_m=128 --cta_n=128 --cta_k=8 --stages=2 --warps_m=4  \&#xA;                  --warps_n=2 --warps_k=1 --inst_m=1 --inst_n=1 --inst_k=1 --min_cc=50 --max_cc=1024&#xA;&#xA;           Bytes: 180355072  bytes&#xA;           FLOPs: 115992428544  flops&#xA;&#xA;         Runtime: 6.73655  ms&#xA;          Memory: 24.934 GiB/s&#xA;&#xA;            Math: 17218.4 GFLOP/s&#xA;&#xA;=============================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building a subset of Tensor Core Convolution kernels&lt;/h3&gt; &#xA;&lt;p&gt;To compile a subset of Tensor core convolution kernels implementing forward propagation (fprop) with FP32 accumulation and FP16 input targeting NVIDIA Ampere and Turing architecture, use the below cmake command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake .. -DCUTLASS_NVCC_ARCHS=&#39;75;80&#39; -DCUTLASS_LIBRARY_KERNELS=cutlass_tensorop_s*fprop_optimized_f16&#xA;...&#xA;$ make cutlass_profiler -j16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example command line for profiling a subset of Tensor Core convolution kernels is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./tools/profiler/cutlass_profiler --kernels=cutlass_tensorop_s*fprop_optimized_f16 --n=8 --h=224 --w=224 --c=128 --k=128 --r=3 --s=3&#xA;&#xA;...&#xA;=============================&#xA;  Problem ID: 1&#xA;&#xA;        Provider: CUTLASS&#xA;   OperationKind: conv2d&#xA;       Operation: cutlass_tensorop_s16816fprop_optimized_f16_128x128_32x5_nhwc&#xA;&#xA;          Status: Success&#xA;    Verification: ON&#xA;     Disposition: Passed&#xA;&#xA;reference_device: Passed&#xA;&#xA;       Arguments: --conv_kind=fprop --n=8 --h=224 --w=224 --c=128 --k=128 --r=3 --s=3 --p=224 --q=224 --pad_h=1 --pad_w=1  \&#xA;                  --stride_h=1 --stride_w=1 --dilation_h=1 --dilation_w=1 --Activation=f16:nhwc --Filter=f16:nhwc --Output=f32:nhwc  \&#xA;                  --conv_mode=cross --iterator_algorithm=optimized --alpha=1 --beta=0 --split_k_mode=serial --split_k_slices=1  \&#xA;                  --eq_gemm_provider=none --op_class=tensorop --accum=f32 --cta_m=128 --cta_n=128 --cta_k=32 --stages=5  \&#xA;                  --warps_m=2 --warps_n=2 --warps_k=1 --inst_m=16 --inst_n=8 --inst_k=16 --min_cc=80 --max_cc=1024&#xA;&#xA;           Bytes: 1130659840  bytes&#xA;           FLOPs: 118482796544  flops&#xA;&#xA;         Runtime: 0.711496  ms&#xA;          Memory: 1479.99 GiB/s&#xA;&#xA;            Math: 166526 GFLOP/s&#xA;&#xA;=============================&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building one Convolution CUDA kernel&lt;/h3&gt; &#xA;&lt;p&gt;To compile and run one CUDA Core convolution kernel implementing forward propagation (fprop) with F32 accumulation and FP32 input targeting NVIDIA Ampere and Turing architecture, use the below cmake command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake .. -DCUTLASS_NVCC_ARCHS=&#39;75;80&#39; -DCUTLASS_LIBRARY_KERNELS=cutlass_simt_sfprop_optimized_128x128_8x2_nhwc&#xA;...&#xA;$ make cutlass_profiler -j16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example command line for profiling one CUDA Core convolution kernel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./tools/profiler/cutlass_profiler --kernels=cutlass_simt_sfprop_optimized_128x128_8x2_nhwc --n=8 --h=224 --w=224 --c=128 --k=128 --r=3 --s=3&#xA;&#xA;&#xA;=============================&#xA;  Problem ID: 1&#xA;&#xA;        Provider: CUTLASS&#xA;   OperationKind: conv2d&#xA;       Operation: cutlass_simt_sfprop_optimized_128x128_8x2_nhwc&#xA;&#xA;          Status: Success&#xA;    Verification: ON&#xA;     Disposition: Passed&#xA;&#xA;reference_device: Passed&#xA;&#xA;       Arguments: --conv_kind=fprop --n=8 --h=224 --w=224 --c=128 --k=128 --r=3 --s=3 --p=224 --q=224 --pad_h=1 --pad_w=1  \&#xA;                  --stride_h=1 --stride_w=1 --dilation_h=1 --dilation_w=1 --Activation=f32:nhwc --Filter=f32:nhwc --Output=f32:nhwc  \&#xA;                  --conv_mode=cross --iterator_algorithm=optimized --alpha=1 --beta=0 --split_k_mode=serial --split_k_slices=1  \&#xA;                  --eq_gemm_provider=none --op_class=simt --accum=f32 --cta_m=128 --cta_n=128 --cta_k=8 --stages=2 --warps_m=4  \&#xA;                  --warps_n=2 --warps_k=1 --inst_m=1 --inst_n=1 --inst_k=1 --min_cc=50 --max_cc=1024&#xA;&#xA;           Bytes: 2055798784  bytes&#xA;           FLOPs: 118482796544  flops&#xA;&#xA;         Runtime: 7.34266  ms&#xA;          Memory: 260.752 GiB/s&#xA;&#xA;            Math: 16136.2 GFLOP/s&#xA;&#xA;&#xA;=============================&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More Details on Compiling CUTLASS Kernels and CUTLASS Profiler&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please follow the links for more CMake examples on selectively compiling CUTLASS kernels: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/quickstart.md#gemm-cmake-examples&#34;&gt;GEMM CMake Examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/quickstart.md#convolution-cmake-examples&#34;&gt;Implicit GEMM convolution CMake Examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/profiler.md&#34;&gt;Further details about the CUTLASS Profiler are described here.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;CUTLASS is released by NVIDIA Corporation as Open Source software under the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/LICENSE.txt&#34;&gt;3-clause &#34;New&#34; BSD license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;The official list of CUTLASS developers and contributors is available here: &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cutlass/main/CONTRIBUTORS.md&#34;&gt;CONTRIBUTORS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Copyright&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2017 - 2025 NVIDIA CORPORATION &amp;amp; AFFILIATES. All rights reserved. SPDX-License-Identifier: BSD-3-Clause&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  Redistribution and use in source and binary forms, with or without&#xA;  modification, are permitted provided that the following conditions are met:&#xA;&#xA;  1. Redistributions of source code must retain the above copyright notice, this&#xA;  list of conditions and the following disclaimer.&#xA;&#xA;  2. Redistributions in binary form must reproduce the above copyright notice,&#xA;  this list of conditions and the following disclaimer in the documentation&#xA;  and/or other materials provided with the distribution.&#xA;&#xA;  3. Neither the name of the copyright holder nor the names of its&#xA;  contributors may be used to endorse or promote products derived from&#xA;  this software without specific prior written permission.&#xA;&#xA;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34;&#xA;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE&#xA;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE&#xA;  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE&#xA;  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL&#xA;  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#xA;  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER&#xA;  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,&#xA;  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xA;  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ClassicOldSong/Apollo</title>
    <updated>2025-03-01T01:53:12Z</updated>
    <id>tag:github.com,2025-03-01:/ClassicOldSong/Apollo</id>
    <link href="https://github.com/ClassicOldSong/Apollo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sunshine fork - The easiest way to stream with the native resolution of your client device&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apollo&lt;/h1&gt; &#xA;&lt;p&gt;Apollo is a self-hosted desktop stream host for &lt;a href=&#34;https://github.com/ClassicOldSong/moonlight-android&#34;&gt;Artemis(Moonlight Noir)&lt;/a&gt;. Offering low latency, native client resolution, cloud gaming server capabilities with support for AMD, Intel, and Nvidia GPUs for hardware encoding. Software encoding is also available. A web UI is provided to allow configuration and client pairing from your favorite web browser. Pair from the local server or any mobile device.&lt;/p&gt; &#xA;&lt;p&gt;Major features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Built-in Virtual Display with HDR support that matches the resolution/framerate config of your client automatically&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Permission management for clients&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Clipboard sync&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Commands for client connection/disconnection (checkout &lt;a href=&#34;https://github.com/ClassicOldSong/Apollo/wiki/Auto-pause-resume-games&#34;&gt;Auto pause/resume games&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Input only mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Refer to LizardByte&#39;s documentation hosted on &lt;a href=&#34;https://docs.lizardbyte.dev/projects/sunshine&#34;&gt;Read the Docs&lt;/a&gt; for now.&lt;/p&gt; &#xA;&lt;p&gt;Currently Virtual Display support is Windows only, Linux support is planned and will be implemented in the future.&lt;/p&gt; &#xA;&lt;h2&gt;About Permission System&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/ClassicOldSong/Apollo/wiki/Permission-System&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] The &lt;strong&gt;FIRST&lt;/strong&gt; client paired with Apollo will be granted with FULL permissions, then other newly paired clients will only be granted with &lt;code&gt;View Streams&lt;/code&gt; and &lt;code&gt;List Apps&lt;/code&gt; permission. If you encounter &lt;code&gt;Permission Denied&lt;/code&gt; error when trying to launch any app, go check the permission for that device and grant &lt;code&gt;Launch Apps&lt;/code&gt; permission. The same applies to the situation when you find that you can&#39;t move mouse or type with keyboard on newly paired clients, grant the corresponding client &lt;code&gt;Mouse Input&lt;/code&gt; and &lt;code&gt;Keyboard Input&lt;/code&gt; permissions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;About Virtual Display&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] &lt;em&gt;&lt;strong&gt;It is highly recommend to remove any other virtual display solutions from your system and Apollo/Sunshine config, to reduce confusions and compatibility issues.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;strong&gt;TL;DR&lt;/strong&gt; Just treat your Artemis/Moonlight client like a dedicated PnP monitor with Apollo.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Apollo uses SudoVDA for virtual display. It features auto resolution and framerate matching for your Artemis/Moonlight clients. The virtual display is created upon the stream starts and removed once the app quits. &lt;strong&gt;If you do not see a new virtual display added or removed when the stream starts or stops, there may be a driver misconfiguration, or another persistent virtual display might still be active.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The virtual display works just like any physically attached monitors with SudoVDA, there&#39;s completely no need for a super complicated solution to &#34;fix&#34; resolution configurations for your devices. Unlike all other solutions that reuses one identity or generate a random one each time for any virtual display sessions, &lt;strong&gt;Apollo assigns a fixed identity for each Artemis/Moonlight client, so your display configuration will be automatically remembered and managed by Windows natively.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration for dual GPU laptops&lt;/h2&gt; &#xA;&lt;p&gt;Apollo supports dual GPUs seamlessly.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use your dGPU, just set the &lt;code&gt;Adapter Name&lt;/code&gt; to your dGPU and enable &lt;code&gt;Headless mode&lt;/code&gt; in &lt;code&gt;Audio/Video&lt;/code&gt; tab, save and restart your computer. No dummy plug is needed any more, the image will be rendered and encoded directly from your dGPU.&lt;/p&gt; &#xA;&lt;h2&gt;About HDR&lt;/h2&gt; &#xA;&lt;p&gt;HDR starts supporting from Windows 11 23H2 and generally supported on 24H2. Some systems might not have HDR toggle on 23H2 and you just need to upgrade to 24H2. Any system lower than 23H2/Windows 10 will not have HDR option available.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] The below section is written for professional media workers. It doesn&#39;t stop you from enabling HDR if you know what you&#39;re doing and have deep understanding about how HDR works.&lt;/p&gt; &#xA; &lt;p&gt;Apollo and SudoVDA can handle HDR just fine like any other streaming solutions.&lt;/p&gt; &#xA; &lt;p&gt;If you have had good experience with HDR previously, you can safely ignore this section.&lt;/p&gt; &#xA; &lt;p&gt;If you&#39;re curious, read on, but don&#39;t blame Apollo for poor HDR support.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Whether HDR streaming looks good, it depends completely on your client.&lt;/p&gt; &#xA;&lt;p&gt;In short, ICC color correction should be totally useless while streaming HDR. It&#39;s your client&#39;s job to get HDR content displayed right, not the host. But in fact, it does affect the captured video stream and reflect changes on devices that can handle HDR correctly. On other devices that can&#39;t, the info is not respected at all.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s very complicated to explain why HDR is a total mess, and why enabling HDR makes the image appear dark/yellow. If it&#39;s your first time got HDR streaming working, and thinks HDR looks awuful, you&#39;re right, but that&#39;s not Apollo&#39;s fault, it&#39;s your device that tone mapped SDR content to the maximum of the capability of its screen, there&#39;s no headroom for anything beyond that actual peak brightness for HDR. For details, please take a look &lt;a href=&#34;https://github.com/ClassicOldSong/Apollo/issues/164&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Usually Apple devices that have HDR capability can be trusted to have good results, other than that, your luck depends.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;DEPRECATION ALERT&lt;/summary&gt; &#xA; &lt;p&gt;Enabling HDR is &lt;strong&gt;generally not recommended&lt;/strong&gt; with &lt;strong&gt;ANY streaming solutions&lt;/strong&gt; at this moment, probably in the long term. The issue with &lt;strong&gt;HDR itself&lt;/strong&gt; is huge, with loads of semi-incompatible standards, and massive variance between device configurations and capabilities. Game support for HDR is still choppy.&lt;/p&gt; &#xA; &lt;p&gt;SDR actually provides much more stable color accuracy, and are widely supported throughout most devices you can imagine. For games, art style can easily overcome the shortcoming with no HDR, and SDR has pretty standard workflows to ensure their visual performance. So HDR isn&#39;t &lt;em&gt;that&lt;/em&gt; important in most of the cases.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;How to run multiple instances of Apollo for multiple virtual displays&lt;/h2&gt; &#xA;&lt;p&gt;Follow the instructions in the &lt;a href=&#34;https://github.com/ClassicOldSong/Apollo/wiki/How-to-start-multiple-instances-of-Apollo&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No virtual display added&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ensure the SudoVDA driver is installed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shows the same screen as main screen&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you&#39;re using an external display for the first time, Windows might configure it as &#34;Mirror mode&#34; by default. Press &lt;kbd&gt;Meta + P&lt;/kbd&gt; (or known as &lt;kbd&gt;Win + P&lt;/kbd&gt;) and select &#34;Extended&#34;, then &lt;strong&gt;exit the app&lt;/strong&gt; (not only the stream) and start the app again. You only need to do this once.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Apps still launch on physical display.&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;If you don&#39;t need to set resolution on your physical display, you can disable the whole advanced config. Then exit Apollo, check if there&#39;s a file named &#34;display_device.state&#34;, if so remove it, then start Apollo again.&lt;/p&gt; &lt;p&gt;Then when you stream just disable the physical display in Windows settings. It&#39;ll then be managed by Windows.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Or you can go to &lt;code&gt;Audio/Video&lt;/code&gt; tab, in &lt;code&gt;Advanced display device options&lt;/code&gt; section, set &lt;code&gt;Device configuration&lt;/code&gt; to &lt;code&gt;Activate the display automatically and make it a primary display&lt;/code&gt;. Also make sure the app has set preferred display to &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;Auto&lt;/code&gt;. This method is not recommended though, as it may fail due to misterious reasons and are sure can mess up your configs.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Primary display changed to the virtual display after connection. I don&#39;t want that.&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Go to &lt;code&gt;Audio/Video&lt;/code&gt; tab, in &lt;code&gt;Advanced display device option&lt;/code&gt;s section, set &lt;code&gt;Devce configuration&lt;/code&gt; to &lt;code&gt;Disabled&lt;/code&gt; or &lt;code&gt;Verify that display is enabled&lt;/code&gt; or &lt;code&gt;Activate the display automatically&lt;/code&gt;. Then go to Windows display settings and set your desired display to primary.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;I want to turn off the physical monitor when streaming&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The first time you stream with virtual display, go to Windows settings and disable the physical monitor. The next time you start streaming it will turn off automatically.&lt;/li&gt; &#xA;   &lt;li&gt;Or, go to &lt;code&gt;Audio/Video&lt;/code&gt; tab, in &lt;code&gt;Advanced display device option&lt;/code&gt;s section, set &lt;code&gt;Devce configuration&lt;/code&gt; to &lt;code&gt;Deactivate other displays and activate only the specified display&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;I want all apps to start in virtual display&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Simply enable &lt;code&gt;Headless Mode&lt;/code&gt; in &lt;code&gt;Audio/Video&lt;/code&gt; tab. Make sure you have set the encoder capability manually in &lt;code&gt;Advanced&lt;/code&gt; tab.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Client says Host doesn&#39;t support HDR/444 but it actually does&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This only happens when you enabled &lt;code&gt;Headless Mode&lt;/code&gt;. The initial capability probing is skipped during startup and is performed on the first connection.&lt;/li&gt; &#xA;   &lt;li&gt;If you don&#39;t mind, quit and enter the stream again should fix the problem, or just go to &lt;code&gt;Advanced&lt;/code&gt; tab and set the advertised capability to &lt;code&gt;Always advertise&lt;/code&gt; based on the actual capability of your GPU in use.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Virtual Display entry does not run any commands&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The Virtual Display entry also acts as a safe mode entry, so all commands and customizations are disabled for it.&lt;/li&gt; &#xA;   &lt;li&gt;If you want specific app to use virtual display, just enable &lt;code&gt;Always use Virtual Display&lt;/code&gt; option for it.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HDR isn&#39;t enabled when using battery&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Check out &lt;a href=&#34;https://support.microsoft.com/en-us/windows/hdr-settings-in-windows-2d767185-38ec-7fdc-6f97-bbc6c5ef24e6&#34;&gt;To play HDR content when running on battery&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20240828044038/https://support.microsoft.com/en-us/windows/hdr-settings-in-windows-2d767185-38ec-7fdc-6f97-bbc6c5ef24e6&#34;&gt;Archive&lt;/a&gt; to the above link in case M$ remove it unexpectedly someday&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resolution can&#39;t match client side request anymore&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;NEVER&lt;/strong&gt;&lt;/em&gt; set screen rotation on virtual displays! Apollo can handle vertical display normally, there&#39;s no need to manually set screen rotation if you&#39;re using &lt;a href=&#34;https://github.com/ClassicOldSong/moonlight-android&#34;&gt;Artemis&lt;/a&gt; with Apollo.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;If you happen messed up with your monitor config:&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Disconnect ALL Artemis/Moonlight sessions&lt;/li&gt; &#xA;     &lt;li&gt;Quit Apollo&lt;/li&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;Meta(Win) + R&lt;/kbd&gt;, then type &lt;code&gt;regedit&lt;/code&gt;, hit enter&lt;/li&gt; &#xA;     &lt;li&gt;Delete ALL entries under &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\GraphicsDrivers\Configuration&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\GraphicsDrivers\Connectivity&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\GraphicsDrivers\ScaleFactors&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;p&gt;This will clear your monitor configuration cache.&lt;/p&gt; &lt;p&gt;Then you&#39;re good to go!&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stuttery video stream on some clients&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Checkout &lt;a href=&#34;https://github.com/ClassicOldSong/Apollo/wiki/Display-Mode-Override&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;I would like to capture sound from only one app.&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Check out the &lt;a href=&#34;https://github.com/ClassicOldSong/Apollo/wiki/Stream-audio-from-only-one-app&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: This table is a work in progress. Do not purchase hardware based on this.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Minimum Requirements&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Component&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GPU&lt;/td&gt; &#xA;   &lt;td&gt;AMD: VCE 1.0 or higher, see: &lt;a href=&#34;https://github.com/obsproject/obs-amd-encoder/wiki/Hardware-Support&#34;&gt;obs-amd hardware support&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Intel: VAAPI-compatible, see: &lt;a href=&#34;https://www.intel.com/content/www/us/en/developer/articles/technical/linuxmedia-vaapi.html&#34;&gt;VAAPI hardware support&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Nvidia: NVENC enabled cards, see: &lt;a href=&#34;https://developer.nvidia.com/video-encode-and-decode-gpu-support-matrix-new&#34;&gt;nvenc support matrix&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU&lt;/td&gt; &#xA;   &lt;td&gt;AMD: Ryzen 3 or higher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Intel: Core i3 or higher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RAM&lt;/td&gt; &#xA;   &lt;td&gt;4GB or more&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OS&lt;/td&gt; &#xA;   &lt;td&gt;Windows: 10+ (Windows Server requires &lt;a href=&#34;https://github.com/nefarius/ViGEmBus/issues/153&#34;&gt;manual installation&lt;/a&gt; for gamepad support)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;macOS: 12+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linux/Debian: 11 (bullseye)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linux/Fedora: 39+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linux/Ubuntu: 22.04+ (jammy)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Network&lt;/td&gt; &#xA;   &lt;td&gt;Host: 5GHz, 802.11ac&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Client: 5GHz, 802.11ac&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;4k Suggestions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Component&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GPU&lt;/td&gt; &#xA;   &lt;td&gt;AMD: Video Coding Engine 3.1 or higher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Intel: HD Graphics 510 or higher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Nvidia: GeForce GTX 1080 or higher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU&lt;/td&gt; &#xA;   &lt;td&gt;AMD: Ryzen 5 or higher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Intel: Core i5 or higher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Network&lt;/td&gt; &#xA;   &lt;td&gt;Host: CAT5e ethernet or better&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Client: CAT5e ethernet or better&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;HDR Suggestions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Component&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GPU&lt;/td&gt; &#xA;   &lt;td&gt;AMD: Video Coding Engine 3.4 or higher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Intel: UHD Graphics 730 or higher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Nvidia: Pascal-based GPU (GTX 10-series) or higher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU&lt;/td&gt; &#xA;   &lt;td&gt;AMD: todo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Intel: todo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Network&lt;/td&gt; &#xA;   &lt;td&gt;Host: CAT5e ethernet or better&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Client: CAT5e ethernet or better&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;SudoVDA: Virtual Display Adapter Driver used in Apollo&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ClassicOldSong/moonlight-android&#34;&gt;Artemis&lt;/a&gt;: Integrated Virtual Display options control from client side&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Artemis currently supports Android only. Other platforms will come later.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Currently support is only provided via GitHub Issues/Discussions.&lt;/p&gt; &#xA;&lt;p&gt;No real time chat support will ever be provided for Apollo and Artemis. Including but not limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord&lt;/li&gt; &#xA; &lt;li&gt;Telegram&lt;/li&gt; &#xA; &lt;li&gt;Whatsapp&lt;/li&gt; &#xA; &lt;li&gt;QQ&lt;/li&gt; &#xA; &lt;li&gt;WeChat&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When there&#39;s a chat, there&#39;re dramas. -- Confucius&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ClassicOldSong/Apollo/releases&#34;&gt;Releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;I got kicked from Moonlight and Sunshine&#39;s Discord server and banned from Sunshine&#39;s GitHub repo literally for helping people out.&lt;/p&gt; &#xA;&lt;p&gt;This is what I got for finding a bug, opened an issue, getting no response, troubleshoot myself, fixed the issue myself, shared it by PR to the main repo hoping my efforts can help someone else during the maintenance gap.&lt;/p&gt; &#xA;&lt;p&gt;Yes, I&#39;m going away. &lt;a href=&#34;https://github.com/ClassicOldSong/Apollo&#34;&gt;Apollo&lt;/a&gt; and &lt;a href=&#34;https://github.com/ClassicOldSong/moonlight-android&#34;&gt;Artemis(Moonlight Noir)&lt;/a&gt; will no longer be compatible with OG Sunshine and OG Moonlight eventually, but they&#39;ll work even better with much more carefully designed features.&lt;/p&gt; &#xA;&lt;p&gt;The Moonlight repo had stayed silent for 5 months, with nobody actually responding to issues, and people are getting totally no help besides the limited FAQ in their Discord server. I tried to answer issues and questions, solve problems within my ability but I got kicked out just for helping others.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PRs for feature improvements are welcomed here unlike the main repo, your ideas are more likely to be appreciated and your efforts are actually being respected. We welcome people who can and willing to share their efforts, helping yourselves and other people in need.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: They have contacted me and apologized for this incident, but the fact it &lt;strong&gt;happened&lt;/strong&gt; still motivated me to start my own fork.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GPLv3&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jomjol/AI-on-the-edge-device</title>
    <updated>2025-03-01T01:53:12Z</updated>
    <id>tag:github.com,2025-03-01:/jomjol/AI-on-the-edge-device</id>
    <link href="https://github.com/jomjol/AI-on-the-edge-device" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy to use device for connecting &#34;old&#34; measuring units (water, power, gas, ...) to the digital world&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;AI on the Edge Device: Digitizing Your non-digital meters with an ESP32-CAM&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#key-features-&#34;&gt;Key Features 🚀&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#workflow-&#34;&gt;Workflow 🔧&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#impressions-&#34;&gt;Impressions 📷&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#ai-on-the-edge-device-on-a-water-meter-&#34;&gt;AI-on-the-edge-device on a Water Meter 💧&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#web-interface-water-meter-&#34;&gt;Web Interface (Water Meter) 💻&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#ai-on-the-edge-device-on-an-electrical-power-meter-&#34;&gt;AI-on-the-edge-device on an Electrical Power Meter ⚡&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#setup-%EF%B8%8F&#34;&gt;Setup 🛠️&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#download-&#34;&gt;Download 🔽&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#flashing-the-esp32-&#34;&gt;Flashing the ESP32 💾&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#flashing-the-sd-card-&#34;&gt;Flashing the SD Card 💾&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#casing-%EF%B8%8F&#34;&gt;Casing 🛠️&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#donate-&#34;&gt;Donate ☕&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#support-&#34;&gt;Support 💬&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#changes-and-history-&#34;&gt;Changes and History 📜&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#build-it-yourself-&#34;&gt;Build It Yourself 🔨&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#tools-%EF%B8%8F&#34;&gt;Tools 🛠️&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#additional-ideas-&#34;&gt;Additional Ideas 💡&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#our-contributors-%EF%B8%8F&#34;&gt;Our Contributors ❤️&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#top&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Back to Top&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jomjol/AI-on-the-edge-device/tree/main/code&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with-C++-1f425f.svg?sanitize=true&#34; alt=&#34;made-with-c++&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jomjol.github.io/AI-on-the-edge-device-docs/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Doc-MkDocs-526CFE.svg?sanitize=true&#34; alt=&#34;Doc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/jomjol/AI-on-the-edge-device/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/jomjol/AI-on-the-edge-device/total.svg?sanitize=true&#34; alt=&#34;Total downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/jomjol/AI-on-the-edge-device/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/jomjol/AI-on-the-edge-device.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/jomjol/AI-on-the-edge-device/network/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/jomjol/AI-on-the-edge-device.svg?style=social&amp;amp;label=Fork&amp;amp;maxAge=2592000&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/jomjol/AI-on-the-edge-device/stargazers/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/jomjol/AI-on-the-edge-device.svg?style=social&amp;amp;label=Star&amp;amp;maxAge=2592000&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; id=&#34;top&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/images/icon/watermeter.svg?sanitize=true&#34; width=&#34;150px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Artificial intelligence is everywhere, from speech to image recognition. While most AI systems rely on powerful processors or cloud computing, &lt;strong&gt;edge computing&lt;/strong&gt; brings AI closer to the end user by utilizing the capabilities of modern processors.&lt;br&gt; This project demonstrates edge computing using the &lt;strong&gt;ESP32&lt;/strong&gt;, a low-cost, AI-capable device, to digitize your analog meters—whether water, gas, or electricity. With affordable hardware and simple instructions, you can turn any standard meter into a smart device.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s explore how to make &lt;strong&gt;AI on the Edge&lt;/strong&gt; a reality! 🌟&lt;/p&gt; &#xA;&lt;p&gt;All you need is an &lt;a href=&#34;https://jomjol.github.io/AI-on-the-edge-device-docs/Hardware-Compatibility/&#34;&gt;ESP32 board with a supported camera&lt;/a&gt; and some practical skills. 🛠️&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Key Features 🚀&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔗 &lt;strong&gt;Tensorflow Lite (TFLite) integration&lt;/strong&gt; – including an easy-to-use wrapper.&lt;/li&gt; &#xA; &lt;li&gt;📸 &lt;strong&gt;Inline image processing&lt;/strong&gt; (feature detection, alignment, ROI extraction).&lt;/li&gt; &#xA; &lt;li&gt;💡 &lt;strong&gt;Small&lt;/strong&gt; and &lt;strong&gt;affordable&lt;/strong&gt; device (3 x 4.5 x 2 cm³, less than 10 EUR).&lt;/li&gt; &#xA; &lt;li&gt;📷 Integrated camera and illumination.&lt;/li&gt; &#xA; &lt;li&gt;🌐 Web interface for administration and control.&lt;/li&gt; &#xA; &lt;li&gt;🔄 OTA interface for updating directly via the web interface.&lt;/li&gt; &#xA; &lt;li&gt;🏠 Full integration with Home Assistant.&lt;/li&gt; &#xA; &lt;li&gt;📊 Support for &lt;strong&gt;Influx DB 1&lt;/strong&gt; and &lt;strong&gt;2&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;📡 &lt;strong&gt;MQTT protocol&lt;/strong&gt; support.&lt;/li&gt; &#xA; &lt;li&gt;📥 &lt;strong&gt;REST API&lt;/strong&gt; available for data access.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Workflow 🔧&lt;/h2&gt; &#xA;&lt;p&gt;The device captures a photo of your meter at set intervals. It then extracts the Regions of Interest (ROIs) from the image and runs them through artificial intelligence. As a result, you get the digitized value of your meter.&lt;/p&gt; &#xA;&lt;p&gt;There are several options for what to do with that value:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📤 Send it to a &lt;strong&gt;MQTT broker&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;📝 Write it to an &lt;strong&gt;InfluxDb&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;🔗 Provide access via a &lt;strong&gt;REST API&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/images/idea.jpg&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Impressions 📷&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;AI-on-the-edge-device on a Water Meter 💧&lt;/h3&gt; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/images/watermeter_all.jpg&#34; width=&#34;200&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/images/main.jpg&#34; width=&#34;200&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/images/size.png&#34; width=&#34;200&#34;&gt; &lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;Web Interface (Water Meter) 💻&lt;/h3&gt; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/images/watermeter.jpg&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;AI-on-the-edge-device on an Electrical Power Meter ⚡&lt;/h3&gt; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/images/powermeter.jpg&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Setup 🛠️&lt;/h2&gt; &#xA;&lt;p&gt;There is growing &lt;a href=&#34;https://jomjol.github.io/AI-on-the-edge-device-docs/&#34;&gt;documentation&lt;/a&gt; which provides you with a lot of information. Head there to get started, set it up, and configure it.&lt;/p&gt; &#xA;&lt;p&gt;There are also articles in the German Heise magazine &#34;make:&#34; about the setup and technical background (behind a paywall): &lt;a href=&#34;https://www.heise.de/select/make/2021/2/2103513300897420296&#34;&gt;DIY - Setup&lt;/a&gt; 📰&lt;/p&gt; &#xA;&lt;p&gt;A lot of people have created useful YouTube videos that might help you get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=HKBofb1cnNc&#34;&gt;youtube.com/watch?v=HKBofb1cnNc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=yyf0ORNLCk4&#34;&gt;youtube.com/watch?v=yyf0ORNLCk4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=XxmTubGek6M&#34;&gt;youtube.com/watch?v=XxmTubGek6M&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=mDIJEyElkAU&#34;&gt;youtube.com/watch?v=mDIJEyElkAU&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=SssiPkyKVVs&#34;&gt;youtube.com/watch?v=SssiPkyKVVs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=MAHE_QyHZFQ&#34;&gt;youtube.com/watch?v=MAHE_QyHZFQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Uap_6bwtILQ&#34;&gt;youtube.com/watch?v=Uap_6bwtILQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For further background information, head to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.heise.de/select/make/2021/6/2126410443385102621&#34;&gt;Neural Networks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.heise.de/select/make/2022/1/2134114065999161585&#34;&gt;Training Neural Networks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.heise.de/select/make/2022/2/2204010051597422030&#34;&gt;Programming on the ESP32&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Download 🔽&lt;/h2&gt; &#xA;&lt;p&gt;The latest available version can be found on the &lt;a href=&#34;https://github.com/jomjol/AI-on-the-edge-device/releases&#34;&gt;Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Flashing the ESP32 💾&lt;/h2&gt; &#xA;&lt;p&gt;Initially, you will have to flash the ESP32 via a USB connection. Later updates are possible directly over the air (OTA using Wi-Fi).&lt;/p&gt; &#xA;&lt;p&gt;There are different ways to flash your ESP32:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The preferred way is the &lt;a href=&#34;https://jomjol.github.io/AI-on-the-edge-device/index.html&#34;&gt;Web Installer and Console&lt;/a&gt;, a browser-based tool to flash the ESP32 and extract the log over USB:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/images/web-installer.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Flash Tool from Espressif&lt;/li&gt; &#xA; &lt;li&gt;ESPtool (command-line tool)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://jomjol.github.io/AI-on-the-edge-device-docs/Installation/&#34;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Flashing the SD Card 💾&lt;/h2&gt; &#xA;&lt;p&gt;The SD card can be set up automatically after the firmware is installed. See the &lt;a href=&#34;https://jomjol.github.io/AI-on-the-edge-device-docs/Installation/#remote-setup-using-the-built-in-access-point&#34;&gt;documentation&lt;/a&gt; for details. For this to work, the SD card must be FAT formatted (which is the default on a new SD card).&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, the SD card can still be set up manually. See the &lt;a href=&#34;https://jomjol.github.io/AI-on-the-edge-device-docs/Installation/#3-sd-card&#34;&gt;documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Casing 🛠️&lt;/h2&gt; &#xA;&lt;p&gt;Various 3D-printable housings can be found here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;💧 &lt;a href=&#34;https://www.thingiverse.com/thing:4573481&#34;&gt;Water Meter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;⚡ &lt;a href=&#34;https://www.thingiverse.com/thing:5028229&#34;&gt;Power Meter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔥 &lt;a href=&#34;https://www.thingiverse.com/thing:5224101&#34;&gt;Gas Meter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📷 &lt;a href=&#34;https://www.thingiverse.com/thing:4571627&#34;&gt;ESP32-cam housing only&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Donate ☕&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to support the developer with a cup of coffee, you can do so via &lt;a href=&#34;https://www.paypal.com/donate?hosted_button_id=8TRSVYNYKDSWL&#34;&gt;PayPal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.paypal.com/donate?hosted_button_id=8TRSVYNYKDSWL&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/images/paypal.png&#34; width=&#34;200px&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Support 💬&lt;/h2&gt; &#xA;&lt;p&gt;If you have any technical problems, please search the &lt;a href=&#34;https://github.com/jomjol/AI-on-the-edge-device/discussions&#34;&gt;discussions&lt;/a&gt;. In case you find a bug or have a feature request, please open an &lt;a href=&#34;https://github.com/jomjol/AI-on-the-edge-device/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For any other issues, you can contact the developer via email:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/images/mail.jpg&#34; height=&#34;25&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Changes and History 📜&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/Changelog.md&#34;&gt;Changelog&lt;/a&gt; for detailed information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Build It Yourself 🔨&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/code/README.md&#34;&gt;Build Instructions&lt;/a&gt; for step-by-step guidance.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Tools 🛠️&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Logfile downloader and combiner (Thanks to &lt;a href=&#34;https://github.com/reserve85&#34;&gt;reserve85&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It can be found at &lt;a href=&#34;https://github.com/jomjol/AI-on-the-edge-device/tree/main/tools/logfile-tool&#34;&gt;&#39;/tools/logfile-tool&#39;&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Additional Ideas 💡&lt;/h2&gt; &#xA;&lt;p&gt;There are some ideas and feature requests which are not currently being pursued—mainly due to capacity constraints on the part of the developers. These features are collected in the &lt;a href=&#34;https://github.com/jomjol/AI-on-the-edge-device/issues&#34;&gt;issues&lt;/a&gt; and in &lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/FeatureRequest.md&#34;&gt;FeatureRequest.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Our Contributors ❤️&lt;/h2&gt; &#xA;&lt;!-- Do not manually edit this section! It should get updated using the Github action &#34;Manually update contributors list&#34; --&gt; &#xA;&lt;!-- readme: contributors -start --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/jomjol&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/30766535?v=4&#34; width=&#34;100;&#34; alt=&#34;jomjol&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;jomjol&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/caco3&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/1783586?v=4&#34; width=&#34;100;&#34; alt=&#34;caco3&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;CaCO3&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/haverland&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/412645?v=4&#34; width=&#34;100;&#34; alt=&#34;haverland&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Frank Haverland&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/SybexX&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/587201?v=4&#34; width=&#34;100;&#34; alt=&#34;SybexX&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;michael&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Slider0007&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/115730895?v=4&#34; width=&#34;100;&#34; alt=&#34;Slider0007&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Slider0007&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/nliaudat&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/6782613?v=4&#34; width=&#34;100;&#34; alt=&#34;nliaudat&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Nicolas Liaudat&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Zwer2k&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/10438794?v=4&#34; width=&#34;100;&#34; alt=&#34;Zwer2k&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Zwer2k&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/phlupp&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/6304863?v=4&#34; width=&#34;100;&#34; alt=&#34;phlupp&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;phlupp&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/jasaw&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/721280?v=4&#34; width=&#34;100;&#34; alt=&#34;jasaw&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;jasaw&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/dockSquadron&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/11964767?v=4&#34; width=&#34;100;&#34; alt=&#34;dockSquadron&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;dockSquadron&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/rdmueller&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/1856308?v=4&#34; width=&#34;100;&#34; alt=&#34;rdmueller&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Ralf D. Müller&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/cristianmitran&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/36613624?v=4&#34; width=&#34;100;&#34; alt=&#34;cristianmitran&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;cristianmitran&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/michaeljoos72&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/20517474?v=4&#34; width=&#34;100;&#34; alt=&#34;michaeljoos72&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;michaeljoos72&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/henrythasler&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/6277203?v=4&#34; width=&#34;100;&#34; alt=&#34;henrythasler&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Henry Thasler&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/amantyagiprojects&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/174239452?v=4&#34; width=&#34;100;&#34; alt=&#34;amantyagiprojects&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Naman Tyagi&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/pixeldoc2000&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/376715?v=4&#34; width=&#34;100;&#34; alt=&#34;pixeldoc2000&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;pixel::doc&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/mad2xlc&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/37449746?v=4&#34; width=&#34;100;&#34; alt=&#34;mad2xlc&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Stefan&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/jochenchrist&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/2930448?v=4&#34; width=&#34;100;&#34; alt=&#34;jochenchrist&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;jochenchrist&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/parhedberg&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/13777521?v=4&#34; width=&#34;100;&#34; alt=&#34;parhedberg&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;parhedberg&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/fsck-block&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/58307481?v=4&#34; width=&#34;100;&#34; alt=&#34;fsck-block&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;fsck-block&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/slovdahl&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/1417619?v=4&#34; width=&#34;100;&#34; alt=&#34;slovdahl&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Sebastian Lövdahl&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/RaHehl&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/7577984?v=4&#34; width=&#34;100;&#34; alt=&#34;RaHehl&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Raphael Hehl&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/LordGuilly&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/13271835?v=4&#34; width=&#34;100;&#34; alt=&#34;LordGuilly&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;LordGuilly&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/muggenhor&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/484066?v=4&#34; width=&#34;100;&#34; alt=&#34;muggenhor&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Giel van Schijndel&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/bilalmirza74&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/84387676?v=4&#34; width=&#34;100;&#34; alt=&#34;bilalmirza74&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Bilal Mirza&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/AngryApostrophe&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/89547888?v=4&#34; width=&#34;100;&#34; alt=&#34;AngryApostrophe&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;AngryApostrophe&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/ralf1307&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/46164027?v=4&#34; width=&#34;100;&#34; alt=&#34;ralf1307&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Ralf Rachinger&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Ranjana761&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/129291313?v=4&#34; width=&#34;100;&#34; alt=&#34;Ranjana761&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Ranjana761&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/SURYANSH-RAI&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/79277130?v=4&#34; width=&#34;100;&#34; alt=&#34;SURYANSH-RAI&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;SURYANSH RAI&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/SkylightXD&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/16561545?v=4&#34; width=&#34;100;&#34; alt=&#34;SkylightXD&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;SkylightXD&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/ottk3&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/5236802?v=4&#34; width=&#34;100;&#34; alt=&#34;ottk3&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Sven Rojek&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Turbo87&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/141300?v=4&#34; width=&#34;100;&#34; alt=&#34;Turbo87&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Tobias Bieniek&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/tkopczuk&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/101632?v=4&#34; width=&#34;100;&#34; alt=&#34;tkopczuk&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Tomek Kopczuk&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/yonz2&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/13886257?v=4&#34; width=&#34;100;&#34; alt=&#34;yonz2&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Yonz&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Yveaux&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/7716005?v=4&#34; width=&#34;100;&#34; alt=&#34;Yveaux&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Yveaux&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/flooxo&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/93255373?v=4&#34; width=&#34;100;&#34; alt=&#34;flooxo&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;flox_x&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/gneluka&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/32097881?v=4&#34; width=&#34;100;&#34; alt=&#34;gneluka&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;gneluka&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/kalwados&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/11840444?v=4&#34; width=&#34;100;&#34; alt=&#34;kalwados&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;kalwados&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/kub3let&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/95883234?v=4&#34; width=&#34;100;&#34; alt=&#34;kub3let&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;kub3let&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/pfeifferch&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/73090220?v=4&#34; width=&#34;100;&#34; alt=&#34;pfeifferch&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;pfeifferch&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/rstephan&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/8532364?v=4&#34; width=&#34;100;&#34; alt=&#34;rstephan&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;rstephan&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/smartboart&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/38385805?v=4&#34; width=&#34;100;&#34; alt=&#34;smartboart&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;smartboart&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/wetneb&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/309908?v=4&#34; width=&#34;100;&#34; alt=&#34;wetneb&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Antonin Delpeuch&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/adarazs&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/6269603?v=4&#34; width=&#34;100;&#34; alt=&#34;adarazs&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Attila Darazs&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/austindrenski&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/21338699?v=4&#34; width=&#34;100;&#34; alt=&#34;austindrenski&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Austin Drenski&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/PLCHome&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/29116097?v=4&#34; width=&#34;100;&#34; alt=&#34;PLCHome&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;PLCHome&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/CFenner&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/9592452?v=4&#34; width=&#34;100;&#34; alt=&#34;CFenner&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Christopher Fenner&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/dkneisz&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/43378003?v=4&#34; width=&#34;100;&#34; alt=&#34;dkneisz&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Dave&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/FarukhS52&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/129654632?v=4&#34; width=&#34;100;&#34; alt=&#34;FarukhS52&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Farookh Zaheer Siddiqui&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/hex7c0&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/4419146?v=4&#34; width=&#34;100;&#34; alt=&#34;hex7c0&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Francesco Carnielli&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/040medien&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/115072?v=4&#34; width=&#34;100;&#34; alt=&#34;040medien&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Frederik Kemner&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/eltociear&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/22633385?v=4&#34; width=&#34;100;&#34; alt=&#34;eltociear&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Ikko Eltociear Ashimine&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/queeek&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/9533371?v=4&#34; width=&#34;100;&#34; alt=&#34;queeek&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Ina&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/joergrosenkranz&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/310438?v=4&#34; width=&#34;100;&#34; alt=&#34;joergrosenkranz&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Joerg Rosenkranz&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Innovatorcloudy&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/183274513?v=4&#34; width=&#34;100;&#34; alt=&#34;Innovatorcloudy&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;KrishCode&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/myxor&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/1397377?v=4&#34; width=&#34;100;&#34; alt=&#34;myxor&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Marco H&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/rainman110&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/3213107?v=4&#34; width=&#34;100;&#34; alt=&#34;rainman110&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Martin Siggel&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/mkelley88&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/5567324?v=4&#34; width=&#34;100;&#34; alt=&#34;mkelley88&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Matthew T. Kelley&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/toolsfactory&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/7744975?v=4&#34; width=&#34;100;&#34; alt=&#34;toolsfactory&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Michael Geissler&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/ppisljar&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/13629809?v=4&#34; width=&#34;100;&#34; alt=&#34;ppisljar&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Peter Pisljar&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA; &lt;tbody&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!-- readme: contributors -end --&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/main/#top&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Back to Top&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>