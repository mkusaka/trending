<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-01T02:29:59Z</updated>
  <subtitle>Monthly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dragonflydb/dragonfly</title>
    <updated>2022-07-01T02:29:59Z</updated>
    <id>tag:github.com,2022-07-01:/dragonflydb/dragonfly</id>
    <link href="https://github.com/dragonflydb/dragonfly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern replacement for Redis and Memcached&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://dragonflydb.io&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dragonflydb/dragonfly/main/.github/images/logo-full.svg?sanitize=true&#34; width=&#34;284&#34; border=&#34;0&#34; alt=&#34;Dragonfly&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dragonflydb/dragonfly/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/dragonflydb/dragonfly/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;ci-tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/romanger&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/romanger?style=social&#34; alt=&#34;Twitter URL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dragonflydb/dragonfly/tree/main/docs/quick-start&#34;&gt;Quick Start&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/HsPjXGVH85&#34;&gt;Discord Chat&lt;/a&gt; | &lt;a href=&#34;https://github.com/dragonflydb/dragonfly/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; | &lt;a href=&#34;https://github.com/dragonflydb/dragonfly/issues&#34;&gt;Github Issues&lt;/a&gt; | &lt;a href=&#34;https://github.com/dragonflydb/dragonfly/raw/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Probably, the fastest in-memory store in the universe!&lt;/h3&gt; &#xA;&lt;p&gt;Dragonfly is a modern in-memory datastore, fully compatible with Redis and Memcached APIs. Dragonfly implements novel algorithms and data structures on top of a multi-threaded, shared-nothing architecture. As a result, Dragonfly reaches x25 performance compared to Redis and supports millions of QPS on a single instance.&lt;/p&gt; &#xA;&lt;p&gt;Dragonfly&#39;s core properties make it a cost-effective, high-performing, and easy-to-use Redis replacement.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;img src=&#34;http://assets.dragonflydb.io/repo-assets/aws-throughput.svg?sanitize=true&#34; width=&#34;80%&#34; border=&#34;0&#34;&gt; &#xA;&lt;p&gt;Dragonfly is crossing 3.8M QPS on c6gn.16xlarge reaching x25 increase in throughput compared to Redis.&lt;/p&gt; &#xA;&lt;p&gt;99th latency percentile of Dragonfly at its peak throughput:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;op&lt;/th&gt; &#xA;   &lt;th&gt;r6g&lt;/th&gt; &#xA;   &lt;th&gt;c6gn&lt;/th&gt; &#xA;   &lt;th&gt;c7g&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;set&lt;/td&gt; &#xA;   &lt;td&gt;0.8ms&lt;/td&gt; &#xA;   &lt;td&gt;1ms&lt;/td&gt; &#xA;   &lt;td&gt;1ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;get&lt;/td&gt; &#xA;   &lt;td&gt;0.9ms&lt;/td&gt; &#xA;   &lt;td&gt;0.9ms&lt;/td&gt; &#xA;   &lt;td&gt;0.8ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;setex&lt;/td&gt; &#xA;   &lt;td&gt;0.9ms&lt;/td&gt; &#xA;   &lt;td&gt;1.1ms&lt;/td&gt; &#xA;   &lt;td&gt;1.3ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;All benchmarks were performed using &lt;code&gt;memtier_benchmark&lt;/code&gt; (see below) with number of threads tuned per server type and the instance type. &lt;code&gt;memtier&lt;/code&gt; was running on a separate c6gn.16xlarge machine. For setex benchmark we used expiry-range of 500, so it would survive the end of the test.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  memtier_benchmark --ratio ... -t &amp;lt;threads&amp;gt; -c 30 -n 200000 --distinct-client-seed -d 256 \&#xA;     --expiry-range=...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When running in pipeline mode &lt;code&gt;--pipeline=30&lt;/code&gt;, Dragonfly reaches &lt;strong&gt;10M qps&lt;/strong&gt; for SET and &lt;strong&gt;15M qps&lt;/strong&gt; for GET operations.&lt;/p&gt; &#xA;&lt;h3&gt;Memcached / Dragonfly&lt;/h3&gt; &#xA;&lt;p&gt;We compared memcached with Dragonfly on &lt;code&gt;c6gn.16xlarge&lt;/code&gt; instance on AWS. As you can see below Dragonfly dominates memcached for both write and read workloads in terms of throughput with a comparable latency. For write workloads, Dragonfly has also better latency, due to contention on the &lt;a href=&#34;https://raw.githubusercontent.com/dragonflydb/dragonfly/main/docs/memcached_benchmark.md&#34;&gt;write path in memcached&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;SET benchmark&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Server&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;QPS(thousands qps)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;latency 99%&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;99.9%&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dragonfly&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🟩 3844&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🟩 0.9ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🟩 2.4ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Memcached&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;806&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.6ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.2ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;GET benchmark&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Server&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;QPS(thousands qps)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;latency 99%&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;99.9%&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dragonfly&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🟩 3717&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.4ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Memcached&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2100&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🟩 0.34ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🟩 0.6ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Memcached exhibited lower latency for the read benchmark, but also lower throughput.&lt;/p&gt; &#xA;&lt;h3&gt;Memory efficiency&lt;/h3&gt; &#xA;&lt;p&gt;In the following test, we filled Dragonfly and Redis with ~5GB of data using &lt;code&gt;debug populate 5000000 key 1024&lt;/code&gt; command. Then we started sending the update traffic with &lt;code&gt;memtier&lt;/code&gt; and kicked off the snapshotting with the &#34;bgsave&#34; command. The following figure demonstrates clearly how both servers behave in terms of memory efficiency.&lt;/p&gt; &#xA;&lt;img src=&#34;http://assets.dragonflydb.io/repo-assets/bgsave-memusage.svg?sanitize=true&#34; width=&#34;70%&#34; border=&#34;0&#34;&gt; &#xA;&lt;p&gt;Dragonfly was 30% more memory efficient than Redis at the idle state. It also did not show any visible memory increase during the snapshot phase. Meanwhile, Redis reached almost x3 memory increase at peak compared to Dragonfly. Dragonfly also finished the snapshot much faster, just a few seconds after it started. For more info about memory efficiency in Dragonfly see &lt;a href=&#34;https://raw.githubusercontent.com/dragonflydb/dragonfly/main/docs/dashtable.md&#34;&gt;dashtable doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running the server&lt;/h2&gt; &#xA;&lt;p&gt;Dragonfly runs on linux. It uses relatively new linux specific &lt;a href=&#34;https://github.com/axboe/liburing&#34;&gt;io-uring API&lt;/a&gt; for I/O, hence it requires Linux version 5.10 or later. Debian/Bullseye, Ubuntu 20.04.4 or later fit these requirements.&lt;/p&gt; &#xA;&lt;h3&gt;With docker:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --network=host --ulimit memlock=-1 docker.dragonflydb.io/dragonflydb/dragonfly&#xA;&#xA;redis-cli PING  # redis-cli can be installed with &#34;apt install -y redis-tools&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;You need &lt;code&gt;--ulimit memlock=-1&lt;/code&gt; because some Linux distros configure the default memlock limit for containers as 64m and Dragonfly requires more.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Releases&lt;/h3&gt; &#xA;&lt;p&gt;We maintain &lt;a href=&#34;https://github.com/dragonflydb/dragonfly/releases&#34;&gt;binary releases&lt;/a&gt; for x86 and arm64 architectures. You will need to install &lt;code&gt;libunwind8&lt;/code&gt; lib to run the binaries.&lt;/p&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;You need to install dependencies in order to build on Ubuntu 20.04 or later:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/dragonflydb/dragonfly &amp;amp;&amp;amp; cd dragonfly&#xA;&#xA;# to install dependencies&#xA;sudo apt install ninja-build libunwind-dev libboost-fiber-dev libssl-dev \&#xA;     autoconf-archive libtool cmake g++&#xA;&#xA;# Configure the build&#xA;./helio/blaze.sh -release&#xA;&#xA;# Build&#xA;cd build-opt &amp;amp;&amp;amp; ninja dragonfly&#xA;&#xA;# Run&#xA;./dragonfly --alsologtostderr&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Dragonfly supports common redis arguments where applicable. For example, you can run: &lt;code&gt;dragonfly --requirepass=foo --bind localhost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Dragonfly currently supports the following Redis-specific arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;port&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;requirepass&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maxmemory&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dir&lt;/code&gt; - by default, dragonfly docker uses &lt;code&gt;/data&lt;/code&gt; folder for snapshotting. You can use &lt;code&gt;-v&lt;/code&gt; docker option to map it to your host folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dbfilename&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, it has Dragonfly specific arguments options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;memcache_port&lt;/code&gt; - to enable memcached compatible API on this port. Disabled by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keys_output_limit&lt;/code&gt; - maximum number of returned keys in &lt;code&gt;keys&lt;/code&gt; command. Default is 8192. &lt;code&gt;keys&lt;/code&gt; is a dangerous command. we truncate its result to avoid blowup in memory when fetching too many keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dbnum&lt;/code&gt; - maximum number of supported databases for &lt;code&gt;select&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cache_mode&lt;/code&gt; - see &lt;a href=&#34;https://raw.githubusercontent.com/dragonflydb/dragonfly/main/#novel-cache-design&#34;&gt;Cache&lt;/a&gt; section below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;for more options like logs management or tls support, run &lt;code&gt;dragonfly --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap and status&lt;/h2&gt; &#xA;&lt;p&gt;Currently Dragonfly supports ~130 Redis commands and all memcache commands besides &lt;code&gt;cas&lt;/code&gt;. We are almost on par with Redis 2.8 API. Our first milestone will be to stabilize basic functionality and reach API parity with Redis 2.8 and Memcached APIs. If you see that a command you need, is not implemented yet, please open an issue.&lt;/p&gt; &#xA;&lt;p&gt;The next milestone will be implementing H/A with &lt;code&gt;redis -&amp;gt; dragonfly&lt;/code&gt; and &lt;code&gt;dragonfly&amp;lt;-&amp;gt;dragonfly&lt;/code&gt; replication.&lt;/p&gt; &#xA;&lt;p&gt;For dragonfly-native replication, we are planning to design a distributed log format that will support order of magnitude higher speeds when replicating.&lt;/p&gt; &#xA;&lt;p&gt;After replication and failover feature we will continue with other Redis commands from APIs 3,4 and 5.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/dragonflydb/dragonfly/main/docs/api_status.md&#34;&gt;API readiness doc&lt;/a&gt; for the current status of Dragonfly.&lt;/p&gt; &#xA;&lt;h3&gt;Milestone - H/A&lt;/h3&gt; &#xA;&lt;p&gt;Implement leader/follower replication (PSYNC/REPLICAOF/...).&lt;/p&gt; &#xA;&lt;h3&gt;Milestone - &#34;Maturity&#34;&lt;/h3&gt; &#xA;&lt;p&gt;APIs 3,4,5 without cluster support, without modules and without memory introspection commands. Also without geo commands and without support for keyspace notifications, without streams. Probably design config support. Overall - few dozens commands... Probably implement cluster-API decorators to allow cluster-configured clients to connect to a single instance.&lt;/p&gt; &#xA;&lt;h3&gt;Next milestones will be determined along the way.&lt;/h3&gt; &#xA;&lt;h2&gt;Design decisions&lt;/h2&gt; &#xA;&lt;h3&gt;Novel cache design&lt;/h3&gt; &#xA;&lt;p&gt;Dragonfly has a single unified adaptive caching algorithm that is very simple and memory efficient. You can enable caching mode by passing &lt;code&gt;--cache_mode=true&lt;/code&gt; flag. Once this mode is on, Dragonfly will evict items least likely to be stumbled upon in the future but only when it is near maxmemory limit.&lt;/p&gt; &#xA;&lt;h3&gt;Expiration deadlines with relative accuracy&lt;/h3&gt; &#xA;&lt;p&gt;Expiration ranges are limited to ~4 years. Moreover, expiration deadlines with millisecond precision (PEXPIRE/PSETEX etc) will be rounded to closest second &lt;strong&gt;for deadlines greater than 134217727ms (approximately 37 hours)&lt;/strong&gt;. Such rounding has less than 0.001% error which I hope is acceptable for large ranges. If it breaks your use-cases - talk to me or open an issue and explain your case.&lt;/p&gt; &#xA;&lt;p&gt;For more detailed differences between this and Redis implementations &lt;a href=&#34;https://raw.githubusercontent.com/dragonflydb/dragonfly/main/docs/differences.md&#34;&gt;see here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Native Http console and Prometheus compatible metrics&lt;/h3&gt; &#xA;&lt;p&gt;By default Dragonfly allows http access via its main TCP port (6379). That&#39;s right, you can connect to Dragonfly via Redis protocol and via HTTP protocol - the server recognizes the protocol automatically during the connection initiation. Go ahead and try it with your browser. Right now it does not have much info but in the future we are planning to add there useful debugging and management info. If you go to &lt;code&gt;:6379/metrics&lt;/code&gt; url you will see some prometheus compatible metrics.&lt;/p&gt; &#xA;&lt;p&gt;The Prometheus exported metrics are compatible with the Grafana dashboard &lt;a href=&#34;https://raw.githubusercontent.com/dragonflydb/dragonfly/main/examples/grafana/dashboard.json&#34;&gt;see here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Important! Http console is meant to be accessed within a safe network. If you expose Dragonfly&#39;s TCP port externally, it is advised to disable the console with &lt;code&gt;--http_admin_console=false&lt;/code&gt; or &lt;code&gt;--nohttp_admin_console&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;Dragonfly started as an experiment to see how an in-memory datastore could look like if it was designed in 2022. Based on lessons learned from our experience as users of memory stores and as engineers who worked for cloud companies, we knew that we need to preserve two key properties for Dragonfly: a) to provide atomicity guarantees for all its operations, and b) to guarantee low, sub-millisecond latency over very high throughput.&lt;/p&gt; &#xA;&lt;p&gt;Our first challenge was how to fully utilize CPU, memory, and i/o resources using servers that are available today in public clouds. To solve this, we used &lt;a href=&#34;https://en.wikipedia.org/wiki/Shared-nothing_architecture&#34;&gt;shared-nothing architecture&lt;/a&gt;, which allows us to partition the keyspace of the memory store between threads, so that each thread would manage its own slice of dictionary data. We call these slices - shards. The library that powers thread and I/O management for shared-nothing architecture is open-sourced &lt;a href=&#34;https://github.com/romange/helio&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To provide atomicity guarantees for multi-key operations, we used the advancements from recent academic research. We chose the paper &lt;a href=&#34;https://www.cs.umd.edu/~abadi/papers/vldbj-vll.pdf&#34;&gt;&#34;VLL: a lock manager redesign for main memory database systems”&lt;/a&gt; to develop the transactional framework for Dragonfly. The choice of shared-nothing architecture and VLL allowed us to compose atomic multi-key operations without using mutexes or spinlocks. This was a major milestone for our PoC and its performance stood out from other commercial and open-source solutions.&lt;/p&gt; &#xA;&lt;p&gt;Our second challenge was to engineer more efficient data structures for the new store. To achieve this goal, we based our core hashtable structure on paper &lt;a href=&#34;https://arxiv.org/pdf/2003.07302.pdf&#34;&gt;&#34;Dash: Scalable Hashing on Persistent Memory&#34;&lt;/a&gt;. The paper itself is centered around persistent memory domain and is not directly related to main-memory stores. Nevertheless, its very much applicable for our problem. It suggested a hashtable design that allowed us to maintain two special properties that are present in the Redis dictionary: a) its incremental hashing ability during datastore growth b) its ability to traverse the dictionary under changes using a stateless scan operation. Besides these 2 properties, Dash is much more efficient in CPU and memory. By leveraging Dash&#39;s design, we were able to innovate further with the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Efficient record expiry for TTL records.&lt;/li&gt; &#xA; &lt;li&gt;A novel cache eviction algorithm that achieves higher hit rates than other caching strategies like LRU and LFU with &lt;strong&gt;zero memory overhead&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A novel &lt;strong&gt;fork-less&lt;/strong&gt; snapshotting algorithm.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After we built the foundation for Dragonfly and &lt;a href=&#34;https://raw.githubusercontent.com/dragonflydb/dragonfly/main/#benchmarks&#34;&gt;we were happy with its performance&lt;/a&gt;, we went on to implement the Redis and Memcached functionality. By now, we have implemented ~130 Redis commands (equivalent to v2.8) and 13 Memcached commands.&lt;/p&gt; &#xA;&lt;p&gt;And finally, &lt;br&gt; &lt;em&gt;Our mission is to build a well-designed, ultra-fast, cost-efficient in-memory datastore for cloud workloads that takes advantage of the latest hardware advancements. We intend to address the pain points of current solutions while preserving their product APIs and propositions. &lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hyprwm/Hyprland</title>
    <updated>2022-07-01T02:29:59Z</updated>
    <id>tag:github.com,2022-07-01:/hyprwm/Hyprland</id>
    <link href="https://github.com/hyprwm/Hyprland" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hyprland is a dynamic tiling Wayland compositor that doesn&#39;t sacrifice on its looks.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/vaxerski/Hyprland/main/assets/header.svg?sanitize=true&#34; width=&#34;1000&#34; height=&#34;500&#34; alt=&#34;banner&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/vaxerski/Hyprland/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;Badge Workflow&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/hyprwm/Hyprland/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/vaxerski/Hyprland&#34; alt=&#34;Badge License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/tokei/lines/github/vaxerski/Hyprland&#34; alt=&#34;Badge Lines&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/vaxerski/Hyprland&#34; alt=&#34;Badge Language&#34;&gt; &lt;a href=&#34;https://github.com/vaxerski/Hyprland/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/vaxerski/Hyprland&#34; alt=&#34;Badge Pull Requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vaxerski/Hyprland/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/vaxerski/Hyprland&#34; alt=&#34;Badge Issues&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Hi-mom!-ff69b4&#34; alt=&#34;Badge Hi Mom&#34;&gt;&lt;br&gt; &lt;a href=&#34;https://discord.gg/hQ9XvMUjjr&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Join%20the-Discord%20server-6666ff&#34; alt=&#34;Badge Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;Hyprland is a dynamic tiling Wayland compositor based on wlroots that doesn&#39;t sacrifice on its looks.&lt;/p&gt; &#xA; &lt;p&gt;For Hyprland without the &lt;code&gt;land&lt;/code&gt; part, see &lt;a href=&#34;https://github.com/vaxerski/Hypr&#34;&gt;Hypr&lt;/a&gt;, the Xorg window manager.&lt;/p&gt; &#xA; &lt;p&gt;Please note, especially for folks moving from Hypr, that Hyprland and Hypr share a very different feature set and are not 1:1 experiences. &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/vaxerski/Hyprland/wiki/Installation&#34;&gt;&lt;kbd&gt; &lt;br&gt; Install &lt;br&gt; &lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;  &lt;strong&gt;&lt;a href=&#34;https://github.com/vaxerski/Hyprland/wiki/Quick-start&#34;&gt;&lt;kbd&gt; &lt;br&gt; Quick Start &lt;br&gt; &lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;  &lt;strong&gt;&lt;a href=&#34;https://github.com/vaxerski/Hyprland/wiki/Configuring-Hyprland&#34;&gt;&lt;kbd&gt; &lt;br&gt; Configure &lt;br&gt; &lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;  &lt;strong&gt;&lt;a href=&#34;https://github.com/vaxerski/Hyprland/wiki/Contributing-&amp;amp;-Debugging&#34;&gt;&lt;kbd&gt; &lt;br&gt; Contribute &lt;br&gt; &lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Notice&lt;/h1&gt; &#xA;&lt;p&gt;Hyprland is still in pretty early development compared to some other Wayland compositors.&lt;/p&gt; &#xA;&lt;p&gt;Although Hyprland is pretty stable, it may have some bugs.&lt;/p&gt; &#xA;&lt;h3&gt;Help Wanted&lt;/h3&gt; &#xA;&lt;p&gt;Hyprland needs testers! &lt;br&gt; Try it out and report bugs / suggestions!&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easily expandable and readable codebase&lt;/li&gt; &#xA; &lt;li&gt;Config reloaded instantly upon saving&lt;/li&gt; &#xA; &lt;li&gt;Custom bezier curve based animations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wlr_ext&lt;/code&gt; workspaces protocol support&lt;/li&gt; &#xA; &lt;li&gt;Dual Kawase blur&lt;/li&gt; &#xA; &lt;li&gt;Drop shadows&lt;/li&gt; &#xA; &lt;li&gt;Fully dynamic workspaces&lt;/li&gt; &#xA; &lt;li&gt;Closely follows &lt;code&gt;wlroots-git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bundled wlroots&lt;/li&gt; &#xA; &lt;li&gt;Window/layer fade in/out&lt;/li&gt; &#xA; &lt;li&gt;Tiling/pseudotiling/floating/fullscreen windows&lt;/li&gt; &#xA; &lt;li&gt;Switching workspaces between window modes on the fly&lt;/li&gt; &#xA; &lt;li&gt;Special workspace (scratchpad)&lt;/li&gt; &#xA; &lt;li&gt;Window/monitor rules&lt;/li&gt; &#xA; &lt;li&gt;Socket-based IPC&lt;/li&gt; &#xA; &lt;li&gt;Event system for bash scripts&lt;/li&gt; &#xA; &lt;li&gt;Rounded corners&lt;/li&gt; &#xA; &lt;li&gt;Full damage tracking&lt;/li&gt; &#xA; &lt;li&gt;Docks support&lt;/li&gt; &#xA; &lt;li&gt;Drawing tablet support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Gallery&lt;/h1&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/NbrTnZH.png&#34; alt=&#34;Preview A&#34;&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ZA4Fa8R.png&#34; alt=&#34;Preview B&#34;&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BpXxM8H.png&#34; alt=&#34;Preview C&#34;&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;h1&gt;Stars Over Time&lt;/h1&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://starchart.cc/vaxerski/Hyprland&#34;&gt;&lt;img src=&#34;https://starchart.cc/vaxerski/Hyprland.svg?sanitize=true&#34; alt=&#34;Stars Preview&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Special Thanks&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gitlab.freedesktop.org/wlroots/wlroots&#34;&gt;wlroots&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For their amazing library&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gitlab.freedesktop.org/wlroots/wlroots/-/blob/master/tinywl/tinywl.c&#34;&gt;tinywl&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/swaywm/sway&#34;&gt;Sway&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff the overkill way&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/inclement/vivarium&#34;&gt;Vivarium&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff the simple way&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/djpohly/dwl&#34;&gt;dwl&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff the hacky way&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/WayfireWM/wayfire&#34;&gt;Wayfire&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do some graphics stuff&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!----&gt; &#xA;&lt;!--{ Thanks }---------------------------------&gt; &#xA;&lt;!--{ Images }---------------------------------&gt; &#xA;&lt;!--{ Badges }---------------------------------&gt;</summary>
  </entry>
  <entry>
    <title>facebook/folly</title>
    <updated>2022-07-01T02:29:59Z</updated>
    <id>tag:github.com,2022-07-01:/facebook/folly</id>
    <link href="https://github.com/facebook/folly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source C++ library developed and used at Facebook.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Folly: Facebook Open-source Library&lt;/h1&gt; &#xA;&lt;a href=&#34;https://opensource.facebook.com/support-ukraine&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&amp;amp;labelColor=005BBB&#34; alt=&#34;Support Ukraine - Help Provide Humanitarian Aid to Ukraine.&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;What is &lt;code&gt;folly&lt;/code&gt;?&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/folly/main/static/logo.svg?sanitize=true&#34; alt=&#34;Logo Folly&#34; width=&#34;15%&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;Folly (acronymed loosely after Facebook Open Source Library) is a library of C++14 components designed with practicality and efficiency in mind. &lt;strong&gt;Folly contains a variety of core library components used extensively at Facebook&lt;/strong&gt;. In particular, it&#39;s often a dependency of Facebook&#39;s other open source C++ efforts and place where those projects can share code.&lt;/p&gt; &#xA;&lt;p&gt;It complements (as opposed to competing against) offerings such as Boost and of course &lt;code&gt;std&lt;/code&gt;. In fact, we embark on defining our own component only when something we need is either not available, or does not meet the needed performance profile. We endeavor to remove things from folly if or when &lt;code&gt;std&lt;/code&gt; or Boost obsoletes them.&lt;/p&gt; &#xA;&lt;p&gt;Performance concerns permeate much of Folly, sometimes leading to designs that are more idiosyncratic than they would otherwise be (see e.g. &lt;code&gt;PackedSyncPtr.h&lt;/code&gt;, &lt;code&gt;SmallLocks.h&lt;/code&gt;). Good performance at large scale is a unifying theme in all of Folly.&lt;/p&gt; &#xA;&lt;h2&gt;Check it out in the intro video&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Wr_IfOICYSs&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/Wr_IfOICYSs/0.jpg&#34; alt=&#34;Explain Like I’m 5: Folly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Logical Design&lt;/h1&gt; &#xA;&lt;p&gt;Folly is a collection of relatively independent components, some as simple as a few symbols. There is no restriction on internal dependencies, meaning that a given folly module may use any other folly components.&lt;/p&gt; &#xA;&lt;p&gt;All symbols are defined in the top-level namespace &lt;code&gt;folly&lt;/code&gt;, except of course macros. Macro names are ALL_UPPERCASE and should be prefixed with &lt;code&gt;FOLLY_&lt;/code&gt;. Namespace &lt;code&gt;folly&lt;/code&gt; defines other internal namespaces such as &lt;code&gt;internal&lt;/code&gt; or &lt;code&gt;detail&lt;/code&gt;. User code should not depend on symbols in those namespaces.&lt;/p&gt; &#xA;&lt;p&gt;Folly has an &lt;code&gt;experimental&lt;/code&gt; directory as well. This designation connotes primarily that we feel the API may change heavily over time. This code, typically, is still in heavy use and is well tested.&lt;/p&gt; &#xA;&lt;h1&gt;Physical Design&lt;/h1&gt; &#xA;&lt;p&gt;At the top level Folly uses the classic &#34;stuttering&#34; scheme &lt;code&gt;folly/folly&lt;/code&gt; used by Boost and others. The first directory serves as an installation root of the library (with possible versioning a la &lt;code&gt;folly-1.0/&lt;/code&gt;), and the second is to distinguish the library when including files, e.g. &lt;code&gt;#include &amp;lt;folly/FBString.h&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The directory structure is flat (mimicking the namespace structure), i.e. we don&#39;t have an elaborate directory hierarchy (it is possible this will change in future versions). The subdirectory &lt;code&gt;experimental&lt;/code&gt; contains files that are used inside folly and possibly at Facebook but not considered stable enough for client use. Your code should not use files in &lt;code&gt;folly/experimental&lt;/code&gt; lest it may break when you update Folly.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;folly/folly/test&lt;/code&gt; subdirectory includes the unittests for all components, usually named &lt;code&gt;ComponentXyzTest.cpp&lt;/code&gt; for each &lt;code&gt;ComponentXyz.*&lt;/code&gt;. The &lt;code&gt;folly/folly/docs&lt;/code&gt; directory contains documentation.&lt;/p&gt; &#xA;&lt;h1&gt;What&#39;s in it?&lt;/h1&gt; &#xA;&lt;p&gt;Because of folly&#39;s fairly flat structure, the best way to see what&#39;s in it is to look at the headers in &lt;a href=&#34;https://github.com/facebook/folly/tree/main/folly&#34;&gt;top level &lt;code&gt;folly/&lt;/code&gt; directory&lt;/a&gt;. You can also check the &lt;a href=&#34;https://raw.githubusercontent.com/facebook/folly/main/folly/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt; folder&lt;/a&gt; for documentation, starting with the &lt;a href=&#34;https://raw.githubusercontent.com/facebook/folly/main/folly/docs/Overview.md&#34;&gt;overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Folly is published on GitHub at &lt;a href=&#34;https://github.com/facebook/folly&#34;&gt;https://github.com/facebook/folly&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Build Notes&lt;/h1&gt; &#xA;&lt;p&gt;Because folly does not provide any ABI compatibility guarantees from commit to commit, we generally recommend building folly as a static library.&lt;/p&gt; &#xA;&lt;p&gt;folly supports gcc (5.1+), clang, or MSVC. It should run on Linux (x86-32, x86-64, and ARM), iOS, macOS, and Windows (x86-64). The CMake build is only tested on some of these platforms; at a minimum, we aim to support macOS and Linux (on the latest Ubuntu LTS release or newer.)&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;getdeps.py&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This script is used by many of Meta&#39;s OSS tools. It will download and build all of the necessary dependencies first, and will then invoke cmake etc to build folly. This will help ensure that you build with relevant versions of all of the dependent libraries, taking into account what versions are installed locally on your system.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s written in python so you&#39;ll need python3.6 or later on your PATH. It works on Linux, macOS and Windows.&lt;/p&gt; &#xA;&lt;p&gt;The settings for folly&#39;s cmake build are held in its getdeps manifest &lt;code&gt;build/fbcode_builder/manifests/folly&lt;/code&gt;, which you can edit locally if desired.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;If on Linux or MacOS (with homebrew installed) you can install system dependencies to save building them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Clone the repo&#xA;git clone https://github.com/facebook/folly&#xA;# Install dependencies&#xA;cd folly&#xA;sudo ./build/fbcode_builder/getdeps.py install-system-deps --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to see the packages before installing them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build/fbcode_builder/getdeps.py install-system-deps --dry-run --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On other platforms or if on Linux and without system dependencies &lt;code&gt;getdeps.py&lt;/code&gt; will mostly download and build them for you during the build step.&lt;/p&gt; &#xA;&lt;p&gt;Some of the dependencies &lt;code&gt;getdeps.py&lt;/code&gt; uses and installs are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a version of boost compiled with C++14 support.&lt;/li&gt; &#xA; &lt;li&gt;googletest is required to build and run folly&#39;s tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;This script will download and build all of the necessary dependencies first, and will then invoke cmake etc to build folly. This will help ensure that you build with relevant versions of all of the dependent libraries, taking into account what versions are installed locally on your system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getdeps.py&lt;/code&gt; currently requires python 3.6+ to be on your path.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getdeps.py&lt;/code&gt; will invoke cmake etc&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Clone the repo&#xA;git clone https://github.com/facebook/folly&#xA;cd folly&#xA;# Build, using system dependencies if available&#xA;python3 ./build/fbcode_builder/getdeps.py --allow-system-packages build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It puts output in its scratch area:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;installed/folly/lib/libfolly.a&lt;/code&gt;: Library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also specify a &lt;code&gt;--scratch-path&lt;/code&gt; argument to control the location of the scratch directory used for the build. You can find the default scratch install location from logs or with &lt;code&gt;python3 ./build/fbcode_builder/getdeps.py show-inst-dir&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are also &lt;code&gt;--install-dir&lt;/code&gt; and &lt;code&gt;--install-prefix&lt;/code&gt; arguments to provide some more fine-grained control of the installation directories. However, given that folly provides no compatibility guarantees between commits we generally recommend building and installing the libraries to a temporary location, and then pointing your project&#39;s build at this temporary location, rather than installing folly in the traditional system installation directories. e.g., if you are building with CMake you can use the &lt;code&gt;CMAKE_PREFIX_PATH&lt;/code&gt; variable to allow CMake to find folly in this temporary installation directory when building your project.&lt;/p&gt; &#xA;&lt;p&gt;If you want to invoke &lt;code&gt;cmake&lt;/code&gt; again to iterate, there is a helpful &lt;code&gt;run_cmake.py&lt;/code&gt; script output in the scratch build directory. You can find the scratch build directory from logs or with &lt;code&gt;python3 ./build/fbcode_builder/getdeps.py show-build-dir&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Run tests&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;getdeps.py&lt;/code&gt; will build the tests for folly. To run them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd folly&#xA;python3 ./build/fbcode_builder/getdeps.py --allow-system-packages test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;build.sh&lt;/code&gt;/&lt;code&gt;build.bat&lt;/code&gt; wrapper&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;build.sh&lt;/code&gt; can be used on Linux and MacOS, on Windows use the &lt;code&gt;build.bat&lt;/code&gt; script instead. Its a wrapper around &lt;code&gt;getdeps.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build with cmake directly&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want to let getdeps invoke cmake for you then by default, building the tests is disabled as part of the CMake &lt;code&gt;all&lt;/code&gt; target. To build the tests, specify &lt;code&gt;-DBUILD_TESTS=ON&lt;/code&gt; to CMake at configure time.&lt;/p&gt; &#xA;&lt;p&gt;NB if you want to invoke &lt;code&gt;cmake&lt;/code&gt; again to iterate on a &lt;code&gt;getdeps.py&lt;/code&gt; build, there is a helpful &lt;code&gt;run_cmake.py&lt;/code&gt; script output in the scratch-path build directory. You can find the scratch build directory from logs or with &lt;code&gt;python3 ./build/fbcode_builder/getdeps.py show-build-dir&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Running tests with ctests also works if you cd to the build dir, e.g. &lt;code&gt; &lt;/code&gt;(cd $(python3 ./build/fbcode_builder/getdeps.py show-build-dir) &amp;amp;&amp;amp; ctest)`&lt;/p&gt; &#xA;&lt;h3&gt;Finding dependencies in non-default locations&lt;/h3&gt; &#xA;&lt;p&gt;If you have boost, gtest, or other dependencies installed in a non-default location, you can use the &lt;code&gt;CMAKE_INCLUDE_PATH&lt;/code&gt; and &lt;code&gt;CMAKE_LIBRARY_PATH&lt;/code&gt; variables to make CMAKE look also look for header files and libraries in non-standard locations. For example, to also search the directories &lt;code&gt;/alt/include/path1&lt;/code&gt; and &lt;code&gt;/alt/include/path2&lt;/code&gt; for header files and the directories &lt;code&gt;/alt/lib/path1&lt;/code&gt; and &lt;code&gt;/alt/lib/path2&lt;/code&gt; for libraries, you can invoke &lt;code&gt;cmake&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake \&#xA;  -DCMAKE_INCLUDE_PATH=/alt/include/path1:/alt/include/path2 \&#xA;  -DCMAKE_LIBRARY_PATH=/alt/lib/path1:/alt/lib/path2 ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ubuntu LTS, CentOS Stream, Fedora&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;getdeps.py&lt;/code&gt; approach above. We test in CI on Ubuntu LTS, and occasionally on other distros.&lt;/p&gt; &#xA;&lt;p&gt;If you find the set of system packages is not quite right for your chosen distro, you can specify distro version specific overrides in the dependency manifests (e.g. &lt;a href=&#34;https://github.com/facebook/folly/raw/main/build/fbcode_builder/manifests/boost&#34;&gt;https://github.com/facebook/folly/blob/main/build/fbcode_builder/manifests/boost&lt;/a&gt; ). You could probably make it work on most recent Ubuntu/Debian or Fedora/Redhat derived distributions.&lt;/p&gt; &#xA;&lt;p&gt;At time of writing (Dec 2021) there is a build break on GCC 11.x based systems in lang_badge_test. If you don&#39;t need badge functionality you can work around by commenting it out from CMakeLists.txt (unfortunately fbthrift does need it)&lt;/p&gt; &#xA;&lt;h2&gt;Windows (Vcpkg)&lt;/h2&gt; &#xA;&lt;p&gt;Note that many tests are disabled for folly Windows builds, you can see them in the log from the cmake configure step, or by looking for WINDOWS_DISABLED in &lt;code&gt;CMakeLists.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;That said, &lt;code&gt;getdeps.py&lt;/code&gt; builds work on Windows and are tested in CI.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer, you can try Vcpkg. folly is available in &lt;a href=&#34;https://github.com/Microsoft/vcpkg#vcpkg&#34;&gt;Vcpkg&lt;/a&gt; and releases may be built via &lt;code&gt;vcpkg install folly:x64-windows&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also use &lt;code&gt;vcpkg install folly:x64-windows --head&lt;/code&gt; to build against &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;macOS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;getdeps.py&lt;/code&gt; builds work on macOS and are tested in CI, however if you prefer, you can try one of the macOS package managers&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;folly is available as a Formula and releases may be built via &lt;code&gt;brew install folly&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also use &lt;code&gt;folly/build/bootstrap-osx-homebrew.sh&lt;/code&gt; to build against &lt;code&gt;main&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ./folly/build/bootstrap-osx-homebrew.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a build directory &lt;code&gt;_build&lt;/code&gt; in the top-level.&lt;/p&gt; &#xA;&lt;h3&gt;MacPorts&lt;/h3&gt; &#xA;&lt;p&gt;Install the required packages from MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  sudo port install \&#xA;    boost \&#xA;    cmake \&#xA;    gflags \&#xA;    git \&#xA;    google-glog \&#xA;    libevent \&#xA;    libtool \&#xA;    lz4 \&#xA;    lzma \&#xA;    openssl \&#xA;    snappy \&#xA;    xz \&#xA;    zlib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download and install double-conversion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  git clone https://github.com/google/double-conversion.git&#xA;  cd double-conversion&#xA;  cmake -DBUILD_SHARED_LIBS=ON .&#xA;  make&#xA;  sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download and install folly with the parameters listed below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  git clone https://github.com/facebook/folly.git&#xA;  cd folly&#xA;  mkdir _build&#xA;  cd _build&#xA;  cmake ..&#xA;  make&#xA;  sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>