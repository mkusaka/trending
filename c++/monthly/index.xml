<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-01T01:52:10Z</updated>
  <subtitle>Monthly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shader-slang/slang</title>
    <updated>2024-12-01T01:52:10Z</updated>
    <id>tag:github.com,2024-12-01:/shader-slang/slang</id>
    <link href="https://github.com/shader-slang/slang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Making it easier to work with shaders&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Slang&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/shader-slang/slang/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;CI Status&#34;&gt; &lt;img src=&#34;https://github.com/shader-slang/slang/actions/workflows/vk-gl-cts-nightly.yml/badge.svg?sanitize=true&#34; alt=&#34;CTS Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Slang is a shading language that makes it easier to build and maintain large shader codebases in a modular and extensible fashion, while also maintaining the highest possible performance on modern GPUs and graphics APIs. Slang is based on years of collaboration between researchers at NVIDIA, Carnegie Mellon University, Stanford, MIT, UCSD and the University of Washington.&lt;/p&gt; &#xA;&lt;h2&gt;Why Slang?&lt;/h2&gt; &#xA;&lt;p&gt;The Slang shading language is designed to enable real-time graphics developers to work with large-scale, high-performance shader code.&lt;/p&gt; &#xA;&lt;h3&gt;Write Shaders Once, Run Anywhere&lt;/h3&gt; &#xA;&lt;p&gt;The Slang compiler can generate code for a wide variety of targets: D3D12, Vulkan, Metal, D3D11, OpenGL, CUDA, and even generate code to run on a CPU. For textual targets, such as Metal Shading Language (MSL) and CUDA, Slang produces readable code that preserves original identifier names, as well as the type and call structure, making it easier to debug.&lt;/p&gt; &#xA;&lt;h3&gt;Access the Latest GPU Features&lt;/h3&gt; &#xA;&lt;p&gt;Slang code is highly portable, but can still leverage unique platform capabilities, including the latest features in Direct3D and Vulkan. For example, developers can make full use of &lt;a href=&#34;https://shader-slang.com/slang/user-guide/convenience-features.html#pointers-limited&#34;&gt;pointers&lt;/a&gt; when generating SPIR-V. Slang&#39;s &lt;a href=&#34;https://shader-slang.com/slang/user-guide/capabilities.html&#34;&gt;capability system&lt;/a&gt; helps applications manage feature set differences across target platforms by ensuring code only uses available features during the type-checking step, before generating final code. Additionally, Slang provides &lt;a href=&#34;https://shader-slang.com/slang/user-guide/a1-04-interop.html&#34;&gt;flexible interop&lt;/a&gt; features to enable directly embedding target code or SPIR-V into generated shaders.&lt;/p&gt; &#xA;&lt;h3&gt;Leverage Neural Graphics with Automatic Differentiation&lt;/h3&gt; &#xA;&lt;p&gt;Slang can &lt;a href=&#34;https://shader-slang.com/slang/user-guide/autodiff.html&#34;&gt;automatically generate both forward and backward derivative propagation code&lt;/a&gt; for complex functions that involve arbitrary control flow and dynamic dispatch. This allows existing rendering codebases to easily become differentiable, or for Slang to serve as the kernel language in a PyTorch-driven machine learning framework via &lt;a href=&#34;https://shader-slang.com/slang/user-guide/a1-02-slangpy.html&#34;&gt;&lt;code&gt;slangtorch&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Scalable Software Development with Modules&lt;/h3&gt; &#xA;&lt;p&gt;Slang provides a &lt;a href=&#34;https://shader-slang.com/slang/user-guide/modules.html&#34;&gt;module system&lt;/a&gt; that enables logical organization of code for separate compilation. Slang modules can be independently compiled offline to a custom IR (with optional obfuscation) and then linked at runtime to generate code in formats such as DXIL or SPIR-V.&lt;/p&gt; &#xA;&lt;h3&gt;Code Specialization that Works with Modules&lt;/h3&gt; &#xA;&lt;p&gt;Slang supports &lt;a href=&#34;https://shader-slang.com/slang/user-guide/interfaces-generics.html&#34;&gt;generics and interfaces&lt;/a&gt; (a.k.a. type traits/protocols), allowing for clear expression of shader specialization without the need for preprocessor techniques or string-pasting. Unlike C++ templates, Slang&#39;s generics are pre-checked and don&#39;t produce cascading error messages that are difficult to diagnose. The same generic shader can be specialized for a variety of different types to produce specialized code ahead of time, or on the fly, entirely under application control.&lt;/p&gt; &#xA;&lt;h3&gt;Easy On-ramp for HLSL and GLSL Codebases&lt;/h3&gt; &#xA;&lt;p&gt;Slang&#39;s syntax is similar to HLSL, and most existing HLSL code can be compiled with the Slang compiler out-of-the-box, or with just minor modifications. This allows existing shader codebases to immediately benefit from Slang without requiring a complete rewrite or port.&lt;/p&gt; &#xA;&lt;p&gt;Slang provides a compatibility module that enables the use of most GLSL intrinsic functions and GLSL&#39;s parameter binding syntax.&lt;/p&gt; &#xA;&lt;h3&gt;Comprehensive Tooling Support&lt;/h3&gt; &#xA;&lt;p&gt;Slang comes with full support of IntelliSense editing features in Visual Studio Code and Visual Studio through the Language Server Protocol. Full debugging capabilities are also available through RenderDoc and SPIR-V based tools.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The fastest way to get started using Slang in your own development is to use a pre-built binary package, available through GitHub &lt;a href=&#34;https://github.com/shader-slang/slang/releases&#34;&gt;releases&lt;/a&gt;. Slang binaries are also included in the &lt;a href=&#34;https://vulkan.lunarg.com/sdk/home&#34;&gt;Vulkan SDK&lt;/a&gt; since version 1.3.296.0.&lt;/p&gt; &#xA;&lt;p&gt;There are packages built for 32- and 64-bit Windows, as well as 64-bit Ubuntu. Each binary release includes the command-line &lt;code&gt;slangc&lt;/code&gt; compiler, a shared library for the compiler, and the &lt;code&gt;slang.h&lt;/code&gt; header.&lt;/p&gt; &#xA;&lt;p&gt;See the user-guide for info on using the &lt;code&gt;slangc&lt;/code&gt; command-line tool: &lt;a href=&#34;https://shader-slang.com/slang/user-guide/compiling.html#command-line-compilation-with-slangc&#34;&gt;Slang Command Line Usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to try out the Slang language without installing anything, a fast and simple way is to use the &lt;a href=&#34;https://shader-slang.com/slang-playground&#34;&gt;Slang Playground&lt;/a&gt;. The playground allows you to compile Slang code to a variety of targets, and even run some simple shaders directly within the browser. The playground loads Slang compiler to your browser and runs all compilation locally. No data will be sent to any servers.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to build Slang from source, please consult the &lt;a href=&#34;https://raw.githubusercontent.com/shader-slang/slang/master/docs/building.md&#34;&gt;build instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The Slang project provides a variety of different &lt;a href=&#34;https://raw.githubusercontent.com/shader-slang/slang/master/docs/&#34;&gt;documentation&lt;/a&gt;, but most users would be well served starting with the &lt;a href=&#34;https://shader-slang.github.io/slang/user-guide/&#34;&gt;User&#39;s Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For developers writing Slang code, the &lt;a href=&#34;https://shader-slang.com/stdlib-reference/&#34;&gt;Slang Core Module Reference&lt;/a&gt; provides detailed documentation on Slang&#39;s built-in types and functions.&lt;/p&gt; &#xA;&lt;p&gt;We also provide a few &lt;a href=&#34;https://raw.githubusercontent.com/shader-slang/slang/master/examples/&#34;&gt;examples&lt;/a&gt; of how to integrate Slang into a rendering application.&lt;/p&gt; &#xA;&lt;p&gt;These examples use a graphics layer that we include with Slang called &#34;GFX&#34; which is an abstraction library of various graphics APIs (D3D11, D2D12, OpenGL, Vulkan, CUDA, and the CPU) to support cross-platform applications using GPU graphics and compute capabilities. If you&#39;d like to learn more about GFX, see the &lt;a href=&#34;https://shader-slang.com/slang/gfx-user-guide/index.html&#34;&gt;GFX User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, we recommend checking out &lt;a href=&#34;https://github.com/nvpro-samples/vk_mini_samples/&#34;&gt;Vulkan Mini Examples&lt;/a&gt; for more examples of using Slang&#39;s language features available on Vulkan, such as pointers and the ray tracing intrinsics.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to the project, we are excited to have your input. The following guidelines should be observed by contributors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please follow the contributor &lt;a href=&#34;https://raw.githubusercontent.com/shader-slang/slang/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Bugs reports and feature requests should go through the GitHub issue tracker&lt;/li&gt; &#xA; &lt;li&gt;Changes should ideally come in as small pull requests on top of &lt;code&gt;master&lt;/code&gt;, coming from your own personal fork of the project&lt;/li&gt; &#xA; &lt;li&gt;Large features that will involve multiple contributors or a long development time should be discussed in issues, and broken down into smaller pieces that can be implemented and checked in in stages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shader-slang/slang/master/CONTRIBUTING.md&#34;&gt;Contribution guide&lt;/a&gt; describes the workflow for contributors at more detail.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations and Support&lt;/h2&gt; &#xA;&lt;h3&gt;Platform support&lt;/h3&gt; &#xA;&lt;p&gt;The Slang compiler and libraries can be built on the following platforms:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;WebAssembly&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;supported&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;supported&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;supported&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;experimental&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Both &lt;code&gt;x86_64&lt;/code&gt; and &lt;code&gt;aarch64&lt;/code&gt; architectures are supported on Windows, Linux and MacOS platforms.&lt;/p&gt; &#xA;&lt;h3&gt;Target support&lt;/h3&gt; &#xA;&lt;p&gt;Slang can compile shader code to the following targets:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Output Formats&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Direct3D 11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://shader-slang.com/slang/user-guide/targets.html#direct3d-11&#34;&gt;supported&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;HLSL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Direct3D 12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://shader-slang.com/slang/user-guide/targets.html#direct3d-12&#34;&gt;supported&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;HLSL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Vulkan&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://shader-slang.com/slang/user-guide/targets.html#vulkan&#34;&gt;supported&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SPIRV, GLSL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Metal&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://shader-slang.com/slang/user-guide/targets.html#metal&#34;&gt;experimental*&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Metal Shading Language&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;WebGPU&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;experimental**&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;WGSL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CUDA&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://shader-slang.com/slang/user-guide/targets.html#cuda-and-optix&#34;&gt;supported&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C++ (compute only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Optix&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://shader-slang.com/slang/user-guide/targets.html#cuda-and-optix&#34;&gt;experimental&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C++ (WIP)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CPU&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://shader-slang.com/slang/user-guide/targets.html#cpu-compute&#34;&gt;experimental&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C++ (kernel), C++ (host), standalone executable, dynamic library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;*Slang currently supports generating vertex, fragment, compute, task and mesh shaders for Metal.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;**WGSL support is still work in-progress.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For greater detail, see the &lt;a href=&#34;https://shader-slang.com/slang/user-guide/targets.html&#34;&gt;Supported Compilation Targets&lt;/a&gt; section of the &lt;a href=&#34;https://shader-slang.github.io/slang/user-guide/&#34;&gt;User Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Slang project has been used for production applications and large shader codebases, but it is still under active development. Support is currently focused on the platforms (Windows, Linux) and target APIs (Direct3D 12, Vulkan) where Slang is used most heavily. Users who are looking for support on other platforms or APIs should coordinate with the development team via the issue tracker to make sure that their use cases can be supported.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Slang code itself is under the Apache 2.0 with LLVM Exception license (see &lt;a href=&#34;https://raw.githubusercontent.com/shader-slang/slang/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Builds of the core Slang tools depend on the following projects, either automatically or optionally, which may have their own licenses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glslang&#34;&gt;&lt;code&gt;glslang&lt;/code&gt;&lt;/a&gt; (BSD)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lz4/lz4&#34;&gt;&lt;code&gt;lz4&lt;/code&gt;&lt;/a&gt; (BSD)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/richgel999/miniz&#34;&gt;&lt;code&gt;miniz&lt;/code&gt;&lt;/a&gt; (MIT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KhronosGroup/SPIRV-Headers&#34;&gt;&lt;code&gt;spirv-headers&lt;/code&gt;&lt;/a&gt; (Modified MIT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KhronosGroup/SPIRV-Tools&#34;&gt;&lt;code&gt;spirv-tools&lt;/code&gt;&lt;/a&gt; (Apache 2.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/martinus/unordered_dense&#34;&gt;&lt;code&gt;ankerl::unordered_dense::{map, set}&lt;/code&gt;&lt;/a&gt; (MIT)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Slang releases may include &lt;a href=&#34;https://github.com/shader-slang/slang-llvm&#34;&gt;slang-llvm&lt;/a&gt; which includes &lt;a href=&#34;https://github.com/llvm/llvm-project&#34;&gt;LLVM&lt;/a&gt; under the license:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://llvm.org/docs/DeveloperPolicy.html#new-llvm-project-license-framework&#34;&gt;&lt;code&gt;llvm&lt;/code&gt;&lt;/a&gt; (Apache 2.0 License with LLVM exceptions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some of the tests and example programs that build with Slang use the following projects, which may have their own licenses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/g-truc/glm&#34;&gt;&lt;code&gt;glm&lt;/code&gt;&lt;/a&gt; (MIT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stb_image&lt;/code&gt; and &lt;code&gt;stb_image_write&lt;/code&gt; from the &lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;&lt;code&gt;stb&lt;/code&gt;&lt;/a&gt; collection of single-file libraries (Public Domain)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tinyobjloader/tinyobjloader&#34;&gt;&lt;code&gt;tinyobjloader&lt;/code&gt;&lt;/a&gt; (MIT)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>bitcoin/bitcoin</title>
    <updated>2024-12-01T01:52:10Z</updated>
    <id>tag:github.com,2024-12-01:/bitcoin/bitcoin</id>
    <link href="https://github.com/bitcoin/bitcoin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bitcoin Core integration/staging tree&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bitcoin Core integration/staging tree&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bitcoincore.org&#34;&gt;https://bitcoincore.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For an immediately usable, binary version of the Bitcoin Core software, see &lt;a href=&#34;https://bitcoincore.org/en/download/&#34;&gt;https://bitcoincore.org/en/download/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is Bitcoin Core?&lt;/h2&gt; &#xA;&lt;p&gt;Bitcoin Core connects to the Bitcoin peer-to-peer network to download and fully validate blocks and transactions. It also includes a wallet and graphical user interface, which can be optionally built.&lt;/p&gt; &#xA;&lt;p&gt;Further information about Bitcoin Core is available in the &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin/bitcoin/master/doc&#34;&gt;doc folder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Bitcoin Core is released under the terms of the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin/bitcoin/master/COPYING&#34;&gt;COPYING&lt;/a&gt; for more information or see &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development Process&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch is regularly built (see &lt;code&gt;doc/build-*.md&lt;/code&gt; for instructions) and tested, but it is not guaranteed to be completely stable. &lt;a href=&#34;https://github.com/bitcoin/bitcoin/tags&#34;&gt;Tags&lt;/a&gt; are created regularly from release branches to indicate new official, stable release versions of Bitcoin Core.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/bitcoin-core/gui&#34;&gt;https://github.com/bitcoin-core/gui&lt;/a&gt; repository is used exclusively for the development of the GUI. Its master branch is identical in all monotree repositories. Release branches and tags do not exist, so please do not fork that repository unless it is for development reasons.&lt;/p&gt; &#xA;&lt;p&gt;The contribution workflow is described in &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin/bitcoin/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; and useful hints for developers can be found in &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin/bitcoin/master/doc/developer-notes.md&#34;&gt;doc/developer-notes.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Testing and code review is the bottleneck for development; we get more pull requests than we can review and test on short notice. Please be patient and help out by testing other people&#39;s pull requests, and remember this is a security-critical project where any mistake might cost people lots of money.&lt;/p&gt; &#xA;&lt;h3&gt;Automated Testing&lt;/h3&gt; &#xA;&lt;p&gt;Developers are strongly encouraged to write &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin/bitcoin/master/src/test/README.md&#34;&gt;unit tests&lt;/a&gt; for new code, and to submit new unit tests for old code. Unit tests can be compiled and run (assuming they weren&#39;t disabled during the generation of the build system) with: &lt;code&gt;ctest&lt;/code&gt;. Further details on running and extending unit tests can be found in &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin/bitcoin/master/src/test/README.md&#34;&gt;/src/test/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are also &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin/bitcoin/master/test&#34;&gt;regression and integration tests&lt;/a&gt;, written in Python. These tests can be run (if the &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin/bitcoin/master/test&#34;&gt;test dependencies&lt;/a&gt; are installed) with: &lt;code&gt;build/test/functional/test_runner.py&lt;/code&gt; (assuming &lt;code&gt;build&lt;/code&gt; is your build directory).&lt;/p&gt; &#xA;&lt;p&gt;The CI (Continuous Integration) systems make sure that every pull request is built for Windows, Linux, and macOS, and that unit/sanity tests are run automatically.&lt;/p&gt; &#xA;&lt;h3&gt;Manual Quality Assurance (QA) Testing&lt;/h3&gt; &#xA;&lt;p&gt;Changes should be tested by somebody other than the developer who wrote the code. This is especially important for large or high-risk changes. It is useful to add a test plan to the pull request description if testing the changes is not straightforward.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;Changes to translations as well as new translations can be submitted to &lt;a href=&#34;https://www.transifex.com/bitcoin/bitcoin/&#34;&gt;Bitcoin Core&#39;s Transifex page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Translations are periodically pulled from Transifex and merged into the git repository. See the &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin/bitcoin/master/doc/translation_process.md&#34;&gt;translation process&lt;/a&gt; for details on how this works.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: We do not accept translation changes as GitHub pull requests because the next pull from Transifex would automatically overwrite them again.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>carla-simulator/carla</title>
    <updated>2024-12-01T01:52:10Z</updated>
    <id>tag:github.com,2024-12-01:/carla-simulator/carla</id>
    <link href="https://github.com/carla-simulator/carla" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source simulator for autonomous driving research.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CARLA Simulator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://carla.readthedocs.io&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/carla/badge/?version=latest&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://carla.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/carla-simulator/carla/ue4-dev/Docs/img/btn/web.png&#34; alt=&#34;carla.org&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/carla-simulator/carla/raw/master/Docs/download.md&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/carla-simulator/carla/ue4-dev/Docs/img/btn/download.png&#34; alt=&#34;download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://carla.readthedocs.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/carla-simulator/carla/ue4-dev/Docs/img/btn/docs.png&#34; alt=&#34;documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/carla-simulator/carla/discussions&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/carla-simulator/carla/ue4-dev/Docs/img/btn/forum.png&#34; alt=&#34;forum&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/8kqACuC&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/carla-simulator/carla/ue4-dev/Docs/img/btn/chat.png&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gurubase.io/g/carla-simulator&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gurubase-Ask%20CARLA%20Simulator%20Guru-006BFF&#34; alt=&#34;Gurubase&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CARLA is an open-source simulator for autonomous driving research. CARLA has been developed from the ground up to support development, training, and validation of autonomous driving systems. In addition to open-source code and protocols, CARLA provides open digital assets (urban layouts, buildings, vehicles) that were created for this purpose and can be used freely. The simulation platform supports flexible specification of sensor suites and environmental conditions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=q4V9GYjA1pE&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/carla-simulator/carla/ue4-dev/Docs/img/0_9_15_thumbnail.webp&#34; alt=&#34;CARLA Video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] This is the development branch &lt;code&gt;ue4-dev&lt;/code&gt; for the &lt;strong&gt;Unreal Engine 4.26 version of CARLA&lt;/strong&gt;. This branch exists in parallel with the Unreal Engine 5.3 version of CARLA, in the &lt;code&gt;ue5-dev&lt;/code&gt; branch. Please be sure that this version of CARLA is suitable for your needs as there are significant differences between the UE 4.26 and UE 5.3 versions of CARLA.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Download CARLA&lt;/h3&gt; &#xA;&lt;p&gt;Linux:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tiny.carla.org/carla-latest-linux&#34;&gt;&lt;strong&gt;Get CARLA overnight build&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tiny.carla.org/additional-maps-latest-linux&#34;&gt;&lt;strong&gt;Get AdditionalMaps overnight build&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Windows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tiny.carla.org/carla-latest-windows&#34;&gt;&lt;strong&gt;Get CARLA overnight build&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tiny.carla.org/additional-maps-latest-windows&#34;&gt;&lt;strong&gt;Get AdditionalMaps overnight build&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] The CARLA package downloads are now provided using the BackBlaze CDN. The Amazon Web Service download links have been discontinued. Please ensure you update any relevant information in repositories using the CARLA simulator package versions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Recommended system&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intel i7 gen 9th - 11th / Intel i9 gen 9th - 11th / AMD ryzen 7 / AMD ryzen 9&lt;/li&gt; &#xA; &lt;li&gt;+32 GB RAM memory&lt;/li&gt; &#xA; &lt;li&gt;NVIDIA RTX 3070 / NVIDIA RTX 3080 / NVIDIA RTX 4090&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 20.04&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://carla.readthedocs.io/en/latest/&#34;&gt;CARLA documentation&lt;/a&gt; is hosted on ReadTheDocs. Please see the following key links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://carla.readthedocs.io/en/latest/build_linux/&#34;&gt;Building on Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://carla.readthedocs.io/en/latest/build_windows/&#34;&gt;Building on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://carla.readthedocs.io/en/latest/tuto_first_steps/&#34;&gt;First steps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://carla.readthedocs.io/en/latest/catalogue/&#34;&gt;CARLA asset catalogue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://carla.readthedocs.io/en/latest/python_api/&#34;&gt;Python API reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://carla.readthedocs.io/en/latest/bp_library/&#34;&gt;Blueprint library&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CARLA Ecosystem&lt;/h2&gt; &#xA;&lt;p&gt;Repositories associated with the CARLA simulation platform:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leaderboard.carla.org/&#34;&gt;&lt;strong&gt;CARLA Autonomous Driving leaderboard&lt;/strong&gt;&lt;/a&gt;: Automatic platform to validate Autonomous Driving stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carla-simulator/scenario_runner&#34;&gt;&lt;strong&gt;Scenario_Runner&lt;/strong&gt;&lt;/a&gt;: Engine to execute traffic scenarios in CARLA 0.9.X&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carla-simulator/ros-bridge&#34;&gt;&lt;strong&gt;ROS-bridge&lt;/strong&gt;&lt;/a&gt;: Interface to connect CARLA 0.9.X to ROS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carla-simulator/driving-benchmarks&#34;&gt;&lt;strong&gt;Driving-benchmarks&lt;/strong&gt;&lt;/a&gt;: Benchmark tools for Autonomous Driving tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/felipecode/coiltraine&#34;&gt;&lt;strong&gt;Conditional Imitation-Learning&lt;/strong&gt;&lt;/a&gt;: Training and testing Conditional Imitation Learning models in CARLA&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carla-simulator/carla-autoware&#34;&gt;&lt;strong&gt;AutoWare AV stack&lt;/strong&gt;&lt;/a&gt;: Bridge to connect AutoWare AV stack to CARLA&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carla-simulator/reinforcement-learning&#34;&gt;&lt;strong&gt;Reinforcement-Learning&lt;/strong&gt;&lt;/a&gt;: Code for running Conditional Reinforcement Learning models in CARLA&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mathworks.com/products/roadrunner.html&#34;&gt;&lt;strong&gt;RoadRunner&lt;/strong&gt;&lt;/a&gt;: MATLAB GUI based application to create road networks in the ASAM OpenDRIVE format&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carla-simulator/carla-map-editor&#34;&gt;&lt;strong&gt;Map Editor&lt;/strong&gt;&lt;/a&gt;: Standalone GUI application to enhance RoadRunner maps with traffic lights and traffic signs information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Like what you see? Star us on GitHub to support the project!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Paper&lt;/h2&gt; &#xA;&lt;p&gt;If you use CARLA, please cite our CoRL’17 paper.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;CARLA: An Open Urban Driving Simulator&lt;/em&gt;&lt;br&gt;Alexey Dosovitskiy, German Ros, Felipe Codevilla, Antonio Lopez, Vladlen Koltun; PMLR 78:1-16 [&lt;a href=&#34;http://proceedings.mlr.press/v78/dosovitskiy17a/dosovitskiy17a.pdf&#34;&gt;PDF&lt;/a&gt;] [&lt;a href=&#34;https://www.youtube.com/watch?v=xfyK03MEZ9Q&amp;amp;feature=youtu.be&amp;amp;t=2h44m30s&#34;&gt;talk&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{Dosovitskiy17,&#xA;  title = {{CARLA}: {An} Open Urban Driving Simulator},&#xA;  author = {Alexey Dosovitskiy and German Ros and Felipe Codevilla and Antonio Lopez and Vladlen Koltun},&#xA;  booktitle = {Proceedings of the 1st Annual Conference on Robot Learning},&#xA;  pages = {1--16},&#xA;  year = {2017}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building CARLA&lt;/h2&gt; &#xA;&lt;p&gt;Clone this repository locally from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/carla-simulator/carla.git .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, clone the &lt;a href=&#34;https://github.com/CarlaUnreal/UnrealEngine&#34;&gt;CARLA fork of the Unreal Engine&lt;/a&gt; into an appropriate location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth 1 -b carla https://github.com/CarlaUnreal/UnrealEngine.git .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have cloned the repositories, follow the instructions for &lt;a href=&#34;https://carla.readthedocs.io/en/latest/build_linux/&#34;&gt;building in Linux&lt;/a&gt; or &lt;a href=&#34;https://carla.readthedocs.io/en/latest/build_windows/&#34;&gt;building in Windows&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please take a look at our &lt;a href=&#34;https://carla.readthedocs.io/en/latest/cont_contribution_guidelines/&#34;&gt;Contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;F.A.Q.&lt;/h2&gt; &#xA;&lt;p&gt;If you run into problems, check our &lt;a href=&#34;https://carla.readthedocs.io/en/latest/build_faq/&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;h4&gt;CARLA licenses&lt;/h4&gt; &#xA;&lt;p&gt;CARLA specific code is distributed under MIT License.&lt;/p&gt; &#xA;&lt;p&gt;CARLA specific assets are distributed under CC-BY License.&lt;/p&gt; &#xA;&lt;h4&gt;CARLA Dependency and Integration licenses&lt;/h4&gt; &#xA;&lt;p&gt;The ad-rss-lib library compiled and linked by the &lt;a href=&#34;https://raw.githubusercontent.com/carla-simulator/carla/ue4-dev/Docs/adv_rss.md&#34;&gt;RSS Integration build variant&lt;/a&gt; introduces &lt;a href=&#34;https://opensource.org/licenses/LGPL-2.1&#34;&gt;LGPL-2.1-only License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unreal Engine 4 follows its &lt;a href=&#34;https://www.unrealengine.com/en-US/faq&#34;&gt;own license terms&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;CARLA uses three dependencies as part of the SUMO integration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://proj.org/&#34;&gt;PROJ&lt;/a&gt;, a generic coordinate transformation software which uses the &lt;a href=&#34;https://proj.org/about.html#license&#34;&gt;X/MIT open source license&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org&#34;&gt;SQLite&lt;/a&gt;, part of the PROJ dependencies, which is &lt;a href=&#34;https://www.sqlite.org/purchase/license&#34;&gt;in the public domain&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xerces.apache.org/xerces-c/&#34;&gt;Xerces-C&lt;/a&gt;, a validating XML parser, which is made available under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;Apache Software License, Version 2.0&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CARLA uses one dependency as part of the Chrono integration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eigen.tuxfamily.org/index.php?title=Main_Page&#34;&gt;Eigen&lt;/a&gt;, a C++ template library for linear algebra which uses the &lt;a href=&#34;https://www.mozilla.org/en-US/MPL/2.0/&#34;&gt;MPL2 license&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CARLA uses the Autodesk FBX SDK for converting FBX to OBJ in the import process of maps. This step is optional, and the SDK is located &lt;a href=&#34;https://www.autodesk.com/developer-network/platform-technologies/fbx-sdk-2020-0&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This software contains Autodesk® FBX® code developed by Autodesk, Inc. Copyright 2020 Autodesk, Inc. All rights, reserved. Such code is provided &#34;as is&#34; and Autodesk, Inc. disclaims any and all warranties, whether express or implied, including without limitation the implied warranties of merchantability, fitness for a particular purpose or non-infringement of third party rights. In no event shall Autodesk, Inc. be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of such code.&#34;&lt;/p&gt;</summary>
  </entry>
</feed>