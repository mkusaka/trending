<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-01T01:46:58Z</updated>
  <subtitle>Monthly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RobotLocomotion/drake</title>
    <updated>2024-10-01T01:46:58Z</updated>
    <id>tag:github.com,2024-10-01:/RobotLocomotion/drake</id>
    <link href="https://github.com/RobotLocomotion/drake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Model-based design and verification for robotics.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Drake&lt;/h1&gt; &#xA;&lt;p&gt;Model-Based Design and Verification for Robotics.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://drake.mit.edu&#34;&gt;Drake Documentation&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openvinotoolkit/openvino</title>
    <updated>2024-10-01T01:46:58Z</updated>
    <id>tag:github.com,2024-10-01:/openvinotoolkit/openvino</id>
    <link href="https://github.com/openvinotoolkit/openvino" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenVINO™ is an open-source toolkit for optimizing and deploying AI inference&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/docs/dev/assets/openvino-logo-purple-black.svg?sanitize=true&#34; width=&#34;400px&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/openvino&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/openvino.svg?sanitize=true&#34; alt=&#34;PyPI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://anaconda.org/conda-forge/openvino&#34;&gt;&lt;img src=&#34;https://anaconda.org/conda-forge/openvino/badges/version.svg?sanitize=true&#34; alt=&#34;Anaconda Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://formulae.brew.sh/formula/openvino&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/openvino&#34; alt=&#34;brew Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pepy.tech/project/openvino&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/openvino&#34; alt=&#34;PyPI Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://anaconda.org/conda-forge/openvino/files&#34;&gt;&lt;img src=&#34;https://anaconda.org/conda-forge/libopenvino/badges/downloads.svg?sanitize=true&#34; alt=&#34;Anaconda Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://formulae.brew.sh/formula/openvino&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/installs/dy/openvino&#34; alt=&#34;brew Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Welcome to OpenVINO™, an open-source software toolkit for optimizing and deploying deep learning models.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Inference Optimization&lt;/strong&gt;: Boost deep learning performance in computer vision, automatic speech recognition, generative AI, natural language processing with large and small language models, and many other common tasks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible Model Support&lt;/strong&gt;: Use models trained with popular frameworks such as TensorFlow, PyTorch, ONNX, Keras, and PaddlePaddle. Convert and deploy models without original frameworks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Broad Platform Compatibility&lt;/strong&gt;: Reduce resource demands and efficiently deploy on a range of platforms from edge to cloud. OpenVINO™ supports inference on CPU (x86, ARM), GPU (OpenCL capable, integrated and discrete) and AI accelerators (Intel NPU).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Community and Ecosystem&lt;/strong&gt;: Join an active community contributing to the enhancement of deep learning performance across various domains.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://docs.openvino.ai/2024/_static/download/OpenVINO_Quick_Start_Guide.pdf&#34;&gt;OpenVINO Cheat Sheet&lt;/a&gt; for a quick reference.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.openvino.ai/2024/get-started/install-openvino.html&#34;&gt;Get your preferred distribution of OpenVINO&lt;/a&gt; or use this command for quick installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install -U openvino&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://docs.openvino.ai/2024/about-openvino/system-requirements.html&#34;&gt;system requirements&lt;/a&gt; and &lt;a href=&#34;https://docs.openvino.ai/2024/about-openvino/compatibility-and-support/supported-devices.html&#34;&gt;supported devices&lt;/a&gt; for detailed information.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials and Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.openvino.ai/2024/get-started.html&#34;&gt;OpenVINO Quickstart example&lt;/a&gt; will walk you through the basics of deploying your first model.&lt;/p&gt; &#xA;&lt;p&gt;Learn how to optimize and deploy popular models with the &lt;a href=&#34;https://github.com/openvinotoolkit/openvino_notebooks&#34;&gt;OpenVINO Notebooks&lt;/a&gt;📚:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openvinotoolkit/openvino_notebooks/raw/latest/notebooks/llm-chatbot/llm-chatbot.ipynb&#34;&gt;Create an LLM-powered Chatbot using OpenVINO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openvinotoolkit/openvino_notebooks/raw/latest/notebooks/quantizing-model-with-accuracy-control/yolov8-quantization-with-accuracy-control.ipynb&#34;&gt;YOLOv8 Optimization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openvinotoolkit/openvino_notebooks/raw/latest/notebooks/controlnet-stable-diffusion/controlnet-stable-diffusion.ipynb&#34;&gt;Text-to-Image Generation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are easy-to-follow code examples demonstrating how to run PyTorch and TensorFlow model inference using OpenVINO:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PyTorch Model&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import openvino as ov&#xA;import torch&#xA;import torchvision&#xA;&#xA;# load PyTorch model into memory&#xA;model = torch.hub.load(&#34;pytorch/vision&#34;, &#34;shufflenet_v2_x1_0&#34;, weights=&#34;DEFAULT&#34;)&#xA;&#xA;# convert the model into OpenVINO model&#xA;example = torch.randn(1, 3, 224, 224)&#xA;ov_model = ov.convert_model(model, example_input=(example,))&#xA;&#xA;# compile the model for CPU device&#xA;core = ov.Core()&#xA;compiled_model = core.compile_model(ov_model, &#39;CPU&#39;)&#xA;&#xA;# infer the model on random data&#xA;output = compiled_model({0: example.numpy()})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;TensorFlow Model&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np&#xA;import openvino as ov&#xA;import tensorflow as tf&#xA;&#xA;# load TensorFlow model into memory&#xA;model = tf.keras.applications.MobileNetV2(weights=&#39;imagenet&#39;)&#xA;&#xA;# convert the model into OpenVINO model&#xA;ov_model = ov.convert_model(model)&#xA;&#xA;# compile the model for CPU device&#xA;core = ov.Core()&#xA;compiled_model = core.compile_model(ov_model, &#39;CPU&#39;)&#xA;&#xA;# infer the model on random data&#xA;data = np.random.rand(1, 224, 224, 3)&#xA;output = compiled_model({0: data})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OpenVINO also supports CPU, GPU, and NPU devices and works with models in TensorFlow, PyTorch, ONNX, TensorFlow Lite, PaddlePaddle model formats. With OpenVINO you can do automatic performance enhancements at runtime customized to your hardware (preserving model accuracy), including: asynchronous execution, batch processing, tensor fusion, load balancing, dynamic inference parallelism, automatic BF16 conversion, and more.&lt;/p&gt; &#xA;&lt;h2&gt;OpenVINO Ecosystem&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/optimum-intel&#34;&gt;🤗Optimum Intel&lt;/a&gt; - a simple interface to optimize Transformers and Diffusers models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openvinotoolkit/nncf&#34;&gt;Neural Network Compression Framework (NNCF)&lt;/a&gt; - advanced model optimization techniques including quantization, filter pruning, binarization, and sparsity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openvinotoolkit/openvino.genai&#34;&gt;GenAI Repository&lt;/a&gt; and &lt;a href=&#34;https://github.com/openvinotoolkit/openvino_tokenizers&#34;&gt;OpenVINO Tokenizers&lt;/a&gt; - resources and tools for developing and optimizing Generative AI applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openvinotoolkit/model_server&#34;&gt;OpenVINO™ Model Server (OVMS)&lt;/a&gt; - a scalable, high-performance solution for serving models optimized for Intel architectures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://geti.intel.com/&#34;&gt;Intel® Geti™&lt;/a&gt; - an interactive video and image annotation tool for computer vision use cases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/openvinotoolkit/awesome-openvino&#34;&gt;Awesome OpenVINO&lt;/a&gt; repository to discover a collection of community-made AI projects based on OpenVINO!&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.openvino.ai/&#34;&gt;User documentation&lt;/a&gt; contains detailed information about OpenVINO and guides you from installation through optimizing and deploying models for your AI applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/docs/dev/index.md&#34;&gt;Developer documentation&lt;/a&gt; focuses on how OpenVINO &lt;a href=&#34;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/docs/dev/index.md#openvino-components&#34;&gt;components&lt;/a&gt; work and describes &lt;a href=&#34;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/docs/dev/build.md&#34;&gt;building&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; processes.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution and Support&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; for more details. Read the &lt;a href=&#34;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/CONTRIBUTING.md#3-start-working-on-your-good-first-issue&#34;&gt;Good First Issues section&lt;/a&gt;, if you&#39;re looking for a place to start contributing. We welcome contributions of all kinds!&lt;/p&gt; &#xA;&lt;p&gt;You can ask questions and get support on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openvinotoolkit/openvino/issues&#34;&gt;GitHub Issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;OpenVINO channels on the &lt;a href=&#34;https://discord.gg/7pVRxUwdWG&#34;&gt;Intel DevHub Discord server&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://stackoverflow.com/questions/tagged/openvino&#34;&gt;&lt;code&gt;openvino&lt;/code&gt;&lt;/a&gt; tag on Stack Overflow*.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://software.intel.com/content/www/us/en/develop/tools/openvino-toolkit.html&#34;&gt;Product Page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.openvino.ai/2024/about-openvino/release-notes-openvino.html&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.openvino.ai/&#34;&gt;OpenVINO Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@openvino&#34;&gt;OpenVINO™ toolkit on Medium&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Telemetry&lt;/h2&gt; &#xA;&lt;p&gt;OpenVINO™ collects software performance and usage data for the purpose of improving OpenVINO™ tools. This data is collected directly by OpenVINO™ or through the use of Google Analytics 4. You can opt-out at any time by running the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;opt_in_out --opt_out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More Information is available at &lt;a href=&#34;https://docs.openvino.ai/2024/about-openvino/additional-resources/telemetry.html&#34;&gt;OpenVINO™ Telemetry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OpenVINO™ Toolkit is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/LICENSE&#34;&gt;Apache License Version 2.0&lt;/a&gt;. By contributing to the project, you agree to the license and copyright terms therein and release your contribution under these terms.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;* Other names and brands may be claimed as the property of others.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aristocratos/btop</title>
    <updated>2024-10-01T01:46:58Z</updated>
    <id>tag:github.com,2024-10-01:/aristocratos/btop</id>
    <link href="https://github.com/aristocratos/btop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A monitor of resources&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/Img/logo.png&#34; alt=&#34;btop++&#34;&gt;&lt;/h1&gt; &#xA;&lt;a href=&#34;https://repology.org/project/btop/versions&#34;&gt; &lt;img src=&#34;https://repology.org/badge/vertical-allrepos/btop.svg?sanitize=true&#34; alt=&#34;Packaging status&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/-Linux-grey?logo=linux&#34; alt=&#34;Linux&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-OSX-black?logo=apple&#34; alt=&#34;macOS&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-FreeBSD-red?logo=freebsd&#34; alt=&#34;FreeBSD&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-NetBSD-black?logo=netbsd&#34; alt=&#34;NetBSD&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-OpenBSD-black?logo=openbsd&#34; alt=&#34;OpenBSD&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Usage-System%20resource%20monitor-yellow&#34; alt=&#34;Usage&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/cpp-c%2B%2B20-green&#34; alt=&#34;c++20&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/aristocratos/btop?label=release&#34; alt=&#34;latest_release&#34;&gt; &lt;a href=&#34;https://paypal.me/aristocratos&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Donate-yellow?logo=paypal&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/aristocratos&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Sponsor-red?logo=github&#34; alt=&#34;Sponsor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ko-fi.com/aristocratos&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Buy%20me%20a%20Coffee-grey?logo=Ko-fi&#34; alt=&#34;Coffee&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snapcraft.io/btop&#34;&gt;&lt;img src=&#34;https://snapcraft.io/btop/badge.svg?sanitize=true&#34; alt=&#34;btop&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Continuous Build Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-macos.yml&#34;&gt;&lt;img src=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-macos.yml/badge.svg?sanitize=true&#34; alt=&#34;Continuous Build macOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-freebsd.yml&#34;&gt;&lt;img src=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-freebsd.yml/badge.svg?sanitize=true&#34; alt=&#34;Continuous Build FreeBSD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-netbsd.yml&#34;&gt;&lt;img src=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-netbsd.yml/badge.svg?sanitize=true&#34; alt=&#34;Continuous Build NetBSD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-openbsd.yml&#34;&gt;&lt;img src=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-openbsd.yml/badge.svg?sanitize=true&#34; alt=&#34;Continuous Build OpenBSD&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Index&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#news&#34;&gt;News&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#documents&#34;&gt;Documents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#themes&#34;&gt;Themes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#support-and-funding&#34;&gt;Support and funding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; (Read this if you are having issues!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#help-menu&#34;&gt;Keybindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#installation&#34;&gt;Installation Linux/macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#compilation-linux&#34;&gt;Compilation Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#compilation-macos-osx&#34;&gt;Compilation macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#compilation-freebsd&#34;&gt;Compilation FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#compilation-netbsd&#34;&gt;Compilation NetBSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#compilation-openbsd&#34;&gt;Compilation OpenBSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#gpu-compatibility&#34;&gt;GPU compatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#installing-the-snap&#34;&gt;Installing the snap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#configurability&#34;&gt;Configurability&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;h5&gt;22 September 2024&lt;/h5&gt; &#xA;&lt;p&gt;Btop release v1.4.0&lt;/p&gt; &#xA;&lt;p&gt;Intel GPU support added, note that only GPU utilization, power usage and clock speed available to monitor. Thanks to &lt;a href=&#34;https://github.com/bjia56&#34;&gt;@bjia56&lt;/a&gt; for contributions.&lt;/p&gt; &#xA;&lt;p&gt;NetBSD support added. Thanks to &lt;a href=&#34;https://github.com/fraggerfox&#34;&gt;@fraggerfox&lt;/a&gt; for contributions.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; and latest &lt;a href=&#34;https://github.com/aristocratos/btop/releases/latest&#34;&gt;release&lt;/a&gt; for detailed list of new features, bug fixes and new themes.&lt;/p&gt; &#xA;&lt;h5&gt;7 January 2024&lt;/h5&gt; &#xA;&lt;p&gt;Btop release v1.3.0&lt;/p&gt; &#xA;&lt;p&gt;Big release with GPU support added for Linux and platform support for OpenBSD. Big thanks to &lt;a href=&#34;https://github.com/romner-set&#34;&gt;@romner-set&lt;/a&gt; (GPU support) and &lt;a href=&#34;https://github.com/joske&#34;&gt;@joske&lt;/a&gt; (OpenBSD support) for contributions. And a multitude of bugfixes and small changes, see &lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; and latest &lt;a href=&#34;https://github.com/aristocratos/btop/releases/latest&#34;&gt;release&lt;/a&gt; for detailed list and attributions.&lt;/p&gt; &#xA;&lt;p&gt;See news entry below for more information regarding GPU support.&lt;/p&gt; &#xA;&lt;h5&gt;25 November 2023&lt;/h5&gt; &#xA;&lt;p&gt;GPU monitoring added for Linux!&lt;/p&gt; &#xA;&lt;p&gt;Compile from git main to try it out.&lt;/p&gt; &#xA;&lt;p&gt;Use keys &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;6&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; to show/hide the gpu monitoring boxes. &lt;code&gt;5&lt;/code&gt; = Gpu 1, &lt;code&gt;6&lt;/code&gt; = Gpu 2, etc.&lt;/p&gt; &#xA;&lt;p&gt;Gpu stats/graphs can also be displayed in the &#34;Cpu box&#34; (not as verbose), see the cpu options menu for info and configuration.&lt;/p&gt; &#xA;&lt;p&gt;Note that the binaries provided on the release page (when released) and the continuous builds will not have gpu support enabled.&lt;/p&gt; &#xA;&lt;p&gt;Because the GPU support relies on loading of dynamic gpu libraries, gpu support will not work when also static linking.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#compilation-linux&#34;&gt;Compilation Linux&lt;/a&gt; for more info on how to compile with gpu monitoring support.&lt;/p&gt; &#xA;&lt;p&gt;Many thanks to &lt;a href=&#34;https://github.com/romner-set&#34;&gt;@romner-set&lt;/a&gt; who wrote the vast majority of the implementation for GPU support.&lt;/p&gt; &#xA;&lt;p&gt;Big update with version bump to 1.3 coming soon.&lt;/p&gt; &#xA;&lt;h5&gt;28 August 2022&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aristocratos/btop4win&#34;&gt;&lt;img src=&#34;https://github.com/aristocratos/btop4win/raw/master/Img/logo.png&#34; alt=&#34;btop4win&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;First release of btop4win available at &lt;a href=&#34;https://github.com/aristocratos/btop4win&#34;&gt;https://github.com/aristocratos/btop4win&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;More...&lt;/summary&gt; &#xA; &lt;h5&gt;16 January 2022&lt;/h5&gt; &#xA; &lt;p&gt;Release v1.2.0 with FreeBSD support. No release binaries for FreeBSD provided as of yet.&lt;/p&gt; &#xA; &lt;p&gt;Again a big thanks to &lt;a href=&#34;https://github.com/joske&#34;&gt;@joske&lt;/a&gt; for his porting efforts!&lt;/p&gt; &#xA; &lt;p&gt;Since compatibility with Linux, macOS and FreeBSD are done, the focus going forward will be on new features like GPU monitoring.&lt;/p&gt; &#xA; &lt;h5&gt;13 November 2021&lt;/h5&gt; &#xA; &lt;p&gt;Release v1.1.0 with macOS support. Binaries in &lt;a href=&#34;https://github.com/aristocratos/btop/actions/workflows/continuous-build-macos.yml&#34;&gt;continuous-build-macos&lt;/a&gt; are only x86 for now. macOS binaries + installer are included for both x86 and ARM64 (Apple Silicon) in the releases.&lt;/p&gt; &#xA; &lt;p&gt;Big thank you to &lt;a href=&#34;https://github.com/joske&#34;&gt;@joske&lt;/a&gt; who wrote the vast majority of the implementation!&lt;/p&gt; &#xA; &lt;h5&gt;30 October 2021&lt;/h5&gt; &#xA; &lt;p&gt;Work on the OSX [macOS] and FreeBSD branches, both initiated and mostly worked on by &lt;a href=&#34;https://github.com/joske&#34;&gt;@joske&lt;/a&gt;, will likely be completed in the coming weeks. The OSX [macOS] branch has some memory leaks that needs to be sorted out and both have some issues with the processes cpu usage calculation and other smaller issues that needs fixing.&lt;/p&gt; &#xA; &lt;p&gt;If you want to help out, test for bugs/fix bugs or just try out the branches:&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;macOS / OSX&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install and use Homebrew or MacPorts package managers for easy dependency installation&#xA;brew install coreutils make gcc@11 lowdown&#xA;git clone https://github.com/aristocratos/btop.git&#xA;cd btop&#xA;git checkout OSX&#xA;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;FreeBSD&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pkg install gmake gcc11 coreutils git lowdown&#xA;git clone https://github.com/aristocratos/btop.git&#xA;cd btop&#xA;git checkout freebsd&#xA;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Note that GNU make (&lt;code&gt;gmake&lt;/code&gt;) is recommended but not required for macOS/OSX but it is required on FreeBSD.&lt;/p&gt; &#xA; &lt;h5&gt;6 October 2021&lt;/h5&gt; &#xA; &lt;p&gt;macOS development have been started by &lt;a href=&#34;https://github.com/joske&#34;&gt;@joske&lt;/a&gt;, big thanks :) See branch &lt;a href=&#34;https://github.com/aristocratos/btop/tree/OSX&#34;&gt;OSX&lt;/a&gt; for current progress.&lt;/p&gt; &#xA; &lt;h5&gt;18 September 2021&lt;/h5&gt; &#xA; &lt;p&gt;The Linux version of btop++ is complete. Released as version 1.0.0&lt;/p&gt; &#xA; &lt;p&gt;I will be providing statically compiled binaries for a range of architectures in every release for those having problems compiling.&lt;/p&gt; &#xA; &lt;p&gt;For compilation GCC 10 is required, GCC 11 preferred.&lt;/p&gt; &#xA; &lt;p&gt;Please report any bugs to the &lt;a href=&#34;https://github.com/aristocratos/btop/issues/new?assignees=aristocratos&amp;amp;labels=bug&amp;amp;template=bug_report.md&amp;amp;title=%5BBUG%5D&#34;&gt;Issues&lt;/a&gt; page.&lt;/p&gt; &#xA; &lt;p&gt;The development plan right now:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;1.1.0 macOS [OSX] support&lt;/li&gt; &#xA;  &lt;li&gt;1.2.0 FreeBSD support&lt;/li&gt; &#xA;  &lt;li&gt;1.3.0 Support for GPU monitoring&lt;/li&gt; &#xA;  &lt;li&gt;1.X.0 Other platforms and features...&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Windows support is not in the plans as of now, but if anyone else wants to take it on, I will try to help.&lt;/p&gt; &#xA; &lt;h5&gt;5 May 2021&lt;/h5&gt; &#xA; &lt;p&gt;This project is gonna take some time until it has complete feature parity with bpytop, since all system information gathering will have to be written from scratch without any external libraries. And will need some help in the form of code contributions to get complete support for BSD and macOS/OSX.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Documents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT.md&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Resource monitor that shows usage and stats for processor, memory, disks, network and processes.&lt;/p&gt; &#xA;&lt;p&gt;C++ version and continuation of &lt;a href=&#34;https://github.com/aristocratos/bashtop&#34;&gt;bashtop&lt;/a&gt; and &lt;a href=&#34;https://github.com/aristocratos/bpytop&#34;&gt;bpytop&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to use, with a game inspired menu system.&lt;/li&gt; &#xA; &lt;li&gt;Full mouse support, all buttons with a highlighted key is clickable and mouse scroll works in process list and menu boxes.&lt;/li&gt; &#xA; &lt;li&gt;Fast and responsive UI with UP, DOWN keys process selection.&lt;/li&gt; &#xA; &lt;li&gt;Function for showing detailed stats for selected process.&lt;/li&gt; &#xA; &lt;li&gt;Ability to filter processes.&lt;/li&gt; &#xA; &lt;li&gt;Easy switching between sorting options.&lt;/li&gt; &#xA; &lt;li&gt;Tree view of processes.&lt;/li&gt; &#xA; &lt;li&gt;Send any signal to selected process.&lt;/li&gt; &#xA; &lt;li&gt;UI menu for changing all config file options.&lt;/li&gt; &#xA; &lt;li&gt;Auto scaling graph for network usage.&lt;/li&gt; &#xA; &lt;li&gt;Shows IO activity and speeds for disks.&lt;/li&gt; &#xA; &lt;li&gt;Battery meter&lt;/li&gt; &#xA; &lt;li&gt;Selectable symbols for the graphs.&lt;/li&gt; &#xA; &lt;li&gt;Custom presets&lt;/li&gt; &#xA; &lt;li&gt;And more...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Themes&lt;/h2&gt; &#xA;&lt;p&gt;Btop++ uses the same theme files as bpytop and bashtop (some color values missing in bashtop themes) .&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/aristocratos/btop/tree/main/themes&#34;&gt;themes&lt;/a&gt; folder for available themes.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;make install&lt;/code&gt; command places the default themes in &lt;code&gt;[$PREFIX or /usr/local]/share/btop/themes&lt;/code&gt;. User created themes should be placed in &lt;code&gt;$XDG_CONFIG_HOME/btop/themes&lt;/code&gt; or &lt;code&gt;$HOME/.config/btop/themes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let me know if you want to contribute with new themes.&lt;/p&gt; &#xA;&lt;h2&gt;Support and funding&lt;/h2&gt; &#xA;&lt;p&gt;You can sponsor this project through github, see &lt;a href=&#34;https://github.com/sponsors/aristocratos&#34;&gt;my sponsors page&lt;/a&gt; for options.&lt;/p&gt; &#xA;&lt;p&gt;Or donate through &lt;a href=&#34;https://paypal.me/aristocratos&#34;&gt;paypal&lt;/a&gt; or &lt;a href=&#34;https://ko-fi.com/aristocratos&#34;&gt;ko-fi&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any support is greatly appreciated!&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;For best experience, a terminal with support for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;24-bit truecolor (&lt;a href=&#34;https://github.com//termstandard/colors&#34;&gt;See list of terminals with truecolor support&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;256-color terminals are supported through 24-bit to 256-color conversion when setting &#34;truecolor&#34; to False in the options or with &#34;-lc/--low-color&#34; arguments.&lt;/li&gt; &#xA; &lt;li&gt;16 color TTY mode will be activated if a real tty device is detected. Can be forced with &#34;-t/--tty_on&#34; arguments.&lt;/li&gt; &#xA; &lt;li&gt;Wide characters (Are sometimes problematic in web-based terminals)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also needs a UTF8 locale and a font that covers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unicode Block “Braille Patterns” U+2800 - U+28FF (Not needed in TTY mode or with graphs set to type: block or tty.)&lt;/li&gt; &#xA; &lt;li&gt;Unicode Block “Geometric Shapes” U+25A0 - U+25FF&lt;/li&gt; &#xA; &lt;li&gt;Unicode Block &#34;Box Drawing&#34; and &#34;Block Elements&#34; U+2500 - U+259F&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Optional Dependencies (Needed for GPU monitoring) (Only Linux)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;GPU monitoring also requires a btop binary built with GPU support (&lt;code&gt;GPU_SUPPORT=true&lt;/code&gt; flag).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/#gpu-compatibility&#34;&gt;GPU compatibility&lt;/a&gt; section for more about compiling with GPU support.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NVIDIA&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have an NVIDIA GPU you must use an official NVIDIA driver, both the closed-source and open-source ones have been verified to work.&lt;/p&gt; &#xA;&lt;p&gt;In addition to that you must also have the nvidia-ml dynamic library installed, which should be included with the driver package of your distribution.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have an AMD GPU &lt;code&gt;rocm_smi_lib&lt;/code&gt; is required, which may or may not be packaged for your distribution.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;INTEL&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Requires a working C compiler if compiling from source - tested with GCC12 and Clang16.&lt;/p&gt; &#xA;&lt;p&gt;Also requires the user to have permission to read from SYSFS.&lt;/p&gt; &#xA;&lt;p&gt;Can be set with &lt;code&gt;make setcap&lt;/code&gt; (preferred) or &lt;code&gt;make setuid&lt;/code&gt; or by running btop with &lt;code&gt;sudo&lt;/code&gt; or equivalent.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Notice (Text rendering issues)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are having problems with the characters in the graphs not looking like they do in the screenshots, it&#39;s likely a problem with your systems configured fallback font not having support for braille characters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/Terminus/terminus-ttf-4.40.1&#34;&gt;Terminess Powerline&lt;/a&gt; for an example of a font that includes the braille symbols.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See comments by @sgleizes &lt;a href=&#34;https://github.com/aristocratos/bpytop/issues/100#issuecomment-684036827&#34;&gt;link&lt;/a&gt; and @XenHat &lt;a href=&#34;https://github.com/aristocratos/bpytop/issues/100#issuecomment-691585587&#34;&gt;link&lt;/a&gt; in issue #100 for possible solutions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If text are misaligned and you are using Konsole or Yakuake, turning off &#34;Bi-Directional text rendering&#34; is a possible fix.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Characters clipping in to each other or text/border misalignments is not bugs caused by btop, but most likely a fontconfig or terminal problem where the braille characters making up the graphs aren&#39;t rendered correctly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Look to the creators of the terminal emulator you use to fix these issues if the previous mentioned fixes don&#39;t work for you.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h4&gt;Main UI showing details for a selected process&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/Img/normal.png&#34; alt=&#34;Screenshot 1&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Main UI in TTY mode&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/Img/tty.png&#34; alt=&#34;Screenshot 2&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Main UI with custom options&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/Img/alt.png&#34; alt=&#34;Screenshot 3&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Main-menu&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/Img/main-menu.png&#34; alt=&#34;Screenshot 3&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Options-menu&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/Img/options-menu.png&#34; alt=&#34;Screenshot 4&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Help-menu&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/Img/help-menu.png&#34; alt=&#34;Screenshot 5&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Binaries for Linux are statically compiled with musl and works on kernel 2.6.39 and newer&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Download btop-(VERSION)-(ARCH)-(PLATFORM).tbz from &lt;a href=&#34;https://github.com/aristocratos/btop/releases/latest&#34;&gt;latest release&lt;/a&gt; and unpack to a new folder&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Notice! Use x86_64 for 64-bit x86 systems, i486 and i686 are 32-bit!&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install (from created folder)&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Run:&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# use &#34;make install PREFIX=/target/dir&#34; to set target, default: /usr/local&#xA;# only use &#34;sudo&#34; when installing to a NON user owned directory&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;(Optional/Required for Intel GPU) Set extended capabilities or suid bit to btop&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Enables signal sending to any process without starting with &lt;code&gt;sudo&lt;/code&gt; and can prevent /proc read permissions problems on some systems.&lt;/p&gt; &lt;p&gt;Is required for Intel GPU support.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Run:&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run after make install and use same PREFIX if any was used at install&#xA;sudo make setcap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run after make install and use same PREFIX if any was used at install&#xA;# set SU_USER and SU_GROUP to select user and group, default is root:root&#xA;sudo make setuid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Run:&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Show help&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Binary release (from native os repo)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;openSUSE&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Tumbleweed:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo zypper in btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;For all other versions, see &lt;a href=&#34;https://software.opensuse.org/package/btop&#34;&gt;openSUSE Software: btop&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fedora&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RHEL/AlmaLinux 8+&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install epel-release&#xA;sudo dnf install btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FreeBSD&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; pkg install btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NetBSD&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; pkg_add btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Binary release on Homebrew (macOS (x86_64 &amp;amp; ARM64) / Linux (x86_64))&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://formulae.brew.sh/formula/btop&#34;&gt;Homebrew&lt;/a&gt;&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compilation Linux&lt;/h2&gt; &#xA;&lt;p&gt;Requires at least GCC 10 or Clang 16.&lt;/p&gt; &#xA;&lt;p&gt;The makefile also needs GNU coreutils and &lt;code&gt;sed&lt;/code&gt; (should already be installed on any modern distribution).&lt;/p&gt; &#xA;&lt;h3&gt;GPU compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Btop++ supports Nvidia and AMD GPUs and Intel IGPUs out of the box on Linux x86_64, provided you have the correct drivers and libraries.&lt;/p&gt; &#xA;&lt;p&gt;Gpu support for Nvidia or AMD will not work when static linking glibc (or musl, etc.)!&lt;/p&gt; &#xA;&lt;p&gt;For x86_64 Linux the flag &lt;code&gt;GPU_SUPPORT&lt;/code&gt; is automatically set to &lt;code&gt;true&lt;/code&gt;, to manually disable gpu support set the flag to false, like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make GPU_SUPPORT=false&lt;/code&gt; (or &lt;code&gt;cmake -DBTOP_GPU=false&lt;/code&gt; with CMake)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NVIDIA&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You must use an official NVIDIA driver, both the closed-source and &lt;a href=&#34;https://github.com/NVIDIA/open-gpu-kernel-modules&#34;&gt;open-source&lt;/a&gt; ones have been verified to work.&lt;/p&gt; &lt;p&gt;In addition to that you must also have the &lt;code&gt;nvidia-ml&lt;/code&gt; dynamic library installed, which should be included with the driver package of your distribution.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;AMD&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;AMDGPU data is queried using the &lt;a href=&#34;https://github.com/rocm/rocm_smi_lib&#34;&gt;ROCm SMI&lt;/a&gt; library, which may or may not be packaged for your distribution. If your distribution doesn&#39;t provide a package, btop++ is statically linked to ROCm SMI with the &lt;code&gt;RSMI_STATIC=true&lt;/code&gt; make flag.&lt;/p&gt; &lt;p&gt;This flag expects the ROCm SMI source code in &lt;code&gt;lib/rocm_smi_lib&lt;/code&gt;, and compilation will fail if it&#39;s not there. The latest tested version is 5.6.x, which can be obtained with the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/rocm/rocm_smi_lib.git --depth 1 -b rocm-5.6.x lib/rocm_smi_lib&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;h3&gt;With Make&lt;/h3&gt; &lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install dependencies (example for Ubuntu 21.04 Hirsute)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install coreutils sed git build-essential gcc-11 g++-11 lowdown&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aristocratos/btop.git&#xA;cd btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Options for make:&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;Flag&lt;/th&gt; &#xA;      &lt;th&gt;Description&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;VERBOSE=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To display full compiler/linker commands&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;STATIC=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For static compilation&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;QUIET=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For less verbose output&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;STRIP=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To force stripping of debug symbols (adds &lt;code&gt;-s&lt;/code&gt; linker flag)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;DEBUG=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Sets OPTFLAGS to &lt;code&gt;-O0 -g&lt;/code&gt; and enables more verbose debug logging&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;ARCH=&amp;lt;architecture&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To manually set the target architecture&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;FORTIFY_SOURCE=false&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Disable fortification with &lt;code&gt;_FORTIFY_SOURCE=3&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;GPU_SUPPORT=&amp;lt;true|false&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Enable/disable GPU support (Enabled by default on X86_64 Linux)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;RSMI_STATIC=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To statically link the ROCm SMI library used for querying AMDGPU&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;ADDFLAGS=&amp;lt;flags&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For appending flags to both compiler and linker&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;CXX=&amp;lt;compiler&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Manually set which compiler to use&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;p&gt;Example: &lt;code&gt;make ADDFLAGS=-march=native&lt;/code&gt; might give a performance boost if compiling only for your own system.&lt;/p&gt; &lt;p&gt;Notice! If using LDAP Authentication, usernames will show as UID number for LDAP users if compiling statically with glibc.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Append &lt;code&gt;PREFIX=/target/dir&lt;/code&gt; to set target, default: &lt;code&gt;/usr/local&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Notice! Only use &#34;sudo&#34; when installing to a NON user owned directory.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;(Optional/Required for Intel GPU support) Set extended capabilities or suid bit to btop&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;No need for &lt;code&gt;sudo&lt;/code&gt; to enable signal sending to any process and to prevent /proc read permissions problems on some systems.&lt;/p&gt; &lt;p&gt;Also required for Intel GPU monitoring.&lt;/p&gt; &lt;p&gt;Run after make install and use same PREFIX if any was used at install.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make setcap&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;p&gt;Set &lt;code&gt;SU_USER&lt;/code&gt; and &lt;code&gt;SU_GROUP&lt;/code&gt; to select user and group, default is &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make setuid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove any object files from source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove all object files, binaries and created directories in source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make distclean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Show help&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;h3&gt;With CMake (Community maintained)&lt;/h3&gt; &lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install build dependencies&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Requires Clang / GCC, CMake, Ninja, Lowdown and Git&lt;/p&gt; &lt;p&gt;For example, with Debian Bookworm:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install cmake git g++ ninja-build lowdown&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone the repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aristocratos/btop.git &amp;amp;&amp;amp; cd btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Configure&#xA;cmake -B build -G Ninja&#xA;# Build&#xA;cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will automatically build a release version of btop.&lt;/p&gt; &lt;p&gt;Some useful options to pass to the configure step:&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;Configure flag&lt;/th&gt; &#xA;      &lt;th&gt;Description&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_STATIC=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Enables static linking (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_LTO=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Enables link time optimization (ON by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_USE_MOLD=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Use mold to link btop (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_PEDANTIC=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Compile with additional warnings (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_WERROR=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Compile with warnings as errors (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_FORTIFY=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Detect buffer overflows with &lt;code&gt;_FORTIFY_SOURCE=3&lt;/code&gt; (ON by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_GPU=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Enable GPU support (ON by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_RSMI_STATIC=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Build and link the ROCm SMI library statically (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DCMAKE_INSTALL_PREFIX=&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;The installation prefix (&#39;/usr/local&#39; by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;p&gt;To force any other compiler, run &lt;code&gt;CXX=&amp;lt;compiler&amp;gt; cmake -B build -G Ninja&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --install build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;May require root privileges&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;CMake doesn&#39;t generate an uninstall target by default. To remove installed files, run&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cat build/install_manifest.txt | xargs rm -irv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cleanup build directory&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --build build -t clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Compilation macOS OSX&lt;/h2&gt; &#xA;&lt;p&gt;Requires at least GCC 10 or Clang 16.&lt;/p&gt; &#xA;&lt;p&gt;With GCC, version 12 (or better) is needed for macOS Ventura. If you get linker errors on Ventura you&#39;ll need to upgrade your command line tools (Version 14.0) is bugged.&lt;/p&gt; &#xA;&lt;p&gt;The makefile also needs GNU coreutils and &lt;code&gt;sed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install and use Homebrew or MacPorts package managers for easy dependency installation&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;h3&gt;With Make&lt;/h3&gt; &lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install dependencies (example for Homebrew)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install coreutils make gcc@12 lowdown&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aristocratos/btop.git&#xA;cd btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Options for make:&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;Flag&lt;/th&gt; &#xA;      &lt;th&gt;Description&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;VERBOSE=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To display full compiler/linker commands&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;STATIC=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For static compilation (only libgcc and libstdc++)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;QUIET=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For less verbose output&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;STRIP=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To force stripping of debug symbols (adds &lt;code&gt;-s&lt;/code&gt; linker flag)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;DEBUG=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Sets OPTFLAGS to &lt;code&gt;-O0 -g&lt;/code&gt; and enables more verbose debug logging&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;ARCH=&amp;lt;architecture&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To manually set the target architecture&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;FORTIFY_SOURCE=false&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Disable fortification with &lt;code&gt;_FORTIFY_SOURCE=3&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;ADDFLAGS=&amp;lt;flags&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For appending flags to both compiler and linker&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;CXX=&amp;lt;compiler&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Manually set which compiler to use&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;p&gt;Example: &lt;code&gt;gmake ADDFLAGS=-march=native&lt;/code&gt; might give a performance boost if compiling only for your own system.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Append &lt;code&gt;PREFIX=/target/dir&lt;/code&gt; to set target, default: &lt;code&gt;/usr/local&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Notice! Only use &#34;sudo&#34; when installing to a NON user owned directory.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;(Recommended) Set suid bit to make btop always run as root (or other user)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake setuid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;No need for &lt;code&gt;sudo&lt;/code&gt; to see information for non user owned processes and to enable signal sending to any process.&lt;/p&gt; &lt;p&gt;Run after make install and use same PREFIX if any was used at install.&lt;/p&gt; &lt;p&gt;Set &lt;code&gt;SU_USER&lt;/code&gt; and &lt;code&gt;SU_GROUP&lt;/code&gt; to select user and group, default is &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;wheel&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove any object files from source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove all object files, binaries and created directories in source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake distclean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Show help&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;h3&gt;With CMake (Community maintained)&lt;/h3&gt; &lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install build dependencies&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Requires Clang, CMake, Ninja, Lowdown and Git&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew update --quiet&#xA;brew install cmake git llvm ninja lowdown&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone the repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aristocratos/btop.git &amp;amp;&amp;amp; cd btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Configure&#xA;export LLVM_PREFIX=&#34;$(brew --prefix llvm)&#34;&#xA;export CXX=&#34;$LLVM_PREFIX/bin/clang++&#34;&#xA;export CPPFLAGS=&#34;-I$LLVM_PREFIX/include&#34;&#xA;export LDFLAGS=&#34;-L$LLVM_PREFIX/lib -L$LLVM_PREFIX/lib/c++ -Wl,-rpath,$LLVM_PREFIX/lib/c++ -fuse-ld=$LLVM_PREFIX/bin/ld64.lld&#34;&#xA;cmake -B build -G Ninja&#xA;# Build&#xA;cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; btop uses lots of C++ 20 features, so it&#39;s necessary to be specific about the compiler and the standard library. If you get a compile with Apple-Clang or GCC, feel free to add the instructions here.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;This will automatically build a release version of btop.&lt;/p&gt; &lt;p&gt;Some useful options to pass to the configure step:&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;Configure flag&lt;/th&gt; &#xA;      &lt;th&gt;Description&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_LTO=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Enables link time optimization (ON by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_USE_MOLD=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Use mold to link btop (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_PEDANTIC=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Compile with additional warnings (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_WERROR=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Compile with warnings as errors (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_FORTIFY=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Detect buffer overflows with &lt;code&gt;_FORTIFY_SOURCE=3&lt;/code&gt; (ON by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DCMAKE_INSTALL_PREFIX=&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;The installation prefix (&#39;/usr/local&#39; by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;p&gt;To force any specific compiler, run &lt;code&gt;CXX=&amp;lt;compiler&amp;gt; cmake -B build -G Ninja&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --install build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;May require root privileges&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;CMake doesn&#39;t generate an uninstall target by default. To remove installed files, run&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cat build/install_manifest.txt | xargs rm -irv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cleanup build directory&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --build build -t clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Compilation FreeBSD&lt;/h2&gt; &#xA;&lt;p&gt;Requires at least GCC 10 or Clang 16.&lt;/p&gt; &#xA;&lt;p&gt;Note that GNU make (&lt;code&gt;gmake&lt;/code&gt;) is required to compile on FreeBSD.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;h3&gt;With gmake&lt;/h3&gt; &lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install dependencies&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pkg install gmake gcc11 coreutils git lowdown&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aristocratos/btop.git&#xA;cd btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Options for make:&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;Flag&lt;/th&gt; &#xA;      &lt;th&gt;Description&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;VERBOSE=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To display full compiler/linker commands&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;STATIC=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For static compilation (only libgcc and libstdc++)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;QUIET=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For less verbose output&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;STRIP=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To force stripping of debug symbols (adds &lt;code&gt;-s&lt;/code&gt; linker flag)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;DEBUG=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Sets OPTFLAGS to &lt;code&gt;-O0 -g&lt;/code&gt; and enables more verbose debug logging&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;ARCH=&amp;lt;architecture&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To manually set the target architecture&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;FORTIFY_SOURCE=false&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Disable fortification with &lt;code&gt;_FORTIFY_SOURCE=3&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;ADDFLAGS=&amp;lt;flags&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For appending flags to both compiler and linker&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;CXX=&amp;lt;compiler&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Manually set which compiler to use&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;p&gt;Example: &lt;code&gt;gmake ADDFLAGS=-march=native&lt;/code&gt; might give a performance boost if compiling only for your own system.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Append &lt;code&gt;PREFIX=/target/dir&lt;/code&gt; to set target, default: &lt;code&gt;/usr/local&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Notice! Only use &#34;sudo&#34; when installing to a NON user owned directory.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;(Recommended) Set suid bit to make btop always run as root (or other user)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake setuid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;No need for &lt;code&gt;sudo&lt;/code&gt; to see information for non user owned processes and to enable signal sending to any process.&lt;/p&gt; &lt;p&gt;Run after make install and use same PREFIX if any was used at install.&lt;/p&gt; &lt;p&gt;Set &lt;code&gt;SU_USER&lt;/code&gt; and &lt;code&gt;SU_GROUP&lt;/code&gt; to select user and group, default is &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;wheel&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove any object files from source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove all object files, binaries and created directories in source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake distclean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Show help&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;h3&gt;With CMake (Community maintained)&lt;/h3&gt; &lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install build dependencies&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Requires Clang / GCC, CMake, Ninja, Lowdown and Git&lt;/p&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; LLVM&#39;s libc++ shipped with FreeBSD 13 is too old and cannot compile btop.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;FreeBSD 14 and later:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pkg install cmake ninja lowdown&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;FreeBSD 13:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pkg install cmake gcc13 ninja lowdown&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone the repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aristocratos/btop.git &amp;amp;&amp;amp; cd btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;FreeBSD 14 and later:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Configure&#xA;cmake -B build -G Ninja&#xA;# Build&#xA;cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;FreeBSD 13:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Configure&#xA;CXX=g++13 cmake -B build -G Ninja&#xA;# Build&#xA;cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will automatically build a release version of btop.&lt;/p&gt; &lt;p&gt;Some useful options to pass to the configure step:&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;Configure flag&lt;/th&gt; &#xA;      &lt;th&gt;Description&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_STATIC=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Enables static linking (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_LTO=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Enables link time optimization (ON by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_USE_MOLD=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Use mold to link btop (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_PEDANTIC=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Compile with additional warnings (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_WERROR=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Compile with warnings as errors (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_FORTIFY=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Detect buffer overflows with &lt;code&gt;_FORTIFY_SOURCE=3&lt;/code&gt; (ON by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DCMAKE_INSTALL_PREFIX=&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;The installation prefix (&#39;/usr/local&#39; by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Static linking does not work with GCC.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;To force any other compiler, run &lt;code&gt;CXX=&amp;lt;compiler&amp;gt; cmake -B build -G Ninja&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --install build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;May require root privileges&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;CMake doesn&#39;t generate an uninstall target by default. To remove installed files, run&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cat build/install_manifest.txt | xargs rm -irv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cleanup build directory&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --build build -t clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Compilation NetBSD&lt;/h2&gt; &#xA;&lt;p&gt;Requires at least GCC 10.&lt;/p&gt; &#xA;&lt;p&gt;Note that GNU make (&lt;code&gt;gmake&lt;/code&gt;) is required to compile on NetBSD.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;h3&gt;With gmake&lt;/h3&gt; &lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install dependencies&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pkg_add gmake gcc10 coreutils git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aristocratos/btop.git&#xA;cd btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake CXXFLAGS=&#34;-DNDEBUG&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Options for make:&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;Flag&lt;/th&gt; &#xA;      &lt;th&gt;Description&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;VERBOSE=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To display full compiler/linker commands&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;STATIC=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For static compilation (only libgcc and libstdc++)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;QUIET=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For less verbose output&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;STRIP=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To force stripping of debug symbols (adds &lt;code&gt;-s&lt;/code&gt; linker flag)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;DEBUG=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Sets OPTFLAGS to &lt;code&gt;-O0 -g&lt;/code&gt; and enables more verbose debug logging&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;ARCH=&amp;lt;architecture&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To manually set the target architecture&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;FORTIFY_SOURCE=false&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Disable fortification with &lt;code&gt;_FORTIFY_SOURCE=3&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;ADDFLAGS=&amp;lt;flags&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For appending flags to both compiler and linker&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;CXX=&amp;lt;compiler&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Manually set which compiler to use&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;p&gt;Example: &lt;code&gt;gmake ADDFLAGS=-march=native&lt;/code&gt; might give a performance boost if compiling only for your own system.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Append &lt;code&gt;PREFIX=/target/dir&lt;/code&gt; to set target, default: &lt;code&gt;/usr/local&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Notice! Only use &#34;sudo&#34; when installing to a NON user owned directory.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;(Recommended) Set suid bit to make btop always run as root (or other user)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake setuid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;No need for &lt;code&gt;sudo&lt;/code&gt; to see information for non user owned processes and to enable signal sending to any process.&lt;/p&gt; &lt;p&gt;Run after make install and use same PREFIX if any was used at install.&lt;/p&gt; &lt;p&gt;Set &lt;code&gt;SU_USER&lt;/code&gt; and &lt;code&gt;SU_GROUP&lt;/code&gt; to select user and group, default is &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;wheel&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove any object files from source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove all object files, binaries and created directories in source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake distclean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Show help&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;h3&gt;With CMake (Community maintained)&lt;/h3&gt; &lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install build dependencies&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Requires GCC, CMake, Ninja and Git&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pkg_add cmake ninja-build gcc10 coreutils git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone the repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aristocratos/btop.git &amp;amp;&amp;amp; cd btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Configure&#xA;cmake -DCMAKE_CXX_COMPILER=&#34;/usr/pkg/gcc10/bin/g++&#34; -B build -G Ninja&#xA;# Build&#xA;cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will automatically build a release version of btop.&lt;/p&gt; &lt;p&gt;Some useful options to pass to the configure step:&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;Configure flag&lt;/th&gt; &#xA;      &lt;th&gt;Description&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_LTO=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Enables link time optimization (ON by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_USE_MOLD=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Use mold to link btop (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_PEDANTIC=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Compile with additional warnings (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_WERROR=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Compile with warnings as errors (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_FORTIFY=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Detect buffer overflows with &lt;code&gt;_FORTIFY_SOURCE=3&lt;/code&gt; (ON by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DCMAKE_INSTALL_PREFIX=&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;The installation prefix (&#39;/usr/local&#39; by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;p&gt;To force any other compiler, run &lt;code&gt;CXX=&amp;lt;compiler&amp;gt; cmake -B build -G Ninja&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --install build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;May require root privileges&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;CMake doesn&#39;t generate an uninstall target by default. To remove installed files, run&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cat build/install_manifest.txt | xargs rm -irv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cleanup build directory&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --build build -t clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Compilation OpenBSD&lt;/h2&gt; &#xA;&lt;p&gt;Requires at least GCC 10.&lt;/p&gt; &#xA;&lt;p&gt;Note that GNU make (&lt;code&gt;gmake&lt;/code&gt;) is required to compile on OpenBSD.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;h3&gt;With gmake&lt;/h3&gt; &lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install dependencies&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pkg_add gmake gcc%11 g++%11 coreutils git lowdown&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aristocratos/btop.git&#xA;cd btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake CXX=eg++&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Options for make:&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;Flag&lt;/th&gt; &#xA;      &lt;th&gt;Description&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;VERBOSE=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To display full compiler/linker commands&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;STATIC=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For static compilation (only libgcc and libstdc++)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;QUIET=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For less verbose output&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;STRIP=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To force stripping of debug symbols (adds &lt;code&gt;-s&lt;/code&gt; linker flag)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;DEBUG=true&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Sets OPTFLAGS to &lt;code&gt;-O0 -g&lt;/code&gt; and enables more verbose debug logging&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;ARCH=&amp;lt;architecture&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;To manually set the target architecture&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;FORTIFY_SOURCE=false&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Disable fortification with &lt;code&gt;_FORTIFY_SOURCE=3&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;ADDFLAGS=&amp;lt;flags&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;For appending flags to both compiler and linker&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;CXX=&amp;lt;compiler&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Manually set which compiler to use&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;p&gt;Example: &lt;code&gt;gmake ADDFLAGS=-march=native&lt;/code&gt; might give a performance boost if compiling only for your own system.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Append &lt;code&gt;PREFIX=/target/dir&lt;/code&gt; to set target, default: &lt;code&gt;/usr/local&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Notice! Only use &#34;sudo&#34; when installing to a NON user owned directory.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;(Recommended) Set suid bit to make btop always run as root (or other user)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake setuid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;No need for &lt;code&gt;sudo&lt;/code&gt; to see information for non user owned processes and to enable signal sending to any process.&lt;/p&gt; &lt;p&gt;Run after make install and use same PREFIX if any was used at install.&lt;/p&gt; &lt;p&gt;Set &lt;code&gt;SU_USER&lt;/code&gt; and &lt;code&gt;SU_GROUP&lt;/code&gt; to select user and group, default is &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;wheel&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gmake uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove any object files from source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove all object files, binaries and created directories in source dir&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake distclean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Show help&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gmake help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;h3&gt;With CMake (Community maintained)&lt;/h3&gt; &lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install build dependencies&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Requires GCC, CMake, Ninja, Lowdown and Git&lt;/p&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; LLVM&#39;s libc++ shipped with OpenBSD 7.4 is too old and cannot compile btop.&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pkg_add cmake g++%11 git ninja lowdown&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone the repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aristocratos/btop.git &amp;amp;&amp;amp; cd btop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Configure&#xA;CXX=eg++ cmake -B build -G Ninja&#xA;# Build&#xA;cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will automatically build a release version of btop.&lt;/p&gt; &lt;p&gt;Some useful options to pass to the configure step:&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;Configure flag&lt;/th&gt; &#xA;      &lt;th&gt;Description&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_LTO=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Enables link time optimization (ON by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_USE_MOLD=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Use mold to link btop (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_PEDANTIC=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Compile with additional warnings (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_WERROR=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Compile with warnings as errors (OFF by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DBTOP_FORTIFY=&amp;lt;ON|OFF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;Detect buffer overflows with &lt;code&gt;_FORTIFY_SOURCE=3&lt;/code&gt; (ON by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;&lt;code&gt;-DCMAKE_INSTALL_PREFIX=&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;      &lt;td&gt;The installation prefix (&#39;/usr/local&#39; by default)&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;p&gt;To force any other compiler, run &lt;code&gt;CXX=&amp;lt;compiler&amp;gt; cmake -B build -G Ninja&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --install build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;May require root privileges&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;CMake doesn&#39;t generate an uninstall target by default. To remove installed files, run&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cat build/install_manifest.txt | xargs rm -irv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cleanup build directory&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --build build -t clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Installing the snap&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://snapcraft.io/btop&#34;&gt;&lt;img src=&#34;https://snapcraft.io/btop/badge.svg?sanitize=true&#34; alt=&#34;btop&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Note: there are now two snaps available: &lt;code&gt;btop&lt;/code&gt; and &lt;code&gt;btop-desktop&lt;/code&gt;. The desktop version is much larger and includes the desktop entries needed to allow for launching &lt;code&gt;btop&lt;/code&gt; with a click.&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install the snap&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo snap install btop&#xA;or&#xA;sudo snap install btop-desktop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install the latest snap from the edge channel&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo snap install btop --edge&#xA;or&#xA;sudo snap install btop-desktop --edge&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Connect the interface&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo snap connect btop:removable-media&#xA;or&#xA;sudo snap connect btop-desktop:removable-media&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configurability&lt;/h2&gt; &#xA;&lt;p&gt;All options changeable from within UI. Config and log files stored in &lt;code&gt;$XDG_CONFIG_HOME/btop&lt;/code&gt; or &lt;code&gt;$HOME/.config/btop&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;h4&gt;btop.conf: (auto generated if not found)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#? Config file for btop v. 1.2.2&#xA;&#xA;#* Name of a btop++/bpytop/bashtop formatted &#34;.theme&#34; file, &#34;Default&#34; and &#34;TTY&#34; for builtin themes.&#xA;#* Themes should be placed in &#34;../share/btop/themes&#34; relative to binary or &#34;$HOME/.config/btop/themes&#34;&#xA;color_theme = &#34;Default&#34;&#xA;&#xA;#* If the theme set background should be shown, set to False if you want terminal background transparency.&#xA;theme_background = True&#xA;&#xA;#* Sets if 24-bit truecolor should be used, will convert 24-bit colors to 256 color (6x6x6 color cube) if false.&#xA;truecolor = True&#xA;&#xA;#* Set to true to force tty mode regardless if a real tty has been detected or not.&#xA;#* Will force 16-color mode and TTY theme, set all graph symbols to &#34;tty&#34; and swap out other non tty friendly symbols.&#xA;force_tty = False&#xA;&#xA;#* Define presets for the layout of the boxes. Preset 0 is always all boxes shown with default settings. Max 9 presets.&#xA;#* Format: &#34;box_name:P:G,box_name:P:G&#34; P=(0 or 1) for alternate positions, G=graph symbol to use for box.&#xA;#* Use whitespace &#34; &#34; as separator between different presets.&#xA;#* Example: &#34;cpu:0:default,mem:0:tty,proc:1:default cpu:0:braille,proc:0:tty&#34;&#xA;presets = &#34;cpu:1:default,proc:0:default cpu:0:default,mem:0:default,net:0:default cpu:0:block,net:0:tty&#34;&#xA;&#xA;#* Set to True to enable &#34;h,j,k,l,g,G&#34; keys for directional control in lists.&#xA;#* Conflicting keys for h:&#34;help&#34; and k:&#34;kill&#34; is accessible while holding shift.&#xA;vim_keys = False&#xA;&#xA;#* Rounded corners on boxes, is ignored if TTY mode is ON.&#xA;rounded_corners = True&#xA;&#xA;#* Default symbols to use for graph creation, &#34;braille&#34;, &#34;block&#34; or &#34;tty&#34;.&#xA;#* &#34;braille&#34; offers the highest resolution but might not be included in all fonts.&#xA;#* &#34;block&#34; has half the resolution of braille but uses more common characters.&#xA;#* &#34;tty&#34; uses only 3 different symbols but will work with most fonts and should work in a real TTY.&#xA;#* Note that &#34;tty&#34; only has half the horizontal resolution of the other two, so will show a shorter historical view.&#xA;graph_symbol = &#34;braille&#34;&#xA;&#xA;# Graph symbol to use for graphs in cpu box, &#34;default&#34;, &#34;braille&#34;, &#34;block&#34; or &#34;tty&#34;.&#xA;graph_symbol_cpu = &#34;default&#34;&#xA;&#xA;# Graph symbol to use for graphs in cpu box, &#34;default&#34;, &#34;braille&#34;, &#34;block&#34; or &#34;tty&#34;.&#xA;graph_symbol_mem = &#34;default&#34;&#xA;&#xA;# Graph symbol to use for graphs in cpu box, &#34;default&#34;, &#34;braille&#34;, &#34;block&#34; or &#34;tty&#34;.&#xA;graph_symbol_net = &#34;default&#34;&#xA;&#xA;# Graph symbol to use for graphs in cpu box, &#34;default&#34;, &#34;braille&#34;, &#34;block&#34; or &#34;tty&#34;.&#xA;graph_symbol_proc = &#34;default&#34;&#xA;&#xA;#* Manually set which boxes to show. Available values are &#34;cpu mem net proc&#34; and &#34;gpu0&#34; through &#34;gpu5&#34;, separate values with whitespace.&#xA;shown_boxes = &#34;proc cpu mem net&#34;&#xA;&#xA;#* Update time in milliseconds, recommended 2000 ms or above for better sample times for graphs.&#xA;update_ms = 1500&#xA;&#xA;#* Processes sorting, &#34;pid&#34; &#34;program&#34; &#34;arguments&#34; &#34;threads&#34; &#34;user&#34; &#34;memory&#34; &#34;cpu lazy&#34; &#34;cpu responsive&#34;,&#xA;#* &#34;cpu lazy&#34; sorts top process over time (easier to follow), &#34;cpu responsive&#34; updates top process directly.&#xA;proc_sorting = &#34;cpu lazy&#34;&#xA;&#xA;#* Reverse sorting order, True or False.&#xA;proc_reversed = False&#xA;&#xA;#* Show processes as a tree.&#xA;proc_tree = False&#xA;&#xA;#* Use the cpu graph colors in the process list.&#xA;proc_colors = True&#xA;&#xA;#* Use a darkening gradient in the process list.&#xA;proc_gradient = True&#xA;&#xA;#* If process cpu usage should be of the core it&#39;s running on or usage of the total available cpu power.&#xA;proc_per_core = True&#xA;&#xA;#* Show process memory as bytes instead of percent.&#xA;proc_mem_bytes = True&#xA;&#xA;#* Use /proc/[pid]/smaps for memory information in the process info box (very slow but more accurate)&#xA;proc_info_smaps = False&#xA;&#xA;#* Show proc box on left side of screen instead of right.&#xA;proc_left = False&#xA;&#xA;#* Sets the CPU stat shown in upper half of the CPU graph, &#34;total&#34; is always available.&#xA;#* Select from a list of detected attributes from the options menu.&#xA;cpu_graph_upper = &#34;total&#34;&#xA;&#xA;#* Sets the CPU stat shown in lower half of the CPU graph, &#34;total&#34; is always available.&#xA;#* Select from a list of detected attributes from the options menu.&#xA;cpu_graph_lower = &#34;total&#34;&#xA;&#xA;#* Toggles if the lower CPU graph should be inverted.&#xA;cpu_invert_lower = True&#xA;&#xA;#* Set to True to completely disable the lower CPU graph.&#xA;cpu_single_graph = False&#xA;&#xA;#* Show cpu box at bottom of screen instead of top.&#xA;cpu_bottom = False&#xA;&#xA;#* Shows the system uptime in the CPU box.&#xA;show_uptime = True&#xA;&#xA;#* Show cpu temperature.&#xA;check_temp = True&#xA;&#xA;#* Which sensor to use for cpu temperature, use options menu to select from list of available sensors.&#xA;cpu_sensor = &#34;Auto&#34;&#xA;&#xA;#* Show temperatures for cpu cores also if check_temp is True and sensors has been found.&#xA;show_coretemp = True&#xA;&#xA;#* Set a custom mapping between core and coretemp, can be needed on certain cpus to get correct temperature for correct core.&#xA;#* Use lm-sensors or similar to see which cores are reporting temperatures on your machine.&#xA;#* Format &#34;x:y&#34; x=core with wrong temp, y=core with correct temp, use space as separator between multiple entries.&#xA;#* Example: &#34;4:0 5:1 6:3&#34;&#xA;cpu_core_map = &#34;&#34;&#xA;&#xA;#* Which temperature scale to use, available values: &#34;celsius&#34;, &#34;fahrenheit&#34;, &#34;kelvin&#34; and &#34;rankine&#34;.&#xA;temp_scale = &#34;celsius&#34;&#xA;&#xA;#* Use base 10 for bits/bytes sizes, KB = 1000 instead of KiB = 1024.&#xA;base_10_sizes = False&#xA;&#xA;#* Show CPU frequency.&#xA;show_cpu_freq = True&#xA;&#xA;#* Draw a clock at top of screen, formatting according to strftime, empty string to disable.&#xA;#* Special formatting: /host = hostname | /user = username | /uptime = system uptime&#xA;clock_format = &#34;%H:%M&#34;&#xA;&#xA;#* Update main ui in background when menus are showing, set this to false if the menus is flickering too much for comfort.&#xA;background_update = True&#xA;&#xA;#* Custom cpu model name, empty string to disable.&#xA;custom_cpu_name = &#34;&#34;&#xA;&#xA;#* Optional filter for shown disks, should be full path of a mountpoint, separate multiple values with whitespace &#34; &#34;.&#xA;#* Begin line with &#34;exclude=&#34; to change to exclude filter, otherwise defaults to &#34;most include&#34; filter. Example: disks_filter=&#34;exclude=/boot /home/user&#34;.&#xA;disks_filter = &#34;exclude=/boot&#34;&#xA;&#xA;#* Show graphs instead of meters for memory values.&#xA;mem_graphs = True&#xA;&#xA;#* Show mem box below net box instead of above.&#xA;mem_below_net = False&#xA;&#xA;#* Count ZFS ARC in cached and available memory.&#xA;zfs_arc_cached = True&#xA;&#xA;#* If swap memory should be shown in memory box.&#xA;show_swap = True&#xA;&#xA;#* Show swap as a disk, ignores show_swap value above, inserts itself after first disk.&#xA;swap_disk = True&#xA;&#xA;#* If mem box should be split to also show disks info.&#xA;show_disks = True&#xA;&#xA;#* Filter out non physical disks. Set this to False to include network disks, RAM disks and similar.&#xA;only_physical = True&#xA;&#xA;#* Read disks list from /etc/fstab. This also disables only_physical.&#xA;use_fstab = False&#xA;&#xA;#* Set to true to show available disk space for privileged users.&#xA;disk_free_priv = False&#xA;&#xA;#* Toggles if io activity % (disk busy time) should be shown in regular disk usage view.&#xA;show_io_stat = True&#xA;&#xA;#* Toggles io mode for disks, showing big graphs for disk read/write speeds.&#xA;io_mode = False&#xA;&#xA;#* Set to True to show combined read/write io graphs in io mode.&#xA;io_graph_combined = False&#xA;&#xA;#* Set the top speed for the io graphs in MiB/s (100 by default), use format &#34;mountpoint:speed&#34; separate disks with whitespace &#34; &#34;.&#xA;#* Example: &#34;/mnt/media:100 /:20 /boot:1&#34;.&#xA;io_graph_speeds = &#34;&#34;&#xA;&#xA;#* Set fixed values for network graphs in Mebibits. Is only used if net_auto is also set to False.&#xA;net_download = 100&#xA;&#xA;net_upload = 100&#xA;&#xA;#* Use network graphs auto rescaling mode, ignores any values set above and rescales down to 10 Kibibytes at the lowest.&#xA;net_auto = True&#xA;&#xA;#* Sync the auto scaling for download and upload to whichever currently has the highest scale.&#xA;net_sync = False&#xA;&#xA;#* Starts with the Network Interface specified here.&#xA;net_iface = &#34;br0&#34;&#xA;&#xA;#* Show battery stats in top right if battery is present.&#xA;show_battery = True&#xA;&#xA;#* Which battery to use if multiple are present. &#34;Auto&#34; for auto detection.&#xA;selected_battery = &#34;Auto&#34;&#xA;&#xA;#* Set loglevel for &#34;~/.config/btop/btop.log&#34; levels are: &#34;ERROR&#34; &#34;WARNING&#34; &#34;INFO&#34; &#34;DEBUG&#34;.&#xA;#* The level set includes all lower levels, i.e. &#34;DEBUG&#34; will show all logging info.&#xA;log_level = &#34;DEBUG&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Command line options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;usage: btop [-h] [-v] [-/+t] [-p &amp;lt;id&amp;gt;] [--utf-force] [--debug]&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;  -v, --version         show version info and exit&#xA;  -lc, --low-color      disable truecolor, converts 24-bit colors to 256-color&#xA;  -t, --tty_on          force (ON) tty mode, max 16 colors and tty friendly graph symbols&#xA;  +t, --tty_off         force (OFF) tty mode&#xA;  -p, --preset &amp;lt;id&amp;gt;     start with preset, integer value between 0-9&#xA;  --utf-force           force start even if no UTF-8 locale was detected&#xA;  --debug               start in DEBUG mode: shows microsecond timer for information collect&#xA;                        and screen draw functions and sets loglevel to DEBUG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aristocratos/btop/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>