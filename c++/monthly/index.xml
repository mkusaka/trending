<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-01T02:08:52Z</updated>
  <subtitle>Monthly Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tbnobody/OpenDTU</title>
    <updated>2023-04-01T02:08:52Z</updated>
    <id>tag:github.com,2023-04-01:/tbnobody/OpenDTU</id>
    <link href="https://github.com/tbnobody/OpenDTU" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Software for ESP32 to talk to Hoymiles Inverters&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenDTU&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tbnobody/OpenDTU/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/tbnobody/OpenDTU/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;OpenDTU Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tbnobody/OpenDTU/actions/workflows/cpplint.yml&#34;&gt;&lt;img src=&#34;https://github.com/tbnobody/OpenDTU/actions/workflows/cpplint.yml/badge.svg?sanitize=true&#34; alt=&#34;cpplint&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;!! IMPORTANT UPGRADE NOTES !!&lt;/h2&gt; &#xA;&lt;p&gt;If you are upgrading from a version before 15.03.2023 you have to upgrade the partition table of the ESP32. Please follow the &lt;a href=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/UpgradePartition.md&#34;&gt;this&lt;/a&gt; documentation!&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;This project was started from &lt;a href=&#34;https://www.mikrocontroller.net/topic/525778&#34;&gt;this&lt;/a&gt; discussion (Mikrocontroller.net). It was the goal to replace the original Hoymiles DTU (Telemetry Gateway) with their cloud access. With a lot of reverse engineering the Hoymiles protocol was decrypted and analyzed.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Several screenshots of the frontend can be found here: &lt;a href=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/screenshots/README.md&#34;&gt;Screenshots&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Builds&lt;/h2&gt; &#xA;&lt;p&gt;Different builds from existing installations can be found here &lt;a href=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/builds/README.md&#34;&gt;Builds&lt;/a&gt; Like to show your own build? Just send me a Pull Request.&lt;/p&gt; &#xA;&lt;h2&gt;Currently supported Inverters&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hoymiles HM-300&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-350&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-400&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-600&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-700&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-800&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-1000&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-1200&lt;/li&gt; &#xA; &lt;li&gt;Hoymiles HM-1500&lt;/li&gt; &#xA; &lt;li&gt;Solenso SOL-H350&lt;/li&gt; &#xA; &lt;li&gt;Solenso SOL-H400&lt;/li&gt; &#xA; &lt;li&gt;Solenso SOL-H800&lt;/li&gt; &#xA; &lt;li&gt;TSUN TSOL-M350 (Maybe depending on firmware/serial number on the inverter)&lt;/li&gt; &#xA; &lt;li&gt;TSUN TSOL-M800 (Maybe depending on firmware/serial number on the inverter)&lt;/li&gt; &#xA; &lt;li&gt;TSUN TSOL-M1600 (Maybe depending on firmware/serial number on the inverter)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;TSUN compatibility remark:&lt;/strong&gt; Compatibility with OpenDTU seems to be related to serial numbers. Current findings indicate that TSUN inverters with a serial number starting with &#34;11&#34; are supported, whereby inverters with a serial number starting with &#34;10&#34; are not. Firmware version seems to play not a significant role and cannot be read from the stickers. For completeness, the following firmware version have been reported to work with OpenDTU:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v1.0.8, v1.0.10 TSOL-M800 (DE)&lt;/li&gt; &#xA; &lt;li&gt;v1.0.12 TSOL-M1600&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features for end users&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read live data from inverter&lt;/li&gt; &#xA; &lt;li&gt;Show inverters internal event log&lt;/li&gt; &#xA; &lt;li&gt;Show inverter information like firmware version, firmware build date, hardware revision and hardware version&lt;/li&gt; &#xA; &lt;li&gt;Show and set the current inverter limit&lt;/li&gt; &#xA; &lt;li&gt;Function to turn the inverter off and on&lt;/li&gt; &#xA; &lt;li&gt;Uses ESP32 microcontroller and NRF24L01+&lt;/li&gt; &#xA; &lt;li&gt;Multi-Inverter support&lt;/li&gt; &#xA; &lt;li&gt;MQTT support (with TLS)&lt;/li&gt; &#xA; &lt;li&gt;Home Assistant MQTT Auto Discovery support&lt;/li&gt; &#xA; &lt;li&gt;Nice and fancy WebApp with visualization of current data&lt;/li&gt; &#xA; &lt;li&gt;Firmware upgrade using the web UI&lt;/li&gt; &#xA; &lt;li&gt;Default source supports up to 10 inverters&lt;/li&gt; &#xA; &lt;li&gt;Time zone support&lt;/li&gt; &#xA; &lt;li&gt;Ethernet support&lt;/li&gt; &#xA; &lt;li&gt;Prometheus API endpoint (/api/prometheus/metrics)&lt;/li&gt; &#xA; &lt;li&gt;English, german and french web interface&lt;/li&gt; &#xA; &lt;li&gt;Displays (SSD1306, SH1106, PCD8544)&lt;/li&gt; &#xA; &lt;li&gt;Dark Theme&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features for developers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The microcontroller part&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build with Arduino PlatformIO Framework for the ESP32&lt;/li&gt; &#xA;   &lt;li&gt;Uses a fork of &lt;a href=&#34;https://github.com/yubox-node-org/ESPAsyncWebServer&#34;&gt;ESPAsyncWebserver&lt;/a&gt; and &lt;a href=&#34;https://github.com/bertmelis/espMqttClient&#34;&gt;espMqttClient&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The WebApp part&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build with &lt;a href=&#34;https://vuejs.org&#34;&gt;Vue.js&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Source is written in TypeScript&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Breaking changes&lt;/h2&gt; &#xA;&lt;p&gt;Generated using: &lt;code&gt;git log --date=short --pretty=format:&#34;* %h%x09%ad%x09%s&#34; | grep BREAKING&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* 318136d       2023-03-15      BREAKING CHANGE: Updated partition table: Make sure you have a configuration backup and completly reflash the device!&#xA;* 3b7aef6       2023-02-13      BREAKING CHANGE: Web API!&#xA;* d4c838a       2023-02-06      BREAKING CHANGE: Prometheus API!&#xA;* daf847e       2022-11-14      BREAKING CHANGE: Removed deprecated config parsing method&#xA;* 69b675b       2022-11-01      BREAKING CHANGE: Structure WebAPI /api/livedata/status changed&#xA;* 27ed4e3       2022-10-31      BREAKING: Change power factor from percent value to value between 0 and 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hardware you need&lt;/h2&gt; &#xA;&lt;h3&gt;ESP32 board&lt;/h3&gt; &#xA;&lt;p&gt;For ease of use, buy a &#34;ESP32 DEVKIT DOIT&#34; or &#34;ESP32 NodeMCU Development Board&#34; with an ESP32-S3 or ESP-WROOM-32 chipset on it.&lt;/p&gt; &#xA;&lt;p&gt;Sample Picture:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/nodemcu-esp32.png&#34; alt=&#34;NodeMCU-ESP32&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also supported: Board with Ethernet-Connector and Power-over-Ethernet &lt;a href=&#34;https://www.olimex.com/Products/IoT/ESP32/ESP32-POE/open-source-hardware&#34;&gt;Olimex ESP32-POE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;NRF24L01+ radio board&lt;/h3&gt; &#xA;&lt;p&gt;The PLUS sign is IMPORTANT! There are different variants available, with antenna on the printed circuit board or external antenna.&lt;/p&gt; &#xA;&lt;p&gt;Sample picture:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/nrf24l01plus.png&#34; alt=&#34;nrf24l01plus&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Buy your hardware from a trusted source, at best from a dealer/online shop in your country where you have support and the right to return non-functional hardware. When you want to buy from Amazon, AliExpress, eBay etc., take note that there is a lot of low-quality or fake hardware offered. Read customer comments and ratings carefully!&lt;/p&gt; &#xA;&lt;p&gt;A heavily incomplete list of trusted hardware shops in germany is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.az-delivery.de/&#34;&gt;AZ-Delivery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.makershop.de/&#34;&gt;Makershop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.berrybase.de/&#34;&gt;Berrybase&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This list is for your convenience only, the project is not related to any of these shops.&lt;/p&gt; &#xA;&lt;h3&gt;Power supply&lt;/h3&gt; &#xA;&lt;p&gt;Use a power suppy with 5 V and 1 A. The USB cable connected to your PC/Notebook may be powerful enough or may be not.&lt;/p&gt; &#xA;&lt;h2&gt;Wiring up&lt;/h2&gt; &#xA;&lt;h3&gt;Schematic&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/Wiring_ESP32_Schematic.png&#34; alt=&#34;Schematic&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Symbolic view&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/Wiring_ESP32_Symbol.png&#34; alt=&#34;Symbolic&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Change pin assignment&lt;/h3&gt; &#xA;&lt;p&gt;Its possible to change all the pins of the NRF24L01+ module. This can be achieved by copying one of the [env:....] sections from &#39;platformio.ini&#39; to &#39;platformio_override.ini&#39; and editing the &#39;platformio_override.ini&#39; file and add/change one or more of the following lines to the &#39;build_flags&#39; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-DHOYMILES_PIN_MISO=19&#xA;-DHOYMILES_PIN_MOSI=23&#xA;-DHOYMILES_PIN_SCLK=18&#xA;-DHOYMILES_PIN_IRQ=16&#xA;-DHOYMILES_PIN_CE=4&#xA;-DHOYMILES_PIN_CS=5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended to make all changes only in the &#39;platformio_override.ini&#39;, this is your personal copy. You can also change the pins by creating a custom &lt;a href=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/DeviceProfiles.md&#34;&gt;device profile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Flashing and starting up&lt;/h2&gt; &#xA;&lt;h3&gt;with Visual Studio Code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;Visual Studio Code&lt;/a&gt; (from now named &#34;vscode&#34;)&lt;/li&gt; &#xA; &lt;li&gt;In Visual Studio Code, install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=platformio.platformio-ide&#34;&gt;PlatformIO Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install git and enable git in vscode - &lt;a href=&#34;https://git-scm.com/downloads/&#34;&gt;git download&lt;/a&gt; - &lt;a href=&#34;https://www.jcchouinard.com/install-git-in-vscode/&#34;&gt;Instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository (you really have to clone it, don&#39;t just download the ZIP file. During the build process the git hash gets embedded into the firmware. If you download the ZIP file a build error will occur): Inside vscode open the command palette by pressing &lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;SHIFT&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt;. Enter &lt;code&gt;git clone&lt;/code&gt;, add the repository-URL &lt;code&gt;https://github.com/tbnobody/OpenDTU&lt;/code&gt;. Next you have to choose (or create) a target directory.&lt;/li&gt; &#xA; &lt;li&gt;In vscode, choose File --&amp;gt; Open Folder and select the previously downloaded source code. (You have to select the folder which contains the &#34;platformio.ini&#34; and &#34;platformio_override.ini&#34; file)&lt;/li&gt; &#xA; &lt;li&gt;Adjust the COM port in the file &#34;platformio_override.ini&#34; for your USB-to-serial-converter. It occurs twice: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;upload_port&lt;/li&gt; &#xA;   &lt;li&gt;monitor_port&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Select the arrow button in the blue bottom status bar (PlatformIO: Upload) to compile and upload the firmware. During the compilation, all required libraries are downloaded automatically.&lt;/li&gt; &#xA; &lt;li&gt;Under Linux, if the upload fails with error messages &#34;Could not open /dev/ttyUSB0, the port doesn&#39;t exist&#34;, you can check via &lt;code&gt;ls -la /dev/tty*&lt;/code&gt; to which group your port belongs to, and then add your user this group via &lt;code&gt;sudo adduser &amp;lt;yourusername&amp;gt; dialout&lt;/code&gt; (if you are using &lt;code&gt;arch-linux&lt;/code&gt; use: &lt;code&gt;sudo gpasswd -a &amp;lt;yourusername&amp;gt; uucp&lt;/code&gt;, this method requires a logout/login of the affected user).&lt;/li&gt; &#xA; &lt;li&gt;There are two videos showing these steps: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://youtu.be/9cA_esv3zeA&#34;&gt;Git Clone and compilation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://youtu.be/xs6TqHn7QWM&#34;&gt;Full installation and compilation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;on the commandline with PlatformIO Core&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://platformio.org/install/cli&#34;&gt;PlatformIO Core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository (you really have to clone it, don&#39;t just download the ZIP file. During the build process the git hash gets embedded into the firmware. If you download the ZIP file a build error will occur)&lt;/li&gt; &#xA; &lt;li&gt;Adjust the COM port in the file &#34;platformio_override.ini&#34;. It occurs twice: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;upload_port&lt;/li&gt; &#xA;   &lt;li&gt;monitor_port&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;build: &lt;code&gt;platformio run -e generic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;upload to esp module: &lt;code&gt;platformio run -e generic -t upload&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;other options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;clean the sources: &lt;code&gt;platformio run -e generic -t clean&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;erase flash: &lt;code&gt;platformio run -e generic -t erase&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;using the pre-compiled .bin files&lt;/h3&gt; &#xA;&lt;p&gt;The pre-compiled files can be found on the &lt;a href=&#34;https://github.com/tbnobody/OpenDTU&#34;&gt;github page&lt;/a&gt; in the tab &#34;Actions&#34; and the sub menu &#34;OpenDTU Build&#34;. Just choose the latest build from the master branch (search for &#34;master&#34; in the blue font text but click on the white header text!). You need to be logged in with your github account to download the files. Use a ESP32 flash tool of your choice (see next chapter) and flash the &lt;code&gt;.bin&lt;/code&gt; files to the right addresses:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Address&lt;/th&gt; &#xA;   &lt;th&gt;File&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0x1000&lt;/td&gt; &#xA;   &lt;td&gt;bootloader.bin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0x8000&lt;/td&gt; &#xA;   &lt;td&gt;partitions.bin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0xe000&lt;/td&gt; &#xA;   &lt;td&gt;boot_app0.bin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0x10000&lt;/td&gt; &#xA;   &lt;td&gt;opendtu-*.bin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For further updates you can just use the web interface and upload the &lt;code&gt;opendtu-*.bin&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h4&gt;Flash with esptool.py (Linux)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;esptool.py --port /dev/ttyUSB0 --chip esp32 --before default_reset --after hard_reset \&#xA;  write_flash --flash_mode dout --flash_freq 40m --flash_size detect \&#xA;  0x1000 bootloader.bin \&#xA;  0x8000 partitions.bin \&#xA;  0xe000 boot_app0.bin \&#xA;  0x10000 opendtu-generic.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Flash with Espressif Flash Download Tool (Windows)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.espressif.com/en/support/download/other-tools&#34;&gt;Download link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On startup, select Chip Type -&amp;gt; &#34;ESP32&#34; / WorkMode -&amp;gt; &#34;Develop&#34;&lt;/li&gt; &#xA; &lt;li&gt;Prepare all settings (see picture). Make sure to uncheck the &lt;code&gt;DoNotChgBin&lt;/code&gt; option. Otherwise you may get errors like &#34;invalid header&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/esp32_flash_download_tool.png&#34; alt=&#34;flash tool image&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Press &#34;Erase&#34; button on screen. Look into the terminal window, you should see dots appear. Then press the &#34;Boot&#34; button on the ESP32 board. Wait for &#34;FINISH&#34; to see if flashing/erasing is done.&lt;/li&gt; &#xA; &lt;li&gt;To program, press &#34;Start&#34; on screen, then the &#34;Boot&#34; button.&lt;/li&gt; &#xA; &lt;li&gt;When flashing is complete (FINISH appears) then press the Reset button on the ESP32 board (or powercycle ) to start the OpenDTU application.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Flash with ESP_Flasher (Windows)&lt;/h4&gt; &#xA;&lt;p&gt;Users report that &lt;a href=&#34;https://github.com/Jason2866/ESP_Flasher/releases/&#34;&gt;ESP_Flasher&lt;/a&gt; is suitable for flashing OpenDTU on Windows.&lt;/p&gt; &#xA;&lt;h4&gt;Flash with &lt;a href=&#34;https://espressif.github.io/esptool-js/&#34;&gt;ESP_Flasher&lt;/a&gt; - web version&lt;/h4&gt; &#xA;&lt;p&gt;It is also possible to flash it via the web tools which might be more convenient and is platform independent.&lt;/p&gt; &#xA;&lt;h2&gt;First configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After the initial flashing of the microcontroller, an Access Point called &#34;OpenDTU-*&#34; is opened. The default password is &#34;openDTU42&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Use a web browser to open the address &lt;a href=&#34;http://192.168.4.1&#34;&gt;http://192.168.4.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Navigate to Settings --&amp;gt; Network Settings and enter your WiFi credentials. The username to access the config menu is &#34;admin&#34; and the password the same as for accessing the Access Point (default: &#34;openDTU42&#34;).&lt;/li&gt; &#xA; &lt;li&gt;OpenDTU then simultaneously connects to your WiFi AP with these credentials. Navigate to Info --&amp;gt; Network and look into section &#34;Network Interface (Station)&#34; for the IP address received via DHCP.&lt;/li&gt; &#xA; &lt;li&gt;If your WiFi AP uses an allow-list for MAC-addresses, please be aware that the ESP32 has two different MAC addresses for its AP and client modes, they are also listed at Info --&amp;gt; Network.&lt;/li&gt; &#xA; &lt;li&gt;When OpenDTU is connected to a configured WiFI AP, the &#34;OpenDTU-*&#34; Access Point is closed after 3 minutes.&lt;/li&gt; &#xA; &lt;li&gt;OpenDTU needs access to a working NTP server to get the current date &amp;amp; time. Both are sent to the inverter with each request. Default NTP server is pool.ntp.org. If your network has different requirements please change accordingly (Settings --&amp;gt; NTP Settings).&lt;/li&gt; &#xA; &lt;li&gt;Add your inverter in the inverter settings (Settings --&amp;gt; Inverter Settings)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Flashing an Update using &#34;Over The Air&#34; OTA Update&lt;/h2&gt; &#xA;&lt;p&gt;Once you have your OpenDTU running and connected to WLAN, you can do further updates through the web interface. Navigate to Settings --&amp;gt; Firmware upgrade and press the browse button. Select the firmware file from your local computer.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll find the firmware file (after a successful build process) under &lt;code&gt;.pio/build/generic/firmware.bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you downloaded a precompiled zip archive, unpack it and choose &lt;code&gt;opendtu-generic.bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After the successful upload, the OpenDTU immediately restarts into the new firmware.&lt;/p&gt; &#xA;&lt;h2&gt;MQTT Topic Documentation&lt;/h2&gt; &#xA;&lt;p&gt;A documentation of all available MQTT Topics can be found here: &lt;a href=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/MQTT_Topics.md&#34;&gt;MQTT Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Web API Documentation&lt;/h2&gt; &#xA;&lt;p&gt;A documentation of the Web API can be found here: &lt;a href=&#34;https://raw.githubusercontent.com/tbnobody/OpenDTU/master/docs/Web-API.md&#34;&gt;Web-API Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Available cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thingiverse.com/thing:5435911&#34;&gt;https://www.thingiverse.com/thing:5435911&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.printables.com/model/293003-sol-opendtu-esp32-nrf24l01-case&#34;&gt;https://www.printables.com/model/293003-sol-opendtu-esp32-nrf24l01-case&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thingiverse.com/thing:5661780&#34;&gt;https://www.thingiverse.com/thing:5661780&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thingiverse.com/thing:5632374&#34;&gt;https://www.thingiverse.com/thing:5632374&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thingiverse.com/thing:5852233&#34;&gt;https://www.thingiverse.com/thing:5852233&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.printables.com/model/377994-opendtu-pcb-box-for-the-wider-board&#34;&gt;https://www.printables.com/model/377994-opendtu-pcb-box-for-the-wider-board&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.printables.com/model/376840-esp32-ahoy-opendtu-pcb-housing&#34;&gt;https://www.printables.com/model/376840-esp32-ahoy-opendtu-pcb-housing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Available layouts for printed circuit boards&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dokuhn/openDTU-BreakoutBoard&#34;&gt;BreakoutBoard - sample printed circuit board for OpenDTU and Ahoy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SteffMUC/openDTU_wDisplay2&#34;&gt;Board for OpenDTU with Display&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/turrican944/OpenDTU-PCB&#34;&gt;OpenDTU PCB mit Display&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/plewka/ESP-Solar_OpenDTU&#34;&gt;PCB for OpenDTU in Cable Branchbox&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Building the WebApp&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The WebApp can be build using yarn&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;$ cd webapp&#xA;$ yarn install&#xA;$ yarn build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The updated output is placed in the &#39;webapp_dist&#39; directory&lt;/li&gt; &#xA;   &lt;li&gt;It is only necessary to build the webapp when you made changes to it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Building the microcontroller firmware&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Visual Studio Code with the PlatformIO Extension is required for building&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First: When there is no light on the solar panels, the inverter completely turns off and does not answer to OpenDTU! So if you assembled your OpenDTU in the evening, wait until tomorrow.&lt;/li&gt; &#xA; &lt;li&gt;When there is no data received from the inverter(s) - try to reduce the distance between the openDTU and the inverter (e.g. move it to the window towards the roof)&lt;/li&gt; &#xA; &lt;li&gt;Under Settings -&amp;gt; DTU Settings you can increase the transmit power &#34;PA level&#34;. Default is &#34;minimum&#34;.&lt;/li&gt; &#xA; &lt;li&gt;The NRF24L01+ needs relatively much current. With bad power supply (and especially bad cables!) a 10 µF capacitor soldered directly to the NRF24L01+ board connector brings more stability (pin 1+2 are the power supply). Note the polarity of the capacitor…&lt;/li&gt; &#xA; &lt;li&gt;You can try to use an USB power supply with 1 A or more instead of connecting the ESP32 to the computer.&lt;/li&gt; &#xA; &lt;li&gt;Try a different USB cable. Once again, a stable power source is important. Some USB cables are made of much plastic and very little copper inside.&lt;/li&gt; &#xA; &lt;li&gt;Double check that you have a radio module NRF24L01+ with a plus sign at the end. NRF24L01 module without the plus are not compatible with this project.&lt;/li&gt; &#xA; &lt;li&gt;There is no possibility of auto-discovering the inverters. Double check you have entered the serial numbers of the inverters correctly.&lt;/li&gt; &#xA; &lt;li&gt;OpenDTU needs access to a working NTP server to get the current date &amp;amp; time.&lt;/li&gt; &#xA; &lt;li&gt;If your problem persists, check the &lt;a href=&#34;https://github.com/tbnobody/OpenDTU/issues&#34;&gt;Issues on Github&lt;/a&gt;. Please inspect not only the open issues, also the closed issues contain useful information.&lt;/li&gt; &#xA; &lt;li&gt;Another source of information are the &lt;a href=&#34;https://github.com/tbnobody/OpenDTU/discussions/&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;When flashing with VSCode Plattform.IO fails and also with ESPRESSIF tool a demo bin file cannot be flashed to the ESP32 with error message &#34;A fatal error occurred: MD5 of file does not match data in flash!&#34; than un-wire/unconnect ESP32 from the NRF24L01+ board. Try to flash again and rewire afterwards.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grindylow/ahoy&#34;&gt;Ahoy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ziyatoe/DTUsimMI1x00-Hoymiles&#34;&gt;DTU Simulator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/helgeerbe/OpenDTU_VeDirect&#34;&gt;OpenDTU extended to talk to Victrons MPPT battery chargers (Ve.Direct)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>AirenSoft/OvenMediaEngine</title>
    <updated>2023-04-01T02:08:52Z</updated>
    <id>tag:github.com,2023-04-01:/AirenSoft/OvenMediaEngine</id>
    <link href="https://github.com/AirenSoft/OvenMediaEngine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OvenMediaEngine (OME) is a Sub-Second Latency Live Streaming Server with Large-Scale and High-Definition. #WebRTC #LLHLS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OvenMediaEngine&lt;/h1&gt; &#xA;&lt;h2&gt;What is OvenMediaEngine?&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AirenSoft/OvenMediaEngine/master/dist/OME_LLHLS_220610.svg?sanitize=true&#34; style=&#34;max-width: 100%; height: auto;&#34;&gt; &#xA;&lt;p&gt;OvenMediaEngine (OME) is a Sub-Second Latency Streaming Server that can stream Large-scale and High-definition live streams over Low Latency HLS (LLHLS) and WebRTC to hundreds of thousands of viewers.&lt;/p&gt; &#xA;&lt;p&gt;OME can ingest live streams over WebRTC, SRT, RTMP, RTSP, and MPEG2-TS protocols, encode them to ABR with the embedded live transcoder, and stream them to viewers over LLHLS and WebRTC.&lt;/p&gt; &#xA;&lt;p&gt;With OvenMediaEngine, you can build your powerful and sub-second latency media service very easily.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AirenSoft/OvenMediaEngine/master/dist/05_OvenSpace_230214.png&#34; style=&#34;max-width: 100%; height: auto;&#34;&gt; &#xA;&lt;p&gt;OvenSpace is a sub-second latency streaming demo service using &lt;a href=&#34;https://github.com/AirenSoft/OvenMediaEngine&#34;&gt;OvenMediaEngine&lt;/a&gt;, &lt;a href=&#34;https://github.com/AirenSoft/OvenPlayer&#34;&gt;OvenPlayer&lt;/a&gt; and &lt;a href=&#34;https://github.com/AirenSoft/OvenLiveKit-Web&#34;&gt;OvenLiveKit&lt;/a&gt;. You can experience OvenMediaEngine in the &lt;strong&gt;&lt;a href=&#34;https://space.ovenplayer.com/&#34;&gt;OvenSpace Demo&lt;/a&gt;&lt;/strong&gt; and see examples of applying in &lt;a href=&#34;https://github.com/AirenSoft/OvenSpace&#34;&gt;OvenSpace Repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ingest &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Push: WebRTC, WHIP, SRT, RTMP, MPEG-2 TS&lt;/li&gt; &#xA;   &lt;li&gt;Pull: RTSP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Adaptive Bitrate Streaming (ABR) for LLHLS and WebRTC&lt;/li&gt; &#xA; &lt;li&gt;Low Latency Streaming using LLHLS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DVR (Live Rewind)&lt;/li&gt; &#xA;   &lt;li&gt;Dump for VoD&lt;/li&gt; &#xA;   &lt;li&gt;ID3v2 timed metadata&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Sub-Second Latency Streaming using WebRTC &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;WebRTC over TCP (With Embedded TURN Server)&lt;/li&gt; &#xA;   &lt;li&gt;Embedded WebRTC Signalling Server (WebSocket based)&lt;/li&gt; &#xA;   &lt;li&gt;Retransmission with NACK&lt;/li&gt; &#xA;   &lt;li&gt;ULPFEC (Uneven Level Protection Forward Error Correction) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;i&gt;VP8, H.264&lt;/i&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;In-band FEC (Forward Error Correction) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;i&gt;Opus&lt;/i&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Embedded Live Transcoder &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Video: VP8, H.264, Pass-through&lt;/li&gt; &#xA;   &lt;li&gt;Audio: Opus, AAC, Pass-through&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clustering (Origin-Edge Structure)&lt;/li&gt; &#xA; &lt;li&gt;Monitoring&lt;/li&gt; &#xA; &lt;li&gt;Access Control &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Admission Webhooks&lt;/li&gt; &#xA;   &lt;li&gt;Signed Policy&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;File Recording&lt;/li&gt; &#xA; &lt;li&gt;RTMP Push Publishing (Re-streaming)&lt;/li&gt; &#xA; &lt;li&gt;Thumbnail&lt;/li&gt; &#xA; &lt;li&gt;REST API&lt;/li&gt; &#xA; &lt;li&gt;Experiment &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;P2P Traffic Distribution (Only WebRTC)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;We have tested OvenMediaEngine on the platforms listed below. Although we have tested OvenMediaEngine on the platforms listed below, it may work with other Linux packages as well:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/airensoft/ovenmediaengine&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 18+&lt;/li&gt; &#xA; &lt;li&gt;CentOS 7+&lt;/li&gt; &#xA; &lt;li&gt;Fedora 28+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://airensoft.gitbook.io/ovenmediaengine/quick-start&#34;&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://airensoft.gitbook.io/ovenmediaengine/&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --name ome -d -e OME_HOST_IP=Your.HOST.IP.Address \&#xA;-p 1935:1935 -p 9999:9999/udp -p 9000:9000 -p 3333:3333 -p 3478:3478 -p 10000-10009:10000-10009/udp \&#xA;airensoft/ovenmediaengine:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also store the configuration files on your host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --name ome -d -e OME_HOST_IP=Your.HOST.IP.Address \&#xA;-p 1935:1935 -p 9999:9999/udp -p 9000:9000 -p 3333:3333 -p 3478:3478 -p 10000-10009:10000-10009/udp \&#xA;-v ome-origin-conf:/opt/ovenmediaengine/bin/origin_conf \&#xA;-v ome-edge-conf:/opt/ovenmediaengine/bin/edge_conf \&#xA;airensoft/ovenmediaengine:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The configuration files are now accessible under &lt;code&gt;/var/lib/docker/volumes/&amp;lt;volume_name&amp;gt;/_data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Following the above example, you will find them under &lt;code&gt;/var/lib/docker/volumes/ome-origin-conf/_data&lt;/code&gt; and &lt;code&gt;/var/lib/docker/volumes/ome-edge-conf/_data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to put them in a different location, the easiest way is to create a link:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ln -s /var/lib/docker/volumes/ome-origin-conf/_data/ /my/new/path/to/ome-origin-conf \&#xA;&amp;amp;&amp;amp; ln -s /var/lib/docker/volumes/ome-edge-conf/_data/ /my/new/path/to/ome-edge-conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://airensoft.gitbook.io/ovenmediaengine/getting-started&#34;&gt;Getting Started&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;WebRTC Live Encoder for Testing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://demo.ovenplayer.com/demo_input.html&#34;&gt;https://demo.ovenplayer.com/demo_input.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Player for Testing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Without TLS: &lt;a href=&#34;http://demo.ovenplayer.com&#34;&gt;http://demo.ovenplayer.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;With TLS: &lt;a href=&#34;https://demo.ovenplayer.com&#34;&gt;https://demo.ovenplayer.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;Thank you so much for being so interested in OvenMediaEngine.&lt;/p&gt; &#xA;&lt;p&gt;We need your help to keep and develop our open-source project, and we want to tell you that you can contribute in many ways. For more information on how to contribute, please see our &lt;a href=&#34;https://raw.githubusercontent.com/AirenSoft/OvenMediaEngine/master/CONTRIBUTING.md&#34;&gt;Guidelines&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AirenSoft/OvenMediaEngine/master/CODE_OF_CONDUCT.md&#34;&gt;Rules&lt;/a&gt;, and &lt;a href=&#34;https://www.ovenmediaengine.com/contribute&#34;&gt;Contribute&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AirenSoft/OvenMediaEngine/raw/master/CONTRIBUTING.md#finding-bugs&#34;&gt;Finding Bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AirenSoft/OvenMediaEngine/raw/master/CONTRIBUTING.md#reviewing-code&#34;&gt;Reviewing Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AirenSoft/OvenMediaEngine/raw/master/CONTRIBUTING.md#sharing-ideas&#34;&gt;Sharing Ideas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AirenSoft/OvenMediaEngine/raw/master/CONTRIBUTING.md#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AirenSoft/OvenMediaEngine/raw/master/CONTRIBUTING.md#improving-documentation&#34;&gt;Improving Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AirenSoft/OvenMediaEngine/raw/master/CONTRIBUTING.md#spreading--use-cases&#34;&gt;Spreading &amp;amp; Use Cases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AirenSoft/OvenMediaEngine/raw/master/CONTRIBUTING.md#recurring-donations&#34;&gt;Recurring Donations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We always hope that OvenMediaEngine will give you good inspiration.&lt;/p&gt; &#xA;&lt;h2&gt;For more information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://airensoft.com&#34;&gt;AirenSoft Website&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;About OvenMediaEngine, OvenMediaEngine Enterprise, OvenVideo, AirenBlog and more&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://airensoft.gitbook.io/ovenmediaengine/&#34;&gt;OvenMediaEngine Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;User guide for OvenMediaEngine Configuration, ABR, Clustering, and more&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/airensoft/ovenmediaengine&#34;&gt;OvenMediaEngine Docker Hub&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install and use OvenMeidaEngine easily using Docker&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AirenSoft/OvenPlayer&#34;&gt;OvenPlayer GitHub&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;JavaScript-based Player with LLHLS and WebRTC&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://airensoft.gitbook.io/ovenplayer&#34;&gt;OvenPlayer Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;User guide for OvenPlayer UI Customize, API Reference, Examples, and more&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AirenSoft/OvenLiveKit-Web&#34;&gt;OvenLiveKit&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;JavaScript-based Live Streaming Encoder for OvenMediaEngine&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://space.ovenplayer.com/&#34;&gt;OvenSpace Demo&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sub-Second Latency Streaming Demo Service&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OvenMediaEngine is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/AirenSoft/OvenMediaEngine/master/LICENSE&#34;&gt;AGPL-3.0-only&lt;/a&gt;. However, if you need another license, please feel free to email us at &lt;a href=&#34;mailto:contact@airensoft.com&#34;&gt;contact@airensoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About AirenSoft&lt;/h2&gt; &#xA;&lt;p&gt;AirenSoft aims to make it easier for you to build a stable broadcasting/streaming service with Sub-Second Latency. Therefore, we will continue developing and providing the most optimized tools for smooth Sub-Second Latency Streaming.&lt;/p&gt; &#xA;&lt;p&gt;Would you please click on each link below for details:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AirenSoft/OvenLiveKit-Web&#34;&gt;&#34;JavaScript-based Live Streaming Encoder&#34; &lt;strong&gt;OvenLiveKit&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AirenSoft/OvenMediaEngine&#34;&gt;&#34;Sub-Second Latency Streaming Server with LLHLS and WebRTC&#34; &lt;strong&gt;OvenMediaEngine&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AirenSoft/OvenPlayer&#34;&gt;&#34;JavaScript-based Player with LLHLS and WebRTC&#34; &lt;strong&gt;OvenPlayer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hku-mars/FAST_LIO</title>
    <updated>2023-04-01T02:08:52Z</updated>
    <id>tag:github.com,2023-04-01:/hku-mars/FAST_LIO</id>
    <link href="https://github.com/hku-mars/FAST_LIO" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A computationally efficient and robust LiDAR-inertial odometry (LIO) package&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Related Works and Extended Application&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;SLAM:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hku-mars/ikd-Tree&#34;&gt;ikd-Tree&lt;/a&gt;: A state-of-art dynamic KD-Tree for 3D kNN search.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hku-mars/r2live&#34;&gt;R2LIVE&lt;/a&gt;: A high-precision LiDAR-inertial-Vision fusion work using FAST-LIO as LiDAR-inertial front-end.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hku-mars/LiDAR_IMU_Init&#34;&gt;LI_Init&lt;/a&gt;: A robust, real-time LiDAR-IMU extrinsic initialization and synchronization package..&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HViktorTsoi/FAST_LIO_LOCALIZATION&#34;&gt;FAST-LIO-LOCALIZATION&lt;/a&gt;: The integration of FAST-LIO with &lt;strong&gt;Re-localization&lt;/strong&gt; function module.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Control and Plan:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hku-mars/IKFoM&#34;&gt;IKFOM&lt;/a&gt;: A Toolbox for fast and high-precision on-manifold Kalman filter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hku-mars/dyn_small_obs_avoidance&#34;&gt;UAV Avoiding Dynamic Obstacles&lt;/a&gt;: One of the implementation of FAST-LIO in robot&#39;s planning.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wikgrQbE6Cs&#34;&gt;UGV Demo&lt;/a&gt;: Model Predictive Control for Trajectory Tracking on Differentiable Manifolds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2202.12177&#34;&gt;Bubble Planner&lt;/a&gt;: Planning High-speed Smooth Quadrotor Trajectories using Receding Corridors.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- 10. [**FAST-LIVO**](https://github.com/hku-mars/FAST-LIVO): Fast and Tightly-coupled Sparse-Direct LiDAR-Inertial-Visual Odometry. --&gt; &#xA;&lt;h2&gt;FAST-LIO&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;FAST-LIO&lt;/strong&gt; (Fast LiDAR-Inertial Odometry) is a computationally efficient and robust LiDAR-inertial odometry package. It fuses LiDAR feature points with IMU data using a tightly-coupled iterated extended Kalman filter to allow robust navigation in fast-motion, noisy or cluttered environments where degeneration occurs. Our package address many key issues:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fast iterated Kalman filter for odometry optimization;&lt;/li&gt; &#xA; &lt;li&gt;Automaticaly initialized at most steady environments;&lt;/li&gt; &#xA; &lt;li&gt;Parallel KD-Tree Search to decrease the computation;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;FAST-LIO 2.0 (2021-07-05 Update)&lt;/h2&gt; &#xA;&lt;!-- ![image](doc/real_experiment2.gif) --&gt; &#xA;&lt;!-- [![Watch the video](doc/real_exp_2.png)](https://youtu.be/2OvjGnxszf8) --&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/real_experiment2.gif&#34; width=&#34;49.6%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/ulhkwh_fastlio.gif&#34; width=&#34;49.6%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Related video:&lt;/strong&gt; &lt;a href=&#34;https://youtu.be/2OvjGnxszf8&#34;&gt;FAST-LIO2&lt;/a&gt;, &lt;a href=&#34;https://youtu.be/iYCY6T79oNU&#34;&gt;FAST-LIO1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pipeline:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/overview_fastlio2.svg?sanitize=true&#34; width=&#34;99%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;New Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Incremental mapping using &lt;a href=&#34;https://github.com/hku-mars/ikd-Tree&#34;&gt;ikd-Tree&lt;/a&gt;, achieve faster speed and over 100Hz LiDAR rate.&lt;/li&gt; &#xA; &lt;li&gt;Direct odometry (scan to map) on Raw LiDAR points (feature extraction can be disabled), achieving better accuracy.&lt;/li&gt; &#xA; &lt;li&gt;Since no requirements for feature extraction, FAST-LIO2 can support many types of LiDAR including spinning (Velodyne, Ouster) and solid-state (Livox Avia, Horizon, MID-70) LiDARs, and can be easily extended to support more LiDARs.&lt;/li&gt; &#xA; &lt;li&gt;Support external IMU.&lt;/li&gt; &#xA; &lt;li&gt;Support ARM-based platforms including Khadas VIM3, Nivida TX2, Raspberry Pi 4B(8G RAM).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Related papers&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/Fast_LIO_2.pdf&#34;&gt;FAST-LIO2: Fast Direct LiDAR-inertial Odometry&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2010.08196&#34;&gt;FAST-LIO: A Fast, Robust LiDAR-inertial Odometry Package by Tightly-Coupled Iterated Kalman Filter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contributors&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/XW-HKU&#34;&gt;Wei Xu 徐威&lt;/a&gt;，&lt;a href=&#34;https://github.com/Ecstasy-EC&#34;&gt;Yixi Cai 蔡逸熙&lt;/a&gt;，&lt;a href=&#34;https://github.com/Joanna-HE&#34;&gt;Dongjiao He 贺东娇&lt;/a&gt;，&lt;a href=&#34;https://github.com/zfc-zfc&#34;&gt;Fangcheng Zhu 朱方程&lt;/a&gt;，&lt;a href=&#34;https://github.com/ziv-lin&#34;&gt;Jiarong Lin 林家荣&lt;/a&gt;，&lt;a href=&#34;https://github.com/Zale-Liu&#34;&gt;Zheng Liu 刘政&lt;/a&gt;, &lt;a href=&#34;https://github.com/borongyuan&#34;&gt;Borong Yuan&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- &lt;div align=&#34;center&#34;&gt;&#xA;    &lt;img src=&#34;doc/results/HKU_HW.png&#34; width = 49% &gt;&#xA;    &lt;img src=&#34;doc/results/HKU_MB_001.png&#34; width = 49% &gt;&#xA;&lt;/div&gt; --&gt; &#xA;&lt;h2&gt;1. Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;1.1 &lt;strong&gt;Ubuntu&lt;/strong&gt; and &lt;strong&gt;ROS&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ubuntu &amp;gt;= 16.04&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;Ubuntu 18.04 or higher&lt;/strong&gt;, the &lt;strong&gt;default&lt;/strong&gt; PCL and Eigen is enough for FAST-LIO to work normally.&lt;/p&gt; &#xA;&lt;p&gt;ROS &amp;gt;= Melodic. &lt;a href=&#34;http://wiki.ros.org/ROS/Installation&#34;&gt;ROS Installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;1.2. &lt;strong&gt;PCL &amp;amp;&amp;amp; Eigen&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;PCL &amp;gt;= 1.8, Follow &lt;a href=&#34;http://www.pointclouds.org/downloads/linux.html&#34;&gt;PCL Installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Eigen &amp;gt;= 3.3.4, Follow &lt;a href=&#34;http://eigen.tuxfamily.org/index.php?title=Main_Page&#34;&gt;Eigen Installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;1.3. &lt;strong&gt;livox_ros_driver&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://github.com/Livox-SDK/livox_ros_driver&#34;&gt;livox_ros_driver Installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Remarks:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Since the FAST-LIO must support Livox serials LiDAR firstly, so the &lt;strong&gt;livox_ros_driver&lt;/strong&gt; must be installed and &lt;strong&gt;sourced&lt;/strong&gt; before run any FAST-LIO luanch file.&lt;/li&gt; &#xA; &lt;li&gt;How to source? The easiest way is add the line &lt;code&gt;source $Licox_ros_driver_dir$/devel/setup.bash&lt;/code&gt; to the end of file &lt;code&gt;~/.bashrc&lt;/code&gt;, where &lt;code&gt;$Licox_ros_driver_dir$&lt;/code&gt; is the directory of the livox ros driver workspace (should be the &lt;code&gt;ws_livox&lt;/code&gt; directory if you completely followed the livox official document).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2. Build&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository and catkin_make:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    cd ~/$A_ROS_DIR$/src&#xA;    git clone https://github.com/hku-mars/FAST_LIO.git&#xA;    cd FAST_LIO&#xA;    git submodule update --init&#xA;    cd ../..&#xA;    catkin_make&#xA;    source devel/setup.bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remember to source the livox_ros_driver before build (follow 1.3 &lt;strong&gt;livox_ros_driver&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;If you want to use a custom build of PCL, add the following line to ~/.bashrc &lt;code&gt;export PCL_ROOT={CUSTOM_PCL_PATH}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3. Directly run&lt;/h2&gt; &#xA;&lt;p&gt;Noted:&lt;/p&gt; &#xA;&lt;p&gt;A. Please make sure the IMU and LiDAR are &lt;strong&gt;Synchronized&lt;/strong&gt;, that&#39;s important.&lt;/p&gt; &#xA;&lt;p&gt;B. The warning message &#34;Failed to find match for field &#39;time&#39;.&#34; means the timestamps of each LiDAR points are missed in the rosbag file. That is important for the forward propagation and backwark propagation.&lt;/p&gt; &#xA;&lt;p&gt;C. We recommend to set the &lt;strong&gt;extrinsic_est_en&lt;/strong&gt; to false if the extrinsic is give. As for the extrinsic initiallization, please refer to our recent work: &lt;a href=&#34;https://arxiv.org/abs/2202.11006&#34;&gt;&lt;strong&gt;Robust and Online LiDAR-inertial Initialization&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;3.1 For Avia&lt;/h3&gt; &#xA;&lt;p&gt;Connect to your PC to Livox Avia LiDAR by following &lt;a href=&#34;https://github.com/Livox-SDK/livox_ros_driver&#34;&gt;Livox-ros-driver installation&lt;/a&gt;, then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    cd ~/$FAST_LIO_ROS_DIR$&#xA;    source devel/setup.bash&#xA;    roslaunch fast_lio mapping_avia.launch&#xA;    roslaunch livox_ros_driver livox_lidar_msg.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For livox serials, FAST-LIO only support the data collected by the &lt;code&gt;livox_lidar_msg.launch&lt;/code&gt; since only its &lt;code&gt;livox_ros_driver/CustomMsg&lt;/code&gt; data structure produces the timestamp of each LiDAR point which is very important for the motion undistortion. &lt;code&gt;livox_lidar.launch&lt;/code&gt; can not produce it right now.&lt;/li&gt; &#xA; &lt;li&gt;If you want to change the frame rate, please modify the &lt;strong&gt;publish_freq&lt;/strong&gt; parameter in the &lt;a href=&#34;https://github.com/Livox-SDK/livox_ros_driver/raw/master/livox_ros_driver/launch/livox_lidar_msg.launch&#34;&gt;livox_lidar_msg.launch&lt;/a&gt; of &lt;a href=&#34;https://github.com/Livox-SDK/livox_ros_driver&#34;&gt;Livox-ros-driver&lt;/a&gt; before make the livox_ros_driver pakage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3.2 For Livox serials with external IMU&lt;/h3&gt; &#xA;&lt;p&gt;mapping_avia.launch theratically supports mid-70, mid-40 or other livox serial LiDAR, but need to setup some parameters befor run:&lt;/p&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;config/avia.yaml&lt;/code&gt; to set the below parameters:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;LiDAR point cloud topic name: &lt;code&gt;lid_topic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;IMU topic name: &lt;code&gt;imu_topic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Translational extrinsic: &lt;code&gt;extrinsic_T&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rotational extrinsic: &lt;code&gt;extrinsic_R&lt;/code&gt; (only support rotation matrix)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The extrinsic parameters in FAST-LIO is defined as the LiDAR&#39;s pose (position and rotation matrix) in IMU body frame (i.e. the IMU is the base frame). They can be found in the official manual.&lt;/li&gt; &#xA; &lt;li&gt;FAST-LIO produces a very simple software time sync for livox LiDAR, set parameter &lt;code&gt;time_sync_en&lt;/code&gt; to ture to turn on. But turn on &lt;strong&gt;ONLY IF external time synchronization is really not possible&lt;/strong&gt;, since the software time sync cannot make sure accuracy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3.3 For Velodyne or Ouster (Velodyne as an example)&lt;/h3&gt; &#xA;&lt;p&gt;Step A: Setup before run&lt;/p&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;config/velodyne.yaml&lt;/code&gt; to set the below parameters:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;LiDAR point cloud topic name: &lt;code&gt;lid_topic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;IMU topic name: &lt;code&gt;imu_topic&lt;/code&gt; (both internal and external, 6-aixes or 9-axies are fine)&lt;/li&gt; &#xA; &lt;li&gt;Set the parameter &lt;code&gt;timestamp_unit&lt;/code&gt; based on the unit of &lt;strong&gt;time&lt;/strong&gt; (Velodyne) or &lt;strong&gt;t&lt;/strong&gt; (Ouster) field in PoindCloud2 rostopic&lt;/li&gt; &#xA; &lt;li&gt;Line number (we tested 16, 32 and 64 line, but not tested 128 or above): &lt;code&gt;scan_line&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Translational extrinsic: &lt;code&gt;extrinsic_T&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rotational extrinsic: &lt;code&gt;extrinsic_R&lt;/code&gt; (only support rotation matrix)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The extrinsic parameters in FAST-LIO is defined as the LiDAR&#39;s pose (position and rotation matrix) in IMU body frame (i.e. the IMU is the base frame).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Step B: Run below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    cd ~/$FAST_LIO_ROS_DIR$&#xA;    source devel/setup.bash&#xA;    roslaunch fast_lio mapping_velodyne.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Step C: Run LiDAR&#39;s ros driver or play rosbag.&lt;/p&gt; &#xA;&lt;h3&gt;3.4 PCD file save&lt;/h3&gt; &#xA;&lt;p&gt;Set &lt;code&gt;pcd_save_enable&lt;/code&gt; in launchfile to &lt;code&gt;1&lt;/code&gt;. All the scans (in global frame) will be accumulated and saved to the file &lt;code&gt;FAST_LIO/PCD/scans.pcd&lt;/code&gt; after the FAST-LIO is terminated. &lt;code&gt;pcl_viewer scans.pcd&lt;/code&gt; can visualize the point clouds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tips for pcl_viewer:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;change what to visualize/color by pressing keyboard 1,2,3,4,5 when pcl_viewer is running.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;    1 is all random&#xA;    2 is X values&#xA;    3 is Y values&#xA;    4 is Z values&#xA;    5 is intensity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4. Rosbag Example&lt;/h2&gt; &#xA;&lt;h3&gt;4.1 Livox Avia Rosbag&lt;/h3&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/results/HKU_LG_Indoor.png&#34; width=&#34;47%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/results/HKU_MB_002.png&#34; width=&#34;51%&#34;&gt; &#xA; &lt;p&gt;Files: Can be downloaded from &lt;a href=&#34;https://drive.google.com/drive/folders/1YL5MQVYgAM8oAWUm7e3OGXZBPKkanmY1?usp=sharing&#34;&gt;google drive&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;roslaunch fast_lio mapping_avia.launch&#xA;rosbag play YOUR_DOWNLOADED.bag&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;4.2 Velodyne HDL-32E Rosbag&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;NCLT Dataset&lt;/strong&gt;: Original bin file can be found &lt;a href=&#34;http://robots.engin.umich.edu/nclt/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;We produce &lt;a href=&#34;https://drive.google.com/drive/folders/1VBK5idI1oyW0GC_I_Hxh63aqam3nocNK?usp=sharing&#34;&gt;Rosbag Files&lt;/a&gt; and &lt;a href=&#34;https://drive.google.com/file/d/1leh7DxbHx29DyS1NJkvEfeNJoccxH7XM/view&#34;&gt;a python script&lt;/a&gt; to generate Rosbag files: &lt;code&gt;python3 sensordata_to_rosbag_fastlio.py bin_file_dir bag_name.bag&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;roslaunch fast_lio mapping_velodyne.launch&#xA;rosbag play YOUR_DOWNLOADED.bag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h2&gt;5.Implementation on UAV&lt;/h2&gt; &#xA; &lt;p&gt;In order to validate the robustness and computational efficiency of FAST-LIO in actual mobile robots, we build a small-scale quadrotor which can carry a Livox Avia LiDAR with 70 degree FoV and a DJI Manifold 2-C onboard computer with a 1.8 GHz Intel i7-8550U CPU and 8 G RAM, as shown in below.&lt;/p&gt; &#xA; &lt;p&gt;The main structure of this UAV is 3d printed (Aluminum or PLA), the .stl file will be open-sourced in the future.&lt;/p&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/uav01.jpg&#34; width=&#34;40.5%&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/hku-mars/FAST_LIO/main/doc/uav_system.png&#34; width=&#34;57%&#34;&gt; &#xA; &lt;/div&gt; &#xA; &lt;h2&gt;6.Acknowledgments&lt;/h2&gt; &#xA; &lt;p&gt;Thanks for LOAM(J. Zhang and S. Singh. LOAM: Lidar Odometry and Mapping in Real-time), &lt;a href=&#34;https://github.com/Livox-SDK/livox_mapping&#34;&gt;Livox_Mapping&lt;/a&gt;, &lt;a href=&#34;https://github.com/ChaoqinRobotics/LINS---LiDAR-inertial-SLAM&#34;&gt;LINS&lt;/a&gt; and &lt;a href=&#34;https://github.com/hku-mars/loam_livox&#34;&gt;Loam_Livox&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>