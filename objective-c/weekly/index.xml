<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-30T02:02:12Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>520coding/confuse</title>
    <updated>2023-04-30T02:02:12Z</updated>
    <id>tag:github.com,2023-04-30:/520coding/confuse</id>
    <link href="https://github.com/520coding/confuse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS混淆加固差异化翻新加密工具，模拟人工手动混淆，识别上下文 ，支持继承链、类型识别、方法多参等复杂高级混淆。source-to-source obfuscation of iOS projects，Xcode&#39;s refactor-&gt;rename. 告别插入毫无关联的垃圾代码、弃用无脑单词随机拼接替换，模拟正常开发，一款最好的混淆最彻底的Mac App Tools。支持OC(Objc、Objective-C)、C、C++(Cocos2d-x、Cocos2dx和Lua游戏开发)、Swift、C#(Unity)混淆，可用于ios马甲包游戏SDK混淆，减少账号调查过机审上架过包过审4.3、2.3.1、2.1&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&#34;tMJSz&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2023/png/213807/1682377811568-62430f6e-2085-4044-b2c0-f372851ef03c.png#averageHue=%23eac4c2&amp;amp;clientId=u7a05b3c8-bd4d-4&amp;amp;from=paste&amp;amp;height=50&amp;amp;id=u3b8a15b3&amp;amp;name=china-2.png&amp;amp;originHeight=100&amp;amp;originWidth=100&amp;amp;originalType=binary&amp;amp;ratio=2&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=10497&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=u04a94635-1d8b-40b7-98eb-efe61c6e631&amp;amp;title=&amp;amp;width=50&#34; alt=&#34;china-2.png&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a name=&#34;beqYw&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/520coding/confuse/master/README_ZH.md&#34;&gt;中文&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a name=&#34;wNymF&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Preface&lt;/h1&gt; &#xA;&lt;p&gt;By chance, I ran into the iOS &lt;a href=&#34;https://www.yuque.com/docs/share/7e70244c-5dea-4035-b634-65cc082097da?translate=en&#34;&gt;vest bag business&lt;/a&gt; . I also used other tools on the market in the early stage, but the actual effect was not ideal. After a lot of practice, a full-featured &lt;a href=&#34;https://github.com/520coding/confuse&#34;&gt;obfuscation tool has been developed&lt;/a&gt; . The tool have been packaged into a Mac application which support multiple programming languages, such as OC, C++, Swift. More functions are still being packaged, so stay tuned. &lt;a name=&#34;ixxhF&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Prompt&lt;/h1&gt; &#xA;&lt;p&gt;In order to let everyone get started quickly and compare the effects of confusion, a new test project &lt;a href=&#34;https://github.com/520coding/confuse/tree/master/confuse_test&#34;&gt;&lt;strong&gt;confuse_test&lt;/strong&gt;&lt;/a&gt; was created. If you encounter problems during actual use, welcome to extend the test project. Please indicate the bug details in the project, and there will be rewards. &lt;a name=&#34;sbrhD&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Test engineering description:&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/520coding/confuse/tree/master/confuse_test&#34;&gt;confuse_test&lt;/a&gt;: Contains oc, c++, swift and some third-party use cases to quickly verify the overall effect&lt;br&gt; &lt;a href=&#34;https://github.com/520coding/confuse/tree/master/confuse_test_oc&#34;&gt;confuse_test_oc&lt;/a&gt;: only contains oc, which is convenient to verify the effect of each function&lt;br&gt; &lt;a href=&#34;https://github.com/520coding/confuse/tree/master/confuse_test_oc_fast&#34;&gt;confuse_test_oc_fast&lt;/a&gt;: only contains oc, which is convenient to quickly verify the effect of some functions&lt;br&gt; &lt;a href=&#34;https://github.com/520coding/confuse/tree/master/confuse_test_swift&#34;&gt;confuse_test_swift&lt;/a&gt;: only contains swift, the code comes from&lt;a href=&#34;https://docs.swift.org/swift-book/index.html#//apple_ref/doc/uid/TP40014097-CH3-ID0&#34;&gt; Apple&#39;s official example code&lt;/a&gt;, which is convenient to verify the effect of each function&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The source code can be modified arbitrarily to verify the actual effect. It is recommended to use different tools to confuse the above test projects or third-party open source library projects to compare the effects.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Instructions for the old version before 1.2.0: &amp;nbsp; Introduction: No grammar and compilation requirements are involved, but partial omissions or corrections may occur after confusion, please add to the blacklist filter by yourself. &amp;nbsp; Applicable projects: RN and other mixed projects that have not yet been adapted. &amp;nbsp; Conditions of use: temporarily unavailable, reopen later&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Yng3v&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Readme&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a name=&#34;6e674183b5d2f1af15baaa27bb7c93b2&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The essence of vest bag:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The first stage reduces the repetition rate. The initial version of my development is basically similar to other tools currently on the market, mainly the basic function of global substitution of class name, method name, and variable name.&lt;/li&gt; &#xA; &lt;li&gt;The second stage reduces the similarity (normal distribution of the same elements). At present, the tool has been greatly improved after optimization and continuous reconstruction, and it basically meets the requirements in this respect. For details, see the following function introduction. There are two sides to everything. The more powerful the function, the longer it will take to confuse. If your project is large, it is possible to confuse for a few hours. Please do not take offense, and continue to optimize. &lt;a name=&#34;fc8a03eacc987f4c5e94e6dc0086ea50&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Distinguish the pros and cons of tools&lt;/h3&gt; &#xA;&lt;p&gt;In fact, to identify the pros and cons of a tool, just look at the following points:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Can modify all attributes, methods, and all parameter names of methods&lt;/li&gt; &#xA; &lt;li&gt;Modify the name of the member (attribute, method), can it be distinguished by class, or a simple global replacement&lt;/li&gt; &#xA; &lt;li&gt;Can modify the method with block parameters, a typical network request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For example：+ (BOOL)post:(NSString *)url parameters:(NSDictionary *)parameters success:(HttpRequestResponse)success error:(HttpRequestResponse)error;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;The length of the changed name of the method name and attribute name (this tool can guarantee that 60~80% of the changed name is a common word, such as name, title, etc., and ensure that it does not conflict with the system.&lt;del&gt;Completely abandon the simple practice of relying on a large number of word libraries to ensure the uniqueness of naming&lt;/del&gt;, The real simulation of manual development)&lt;/li&gt; &#xA; &lt;li&gt;Modify the layout (Frame, Masonry, SDAutoLayout)&lt;/li&gt; &#xA; &lt;li&gt;Is the code inserted or &#34;garbage&#34; (this tool creates custom controls, encapsulates network requests, and uses MVC pattern association between files to completely bid farewell to &#34;garbage&#34; and mix the spurious with the genuine).&lt;/li&gt; &#xA; &lt;li&gt;Not to mention &#34;Who else...&#34; can identify macros, distinguish contextual content such as inheritance chains, and intelligently identify unmodifiable parts&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For example: + (void)init ;-(void)reloadData; basically can be changed, who else can do it? &#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Normal projects (or third-party libraries) basically do not report errors after obfuscation (except for some individual &lt;a href=&#34;https://www.yuque.com/docs/share/4a87ec96-80fe-4d25-873d-93cb428b3e15#iz0Zi&#34;&gt;improper grammars&lt;/a&gt; that cause confusion and report errors) &lt;a name=&#34;426215c094f184f34acdb12593ddb1fc&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;confuse is a &lt;a href=&#34;https://github.com/520coding/confuse&#34;&gt;confusion tool&lt;/a&gt; that simulates manual development as much as possible, imitates some functions of Xcode, and avoids machine core 4.3, 2.1, 2.3.1, account surveys, etc.&lt;br&gt;Goal: &lt;strong&gt;Simulate manually modify everything that can be changed&lt;/strong&gt; , which is why this tool only has a blacklist and no whitelist&lt;br&gt;The detailed functions are as follows (the basic functions are not described, see other tools for details): &lt;a name=&#34;82f2e3582d1466241460f1564b36b2a6&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Completed&lt;/h2&gt; &#xA;&lt;p&gt;The following functions are supported:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Blacklist (secondary) filtering, freely control the obfuscated content of each function, and adapt to almost all projects.&lt;/li&gt; &#xA; &lt;li&gt;Confusion percentage control, you can freely adjust according to the actual needs of your own project&lt;/li&gt; &#xA; &lt;li&gt;Smart noun substitution: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;When renaming, use the combination of related type existing information + similar semantics + type + some old vocabulary, and filter sensitive words. At the same time, users can also customize sensitive words.&lt;del&gt;Deprecate&#39;random word brainless combination&#39;&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Different types of members with the same name -&amp;gt; different types of members with different names, and different types of different name members -&amp;gt; different types of members with the same name, simulating normal development. Members refer to methods, attributes, and functions&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Intelligent identification of unmodifiable parts: Identifying systems, third parties, and Pod methods through types and inheritance chains is not a&#39;simple&#39; equality judgment, for example: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Class method: + (void)init; in principle, it can be changed anywhere&lt;/li&gt; &#xA;   &lt;li&gt;Object method:-(void)reloadData; can be changed if it is not a subclass of UITableView&lt;/li&gt; &#xA;   &lt;li&gt;Property: @property (readonly) NSUInteger length; it can be changed if it is not a subclass of NSString &lt;a name=&#34;7e02145ffab0f7184b0a6b92e79d9acd&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;General part&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[Project Configuration], as long as you select the project path, other default configurations will be automatically completed &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Global setting &#34;Ignore path&#34;, support regular, better use with blacklist&lt;/li&gt; &#xA;   &lt;li&gt;&#39; xcodeproj&#39; setting, for multiple xcodeproj projects and xx.xcodeproj is not in the project root directory&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Scheme&#39; is confused and consistent with Xcode&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Debug mode&#39;, It is convenient to view the comparison before and after the modification in the source file, and insert some special annotations to facilitate the location of the bug.&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Hybrid mode&#39;, this mode is used to process the swift call oc part of the mixed project, to ensure that the call relationship is maintained after confusion&lt;/li&gt; &#xA;   &lt;li&gt;&#39;proto&#39; setting, used for separate obfuscation of protobuf files&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Environmental inspection mode&#39; setting, which is convenient for correcting irregular codes in advance&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Reference project root path&#39; setting, read the word and UUID of the reference project&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Sensitive words&#39; filtering&lt;/li&gt; &#xA;   &lt;li&gt;&#39; &lt;strong&gt;Version iteration confusion&lt;/strong&gt; &#39;, iteratively update after review, continue to use the last time (you can also choose the version arbitrarily) to obfuscate the record incremental confusion, maintain version continuity, and simulate normal development. Advantages: Development and obfuscation are synchronized and independent . The main functions currently support update confusion&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Antivirus], &lt;a href=&#34;https://juejin.cn/post/6936535178118430733&#34;&gt;Xcode poisoning, XCSSET Malware&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&#39;UUID suffix&#39;, the virus will randomly insert UUID with a fixed suffix, regular scanning&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Script path feature&#39;, a suspicious script will be executed before virus compilation, support regular scanning&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Run script code flag&#39;, a suspicious script code will be executed before virus compilation, support regular scanning&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Resource replacement], specify the resource folder that needs to be replaced before obfuscation , and automatically replace the file with the same name, which is convenient and quick&lt;/li&gt; &#xA; &lt;li&gt;[Remove comment], identify single-line, multi-line comments&lt;/li&gt; &#xA; &lt;li&gt;[Modify picture], each sub-function can be run independently &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&#39;Custom path&#39;, convenient for debugging and targeted confusion&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Custom RGBA&#39;, &#39;RGBA Offset&#39;, specify random color modificatio&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Theme color&#39;, generate a unified color style&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Hue shift&#39;, &#39;saturation shift&#39;, &#39;lightness shift&#39;, detail adjustment&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Pixel Points&#39;, local pixel fine-tuning&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Quality adjustment&#39;, &#39;Size offset&#39;, overall control&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Mode modification&#39;, multiple modes support&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Modify Lottie], simulate the real Lottie file structure, modify and expand the source file, basically does not affect the actual effect&lt;/li&gt; &#xA; &lt;li&gt;[Modify file attributes], such as creation time, access time, modification time&lt;/li&gt; &#xA; &lt;li&gt;[Modify item], no need to delete Cocoapods &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Can be set to&#39;modify uuid&#39;, completely refurbished&lt;/li&gt; &#xA;   &lt;li&gt;Customize the name of the&#39;modify target&#39;, and the associated information will be updated synchronously&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Automatic source code backup &lt;a name=&#34;279a46203c9fe475b30ffab43dad6dba&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Objective-C&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[Rename picture], intelligent noun replacement , automatically correct the situation that the picture name and the xcassets folder name do not correspond &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;You can set the &#39;Run splicing name&#39;, which is used for the image name generated by splicing strings at runtime&lt;/li&gt; &#xA;   &lt;li&gt;You can set the &#39;rename associated string&#39; to modify the situation where the string is equal to the picture name&lt;/li&gt; &#xA;   &lt;li&gt;You can set the &#39;specified ignore length&#39;, the length of the picture name is less than the specified length is a dangerous name, it will be ignored&lt;/li&gt; &#xA;   &lt;li&gt;You can set &#39;ignore danger&#39;, which has the same name as the dictionary key, and it will be ignored&lt;/li&gt; &#xA;   &lt;li&gt;You can set &#39;associated files&#39;, other files containing picture names&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Insert picture], automatically insert pictures, and simulate manual calls according to context and type, and the number of inserts can be specified&lt;/li&gt; &#xA; &lt;li&gt;[Rename property], support all types of @property , Support Protobuf, advantages: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Identify grammar, identify type, inheritance relationship, &lt;strong&gt;attribute name confusion and class name (including inheritance chain) association&lt;/strong&gt; , automatically identify system attributes&lt;/li&gt; &#xA;   &lt;li&gt;You can set the &#39;Model suffix&#39; to filter by the suffix of the class name, which is convenient for filtering Model&lt;/li&gt; &#xA;   &lt;li&gt;You can set &#39;Model Mapping&#39; to automatically insert the mapping relationship (customized, and automatically complete other attributes) to ensure that the background data is matched&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Insert property], creation, assignment, and modification are all associated with existing types, smart noun replacement &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&#39;Percentage control&#39;&lt;/li&gt; &#xA;   &lt;li&gt;You can set the &#39;Model suffix&#39; to filter by the suffix of the class name, the purpose: to avoid Model archiving or data transfer model failure&lt;/li&gt; &#xA;   &lt;li&gt;Can be executed multiple times, the index x2 increases&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Rename method], similar to Xcode&#39;s Rename function , advantages: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Syntax-related, identification of types, inheritance relationships, support for &lt;strong&gt;multi-parameter modification, confusion of method names, class names (including inheritance chains) and type associations&lt;/strong&gt; , automatic identification of system methods&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Insert method], insert and call context-related methods, bid farewell to &#34;garbage code&#34;, advantages: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;According to the return value type of the method, create the corresponding method in the category. At the same time , the return value of the original method is encapsulated and use (local variables, attributes, formal parameters) called.&lt;/li&gt; &#xA;   &lt;li&gt;Can be executed multiple times, the index x2 increases&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Modification method], simulating manual package call, advantages: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Split the call&lt;/strong&gt; to the original method &lt;strong&gt;and adjust&lt;/strong&gt; it &lt;strong&gt;locally according to the parameter type (support inheritance)&lt;/strong&gt; . For details, see the &lt;a href=&#34;https://www.yuque.com/docs/share/315b72d9-28f9-4fa6-bf20-c40d94f2253a?translate=en&#34;&gt;summary table of supported parameter types.&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Can be executed multiple times, the index x2 increases&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Rename global variables], smart noun substitution&lt;/li&gt; &#xA; &lt;li&gt;[Modify global variables], replace global variable names, &lt;strong&gt;convert global variables into global functions&lt;/strong&gt; , and confuse string variable values&lt;/li&gt; &#xA; &lt;li&gt;[Insert local variable], single-line compound call becomes simple multi-line call, change the execution order&lt;/li&gt; &#xA; &lt;li&gt;[Modify local variable], simulate manual encapsulation call, variable name association type, advantages: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Local variable values remain unchanged during operation, see the &lt;a href=&#34;https://www.yuque.com/docs/share/90444065-4f4e-49c8-9e1a-5bd3d3b4f84d?translate=en&#34;&gt;summary table of supported types for&lt;/a&gt; details&lt;/li&gt; &#xA;   &lt;li&gt;Can be executed multiple times, the index x2 increases&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Rename multilingual], using a system of direct or indirect methods &lt;strong&gt;NSLocalizedString&lt;/strong&gt; , &lt;strong&gt;NSLocalizedStringFromTable&lt;/strong&gt; multilingual modified，&lt;a href=&#34;https://520coding.yuque.com/docs/share/de45751a-c629-4737-84ad-251fb2502123?translate=en&#34;&gt;The custom packaging methods require manual processing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Modify string], support arbitrary string, encryption processing (hard code -&amp;gt; memory), the original string is kept in the comment for easy inspection &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Set the&#39;minimum length&#39; filter&lt;/li&gt; &#xA;   &lt;li&gt;You can also set the &#34; effective number&#34; to use together&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Modify xib, storyboard], automatically insert the view, and modify the internal structure properties&lt;/li&gt; &#xA; &lt;li&gt;[Modify font] , randomly fine-tune the font used in the project, and identify macros&lt;/li&gt; &#xA; &lt;li&gt;[Modify color], randomly shift the color of the UI controls in the project, and identify the macro&lt;/li&gt; &#xA; &lt;li&gt;[UI layout offset], support Frame, Masonry, SDAutoLayout common layout fine-tuning&lt;/li&gt; &#xA; &lt;li&gt;[Insert file], generate other files (Combined with network, storage, and MVC to ensure that the code has high relevance and practical significance), automatic high-related calls in the project ; &lt;strong&gt;Note:&lt;/strong&gt; (Under the project root path, a folder of &#34; &lt;strong&gt;other_xxx_file&lt;/strong&gt; &#34; will be generated , and the sub-option &lt;strong&gt;Target&lt;/strong&gt; controls Import method, if it is empty, you need to manually import, just drag the generated folder into the project; otherwise, automatically import)&lt;/li&gt; &#xA; &lt;li&gt;[Insert text], Generate json, txt, plist and other common text files, automatic high-related calls in the project ; &lt;strong&gt;note:&lt;/strong&gt; (under the project root path, a folder of &#34; &lt;strong&gt;other_xxx_text&lt;/strong&gt; &#34; will be generated , and the generated files will be &lt;strong&gt;automatically imported&lt;/strong&gt; )&lt;/li&gt; &#xA; &lt;li&gt;[Rename class], the class name is not limited (for example: my, My), you can specify to add a prefix, support class and category name|struct|protocol，advantages: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Smart noun substitution&lt;/li&gt; &#xA;   &lt;li&gt;Can be set to&#39;rename files with the same name&#39;&lt;/li&gt; &#xA;   &lt;li&gt;You can set&#39;rename similar strings&#39;, (ignore | equal | include) three modes&lt;/li&gt; &#xA;   &lt;li&gt;Added &#39;correct non-standard dot grammar&#39;, calling for non-standard dot grammar (methods are called as attributes) &lt;a name=&#34;015937695b202fc108bd5bc9b3283082&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;C++&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[Rename attribute], support all type attributes, recognize syntax, recognize type, inherit&lt;/li&gt; &#xA; &lt;li&gt;[Insert attributes], insert attributes (member variables) and call each other to modify, automatic initialization, destruction, and assignment modification in other methods and other similar manual operations, support&#39;percentage control&#39;&lt;/li&gt; &#xA; &lt;li&gt;[Rename method], similar to Xcode&#39;s Rename function, identifying types, templates, overloading, rewriting, inheritance, etc.&lt;/li&gt; &#xA; &lt;li&gt;[Modification method], use overloading technology to modify the function prototype and call the modified parameter&lt;/li&gt; &#xA; &lt;li&gt;[Modify string], support arbitrary string, encryption processing (hard code -&amp;gt; memory), the original string is kept in the comment for easy inspection &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Set the&#39;minimum length&#39; filter&lt;/li&gt; &#xA;   &lt;li&gt;You can also set the &#34; effective number&#34; to use together&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Rename class], support template and other types &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Can switch the old mode&lt;/li&gt; &#xA;   &lt;li&gt;Prefix setting&lt;/li&gt; &#xA;   &lt;li&gt;Can be set to&#39;rename files with the same name&#39; &lt;a name=&#34;ea78561d0c1d5c21d3e2c93d960472e5&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Cocos2d-x&lt;/h3&gt; &#xA;&lt;p&gt;This part of the function is integrated into C++ and supports cocos2dx automatic filtering &lt;a name=&#34;47038e8338f9e18ef9eaba0ea5effb80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Swift&lt;/h3&gt; &#xA;&lt;p&gt;Adapt to Swift5.3, the SPM package management project has not yet been tested&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[Rename global method] to automatically identify system methods &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Can set &#39;parameter label&#39;, support hidden parameter label and trailing closure usage&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Rename picture], smart noun replacement, and automatically correct the situation where the picture name and the xcassets folder name do not correspond to each other &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;You can set the &#39;Run splicing name&#39;, which is used for the image name generated by splicing strings at runtime&lt;/li&gt; &#xA;   &lt;li&gt;You can set the &#39;specified ignore length&#39;, the length of the picture name is less than the specified length is a dangerous name, it will be ignored&lt;/li&gt; &#xA;   &lt;li&gt;You can set &#39;ignore danger&#39;, which has the same name as the dictionary key, and it will be ignored&lt;/li&gt; &#xA;   &lt;li&gt;You can set &#39;associated files&#39;, other files containing picture names&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Rename lottie] to adapt to various scenarios &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;You can set the &#39;run splicing name&#39;, which is used for the lottie name generated by string splicing at runtime&lt;/li&gt; &#xA;   &lt;li&gt;You can set the &#39;specified Ignore Length&#39;, if the length of the lottie name is less than the specified length, it is a dangerous name and will be ignored&lt;/li&gt; &#xA;   &lt;li&gt;You can set &#39;ignore danger&#39;, which has the same name as the dictionary key, and it will be ignored&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Insert picture], which automatically inserts pictures, and simulates manual calls according to the context and type, and the number of insertions can be specified&lt;/li&gt; &#xA; &lt;li&gt;[rename enum], identify associated and primitive values &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&#39;Original value&#39; can be set to refine the control range&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Rename attribute], basic function, without too much description, advantages: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Similar to OC [Rename attribute], identify inheritance chain and nested type, support storage and calculation of attributes, observers, wrappers, class attributes&lt;/li&gt; &#xA;   &lt;li&gt;You can set the &#39;Model suffix&#39; to filter by the suffix of the class name, which is convenient for filtering Model&lt;/li&gt; &#xA;   &lt;li&gt;You can set the &#39;Model mapping&#39;, automatically insert the mapping relationship, and match the background data&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Insert property], use calculated properties to wrap and call and replace the original properties &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Support storage and calculation of attributes, observers, wrappers, class attributes&lt;/li&gt; &#xA;   &lt;li&gt;You can set the &#39;Model suffix&#39; to filter by the suffix of the class name, the purpose: to avoid Model archiving or data transfer model failure&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Rename method], the basic functions are renamed similar to other tools, without too much description, advantages: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Can set &#39;parameter label&#39;, support hidden parameter label and trailing closure usage&lt;/li&gt; &#xA;   &lt;li&gt;Identification of inheritance chain nested types, support for (class, struct, enum) static methods and instance methods, and optional chains, etc.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Insert method], encapsulate the return value of the original method and use the context to call additional associated methods, saying goodbye to &#34;garbage code&#34;&lt;/li&gt; &#xA; &lt;li&gt;[Modification method], use overloading technology to modify the function prototype and call the modified parameter&lt;/li&gt; &#xA; &lt;li&gt;[Rename global variables], smart noun substitution&lt;/li&gt; &#xA; &lt;li&gt;[Modify font] , randomly fine-tune the font used in the project, and identify macros&lt;/li&gt; &#xA; &lt;li&gt;[Modify color], randomly shift the color of UI controls in the project&lt;/li&gt; &#xA; &lt;li&gt;[UI layout offset], support Frame, SnapKit, common layout fine-tuning&lt;/li&gt; &#xA; &lt;li&gt;[Insert local variable], split single-line compound calls, change the execution order&lt;/li&gt; &#xA; &lt;li&gt;[Modify local variable], simulate manual encapsulation call, variable name association type (support nesting), advantages: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;The value of the local variable remains unchanged during operation. For details, see the summary table of supported types.&lt;/li&gt; &#xA;   &lt;li&gt;Can be executed multiple times, the index x2 increases&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Modify string], recognize single-line, multi-line, string interpolation, and extended string. After the modification, it can be freely combined by a variety of methods such as encryption and split character groups, and the comments of the original characters are reserved for easy inspection &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Set the&#39;minimum length&#39; filter&lt;/li&gt; &#xA;   &lt;li&gt;You can also set the &#34;effective number&#34; to use together&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;[Modify xib, storyboard], automatically insert the view, and modify the internal structure properties&lt;/li&gt; &#xA; &lt;li&gt;[Insert file], close to actual development (combined with network, storage, MVC, xib, etc., to ensure that the code has high relevance and practical significance), and strengthen contextual relevance. Can set &#39;file name prefix&#39;, set &#39;Target import&#39; in the same way as OC&lt;/li&gt; &#xA; &lt;li&gt;[Insert text], generate common text files such as json, txt, plist, etc., and automatically high-related calls in the project (introduction of attributes, initialization, automatic destruction, etc.). Note: (under the project root path, the folder &#34;other_xxx_text&#34; will be generated, and the generated files will be automatically imported)&lt;/li&gt; &#xA; &lt;li&gt;[Rename class], the class name is not limited (for example: my, My), identify nested types and typealias, support class|struct|enum|protocol &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Can be set to&#39;rename files with the same name&#39;&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Prefix&#39; can be set&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: At present, the Swift and OC mixed project, the OC calling Swift part will not be processed for the time being, and will be optimized in the future.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a name=&#34;6554a51551d5572e2cd7d848844e9660&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Planning&lt;/h2&gt; &#xA;&lt;p&gt;Update iterations will be carried out in the following order&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Objective-C (95%), mainly to improve the versatility and stability of the tool, and strengthen the function &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Audio and video files are used less and will be added later&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Swift (95%), under development... &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Enhanced performance&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;C++ (60%), under development... &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Method: Insert&lt;/li&gt; &#xA;   &lt;li&gt;Property: modify&lt;/li&gt; &#xA;   &lt;li&gt;Global variables: modify&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Lua (0%) is too specific, and it is temporarily closed. If users have this demand, we will refactor this part&lt;/li&gt; &#xA; &lt;li&gt;C# (0%), I don’t use much in actual projects, so I ranked last, depending on user needs before deciding&lt;/li&gt; &#xA; &lt;li&gt;Other functions: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Fast obfuscation mode &lt;a name=&#34;af444a353c9380bc9aa8aec067937316&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Graphic introduction&lt;/h1&gt; &#xA;&lt;p&gt;Run the APP rendering, please read the &lt;a href=&#34;https://www.yuque.com/docs/share/cd0968ac-9c7e-415f-9e7c-1460b85e80e8&#34;&gt;tool usage tutorial&lt;/a&gt; in detail before use&lt;br&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2021/png/213807/1623167266244-4978d5ed-0b2c-42b5-80c4-1b44e4ff7f96.png#averageHue=%233a9b1d&amp;amp;clientId=u4ef53c93-4376-4&amp;amp;errorMessage=unknown%20error&amp;amp;from=paste&amp;amp;height=877&amp;amp;id=ufbdd65fd&amp;amp;name=image.png&amp;amp;originHeight=1754&amp;amp;originWidth=2532&amp;amp;originalType=binary&amp;amp;ratio=2&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=443560&amp;amp;status=error&amp;amp;style=none&amp;amp;taskId=ue83d9a90-392f-4558-9b46-f06320d2c45&amp;amp;title=&amp;amp;width=1266&#34; alt=&#34;image.png&#34;&gt; &lt;a name=&#34;c318fa67bf88d5d842cee03115743b4b&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Update log&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a name=&#34;ckOtE&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;v6.6.8 (2023.04.25)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Optimize OC [modification method], support dynamic changes in the number of additional parameters&lt;/li&gt; &#xA; &lt;li&gt;Optimize OC [rename method], @selector naming may cause suffix duplication&lt;/li&gt; &#xA; &lt;li&gt;Optimize the compilation of Swift, and the manual mode is compatible with the new version of xcode&lt;/li&gt; &#xA; &lt;li&gt;Optimize Swift [insert property] to improve compatibility&lt;/li&gt; &#xA; &lt;li&gt;Fix Swift [rename method], the parameter label call is not updated synchronously&lt;/li&gt; &#xA; &lt;li&gt;Fix Swift [insert method], support method implicit return&lt;/li&gt; &#xA; &lt;li&gt;Optimize Swift [modification method], some var variable types are mistakenly changed to let&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.yuque.com/docs/share/39f2f60e-b6a8-443b-b005-b9364fb79b95?translate=en&#34;&gt;View more historical update records&lt;/a&gt; &lt;a name=&#34;41b9f638a3e62c9449ec872644258c8d&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Thanks for the feedback&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shizu2014&#34;&gt;shizu2014&lt;/a&gt;、&lt;a href=&#34;https://github.com/myhonior&#34;&gt;myhonior&lt;/a&gt;、&lt;a href=&#34;https://github.com/imbahong&#34;&gt;imbahong&lt;/a&gt;、&lt;a href=&#34;https://github.com/tabier008&#34;&gt;tabier008&lt;/a&gt; &lt;a name=&#34;0ae29cb26e944f357b114cccc4c1211b&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Link navigation&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yuque.com/docs/share/cd0968ac-9c7e-415f-9e7c-1460b85e80e8&#34;&gt;Tool usage tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yuque.com/docs/share/4a87ec96-80fe-4d25-873d-93cb428b3e15?translate=en&#34;&gt;Software Questions and Answers (Q&amp;amp;A)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yuque.com/docs/share/315b72d9-28f9-4fa6-bf20-c40d94f2253a?translate=en&#34;&gt;OC[Modification method] Parameter type summary table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yuque.com/docs/share/90444065-4f4e-49c8-9e1a-5bd3d3b4f84d?translate=en&#34;&gt;OC[Modify local variables] Modify local variables-summary table of supported types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://520coding.yuque.com/docs/share/de45751a-c629-4737-84ad-251fb2502123?translate=en&#34;&gt;OC[Rename multilingual] processing custom packaging method&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://520coding.yuque.com/docs/share/cd70e83b-4ab4-40e5-b719-70f214e869c8&#34;&gt;Swift[Modification method] Parameter type summary table&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>PerimeterX/px-iOS-Framework</title>
    <updated>2023-04-30T02:02:12Z</updated>
    <id>tag:github.com,2023-04-30:/PerimeterX/px-iOS-Framework</id>
    <link href="https://github.com/PerimeterX/px-iOS-Framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PerimeterX iOS framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/perimeterx-logos/primary_logo_red_cropped.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;About &lt;a href=&#34;https://www.perimeterx.com/&#34;&gt;PerimeterX&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;PerimeterX is the leading provider of application security solutions that keep your business safe in the digital world. Delivered as a service, the company’s Bot Defender, Code Defender and Page Defender solutions detect risks to your web applications and proactively manage them, freeing you to focus on growth and innovation. The world’s largest and most reputable websites and mobile applications count on PerimeterX to safeguard their consumers’ digital experience. PerimeterX is headquartered in San Mateo, California and at &lt;a href=&#34;https://www.perimeterx.com&#34;&gt;www.perimeterx.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Integration with the SDK&lt;/h2&gt; &#xA;&lt;p&gt;The PerimeterX iOS SDK works by constantly profiling and evaluating device behavior to ensure that the connections to your mobile APIs and services are genuine.&lt;/p&gt; &#xA;&lt;p&gt;This process is complex and detailed yet only requires initialization to manage a set of secure HTTP headers which are added to all HTTP and HTTPS requests made by the mobile application to the origin server. These HTTP headers are refreshed on a regular basis by the SDK as it is profiling the end-user’s mobile device.&lt;/p&gt; &#xA;&lt;p&gt;The full documentation can be found &lt;a href=&#34;https://docs.perimeterx.com/pxconsole/docs/sdk-ios&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NielsenDigitalSDK/nielsenappsdk-ios-dynamic-spm-global</title>
    <updated>2023-04-30T02:02:12Z</updated>
    <id>tag:github.com,2023-04-30:/NielsenDigitalSDK/nielsenappsdk-ios-dynamic-spm-global</id>
    <link href="https://github.com/NielsenDigitalSDK/nielsenappsdk-ios-dynamic-spm-global" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nielsen app sdk repository to distribute dynamic XCFramework release packages via SPM dependency manager for global market, supporting iOS, tvOS and MacOS Catalyst targets.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nielsenappsdk-ios-dynamic-spm-global&lt;/h1&gt; &#xA;&lt;p&gt;Nielsen app sdk repository to distribute dynamic XCFramework release packages via SPM dependency manager for Global market, supporting iOS, tvOS and MacOS Catalyst targets.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Nielsen AppSDK dynamic XCFramework via SPM dependency manager can be installed by following the steps mentioned &lt;a href=&#34;https://engineeringportal.nielsen.com/docs/Digital_Measurement_iOS_Swift_Package_Manager_Guide&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;p&gt;Nielsen AppSDK supports various digital measurement products. You can access the implementation guides for these products as below&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://engineeringportal.nielsen.com/docs/DTVR_iOS_SDK&#34;&gt;Digital TV Ratings (DTVR) iOS Implementation Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://engineeringportal.nielsen.com/docs/DCR_Video_iOS_SDK&#34;&gt;Digital Content Ratings (DCR) Video iOS Implementation Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://engineeringportal.nielsen.com/docs/DCR_Static_iOS_SDK&#34;&gt;Digital Content Ratings (DCR) Static iOS Implementation Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please read the license agreement presented &lt;a href=&#34;https://engineeringportal.nielsen.com/docs/Special:ClickThrough&#34;&gt;here&lt;/a&gt;, which must be accepted in order to download the Nielsen SDKs. For more information, reach out to your Nielsen Technical Account Manager(TAM).&lt;/p&gt;</summary>
  </entry>
</feed>