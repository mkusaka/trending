<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-12T02:15:50Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>robbiehanson/CocoaAsyncSocket</title>
    <updated>2022-06-12T02:15:50Z</updated>
    <id>tag:github.com,2022-06-12:/robbiehanson/CocoaAsyncSocket</id>
    <link href="https://github.com/robbiehanson/CocoaAsyncSocket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Asynchronous socket networking library for Mac and iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CocoaAsyncSocket&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/robbiehanson/CocoaAsyncSocket&#34;&gt;&lt;img src=&#34;https://travis-ci.org/robbiehanson/CocoaAsyncSocket.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/CocoaAsyncSocket&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/CocoaAsyncSocket.svg?style=flat&#34; alt=&#34;Version Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/?q=CocoaAsyncSocket&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/CocoaAsyncSocket.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Public_domain&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Public%20Domain-orange.svg?style=flat&#34; alt=&#34;license Public Domain&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CocoaAsyncSocket provides easy-to-use and powerful asynchronous socket libraries for macOS, iOS, and tvOS. The classes are described below.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;Install using &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; by adding this line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks! # Add this if you are targeting iOS 8+ or using Swift&#xA;pod &#39;CocoaAsyncSocket&#39;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;CocoaAsyncSocket is &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; compatible. To include it add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;github &#34;robbiehanson/CocoaAsyncSocket&#34; &#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The project is currently configured to build for &lt;strong&gt;iOS&lt;/strong&gt;, &lt;strong&gt;tvOS&lt;/strong&gt; and &lt;strong&gt;Mac&lt;/strong&gt;. After building with carthage the resultant frameworks will be stored in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Carthage/Build/iOS/CocoaAsyncSocket.framework&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Carthage/Build/tvOS/CocoaAsyncSocket.framework&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Carthage/Build/Mac/CocoaAsyncSocket.framework&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Select the correct framework(s) and drag it into your project.&lt;/p&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;Simply add the package dependency to your Package.swift and depend on &#34;CocoaAsyncSocket&#34; in the necessary targets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/robbiehanson/CocoaAsyncSocket&#34;, from: &#34;7.6.4&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manual&lt;/h4&gt; &#xA;&lt;p&gt;You can also include it into your project by adding the source files directly, but you should probably be using a dependency manager to keep up to date.&lt;/p&gt; &#xA;&lt;h3&gt;Importing&lt;/h3&gt; &#xA;&lt;p&gt;Using Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// When using Clang Modules:&#xA;@import CocoaAsyncSocket; &#xA;&#xA;// or when not:&#xA;#import &#34;GCDAsyncSocket.h&#34; // for TCP&#xA;#import &#34;GCDAsyncUdpSocket.h&#34; // for UDP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import CocoaAsyncSocket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TCP&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GCDAsyncSocket&lt;/strong&gt; is a TCP/IP socket networking library built atop Grand Central Dispatch. Here are the key features available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Native Objective-C, fully self-contained in one class.&lt;br&gt; &lt;em&gt;No need to muck around with sockets or streams. This class handles everything for you.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Full delegate support&lt;br&gt; &lt;em&gt;Errors, connections, read completions, write completions, progress, and disconnections all result in a call to your delegate method.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Queued non-blocking reads and writes, with optional timeouts.&lt;br&gt; &lt;em&gt;You tell it what to read or write, and it handles everything for you. Queueing, buffering, and searching for termination sequences within the stream - all handled for you automatically.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Automatic socket acceptance.&lt;br&gt; &lt;em&gt;Spin up a server socket, tell it to accept connections, and it will call you with new instances of itself for each connection.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for TCP streams over IPv4 and IPv6.&lt;br&gt; &lt;em&gt;Automatically connect to IPv4 or IPv6 hosts. Automatically accept incoming connections over both IPv4 and IPv6 with a single instance of this class. No more worrying about multiple sockets.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for TLS / SSL&lt;br&gt; &lt;em&gt;Secure your socket with ease using just a single method call. Available for both client and server sockets.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fully GCD based and Thread-Safe&lt;br&gt; &lt;em&gt;It runs entirely within its own GCD dispatch_queue, and is completely thread-safe. Further, the delegate methods are all invoked asynchronously onto a dispatch_queue of your choosing. This means parallel operation of your socket code, and your delegate/processing code.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;UDP&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GCDAsyncUdpSocket&lt;/strong&gt; is a UDP/IP socket networking library built atop Grand Central Dispatch. Here are the key features available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Native Objective-C, fully self-contained in one class.&lt;br&gt; &lt;em&gt;No need to muck around with low-level sockets. This class handles everything for you.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Full delegate support.&lt;br&gt; &lt;em&gt;Errors, send completions, receive completions, and disconnections all result in a call to your delegate method.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Queued non-blocking send and receive operations, with optional timeouts.&lt;br&gt; &lt;em&gt;You tell it what to send or receive, and it handles everything for you. Queueing, buffering, waiting and checking errno - all handled for you automatically.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for IPv4 and IPv6.&lt;br&gt; &lt;em&gt;Automatically send/recv using IPv4 and/or IPv6. No more worrying about multiple sockets.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fully GCD based and Thread-Safe&lt;br&gt; &lt;em&gt;It runs entirely within its own GCD dispatch_queue, and is completely thread-safe. Further, the delegate methods are all invoked asynchronously onto a dispatch_queue of your choosing. This means parallel operation of your socket code, and your delegate/processing code.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;For those new(ish) to networking, it&#39;s recommended you &lt;strong&gt;&lt;a href=&#34;https://github.com/robbiehanson/CocoaAsyncSocket/wiki&#34;&gt;read the wiki&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;&lt;em&gt;Sockets might not work exactly like you think they do...&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Still got questions?&lt;/strong&gt; Try the &lt;strong&gt;&lt;a href=&#34;https://groups.google.com/group/cocoaasyncsocket&#34;&gt;CocoaAsyncSocket Mailing List&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Love the project? Wanna buy me a ‚òïÔ∏è&amp;nbsp;&amp;nbsp;? (or a üç∫&amp;nbsp;&amp;nbsp;üòÄ&amp;nbsp;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://onename.com/robbiehanson&#34;&gt;&lt;img src=&#34;https://bitpay.com/img/donate-sm.png&#34; alt=&#34;donation-bitcoin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=2M8C699FQ8AW2&#34;&gt;&lt;img src=&#34;https://www.paypal.com/en_US/i/btn/btn_donate_SM.gif&#34; alt=&#34;donation-paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Cenmrev/V2RayX</title>
    <updated>2022-06-12T02:15:50Z</updated>
    <id>tag:github.com,2022-06-12:/Cenmrev/V2RayX</id>
    <link href="https://github.com/Cenmrev/V2RayX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GUI for v2ray-core on macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;V2RayX: A simple GUI for V2Ray on macOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/Cenmrev/V2RayX&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Cenmrev/V2RayX.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is V2Ray?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;READ THIS&lt;/strong&gt;: &lt;a href=&#34;http://www.v2ray.com&#34;&gt;Project V2Ray&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;YOU SHOULD READ V2RAY&#39;S OFFICIAL INSTRUCTION BEFORE USING V2RAYX!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other V2Ray clients on macOS: &lt;a href=&#34;https://github.com/yanue/v2rayu&#34;&gt;V2RayU&lt;/a&gt;. (Not related to or endorsed by authors of this repo. USE AT YOUR OWN RISK.)&lt;/p&gt; &#xA;&lt;h2&gt;Download V2RayX&lt;/h2&gt; &#xA;&lt;p&gt;Download from &lt;a href=&#34;https://github.com/Cenmrev/V2RayX/releases&#34;&gt;Releases&lt;/a&gt;. (compiled by &lt;a href=&#34;https://travis-ci.org/Cenmrev/V2RayX&#34;&gt;travis-ci.org&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;By &lt;a href=&#34;https://caskroom.github.io/&#34;&gt;Homebrew-Cask&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew cask install v2rayx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;V2RayX.app is built by running one of the following commands in your terminal. You can install this via the command-line with curl.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sh -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Cenmrev/V2RayX/master/compilefromsource.sh)&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or step by step:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone --recursive https://github.com/Cenmrev/V2RayX.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;open V2RayX.xcodeproj and use Xcode to build V2RayX.&lt;/p&gt; &#xA;&lt;h2&gt;How does V2RayX work&lt;/h2&gt; &#xA;&lt;p&gt;V2RayX provides a GUI to generate the config file for V2Ray. It includes V2Ray&#39;s binary executable in the app bundle. V2RayX starts and stops V2Ray with &lt;code&gt;launchd&lt;/code&gt; of macOS.&lt;/p&gt; &#xA;&lt;p&gt;V2RayX also allows users to change system proxy settings and switch proxy servers on the macOS menu bar.&lt;/p&gt; &#xA;&lt;p&gt;As default, V2RayX will open a socks5 proxy at port &lt;code&gt;1081&lt;/code&gt; as the main inbound, as well as a http proxy at port &lt;code&gt;8001&lt;/code&gt; as an inboundDetour.&lt;/p&gt; &#xA;&lt;p&gt;V2RayX provide three modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Global Mode: V2RayX asks macOS to route all internet traffic to v2ray core if the network traffic obeys operating system&#39;s network rules.&lt;/li&gt; &#xA; &lt;li&gt;PAC Mode: macOS will determine the routing based on a pac file and some traffic may be routed to v2ray core.&lt;/li&gt; &#xA; &lt;li&gt;Manual Mode: V2RayX will not modify any macOS network settings, but only start or stop v2ray core.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Options in menu list &lt;code&gt;Routing Rule&lt;/code&gt; determine how v2ray core deals with incoming traffic. Core routing rules apply to all three modes above.&lt;/p&gt; &#xA;&lt;h3&gt;auto-run on login&lt;/h3&gt; &#xA;&lt;p&gt;Open macOS System Preferences -&amp;gt; Users &amp;amp; Group -&amp;gt; Login Items, add V2RayX.app to the list.&lt;/p&gt; &#xA;&lt;h3&gt;manually update v2ray-core&lt;/h3&gt; &#xA;&lt;p&gt;replace &lt;code&gt;V2RayX.app/Contents/Resources/v2ray&lt;/code&gt; with the newest v2ray version from &lt;a href=&#34;https://github.com/v2ray/v2ray-core/releases&#34;&gt;v2ray-core repo&lt;/a&gt;. However, compatibility is not guaranteed.&lt;/p&gt; &#xA;&lt;h3&gt;Uninstall&lt;/h3&gt; &#xA;&lt;p&gt;V2RayX will create the following files and folders:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/Library/Application Support/V2RayX&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/Library/Application Support/V2RayX&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/Library/Preferences/cenmrev.V2RayX.plist&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So, to totally uninstall V2RayX, just delete V2RayX.app and the files above. :)&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledge&lt;/h2&gt; &#xA;&lt;p&gt;V2RayX uses &lt;a href=&#34;https://github.com/swisspol/GCDWebServer&#34;&gt;GCDWebServer&lt;/a&gt; to provide a local pac server. V2RayX also uses many ideas and codes from &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-iOS/tree/master&#34;&gt;ShadowsocksX&lt;/a&gt;, especially, the codes of &lt;a href=&#34;https://github.com/Cenmrev/V2RayX/raw/master/v2rayx_sysconf/main.m&#34;&gt;v2rays_sysconfig&lt;/a&gt; are simply copied from &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-iOS/raw/master/shadowsocks_sysconf/main.m&#34;&gt;shadowsocks_sysconf&lt;/a&gt; with some modifications.&lt;/p&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;p&gt;If Project V2Ray or V2RayX helped you, you can also help us by donation &lt;strong&gt;in your will&lt;/strong&gt;. To donate to Project V2Ray, you may refer to &lt;a href=&#34;https://www.v2ray.com/chapter_00/02_donate.html&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This tool is mainly for personal usage. For professional users and technique support, commercial software like proxifier is recommended. Please refer to &lt;a href=&#34;https://github.com/Cenmrev/V2RayX/issues/60#issuecomment-369531443&#34;&gt;#60&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The developer does not major in CS nor Software Engineer and currently is busy with grad school courses. So V2rayX will not be updated frequently. Users can replace V2RayX.app/Contents/Resources/v2ray with the newest v2ray-core downloaded from &lt;a href=&#34;https://github.com/v2ray/v2ray-core/releases&#34;&gt;https://github.com/v2ray/v2ray-core/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The developer currently does not have enough time to add more features to V2RayX, nor to merge PRs. However, forking and releasing your own version are always welcome.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>git-up/GitUp</title>
    <updated>2022-06-12T02:15:50Z</updated>
    <id>tag:github.com,2022-06-12:/git-up/GitUp</id>
    <link href="https://github.com/git-up/GitUp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Git interface you&#39;ve been missing all your life has finally arrived.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/git-up/GitUp&#34;&gt;&lt;img src=&#34;https://travis-ci.org/git-up/GitUp.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;GitUp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Work quickly, safely, and without headaches. The Git interface you&#39;ve been missing all your life has finally arrived.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://i.imgur.com/JuQIxJu.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;img src=&#34;https://i.imgur.com/9rgXktz.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Git recently celebrated its 10 years anniversary, but most engineers are still confused by its intricacy (3 of the &lt;a href=&#34;http://stackoverflow.com/questions?sort=votes&#34;&gt;top 5 questions of all time&lt;/a&gt; on Stack Overflow are Git related). Since Git turns even simple actions into mystifying commands (‚Äúgit add‚Äù to stage versus ‚Äúgit reset HEAD‚Äù to unstage anyone?), it‚Äôs no surprise users waste time, get frustrated, distract the rest of their team for help, or worse, screw up their repo!&lt;/p&gt; &#xA;&lt;p&gt;GitUp is a bet to invent a new Git interaction model that lets engineers of all levels work quickly, safely, and without headaches. It&#39;s unlike any other Git client out there from the way it‚Äôs built (it interacts directly with the Git database on disk), to the way it works (you manipulate the repository graph instead of manipulating commits).&lt;/p&gt; &#xA;&lt;p&gt;With GitUp, you get a truly efficient Git client for Mac:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;strong&gt;live and interactive repo graph&lt;/strong&gt; (edit, reorder, fixup, merge commits‚Ä¶),&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unlimited undo / redo&lt;/strong&gt; of almost all operations (even rebases and merges),&lt;/li&gt; &#xA; &lt;li&gt;Time Machine like &lt;strong&gt;snapshots for 1-click rollbacks&lt;/strong&gt; to previous repo states,&lt;/li&gt; &#xA; &lt;li&gt;Features that don‚Äôt even exist natively in Git like a &lt;strong&gt;visual commit splitter&lt;/strong&gt; or a &lt;strong&gt;unified reflog browser&lt;/strong&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instant search across the entire repo&lt;/strong&gt; including diff contents,&lt;/li&gt; &#xA; &lt;li&gt;A &lt;strong&gt;ridiculously fast UI&lt;/strong&gt;, often faster than the command line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;GitUp was created by &lt;a href=&#34;https://github.com/swisspol&#34;&gt;@swisspol&lt;/a&gt; in late 2014 as a bet to reinvent the way developers interact with Git. After several months of work, it was made available in pre-release early 2015 and reached the &lt;a href=&#34;https://news.ycombinator.com/item?id=9653978&#34;&gt;top of Hacker News&lt;/a&gt; along with being &lt;a href=&#34;http://www.producthunt.com/tech/gitup-1&#34;&gt;featured by Product Hunt&lt;/a&gt; and &lt;a href=&#34;http://daringfireball.net/linked/2015/06/04/gitup&#34;&gt;Daring Fireball&lt;/a&gt;. 30,000 lines of code later, GitUp reached 1.0 mid-August 2015 and was released open source as a gift to the developer community.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Learn all about GitUp and download the latest release from &lt;a href=&#34;http://gitup.co&#34;&gt;http://gitup.co&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read the &lt;a href=&#34;https://github.com/git-up/GitUp/wiki&#34;&gt;docs&lt;/a&gt; and use &lt;a href=&#34;https://github.com/git-up/GitUp/issues&#34;&gt;GitHub Issues&lt;/a&gt; for support &amp;amp; feedback.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Releases notes are available at &lt;a href=&#34;https://github.com/git-up/GitUp/releases&#34;&gt;https://github.com/git-up/GitUp/releases&lt;/a&gt;. Builds tagged with a &lt;code&gt;v&lt;/code&gt; (e.g. &lt;code&gt;v1.2.3&lt;/code&gt;) are released on the &#34;Stable&#34; channel, while builds tagged with a &lt;code&gt;b&lt;/code&gt; (e.g. &lt;code&gt;b1234&lt;/code&gt;) are only released on the &#34;Continuous&#34; channel. You can change the update channel used by GitUp in the app preferences.&lt;/p&gt; &#xA;&lt;p&gt;To build GitUp yourself, simply run the command &lt;code&gt;git clone --recursive https://github.com/git-up/GitUp.git&lt;/code&gt; in Terminal, then open the &lt;code&gt;GitUp/GitUp.xcodeproj&lt;/code&gt; Xcode project and hit Run.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; If you do not have an Apple ID with a developer account for code signing Mac apps, the build will fail with a code signing error. Simply delete the &#34;Code Signing Identity&#34; build setting of the &#34;Application&#34; target to work around the issue:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://i.imgur.com/dWpJExk.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatively&lt;/strong&gt;, if you do have a developer account, you can create the file &#34;Xcode-Configurations/DEVELOPMENT_TEAM.xcconfig&#34; with the following build setting as its content:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;DEVELOPMENT_TEAM = [Your TeamID]&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For a more detailed description of this, you can have a look at the comments at the end of the file &#34;Xcode-Configurations/Base.xcconfig&#34;.&lt;/p&gt; &#xA;&lt;h1&gt;GitUpKit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;GitUp is built as a thin layer on top of a reusable generic Git toolkit called &#34;GitUpKit&#34;. This means that you can use that same GitUpKit framework to build your very own Git UI!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;GitUpKit has a very different goal than &lt;a href=&#34;https://github.com/libgit2/objective-git&#34;&gt;ObjectiveGit&lt;/a&gt;. Instead of offering extensive raw bindings to &lt;a href=&#34;https://github.com/libgit2/libgit2&#34;&gt;libgit2&lt;/a&gt;, GitUpKit only uses a minimal subset of libgit2 and reimplements everything else on top of it (it has its own &#34;rebase engine&#34; for instance). This allows it to expose a very tight and consistent API, that completely follows Obj-C conventions and hides away the libgit2 complexity and sometimes inconsistencies. GitUpKit adds on top of that a number of exclusive and powerful features, from undo/redo and Time Machine like snapshots, to entire drop-in UI components.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The GitUpKit source code is organized as 2 independent layers communicating only through the use of public APIs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Base Layer (depends on Foundation only and is compatible with OS X and iOS)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Core/&lt;/code&gt;: wrapper around the required minimal functionality of &lt;a href=&#34;https://github.com/libgit2/libgit2&#34;&gt;libgit2&lt;/a&gt;, on top of which is then implemented all the Git functionality required by GitUp (note that GitUp uses a &lt;a href=&#34;https://github.com/git-up/libgit2/tree/gitup&#34;&gt;slightly customized fork&lt;/a&gt; of libgit2)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Extensions/&lt;/code&gt;: categories on the &lt;code&gt;Core&lt;/code&gt; classes to add convenience features implemented only using the public APIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;UI Layer (depends on AppKit and is compatible with OS X only)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Interface/&lt;/code&gt;: low-level view classes e.g. &lt;code&gt;GIGraphView&lt;/code&gt; to render the GitUp Map view&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Utilities/&lt;/code&gt;: interface utility classes e.g. the base view controller class &lt;code&gt;GIViewController&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Components/&lt;/code&gt;: reusable single-view view controllers e.g. &lt;code&gt;GIDiffContentsViewController&lt;/code&gt; to render a diff&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Views/&lt;/code&gt;: high-level reusable multi-views view controllers e.g. &lt;code&gt;GIAdvancedCommitViewController&lt;/code&gt; to implement the entire GitUp Advanced Commit view&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: If the preprocessor constant &lt;code&gt;DEBUG&lt;/code&gt; is defined to a non-zero value when building GitUpKit (this is the default when building in &#34;Debug&#34; configuration), a number of extra consistency checks are enabled at run time as well as extra logging. Be aware that this overhead can significantly affect performance.&lt;/p&gt; &#xA;&lt;h2&gt;GitUpKit API&lt;/h2&gt; &#xA;&lt;p&gt;Using the GitUpKit API should be pretty straightforward since it is organized by functionality (e.g. repository, branches, commits, interface components, etc...) and a best effort has been made to name functions clearly.&lt;/p&gt; &#xA;&lt;p&gt;Regarding the &#34;Core&#34; APIs, the best way to learn them is to peruse the associated unit tests - for instance see &lt;a href=&#34;https://raw.githubusercontent.com/git-up/GitUp/master/GitUpKit/Core/GCBranch-Tests.m&#34;&gt;the branch tests&lt;/a&gt; for the branch API.&lt;/p&gt; &#xA;&lt;p&gt;Here is some sample code to get you started (error handling is left as an exercise to the reader):&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Opening and browsing a repository:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Open repo&#xA;GCRepository* repo = [[GCRepository alloc] initWithExistingLocalRepository:&amp;lt;PATH&amp;gt; error:NULL];&#xA;&#xA;// Make sure repo is clean&#xA;assert([repo checkClean:kGCCleanCheckOption_IgnoreUntrackedFiles error:NULL]);&#xA;&#xA;// List all branches&#xA;NSArray* branches = [repo listAllBranches:NULL];&#xA;NSLog(@&#34;%@&#34;, branches);&#xA;&#xA;// Lookup HEAD&#xA;GCLocalBranch* headBranch;  // This would be nil if the HEAD is detached&#xA;GCCommit* headCommit;&#xA;[repo lookupHEADCurrentCommit:&amp;amp;headCommit branch:&amp;amp;headBranch error:NULL];&#xA;NSLog(@&#34;%@ = %@&#34;, headBranch, headCommit);&#xA;&#xA;// Load the *entire* repo history in memory for fast access, including all commits, branches and tags&#xA;GCHistory* history = [repo loadHistoryUsingSorting:kGCHistorySorting_ReverseChronological error:NULL];&#xA;assert(history);&#xA;NSLog(@&#34;%lu commits total&#34;, history.allCommits.count);&#xA;NSLog(@&#34;%@\n%@&#34;, history.rootCommits, history.leafCommits);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Modifying a repository:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Take a snapshot of the repo&#xA;GCSnapshot* snapshot = [repo takeSnapshot:NULL];&#xA;&#xA;// Create a new branch and check it out&#xA;GCLocalBranch* newBranch = [repo createLocalBranchFromCommit:headCommit withName:@&#34;temp&#34; force:NO error:NULL];&#xA;NSLog(@&#34;%@&#34;, newBranch);&#xA;assert([repo checkoutLocalBranch:newBranch options:0 error:NULL]);&#xA;&#xA;// Add a file to the index&#xA;[[NSData data] writeToFile:[repo.workingDirectoryPath stringByAppendingPathComponent:@&#34;empty.data&#34;] atomically:YES];&#xA;assert([repo addFileToIndex:@&#34;empty.data&#34; error:NULL]);&#xA;&#xA;// Check index status&#xA;GCDiff* diff = [repo diffRepositoryIndexWithHEAD:nil options:0 maxInterHunkLines:0 maxContextLines:0 error:NULL];&#xA;assert(diff.deltas.count == 1);&#xA;NSLog(@&#34;%@&#34;, diff);&#xA;&#xA;// Create a commit&#xA;GCCommit* newCommit = [repo createCommitFromHEADWithMessage:@&#34;Added file&#34; error:NULL];&#xA;assert(newCommit);&#xA;NSLog(@&#34;%@&#34;, newCommit);&#xA;&#xA;// Restore repo to saved snapshot before topic branch and commit were created&#xA;BOOL success = [repo restoreSnapshot:snapshot withOptions:kGCSnapshotOption_IncludeAll reflogMessage:@&#34;Rolled back&#34; didUpdateReferences:NULL error:NULL];&#xA;assert(success);&#xA;  &#xA;// Make sure topic branch is gone&#xA;assert([repo findLocalBranchWithName:@&#34;temp&#34; error:NULL] == nil);&#xA;  &#xA;// Update workdir and index to match HEAD&#xA;assert([repo resetToHEAD:kGCResetMode_Hard error:NULL]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Complete Example #1: GitDown&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-up/GitUp/master/Examples/GitDown&#34;&gt;GitDown&lt;/a&gt; is a very basic app that prompts the user for a repo and displays an interactive and live-updating list of its stashes (all with ~20 lines of code in &lt;code&gt;-[AppDelegate applicationDidFinishLaunching:]&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://i.imgur.com/ZfxM7su.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Through GitUpKit, this basic app also gets for free unlimited undo/redo, unified and side-by-side diffs, text selection and copy, keyboard shortcuts, etc...&lt;/p&gt; &#xA;&lt;p&gt;This source code also demonstrates how to use some other GitUpKit view controllers as well as building a customized one.&lt;/p&gt; &#xA;&lt;h2&gt;Complete Example #2: GitDiff&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-up/GitUp/master/Examples/GitDiff&#34;&gt;GitDiff&lt;/a&gt; demonstrates how to create a view controller that displays a live updating diff between &lt;code&gt;HEAD&lt;/code&gt; and the workdir √† la &lt;code&gt;git diff HEAD&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://i.imgur.com/29hxDcJ.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Complete Example #3: GitY&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-up/GitUp/master/Examples/GitY&#34;&gt;GitY&lt;/a&gt; is a &lt;a href=&#34;http://gitx.frim.nl/&#34;&gt;GitX&lt;/a&gt; clone built using GitUpKit and less than 200 lines of code:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://i.imgur.com/6cuPcT4.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Complete Example #4: iGit&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-up/GitUp/master/Examples/iGit&#34;&gt;iGit&lt;/a&gt; is a test iOS app that simply uses GitUpKit to clone a GitHub repo and perform a commit.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/git-up/GitUp/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swisspol&#34;&gt;@swisspol&lt;/a&gt;: concept and code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wwayneee&#34;&gt;@wwayneee&lt;/a&gt;: UI design&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jayeb&#34;&gt;@jayeb&lt;/a&gt;: website&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Also a big thanks to the fine &lt;a href=&#34;https://libgit2.github.com/&#34;&gt;libgit2&lt;/a&gt; contributors without whom GitUp would have never existed!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;GitUp is copyright 2015-2018 Pierre-Olivier Latour and available under &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;GPL v3 license&lt;/a&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/git-up/GitUp/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file in the project for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; GitUp includes some other open-source projects and such projects remain under their own license.&lt;/p&gt;</summary>
  </entry>
</feed>