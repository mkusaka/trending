<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-02T01:45:07Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SVGKit/SVGKit</title>
    <updated>2022-10-02T01:45:07Z</updated>
    <id>tag:github.com,2022-10-02:/SVGKit/SVGKit</id>
    <link href="https://github.com/SVGKit/SVGKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Display and interact with SVG Images on iOS / OS X, using native rendering (CoreAnimation)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SVGKit&lt;/h1&gt; &#xA;&lt;p&gt;SVGKit is a Cocoa framework for rendering SVG files natively: it&#39;s fast and powerful. Some additional info and links &lt;a href=&#34;https://github.com/SVGKit/SVGKit/wiki&#34;&gt;are on the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Versions:&lt;/h2&gt; &#xA;&lt;p&gt;Latest info at: &lt;a href=&#34;https://github.com/SVGKit/SVGKit/wiki/Versions&#34;&gt;https://github.com/SVGKit/SVGKit/wiki/Versions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v3.x = current &#34;in development&#34; branch with latest changes, fixes, features &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NB: this is now automatically selected in GitHub as the &#34;default&#34; branch when you visit SVGKit&#39;s project page&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h2&gt;Run the Demo - iOS&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open up &#34;Demo-iOS.xcodeproj&#34;, and run it (on simulator or device). Try different SVG&#39;s. Zoom, pan, and (with the Monkey only:) hit the &#34;Animate&#34; button. Tap the images to see bounding-boxes / hit dectection (might need you to hit the Debug button first)&lt;/li&gt; &#xA; &lt;li&gt;If you have ANY problems building the library and embedding it in your app, compare your build settings to the Demo-iOS build settings - if something&#39;s different, it&#39;s probably the problem.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Installation (add SVGKit to your app)&lt;/h1&gt; &#xA;&lt;p&gt;You have 3 main options for installing SVGKit:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Drag/drop the .framework file into your project &amp;lt;-- PREFERRED / RECOMMENDED&lt;/li&gt; &#xA; &lt;li&gt;Use CocoaPods&lt;/li&gt; &#xA; &lt;li&gt;Use Carthage&lt;/li&gt; &#xA; &lt;li&gt;Drag/drop the static library into your project, and configure the build settings in your project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;NB: the &#34;static library&#34; is our backwards-compatible, manual install that always works if you have problems with CocoaPods/Carthage/Framework.&lt;/p&gt; &#xA;&lt;h2&gt;OPTION 1: Use the Framework - drag, drop, done!&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &#34;SVGKit-iOS.xcodeproj&#34;&lt;/li&gt; &#xA; &lt;li&gt;Build the project once&lt;/li&gt; &#xA; &lt;li&gt;In Project Navigator, expand the Products folder&lt;/li&gt; &#xA; &lt;li&gt;Drag/drop SVGKit.framework into your app-project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;NB: Frameworks are the preferred way to use libraries in Xcode. But this is a new feature, it might have bugs. If you have ANY problems, please create an Issue, but also try the Static Library method below&lt;/p&gt; &#xA;&lt;p&gt;You MAY also need to manually add the following Apple Frameworks to your app:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CoreText&lt;/li&gt; &#xA; &lt;li&gt;CoreImage&lt;/li&gt; &#xA; &lt;li&gt;libxml2.dylib&lt;/li&gt; &#xA; &lt;li&gt;QuartzCore&lt;/li&gt; &#xA; &lt;li&gt;CoreGraphics&lt;/li&gt; &#xA; &lt;li&gt;UIKit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You MAY also need to add the following 3rd party Frameworks to your app (included with SVGKit):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CocoaLumberjack (in the SVGKit-iOS project, select the &#34;3rd-party-frameworks&#34; folder, and drag/drop whichever versions you need: iOS, tvOS, etc) Remember to embed the library too (should show under Target -&amp;gt; General -&amp;gt; Embedded Binaries)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;OPTION 2: Using CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CocoaPods/CocoaPods&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for CocoaTouch. To do CocoaPods, adding the following in your podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;SVGKit&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also recommended that you setup your podfile to get SVGKit from the latest branch (October 2018: currently 3.x).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;SVGKit&#39;, :git =&amp;gt; &#39;https://github.com/SVGKit/SVGKit.git&#39;, :branch =&amp;gt; &#39;3.x&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OPTION 3: Using Carthage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager for Cocoa. To use Carthage, adding the following in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;SVGKit/SVGKit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also recommended that you setup your Cartfile to get SVGKit from the current version (October 2018: 3.x branch).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;SVGKit/SVGKit&#34; &#34;3.x&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OPTION 4: Build the static library&lt;/h2&gt; &#xA;&lt;p&gt;We have a build script that automatically builds ALL versions of the library at once, and ships them as a single file: &lt;a href=&#34;http://stackoverflow.com/questions/3520977/build-fat-static-library-device-simulator-using-xcode-and-sdk-4/3647187#3647187&#34;&gt;http://stackoverflow.com/questions/3520977/build-fat-static-library-device-simulator-using-xcode-and-sdk-4/3647187#3647187&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s all setup already, all you need to do is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &#34;SVGKit-iOS.xcodeproj&#34;, switch to &#34;SVGKit-iOS&#34; target and Build it (cmd-B)&lt;/li&gt; &#xA; &lt;li&gt;in left navbar, scroll to bottom, and open the &#34;Products&#34; section&lt;/li&gt; &#xA; &lt;li&gt;right click the library (&#34;libSVGKitBLAHBLAH.a&#34;) and select &#34;show in finder&#34;&lt;/li&gt; &#xA; &lt;li&gt;GO UP ONE FOLDER&lt;/li&gt; &#xA; &lt;li&gt;select the &#34;Debug-universal&#34; (or Release-universal if you were building in Release mode) folder&lt;/li&gt; &#xA; &lt;li&gt;Drag/drop the .a file and the &#34;usr&#34; folder into your project (select the &#34;Copy files&#34; checkbox)&lt;/li&gt; &#xA; &lt;li&gt;In Build Settings, select &#34;Other Linker Flags&#34; and add &#34;-ObjC&#34;&lt;/li&gt; &#xA; &lt;li&gt;Edit your build settings and set &#34;C/C++ Compiler Version&#34; = &#34;LLVM Compiler 2.0&#34;&lt;/li&gt; &#xA; &lt;li&gt;Add ALL the frameworks and 3rd party libraries listed below (go to &#34;Build Phases&#34;, and &#34;Link Binary with Libraries&#34;):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CoreText&lt;/li&gt; &#xA; &lt;li&gt;CoreImage&lt;/li&gt; &#xA; &lt;li&gt;libxml2.dylib&lt;/li&gt; &#xA; &lt;li&gt;QuartzCore&lt;/li&gt; &#xA; &lt;li&gt;CoreGraphics&lt;/li&gt; &#xA; &lt;li&gt;UIKit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Everything else is automatic.&lt;/p&gt; &#xA;&lt;h2&gt;OPTION 5: Using Swift Package Manager&lt;/h2&gt; &#xA;&lt;p&gt;In XCode go to &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Add Packages...&lt;/code&gt; and provide URL to this repository in the search bar. Choose &lt;code&gt;Dependency Role&lt;/code&gt; and select apropriate project.&lt;/p&gt; &#xA;&lt;h2&gt;Usage - OS X&lt;/h2&gt; &#xA;&lt;p&gt;Added in version 2.1.0 / Autumn 2018: support for macOS.&lt;/p&gt; &#xA;&lt;p&gt;You can use nearly the same API like iOS. Including &lt;code&gt;SVGKFastImageView&lt;/code&gt;, &lt;code&gt;SVGKLayeredImageView&lt;/code&gt;, and you can use &lt;code&gt;SVGKImage.NSImage&lt;/code&gt; to export SVG layer to bitmap image.&lt;/p&gt; &#xA;&lt;p&gt;We also provide a macOS demo for SVGKit. To run the Demo, open &lt;code&gt;Demo-OSX.xcodeproj&lt;/code&gt; and built to run. You can browser the different SVG files using those two different type of view to check the compatibility.&lt;/p&gt; &#xA;&lt;h2&gt;Recipes for using the library&lt;/h2&gt; &#xA;&lt;p&gt;Here are some old posts (some of these APIs have changed slightly since they were written) on using SVGKit, with advice on which methods to use and why:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;GETTING STARTED, plus NEW FEATURES: &lt;a href=&#34;http://t-machine.org/index.php/2012/12/31/svgkit-2013-usage/&#34;&gt;http://t-machine.org/index.php/2012/12/31/svgkit-2013-usage/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;QUICK RECIPES for common uses: &amp;nbsp;&lt;a href=&#34;http://t-machine.org/index.php/2013/01/02/svgkit-2013-recipes/&#34;&gt;http://t-machine.org/index.php/2013/01/02/svgkit-2013-recipes/&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;additiona: How to scale an SVG image on screen: &lt;a href=&#34;http://t-machine.org/index.php/2013/04/14/svgkit-scaling-svg-images/&#34;&gt;http://t-machine.org/index.php/2013/04/14/svgkit-scaling-svg-images/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONTRIBUTING to the project, CORE ARCHITECTURE: &lt;a href=&#34;http://t-machine.org/index.php/2012/12/31/svgkit-2013-development/&#34;&gt;http://t-machine.org/index.php/2012/12/31/svgkit-2013-development/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(November 2013): New (experimental) feature - writing SVG&#39;s out to disk, preserving any changes you made programmatically: &lt;a href=&#34;http://t-machine.org/index.php/2013/11/17/svgkit-programmatic-editing-of-svg-files-on-ios/&#34;&gt;http://t-machine.org/index.php/2013/11/17/svgkit-programmatic-editing-of-svg-files-on-ios/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using SVGFastImageView in SwiftUI: &lt;a href=&#34;https://gist.github.com/ozgurshn/c816a035ff4722dc26650f4a4ed40105&#34;&gt;https://gist.github.com/ozgurshn/c816a035ff4722dc26650f4a4ed40105&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>apache/cordova-plugin-inappbrowser</title>
    <updated>2022-10-02T01:45:07Z</updated>
    <id>tag:github.com,2022-10-02:/apache/cordova-plugin-inappbrowser</id>
    <link href="https://github.com/apache/cordova-plugin-inappbrowser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Cordova Plugin inappbrowser&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;title: Inappbrowser description: Open an in-app browser window.&lt;/h2&gt; &#xA;&lt;!--&#xA;# license: Licensed to the Apache Software Foundation (ASF) under one&#xA;#         or more contributor license agreements.  See the NOTICE file&#xA;#         distributed with this work for additional information&#xA;#         regarding copyright ownership.  The ASF licenses this file&#xA;#         to you under the Apache License, Version 2.0 (the&#xA;#         &#34;License&#34;); you may not use this file except in compliance&#xA;#         with the License.  You may obtain a copy of the License at&#xA;#&#xA;#           http://www.apache.org/licenses/LICENSE-2.0&#xA;#&#xA;#         Unless required by applicable law or agreed to in writing,&#xA;#         software distributed under the License is distributed on an&#xA;#         &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY&#xA;#         KIND, either express or implied.  See the License for the&#xA;#         specific language governing permissions and limitations&#xA;#         under the License.&#xA;--&gt; &#xA;&lt;h1&gt;cordova-plugin-inappbrowser&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/android.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/android.yml/badge.svg?sanitize=true&#34; alt=&#34;Android Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/chrome.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/chrome.yml/badge.svg?sanitize=true&#34; alt=&#34;Chrome Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/ios.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/ios.yml/badge.svg?sanitize=true&#34; alt=&#34;iOS Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Lint Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can show helpful articles, videos, and web resources inside of your app. Users can view web pages without leaving your app.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To get a few ideas, check out the &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-inappbrowser/master/#sample&#34;&gt;sample&lt;/a&gt; at the bottom of this page or go straight to the &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-inappbrowser/master/#reference&#34;&gt;reference&lt;/a&gt; content.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This plugin provides a web browser view that displays when calling &lt;code&gt;cordova.InAppBrowser.open()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var ref = cordova.InAppBrowser.open(&#39;http://apache.org&#39;, &#39;_blank&#39;, &#39;location=yes&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;window.open&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;cordova.InAppBrowser.open()&lt;/code&gt; function is defined to be a drop-in replacement for the &lt;code&gt;window.open()&lt;/code&gt; function. Existing &lt;code&gt;window.open()&lt;/code&gt; calls can use the InAppBrowser window, by replacing window.open:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;window.open = cordova.InAppBrowser.open;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you change the browsers &lt;code&gt;window.open&lt;/code&gt; function this way, it can have unintended side effects (especially if this plugin is included only as a dependency of another plugin).&lt;/p&gt; &#xA;&lt;p&gt;The InAppBrowser window behaves like a standard web browser, and can&#39;t access Cordova APIs. For this reason, the InAppBrowser is recommended if you need to load third-party (untrusted) content, instead of loading that into the main Cordova webview. The InAppBrowser is not subject to the whitelist, nor is opening links in the system browser.&lt;/p&gt; &#xA;&lt;p&gt;The InAppBrowser provides by default its own GUI controls for the user (back, forward, done).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cordova plugin add cordova-plugin-inappbrowser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want all page loads in your app to go through the InAppBrowser, you can simply hook &lt;code&gt;window.open&lt;/code&gt; during initialization. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;document.addEventListener(&#34;deviceready&#34;, onDeviceReady, false);&#xA;function onDeviceReady() {&#xA;    window.open = cordova.InAppBrowser.open;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Preferences&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;b&gt;config.xml&lt;/b&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;b&gt;InAppBrowserStatusBarStyle [iOS only]&lt;/b&gt;: (string, options &#39;lightcontent&#39;, &#39;darkcontent&#39; or &#39;default&#39;. Defaults to &#39;default&#39;) set text color style for iOS. &#39;lightcontent&#39; is intended for use on dark backgrounds. &#39;darkcontent&#39; is only available since iOS 13 and intended for use on light backgrounds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;preference name=&#34;InAppBrowserStatusBarStyle&#34; value=&#34;lightcontent&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;cordova.InAppBrowser.open&lt;/h2&gt; &#xA;&lt;p&gt;Opens a URL in a new &lt;code&gt;InAppBrowser&lt;/code&gt; instance, the current browser instance, or the system browser.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var ref = cordova.InAppBrowser.open(url, target, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ref&lt;/strong&gt;: Reference to the &lt;code&gt;InAppBrowser&lt;/code&gt; window when the target is set to &lt;code&gt;&#39;_blank&#39;&lt;/code&gt;. &lt;em&gt;(InAppBrowser)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;url&lt;/strong&gt;: The URL to load &lt;em&gt;(String)&lt;/em&gt;. Call &lt;code&gt;encodeURI()&lt;/code&gt; on this if the URL contains Unicode characters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;target&lt;/strong&gt;: The target in which to load the URL, an optional parameter that defaults to &lt;code&gt;_self&lt;/code&gt;. &lt;em&gt;(String)&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;_self&lt;/code&gt;: Opens in the Cordova WebView if the URL is in the white list, otherwise it opens in the &lt;code&gt;InAppBrowser&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;_blank&lt;/code&gt;: Opens in the &lt;code&gt;InAppBrowser&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;_system&lt;/code&gt;: Opens in the system&#39;s web browser.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;options&lt;/strong&gt;: Options for the &lt;code&gt;InAppBrowser&lt;/code&gt;. Optional, defaulting to: &lt;code&gt;location=yes&lt;/code&gt;. &lt;em&gt;(String)&lt;/em&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;options&lt;/code&gt; string must not contain any blank space, and each feature&#39;s name/value pairs must be separated by a comma. Feature names are case insensitive.&lt;/p&gt; &lt;p&gt;All platforms support:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;location&lt;/strong&gt;: Set to &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt; to turn the &lt;code&gt;InAppBrowser&lt;/code&gt;&#39;s location bar on or off.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Android supports these additional options:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;hidden&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; to create the browser and load the page, but not show it. The loadstop event fires when loading is complete. Omit or set to &lt;code&gt;no&lt;/code&gt; (default) to have the browser open and load normally.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;beforeload&lt;/strong&gt;: set to enable the &lt;code&gt;beforeload&lt;/code&gt; event to modify which pages are actually loaded in the browser. Accepted values are &lt;code&gt;get&lt;/code&gt; to intercept only GET requests, &lt;code&gt;post&lt;/code&gt; to intercept on POST requests or &lt;code&gt;yes&lt;/code&gt; to intercept both GET &amp;amp; POST requests. Note that POST requests are not currently supported and will be ignored (if you set &lt;code&gt;beforeload=post&lt;/code&gt; it will raise an error).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;clearcache&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; to have the browser&#39;s cookie cache cleared before the new window is opened&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;clearsessioncache&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; to have the session cookie cache cleared before the new window is opened&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;closebuttoncaption&lt;/strong&gt;: set to a string to use as the close button&#39;s caption instead of a X. Note that you need to localize this value yourself.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;closebuttoncolor&lt;/strong&gt;: set to a valid hex color string, for example: &lt;code&gt;#00ff00&lt;/code&gt;, and it will change the close button color from default, regardless of being a text or default X. Only has effect if user has location set to &lt;code&gt;yes&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;footer&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; to show a close button in the footer similar to the iOS &lt;strong&gt;Done&lt;/strong&gt; button. The close button will appear the same as for the header hence use &lt;strong&gt;closebuttoncaption&lt;/strong&gt; and &lt;strong&gt;closebuttoncolor&lt;/strong&gt; to set its properties.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;footercolor&lt;/strong&gt;: set to a valid hex color string, for example &lt;code&gt;#00ff00&lt;/code&gt; or &lt;code&gt;#CC00ff00&lt;/code&gt; (&lt;code&gt;#aarrggbb&lt;/code&gt;) , and it will change the footer color from default. Only has effect if user has &lt;strong&gt;footer&lt;/strong&gt; set to &lt;code&gt;yes&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;hardwareback&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; to use the hardware back button to navigate backwards through the &lt;code&gt;InAppBrowser&lt;/code&gt;&#39;s history. If there is no previous page, the &lt;code&gt;InAppBrowser&lt;/code&gt; will close. The default value is &lt;code&gt;yes&lt;/code&gt;, so you must set it to &lt;code&gt;no&lt;/code&gt; if you want the back button to simply close the InAppBrowser.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;hidenavigationbuttons&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; to hide the navigation buttons on the location toolbar, only has effect if user has location set to &lt;code&gt;yes&lt;/code&gt;. The default value is &lt;code&gt;no&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;hideurlbar&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; to hide the url bar on the location toolbar, only has effect if user has location set to &lt;code&gt;yes&lt;/code&gt;. The default value is &lt;code&gt;no&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;navigationbuttoncolor&lt;/strong&gt;: set to a valid hex color string, for example: &lt;code&gt;#00ff00&lt;/code&gt;, and it will change the color of both navigation buttons from default. Only has effect if user has location set to &lt;code&gt;yes&lt;/code&gt; and not hidenavigationbuttons set to &lt;code&gt;yes&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;toolbarcolor&lt;/strong&gt;: set to a valid hex color string, for example: &lt;code&gt;#00ff00&lt;/code&gt;, and it will change the color the toolbar from default. Only has effect if user has location set to &lt;code&gt;yes&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;lefttoright&lt;/strong&gt;: Set to &lt;code&gt;yes&lt;/code&gt; to swap positions of the navigation buttons and the close button. Specifically, navigation buttons go to the right and close button to the left. Default value is &lt;code&gt;no&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;zoom&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; to show Android browser&#39;s zoom controls, set to &lt;code&gt;no&lt;/code&gt; to hide them. Default value is &lt;code&gt;yes&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;mediaPlaybackRequiresUserAction&lt;/strong&gt;: Set to &lt;code&gt;yes&lt;/code&gt; to prevent HTML5 audio or video from autoplaying (defaults to &lt;code&gt;no&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;shouldPauseOnSuspend&lt;/strong&gt;: Set to &lt;code&gt;yes&lt;/code&gt; to make InAppBrowser WebView to pause/resume with the app to stop background audio (this may be required to avoid Google Play issues like described in &lt;a href=&#34;https://issues.apache.org/jira/browse/CB-11013&#34;&gt;CB-11013&lt;/a&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;useWideViewPort&lt;/strong&gt;: Sets whether the WebView should enable support for the &#34;viewport&#34; HTML meta tag or should use a wide viewport. When the value of the setting is &lt;code&gt;no&lt;/code&gt;, the layout width is always set to the width of the WebView control in device-independent (CSS) pixels. When the value is &lt;code&gt;yes&lt;/code&gt; and the page contains the viewport meta tag, the value of the width specified in the tag is used. If the page does not contain the tag or does not provide a width, then a wide viewport will be used. (defaults to &lt;code&gt;yes&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;fullscreen&lt;/strong&gt;: Sets whether the InappBrowser WebView is displayed fullscreen or not. In fullscreen mode, the status bar is hidden. Default value is &lt;code&gt;yes&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;iOS supports these additional options:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;hidden&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; to create the browser and load the page, but not show it. The loadstop event fires when loading is complete. Omit or set to &lt;code&gt;no&lt;/code&gt; (default) to have the browser open and load normally.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;beforeload&lt;/strong&gt;: set to enable the &lt;code&gt;beforeload&lt;/code&gt; event to modify which pages are actually loaded in the browser. Accepted values are &lt;code&gt;get&lt;/code&gt; to intercept only GET requests, &lt;code&gt;post&lt;/code&gt; to intercept on POST requests or &lt;code&gt;yes&lt;/code&gt; to intercept both GET &amp;amp; POST requests. Note that POST requests are not currently supported and will be ignored (if you set &lt;code&gt;beforeload=post&lt;/code&gt; it will raise an error).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;clearcache&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; to have the browser&#39;s cookie cache cleared before the new window is opened&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;clearsessioncache&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; to have the session cookie cache cleared before the new window is opened. For WKWebView, requires iOS 11+ on target device.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;cleardata&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; to have the browser&#39;s entire local storage cleared (cookies, HTML5 local storage, IndexedDB, etc.) before the new window is opened&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;closebuttoncolor&lt;/strong&gt;: set as a valid hex color string, for example: &lt;code&gt;#00ff00&lt;/code&gt;, to change from the default &lt;strong&gt;Done&lt;/strong&gt; button&#39;s color. Only applicable if toolbar is not disabled.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;closebuttoncaption&lt;/strong&gt;: set to a string to use as the &lt;strong&gt;Done&lt;/strong&gt; button&#39;s caption. Note that you need to localize this value yourself.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;disallowoverscroll&lt;/strong&gt;: Set to &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt; (default is &lt;code&gt;no&lt;/code&gt;). Turns on/off the the bounce of the WKWebView&#39;s UIScrollView.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;hidenavigationbuttons&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt; to turn the toolbar navigation buttons on or off (defaults to &lt;code&gt;no&lt;/code&gt;). Only applicable if toolbar is not disabled.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;navigationbuttoncolor&lt;/strong&gt;: set as a valid hex color string, for example: &lt;code&gt;#00ff00&lt;/code&gt;, to change from the default color. Only applicable if navigation buttons are visible.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;toolbar&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt; to turn the toolbar on or off for the InAppBrowser (defaults to &lt;code&gt;yes&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;toolbarcolor&lt;/strong&gt;: set as a valid hex color string, for example: &lt;code&gt;#00ff00&lt;/code&gt;, to change from the default color of the toolbar. Only applicable if toolbar is not disabled.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;toolbartranslucent&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt; to make the toolbar translucent(semi-transparent) (defaults to &lt;code&gt;yes&lt;/code&gt;). Only applicable if toolbar is not disabled.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;lefttoright&lt;/strong&gt;: Set to &lt;code&gt;yes&lt;/code&gt; to swap positions of the navigation buttons and the close button. Specifically, close button goes to the right and navigation buttons to the left.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;enableViewportScale&lt;/strong&gt;: Set to &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt; to prevent viewport scaling through a meta tag (defaults to &lt;code&gt;no&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;mediaPlaybackRequiresUserAction&lt;/strong&gt;: Set to &lt;code&gt;yes&lt;/code&gt; to prevent HTML5 audio or video from autoplaying (defaults to &lt;code&gt;no&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;allowInlineMediaPlayback&lt;/strong&gt;: Set to &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt; to allow in-line HTML5 media playback, displaying within the browser window rather than a device-specific playback interface. The HTML&#39;s &lt;code&gt;video&lt;/code&gt; element must also include the &lt;code&gt;webkit-playsinline&lt;/code&gt; attribute (defaults to &lt;code&gt;no&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;presentationstyle&lt;/strong&gt;: Set to &lt;code&gt;pagesheet&lt;/code&gt;, &lt;code&gt;formsheet&lt;/code&gt; or &lt;code&gt;fullscreen&lt;/code&gt; to set the &lt;a href=&#34;https://developer.apple.com/documentation/uikit/uimodalpresentationstyle&#34;&gt;presentation style&lt;/a&gt; (defaults to &lt;code&gt;fullscreen&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;transitionstyle&lt;/strong&gt;: Set to &lt;code&gt;fliphorizontal&lt;/code&gt;, &lt;code&gt;crossdissolve&lt;/code&gt; or &lt;code&gt;coververtical&lt;/code&gt; to set the &lt;a href=&#34;https://developer.apple.com/documentation/uikit/uimodaltransitionstyle&#34;&gt;transition style&lt;/a&gt; (defaults to &lt;code&gt;coververtical&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;toolbarposition&lt;/strong&gt;: Set to &lt;code&gt;top&lt;/code&gt; or &lt;code&gt;bottom&lt;/code&gt; (default is &lt;code&gt;bottom&lt;/code&gt;). Causes the toolbar to be at the top or bottom of the window.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;hidespinner&lt;/strong&gt;: Set to &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt; to change the visibility of the loading indicator (defaults to &lt;code&gt;no&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Windows supports these additional options:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;hidden&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; to create the browser and load the page, but not show it. The loadstop event fires when loading is complete. Omit or set to &lt;code&gt;no&lt;/code&gt; (default) to have the browser open and load normally.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;hardwareback&lt;/strong&gt;: works the same way as on Android platform.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;fullscreen&lt;/strong&gt;: set to &lt;code&gt;yes&lt;/code&gt; to create the browser control without a border around it. Please note that if &lt;strong&gt;location=no&lt;/strong&gt; is also specified, there will be no control presented to user to close IAB window.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Platforms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Browser&lt;/li&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;OSX&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;var ref = cordova.InAppBrowser.open(&#39;http://apache.org&#39;, &#39;_blank&#39;, &#39;location=yes&#39;);&#xA;var ref2 = cordova.InAppBrowser.open(encodeURI(&#39;http://ja.m.wikipedia.org/wiki/ハングル&#39;), &#39;_blank&#39;, &#39;location=yes&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OSX Quirks&lt;/h3&gt; &#xA;&lt;p&gt;At the moment the only supported target in OSX is &lt;code&gt;_system&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;_blank&lt;/code&gt; and &lt;code&gt;_self&lt;/code&gt; targets are not yet implemented and are ignored silently. Pull requests and patches to get these to work are greatly appreciated.&lt;/p&gt; &#xA;&lt;h3&gt;iOS Quirks&lt;/h3&gt; &#xA;&lt;p&gt;Since the introduction of iPadOS 13, iPads try to adapt their content mode / user agent for the optimal browsing experience. This may result in iPads having their user agent set to Macintosh, making it hard to detect them as mobile devices using user agent string sniffing. You can change this with the &lt;code&gt;PreferredContentMode&lt;/code&gt; preference in &lt;code&gt;config.xml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;preference name=&#34;PreferredContentMode&#34; value=&#34;mobile&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example above forces the user agent to contain &lt;code&gt;iPad&lt;/code&gt;. The other option is to use the value &lt;code&gt;desktop&lt;/code&gt; to turn the user agent to &lt;code&gt;Macintosh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Browser Quirks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Plugin is implemented via iframe,&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigation history (&lt;code&gt;back&lt;/code&gt; and &lt;code&gt;forward&lt;/code&gt; buttons in LocationBar) is not implemented.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;InAppBrowser&lt;/h2&gt; &#xA;&lt;p&gt;The object returned from a call to &lt;code&gt;cordova.InAppBrowser.open&lt;/code&gt; when the target is set to &lt;code&gt;&#39;_blank&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;addEventListener&lt;/li&gt; &#xA; &lt;li&gt;removeEventListener&lt;/li&gt; &#xA; &lt;li&gt;close&lt;/li&gt; &#xA; &lt;li&gt;show&lt;/li&gt; &#xA; &lt;li&gt;hide&lt;/li&gt; &#xA; &lt;li&gt;executeScript&lt;/li&gt; &#xA; &lt;li&gt;insertCSS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;InAppBrowser.addEventListener&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Adds a listener for an event from the &lt;code&gt;InAppBrowser&lt;/code&gt;. (Only available when the target is set to &lt;code&gt;&#39;_blank&#39;&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;ref.addEventListener(eventname, callback);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ref&lt;/strong&gt;: reference to the &lt;code&gt;InAppBrowser&lt;/code&gt; window &lt;em&gt;(InAppBrowser)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;eventname&lt;/strong&gt;: the event to listen for &lt;em&gt;(String)&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;loadstart&lt;/strong&gt;: event fires when the &lt;code&gt;InAppBrowser&lt;/code&gt; starts to load a URL.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;loadstop&lt;/strong&gt;: event fires when the &lt;code&gt;InAppBrowser&lt;/code&gt; finishes loading a URL.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;loaderror&lt;/strong&gt;: event fires when the &lt;code&gt;InAppBrowser&lt;/code&gt; encounters an error when loading a URL.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;exit&lt;/strong&gt;: event fires when the &lt;code&gt;InAppBrowser&lt;/code&gt; window is closed.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;beforeload&lt;/strong&gt;: event fires when the &lt;code&gt;InAppBrowser&lt;/code&gt; decides whether to load an URL or not (only with option &lt;code&gt;beforeload&lt;/code&gt; set).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: event fires when the &lt;code&gt;InAppBrowser&lt;/code&gt; receives a message posted from the page loaded inside the &lt;code&gt;InAppBrowser&lt;/code&gt; Webview.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;callback&lt;/strong&gt;: the function that executes when the event fires. The function is passed an &lt;code&gt;InAppBrowserEvent&lt;/code&gt; object as a parameter.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#xA;var inAppBrowserRef;&#xA;&#xA;function showHelp(url) {&#xA;&#xA;    var target = &#34;_blank&#34;;&#xA;&#xA;    var options = &#34;location=yes,hidden=yes,beforeload=yes&#34;;&#xA;&#xA;    inAppBrowserRef = cordova.InAppBrowser.open(url, target, options);&#xA;&#xA;    inAppBrowserRef.addEventListener(&#39;loadstart&#39;, loadStartCallBack);&#xA;&#xA;    inAppBrowserRef.addEventListener(&#39;loadstop&#39;, loadStopCallBack);&#xA;&#xA;    inAppBrowserRef.addEventListener(&#39;loaderror&#39;, loadErrorCallBack);&#xA;&#xA;    inAppBrowserRef.addEventListener(&#39;beforeload&#39;, beforeloadCallBack);&#xA;&#xA;    inAppBrowserRef.addEventListener(&#39;message&#39;, messageCallBack);&#xA;}&#xA;&#xA;function loadStartCallBack() {&#xA;&#xA;    $(&#39;#status-message&#39;).text(&#34;loading please wait ...&#34;);&#xA;&#xA;}&#xA;&#xA;function loadStopCallBack() {&#xA;&#xA;    if (inAppBrowserRef != undefined) {&#xA;&#xA;        inAppBrowserRef.insertCSS({ code: &#34;body{font-size: 25px;}&#34; });&#xA;&#xA;        inAppBrowserRef.executeScript({ code: &#34;\&#xA;            var message = &#39;this is the message&#39;;\&#xA;            var messageObj = {my_message: message};\&#xA;            var stringifiedMessageObj = JSON.stringify(messageObj);\&#xA;            webkit.messageHandlers.cordova_iab.postMessage(stringifiedMessageObj);&#34;&#xA;        });&#xA;&#xA;        $(&#39;#status-message&#39;).text(&#34;&#34;);&#xA;&#xA;        inAppBrowserRef.show();&#xA;    }&#xA;&#xA;}&#xA;&#xA;function loadErrorCallBack(params) {&#xA;&#xA;    $(&#39;#status-message&#39;).text(&#34;&#34;);&#xA;&#xA;    var scriptErrorMesssage =&#xA;       &#34;alert(&#39;Sorry we cannot open that page. Message from the server is : &#34;&#xA;       + params.message + &#34;&#39;);&#34;&#xA;&#xA;    inAppBrowserRef.executeScript({ code: scriptErrorMesssage }, executeScriptCallBack);&#xA;&#xA;    inAppBrowserRef.close();&#xA;&#xA;    inAppBrowserRef = undefined;&#xA;&#xA;}&#xA;&#xA;function executeScriptCallBack(params) {&#xA;&#xA;    if (params[0] == null) {&#xA;&#xA;        $(&#39;#status-message&#39;).text(&#xA;           &#34;Sorry we couldn&#39;t open that page. Message from the server is : &#39;&#34;&#xA;           + params.message + &#34;&#39;&#34;);&#xA;    }&#xA;&#xA;}&#xA;&#xA;function beforeloadCallBack(params, callback) {&#xA;&#xA;    if (params.url.startsWith(&#34;http://www.example.com/&#34;)) {&#xA;&#xA;        // Load this URL in the inAppBrowser.&#xA;        callback(params.url);&#xA;    } else {&#xA;&#xA;        // The callback is not invoked, so the page will not be loaded.&#xA;        $(&#39;#status-message&#39;).text(&#34;This browser only opens pages on http://www.example.com/&#34;);&#xA;    }&#xA;&#xA;}&#xA;&#xA;function messageCallBack(params){&#xA;    $(&#39;#status-message&#39;).text(&#34;message received: &#34;+params.data.my_message);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;InAppBrowserEvent Properties&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;type&lt;/strong&gt;: the eventname, either &lt;code&gt;loadstart&lt;/code&gt;, &lt;code&gt;loadstop&lt;/code&gt;, &lt;code&gt;loaderror&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt; or &lt;code&gt;exit&lt;/code&gt;. &lt;em&gt;(String)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;url&lt;/strong&gt;: the URL that was loaded. &lt;em&gt;(String)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;code&lt;/strong&gt;: the error code, only in the case of &lt;code&gt;loaderror&lt;/code&gt;. &lt;em&gt;(Number)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;message&lt;/strong&gt;: the error message, only in the case of &lt;code&gt;loaderror&lt;/code&gt;. &lt;em&gt;(String)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;data&lt;/strong&gt;: the message contents , only in the case of &lt;code&gt;message&lt;/code&gt;. A stringified JSON object. &lt;em&gt;(String)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Platforms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Browser&lt;/li&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;OSX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Browser Quirks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;loadstart&lt;/code&gt;, &lt;code&gt;loaderror&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt; events are not fired.&lt;/p&gt; &#xA;&lt;h3&gt;Windows Quirks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;message&lt;/code&gt; event is not fired.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;var ref = cordova.InAppBrowser.open(&#39;http://apache.org&#39;, &#39;_blank&#39;, &#39;location=yes&#39;);&#xA;ref.addEventListener(&#39;loadstart&#39;, function(event) { alert(event.url); });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;InAppBrowser.removeEventListener&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Removes a listener for an event from the &lt;code&gt;InAppBrowser&lt;/code&gt;. (Only available when the target is set to &lt;code&gt;&#39;_blank&#39;&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;ref.removeEventListener(eventname, callback);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ref&lt;/strong&gt;: reference to the &lt;code&gt;InAppBrowser&lt;/code&gt; window. &lt;em&gt;(InAppBrowser)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;eventname&lt;/strong&gt;: the event to stop listening for. &lt;em&gt;(String)&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;loadstart&lt;/strong&gt;: event fires when the &lt;code&gt;InAppBrowser&lt;/code&gt; starts to load a URL.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;loadstop&lt;/strong&gt;: event fires when the &lt;code&gt;InAppBrowser&lt;/code&gt; finishes loading a URL.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;loaderror&lt;/strong&gt;: event fires when the &lt;code&gt;InAppBrowser&lt;/code&gt; encounters an error loading a URL.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;exit&lt;/strong&gt;: event fires when the &lt;code&gt;InAppBrowser&lt;/code&gt; window is closed.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: event fires when the &lt;code&gt;InAppBrowser&lt;/code&gt; receives a message posted from the page loaded inside the &lt;code&gt;InAppBrowser&lt;/code&gt; Webview.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;callback&lt;/strong&gt;: the function to execute when the event fires. The function is passed an &lt;code&gt;InAppBrowserEvent&lt;/code&gt; object.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Platforms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Browser&lt;/li&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;var ref = cordova.InAppBrowser.open(&#39;http://apache.org&#39;, &#39;_blank&#39;, &#39;location=yes&#39;);&#xA;var myCallback = function(event) { alert(event.url); }&#xA;ref.addEventListener(&#39;loadstart&#39;, myCallback);&#xA;ref.removeEventListener(&#39;loadstart&#39;, myCallback);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;InAppBrowser.close&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Closes the &lt;code&gt;InAppBrowser&lt;/code&gt; window.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;ref.close();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ref&lt;/strong&gt;: reference to the &lt;code&gt;InAppBrowser&lt;/code&gt; window &lt;em&gt;(InAppBrowser)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Platforms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Browser&lt;/li&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;var ref = cordova.InAppBrowser.open(&#39;http://apache.org&#39;, &#39;_blank&#39;, &#39;location=yes&#39;);&#xA;ref.close();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;InAppBrowser.show&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Displays an InAppBrowser window that was opened hidden. Calling this has no effect if the InAppBrowser was already visible.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;ref.show();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ref&lt;/strong&gt;: reference to the InAppBrowser window (&lt;code&gt;InAppBrowser&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Platforms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Browser&lt;/li&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;var ref = cordova.InAppBrowser.open(&#39;http://apache.org&#39;, &#39;_blank&#39;, &#39;hidden=yes&#39;);&#xA;// some time later...&#xA;ref.show();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;InAppBrowser.hide&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Hides the InAppBrowser window. Calling this has no effect if the InAppBrowser was already hidden.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;ref.hide();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ref&lt;/strong&gt;: reference to the InAppBrowser window (&lt;code&gt;InAppBrowser&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Platforms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;var ref = cordova.InAppBrowser.open(&#39;http://apache.org&#39;, &#39;_blank&#39;);&#xA;// some time later...&#xA;ref.hide();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;InAppBrowser.executeScript&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Injects JavaScript code into the &lt;code&gt;InAppBrowser&lt;/code&gt; window. (Only available when the target is set to &lt;code&gt;&#39;_blank&#39;&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;ref.executeScript(details, callback);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ref&lt;/strong&gt;: reference to the &lt;code&gt;InAppBrowser&lt;/code&gt; window. &lt;em&gt;(InAppBrowser)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;injectDetails&lt;/strong&gt;: details of the script to run, specifying either a &lt;code&gt;file&lt;/code&gt; or &lt;code&gt;code&lt;/code&gt; key. &lt;em&gt;(Object)&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;file&lt;/strong&gt;: URL of the script to inject.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: Text of the script to inject.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;callback&lt;/strong&gt;: the function that executes after the JavaScript code is injected.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If the injected script is of type &lt;code&gt;code&lt;/code&gt;, the callback executes with a single parameter, which is the return value of the script, wrapped in an &lt;code&gt;Array&lt;/code&gt;. For multi-line scripts, this is the return value of the last statement, or the last expression evaluated.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Platforms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Browser&lt;/li&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;var ref = cordova.InAppBrowser.open(&#39;http://apache.org&#39;, &#39;_blank&#39;, &#39;location=yes&#39;);&#xA;ref.addEventListener(&#39;loadstop&#39;, function() {&#xA;    ref.executeScript({file: &#34;myscript.js&#34;});&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Browser Quirks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;only &lt;strong&gt;code&lt;/strong&gt; key is supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows Quirks&lt;/h3&gt; &#xA;&lt;p&gt;Due to &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows.ui.xaml.controls.webview.invokescriptasync.aspx&#34;&gt;MSDN docs&lt;/a&gt; the invoked script can return only string values, otherwise the parameter, passed to &lt;strong&gt;callback&lt;/strong&gt; will be &lt;code&gt;[null]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;InAppBrowser.insertCSS&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Injects CSS into the &lt;code&gt;InAppBrowser&lt;/code&gt; window. (Only available when the target is set to &lt;code&gt;&#39;_blank&#39;&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;ref.insertCSS(details, callback);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ref&lt;/strong&gt;: reference to the &lt;code&gt;InAppBrowser&lt;/code&gt; window &lt;em&gt;(InAppBrowser)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;injectDetails&lt;/strong&gt;: details of the script to run, specifying either a &lt;code&gt;file&lt;/code&gt; or &lt;code&gt;code&lt;/code&gt; key. &lt;em&gt;(Object)&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;file&lt;/strong&gt;: URL of the stylesheet to inject.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: Text of the stylesheet to inject.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;callback&lt;/strong&gt;: the function that executes after the CSS is injected.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Platforms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;var ref = cordova.InAppBrowser.open(&#39;http://apache.org&#39;, &#39;_blank&#39;, &#39;location=yes&#39;);&#xA;ref.addEventListener(&#39;loadstop&#39;, function() {&#xA;    ref.insertCSS({file: &#34;mystyles.css&#34;});&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;__&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;sample&#34;&gt;&lt;/a&gt;Sample: Show help pages with an InAppBrowser&lt;/h2&gt; &#xA;&lt;p&gt;You can use this plugin to show helpful documentation pages within your app. Users can view online help documents and then close them without leaving the app.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a few snippets that show how you do this.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-inappbrowser/master/#give&#34;&gt;Give users a way to ask for help&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-inappbrowser/master/#load&#34;&gt;Load a help page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-inappbrowser/master/#let&#34;&gt;Let users know that you&#39;re getting their page ready&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-inappbrowser/master/#show&#34;&gt;Show the help page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-inappbrowser/master/#handle&#34;&gt;Handle page errors&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;give&#34;&gt;&lt;/a&gt;Give users a way to ask for help&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s lots of ways to do this in your app. A drop down list is a simple way to do that.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&#xA;&amp;lt;select id=&#34;help-select&#34;&amp;gt;&#xA;    &amp;lt;option value=&#34;default&#34;&amp;gt;Need help?&amp;lt;/option&amp;gt;&#xA;    &amp;lt;option value=&#34;article&#34;&amp;gt;Show me a helpful article&amp;lt;/option&amp;gt;&#xA;    &amp;lt;option value=&#34;video&#34;&amp;gt;Show me a helpful video&amp;lt;/option&amp;gt;&#xA;    &amp;lt;option value=&#34;search&#34;&amp;gt;Search for other topics&amp;lt;/option&amp;gt;&#xA;&amp;lt;/select&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Gather the users choice in the &lt;code&gt;onDeviceReady&lt;/code&gt; function of the page and then send an appropriate URL to a helper function in some shared library file. Our helper function is named &lt;code&gt;showHelp()&lt;/code&gt; and we&#39;ll write that function next.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#xA;$(&#39;#help-select&#39;).on(&#39;change&#39;, function (e) {&#xA;&#xA;    var url;&#xA;&#xA;    switch (this.value) {&#xA;&#xA;        case &#34;article&#34;:&#xA;            url = &#34;https://cordova.apache.org/docs/en/latest/&#34;&#xA;                        + &#34;reference/cordova-plugin-inappbrowser/index.html&#34;;&#xA;            break;&#xA;&#xA;        case &#34;video&#34;:&#xA;            url = &#34;https://youtu.be/F-GlVrTaeH0&#34;;&#xA;            break;&#xA;&#xA;        case &#34;search&#34;:&#xA;            url = &#34;https://www.google.com/#q=inAppBrowser+plugin&#34;;&#xA;            break;&#xA;    }&#xA;&#xA;    showHelp(url);&#xA;&#xA;});&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;load&#34;&gt;&lt;/a&gt;Load a help page&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ll use the &lt;code&gt;open&lt;/code&gt; function to load the help page. We&#39;re setting the &lt;code&gt;hidden&lt;/code&gt; property to &lt;code&gt;yes&lt;/code&gt; so that we can show the browser only after the page content has loaded. That way, users don&#39;t see a blank browser while they wait for content to appear. When the &lt;code&gt;loadstop&lt;/code&gt; event is raised, we&#39;ll know when the content has loaded. We&#39;ll handle that event shortly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#xA;function showHelp(url) {&#xA;&#xA;    var target = &#34;_blank&#34;;&#xA;&#xA;    var options = &#34;location=yes,hidden=yes&#34;;&#xA;&#xA;    inAppBrowserRef = cordova.InAppBrowser.open(url, target, options);&#xA;&#xA;    inAppBrowserRef.addEventListener(&#39;loadstart&#39;, loadStartCallBack);&#xA;&#xA;    inAppBrowserRef.addEventListener(&#39;loadstop&#39;, loadStopCallBack);&#xA;&#xA;    inAppBrowserRef.addEventListener(&#39;loaderror&#39;, loadErrorCallBack);&#xA;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;let&#34;&gt;&lt;/a&gt;Let users know that you&#39;re getting their page ready&lt;/h3&gt; &#xA;&lt;p&gt;Because the browser doesn&#39;t immediately appear, we can use the &lt;code&gt;loadstart&lt;/code&gt; event to show a status message, progress bar, or other indicator. This assures users that content is on the way.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#xA;function loadStartCallBack() {&#xA;&#xA;    $(&#39;#status-message&#39;).text(&#34;loading please wait ...&#34;);&#xA;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;show&#34;&gt;&lt;/a&gt;Show the help page&lt;/h3&gt; &#xA;&lt;p&gt;When the &lt;code&gt;loadstopcallback&lt;/code&gt; event is raised, we know that the content has loaded and we can make the browser visible. This sort of trick can create the impression of better performance. The truth is that whether you show the browser before content loads or not, the load times are exactly the same.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#xA;function loadStopCallBack() {&#xA;&#xA;    if (inAppBrowserRef != undefined) {&#xA;&#xA;        inAppBrowserRef.insertCSS({ code: &#34;body{font-size: 25px;}&#34; });&#xA;&#xA;        $(&#39;#status-message&#39;).text(&#34;&#34;);&#xA;&#xA;        inAppBrowserRef.show();&#xA;    }&#xA;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might have noticed the call to the &lt;code&gt;insertCSS&lt;/code&gt; function. This serves no particular purpose in our scenario. But it gives you an idea of why you might use it. In this case, we&#39;re just making sure that the font size of your pages have a certain size. You can use this function to insert any CSS style elements. You can even point to a CSS file in your project.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;handle&#34;&gt;&lt;/a&gt;Handle page errors&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes a page no longer exists, a script error occurs, or a user lacks permission to view the resource. How or if you handle that situation is completely up to you and your design. You can let the browser show that message or you can present it in another way.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll try to show that error in a message box. We can do that by injecting a script that calls the &lt;code&gt;alert&lt;/code&gt; function. That said, this won&#39;t work in browsers on Windows devices so we&#39;ll have to look at the parameter of the &lt;code&gt;executeScript&lt;/code&gt; callback function to see if our attempt worked. If it didn&#39;t work out for us, we&#39;ll just show the error message in a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; on the page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#xA;function loadErrorCallBack(params) {&#xA;&#xA;    $(&#39;#status-message&#39;).text(&#34;&#34;);&#xA;&#xA;    var scriptErrorMesssage =&#xA;       &#34;alert(&#39;Sorry we cannot open that page. Message from the server is : &#34;&#xA;       + params.message + &#34;&#39;);&#34;&#xA;&#xA;    inAppBrowserRef.executeScript({ code: scriptErrorMesssage }, executeScriptCallBack);&#xA;&#xA;    inAppBrowserRef.close();&#xA;&#xA;    inAppBrowserRef = undefined;&#xA;&#xA;}&#xA;&#xA;function executeScriptCallBack(params) {&#xA;&#xA;    if (params[0] == null) {&#xA;&#xA;        $(&#39;#status-message&#39;).text(&#xA;           &#34;Sorry we couldn&#39;t open that page. Message from the server is : &#39;&#34;&#xA;           + params.message + &#34;&#39;&#34;);&#xA;    }&#xA;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More Usage Info&lt;/h2&gt; &#xA;&lt;h3&gt;Local Urls ( source is in the app package )&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;var iab = cordova.InAppBrowser;&#xA;&#xA;iab.open(&#39;local-url.html&#39;);                  // loads in the Cordova WebView&#xA;iab.open(&#39;local-url.html&#39;, &#39;_self&#39;);         // loads in the Cordova WebView&#xA;iab.open(&#39;local-url.html&#39;, &#39;_system&#39;);       // Security error: system browser, but url will not load (iOS)&#xA;iab.open(&#39;local-url.html&#39;, &#39;_blank&#39;);        // loads in the InAppBrowser&#xA;iab.open(&#39;local-url.html&#39;, &#39;random_string&#39;); // loads in the InAppBrowser&#xA;iab.open(&#39;local-url.html&#39;, &#39;random_string&#39;, &#39;location=no&#39;); // loads in the InAppBrowser, no location bar&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Whitelisted Content&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;var iab = cordova.InAppBrowser;&#xA;&#xA;iab.open(&#39;http://whitelisted-url.com&#39;);                  // loads in the Cordova WebView&#xA;iab.open(&#39;http://whitelisted-url.com&#39;, &#39;_self&#39;);         // loads in the Cordova WebView&#xA;iab.open(&#39;http://whitelisted-url.com&#39;, &#39;_system&#39;);       // loads in the system browser&#xA;iab.open(&#39;http://whitelisted-url.com&#39;, &#39;_blank&#39;);        // loads in the InAppBrowser&#xA;iab.open(&#39;http://whitelisted-url.com&#39;, &#39;random_string&#39;); // loads in the InAppBrowser&#xA;&#xA;iab.open(&#39;http://whitelisted-url.com&#39;, &#39;random_string&#39;, &#39;location=no&#39;); // loads in the InAppBrowser, no location bar&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Urls that are not white-listed&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;var iab = cordova.InAppBrowser;&#xA;&#xA;iab.open(&#39;http://url-that-fails-whitelist.com&#39;);                  // loads in the InAppBrowser&#xA;iab.open(&#39;http://url-that-fails-whitelist.com&#39;, &#39;_self&#39;);         // loads in the InAppBrowser&#xA;iab.open(&#39;http://url-that-fails-whitelist.com&#39;, &#39;_system&#39;);       // loads in the system browser&#xA;iab.open(&#39;http://url-that-fails-whitelist.com&#39;, &#39;_blank&#39;);        // loads in the InAppBrowser&#xA;iab.open(&#39;http://url-that-fails-whitelist.com&#39;, &#39;random_string&#39;); // loads in the InAppBrowser&#xA;iab.open(&#39;http://url-that-fails-whitelist.com&#39;, &#39;random_string&#39;, &#39;location=no&#39;); // loads in the InAppBrowser, no location bar&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>okta/okta-oidc-ios</title>
    <updated>2022-10-02T01:45:07Z</updated>
    <id>tag:github.com,2022-10-02:/okta/okta-oidc-ios</id>
    <link href="https://github.com/okta/okta-oidc-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Okta with AppAuth&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://devforum.okta.com/&#34;&gt;&lt;img src=&#34;https://aws1.discourse-cdn.com/standard14/uploads/oktadev/original/1X/0c6402653dfb70edc661d4976a43a46f33e5e919.png&#34; align=&#34;right&#34; width=&#34;256px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/okta/okta-oidc-ios&#34;&gt;&lt;img src=&#34;https://github.com/okta/okta-oidc-ios/actions/workflows/okta-oidc.yml/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/OktaOidc&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/OktaOidc.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/OktaOidc&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/OktaOidc.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/OktaOidc&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platforms-ios%20%7C%20osx-lightgrey&#34; alt=&#34;Platforms&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5.0-orange.svg?style=flat&#34; alt=&#34;Swift&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Okta Open ID Connect Library&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a new version of this SDK, the new pod name is &lt;a href=&#34;https://cocoapods.org/pods/OktaOidc&#34;&gt;OktaOidc&lt;/a&gt;. The old &lt;a href=&#34;https://cocoapods.org/pods/OktaAuth&#34;&gt;OktaAuth&lt;/a&gt; pod is now deprecated.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This library is a Swift wrapper around the &lt;a href=&#34;https://github.com/openid/AppAuth-iOS&#34;&gt;AppAuth-iOS&lt;/a&gt; Objective-C code for communicating with Okta as an OAuth 2.0 + OpenID Connect provider, and follows current best practice for native apps using &lt;a href=&#34;https://developer.okta.com/authentication-guide/implementing-authentication/auth-code-pkce&#34;&gt;Authorization Code Flow + PKCE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can learn more on the &lt;a href=&#34;https://developer.okta.com/code/ios/&#34;&gt;Okta + iOS&lt;/a&gt; page in our documentation. You can also download our &lt;a href=&#34;https://github.com/okta/samples-ios/tree/master/browser-sign-in&#34;&gt;sample application&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;!-- TOC depthFrom:2 depthTo:3 --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#supported-platforms&#34;&gt;Supported Platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#usage-guide&#34;&gt;Usage Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#configuration-reference&#34;&gt;Configuration Reference&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#create-oidc-object&#34;&gt;Create OIDC object&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#property-list&#34;&gt;Property list&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#configuration-object&#34;&gt;Configuration object&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#how-to-use-in-objective-c-project&#34;&gt;How to use in Objective-C project&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#api-reference&#34;&gt;API Reference&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#signInWithBrowser&#34;&gt;signInWithBrowser&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#signoutofokta&#34;&gt;signOutOfOkta&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#stateManager&#34;&gt;stateManager&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#introspect&#34;&gt;introspect&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#renew&#34;&gt;renew&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#revoke&#34;&gt;revoke&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#getuser&#34;&gt;getUser&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#development&#34;&gt;Development&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#running-tests&#34;&gt;Running Tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#modify-network-requests&#34;&gt;Modify network requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#migration&#34;&gt;Migration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#known-issues&#34;&gt;Known issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Installing the OktaOidc SDK into your project is simple. The easiest way to include this library into your project is through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An Okta account, called an &lt;em&gt;organization&lt;/em&gt; (sign up for a free &lt;a href=&#34;https://developer.okta.com/signup/&#34;&gt;developer organization&lt;/a&gt; if you need one).&lt;/li&gt; &#xA; &lt;li&gt;An Okta Application, configured as a Native App. This is done from the Okta Developer Console and you can find instructions &lt;a href=&#34;https://developer.okta.com/authentication-guide/implementing-authentication/auth-code-pkce&#34;&gt;here&lt;/a&gt;. When following the wizard, use the default properties. They are designed to work with our sample applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you would like to use your own in-app user interface instead of the web browser, you can do so by using our &lt;a href=&#34;https://github.com/okta/okta-auth-swift&#34;&gt;Swift Authentication SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;Okta OIDC supports iOS 11 and above.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Okta OIDC supports macOS (OS X) 10.14 and above. Library supports both custom schemes; a loopback HTTP redirects via a small embedded server.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to the &lt;code&gt;dependencies&lt;/code&gt; attribute defined in your &lt;code&gt;Package.swift&lt;/code&gt; file. You can select the version using the &lt;code&gt;majorVersion&lt;/code&gt; and &lt;code&gt;minor&lt;/code&gt; parameters. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    dependencies: [&#xA;        .Package(url: &#34;https://github.com/okta/okta-oidc-ios.git&#34;, majorVersion: &amp;lt;majorVersion&amp;gt;, minor: &amp;lt;minor&amp;gt;)&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;Simply add the following line to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;OktaOidc&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install it into your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pod install --repo-update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;To integrate this SDK into your Xcode project using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, specify it in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;okta/okta-oidc-ios&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install it into your project:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure Carthage version is 0.37.0 or higher. Otherwise, Carthage can fail.&lt;/p&gt; &#xA;&lt;h2&gt;Usage Guide&lt;/h2&gt; &#xA;&lt;p&gt;For an overview of this library&#39;s features and authentication flows, check out &lt;a href=&#34;https://developer.okta.com/code/ios&#34;&gt;our developer docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!--&#xA;TODO: Once the developer site provides code walkthroughs, update this with a bulleted list of possible flows.&#xA;--&gt; &#xA;&lt;p&gt;You can also browse the full &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#api-reference&#34;&gt;API reference documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Reference&lt;/h2&gt; &#xA;&lt;h3&gt;Create OIDC object&lt;/h3&gt; &#xA;&lt;p&gt;Before using this SDK you have to create a new object of &lt;code&gt;OktaOidc&lt;/code&gt;. You can instantiate &lt;code&gt;OktaOidc&lt;/code&gt; w/o parameters that means that SDK will use &lt;code&gt;Okta.plist&lt;/code&gt; for configuration values. Alternatively you can create &lt;code&gt;OktaOidc&lt;/code&gt; with custom configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import OktaOidc&#xA;&#xA;// Use the default Okta.plist configuration&#xA;let oktaOidc = OktaOidc()&#xA;&#xA;// Use configuration from another resource&#xA;let config = OktaOidcConfig(/* plist */)&#xA;let config = OktaOidcConfig(/* dictionary */)&#xA;&#xA;// Instantiate OktaOidc with custom configuration object&#xA;let oktaOidc = OktaOidc(configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Need a refresh token?&lt;/strong&gt; A refresh token is a special token that is used to generate additional access and ID tokens. Make sure to include the &lt;code&gt;offline_access&lt;/code&gt; scope in your configuration to silently renew the user&#39;s session in your application!&lt;/p&gt; &#xA;&lt;h3&gt;Property list&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way is to create a property list in your application&#39;s bundle. By default, this library checks for the existence of the file &lt;code&gt;Okta.plist&lt;/code&gt;. However any property list file can be used to create configuration object. Ensure one is created with the following fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;  &amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;issuer&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;https://{yourOktaDomain}.com/oauth2/default&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;clientId&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;{clientId}&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;redirectUri&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;{redirectUri}&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;logoutRedirectUri&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;{logoutRedirectUri}&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;scopes&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;openid profile offline_access&amp;lt;/string&amp;gt;&#xA;  &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration object&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can create a configuration object (&lt;code&gt;OktaOidcConfig&lt;/code&gt;) from dictionary with the required values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let configuration = OktaOidcConfig(with: [&#xA;  &#34;issuer&#34;: &#34;https://{yourOktaDomain}/oauth2/default&#34;,&#xA;  &#34;clientId&#34;: &#34;{clientID}&#34;,&#xA;  &#34;redirectUri&#34;: &#34;{redirectUri}&#34;,&#xA;  &#34;logoutRedirectUri&#34;: &#34;{logoutRedirectUri}&#34;,&#xA;  &#34;scopes&#34;: &#34;openid profile offline_access&#34;,&#xA;  // Custom parameters&#xA;  &#34;login_hint&#34;: &#34;username@email.com&#34;&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disable Single Sign-On for the authentication session&lt;/h3&gt; &#xA;&lt;p&gt;You can disable SSO capabilities by setting &lt;code&gt;noSSO&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;OktaOidcConfig&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let configuration = OktaOidcConfig(with: {YourOidcConfiguration})&#xA;if #available(iOS 13.0, *) {&#xA;    configuration?.noSSO = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/em&gt; Flag is available on iOS 13 and above versions&lt;/p&gt; &#xA;&lt;h3&gt;Token Time Validation&lt;/h3&gt; &#xA;&lt;p&gt;Custom token time validation is possible by adopting to &lt;code&gt;OKTTokenValidator&lt;/code&gt; protocol and then setting &lt;code&gt;tokenValidator&lt;/code&gt; variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;configuration?.tokenValidator = self&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default &lt;code&gt;OKTDefaultTokenValidator&lt;/code&gt; object is set.&lt;/p&gt; &#xA;&lt;h3&gt;How to use in Objective-C project&lt;/h3&gt; &#xA;&lt;p&gt;To use this SDK in Objective-C project, you should do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;use_frameworks!&lt;/code&gt; in your Pod file.&lt;/li&gt; &#xA; &lt;li&gt;Add project setting &lt;code&gt;SWIFT_VERSION = 5.0&lt;/code&gt;. To do this open Build Settings in Xcode, select Edit -&amp;gt; Add Build setting -&amp;gt; Add User-Defined Setting. Specify &lt;code&gt;SWIFT_VERSION&lt;/code&gt; and &lt;code&gt;5.0&lt;/code&gt; as setting name and value correspondently.&lt;/li&gt; &#xA; &lt;li&gt;Include autogenerated header &lt;code&gt;OktaOidc/OktaOidc-Swift.h&lt;/code&gt; into your source code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API Reference&lt;/h2&gt; &#xA;&lt;h3&gt;signInWithBrowser&lt;/h3&gt; &#xA;&lt;p&gt;Start the authorization flow by simply calling &lt;code&gt;signInWithBrowser&lt;/code&gt;. In case of successful authorization, this operation will return valid &lt;code&gt;OktaOidcStateManager&lt;/code&gt; in its callback. Clients are responsible for further storage and maintenance of the manager.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: IDP can be passed by specifying an argument with the idp parameter.&lt;/p&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;oktaOidc.signInWithBrowser(from: viewController, additionalParameters: [&#34;idp&#34;: &#34;your_idp_here&#34;]) { stateManager, error in&#xA;  if let error = error {&#xA;    // Error&#xA;    return&#xA;  }&#xA;&#xA;  // stateManager.accessToken&#xA;  // stateManager.idToken&#xA;  // stateManager.refreshToken&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/WelcomeViewController.swift#L35-L46&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create redirect server configuration and start local HTTP server if you don&#39;t want to use custom schemes&#xA;let serverConfig = OktaRedirectServerConfiguration.default&#xA;serverConfig.port = 63875&#xA;oktaOidc.signInWithBrowser(redirectServerConfiguration: serverConfig, additionalParameters: [&#34;idp&#34;: &#34;your_idp_here&#34;]) { stateManager, error in&#xA;  if let error = error {&#xA;    // Error&#xA;    return&#xA;  }&#xA;&#xA;  // stateManager.accessToken&#xA;  // stateManager.idToken&#xA;  // stateManager.refreshToken&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;signOutOfOkta&lt;/h3&gt; &#xA;&lt;p&gt;This method ends the user&#39;s Okta session in the browser. The method deletes Okta&#39;s persistent cookie and disables SSO capabilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: This method &lt;strong&gt;does not&lt;/strong&gt; clear or revoke tokens minted by Okta. Use the &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#revoke&#34;&gt;&lt;code&gt;revoke&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#clear&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt; methods of &lt;code&gt;OktaOidcStateManager&lt;/code&gt; to terminate the user&#39;s local session in your application.&lt;/p&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Redirects to the configured &#39;logoutRedirectUri&#39; specified in Okta.plist.&#xA;oktaOidc.signOutOfOkta(authStateManager, from: viewController) { error in&#xA;  if let error = error {&#xA;    // Error&#xA;    return&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/SignInViewController.swift#L62-L74&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create redirect server configuration and start local HTTP server if you don&#39;t want to use custom schemes&#xA;let serverConfig = OktaRedirectServerConfiguration.default&#xA;serverConfig.port = 63875&#xA;// Redirects to the configured &#39;logoutRedirectUri&#39; specified in Okta.plist.&#xA;oktaOidc.signOutOfOkta(authStateManager: authStateManager, redirectServerConfiguration: serverConfig) { error in&#xA;  if let error = error {&#xA;    // Error&#xA;    return&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;signOut&lt;/h3&gt; &#xA;&lt;p&gt;This method helps to perform a multi-step sign-out flow. The method provides options that you want to perform and the SDK runs the options as a batch. The available options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;revokeAccessToken&lt;/code&gt; - SDK revokes access token&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;revokeRefreshToken&lt;/code&gt; - SDK revokes refresh token&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;removeTokensFromStorage&lt;/code&gt; - SDK removes tokens from the secure storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;signOutFromOkta&lt;/code&gt; - SDK calls &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#signoutofokta&#34;&gt;&lt;code&gt;signOutOfOkta&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;revokeTokensOptions&lt;/code&gt; - revokes access and refresh tokens&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allOptions&lt;/code&gt; - revokes tokens, signs out from Okta, and removes tokens from the secure storage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The order of operations performed by the SDK:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Revoke the access token, if the option is set. If this step fails step 3 will be omitted.&lt;/li&gt; &#xA; &lt;li&gt;Revoke the refresh token, if the option is set. If this step fails step 3 will be omitted.&lt;/li&gt; &#xA; &lt;li&gt;Remove tokens from the secure storage, if the option is set.&lt;/li&gt; &#xA; &lt;li&gt;Browser sign out, if the option is set.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let options: OktaSignOutOptions = .revokeTokensOptions&#xA;options.insert(.signOutFromOkta)&#xA;oktaOidc?.signOut(authStateManager: authStateManager, from: viewController, progressHandler: { currentOption in&#xA;    if currentOption.contains(.revokeAccessToken) {&#xA;        // update progress&#xA;    } else if currentOption.contains(.revokeRefreshToken) {&#xA;        // update progress&#xA;    } else if currentOption.contains(.signOutFromOkta) {&#xA;        // update progress&#xA;    }&#xA;}, completionHandler: { success, failedOptions in&#xA;    if !success {&#xA;        // handle error&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create redirect server configuration and start local HTTP server if you don&#39;t want to use custom schemes&#xA;let serverConfig = OktaRedirectServerConfiguration.default&#xA;serverConfig.port = 63875&#xA;let options: OktaSignOutOptions = .revokeTokensOptions&#xA;options.insert(.signOutFromOkta)&#xA;oktaOidc?.signOut(authStateManager: authStateManager,&#xA;                  redirectServerConfiguration: serverConfig,&#xA;                  progressHandler: { currentOption in&#xA;    if currentOption.contains(.revokeAccessToken) {&#xA;        // update progress&#xA;    } else if currentOption.contains(.revokeRefreshToken) {&#xA;        // update progress&#xA;    } else if currentOption.contains(.signOutFromOkta) {&#xA;        // update progress&#xA;    }&#xA;}, completionHandler: { success, failedOptions in&#xA;    if !success {&#xA;        // handle error&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;authenticate&lt;/h3&gt; &#xA;&lt;p&gt;If you already signed in to Okta and have a valid session token, you can complete authorization by calling &lt;code&gt;authenticate(withSessionToken:)&lt;/code&gt;. Upon successful authorization, this operation returns a valid &lt;code&gt;OktaOidcStateManager&lt;/code&gt; in the callback. Clients are responsible for further storage and maintenance of the manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;oktaOidc.authenticate(withSessionToken: token) { stateManager, error in&#xA;  self.hideProgress()&#xA;  if let error = error {&#xA;    // Error&#xA;    return&#xA;  }&#xA;&#xA;  // stateManager.accessToken&#xA;  // stateManager.idToken&#xA;  // stateManager.refreshToken&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/custom-sign-in/OktaNativeLogin/UserProfile/UserProfileViewController.swift#L39-L50&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;stateManager&lt;/h3&gt; &#xA;&lt;p&gt;Tokens are securely stored in the Keychain and can be retrieved by accessing the OktaOidcStateManager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stateManager?.accessToken&#xA;stateManager?.idToken&#xA;stateManager?.refreshToken&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;User is responsible for storing OktaAuthStateManager returned by &lt;code&gt;signInWithBrowser&lt;/code&gt; or &lt;code&gt;authenticate&lt;/code&gt; operation. To store manager call the &lt;code&gt;writeToSecureStorage&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;oktaOidc.signInWithBrowser(from: self) { stateManager, error in&#xA;  stateManager.writeToSecureStorage()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/WelcomeViewController.swift#L44&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To retrieve stored manager call &lt;code&gt;readFromSecureStorage(for:)&lt;/code&gt; and pass here Okta configuration that corresponds to a manager you are interested in.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;guard let stateManager = OktaOidcStateManager.readFromSecureStorage(for: oktaConfig) else {&#xA;    // unauthenticated&#xA;}&#xA;&#xA;//authenticated &#xA;// stateManager.accessToken&#xA;// stateManager.idToken&#xA;// stateManager.refreshToken&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/AppDelegate.swift#L32&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In OktaOidc SDK 3.0 we added support for multiple Oauth 2.0 accounts. So developer can use Okta endpoint, social endpoint and others in one application. Therefore &lt;code&gt;OktaOidcStateManager&lt;/code&gt; is stored in keychain using composite key constructed based on configuration. For backward compatibility there is a method &lt;code&gt;readFromSecureStorage()&lt;/code&gt; that tries to read &lt;code&gt;OktaOidcStateManager&lt;/code&gt; stored on a legacy way, so user could retrieve previously stored &lt;code&gt;OktaOidcStateManager&lt;/code&gt; after switching to a newer version of SDK.&lt;/p&gt; &#xA;&lt;h4&gt;introspect&lt;/h4&gt; &#xA;&lt;p&gt;Calls the introspection endpoint to inspect the validity of the specified token.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stateManager?.introspect(token: accessToken, callback: { payload, error in&#xA;  guard let isValid = payload[&#34;active&#34;] as? Bool else {&#xA;    // Error&#xA;    return&#xA;  }&#xA;&#xA;  print(&#34;Is token valid? \(isValid)&#34;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/TokensViewController.swift#L38-L47&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;renew&lt;/h4&gt; &#xA;&lt;p&gt;Since access tokens are traditionally short-lived, you can renew expired tokens by exchanging a refresh token for new ones. See the &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#configuration-reference&#34;&gt;configuration reference&lt;/a&gt; to ensure your app is configured properly for this flow.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stateManager?.renew { newAccessToken, error in&#xA;  if let error = error else {&#xA;    // Error&#xA;    return&#xA;  }&#xA;&#xA;  // renewed TokenManager&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/TokensViewController.swift#L51-L59&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;revoke&lt;/h4&gt; &#xA;&lt;p&gt;Calls the revocation endpoint to revoke the specified token.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stateManager?.revoke(accessToken) { response, error in&#xA;  if let error = error else {&#xA;    // Error&#xA;    return&#xA;  }&#xA;&#xA;  // Token was revoked&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/TokensViewController.swift#L65-L75&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;getUser&lt;/h4&gt; &#xA;&lt;p&gt;Calls the OpenID Connect UserInfo endpoint with the stored access token to return user claim information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stateManager?.getUser { response, error in&#xA;  if let error = error {&#xA;    // Error&#xA;    return&#xA;  }&#xA;&#xA;  // JSON response&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/SignInViewController.swift#L28-L38&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;clear&lt;/h4&gt; &#xA;&lt;p&gt;Removes the local authentication state by removing cached tokens in the keychain.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; SDK deletes all keychain items accessible to an application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stateManager.clear()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/SignInViewController.swift#L70&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;p&gt;To perform an end-to-end test, update the &lt;code&gt;Okta.plist&lt;/code&gt; file to match your configuration as specified in the &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#prerequisites&#34;&gt;prerequisites&lt;/a&gt;. Next, export the following environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export USERNAME={username}&#xA;export PASSWORD={password}&#xA;export CLIENT_ID={clientId}&#xA;export ISSUER=https://{yourOktaDomain}/oauth2/default&#xA;export REDIRECT_URI={redirectUri}&#xA;export LOGOUT_REDIRECT_URI={logoutRedirectUri}&#xA;&#xA;# Run E2E end Unit tests&#xA;bash ./scripts/build-and-test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;You may need to update the emulator device to match your Xcode version.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Modify network requests&lt;/h2&gt; &#xA;&lt;p&gt;You can track and modify network requests made by &lt;code&gt;OktaOidc&lt;/code&gt;. In order to do this, create an object conforming to the &lt;code&gt;OktaNetworkRequestCustomizationDelegate&lt;/code&gt; protocol and set it to the &lt;code&gt;requestCustomizationDelegate&lt;/code&gt; property on an &lt;code&gt;OktaOidcConfig&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let configuration = OktaOidcConfig(with: {YourOidcConfiguration})&#xA;configuration.requestCustomizationDelegate = {YourDelegateInstance}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, delegate could be implemented as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension SomeNSObject: OktaNetworkRequestCustomizationDelegate {&#xA;&#xA;    func customizableURLRequest(_ request: URLRequest?) -&amp;gt; URLRequest? {&#xA;        guard var modifiedRequest = request else {&#xA;            return nil&#xA;        }&#xA;        modifiedRequest.setValue(&#34;Some value&#34;, forHTTPHeaderField: &#34;custom-header-field&#34;)&#xA;        print(&#34;Okta OIDC network request: \(modifiedRequest)&#34;)&#xA;        return modifiedRequest&#xA;    }&#xA;&#xA;    func didReceive(_ response: URLResponse?) {&#xA;        guard let response = response else {&#xA;            return&#xA;        }&#xA;        print(&#34;Okta OIDC network response: \(response)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; It is highly recommended to copy all of the existing parameters from the original URLRequest object to modified request without any changes. Altering of this data could lead network request to fail. If &lt;code&gt;customizableURLRequest(_:)&lt;/code&gt; method returns &lt;code&gt;nil&lt;/code&gt; default request will be used.&lt;/p&gt; &#xA;&lt;h2&gt;Migration&lt;/h2&gt; &#xA;&lt;h3&gt;Migrating from 3.10.x to 3.11.x&lt;/h3&gt; &#xA;&lt;p&gt;The SDK &lt;code&gt;okta-oidc-ios&lt;/code&gt; has a major changes in error handling. Consider these guidelines to update your code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;APIError&lt;/code&gt; is renamed as &lt;code&gt;api&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;api&lt;/code&gt; error has the additional parameter &lt;code&gt;underlyingError&lt;/code&gt;, it&#39;s an optional and indicates the origin of the error.&lt;/li&gt; &#xA; &lt;li&gt;Introduced a new error &lt;code&gt;authorization(error:description:)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;authorization&lt;/code&gt; error appears when authorization server fails due to errors during authorization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unexpectedAuthCodeResponse(statusCode:)&lt;/code&gt; has an error code parameter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OktaOidcError&lt;/code&gt; conforms to &lt;code&gt;CustomNSError&lt;/code&gt; protocol. It means you can convert the error to &lt;code&gt;NSError&lt;/code&gt; and get &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;userInfo&lt;/code&gt;, &lt;code&gt;domain&lt;/code&gt;, &lt;code&gt;underlyingErrors&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OktaOidcError&lt;/code&gt; conforms to &lt;code&gt;Equatable&lt;/code&gt; protocol. The errors can be compared for equality using the operator &lt;code&gt;==&lt;/code&gt; or inequality using the operator &lt;code&gt;!=&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;h3&gt;iOS shows permission dialog(&lt;code&gt;{App} Wants to Use {Auth Domain} to Sign In&lt;/code&gt;) for Okta Sign Out flows&lt;/h3&gt; &#xA;&lt;p&gt;Known iOS issue where iOS doesn&#39;t provide any good ways to terminate active authentication session and delete SSO cookies. The only proper way for now is to use &lt;code&gt;ASWebAuthenticationSession&lt;/code&gt; class to terminate the session. &lt;code&gt;ASWebAuthenticationSession&lt;/code&gt; deletes all SSO cookies however shows &lt;code&gt;Sign In&lt;/code&gt; persmissions dialog 🤯&lt;/p&gt; &#xA;&lt;p&gt;You can also consider the following workarounds:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;noSSO&lt;/code&gt; option in OIDC configuration object if you don&#39;t need SSO capabilites. Also note that this option works only on iOS 13+ versions&lt;/li&gt; &#xA; &lt;li&gt;Fork repository and change user-agent implementation(&lt;code&gt;OIDExternalUserAgentIOS.m&lt;/code&gt;) to use &lt;code&gt;SFSafariViewController&lt;/code&gt; only. Some pitfalls of this approach described &lt;a href=&#34;https://github.com/okta/okta-oidc-ios/issues/181&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to all of our open-source packages. Please, see the &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; to understand how to structure a contribution.&lt;/p&gt;</summary>
  </entry>
</feed>