<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-25T01:42:45Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>umich-mac/jolt</title>
    <updated>2022-12-25T01:42:45Z</updated>
    <id>tag:github.com,2022-12-25:/umich-mac/jolt</id>
    <link href="https://github.com/umich-mac/jolt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prevent Mac sleep&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>PromiseKit/Social</title>
    <updated>2022-12-25T01:42:45Z</updated>
    <id>tag:github.com,2022-12-25:/PromiseKit/Social</id>
    <link href="https://github.com/PromiseKit/Social" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Promises for Swift &amp; ObjC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PromiseKit Social Extensions &lt;img src=&#34;https://travis-ci.org/PromiseKit/Social.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This project adds promises to Appleâ€™s Social framework.&lt;/p&gt; &#xA;&lt;h2&gt;CocoaPods&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#34;PromiseKit/Social&#34;, &#34;~&amp;gt; 6.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The extensions are built into &lt;code&gt;PromiseKit.framework&lt;/code&gt; thus nothing else is needed.&lt;/p&gt; &#xA;&lt;h2&gt;Carthage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;PromiseKit/Social&#34; ~&amp;gt; 3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The extensions are built into their own framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift&#xA;import PromiseKit&#xA;import PMKSocial&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// objc&#xA;@import PromiseKit;&#xA;@import PMKSocial;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>card-io/card.io-iOS-SDK</title>
    <updated>2022-12-25T01:42:45Z</updated>
    <id>tag:github.com,2022-12-25:/card-io/card.io-iOS-SDK</id>
    <link href="https://github.com/card-io/card.io-iOS-SDK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;card.io provides fast, easy credit card scanning in mobile apps&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.card.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/card-io/card.io-iOS-source/master/Resources/cardio_logo_220.png&#34; alt=&#34;card.io logo&#34; title=&#34;card.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;card.io SDK for iOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.card.io/&#34;&gt;card.io&lt;/a&gt; provides fast, easy credit card scanning in mobile apps.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h4&gt;&lt;em&gt;NEW!!! card.io is now an open-source project!&lt;/em&gt;&lt;/h4&gt; &#xA; &lt;p&gt;As of December 2014, all of the source code for card.io is now available at the &lt;a href=&#34;https://github.com/card-io/card.io-iOS-source&#34;&gt;card.io-iOS-source repo&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;h5&gt;What does this mean for you?&lt;/h5&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;If you simply wish to integrate card.io into your mobile apps, then you can (and probably should) ignore the existence of &lt;a href=&#34;https://github.com/card-io/card.io-iOS-source&#34;&gt;card.io-iOS-source&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;But if you&#39;re curious about how card.io performs its magic, or if you&#39;d like to improve the appearance or behavior of card.io, then come visit &lt;a href=&#34;https://github.com/card-io/card.io-iOS-source&#34;&gt;card.io-iOS-source&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Brought to you by&lt;br&gt; &lt;a href=&#34;https://paypal.com/&#34; title=&#34;PayPal&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/card-io/card.io-iOS-source/master/Resources/pp_h_rgb.png&#34; alt=&#34;PayPal logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Stay up to date&lt;/h2&gt; &#xA;&lt;p&gt;Please keep your app up to date with the latest version of the SDK. All releases follow &lt;a href=&#34;http://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To receive updates about new versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/cardio&#34;&gt;@cardio&lt;/a&gt; (also great to send us feedback)&lt;/li&gt; &#xA; &lt;li&gt;Subscribe to our &lt;a href=&#34;https://groups.google.com/forum/#!forum/card-io-sdk-announce&#34;&gt;card-io-sdk-announce&lt;/a&gt; list&lt;/li&gt; &#xA; &lt;li&gt;&#34;Watch&#34; this GitHub repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find and start technical discussions using the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/card.io&#34;&gt;Stack Overflow card.io tag&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample app&lt;/h2&gt; &#xA;&lt;p&gt;For a quick first look at card.io, we have included a very small sample application that you can build and run.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version of the SDK.&lt;/li&gt; &#xA; &lt;li&gt;Simply open the &lt;code&gt;SampleApp&lt;/code&gt; folder or the &lt;code&gt;SampleApp-Swift&lt;/code&gt; folder and follow the instructions in the &lt;code&gt;README.md&lt;/code&gt; file you find there.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;The card.io iOS SDK includes header files and a single static library. We&#39;ll walk you through integration and usage.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The latest non-beta version of Xcode. (Older or newer versions &lt;em&gt;might&lt;/em&gt; also work.)&lt;/li&gt; &#xA; &lt;li&gt;Supports target deployment of iOS version 6.1+ and instruction set armv7+ (including 64-bit).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;h5&gt;If you use &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, then add this line to your podfile:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;CardIO&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;If you don&#39;t use CocoaPods, then:&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version of the SDK.&lt;/li&gt; &#xA; &lt;li&gt;Add the CardIO directory (containing several .h files, &lt;code&gt;libCardIO.a&lt;/code&gt;, &lt;code&gt;libopencv_core.a&lt;/code&gt;, and &lt;code&gt;libopencv_imgproc.a&lt;/code&gt;) to your Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;In your project&#39;s Build Settings (in the &lt;code&gt;TARGETS&lt;/code&gt; section, not the &lt;code&gt;PROJECTS&lt;/code&gt; section), add &lt;code&gt;-lc++&lt;/code&gt; to &lt;code&gt;Other Linker Flags&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Either:&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add these frameworks to your project. &lt;a href=&#34;http://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/cross_development/Configuring/configuring.html&#34;&gt;Weak linking&lt;/a&gt; is supported. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Accelerate&lt;/li&gt; &#xA;   &lt;li&gt;AudioToolbox&lt;/li&gt; &#xA;   &lt;li&gt;AVFoundation&lt;/li&gt; &#xA;   &lt;li&gt;CoreGraphics&lt;/li&gt; &#xA;   &lt;li&gt;CoreMedia&lt;/li&gt; &#xA;   &lt;li&gt;CoreVideo&lt;/li&gt; &#xA;   &lt;li&gt;Foundation&lt;/li&gt; &#xA;   &lt;li&gt;MobileCoreServices&lt;/li&gt; &#xA;   &lt;li&gt;OpenGLES&lt;/li&gt; &#xA;   &lt;li&gt;QuartzCore&lt;/li&gt; &#xA;   &lt;li&gt;Security&lt;/li&gt; &#xA;   &lt;li&gt;UIKit&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;em&gt;or:&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add only these frameworks to your project (as &lt;code&gt;Optional&lt;/code&gt; [i.e., weak-linked] libraries): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Accelerate&lt;/li&gt; &#xA;   &lt;li&gt;AVFoundation&lt;/li&gt; &#xA;   &lt;li&gt;AudioToolbox&lt;/li&gt; &#xA;   &lt;li&gt;CoreMedia&lt;/li&gt; &#xA;   &lt;li&gt;MobileCoreServices&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;and confirm that these two Build Settings are both enabled: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Enable Modules (C and Objective-C)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Link Frameworks Automatically&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;With or without CocoaPods:&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;a href=&#34;https://raw.githubusercontent.com/card-io/card.io-iOS-SDK/master/acknowledgments.md&#34;&gt;card.io&#39;s open source license acknowledgments&lt;/a&gt; to &lt;a href=&#34;http://stackoverflow.com/questions/3966116/where-to-put-open-source-credit-information-for-an-iphone-app&#34;&gt;your app&#39;s acknowledgments&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Refer to the header files for more usage options and information.&lt;/li&gt; &#xA; &lt;li&gt;You should add the key &lt;a href=&#34;https://developer.apple.com/library/prerelease/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW24&#34;&gt;&lt;code&gt;NSCameraUsageDescription&lt;/code&gt;&lt;/a&gt; to your app&#39;s &lt;code&gt;Info.plist&lt;/code&gt; and set the value to be a string describing why your app needs to use the camera (e.g. &#34;To scan credit cards.&#34;). This string will be displayed when the app initially requests permission to access the camera.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Sample code&lt;/h3&gt; &#xA;&lt;p&gt;You can use card.io in two ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;As a view controller&lt;/strong&gt;: &lt;em&gt;Quick and easy.&lt;/em&gt; Create a &lt;code&gt;CardIOPaymentViewController&lt;/code&gt; and present it modally. The card.io view controller handles all aspects of the UX, including manual entry as a fallback, all transitions, and number confirmation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;As a view&lt;/strong&gt;: &lt;em&gt;More flexible.&lt;/em&gt; Create a &lt;code&gt;CardIOView&lt;/code&gt; to do card scanning only and manage everything else yourself. This enables a broader range of presentations, such as in-place transitions, but requires that you handle the rest of the UI yourself.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Integrate as a View Controller&lt;/h4&gt; &#xA;&lt;p&gt;Create a class (most likely a subclass of &lt;code&gt;UIViewController&lt;/code&gt;) that conforms to &lt;code&gt;CardIOPaymentViewControllerDelegate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.h&#xA;&#xA;#import &#34;CardIO.h&#34;&#xA;@interface SomeViewController : UIViewController&amp;lt;CardIOPaymentViewControllerDelegate&amp;gt;&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make an optional call to speed up the subsequent launch of card.io scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)viewWillAppear:(BOOL)animated {&#xA;  [super viewWillAppear:animated];&#xA;  [CardIOUtilities preloadCardIO];&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start card.io card scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (IBAction)scanCard:(id)sender {&#xA;  CardIOPaymentViewController *scanViewController = [[CardIOPaymentViewController alloc] initWithPaymentDelegate:self];&#xA;  [self presentViewController:scanViewController animated:YES completion:nil];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write delegate methods to receive the card info or a cancellation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)userDidCancelPaymentViewController:(CardIOPaymentViewController *)scanViewController {&#xA;  NSLog(@&#34;User canceled payment info&#34;);&#xA;  // Handle user cancellation here...&#xA;  [scanViewController dismissViewControllerAnimated:YES completion:nil];&#xA;}&#xA;&#xA;- (void)userDidProvideCreditCardInfo:(CardIOCreditCardInfo *)info inPaymentViewController:(CardIOPaymentViewController *)scanViewController {&#xA;  // The full card number is available as info.cardNumber, but don&#39;t log that!&#xA;  NSLog(@&#34;Received card info. Number: %@, expiry: %02i/%i, cvv: %@.&#34;, info.redactedCardNumber, info.expiryMonth, info.expiryYear, info.cvv);&#xA;  // Use the card info...&#xA;  [scanViewController dismissViewControllerAnimated:YES completion:nil];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Integrate as a View&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;CardIOView is new as of card.io Version 3.3.0 (September 2013). We look forward to seeing how creative developers integrate it into their apps. If you do something cool with it, share it with &lt;a href=&#34;https://twitter.com/cardio&#34;&gt;@cardio&lt;/a&gt;! We also look forward to quickly resolving any issues that you may discover.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a class (most likely a subclass of &lt;code&gt;UIViewController&lt;/code&gt;) that conforms to &lt;code&gt;CardIOViewDelegate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.h&#xA;&#xA;#import &#34;CardIO.h&#34;&#xA;@interface SomeViewController : UIViewController&amp;lt;CardIOViewDelegate&amp;gt;&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using a CardIOView provides UI flexibility. Here are two sample integration options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a CardIOView when you need it, and then delete it when its work is finished.&lt;/li&gt; &#xA; &lt;li&gt;Include a hidden CardIOView in your view, show it when you need it, and then hide it when its work is finished.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Option 1: Create a CardIOView when you need it&lt;/h5&gt; &#xA;&lt;p&gt;Confirm that the user&#39;s device is capable of scanning cards:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)viewDidLoad {&#xA;  [super viewDidLoad];&#xA;&#xA;  if (![CardIOUtilities canReadCardWithCamera]) {&#xA;    // Hide your &#34;Scan Card&#34; button, or take other appropriate action...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make an optional call to speed up the subsequent launch of card.io scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)viewWillAppear:(BOOL)animated {&#xA;  [super viewWillAppear:animated];&#xA;  [CardIOUtilities preloadCardIO];&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start card.io card scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (IBAction)scanCard:(id)sender {&#xA;  CardIOView *cardIOView = [[CardIOView alloc] initWithFrame:CGRECT_WITHIN_YOUR_VIEW];&#xA;  cardIOView.delegate = self;&#xA;  &#xA;  [self.view addSubview:cardIOView];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write the delegate method to receive the results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)cardIOView:(CardIOView *)cardIOView didScanCard:(CardIOCreditCardInfo *)info {&#xA;    if (info) {&#xA;    // The full card number is available as info.cardNumber, but don&#39;t log that!&#xA;    NSLog(@&#34;Received card info. Number: %@, expiry: %02i/%i, cvv: %@.&#34;, info.redactedCardNumber, info.expiryMonth, info.expiryYear, info.cvv);&#xA;    // Use the card info...&#xA;  }&#xA;  else {&#xA;    NSLog(@&#34;User cancelled payment info&#34;);&#xA;    // Handle user cancellation here...&#xA;  }&#xA;  &#xA;  [cardIOView removeFromSuperview];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Include a method to cancel card scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (IBAction)cancelScanCard:(id)sender {&#xA;  [cardIOView removeFromSuperview];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Option 2: Include a hidden CardIOView in your view&lt;/h5&gt; &#xA;&lt;p&gt;Make an IBOutlet property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;@interface SomeViewController ()&#xA;@property(nonatomic, strong, readwrite) IBOutlet CardIOView *cardIOView;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your .xib, include a CardIOView, mark it as &lt;code&gt;hidden&lt;/code&gt;, and connect it to the IBOutlet property. (Note: usually you will want to set the background color of the CardIOView to &lt;code&gt;clearColor&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;After confirming that the user&#39;s device is capable of scanning cards, set the &lt;code&gt;delegate&lt;/code&gt; property of the CardIOView:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)viewDidLoad {&#xA;  [super viewDidLoad];&#xA;&#xA;  if (![CardIOUtilities canReadCardWithCamera]) {&#xA;    // Hide your &#34;Scan Card&#34; button, remove the CardIOView from your view, and/or take other appropriate action...&#xA;  } else {&#xA;    self.cardIOView.delegate = self;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make an optional call to speed up the subsequent launch of card.io scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)viewWillAppear:(BOOL)animated {&#xA;  [super viewWillAppear:animated];&#xA;  [CardIOUtilities preloadCardIO];&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start card.io card scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (IBAction)scanCard:(id)sender {&#xA;  self.cardIOView.hidden = NO;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write the delegate method to receive the results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)cardIOView:(CardIOView *)cardIOView didScanCard:(CardIOCreditCardInfo *)info {&#xA;    if (info) {&#xA;    // The full card number is available as info.cardNumber, but don&#39;t log that!&#xA;    NSLog(@&#34;Received card info. Number: %@, expiry: %02i/%i, cvv: %@.&#34;, info.redactedCardNumber, info.expiryMonth, info.expiryYear, info.cvv);&#xA;    // Use the card info...&#xA;  }&#xA;  else {&#xA;    NSLog(@&#34;User canceled payment info&#34;);&#xA;    // Handle user cancellation here...&#xA;  }&#xA;&#xA;  cardIOView.hidden = YES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Include a method to cancel card scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (IBAction)cancelScanCard:(id)sender {&#xA;  self.cardIOView.hidden = YES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hints &amp;amp; Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Processing images can be memory intensive, so make sure to test that your app properly handles memory warnings.&lt;/li&gt; &#xA; &lt;li&gt;For your users&#39; security, &lt;a href=&#34;https://viaforensics.com/resources/reports/best-practices-ios-android-secure-mobile-development/ios-avoid-cached-application-snapshots/&#34;&gt;obscure your app&#39;s cached screenshots&lt;/a&gt;.&lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; By default, a &lt;code&gt;CardIOPaymentViewController&lt;/code&gt; automatically blurs its own screens when the app is backgrounded. A &lt;code&gt;CardIOView&lt;/code&gt; does not do any automatic blurring.&lt;/li&gt; &#xA; &lt;li&gt;The first time that you create either a &lt;code&gt;CardIOPaymentViewController&lt;/code&gt; or a &lt;code&gt;CardIOView&lt;/code&gt;, the card.io SDK must load resources, which can result in a noticeable delay. To avoid this delay you may optionally call &lt;code&gt;[CardIOUtilities preloadCardIO]&lt;/code&gt; in advance, so that this resource loading occurs in advance on a background thread.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>