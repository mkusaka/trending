<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-06T01:44:17Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>youtube/youtube-ios-player-helper</title>
    <updated>2025-07-06T01:44:17Z</updated>
    <id>tag:github.com,2025-07-06:/youtube/youtube-ios-player-helper</id>
    <link href="https://github.com/youtube/youtube-ios-player-helper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight helper library that allows iOS developers to add inline playback of YouTube videos through a WebView&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;YouTube-Player-iOS-Helper&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/youtube-ios-player-helper&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/v/youtube-ios-player-helper/badge.png&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/youtube-ios-player-helper&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/p/youtube-ios-player-helper/badge.png&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;To run the example project; clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Project directory first. For a simple tutorial see this Google Developers article - &lt;a href=&#34;https://developers.google.com/youtube/v3/guides/ios_youtube_helper&#34;&gt;Using the YouTube Helper Library to embed YouTube videos in your iOS application&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;YouTube-Player-iOS-Helper is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install the library, add the following line to your Podfile and replace &#34;x.y.z&#34; with the latest version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#34;youtube-ios-player-helper&#34;, &#34;~&amp;gt; x.y.z&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Add the following line to the dependencies in your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(&#34;https://github.com/youtube/youtube-ios-player-helper.git&#34;, from: &#34;x.y.z&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;YouTubeiOSPlayerHelper&lt;/code&gt; to your target&#39;s dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(name: &#34;TargetName&#34;,&#xA;        dependencies: [&#xA;          &#34;YouTubeiOSPlayerHelper&#34;&#xA;        ]&#xA;      )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;After installing in your project, to use the library:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Drag a UIView the desired size of your player onto your Storyboard.&lt;/li&gt; &#xA; &lt;li&gt;Change the UIView&#39;s class in the Identity Inspector tab to YTPlayerView&lt;/li&gt; &#xA; &lt;li&gt;Import &#34;YTPlayerView.h&#34; in your ViewController.&lt;/li&gt; &#xA; &lt;li&gt;Add the following property to your ViewController&#39;s header file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;    @property(nonatomic, strong) IBOutlet YTPlayerView *playerView;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Load the video into the player in your controller&#39;s code with the following code:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;    [self.playerView loadWithVideoId:@&#34;M7lc1UVf-VE&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Run your code!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See the sample project for more advanced uses, including passing additional player parameters and working with callbacks via YTPlayerViewDelegate.&lt;/p&gt; &#xA;&lt;h2&gt;Original Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ikai Lan&lt;/li&gt; &#xA; &lt;li&gt;Ibrahim Ulukaya&lt;/li&gt; &#xA; &lt;li&gt;Yoshifumi Yamaguchi&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;YouTube-Player-iOS-Helper is available under the Apache 2.0 license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/cordova-plugin-network-information</title>
    <updated>2025-07-06T01:44:17Z</updated>
    <id>tag:github.com,2025-07-06:/apache/cordova-plugin-network-information</id>
    <link href="https://github.com/apache/cordova-plugin-network-information" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Cordova Network Information Plugin&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;title: Network Information description: Get information about wireless connectivity.&lt;/h2&gt; &#xA;&lt;!--&#xA;# license: Licensed to the Apache Software Foundation (ASF) under one&#xA;#         or more contributor license agreements.  See the NOTICE file&#xA;#         distributed with this work for additional information&#xA;#         regarding copyright ownership.  The ASF licenses this file&#xA;#         to you under the Apache License, Version 2.0 (the&#xA;#         &#34;License&#34;); you may not use this file except in compliance&#xA;#         with the License.  You may obtain a copy of the License at&#xA;#&#xA;#           http://www.apache.org/licenses/LICENSE-2.0&#xA;#&#xA;#         Unless required by applicable law or agreed to in writing,&#xA;#         software distributed under the License is distributed on an&#xA;#         &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY&#xA;#         KIND, either express or implied.  See the License for the&#xA;#         specific language governing permissions and limitations&#xA;#         under the License.&#xA;--&gt; &#xA;&lt;h1&gt;cordova-plugin-network-information&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/android.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/android.yml/badge.svg?sanitize=true&#34; alt=&#34;Android Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/chrome.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/chrome.yml/badge.svg?sanitize=true&#34; alt=&#34;Chrome Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/ios.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/ios.yml/badge.svg?sanitize=true&#34; alt=&#34;iOS Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Lint Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugin provides an implementation of an old version of the &lt;a href=&#34;http://www.w3.org/TR/2011/WD-netinfo-api-20110607/&#34;&gt;Network Information API&lt;/a&gt;. It provides information about the device&#39;s cellular and wifi connection, and whether the device has an internet connection.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To get a few ideas how to use the plugin, check out the &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-network-information/master/#sample&#34;&gt;sample&lt;/a&gt; at the bottom of this page or go straight to the &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-network-information/master/#reference&#34;&gt;reference&lt;/a&gt; content.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cordova plugin add cordova-plugin-network-information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Browser&lt;/li&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Connection&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;connection&lt;/code&gt; object, exposed via &lt;code&gt;navigator.connection&lt;/code&gt;, provides information about the device&#39;s cellular and wifi connection.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Properties&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;connection.type&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Constants&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connection.UNKNOWN&lt;/li&gt; &#xA; &lt;li&gt;Connection.ETHERNET&lt;/li&gt; &#xA; &lt;li&gt;Connection.WIFI&lt;/li&gt; &#xA; &lt;li&gt;Connection.CELL_2G&lt;/li&gt; &#xA; &lt;li&gt;Connection.CELL_3G&lt;/li&gt; &#xA; &lt;li&gt;Connection.CELL_4G&lt;/li&gt; &#xA; &lt;li&gt;Connection.CELL&lt;/li&gt; &#xA; &lt;li&gt;Connection.NONE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;connection.type&lt;/h2&gt; &#xA;&lt;p&gt;This property offers a fast way to determine the device&#39;s network connection state, and type of connection.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function checkConnection() {&#xA;    var networkState = navigator.connection.type;&#xA;&#xA;    var states = {};&#xA;    states[Connection.UNKNOWN]  = &#39;Unknown connection&#39;;&#xA;    states[Connection.ETHERNET] = &#39;Ethernet connection&#39;;&#xA;    states[Connection.WIFI]     = &#39;WiFi connection&#39;;&#xA;    states[Connection.CELL_2G]  = &#39;Cell 2G connection&#39;;&#xA;    states[Connection.CELL_3G]  = &#39;Cell 3G connection&#39;;&#xA;    states[Connection.CELL_4G]  = &#39;Cell 4G connection&#39;;&#xA;    states[Connection.CELL]     = &#39;Cell generic connection&#39;;&#xA;    states[Connection.NONE]     = &#39;No network connection&#39;;&#xA;&#xA;    alert(&#39;Connection type: &#39; + states[networkState]);&#xA;}&#xA;&#xA;checkConnection();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS Quirks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&amp;lt;iOS7 can&#39;t detect the type of cellular network connection. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;navigator.connection.type&lt;/code&gt; is set to &lt;code&gt;Connection.CELL&lt;/code&gt; for all cellular data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows Quirks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When running in the Phone 8.1 emulator, always detects &lt;code&gt;navigator.connection.type&lt;/code&gt; as &lt;code&gt;Connection.ETHERNET&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Browser Quirks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Browser can&#39;t detect the type of network connection. &lt;code&gt;navigator.connection.type&lt;/code&gt; is always set to &lt;code&gt;Connection.UNKNOWN&lt;/code&gt; when online.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Network-related Events&lt;/h1&gt; &#xA;&lt;h2&gt;offline&lt;/h2&gt; &#xA;&lt;p&gt;The event fires when an application goes offline, and the device is not connected to the Internet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;document.addEventListener(&#34;offline&#34;, yourCallbackFunction, false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Details&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;offline&lt;/code&gt; event fires when a previously connected device loses a network connection so that an application can no longer access the Internet. It relies on the same information as the Connection API, and fires when the value of &lt;code&gt;connection.type&lt;/code&gt; becomes &lt;code&gt;NONE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Applications typically should use &lt;code&gt;document.addEventListener&lt;/code&gt; to attach an event listener once the &lt;code&gt;deviceready&lt;/code&gt; event fires.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;document.addEventListener(&#34;offline&#34;, onOffline, false);&#xA;&#xA;function onOffline() {&#xA;    // Handle the offline event&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quirks&lt;/h3&gt; &#xA;&lt;p&gt;This plugin is unable to broadcast events while in the background. Use &lt;code&gt;navigator.connection.type&lt;/code&gt; to check connection status on the &lt;a href=&#34;https://cordova.apache.org/docs/en/latest/cordova/events/events.html#resume&#34;&gt;resume&lt;/a&gt; event instead.&lt;/p&gt; &#xA;&lt;h3&gt;iOS Quirks&lt;/h3&gt; &#xA;&lt;p&gt;During initial startup, the first offline event (if applicable) takes at least a second to fire.&lt;/p&gt; &#xA;&lt;h2&gt;online&lt;/h2&gt; &#xA;&lt;p&gt;This event fires when an application goes online, and the device becomes connected to the Internet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;document.addEventListener(&#34;online&#34;, yourCallbackFunction, false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Details&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;online&lt;/code&gt; event fires when a previously unconnected device receives a network connection to allow an application access to the Internet. It relies on the same information as the Connection API, and fires when the &lt;code&gt;connection.type&lt;/code&gt; changes from &lt;code&gt;NONE&lt;/code&gt; to any other value.&lt;/p&gt; &#xA;&lt;p&gt;Applications typically should use &lt;code&gt;document.addEventListener&lt;/code&gt; to attach an event listener once the &lt;code&gt;deviceready&lt;/code&gt; event fires.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;document.addEventListener(&#34;online&#34;, onOnline, false);&#xA;&#xA;function onOnline() {&#xA;    // Handle the online event&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quirks&lt;/h3&gt; &#xA;&lt;p&gt;This plugin is unable to broadcast events while in the background. Use &lt;code&gt;navigator.connection.type&lt;/code&gt; to check connection status on the &lt;a href=&#34;https://cordova.apache.org/docs/en/latest/cordova/events/events.html#resume&#34;&gt;resume&lt;/a&gt; event instead.&lt;/p&gt; &#xA;&lt;h3&gt;iOS Quirks&lt;/h3&gt; &#xA;&lt;p&gt;During initial startup, the first &lt;code&gt;online&lt;/code&gt; event (if applicable) takes at least a second to fire, prior to which &lt;code&gt;connection.type&lt;/code&gt; is &lt;code&gt;UNKNOWN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample: Upload a File Depending on your Network State &lt;a name=&#34;sample&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The code examples in this section show examples of changing app behavior using the online and offline events and your network connection status.&lt;/p&gt; &#xA;&lt;p&gt;To start with, create a new FileEntry object (data.txt) to use for sample data. Call this function from the &lt;code&gt;deviceready&lt;/code&gt; handler.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt; This code example requires the File plugin.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var dataFileEntry;&#xA;&#xA;function createSomeData() {&#xA;&#xA;    window.requestFileSystem(window.TEMPORARY, 5 * 1024 * 1024, function (fs) {&#xA;&#xA;        console.log(&#39;file system open: &#39; + fs.name);&#xA;        // Creates a new file or returns an existing file.&#xA;        fs.root.getFile(&#34;data.txt&#34;, { create: true, exclusive: false }, function (fileEntry) {&#xA;&#xA;          dataFileEntry = fileEntry;&#xA;&#xA;        }, onErrorCreateFile);&#xA;&#xA;    }, onErrorLoadFs);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add listeners for the online and offline events in the &lt;code&gt;deviceready&lt;/code&gt; handler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;document.addEventListener(&#34;offline&#34;, onOffline, false);&#xA;document.addEventListener(&#34;online&#34;, onOnline, false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The app&#39;s &lt;code&gt;onOnline&lt;/code&gt; function handles the online event. In the event handler, check the current network state. In this app, treat any connection type as good except Connection.NONE. If you have a connection, you try to upload a file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function onOnline() {&#xA;    // Handle the online event&#xA;    var networkState = navigator.connection.type;&#xA;&#xA;    if (networkState !== Connection.NONE) {&#xA;        if (dataFileEntry) {&#xA;            tryToUploadFile();&#xA;        }&#xA;    }&#xA;    display(&#39;Connection type: &#39; + networkState);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the online event fires in the preceding code, call the app&#39;s &lt;code&gt;tryToUploadFile&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;If the upload fails, then call the app&#39;s &lt;code&gt;offlineWrite&lt;/code&gt; function to save the current data somewhere.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt; For simplicity, file reading &amp;amp; writing was omitted. Refer to the &lt;a href=&#34;https://github.com/apache/cordova-plugin-file#cordova-plugin-file&#34;&gt;cordova-plugin-file&lt;/a&gt; documentation for more information on file handling.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function tryToUploadFile() {&#xA;    // !! Assumes variable fileURL contains a valid URL to a text file on the device,&#xA;    var fileURL = getDataFileEntry().toURL();&#xA;    &#xA;    getFileBlobSomehow(fileURL, function(fileBlob) {&#xA;        var success = function (r) {&#xA;            console.log(&#34;Response = &#34; + r.response);&#xA;            display(&#34;Uploaded. Response: &#34; + r.response);&#xA;        };&#xA;&#xA;        var fail = function (error) {&#xA;            console.log(&#34;An error has occurred: Code = &#34; + error.code || error.status);&#xA;            offlineWrite(&#34;Failed to upload: some offline data&#34;);&#xA;        }&#xA;&#xA;        var xhr = new XMLHttpRequest();&#xA;&#xA;        xhr.onerror = fail;&#xA;        xhr.ontimeout = fail;&#xA;        xhr.onload = function() {&#xA;            // If the response code was successful...&#xA;            if (xhr.status &amp;gt;= 200 &amp;amp;&amp;amp; xhr.status &amp;lt; 400) {&#xA;                success(xhr);&#xA;            }&#xA;            else {&#xA;                fail(xhr)&#xA;            }&#xA;        }&#xA;&#xA;        // Make sure you add the domain of your server URL to the&#xA;        // Content-Security-Policy &amp;lt;meta&amp;gt; element in index.html.&#xA;        xhr.open(&#34;POST&#34;, encodeURI(SERVER));&#xA;&#xA;        xhr.setRequestHeader(&#34;Content-Type&#34;, &#34;text/plain&#34;);&#xA;&#xA;        // The server request handler could read this header to&#xA;        // set the filename.&#xA;        xhr.setRequestHeader(&#34;X-Filename&#34;, fileURL.substr(fileURL.lastIndexOf(&#34;/&#34;) + 1));&#xA;&#xA;        xhr.send(fileBlob);&#xA;    });&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the code for the &lt;code&gt;offlineWrite&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt; This code examples requires the File plugin.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function offlineWrite(offlineData) {&#xA;    // Create a FileWriter object for our FileEntry.&#xA;    dataFileEntry.createWriter(function (fileWriter) {&#xA;&#xA;        fileWriter.onwriteend = function () {&#xA;            console.log(&#34;Successful file write...&#34;);&#xA;            display(offlineData);&#xA;        };&#xA;&#xA;        fileWriter.onerror = function (e) {&#xA;            console.log(&#34;Failed file write: &#34; + e.toString());&#xA;        };&#xA;&#xA;        fileWriter.write(offlineData);&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the offline event occurs, just do something like notify the user (for this example, just log it).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function onOffline() {&#xA;    // Handle the offline event&#xA;    console.log(&#34;lost connection&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>