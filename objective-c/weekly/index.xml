<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-26T01:58:47Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ekscrypto/Base64</title>
    <updated>2023-03-26T01:58:47Z</updated>
    <id>tag:github.com,2023-03-26:/ekscrypto/Base64</id>
    <link href="https://github.com/ekscrypto/Base64" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Objective-C Base64 Additions for NSData and NSString&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/ekscrypto/Base64/actions/workflows/swift.yml/badge.svg?sanitize=true&#34; alt=&#34;swift workflow&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/issues/ekscrypto/Base64&#34; alt=&#34;Issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/ekscrypto/Base64&#34; alt=&#34;Releases&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Base64 Additions for Objective-C on Mac OS X and iOS&lt;/h1&gt; &#xA;&lt;h2&gt;LICENSING&lt;/h2&gt; &#xA;&lt;p&gt;The project is dual licensed&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Public Domain&lt;/li&gt; &#xA; &lt;li&gt;MIT&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use it under whichever of these two licensing options that are allowed in your country and you feel the most comfortable with.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;IMPORTANT&lt;/em&gt; If you have access to Swift libraries, use the built-in Base64 functions. They are faster in most cases.&lt;/p&gt; &#xA;&lt;h3&gt;Installation: Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;In your Package.swift, add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;MyApp&#34;,&#xA;    targets: [],&#xA;    dependencies: [&#xA;        .Package(url: &#34;https://github.com/ekscrypto/Base64.git&#34;, .upToNextMajor(from: &#34;1.2.2&#34;))&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation: Cococapods&lt;/h3&gt; &#xA;&lt;p&gt;Add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;8.0&#39;&#xA;use_frameworks!&#xA;&#xA;target &#39;&amp;lt;Your Target Name&amp;gt;&#39; do&#xA;    pod &#39;Base64&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage: Objective-C&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;NSString *helloWorld = @&#34;Hello World&#34;;&#xA;NSString *helloInBase64 = [helloWorld base64String];&#xA;NSString *helloDecoded = [NSString stringFromBase64String:helloInBase64];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage: Swift&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;NOT RECOMMENDED: If you have access to the built-in base64 functions offered by Swift, use them. They are much faster.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using MF_Base64codec directly&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let data = &#34;Hello World&#34;.data(using: .utf8)!&#xA;let base64 = MF_Base64Codec.base64String(from: data) // SGVsbG8gV29ybGQ=&#xA;let querySafeBase64 = MF_Base64Codec.base64UrlEncodedString(fromBase64String: base64) // SGVsbG8gV29ybGQ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using NSData objects&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let data = &#34;Hello World&#34;.data(using: .utf8)! as NSData&#xA;let base64 = data.base64String() // SGVsbG8gV29ybGQ=&#xA;let querySafeBase64 = data.base64UrlEncodedString() // SGVsbG8gV29ybGQ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Encoding: 5% &lt;em&gt;slower&lt;/em&gt; than Swift&#39;s built-in Base64 encoding&lt;/li&gt; &#xA; &lt;li&gt;Encoding: 4 to 5 times faster than using the equivalent SecTransform.&lt;/li&gt; &#xA; &lt;li&gt;Encoding: 30% faster than &lt;a href=&#34;https://github.com/l4u/NSData-Base64&#34;&gt;https://github.com/l4u/NSData-Base64&lt;/a&gt; (metric from 2012)&lt;/li&gt; &#xA; &lt;li&gt;Decoding: 4 times &lt;em&gt;slower&lt;/em&gt; than Swift&#39;s built-in Base64 decoding&lt;/li&gt; &#xA; &lt;li&gt;Decoding: 5% faster than using the equivalent SecTransform.&lt;/li&gt; &#xA; &lt;li&gt;Decoding: 5% faster than &lt;a href=&#34;https://github.com/l4u/NSData-Base64&#34;&gt;https://github.com/l4u/NSData-Base64&lt;/a&gt; (metric from 2012)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Performance metrics are based on evaluation done in 2022 using macOS, Xcode 13.2.1 and Swift 5.5.2 on a 2.2 GHz 6-Core Intel Core i7 MacBook Pro.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compile with Automatic Reference Counting&lt;/li&gt; &#xA; &lt;li&gt;Compatible with Mac OSX 10.9+ and iOS 4.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implemented as per RFC 4648, see &lt;a href=&#34;http://www.ietf.org/rfc/rfc4648.txt&#34;&gt;http://www.ietf.org/rfc/rfc4648.txt&lt;/a&gt; for more details.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>umwood89/4350-group-awesome-repo</title>
    <updated>2023-03-26T01:58:47Z</updated>
    <id>tag:github.com,2023-03-26:/umwood89/4350-group-awesome-repo</id>
    <link href="https://github.com/umwood89/4350-group-awesome-repo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>badeen/JLBPartialModal</title>
    <updated>2023-03-26T01:58:47Z</updated>
    <id>tag:github.com,2023-03-26:/badeen/JLBPartialModal</id>
    <link href="https://github.com/badeen/JLBPartialModal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This class attempts to mimic the interface in National Geographic&#39;s Park Guides app for iPhone. It requires iOS 5 for its use of UIViewController Containment. It also uses ARC and literal syntax for arrays. Video: http://f.cl.ly/items/3P1x0I2b1l241U360V1M/JLBPartialModal%20720p.mov&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#JLBPartialModal&lt;/p&gt; &#xA;&lt;p&gt;##How to Use&lt;/p&gt; &#xA;&lt;p&gt;Show a view controller that has a predefined view size. JLBPartialModal will use the height of the view passed in.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[JLBPartialModal sharedInstance] presentViewController:viewController dismissal:^{&#xA;&#x9;// Code to be called when the modal has been closed&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To close the modal use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[JLBPartialModal sharedInstance] dismissViewController];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The user will also be able to tap outside your provided view to close the modal.&lt;/p&gt; &#xA;&lt;p&gt;##Demo Video&lt;/p&gt; &#xA;&lt;p&gt;You can watch a video of it in action here: &lt;a href=&#34;http://f.cl.ly/items/3P1x0I2b1l241U360V1M/JLBPartialModal%20720p.mov&#34; title=&#34;Demo video&#34;&gt;http://f.cl.ly/items/3P1x0I2b1l241U360V1M/JLBPartialModal%20720p.mov&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>