<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-18T01:49:17Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/GoogleUtilities</title>
    <updated>2022-09-18T01:49:17Z</updated>
    <id>tag:github.com,2022-09-18:/google/GoogleUtilities</id>
    <link href="https://github.com/google/GoogleUtilities" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/GoogleUtilities&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/GoogleUtilities.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/GoogleUtilities&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/GoogleUtilities.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/GoogleUtilities&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/GoogleUtilities.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/firebase/firebase-ios-sdk/actions&#34;&gt;&lt;img src=&#34;https://github.com/firebase/firebase-ios-sdk/workflows/google-utilities/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;GoogleUtilities&lt;/h1&gt; &#xA;&lt;p&gt;GoogleUtilities provides a set of utilities for Firebase and other Google SDKs for Apple platform development.&lt;/p&gt; &#xA;&lt;p&gt;The utilities are not directly supported for non-Google library usage.&lt;/p&gt; &#xA;&lt;h2&gt;Integration Testing&lt;/h2&gt; &#xA;&lt;p&gt;These instructions apply to minor and patch version updates. Major versions need a customized adaptation.&lt;/p&gt; &#xA;&lt;p&gt;After the CI is green:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Determine the next version for release by checking the &lt;a href=&#34;https://github.com/google/GoogleUtilities/tags&#34;&gt;tagged releases&lt;/a&gt;. Ensure that the next release version keeps the Swift PM and CocoaPods versions in sync.&lt;/li&gt; &#xA; &lt;li&gt;Verify that the releasing version is the latest entry in the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;, updating it if necessary.&lt;/li&gt; &#xA; &lt;li&gt;Update the version in the podspec to match the latest entry in the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Checkout the &lt;code&gt;main&lt;/code&gt; branch and ensure it is up to date &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git checkout main&#xA;git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add the CocoaPods tag (&lt;code&gt;{version}&lt;/code&gt; will be the latest version in the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/GoogleUtilities.podspec#L3&#34;&gt;podspec&lt;/a&gt;) &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git tag CocoaPods-{version}&#xA;git push origin CocoaPods-{version}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Push the podspec to the designated repo &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;If this version of GoogleUtilities is intended to launch &lt;strong&gt;before or with&lt;/strong&gt; the next Firebase release:&lt;/p&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Push to &lt;b&gt;SpecsStaging&lt;/b&gt;&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo push --skip-tests staging GoogleUtilities.podspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;p&gt;If the command fails with &lt;code&gt;Unable to find the &#39;staging&#39; repo.&lt;/code&gt;, add the staging repo with:&lt;/p&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo add staging git@github.com:firebase/SpecsStaging.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Otherwise:&lt;/p&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Push to &lt;b&gt;SpecsDev&lt;/b&gt;&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo push --skip-tests dev GoogleUtilities.podspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;p&gt;If the command fails with &lt;code&gt;Unable to find the &#39;dev&#39; repo.&lt;/code&gt;, add the dev repo with:&lt;/p&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo add dev git@github.com:firebase/SpecsDev.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run Firebase CI by waiting until next nightly or adding a PR that touches &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On google3, run copybara using the command below. Then, start a global TAP on the generated CL. Deflake as needed. &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;third_party/firebase/ios/Releases/run_copy_bara.py --directory GoogleUtilities --branch main&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Publishing&lt;/h2&gt; &#xA;&lt;p&gt;The release process is as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/#swift-package-manager&#34;&gt;Tag and release for Swift PM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/#cocoapods&#34;&gt;Publish to CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/#create-github-release&#34;&gt;Create GitHub Release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/#post-release-cleanup&#34;&gt;Perform post release cleanup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;By creating and &lt;a href=&#34;https://github.com/google/GoogleUtilities/tags&#34;&gt;pushing a tag&lt;/a&gt; for Swift PM, the newly tagged version will be immediately released for public use. Given this, please verify the intended time of release for Swift PM.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a version tag for Swift PM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git tag {version}&#xA;git push origin {version}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Ensure that any inflight PRs that depend on the new &lt;code&gt;GoogleUtilities&lt;/code&gt; version are updated to point to the newly tagged version rather than a checksum.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Publish the newly versioned pod to CocoaPods&lt;/p&gt; &lt;p&gt;It&#39;s recommended to point to the &lt;code&gt;GoogleUtilities.podspec&lt;/code&gt; in &lt;code&gt;staging&lt;/code&gt; to make sure the correct spec is being published.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod trunk push ~/.cocoapods/repos/staging/GoogleUtilities/{version}/GoogleUtilities.podspec&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note: In some cases, it may be acceptable to &lt;code&gt;pod trunk push&lt;/code&gt; with the &lt;code&gt;--skip-tests&lt;/code&gt; flag. Please double check with the maintainers before doing so.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;The pod push was successful if the above command logs: &lt;code&gt;ðŸš€ GoogleUtilities ({version}) successfully published&lt;/code&gt;. In addition, a new commit that publishes the new version (co-authored by &lt;a href=&#34;https://github.com/CocoaPodsAtGoogle&#34;&gt;CocoaPodsAtGoogle&lt;/a&gt;) should appear in the &lt;a href=&#34;https://github.com/CocoaPods/Specs&#34;&gt;CocoaPods specs repo&lt;/a&gt;. Last, the latest version should be displayed on &lt;a href=&#34;https://cocoapods.org/pods/GoogleUtilities&#34;&gt;GoogleUtilities&#39;s CocoaPods page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/google/GoogleUtilities/releases/new/&#34;&gt;Create GitHub Release&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Update the &lt;a href=&#34;https://github.com/google/GoogleUtilities/releases/new/&#34;&gt;release template&lt;/a&gt;&#39;s &lt;strong&gt;Tag version&lt;/strong&gt; and &lt;strong&gt;Release title&lt;/strong&gt; fields with the latest version. In addition, reference the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/CHANGELOG.md&#34;&gt;Release Notes&lt;/a&gt; in the release&#39;s description.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/google/GoogleUtilities/releases/edit/7.7.0&#34;&gt;this release&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Don&#39;t forget to perform the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/#post-release-cleanup&#34;&gt;post release cleanup&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Post Release Cleanup&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Clean up &lt;b&gt;SpecsStaging&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pwd=$(pwd)&#xA;mkdir -p /tmp/release-cleanup &amp;amp;&amp;amp; cd $_&#xA;git clone git@github.com:firebase/SpecsStaging.git&#xA;cd SpecsStaging/&#xA;git rm -rf GoogleUtilities/&#xA;git commit -m &#34;Post publish cleanup&#34;&#xA;git push origin master&#xA;rm -rf /tmp/release-cleanup&#xA;cd $pwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To develop in this repository, ensure that you have at least the following software:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.0 (or later)&lt;/li&gt; &#xA; &lt;li&gt;CocoaPods 1.10.0 (or later)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/cocoapods-generate&#34;&gt;CocoaPods generate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the pod that you want to develop:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pod gen GoogleUtilities.podspec --local-sources=./ --auto-open --platforms=ios&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: If the CocoaPods cache is out of date, you may need to run &lt;code&gt;pod repo update&lt;/code&gt; before the &lt;code&gt;pod gen&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Note: Set the &lt;code&gt;--platforms&lt;/code&gt; option to &lt;code&gt;macos&lt;/code&gt; or &lt;code&gt;tvos&lt;/code&gt; to develop/test for those platforms. Since 10.2, Xcode does not properly handle multi-platform CocoaPods workspaces.&lt;/p&gt; &#xA;&lt;h3&gt;Development for Catalyst&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pod gen GoogleUtilities.podspec --local-sources=./ --auto-open --platforms=ios&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check the Mac box in the App-iOS Build Settings&lt;/li&gt; &#xA; &lt;li&gt;Sign the App in the Settings Signing &amp;amp; Capabilities tab&lt;/li&gt; &#xA; &lt;li&gt;Click Pods in the Project Manager&lt;/li&gt; &#xA; &lt;li&gt;Add Signing to the iOS host app and unit test targets&lt;/li&gt; &#xA; &lt;li&gt;Select the Unit-unit scheme&lt;/li&gt; &#xA; &lt;li&gt;Run it to build and test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively disable signing in each target:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to Build Settings tab&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;+&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Add User-Defined Setting&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;CODE_SIGNING_REQUIRED&lt;/code&gt; setting with a value of &lt;code&gt;NO&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code Formatting&lt;/h3&gt; &#xA;&lt;p&gt;To ensure that the code is formatted consistently, run the script &lt;a href=&#34;https://github.com/firebase/firebase-ios-sdk/raw/master/scripts/check.sh&#34;&gt;./scripts/check.sh&lt;/a&gt; before creating a PR.&lt;/p&gt; &#xA;&lt;p&gt;GitHub Actions will verify that any code changes are done in a style compliant way. Install &lt;code&gt;clang-format&lt;/code&gt; and &lt;code&gt;mint&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install clang-format@14&#xA;brew install mint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Unit Tests&lt;/h3&gt; &#xA;&lt;p&gt;Select a scheme and press Command-u to build a component and run its unit tests.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The contents of this repository is licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aws-amplify/aws-sdk-ios</title>
    <updated>2022-09-18T01:49:17Z</updated>
    <id>tag:github.com,2022-09-18:/aws-amplify/aws-sdk-ios</id>
    <link href="https://github.com/aws-amplify/aws-sdk-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AWS SDK for iOS. For more information, see our web site:&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AWS SDK for iOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws-amplify/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/aws/aws-sdk-ios.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/AWSCore&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/AWSCore.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/aws-amplify/aws-sdk-ios&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/aws-amplify/aws-sdk-ios.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/jWVbPfC&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/308323056592486420?logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The AWS SDK for iOS provides a library and documentation for developers to build connected mobile applications using AWS.&lt;/p&gt; &#xA;&lt;h3&gt;Features / APIs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs/ios/authentication&#34;&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/a&gt;: APIs and building blocks for developers who want to create user authentication experiences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs/ios/analytics&#34;&gt;&lt;strong&gt;Analytics&lt;/strong&gt;&lt;/a&gt;: Easily collect analytics data for your app. Analytics data includes user sessions and other custom events that you want to track in your app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs/ios/api&#34;&gt;&lt;strong&gt;API&lt;/strong&gt;&lt;/a&gt;: Provides a simple solution when making HTTP requests. It provides an automatic, lightweight signing process which complies with AWS Signature Version 4.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs/ios/storage&#34;&gt;&lt;strong&gt;Storage&lt;/strong&gt;&lt;/a&gt;: Provides a simple mechanism for managing user content for your app in public, protected or private storage buckets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs/ios/push-notifications&#34;&gt;&lt;strong&gt;Push Notifications&lt;/strong&gt;&lt;/a&gt;: Allows you to integrate push notifications in your app with Amazon Pinpoint targeting and campaign management support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs/ios/pubsub&#34;&gt;&lt;strong&gt;PubSub&lt;/strong&gt;&lt;/a&gt;: Provides connectivity with cloud-based message-oriented middleware.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs/ios/manualsetup&#34;&gt;&lt;strong&gt;Generated AWS Service Interfaces&lt;/strong&gt;&lt;/a&gt;: Provides direct interaction with any AWS service.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Visit our &lt;a href=&#34;https://aws-amplify.github.io&#34;&gt;Web Site&lt;/a&gt; to learn more about Amplify Framework.&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/aws-sdk-ios-samples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To get started with the AWS SDK for iOS, check out the &lt;a href=&#34;https://aws-amplify.github.io/docs/ios/start&#34;&gt;Developer Guide for iOS&lt;/a&gt;. You can set up the SDK and start building a new project, or you integrate the SDK in an existing project. You can also run the samples to get a sense of how the SDK works.&lt;/p&gt; &#xA;&lt;p&gt;To use the AWS SDK for iOS, you will need the following installed on your development machine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 11.0 or later&lt;/li&gt; &#xA; &lt;li&gt;iOS 9 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Include the SDK for iOS in an Existing Application&lt;/h2&gt; &#xA;&lt;p&gt;We have a couple &lt;a href=&#34;https://github.com/awslabs/aws-sdk-ios-samples&#34;&gt;samples&lt;/a&gt; applications which showcase how to use the AWS SDK for iOS. Please note that the code in these sample applications is not of production quality, and should be considered as exactly what we called them: samples.&lt;/p&gt; &#xA;&lt;p&gt;There are several ways to integrate the AWS Mobile SDK for iOS into your own project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/mobile/sdk/&#34;&gt;Dynamic Frameworks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You should use ONE and only one of these ways to import the AWS Mobile SDK. Importing the SDK in multiple ways loads duplicate copies of the SDK into the project and causes compiler/linker errors.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you are using XCFrameworks (i.e., either Swift Package Manager, Carthage, or Dynamic Frameworks), some modules are named with the &lt;code&gt;XCF&lt;/code&gt; suffix to work around a &lt;a href=&#34;https://bugs.swift.org/browse/SR-11704&#34;&gt;Swift issue&lt;/a&gt;. &lt;code&gt;AWSMobileClient&lt;/code&gt; is named as &lt;code&gt;AWSMobileClientXCF&lt;/code&gt; and &lt;code&gt;AWSLocation&lt;/code&gt; is named as &lt;code&gt;AWSLocationXCF&lt;/code&gt;. To use the &lt;code&gt;AWSMobileClient&lt;/code&gt; or &lt;code&gt;AWSLocation&lt;/code&gt; SDKs, import them as:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import AWSMobileClientXCF&#xA;import AWSLocationXCF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and use it your app code without the &lt;code&gt;XCF&lt;/code&gt; suffix.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AWSMobileClient.default().initialize() &#xA;let locationClient = AWSLocation.default()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Swift Package Manager is distributed with Xcode. To start adding the AWS SDK to your iOS project, open your project in Xcode and select &lt;strong&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/readme-images/spm-setup-01-add-package-dependency.png&#34; alt=&#34;Add package dependency&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the URL for the AWS SDK for iOS Swift Package Manager GitHub repo (&lt;code&gt;https://github.com/aws-amplify/aws-sdk-ios-spm&lt;/code&gt;) into the search bar and click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/readme-images/spm-setup-02-search-amplify-repo.png&#34; alt=&#34;Search for repo&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This URL is &lt;em&gt;not&lt;/em&gt; the main URL of the SDK. We maintain the Swift Package Manager manifest (&lt;code&gt;Package.swift&lt;/code&gt;) file for this library in a separate repo so that apps that use the SDK do not have to download the entire source repository in order to consume the binary targets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You&#39;ll see the repository rules for which version of the SDK you want Swift Package Manager to install. Choose the first rule, &lt;strong&gt;Version&lt;/strong&gt;, and select &lt;strong&gt;Up to Next Minor&lt;/strong&gt; as it will use the latest compatible version of the dependency that can be detected from the &lt;code&gt;main&lt;/code&gt; branch, then click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/readme-images/spm-setup-03-dependency-version-options.png&#34; alt=&#34;Dependency version options&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The AWS Mobile SDK for iOS does &lt;a href=&#34;https://docs.amplify.aws/sdk/configuration/setup-options/q/platform/ios#aws-sdk-version-vs-semantic-versioning&#34;&gt;not use Semantic Versioning&lt;/a&gt;, and may introduce breaking API changes on minor version releases. We recommend setting your &lt;strong&gt;Version&lt;/strong&gt; rule to &lt;strong&gt;Up to Next Minor&lt;/strong&gt; and evaluating minor version releases to ensure they are compatible with your app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose which of the libraries you want added to your project. Always select the &lt;strong&gt;AWSCore&lt;/strong&gt; SDK. The remaining SDKs to install will vary based on which SDK you&#39;re trying to install. Most SDKs rely only on &lt;strong&gt;AWSCore&lt;/strong&gt;, but for a full dependency list, see the &lt;a href=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/README-spm-support.md&#34;&gt;README-spm-support file&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note: AWSLex is not currently supported for the &lt;code&gt;arm64&lt;/code&gt; architecture through Swift Package Manager due to conflicts with a packaged binary dependency.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/readme-images/spm-setup-04-select-dependencies.png&#34; alt=&#34;Select dependencies&#34;&gt;&lt;/p&gt; &lt;p&gt;Select all that are appropriate, then click &lt;strong&gt;Finish&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;You can always go back and modify which SPM packages are included in your project by opening the Swift Packages tab for your project: Click on the Project file in the Xcode navigator, then click on your project&#39;s icon, then select the &lt;strong&gt;Swift Packages&lt;/strong&gt; tab.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The AWS Mobile SDK for iOS is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. If you have not installed CocoaPods, install CocoaPods by running the command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ gem install cocoapods&#xA; $ pod setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Depending on your system settings, you may have to use &lt;code&gt;sudo&lt;/code&gt; for installing &lt;code&gt;cocoapods&lt;/code&gt; as follows:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ sudo gem install cocoapods&#xA; $ pod setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your project directory (the directory where your &lt;code&gt;*.xcodeproj&lt;/code&gt; file is), run the following to create a &lt;code&gt;Podfile&lt;/code&gt; in your project.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ pod init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit the podfile to include the pods you want to integrate into your project. For example, if you need auth, you can use AWSMobileClient, and if you need analytics, you add AWSPinpoint. As a result, your podfile might look something like this:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;target &#39;YourTarget&#39; do&#xA;    pod &#39;AWSMobileClient&#39;&#xA;    pod &#39;AWSPinpoint&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a complete list of our pods, check out the .podspec files in the root directory of this project.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Then run the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ pod install --repo-update&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To open your project, open the newly generated &lt;code&gt;*.xcworkspace&lt;/code&gt; file in your project&#39;s directory with XCode. You can do this by issuing the following command in your project folder:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ xed .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Do &lt;strong&gt;NOT&lt;/strong&gt; use &lt;code&gt;*.xcodeproj&lt;/code&gt;. If you open up a project file instead of a workspace, you may receive the following error:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; ld: library not found for -lPods-AWSCore&#xA; clang: error: linker command failed with exit code 1 (use -v to see invocation)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;h4&gt;XCFrameworks (recommended)&lt;/h4&gt; &#xA;&lt;p&gt;Carthage supports XCFrameworks in Xcode 12 or above. Follow the steps below to consume the AWS SDK for iOS using XCFrameworks:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Carthage 0.37.0 or greater.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; github &#34;aws-amplify/aws-sdk-ios&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then run the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ carthage update --use-xcframeworks --no-use-binaries&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;As of Carthage 0.37.0, prebuilt binaries using XCFrameworks are not supported, as mentioned in the Carthage release notes - &lt;a href=&#34;https://github.com/Carthage/Carthage/releases/tag/0.37.0&#34;&gt;https://github.com/Carthage/Carthage/releases/tag/0.37.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;On your application targetsâ€™ General settings tab, in the Embedded Binaries section, drag and drop each xcframework you want to use from the Carthage/Build folder on disk.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Frameworks with &#34;fat libraries&#34; (not recommended)&lt;/h4&gt; &#xA;&lt;p&gt;To build platform-specific framework bundles with multiple architectures in the binary, (Xcode 11 and below)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the latest version of &lt;a href=&#34;https://github.com/Carthage/Carthage#installing-carthage&#34;&gt;Carthage&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; github &#34;aws-amplify/aws-sdk-ios&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then run the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;With your project open in Xcode, select your &lt;strong&gt;Target&lt;/strong&gt;. Under &lt;strong&gt;General&lt;/strong&gt; tab, find &lt;strong&gt;Frameworks, Libraries, and Embedded Content&lt;/strong&gt; and then click the &lt;strong&gt;+&lt;/strong&gt; button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click the &lt;strong&gt;Add Other...&lt;/strong&gt; button, then &#34;Add Files...&#34; in the popup menu, then navigate to the &lt;code&gt;AWS&amp;lt;#ServiceName#&amp;gt;.framework&lt;/code&gt; files under &lt;code&gt;Carthage&lt;/code&gt; &amp;gt; &lt;code&gt;Build&lt;/code&gt; &amp;gt; &lt;code&gt;iOS&lt;/code&gt; and select them. Do not check the &lt;strong&gt;Destination: Copy items if needed&lt;/strong&gt; checkbox if prompted. Add the frameworks that you need for you specific use case. For example, if you are using AWSMobileClient and AWSPinpoint, you will want to add the following frameworks:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSAuthCore.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSCognitoIdentityProvider.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSCognitoIdentityProviderASF.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSCore.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSMobileClient.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSPinpoint.framework&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Under the &lt;strong&gt;Build Phases&lt;/strong&gt; tab in your &lt;strong&gt;Target&lt;/strong&gt;, click the &lt;strong&gt;+&lt;/strong&gt; button on the top left and then select &lt;strong&gt;New Run Script Phase&lt;/strong&gt;. Then setup the build phase as follows. Make sure this phase is below the &lt;code&gt;Embed Frameworks&lt;/code&gt; phase.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; Shell /bin/sh&#xA; &#xA; bash &#34;${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}/AWSCore.framework/strip-frameworks.sh&#34;&#xA; &#xA; Show environment variables in build log: Checked&#xA; Run script only when installing: Not checked&#xA; &#xA; Input Files: Empty&#xA; Output Files: Empty&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Currently, the AWS SDK for iOS builds the Carthage binaries using the latest released version of Xcode. To consume the pre-built binaries your Xcode version needs to be the same, else you have to build the frameworks on your machine by passing &lt;code&gt;--no-use-binaries&lt;/code&gt; flag to &lt;code&gt;carthage update&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Frameworks&lt;/h3&gt; &#xA;&lt;h4&gt;XCFramework setup&lt;/h4&gt; &#xA;&lt;p&gt;Starting AWS SDK iOS version 2.22.1, SDK binaries are released as XCFrameworks. Follow the steps below to install XCFramework.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://releases.amplify.aws/aws-sdk-ios/latest/aws-ios-sdk.zip&#34;&gt;latest SDK&lt;/a&gt;. Older SDK versions can be downloaded from &lt;code&gt;https://releases.amplify.aws/aws-sdk-ios/aws-ios-sdk-#.#.#.zip&lt;/code&gt;, where &lt;code&gt;#.#.#&lt;/code&gt; represents the version number. So for version 2.23.3, the download link is &lt;a href=&#34;https://releases.amplify.aws/aws-sdk-ios/aws-ios-sdk-2.23.3.zip&#34;&gt;https://releases.amplify.aws/aws-sdk-ios/aws-ios-sdk-2.23.3.zip&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note1: If you are using version &amp;lt; 2.22.1 please refer to the &#34;Legacy framework setup&#34; section below. Note2: To download version &amp;lt; 2.23.3 use this link &lt;code&gt;https://sdk-for-ios.amazonwebservices.com/aws-ios-sdk-#.#.#.zip&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Uncompress the ZIP file&lt;/li&gt; &#xA; &lt;li&gt;On your application targetsâ€™ General settings tab, in the Embedded Binaries section, drag and drop each xcframework you want to use from the downloaded folder.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Legacy framework setup&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the required SDK using &lt;code&gt;https://sdk-for-ios.amazonwebservices.com/aws-ios-sdk-#.#.#.zip&lt;/code&gt;, where &lt;code&gt;#.#.#&lt;/code&gt; represents the version number. So for version 2.10.2, the download link is &lt;a href=&#34;https://sdk-for-ios.amazonwebservices.com/aws-ios-sdk-2.10.2.zip&#34;&gt;https://sdk-for-ios.amazonwebservices.com/aws-ios-sdk-2.10.2.zip&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you are using version &amp;gt; 2.22.0 please refer to the &#34;XCFramework setup&#34; section above.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;With your project open in Xcode, select your &lt;strong&gt;Target&lt;/strong&gt;. Under &lt;strong&gt;General&lt;/strong&gt; tab, find &lt;strong&gt;Embedded Binaries&lt;/strong&gt; and then click the &lt;strong&gt;+&lt;/strong&gt; button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click the &lt;strong&gt;Add Other...&lt;/strong&gt; button, navigate to the &lt;code&gt;AWS&amp;lt;#ServiceName#&amp;gt;.framework&lt;/code&gt; files and select them. Check the &lt;strong&gt;Destination: Copy items if needed&lt;/strong&gt; checkbox when prompted. Add the frameworks that you need for you specific use case. For example, if you are using AWSMobileClient and AWSPinpoint, you will want to add the following frameworks:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSAuthCore.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSCognitoIdentityProvider.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSCognitoIdentityProviderASF.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSCore.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSMobileClient.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSPinpoint.framework&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Under the &lt;strong&gt;Build Phases&lt;/strong&gt; tab in your &lt;strong&gt;Target&lt;/strong&gt;, click the &lt;strong&gt;+&lt;/strong&gt; button on the top left and then select &lt;strong&gt;New Run Script Phase&lt;/strong&gt;. Then setup the build phase as follows. Make sure this phase is below the &lt;code&gt;Embed Frameworks&lt;/code&gt; phase.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; Shell /bin/sh&#xA; &#xA; bash &#34;${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}/AWSCore.framework/strip-frameworks.sh&#34;&#xA; &#xA; Show environment variables in build log: Checked&#xA; Run script only when installing: Not checked&#xA; &#xA; Input Files: Empty&#xA; Output Files: Empty&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Update the SDK to a Newer Version&lt;/h2&gt; &#xA;&lt;p&gt;When we release a new version of the SDK, you can pick up the changes as described below.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the following command in your project directory. CocoaPods automatically picks up the new changes.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ pod update&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If your pod is having an issue, you can delete &lt;code&gt;Podfile.lock&lt;/code&gt; and &lt;code&gt;Pods/&lt;/code&gt; then run &lt;code&gt;pod install&lt;/code&gt; to cleanly install the SDK.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/readme-images/cocoapods-setup-03.png?raw=true&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the following command in your project directory. Carthage automatically picks up the new changes.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Frameworks&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In Xcode&#39;s &lt;strong&gt;Project Navigator&lt;/strong&gt;, type &#34;AWS&#34; to find the AWS Frameworks or XCFrameworks that you manually added to your project. Select all of the AWS Frameworks and hit &lt;strong&gt;Delete&lt;/strong&gt; on your keyboard. Then select &lt;strong&gt;Move to Trash&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the installation process above to include the new version of the SDK.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started with Swift&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Import the AWSCore header in the application delegate.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import AWSCore&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a default service configuration by adding the following code snippet in the &lt;code&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt; application delegate method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let credentialsProvider = AWSCognitoCredentialsProvider(&#xA;    regionType: CognitoRegionType,&#xA;    identityPoolId: CognitoIdentityPoolId)&#xA;let configuration = AWSServiceConfiguration(&#xA;    region: DefaultServiceRegionType,&#xA;    credentialsProvider: credentialsProvider)&#xA;AWSServiceManager.default().defaultServiceConfiguration = configuration&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In Swift file you want to use the SDK, import the appropriate headers for the services you are using. The header file import convention is &lt;code&gt;import AWSServiceName&lt;/code&gt;, as in the following examples:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import AWSS3&#xA;import AWSDynamoDB&#xA;import AWSSQS&#xA;import AWSSNS&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make a call to the AWS services.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dynamoDB = AWSDynamoDB.default()&#xA;let listTableInput = AWSDynamoDBListTablesInput()&#xA;dynamoDB.listTables(listTableInput!).continueWith { (task:AWSTask&amp;lt;AWSDynamoDBListTablesOutput&amp;gt;) -&amp;gt; Any? in&#xA;    if let error = task.error as? NSError {&#xA;    print(&#34;Error occurred: \(error)&#34;)&#xA;        return nil&#xA;    }&#xA;&#xA;    let listTablesOutput = task.result&#xA;&#xA;    for tableName in listTablesOutput!.tableNames! {&#xA;        print(&#34;\(tableName)&#34;)&#xA;    }&#xA;&#xA;    return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Most of the service client classes have a singleton method to get a default client. The naming convention is &lt;code&gt;+ defaultSERVICENAME&lt;/code&gt; (e.g. &lt;code&gt;+ defaultDynamoDB&lt;/code&gt; in the above code snippet). This singleton method creates a service client with &lt;code&gt;defaultServiceConfiguration&lt;/code&gt;, which you set up in step 5, and maintains a strong reference to the client.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started with Objective-C&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Import the AWSCore header in the application delegate.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@import AWSCore;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a default service configuration by adding the following code snippet in the &lt;code&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt; application delegate method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;AWSCognitoCredentialsProvider *credentialsProvider = [[AWSCognitoCredentialsProvider alloc] initWithRegionType:CognitoRegionType&#xA;                                                                                                identityPoolId:CognitoIdentityPoolId];&#xA;AWSServiceConfiguration *configuration = [[AWSServiceConfiguration alloc] initWithRegion:DefaultServiceRegionType&#xA;                                                                     credentialsProvider:credentialsProvider];&#xA;AWSServiceManager.defaultServiceManager.defaultServiceConfiguration = configuration;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Import the appropriate headers for the services you are using. The header file import convention is &lt;code&gt;@import AWSServiceName;&lt;/code&gt;, as in the following examples:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@import AWSS3;&#xA;@import AWSDynamoDB;&#xA;@import AWSSQS;&#xA;@import AWSSNS;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make a call to the AWS services.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;AWSSNS *sns = [AWSSNS defaultSNS];&#xA;AWSSNSListTopicsInput *listTopicsInput = [AWSSNSListTopicsInput new];&#xA;[[sns listTopics:listTopicsInput] continueWithBlock:^id(AWSTask *task) {&#xA;    // Do something with the response&#xA;    return nil;&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Most of the service client classes have a singleton method to get a default client. The naming convention is &lt;code&gt;+ defaultSERVICENAME&lt;/code&gt; (e.g. &lt;code&gt;+ defaultS3SNS&lt;/code&gt; in the above code snippet). This singleton method creates a service client with &lt;code&gt;defaultServiceConfiguration&lt;/code&gt;, which you set up in step 5, and maintains a strong reference to the client.&lt;/p&gt; &#xA;&lt;h2&gt;Working with AWSTask&lt;/h2&gt; &#xA;&lt;p&gt;The SDK returns &lt;code&gt;AWSTask&lt;/code&gt; objects when operating on asynchronous operations to avoid blocking the UI thread.&lt;/p&gt; &#xA;&lt;p&gt;The AWSTask class is a renamed version of BFTask from the Bolts framework. For complete documentation on Bolts, see the &lt;a href=&#34;https://github.com/BoltsFramework/Bolts-ObjC&#34;&gt;Bolts-iOS repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;As of version 2.5.4 of this SDK, logging utilizes &lt;a href=&#34;https://github.com/CocoaLumberjack/CocoaLumberjack&#34;&gt;CocoaLumberjack&lt;/a&gt;, a flexible, fast, open source logging framework. It supports many capabilities including the ability to set logging level per output target, for instance, concise messages logged to the console and verbose messages to a log file.&lt;/p&gt; &#xA;&lt;p&gt;CocoaLumberjack logging levels are additive such that when the level is set to verbose, all messages from the levels below verbose are logged. It is also possible to set custom logging to meet your needs. For more information, see &lt;a href=&#34;https://github.com/CocoaLumberjack/CocoaLumberjack/raw/master/Documentation/CustomLogLevels.md&#34;&gt;CocoaLumberjack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Changing Log Levels&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AWSDDLog.sharedInstance.logLevel = .verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following logging level options are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.off&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.error&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.warning&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.info&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.verbose&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Objective-C&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[AWSDDLog sharedInstance].logLevel = AWSDDLogLevelVerbose;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following logging level options are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AWSDDLogLevelOff&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AWSDDLogLevelError&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AWSDDLogLevelWarning&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AWSDDLogLevelInfo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AWSDDLogLevelDebug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AWSDDLogLevelVerbose&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We recommend setting the log level to &lt;code&gt;Off&lt;/code&gt; before publishing to the Apple App Store.&lt;/p&gt; &#xA;&lt;h3&gt;Targeting Log Output&lt;/h3&gt; &#xA;&lt;p&gt;CocoaLumberjack can direct logs to file or used as a framework that integrates with the Xcode console.&lt;/p&gt; &#xA;&lt;p&gt;To initialize logging to files, use the following code:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let fileLogger: AWSDDFileLogger = AWSDDFileLogger() // File Logger&#xA;fileLogger.rollingFrequency = TimeInterval(60*60*24)  // 24 hours&#xA;fileLogger.logFileManager.maximumNumberOfLogFiles = 7&#xA;AWSDDLog.add(fileLogger)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Objective-C&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;AWSDDFileLogger *fileLogger = [[AWSDDFileLogger alloc] init]; // File Logger&#xA;fileLogger.rollingFrequency = 60 * 60 * 24; // 24 hour rolling&#xA;fileLogger.logFileManager.maximumNumberOfLogFiles = 7;&#xA;[AWSDDLog addLogger:fileLogger];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To initialize logging to your Xcode console, use the following code:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AWSDDLog.add(AWSDDTTYLogger.sharedInstance) // TTY = Xcode console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Objective-C&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[AWSDDLog addLogger:[AWSDDTTYLogger sharedInstance]]; // TTY = Xcode console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Open Source Contributions&lt;/h2&gt; &#xA;&lt;p&gt;We welcome any and all contributions from the community! Make sure you read through our contribution guide &lt;a href=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt; before submitting any PR&#39;s. Thanks! &amp;lt;3&lt;/p&gt; &#xA;&lt;h2&gt;Talk to Us&lt;/h2&gt; &#xA;&lt;p&gt;Visit our GitHub &lt;a href=&#34;https://github.com/aws-amplify/aws-sdk-ios/issues&#34;&gt;Issues&lt;/a&gt; to leave feedback and to connect with other users of the SDK.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Amazon Web Services&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;strong&gt;LICENSE&lt;/strong&gt; file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/GoogleDataTransport</title>
    <updated>2022-09-18T01:49:17Z</updated>
    <id>tag:github.com,2022-09-18:/google/GoogleDataTransport</id>
    <link href="https://github.com/google/GoogleDataTransport" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/GoogleDataTransport&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/GoogleDataTransport.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/GoogleDataTransport&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/GoogleDataTransport.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/GoogleDataTransport&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/GoogleDataTransport.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/firebase/firebase-ios-sdk/actions&#34;&gt;&lt;img src=&#34;https://github.com/firebase/firebase-ios-sdk/workflows/datatransport/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;GoogleDataTransport&lt;/h1&gt; &#xA;&lt;p&gt;This library is for internal Google use only. It allows the logging of data and telemetry from Google SDKs.&lt;/p&gt; &#xA;&lt;h2&gt;Integration Testing&lt;/h2&gt; &#xA;&lt;p&gt;These instructions apply to minor and patch version updates. Major versions need a customized adaptation.&lt;/p&gt; &#xA;&lt;p&gt;After the CI is green:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Determine the next version for release by checking the &lt;a href=&#34;https://github.com/google/GoogleDataTransport/tags&#34;&gt;tagged releases&lt;/a&gt;. Ensure that the next release version keeps the Swift PM and CocoaPods versions in sync.&lt;/li&gt; &#xA; &lt;li&gt;Verify that the releasing version is the latest entry in the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;, updating it if necessary.&lt;/li&gt; &#xA; &lt;li&gt;Update the version in the podspec to match the latest entry in the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Checkout the &lt;code&gt;main&lt;/code&gt; branch and ensure it is up to date. &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git checkout main&#xA;git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add the CocoaPods tag (&lt;code&gt;{version}&lt;/code&gt; will be the latest version in the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/GoogleDataTransport.podspec#L3&#34;&gt;podspec&lt;/a&gt;) &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git tag CocoaPods-{version}&#xA;git push origin CocoaPods-{version}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Push the podspec to the designated repo &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;If this version of GDT is intended to launch &lt;strong&gt;before or with&lt;/strong&gt; the next Firebase release:&lt;/p&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Push to &lt;b&gt;SpecsStaging&lt;/b&gt;&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo push --skip-tests staging GoogleDataTransport.podspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;p&gt;If the command fails with &lt;code&gt;Unable to find the &#39;staging&#39; repo.&lt;/code&gt;, add the staging repo with:&lt;/p&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo add staging git@github.com:firebase/SpecsStaging.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Otherwise:&lt;/p&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Push to &lt;b&gt;SpecsDev&lt;/b&gt;&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo push --skip-tests dev GoogleDataTransport.podspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;p&gt;If the command fails with &lt;code&gt;Unable to find the &#39;dev&#39; repo.&lt;/code&gt;, add the dev repo with:&lt;/p&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo add dev git@github.com:firebase/SpecsDev.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run Firebase CI by waiting until next nightly or adding a PR that touches &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On google3, create a workspace and new CL. Then copybara and run a global TAP. &lt;pre&gt;&#xA;/google/data/ro/teams/copybara/copybara third_party/firebase/ios/Releases/GoogleDataTransport/copy.bara.sky \&#xA;--piper-description-behavior=OVERWRITE \&#xA;--destination-cl=&lt;b&gt;YOUR_CL&lt;/b&gt; gdt&#xA;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Publishing&lt;/h2&gt; &#xA;&lt;p&gt;The release process is as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/#swift-package-manager&#34;&gt;Tag and release for Swift PM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/#cocoapods&#34;&gt;Publish to CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/#create-github-release&#34;&gt;Create GitHub Release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/#post-release-cleanup&#34;&gt;Perform post release cleanup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;By creating and &lt;a href=&#34;https://github.com/google/GoogleDataTransport/tags&#34;&gt;pushing a tag&lt;/a&gt; for Swift PM, the newly tagged version will be immediately released for public use. Given this, please verify the intended time of release for Swift PM.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a version tag for Swift PM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git tag {version}&#xA;git push origin {version}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Ensure that any inflight PRs that depend on the new &lt;code&gt;GoogleDataTransport&lt;/code&gt; version are updated to point to the newly tagged version rather than a checksum.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Publish the newly versioned pod to CocoaPods&lt;/p&gt; &lt;p&gt;It&#39;s recommended to point to the &lt;code&gt;GoogleDataTransport.podspec&lt;/code&gt; in &lt;code&gt;staging&lt;/code&gt; to make sure the correct spec is being published.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod trunk push ~/.cocoapods/repos/staging/GoogleDataTransport/{version}/GoogleDataTransport.podspec --skip-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The pod push was successful if the above command logs: &lt;code&gt;ðŸš€ GoogleDataTransport ({version}) successfully published&lt;/code&gt;. In addition, a new commit that publishes the new version (co-authored by &lt;a href=&#34;https://github.com/CocoaPodsAtGoogle&#34;&gt;CocoaPodsAtGoogle&lt;/a&gt;) should appear in the &lt;a href=&#34;https://github.com/CocoaPods/Specs&#34;&gt;CocoaPods specs repo&lt;/a&gt;. Last, the latest version should be displayed on &lt;a href=&#34;https://cocoapods.org/pods/GoogleDataTransport&#34;&gt;GoogleDataTransport&#39;s CocoaPods page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/google/GoogleDataTransport/releases/new/&#34;&gt;Create GitHub Release&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Update the &lt;a href=&#34;https://github.com/google/GoogleDataTransport/releases/new/&#34;&gt;release template&lt;/a&gt;&#39;s &lt;strong&gt;Tag version&lt;/strong&gt; and &lt;strong&gt;Release title&lt;/strong&gt; fields with the latest version. In addition, reference the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/CHANGELOG.md&#34;&gt;Release Notes&lt;/a&gt; in the release&#39;s description.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/google/GoogleDataTransport/releases/edit/9.0.1&#34;&gt;this release&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Don&#39;t forget to perform the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/#post-release-cleanup&#34;&gt;post release cleanup&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Post Release Cleanup&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Clean up &lt;b&gt;SpecsStaging&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pwd=$(pwd)&#xA;mkdir -p /tmp/release-cleanup &amp;amp;&amp;amp; cd $_&#xA;git clone git@github.com:firebase/SpecsStaging.git&#xA;cd SpecsStaging/&#xA;git rm -rf GoogleDataTransport/&#xA;git commit -m &#34;Post publish cleanup&#34;&#xA;git push origin master&#xA;rm -rf /tmp/release-cleanup&#xA;cd $pwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Set logging level&lt;/h2&gt; &#xA;&lt;h3&gt;Swift&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Import &lt;code&gt;GoogleDataTransport&lt;/code&gt; module: &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GoogleDataTransport&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set logging level global variable to the desired value before calling &lt;code&gt;FirebaseApp.configure()&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;GDTCORConsoleLoggerLoggingLevel = GDTCORLoggingLevel.debug.rawValue&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Objective-C&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Import &lt;code&gt;GoogleDataTransport&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;GoogleDataTransport/GoogleDataTransport.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set logging level global variable to the desired value before calling &lt;code&gt;-[FIRApp configure]&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;GDTCORConsoleLoggerLoggingLevel = GDTCORLoggingLevelDebug;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prereqs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gem install --user cocoapods cocoapods-generate&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brew install protobuf nanopb-generator&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;easy_install --user protobuf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;To develop&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./GoogleDataTransport/generate_project.sh&lt;/code&gt; after installing the prereqs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;When adding new logging endpoint&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use commands similar to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;python -c &#34;line=&#39;https://www.firebase.com&#39;; print line[0::2]&#34; &lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;python -c &#34;line=&#39;https://www.firebase.com&#39;; print line[1::2]&#34; &lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;When adding internal code that shouldn&#39;t be easily usable on github&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consider using go/copybara-library/scrubbing#cc_scrub&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Ensure that you have at least the following software:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.0 (or later)&lt;/li&gt; &#xA; &lt;li&gt;CocoaPods 1.10.0 (or later)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/cocoapods-generate&#34;&gt;CocoaPods generate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the pod that you want to develop:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pod gen GoogleDataTransport.podspec --local-sources=./ --auto-open --platforms=ios&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: If the CocoaPods cache is out of date, you may need to run &lt;code&gt;pod repo update&lt;/code&gt; before the &lt;code&gt;pod gen&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Note: Set the &lt;code&gt;--platforms&lt;/code&gt; option to &lt;code&gt;macos&lt;/code&gt; or &lt;code&gt;tvos&lt;/code&gt; to develop/test for those platforms. Since 10.2, Xcode does not properly handle multi-platform CocoaPods workspaces.&lt;/p&gt; &#xA;&lt;h3&gt;Development for Catalyst&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pod gen GoogleDataTransport.podspec --local-sources=./ --auto-open --platforms=ios&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check the Mac box in the App-iOS Build Settings&lt;/li&gt; &#xA; &lt;li&gt;Sign the App in the Settings Signing &amp;amp; Capabilities tab&lt;/li&gt; &#xA; &lt;li&gt;Click Pods in the Project Manager&lt;/li&gt; &#xA; &lt;li&gt;Add Signing to the iOS host app and unit test targets&lt;/li&gt; &#xA; &lt;li&gt;Select the Unit-unit scheme&lt;/li&gt; &#xA; &lt;li&gt;Run it to build and test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively disable signing in each target:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to Build Settings tab&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;+&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Add User-Defined Setting&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;CODE_SIGNING_REQUIRED&lt;/code&gt; setting with a value of &lt;code&gt;NO&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code Formatting&lt;/h3&gt; &#xA;&lt;p&gt;To ensure that the code is formatted consistently, run the script &lt;a href=&#34;https://github.com/firebase/firebase-ios-sdk/raw/master/scripts/check.sh&#34;&gt;./scripts/check.sh&lt;/a&gt; before creating a PR.&lt;/p&gt; &#xA;&lt;p&gt;GitHub Actions will verify that any code changes are done in a style compliant way. Install &lt;code&gt;clang-format&lt;/code&gt; and &lt;code&gt;mint&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install clang-format@14&#xA;brew install mint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Unit Tests&lt;/h3&gt; &#xA;&lt;p&gt;Select a scheme and press Command-u to build a component and run its unit tests.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for more information on contributing to the Firebase iOS SDK.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The contents of this repository is licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>