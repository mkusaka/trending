<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-17T02:18:54Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Kureev/react-native-blur</title>
    <updated>2022-07-17T02:18:54Z</updated>
    <id>tag:github.com,2022-07-17:/Kureev/react-native-blur</id>
    <link href="https://github.com/Kureev/react-native-blur" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React Native Blur component&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;@react-native-community/blur&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/js/%40react-native-community%2Fblur&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/%40react-native-community%2Fblur.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A component for UIVisualEffectView&#39;s blur and vibrancy effect on iOS, and &lt;a href=&#34;https://github.com/Dimezis/BlurView&#34;&gt;BlurView&lt;/a&gt; on Android.&lt;br&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/139536/25066337/3c9d44c0-224d-11e7-8ca6-028478bf4a7d.gif&#34;&gt; &#xA;&lt;h3&gt;Content&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/#blurview&#34;&gt;BlurView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/#vibrancyview&#34;&gt;VibrancyView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/#example-react-native-app&#34;&gt;Example React Native app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/#questions&#34;&gt;Questions?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the library using either Yarn:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add @react-native-community/blur&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install --save @react-native-community/blur&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;React-Native 0.59 and below only&lt;/strong&gt;: Link your native dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;react-native link @react-native-community/blur&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;(iOS only) Install to Xcode:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx pod-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you already have installed &lt;a href=&#34;https://cocoapods.org/&#34;&gt;Cocoapods&lt;/a&gt; on your system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ios &amp;amp;&amp;amp; pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;(Android only, optional) If you&#39;ve defined &lt;em&gt;&lt;a href=&#34;https://developer.android.com/studio/build/gradle-tips.html&#34;&gt;project-wide properties&lt;/a&gt;&lt;/em&gt; (&lt;strong&gt;recommended&lt;/strong&gt;) in your root &lt;code&gt;build.gradle&lt;/code&gt;, this library will detect the presence of the following properties:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;buildscript {...}&#xA;allprojects {...}&#xA;&#xA;/**&#xA;  + Project-wide Gradle configuration properties&#xA;  */&#xA;ext {&#xA;    compileSdkVersion   = 27&#xA;    targetSdkVersion    = 27&#xA;    buildToolsVersion   = &#34;27.0.3&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Include the library in your code:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { BlurView, VibrancyView } from &#34;@react-native-community/blur&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Compile and have fun!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;BlurView&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Properties:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;blurType&lt;/code&gt; (String) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;xlight&lt;/code&gt; - extra light blur type&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;light&lt;/code&gt; - light blur type&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;dark&lt;/code&gt; - dark blur type&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;extraDark&lt;/code&gt; - extra dark blur type (tvOS only)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;regular&lt;/code&gt; - regular blur type (iOS 10+ and tvOS only)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;prominent&lt;/code&gt; - prominent blur type (iOS 10+ and tvOS only)&lt;/li&gt; &#xA;   &lt;li&gt;iOS 13 only Blur types: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;chromeMaterial&lt;/code&gt; - An adaptable blur effect that creates the appearance of the system chrome.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;material&lt;/code&gt; - An adaptable blur effect that creates the appearance of a material with normal thickness.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;thickMaterial&lt;/code&gt; - An adaptable blur effect that creates the appearance of a material that is thicker than normal.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;thinMaterial&lt;/code&gt; - An adaptable blur effect that creates the appearance of an ultra-thin material.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ultraThinMaterial&lt;/code&gt; - An adaptable blur effect that creates the appearance of an ultra-thin material.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;chromeMaterialDark&lt;/code&gt; - A blur effect that creates the appearance of an ultra-thin material and is always dark.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;materialDark&lt;/code&gt; - A blur effect that creates the appearance of a thin material and is always dark.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;thickMaterialDark&lt;/code&gt; - A blur effect that creates the appearance of a material with normal thickness and is always dark.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;thinMaterialDark&lt;/code&gt; - A blur effect that creates the appearance of a material that is thicker than normal and is always dark.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ultraThinMaterialDark&lt;/code&gt; - A blur effect that creates the appearance of the system chrome and is always dark.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;chromeMaterialLight&lt;/code&gt; - An adaptable blur effect that creates the appearance of the system chrome.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;materialLight&lt;/code&gt; - An adaptable blur effect that creates the appearance of a material with normal thickness.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;thickMaterialLight&lt;/code&gt; - An adaptable blur effect that creates the appearance of a material that is thicker than normal.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;thinMaterialLight&lt;/code&gt; - An adaptable blur effect that creates the appearance of a thin material.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ultraThinMaterialLight&lt;/code&gt; - An adaptable blur effect that creates the appearance of an ultra-thin material.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;blurAmount&lt;/code&gt; (Default: 10, Number) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;0-100&lt;/code&gt; - Adjusts blur intensity&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;reducedTransparencyFallbackColor&lt;/code&gt; (Color) (iOS only) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;black, white, #rrggbb, etc&lt;/code&gt; - background color to use if accessibility setting ReduceTransparency is enabled&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The maximum &lt;code&gt;blurAmount&lt;/code&gt; on Android is 32, so higher values will be clamped to 32.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Complete usage example that works on iOS and Android:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { Component } from &#34;react&#34;;&#xA;import { View, Image, Text, StyleSheet } from &#34;react-native&#34;;&#xA;import { BlurView } from &#34;@react-native-community/blur&#34;;&#xA;&#xA;export default class Menu extends Component {&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;View style={styles.container}&amp;gt;&#xA;        &amp;lt;Image&#xA;          key={&#39;blurryImage&#39;}&#xA;          source={{ uri }}&#xA;          style={styles.absolute}&#xA;        /&amp;gt;&#xA;        &amp;lt;Text style={styles.absolute}&amp;gt;Hi, I am some blurred text&amp;lt;/Text&amp;gt;&#xA;{/* in terms of positioning and zIndex-ing everything before the BlurView will be blurred */}&#xA;        &amp;lt;BlurView&#xA;          style={styles.absolute}&#xA;          blurType=&#34;light&#34;&#xA;          blurAmount={10}&#xA;          reducedTransparencyFallbackColor=&#34;white&#34;&#xA;        /&amp;gt;&#xA;        &amp;lt;Text&amp;gt;I&#39;m the non blurred text because I got rendered on top of the BlurView&amp;lt;/Text&amp;gt;&#xA;      &amp;lt;/View&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;const styles = StyleSheet.create({&#xA;  container: {&#xA;    justifyContent: &#34;center&#34;,&#xA;    alignItems: &#34;center&#34;&#xA;  },&#xA;  absolute: {&#xA;    position: &#34;absolute&#34;,&#xA;    top: 0,&#xA;    left: 0,&#xA;    bottom: 0,&#xA;    right: 0&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, the &lt;code&gt;Image&lt;/code&gt; component will be blurred, because the &lt;code&gt;BlurView&lt;/code&gt; in positioned on top. But the &lt;code&gt;Text&lt;/code&gt; will stay unblurred.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;a href=&#34;https://support.apple.com/guide/iphone/display-settings-iph3e2e1fb0/ios&#34;&gt;accessibility setting &lt;code&gt;Reduce Transparency&lt;/code&gt;&lt;/a&gt; is enabled the &lt;code&gt;BlurView&lt;/code&gt; will use &lt;code&gt;reducedTransparencyFallbackColor&lt;/code&gt; as it&#39;s background color rather than blurring. If no &lt;code&gt;reducedTransparencyFallbackColor&lt;/code&gt; is provided, the&lt;code&gt;BlurView&lt;/code&gt;will use the default fallback color (white, black, or grey depending on &lt;code&gt;blurType&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;VibrancyView&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Uses the same properties as &lt;code&gt;BlurView&lt;/code&gt; (&lt;code&gt;blurType&lt;/code&gt;, &lt;code&gt;blurAmount&lt;/code&gt;, and &lt;code&gt;reducedTransparencyFallbackColor&lt;/code&gt;).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The vibrancy effect lets the content underneath a blurred view show through more vibrantly&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;(Note: &lt;code&gt;VibrancyView&lt;/code&gt; is only supported on iOS. Also note that the &lt;code&gt;VibrancyView&lt;/code&gt; must contain nested views.)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { VibrancyView } from &#34;@react-native-community/blur&#34;;&#xA;&#xA;export default class Menu extends Component {&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;Image source={{ uri }} style={styles.absolute}&amp;gt;&#xA;        &amp;lt;VibrancyView blurType=&#34;light&#34; style={styles.flex}&amp;gt;&#xA;          &amp;lt;Text&amp;gt;Hi, I am some vibrant text.&amp;lt;/Text&amp;gt;&#xA;        &amp;lt;/VibrancyView&amp;gt;&#xA;      &amp;lt;/Image&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Android uses the &lt;a href=&#34;https://github.com/Dimezis/BlurView&#34;&gt;BlurView&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you only need to support iOS, then you can safely ignore these limitations.&lt;/p&gt; &#xA;&lt;p&gt;In addition to &lt;code&gt;blurType&lt;/code&gt; and &lt;code&gt;blurAmount&lt;/code&gt;, Android has some extra props that can be used to override the default behavior (or configure Android-specific behavior):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;blurRadius&lt;/code&gt; (Number - between 0 and 25) - Manually adjust the blur radius. (Default: matches iOS blurAmount)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;downsampleFactor&lt;/code&gt; (Number - between 0 and 25) - Scales down the image before blurring (Default: matches iOS blurAmount)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;overlayColor&lt;/code&gt; (Color) - Set a custom overlay color (Default color based on iOS blurType)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example React Native App&lt;/h3&gt; &#xA;&lt;p&gt;This project includes an example React Native app, which was used to make the GIF in this README. You can run the apps by following these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~&#xA;git clone https://github.com/react-native-community/react-native-blur.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;cd to &lt;code&gt;example&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd react-native-blur/example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install dependencies&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run the apps:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Run the iOS app&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;react-native run-ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run the tvOS app&lt;/h4&gt; &#xA;&lt;p&gt;type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;react-native run-ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;react-native link&lt;/code&gt; don’t works properly with the tvOS target so we need to add the library manually.&lt;/p&gt; &#xA;&lt;p&gt;First select your project in Xcode.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/docs/tvOS-step-1.jpg&#34; width=&#34;40%&#34;&gt; &#xA;&lt;p&gt;After that, select the tvOS target of your application and select «&amp;nbsp;General&amp;nbsp;» tab&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/docs/tvOS-step-2.jpg&#34; width=&#34;40%&#34;&gt; &#xA;&lt;p&gt;Scroll to «&amp;nbsp;Linked Frameworks and Libraries&amp;nbsp;» and tap on the + button&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/docs/tvOS-step-3.jpg&#34; width=&#34;40%&#34;&gt; &#xA;&lt;p&gt;Select RNBlur-tvOS&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/docs/tvOS-step-4.jpg&#34; width=&#34;40%&#34;&gt; &#xA;&lt;p&gt;That’s all, you can use react-native-blur for your tvOS application&lt;/p&gt; &#xA;&lt;h4&gt;Run the Android app&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;react-native run-android&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;On older instances of react-native, BlurView package does not get added into the MainActivity/MainApplication classes where you would see &lt;code&gt;Warning: Native component for &#39;BlurView&#39; does not exist&lt;/code&gt; in RN YellowBox or console.&lt;/p&gt; &#xA;&lt;p&gt;To rectify this, you can add the BlurViewPackage manually in MainActivity/MainApplication classes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;...&#xA;import com.cmcewen.blurview.BlurViewPackage;&#xA;...&#xA;&#xA;public class MainApplication extends Application implements ReactApplication {&#xA;...&#xA;    @Override&#xA;    protected List&amp;lt;ReactPackage&amp;gt; getPackages() {&#xA;      return Arrays.&amp;lt;ReactPackage&amp;gt;asList(&#xA;          new MainReactPackage(),&#xA;          new BlurViewPackage()&#xA;      );&#xA;    }&#xA;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Questions?&lt;/h3&gt; &#xA;&lt;p&gt;Feel free to contact me on &lt;a href=&#34;https://twitter.com/kureevalexey&#34;&gt;twitter&lt;/a&gt; or &lt;a href=&#34;https://github.com/Kureev/react-native-blur/issues/new&#34;&gt;create an issue&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/GoogleSignIn-iOS</title>
    <updated>2022-07-17T02:18:54Z</updated>
    <id>tag:github.com,2022-07-17:/google/GoogleSignIn-iOS</id>
    <link href="https://github.com/google/GoogleSignIn-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Enables iOS and macOS apps to sign in with Google.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/GoogleSignIn&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/GoogleSignIn.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/GoogleSignIn&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/GoogleSignIn.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/GoogleSignIn&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/GoogleSignIn.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/GoogleSignIn-iOS/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/google/GoogleSignIn-iOS/actions/workflows/tests.yml/badge.svg?event=push&#34; alt=&#34;tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Google Sign-In for iOS and macOS&lt;/h1&gt; &#xA;&lt;p&gt;Get users into your apps quickly and securely, using a registration system they already use and trust—their Google account.&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://developers.google.com/identity/sign-in/ios/&#34;&gt;our developer site&lt;/a&gt; for integration instructions, documentation, support information, and terms of service.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Try either the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/ObjC&#34;&gt;Objective-C&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/Swift&#34;&gt;Swift&lt;/a&gt; sample app. For example, to demo the Objective-C sample project, you have three options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;&#39;s &lt;code&gt;try&lt;/code&gt; method:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod try GoogleSignIn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, this will default to providing you with the Objective-C sample app.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Using CocoaPod&#39;s &lt;code&gt;install&lt;/code&gt; method:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/GoogleSignIn-iOS&#xA;cd GoogleSignIn-iOS/Samples/ObjC/SignInSample/&#xA;pod install&#xA;open SignInSampleForPod.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/GoogleSignIn-iOS&#xA;open GoogleSignIn-iOS/Samples/ObjC/SignInSample/SignInSample.xcodeproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to see a Swift example, take a look at &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/Swift/DaysUntilBirthday&#34;&gt;Samples/Swift/DaysUntilBirthday&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add Google Sign-In to your own app by following our &lt;a href=&#34;https://developers.google.com/identity/sign-in/ios/start-integrating&#34;&gt;getting started guides&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Take a look at the &lt;a href=&#34;https://developers.google.com/identity/sign-in/ios/api/&#34;&gt;API reference&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Google Sign-In on macOS&lt;/h2&gt; &#xA;&lt;p&gt;Google Sign-In allows your users to sign-in to your native macOS app using their Google account and default browser. When building for macOS, the &lt;code&gt;signInWithConfiguration:&lt;/code&gt; and &lt;code&gt;addScopes:&lt;/code&gt; methods take a &lt;code&gt;presentingWindow:&lt;/code&gt; parameter in place of &lt;code&gt;presentingViewController:&lt;/code&gt;. Note that in order for your macOS app to store credientials via the Keychain on macOS, you will need to &lt;a href=&#34;https://developer.apple.com/support/code-signing/&#34;&gt;sign your app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Mac Catalyst&lt;/h3&gt; &#xA;&lt;p&gt;Google Sign-In also supports iOS apps that are built for macOS via &lt;a href=&#34;https://developer.apple.com/mac-catalyst/&#34;&gt;Mac Catalyst&lt;/a&gt;. In order for your Mac Catalyst app to store credientials via the Keychain on macOS, you will need to &lt;a href=&#34;https://developer.apple.com/support/code-signing/&#34;&gt;sign your app&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>realm/realm-swift</title>
    <updated>2022-07-17T02:18:54Z</updated>
    <id>tag:github.com,2022-07-17:/realm/realm-swift</id>
    <link href="https://github.com/realm/realm-swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Realm is a mobile database: a replacement for Core Data &amp; SQLite&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/realm/realm-swift/raw/master/logo.png&#34; alt=&#34;Realm&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Realm is a mobile database that runs directly inside phones, tablets or wearables. This repository holds the source code for the iOS, macOS, tvOS &amp;amp; watchOS versions of Realm Swift &amp;amp; Realm Objective-C.&lt;/p&gt; &#xA;&lt;h2&gt;Why Use Realm&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intuitive to Developers:&lt;/strong&gt; Realm’s object-oriented data model is simple to learn, doesn’t need an ORM, and lets you write less code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Designed for Offline Use:&lt;/strong&gt; Realm’s local database persists data on-disk, so apps work as well offline as they do online.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Built for Mobile:&lt;/strong&gt; Realm is fully-featured, lightweight, and efficiently uses memory, disk space, and battery life.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Object-Oriented: Streamline Your Code&lt;/h2&gt; &#xA;&lt;p&gt;Realm was built for mobile developers, with simplicity in mind. The idiomatic, object-oriented data model can save you thousands of lines of code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Define your models like regular Swift classes&#xA;class Dog: Object {&#xA;    @Persisted var name: String&#xA;    @Persisted var age: Int&#xA;}&#xA;class Person: Object {&#xA;    @Persisted(primaryKey: true) var _id: String&#xA;    @Persisted var name: String&#xA;    @Persisted var age: Int&#xA;    // Create relationships by pointing an Object field to another Class&#xA;    @Persisted var dogs: List&amp;lt;Dog&amp;gt;&#xA;}&#xA;// Use them like regular Swift objects&#xA;let dog = Dog()&#xA;dog.name = &#34;Rex&#34;&#xA;dog.age = 1&#xA;print(&#34;name of dog: \(dog.name)&#34;)&#xA;&#xA;// Get the default Realm&#xA;let realm = try! Realm()&#xA;// Persist your data easily with a write transaction &#xA;try! realm.write {&#xA;    realm.add(dog)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Live Objects: Build Reactive Apps&lt;/h2&gt; &#xA;&lt;p&gt;Realm’s live objects mean data updated anywhere is automatically updated everywhere.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Open the default realm.&#xA;let realm = try! Realm()&#xA;&#xA;var token: NotificationToken?&#xA;&#xA;let dog = Dog()&#xA;dog.name = &#34;Max&#34;&#xA;&#xA;// Create a dog in the realm.&#xA;try! realm.write {&#xA;    realm.add(dog)&#xA;}&#xA;&#xA;//  Set up the listener &amp;amp; observe object notifications.&#xA;token = dog.observe { change in&#xA;    switch change {&#xA;    case .change(let properties):&#xA;        for property in properties {&#xA;            print(&#34;Property &#39;\(property.name)&#39; changed to &#39;\(property.newValue!)&#39;&#34;);&#xA;        }&#xA;    case .error(let error):&#xA;        print(&#34;An error occurred: (error)&#34;)&#xA;    case .deleted:&#xA;        print(&#34;The object was deleted.&#34;)&#xA;    }&#xA;}&#xA;&#xA;// Update the dog&#39;s name to see the effect.&#xA;try! realm.write {&#xA;    dog.name = &#34;Wolfie&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SwiftUI&lt;/h3&gt; &#xA;&lt;p&gt;Realm integrates directly with SwiftUI, updating your views so you don&#39;t have to.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContactsView: View {&#xA;    @ObservedResults(Person.self) var persons&#xA;    &#xA;    var body: some View {&#xA;        List {&#xA;            ForEach(persons) { person in&#xA;                Text(person.name)&#xA;            }&#xA;            .onMove(perform: $persons.move)&#xA;            .onDelete(perform: $persons.remove)&#xA;        }.navigationBarItems(trailing:&#xA;            Button(&#34;Add&#34;) {&#xA;                $persons.append(Person())&#xA;            }&#xA;        )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fully Encrypted&lt;/h2&gt; &#xA;&lt;p&gt;Data can be encrypted in-flight and at-rest, keeping even the most sensitive data secure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Generate a random encryption key&#xA;var key = Data(count: 64)&#xA;_ = key.withUnsafeMutableBytes { bytes in&#xA;    SecRandomCopyBytes(kSecRandomDefault, 64, bytes)&#xA;}&#xA;&#xA;// Add the encryption key to the config and open the realm&#xA;let config = Realm.Configuration(encryptionKey: key)&#xA;let realm = try Realm(configuration: config)&#xA;&#xA;// Use the Realm as normal&#xA;let dogs = realm.objects(Dog.self).filter(&#34;name contains &#39;Fido&#39;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data Sync&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.mongodb.com/atlas/app-services/device-sync&#34;&gt;Device Sync&lt;/a&gt; service makes it simple to keep data in sync across users, devices, and your backend in real-time.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;We support installing Realm via Swift Package Manager, CocoaPods, Carthage, or by importing a dynamic XCFramework.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see the detailed instructions in our &lt;a href=&#34;https://docs.mongodb.com/realm/sdk/ios/install/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation can be found at &lt;a href=&#34;https://docs.mongodb.com/realm/sdk/ios/&#34;&gt;docs.mongodb.com/realm/sdk/ios/&lt;/a&gt;.&lt;br&gt; The API reference is located at &lt;a href=&#34;https://docs.mongodb.com/realm-sdks/swift/latest/&#34;&gt;docs.mongodb.com/realm-sdks/swift/latest/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Need help with your code?&lt;/strong&gt;: Look for previous questions with the&lt;a href=&#34;https://stackoverflow.com/questions/tagged/realm?sort=newest&#34;&gt;&lt;code&gt;realm&lt;/code&gt; tag&lt;/a&gt; on Stack Overflow or &lt;a href=&#34;https://stackoverflow.com/questions/ask?tags=realm&#34;&gt;ask a new question&lt;/a&gt;. For general discussion that might be considered too broad for Stack Overflow, use the &lt;a href=&#34;https://developer.mongodb.com/community/forums/tags/c/realm-sdks/58/swift/&#34;&gt;Community Forum&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Have a bug to report?&lt;/strong&gt; &lt;a href=&#34;https://github.com/realm/realm-swift/issues/new&#34;&gt;Open a GitHub issue&lt;/a&gt;. If possible, include the version of Realm, a full log, the Realm file, and a project that shows the issue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Have a feature request?&lt;/strong&gt; &lt;a href=&#34;https://github.com/realm/realm-swift/issues/new&#34;&gt;Open a GitHub issue&lt;/a&gt;. Tell us what the feature should do and why you want the feature.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Realm&lt;/h2&gt; &#xA;&lt;p&gt;In case you don&#39;t want to use the precompiled version, you can build Realm yourself from source.&lt;/p&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Building Realm requires Xcode 11.x or newer.&lt;/li&gt; &#xA; &lt;li&gt;Building Realm documentation requires &lt;a href=&#34;https://github.com/realm/jazzy&#34;&gt;jazzy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have all the necessary prerequisites, building Realm.framework just takes a single command: &lt;code&gt;sh build.sh build&lt;/code&gt;. You&#39;ll need an internet connection the first time you build Realm to download the core binary.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;sh build.sh help&lt;/code&gt; to see all the actions you can perform (build ios/osx, generate docs, test, etc.).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/realm/realm-swift/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details!&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project adheres to the &lt;a href=&#34;https://www.mongodb.com/community-code-of-conduct&#34;&gt;MongoDB Code of Conduct&lt;/a&gt;. By participating, you are expected to uphold this code. Please report unacceptable behavior to &lt;a href=&#34;mailto:community-conduct@mongodb.com&#34;&gt;community-conduct@mongodb.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Realm Objective-C &amp;amp; Realm Swift are published under the Apache 2.0 license.&lt;br&gt; Realm Core is also published under the Apache 2.0 license and is available &lt;a href=&#34;https://github.com/realm/realm-core&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This product is not being made available to any person located in Cuba, Iran, North Korea, Sudan, Syria or the Crimea region, or to any other person that is not eligible to receive the product under U.S. law.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;If you use Realm and are happy with it, please consider sending out a tweet mentioning &lt;a href=&#34;https://twitter.com/realm&#34;&gt;@realm&lt;/a&gt; to share your thoughts!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;And if you don&#39;t like it, please let us know what you would like improved, so we can fix it!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img style=&#34;width: 0px; height: 0px;&#34; src=&#34;https://3eaz4mshcd.execute-api.us-east-1.amazonaws.com/prod?s=https://github.com/realm/realm-swift#README.md&#34;&gt;</summary>
  </entry>
</feed>