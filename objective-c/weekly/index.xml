<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-20T01:52:44Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>erikdoe/ocmock</title>
    <updated>2023-08-20T01:52:44Z</updated>
    <id>tag:github.com,2023-08-20:/erikdoe/ocmock</id>
    <link href="https://github.com/erikdoe/ocmock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mock objects for Objective-C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OCMock&lt;/h1&gt; &#xA;&lt;p&gt;OCMock is an Objective-C implementation of mock objects.&lt;/p&gt; &#xA;&lt;p&gt;For downloads, documentation, and support please visit &lt;a href=&#34;http://ocmock.org/&#34;&gt;ocmock.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.travis-ci.com/github/erikdoe/ocmock&#34;&gt;&lt;img src=&#34;https://travis-ci.com/erikdoe/ocmock.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>specta/specta</title>
    <updated>2023-08-20T01:52:44Z</updated>
    <id>tag:github.com,2023-08-20:/specta/specta</id>
    <link href="https://github.com/specta/specta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A light-weight TDD / BDD framework for Objective-C &amp; Cocoa&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Specta&lt;/h1&gt; &#xA;&lt;p&gt;A light-weight TDD / BDD framework for Objective-C.&lt;/p&gt; &#xA;&lt;h2&gt;FEATURES&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An Objective-C RSpec-like BDD DSL&lt;/li&gt; &#xA; &lt;li&gt;Quick and easy set up&lt;/li&gt; &#xA; &lt;li&gt;Built on top of XCTest&lt;/li&gt; &#xA; &lt;li&gt;Excellent Xcode integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SCREENSHOT&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/specta/specta/master/misc/specta_screenshot.jpg&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h2&gt;EXAMPLE&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;Specta/Specta.h&amp;gt; // #import &#34;Specta.h&#34; if you&#39;re using libSpecta.a&#xA;&#xA;SharedExamplesBegin(MySharedExamples)&#xA;// Global shared examples are shared across all spec files.&#xA;&#xA;sharedExamplesFor(@&#34;foo&#34;, ^(NSDictionary *data) {&#xA;    __block id bar = nil;&#xA;    beforeEach(^{&#xA;        bar = data[@&#34;bar&#34;];&#xA;    });&#xA;    it(@&#34;should not be nil&#34;, ^{&#xA;        XCTAssertNotNil(bar);&#xA;    });&#xA;});&#xA;&#xA;SharedExamplesEnd&#xA;&#xA;SpecBegin(Thing)&#xA;&#xA;describe(@&#34;Thing&#34;, ^{&#xA;  sharedExamplesFor(@&#34;another shared behavior&#34;, ^(NSDictionary *data) {&#xA;    // Locally defined shared examples can override global shared examples within its scope.&#xA;  });&#xA;&#xA;  beforeAll(^{&#xA;    // This is run once and only once before all of the examples&#xA;    // in this group and before any beforeEach blocks.&#xA;  });&#xA;&#xA;  beforeEach(^{&#xA;    // This is run before each example.&#xA;  });&#xA;&#xA;  it(@&#34;should do stuff&#34;, ^{&#xA;    // This is an example block. Place your assertions here.&#xA;  });&#xA;&#xA;  it(@&#34;should do some stuff asynchronously&#34;, ^{&#xA;    waitUntil(^(DoneCallback done) {&#xA;      // Async example blocks need to invoke done() callback.&#xA;      done();&#xA;    });&#xA;  });&#xA;&#xA;  itShouldBehaveLike(@&#34;a shared behavior&#34;, @{@&#34;key&#34; : @&#34;obj&#34;});&#xA;&#xA;  itShouldBehaveLike(@&#34;another shared behavior&#34;, ^{&#xA;    // Use a block that returns a dictionary if you need the context to be evaluated lazily,&#xA;    // e.g. to use an object prepared in a beforeEach block.&#xA;    return @{@&#34;key&#34; : @&#34;obj&#34;};&#xA;  });&#xA;&#xA;  describe(@&#34;Nested examples&#34;, ^{&#xA;    it(@&#34;should do even more stuff&#34;, ^{&#xA;      // ...&#xA;    });&#xA;  });&#xA;&#xA;  pending(@&#34;pending example&#34;);&#xA;&#xA;  pending(@&#34;another pending example&#34;, ^{&#xA;    // ...&#xA;  });&#xA;&#xA;  afterEach(^{&#xA;    // This is run after each example.&#xA;  });&#xA;&#xA;  afterAll(^{&#xA;    // This is run once and only once after all of the examples&#xA;    // in this group and after any afterEach blocks.&#xA;  });&#xA;});&#xA;&#xA;SpecEnd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;beforeEach&lt;/code&gt; and &lt;code&gt;afterEach&lt;/code&gt; are also aliased as &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; respectively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;describe&lt;/code&gt; is also aliased as &lt;code&gt;context&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;it&lt;/code&gt; is also aliased as &lt;code&gt;example&lt;/code&gt; and &lt;code&gt;specify&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;itShouldBehaveLike&lt;/code&gt; is also aliased as &lt;code&gt;itBehavesLike&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;pending&lt;/code&gt; or prepend &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;describe&lt;/code&gt;, &lt;code&gt;context&lt;/code&gt;, &lt;code&gt;example&lt;/code&gt;, &lt;code&gt;it&lt;/code&gt;, and &lt;code&gt;specify&lt;/code&gt; to mark examples or groups as pending.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;^(DoneCallback done)&lt;/code&gt; as shown in the example above to make examples wait for completion. &lt;code&gt;done()&lt;/code&gt; callback needs to be invoked to let Specta know that your test is complete. The default timeout is 10.0 seconds but this can be changed by calling the function &lt;code&gt;setAsyncSpecTimeout(NSTimeInterval timeout)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(before|after)(Each/All)&lt;/code&gt; also accept &lt;code&gt;^(DoneCallback done)&lt;/code&gt;s.&lt;/li&gt; &#xA; &lt;li&gt;Do &lt;code&gt;#define SPT_CEDAR_SYNTAX&lt;/code&gt; before importing Specta if you prefer to write &lt;code&gt;SPEC_BEGIN&lt;/code&gt; and &lt;code&gt;SPEC_END&lt;/code&gt; instead of &lt;code&gt;SpecBegin&lt;/code&gt; and &lt;code&gt;SpecEnd&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Prepend &lt;code&gt;f&lt;/code&gt; to your &lt;code&gt;describe&lt;/code&gt;, &lt;code&gt;context&lt;/code&gt;, &lt;code&gt;example&lt;/code&gt;, &lt;code&gt;it&lt;/code&gt;, and &lt;code&gt;specify&lt;/code&gt; to set focus on examples or groups. When specs are focused, all unfocused specs are skipped.&lt;/li&gt; &#xA; &lt;li&gt;To use original XCTest reporter, set an environment variable named &lt;code&gt;SPECTA_REPORTER_CLASS&lt;/code&gt; to &lt;code&gt;SPTXCTestReporter&lt;/code&gt; in your test scheme.&lt;/li&gt; &#xA; &lt;li&gt;Set an environment variable &lt;code&gt;SPECTA_SHUFFLE&lt;/code&gt; with value &lt;code&gt;1&lt;/code&gt; to enable test shuffling.&lt;/li&gt; &#xA; &lt;li&gt;Set an environment variable &lt;code&gt;SPECTA_SEED&lt;/code&gt; to specify the random seed for test shuffling.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Standard XCTest matchers such as &lt;code&gt;XCTAssertEqualObjects&lt;/code&gt; and &lt;code&gt;XCTAssertNil&lt;/code&gt; work, but you probably want to add a nicer matcher framework - &lt;a href=&#34;https://github.com/specta/expecta/&#34;&gt;Expecta&lt;/a&gt; to your setup. Or if you really prefer, &lt;a href=&#34;https://github.com/hamcrest/OCHamcrest&#34;&gt;OCHamcrest&lt;/a&gt; works fine too. Also, add a mocking framework: &lt;a href=&#34;http://ocmock.org/&#34;&gt;OCMock&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;STATUS&lt;/h2&gt; &#xA;&lt;p&gt;Specta is considered a done project, there are no plans for &lt;em&gt;active&lt;/em&gt; development on the project at the moment aside from ensuring future Xcode compatability. Therefore it is a stable dependency, but will not be moving into the Swift world. If you are looking for that, we recommend you consider &lt;a href=&#34;https://github.com/quick/quick&#34;&gt;Quick&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;RUNNING SPECTA&#39;S TESTS IN COMMAND LINE&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rake test&lt;/code&gt; in the cloned folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CONTRIBUTION GUIDELINES&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please use only spaces and indent 2 spaces at a time.&lt;/li&gt; &#xA; &lt;li&gt;Please prefix instance variable names with a single underscore (&lt;code&gt;_&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Please prefix custom classes and functions defined in the global scope with &lt;code&gt;SPT&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://github.com/carthage/carthage&#34;&gt;Carthage&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/specta/specta/main/#setting-up-manually&#34;&gt;Set up manually&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add Specta to your project&#39;s &lt;code&gt;Podfile&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target :MyApp do&#xA;# your app dependencies&#xA;&#xA;  target :MyAppTests do&#xA;    inherit! :search_paths&#xA;&#xA;    pod &#39;Specta&#39;, &#39;~&amp;gt; 2.0&#39;&#xA;    # pod &#39;Expecta&#39;,     &#39;~&amp;gt; 1.0&#39;   # expecta matchers&#xA;    # pod &#39;OCMock&#39;,      &#39;~&amp;gt; 2.2&#39;   # OCMock&#xA;    # pod &#39;OCHamcrest&#39;,  &#39;~&amp;gt; 3.0&#39;   # hamcrest matchers&#xA;    # pod &#39;OCMockito&#39;,   &#39;~&amp;gt; 1.0&#39;   # OCMock&#xA;    # pod &#39;LRMocky&#39;,     &#39;~&amp;gt; 0.9&#39;   # LRMocky&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; in your project directory.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Specta to your project&#39;s &lt;code&gt;Cartfile.private&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;github &#34;specta/specta&#34; ~&amp;gt; 2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; in your project directory&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Drag the appropriate &lt;code&gt;Specta.framework&lt;/code&gt; for your platform (located in Carthage/Build/) into your application’s Xcode project, and add it to your test target(s).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are building for iOS, a new &lt;code&gt;Run Script Phase&lt;/code&gt; must be added to copy the framework. The instructions can be found on &lt;a href=&#34;https://github.com/carthage/carthage#getting-started&#34;&gt;Carthage&#39;s getting started instructions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;SETTING UP MANUALLY&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone from GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rake&lt;/code&gt; in project root to build.&lt;/li&gt; &#xA; &lt;li&gt;Add a &#34;Cocoa/Cocoa Touch Unit Testing Bundle&#34; target if you don&#39;t already have one.&lt;/li&gt; &#xA; &lt;li&gt;Copy and add all header files in &lt;code&gt;Products&lt;/code&gt; folder to the Test target in your Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;For &lt;strong&gt;OS X projects&lt;/strong&gt;, copy and add &lt;code&gt;Specta.framework&lt;/code&gt; in &lt;code&gt;Products/osx&lt;/code&gt; folder to the test target in your Xcode project. For &lt;strong&gt;iOS projects&lt;/strong&gt;, copy and add &lt;code&gt;Specta.framework&lt;/code&gt; in &lt;code&gt;Products/ios&lt;/code&gt; folder to the test target in your Xcode project. You can alternatively use &lt;code&gt;libSpecta.a&lt;/code&gt;, if you prefer to add it as a static library for your project. (iOS 7 and below require this)&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;-ObjC&lt;/code&gt; and &lt;code&gt;-all_load&lt;/code&gt; to the &#34;Other Linker Flags&#34; build setting for the test target in your Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;If you encounter linking issues with &lt;code&gt;_llvm_*&lt;/code&gt; symbols, ensure your target&#39;s &#34;Generate Test Coverage Files&#34; and &#34;Instrument Program Flow&#34; build settings are set to &lt;code&gt;Yes&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2012-2022 &lt;a href=&#34;https://github.com/orgs/specta/people&#34;&gt;Specta Team&lt;/a&gt;. This software is licensed under the &lt;a href=&#34;http://github.com/specta/specta/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zxingify/zxingify-objc</title>
    <updated>2023-08-20T01:52:44Z</updated>
    <id>tag:github.com,2023-08-20:/zxingify/zxingify-objc</id>
    <link href="https://github.com/zxingify/zxingify-objc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Objective-C Port of ZXing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;zxingify-objc&lt;/h1&gt; &#xA;&lt;p&gt;ZXingObjC is a full Objective-C port of &lt;a href=&#34;https://github.com/zxing/zxing&#34;&gt;ZXing&lt;/a&gt; (&#34;Zebra Crossing&#34;), a Java barcode image processing library. It is designed to be used on both iOS devices and in Mac applications.&lt;/p&gt; &#xA;&lt;p&gt;The following barcodes are currently supported for both encoding and decoding:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UPC-A and UPC-E&lt;/li&gt; &#xA; &lt;li&gt;EAN-8 and EAN-13&lt;/li&gt; &#xA; &lt;li&gt;Code 39&lt;/li&gt; &#xA; &lt;li&gt;Code 93&lt;/li&gt; &#xA; &lt;li&gt;Code 128&lt;/li&gt; &#xA; &lt;li&gt;ITF&lt;/li&gt; &#xA; &lt;li&gt;Codabar&lt;/li&gt; &#xA; &lt;li&gt;RSS-14 (all variants)&lt;/li&gt; &#xA; &lt;li&gt;QR Code&lt;/li&gt; &#xA; &lt;li&gt;Data Matrix&lt;/li&gt; &#xA; &lt;li&gt;Maxicode&lt;/li&gt; &#xA; &lt;li&gt;Aztec (&#39;beta&#39; quality)&lt;/li&gt; &#xA; &lt;li&gt;PDF 417 (&#39;beta&#39; quality)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ZXingObjC currently has feature parity with ZXing version 3.3.3.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;ZXingObjC requires Xcode 8.3.3 and above, targeting either iOS 8.0 and above, or Mac OS X 10.8 Mountain Lion and above.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Encoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSError *error = nil;&#xA;ZXMultiFormatWriter *writer = [ZXMultiFormatWriter writer];&#xA;ZXBitMatrix* result = [writer encode:@&#34;A string to encode&#34;&#xA;                              format:kBarcodeFormatQRCode&#xA;                               width:500&#xA;                              height:500&#xA;                               error:&amp;amp;error];&#xA;if (result) {&#xA;  CGImageRef image = CGImageRetain([[ZXImage imageWithMatrix:result] cgimage]);&#xA;&#xA;  // This CGImageRef image can be placed in a UIImage, NSImage, or written to a file.&#xA;  &#xA;  CGImageRelease(image);&#xA;} else {&#xA;  NSString *errorMessage = [error localizedDescription];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Decoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;CGImageRef imageToDecode;  // Given a CGImage in which we are looking for barcodes&#xA;&#xA;ZXLuminanceSource *source = [[[ZXCGImageLuminanceSource alloc] initWithCGImage:imageToDecode] autorelease];&#xA;ZXBinaryBitmap *bitmap = [ZXBinaryBitmap binaryBitmapWithBinarizer:[ZXHybridBinarizer binarizerWithSource:source]];&#xA;&#xA;NSError *error = nil;&#xA;&#xA;// There are a number of hints we can give to the reader, including&#xA;// possible formats, allowed lengths, and the string encoding.&#xA;ZXDecodeHints *hints = [ZXDecodeHints hints];&#xA;&#xA;ZXMultiFormatReader *reader = [ZXMultiFormatReader reader];&#xA;ZXResult *result = [reader decode:bitmap&#xA;                            hints:hints&#xA;                            error:&amp;amp;error];&#xA;if (result) {&#xA;  // The coded result as a string. The raw data can be accessed with&#xA;  // result.rawBytes and result.length.&#xA;  NSString *contents = result.text;&#xA;&#xA;  // The barcode format, such as a QR code or UPC-A&#xA;  ZXBarcodeFormat format = result.barcodeFormat;&#xA;} else {&#xA;  // Use error to determine why we didn&#39;t get a result, such as a barcode&#xA;  // not being found, an invalid checksum, or a format inconsistency.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We highly recommend Carthage as module manager.&lt;/p&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;ZXingObjC can be installed using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;. After installing Carthage just add ZXingObjC to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;TheLevelUp/ZXingObjC&#34; ~&amp;gt; 3.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Swift and Objective-C Cocoa projects. After installing CocoaPods add ZXingObjC to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;8.0&#39;&#xA;pod &#39;ZXingObjC&#39;, &#39;~&amp;gt; 3.6.4&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;ZXingObjC includes several example applications found in &#34;examples&#34; folder:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BarcodeScanner - An iOS application that captures video from the camera, scans for barcodes and displays results on screen.&lt;/li&gt; &#xA; &lt;li&gt;BarcodeScannerSwift - An iOS application that captures video from the camera, scans for barcodes and displays results on screen, completely rewritten in Swift.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Kudos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cwalcott&#34;&gt;cwalcott&lt;/a&gt; initial creator of this project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neacao&#34;&gt;neacao&lt;/a&gt; for his unparalleled support lately&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/claybridges&#34;&gt;claybridges&lt;/a&gt; for all the help regarding the project move&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ZXingObjC is available under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>