<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-07T02:01:02Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sehone/IIILocalizedIndex</title>
    <updated>2023-05-07T02:01:02Z</updated>
    <id>tag:github.com,2023-05-07:/sehone/IIILocalizedIndex</id>
    <link href="https://github.com/sehone/IIILocalizedIndex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;IIILocalizedIndex is a simple Objective-C class to index a localized data source array, it constructs indexes for both alphabetic and ideographic languages like CJK.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IIILocalizedIndex&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;IIILocalizedIndex is a simple &lt;strong&gt;Objective-C&lt;/strong&gt; class to index a localized data source array, it constructs indexes for both alphabetic and ideographic languages like CJK. You can use it to create indexed table view with multi-language support, as the &#39;Contacts&#39; app.&lt;/p&gt; &#xA;&lt;img width=&#34;300&#34; src=&#34;https://github.com/sehone/IIILocalizedIndex/raw/master/doc/screenshot.png&#34;&gt; &#xA;&lt;p&gt;This is still an init version, we need to add more supporting languages. So anyone who has knowledge in different languages is welcome to accomplish this class.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;en&lt;/code&gt; English&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zh-Hans&lt;/code&gt; Simplified Chinese&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why need it&lt;/h2&gt; &#xA;&lt;p&gt;For alphabet based languages, it&#39;s easy to index an array and to get the common [A-Z] or localized index, &lt;code&gt;UILocalizedIndexedCollation&lt;/code&gt; can do the job for you.&lt;/p&gt; &#xA;&lt;p&gt;However, some languages are not based on alphabet (i.e. CJK), some based on ideographic writing system. It&#39;s kind of difficult to construct alphabetic index from ideographic characters. This is the case when you might need IIILocalizedIndex.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Theoretically, if a language supports &#39;localizedCaseInsensitiveCompare&#39;, then there is a certain order for all characters in that language. If this order makes sense to users (i.e. alphabetic order, pronouncing order), then it&#39;s possible to find a group of delimiters to partition all those characters into sections, and to provide an title for each section (i.e. for English, the section titles are [A-Z]).&lt;/p&gt; &#xA;&lt;p&gt;IIILocalizedIndex provides a group of delimiters for every supported language, and a group of corresponding section titles. These section titles could be any characters, you can set them as [A-Z], [0-9], or any localized characters, or whatever.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The precondition for IIILocalizedIndex is that the order for characters in that language is intelligible to users, and delimiters are obvious and reasonable for partitioning all characters.&lt;/p&gt; &lt;p&gt;For example: There is a mapping relationship between [A-Z] alphabet and the pronunciation of Chinese characters, and it&#39;s evident to app users that the order of Chinese characters is &lt;em&gt;generally&lt;/em&gt; based on pronunciation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&#39;Generally&#39;&lt;/em&gt; means not 100% based on that rule. There are few strange Chinese characters are not ordered based on pronunciation (They are so strange that you can think the pronunciation is a right rule). So another limitation is that order rule for a language should be consistent to users.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use it&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the IIILocalizedIndex folder to your project.&lt;/li&gt; &#xA; &lt;li&gt;Invoke the &lt;code&gt;+ (NSDictionary *)indexed:(NSArray *)data&lt;/code&gt; method to get a dictionary, use this dic to set data for table view.&lt;/li&gt; &#xA; &lt;li&gt;This method sends &lt;code&gt;description&lt;/code&gt; message to items in data array. So if items are objects of custom classes, remember to implement your own &lt;code&gt;description&lt;/code&gt; method for getting index.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;IIILocalizedIndex uses ARC. If you are not using ARC in your project, add &lt;code&gt;&#39;-fobjc-arc&#39;&lt;/code&gt; as a compiler flag for all the files in IIILocalizedIndex.&lt;/p&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;All source code is licensed under the [MIT License][3] [3]: &lt;a href=&#34;https://raw.github.com/sehone/IIILocalizedIndex/master/LICENSE.md&#34;&gt;https://raw.github.com/sehone/IIILocalizedIndex/master/LICENSE.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>samuelclay/NewsBlur</title>
    <updated>2023-05-07T02:01:02Z</updated>
    <id>tag:github.com,2023-05-07:/samuelclay/NewsBlur</id>
    <link href="https://github.com/samuelclay/NewsBlur" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NewsBlur is a personal news reader that brings people together to talk about the world. A new sound of an old instrument.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NewsBlur&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NewsBlur is a personal news reader bringing people together to talk about the world. A new sound of an old instrument.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.newsblur.com&#34;&gt;www.newsblur.com&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Created by &lt;a href=&#34;http://www.samuelclay.com&#34;&gt;Samuel Clay&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;http://twitter.com/samuelclay&#34;&gt;@samuelclay&lt;/a&gt; and &lt;a href=&#34;http://twitter.com/newsblur&#34;&gt;@newsblur&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://f-droid.org/repository/browse/?fdid=com.newsblur&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://f-droid.org/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;80&#34;&gt;&lt;/a&gt; &#xA;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.newsblur&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en-play-badge.png&#34; alt=&#34;Get it on Google Play&#34; height=&#34;80&#34;&gt;&lt;/a&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Shows the original site (you have to see it to believe it).&lt;/li&gt; &#xA; &lt;li&gt;Hides stories you don&#39;t want to read based on tags, keywords, authors, etc.&lt;/li&gt; &#xA; &lt;li&gt;Highlights stories you want to read, based on the same criteria.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Technologies&lt;/h2&gt; &#xA;&lt;h3&gt;Server-side&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.python.org&#34;&gt;Python 3.7+&lt;/a&gt;: The language of choice.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.djangoproject.com&#34;&gt;Django&lt;/a&gt;: Web framework written in Python, used to serve all pages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ask.github.com/celery&#34;&gt;Celery&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://www.rabbitmq.com&#34;&gt;RabbitMQ&lt;/a&gt;: Asynchronous queueing server, used to fetch and parse RSS feeds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mongodb.com&#34;&gt;MongoDB&lt;/a&gt;, &lt;a href=&#34;https://pypi.python.org/pypi/pymongo&#34;&gt;Pymongo&lt;/a&gt;, &amp;amp; &lt;a href=&#34;http://www.github.com/hmarr/mongoengine&#34;&gt;Mongoengine&lt;/a&gt;: Non-relational database, used to store stories, read stories, feed/page fetch histories, and proxied sites.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.postgresql.com&#34;&gt;PostgreSQL&lt;/a&gt;: Relational database, used to store feeds, subscriptions, and user accounts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://redis.io&#34;&gt;Redis&lt;/a&gt;: Programmer&#39;s database, used to assemble stories for the river, store story ids, manage feed fetching schedules, and the minuscule bit of caching that NewsBlur uses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://elasticsearch.org&#34;&gt;Elasticsearch&lt;/a&gt;: Search database, use for searching stories. Optional.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Client-side and design&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jquery.com&#34;&gt;jQuery&lt;/a&gt;: Cross-browser compliant JavaScript code. IE works without effort.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://underscorejs.org/&#34;&gt;Underscore.js&lt;/a&gt;: Functional programming for JavaScript. Indispensable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone.js&lt;/a&gt;: Framework for the web app. Also indispensable.&lt;/li&gt; &#xA; &lt;li&gt;Miscellaneous jQuery Plugins: Everything from resizable layouts, to progress bars, sortables, date handling, colors, corners, JSON, animations. &lt;a href=&#34;https://github.com/samuelclay/NewsBlur/tree/master/media/js&#34;&gt;See the complete list&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Docker&#xA;* Docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation Instructions&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repo&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make nb&lt;/code&gt; to build all of the NewsBlur containers. This will set up all necessary databases, front-end django apps, celery tasks, node apps, flask database monitor and metrics, nginx, and a haproxy load balancer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; https://localhost&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: You will be warned that you are using a self signed certificate. In order to get around this warning you must type &#34;thisisunsafe&#34; as per &lt;a href=&#34;https://dblazeski.medium.com/chrome-bypass-net-err-cert-invalid-for-development-daefae43eb12&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using a custom domain&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the custom domain script&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bash ./utils/custom_domain.sh &amp;lt;domain name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This script will do the following:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Change &lt;code&gt;NEWSBLUR_URL&lt;/code&gt; and &lt;code&gt;SESSION_COOKIE_DOMAIN&lt;/code&gt; in &lt;code&gt;newsblur_web/docker_local_settings.py&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Change the domain in &lt;code&gt;config/fixtures/bootstrap.json&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can also change domains: &lt;code&gt;bash ./utils/custom_domain.sh &amp;lt;old domain&amp;gt; &amp;lt;new domain&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re using a custom subdomain, you&#39;ll also want to add it to &lt;code&gt;ALLOWED_SUBDOMAINS&lt;/code&gt; in &lt;code&gt;apps/reader/views.py&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A way to make sure you updated all the correct places:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Go to the website address in your browser&lt;/li&gt; &#xA;   &lt;li&gt;Open developer tools and look at the network tab&lt;/li&gt; &#xA;   &lt;li&gt;Try to login&lt;/li&gt; &#xA;   &lt;li&gt;Look again at the developer tools, there should be a POST call to /login&lt;/li&gt; &#xA;   &lt;li&gt;Observe the Response headers for that call&lt;/li&gt; &#xA;   &lt;li&gt;The value of the &#34;set-cookie&#34; header should contain a &#34;Domain=&#34; string&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;If the string after &lt;code&gt;Domain=&lt;/code&gt; is not the domain you are using to access the website, then your configuration still needs your custom domain.&lt;/p&gt; &lt;p&gt;You can also confirm that there is a domain name mismatch in the database by running &lt;code&gt;make shell&lt;/code&gt; &amp;amp; typing &lt;code&gt;Site.objects.all()[0]&lt;/code&gt; to show the domain that NewsBlur is expecting.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Making docker-compose work with your existing database&lt;/h2&gt; &#xA;&lt;p&gt;To make docker-compose work with your database, upgrade your local database to the docker-compose version and then volumize the database data path by changing the &lt;code&gt;./docker/volumes/&lt;/code&gt; part of the volume directive in the service to point to your local database&#39;s data directory.&lt;/p&gt; &#xA;&lt;p&gt;To make docker-compose work with an older database version, change the image version for the database service in the docker-compose file.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Instructions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Making Changes:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To apply changes to the Python or JavaScript code, use the &lt;code&gt;make&lt;/code&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;To apply changes to the docker-compose.yml file, use the &lt;code&gt;make rebuild&lt;/code&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;To apply changes to the docker/haproxy/haproxy.conf file, node packages, or any new database migrations you will need to use the &lt;code&gt;make nb&lt;/code&gt; command.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Adding Python packages: Currently, the docker-compose.yml file uses the newsblur/newsblur_python3 image. It is built using the Dockerfile found in &lt;code&gt;docker/newsblur_base_image.Dockerfile&lt;/code&gt;. Because of how the docker image is set up, you will need to create your own image and direct your docker-compose.yml file to use it. Please follow the following steps to do so.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Add your new site-packages to config/requirements.txt.&lt;/li&gt; &#xA;   &lt;li&gt;Add the following lines of code to your docker-compose.yml file to replace anywhere where it says &lt;code&gt;image: newsblur/newsblur_python3&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;code&gt; build: context: . dockerfile: docker/newsblur_base_image.Dockerfile &lt;/code&gt; &#xA;  &lt;ol start=&#34;3&#34;&gt; &#xA;   &lt;li&gt;Run the &lt;code&gt;make nb&lt;/code&gt; command to rebuild your docker-compose containers&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Debugging Python&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To debug your code, drop &lt;code&gt;import pdb; pdb.set_trace()&lt;/code&gt; into the Python code where you would like to start debugging and run &lt;code&gt;make&lt;/code&gt; and then &lt;code&gt;make debug&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using Django shell within Docker&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Make sure your docker containers are up and run &lt;code&gt;make shell&lt;/code&gt; to open the Django shell within the newsblur_web container.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running unit and integration tests&lt;/h3&gt; &#xA;&lt;p&gt;NewsBlur comes complete with a test suite that tests the functionality of the rss_feeds, reader, and feed importer. To run the test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;`make test`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a performance test&lt;/h3&gt; &#xA;&lt;p&gt;Performance tests use the locust performance testing tool. To run performance tests via CLI, use &lt;code&gt;make perf-cli users=1 rate=1 host=https://localhost&lt;/code&gt;. Feel free to change the users, rate, and host variables in the command to meet you needs.&lt;/p&gt; &#xA;&lt;p&gt;You can also run locust performance tests using a UI by running &lt;code&gt;make perf-ui&lt;/code&gt; and then navigating to &lt;a href=&#34;http://127.0.0.1:8089&#34;&gt;http://127.0.0.1:8089&lt;/a&gt;. This allows you to chart and export your performance data.&lt;/p&gt; &#xA;&lt;p&gt;To run locust using docker, just run &lt;code&gt;make perf-docker&lt;/code&gt; and navigate to &lt;a href=&#34;http://127.0.0.1:8089&#34;&gt;http://127.0.0.1:8089&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Created by &lt;a href=&#34;http://www.samuelclay.com&#34;&gt;Samuel Clay&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Email address: &lt;a href=&#34;mailto:samuel@newsblur.com&#34;&gt;samuel@newsblur.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/samuelclay&#34;&gt;@samuelclay&lt;/a&gt; on Twitter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;NewsBlur is licensed under the MIT License. (See LICENSE)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>darlinghq/darling</title>
    <updated>2023-05-07T02:01:02Z</updated>
    <id>tag:github.com,2023-05-07:/darlinghq/darling</id>
    <link href="https://github.com/darlinghq/darling" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Darwin/macOS emulation layer for Linux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Darling&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://darlinghq.org/img/darling250.png&#34; alt=&#34;Darling logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Darling is a runtime environment for macOS applications.&lt;/p&gt; &#xA;&lt;p&gt;Please note that most GUI applications will not run at the moment.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Packages for some distributions are available for download under &lt;a href=&#34;https://github.com/darlinghq/darling/releases&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;p&gt;For build instructions, visit &lt;a href=&#34;https://docs.darlinghq.org/build-instructions.html&#34;&gt;Darling Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prefixes&lt;/h3&gt; &#xA;&lt;p&gt;Darling has support for DPREFIXes, which are very similar to WINEPREFIXes. They are virtual “chroot” environments with an macOS-like filesystem structure, where you can install software safely. The default DPREFIX location is &lt;code&gt;~/.darling&lt;/code&gt;, but this can be changed by exporting an identically named environment variable. A prefix is automatically created and initialized on first use.&lt;/p&gt; &#xA;&lt;p&gt;Please note that we use &lt;code&gt;overlayfs&lt;/code&gt; for creating prefixes, and so we cannot support putting prefix on a filesystem like NFS or eCryptfs. In particular, the default prefix location won&#39;t work if you have an encrypted home directory.&lt;/p&gt; &#xA;&lt;h3&gt;Hello world&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s start with a Hello world:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ darling shell echo Hello world&#xA;Hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Congratulations, you have printed Hello world through Darling&#39;s OS X system call emulation and runtime libraries.&lt;/p&gt; &#xA;&lt;h3&gt;Installing software&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;.pkg&lt;/code&gt; packages with the installer tool available inside shell. It is a somewhat limited cousin of OS X&#39;s installer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ darling shell&#xA;Darling [~]$ installer -pkg mc-4.8.7-0.pkg -target /&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Midnight Commander package from the above example is &lt;a href=&#34;https://darling-misc.s3.eu-central-1.amazonaws.com/mc-4.8.7-0.pkg&#34;&gt;available for download&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can uninstall and list packages with the &lt;code&gt;uninstaller&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Working with DMG images&lt;/h3&gt; &#xA;&lt;p&gt;DMG images can be attached and deattached from inside &lt;code&gt;darling shell&lt;/code&gt; with &lt;code&gt;hdiutil&lt;/code&gt;. This is how you can install Xcode along with its toolchain and SDKs (note that Xcode itself doesn&#39;t run yet):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Darling [~]$ hdiutil attach Xcode_7.2.dmg&#xA;/Volumes/Xcode_7.2&#xA;Darling [~]$ cp -r /Volumes/Xcode_7.2/Xcode.app /Applications&#xA;Darling [~]$ export SDKROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk&#xA;Darling [~]$ echo &#39;void main() { puts(&#34;Hello world&#34;); }&#39; &amp;gt; helloworld.c&#xA;Darling [~]$ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang helloworld.c -o helloworld&#xA;Darling [~]$ ./helloworld&#xA;Hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Congratulations, you have just compiled and run your own Hello world application with Apple&#39;s toolchain.&lt;/p&gt; &#xA;&lt;h3&gt;Working with XIP archives&lt;/h3&gt; &#xA;&lt;p&gt;Xcode is now distributed in &lt;code&gt;.xip&lt;/code&gt; files. These can be installed using &lt;code&gt;unxip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /Applications&#xA;unxip Xcode_11.3.xip&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>