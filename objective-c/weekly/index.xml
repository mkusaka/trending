<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-13T01:48:20Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dora2-iOS/ayakurume</title>
    <updated>2022-11-13T01:48:20Z</updated>
    <id>tag:github.com,2022-11-13:/dora2-iOS/ayakurume</id>
    <link href="https://github.com/dora2-iOS/ayakurume" rel="alternate"></link>
    <summary type="html">&lt;p&gt;for checkm8 devices&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ayakurume&lt;/h1&gt; &#xA;&lt;p&gt;WIP developer only iOS 15 jailbreak for checkm8 devices (Apple A8-A11)&lt;br&gt; full rootfs r/w (fakefs), tweak injection etc...&lt;/p&gt; &#xA;&lt;h2&gt;Attention&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s very likely that there are mistakes in the code, so it&#39;s recommended to debug in serial (because the device-side verbose boot is not able to follow SpringBoard&#39;s startup).&lt;/p&gt; &#xA;&lt;h2&gt;Supported Environment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iPhone 6s (iPhone8,1/N71AP) 15.7.1&lt;br&gt; It is necessary that your device&#39;s storage is 32 GB or more. When duplicating rootfs, 5GB of storage will be used up.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Dependencies&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;iPhone8,1 ipsw of iOS 15.7.1&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/0x7ff/gaster&#34;&gt;gaster&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/libimobiledevice/libirecovery&#34;&gt;libirecovery&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/verygenericname/SSHRD_Script&#34;&gt;SSHRD_Script&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/libimobiledevice/libusbmuxd&#34;&gt;libusbmuxd&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://cdn.discordapp.com/attachments/1017153024768081921/1026161261077090365/bootstrap-ssh.tar&#34;&gt;bootstrap-ssh.tar&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/coolstar/Odyssey-bootstrap/raw/master/org.swift.libswift_5.0-electra2_iphoneos-arm.deb&#34;&gt;org.swift.libswift_5.0-electra2_iphoneos-arm.deb&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://apt.bingner.com/debs/1443.00/com.ex.substitute_2.3.1_iphoneos-arm.deb&#34;&gt;com.ex.substitute_2.3.1_iphoneos-arm.deb&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://apt.bingner.com/debs/1443.00/com.saurik.substrate.safemode_0.9.6005_iphoneos-arm.deb&#34;&gt;com.saurik.substrate.safemode_0.9.6005_iphoneos-arm.deb&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Procedure&lt;/h1&gt; &#xA;&lt;h2&gt;setting up the necessary components to sshrd&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macos side&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd SSHRD_Script/&#xA;./sshrd.sh 15.7.1&#xA;./sshrd.sh boot&#xA;./sshrd.sh ssh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ios side&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;newfs_apfs -A -D -o role=r -v System /dev/disk0s1&#xA;mount_apfs /dev/disk0s1s1 /mnt1&#xA;mount_apfs /dev/disk0s1s8 /mnt2&#xA;mount_apfs /dev/disk0s1s6 /mnt6&#xA;cp -a /mnt1/. /mnt2/&#xA;umount /mnt1&#xA;mkdir /mnt6/{UUID}/binpack&#xA;mkdir /mnt2/jbin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macos side&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ayakurume/&#xA;scp -P 2222 ios/lightstrap.tar root@localhost:/mnt6/&#xA;scp -P 2222 ios/jb.dylib ios/jbloader ios/launchd root@localhost:/mnt2/jbin/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ios side&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;tar -xvf /mnt6/lightstrap.tar -C /mnt6/{UUID}/binpack/&#xA;rm /mnt6/lightstrap.tar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy apticket.der to the mac side.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macos side&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;scp -P 2222 root@localhost:/mnt6/{UUID}/System/Library/Caches/apticket.der ./  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ios side&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;reboot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;First-run preparations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macos side&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gaster pwn&#xA;./gaster decrypt iBSS.n71.RELEASE.im4p iBSS.n71.RELEASE.dec&#xA;bspatch iBSS.n71.RELEASE.dec pwniBSS.dec n71_19H117/jboot/iBSS.patch&#xA;./img4 -i pwniBSS.dec -o iBSS.img4 -M apticket.der -A -T ibss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;First run&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macos side&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gaster pwn&#xA;irecovery -f iBSS.img4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After confirming the startup of dropbear&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macos side&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;iproxy {port} 44&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh root@localhost -p {port}&#xA;scp -P {port} bootstrap-ssh.tar root@localhost:/var/root &#xA;scp -P {port} org.swift.libswift_5.0-electra2_iphoneos-arm.deb root@localhost:/var/root &#xA;scp -P {port} com.ex.substitute_2.3.1_iphoneos-arm.deb root@localhost:/var/root &#xA;scp -P {port} com.saurik.substrate.safemode_0.9.6005_iphoneos-arm.deb root@localhost:/var/root &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ios side&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;mount -uw /&#xA;cd /var/root&#xA;tar --preserve-permissions --no-overwrite-dir -xvf bootstrap-ssh.tar -C /&#xA;/prep_bootstrap.sh&#xA;apt update&#xA;apt upgrade -y&#xA;apt install org.coolstar.sileo&#xA;dpkg -i *.deb&#xA;rm *.deb&#xA;rm bootstrap-ssh.tar&#xA;touch /.installed_ayakurume&#xA;reboot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macos side&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gaster pwn&#xA;irecovery -f iBSS.img4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;credit&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;launchd hook: &lt;a href=&#34;https://github.com/LinusHenze/Fugu&#34;&gt;LinusHenze&#39;s fugu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;jbinit: &lt;a href=&#34;https://github.com/tihmstar/jbinit&#34;&gt;tihmstar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;img4lib: &lt;a href=&#34;https://github.com/xerub/img4lib&#34;&gt;xerub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;bootstrap: &lt;a href=&#34;https://github.com/ProcursusTeam&#34;&gt;ProcursusTeam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;bootstrap: &lt;a href=&#34;https://github.com/checkra1n&#34;&gt;checkra1n&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;translation: &lt;a href=&#34;https://github.com/lisiyaki&#34;&gt;lisianthus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/plcrashreporter</title>
    <updated>2022-11-13T01:48:20Z</updated>
    <id>tag:github.com,2022-11-13:/microsoft/plcrashreporter</id>
    <link href="https://github.com/microsoft/plcrashreporter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reliable, open-source crash reporting for iOS, macOS and tvOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/PLCrashReporter&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/PLCrashReporter.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?sanitize=true&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;SwiftPM compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PLCrashReporter&lt;/h1&gt; &#xA;&lt;p&gt;PLCrashReporter is a reliable open source library that provides an in-process live crash reporting framework for use on iOS, macOS and tvOS. The library detects crashes and generates reports to help your investigation and troubleshooting with the information of application, system, process, thread, etc. as well as stack traces.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to use PLCrashReporter is by using &lt;a href=&#34;https://appcenter.ms&#34;&gt;AppCenter&lt;/a&gt;. However, if you want to use PLCrashReporter directly, grab the latest release at &lt;a href=&#34;https://github.com/microsoft/plcrashreporter/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uses only supported and public APIs/ABIs for crash reporting.&lt;/li&gt; &#xA; &lt;li&gt;The most accurate stack unwinding available, using DWARF and Apple Compact Unwind frame data.&lt;/li&gt; &#xA; &lt;li&gt;First released in 2008, and used in hundreds of thousands of apps. PLCrashReporter has seen a tremendous amount of user testing.&lt;/li&gt; &#xA; &lt;li&gt;Does not interfere with debugging in lldb/gdb&lt;/li&gt; &#xA; &lt;li&gt;Backtraces for all active threads are provided.&lt;/li&gt; &#xA; &lt;li&gt;Provides full register state for the crashed thread.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 11 or above.&lt;/li&gt; &#xA; &lt;li&gt;Minimum supported platforms: iOS 11, macOS 10.9, tvOS 11, Mac Catalyst 13.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Decoding Crash Reports&lt;/h2&gt; &#xA;&lt;p&gt;Crash reports are output as protobuf-encoded messages, and may be decoded using the CrashReporter library or any &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Google Protocol Buffers&lt;/a&gt; decoder.&lt;/p&gt; &#xA;&lt;p&gt;In addition to the in-library decoding support, you may use the included &lt;code&gt;plcrashutil&lt;/code&gt; binary to convert crash reports to apple&#39;s standard iPhone text format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;plcrashutil convert --format=iphone example_report.plcrash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;atos&lt;/code&gt; command-line tool to symbolicate the output. For more information about this tool, see &lt;a href=&#34;https://developer.apple.com/documentation/Xcode/adding-identifiable-symbol-names-to-a-crash-report&#34;&gt;Adding Identifiable Symbol Names to a Crash Report&lt;/a&gt;. Future library releases may include built-in re-usable formatters, for outputting alternative formats directly from the phone.&lt;/p&gt; &#xA;&lt;h2&gt;Adding PLCrashReporter to your project&lt;/h2&gt; &#xA;&lt;p&gt;PLCrashReporter can be added to your app via &lt;a href=&#34;https://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://github.com/Carthage/Carthage#quick-start&#34;&gt;Carthage&lt;/a&gt;, &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;Swift Package Manager&lt;/a&gt;, or by manually adding the binaries to your project.&lt;/p&gt; &#xA;&lt;h3&gt;Integration via Cocoapods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the following line to your &lt;code&gt;Podfile&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;PLCrashReporter&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; to install your newly defined pod and open the project&#39;s &lt;code&gt;.xcworkspace&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Integration via Swift Package Manager&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From the Xcode menu, click &lt;strong&gt;File&lt;/strong&gt; &amp;gt; &lt;strong&gt;Swift Packages&lt;/strong&gt; &amp;gt; &lt;strong&gt;Add Package Dependency&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In the dialog that appears, enter the repository URL: &lt;a href=&#34;https://github.com/microsoft/plcrashreporter.git&#34;&gt;https://github.com/microsoft/plcrashreporter.git&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In Version, select &lt;strong&gt;Up to Next Major&lt;/strong&gt; and take the default option.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Integration via Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;microsoft/plcrashreporter&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt; to fetch dependencies.&lt;/li&gt; &#xA; &lt;li&gt;In Xcode, open your application target&#39;s &lt;strong&gt;General&lt;/strong&gt; settings tab. Drag and drop &lt;strong&gt;CrashReporter.xcframework&lt;/strong&gt; from the &lt;strong&gt;Carthage/Build&lt;/strong&gt; folder into the &lt;code&gt;Frameworks, Libraries and Embedded Content&lt;/code&gt; section. For iOS and tvOS, set &lt;code&gt;Embed&lt;/code&gt; to &lt;code&gt;Do not embed&lt;/code&gt;. For macoS, set &lt;code&gt;Embed&lt;/code&gt; to &lt;code&gt;Embed and Sign&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Carthage integration doesn&#39;t build the dependency correctly in Xcode 12 with flag &#34;--no-use-binaries&#34; or from a specific branch. To make it work, refer to &lt;a href=&#34;https://github.com/Carthage/Carthage/raw/master/Documentation/Xcode12Workaround.md&#34;&gt;this instruction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Integration by copying the binaries into your project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/Microsoft/plcrashreporter/releases&#34;&gt;PLCrashReporter&lt;/a&gt; frameworks provided as a zip file.&lt;/li&gt; &#xA; &lt;li&gt;Unzip the file and you&#39;ll see a folder called &lt;strong&gt;PLCrashReporter&lt;/strong&gt; that contains subfolders for all supported platforms.&lt;/li&gt; &#xA; &lt;li&gt;Add PLCrashReporter to the project in Xcode: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Make sure the Project Navigator is visible (⌘+1).&lt;/li&gt; &#xA;   &lt;li&gt;Now drag &amp;amp; drop &lt;strong&gt;PLCrashReporter.framework&lt;/strong&gt; (or &lt;strong&gt;PLCrashReporter.xcframework&lt;/strong&gt;) from the Finder into Xcode&#39;s Project Navigator.&lt;/li&gt; &#xA;   &lt;li&gt;A dialog will appear, make sure your app target is checked and click &lt;strong&gt;Finish&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; PLCrashReporter xcframework contains static binaries for iOS and tvOS, and dynamic binaries for macOS. When adding the framework to your project make sure that in &lt;code&gt;Frameworks, Libraries and Embedded Content&lt;/code&gt; section &lt;code&gt;Embed&lt;/code&gt; is selected to &lt;code&gt;Do not embed&lt;/code&gt; for iOS and tvOS and &lt;code&gt;Embed and Sign&lt;/code&gt; for macOS. &lt;code&gt;PLCrashReporter-Static-{version}.zip&lt;/code&gt; is an exception - it contains static frameworks for all platforms.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;The following example shows a way how to initialize crash reporter. Please note that enabling in-process crash reporting will conflict with any attached debuggers so make sure the &lt;strong&gt;debugger isn&#39;t attached&lt;/strong&gt; when you crash the app.&lt;/p&gt; &#xA;&lt;h3&gt;Objective-c&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@import CrashReporter;&#xA;&#xA;...&#xA;&#xA;// Uncomment and implement isDebuggerAttached to safely run this code with a debugger.&#xA;// See: https://github.com/microsoft/plcrashreporter/blob/2dd862ce049e6f43feb355308dfc710f3af54c4d/Source/Crash%20Demo/main.m#L96&#xA;// if (![self isDebuggerAttached]) {&#xA;&#xA;// It is strongly recommended that local symbolication only be enabled for non-release builds.&#xA;// Use PLCrashReporterSymbolicationStrategyNone for release versions.&#xA;PLCrashReporterConfig *config = [[PLCrashReporterConfig alloc] initWithSignalHandlerType: PLCrashReporterSignalHandlerTypeMach&#xA;                                                                   symbolicationStrategy: PLCrashReporterSymbolicationStrategyAll];&#xA;PLCrashReporter *crashReporter = [[PLCrashReporter alloc] initWithConfiguration: config];&#xA;&#xA;// Enable the Crash Reporter.&#xA;NSError *error;&#xA;if (![crashReporter enableCrashReporterAndReturnError: &amp;amp;error]) {&#xA;    NSLog(@&#34;Warning: Could not enable crash reporter: %@&#34;, error);&#xA;}&#xA;// }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checking collected crash report can be done in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;if ([crashReporter hasPendingCrashReport]) {&#xA;    NSError *error;&#xA;&#xA;    // Try loading the crash report.&#xA;    NSData *data = [crashReporter loadPendingCrashReportDataAndReturnError: &amp;amp;error];&#xA;    if (data == nil) {&#xA;        NSLog(@&#34;Failed to load crash report data: %@&#34;, error);&#xA;        return;&#xA;    }&#xA;&#xA;    // Retrieving crash reporter data.&#xA;    PLCrashReport *report = [[PLCrashReport alloc] initWithData: data error: &amp;amp;error];&#xA;    if (report == nil) {&#xA;        NSLog(@&#34;Failed to parse crash report: %@&#34;, error);&#xA;        return;&#xA;    }&#xA;&#xA;    // We could send the report from here, but we&#39;ll just print out some debugging info instead.&#xA;    NSString *text = [PLCrashReportTextFormatter stringValueForCrashReport: report withTextFormat: PLCrashReportTextFormatiOS];&#xA;    NSLog(@&#34;%@&#34;, text);&#xA;&#xA;    // Purge the report.&#xA;    [crashReporter purgePendingCrashReport];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import CrashReporter&#xA;&#xA;...&#xA;// Uncomment and implement isDebuggerAttached to safely run this code with a debugger.&#xA;// See: https://github.com/microsoft/plcrashreporter/blob/2dd862ce049e6f43feb355308dfc710f3af54c4d/Source/Crash%20Demo/main.m#L96&#xA;// if (!isDebuggerAttached()) {&#xA;&#xA;  // It is strongly recommended that local symbolication only be enabled for non-release builds.&#xA;  // Use [] for release versions.&#xA;  let config = PLCrashReporterConfig(signalHandlerType: .mach, symbolicationStrategy: .all)&#xA;  guard let crashReporter = PLCrashReporter(configuration: config) else {&#xA;    print(&#34;Could not create an instance of PLCrashReporter&#34;)&#xA;    return&#xA;  }&#xA;&#xA;  // Enable the Crash Reporter.&#xA;  do {&#xA;    try crashReporter.enableAndReturnError()&#xA;  } catch let error {&#xA;    print(&#34;Warning: Could not enable crash reporter: \(error)&#34;)&#xA;  }&#xA;// }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checking collected crash report can be done in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  // Try loading the crash report.&#xA;  if crashReporter.hasPendingCrashReport() {&#xA;    do {&#xA;      let data = try crashReporter.loadPendingCrashReportDataAndReturnError()&#xA;&#xA;      // Retrieving crash reporter data.&#xA;      let report = try PLCrashReport(data: data)&#xA;&#xA;      // We could send the report from here, but we&#39;ll just print out some debugging info instead.&#xA;      if let text = PLCrashReportTextFormatter.stringValue(for: report, with: PLCrashReportTextFormatiOS) { &#xA;        print(text)&#xA;      } else {&#xA;        print(&#34;CrashReporter: can&#39;t convert report to text&#34;)&#xA;      }&#xA;    } catch let error {&#xA;      print(&#34;CrashReporter failed to load and parse with error: \(error)&#34;)&#xA;    }&#xA;  }&#xA;&#xA;  // Purge the report.&#xA;  crashReporter.purgePendingCrashReport()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Mac running macOS compliant with Xcode requirements.&lt;/li&gt; &#xA; &lt;li&gt;Xcode 11 or above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, next optional tools are used to build additional resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Doxygen to generate the documentation. See &lt;a href=&#34;https://github.com/doxygen/doxygen&#34;&gt;the official Doxygen repository&lt;/a&gt; for more information or use &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; to install it.&lt;/li&gt; &#xA; &lt;li&gt;GraphViz to generate the documentation. See &lt;a href=&#34;https://www.graphviz.org/download/&#34;&gt;the official GraphViz website&lt;/a&gt; for more information or use &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; to install it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protobuf-c&lt;/code&gt; to convert Protocol Buffer &lt;code&gt;.proto&lt;/code&gt; files to C descriptor code. See &lt;a href=&#34;https://github.com/protobuf-c/protobuf-c&#34;&gt;the official protobuf-c repository&lt;/a&gt; for more information or use &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; to install it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a new window for your Terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to PLCrashReporter&#39;s root folder and run&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xcodebuild -configuration Release -target &#39;CrashReporter&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to create binaries for all platforms.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are looking forward to your contributions via pull requests.&lt;/p&gt; &#xA;&lt;p&gt;To contribute to PLCrashReporter, you need the tools mentioned above to build PLCrashReporter for all architectures and &lt;code&gt;protobuf-c&lt;/code&gt; to convert Protocol Buffer &lt;code&gt;.proto&lt;/code&gt; files to C descriptor code.&lt;/p&gt; &#xA;&lt;h3&gt;Code of Conduct&lt;/h3&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>syncthing/syncthing-macos</title>
    <updated>2022-11-13T01:48:20Z</updated>
    <id>tag:github.com,2022-11-13:/syncthing/syncthing-macos</id>
    <link href="https://github.com/syncthing/syncthing-macos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official frugal and native macOS Syncthing application bundle&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Syncthing for macOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://forum.syncthing.net/t/syncthing-for-macos&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/syncthing-%20forum-blue.svg?sanitize=true&#34; alt=&#34;Syncthing forum&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/syncthing/syncthing-macos/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/syncthing/syncthing-macos/total.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/syncthing/syncthing-macos/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/syncthing/syncthing-macos.svg?sanitize=true&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/syncthing/syncthing-macos/develop/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;syncthing-macos&lt;/code&gt; project is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Frugality&#34;&gt;frugal&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Native_(computing)&#34;&gt;native&lt;/a&gt; macOS &lt;a href=&#34;https://syncthing.net&#34;&gt;Syncthing&lt;/a&gt; tray application bundle. It bundles its own Syncthing instance and wraps Syncthing background process, making it behave more like a native macOS application and less like a command-line utility with a web browser interface.&lt;/p&gt; &#xA;&lt;p&gt;Features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the &lt;a href=&#34;https://docs.syncthing.net/intro/gui.html&#34;&gt;Syncthing WebGUI&lt;/a&gt; from the tray in your system preferred browser.&lt;/li&gt; &#xA; &lt;li&gt;Optionally starts on login, so you don&#39;t need to set up Syncthing as a service.&lt;/li&gt; &#xA; &lt;li&gt;Tray icon syncthing status indicator.&lt;/li&gt; &#xA; &lt;li&gt;Retina ready icons for the Application bundle and status tray.&lt;/li&gt; &#xA; &lt;li&gt;Automatic updates (using &lt;a href=&#34;https://sparkle-project.org&#34;&gt;Sparkle&lt;/a&gt; pushed from github releases).&lt;/li&gt; &#xA; &lt;li&gt;Open shared folders in Finder.&lt;/li&gt; &#xA; &lt;li&gt;Logfile written to &lt;code&gt;~/Library/Application Support/Syncthing/syncthing.log&lt;/code&gt;, use Finder -&amp;gt; Go -&amp;gt; Go to Folder to open it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Screenshot&lt;/h1&gt; &#xA;&lt;img alt=&#34;screenshot.png&#34; src=&#34;https://user-images.githubusercontent.com/1050166/48157165-35970f00-e2cf-11e8-8009-10bfbf7fbce2.png&#34;&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt;: This is the official Syncthing macOS application bundle. Please make sure you have no other &lt;a href=&#34;https://docs.syncthing.net/users/autostart.html#macos&#34;&gt;syncthing instances&lt;/a&gt; or &lt;a href=&#34;https://docs.syncthing.net/users/contrib.html#mac-os&#34;&gt;wrappers running&lt;/a&gt; or else this application will not work!&lt;/p&gt; &#xA;&lt;p&gt;Currently, OS X 10.13 or higher is necessary. &lt;strong&gt;syncthing-macos&lt;/strong&gt; is packaged as a disk image as an application bundled with the &lt;a href=&#34;https://github.com/syncthing/syncthing/releases&#34;&gt;syncthing&lt;/a&gt; binary.&lt;/p&gt; &#xA;&lt;p&gt;To install &lt;a href=&#34;https://github.com/syncthing/syncthing-macos/releases/latest&#34;&gt;just download the dmg&lt;/a&gt;, mount it and drag and drop the application to install. The only necessary configuration is to set the API key and URL when provisioning a remote syncthing instance, the local instance is auto-configured. The &lt;code&gt;syncthing-macos&lt;/code&gt; application bundle disables the auto-updater of &lt;code&gt;syncthing&lt;/code&gt; as it has its own update mechanism using &lt;a href=&#34;https://sparkle-project.org/&#34;&gt;Sparkle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The latest version is available at &lt;a href=&#34;https://github.com/syncthing/syncthing-macos/releases/latest&#34;&gt;Github Releases&lt;/a&gt;, or it can also be installed using &lt;a href=&#34;https://github.com/Homebrew/homebrew-cask&#34;&gt;homebrew&lt;/a&gt; &lt;a href=&#34;https://formulae.brew.sh/cask/syncthing&#34;&gt;&lt;code&gt;brew install --cask syncthing&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Why&lt;/h1&gt; &#xA;&lt;p&gt;All cross-platform approaches are not able to use all the native facilities Apple macOS provides. Including auto-updates, vector icon set (retina-ready) and creating an application bundle. GUIs are designed with XCode and everything is coded in a mix of Objective-C and Swift which is &#34;the native approach&#34;.&lt;/p&gt; &#xA;&lt;h1&gt;Goal&lt;/h1&gt; &#xA;&lt;p&gt;The goal of this project is to keep the native macOS Syncthing tray lean but usable. No graphs, no advanced configuration windows. It just provides a very simple wrapper, so users are not aware syncthing ships as a commandline application. It strives to have a usability of good-by-default and should always follow the &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos&#34;&gt;Apple Human Interface Guidelines&lt;/a&gt; to feel as much as a native application as possible.&lt;/p&gt; &#xA;&lt;h1&gt;Known bugs&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/syncthing/syncthing-macos/develop/%5Bhttps://github.com/syncthing/syncthing-macos/issues%5D(https://github.com/syncthing/syncthing-macos/issues?q=is%3Aissue+is%3Aopen+label%3Abug)&#34;&gt;issue tracker (bug tag filtered)&lt;/a&gt; for the current status.&lt;/p&gt; &#xA;&lt;h1&gt;Contributions&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syncthing/syncthing-macos/develop/CONTRIBUTING.md&#34;&gt;Contributions&lt;/a&gt; and &lt;a href=&#34;https://github.com/syncthing/syncthing-macos/issues&#34;&gt;issue reports&lt;/a&gt; are welcome.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syncthing/syncthing-macos/develop/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;FAQ: Frequently asked questions&lt;/h1&gt; &#xA;&lt;h2&gt;macOS version support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;From release v1.20.0-1 macOS 10.13 or higher is required&lt;/li&gt; &#xA; &lt;li&gt;Until release v1.19.2-1 macOS 10.12 is required (see issue &lt;a href=&#34;https://github.com/syncthing/syncthing-macos/issues/177&#34;&gt;#177&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;From release v1.14.0-1 macOS 10.12 is required&lt;/li&gt; &#xA; &lt;li&gt;Until release &lt;a href=&#34;https://github.com/syncthing/syncthing-macos/releases/tag/v1.13.1-1&#34;&gt;v1.13.1-1&lt;/a&gt; macOS 10.11 or higher is supported (see issue &lt;a href=&#34;https://github.com/syncthing/syncthing-macos/issues/148&#34;&gt;#148&lt;/a&gt; why)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Preferences&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;syncthing-macos&lt;/code&gt; is designed to run its own syncthing instance and automatically detect the API key. The preferences window is used to point to a local running instance, a remote instance is not supported. It is possible to run your own instance and point to it for advanced/development purposes. You should only change the settings if you know what you are doing.&lt;/p&gt; &#xA;&lt;p&gt;Setting extra syncthing commandline parameters is a hidden feature. You need to write these using the application defaults configuration. The only current limitation the parameters cannot contain spaces!. In the example below the audit log is enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;defaults write com.github.xor-gate.syncthing-macosx Arguments &#39;--audit --auditfile=/Users/JohnDoe/staudit.log&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default IP address change&lt;/h2&gt; &#xA;&lt;p&gt;When the default IP address is changed from 127.0.0.1 to a routable one like e.g 192.168.1.102 the tray application preferences need to be set also. Or else the API cannot be accessed and will stay &#39;Offline&#39;. If you broke the configuration you can manually edit the file under the &lt;code&gt;~/Library/Application Support/Syncthing/config.xml&lt;/code&gt; using Finder with Go -&amp;gt; Go to folder. And restart the syncthing service from the tray.&lt;/p&gt; &#xA;&lt;h2&gt;Resolve xattr sync from macOS Ventura 13.0 to &amp;lt; 13.0 devices (problem with &lt;code&gt;com.apple.provenance&lt;/code&gt; metadata)&lt;/h2&gt; &#xA;&lt;p&gt;When using the xattr synchronisation feature it fails when syncing from macOS 13.0 to macOS &amp;lt; 13.0. When using this feature one must stop Syncthing and manually edit the configuration XML file located at &lt;code&gt;/Users/&amp;lt;user&amp;gt;/Library/Application Support/Syncthing/config.xml&lt;/code&gt;. Or the location when running an Syncthing daemon instance not managed the application bundle). Manually editing the configuration file is necessary because the web UI doesn&#39;t support xattr filter management just yet (release v1.22.1-1).&lt;/p&gt; &#xA;&lt;p&gt;Per shared folder the &lt;code&gt;xattrFilter&lt;/code&gt; must be configured as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;folder id=&#34;...&#34; ...&amp;gt;&#xA;  &amp;lt;xattrFilter&amp;gt;&#xA;    ...&#xA;    &amp;lt;entry match=&#34;com.apple.provenance&#34; permit=&#34;false&#34;/&amp;gt;&#xA;    &amp;lt;entry match=&#34;*&#34; permit=&#34;true&#34;/&amp;gt;&#xA;  &amp;lt;/xattrFilter&amp;gt;&#xA;&amp;lt;/folder&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: see the &lt;code&gt;com.apple.provenance&lt;/code&gt; &lt;code&gt;xattrFilter&lt;/code&gt; &lt;code&gt;entry&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://github.com/syncthing/syncthing-macos/issues/185&#34;&gt;#185&lt;/a&gt; and the &lt;a href=&#34;https://forum.syncthing.net/t/com-apple-provenance/19262&#34;&gt;forum post&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstallation&lt;/h2&gt; &#xA;&lt;p&gt;On Mac OS X you drop the application from the Application folder to your Trash. But there are some user specific files are kept elsewhere, which are located under &lt;code&gt;$HOME/Library/Application Support/Syncthing&lt;/code&gt;. The files in this folder are the configuration, encryption/profile files and the database cache. For more information see &lt;a href=&#34;https://docs.syncthing.net/users/config.html#description&#34;&gt;docs.syncthing.net/users/config.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Prerequisites for building/using everything in this repository&lt;/h1&gt; &#xA;&lt;p&gt;Before compiling git submodules needs to be present:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode, for the Objective-C/Swift compiler&lt;/li&gt; &#xA; &lt;li&gt;Python 3, for the update-release.py script &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Needs &lt;a href=&#34;https://pypi.org/project/semver/&#34;&gt;semver&lt;/a&gt; from pip&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Cocoapods for updating Objective-C/Swift 3th party dependencies&lt;/li&gt; &#xA; &lt;li&gt;Golang, only needed for Sparkle Github releases to Appcast XML tool&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Using XCode&lt;/h1&gt; &#xA;&lt;p&gt;The new &lt;code&gt;syncthing.xcworkspace&lt;/code&gt; must be used when coding in XCode.&lt;/p&gt; &#xA;&lt;h1&gt;Compiling from Terminal&lt;/h1&gt; &#xA;&lt;p&gt;Build with XCode or run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will automaticly download syncthing universal binary and add it to the Application Bundle.&lt;/p&gt; &#xA;&lt;p&gt;For release builds signing the application build and creating an distributable DMG:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make release-dmg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will select the first available Developer ID and sign the app with it. To specify the signing identity, use &lt;code&gt;SYNCTHING_APP_CODE_SIGN_IDENTITY&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SYNCTHING_APP_CODE_SIGN_IDENTITY=&#34;Mac Developer: foo@bar.com (XB59MXU8EC)&#34; make release-dmg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Design and useful information&lt;/h1&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;p&gt;The Syncthing settings use the NSDefaults facility. From the commandline all settings can be shown with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;jerry@Jerrys-iMac ~ % defaults read com.github.xor-gate.syncthing-macosx&#xA;{&#xA;    ApiKey = rR7YrEDLKhNETJZKgySmnYPZvebY9qgk;&#xA;    Executable = &#34;/Applications/Syncthing.app/Contents/Resources/syncthing/syncthing&#34;;&#xA;    SUEnableAutomaticChecks = 1;&#xA;    SUHasLaunchedBefore = 1;&#xA;    SULastCheckTime = &#34;2021-01-08 12:05:53 +0000&#34;;&#xA;    SUSendProfileInfo = 0;&#xA;    StartAtLogin = 1;&#xA;    URI = &#34;http://127.0.0.1:8384&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependency management&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; is used for dependency management. It can be installed with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; package manager. For more information about CocoaPods read the &lt;a href=&#34;https://guides.cocoapods.org/&#34;&gt;CocoaPods Guides&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning scheme&lt;/h2&gt; &#xA;&lt;p&gt;It uses the shipped syncthing executable version appended with a &lt;code&gt;-&amp;lt;bundle index&amp;gt;&lt;/code&gt; number. So for Syncthing &lt;code&gt;0.14.28&lt;/code&gt; with first build/package it is versioned as &lt;code&gt;0.14.28-1&lt;/code&gt;. Currently there is no need for having a separate version for &lt;code&gt;syncthing-macos&lt;/code&gt;. As it also keeps the wrapper tightly coupled with the syncthing releases.&lt;/p&gt; &#xA;&lt;h2&gt;Compilation and packaging process&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode builds all sources&lt;/li&gt; &#xA; &lt;li&gt;Syncthing resource is fetched with &lt;code&gt;syncthing/Scripts/syncthing-resource.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fancy DMG disk image is generated with &lt;code&gt;syncthing/Scripts/create-dmg.sh&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The version part of the DMG name is fetched from &lt;code&gt;syncthing/Info.plist, key CFBundleShortVersionString&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Both the app bundle and the DMG are signed with the first available Developer ID certificate, if found (or the one specified through &lt;code&gt;SYNCTHING_APP_CODE_SIGN_IDENTITY&lt;/code&gt; environment variable)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;syncthing/syncthing-macos&lt;/code&gt; will only ship &lt;a href=&#34;https://forum.syncthing.net/t/introducing-stable-releases-and-release-candidates/9167&#34;&gt;stable releases and no release candidates&lt;/a&gt; of the Syncthing Service (daemon).&lt;/p&gt; &#xA;&lt;h2&gt;Apple Application Notarize&lt;/h2&gt; &#xA;&lt;p&gt;After the dmg is created it must be send to Apple to be notarized. It can be checked with &lt;code&gt;spctl&lt;/code&gt; if the app is correctly verified by Apple for distribution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;spctl -a -t exec -vvv /Volumes/Syncthing/Syncthing.app&#xA;/Volumes/Syncthing/Syncthing.app: accepted&#xA;source=Notarized Developer ID&#xA;origin=Developer ID Application: Jakob Borg (LQE5SYM783)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When it is not correctly notarized the following output is seen (note the source):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;spctl -a -t exec -vvv /Volumes/Syncthing/Syncthing.app&#xA;/Volumes/Syncthing/Syncthing.app: accepted&#xA;source=Developer ID&#xA;origin=Developer ID Application: Jakob Borg (LQE5SYM783)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also the Apple Developer documentation at &lt;a href=&#34;https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution&#34;&gt;https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Release management&lt;/h2&gt; &#xA;&lt;p&gt;To update the bundled syncthing the &lt;code&gt;make release-update&lt;/code&gt; must be run from the main folder which does basicly these steps automatically:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update &lt;code&gt;syncthing/Scripts/syncthing-resource.sh&lt;/code&gt;, &lt;code&gt;SYNCTHING_VERSION&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Update &lt;code&gt;syncthing/Info.plist&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;CFBundleShortVersionString&lt;/code&gt; (e.g &lt;code&gt;0.14.50-dev&lt;/code&gt; or &lt;code&gt;0.14.50-1&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CFBundleVersion&lt;/code&gt; (e.g &lt;code&gt;145000&lt;/code&gt; or &lt;code&gt;145001&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;When the code is git pushed the Syncthing build server automatically builds debug and release targets&lt;/li&gt; &#xA; &lt;li&gt;Manually download the release &lt;code&gt;.dmg&lt;/code&gt; from &lt;a href=&#34;https://build.syncthing.net/viewType.html?buildTypeId=SyncthingMacOS_BuildReleaseDmg&#34;&gt;build.syncthing.net&lt;/a&gt; which is correctly signed and notarized&lt;/li&gt; &#xA; &lt;li&gt;Manually create a github release with tag &lt;code&gt;v&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.&amp;lt;patch&amp;gt;-&amp;lt;bundle index&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run deployment of &lt;a href=&#34;https://build.syncthing.net/viewType.html?buildTypeId=SyncthingMacOS_CreateAppcastXml&#34;&gt;appcast.xml&lt;/a&gt;. Which turns &lt;a href=&#34;https://github.com/syncthing/syncthing-macos/tree/develop/cmd/ghreleases2appcast&#34;&gt;github releases JSON into a Sparkle appcast.xml file&lt;/a&gt;. (See also &lt;a href=&#34;https://sparkle-project.org/documentation/&#34;&gt;Sparkle documentation&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>