<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-02T02:00:28Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>uber/ios-snapshot-test-case</title>
    <updated>2023-04-02T02:00:28Z</updated>
    <id>tag:github.com,2023-04-02:/uber/ios-snapshot-test-case</id>
    <link href="https://github.com/uber/ios-snapshot-test-case" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Snapshot view unit tests for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iOSSnapshotTestCase (previously &lt;a href=&#34;https://github.com/facebookarchive/ios-snapshot-test-case&#34;&gt;FBSnapshotTestCase&lt;/a&gt;)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case/actions&#34;&gt;&lt;img src=&#34;https://github.com/uber/ios-snapshot-test-case/actions/workflows/main.yml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/v/iOSSnapshotTestCase.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/iOSSnapshotTestCase.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&#34; alt=&#34;Swift Package Manager&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What it does&lt;/h2&gt; &#xA;&lt;p&gt;A &#34;snapshot test case&#34; takes a configured &lt;code&gt;UIView&lt;/code&gt; or &lt;code&gt;CALayer&lt;/code&gt; and uses the necessary UIKit or Core Animation methods to generate an image snapshot of its contents. It compares this snapshot to a &#34;reference image&#34; stored in your source code repository and fails the test if the two images don&#39;t match.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;We write a lot of UI code. There are a lot of edge cases that we want to handle correctly when you are creating &lt;code&gt;UIView&lt;/code&gt; instances:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What if there is more text than can fit in the space available?&lt;/li&gt; &#xA; &lt;li&gt;What if an image doesn&#39;t match the size of an image view?&lt;/li&gt; &#xA; &lt;li&gt;What should the highlighted state look like?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s straightforward to test logic code, but less obvious how you should test views. You can do a lot of rectangle asserts, but these are hard to understand or visualize. Looking at an image diff shows you exactly what changed and how it will look to users.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;iOSSnapshotTestCase&lt;/code&gt; was developed to make snapshot tests easy.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Step 1: Add iOSSnapshotTestCase to your project&lt;/h3&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;Add the following lines to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target &#34;Tests&#34; do&#xA;  use_frameworks!&#xA;  pod &#39;iOSSnapshotTestCase&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your test target is Objective-C only use &lt;code&gt;iOSSnapshotTestCase/Core&lt;/code&gt; instead, which doesn&#39;t contain Swift support.&lt;/p&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;Add the following line to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-carthage&#34;&gt;github &#34;uber/ios-snapshot-test-case&#34; ~&amp;gt; 8.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;Add the following line to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-spm&#34;&gt;dependencies: [&#xA;  .package(url: &#34;https://github.com/uber/ios-snapshot-test-case.git&#34;, from: &#34;8.0.0&#34;),&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...or integrate with Xcode via &lt;code&gt;File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency...&lt;/code&gt; using the URL of the repository. We recommend using &#34;Up to Next Major&#34; with the Version field, as we use Semantic Versioning and only put breaking changes in major versions.&lt;/p&gt; &#xA;&lt;h3&gt;Step 2: Setup Test Scheme&lt;/h3&gt; &#xA;&lt;p&gt;Replace &#34;Tests&#34; with the name of your test project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;There are &lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case/raw/main/src/iOSSnapshotTestCaseCore/Public/FBSnapshotTestCase.h#L17-L31&#34;&gt;three ways&lt;/a&gt; of setting reference image directories, the recommended one is to define &lt;code&gt;FB_REFERENCE_IMAGE_DIR&lt;/code&gt; in your scheme. This should point to the directory where you want reference images to be stored. We normally use this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;FB_REFERENCE_IMAGE_DIR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;$(SOURCE_ROOT)/$(PROJECT_NAME)Tests/ReferenceImages&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;IMAGE_DIFF_DIR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;$(SOURCE_ROOT)/$(PROJECT_NAME)Tests/FailureDiffs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Define the &lt;code&gt;IMAGE_DIFF_DIR&lt;/code&gt; to the directory where you want to store diffs of failed snapshots. There are also &lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case/raw/main/src/iOSSnapshotTestCaseCore/Public/FBSnapshotTestCase.h#L33-L45&#34;&gt;three ways&lt;/a&gt; to set failed image diff directories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/uber/ios-snapshot-test-case/main/FBSnapshotTestCaseDemo/Scheme_FB_REFERENCE_IMAGE_DIR.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Creating a snapshot test&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Subclass &lt;code&gt;FBSnapshotTestCase&lt;/code&gt; instead of &lt;code&gt;XCTestCase&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;From within your test, use &lt;code&gt;FBSnapshotVerifyView&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the test once with &lt;code&gt;self.recordMode = YES;&lt;/code&gt; in the test&#39;s &lt;code&gt;-setUp&lt;/code&gt; method. (This creates the reference images on disk.)&lt;/li&gt; &#xA; &lt;li&gt;Remove the line enabling record mode and run the test.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically names reference images on disk according to test class and selector.&lt;/li&gt; &#xA; &lt;li&gt;Prints a descriptive error message to the console on failure. (Bonus: failure message includes a one-line command to see an image diff if you have &lt;a href=&#34;http://www.kaleidoscopeapp.com&#34;&gt;Kaleidoscope&lt;/a&gt; installed.)&lt;/li&gt; &#xA; &lt;li&gt;Supply an optional &#34;identifier&#34; if you want to perform multiple snapshots in a single test method.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;code&gt;CALayer&lt;/code&gt; via &lt;code&gt;FBSnapshotVerifyLayer&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;usesDrawViewHierarchyInRect&lt;/code&gt; to handle cases like &lt;code&gt;UIVisualEffect&lt;/code&gt;, &lt;code&gt;UIAppearance&lt;/code&gt; and Size Classes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fileNameOptions&lt;/code&gt; to control appending the device model (&lt;code&gt;iPhone&lt;/code&gt;, &lt;code&gt;iPad&lt;/code&gt;, &lt;code&gt;iPod Touch&lt;/code&gt;, etc), OS version, screen size and screen scale to the images (allowing to have multiple tests for the same «snapshot» for different &lt;code&gt;OS&lt;/code&gt;s and devices).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;Your unit tests &lt;em&gt;should&lt;/em&gt; be inside an &#34;application&#34; bundle, not a &#34;logic/library&#34; test bundle. (That is, it should be run within the Simulator so that it has access to UIKit.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;However&lt;/em&gt;, if you are writing snapshot tests inside a library/framework, you might want to keep your test bundle as a library test bundle without a Test Host.&lt;/p&gt; &#xA;&lt;p&gt;Read more on this &lt;a href=&#34;https://raw.githubusercontent.com/uber/ios-snapshot-test-case/main/docs/LibraryVsApplicationTestBundles.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;iOSSnapshotTestCase&lt;/code&gt; was written at Facebook by Jonathan Dann with significant contributions by Todd Krabach.&lt;/p&gt; &#xA;&lt;p&gt;Today it is maintained by &lt;a href=&#34;https://github.com/uber&#34;&gt;Uber&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;iOSSnapshotTestCase&lt;/code&gt; is MIT–licensed. See &lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case/raw/master/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>medallia/digital-ios-sdk</title>
    <updated>2023-04-02T02:00:28Z</updated>
    <id>tag:github.com,2023-04-02:/medallia/digital-ios-sdk</id>
    <link href="https://github.com/medallia/digital-ios-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Medallia Digital SDK Swift Package Manager&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.medallia.com/digital/docs-v2/mobile-sdk-docs/index.html#pages/developers-portal/ios-sdk/integration-guide/setup/ios-setup.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SDK-Online_Documentation-brightgreen.svg?sanitize=true&#34; alt=&#34;SwiftPackageManager&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.medallia.com/digital/docs-v2/mobile-sdk-docs/index.html#xcframework-integration&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/iOS-XCFramework-informational.svg?sanitize=true&#34; alt=&#34;XCFramework&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.medallia.com/digital/docs-v2/mobile-sdk-docs/index.html#pages/developers-portal/ios-sdk/release-notes/ios-release-notes.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SDK_Version-4.0.0_and_above-yellow.svg?sanitize=true&#34; alt=&#34;SDK Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To add Medallia Digital&#39;s package dependency to your Xcode project, select File &amp;gt; Add Packages... Enter Package URL: &lt;a href=&#34;https://github.com/medallia/Digital-iOS-SDK&#34;&gt;https://github.com/medallia/Digital-iOS-SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also navigate to your target’s General pane, and in the “Frameworks, Libraries, and Embedded Content” section, click the + button, select Add Other, and choose Add Package Dependency.&lt;/p&gt; &#xA;&lt;p&gt;Choose &#34;Exact Version&#34; in Dependency Rule and enter the Medallia Digital SDK version that you want to use (For example 4.0.2) then click &#39;Add Package&#39;. &lt;img src=&#34;https://raw.githubusercontent.com/medallia/digital-ios-sdk/main/Images/choose_package_options.png&#34; alt=&#34;choose-package-options&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the package by clicking on &#39;Add Package&#39;. &lt;img src=&#34;https://raw.githubusercontent.com/medallia/digital-ios-sdk/main/Images/add_package.png&#34; alt=&#34;add-package&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>