<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-20T01:45:11Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>eczarny/spectacle</title>
    <updated>2022-11-20T01:45:11Z</updated>
    <id>tag:github.com,2022-11-20:/eczarny/spectacle</id>
    <link href="https://github.com/eczarny/spectacle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spectacle allows you to organize your windows without using a mouse.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spectacle&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/eczarny/spectacle&#34;&gt;&lt;img src=&#34;https://travis-ci.org/eczarny/spectacle.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Easily organize windows without using a mouse.&lt;/p&gt; &#xA;&lt;h2&gt;Important Note&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;This project is not being actively maintained.&lt;/strong&gt; Unfortunately, after almost a decade of on-and-off development I can no longer dedicate the time needed to be a responsible maintainer of this project. Spectacle will remain available for download but please use at your own risk. The source code will continue to be free and open to anyone, so feel free to make Spectacle your own.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to all the folks that have made Spectacle the first app they install a new Mac!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Spectacle users have recommended &lt;a href=&#34;https://github.com/rxhanson/Rectangle&#34;&gt;Rectangle&lt;/a&gt; as an open source alternative.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;System requirements&lt;/h2&gt; &#xA;&lt;p&gt;Spectacle &lt;a href=&#34;https://s3.amazonaws.com/spectacle/downloads/Spectacle+0.8.6.zip&#34;&gt;0.8.6&lt;/a&gt; is the last version to support Mac OS X 10.7; future releases will only support 10.9 or greater. Folks wishing to stay on 10.7 should download &lt;a href=&#34;https://s3.amazonaws.com/spectacle/downloads/Spectacle+0.8.6.zip&#34;&gt;0.8.6&lt;/a&gt;. Those looking for a version of Spectacle that supports 10.6 can still download &lt;a href=&#34;https://s3.amazonaws.com/spectacle/downloads/Spectacle+0.7.zip&#34;&gt;0.7&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Keyboard Shortcuts&lt;/h2&gt; &#xA;&lt;p&gt;Spectacle makes use of several &lt;a href=&#34;http://support.apple.com/kb/ht1343&#34;&gt;keyboard shortcuts&lt;/a&gt; that trigger specific &lt;em&gt;window actions&lt;/em&gt;. A window action is nothing more than a command that tells Spectacle how to change the size and/or position of a particular window.&lt;/p&gt; &#xA;&lt;p&gt;A keyboard shortcut consists of one or more modifier keys paired with a character key. The common modifier keys Spectacle takes advantage of are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Symbol&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Key&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⌘&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Command Key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⌃&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Control Key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⌥&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Option Key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⇧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Shift Key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The default keyboard shortcuts can be changed at any time. Use new key combinations to trigger window actions, or clear particular keyboard shortcuts to disable window actions entirely.&lt;/p&gt; &#xA;&lt;h3&gt;Basic window actions&lt;/h3&gt; &#xA;&lt;p&gt;To move a window to the center of the screen use the ⌥⌘C keyboard shortcut. Centered windows will &lt;strong&gt;not&lt;/strong&gt; have their size altered. Maximize a window using the ⌥⌘F shortcut.&lt;/p&gt; &#xA;&lt;p&gt;Windows can be moved to a number of predefined regions of the screen:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the left half&lt;/em&gt; — ⌥⌘←&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the right half&lt;/em&gt; — ⌥⌘→&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the top half&lt;/em&gt; — ⌥⌘↑&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the bottom half&lt;/em&gt; — ⌥⌘↓ &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the upper left&lt;/em&gt; — ⌃⌘←&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the lower left&lt;/em&gt; — ⌃⇧⌘←&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the upper right&lt;/em&gt; — ⌃⌘→&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the lower right&lt;/em&gt; — ⌃⇧⌘→&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Windows may also be resized between thirds using any of the shortcuts above. For example, to have a window resized between 1/3 and 2/3 of the left region of the screen simply activate the &lt;em&gt;left half&lt;/em&gt; ⌥⌘← keyboard shortcut more than once. Each time the shortcut is activated Spectacle will move the window between 1/3, 2/3, and back to 1/2 of the left side of the screen. This feature also applies to the upper left, lower left, upper right, and lower right shortcuts.&lt;/p&gt; &#xA;&lt;p&gt;Spectacle can also move windows between horizontal and vertical thirds of the screen. The ⌃⌥→ keyboard shortcut will move a window to the next third of the screen, starting with the horizontal third region on the left of the screen. ⌃⌥← will move a window to the previous third of the screen.&lt;/p&gt; &#xA;&lt;p&gt;Resizing a window is just as easy. To make a window a bit larger use the ⌃⌥⇧→ keyboard shortcut; ⌃⌥⇧← can be used to make a window smaller. Spectacle will always attempt to maintain contact between the edges of a window and the edges of the screen when resizing.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple displays&lt;/h3&gt; &#xA;&lt;p&gt;The ⌃⌥⌘→ keyboard shortcut will move a window to the next available display. ⌃⌥⌘← can be used to move a window to the previous display.&lt;/p&gt; &#xA;&lt;h3&gt;Window action history&lt;/h3&gt; &#xA;&lt;p&gt;Spectacle remembers where every window was prior to executing a window action. To undo a window action use the ⌥⌘Z keyboard shortcut. Use the ⌥⇧⌘Z shortcut to redo the window action once again.&lt;/p&gt; &#xA;&lt;h2&gt;Common Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Spectacle is requesting access to use accessibility features&lt;/h3&gt; &#xA;&lt;p&gt;Apple&#39;s &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Accessibility/Conceptual/AccessibilityMacOSX/OSXAXmodel.html&#34;&gt;OS X Accessibility Protocol&lt;/a&gt; makes Spectacle possible. This protocol allows assistive applications to &lt;em&gt;drive the user interface of another application running in OS X&lt;/em&gt;. In order to do its job Spectacle must be granted access to use these accessibility features. Instructions to do so will be displayed if Spectacle determines it does not have sufficient privileges.&lt;/p&gt; &#xA;&lt;h3&gt;Spectacle does not resize a particular window as expected&lt;/h3&gt; &#xA;&lt;p&gt;OS X allows applications to place constraints on the size of its windows. This allows application developers to design their user interfaces without needing to worry about supporting every possible window dimension. In these cases Spectacle will not be able to resize those windows to fit into the exact dimensions intended by the shortcut used.&lt;/p&gt; &#xA;&lt;p&gt;As an example suppose a display has a 2880x1800 resolution and a window is being resized to fit the left half of the display. If the window has specified a minimum allowable width of 1600 pixels Spectacle will not be able to resize the window to fit the expected 1440 pixels. The constraints placed on windows will always be respected despite leading to potentially unexpected results; in this example Spectacle will resize the window&#39;s width to 1600 pixels.&lt;/p&gt; &#xA;&lt;h3&gt;Spectacle behaves strangely with Terminal windows&lt;/h3&gt; &#xA;&lt;p&gt;Terminal (and other terminal emulation applications like iTerm 2) place constraints on how windows are resized so entire rows and columns are always visible. This behavior works great since it guarantees no rows or columns are truncated. Unfortunately it does mean that Spectacle needs to do some extra work to make these windows fit.&lt;/p&gt; &#xA;&lt;p&gt;To work around the limitations imposed on Terminal windows Spectacle will first try to resize a window to match the desired dimensions. If a window cannot be resized to fit Spectacle will immediately try to make the window a little smaller. This process is repeated until the window can be made to fit with its constraints still in place. The result is a window that is centered within the desired dimensions at the cost of a slightly jittery experience.&lt;/p&gt; &#xA;&lt;h3&gt;Spectacle does not work with all applications&lt;/h3&gt; &#xA;&lt;p&gt;Most applications built with the Cocoa frameworks can be readily manipulated via the &lt;em&gt;OS X Accessibility Protocol&lt;/em&gt;; allowing Spectacle to interact with nearly every window it encounters. Unfortunately this is not always the case. Spectacle will be unable to manipulate the windows of applications that build their user interfaces in unexpected ways.&lt;/p&gt; &#xA;&lt;h2&gt;Building and running&lt;/h2&gt; &#xA;&lt;p&gt;Spectacle uses &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;. Before building Spectacle in Xcode run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ carthage bootstrap --platform Mac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Carthage builds Spectacle&#39;s dependencies open the Xcode project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ open Spectacle.xcodeproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After Xcode finishes loading the workspace press ⌘R to run Spectacle.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2017 Eric Czarny.&lt;/p&gt; &#xA;&lt;p&gt;Spectacle should be accompanied by a LICENSE file containing the license relevant to this distribution.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>0x36/weightBufs</title>
    <updated>2022-11-20T01:45:11Z</updated>
    <id>tag:github.com,2022-11-20:/0x36/weightBufs</id>
    <link href="https://github.com/0x36/weightBufs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ANE kernel r/w exploit for iOS 15 and macOS 12&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WeightBufs:&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;WeightBufs&lt;/code&gt; is a kernel r/w exploit for all Apple devices with Neural Engine support. Bugs and Exploit by &lt;a href=&#34;https://twitter.com/_simo36&#34;&gt;@&lt;em&gt;simo36&lt;/em&gt;&lt;/a&gt;, you can read my &lt;a href=&#34;https://github.com/0x36/weightBufs/raw/main/attacking_ane_poc2022.pdf&#34;&gt;presentation slides at POC&lt;/a&gt; for more details about the vulnerabilities and the exploitation techniques.&lt;/p&gt; &#xA;&lt;p&gt;The exploit doesn&#39;t rely on any hardcoded address or offset, and it should work AS IS on macOS12 up to 12.4 and *OS 15 up to 15.5.&lt;/p&gt; &#xA;&lt;p&gt;The kernel vulerabilties affect all iOS 15 versions (up to 16.0), however the sandbox escape has been fixed on iOS 15.6. As a result, breaking the exploit chain and another sandbox escape is required to get things working again on iOS 15.6/15.7. Although I have another sandbox escape that works up to iOS 16.1, I&#39;m not sure if the kernel exploit techniques are still usable on iOS 15.6+.&lt;/p&gt; &#xA;&lt;h1&gt;Vulnerabilities:&lt;/h1&gt; &#xA;&lt;p&gt;The exploit chains 4 vulnerabilities which I independently discovered and reported to Apple:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CVE-2022-32845&lt;/code&gt; : aned signature check bypass for model.hwx.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CVE-2022-32948&lt;/code&gt; : DeCxt::FileIndexToWeight() OOB Read due to lack of array index validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CVE-2022-42805&lt;/code&gt; : ZinComputeProgramUpdateMutables() potential arbitrary read due to Integer overflow issue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CVE-2022-32899&lt;/code&gt; : DeCxt::RasterizeScaleBiasData() Buffer underflow due to integer overflow issue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Tested devices:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iPhone12 Pro (iPhone13,3) with iOS 15.5.&lt;/li&gt; &#xA; &lt;li&gt;iPad Pro (iPad8,10) with iPadOS 15.5.&lt;/li&gt; &#xA; &lt;li&gt;iPhone11 Pro (iPhone12,3) with iOS 15.4.1.&lt;/li&gt; &#xA; &lt;li&gt;MacBookAir10,1 M1 with macOS 12.4.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Notes:&lt;/h1&gt; &#xA;&lt;p&gt;There are some situations where the exploit may fail:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The target &lt;em&gt;IOSurface&lt;/em&gt; or &lt;em&gt;IOSurfaceClient&lt;/em&gt; object address is upper to the mutable kernel buffer &lt;code&gt;MUTK&lt;/code&gt;,however the exploit detects the failure early, preventing the device from crashing. It&#39;s sufficient to run the exploit again and it should succeed on the second attempt.&lt;/li&gt; &#xA; &lt;li&gt;If the exploit frequently crashes the device at stage 2 or stage 3, that means it must be tuned to the tested device, make sure to read &lt;code&gt;DEBUG_EXPLOIT_STAGE_2_KERN_PANIC&lt;/code&gt; and &lt;code&gt;DEBUG_EXPLOIT_STAGE_3_KERN_PANIC&lt;/code&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;The target device needs to be in an idle state, and it&#39;s preferable to reboot it before using the exploit, even better if the airplane mode is turned on.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;WeightBufs is released under the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/cordova-plugin-camera</title>
    <updated>2022-11-20T01:45:11Z</updated>
    <id>tag:github.com,2022-11-20:/apache/cordova-plugin-camera</id>
    <link href="https://github.com/apache/cordova-plugin-camera" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Cordova Plugin camera&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;title: Camera description: Take pictures with the device camera.&lt;/h2&gt; &#xA;&lt;!--&#xA;# license: Licensed to the Apache Software Foundation (ASF) under one&#xA;#         or more contributor license agreements.  See the NOTICE file&#xA;#         distributed with this work for additional information&#xA;#         regarding copyright ownership.  The ASF licenses this file&#xA;#         to you under the Apache License, Version 2.0 (the&#xA;#         &#34;License&#34;); you may not use this file except in compliance&#xA;#         with the License.  You may obtain a copy of the License at&#xA;#&#xA;#           http://www.apache.org/licenses/LICENSE-2.0&#xA;#&#xA;#         Unless required by applicable law or agreed to in writing,&#xA;#         software distributed under the License is distributed on an&#xA;#         &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY&#xA;#         KIND, either express or implied.  See the License for the&#xA;#         specific language governing permissions and limitations&#xA;#         under the License.&#xA;--&gt; &#xA;&lt;h1&gt;cordova-plugin-camera&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/cordova-plugin-camera/actions/workflows/android.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-camera/actions/workflows/android.yml/badge.svg?sanitize=true&#34; alt=&#34;Android Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-camera/actions/workflows/chrome.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-camera/actions/workflows/chrome.yml/badge.svg?sanitize=true&#34; alt=&#34;Chrome Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-camera/actions/workflows/ios.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-camera/actions/workflows/ios.yml/badge.svg?sanitize=true&#34; alt=&#34;iOS Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-camera/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-camera/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Lint Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugin defines a global &lt;code&gt;navigator.camera&lt;/code&gt; object, which provides an API for taking pictures and for choosing images from the system&#39;s image library.&lt;/p&gt; &#xA;&lt;p&gt;Although the object is attached to the global scoped &lt;code&gt;navigator&lt;/code&gt;, it is not available until after the &lt;code&gt;deviceready&lt;/code&gt; event.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;document.addEventListener(&#34;deviceready&#34;, onDeviceReady, false);&#xA;function onDeviceReady() {&#xA;    console.log(navigator.camera);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cordova plugin add cordova-plugin-camera&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to install via repo url directly ( unstable )&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cordova plugin add https://github.com/apache/cordova-plugin-camera.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plugin variables&lt;/h2&gt; &#xA;&lt;p&gt;The plugin uses the &lt;code&gt;ANDROIDX_CORE_VERSION&lt;/code&gt; variable to configure &lt;code&gt;androidx.core:core&lt;/code&gt; dependency. This allows to avoid conflicts with other plugins that have the dependency hardcoded. If no value is passed, it will use &lt;code&gt;1.6.+&lt;/code&gt; as the default value.&lt;/p&gt; &#xA;&lt;p&gt;The variable is configured on install time&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cordova plugin add cordova-plugin-camera --variable ANDROIDX_CORE_VERSION=1.8.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Contributors are welcome! And we need your contributions to keep the project moving forward. You can[report bugs, improve the documentation, or &lt;a href=&#34;https://github.com/apache/cordova-plugin-camera/pulls&#34;&gt;contribute code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is a specific &lt;a href=&#34;http://wiki.apache.org/cordova/ContributorWorkflow&#34;&gt;contributor workflow&lt;/a&gt; we recommend. Start reading there. More information is available on &lt;a href=&#34;http://wiki.apache.org/cordova&#34;&gt;our wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Have a solution?&lt;/strong&gt; Send a &lt;a href=&#34;https://github.com/apache/cordova-plugin-camera/pulls&#34;&gt;Pull Request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order for your changes to be accepted, you need to sign and submit an Apache &lt;a href=&#34;http://www.apache.org/licenses/#clas&#34;&gt;ICLA&lt;/a&gt; (Individual Contributor License Agreement). Then your name will appear on the list of CLAs signed by &lt;a href=&#34;https://people.apache.org/committer-index.html#unlistedclas&#34;&gt;non-committers&lt;/a&gt; or &lt;a href=&#34;http://people.apache.org/committers-by-project.html#cordova&#34;&gt;Cordova committers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;And don&#39;t forget to test and document your code.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;iOS Quirks&lt;/h3&gt; &#xA;&lt;p&gt;Since iOS 10 it&#39;s mandatory to provide an usage description in the &lt;code&gt;info.plist&lt;/code&gt; if trying to access privacy-sensitive data. When the system prompts the user to allow access, this usage description string will displayed as part of the permission dialog box, but if you didn&#39;t provide the usage description, the app will crash before showing the dialog. Also, Apple will reject apps that access private data but don&#39;t provide an usage description.&lt;/p&gt; &#xA;&lt;p&gt;This plugins requires the following usage descriptions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NSCameraUsageDescription&lt;/code&gt; specifies the reason for your app to access the device&#39;s camera.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSPhotoLibraryUsageDescription&lt;/code&gt; specifies the reason for your app to access the user&#39;s photo library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSLocationWhenInUseUsageDescription&lt;/code&gt; specifies the reason for your app to access the user&#39;s location information while your app is in use. (Set it if you have &lt;code&gt;CameraUsesGeolocation&lt;/code&gt; preference set to &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSPhotoLibraryAddUsageDescription&lt;/code&gt; specifies the reason for your app to get write-only access to the user&#39;s photo library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To add these entries into the &lt;code&gt;info.plist&lt;/code&gt;, you can use the &lt;code&gt;edit-config&lt;/code&gt; tag in the &lt;code&gt;config.xml&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;edit-config target=&#34;NSCameraUsageDescription&#34; file=&#34;*-Info.plist&#34; mode=&#34;merge&#34;&amp;gt;&#xA;    &amp;lt;string&amp;gt;need camera access to take pictures&amp;lt;/string&amp;gt;&#xA;&amp;lt;/edit-config&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;edit-config target=&#34;NSPhotoLibraryUsageDescription&#34; file=&#34;*-Info.plist&#34; mode=&#34;merge&#34;&amp;gt;&#xA;    &amp;lt;string&amp;gt;need photo library access to get pictures from there&amp;lt;/string&amp;gt;&#xA;&amp;lt;/edit-config&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;edit-config target=&#34;NSLocationWhenInUseUsageDescription&#34; file=&#34;*-Info.plist&#34; mode=&#34;merge&#34;&amp;gt;&#xA;    &amp;lt;string&amp;gt;need location access to find things nearby&amp;lt;/string&amp;gt;&#xA;&amp;lt;/edit-config&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;edit-config target=&#34;NSPhotoLibraryAddUsageDescription&#34; file=&#34;*-Info.plist&#34; mode=&#34;merge&#34;&amp;gt;&#xA;    &amp;lt;string&amp;gt;need photo library access to save pictures there&amp;lt;/string&amp;gt;&#xA;&amp;lt;/edit-config&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;API Reference &lt;a name=&#34;reference&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera&#34;&gt;camera&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera.getPicture&#34;&gt;.getPicture(successCallback, errorCallback, options)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera.cleanup&#34;&gt;.cleanup()&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera.onError&#34;&gt;.onError&lt;/a&gt; : &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera.onSuccess&#34;&gt;.onSuccess&lt;/a&gt; : &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera.CameraOptions&#34;&gt;.CameraOptions&lt;/a&gt; : &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera&#34;&gt;Camera&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera.DestinationType&#34;&gt;.DestinationType&lt;/a&gt; : &lt;code&gt;enum&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera.EncodingType&#34;&gt;.EncodingType&lt;/a&gt; : &lt;code&gt;enum&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera.MediaType&#34;&gt;.MediaType&lt;/a&gt; : &lt;code&gt;enum&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera.PictureSourceType&#34;&gt;.PictureSourceType&lt;/a&gt; : &lt;code&gt;enum&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera.PopoverArrowDirection&#34;&gt;.PopoverArrowDirection&lt;/a&gt; : &lt;code&gt;enum&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera.Direction&#34;&gt;.Direction&lt;/a&gt; : &lt;code&gt;enum&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_CameraPopoverHandle&#34;&gt;CameraPopoverHandle&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_CameraPopoverOptions&#34;&gt;CameraPopoverOptions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_camera&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;camera&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_camera.getPicture&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;camera.getPicture(successCallback, errorCallback, options)&lt;/h3&gt; &#xA;&lt;p&gt;Takes a photo using the camera, or retrieves a photo from the device&#39;s image gallery. The image is passed to the success callback as a Base64-encoded &lt;code&gt;String&lt;/code&gt;, or as the URI for the image file.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;camera.getPicture&lt;/code&gt; function opens the device&#39;s default camera application that allows users to snap pictures by default - this behavior occurs, when &lt;code&gt;Camera.sourceType&lt;/code&gt; equals &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera.PictureSourceType&#34;&gt;&lt;code&gt;Camera.PictureSourceType.CAMERA&lt;/code&gt;&lt;/a&gt;. Once the user snaps the photo, the camera application closes and the application is restored.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;Camera.sourceType&lt;/code&gt; is &lt;code&gt;Camera.PictureSourceType.PHOTOLIBRARY&lt;/code&gt; or &lt;code&gt;Camera.PictureSourceType.SAVEDPHOTOALBUM&lt;/code&gt;, then a dialog displays that allows users to select an existing image.&lt;/p&gt; &#xA;&lt;p&gt;The return value is sent to the &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera.onSuccess&#34;&gt;&lt;code&gt;cameraSuccess&lt;/code&gt;&lt;/a&gt; callback function, in one of the following formats, depending on the specified &lt;code&gt;cameraOptions&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;String&lt;/code&gt; containing the Base64-encoded photo image.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;String&lt;/code&gt; representing the image file location on local storage (default).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can do whatever you want with the encoded image or URI, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Render the image in an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag, as in the example below&lt;/li&gt; &#xA; &lt;li&gt;Save the data locally (&lt;code&gt;LocalStorage&lt;/code&gt;, &lt;a href=&#34;http://brianleroux.github.com/lawnchair/&#34;&gt;Lawnchair&lt;/a&gt;, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Post the data to a remote server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Photo resolution on newer devices is quite good. Photos selected from the device&#39;s gallery are not downscaled to a lower quality, even if a &lt;code&gt;quality&lt;/code&gt; parameter is specified. To avoid common memory problems, set &lt;code&gt;Camera.destinationType&lt;/code&gt; to &lt;code&gt;FILE_URI&lt;/code&gt; rather than &lt;code&gt;DATA_URL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported Platforms&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Browser&lt;/li&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;OSX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More examples &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#camera-getPicture-examples&#34;&gt;here&lt;/a&gt;. Quirks &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#camera-getPicture-quirks&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kind&lt;/strong&gt;: static method of &lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera&#34;&gt;camera&lt;/a&gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;successCallback&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera.onSuccess&#34;&gt;onSuccess&lt;/a&gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;errorCallback&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera.onError&#34;&gt;onError&lt;/a&gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;options&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera.CameraOptions&#34;&gt;CameraOptions&lt;/a&gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CameraOptions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;navigator.camera.getPicture(cameraSuccess, cameraError, cameraOptions);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_camera.cleanup&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;camera.cleanup()&lt;/h3&gt; &#xA;&lt;p&gt;Removes intermediate image files that are kept in temporary storage after calling &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera.getPicture&#34;&gt;&lt;code&gt;camera.getPicture&lt;/code&gt;&lt;/a&gt;. Applies only when the value of &lt;code&gt;Camera.sourceType&lt;/code&gt; equals &lt;code&gt;Camera.PictureSourceType.CAMERA&lt;/code&gt; and the &lt;code&gt;Camera.destinationType&lt;/code&gt; equals &lt;code&gt;Camera.DestinationType.FILE_URI&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported Platforms&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kind&lt;/strong&gt;: static method of &lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera&#34;&gt;camera&lt;/a&gt;&lt;/code&gt;&lt;br&gt; &lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;navigator.camera.cleanup(onSuccess, onFail);&#xA;&#xA;function onSuccess() {&#xA;    console.log(&#34;Camera cleanup success.&#34;)&#xA;}&#xA;&#xA;function onFail(message) {&#xA;    alert(&#39;Failed because: &#39; + message);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_camera.onError&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;camera.onError : &lt;code&gt;function&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Callback function that provides an error message.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kind&lt;/strong&gt;: static typedef of &lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera&#34;&gt;camera&lt;/a&gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;message&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The message is provided by the device&#39;s native code.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_camera.onSuccess&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;camera.onSuccess : &lt;code&gt;function&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Callback function that provides the image data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kind&lt;/strong&gt;: static typedef of &lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera&#34;&gt;camera&lt;/a&gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;imageData&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Base64 encoding of the image data, &lt;em&gt;or&lt;/em&gt; the image file URI, depending on &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera.CameraOptions&#34;&gt;&lt;code&gt;cameraOptions&lt;/code&gt;&lt;/a&gt; in effect.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Show image&#xA;//&#xA;function cameraCallback(imageData) {&#xA;   var image = document.getElementById(&#39;myImage&#39;);&#xA;   image.src = &#34;data:image/jpeg;base64,&#34; + imageData;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_camera.CameraOptions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;camera.CameraOptions : &lt;code&gt;Object&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Optional parameters to customize the camera settings.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#CameraOptions-quirks&#34;&gt;Quirks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kind&lt;/strong&gt;: static typedef of &lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_camera&#34;&gt;camera&lt;/a&gt;&lt;/code&gt;&lt;br&gt; &lt;strong&gt;Properties&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;quality&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;50&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quality of the saved image, expressed as a range of 0-100, where 100 is typically full resolution with no loss from file compression. (Note that information about the camera&#39;s resolution is unavailable.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;destinationType&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera.DestinationType&#34;&gt;DestinationType&lt;/a&gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FILE_URI&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Choose the format of the return value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sourceType&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera.PictureSourceType&#34;&gt;PictureSourceType&lt;/a&gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CAMERA&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the source of the picture.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;allowEdit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allow simple editing of image before selection.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;encodingType&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera.EncodingType&#34;&gt;EncodingType&lt;/a&gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;JPEG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Choose the returned image file&#39;s encoding.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;targetWidth&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Width in pixels to scale image. Must be used with &lt;code&gt;targetHeight&lt;/code&gt;. Aspect ratio remains constant.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;targetHeight&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Height in pixels to scale image. Must be used with &lt;code&gt;targetWidth&lt;/code&gt;. Aspect ratio remains constant.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mediaType&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera.MediaType&#34;&gt;MediaType&lt;/a&gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PICTURE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the type of media to select from. Only works when &lt;code&gt;PictureSourceType&lt;/code&gt; is &lt;code&gt;PHOTOLIBRARY&lt;/code&gt; or &lt;code&gt;SAVEDPHOTOALBUM&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;correctOrientation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rotate the image to correct for the orientation of the device during capture.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;saveToPhotoAlbum&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Save the image to the photo album on the device after capture.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;popoverOptions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_CameraPopoverOptions&#34;&gt;CameraPopoverOptions&lt;/a&gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS-only options that specify popover location in iPad.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cameraDirection&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera.Direction&#34;&gt;Direction&lt;/a&gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;BACK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Choose the camera to use (front- or back-facing).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_Camera&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Camera&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_Camera.DestinationType&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Camera.DestinationType : &lt;code&gt;enum&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Defines the output format of &lt;code&gt;Camera.getPicture&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kind&lt;/strong&gt;: static enum property of &lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera&#34;&gt;Camera&lt;/a&gt;&lt;/code&gt;&lt;br&gt; &lt;strong&gt;Properties&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DATA_URL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Return base64 encoded string. DATA_URL can be very memory intensive and cause app crashes or out of memory errors. Use FILE_URI if possible&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FILE_URI&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Return file uri (content://media/external/images/media/2 for Android)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_Camera.EncodingType&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Camera.EncodingType : &lt;code&gt;enum&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kind&lt;/strong&gt;: static enum property of &lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera&#34;&gt;Camera&lt;/a&gt;&lt;/code&gt;&lt;br&gt; &lt;strong&gt;Properties&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JPEG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Return JPEG encoded image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PNG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Return PNG encoded image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_Camera.MediaType&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Camera.MediaType : &lt;code&gt;enum&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kind&lt;/strong&gt;: static enum property of &lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera&#34;&gt;Camera&lt;/a&gt;&lt;/code&gt;&lt;br&gt; &lt;strong&gt;Properties&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PICTURE&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allow selection of still pictures only. DEFAULT. Will return format specified via DestinationType&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VIDEO&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allow selection of video only, ONLY RETURNS URL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ALLMEDIA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allow selection from all media types&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_Camera.PictureSourceType&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Camera.PictureSourceType : &lt;code&gt;enum&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Defines the output format of &lt;code&gt;Camera.getPicture&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kind&lt;/strong&gt;: static enum property of &lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera&#34;&gt;Camera&lt;/a&gt;&lt;/code&gt;&lt;br&gt; &lt;strong&gt;Properties&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHOTOLIBRARY&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Choose image from the device&#39;s photo library (same as SAVEDPHOTOALBUM for Android)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CAMERA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Take picture from camera&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SAVEDPHOTOALBUM&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Choose image only from the device&#39;s Camera Roll album (same as PHOTOLIBRARY for Android)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_Camera.PopoverArrowDirection&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Camera.PopoverArrowDirection : &lt;code&gt;enum&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Matches iOS UIPopoverArrowDirection constants to specify arrow location on popover.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kind&lt;/strong&gt;: static enum property of &lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera&#34;&gt;Camera&lt;/a&gt;&lt;/code&gt;&lt;br&gt; &lt;strong&gt;Properties&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARROW_UP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARROW_DOWN&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARROW_LEFT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARROW_RIGHT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARROW_ANY&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;15&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_Camera.Direction&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Camera.Direction : &lt;code&gt;enum&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kind&lt;/strong&gt;: static enum property of &lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera&#34;&gt;Camera&lt;/a&gt;&lt;/code&gt;&lt;br&gt; &lt;strong&gt;Properties&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BACK&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the back-facing camera&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FRONT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the front-facing camera&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_CameraPopoverOptions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CameraPopoverOptions&lt;/h2&gt; &#xA;&lt;p&gt;iOS-only parameters that specify the anchor element location and arrow direction of the popover when selecting images from an iPad&#39;s library or album. Note that the size of the popover may change to adjust to the direction of the arrow and orientation of the screen. Make sure to account for orientation changes when specifying the anchor element location.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x pixel coordinate of screen element onto which to anchor the popover.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[y]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;32&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;y pixel coordinate of screen element onto which to anchor the popover.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[width]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;320&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;width, in pixels, of the screen element onto which to anchor the popover.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[height]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;480&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;height, in pixels, of the screen element onto which to anchor the popover.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[arrowDir]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#module_Camera.PopoverArrowDirection&#34;&gt;PopoverArrowDirection&lt;/a&gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ARROW_ANY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Direction the arrow on the popover should point.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[popoverWidth]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;width of the popover (0 or not specified will use apple&#39;s default width).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[popoverHeight]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;height of the popover (0 or not specified will use apple&#39;s default height).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;module_CameraPopoverHandle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CameraPopoverHandle&lt;/h2&gt; &#xA;&lt;p&gt;A handle to an image picker popover.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported Platforms&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;navigator.camera.getPicture(onSuccess, onFail,&#xA;{&#xA;    destinationType: Camera.DestinationType.FILE_URI,&#xA;    sourceType: Camera.PictureSourceType.PHOTOLIBRARY,&#xA;    popoverOptions: new CameraPopoverOptions(300, 300, 100, 100, Camera.PopoverArrowDirection.ARROW_ANY, 300, 600)&#xA;});&#xA;&#xA;// Reposition the popover if the orientation changes.&#xA;window.onorientationchange = function() {&#xA;    var cameraPopoverHandle = new CameraPopoverHandle();&#xA;    var cameraPopoverOptions = new CameraPopoverOptions(0, 0, 100, 100, Camera.PopoverArrowDirection.ARROW_ANY, 400, 500);&#xA;    cameraPopoverHandle.setPosition(cameraPopoverOptions);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;code&gt;camera.getPicture&lt;/code&gt; Errata&lt;/h2&gt; &#xA;&lt;h4&gt;Example &lt;a name=&#34;camera-getPicture-examples&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Take a photo and retrieve the image&#39;s file location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;navigator.camera.getPicture(onSuccess, onFail, { quality: 50,&#xA;    destinationType: Camera.DestinationType.FILE_URI });&#xA;&#xA;function onSuccess(imageURI) {&#xA;    var image = document.getElementById(&#39;myImage&#39;);&#xA;    image.src = imageURI;&#xA;}&#xA;&#xA;function onFail(message) {&#xA;    alert(&#39;Failed because: &#39; + message);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a photo and retrieve it as a Base64-encoded image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/**&#xA; * Warning: Using DATA_URL is not recommended! The DATA_URL destination&#xA; * type is very memory intensive, even with a low quality setting. Using it&#xA; * can result in out of memory errors and application crashes. Use FILE_URI&#xA; * instead.&#xA; */&#xA;navigator.camera.getPicture(onSuccess, onFail, { quality: 25,&#xA;    destinationType: Camera.DestinationType.DATA_URL&#xA;});&#xA;&#xA;function onSuccess(imageData) {&#xA;    var image = document.getElementById(&#39;myImage&#39;);&#xA;    image.src = &#34;data:image/jpeg;base64,&#34; + imageData;&#xA;}&#xA;&#xA;function onFail(message) {&#xA;    alert(&#39;Failed because: &#39; + message);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Preferences (iOS)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CameraUsesGeolocation&lt;/strong&gt; (boolean, defaults to false). For capturing JPEGs, set to true to get geolocation data in the EXIF header. This will trigger a request for geolocation permissions if set to true.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; &amp;lt;preference name=&#34;CameraUsesGeolocation&#34; value=&#34;false&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Android Quirks&lt;/h4&gt; &#xA;&lt;p&gt;Android uses intents to launch the camera activity on the device to capture images, and on phones with low memory, the Cordova activity may be killed. In this scenario, the result from the plugin call will be delivered via the resume event. See &lt;a href=&#34;http://cordova.apache.org/docs/en/dev/guide/platforms/android/lifecycle.html&#34;&gt;the Android Lifecycle guide&lt;/a&gt; for more information. The &lt;code&gt;pendingResult.result&lt;/code&gt; value will contain the value that would be passed to the callbacks (either the URI/URL or an error message). Check the &lt;code&gt;pendingResult.pluginStatus&lt;/code&gt; to determine whether or not the call was successful.&lt;/p&gt; &#xA;&lt;h4&gt;Browser Quirks&lt;/h4&gt; &#xA;&lt;p&gt;Can only return photos as Base64-encoded image.&lt;/p&gt; &#xA;&lt;h4&gt;iOS Quirks&lt;/h4&gt; &#xA;&lt;p&gt;Including a JavaScript &lt;code&gt;alert()&lt;/code&gt; in either of the callback functions can cause problems. Wrap the alert within a &lt;code&gt;setTimeout()&lt;/code&gt; to allow the iOS image picker or popover to fully close before the alert displays:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;setTimeout(function() {&#xA;    // do your thing here!&#xA;}, 0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows quirks&lt;/h4&gt; &#xA;&lt;p&gt;On Windows Phone 8.1 using &lt;code&gt;SAVEDPHOTOALBUM&lt;/code&gt; or &lt;code&gt;PHOTOLIBRARY&lt;/code&gt; as a source type causes application to suspend until file picker returns the selected image and then restore with start page as defined in app&#39;s &lt;code&gt;config.xml&lt;/code&gt;. In case when &lt;code&gt;camera.getPicture&lt;/code&gt; was called from different page, this will lead to reloading start page from scratch and success and error callbacks will never be called.&lt;/p&gt; &#xA;&lt;p&gt;To avoid this we suggest using SPA pattern or call &lt;code&gt;camera.getPicture&lt;/code&gt; only from your app&#39;s start page.&lt;/p&gt; &#xA;&lt;p&gt;More information about Windows Phone 8.1 picker APIs is here: &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/apps/dn720490.aspx&#34;&gt;How to continue your Windows Phone app after calling a file picker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;CameraOptions&lt;/code&gt; Errata &lt;a name=&#34;CameraOptions-quirks&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h4&gt;Android Quirks&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Any &lt;code&gt;cameraDirection&lt;/code&gt; value results in a back-facing photo. (= You can only use the back camera)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;allowEdit&lt;/code&gt; is unpredictable on Android and it should not be used!&lt;/strong&gt; The Android implementation of this plugin tries to find and use an application on the user&#39;s device to do image cropping. The plugin has no control over what application the user selects to perform the image cropping and it is very possible that the user could choose an incompatible option and cause the plugin to fail. This sometimes works because most devices come with an application that handles cropping in a way that is compatible with this plugin (Google Photos), but it is unwise to rely on that being the case. If image editing is essential to your application, consider seeking a third party library or plugin that provides its own image editing utility for a more robust solution.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Camera.PictureSourceType.PHOTOLIBRARY&lt;/code&gt; and &lt;code&gt;Camera.PictureSourceType.SAVEDPHOTOALBUM&lt;/code&gt; both display the same photo album.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ignores the &lt;code&gt;encodingType&lt;/code&gt; parameter if the image is unedited (i.e. &lt;code&gt;quality&lt;/code&gt; is 100, &lt;code&gt;correctOrientation&lt;/code&gt; is false, and no &lt;code&gt;targetHeight&lt;/code&gt; or &lt;code&gt;targetWidth&lt;/code&gt; are specified). The &lt;code&gt;CAMERA&lt;/code&gt; source will always return the JPEG file given by the native camera and the &lt;code&gt;PHOTOLIBRARY&lt;/code&gt; and &lt;code&gt;SAVEDPHOTOALBUM&lt;/code&gt; sources will return the selected file in its existing encoding.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;iOS Quirks&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When using &lt;code&gt;destinationType.FILE_URI&lt;/code&gt;, photos are saved in the application&#39;s temporary directory. The contents of the application&#39;s temporary directory is deleted when the application ends.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sample: Take Pictures, Select Pictures from the Picture Library, and Get Thumbnails &lt;a name=&#34;sample&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The Camera plugin allows you to do things like open the device&#39;s Camera app and take a picture, or open the file picker and select one. The code snippets in this section demonstrate different tasks including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the Camera app and &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#takePicture&#34;&gt;take a Picture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Take a picture and &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#getThumbnails&#34;&gt;return thumbnails&lt;/a&gt; (resized picture)&lt;/li&gt; &#xA; &lt;li&gt;Take a picture and &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#convert&#34;&gt;generate a FileEntry object&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#selectFile&#34;&gt;Select a file&lt;/a&gt; from the picture library&lt;/li&gt; &#xA; &lt;li&gt;Select a JPEG image and &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#getFileThumbnails&#34;&gt;return thumbnails&lt;/a&gt; (resized image)&lt;/li&gt; &#xA; &lt;li&gt;Select an image and &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-camera/master/#convert&#34;&gt;generate a FileEntry object&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Take a Picture &lt;a name=&#34;takePicture&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Before you can take a picture, you need to set some Camera plugin options to pass into the Camera plugin&#39;s &lt;code&gt;getPicture&lt;/code&gt; function. Here is a common set of recommendations. In this example, you create the object that you will use for the Camera options, and set the &lt;code&gt;sourceType&lt;/code&gt; dynamically to support both the Camera app and the file picker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function setOptions(srcType) {&#xA;    var options = {&#xA;        // Some common settings are 20, 50, and 100&#xA;        quality: 50,&#xA;        destinationType: Camera.DestinationType.FILE_URI,&#xA;        // In this app, dynamically set the picture source, Camera or photo gallery&#xA;        sourceType: srcType,&#xA;        encodingType: Camera.EncodingType.JPEG,&#xA;        mediaType: Camera.MediaType.PICTURE,&#xA;        allowEdit: true,&#xA;        correctOrientation: true&#xA;    }&#xA;    return options;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Typically, you want to use a FILE_URI instead of a DATA_URL to avoid most memory issues. JPEG is the recommended encoding type for Android.&lt;/p&gt; &#xA;&lt;p&gt;You take a picture by passing in the options object to &lt;code&gt;getPicture&lt;/code&gt;, which takes a CameraOptions object as the third argument. When you call &lt;code&gt;setOptions&lt;/code&gt;, pass &lt;code&gt;Camera.PictureSourceType.CAMERA&lt;/code&gt; as the picture source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function openCamera(selection) {&#xA;&#xA;    var srcType = Camera.PictureSourceType.CAMERA;&#xA;    var options = setOptions(srcType);&#xA;    var func = createNewFileEntry;&#xA;&#xA;    navigator.camera.getPicture(function cameraSuccess(imageUri) {&#xA;&#xA;        displayImage(imageUri);&#xA;        // You may choose to copy the picture, save it somewhere, or upload.&#xA;        func(imageUri);&#xA;&#xA;    }, function cameraError(error) {&#xA;        console.debug(&#34;Unable to obtain picture: &#34; + error, &#34;app&#34;);&#xA;&#xA;    }, options);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you take the picture, you can display it or do something else. In this example, call the app&#39;s &lt;code&gt;displayImage&lt;/code&gt; function from the preceding code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function displayImage(imgUri) {&#xA;&#xA;    var elem = document.getElementById(&#39;imageFile&#39;);&#xA;    elem.src = imgUri;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To display the image on some platforms, you might need to include the main part of the URI in the Content-Security-Policy &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; element in index.html. For example, on Windows 10, you can include &lt;code&gt;ms-appdata:&lt;/code&gt; in your &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; element. Here is an example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta http-equiv=&#34;Content-Security-Policy&#34; content=&#34;default-src &#39;self&#39; data: gap: ms-appdata: https://ssl.gstatic.com &#39;unsafe-eval&#39;; style-src &#39;self&#39; &#39;unsafe-inline&#39;; media-src *&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Take a Picture and Return Thumbnails (Resize the Picture) &lt;a name=&#34;getThumbnails&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;To get smaller images, you can return a resized image by passing both &lt;code&gt;targetHeight&lt;/code&gt; and &lt;code&gt;targetWidth&lt;/code&gt; values with your CameraOptions object. In this example, you resize the returned image to fit in a 100px by 100px box (the aspect ratio is maintained, so 100px is either the height or width, whichever is greater in the source).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function openCamera(selection) {&#xA;&#xA;    var srcType = Camera.PictureSourceType.CAMERA;&#xA;    var options = setOptions(srcType);&#xA;    var func = createNewFileEntry;&#xA;&#xA;    if (selection == &#34;camera-thmb&#34;) {&#xA;        options.targetHeight = 100;&#xA;        options.targetWidth = 100;&#xA;    }&#xA;&#xA;    navigator.camera.getPicture(function cameraSuccess(imageUri) {&#xA;&#xA;        // Do something&#xA;&#xA;    }, function cameraError(error) {&#xA;        console.debug(&#34;Unable to obtain picture: &#34; + error, &#34;app&#34;);&#xA;&#xA;    }, options);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Select a File from the Picture Library &lt;a name=&#34;selectFile&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;When selecting a file using the file picker, you also need to set the CameraOptions object. In this example, set the &lt;code&gt;sourceType&lt;/code&gt; to &lt;code&gt;Camera.PictureSourceType.SAVEDPHOTOALBUM&lt;/code&gt;. To open the file picker, call &lt;code&gt;getPicture&lt;/code&gt; just as you did in the previous example, passing in the success and error callbacks along with CameraOptions object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function openFilePicker(selection) {&#xA;&#xA;    var srcType = Camera.PictureSourceType.SAVEDPHOTOALBUM;&#xA;    var options = setOptions(srcType);&#xA;    var func = createNewFileEntry;&#xA;&#xA;    navigator.camera.getPicture(function cameraSuccess(imageUri) {&#xA;&#xA;        // Do something&#xA;&#xA;    }, function cameraError(error) {&#xA;        console.debug(&#34;Unable to obtain picture: &#34; + error, &#34;app&#34;);&#xA;&#xA;    }, options);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Select an Image and Return Thumbnails (resized images) &lt;a name=&#34;getFileThumbnails&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Resizing a file selected with the file picker works just like resizing using the Camera app; set the &lt;code&gt;targetHeight&lt;/code&gt; and &lt;code&gt;targetWidth&lt;/code&gt; options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function openFilePicker(selection) {&#xA;&#xA;    var srcType = Camera.PictureSourceType.SAVEDPHOTOALBUM;&#xA;    var options = setOptions(srcType);&#xA;    var func = createNewFileEntry;&#xA;&#xA;    if (selection == &#34;picker-thmb&#34;) {&#xA;        // To downscale a selected image,&#xA;        // Camera.EncodingType (e.g., JPEG) must match the selected image type.&#xA;        options.targetHeight = 100;&#xA;        options.targetWidth = 100;&#xA;    }&#xA;&#xA;    navigator.camera.getPicture(function cameraSuccess(imageUri) {&#xA;&#xA;        // Do something with image&#xA;&#xA;    }, function cameraError(error) {&#xA;        console.debug(&#34;Unable to obtain picture: &#34; + error, &#34;app&#34;);&#xA;&#xA;    }, options);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Take a picture and get a FileEntry Object &lt;a name=&#34;convert&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you want to do something like copy the image to another location, or upload it somewhere using the FileTransfer plugin, you need to get a FileEntry object for the returned picture. To do that, call &lt;code&gt;window.resolveLocalFileSystemURL&lt;/code&gt; on the file URI returned by the Camera app. If you need to use a FileEntry object, set the &lt;code&gt;destinationType&lt;/code&gt; to &lt;code&gt;Camera.DestinationType.FILE_URI&lt;/code&gt; in your CameraOptions object (this is also the default value).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt; You need the &lt;a href=&#34;https://www.npmjs.com/package/cordova-plugin-file&#34;&gt;File plugin&lt;/a&gt; to call &lt;code&gt;window.resolveLocalFileSystemURL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is the call to &lt;code&gt;window.resolveLocalFileSystemURL&lt;/code&gt;. The image URI is passed to this function from the success callback of &lt;code&gt;getPicture&lt;/code&gt;. The success handler of &lt;code&gt;resolveLocalFileSystemURL&lt;/code&gt; receives the FileEntry object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function getFileEntry(imgUri) {&#xA;    window.resolveLocalFileSystemURL(imgUri, function success(fileEntry) {&#xA;&#xA;        // Do something with the FileEntry object, like write to it, upload it, etc.&#xA;        // writeFile(fileEntry, imgUri);&#xA;        console.log(&#34;got file: &#34; + fileEntry.fullPath);&#xA;        // displayFileData(fileEntry.nativeURL, &#34;Native URL&#34;);&#xA;&#xA;    }, function () {&#xA;      // If don&#39;t get the FileEntry (which may happen when testing&#xA;      // on some emulators), copy to a new FileEntry.&#xA;        createNewFileEntry(imgUri);&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example shown in the preceding code, you call the app&#39;s &lt;code&gt;createNewFileEntry&lt;/code&gt; function if you don&#39;t get a valid FileEntry object. The image URI returned from the Camera app should result in a valid FileEntry, but platform behavior on some emulators may be different for files returned from the file picker.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt; To see an example of writing to a FileEntry, see the &lt;a href=&#34;https://www.npmjs.com/package/cordova-plugin-file&#34;&gt;File plugin README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The code shown here creates a file in your app&#39;s cache (in sandboxed storage) named &lt;code&gt;tempFile.jpeg&lt;/code&gt;. With the new FileEntry object, you can copy the image to the file or do something else like upload it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function createNewFileEntry(imgUri) {&#xA;    window.resolveLocalFileSystemURL(cordova.file.cacheDirectory, function success(dirEntry) {&#xA;&#xA;        // JPEG file&#xA;        dirEntry.getFile(&#34;tempFile.jpeg&#34;, { create: true, exclusive: false }, function (fileEntry) {&#xA;&#xA;            // Do something with it, like write to it, upload it, etc.&#xA;            // writeFile(fileEntry, imgUri);&#xA;            console.log(&#34;got file: &#34; + fileEntry.fullPath);&#xA;            // displayFileData(fileEntry.fullPath, &#34;File copied to&#34;);&#xA;&#xA;        }, onErrorCreateFile);&#xA;&#xA;    }, onErrorResolveUrl);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>