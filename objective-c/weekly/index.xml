<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-25T01:43:32Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TimOliver/TOCropViewController</title>
    <updated>2022-09-25T01:43:32Z</updated>
    <id>tag:github.com,2022-09-25:/TimOliver/TOCropViewController</id>
    <link href="https://github.com/TimOliver/TOCropViewController" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A view controller for iOS that allows users to crop portions of UIImage objects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TOCropViewController&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/TimOliver/TOCropViewController/raw/main/Images/screenshot.png&#34; width=&#34;840&#34; style=&#34;margin:0 auto&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TimOliver/TOCropViewController/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/TimOliver/TOCropViewController/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/TOCropViewController&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/TOCropViewController.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/TimOliver/TOCropViewController/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/TOCropViewController&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/TOCropViewController.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;TOCropViewController&lt;/code&gt; is an open-source &lt;code&gt;UIViewController&lt;/code&gt; subclass to crop out sections of &lt;code&gt;UIImage&lt;/code&gt; objects, as well as perform basic rotations. It is excellent for things like editing profile pictures, or sharing parts of a photo online. It has been designed with the iOS Photos app editor in mind, and as such, behaves in a way that should already feel familiar to users of iOS.&lt;/p&gt; &#xA;&lt;p&gt;For Swift developers, &lt;code&gt;CropViewController&lt;/code&gt; is a Swift wrapper that completely encapsulates &lt;code&gt;TOCropViewController&lt;/code&gt; and provides a much more native, Swiftier interface.&lt;/p&gt; &#xA;&lt;h4&gt;Proudly powering apps by&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/TimOliver/TOCropViewController/raw/main/Images/users.png&#34; width=&#34;840&#34; style=&#34;margin:0 auto&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Looking for something more? If &lt;code&gt;TOCropViewController&lt;/code&gt; doesn&#39;t meet your exact requirements, please consider &lt;a href=&#34;https://img.ly/?via=tim&#34;&gt;IMG.LY&lt;/a&gt; with video editing and photo filter capabilities instead! (Disclaimer: Affiliate Link)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Crop images by dragging the edges of a grid overlay.&lt;/li&gt; &#xA; &lt;li&gt;Optionally, crop circular copies of images.&lt;/li&gt; &#xA; &lt;li&gt;Rotate images in 90-degree segments.&lt;/li&gt; &#xA; &lt;li&gt;Clamp the crop box to a specific aspect ratio.&lt;/li&gt; &#xA; &lt;li&gt;A reset button to completely undo all changes.&lt;/li&gt; &#xA; &lt;li&gt;iOS 7/8 translucency to make it easier to view the cropped region.&lt;/li&gt; &#xA; &lt;li&gt;The choice of having the controller return the cropped image to a delegate, or immediately pass it to a &lt;code&gt;UIActivityViewController&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A custom animation and layout when the device is rotated to landscape mode.&lt;/li&gt; &#xA; &lt;li&gt;Custom &#39;opening&#39; and &#39;dismissal&#39; animations.&lt;/li&gt; &#xA; &lt;li&gt;Localized in 28 languages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;iOS 8.0 or above&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;CocoaPods&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;p&gt;Add the following to your Podfile:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;TOCropViewController&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;p&gt;Add the following to your Podfile:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;CropViewController&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Swift Package Manager&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Add the following to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;  // ...&#xA;  .package(url: &#34;https://github.com/TimOliver/TOCropViewController.git&#34;),&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Carthage&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Add the following to your Cartfile:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code&gt;github &#34;TimOliver/TOCropViewController&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;From the &lt;code&gt;Carthage/Build&lt;/code&gt; folder, import one of the two frameworks into your Xcode project. For Objective-C projects, import just &lt;code&gt;TOCropViewController.framework&lt;/code&gt; and for Swift, import &lt;code&gt;CropViewController.framework&lt;/code&gt; instead. Each framework is separate; you do not need to import both.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Follow the remaining steps on &lt;a href=&#34;https://github.com/Carthage/Carthage#getting-started&#34;&gt;Getting Started with Carthage&lt;/a&gt; to finish integrating the framework.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Manual Installation&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;All of the necessary source and resource files for &lt;code&gt;TOCropViewController&lt;/code&gt; are in &lt;code&gt;Objective-C/TOCropViewController&lt;/code&gt;, and all of the necessary Swift files are in &lt;code&gt;Swift/CropViewController&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;For Objective-C projects, copy just the &lt;code&gt;TOCropViewController&lt;/code&gt; directory to your Xcode project. For Swift projects, copy both &lt;code&gt;TOCropViewController&lt;/code&gt; and &lt;code&gt;CropViewController&lt;/code&gt; to your project.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;TOCropViewController&lt;/code&gt; is very straightforward. Simply create a new instance passing the &lt;code&gt;UIImage&lt;/code&gt; object you wish to crop, and then present it modally on the screen.&lt;/p&gt; &#xA;&lt;p&gt;While &lt;code&gt;TOCropViewController&lt;/code&gt; prefers to be presented modally, it can also be pushed to a &lt;code&gt;UINavigationController&lt;/code&gt; stack.&lt;/p&gt; &#xA;&lt;p&gt;For a complete working example, check out the sample apps included in this repo.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Basic Implementation&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func presentCropViewController() {&#xA;  let image: UIImage = ... //Load an image&#xA;  &#xA;  let cropViewController = CropViewController(image: image)&#xA;  cropViewController.delegate = self&#xA;  present(cropViewController, animated: true, completion: nil)&#xA;}&#xA;&#xA;func cropViewController(_ cropViewController: CropViewController, didCropToImage image: UIImage, withRect cropRect: CGRect, angle: Int) {&#xA;        // &#39;image&#39; is the newly cropped version of the original image&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)presentCropViewController&#xA;{&#xA;  UIImage *image = ...; // Load an image&#xA;  &#xA;  TOCropViewController *cropViewController = [[TOCropViewController alloc] initWithImage:image];&#xA;  cropViewController.delegate = self;&#xA;  [self presentViewController:cropViewController animated:YES completion:nil];&#xA;}&#xA;&#xA;- (void)cropViewController:(TOCropViewController *)cropViewController didCropToImage:(UIImage *)image withRect:(CGRect)cropRect angle:(NSInteger)angle&#xA;{&#xA;  // &#39;image&#39; is the newly cropped version of the original image&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Similar to many &lt;code&gt;UIKit&lt;/code&gt; &lt;code&gt;UIViewController&lt;/code&gt; subclasses, like &lt;code&gt;MFMailComposeViewController&lt;/code&gt;, the class responsible for presenting view controller should also take care of dismissing it upon cancellation. To dismiss &lt;code&gt;TOCropViewController&lt;/code&gt;, implement the &lt;code&gt;cropViewController:didFinishCancelled:&lt;/code&gt; delegate method, and call &lt;code&gt;dismissViewController:animated:&lt;/code&gt; from there.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Making a Circular Cropped Image&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func presentCropViewController() {&#xA;    var image: UIImage? // Load an image&#xA;    let cropViewController = CropViewController(croppingStyle: .circular, image: image)&#xA;    cropViewController.delegate = self&#xA;    self.present(cropViewController, animated: true, completion: nil)&#xA;}&#xA;&#xA;func cropViewController(_ cropViewController: TOCropViewController?, didCropToCircularImage image: UIImage?, with cropRect: CGRect, angle: Int) {&#xA;    // &#39;image&#39; is the newly cropped, circular version of the original image&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)presentCropViewController&#xA;{&#xA;UIImage *image = ...; // Load an image&#xA;&#xA;TOCropViewController *cropViewController = [[TOCropViewController alloc] initWithCroppingStyle:TOCropViewCroppingStyleCircular image:image];&#xA;cropViewController.delegate = self;&#xA;[self presentViewController:cropViewController animated:YES completion:nil];&#xA;}&#xA;&#xA;- (void)cropViewController:(TOCropViewController *)cropViewController didCropToCircularImage:(UIImage *)image withRect:(CGRect)cropRect angle:(NSInteger)angle&#xA;{&#xA;// &#39;image&#39; is the newly cropped, circular version of the original image&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Sharing Cropped Images Via a Share Sheet&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func presentCropViewController() {&#xA;    var image: UIImage? // Load an image&#xA;    let cropViewController = CropViewController(image: image)&#xA;    cropViewController.showActivitySheetOnDone = true&#xA;    self.present(cropViewController, animated: true, completion: nil)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)presentCropViewController&#xA;{&#xA;  UIImage *image = ...; // Load an image&#xA;  &#xA;  TOCropViewController *cropViewController = [[TOCropViewController alloc] initWithImage:image];&#xA;  cropViewController.showActivitySheetOnDone = YES;&#xA;  [self presentViewController:cropViewController animated:YES completion:nil];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Presenting With a Custom Animation&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Optionally, &lt;code&gt;TOCropViewController&lt;/code&gt; also supports a custom presentation animation where an already-visible copy of the image will zoom in to fill the screen.&lt;/p&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;func presentCropViewController() {&#xA;    var image: UIImage? // Load an image&#xA;    var imageView = UIImageView(image: image)&#xA;    var frame: CGRect = view.convert(imageView.frame, to: view)&#xA;    &#xA;    let cropViewController = CropViewController(image: image)&#xA;    cropViewController.delegate = self&#xA;    self.present(cropViewController, animated: true, completion: nil)&#xA;    cropViewController.presentAnimated(fromParentViewController: self, fromFrame: frame, completion: nil)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)presentCropViewController&#xA;{&#xA;  UIImage *image = ...;&#xA;  UIImageView *imageView = [[UIImageView alloc] initWithImage:image];&#xA;  CGRect frame = [self.view convertRect:imageView.frame toView:self.view];&#xA;  &#xA;  TOCropViewController *cropViewController = [[TOCropViewController alloc] initWithImage:image];&#xA;  cropViewController.delegate = self;&#xA;  [self presentViewController:cropViewController animated:YES completion:nil];&#xA;  [cropViewController presentAnimatedFromParentViewController:self fromFrame:frame completion:nil];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Architecture of &lt;code&gt;TOCropViewController&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;While traditional cropping UI implementations will usually just have a dimming view with a square hole cut out of the middle, &lt;code&gt;TOCropViewController&lt;/code&gt; goes about its implementation a little differently.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TimOliver/TOCropViewController/master/breakdown.jpg&#34; width=&#34;702&#34; style=&#34;margin:0 auto&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Since there are two views that are overlaid over the image (A dimming view and a translucency view), trying to cut a hole open in both of them would be rather complex. Instead, an image view is placed in a scroll view in the background, and a copy of the image view is placed on top, inside a container view that is clipped to the designated cropping size. The size and position of the foreground image is then made to match the background view, creating the illusion that there is a hole in the dimming views, and minimising the number of views onscreen.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;TOCropViewController&lt;/code&gt; was originally created by &lt;a href=&#34;http://twitter.com/TimOliverAU&#34;&gt;Tim Oliver&lt;/a&gt; as a component for &lt;a href=&#34;http://icomics.co&#34;&gt;iComics&lt;/a&gt;, a comic reader app for iOS.&lt;/p&gt; &#xA;&lt;p&gt;Thanks also goes to &lt;code&gt;TOCropViewController&lt;/code&gt;&#39;s growing list of &lt;a href=&#34;https://github.com/TimOliver/TOCropViewController/graphs/contributors&#34;&gt;contributors&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;iOS Device mockups used in the screenshot created by &lt;a href=&#34;http://www.pixeden.com&#34;&gt;Pixeden&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;TOCropViewController is licensed under the MIT License, please see the &lt;a href=&#34;https://raw.githubusercontent.com/TimOliver/TOCropViewController/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AloneMonkey/MonkeyDev</title>
    <updated>2022-09-25T01:43:32Z</updated>
    <id>tag:github.com,2022-09-25:/AloneMonkey/MonkeyDev</id>
    <link href="https://github.com/AloneMonkey/MonkeyDev" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CaptainHook Tweak、Logos Tweak and Command-line Tool、Patch iOS Apps, Without Jailbreak.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MonkeyDev&lt;/h1&gt; &#xA;&lt;p&gt;A modified version of iOSOpenDev&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;easy to install&lt;/li&gt; &#xA; &lt;li&gt;support the latest version of theos&lt;/li&gt; &#xA; &lt;li&gt;support CaptainHook Tweak、Logos Tweak、Command-line Tool&lt;/li&gt; &#xA; &lt;li&gt;support insert dylib、class-dump、restore-symbol、reveal、cycript，patch and debug iOS Apps, without jailbreak.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Plese Read Wiki: &lt;a href=&#34;https://github.com/AloneMonkey/MonkeyDev/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;原有iOSOpenDev的升级，非越狱插件开发集成神器！&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可以使用Xcode开发CaptainHook Tweak、Logos Tweak 和 Command-line Tool，在越狱机器开发插件，这是原来iOSOpenDev功能的迁移和改进。&lt;/li&gt; &#xA; &lt;li&gt;只需拖入一个砸壳应用，自动集成class-dump、restore-symbol、Reveal、Cycript和注入的动态库并重签名安装到非越狱机器。&lt;/li&gt; &#xA; &lt;li&gt;支持调试自己编写的动态库和第三方App&lt;/li&gt; &#xA; &lt;li&gt;支持通过CocoaPods第三方应用集成SDK以及非越狱插件，简单来说就是通过CocoaPods搭建了一个非越狱插件商店。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;使用请阅读Wiki文档: &lt;a href=&#34;https://github.com/AloneMonkey/MonkeyDev/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;非越狱插件CocoaPods私有仓库地址:&lt;a href=&#34;https://github.com/AloneMonkey/MonkeyDevSpecs&#34;&gt;MonkeyDevSpecs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;免责声明: 软件仅供技术交流，禁止用于商业及非法用途，如产生法律纠纷与本人无关。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;《iOS应用逆向与安全》出版啦！！！&lt;/h2&gt; &#xA;&lt;h1&gt;购书链接&lt;/h1&gt; &#xA;&lt;h4&gt;京东: &lt;a href=&#34;https://item.jd.com/12361729.html&#34;&gt;https://item.jd.com/12361729.html&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;天猫: &lt;a href=&#34;https://detail.tmall.com/item.htm?id=570691214072&#34;&gt;https://detail.tmall.com/item.htm?id=570691214072&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;当当: &lt;a href=&#34;http://product.dangdang.com/25283164.html&#34;&gt;http://product.dangdang.com/25283164.html&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;亚马逊: &lt;a href=&#34;https://www.amazon.cn/dp/B07D5952BR/&#34;&gt;https://www.amazon.cn/dp/B07D5952BR/&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h3&gt;请大家多多支持正版哦~&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>material-components/material-components-ios</title>
    <updated>2022-09-25T01:43:32Z</updated>
    <id>tag:github.com,2022-09-25:/material-components/material-components-ios</id>
    <link href="https://github.com/material-components/material-components-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[In maintenance mode] Modular and customizable Material Design UI components for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Material Components for iOS&lt;/h1&gt; &#xA;&lt;h2&gt;Material&#39;s iOS libraries are in maintenance mode as of July 15, 2021&lt;/h2&gt; &#xA;&lt;p&gt;On July 15, 2021, the Material Components for iOS library and its related Material Foundation and Material Motion dependencies entered maintenance mode. This included:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-components/material-components-ios/&#34;&gt;https://github.com/material-components/material-components-ios/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-internationalization-ios&#34;&gt;https://github.com/material-foundation/material-internationalization-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-text-accessibility-ios&#34;&gt;https://github.com/material-foundation/material-text-accessibility-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/cocoapods-catalog-by-convention&#34;&gt;https://github.com/material-foundation/cocoapods-catalog-by-convention&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-testing-ios&#34;&gt;https://github.com/material-foundation/material-testing-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/bazel-workspace-apple&#34;&gt;https://github.com/material-foundation/bazel-workspace-apple&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/xctestrunner&#34;&gt;https://github.com/material-foundation/xctestrunner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/bazel-apple-framework-relative-headers&#34;&gt;https://github.com/material-foundation/bazel-apple-framework-relative-headers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/bazel-test-host-apple&#34;&gt;https://github.com/material-foundation/bazel-test-host-apple&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-sprited-animation-view-ios&#34;&gt;https://github.com/material-foundation/material-sprited-animation-view-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/clang-format-ci&#34;&gt;https://github.com/material-foundation/clang-format-ci&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/github-squash-and-merge-pr-descriptions&#34;&gt;https://github.com/material-foundation/github-squash-and-merge-pr-descriptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-roboto-font-loader-ios&#34;&gt;https://github.com/material-foundation/material-roboto-font-loader-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-scrollview-delegate-multiplexer-ios&#34;&gt;https://github.com/material-foundation/material-scrollview-delegate-multiplexer-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/SettingsKit&#34;&gt;https://github.com/material-foundation/SettingsKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/clang-format&#34;&gt;https://github.com/material-foundation/clang-format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/bazel_ios_warnings&#34;&gt;https://github.com/material-foundation/bazel_ios_warnings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/github-comment&#34;&gt;https://github.com/material-foundation/github-comment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-automation&#34;&gt;https://github.com/material-foundation/material-automation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/kokoro-ios-runner&#34;&gt;https://github.com/material-foundation/kokoro-ios-runner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-remixer-ios&#34;&gt;https://github.com/material-foundation/material-remixer-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/codereview.cc&#34;&gt;https://github.com/material-foundation/codereview.cc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-font-disk-loader-ios&#34;&gt;https://github.com/material-foundation/material-font-disk-loader-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/arc-tslint&#34;&gt;https://github.com/material-foundation/arc-tslint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-arc-tools&#34;&gt;https://github.com/material-foundation/material-arc-tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/arc-tsclint&#34;&gt;https://github.com/material-foundation/arc-tsclint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/arc-hook-github-issues&#34;&gt;https://github.com/material-foundation/arc-hook-github-issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;All libraries at &lt;a href=&#34;https://github.com/material-motion&#34;&gt;https://github.com/material-motion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What can you use instead?&lt;/h3&gt; &#xA;&lt;p&gt;We recommend that you follow Apple&#39;s Human Interface Guidelines and consider using modern UIKit components or SwiftUI instead. Both offer a high degree of flexibility through which you can express your product&#39;s brand while providing a predictable and familiar Apple platforms experience for your users. You&#39;ll also benefit from ongoing investments Apple makes in accessibility, ease of use, and deep integrations with OS features.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, &lt;a href=&#34;https://flutter.dev/docs/development/ui/widgets/material&#34;&gt;Flutter&lt;/a&gt; enables you to get a Material look and feel across all platforms.&lt;/p&gt; &#xA;&lt;h3&gt;What maintenance mode means for MDC iOS&lt;/h3&gt; &#xA;&lt;p&gt;Once we enter maintenance mode we will have the following support policy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Releases will be cut on a best-effort and as-needed basis.&lt;/li&gt; &#xA; &lt;li&gt;Feature and support requests will automatically be closed.&lt;/li&gt; &#xA; &lt;li&gt;Bugs will be addressed on a best-effort basis.&lt;/li&gt; &#xA; &lt;li&gt;All iOS-specific documentation on material.io will be removed.&lt;/li&gt; &#xA; &lt;li&gt;We will no longer maintain any &lt;code&gt;.md&lt;/code&gt; documentation on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Contributions may still be accepted, but reviews will be performed on a best-effort basis and are not guaranteed to result in a merge.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/material-components/material-components-ios/develop/docs/&#34;&gt;How To Use MDC-iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/material-components/material-components-ios/develop/components/&#34;&gt;All Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.stackoverflow.com/questions/tagged/material-components+ios&#34;&gt;MDC-iOS on Stack Overflow&lt;/a&gt; (external site)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://material.io&#34;&gt;Material.io&lt;/a&gt; (external site)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://material.io/guidelines&#34;&gt;Material Design Guidelines&lt;/a&gt; (external site)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>