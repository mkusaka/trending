<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-10T02:00:13Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>romaonthego/RESideMenu</title>
    <updated>2023-09-10T02:00:13Z</updated>
    <id>tag:github.com,2023-09-10:/romaonthego/RESideMenu</id>
    <link href="https://github.com/romaonthego/RESideMenu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS 7/8 style side menu with parallax effect.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RESideMenu&lt;/h1&gt; &#xA;&lt;p&gt;iOS 7/8 style side menu with parallax effect inspired by Dribbble shots (&lt;a href=&#34;http://dribbble.com/shots/1116265-Instasave-iPhone-App&#34;&gt;first&lt;/a&gt; and &lt;a href=&#34;http://dribbble.com/shots/1114754-Social-Feed-iOS7&#34;&gt;second&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Since version 4.0 you can add menu view controllers on both left and right sides of your content view controller.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/romaonthego/RESideMenu/raw/master/Screenshot.png&#34; alt=&#34;RESideMenu Screenshot&#34; width=&#34;400&#34; height=&#34;568&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/romaonthego/RESideMenu/master/Demo.gif?2&#34; alt=&#34;RESideMenu Screenshot&#34; width=&#34;320&#34; height=&#34;568&#34;&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 6 or higher&lt;/li&gt; &#xA; &lt;li&gt;Apple LLVM compiler&lt;/li&gt; &#xA; &lt;li&gt;iOS 6.0 or higher&lt;/li&gt; &#xA; &lt;li&gt;ARC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Build and run the &lt;code&gt;RESideMenuExample&lt;/code&gt; project in Xcode to see &lt;code&gt;RESideMenu&lt;/code&gt; in action. For storyboards integration demo, build and run &lt;code&gt;RESideMenuStoryboardsExample&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;The recommended approach for installating &lt;code&gt;RESideMenu&lt;/code&gt; is via the &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; package manager, as it provides flexible dependency management and dead simple installation. For best results, it is recommended that you install via CocoaPods &amp;gt;= &lt;strong&gt;0.28.0&lt;/strong&gt; using Git &amp;gt;= &lt;strong&gt;1.8.0&lt;/strong&gt; installed via Homebrew.&lt;/p&gt; &#xA;&lt;p&gt;Install CocoaPods if not already available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ [sudo] gem install cocoapods&#xA;$ pod setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change to the directory of your Xcode project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /path/to/MyProject&#xA;$ touch Podfile&#xA;$ edit Podfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit your Podfile and add RESideMenu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;platform :ios, &#39;6.0&#39;&#xA;pod &#39;RESideMenu&#39;, &#39;~&amp;gt; 4.0.7&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install into your Xcode project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open your project in Xcode from the .xcworkspace file (not the usual project file)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ open MyProject.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that if your installation fails, it may be because you are installing with a version of Git lower than CocoaPods is expecting. Please ensure that you are running Git &amp;gt;= &lt;strong&gt;1.8.0&lt;/strong&gt; by executing &lt;code&gt;git --version&lt;/code&gt;. You can get a full picture of the installation details by executing &lt;code&gt;pod install --verbose&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manual Install&lt;/h3&gt; &#xA;&lt;p&gt;All you need to do is drop &lt;code&gt;RESideMenu&lt;/code&gt; files into your project, and add &lt;code&gt;#include &#34;RESideMenu.h&#34;&lt;/code&gt; to the top of classes that will use it.&lt;/p&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;p&gt;In your AppDelegate&#39;s &lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&lt;/code&gt; create the view controller and assign content and menu view controllers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// Create content and menu controllers&#xA;//&#xA;DEMONavigationController *navigationController = [[DEMONavigationController alloc] initWithRootViewController:[[DEMOHomeViewController alloc] init]];&#xA;DEMOLeftMenuViewController *leftMenuViewController = [[DEMOLeftMenuViewController alloc] init];&#xA;DEMORightMenuViewController *rightMenuViewController = [[DEMORightMenuViewController alloc] init];&#xA;&#xA;// Create side menu controller&#xA;//&#xA;RESideMenu *sideMenuViewController = [[RESideMenu alloc] initWithContentViewController:navigationController&#xA;                                                                leftMenuViewController:leftMenuViewController&#xA;                                                               rightMenuViewController:rightMenuViewController];&#xA;sideMenuViewController.backgroundImage = [UIImage imageNamed:@&#34;Stars&#34;];&#xA;&#xA;// Make it a root controller&#xA;//&#xA;self.window.rootViewController = sideMenuViewController;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Present the menu view controller:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[self.sideMenuViewController presentLeftMenuViewController];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[self.sideMenuViewController presentRightMenuViewController];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Switch content view controllers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;RESideMenu/RESideMenu.h&amp;gt;&#xA;&#xA;....&#xA;&#xA;[self.sideMenuViewController setContentViewController:viewController animated:YES];&#xA;[self.sideMenuViewController hideMenuViewController];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Storyboards Example&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a subclass of &lt;code&gt;RESideMenu&lt;/code&gt;. In this example we call it &lt;code&gt;DEMORootViewController&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In the Storyboard designate the root view&#39;s owner as &lt;code&gt;DEMORootViewController&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make sure to &lt;code&gt;#import &#34;RESideMenu.h&#34;&lt;/code&gt; in &lt;code&gt;DEMORootViewController.h&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add more view controllers to your Storyboard, and give them identifiers &#34;leftMenuViewController&#34;, &#34;rightMenuViewController&#34; and &#34;contentViewController&#34;. Note that in the new XCode the identifier is called &#34;Storyboard ID&#34; and can be found in the Identity inspector.&lt;/li&gt; &#xA; &lt;li&gt;Add a method &lt;code&gt;awakeFromNib&lt;/code&gt; to &lt;code&gt;DEMORootViewController.m&lt;/code&gt; with the following code:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)awakeFromNib&#xA;{&#xA;    self.contentViewController = [self.storyboard instantiateViewControllerWithIdentifier:@&#34;contentViewController&#34;];&#xA;    self.leftMenuViewController = [self.storyboard instantiateViewControllerWithIdentifier:@&#34;leftMenuViewController&#34;];&#xA;    self.rightMenuViewController = [self.storyboard instantiateViewControllerWithIdentifier:@&#34;rightMenuViewController&#34;];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;You can customize the following properties of &lt;code&gt;RESideMenu&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@property (assign, readwrite, nonatomic) NSTimeInterval animationDuration;&#xA;@property (strong, readwrite, nonatomic) UIImage *backgroundImage;&#xA;@property (assign, readwrite, nonatomic) BOOL panGestureEnabled;&#xA;@property (assign, readwrite, nonatomic) BOOL panFromEdge;&#xA;@property (assign, readwrite, nonatomic) NSUInteger panMinimumOpenThreshold;&#xA;@property (assign, readwrite, nonatomic) BOOL interactivePopGestureRecognizerEnabled;&#xA;@property (assign, readwrite, nonatomic) BOOL scaleContentView;&#xA;@property (assign, readwrite, nonatomic) BOOL scaleBackgroundImageView;&#xA;@property (assign, readwrite, nonatomic) BOOL scaleMenuView;&#xA;@property (assign, readwrite, nonatomic) BOOL contentViewShadowEnabled;&#xA;@property (assign, readwrite, nonatomic) UIColor *contentViewShadowColor;&#xA;@property (assign, readwrite, nonatomic) CGSize contentViewShadowOffset;&#xA;@property (assign, readwrite, nonatomic) CGFloat contentViewShadowOpacity;&#xA;@property (assign, readwrite, nonatomic) CGFloat contentViewShadowRadius;&#xA;@property (assign, readwrite, nonatomic) CGFloat contentViewScaleValue;&#xA;@property (assign, readwrite, nonatomic) CGFloat contentViewInLandscapeOffsetCenterX;&#xA;@property (assign, readwrite, nonatomic) CGFloat contentViewInPortraitOffsetCenterX;&#xA;@property (assign, readwrite, nonatomic) CGFloat parallaxMenuMinimumRelativeValue;&#xA;@property (assign, readwrite, nonatomic) CGFloat parallaxMenuMaximumRelativeValue;&#xA;@property (assign, readwrite, nonatomic) CGFloat parallaxContentMinimumRelativeValue;&#xA;@property (assign, readwrite, nonatomic) CGFloat parallaxContentMaximumRelativeValue;&#xA;@property (assign, readwrite, nonatomic) CGAffineTransform menuViewControllerTransformation;&#xA;@property (assign, readwrite, nonatomic) BOOL parallaxEnabled;&#xA;@property (assign, readwrite, nonatomic) BOOL bouncesHorizontally;&#xA;@property (assign, readwrite, nonatomic) UIStatusBarStyle menuPreferredStatusBarStyle;&#xA;@property (assign, readwrite, nonatomic) BOOL menuPrefersStatusBarHidden;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you set a backgroundImage, don&#39;t forget to set the Menu View Controller&#39;s background color to clear color.&lt;/p&gt; &#xA;&lt;p&gt;You can implement &lt;code&gt;RESideMenuDelegate&lt;/code&gt; protocol to receive the following messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)sideMenu:(RESideMenu *)sideMenu didRecognizePanGesture:(UIPanGestureRecognizer *)recognizer;&#xA;- (void)sideMenu:(RESideMenu *)sideMenu willShowMenuViewController:(UIViewController *)menuViewController;&#xA;- (void)sideMenu:(RESideMenu *)sideMenu didShowMenuViewController:(UIViewController *)menuViewController;&#xA;- (void)sideMenu:(RESideMenu *)sideMenu willHideMenuViewController:(UIViewController *)menuViewController;&#xA;- (void)sideMenu:(RESideMenu *)sideMenu didHideMenuViewController:(UIViewController *)menuViewController;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Roman Efimov&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/romaonthego&#34;&gt;https://github.com/romaonthego&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/romaonthego&#34;&gt;https://twitter.com/romaonthego&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:romefimov@gmail.com&#34;&gt;romefimov@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;RESideMenu is available under the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;Copyright © 2013 Roman Efimov.&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>between40and2/JXFanfouEngine</title>
    <updated>2023-09-10T02:00:13Z</updated>
    <id>tag:github.com,2023-09-10:/between40and2/JXFanfouEngine</id>
    <link href="https://github.com/between40and2/JXFanfouEngine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Objective-C framework to access Fanfou API&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Hello &lt;a href=&#34;https://github.com/between40and2/JXFanfouEngine&#34;&gt;https://github.com/between40and2/JXFanfouEngine&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/EarlGrey</title>
    <updated>2023-09-10T02:00:13Z</updated>
    <id>tag:github.com,2023-09-10:/google/EarlGrey</id>
    <link href="https://github.com/google/EarlGrey" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🍵 iOS UI Automation Test Framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Deprecation: EarlGrey 1.0 is deprecated in favor of EarlGrey 2.0 which integrates it with XCUITest. Please look at the &lt;a href=&#34;https://github.com/google/EarlGrey/tree/earlgrey2&#34;&gt;earlgrey2&lt;/a&gt; branch. EarlGrey 1.0 is not being maintained internally with iOS 13.&lt;/p&gt; &#xA;&lt;h1&gt;EarlGrey&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-lightgrey.svg?style=flat&#34; alt=&#34;Apache License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/EarlGrey/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-CC%20BY%204.0-lightgrey.svg?sanitize=true&#34; alt=&#34;CC-BY 4.0 License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/google/EarlGrey&#34;&gt;&lt;img src=&#34;https://travis-ci.org/google/EarlGrey.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/EarlGrey&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/EarlGrey.svg?maxAge=2592000&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/earlgrey&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/earlgrey.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For EarlGrey 2, please go to &lt;a href=&#34;https://github.com/google/EarlGrey/tree/earlgrey2&#34;&gt;earlgrey2 branch&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;EarlGrey is a native iOS UI automation test framework that enables you to write clear, concise tests.&lt;/p&gt; &#xA;&lt;p&gt;With the EarlGrey framework, you have access to enhanced synchronization features. EarlGrey automatically synchronizes with the UI, network requests, and various queues; but still allows you to manually implement customized timings, if needed.&lt;/p&gt; &#xA;&lt;p&gt;EarlGrey’s synchronization features help to ensure that the UI is in a steady state before actions are performed. This greatly increases test stability and makes tests highly repeatable.&lt;/p&gt; &#xA;&lt;p&gt;EarlGrey works in conjunction with the XCTest framework and integrates with Xcode’s Test Navigator so you can run tests directly from Xcode or the command line (using xcodebuild).&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The EarlGrey documentation for users is located in the &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs&#34;&gt;EarlGrey/docs&lt;/a&gt; folder. To get started, review the EarlGrey features, check for backward compatibility, and then install/run EarlGrey with your test target. After everything is configured, take a look at the EarlGrey API and start writing your own tests.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/features.md&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/backward-compatibility.md&#34;&gt;Backward Compatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/install-and-run.md&#34;&gt;Install and Run&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/api.md&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/cheatsheet/cheatsheet.png&#34;&gt;Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;If you need help, several resources are available. First check the &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/faq.md&#34;&gt;FAQ&lt;/a&gt;. If you have more questions after reading the FAQ, see &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/known-issues.md&#34;&gt;Known Issues&lt;/a&gt;. You can bring more specific issues to our attention by asking them on &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/earlgrey&#34;&gt;#earlgrey tag&lt;/a&gt;. You can also start new discussions with us on our &lt;a href=&#34;https://groups.google.com/forum/#!forum/earlgrey-discuss&#34;&gt;Google group&lt;/a&gt; or request to join our &lt;a href=&#34;https://googleoss.slack.com/messages/earlgrey&#34;&gt;slack channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/faq.md&#34;&gt;FAQ - Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/ifaq.md&#34;&gt;IFAQ - Infrequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/known-issues.md&#34;&gt;Known Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/earlgrey&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://googleoss.slack.com/messages/earlgrey&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/earlgrey-discuss&#34;&gt;Google Group&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Analytics&lt;/h2&gt; &#xA;&lt;p&gt;To prioritize and improve EarlGrey, the framework collects usage data and uploads it to Google Analytics. More specifically, the framework collects the &lt;strong&gt;MD5 hash&lt;/strong&gt; of &lt;em&gt;Bundle ID&lt;/em&gt;, &lt;em&gt;Test Class Names&lt;/em&gt; and &lt;em&gt;Test Method Names&lt;/em&gt;. This information allows us to measure the volume of usage. For more detailed information about our analytics collection, please peruse the &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/EarlGrey/Common/GREYAnalytics.m&#34;&gt;GREYAnalytics.m&lt;/a&gt; file which contains the implementation details. If they wish, users can choose to opt out by disabling the Analytics config setting in their test’s &lt;code&gt;- (void)setUp&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;p&gt;In Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Disable analytics.&#xA;[[GREYConfiguration sharedInstance] setValue:@(NO) forConfigKey:kGREYConfigKeyAnalyticsEnabled];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Disable analytics.&#xA;GREYConfiguration.sharedInstance().setValue(false, forConfigKey: kGREYConfigKeyAnalyticsEnabled)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;For Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Please make sure you’ve followed the guidelines in &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before making any contributions.&lt;/p&gt; &#xA;&lt;h3&gt;Setup an EarlGrey Project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the EarlGrey repository from GitHub:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/EarlGrey.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;After you have cloned the EarlGrey repository, download all the dependencies using &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/Scripts/setup-earlgrey.sh&#34;&gt;&lt;strong&gt;setup-earlgrey.sh&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;After the script completes successfully, open &lt;code&gt;EarlGrey.xcodeproj&lt;/code&gt; and ensure that all the targets build.&lt;/li&gt; &#xA; &lt;li&gt;You can now use &lt;code&gt;EarlGrey.xcodeproj&lt;/code&gt; to make changes to the framework.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Add and Run Tests&lt;/h3&gt; &#xA;&lt;h4&gt;Unit Tests&lt;/h4&gt; &#xA;&lt;p&gt;To add unit tests for EarlGrey, use &lt;code&gt;UnitTests.xcodeproj&lt;/code&gt; located at &lt;code&gt;Tests/UnitTests&lt;/code&gt;. To run all unit tests, select the &lt;strong&gt;UnitTests&lt;/strong&gt; Scheme and press Cmd+U.&lt;/p&gt; &#xA;&lt;h4&gt;Functional Tests&lt;/h4&gt; &#xA;&lt;p&gt;To add functional tests for EarlGrey, use the &lt;code&gt;FunctionalTests.xcodeproj&lt;/code&gt; located at &lt;code&gt;Tests/FunctionalTests&lt;/code&gt;. To run all functional tests, select the &lt;strong&gt;FunctionalTests&lt;/strong&gt; Scheme and press Cmd+U.&lt;/p&gt;</summary>
  </entry>
</feed>