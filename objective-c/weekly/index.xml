<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:18:51Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jdg/MBProgressHUD</title>
    <updated>2022-06-02T02:18:51Z</updated>
    <id>tag:github.com,2022-06-02:/jdg/MBProgressHUD</id>
    <link href="https://github.com/jdg/MBProgressHUD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MBProgressHUD + Customizations&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MBProgressHUD&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/matej/MBProgressHUD&#34;&gt;&lt;img src=&#34;https://travis-ci.org/matej/MBProgressHUD.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/matej/MBProgressHUD?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/matej/MBProgressHUD/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;SwiftPM compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat&#34; alt=&#34;Accio supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/MBProgressHUD&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/MBProgressHUD.svg?style=flat&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/MBProgressHUD.svg?style=flat&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MBProgressHUD&lt;/code&gt; is an iOS drop-in class that displays a translucent HUD with an indicator and/or labels while work is being done in a background thread. The HUD is meant as a replacement for the undocumented, private &lt;code&gt;UIKit&lt;/code&gt; &lt;code&gt;UIProgressHUD&lt;/code&gt; with some additional features.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/1.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/1-small.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/2.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/2-small.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/3.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/3-small.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/4.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/4-small.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/5.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/5-small.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/6.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/6-small.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/7.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/7-small.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;MBProgressHUD&lt;/code&gt; works on iOS 9.0+. It depends on the following Apple frameworks, which should already be included with most Xcode templates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Foundation.framework&lt;/li&gt; &#xA; &lt;li&gt;UIKit.framework&lt;/li&gt; &#xA; &lt;li&gt;CoreGraphics.framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You will need the latest developer tools in order to build &lt;code&gt;MBProgressHUD&lt;/code&gt;. Old Xcode versions might work, but compatibility will not be explicitly maintained.&lt;/p&gt; &#xA;&lt;h2&gt;Adding MBProgressHUD to your project&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is the recommended way to add MBProgressHUD to your project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add a pod entry for MBProgressHUD to your Podfile &lt;code&gt;pod &#39;MBProgressHUD&#39;, &#39;~&amp;gt; 1.2.0&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the pod(s) by running &lt;code&gt;pod install&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Include MBProgressHUD wherever you need it with &lt;code&gt;#import &#34;MBProgressHUD.h&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add MBProgressHUD to your Cartfile. e.g., &lt;code&gt;github &#34;jdg/MBProgressHUD&#34; ~&amp;gt; 1.2.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow the rest of the &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;standard Carthage installation instructions&lt;/a&gt; to add MBProgressHUD to your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;SwiftPM / Accio&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the following to your &lt;code&gt;Package.swift&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/jdg/MBProgressHUD.git&#34;, .upToNextMajor(from: &#34;1.2.0&#34;)),&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Next, add &lt;code&gt;MBProgressHUD&lt;/code&gt; to your App targets dependencies like so: &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(name: &#34;App&#34;, dependencies: [&#34;MBProgressHUD&#34;]),&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Then open your project in Xcode 11+ (SwiftPM) or run &lt;code&gt;accio update&lt;/code&gt; (Accio).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Source files&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively you can directly add the &lt;code&gt;MBProgressHUD.h&lt;/code&gt; and &lt;code&gt;MBProgressHUD.m&lt;/code&gt; source files to your project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/matej/MBProgressHUD/archive/master.zip&#34;&gt;latest code version&lt;/a&gt; or add the repository as a git submodule to your git-tracked project.&lt;/li&gt; &#xA; &lt;li&gt;Open your project in Xcode, then drag and drop &lt;code&gt;MBProgressHUD.h&lt;/code&gt; and &lt;code&gt;MBProgressHUD.m&lt;/code&gt; onto your project (use the &#34;Product Navigator view&#34;). Make sure to select Copy items when asked if you extracted the code archive outside of your project.&lt;/li&gt; &#xA; &lt;li&gt;Include MBProgressHUD wherever you need it with &lt;code&gt;#import &#34;MBProgressHUD.h&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Static library&lt;/h3&gt; &#xA;&lt;p&gt;You can also add MBProgressHUD as a static library to your project or workspace.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/matej/MBProgressHUD/downloads&#34;&gt;latest code version&lt;/a&gt; or add the repository as a git submodule to your git-tracked project.&lt;/li&gt; &#xA; &lt;li&gt;Open your project in Xcode, then drag and drop &lt;code&gt;MBProgressHUD.xcodeproj&lt;/code&gt; onto your project or workspace (use the &#34;Product Navigator view&#34;).&lt;/li&gt; &#xA; &lt;li&gt;Select your target and go to the Build phases tab. In the Link Binary With Libraries section select the add button. On the sheet find and add &lt;code&gt;libMBProgressHUD.a&lt;/code&gt;. You might also need to add &lt;code&gt;MBProgressHUD&lt;/code&gt; to the Target Dependencies list.&lt;/li&gt; &#xA; &lt;li&gt;Include MBProgressHUD wherever you need it with &lt;code&gt;#import &amp;lt;MBProgressHUD/MBProgressHUD.h&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The main guideline you need to follow when dealing with MBProgressHUD while running long-running tasks is keeping the main thread work-free, so the UI can be updated promptly. The recommended way of using MBProgressHUD is therefore to set it up on the main thread and then spinning the task, that you want to perform, off onto a new thread.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[MBProgressHUD showHUDAddedTo:self.view animated:YES];&#xA;dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_LOW, 0), ^{&#xA;&#x9;// Do something...&#xA;&#x9;dispatch_async(dispatch_get_main_queue(), ^{&#xA;&#x9;&#x9;[MBProgressHUD hideHUDForView:self.view animated:YES];&#xA;&#x9;});&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add the HUD on any view or window. It is however a good idea to avoid adding the HUD to certain &lt;code&gt;UIKit&lt;/code&gt; views with complex view hierarchies - like &lt;code&gt;UITableView&lt;/code&gt; or &lt;code&gt;UICollectionView&lt;/code&gt;. Those can mutate their subviews in unexpected ways and thereby break HUD display.&lt;/p&gt; &#xA;&lt;p&gt;If you need to configure the HUD you can do this by using the MBProgressHUD reference that showHUDAddedTo:animated: returns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self.view animated:YES];&#xA;hud.mode = MBProgressHUDModeAnnularDeterminate;&#xA;hud.label.text = @&#34;Loading&#34;;&#xA;[self doSomethingInBackgroundWithProgressCallback:^(float progress) {&#xA;&#x9;hud.progress = progress;&#xA;} completionCallback:^{&#xA;&#x9;[hud hideAnimated:YES];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a &lt;code&gt;NSProgress&lt;/code&gt; object and MBProgressHUD will update itself when there is progress reported through that object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self.view animated:YES];&#xA;hud.mode = MBProgressHUDModeAnnularDeterminate;&#xA;hud.label.text = @&#34;Loading&#34;;&#xA;NSProgress *progress = [self doSomethingInBackgroundCompletion:^{&#xA;&#x9;[hud hideAnimated:YES];&#xA;}];&#xA;hud.progressObject = progress;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that UI updates, including calls to MBProgressHUD should always be done on the main thread.&lt;/p&gt; &#xA;&lt;p&gt;If you need to run your long-running task in the main thread, you should perform it with a slight delay, so UIKit will have enough time to update the UI (i.e., draw the HUD) before you block the main thread with your task.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[MBProgressHUD showHUDAddedTo:self.view animated:YES];&#xA;dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, 0.01 * NSEC_PER_SEC);&#xA;dispatch_after(popTime, dispatch_get_main_queue(), ^(void){&#xA;&#x9;// Do something...&#xA;&#x9;[MBProgressHUD hideHUDForView:self.view animated:YES];&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should be aware that any HUD updates issued inside the above block won&#39;t be displayed until the block completes.&lt;/p&gt; &#xA;&lt;p&gt;For more examples, including how to use MBProgressHUD with asynchronous operations such as NSURLConnection, take a look at the bundled demo project. Extensive API documentation is provided in the header file (MBProgressHUD.h).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is distributed under the terms and conditions of the &lt;a href=&#34;https://raw.githubusercontent.com/jdg/MBProgressHUD/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Change-log&lt;/h2&gt; &#xA;&lt;p&gt;A brief summary of each MBProgressHUD release can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/jdg/MBProgressHUD/master/CHANGELOG.mdown&#34;&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Privacy&lt;/h2&gt; &#xA;&lt;p&gt;MBProgressHUD does not collect any data. See &lt;a href=&#34;https://bukovinski.com/sdk-privacy/mbprogresshud/&#34;&gt;SDK Privacy Practices&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SVProgressHUD/SVProgressHUD</title>
    <updated>2022-06-02T02:18:51Z</updated>
    <id>tag:github.com,2022-06-02:/SVProgressHUD/SVProgressHUD</id>
    <link href="https://github.com/SVProgressHUD/SVProgressHUD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A clean and lightweight progress HUD for your iOS and tvOS app.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SVProgressHUD&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SVProgressHUD.svg?style=flat&#34; alt=&#34;Pod Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/SVProgressHUD.svg?style=flat&#34; alt=&#34;Pod Platform&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/l/SVProgressHUD.svg?style=flat&#34; alt=&#34;Pod License&#34;&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-green.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CocoaPods-compatible-green.svg?style=flat&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SVProgressHUD&lt;/code&gt; is a clean and easy-to-use HUD meant to display the progress of an ongoing task on iOS and tvOS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://f.cl.ly/items/2G1F1Z0M0k0h2U3V1p39/SVProgressHUD.gif&#34; alt=&#34;SVProgressHUD&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Try &lt;code&gt;SVProgressHUD&lt;/code&gt; on &lt;a href=&#34;https://appetize.io/app/p8r2cvy8kq74x7q7tjqf5gyatr&#34;&gt;Appetize.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;From CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Objective-C, which automates and simplifies the process of using 3rd-party libraries like &lt;code&gt;SVProgressHUD&lt;/code&gt; in your projects. First, add the following line to your &lt;a href=&#34;http://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;Podfile&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SVProgressHUD&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the latest features of &lt;code&gt;SVProgressHUD&lt;/code&gt; use normal external source dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SVProgressHUD&#39;, :git =&amp;gt; &#39;https://github.com/SVProgressHUD/SVProgressHUD.git&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This pulls from the &lt;code&gt;master&lt;/code&gt; branch directly.&lt;/p&gt; &#xA;&lt;p&gt;Second, install &lt;code&gt;SVProgressHUD&lt;/code&gt; into your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate &lt;code&gt;SVProgressHUD&lt;/code&gt; into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;SVProgressHUD/SVProgressHUD&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage bootstrap&lt;/code&gt; to build the framework in your repository&#39;s Carthage directory. You can then include it in your target&#39;s &lt;code&gt;carthage copy-frameworks&lt;/code&gt; build phase. For more information on this, please see &lt;a href=&#34;https://github.com/carthage/carthage#if-youre-building-for-ios-tvos-or-watchos&#34;&gt;Carthage&#39;s documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag the &lt;code&gt;SVProgressHUD/SVProgressHUD&lt;/code&gt; folder into your project.&lt;/li&gt; &#xA; &lt;li&gt;Take care that &lt;code&gt;SVProgressHUD.bundle&lt;/code&gt; is added to &lt;code&gt;Targets-&amp;gt;Build Phases-&amp;gt;Copy Bundle Resources&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add the &lt;strong&gt;QuartzCore&lt;/strong&gt; framework to your project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Swift&lt;/h2&gt; &#xA;&lt;p&gt;Even though &lt;code&gt;SVProgressHUD&lt;/code&gt; is written in Objective-C, it can be used in Swift with no hassle. If you use &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; add the following line to your &lt;a href=&#34;http://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;Podfile&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you added &lt;code&gt;SVProgressHUD&lt;/code&gt; manually, just add a &lt;a href=&#34;https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html&#34;&gt;bridging header&lt;/a&gt; file to your project with the &lt;code&gt;SVProgressHUD&lt;/code&gt; header included.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;(see sample Xcode project in &lt;code&gt;/Demo&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SVProgressHUD&lt;/code&gt; is created as a singleton (i.e. it doesn&#39;t need to be explicitly allocated and instantiated; you directly call &lt;code&gt;[SVProgressHUD method]&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;SVProgressHUD&lt;/code&gt; wisely! Only use it if you absolutely need to perform a task before taking the user forward. Bad use case examples: pull to refresh, infinite scrolling, sending message.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;SVProgressHUD&lt;/code&gt; in your app will usually look as simple as this (using Grand Central Dispatch):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[SVProgressHUD show];&#xA;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{&#xA;    // time-consuming task&#xA;    dispatch_async(dispatch_get_main_queue(), ^{&#xA;        [SVProgressHUD dismiss];&#xA;    });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Showing the HUD&lt;/h3&gt; &#xA;&lt;p&gt;You can show the status of indeterminate tasks using one of the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;+ (void)show;&#xA;+ (void)showWithStatus:(NSString*)string;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like the HUD to reflect the progress of a task, use one of these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;+ (void)showProgress:(CGFloat)progress;&#xA;+ (void)showProgress:(CGFloat)progress status:(NSString*)status;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dismissing the HUD&lt;/h3&gt; &#xA;&lt;p&gt;The HUD can be dismissed using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;+ (void)dismiss;&#xA;+ (void)dismissWithDelay:(NSTimeInterval)delay;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to stack HUDs, you can balance out every show call using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;+ (void)popActivity;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The HUD will get dismissed once the popActivity calls will match the number of show calls.&lt;/p&gt; &#xA;&lt;p&gt;Or show a confirmation glyph before before getting dismissed a little bit later. The display time depends on &lt;code&gt;minimumDismissTimeInterval&lt;/code&gt; and the length of the given string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;+ (void)showInfoWithStatus:(NSString*)string;&#xA;+ (void)showSuccessWithStatus:(NSString*)string;&#xA;+ (void)showErrorWithStatus:(NSString*)string;&#xA;+ (void)showImage:(UIImage*)image status:(NSString*)string;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SVProgressHUD&lt;/code&gt; can be customized via the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;+ (void)setDefaultStyle:(SVProgressHUDStyle)style;                  // default is SVProgressHUDStyleLight&#xA;+ (void)setDefaultMaskType:(SVProgressHUDMaskType)maskType;         // default is SVProgressHUDMaskTypeNone&#xA;+ (void)setDefaultAnimationType:(SVProgressHUDAnimationType)type;   // default is SVProgressHUDAnimationTypeFlat&#xA;+ (void)setContainerView:(UIView*)containerView;                    // default is window level&#xA;+ (void)setMinimumSize:(CGSize)minimumSize;                         // default is CGSizeZero, can be used to avoid resizing&#xA;+ (void)setRingThickness:(CGFloat)width;                            // default is 2 pt&#xA;+ (void)setRingRadius:(CGFloat)radius;                              // default is 18 pt&#xA;+ (void)setRingNoTextRadius:(CGFloat)radius;                        // default is 24 pt&#xA;+ (void)setCornerRadius:(CGFloat)cornerRadius;                      // default is 14 pt&#xA;+ (void)setBorderColor:(nonnull UIColor*)color;                     // default is nil&#xA;+ (void)setBorderWidth:(CGFloat)width;                              // default is 0&#xA;+ (void)setFont:(UIFont*)font;                                      // default is [UIFont preferredFontForTextStyle:UIFontTextStyleSubheadline]&#xA;+ (void)setForegroundColor:(UIColor*)color;                         // default is [UIColor blackColor], only used for SVProgressHUDStyleCustom&#xA;+ (void)setForegroundImageColor:(nullable UIColor*)color;           // default is the same as foregroundColor&#xA;+ (void)setBackgroundColor:(UIColor*)color;                         // default is [UIColor whiteColor], only used for SVProgressHUDStyleCustom&#xA;+ (void)setBackgroundLayerColor:(UIColor*)color;                    // default is [UIColor colorWithWhite:0 alpha:0.4], only used for SVProgressHUDMaskTypeCustom&#xA;+ (void)setImageViewSize:(CGSize)size;                              // default is 28x28 pt&#xA;+ (void)setShouldTintImages:(BOOL)shouldTintImages;                 // default is YES&#xA;+ (void)setInfoImage:(UIImage*)image;                               // default is the bundled info image provided by Freepik&#xA;+ (void)setSuccessImage:(UIImage*)image;                            // default is bundled success image from Freepik&#xA;+ (void)setErrorImage:(UIImage*)image;                              // default is bundled error image from Freepik&#xA;+ (void)setViewForExtension:(UIView*)view;                          // default is nil, only used if #define SV_APP_EXTENSIONS is set&#xA;+ (void)setGraceTimeInterval:(NSTimeInterval)interval;              // default is 0 seconds&#xA;+ (void)setMinimumDismissTimeInterval:(NSTimeInterval)interval;     // default is 5.0 seconds&#xA;+ (void)setMaximumDismissTimeInterval:(NSTimeInterval)interval;     // default is CGFLOAT_MAX&#xA;+ (void)setFadeInAnimationDuration:(NSTimeInterval)duration;        // default is 0.15 seconds&#xA;+ (void)setFadeOutAnimationDuration:(NSTimeInterval)duration;       // default is 0.15 seconds&#xA;+ (void)setMaxSupportedWindowLevel:(UIWindowLevel)windowLevel;      // default is UIWindowLevelNormal&#xA;+ (void)setHapticsEnabled:(BOOL)hapticsEnabled;                     // default is NO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally &lt;code&gt;SVProgressHUD&lt;/code&gt; supports the &lt;code&gt;UIAppearance&lt;/code&gt; protocol for most of the above methods.&lt;/p&gt; &#xA;&lt;h3&gt;Hint&lt;/h3&gt; &#xA;&lt;p&gt;As standard &lt;code&gt;SVProgressHUD&lt;/code&gt; offers two preconfigured styles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SVProgressHUDStyleLight&lt;/code&gt;: White background with black spinner and text&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SVProgressHUDStyleDark&lt;/code&gt;: Black background with white spinner and text&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to use custom colors use &lt;code&gt;setForegroundColor&lt;/code&gt; and &lt;code&gt;setBackgroundColor:&lt;/code&gt;. These implicitly set the HUD&#39;s style to &lt;code&gt;SVProgressHUDStyleCustom&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Haptic Feedback&lt;/h2&gt; &#xA;&lt;p&gt;For users with newer devices (starting with the iPhone 7), &lt;code&gt;SVProgressHUD&lt;/code&gt; can automatically trigger haptic feedback depending on which HUD is being displayed. The feedback maps as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;showSuccessWithStatus:&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;UINotificationFeedbackTypeSuccess&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;showInfoWithStatus:&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;UINotificationFeedbackTypeWarning&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;showErrorWithStatus:&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;UINotificationFeedbackTypeError&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To enable this functionality, use &lt;code&gt;setHapticsEnabled:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Users with devices prior to iPhone 7 will have no change in functionality.&lt;/p&gt; &#xA;&lt;h2&gt;Notifications&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SVProgressHUD&lt;/code&gt; posts four notifications via &lt;code&gt;NSNotificationCenter&lt;/code&gt; in response to being shown/dismissed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SVProgressHUDWillAppearNotification&lt;/code&gt; when the show animation starts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SVProgressHUDDidAppearNotification&lt;/code&gt; when the show animation completes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SVProgressHUDWillDisappearNotification&lt;/code&gt; when the dismiss animation starts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SVProgressHUDDidDisappearNotification&lt;/code&gt; when the dismiss animation completes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each notification passes a &lt;code&gt;userInfo&lt;/code&gt; dictionary holding the HUD&#39;s status string (if any), retrievable via &lt;code&gt;SVProgressHUDStatusUserInfoKey&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SVProgressHUD&lt;/code&gt; also posts &lt;code&gt;SVProgressHUDDidReceiveTouchEventNotification&lt;/code&gt; when users touch on the overall screen or &lt;code&gt;SVProgressHUDDidTouchDownInsideNotification&lt;/code&gt; when a user touches on the HUD directly. For this notifications &lt;code&gt;userInfo&lt;/code&gt; is not passed but the object parameter contains the &lt;code&gt;UIEvent&lt;/code&gt; that related to the touch.&lt;/p&gt; &#xA;&lt;h2&gt;App Extensions&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;SVProgressHUD&lt;/code&gt; in an App Extension, &lt;code&gt;#define SV_APP_EXTENSIONS&lt;/code&gt; to avoid using unavailable APIs. Additionally call &lt;code&gt;setViewForExtension:&lt;/code&gt; from your extensions view controller with &lt;code&gt;self.view&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to this project&lt;/h2&gt; &#xA;&lt;p&gt;If you have feature requests or bug reports, feel free to help out by sending pull requests or by &lt;a href=&#34;https://github.com/SVProgressHUD/SVProgressHUD/issues/new&#34;&gt;creating new issues&lt;/a&gt;. Please take a moment to review the guidelines written by &lt;a href=&#34;https://github.com/necolas&#34;&gt;Nicolas Gallagher&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/necolas/issue-guidelines/raw/master/CONTRIBUTING.md#bugs&#34;&gt;Bug reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/necolas/issue-guidelines/raw/master/CONTRIBUTING.md#features&#34;&gt;Feature requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/necolas/issue-guidelines/raw/master/CONTRIBUTING.md#pull-requests&#34;&gt;Pull requests&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SVProgressHUD&lt;/code&gt; is distributed under the terms and conditions of the &lt;a href=&#34;https://github.com/SVProgressHUD/SVProgressHUD/raw/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;. The success, error and info icons are made by &lt;a href=&#34;http://www.freepik.com&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;http://www.flaticon.com&#34;&gt;Flaticon&lt;/a&gt; and are licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;Creative Commons BY 3.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SVProgressHUD&lt;/code&gt; is brought to you by &lt;a href=&#34;http://samvermette.com&#34;&gt;Sam Vermette&lt;/a&gt;, &lt;a href=&#34;http://tiemerding.com&#34;&gt;Tobias Tiemerding&lt;/a&gt; and &lt;a href=&#34;https://github.com/SVProgressHUD/SVProgressHUD/contributors&#34;&gt;contributors to the project&lt;/a&gt;. If you&#39;re using &lt;code&gt;SVProgressHUD&lt;/code&gt; in your project, attribution would be very appreciated.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wix/react-native-navigation</title>
    <updated>2022-06-02T02:18:51Z</updated>
    <id>tag:github.com,2022-06-02:/wix/react-native-navigation</id>
    <link href="https://github.com/wix/react-native-navigation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A complete native navigation solution for React Native&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://vshymanskyy.github.io/StandWithUkraine&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg?sanitize=true&#34; alt=&#34;SWUbanner&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/wix/react-native-navigation/master/.logo.png&#34;&gt;&lt;br&gt; React Native Navigation &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/react-native-navigation&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dw/react-native-navigation.svg?style=flat-square&#34; alt=&#34;NPM downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/react-native-navigation&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-native-navigation/latest.svg?style=flat-square&#34; alt=&#34;NPM latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/react-native-navigation&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-native-navigation/snapshot.svg?style=flat-square&#34; alt=&#34;NPM snapshot version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jenkins-oss.wixpress.com/job/multi-react-native-navigation-master/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/s/http/jenkins-oss.wixpress.com:8080/job/multi-react-native-navigation-master.svg?style=flat-square&#34; alt=&#34;NPM snapshot version&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://twitter.com/reactnativenav&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/reactnativenav.svg?style=flat-square&amp;amp;colorA=1da1f2&amp;amp;colorB=&amp;amp;label=Follow%20us%20on%20Twitter&#34; alt=&#34;Follow on Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/DhkZjq2&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/242515947020222464.svg?color=%237289da&amp;amp;label=Chat%20on%20Discrd&amp;amp;style=flat-square&#34; alt=&#34;Chat on Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/tagged/wix-react-native-navigation&#34;&gt;&lt;img src=&#34;https://img.shields.io/stackexchange/stackoverflow/t/wix-react-native-navigation.svg?style=flat-square&#34; alt=&#34;StackExchange&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;React Native Navigation provides 100% native platform navigation on both iOS and Android for React Native apps. The JavaScript API is simple and cross-platform - just install it in your app and give your users the native feel they deserve. Ready to get started? Check out the &lt;a href=&#34;https://wix.github.io/react-native-navigation/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wix.github.io/react-native-navigation/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wix/react-native-navigation/raw/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/wix-react-native-navigation&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/DhkZjq2&#34;&gt;Chat with us&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wix.github.io/react-native-navigation/docs/meta-contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;Apps using React Native Navigation may target iOS 11 and Android 5.0 (API 21). You may use Windows, macOS or Linux as your development operating system.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;As &lt;code&gt;react-native-navigation&lt;/code&gt; is a native navigation library - integrating it into your app will require editing native files. Follow the installation guides in the &lt;a href=&#34;https://wix.github.io/react-native-navigation/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>