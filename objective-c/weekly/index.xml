<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-19T02:16:31Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Sunnyyoung/WeChatTweak-macOS</title>
    <updated>2022-06-19T02:16:31Z</updated>
    <id>tag:github.com,2022-06-19:/Sunnyyoung/WeChatTweak-macOS</id>
    <link href="https://github.com/Sunnyyoung/WeChatTweak-macOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A dynamic library tweak for WeChat macOS - 首款微信 macOS 客户端撤回拦截与多开 🔨&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WeChatTweak-macOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sunnyyoung/WeChatTweak-macOS/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Sunnyyoung/WeChatTweak-macOS/master/README-English.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/README-English-blue.svg?sanitize=true&#34; alt=&#34;README&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Sunnyyoung/WeChatTweak-macOS/master/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/README-%E4%B8%AD%E6%96%87-blue.svg?sanitize=true&#34; alt=&#34;README&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/wechattweak&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-WeChatTweak-brightgreen.svg?sanitize=true&#34; alt=&#34;README&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;微信 macOS 客户端增强 Tweak 动态库。&lt;/p&gt; &#xA;&lt;h2&gt;功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;阻止消息撤回 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;消息列表通知&lt;/li&gt; &#xA;   &lt;li&gt;系统通知&lt;/li&gt; &#xA;   &lt;li&gt;正常撤回自己发出的消息&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;客户端无限多开 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;右键 Dock icon 登录新的微信账号&lt;/li&gt; &#xA;   &lt;li&gt;命令行执行：&lt;code&gt;open -n /Applications/WeChat.app&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;消息处理增强 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;支持任意表情导出&lt;/li&gt; &#xA;   &lt;li&gt;支持二维码识别&lt;/li&gt; &#xA;   &lt;li&gt;支持右键直接复制链接&lt;/li&gt; &#xA;   &lt;li&gt;支持由系统默认浏览器直接打开&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;重新打开应用无需手机认证&lt;/del&gt;（官方已经支持）&lt;/li&gt; &#xA; &lt;li&gt;UI界面设置面板&lt;/li&gt; &#xA; &lt;li&gt;支持 Alfred workflow&lt;/li&gt; &#xA; &lt;li&gt;支持 Launchbar action&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;首次使用&lt;/strong&gt;安装 &lt;a href=&#34;https://github.com/Sunnyyoung/WeChatTweak-CLI&#34;&gt;WeChatTweak-CLI&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install sunnyyoung/repo/wechattweak-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装/更新/卸载 Tweak:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo wechattweak-cli install   # 安装/更新&#xA;$ sudo wechattweak-cli uninstall # 卸载&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;截图&lt;/h2&gt; &#xA;&lt;h3&gt;整体预览&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sunnyyoung/WeChatTweak-macOS/master/Screenshot/0x01.png&#34; alt=&#34;Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Alfred workflow&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sunnyyoung/WeChatTweak-macOS/master/Screenshot/0x02.png&#34; alt=&#34;Alfred&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;LaunchBar action&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sunnyyoung/WeChatTweak-macOS/master/Screenshot/0x03.png&#34; alt=&#34;LaunchBar&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;功能失效？&lt;br&gt; 请提交 &lt;strong&gt;issue&lt;/strong&gt; 然后等待，或提交 &lt;strong&gt;pull request&lt;/strong&gt; 一起发电。&lt;/li&gt; &#xA; &lt;li&gt;Issue 没有响应 or 回复？&lt;br&gt; 开源项目，用爱发电，耐心等。&lt;/li&gt; &#xA; &lt;li&gt;兼容旧版本客户端吗？&lt;br&gt; 不，为了降低维护成本和保证更新速度，默认只支持&lt;strong&gt;最新&lt;/strong&gt;版本客户端。&lt;/li&gt; &#xA; &lt;li&gt;会封号吗？&lt;br&gt; 在&lt;strong&gt;只使用该工具&lt;/strong&gt;的情况下&lt;strong&gt;没有&lt;/strong&gt;出现过封号/风险提示，若有&lt;strong&gt;使用过其他同类工具&lt;/strong&gt;则有可能会出现封号/风险提示，因此风险自负。&lt;/li&gt; &#xA; &lt;li&gt;安装出现 &lt;code&gt;codesign_allocate helper tool cannot be found or used&lt;/code&gt; 错误？&lt;br&gt; 该错误为系统问题，暂未清楚原因，一般情况下重新执行安装操作即可。&lt;/li&gt; &#xA; &lt;li&gt;安装完打开微信客户端提示 &lt;code&gt;没有权限打开应用程序&lt;/code&gt;？&lt;br&gt; 先卸载，再重新安装一次即可，如仍无法解决请重启电脑。实在搞不定的，到 &lt;a href=&#34;https://github.com/Sunnyyoung/WeChatTweak-macOS/issues?q=&#34;&gt;issues&lt;/a&gt; 里找找类似问题并尝试解决。&lt;/li&gt; &#xA; &lt;li&gt;理性讨论。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;参考&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.sunnyyoung.net/wei-xin-macos-ke-hu-duan-wu-xian-duo-kai-gong-neng-shi-jian/&#34;&gt;微信 macOS 客户端无限多开功能实践&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.sunnyyoung.net/wei-xin-macos-ke-hu-duan-lan-jie-che-hui-gong-neng-shi-jian/&#34;&gt;微信 macOS 客户端拦截撤回功能实践&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.sunnyyoung.net/rang-wei-xin-macos-ke-hu-duan-zhi-chi-alfred/&#34;&gt;让微信 macOS 客户端支持 Alfred&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;贡献者&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/Sunnyyoung/WeChatTweak-macOS/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;].&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Sunnyyoung/WeChatTweak-macOS/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/WeChatTweak-macOS/contributors.svg?width=890&amp;amp;button=false&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/Sunnyyoung/WeChatTweak-macOS/master/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FLEXTool/FLEX</title>
    <updated>2022-06-19T02:16:31Z</updated>
    <id>tag:github.com,2022-06-19:/FLEXTool/FLEX</id>
    <link href="https://github.com/FLEXTool/FLEX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An in-app debugging and exploration tool for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FLEX&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/?q=FLEX&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/FLEX.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Flipboard/FLEX/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/FLEX.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/FLEX.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ryanolsonk&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contact-@ryanolsonk-blue.svg?style=flat&#34; alt=&#34;Twitter: @ryanolsonk&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/Flipboard/FLEX&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Flipboard/FLEX.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;FLEX (Flipboard Explorer) is a set of in-app debugging and exploration tools for iOS development. When presented, FLEX shows a toolbar that lives in a window above your application. From this toolbar, you can view and modify nearly every piece of state in your running application.&lt;/p&gt; &#xA;&lt;img alt=&#34;Demo&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70185687-e842c800-16af-11ea-8ef9-9e071380a462.gif&#34;&gt; &#xA;&lt;h2&gt;Give Yourself Debugging Superpowers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inspect and modify views in the hierarchy.&lt;/li&gt; &#xA; &lt;li&gt;See the properties and ivars on any object.&lt;/li&gt; &#xA; &lt;li&gt;Dynamically modify many properties and ivars.&lt;/li&gt; &#xA; &lt;li&gt;Dynamically call instance and class methods.&lt;/li&gt; &#xA; &lt;li&gt;Observe detailed network request history with timing, headers, and full responses.&lt;/li&gt; &#xA; &lt;li&gt;Add your own simulator keyboard shortcuts.&lt;/li&gt; &#xA; &lt;li&gt;View system log messages (e.g. from &lt;code&gt;NSLog&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Access any live object via a scan of the heap.&lt;/li&gt; &#xA; &lt;li&gt;View the file system within your app&#39;s sandbox.&lt;/li&gt; &#xA; &lt;li&gt;Browse SQLite/Realm databases in the file system.&lt;/li&gt; &#xA; &lt;li&gt;Trigger 3D touch in the simulator using the control, shift, and command keys.&lt;/li&gt; &#xA; &lt;li&gt;Explore all classes in your app and linked systems frameworks (public and private).&lt;/li&gt; &#xA; &lt;li&gt;Quickly access useful objects such as &lt;code&gt;[UIApplication sharedApplication]&lt;/code&gt;, the app delegate, the root view controller on the key window, and more.&lt;/li&gt; &#xA; &lt;li&gt;Dynamically view and modify &lt;code&gt;NSUserDefaults&lt;/code&gt; values.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unlike many other debugging tools, FLEX runs entirely inside your app, so you don&#39;t need to be connected to LLDB/Xcode or a different remote debugging server. It works well in the simulator and on physical devices.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In the iOS simulator, you can use keyboard shortcuts to activate FLEX. &lt;code&gt;f&lt;/code&gt; will toggle the FLEX toolbar. Hit the &lt;code&gt;?&lt;/code&gt; key for a full list of shortcuts. You can also show FLEX programmatically:&lt;/p&gt; &#xA;&lt;p&gt;Short version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Objective-C&#xA;[[FLEXManager sharedManager] showExplorer];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Swift&#xA;FLEXManager.shared.showExplorer()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More complete version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#if DEBUG&#xA;#import &#34;FLEXManager.h&#34;&#xA;#endif&#xA;&#xA;...&#xA;&#xA;- (void)handleSixFingerQuadrupleTap:(UITapGestureRecognizer *)tapRecognizer&#xA;{&#xA;#if DEBUG&#xA;    if (tapRecognizer.state == UIGestureRecognizerStateRecognized) {&#xA;        // This could also live in a handler for a keyboard shortcut, debug menu item, etc.&#xA;        [[FLEXManager sharedManager] showExplorer];&#xA;    }&#xA;#endif&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Aside: tvOS&lt;/h4&gt; &#xA;&lt;p&gt;FLEX itself does not support tvOS out of the box. However, others have taken it upon themselves to port FLEX to tvOS. If you need tvOS support, seek out one of these forks. &lt;a href=&#34;https://github.com/lechium/FLEX/tree/tvos&#34;&gt;Here is one such fork.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feature Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Modify Views&lt;/h3&gt; &#xA;&lt;p&gt;Once a view is selected, you can tap on the info bar below the toolbar to present more details about the view. From there, you can modify properties and call methods.&lt;/p&gt; &#xA;&lt;img alt=&#34;Modify Views&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271816-c5c2b480-176c-11ea-8bf4-2c5a755bc392.gif&#34;&gt; &#xA;&lt;h3&gt;Network History&lt;/h3&gt; &#xA;&lt;p&gt;When enabled, network debugging allows you to view all requests made using NSURLConnection or NSURLSession. Settings allow you to adjust what kind of response bodies get cached and the maximum size limit of the response cache. You can choose to have network debugging enabled automatically on app launch. This setting is persisted across launches.&lt;/p&gt; &#xA;&lt;img alt=&#34;Network History&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271876-e5f27380-176c-11ea-98ef-24170205b706.gif&#34;&gt; &#xA;&lt;h3&gt;All Objects on the Heap&lt;/h3&gt; &#xA;&lt;p&gt;FLEX queries malloc for all the live allocated memory blocks and searches for ones that look like objects. You can see everything from here.&lt;/p&gt; &#xA;&lt;img alt=&#34;Heap/Live Objects Explorer&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271850-d83cee00-176c-11ea-9750-ee3a479c6769.gif&#34;&gt; &#xA;&lt;h3&gt;Explore-at-address&lt;/h3&gt; &#xA;&lt;p&gt;If you get your hands on an arbitrary address, you can try explore the object at that address, and FLEX will open it if it can verify the address points to a valid object. If FLEX isn&#39;t sure, it&#39;ll warn you and refuse to dereference the pointer. If you know better, however, you can choose to explore it anyway by choosing &#34;Unsafe Explore&#34;&lt;/p&gt; &#xA;&lt;img alt=&#34;Address Explorer&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271798-bb081f80-176c-11ea-806d-9d74ac293641.gif&#34;&gt; &#xA;&lt;h3&gt;Simulator Keyboard Shortcuts&lt;/h3&gt; &#xA;&lt;p&gt;Default keyboard shortcuts allow you to activate the FLEX tools, scroll with the arrow keys, and close modals using the escape key. You can also add custom keyboard shortcuts via &lt;code&gt;-[FLEXManager registerSimulatorShortcutWithKey:modifiers:action:description]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;img alt=&#34;Simulator Keyboard Shortcuts&#34; width=&#34;40%&#34; height=&#34;40%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70272984-d3793980-176e-11ea-89a2-66d187d71b4c.png&#34;&gt; &#xA;&lt;h3&gt;File Browser&lt;/h3&gt; &#xA;&lt;p&gt;View the file system within your app&#39;s bundle or sandbox container. FLEX shows file sizes, image previews, and pretty prints &lt;code&gt;.json&lt;/code&gt; and &lt;code&gt;.plist&lt;/code&gt; files. You can rename and delete files and folders. You can &#34;share&#34; any file if you want to inspect them outside of your app.&lt;/p&gt; &#xA;&lt;img alt=&#34;File Browser&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271831-d115e000-176c-11ea-8078-ada291f980f3.gif&#34;&gt; &#xA;&lt;h3&gt;SQLite Browser&lt;/h3&gt; &#xA;&lt;p&gt;SQLite database files (with either &lt;code&gt;.db&lt;/code&gt; or &lt;code&gt;.sqlite&lt;/code&gt; extensions), or &lt;a href=&#34;https://realm.io&#34;&gt;Realm&lt;/a&gt; database files can be explored using FLEX. The database browser lets you view all tables, and individual tables can be sorted by tapping column headers.&lt;/p&gt; &#xA;&lt;img alt=&#34;SQLite Browser&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271881-ea1e9100-176c-11ea-9a42-01618311c869.gif&#34;&gt; &#xA;&lt;h3&gt;3D Touch in the Simulator&lt;/h3&gt; &#xA;&lt;p&gt;Using a combination of the command, control, and shift keys, you can simulate different levels of 3D touch pressure in the simulator. Each key contributes 1/3 of maximum possible force. Note that you need to move the touch slightly to get pressure updates.&lt;/p&gt; &#xA;&lt;img alt=&#34;Simulator 3D Touch&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://cloud.githubusercontent.com/assets/1422245/11786615/5d4ef96c-a23c-11e5-975e-67275341e439.gif&#34;&gt; &#xA;&lt;h3&gt;Explore Loaded Libraries&lt;/h3&gt; &#xA;&lt;p&gt;Go digging for all things public and private. To learn more about a class, you can create an instance of it and explore its default state. You can also type in a class name to jump to that class directly if you know which class you&#39;re looking for.&lt;/p&gt; &#xA;&lt;img alt=&#34;Loaded Libraries Exploration&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271868-dffc9280-176c-11ea-8704-a0c05b75cc5f.gif&#34;&gt; &#xA;&lt;h3&gt;NSUserDefaults Editing&lt;/h3&gt; &#xA;&lt;p&gt;FLEX allows you to edit defaults that are any combination of strings, numbers, arrays, and dictionaries. The input is parsed as &lt;code&gt;JSON&lt;/code&gt;. If other kinds of objects are set for a defaults key (i.e. &lt;code&gt;NSDate&lt;/code&gt;), you can view them but not edit them.&lt;/p&gt; &#xA;&lt;img alt=&#34;NSUserDefaults Editing&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271889-edb21800-176c-11ea-92b4-71e07d2b6ce7.gif&#34;&gt; &#xA;&lt;h3&gt;Learning from Other Apps&lt;/h3&gt; &#xA;&lt;p&gt;The code injection is left as an exercise for the reader. &lt;span&gt;😇&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img alt=&#34;Springboard Lock Screen&#34; width=&#34;25%&#34; height=&#34;25%&#34; src=&#34;https://engineering.flipboard.com/assets/flex/flex-readme-reverse-1.png&#34;&gt; &lt;img alt=&#34;Springboard Home Screen&#34; width=&#34;25%&#34; height=&#34;25%&#34; src=&#34;https://engineering.flipboard.com/assets/flex/flex-readme-reverse-2.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;FLEX requires an app that targets iOS 9 or higher. To run the Example project, open a Terminal window in the Example/ folder and run &lt;code&gt;pod install&lt;/code&gt;, then open the generated workspace.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;FLEX is available on &lt;a href=&#34;https://cocoapods.org/pods/FLEX&#34;&gt;CocoaPods&lt;/a&gt;. Simply add the following line to your podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FLEX&#39;, :configurations =&amp;gt; [&#39;Debug&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;flipboard/FLEX&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Buck&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Buck, you may want to silence some of the warnings emitted by FLEX. You will need to build FLEX as an &lt;code&gt;apple_library&lt;/code&gt; and pass the &lt;code&gt;-Wno-unsupported-availability-guard&lt;/code&gt; flag, as well as the other warning flags below to disable any other warnings FLEX may have.&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Manually add the files in &lt;code&gt;Classes/&lt;/code&gt; to your Xcode project, or just drag in the entire &lt;code&gt;FLEX/&lt;/code&gt; folder. Be sure to exclude FLEX from &lt;code&gt;Release&lt;/code&gt; builds or your app will be rejected.&lt;/p&gt; &#xA;&lt;h5&gt;Silencing warnings&lt;/h5&gt; &#xA;&lt;p&gt;Add the following flags to to &lt;strong&gt;Other Warnings Flags&lt;/strong&gt; in &lt;strong&gt;Build Settings:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-Wno-deprecated-declarations&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Wno-strict-prototypes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Wno-unsupported-availability-guard&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Include the dependency in the &lt;code&gt;depdendencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/FLEXTool/FLEX.git&#34;, .upToNextMajor(from: &#34;4.3.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, include the library in your target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;.target(&#xA;    name: &#34;YourDependency&#34;,&#xA;    dependencies: [&#xA;        &#34;FLEX&#34;&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Excluding FLEX from Release (App Store) Builds&lt;/h2&gt; &#xA;&lt;p&gt;FLEX makes it easy to explore the internals of your app, so it is not something you should expose to your users. Fortunately, it is easy to exclude FLEX files from Release builds. The strategies differ depending on how you integrated FLEX in your project, and are described below.&lt;/p&gt; &#xA;&lt;p&gt;Wrap the places in your code where you integrate FLEX with an &lt;code&gt;#if DEBUG&lt;/code&gt; statement to ensure the tool is only accessible in your &lt;code&gt;Debug&lt;/code&gt; builds and to avoid errors in your &lt;code&gt;Release&lt;/code&gt; builds. For more help with integrating FLEX, see the example project.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;CocoaPods automatically excludes FLEX from release builds if you only specify the Debug configuration for FLEX in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FLEX&#39;, :configurations =&amp;gt; [&#39;Debug&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Do NOT add &lt;code&gt;FLEX.framework&lt;/code&gt; to the embedded binaries of your target, as it would otherwise be included in all builds (therefore also in release ones).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Instead, add &lt;code&gt;$(PROJECT_DIR)/Carthage/Build/iOS&lt;/code&gt; to your target &lt;em&gt;Framework Search Paths&lt;/em&gt; (this setting might already be present if you already included other frameworks with Carthage). This makes it possible to import the FLEX framework from your source files. It does not harm if this setting is added for all configurations, but it should at least be added for the debug one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a &lt;em&gt;Run Script Phase&lt;/em&gt; to your target (inserting it after the existing &lt;code&gt;Link Binary with Libraries&lt;/code&gt; phase, for example), and which will embed &lt;code&gt;FLEX.framework&lt;/code&gt; in debug builds only:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;if [ &#34;$CONFIGURATION&#34; == &#34;Debug&#34; ]; then&#xA;  /usr/local/bin/carthage copy-frameworks&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, add &lt;code&gt;$(SRCROOT)/Carthage/Build/iOS/FLEX.framework&lt;/code&gt; as input file of this script phase.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;75%&#34; height=&#34;75%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70274062-0d4b3f80-1771-11ea-94ea-ca7e7b5ca244.jpg&#34;&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;In Xcode, navigate to &lt;code&gt;Build Settings &amp;gt; Build Options &amp;gt; Excluded Source File Names&lt;/code&gt;. For your &lt;code&gt;Release&lt;/code&gt; configuration, set it to &lt;code&gt;FLEX.o&lt;/code&gt; like this to exclude all files with the &lt;code&gt;FLEX&lt;/code&gt; prefix:&lt;/p&gt; &#xA;&lt;img width=&#34;75%&#34; height=&#34;75%&#34; src=&#34;https://user-images.githubusercontent.com/1234765/98673373-8545c080-2357-11eb-9587-0743998e23ba.png&#34;&gt; &#xA;&lt;h3&gt;FLEX files added manually to a project&lt;/h3&gt; &#xA;&lt;p&gt;In Xcode, navigate to &lt;code&gt;Build Settings &amp;gt; Build Options &amp;gt; Excluded Source File Names&lt;/code&gt;. For your &lt;code&gt;Release&lt;/code&gt; configuration, set it to &lt;code&gt;FLEX*&lt;/code&gt; like this to exclude all files with the &lt;code&gt;FLEX&lt;/code&gt; prefix:&lt;/p&gt; &#xA;&lt;img width=&#34;75%&#34; height=&#34;75%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70281926-e21d1c00-1781-11ea-92eb-aee340791da8.png&#34;&gt; &#xA;&lt;h2&gt;Additional Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When setting fields of type &lt;code&gt;id&lt;/code&gt; or values in &lt;code&gt;NSUserDefaults&lt;/code&gt;, FLEX attempts to parse the input string as &lt;code&gt;JSON&lt;/code&gt;. This allows you to use a combination of strings, numbers, arrays, and dictionaries. If you want to set a string value, it must be wrapped in quotes. For ivars or properties that are explicitly typed as &lt;code&gt;NSStrings&lt;/code&gt;, quotes are not required.&lt;/li&gt; &#xA; &lt;li&gt;You may want to disable the exception breakpoint while using FLEX. Certain functions that FLEX uses throw exceptions when they get input they can&#39;t handle (i.e. &lt;code&gt;NSGetSizeAndAlignment()&lt;/code&gt;). FLEX catches these to avoid crashing, but your breakpoint will get hit if it is active.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks &amp;amp; Credits&lt;/h2&gt; &#xA;&lt;p&gt;FLEX builds on ideas and inspiration from open source tools that came before it. The following resources have been particularly helpful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NSExceptional/MirrorKit&#34;&gt;MirrorKit&lt;/a&gt;: an Objective-C wrapper around the Objective-C runtime.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domesticcatsoftware/DCIntrospect&#34;&gt;DCIntrospect&lt;/a&gt;: view hierarchy debugging for the iOS simulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/PonyDebugger&#34;&gt;PonyDebugger&lt;/a&gt;: network, core data, and view hierarchy debugging using the Chrome Developer Tools interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mikeash.com/pyblog/&#34;&gt;Mike Ash&lt;/a&gt;: well written, informative blog posts on all things obj-c and more. The links below were very useful for this project:&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikeash/MAObjCRuntime&#34;&gt;MAObjCRuntime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mikeash.com/pyblog/friday-qa-2013-02-08-lets-build-key-value-coding.html&#34;&gt;Let&#39;s Build Key Value Coding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mikeash.com/pyblog/friday-qa-2013-09-27-arm64-and-you.html&#34;&gt;ARM64 and You&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/heardrwt/RHObjectiveBeagle&#34;&gt;RHObjectiveBeagle&lt;/a&gt;: a tool for scanning the heap for live objects. It should be noted that the source code of RHObjectiveBeagle was not consulted due to licensing concerns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.opensource.apple.com/source/lldb/lldb-179.1/examples/darwin/heap_find/heap/heap_find.cpp&#34;&gt;heap_find.cpp&lt;/a&gt;: an example of enumerating malloc blocks for finding objects on the heap.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/samdmarshall/17f4e66b5e2e579fd396&#34;&gt;Gist&lt;/a&gt; from &lt;a href=&#34;https://github.com/samdmarshall&#34;&gt;@samdmarshall&lt;/a&gt;: another example of enumerating malloc blocks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sealiesoftware.com/blog/archive/2013/09/24/objc_explain_Non-pointer_isa.html&#34;&gt;Non-pointer isa&lt;/a&gt;: an explanation of changes to the isa field on iOS for ARM64 and mention of the useful &lt;code&gt;objc_debug_isa_class_mask&lt;/code&gt; variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicklockwood/GZIP&#34;&gt;GZIP&lt;/a&gt;: A library for compressing/decompressing data on iOS using libz.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ccgus/fmdb&#34;&gt;FMDB&lt;/a&gt;: This is an Objective-C wrapper around SQLite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/indragiek/InAppViewDebugger&#34;&gt;InAppViewDebugger&lt;/a&gt;: The inspiration and reference implementation for FLEX 4&#39;s 3D view explorer, by @indragiek.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://github.com/Flipboard/FLEX/raw/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift runtime introspection (swift classes, swift objects on the heap, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Add new NSUserDefault key/value pairs on the fly&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Instagram/IGListKit</title>
    <updated>2022-06-19T02:16:31Z</updated>
    <id>tag:github.com,2022-06-19:/Instagram/IGListKit</id>
    <link href="https://github.com/Instagram/IGListKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A data-driven UICollectionView framework for building fast and flexible lists.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Instagram/IGListKit/master/Resources/logo-animation.gif&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://travis-ci.org/Instagram/IGListKit&#34;&gt; &lt;img src=&#34;https://travis-ci.org/Instagram/IGListKit.svg?branch=master&amp;amp;style=flat&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/Instagram/IGListKit?branch=master&#34;&gt; &lt;img src=&#34;https://coveralls.io/repos/github/Instagram/IGListKit/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/IGListKit&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/v/IGListKit.svg?style=flat&#34; alt=&#34;Pods Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://instagram.github.io/IGListKit/&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/IGListKit.svg?style=flat&#34; alt=&#34;Platforms&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;A data-driven &lt;code&gt;UICollectionView&lt;/code&gt; framework for building fast and flexible lists.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Main Features&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🙅&lt;/td&gt; &#xA;   &lt;td&gt;Never call &lt;code&gt;performBatchUpdates(_:, completion:)&lt;/code&gt; or &lt;code&gt;reloadData()&lt;/code&gt; again&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🏠&lt;/td&gt; &#xA;   &lt;td&gt;Better architecture with reusable cells and components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔠&lt;/td&gt; &#xA;   &lt;td&gt;Create collections with multiple data types&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔑&lt;/td&gt; &#xA;   &lt;td&gt;Decoupled diffing algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Fully unit tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔍&lt;/td&gt; &#xA;   &lt;td&gt;Customize your diffing behavior for your models&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📱&lt;/td&gt; &#xA;   &lt;td&gt;Simply &lt;code&gt;UICollectionView&lt;/code&gt; at its core&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🚀&lt;/td&gt; &#xA;   &lt;td&gt;Extendable API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🐦&lt;/td&gt; &#xA;   &lt;td&gt;Written in Objective-C with full Swift interop support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;IGListKit&lt;/code&gt; is built and maintained with ❤️ by &lt;a href=&#34;https://engineering.instagram.com/&#34;&gt;Instagram engineering&lt;/a&gt;. We use the open source version &lt;code&gt;master&lt;/code&gt; branch in the Instagram app.&lt;/p&gt; &#xA;&lt;h2&gt;Multilingual translation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Instagram/IGListKit/main/README.zh.md&#34;&gt;Chinese README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 9.0+&lt;/li&gt; &#xA; &lt;li&gt;iOS 9.0+&lt;/li&gt; &#xA; &lt;li&gt;tvOS 9.0+&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.11+ &lt;em&gt;(diffing algorithm components only)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interoperability with Swift 3.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;The preferred installation method is with &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. Add the following to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;IGListKit&#39;, &#39;~&amp;gt; 4.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, add the following to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;Instagram/IGListKit&#34; ~&amp;gt; 4.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To integrate using Xcode:&#xA;&#xA;File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency&#xA;&#xA;Enter package URL: https://github.com/Instagram/IGListKit, and select the latest release.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For advanced usage, see our &lt;a href=&#34;https://instagram.github.io/IGListKit/installation.html&#34;&gt;Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/Instagram/IGListKit.git&#xA;$ cd IGListKit/&#xA;$ ./scripts/setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://instagram.github.io/IGListKit/getting-started.html&#34;&gt;Getting Started guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ray Wenderlich&#39;s &lt;a href=&#34;https://www.raywenderlich.com/147162/iglistkit-tutorial-better-uicollectionviews&#34;&gt;IGListKit Tutorial: Better UICollectionViews&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://github.com/Instagram/IGListKit/tree/master/Examples&#34;&gt;example projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ryan Nystrom&#39;s &lt;a href=&#34;https://academy.realm.io/posts/tryswift-ryan-nystrom-refactoring-at-scale-lessons-learned-rewriting-instagram-feed/&#34;&gt;talk at try! Swift NYC&lt;/a&gt;(Note: this talk was for an earlier version. Some APIs have changed.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/cocoaacademymag/iglistkit-migrating-an-uitableview-to-iglistkitcollectionview-65a30cf9bac9&#34;&gt;Migrating an UITableView to IGListCollectionView&lt;/a&gt;, by Rodrigo Cavalcante&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://overflow.buffer.com/2017/04/10/keeping-data-fresh-buffer-ios-asyncdisplaykit-iglistkit-pusher/&#34;&gt;Keeping data fresh in Buffer for iOS with AsyncDisplayKit, IGListKit &amp;amp; Pusher&lt;/a&gt;, Andy Yates, Buffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find &lt;a href=&#34;https://instagram.github.io/IGListKit&#34;&gt;the docs here&lt;/a&gt;. Documentation is generated with &lt;a href=&#34;https://github.com/realm/jazzy&#34;&gt;jazzy&lt;/a&gt; and hosted on &lt;a href=&#34;https://pages.github.com&#34;&gt;GitHub-Pages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To regenerate docs, run &lt;code&gt;./scripts/build_docs.sh&lt;/code&gt; from the root directory in the repo.&lt;/p&gt; &#xA;&lt;h2&gt;Vision&lt;/h2&gt; &#xA;&lt;p&gt;For the long-term goals and &#34;vision&#34; of &lt;code&gt;IGListKit&lt;/code&gt;, please read our &lt;a href=&#34;https://github.com/Instagram/IGListKit/raw/master/Guides/VISION.md&#34;&gt;Vision&lt;/a&gt; doc.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/Instagram/IGListKit/raw/master/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; file for how to help. At Instagram, we sync the open source version of &lt;code&gt;IGListKit&lt;/code&gt; daily, so we&#39;re always testing the latest changes. But that requires all changes be thoroughly tested and follow our style guide.&lt;/p&gt; &#xA;&lt;p&gt;We have a set of &lt;a href=&#34;https://github.com/Instagram/IGListKit/issues?q=is%3Aissue+is%3Aopen+label%3Astarter-task&#34;&gt;starter tasks&lt;/a&gt; that are great for beginners to jump in on and start contributing.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;IGListKit&lt;/code&gt; is &lt;a href=&#34;https://raw.githubusercontent.com/Instagram/IGListKit/main/LICENSE.md&#34;&gt;MIT-licensed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The files in the &lt;code&gt;/Examples/&lt;/code&gt; directory are licensed under a separate license as specified in each file. Documentation is licensed &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC-BY-4.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>