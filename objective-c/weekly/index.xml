<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-03T01:48:53Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>salesforce-marketingcloud/MarketingCloudSDK-iOS</title>
    <updated>2024-03-03T01:48:53Z</updated>
    <id>tag:github.com,2024-03-03:/salesforce-marketingcloud/MarketingCloudSDK-iOS</id>
    <link href="https://github.com/salesforce-marketingcloud/MarketingCloudSDK-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Marketing Cloud MobilePush SDK Framework &amp; LearningApp Example Application&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MarketingCloudSDK - MobilePush SDK for iOS&lt;/h1&gt; &#xA;&lt;p&gt;============================================&lt;/p&gt; &#xA;&lt;p&gt;This is the git repository for the Salesforce Marketing Cloud MobilePush SDK for iOS.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Release History, Documentation, and Apple docs are located at &lt;a href=&#34;http://salesforce-marketingcloud.github.io/MarketingCloudSDK-iOS/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For questions regarding the SDK or any issues you would like to report, please contact your Salesforce Marketing Cloud support team or post a question on &lt;a href=&#34;http://salesforce.stackexchange.com/&#34; target=&#34;_blank&#34;&gt;Salesforce StackExchange&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ibireme/YYModel</title>
    <updated>2024-03-03T01:48:53Z</updated>
    <id>tag:github.com,2024-03-03:/ibireme/YYModel</id>
    <link href="https://github.com/ibireme/YYModel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High performance model framework for iOS/OSX.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;YYModel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibireme/YYModel/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green.svg?style=flat&#34; alt=&#34;License MIT&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;http://cocoapods.org/pods/YYModel&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/YYModel.svg?style=flat&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;http://cocoadocs.org/docsets/YYModel&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/YYModel.svg?style=flat&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://travis-ci.org/ibireme/YYModel&#34;&gt;&lt;img src=&#34;https://travis-ci.org/ibireme/YYModel.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://codecov.io/github/ibireme/YYModel?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/ibireme/YYModel/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;High performance model framework for iOS/OSX.&lt;br&gt; (It&#39;s a component of &lt;a href=&#34;https://github.com/ibireme/YYKit&#34;&gt;YYKit&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;p&gt;Time cost (process GithubUser 10000 times on iPhone 6):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/ibireme/YYModel/master/Benchmark/Result.png&#34; alt=&#34;Benchmark result&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;Benchmark/ModelBenchmark.xcodeproj&lt;/code&gt; for more benchmark case.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;High performance&lt;/strong&gt;: The conversion performance is close to handwriting code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatic type conversion&lt;/strong&gt;: The object types can be automatically converted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type Safe&lt;/strong&gt;: All data types will be verified to ensure type-safe during the conversion process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Non-intrusive&lt;/strong&gt;: There is no need to make the model class inherit from other base class.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lightwight&lt;/strong&gt;: This library contains only 5 files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docs and unit testing&lt;/strong&gt;: 100% docs coverage, 99.6% code coverage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h3&gt;Simple model json convert&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON:&#xA;{&#xA;    &#34;uid&#34;:123456,&#xA;    &#34;name&#34;:&#34;Harry&#34;,&#xA;    &#34;created&#34;:&#34;1965-07-31T00:00:00+0000&#34;&#xA;}&#xA;&#xA;// Model:&#xA;@interface User : NSObject&#xA;@property UInt64 uid;&#xA;@property NSString *name;&#xA;@property NSDate *created;&#xA;@end&#xA;@implementation User&#xA;@end&#xA;&#xA;&#x9;&#xA;// Convert json to model:&#xA;User *user = [User yy_modelWithJSON:json];&#xA;&#x9;&#xA;// Convert model to json:&#xA;NSDictionary *json = [user yy_modelToJSONObject];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the type of an object in JSON/Dictionary cannot be matched to the property of the model, the following automatic conversion is performed. If the automatic conversion failed, the value will be ignored.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;JSON/Dictionary&lt;/th&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSString&lt;/td&gt; &#xA;   &lt;td&gt;NSNumber,NSURL,SEL,Class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSNumber&lt;/td&gt; &#xA;   &lt;td&gt;NSString&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSString/NSNumber&lt;/td&gt; &#xA;   &lt;td&gt;C number (BOOL,int,float,NSUInteger,UInt64,...)&lt;br&gt; NaN and Inf will be ignored&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSString&lt;/td&gt; &#xA;   &lt;td&gt;NSDate parsed with these formats:&lt;br&gt; yyyy-MM-dd&lt;br&gt; yyyy-MM-dd HH:mm:ss&lt;br&gt; yyyy-MM-dd&#39;T&#39;HH:mm:ss&lt;br&gt; yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&lt;br&gt; EEE MMM dd HH:mm:ss Z yyyy &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSDate&lt;/td&gt; &#xA;   &lt;td&gt;NSString formatted with ISO8601:&lt;br&gt; &#34;YYYY-MM-dd&#39;T&#39;HH:mm:ssZ&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSValue&lt;/td&gt; &#xA;   &lt;td&gt;struct (CGRect,CGSize,...)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSNull&lt;/td&gt; &#xA;   &lt;td&gt;nil,0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;no&#34;,&#34;false&#34;,...&lt;/td&gt; &#xA;   &lt;td&gt;@(NO),0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;yes&#34;,&#34;true&#34;,...&lt;/td&gt; &#xA;   &lt;td&gt;@(YES),1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Match model property to different JSON key&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON:&#xA;{&#xA;    &#34;n&#34;:&#34;Harry Pottery&#34;,&#xA;    &#34;p&#34;: 256,&#xA;    &#34;ext&#34; : {&#xA;        &#34;desc&#34; : &#34;A book written by J.K.Rowing.&#34;&#xA;    },&#xA;    &#34;ID&#34; : 100010&#xA;}&#xA;&#xA;// Model:&#xA;@interface Book : NSObject&#xA;@property NSString *name;&#xA;@property NSInteger page;&#xA;@property NSString *desc;&#xA;@property NSString *bookID;&#xA;@end&#xA;@implementation Book&#xA;+ (NSDictionary *)modelCustomPropertyMapper {&#xA;    return @{@&#34;name&#34; : @&#34;n&#34;,&#xA;             @&#34;page&#34; : @&#34;p&#34;,&#xA;             @&#34;desc&#34; : @&#34;ext.desc&#34;,&#xA;             @&#34;bookID&#34; : @[@&#34;id&#34;,@&#34;ID&#34;,@&#34;book_id&#34;]};&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can map a json key (key path) or an array of json key (key path) to one or multiple property name. If there&#39;s no mapper for a property, it will use the property&#39;s name as default.&lt;/p&gt; &#xA;&lt;h3&gt;Nested model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON&#xA;{&#xA;    &#34;author&#34;:{&#xA;        &#34;name&#34;:&#34;J.K.Rowling&#34;,&#xA;        &#34;birthday&#34;:&#34;1965-07-31T00:00:00+0000&#34;&#xA;    },&#xA;    &#34;name&#34;:&#34;Harry Potter&#34;,&#xA;    &#34;pages&#34;:256&#xA;}&#xA;&#xA;// Model: (no need to do anything)&#xA;@interface Author : NSObject&#xA;@property NSString *name;&#xA;@property NSDate *birthday;&#xA;@end&#xA;@implementation Author&#xA;@end&#xA;&#x9;&#xA;@interface Book : NSObject&#xA;@property NSString *name;&#xA;@property NSUInteger pages;&#xA;@property Author *author;&#xA;@end&#xA;@implementation Book&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Container property&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@class Shadow, Border, Attachment;&#xA;&#xA;@interface Attributes&#xA;@property NSString *name;&#xA;@property NSArray *shadows; //Array&amp;lt;Shadow&amp;gt;&#xA;@property NSSet *borders; //Set&amp;lt;Border&amp;gt;&#xA;@property NSMutableDictionary *attachments; //Dict&amp;lt;NSString,Attachment&amp;gt;&#xA;@end&#xA;&#xA;@implementation Attributes&#xA;+ (NSDictionary *)modelContainerPropertyGenericClass {&#xA;&#x9;// value should be Class or Class name.&#xA;    return @{@&#34;shadows&#34; : [Shadow class],&#xA;             @&#34;borders&#34; : Border.class,&#xA;             @&#34;attachments&#34; : @&#34;Attachment&#34; };&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Whitelist and blacklist&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface User&#xA;@property NSString *name;&#xA;@property NSUInteger age;&#xA;@end&#xA;&#x9;&#xA;@implementation Attributes&#xA;+ (NSArray *)modelPropertyBlacklist {&#xA;    return @[@&#34;test1&#34;, @&#34;test2&#34;];&#xA;}&#xA;+ (NSArray *)modelPropertyWhitelist {&#xA;    return @[@&#34;name&#34;];&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data validate and custom transform&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON:&#xA;{&#xA;&#x9;&#34;name&#34;:&#34;Harry&#34;,&#xA;&#x9;&#34;timestamp&#34; : 1445534567&#xA;}&#xA;&#x9;&#xA;// Model:&#xA;@interface User&#xA;@property NSString *name;&#xA;@property NSDate *createdAt;&#xA;@end&#xA;&#xA;@implementation User&#xA;- (BOOL)modelCustomTransformFromDictionary:(NSDictionary *)dic {&#xA;    NSNumber *timestamp = dic[@&#34;timestamp&#34;];&#xA;    if (![timestamp isKindOfClass:[NSNumber class]]) return NO;&#xA;    _createdAt = [NSDate dateWithTimeIntervalSince1970:timestamp.floatValue];&#xA;    return YES;&#xA;}&#xA;- (BOOL)modelCustomTransformToDictionary:(NSMutableDictionary *)dic {&#xA;    if (!_createdAt) return NO;&#xA;    dic[@&#34;timestamp&#34;] = @(n.timeIntervalSince1970);&#xA;    return YES;&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Coding/Copying/hash/equal/description&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface YYShadow :NSObject &amp;lt;NSCoding, NSCopying&amp;gt;&#xA;@property (nonatomic, copy) NSString *name;&#xA;@property (nonatomic, assign) CGSize size;&#xA;@end&#xA;&#xA;@implementation YYShadow&#xA;- (void)encodeWithCoder:(NSCoder *)aCoder { [self yy_modelEncodeWithCoder:aCoder]; }&#xA;- (id)initWithCoder:(NSCoder *)aDecoder { self = [super init]; return [self yy_modelInitWithCoder:aDecoder]; }&#xA;- (id)copyWithZone:(NSZone *)zone { return [self yy_modelCopy]; }&#xA;- (NSUInteger)hash { return [self yy_modelHash]; }&#xA;- (BOOL)isEqual:(id)object { return [self yy_modelIsEqual:object]; }&#xA;- (NSString *)description { return [self yy_modelDescription]; }&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;pod &#39;YYModel&#39;&lt;/code&gt; to your Podfile.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; or &lt;code&gt;pod update&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Import &amp;lt;YYModel/YYModel.h&amp;gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;github &#34;ibireme/YYModel&#34;&lt;/code&gt; to your Cartfile.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update --platform ios&lt;/code&gt; and add the framework to your project.&lt;/li&gt; &#xA; &lt;li&gt;Import &amp;lt;YYModel/YYModel.h&amp;gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download all the files in the YYModel subdirectory.&lt;/li&gt; &#xA; &lt;li&gt;Add the source files to your Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;Import &lt;code&gt;YYModel.h&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Full API documentation is available on &lt;a href=&#34;http://cocoadocs.org/docsets/YYModel/&#34;&gt;CocoaDocs&lt;/a&gt;.&lt;br&gt; You can also install documentation locally using &lt;a href=&#34;https://github.com/tomaz/appledoc&#34;&gt;appledoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;This library requires &lt;code&gt;iOS 6.0+&lt;/code&gt; and &lt;code&gt;Xcode 8.0+&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;YYModel is provided under the MIT license. See LICENSE file for details.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;br&gt;&lt;br&gt;&lt;/h2&gt; &#xA;&lt;h1&gt;中文介绍&lt;/h1&gt; &#xA;&lt;p&gt;高性能 iOS/OSX 模型转换框架。&lt;br&gt; (该项目是 &lt;a href=&#34;https://github.com/ibireme/YYKit&#34;&gt;YYKit&lt;/a&gt; 组件之一)&lt;/p&gt; &#xA;&lt;h1&gt;性能&lt;/h1&gt; &#xA;&lt;p&gt;处理 GithubUser 数据 10000 次耗时统计 (iPhone 6):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/ibireme/YYModel/master/Benchmark/Result.png&#34; alt=&#34;Benchmark result&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;更多测试代码和用例见 &lt;code&gt;Benchmark/ModelBenchmark.xcodeproj&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h1&gt;特性&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;高性能&lt;/strong&gt;: 模型转换性能接近手写解析代码。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;自动类型转换&lt;/strong&gt;: 对象类型可以自动转换，详情见下方表格。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;类型安全&lt;/strong&gt;: 转换过程中，所有的数据类型都会被检测一遍，以保证类型安全，避免崩溃问题。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;无侵入性&lt;/strong&gt;: 模型无需继承自其他基类。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;轻量&lt;/strong&gt;: 该框架只有 5 个文件 (包括.h文件)。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;文档和单元测试&lt;/strong&gt;: 文档覆盖率100%, 代码覆盖率99.6%。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;使用方法&lt;/h1&gt; &#xA;&lt;h3&gt;简单的 Model 与 JSON 相互转换&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON:&#xA;{&#xA;    &#34;uid&#34;:123456,&#xA;    &#34;name&#34;:&#34;Harry&#34;,&#xA;    &#34;created&#34;:&#34;1965-07-31T00:00:00+0000&#34;&#xA;}&#xA;&#xA;// Model:&#xA;@interface User : NSObject&#xA;@property UInt64 uid;&#xA;@property NSString *name;&#xA;@property NSDate *created;&#xA;@end&#xA;@implementation User&#xA;@end&#xA;&#xA;&#x9;&#xA;// 将 JSON (NSData,NSString,NSDictionary) 转换为 Model:&#xA;User *user = [User yy_modelWithJSON:json];&#xA;&#x9;&#xA;// 将 Model 转换为 JSON 对象:&#xA;NSDictionary *json = [user yy_modelToJSONObject];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当 JSON/Dictionary 中的对象类型与 Model 属性不一致时，YYModel 将会进行如下自动转换。自动转换不支持的值将会被忽略，以避免各种潜在的崩溃问题。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;JSON/Dictionary&lt;/th&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSString&lt;/td&gt; &#xA;   &lt;td&gt;NSNumber,NSURL,SEL,Class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSNumber&lt;/td&gt; &#xA;   &lt;td&gt;NSString&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSString/NSNumber&lt;/td&gt; &#xA;   &lt;td&gt;基础类型 (BOOL,int,float,NSUInteger,UInt64,...)&lt;br&gt; NaN 和 Inf 会被忽略&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSString&lt;/td&gt; &#xA;   &lt;td&gt;NSDate 以下列格式解析:&lt;br&gt; yyyy-MM-dd&lt;br&gt; yyyy-MM-dd HH:mm:ss&lt;br&gt; yyyy-MM-dd&#39;T&#39;HH:mm:ss&lt;br&gt; yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&lt;br&gt; EEE MMM dd HH:mm:ss Z yyyy &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSDate&lt;/td&gt; &#xA;   &lt;td&gt;NSString 格式化为 ISO8601:&lt;br&gt; &#34;YYYY-MM-dd&#39;T&#39;HH:mm:ssZ&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSValue&lt;/td&gt; &#xA;   &lt;td&gt;struct (CGRect,CGSize,...)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSNull&lt;/td&gt; &#xA;   &lt;td&gt;nil,0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;no&#34;,&#34;false&#34;,...&lt;/td&gt; &#xA;   &lt;td&gt;@(NO),0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;yes&#34;,&#34;true&#34;,...&lt;/td&gt; &#xA;   &lt;td&gt;@(YES),1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Model 属性名和 JSON 中的 Key 不相同&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON:&#xA;{&#xA;    &#34;n&#34;:&#34;Harry Pottery&#34;,&#xA;    &#34;p&#34;: 256,&#xA;    &#34;ext&#34; : {&#xA;        &#34;desc&#34; : &#34;A book written by J.K.Rowing.&#34;&#xA;    },&#xA;    &#34;ID&#34; : 100010&#xA;}&#xA;&#xA;// Model:&#xA;@interface Book : NSObject&#xA;@property NSString *name;&#xA;@property NSInteger page;&#xA;@property NSString *desc;&#xA;@property NSString *bookID;&#xA;@end&#xA;@implementation Book&#xA;//返回一个 Dict，将 Model 属性名对映射到 JSON 的 Key。&#xA;+ (NSDictionary *)modelCustomPropertyMapper {&#xA;    return @{@&#34;name&#34; : @&#34;n&#34;,&#xA;             @&#34;page&#34; : @&#34;p&#34;,&#xA;             @&#34;desc&#34; : @&#34;ext.desc&#34;,&#xA;             @&#34;bookID&#34; : @[@&#34;id&#34;,@&#34;ID&#34;,@&#34;book_id&#34;]};&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;你可以把一个或一组 json key (key path) 映射到一个或多个属性。如果一个属性没有映射关系，那默认会使用相同属性名作为映射。&lt;/p&gt; &#xA;&lt;p&gt;在 json-&amp;gt;model 的过程中：如果一个属性对应了多个 json key，那么转换过程会按顺序查找，并使用第一个不为空的值。&lt;/p&gt; &#xA;&lt;p&gt;在 model-&amp;gt;json 的过程中：如果一个属性对应了多个 json key (key path)，那么转换过程仅会处理第一个 json key (key path)；如果多个属性对应了同一个 json key，则转换过过程会使用其中任意一个不为空的值。&lt;/p&gt; &#xA;&lt;h3&gt;Model 包含其他 Model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON&#xA;{&#xA;    &#34;author&#34;:{&#xA;        &#34;name&#34;:&#34;J.K.Rowling&#34;,&#xA;        &#34;birthday&#34;:&#34;1965-07-31T00:00:00+0000&#34;&#xA;    },&#xA;    &#34;name&#34;:&#34;Harry Potter&#34;,&#xA;    &#34;pages&#34;:256&#xA;}&#xA;&#xA;// Model: 什么都不用做，转换会自动完成&#xA;@interface Author : NSObject&#xA;@property NSString *name;&#xA;@property NSDate *birthday;&#xA;@end&#xA;@implementation Author&#xA;@end&#xA;&#x9;&#xA;@interface Book : NSObject&#xA;@property NSString *name;&#xA;@property NSUInteger pages;&#xA;@property Author *author; //Book 包含 Author 属性&#xA;@end&#xA;@implementation Book&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;容器类属性&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@class Shadow, Border, Attachment;&#xA;&#xA;@interface Attributes&#xA;@property NSString *name;&#xA;@property NSArray *shadows; //Array&amp;lt;Shadow&amp;gt;&#xA;@property NSSet *borders; //Set&amp;lt;Border&amp;gt;&#xA;@property NSMutableDictionary *attachments; //Dict&amp;lt;NSString,Attachment&amp;gt;&#xA;@end&#xA;&#xA;@implementation Attributes&#xA;// 返回容器类中的所需要存放的数据类型 (以 Class 或 Class Name 的形式)。&#xA;+ (NSDictionary *)modelContainerPropertyGenericClass {&#xA;    return @{@&#34;shadows&#34; : [Shadow class],&#xA;             @&#34;borders&#34; : Border.class,&#xA;             @&#34;attachments&#34; : @&#34;Attachment&#34; };&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;黑名单与白名单&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface User&#xA;@property NSString *name;&#xA;@property NSUInteger age;&#xA;@end&#xA;&#x9;&#xA;@implementation Attributes&#xA;// 如果实现了该方法，则处理过程中会忽略该列表内的所有属性&#xA;+ (NSArray *)modelPropertyBlacklist {&#xA;    return @[@&#34;test1&#34;, @&#34;test2&#34;];&#xA;}&#xA;// 如果实现了该方法，则处理过程中不会处理该列表外的属性。&#xA;+ (NSArray *)modelPropertyWhitelist {&#xA;    return @[@&#34;name&#34;];&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;数据校验与自定义转换&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON:&#xA;{&#xA;&#x9;&#34;name&#34;:&#34;Harry&#34;,&#xA;&#x9;&#34;timestamp&#34; : 1445534567&#xA;}&#xA;&#x9;&#xA;// Model:&#xA;@interface User&#xA;@property NSString *name;&#xA;@property NSDate *createdAt;&#xA;@end&#xA;&#xA;@implementation User&#xA;// 当 JSON 转为 Model 完成后，该方法会被调用。&#xA;// 你可以在这里对数据进行校验，如果校验不通过，可以返回 NO，则该 Model 会被忽略。&#xA;// 你也可以在这里做一些自动转换不能完成的工作。&#xA;- (BOOL)modelCustomTransformFromDictionary:(NSDictionary *)dic {&#xA;    NSNumber *timestamp = dic[@&#34;timestamp&#34;];&#xA;    if (![timestamp isKindOfClass:[NSNumber class]]) return NO;&#xA;    _createdAt = [NSDate dateWithTimeIntervalSince1970:timestamp.floatValue];&#xA;    return YES;&#xA;}&#xA;&#x9;&#xA;// 当 Model 转为 JSON 完成后，该方法会被调用。&#xA;// 你可以在这里对数据进行校验，如果校验不通过，可以返回 NO，则该 Model 会被忽略。&#xA;// 你也可以在这里做一些自动转换不能完成的工作。&#xA;- (BOOL)modelCustomTransformToDictionary:(NSMutableDictionary *)dic {&#xA;    if (!_createdAt) return NO;&#xA;    dic[@&#34;timestamp&#34;] = @(n.timeIntervalSince1970);&#xA;    return YES;&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Coding/Copying/hash/equal/description&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface YYShadow :NSObject &amp;lt;NSCoding, NSCopying&amp;gt;&#xA;@property (nonatomic, copy) NSString *name;&#xA;@property (nonatomic, assign) CGSize size;&#xA;@end&#xA;&#xA;@implementation YYShadow&#xA;// 直接添加以下代码即可自动完成&#xA;- (void)encodeWithCoder:(NSCoder *)aCoder { [self yy_modelEncodeWithCoder:aCoder]; }&#xA;- (id)initWithCoder:(NSCoder *)aDecoder { self = [super init]; return [self yy_modelInitWithCoder:aDecoder]; }&#xA;- (id)copyWithZone:(NSZone *)zone { return [self yy_modelCopy]; }&#xA;- (NSUInteger)hash { return [self yy_modelHash]; }&#xA;- (BOOL)isEqual:(id)object { return [self yy_modelIsEqual:object]; }&#xA;- (NSString *)description { return [self yy_modelDescription]; }&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;安装&lt;/h1&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在 Podfile 中添加 &lt;code&gt;pod &#39;YYModel&#39;&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;执行 &lt;code&gt;pod install&lt;/code&gt; 或 &lt;code&gt;pod update&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;导入 &amp;lt;YYModel/YYModel.h&amp;gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在 Cartfile 中添加 &lt;code&gt;github &#34;ibireme/YYModel&#34;&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;执行 &lt;code&gt;carthage update --platform ios&lt;/code&gt; 并将生成的 framework 添加到你的工程。&lt;/li&gt; &#xA; &lt;li&gt;导入 &amp;lt;YYModel/YYModel.h&amp;gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;手动安装&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;下载 YYModel 文件夹内的所有内容。&lt;/li&gt; &#xA; &lt;li&gt;将 YYModel 内的源文件添加(拖放)到你的工程。&lt;/li&gt; &#xA; &lt;li&gt;导入 &lt;code&gt;YYModel.h&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;文档&lt;/h1&gt; &#xA;&lt;p&gt;你可以在 &lt;a href=&#34;http://cocoadocs.org/docsets/YYModel/&#34;&gt;CocoaDocs&lt;/a&gt; 查看在线 API 文档，也可以用 &lt;a href=&#34;https://github.com/tomaz/appledoc&#34;&gt;appledoc&lt;/a&gt; 本地生成文档。&lt;/p&gt; &#xA;&lt;h1&gt;系统要求&lt;/h1&gt; &#xA;&lt;p&gt;该项目最低支持 &lt;code&gt;iOS 6.0&lt;/code&gt; 和 &lt;code&gt;Xcode 8.0&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h1&gt;许可证&lt;/h1&gt; &#xA;&lt;p&gt;YYModel 使用 MIT 许可证，详情见 LICENSE 文件。&lt;/p&gt; &#xA;&lt;h1&gt;相关链接&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.ibireme.com/2015/10/23/ios_model_framework_benchmark/&#34;&gt;iOS JSON 模型转换库评测&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>salesforce-marketingcloud/sfmc-sdk-ios</title>
    <updated>2024-03-03T01:48:53Z</updated>
    <id>tag:github.com,2024-03-03:/salesforce-marketingcloud/sfmc-sdk-ios</id>
    <link href="https://github.com/salesforce-marketingcloud/sfmc-sdk-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SFMCSDK for iOS&lt;/h1&gt; &#xA;&lt;p&gt;============================================&lt;/p&gt; &#xA;&lt;p&gt;This is the git repository for the Salesforce Marketing Cloud SFMCSDK SDK for iOS.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Release History, Documentation, and Apple docs are located at &lt;a href=&#34;http://salesforce-marketingcloud.github.io/MarketingCloudSDK-iOS/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For questions regarding the SDK or any issues you would like to report, please contact your Salesforce Marketing Cloud support team or post a question on &lt;a href=&#34;http://salesforce.stackexchange.com/&#34; target=&#34;_blank&#34;&gt;Salesforce StackExchange&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>