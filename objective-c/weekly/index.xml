<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-28T01:40:35Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Adyen/adyen-3ds2-ios</title>
    <updated>2024-04-28T01:40:35Z</updated>
    <id>tag:github.com,2024-04-28:/Adyen/adyen-3ds2-ios</id>
    <link href="https://github.com/Adyen/adyen-3ds2-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;3DS2 iOS SDK&lt;/h1&gt; &#xA;&lt;p&gt;With this SDK, you can accept 3D Secure 2.0 payments via Adyen.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The SDK is available via &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; or via manual installation.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;pod &#39;Adyen3DS2&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;github &#34;adyen/adyen-3ds2-ios&#34;&lt;/code&gt; to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Link the framework with your target as described in &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;Carthage Readme&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Dynamic xcFramework&lt;/h3&gt; &#xA;&lt;p&gt;Drag the dynamic &lt;code&gt;XCFramework/Dynamic/Adyen3DS2.xcframework&lt;/code&gt; to the &lt;code&gt;Frameworks, Libraries, and Embedded Content&lt;/code&gt; section in your general target settings. Select &#34;Copy items if needed&#34; when asked.&lt;/p&gt; &#xA;&lt;h3&gt;Static xcFramework&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Drag the static &lt;code&gt;XCFramework/Static/Adyen3DS2.xcframework&lt;/code&gt; to the &lt;code&gt;Frameworks, Libraries, and Embedded Content&lt;/code&gt; section in your general target settings.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the static &lt;code&gt;Adyen3DS2.xcframework&lt;/code&gt; is not embedded.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Adyen3DS2.bundle&lt;/code&gt; inside &lt;code&gt;Adyen3DS2.xcframework&lt;/code&gt; and check &#34;Copy items if needed&#34;, then select &#34;Add&#34;.&lt;/li&gt; &#xA; &lt;li&gt;The privacy manifest should be included/merged in your app bundle.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow Apple&#39;s &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;Adding Package Dependencies to Your App&lt;/a&gt; guide on how to add a Swift Package dependency.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;https://github.com/Adyen/adyen-3ds2-ios&lt;/code&gt; as the repository URL.&lt;/li&gt; &#xA; &lt;li&gt;Specify the version to be at least &lt;code&gt;2.2.1&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;em&gt;Please make sure to use Xcode 12.0+ when adding &lt;code&gt;Adyen3DS2&lt;/code&gt; using Swift Package Manager.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;em&gt;Swift Package Manager for Xcode 12.0 and 12.1 has a &lt;a href=&#34;https://bugs.swift.org/browse/SR-13343&#34;&gt;know issue&lt;/a&gt; when it comes to importing binary dependencies. A workaround is described &lt;a href=&#34;https://forums.swift.org/t/swiftpm-binarytarget-dependency-and-code-signing/38953&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Creating a transaction&lt;/h3&gt; &#xA;&lt;p&gt;First, create an instance of &lt;code&gt;ADYServiceParameters&lt;/code&gt; with the additional data retrieved from your call to &lt;code&gt;/authorise&lt;/code&gt;. Then, use the class method on &lt;code&gt;ADYService&lt;/code&gt; to create a new service. This service can be used to create a new transaction.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ADYServiceParameters *copy = [[ADYServiceParameters alloc] initWithDirectoryServerIdentifier:... // Retrieved from Adyen.&#xA;                                                                    directoryServerPublicKey:... // Retrieved from Adyen.&#xA;                                                             directoryServerRootCertificates:...]; // Retrieved from Adyen.&#xA;&#xA;[ADYService serviceWithParameters:parameters appearanceConfiguration:nil completionHandler:^(ADYService *service) {&#xA;    NSError *error = nil;&#xA;    ADYTransaction *transaction = [service transactionWithMessageVersion:@&#34;2.1.0&#34; error:&amp;amp;error];&#xA;    if (transaction) {&#xA;        ADYAuthenticationRequestParameters *authenticationRequestParameters = [transaction authenticationRequestParameters];&#xA;        // Submit the authenticationRequestParameters to /authorise3ds2.&#xA;    } else {&#xA;        NSString *errorRepresentation = [error base64Representation];&#xA;        // Submit `errorRepresentation` to [Adyen backend](https://docs.adyen.com/api-explorer/Payment/64/post/authorise3ds2).&#xA;    }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;transaction&lt;/code&gt;&#39;s &lt;code&gt;authenticationRequestParameters&lt;/code&gt; in your call to &lt;a href=&#34;https://docs.adyen.com/api-explorer/Payment/64/post/authorise3ds2&#34;&gt;Adyen backend&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;em&gt;&lt;code&gt;[ADYService transactionWithMessageVersion:error:]&lt;/code&gt; requires the message version to be passed, please fill in the same message version as in the AReq, you should be able to get the message version decided by the 3DS server from its response when initiating the payment, if you use the Adyen 3DS server please see &lt;a href=&#34;https://docs.adyen.com/api-explorer/#/Payment/v64/post/authorise__reqParam_threeDS2RequestData-messageVersion&#34;&gt;the documentation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;em&gt;Keep a reference to your &lt;code&gt;ADYTransaction&lt;/code&gt; instance until the transaction is finished.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;em&gt;If your application supports Mac catalyst or iPad OS multi-window/multi-scene, then its recommended to share the &lt;code&gt;ADYTransaction&lt;/code&gt;/&lt;code&gt;ADYService&lt;/code&gt; object(s) between scenes for the case if the shopper starts a transaction on one window and switch to another while the transaction is in progress.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Performing a challenge&lt;/h3&gt; &#xA;&lt;p&gt;In case a challenge is required, create an instance of &lt;code&gt;ADYChallengeParameters&lt;/code&gt; with values from the additional data retrieved from your call to &lt;a href=&#34;https://docs.adyen.com/api-explorer/Payment/64/post/authorise3ds2&#34;&gt;Adyen backend&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSDictionary *additionalData = ...; // Retrieved from Adyen.&#xA;ADYChallengeParameters *parameters = [ADYChallengeParameters challengeParametersWithServerTransactionIdentifier:additionalData[@&#34;threeds2.threeDS2ResponseData.threeDSServerTransID&#34;]&#xA;                                                                                         threeDSRequestorAppURL:[NSURL URLWithString:@&#34;{YOUR_APP_URL}&#34;] // Or nil if for example you&#39;re using protocol version 2.1.0&#xA;                                                                                       ACSTransactionIdentifier:additionalData[@&#34;threeds2.threeDS2ResponseData.acsTransID&#34;]&#xA;                                                                                             ACSReferenceNumber:additionalData[@&#34;threeds2.threeDS2ResponseData.acsReferenceNumber&#34;]&#xA;                                                                                               ACSSignedContent:additionalData[@&#34;threeds2.threeDS2ResponseData.acsSignedContent&#34;]];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;em&gt;Because of recent updates to the 3D Secure protocol, we strongly recommend that you provide the&amp;nbsp;&lt;code&gt;threeDSRequestorAppURL&lt;/code&gt;&amp;nbsp;parameter as a&amp;nbsp;&lt;a href=&#34;https://developer.apple.com/documentation/xcode/allowing-apps-and-websites-to-link-to-your-content?language=objc&#34;&gt;universal link&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use these challenge parameters to perform the challenge with the &lt;code&gt;transaction&lt;/code&gt; you created earlier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[transaction performChallengeWithParameters:parameters completionHandler:^(ADYChallengeResult *result, NSError *error) {&#xA;    if (result) {&#xA;        NSString *transactionStatus = [result transactionStatus];&#xA;        // Submit the transactionStatus to /authorise3ds2.&#xA;    } else if (error) {&#xA;        // An error occurred.&#xA;        &#xA;        // collect the error context information if available&#xA;        NSString* _Nullable serverTransactionIdentifier = [[error userInfo] valueForKey:ADYProtocolErrorServerTransactionIdentifierKey];&#xA;        NSString* _Nullable acsTransactionIdentifier = [[error userInfo] valueForKey:ADYProtocolErrorACSTransactionIdentifierKey];&#xA;        NSString* _Nullable sdkTransactionIdentifier = [[error userInfo] valueForKey:ADYProtocolErrorSDKTransactionIdentifierKey];&#xA;        NSString* _Nullable errorDetails = [[error userInfo] valueForKey:ADYProtocolErrorDetailKey];&#xA;        NSString* _Nullable errorDomain = [[error userInfo] valueForKey:ADYProtocolErrorDomain];&#xA;        NSString* _Nullable errorLocalizedDescription = [[error userInfo] valueForKey:NSLocalizedDescriptionKey];&#xA;        &#xA;        NSString *errorRepresentation = [error base64Representation];&#xA;        // Submit `errorRepresentation` to [Adyen backend](https://docs.adyen.com/api-explorer/Payment/64/post/authorise3ds2)&#xA;&#xA;        // Submit the transactionStatus = &#34;U&#34; to [Adyen backend](https://docs.adyen.com/api-explorer/Payment/64/post/authorise3ds2).&#xA;    } else {&#xA;        // Should never happen&#xA;    }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the challenge is completed successfully, submit the &lt;code&gt;transactionStatus&lt;/code&gt; in the &lt;code&gt;result&lt;/code&gt; in your second call to &lt;a href=&#34;https://docs.adyen.com/api-explorer/Payment/64/post/authorise3ds2&#34;&gt;Adyen backend&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Customizing the UI&lt;/h3&gt; &#xA;&lt;p&gt;The SDK provides some customization options to ensure the UI of the challenge flow fits your app&#39;s look and feel. These customization options are available through the &lt;code&gt;ADYAppearanceConfiguration&lt;/code&gt; class. To use them, create an instance of &lt;code&gt;ADYAppearanceConfiguration&lt;/code&gt;, configure the desired properties and pass it during initialization of the &lt;code&gt;ADYService&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, to make the Continue button red and change its corner radius:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ADYAppearanceConfiguration *appearanceConfiguration = [ADYAppearanceConfiguration new];&#xA;[[appearanceConfiguration buttonAppearanceForType:ADYAppearanceButtonTypeContinue] setBackgroundColor:[UIColor redColor]];&#xA;[[appearanceConfiguration buttonAppearanceForType:ADYAppearanceButtonTypeContinue] setTextColor:[UIColor whiteColor]];&#xA;[[appearanceConfiguration buttonAppearanceForType:ADYAppearanceButtonTypeContinue] setCornerRadius:3.0f];&#xA;&#xA;[ADYService serviceWithParameters:parameters appearanceConfiguration:appearanceConfiguration completionHandler:...];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get the SDK version&lt;/h3&gt; &#xA;&lt;p&gt;If you want to get the currently used sdk version - for example to send to the &lt;a href=&#34;https://docs.adyen.com/api-explorer/#/Payment/v64/post/authorise__reqParam_threeDS2RequestData-sdkVersion&#34;&gt;&lt;code&gt;/authorise&lt;/code&gt; end point&lt;/a&gt;, you can get it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NSString* threeDS2SDKVersion = ADY3DS2SDKVersion();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;let threeDS2SDKVersion = ADY3DS2SDKVersion()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.adyen.com/classic-integration/3d-secure-2-classic-integration/ios-sdk-integration/&#34;&gt;Complete Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://adyen.github.io/adyen-3ds2-ios/&#34;&gt;SDK Reference&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.adyen.help/hc/en-us/articles/115001187330-How-do-I-report-a-possible-security-issue-to-Adyen-&#34;&gt;Reporting security issues&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce/3d-secure/native-3ds2/ios-sdk-integration/security-best-practices&#34;&gt;Security best practices&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.adyen.com/development-resources/adyen-data-security&#34;&gt;Data security at Adyen&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This SDK is available under the Apache License, Version 2.0. For more information, see the &lt;a href=&#34;https://github.com/Adyen/adyen-3ds2-ios/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Leanplum/Leanplum-iOS-SDK</title>
    <updated>2024-04-28T01:40:35Z</updated>
    <id>tag:github.com,2024-04-28:/Leanplum/Leanplum-iOS-SDK</id>
    <link href="https://github.com/Leanplum/Leanplum-iOS-SDK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Leanplum&#39;s integrated solution delivers meaningful engagement across messaging and the in-app experience.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Leanplum/Leanplum-iOS-SDK/master/Leanplum.svg?sanitize=true&#34; alt=&#34;Leanplum - &#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/branch-master-blue.svg?sanitize=true&#34;&gt; &lt;img src=&#34;https://travis-ci.com/Leanplum/Leanplum-iOS-SDK.svg?branch=master&#34; alt=&#34;Build status&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-iOS-blue.svg?style=flat&#34; alt=&#34;Platform iOS&#34;&gt; &lt;a href=&#34;https://cocoapods.org/pods/Leanplum-iOS-SDK&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Leanplum-iOS-SDK.svg?style=flat&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Leanplum/Leanplum-iOS-SDK/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-apache%202.0-blue.svg?style=flat&#34; alt=&#34;License: Apache 2.0&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please refer to: &lt;a href=&#34;https://www.leanplum.com/docs#/setup/ios&#34;&gt;https://www.leanplum.com/docs#/setup/ios&lt;/a&gt; for how to setup Leanplum SDK in your project.&lt;/li&gt; &#xA; &lt;li&gt;To run the example project:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pod install&#xA;open &#34;Leanplum.xcworkspace&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development Workflow&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We use feature branches that get merged to &lt;code&gt;master&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build the SDK&lt;/h2&gt; &#xA;&lt;p&gt;To build the sdk run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please follow the guidelines under &lt;a href=&#34;https://github.com/Leanplum/Leanplum-iOS-SDK/raw/master/CONTRIBUTING.md&#34;&gt;https://github.com/Leanplum/Leanplum-iOS-SDK/blob/master/CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See LICENSE file.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Leanplum does not support custom modifications to the SDK, without an approved pull request (PR). If you wish to include your changes, please fork the repo and send a PR to the develop branch. After the PR has been reviewed and merged into develop it will go into our regular release cycle which includes QA. Once QA has passed the PR will be available in master and your changes are now officialy supported by Leanplum.&lt;/p&gt;</summary>
  </entry>
</feed>