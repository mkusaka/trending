<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-20T01:44:58Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/cordova-plugin-statusbar</title>
    <updated>2025-07-20T01:44:58Z</updated>
    <id>tag:github.com,2025-07-20:/apache/cordova-plugin-statusbar</id>
    <link href="https://github.com/apache/cordova-plugin-statusbar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Cordova Status Bar Plugin&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;title: Statusbar description: Control the device status bar.&lt;/h2&gt; &#xA;&lt;!--&#xA;# license: Licensed to the Apache Software Foundation (ASF) under one&#xA;#         or more contributor license agreements.  See the NOTICE file&#xA;#         distributed with this work for additional information&#xA;#         regarding copyright ownership.  The ASF licenses this file&#xA;#         to you under the Apache License, Version 2.0 (the&#xA;#         &#34;License&#34;); you may not use this file except in compliance&#xA;#         with the License.  You may obtain a copy of the License at&#xA;#&#xA;#           http://www.apache.org/licenses/LICENSE-2.0&#xA;#&#xA;#         Unless required by applicable law or agreed to in writing,&#xA;#         software distributed under the License is distributed on an&#xA;#         &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY&#xA;#         KIND, either express or implied.  See the License for the&#xA;#         specific language governing permissions and limitations&#xA;#         under the License.&#xA;--&gt; &#xA;&lt;h1&gt;cordova-plugin-statusbar&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/android.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/android.yml/badge.svg?sanitize=true&#34; alt=&#34;Android Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/chrome.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/chrome.yml/badge.svg?sanitize=true&#34; alt=&#34;Chrome Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/ios.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/ios.yml/badge.svg?sanitize=true&#34; alt=&#34;iOS Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Lint Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;StatusBar&lt;/code&gt; object provides some functions to customize the iOS and Android StatusBar.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This installation method requires cordova 5.0+&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cordova plugin add cordova-plugin-statusbar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to install via repo url directly ( unstable )&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cordova plugin add https://github.com/apache/cordova-plugin-statusbar.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Preferences&lt;/h2&gt; &#xA;&lt;h4&gt;config.xml&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;StatusBarOverlaysWebView&lt;/strong&gt; (boolean, defaults to true). Make the statusbar overlay or not overlay the WebView at startup.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; &amp;lt;preference name=&#34;StatusBarOverlaysWebView&#34; value=&#34;true&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h5&gt;Android Quirks&lt;/h5&gt; &lt;p&gt;Only supported on Android 5 or later. Earlier versions will ignore this preference.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;StatusBarBackgroundColor&lt;/strong&gt; (color hex string, no default value). Set the background color of the statusbar by a hex string (#RRGGBB) at startup. If this value is not set, the background color will be transparent. If &lt;code&gt;StatusBarOverlaysWebView&lt;/code&gt; is set to true, then a 8 digit hex (#AARRGGBB) string can optionally be used to define the transparency.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  &amp;lt;preference name=&#34;StatusBarBackgroundColor&#34; value=&#34;#000000&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;StatusBarStyle&lt;/strong&gt; (status bar style, defaults to lightcontent). Set the status bar style (e.g. text color). Available options: &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;lightcontent&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  &amp;lt;preference name=&#34;StatusBarStyle&#34; value=&#34;lightcontent&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;StatusBarDefaultScrollToTop&lt;/strong&gt; (boolean, defaults to false). On iOS, allows the Cordova WebView to use default scroll-to-top behavior. Defaults to false so you can listen to the &#34;statusTap&#34; event (described below) and customize the behavior instead.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  &amp;lt;preference name=&#34;StatusBarDefaultScrollToTop&#34; value=&#34;false&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android Quirks&lt;/h3&gt; &#xA;&lt;p&gt;The Android 5+ guidelines specify using a different color for the statusbar than your main app color (unlike the uniform statusbar color of many iOS apps), so you may want to set the statusbar color at runtime instead via &lt;code&gt;StatusBar.backgroundColorByHexString&lt;/code&gt; or &lt;code&gt;StatusBar.backgroundColorByName&lt;/code&gt;. One way to do that would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if (cordova.platformId == &#39;android&#39;) {&#xA;    StatusBar.backgroundColorByHexString(&#34;#333&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to make the status bar semi-transparent. Android uses hexadecimal ARGB values, which are formatted as #AARRGGBB. That first pair of letters, the AA, represent the alpha channel. You must convert your decimal opacity values to a hexadecimal value. You can read more about it &lt;a href=&#34;https://stackoverflow.com/questions/5445085/understanding-colors-on-android-six-characters/11019879#11019879&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, a black status bar with 20% opacity:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if (cordova.platformId == &#39;android&#39;) {&#xA;    StatusBar.overlaysWebView(true);&#xA;    StatusBar.backgroundColorByHexString(&#39;#33000000&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS Quirks&lt;/h3&gt; &#xA;&lt;p&gt;Starting with iOS 11 you must include &lt;code&gt;viewport-fit=cover&lt;/code&gt; in your viewport meta tag if you want the status bar to overlay the webview:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta name=&#34;viewport&#34; content=&#34;initial-scale=1, width=device-width, viewport-fit=cover&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hiding at startup&lt;/h2&gt; &#xA;&lt;p&gt;During runtime you can use the StatusBar.hide function below, but if you want the StatusBar to be hidden at app startup on iOS, you must modify your app&#39;s Info.plist file.&lt;/p&gt; &#xA;&lt;p&gt;Add/edit these two attributes if not present. Set &lt;strong&gt;&#34;Status bar is initially hidden&#34;&lt;/strong&gt; to &lt;strong&gt;&#34;YES&#34;&lt;/strong&gt; and set &lt;strong&gt;&#34;View controller-based status bar appearance&#34;&lt;/strong&gt; to &lt;strong&gt;&#34;NO&#34;&lt;/strong&gt;. If you edit it manually without Xcode, the keys and values are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;UIStatusBarHidden&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&amp;lt;key&amp;gt;UIViewControllerBasedStatusBarAppearance&amp;lt;/key&amp;gt;&#xA;&amp;lt;false/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Methods&lt;/h2&gt; &#xA;&lt;p&gt;This plugin defines global &lt;code&gt;StatusBar&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;Although in the global scope, it is not available until after the &lt;code&gt;deviceready&lt;/code&gt; event.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;document.addEventListener(&#34;deviceready&#34;, onDeviceReady, false);&#xA;function onDeviceReady() {&#xA;    console.log(StatusBar);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;StatusBar.overlaysWebView&lt;/li&gt; &#xA; &lt;li&gt;StatusBar.styleDefault&lt;/li&gt; &#xA; &lt;li&gt;StatusBar.styleLightContent&lt;/li&gt; &#xA; &lt;li&gt;StatusBar.backgroundColorByName&lt;/li&gt; &#xA; &lt;li&gt;StatusBar.backgroundColorByHexString&lt;/li&gt; &#xA; &lt;li&gt;StatusBar.hide&lt;/li&gt; &#xA; &lt;li&gt;StatusBar.show&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Properties&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;StatusBar.isVisible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;statusTap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;StatusBar.overlaysWebView&lt;/h1&gt; &#xA;&lt;p&gt;Make the statusbar overlay or not overlay the WebView.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.overlaysWebView(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Set to true to make the statusbar overlay on top of your app. Ensure that you adjust your styling accordingly so that your app&#39;s title bar or content is not covered. Set to false to make the statusbar solid and not overlay your app. You can then set the style and background color to suit using the other functions.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android 5+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.overlaysWebView(true);&#xA;StatusBar.overlaysWebView(false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;StatusBar.styleDefault&lt;/h1&gt; &#xA;&lt;p&gt;Use the default statusbar (dark text, for light backgrounds).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.styleDefault();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android 6+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;StatusBar.styleLightContent&lt;/h1&gt; &#xA;&lt;p&gt;Use the lightContent statusbar (light text, for dark backgrounds).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.styleLightContent();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android 6+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;StatusBar.backgroundColorByName&lt;/h1&gt; &#xA;&lt;p&gt;On iOS, when you set StatusBar.overlaysWebView to false, you can set the background color of the statusbar by color name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.backgroundColorByName(&#34;red&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported color names are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;black, darkGray, lightGray, white, gray, red, green, blue, cyan, yellow, magenta, orange, purple, brown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;StatusBar.backgroundColorByHexString&lt;/h1&gt; &#xA;&lt;p&gt;Sets the background color of the statusbar by a hex string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.backgroundColorByHexString(&#34;#C0C0C0&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CSS shorthand properties are also supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.backgroundColorByHexString(&#34;#333&#34;); // =&amp;gt; #333333&#xA;StatusBar.backgroundColorByHexString(&#34;#FAB&#34;); // =&amp;gt; #FFAABB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On iOS, when you set StatusBar.overlaysWebView to false, you can set the background color of the statusbar by a hex string (#RRGGBB).&lt;/p&gt; &#xA;&lt;p&gt;On Android, when StatusBar.overlaysWebView is true, and on WP7&amp;amp;8, you can also specify values as #AARRGGBB, where AA is an alpha value.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;StatusBar.hide&lt;/h1&gt; &#xA;&lt;p&gt;Hide the statusbar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.hide();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;StatusBar.show&lt;/h1&gt; &#xA;&lt;p&gt;Shows the statusbar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.show();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;StatusBar.isVisible&lt;/h1&gt; &#xA;&lt;p&gt;Read this property to see if the statusbar is visible or not.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;if (StatusBar.isVisible) {&#xA;&#x9;// do something&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;statusTap&lt;/h1&gt; &#xA;&lt;p&gt;Listen for this event to know if the statusbar was tapped.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;window.addEventListener(&#39;statusTap&#39;, function() {&#xA;    // scroll-up with document.body.scrollTop = 0; or do whatever you want&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Flipboard/FLAnimatedImage</title>
    <updated>2025-07-20T01:44:58Z</updated>
    <id>tag:github.com,2025-07-20:/Flipboard/FLAnimatedImage</id>
    <link href="https://github.com/Flipboard/FLAnimatedImage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Performant animated GIF engine for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/Flipboard/FLAnimatedImage&#34;&gt;FLAnimatedImage&lt;/a&gt; · &lt;a href=&#34;https://github.com/Flipboard/FLAnimatedImage/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Flipboard/FLAnimatedImage/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;FLAnimatedImage is a performant animated GIF engine for iOS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Plays multiple GIFs simultaneously with a playback speed comparable to desktop browsers&lt;/li&gt; &#xA; &lt;li&gt;Honors variable frame delays&lt;/li&gt; &#xA; &lt;li&gt;Behaves gracefully under memory pressure&lt;/li&gt; &#xA; &lt;li&gt;Eliminates delays or blocking during the first playback loop&lt;/li&gt; &#xA; &lt;li&gt;Interprets the frame delays of fast GIFs the same way modern browsers do&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s a well-tested &lt;a href=&#34;http://engineering.flipboard.com/2014/05/animated-gif&#34;&gt;component that powers all GIFs in Flipboard&lt;/a&gt;. To understand its behavior it comes with an interactive demo:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Flipboard/FLAnimatedImage/raw/master/images/flanimatedimage-demo-player.gif&#34; alt=&#34;Flipboard playing multiple GIFs&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Who is this for?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apps that don&#39;t support animated GIFs yet&lt;/li&gt; &#xA; &lt;li&gt;Apps that already support animated GIFs but want a higher performance solution&lt;/li&gt; &#xA; &lt;li&gt;People who want to tinker with the code (&lt;a href=&#34;http://engineering.flipboard.com/2014/05/animated-gif/&#34;&gt;the corresponding blog post&lt;/a&gt; is a great place to start; also see the &lt;em&gt;To Do&lt;/em&gt; section below)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Usage&lt;/h2&gt; &#xA;&lt;p&gt;FLAnimatedImage is a well-encapsulated drop-in component. Simply replace your &lt;code&gt;UIImageView&lt;/code&gt; instances with instances of &lt;code&gt;FLAnimatedImageView&lt;/code&gt; to get animated GIF support. There is no central cache or state to manage.&lt;/p&gt; &#xA;&lt;p&gt;If using CocoaPods, the quickest way to try it out is to type this on the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ pod try FLAnimatedImage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To add it to your app, copy the two classes &lt;code&gt;FLAnimatedImage.h/.m&lt;/code&gt; and &lt;code&gt;FLAnimatedImageView.h/.m&lt;/code&gt; into your Xcode project or add via &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; by adding this to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FLAnimatedImage&#39;, &#39;~&amp;gt; 1.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, add the following line into your &lt;code&gt;Cartfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;Flipboard/FLAnimatedImage&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;, add the following to your &lt;code&gt;Package.swift&lt;/code&gt; or add via XCode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/Flipboard/FLAnimatedImage.git&#34;, .upToNextMajor(from: &#34;1.0.16&#34;))&#xA;],&#xA;targets: [&#xA;    .target(name: &#34;TestProject&#34;, dependencies: [&#34;FLAnimatedImage&#34;&#34;])&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your code, &lt;code&gt;#import &#34;FLAnimatedImage.h&#34;&lt;/code&gt;, create an image from an animated GIF, and setup the image view to display it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;FLAnimatedImage *image = [FLAnimatedImage animatedImageWithGIFData:[NSData dataWithContentsOfURL:[NSURL URLWithString:@&#34;https://upload.wikimedia.org/wikipedia/commons/2/2c/Rotating_earth_%28large%29.gif&#34;]]];&#xA;FLAnimatedImageView *imageView = [[FLAnimatedImageView alloc] init];&#xA;imageView.animatedImage = image;&#xA;imageView.frame = CGRectMake(0.0, 0.0, 100.0, 100.0);&#xA;[self.view addSubview:imageView];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s flexible to integrate in your custom image loading stack and backwards compatible to iOS 9.&lt;/p&gt; &#xA;&lt;p&gt;It uses ARC and the Apple frameworks &lt;code&gt;QuartzCore&lt;/code&gt;, &lt;code&gt;ImageIO&lt;/code&gt;, &lt;code&gt;MobileCoreServices&lt;/code&gt;, and &lt;code&gt;CoreGraphics&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is capable of fine-grained logging. A block can be set on &lt;code&gt;FLAnimatedImage&lt;/code&gt; that&#39;s invoked when logging occurs with various log levels via the &lt;code&gt;+setLogBlock:logLevel:&lt;/code&gt; method. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// Set up FLAnimatedImage logging.&#xA;[FLAnimatedImage setLogBlock:^(NSString *logString, FLLogLevel logLevel) {&#xA;    // Using NSLog&#xA;    NSLog(@&#34;%@&#34;, logString);&#xA;&#xA;    // ...or CocoaLumberjackLogger only logging warnings and errors&#xA;    if (logLevel == FLLogLevelError) {&#xA;        DDLogError(@&#34;%@&#34;, logString);&#xA;    } else if (logLevel == FLLogLevelWarn) {&#xA;        DDLogWarn(@&#34;%@&#34;, logString);&#xA;    }&#xA;} logLevel:FLLogLevelWarn];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since FLAnimatedImage is licensed under MIT, it&#39;s compatible with the terms of using it for any app on the App Store.&lt;/p&gt; &#xA;&lt;h2&gt;Release process&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Bump version in &lt;code&gt;FLAnimatedImage.podspec&lt;/code&gt;, update CHANGES, and commit.&lt;/li&gt; &#xA; &lt;li&gt;Tag commit with &lt;code&gt;&amp;gt; git tag -a &amp;lt;VERSION&amp;gt; -m &#34;&amp;lt;VERSION&amp;gt;&#34;&lt;/code&gt; and &lt;code&gt;&amp;gt; git push --tags&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.cocoapods.org/making/specs-and-specs-repo.html#how-do-i-update-an-existing-pod&#34;&gt;Submit Podspec to Trunk with&lt;/a&gt; &lt;code&gt;&amp;gt; pod trunk push FLAnimatedImage.podspec&lt;/code&gt; (&lt;a href=&#34;https://guides.cocoapods.org/making/getting-setup-with-trunk.html#getting-started&#34;&gt;ensure you&#39;re auth&#39;ed&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;To Do&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support other animated image formats such as APNG or WebP (WebP support implemented &lt;a href=&#34;https://github.com/Flipboard/FLAnimatedImage/pull/86&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Integration into network libraries and image caches&lt;/li&gt; &#xA; &lt;li&gt;Investigate whether &lt;code&gt;FLAnimatedImage&lt;/code&gt; should become a &lt;code&gt;UIImage&lt;/code&gt; subclass&lt;/li&gt; &#xA; &lt;li&gt;Smarter buffering&lt;/li&gt; &#xA; &lt;li&gt;Bring demo app to iPhone&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This code has successfully shipped to many people as is, but please do come with your questions, issues and pull requests!&lt;/p&gt; &#xA;&lt;h2&gt;Select apps using FLAnimatedImage&lt;/h2&gt; &#xA;&lt;p&gt;(alphabetically)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://closeu.pe&#34;&gt;Close-up&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id792517951&#34;&gt;Design Shots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dropbox.com&#34;&gt;Dropbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dumpert.nl&#34;&gt;Dumpert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ello.co/&#34;&gt;Ello&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://facebook.com&#34;&gt;Facebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flipboard.com&#34;&gt;Flipboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id964784701&#34;&gt;getGIF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/gifalicious-see-your-gifs/id965346708?mt=8&#34;&gt;Gifalicious&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id685784609&#34;&gt;HashPhotos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.instagram.com/&#34;&gt;Instagram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.liveboothapp.com&#34;&gt;LiveBooth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lwlvl.com&#34;&gt;lWlVl Festival&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com&#34;&gt;Medium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pinterest.com&#34;&gt;Pinterest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slack.com/&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://telegram.org/&#34;&gt;Telegram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id893031254&#34;&gt;Zip Code Finder&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re using FLAnimatedImage in your app, please open a PR to add it to this list!&lt;/p&gt;</summary>
  </entry>
</feed>