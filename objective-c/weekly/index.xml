<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-09T01:44:57Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AzureAD/microsoft-authentication-library-for-objc</title>
    <updated>2022-10-09T01:44:57Z</updated>
    <id>tag:github.com,2022-10-09:/AzureAD/microsoft-authentication-library-for-objc</id>
    <link href="https://github.com/AzureAD/microsoft-authentication-library-for-objc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Microsoft Authentication Library (MSAL) for iOS and macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Microsoft Authentication Library for iOS and macOS&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/develop/quickstart-v2-ios&#34;&gt;Get Started&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/Azure-Samples/active-directory-ios-swift-native-v2&#34;&gt;iOS Sample Code&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/Azure-Samples/active-directory-macOS-swift-native-v2&#34;&gt;macOS Sample Code&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/Azure-Samples/active-directory-b2c-ios-swift-native-msal&#34;&gt;&lt;u&gt;B2C Sample Code&lt;/u&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://azuread.github.io/microsoft-authentication-library-for-objc/&#34;&gt;Library reference&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/raw/dev/README.md#community-help-and-support&#34;&gt;Support&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://forms.office.com/r/xuBV0CzEih&#34;&gt;Feedback&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The MSAL library for iOS and macOS gives your app the ability to begin using the &lt;a href=&#34;https://aka.ms/aaddev&#34;&gt;Microsoft Identity platform&lt;/a&gt; by supporting &lt;a href=&#34;https://azure.microsoft.com/en-us/services/active-directory/&#34;&gt;Azure Active Directory&lt;/a&gt; and &lt;a href=&#34;https://account.microsoft.com&#34;&gt;Microsoft Accounts&lt;/a&gt; in a converged experience using industry standard OAuth2 and OpenID Connect. The library also supports &lt;a href=&#34;https://azure.microsoft.com/services/active-directory-b2c/&#34;&gt;Azure AD B2C&lt;/a&gt; for those using our hosted identity management service.&lt;/p&gt; &#xA;&lt;h2&gt;Quick sample&lt;/h2&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let config = MSALPublicClientApplicationConfig(clientId: &#34;&amp;lt;your-client-id-here&amp;gt;&#34;)&#xA;let scopes = [&#34;your-scope1-here&#34;, &#34;your-scope2-here&#34;]&#xA;        &#xA;if let application = try? MSALPublicClientApplication(configuration: config) {&#xA;            &#xA;&#x9;#if os(iOS)&#xA;&#x9;let viewController = ... // Pass a reference to the view controller that should be used when getting a token interactively&#xA;&#x9;let webviewParameters = MSALWebviewParameters(authPresentationViewController: viewController)&#xA;&#x9;#else&#xA;&#x9;let webviewParameters = MSALWebviewParameters()&#xA;&#x9;#endif&#xA;&#x9;&#xA;&#x9;let interactiveParameters = MSALInteractiveTokenParameters(scopes: scopes, webviewParameters: webviewParameters)&#xA;&#x9;application.acquireToken(with: interactiveParameters, completionBlock: { (result, error) in&#xA;                &#xA;&#x9;guard let authResult = result, error == nil else {&#xA;&#x9;&#x9;print(error!.localizedDescription)&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;                &#xA;&#x9;// Get access token from result&#xA;&#x9;let accessToken = authResult.accessToken&#xA;                &#xA;&#x9;// You&#39;ll want to get the account identifier to retrieve and reuse the account for later acquireToken calls&#xA;&#x9;let accountIdentifier = authResult.account.identifier&#xA;&#x9;})&#xA;}&#xA;else {&#xA;&#x9;print(&#34;Unable to create application.&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;NSError *msalError = nil;&#xA;    &#xA;MSALPublicClientApplicationConfig *config = [[MSALPublicClientApplicationConfig alloc] initWithClientId:@&#34;&amp;lt;your-client-id-here&amp;gt;&#34;];&#xA;NSArray&amp;lt;NSString *&amp;gt; *scopes = @[@&#34;your-scope1-here&#34;, @&#34;your-scope2-here&#34;];&#xA;    &#xA;MSALPublicClientApplication *application = [[MSALPublicClientApplication alloc] initWithConfiguration:config error:&amp;amp;msalError];&#xA;    &#xA;#if TARGET_OS_IPHONE&#xA;    UIViewController *viewController = ...; // Pass a reference to the view controller that should be used when getting a token interactively&#xA;    MSALWebviewParameters *webParameters = [[MSALWebviewParameters alloc] initWithAuthPresentationViewController:viewController];&#xA;#else&#xA;    MSALWebviewParameters *webParameters = [MSALWebviewParameters new];&#xA;#endif&#xA;    &#xA;MSALInteractiveTokenParameters *interactiveParams = [[MSALInteractiveTokenParameters alloc] initWithScopes:scopes webviewParameters:webParameters];&#xA;[application acquireTokenWithParameters:interactiveParams completionBlock:^(MSALResult *result, NSError *error) {&#xA;    if (!error)&#xA;    {&#xA;        // You&#39;ll want to get the account identifier to retrieve and reuse the account&#xA;        // for later acquireToken calls&#xA;        NSString *accountIdentifier = result.account.identifier;&#xA;            &#xA;        NSString *accessToken = result.accessToken;&#xA;    }&#xA;    else&#xA;    {&#xA;        // Check the error&#xA;    }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; to install &lt;code&gt;MSAL&lt;/code&gt; by adding it to your &lt;code&gt;Podfile&lt;/code&gt; under target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use_frameworks!&#xA; &#xA;target &#39;your-target-here&#39; do&#xA;&#x9;pod &#39;MSAL&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Carthage&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; to install &lt;code&gt;MSAL&lt;/code&gt; by adding it to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;AzureAD/microsoft-authentication-library-for-objc&#34; &#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Swift Packages&lt;/h3&gt; &#xA;&lt;p&gt;You can add &lt;code&gt;MSAL&lt;/code&gt; as a &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages/distributing_binary_frameworks_as_swift_packages&#34;&gt;swift package dependency&lt;/a&gt;. For MSAL version 1.1.14 and above, distribution of MSAL binary framework as a Swift package is available.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;For your project in Xcode, click File → Swift Packages → Add Package Dependency...&lt;/li&gt; &#xA; &lt;li&gt;Choose project to add dependency in&lt;/li&gt; &#xA; &lt;li&gt;Enter : &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc&#34;&gt;https://github.com/AzureAD/microsoft-authentication-library-for-objc&lt;/a&gt; as the package repository URL&lt;/li&gt; &#xA; &lt;li&gt;Choose package options with : &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Rules → Branch : master (For latest MSAL release)&lt;/li&gt; &#xA;   &lt;li&gt;Rules → Version → Exact : [release version &amp;gt;= 1.1.14] (For a particular release version)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For any issues, please check if there is an outstanding SPM/Xcode bug. Workarounds for some bugs we encountered :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have a plugin in your project you might encounter &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/issues/737#issuecomment-767311138&#34;&gt;CFBundleIdentifier collision. Each bundle must have a unique bundle identifier&lt;/a&gt; error. &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/issues/737#issuecomment-767990771&#34;&gt;Workaround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;While archiving, error : “IPA processing failed” UserInfo={NSLocalizedDescription=IPA processing failed}. &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/issues/737#issuecomment-767990771&#34;&gt;Workaround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For a macOS app, “Command CodeSign failed with a nonzero exit code” error. &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/issues/737#issuecomment-770056675&#34;&gt;Workaround&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;You can also use Git Submodule or check out the latest release and use as framework in your application.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring MSAL&lt;/h2&gt; &#xA;&lt;h3&gt;Adding MSAL to your project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Register your app in the &lt;a href=&#34;https://aka.ms/MobileAppReg&#34;&gt;Azure portal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you register a redirect URI for your application. It should be in the following format:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;msauth.$(PRODUCT_BUNDLE_IDENTIFIER)://auth&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Add a new keychain group to your project Capabilities. Keychain group should be &lt;code&gt;com.microsoft.adalcache&lt;/code&gt; on iOS and &lt;code&gt;com.microsoft.identity.universalstorage&lt;/code&gt; on macOS.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AzureAD/microsoft-authentication-library-for-objc/dev/Images/keychain_example.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See more information about &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-v2-keychain-objc&#34;&gt;keychain groups&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/single-sign-on-macos-ios&#34;&gt;Silent SSO for MSAL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;iOS only steps:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add your application&#39;s redirect URI scheme to your &lt;code&gt;Info.plist&lt;/code&gt; file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;    &amp;lt;dict&amp;gt;&#xA;        &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;&#xA;        &amp;lt;array&amp;gt;&#xA;            &amp;lt;string&amp;gt;msauth.$(PRODUCT_BUNDLE_IDENTIFIER)&amp;lt;/string&amp;gt;&#xA;        &amp;lt;/array&amp;gt;&#xA;    &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add &lt;code&gt;LSApplicationQueriesSchemes&lt;/code&gt; to allow making call to Microsoft Authenticator if installed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note that “msauthv3” scheme is needed when compiling your app with Xcode 11 and later.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;LSApplicationQueriesSchemes&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;&#x9;&amp;lt;string&amp;gt;msauthv2&amp;lt;/string&amp;gt;&#xA;&#x9;&amp;lt;string&amp;gt;msauthv3&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more info about &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/reply-url&#34;&gt;configuring redirect uri for MSAL&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;To handle a callback, add the following to &lt;code&gt;appDelegate&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -&amp;gt; Bool {&#xA;        &#xA;&#x9;return MSALPublicClientApplication.handleMSALResponse(url, sourceApplication: options[UIApplication.OpenURLOptionsKey.sourceApplication] as? String)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;- (BOOL)application:(UIApplication *)app&#xA;            openURL:(NSURL *)url&#xA;            options:(NSDictionary&amp;lt;UIApplicationOpenURLOptionsKey,id&amp;gt; *)options&#xA;{&#xA;    return [MSALPublicClientApplication handleMSALResponse:url &#xA;                                         sourceApplication:options[UIApplicationOpenURLOptionsSourceApplicationKey]];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note, that if you adopted UISceneDelegate on iOS 13+&lt;/strong&gt;, MSAL callback needs to be placed into the appropriate delegate method of UISceneDelegate instead of AppDelegate. MSAL &lt;code&gt;handleMSALResponse:sourceApplication:&lt;/code&gt; must be called only once for each URL. If you support both UISceneDelegate and UIApplicationDelegate for compatibility with older iOS, MSAL callback would need to be placed into both files.&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func scene(_ scene: UIScene, openURLContexts URLContexts: Set&amp;lt;UIOpenURLContext&amp;gt;) {&#xA;        &#xA;        guard let urlContext = URLContexts.first else {&#xA;            return&#xA;        }&#xA;        &#xA;        let url = urlContext.url&#xA;        let sourceApp = urlContext.options.sourceApplication&#xA;        &#xA;        MSALPublicClientApplication.handleMSALResponse(url, sourceApplication: sourceApp)&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)scene:(UIScene *)scene openURLContexts:(NSSet&amp;lt;UIOpenURLContext *&amp;gt; *)URLContexts&#xA;{&#xA;    UIOpenURLContext *context = URLContexts.anyObject;&#xA;    NSURL *url = context.URL;&#xA;    NSString *sourceApplication = context.options.sourceApplication;&#xA;    &#xA;    [MSALPublicClientApplication handleMSALResponse:url sourceApplication:sourceApplication];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS only steps:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure your application is signed with a valid development certificate. While MSAL will still work in the unsigned mode, it will behave differently around cache persistence.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using MSAL&lt;/h2&gt; &#xA;&lt;h3&gt;Creating an Application Object&lt;/h3&gt; &#xA;&lt;p&gt;Use the client ID from your app listing when initializing your MSALPublicClientApplication object:&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let config = MSALPublicClientApplicationConfig(clientId: &#34;&amp;lt;your-client-id-here&amp;gt;&#34;)&#xA;let application = try? MSALPublicClientApplication(configuration: config) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;NSError *msalError = nil;&#xA;    &#xA;MSALPublicClientApplicationConfig *config = [[MSALPublicClientApplicationConfig alloc] initWithClientId:@&#34;&amp;lt;your-client-id-here&amp;gt;&#34;];&#xA;MSALPublicClientApplication *application = [[MSALPublicClientApplication alloc] initWithConfiguration:config error:&amp;amp;msalError];&#xA;    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Acquiring Your First Token interactively&lt;/h3&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if os(iOS)&#xA;&#x9;let viewController = ... // Pass a reference to the view controller that should be used when getting a token interactively&#xA;&#x9;let webviewParameters = MSALWebviewParameters(authPresentationViewController: viewController)&#xA;#else&#xA;&#x9;let webviewParameters = MSALWebviewParameters()&#xA;#endif&#xA;let interactiveParameters = MSALInteractiveTokenParameters(scopes: scopes, webviewParameters: webviewParameters)&#xA;application.acquireToken(with: interactiveParameters, completionBlock: { (result, error) in&#xA;                &#xA;&#x9;guard let authResult = result, error == nil else {&#xA;&#x9;&#x9;print(error!.localizedDescription)&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;                &#xA;&#x9;// Get access token from result&#xA;&#x9;let accessToken = authResult.accessToken&#xA;                &#xA;&#x9;// You&#39;ll want to get the account identifier to retrieve and reuse the account for later acquireToken calls&#xA;&#x9;let accountIdentifier = authResult.account.identifier&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;#if TARGET_OS_IPHONE&#xA;    UIViewController *viewController = ...; // Pass a reference to the view controller that should be used when getting a token interactively&#xA;    MSALWebviewParameters *webParameters = [[MSALWebviewParameters alloc] initWithAuthPresentationViewController:viewController];&#xA;#else&#xA;    MSALWebviewParameters *webParameters = [MSALWebviewParameters new];&#xA;#endif &#xA;&#xA;MSALInteractiveTokenParameters *interactiveParams = [[MSALInteractiveTokenParameters alloc] initWithScopes:scopes webviewParameters:webParameters];&#xA;[application acquireTokenWithParameters:interactiveParams completionBlock:^(MSALResult *result, NSError *error) {&#xA;&#x9;if (!error)&#x9;&#xA;&#x9;{&#xA;&#x9;&#x9;// You&#39;ll want to get the account identifier to retrieve and reuse the account&#xA;&#x9;&#x9;// for later acquireToken calls&#xA;&#x9;&#x9;NSString *accountIdentifier = result.account.identifier;&#xA;            &#xA;&#x9;&#x9;NSString *accessToken = result.accessToken;&#xA;&#x9;}&#xA;  &#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;// Check the error&#xA;&#x9;}&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Our library uses the ASWebAuthenticationSession for authentication on iOS 12 by default. See more information about &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/customize-webviews&#34;&gt;default values, and support for other iOS versions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Silently Acquiring an Updated Token&lt;/h3&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;guard let account = try? application.account(forIdentifier: accountIdentifier) else { return }&#xA;let silentParameters = MSALSilentTokenParameters(scopes: scopes, account: account)&#xA;application.acquireTokenSilent(with: silentParameters) { (result, error) in&#xA;            &#xA;&#x9;guard let authResult = result, error == nil else {&#xA;                &#xA;&#x9;let nsError = error! as NSError&#xA;                &#xA;&#x9;&#x9;if (nsError.domain == MSALErrorDomain &amp;amp;&amp;amp;&#xA;&#x9;&#x9;&#x9;nsError.code == MSALError.interactionRequired.rawValue) {&#xA;                    &#xA;&#x9;&#x9;&#x9;// Interactive auth will be required&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;            &#xA;&#x9;// Get access token from result&#xA;&#x9;let accessToken = authResult.accessToken&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSError *error = nil;&#xA;MSALAccount *account = [application accountForIdentifier:accountIdentifier error:&amp;amp;error];&#xA;if (!account)&#xA;{&#xA;    // handle error&#xA;    return;&#xA;}&#xA;    &#xA;MSALSilentTokenParameters *silentParams = [[MSALSilentTokenParameters alloc] initWithScopes:scopes account:account];&#xA;[application acquireTokenSilentWithParameters:silentParams completionBlock:^(MSALResult *result, NSError *error) {&#xA;    if (!error)&#xA;    {&#xA;        NSString *accessToken = result.accessToken;&#xA;    }&#xA;    else&#xA;    {&#xA;        // Check the error&#xA;        if ([error.domain isEqual:MSALErrorDomain] &amp;amp;&amp;amp; error.code == MSALErrorInteractionRequired)&#xA;        {&#xA;            // Interactive auth will be required&#xA;        }&#xA;            &#xA;        // Other errors may require trying again later, or reporting authentication problems to the user&#xA;    }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Responding to an Interaction Required Error&lt;/h3&gt; &#xA;&lt;p&gt;Occasionally user interaction will be required to get a new access token, when this occurs you will receive a &lt;code&gt;MSALErrorInteractionRequired&lt;/code&gt; error when trying to silently acquire a new token. In those cases call &lt;code&gt;acquireToken:&lt;/code&gt; with the same account and scopes as the failing &lt;code&gt;acquireTokenSilent:&lt;/code&gt; call. It is recommended to display a status message to the user in an unobtrusive way before invoking interactive &lt;code&gt;acquireToken:&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please see &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-handling-exceptions&#34;&gt;MSAL error handling guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Microsoft Enterprise SSO plug-in for Apple devices&lt;/h3&gt; &#xA;&lt;p&gt;Microsoft has recently released a new plug-in that uses the newly announced Apple feature called &lt;a href=&#34;https://developer.apple.com/documentation/authenticationservices&#34;&gt;Enterprise Single Sign-On&lt;/a&gt;. Microsoft Enterprise SSO plug-in for Apple devices offers the following benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comes delivered in Microsoft Authenticator app automatically and can be enabled by any MDM.&lt;/li&gt; &#xA; &lt;li&gt;Provides seamless SSO for Active Directory joined accounts across all applications that support Apple&#39;s Enterprise Single Sign-On feature.&lt;/li&gt; &#xA; &lt;li&gt;COMING SOON: Provides seamless SSO across Safari browsers and applications on the device.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;MSAL 1.1.0 and above will use Microsoft Enterprise SSO plug-in automatically instead of the Microsoft Authenticator app when it is active on the device. To use Microsoft Enterprise SSO plug-in in your tenant, you need to enable it in your MDM profile.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/apple-sso-plugin&#34;&gt;more information&lt;/a&gt; about configuring Microsoft Enterprise SSO plug-in for your device &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/apple-sso-plugin&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Single Account Mode&lt;/h3&gt; &#xA;&lt;p&gt;If your app needs to support just one signed-in user at a time, MSAL provides a simple way to read the signed in account. This API must be also used when you are building an application to run on devices that are configured as shared devices - meaning that a single corporate device is shared between multiple employees. Employees can sign in to their devices and access customer information quickly. When they are finished with their shift or task, they will be able to sign-out of all apps on the shared device.&lt;/p&gt; &#xA;&lt;p&gt;Here is a code snippet that shows how you can retrieve current account. You must call API every time when your app comes to foreground or before performing a sensitive operation to detect any signed-in account changes.&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let msalParameters = MSALParameters()&#xA;msalParameters.completionBlockQueue = DispatchQueue.main&#xA;                &#xA;application.getCurrentAccount(with: msalParameters, completionBlock: { (currentAccount, previousAccount, error) in&#xA;            &#xA;&#x9;// currentAccount is the currently signed in account&#xA;&#x9;// previousAccount is the previously signed in account if any&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MSALParameters *parameters = [MSALParameters new];&#xA;parameters.completionBlockQueue = dispatch_get_main_queue();&#xA;        &#xA;[application getCurrentAccountWithParameters:parameters&#xA;                             completionBlock:^(MSALAccount * _Nullable account, MSALAccount * _Nullable previousAccount, NSError * _Nullable error)&#xA;{&#xA;&#x9;// currentAccount is the currently signed in account&#xA;&#x9;// previousAccount is the previously signed in account if any&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Accounts Mode&lt;/h3&gt; &#xA;&lt;p&gt;MSAL also provides a public API to query multiple accounts, granted that they exist in the MSAL cache.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure the umbrella header MSAL-umbrella.h is imported (just MSAL for Swift)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create config, then use it to initialize an application object&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Also initialize MSALAccountEnumerationParameters object with the account identifier. Each MSALAccount object has a parameter called “identifier”, which represents the unique account identifier associated with the given MSALAccount object. We recommend using it as the primary search criterion.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then invoke the API &#34;accountsFromDeviceForParameters&#34; from the application object using the enumeration parameter. If you have multiple accounts in MSAL cache, it will return an array containing MSALAccounts that have the account identifier you specified in the previous step.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once the MSAL account is retrieved, invoke acquire token silent operation&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#import MSAL //Make sure to import MSAL  &#xA;&#xA;let config = MSALPublicClientApplicationConfig(clientId:clientId&#xA;                                           &#x9;redirectUri:redirectUri&#xA;                                            &#x9;authority:authority)&#xA;guard let application = MSALPublicClientApplication(configuration: config) else { return }&#xA;&#xA;let accountIdentifier = &#34;9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca&#34;&#xA;let parameters = MSALAccountEnumerationParameters(identifier:accountIdentifier)&#xA;&#xA;var scopeArr = [&#34;https://graph.microsoft.com/.default&#34;]&#xA;&#xA;if #available(iOS 13.0, macOS 10.15, *)&#xA;{&#xA;&#x9; application.accountsFromDeviceForParameters(with: parameters, completionBlock:{(accounts, error) in&#xA;         if let error = error &#xA;         {&#xA;            //Handle error&#xA;         }&#xA;         &#xA;         guard let accountObjs = accounts else {return}&#xA;         &#xA;         let tokenParameters = MSALSilentTokenParameters(scopes:scopeArr, account: accountObjs[0]);&#xA;                                                                                                   &#xA;         application.acquireTokenSilentWithParameters(with: tokenParameters, completionBlock:{(result, error) in &#xA;                     if let error = error&#xA;                     {&#xA;                         //handle error&#xA;                     }&#xA;                                       &#xA;                     guard let resp = result else {return} //process result&#xA;                                                                                             &#xA;         })                                                               &#xA;                                                                                                                                                             &#xA;   })&#xA;  &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;//import other key libraries  &#xA;#import &#34;MSAL-umbrella.h&#34; //Make sure to import umbrella file &#xA;&#xA;    MSALPublicClientApplicationConfig *config = [[MSALPublicClientApplicationConfig alloc] initWithClientId:clientId&#xA;     redirectUri:redirectUri&#xA;       authority:authority];&#xA;&#xA;    MSALPublicClientApplication *application = [[MSALPublicClientApplication alloc] initWithConfiguration:config error:&amp;amp;error];&#xA;    MSALAccountEnumerationParameters *parameters = [[MSALAccountEnumerationParameters alloc] initWithIdentifier:@&#34;9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca&#34;]; //init with account identifier&#xA;&#xA;    NSArray&amp;lt;NSString *&amp;gt; *scopeArr = [[NSArray alloc] initWithObjects: @&#34;https://graph.microsoft.com/.default&#34;,nil]; //define scope&#xA;&#xA;    if (@available(iOS 13.0, macOS 10.15, *)) //Currently, this public API requires iOS version 13 or greater.&#xA;    {&#xA;        [application accountsFromDeviceForParameters:parameters&#xA;                                     completionBlock:^(NSArray&amp;lt;MSALAccount *&amp;gt; * _Nullable accounts, __unused NSError * _Nullable error)&#xA;        {&#xA;            if (error)&#xA;            {&#xA;              //Log error &amp;amp; return &#xA;            }&#xA;          &#xA;            if (accounts)&#xA;            {&#xA;                NSLog(@&#34;hi there&#34;);&#xA;                MSALSilentTokenParameters *tokenParameters = [[MSALSilentTokenParameters alloc] initWithScopes:scopeArr account:accounts[0]];&#xA;&#xA;                [application acquireTokenSilentWithParameters:tokenParameters&#xA;                                completionBlock:^(MSALResult * _Nullable result, NSError * _Nullable error)&#xA;                 {&#xA;                    if (error)&#xA;                    {&#xA;                        //Log Error &amp;amp; return &#xA;                    }&#xA;                    if (result)&#xA;                    {&#xA;                        //process result&#xA;                    }&#xA;                }&#xA;                 ];&#xA;            }&#xA;     &#xA;        }];&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Detect shared device mode&lt;/h3&gt; &#xA;&lt;p&gt;Use following code to read current device configuration, including whether device is configured as shared:&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;application.getDeviceInformation(with: nil, completionBlock: { (deviceInformation, error) in&#xA;                &#xA;&#x9;guard let deviceInfo = deviceInformation else {&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;                &#xA;&#x9;let isSharedDevice = deviceInfo.deviceMode == .shared&#xA;&#x9;// Change your app UX if needed&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[application getDeviceInformationWithParameters:nil&#xA;                                completionBlock:^(MSALDeviceInformation * _Nullable deviceInformation, NSError * _Nullable error)&#xA;{&#xA;&#x9;if (!deviceInformation)&#xA;&#x9;{&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;            &#xA;&#x9;BOOL isSharedDevice = deviceInformation.deviceMode == MSALDeviceModeShared;&#xA;&#x9;// Change your app UX if needed&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Implement signout&lt;/h3&gt; &#xA;&lt;p&gt;To signout account from your app, call MSAL&#39;s signout API. You can also optionally sign out from the browser. When MSAL is running on a shared device, signout API will signout globally from all apps on user&#39;s device.&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let account = .... /* account retrieved above */&#xA;&#xA;let signoutParameters = MSALSignoutParameters(webviewParameters: self.webViewParameters!)&#xA;signoutParameters.signoutFromBrowser = false&#xA;            &#xA;application.signout(with: account, signoutParameters: signoutParameters, completionBlock: {(success, error) in&#xA;                &#xA;&#x9;if let error = error {&#xA;&#x9;&#x9;// Signout failed&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;                &#xA;&#x9;// Sign out completed successfully&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MSALAccount *account = ... /* account retrieved above */;&#xA;        &#xA;MSALSignoutParameters *signoutParameters = [[MSALSignoutParameters alloc] initWithWebviewParameters:webViewParameters];&#xA;signoutParameters.signoutFromBrowser = NO;&#xA;        &#xA;[application signoutWithAccount:account signoutParameters:signoutParameters completionBlock:^(BOOL success, NSError * _Nullable error)&#xA;{&#xA;&#x9;if (!success)&#xA;&#x9;{&#xA;&#x9;&#x9;// Signout failed&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;            &#xA;&#x9;// Sign out completed successfully&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Versions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;iOS&lt;/strong&gt; - MSAL supports iOS 11 and above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt; - MSAL supports macOS (OSX) 10.12 and above.&lt;/p&gt; &#xA;&lt;h2&gt;Migrating from ADAL Objective-C&lt;/h2&gt; &#xA;&lt;p&gt;MSAL Objective-C is designed to support smooth migration from ADAL Objective-C library. For detailed design and instructions, follow this &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/migrate-objc-adal-msal&#34;&gt;guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Additional guidance&lt;/h2&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/wiki&#34;&gt;wiki&lt;/a&gt; is intended to document common patterns, error handling and debugging, functionality (e.g. logging, telemetry), and active bugs. You can find it &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/wiki&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community Help and Support&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/msal&#34;&gt;Stack Overflow&lt;/a&gt; with the community to provide support. We highly recommend you ask your questions on Stack Overflow first and browse existing issues to see if someone has asked your question before.&lt;/p&gt; &#xA;&lt;p&gt;If you find a bug or have a feature request, please raise the issue on &lt;a href=&#34;https://raw.githubusercontent.com/AzureAD/issues&#34;&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To provide a recommendation, visit our &lt;a href=&#34;https://feedback.azure.com/forums/169401-azure-active-directory&#34;&gt;User Voice page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Submit Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d like your thoughts on this library. Please complete &lt;a href=&#34;https://forms.office.com/r/xuBV0CzEih&#34;&gt;this short survey.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We enthusiastically welcome contributions and feedback. You can clone the repo and start contributing now.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Security Library&lt;/h2&gt; &#xA;&lt;p&gt;This library controls how users sign-in and access services. We recommend you always take the latest version of our library in your app when possible. We use &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt;, so you can control the risk associated with updating your app. As an example, always downloading the latest minor version number (e.g. x.&lt;em&gt;y&lt;/em&gt;.x) ensures you get the latest security and feature enhancements, but our API surface remains the same. You can always see the latest version and release notes under the Releases tab of GitHub.&lt;/p&gt; &#xA;&lt;h3&gt;Security Reporting&lt;/h3&gt; &#xA;&lt;p&gt;If you find a security issue with our libraries or services please report it to &lt;a href=&#34;mailto:secure@microsoft.com&#34;&gt;secure@microsoft.com&lt;/a&gt; with as much detail as possible. Your submission may be eligible for a bounty through the &lt;a href=&#34;http://aka.ms/bugbounty&#34;&gt;Microsoft Bounty&lt;/a&gt; program. Please do not post security issues to GitHub Issues or any other public site. We will contact you shortly upon receiving the information. We encourage you to get notifications of when security incidents occur by visiting &lt;a href=&#34;https://technet.microsoft.com/en-us/security/dd252948&#34;&gt;this page&lt;/a&gt; and subscribing to Security Advisory Alerts.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © Microsoft Corporation. All rights reserved. Licensed under the MIT License (the “License”).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AliSoftware/OHHTTPStubs</title>
    <updated>2022-10-09T01:44:57Z</updated>
    <id>tag:github.com,2022-10-09:/AliSoftware/OHHTTPStubs</id>
    <link href="https://github.com/AliSoftware/OHHTTPStubs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stub your network requests easily! Test your apps with fake network data and custom response time, response code and headers!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OHHTTPStubs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/OHHTTPStubs&#34;&gt;&lt;img src=&#34;http://cocoapod-badges.herokuapp.com/p/OHHTTPStubs/badge.png&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-2.x%2F3.x%2F4.x%2F5.x-orange.svg?sanitize=true&#34; alt=&#34;Language: Swift-2.x/3.x/4.x/5.x&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/AliSoftware/OHHTTPStubs&#34;&gt;&lt;img src=&#34;https://travis-ci.org/AliSoftware/OHHTTPStubs.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/OHHTTPStubs&#34;&gt;&lt;img src=&#34;http://cocoapod-badges.herokuapp.com/v/OHHTTPStubs/badge.png&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/carthage-supported-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/spm-supported-4BC51D.svg?style=flat&#34; alt=&#34;Swift Package Manager Supported&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is a library designed to stub your network requests very easily. It can help you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;test your apps with &lt;strong&gt;fake network data&lt;/strong&gt; (stubbed from file) and &lt;strong&gt;simulate slow networks&lt;/strong&gt;, to check your application behavior in bad network conditions&lt;/li&gt; &#xA; &lt;li&gt;write &lt;strong&gt;unit tests&lt;/strong&gt; that use fake network data from your fixtures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It works with &lt;code&gt;NSURLConnection&lt;/code&gt;, &lt;code&gt;NSURLSession&lt;/code&gt;, &lt;code&gt;AFNetworking&lt;/code&gt;, &lt;code&gt;Alamofire&lt;/code&gt; or any networking framework that use Cocoa&#39;s URL Loading System.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=TRTU3UEWEHV92&#34; title=&#34;Donate&#34;&gt;&lt;img alt=&#34;Donate&#34; src=&#34;https://www.paypalobjects.com/webstatic/mktg/merchant_portal/button/donate.en.png&#34; height=&#34;32px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Documentation &amp;amp; Usage Examples&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; headers are fully documented using Appledoc-like / Headerdoc-like comments in the header files. You can also &lt;a href=&#34;http://cocoadocs.org/docsets/OHHTTPStubs&#34;&gt;read the &lt;strong&gt;online documentation&lt;/strong&gt; here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Basic example&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;In Objective-C&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[HTTPStubs stubRequestsPassingTest:^BOOL(NSURLRequest *request) {&#xA;  return [request.URL.host isEqualToString:@&#34;mywebservice.com&#34;];&#xA;} withStubResponse:^HTTPStubsResponse*(NSURLRequest *request) {&#xA;  // Stub it with our &#34;wsresponse.json&#34; stub file (which is in same bundle as self)&#xA;  NSString* fixture = OHPathForFile(@&#34;wsresponse.json&#34;, self.class);&#xA;  return [HTTPStubsResponse responseWithFileAtPath:fixture&#xA;            statusCode:200 headers:@{@&#34;Content-Type&#34;:@&#34;application/json&#34;}];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open=&#34;1&#34;&gt; &#xA; &lt;summary&gt;In Swift&lt;/summary&gt; &#xA; &lt;p&gt;This example is using the Swift helpers found in &lt;code&gt;OHHTTPStubsSwift.swift&lt;/code&gt; provided by the &lt;code&gt;OHHTTPStubs/Swift&lt;/code&gt; subspec or &lt;code&gt;OHHTTPStubs&lt;/code&gt; package.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stub(condition: isHost(&#34;mywebservice.com&#34;)) { _ in&#xA;  // Stub it with our &#34;wsresponse.json&#34; stub file (which is in same bundle as self)&#xA;  let stubPath = OHPathForFile(&#34;wsresponse.json&#34;, type(of: self))&#xA;  return fixture(filePath: stubPath!, headers: [&#34;Content-Type&#34;:&#34;application/json&#34;])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you&#39;re using &lt;code&gt;OHHTTPStubs&lt;/code&gt;&#39;s Swiftier API (&lt;code&gt;OHHTTPStubsSwift.swift&lt;/code&gt; and the &lt;code&gt;Swift&lt;/code&gt; subspec or &lt;code&gt;OHTTPStubsSwift&lt;/code&gt; package), you can also compose the matcher functions like this: &lt;code&gt;stub(isScheme(&#34;http&#34;) &amp;amp;&amp;amp; isHost(&#34;myhost&#34;)) { … }&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;More examples &amp;amp; Help Topics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For a lot more examples, see the dedicated &#34;&lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/wiki/Usage-Examples&#34;&gt;Usage Examples&lt;/a&gt;&#34; wiki page.&lt;/li&gt; &#xA; &lt;li&gt;The wiki also contain &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/wiki&#34;&gt;some articles that can help you get started&lt;/a&gt; with (and troubleshoot if needed) &lt;code&gt;OHHTTPStubs&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Recording requests to replay them later&lt;/h2&gt; &#xA;&lt;p&gt;Instead of writing the content of the stubs you want to use manually, you can use tools like &lt;a href=&#34;https://github.com/capitalone/SWHttpTrafficRecorder&#34;&gt;SWHttpTrafficRecorder&lt;/a&gt; to record network requests into files. This way you can later use those files as stub responses.&lt;br&gt; This tool can record all three formats that are supported by &lt;code&gt;OHHTTPStubs&lt;/code&gt; (the &lt;code&gt;HTTPMessage&lt;/code&gt; format, the simple response boby/content file, and the &lt;code&gt;Mocktail&lt;/code&gt; format).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(There are also other ways to perform a similar task, including using &lt;code&gt;curl -is &amp;lt;url&amp;gt; &amp;gt;foo.response&lt;/code&gt; to generate files compatible with the &lt;code&gt;HTTPMessage&lt;/code&gt; format, or using other network recording libraries similar to &lt;code&gt;SWHttpTrafficRecorder&lt;/code&gt;).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Compatibility&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is compatible with &lt;strong&gt;iOS5+&lt;/strong&gt;, &lt;strong&gt;OS X 10.7+&lt;/strong&gt;, &lt;strong&gt;tvOS&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; also works with &lt;code&gt;NSURLSession&lt;/code&gt; as well as any network library wrapping them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is &lt;strong&gt;fully compatible with Swift 3.x, 4.x and Swift 5.x&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://developer.apple.com/swift/blog/?id=25&#34;&gt;Nullability annotations&lt;/a&gt; have also been added to the ObjC API to allow a cleaner API when used from Swift even if you don&#39;t use the dedicated Swift API wrapper provided by &lt;code&gt;OHHTTPStubsSwift.swift&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Updating to Version 9.0+&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;All classes dropped the &lt;code&gt;OH&lt;/code&gt; prefix (&lt;code&gt;OHHHTTPStubs&lt;/code&gt; -&amp;gt; &lt;code&gt;HTTPStubs&lt;/code&gt;, &lt;code&gt;OHHTTPStubsResponse&lt;/code&gt; -&amp;gt; &lt;code&gt;HTTPStubsResponse&lt;/code&gt;, etc).&lt;/li&gt; &#xA;  &lt;li&gt;The &lt;code&gt;OHPathHelpers&lt;/code&gt; class was renamed &lt;code&gt;HTTPStubsPathHelpers&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;No method and module names were changed.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Installing in your projects&lt;/h1&gt; &#xA;&lt;h2&gt;CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://guides.cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is the recommended way.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;intend to use &lt;code&gt;OHHTTPStubs&lt;/code&gt; from Objective-C only&lt;/strong&gt;, add &lt;code&gt;pod &#39;OHHTTPStubs&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;intend to use &lt;code&gt;OHHTTPStubs&lt;/code&gt; from Swift&lt;/strong&gt;, add &lt;code&gt;pod &#39;OHHTTPStubs/Swift&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt; instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;OHHTTPStubs/Swift&#39; # includes the Default subspec, with support for NSURLSession &amp;amp; JSON, and the Swiftier API wrappers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;All available subspecs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is split into subspecs so that when using Cocoapods, you can get only what you need, no more, no less.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The default subspec includes &lt;code&gt;NSURLSession&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt;, and &lt;code&gt;OHPathHelpers&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;Swift&lt;/code&gt; subspec adds the Swiftier API to that default subspec&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HTTPMessage&lt;/code&gt; and &lt;code&gt;Mocktail&lt;/code&gt; are opt-in subspecs: list them explicitly if you need them&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHPathHelpers&lt;/code&gt; doesn&#39;t depend on &lt;code&gt;Core&lt;/code&gt; and can be used independently of &lt;code&gt;OHHTTPStubs&lt;/code&gt; altogether&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;List of all the subspecs &amp;amp; their dependencies&lt;/summary&gt; &#xA; &lt;p&gt;Here&#39;s a list of which subspecs are included for each of the different lines you could use in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Subspec&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Core&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;NSURLSession&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;JSON&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Swift&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;OHPathHelpers&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;HTTPMessage&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Mocktail&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Default&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Swift&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Core&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/NSURLSession&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/JSON&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/OHPathHelpers&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/HTTPMessage&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Mocktail&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Swift Package Manager&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is compatible with Swift Package Manager, and provides 2 targets for consumption: &lt;code&gt;OHHTTPStubs&lt;/code&gt; and &lt;code&gt;OHHTTPStubsSwift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is equivalent to the &lt;code&gt;OHHTTPStubs&lt;/code&gt; subspec.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubsSwift&lt;/code&gt; is equivalent to the &lt;code&gt;OHHTTPStubs/Swift&lt;/code&gt; subspec.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: We currently do not have support for the HTTPMessage or Mocktail subspecs in Swift Package Manager. If you are interested in these, please open an issue to explain your needs.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Carthage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is also compatible with Carthage. Just add it to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The &lt;code&gt;OHHTTPStubs.framework&lt;/code&gt; built with Carthage will include &lt;strong&gt;all&lt;/strong&gt; features of &lt;code&gt;OHHTTPStubs&lt;/code&gt; turned on (in other words, all subspecs of the pod), including &lt;code&gt;NSURLSession&lt;/code&gt; and &lt;code&gt;JSON&lt;/code&gt; support, &lt;code&gt;OHPathHelpers&lt;/code&gt;, &lt;code&gt;HTTPMessage&lt;/code&gt; and &lt;code&gt;Mocktail&lt;/code&gt; support, and the Swiftier API.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using the right Swift version for your project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; supports Swift 3.0 (Xcode 8+), Swift 3.1 (Xcode 8.3+), Swift 3.2 (Xcode 9.0+), Swift 4.0 (Xcode 9.0+), Swift 4.1 (Xcode 9.3+), Swift 4.2 (Xcode 10+), Swift 5.0 (Xcode 10.2), and Swift 5.1 (Xcode 11) however we are only testing Swift 4.x (using Xcode 9.1 and 10.1) and Swift 5.x (using Xcode 10.2 AND 11) in CI.&lt;/p&gt; &#xA;&lt;p&gt;Here are some details about the correct setup you need depending on how you integrated &lt;code&gt;OHHTTPStubs&lt;/code&gt; into your project.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;CocoaPods: nothing to do&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If you use CocoaPods version &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/releases/tag/1.1.0.beta.1&#34;&gt;&lt;code&gt;1.1.0.beta.1&lt;/code&gt;&lt;/a&gt; or later, then CocoaPods will compile &lt;code&gt;OHHTTPStubs&lt;/code&gt; with the right Swift Version matching the one you use for your project automatically. You have nothing to do! 🎉&lt;/p&gt; &#xA; &lt;p&gt;For more info, see &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/pull/5540&#34;&gt;CocoaPods/CocoaPods#5540&lt;/a&gt; and &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/pull/5760&#34;&gt;CocoaPods/CocoaPods#5760&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Carthage: choose the right version&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;The project is set up with &lt;code&gt;SWIFT_VERSION=5.0&lt;/code&gt; on &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;This means that the framework on &lt;code&gt;master&lt;/code&gt; will build using:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Swift 5.1 on Xcode 11&lt;/li&gt; &#xA;  &lt;li&gt;Swift 5.0 on Xcode 10.2&lt;/li&gt; &#xA;  &lt;li&gt;Swift 4.2 on Xcode 10.1&lt;/li&gt; &#xA;  &lt;li&gt;Swift 4.0 on Xcode 9.1&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;If you want Carthage to build the framework with Swift 3.x you can:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;either use an older Xcode version&lt;/li&gt; &#xA;  &lt;li&gt;or use the previous version of &lt;code&gt;OHHTTPStubs&lt;/code&gt; (6.2.0) — whose &lt;code&gt;master&lt;/code&gt; branch uses &lt;code&gt;3.0&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;or fork the repo just to change the &lt;code&gt;SWIFT_VERSION&lt;/code&gt; build setting to &lt;code&gt;3.0&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;or build the framework passing a &lt;code&gt;SWIFT_VERSION&lt;/code&gt; to carthage via &lt;code&gt;XCODE_XCCONFIG_FILE=&amp;lt;config file declaring SWIFT_VERSION&amp;gt; carthage build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Special Considerations&lt;/h1&gt; &#xA;&lt;h2&gt;Using OHHTTPStubs in your unit tests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is ideal to write unit tests that normally would perform network requests. But if you use it in your unit tests, don&#39;t forget to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;remove any stubs you installed after each test — to avoid those stubs to still be installed when executing the next Test Case — by calling &lt;code&gt;[HTTPStubs removeAllStubs]&lt;/code&gt; in your &lt;code&gt;tearDown&lt;/code&gt; method. &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/wiki/Remove-stubs-after-each-test&#34;&gt;see this wiki page for more info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;be sure to wait until the request has received its response before doing your assertions and letting the test case finish (like for any asynchronous test). &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/wiki/OHHTTPStubs-and-asynchronous-tests&#34;&gt;see this wiki page for more info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Automatic loading&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is automatically loaded and installed (at the time the library is loaded in memory), both for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;requests made using &lt;code&gt;NSURLConnection&lt;/code&gt; or &lt;code&gt;[NSURLSession sharedSession]&lt;/code&gt; — &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/raw/master/OHHTTPStubs/Sources/OHHTTPStubs.m#L107-L113&#34;&gt;thanks to this code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;requests made using a &lt;code&gt;NSURLSession&lt;/code&gt; that was created via &lt;code&gt;[NSURLSession sessionWithConfiguration:…]&lt;/code&gt; and using either &lt;code&gt;[NSURLSessionConfiguration defaultSessionConfiguration]&lt;/code&gt; or &lt;code&gt;[NSURLSessionConfiguration ephemeralSessionConfiguration]&lt;/code&gt; configuration — thanks to &lt;a href=&#34;http://nshipster.com/method-swizzling/&#34;&gt;method swizzling&lt;/a&gt; done &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/raw/master/OHHTTPStubs/Sources/NSURLSession/HTTPStubs+NSURLSessionConfiguration.m&#34;&gt;here in the code&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need to disable (and re-enable) &lt;code&gt;OHHTTPStubs&lt;/code&gt; — globally or per &lt;code&gt;NSURLSession&lt;/code&gt; — you can use &lt;code&gt;[HTTPStubs setEnabled:]&lt;/code&gt; / &lt;code&gt;[HTTPStubs setEnabled:forSessionConfiguration:]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; &lt;strong&gt;can&#39;t work on background sessions&lt;/strong&gt; (sessions created using &lt;code&gt;[NSURLSessionConfiguration backgroundSessionConfiguration]&lt;/code&gt;) because background sessions don&#39;t allow the use of custom &lt;code&gt;NSURLProtocols&lt;/code&gt; and are handled by the iOS Operating System itself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; don&#39;t simulate data upload. The &lt;code&gt;NSURLProtocolClient&lt;/code&gt; &lt;code&gt;@protocol&lt;/code&gt; does not provide a way to signal the delegate that data has been &lt;strong&gt;sent&lt;/strong&gt; (only that some has been loaded), so any data in the &lt;code&gt;HTTPBody&lt;/code&gt; or &lt;code&gt;HTTPBodyStream&lt;/code&gt; of an &lt;code&gt;NSURLRequest&lt;/code&gt;, or data provided to &lt;code&gt;-[NSURLSession uploadTaskWithRequest:fromData:];&lt;/code&gt; will be ignored, and more importantly, the &lt;code&gt;-URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:&lt;/code&gt; delegate method will never be called when you stub the request using &lt;code&gt;OHHTTPStubs&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHTTPStubs&lt;/code&gt; &lt;strong&gt;has a known issue with redirects&lt;/strong&gt; that we believe is an Apple bug. It has been discussed &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/issues/230&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/issues/280&#34;&gt;here&lt;/a&gt;. The actual result of this bug is that redirects with a zero second delay may nondeterministically end up with a null response.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;As far as I know, there&#39;s nothing we can do about those three limitations. Please let me know if you know a solution that would make that possible anyway.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Submitting to the App Store&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; &lt;strong&gt;can be used&lt;/strong&gt; on apps submitted &lt;strong&gt;on the App Store&lt;/strong&gt;. It does not use any private API and nothing prevents you from shipping it.&lt;/p&gt; &#xA;&lt;p&gt;But you generally only use stubs during the development phase and want to remove your stubs when submitting to the App Store. So be careful to only include &lt;code&gt;OHHTTPStubs&lt;/code&gt; when needed (only in your test targets, or only inside &lt;code&gt;#if DEBUG&lt;/code&gt; sections, or by using &lt;a href=&#34;https://guides.cocoapods.org/syntax/podfile.html#pod&#34;&gt;per-Build-Configuration pods&lt;/a&gt;) to avoid forgetting to remove it when the time comes that you release for the App Store and you want your requests to hit the real network!&lt;/p&gt; &#xA;&lt;h1&gt;License and Credits&lt;/h1&gt; &#xA;&lt;p&gt;This project and library has been created by Olivier Halligon (&lt;a href=&#34;https://twitter.com/aligatr&#34;&gt;@aligatr&lt;/a&gt; on Twitter) and is under the MIT License.&lt;/p&gt; &#xA;&lt;p&gt;It has been inspired by &lt;a href=&#34;https://web-beta.archive.org/web/20161219003951/http://www.infinite-loop.dk/blog/2011/09/using-nsurlprotocol-for-injecting-test-data/&#34;&gt;this article from InfiniteLoop.dk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I would also like to thank:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sébastien Duperron (&lt;a href=&#34;https://github.com/Liquidsoul&#34;&gt;@Liquidsoul&lt;/a&gt;) for helping me maintaining this library, triaging and responding to issues and PRs&lt;/li&gt; &#xA; &lt;li&gt;Kevin Harwood (&lt;a href=&#34;https://github.com/kcharwood&#34;&gt;@kcharwood&lt;/a&gt;) for migrating the code to &lt;code&gt;NSInputStream&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jinlian Wang (&lt;a href=&#34;https://github.com/JinlianWang&#34;&gt;@JinlianWang&lt;/a&gt;) for adding Mocktail support&lt;/li&gt; &#xA; &lt;li&gt;and everyone else who contributed to this project on GitHub somehow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to support the development of this library, feel free to &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=TRTU3UEWEHV92&#34; title=&#34;Donate&#34;&gt;&lt;img alt=&#34;Donate&#34; src=&#34;https://www.paypalobjects.com/webstatic/mktg/merchant_portal/button/donate.en.png&#34; height=&#34;25px&#34;&gt;&lt;/a&gt;. Thanks to all contributors so far!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AppsFlyerSDK/AppsFlyerFramework</title>
    <updated>2022-10-09T01:44:57Z</updated>
    <id>tag:github.com,2022-10-09:/AppsFlyerSDK/AppsFlyerFramework</id>
    <link href="https://github.com/AppsFlyerSDK/AppsFlyerFramework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AppsFlyer Apple SDK&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/appsflyer-capacitor-plugin/main/assets/AFLogo_primary.png&#34; width=&#34;450&#34;&gt; &#xA;&lt;h1&gt;AppsFlyerFramework&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/AppsFlyerFramework&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/AppsFlyerFramework.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In order to download and/or get instruction on how to integrate AppsFlyer iOS SDK please visit the following page - &lt;a href=&#34;https://support.appsflyer.com/hc/en-us/sections/201691546-iOS-SDK&#34;&gt;iOS SDK&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;In order for us to provide optimal support, we would kindly ask you to submit any issues to &lt;a href=&#34;mailto:support@appsflyer.com&#34;&gt;support@appsflyer.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;When submitting an issue please specify your AppsFlyer sign-up (account) email , your app ID , reproduction steps, logs, code snippets and any additional relevant information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Swift Package Manager&lt;/h2&gt; &#xA;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;AppsFlyer SDK version 6.1.x+ supports installation via &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;In Xcode go to: &lt;code&gt;File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amit-kremer93/resources/raw/main/1.png&#34; alt=&#34;Step 1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enter the AppsFlyer SDK GitHub repository - &lt;code&gt;https://github.com/AppsFlyerSDK/AppsFlyerFramework&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amit-kremer93/resources/raw/main/2.png&#34; alt=&#34;Step 2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Select the SDK version&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amit-kremer93/resources/raw/main/3.png&#34; alt=&#34;Step 3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Select the AppsFlyerLib library&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amit-kremer93/resources/raw/main/4.png&#34; alt=&#34;Step 4&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In your &lt;code&gt;AppDelegate&lt;/code&gt; file: import AppsFlyerLib module&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amit-kremer93/resources/raw/main/5.png&#34; alt=&#34;Step 5&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Start to use AppsFlyer SDK&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amit-kremer93/resources/raw/main/6.png&#34; alt=&#34;Step 6&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>