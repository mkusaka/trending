<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-01T01:47:49Z</updated>
  <subtitle>Weekly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SAP/macOS-enterprise-privileges</title>
    <updated>2024-12-01T01:47:49Z</updated>
    <id>tag:github.com,2024-12-01:/SAP/macOS-enterprise-privileges</id>
    <link href="https://github.com/SAP/macOS-enterprise-privileges" rel="alternate"></link>
    <summary type="html">&lt;p&gt;For Mac users in enterprise environments, this application gives users control over the administration of their machine by elevating their level of access to administrator privileges on macOS. Users can set a timeframe in the application&#39;s settings to perform specific tasks, such as installing or removing an application.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/SAP/macOS-enterprise-privileges/raw/main/readme_images/github%20banner%20new.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Privileges&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://api.reuse.software/info/github.com/SAP/macOS-enterprise-privileges&#34;&gt;&lt;img src=&#34;https://api.reuse.software/badge/github.com/SAP/macOS-enterprise-privileges&#34; alt=&#34;REUSE status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Privileges is an application for macOS which allows users to work as a standard user for day-to-day tasks, by providing a quick and easy way to request administrator rights. Users can set a timeframe in the application‚Äôs settings to perform specific tasks, such as installing or removing an application. To request admin rights, simply click on the Privileges icon in your Dock.&lt;/p&gt; &#xA;&lt;p&gt;Working as standard user instead of an administrator adds another layer of security to your Mac and is considered a security best practice. We believe all users, including all developers, can benefit from using Privileges.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Privileges supports the following macOS versions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS 15.x&lt;/li&gt; &#xA; &lt;li&gt;macOS 14.x&lt;/li&gt; &#xA; &lt;li&gt;macOS 13.x&lt;/li&gt; &#xA; &lt;li&gt;macOS 12.x&lt;/li&gt; &#xA; &lt;li&gt;macOS 11.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;üõ†Ô∏è Easy install&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;üöÄ&lt;/span&gt; Perfect for day-to-day use&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;‚è∞&lt;/span&gt; Turn on admin rights anytime&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;üîê&lt;/span&gt; Enjoy standard user security&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;üî•&lt;/span&gt; Command line use supported&lt;/p&gt; &#xA;&lt;h2&gt;New Privileges 2 features üî•&lt;/h2&gt; &#xA;&lt;p&gt;üì¶ Installer package&lt;/p&gt; &#xA;&lt;p&gt;‚õîÔ∏è Revoke admin rights at login&lt;/p&gt; &#xA;&lt;p&gt;‚è≥ Unified expiration interval for administrator privileges&lt;/p&gt; &#xA;&lt;p&gt;‚ñ∂Ô∏è Run actions on privilege change&lt;/p&gt; &#xA;&lt;p&gt;üëÜ Command line tool now also supports Touch ID&lt;/p&gt; &#xA;&lt;p&gt;‚öôÔ∏è AppleScript support&lt;/p&gt; &#xA;&lt;p&gt;ü™ù Webhooks&lt;/p&gt; &#xA;&lt;p&gt;üî† Localized in 40 languages&lt;/p&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;p&gt;‚ö°Ô∏è Have a look at how quick and easy you can request admin rights&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/SAP/macOS-enterprise-privileges/raw/main/readme_images/DemoGIF.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Application Management&lt;/h1&gt; &#xA;&lt;p&gt;As of Privileges 1.5.0, it is possible to manage settings for Privileges or the PrivilegesCLI command line tool using a macOS configuration profile. &lt;a href=&#34;https://github.com/SAP/macOS-enterprise-privileges/wiki/Managing-Privileges&#34;&gt;For more details, please click here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Articles&lt;/h1&gt; &#xA;&lt;p&gt;We are happy to share with you the article about privileges from 9to5Mac:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://9to5mac.com/2019/11/16/privileges-app-for-macos/&#34;&gt;Apple @ Work: Privileges for macOS is the open source tool that all Apple IT departments need&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;üìö If you want to learn more about &lt;em&gt;Privileges&lt;/em&gt; features, make sure to take a look at our &lt;a href=&#34;https://github.com/SAP/macOS-enterprise-privileges/wiki&#34;&gt;wiki&lt;/a&gt; or the links below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SAP/macOS-enterprise-privileges/wiki/Installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SAP/macOS-enterprise-privileges/wiki/Uninstallation&#34;&gt;Uninstallation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SAP/macOS-enterprise-privileges/wiki/Using-Privileges&#34;&gt;Using Privileges&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SAP/macOS-enterprise-privileges/wiki/Managing-Privileges&#34;&gt;Managing Privileges&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SAP/macOS-enterprise-privileges/wiki/Frequently-Asked-Questions&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2018-2024 SAP SE or an SAP affiliate company and macOS-enterprise-privileges contributors. Please see our &lt;a href=&#34;https://raw.githubusercontent.com/SAP/macOS-enterprise-privileges/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for copyright and license information. Detailed information including third-party components and their licensing/copyright information is available &lt;a href=&#34;https://api.reuse.software/info/github.com/SAP/macOS-enterprise-privileges&#34;&gt;via the REUSE tool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Security&lt;/h1&gt; &#xA;&lt;p&gt;Found a security-related issue or vulnerability and want to notify us? &lt;a href=&#34;https://github.com/SAP/macOS-enterprise-privileges/security/policy&#34;&gt;Please see here for how to report it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;This project is &#39;as-is&#39; with no support, no changes being made. You are welcome to make changes to improve it but we are not available for questions or support of any kind.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>button/DeepLinkKit</title>
    <updated>2024-12-01T01:47:49Z</updated>
    <id>tag:github.com,2024-12-01:/button/DeepLinkKit</id>
    <link href="https://github.com/button/DeepLinkKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A splendid route-matching, block-based way to handle your deep links.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/10621371/7642874/8c90f72a-fa62-11e4-9092-dfff96c24f01.png&#34; width=&#34;392&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;DeepLink Kit&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://travis-ci.org/button/DeepLinkKit&#34;&gt;&lt;img src=&#34;http://img.shields.io/travis/button/DeepLinkKit.svg?style=flat&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/button/DeepLinkKit?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/button/DeepLinkKit/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/DeepLinkKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/DeepLinkKit.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/DeepLinkKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/DeepLinkKit.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/DeepLinkKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/DeepLinkKit.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;DeepLink Kit is a splendid route-matching, block-based way to handle your deep links. Rather than decide how to format your URLs, parse them, pass data, and navigate to specific content or perform actions, this library and a few lines of code will get you on your way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/button/DeepLinkKit/wiki/DeepLink-Kit-Integration-Guide&#34;&gt;Full Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.usebutton.com/developers/universal-links/&#34;&gt;Guide to add Universal Links to your app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Check it out&lt;/h2&gt; &#xA;&lt;p&gt;Try the &lt;code&gt;DeepLinkKit&lt;/code&gt; sample project by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod try &#34;DeepLinkKit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;DeepLinkKit is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install the library, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#34;DeepLinkKit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;To install via Carthage, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;github &#34;button/DeepLinkKit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t use CocoaPods or Carthage, you can include all of the source files from the &lt;a href=&#34;https://github.com/button/DeepLinkKit/tree/master/DeepLinkKit&#34;&gt;DeepLinkKit directory&lt;/a&gt; in your project.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add deep link support to your app in 5 minutes or less following these simple steps.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; As of &lt;code&gt;1.0.0&lt;/code&gt;, all imports should be updated to import &lt;code&gt;&amp;lt;DeepLinkKit/DeepLinkKit.h&amp;gt;&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Make sure you have a URL scheme registered for your app in your Info.plist&lt;/strong&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/1057077/5710380/8d913f3e-9a6f-11e4-83a2-49f6564d7a8f.png&#34; width=&#34;410&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Import DeepLinkKit&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;DeepLinkKit/DeepLinkKit.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Create an instance of &lt;code&gt;DPLDeepLinkRouter&lt;/code&gt; in your app delegate&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)application&#xA;        didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {&#xA;&#xA;  self.router = [[DPLDeepLinkRouter alloc] init];&#xA;&#xA;  return YES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Register a route handler&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Objective-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;self.router[@&#34;/log/:message&#34;] = ^(DPLDeepLink *link) {&#xA;  NSLog(@&#34;%@&#34;, link.routeParameters[@&#34;message&#34;]);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.router.register(&#34;/log/:message&#34;) { link in&#xA;    if let link = link {&#xA;        print(&#34;\(link.routeParameters[&#34;message&#34;])&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. Pass incoming URLs to the router&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)application&#xA;            openURL:(NSURL *)url&#xA;  sourceApplication:(NSString *)sourceApplication&#xA;         annotation:(id)annotation {&#xA;&#xA;  return [self.router handleURL:url withCompletion:NULL];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. Passing &lt;code&gt;NSUserActivity&lt;/code&gt; objects to the router&lt;/strong&gt; (optional)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; If your application supports &lt;a href=&#34;https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_2&#34;&gt;Apple&#39;s new universal links&lt;/a&gt;, implement the following in your app delegate:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)application&#xA;        continueUserActivity:(NSUserActivity *)userActivity&#xA;          restorationHandler:(void (^)(NSArray *))restorationHandler {&#xA;&#xA;    return [self.router handleUserActivity:userActivity withCompletion:NULL];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more about the DeepLinkKit by reading our &lt;a href=&#34;https://github.com/button/DeepLinkKit/wiki/DeepLink-Kit-Integration-Guide&#34;&gt;Integration Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Route Registration Examples&lt;/h2&gt; &#xA;&lt;p&gt;URLs coming into your app will be in a similar format to the following: &lt;code&gt;&amp;lt;scheme&amp;gt;://&amp;lt;host&amp;gt;/&amp;lt;path-component&amp;gt;/&amp;lt;path-component&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;When registering routes, it&#39;s important to note that the first forward slash in your registered route determines the start of the path to be matched. A route component before the first forward slash will be considered to be the host.&lt;/p&gt; &#xA;&lt;p&gt;Say you have an incoming URL of &lt;code&gt;twitter://timeline&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;&#xA;// Matches the URL.&#xA;router[@&#34;timeline&#34;] = ^{ ‚Ä¶ }&#xA;&#xA;// Does not match the URL.&#xA;router[@&#34;/timeline&#34;] = ^{ ‚Ä¶ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In another example, a URL of &lt;code&gt;twitter://dpl.com/timeline&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Matches the URL.&#xA;router[@&#34;/timeline&#34;] = ^{ ‚Ä¶ }&#xA;&#xA;// Does not match the URL.&#xA;router[@&#34;timeline&#34;] = ^{ ‚Ä¶ }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also be scheme specific. If you support multiple URL schemes in your app, you can register routes specific to those schemes as follows:&lt;/p&gt; &#xA;&lt;p&gt;An incoming URL of &lt;code&gt;scheme-one://timeline&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Matches the URL.&#xA;router[@&#34;scheme-one://timeline&#34;] = ^{ ‚Ä¶ }&#xA;&#xA;// Does not match the URL.&#xA;router[@&#34;scheme-two://timeline&#34;] = ^{ ‚Ä¶ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Regex Route Matching&lt;/h3&gt; &#xA;&lt;p&gt;You can use regex in your route patterns as well to give you maximum flexibility.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Match any url&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The following will match all incoming urls&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;router[@&#34;.*&#34;] ^(DPLDeepLink *link){&#xA;  // This will match all incoming links&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Routes are matched in the order they&#39;re registered so registering this route first will prevent all other more specific routes from matching.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Match any url with a given scheme&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The following will match all incoming links with the scheme, &lt;code&gt;myscheme://&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;router[@&#34;myscheme://.*&#34;] ^(DPLDeepLink *link){&#xA;  // matches all urls with a scheme of `myscheme://`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can name your regex groups too&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The following will match any url with a &lt;code&gt;host&lt;/code&gt; of &lt;code&gt;trycaviar.com&lt;/code&gt; and hand you &lt;code&gt;:path&lt;/code&gt; in the route params.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Given the url ‚Äòhttps://trycaviar.com/manhattan/nicoletta-297`&#xA;router[@&#34;trycaviar.com/:path(.*)&#34;] ^(DPLDeepLink *link){&#xA;  // `link[@&#34;path&#34;]` =&amp;gt; @&#34;manhattan/nicoletta-297&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Match multiple path components&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;In this example, you&#39;ll get &lt;code&gt;:city&lt;/code&gt; and &lt;code&gt;:restaurant&lt;/code&gt; in the route params.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Given the url ‚Äòhttps://trycaviar.com/manhattan/nicoletta-297`&#xA;router[@&#34;trycaviar.com/:city([a-zA-Z]+)/:restaurant(.*)&#34;] ^(DPLDeepLink *link){&#xA;  // `link[@&#34;city&#34;]` =&amp;gt; @&#34;manhattan&#34;&#xA;  // `link[@&#34;restaurant&#34;]` =&amp;gt; @&#34;nicoletta-297&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;If the restaurant ids are numbers, you could limit your matches as follows.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Given the url ‚Äòhttps://trycaviar.com/manhattan/297`&#xA;router[@&#34;trycaviar.com/:city([a-zA-Z]+)/:restaurant([0-9])&#34;] ^(DPLDeepLink *link){&#xA;  // `link[@&#34;city&#34;]` =&amp;gt; @&#34;manhattan&#34;&#xA;  // `link[@&#34;restaurant&#34;]` =&amp;gt; @&#34;297&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Name some groups and not others&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Lets say the url is ‚Äòhttps://trycaviar.com/manhattan/pizza/nicoletta-297`&#xA;router[@&#34;trycaviar.com/:city([a-zA-Z]+)/[a-z]+/:restaurant(.*)&#34;] ^(DPLDeepLink *link){&#xA;  // `link[@&#34;city&#34;]` =&amp;gt; @&#34;manhattan&#34;&#xA;  // `link[@&#34;restaurant&#34;]` =&amp;gt; @&#34;nicoletta-297&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;The above would match ‚Äò&lt;a href=&#34;https://trycaviar.com/manhattan/pizza/nicoletta-297%E2%80%99&#34;&gt;https://trycaviar.com/manhattan/pizza/nicoletta-297‚Äô&lt;/a&gt; but not ‚Äò&lt;a href=&#34;https://trycaviar.com/manhattan/PIZZA/nicoletta-297%E2%80%99&#34;&gt;https://trycaviar.com/manhattan/PIZZA/nicoletta-297‚Äô&lt;/a&gt; or ‚Äò&lt;a href=&#34;https://trycaviar.com/manhattan/pizza-places/nicoletta-297%E2%80%99&#34;&gt;https://trycaviar.com/manhattan/pizza-places/nicoletta-297‚Äô&lt;/a&gt;, etc&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;AppLinks Support&lt;/h2&gt; &#xA;&lt;p&gt;Does your app support AppLinks? You can easily handle incoming AppLinks by importing the AppLinks category &lt;code&gt;DPLDeepLink+AppLinks&lt;/code&gt;. The AppLinks category provides convenience accessors to all AppLinks 1.0 properties.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;router[@&#34;/timeline&#34;] = ^(DPLDeepLink *link) {&#xA;  NSURL *referrerURL  = link.referralURL;&#xA;  NSString *someValue = link.extras[@&#34;some-key&#34;];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the Demo&lt;/h2&gt; &#xA;&lt;p&gt;To run the example project, run &lt;code&gt;pod try DeepLinkKit&lt;/code&gt; in your terminal. You can also clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the project root. If you don&#39;t have CocoaPods, begin by &lt;a href=&#34;http://guides.cocoapods.org/using/getting-started.html&#34;&gt;follow this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are two demo apps, &lt;code&gt;SenderDemo&lt;/code&gt;, and &lt;code&gt;ReceiverDemo&lt;/code&gt;. &lt;code&gt;ReceiverDemo&lt;/code&gt; has some registered routes that will handle specific deep links. &lt;code&gt;SenderDemo&lt;/code&gt; has a couple actions that will deep link out to &lt;code&gt;ReceiverDemo&lt;/code&gt; for fulfillment.&lt;/p&gt; &#xA;&lt;p&gt;Run the&lt;code&gt;SenderDemo&lt;/code&gt; build scheme first, then stop the simulator and switch the build scheme to &lt;code&gt;ReceiverDemo&lt;/code&gt; and run again. Now you can switch back to the &lt;code&gt;SenderDemo&lt;/code&gt; app in the simulator and tap on one of the actions.&lt;/p&gt; &#xA;&lt;h2&gt;Creating Deep Links&lt;/h2&gt; &#xA;&lt;p&gt;You can also create deep links with &lt;code&gt;DPLMutableDeepLink&lt;/code&gt;. Between two &lt;code&gt;DeepLinkKit&lt;/code&gt; integrated apps, you can pass complex objects via deep link from one app to another app and easily get that object back on the other end.&lt;/p&gt; &#xA;&lt;p&gt;In the first app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;&#xA;DPLMutableDeepLink *link = [[DPLMutableDeepLink alloc] initWithString:@&#34;app-two://categories&#34;];&#xA;link[@&#34;brew-types&#34;] = @[@&#34;Ale&#34;, @&#34;Lager&#34;, @&#34;Stout&#34;, @&#34;Wheat&#34;]&#xA;link[@&#34;beers&#34;] = @{&#xA;  @&#34;ales&#34;: @[&#xA;    @{&#xA;        @&#34;name&#34;: @&#34;Southern Tier Pumking Ale&#34;,&#xA;        @&#34;price&#34;: @799&#xA;    },&#xA;    @{&#xA;        @&#34;name&#34;: @&#34;Sierra Nevada Celebration Ale&#34;,&#xA;        @&#34;price&#34;: @799&#xA;    }&#xA;  ],&#xA;  @&#34;lagers&#34;: @[&#xA;     ...&#xA;  ],&#xA;  ...&#xA;}&#xA;&#xA;[[UIApplication sharedApplication] openURL:link.URL];&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the second app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;router[@&#34;categories&#34;] = ^(DPLDeepLink *link) {&#xA;  NSArray *brewTypes  = link[@&#34;brew-types&#34;];&#xA;  NSDictionary *beers = link[@&#34;beers&#34;];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://twitter.com/ioswes&#34;&gt;Wes Smith&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://twitter.com/chrismaddern&#34;&gt;Chris Maddern&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;DeepLinkKit is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d love to see your ideas for improving this library. The best way to contribute is by submitting a pull request. We&#39;ll do our best to respond to you as soon as possible. You can also submit a new Github issue if you find bugs or have questions. &lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Please make sure to follow our general coding style and add test coverage for new features!&lt;/p&gt;</summary>
  </entry>
</feed>