<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-15T01:33:40Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fjolnir/DatabaseKit</title>
    <updated>2023-08-15T01:33:40Z</updated>
    <id>tag:github.com,2023-08-15:/fjolnir/DatabaseKit</id>
    <link href="https://github.com/fjolnir/DatabaseKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Objective-C database abstraction framework.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DatabaseKit ReadMe&lt;/h1&gt; &#xA;&lt;h1&gt;About:&lt;/h1&gt; &#xA;&lt;p&gt;DatabaseKit is an unbelievably straight-forward to use database framework for Objective-C.&lt;/p&gt; &#xA;&lt;h1&gt;Features:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports SQLite, but is built to make it easy to add support for additional SQL databases, just subclass &lt;code&gt;DBConnection&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Query composition done purely in Objective-C.&lt;/li&gt; &#xA; &lt;li&gt;If you use a connection pool or queue(Done transparently by default) then query objects are thread safe.&lt;/li&gt; &#xA; &lt;li&gt;If you provide a model class, then results from it&#39;s corresponding table will automatically be returned as instances of that class.&lt;/li&gt; &#xA; &lt;li&gt;Supports creating and migrating tables for model classes at runtime.&lt;/li&gt; &#xA; &lt;li&gt;Almost no code required.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;h3&gt;Connecting:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Open a SQLite database&#xA;DB *db = [DB withURL:[NSURL URLWithString:@&#34;sqlite://myDb.sqlite&#34;]];&#xA;if(err)&#xA;    NSLog(@&#34;Couldn&#39;t open database: %@.&#34;, [err localizedDescription]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Querying:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Get the names of every person in our database&#xA;DBTable *people = db[@&#34;people&#34;];&#xA;DBSelectQuery *names = [people select:@&#34;name&#34;];&#xA;&#xA;for(NSDictionary *row in [names limit:100]) {&#xA;    NSLog(@&#34;Name: %@&#34;, row[@&#34;name&#34;]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Delete really old people&#xA;[[[people delete] where:@&#34;bornOn &amp;lt; %@&#34;, [NSDate distantPast]] execute];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Change the name of everyone called John&#xA;[[[people update:@{ @&#34;name&#34;: @&#34;Percie&#34; }] where:@&#34;name = %@&#34;, @&#34;John&#34;] execute];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;// You can create a class to represent results from a table like so:&#xA;// (Our project&#39;s class prefix is `NICE`)&#xA;@interface NICEPerson : DBModel&#xA;@property(readwrite, retain) NSString *name, *address;&#xA;- (void)introduceYourself;&#xA;@end&#xA;&#xA;@implementation NICEPerson&#xA;- (void)introduceYourself&#xA;{&#xA;    NSLog(@&#34;Hi! I&#39;m %@.&#34;, self.name);&#xA;}&#xA;@end&#xA;&#xA;// And now if you perform a query&#xA;NicePerson *someone = [[people select] firstObject];&#xA;[someone introduceYourself];&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>nabla-c0d3/ssl-kill-switch2</title>
    <updated>2023-08-15T01:33:40Z</updated>
    <id>tag:github.com,2023-08-15:/nabla-c0d3/ssl-kill-switch2</id>
    <link href="https://github.com/nabla-c0d3/ssl-kill-switch2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blackbox tool to disable SSL certificate validation - including certificate pinning - within iOS and macOS applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SSL Kill Switch 2&lt;/h1&gt; &#xA;&lt;p&gt;Blackbox tool to disable SSL/TLS certificate validation - including certificate pinning - within iOS and macOS applications. Second iteration of &lt;a href=&#34;https://github.com/iSECPartners/ios-ssl-kill-switch&#34;&gt;https://github.com/iSECPartners/ios-ssl-kill-switch&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Once loaded into an iOS or macOS application, SSL Kill Switch 2 will patch low-level functions responsible for handling SSL/TLS connections in order to override and disable the system&#39;s default certificate validation, as well as any kind of custom certificate validation (such as certificate pinning).&lt;/p&gt; &#xA;&lt;p&gt;It was successfully tested against various applications implementing certificate pinning including the Apple App Store. The first version of SSL Kill Switch was released at Black Hat Vegas 2012.&lt;/p&gt; &#xA;&lt;p&gt;The most recent version iOS that is known to be supported is 14.2.&lt;/p&gt; &#xA;&lt;h2&gt;iOS Instructions&lt;/h2&gt; &#xA;&lt;p&gt;On iOS, SSL Kill Switch 2 can be installed as a Cydia Subtrate tweak on a jailbroken device.&lt;/p&gt; &#xA;&lt;h3&gt;WARNING: THIS TWEAK WILL MAKE YOUR DEVICE INSECURE&lt;/h3&gt; &#xA;&lt;p&gt;Installing SSL Kill Switch 2 allows anyone on the same network as the device to easily perform man-in-the-middle attacks against &lt;em&gt;any&lt;/em&gt; SSL or HTTPS connection. This means that it is trivial to get access to emails, websites viewed in Safari and any other data downloaded by any App running on the device.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;The following dependencies should be installed using Cydia:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debian Packager&lt;/li&gt; &#xA; &lt;li&gt;Cydia Substrate&lt;/li&gt; &#xA; &lt;li&gt;PreferenceLoader&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then, download the latest pre-compiled package available in the release tab of the SSL Kill Switch 2&#39;s GitHub page. Copy it to the device, install it and respring the device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dpkg -i &amp;lt;package&amp;gt;.deb&#xA;killall -HUP SpringBoard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There should be a new menu in the device&#39;s Settings where you can enable the extension. Finally, kill and restart the App you want to test.&lt;/p&gt; &#xA;&lt;p&gt;The tweak can later be uninstalled using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dpkg -r com.nablac0d3.SSLKillSwitch2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Intercepting the App Store&#39;s traffic&lt;/h3&gt; &#xA;&lt;p&gt;Lots of people have asked about how to intercept the App Store&#39;s traffic using SSL Kill Switch 2. I wrote down some instructions here but there are now outdated: &lt;a href=&#34;http://nabla-c0d3.github.io/blog/2013/08/20/intercepting-the-app-stores-traffic-on-ios/&#34;&gt;http://nabla-c0d3.github.io/blog/2013/08/20/intercepting-the-app-stores-traffic-on-ios/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Intercepting with Charles Proxy&lt;/h3&gt; &#xA;&lt;p&gt;By default, SSL Kill Switch will disrupt the Charles Proxy iOS app and you will not be able to proxy any network traffic with it. To fix this, add the Charles Proxy app (com.xk72.Charles) to the list of excluded bundle IDs in the SSL Kill Switch config:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nabla-c0d3/ssl-kill-switch2/release/charles.png&#34; alt=&#34;Charles proxy&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;The build requires the Theos suite to be installed available at &lt;a href=&#34;http://www.iphonedevwiki.net/index.php/Theos/Getting_Started&#34;&gt;http://www.iphonedevwiki.net/index.php/Theos/Getting_Started&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;Then, within SSL Kill Switch 2&#39;s root foler, create a symlink to your theos installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ln -s /&amp;lt;path_to_your_theos_folder&amp;gt; theos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure dpkg is installed. If you have Homebrew, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install dpkg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the SSL Kill Switch 2 Debian package can be built using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;macOS Instructions&lt;/h2&gt; &#xA;&lt;p&gt;SSL Kill Switch 2 can be used in macOS applications as a dynamic library to be injected into processes.&lt;/p&gt; &#xA;&lt;h3&gt;WARNING: THIS HAS NOT BEEN TESTED ON RECENT VERSIONS OF MACOS&lt;/h3&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;On macOS, the SSLKillSwitch library needs to be manually injected into the process where SSL pinning needs to be disabled. Once injected, it will automatically override and disable SSL validation.&lt;/p&gt; &#xA;&lt;p&gt;There are several ways to do this including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Starting the process with LLDB or in Xcode Debug-&amp;gt;Attach to process then pause, and load SSLKillSwitch using &lt;code&gt;dlopen()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  (lldb) expr (void*)dlopen(&#34;/path/to/build/SSLKillSwitch.framework/Versions/A/SSLKillSwitch&#34;, 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Expected result is a non-zero pointer:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  (void *) $1 = 0x00007f92e74d10c0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you receive a zero pointer then you may need to enable code-signing and build for profiling then use the binary in the release folder, and even may have to copy the binary to the app&#39;s resources folder. In which case you would have seen a sandbox read violation output to console. To test a new version of the binary you need to kill the app and load it in again.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using DYLD_INSERT_LIBRARIES to inject SSLKillSwitch and start the process.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Restricted Apps&lt;/h3&gt; &#xA;&lt;p&gt;TBD&lt;/p&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;Use the Xcode project to build SSL Kill Switch 2 for macOS. The compiled library will then be available in &lt;em&gt;Products/SSLKillSwitch.framework/Versions/A/SSLKillSwitch&lt;/em&gt;. This is the binary that you need to inject in the process where you want to disable SSL pinning.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v0.14: Added support for iOS 13.&lt;/li&gt; &#xA; &lt;li&gt;v0.13: Added support for iOS 12.&lt;/li&gt; &#xA; &lt;li&gt;v0.12: Added support for iOS 11.&lt;/li&gt; &#xA; &lt;li&gt;v0.11: Added support for iOS 10.&lt;/li&gt; &#xA; &lt;li&gt;v0.10: Added support for proxy-ing &lt;a href=&#34;https://github.com/twitter/CocoaSPDY&#34;&gt;CocoaSPDY&lt;/a&gt; Apps (ie. Twitter iOS).&lt;/li&gt; &#xA; &lt;li&gt;v0.9: Extended the MobileLoader filter to simplify the proxy-ing of the Apple App Store application.&lt;/li&gt; &#xA; &lt;li&gt;V0.8: Added support for iOS 9.&lt;/li&gt; &#xA; &lt;li&gt;v0.7: Renamed tool to SSL Kill Switch 2; added support for macOS applications and TrustKit.&lt;/li&gt; &#xA; &lt;li&gt;v0.6: Added support for iOS 7.&lt;/li&gt; &#xA; &lt;li&gt;v0.5: Complete rewrite in order to add support for proxy-ing Apple&#39;s App Store application.&lt;/li&gt; &#xA; &lt;li&gt;v0.4: Added hooks for SecTrustEvaluate().&lt;/li&gt; &#xA; &lt;li&gt;v0.3: Bug fixes and support for iOS 6.&lt;/li&gt; &#xA; &lt;li&gt;v0.2: Initial release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT - See ./LICENSE.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Alban Diquet - @nabla_c0d3&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Pushwoosh/pushwoosh-ios-sdk</title>
    <updated>2023-08-15T01:33:40Z</updated>
    <id>tag:github.com,2023-08-15:/Pushwoosh/pushwoosh-ios-sdk</id>
    <link href="https://github.com/Pushwoosh/pushwoosh-ios-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pushwoosh iOS SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pushwoosh iOS SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Pushwoosh/pushwoosh-ios-sdk/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Pushwoosh/pushwoosh-ios-sdk.svg?style=flat-square&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/?q=pushwoosh&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Pushwoosh.svg?sanitize=true&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.pushwoosh.com/platform-docs/pushwoosh-sdk/ios-push-notifications&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/guide-latest-brightgreen.svg?style=flat-square&#34; alt=&#34;Guide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Pushwoosh/pushwoosh-ios-sdk/tree/master/Documentation&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat-square&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The guide for SDK integration is available on Pushwoosh website:&lt;br&gt; &lt;a href=&#34;https://www.pushwoosh.com/platform-docs/pushwoosh-sdk/ios-push-notifications/setting-up-pushwoosh-ios-sdk&#34;&gt;https://www.pushwoosh.com/platform-docs/pushwoosh-sdk/ios-push-notifications/setting-up-pushwoosh-ios-sdk&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The sample project is available here:&lt;br&gt; &lt;a href=&#34;https://github.com/Pushwoosh/pushwoosh-ios-sdk/tree/master/Samples/iPhone&#34;&gt;https://github.com/Pushwoosh/pushwoosh-ios-sdk/tree/master/Samples/iPhone&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation: &lt;a href=&#34;https://github.com/Pushwoosh/pushwoosh-ios-sdk/tree/master/Documentation&#34;&gt;https://github.com/Pushwoosh/pushwoosh-ios-sdk/tree/master/Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pushwoosh team &lt;a href=&#34;http://www.pushwoosh.com&#34;&gt;http://www.pushwoosh.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>