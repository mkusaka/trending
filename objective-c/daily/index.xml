<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T01:48:41Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>realm/realm-swift</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/realm/realm-swift</id>
    <link href="https://github.com/realm/realm-swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Realm is a mobile database: a replacement for Core Data &amp; SQLite&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/realm/realm-swift/raw/master/logo.png&#34; alt=&#34;Realm&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Realm is a mobile database that runs directly inside phones, tablets or wearables. This repository holds the source code for the iOS, macOS, tvOS &amp;amp; watchOS versions of Realm Swift &amp;amp; Realm Objective-C.&lt;/p&gt; &#xA;&lt;h2&gt;Why Use Realm&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intuitive to Developers:&lt;/strong&gt; Realm’s object-oriented data model is simple to learn, doesn’t need an ORM, and lets you write less code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Designed for Offline Use:&lt;/strong&gt; Realm’s local database persists data on-disk, so apps work as well offline as they do online.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Built for Mobile:&lt;/strong&gt; Realm is fully-featured, lightweight, and efficiently uses memory, disk space, and battery life.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Object-Oriented: Streamline Your Code&lt;/h2&gt; &#xA;&lt;p&gt;Realm was built for mobile developers, with simplicity in mind. The idiomatic, object-oriented data model can save you thousands of lines of code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Define your models like regular Swift classes&#xA;class Dog: Object {&#xA;    @Persisted var name: String&#xA;    @Persisted var age: Int&#xA;}&#xA;class Person: Object {&#xA;    @Persisted(primaryKey: true) var _id: String&#xA;    @Persisted var name: String&#xA;    @Persisted var age: Int&#xA;    // Create relationships by pointing an Object field to another Class&#xA;    @Persisted var dogs: List&amp;lt;Dog&amp;gt;&#xA;}&#xA;// Use them like regular Swift objects&#xA;let dog = Dog()&#xA;dog.name = &#34;Rex&#34;&#xA;dog.age = 1&#xA;print(&#34;name of dog: \(dog.name)&#34;)&#xA;&#xA;// Get the default Realm&#xA;let realm = try! Realm()&#xA;// Persist your data easily with a write transaction &#xA;try! realm.write {&#xA;    realm.add(dog)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Live Objects: Build Reactive Apps&lt;/h2&gt; &#xA;&lt;p&gt;Realm’s live objects mean data updated anywhere is automatically updated everywhere.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Open the default realm.&#xA;let realm = try! Realm()&#xA;&#xA;var token: NotificationToken?&#xA;&#xA;let dog = Dog()&#xA;dog.name = &#34;Max&#34;&#xA;&#xA;// Create a dog in the realm.&#xA;try! realm.write {&#xA;    realm.add(dog)&#xA;}&#xA;&#xA;//  Set up the listener &amp;amp; observe object notifications.&#xA;token = dog.observe { change in&#xA;    switch change {&#xA;    case .change(let properties):&#xA;        for property in properties {&#xA;            print(&#34;Property &#39;\(property.name)&#39; changed to &#39;\(property.newValue!)&#39;&#34;);&#xA;        }&#xA;    case .error(let error):&#xA;        print(&#34;An error occurred: (error)&#34;)&#xA;    case .deleted:&#xA;        print(&#34;The object was deleted.&#34;)&#xA;    }&#xA;}&#xA;&#xA;// Update the dog&#39;s name to see the effect.&#xA;try! realm.write {&#xA;    dog.name = &#34;Wolfie&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SwiftUI&lt;/h3&gt; &#xA;&lt;p&gt;Realm integrates directly with SwiftUI, updating your views so you don&#39;t have to.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContactsView: View {&#xA;    @ObservedResults(Person.self) var persons&#xA;    &#xA;    var body: some View {&#xA;        List {&#xA;            ForEach(persons) { person in&#xA;                Text(person.name)&#xA;            }&#xA;            .onMove(perform: $persons.move)&#xA;            .onDelete(perform: $persons.remove)&#xA;        }.navigationBarItems(trailing:&#xA;            Button(&#34;Add&#34;) {&#xA;                $persons.append(Person())&#xA;            }&#xA;        )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fully Encrypted&lt;/h2&gt; &#xA;&lt;p&gt;Data can be encrypted in-flight and at-rest, keeping even the most sensitive data secure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Generate a random encryption key&#xA;var key = Data(count: 64)&#xA;_ = key.withUnsafeMutableBytes { bytes in&#xA;    SecRandomCopyBytes(kSecRandomDefault, 64, bytes)&#xA;}&#xA;&#xA;// Add the encryption key to the config and open the realm&#xA;let config = Realm.Configuration(encryptionKey: key)&#xA;let realm = try Realm(configuration: config)&#xA;&#xA;// Use the Realm as normal&#xA;let dogs = realm.objects(Dog.self).filter(&#34;name contains &#39;Fido&#39;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data Sync&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.mongodb.com/realm/mobile/sync&#34;&gt;MongoDB Realm Sync&lt;/a&gt; service makes it simple to keep data in sync across users, devices, and your backend in real-time.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;We support installing Realm via Swift Package Manager, CocoaPods, Carthage, or by importing a dynamic XCFramework.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see the detailed instructions in our &lt;a href=&#34;https://docs.mongodb.com/realm/sdk/ios/install/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation can be found at &lt;a href=&#34;https://docs.mongodb.com/realm/sdk/ios/&#34;&gt;docs.mongodb.com/realm/sdk/ios/&lt;/a&gt;.&lt;br&gt; The API reference is located at &lt;a href=&#34;https://docs.mongodb.com/realm-sdks/swift/latest/&#34;&gt;docs.mongodb.com/realm-sdks/swift/latest/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Need help with your code?&lt;/strong&gt;: Look for previous questions with the&lt;a href=&#34;https://stackoverflow.com/questions/tagged/realm?sort=newest&#34;&gt;&lt;code&gt;realm&lt;/code&gt; tag&lt;/a&gt; on Stack Overflow or &lt;a href=&#34;https://stackoverflow.com/questions/ask?tags=realm&#34;&gt;ask a new question&lt;/a&gt;. For general discussion that might be considered too broad for Stack Overflow, use the &lt;a href=&#34;https://developer.mongodb.com/community/forums/tags/c/realm-sdks/58/swift/&#34;&gt;Community Forum&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Have a bug to report?&lt;/strong&gt; &lt;a href=&#34;https://github.com/realm/realm-swift/issues/new&#34;&gt;Open a GitHub issue&lt;/a&gt;. If possible, include the version of Realm, a full log, the Realm file, and a project that shows the issue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Have a feature request?&lt;/strong&gt; &lt;a href=&#34;https://github.com/realm/realm-swift/issues/new&#34;&gt;Open a GitHub issue&lt;/a&gt;. Tell us what the feature should do and why you want the feature.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Realm&lt;/h2&gt; &#xA;&lt;p&gt;In case you don&#39;t want to use the precompiled version, you can build Realm yourself from source.&lt;/p&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Building Realm requires Xcode 11.x or newer.&lt;/li&gt; &#xA; &lt;li&gt;Building Realm documentation requires &lt;a href=&#34;https://github.com/realm/jazzy&#34;&gt;jazzy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have all the necessary prerequisites, building Realm.framework just takes a single command: &lt;code&gt;sh build.sh build&lt;/code&gt;. You&#39;ll need an internet connection the first time you build Realm to download the core binary.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;sh build.sh help&lt;/code&gt; to see all the actions you can perform (build ios/osx, generate docs, test, etc.).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/realm/realm-swift/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details!&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project adheres to the &lt;a href=&#34;https://www.mongodb.com/community-code-of-conduct&#34;&gt;MongoDB Code of Conduct&lt;/a&gt;. By participating, you are expected to uphold this code. Please report unacceptable behavior to &lt;a href=&#34;mailto:community-conduct@mongodb.com&#34;&gt;community-conduct@mongodb.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Realm Objective-C &amp;amp; Realm Swift are published under the Apache 2.0 license.&lt;br&gt; Realm Core is also published under the Apache 2.0 license and is available &lt;a href=&#34;https://github.com/realm/realm-core&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This product is not being made available to any person located in Cuba, Iran, North Korea, Sudan, Syria or the Crimea region, or to any other person that is not eligible to receive the product under U.S. law.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;If you use Realm and are happy with it, please consider sending out a tweet mentioning &lt;a href=&#34;https://twitter.com/realm&#34;&gt;@realm&lt;/a&gt; to share your thoughts!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;And if you don&#39;t like it, please let us know what you would like improved, so we can fix it!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img style=&#34;width: 0px; height: 0px;&#34; src=&#34;https://3eaz4mshcd.execute-api.us-east-1.amazonaws.com/prod?s=https://github.com/realm/realm-swift#README.md&#34;&gt;</summary>
  </entry>
  <entry>
    <title>openid/AppAuth-iOS</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/openid/AppAuth-iOS</id>
    <link href="https://github.com/openid/AppAuth-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS and macOS SDK for communicating with OAuth 2.0 and OpenID Connect providers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://rawgit.com/openid/AppAuth-iOS/master/appauth_lockup.svg?sanitize=true&#34; alt=&#34;AppAuth for iOS and macOS&#34;&gt; &lt;a href=&#34;https://github.com/openid/AppAuth-iOS/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/openid/AppAuth-iOS/actions/workflows/tests.yml/badge.svg?event=push&#34; alt=&#34;tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/openid/AppAuth-iOS&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/openid/AppAuth-iOS/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?style=flat&#34; alt=&#34;SwiftPM compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/AppAuth&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/AppAuth.svg?style=flat&#34; alt=&#34;Pod Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/openid/AppAuth-iOS/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/AppAuth.svg?style=flat&#34; alt=&#34;Pod License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/AppAuth&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/AppAuth.svg?style=flat&#34; alt=&#34;Pod Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/documentation/xcode/creating_a_mac_version_of_your_ipad_app&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Catalyst-compatible-brightgreen.svg?style=flat&#34; alt=&#34;Catalyst compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AppAuth for iOS and macOS, and tvOS is a client SDK for communicating with &lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34;&gt;OAuth 2.0&lt;/a&gt; and &lt;a href=&#34;http://openid.net/specs/openid-connect-core-1_0.html&#34;&gt;OpenID Connect&lt;/a&gt; providers. It strives to directly map the requests and responses of those specifications, while following the idiomatic style of the implementation language. In addition to mapping the raw protocol flows, convenience methods are available to assist with common tasks like performing an action with fresh tokens.&lt;/p&gt; &#xA;&lt;p&gt;It follows the best practices set out in &lt;a href=&#34;https://tools.ietf.org/html/rfc8252&#34;&gt;RFC 8252&amp;nbsp;- OAuth 2.0 for Native Apps&lt;/a&gt; including using &lt;code&gt;SFAuthenticationSession&lt;/code&gt; and &lt;code&gt;SFSafariViewController&lt;/code&gt; on iOS for the auth request. &lt;code&gt;UIWebView&lt;/code&gt; and &lt;code&gt;WKWebView&lt;/code&gt; are explicitly &lt;em&gt;not&lt;/em&gt; supported due to the security and usability reasons explained in &lt;a href=&#34;https://tools.ietf.org/html/rfc8252#section-8.12&#34;&gt;Section 8.12 of RFC 8252&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It also supports the &lt;a href=&#34;https://tools.ietf.org/html/rfc7636&#34;&gt;PKCE&lt;/a&gt; extension to OAuth, which was created to secure authorization codes in public clients when custom URI scheme redirects are used. The library is friendly to other extensions (standard or otherwise), with the ability to handle additional params in all protocol requests and responses.&lt;/p&gt; &#xA;&lt;p&gt;For tvOS, AppAuth implements &lt;a href=&#34;https://tools.ietf.org/html/rfc8628&#34;&gt;OAuth 2.0 Device Authorization Grant &lt;/a&gt; to allow for tvOS sign-ins through a secondary device.&lt;/p&gt; &#xA;&lt;h2&gt;Specification&lt;/h2&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;h4&gt;Supported Versions&lt;/h4&gt; &#xA;&lt;p&gt;AppAuth supports iOS 7 and above.&lt;/p&gt; &#xA;&lt;p&gt;iOS 9+ uses the in-app browser tab pattern (via &lt;code&gt;SFSafariViewController&lt;/code&gt;), and falls back to the system browser (mobile Safari) on earlier versions.&lt;/p&gt; &#xA;&lt;h4&gt;Authorization Server Requirements&lt;/h4&gt; &#xA;&lt;p&gt;Both Custom URI Schemes (all supported versions of iOS) and Universal Links (iOS 9+) can be used with the library.&lt;/p&gt; &#xA;&lt;p&gt;In general, AppAuth can work with any authorization server that supports native apps, as documented in &lt;a href=&#34;https://tools.ietf.org/html/rfc8252&#34;&gt;RFC 8252&lt;/a&gt;, either through custom URI scheme redirects, or universal links. Authorization servers that assume all clients are web-based, or require clients to maintain confidentiality of the client secrets may not work well.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;h4&gt;Supported Versions&lt;/h4&gt; &#xA;&lt;p&gt;AppAuth supports macOS (OS X) 10.9 and above.&lt;/p&gt; &#xA;&lt;h4&gt;Authorization Server Requirements&lt;/h4&gt; &#xA;&lt;p&gt;AppAuth for macOS supports both custom schemes; a loopback HTTP redirects via a small embedded server.&lt;/p&gt; &#xA;&lt;p&gt;In general, AppAuth can work with any authorization server that supports native apps, as documented in &lt;a href=&#34;https://tools.ietf.org/html/rfc8252&#34;&gt;RFC 8252&lt;/a&gt;; either through custom URI schemes, or loopback HTTP redirects. Authorization servers that assume all clients are web-based, or require clients to maintain confidentiality of the client secrets may not work well.&lt;/p&gt; &#xA;&lt;h3&gt;tvOS&lt;/h3&gt; &#xA;&lt;h4&gt;Supported Versions&lt;/h4&gt; &#xA;&lt;p&gt;AppAuth supports tvOS 9.0 and above. Please note that while it is possible to run the standard AppAuth library on tvOS, the documentation below describes implementing &lt;a href=&#34;https://tools.ietf.org/html/rfc8628&#34;&gt;OAuth 2.0 Device Authorization Grant&lt;/a&gt; (AppAuthTV).&lt;/p&gt; &#xA;&lt;h4&gt;Authorization Server Requirements&lt;/h4&gt; &#xA;&lt;p&gt;AppAuthTV is designed for servers that support the device authorization flow as documented in &lt;a href=&#34;https://tools.ietf.org/html/rfc8628&#34;&gt;RFC 8628&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Try&lt;/h2&gt; &#xA;&lt;p&gt;Want to try out AppAuth? Just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod try AppAuth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Follow the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/openid/AppAuth-iOS/master/Examples/README.md&#34;&gt;Examples/README.md&lt;/a&gt; to configure with your own OAuth client (you need to update three configuration points with your client info to try the demo).&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;AppAuth supports four options for dependency management.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://guides.cocoapods.org/using/getting-started.html&#34;&gt;CocoaPods&lt;/a&gt;, add the following line to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;AppAuth&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;tvOS:&lt;/strong&gt; Use the &lt;code&gt;TV&lt;/code&gt; subspec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;AppAuth/TV&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;, add the following &lt;code&gt;dependency&lt;/code&gt; to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/openid/AppAuth-iOS.git&#34;, .upToNextMajor(from: &#34;1.3.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;tvOS:&lt;/strong&gt; Use the &lt;code&gt;AppAuthTV&lt;/code&gt; target.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;openid/AppAuth-iOS&#34; &#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run &lt;code&gt;carthage bootstrap&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;tvOS:&lt;/strong&gt; Use the &lt;code&gt;AppAuthTV&lt;/code&gt; framework.&lt;/p&gt; &#xA;&lt;h3&gt;Static Library&lt;/h3&gt; &#xA;&lt;p&gt;You can also use AppAuth as a static library. This requires linking the library and your project, and including the headers. Here is a suggested configuration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create an Xcode Workspace.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;AppAuth.xcodeproj&lt;/code&gt; to your Workspace.&lt;/li&gt; &#xA; &lt;li&gt;Include libAppAuth as a linked library for your target (in the &#34;General -&amp;gt; Linked Framework and Libraries&#34; section of your target).&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;AppAuth-iOS/Source&lt;/code&gt; to your search paths of your target (&#34;Build Settings -&amp;gt; &#34;Header Search Paths&#34;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: There is no static library for AppAuthTV.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Auth Flow&lt;/h2&gt; &#xA;&lt;p&gt;AppAuth supports both manual interaction with the authorization server where you need to perform your own token exchanges, as well as convenience methods that perform some of this logic for you. This example uses the convenience method, which returns either an &lt;code&gt;OIDAuthState&lt;/code&gt; object, or an error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;OIDAuthState&lt;/code&gt; is a class that keeps track of the authorization and token requests and responses, and provides a convenience method to call an API with fresh tokens. This is the only object that you need to serialize to retain the authorization state of the session.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can configure AppAuth by specifying the endpoints directly:&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSURL *authorizationEndpoint =&#xA;    [NSURL URLWithString:@&#34;https://accounts.google.com/o/oauth2/v2/auth&#34;];&#xA;NSURL *tokenEndpoint =&#xA;    [NSURL URLWithString:@&#34;https://www.googleapis.com/oauth2/v4/token&#34;];&#xA;&#xA;OIDServiceConfiguration *configuration =&#xA;    [[OIDServiceConfiguration alloc]&#xA;        initWithAuthorizationEndpoint:authorizationEndpoint&#xA;                        tokenEndpoint:tokenEndpoint];&#xA;&#xA;// perform the auth request...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let authorizationEndpoint = URL(string: &#34;https://accounts.google.com/o/oauth2/v2/auth&#34;)!&#xA;let tokenEndpoint = URL(string: &#34;https://www.googleapis.com/oauth2/v4/token&#34;)!&#xA;let configuration = OIDServiceConfiguration(authorizationEndpoint: authorizationEndpoint,&#xA;                                            tokenEndpoint: tokenEndpoint)&#xA;&#xA;// perform the auth request...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;tvOS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSURL *deviceAuthorizationEndpoint =&#xA;    [NSURL URLWithString:@&#34;https://oauth2.googleapis.com/device/code&#34;];&#xA;NSURL *tokenEndpoint =&#xA;    [NSURL URLWithString:@&#34;https://www.googleapis.com/oauth2/v4/token&#34;];&#xA;&#xA;OIDTVServiceConfiguration *configuration =&#xA;    [[OIDTVServiceConfiguration alloc]&#xA;        initWithDeviceAuthorizationEndpoint:deviceAuthorizationEndpoint&#xA;                              tokenEndpoint:tokenEndpoint];&#xA;&#xA;// perform the auth request...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or through discovery:&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSURL *issuer = [NSURL URLWithString:@&#34;https://accounts.google.com&#34;];&#xA;&#xA;[OIDAuthorizationService discoverServiceConfigurationForIssuer:issuer&#xA;    completion:^(OIDServiceConfiguration *_Nullable configuration,&#xA;                 NSError *_Nullable error) {&#xA;&#xA;  if (!configuration) {&#xA;    NSLog(@&#34;Error retrieving discovery document: %@&#34;,&#xA;          [error localizedDescription]);&#xA;    return;&#xA;  }&#xA;&#xA;  // perform the auth request...&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let issuer = URL(string: &#34;https://accounts.google.com&#34;)!&#xA;&#xA;// discovers endpoints&#xA;OIDAuthorizationService.discoverConfiguration(forIssuer: issuer) { configuration, error in&#xA;  guard let config = configuration else {&#xA;    print(&#34;Error retrieving discovery document: \(error?.localizedDescription ?? &#34;Unknown error&#34;)&#34;)&#xA;    return&#xA;  }&#xA;&#xA;  // perform the auth request...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;tvOS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSURL *issuer = [NSURL URLWithString:@&#34;https://accounts.google.com&#34;];&#xA;&#xA;[OIDTVAuthorizationService discoverServiceConfigurationForIssuer:issuer&#xA;    completion:^(OIDTVServiceConfiguration *_Nullable configuration,&#xA;                 NSError *_Nullable error) {&#xA;&#xA;  if (!configuration) {&#xA;    NSLog(@&#34;Error retrieving discovery document: %@&#34;,&#xA;          [error localizedDescription]);&#xA;    return;&#xA;  }&#xA;&#xA;  // perform the auth request...&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Authorizing –&amp;nbsp;iOS&lt;/h3&gt; &#xA;&lt;p&gt;First, you need to have a property in your &lt;code&gt;UIApplicationDelegate&lt;/code&gt; implementation to hold the session, in order to continue the authorization flow from the redirect. In this example, the implementation of this delegate is a class named &lt;code&gt;AppDelegate&lt;/code&gt;, if your app&#39;s application delegate has a different name, please update the class name in samples below accordingly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface AppDelegate : UIResponder &amp;lt;UIApplicationDelegate&amp;gt;&#xA;// property of the app&#39;s AppDelegate&#xA;@property(nonatomic, strong, nullable) id&amp;lt;OIDExternalUserAgentSession&amp;gt; currentAuthorizationFlow;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class AppDelegate: UIResponder, UIApplicationDelegate {&#xA;  // property of the app&#39;s AppDelegate&#xA;  var currentAuthorizationFlow: OIDExternalUserAgentSession?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And your main class, a property to store the auth state:&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// property of the containing class&#xA;@property(nonatomic, strong, nullable) OIDAuthState *authState;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// property of the containing class&#xA;private var authState: OIDAuthState?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, initiate the authorization request. By using the &lt;code&gt;authStateByPresentingAuthorizationRequest&lt;/code&gt; convenience method, the token exchange will be performed automatically, and everything will be protected with PKCE (if the server supports it). AppAuth also lets you perform these requests manually. See the &lt;code&gt;authNoCodeExchange&lt;/code&gt; method in the included Example app for a demonstration:&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// builds authentication request&#xA;OIDAuthorizationRequest *request =&#xA;    [[OIDAuthorizationRequest alloc] initWithConfiguration:configuration&#xA;                                                  clientId:kClientID&#xA;                                                    scopes:@[OIDScopeOpenID,&#xA;                                                             OIDScopeProfile]&#xA;                                               redirectURL:kRedirectURI&#xA;                                              responseType:OIDResponseTypeCode&#xA;                                      additionalParameters:nil];&#xA;&#xA;// performs authentication request&#xA;AppDelegate *appDelegate =&#xA;    (AppDelegate *)[UIApplication sharedApplication].delegate;&#xA;appDelegate.currentAuthorizationFlow =&#xA;    [OIDAuthState authStateByPresentingAuthorizationRequest:request&#xA;        presentingViewController:self&#xA;                        callback:^(OIDAuthState *_Nullable authState,&#xA;                                   NSError *_Nullable error) {&#xA;  if (authState) {&#xA;    NSLog(@&#34;Got authorization tokens. Access token: %@&#34;,&#xA;          authState.lastTokenResponse.accessToken);&#xA;    [self setAuthState:authState];&#xA;  } else {&#xA;    NSLog(@&#34;Authorization error: %@&#34;, [error localizedDescription]);&#xA;    [self setAuthState:nil];&#xA;  }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// builds authentication request&#xA;let request = OIDAuthorizationRequest(configuration: configuration,&#xA;                                      clientId: clientID,&#xA;                                      clientSecret: clientSecret,&#xA;                                      scopes: [OIDScopeOpenID, OIDScopeProfile],&#xA;                                      redirectURL: redirectURI,&#xA;                                      responseType: OIDResponseTypeCode,&#xA;                                      additionalParameters: nil)&#xA;&#xA;// performs authentication request&#xA;print(&#34;Initiating authorization request with scope: \(request.scope ?? &#34;nil&#34;)&#34;)&#xA;&#xA;let appDelegate = UIApplication.shared.delegate as! AppDelegate&#xA;&#xA;appDelegate.currentAuthorizationFlow =&#xA;    OIDAuthState.authState(byPresenting: request, presenting: self) { authState, error in&#xA;  if let authState = authState {&#xA;    self.setAuthState(authState)&#xA;    print(&#34;Got authorization tokens. Access token: &#34; +&#xA;          &#34;\(authState.lastTokenResponse?.accessToken ?? &#34;nil&#34;)&#34;)&#xA;  } else {&#xA;    print(&#34;Authorization error: \(error?.localizedDescription ?? &#34;Unknown error&#34;)&#34;)&#xA;    self.setAuthState(nil)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Handling the Redirect&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The authorization response URL is returned to the app via the iOS openURL app delegate method, so you need to pipe this through to the current authorization session (created in the previous session):&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)app&#xA;            openURL:(NSURL *)url&#xA;            options:(NSDictionary&amp;lt;NSString *, id&amp;gt; *)options {&#xA;  // Sends the URL to the current authorization flow (if any) which will&#xA;  // process it if it relates to an authorization response.&#xA;  if ([_currentAuthorizationFlow resumeExternalUserAgentFlowWithURL:url]) {&#xA;    _currentAuthorizationFlow = nil;&#xA;    return YES;&#xA;  }&#xA;&#xA;  // Your additional URL handling (if any) goes here.&#xA;&#xA;  return NO;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func application(_ app: UIApplication,&#xA;                 open url: URL,&#xA;                 options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -&amp;gt; Bool {&#xA;  // Sends the URL to the current authorization flow (if any) which will&#xA;  // process it if it relates to an authorization response.&#xA;  if let authorizationFlow = self.currentAuthorizationFlow,&#xA;                             authorizationFlow.resumeExternalUserAgentFlow(with: url) {&#xA;    self.currentAuthorizationFlow = nil&#xA;    return true&#xA;  }&#xA;&#xA;  // Your additional URL handling (if any)&#xA;&#xA;  return false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Authorizing –&amp;nbsp;MacOS&lt;/h3&gt; &#xA;&lt;p&gt;On macOS, the most popular way to get the authorization response redirect is to start a local HTTP server on the loopback interface (limited to incoming requests from the user&#39;s machine only). When the authorization is complete, the user is redirected to that local server, and the authorization response can be processed by the app. AppAuth takes care of managing the local HTTP server lifecycle for you.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h4&gt;&lt;span&gt;💡&lt;/span&gt; Alternative: Custom URI Schemes&lt;/h4&gt; &#xA; &lt;p&gt;Custom URI schemes are also supported on macOS, but some browsers display an interstitial, which reduces the usability. For an example on using custom URI schemes with macOS, See &lt;code&gt;Example-Mac&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To receive the authorization response using a local HTTP server, first you need to have an instance variable in your main class to retain the HTTP redirect handler:&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;OIDRedirectHTTPHandler *_redirectHTTPHandler;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, as the port used by the local HTTP server varies, you need to start it before building the authorization request, in order to get the exact redirect URI to use:&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;static NSString *const kSuccessURLString =&#xA;    @&#34;http://openid.github.io/AppAuth-iOS/redirect/&#34;;&#xA;NSURL *successURL = [NSURL URLWithString:kSuccessURLString];&#xA;&#xA;// Starts a loopback HTTP redirect listener to receive the code.  This needs to be started first,&#xA;// as the exact redirect URI (including port) must be passed in the authorization request.&#xA;_redirectHTTPHandler = [[OIDRedirectHTTPHandler alloc] initWithSuccessURL:successURL];&#xA;NSURL *redirectURI = [_redirectHTTPHandler startHTTPListener:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, initiate the authorization request. By using the &lt;code&gt;authStateByPresentingAuthorizationRequest&lt;/code&gt; convenience method, the token exchange will be performed automatically, and everything will be protected with PKCE (if the server supports it). By assigning the return value to the &lt;code&gt;OIDRedirectHTTPHandler&lt;/code&gt;&#39;s &lt;code&gt;currentAuthorizationFlow&lt;/code&gt;, the authorization will continue automatically once the user makes their choice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// builds authentication request&#xA;OIDAuthorizationRequest *request =&#xA;    [[OIDAuthorizationRequest alloc] initWithConfiguration:configuration&#xA;                                                  clientId:kClientID&#xA;                                              clientSecret:kClientSecret&#xA;                                                    scopes:@[ OIDScopeOpenID ]&#xA;                                               redirectURL:redirectURI&#xA;                                              responseType:OIDResponseTypeCode&#xA;                                      additionalParameters:nil];&#xA;// performs authentication request&#xA;__weak __typeof(self) weakSelf = self;&#xA;_redirectHTTPHandler.currentAuthorizationFlow =&#xA;    [OIDAuthState authStateByPresentingAuthorizationRequest:request&#xA;                        callback:^(OIDAuthState *_Nullable authState,&#xA;                                   NSError *_Nullable error) {&#xA;  // Brings this app to the foreground.&#xA;  [[NSRunningApplication currentApplication]&#xA;      activateWithOptions:(NSApplicationActivateAllWindows |&#xA;                           NSApplicationActivateIgnoringOtherApps)];&#xA;&#xA;  // Processes the authorization response.&#xA;  if (authState) {&#xA;    NSLog(@&#34;Got authorization tokens. Access token: %@&#34;,&#xA;          authState.lastTokenResponse.accessToken);&#xA;  } else {&#xA;    NSLog(@&#34;Authorization error: %@&#34;, error.localizedDescription);&#xA;  }&#xA;  [weakSelf setAuthState:authState];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Authorizing –&amp;nbsp;tvOS&lt;/h3&gt; &#xA;&lt;p&gt;Ensure that your main class is a delegate of &lt;code&gt;OIDAuthStateChangeDelegate&lt;/code&gt;, &lt;code&gt;OIDAuthStateErrorDelegate&lt;/code&gt;, implement the corresponding methods, and include the following property and instance variable:&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// property of the containing class&#xA;@property(nonatomic, strong, nullable) OIDAuthState *authState;&#xA;&#xA;// instance variable of the containing class&#xA;OIDTVAuthorizationCancelBlock _cancelBlock;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, build and perform the authorization request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// builds authentication request&#xA;__weak __typeof(self) weakSelf = self;&#xA;&#xA;OIDTVAuthorizationRequest *request =&#xA;    [[OIDTVAuthorizationRequest alloc] initWithConfiguration:configuration&#xA;                                                    clientId:kClientID&#xA;                                                clientSecret:kClientSecret&#xA;                                                      scopes:@[ OIDScopeOpenID, OIDScopeProfile ]&#xA;                                        additionalParameters:nil];&#xA;&#xA;// performs authentication request&#xA;OIDTVAuthorizationInitialization initBlock =&#xA;    ^(OIDTVAuthorizationResponse *_Nullable response, NSError *_Nullable error) {&#xA;      if (response) {&#xA;        // process authorization response&#xA;        NSLog(@&#34;Got authorization response: %@&#34;, response);&#xA;      } else {&#xA;        // handle initialization error&#xA;        NSLog(@&#34;Error: %@&#34;, error);&#xA;      }&#xA;    };&#xA;&#xA;OIDTVAuthorizationCompletion completionBlock =&#xA;    ^(OIDAuthState *_Nullable authState, NSError *_Nullable error) {&#xA;      weakSelf.signInView.hidden = YES;&#xA;      if (authState) {&#xA;        NSLog(@&#34;Token response: %@&#34;, authState.lastTokenResponse);&#xA;        [weakSelf setAuthState:authState];&#xA;      } else {&#xA;        NSLog(@&#34;Error: %@&#34;, error);&#xA;        [weakSelf setAuthState:nil];&#xA;      }&#xA;    };&#xA;&#xA;_cancelBlock = [OIDTVAuthorizationService authorizeTVRequest:request&#xA;                                              initialization:initBlock&#xA;                                                  completion:completionBlock];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Making API Calls&lt;/h3&gt; &#xA;&lt;p&gt;AppAuth gives you the raw token information, if you need it. However, we recommend that users of the &lt;code&gt;OIDAuthState&lt;/code&gt; convenience wrapper use the provided &lt;code&gt;performActionWithFreshTokens:&lt;/code&gt; method to perform their API calls to avoid needing to worry about token freshness:&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[_authState performActionWithFreshTokens:^(NSString *_Nonnull accessToken,&#xA;                                           NSString *_Nonnull idToken,&#xA;                                           NSError *_Nullable error) {&#xA;  if (error) {&#xA;    NSLog(@&#34;Error fetching fresh tokens: %@&#34;, [error localizedDescription]);&#xA;    return;&#xA;  }&#xA;&#xA;  // perform your API request using the tokens&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let userinfoEndpoint = URL(string:&#34;https://openidconnect.googleapis.com/v1/userinfo&#34;)!&#xA;self.authState?.performAction() { (accessToken, idToken, error) in&#xA;&#xA;  if error != nil  {&#xA;    print(&#34;Error fetching fresh tokens: \(error?.localizedDescription ?? &#34;Unknown error&#34;)&#34;)&#xA;    return&#xA;  }&#xA;  guard let accessToken = accessToken else {&#xA;    return&#xA;  }&#xA;&#xA;  // Add Bearer token to request&#xA;  var urlRequest = URLRequest(url: userinfoEndpoint)&#xA;  urlRequest.allHTTPHeaderFields = [&#34;Authorization&#34;: &#34;Bearer \(accessToken)&#34;]&#xA;&#xA;  // Perform request...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom User-Agents (iOS and macOS)&lt;/h3&gt; &#xA;&lt;p&gt;Each OAuth flow involves presenting an external user-agent to the user, that allows them to interact with the OAuth authorization server. Typical examples of a user-agent are the user&#39;s browser, or an in-app browser tab incarnation like &lt;code&gt;ASWebAuthenticationSession&lt;/code&gt; on iOS.&lt;/p&gt; &#xA;&lt;p&gt;AppAuth ships with several implementations of an external user-agent out of the box, including defaults for iOS and macOS suitable for most cases. The default user-agents typically share persistent cookies with the system default browser, to improve the chance that the user doesn&#39;t need to sign-in all over again.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to change the user-agent that AppAuth uses, and even write your own - all without needing to fork the library.&lt;/p&gt; &#xA;&lt;p&gt;All implementations of the external user-agent, be they included or created by you need to conform to the &lt;a href=&#34;http://openid.github.io/AppAuth-iOS/docs/latest/protocol_o_i_d_external_user_agent-p.html&#34;&gt;&lt;code&gt;OIDExternalUserAgent&lt;/code&gt;&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;p&gt;Instances of the &lt;code&gt;OIDExternalUserAgent&lt;/code&gt;are passed into &lt;a href=&#34;http://openid.github.io/AppAuth-iOS/docs/latest/interface_o_i_d_auth_state.html#ac762fe2bf95c116f0b437419be211fa1&#34;&gt;&lt;code&gt;OIDAuthState.authStateByPresentingAuthorizationRequest:externalUserAgent:callback&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&#34;http://openid.github.io/AppAuth-iOS/docs/latest/interface_o_i_d_authorization_service.html#ae551f8e6887366a46e49b09b37389b8f&#34;&gt;&lt;code&gt;OIDAuthorizationService.presentAuthorizationRequest:externalUserAgent:callback:&lt;/code&gt;&lt;/a&gt; rather than using the platform-specific convenience methods (which use the default user-agents for their respective platforms), like &lt;a href=&#34;http://openid.github.io/AppAuth-iOS/docs/latest/category_o_i_d_auth_state_07_i_o_s_08.html#ae32fd0732cd3192cd5219f2655a4c85c&#34;&gt;&lt;code&gt;OIDAuthState.authStateByPresentingAuthorizationRequest:presentingViewController:callback:&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Popular use-cases for writing your own user-agent implementation include needing to style the user-agent in ways not supported by AppAuth, and implementing a fully custom flow with your own business logic. You can take one of the existing implementations as a starting point to copy, rename, and customize to your needs.&lt;/p&gt; &#xA;&lt;h4&gt;Custom Browser User-Agent&lt;/h4&gt; &#xA;&lt;p&gt;AppAuth for iOS includes a few extra user-agent implementations which you can try, or use as a reference for your own implementation. One of them, &lt;a href=&#34;http://openid.github.io/AppAuth-iOS/docs/latest/interface_o_i_d_external_user_agent_i_o_s_custom_browser.html&#34;&gt;&lt;code&gt;OIDExternalUserAgentIOSCustomBrowser&lt;/code&gt;&lt;/a&gt; enables you to use a different browser for authentication, like Chrome for iOS or Firefox for iOS.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to configure AppAuth to use a custom browser using the &lt;code&gt;OIDExternalUserAgentIOSCustomBrowser&lt;/code&gt; user agent:&lt;/p&gt; &#xA;&lt;p&gt;First, add the following array to your &lt;a href=&#34;https://github.com/openid/AppAuth-iOS/raw/135f99d2cb4e9d18d310ac2588b905e612461561/Examples/Example-iOS_ObjC/Source/Info.plist#L34&#34;&gt;Info.plist&lt;/a&gt; (in XCode, right click -&amp;gt; Open As -&amp;gt; Source Code)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    &amp;lt;key&amp;gt;LSApplicationQueriesSchemes&amp;lt;/key&amp;gt;&#xA;    &amp;lt;array&amp;gt;&#xA;        &amp;lt;string&amp;gt;googlechromes&amp;lt;/string&amp;gt;&#xA;        &amp;lt;string&amp;gt;opera-https&amp;lt;/string&amp;gt;&#xA;        &amp;lt;string&amp;gt;firefox&amp;lt;/string&amp;gt;&#xA;    &amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is required so that AppAuth can test for the browser and open the app store if it&#39;s not installed (the default behavior of this user-agent). You only need to include the URL scheme of the actual browser you intend to use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// performs authentication request&#xA;AppDelegate *appDelegate =&#xA;    (AppDelegate *)[UIApplication sharedApplication].delegate;&#xA;id&amp;lt;OIDExternalUserAgent&amp;gt; userAgent =&#xA;    [OIDExternalUserAgentIOSCustomBrowser CustomBrowserChrome];&#xA;appDelegate.currentAuthorizationFlow =&#xA;    [OIDAuthState authStateByPresentingAuthorizationRequest:request&#xA;        externalUserAgent:userAgent&#xA;                 callback:^(OIDAuthState *_Nullable authState,&#xA;                                   NSError *_Nullable error) {&#xA;  if (authState) {&#xA;    NSLog(@&#34;Got authorization tokens. Access token: %@&#34;,&#xA;          authState.lastTokenResponse.accessToken);&#xA;    [self setAuthState:authState];&#xA;  } else {&#xA;    NSLog(@&#34;Authorization error: %@&#34;, [error localizedDescription]);&#xA;    [self setAuthState:nil];&#xA;  }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {&#xA;            self.logMessage(&#34;Error accessing AppDelegate&#34;)&#xA;            return&#xA;        }&#xA;let userAgent = OIDExternalUserAgentIOSCustomBrowser.customBrowserChrome()&#x9;&#x9;&#xA;appDelegate.currentAuthorizationFlow = OIDAuthState.authState(byPresenting: request, externalUserAgent: userAgent) { authState, error in&#xA;    if let authState = authState {&#xA;        self.setAuthState(authState)&#xA;        self.logMessage(&#34;Got authorization tokens. Access token: \(authState.lastTokenResponse?.accessToken ?? &#34;DEFAULT_TOKEN&#34;)&#34;)&#xA;    } else {&#xA;        self.logMessage(&#34;Authorization error: \(error?.localizedDescription ?? &#34;DEFAULT_ERROR&#34;)&#34;)&#xA;        self.setAuthState(nil)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! With those two changes (which you can try on the included sample), AppAuth will use Chrome iOS for the authorization request (and open Chrome in the App Store if it&#39;s not installed).&lt;/p&gt; &#xA;&lt;p&gt;⚠️&lt;strong&gt;Note: the &lt;code&gt;OIDExternalUserAgentIOSCustomBrowser&lt;/code&gt; user-agent is not intended for consumer apps&lt;/strong&gt;. It is designed for advanced enterprise use-cases where the app developers have greater control over the operating environment and have special requirements that require a custom browser like Chrome.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t need to stop with the included external user agents either! Since the &lt;a href=&#34;http://openid.github.io/AppAuth-iOS/docs/latest/protocol_o_i_d_external_user_agent-p.html&#34;&gt;&lt;code&gt;OIDExternalUserAgent&lt;/code&gt;&lt;/a&gt; protocol is part of AppAuth&#39;s public API, you can implement your own versions of it. In the above example, &lt;code&gt;userAgent = [OIDExternalUserAgentIOSCustomBrowser CustomBrowserChrome]&lt;/code&gt; would be replaced with an instantiation of your user-agent implementation.&lt;/p&gt; &#xA;&lt;h2&gt;API Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Browse the &lt;a href=&#34;http://openid.github.io/AppAuth-iOS/docs/latest/annotated.html&#34;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Included Samples&lt;/h2&gt; &#xA;&lt;p&gt;Sample apps that explore core AppAuth features are available for iOS, macOS and tvOS; follow the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/openid/AppAuth-iOS/master/Examples/README.md&#34;&gt;Examples/README.md&lt;/a&gt; to get started.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>WenchaoD/FSCalendar</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/WenchaoD/FSCalendar</id>
    <link href="https://github.com/WenchaoD/FSCalendar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fully customizable iOS calendar library, compatible with Objective-C and Swift&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/16540124/efc51f72-408b-11e6-934a-4e750b8b55bb.png&#34; alt=&#34;logo&#34;&gt; &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://cocoapods.org/pods/FSCalendar&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Apps%20Using-%3E%2010,000-00BFFF.svg?style=plastic&#34; alt=&#34;Apps Using&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/FSCalendar&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Total%20Downloads-%3E%20500,000-00BFFF.svg?style=plastic&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://travis-ci.org/WenchaoD/FSCalendar&#34;&gt;&lt;img src=&#34;https://travis-ci.org/WenchaoD/FSCalendar.svg?branch=master&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/FSCalendar&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/FSCalendar.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/FSCalendar&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-iOS%207%2B-blue.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSCalendar/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-objc%20%7C%20swift-FF69B4.svg?style=plastic&#34; alt=&#34;Languages&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSCalendar/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSCalendar/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSCalendar/master/#pre-knowledge&#34;&gt;Pre-knowledge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSCalendar/master/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSCalendar/master/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;screenshots&#34;&gt;&lt;/a&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;iPhone&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/10262249/4fabae40-69f2-11e5-97ab-afbacd0a3da2.jpg&#34; alt=&#34;fscalendar&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;iPad&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/10927681/d2448cb6-82dc-11e5-9d11-f664a06698a7.jpg&#34; alt=&#34;fscalendar-ipad&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Safe Orientation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/20325758/ea125e1e-abc0-11e6-9e29-491acbcb0d07.gif&#34; alt=&#34;fscalendar-scope-orientation-autolayout&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Today Extension&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;iOS8/9&lt;/th&gt; &#xA;   &lt;th&gt;iOS10&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/20288375/ed3fba0e-ab0d-11e6-8b15-43d3dc656f22.gif&#34; alt=&#34;today1&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/20288378/f11e318c-ab0d-11e6-8d1d-9d89b563e9d7.gif&#34; alt=&#34;today2&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Interactive Scope Gesture&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/21559640/e92a9ccc-ce8a-11e6-8c60-e52204f33249.gif&#34; alt=&#34;1&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;DIY support&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/20026983/22354a0e-a342-11e6-8ae6-0614ea7f35ae.gif&#34; alt=&#34;1&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To customize your own cell, view DIY Example in &lt;code&gt;Example-Swift&lt;/code&gt; or &lt;code&gt;Example-Objc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Swipe-To-Choose&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Single-Selection&lt;br&gt;Swipe-To-Choose&lt;/th&gt; &#xA;   &lt;th&gt;Multiple-Selection&lt;br&gt;Swipe-To-Choose&lt;/th&gt; &#xA;   &lt;th&gt;DIY&lt;br&gt;Swipe-To-Choose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/20257768/cb1905d4-aa86-11e6-9ef7-af76f9caa024.gif&#34; alt=&#34;1&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/20257826/254070ec-aa87-11e6-81b1-1815453fd464.gif&#34; alt=&#34;2&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/20257836/2ffa3252-aa87-11e6-8ff9-3b40f5b2307b.gif&#34; alt=&#34;3&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Achievement of Users &lt;a id=&#34;achievement&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/21747193/3111e4ee-d59a-11e6-8e4d-ca695b53e421.png&#34; alt=&#34;1&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/21747393/42a753fa-d5a0-11e6-9cb2-de7cc642e69e.png&#34; alt=&#34;2&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/21897255/ff78fcdc-d923-11e6-9d59-62119bc4343f.png&#34; alt=&#34;3&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/21747192/3111cacc-d59a-11e6-8626-44cd75ebd794.png&#34; alt=&#34;4&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/WenchaoD/FSCalendar/wiki/&#34;&gt;&lt;em&gt;&lt;strong&gt;More Achievements&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; are available in &lt;a href=&#34;https://github.com/WenchaoD/FSCalendar/wiki/&#34;&gt;&lt;em&gt;&lt;strong&gt;FSCalendar Gallery&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h1&gt;&lt;a id=&#34;installation&#34;&gt;&lt;/a&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;CocoaPods:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For iOS8+: 👍&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;target &#39;&amp;lt;Your Target Name&amp;gt;&#39; do&#xA;    pod &#39;FSCalendar&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For iOS7+:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target &#39;&amp;lt;Your Target Name&amp;gt;&#39; do&#xA;&#x9;pod &#39;FSCalendar&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/WenchaoD/NSCalendarExtension&#34;&gt;NSCalendarExtension&lt;/a&gt; is required to get iOS7 compatibility.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Carthage:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For iOS8+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;WenchaoD/FSCalendar&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SPM:&lt;/h2&gt; &#xA;&lt;p&gt;Add dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/WenchaoD/FSCalendar.git&#34;, from: &#34;2.8.3&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manually:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag all files under &lt;code&gt;FSCalendar&lt;/code&gt; folder into your project. 👍&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Alternatively to give it a test run, simply press &lt;code&gt;command+u&lt;/code&gt; in &lt;code&gt;Example-Objc&lt;/code&gt; or &lt;code&gt;Example-Swift&lt;/code&gt; and launch the &lt;em&gt;&lt;strong&gt;UITest Target&lt;/strong&gt;&lt;/em&gt;. &lt;br&gt; Only the methods marked &#34;👍&#34; support IBInspectable / IBDesignable feature. &lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSCalendar/master/#roll_with_interface_builder&#34;&gt;Have fun with Interface builder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;h2&gt;Use Interface Builder&lt;/h2&gt; &#xA;&lt;p&gt;1、 Drag an UIView object to ViewController Scene 2、 Change the &lt;code&gt;Custom Class&lt;/code&gt; to &lt;code&gt;FSCalendar&lt;/code&gt;&lt;br&gt; 3、 Link &lt;code&gt;dataSource&lt;/code&gt; and &lt;code&gt;delegate&lt;/code&gt; to the ViewController &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/9488580/a360297e-4c0d-11e5-8548-ee9274e7c4af.jpg&#34; alt=&#34;fscalendar-ib&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;4、 Finally, implement &lt;code&gt;FSCalendarDataSource&lt;/code&gt; and &lt;code&gt;FSCalendarDelegate&lt;/code&gt; in your &lt;code&gt;ViewController&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Or use code&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@property (weak , nonatomic) FSCalendar *calendar;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// In loadView(Recommended) or viewDidLoad&#xA;FSCalendar *calendar = [[FSCalendar alloc] initWithFrame:CGRectMake(0, 0, 320, 300)];&#xA;calendar.dataSource = self;&#xA;calendar.delegate = self;&#xA;[self.view addSubview:calendar];&#xA;self.calendar = calendar;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Or swift&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To use &lt;code&gt;FSCalendar&lt;/code&gt; in swift, you need to &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html&#34;&gt;Create Bridge Header&lt;/a&gt; first.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fileprivate weak var calendar: FSCalendar!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// In loadView or viewDidLoad&#xA;let calendar = FSCalendar(frame: CGRect(x: 0, y: 0, width: 320, height: 300))&#xA;calendar.dataSource = self&#xA;calendar.delegate = self&#xA;view.addSubview(calendar)&#xA;self.calendar = calendar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To use &lt;strong&gt;FSCalendar&lt;/strong&gt; in Swift3, see &lt;code&gt;Example-Swift&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;adjusts_frame_dynamicly&#34;&gt;&lt;/a&gt;Warning&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;FSCalendar&lt;/code&gt; &lt;em&gt;&lt;strong&gt;doesn&#39;t&lt;/strong&gt;&lt;/em&gt; update frame by itself, Please implement&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For &lt;em&gt;&lt;strong&gt;AutoLayout&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)calendar:(FSCalendar *)calendar boundingRectWillChange:(CGRect)bounds animated:(BOOL)animated&#xA;{&#xA;    self.calendarHeightConstraint.constant = CGRectGetHeight(bounds);&#xA;    // Do other updates here&#xA;    [self.view layoutIfNeeded];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For &lt;em&gt;&lt;strong&gt;Manual Layout&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)calendar:(FSCalendar *)calendar boundingRectWillChange:(CGRect)bounds animated:(BOOL)animated&#xA;{&#xA;    calendar.frame = (CGRect){calendar.frame.origin,bounds.size};&#xA;    // Do other updates here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are using &lt;em&gt;&lt;strong&gt;Masonry&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)calendar:(FSCalendar *)calendar boundingRectWillChange:(CGRect)bounds animated:(BOOL)animated&#xA;{&#xA;    [calendar mas_updateConstraints:^(MASConstraintMaker *make) {&#xA;        make.height.equalTo(@(bounds.size.height));&#xA;        // Do other updates&#xA;    }];&#xA;    [self.view layoutIfNeeded];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are using &lt;em&gt;&lt;strong&gt;SnapKit&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func calendar(_ calendar: FSCalendar, boundingRectWillChange bounds: CGRect, animated: Bool) {&#xA;    calendar.snp.updateConstraints { (make) in&#xA;        make.height.equalTo(bounds.height)&#xA;        // Do other updates&#xA;    }&#xA;    self.view.layoutIfNeeded()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;roll_with_interface_builder&#34;&gt;&lt;/a&gt; Roll with Interface Builder&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/9301716/2e76a2ca-4503-11e5-8450-1fa7aa93e9fd.gif&#34; alt=&#34;fscalendar - ibdesignable&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a id=&#34;pre-knowledge&#34;&gt;&lt;/a&gt;Pre-knowledge&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In &lt;code&gt;Swift3&lt;/code&gt;, &lt;code&gt;NSDate&lt;/code&gt; and &lt;code&gt;NSDateFormatter&lt;/code&gt; have been renamed to &lt;em&gt;&lt;strong&gt;Date&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;DateFormatter&lt;/strong&gt;&lt;/em&gt; , see &lt;code&gt;Example-Swift&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How to create NSDate object&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By &lt;strong&gt;NSCalendar&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;self.gregorian = [NSCalendar calendarWithIdentifier:NSCalendarIdentifierGregorian];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSDate *date = [gregorian dateWithEra:1 year:2016 month:9 day:10 hour:0 minute:0 second:0 nanosecond:0];&#xA;// 2016-09-10 00:00:00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Or by &lt;strong&gt;NSDateFormatter&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;self.formatter = [[NSDateFormatter alloc] init];&#xA;self.formatter.dateFormat = @&#34;yyyy-MM-dd&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSDate *date = [self.formatter dateFromString:@&#34;2016-09-10&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to print out NSDate object&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;strong&gt;NSDateFormatter&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;self.formatter = [[NSDateFormatter alloc] init];&#xA;self.formatter.dateFormat = @&#34;yyyy/MM/dd&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString *string = [self.formatter stringFromDate:date];&#xA;NSLog(@&#34;Date is %@&#34;, string);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to manipulate NSDate with NSCalendar&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;self.gregorian = [NSCalendar calendarWithIdentifier:NSCalendarIdentifierGregorian];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get component of NSDate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSInteger era = [self.gregorian component:NSCalendarUnitEra fromDate:date];&#xA;NSInteger year = [self.gregorian component:NSCalendarUnitYear fromDate:date];&#xA;NSInteger month = [self.gregorian component:NSCalendarUnitMonth fromDate:date];&#xA;NSInteger day = [self.gregorian component:NSCalendarUnitDay fromDate:date];&#xA;NSInteger hour = [self.gregorian component:NSCalendarUnitHour fromDate:date];&#xA;NSInteger minute = [self.gregorian component:NSCalendarUnitMinute fromDate:date];&#xA;...&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get next &lt;strong&gt;month&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSDate *nextMonth = [self.gregorain dateByAddingUnit:NSCalendarUnitMonth value:1 toDate:date options:0];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get next &lt;strong&gt;day&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSDate *nextDay = [self.gregorain dateByAddingUnit:NSCalendarUnitDay value:1 toDate:date options:0];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Is date in today/tomorrow/yesterday/weekend&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;BOOL isToday = [self.gregorian isDateInToday:date];&#xA;BOOL isYesterday = [self.gregorian isDateInYesterday:date];&#xA;BOOL isTomorrow = [self.gregorian isDateInTomorrow:date];&#xA;BOOL isWeekend = [self.gregorian isDateInWeekend:date];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compare two dates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;&#xA;BOOL sameDay = [self.gregorian isDate:date1 inSameDayAsDate:date2];&#xA;// Yes if the date1 and date2 are in same day&#xA;&#xA;&#xA;[self.gregorian compareDate:date1 toDate:date2 toUnitGranularity:unit];&#xA;// compare the era/year/month/day/hour/minute .etc ...&#xA;// return NSOrderAscending/NSOrderSame/NSOrderDecending&#xA;&#xA;BOOL inSameUnit = [self.gregorian isDate:date1 equalToDate:date2 toUnitGranularity:unit];&#xA;// if the given unit (era/year/month/day/hour/minute .etc) are the same&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;support&#34;&gt;&lt;/a&gt;Support this repo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSCalendar/master/#&#34;&gt;&lt;strong&gt;★Star&lt;/strong&gt;&lt;/a&gt; this repo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; * Support with &amp;nbsp; &#xA;&lt;a href=&#34;https://www.paypal.me/WenchaoD&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/webstatic/i/logo/rebrand/ppcom.svg?sanitize=true&#34; width=&#34;100&#34; height=&#34;40&#34; style=&#34;margin-bottom:-15px;&#34;&gt;&lt;/a&gt; &#xA;&lt;br&gt; * Support with &#xA;&lt;a href=&#34;https://user-images.githubusercontent.com/5186464/45949944-46960480-c030-11e8-9e90-30b015698cf6.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://a1.mzstatic.com/us/r30/Purple49/v4/50/16/b3/5016b341-39c1-b47b-2994-d7e23823baed/icon175x175.png&#34; width=&#34;40&#34; height=&#34;40&#34; style=&#34;margin-bottom:-15px;-webkit-border-radius:10px;border:1px solid rgba(30, 154, 236, 1);&#34;&gt;&lt;/a&gt; or &#xA;&lt;a href=&#34;https://cloud.githubusercontent.com/assets/5186464/15096872/b06f3a3a-153c-11e6-89f9-2e9c7b88ef42.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://a4.mzstatic.com/us/r30/Purple49/v4/23/31/14/233114f8-2e8d-7b63-8dc5-85d29893061e/icon175x175.jpeg&#34; height=&#34;40&#34; width=&#34;40&#34; style=&#34;margin-bottom:-15px; -webkit-border-radius: 10px;border:1px solid rgba(43, 177, 0, 1)&#34;&gt;&lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;contact&#34;&gt;&lt;/a&gt; Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;微博： &lt;a href=&#34;http://weibo.com/WenchaoD&#34;&gt;&lt;strong&gt;@WenchaoD&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter：&lt;a href=&#34;https://twitter.com/WenchaoD&#34;&gt;&lt;strong&gt;@WenchaoD&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a id=&#34;qq_group&#34;&gt;&lt;/a&gt;QQ支持群: &lt;br&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/18407011/8e4b6e48-7738-11e6-9fad-0e23cc881516.JPG&#34; alt=&#34;fscalendar&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If your made a beautiful calendar with this library in your app, please take a screen shot and &lt;a href=&#34;https://twitter.com/WenchaoD&#34;&gt;@me&lt;/a&gt; in twitter. Your help really means a lot to me! &lt;br&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;FSCalendar is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/FSCalendar/&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://github.com/WenchaoD/FSCalendar/raw/master/MOREUSAGE.md&#34;&gt;More Usage&lt;/a&gt; | &lt;a href=&#34;http://www.jianshu.com/notebooks/4276521/latest&#34;&gt;简书&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>Kureev/react-native-blur</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/Kureev/react-native-blur</id>
    <link href="https://github.com/Kureev/react-native-blur" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React Native Blur component&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;@react-native-community/blur&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/js/%40react-native-community%2Fblur&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/%40react-native-community%2Fblur.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A component for UIVisualEffectView&#39;s blur and vibrancy effect on iOS, and &lt;a href=&#34;https://github.com/Dimezis/BlurView&#34;&gt;BlurView&lt;/a&gt; on Android.&lt;br&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/139536/25066337/3c9d44c0-224d-11e7-8ca6-028478bf4a7d.gif&#34;&gt; &#xA;&lt;h3&gt;Content&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/#blurview&#34;&gt;BlurView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/#vibrancyview&#34;&gt;VibrancyView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/#example-react-native-app&#34;&gt;Example React Native app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/#questions&#34;&gt;Questions?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the library using either Yarn:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add @react-native-community/blur&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install --save @react-native-community/blur&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;React-Native 0.59 and below only&lt;/strong&gt;: Link your native dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;react-native link @react-native-community/blur&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;(iOS only) Install to Xcode:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx pod-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you already have installed &lt;a href=&#34;https://cocoapods.org/&#34;&gt;Cocoapods&lt;/a&gt; on your system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ios &amp;amp;&amp;amp; pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;(Android only, optional) If you&#39;ve defined &lt;em&gt;&lt;a href=&#34;https://developer.android.com/studio/build/gradle-tips.html&#34;&gt;project-wide properties&lt;/a&gt;&lt;/em&gt; (&lt;strong&gt;recommended&lt;/strong&gt;) in your root &lt;code&gt;build.gradle&lt;/code&gt;, this library will detect the presence of the following properties:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;buildscript {...}&#xA;allprojects {...}&#xA;&#xA;/**&#xA;  + Project-wide Gradle configuration properties&#xA;  */&#xA;ext {&#xA;    compileSdkVersion   = 27&#xA;    targetSdkVersion    = 27&#xA;    buildToolsVersion   = &#34;27.0.3&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Include the library in your code:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { BlurView, VibrancyView } from &#34;@react-native-community/blur&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Compile and have fun!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;BlurView&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Properties:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;blurType&lt;/code&gt; (String) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;xlight&lt;/code&gt; - extra light blur type&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;light&lt;/code&gt; - light blur type&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;dark&lt;/code&gt; - dark blur type&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;extraDark&lt;/code&gt; - extra dark blur type (tvOS only)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;regular&lt;/code&gt; - regular blur type (iOS 10+ and tvOS only)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;prominent&lt;/code&gt; - prominent blur type (iOS 10+ and tvOS only)&lt;/li&gt; &#xA;   &lt;li&gt;iOS 13 only Blur types: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;chromeMaterial&lt;/code&gt; - An adaptable blur effect that creates the appearance of the system chrome.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;material&lt;/code&gt; - An adaptable blur effect that creates the appearance of a material with normal thickness.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;thickMaterial&lt;/code&gt; - An adaptable blur effect that creates the appearance of a material that is thicker than normal.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;thinMaterial&lt;/code&gt; - An adaptable blur effect that creates the appearance of an ultra-thin material.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ultraThinMaterial&lt;/code&gt; - An adaptable blur effect that creates the appearance of an ultra-thin material.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;chromeMaterialDark&lt;/code&gt; - A blur effect that creates the appearance of an ultra-thin material and is always dark.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;materialDark&lt;/code&gt; - A blur effect that creates the appearance of a thin material and is always dark.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;thickMaterialDark&lt;/code&gt; - A blur effect that creates the appearance of a material with normal thickness and is always dark.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;thinMaterialDark&lt;/code&gt; - A blur effect that creates the appearance of a material that is thicker than normal and is always dark.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ultraThinMaterialDark&lt;/code&gt; - A blur effect that creates the appearance of the system chrome and is always dark.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;chromeMaterialLight&lt;/code&gt; - An adaptable blur effect that creates the appearance of the system chrome.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;materialLight&lt;/code&gt; - An adaptable blur effect that creates the appearance of a material with normal thickness.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;thickMaterialLight&lt;/code&gt; - An adaptable blur effect that creates the appearance of a material that is thicker than normal.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;thinMaterialLight&lt;/code&gt; - An adaptable blur effect that creates the appearance of a thin material.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ultraThinMaterialLight&lt;/code&gt; - An adaptable blur effect that creates the appearance of an ultra-thin material.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;blurAmount&lt;/code&gt; (Default: 10, Number) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;0-100&lt;/code&gt; - Adjusts blur intensity&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;reducedTransparencyFallbackColor&lt;/code&gt; (Color) (iOS only) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;black, white, #rrggbb, etc&lt;/code&gt; - background color to use if accessibility setting ReduceTransparency is enabled&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The maximum &lt;code&gt;blurAmount&lt;/code&gt; on Android is 32, so higher values will be clamped to 32.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Complete usage example that works on iOS and Android:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { Component } from &#34;react&#34;;&#xA;import { View, Image, Text, StyleSheet } from &#34;react-native&#34;;&#xA;import { BlurView } from &#34;@react-native-community/blur&#34;;&#xA;&#xA;export default class Menu extends Component {&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;View style={styles.container}&amp;gt;&#xA;        &amp;lt;Image&#xA;          key={&#39;blurryImage&#39;}&#xA;          source={{ uri }}&#xA;          style={styles.absolute}&#xA;        /&amp;gt;&#xA;        &amp;lt;Text style={styles.absolute}&amp;gt;Hi, I am some blurred text&amp;lt;/Text&amp;gt;&#xA;{/* in terms of positioning and zIndex-ing everything before the BlurView will be blurred */}&#xA;        &amp;lt;BlurView&#xA;          style={styles.absolute}&#xA;          blurType=&#34;light&#34;&#xA;          blurAmount={10}&#xA;          reducedTransparencyFallbackColor=&#34;white&#34;&#xA;        /&amp;gt;&#xA;        &amp;lt;Text&amp;gt;I&#39;m the non blurred text because I got rendered on top of the BlurView&amp;lt;/Text&amp;gt;&#xA;      &amp;lt;/View&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;const styles = StyleSheet.create({&#xA;  container: {&#xA;    justifyContent: &#34;center&#34;,&#xA;    alignItems: &#34;center&#34;&#xA;  },&#xA;  absolute: {&#xA;    position: &#34;absolute&#34;,&#xA;    top: 0,&#xA;    left: 0,&#xA;    bottom: 0,&#xA;    right: 0&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, the &lt;code&gt;Image&lt;/code&gt; component will be blurred, because the &lt;code&gt;BlurView&lt;/code&gt; in positioned on top. But the &lt;code&gt;Text&lt;/code&gt; will stay unblurred.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;a href=&#34;https://support.apple.com/guide/iphone/display-settings-iph3e2e1fb0/ios&#34;&gt;accessibility setting &lt;code&gt;Reduce Transparency&lt;/code&gt;&lt;/a&gt; is enabled the &lt;code&gt;BlurView&lt;/code&gt; will use &lt;code&gt;reducedTransparencyFallbackColor&lt;/code&gt; as it&#39;s background color rather than blurring. If no &lt;code&gt;reducedTransparencyFallbackColor&lt;/code&gt; is provided, the&lt;code&gt;BlurView&lt;/code&gt;will use the default fallback color (white, black, or grey depending on &lt;code&gt;blurType&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;VibrancyView&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Uses the same properties as &lt;code&gt;BlurView&lt;/code&gt; (&lt;code&gt;blurType&lt;/code&gt;, &lt;code&gt;blurAmount&lt;/code&gt;, and &lt;code&gt;reducedTransparencyFallbackColor&lt;/code&gt;).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The vibrancy effect lets the content underneath a blurred view show through more vibrantly&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;(Note: &lt;code&gt;VibrancyView&lt;/code&gt; is only supported on iOS. Also note that the &lt;code&gt;VibrancyView&lt;/code&gt; must contain nested views.)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { VibrancyView } from &#34;@react-native-community/blur&#34;;&#xA;&#xA;export default class Menu extends Component {&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;Image source={{ uri }} style={styles.absolute}&amp;gt;&#xA;        &amp;lt;VibrancyView blurType=&#34;light&#34; style={styles.flex}&amp;gt;&#xA;          &amp;lt;Text&amp;gt;Hi, I am some vibrant text.&amp;lt;/Text&amp;gt;&#xA;        &amp;lt;/VibrancyView&amp;gt;&#xA;      &amp;lt;/Image&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Android uses the &lt;a href=&#34;https://github.com/Dimezis/BlurView&#34;&gt;BlurView&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you only need to support iOS, then you can safely ignore these limitations.&lt;/p&gt; &#xA;&lt;p&gt;In addition to &lt;code&gt;blurType&lt;/code&gt; and &lt;code&gt;blurAmount&lt;/code&gt;, Android has some extra props that can be used to override the default behavior (or configure Android-specific behavior):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;blurRadius&lt;/code&gt; (Number - between 0 and 25) - Manually adjust the blur radius. (Default: matches iOS blurAmount)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;downsampleFactor&lt;/code&gt; (Number - between 0 and 25) - Scales down the image before blurring (Default: matches iOS blurAmount)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;overlayColor&lt;/code&gt; (Color) - Set a custom overlay color (Default color based on iOS blurType)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example React Native App&lt;/h3&gt; &#xA;&lt;p&gt;This project includes an example React Native app, which was used to make the GIF in this README. You can run the apps by following these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~&#xA;git clone https://github.com/react-native-community/react-native-blur.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;cd to &lt;code&gt;example&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd react-native-blur/example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install dependencies&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run the apps:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Run the iOS app&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;react-native run-ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run the tvOS app&lt;/h4&gt; &#xA;&lt;p&gt;type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;react-native run-ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;react-native link&lt;/code&gt; don’t works properly with the tvOS target so we need to add the library manually.&lt;/p&gt; &#xA;&lt;p&gt;First select your project in Xcode.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/docs/tvOS-step-1.jpg&#34; width=&#34;40%&#34;&gt; &#xA;&lt;p&gt;After that, select the tvOS target of your application and select «&amp;nbsp;General&amp;nbsp;» tab&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/docs/tvOS-step-2.jpg&#34; width=&#34;40%&#34;&gt; &#xA;&lt;p&gt;Scroll to «&amp;nbsp;Linked Frameworks and Libraries&amp;nbsp;» and tap on the + button&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/docs/tvOS-step-3.jpg&#34; width=&#34;40%&#34;&gt; &#xA;&lt;p&gt;Select RNBlur-tvOS&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Kureev/react-native-blur/master/docs/tvOS-step-4.jpg&#34; width=&#34;40%&#34;&gt; &#xA;&lt;p&gt;That’s all, you can use react-native-blur for your tvOS application&lt;/p&gt; &#xA;&lt;h4&gt;Run the Android app&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;react-native run-android&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;On older instances of react-native, BlurView package does not get added into the MainActivity/MainApplication classes where you would see &lt;code&gt;Warning: Native component for &#39;BlurView&#39; does not exist&lt;/code&gt; in RN YellowBox or console.&lt;/p&gt; &#xA;&lt;p&gt;To rectify this, you can add the BlurViewPackage manually in MainActivity/MainApplication classes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;...&#xA;import com.cmcewen.blurview.BlurViewPackage;&#xA;...&#xA;&#xA;public class MainApplication extends Application implements ReactApplication {&#xA;...&#xA;    @Override&#xA;    protected List&amp;lt;ReactPackage&amp;gt; getPackages() {&#xA;      return Arrays.&amp;lt;ReactPackage&amp;gt;asList(&#xA;          new MainReactPackage(),&#xA;          new BlurViewPackage()&#xA;      );&#xA;    }&#xA;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Questions?&lt;/h3&gt; &#xA;&lt;p&gt;Feel free to contact me on &lt;a href=&#34;https://twitter.com/kureevalexey&#34;&gt;twitter&lt;/a&gt; or &lt;a href=&#34;https://github.com/Kureev/react-native-blur/issues/new&#34;&gt;create an issue&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CocoaLumberjack/CocoaLumberjack</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/CocoaLumberjack/CocoaLumberjack</id>
    <link href="https://github.com/CocoaLumberjack/CocoaLumberjack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast &amp; simple, yet powerful &amp; flexible logging framework for Mac and iOS&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/LumberjackLogo.png&#34; title=&#34;Lumberjack logo&#34; float=&#34;left&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;CocoaLumberjack&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/CocoaLumberjack/CocoaLumberjack/workflows/Unit%20Tests/badge.svg?sanitize=true&#34; alt=&#34;Unit Tests&#34;&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/CocoaLumberjack/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/CocoaLumberjack.svg?style=flat&#34; alt=&#34;Pod Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/CocoaLumberjack/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/CocoaLumberjack.svg?style=flat&#34; alt=&#34;Pod Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://opensource.org/licenses/BSD-3-Clause&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/l/CocoaLumberjack.svg?style=flat&#34; alt=&#34;Pod License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/CocoaLumberjack/CocoaLumberjack&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/CocoaLumberjack/CocoaLumberjack/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-cocoalumberjack-cocoalumberjack-master&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/840b714a-c8f3-4936-ada4-363473cd4e6b&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CocoaLumberjack&lt;/strong&gt; is a fast &amp;amp; simple, yet powerful &amp;amp; flexible logging framework for macOS, iOS, tvOS and watchOS.&lt;/p&gt; &#xA;&lt;h2&gt;How to get started&lt;/h2&gt; &#xA;&lt;p&gt;First, install CocoaLumberjack via &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; or manually. Then use &lt;code&gt;DDOSLogger&lt;/code&gt; for iOS 10 and later, or &lt;code&gt;DDTTYLogger&lt;/code&gt; and &lt;code&gt;DDASLLogger&lt;/code&gt; for earlier versions to begin logging messages.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;9.0&#39;&#xA;&#xA;target &#39;SampleTarget&#39; do&#xA;  use_frameworks!&#xA;  pod &#39;CocoaLumberjack/Swift&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;Swift&lt;/code&gt; is a subspec which will include all the Obj-C code plus the Swift one, so this is sufficient. For more details about how to use Swift with Lumberjack, see &lt;a href=&#34;https://github.com/CocoaLumberjack/CocoaLumberjack/issues/405&#34;&gt;this conversation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Objective-C use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;9.0&#39;&#xA;&#xA;target &#39;SampleTarget&#39; do&#xA;    pod &#39;CocoaLumberjack&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Carthage is a lightweight dependency manager for Swift and Objective-C. It leverages CocoaTouch modules and is less invasive than CocoaPods.&lt;/p&gt; &#xA;&lt;p&gt;To install with Carthage, follow the instruction on &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cartfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;CocoaLumberjack/CocoaLumberjack&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;As of CocoaLumberjack 3.6.0, you can use the Swift Package Manager as integration method. If you want to use the Swift Package Manager as integration method, either use Xcode to add the package dependency or add the following dependency to your Package.swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/CocoaLumberjack/CocoaLumberjack.git&#34;, from: &#34;3.7.0&#34;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you may need to add both products, &lt;code&gt;CocoaLumberjack&lt;/code&gt; and &lt;code&gt;CocoaLumberjackSwift&lt;/code&gt; to your target since SPM sometimes fails to detect that &lt;code&gt;CocoaLumerjackSwift&lt;/code&gt; depends on &lt;code&gt;CocoaLumberjack&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install manually&lt;/h3&gt; &#xA;&lt;p&gt;If you want to install CocoaLumberjack manually, read the &lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/GettingStarted.md#manual-installation&#34;&gt;manual installation&lt;/a&gt; guide for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Usage&lt;/h3&gt; &#xA;&lt;p&gt;Usually, you can simply &lt;code&gt;import CocoaLumberjackSwift&lt;/code&gt;. If you installed CocoaLumberjack using CocoaPods, you need to use &lt;code&gt;import CocoaLumberjack&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;DDLog.add(DDOSLogger.sharedInstance) // Uses os_log&#xA;&#xA;let fileLogger: DDFileLogger = DDFileLogger() // File Logger&#xA;fileLogger.rollingFrequency = 60 * 60 * 24 // 24 hours&#xA;fileLogger.logFileManager.maximumNumberOfLogFiles = 7&#xA;DDLog.add(fileLogger)&#xA;&#xA;...&#xA;&#xA;DDLogVerbose(&#34;Verbose&#34;)&#xA;DDLogDebug(&#34;Debug&#34;)&#xA;DDLogInfo(&#34;Info&#34;)&#xA;DDLogWarn(&#34;Warn&#34;)&#xA;DDLogError(&#34;Error&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Obj-C usage&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Lumberjack as a framework, you can &lt;code&gt;@import CocoaLumberjack;&lt;/code&gt;. Otherwise, &lt;code&gt;#import &amp;lt;CocoaLumberjack/CocoaLumberjack.h&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[DDLog addLogger:[DDOSLogger sharedInstance]]; // Uses os_log&#xA;&#xA;DDFileLogger *fileLogger = [[DDFileLogger alloc] init]; // File Logger&#xA;fileLogger.rollingFrequency = 60 * 60 * 24; // 24 hour rolling&#xA;fileLogger.logFileManager.maximumNumberOfLogFiles = 7;&#xA;[DDLog addLogger:fileLogger];&#xA;&#xA;...&#xA;&#xA;DDLogVerbose(@&#34;Verbose&#34;);&#xA;DDLogDebug(@&#34;Debug&#34;);&#xA;DDLogInfo(@&#34;Info&#34;);&#xA;DDLogWarn(@&#34;Warn&#34;);&#xA;DDLogError(@&#34;Error&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Objective-C ARC Semantic Issue&lt;/h3&gt; &#xA;&lt;p&gt;When integrating Lumberjack into an existing Objective-C it is possible to run into &lt;code&gt;Multiple methods named &#39;tag&#39; found with mismatched result, parameter type or attributes&lt;/code&gt; build error.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;#define DD_LEGACY_MESSAGE_TAG 0&lt;/code&gt; before importing CocoaLumberjack or add &lt;code&gt;#define DD_LEGACY_MESSAGE_TAG 0&lt;/code&gt; or add &lt;code&gt;-DDD_LEGACY_MESSAGE_TAG=0&lt;/code&gt; to &lt;em&gt;Other C Flags&lt;/em&gt;/&lt;em&gt;OTHER_CFLAGS&lt;/em&gt; in your Xcode project.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/apple/swift-log&#34;&gt;swift-log&lt;/a&gt; backend&lt;/h2&gt; &#xA;&lt;p&gt;CocoaLumberjack also ships with a backend implementation for &lt;a href=&#34;https://github.com/apple/swift-log&#34;&gt;swift-log&lt;/a&gt;. Simply add CocoaLumberjack as dependency to your SPM target (see above) and also add the &lt;code&gt;CocoaLumberjackSwiftLogBackend&lt;/code&gt; product as dependency to your target.&lt;/p&gt; &#xA;&lt;p&gt;You can then use &lt;code&gt;DDLogHandler&lt;/code&gt; as backend for swift-log, which will forward all messages to CocoaLumberjack&#39;s &lt;code&gt;DDLog&lt;/code&gt;. You will still configure the loggers and log formatters you want via &lt;code&gt;DDLog&lt;/code&gt;, but writing log messages will be done using &lt;code&gt;Logger&lt;/code&gt; from swift-log.&lt;/p&gt; &#xA;&lt;p&gt;In your own log formatters, you can make use of the &lt;code&gt;swiftLogInfo&lt;/code&gt; property on &lt;code&gt;DDLogMessage&lt;/code&gt; to retrieve the details of a message that is logged via swift-log.&lt;/p&gt; &#xA;&lt;p&gt;To use swift-log with CocoaLumberjack, take a look the following code snippet to see how to get started.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Import necessary packages&#xA;import CocoaLumberjackSwift&#xA;import CocoaLumberjackSwiftLogBackend&#xA;import Logging&#xA;&#xA;// In your application&#39;s entry point (e.g. AppDelegate):&#xA;DDLog.add(DDOSLogger.sharedInstance) // Configure loggers&#xA;LoggingSystem.bootstrapWithCocoaLumberjack() // Use CocoaLumberjack as swift-log backend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;read the &lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/GettingStarted.md&#34;&gt;Getting started&lt;/a&gt; guide, check out the &lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/FAQ.md&#34;&gt;FAQ&lt;/a&gt; section or the other &lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/&#34;&gt;docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;if you find issues or want to suggest improvements, create an issue or a pull request&lt;/li&gt; &#xA; &lt;li&gt;for all kinds of questions involving CocoaLumberjack, use the &lt;a href=&#34;https://groups.google.com/group/cocoalumberjack&#34;&gt;Google group&lt;/a&gt; or StackOverflow (use &lt;a href=&#34;https://stackoverflow.com/questions/tagged/lumberjack&#34;&gt;#lumberjack&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CocoaLumberjack 3&lt;/h2&gt; &#xA;&lt;h3&gt;Migrating to 3.x&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To be determined&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Lumberjack is Fast &amp;amp; Simple, yet Powerful &amp;amp; Flexible.&lt;/h3&gt; &#xA;&lt;p&gt;It is similar in concept to other popular logging frameworks such as log4j, yet is designed specifically for Objective-C, and takes advantage of features such as multi-threading, grand central dispatch (if available), lockless atomic operations, and the dynamic nature of the Objective-C runtime.&lt;/p&gt; &#xA;&lt;h3&gt;Lumberjack is Fast&lt;/h3&gt; &#xA;&lt;p&gt;In most cases it is an order of magnitude faster than NSLog.&lt;/p&gt; &#xA;&lt;h3&gt;Lumberjack is Simple&lt;/h3&gt; &#xA;&lt;p&gt;It takes as little as a single line of code to configure lumberjack when your application launches. Then simply replace your NSLog statements with DDLog statements and that&#39;s about it. (And the DDLog macros have the exact same format and syntax as NSLog, so it&#39;s super easy.)&lt;/p&gt; &#xA;&lt;h3&gt;Lumberjack is Powerful:&lt;/h3&gt; &#xA;&lt;p&gt;One log statement can be sent to multiple loggers, meaning you can log to a file and the console simultaneously. Want more? Create your own loggers (it&#39;s easy) and send your log statements over the network. Or to a database or distributed file system. The sky is the limit.&lt;/p&gt; &#xA;&lt;h3&gt;Lumberjack is Flexible:&lt;/h3&gt; &#xA;&lt;p&gt;Configure your logging however you want. Change log levels per file (perfect for debugging). Change log levels per logger (verbose console, but concise log file). Change log levels per xcode configuration (verbose debug, but concise release). Have your log statements compiled out of the release build. Customize the number of log levels for your application. Add your own fine-grained logging. Dynamically change log levels during runtime. Choose how &amp;amp; when you want your log files to be rolled. Upload your log files to a central server. Compress archived log files to save disk space...&lt;/p&gt; &#xA;&lt;h2&gt;This framework is for you if:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You&#39;re looking for a way to track down that impossible-to-reproduce bug that keeps popping up in the field.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re frustrated with the super short console log on the iPhone.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re looking to take your application to the next level in terms of support and stability.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re looking for an enterprise level logging solution for your application (Mac or iPhone).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/GettingStarted.md&#34;&gt;Get started using Lumberjack&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/XcodeTricks.md&#34;&gt;Different log levels for Debug and Release builds&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/PerLoggerLogLevels.md&#34;&gt;Different log levels for each logger&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/XcodeColors.md&#34;&gt;Use colors in the Xcode debugging console&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/CustomFormatters.md&#34;&gt;Write your own custom formatters&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/FAQ.md&#34;&gt;FAQ&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/Performance.md&#34;&gt;Analysis of performance with benchmarks&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/ProblemSolution.md&#34;&gt;Common issues you may encounter and their solutions&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/AppCode-support.md&#34;&gt;AppCode support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/&#34;&gt;Full Lumberjack documentation&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The current version of Lumberjack requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12 or later&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.3 or later&lt;/li&gt; &#xA; &lt;li&gt;iOS 9 or later&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.10 or later&lt;/li&gt; &#xA; &lt;li&gt;watchOS 3 or later&lt;/li&gt; &#xA; &lt;li&gt;tvOS 9 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Backwards compatibility&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for Xcode 11 and Swift up to 5.2, use the 3.6.2 version&lt;/li&gt; &#xA; &lt;li&gt;for Xcode 10 and Swift 4.2, use the 3.5.2 version&lt;/li&gt; &#xA; &lt;li&gt;for iOS 8, use the 3.6.1 version&lt;/li&gt; &#xA; &lt;li&gt;for iOS 6, iOS 7, OS X 10.8, OS X 10.9 and Xcode 9, use the 3.4.2 version&lt;/li&gt; &#xA; &lt;li&gt;for iOS 5 and OS X 10.7, use the 3.3 version&lt;/li&gt; &#xA; &lt;li&gt;for Xcode 8 and Swift 3, use the 3.2 version&lt;/li&gt; &#xA; &lt;li&gt;for Xcode 7.3 and Swift 2.3, use the 2.4.0 version&lt;/li&gt; &#xA; &lt;li&gt;for Xcode 7.3 and Swift 2.2, use the 2.3.0 version&lt;/li&gt; &#xA; &lt;li&gt;for Xcode 7.2 and 7.1, use the 2.2.0 version&lt;/li&gt; &#xA; &lt;li&gt;for Xcode 7.0 or earlier, use the 2.1.0 version&lt;/li&gt; &#xA; &lt;li&gt;for Xcode 6 or earlier, use the 2.0.x version&lt;/li&gt; &#xA; &lt;li&gt;for OS X &amp;lt; 10.7 support, use the 1.6.0 version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&#34;https://stackoverflow.com/questions/tagged/lumberjack&#34;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;lumberjack&#39;)&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&#34;https://stackoverflow.com/questions/tagged/lumberjack&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a pull request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data Collection Practices&lt;/h2&gt; &#xA;&lt;p&gt;Per &lt;a href=&#34;https://developer.apple.com/app-store/app-privacy-details/&#34;&gt;App privacy details on the App Store&lt;/a&gt;, Apple is requesting app developers to provide info about their data collection, us SDK maintainers must provide them with the same data.&lt;/p&gt; &#xA;&lt;h3&gt;Data collection by the framework&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;By default, CocoaLumberjack does NOT collect any data on its own.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoalumberjack.github.io/DataCollection/index.html&#34;&gt;See our Data Collection Practices list.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Indirect data collection through the framework&lt;/h3&gt; &#xA;&lt;p&gt;CocoaLumberjack is a logging framework which makes it easy to send those logs to different platforms.&lt;/p&gt; &#xA;&lt;p&gt;This is why collecting data might happen quite easily, if app developers include any sensitive data into their log messages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important note: app developers are fully responsible for any sensitive data collected through our logging system!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In consequence, you must comply to the Apple&#39;s privacy details policy (mentioned above) and document the ways in which user data is being collected. Since the number of scenarios where data might be indirectly collected through CocoaLumberjack is quite large, it&#39;s up to you, as app developers, to properly review your app&#39;s code and identify those cases. What we can do to help is raise awareness about potential data collection through our framework.&lt;/p&gt; &#xA;&lt;p&gt;Private data includes but isn&#39;t limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;user info (name, email, address, ...)&lt;/li&gt; &#xA; &lt;li&gt;location info&lt;/li&gt; &#xA; &lt;li&gt;contacts&lt;/li&gt; &#xA; &lt;li&gt;identifiers (user id, device id, ...)&lt;/li&gt; &#xA; &lt;li&gt;app usage data&lt;/li&gt; &#xA; &lt;li&gt;performance data&lt;/li&gt; &#xA; &lt;li&gt;health and fitness info&lt;/li&gt; &#xA; &lt;li&gt;financial info&lt;/li&gt; &#xA; &lt;li&gt;sensitive info&lt;/li&gt; &#xA; &lt;li&gt;user content&lt;/li&gt; &#xA; &lt;li&gt;history (browsing, search, ...)&lt;/li&gt; &#xA; &lt;li&gt;purchases&lt;/li&gt; &#xA; &lt;li&gt;diagnostics&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;code&gt;DDLogInfo(&#34;User: \(myUser)&#34;)&lt;/code&gt; will add the &lt;code&gt;myUser&lt;/code&gt; info to the logs, so if those are forwarded to a 3rd party or sent via email, that may qualify as data collection.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robbiehanson&#34;&gt;Robbie Hanson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Love the project? Wanna buy me a coffee? (or a beer :D) &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=UZRA26JPJB3DA&#34;&gt;&lt;img src=&#34;http://www.paypal.com/en_US/i/btn/btn_donate_SM.gif&#34; alt=&#34;donation&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Collaborators&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rivera-ernesto&#34;&gt;Ernesto Rivera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dvor&#34;&gt;Dmitry Vorobyov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bpoplauschi&#34;&gt;Bogdan Poplauschi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MaddTheSane&#34;&gt;C.W. Betts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sushichop&#34;&gt;Koichi Yokota (sushichop)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nrbrook&#34;&gt;Nick Brook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ffried&#34;&gt;Florian Friedrich&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/diederich&#34;&gt;Stephan Diederich&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ksuther&#34;&gt;Kent Sutherland&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lolgear&#34;&gt;Dmitry Lobanov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hhanesand&#34;&gt;Hakon Hanesand&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CocoaLumberjack is available under the BSD 3 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/LICENSE&#34;&gt;LICENSE file&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/s4nchez/LogIO-CocoaLumberjack&#34;&gt;LogIO-CocoaLumberjack&lt;/a&gt; A log.io logger for CocoaLumberjack&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xced/XCDLumberjackNSLogger&#34;&gt;XCDLumberjackNSLogger&lt;/a&gt; CocoaLumberjack logger which sends logs to NSLogger&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/CocoaLumberjackClassDiagram.png&#34; title=&#34;CocoaLumberjack class diagram&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>adjust/ios_sdk</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/adjust/ios_sdk</id>
    <link href="https://github.com/adjust/ios_sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is the iOS SDK of&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;This guide is being retired.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This README file will be retired shortly. The SDK documentation can now be found on our help center:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.adjust.com/en/developer/ios-sdk-documentation&#34;&gt;English&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.adjust.com/zh/developer/ios-sdk-documentation&#34;&gt;中文&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.adjust.com/ja/developer/ios-sdk-documentation&#34;&gt;日本語&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.adjust.com/ko/developer/ios-sdk-documentation&#34;&gt;한국어&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;This is the iOS SDK of Adjust™. You can read more about Adjust™ at &lt;a href=&#34;http://adjust.com&#34;&gt;adjust.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If your app is an app which uses web views you would like to use adjust tracking from Javascript code, please consult our &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/doc/english/web_views.md&#34;&gt;iOS web views SDK guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read this in other languages: &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/README.md&#34;&gt;English&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/doc/chinese/README.md&#34;&gt;中文&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/doc/japanese/README.md&#34;&gt;日本語&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/doc/korean/README.md&#34;&gt;한국어&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#example-apps&#34;&gt;Example apps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#basic-integration&#34;&gt;Basic integration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#sdk-add&#34;&gt;Add the SDK to your project&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#sdk-frameworks&#34;&gt;Add iOS frameworks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#sdk-integrate&#34;&gt;Integrate the SDK into your app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#basic-setup&#34;&gt;Basic setup&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#basic-setup-imessage&#34;&gt;iMessage specific setup&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#adjust-logging&#34;&gt;Adjust logging&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#build-the-app&#34;&gt;Build your app&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#additional-features&#34;&gt;Additional features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#att-framework&#34;&gt;AppTrackingTransparency framework&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#ata-wrapper&#34;&gt;App-tracking authorisation wrapper&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#ata-getter&#34;&gt;Get current authorisation status&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#att-status-change&#34;&gt;Check for ATT status change&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#skadn-framework&#34;&gt;SKAdNetwork framework&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#skadn-update-conversion-value&#34;&gt;Update SKAdNetwork conversion value&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#skadn-cv-updated-callback&#34;&gt;Conversion value updated callback&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#event-tracking&#34;&gt;Event tracking&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#revenue-tracking&#34;&gt;Revenue tracking&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#revenue-deduplication&#34;&gt;Revenue deduplication&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#callback-parameters&#34;&gt;Callback parameters&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#partner-parameters&#34;&gt;Partner parameters&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#callback-id&#34;&gt;Callback identifier&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#session-parameters&#34;&gt;Session parameters&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#session-callback-parameters&#34;&gt;Session callback parameters&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#session-partner-parameters&#34;&gt;Session partner parameters&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#delay-start&#34;&gt;Delay start&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#attribution-callback&#34;&gt;Attribution callback&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#ad-revenue&#34;&gt;Ad revenue tracking&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#subscriptions&#34;&gt;Subscription tracking&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#event-session-callbacks&#34;&gt;Event and session callbacks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#disable-tracking&#34;&gt;Disable tracking&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#offline-mode&#34;&gt;Offline mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#event-buffering&#34;&gt;Event buffering&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#gdpr-forget-me&#34;&gt;GDPR right to be forgotten&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#third-party-sharing&#34;&gt;Third-party sharing&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#disable-third-party-sharing&#34;&gt;Disable third-party sharing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#enable-third-party-sharing&#34;&gt;Enable third-party sharing&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#measurement-consent&#34;&gt;Consent measurement&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#sdk-signature&#34;&gt;SDK signature&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#background-tracking&#34;&gt;Background tracking&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#device-ids&#34;&gt;Device IDs&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#di-idfa&#34;&gt;iOS Advertising Identifier&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#di-adid&#34;&gt;Adjust device identifier&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#user-attribution&#34;&gt;User attribution&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#push-token&#34;&gt;Push token&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#pre-installed-trackers&#34;&gt;Pre-installed trackers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#deeplinking&#34;&gt;Deep linking&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#deeplinking-standard&#34;&gt;Standard deep linking scenario&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#deeplinking-setup-old&#34;&gt;Deep linking on iOS 8 and earlier&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#deeplinking-setup-new&#34;&gt;Deep linking on iOS 9 and later&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#deeplinking-deferred&#34;&gt;Deferred deep linking scenario&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#deeplinking-reattribution&#34;&gt;Reattribution via deep links&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#link-resolution&#34;&gt;Link resolution&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#data-residency&#34;&gt;Data residency&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#af-coppa-compliance&#34;&gt;COPPA compliance&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#ts-delayed-init&#34;&gt;Issues with delayed SDK initialisation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#ts-arc&#34;&gt;I&#39;m seeing &#34;Adjust requires ARC&#34; error&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#ts-categories&#34;&gt;I&#39;m seeing &#34;[UIDevice adjTrackingEnabled]: unrecognized selector sent to instance&#34; error&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#ts-session-failed&#34;&gt;I&#39;m seeing the &#34;Session failed (Ignoring too frequent session.)&#34; error&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#ts-install-tracked&#34;&gt;I&#39;m not seeing &#34;Install tracked&#34; in the logs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#ts-iad-sdk-click&#34;&gt;I&#39;m seeing &#34;Unattributable SDK click ignored&#34; message&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#ts-wrong-revenue-amount&#34;&gt;I&#39;m seeing wrong revenue data in the adjust dashboard&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;example-apps&#34;&gt;&lt;/a&gt;Example apps&lt;/h2&gt; &#xA;&lt;p&gt;There are example apps inside the &lt;a href=&#34;http://github.com/adjust/ios_sdk/tree/master/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt; directory&lt;/a&gt; for &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/examples/AdjustExample-ObjC&#34;&gt;&lt;code&gt;iOS (Objective-C)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/examples/AdjustExample-Swift&#34;&gt;&lt;code&gt;iOS (Swift)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/examples/AdjustExample-tvOS&#34;&gt;&lt;code&gt;tvOS&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/examples/AdjustExample-iMessage&#34;&gt;&lt;code&gt;iMessage&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/examples/AdjustExample-iWatch&#34;&gt;&lt;code&gt;Apple Watch&lt;/code&gt;&lt;/a&gt;. You can open any of these Xcode projects to see an example of how the Adjust SDK can be integrated.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;basic-integration&#34;&gt;Basic integration&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a id=&#34;basic-integration&#34;&gt; &lt;p&gt;We will describe the steps to integrate the Adjust SDK into your iOS project. We are going to assume that you are using Xcode for your iOS development.&lt;/p&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a id=&#34;basic-integration&#34;&gt;&lt;/a&gt;&lt;a id=&#34;sdk-add&#34;&gt;&lt;/a&gt;Add the SDK to your project&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, you can add the following line to your &lt;code&gt;Podfile&lt;/code&gt; and continue from &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#sdk-integrate&#34;&gt;this step&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Adjust&#39;, &#39;~&amp;gt; 4.30.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Adjust&#39;, :git =&amp;gt; &#39;https://github.com/adjust/ios_sdk.git&#39;, :tag =&amp;gt; &#39;v4.30.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, you can add following line to your &lt;code&gt;Cartfile&lt;/code&gt; and continue from &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#sdk-frameworks&#34;&gt;this step&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;adjust/ios_sdk&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you&#39;re using Swift Package Manager, you can add the repository address directly in Xcode going to &lt;code&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/code&gt; and continue from &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#sdk-frameworks&#34;&gt;this step&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/adjust/ios_sdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;You can also choose to integrate the Adjust SDK by adding it to your project as a framework. On the &lt;a href=&#34;https://github.com/adjust/ios_sdk/releases&#34;&gt;releases page&lt;/a&gt; you can find the following archives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AdjustSdkStatic.framework.zip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AdjustSdkDynamic.framework.zip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AdjustSdkTv.framework.zip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AdjustSdkIm.framework.zip&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since the release of iOS 8, Apple has introduced dynamic frameworks (also known as embedded frameworks). If your app is targeting iOS 8 or higher, you can use the Adjust SDK dynamic framework. Choose which framework you want to use – static or dynamic – and add it to your project.&lt;/p&gt; &#xA;&lt;p&gt;If you are having &lt;code&gt;tvOS&lt;/code&gt; app, you can use the Adjust SDK with it as well with usage of our tvOS framework which you can extract from &lt;code&gt;AdjustSdkTv.framework.zip&lt;/code&gt; archive.&lt;/p&gt; &#xA;&lt;p&gt;If you are having &lt;code&gt;iMessage&lt;/code&gt; app, you can use the Adjust SDK with it as well with usage of our IM framework which you can extract from &lt;code&gt;AdjustSdkIm.framework.zip&lt;/code&gt; archive.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;sdk-frameworks&#34;&gt;&lt;/a&gt;Add iOS frameworks&lt;/h3&gt; &#xA;&lt;p&gt;Adjust SDK is able to get additional information in case you link additional iOS frameworks to your app. Please, add following frameworks in case you want to enable Adjust SDK features based on their presence in your app and mark them as optional:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AdSupport.framework&lt;/code&gt; - This framework is needed so that SDK can access to IDFA value and (prior to iOS 14) LAT information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iAd.framework&lt;/code&gt; - This framework is needed so that SDK can automatically handle attribution for ASA campaigns you might be running.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AdServices.framework&lt;/code&gt; - For devices running iOS 14.3 or higher, this framework allows the SDK to automatically handle attribution for ASA campaigns. It is required when leveraging the Apple Ads Attribution API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CoreTelephony.framework&lt;/code&gt; - This framework is needed so that SDK can determine current radio access technology.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StoreKit.framework&lt;/code&gt; - This framework is needed for access to &lt;code&gt;SKAdNetwork&lt;/code&gt; framework and for Adjust SDK to handle communication with it automatically in iOS 14 or later.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AppTrackingTransparency.framework&lt;/code&gt; - This framework is needed in iOS 14 and later for SDK to be able to wrap user&#39;s tracking consent dialog and access to value of the user&#39;s consent to be tracked or not.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;sdk-integrate&#34;&gt;&lt;/a&gt;Integrate the SDK into your app&lt;/h3&gt; &#xA;&lt;p&gt;If you added the Adjust SDK via a Pod repository, you should use one of the following import statements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &#34;Adjust.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;Adjust/Adjust.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you added the Adjust SDK as a static/dynamic framework or via Carthage, you should use the following import statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;AdjustSdk/Adjust.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you are are using the Adjust SDK with your tvOS app, you should use the following import statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;AdjustSdkTv/Adjust.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you are are using the Adjust SDK with your iMessage app, you should use the following import statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;AdjustSdkIm/Adjust.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, we&#39;ll set up basic session tracking.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;basic-setup&#34;&gt;&lt;/a&gt;Basic setup&lt;/h3&gt; &#xA;&lt;p&gt;In the Project Navigator, open the source file of your application delegate. Add the &lt;code&gt;import&lt;/code&gt; statement at the top of the file, then add the following call to &lt;code&gt;Adjust&lt;/code&gt; in the &lt;code&gt;didFinishLaunching&lt;/code&gt; or &lt;code&gt;didFinishLaunchingWithOptions&lt;/code&gt; method of your app delegate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &#34;Adjust.h&#34;&#xA;// or #import &amp;lt;Adjust/Adjust.h&amp;gt;&#xA;// or #import &amp;lt;AdjustSdk/Adjust.h&amp;gt;&#xA;// or #import &amp;lt;AdjustSdkTv/Adjust.h&amp;gt;&#xA;// or #import &amp;lt;AdjustSdkIm/Adjust.h&amp;gt;&#xA;&#xA;// ...&#xA;&#xA;NSString *yourAppToken = @&#34;{YourAppToken}&#34;;&#xA;NSString *environment = ADJEnvironmentSandbox;&#xA;ADJConfig *adjustConfig = [ADJConfig configWithAppToken:yourAppToken&#xA;                                            environment:environment];&#xA;&#xA;[Adjust appDidLaunch:adjustConfig];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/adjust/sdks/master/Resources/ios/delegate5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Initialising the Adjust SDK like this is &lt;code&gt;very important&lt;/code&gt;. Otherwise, you may encounter different kinds of issues as described in our &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#ts-delayed-init&#34;&gt;troubleshooting section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;{YourAppToken}&lt;/code&gt; with your app token. You can find this in your &lt;a href=&#34;http://adjust.com&#34;&gt;dashboard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Depending on whether you build your app for testing or for production, you must set &lt;code&gt;environment&lt;/code&gt; with one of these values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString *environment = ADJEnvironmentSandbox;&#xA;NSString *environment = ADJEnvironmentProduction;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; This value should be set to &lt;code&gt;ADJEnvironmentSandbox&lt;/code&gt; if and only if you or someone else is testing your app. Make sure to set the environment to &lt;code&gt;ADJEnvironmentProduction&lt;/code&gt; just before you publish the app. Set it back to &lt;code&gt;ADJEnvironmentSandbox&lt;/code&gt; when you start developing and testing it again.&lt;/p&gt; &#xA;&lt;p&gt;We use this environment to distinguish between real traffic and test traffic from test devices. It is very important that you keep this value meaningful at all times! This is especially important if you are tracking revenue.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;basic-setup-imessage&#34;&gt;&lt;/a&gt;iMessage specific setup&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Adding SDK from source:&lt;/strong&gt; In case that you have chosen to add Adjust SDK to your iMessage app &lt;strong&gt;from source&lt;/strong&gt;, please make sure that you have pre-processor macro &lt;strong&gt;ADJUST_IM=1&lt;/strong&gt; set in your iMessage project settings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Adding SDK as framework:&lt;/strong&gt; After you have added &lt;code&gt;AdjustSdkIm.framework&lt;/code&gt; to your iMessage app, please make sure to add &lt;code&gt;New Copy Files Phase&lt;/code&gt; in your &lt;code&gt;Build Phases&lt;/code&gt; project settings and select that &lt;code&gt;AdjustSdkIm.framework&lt;/code&gt; should be copied to &lt;code&gt;Frameworks&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Session tracking:&lt;/strong&gt; If you would like to have session tracking properly working in your iMessage app, you will need to do one additional integration step. In standard iOS apps Adjust SDK is automatically subscribed to iOS system notifications which enable us to know when app entered or left foreground. In case of iMessage app, this is not the case, so we need you to add explicit calls to &lt;code&gt;trackSubsessionStart&lt;/code&gt; and &lt;code&gt;trackSubsessionEnd&lt;/code&gt; methods inside of your iMessage app view controller to make our SDK aware of the moments when your app is being in foreground or not.&lt;/p&gt; &#xA;&lt;p&gt;Add call to &lt;code&gt;trackSubsessionStart&lt;/code&gt; inside of &lt;code&gt;didBecomeActiveWithConversation:&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;-(void)didBecomeActiveWithConversation:(MSConversation *)conversation {&#xA;    // Called when the extension is about to move from the inactive to active state.&#xA;    // This will happen when the extension is about to present UI.&#xA;    // Use this method to configure the extension and restore previously stored state.&#xA;&#xA;    [Adjust trackSubsessionStart];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add call to &lt;code&gt;trackSubsessionEnd&lt;/code&gt; inside of &lt;code&gt;willResignActiveWithConversation:&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;-(void)willResignActiveWithConversation:(MSConversation *)conversation {&#xA;    // Called when the extension is about to move from the active to inactive state.&#xA;    // This will happen when the user dissmises the extension, changes to a different&#xA;    // conversation or quits Messages.&#xA;    &#xA;    // Use this method to release shared resources, save user data, invalidate timers,&#xA;    // and store enough state information to restore your extension to its current state&#xA;    // in case it is terminated later.&#xA;&#xA;    [Adjust trackSubsessionEnd];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this set, Adjust SDK will be able to successfully perform session tracking inside of your iMessage app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You should be aware that your iOS app and iMessage extension you wrote for it are running in different memory spaces and they as well have different bundle identifiers. Initialising Adjust SDK with same app token in both places will result in two independent instances tracking things unaware of each other which might cause data mixture you don&#39;t want to see in your dashboard data. General advice would be to create separate app in Adjust dashboard for your iMessage app and initialise SDK inside of it with separate app token.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;adjust-logging&#34;&gt;&lt;/a&gt;Adjust logging&lt;/h3&gt; &#xA;&lt;p&gt;You can increase or decrease the amount of logs that you see during testing by calling &lt;code&gt;setLogLevel:&lt;/code&gt; on your &lt;code&gt;ADJConfig&lt;/code&gt; instance with one of the following parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[adjustConfig setLogLevel:ADJLogLevelVerbose];  // enable all logging&#xA;[adjustConfig setLogLevel:ADJLogLevelDebug];    // enable more logging&#xA;[adjustConfig setLogLevel:ADJLogLevelInfo];     // the default&#xA;[adjustConfig setLogLevel:ADJLogLevelWarn];     // disable info logging&#xA;[adjustConfig setLogLevel:ADJLogLevelError];    // disable warnings as well&#xA;[adjustConfig setLogLevel:ADJLogLevelAssert];   // disable errors as well&#xA;[adjustConfig setLogLevel:ADJLogLevelSuppress]; // disable all logging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want your app in production to display any logs coming from the Adjust SDK, then you should select &lt;code&gt;ADJLogLevelSuppress&lt;/code&gt; and in addition to that, initialise &lt;code&gt;ADJConfig&lt;/code&gt; object with another constructor where you should enable suppress log level mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &#34;Adjust.h&#34;&#xA;// or #import &amp;lt;Adjust/Adjust.h&amp;gt;&#xA;// or #import &amp;lt;AdjustSdk/Adjust.h&amp;gt;&#xA;// or #import &amp;lt;AdjustSdkTv/Adjust.h&amp;gt;&#xA;// or #import &amp;lt;AdjustSdkIm/Adjust.h&amp;gt;&#xA;&#xA;// ...&#xA;&#xA;NSString *yourAppToken = @&#34;{YourAppToken}&#34;;&#xA;NSString *environment = ADJEnvironmentSandbox;&#xA;ADJConfig *adjustConfig = [ADJConfig configWithAppToken:yourAppToken&#xA;                                            environment:environment&#xA;                                   allowSuppressLogLevel:YES];&#xA;&#xA;[Adjust appDidLaunch:adjustConfig];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;build-the-app&#34;&gt;&lt;/a&gt;Build your app&lt;/h3&gt; &#xA;&lt;p&gt;Build and run your app. If the build succeeds, you should carefully read the SDK logs in the console. After the app launches for the first time, you should see the info log &lt;code&gt;Install tracked&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/adjust/sdks/master/Resources/ios/run5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;additional-feature&#34;&gt;Additional features&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a id=&#34;additional-feature&#34;&gt; &lt;p&gt;Once you integrate the Adjust SDK into your project, you can take advantage of the following features.&lt;/p&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a id=&#34;additional-feature&#34;&gt;&lt;/a&gt;&lt;a id=&#34;att-framework&#34;&gt;&lt;/a&gt;AppTrackingTransparency framework&lt;/h3&gt; &#xA;&lt;p&gt;For each package sent, the Adjust backend receives one of the following four (4) states of consent for access to app-related data that can be used for tracking the user or the device:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Authorized&lt;/li&gt; &#xA; &lt;li&gt;Denied&lt;/li&gt; &#xA; &lt;li&gt;Not Determined&lt;/li&gt; &#xA; &lt;li&gt;Restricted&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After a device receives an authorization request to approve access to app-related data, which is used for user device tracking, the returned status will either be Authorized or Denied.&lt;/p&gt; &#xA;&lt;p&gt;Before a device receives an authorization request for access to app-related data, which is used for tracking the user or device, the returned status will be Not Determined.&lt;/p&gt; &#xA;&lt;p&gt;If authorization to use app tracking data is restricted, the returned status will be Restricted.&lt;/p&gt; &#xA;&lt;p&gt;The SDK has a built-in mechanism to receive an updated status after a user responds to the pop-up dialog, in case you don&#39;t want to customize your displayed dialog pop-up. To conveniently and efficiently communicate the new state of consent to the backend, Adjust SDK offers a wrapper around the app tracking authorization method described in the following chapter, App-tracking authorization wrapper.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;ata-wrapper&#34;&gt;&lt;/a&gt;App-tracking authorisation wrapper&lt;/h3&gt; &#xA;&lt;p&gt;Adjust SDK offers the possibility to use it for requesting user authorization in accessing their app-related data. Adjust SDK has a wrapper built on top of the &lt;a href=&#34;https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/3547037-requesttrackingauthorizationwith?language=objc&#34;&gt;requestTrackingAuthorizationWithCompletionHandler:&lt;/a&gt; method, where you can as well define the callback method to get information about a user&#39;s choice. Also, with the use of this wrapper, as soon as a user responds to the pop-up dialog, it&#39;s then communicated back using your callback method. The SDK will also inform the backend of the user&#39;s choice. The &lt;code&gt;NSUInteger&lt;/code&gt; value will be delivered via your callback method with the following meaning:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0: &lt;code&gt;ATTrackingManagerAuthorizationStatusNotDetermined&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;1: &lt;code&gt;ATTrackingManagerAuthorizationStatusRestricted&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;2: &lt;code&gt;ATTrackingManagerAuthorizationStatusDenied&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;3: &lt;code&gt;ATTrackingManagerAuthorizationStatusAuthorized&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use this wrapper, you can call it as such:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[Adjust requestTrackingAuthorizationWithCompletionHandler:^(NSUInteger status) {&#xA;    switch (status) {&#xA;        case 0:&#xA;            // ATTrackingManagerAuthorizationStatusNotDetermined case&#xA;            break;&#xA;        case 1:&#xA;            // ATTrackingManagerAuthorizationStatusRestricted case&#xA;            break;&#xA;        case 2:&#xA;            // ATTrackingManagerAuthorizationStatusDenied case&#xA;            break;&#xA;        case 3:&#xA;            // ATTrackingManagerAuthorizationStatusAuthorized case&#xA;            break;&#xA;    }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;ata-getter&#34;&gt;&lt;/a&gt;Get current authorisation status&lt;/h3&gt; &#xA;&lt;p&gt;To get the current app tracking authorization status you can call &lt;code&gt;[Adjust appTrackingAuthorizationStatus]&lt;/code&gt; that will return one of the following possibilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;0&lt;/code&gt;: The user hasn&#39;t been asked yet&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1&lt;/code&gt;: The user device is restricted&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt;: The user denied access to IDFA&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3&lt;/code&gt;: The user authorized access to IDFA&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-1&lt;/code&gt;: The status is not available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;att-status-change&#34;&gt;&lt;/a&gt;Check for ATT status change&lt;/h3&gt; &#xA;&lt;p&gt;In cases where you are not using &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#ata-wrapper&#34;&gt;Adjust app-tracking authorization wrapper&lt;/a&gt;, Adjust SDK will not be able to know immediately upon answering the dialog what is the new value of app-tracking status. In situations like this, if you would want Adjust SDK to read the new app-tracking status value and communicate it to our backend, make sure to make a call to this method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[Adjust checkForNewAttStatus];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;skadn-framework&#34;&gt;&lt;/a&gt;SKAdNetwork framework&lt;/h3&gt; &#xA;&lt;p&gt;If you have implemented the Adjust iOS SDK v4.23.0 or above and your app is running on iOS 14, the communication with SKAdNetwork will be set on by default, although you can choose to turn it off. When set on, Adjust automatically registers for SKAdNetwork attribution when the SDK is initialized. If events are set up in the Adjust dashboard to receive conversion values, the Adjust backend sends the conversion value data to the SDK. The SDK then sets the conversion value. After Adjust receives the SKAdNetwork callback data, it is then displayed in the dashboard.&lt;/p&gt; &#xA;&lt;p&gt;In case you don&#39;t want the Adjust SDK to automatically communicate with SKAdNetwork, you can disable that by calling the following method on configuration object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[adjustConfig deactivateSKAdNetworkHandling];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;skadn-update-conversion-value&#34;&gt;&lt;/a&gt;Update SKAdNetwork conversion value&lt;/h3&gt; &#xA;&lt;p&gt;As of iOS SDK v4.26.0 you can use Adjust SDK wrapper method &lt;code&gt;updateConversionValue:&lt;/code&gt; to update SKAdNetwork conversion value for your user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[Adjust updateConversionValue:6];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;skadn-cv-updated-callback&#34;&gt;&lt;/a&gt;Conversion value updated callback&lt;/h3&gt; &#xA;&lt;p&gt;You can register callback to get notified each time when Adjust SDK updates conversion value for the user. You need to implement &lt;code&gt;AdjustDelegate&lt;/code&gt; protocol, implement optional &lt;code&gt;adjustConversionValueUpdated:&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)adjustConversionValueUpdated:(NSNumber *)conversionValue {&#xA;    NSLog(@&#34;Conversion value updated callback called!&#34;);&#xA;    NSLog(@&#34;Conversion value: %@&#34;, conversionValue);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;event-tracking&#34;&gt;&lt;/a&gt;Event tracking&lt;/h3&gt; &#xA;&lt;p&gt;You can use adjust to track events. Lets say you want to track every tap on a particular button. You would create a new event token in your &lt;a href=&#34;http://adjust.com&#34;&gt;dashboard&lt;/a&gt;, which has an associated event token - looking something like &lt;code&gt;abc123&lt;/code&gt;. In your button&#39;s &lt;code&gt;buttonDown&lt;/code&gt; method you would then add the following lines to track the tap:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ADJEvent *event = [ADJEvent eventWithEventToken:@&#34;abc123&#34;];&#xA;[Adjust trackEvent:event];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When tapping the button you should now see &lt;code&gt;Event tracked&lt;/code&gt; in the logs.&lt;/p&gt; &#xA;&lt;p&gt;The event instance can be used to configure the event further before tracking it:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;revenue-tracking&#34;&gt;&lt;/a&gt;Revenue tracking&lt;/h3&gt; &#xA;&lt;p&gt;If your users can generate revenue by tapping on advertisements or making in-app purchases you can track those revenues with events. Lets say a tap is worth one Euro cent. You could then track the revenue event like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ADJEvent *event = [ADJEvent eventWithEventToken:@&#34;abc123&#34;];&#xA;&#xA;[event setRevenue:0.01 currency:@&#34;EUR&#34;];&#xA;&#xA;[Adjust trackEvent:event];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be combined with callback parameters of course.&lt;/p&gt; &#xA;&lt;p&gt;When you set a currency token, adjust will automatically convert the incoming revenues into a reporting revenue of your choice. Read more about &lt;a href=&#34;https://docs.adjust.com/en/event-tracking/#tracking-purchases-in-different-currencies&#34;&gt;currency conversion here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can read more about revenue and event tracking in the &lt;a href=&#34;https://docs.adjust.com/en/event-tracking/#tracking-purchases-and-revenues&#34;&gt;event tracking guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;revenue-deduplication&#34;&gt;&lt;/a&gt;Revenue deduplication&lt;/h3&gt; &#xA;&lt;p&gt;You can also pass in an optional transaction ID to avoid tracking duplicate revenues. The last ten transaction IDs are remembered and revenue events with duplicate transaction IDs are skipped. This is especially useful for in-app purchase tracking. See an example below.&lt;/p&gt; &#xA;&lt;p&gt;If you want to track in-app purchases, please make sure to call &lt;code&gt;trackEvent&lt;/code&gt; after &lt;code&gt;finishTransaction&lt;/code&gt; in &lt;code&gt;paymentQueue:updatedTransactions&lt;/code&gt; only if the state changed to &lt;code&gt;SKPaymentTransactionStatePurchased&lt;/code&gt;. That way you can avoid tracking revenue that is not actually being generated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transactions {&#xA;    for (SKPaymentTransaction *transaction in transactions) {&#xA;        switch (transaction.transactionState) {&#xA;            case SKPaymentTransactionStatePurchased:&#xA;                [self finishTransaction:transaction];&#xA;&#xA;                ADJEvent *event = [ADJEvent eventWithEventToken:...];&#xA;                [event setRevenue:... currency:...];&#xA;                [event setTransactionId:transaction.transactionIdentifier]; // avoid duplicates&#xA;                [Adjust trackEvent:event];&#xA;&#xA;                break;&#xA;            // more cases&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;callback-parameters&#34;&gt;&lt;/a&gt;Callback parameters&lt;/h3&gt; &#xA;&lt;p&gt;You can register a callback URL for your events in your &lt;a href=&#34;http://adjust.com&#34;&gt;dashboard&lt;/a&gt;. We will send a GET request to that URL whenever the event is tracked. You can add callback parameters to that event by calling &lt;code&gt;addCallbackParameter&lt;/code&gt; to the event before tracking it. We will then append these parameters to your callback URL.&lt;/p&gt; &#xA;&lt;p&gt;For example, suppose you have registered the URL &lt;code&gt;http://www.mydomain.com/callback&lt;/code&gt; then track an event like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ADJEvent *event = [ADJEvent eventWithEventToken:@&#34;abc123&#34;];&#xA;&#xA;[event addCallbackParameter:@&#34;key&#34; value:@&#34;value&#34;];&#xA;[event addCallbackParameter:@&#34;foo&#34; value:@&#34;bar&#34;];&#xA;&#xA;[Adjust trackEvent:event];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In that case we would track the event and send a request to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://www.mydomain.com/callback?key=value&amp;amp;foo=bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should be mentioned that we support a variety of placeholders like &lt;code&gt;{idfa}&lt;/code&gt; that can be used as parameter values. In the resulting callback this placeholder would be replaced with the ID for Advertisers of the current device. Also note that we don&#39;t store any of your custom parameters, but only append them to your callbacks, thus without a callback they will not be saved nor sent to you.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about using URL callbacks, including a full list of available values, in our &lt;a href=&#34;https://docs.adjust.com/en/callbacks&#34;&gt;callbacks guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;partner-parameters&#34;&gt;&lt;/a&gt;Partner parameters&lt;/h3&gt; &#xA;&lt;p&gt;You can also add parameters to be transmitted to network partners, which have been activated in your Adjust dashboard.&lt;/p&gt; &#xA;&lt;p&gt;This works similarly to the callback parameters mentioned above, but can be added by calling the &lt;code&gt;addPartnerParameter&lt;/code&gt; method on your &lt;code&gt;ADJEvent&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ADJEvent *event = [ADJEvent eventWithEventToken:@&#34;abc123&#34;];&#xA;&#xA;[event addPartnerParameter:@&#34;key&#34; value:@&#34;value&#34;];&#xA;[event addPartnerParameter:@&#34;foo&#34; value:@&#34;bar&#34;];&#xA;&#xA;[Adjust trackEvent:event];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read more about special partners and these integrations in our &lt;a href=&#34;https://docs.adjust.com/en/special-partners&#34;&gt;guide to special partners&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;callback-id&#34;&gt;&lt;/a&gt;Callback identifier&lt;/h3&gt; &#xA;&lt;p&gt;You can also add custom string identifier to each event you want to track. This identifier will later be reported in event success and/or event failure callbacks to enable you to keep track on which event was successfully tracked or not. You can set this identifier by calling the &lt;code&gt;setCallbackId&lt;/code&gt; method on your &lt;code&gt;ADJEvent&lt;/code&gt; instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ADJEvent *event = [ADJEvent eventWithEventToken:@&#34;abc123&#34;];&#xA;&#xA;[event setCallbackId:@&#34;Your-Custom-Id&#34;];&#xA;&#xA;[Adjust trackEvent:event];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;session-parameters&#34;&gt;&lt;/a&gt;Session parameters&lt;/h3&gt; &#xA;&lt;p&gt;Some parameters are saved to be sent in every event and session of the Adjust SDK. Once you have added any of these parameters, you don&#39;t need to add them every time, since they will be saved locally. If you add the same parameter twice, there will be no effect.&lt;/p&gt; &#xA;&lt;p&gt;If you want to send session parameters with the initial install event, they must be called before the Adjust SDK launches via &lt;code&gt;[Adjust appDidLaunch:]&lt;/code&gt;. If you need to send them with an install, but can only obtain the needed values after launch, it&#39;s possible to &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#delay-start&#34;&gt;delay&lt;/a&gt; the first launch of the Adjust SDK to allow this behavior.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;session-callback-parameters&#34;&gt;&lt;/a&gt;Session callback parameters&lt;/h3&gt; &#xA;&lt;p&gt;The same callback parameters that are registered for &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#callback-parameters&#34;&gt;events&lt;/a&gt; can be also saved to be sent in every event or session of the Adjust SDK.&lt;/p&gt; &#xA;&lt;p&gt;The session callback parameters have a similar interface of the event callback parameters. Instead of adding the key and it&#39;s value to an event, it&#39;s added through a call to &lt;code&gt;Adjust&lt;/code&gt; method &lt;code&gt;addSessionCallbackParameter:value:&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[Adjust addSessionCallbackParameter:@&#34;foo&#34; value:@&#34;bar&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The session callback parameters will be merged with the callback parameters added to an event. The callback parameters added to an event have precedence over the session callback parameters. Meaning that, when adding a callback parameter to an event with the same key to one added from the session, the value that prevails is the callback parameter added to the event.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s possible to remove a specific session callback parameter by passing the desiring key to the method &lt;code&gt;removeSessionCallbackParameter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[Adjust removeSessionCallbackParameter:@&#34;foo&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to remove all key and values from the session callback parameters, you can reset it with the method &lt;code&gt;resetSessionCallbackParameters&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[Adjust resetSessionCallbackParameters];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;session-partner-parameters&#34;&gt;&lt;/a&gt;Session partner parameters&lt;/h3&gt; &#xA;&lt;p&gt;In the same way that there is &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#session-callback-parameters&#34;&gt;session callback parameters&lt;/a&gt; that are sent every in event or session of the Adjust SDK, there is also session partner parameters.&lt;/p&gt; &#xA;&lt;p&gt;These will be transmitted to network partners, for the integrations that have been activated in your adjust &lt;a href=&#34;http://adjust.com&#34;&gt;dashboard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The session partner parameters have a similar interface to the event partner parameters. Instead of adding the key and it&#39;s value to an event, it&#39;s added through a call to &lt;code&gt;Adjust&lt;/code&gt; method &lt;code&gt;addSessionPartnerParameter:value:&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[Adjust addSessionPartnerParameter:@&#34;foo&#34; value:@&#34;bar&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The session partner parameters will be merged with the partner parameters added to an event. The partner parameters added to an event have precedence over the session partner parameters. Meaning that, when adding a partner parameter to an event with the same key to one added from the session, the value that prevails is the partner parameter added to the event.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s possible to remove a specific session partner parameter by passing the desiring key to the method &lt;code&gt;removeSessionPartnerParameter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[Adjust removeSessionPartnerParameter:@&#34;foo&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to remove all key and values from the session partner parameters, you can reset it with the method &lt;code&gt;resetSessionPartnerParameters&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[Adjust resetSessionPartnerParameters];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;delay-start&#34;&gt;&lt;/a&gt;Delay start&lt;/h3&gt; &#xA;&lt;p&gt;Delaying the start of the Adjust SDK allows your app some time to obtain session parameters, such as unique identifiers, to be send on install.&lt;/p&gt; &#xA;&lt;p&gt;Set the initial delay time in seconds with the method &lt;code&gt;setDelayStart&lt;/code&gt; in the &lt;code&gt;ADJConfig&lt;/code&gt; instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[adjustConfig setDelayStart:5.5];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case this will make the Adjust SDK not send the initial install session and any event created for 5.5 seconds. After this time is expired or if you call &lt;code&gt;[Adjust sendFirstPackages]&lt;/code&gt; in the meanwhile, every session parameter will be added to the delayed install session and events and the Adjust SDK will resume as usual.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The maximum delay start time of the Adjust SDK is 10 seconds&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;attribution-callback&#34;&gt;&lt;/a&gt;Attribution callback&lt;/h3&gt; &#xA;&lt;p&gt;You can register a delegate callback to be notified of tracker attribution changes. Due to the different sources considered for attribution, this information can not be provided synchronously. Follow these steps to implement the optional delegate protocol in your app delegate:&lt;/p&gt; &#xA;&lt;p&gt;Please make sure to consider our &lt;a href=&#34;https://github.com/adjust/sdks/raw/master/doc/attribution-data.md&#34;&gt;applicable attribution data policies.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open &lt;code&gt;AppDelegate.h&lt;/code&gt; and add the import and the &lt;code&gt;AdjustDelegate&lt;/code&gt; declaration.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface AppDelegate : UIResponder &amp;lt;UIApplicationDelegate, AdjustDelegate&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open &lt;code&gt;AppDelegate.m&lt;/code&gt; and add the following delegate callback function to your app delegate implementation.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)adjustAttributionChanged:(ADJAttribution *)attribution {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the delegate with your &lt;code&gt;ADJConfig&lt;/code&gt; instance:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[adjustConfig setDelegate:self];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As the delegate callback is configured using the &lt;code&gt;ADJConfig&lt;/code&gt; instance, you should call &lt;code&gt;setDelegate&lt;/code&gt; before calling &lt;code&gt;[Adjust appDidLaunch:adjustConfig]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The delegate function will be called after the SDK receives the final attribution data. Within the delegate function you have access to the &lt;code&gt;attribution&lt;/code&gt; parameter. Here is a quick summary of its properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString trackerToken&lt;/code&gt; the tracker token of the current attribution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString trackerName&lt;/code&gt; the tracker name of the current attribution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString network&lt;/code&gt; the network grouping level of the current attribution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString campaign&lt;/code&gt; the campaign grouping level of the current attribution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString adgroup&lt;/code&gt; the ad group grouping level of the current attribution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString creative&lt;/code&gt; the creative grouping level of the current attribution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString clickLabel&lt;/code&gt; the click label of the current attribution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString adid&lt;/code&gt; the unique device identifier provided by attribution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString costType&lt;/code&gt; the cost type string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSNumber costAmount&lt;/code&gt; the cost amount.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString costCurrency&lt;/code&gt; the cost currency string.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If any value is unavailable, it will default to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: The cost data - &lt;code&gt;costType&lt;/code&gt;, &lt;code&gt;costAmount&lt;/code&gt; &amp;amp; &lt;code&gt;costCurrency&lt;/code&gt; are only available when configured in &lt;code&gt;ADJConfig&lt;/code&gt; by calling &lt;code&gt;setNeedsCost:&lt;/code&gt; method. If not configured or configured, but not being part of the attribution, these fields will have value &lt;code&gt;nil&lt;/code&gt;. This feature is available in SDK v4.24.0 and above.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;ad-revenue&#34;&gt;&lt;/a&gt;Ad revenue tracking&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This ad revenue tracking API is available only in the native SDK v4.29.0 and above.&lt;/p&gt; &#xA;&lt;p&gt;You can track ad revenue information with Adjust SDK by invoking the following method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// initilise ADJAdRevenue instance with appropriate ad revenue source&#xA;ADJAdRevenue *adRevenue = [[ADJAdRevenue alloc] initWithSource:source];&#xA;// pass revenue and currency values&#xA;[adRevenue setRevenue:1.6 currency:@&#34;USD&#34;];&#xA;// pass optional parameters&#xA;[adRevenue setAdImpressionsCount:adImpressionsCount];&#xA;[adRevenue setAdRevenueUnit:adRevenueUnit];&#xA;[adRevenue setAdRevenuePlacement:adRevenuePlacement];&#xA;[adRevenue setAdRevenueNetwork:adRevenueNetwork];&#xA;// attach callback and/or partner parameter if needed&#xA;[adRevenue addCallbackParameter:key value:value];&#xA;[adRevenue addPartnerParameter:key value:value];&#xA;&#xA;// track ad revenue&#xA;[Adjust trackAdRevenue:source payload:payload];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently we support the below &lt;code&gt;source&lt;/code&gt; parameter values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ADJAdRevenueSourceAppLovinMAX&lt;/code&gt; - representing AppLovin MAX platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ADJAdRevenueSourceMopub&lt;/code&gt; - representing MoPub platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ADJAdRevenueSourceAdMob&lt;/code&gt; - representing AdMob platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ADJAdRevenueSourceIronSource&lt;/code&gt; - representing IronSource platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ADJAdRevenueSourceAdMost&lt;/code&gt;- representing AdMost platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ADJAdRevenueSourceUnity&lt;/code&gt; - representing Unity platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ADJAdRevenueSourceHeliumChartboost&lt;/code&gt; - representing Helium Chartboost platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ADJAdRevenueSourcePublisher&lt;/code&gt; - representing Generic platform.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Additional documentation which explains detailed integration with every of the supported sources will be provided outside of this README. Also, in order to use this feature, additional setup is needed for your app in Adjust dashboard, so make sure to get in touch with our support team to make sure that everything is set up correctly before you start to use this feature.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;subscriptions&#34;&gt;&lt;/a&gt;Subscription tracking&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This feature is only available in the native SDK v4.22.0 and above. We recommend using at least version 4.22.1.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: The following steps only set up subscription tracking within the SDK. To complete setup, certain app-specific information must be added within Adjust’s internal interface. An Adjust representative must take this action: please contact &lt;a href=&#34;mailto:support@adjust.com&#34;&gt;support@adjust.com&lt;/a&gt; or your Technical Account Manager.&lt;/p&gt; &#xA;&lt;p&gt;You can track App Store subscriptions and verify their validity with the Adjust SDK. After a subscription has been successfully purchased, make the following call to the Adjust SDK:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ADJSubscription *subscription = [[ADJSubscription alloc] initWithPrice:price&#xA;                                                              currency:currency&#xA;                                                         transactionId:transactionId&#xA;                                                            andReceipt:receipt];&#xA;[subscription setTransactionDate:transactionDate];&#xA;[subscription setSalesRegion:salesRegion];&#xA;&#xA;[Adjust trackSubscription:subscription];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Only do this when the state has changed to &lt;code&gt;SKPaymentTransactionStatePurchased&lt;/code&gt; or &lt;code&gt;SKPaymentTransactionStateRestored&lt;/code&gt;. Then make a call to &lt;code&gt;finishTransaction&lt;/code&gt; in &lt;code&gt;paymentQueue:updatedTransactions&lt;/code&gt; .&lt;/p&gt; &#xA;&lt;p&gt;Subscription tracking parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/storekit/skproduct/1506094-price?language=objc&#34;&gt;price&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;currency (you need to pass &lt;a href=&#34;https://developer.apple.com/documentation/foundation/nslocale/1642836-currencycode?language=objc&#34;&gt;currencyCode&lt;/a&gt; of the &lt;a href=&#34;https://developer.apple.com/documentation/storekit/skproduct/1506145-pricelocale?language=objc&#34;&gt;priceLocale&lt;/a&gt; object)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/storekit/skpaymenttransaction/1411288-transactionidentifier?language=objc&#34;&gt;transactionId&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/nsbundle/1407276-appstorereceipturl&#34;&gt;receipt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/storekit/skpaymenttransaction/1411273-transactiondate?language=objc&#34;&gt;transactionDate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;salesRegion (you need to pass &lt;a href=&#34;https://developer.apple.com/documentation/foundation/nslocale/1643060-countrycode?language=objc&#34;&gt;countryCode&lt;/a&gt; of the &lt;a href=&#34;https://developer.apple.com/documentation/storekit/skproduct/1506145-pricelocale?language=objc&#34;&gt;priceLocale&lt;/a&gt; object)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Just like with event tracking, you can attach callback and partner parameters to the subscription object as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ADJSubscription *subscription = [[ADJSubscription alloc] initWithPrice:price&#xA;                                                              currency:currency&#xA;                                                         transactionId:transactionId&#xA;                                                            andReceipt:receipt];&#xA;[subscription setTransactionDate:transactionDate];&#xA;[subscription setSalesRegion:salesRegion];&#xA;&#xA;// add callback parameters&#xA;[subscription addCallbackParameter:@&#34;key&#34; value:@&#34;value&#34;];&#xA;[subscription addCallbackParameter:@&#34;foo&#34; value:@&#34;bar&#34;];&#xA;&#xA;// add partner parameters&#xA;[subscription addPartnerParameter:@&#34;key&#34; value:@&#34;value&#34;];&#xA;[subscription addPartnerParameter:@&#34;foo&#34; value:@&#34;bar&#34;];&#xA;&#xA;[Adjust trackSubscription:subscription];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;event-session-callbacks&#34;&gt;&lt;/a&gt;Event and session callbacks&lt;/h3&gt; &#xA;&lt;p&gt;You can register a delegate callback to be notified of successful and failed tracked events and/or sessions. The same optional protocol &lt;code&gt;AdjustDelegate&lt;/code&gt; used for the &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#attribution-callback&#34;&gt;attribution callback&lt;/a&gt; is used.&lt;/p&gt; &#xA;&lt;p&gt;Follow the same steps and implement the following delegate callback function for successful tracked events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)adjustEventTrackingSucceeded:(ADJEventSuccess *)eventSuccessResponseData {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following delegate callback function for failed tracked events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)adjustEventTrackingFailed:(ADJEventFailure *)eventFailureResponseData {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For successful tracked sessions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)adjustSessionTrackingSucceeded:(ADJSessionSuccess *)sessionSuccessResponseData {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And for failed tracked sessions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)adjustSessionTrackingFailed:(ADJSessionFailure *)sessionFailureResponseData {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The delegate functions will be called after the SDK tries to send a package to the server. Within the delegate callback you have access to a response data object specifically for the delegate callback. Here is a quick summary of the session response data properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString message&lt;/code&gt; the message from the server or the error logged by the SDK.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString timeStamp&lt;/code&gt; timestamp from the server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString adid&lt;/code&gt; a unique device identifier provided by adjust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSDictionary jsonResponse&lt;/code&gt; the JSON object with the response from the server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both event response data objects contain:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString eventToken&lt;/code&gt; the event token, if the package tracked was an event.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSString callbackId&lt;/code&gt; the custom defined callback ID set on event object.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If any value is unavailable, it will default to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And both event and session failed objects also contain:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BOOL willRetry&lt;/code&gt; indicates that there will be an attempt to resend the package at a later time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;disable-tracking&#34;&gt;&lt;/a&gt;Disable tracking&lt;/h3&gt; &#xA;&lt;p&gt;You can disable the Adjust SDK from tracking any activities of the current device by calling &lt;code&gt;setEnabled&lt;/code&gt; with parameter &lt;code&gt;NO&lt;/code&gt;. &lt;strong&gt;This setting is remembered between sessions&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[Adjust setEnabled:NO];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;is-enabled&#34;&gt;You can check if the Adjust SDK is currently enabled by calling the function &lt;code&gt;isEnabled&lt;/code&gt;. It is always possible to activate the Adjust SDK by invoking &lt;code&gt;setEnabled&lt;/code&gt; with the enabled parameter as &lt;code&gt;YES&lt;/code&gt;.&lt;/a&gt;&lt;/p&gt;&#xA;&lt;a id=&#34;is-enabled&#34;&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a id=&#34;is-enabled&#34;&gt;&lt;/a&gt;&lt;a id=&#34;offline-mode&#34;&gt;&lt;/a&gt;Offline mode&lt;/h3&gt; &#xA;&lt;p&gt;You can put the Adjust SDK in offline mode to suspend transmission to our servers while retaining tracked data to be sent later. While in offline mode, all information is saved in a file, so be careful not to trigger too many events while in offline mode.&lt;/p&gt; &#xA;&lt;p&gt;You can activate offline mode by calling &lt;code&gt;setOfflineMode&lt;/code&gt; with the parameter &lt;code&gt;YES&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[Adjust setOfflineMode:YES];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Conversely, you can deactivate offline mode by calling &lt;code&gt;setOfflineMode&lt;/code&gt; with &lt;code&gt;NO&lt;/code&gt;. When the Adjust SDK is put back in online mode, all saved information is sent to our servers with the correct time information.&lt;/p&gt; &#xA;&lt;p&gt;Unlike disabling tracking, this setting is &lt;strong&gt;not remembered&lt;/strong&gt; bettween sessions. This means that the SDK is in online mode whenever it is started, even if the app was terminated in offline mode.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;event-buffering&#34;&gt;&lt;/a&gt;Event buffering&lt;/h3&gt; &#xA;&lt;p&gt;If your app makes heavy use of event tracking, you might want to delay some HTTP requests in order to send them in one batch every minute. You can enable event buffering with your &lt;code&gt;ADJConfig&lt;/code&gt; instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[adjustConfig setEventBufferingEnabled:YES];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If nothing is set, event buffering is &lt;strong&gt;disabled by default&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;gdpr-forget-me&#34;&gt;&lt;/a&gt;GDPR right to be forgotten&lt;/h3&gt; &#xA;&lt;p&gt;In accordance with article 17 of the EU&#39;s General Data Protection Regulation (GDPR), you can notify Adjust when a user has exercised their right to be forgotten. Calling the following method will instruct the Adjust SDK to communicate the user&#39;s choice to be forgotten to the Adjust backend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[Adjust gdprForgetMe];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon receiving this information, Adjust will erase the user&#39;s data and the Adjust SDK will stop tracking the user. No requests from this device will be sent to Adjust in the future.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;third-party-sharing&#34;&gt;&lt;/a&gt;Third-party sharing for specific users&lt;/h2&gt; &#xA;&lt;p&gt;You can notify Adjust when a user disables, enables, and re-enables data sharing with third-party partners.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;disable-third-party-sharing&#34;&gt;&lt;/a&gt;Disable third-party sharing for specific users&lt;/h3&gt; &#xA;&lt;p&gt;Call the following method to instruct the Adjust SDK to communicate the user&#39;s choice to disable data sharing to the Adjust backend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ADJThirdPartySharing *adjustThirdPartySharing = [[ADJThirdPartySharing alloc] initWithIsEnabledNumberBool:@NO];&#xA;[Adjust trackThirdPartySharing:adjustThirdPartySharing];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon receiving this information, Adjust will block the sharing of that specific user&#39;s data to partners and the Adjust SDK will continue to work as usual.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;enable-third-party-sharing&#34;&gt;Enable or re-enable third-party sharing for specific users&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Call the following method to instruct the Adjust SDK to communicate the user&#39;s choice to share data or change data sharing, to the Adjust backend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ADJThirdPartySharing *adjustThirdPartySharing = [[ADJThirdPartySharing alloc] initWithIsEnabledNumberBool:@YES];&#xA;[Adjust trackThirdPartySharing:adjustThirdPartySharing];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon receiving this information, Adjust changes sharing the specific user&#39;s data to partners. The Adjust SDK will continue to work as expected.&lt;/p&gt; &#xA;&lt;p&gt;Call the following method to instruct the Adjust SDK to send the granular options to the Adjust backend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ADJThirdPartySharing *adjustThirdPartySharing = [[ADJThirdPartySharing alloc] initWithIsEnabledNumberBool:nil];&#xA;[adjustThirdPartySharing addGranularOption:@&#34;PartnerA&#34; key:@&#34;foo&#34; value:@&#34;bar&#34;];&#xA;[Adjust trackThirdPartySharing:adjustThirdPartySharing];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;measurement-consent&#34;&gt;&lt;/a&gt;Consent measurement for specific users&lt;/h3&gt; &#xA;&lt;p&gt;To enable or disable the Data Privacy settings in the Adjust Dashboard, including the consent expiry period and the user data retention period, you need to implement the below method.&lt;/p&gt; &#xA;&lt;p&gt;Call the following method to instruct the Adjust SDK to communicate the Data Privacy settings, to the Adjust backend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[Adjust trackMeasurementConsent:YES];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon receiving this information, Adjust changes sharing the specific user&#39;s data to partners. The Adjust SDK will continue to work as expected.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;sdk-signature&#34;&gt;&lt;/a&gt; SDK signature&lt;/h3&gt; &#xA;&lt;p&gt;The Adjust SDK signature is enabled on a client-by-client basis. If you are interested in using this feature, please contact your account manager.&lt;/p&gt; &#xA;&lt;p&gt;If the SDK signature has already been enabled on your account and you have access to App Secrets in your Adjust Dashboard, please use the method below to integrate the SDK signature into your app.&lt;/p&gt; &#xA;&lt;p&gt;An App Secret is set by calling &lt;code&gt;setAppSecret&lt;/code&gt; on your &lt;code&gt;AdjustConfig&lt;/code&gt; instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[adjustConfig setAppSecret:secretId info1:info1 info2:info2 info3:info3 info4:info4];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;background-tracking&#34;&gt;&lt;/a&gt;Background tracking&lt;/h3&gt; &#xA;&lt;p&gt;The default behaviour of the Adjust SDK is to pause sending HTTP requests while the app is in the background. You can change this in your &lt;code&gt;AdjustConfig&lt;/code&gt; instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[adjustConfig setSendInBackground:YES];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If nothing is set, sending in background is &lt;strong&gt;disabled by default&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;device-ids&#34;&gt;&lt;/a&gt;Device IDs&lt;/h3&gt; &#xA;&lt;p&gt;The Adjust SDK offers you possibility to obtain some of the device identifiers.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;di-idfa&#34;&gt;&lt;/a&gt;iOS Advertising Identifier&lt;/h3&gt; &#xA;&lt;p&gt;Certain services (such as Google Analytics) require you to coordinate device and client IDs in order to prevent duplicate reporting.&lt;/p&gt; &#xA;&lt;p&gt;To obtain the device identifier IDFA, call the function &lt;code&gt;idfa&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString *idfa = [Adjust idfa];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;di-adid&#34;&gt;&lt;/a&gt;Adjust device identifier&lt;/h3&gt; &#xA;&lt;p&gt;For each device with your app installed, adjust backend generates unique &lt;strong&gt;adjust device identifier&lt;/strong&gt; (&lt;strong&gt;adid&lt;/strong&gt;). In order to obtain this identifier, you can make a call to the following method on the &lt;code&gt;Adjust&lt;/code&gt; instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString *adid = [Adjust adid];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Information about the &lt;strong&gt;adid&lt;/strong&gt; is available after the app&#39;s installation has been tracked by the adjust backend. From that moment on, the Adjust SDK has information about the device &lt;strong&gt;adid&lt;/strong&gt; and you can access it with this method. So, &lt;strong&gt;it is not possible&lt;/strong&gt; to access the &lt;strong&gt;adid&lt;/strong&gt; before the SDK has been initialised and the installation of your app has been tracked successfully.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;user-attribution&#34;&gt;&lt;/a&gt;User attribution&lt;/h3&gt; &#xA;&lt;p&gt;The attribution callback will be triggered as described in the &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#attribution-callback&#34;&gt;attribution callback section&lt;/a&gt;, providing you with the information about any new attribution when ever it changes. In any other case, where you want to access information about your user&#39;s current attribution, you can make a call to the following method of the &lt;code&gt;Adjust&lt;/code&gt; instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ADJAttribution *attribution = [Adjust attribution];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Information about current attribution is available after app installation has been tracked by the adjust backend and attribution callback has been initially triggered. From that moment on, Adjust SDK has information about your user&#39;s attribution and you can access it with this method. So, &lt;strong&gt;it is not possible&lt;/strong&gt; to access user&#39;s attribution value before the SDK has been initialised and attribution callback has been initially triggered.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;push-token&#34;&gt;&lt;/a&gt;Push token&lt;/h3&gt; &#xA;&lt;p&gt;Push tokens are used for Audience Builder and client callbacks, and they are required for uninstall and reinstall tracking.&lt;/p&gt; &#xA;&lt;p&gt;To send us the push notification token, add the following call to &lt;code&gt;Adjust&lt;/code&gt; in the &lt;code&gt;didRegisterForRemoteNotificationsWithDeviceToken&lt;/code&gt; of your app delegate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)application:(UIApplication *)app didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {&#xA;    [Adjust setDeviceToken:deviceToken];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;pre-installed-trackers&#34;&gt;&lt;/a&gt;Pre-installed trackers&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use the Adjust SDK to recognize users that found your app pre-installed on their device, follow these steps.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new tracker in your &lt;a href=&#34;http://adjust.com&#34;&gt;dashboard&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open your app delegate and add set the default tracker of your &lt;code&gt;ADJConfig&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ADJConfig *adjustConfig = [ADJConfig configWithAppToken:yourAppToken environment:environment];&#xA;[adjustConfig setDefaultTracker:@&#34;{TrackerToken}&#34;];&#xA;[Adjust appDidLaunch:adjustConfig];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;{TrackerToken}&lt;/code&gt; with the tracker token you created in step 2. Please note that the dashboard displays a tracker URL (including &lt;code&gt;http://app.adjust.com/&lt;/code&gt;). In your source code, you should specify only the six-character token and not the entire URL.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Build and run your app. You should see a line like the following in XCode:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Default tracker: &#39;abc123&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;deeplinking&#34;&gt;&lt;/a&gt;Deep linking&lt;/h3&gt; &#xA;&lt;p&gt;If you are using the adjust tracker URL with an option to deep link into your app from the URL, there is the possibility to get info about the deep link URL and its content. Hitting the URL can happen when the user has your app already installed (standard deep linking scenario) or if they don&#39;t have the app on their device (deferred deep linking scenario). Both of these scenarios are supported by the Adjust SDK and in both cases the deep link URL will be provided to you after you app has been started after hitting the tracker URL. In order to use this feature in your app, you need to set it up properly.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;deeplinking-standard&#34;&gt;&lt;/a&gt;Standard deep linking scenario&lt;/h3&gt; &#xA;&lt;p&gt;If your user already has the app installed and hits the tracker URL with deep link information in it, your application will be opened and the content of the deep link will be sent to your app so that you can parse it and decide what to do next. With introduction of iOS 9, Apple has changed the way how deep linking should be handled in the app. Depending on which scenario you want to use for your app (or if you want to use them both to support wide range of devices), you need to set up your app to handle one or both of the following scenarios.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;deeplinking-setup-old&#34;&gt;&lt;/a&gt;Deep linking on iOS 8 and earlier&lt;/h3&gt; &#xA;&lt;p&gt;Deep linking on iOS 8 and earlier devices is being done with usage of a custom URL scheme setting. You need to pick a custom URL scheme name which your app will be in charge for opening. This scheme name will also be used in the adjust tracker URL as part of the &lt;code&gt;deep_link&lt;/code&gt; parameter. In order to set this in your app, open your &lt;code&gt;Info.plist&lt;/code&gt; file and add new &lt;code&gt;URL types&lt;/code&gt; row to it. In there, as &lt;code&gt;URL identifier&lt;/code&gt; write you app&#39;s bundle ID and under &lt;code&gt;URL schemes&lt;/code&gt; add scheme name(s) which you want your app to handle. In the example below, we have chosen that our app should handle the &lt;code&gt;adjustExample&lt;/code&gt; scheme name.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/adjust/sdks/master/Resources/ios/custom-url-scheme.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After this has been set up, your app will be opened after you click the adjust tracker URL with &lt;code&gt;deep_link&lt;/code&gt; parameter which contains the scheme name which you have chosen. After app is opened, &lt;code&gt;openURL&lt;/code&gt; method of your &lt;code&gt;AppDelegate&lt;/code&gt; class will be triggered and the place where the content of the &lt;code&gt;deep_link&lt;/code&gt; parameter from the tracker URL will be delivered. If you want to access the content of the deep link, override this method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary *)options {&#xA;    // url object contains your deep link content&#xA;&#xA;    // Apply your logic to determine the return value of this method&#xA;    return YES;&#xA;    // or&#xA;    // return NO;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this setup, you have successfully set up deep linking handling for iOS devices with iOS 8 and earlier versions.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;deeplinking-setup-new&#34;&gt;&lt;/a&gt;Deep linking on iOS 9 and later&lt;/h3&gt; &#xA;&lt;p&gt;In order to set deep linking support for iOS 9 and later devices, you need to enable your app to handle Apple universal links. To find out more about universal links and how their setup looks like, you can check &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Adjust is taking care of lots of things to do with universal links behind the scenes. But, in order to support universal links with the adjust, you need to perform small setup for universal links in the adjust dashboard. For more information on that should be done, please consult our official &lt;a href=&#34;https://docs.adjust.com/en/universal-links/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you have successfully enabled the universal links feature in the dashboard, you need to do this in your app as well:&lt;/p&gt; &#xA;&lt;p&gt;After enabling &lt;code&gt;Associated Domains&lt;/code&gt; for your app in Apple Developer Portal, you need to do the same thing in your app&#39;s Xcode project. After enabling &lt;code&gt;Assciated Domains&lt;/code&gt;, add the universal link which was generated for you in the adjust dashboard in the &lt;code&gt;Domains&lt;/code&gt; section by prefixing it with &lt;code&gt;applinks:&lt;/code&gt; and make sure that you also remove the &lt;code&gt;http(s)&lt;/code&gt; part of the universal link.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/adjust/sdks/master/Resources/ios/associated-domains-applinks.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After this has been set up, your app will be opened after you click the adjust tracker universal link. After app is opened, &lt;code&gt;continueUserActivity&lt;/code&gt; method of your &lt;code&gt;AppDelegate&lt;/code&gt; class will be triggered and the place where the content of the universal link URL will be delivered. If you want to access the content of the deep link, override this method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity&#xA; restorationHandler:(void (^)(NSArray *restorableObjects))restorationHandler {&#xA;    if ([[userActivity activityType] isEqualToString:NSUserActivityTypeBrowsingWeb]) {&#xA;        NSURL *url = [userActivity webpageURL];&#xA;&#xA;        // url object contains your universal link content&#xA;    }&#xA;&#xA;    // Apply your logic to determine the return value of this method&#xA;    return YES;&#xA;    // or&#xA;    // return NO;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this setup, you have successfully set up deep linking handling for iOS devices with iOS 9 and later versions.&lt;/p&gt; &#xA;&lt;p&gt;We provide a helper function that allows you to convert a universal link to an old style deep link URL, in case you had some custom logic in your code which was always expecting deep link info to arrive in old style custom URL scheme format. You can call this method with universal link and the custom URL scheme name which you would like to see your deep link prefixed with and we will generate the custom URL scheme deep link for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity&#xA; restorationHandler:(void (^)(NSArray *restorableObjects))restorationHandler {&#xA;    if ([[userActivity activityType] isEqualToString:NSUserActivityTypeBrowsingWeb]) {&#xA;        NSURL *url = [userActivity webpageURL];&#xA;&#xA;        NSURL *oldStyleDeeplink = [Adjust convertUniversalLink:url scheme:@&#34;adjustExample&#34;];&#xA;    }&#xA;&#xA;    // Apply your logic to determine the return value of this method&#xA;    return YES;&#xA;    // or&#xA;    // return NO;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;deeplinking-deferred&#34;&gt;&lt;/a&gt;Deferred deep linking scenario&lt;/h3&gt; &#xA;&lt;p&gt;You can register a delegate callback to be notified before a deferred deep link is opened and decide if the Adjust SDK will try to open it. The same optional protocol &lt;code&gt;AdjustDelegate&lt;/code&gt; used for the &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#attribution-callback&#34;&gt;attribution callback&lt;/a&gt; and for &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#event-session-callbacks&#34;&gt;event and session callbacks&lt;/a&gt; is used.&lt;/p&gt; &#xA;&lt;p&gt;Follow the same steps and implement the following delegate callback function for deferred deep links:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)adjustDeeplinkResponse:(NSURL *)deeplink {&#xA;    // deeplink object contains information about deferred deep link content&#xA;&#xA;    // Apply your logic to determine whether the Adjust SDK should try to open the deep link&#xA;    return YES;&#xA;    // or&#xA;    // return NO;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The callback function will be called after the SDK receives a deferred deep link from our server and before opening it. Within the callback function you have access to the deep link. The returned boolean value determines if the SDK will launch the deep link. You could, for example, not allow the SDK to open the deep link at the current moment, save it, and open it yourself later.&lt;/p&gt; &#xA;&lt;p&gt;If this callback is not implemented, &lt;strong&gt;the Adjust SDK will always try to open the deep link by default&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;deeplinking-reattribution&#34;&gt;&lt;/a&gt;Reattribution via deep links&lt;/h3&gt; &#xA;&lt;p&gt;Adjust enables you to run re-engagement campaigns with usage of deep links. For more information on how to do that, please check our &lt;a href=&#34;https://docs.adjust.com/en/deeplinking/#manually-appending-attribution-data-to-a-deep-link&#34;&gt;official docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are using this feature, in order for your user to be properly reattributed, you need to make one additional call to the Adjust SDK in your app.&lt;/p&gt; &#xA;&lt;p&gt;Once you have received deep link content information in your app, add a call to the &lt;code&gt;appWillOpenUrl&lt;/code&gt; method. By making this call, the Adjust SDK will try to find if there is any new attribution info inside of the deep link and if any, it will be sent to the adjust backend. If your user should be reattributed due to a click on the adjust tracker URL with deep link content in it, you will see the &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#attribution-callback&#34;&gt;attribution callback&lt;/a&gt; in your app being triggered with new attribution info for this user.&lt;/p&gt; &#xA;&lt;p&gt;The call to &lt;code&gt;appWillOpenUrl&lt;/code&gt; should be done like this to support deep linking reattributions in all iOS versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary *)options {&#xA;    // url object contains your deep link content&#xA;    &#xA;    [Adjust appWillOpenUrl:url];&#xA;&#xA;    // Apply your logic to determine the return value of this method&#xA;    return YES;&#xA;    // or&#xA;    // return NO;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity&#xA; restorationHandler:(void (^)(NSArray *restorableObjects))restorationHandler {&#xA;    if ([[userActivity activityType] isEqualToString:NSUserActivityTypeBrowsingWeb]) {&#xA;        NSURL url = [userActivity webpageURL];&#xA;&#xA;        [Adjust appWillOpenUrl:url];&#xA;    }&#xA;&#xA;    // Apply your logic to determine the return value of this method&#xA;    return YES;&#xA;    // or&#xA;    // return NO;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;link-resolution&#34;&gt;&lt;/a&gt;Link resolution&lt;/h3&gt; &#xA;&lt;p&gt;If you are serving deep links from an Email Service Provider (ESP) and need to track clicks through a custom tracking link, you can use the &lt;code&gt;resolveLinkWithUrl&lt;/code&gt; method of the &lt;code&gt;ADJLinkResolution&lt;/code&gt; class to resolve the link. This ensures that you record the interaction with your email tracking campaigns when a deep link is opened in your application.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;resolveLinkWithUrl&lt;/code&gt; method takes the following parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;url&lt;/code&gt; - the deep link that opened the application&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;resolveUrlSuffixArray&lt;/code&gt; - the custom domains of the configured campaigns that need to be resolved&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;callback&lt;/code&gt; - the callback that will contain the final URL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the link received does not belong to any of the domains specified in the &lt;code&gt;resolveUrlSuffixArray&lt;/code&gt;, the callback will forward the deep link URL as is. If the link does contain one of the domains specified, the SDK will attempt to resolve the link and return the resulting deep link to the &lt;code&gt;callback&lt;/code&gt; parameter. The returned deep link can also be reattributed in the Adjust SDK using the &lt;code&gt;[Adjust appWillOpenUrl:]&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The SDK will automatically follow up to ten redirects when attempting to resolve the URL. It will return the latest URL it has followed as the &lt;code&gt;callback&lt;/code&gt; URL, meaning that if there are more than ten redirects to follow the &lt;strong&gt;tenth redirect URL&lt;/strong&gt; will be returned.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[ADJLinkResolution&#xA;    resolveLinkWithUrl:url&#xA;    resolveUrlSuffixArray:@[@&#34;example.com&#34;]&#xA;    callback:^(NSURL * _Nullable resolvedLink)&#xA;    {&#xA;        [Adjust appWillOpenUrl:resolvedLink];&#xA;    }];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;data-residency&#34;&gt;&lt;/a&gt;Data residency&lt;/h3&gt; &#xA;&lt;p&gt;In order to enable data residency feature, make sure to make a call to &lt;code&gt;setUrlStrategy:&lt;/code&gt; method of the &lt;code&gt;ADJConfig&lt;/code&gt; instance with one of the following constants:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[adjustConfig setUrlStrategy:ADJDataResidencyEU]; // for EU data residency region&#xA;[adjustConfig setUrlStrategy:ADJDataResidencyTR]; // for Turkey data residency region&#xA;[adjustConfig setUrlStrategy:ADJDataResidencyUS]; // for US data residency region&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please, do not turn this setting on before making sure with the support team that this feature is enabled for your app because otherwise SDK traffic will get dropped.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;af-coppa-compliance&#34;&gt;&lt;/a&gt;COPPA compliance&lt;/h3&gt; &#xA;&lt;p&gt;By default Adjust SDK doesn&#39;t mark app as COPPA compliant. In order to mark your app as COPPA compliant, make sure to call &lt;code&gt;setCoppaCompliantEnabled&lt;/code&gt; method of &lt;code&gt;AdjustConfig&lt;/code&gt; instance with boolean parameter &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Native App SDK&lt;/b&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[adjustConfig setCoppaCompliantEnabled:YES];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Web View SDK&lt;/b&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;adjustConfig.setCoppaCompliantEnabled(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; By enabling this feature, third-party sharing will be automatically disabled for the users. If later during the app lifetime you decide not to mark app as COPPA compliant anymore, third-party sharing &lt;strong&gt;will not be automatically re-enabled&lt;/strong&gt;. Instead, next to not marking your app as COPPA compliant anymore, you will need to explicitly re-enable third-party sharing in case you want to do that.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;troubleshooting&#34;&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;ts-delayed-init&#34;&gt;&lt;/a&gt;Issues with delayed SDK initialisation&lt;/h3&gt; &#xA;&lt;p&gt;As described in the &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#basic-setup&#34;&gt;basic setup step&lt;/a&gt;, we strongly advise you to initialise the Adjust SDK in the &lt;code&gt;didFinishLaunching&lt;/code&gt; or &lt;code&gt;didFinishLaunchingWithOptions&lt;/code&gt; method of your app delegate. It is imperative to initialise the Adjust SDK in as soon as possible so that you can use all the features of the SDK.&lt;/p&gt; &#xA;&lt;p&gt;Deciding not to initialise the Adjust SDK immediately can have all kinds of impacts on the tracking in your app: &lt;strong&gt;In order to perform any kind of tracking in your app, the Adjust SDK &lt;em&gt;must&lt;/em&gt; be initialised.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you decide to perform any of these actions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#event-tracking&#34;&gt;Event tracking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#deeplinking-reattribution&#34;&gt;Reattribution via deep links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#disable-tracking&#34;&gt;Disable tracking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#offline-mode&#34;&gt;Offline mode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;before initialising the SDK, &lt;code&gt;they won&#39;t be performed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want any of these actions to be tracked with the Adjust SDK before its actual initialisation, you must build a &lt;code&gt;custom actions queueing mechanism&lt;/code&gt; inside your app. You need to queue all the actions you want our SDK to perform and perform them once the SDK is initialised.&lt;/p&gt; &#xA;&lt;p&gt;Offline mode state won&#39;t be changed, tracking enabled/disabled state won&#39;t be changed, deep link reattributions will not be possible to happen, any of tracked events will be &lt;code&gt;dropped&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another thing which might be affected by delayed SDK initialisation is session tracking. The Adjust SDK can&#39;t start to collect any session length info before it is actually initialised. This can affect your DAU numbers in the dashboard which might not be tracked properly.&lt;/p&gt; &#xA;&lt;p&gt;As an example, let&#39;s assume this scenario: You are initialising the Adjust SDK when some specific view or view controller is loaded and let&#39;s say that this is not the splash nor the first screen in your app, but user has to navigate to it from the home screen. If user downloads your app and opens it, the home screen will be displayed. At this moment, this user has made an install which should be tracked. However, the Adjust SDK doesn&#39;t know anything about this, because the user needs to navigate to the screen mentioned previously where you decided to initialise the Adjust SDK. Further, if the user decides that he/she doesn&#39;t like the app and uninstalls it right after seeing home screen, all the information mentioned above will never be tracked by our SDK, nor displayed in the dashboard.&lt;/p&gt; &#xA;&lt;h4&gt;Event tracking&lt;/h4&gt; &#xA;&lt;p&gt;For the events you want to track, queue them with some internal queueing mechanism and track them after SDK is initialised. Tracking events before initialising SDK will cause the events to be &lt;code&gt;dropped&lt;/code&gt; and &lt;code&gt;permanently lost&lt;/code&gt;, so make sure you are tracking them once SDK is &lt;code&gt;initialised&lt;/code&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#is-enabled&#34;&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Offline mode and enable/disable tracking&lt;/h4&gt; &#xA;&lt;p&gt;Offline mode is not the feature which is persisted between SDK initialisations, so it is set to &lt;code&gt;false&lt;/code&gt; by default. If you try to enable offline mode before initialising SDK, it will still be set to &lt;code&gt;false&lt;/code&gt; when you eventually initialise the SDK.&lt;/p&gt; &#xA;&lt;p&gt;Enabling/disabling tracking is the setting which is persisted between the SDK initialisations. If you try to toggle this value before initialising the SDK, toggle attempt will be ignored. Once initialised, SDK will be in the state (enabled or disabled) like before this toggle attempt.&lt;/p&gt; &#xA;&lt;h4&gt;Reattribution via deep links&lt;/h4&gt; &#xA;&lt;p&gt;As described &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#deeplinking-reattribution&#34;&gt;above&lt;/a&gt;, when handling deep link reattributions, depending on deep linking mechanism you are using (old style vs. universal links), you will obtain &lt;code&gt;NSURL&lt;/code&gt; object after which you need to make following call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[Adjust appWillOpenUrl:url]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you make this call before the SDK has been initialised, information about the attribution information from the deep link URL will be permanetly lost. If you want the Adjust SDK to successfully reattribute your user, you would need to queue this &lt;code&gt;NSURL&lt;/code&gt; object information and trigger &lt;code&gt;appWillOpenUrl&lt;/code&gt; method once the SDK has been initialised.&lt;/p&gt; &#xA;&lt;h4&gt;Session tracking&lt;/h4&gt; &#xA;&lt;p&gt;Session tracking is something what the Adjust SDK performs automatically and is beyond reach of an app developer. For proper session tracking it is crucial to have the Adjust SDK initialised as advised in this README. Not doing so can have unpredicted influences on proper session tracking and DAU numbers in the dashboard.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A user opens but then deletes your app before the SDK was even inialised, causing the install and session to have never been tracked, thus never reported in the dashboard.&lt;/li&gt; &#xA; &lt;li&gt;If a user downloads and opens your app before midnight, and the Adjust SDK gets initialised after midnight, all queued install and session data will be reported on wrong day.&lt;/li&gt; &#xA; &lt;li&gt;If a user didn&#39;t use your app on some day but opens it shortly after midnight and the SDK gets initialised after midnight, causing DAU to be reported on another day from the day of the app opening.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For all these reasons, please follow the instructions in this document and initialise the Adjust SDK in the &lt;code&gt;didFinishLaunching&lt;/code&gt; or &lt;code&gt;didFinishLaunchingWithOptions&lt;/code&gt; method of your app delegate.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;ts-arc&#34;&gt;&lt;/a&gt;I&#39;m seeing &#34;Adjust requires ARC&#34; error&lt;/h3&gt; &#xA;&lt;p&gt;If your build failed with the error &lt;code&gt;Adjust requires ARC&lt;/code&gt;, it looks like your project is not using &lt;a href=&#34;http://en.wikipedia.org/wiki/Automatic_Reference_Counting&#34;&gt;ARC&lt;/a&gt;. In that case we recommend &lt;a href=&#34;http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html&#34;&gt;transitioning your project&lt;/a&gt; so that it does use ARC. If you don&#39;t want to use ARC, you have to enable ARC for all source files of adjust in the target&#39;s Build Phases:&lt;/p&gt; &#xA;&lt;p&gt;Expand the &lt;code&gt;Compile Sources&lt;/code&gt; group, select all adjust files and change the &lt;code&gt;Compiler Flags&lt;/code&gt; to &lt;code&gt;-fobjc-arc&lt;/code&gt; (Select all and press the &lt;code&gt;Return&lt;/code&gt; key to change all at once).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;ts-categories&#34;&gt;&lt;/a&gt;I&#39;m seeing &#34;[UIDevice adjTrackingEnabled]: unrecognized selector sent to instance&#34; error&lt;/h3&gt; &#xA;&lt;p&gt;This error can occur when you are adding the Adjust SDK framework to your app. The Adjust SDK contains &lt;code&gt;categories&lt;/code&gt; among it&#39;s source files and for this reason, if you have chosen this SDK integration approach, you need to add &lt;code&gt;-ObjC&lt;/code&gt; flags to &lt;code&gt;Other Linker Flags&lt;/code&gt; in your Xcode project settings. Adding this flag will fix this error.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;ts-session-failed&#34;&gt;&lt;/a&gt;I&#39;m seeing the &#34;Session failed (Ignoring too frequent session.)&#34; error&lt;/h3&gt; &#xA;&lt;p&gt;This error typically occurs when testing installs. Uninstalling and reinstalling the app is not enough to trigger a new install. The servers will determine that the SDK has lost its locally aggregated session data and ignore the erroneous message, given the information available on the servers about the device.&lt;/p&gt; &#xA;&lt;p&gt;This behaviour can be cumbersome during tests, but is necessary in order to have the sandbox behaviour match production as much as possible.&lt;/p&gt; &#xA;&lt;p&gt;You can reset the session data of the device in our servers. Check the error message in the logs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Session failed (Ignoring too frequent session. Last session: YYYY-MM-DDTHH:mm:ss, this session: YYYY-MM-DDTHH:mm:ss, interval: XXs, min interval: 20m) (app_token: {yourAppToken}, adid: {adidValue})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;forget-device&#34;&gt;With the &lt;code&gt;{yourAppToken}&lt;/code&gt; and either &lt;code&gt;{adidValue}&lt;/code&gt; or &lt;code&gt;{idfaValue}&lt;/code&gt; values filled in below, open one of the following links:&lt;/a&gt;&lt;/p&gt;&#xA;&lt;a id=&#34;forget-device&#34;&gt; &lt;pre&gt;&lt;code&gt;http://app.adjust.com/forget_device?app_token={yourAppToken}&amp;amp;adid={adidValue}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code&gt;http://app.adjust.com/forget_device?app_token={yourAppToken}&amp;amp;idfa={idfaValue}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the device is forgotten, the link just returns &lt;code&gt;Forgot device&lt;/code&gt;. If the device was already forgotten or the values were incorrect, the link returns &lt;code&gt;Device not found&lt;/code&gt;.&lt;/p&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a id=&#34;forget-device&#34;&gt;&lt;/a&gt;&lt;a id=&#34;ts-install-tracked&#34;&gt;&lt;/a&gt;I&#39;m not seeing &#34;Install tracked&#34; in the logs&lt;/h3&gt; &#xA;&lt;p&gt;If you want to simulate the installation scenario of your app on your test device, it is not enough if you just re-run the app from the Xcode on your test device. Re-running the app from the Xcode doesn&#39;t cause app data to be wiped out and all internal files that our SDK is keeping inside your app will still be there, so upon re-run, our SDK will see those files and think of your app was already installed (and that SDK was already launched in it) but just opened for another time rather than being opened for the first time.&lt;/p&gt; &#xA;&lt;p&gt;In order to run the app installation scenario, you need to do following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uninstall app from your device (completely remove it)&lt;/li&gt; &#xA; &lt;li&gt;Forget your test device from the adjust backend like explained in the issue &lt;a href=&#34;https://raw.githubusercontent.com/adjust/ios_sdk/master/#forget-device&#34;&gt;above&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run your app from the Xcode on the test device and you will see log message &#34;Install tracked&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;ts-iad-sdk-click&#34;&gt;&lt;/a&gt;I&#39;m seeing the &#34;Unattributable SDK click ignored&#34; message&lt;/h3&gt; &#xA;&lt;p&gt;You may notice this message while testing your app in &lt;code&gt;sandbox&lt;/code&gt; environment. It is related to some changes Apple introduced in &lt;code&gt;iAd.framework&lt;/code&gt; version 3. With this, a user can be directed to your app from a click on iAd banner and this will cause our SDK to send an &lt;code&gt;sdk_click&lt;/code&gt; package to the adjust backend informing it about the content of the clicked URL. For some reason, Apple decided that if the app was opened without clicking on iAd banner, they will artificially generate an iAd banner URL click with some random values. Our SDK won&#39;t be able to distinguish if the iAd banner click was genuine or artificially generated and will send an &lt;code&gt;sdk_click&lt;/code&gt; package regardless to the adjust backend. If you have your log level set to &lt;code&gt;verbose&lt;/code&gt;, you will see this &lt;code&gt;sdk_click&lt;/code&gt; package looking something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Adjust]d: Added package 1 (click)&#xA;[Adjust]v: Path:      /sdk_click&#xA;[Adjust]v: ClientSdk: ios4.10.1&#xA;[Adjust]v: Parameters:&#xA;[Adjust]v:      app_token              {YourAppToken}&#xA;[Adjust]v:      created_at             2016-04-15T14:25:51.676Z+0200&#xA;[Adjust]v:      details                {&#34;Version3.1&#34;:{&#34;iad-lineitem-id&#34;:&#34;1234567890&#34;,&#34;iad-org-name&#34;:&#34;OrgName&#34;,&#34;iad-creative-name&#34;:&#34;CreativeName&#34;,&#34;iad-click-date&#34;:&#34;2016-04-15T12:25:51Z&#34;,&#34;iad-campaign-id&#34;:&#34;1234567890&#34;,&#34;iad-attribution&#34;:&#34;true&#34;,&#34;iad-lineitem-name&#34;:&#34;LineName&#34;,&#34;iad-creative-id&#34;:&#34;1234567890&#34;,&#34;iad-campaign-name&#34;:&#34;CampaignName&#34;,&#34;iad-conversion-date&#34;:&#34;2016-04-15T12:25:51Z&#34;}}&#xA;[Adjust]v:      environment            sandbox&#xA;[Adjust]v:      idfa                   XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX&#xA;[Adjust]v:      idfv                   YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY&#xA;[Adjust]v:      needs_response_details 1&#xA;[Adjust]v:      source                 iad3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If for some reason this &lt;code&gt;sdk_click&lt;/code&gt; would be accepted, it would mean that a user who has opened your app by clicking on some other campaign URL or even as an organic user, will get attributed to this unexisting iAd source. This is the reason why our backend ignores it and informs you with this message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Adjust]v: Response: {&#34;message&#34;:&#34;Unattributable SDK click ignored.&#34;}&#xA;[Adjust]i: Unattributable SDK click ignored.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, this message doesn&#39;t indicate any issue with your SDK integration but it&#39;s simply informing you that our backend has ignored this artificially created &lt;code&gt;sdk_click&lt;/code&gt; which could have lead to your user being wrongly attributed/reattributed.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;ts-wrong-revenue-amount&#34;&gt;&lt;/a&gt;I&#39;m seeing incorrect revenue data in the adjust dashboard&lt;/h3&gt; &#xA;&lt;p&gt;The Adjust SDK tracks what you tell it to track. If you are attaching revenue to your event, the number you write as an amount is the only amount which will reach the adjust backend and be displayed in the dashboard. Our SDK does not manipulate your amount value, nor does our backend. So, if you see wrong amount being tracked, it&#39;s because our SDK was told to track that amount.&lt;/p&gt; &#xA;&lt;p&gt;Usually, a user&#39;s code for tracking revenue event looks something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// ...&#xA;&#xA;- (double)someLogicForGettingRevenueAmount {&#xA;    // This method somehow handles how user determines&#xA;    // what&#39;s the revenue value which should be tracked.&#xA;&#xA;    // It is maybe making some calculations to determine it.&#xA;&#xA;    // Or maybe extracting the info from In-App purchase which&#xA;    // was successfully finished.&#xA;&#xA;    // Or maybe returns some predefined double value.&#xA;&#xA;    double amount; // double amount = some double value&#xA;&#xA;    return amount;&#xA;}&#xA;&#xA;// ...&#xA;&#xA;- (void)someRandomMethodInTheApp {&#xA;    double amount = [self someLogicForGettingRevenueAmount];&#xA;&#xA;    ADJEvent *event = [ADJEvent eventWithEventToken:@&#34;abc123&#34;];&#xA;    [event setRevenue:amount currency:@&#34;EUR&#34;];&#xA;    [Adjust trackEvent:event];&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are seing any value in the dashboard other than what you expected to be tracked, &lt;strong&gt;please, check your logic for determining amount value&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;license&#34;&gt;&lt;/a&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Adjust SDK is licensed under the MIT License.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2012-Present Adjust GmbH, &lt;a href=&#34;http://www.adjust.com&#34;&gt;http://www.adjust.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>robbiehanson/CocoaAsyncSocket</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/robbiehanson/CocoaAsyncSocket</id>
    <link href="https://github.com/robbiehanson/CocoaAsyncSocket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Asynchronous socket networking library for Mac and iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CocoaAsyncSocket&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/robbiehanson/CocoaAsyncSocket&#34;&gt;&lt;img src=&#34;https://travis-ci.org/robbiehanson/CocoaAsyncSocket.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/CocoaAsyncSocket&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/CocoaAsyncSocket.svg?style=flat&#34; alt=&#34;Version Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/?q=CocoaAsyncSocket&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/CocoaAsyncSocket.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Public_domain&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Public%20Domain-orange.svg?style=flat&#34; alt=&#34;license Public Domain&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CocoaAsyncSocket provides easy-to-use and powerful asynchronous socket libraries for macOS, iOS, and tvOS. The classes are described below.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;Install using &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; by adding this line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks! # Add this if you are targeting iOS 8+ or using Swift&#xA;pod &#39;CocoaAsyncSocket&#39;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;CocoaAsyncSocket is &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; compatible. To include it add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;github &#34;robbiehanson/CocoaAsyncSocket&#34; &#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The project is currently configured to build for &lt;strong&gt;iOS&lt;/strong&gt;, &lt;strong&gt;tvOS&lt;/strong&gt; and &lt;strong&gt;Mac&lt;/strong&gt;. After building with carthage the resultant frameworks will be stored in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Carthage/Build/iOS/CocoaAsyncSocket.framework&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Carthage/Build/tvOS/CocoaAsyncSocket.framework&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Carthage/Build/Mac/CocoaAsyncSocket.framework&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Select the correct framework(s) and drag it into your project.&lt;/p&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;Simply add the package dependency to your Package.swift and depend on &#34;CocoaAsyncSocket&#34; in the necessary targets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/robbiehanson/CocoaAsyncSocket&#34;, from: &#34;7.6.4&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manual&lt;/h4&gt; &#xA;&lt;p&gt;You can also include it into your project by adding the source files directly, but you should probably be using a dependency manager to keep up to date.&lt;/p&gt; &#xA;&lt;h3&gt;Importing&lt;/h3&gt; &#xA;&lt;p&gt;Using Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// When using Clang Modules:&#xA;@import CocoaAsyncSocket; &#xA;&#xA;// or when not:&#xA;#import &#34;GCDAsyncSocket.h&#34; // for TCP&#xA;#import &#34;GCDAsyncUdpSocket.h&#34; // for UDP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import CocoaAsyncSocket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TCP&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GCDAsyncSocket&lt;/strong&gt; is a TCP/IP socket networking library built atop Grand Central Dispatch. Here are the key features available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Native Objective-C, fully self-contained in one class.&lt;br&gt; &lt;em&gt;No need to muck around with sockets or streams. This class handles everything for you.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Full delegate support&lt;br&gt; &lt;em&gt;Errors, connections, read completions, write completions, progress, and disconnections all result in a call to your delegate method.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Queued non-blocking reads and writes, with optional timeouts.&lt;br&gt; &lt;em&gt;You tell it what to read or write, and it handles everything for you. Queueing, buffering, and searching for termination sequences within the stream - all handled for you automatically.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Automatic socket acceptance.&lt;br&gt; &lt;em&gt;Spin up a server socket, tell it to accept connections, and it will call you with new instances of itself for each connection.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for TCP streams over IPv4 and IPv6.&lt;br&gt; &lt;em&gt;Automatically connect to IPv4 or IPv6 hosts. Automatically accept incoming connections over both IPv4 and IPv6 with a single instance of this class. No more worrying about multiple sockets.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for TLS / SSL&lt;br&gt; &lt;em&gt;Secure your socket with ease using just a single method call. Available for both client and server sockets.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fully GCD based and Thread-Safe&lt;br&gt; &lt;em&gt;It runs entirely within its own GCD dispatch_queue, and is completely thread-safe. Further, the delegate methods are all invoked asynchronously onto a dispatch_queue of your choosing. This means parallel operation of your socket code, and your delegate/processing code.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;UDP&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GCDAsyncUdpSocket&lt;/strong&gt; is a UDP/IP socket networking library built atop Grand Central Dispatch. Here are the key features available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Native Objective-C, fully self-contained in one class.&lt;br&gt; &lt;em&gt;No need to muck around with low-level sockets. This class handles everything for you.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Full delegate support.&lt;br&gt; &lt;em&gt;Errors, send completions, receive completions, and disconnections all result in a call to your delegate method.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Queued non-blocking send and receive operations, with optional timeouts.&lt;br&gt; &lt;em&gt;You tell it what to send or receive, and it handles everything for you. Queueing, buffering, waiting and checking errno - all handled for you automatically.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for IPv4 and IPv6.&lt;br&gt; &lt;em&gt;Automatically send/recv using IPv4 and/or IPv6. No more worrying about multiple sockets.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fully GCD based and Thread-Safe&lt;br&gt; &lt;em&gt;It runs entirely within its own GCD dispatch_queue, and is completely thread-safe. Further, the delegate methods are all invoked asynchronously onto a dispatch_queue of your choosing. This means parallel operation of your socket code, and your delegate/processing code.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;For those new(ish) to networking, it&#39;s recommended you &lt;strong&gt;&lt;a href=&#34;https://github.com/robbiehanson/CocoaAsyncSocket/wiki&#34;&gt;read the wiki&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;&lt;em&gt;Sockets might not work exactly like you think they do...&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Still got questions?&lt;/strong&gt; Try the &lt;strong&gt;&lt;a href=&#34;https://groups.google.com/group/cocoaasyncsocket&#34;&gt;CocoaAsyncSocket Mailing List&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Love the project? Wanna buy me a ☕️&amp;nbsp;&amp;nbsp;? (or a 🍺&amp;nbsp;&amp;nbsp;😀&amp;nbsp;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://onename.com/robbiehanson&#34;&gt;&lt;img src=&#34;https://bitpay.com/img/donate-sm.png&#34; alt=&#34;donation-bitcoin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=2M8C699FQ8AW2&#34;&gt;&lt;img src=&#34;https://www.paypal.com/en_US/i/btn/btn_donate_SM.gif&#34; alt=&#34;donation-paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zoontek/react-native-permissions</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/zoontek/react-native-permissions</id>
    <link href="https://github.com/zoontek/react-native-permissions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unified permissions API for React Native on iOS and Android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;☝🏼 react-native-permissions&lt;/h1&gt; &#xA;&lt;p&gt;A unified permissions API for React Native on iOS, Android and Windows.&lt;br&gt; (For Windows only builds 18362 and later are supported)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.org/package/react-native-permissions&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/react-native-permissions.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.org/package/react-native-permissions&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/react-native-permissions.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/dub/l/vibe-d.svg?sanitize=true&#34; alt=&#34;MIT&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://www.android.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-Android-3ddc84.svg?style=flat&amp;amp;logo=android&#34; alt=&#34;Platform - Android&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-iOS-000.svg?style=flat&amp;amp;logo=apple&#34; alt=&#34;Platform - iOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.microsoft.com/en-us/windows&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-Windows-0067b8.svg?style=flat&amp;amp;logo=windows&#34; alt=&#34;Platform - Windows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/sponsors/zoontek&#34;&gt; &lt;img align=&#34;right&#34; width=&#34;150&#34; alt=&#34;This library helped you? Consider sponsoring!&#34; src=&#34;https://raw.githubusercontent.com/zoontek/react-native-permissions/master/.github/funding-octocat.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;This module is provided &lt;strong&gt;as is&lt;/strong&gt;, I work on it in my free time.&lt;/p&gt; &#xA;&lt;p&gt;If your company uses it in a production app, consider sponsoring this project 💰. You also can contact me for &lt;strong&gt;premium&lt;/strong&gt; enterprise support, help with issues, prioritize bugfixes, feature requests, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;version&lt;/th&gt; &#xA;   &lt;th&gt;react-native version&lt;/th&gt; &#xA;   &lt;th&gt;Xcode version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.0.0+&lt;/td&gt; &#xA;   &lt;td&gt;0.63.0+&lt;/td&gt; &#xA;   &lt;td&gt;12+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install --save react-native-permissions&#xA;# --- or ---&#xA;$ yarn add react-native-permissions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;By default no permission handler is installed. Update your &lt;code&gt;Podfile&lt;/code&gt; by choosing the ones you want to check or request, then run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target &#39;YourAwesomeProject&#39; do&#xA;&#xA;  # …&#xA;&#xA;  permissions_path = &#39;../node_modules/react-native-permissions/ios&#39;&#xA;&#xA;  pod &#39;Permission-AppTrackingTransparency&#39;, :path =&amp;gt; &#34;#{permissions_path}/AppTrackingTransparency&#34;&#xA;  pod &#39;Permission-BluetoothPeripheral&#39;, :path =&amp;gt; &#34;#{permissions_path}/BluetoothPeripheral&#34;&#xA;  pod &#39;Permission-Calendars&#39;, :path =&amp;gt; &#34;#{permissions_path}/Calendars&#34;&#xA;  pod &#39;Permission-Camera&#39;, :path =&amp;gt; &#34;#{permissions_path}/Camera&#34;&#xA;  pod &#39;Permission-Contacts&#39;, :path =&amp;gt; &#34;#{permissions_path}/Contacts&#34;&#xA;  pod &#39;Permission-FaceID&#39;, :path =&amp;gt; &#34;#{permissions_path}/FaceID&#34;&#xA;  pod &#39;Permission-LocationAccuracy&#39;, :path =&amp;gt; &#34;#{permissions_path}/LocationAccuracy&#34;&#xA;  pod &#39;Permission-LocationAlways&#39;, :path =&amp;gt; &#34;#{permissions_path}/LocationAlways&#34;&#xA;  pod &#39;Permission-LocationWhenInUse&#39;, :path =&amp;gt; &#34;#{permissions_path}/LocationWhenInUse&#34;&#xA;  pod &#39;Permission-MediaLibrary&#39;, :path =&amp;gt; &#34;#{permissions_path}/MediaLibrary&#34;&#xA;  pod &#39;Permission-Microphone&#39;, :path =&amp;gt; &#34;#{permissions_path}/Microphone&#34;&#xA;  pod &#39;Permission-Motion&#39;, :path =&amp;gt; &#34;#{permissions_path}/Motion&#34;&#xA;  pod &#39;Permission-Notifications&#39;, :path =&amp;gt; &#34;#{permissions_path}/Notifications&#34;&#xA;  pod &#39;Permission-PhotoLibrary&#39;, :path =&amp;gt; &#34;#{permissions_path}/PhotoLibrary&#34;&#xA;  pod &#39;Permission-PhotoLibraryAddOnly&#39;, :path =&amp;gt; &#34;#{permissions_path}/PhotoLibraryAddOnly&#34;&#xA;  pod &#39;Permission-Reminders&#39;, :path =&amp;gt; &#34;#{permissions_path}/Reminders&#34;&#xA;  pod &#39;Permission-Siri&#39;, :path =&amp;gt; &#34;#{permissions_path}/Siri&#34;&#xA;  pod &#39;Permission-SpeechRecognition&#39;, :path =&amp;gt; &#34;#{permissions_path}/SpeechRecognition&#34;&#xA;  pod &#39;Permission-StoreKit&#39;, :path =&amp;gt; &#34;#{permissions_path}/StoreKit&#34;&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; If you see a &lt;strong&gt;No permission handler detected&lt;/strong&gt; error: Make sure that you have at least one permission handler set up. In some cases the Xcode cache needs to be cleared (&lt;code&gt;Xcode -&amp;gt; Product -&amp;gt; Clean Build Folder&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Then update your &lt;code&gt;Info.plist&lt;/code&gt; with wanted permissions usage descriptions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;&#xA;  &amp;lt;!-- 🚨 Keep only the permissions used in your app 🚨 --&amp;gt;&#xA;&#xA;  &amp;lt;key&amp;gt;NSAppleMusicUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSBluetoothAlwaysUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSBluetoothPeripheralUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSCalendarsUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSCameraUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSContactsUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSFaceIDUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSLocationAlwaysAndWhenInUseUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSLocationAlwaysUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSLocationTemporaryUsageDescriptionDictionary&amp;lt;/key&amp;gt;&#xA;  &amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;YOUR-PURPOSE-KEY&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;/dict&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSLocationWhenInUseUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSMicrophoneUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSMotionUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSPhotoLibraryUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSPhotoLibraryAddUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSRemindersUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSSpeechRecognitionUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSSiriUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSUserTrackingUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;&#xA;  &amp;lt;!-- … --&amp;gt;&#xA;&#xA;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Workaround for &lt;code&gt;use_frameworks!&lt;/code&gt; issues&lt;/h4&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;use_frameworks!&lt;/code&gt;, add this at the top of your &lt;code&gt;Podfile&lt;/code&gt;, and uncomment the line corresponding to your CocoaPods version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;&#xA;# Convert all permission pods into static libraries&#xA;pre_install do |installer|&#xA;  Pod::Installer::Xcode::TargetValidator.send(:define_method, :verify_no_static_framework_transitive_dependencies) {}&#xA;&#xA;  installer.pod_targets.each do |pod|&#xA;    if pod.name.eql?(&#39;RNPermissions&#39;) || pod.name.start_with?(&#39;Permission-&#39;)&#xA;      def pod.build_type;&#xA;        # Uncomment the line corresponding to your CocoaPods version&#xA;        # Pod::BuildType.static_library # &amp;gt;= 1.9&#xA;        # Pod::Target::BuildType.static_library # &amp;lt; 1.9&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Add all wanted permissions to your app &lt;code&gt;android/app/src/main/AndroidManifest.xml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;manifest xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#xA;  package=&#34;com.myawesomeapp&#34;&amp;gt;&#xA;&#xA;  &amp;lt;!-- 🚨 Keep only the permissions used in your app 🚨 --&amp;gt;&#xA;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ACCEPT_HANDOVER&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_BACKGROUND_LOCATION&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_COARSE_LOCATION&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_FINE_LOCATION&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_MEDIA_LOCATION&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ACTIVITY_RECOGNITION&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ANSWER_PHONE_CALLS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_ADVERTISE&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_CONNECT&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_SCAN&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.BODY_SENSORS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.CALL_PHONE&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.CAMERA&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.GET_ACCOUNTS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.PROCESS_OUTGOING_CALLS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_CALENDAR&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_CALL_LOG&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_CONTACTS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_EXTERNAL_STORAGE&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_PHONE_NUMBERS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_PHONE_STATE&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_SMS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.RECEIVE_MMS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.RECEIVE_SMS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.RECEIVE_WAP_PUSH&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.RECORD_AUDIO&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.SEND_SMS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.USE_SIP&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.WRITE_CALENDAR&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.WRITE_CALL_LOG&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.WRITE_CONTACTS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.WRITE_EXTERNAL_STORAGE&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;com.android.voicemail.permission.ADD_VOICEMAIL&#34; /&amp;gt;&#xA;&#xA;  &amp;lt;!-- … --&amp;gt;&#xA;&#xA;&amp;lt;/manifest&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Open the project solution file from the &lt;code&gt;windows&lt;/code&gt; folder. In the app project open &lt;code&gt;Package.appxmanifest&lt;/code&gt; file. From there you can select which capabilites you want your app to support.&lt;/p&gt; &#xA;&lt;h2&gt;🆘 Manual linking&lt;/h2&gt; &#xA;&lt;p&gt;Because this package targets React Native 0.63.0+, you probably won&#39;t need to link it manually. Otherwise if it&#39;s not the case, follow these additional instructions. You also need to manual link the module on Windows when using React Native Windows prior to 0.63:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;👀 See manual linking instructions&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;h3&gt;iOS&lt;/h3&gt; &#xA; &lt;p&gt;Add this line to your &lt;code&gt;ios/Podfile&lt;/code&gt; file, then run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;target &#39;YourAwesomeProject&#39; do&#xA;  # …&#xA;  pod &#39;RNPermissions&#39;, :path =&amp;gt; &#39;../node_modules/react-native-permissions&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Android&lt;/h3&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Add the following lines to &lt;code&gt;android/settings.gradle&lt;/code&gt;:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;include &#39;:react-native-permissions&#39;&#xA;project(&#39;:react-native-permissions&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/react-native-permissions/android&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;Add the implementation line to the dependencies in &lt;code&gt;android/app/build.gradle&lt;/code&gt;:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  // ...&#xA;  implementation project(&#39;:react-native-permissions&#39;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;Add the import and link the package in &lt;code&gt;MainApplication.java&lt;/code&gt;:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.zoontek.rnpermissions.RNPermissionsPackage; // &amp;lt;- add the RNPermissionsPackage import&#xA;&#xA;public class MainApplication extends Application implements ReactApplication {&#xA;&#xA;  // …&#xA;&#xA;  @Override&#xA;  protected List&amp;lt;ReactPackage&amp;gt; getPackages() {&#xA;    @SuppressWarnings(&#34;UnnecessaryLocalVariable&#34;)&#xA;    List&amp;lt;ReactPackage&amp;gt; packages = new PackageList(this).getPackages();&#xA;    // …&#xA;    packages.add(new RNPermissionsPackage());&#xA;    return packages;&#xA;  }&#xA;&#xA;  // …&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Windows&lt;/h3&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;In &lt;code&gt;windows/myapp.sln&lt;/code&gt; add the &lt;code&gt;RNCConfig&lt;/code&gt; project to your solution:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open the solution in Visual Studio 2019&lt;/li&gt; &#xA;  &lt;li&gt;Right-click Solution icon in Solution Explorer &amp;gt; Add &amp;gt; Existing Project&lt;/li&gt; &#xA;  &lt;li&gt;Select &lt;code&gt;node_modules\react-native-permissions\windows\RNPermissions\RNPermissions.vcxproj&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;In &lt;code&gt;windows/myapp/myapp.vcxproj&lt;/code&gt; ad a reference to &lt;code&gt;RNPermissions&lt;/code&gt; to your main application project. From Visual Studio 2019:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Right-click main application project &amp;gt; Add &amp;gt; Reference...&lt;/li&gt; &#xA;  &lt;li&gt;Check &lt;code&gt;RNPermissions&lt;/code&gt; from Solution Projects.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt; &lt;p&gt;In &lt;code&gt;pch.h&lt;/code&gt; add &lt;code&gt;#include &#34;winrt/RNPermissions.h&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;In &lt;code&gt;app.cpp&lt;/code&gt; add &lt;code&gt;PackageProviders().Append(winrt::RNPermissions::ReactPackageProvider());&lt;/code&gt; before &lt;code&gt;InitializeComponent();&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Understanding permission flow&lt;/h2&gt; &#xA;&lt;p&gt;As permissions are not handled in the same way on iOS and Android, this library provides an abstraction over the two platforms&#39; behaviors. To understand it a little better, take a look to these two flowcharts:&lt;/p&gt; &#xA;&lt;h3&gt;iOS flow&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓&#xA;   ┃ check(PERMISSIONS.IOS.CAMERA) ┃&#xA;   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&#xA;                   │&#xA;       Is the feature available&#xA;           on this device&amp;nbsp;?&#xA;                   │           ╔════╗&#xA;                   ├───────────║ NO ║──────────────┐&#xA;                   │           ╚════╝              │&#xA;                ╔═════╗                            ▼&#xA;                ║ YES ║                 ┌─────────────────────┐&#xA;                ╚═════╝                 │ RESULTS.UNAVAILABLE │&#xA;                   │                    └─────────────────────┘&#xA;           Is the permission&#xA;             requestable&amp;nbsp;?&#xA;                   │           ╔════╗&#xA;                   ├───────────║ NO ║──────────────┐&#xA;                   │           ╚════╝              │&#xA;                ╔═════╗                            ▼&#xA;                ║ YES ║                  ┌───────────────────┐&#xA;                ╚═════╝                  │ RESULTS.BLOCKED / │&#xA;                   │                     │ RESULTS.LIMITED / │&#xA;                   │                     │  RESULTS.GRANTED  │&#xA;                   ▼                     └───────────────────┘&#xA;          ┌────────────────┐&#xA;          │ RESULTS.DENIED │&#xA;          └────────────────┘&#xA;                   │&#xA;                   ▼&#xA;  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓&#xA;  ┃ request(PERMISSIONS.IOS.CAMERA) ┃&#xA;  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&#xA;                   │&#xA;         Does the user accept&#xA;            the request&amp;nbsp;?&#xA;                   │           ╔════╗&#xA;                   ├───────────║ NO ║──────────────┐&#xA;                   │           ╚════╝              │&#xA;                ╔═════╗                            ▼&#xA;                ║ YES ║                   ┌─────────────────┐&#xA;                ╚═════╝                   │ RESULTS.BLOCKED │&#xA;                   │                      └─────────────────┘&#xA;                   ▼&#xA;          ┌─────────────────┐&#xA;          │ RESULTS.GRANTED │&#xA;          └─────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android flow&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt; ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓&#xA; ┃ check(PERMISSIONS.ANDROID.CAMERA) ┃&#xA; ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&#xA;                   │&#xA;       Is the feature available&#xA;           on this device&amp;nbsp;?&#xA;                   │           ╔════╗&#xA;                   ├───────────║ NO ║──────────────┐&#xA;                   │           ╚════╝              │&#xA;                ╔═════╗                            ▼&#xA;                ║ YES ║                 ┌─────────────────────┐&#xA;                ╚═════╝                 │ RESULTS.UNAVAILABLE │&#xA;                   │                    └─────────────────────┘&#xA;           Is the permission&#xA;             requestable&amp;nbsp;?&#xA;                   │           ╔════╗&#xA;                   ├───────────║ NO ║──────────────┐&#xA;                   │           ╚════╝              │&#xA;                ╔═════╗                            ▼&#xA;                ║ YES ║                  ┌───────────────────┐&#xA;                ╚═════╝                  │ RESULTS.BLOCKED / │&#xA;                   │                     │  RESULTS.GRANTED  │&#xA;                   ▼                     └───────────────────┘&#xA;          ┌────────────────┐&#xA;          │ RESULTS.DENIED │◀──────────────────────┐&#xA;          └────────────────┘                       │&#xA;                   │                               │&#xA;                   ▼                               │&#xA;┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓         ╔════╗&#xA;┃ request(PERMISSIONS.ANDROID.CAMERA) ┃         ║ NO ║&#xA;┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛         ╚════╝&#xA;                   │                               │&#xA;         Does the user accept                      │&#xA;            the request&amp;nbsp;?                          │&#xA;                   │           ╔════╗     Does the user check&#xA;                   ├───────────║ NO ║─────&#34;Never&amp;nbsp;ask&amp;nbsp;again&#34;&amp;nbsp;?&#xA;                   │           ╚════╝              │&#xA;                ╔═════╗                         ╔═════╗&#xA;                ║ YES ║                         ║ YES ║&#xA;                ╚═════╝                         ╚═════╝&#xA;                   │                               │&#xA;                   ▼                               ▼&#xA;          ┌─────────────────┐             ┌─────────────────┐&#xA;          │ RESULTS.GRANTED │             │ RESULTS.BLOCKED │&#xA;          └─────────────────┘             └─────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows flow&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓&#xA;   ┃ check(PERMISSIONS.WINDOWS.WEBCAM) ┃&#xA;   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&#xA;                     │&#xA;         Is the feature available&#xA;              on this device&amp;nbsp;?&#xA;                     │           ╔════╗&#xA;                     ├───────────║ NO ║──────────────┐&#xA;                     │           ╚════╝              │&#xA;                  ╔═════╗                            ▼&#xA;                  ║ YES ║                 ┌─────────────────────┐&#xA;                  ╚═════╝                 │ RESULTS.UNAVAILABLE │&#xA;                     │                    └─────────────────────┘&#xA;             Is the permission&#xA;               requestable&amp;nbsp;?&#xA;                     │           ╔════╗&#xA;                     ├───────────║ NO ║──────────────┐&#xA;                     │           ╚════╝              │&#xA;                  ╔═════╗                            ▼&#xA;                  ║ YES ║                  ┌───────────────────┐&#xA;                  ╚═════╝                  │ RESULTS.BLOCKED / │&#xA;                     │                     │  RESULTS.GRANTED  │&#xA;                     ▼                     └───────────────────┘&#xA;            ┌────────────────┐&#xA;            │ RESULTS.DENIED │&#xA;            └────────────────┘&#xA;                     │&#xA;                     ▼&#xA;  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓&#xA;  ┃ request(PERMISSIONS.WINDOWS.WEBCAM) ┃&#xA;  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&#xA;                     │&#xA;           Does the user accept&#xA;              the request&amp;nbsp;?&#xA;                     │           ╔════╗&#xA;                     ├───────────║ NO ║──────────────┐&#xA;                     │           ╚════╝              │&#xA;                  ╔═════╗                            ▼&#xA;                  ║ YES ║                   ┌─────────────────┐&#xA;                  ╚═════╝                   │ RESULTS.BLOCKED │&#xA;                     │                      └─────────────────┘&#xA;                     ▼&#xA;            ┌─────────────────┐&#xA;            │ RESULTS.GRANTED │&#xA;            └─────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;Supported permissions&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Android permissions&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {PERMISSIONS} from &#39;react-native-permissions&#39;;&#xA;&#xA;PERMISSIONS.ANDROID.ACCEPT_HANDOVER;&#xA;PERMISSIONS.ANDROID.ACCESS_BACKGROUND_LOCATION;&#xA;PERMISSIONS.ANDROID.ACCESS_COARSE_LOCATION;&#xA;PERMISSIONS.ANDROID.ACCESS_FINE_LOCATION;&#xA;PERMISSIONS.ANDROID.ACCESS_MEDIA_LOCATION;&#xA;PERMISSIONS.ANDROID.ACTIVITY_RECOGNITION;&#xA;PERMISSIONS.ANDROID.ADD_VOICEMAIL;&#xA;PERMISSIONS.ANDROID.ANSWER_PHONE_CALLS;&#xA;PERMISSIONS.ANDROID.BLUETOOTH_ADVERTISE;&#xA;PERMISSIONS.ANDROID.BLUETOOTH_CONNECT;&#xA;PERMISSIONS.ANDROID.BLUETOOTH_SCAN;&#xA;PERMISSIONS.ANDROID.BODY_SENSORS;&#xA;PERMISSIONS.ANDROID.CALL_PHONE;&#xA;PERMISSIONS.ANDROID.CAMERA;&#xA;PERMISSIONS.ANDROID.GET_ACCOUNTS;&#xA;PERMISSIONS.ANDROID.PROCESS_OUTGOING_CALLS;&#xA;PERMISSIONS.ANDROID.READ_CALENDAR;&#xA;PERMISSIONS.ANDROID.READ_CALL_LOG;&#xA;PERMISSIONS.ANDROID.READ_CONTACTS;&#xA;PERMISSIONS.ANDROID.READ_EXTERNAL_STORAGE;&#xA;PERMISSIONS.ANDROID.READ_PHONE_NUMBERS;&#xA;PERMISSIONS.ANDROID.READ_PHONE_STATE;&#xA;PERMISSIONS.ANDROID.READ_SMS;&#xA;PERMISSIONS.ANDROID.RECEIVE_MMS;&#xA;PERMISSIONS.ANDROID.RECEIVE_SMS;&#xA;PERMISSIONS.ANDROID.RECEIVE_WAP_PUSH;&#xA;PERMISSIONS.ANDROID.RECORD_AUDIO;&#xA;PERMISSIONS.ANDROID.SEND_SMS;&#xA;PERMISSIONS.ANDROID.USE_SIP;&#xA;PERMISSIONS.ANDROID.WRITE_CALENDAR;&#xA;PERMISSIONS.ANDROID.WRITE_CALL_LOG;&#xA;PERMISSIONS.ANDROID.WRITE_CONTACTS;&#xA;PERMISSIONS.ANDROID.WRITE_EXTERNAL_STORAGE;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;iOS permissions&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {PERMISSIONS} from &#39;react-native-permissions&#39;;&#xA;&#xA;PERMISSIONS.IOS.APP_TRACKING_TRANSPARENCY;&#xA;PERMISSIONS.IOS.BLUETOOTH_PERIPHERAL;&#xA;PERMISSIONS.IOS.CALENDARS;&#xA;PERMISSIONS.IOS.CAMERA;&#xA;PERMISSIONS.IOS.CONTACTS;&#xA;PERMISSIONS.IOS.FACE_ID;&#xA;PERMISSIONS.IOS.LOCATION_ALWAYS;&#xA;PERMISSIONS.IOS.LOCATION_WHEN_IN_USE;&#xA;PERMISSIONS.IOS.MEDIA_LIBRARY;&#xA;PERMISSIONS.IOS.MICROPHONE;&#xA;PERMISSIONS.IOS.MOTION;&#xA;PERMISSIONS.IOS.PHOTO_LIBRARY;&#xA;PERMISSIONS.IOS.PHOTO_LIBRARY_ADD_ONLY;&#xA;PERMISSIONS.IOS.REMINDERS;&#xA;PERMISSIONS.IOS.SIRI;&#xA;PERMISSIONS.IOS.SPEECH_RECOGNITION;&#xA;PERMISSIONS.IOS.STOREKIT;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Windows permissions&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {PERMISSIONS} from &#39;react-native-permissions&#39;;&#xA;&#xA;PERMISSIONS.WINDOWS.ACCESSORY_MANAGER;&#xA;PERMISSIONS.WINDOWS.ACTIVITY;&#xA;PERMISSIONS.WINDOWS.ALLOW_ELEVATION;&#xA;PERMISSIONS.WINDOWS.ALL_APP_MODS;&#xA;PERMISSIONS.WINDOWS.ALL_JOYN;&#xA;PERMISSIONS.WINDOWS.APPOINTMENTS;&#xA;PERMISSIONS.WINDOWS.APPOINTMENTS_SYSTEM;&#xA;PERMISSIONS.WINDOWS.APP_BROADCAST_SERVICES;&#xA;PERMISSIONS.WINDOWS.APP_CAPTURE_SERVICES;&#xA;PERMISSIONS.WINDOWS.APP_CAPTURE_SETTINGS;&#xA;PERMISSIONS.WINDOWS.APP_DIAGNOSTICS;&#xA;PERMISSIONS.WINDOWS.APP_LICENSING;&#xA;PERMISSIONS.WINDOWS.AUDIO_DEVICE_CONFIGURATION;&#xA;PERMISSIONS.WINDOWS.BACKGROUND_MEDIA_PLAYBACK;&#xA;PERMISSIONS.WINDOWS.BACKGROUND_MEDIA_RECORDING;&#xA;PERMISSIONS.WINDOWS.BACKGROUND_SPATIAL_PERCEPTION;&#xA;PERMISSIONS.WINDOWS.BACKGROUND_VOIP;&#xA;PERMISSIONS.WINDOWS.BLOCKED_CHAT_MESSAGES;&#xA;PERMISSIONS.WINDOWS.BLUETOOTH;&#xA;PERMISSIONS.WINDOWS.BROAD_FILE_SYSTEM_ACCESS;&#xA;PERMISSIONS.WINDOWS.CAMERA_PROCESSING_EXTENSION;&#xA;PERMISSIONS.WINDOWS.CELLULAR_DEVICE_CONTROL;&#xA;PERMISSIONS.WINDOWS.CELLULAR_DEVICE_IDENTITY;&#xA;PERMISSIONS.WINDOWS.CELLULAR_MESSAGING;&#xA;PERMISSIONS.WINDOWS.CHAT_SYSTEM;&#xA;PERMISSIONS.WINDOWS.CODE_GENERATION;&#xA;PERMISSIONS.WINDOWS.CONFIRM_APP_CLOSE;&#xA;PERMISSIONS.WINDOWS.CONTACTS;&#xA;PERMISSIONS.WINDOWS.CONTACTS_SYSTEM;&#xA;PERMISSIONS.WINDOWS.CORTANA_PERMISSIONS;&#xA;PERMISSIONS.WINDOWS.CORTANA_SPEECH_ACCESSORY;&#xA;PERMISSIONS.WINDOWS.CUSTOM_INSTALL_ACTIONS;&#xA;PERMISSIONS.WINDOWS.DEVELOPMENT_MODE_NETWORK;&#xA;PERMISSIONS.WINDOWS.DEVICE_MANAGEMENT_DM_ACCOUNT;&#xA;PERMISSIONS.WINDOWS.DEVICE_MANAGEMENT_EMAIL_ACCOUNT;&#xA;PERMISSIONS.WINDOWS.DEVICE_MANAGEMENT_FOUNDATION;&#xA;PERMISSIONS.WINDOWS.DEVICE_MANAGEMENT_WAP_SECURITY_POLICIES;&#xA;PERMISSIONS.WINDOWS.DEVICE_PORTAL_PROVIDER;&#xA;PERMISSIONS.WINDOWS.DEVICE_UNLOCK;&#xA;PERMISSIONS.WINDOWS.DOCUMENTS_LIBRARY;&#xA;PERMISSIONS.WINDOWS.DUAL_SIM_TILES;&#xA;PERMISSIONS.WINDOWS.EMAIL;&#xA;PERMISSIONS.WINDOWS.EMAIL_SYSTEM;&#xA;PERMISSIONS.WINDOWS.ENTERPRISE_AUTHENTICATION;&#xA;PERMISSIONS.WINDOWS.ENTERPRISE_CLOUD_S_S_O;&#xA;PERMISSIONS.WINDOWS.ENTERPRISE_DATA_POLICY;&#xA;PERMISSIONS.WINDOWS.ENTERPRISE_DEVICE_LOCKDOWN;&#xA;PERMISSIONS.WINDOWS.EXPANDED_RESOURCES;&#xA;PERMISSIONS.WINDOWS.EXTENDED_BACKGROUND_TASK_TIME;&#xA;PERMISSIONS.WINDOWS.EXTENDED_EXECUTION_BACKGROUND_AUDIO;&#xA;PERMISSIONS.WINDOWS.EXTENDED_EXECUTION_CRITICAL;&#xA;PERMISSIONS.WINDOWS.EXTENDED_EXECUTION_UNCONSTRAINED;&#xA;PERMISSIONS.WINDOWS.FIRST_SIGN_IN_SETTINGS;&#xA;PERMISSIONS.WINDOWS.GAME_BAR_SERVICES;&#xA;PERMISSIONS.WINDOWS.GAME_LIST;&#xA;PERMISSIONS.WINDOWS.GAME_MONITOR;&#xA;PERMISSIONS.WINDOWS.GAZE_INPUT;&#xA;PERMISSIONS.WINDOWS.GLOBAL_MEDIA_CONTROL;&#xA;PERMISSIONS.WINDOWS.HUMANINTERFACEDEVICE;&#xA;PERMISSIONS.WINDOWS.INPUT_FOREGROUND_OBSERVATION;&#xA;PERMISSIONS.WINDOWS.INPUT_INJECTION_BROKERED;&#xA;PERMISSIONS.WINDOWS.INPUT_OBSERVATION;&#xA;PERMISSIONS.WINDOWS.INPUT_SUPPRESSION;&#xA;PERMISSIONS.WINDOWS.INTERNET_CLIENT;&#xA;PERMISSIONS.WINDOWS.INTERNET_CLIENT_SERVER;&#xA;PERMISSIONS.WINDOWS.INTEROP_SERVICES;&#xA;PERMISSIONS.WINDOWS.IOT;&#xA;PERMISSIONS.WINDOWS.LOCAL_SYSTEM_SERVICES;&#xA;PERMISSIONS.WINDOWS.LOCATION;&#xA;PERMISSIONS.WINDOWS.LOCATION_HISTORY;&#xA;PERMISSIONS.WINDOWS.LOCATION_SYSTEM;&#xA;PERMISSIONS.WINDOWS.LOW_LEVEL;&#xA;PERMISSIONS.WINDOWS.LOW_LEVEL_DEVICES;&#xA;PERMISSIONS.WINDOWS.MICROPHONE;&#xA;PERMISSIONS.WINDOWS.MOBILE;&#xA;PERMISSIONS.WINDOWS.MODIFIABLE_APP;&#xA;PERMISSIONS.WINDOWS.MUSIC_LIBRARY;&#xA;PERMISSIONS.WINDOWS.NETWORKING_VPN_PROVIDER;&#xA;PERMISSIONS.WINDOWS.NETWORK_CONNECTION_MANAGER_PROVISIONING;&#xA;PERMISSIONS.WINDOWS.NETWORK_DATA_PLAN_PROVISIONING;&#xA;PERMISSIONS.WINDOWS.NETWORK_DATA_USAGE_MANAGEMENT;&#xA;PERMISSIONS.WINDOWS.OEM_DEPLOYMENT;&#xA;PERMISSIONS.WINDOWS.OEM_PUBLIC_DIRECTORY;&#xA;PERMISSIONS.WINDOWS.ONE_PROCESS_VOIP;&#xA;PERMISSIONS.WINDOWS.OPTICAL;&#xA;PERMISSIONS.WINDOWS.PACKAGED_SERVICES;&#xA;PERMISSIONS.WINDOWS.PACKAGES_SERVICES;&#xA;PERMISSIONS.WINDOWS.PACKAGE_MANAGEMENT;&#xA;PERMISSIONS.WINDOWS.PACKAGE_POLICY_SYSTEM;&#xA;PERMISSIONS.WINDOWS.PACKAGE_QUERY;&#xA;PERMISSIONS.WINDOWS.PACKAGE_WRITE_REDIRECTION_COMPATIBILITY_SHIM;&#xA;PERMISSIONS.WINDOWS.PHONE_CALL;&#xA;PERMISSIONS.WINDOWS.PHONE_CALL_HISTORY;&#xA;PERMISSIONS.WINDOWS.PHONE_CALL_HISTORY_SYSTEM;&#xA;PERMISSIONS.WINDOWS.PHONE_LINE_TRANSPORT_MANAGEMENT;&#xA;PERMISSIONS.WINDOWS.PICTURES_LIBRARY;&#xA;PERMISSIONS.WINDOWS.POINT_OF_SERVICE;&#xA;PERMISSIONS.WINDOWS.PREVIEW_INK_WORKSPACE;&#xA;PERMISSIONS.WINDOWS.PREVIEW_PEN_WORKSPACE;&#xA;PERMISSIONS.WINDOWS.PREVIEW_STORE;&#xA;PERMISSIONS.WINDOWS.PREVIEW_UI_COMPOSITION;&#xA;PERMISSIONS.WINDOWS.PRIVATE_NETWORK_CLIENT_SERVER;&#xA;PERMISSIONS.WINDOWS.PROTECTED_APP;&#xA;PERMISSIONS.WINDOWS.PROXIMITY;&#xA;PERMISSIONS.WINDOWS.RADIOS;&#xA;PERMISSIONS.WINDOWS.RECORDED_CALLS_FOLDER;&#xA;PERMISSIONS.WINDOWS.REMOTE_PASSPORT_AUTHENTICATION;&#xA;PERMISSIONS.WINDOWS.REMOTE_SYSTEM;&#xA;PERMISSIONS.WINDOWS.REMOVABLE_STORAGE;&#xA;PERMISSIONS.WINDOWS.RESCAP;&#xA;PERMISSIONS.WINDOWS.RUN_FULL_TRUST;&#xA;PERMISSIONS.WINDOWS.SCREEN_DUPLICATION;&#xA;PERMISSIONS.WINDOWS.SECONDARY_AUTHENTICATION_FACTOR;&#xA;PERMISSIONS.WINDOWS.SECURE_ASSESSMENT;&#xA;PERMISSIONS.WINDOWS.SERIALCOMMUNICATION;&#xA;PERMISSIONS.WINDOWS.SHARED_USER_CERTIFICATES;&#xA;PERMISSIONS.WINDOWS.SLAPI_QUERY_LICENSE_VALUE;&#xA;PERMISSIONS.WINDOWS.SMBIOS;&#xA;PERMISSIONS.WINDOWS.SMS_SEND;&#xA;PERMISSIONS.WINDOWS.SPATIAL_PERCEPTION;&#xA;PERMISSIONS.WINDOWS.START_SCREEN_MANAGEMENT;&#xA;PERMISSIONS.WINDOWS.STORE_LICENSE_MANAGEMENT;&#xA;PERMISSIONS.WINDOWS.SYSTEM_MANAGEMENT;&#xA;PERMISSIONS.WINDOWS.TARGETED_CONTENT;&#xA;PERMISSIONS.WINDOWS.TEAM_EDITION_DEVICE_CREDENTIAL;&#xA;PERMISSIONS.WINDOWS.TEAM_EDITION_EXPERIENCE;&#xA;PERMISSIONS.WINDOWS.TEAM_EDITION_VIEW;&#xA;PERMISSIONS.WINDOWS.UAP;&#xA;PERMISSIONS.WINDOWS.UI_AUTOMATION;&#xA;PERMISSIONS.WINDOWS.UNVIRTUALIZED_RESOURCES;&#xA;PERMISSIONS.WINDOWS.USB;&#xA;PERMISSIONS.WINDOWS.USER_ACCOUNT_INFORMATION;&#xA;PERMISSIONS.WINDOWS.USER_DATA_ACCOUNTS_PROVIDER;&#xA;PERMISSIONS.WINDOWS.USER_DATA_SYSTEM;&#xA;PERMISSIONS.WINDOWS.USER_PRINCIPAL_NAME;&#xA;PERMISSIONS.WINDOWS.USER_SYSTEM_ID;&#xA;PERMISSIONS.WINDOWS.VIDEOS_LIBRARY;&#xA;PERMISSIONS.WINDOWS.VOIP_CALL;&#xA;PERMISSIONS.WINDOWS.WALLET_SYSTEM;&#xA;PERMISSIONS.WINDOWS.WEBCAM;&#xA;PERMISSIONS.WINDOWS.WIFI_CONTROL;&#xA;PERMISSIONS.WINDOWS.XBOX_ACCESSORY_MANAGEMENT;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Permissions statuses&lt;/h3&gt; &#xA;&lt;p&gt;Permission checks and requests resolve into one of these statuses:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Return value&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RESULTS.UNAVAILABLE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This feature is not available (on this device / in this context)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RESULTS.DENIED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The permission has not been requested / is denied but requestable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RESULTS.GRANTED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The permission is granted&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RESULTS.LIMITED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The permission is granted but with limitations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RESULTS.BLOCKED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The permission is denied and not requestable anymore&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// type used in usage examples&#xA;type PermissionStatus = &#39;unavailable&#39; | &#39;denied&#39; | &#39;limited&#39; | &#39;granted&#39; | &#39;blocked&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;check&lt;/h4&gt; &#xA;&lt;p&gt;Check one permission status.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function check(permission: string): Promise&amp;lt;PermissionStatus&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {check, PERMISSIONS, RESULTS} from &#39;react-native-permissions&#39;;&#xA;&#xA;check(PERMISSIONS.IOS.LOCATION_ALWAYS)&#xA;  .then((result) =&amp;gt; {&#xA;    switch (result) {&#xA;      case RESULTS.UNAVAILABLE:&#xA;        console.log(&#39;This feature is not available (on this device / in this context)&#39;);&#xA;        break;&#xA;      case RESULTS.DENIED:&#xA;        console.log(&#39;The permission has not been requested / is denied but requestable&#39;);&#xA;        break;&#xA;      case RESULTS.LIMITED:&#xA;        console.log(&#39;The permission is limited: some actions are possible&#39;);&#xA;        break;&#xA;      case RESULTS.GRANTED:&#xA;        console.log(&#39;The permission is granted&#39;);&#xA;        break;&#xA;      case RESULTS.BLOCKED:&#xA;        console.log(&#39;The permission is denied and not requestable anymore&#39;);&#xA;        break;&#xA;    }&#xA;  })&#xA;  .catch((error) =&amp;gt; {&#xA;    // …&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;request&lt;/h4&gt; &#xA;&lt;p&gt;Request one permission.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type Rationale = {&#xA;  title: string;&#xA;  message: string;&#xA;  buttonPositive?: string;&#xA;  buttonNegative?: string;&#xA;  buttonNeutral?: string;&#xA;};&#xA;&#xA;function request(permission: string, rationale?: Rationale): Promise&amp;lt;PermissionStatus&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {request, PERMISSIONS} from &#39;react-native-permissions&#39;;&#xA;&#xA;request(PERMISSIONS.IOS.LOCATION_ALWAYS).then((result) =&amp;gt; {&#xA;  // …&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;checkNotifications&lt;/h4&gt; &#xA;&lt;p&gt;Check notifications permission status and get notifications settings values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type NotificationSettings = {&#xA;  // properties only available on iOS&#xA;  // unavailable settings will not be included in the response object&#xA;  alert?: boolean;&#xA;  badge?: boolean;&#xA;  sound?: boolean;&#xA;  carPlay?: boolean;&#xA;  criticalAlert?: boolean;&#xA;  provisional?: boolean;&#xA;  providesAppSettings?: boolean;&#xA;  lockScreen?: boolean;&#xA;  notificationCenter?: boolean;&#xA;};&#xA;&#xA;function checkNotifications(): Promise&amp;lt;{&#xA;  status: PermissionStatus;&#xA;  settings: NotificationSettings;&#xA;}&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {checkNotifications} from &#39;react-native-permissions&#39;;&#xA;&#xA;checkNotifications().then(({status, settings}) =&amp;gt; {&#xA;  // …&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;requestNotifications&lt;/h4&gt; &#xA;&lt;p&gt;Request notifications permission status and get notifications settings values.&lt;/p&gt; &#xA;&lt;p&gt;You cannot request notifications permissions on Windows. Disabling or enabling notifications can only be done through the App Settings. You cannot request notifications permissions on Android. &lt;code&gt;requestNotifications&lt;/code&gt; is the same than &lt;code&gt;checkNotifications&lt;/code&gt; on this platform.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// only used on iOS&#xA;type NotificationOption =&#xA;  | &#39;alert&#39;&#xA;  | &#39;badge&#39;&#xA;  | &#39;sound&#39;&#xA;  | &#39;criticalAlert&#39;&#xA;  | &#39;carPlay&#39;&#xA;  | &#39;provisional&#39;&#xA;  | &#39;providesAppSettings&#39;;&#xA;&#xA;type NotificationSettings = {&#xA;  // properties only available on iOS&#xA;  // unavailable settings will not be included in the response object&#xA;  alert?: boolean;&#xA;  badge?: boolean;&#xA;  sound?: boolean;&#xA;  carPlay?: boolean;&#xA;  criticalAlert?: boolean;&#xA;  provisional?: boolean;&#xA;  providesAppSettings?: boolean;&#xA;  lockScreen?: boolean;&#xA;  notificationCenter?: boolean;&#xA;};&#xA;&#xA;function requestNotifications(options: NotificationOption[]): Promise&amp;lt;{&#xA;  status: PermissionStatus;&#xA;  settings: NotificationSettings;&#xA;}&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {requestNotifications} from &#39;react-native-permissions&#39;;&#xA;&#xA;requestNotifications([&#39;alert&#39;, &#39;sound&#39;]).then(({status, settings}) =&amp;gt; {&#xA;  // …&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;checkMultiple&lt;/h4&gt; &#xA;&lt;p&gt;Check multiples permissions in parallel.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function checkMultiple&amp;lt;P extends Permission[]&amp;gt;(&#xA;  permissions: P,&#xA;): Promise&amp;lt;Record&amp;lt;P[number], PermissionStatus&amp;gt;&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {checkMultiple, PERMISSIONS} from &#39;react-native-permissions&#39;;&#xA;&#xA;checkMultiple([PERMISSIONS.IOS.CAMERA, PERMISSIONS.IOS.FACE_ID]).then((statuses) =&amp;gt; {&#xA;  console.log(&#39;Camera&#39;, statuses[PERMISSIONS.IOS.CAMERA]);&#xA;  console.log(&#39;FaceID&#39;, statuses[PERMISSIONS.IOS.FACE_ID]);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;requestMultiple&lt;/h4&gt; &#xA;&lt;p&gt;Request multiple permissions in sequence.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function requestMultiple&amp;lt;P extends Permission[]&amp;gt;(&#xA;  permissions: P,&#xA;): Promise&amp;lt;Record&amp;lt;P[number], PermissionStatus&amp;gt;&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {requestMultiple, PERMISSIONS} from &#39;react-native-permissions&#39;;&#xA;&#xA;requestMultiple([PERMISSIONS.IOS.CAMERA, PERMISSIONS.IOS.FACE_ID]).then((statuses) =&amp;gt; {&#xA;  console.log(&#39;Camera&#39;, statuses[PERMISSIONS.IOS.CAMERA]);&#xA;  console.log(&#39;FaceID&#39;, statuses[PERMISSIONS.IOS.FACE_ID]);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;openSettings&lt;/h4&gt; &#xA;&lt;p&gt;Open application settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function openSettings(): Promise&amp;lt;void&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {openSettings} from &#39;react-native-permissions&#39;;&#xA;&#xA;openSettings().catch(() =&amp;gt; console.warn(&#39;cannot open settings&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;openLimitedPhotoLibraryPicker (iOS 14+)&lt;/h4&gt; &#xA;&lt;p&gt;Open a picker to update the photo selection when &lt;code&gt;PhotoLibrary&lt;/code&gt; permission is &lt;code&gt;limited&lt;/code&gt;. This will reject if unsupported or if full permission is already &lt;code&gt;granted&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function openLimitedPhotoLibraryPicker(): Promise&amp;lt;void&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {openLimitedPhotoLibraryPicker} from &#39;react-native-permissions&#39;;&#xA;&#xA;openLimitedPhotoLibraryPicker().catch(() =&amp;gt; {&#xA;  console.warn(&#39;Cannot open photo library picker&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;checkLocationAccuracy (iOS 14+)&lt;/h4&gt; &#xA;&lt;p&gt;When &lt;code&gt;LocationAlways&lt;/code&gt; or &lt;code&gt;LocationWhenInUse&lt;/code&gt; is &lt;code&gt;granted&lt;/code&gt;, allow checking if the user share his precise location.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type LocationAccuracy = &#39;full&#39; | &#39;reduced&#39;;&#xA;&#xA;function checkLocationAccuracy(): Promise&amp;lt;LocationAccuracy&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {checkLocationAccuracy} from &#39;react-native-permissions&#39;;&#xA;&#xA;checkLocationAccuracy()&#xA;  .then((accuracy) =&amp;gt; console.log(`Location accuracy is: ${accuracy}`))&#xA;  .catch(() =&amp;gt; console.warn(&#39;Cannot check location accuracy&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;requestLocationAccuracy (iOS 14+)&lt;/h4&gt; &#xA;&lt;p&gt;When &lt;code&gt;LocationAlways&lt;/code&gt; or &lt;code&gt;LocationWhenInUse&lt;/code&gt; is &lt;code&gt;granted&lt;/code&gt;, allow requesting the user for his precise location. Will resolve immediately if &lt;code&gt;full&lt;/code&gt; accuracy is already authorized.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type LocationAccuracyOptions = {&#xA;  purposeKey: string;&#xA;};&#xA;&#xA;type LocationAccuracy = &#39;full&#39; | &#39;reduced&#39;;&#xA;&#xA;function requestLocationAccuracy(options: LocationAccuracyOptions): Promise&amp;lt;LocationAccuracy&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {requestLocationAccuracy} from &#39;react-native-permissions&#39;;&#xA;&#xA;requestLocationAccuracy({purposeKey: &#39;YOUR-PURPOSE-KEY&#39;})&#xA;  .then((accuracy) =&amp;gt; console.log(`Location accuracy is: ${accuracy}`))&#xA;  .catch(() =&amp;gt; console.warn(&#39;Cannot request location accuracy&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;About iOS &lt;code&gt;LOCATION_ALWAYS&lt;/code&gt; permission&lt;/h3&gt; &#xA;&lt;p&gt;If you are requesting &lt;code&gt;PERMISSIONS.IOS.LOCATION_ALWAYS&lt;/code&gt;, there won&#39;t be a &lt;code&gt;Always Allow&lt;/code&gt; button in the system dialog. Only &lt;code&gt;Allow Once&lt;/code&gt;, &lt;code&gt;Allow While Using App&lt;/code&gt; and &lt;code&gt;Don&#39;t Allow&lt;/code&gt;. This is expected behaviour, check the &lt;a href=&#34;https://developer.apple.com/documentation/corelocation/cllocationmanager/1620551-requestalwaysauthorization#3578736&#34;&gt;Apple Developer Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When requesting &lt;code&gt;PERMISSIONS.IOS.LOCATION_ALWAYS&lt;/code&gt;, if the user choose &lt;code&gt;Allow While Using App&lt;/code&gt;, a provisional &#34;always&#34; status will be granted. The user will see &lt;code&gt;While Using&lt;/code&gt; in the settings and later will be informed that your app is using the location in background. That looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/e8357168f4c8e754adfd940fc065520de838a21a80001839d5e740c18893ec67/68747470733a2f2f636d732e717a2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031392f30392f696f732d31332d6c6f636174696f6e732d7465736c612d31393230783938322e6a70673f7175616c6974793d37352673747269703d616c6c26773d3132303026683d3930302663726f703d31&#34; alt=&#34;alt text&#34; title=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Subsequently, if you are requesting &lt;code&gt;LOCATION_ALWAYS&lt;/code&gt; permission, there is no need to request &lt;code&gt;LOCATION_WHEN_IN_USE&lt;/code&gt;. If the user accepts, &lt;code&gt;LOCATION_WHEN_IN_USE&lt;/code&gt; will be granted too. If the user denies, &lt;code&gt;LOCATION_WHEN_IN_USE&lt;/code&gt; will be denied too.&lt;/p&gt; &#xA;&lt;h3&gt;How to request &#34;App Tracking Transparency&#34; permission on iOS&lt;/h3&gt; &#xA;&lt;p&gt;Since iOS 15.0, it&#39;s impossible to request this this permission if the app isn&#39;t &lt;code&gt;active&lt;/code&gt; (see &lt;a href=&#34;https://github.com/zoontek/react-native-permissions/issues/648&#34;&gt;#648&lt;/a&gt;). A good solution is to use &lt;code&gt;AppState&lt;/code&gt; to make sure this is the case:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;useEffect(() =&amp;gt; {&#xA;  const listener = AppState.addEventListener(&#39;change&#39;, (status) =&amp;gt; {&#xA;    if (Platform.OS === &#39;ios&#39; &amp;amp;&amp;amp; status === &#39;active&#39;) {&#xA;      request(PERMISSIONS.IOS.APP_TRACKING_TRANSPARENCY)&#xA;        .then((result) =&amp;gt; console.log(result))&#xA;        .catch((error) =&amp;gt; console.log(error));&#xA;    }&#xA;  });&#xA;&#xA;  return listener.remove;&#xA;}, []);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing with Jest&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t already have a Jest setup file configured, please add the following to your Jest configuration file and create the new &lt;code&gt;jest.setup.js&lt;/code&gt; file in project root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setupFiles: [&#39;&amp;lt;rootDir&amp;gt;/jest.setup.js&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then add the following line to that setup file to mock the &lt;code&gt;NativeModule.RNPermissions&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;jest.mock(&#39;react-native-permissions&#39;, () =&amp;gt; require(&#39;react-native-permissions/mock&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>johnno1962/InjectionIII</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/johnno1962/InjectionIII</id>
    <link href="https://github.com/johnno1962/InjectionIII" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Re-write of Injection for Xcode in (mostly) Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;InjectionIII - overdue Swift rewrite of InjectionForXcode&lt;/h1&gt; &#xA;&lt;p&gt;Chinese language README &amp;amp; Tutorial: &lt;a href=&#34;https://github.com/johnno1962/InjectionIII/raw/main/README_Chinese.md&#34;&gt;中文集成指南&lt;/a&gt;，&lt;a href=&#34;https://juejin.cn/post/6990285526901522463&#34;&gt;掘金教程&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://johnholdsworth.com/Syringe_128.png&#34; alt=&#34;Icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Code injection allows you to update the implementation of functions and any method of a class, struct or enum incrementally in the iOS simulator without having to rebuild or restart your application. This saves the developer a significant amount of time tweaking code or iterating over a design. This start-over implementation of &lt;a href=&#34;https://github.com/johnno1962/injectionforxcode&#34;&gt;Injection for Xcode&lt;/a&gt; has been built into a standalone app: &lt;code&gt;InjectionIII.app&lt;/code&gt; which runs in the status bar and is &lt;a href=&#34;https://itunes.apple.com/app/injectioniii/id1380446739?mt=12&#34;&gt;available from the Mac App Store&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stop Press:&lt;/strong&gt; The functionality of InjectionIII is now available as a Swift Package in the &lt;a href=&#34;https://github.com/johnno1962/HotReloading&#34;&gt;HotReloading Project&lt;/a&gt; which also supports dynamic code updates on a device. No need to download the app, just add this project to yours and add a short &#34;Run Script&#34; &#34;Build Phase&#34; as described in the README.md. &lt;em&gt;Do not release your app with the HotReloading package included!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This README includes descriptions of some newer features that are only available in more recent releases of the InjectionIII.app &lt;a href=&#34;https://github.com/johnno1962/InjectionIII/releases&#34;&gt;available on github&lt;/a&gt;. You should use one of these releases for Apple Silicon or if you have upgraded to macOS Monterey or Xcode 13.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://johnholdsworth.com/InjectionUI.gif&#34; alt=&#34;Icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;InjectionIII.app&lt;/code&gt; needs an Xcode 10.2 or greater at the path &lt;code&gt;/Applications/Xcode.app&lt;/code&gt; , works for &lt;code&gt;Swift&lt;/code&gt;, &lt;code&gt;Objective-C&lt;/code&gt; and since 3.2.2 &lt;code&gt;C++&lt;/code&gt; and can be used alongside &lt;a href=&#34;https://www.jetbrains.com/help/objc/create-a-swiftui-application.html&#34;&gt;AppCode&lt;/a&gt; or by using the &lt;a href=&#34;https://github.com/johnno1962/InjectionIII/raw/master/AppCodePlugin/INSTALL.md&#34;&gt;AppCode Plugin&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;To understand how InjectionIII works and the techniques it uses consult the book &lt;a href=&#34;http://books.apple.com/us/book/id1551005489&#34;&gt;Swift Secrets&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Managing Expectations&lt;/h3&gt; &#xA;&lt;p&gt;By rights, InjectionIII shouldn&#39;t work and this seems to be a common perception for those who haven&#39;t actually tried it and yet it does. It relies on documented features of Apple&#39;s dynamic linker which have proven to be reliable for over a year now. That said, you can&#39;t just inject &lt;em&gt;any&lt;/em&gt; source file. For example, it&#39;s best not to try to inject a file containing a protocol definition. Keep in mind though the worst case is that your application might crash during debugging and you&#39;ll have to restart it as you would have had to anyway. Gaining trust in the changes you can inject builds with experience and with it, the amount of time you save. The &lt;code&gt;iOSInjection.bundle&lt;/code&gt; is only loaded during development in the simulator and cannot affect your application when it is deployed into production.&lt;/p&gt; &#xA;&lt;p&gt;Always remember to add &lt;code&gt;&#34;Other Linker Flags&#34;&lt;/code&gt;, &lt;code&gt;&#34;-Xlinker -interposable&#34;&lt;/code&gt; to your project or due to details of how a method is dispatched you may find InjectionIII half works for classes and classes and not for structs. Also, go easy on access control. For example, InjectionIII is unable to inject methods in a private extension as the symbols are not exported to the object file.&lt;/p&gt; &#xA;&lt;p&gt;To reason about your app while you are using injection, separate data and program in your mind. You can&#39;t inject changes to the way data is laid out in memory by adding properties or methods on the fly but apart from that exchanging method implementations is performed on the main thread and generally reliable. A common question for new users is: I injected a new version of the code, why can&#39;t I see the changes on the screen? To have effect, the new code needs to be actually executed and it&#39;s up to the user to use either an &lt;code&gt;@objc func injected()&lt;/code&gt; method or a notification to reload a view controller or refresh a table view to see changes or perform some user action that forces a redisplay.&lt;/p&gt; &#xA;&lt;p&gt;If you try InjectionIII and you think it doesn&#39;t work, please, please file an issue so we can either explain what is going on, improve the documentation or try to resolve the particular edge case you have encountered. The project is quite mature now and provided you&#39;re holding it correctly and don&#39;t ask too much of it, it should &#34;just work&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;To use injection, download the app from the App Store and run it. Then, you need to add &#34;-Xlinker -interposable&#34; (without the double quotes) to the &#34;Other Linker Flags&#34; of all targets in your project for the Debug configuration (qualified by the simulator SDK to avoid complications with bitcode). Finally, add one of the following to your application delegate&#39;s &lt;code&gt;applicationDidFinishLaunching:&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Xcode 10.2 and later (Swift 5+):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;#if DEBUG&#xA;Bundle(path: &#34;/Applications/InjectionIII.app/Contents/Resources/iOSInjection.bundle&#34;)?.load()&#xA;//for tvOS:&#xA;Bundle(path: &#34;/Applications/InjectionIII.app/Contents/Resources/tvOSInjection.bundle&#34;)?.load()&#xA;//Or for macOS:&#xA;Bundle(path: &#34;/Applications/InjectionIII.app/Contents/Resources/macOSInjection.bundle&#34;)?.load()&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding one of these lines loads a bundle included in the &lt;code&gt;InjectionIII.app&lt;/code&gt;&#39;s resources which connects over a localhost socket to the InjectionIII app which runs on the task bar. Once injection is connected, you&#39;ll be prompted to select the directory containing the project file for the app you wish to inject. This starts a &lt;code&gt;file watcher&lt;/code&gt; for that directory inside the Mac app so whenever you save to disk a Swift (or Objective-C) source in the project, the target app is messaged through the socket to compile, link, dynamically load and update the implementation of methods in the file being injected.&lt;/p&gt; &#xA;&lt;p&gt;If your project is organised across multiple directories or the project file is not at the root of the source tree you can add other directories to be watched for file changes using the &#34;Add Directory&#34; menu item. This list resets when you select a new project.&lt;/p&gt; &#xA;&lt;p&gt;The file watcher can be disabled &amp;amp; enabled while the app is running using the status bar menu. While the file watcher is disabled you can still force injections through manually using a hotkey &lt;code&gt;ctrl-=&lt;/code&gt; (remember to save the file first!)&lt;/p&gt; &#xA;&lt;p&gt;If you inject a subclass of &lt;code&gt;XCTest&lt;/code&gt; InjectionIII will try running that individual test inside your application provided has been compiled at some time in the past and doesn&#39;t require test specific support code. If the menu item &#34;Enable TDD&#34; is enabled, when you inject a file InjectionIII will search for test sources containing that filename, inject them and run the test.&lt;/p&gt; &#xA;&lt;p&gt;You can detect when a &lt;em&gt;class&lt;/em&gt; has been injected in your code (to reload a view controller for example) by adding an &lt;code&gt;@objc func injected()&lt;/code&gt; class or instance method. The instance &lt;code&gt;@objc func injected()&lt;/code&gt; method relies on a &#34;sweep&#34; of all objects in your application to find those of the class you have just injected which can be unreliable when using &lt;code&gt;unowned&lt;/code&gt; instance variables. If you encounter problems, remove the injected() method and subscribe to the &lt;code&gt;&#34;INJECTION_BUNDLE_NOTIFICATION&#34;&lt;/code&gt; instead along the lines of the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;NotificationCenter.default.addObserver(self,&#xA;    selector: #selector(configureView),&#xA;    name: Notification.Name(&#34;INJECTION_BUNDLE_NOTIFICATION&#34;), object: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Included in this release is &#34;Xprobe&#34; which allows you to browse and inspect the objects in your application through a web-like interface and execute code against them. Enter text into the search textfield to locate objects quickly by class name.&lt;/p&gt; &#xA;&lt;p&gt;If you want to build this project from source (which you may need to do to use injection with macOS apps) you&#39;ll need to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/johnno1962/InjectionIII --recurse-submodules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To replicate one of the &lt;a href=&#34;https://github.com/johnno1962/InjectionIII/releases&#34;&gt;github releases&lt;/a&gt;, turn the App sandbox off in the entitlements file.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking to understand how the app works it&#39;s magic, it&#39;s not a short story but the staring point is the &lt;a href=&#34;https://raw.githubusercontent.com/johnno1962/InjectionIII/main/ROADMAP.md&#34;&gt;ROADMAP.md&lt;/a&gt; file in this repo.&lt;/p&gt; &#xA;&lt;h3&gt;Available downloads&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Xcode 10.2+&lt;/th&gt; &#xA;   &lt;th&gt;Monterey &amp;amp; Xcode 13&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://itunes.apple.com/app/injectioniii/id1380446739?mt=12&#34;&gt;Mac app store&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/johnno1962/InjectionIII/releases&#34;&gt;Github Releases&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Variations on using the InjectionIII app:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/app/injectioniii/id1380446739?mt=12&#34;&gt;App Store version&lt;/a&gt;: load the injection bundle and you can perform code injection in the simulator.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/johnno1962/InjectionIII/releases&#34;&gt;Binary Releases&lt;/a&gt;: These are often slightly more up to date than the App Store release and compile outside the App sandbox which avoids compilcations with case insensitve filesystems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/johnno1962/HotReloading&#34;&gt;HotReloading Project&lt;/a&gt;: A version of InjectionIII that works just by adding this Swift Package to your project (and adding the -interposable linker flag). See the repo README for details. Remember not to leave this package configured into your project for a release build or it will bloat your app binary!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;On-Device Injection&lt;/strong&gt;: Instead of loading the &lt;code&gt;iOSInjection.bundle&lt;/code&gt;, add the &lt;a href=&#34;https://github.com/johnno1962/HotReloading&#34;&gt;HotReloading&lt;/a&gt; Swift Package to your project and add a &#34;Build Phase&#34; in the README to run the &lt;code&gt;injectiond&lt;/code&gt; daemon version of the InjectionIII.app and you should be able to perform injection on a iOS or tvOS device. For more detail and the limitations of this new feature, see the README of the &lt;a href=&#34;https://github.com/johnno1962/HotReloading&#34;&gt;HotReloading&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h3&gt;Limitations/FAQ&lt;/h3&gt; &#xA;&lt;p&gt;New releases of InjectionIII use a &lt;a href=&#34;http://johnholdsworth.com/dyld_dynamic_interpose.html&#34;&gt;different patching technique&lt;/a&gt; than previous versions in that you can now update the implementations of class, struct and enum methods (final or not) provided they have not been inlined which shouldn&#39;t be the case for a debug build. You can&#39;t however alter the layout of a class or struct in the course of an injection i.e. add or rearrange properties with storage or add or move methods of a non-final class or your app will likely crash. Also, see the notes below for injecting &lt;code&gt;SwiftUI&lt;/code&gt; views and how they require type erasure.&lt;/p&gt; &#xA;&lt;p&gt;If you have a complex project including Objective-C or C dependancies, using the &lt;code&gt;-interposable&lt;/code&gt; flag may provoke undefined symbols or the following error on linking:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Can&#39;t find ordinal for imported symbol for architecture x86_64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If this is the case, add the following additional &#34;Other linker Flags&#34; and it should go away.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-Xlinker -undefined -Xlinker dynamic_lookup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a project using extensive bridging &amp;amp; Objective-C it&#39;s recommended to use one of the &lt;a href=&#34;https://github.com/johnno1962/InjectionIII/releases&#34;&gt;binary github releases&lt;/a&gt; that have the sandbox turned off. This is because the App Store version operates in a case sensitive file system which can create problems if filenames in your project do not have the identical casing as the actual filename on disk.&lt;/p&gt; &#xA;&lt;p&gt;If you inject code which calls a function with default arguments you may get an error starting as follows reporting an undefined symbol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;💉 *** dlopen() error: dlopen(/var/folders/nh/gqmp6jxn4tn2tyhwqdcwcpkc0000gn/T/com.johnholdsworth.InjectionIII/eval101.dylib, 2): Symbol not found: _$s13TestInjection15QTNavigationRowC4text10detailText4icon6object13customization6action21accessoryButtonActionACyxGSS_AA08QTDetailG0OAA6QTIconOSgypSgySo15UITableViewCellC_AA5QTRow_AA0T5StyleptcSgyAaT_pcSgAWtcfcfA1_&#xA; Referenced from: /var/folders/nh/gqmp6jxn4tn2tyhwqdcwcpkc0000gn/T/com.johnholdsworth.InjectionIII/eval101.dylib&#xA; Expected in: flat namespace&#xA;in /var/folders/nh/gqmp6jxn4tn2tyhwqdcwcpkc0000gn/T/com.johnholdsworth.InjectionIII/eval101.dylib ***&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter this problem, restart your app and you should find this issue disappears due to a background task &lt;a href=&#34;https://github.com/johnno1962/unhide&#34;&gt;unhide&lt;/a&gt; which is integrated into InjectionIII.&lt;/p&gt; &#xA;&lt;p&gt;As injection needs to know how to compile Swift files individually it is not compatible with building using &lt;code&gt;Whole Module Optimisation&lt;/code&gt;. A workaround for this is to build with &lt;code&gt;WMO&lt;/code&gt; switched off so there are logs of individual compiles available then switching &lt;code&gt;WMO&lt;/code&gt; back on if it suits your workflow better.&lt;/p&gt; &#xA;&lt;h3&gt;Resolving issues&lt;/h3&gt; &#xA;&lt;p&gt;Versions &amp;gt; 4.1.1 of InjectionIII have the following environment variables that can be added to your Xcode launch scheme to customise its behavour or to get a better idea what InjectionIII is doing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;INJECTION_PRESERVE_STATICS&lt;/strong&gt; This allows you to decide whether top level variables and static member should be re-initialised if they are in a file that is injected or they should retain their values.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;INJECTION_DYNAMIC_CAST&lt;/strong&gt; This allows you to opt into a slightly more speculative fix for when you dynamic cast (as? in Swift) to a type which has been injected and therefore its type identifier may have changed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;INJECTION_DETAIL&lt;/strong&gt; Providing any value for this variable in the your scheme will produce detailed output of how InjectionIII is stitching your new implementations into your application. &#34;Swizzling&#34; is the legacy Objective-C way of rebinding symbols though the runtime API. &#34;Patching&#34; is where the &#34;vtable&#34; of a class is overridden to rebind non-final methods to their new dynamically loaded implementation. &#34;Interposing&#34; uses a low level dynamic linker feature to effectively re-link call sites to the newly loaded versions (provided the &#34;-Xlinker -interposable&#34; &#34;Other Linker Flag&#34; build setting has been supplied).&lt;/p&gt; &#xA;&lt;p&gt;In order to implement the &lt;code&gt;@objc func injected()&lt;/code&gt; call to your class when an instance is injected, a sweep of all live objects in your app is performed. This has two limitations. The instance needs to be &#34;seen&#34; by a reference to a reference to a reference from an initial set of seed instances e.g. appDelegate, rootViewController. Secondly, technically this is ambitious and can crash for some app states or if you use &lt;code&gt;unowned&lt;/code&gt; properties. If you encounter this, provide a value for the environment variable &lt;strong&gt;INJECTION_SWEEP_DETAIL&lt;/strong&gt; and, as it sweeps it will print the type name of the object about to be swept. If you see a crash, from version 3.2.2 you can exclude the type shown just before the crash using the &lt;strong&gt;INJECTION_SWEEP_EXCLUDE&lt;/strong&gt; environment variable (which can be a regular expression).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;INJECTION_OF_GENERICS&lt;/strong&gt; It is possible to inject the methods of generic classes but this requires a &#34;sweep&#34; of live objects to find the specializations in use (as they each have their own vtables) so the feature has been made opt-in.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;INJECTION_UNHIDE&lt;/strong&gt; Allows users to opt-into the legacy processing of defualt arguments symbols using the &#34;unhide&#34; which may be required for larger projects. Otherwise it will still occur &#34;on demand&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;INJECTION_PROJECT_ROOT&lt;/strong&gt; This allows you to specify the source root of your project in it&#39;s scheme automatiically messaging the InjectionIII app to change the scope of the file watcher as you switch between projects.&lt;/p&gt; &#xA;&lt;h3&gt;SwiftUI Injection&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to inject &lt;code&gt;SwiftUI&lt;/code&gt; interfaces but it requires some minor code changes. This is because when you add elements to an interface or use modifiers that change their type, this changes the return type of the body properties&#39; &lt;code&gt;Content&lt;/code&gt; across the injection which causes a crash. To avoid this you need to erase the return type. The easiest way to do this is to add the code below to your source somewhere then add the modifier &lt;code&gt;.eraseToAnyView()&lt;/code&gt; at the very end of any declaration of a view&#39;s body property that you want to inject:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;#if DEBUG&#xA;private var loadInjection: () = {&#xA;    #if os(macOS)&#xA;    let bundleName = &#34;macOSInjection.bundle&#34;&#xA;    #elseif os(tvOS)&#xA;    let bundleName = &#34;tvOSInjection.bundle&#34;&#xA;    #elseif targetEnvironment(simulator)&#xA;    let bundleName = &#34;iOSInjection.bundle&#34;&#xA;    #else&#xA;    let bundleName = &#34;maciOSInjection.bundle&#34;&#xA;    #endif&#xA;    Bundle(path: &#34;/Applications/InjectionIII.app/Contents/Resources/&#34;+bundleName)!.load()&#xA;}()&#xA;&#xA;import Combine&#xA;&#xA;public let injectionObserver = InjectionObserver()&#xA;&#xA;public class InjectionObserver: ObservableObject {&#xA;    @Published var injectionNumber = 0&#xA;    var cancellable: AnyCancellable? = nil&#xA;    let publisher = PassthroughSubject&amp;lt;Void, Never&amp;gt;()&#xA;    init() {&#xA;        cancellable = NotificationCenter.default.publisher(for:&#xA;            Notification.Name(&#34;INJECTION_BUNDLE_NOTIFICATION&#34;))&#xA;            .sink { [weak self] change in&#xA;            self?.injectionNumber += 1&#xA;            self?.publisher.send()&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;extension View {&#xA;    public func eraseToAnyView() -&amp;gt; some View {&#xA;        _ = loadInjection&#xA;        return AnyView(self)&#xA;    }&#xA;    public func onInjection(bumpState: @escaping () -&amp;gt; ()) -&amp;gt; some View {&#xA;        return self&#xA;            .onReceive(injectionObserver.publisher, perform: bumpState)&#xA;            .eraseToAnyView()&#xA;    }&#xA;}&#xA;#else&#xA;extension View {&#xA;    public func eraseToAnyView() -&amp;gt; some View { return self }&#xA;    public func onInjection(bumpState: @escaping () -&amp;gt; ()) -&amp;gt; some View {&#xA;        return self&#xA;    }&#xA;}&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To have the view you are working on redisplay automatically when it is injected it&#39;s sufficient to add an &lt;code&gt;@ObservedObject&lt;/code&gt;, initialised to the &lt;code&gt;injectionObserver&lt;/code&gt; instance as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;        .eraseToAnyView()&#xA;    }&#xA;&#xA;    #if DEBUG&#xA;    @ObservedObject var iO = injectionObserver&#xA;    #endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can make all these changes automatically once you&#39;ve opened a project using the &lt;code&gt;&#34;Prepare Project&#34;&lt;/code&gt; menu item. If you&#39;d like to execute some code each time your interface is injected, use the &lt;code&gt;.onInjection { ... }&lt;/code&gt; modifier instead of .&lt;code&gt;eraseToAnyView()&lt;/code&gt;. As an alternative, this code is available in the &lt;a href=&#34;https://github.com/johnno1962/HotSwiftUI&#34;&gt;HotSwiftUI&lt;/a&gt; Swift Package though you would have to remember to load the &lt;code&gt;iOSInjection.bundle&lt;/code&gt; separately by using the &lt;code&gt;.loadInjection()&lt;/code&gt; modifier on a view struct somewhere in your app. Another alternative from someone who has considerably more experience in iOS development than I do check out the &lt;a href=&#34;https://github.com/krzysztofzablocki/Inject&#34;&gt;Inject&lt;/a&gt; Swift Package introduced by this &lt;a href=&#34;https://merowing.info/2022/04/hot-reloading-in-swift/&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;InjectionIII and &#34;The Composable Architecture&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Applications written using &#34;TCA&#34; can have the &#34;reducer&#34; functions update their implementations without having to restart the application. You&#39;ll need to use a &lt;a href=&#34;https://github.com/thebrowsercompany/swift-composable-architecture/tree/develop&#34;&gt;slightly modified version of TCA&lt;/a&gt; and wrap all initialisers of top level reducer variables in a call to the global function &lt;code&gt;ARCInjectable()&lt;/code&gt; defined in that repo.&lt;/p&gt; &#xA;&lt;h3&gt;macOS Injection&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to use injection with a macOS/Catalyst project but it is getting progressively more difficult with each release of the OS. You need to make sure to turn off the &#34;App Sandbox&#34; and also &#34;Disable Library Validation&#34; under the &#34;Hardened Runtime&#34; options for your project while you inject. On an M1 Mac, if you &#34;Disable Library Validation&#34; and your app has web content you will likely also have to enable &#34;Allow execution of JIT-compiled code&#34;.&lt;/p&gt; &#xA;&lt;p&gt;With an Apple Silicon Mac it is possible to run your iOS application natively on macOS. You can use injection with these apps but as you can&#39;t turn off library validation it&#39;s a little involved. You need re-codesign the maciOSInjection.bundle contained in the InjectionIII app package using the signing identity used by your target app which you can determine from the &lt;code&gt;Sign&lt;/code&gt; phase in your app&#39;s build logs. You will also need to set a user default with the path to your project file as the name and the signing identity as the value so injected code changes can be signed properly as you can not turn off library validation.&lt;/p&gt; &#xA;&lt;p&gt;All this is best done by adding the following as a build phase to your target project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Type a script or drag a script file from your workspace to insert its path.&#xA;export CODESIGN_ALLOCATE\=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/codesign_allocate&#xA;INJECTION_APP_RESOURCES=/Applications/InjectionIII.app/Contents/Resources&#xA;/usr/bin/codesign --force --sign $EXPANDED_CODE_SIGN_IDENTITY  $INJECTION_APP_RESOURCES/maciOSInjection.bundle/maciOSInjection&#xA;/usr/bin/codesign --force --sign $EXPANDED_CODE_SIGN_IDENTITY  $INJECTION_APP_RESOURCES/maciOSSwiftUISupport.bundle/maciOSSwiftUISupport&#xA;/usr/bin/codesign --force --sign $EXPANDED_CODE_SIGN_IDENTITY $INJECTION_APP_RESOURCES/maciOSInjection.bundle/Frameworks/SwiftTrace.framework/SwiftTrace&#xA;defaults write com.johnholdsworth.InjectionIII &#34;$PROJECT_FILE_PATH&#34; $EXPANDED_CODE_SIGN_IDENTITY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Storyboard injection&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes when you are iterating over a UI it is useful to be able to inject storyboards. This works slightly differently from code injection. To inject changes to a storyboard scene, make your changes then &lt;em&gt;build&lt;/em&gt; the project instead of saving the storyboard. The &#34;nib&#34; of the currently displayed view controlled should be reloaded and viewDidLoad etc. will be called.&lt;/p&gt; &#xA;&lt;h3&gt;Vaccine&lt;/h3&gt; &#xA;&lt;p&gt;Injection now includes the higher level &lt;code&gt;Vaccine&lt;/code&gt; functionality, for more information consult the &lt;a href=&#34;https://github.com/zenangst/Vaccine&#34;&gt;project README&lt;/a&gt; or one of the &lt;a href=&#34;https://medium.com/itch-design-no/code-injection-in-swift-c49be095414c&#34;&gt;following&lt;/a&gt; &lt;a href=&#34;https://medium.com/@robnorback/the-secret-to-1-second-compile-times-in-xcode-9de4ec8345a1&#34;&gt;references&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Method Tracing menu item (SwiftTrace)&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to inject tracing aspects into your program implemented by the package &lt;a href=&#34;https://github.com/johnno1962/SwiftTrace&#34;&gt;SwiftTrace&lt;/a&gt; that don&#39;t affect its operation but should log every method call. Where possible it will also decorate their arguments. You can add logging to all methods in your app&#39;s main bundle or the frameworks it uses or trace calls to system frameworks such as UIKit or SwiftUI. If you opt into &#34;Type Lookup&#34;, custom types in your application can also be decorated using the CustomStringConvertable conformance or the default formatter for structs.&lt;/p&gt; &#xA;&lt;h3&gt;Remote Control&lt;/h3&gt; &#xA;&lt;p&gt;Newer versions of InjectionIII contain a server that allows you to control your development device from your desktop once the service has been started. The UI allows you to record and replay macros of UI actions then verify the device screen against snapshots for end-to-end testing.&lt;/p&gt; &#xA;&lt;p&gt;To use, import the Swift Package &lt;a href=&#34;https://github.com/johnno1962/Remote.git&#34;&gt;https://github.com/johnno1962/Remote.git&lt;/a&gt; and it should connect automatically to your desktop provided you have selected the &#34;Remote Control/Start Server&#34; menu item in InjectionIII to start its server. Your app should connect to this server when you next run it and will pop up a window showing the device display and accepting tap events. Events can be saved as &lt;code&gt;macros&lt;/code&gt; and replayed. If you include a snapshot in a macro this will be compared against the device display (within a tolerance) when you replay the macro for automated testing. Remote can also be used to capture videos of your app in operation but, as it operates over the network, it isn&#39;t fast enough to capture animated transitions.&lt;/p&gt; &#xA;&lt;h2&gt;SwiftEval - Yes, it&#39;s eval() for Swift&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://courses.cs.washington.edu/courses/cse190m/10su/lectures/slides/images/drevil.png&#34; alt=&#34;Icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;InjectionIII started out as the SwiftEval class which is a &lt;a href=&#34;https://raw.githubusercontent.com/johnno1962/InjectionIII/main/InjectionBundle/SwiftEval.swift&#34;&gt;single Swift source&lt;/a&gt; that can be added to your iOS simulator or macOS projects to implement an eval function inside classes that inherit from NSObject. There is a generic form which has the following signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;extension NSObject {&#xA;    public func eval&amp;lt;T&amp;gt;(_ expression: String, type: T.Type) -&amp;gt; T&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This takes a Swift expression as a String and returns an entity of the type specified. There is also a shorthand function for expressions of type String which accepts the contents of the String literal as it&#39;s argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;public func swiftEvalString(contents: String) -&amp;gt; String {&#xA;    return eval(&#34;\&#34;&#34; + expression + &#34;\&#34;&#34;, String.self)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An example of how it is used can be found in the EvalApp example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;@IBAction func performEval(_: Any) {&#xA;    textView.string = swiftEvalString(contents: textField.stringValue)&#xA;}&#xA;&#xA;@IBAction func closureEval(_: Any) {&#xA;    _ = swiftEval(code: closureText.stringValue+&#34;()&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The code works by adding an extension to your class source containing the expression. It then compiles and loads this new version of the class &#34;swizzling&#34; this extension onto the original class. The expression can refer to instance members in the class containing the eval class and global variables &amp;amp; functions in other class sources.&lt;/p&gt; &#xA;&lt;h3&gt;Acknowledgements:&lt;/h3&gt; &#xA;&lt;p&gt;This project includes code from &lt;a href=&#34;https://github.com/rentzsch/mach_inject&#34;&gt;rentzsch/mach_inject&lt;/a&gt;, &lt;a href=&#34;https://github.com/erwanb/MachInjectSample&#34;&gt;erwanb/MachInjectSample&lt;/a&gt;, &lt;a href=&#34;https://github.com/davedelong/DDHotKey&#34;&gt;davedelong/DDHotKey&lt;/a&gt; and &lt;a href=&#34;https://github.com/acj/TimeLapseBuilder-Swift&#34;&gt;acj/TimeLapseBuilder-Swift&lt;/a&gt; under their respective licenses.&lt;/p&gt; &#xA;&lt;p&gt;The App Tracing functionality uses the &lt;a href=&#34;https://github.com/OliverLetterer/imp_implementationForwardingToSelector&#34;&gt;OliverLetterer/imp_implementationForwardingToSelector&lt;/a&gt; trampoline implementation via the &lt;a href=&#34;https://github.com/johnno1962/SwiftTrace&#34;&gt;SwiftTrace&lt;/a&gt; project under an MIT license.&lt;/p&gt; &#xA;&lt;p&gt;SwiftTrace uses the very handy &lt;a href=&#34;https://github.com/facebook/fishhook&#34;&gt;https://github.com/facebook/fishhook&lt;/a&gt;. See the project source and header file included in the app bundle for licensing details.&lt;/p&gt; &#xA;&lt;p&gt;This release includes a very slightly modified version of the excellent &lt;a href=&#34;https://code.google.com/p/canviz/&#34;&gt;canviz&lt;/a&gt; library to render &#34;dot&#34; files in an HTML canvas which is subject to an MIT license. The changes are to pass through the ID of the node to the node label tag (line 212), to reverse the rendering of nodes and the lines linking them (line 406) and to store edge paths so they can be coloured (line 66 and 303) in &#34;canviz-0.1/canviz.js&#34;.&lt;/p&gt; &#xA;&lt;p&gt;It also includes &lt;a href=&#34;http://codemirror.net/&#34;&gt;CodeMirror&lt;/a&gt; JavaScript editor for the code to be evaluated using injection under an MIT license.&lt;/p&gt; &#xA;&lt;p&gt;The fabulous app icon is thanks to Katya of &lt;a href=&#34;http://pixel-mixer.com/&#34;&gt;pixel-mixer.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;$Date: 2022/04/23 $&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jdg/MBProgressHUD</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/jdg/MBProgressHUD</id>
    <link href="https://github.com/jdg/MBProgressHUD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MBProgressHUD + Customizations&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MBProgressHUD&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/matej/MBProgressHUD&#34;&gt;&lt;img src=&#34;https://travis-ci.org/matej/MBProgressHUD.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/matej/MBProgressHUD?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/matej/MBProgressHUD/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;SwiftPM compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat&#34; alt=&#34;Accio supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/MBProgressHUD&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/MBProgressHUD.svg?style=flat&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/MBProgressHUD.svg?style=flat&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MBProgressHUD&lt;/code&gt; is an iOS drop-in class that displays a translucent HUD with an indicator and/or labels while work is being done in a background thread. The HUD is meant as a replacement for the undocumented, private &lt;code&gt;UIKit&lt;/code&gt; &lt;code&gt;UIProgressHUD&lt;/code&gt; with some additional features.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/1.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/1-small.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/2.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/2-small.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/3.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/3-small.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/4.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/4-small.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/5.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/5-small.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/6.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/6-small.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/7.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/matej/MBProgressHUD/Screenshots/7-small.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;MBProgressHUD&lt;/code&gt; works on iOS 9.0+. It depends on the following Apple frameworks, which should already be included with most Xcode templates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Foundation.framework&lt;/li&gt; &#xA; &lt;li&gt;UIKit.framework&lt;/li&gt; &#xA; &lt;li&gt;CoreGraphics.framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You will need the latest developer tools in order to build &lt;code&gt;MBProgressHUD&lt;/code&gt;. Old Xcode versions might work, but compatibility will not be explicitly maintained.&lt;/p&gt; &#xA;&lt;h2&gt;Adding MBProgressHUD to your project&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is the recommended way to add MBProgressHUD to your project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add a pod entry for MBProgressHUD to your Podfile &lt;code&gt;pod &#39;MBProgressHUD&#39;, &#39;~&amp;gt; 1.2.0&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the pod(s) by running &lt;code&gt;pod install&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Include MBProgressHUD wherever you need it with &lt;code&gt;#import &#34;MBProgressHUD.h&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add MBProgressHUD to your Cartfile. e.g., &lt;code&gt;github &#34;jdg/MBProgressHUD&#34; ~&amp;gt; 1.2.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow the rest of the &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;standard Carthage installation instructions&lt;/a&gt; to add MBProgressHUD to your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;SwiftPM / Accio&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the following to your &lt;code&gt;Package.swift&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/jdg/MBProgressHUD.git&#34;, .upToNextMajor(from: &#34;1.2.0&#34;)),&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Next, add &lt;code&gt;MBProgressHUD&lt;/code&gt; to your App targets dependencies like so: &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(name: &#34;App&#34;, dependencies: [&#34;MBProgressHUD&#34;]),&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Then open your project in Xcode 11+ (SwiftPM) or run &lt;code&gt;accio update&lt;/code&gt; (Accio).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Source files&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively you can directly add the &lt;code&gt;MBProgressHUD.h&lt;/code&gt; and &lt;code&gt;MBProgressHUD.m&lt;/code&gt; source files to your project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/matej/MBProgressHUD/archive/master.zip&#34;&gt;latest code version&lt;/a&gt; or add the repository as a git submodule to your git-tracked project.&lt;/li&gt; &#xA; &lt;li&gt;Open your project in Xcode, then drag and drop &lt;code&gt;MBProgressHUD.h&lt;/code&gt; and &lt;code&gt;MBProgressHUD.m&lt;/code&gt; onto your project (use the &#34;Product Navigator view&#34;). Make sure to select Copy items when asked if you extracted the code archive outside of your project.&lt;/li&gt; &#xA; &lt;li&gt;Include MBProgressHUD wherever you need it with &lt;code&gt;#import &#34;MBProgressHUD.h&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Static library&lt;/h3&gt; &#xA;&lt;p&gt;You can also add MBProgressHUD as a static library to your project or workspace.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/matej/MBProgressHUD/downloads&#34;&gt;latest code version&lt;/a&gt; or add the repository as a git submodule to your git-tracked project.&lt;/li&gt; &#xA; &lt;li&gt;Open your project in Xcode, then drag and drop &lt;code&gt;MBProgressHUD.xcodeproj&lt;/code&gt; onto your project or workspace (use the &#34;Product Navigator view&#34;).&lt;/li&gt; &#xA; &lt;li&gt;Select your target and go to the Build phases tab. In the Link Binary With Libraries section select the add button. On the sheet find and add &lt;code&gt;libMBProgressHUD.a&lt;/code&gt;. You might also need to add &lt;code&gt;MBProgressHUD&lt;/code&gt; to the Target Dependencies list.&lt;/li&gt; &#xA; &lt;li&gt;Include MBProgressHUD wherever you need it with &lt;code&gt;#import &amp;lt;MBProgressHUD/MBProgressHUD.h&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The main guideline you need to follow when dealing with MBProgressHUD while running long-running tasks is keeping the main thread work-free, so the UI can be updated promptly. The recommended way of using MBProgressHUD is therefore to set it up on the main thread and then spinning the task, that you want to perform, off onto a new thread.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[MBProgressHUD showHUDAddedTo:self.view animated:YES];&#xA;dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_LOW, 0), ^{&#xA;&#x9;// Do something...&#xA;&#x9;dispatch_async(dispatch_get_main_queue(), ^{&#xA;&#x9;&#x9;[MBProgressHUD hideHUDForView:self.view animated:YES];&#xA;&#x9;});&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add the HUD on any view or window. It is however a good idea to avoid adding the HUD to certain &lt;code&gt;UIKit&lt;/code&gt; views with complex view hierarchies - like &lt;code&gt;UITableView&lt;/code&gt; or &lt;code&gt;UICollectionView&lt;/code&gt;. Those can mutate their subviews in unexpected ways and thereby break HUD display.&lt;/p&gt; &#xA;&lt;p&gt;If you need to configure the HUD you can do this by using the MBProgressHUD reference that showHUDAddedTo:animated: returns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self.view animated:YES];&#xA;hud.mode = MBProgressHUDModeAnnularDeterminate;&#xA;hud.label.text = @&#34;Loading&#34;;&#xA;[self doSomethingInBackgroundWithProgressCallback:^(float progress) {&#xA;&#x9;hud.progress = progress;&#xA;} completionCallback:^{&#xA;&#x9;[hud hideAnimated:YES];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a &lt;code&gt;NSProgress&lt;/code&gt; object and MBProgressHUD will update itself when there is progress reported through that object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self.view animated:YES];&#xA;hud.mode = MBProgressHUDModeAnnularDeterminate;&#xA;hud.label.text = @&#34;Loading&#34;;&#xA;NSProgress *progress = [self doSomethingInBackgroundCompletion:^{&#xA;&#x9;[hud hideAnimated:YES];&#xA;}];&#xA;hud.progressObject = progress;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that UI updates, including calls to MBProgressHUD should always be done on the main thread.&lt;/p&gt; &#xA;&lt;p&gt;If you need to run your long-running task in the main thread, you should perform it with a slight delay, so UIKit will have enough time to update the UI (i.e., draw the HUD) before you block the main thread with your task.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[MBProgressHUD showHUDAddedTo:self.view animated:YES];&#xA;dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, 0.01 * NSEC_PER_SEC);&#xA;dispatch_after(popTime, dispatch_get_main_queue(), ^(void){&#xA;&#x9;// Do something...&#xA;&#x9;[MBProgressHUD hideHUDForView:self.view animated:YES];&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should be aware that any HUD updates issued inside the above block won&#39;t be displayed until the block completes.&lt;/p&gt; &#xA;&lt;p&gt;For more examples, including how to use MBProgressHUD with asynchronous operations such as NSURLConnection, take a look at the bundled demo project. Extensive API documentation is provided in the header file (MBProgressHUD.h).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is distributed under the terms and conditions of the &lt;a href=&#34;https://raw.githubusercontent.com/jdg/MBProgressHUD/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Change-log&lt;/h2&gt; &#xA;&lt;p&gt;A brief summary of each MBProgressHUD release can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/jdg/MBProgressHUD/master/CHANGELOG.mdown&#34;&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Privacy&lt;/h2&gt; &#xA;&lt;p&gt;MBProgressHUD does not collect any data. See &lt;a href=&#34;https://bukovinski.com/sdk-privacy/mbprogresshud/&#34;&gt;SDK Privacy Practices&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hackiftekhar/IQKeyboardManager</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/hackiftekhar/IQKeyboardManager</id>
    <link href="https://github.com/hackiftekhar/IQKeyboardManager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Codeless drop-in universal library allows to prevent issues of keyboard sliding up and cover UITextField/UITextView. Neither need to write any code nor any setup required and much more.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/Demo/Resources/icon.png&#34; alt=&#34;Icon&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;IQKeyboardManager&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/hackiftekhar/IQKeyboardManager.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/hackiftekhar/IQKeyboardManager&#34;&gt;&lt;img src=&#34;https://travis-ci.org/hackiftekhar/IQKeyboardManager.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;While developing iOS apps, we often run into issues where the iPhone keyboard slides up and covers the &lt;code&gt;UITextField/UITextView&lt;/code&gt;. &lt;code&gt;IQKeyboardManager&lt;/code&gt; allows you to prevent this issue of keyboard sliding up and covering &lt;code&gt;UITextField/UITextView&lt;/code&gt; without needing you to write any code or make any additional setup. To use &lt;code&gt;IQKeyboardManager&lt;/code&gt; you simply need to add source files to your project.&lt;/p&gt; &#xA;&lt;h4&gt;Key Features&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;**CODELESS**, Zero Lines of Code&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Works Automatically&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;No More UIScrollView&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;No More Subclasses&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;No More Manual Work&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;No More #imports&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;IQKeyboardManager&lt;/code&gt; works on all orientations, and with the toolbar. It also has nice optional features allowing you to customize the distance from the text field, behaviour of previous, next and done buttons in the keyboard toolbar, play sound when the user navigates through the form and more.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://youtu.be/6nhLw6hju2A&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/v3.3.0/Screenshot/IQKeyboardManagerScreenshot.png&#34; alt=&#34;IQKeyboardManager&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://youtu.be/6nhLw6hju2A&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/v3.3.0/Screenshot/IQKeyboardManagerSettings.png&#34; alt=&#34;Settings&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;GIF animation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://youtu.be/6nhLw6hju2A&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/v3.3.0/Screenshot/IQKeyboardManager.gif&#34; alt=&#34;IQKeyboardManager&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Video&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://youtu.be/WAYc2Qj-OQg&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/WAYc2Qj-OQg/0.jpg&#34; alt=&#34;IQKeyboardManager Demo Video&#34; width=&#34;480&#34; height=&#34;360&#34; border=&#34;10&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial video by @rebeloper (&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/issues/1135&#34;&gt;#1135&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;@rebeloper demonstrated two videos on how to implement &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; at it&#39;s core:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL_csAAO9PQ8aTL87XnueOXi3RpWE2m_8v&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/Screenshot/ThirdPartyYoutubeTutorial.jpg&#34; alt=&#34;Youtube Tutorial Playlist&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL_csAAO9PQ8aTL87XnueOXi3RpWE2m_8v&#34;&gt;https://www.youtube.com/playlist?list=PL_csAAO9PQ8aTL87XnueOXi3RpWE2m_8v&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Warning&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;If you&#39;re planning to build SDK/library/framework and want to handle UITextField/UITextView with IQKeyboardManager then you&#39;re totally going the wrong way.&lt;/strong&gt; I would never suggest to add &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; as &lt;strong&gt;dependency/adding/shipping&lt;/strong&gt; with any third-party library. Instead of adding &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; you should implement your own solution to achieve same kind of results. &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; is totally designed for projects to help developers for their convenience, it&#39;s not designed for &lt;strong&gt;adding/dependency/shipping&lt;/strong&gt; with any &lt;strong&gt;third-party library&lt;/strong&gt;, because &lt;strong&gt;doing this could block adoption by other developers for their projects as well (who are not using IQKeyboardManager and have implemented their custom solution to handle UITextField/UITextView in the project).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;If &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; conflicts with other &lt;strong&gt;third-party library&lt;/strong&gt;, then it&#39;s &lt;strong&gt;developer responsibility&lt;/strong&gt; to &lt;strong&gt;enable/disable IQKeyboardManager&lt;/strong&gt; when &lt;strong&gt;presenting/dismissing&lt;/strong&gt; third-party library UI. Third-party libraries are not responsible to handle IQKeyboardManager.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platform-iOS-blue.svg?style=fla&#34; alt=&#34;Platform iOS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Minimum iOS Target&lt;/th&gt; &#xA;   &lt;th&gt;Minimum Xcode Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IQKeyboardManager&lt;/td&gt; &#xA;   &lt;td&gt;Obj-C&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8.0&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IQKeyboardManagerSwift&lt;/td&gt; &#xA;   &lt;td&gt;Swift&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8.0&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Demo Project&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Swift versions support&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;Xcode&lt;/th&gt; &#xA;   &lt;th&gt;IQKeyboardManagerSwift&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.1, 5.0, 4.2, 4.0, 3.2, 3.0&lt;/td&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 6.5.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.0,4.2, 4.0, 3.2, 3.0&lt;/td&gt; &#xA;   &lt;td&gt;10.2&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 6.2.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.2, 4.0, 3.2, 3.0&lt;/td&gt; &#xA;   &lt;td&gt;10.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 6.0.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.0, 3.2, 3.0&lt;/td&gt; &#xA;   &lt;td&gt;9.0&lt;/td&gt; &#xA;   &lt;td&gt;5.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h4&gt;Installation with CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/IQKeyboardManager&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/IQKeyboardManager.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;IQKeyboardManager (Objective-C):&lt;/strong&gt;&lt;/em&gt; IQKeyboardManager is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile: (&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/issues/9&#34;&gt;#9&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;IQKeyboardManager&#39; #iOS8 and later&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;IQKeyboardManager (Swift):&lt;/strong&gt;&lt;/em&gt; IQKeyboardManagerSwift is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile: (&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/issues/236&#34;&gt;#236&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Swift 5.1, 5.0, 4.2, 4.0, 3.2, 3.0 (Xcode 11)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;IQKeyboardManagerSwift&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Or you can choose the version you need based on Swift support table from &lt;a href=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/README.md#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;IQKeyboardManagerSwift&#39;, &#39;6.3.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In AppDelegate.swift, just import IQKeyboardManagerSwift framework and enable IQKeyboardManager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import IQKeyboardManagerSwift&#xA;&#xA;@UIApplicationMain&#xA;class AppDelegate: UIResponder, UIApplicationDelegate {&#xA;&#xA;    var window: UIWindow?&#xA;&#xA;    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool {&#xA;&#xA;      IQKeyboardManager.shared.enable = true&#xA;&#xA;      return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installation with Carthage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate &lt;code&gt;IQKeyboardManger&lt;/code&gt; or &lt;code&gt;IQKeyboardManagerSwift&lt;/code&gt; into your Xcode project using Carthage, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;hackiftekhar/IQKeyboardManager&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage&lt;/code&gt; to build the frameworks and drag the appropriate framework (&lt;code&gt;IQKeyboardManager.framework&lt;/code&gt; or &lt;code&gt;IQKeyboardManagerSwift.framework&lt;/code&gt;) into your Xcode project based on your need. Make sure to add only one framework and not both.&lt;/p&gt; &#xA;&lt;h4&gt;Installation with Source Code&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/hackiftekhar/iqkeyboardmanager.svg?sanitize=true&#34; alt=&#34;Github tag&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;IQKeyboardManager (Objective-C):&lt;/strong&gt;&lt;/em&gt; Just &lt;em&gt;&lt;strong&gt;drag and drop&lt;/strong&gt;&lt;/em&gt; &lt;code&gt;IQKeyboardManager&lt;/code&gt; directory from demo project to your project. That&#39;s it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;IQKeyboardManager (Swift):&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;&lt;strong&gt;Drag and drop&lt;/strong&gt;&lt;/em&gt; &lt;code&gt;IQKeyboardManagerSwift&lt;/code&gt; directory from demo project to your project&lt;/p&gt; &#xA;&lt;p&gt;In AppDelegate.swift, just enable IQKeyboardManager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@UIApplicationMain&#xA;class AppDelegate: UIResponder, UIApplicationDelegate {&#xA;&#xA;    var window: UIWindow?&#xA;&#xA;    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool {&#xA;&#xA;      IQKeyboardManager.shared.enable = true&#xA;&#xA;      return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installation with Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager(SPM)&lt;/a&gt; is Apple&#39;s dependency manager tool. It is now supported in Xcode 11. So it can be used in all appleOS types of projects. It can be used alongside other tools like CocoaPods and Carthage as well.&lt;/p&gt; &#xA;&lt;p&gt;To install IQKeyboardManager package into your packages, add a reference to IQKeyboardManager and a targeting release version in the dependencies section in &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;YOUR_PROJECT_NAME&#34;,&#xA;    products: [],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/hackiftekhar/IQKeyboardManager.git&#34;, from: &#34;6.5.0&#34;)&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install IQKeyboardManager package via Xcode&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency...&lt;/li&gt; &#xA; &lt;li&gt;Then search for &lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager.git&#34;&gt;https://github.com/hackiftekhar/IQKeyboardManager.git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;And choose the version you want&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Migration Guide&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/wiki/IQKeyboardManager-6.0.0-Migration-Guide&#34;&gt;IQKeyboardManager 6.0.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Other Links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/wiki/Known-Issues&#34;&gt;Known Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/wiki/Manual-Management&#34;&gt;Manual Management Tweaks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/wiki/Properties-&amp;amp;-Functions&#34;&gt;Properties and functions usage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Flow Diagram&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/Screenshot/IQKeyboardManagerFlowDiagram.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/Screenshot/IQKeyboardManagerFlowDiagram.jpg&#34; alt=&#34;IQKeyboardManager CFD&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to see detailed Flow diagram then check &lt;a href=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/v3.3.0/Screenshot/IQKeyboardManagerCFD.jpg&#34;&gt;Detailed Flow Diagram&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Any contribution is more than welcome! You can contribute through pull requests and issues on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to contact me, email at: &lt;a href=&#34;mailto:hack.iftekhar@gmail.com&#34;&gt;hack.iftekhar@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/GoogleSignIn-iOS</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/google/GoogleSignIn-iOS</id>
    <link href="https://github.com/google/GoogleSignIn-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Enables iOS and macOS apps to sign in with Google.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/GoogleSignIn&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/GoogleSignIn.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/GoogleSignIn&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/GoogleSignIn.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/GoogleSignIn&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/GoogleSignIn.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/GoogleSignIn-iOS/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/google/GoogleSignIn-iOS/actions/workflows/tests.yml/badge.svg?event=push&#34; alt=&#34;tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Google Sign-In for iOS and macOS&lt;/h1&gt; &#xA;&lt;p&gt;Get users into your apps quickly and securely, using a registration system they already use and trust—their Google account.&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://developers.google.com/identity/sign-in/ios/&#34;&gt;our developer site&lt;/a&gt; for integration instructions, documentation, support information, and terms of service.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Try either the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/ObjC&#34;&gt;Objective-C&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/Swift&#34;&gt;Swift&lt;/a&gt; sample app. For example, to demo the Objective-C sample project, you have three options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;&#39;s &lt;code&gt;try&lt;/code&gt; method:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod try GoogleSignIn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, this will default to providing you with the Objective-C sample app.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Using CocoaPod&#39;s &lt;code&gt;install&lt;/code&gt; method:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/GoogleSignIn-iOS&#xA;cd GoogleSignIn-iOS/Samples/ObjC/SignInSample/&#xA;pod install&#xA;open SignInSampleForPod.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/GoogleSignIn-iOS&#xA;open GoogleSignIn-iOS/Samples/ObjC/SignInSample/SignInSample.xcodeproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to see a Swift example, take a look at &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/Swift/DaysUntilBirthday&#34;&gt;Samples/Swift/DaysUntilBirthday&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add Google Sign-In to your own app by following our &lt;a href=&#34;https://developers.google.com/identity/sign-in/ios/start-integrating&#34;&gt;getting started guides&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Take a look at the &lt;a href=&#34;https://developers.google.com/identity/sign-in/ios/api/&#34;&gt;API reference&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Google Sign-In on macOS&lt;/h2&gt; &#xA;&lt;p&gt;Google Sign-In allows your users to sign-in to your native macOS app using their Google account and default browser. When building for macOS, the &lt;code&gt;signInWithConfiguration:&lt;/code&gt; and &lt;code&gt;addScopes:&lt;/code&gt; methods take a &lt;code&gt;presentingWindow:&lt;/code&gt; parameter in place of &lt;code&gt;presentingViewController:&lt;/code&gt;. Note that in order for your macOS app to store credientials via the Keychain on macOS, you will need to &lt;a href=&#34;https://developer.apple.com/support/code-signing/&#34;&gt;sign your app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Mac Catalyst&lt;/h3&gt; &#xA;&lt;p&gt;Google Sign-In also supports iOS apps that are built for macOS via &lt;a href=&#34;https://developer.apple.com/mac-catalyst/&#34;&gt;Mac Catalyst&lt;/a&gt;. In order for your Mac Catalyst app to store credientials via the Keychain on macOS, you will need to &lt;a href=&#34;https://developer.apple.com/support/code-signing/&#34;&gt;sign your app&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AFNetworking/AFNetworking</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/AFNetworking/AFNetworking</id>
    <link href="https://github.com/AFNetworking/AFNetworking" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A delightful networking framework for iOS, macOS, watchOS, and tvOS.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.github.com/AFNetworking/AFNetworking/assets/afnetworking-logo.png&#34; alt=&#34;AFNetworking&#34; title=&#34;AFNetworking&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AFNetworking/AFNetworking/actions&#34;&gt;&lt;img src=&#34;https://github.com/AFNetworking/AFNetworking/workflows/AFNetworking%20CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/v/AFNetworking.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/AFNetworking.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/AFNetworking&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/AFNetworking.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://twitter.com/AFNetworking&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-@AFNetworking-blue.svg?style=flat&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AFNetworking is a delightful networking library for iOS, macOS, watchOS, and tvOS. It&#39;s built on top of the &lt;a href=&#34;https://developer.apple.com/documentation/foundation/url_loading_system&#34;&gt;Foundation URL Loading System&lt;/a&gt;, extending the powerful high-level networking abstractions built into Cocoa. It has a modular architecture with well-designed, feature-rich APIs that are a joy to use.&lt;/p&gt; &#xA;&lt;p&gt;Perhaps the most important feature of all, however, is the amazing community of developers who use and contribute to AFNetworking every day. AFNetworking powers some of the most popular and critically-acclaimed apps on the iPhone, iPad, and Mac.&lt;/p&gt; &#xA;&lt;h2&gt;How To Get Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AFNetworking/AFNetworking/archive/master.zip&#34;&gt;Download AFNetworking&lt;/a&gt; and try out the included Mac and iPhone example apps&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking/wiki/Getting-Started-with-AFNetworking&#34;&gt;&#34;Getting Started&#34; guide&lt;/a&gt;, &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking/wiki/AFNetworking-FAQ&#34;&gt;FAQ&lt;/a&gt;, or &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking/wiki&#34;&gt;other articles on the Wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/afnetworking&#34;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;afnetworking&#39;)&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/afnetworking&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, &lt;em&gt;and can provide steps to reliably reproduce it&lt;/em&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a pull request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;AFNetworking supports multiple methods for installing the library in a project.&lt;/p&gt; &#xA;&lt;h2&gt;Installation with CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;To integrate AFNetworking into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;AFNetworking&#39;, &#39;~&amp;gt; 4.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation with Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Once you have your Swift package set up, adding AFNetworking as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/AFNetworking/AFNetworking.git&#34;, .upToNextMajor(from: &#34;4.0.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: AFNetworking&#39;s Swift package does not include it&#39;s UIKit extensions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Installation with Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate AFNetworking, add the following to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;AFNetworking/AFNetworking&#34; ~&amp;gt; 4.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AFNetworking Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Minimum iOS Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Minimum macOS Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Minimum watchOS Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Minimum tvOS Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS 10.10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;watchOS 2.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tvOS 9.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 11+ is required.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;OS X 10.9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;watchOS 2.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tvOS 9.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 7+ is required. &lt;code&gt;NSURLConnectionOperation&lt;/code&gt; support has been removed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.6 -&amp;gt; 2.6.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;OS X 10.9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;watchOS 2.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 7+ is required.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.0 -&amp;gt; 2.5.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;OS X 10.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 5+ is required. &lt;code&gt;NSURLSession&lt;/code&gt; subspec requires iOS 7 or OS X 10.9.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mac OS X 10.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.10.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mac OS X 10.6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;(macOS projects must support &lt;a href=&#34;https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtVersionsPlatforms.html&#34;&gt;64-bit with modern Cocoa runtime&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Programming in Swift? Try &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt; for a more conventional set of APIs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;h3&gt;NSURLSession&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AFURLSessionManager&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AFHTTPSessionManager&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Serialization&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;AFURLRequestSerialization&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFHTTPRequestSerializer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFJSONRequestSerializer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFPropertyListRequestSerializer&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;AFURLResponseSerialization&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFHTTPResponseSerializer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFJSONResponseSerializer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFXMLParserResponseSerializer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFXMLDocumentResponseSerializer&lt;/code&gt; &lt;em&gt;(macOS)&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFPropertyListResponseSerializer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFImageResponseSerializer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFCompoundResponseSerializer&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional Functionality&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AFSecurityPolicy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AFNetworkReachabilityManager&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;AFURLSessionManager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;AFURLSessionManager&lt;/code&gt; creates and manages an &lt;code&gt;NSURLSession&lt;/code&gt; object based on a specified &lt;code&gt;NSURLSessionConfiguration&lt;/code&gt; object, which conforms to &lt;code&gt;&amp;lt;NSURLSessionTaskDelegate&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;NSURLSessionDataDelegate&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;NSURLSessionDownloadDelegate&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;NSURLSessionDelegate&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Creating a Download Task&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];&#xA;AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];&#xA;&#xA;NSURL *URL = [NSURL URLWithString:@&#34;http://example.com/download.zip&#34;];&#xA;NSURLRequest *request = [NSURLRequest requestWithURL:URL];&#xA;&#xA;NSURLSessionDownloadTask *downloadTask = [manager downloadTaskWithRequest:request progress:nil destination:^NSURL *(NSURL *targetPath, NSURLResponse *response) {&#xA;    NSURL *documentsDirectoryURL = [[NSFileManager defaultManager] URLForDirectory:NSDocumentDirectory inDomain:NSUserDomainMask appropriateForURL:nil create:NO error:nil];&#xA;    return [documentsDirectoryURL URLByAppendingPathComponent:[response suggestedFilename]];&#xA;} completionHandler:^(NSURLResponse *response, NSURL *filePath, NSError *error) {&#xA;    NSLog(@&#34;File downloaded to: %@&#34;, filePath);&#xA;}];&#xA;[downloadTask resume];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Creating an Upload Task&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];&#xA;AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];&#xA;&#xA;NSURL *URL = [NSURL URLWithString:@&#34;http://example.com/upload&#34;];&#xA;NSURLRequest *request = [NSURLRequest requestWithURL:URL];&#xA;&#xA;NSURL *filePath = [NSURL fileURLWithPath:@&#34;file://path/to/image.png&#34;];&#xA;NSURLSessionUploadTask *uploadTask = [manager uploadTaskWithRequest:request fromFile:filePath progress:nil completionHandler:^(NSURLResponse *response, id responseObject, NSError *error) {&#xA;    if (error) {&#xA;        NSLog(@&#34;Error: %@&#34;, error);&#xA;    } else {&#xA;        NSLog(@&#34;Success: %@ %@&#34;, response, responseObject);&#xA;    }&#xA;}];&#xA;[uploadTask resume];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Creating an Upload Task for a Multi-Part Request, with Progress&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSMutableURLRequest *request = [[AFHTTPRequestSerializer serializer] multipartFormRequestWithMethod:@&#34;POST&#34; URLString:@&#34;http://example.com/upload&#34; parameters:nil constructingBodyWithBlock:^(id&amp;lt;AFMultipartFormData&amp;gt; formData) {&#xA;        [formData appendPartWithFileURL:[NSURL fileURLWithPath:@&#34;file://path/to/image.jpg&#34;] name:@&#34;file&#34; fileName:@&#34;filename.jpg&#34; mimeType:@&#34;image/jpeg&#34; error:nil];&#xA;    } error:nil];&#xA;&#xA;AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]];&#xA;&#xA;NSURLSessionUploadTask *uploadTask;&#xA;uploadTask = [manager&#xA;              uploadTaskWithStreamedRequest:request&#xA;              progress:^(NSProgress * _Nonnull uploadProgress) {&#xA;                  // This is not called back on the main queue.&#xA;                  // You are responsible for dispatching to the main queue for UI updates&#xA;                  dispatch_async(dispatch_get_main_queue(), ^{&#xA;                      //Update the progress view&#xA;                      [progressView setProgress:uploadProgress.fractionCompleted];&#xA;                  });&#xA;              }&#xA;              completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) {&#xA;                  if (error) {&#xA;                      NSLog(@&#34;Error: %@&#34;, error);&#xA;                  } else {&#xA;                      NSLog(@&#34;%@ %@&#34;, response, responseObject);&#xA;                  }&#xA;              }];&#xA;&#xA;[uploadTask resume];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Creating a Data Task&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];&#xA;AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];&#xA;&#xA;NSURL *URL = [NSURL URLWithString:@&#34;http://httpbin.org/get&#34;];&#xA;NSURLRequest *request = [NSURLRequest requestWithURL:URL];&#xA;&#xA;NSURLSessionDataTask *dataTask = [manager dataTaskWithRequest:request completionHandler:^(NSURLResponse *response, id responseObject, NSError *error) {&#xA;    if (error) {&#xA;        NSLog(@&#34;Error: %@&#34;, error);&#xA;    } else {&#xA;        NSLog(@&#34;%@ %@&#34;, response, responseObject);&#xA;    }&#xA;}];&#xA;[dataTask resume];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Request Serialization&lt;/h3&gt; &#xA;&lt;p&gt;Request serializers create requests from URL strings, encoding parameters as either a query string or HTTP body.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSString *URLString = @&#34;http://example.com&#34;;&#xA;NSDictionary *parameters = @{@&#34;foo&#34;: @&#34;bar&#34;, @&#34;baz&#34;: @[@1, @2, @3]};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Query String Parameter Encoding&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[[AFHTTPRequestSerializer serializer] requestWithMethod:@&#34;GET&#34; URLString:URLString parameters:parameters error:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET http://example.com?foo=bar&amp;amp;baz[]=1&amp;amp;baz[]=2&amp;amp;baz[]=3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;URL Form Parameter Encoding&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[[AFHTTPRequestSerializer serializer] requestWithMethod:@&#34;POST&#34; URLString:URLString parameters:parameters error:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST http://example.com/&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;foo=bar&amp;amp;baz[]=1&amp;amp;baz[]=2&amp;amp;baz[]=3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JSON Parameter Encoding&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[[AFJSONRequestSerializer serializer] requestWithMethod:@&#34;POST&#34; URLString:URLString parameters:parameters error:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST http://example.com/&#xA;Content-Type: application/json&#xA;&#xA;{&#34;foo&#34;: &#34;bar&#34;, &#34;baz&#34;: [1,2,3]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Network Reachability Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;AFNetworkReachabilityManager&lt;/code&gt; monitors the reachability of domains, and addresses for both WWAN and WiFi network interfaces.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do not use Reachability to determine if the original request should be sent. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You should try to send it.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can use Reachability to determine when a request should be automatically retried. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Although it may still fail, a Reachability notification that the connectivity is available is a good time to retry something.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Network reachability is a useful tool for determining why a request might have failed. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;After a network request has failed, telling the user they&#39;re offline is better than giving them a more technical but accurate error, such as &#34;request timed out.&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2012-706/&#34;&gt;WWDC 2012 session 706, &#34;Networking Best Practices.&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Shared Network Reachability&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {&#xA;    NSLog(@&#34;Reachability: %@&#34;, AFStringFromNetworkReachabilityStatus(status));&#xA;}];&#xA;&#xA;[[AFNetworkReachabilityManager sharedManager] startMonitoring];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Security Policy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;AFSecurityPolicy&lt;/code&gt; evaluates server trust against pinned X.509 certificates and public keys over secure connections.&lt;/p&gt; &#xA;&lt;p&gt;Adding pinned SSL certificates to your app helps prevent man-in-the-middle attacks and other vulnerabilities. Applications dealing with sensitive customer data or financial information are strongly encouraged to route all communication over an HTTPS connection with SSL pinning configured and enabled.&lt;/p&gt; &#xA;&lt;h4&gt;Allowing Invalid SSL Certificates&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];&#xA;manager.securityPolicy.allowInvalidCertificates = YES; // not recommended for production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Unit Tests&lt;/h2&gt; &#xA;&lt;p&gt;AFNetworking includes a suite of unit tests within the Tests subdirectory. These tests can be run simply be executed the test action on the platform framework you would like to test.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;AFNetworking is owned and maintained by the &lt;a href=&#34;http://alamofire.org&#34;&gt;Alamofire Software Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;AFNetworking was originally created by &lt;a href=&#34;https://github.com/sco/&#34;&gt;Scott Raymond&lt;/a&gt; and &lt;a href=&#34;https://github.com/mattt/&#34;&gt;Mattt Thompson&lt;/a&gt; in the development of &lt;a href=&#34;http://en.wikipedia.org/wiki/Gowalla&#34;&gt;Gowalla for iPhone&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;AFNetworking&#39;s logo was designed by &lt;a href=&#34;http://www.alandefibaugh.com/&#34;&gt;Alan Defibaugh&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And most of all, thanks to AFNetworking&#39;s &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking/contributors&#34;&gt;growing list of contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Security Disclosure&lt;/h3&gt; &#xA;&lt;p&gt;If you believe you have identified a security vulnerability with AFNetworking, you should report it as soon as possible via email to &lt;a href=&#34;mailto:security@alamofire.org&#34;&gt;security@alamofire.org&lt;/a&gt;. Please do not post it to a public issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;AFNetworking is released under the MIT license. See &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SDWebImage/SDWebImage</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/SDWebImage/SDWebImage</id>
    <link href="https://github.com/SDWebImage/SDWebImage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Asynchronous image downloader with cache support as a UIImageView category&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/SDWebImage_logo.png&#34; title=&#34;SDWebImage logo&#34; float=&#34;left&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/SDWebImage/SDWebImage&#34;&gt;&lt;img src=&#34;http://img.shields.io/travis/SDWebImage/SDWebImage/master.svg?style=flat&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/SDWebImage/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/SDWebImage.svg?style=flat&#34; alt=&#34;Pod Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/SDWebImage/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/SDWebImage.svg?style=flat&#34; alt=&#34;Pod Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/l/SDWebImage.svg?style=flat&#34; alt=&#34;Pod License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;SwiftPM compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/documentation/xcode/creating_a_mac_version_of_your_ipad_app/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Catalyst-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Mac Catalyst compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/SDWebImage/SDWebImage&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/SDWebImage/SDWebImage/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library provides an async image downloader with cache support. For convenience, we added categories for UI elements like &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;UIButton&lt;/code&gt;, &lt;code&gt;MKAnnotationView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Categories for &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;UIButton&lt;/code&gt;, &lt;code&gt;MKAnnotationView&lt;/code&gt; adding web image and cache management&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; An asynchronous image downloader&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; An asynchronous memory + disk image caching with automatic cache expiration handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A background image decompression to avoid frame rate drop&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#progressive-animation&#34;&gt;Progressive image loading&lt;/a&gt; (including animated image, like GIF showing in Web browser)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#thumbnail-decoding-550&#34;&gt;Thumbnail image decoding&lt;/a&gt; to save CPU &amp;amp;&amp;amp; Memory for large images&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#custom-coder-420&#34;&gt;Extendable image coder&lt;/a&gt; to support massive image format, like WebP&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#animated-image-50&#34;&gt;Full-stack solution for animated images&lt;/a&gt; which keep a balance between CPU &amp;amp;&amp;amp; Memory&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#transformer-50&#34;&gt;Customizable and composable transformations&lt;/a&gt; can be applied to the images right after download&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#custom-cache-50&#34;&gt;Customizable and multiple caches system&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#custom-loader-50&#34;&gt;Customizable and multiple loaders system&lt;/a&gt; to expand the capabilities, like &lt;a href=&#34;https://github.com/SDWebImage/SDWebImagePhotosPlugin&#34;&gt;Photos Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/How-to-use#use-view-indicator-50&#34;&gt;Image loading indicators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#image-transition-430&#34;&gt;Image loading transition animation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A guarantee that the same URL won&#39;t be downloaded several times&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A guarantee that bogus URLs won&#39;t be retried again and again&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A guarantee that main thread will never be blocked&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Modern Objective-C and better Swift support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Performances!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Image Formats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Image formats supported by Apple system (JPEG, PNG, TIFF, BMP, ...), including &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#gif-coder&#34;&gt;GIF&lt;/a&gt;/&lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#apng-coder&#34;&gt;APNG&lt;/a&gt; animated image&lt;/li&gt; &#xA; &lt;li&gt;HEIC format from iOS 11/macOS 10.13, including animated HEIC from iOS 13/macOS 10.15 via &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#heic-coder&#34;&gt;SDWebImageHEICCoder&lt;/a&gt;. For lower firmware, use coder plugin &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageHEIFCoder&#34;&gt;SDWebImageHEIFCoder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WebP format from iOS 14/macOS 11.0 via &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#awebp-coder&#34;&gt;SDWebImageAWebPCoder&lt;/a&gt;. For lower firmware, use coder plugin &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageWebPCoder&#34;&gt;SDWebImageWebPCoder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support extendable coder plugins for new image formats like BPG, AVIF. And vector format like PDF, SVG. See all the list in &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Coder-Plugin-List&#34;&gt;Image coder plugin List&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional modules and Ecosystem&lt;/h2&gt; &#xA;&lt;p&gt;In order to keep SDWebImage focused and limited to the core features, but also allow extensibility and custom behaviors, during the 5.0 refactoring we focused on modularizing the library. As such, we have moved/built new modules to &lt;a href=&#34;https://github.com/SDWebImage&#34;&gt;SDWebImage org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;SwiftUI&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/xcode/swiftui/&#34;&gt;SwiftUI&lt;/a&gt; is an innovative UI framework written in Swift to build user interfaces across all Apple platforms.&lt;/p&gt; &#xA;&lt;p&gt;We support SwiftUI by building a brand new framework called &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageSwiftUI&#34;&gt;SDWebImageSwiftUI&lt;/a&gt;, which is built on top of SDWebImage core functions (caching, loading and animation).&lt;/p&gt; &#xA;&lt;p&gt;The new framework introduce two View structs &lt;code&gt;WebImage&lt;/code&gt; and &lt;code&gt;AnimatedImage&lt;/code&gt; for SwiftUI world, &lt;code&gt;ImageIndicator&lt;/code&gt; modifier for any View, &lt;code&gt;ImageManager&lt;/code&gt; observable object for data source. Supports iOS 13+/macOS 10.15+/tvOS 13+/watchOS 6+ and Swift 5.1. Have a nice try and provide feedback!&lt;/p&gt; &#xA;&lt;h4&gt;Coders for additional image formats&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageWebPCoder&#34;&gt;SDWebImageWebPCoder&lt;/a&gt; - coder for WebP format. iOS 8+/macOS 10.10+. Based on &lt;a href=&#34;https://chromium.googlesource.com/webm/libwebp&#34;&gt;libwebp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageHEIFCoder&#34;&gt;SDWebImageHEIFCoder&lt;/a&gt; - coder for HEIF format, iOS 8+/macOS 10.10+ support. Based on &lt;a href=&#34;https://github.com/strukturag/libheif&#34;&gt;libheif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageBPGCoder&#34;&gt;SDWebImageBPGCoder&lt;/a&gt; - coder for BPG format. Based on &lt;a href=&#34;https://github.com/mirrorer/libbpg&#34;&gt;libbpg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageFLIFCoder&#34;&gt;SDWebImageFLIFCoder&lt;/a&gt; - coder for FLIF format. Based on &lt;a href=&#34;https://github.com/FLIF-hub/FLIF&#34;&gt;libflif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageAVIFCoder&#34;&gt;SDWebImageAVIFCoder&lt;/a&gt; - coder for AVIF (AV1-based) format. Based on &lt;a href=&#34;https://github.com/AOMediaCodec/libavif&#34;&gt;libavif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImagePDFCoder&#34;&gt;SDWebImagePDFCoder&lt;/a&gt; - coder for PDF vector format. Using built-in frameworks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageSVGCoder&#34;&gt;SDWebImageSVGCoder&lt;/a&gt; - coder for SVG vector format. Using built-in frameworks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageLottieCoder&#34;&gt;SDWebImageLottieCoder&lt;/a&gt; - coder for Lottie animation format. Based on &lt;a href=&#34;https://github.com/Samsung/rlottie&#34;&gt;rlottie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;and more from community!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom Caches&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageYYPlugin&#34;&gt;SDWebImageYYPlugin&lt;/a&gt; - plugin to support caching images with &lt;a href=&#34;https://github.com/ibireme/YYCache&#34;&gt;YYCache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImagePINPlugin&#34;&gt;SDWebImagePINPlugin&lt;/a&gt; - plugin to support caching images with &lt;a href=&#34;https://github.com/pinterest/PINCache&#34;&gt;PINCache&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom Loaders&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImagePhotosPlugin&#34;&gt;SDWebImagePhotosPlugin&lt;/a&gt; - plugin to support loading images from Photos (using &lt;code&gt;Photos.framework&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageLinkPlugin&#34;&gt;SDWebImageLinkPlugin&lt;/a&gt; - plugin to support loading images from rich link url, as well as &lt;code&gt;LPLinkView&lt;/code&gt; (using &lt;code&gt;LinkPresentation.framework&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Integration with 3rd party libraries&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageLottiePlugin&#34;&gt;SDWebImageLottiePlugin&lt;/a&gt; - plugin to support &lt;a href=&#34;https://github.com/airbnb/lottie-ios&#34;&gt;Lottie-iOS&lt;/a&gt;, vector animation rending with remote JSON files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageSVGKitPlugin&#34;&gt;SDWebImageSVGKitPlugin&lt;/a&gt; - plugin to support &lt;a href=&#34;https://github.com/SVGKit/SVGKit&#34;&gt;SVGKit&lt;/a&gt;, SVG rendering using Core Animation, iOS 8+/macOS 10.10+ support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageFLPlugin&#34;&gt;SDWebImageFLPlugin&lt;/a&gt; - plugin to support &lt;a href=&#34;https://github.com/Flipboard/FLAnimatedImage&#34;&gt;FLAnimatedImage&lt;/a&gt; as the engine for animated GIFs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageYYPlugin&#34;&gt;SDWebImageYYPlugin&lt;/a&gt; - plugin to integrate &lt;a href=&#34;https://github.com/ibireme/YYImage&#34;&gt;YYImage&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/ibireme/YYCache&#34;&gt;YYCache&lt;/a&gt; for image rendering &amp;amp; caching&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Community driven popular libraries&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/firebase/FirebaseUI-iOS&#34;&gt;FirebaseUI&lt;/a&gt; - Firebase Storage binding for query images, based on SDWebImage loader system&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DylanVann/react-native-fast-image&#34;&gt;react-native-fast-image&lt;/a&gt; - React Native fast image component, based on SDWebImage Animated Image solution&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenFlutter/flutter_image_compress&#34;&gt;flutter_image_compress&lt;/a&gt; - Flutter compresses image plugin, based on SDWebImage WebP coder plugin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Make our lives easier&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/libwebp-Xcode&#34;&gt;libwebp-Xcode&lt;/a&gt; - A wrapper for &lt;a href=&#34;https://chromium.googlesource.com/webm/libwebp&#34;&gt;libwebp&lt;/a&gt; + an Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/libheif-Xcode&#34;&gt;libheif-Xcode&lt;/a&gt; - A wrapper for &lt;a href=&#34;https://github.com/strukturag/libheif&#34;&gt;libheif&lt;/a&gt; + an Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/libavif-Xcode&#34;&gt;libavif-Xcode&lt;/a&gt; - A wrapper for &lt;a href=&#34;https://github.com/AOMediaCodec/libavif&#34;&gt;libavif&lt;/a&gt; + an Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;and more third-party C/C++ image codec libraries with CocoaPods/Carthage/SwiftPM support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use those directly, or create similar components of your own, by using the customizable architecture of SDWebImage.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 9.0 or later&lt;/li&gt; &#xA; &lt;li&gt;tvOS 9.0 or later&lt;/li&gt; &#xA; &lt;li&gt;watchOS 2.0 or later&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.11 or later (10.15 for Catalyst)&lt;/li&gt; &#xA; &lt;li&gt;Xcode 11.0 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Backwards compatibility&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For iOS 8, macOS 10.10 or Xcode &amp;lt; 11, use &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/releases/tag/5.9.5&#34;&gt;any 5.x version up to 5.9.5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For iOS 7, macOS 10.9 or Xcode &amp;lt; 8, use &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/releases/tag/4.4.6&#34;&gt;any 4.x version up to 4.4.6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For macOS 10.8, use &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/releases/tag/4.3.0&#34;&gt;any 4.x version up to 4.3.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For iOS 5 and 6, use &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/releases/tag/3.7.6&#34;&gt;any 3.x version up to 3.7.6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For iOS &amp;lt; 5.0, please use the last &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/tree/2.0-compat&#34;&gt;2.0 version&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read this Readme doc&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage#how-to-use&#34;&gt;How to use section&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://sdwebimage.github.io/&#34;&gt;Latest Documentation&lt;/a&gt; and &lt;a href=&#34;http://cocoadocs.org/docsets/SDWebImage/&#34;&gt;CocoaDocs for old version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Try the example by downloading the project from Github or even easier using CocoaPods try &lt;code&gt;pod try SDWebImage&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Installation-Guide&#34;&gt;Installation Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/raw/master/Docs/SDWebImage-5.0-Migration-guide.md&#34;&gt;SDWebImage 5.0 Migration Guide&lt;/a&gt; to get an idea of the changes from 4.x to 5.x&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/raw/master/Docs/SDWebImage-4.0-Migration-guide.md&#34;&gt;SDWebImage 4.0 Migration Guide&lt;/a&gt; to get an idea of the changes from 3.x to 4.x&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Common-Problems&#34;&gt;Common Problems&lt;/a&gt; to find the solution for common problems&lt;/li&gt; &#xA; &lt;li&gt;Go to the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki&#34;&gt;Wiki Page&lt;/a&gt; for more information such as &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage&#34;&gt;Advanced Usage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who Uses It&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Find out &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Who-Uses-SDWebImage&#34;&gt;who uses SDWebImage&lt;/a&gt; and add your app to the list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/sdwebimage&#34;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;sdwebimage&#39;)&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/sdwebimage&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need IRC channel&lt;/strong&gt;, use &lt;a href=&#34;https://gitter.im/SDWebImage/community&#34;&gt;Gitter&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/raw/master/.github/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For &lt;strong&gt;development contribution guide&lt;/strong&gt;, read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/How-to-Contribute&#34;&gt;How-To-Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For &lt;strong&gt;understanding code architecture&lt;/strong&gt;, read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/5.6-Code-Architecture-Analysis&#34;&gt;Code Architecture Analysis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How To Use&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Objective-C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;SDWebImage/SDWebImage.h&amp;gt;&#xA;...&#xA;[imageView sd_setImageWithURL:[NSURL URLWithString:@&#34;http://www.domain.com/path/to/image.jpg&#34;]&#xA;             placeholderImage:[UIImage imageNamed:@&#34;placeholder.png&#34;]];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SDWebImage&#xA;&#xA;imageView.sd_setImage(with: URL(string: &#34;http://www.domain.com/path/to/image.jpg&#34;), placeholderImage: UIImage(named: &#34;placeholder.png&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For details about how to use the library and clear examples, see &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/raw/master/Docs/HowToUse.md&#34;&gt;The detailed How to use&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Animated Images (GIF) support&lt;/h2&gt; &#xA;&lt;p&gt;In 5.0, we introduced a brand new mechanism for supporting animated images. This includes animated image loading, rendering, decoding, and also supports customizations (for advanced users).&lt;/p&gt; &#xA;&lt;p&gt;This animated image solution is available for &lt;code&gt;iOS&lt;/code&gt;/&lt;code&gt;tvOS&lt;/code&gt;/&lt;code&gt;macOS&lt;/code&gt;. The &lt;code&gt;SDAnimatedImage&lt;/code&gt; is subclass of &lt;code&gt;UIImage/NSImage&lt;/code&gt;, and &lt;code&gt;SDAnimatedImageView&lt;/code&gt; is subclass of &lt;code&gt;UIImageView/NSImageView&lt;/code&gt;, to make them compatible with the common frameworks APIs.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;SDAnimatedImageView&lt;/code&gt; supports the familiar image loading category methods, works like drop-in replacement for &lt;code&gt;UIImageView/NSImageView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t have &lt;code&gt;UIView&lt;/code&gt; (like &lt;code&gt;WatchKit&lt;/code&gt; or &lt;code&gt;CALayer&lt;/code&gt;)? you can still use &lt;code&gt;SDAnimatedPlayer&lt;/code&gt; the player engine for advanced playback and rendering.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#animated-image-50&#34;&gt;Animated Image&lt;/a&gt; for more detailed information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Objective-C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;SDAnimatedImageView *imageView = [SDAnimatedImageView new];&#xA;SDAnimatedImage *animatedImage = [SDAnimatedImage imageNamed:@&#34;image.gif&#34;];&#xA;imageView.image = animatedImage;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let imageView = SDAnimatedImageView()&#xA;let animatedImage = SDAnimatedImage(named: &#34;image.gif&#34;)&#xA;imageView.image = animatedImage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;FLAnimatedImage integration has its own dedicated repo&lt;/h4&gt; &#xA;&lt;p&gt;In order to clean up things and make our core project do less things, we decided that the &lt;code&gt;FLAnimatedImage&lt;/code&gt; integration does not belong here. From 5.0, this will still be available, but under a dedicated repo &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageFLPlugin&#34;&gt;SDWebImageFLPlugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are four ways to use SDWebImage in your project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;using CocoaPods&lt;/li&gt; &#xA; &lt;li&gt;using Carthage&lt;/li&gt; &#xA; &lt;li&gt;using Swift Package Manager&lt;/li&gt; &#xA; &lt;li&gt;manual install (build frameworks or embed Xcode Project)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation with CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Objective-C, which automates and simplifies the process of using 3rd-party libraries in your projects. See the &lt;a href=&#34;http://cocoapods.org/#get_started&#34;&gt;Get Started&lt;/a&gt; section for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Podfile&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;platform :ios, &#39;8.0&#39;&#xA;pod &#39;SDWebImage&#39;, &#39;~&amp;gt; 5.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Swift and static framework&lt;/h5&gt; &#xA;&lt;p&gt;Swift project previously had to use &lt;code&gt;use_frameworks!&lt;/code&gt; to make all Pods into dynamic framework to let CocoaPods work.&lt;/p&gt; &#xA;&lt;p&gt;However, starting with &lt;code&gt;CocoaPods 1.5.0+&lt;/code&gt; (with &lt;code&gt;Xcode 9+&lt;/code&gt;), which supports to build both Objective-C &amp;amp;&amp;amp; Swift code into static framework. You can use modular headers to use SDWebImage as static framework, without the need of &lt;code&gt;use_frameworks!&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;platform :ios, &#39;8.0&#39;&#xA;# Uncomment the next line when you want all Pods as static framework&#xA;# use_modular_headers!&#xA;pod &#39;SDWebImage&#39;, :modular_headers =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more on &lt;a href=&#34;http://blog.cocoapods.org/CocoaPods-1.5.0/&#34;&gt;CocoaPods 1.5.0 — Swift Static Libraries&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If not, you still need to add &lt;code&gt;use_frameworks!&lt;/code&gt; to use SDWebImage as dynamic framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;platform :ios, &#39;8.0&#39;&#xA;use_frameworks!&#xA;pod &#39;SDWebImage&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Subspecs&lt;/h4&gt; &#xA;&lt;p&gt;There are 2 subspecs available now: &lt;code&gt;Core&lt;/code&gt; and &lt;code&gt;MapKit&lt;/code&gt; (this means you can install only some of the SDWebImage modules. By default, you get just &lt;code&gt;Core&lt;/code&gt;, so if you need &lt;code&gt;MapKit&lt;/code&gt;, you need to specify it).&lt;/p&gt; &#xA;&lt;p&gt;Podfile example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;SDWebImage/MapKit&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation with Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a lightweight dependency manager for Swift and Objective-C. It leverages CocoaTouch modules and is less invasive than CocoaPods.&lt;/p&gt; &#xA;&lt;p&gt;To install with carthage, follow the instruction on &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Carthage users can point to this repository and use whichever generated framework they&#39;d like: SDWebImage, SDWebImageMapKit or both.&lt;/p&gt; &#xA;&lt;p&gt;Make the following entry in your Cartfile: &lt;code&gt;github &#34;SDWebImage/SDWebImage&#34;&lt;/code&gt; Then run &lt;code&gt;carthage update&lt;/code&gt; If this is your first time using Carthage in the project, you&#39;ll need to go through some additional steps as explained &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;over at Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: At this time, Carthage does not provide a way to build only specific repository subcomponents (or equivalent of CocoaPods&#39;s subspecs). All components and their dependencies will be built with the above command. However, you don&#39;t need to copy frameworks you aren&#39;t using into your project. For instance, if you aren&#39;t using &lt;code&gt;SDWebImageMapKit&lt;/code&gt;, feel free to delete that framework from the Carthage Build directory after &lt;code&gt;carthage update&lt;/code&gt; completes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Installation with Swift Package Manager (Xcode 11+)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; (SwiftPM) is a tool for managing the distribution of Swift code as well as C-family dependency. From Xcode 11, SwiftPM got natively integrated with Xcode.&lt;/p&gt; &#xA;&lt;p&gt;SDWebImage support SwiftPM from version 5.1.0. To use SwiftPM, you should use Xcode 11 to open your project. Click &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Swift Packages&lt;/code&gt; -&amp;gt; &lt;code&gt;Add Package Dependency&lt;/code&gt;, enter &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage.git&#34;&gt;SDWebImage repo&#39;s URL&lt;/a&gt;. Or you can login Xcode with your GitHub account and just type &lt;code&gt;SDWebImage&lt;/code&gt; to search.&lt;/p&gt; &#xA;&lt;p&gt;After select the package, you can choose the dependency type (tagged version, branch or commit). Then Xcode will setup all the stuff for you.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re a framework author and use SDWebImage as a dependency, update your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;    // 5.1.0 ..&amp;lt; 6.0.0&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/SDWebImage/SDWebImage.git&#34;, from: &#34;5.1.0&#34;)&#xA;    ],&#xA;    // ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual Installation Guide&lt;/h3&gt; &#xA;&lt;p&gt;See more on &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Installation-Guide#manual-installation-guide&#34;&gt;Manual install Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Import headers in your source files&lt;/h3&gt; &#xA;&lt;p&gt;In the source files where you need to use the library, import the umbrella header file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;SDWebImage/SDWebImage.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also recommend to use the module import syntax, available for CocoaPods(enable &lt;code&gt;modular_headers&lt;/code&gt;)/Carthage/SwiftPM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objecitivec&#34;&gt;@import SDWebImage;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build Project&lt;/h3&gt; &#xA;&lt;p&gt;At this point your workspace should build without error. If you are having problem, post to the Issue and the community can help you solve it.&lt;/p&gt; &#xA;&lt;h2&gt;Data Collection Practices&lt;/h2&gt; &#xA;&lt;p&gt;As required by the &lt;a href=&#34;https://developer.apple.com/app-store/app-privacy-details/&#34;&gt;App privacy details on the App Store&lt;/a&gt;, here&#39;s SDWebImage&#39;s list of &lt;a href=&#34;https://sdwebimage.github.io/DataCollection/index.html&#34;&gt;Data Collection Practices&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rs&#34;&gt;Olivier Poitrey&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Collaborators&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mythodeia&#34;&gt;Konstantinos K.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bpoplauschi&#34;&gt;Bogdan Poplauschi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skyline75489&#34;&gt;Chester Liu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dreampiggy&#34;&gt;DreamPiggy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zhongwuzw&#34;&gt;Wu Zhong&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all the people who have already contributed to SDWebImage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/SDWebImage/contributors.svg?width=890&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;All source code is licensed under the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;To learn about SDWebImage&#39;s architecture design for contribution, read &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/5.6-Code-Architecture-Analysis&#34;&gt;The Core of SDWebImage v5.6 Architecture&lt;/a&gt;. Thanks @looseyi for the post and translation.&lt;/p&gt; &#xA;&lt;h4&gt;High Level Diagram&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageHighLevelDiagram.jpeg&#34; title=&#34;SDWebImage high level diagram&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Overall Class Diagram&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageClassDiagram.png&#34; title=&#34;SDWebImage overall class diagram&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Top Level API Diagram&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageTopLevelClassDiagram.png&#34; title=&#34;SDWebImage top level API diagram&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Main Sequence Diagram&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageSequenceDiagram.png&#34; title=&#34;SDWebImage sequence diagram&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;More detailed diagrams&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageManagerClassDiagram.png&#34;&gt;Manager API Diagram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageCodersClassDiagram.png&#34;&gt;Coders API Diagram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageLoaderClassDiagram.png&#34;&gt;Loader API Diagram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageCacheClassDiagram.png&#34;&gt;Cache API Diagram&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Tunnelblick/Tunnelblick</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/Tunnelblick/Tunnelblick</id>
    <link href="https://github.com/Tunnelblick/Tunnelblick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Tunnelblick website is at https://tunnelblick.net; the official Tunnelblick GitHub repository is at https://github.com/Tunnelblick&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tunnelblick&lt;/h1&gt; &#xA;&lt;p&gt;The official Tunnelblick website is at &lt;a href=&#34;https://tunnelblick.net&#34;&gt;https://tunnelblick.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A snapshot copy of the website is at &lt;a href=&#34;https://tunnelblick.github.io&#34;&gt;https://tunnelblick.github.io&lt;/a&gt;. It is recreated at each release and when significant changes are made to the website.&lt;/p&gt; &#xA;&lt;p&gt;The official Tunnelblick source code respository is at &lt;a href=&#34;https://github.com/Tunnelblick/Tunnelblick&#34;&gt;https://github.com/Tunnelblick/Tunnelblick&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Tunnelblick?&lt;/h2&gt; &#xA;&lt;p&gt;Tunnelblick is a free, open source graphic user interface for &lt;a href=&#34;https://openvpn.net/index.php/open-source.html&#34;&gt;OpenVPN&lt;/a&gt; on macOS. It provides easy control of OpenVPN client and/or server connections.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Tunnelblick is released under the terms of the GNU General Public License, version 2.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs / Issues&lt;/h2&gt; &#xA;&lt;p&gt;We welcome reports of issues and bugs. We prefer you post issues and bug reports on the &lt;a href=&#34;https://groups.google.com/forum/#!forum/tunnelblick-discuss&#34;&gt;Tunnelblick Discussion Group&lt;/a&gt;, but also accept &lt;a href=&#34;https://github.com/Tunnelblick/Tunnelblick/issues&#34;&gt;Tunnelblick GitHub Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pull Requests&lt;/h2&gt; &#xA;&lt;p&gt;We welcome PRs for everything &lt;strong&gt;except&lt;/strong&gt; translations and localization. We &lt;strong&gt;do not&lt;/strong&gt; accept PRs for localization or translations. To help with translations and localization, please see &lt;a href=&#34;https://tunnelblick.net/cLocalizeTranslate.html&#34;&gt;Localizing and Translating Tunnelblick&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://github.com/Tunnelblick/Tunnelblick/raw/master/.github/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/Tunnelblick/Tunnelblick/raw/master/.github/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FLEXTool/FLEX</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/FLEXTool/FLEX</id>
    <link href="https://github.com/FLEXTool/FLEX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An in-app debugging and exploration tool for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FLEX&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/?q=FLEX&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/FLEX.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Flipboard/FLEX/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/FLEX.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/FLEX.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ryanolsonk&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contact-@ryanolsonk-blue.svg?style=flat&#34; alt=&#34;Twitter: @ryanolsonk&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/Flipboard/FLEX&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Flipboard/FLEX.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;FLEX (Flipboard Explorer) is a set of in-app debugging and exploration tools for iOS development. When presented, FLEX shows a toolbar that lives in a window above your application. From this toolbar, you can view and modify nearly every piece of state in your running application.&lt;/p&gt; &#xA;&lt;img alt=&#34;Demo&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70185687-e842c800-16af-11ea-8ef9-9e071380a462.gif&#34;&gt; &#xA;&lt;h2&gt;Give Yourself Debugging Superpowers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inspect and modify views in the hierarchy.&lt;/li&gt; &#xA; &lt;li&gt;See the properties and ivars on any object.&lt;/li&gt; &#xA; &lt;li&gt;Dynamically modify many properties and ivars.&lt;/li&gt; &#xA; &lt;li&gt;Dynamically call instance and class methods.&lt;/li&gt; &#xA; &lt;li&gt;Observe detailed network request history with timing, headers, and full responses.&lt;/li&gt; &#xA; &lt;li&gt;Add your own simulator keyboard shortcuts.&lt;/li&gt; &#xA; &lt;li&gt;View system log messages (e.g. from &lt;code&gt;NSLog&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Access any live object via a scan of the heap.&lt;/li&gt; &#xA; &lt;li&gt;View the file system within your app&#39;s sandbox.&lt;/li&gt; &#xA; &lt;li&gt;Browse SQLite/Realm databases in the file system.&lt;/li&gt; &#xA; &lt;li&gt;Trigger 3D touch in the simulator using the control, shift, and command keys.&lt;/li&gt; &#xA; &lt;li&gt;Explore all classes in your app and linked systems frameworks (public and private).&lt;/li&gt; &#xA; &lt;li&gt;Quickly access useful objects such as &lt;code&gt;[UIApplication sharedApplication]&lt;/code&gt;, the app delegate, the root view controller on the key window, and more.&lt;/li&gt; &#xA; &lt;li&gt;Dynamically view and modify &lt;code&gt;NSUserDefaults&lt;/code&gt; values.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unlike many other debugging tools, FLEX runs entirely inside your app, so you don&#39;t need to be connected to LLDB/Xcode or a different remote debugging server. It works well in the simulator and on physical devices.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In the iOS simulator, you can use keyboard shortcuts to activate FLEX. &lt;code&gt;f&lt;/code&gt; will toggle the FLEX toolbar. Hit the &lt;code&gt;?&lt;/code&gt; key for a full list of shortcuts. You can also show FLEX programmatically:&lt;/p&gt; &#xA;&lt;p&gt;Short version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Objective-C&#xA;[[FLEXManager sharedManager] showExplorer];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Swift&#xA;FLEXManager.shared.showExplorer()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More complete version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#if DEBUG&#xA;#import &#34;FLEXManager.h&#34;&#xA;#endif&#xA;&#xA;...&#xA;&#xA;- (void)handleSixFingerQuadrupleTap:(UITapGestureRecognizer *)tapRecognizer&#xA;{&#xA;#if DEBUG&#xA;    if (tapRecognizer.state == UIGestureRecognizerStateRecognized) {&#xA;        // This could also live in a handler for a keyboard shortcut, debug menu item, etc.&#xA;        [[FLEXManager sharedManager] showExplorer];&#xA;    }&#xA;#endif&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Aside: tvOS&lt;/h4&gt; &#xA;&lt;p&gt;FLEX itself does not support tvOS out of the box. However, others have taken it upon themselves to port FLEX to tvOS. If you need tvOS support, seek out one of these forks. &lt;a href=&#34;https://github.com/lechium/FLEX/tree/tvos&#34;&gt;Here is one such fork.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feature Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Modify Views&lt;/h3&gt; &#xA;&lt;p&gt;Once a view is selected, you can tap on the info bar below the toolbar to present more details about the view. From there, you can modify properties and call methods.&lt;/p&gt; &#xA;&lt;img alt=&#34;Modify Views&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271816-c5c2b480-176c-11ea-8bf4-2c5a755bc392.gif&#34;&gt; &#xA;&lt;h3&gt;Network History&lt;/h3&gt; &#xA;&lt;p&gt;When enabled, network debugging allows you to view all requests made using NSURLConnection or NSURLSession. Settings allow you to adjust what kind of response bodies get cached and the maximum size limit of the response cache. You can choose to have network debugging enabled automatically on app launch. This setting is persisted across launches.&lt;/p&gt; &#xA;&lt;img alt=&#34;Network History&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271876-e5f27380-176c-11ea-98ef-24170205b706.gif&#34;&gt; &#xA;&lt;h3&gt;All Objects on the Heap&lt;/h3&gt; &#xA;&lt;p&gt;FLEX queries malloc for all the live allocated memory blocks and searches for ones that look like objects. You can see everything from here.&lt;/p&gt; &#xA;&lt;img alt=&#34;Heap/Live Objects Explorer&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271850-d83cee00-176c-11ea-9750-ee3a479c6769.gif&#34;&gt; &#xA;&lt;h3&gt;Explore-at-address&lt;/h3&gt; &#xA;&lt;p&gt;If you get your hands on an arbitrary address, you can try explore the object at that address, and FLEX will open it if it can verify the address points to a valid object. If FLEX isn&#39;t sure, it&#39;ll warn you and refuse to dereference the pointer. If you know better, however, you can choose to explore it anyway by choosing &#34;Unsafe Explore&#34;&lt;/p&gt; &#xA;&lt;img alt=&#34;Address Explorer&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271798-bb081f80-176c-11ea-806d-9d74ac293641.gif&#34;&gt; &#xA;&lt;h3&gt;Simulator Keyboard Shortcuts&lt;/h3&gt; &#xA;&lt;p&gt;Default keyboard shortcuts allow you to activate the FLEX tools, scroll with the arrow keys, and close modals using the escape key. You can also add custom keyboard shortcuts via &lt;code&gt;-[FLEXManager registerSimulatorShortcutWithKey:modifiers:action:description]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;img alt=&#34;Simulator Keyboard Shortcuts&#34; width=&#34;40%&#34; height=&#34;40%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70272984-d3793980-176e-11ea-89a2-66d187d71b4c.png&#34;&gt; &#xA;&lt;h3&gt;File Browser&lt;/h3&gt; &#xA;&lt;p&gt;View the file system within your app&#39;s bundle or sandbox container. FLEX shows file sizes, image previews, and pretty prints &lt;code&gt;.json&lt;/code&gt; and &lt;code&gt;.plist&lt;/code&gt; files. You can rename and delete files and folders. You can &#34;share&#34; any file if you want to inspect them outside of your app.&lt;/p&gt; &#xA;&lt;img alt=&#34;File Browser&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271831-d115e000-176c-11ea-8078-ada291f980f3.gif&#34;&gt; &#xA;&lt;h3&gt;SQLite Browser&lt;/h3&gt; &#xA;&lt;p&gt;SQLite database files (with either &lt;code&gt;.db&lt;/code&gt; or &lt;code&gt;.sqlite&lt;/code&gt; extensions), or &lt;a href=&#34;https://realm.io&#34;&gt;Realm&lt;/a&gt; database files can be explored using FLEX. The database browser lets you view all tables, and individual tables can be sorted by tapping column headers.&lt;/p&gt; &#xA;&lt;img alt=&#34;SQLite Browser&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271881-ea1e9100-176c-11ea-9a42-01618311c869.gif&#34;&gt; &#xA;&lt;h3&gt;3D Touch in the Simulator&lt;/h3&gt; &#xA;&lt;p&gt;Using a combination of the command, control, and shift keys, you can simulate different levels of 3D touch pressure in the simulator. Each key contributes 1/3 of maximum possible force. Note that you need to move the touch slightly to get pressure updates.&lt;/p&gt; &#xA;&lt;img alt=&#34;Simulator 3D Touch&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://cloud.githubusercontent.com/assets/1422245/11786615/5d4ef96c-a23c-11e5-975e-67275341e439.gif&#34;&gt; &#xA;&lt;h3&gt;Explore Loaded Libraries&lt;/h3&gt; &#xA;&lt;p&gt;Go digging for all things public and private. To learn more about a class, you can create an instance of it and explore its default state. You can also type in a class name to jump to that class directly if you know which class you&#39;re looking for.&lt;/p&gt; &#xA;&lt;img alt=&#34;Loaded Libraries Exploration&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271868-dffc9280-176c-11ea-8704-a0c05b75cc5f.gif&#34;&gt; &#xA;&lt;h3&gt;NSUserDefaults Editing&lt;/h3&gt; &#xA;&lt;p&gt;FLEX allows you to edit defaults that are any combination of strings, numbers, arrays, and dictionaries. The input is parsed as &lt;code&gt;JSON&lt;/code&gt;. If other kinds of objects are set for a defaults key (i.e. &lt;code&gt;NSDate&lt;/code&gt;), you can view them but not edit them.&lt;/p&gt; &#xA;&lt;img alt=&#34;NSUserDefaults Editing&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271889-edb21800-176c-11ea-92b4-71e07d2b6ce7.gif&#34;&gt; &#xA;&lt;h3&gt;Learning from Other Apps&lt;/h3&gt; &#xA;&lt;p&gt;The code injection is left as an exercise for the reader. &lt;span&gt;😇&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img alt=&#34;Springboard Lock Screen&#34; width=&#34;25%&#34; height=&#34;25%&#34; src=&#34;https://engineering.flipboard.com/assets/flex/flex-readme-reverse-1.png&#34;&gt; &lt;img alt=&#34;Springboard Home Screen&#34; width=&#34;25%&#34; height=&#34;25%&#34; src=&#34;https://engineering.flipboard.com/assets/flex/flex-readme-reverse-2.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;FLEX requires an app that targets iOS 9 or higher. To run the Example project, open a Terminal window in the Example/ folder and run &lt;code&gt;pod install&lt;/code&gt;, then open the generated workspace.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;FLEX is available on &lt;a href=&#34;https://cocoapods.org/pods/FLEX&#34;&gt;CocoaPods&lt;/a&gt;. Simply add the following line to your podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FLEX&#39;, :configurations =&amp;gt; [&#39;Debug&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;flipboard/FLEX&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Buck&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Buck, you may want to silence some of the warnings emitted by FLEX. You will need to build FLEX as an &lt;code&gt;apple_library&lt;/code&gt; and pass the &lt;code&gt;-Wno-unsupported-availability-guard&lt;/code&gt; flag, as well as the other warning flags below to disable any other warnings FLEX may have.&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Manually add the files in &lt;code&gt;Classes/&lt;/code&gt; to your Xcode project, or just drag in the entire &lt;code&gt;FLEX/&lt;/code&gt; folder. Be sure to exclude FLEX from &lt;code&gt;Release&lt;/code&gt; builds or your app will be rejected.&lt;/p&gt; &#xA;&lt;h5&gt;Silencing warnings&lt;/h5&gt; &#xA;&lt;p&gt;Add the following flags to to &lt;strong&gt;Other Warnings Flags&lt;/strong&gt; in &lt;strong&gt;Build Settings:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-Wno-deprecated-declarations&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Wno-strict-prototypes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Wno-unsupported-availability-guard&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Include the dependency in the &lt;code&gt;depdendencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/FLEXTool/FLEX.git&#34;, .upToNextMajor(from: &#34;4.3.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, include the library in your target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;.target(&#xA;    name: &#34;YourDependency&#34;,&#xA;    dependencies: [&#xA;        &#34;FLEX&#34;&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Excluding FLEX from Release (App Store) Builds&lt;/h2&gt; &#xA;&lt;p&gt;FLEX makes it easy to explore the internals of your app, so it is not something you should expose to your users. Fortunately, it is easy to exclude FLEX files from Release builds. The strategies differ depending on how you integrated FLEX in your project, and are described below.&lt;/p&gt; &#xA;&lt;p&gt;Wrap the places in your code where you integrate FLEX with an &lt;code&gt;#if DEBUG&lt;/code&gt; statement to ensure the tool is only accessible in your &lt;code&gt;Debug&lt;/code&gt; builds and to avoid errors in your &lt;code&gt;Release&lt;/code&gt; builds. For more help with integrating FLEX, see the example project.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;CocoaPods automatically excludes FLEX from release builds if you only specify the Debug configuration for FLEX in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FLEX&#39;, :configurations =&amp;gt; [&#39;Debug&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Do NOT add &lt;code&gt;FLEX.framework&lt;/code&gt; to the embedded binaries of your target, as it would otherwise be included in all builds (therefore also in release ones).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Instead, add &lt;code&gt;$(PROJECT_DIR)/Carthage/Build/iOS&lt;/code&gt; to your target &lt;em&gt;Framework Search Paths&lt;/em&gt; (this setting might already be present if you already included other frameworks with Carthage). This makes it possible to import the FLEX framework from your source files. It does not harm if this setting is added for all configurations, but it should at least be added for the debug one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a &lt;em&gt;Run Script Phase&lt;/em&gt; to your target (inserting it after the existing &lt;code&gt;Link Binary with Libraries&lt;/code&gt; phase, for example), and which will embed &lt;code&gt;FLEX.framework&lt;/code&gt; in debug builds only:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;if [ &#34;$CONFIGURATION&#34; == &#34;Debug&#34; ]; then&#xA;  /usr/local/bin/carthage copy-frameworks&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, add &lt;code&gt;$(SRCROOT)/Carthage/Build/iOS/FLEX.framework&lt;/code&gt; as input file of this script phase.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;75%&#34; height=&#34;75%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70274062-0d4b3f80-1771-11ea-94ea-ca7e7b5ca244.jpg&#34;&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;In Xcode, navigate to &lt;code&gt;Build Settings &amp;gt; Build Options &amp;gt; Excluded Source File Names&lt;/code&gt;. For your &lt;code&gt;Release&lt;/code&gt; configuration, set it to &lt;code&gt;FLEX.o&lt;/code&gt; like this to exclude all files with the &lt;code&gt;FLEX&lt;/code&gt; prefix:&lt;/p&gt; &#xA;&lt;img width=&#34;75%&#34; height=&#34;75%&#34; src=&#34;https://user-images.githubusercontent.com/1234765/98673373-8545c080-2357-11eb-9587-0743998e23ba.png&#34;&gt; &#xA;&lt;h3&gt;FLEX files added manually to a project&lt;/h3&gt; &#xA;&lt;p&gt;In Xcode, navigate to &lt;code&gt;Build Settings &amp;gt; Build Options &amp;gt; Excluded Source File Names&lt;/code&gt;. For your &lt;code&gt;Release&lt;/code&gt; configuration, set it to &lt;code&gt;FLEX*&lt;/code&gt; like this to exclude all files with the &lt;code&gt;FLEX&lt;/code&gt; prefix:&lt;/p&gt; &#xA;&lt;img width=&#34;75%&#34; height=&#34;75%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70281926-e21d1c00-1781-11ea-92eb-aee340791da8.png&#34;&gt; &#xA;&lt;h2&gt;Additional Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When setting fields of type &lt;code&gt;id&lt;/code&gt; or values in &lt;code&gt;NSUserDefaults&lt;/code&gt;, FLEX attempts to parse the input string as &lt;code&gt;JSON&lt;/code&gt;. This allows you to use a combination of strings, numbers, arrays, and dictionaries. If you want to set a string value, it must be wrapped in quotes. For ivars or properties that are explicitly typed as &lt;code&gt;NSStrings&lt;/code&gt;, quotes are not required.&lt;/li&gt; &#xA; &lt;li&gt;You may want to disable the exception breakpoint while using FLEX. Certain functions that FLEX uses throw exceptions when they get input they can&#39;t handle (i.e. &lt;code&gt;NSGetSizeAndAlignment()&lt;/code&gt;). FLEX catches these to avoid crashing, but your breakpoint will get hit if it is active.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks &amp;amp; Credits&lt;/h2&gt; &#xA;&lt;p&gt;FLEX builds on ideas and inspiration from open source tools that came before it. The following resources have been particularly helpful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NSExceptional/MirrorKit&#34;&gt;MirrorKit&lt;/a&gt;: an Objective-C wrapper around the Objective-C runtime.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domesticcatsoftware/DCIntrospect&#34;&gt;DCIntrospect&lt;/a&gt;: view hierarchy debugging for the iOS simulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/PonyDebugger&#34;&gt;PonyDebugger&lt;/a&gt;: network, core data, and view hierarchy debugging using the Chrome Developer Tools interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mikeash.com/pyblog/&#34;&gt;Mike Ash&lt;/a&gt;: well written, informative blog posts on all things obj-c and more. The links below were very useful for this project:&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikeash/MAObjCRuntime&#34;&gt;MAObjCRuntime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mikeash.com/pyblog/friday-qa-2013-02-08-lets-build-key-value-coding.html&#34;&gt;Let&#39;s Build Key Value Coding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mikeash.com/pyblog/friday-qa-2013-09-27-arm64-and-you.html&#34;&gt;ARM64 and You&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/heardrwt/RHObjectiveBeagle&#34;&gt;RHObjectiveBeagle&lt;/a&gt;: a tool for scanning the heap for live objects. It should be noted that the source code of RHObjectiveBeagle was not consulted due to licensing concerns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.opensource.apple.com/source/lldb/lldb-179.1/examples/darwin/heap_find/heap/heap_find.cpp&#34;&gt;heap_find.cpp&lt;/a&gt;: an example of enumerating malloc blocks for finding objects on the heap.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/samdmarshall/17f4e66b5e2e579fd396&#34;&gt;Gist&lt;/a&gt; from &lt;a href=&#34;https://github.com/samdmarshall&#34;&gt;@samdmarshall&lt;/a&gt;: another example of enumerating malloc blocks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sealiesoftware.com/blog/archive/2013/09/24/objc_explain_Non-pointer_isa.html&#34;&gt;Non-pointer isa&lt;/a&gt;: an explanation of changes to the isa field on iOS for ARM64 and mention of the useful &lt;code&gt;objc_debug_isa_class_mask&lt;/code&gt; variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicklockwood/GZIP&#34;&gt;GZIP&lt;/a&gt;: A library for compressing/decompressing data on iOS using libz.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ccgus/fmdb&#34;&gt;FMDB&lt;/a&gt;: This is an Objective-C wrapper around SQLite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/indragiek/InAppViewDebugger&#34;&gt;InAppViewDebugger&lt;/a&gt;: The inspiration and reference implementation for FLEX 4&#39;s 3D view explorer, by @indragiek.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://github.com/Flipboard/FLEX/raw/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift runtime introspection (swift classes, swift objects on the heap, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Add new NSUserDefault key/value pairs on the fly&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>google/GoogleUtilities</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/google/GoogleUtilities</id>
    <link href="https://github.com/google/GoogleUtilities" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/GoogleUtilities&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/GoogleUtilities.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/GoogleUtilities&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/GoogleUtilities.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/GoogleUtilities&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/GoogleUtilities.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/firebase/firebase-ios-sdk/actions&#34;&gt;&lt;img src=&#34;https://github.com/firebase/firebase-ios-sdk/workflows/google-utilities/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;GoogleUtilities&lt;/h1&gt; &#xA;&lt;p&gt;GoogleUtilities provides a set of utilities for Firebase and other Google SDKs for Apple platform development.&lt;/p&gt; &#xA;&lt;p&gt;The utilities are not directly supported for non-Google library usage.&lt;/p&gt; &#xA;&lt;h2&gt;Integration Testing&lt;/h2&gt; &#xA;&lt;p&gt;These instructions apply to minor and patch version updates. Major versions need a customized adaptation.&lt;/p&gt; &#xA;&lt;p&gt;After the CI is green:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Determine the next version for release by checking the &lt;a href=&#34;https://github.com/google/GoogleUtilities/tags&#34;&gt;tagged releases&lt;/a&gt;. Ensure that the next release version keeps the Swift PM and CocoaPods versions in sync.&lt;/li&gt; &#xA; &lt;li&gt;Verify that the releasing version is the latest entry in the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;, updating it if necessary.&lt;/li&gt; &#xA; &lt;li&gt;Update the version in the podspec to match the latest entry in the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Checkout the &lt;code&gt;main&lt;/code&gt; branch and ensure it is up to date &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git checkout main&#xA;git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add the CocoaPods tag (&lt;code&gt;{version}&lt;/code&gt; will be the latest version in the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/GoogleUtilities.podspec#L3&#34;&gt;podspec&lt;/a&gt;) &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git tag CocoaPods-{version}&#xA;git push origin CocoaPods-{version}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Push the podspec to the designated repo &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;If this version of GoogleUtilities is intended to launch &lt;strong&gt;before or with&lt;/strong&gt; the next Firebase release:&lt;/p&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Push to &lt;b&gt;SpecsStaging&lt;/b&gt;&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo push --skip-tests staging GoogleUtilities.podspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;p&gt;If the command fails with &lt;code&gt;Unable to find the &#39;staging&#39; repo.&lt;/code&gt;, add the staging repo with:&lt;/p&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo add staging git@github.com:firebase/SpecsStaging.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Otherwise:&lt;/p&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Push to &lt;b&gt;SpecsDev&lt;/b&gt;&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo push --skip-tests dev GoogleUtilities.podspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;p&gt;If the command fails with &lt;code&gt;Unable to find the &#39;dev&#39; repo.&lt;/code&gt;, add the dev repo with:&lt;/p&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo add dev git@github.com:firebase/SpecsDev.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run Firebase CI by waiting until next nightly or adding a PR that touches &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On google3, run copybara using the command below. Then, start a global TAP on the generated CL. Deflake as needed. &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;third_party/firebase/ios/Releases/run_copy_bara.py --directory GoogleUtilities --branch main&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Publishing&lt;/h2&gt; &#xA;&lt;p&gt;The release process is as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/#swift-package-manager&#34;&gt;Tag and release for Swift PM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/#cocoapods&#34;&gt;Publish to CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/#create-github-release&#34;&gt;Create GitHub Release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/#post-release-cleanup&#34;&gt;Perform post release cleanup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;By creating and &lt;a href=&#34;https://github.com/google/GoogleUtilities/tags&#34;&gt;pushing a tag&lt;/a&gt; for Swift PM, the newly tagged version will be immediately released for public use. Given this, please verify the intended time of release for Swift PM.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a version tag for Swift PM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git tag {version}&#xA;git push origin {version}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Ensure that any inflight PRs that depend on the new &lt;code&gt;GoogleUtilities&lt;/code&gt; version are updated to point to the newly tagged version rather than a checksum.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Publish the newly versioned pod to CocoaPods&lt;/p&gt; &lt;p&gt;It&#39;s recommended to point to the &lt;code&gt;GoogleUtilities.podspec&lt;/code&gt; in &lt;code&gt;staging&lt;/code&gt; to make sure the correct spec is being published.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod trunk push ~/.cocoapods/repos/staging/GoogleUtilities/{version}/GoogleUtilities.podspec&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note: In some cases, it may be acceptable to &lt;code&gt;pod trunk push&lt;/code&gt; with the &lt;code&gt;--skip-tests&lt;/code&gt; flag. Please double check with the maintainers before doing so.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;The pod push was successful if the above command logs: &lt;code&gt;🚀 GoogleUtilities ({version}) successfully published&lt;/code&gt;. In addition, a new commit that publishes the new version (co-authored by &lt;a href=&#34;https://github.com/CocoaPodsAtGoogle&#34;&gt;CocoaPodsAtGoogle&lt;/a&gt;) should appear in the &lt;a href=&#34;https://github.com/CocoaPods/Specs&#34;&gt;CocoaPods specs repo&lt;/a&gt;. Last, the latest version should be displayed on &lt;a href=&#34;https://cocoapods.org/pods/GoogleUtilities&#34;&gt;GoogleUtilities&#39;s CocoaPods page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/google/GoogleUtilities/releases/new/&#34;&gt;Create GitHub Release&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Update the &lt;a href=&#34;https://github.com/google/GoogleUtilities/releases/new/&#34;&gt;release template&lt;/a&gt;&#39;s &lt;strong&gt;Tag version&lt;/strong&gt; and &lt;strong&gt;Release title&lt;/strong&gt; fields with the latest version. In addition, reference the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/CHANGELOG.md&#34;&gt;Release Notes&lt;/a&gt; in the release&#39;s description.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/google/GoogleUtilities/releases/edit/9.0.1&#34;&gt;this release&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Don&#39;t forget to perform the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/#post-release-cleanup&#34;&gt;post release cleanup&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Post Release Cleanup&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Clean up &lt;b&gt;SpecsStaging&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pwd=$(pwd)&#xA;mkdir -p /tmp/release-cleanup &amp;amp;&amp;amp; cd $_&#xA;git clone git@github.com:firebase/SpecsStaging.git&#xA;cd SpecsStaging/&#xA;git rm -rf GoogleUtilities/&#xA;git commit -m &#34;Post publish cleanup&#34;&#xA;git push origin master&#xA;rm -rf /tmp/release-cleanup&#xA;cd $pwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To develop in this repository, ensure that you have at least the following software:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.0 (or later)&lt;/li&gt; &#xA; &lt;li&gt;CocoaPods 1.10.0 (or later)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/cocoapods-generate&#34;&gt;CocoaPods generate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the pod that you want to develop:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pod gen GoogleUtilities.podspec --local-sources=./ --auto-open --platforms=ios&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: If the CocoaPods cache is out of date, you may need to run &lt;code&gt;pod repo update&lt;/code&gt; before the &lt;code&gt;pod gen&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Note: Set the &lt;code&gt;--platforms&lt;/code&gt; option to &lt;code&gt;macos&lt;/code&gt; or &lt;code&gt;tvos&lt;/code&gt; to develop/test for those platforms. Since 10.2, Xcode does not properly handle multi-platform CocoaPods workspaces.&lt;/p&gt; &#xA;&lt;h3&gt;Development for Catalyst&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pod gen GoogleUtilities.podspec --local-sources=./ --auto-open --platforms=ios&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check the Mac box in the App-iOS Build Settings&lt;/li&gt; &#xA; &lt;li&gt;Sign the App in the Settings Signing &amp;amp; Capabilities tab&lt;/li&gt; &#xA; &lt;li&gt;Click Pods in the Project Manager&lt;/li&gt; &#xA; &lt;li&gt;Add Signing to the iOS host app and unit test targets&lt;/li&gt; &#xA; &lt;li&gt;Select the Unit-unit scheme&lt;/li&gt; &#xA; &lt;li&gt;Run it to build and test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively disable signing in each target:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to Build Settings tab&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;+&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Add User-Defined Setting&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;CODE_SIGNING_REQUIRED&lt;/code&gt; setting with a value of &lt;code&gt;NO&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code Formatting&lt;/h3&gt; &#xA;&lt;p&gt;To ensure that the code is formatted consistently, run the script &lt;a href=&#34;https://github.com/firebase/firebase-ios-sdk/raw/master/scripts/check.sh&#34;&gt;./scripts/check.sh&lt;/a&gt; before creating a PR.&lt;/p&gt; &#xA;&lt;p&gt;GitHub Actions will verify that any code changes are done in a style compliant way. Install &lt;code&gt;clang-format&lt;/code&gt; and &lt;code&gt;mint&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install clang-format@14&#xA;brew install mint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Unit Tests&lt;/h3&gt; &#xA;&lt;p&gt;Select a scheme and press Command-u to build a component and run its unit tests.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleUtilities/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The contents of this repository is licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>expo/expo</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/expo/expo</id>
    <link href="https://github.com/expo/expo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source platform for making universal native apps with React. Expo runs on Android, iOS, and the web.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://expo.dev/&#34;&gt; &lt;img alt=&#34;expo sdk&#34; height=&#34;128&#34; src=&#34;https://raw.githubusercontent.com/expo/expo/main/.github/resources/banner.png&#34;&gt; &lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://expo.dev/&#34;&gt;Expo&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;a href=&#34;https://expo.dev/&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a aria-label=&#34;SDK version&#34; href=&#34;https://www.npmjs.com/package/expo&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Expo SDK version&#34; src=&#34;https://img.shields.io/npm/v/expo.svg?style=flat-square&amp;amp;label=SDK&amp;amp;labelColor=000000&amp;amp;color=4630EB&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Join our forums&#34; href=&#34;https://forums.expo.dev&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Forums&#34; src=&#34;https://img.shields.io/badge/Ask%20Questions%20-blue.svg?style=flat-square&amp;amp;logo=discourse&amp;amp;logoWidth=15&amp;amp;labelColor=000000&amp;amp;color=4630EB&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Join our Discord&#34; href=&#34;https://discord.gg/4gtbPAdpaE&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/695411232856997968.svg?style=flat-square&amp;amp;labelColor=000000&amp;amp;color=4630EB&amp;amp;logo=discord&amp;amp;logoColor=FFFFFF&amp;amp;label=&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Expo is free to use&#34; href=&#34;https://github.com/expo/expo/raw/main/LICENSE&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;License: MIT&#34; src=&#34;https://img.shields.io/badge/License-MIT-success.svg?style=flat-square&amp;amp;color=33CC12&#34; target=&#34;_blank&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;expo downloads&#34; href=&#34;http://www.npmtrends.com/expo&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Downloads&#34; src=&#34;https://img.shields.io/npm/dm/expo.svg?style=flat-square&amp;amp;labelColor=gray&amp;amp;color=33CC12&amp;amp;label=Downloads&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a aria-label=&#34;try expo with snack&#34; href=&#34;https://snack.expo.dev&#34;&gt;&lt;b&gt;Try Expo in the Browser&lt;/b&gt;&lt;/a&gt; | &lt;a aria-label=&#34;expo documentation&#34; href=&#34;https://docs.expo.dev&#34;&gt;Read the Documentation 📚&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt; &lt;a aria-label=&#34;Follow @expo on Twitter&#34; href=&#34;https://twitter.com/intent/follow?screen_name=expo&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Twitter: expo&#34; src=&#34;https://img.shields.io/twitter/follow/expo.svg?style=flat-square&amp;amp;label=Follow%20%40expo&amp;amp;logo=TWITTER&amp;amp;logoColor=FFFFFF&amp;amp;labelColor=00aced&amp;amp;logoWidth=15&amp;amp;color=lightgray&#34; target=&#34;_blank&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Follow Expo on Medium&#34; href=&#34;https://blog.expo.dev&#34;&gt; &lt;img align=&#34;right&#34; alt=&#34;Medium: exposition&#34; src=&#34;https://img.shields.io/badge/Learn%20more%20on%20our%20blog-lightgray.svg?style=flat-square&#34; target=&#34;_blank&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/#-documentation&#34;&gt;📚 Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/#-project-layout&#34;&gt;🗺 Project Layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/#-badges&#34;&gt;🏅 Badges&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/#-contributing&#34;&gt;👏 Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/#-faq&#34;&gt;❓ FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/#-the-team&#34;&gt;💙 The Team&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Expo is an open-source platform for making universal native apps that run on Android, iOS, and the web. It includes a universal runtime and libraries that let you build native apps by writing React and JavaScript. This repository is where the Expo client software is developed, and includes the client apps, modules, apps, and more. The &lt;a href=&#34;https://github.com/expo/expo-cli&#34;&gt;Expo CLI&lt;/a&gt; repository contains the Expo development tools.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://expo.dev/guidelines&#34;&gt;Click here to view the Expo Community Guidelines&lt;/a&gt;. Thank you for helping keep the Expo community open and welcoming!&lt;/p&gt; &#xA;&lt;h2&gt;📚 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Learn about building and deploying universal apps &lt;a aria-label=&#34;expo documentation&#34; href=&#34;https://docs.expo.dev&#34;&gt;in our official docs!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.expo.dev/&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.expo.dev/versions/latest/&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.expo.dev/bare/exploring-bare-workflow/&#34;&gt;Using Custom Native Modules&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🗺 Project Layout&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/packages&#34;&gt;&lt;code&gt;packages&lt;/code&gt;&lt;/a&gt; All the source code for the Unimodules, if you want to edit a library or just see how it works this is where you&#39;ll find it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/apps&#34;&gt;&lt;code&gt;apps&lt;/code&gt;&lt;/a&gt; This is where you can find Expo projects which are linked to the development Unimodules. You&#39;ll do most of your testing in here.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt; The source code for &lt;strong&gt;&lt;a href=&#34;https://docs.expo.dev&#34;&gt;https://docs.expo.dev&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/templates&#34;&gt;&lt;code&gt;templates&lt;/code&gt;&lt;/a&gt; The template projects you get when you run &lt;code&gt;expo start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/react-native-lab&#34;&gt;&lt;code&gt;react-native-lab&lt;/code&gt;&lt;/a&gt; This is our fork of &lt;code&gt;react-native&lt;/code&gt;. We keep this very close to the upstream but sometimes need to add quick fixes locally before they can land.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/guides&#34;&gt;&lt;code&gt;guides&lt;/code&gt;&lt;/a&gt; In-depth tutorials for advanced topics like contributing to the client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/android&#34;&gt;&lt;code&gt;android&lt;/code&gt;&lt;/a&gt; contains the Android project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/home&#34;&gt;&lt;code&gt;home&lt;/code&gt;&lt;/a&gt; contains the JavaScript source code of the app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/ios&#34;&gt;&lt;code&gt;ios&lt;/code&gt;&lt;/a&gt; contains the iOS project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/ios&#34;&gt;&lt;code&gt;ios/Exponent.xcworkspace&lt;/code&gt;&lt;/a&gt; is the Xcode workspace. Always open this instead of &lt;code&gt;Exponent.xcodeproj&lt;/code&gt; because the workspace also loads the CocoaPods dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/tools&#34;&gt;&lt;code&gt;tools&lt;/code&gt;&lt;/a&gt; contains build and configuration tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/template-files&#34;&gt;&lt;code&gt;template-files&lt;/code&gt;&lt;/a&gt; contains templates for files that require private keys. They are populated using the keys in &lt;code&gt;template-files/keys.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/template-files/ios/dependencies.json&#34;&gt;&lt;code&gt;template-files/ios/dependencies.json&lt;/code&gt;&lt;/a&gt; specifies the CocoaPods dependencies of the app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🏅 Badges&lt;/h2&gt; &#xA;&lt;p&gt;Let everyone know your app can be run instantly in the &lt;em&gt;Expo Go&lt;/em&gt; app! &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://expo.dev/client&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&amp;amp;logo=EXPO&amp;amp;labelColor=f3f3f3&amp;amp;logoColor=000&#34; alt=&#34;runs with Expo Go&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://expo.dev/client&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&amp;amp;logo=EXPO&amp;amp;labelColor=f3f3f3&amp;amp;logoColor=000&#34; alt=&#34;runs with Expo Go&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&amp;amp;logo=EXPO&amp;amp;labelColor=f3f3f3&amp;amp;logoColor=000)](https://expo.dev/client)&#xA;&#xA;[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&amp;amp;logo=EXPO&amp;amp;labelColor=f3f3f3&amp;amp;logoColor=000)](https://expo.dev/client)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;👏 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you like Expo and want to help make it better then check out our &lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;! Check out the &lt;a href=&#34;http://github.com/expo/expo-cli&#34;&gt;Expo CLI repo&lt;/a&gt; to work on the Expo CLI, and various other universal development tools.&lt;/p&gt; &#xA;&lt;h2&gt;❓ FAQ&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions about Expo and want answers, then check out our &lt;a href=&#34;https://docs.expo.dev/versions/latest/introduction/faq/&#34;&gt;Frequently Asked Questions&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;If you still have questions you can ask them on our &lt;a href=&#34;https://forums.expo.dev&#34;&gt;forums&lt;/a&gt;, &lt;a href=&#34;https://discord.gg/4gtbPAdpaE&#34;&gt;Discord&lt;/a&gt; or on Twitter &lt;a href=&#34;https://twitter.com/expo&#34;&gt;@Expo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;💙 The Team&lt;/h2&gt; &#xA;&lt;p&gt;Curious about who makes Expo? Here are our &lt;a href=&#34;https://expo.dev/about&#34;&gt;team members&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Expo source code is made available under the &lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;. Some of the dependencies are licensed differently, with the BSD license, for example.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>material-components/material-components-ios</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/material-components/material-components-ios</id>
    <link href="https://github.com/material-components/material-components-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[In maintenance mode] Modular and customizable Material Design UI components for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Material Components for iOS&lt;/h1&gt; &#xA;&lt;h2&gt;Material&#39;s iOS libraries are in maintenance mode as of July 15, 2021&lt;/h2&gt; &#xA;&lt;p&gt;On July 15, 2021, the Material Components for iOS library and its related Material Foundation and Material Motion dependencies entered maintenance mode. This included:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-components/material-components-ios/&#34;&gt;https://github.com/material-components/material-components-ios/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-internationalization-ios&#34;&gt;https://github.com/material-foundation/material-internationalization-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-text-accessibility-ios&#34;&gt;https://github.com/material-foundation/material-text-accessibility-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/cocoapods-catalog-by-convention&#34;&gt;https://github.com/material-foundation/cocoapods-catalog-by-convention&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-testing-ios&#34;&gt;https://github.com/material-foundation/material-testing-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/bazel-workspace-apple&#34;&gt;https://github.com/material-foundation/bazel-workspace-apple&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/xctestrunner&#34;&gt;https://github.com/material-foundation/xctestrunner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/bazel-apple-framework-relative-headers&#34;&gt;https://github.com/material-foundation/bazel-apple-framework-relative-headers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/bazel-test-host-apple&#34;&gt;https://github.com/material-foundation/bazel-test-host-apple&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-sprited-animation-view-ios&#34;&gt;https://github.com/material-foundation/material-sprited-animation-view-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/clang-format-ci&#34;&gt;https://github.com/material-foundation/clang-format-ci&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/github-squash-and-merge-pr-descriptions&#34;&gt;https://github.com/material-foundation/github-squash-and-merge-pr-descriptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-roboto-font-loader-ios&#34;&gt;https://github.com/material-foundation/material-roboto-font-loader-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-scrollview-delegate-multiplexer-ios&#34;&gt;https://github.com/material-foundation/material-scrollview-delegate-multiplexer-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/SettingsKit&#34;&gt;https://github.com/material-foundation/SettingsKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/clang-format&#34;&gt;https://github.com/material-foundation/clang-format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/bazel_ios_warnings&#34;&gt;https://github.com/material-foundation/bazel_ios_warnings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/github-comment&#34;&gt;https://github.com/material-foundation/github-comment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-automation&#34;&gt;https://github.com/material-foundation/material-automation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/kokoro-ios-runner&#34;&gt;https://github.com/material-foundation/kokoro-ios-runner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-remixer-ios&#34;&gt;https://github.com/material-foundation/material-remixer-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/codereview.cc&#34;&gt;https://github.com/material-foundation/codereview.cc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-font-disk-loader-ios&#34;&gt;https://github.com/material-foundation/material-font-disk-loader-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/arc-tslint&#34;&gt;https://github.com/material-foundation/arc-tslint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/material-arc-tools&#34;&gt;https://github.com/material-foundation/material-arc-tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/arc-tsclint&#34;&gt;https://github.com/material-foundation/arc-tsclint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/material-foundation/arc-hook-github-issues&#34;&gt;https://github.com/material-foundation/arc-hook-github-issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;All libraries at &lt;a href=&#34;https://github.com/material-motion&#34;&gt;https://github.com/material-motion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What can you use instead?&lt;/h3&gt; &#xA;&lt;p&gt;We recommend that you follow Apple&#39;s Human Interface Guidelines and consider using modern UIKit components or SwiftUI instead. Both offer a high degree of flexibility through which you can express your product&#39;s brand while providing a predictable and familiar Apple platforms experience for your users. You&#39;ll also benefit from ongoing investments Apple makes in accessibility, ease of use, and deep integrations with OS features.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, &lt;a href=&#34;https://flutter.dev/docs/development/ui/widgets/material&#34;&gt;Flutter&lt;/a&gt; enables you to get a Material look and feel across all platforms.&lt;/p&gt; &#xA;&lt;h3&gt;What maintenance mode means for MDC iOS&lt;/h3&gt; &#xA;&lt;p&gt;Once we enter maintenance mode we will have the following support policy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Releases will be cut on a best-effort and as-needed basis.&lt;/li&gt; &#xA; &lt;li&gt;Feature and support requests will automatically be closed.&lt;/li&gt; &#xA; &lt;li&gt;Bugs will be addressed on a best-effort basis.&lt;/li&gt; &#xA; &lt;li&gt;All iOS-specific documentation on material.io will be removed.&lt;/li&gt; &#xA; &lt;li&gt;We will no longer maintain any &lt;code&gt;.md&lt;/code&gt; documentation on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Contributions may still be accepted, but reviews will be performed on a best-effort basis and are not guaranteed to result in a merge.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/material-components/material-components-ios/develop/docs/&#34;&gt;How To Use MDC-iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/material-components/material-components-ios/develop/components/&#34;&gt;All Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.stackoverflow.com/questions/tagged/material-components+ios&#34;&gt;MDC-iOS on Stack Overflow&lt;/a&gt; (external site)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://material.io&#34;&gt;Material.io&lt;/a&gt; (external site)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://material.io/guidelines&#34;&gt;Material Design Guidelines&lt;/a&gt; (external site)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>getsentry/sentry-cocoa</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/getsentry/sentry-cocoa</id>
    <link href="https://github.com/getsentry/sentry-cocoa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Sentry SDK for iOS, tvOS, macOS, watchOS.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://sentry.io/?utm_source=github&amp;amp;utm_medium=logo&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://sentry-brand.storage.googleapis.com/sentry-wordmark-dark-280x84.png&#34; alt=&#34;Sentry&#34; width=&#34;280&#34; height=&#34;84&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;h1&gt;Official Sentry SDK for iOS / tvOS / macOS / watchOS &lt;sup&gt;(1)&lt;/sup&gt;.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Bad software is everywhere, and we&#39;re tired of it. Sentry is on a mission to help developers write better software faster, so we can get back to enjoying technology. If you want to join us &lt;a href=&#34;https://sentry.io/careers/&#34;&gt;&lt;kbd&gt;&lt;strong&gt;Check out our open positions&lt;/strong&gt;&lt;/kbd&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-cocoa/actions?query=workflow%3A%22Build+%26+Test%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/getsentry/sentry-cocoa/Build%20%26%20Test&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-getsentry-sentry-cocoa-master&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/07f0bc91-9102-4fd8-99a6-30b25dc98037&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/getsentry/sentry-cocoa&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/getsentry/sentry-cocoa/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Sentry&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Sentry.svg?sanitize=true&#34; alt=&#34;CocoaPods compadible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/spm-compatible-brightgreen.svg?style=flat&#34; alt=&#34;SwiftPM compatible&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/Sentry.svg?style=flat&#34; alt=&#34;platforms&#34;&gt; &lt;a href=&#34;https://swiftpackageindex.com/getsentry/sentry-cocoa&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fgetsentry%2Fsentry-cocoa%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;Swift Package Index&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/PXa5Apfe7K&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/621778831602221064?logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This SDK is written in Objective-C but also provides a nice Swift interface.&lt;/p&gt; &#xA;&lt;h1&gt;Initialization&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Remember to call this as early in your application life cycle as possible&lt;/em&gt; Ideally in &lt;code&gt;applicationDidFinishLaunching&lt;/code&gt; in &lt;code&gt;AppDelegate&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Sentry&#xA;&#xA;// ....&#xA;&#xA;SentrySDK.start { options in&#xA;    options.dsn = &#34;___PUBLIC_DSN___&#34;&#xA;    options.debug = true // Helpful to see what&#39;s going on&#xA;}    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@import Sentry;&#xA;&#xA;// ....&#xA;&#xA;[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {&#xA;    options.dsn = @&#34;___PUBLIC_DSN___&#34;;&#xA;    options.debug = @YES; // Helpful to see what&#39;s going on&#xA;}];&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information checkout the &lt;a href=&#34;https://docs.sentry.io/platforms/apple&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;(1)&lt;/sup&gt;limited symbolication support and no crash handling.&lt;/p&gt; &#xA;&lt;h1&gt;Blog posts&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.sentry.io/2021/08/23/mobile-vitals-four-metrics-every-mobile-developer-should-care-about/&#34;&gt;Mobile Vitals - Four Metrics Every Mobile Developer Should Care About&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.sentry.io/2021/02/03/how-to-use-sentry-attachments-with-mobile-applications/?utm_source=github&amp;amp;utm_medium=readme&amp;amp;utm_campaign=sentry-cocoa&#34;&gt;How to use Sentry Attachments with Mobile Applications&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.sentry.io/2021/02/16/close-the-loop-with-user-feedback/?utm_source=github&amp;amp;utm_medium=readme&amp;amp;utm_campaign=sentry-cocoa&#34;&gt;Close the Loop with User Feedback&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.sentry.io/2021/03/30/a-sanity-listicle-for-mobile-developers/?utm_source=github&amp;amp;utm_medium=readme&amp;amp;utm_campaign=sentry-cocoa&#34;&gt;A Sanity Listicle for Mobile Developers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sentry.io/platforms/apple/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-sentry.io-green.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.sentry.io/c/sdks&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/forum-sentry-green.svg?sanitize=true&#34; alt=&#34;Forum&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/PXa5Apfe7K&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/621778831602221064?logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/sentry&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stack%20overflow-sentry-green.svg?sanitize=true&#34; alt=&#34;Stack Overflow&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/.github/raw/master/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20of%20conduct-sentry-green.svg?sanitize=true&#34; alt=&#34;Code of Conduct&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/intent/follow?screen_name=getsentry&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/getsentry?label=getsentry&amp;amp;style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>firebase/firebase-ios-sdk</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/firebase/firebase-ios-sdk</id>
    <link href="https://github.com/firebase/firebase-ios-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Firebase iOS SDK&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/Firebase&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Firebase.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Firebase&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Firebase.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Firebase&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/Firebase.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Firebase Apple Open Source Development&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains all Apple platform Firebase SDK source except FirebaseAnalytics.&lt;/p&gt; &#xA;&lt;p&gt;Firebase is an app development platform with tools to help you build, grow and monetize your app. More information about Firebase can be found on the &lt;a href=&#34;https://firebase.google.com&#34;&gt;official Firebase website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See the subsections below for details about the different installation methods. Where available, it&#39;s recommended to install any libraries with a &lt;code&gt;Swift&lt;/code&gt; suffix to get the best experience when writing your app in Swift.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/#standard-pod-install&#34;&gt;Standard pod install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/#installing-from-github&#34;&gt;Installing from the GitHub repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/#carthage-ios-only&#34;&gt;Experimental Carthage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Standard pod install&lt;/h3&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://firebase.google.com/docs/ios/setup&#34;&gt;https://firebase.google.com/docs/ios/setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Instructions for &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; support can be found at &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/SwiftPackageManager.md&#34;&gt;SwiftPackageManager&lt;/a&gt; Markdown file.&lt;/p&gt; &#xA;&lt;h3&gt;Installing from GitHub&lt;/h3&gt; &#xA;&lt;p&gt;These instructions can be used to access the Firebase repo at other branches, tags, or commits.&lt;/p&gt; &#xA;&lt;h4&gt;Background&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://guides.cocoapods.org/syntax/podfile.html#pod&#34;&gt;the Podfile Syntax Reference&lt;/a&gt; for instructions and options about overriding pod source locations.&lt;/p&gt; &#xA;&lt;h4&gt;Accessing Firebase Source Snapshots&lt;/h4&gt; &#xA;&lt;p&gt;All of the official releases are tagged in this repo and available via CocoaPods. To access a local source snapshot or unreleased branch, use Podfile directives like the following:&lt;/p&gt; &#xA;&lt;p&gt;To access FirebaseFirestore via a branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FirebaseCore&#39;, :git =&amp;gt; &#39;https://github.com/firebase/firebase-ios-sdk.git&#39;, :branch =&amp;gt; &#39;master&#39;&#xA;pod &#39;FirebaseFirestore&#39;, :git =&amp;gt; &#39;https://github.com/firebase/firebase-ios-sdk.git&#39;, :branch =&amp;gt; &#39;master&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To access FirebaseMessaging via a checked out version of the firebase-ios-sdk repo do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FirebaseCore&#39;, :path =&amp;gt; &#39;/path/to/firebase-ios-sdk&#39;&#xA;pod &#39;FirebaseMessaging&#39;, :path =&amp;gt; &#39;/path/to/firebase-ios-sdk&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage (iOS only)&lt;/h3&gt; &#xA;&lt;p&gt;Instructions for the experimental Carthage distribution are at &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/Carthage.md&#34;&gt;Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using Firebase from a Framework or a library&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/docs/firebase_in_libraries.md&#34;&gt;Using Firebase from a Framework or a library&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To develop Firebase software in this repository, ensure that you have at least the following software:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 13.3.1 (or later)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CocoaPods is still the canonical way to develop, but much of the repo now supports development with Swift Package Manager.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Install&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CocoaPods 1.10.0 (or later)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/cocoapods-generate&#34;&gt;CocoaPods generate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the pod that you want to develop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod gen Firebase{name here}.podspec --local-sources=./ --auto-open --platforms=ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If the CocoaPods cache is out of date, you may need to run &lt;code&gt;pod repo update&lt;/code&gt; before the &lt;code&gt;pod gen&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Note: Set the &lt;code&gt;--platforms&lt;/code&gt; option to &lt;code&gt;macos&lt;/code&gt; or &lt;code&gt;tvos&lt;/code&gt; to develop/test for those platforms. Since 10.2, Xcode does not properly handle multi-platform CocoaPods workspaces.&lt;/p&gt; &#xA;&lt;p&gt;Firestore has a self contained Xcode project. See &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/Firestore/README.md&#34;&gt;Firestore/README&lt;/a&gt; Markdown file.&lt;/p&gt; &#xA;&lt;h4&gt;Development for Catalyst&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pod gen {name here}.podspec --local-sources=./ --auto-open --platforms=ios&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check the Mac box in the App-iOS Build Settings&lt;/li&gt; &#xA; &lt;li&gt;Sign the App in the Settings Signing &amp;amp; Capabilities tab&lt;/li&gt; &#xA; &lt;li&gt;Click Pods in the Project Manager&lt;/li&gt; &#xA; &lt;li&gt;Add Signing to the iOS host app and unit test targets&lt;/li&gt; &#xA; &lt;li&gt;Select the Unit-unit scheme&lt;/li&gt; &#xA; &lt;li&gt;Run it to build and test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively disable signing in each target:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to Build Settings tab&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;+&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Add User-Defined Setting&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;CODE_SIGNING_REQUIRED&lt;/code&gt; setting with a value of &lt;code&gt;NO&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To enable test schemes: &lt;code&gt;./scripts/setup_spm_tests.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;open Package.swift&lt;/code&gt; or double click &lt;code&gt;Package.swift&lt;/code&gt; in Finder.&lt;/li&gt; &#xA; &lt;li&gt;Xcode will open the project &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Choose a scheme for a library to build or test suite to run&lt;/li&gt; &#xA;   &lt;li&gt;Choose a target platform by selecting the run destination along with the scheme&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Adding a New Firebase Pod&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/AddNewPod.md&#34;&gt;AddNewPod&lt;/a&gt; Markdown file.&lt;/p&gt; &#xA;&lt;h3&gt;Managing Headers and Imports&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/HeadersImports.md&#34;&gt;HeadersImports&lt;/a&gt; Markdown file.&lt;/p&gt; &#xA;&lt;h3&gt;Code Formatting&lt;/h3&gt; &#xA;&lt;p&gt;To ensure that the code is formatted consistently, run the script &lt;a href=&#34;https://github.com/firebase/firebase-ios-sdk/raw/master/scripts/check.sh&#34;&gt;./scripts/check.sh&lt;/a&gt; before creating a PR.&lt;/p&gt; &#xA;&lt;p&gt;GitHub Actions will verify that any code changes are done in a style compliant way. Install &lt;code&gt;clang-format&lt;/code&gt; and &lt;code&gt;mint&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install clang-format@14&#xA;brew install mint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Unit Tests&lt;/h3&gt; &#xA;&lt;p&gt;Select a scheme and press Command-u to build a component and run its unit tests.&lt;/p&gt; &#xA;&lt;h3&gt;Running Sample Apps&lt;/h3&gt; &#xA;&lt;p&gt;In order to run the sample apps and integration tests, you&#39;ll need a valid &lt;code&gt;GoogleService-Info.plist&lt;/code&gt; file. The Firebase Xcode project contains dummy plist files without real values, but can be replaced with real plist files. To get your own &lt;code&gt;GoogleService-Info.plist&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to the &lt;a href=&#34;https://console.firebase.google.com/&#34;&gt;Firebase Console&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a new Firebase project, if you don&#39;t already have one&lt;/li&gt; &#xA; &lt;li&gt;For each sample app you want to test, create a new Firebase app with the sample app&#39;s bundle identifier (e.g. &lt;code&gt;com.google.Database-Example&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Download the resulting &lt;code&gt;GoogleService-Info.plist&lt;/code&gt; and add it to the Xcode project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Coverage Report Generation&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/scripts/code_coverage_report/README.md&#34;&gt;scripts/code_coverage_report/README&lt;/a&gt; Markdown file.&lt;/p&gt; &#xA;&lt;h2&gt;Specific Component Instructions&lt;/h2&gt; &#xA;&lt;p&gt;See the sections below for any special instructions for those components.&lt;/p&gt; &#xA;&lt;h3&gt;Firebase Auth&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re doing specific Firebase Auth development, see &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/FirebaseAuth/Tests/Sample/README.md&#34;&gt;the Auth Sample README&lt;/a&gt; for instructions about building and running the FirebaseAuth pod along with various samples and tests.&lt;/p&gt; &#xA;&lt;h3&gt;Firebase Database&lt;/h3&gt; &#xA;&lt;p&gt;The Firebase Database Integration tests can be run against a locally running Database Emulator or against a production instance.&lt;/p&gt; &#xA;&lt;p&gt;To run against a local emulator instance, invoke &lt;code&gt;./scripts/run_database_emulator.sh start&lt;/code&gt; before running the integration test.&lt;/p&gt; &#xA;&lt;p&gt;To run against a production instance, provide a valid GoogleServices-Info.plist and copy it to &lt;code&gt;FirebaseDatabase/Tests/Resources/GoogleService-Info.plist&lt;/code&gt;. Your Security Rule must be set to &lt;a href=&#34;https://firebase.google.com/docs/database/security/quickstart&#34;&gt;public&lt;/a&gt; while your tests are running.&lt;/p&gt; &#xA;&lt;h3&gt;Firebase Performance Monitoring&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re doing specific Firebase Performance Monitoring development, see &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/FirebasePerformance/README.md&#34;&gt;the Performance README&lt;/a&gt; for instructions about building the SDK and &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/FirebasePerformance/Tests/TestApp/README.md&#34;&gt;the Performance TestApp README&lt;/a&gt; for instructions about integrating Performance with the dev test App.&lt;/p&gt; &#xA;&lt;h3&gt;Firebase Storage&lt;/h3&gt; &#xA;&lt;p&gt;To run the Storage Integration tests, follow the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/FirebaseStorageInternal/Tests/Integration/FIRStorageIntegrationTests.m&#34;&gt;FIRStorageIntegrationTests.m&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Push Notifications&lt;/h4&gt; &#xA;&lt;p&gt;Push notifications can only be delivered to specially provisioned App IDs in the developer portal. In order to actually test receiving push notifications, you will need to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Change the bundle identifier of the sample app to something you own in your Apple Developer account, and enable that App ID for push notifications.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;ll also need to &lt;a href=&#34;https://firebase.google.com/docs/cloud-messaging/ios/certs&#34;&gt;upload your APNs Provider Authentication Key or certificate to the Firebase Console&lt;/a&gt; at &lt;strong&gt;Project Settings &amp;gt; Cloud Messaging &amp;gt; [Your Firebase App]&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ensure your iOS device is added to your Apple Developer portal as a test device.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;iOS Simulator&lt;/h4&gt; &#xA;&lt;p&gt;The iOS Simulator cannot register for remote notifications, and will not receive push notifications. In order to receive push notifications, you&#39;ll have to follow the steps above and run the app on a physical device.&lt;/p&gt; &#xA;&lt;h2&gt;Building with Firebase on Apple platforms&lt;/h2&gt; &#xA;&lt;p&gt;Firebase 8.9.0 introduced official beta support for macOS, Catalyst, and tvOS. watchOS continues to be community supported. Thanks to community contributions for many of the multi-platform PRs.&lt;/p&gt; &#xA;&lt;p&gt;At this time, most of Firebase&#39;s products are available across Apple platforms. There are still a few gaps, especially on watchOS. For details about the current support matrix, see &lt;a href=&#34;https://firebase.google.com/docs/ios/learn-more#firebase_library_support_by_platform&#34;&gt;this chart&lt;/a&gt; in Firebase&#39;s documentation.&lt;/p&gt; &#xA;&lt;h3&gt;watchOS&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to contributions from the community, many of Firebase SDKs now compile, run unit tests, and work on watchOS. See the &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/Example/watchOSSample&#34;&gt;Independent Watch App Sample&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that watchOS is not officially supported by Firebase. While we can catch basic unit test issues with GitHub Actions, there may be some changes where the SDK no longer works as expected on watchOS. If you encounter this, please &lt;a href=&#34;https://github.com/firebase/firebase-ios-sdk/issues&#34;&gt;file an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;During app setup in the console, you may get to a step that mentions something like &#34;Checking if the app has communicated with our servers&#34;. This relies on Analytics and will not work on watchOS. &lt;strong&gt;It&#39;s safe to ignore the message and continue&lt;/strong&gt;, the rest of the SDKs will work as expected.&lt;/p&gt; &#xA;&lt;h4&gt;Additional Crashlytics Notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;watchOS has limited support. Due to watchOS restrictions, mach exceptions and signal crashes are not recorded. (Crashes in SwiftUI are generated as mach exceptions, so will not be recorded)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Combine&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to contributions from the community, &lt;em&gt;FirebaseCombineSwift&lt;/em&gt; contains support for Apple&#39;s Combine framework. This module is currently under development, and not yet supported for use in production environments. Fore more details, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/FirebaseCombineSwift/README.md&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/ROADMAP.md&#34;&gt;Roadmap&lt;/a&gt; for more about the Firebase Apple SDK Open Source plans and directions.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for more information on contributing to the Firebase Apple SDK.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The contents of this repository are licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Your use of Firebase is governed by the &lt;a href=&#34;https://firebase.google.com/terms/&#34;&gt;Terms of Service for Firebase Services&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>react-native-maps/react-native-maps</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/react-native-maps/react-native-maps</id>
    <link href="https://github.com/react-native-maps/react-native-maps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React Native Mapview component for iOS + Android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-native-maps &lt;a href=&#34;https://www.npmjs.com/package/react-native-maps&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-native-maps.svg?style=flat&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;React Native Map components for iOS + Android&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project is being maintained by a small group of people, and any help with issues and pull requests are always appreciated. If you are able and willing to contribute, please read the &lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/CONTRIBUTING.md&#34;&gt;guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/installation.md&#34;&gt;Installation Instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/examples-setup.md&#34;&gt;Setup Instructions for the Included Example Project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Due to the rapid changes being made in the React Native ecosystem, we are not officially going to support this module on anything but the latest version of React Native. With that said, we will do our best to stay compatible with older versions as much that is practical, and the peer dependency of this requirement is set to &lt;code&gt;&#34;react-native&#34;: &#34;*&#34;&lt;/code&gt; explicitly for this reason. If you are using an older version of React Native with this module though, some features may be buggy.&lt;/p&gt; &#xA;&lt;h2&gt;Component API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/mapview.md&#34;&gt;&lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/marker.md&#34;&gt;&lt;code&gt;&amp;lt;Marker /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/callout.md&#34;&gt;&lt;code&gt;&amp;lt;Callout /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/polygon.md&#34;&gt;&lt;code&gt;&amp;lt;Polygon /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/polyline.md&#34;&gt;&lt;code&gt;&amp;lt;Polyline /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/circle.md&#34;&gt;&lt;code&gt;&amp;lt;Circle /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/overlay.md&#34;&gt;&lt;code&gt;&amp;lt;Overlay /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/heatmap.md&#34;&gt;&lt;code&gt;&amp;lt;Heatmap /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/geojson.md&#34;&gt;&lt;code&gt;&amp;lt;Geojson /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;General Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import MapView from &#39;react-native-maps&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MapView = require(&#39;react-native-maps&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This MapView component is built so that features on the map (such as Markers, Polygons, etc.) are specified as children of the MapView itself. This provides an intuitive and react-like API for declaratively controlling features on the map.&lt;/p&gt; &#xA;&lt;h3&gt;Rendering a Map with an initial region&lt;/h3&gt; &#xA;&lt;h2&gt;MapView&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;  &amp;lt;MapView&#xA;    initialRegion={{&#xA;      latitude: 37.78825,&#xA;      longitude: -122.4324,&#xA;      latitudeDelta: 0.0922,&#xA;      longitudeDelta: 0.0421,&#xA;    }}&#xA;  /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a MapView while controlling the region as state&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;getInitialState() {&#xA;  return {&#xA;    region: {&#xA;      latitude: 37.78825,&#xA;      longitude: -122.4324,&#xA;      latitudeDelta: 0.0922,&#xA;      longitudeDelta: 0.0421,&#xA;    },&#xA;  };&#xA;}&#xA;&#xA;onRegionChange(region) {&#xA;  this.setState({ region });&#xA;}&#xA;&#xA;render() {&#xA;  return (&#xA;    &amp;lt;MapView&#xA;      region={this.state.region}&#xA;      onRegionChange={this.onRegionChange}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rendering a list of markers on a map&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Marker } from &#39;react-native-maps&#39;;&#xA;&#xA;&amp;lt;MapView&#xA;  region={this.state.region}&#xA;  onRegionChange={this.onRegionChange}&#xA;&amp;gt;&#xA;  {this.state.markers.map((marker, index) =&amp;gt; (&#xA;    &amp;lt;Marker&#xA;      key={index}&#xA;      coordinate={marker.latlng}&#xA;      title={marker.title}&#xA;      description={marker.description}&#xA;    /&amp;gt;&#xA;  ))}&#xA;&amp;lt;/MapView&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rendering a Marker with a custom image&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You need to generate an &lt;code&gt;png&lt;/code&gt; image with various resolution (lets call them &lt;code&gt;custom_pin&lt;/code&gt;) - for more information go to &lt;a href=&#34;https://developer.android.com/studio/write/image-asset-studio#access&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/ToolsLanguages/Conceptual/Xcode_Overview/AddingImages.html&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;put all images in Android drawables and iOS assets dir&lt;/li&gt; &#xA; &lt;li&gt;Now you can use the following code:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Marker&#xA;  coordinate={{ latitude : latitude , longitude : longitude }}&#xA;  image={{uri: &#39;custom_pin&#39;}}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: You can also pass the image binary data like &lt;code&gt;image={require(&#39;custom_pin.png&#39;)}&lt;/code&gt;, but this will not scale good with the different screen sizes.&lt;/p&gt; &#xA;&lt;h3&gt;Rendering a Marker with a custom view&lt;/h3&gt; &#xA;&lt;p&gt;Note: This has performance implications, if you wish for a simpler solution go with a custom image (save your self the head ache)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Marker coordinate={{ latitude : latitude , longitude : longitude }}&amp;gt;&#xA;  &amp;lt;MyCustomMarkerView {...marker} /&amp;gt;&#xA;&amp;lt;/Marker&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rendering a custom Marker with a custom Callout&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Callout } from &#39;react-native-maps&#39;;&#xA;&#xA;&amp;lt;Marker coordinate={marker.latlng}&amp;gt;&#xA;  &amp;lt;MyCustomMarkerView {...marker} /&amp;gt;&#xA;  &amp;lt;Callout&amp;gt;&#xA;    &amp;lt;MyCustomCalloutView {...marker} /&amp;gt;&#xA;  &amp;lt;/Callout&amp;gt;&#xA;&amp;lt;/Marker&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Draggable Markers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;MapView initialRegion={...}&amp;gt;&#xA;  &amp;lt;Marker draggable&#xA;    coordinate={this.state.x}&#xA;    onDragEnd={(e) =&amp;gt; this.setState({ x: e.nativeEvent.coordinate })}&#xA;  /&amp;gt;&#xA;&amp;lt;/MapView&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a custom Tile Overlay&lt;/h3&gt; &#xA;&lt;h4&gt;Tile Overlay using tile server&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { UrlTile } from &#39;react-native-maps&#39;;&#xA;&#xA;&amp;lt;MapView&#xA;  region={this.state.region}&#xA;  onRegionChange={this.onRegionChange}&#xA;&amp;gt;&#xA;  &amp;lt;UrlTile&#xA;    /**&#xA;     * The url template of the tile server. The patterns {x} {y} {z} will be replaced at runtime&#xA;     * For example, http://c.tile.openstreetmap.org/{z}/{x}/{y}.png&#xA;     */&#xA;    urlTemplate={this.state.urlTemplate}&#xA;    /**&#xA;     * The maximum zoom level for this tile overlay. Corresponds to the maximumZ setting in&#xA;     * MKTileOverlay. iOS only.&#xA;     */&#xA;    maximumZ={19}&#xA;    /**&#xA;     * flipY allows tiles with inverted y coordinates (origin at bottom left of map)&#xA;     * to be used. Its default value is false.&#xA;     */&#xA;    flipY={false}&#xA;  /&amp;gt;&#xA;&amp;lt;/MapView&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Android: add the following line in your AndroidManifest.xml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-permission android:name=&#34;android.permission.INTERNET&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For IOS: configure &lt;a href=&#34;https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33&#34;&gt;App Transport Security&lt;/a&gt; in your app&lt;/p&gt; &#xA;&lt;h4&gt;Tile Overlay using local tiles&lt;/h4&gt; &#xA;&lt;p&gt;Tiles can be stored locally within device using xyz tiling scheme and displayed as tile overlay as well. This is usefull especially for offline map usage when tiles are available for selected map region within device storage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { LocalTile } from &#39;react-native-maps&#39;;&#xA;&#xA;&amp;lt;MapView&#xA;  region={this.state.region}&#xA;  onRegionChange={this.onRegionChange}&#xA;&amp;gt;&#xA;  &amp;lt;LocalTile&#xA;   /**&#xA;    * The path template of the locally stored tiles. The patterns {x} {y} {z} will be replaced at runtime&#xA;    * For example, /storage/emulated/0/mytiles/{z}/{x}/{y}.png&#xA;    */&#xA;   pathTemplate={this.state.pathTemplate}&#xA;   /**&#xA;    * The size of provided local tiles (usually 256 or 512).&#xA;    */&#xA;   tileSize={256}&#xA;  /&amp;gt;&#xA;&amp;lt;/MapView&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Android: LocalTile is still just overlay over original map tiles. It means that if device is online, underlying tiles will be still downloaded. If original tiles download/display is not desirable set mapType to &#39;none&#39;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;MapView&#xA;  mapType={Platform.OS == &#34;android&#34; ? &#34;none&#34; : &#34;standard&#34;}&#xA;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://wiki.openstreetmap.org/wiki/Category:Tile_downloading&#34;&gt;OSM Wiki&lt;/a&gt; for how to download tiles for offline usage.&lt;/p&gt; &#xA;&lt;h3&gt;Overlaying other components on the map&lt;/h3&gt; &#xA;&lt;p&gt;Place components that you wish to overlay &lt;code&gt;MapView&lt;/code&gt; underneath the &lt;code&gt;MapView&lt;/code&gt; closing tag. Absolutely position these elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return (&#xA;    &amp;lt;MapView&#xA;      region={this.state.region}&#xA;    /&amp;gt;&#xA;    &amp;lt;OverlayComponent&#xA;      style={{position: &#34;absolute&#34;, bottom: 50}}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizing the map style&lt;/h3&gt; &#xA;&lt;p&gt;Create the json object, or download a generated one from the &lt;a href=&#34;https://mapstyle.withgoogle.com/&#34;&gt;google style generator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// The generated json object&#xA;mapStyle = [ ... ]&#xA;&#xA;render() {&#xA;  return (&#xA;    &amp;lt;MapView&#xA;      region={this.state.region}&#xA;      onRegionChange={this.onRegionChange}&#xA;      customMapStyle={mapStyle}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For iOS, in addition to providing the &lt;code&gt;mapStyle&lt;/code&gt; you will need to do the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import MapView, { PROVIDER_GOOGLE } from &#39;react-native-maps&#39;&#xA;&#xA;// ...&#xA;&#xA;&amp;lt;MapView&#xA;  provider={PROVIDER_GOOGLE}&#xA;  customMapStyle={MapStyle}&#xA;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the AirGoogleMaps directory:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/react-native-maps/react-native-maps/raw/1e71a21f39e7b88554852951f773c731c94680c9/docs/installation.md#ios&#34;&gt;https://github.com/react-native-maps/react-native-maps/blob/1e71a21f39e7b88554852951f773c731c94680c9/docs/installation.md#ios&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An unofficial step-by-step guide is also available at &lt;a href=&#34;https://gist.github.com/heron2014/e60fa003e9b117ce80d56bb1d5bfe9e0&#34;&gt;https://gist.github.com/heron2014/e60fa003e9b117ce80d56bb1d5bfe9e0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;MapView Events&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; component and its child components have several events that you can subscribe to. This example displays some of them in a log as a demonstration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UBpncYQASu2WTW8.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77YdviLqtjaecRYA.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tracking Region / Location&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UBoPSLlIKQ2dv7q.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77XWjqECvdgjx9oA.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Programmatically Changing Region&lt;/h3&gt; &#xA;&lt;p&gt;One can change the mapview&#39;s position using refs and component methods, or by passing in an updated &lt;code&gt;region&lt;/code&gt; prop. The component methods will allow one to animate to a given position like the native API could.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UB7poyB6YJ0KPWU.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77Yc4wK3pzZusEbm.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Changing the style of the map&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/a9WqCL6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Arbitrary React Views as Markers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UBcsCLoLQtksJxe.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/3o6UB1qGEM9jYni3KM.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using the MapView with the Animated API&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; component can be made to work with the Animated API, having the entire &lt;code&gt;region&lt;/code&gt; prop be declared as an animated value. This allows one to animate the zoom and position of the MapView along with other gestures, giving a nice feel.&lt;/p&gt; &#xA;&lt;p&gt;Further, Marker views can use the animated API to enhance the effect.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xT77XMw9IwS6QAv0nC.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/3o6UBdGQdM1GmVoIdq.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Issue: Since android needs to render its marker views as a bitmap, the animations APIs may not be compatible with the Marker views. Not sure if this can be worked around yet or not.&lt;/p&gt; &#xA;&lt;p&gt;Markers&#39; coordinates can also be animated, as shown in this example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xTcnTelp1OwGPu1Wh2.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xTcnT6WVpwlCiQnFW8.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Polygon Creator&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UAZWqQBkOzs8HE4.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77XVBRErNZl3zyWQ.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Other Overlays&lt;/h3&gt; &#xA;&lt;p&gt;So far, &lt;code&gt;&amp;lt;Circle /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Polygon /&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;Polyline /&amp;gt;&lt;/code&gt; are available to pass in as children to the &lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; component.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xT77XZCH8JpEhzVcNG.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77XZyA0aYeOX5jsA.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Gradient Polylines (iOS MapKit only)&lt;/h3&gt; &#xA;&lt;p&gt;Gradient polylines can be created using the &lt;code&gt;strokeColors&lt;/code&gt; prop of the &lt;code&gt;&amp;lt;Polyline&amp;gt;&lt;/code&gt; component.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/P7UeqAm.png?1&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Default Markers&lt;/h3&gt; &#xA;&lt;p&gt;Default markers will be rendered unless a custom marker is specified. One can optionally adjust the color of the default marker by using the &lt;code&gt;pinColor&lt;/code&gt; prop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xT77Y0pWKmUUnguHK0.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/3o6UBfk3I58VIwZjVe.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom Callouts&lt;/h3&gt; &#xA;&lt;p&gt;Callouts to markers can be completely arbitrary react views, similar to markers. As a result, they can be interacted with like any other view.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can fall back to the standard behavior of just having a title/description through the &lt;code&gt;&amp;lt;Marker /&amp;gt;&lt;/code&gt;&#39;s &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; props.&lt;/p&gt; &#xA;&lt;p&gt;Custom callout views can be the entire tooltip bubble, or just the content inside of the system default bubble.&lt;/p&gt; &#xA;&lt;p&gt;To handle press on specific subview of callout use &lt;code&gt;&amp;lt;CalloutSubview /&amp;gt;&lt;/code&gt; with &lt;code&gt;onPress&lt;/code&gt;. See &lt;code&gt;Callouts.js&lt;/code&gt; example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xT77XNePGnMIIDpbnq.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77YdU0HXryvoRqaQ.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Image-based Markers&lt;/h3&gt; &#xA;&lt;p&gt;Markers can be customized by just using images, and specified using the &lt;code&gt;image&lt;/code&gt; prop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/mzrOjTR.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Draggable Markers&lt;/h3&gt; &#xA;&lt;p&gt;Markers are draggable, and emit continuous drag events to update other UI during drags.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/l2JImnZxdv1WbpQfC.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/l2JIhv4Jx6Ugx1EGI.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Lite Mode ( Android )&lt;/h3&gt; &#xA;&lt;p&gt;Enable lite mode on Android with &lt;code&gt;liteMode&lt;/code&gt; prop. Ideal when having multiple maps in a View or ScrollView.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/qZ2lAf18s89na.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;On Poi Click (Google Maps Only)&lt;/h3&gt; &#xA;&lt;p&gt;Poi are clickable, you can catch the event to get its information (usually to get the full detail from Google Place using the placeId).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/3480VsCKnHr31uCLU3/giphy.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Animated Region&lt;/h3&gt; &#xA;&lt;p&gt;The MapView can accept an &lt;code&gt;AnimatedRegion&lt;/code&gt; value as its &lt;code&gt;region&lt;/code&gt; prop. This allows you to utilize the Animated API to control the map&#39;s center and zoom.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import MapView, { AnimatedRegion, Animated } from &#39;react-native-maps&#39;;&#xA;&#xA;getInitialState() {&#xA;  return {&#xA;    region: new AnimatedRegion({&#xA;      latitude: LATITUDE,&#xA;      longitude: LONGITUDE,&#xA;      latitudeDelta: LATITUDE_DELTA,&#xA;      longitudeDelta: LONGITUDE_DELTA,&#xA;    }),&#xA;  };&#xA;}&#xA;&#xA;onRegionChange(region) {&#xA;  this.state.region.setValue(region);&#xA;}&#xA;&#xA;render() {&#xA;  return (&#xA;    &amp;lt;Animated&#xA;      region={this.state.region}&#xA;      onRegionChange={this.onRegionChange}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Animated Marker Position&lt;/h3&gt; &#xA;&lt;p&gt;Markers can also accept an &lt;code&gt;AnimatedRegion&lt;/code&gt; value as a coordinate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import Mapview, { AnimatedRegion, MarkerAnimated } from &#39;react-native-maps&#39;;&#xA;&#xA;getInitialState() {&#xA;  return {&#xA;    coordinate: new AnimatedRegion({&#xA;      latitude: LATITUDE,&#xA;      longitude: LONGITUDE,&#xA;    }),&#xA;  };&#xA;}&#xA;&#xA;componentWillReceiveProps(nextProps) {&#xA;  const duration = 500&#xA;&#xA;  if (this.props.coordinate !== nextProps.coordinate) {&#xA;    if (Platform.OS === &#39;android&#39;) {&#xA;      if (this.marker) {&#xA;        this.marker.animateMarkerToCoordinate(&#xA;          nextProps.coordinate,&#xA;          duration&#xA;        );&#xA;      }&#xA;    } else {&#xA;      this.state.coordinate.timing({&#xA;        ...nextProps.coordinate,&#xA;        useNativeDriver: true, // defaults to false if not passed explicitly&#xA;        duration&#xA;      }).start();&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;render() {&#xA;  return (&#xA;    &amp;lt;MapView initialRegion={...}&amp;gt;&#xA;      &amp;lt;MarkerAnimated&#xA;        ref={marker =&amp;gt; { this.marker = marker }}&#xA;        coordinate={this.state.coordinate}&#xA;      /&amp;gt;&#xA;    &amp;lt;/MapView&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Take Snapshot of map&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import MapView, { Marker } from &#39;react-native-maps&#39;;&#xA;&#xA;getInitialState() {&#xA;  return {&#xA;    coordinate: {&#xA;      latitude: LATITUDE,&#xA;      longitude: LONGITUDE,&#xA;    },&#xA;  };&#xA;}&#xA;&#xA;takeSnapshot () {&#xA;  // &#39;takeSnapshot&#39; takes a config object with the&#xA;  // following options&#xA;  const snapshot = this.map.takeSnapshot({&#xA;    width: 300,      // optional, when omitted the view-width is used&#xA;    height: 300,     // optional, when omitted the view-height is used&#xA;    region: {..},    // iOS only, optional region to render&#xA;    format: &#39;png&#39;,   // image formats: &#39;png&#39;, &#39;jpg&#39; (default: &#39;png&#39;)&#xA;    quality: 0.8,    // image quality: 0..1 (only relevant for jpg, default: 1)&#xA;    result: &#39;file&#39;   // result types: &#39;file&#39;, &#39;base64&#39; (default: &#39;file&#39;)&#xA;  });&#xA;  snapshot.then((uri) =&amp;gt; {&#xA;    this.setState({ mapSnapshot: uri });&#xA;  });&#xA;}&#xA;&#xA;render() {&#xA;  return (&#xA;    &amp;lt;View&amp;gt;&#xA;      &amp;lt;MapView initialRegion={...} ref={map =&amp;gt; { this.map = map }}&amp;gt;&#xA;        &amp;lt;Marker coordinate={this.state.coordinate} /&amp;gt;&#xA;      &amp;lt;/MapView&amp;gt;&#xA;      &amp;lt;Image source={{ uri: this.state.mapSnapshot.uri }} /&amp;gt;&#xA;      &amp;lt;TouchableOpacity onPress={this.takeSnapshot}&amp;gt;&#xA;        Take Snapshot&#xA;      &amp;lt;/TouchableOpacity&amp;gt;&#xA;    &amp;lt;/View&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Zoom to Specified Markers&lt;/h3&gt; &#xA;&lt;p&gt;Pass an array of marker identifiers to have the map re-focus.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o7qEbOQnO0yoXqKJ2.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/l41YdrQZ7m6Dz4h0c.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Zoom to Specified Coordinates&lt;/h3&gt; &#xA;&lt;p&gt;Pass an array of coordinates to focus a map region on said coordinates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1627824/18609960/da5d9e06-7cdc-11e6-811e-34e255093df9.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;h4&gt;My map is blank&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure that you have &lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/installation.md&#34;&gt;properly installed&lt;/a&gt; react-native-maps.&lt;/li&gt; &#xA; &lt;li&gt;Check in the logs if there is more informations about the issue.&lt;/li&gt; &#xA; &lt;li&gt;Try setting the style of the MapView to an absolute position with top, left, right and bottom values set.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have enabled Google Maps API in &lt;a href=&#34;https://console.developers.google.com/apis/library&#34;&gt;Google developer console&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const styles = StyleSheet.create({&#xA;  map: {&#xA;    ...StyleSheet.absoluteFillObject,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;MapView&#xA;  style={styles.map}&#xA;  // other props&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Inputs don&#39;t focus&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When inputs don&#39;t focus or elements don&#39;t respond to tap, look at the order of the view hierarchy, sometimes the issue could be due to ordering of rendered components, prefer putting MapView as the first component.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Bad:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;View&amp;gt;&#xA;  &amp;lt;TextInput/&amp;gt;&#xA;  &amp;lt;MapView/&amp;gt;&#xA;&amp;lt;/View&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Good:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;View&amp;gt;&#xA;  &amp;lt;MapView/&amp;gt;&#xA;  &amp;lt;TextInput/&amp;gt;&#xA;&amp;lt;/View&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Children Components Not Re-Rendering&lt;/h4&gt; &#xA;&lt;p&gt;Components that aren&#39;t declared by this library (Ex: Markers, Polyline) must not be children of the MapView component due to MapView&#39;s unique rendering methodology. Have your custom components / views outside the MapView component and position absolute to ensure they only re-render as needed. Example: Bad:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;  &amp;lt;View style={StyleSheet.absoluteFillObject}&amp;gt;&#xA;    &amp;lt;MapView style={StyleSheet.absoluteFillObject}&amp;gt;&#xA;      &amp;lt;View style={{ position: &#39;absolute&#39;, top: 100, left: 50 }}/&amp;gt;&#xA;    &amp;lt;/MapView&amp;gt;&#xA;  &amp;lt;/View&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Good:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;  &amp;lt;View style={StyleSheet.absoluteFillObject}&amp;gt;&#xA;    &amp;lt;MapView style={StyleSheet.absoluteFillObject} /&amp;gt;&#xA;    &amp;lt;View style={{ position: &#39;absolute&#39;, top: 100, left: 50 }}/&amp;gt;&#xA;  &amp;lt;/View&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://github.com/react-native-maps/react-native-maps/issues/1901&#34;&gt;https://github.com/react-native-maps/react-native-maps/issues/1901&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Crashing with EXC_BAD_ACCESS on iOS when switching apps&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;MapView&amp;gt;&lt;/code&gt; using Apple Maps in &lt;code&gt;mapType: &#34;standard&#34;&lt;/code&gt; will sometimes crash when you background the app or switch into another app. This is only an issue in XCode using Metal API Validation, and won&#39;t happen in production. To eliminate this problem even while debugging in XCode, go to &lt;code&gt;Edit Scheme... -&amp;gt; Run (Debug) -&amp;gt; Diagnostics&lt;/code&gt; and uncheck &lt;code&gt;Metal -&amp;gt; API Validation&lt;/code&gt;. (h/t &lt;a href=&#34;https://github.com/Simon-TechForm&#34;&gt;@Simon-TechForm&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://github.com/react-native-maps/react-native-maps/issues/3957#issuecomment-924161121&#34;&gt;https://github.com/react-native-maps/react-native-maps/issues/3957#issuecomment-924161121&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt; Copyright (c) 2017 Airbnb&#xA;&#xA; Licensed under the The MIT License (MIT) (the &#34;License&#34;);&#xA; you may not use this file except in compliance with the License.&#xA; You may obtain a copy of the License at&#xA;&#xA;    https://raw.githubusercontent.com/airbnb/react-native-maps/master/LICENSE&#xA;&#xA; Unless required by applicable law or agreed to in writing, software&#xA; distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; See the License for the specific language governing permissions and&#xA; limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>londonappbrewery/dicee-flutter</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/londonappbrewery/dicee-flutter</id>
    <link href="https://github.com/londonappbrewery/dicee-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starter code for the Dicee project in the Complete Flutter Bootcamp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/AppBreweryBanner.png&#34; alt=&#34;App Brewery Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Dicee 🎲&lt;/h1&gt; &#xA;&lt;h2&gt;Our Goal&lt;/h2&gt; &#xA;&lt;p&gt;The objective of this tutorial is to introduce you to the core programming concepts that will form the foundation of most of the apps you’ll build in the future. This app will teach you how to make apps with functionality using setState() inside Stateful Flutter widgets.&lt;/p&gt; &#xA;&lt;h2&gt;What you will create&lt;/h2&gt; &#xA;&lt;p&gt;We’re going to make a Las Vegas dice app. You can make the die roll at the press of a button. With this app in your pocket, you’ll be able to settle any score on the go!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/dicee-demo.gif&#34; alt=&#34;Finished App&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What you will learn&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to use Flutter stateless widgets to design the user interface.&lt;/li&gt; &#xA; &lt;li&gt;How to use Flutter stateful widgets to update the user interface.&lt;/li&gt; &#xA; &lt;li&gt;How to change the properties of various widgets.&lt;/li&gt; &#xA; &lt;li&gt;How to use onPressed listeners to detect when buttons are pressed.&lt;/li&gt; &#xA; &lt;li&gt;How to use setState to mark the widget tree as dirty and requiring update on the next render.&lt;/li&gt; &#xA; &lt;li&gt;How to use Expanded to make widgets adapt to screen dimensions.&lt;/li&gt; &#xA; &lt;li&gt;Understand and use string interpolation.&lt;/li&gt; &#xA; &lt;li&gt;Learn about basic dart programming concepts such as data types and functions.&lt;/li&gt; &#xA; &lt;li&gt;Code and use gesture controls.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a companion project to The App Brewery&#39;s Complete Flutter Development Bootcamp, check out the full course at &lt;a href=&#34;https://www.appbrewery.co/&#34;&gt;www.appbrewery.co&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/readme-end-banner.png&#34; alt=&#34;End Banner&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OneSignal/OneSignal-iOS-SDK</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/OneSignal/OneSignal-iOS-SDK</id>
    <link href="https://github.com/OneSignal/OneSignal-iOS-SDK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OneSignal is a free push notification service for mobile apps. This plugin makes it easy to integrate your native iOS app with OneSignal. https://onesignal.com&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://media.onesignal.com/cms/Website%20Layout/logo-red.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;OneSignal iOS SDK&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/OneSignal&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/OneSignal.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?sanitize=true&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goo.gl/E01ufX&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-Compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;SwiftPM Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/OneSignal/OneSignal-iOS-SDK&#34;&gt;&lt;img src=&#34;https://travis-ci.org/OneSignal/OneSignal-iOS-SDK.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.onesignal.com&#34;&gt;OneSignal&lt;/a&gt; is a free email, sms, push notification, and in-app message service for mobile apps. This plugin makes it easy to integrate your native iOS app with OneSignal.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://app.onesignal.com/images/ios_10_notification_image.gif&#34; width=&#34;400&#34; alt=&#34;iOS Notification&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;p&gt;See OneSignal&#39;s &lt;a href=&#34;https://documentation.onesignal.com/docs/ios-sdk-setup&#34;&gt;iOS Native SDK Setup Guide&lt;/a&gt; for documentation.&lt;/p&gt; &#xA;&lt;h4&gt;API&lt;/h4&gt; &#xA;&lt;p&gt;See OneSignal&#39;s &lt;a href=&#34;https://documentation.onesignal.com/docs/ios-native-sdk&#34;&gt;iOS Native SDK API&lt;/a&gt; page for a list of all available methods.&lt;/p&gt; &#xA;&lt;h4&gt;Change Log&lt;/h4&gt; &#xA;&lt;p&gt;See this repository&#39;s &lt;a href=&#34;https://github.com/OneSignal/OneSignal-iOS-SDK/releases&#34;&gt;release tags&lt;/a&gt; for a complete change log of every released version.&lt;/p&gt; &#xA;&lt;h4&gt;Support&lt;/h4&gt; &#xA;&lt;p&gt;Please visit this repository&#39;s &lt;a href=&#34;https://github.com/OneSignal/OneSignal-iOS-SDK/issues&#34;&gt;Github issue tracker&lt;/a&gt; for feature requests and bug reports related specifically to the SDK. For account issues and support please contact OneSignal support from the &lt;a href=&#34;https://onesignal.com&#34;&gt;OneSignal.com&lt;/a&gt; dashboard.&lt;/p&gt; &#xA;&lt;h4&gt;Supports:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift and Objective-C Projects&lt;/li&gt; &#xA; &lt;li&gt;Supports iOS 9 to iOS 15&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>aws-amplify/aws-sdk-ios</title>
    <updated>2022-06-01T01:48:41Z</updated>
    <id>tag:github.com,2022-06-01:/aws-amplify/aws-sdk-ios</id>
    <link href="https://github.com/aws-amplify/aws-sdk-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AWS SDK for iOS. For more information, see our web site:&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AWS SDK for iOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws-amplify/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/aws/aws-sdk-ios.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/AWSCore&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/AWSCore.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/aws-amplify/aws-sdk-ios&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/aws-amplify/aws-sdk-ios.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/jWVbPfC&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/308323056592486420?logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The AWS SDK for iOS provides a library and documentation for developers to build connected mobile applications using AWS.&lt;/p&gt; &#xA;&lt;h3&gt;Features / APIs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs/ios/authentication&#34;&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/a&gt;: APIs and building blocks for developers who want to create user authentication experiences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs/ios/analytics&#34;&gt;&lt;strong&gt;Analytics&lt;/strong&gt;&lt;/a&gt;: Easily collect analytics data for your app. Analytics data includes user sessions and other custom events that you want to track in your app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs/ios/api&#34;&gt;&lt;strong&gt;API&lt;/strong&gt;&lt;/a&gt;: Provides a simple solution when making HTTP requests. It provides an automatic, lightweight signing process which complies with AWS Signature Version 4.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs/ios/storage&#34;&gt;&lt;strong&gt;Storage&lt;/strong&gt;&lt;/a&gt;: Provides a simple mechanism for managing user content for your app in public, protected or private storage buckets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs/ios/push-notifications&#34;&gt;&lt;strong&gt;Push Notifications&lt;/strong&gt;&lt;/a&gt;: Allows you to integrate push notifications in your app with Amazon Pinpoint targeting and campaign management support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs/ios/pubsub&#34;&gt;&lt;strong&gt;PubSub&lt;/strong&gt;&lt;/a&gt;: Provides connectivity with cloud-based message-oriented middleware.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs/ios/manualsetup&#34;&gt;&lt;strong&gt;Generated AWS Service Interfaces&lt;/strong&gt;&lt;/a&gt;: Provides direct interaction with any AWS service.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Visit our &lt;a href=&#34;https://aws-amplify.github.io&#34;&gt;Web Site&lt;/a&gt; to learn more about Amplify Framework.&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-amplify.github.io/docs&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/aws-sdk-ios-samples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To get started with the AWS SDK for iOS, check out the &lt;a href=&#34;https://aws-amplify.github.io/docs/ios/start&#34;&gt;Developer Guide for iOS&lt;/a&gt;. You can set up the SDK and start building a new project, or you integrate the SDK in an existing project. You can also run the samples to get a sense of how the SDK works.&lt;/p&gt; &#xA;&lt;p&gt;To use the AWS SDK for iOS, you will need the following installed on your development machine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 11.0 or later&lt;/li&gt; &#xA; &lt;li&gt;iOS 9 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Include the SDK for iOS in an Existing Application&lt;/h2&gt; &#xA;&lt;p&gt;We have a couple &lt;a href=&#34;https://github.com/awslabs/aws-sdk-ios-samples&#34;&gt;samples&lt;/a&gt; applications which showcase how to use the AWS SDK for iOS. Please note that the code in these sample applications is not of production quality, and should be considered as exactly what we called them: samples.&lt;/p&gt; &#xA;&lt;p&gt;There are several ways to integrate the AWS Mobile SDK for iOS into your own project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/mobile/sdk/&#34;&gt;Dynamic Frameworks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You should use ONE and only one of these ways to import the AWS Mobile SDK. Importing the SDK in multiple ways loads duplicate copies of the SDK into the project and causes compiler/linker errors.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you are using XCFrameworks (i.e., either Swift Package Manager, Carthage, or Dynamic Frameworks), some modules are named with the &lt;code&gt;XCF&lt;/code&gt; suffix to work around a &lt;a href=&#34;https://bugs.swift.org/browse/SR-11704&#34;&gt;Swift issue&lt;/a&gt;. &lt;code&gt;AWSMobileClient&lt;/code&gt; is named as &lt;code&gt;AWSMobileClientXCF&lt;/code&gt; and &lt;code&gt;AWSLocation&lt;/code&gt; is named as &lt;code&gt;AWSLocationXCF&lt;/code&gt;. To use the &lt;code&gt;AWSMobileClient&lt;/code&gt; or &lt;code&gt;AWSLocation&lt;/code&gt; SDKs, import them as:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import AWSMobileClientXCF&#xA;import AWSLocationXCF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and use it your app code without the &lt;code&gt;XCF&lt;/code&gt; suffix.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AWSMobileClient.default().initialize() &#xA;let locationClient = AWSLocation.default()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Swift Package Manager is distributed with Xcode. To start adding the AWS SDK to your iOS project, open your project in Xcode and select &lt;strong&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/readme-images/spm-setup-01-add-package-dependency.png&#34; alt=&#34;Add package dependency&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the URL for the AWS SDK for iOS Swift Package Manager GitHub repo (&lt;code&gt;https://github.com/aws-amplify/aws-sdk-ios-spm&lt;/code&gt;) into the search bar and click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/readme-images/spm-setup-02-search-amplify-repo.png&#34; alt=&#34;Search for repo&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This URL is &lt;em&gt;not&lt;/em&gt; the main URL of the SDK. We maintain the Swift Package Manager manifest (&lt;code&gt;Package.swift&lt;/code&gt;) file for this library in a separate repo so that apps that use the SDK do not have to download the entire source repository in order to consume the binary targets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You&#39;ll see the repository rules for which version of the SDK you want Swift Package Manager to install. Choose the first rule, &lt;strong&gt;Version&lt;/strong&gt;, and select &lt;strong&gt;Up to Next Minor&lt;/strong&gt; as it will use the latest compatible version of the dependency that can be detected from the &lt;code&gt;main&lt;/code&gt; branch, then click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/readme-images/spm-setup-03-dependency-version-options.png&#34; alt=&#34;Dependency version options&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The AWS Mobile SDK for iOS does &lt;a href=&#34;https://docs.amplify.aws/sdk/configuration/setup-options/q/platform/ios#aws-sdk-version-vs-semantic-versioning&#34;&gt;not use Semantic Versioning&lt;/a&gt;, and may introduce breaking API changes on minor version releases. We recommend setting your &lt;strong&gt;Version&lt;/strong&gt; rule to &lt;strong&gt;Up to Next Minor&lt;/strong&gt; and evaluating minor version releases to ensure they are compatible with your app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose which of the libraries you want added to your project. Always select the &lt;strong&gt;AWSCore&lt;/strong&gt; SDK. The remaining SDKs to install will vary based on which SDK you&#39;re trying to install. Most SDKs rely only on &lt;strong&gt;AWSCore&lt;/strong&gt;, but for a full dependency list, see the &lt;a href=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/README-spm-support.md&#34;&gt;README-spm-support file&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note: AWSLex is not currently supported for the &lt;code&gt;arm64&lt;/code&gt; architecture through Swift Package Manager due to conflicts with a packaged binary dependency.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/readme-images/spm-setup-04-select-dependencies.png&#34; alt=&#34;Select dependencies&#34;&gt;&lt;/p&gt; &lt;p&gt;Select all that are appropriate, then click &lt;strong&gt;Finish&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;You can always go back and modify which SPM packages are included in your project by opening the Swift Packages tab for your project: Click on the Project file in the Xcode navigator, then click on your project&#39;s icon, then select the &lt;strong&gt;Swift Packages&lt;/strong&gt; tab.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The AWS Mobile SDK for iOS is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. If you have not installed CocoaPods, install CocoaPods by running the command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ gem install cocoapods&#xA; $ pod setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Depending on your system settings, you may have to use &lt;code&gt;sudo&lt;/code&gt; for installing &lt;code&gt;cocoapods&lt;/code&gt; as follows:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ sudo gem install cocoapods&#xA; $ pod setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your project directory (the directory where your &lt;code&gt;*.xcodeproj&lt;/code&gt; file is), run the following to create a &lt;code&gt;Podfile&lt;/code&gt; in your project.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ pod init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit the podfile to include the pods you want to integrate into your project. For example, if you need auth, you can use AWSMobileClient, and if you need analytics, you add AWSPinpoint. As a result, your podfile might look something like this:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;target &#39;YourTarget&#39; do&#xA;    pod &#39;AWSMobileClient&#39;&#xA;    pod &#39;AWSPinpoint&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a complete list of our pods, check out the .podspec files in the root directory of this project.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Then run the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ pod install --repo-update&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To open your project, open the newly generated &lt;code&gt;*.xcworkspace&lt;/code&gt; file in your project&#39;s directory with XCode. You can do this by issuing the following command in your project folder:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ xed .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Do &lt;strong&gt;NOT&lt;/strong&gt; use &lt;code&gt;*.xcodeproj&lt;/code&gt;. If you open up a project file instead of a workspace, you may receive the following error:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; ld: library not found for -lPods-AWSCore&#xA; clang: error: linker command failed with exit code 1 (use -v to see invocation)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;h4&gt;XCFrameworks (recommended)&lt;/h4&gt; &#xA;&lt;p&gt;Carthage supports XCFrameworks in Xcode 12 or above. Follow the steps below to consume the AWS SDK for iOS using XCFrameworks:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Carthage 0.37.0 or greater.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; github &#34;aws-amplify/aws-sdk-ios&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then run the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ carthage update --use-xcframeworks --no-use-binaries&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;As of Carthage 0.37.0, prebuilt binaries using XCFrameworks are not supported, as mentioned in the Carthage release notes - &lt;a href=&#34;https://github.com/Carthage/Carthage/releases/tag/0.37.0&#34;&gt;https://github.com/Carthage/Carthage/releases/tag/0.37.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;On your application targets’ General settings tab, in the Embedded Binaries section, drag and drop each xcframework you want to use from the Carthage/Build folder on disk.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Frameworks with &#34;fat libraries&#34; (not recommended)&lt;/h4&gt; &#xA;&lt;p&gt;To build platform-specific framework bundles with multiple architectures in the binary, (Xcode 11 and below)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the latest version of &lt;a href=&#34;https://github.com/Carthage/Carthage#installing-carthage&#34;&gt;Carthage&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; github &#34;aws-amplify/aws-sdk-ios&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then run the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;With your project open in Xcode, select your &lt;strong&gt;Target&lt;/strong&gt;. Under &lt;strong&gt;General&lt;/strong&gt; tab, find &lt;strong&gt;Frameworks, Libraries, and Embedded Content&lt;/strong&gt; and then click the &lt;strong&gt;+&lt;/strong&gt; button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click the &lt;strong&gt;Add Other...&lt;/strong&gt; button, then &#34;Add Files...&#34; in the popup menu, then navigate to the &lt;code&gt;AWS&amp;lt;#ServiceName#&amp;gt;.framework&lt;/code&gt; files under &lt;code&gt;Carthage&lt;/code&gt; &amp;gt; &lt;code&gt;Build&lt;/code&gt; &amp;gt; &lt;code&gt;iOS&lt;/code&gt; and select them. Do not check the &lt;strong&gt;Destination: Copy items if needed&lt;/strong&gt; checkbox if prompted. Add the frameworks that you need for you specific use case. For example, if you are using AWSMobileClient and AWSPinpoint, you will want to add the following frameworks:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSAuthCore.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSCognitoIdentityProvider.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSCognitoIdentityProviderASF.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSCore.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSMobileClient.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSPinpoint.framework&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Under the &lt;strong&gt;Build Phases&lt;/strong&gt; tab in your &lt;strong&gt;Target&lt;/strong&gt;, click the &lt;strong&gt;+&lt;/strong&gt; button on the top left and then select &lt;strong&gt;New Run Script Phase&lt;/strong&gt;. Then setup the build phase as follows. Make sure this phase is below the &lt;code&gt;Embed Frameworks&lt;/code&gt; phase.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; Shell /bin/sh&#xA; &#xA; bash &#34;${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}/AWSCore.framework/strip-frameworks.sh&#34;&#xA; &#xA; Show environment variables in build log: Checked&#xA; Run script only when installing: Not checked&#xA; &#xA; Input Files: Empty&#xA; Output Files: Empty&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Currently, the AWS SDK for iOS builds the Carthage binaries using the latest released version of Xcode. To consume the pre-built binaries your Xcode version needs to be the same, else you have to build the frameworks on your machine by passing &lt;code&gt;--no-use-binaries&lt;/code&gt; flag to &lt;code&gt;carthage update&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Frameworks&lt;/h3&gt; &#xA;&lt;h4&gt;XCFramework setup&lt;/h4&gt; &#xA;&lt;p&gt;Starting AWS SDK iOS version 2.22.1, SDK binaries are released as XCFrameworks. Follow the steps below to install XCFramework.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://releases.amplify.aws/aws-sdk-ios/latest/aws-ios-sdk.zip&#34;&gt;latest SDK&lt;/a&gt;. Older SDK versions can be downloaded from &lt;code&gt;https://releases.amplify.aws/aws-sdk-ios/aws-ios-sdk-#.#.#.zip&lt;/code&gt;, where &lt;code&gt;#.#.#&lt;/code&gt; represents the version number. So for version 2.23.3, the download link is &lt;a href=&#34;https://releases.amplify.aws/aws-sdk-ios/aws-ios-sdk-2.23.3.zip&#34;&gt;https://releases.amplify.aws/aws-sdk-ios/aws-ios-sdk-2.23.3.zip&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note1: If you are using version &amp;lt; 2.22.1 please refer to the &#34;Legacy framework setup&#34; section below. Note2: To download version &amp;lt; 2.23.3 use this link &lt;code&gt;https://sdk-for-ios.amazonwebservices.com/aws-ios-sdk-#.#.#.zip&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Uncompress the ZIP file&lt;/li&gt; &#xA; &lt;li&gt;On your application targets’ General settings tab, in the Embedded Binaries section, drag and drop each xcframework you want to use from the downloaded folder.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Legacy framework setup&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the required SDK using &lt;code&gt;https://sdk-for-ios.amazonwebservices.com/aws-ios-sdk-#.#.#.zip&lt;/code&gt;, where &lt;code&gt;#.#.#&lt;/code&gt; represents the version number. So for version 2.10.2, the download link is &lt;a href=&#34;https://sdk-for-ios.amazonwebservices.com/aws-ios-sdk-2.10.2.zip&#34;&gt;https://sdk-for-ios.amazonwebservices.com/aws-ios-sdk-2.10.2.zip&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you are using version &amp;gt; 2.22.0 please refer to the &#34;XCFramework setup&#34; section above.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;With your project open in Xcode, select your &lt;strong&gt;Target&lt;/strong&gt;. Under &lt;strong&gt;General&lt;/strong&gt; tab, find &lt;strong&gt;Embedded Binaries&lt;/strong&gt; and then click the &lt;strong&gt;+&lt;/strong&gt; button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click the &lt;strong&gt;Add Other...&lt;/strong&gt; button, navigate to the &lt;code&gt;AWS&amp;lt;#ServiceName#&amp;gt;.framework&lt;/code&gt; files and select them. Check the &lt;strong&gt;Destination: Copy items if needed&lt;/strong&gt; checkbox when prompted. Add the frameworks that you need for you specific use case. For example, if you are using AWSMobileClient and AWSPinpoint, you will want to add the following frameworks:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSAuthCore.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSCognitoIdentityProvider.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSCognitoIdentityProviderASF.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSCore.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSMobileClient.framework&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWSPinpoint.framework&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Under the &lt;strong&gt;Build Phases&lt;/strong&gt; tab in your &lt;strong&gt;Target&lt;/strong&gt;, click the &lt;strong&gt;+&lt;/strong&gt; button on the top left and then select &lt;strong&gt;New Run Script Phase&lt;/strong&gt;. Then setup the build phase as follows. Make sure this phase is below the &lt;code&gt;Embed Frameworks&lt;/code&gt; phase.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; Shell /bin/sh&#xA; &#xA; bash &#34;${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}/AWSCore.framework/strip-frameworks.sh&#34;&#xA; &#xA; Show environment variables in build log: Checked&#xA; Run script only when installing: Not checked&#xA; &#xA; Input Files: Empty&#xA; Output Files: Empty&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Update the SDK to a Newer Version&lt;/h2&gt; &#xA;&lt;p&gt;When we release a new version of the SDK, you can pick up the changes as described below.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the following command in your project directory. CocoaPods automatically picks up the new changes.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ pod update&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If your pod is having an issue, you can delete &lt;code&gt;Podfile.lock&lt;/code&gt; and &lt;code&gt;Pods/&lt;/code&gt; then run &lt;code&gt;pod install&lt;/code&gt; to cleanly install the SDK.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/readme-images/cocoapods-setup-03.png?raw=true&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the following command in your project directory. Carthage automatically picks up the new changes.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Frameworks&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In Xcode&#39;s &lt;strong&gt;Project Navigator&lt;/strong&gt;, type &#34;AWS&#34; to find the AWS Frameworks or XCFrameworks that you manually added to your project. Select all of the AWS Frameworks and hit &lt;strong&gt;Delete&lt;/strong&gt; on your keyboard. Then select &lt;strong&gt;Move to Trash&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the installation process above to include the new version of the SDK.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started with Swift&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Import the AWSCore header in the application delegate.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import AWSCore&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a default service configuration by adding the following code snippet in the &lt;code&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt; application delegate method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let credentialsProvider = AWSCognitoCredentialsProvider(&#xA;    regionType: CognitoRegionType,&#xA;    identityPoolId: CognitoIdentityPoolId)&#xA;let configuration = AWSServiceConfiguration(&#xA;    region: DefaultServiceRegionType,&#xA;    credentialsProvider: credentialsProvider)&#xA;AWSServiceManager.default().defaultServiceConfiguration = configuration&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In Swift file you want to use the SDK, import the appropriate headers for the services you are using. The header file import convention is &lt;code&gt;import AWSServiceName&lt;/code&gt;, as in the following examples:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import AWSS3&#xA;import AWSDynamoDB&#xA;import AWSSQS&#xA;import AWSSNS&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make a call to the AWS services.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dynamoDB = AWSDynamoDB.default()&#xA;let listTableInput = AWSDynamoDBListTablesInput()&#xA;dynamoDB.listTables(listTableInput!).continueWith { (task:AWSTask&amp;lt;AWSDynamoDBListTablesOutput&amp;gt;) -&amp;gt; Any? in&#xA;    if let error = task.error as? NSError {&#xA;    print(&#34;Error occurred: \(error)&#34;)&#xA;        return nil&#xA;    }&#xA;&#xA;    let listTablesOutput = task.result&#xA;&#xA;    for tableName in listTablesOutput!.tableNames! {&#xA;        print(&#34;\(tableName)&#34;)&#xA;    }&#xA;&#xA;    return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Most of the service client classes have a singleton method to get a default client. The naming convention is &lt;code&gt;+ defaultSERVICENAME&lt;/code&gt; (e.g. &lt;code&gt;+ defaultDynamoDB&lt;/code&gt; in the above code snippet). This singleton method creates a service client with &lt;code&gt;defaultServiceConfiguration&lt;/code&gt;, which you set up in step 5, and maintains a strong reference to the client.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started with Objective-C&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Import the AWSCore header in the application delegate.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@import AWSCore;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a default service configuration by adding the following code snippet in the &lt;code&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt; application delegate method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;AWSCognitoCredentialsProvider *credentialsProvider = [[AWSCognitoCredentialsProvider alloc] initWithRegionType:CognitoRegionType&#xA;                                                                                                identityPoolId:CognitoIdentityPoolId];&#xA;AWSServiceConfiguration *configuration = [[AWSServiceConfiguration alloc] initWithRegion:DefaultServiceRegionType&#xA;                                                                     credentialsProvider:credentialsProvider];&#xA;AWSServiceManager.defaultServiceManager.defaultServiceConfiguration = configuration;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Import the appropriate headers for the services you are using. The header file import convention is &lt;code&gt;@import AWSServiceName;&lt;/code&gt;, as in the following examples:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@import AWSS3;&#xA;@import AWSDynamoDB;&#xA;@import AWSSQS;&#xA;@import AWSSNS;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make a call to the AWS services.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;AWSSNS *sns = [AWSSNS defaultSNS];&#xA;AWSSNSListTopicsInput *listTopicsInput = [AWSSNSListTopicsInput new];&#xA;[[sns listTopics:listTopicsInput] continueWithBlock:^id(AWSTask *task) {&#xA;    // Do something with the response&#xA;    return nil;&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Most of the service client classes have a singleton method to get a default client. The naming convention is &lt;code&gt;+ defaultSERVICENAME&lt;/code&gt; (e.g. &lt;code&gt;+ defaultS3SNS&lt;/code&gt; in the above code snippet). This singleton method creates a service client with &lt;code&gt;defaultServiceConfiguration&lt;/code&gt;, which you set up in step 5, and maintains a strong reference to the client.&lt;/p&gt; &#xA;&lt;h2&gt;Working with AWSTask&lt;/h2&gt; &#xA;&lt;p&gt;The SDK returns &lt;code&gt;AWSTask&lt;/code&gt; objects when operating on asynchronous operations to avoid blocking the UI thread.&lt;/p&gt; &#xA;&lt;p&gt;The AWSTask class is a renamed version of BFTask from the Bolts framework. For complete documentation on Bolts, see the &lt;a href=&#34;https://github.com/BoltsFramework/Bolts-ObjC&#34;&gt;Bolts-iOS repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;As of version 2.5.4 of this SDK, logging utilizes &lt;a href=&#34;https://github.com/CocoaLumberjack/CocoaLumberjack&#34;&gt;CocoaLumberjack&lt;/a&gt;, a flexible, fast, open source logging framework. It supports many capabilities including the ability to set logging level per output target, for instance, concise messages logged to the console and verbose messages to a log file.&lt;/p&gt; &#xA;&lt;p&gt;CocoaLumberjack logging levels are additive such that when the level is set to verbose, all messages from the levels below verbose are logged. It is also possible to set custom logging to meet your needs. For more information, see &lt;a href=&#34;https://github.com/CocoaLumberjack/CocoaLumberjack/raw/master/Documentation/CustomLogLevels.md&#34;&gt;CocoaLumberjack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Changing Log Levels&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AWSDDLog.sharedInstance.logLevel = .verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following logging level options are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.off&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.error&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.warning&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.info&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.verbose&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Objective-C&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[AWSDDLog sharedInstance].logLevel = AWSDDLogLevelVerbose;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following logging level options are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AWSDDLogLevelOff&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AWSDDLogLevelError&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AWSDDLogLevelWarning&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AWSDDLogLevelInfo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AWSDDLogLevelDebug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AWSDDLogLevelVerbose&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We recommend setting the log level to &lt;code&gt;Off&lt;/code&gt; before publishing to the Apple App Store.&lt;/p&gt; &#xA;&lt;h3&gt;Targeting Log Output&lt;/h3&gt; &#xA;&lt;p&gt;CocoaLumberjack can direct logs to file or used as a framework that integrates with the Xcode console.&lt;/p&gt; &#xA;&lt;p&gt;To initialize logging to files, use the following code:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let fileLogger: AWSDDFileLogger = AWSDDFileLogger() // File Logger&#xA;fileLogger.rollingFrequency = TimeInterval(60*60*24)  // 24 hours&#xA;fileLogger.logFileManager.maximumNumberOfLogFiles = 7&#xA;AWSDDLog.add(fileLogger)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Objective-C&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;AWSDDFileLogger *fileLogger = [[AWSDDFileLogger alloc] init]; // File Logger&#xA;fileLogger.rollingFrequency = 60 * 60 * 24; // 24 hour rolling&#xA;fileLogger.logFileManager.maximumNumberOfLogFiles = 7;&#xA;[AWSDDLog addLogger:fileLogger];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To initialize logging to your Xcode console, use the following code:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AWSDDLog.add(AWSDDTTYLogger.sharedInstance) // TTY = Xcode console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Objective-C&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[AWSDDLog addLogger:[AWSDDTTYLogger sharedInstance]]; // TTY = Xcode console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Open Source Contributions&lt;/h2&gt; &#xA;&lt;p&gt;We welcome any and all contributions from the community! Make sure you read through our contribution guide &lt;a href=&#34;https://raw.githubusercontent.com/aws-amplify/aws-sdk-ios/main/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt; before submitting any PR&#39;s. Thanks! &amp;lt;3&lt;/p&gt; &#xA;&lt;h2&gt;Talk to Us&lt;/h2&gt; &#xA;&lt;p&gt;Visit our GitHub &lt;a href=&#34;https://github.com/aws-amplify/aws-sdk-ios/issues&#34;&gt;Issues&lt;/a&gt; to leave feedback and to connect with other users of the SDK.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Amazon Web Services&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;strong&gt;LICENSE&lt;/strong&gt; file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>