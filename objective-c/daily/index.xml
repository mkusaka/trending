<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-01T01:41:47Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ruslanskorb/RSKImageCropper</title>
    <updated>2023-03-01T01:41:47Z</updated>
    <id>tag:github.com,2023-03-01:/ruslanskorb/RSKImageCropper</id>
    <link href="https://github.com/ruslanskorb/RSKImageCropper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An image cropper / photo cropper for iOS like in the Contacts app with support for landscape orientation.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;RSKImageCropper &lt;img src=&#34;https://github.com/ruslanskorb/RSKImageCropper/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat&#34; alt=&#34;Swift Package Manager&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/v/RSKImageCropper.svg?style=flat&#34; alt=&#34;CocoaPods&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage&#34;&gt;&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ruslanskorb/RSKImageCropper/master/Screenshot.png&#34; alt=&#34;Sample&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;An image cropper for iOS like in the Contacts app with support for landscape orientation.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;RSKImageCropper requires iOS 12.0 or later.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;To add the &lt;code&gt;RSKImageCropper&lt;/code&gt; package to your Xcode project, select File &amp;gt; Swift Packages &amp;gt; Add Package Dependency and enter the repository URL.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; https://github.com/ruslanskorb/RSKImageCropper.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the pod &lt;code&gt;RSKImageCropper&lt;/code&gt; to your &lt;a href=&#34;http://guides.cocoapods.org/using/the-podfile.html&#34;&gt;Podfile&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pod &#39;RSKImageCropper&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;pod install&lt;/code&gt; from Terminal, then open your app&#39;s &lt;code&gt;.xcworkspace&lt;/code&gt; file to launch Xcode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Import the &lt;code&gt;RSKImageCropper.h&lt;/code&gt; header. Typically, this should be written as &lt;code&gt;#import &amp;lt;RSKImageCropper/RSKImageCropper.h&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;ruslanskorb/RSKImageCropper&lt;/code&gt; project to your &lt;a href=&#34;https://github.com/Carthage/Carthage/raw/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;github &#34;ruslanskorb/RSKImageCropper&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt;, then follow the &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;additional steps required&lt;/a&gt; to add the iOS and/or Mac frameworks into your project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Import the RSKImageCropper framework/module.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using Modules: &lt;code&gt;@import RSKImageCropper&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Without Modules: &lt;code&gt;#import &amp;lt;RSKImageCropper/RSKImageCropper.h&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Import the class header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;RSKImageCropper/RSKImageCropper.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just create a view controller for image cropping and set the delegate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (IBAction)onButtonTouch:(UIButton *)sender&#xA;{&#xA;    UIImage *image = [UIImage imageNamed:@&#34;image&#34;];&#xA;    RSKImageCropViewController *imageCropViewController = [[RSKImageCropViewController alloc] initWithImage:image];&#xA;    imageCropViewController.delegate = self;&#xA;    [self.navigationController pushViewController:imageCropViewController animated:YES];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Delegate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;RSKImageCropViewControllerDelegate&lt;/code&gt; provides three delegate methods. To use them, implement the delegate in your view controller.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@interface ViewController () &amp;lt;RSKImageCropViewControllerDelegate&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then implement the delegate functions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// Crop image has been canceled.&#xA;- (void)imageCropViewControllerDidCancelCrop:(RSKImageCropViewController *)controller&#xA;{&#xA;    [self.navigationController popViewControllerAnimated:YES];&#xA;}&#xA;&#xA;// The original image has been cropped. Additionally provides a rotation angle used to produce image.&#xA;- (void)imageCropViewController:(RSKImageCropViewController *)controller&#xA;                   didCropImage:(UIImage *)croppedImage&#xA;                  usingCropRect:(CGRect)cropRect&#xA;                  rotationAngle:(CGFloat)rotationAngle&#xA;{&#xA;    self.imageView.image = croppedImage;&#xA;    [self.navigationController popViewControllerAnimated:YES];&#xA;}&#xA;&#xA;// The original image will be cropped.&#xA;- (void)imageCropViewController:(RSKImageCropViewController *)controller&#xA;                  willCropImage:(UIImage *)originalImage&#xA;{&#xA;    // Use when `applyMaskToCroppedImage` set to YES.&#xA;    [SVProgressHUD show];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;DataSource&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;RSKImageCropViewControllerDataSource&lt;/code&gt; provides three data source methods. The method &lt;code&gt;imageCropViewControllerCustomMaskRect:&lt;/code&gt; asks the data source for a custom rect for the mask. The method &lt;code&gt;imageCropViewControllerCustomMaskPath:&lt;/code&gt; asks the data source for a custom path for the mask. The method &lt;code&gt;imageCropViewControllerCustomMovementRect:&lt;/code&gt; asks the data source for a custom rect in which the image can be moved. To use them, implement the data source in your view controller.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@interface ViewController () &amp;lt;RSKImageCropViewControllerDataSource&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then implement the data source functions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// Returns a custom rect for the mask.&#xA;- (CGRect)imageCropViewControllerCustomMaskRect:(RSKImageCropViewController *)controller&#xA;{&#xA;    CGSize aspectRatio = CGSizeMake(16.0f, 9.0f);&#xA;    &#xA;    CGFloat viewWidth = CGRectGetWidth(controller.view.frame);&#xA;    CGFloat viewHeight = CGRectGetHeight(controller.view.frame);&#xA;    &#xA;    CGFloat maskWidth;&#xA;    if ([controller isPortraitInterfaceOrientation]) {&#xA;        maskWidth = viewWidth;&#xA;    } else {&#xA;        maskWidth = viewHeight;&#xA;    }&#xA;    &#xA;    CGFloat maskHeight;&#xA;    do {&#xA;        maskHeight = maskWidth * aspectRatio.height / aspectRatio.width;&#xA;        maskWidth -= 1.0f;&#xA;    } while (maskHeight != floor(maskHeight));&#xA;    maskWidth += 1.0f;&#xA;    &#xA;    CGSize maskSize = CGSizeMake(maskWidth, maskHeight);&#xA;    &#xA;    CGRect maskRect = CGRectMake((viewWidth - maskSize.width) * 0.5f,&#xA;                                 (viewHeight - maskSize.height) * 0.5f,&#xA;                                 maskSize.width,&#xA;                                 maskSize.height);&#xA;    &#xA;    return maskRect;&#xA;}&#xA;&#xA;// Returns a custom path for the mask.&#xA;- (UIBezierPath *)imageCropViewControllerCustomMaskPath:(RSKImageCropViewController *)controller&#xA;{&#xA;    CGRect rect = controller.maskRect;&#xA;    CGPoint point1 = CGPointMake(CGRectGetMinX(rect), CGRectGetMaxY(rect));&#xA;    CGPoint point2 = CGPointMake(CGRectGetMaxX(rect), CGRectGetMaxY(rect));&#xA;    CGPoint point3 = CGPointMake(CGRectGetMaxX(rect), CGRectGetMinY(rect));&#xA;    CGPoint point4 = CGPointMake(CGRectGetMinX(rect), CGRectGetMinY(rect));&#xA;    &#xA;    UIBezierPath *rectangle = [UIBezierPath bezierPath];&#xA;    [rectangle moveToPoint:point1];&#xA;    [rectangle addLineToPoint:point2];&#xA;    [rectangle addLineToPoint:point3];&#xA;    [rectangle addLineToPoint:point4];&#xA;    [rectangle closePath];&#xA;    &#xA;    return rectangle;&#xA;}&#xA;&#xA;// Returns a custom rect in which the image can be moved.&#xA;- (CGRect)imageCropViewControllerCustomMovementRect:(RSKImageCropViewController *)controller&#xA;{&#xA;    if (controller.rotationAngle == 0) {&#xA;        return controller.maskRect;&#xA;    } else {&#xA;        CGRect maskRect = controller.maskRect;&#xA;        CGFloat rotationAngle = controller.rotationAngle;&#xA;        &#xA;        CGRect movementRect = CGRectZero;&#xA;        &#xA;        movementRect.size.width = CGRectGetWidth(maskRect) * fabs(cos(rotationAngle)) + CGRectGetHeight(maskRect) * fabs(sin(rotationAngle));&#xA;        movementRect.size.height = CGRectGetHeight(maskRect) * fabs(cos(rotationAngle)) + CGRectGetWidth(maskRect) * fabs(sin(rotationAngle));&#xA;        &#xA;        movementRect.origin.x = CGRectGetMinX(maskRect) + (CGRectGetWidth(maskRect) - CGRectGetWidth(movementRect)) * 0.5f;&#xA;        movementRect.origin.y = CGRectGetMinY(maskRect) + (CGRectGetHeight(maskRect) - CGRectGetHeight(movementRect)) * 0.5f;&#xA;        &#xA;        movementRect.origin.x = floor(CGRectGetMinX(movementRect));&#xA;        movementRect.origin.y = floor(CGRectGetMinY(movementRect));&#xA;        movementRect = CGRectIntegral(movementRect);&#xA;        &#xA;        return movementRect;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Coming Soon&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you would like to request a new feature, feel free to raise an issue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Build and run the &lt;code&gt;RSKImageCropperExample&lt;/code&gt; project in Xcode to see &lt;code&gt;RSKImageCropper&lt;/code&gt; in action. Have fun. Fork and send pull requests. Figure out hooks for customization.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Ruslan Skorb&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/ruslanskorb&#34;&gt;http://github.com/ruslanskorb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/ruslanskorb&#34;&gt;http://twitter.com/ruslanskorb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:ruslan.skorb@gmail.com&#34;&gt;ruslan.skorb@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is available under the MIT license. See the LICENSE file for more info. Attribution by linking to the &lt;a href=&#34;https://github.com/ruslanskorb/RSKImageCropper&#34;&gt;project page&lt;/a&gt; is appreciated.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dzenbot/DZNEmptyDataSet</title>
    <updated>2023-03-01T01:41:47Z</updated>
    <id>tag:github.com,2023-03-01:/dzenbot/DZNEmptyDataSet</id>
    <link href="https://github.com/dzenbot/DZNEmptyDataSet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A drop-in UITableView/UICollectionView superclass category for showing empty datasets whenever the view has no content to display&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DZNEmptyDataSet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/dzenbot/DZNEmptyDataSet.svg?branch=master&#34;&gt;&lt;img src=&#34;https://travis-ci.org/dzenbot/DZNEmptyDataSet.svg?branch=master&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/dzenbot/DZNEmptyDataSet&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/dzenbot/DZNEmptyDataSet/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/DZNEmptyDataSet/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/DZNEmptyDataSet.svg?sanitize=true&#34; alt=&#34;Pod Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Projects using this library&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dzenbot/DZNEmptyDataSet/wiki/Projects-using-DZNEmptyDataSet&#34;&gt;Add your project to the list here&lt;/a&gt; and provide a (320px wide) render of the result.&lt;/p&gt; &#xA;&lt;h3&gt;The Empty Data Set Pattern&lt;/h3&gt; &#xA;&lt;p&gt;Also known as &lt;em&gt;&lt;a href=&#34;http://emptystat.es/&#34;&gt;Empty State&lt;/a&gt;&lt;/em&gt; or &lt;em&gt;&lt;a href=&#34;http://patternry.com/p=blank-slate/&#34;&gt;Blank Slate&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most applications show lists of content (data sets), which many turn out to be empty at one point, specially for new users with blank accounts. Empty screens create confusion by not being clear about what&#39;s going on, if there is an error/bug or if the user is supposed to do something within your app to be able to consume the content.&lt;/p&gt; &#xA;&lt;p&gt;Please read this very interesting article about &lt;a href=&#34;http://tympanus.net/codrops/2013/01/09/designing-for-the-empty-states/&#34;&gt;&lt;em&gt;Designing For The Empty States&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dzenbot/DZNEmptyDataSet/v2-swift/Examples/Applications/Screenshots/Screenshots_row1.png&#34; alt=&#34;Screenshots_Row1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dzenbot/DZNEmptyDataSet/v2-swift/Examples/Applications/Screenshots/Screenshots_row2.png&#34; alt=&#34;Screenshots_Row2&#34;&gt; (&lt;em&gt;These are real life examples, available in the &#39;Applications&#39; sample project in the v2-Swift branch&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://pttrns.com/?did=1&amp;amp;scid=30&#34;&gt;Empty Data Sets&lt;/a&gt;&lt;/strong&gt; are helpful for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Avoiding white-screens and communicating to your users why the screen is empty.&lt;/li&gt; &#xA; &lt;li&gt;Calling to action (particularly as an onboarding process).&lt;/li&gt; &#xA; &lt;li&gt;Avoiding other interruptive mechanisms like showing error alerts.&lt;/li&gt; &#xA; &lt;li&gt;Being consistent and improving the user experience.&lt;/li&gt; &#xA; &lt;li&gt;Delivering a brand presence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compatible with UITableView and UICollectionView. Also compatible with UISearchDisplayController and UIScrollView.&lt;/li&gt; &#xA; &lt;li&gt;Gives multiple possibilities of layout and appearance, by showing an image and/or title label and/or description label and/or button.&lt;/li&gt; &#xA; &lt;li&gt;Uses NSAttributedString for easier appearance customisation.&lt;/li&gt; &#xA; &lt;li&gt;Uses auto-layout to automagically center the content to the tableview, with auto-rotation support. Also accepts custom vertical and horizontal alignment.&lt;/li&gt; &#xA; &lt;li&gt;Background color customisation.&lt;/li&gt; &#xA; &lt;li&gt;Allows tap gesture on the whole tableview rectangle (useful for resigning first responder or similar actions).&lt;/li&gt; &#xA; &lt;li&gt;For more advanced customisation, it allows a custom view.&lt;/li&gt; &#xA; &lt;li&gt;Compatible with Storyboard.&lt;/li&gt; &#xA; &lt;li&gt;Compatible with iOS 6, tvOS 9, or later.&lt;/li&gt; &#xA; &lt;li&gt;Compatible with iPhone, iPad, and Apple TV.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;App Store ready&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This library has been designed in a way where you won&#39;t need to extend UITableView or UICollectionView class. It will still work when using UITableViewController or UICollectionViewController. By just conforming to DZNEmptyDataSetSource &amp;amp; DZNEmptyDataSetDelegate, you will be able to fully customize the content and appearance of the empty states for your application.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Available in &lt;a href=&#34;http://cocoapods.org/?q=DZNEmptyDataSet&#34;&gt;CocoaPods&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;DZNEmptyDataSet&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate DZNEmptyDataSet into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;dzenbot/DZNEmptyDataSet&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate DZNEmptyDataSet into your Xcode project using SPM, specify it in your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;.package(&#xA;    url: &#34;https://github.com/dzenbot/DZNEmptyDataSet&#34;,&#xA;    .branch(&#34;master&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For existing, go to &#34;File Navigator&#34; -&amp;gt; &#34;Select Project&#34; -&amp;gt; &#34;Project Name&#34; -&amp;gt; &#34;Swift Packages&#34; -&amp;gt; &#34;+&#34; -&amp;gt; Paste &#34;&lt;a href=&#34;https://github.com/dzenbot/DZNEmptyDataSet&#34;&gt;https://github.com/dzenbot/DZNEmptyDataSet&lt;/a&gt;&#34; and proceed to select your target.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;For complete documentation, &lt;a href=&#34;http://cocoadocs.org/docsets/DZNEmptyDataSet/&#34;&gt;visit CocoaPods&#39; auto-generated doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Import&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &#34;UIScrollView+EmptyDataSet.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unless you are importing as a framework, then do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;DZNEmptyDataSet/UIScrollView+EmptyDataSet.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Protocol Conformance&lt;/h3&gt; &#xA;&lt;p&gt;Conform to datasource and/or delegate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface MainViewController : UITableViewController &amp;lt;DZNEmptyDataSetSource, DZNEmptyDataSetDelegate&amp;gt;&#xA;&#xA;- (void)viewDidLoad&#xA;{&#xA;    [super viewDidLoad];&#xA;&#xA;    self.tableView.emptyDataSetSource = self;&#xA;    self.tableView.emptyDataSetDelegate = self;&#xA;    &#xA;    // A little trick for removing the cell separators&#xA;    self.tableView.tableFooterView = [UIView new];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data Source Implementation&lt;/h3&gt; &#xA;&lt;p&gt;Return the content you want to show on the empty state, and take advantage of NSAttributedString features to customise the text appearance.&lt;/p&gt; &#xA;&lt;p&gt;The image for the empty state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (UIImage *)imageForEmptyDataSet:(UIScrollView *)scrollView&#xA;{&#xA;    return [UIImage imageNamed:@&#34;empty_placeholder&#34;];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The attributed string for the title of the empty state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (NSAttributedString *)titleForEmptyDataSet:(UIScrollView *)scrollView&#xA;{&#xA;    NSString *text = @&#34;Please Allow Photo Access&#34;;&#xA;    &#xA;    NSDictionary *attributes = @{NSFontAttributeName: [UIFont boldSystemFontOfSize:18.0f],&#xA;                                 NSForegroundColorAttributeName: [UIColor darkGrayColor]};&#xA;    &#xA;    return [[NSAttributedString alloc] initWithString:text attributes:attributes];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The attributed string for the description of the empty state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (NSAttributedString *)descriptionForEmptyDataSet:(UIScrollView *)scrollView&#xA;{&#xA;    NSString *text = @&#34;This allows you to share photos from your library and save photos to your camera roll.&#34;;&#xA;    &#xA;    NSMutableParagraphStyle *paragraph = [NSMutableParagraphStyle new];&#xA;    paragraph.lineBreakMode = NSLineBreakByWordWrapping;&#xA;    paragraph.alignment = NSTextAlignmentCenter;&#xA;    &#xA;    NSDictionary *attributes = @{NSFontAttributeName: [UIFont systemFontOfSize:14.0f],&#xA;                                 NSForegroundColorAttributeName: [UIColor lightGrayColor],&#xA;                                 NSParagraphStyleAttributeName: paragraph};&#xA;                                 &#xA;    return [[NSAttributedString alloc] initWithString:text attributes:attributes];                      &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The attributed string to be used for the specified button state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (NSAttributedString *)buttonTitleForEmptyDataSet:(UIScrollView *)scrollView forState:(UIControlState)state&#xA;{&#xA;    NSDictionary *attributes = @{NSFontAttributeName: [UIFont boldSystemFontOfSize:17.0f]};&#xA;&#xA;    return [[NSAttributedString alloc] initWithString:@&#34;Continue&#34; attributes:attributes];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the image to be used for the specified button state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (UIImage *)buttonImageForEmptyDataSet:(UIScrollView *)scrollView forState:(UIControlState)state&#xA;{&#xA;    return [UIImage imageNamed:@&#34;button_image&#34;];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The background color for the empty state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (UIColor *)backgroundColorForEmptyDataSet:(UIScrollView *)scrollView&#xA;{&#xA;    return [UIColor whiteColor];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need a more complex layout, you can return a custom view instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (UIView *)customViewForEmptyDataSet:(UIScrollView *)scrollView&#xA;{&#xA;    UIActivityIndicatorView *activityView = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];&#xA;    [activityView startAnimating];&#xA;    return activityView;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The image view animation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (CAAnimation *)imageAnimationForEmptyDataSet:(UIScrollView *)scrollView&#xA;{&#xA;    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath: @&#34;transform&#34;];&#xA;    &#xA;    animation.fromValue = [NSValue valueWithCATransform3D:CATransform3DIdentity];&#xA;    animation.toValue = [NSValue valueWithCATransform3D:CATransform3DMakeRotation(M_PI_2, 0.0, 0.0, 1.0)];&#xA;    &#xA;    animation.duration = 0.25;&#xA;    animation.cumulative = YES;&#xA;    animation.repeatCount = MAXFLOAT;&#xA;    &#xA;    return animation;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, you can also adjust the vertical alignment of the content view (ie: useful when there is tableHeaderView visible):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (CGFloat)verticalOffsetForEmptyDataSet:(UIScrollView *)scrollView&#xA;{&#xA;    return -self.tableView.tableHeaderView.frame.size.height/2.0f;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you can separate components from each other (default separation is 11 pts):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (CGFloat)spaceHeightForEmptyDataSet:(UIScrollView *)scrollView&#xA;{&#xA;    return 20.0f;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delegate Implementation&lt;/h3&gt; &#xA;&lt;p&gt;Return the behaviours you would expect from the empty states, and receive the user events.&lt;/p&gt; &#xA;&lt;p&gt;Asks to know if the empty state should be rendered and displayed (Default is YES) :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)emptyDataSetShouldDisplay:(UIScrollView *)scrollView&#xA;{&#xA;    return YES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asks for interaction permission (Default is YES) :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)emptyDataSetShouldAllowTouch:(UIScrollView *)scrollView&#xA;{&#xA;    return YES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asks for scrolling permission (Default is NO) :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)emptyDataSetShouldAllowScroll:(UIScrollView *)scrollView&#xA;{&#xA;    return YES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asks for image view animation permission (Default is NO) :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL) emptyDataSetShouldAllowImageViewAnimate:(UIScrollView *)scrollView&#xA;{&#xA;    return YES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notifies when the dataset view was tapped:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)emptyDataSet:(UIScrollView *)scrollView didTapView:(UIView *)view&#xA;{&#xA;    // Do something&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notifies when the data set call to action button was tapped:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)emptyDataSet:(UIScrollView *)scrollView didTapButton:(UIButton *)button&#xA;{&#xA;    // Do something&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Refresh layout&lt;/h3&gt; &#xA;&lt;p&gt;If you need to refresh the empty state layout, simply call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self.tableView reloadData];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self.collectionView reloadData];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;depending of which you are using.&lt;/p&gt; &#xA;&lt;h3&gt;Force layout update&lt;/h3&gt; &#xA;&lt;p&gt;You can also call &lt;code&gt;[self.tableView reloadEmptyDataSet]&lt;/code&gt; to invalidate the current empty state layout and trigger a layout update, bypassing &lt;code&gt;-reloadData&lt;/code&gt;. This might be useful if you have a lot of logic on your data source that you want to avoid calling, when not needed. &lt;code&gt;[self.scrollView reloadEmptyDataSet]&lt;/code&gt; is the only way to refresh content when using with UIScrollView.&lt;/p&gt; &#xA;&lt;h2&gt;Sample projects&lt;/h2&gt; &#xA;&lt;h4&gt;Applications&lt;/h4&gt; &#xA;&lt;p&gt;This project replicates several popular application&#39;s empty states (~20) with their exact content and appearance, such as Airbnb, Dropbox, Facebook, Foursquare, and many others. See how easy and flexible it is to customize the appearance of your empty states. You can also use this project as a playground to test things.&lt;/p&gt; &#xA;&lt;h4&gt;Countries&lt;/h4&gt; &#xA;&lt;p&gt;This project shows a list of the world countries loaded from CoreData. It uses NSFecthedResultController for filtering search. When searching and no content is matched, a simple empty state is shown. See how to interact between the UITableViewDataSource and the DZNEmptyDataSetSource protocols, while using a typical CoreData stack.&lt;/p&gt; &#xA;&lt;h4&gt;Colors&lt;/h4&gt; &#xA;&lt;p&gt;This project is a simple example of how this library also works with UICollectionView and UISearchDisplayController, while using Storyboards.&lt;/p&gt; &#xA;&lt;h2&gt;Collaboration&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to collaborate with ideas, issues and/or pull requests.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;(The MIT License)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2016 Ignacio Romero Zurbuchen &lt;a href=&#34;mailto:iromero@dzen.cl&#34;&gt;iromero@dzen.cl&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#39;Software&#39;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#39;AS IS&#39;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
</feed>