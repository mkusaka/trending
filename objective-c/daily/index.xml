<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-04T01:53:43Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rileytestut/Roxas</title>
    <updated>2022-07-04T01:53:43Z</updated>
    <id>tag:github.com,2022-07-04:/rileytestut/Roxas</id>
    <link href="https://github.com/rileytestut/Roxas" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>iziz/libPhoneNumber-iOS</title>
    <updated>2022-07-04T01:53:43Z</updated>
    <id>tag:github.com,2022-07-04:/iziz/libPhoneNumber-iOS</id>
    <link href="https://github.com/iziz/libPhoneNumber-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS port from libphonenumber (Google&#39;s phone number handling library)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/?q=libPhoneNumber-iOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/libPhoneNumber-iOS.svg?style=flat&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/?q=libPhoneNumber-iOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/libPhoneNumber-iOS.svg?style=flat&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/iziz/libPhoneNumber-iOS&#34;&gt;&lt;img src=&#34;https://travis-ci.org/iziz/libPhoneNumber-iOS.svg?branch=master&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/iziz/libPhoneNumber-iOS?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/iziz/libPhoneNumber-iOS/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coveralls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;strong&gt;libPhoneNumber for iOS&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NBPhoneNumberUtil&lt;/li&gt; &#xA; &lt;li&gt;NBAsYouTypeFormatter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ARC only&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Update Log&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iziz/libPhoneNumber-iOS/wiki/Update-Log&#34;&gt;https://github.com/iziz/libPhoneNumber-iOS/wiki/Update-Log&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Issue&lt;/h2&gt; &#xA;&lt;p&gt;You can check phone number validation using below link. &lt;a href=&#34;https://rawgit.com/googlei18n/libphonenumber/master/javascript/i18n/phonenumbers/demo-compiled.html&#34;&gt;https://rawgit.com/googlei18n/libphonenumber/master/javascript/i18n/phonenumbers/demo-compiled.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please report, if the above results are different from this iOS library. Otherwise, please create issue to following link below to request additional telephone numbers formatting rule. &lt;a href=&#34;https://github.com/google/libphonenumber/issues&#34;&gt;https://github.com/google/libphonenumber/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Metadata in this library was generated from that. so, you should change it first. :)&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;http://cocoapods.org/?q=libPhoneNumber-iOS&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;pod &#39;libPhoneNumber-iOS&#39;, &#39;~&amp;gt; 0.8&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Installing libPhoneNumber Geocoding Features&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;libPhoneNumberGeocoding&#39;, :git =&amp;gt; &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Carthage is a decentralized dependency manager that automates the process of adding frameworks to your Cocoa application.&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate libPhoneNumber into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;iziz/libPhoneNumber-iOS&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And set the &lt;strong&gt;Embedded Content Contains Swift&lt;/strong&gt; to &#34;Yes&#34; in your build settings.&lt;/p&gt; &#xA;&lt;h4&gt;Setting up manually&lt;/h4&gt; &#xA;&lt;p&gt;Add source files to your projects from libPhoneNumber - Add &#34;CoreTelephony.framework&#34;&lt;/p&gt; &#xA;&lt;p&gt;See sample test code from&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[libPhoneNumber-iOS/libPhoneNumberTests/ ... Test.m] (&lt;a href=&#34;https://github.com/iziz/libPhoneNumber-iOS/tree/master/libPhoneNumberTests&#34;&gt;https://github.com/iziz/libPhoneNumber-iOS/tree/master/libPhoneNumberTests&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage - &lt;strong&gt;NBPhoneNumberUtil&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt; NBPhoneNumberUtil *phoneUtil = [NBPhoneNumberUtil sharedInstance];&#xA; NSError *anError = nil;&#xA; NBPhoneNumber *myNumber = [phoneUtil parse:@&#34;6766077303&#34;&#xA;                              defaultRegion:@&#34;AT&#34; error:&amp;amp;anError];&#xA; if (anError == nil) {&#xA;     NSLog(@&#34;isValidPhoneNumber ? [%@]&#34;, [phoneUtil isValidNumber:myNumber] ? @&#34;YES&#34;:@&#34;NO&#34;);&#xA;&#xA;     // E164          : +436766077303&#xA;     NSLog(@&#34;E164          : %@&#34;, [phoneUtil format:myNumber&#xA;                                       numberFormat:NBEPhoneNumberFormatE164&#xA;                                              error:&amp;amp;anError]);&#xA;     // INTERNATIONAL : +43 676 6077303&#xA;     NSLog(@&#34;INTERNATIONAL : %@&#34;, [phoneUtil format:myNumber&#xA;                                       numberFormat:NBEPhoneNumberFormatINTERNATIONAL&#xA;                                              error:&amp;amp;anError]);&#xA;     // NATIONAL      : 0676 6077303&#xA;     NSLog(@&#34;NATIONAL      : %@&#34;, [phoneUtil format:myNumber&#xA;                                       numberFormat:NBEPhoneNumberFormatNATIONAL&#xA;                                              error:&amp;amp;anError]);&#xA;     // RFC3966       : tel:+43-676-6077303&#xA;     NSLog(@&#34;RFC3966       : %@&#34;, [phoneUtil format:myNumber&#xA;                                       numberFormat:NBEPhoneNumberFormatRFC3966&#xA;                                              error:&amp;amp;anError]);&#xA; } else {&#xA;     NSLog(@&#34;Error : %@&#34;, [anError localizedDescription]);&#xA; }&#xA;&#xA; NSLog (@&#34;extractCountryCode [%@]&#34;, [phoneUtil extractCountryCode:@&#34;823213123123&#34; nationalNumber:nil]);&#xA;&#xA; NSString *nationalNumber = nil;&#xA; NSNumber *countryCode = [phoneUtil extractCountryCode:@&#34;823213123123&#34; nationalNumber:&amp;amp;nationalNumber];&#xA;&#xA; NSLog (@&#34;extractCountryCode [%@] [%@]&#34;, countryCode, nationalNumber);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Output&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;2014-07-06 12:39:37.240 libPhoneNumberTest[1581:60b] isValidPhoneNumber ? [YES]&#xA;2014-07-06 12:39:37.242 libPhoneNumberTest[1581:60b] E164          : +436766077303&#xA;2014-07-06 12:39:37.243 libPhoneNumberTest[1581:60b] INTERNATIONAL : +43 676 6077303&#xA;2014-07-06 12:39:37.243 libPhoneNumberTest[1581:60b] NATIONAL      : 0676 6077303&#xA;2014-07-06 12:39:37.244 libPhoneNumberTest[1581:60b] RFC3966       : tel:+43-676-6077303&#xA;2014-07-06 12:39:37.244 libPhoneNumberTest[1581:60b] extractCountryCode [82]&#xA;2014-07-06 12:39:37.245 libPhoneNumberTest[1581:60b] extractCountryCode [82] [3213123123]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;with Swift&lt;/h4&gt; &#xA;&lt;h5&gt;Case (1) with Framework&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;import libPhoneNumberiOS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Case (2) with Bridging-Header&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// Manually added&#xA;#import &#34;NBPhoneNumberUtil.h&#34;&#xA;#import &#34;NBPhoneNumber.h&#34;&#xA;&#xA;// CocoaPods (check your library path)&#xA;#import &#34;libPhoneNumber_iOS/NBPhoneNumberUtil.h&#34;&#xA;#import &#34;libPhoneNumber_iOS/NBPhoneNumber.h&#34;&#xA;&#xA;// add more if you want...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Case (3) with CocoaPods&lt;/h5&gt; &#xA;&lt;p&gt;import libPhoneNumber_iOS&lt;/p&gt; &#xA;&lt;h5&gt;- in swift class file&lt;/h5&gt; &#xA;&lt;h6&gt;2.x&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override func viewDidLoad() {&#xA;    super.viewDidLoad()&#xA;&#xA;    guard let phoneUtil = NBPhoneNumberUtil.sharedInstance() else {&#xA;        return&#xA;    }&#xA;&#xA;    do {&#xA;        let phoneNumber: NBPhoneNumber = try phoneUtil.parse(&#34;01065431234&#34;, defaultRegion: &#34;KR&#34;)&#xA;        let formattedString: String = try phoneUtil.format(phoneNumber, numberFormat: .E164)&#xA;&#xA;        NSLog(&#34;[%@]&#34;, formattedString)&#xA;    }&#xA;    catch let error as NSError {&#xA;        print(error.localizedDescription)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage - &lt;strong&gt;NBAsYouTypeFormatter&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt; NBAsYouTypeFormatter *f = [[NBAsYouTypeFormatter alloc] initWithRegionCode:@&#34;US&#34;];&#xA;    NSLog(@&#34;%@&#34;, [f inputDigit:@&#34;6&#34;]); // &#34;6&#34;&#xA;    NSLog(@&#34;%@&#34;, [f inputDigit:@&#34;5&#34;]); // &#34;65&#34;&#xA;    NSLog(@&#34;%@&#34;, [f inputDigit:@&#34;0&#34;]); // &#34;650&#34;&#xA;    NSLog(@&#34;%@&#34;, [f inputDigit:@&#34;2&#34;]); // &#34;650 2&#34;&#xA;    NSLog(@&#34;%@&#34;, [f inputDigit:@&#34;5&#34;]); // &#34;650 25&#34;&#xA;    NSLog(@&#34;%@&#34;, [f inputDigit:@&#34;3&#34;]); // &#34;650 253&#34;&#xA;&#xA;    // Note this is how a US local number (without area code) should be formatted.&#xA;    NSLog(@&#34;%@&#34;, [f inputDigit:@&#34;2&#34;]); // &#34;650 2532&#34;&#xA;    NSLog(@&#34;%@&#34;, [f inputDigit:@&#34;2&#34;]); // &#34;650 253 22&#34;&#xA;    NSLog(@&#34;%@&#34;, [f inputDigit:@&#34;2&#34;]); // &#34;650 253 222&#34;&#xA;    NSLog(@&#34;%@&#34;, [f inputDigit:@&#34;2&#34;]); // &#34;650 253 2222&#34;&#xA;    // Can remove last digit&#xA;    NSLog(@&#34;%@&#34;, [f removeLastDigit]); // &#34;650 253 222&#34;&#xA;&#xA;    NSLog(@&#34;%@&#34;, [f inputString:@&#34;16502532222&#34;]); // 1 650 253 2222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;libPhoneNumberGeocoding&lt;/h2&gt; &#xA;&lt;p&gt;For more information on libPhoneNumberGeocoding and its usage, please visit &lt;a href=&#34;https://github.com/iziz/libPhoneNumber-iOS/raw/master/libPhoneNumberGeocoding/README.md&#34;&gt;libPhoneNumberGeocoding&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;libPhoneNumberShortNumber&lt;/h2&gt; &#xA;&lt;p&gt;For more information on libPhoneNumberShortNumber and its usage, please visit &lt;a href=&#34;https://github.com/iziz/libPhoneNumber-iOS/raw/master/libPhoneNumberShortNumber/README.md&#34;&gt;libPhoneNumberShortNumber&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h5&gt;Visit &lt;a href=&#34;https://github.com/google/libphonenumber&#34;&gt;libphonenumber&lt;/a&gt; for more information or mail (&lt;a href=&#34;mailto:zen.isis@gmail.com&#34;&gt;zen.isis@gmail.com&lt;/a&gt;)&lt;/h5&gt;</summary>
  </entry>
  <entry>
    <title>pronebird/UIScrollView-InfiniteScroll</title>
    <updated>2022-07-04T01:53:43Z</updated>
    <id>tag:github.com,2022-07-04:/pronebird/UIScrollView-InfiniteScroll</id>
    <link href="https://github.com/pronebird/UIScrollView-InfiniteScroll" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UIScrollView ∞ scroll category&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;UIScrollView+InfiniteScroll&lt;/h2&gt; &#xA;&lt;p&gt;Infinite scroll implementation as a category for UIScrollView.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pronebird/UIScrollView-InfiniteScroll/master/README%20images/InfiniteScroll1.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pronebird/UIScrollView-InfiniteScroll/master/README%20images/InfiniteScroll2.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pronebird/UIScrollView-InfiniteScroll/master/README%20images/InfiniteScroll3.gif&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;* The content used in demo app is publicly available and provided by hn.algolia.com and Flickr. Both can be inappropriate.&lt;/p&gt; &#xA;&lt;h3&gt;Swizzling&lt;/h3&gt; &#xA;&lt;p&gt;Be aware that this category &lt;a href=&#34;http://nshipster.com/method-swizzling/&#34;&gt;swizzles&lt;/a&gt; &lt;code&gt;setContentOffset&lt;/code&gt; and &lt;code&gt;setContentSize&lt;/code&gt; on &lt;code&gt;UIScrollView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Just add the following line in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;UIScrollView-InfiniteScroll&#39;, &#39;~&amp;gt; 1.2.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Just add the following line in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;pronebird/UIScrollView-InfiniteScroll&#34; ~&amp;gt; 1.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;This component comes with example app written in Swift and Objective-C.&lt;/p&gt; &#xA;&lt;p&gt;If you use CocoaPods you can try it by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pod try UIScrollView-InfiniteScroll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://pronebird.github.io/UIScrollView-InfiniteScroll/&#34;&gt;http://pronebird.github.io/UIScrollView-InfiniteScroll/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Before using module&lt;/h3&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;p&gt;Import header file in Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;UIScrollView_InfiniteScroll/UIScrollView+InfiniteScroll.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;p&gt;Add the following line in your bridging header file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;UIScrollView_InfiniteScroll/UIScrollView+InfiniteScroll.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basics&lt;/h3&gt; &#xA;&lt;p&gt;In order to enable infinite scroll you have to provide a handler block using &lt;code&gt;addInfiniteScrollWithHandler&lt;/code&gt;. The block you provide is executed each time infinite scroll component detects that more data needs to be provided.&lt;/p&gt; &#xA;&lt;p&gt;The purpose of the handler block is to perform asynchronous task, typically networking or database fetch, and update your scroll view or scroll view subclass.&lt;/p&gt; &#xA;&lt;p&gt;The block itself is called on main queue, therefore make sure you move any long-running tasks to background queue. Once you receive new data, update table view by adding new rows and sections, then call &lt;code&gt;finishInfiniteScroll&lt;/code&gt; to complete infinite scroll animations and reset the state of infinite scroll components.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;viewDidLoad&lt;/code&gt; is a good place to install handler block.&lt;/p&gt; &#xA;&lt;p&gt;Make sure that any interactions with UIKit or methods provided by Infinite Scroll happen on main queue. Use &lt;code&gt;dispatch_async(dispatch_get_main_queue, { ... })&lt;/code&gt; in Objective-C or &lt;code&gt;DispatchQueue.main.async { ... }&lt;/code&gt; in Swift to run UI related calls on main queue.&lt;/p&gt; &#xA;&lt;p&gt;Many people make mistake by using external reference to table view or collection view within the handler block. Don&#39;t do this. This creates a circular retention. Instead use the instance of scroll view or scroll view subclass passed as first argument to handler block.&lt;/p&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// setup infinite scroll&#xA;[tableView addInfiniteScrollWithHandler:^(UITableView* tableView) {&#xA;    // update table view&#xA;    &#xA;    // finish infinite scroll animation&#xA;    [tableView finishInfiniteScroll];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;tableView.addInfiniteScroll { (tableView) -&amp;gt; Void in&#xA;    // update table view&#xA;            &#xA;    // finish infinite scroll animation&#xA;    tableView.finishInfiniteScroll()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collection view quirks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;UICollectionView.reloadData&lt;/code&gt; causes contentOffset to reset. Instead use &lt;code&gt;UICollectionView.performBatchUpdates&lt;/code&gt; when possible.&lt;/p&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self.collectionView addInfiniteScrollWithHandler:^(UICollectionView* collectionView) {    &#xA;    [collectionView performBatchUpdates:^{&#xA;        // update collection view&#xA;    } completion:^(BOOL finished) {&#xA;        // finish infinite scroll animations&#xA;        [collectionView finishInfiniteScroll];&#xA;    }];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;collectionView.addInfiniteScroll { (collectionView) -&amp;gt; Void in&#xA;    collectionView.performBatchUpdates({ () -&amp;gt; Void in&#xA;        // update collection view&#xA;    }, completion: { (finished) -&amp;gt; Void in&#xA;        // finish infinite scroll animations&#xA;        collectionView.finishInfiniteScroll()&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start infinite scroll programmatically&lt;/h3&gt; &#xA;&lt;p&gt;You can reuse infinite scroll flow to load initial data or fetch more using &lt;code&gt;beginInfiniteScroll(forceScroll)&lt;/code&gt;. &lt;code&gt;viewDidLoad&lt;/code&gt; is a good place for loading initial data, however absolutely up to you to decide.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;forceScroll&lt;/code&gt; parameter is positive, Infinite Scroll component will attempt to scroll down to reveal indicator view. Keep in mind that scrolling will not happen if user is interacting with scroll view.&lt;/p&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self.tableView beginInfiniteScroll:YES];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;tableView.beginInfiniteScroll(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prevent infinite scroll&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you need to prevent the infinite scroll from continuing. For example, if your search API has no more results, it does not make sense to keep making the requests or to show the spinner.&lt;/p&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[tableView setShouldShowInfiniteScrollHandler:^BOOL (UITableView *tableView) {&#xA;    // Only show up to 5 pages then prevent the infinite scroll&#xA;    return (weakSelf.currentPage &amp;lt; 5);&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Provide a block to be called right before a infinite scroll event is triggered.  Return YES to allow or NO to prevent it from triggering.&#xA;tableView.setShouldShowInfiniteScrollHandler { _ -&amp;gt; Bool in&#xA;    // Only show up to 5 pages then prevent the infinite scroll&#xA;    return currentPage &amp;lt; 5 &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Seamlessly preload content&lt;/h3&gt; &#xA;&lt;p&gt;Ideally you want your content to flow seamlessly without ever showing a spinner. Infinite scroll offers an option to specify offset in points that will be used to start preloader before user reaches the bottom of scroll view.&lt;/p&gt; &#xA;&lt;p&gt;The proper balance between the number of results you load each time and large enough offset should give your users a decent experience. Most likely you will have to come up with your own formula for the combination of those based on kind of content and device dimensions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Preload more data 500pt before reaching the bottom of scroll view.&#xA;tableView.infiniteScrollTriggerOffset = 500;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom indicator&lt;/h3&gt; &#xA;&lt;p&gt;You can use custom indicator instead of default &lt;code&gt;UIActivityIndicatorView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Custom indicator must be a subclass of &lt;code&gt;UIView&lt;/code&gt; and implement the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)startAnimating;&#xA;- (void)stopAnimating;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;CustomInfiniteIndicator *infiniteIndicator = [[CustomInfiniteIndicator alloc] initWithFrame:CGRectMake(0, 0, 40, 40)];&#xA;self.tableView.infiniteScrollIndicatorView = indicator;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let frame = CGRect(x: 0, y: 0, width: 24, height: 24)&#xA;tableView.infiniteScrollIndicatorView = CustomInfiniteIndicator(frame: frame)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please see example implementation of custom indicator view:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Objective-C: &lt;a href=&#34;https://github.com/pronebird/UIScrollView-InfiniteScroll/raw/master/InfiniteScrollViewDemo/CustomInfiniteIndicator.m&#34;&gt;CustomInfiniteIndicator.m&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Swift: &lt;a href=&#34;https://github.com/pronebird/UIScrollView-InfiniteScroll/raw/master/InfiniteScrollViewDemoSwift/CustomInfiniteIndicator.swift&#34;&gt;CustomInfiniteIndicator.swift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At the moment InfiniteScroll uses indicator&#39;s frame directly so make sure you size custom indicator view beforehand. Such views as &lt;code&gt;UIImageView&lt;/code&gt; or &lt;code&gt;UIActivityIndicatorView&lt;/code&gt; will automatically resize themselves so no need to setup frame for them.&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/pronebird/UIScrollView-InfiniteScroll/raw/master/CHANGES&#34;&gt;CHANGES&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Attributions&lt;/h3&gt; &#xA;&lt;p&gt;Demo app icon by &lt;a href=&#34;http://appicontemplate.com/ios8/&#34;&gt;PixelResort&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>