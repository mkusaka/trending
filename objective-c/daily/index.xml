<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-01T01:37:13Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Squirrel/Squirrel.Mac</title>
    <updated>2022-11-01T01:37:13Z</updated>
    <id>tag:github.com,2022-11-01:/Squirrel/Squirrel.Mac</id>
    <link href="https://github.com/Squirrel/Squirrel.Mac" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cocoa framework for updating OS X apps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Squirrel&lt;/h1&gt; &#xA;&lt;p&gt;Squirrel is an OS X framework focused on making application updates &lt;strong&gt;as safe and transparent as updates to a website&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instead of publishing a feed of versions from which your app must select, Squirrel updates to the version your server tells it to. This allows you to intelligently update your clients based on the request you give to Squirrel. The server can remotely drive behaviors like rolling back or phased rollouts.&lt;/p&gt; &#xA;&lt;p&gt;Your request can include authentication details, custom headers or a request body so that your server has the context it needs in order to supply the most suitable update.&lt;/p&gt; &#xA;&lt;p&gt;The update JSON Squirrel requests should be dynamically generated based on criteria in the request, and whether an update is required. Squirrel relies on server side support for determining whether an update is required, see &lt;a href=&#34;https://raw.githubusercontent.com/Squirrel/Squirrel.Mac/master/#server-support&#34;&gt;Server Support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Squirrel&#39;s installer is also designed to be fault tolerant, and ensure that any updates installed are valid.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://shipitsquirrel.github.io/images/ship%20it%20squirrel.png&#34; alt=&#34;&lt;img alt=&#39;shipit&#39; src=&#39;https://github.githubassets.com/images/icons/emoji/shipit.png?v8&#39; /&gt;)&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Adopting Squirrel&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install xctool with &lt;code&gt;brew install xctool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add the Squirrel repository as a git submodule&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;script/bootstrap&lt;/code&gt; from within the submodule&lt;/li&gt; &#xA; &lt;li&gt;Add references to Squirrel.xcodeproj and its &lt;a href=&#34;https://raw.githubusercontent.com/Squirrel/Squirrel.Mac/master/#dependencies&#34;&gt;dependencies&lt;/a&gt; to your project&lt;/li&gt; &#xA; &lt;li&gt;Add Squirrel.framework as a target dependency&lt;/li&gt; &#xA; &lt;li&gt;Link Squirrel.framework and add it to a Copy Files build phase which copies it into your Frameworks directory&lt;/li&gt; &#xA; &lt;li&gt;Ensure your application includes the &lt;a href=&#34;https://raw.githubusercontent.com/Squirrel/Squirrel.Mac/master/#dependencies&#34;&gt;dependencies&lt;/a&gt;. Squirrel does not embed them itself.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If youâ€™re developing Squirrel on its own, then use &lt;code&gt;Squirrel.xcworkspace&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Dependencies&lt;/h1&gt; &#xA;&lt;p&gt;Squirrel depends on &lt;a href=&#34;http://github.com/ReactiveCocoa/ReactiveCocoa&#34;&gt;ReactiveCocoa&lt;/a&gt; and &lt;a href=&#34;https://github.com/Mantle/Mantle&#34;&gt;Mantle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If your application is already using ReactiveCocoa, ensure it is using the same version as Squirrel.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, add a target dependency and Copy Files build phase entry for the ReactiveCocoa.framework target included in Squirrel&#39;s repository, in &lt;code&gt;Carthage/Checkouts/ReactiveCocoa&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, ensure your application includes Mantle, or copies in the Squirrel version.&lt;/p&gt; &#xA;&lt;p&gt;Finally, ensure your application&#39;s Runpath Search Paths (&lt;code&gt;LD_RUNPATH_SEARCH_PATHS&lt;/code&gt;) includes the directory that Squirrel.framework, ReactiveCocoa.framework and Mantle.framework are copied into.&lt;/p&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;Once Squirrel is added to your project, you need to configure and start it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;Squirrel/Squirrel.h&amp;gt;&#xA;&#xA;- (void)applicationDidFinishLaunching:(NSNotification *)notification {&#xA;&#x9;NSURLComponents *components = [[NSURLComponents alloc] init];&#xA;&#xA;&#x9;components.scheme = @&#34;https&#34;;&#xA;&#x9;components.host = @&#34;mycompany.com&#34;;&#xA;&#x9;components.path = @&#34;/myapp/latest&#34;;&#xA;&#xA;&#x9;NSString *bundleVersion = NSBundle.mainBundle.sqrl_bundleVersion;&#xA;&#x9;components.query = [[NSString stringWithFormat:@&#34;version=%@&#34;, bundleVersion] stringByAddingPercentEncodingWithAllowedCharacters:NSCharacterSet.URLQueryAllowedCharacterSet]&#xA;&#xA;&#x9;self.updater = [[SQRLUpdater alloc] initWithUpdateRequest:[NSURLRequest requestWithURL:components.URL]];&#xA;&#xA;&#x9;// Check for updates every 4 hours.&#xA;&#x9;[self.updater startAutomaticChecksWithInterval:60 * 60 * 4];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Squirrel will periodically request and automatically download any updates. When your application terminates, any downloaded update will be automatically installed.&lt;/p&gt; &#xA;&lt;h2&gt;Update Requests&lt;/h2&gt; &#xA;&lt;p&gt;Squirrel is indifferent to the request the client application provides for update checking. &lt;code&gt;Accept: application/json&lt;/code&gt; is added to the request headers because Squirrel is responsible for parsing the response.&lt;/p&gt; &#xA;&lt;p&gt;For the requirements imposed on the responses and the body format of an update response see &lt;a href=&#34;https://raw.githubusercontent.com/Squirrel/Squirrel.Mac/master/#server-support&#34;&gt;Server Support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Your update request must &lt;em&gt;at least&lt;/em&gt; include a version identifier so that the server can determine whether an update for this specific version is required. It may also include other identifying criteria such as operating system version or username, to allow the server to deliver as fine grained an update as you would like.&lt;/p&gt; &#xA;&lt;p&gt;How you include the version identifier or other criteria is specific to the server that you are requesting updates from. A common approach is to use query parameters, &lt;a href=&#34;https://raw.githubusercontent.com/Squirrel/Squirrel.Mac/master/#configuration&#34;&gt;Configuration&lt;/a&gt; shows an example of this.&lt;/p&gt; &#xA;&lt;h2&gt;Update Available Notifications&lt;/h2&gt; &#xA;&lt;p&gt;To know when an update is ready to be installed, you can subscribe to the &lt;code&gt;updates&lt;/code&gt; signal on &lt;code&gt;SQRLUpdater&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self.updater.updates subscribeNext:^(SQRLDownloadedUpdate *downloadedUpdate) {&#xA;    NSLog(@&#34;An update is ready to install: %@&#34;, downloadedUpdate);&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing Updates&lt;/h2&gt; &#xA;&lt;p&gt;While downloaded updates are automatically installed when your application terminates, if don&#39;t want to wait you can manually terminate the app to begin the installation process immediately.&lt;/p&gt; &#xA;&lt;p&gt;Once an &lt;a href=&#34;https://raw.githubusercontent.com/Squirrel/Squirrel.Mac/master/#update-available-notifications&#34;&gt;update available notification&lt;/a&gt; has been received, you may want to present an interface informing the user about the update and offering the ability to install and relaunch.&lt;/p&gt; &#xA;&lt;p&gt;To explicitly install a downloaded update and automatically relaunch afterward, subscribe to the &lt;code&gt;relaunchToInstallUpdate&lt;/code&gt; signal on &lt;code&gt;SQRLUpdater&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[[self.updater relaunchToInstallUpdate] subscribeError:^(NSError *error) {&#xA;    NSLog(@&#34;Error preparing update: %@&#34;, error);&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Server Support&lt;/h1&gt; &#xA;&lt;p&gt;Your server should determine whether an update is required based on the &lt;a href=&#34;https://raw.githubusercontent.com/Squirrel/Squirrel.Mac/master/#update-requests&#34;&gt;Update Request&lt;/a&gt; your client issues.&lt;/p&gt; &#xA;&lt;p&gt;If an update is required your server should respond with a status code of &lt;a href=&#34;http://tools.ietf.org/html/rfc2616#section-10.2.1&#34;&gt;200 OK&lt;/a&gt; and include the &lt;a href=&#34;https://raw.githubusercontent.com/Squirrel/Squirrel.Mac/master/#update-server-json-format&#34;&gt;update JSON&lt;/a&gt; in the body. Squirrel &lt;strong&gt;will&lt;/strong&gt; download and install this update, even if the version of the update is the same as the currently running version. To save redundantly downloading the same version multiple times your server must not inform the client to update.&lt;/p&gt; &#xA;&lt;p&gt;If no update is required your server must respond with a status code of &lt;a href=&#34;http://tools.ietf.org/html/rfc2616#section-10.2.5&#34;&gt;204 No Content&lt;/a&gt;. Squirrel will check for an update again at the interval you specify.&lt;/p&gt; &#xA;&lt;h2&gt;Update Server JSON Format&lt;/h2&gt; &#xA;&lt;p&gt;When an update is available, Squirrel expects the following schema in response to the update request provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;url&#34;: &#34;https://mycompany.example.com/myapp/releases/myrelease&#34;,&#xA;&#x9;&#34;name&#34;: &#34;My Release Name&#34;,&#xA;&#x9;&#34;notes&#34;: &#34;Theses are some release notes innit&#34;,&#xA;&#x9;&#34;pub_date&#34;: &#34;2013-09-18T12:29:53+01:00&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The only required key is &#34;url&#34;, the others are optional.&lt;/p&gt; &#xA;&lt;p&gt;Squirrel will request &#34;url&#34; with &lt;code&gt;Accept: application/zip&lt;/code&gt; and only supports installing ZIP updates. If future update formats are supported their MIME type will be added to the &lt;code&gt;Accept&lt;/code&gt; header so that your server can return the appropriate format.&lt;/p&gt; &#xA;&lt;p&gt;&#34;pub_date&#34; if present must be formatted according to ISO 8601.&lt;/p&gt; &#xA;&lt;h2&gt;Update File JSON Format&lt;/h2&gt; &#xA;&lt;p&gt;The alternate update technique uses a plain JSON file meaning you can store your update metadata on S3 or another static file store. The format of this file is detailed below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;currentRelease&#34;: &#34;1.2.3&#34;,&#xA;&#x9;&#34;releases&#34;: [&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#34;version&#34;: &#34;1.2.1&#34;,&#xA;&#x9;&#x9;&#x9;&#34;updateTo&#34;: {&#xA;&#x9;&#x9;&#x9;&#x9;&#34;version&#34;: &#34;1.2.1&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;pub_date&#34;: &#34;2013-09-18T12:29:53+01:00&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;notes&#34;: &#34;Theses are some release notes innit&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;name&#34;: &#34;1.2.1&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;url&#34;: &#34;https://mycompany.example.com/myapp/releases/myrelease&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#34;version&#34;: &#34;1.2.3&#34;,&#xA;&#x9;&#x9;&#x9;&#34;updateTo&#34;: {&#xA;&#x9;&#x9;&#x9;&#x9;&#34;version&#34;: &#34;1.2.3&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;pub_date&#34;: &#34;2014-09-18T12:29:53+01:00&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;notes&#34;: &#34;Theses are some more release notes innit&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;name&#34;: &#34;1.2.3&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;url&#34;: &#34;https://mycompany.example.com/myapp/releases/myrelease3&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;User Interface&lt;/h1&gt; &#xA;&lt;p&gt;Squirrel does not provide any GUI components for presenting updates. If you want to indicate updates to the user, make sure to &lt;a href=&#34;https://raw.githubusercontent.com/Squirrel/Squirrel.Mac/master/#update-available-notifications&#34;&gt;listen for downloaded updates&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yannickl/YLProgressBar</title>
    <updated>2022-11-01T01:37:13Z</updated>
    <id>tag:github.com,2022-11-01:/yannickl/YLProgressBar</id>
    <link href="https://github.com/yannickl/YLProgressBar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UIProgressView replacement with an highly and fully customizable animated progress bar in pure Core Graphics&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/YannickL/YLProgressBar/raw/master/web/ylprogressbar_header.png&#34; alt=&#34;YLProgressBar&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/YLProgressBar/&#34;&gt;&lt;img alt=&#34;Supported Platforms&#34; src=&#34;https://cocoapod-badges.herokuapp.com/p/YLProgressBar/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/YLProgressBar/&#34;&gt;&lt;img alt=&#34;Version&#34; src=&#34;https://cocoapod-badges.herokuapp.com/v/YLProgressBar/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;YLProgressBar&lt;/strong&gt; is an UIProgressView replacement with a highly and fully customizable animated progress bar in pure Core Graphics.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/YannickL/YLProgressBar/raw/master/web/YLProgressBar.gif&#34; alt=&#34;YLProgressBar&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;It has been implemented using the Core Graphics framework without any images. So it can be customized freely and independently on the platform.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/yannickl/YLProgressBar/master/#usage&#34;&gt;Usage&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/yannickl/YLProgressBar/master/#installation&#34;&gt;Installation&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/yannickl/YLProgressBar/master/#contribution&#34;&gt;Contribution&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/yannickl/YLProgressBar/master/#contact&#34;&gt;Contact&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/yannickl/YLProgressBar/master/#license-mit&#34;&gt;License&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here are some examples to show you how the &lt;code&gt;YLProgressBar&lt;/code&gt; can be configured:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Blue flat progress, with no stripes&#xA;_progressBar.type               = YLProgressBarTypeFlat;&#xA;_progressBar.progressTintColor  = [UIColor blueColor];&#xA;_progressBar.hideStripes        = YES;&#xA;&#xA;// Green rounded/gloss progress, with vertical animated stripes in the left direction&#xA;_progressBar.type               = YLProgressBarTypeRounded;&#xA;_progressBar.progressTintColor  = [UIColor greenColor];&#xA;_progressBar.stripesOrientation = YLProgressBarStripesOrientationVertical;&#xA;_progressBar.stripesDirection   = YLProgressBarStripesDirectionLeft;&#xA;&#xA;// Rainbow flat progress, with the indicator text displayed over the progress bar&#xA;NSArray *rainbowColors = @[[UIColor colorWithRed:33/255.0f green:180/255.0f blue:162/255.0f alpha:1.0f],&#xA;                           [UIColor colorWithRed:3/255.0f green:137/255.0f blue:166/255.0f alpha:1.0f],&#xA;                           [UIColor colorWithRed:91/255.0f green:63/255.0f blue:150/255.0f alpha:1.0f],&#xA;                           [UIColor colorWithRed:87/255.0f green:26/255.0f blue:70/255.0f alpha:1.0f],&#xA;                           [UIColor colorWithRed:126/255.0f green:26/255.0f blue:36/255.0f alpha:1.0f],&#xA;                           [UIColor colorWithRed:149/255.0f green:37/255.0f blue:36/255.0f alpha:1.0f],&#xA;                           [UIColor colorWithRed:228/255.0f green:69/255.0f blue:39/255.0f alpha:1.0f],&#xA;                           [UIColor colorWithRed:245/255.0f green:166/255.0f blue:35/255.0f alpha:1.0f],&#xA;                           [UIColor colorWithRed:165/255.0f green:202/255.0f blue:60/255.0f alpha:1.0f],&#xA;                           [UIColor colorWithRed:202/255.0f green:217/255.0f blue:54/255.0f alpha:1.0f],&#xA;                           [UIColor colorWithRed:111/255.0f green:188/255.0f blue:84/255.0f alpha:1.0f]];&#xA;&#xA;_progressBar.type                     = YLProgressBarTypeFlat;&#xA;_progressBar.hideStripes              = YES;&#xA;_progressBar.indicatorTextDisplayMode = YLProgressBarIndicatorTextDisplayModeProgress;&#xA;_progressBar.progressTintColors       = rainbowColors;&#xA;&#xA;// To allow the gradient colors to fit the progress width&#xA;_progressBar.progressStretch          = YES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;UIAppearence&lt;/code&gt; protocol to configure all the progress bars at once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[[YLProgressBar appearance] setType:YLProgressBarTypeFlat];&#xA;[[YLProgressBar appearance] setProgressTintColor:[UIColor blueColor]];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended approach to use the &lt;em&gt;YLProgressBar&lt;/em&gt; in your project is using the &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; package manager, as it provides flexible dependency management and dead simple installation.&lt;/p&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;Install CocoaPods if not already available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ [sudo] gem install cocoapods&#xA;$ pod setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to the directory of your Xcode project, and Create and Edit your Podfile and add YLProgressBar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /path/to/MyProject&#xA;$ touch Podfile&#xA;$ edit Podfile&#xA;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios&#xA;pod &#39;YLProgressBar&#39;, &#39;~&amp;gt; 3.11.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install into your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open your project in Xcode from the .xcworkspace file (not the usual project file)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ open MyProject.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manually&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/YannickL/YLProgressBar/archive/master.zip&#34;&gt;Download&lt;/a&gt; the project and copy the &lt;code&gt;YLProgressBar&lt;/code&gt; folder into your project and then simply &lt;code&gt;#import &#34;YLProgressBar.h&#34;&lt;/code&gt; in the file(s) you would like to use it in.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcomed and encouraged &lt;em&gt;â™¡&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Yannick Loriot&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://21.co/yannickl/&#34;&gt;https://21.co/yannickl/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/yannickloriot&#34;&gt;https://twitter.com/yannickloriot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License (MIT)&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2012 - present, Yannick Loriot. &lt;a href=&#34;http://yannickloriot.com&#34;&gt;http://yannickloriot.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Cocoanetics/DTFoundation</title>
    <updated>2022-11-01T01:37:13Z</updated>
    <id>tag:github.com,2022-11-01:/Cocoanetics/DTFoundation</id>
    <link href="https://github.com/Cocoanetics/DTFoundation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Standard toolset classes and categories&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About DTFoundation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/Cocoanetics/DTFoundation&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Cocoanetics/DTFoundation.png?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DTFoundation is a collection of utility methods and category extensions that &lt;em&gt;Cocoanetics&lt;/em&gt; is standardizing on. This should evolve into a toolset of well-documented and -tested code to accelerate future development.&lt;/p&gt; &#xA;&lt;p&gt;Documentation can be &lt;a href=&#34;https://docs.cocoanetics.com/DTFoundation&#34;&gt;browsed online&lt;/a&gt; or installed in your Xcode Organizer via the &lt;a href=&#34;https://docs.cocoanetics.com/DTFoundation/DTFoundation.atom&#34;&gt;Atom Feed URL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Methods, categories and functions are grouped into Subspecs. The grouping determined by the required dependencies. Please refer the programming guides linked from the documentation site for their contents.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Core:&lt;/strong&gt; Enhancements for Apple frameworks and classes which are usable on Mac and iOS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UIKit:&lt;/strong&gt; Enhancements for UIKit&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UIKit Blocks Additions:&lt;/strong&gt; Adding blocks-support to UIKit&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AppKit:&lt;/strong&gt; Enhancements for AppKit&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DTAWS:&lt;/strong&gt; Talking to Amazon Web Services&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DTASN1:&lt;/strong&gt; Event-based parser for ASN.1 data&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DTHTMLParser:&lt;/strong&gt; Event-based HTML parser based on libxml2&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DTReachability:&lt;/strong&gt; Block-based Reachability&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DTSidePanel:&lt;/strong&gt; Side-Panel view controller&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DTSQLite:&lt;/strong&gt; Objective-C wrapper for SQLite&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DTUTI:&lt;/strong&gt; UTI methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DTZipArchive:&lt;/strong&gt; Handing of Pkzip and GZip files&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DTProgressHUD:&lt;/strong&gt; Displaying informations or progress (in the middle of the screen)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;It is open source and covered by a standard 2-clause BSD license. That means you have to mention &lt;em&gt;Cocoanetics&lt;/em&gt; as the original author of this code and reproduce the LICENSE text inside your app.&lt;/p&gt; &#xA;&lt;p&gt;You can purchase a &lt;a href=&#34;http://www.cocoanetics.com/order/?product=DTFoundation%20Non-Attribution%20License&#34;&gt;Non-Attribution-License&lt;/a&gt; for 75 Euros for not having to include the LICENSE text.&lt;/p&gt; &#xA;&lt;p&gt;We also accept sponsorship for specific enhancements which you might need. Please &lt;a href=&#34;mailto:oliver@cocoanetics.com?subject=DTFoundation&#34;&gt;contact us via email&lt;/a&gt; for inquiries.&lt;/p&gt;</summary>
  </entry>
</feed>