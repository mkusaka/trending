<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-21T01:42:57Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>prasmussen/chrome-cli</title>
    <updated>2023-02-21T01:42:57Z</updated>
    <id>tag:github.com,2023-02-21:/prasmussen/chrome-cli</id>
    <link href="https://github.com/prasmussen/chrome-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Control Google Chrome from the command line&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;chrome-cli&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;chrome-cli is a command line utility for controlling Google Chrome compatible browsers on OS X. It is a native binary that uses the Scripting Bridge to communicate with Chrome. chrome-cli has been tested with the following browsers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chrome&lt;/li&gt; &#xA; &lt;li&gt;Chrome Canary&lt;/li&gt; &#xA; &lt;li&gt;Chromium&lt;/li&gt; &#xA; &lt;li&gt;Brave&lt;/li&gt; &#xA; &lt;li&gt;Vivaldi&lt;/li&gt; &#xA; &lt;li&gt;Edge&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other browsers&lt;/h3&gt; &#xA;&lt;p&gt;By default chrome-cli communicates with Chrome, but you can use it with other browsers by settings the &lt;code&gt;CHROME_BUNDLE_IDENTIFIER&lt;/code&gt; environment variable. I.e. to use chrome-cli with Brave you can run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CHROME_BUNDLE_IDENTIFIER=&#34;com.brave.Browser&#34; chrome-cli list tabs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/prasmussen/chrome-cli/master/scripts&#34;&gt;scripts directory&lt;/a&gt; for some convenient wrappers.&lt;/p&gt; &#xA;&lt;h4&gt;How do I find the bundle identifier?&lt;/h4&gt; &#xA;&lt;p&gt;The following command will print out the bundle identifier for Brave&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mdls -name kMDItemCFBundleIdentifier -raw /Applications/Brave\ Browser.app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install chrome-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;chrome-cli&lt;/li&gt; &#xA; &lt;li&gt;chrome-canary-cli&lt;/li&gt; &#xA; &lt;li&gt;chromium-cli&lt;/li&gt; &#xA; &lt;li&gt;brave-cli&lt;/li&gt; &#xA; &lt;li&gt;vivaldi-cli&lt;/li&gt; &#xA; &lt;li&gt;edge-cli&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;JavaScript execution and viewing source&lt;/h2&gt; &#xA;&lt;p&gt;To execute javascript or to view a tab&#39;s source you must first enable &lt;code&gt;View &amp;gt; Developer &amp;gt; Allow JavaScript from Apple Events&lt;/code&gt;. More details &lt;a href=&#34;https://www.chromium.org/developers/applescript&#34;&gt;here&lt;/a&gt;. Thanks to @kevinfrommelt and @paulp for providing this information.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;chrome-cli -h  (Print help)&#xA;chrome-cli --help  (Print help)&#xA;chrome-cli help  (Print help)&#xA;chrome-cli list windows  (List all windows)&#xA;chrome-cli list tabs  (List all tabs)&#xA;chrome-cli list tabs -w &amp;lt;id&amp;gt;  (List tabs in specific window)&#xA;chrome-cli list links  (List all tabs&#39; link)&#xA;chrome-cli list links -w &amp;lt;id&amp;gt;  (List tabs&#39; link in specific window)&#xA;chrome-cli info  (Print info for active tab)&#xA;chrome-cli info -t &amp;lt;id&amp;gt;  (Print info for specific tab)&#xA;chrome-cli open &amp;lt;url&amp;gt;  (Open url in new tab)&#xA;chrome-cli open &amp;lt;url&amp;gt; -n  (Open url in new window)&#xA;chrome-cli open &amp;lt;url&amp;gt; -i  (Open url in new incognito window)&#xA;chrome-cli open &amp;lt;url&amp;gt; -t &amp;lt;id&amp;gt;  (Open url in specific tab)&#xA;chrome-cli open &amp;lt;url&amp;gt; -w &amp;lt;id&amp;gt;  (Open url in new tab in specific window)&#xA;chrome-cli close  (Close active tab)&#xA;chrome-cli close -w  (Close active window)&#xA;chrome-cli close -t &amp;lt;id&amp;gt;  (Close specific tab)&#xA;chrome-cli close -w &amp;lt;id&amp;gt;  (Close specific window)&#xA;chrome-cli reload  (Reload active tab)&#xA;chrome-cli reload -t &amp;lt;id&amp;gt;  (Reload specific tab)&#xA;chrome-cli back  (Navigate back in active tab)&#xA;chrome-cli back -t &amp;lt;id&amp;gt;  (Navigate back in specific tab)&#xA;chrome-cli forward  (Navigate forward in active tab)&#xA;chrome-cli forward -t &amp;lt;id&amp;gt;  (Navigate forward in specific tab)&#xA;chrome-cli activate -t &amp;lt;id&amp;gt;  (Activate specific tab)&#xA;chrome-cli presentation  (Enter presentation mode with the active tab)&#xA;chrome-cli presentation -t &amp;lt;id&amp;gt;  (Enter presentation mode with a specific tab)&#xA;chrome-cli presentation exit  (Exit presentation mode)&#xA;chrome-cli size  (Print size of active window)&#xA;chrome-cli size -w &amp;lt;id&amp;gt;  (Print size of specific window)&#xA;chrome-cli size &amp;lt;width&amp;gt; &amp;lt;height&amp;gt;  (Set size of active window)&#xA;chrome-cli size &amp;lt;width&amp;gt; &amp;lt;height&amp;gt; -w &amp;lt;id&amp;gt;  (Set size of specific window)&#xA;chrome-cli position  (Print position of active window)&#xA;chrome-cli position -w &amp;lt;id&amp;gt;  (Print position of specific window)&#xA;chrome-cli position &amp;lt;x&amp;gt; &amp;lt;y&amp;gt;  (Set position of active window)&#xA;chrome-cli position &amp;lt;x&amp;gt; &amp;lt;y&amp;gt; -w &amp;lt;id&amp;gt;  (Set position of specific window)&#xA;chrome-cli source  (Print source from active tab)&#xA;chrome-cli source -t &amp;lt;id&amp;gt;  (Print source from specific tab)&#xA;chrome-cli execute &amp;lt;javascript&amp;gt;  (Execute javascript in active tab)&#xA;chrome-cli execute &amp;lt;javascript&amp;gt; -t &amp;lt;id&amp;gt;  (Execute javascript in specific tab)&#xA;chrome-cli chrome version  (Print Chrome version)&#xA;chrome-cli version  (Print application version)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JSON output&lt;/h4&gt; &#xA;&lt;p&gt;You can set the environment variable &lt;code&gt;OUTPUT_FORMAT&lt;/code&gt; to json to get json output. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ OUTPUT_FORMAT=json chrome-cli list tabs&#xA;{&#xA;  &#34;tabs&#34; : [&#xA;    {&#xA;      &#34;id&#34; : 1869578516,&#xA;      &#34;title&#34; : &#34;Lobsters&#34;,&#xA;      &#34;url&#34; : &#34;https://lobste.rs/&#34;,&#xA;      &#34;windowId&#34; : 1869578514,&#xA;      &#34;windowName&#34; : &#34;Lobsters&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h6&gt;List tabs&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ chrome-cli list tabs&#xA;[57] Inbox (1) - foo.bar@gmail.com - Gmail&#xA;[2147] My Drive - Google Drive&#xA;[2151] GitHub&#xA;[2161]&#xA;[2155] Hacker News&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Print tab info&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ chrome-cli info -t 2161&#xA;Id: 2162&#xA;Title:&#xA;Url: http://httpbin.org/ip&#xA;Loading: No&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Print tab source&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ chrome-cli source -t 2161&#xA;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre style=&#34;word-wrap: break-word; white-space: pre-wrap;&#34;&amp;gt;{&#xA;  &#34;origin&#34;: &#34;1.2.3.4&#34;&#xA;}&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Extract information from page&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ chrome-cli execute &#39;(function() { var nodes = document.querySelectorAll(&#34;.title a&#34;); var titles = []; for (var i = 0; i &amp;lt; 5; i++) { titles.push(nodes[i].innerHTML) } return titles.join(&#34;\n&#34;); })();&#39; -t 2155&#xA;High-Speed Trading Isn&#39;t About Efficiency—It&#39;s About Cheating&#xA;The terrifying surveillance case of Brandon Mayfield&#xA;Google turns on &#34;Download Gmail Archive&#34; feature&#xA;Learning to Code vs Learning Computer Science&#xA;Show HN: Crushify.org&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>criteo/ios-publisher-sdk</title>
    <updated>2023-02-21T01:42:57Z</updated>
    <id>tag:github.com,2023-02-21:/criteo/ios-publisher-sdk</id>
    <link href="https://github.com/criteo/ios-publisher-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Criteo Publisher SDK for iOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://github.com/criteo/ios-publisher-sdk/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/CriteoPublisherSdk.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/criteo/ios-publisher-sdk.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/iOS-9.0%2B-lightgrey.svg?sanitize=true&#34; alt=&#34;iOS9&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Criteo Publisher SDK&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Criteo Publisher SDK is meant for app publishers wanting to integrate in their app the Criteo Direct Bidder product. Direct Bidder for App allows you to monetize your mobile apps by accessing Criteo’s unique demand with a fast, lightweight and flexible integration. Choose between our App Bidding SDK or use our adapter for your mediation provider. Pick the method that applies to you and follow the &lt;a href=&#34;https://publisherdocs.criteotilt.com/app/ios/get-started/&#34;&gt;guide&lt;/a&gt; to start the integration.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Setup &amp;amp; Usage&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://publisherdocs.criteotilt.com/app/ios/&#34;&gt;App Developer Portal&lt;/a&gt;, for detailed setup and usage instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Integration Examples&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://github.com/criteo/ios-publisher-sdk-examples&#34;&gt;iOS Sample App&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h2&gt;Questions &amp;amp; Support&lt;/h2&gt; &#xA;&lt;p&gt;Please contact your technical support representative for any questions about the SDK.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/criteo/ios-publisher-sdk/main/LICENSE&#34;&gt;Apache License v2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/eDistantObject</title>
    <updated>2023-02-21T01:42:57Z</updated>
    <id>tag:github.com,2023-02-21:/google/eDistantObject</id>
    <link href="https://github.com/google/eDistantObject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;eDistantObject (eDO) - Remote invocation library for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eDistantObject&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/eDistantObject/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-lightgrey.svg?style=flat&#34; alt=&#34;Apache License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/google/eDistantObject&#34;&gt;&lt;img src=&#34;https://travis-ci.org/google/eDistantObject.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;eDistantObject (easyDistantObject or eDO) provides users an easy way to make remote invocations between processes in Objective-C and Swift without explicitly constructing RPC structures.&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://developer.apple.com/reference/foundation/nsdistantobject?language=objc&#34;&gt;NSDistantObject&lt;/a&gt;, eDistantObject takes advantage of Objective-C runtime features: it behaves as a proxy, or a puppet, in one process, and when it receives the message, it forwards the message via the communication layer (POSIX socket) to the object in a different process.&lt;/p&gt; &#xA;&lt;p&gt;You can find the guideline to setup eDO and try it with your code in &lt;a href=&#34;https://raw.githubusercontent.com/google/eDistantObject/master/docs/setup.md&#34;&gt;Setup Guide&lt;/a&gt;, and more about how eDO actually works in &lt;a href=&#34;https://raw.githubusercontent.com/google/eDistantObject/master/docs/detail.md&#34;&gt;Details Doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;Consider a typical use case, where a Client needs to communicate with a Host. The usage steps for eDO are broken into three main steps:&lt;/p&gt; &#xA;&lt;h3&gt;1. &lt;a href=&#34;https://raw.githubusercontent.com/google/eDistantObject/master/docs/terminology.md#hostremote-process&#34;&gt;Host&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;On the host side, an &lt;code&gt;EDOHostService&lt;/code&gt; must be created so that the eDistantObject is set up. Say this is done in a file &lt;code&gt;Host.m&lt;/code&gt;. Adding the following code will setup a simple distant object.&lt;/p&gt; &#xA;&lt;p&gt;The execution queue will hold a strong reference to the EDOHostService, so it needs to be retained to keep the service alive. To stop serving the root object, we can either call the invalidate API or release the queue, which implicitly invalidates the service hosting the root object.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FooClass&lt;/code&gt; is just a placeholder. Any class can be used in this way.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void)startUp {&#xA;  // Arbitrary port number for starting the service. Ensure that this doesn&#39;t&#xA;  // conflict with any existing ports being used.&#xA;  UInt16 portNumber = 12345;&#xA;&#xA;  // The root object exposed is associated with a dispatch queue, any invocation made&#xA;  // on this object will have its invocations forwarded to the host. The invocations&#xA;  // will be dispatched to the associated queue.&#xA;  FooClass *rootObject = [[FooClass alloc] init];&#xA;  // If the execution queue is released, the EDOHostService running in this&#xA;  // queue will be released as well. Users can choose their own way to&#xA;  // retain the queue.&#xA;  self.executionQueue = dispatch_queue_create(&#34;MyQueue&#34;, DISPATCH_QUEUE_SERIAL);&#xA;  [EDOHostService serviceWithPort:portNumber&#xA;                       rootObject:rootObject&#xA;                            queue:self.executionQueue];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. &lt;a href=&#34;https://raw.githubusercontent.com/google/eDistantObject/master/docs/terminology.md#shared-header&#34;&gt;Shared Header&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;So that both the client and the host are aware of the methods available in the &lt;code&gt;FooClass&lt;/code&gt; class, the header &lt;code&gt;FooClass.h&lt;/code&gt; needs to be exposed in both the host as well as the client targets. However, any calls from the client side will be forwarded to the host, hence &lt;code&gt;FooClass.m&lt;/code&gt; will only need to be compiled and linked with the Host process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;# FooClass.h&#xA;&#xA;@interface FooClass&#xA;- (void)method1;&#xA;@end&#xA;&#xA;# FooClass.m omitted [Present only in the Host Process, containing the implementation of method1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. &lt;a href=&#34;https://raw.githubusercontent.com/google/eDistantObject/master/docs/terminology.md#client-process&#34;&gt;Client&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In the client side, say a file &lt;code&gt;Client.m&lt;/code&gt; makes a call to the distant object, &lt;code&gt;FooClass&lt;/code&gt;. For this purpose, the client will have to fetch the root distant object using &lt;code&gt;EDOClientService&lt;/code&gt;. Once this is set up, the distant object can be used as if it were a local object, with calls proxied to the host.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;&#xA;- (void)someMethod {&#xA;  // The object, fetched remotely from the host is seen by the client to be the same as a local&#xA;  // object.&#xA;  FooClass *rootObject = [EDOClientService rootObjectWithPort:portNumber];&#xA;  [rootObject method1];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information please look at &lt;a href=&#34;https://raw.githubusercontent.com/google/eDistantObject/master/docs/setup.md#where-to-write-code&#34;&gt;Where to write code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Swift Support&lt;/h2&gt; &#xA;&lt;p&gt;eDO can also work on Swift although it uses features of Objective-C as long as the object defined and used are marked to invoke in the Objective-C manner.&lt;/p&gt; &#xA;&lt;p&gt;For Swift support you will need some extra setup. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/google/eDistantObject/master/docs/swift.md&#34;&gt;Swift Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;For Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Please make sure you’ve followed the guidelines in &lt;a href=&#34;https://github.com/google/eDistantObject/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before making any contributions.&lt;/p&gt; &#xA;&lt;h3&gt;Setup eDistantObject project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone eDistantObject repository from GitHub:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/eDistantObject.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;After you have cloned the eDistantObject repository, install dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Open &lt;code&gt;eDistantObject.xcworkspace&lt;/code&gt; and ensure that all the targets build.&lt;/li&gt; &#xA; &lt;li&gt;You can now use &lt;code&gt;eDistantObject.xcworkspace&lt;/code&gt; to make changes to the project.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>