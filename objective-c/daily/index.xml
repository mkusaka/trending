<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-27T01:37:14Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rentzsch/jrswizzle</title>
    <updated>2023-09-27T01:37:14Z</updated>
    <id>tag:github.com,2023-09-27:/rentzsch/jrswizzle</id>
    <link href="https://github.com/rentzsch/jrswizzle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;one-stop-shop for all your method swizzling needs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JRSwizzle&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;JRSwizzle is source code package that offers a single, easy, correct+consistent interface for exchanging Objective-C method implementations (&#34;method swizzling&#34;) across many versions of Mac OS X, iOS, Objective-C and runtime architectures.&lt;/p&gt; &#xA;&lt;p&gt;More succinctly: &lt;em&gt;JRSwizzle wants to be your one-stop-shop for all your method swizzling needs.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd /path/to/top/of/your/project&#xA;$ git submodule add git://github.com/rentzsch/jrswizzle.git JRSwizzle semver-1.x&#xA;$ git submodule init &amp;amp;&amp;amp; git submodule update&#xA;&#xA;# OPTIONAL: Execute the following commands if you want to explicitly peg&#xA;# to a certain version. Otherwise `git submodule update` will keep you&#xA;# current with HEAD.&#xA;&#xA;$ cd JRSwizzle&#xA;$ git checkout v1.1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reasons for Existence&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy:&lt;/strong&gt; Just do this: &lt;code&gt;[SomeClass jr_swizzle:@selector(foo) withMethod:@selector(my_foo) error:&amp;amp;error];&lt;/code&gt; Voila.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Correct:&lt;/strong&gt; There&#39;s a subtle interaction between method swizzling and method inheritance. Following in Kevin Ballard&#39;s footsteps, this package Does The Right Thing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatible:&lt;/strong&gt; JRSwizzle should Just Work on any version of Mac OS X and iOS you care about. Here&#39;s the exhaustive compatibility list: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mac OS X v10.3/ppc (Ballard implementation)&lt;/li&gt; &#xA;   &lt;li&gt;Mac OS X v10.4/ppc (Ballard implementation)&lt;/li&gt; &#xA;   &lt;li&gt;Mac OS X v10.4/i386 (Ballard implementation)&lt;/li&gt; &#xA;   &lt;li&gt;Mac OS X v10.5/ppc (method_exchangeImplementations+Ballard implementation)&lt;/li&gt; &#xA;   &lt;li&gt;Mac OS X v10.5/i386 (method_exchangeImplementations+Ballard implementation)&lt;/li&gt; &#xA;   &lt;li&gt;Mac OS X v10.5/ppc64 (method_exchangeImplementations+Ballard implementation)&lt;/li&gt; &#xA;   &lt;li&gt;Mac OS X v10.5/x86_64 (method_exchangeImplementations+Ballard implementation)&lt;/li&gt; &#xA;   &lt;li&gt;iOS 2.0+ (method_exchangeImplementations+Ballard implementation)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Robust:&lt;/strong&gt; All parameters are checked and JRSwizzle returns an optional &lt;code&gt;NSError&lt;/code&gt; with high-quality diagnostics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;a href=&#34;https://github.com/rentzsch/jrswizzle/issues&#34;&gt;JRSwizzle&#39;s GitHub Issues tab&lt;/a&gt; to &lt;a href=&#34;https://github.com/rentzsch/jrswizzle/issues/new&#34;&gt;file bugs or feature requests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To contribute, please fork this project, make+commit your changes and then send me a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s at least four swizzling implementations floating around. Here&#39;s a comparison chart to help you make sense of how they relate to each other and why JRSwizzle exists.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Scenario&lt;/th&gt; &#xA;   &lt;th&gt;Swizzle Technology&lt;/th&gt; &#xA;   &lt;th&gt;Method Implementation&lt;/th&gt; &#xA;   &lt;th&gt;Correct Behavior&lt;/th&gt; &#xA;   &lt;th&gt;10.4&lt;/th&gt; &#xA;   &lt;th&gt;64-bit&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Classic&lt;/td&gt; &#xA;   &lt;td&gt;Direct&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Classic&lt;/td&gt; &#xA;   &lt;td&gt;Inherited&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Ballard&lt;/td&gt; &#xA;   &lt;td&gt;Direct&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;Ballard&lt;/td&gt; &#xA;   &lt;td&gt;Inherited&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;Apple&lt;/td&gt; &#xA;   &lt;td&gt;Direct&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;Apple&lt;/td&gt; &#xA;   &lt;td&gt;Inherited&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;JRSwizzle&lt;/td&gt; &#xA;   &lt;td&gt;Direct&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;JRSwizzle&lt;/td&gt; &#xA;   &lt;td&gt;Inherited&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Classic&lt;/em&gt; is the canonical &lt;code&gt;MethodSwizzle()&lt;/code&gt; implementation as described in &lt;a href=&#34;http://cocoadev.com/MethodSwizzling&#34;&gt;CocoaDev&#39;s MethodSwizzling page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Ballard&lt;/em&gt; is &lt;a href=&#34;http://kevin.sb.org/2006/12/30/method-swizzling-reimplemented/&#34;&gt;Kevin Ballard&#39;s improved implementation&lt;/a&gt; which solves the inherited method problem.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Apple&lt;/em&gt; is 10.5&#39;s new &lt;code&gt;method_exchangeImplementations&lt;/code&gt; API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;JRSwizzle&lt;/em&gt; is this package.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The source code is distributed under the nonviral &lt;a href=&#34;http://opensource.org/licenses/mit-license.php&#34;&gt;MIT License&lt;/a&gt;. It&#39;s the simplest most permissive license available.&lt;/p&gt; &#xA;&lt;h2&gt;Version History&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;v1.1.0:&lt;/strong&gt; Nov 28 2016&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[NEW] Block-based swizzle api. Note it uses &lt;code&gt;NSInvocation&lt;/code&gt; which is known to be not the fastest of APIs. (&lt;a href=&#34;https://github.com/rentzsch/jrswizzle/pull/18&#34;&gt;dhcdht&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;v1.0:&lt;/strong&gt; Mar 2 2012&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;[NEW] iOS Support. (&lt;a href=&#34;https://github.com/rentzsch/jrswizzle/commit/60ccb350a3577e55d00d3fdfee8b3c0390b8e852%5D&#34;&gt;Anton Serebryakov&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;[NEW] Class method swizzling. (&lt;a href=&#34;https://github.com/rentzsch/jrswizzle/pull/1&#34;&gt;outis&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;v1.0d1:&lt;/strong&gt; May 31 2009&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;[FIX] Soothe valgrind by nulling out &lt;code&gt;hoisted_method_list-&amp;gt;obsolete&lt;/code&gt;, which it apparently reads. (&lt;a href=&#34;http://github.com/rentzsch/jrswizzle/commit/2f677d063202b443ca7a1c46e8b67d67ea6fc88e&#34;&gt;Daniel Jalkut&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;[FIX] Xcode 3.2 apparently now needs &lt;code&gt;ARCHS&lt;/code&gt; set explicitly for 10.3 targets. (&lt;a href=&#34;http://github.com/rentzsch/jrswizzle/commit/4478faa40e4fdb322201da20f24d3996193ea48b&#34;&gt;rentzsch&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;v1.0d0:&lt;/strong&gt; Apr 09 2009&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Moved to github.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;v1.0d0:&lt;/strong&gt; Dec 28 2007&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Under development.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/WinObjC-Samples</title>
    <updated>2023-09-27T01:37:14Z</updated>
    <id>tag:github.com,2023-09-27:/microsoft/WinObjC-Samples</id>
    <link href="https://github.com/microsoft/WinObjC-Samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sample apps and code for the Windows Bridge for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WinObjC-Samples&lt;/h1&gt; &#xA;&lt;p&gt;The Windows Bridge for iOS (also referred to as WinObjC) is a Microsoft open-source project that provides an Objective-C development environment for Visual Studio and support for iOS APIs. This repo contains the project&#39;s sample apps and example code.&lt;/p&gt; &#xA;&lt;table&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Quick links&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;p&gt;&lt;/p&gt;&#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/WinObjC&#34;&gt;WinObjC project repo&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/WinObjC/wiki&#34;&gt;WinObjC project wiki&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://developer.microsoft.com/en-us/windows/bridges/ios&#34;&gt;Windows Bridge for iOS in the Windows Dev Center&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Sample apps&lt;/h2&gt; &#xA;&lt;p&gt;The WinObjC sample apps can be found in &lt;em&gt;/Apps&lt;/em&gt;. They include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WinObjC-Samples/master/Apps/ToDoList&#34;&gt;&lt;strong&gt;ToDoList&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;A simple to do list app created for a &lt;a href=&#34;https://blogs.windows.com/buildingapps/2016/01/20/building-a-simple-app-with-the-windows-bridge-for-ios/&#34;&gt;Building Apps for Windows tutorial blog post&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WinObjC-Samples/master/Apps/Calculator&#34;&gt;&lt;strong&gt;Calculator&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;A simple, Storyboard/Auto Layout-based calculator app created for a &lt;a href=&#34;https://blogs.windows.com/buildingapps/2016/02/18/using-the-ios-bridge-to-bring-storyboards-and-auto-layout-to-windows-10/&#34;&gt;Building Apps for Windows tutorial blog post&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WinObjC-Samples/master/Apps/BitcoinWallet&#34;&gt;&lt;strong&gt;BitcoinWallet&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;A Bitcoin wallet app which runs on the Bitcoin test3 network, a developer sandbox where the coins have no value other than to demonstrate the usage of the blockchain technology. With this app, a user can create new addresses under their control, create contacts, send and receive bitcoins, and view past transactions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WinObjC-Samples/master/Scenarios/Sprites&#34;&gt;&lt;strong&gt;Writing a sprite-based Objective-C game for Windows 10&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;In this tutorial, we’ll look at how a sprite-based game written for iOS can be converted to become a Windows 10 UWP app.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example code&lt;/h2&gt; &#xA;&lt;p&gt;Sample code and projects for common scenarios can be found under &lt;em&gt;/Scenarios&lt;/em&gt;. They include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WinObjC-Samples/master/Scenarios/Live%20Tiles&#34;&gt;Using Projections: &lt;strong&gt;Live Tiles&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Live Tiles allow Windows users to see parts of an app’s content directly from the Start menu. This example shows how to create and update adaptive Live Tiles using Objective-C projections.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WinObjC-Samples/master/Scenarios/Toast%20Notifications&#34;&gt;Using Projections: &lt;strong&gt;Toast Notifications&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This example demonstrates popping local toast notifications on Windows 10 using Objective-C projections.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WinObjC-Samples/master/Scenarios/In-App%20Purchases&#34;&gt;Using Projections: &lt;strong&gt;In-App Purchases&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This example shows how to replace StoreKit in your app and add support for in-app purchases on Windows 10 using Objective-C projections.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WinObjC-Samples/master/Scenarios/Maps&#34;&gt;Using Projections: &lt;strong&gt;Maps&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This example demonstrates how to replace MapKit-based maps in your Objective-C code base with XAML controls and Bing Maps.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/WinObjC-Samples/master/Scenarios/Cortana&#34;&gt;Using Projections: &lt;strong&gt;Cortana&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Cortana is your personal assistant on Windows 10. This example shows how to integrate Cortana commands into your app using Objective-C projections.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using Projections: &lt;strong&gt;Push Notifications&lt;/strong&gt; - &lt;em&gt;Coming soon&lt;/em&gt;&lt;/p&gt; &lt;p&gt;This example demonstrates how to replace Apple Push Notification Service with Windows Notification Service using Objective-C so you can send push notifications to Windows 10 devices.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using Projections: &lt;strong&gt;Ads&lt;/strong&gt; - &lt;em&gt;Coming soon&lt;/em&gt;&lt;/p&gt; &lt;p&gt;This example will demonstrate the addition of Microsoft ads to your Objective-C code base.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using Projections: &lt;strong&gt;Game controllers&lt;/strong&gt; - &lt;em&gt;Coming soon&lt;/em&gt;&lt;/p&gt; &lt;p&gt;This sample will introduce you to handle key and controller input in Windows using Objective-C.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using Projections: &lt;strong&gt;Games for Windows 10&lt;/strong&gt; - &lt;em&gt;Coming soon&lt;/em&gt;&lt;/p&gt; &lt;p&gt;This sample will instruct you in the addition of leaderboards and other Windows game components using Objective-C.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>