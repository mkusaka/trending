<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-29T01:35:50Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>material-foundation/material-internationalization-ios</title>
    <updated>2024-10-29T01:35:50Z</updated>
    <id>tag:github.com,2024-10-29:/material-foundation/material-internationalization-ios</id>
    <link href="https://github.com/material-foundation/material-internationalization-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MDFInternationalization assists in internationalizing your IOS app or components.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MDFInternationalization&lt;/h1&gt; &#xA;&lt;p&gt;MDFInternationalization assists in internationalizing your iOS app or components&#39; user interface.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/material-foundation/material-internationalization-ios/raw/develop/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/material-foundation/material-internationalization-ios/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/material-foundation/material-internationalization-ios.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/material-foundation/material-internationalization-ios&#34;&gt;&lt;img src=&#34;https://travis-ci.org/material-foundation/material-internationalization-ios.svg?branch=stable&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/v/MDFInternationalization.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/MDFInternationalization.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Right-to-Left calculations for CGRects and UIEdgeInsets&lt;/h2&gt; &#xA;&lt;p&gt;A UIView is positioned within its superview in terms of a frame (CGRect) consisting of an origin and a size. When a device is set to a language that is written from Right-to-Left (RTL), we often want to mirror the interface around the vertical axis. This library contains functions to assist in modifying frames and edge insets for RTL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// To flip a subview&#39;s frame horizontally, pass in subview.frame and the width of its parent.&#xA;CGRect originalFrame = childView.frame;&#xA;CGRect flippedFrame = MDFRectFlippedHorizontally(originalFrame, CGRectGetWidth(self.bounds));&#xA;childView.frame = flippedFrame;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mirroring Images&lt;/h2&gt; &#xA;&lt;p&gt;A category on UIImage backports iOS 10&#39;s &lt;code&gt;[UIImage imageWithHorizontallyFlippedOrientation]&lt;/code&gt; to earlier versions of iOS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// To mirror on image, invoke mdf_imageWithHorizontallyFlippedOrientation.&#xA;UIImage *mirroredImage = [originalImage mdf_imageWithHorizontallyFlippedOrientation];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding semantic context&lt;/h2&gt; &#xA;&lt;p&gt;A category on UIView backports iOS 9&#39;s &lt;code&gt;-[UIView semanticContentAttribute]&lt;/code&gt; and iOS 10&#39;s &lt;code&gt;-[UIView effectiveUserInterfaceLayoutDirection]&lt;/code&gt; to earlier versions of iOS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// To set a semantic content attribute, set the mdf_semanticContentAttribute property.&#xA;lockedLTRView.mdf_semanticContentAttribute = UISemanticContentAttributeForceLeftToRight;&#xA;&#xA;// mdf_semanticContentAttribute is used to calculate the mdf_effectiveUserInterfaceLayoutDirection&#xA;if (customView.mdf_effectiveUserInterfaceLayoutDirection == UIUserInterfaceLayoutDirectionRightToLeft) {&#xA;  // Update customView&#39;s layout to be in RTL mode.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Embedding Bi-directional strings&lt;/h2&gt; &#xA;&lt;p&gt;A category on NSString offers a simple API to wrap strings in Unicode markers so that LTR and RTL text can co-exist in the same string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// To embed an RTL string in an existing LTR string we should wrap it in Unicode directionality&#xA;// markers to  maintain preoper rendering.&#xA;&#xA;// The name of a restaurant is in Arabic (RTL), but the rest of string is in Latin (LTR).&#xA;NSString *wrappedRestaurantName =&#xA;    [restaurantName mdf_stringWithStereoReset:NSLocaleLanguageDirectionRightToLeft&#xA;                                      context:NSLocaleLanguageDirectionLeftToRight];&#xA;&#xA;NSString *reservationString = [NSString stringWithFormat:@&#34;%@ : %ld&#34;, wrappedRestaurantName, attendees];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See Examples/Flags for a detailed example of how to use the functionality provided by this library.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MDFInternationalization is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/material-foundation/material-internationalization-ios/develop/LICENSE&#34;&gt;Apache License Version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>