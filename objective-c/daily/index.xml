<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-11T01:49:13Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jonreid/OCMockito</title>
    <updated>2022-07-11T01:49:13Z</updated>
    <id>tag:github.com,2022-07-11:/jonreid/OCMockito</id>
    <link href="https://github.com/jonreid/OCMockito" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mockito for Objective-C: creation, verification and stubbing of mock objects&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mockito/mockito.github.io/master/img/logo.png&#34; alt=&#34;mockito&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;OCMockito&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jonreid/OCMockito/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/jonreid/OCMockito/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/jonreid/OCMockito&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/jonreid/OCMockito/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/jonreid/OCMockito&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fjonreid%2FOCMockito%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;Swift Package Index Platform Compatibility&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/OCMockito&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/v/OCMockito/badge.png&#34; alt=&#34;Cocoapods Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/qcoding&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/qcoding.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OCMockito is an Objective-C implementation of Mockito, supporting creation, verification and stubbing of mock objects.&lt;/p&gt; &#xA;&lt;p&gt;Key differences from other mocking frameworks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Mock objects are always &#34;nice,&#34; recording their calls instead of throwing exceptions about unspecified invocations. This makes tests less fragile.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;No expect-run-verify, making tests more readable. Mock objects record their calls, then you verify the methods you want.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verification failures are reported as unit test failures, identifying specific lines instead of throwing exceptions. This makes it easier to identify failures.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#lets-verify-some-behavior&#34;&gt;Let&#39;s verify some behavior!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#how-about-some-stubbing&#34;&gt;How about some stubbing?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#how-do-you-mock-a-class-object&#34;&gt;How do you mock a class object?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#how-do-you-mock-a-protocol&#34;&gt;How do you mock a protocol?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#how-do-you-mock-an-object-that-also-implements-a-protocol&#34;&gt;How do you mock an object that also implements a protocol?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#how-do-you-stub-methods-that-return-primitives&#34;&gt;How do you stub methods that return primitives?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#how-do-you-stub-methods-that-return-structs&#34;&gt;How do you stub methods that return structs?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#how-do-you-stub-a-property-so-that-kvo-works&#34;&gt;How do you stub a property so that KVO works?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#argument-matchers&#34;&gt;Argument matchers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#how-do-you-specify-matchers-for-non-object-arguments&#34;&gt;How do you specify matchers for non-object arguments?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#verifying-exact-number-of-invocations--at-least-x--never&#34;&gt;Verifying exact number of invocations / at least x / never&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#capturing-arguments-for-further-assertions&#34;&gt;Capturing arguments for further assertions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#stubbing-consecutive-calls&#34;&gt;Stubbing consecutive calls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#stubbing-with-blocks&#34;&gt;Stubbing with blocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#problems-with-dealloc&#34;&gt;Problems with dealloc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#how-do-you-mock-a-singleton&#34;&gt;How do you mock a singleton?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#how-do-i-add-ocmockito-to-my-project&#34;&gt;How do I add OCMockito to my project?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#cocoapods&#34;&gt;CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#prebuilt-framework&#34;&gt;Prebuilt Framework&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#build-your-own&#34;&gt;Build Your Own&lt;/a&gt;&#xA;    &lt;!-- endToc --&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Let&#39;s verify some behavior!&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// mock creation&#xA;NSMutableArray *mockArray = mock([NSMutableArray class]);&#xA;&#xA;// using mock object&#xA;[mockArray addObject:@&#34;one&#34;];&#xA;[mockArray removeAllObjects];&#xA;&#xA;// verification&#xA;[verify(mockArray) addObject:@&#34;one&#34;];&#xA;[verify(mockArray) removeAllObjects];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once created, the mock will remember all interactions. Then you can selectively verify whatever interactions you are interested in.&lt;/p&gt; &#xA;&lt;p&gt;(If Xcode complains about multiple methods with the same name, cast &lt;code&gt;verify&lt;/code&gt; to the mocked class.)&lt;/p&gt; &#xA;&lt;h2&gt;How about some stubbing?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// mock creation&#xA;NSArray *mockArray = mock([NSArray class]);&#xA;&#xA;// stubbing&#xA;[given([mockArray objectAtIndex:0]) willReturn:@&#34;first&#34;];&#xA;[given([mockArray objectAtIndex:1]) willThrow:[NSException exceptionWithName:@&#34;name&#34;&#xA;                                                                      reason:@&#34;reason&#34;&#xA;                                                                    userInfo:nil]];&#xA;&#xA;// following prints &#34;first&#34;&#xA;NSLog(@&#34;%@&#34;, [mockArray objectAtIndex:0]);&#xA;&#xA;// follows throws exception&#xA;NSLog(@&#34;%@&#34;, [mockArray objectAtIndex:1]);&#xA;&#xA;// following prints &#34;(null)&#34; because objectAtIndex:999 was not stubbed&#xA;NSLog(@&#34;%@&#34;, [mockArray objectAtIndex:999]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do you mock a class object?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;__strong Class mockStringClass = mockClass([NSString class]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(In the iOS 64-bit runtime, Class objects aren&#39;t strong by default. Either make it explicitly strong as shown above, or use &lt;code&gt;id&lt;/code&gt; instead.)&lt;/p&gt; &#xA;&lt;h2&gt;How do you mock a protocol?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;id &amp;lt;MyDelegate&amp;gt; delegate = mockProtocol(@protocol(MyDelegate));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you don&#39;t want it to contain any optional methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;id &amp;lt;MyDelegate&amp;gt; delegate = mockProtocolWithoutOptionals(@protocol(MyDelegate));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do you mock an object that also implements a protocol?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;UIViewController &amp;lt;CustomProtocol&amp;gt; *controller =&#xA;    mockObjectAndProtocol([UIViewController class], @protocol(CustomProtocol));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do you stub methods that return primitives?&lt;/h2&gt; &#xA;&lt;p&gt;To stub methods that return primitive scalars, box the scalars into NSValues:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;[given([mockArray count]) willReturn:@3];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do you stub methods that return structs?&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;willReturnStruct:objCType:&lt;/code&gt; passing a pointer to your structure and its type from the Objective-C &lt;code&gt;@encode()&lt;/code&gt; compiler directive:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;SomeStruct aStruct = {...};&#xA;[given([mockObject methodReturningStruct]) willReturnStruct:&amp;amp;aStruct&#xA;                                                   objCType:@encode(SomeStruct)];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do you stub a property so that KVO works?&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;stubProperty(mock, property, stubbedValue)&lt;/code&gt;. For example, say you have a mock object named &lt;code&gt;mockEmployee&lt;/code&gt;. It has a property &lt;code&gt;firstName&lt;/code&gt;. You want to stub it to return the value &#34;FIRST-NAME&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;stubProperty(mockEmployee, firstName, @&#34;FIRST-NAME&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This stubs the &lt;code&gt;firstName&lt;/code&gt; property, &lt;code&gt;valueForKey:&lt;/code&gt; and &lt;code&gt;valueForKeyPath:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Argument matchers&lt;/h2&gt; &#xA;&lt;p&gt;OCMockito verifies argument values by testing for equality. But when extra flexibility is required, you can specify &lt;a href=&#34;https://github.com/hamcrest/OCHamcrest&#34;&gt;OCHamcrest&lt;/a&gt; matchers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// mock creation&#xA;NSMutableArray *mockArray = mock([NSMutableArray class]);&#xA;&#xA;// using mock object&#xA;[mockArray removeObject:@&#34;This is a test&#34;];&#xA;&#xA;// verification&#xA;[verify(mockArray) removeObject:startsWith(@&#34;This is&#34;)];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OCHamcrest matchers can be specified as arguments for both verification and stubbing.&lt;/p&gt; &#xA;&lt;p&gt;Typed arguments will issue a warning that the matcher is the wrong type. Just cast the matcher to &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How do you specify matchers for non-object arguments?&lt;/h2&gt; &#xA;&lt;p&gt;To stub a method that takes a non-object argument but specify a matcher, invoke the method with a dummy argument, then call &lt;code&gt;-withMatcher:forArgument:&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;[[given([mockArray objectAtIndex:0]) withMatcher:anything() forArgument:0]&#xA; willReturn:@&#34;foo&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is particularly useful for ignoring &lt;code&gt;NSError **&lt;/code&gt; parameters: pass in &lt;code&gt;NULL&lt;/code&gt;, but override it with an &lt;code&gt;anything()&lt;/code&gt; matcher.&lt;/p&gt; &#xA;&lt;p&gt;Use the shortcut &lt;code&gt;-withMatcher:&lt;/code&gt; to specify a matcher for a single argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;[[given([mockArray objectAtIndex:0]) withMatcher:anything()]&#xA; willReturn:@&#34;foo&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These methods are also available to specify matchers for verification. Just call them after &lt;code&gt;verify(…)&lt;/code&gt; but before the invocation you want to verify:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;[[verify(mockArray) withMatcher:greaterThan(@5])] removeObjectAtIndex:0];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Verifying exact number of invocations / at least x / never&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// using mock&#xA;[mockArray addObject:@&#34;once&#34;];&#xA;&#xA;[mockArray addObject:@&#34;twice&#34;];&#xA;[mockArray addObject:@&#34;twice&#34;];&#xA;&#xA;// the following two verifications work exactly the same&#xA;[verify(mockArray) addObject:@&#34;once&#34;];&#xA;[verifyCount(mockArray, times(1)) addObject:@&#34;once&#34;];&#xA;&#xA;// verify exact number of invocations&#xA;[verifyCount(mockArray, times(2)) addObject:@&#34;twice&#34;];&#xA;[verifyCount(mockArray, times(3)) addObject:@&#34;three times&#34;];&#xA;&#xA;// verify using never(), which is an alias for times(0)&#xA;[verifyCount(mockArray, never()) addObject:@&#34;never happened&#34;];&#xA;&#xA;// verify using atLeast()/atMost()&#xA;[verifyCount(mockArray, atLeastOnce()) addObject:@&#34;at least once&#34;];&#xA;[verifyCount(mockArray, atLeast(2)) addObject:@&#34;at least twice&#34;];&#xA;[verifyCount(mockArray, atMost(5)) addObject:@&#34;at most five times&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Capturing arguments for further assertions&lt;/h2&gt; &#xA;&lt;p&gt;OCMockito verifies argument values using OCHamcrest matchers; non-matcher arguments are implicitly wrapped in the &lt;code&gt;equalTo&lt;/code&gt; matcher to test for equality. In some situations though, it&#39;s helpful to capture an argument so you can send it another message.&lt;/p&gt; &#xA;&lt;p&gt;OCHamcrest provides a special matcher for this purpose: HCArgumentCaptor. Specify it as an argument, then query it with either the &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;allValues&lt;/code&gt; properties.&lt;/p&gt; &#xA;&lt;p&gt;For example, you may want to send the captured argument a message to query its state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;HCArgumentCaptor *argument = [[HCArgumentCaptor alloc] init];&#xA;[verify(mockObject) doSomething:(id)argument];&#xA;assertThat([argument.value nameAtIndex:0], is(@&#34;Jon&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Capturing arguments is especially handy for block arguments. Capture the argument, cast it to the block type, then invoke the block directly to simulate the ways it will be called by production code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;HCArgumentCaptor *argument = [[HCArgumentCaptor alloc] init];&#xA;[verify(mockArray) sortUsingComparator:(id)argument];&#xA;NSComparator block = argument.value;&#xA;assertThat(@(block(@&#34;a&#34;, @&#34;z&#34;)), is(@(NSOrderedAscending)));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stubbing consecutive calls&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;[[given([mockObject someMethod:@&#34;some arg&#34;])&#xA;    willThrow:[NSException exceptionWithName:@&#34;name&#34; reason:@&#34;reason&#34; userInfo:nil]]&#xA;    willReturn:@&#34;foo&#34;];&#xA;&#xA;// First call: throws exception&#xA;[mockObject someMethod:@&#34;some arg&#34;];&#xA;&#xA;// Second call: prints &#34;foo&#34;&#xA;NSLog(@&#34;%@&#34;, [mockObject someMethod:@&#34;some arg&#34;]);&#xA;&#xA;// Any consecutive call: prints &#34;foo&#34; as well. (Last stubbing wins.)&#xA;NSLog(@&#34;%@&#34;, [mockObject someMethod:@&#34;some arg&#34;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stubbing with blocks&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using simple stubbing with &lt;code&gt;willReturn:&lt;/code&gt; or &lt;code&gt;willThrow:&lt;/code&gt; only. But &lt;code&gt;willDo:&lt;/code&gt; using a block can sometimes be helpful. The block can easily access invocation arguments by calling &lt;code&gt;mkt_arguments&lt;/code&gt; from NSInvocation+OCMockito.h. Whatever the block returns will be used as the stubbed return value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;[given([mockObject someMethod:anything()]) willDo:^id (NSInvocation *invocation){&#xA;    NSArray *args = [invocation mkt_arguments];&#xA;    return @([args[0] intValue] * 2);&#xA;}];&#xA;&#xA;// Following prints 4&#xA;NSLog(@&#34;%@&#34;, [mockObject someMethod:@2]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can stub a void method with a block by using &lt;code&gt;givenVoid&lt;/code&gt; instead of &lt;code&gt;given&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Problems with dealloc&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;stopMocking(…)&lt;/code&gt; if a &lt;code&gt;-dealloc&lt;/code&gt; of your System Under Test is trying to message an object that is mocked. It disables message handling on the mock and frees its retained arguments. This prevents retain cycles and crashes during test clean-up. See StopMockingTests.m for an example.&lt;/p&gt; &#xA;&lt;h2&gt;How do you mock a singleton?&lt;/h2&gt; &#xA;&lt;p&gt;The short answer is: Don&#39;t. Instead of your class deciding who it&#39;s going to talk to, inject those dependencies.&lt;/p&gt; &#xA;&lt;p&gt;The longer answer is: Well. Legacy code. Call &lt;code&gt;stubSingleton&lt;/code&gt; on a mock class object, specifying the name of the factory method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;__strong Class mockUserDefaultsClass = mockClass([NSUserDefaults class]);&#xA;NSUserDefaults* mockDefaults = mock([NSUserDefaults class]);&#xA;&#xA;stubSingleton(mockUserDefaultsClass, standardUserDefaults);&#xA;[given([NSUserDefaults standardUserDefaults]) willReturn:mockDefaults];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Beware! This uses swizzling. You need to make sure the mock class object gets deallocated so that the swizzling is undone.&lt;/p&gt; &#xA;&lt;p&gt;In the example above, &lt;code&gt;mockUserDefaultsClass&lt;/code&gt; will go out scope and be destroyed. But what if you kept it in the test fixture, as an ivar or a property? According to XCTest&#39;s design, it won&#39;t be implicitly destroyed. You need to explicitly set it to nil in &lt;code&gt;-tearDown&lt;/code&gt;, or the swizzling will bleed over to your other tests, compromising their integrity.&lt;/p&gt; &#xA;&lt;p&gt;If you need more control over when the swizzling is undone, call &lt;code&gt;stopMocking(…)&lt;/code&gt; on the mock class.&lt;/p&gt; &#xA;&lt;h2&gt;How do I add OCMockito to my project?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/jonreid/OCMockito/tree/main/Examples&#34;&gt;Examples&lt;/a&gt; folder shows projects ready to use OCMockito via Swift Package Manager, CocoaPods, or through the prebuilt framework.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Include an OCMockito package in your Package.swift manifest&#39;s array of &lt;code&gt;dependencies&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;!-- snippet: swiftpm-declare-dependencies --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-swiftpm-declare-dependencies&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(&#xA;        url: &#34;https://github.com/jonreid/OCMockito&#34;,&#xA;        .upToNextMajor(from: &#34;7.0.0&#34;)&#xA;    ),&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/Examples/MacExample-SwiftPackageManager/Package.swift#L13-L20&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#snippet-swiftpm-declare-dependencies&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;Then add OCMockito to the dependencies of your &lt;code&gt;.testTarget&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;!-- snippet: swiftpm-use-dependencies --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-swiftpm-use-dependencies&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.testTarget(&#xA;    name: &#34;ExampleTests&#34;,&#xA;    dependencies: [&#xA;        &#34;Example&#34;,&#xA;        &#34;OCMockito&#34;,&#xA;    ]&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/Examples/MacExample-SwiftPackageManager/Package.swift#L27-L35&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/jonreid/OCMockito/main/#snippet-swiftpm-use-dependencies&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;If you want to add OCMockito using Cocoapods then add the following dependency to your Podfile. Most people will want OCMockito in their test targets, and not include any pods from their main targets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target &#39;MyTests&#39; do&#xA;  inherit! :search_paths&#xA;  use_frameworks!&#xA;  pod &#39;OCMockito&#39;, &#39;~&amp;gt; 7.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Unfortunately, shifting the OCHamcrest dependency to an XCFramework has meant dropping support for Carthage. Please let me know if this situation changes.&lt;/p&gt; &#xA;&lt;h3&gt;Prebuilt Framework&lt;/h3&gt; &#xA;&lt;p&gt;A prebuilt binary is available on GitHub for &lt;a href=&#34;https://github.com/jonreid/OCMockito/releases/&#34;&gt;OCMockito&lt;/a&gt;. You will also need &lt;a href=&#34;https://github.com/hamcrest/OCHamcrest/releases/&#34;&gt;OCHamcrest&lt;/a&gt;. The binary is packaged as OCMockito.xcframework, containing these architectures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS&lt;/li&gt; &#xA; &lt;li&gt;Mac Catalyst&lt;/li&gt; &#xA; &lt;li&gt;iOS device&lt;/li&gt; &#xA; &lt;li&gt;iOS simulator&lt;/li&gt; &#xA; &lt;li&gt;tvOS device&lt;/li&gt; &#xA; &lt;li&gt;tvOS simulator&lt;/li&gt; &#xA; &lt;li&gt;watchOS device&lt;/li&gt; &#xA; &lt;li&gt;watchOS simulator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Drag the XCFramework into your project.&lt;/p&gt; &#xA;&lt;h3&gt;Build Your Own&lt;/h3&gt; &#xA;&lt;p&gt;If you want to build OCMockito yourself, clone the repo, then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd Source&#xA;$ ./MakeDistribution.sh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mparticle-integrations/mparticle-apple-integration-branchmetrics</title>
    <updated>2022-07-11T01:49:13Z</updated>
    <id>tag:github.com,2022-07-11:/mparticle-integrations/mparticle-apple-integration-branchmetrics</id>
    <link href="https://github.com/mparticle-integrations/mparticle-apple-integration-branchmetrics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Branch SDK Documentation for mParticle iOS&lt;/h2&gt; &#xA;&lt;p&gt;View &lt;a href=&#34;https://help.branch.io/developers-hub/docs/mparticle-ios&#34;&gt;Branch&#39;s SDK documentation for mParticle iOS&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BandarHL/BHTwitter</title>
    <updated>2022-07-11T01:49:13Z</updated>
    <id>tag:github.com,2022-07-11:/BandarHL/BHTwitter</id>
    <link href="https://github.com/BandarHL/BHTwitter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Awesome tweak for Twitter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BHTwitter&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Awesome tweak for Twitter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download Videos (even if account private).&lt;/li&gt; &#xA; &lt;li&gt;Replay later feature.&lt;/li&gt; &#xA; &lt;li&gt;Custom Tab Bar&lt;/li&gt; &#xA; &lt;li&gt;Video zoom feature.&lt;/li&gt; &#xA; &lt;li&gt;No history feature.&lt;/li&gt; &#xA; &lt;li&gt;Hide topics tweet feature.&lt;/li&gt; &#xA; &lt;li&gt;Disable video layer caption.&lt;/li&gt; &#xA; &lt;li&gt;Padlock.&lt;/li&gt; &#xA; &lt;li&gt;Font changer.&lt;/li&gt; &#xA; &lt;li&gt;Disable double tap to like.&lt;/li&gt; &#xA; &lt;li&gt;Enable the new UI of DM search.&lt;/li&gt; &#xA; &lt;li&gt;Auto load photos in highest quality feature.&lt;/li&gt; &#xA; &lt;li&gt;Undo tweet feature.&lt;/li&gt; &#xA; &lt;li&gt;Reader mode feature.&lt;/li&gt; &#xA; &lt;li&gt;Disable new tweet style (A.K.A edge to edge tweet)&lt;/li&gt; &#xA; &lt;li&gt;Enable voice tweet and voice message in DM.&lt;/li&gt; &#xA; &lt;li&gt;Hide promoted tweet from the timeline.&lt;/li&gt; &#xA; &lt;li&gt;Confirm alert when hit the tweet button.&lt;/li&gt; &#xA; &lt;li&gt;Confirm alert when hit like button.&lt;/li&gt; &#xA; &lt;li&gt;Confirm alert when hit follow button.&lt;/li&gt; &#xA; &lt;li&gt;FLEX for debugging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;screen shot 2017-08-07 at 12 18 15 pm&#34; src=&#34;https://raw.githubusercontent.com/BandarHL/BHTwitter/master/1.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;screen shot 2017-08-07 at 12 18 15 pm&#34; src=&#34;https://raw.githubusercontent.com/BandarHL/BHTwitter/master/2.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;screen shot 2017-08-07 at 12 18 15 pm&#34; src=&#34;https://raw.githubusercontent.com/BandarHL/BHTwitter/master/3.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;screen shot 2017-08-07 at 12 18 15 pm&#34; src=&#34;https://raw.githubusercontent.com/BandarHL/BHTwitter/master/4.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>