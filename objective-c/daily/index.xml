<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-20T01:37:42Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sveinbjornt/Platypus</title>
    <updated>2022-09-20T01:37:42Z</updated>
    <id>tag:github.com,2022-09-20:/sveinbjornt/Platypus</id>
    <link href="https://github.com/sveinbjornt/Platypus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create native Mac applications from command line scripts.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BSD%203--Clause-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-objective--c-lightgrey&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://github.com/sveinbjornt/platypus/actions/workflows/macos.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img style=&#34;float: right; margin-left: 30px; margin-bottom: 20px;&#34; width=&#34;196&#34; height=&#34;196&#34; src=&#34;https://raw.githubusercontent.com/sveinbjornt/Platypus/master/Documentation/images/platypus.png&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;Platypus&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Platypus&lt;/strong&gt; is a developer tool that creates native Mac applications from command line scripts such as shell scripts or Python, Perl, Ruby, Tcl, JavaScript and PHP programs. This is done by wrapping the script in an &lt;a href=&#34;https://en.wikipedia.org/wiki/Bundle_(OS_X)&#34;&gt;application bundle&lt;/a&gt; along with a slim app binary that runs the script.&lt;/p&gt; &#xA;&lt;p&gt;Platypus makes it easy to share scripts and programs with people who are unfamiliar with the command line interface. Native, user-friendly applications can be created with a few clicks. It is very easy to create installers, droplets, administrative applications, login items, status menu items, launchers and automations using Platypus.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports shell scripts, Python, Perl, Ruby, PHP, Swift, Expect, Tcl, AWK, JavaScript, Dart, AppleScript or any other user-specified interpreter&lt;/li&gt; &#xA; &lt;li&gt;Apps can display graphical feedback of script execution as a progress bar, text window with script output, droplet, WebKit HTML rendering or status item menu&lt;/li&gt; &#xA; &lt;li&gt;Apps support receiving dragged and dropped files or text snippets, which are then passed to the script as arguments&lt;/li&gt; &#xA; &lt;li&gt;Apps can execute scripts with root privileges via the macOS Security Framework&lt;/li&gt; &#xA; &lt;li&gt;Apps can register as handlers for URI schemes and send user notifications&lt;/li&gt; &#xA; &lt;li&gt;Apps can be configured to run in the background (LSUIElement)&lt;/li&gt; &#xA; &lt;li&gt;Set own application icon or select from presets&lt;/li&gt; &#xA; &lt;li&gt;Set app&#39;s associated file types, identifier, version, author, etc.&lt;/li&gt; &#xA; &lt;li&gt;Graphical interface for bundling support files with the script&lt;/li&gt; &#xA; &lt;li&gt;Command line tool for automation and build process integration&lt;/li&gt; &#xA; &lt;li&gt;&#34;Profiles&#34; can be used to save app configurations&lt;/li&gt; &#xA; &lt;li&gt;Built-in script editor, or linking with external editor of choice&lt;/li&gt; &#xA; &lt;li&gt;Extensive &lt;a href=&#34;https://raw.githubusercontent.com/sveinbjornt/Platypus/master/Documentation/Documentation.md&#34;&gt;documentation&lt;/a&gt; and many built-in examples to help you get started&lt;/li&gt; &#xA; &lt;li&gt;Generates slim and speedy native applications that launch and run quickly&lt;/li&gt; &#xA; &lt;li&gt;Fast, responsive native app written in Objective-C/Cocoa&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=BDT58J7HYKAEE&#34;&gt;&lt;img align=&#34;right&#34; src=&#34;https://www.paypalobjects.com/WEBSCR-640-20110306-1/en_US/i/btn/btn_donate_LG.gif&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Platypus is free, open source software and has been continuously developed and maintained for a very long time (since 2003). &lt;strong&gt;If you find this program useful, please &lt;a href=&#34;https://sveinbjorn.org/donations&#34;&gt;make a donation&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://sveinbjorn.org/files/software/platypus.zip&#34;&gt;â‡© Download Platypus 5.4&lt;/a&gt;&lt;/strong&gt; (Intel/ARM 64-bit, 10.11 or later, ~4.3 MB)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platypus can also be installed via &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; (may not be latest version):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ brew install --cask platypus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveinbjornt/Platypus/master/Documentation/Documentation.md&#34;&gt;Platypus Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sveinbjorn.org/platypus&#34;&gt;Platypus Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sveinbjorn.org/files/manpages/platypus.man.html&#34;&gt;man &lt;code&gt;platypus&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sveinbjorn.org/files/appcasts/PlatypusAppcast.xml&#34;&gt;Platypus Appcast XML feed&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;Platypus main window&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/sveinbjornt/Platypus/master/Documentation/images/basic_interface.png&#34; width=&#34;664&#34;&gt; &#xA;&lt;h3&gt;Interfaces&lt;/h3&gt; &#xA;&lt;p&gt;Platypus lets you select one of several different user interfaces for your script.&lt;/p&gt; &#xA;&lt;h4&gt;Progress Bar Interface&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/sveinbjornt/Platypus/master/Documentation/images/interface_progressbar.png&#34; width=&#34;438&#34;&gt; &#xA;&lt;h4&gt;Text Window Interface&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/sveinbjornt/Platypus/master/Documentation/images/interface_textwindow.png&#34; width=&#34;469&#34;&gt; &#xA;&lt;h4&gt;Web View Interface&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/sveinbjornt/Platypus/master/Documentation/images/interface_webview.png&#34; width=&#34;508&#34;&gt; &#xA;&lt;h4&gt;Status Menu Interface&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/sveinbjornt/Platypus/master/Documentation/images/interface_statusmenu.png&#34; width=&#34;369&#34;&gt; &#xA;&lt;h4&gt;Droplet Interface&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/sveinbjornt/Platypus/master/Documentation/images/interface_droplet.png&#34; width=&#34;294&#34;&gt; &#xA;&lt;h2&gt;Building Platypus&lt;/h2&gt; &#xA;&lt;p&gt;To build Platypus, run the following command from the repository root (requires Xcode build tools):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ make build_unsigned&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting application bundle is created in the &lt;code&gt;products&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Some notes on the code&lt;/h2&gt; &#xA;&lt;p&gt;Platypus is very old software, dating back to the early days of Mac OS X, around 2003, when I was first learning to use Objective-C and the Cocoa APIs. I made many beginner mistakes, some of which remain in the structure of the code. This software has since gone through about three dozen significant versions. It has been patched, bugfixed, streamlined to include new features and was transitioned over to modern Objective-C a few years ago. It&#39;s not how I would write it today.&lt;/p&gt; &#xA;&lt;p&gt;With these caveats in mind, here is the BSD-licensed source code to Platypus.&lt;/p&gt; &#xA;&lt;h2&gt;BSD License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2003-2022 Sveinbjorn Thordarson &amp;lt;&lt;a href=&#34;mailto:&#34;&gt;&lt;/a&gt;&lt;a href=&#34;mailto:sveinbjorn@sveinbjorn.org&#34;&gt;sveinbjorn@sveinbjorn.org&lt;/a&gt;&amp;gt; All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Cocoanetics/DTCoreText</title>
    <updated>2022-09-20T01:37:42Z</updated>
    <id>tag:github.com,2022-09-20:/Cocoanetics/DTCoreText</id>
    <link href="https://github.com/Cocoanetics/DTCoreText" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Methods to allow using HTML code with CoreText&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DTCoreText&lt;/h1&gt; &#xA;&lt;p&gt;This project aims to duplicate the methods present on Mac OSX which allow creation of &lt;code&gt;NSAttributedString&lt;/code&gt; from HTML code on iOS.&lt;/p&gt; &#xA;&lt;p&gt;The project covers two broad areas:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Layouting&lt;/strong&gt; - Interfacing with CoreText, generating attributed strings from HTML code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User Interface&lt;/strong&gt; - UI-related classes render these objects, specifically &lt;code&gt;DTAttributedTextView&lt;/code&gt;, &lt;code&gt;DTAttributedLabel&lt;/code&gt; and &lt;code&gt;DTAttributedTextCell&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This is useful for drawing simple rich text like any HTML document without having to use a web view. For text selection and highlighting (as you might need for an Editor or Reader) there is the commercial &lt;strong&gt;DTRichTextEditor&lt;/strong&gt; component which can be purchased in the &lt;a href=&#34;http://www.cocoanetics.com/parts/dtrichtexteditor/&#34;&gt;Cocoanetics Parts Store&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be &lt;a href=&#34;https://docs.cocoanetics.com/DTCoreText&#34;&gt;browsed online&lt;/a&gt; or installed in your Xcode Organizer via the &lt;a href=&#34;https://docs.cocoanetics.com/DTCoreText/DTCoreText.atom&#34;&gt;Atom Feed URL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;http://www.cocoanetics.com/2011/08/nsattributedstringhtml-qa/&#34;&gt;Q&amp;amp;A&lt;/a&gt; answers some frequently asked questions.&lt;/p&gt; &#xA;&lt;p&gt;Changelog: &lt;a href=&#34;https://github.com/Cocoanetics/DTCoreText/releases&#34;&gt;GitHub Releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is also a &lt;a href=&#34;https://raw.githubusercontent.com/Cocoanetics/DTCoreText/develop/Documentation/Programming%20Guide-template.markdown&#34;&gt;Programming Guide&lt;/a&gt; with a set of solutions to common problems.&lt;/p&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;http://twitter.com/cocoanetics&#34;&gt;@cocoanetics&lt;/a&gt; on Twitter or subscribe to the &lt;a href=&#34;http://www.cocoanetics.com&#34;&gt;Cocoanetics Blog&lt;/a&gt; for news and updates.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;It is open source and covered by a standard 2-clause BSD license. That means you have to mention &lt;em&gt;Cocoanetics&lt;/em&gt; as the original author of this code and reproduce the LICENSE text inside your app.&lt;/p&gt; &#xA;&lt;p&gt;You can purchase a &lt;a href=&#34;https://www.cocoanetics.com/order/?product_id=DTCoreText&#34;&gt;Non-Attribution-License&lt;/a&gt; for 75 Euros for not having to include the LICENSE text.&lt;/p&gt; &#xA;&lt;p&gt;We also accept sponsorship for specific enhancements which you might need. Please &lt;a href=&#34;mailto:oliver@cocoanetics.com?subject=DTCoreText&#34;&gt;contact us via email&lt;/a&gt; for inquiries.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/cordova-plugin-statusbar</title>
    <updated>2022-09-20T01:37:42Z</updated>
    <id>tag:github.com,2022-09-20:/apache/cordova-plugin-statusbar</id>
    <link href="https://github.com/apache/cordova-plugin-statusbar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Cordova&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;title: Statusbar description: Control the device status bar.&lt;/h2&gt; &#xA;&lt;!--&#xA;# license: Licensed to the Apache Software Foundation (ASF) under one&#xA;#         or more contributor license agreements.  See the NOTICE file&#xA;#         distributed with this work for additional information&#xA;#         regarding copyright ownership.  The ASF licenses this file&#xA;#         to you under the Apache License, Version 2.0 (the&#xA;#         &#34;License&#34;); you may not use this file except in compliance&#xA;#         with the License.  You may obtain a copy of the License at&#xA;#&#xA;#           http://www.apache.org/licenses/LICENSE-2.0&#xA;#&#xA;#         Unless required by applicable law or agreed to in writing,&#xA;#         software distributed under the License is distributed on an&#xA;#         &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY&#xA;#         KIND, either express or implied.  See the License for the&#xA;#         specific language governing permissions and limitations&#xA;#         under the License.&#xA;--&gt; &#xA;&lt;h1&gt;cordova-plugin-statusbar&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/android.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/android.yml/badge.svg?sanitize=true&#34; alt=&#34;Android Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/chrome.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/chrome.yml/badge.svg?sanitize=true&#34; alt=&#34;Chrome Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/ios.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/ios.yml/badge.svg?sanitize=true&#34; alt=&#34;iOS Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-statusbar/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Lint Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;StatusBar&lt;/code&gt; object provides some functions to customize the iOS and Android StatusBar.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This installation method requires cordova 5.0+&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cordova plugin add cordova-plugin-statusbar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to install via repo url directly ( unstable )&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cordova plugin add https://github.com/apache/cordova-plugin-statusbar.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Preferences&lt;/h2&gt; &#xA;&lt;h4&gt;config.xml&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;StatusBarOverlaysWebView&lt;/strong&gt; (boolean, defaults to true). Make the statusbar overlay or not overlay the WebView at startup.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; &amp;lt;preference name=&#34;StatusBarOverlaysWebView&#34; value=&#34;true&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h5&gt;Android Quirks&lt;/h5&gt; &lt;p&gt;Only supported on Android 5 or later. Earlier versions will ignore this preference.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;StatusBarBackgroundColor&lt;/strong&gt; (color hex string, no default value). Set the background color of the statusbar by a hex string (#RRGGBB) at startup. If this value is not set, the background color will be transparent. If &lt;code&gt;StatusBarOverlaysWebView&lt;/code&gt; is set to true, then a 8 digit hex (#AARRGGBB) string can optionally be used to define the transparency.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  &amp;lt;preference name=&#34;StatusBarBackgroundColor&#34; value=&#34;#000000&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;StatusBarStyle&lt;/strong&gt; (status bar style, defaults to lightcontent). Set the status bar style (e.g. text color). Available options: &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;lightcontent&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  &amp;lt;preference name=&#34;StatusBarStyle&#34; value=&#34;lightcontent&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;StatusBarDefaultScrollToTop&lt;/strong&gt; (boolean, defaults to false). On iOS, allows the Cordova WebView to use default scroll-to-top behavior. Defaults to false so you can listen to the &#34;statusTap&#34; event (described below) and customize the behavior instead.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  &amp;lt;preference name=&#34;StatusBarDefaultScrollToTop&#34; value=&#34;false&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android Quirks&lt;/h3&gt; &#xA;&lt;p&gt;The Android 5+ guidelines specify using a different color for the statusbar than your main app color (unlike the uniform statusbar color of many iOS apps), so you may want to set the statusbar color at runtime instead via &lt;code&gt;StatusBar.backgroundColorByHexString&lt;/code&gt; or &lt;code&gt;StatusBar.backgroundColorByName&lt;/code&gt;. One way to do that would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if (cordova.platformId == &#39;android&#39;) {&#xA;    StatusBar.backgroundColorByHexString(&#34;#333&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to make the status bar semi-transparent. Android uses hexadecimal ARGB values, which are formatted as #AARRGGBB. That first pair of letters, the AA, represent the alpha channel. You must convert your decimal opacity values to a hexadecimal value. You can read more about it &lt;a href=&#34;https://stackoverflow.com/questions/5445085/understanding-colors-on-android-six-characters/11019879#11019879&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, a black status bar with 20% opacity:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if (cordova.platformId == &#39;android&#39;) {&#xA;    StatusBar.overlaysWebView(true);&#xA;    StatusBar.backgroundColorByHexString(&#39;#33000000&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS Quirks&lt;/h3&gt; &#xA;&lt;p&gt;Starting with iOS 11 you must include &lt;code&gt;viewport-fit=cover&lt;/code&gt; in your viewport meta tag if you want the status bar to overlay the webview:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta name=&#34;viewport&#34; content=&#34;initial-scale=1, width=device-width, viewport-fit=cover&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hiding at startup&lt;/h2&gt; &#xA;&lt;p&gt;During runtime you can use the StatusBar.hide function below, but if you want the StatusBar to be hidden at app startup on iOS, you must modify your app&#39;s Info.plist file.&lt;/p&gt; &#xA;&lt;p&gt;Add/edit these two attributes if not present. Set &lt;strong&gt;&#34;Status bar is initially hidden&#34;&lt;/strong&gt; to &lt;strong&gt;&#34;YES&#34;&lt;/strong&gt; and set &lt;strong&gt;&#34;View controller-based status bar appearance&#34;&lt;/strong&gt; to &lt;strong&gt;&#34;NO&#34;&lt;/strong&gt;. If you edit it manually without Xcode, the keys and values are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;UIStatusBarHidden&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&amp;lt;key&amp;gt;UIViewControllerBasedStatusBarAppearance&amp;lt;/key&amp;gt;&#xA;&amp;lt;false/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Methods&lt;/h2&gt; &#xA;&lt;p&gt;This plugin defines global &lt;code&gt;StatusBar&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;Although in the global scope, it is not available until after the &lt;code&gt;deviceready&lt;/code&gt; event.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;document.addEventListener(&#34;deviceready&#34;, onDeviceReady, false);&#xA;function onDeviceReady() {&#xA;    console.log(StatusBar);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;StatusBar.overlaysWebView&lt;/li&gt; &#xA; &lt;li&gt;StatusBar.styleDefault&lt;/li&gt; &#xA; &lt;li&gt;StatusBar.styleLightContent&lt;/li&gt; &#xA; &lt;li&gt;StatusBar.backgroundColorByName&lt;/li&gt; &#xA; &lt;li&gt;StatusBar.backgroundColorByHexString&lt;/li&gt; &#xA; &lt;li&gt;StatusBar.hide&lt;/li&gt; &#xA; &lt;li&gt;StatusBar.show&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Properties&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;StatusBar.isVisible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;statusTap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;StatusBar.overlaysWebView&lt;/h1&gt; &#xA;&lt;p&gt;Make the statusbar overlay or not overlay the WebView.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.overlaysWebView(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Set to true to make the statusbar overlay on top of your app. Ensure that you adjust your styling accordingly so that your app&#39;s title bar or content is not covered. Set to false to make the statusbar solid and not overlay your app. You can then set the style and background color to suit using the other functions.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android 5+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.overlaysWebView(true);&#xA;StatusBar.overlaysWebView(false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;StatusBar.styleDefault&lt;/h1&gt; &#xA;&lt;p&gt;Use the default statusbar (dark text, for light backgrounds).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.styleDefault();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android 6+&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;StatusBar.styleLightContent&lt;/h1&gt; &#xA;&lt;p&gt;Use the lightContent statusbar (light text, for dark backgrounds).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.styleLightContent();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android 6+&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;StatusBar.backgroundColorByName&lt;/h1&gt; &#xA;&lt;p&gt;On iOS, when you set StatusBar.overlaysWebView to false, you can set the background color of the statusbar by color name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.backgroundColorByName(&#34;red&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported color names are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;black, darkGray, lightGray, white, gray, red, green, blue, cyan, yellow, magenta, orange, purple, brown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android 5+&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;StatusBar.backgroundColorByHexString&lt;/h1&gt; &#xA;&lt;p&gt;Sets the background color of the statusbar by a hex string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.backgroundColorByHexString(&#34;#C0C0C0&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CSS shorthand properties are also supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.backgroundColorByHexString(&#34;#333&#34;); // =&amp;gt; #333333&#xA;StatusBar.backgroundColorByHexString(&#34;#FAB&#34;); // =&amp;gt; #FFAABB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On iOS, when you set StatusBar.overlaysWebView to false, you can set the background color of the statusbar by a hex string (#RRGGBB).&lt;/p&gt; &#xA;&lt;p&gt;On Android, when StatusBar.overlaysWebView is true, and on WP7&amp;amp;8, you can also specify values as #AARRGGBB, where AA is an alpha value.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android 5+&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;StatusBar.hide&lt;/h1&gt; &#xA;&lt;p&gt;Hide the statusbar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.hide();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;StatusBar.show&lt;/h1&gt; &#xA;&lt;p&gt;Shows the statusbar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusBar.show();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;StatusBar.isVisible&lt;/h1&gt; &#xA;&lt;p&gt;Read this property to see if the statusbar is visible or not.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;if (StatusBar.isVisible) {&#xA;&#x9;// do something&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;statusTap&lt;/h1&gt; &#xA;&lt;p&gt;Listen for this event to know if the statusbar was tapped.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;window.addEventListener(&#39;statusTap&#39;, function() {&#xA;    // scroll-up with document.body.scrollTop = 0; or do whatever you want&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>