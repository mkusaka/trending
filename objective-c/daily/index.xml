<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-26T01:48:07Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>flurry/flurry-ios-sdk</title>
    <updated>2022-07-26T01:48:07Z</updated>
    <id>tag:github.com,2022-07-26:/flurry/flurry-ios-sdk</id>
    <link href="https://github.com/flurry/flurry-ios-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flurry iOS SDK CocoaPods&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flurry SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/Flurry-iOS-SDK&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Flurry-iOS-SDK&#34; alt=&#34;pod&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Flurry-iOS-SDK&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/Flurry-iOS-SDK&#34; alt=&#34;platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/flurry/Flurry-iOS-SDK&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/flurry/flurry-ios-sdk&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flurry/flurry-ios-sdk/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flurry/flurry-ios-sdk/master/#ios&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flurry/flurry-ios-sdk/master/#watchos&#34;&gt;watchOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flurry/flurry-ios-sdk/master/#tvos&#34;&gt;tvOS&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flurry/flurry-ios-sdk/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flurry/flurry-ios-sdk/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flurry/flurry-ios-sdk/master/#support&#34;&gt;Suppport&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flurry/flurry-ios-sdk/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install FlurrySDK from CocoaPods, please follow the instructions below. Remember to include &lt;code&gt;use_frameworks!&lt;/code&gt; if your app target is in Swift.&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;To enable Flurry Analytics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Flurry-iOS-SDK/FlurrySDK&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable Flurry Ad serving:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Flurry-iOS-SDK/FlurrySDK&#39;&#xA;pod &#39;Flurry-iOS-SDK/FlurryAds&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable Flurry Config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Flurry-iOS-SDK/FlurryConfig&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable Flurry Messaging:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Flurry-iOS-SDK/FlurryMessaging&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;watchOS&lt;/h3&gt; &#xA;&lt;p&gt;To use FlurrySDK for Apple Watch 2.x Extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target &#39;Your Apple Watch 2.x Extension Target&#39; do &#xA;  platform :watchos, &#39;2.0&#39;&#xA;  pod &#39;Flurry-iOS-SDK/FlurrySDK&#39;&#xA;end   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;tvOS&lt;/h3&gt; &#xA;&lt;p&gt;To use FlurrySDK for tvOS apps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target &#39;Your tvOS Application&#39; do&#xA;  platform :tvos, &#39;10.0&#39;&#xA;  pod &#39;Flurry-iOS-SDK/FlurrySDK&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable Flurry Messaging for tvOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Flurry-iOS-SDK/FlurryMessaging&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 10.0+&lt;/li&gt; &#xA; &lt;li&gt;tvOS 10.0+&lt;/li&gt; &#xA; &lt;li&gt;watchOS 3.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Listed below are brief examples of initializing and using Flurry in your project. For detailed instructions, please &lt;a href=&#34;https://developer.yahoo.com/flurry/docs/&#34;&gt;check our documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Initialize Flurry&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;iOS/tvOS&lt;/p&gt; &lt;p&gt;To initialize Flurry, please import Flurry in your Application Delegate and start a Flurry session inside &lt;code&gt;applicationDidFinishLaunching&lt;/code&gt;, as described below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool {&#xA;    let sb = FlurrySessionBuilder()&#xA;          .build(logLevel: FlurryLogLevel.all)&#xA;          .build(crashReportingEnabled: true)&#xA;          .build(appVersion: &#34;1.0&#34;)&#xA;          .build(iapReportingEnabled: true)&#xA;      &#xA;    Flurry.startSession(apiKey: &#34;YOUR_API_KEY&#34;, sessionBuilder: sb)&#xA;    return true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;watchOS&lt;/p&gt; &lt;p&gt;Please follow &lt;a href=&#34;https://developer.yahoo.com/flurry/docs/integrateflurry/watchos/&#34;&gt;our instructions here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Log Events&lt;/h3&gt; &#xA;&lt;p&gt;Use this to log normal events and timed events in your app.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;iOS/tvOS&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Normal events&#xA;Flurry.log(eventName: &#34;Event&#34;, parameters: [&#34;Key&#34;: &#34;Value&#34;])&#xA;      &#xA;// Timed events&#xA;Flurry.log(eventName: &#34;Event&#34;, parameters: [&#34;Key&#34;: &#34;Value&#34;], timed: true)&#xA;Flurry.endTimedEvent(eventName: &#34;Event&#34;, parameters: [&#34;Key&#34;: &#34;Value&#34;])&#xA;      &#xA;// Standard events&#xA;let param = FlurryParamBuilder()&#xA;    .set(doubleVal: 34.99, param: FlurryParamBuilder.totalAmount())&#xA;    .set(booleanVal: true, param: FlurryParamBuilder.success())&#xA;    .set(stringVal: &#34;book 1&#34;, param: FlurryParamBuilder.itemName())&#xA;    .set(stringVal: &#34;This is an awesome book to purchase !!!&#34;, key: &#34;note&#34;)&#xA;      &#xA;Flurry.log(standardEvent: FlurryEvent.purchased, param: param)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please see our &lt;a href=&#34;https://github.com/flurry/iOS-StandardEventSample&#34;&gt;sample project here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;watchOS&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;FlurryWatch.logWatchEvent(&#34;Event&#34;, withParameters: [&#34;Key&#34;: &#34;Value&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Log Error (iOS/tvOS)&lt;/h3&gt; &#xA;&lt;p&gt;Use this to log exceptions and/or errors that occur in your app. Flurry will report the first 10 errors that occur in each session.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Flurry.log(errorId: &#34;ERROR_NAME&#34;, message: &#34;ERROR_MESSAGE&#34;, exception: e)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Track User Demographics (iOS/tvOS)&lt;/h3&gt; &#xA;&lt;p&gt;After identifying the user, use this to log the userâ€™s assigned ID, username, age and gender in your system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Flurry.set(userId: &#34;USER_ID&#34;)&#xA;Flurry.set(age: 20)&#xA;Flurry.set(gender: &#34;f&#34;) // &#34;f&#34; for female and &#34;m&#34; for male&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Session Origins and Attributes (iOS/tvOS)&lt;/h3&gt; &#xA;&lt;p&gt;This allows you to specify session origin and deep link attached to each session, or add a custom parameterized session parameters. You can also add an SDK origin specified by origin name and origin version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Flurry.add(sessionOriginName: &#34;SESSION_ORIGIN&#34;)&#xA;Flurry.add(sessionOriginName: &#34;SESSION_ORIGIN&#34;, deepLink: &#34;DEEP_LINK&#34;)&#xA;Flurry.sessionProperties([&#34;key&#34;: &#34;value&#34;])&#xA;Flurry.add(originName: &#34;ORIGIN_NAME&#34;, originVersion: &#34;ORIGIN_VERSION&#34;)&#xA;Flurry.add(originName: &#34;ORIGIN_NAME&#34;, originVersion: &#34;ORIGIN_VERSION&#34;, parameters: [&#34;key&#34;: &#34;value&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.yahoo.com/flurry/docs/&#34;&gt;Flurry Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.yahoo.com/flurry/docs/faq/&#34;&gt;FAQs for Flurry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.yahoo.com/support/flurry/&#34;&gt;Flurry Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2021 Yahoo. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache 2.0&lt;/a&gt; open source license. Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/flurry/flurry-ios-sdk/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for the full terms. Your use of Flurry is governed by &lt;a href=&#34;https://developer.yahoo.com/flurry/legal-privacy/terms-service/&#34;&gt;Flurry Terms of Service&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PureLayout/PureLayout</title>
    <updated>2022-07-26T01:48:07Z</updated>
    <id>tag:github.com,2022-07-26:/PureLayout/PureLayout</id>
    <link href="https://github.com/PureLayout/PureLayout" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ultimate API for iOS &amp; OS X Auto Layout â€” impressively simple, immensely powerful. Objective-C and Swift compatible.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#&#34;&gt;&lt;img src=&#34;https://github.com/PureLayout/PureLayout/raw/master/Images/PureLayout.png?raw=true&#34; alt=&#34;PureLayout&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/PureLayout/PureLayout&#34;&gt;&lt;img src=&#34;https://travis-ci.org/PureLayout/PureLayout.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/PureLayout&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/PureLayout.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/PureLayout&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/PureLayout.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/l/PureLayout.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The ultimate API for iOS &amp;amp; OS X Auto Layout â€” impressively simple, immensely powerful. PureLayout extends &lt;code&gt;UIView&lt;/code&gt;/&lt;code&gt;NSView&lt;/code&gt;, &lt;code&gt;NSArray&lt;/code&gt;, and &lt;code&gt;NSLayoutConstraint&lt;/code&gt; with a comprehensive Auto Layout API that is modeled after Apple&#39;s own frameworks. PureLayout is a cross-platform Objective-C library that works (and looks!) great in Swift. It is fully backwards-compatible with all versions of iOS and OS X that support Auto Layout.&lt;/p&gt; &#xA;&lt;p&gt;Writing Auto Layout code from scratch isn&#39;t easy. PureLayout provides a fully capable and developer-friendly interface for Auto Layout. It is designed for clarity and simplicity, and takes inspiration from the AutoLayout UI options available in Interface Builder while delivering far more flexibility. The API is also highly efficient, as it adds only a thin layer of third party code and is engineered for maximum performance.&lt;/p&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#api-cheat-sheet&#34;&gt;API Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#sample-code-swift&#34;&gt;Sample Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#example-apps&#34;&gt;Example Apps&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#purelayout-vs-the-rest&#34;&gt;PureLayout vs. the rest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#problems-suggestions-pull-requests&#34;&gt;Problems, Suggestions, Pull Requests?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;The current release of PureLayout supports all versions of iOS and OS X since the introduction of Auto Layout on each platform, in both Swift and Objective-C, with a single codebase!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Language Support: &lt;strong&gt;Swift&lt;/strong&gt; &lt;em&gt;(any version)&lt;/em&gt;, &lt;strong&gt;Objective-C&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Fully Compatible With: &lt;strong&gt;Xcode 7.0&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Minimum Supported Version: &lt;strong&gt;Xcode 5.0&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;iOS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fully Compatible With: &lt;strong&gt;iOS 9.0&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Minimum Deployment Target: &lt;strong&gt;iOS 6.0&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;OS X &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fully Compatible With: &lt;strong&gt;OS X 10.11&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Minimum Deployment Target: &lt;strong&gt;OS X 10.7&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the pod &lt;code&gt;PureLayout&lt;/code&gt; to your &lt;a href=&#34;http://guides.cocoapods.org/using/the-podfile.html&#34;&gt;Podfile&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;PureLayout&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; from Terminal, then open your app&#39;s &lt;code&gt;.xcworkspace&lt;/code&gt; file to launch Xcode.&lt;/li&gt; &#xA; &lt;li&gt;Import the &lt;code&gt;PureLayout.h&lt;/code&gt; umbrella header.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With &lt;code&gt;use_frameworks!&lt;/code&gt; in your Podfile &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Swift: &lt;code&gt;import PureLayout&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Objective-C: &lt;code&gt;#import &amp;lt;PureLayout/PureLayout.h&amp;gt;&lt;/code&gt; (or with Modules enabled: &lt;code&gt;@import PureLayout;&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Without &lt;code&gt;use_frameworks!&lt;/code&gt; in your Podfile &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Swift: Add &lt;code&gt;#import &#34;PureLayout.h&#34;&lt;/code&gt; to your bridging header.&lt;/li&gt; &#xA;   &lt;li&gt;Objective-C: &lt;code&gt;#import &#34;PureLayout.h&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That&#39;s it - now go write some beautiful Auto Layout code!&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;PureLayout/PureLayout&lt;/code&gt; project to your &lt;a href=&#34;https://github.com/Carthage/Carthage/raw/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;PureLayout/PureLayout&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update&lt;/code&gt;, then follow the &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;additional steps required&lt;/a&gt; to add the framework into your project.&lt;/li&gt; &#xA; &lt;li&gt;Import the PureLayout framework/module.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift: &lt;code&gt;import PureLayout&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Objective-C: &lt;code&gt;#import &amp;lt;PureLayout/PureLayout.h&amp;gt;&lt;/code&gt; (or with Modules enabled: &lt;code&gt;@import PureLayout;&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That&#39;s it - now go write some beautiful Auto Layout code!&lt;/p&gt; &#xA;&lt;h3&gt;Manually from GitHub&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the source files in the &lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/PureLayout/PureLayout&#34;&gt;PureLayout subdirectory&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add the source files to your Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;Import the &lt;code&gt;PureLayout.h&lt;/code&gt; header.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift: Add &lt;code&gt;#import &#34;PureLayout.h&#34;&lt;/code&gt; to your bridging header.&lt;/li&gt; &#xA; &lt;li&gt;Objective-C: &lt;code&gt;#import &#34;PureLayout.h&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That&#39;s it - now go write some beautiful Auto Layout code!&lt;/p&gt; &#xA;&lt;h3&gt;App Extensions&lt;/h3&gt; &#xA;&lt;p&gt;To use PureLayout in an App Extension, you need to do a bit of extra configuration to prevent usage of unavailable APIs. &lt;a href=&#34;https://github.com/PureLayout/PureLayout/wiki/App-Extensions&#34;&gt;Click here&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Releases&lt;/h3&gt; &#xA;&lt;p&gt;Releases are tagged in the git commit history using &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt;. Check out the &lt;a href=&#34;https://github.com/PureLayout/PureLayout/releases&#34;&gt;releases and release notes&lt;/a&gt; for each version.&lt;/p&gt; &#xA;&lt;h2&gt;API Cheat Sheet&lt;/h2&gt; &#xA;&lt;p&gt;This is just a handy overview of the core API methods. Explore the &lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/PureLayout/PureLayout&#34;&gt;header files&lt;/a&gt; for the full API, and find the complete documentation above the implementation of each method in the corresponding .m file. A couple of notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All of the public API methods are namespaced with the prefix &lt;code&gt;auto...&lt;/code&gt;, which also makes it easy for Xcode to autocomplete as you type.&lt;/li&gt; &#xA; &lt;li&gt;Methods that create constraints also automatically install (activate) the constraint(s), then return the new constraint(s) for you to optionally store for later adjustment or removal.&lt;/li&gt; &#xA; &lt;li&gt;Many methods below also have a variant which includes a &lt;code&gt;relation:&lt;/code&gt; parameter to make the constraint an inequality.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Attributes&lt;/h3&gt; &#xA;&lt;p&gt;PureLayout defines view attributes that are used to create auto layout constraints. Here is an &lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/Images/PureLayout-CommonAttributes.png&#34;&gt;illustration of the most common attributes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are 5 specific attribute types, which are used throughout most of the API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ALEdge&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALDimension&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALAxis&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALMargin&lt;/code&gt; &lt;em&gt;available in iOS 8.0 and higher only&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALMarginAxis&lt;/code&gt; &lt;em&gt;available in iOS 8.0 and higher only&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, there is one generic attribute type, &lt;code&gt;ALAttribute&lt;/code&gt;, which is effectively a union of all the specific types. You can think of this as the &#34;supertype&#34; of all of the specific attribute types, which means that it is always safe to cast a specific type to the generic &lt;code&gt;ALAttribute&lt;/code&gt; type. (Note that the reverse is not true -- casting a generic ALAttribute to a specific attribute type is unsafe!)&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/PureLayout/PureLayout/ALView%2BPureLayout.h&#34;&gt;&lt;code&gt;UIView&lt;/code&gt;/&lt;code&gt;NSView&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;- autoSetContent(CompressionResistance|Hugging)PriorityForAxis:&#xA;- autoCenterInSuperview(Margins) // Margins variant iOS 8.0+ only&#xA;- autoAlignAxisToSuperview(Margin)Axis: // Margin variant iOS 8.0+ only&#xA;- autoPinEdgeToSuperview(Edge:|Margin:)(withInset:) // Margin variant iOS 8.0+ only&#xA;- autoPinEdgesToSuperview(Edges|Margins)(WithInsets:)(excludingEdge:) // Margins variant iOS 8.0+ only&#xA;- autoPinEdge:toEdge:ofView:(withOffset:)&#xA;- autoAlignAxis:toSameAxisOfView:(withOffset:|withMultiplier:)&#xA;- autoMatchDimension:toDimension:ofView:(withOffset:|withMultiplier:)&#xA;- autoSetDimension(s)ToSize:&#xA;- autoConstrainAttribute:toAttribute:ofView:(withOffset:|withMultiplier:)&#xA;- autoPinTo(Top|Bottom)LayoutGuideOfViewController:withInset: // iOS only&#xA;- autoPinEdgeToSuperviewSafeArea: // iOS 11.0+ only&#xA;- autoPinEdgeToSuperviewSafeArea:withInset: // iOS 11.0+ only&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/PureLayout/PureLayout/NSArray%2BPureLayout.h&#34;&gt;&lt;code&gt;NSArray&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Arrays of Constraints&#xA;- autoInstallConstraints&#xA;- autoRemoveConstraints&#xA;- autoIdentifyConstraints: // iOS 7.0+, OS X 10.9+ only&#xA;&#xA;// Arrays of Views&#xA;- autoAlignViewsToEdge:&#xA;- autoAlignViewsToAxis:&#xA;- autoMatchViewsDimension:&#xA;- autoSetViewsDimension:toSize:&#xA;- autoSetViewsDimensionsToSize:&#xA;- autoDistributeViewsAlongAxis:alignedTo:withFixedSpacing:(insetSpacing:)(matchedSizes:)&#xA;- autoDistributeViewsAlongAxis:alignedTo:withFixedSize:(insetSpacing:)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/PureLayout/PureLayout/NSLayoutConstraint%2BPureLayout.h&#34;&gt;&lt;code&gt;NSLayoutConstraint&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;+ autoCreateAndInstallConstraints:&#xA;+ autoCreateConstraintsWithoutInstalling:&#xA;+ autoSetPriority:forConstraints:&#xA;+ autoSetIdentifier:forConstraints: // iOS 7.0+, OS X 10.9+ only&#xA;- autoIdentify: // iOS 7.0+, OS X 10.9+ only&#xA;- autoInstall&#xA;- autoRemove&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Sample Code (Swift)&lt;/h3&gt; &#xA;&lt;p&gt;PureLayout dramatically simplifies writing Auto Layout code. Let&#39;s take a quick look at some examples, using PureLayout from Swift.&lt;/p&gt; &#xA;&lt;p&gt;Initialize the view using PureLayout initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let view1 = UIView(forAutoLayout: ())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to use a different initializer (e.g. in &lt;code&gt;UIView&lt;/code&gt; subclass), you can also use &lt;code&gt;configureForAutoLayout&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;view1.configureForAutoLayout() // alternative to UIView.init(forAutoLayout: ())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s a constraint between two views created (and automatically activated) using PureLayout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view1.autoPinEdge(.top, toEdge: .bottom, ofView: view2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without PureLayout, here&#39;s the equivalent code you&#39;d have to write using Apple&#39;s Foundation API directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;NSLayoutConstraint(item: view1, attribute: .top, relatedBy: .equal, toItem: view2, attribute: .bottom, multiplier: 1.0, constant: 0.0).active = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Many APIs of PureLayout create multiple constraints for you under the hood, letting you write highly readable layout code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// 2 constraints created &amp;amp; activated in one line!&#xA;logoImageView.autoCenterInSuperview()&#xA;&#xA;// 4 constraints created &amp;amp; activated in one line!&#xA;textContentView.autoPinEdgesToSuperviewEdges(with insets: UIEdgeInsets(top: 20.0, left: 5.0, bottom: 10.0, right: 5.0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PureLayout always returns the constraints it creates so you have full control:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let constraint = skinnyView.autoMatchDimension(.height, toDimension: .width, ofView: tallView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PureLayout supports safearea with iOS 11.0+:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view2.autoPinEdge(toSuperviewSafeArea: .top)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PureLayout supports all Auto Layout features including inequalities, priorities, layout margins, identifiers, and much more. It&#39;s a comprehensive, developer-friendly way to use Auto Layout.&lt;/p&gt; &#xA;&lt;p&gt;Check out the example apps below for many more demos of PureLayout in use.&lt;/p&gt; &#xA;&lt;h3&gt;Example Apps&lt;/h3&gt; &#xA;&lt;p&gt;Open the project included in the repository (requires Xcode 6 or higher). It contains &lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/PureLayout/Example-iOS&#34;&gt;iOS&lt;/a&gt; (&lt;code&gt;Example-iOS&lt;/code&gt; scheme) and &lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/PureLayout/Example-Mac&#34;&gt;OS X&lt;/a&gt; (&lt;code&gt;Example-Mac&lt;/code&gt; scheme) demos of the library being used in various scenarios. The demos in the iOS example app make a great introductory tutorial to PureLayout -- run each demo, review the code used to implement it, then practice by making some changes of your own to the demo code.&lt;/p&gt; &#xA;&lt;p&gt;Each demo in the iOS example app has a Swift and Objective-C version. &lt;strong&gt;To compile &amp;amp; run the Swift demos, you must use Xcode 7.0 or higher (Swift 2.0) and choose the &lt;code&gt;Example-iOS-Xcode7&lt;/code&gt; scheme.&lt;/strong&gt; When you run the example app, you can easily switch between using the Swift and Objective-C versions of the demos. To see the constraints in action while running the iOS demos, try using different device simulators, rotating the device to different orientations, as well as toggling the taller in-call status bar in the iOS Simulator.&lt;/p&gt; &#xA;&lt;p&gt;On OS X, while running the app, press any key to cycle through the demos. You can resize the window to see the constraints in action.&lt;/p&gt; &#xA;&lt;h3&gt;Tips and Tricks&lt;/h3&gt; &#xA;&lt;p&gt;Check out some &lt;a href=&#34;https://github.com/PureLayout/PureLayout/wiki/Tips-and-Tricks&#34;&gt;Tips and Tricks&lt;/a&gt; to keep in mind when using the API.&lt;/p&gt; &#xA;&lt;h2&gt;PureLayout vs. the rest&lt;/h2&gt; &#xA;&lt;p&gt;There are quite a few different ways to implement Auto Layout. Here is a quick overview of the available options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/AppKit/Reference/NSLayoutConstraint_Class/index.html#//apple_ref/occ/clm/NSLayoutConstraint/constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:&#34;&gt;NSLayoutConstraint SDK API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: Raw power&lt;/li&gt; &#xA;   &lt;li&gt;Cons: Extremely verbose; tedious to write; difficult to read&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Apple &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage.html&#34;&gt;Visual Format Language&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: Concise; convenient&lt;/li&gt; &#xA;   &lt;li&gt;Cons: Doesn&#39;t support some use cases; lacks compile-time checking and safety; must learn syntax; hard to debug&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Apple Interface Builder &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: Visual; interactive; provides compile-time layout checking&lt;/li&gt; &#xA;   &lt;li&gt;Cons: Difficult for complex layouts; cannot dynamically set constraints at runtime; encourages hardcoded magic numbers; not always WYSIWYG&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Apple &lt;a href=&#34;https://developer.apple.com/library/prerelease/ios/documentation/AppKit/Reference/NSLayoutAnchor_ClassReference/index.html&#34;&gt;NSLayoutAnchor SDK API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: Clean, readable, and type-safe API for creating individual constraints&lt;/li&gt; &#xA;   &lt;li&gt;Cons: Only available in iOS 9.0 and OS X 10.11 and higher; requires manually activating each constraint; no API for creating multiple constraints at once&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PureLayout&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: Compatible with Objective-C and Swift codebases; consistent with Cocoa API style; cross-platform API and implementation shared across iOS and OS X; fully backwards-compatible to iOS 6 &amp;amp; OS X 10.7; easy to use; type-safe; efficient&lt;/li&gt; &#xA;   &lt;li&gt;Cons: Not the most concise expression of layout code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;High-level Auto Layout Libraries/DSLs (&lt;a href=&#34;https://github.com/robb/Cartography&#34;&gt;Cartography&lt;/a&gt;, &lt;a href=&#34;https://github.com/SnapKit/SnapKit&#34;&gt;SnapKit&lt;/a&gt;, &lt;a href=&#34;https://github.com/iMartinKiss/KeepLayout&#34;&gt;KeepLayout&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: Very clean, concise, and convenient&lt;/li&gt; &#xA;   &lt;li&gt;Cons: Unique API style is foreign to Apple&#39;s APIs; mixed compatibility with Objective-C &amp;amp; Swift; greater dependency on third party code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PureLayout takes a balanced approach to Auto Layout that makes it well suited for any project.&lt;/p&gt; &#xA;&lt;h2&gt;Problems, Suggestions, Pull Requests?&lt;/h2&gt; &#xA;&lt;p&gt;Please open a &lt;a href=&#34;https://github.com/PureLayout/PureLayout/issues/new&#34;&gt;new Issue here&lt;/a&gt; if you run into a problem specific to PureLayout, have a feature request, or want to share a comment. Note that general Auto Layout questions should be asked on &lt;a href=&#34;http://stackoverflow.com&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pull requests are encouraged and greatly appreciated! Please try to maintain consistency with the existing code style. If you&#39;re considering taking on significant changes or additions to the project, please communicate in advance by opening a new Issue. This allows everyone to get onboard with upcoming changes, ensures that changes align with the project&#39;s design philosophy, and avoids duplicated work.&lt;/p&gt; &#xA;&lt;h2&gt;Meta&lt;/h2&gt; &#xA;&lt;p&gt;Originally designed &amp;amp; built by Tyler Fox (&lt;a href=&#34;https://github.com/smileyborg&#34;&gt;@smileyborg&lt;/a&gt;). Currently maintained by Mickey Reiss (&lt;a href=&#34;https://github.com/mickeyreiss&#34;&gt;@mickeyreiss&lt;/a&gt;). Distributed with the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shpakovski/MASShortcut</title>
    <updated>2022-07-26T01:48:07Z</updated>
    <id>tag:github.com,2022-07-26:/shpakovski/MASShortcut</id>
    <link href="https://github.com/shpakovski/MASShortcut" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern framework for managing global keyboard shortcuts compatible with Mac App Store. More details:&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/shpakovski/MASShortcut&#34;&gt;&lt;img src=&#34;https://travis-ci.org/shpakovski/MASShortcut.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Intro&lt;/h1&gt; &#xA;&lt;p&gt;Some time ago Cocoa developers used a brilliant framework &lt;a href=&#34;http://wafflesoftware.net/shortcut/&#34;&gt;ShortcutRecorder&lt;/a&gt; for managing keyboard shortcuts in application preferences. However, it became incompatible with the new plugin architecture of Xcode&amp;nbsp;4.&lt;/p&gt; &#xA;&lt;p&gt;The MASShortcut project introduces a modern API and user interface for recording, storing and using system-wide keyboard shortcuts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shpakovski/MASShortcut/master/Demo/screenshot.png&#34; alt=&#34;Screenshot of the demo project&#34; title=&#34;This is how the demo looks like&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Record and display keyboard shortcuts&lt;/li&gt; &#xA; &lt;li&gt;Watch for shortcuts and execute actions, system-wide&lt;/li&gt; &#xA; &lt;li&gt;A nice, &lt;a href=&#34;http://cocoadocs.org/docsets/MASShortcut/&#34;&gt;documented API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Can be configured to be compatible with Shortcut Recorder&lt;/li&gt; &#xA; &lt;li&gt;Can be installed both through CocoaPods and as a Git submodule&lt;/li&gt; &#xA; &lt;li&gt;Mac App Store friendly&lt;/li&gt; &#xA; &lt;li&gt;Works on OS X 10.10 and up&lt;/li&gt; &#xA; &lt;li&gt;Hacking-friendly codebase covered with tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Partially done:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Accessibility support. Thereâ€™s some basic accessibility code, testers and feedback welcome.&lt;/li&gt; &#xA; &lt;li&gt;Localisation. The English and Czech localization should be complete, thereâ€™s basic support for German, French, Spanish, Italian, and Japanese. If youâ€™re a native speaker in one of the mentioned languages, please test the localization and report issues or add missing strings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Pull requests welcome :)&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is the simplest way to install for Xcode projects. Simply add the following Package Dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/shpakovski/MASShortcut&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;You can also use &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;, by adding the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;MASShortcut&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to stick to the 1.x branch, you can use the version smart match operator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;MASShortcut&#39;, &#39;~&amp;gt; 1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;You can also install via &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, or you can use Git submodules and link against the MASShortcut framework manually.&lt;/p&gt; &#xA;&lt;p&gt;To build from the command line, type &#39;make release&#39;. The framework will be created in a temporary directory and revealed in Finder when the build is complete.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;I hope, it is really easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;Shortcut.h&amp;gt;&#xA;&#xA;// Drop a custom view into XIB, set its class to MASShortcutView&#xA;// and its height to 19. If you select another appearance style,&#xA;// look up the correct height values in MASShortcutView.h.&#xA;@property (nonatomic, weak) IBOutlet MASShortcutView *shortcutView;&#xA;&#xA;// Pick a preference key to store the shortcut between launches&#xA;static NSString *const kPreferenceGlobalShortcut = @&#34;GlobalShortcut&#34;;&#xA;&#xA;// Associate the shortcut view with user defaults&#xA;self.shortcutView.associatedUserDefaultsKey = kPreferenceGlobalShortcut;&#xA;&#xA;// Associate the preference key with an action&#xA;[[MASShortcutBinder sharedBinder]&#xA;    bindShortcutWithDefaultsKey:kPreferenceGlobalShortcut&#xA;    toAction:^{&#xA;    // Let me know if you find a better or a more convenient API.&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you have installed via a method other than Swift Package Manager, then the import is slightly different:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;MASShortcut/Shortcut.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see a real usage example in the Demo target. Enjoy!&lt;/p&gt; &#xA;&lt;h1&gt;Shortcut Recorder Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;By default, MASShortcut uses a different User Defaults storage format incompatible with Shortcut Recorder. But itâ€™s easily possible to change that, so that you can replace Shortcut Recorder with MASShortcut without having to migrate the shortcuts previously stored by your apps. There are two parts of the story:&lt;/p&gt; &#xA;&lt;p&gt;If you bind the recorder control (&lt;code&gt;MASShortcutView&lt;/code&gt;) to User defaults, set the Value Transformer field in the Interface Builder to &lt;code&gt;MASDictionaryTransformer&lt;/code&gt;. This makes sure the shortcuts are written in the Shortcut Recorder format.&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;MASShortcutBinder&lt;/code&gt; to automatically load shortcuts from User Defaults, set the &lt;code&gt;bindingOptions&lt;/code&gt; accordingly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[[MASShortcutBinder sharedBinder] setBindingOptions:@{NSValueTransformerNameBindingOption:MASDictionaryTransformerName}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This makes sure that the shortcuts in the Shortcut Recorder format are loaded correctly.&lt;/p&gt; &#xA;&lt;h1&gt;Notifications&lt;/h1&gt; &#xA;&lt;p&gt;By registering for KVO notifications from &lt;code&gt;NSUserDefaultsController&lt;/code&gt;, you can get a callback whenever a user changes the shortcut, allowing you to perform any UI updates, or other code handling tasks.&lt;/p&gt; &#xA;&lt;p&gt;This is just as easy to implement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// Declare an ivar for key path in the user defaults controller&#xA;NSString *_observableKeyPath;&#xA;    &#xA;// Make a global context reference&#xA;void *kGlobalShortcutContext = &amp;amp;kGlobalShortcutContext;&#xA;    &#xA;// Implement when loading view&#xA;_observableKeyPath = [@&#34;values.&#34; stringByAppendingString:kPreferenceGlobalShortcut];&#xA;[[NSUserDefaultsController sharedUserDefaultsController] addObserver:self forKeyPath:_observableKeyPath&#xA;                                                             options:NSKeyValueObservingOptionInitial&#xA;                                                             context:kGlobalShortcutContext];&#xA;&#xA;// Capture the KVO change and do something&#xA;- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)obj&#xA;                        change:(NSDictionary *)change context:(void *)ctx&#xA;{&#xA;    if (ctx == kGlobalShortcutContext) {&#xA;        NSLog(@&#34;Shortcut has changed&#34;);&#xA;    }&#xA;    else {&#xA;        [super observeValueForKeyPath:keyPath ofObject:obj change:change context:ctx];&#xA;    }&#xA;}&#xA;&#xA;// Do not forget to remove the observer&#xA;[[NSUserDefaultsController sharedUserDefaultsController] removeObserver:self&#xA;                                                             forKeyPath:_observableKeyPath&#xA;                                                                context:kGlobalShortcutContext];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Using in Swift projects&lt;/h1&gt; &#xA;&lt;p&gt;Swift Package Manager is the simplest way to import MASShortcut, just import the Module like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import MASShortcut&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can also:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install as a Pod using the latest CocoaPods with Swift support.&lt;/li&gt; &#xA; &lt;li&gt;Create a bridging header file &lt;a href=&#34;http://swiftalicio.us/2014/11/using-cocoapods-from-swift/&#34;&gt;using the instructions here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Your bridging header file should contain the following &lt;a href=&#34;https://github.com/shpakovski/MASShortcut/issues/36&#34;&gt;two&lt;/a&gt; imports:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;Cocoa/Cocoa.h&amp;gt;&#xA;#import &amp;lt;MASShortcut/Shortcut.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Copyright&lt;/h1&gt; &#xA;&lt;p&gt;MASShortcut is licensed under the 2-clause BSD license.&lt;/p&gt;</summary>
  </entry>
</feed>