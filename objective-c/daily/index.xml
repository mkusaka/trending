<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-13T02:02:32Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mapbox/mapbox-events-ios</title>
    <updated>2022-06-13T02:02:32Z</updated>
    <id>tag:github.com,2022-06-13:/mapbox/mapbox-events-ios</id>
    <link href="https://github.com/mapbox/mapbox-events-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mapbox Events Framework for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üéü Mapbox Mobile Events&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bitrise.io/app/63d52d847cdb36db&#34;&gt;&lt;img src=&#34;https://app.bitrise.io/app/63d52d847cdb36db/status.svg?token=DDdEMfpVR8emhdGSgToskA&amp;amp;branch=master&#34; alt=&#34;Bitrise&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://codecov.io/gh/mapbox/mapbox-events-ios/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Mapbox Mobile Events SDK collects &lt;a href=&#34;https://www.mapbox.com/telemetry/&#34;&gt;anonymous data&lt;/a&gt; about the map and device location to continuously update and improve your maps.&lt;/p&gt; &#xA;&lt;h3&gt;üì¶ Client Frameworks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mapbox/mapbox-gl-native/&#34;&gt;Mapbox Maps SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mapbox/mapbox-navigation-ios/&#34;&gt;Mapbox Navigation SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mapbox/mapbox-vision-ios&#34;&gt;Mapbox Vision SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mapbox/react-native-mapbox-gl&#34;&gt;Mapbox ReactNative SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üèé Quick Start&lt;/h3&gt; &#xA;&lt;p&gt;If you are using another Mapbox SDK, you should not need to do any special setup to use Mapbox Mobile Events.&lt;/p&gt; &#xA;&lt;p&gt;If you are integrating Mapbox Mobile Events into an application which does not use another Mapbox SDK you will need to include &lt;code&gt;MapboxMobileEvents.framework&lt;/code&gt; in your application, and in the application delegate&#39;s &lt;code&gt;‚Ä¶didFinishLaunching‚Ä¶&lt;/code&gt; method, add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;MMEEventsManager *manager = [MMEventsManager.sharedManager &#xA;    initializeWithAccessToken:@&#34;your-mapbox-token&#34; &#xA;    userAgentBase:@&#34;user-agent-string&#34;&#xA;    hostSDKVersion:@&#34;1.0.0&#34;];&#xA;[manager sendTurnstileEvent];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, in Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let eventsManager = MMEEventsManager.sharedManager().initialize(&#xA;    withAccessToken: &#34;your-mapbox-token&#34;, &#xA;    userAgentBase: &#34;user-agent-string&#34;, &#xA;    hostSDKVersion: &#34;1.0.0&#34;)&#xA;eventsManager.sendTurnstileEvent()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üéü Sending Events&lt;/h3&gt; &#xA;&lt;p&gt;The preferred API for creating and sending an events uses the private method &lt;code&gt;-MMEEventManager pushEvent:&lt;/code&gt; if you think your application needs to send events please contact your Technical Account Manager or open an issue in this repository with details.&lt;/p&gt; &#xA;&lt;h3&gt;üí£ Debugging&lt;/h3&gt; &#xA;&lt;p&gt;Usually when running the Mobile Events SDK in the Emulator it does not send events or emit debug messages, you can enable these by setting keys in the &lt;code&gt;Info.plist&lt;/code&gt; of your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MMEDebugLogging: YES&#xA;MMECollectionEnabledInSimulator: YES&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üó∫ Foreground and Background Location Collection&lt;/h3&gt; &#xA;&lt;p&gt;The MapboxMobileEvents frameworks collect location data to help us improve the map. We strive to maintain a low power and network usage profile for this collection and take great care to anonymize all data in accordance with our &lt;a href=&#34;https://www.mapbox.com/legal/privacy&#34;&gt;privacy policy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The use of Mapbox SDKs and APIs on mobile devices are governed by our&lt;br&gt; &lt;a href=&#34;https://www.mapbox.com/legal/tos#%5BMomMom%5D&#34;&gt;Terms of Service&lt;/a&gt; which requires your app not interfere with or limit the data that the Mapbox SDK sends to us, whether by modifying the SDK or by other means. If your application requires different terms, please contact &lt;a href=&#34;https://www.mapbox.com/contact/sales/&#34;&gt;Mapbox Sales&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Background Location in iOS 13&lt;/h4&gt; &#xA;&lt;p&gt;If your application enables background location, the MapboxMobileEvents framework collects telemetry in the background using a passive method which allows for very low power usage. If your application does not use background location, make sure that the permissions keys for it are removed in the &lt;code&gt;Info.plist&lt;/code&gt;: &lt;code&gt;NSLocationAlwaysAndWhenInUseUsageDescription&lt;/code&gt;, &lt;code&gt;NSLocationAlwaysUsageDescription&lt;/code&gt;, as well as the &lt;code&gt;UIBackgroundMode&lt;/code&gt; &lt;code&gt;location&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;‚ö†Ô∏è Error and Exception Handling and Reporting&lt;/h3&gt; &#xA;&lt;p&gt;The MapboxMobileEvents frameworks strives to contain all internal exceptions and errors in an effort to prevent errors from directly impacting the end users of applications which use the framework. The framework will attempt to report them to our backend, in a redacted form, for analysis by Mapbox.&lt;/p&gt; &#xA;&lt;p&gt;Applications and frameworks which embed &lt;code&gt;MapboxMobileEvents.framework&lt;/code&gt; can implement the &lt;code&gt;MMEEventsManagerDelegate&lt;/code&gt; method after setting &lt;code&gt;MMEEVentsManager.sharedManager.delegate&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)eventsManager:(MMEEventsManager *)eventsManager &#xA;    didEncounterError:(NSError *)error;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to be informed of any &lt;code&gt;NSError&lt;/code&gt;s or &lt;code&gt;NSException&lt;/code&gt;s the framework encounters. &lt;code&gt;NSException&lt;/code&gt;s are reported wrapped in an &lt;code&gt;NSError&lt;/code&gt; with the error code &lt;code&gt;MMEErrorException&lt;/code&gt; and the exception included in the user info dictionary under the key &lt;code&gt;MMEErrorUnderlyingExceptionKey&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If a framework wishes to report errors via the mobile events API two convenience methods are provided on &lt;code&gt;MMEEventsManager&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSError *reportableError = nil;&#xA;// make a call with an **error paramater&#xA;[MMEEventsManager.sharedManager reportError:reportableError];&#xA;&#xA;@try {&#xA;    // do something dangerous&#xA;}&#xA;@catch (NSException *exceptional) {&#xA;    [MMEEventsManager.sharedManager reportException:exceptional];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üß™ Testing&lt;/h3&gt; &#xA;&lt;p&gt;Some legacy test cases are written using &lt;a href=&#34;https://github.com/cedarbdd/cedar&#34;&gt;Cedar&lt;/a&gt;, to run the test in &lt;code&gt;Xcode&lt;/code&gt; using &lt;code&gt;Command-U&lt;/code&gt; you&#39;ll need to unzip the framework located in the &lt;code&gt;Carthage/Build/iOS/&lt;/code&gt; to run these tests.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/EarlGrey</title>
    <updated>2022-06-13T02:02:32Z</updated>
    <id>tag:github.com,2022-06-13:/google/EarlGrey</id>
    <link href="https://github.com/google/EarlGrey" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üçµ iOS UI Automation Test Framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Deprecation: EarlGrey 1.0 is deprecated in favor of EarlGrey 2.0 which integrates it with XCUITest. Please look at the &lt;a href=&#34;https://github.com/google/EarlGrey/tree/earlgrey2&#34;&gt;earlgrey2&lt;/a&gt; branch. EarlGrey 1.0 is not being maintained internally with iOS 13.&lt;/p&gt; &#xA;&lt;h1&gt;EarlGrey&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-lightgrey.svg?style=flat&#34; alt=&#34;Apache License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/EarlGrey/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-CC%20BY%204.0-lightgrey.svg?sanitize=true&#34; alt=&#34;CC-BY 4.0 License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/google/EarlGrey&#34;&gt;&lt;img src=&#34;https://travis-ci.org/google/EarlGrey.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/EarlGrey&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/EarlGrey.svg?maxAge=2592000&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/earlgrey&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/earlgrey.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For EarlGrey 2, please go to &lt;a href=&#34;https://github.com/google/EarlGrey/tree/earlgrey2&#34;&gt;earlgrey2 branch&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;EarlGrey is a native iOS UI automation test framework that enables you to write clear, concise tests.&lt;/p&gt; &#xA;&lt;p&gt;With the EarlGrey framework, you have access to enhanced synchronization features. EarlGrey automatically synchronizes with the UI, network requests, and various queues; but still allows you to manually implement customized timings, if needed.&lt;/p&gt; &#xA;&lt;p&gt;EarlGrey‚Äôs synchronization features help to ensure that the UI is in a steady state before actions are performed. This greatly increases test stability and makes tests highly repeatable.&lt;/p&gt; &#xA;&lt;p&gt;EarlGrey works in conjunction with the XCTest framework and integrates with Xcode‚Äôs Test Navigator so you can run tests directly from Xcode or the command line (using xcodebuild).&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The EarlGrey documentation for users is located in the &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs&#34;&gt;EarlGrey/docs&lt;/a&gt; folder. To get started, review the EarlGrey features, check for backward compatibility, and then install/run EarlGrey with your test target. After everything is configured, take a look at the EarlGrey API and start writing your own tests.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/features.md&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/backward-compatibility.md&#34;&gt;Backward Compatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/install-and-run.md&#34;&gt;Install and Run&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/api.md&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/cheatsheet/cheatsheet.png&#34;&gt;Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;If you need help, several resources are available. First check the &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/faq.md&#34;&gt;FAQ&lt;/a&gt;. If you have more questions after reading the FAQ, see &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/known-issues.md&#34;&gt;Known Issues&lt;/a&gt;. You can bring more specific issues to our attention by asking them on &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/earlgrey&#34;&gt;#earlgrey tag&lt;/a&gt;. You can also start new discussions with us on our &lt;a href=&#34;https://groups.google.com/forum/#!forum/earlgrey-discuss&#34;&gt;Google group&lt;/a&gt; or request to join our &lt;a href=&#34;https://googleoss.slack.com/messages/earlgrey&#34;&gt;slack channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/faq.md&#34;&gt;FAQ - Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/ifaq.md&#34;&gt;IFAQ - Infrequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/known-issues.md&#34;&gt;Known Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/earlgrey&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://googleoss.slack.com/messages/earlgrey&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/earlgrey-discuss&#34;&gt;Google Group&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Analytics&lt;/h2&gt; &#xA;&lt;p&gt;To prioritize and improve EarlGrey, the framework collects usage data and uploads it to Google Analytics. More specifically, the framework collects the &lt;strong&gt;MD5 hash&lt;/strong&gt; of &lt;em&gt;Bundle ID&lt;/em&gt;, &lt;em&gt;Test Class Names&lt;/em&gt; and &lt;em&gt;Test Method Names&lt;/em&gt;. This information allows us to measure the volume of usage. For more detailed information about our analytics collection, please peruse the &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/EarlGrey/Common/GREYAnalytics.m&#34;&gt;GREYAnalytics.m&lt;/a&gt; file which contains the implementation details. If they wish, users can choose to opt out by disabling the Analytics config setting in their test‚Äôs &lt;code&gt;- (void)setUp&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;p&gt;In Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Disable analytics.&#xA;[[GREYConfiguration sharedInstance] setValue:@(NO) forConfigKey:kGREYConfigKeyAnalyticsEnabled];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Disable analytics.&#xA;GREYConfiguration.sharedInstance().setValue(false, forConfigKey: kGREYConfigKeyAnalyticsEnabled)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;For Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Please make sure you‚Äôve followed the guidelines in &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before making any contributions.&lt;/p&gt; &#xA;&lt;h3&gt;Setup an EarlGrey Project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the EarlGrey repository from GitHub:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/EarlGrey.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;After you have cloned the EarlGrey repository, download all the dependencies using &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/Scripts/setup-earlgrey.sh&#34;&gt;&lt;strong&gt;setup-earlgrey.sh&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;After the script completes successfully, open &lt;code&gt;EarlGrey.xcodeproj&lt;/code&gt; and ensure that all the targets build.&lt;/li&gt; &#xA; &lt;li&gt;You can now use &lt;code&gt;EarlGrey.xcodeproj&lt;/code&gt; to make changes to the framework.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Add and Run Tests&lt;/h3&gt; &#xA;&lt;h4&gt;Unit Tests&lt;/h4&gt; &#xA;&lt;p&gt;To add unit tests for EarlGrey, use &lt;code&gt;UnitTests.xcodeproj&lt;/code&gt; located at &lt;code&gt;Tests/UnitTests&lt;/code&gt;. To run all unit tests, select the &lt;strong&gt;UnitTests&lt;/strong&gt; Scheme and press Cmd+U.&lt;/p&gt; &#xA;&lt;h4&gt;Functional Tests&lt;/h4&gt; &#xA;&lt;p&gt;To add functional tests for EarlGrey, use the &lt;code&gt;FunctionalTests.xcodeproj&lt;/code&gt; located at &lt;code&gt;Tests/FunctionalTests&lt;/code&gt;. To run all functional tests, select the &lt;strong&gt;FunctionalTests&lt;/strong&gt; Scheme and press Cmd+U.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>michaeleisel/JJLISO8601DateFormatter</title>
    <updated>2022-06-13T02:02:32Z</updated>
    <id>tag:github.com,2022-06-13:/michaeleisel/JJLISO8601DateFormatter</id>
    <link href="https://github.com/michaeleisel/JJLISO8601DateFormatter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A 10x+ faster drop-in replacement for NSISO8601DateFormatter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JJLISO8601DateFormatter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;JJLISO8601DateFormatter&lt;/code&gt; is a thread-safe, feature complete, drop-in replacement for &lt;code&gt;NSISO8601DateFormatter&lt;/code&gt; that is 10x or more faster for both conversion to and from dates.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Date to string: &lt;strong&gt;12x+&lt;/strong&gt; faster&lt;/li&gt; &#xA; &lt;li&gt;String to date: &lt;strong&gt;10x&lt;/strong&gt; faster&lt;/li&gt; &#xA; &lt;li&gt;Object creation: &lt;strong&gt;10x&lt;/strong&gt; faster&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More info on how the benchmark was done is &lt;a href=&#34;https://github.com/michaeleisel/JJLISO8601DateFormatter#how-is-the-benchmarking-done&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Because it is drop-in, you can simply replace the word &lt;code&gt;NSISO8601DateFormatter&lt;/code&gt; with &lt;code&gt;JJLISO8601DateFormatter&lt;/code&gt; and add the header include, &lt;code&gt;#import &amp;lt;JJLISODateFormatter/JJLISODateFormatter.h&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 10.0+&lt;/li&gt; &#xA; &lt;li&gt;MacOS 10.13+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;JJLISO8601DateFormatter is available through &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;JJLISO8601DateFormatter&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h5&gt;How does this date formatting library stay up-to-date with new changes in time zones?&lt;/h5&gt; &#xA;&lt;p&gt;It uses the time zone files provided by the system, the same ones that POSIX functions like &lt;code&gt;localtime&lt;/code&gt; use. If it can&#39;t find them, it will fall back to using Apple&#39;s date formatting libraries.&lt;/p&gt; &#xA;&lt;h5&gt;Why is it so much faster?&lt;/h5&gt; &#xA;&lt;p&gt;There&#39;s nothing special about the library. It is written in straight-forward C and tries to avoid unnecessary allocations, locking, etc. It uses versions of &lt;code&gt;mktime&lt;/code&gt; and &lt;code&gt;localtime&lt;/code&gt; from &lt;code&gt;tzdb&lt;/code&gt;. A better question is, why is Apple&#39;s so much slower? Apple&#39;s date formatting classes are built on top of &lt;a href=&#34;http://site.icu-project.org/home&#34;&gt;ICU&lt;/a&gt;, which although reliable, is a fairly slow library. It&#39;s hard from a glance to say exactly why, but it seems to have a lot of extra abstraction, needless copying, etc., and in general doesn&#39;t prioritize performance as much.&lt;/p&gt; &#xA;&lt;h5&gt;Date formatting is &lt;a href=&#34;http://yourcalendricalfallacyis.com/&#34;&gt;hard&lt;/a&gt;. How does this library ensure correctness?&lt;/h5&gt; &#xA;&lt;p&gt;Although date formatting is difficult, this library has an extensive set of unit tests that cover edge cases like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All different format options&lt;/li&gt; &#xA; &lt;li&gt;All different time zones&lt;/li&gt; &#xA; &lt;li&gt;Leap seconds (neither us nor Apple actually handle them)&lt;/li&gt; &#xA; &lt;li&gt;Leap days&lt;/li&gt; &#xA; &lt;li&gt;Concurrent usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Things are also easier because, for ISO 8601, we only need to support Gregorian calendar.&lt;/p&gt; &#xA;&lt;h5&gt;Is it literally the same for everything?&lt;/h5&gt; &#xA;&lt;p&gt;For nonsensical format options (week of year but no year) and malformed date strings, the behavior is slightly different. But for all intents and purposes, it is the exact same. Feel free to submit a ticket if you find otherwise.&lt;/p&gt; &#xA;&lt;h5&gt;Why is the prefix &#34;JJL&#34;?&lt;/h5&gt; &#xA;&lt;p&gt;Because it&#39;s easy to type with the left pinky on the shift key.&lt;/p&gt; &#xA;&lt;h5&gt;Are there other Apple libraries ripe for optimization?&lt;/h5&gt; &#xA;&lt;p&gt;Yes, there are a lot, the question is which ones are worth optimizing. Feel free to request optimizations for libraries that are causing performance issues for you.&lt;/p&gt; &#xA;&lt;h3&gt;How is the benchmarking done?&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s done by timing many date to string and string to date conversions across two ranges (15 days before now to 15 days after, from 1970 to now), three time zones, and &lt;code&gt;NSISO8601DateFormatOptionsWithInternetDateTime | NSISO8601DateFormatWithFractionalSeconds&lt;/code&gt; for the format options. The benchmark code is located in &lt;code&gt;-viewDidLoad&lt;/code&gt; of the Example project&#39;s &lt;a href=&#34;https://github.com/michaeleisel/JJLISO8601DateFormatter/raw/master/Example/JJLISO8601DateFormatterApp/ViewController.m&#34;&gt;view controller&lt;/a&gt;, and you can get nice benchmarking output yourself by running that project. I normally do testing on my iPhone 8, with the occasional double check on other devices. Obviously the numbers can vary.&lt;/p&gt; &#xA;&lt;h2&gt;Future Improvements and Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributors are always welcome. Here are some possible improvements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift version of the library with no Objective-C code&lt;/li&gt; &#xA; &lt;li&gt;Full rewrite of NSDateFormatter (doable but is it worth it?)&lt;/li&gt; &#xA; &lt;li&gt;Method that returns a &lt;code&gt;char *&lt;/code&gt; instead of an &lt;code&gt;NSString&lt;/code&gt; for going from date to string.&lt;/li&gt; &#xA; &lt;li&gt;watchOS and tvOS support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Michael Eisel, &lt;a href=&#34;mailto:michael.eisel@gmail.com&#34;&gt;michael.eisel@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;JJLISO8601DateFormatter is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>