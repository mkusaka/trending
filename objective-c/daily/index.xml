<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-25T01:39:40Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>coinbase/waas-sdk-react-native</title>
    <updated>2023-03-25T01:39:40Z</updated>
    <id>tag:github.com,2023-03-25:/coinbase/waas-sdk-react-native</id>
    <link href="https://github.com/coinbase/waas-sdk-react-native" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Coinbase Wallet as a Service (WaaS) SDK for React Native. Enables MPC Operations for iOS and Android Devices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Native WaaS SDK&lt;/h1&gt; &#xA;&lt;p&gt;This is the repository for the mobile React Native SDK for Wallet-as-a-Service APIs. It exposes a subset of the WaaS APIs to the mobile developer and, in particular, is required for the completion of MPC operations such as Seed generation and Transaction signing.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;node 18+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://classic.yarnpkg.com/en/docs/install&#34;&gt;yarn classic 1.22+&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For iOS development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;Xcode 14.0+&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iOS15.2+ simulator (iPhone 14 recommended)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.cocoapods.org/using/getting-started.html&#34;&gt;CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Android development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;x86_64 Android emulator running Android 30+ (Pixel 5 running S recommended)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developer.android.com/ndk&#34;&gt;Android NDK&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.java.com/en/download&#34;&gt;Java 8&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html&#34;&gt;Java JDK 17&lt;/a&gt; (JDK 19 will not work with React Native)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;With &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install --save @coinbase/waas-sdk-react-native&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;yarn&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add @coinbase/waas-sdk-react-native&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/coinbase/waas-sdk-react-native/main/src/index.tsx&#34;&gt;index.tsx&lt;/a&gt; for the list of supported APIs.&lt;/p&gt; &#xA;&lt;h2&gt;Example App&lt;/h2&gt; &#xA;&lt;p&gt;This repository provides an example app that demonstrates how the APIs should be used.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: An example Cloud API Key json file is at &lt;code&gt;example/src/.coinbase_cloud_api_key.json&lt;/code&gt; To run the example app, populate, or replace, this file with the Cloud API Key file provided to you by Coinbase.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;Ensure you have XCode open and run the following from the root directory of the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn bootstrap # Install packages for the root and /example directories&#xA;yarn example start # Start the Metro server&#xA;yarn example ios --simulator &#34;iPhone 14&#34; # Build and start the app on iOS simulator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Ensure you have the following &lt;a href=&#34;https://developer.android.com/studio/command-line/variables&#34;&gt;Android environment variables&lt;/a&gt; set correctly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ANDROID_HOME&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ANDROID_SDK_ROOT=&#34;${ANDROID_HOME}&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ANDROID_NDK_HOME=&#34;${ANDROID_HOME}/ndk/&amp;lt;insert ndk version&amp;gt;&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ANDROID_NDK_ROOT=&#34;${ANDROID_NDK_HOME}&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And then export the following to your &lt;code&gt;PATH&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;export PATH=&#34;${ANDROID_HOME}/emulator:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:${PATH}&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run the following from the root directory of the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn install # Install packages for the root directory&#xA;emulator -avd Pixel_5_API_31 # Use any x86_64 emulator with min SDK version: 30.&#xA;yarn example start # Start the Metro server&#xA;yarn example android # Build and start the app on Android emulator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Recommended Architecture&lt;/h2&gt; &#xA;&lt;p&gt;Broadly speaking, there are two possible approaches to using the WaaS SDK:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use the WaaS backends directly for all calls.&lt;/li&gt; &#xA; &lt;li&gt;Use the WaaS backends directly only for MPC operations; proxy all other calls through an intermediate server.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Of these two approaches, we recommend approach #2, as outlined in the following diagram:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/coinbase/waas-sdk-react-native/main/assets/diagram.png&#34; alt=&#34;Recommended Set-up&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The motivation for placing a proxy server in between your application and the WaaS backends are as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your proxy server can log API calls and collect metrics.&lt;/li&gt; &#xA; &lt;li&gt;Your proxy server can filter results as it sees fit (e.g. policy enforcement).&lt;/li&gt; &#xA; &lt;li&gt;Your proxy server can perform end user authentication.&lt;/li&gt; &#xA; &lt;li&gt;Your proxy server can store the Coinbase API Key / Secret, rather than it being exposed to the client.&lt;/li&gt; &#xA; &lt;li&gt;Your proxy server can throttle traffic.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In short, having a proxy server that you control in between your application and the WaaS backends will afford you significantly more control than using the WaaS backends directly in most cases.&lt;/p&gt; &#xA;&lt;p&gt;The methods from the WaaS SDK which are &lt;em&gt;required&lt;/em&gt; to be used for participation in MPC are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;initMPCSdk&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bootstrapDevice&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getRegistrationData&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;computeMPCOperation&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>MaxGabriel/CS193p-Graphing-Calculator</title>
    <updated>2023-03-25T01:39:40Z</updated>
    <id>tag:github.com,2023-03-25:/MaxGabriel/CS193p-Graphing-Calculator</id>
    <link href="https://github.com/MaxGabriel/CS193p-Graphing-Calculator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>