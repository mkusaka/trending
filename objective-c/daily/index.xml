<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-13T01:37:10Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>blakewatters/TransitionKit</title>
    <updated>2022-09-13T01:37:10Z</updated>
    <id>tag:github.com,2022-09-13:/blakewatters/TransitionKit</id>
    <link href="https://github.com/blakewatters/TransitionKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Objective-C library for elegantly implementing state machines.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TransitionKit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/blakewatters/TransitionKit&#34;&gt;&lt;img src=&#34;https://travis-ci.org/blakewatters/TransitionKit.png?branch=master,development&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://cocoapod-badges.herokuapp.com/v/TransitionKit/badge.png&#34; alt=&#34;Pod Version&#34;&gt; &lt;img src=&#34;https://cocoapod-badges.herokuapp.com/p/TransitionKit/badge.png&#34; alt=&#34;Pod Platform&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A simple, elegantly designed block based API for implementing State Machines in Objective-C&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;TransitionKit is a small Cocoa library that provides an API for implementing a state machine in Objective C. It is full-featured, completely documented, and very thoroughly unit tested. State machines are a great way to manage complexity in your application and TransitionKit provides you with an elegant API for implementing state machines in your next iOS or Mac OS X application.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports an arbitrary number of States and Events.&lt;/li&gt; &#xA; &lt;li&gt;States and Events support a thorough set of block based callbacks for responding to state transitions.&lt;/li&gt; &#xA; &lt;li&gt;States, Events, and State Machines are NSCopying and NSCoding compliant, enabling easy integration with archiving and copying in your custom classes.&lt;/li&gt; &#xA; &lt;li&gt;Strongly enforced. The state machine includes numerous runtime checks for misconfigurations, making it easy to debug and trust your state machines.&lt;/li&gt; &#xA; &lt;li&gt;Transitions support the inclusion of arbitrary user data via a &lt;code&gt;userInfo&lt;/code&gt; dictionary, making it easy to broadcast metadata across callbacks.&lt;/li&gt; &#xA; &lt;li&gt;Completely Documented. The entire library is marked up with Appledoc.&lt;/li&gt; &#xA; &lt;li&gt;Thorougly unit tested. You know it works and can make changes with confidence.&lt;/li&gt; &#xA; &lt;li&gt;Lightweight. TransitionKit has no dependencies beyond the Foundation library and works on iOS and Mac OS X.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation via CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;The recommended approach for installing TransitionKit is via the &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; package manager, as it provides flexible dependency management and dead simple installation. For best results, it is recommended that you install via CocoaPods &lt;strong&gt;&amp;gt;= 0.16.0&lt;/strong&gt; using Git &lt;strong&gt;&amp;gt;= 1.8.0&lt;/strong&gt; installed via Homebrew.&lt;/p&gt; &#xA;&lt;p&gt;Install CocoaPods if not already available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ [sudo] gem install cocoapods&#xA;$ pod setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change to the directory of your Xcode project, and Create and Edit your Podfile and add TransitionKit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /path/to/MyProject&#xA;$ touch Podfile&#xA;$ edit Podfile&#xA;platform :ios, &#39;5.0&#39; &#xA;# Or platform :osx, &#39;10.7&#39;&#xA;pod &#39;TransitionKit&#39;, &#39;~&amp;gt; 2.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install into your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open your project in Xcode from the .xcworkspace file (not the usual project file)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ open MyProject.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h4&gt;Simple Example&lt;/h4&gt; &#xA;&lt;p&gt;The following example is a simple state machine that models the state of a Message in an Inbox.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;TKStateMachine *inboxStateMachine = [TKStateMachine new];&#xA;&#xA;TKState *unread = [TKState stateWithName:@&#34;Unread&#34;];&#xA;[unread setDidEnterStateBlock:^(TKState *state, TKTransition *transition) {&#xA;    [self incrementUnreadCount];&#xA;}];&#xA;TKState *read = [TKState stateWithName:@&#34;Read&#34;];&#xA;[read setDidExitStateBlock:^(TKState *state, TKTransition *transition) {&#xA;    [self decrementUnreadCount];&#xA;}];&#xA;TKState *deleted = [TKState stateWithName:@&#34;Deleted&#34;];&#xA;[deleted setDidEnterStateBlock:^(TKState *state, TKTransition *transition) {&#xA;    [self moveMessageToTrash];&#xA;}];&#xA;&#xA;[inboxStateMachine addStates:@[ unread, read, deleted ]];&#xA;inboxStateMachine.initialState = unread;&#xA;&#xA;TKEvent *viewMessage = [TKEvent eventWithName:@&#34;View Message&#34; transitioningFromStates:@[ unread ] toState:read];&#xA;TKEvent *deleteMessage = [TKEvent eventWithName:@&#34;Delete Message&#34; transitioningFromStates:@[ read, unread ] toState:deleted];&#xA;TKEvent *markAsUnread = [TKEvent eventWithName:@&#34;Mark as Unread&#34; transitioningFromStates:@[ read, deleted ] toState:unread];&#xA;&#xA;[inboxStateMachine addEvents:@[ viewMessage, deleteMessage, markAsUnread ]];&#xA;&#xA;// Activate the state machine&#xA;[inboxStateMachine activate];&#xA;&#xA;[inboxStateMachine isInState:@&#34;Unread&#34;]; // YES, the initial state&#xA;&#xA;// Fire some events&#xA;NSDictionary *userInfo = nil;&#xA;NSError *error = nil;&#xA;BOOL success = [inboxStateMachine fireEvent:@&#34;View Message&#34; userInfo:userInfo error:&amp;amp;error]; // YES&#xA;success = [inboxStateMachine fireEvent:@&#34;Delete Message&#34; userInfo:userInfo error:&amp;amp;error]; // YES&#xA;success = [inboxStateMachine fireEvent:@&#34;Mark as Unread&#34; userInfo:userInfo error:&amp;amp;error]; // YES&#xA;&#xA;success = [inboxStateMachine canFireEvent:@&#34;Mark as Unread&#34;]; // NO&#xA;&#xA;// Error. Cannot mark an Unread message as Unread&#xA;success = [inboxStateMachine fireEvent:@&#34;Mark as Unread&#34; userInfo:nil error:&amp;amp;error]; // NO&#xA;&#xA;// error is an TKInvalidTransitionError with a descriptive error message and failure reason&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unit Tests&lt;/h2&gt; &#xA;&lt;p&gt;TransitionKit is tested using the &lt;a href=&#34;https://github.com/allending/Kiwi&#34;&gt;Kiwi&lt;/a&gt; BDD library. In order to run the tests, you must do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the dependencies via CocoaPods: &lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the workspace: &lt;code&gt;open TransitionKit.xcworkspace&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the specs via the &lt;strong&gt;Product&lt;/strong&gt; menu &amp;gt; &lt;strong&gt;Test&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Blake Watters&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/blakewatters&#34;&gt;http://github.com/blakewatters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/blakewatters&#34;&gt;http://twitter.com/blakewatters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:blakewatters@gmail.com&#34;&gt;blakewatters@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;TransitionKit is available under the Apache 2 License. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>razorpay/razorpay-pod</title>
    <updated>2022-09-13T01:37:10Z</updated>
    <id>tag:github.com,2022-09-13:/razorpay/razorpay-pod</id>
    <link href="https://github.com/razorpay/razorpay-pod" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📱 CocoaPod implementation of Razorpay&#39;s Payment SDK. Refer for instructions:&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;razorpay-pod&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/razorpay-pod&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/razorpay-pod.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/razorpay-pod&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/razorpay-pod.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/razorpay-pod&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/razorpay-pod.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository implements pod for Razorpay&#39;s iOS Framework.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt; &#xA;&lt;h2&gt;Installation | Docs&lt;/h2&gt; &#xA;&lt;h3&gt;Note:&lt;/h3&gt; &#xA;&lt;p&gt;If your integrating this on Objective-C please replace the line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#import &amp;lt;Razorpay/Razorpay.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# import &amp;lt;Razorpay/Razorpay-Swift.h&amp;gt; in your viewcontroller.m file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;razorpay-pod is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;razorpay-pod&#39;, &#39;1.2.5&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Note:&lt;/h3&gt; &#xA;&lt;p&gt;for older cocoapod versions check &lt;a href=&#34;https://github.com/razorpay/razorpay-pod/raw/1.1.12/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the documentation from &lt;a href=&#34;https://razorpay.com/docs/payment-gateway/ios-integration/standard/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/razorpay/razorpay-pod/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document. Thank you, &lt;a href=&#34;https://github.com/razorpay/razorpay-pod/graphs/contributors&#34;&gt;contributors&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;razorpay-pod is free software, and may be redistributed under the terms specified in the &lt;a href=&#34;https://raw.githubusercontent.com/razorpay/razorpay-pod/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;We &lt;span&gt;❤️&lt;/span&gt; open source software! See &lt;a href=&#34;https://razorpay.com/integrations&#34; title=&#34;List of our supported integrations&#34;&gt;our other supported plugins / SDKs&lt;/a&gt; or [contact us](mailto:&lt;a href=&#34;mailto:integrations@razorpay.com&#34;&gt;integrations@razorpay.com&lt;/a&gt;?subject=Help with iOS Integration using CocoaPods) to help you with integrations.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dosdude1/macos-catalina-patcher</title>
    <updated>2022-09-13T01:37:10Z</updated>
    <id>tag:github.com,2022-09-13:/dosdude1/macos-catalina-patcher</id>
    <link href="https://github.com/dosdude1/macos-catalina-patcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;macOS Catalina Patcher (http://dosdude1.com/catalina)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;http://dosdude1.com/catalina&#34;&gt;macOS Catalina Patcher&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;The easy way to run macOS Catalina on your Unsupported Mac&lt;/h2&gt; &#xA;&lt;p&gt;Use the Xcode Project to build.&lt;/p&gt; &#xA;&lt;p&gt;Excluding patched binary files, this repo is governed by GNU GPL v3&lt;/p&gt; &#xA;&lt;h2&gt;APFS BootROM Support:&lt;/h2&gt; &#xA;&lt;p&gt;If you have a machine that supports High Sierra natively, you MUST ensure you have the latest version of the system&#39;s BootROM installed. If you have NOT previously installed High Sierra, you can download and install &lt;a href=&#34;https://ipfs.io/ipfs/QmZ5KmpG4SeHF8gWrHmoLcG9a3BNAcWWQoERg4q2J1kuQL/OfficialAPFSFWUpdate.zip&#34;&gt;this&lt;/a&gt; package to install the latest BootROM version. When installing, ensure your system is plugged in to power, or the update will not be installed.&lt;/p&gt; &#xA;&lt;h3&gt;Early-2008 or newer Mac Pro, iMac, or MacBook Pro:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacPro3,1&lt;/li&gt; &#xA; &lt;li&gt;MacPro4,1&lt;/li&gt; &#xA; &lt;li&gt;MacPro5,1&lt;/li&gt; &#xA; &lt;li&gt;iMac8,1&lt;/li&gt; &#xA; &lt;li&gt;iMac9,1&lt;/li&gt; &#xA; &lt;li&gt;iMac10,x&lt;/li&gt; &#xA; &lt;li&gt;iMac11,x (systems with AMD Radeon HD 5xxx and 6xxx series GPUs will be almost unusable when running Catalina.)&lt;/li&gt; &#xA; &lt;li&gt;iMac12,x (systems with AMD Radeon HD 5xxx and 6xxx series GPUs will be almost unusable when running Catalina.)&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro4,1&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro5,x&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro6,x&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro7,x&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro8,x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Late-2008 or newer MacBook Air or Aluminum Unibody MacBook:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacBookAir2,1&lt;/li&gt; &#xA; &lt;li&gt;MacBookAir3,x&lt;/li&gt; &#xA; &lt;li&gt;MacBookAir4,x&lt;/li&gt; &#xA; &lt;li&gt;MacBook5,1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Early-2009 or newer Mac Mini or white MacBook:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Macmini3,1&lt;/li&gt; &#xA; &lt;li&gt;Macmini4,1&lt;/li&gt; &#xA; &lt;li&gt;Macmini5,x (systems with AMD Radeon HD 6xxx series GPUs will be almost unusable when running Catalina.)&lt;/li&gt; &#xA; &lt;li&gt;MacBook5,2&lt;/li&gt; &#xA; &lt;li&gt;MacBook6,1&lt;/li&gt; &#xA; &lt;li&gt;MacBook7,1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Early-2008 or newer Xserve:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xserve2,1&lt;/li&gt; &#xA; &lt;li&gt;Xserve3,1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Machines that ARE NOT supported:&lt;/h2&gt; &#xA;&lt;h3&gt;2006-2007 Mac Pros, iMacs, MacBook Pros, and Mac Minis:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacPro1,1&lt;/li&gt; &#xA; &lt;li&gt;MacPro2,1&lt;/li&gt; &#xA; &lt;li&gt;iMac4,1&lt;/li&gt; &#xA; &lt;li&gt;iMac5,x&lt;/li&gt; &#xA; &lt;li&gt;iMac6,1&lt;/li&gt; &#xA; &lt;li&gt;iMac7,1&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro1,1&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro2,1&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro3,1&lt;/li&gt; &#xA; &lt;li&gt;Macmini1,1&lt;/li&gt; &#xA; &lt;li&gt;Macmini2,1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The 2007 iMac 7,1 is compatible if the CPU is upgraded to a Penryn-based Core 2 Duo, such as a T9300.&lt;/h3&gt; &#xA;&lt;h3&gt;2006-2008 MacBooks:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacBook1,1&lt;/li&gt; &#xA; &lt;li&gt;MacBook2,1&lt;/li&gt; &#xA; &lt;li&gt;MacBook3,1&lt;/li&gt; &#xA; &lt;li&gt;MacBook4,1&lt;/li&gt; &#xA; &lt;li&gt;2008 MacBook Air (MacBookAir 1,1)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues:&lt;/h2&gt; &#xA;&lt;h3&gt;AMD/ATI Radeon HD 5xxx and 6xxx series graphics acceleration:&lt;/h3&gt; &#xA;&lt;p&gt;Currently, it is not possible to achieve full graphics acceleration under Catalina on any machines that use a Radeon HD 5xxx or 6xxx series GPU. If you have a machine with one of these GPUs installed, I&#39;d advise upgrading it if possible (can be done in 2010/2011 iMacs, iMac11,x-12,x), disabling the dedicated GPU if using a 2011 15&#34; or 17&#34; MacBook Pro (MacBookPro8,2/8,3, instructions to do so can be found here), or not installing Catalina. Running Catalina without full graphics acceleration will result in extremely poor system performance.&lt;/p&gt;</summary>
  </entry>
</feed>