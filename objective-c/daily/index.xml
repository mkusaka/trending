<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-27T01:49:59Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kstenerud/KSCrash</title>
    <updated>2022-06-27T01:49:59Z</updated>
    <id>tag:github.com,2022-06-27:/kstenerud/KSCrash</id>
    <link href="https://github.com/kstenerud/KSCrash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Ultimate iOS Crash Reporter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KSCrash&lt;/h1&gt; &#xA;&lt;h4&gt;The Ultimate Crash Reporter&lt;/h4&gt; &#xA;&lt;h3&gt;Another crash reporter? Why?&lt;/h3&gt; &#xA;&lt;p&gt;Because while the existing crash reporters do report crashes, there&#39;s a heck of a lot more that they COULD do. Here are some key features of KSCrash:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On-device symbolication in a way that supports re-symbolication offline (necessary for iOS versions where many functions have been redacted).&lt;/li&gt; &#xA; &lt;li&gt;Generates full Apple reports, with every field filled in.&lt;/li&gt; &#xA; &lt;li&gt;32-bit and 64-bit mode.&lt;/li&gt; &#xA; &lt;li&gt;Supports all Apple devices, including Apple Watch.&lt;/li&gt; &#xA; &lt;li&gt;Handles errors that can only be caught at the mach level, such as stack overflow.&lt;/li&gt; &#xA; &lt;li&gt;Tracks the REAL cause of an uncaught C++ exception.&lt;/li&gt; &#xA; &lt;li&gt;Handles a crash in the crash handler itself (or in the user crash handler callback).&lt;/li&gt; &#xA; &lt;li&gt;Detects zombie (deallocated) object access attempts.&lt;/li&gt; &#xA; &lt;li&gt;Recovers lost NSException messages in cases of zombies or memory corruption.&lt;/li&gt; &#xA; &lt;li&gt;Introspects objects in registers and on the stack (C strings and Objective-C objects, including ivars).&lt;/li&gt; &#xA; &lt;li&gt;Extracts information about objects referenced by an exception (such as &#34;unrecognized selector sent to instance 0xa26d9a0&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Its pluggable server reporting architecture makes it easy to adapt to any API service.&lt;/li&gt; &#xA; &lt;li&gt;Dumps the stack contents.&lt;/li&gt; &#xA; &lt;li&gt;Diagnoses crash causes (Crash Doctor).&lt;/li&gt; &#xA; &lt;li&gt;Records lots of information beyond what the Apple crash report can, in a JSON format.&lt;/li&gt; &#xA; &lt;li&gt;Supports including extra data that the programmer supplies (before and during a crash).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;KSCrash handles the following kinds of crashes:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mach kernel exceptions&lt;/li&gt; &#xA; &lt;li&gt;Fatal signals&lt;/li&gt; &#xA; &lt;li&gt;C++ exceptions&lt;/li&gt; &#xA; &lt;li&gt;Objective-C exceptions&lt;/li&gt; &#xA; &lt;li&gt;Main thread deadlock (experimental)&lt;/li&gt; &#xA; &lt;li&gt;Custom crashes (e.g. from scripting languages)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;KSCrash can report to the following servers:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hockeyapp.net/&#34;&gt;Hockey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheRealKerni/QuincyKit&#34;&gt;QuincyKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kelp404/Victory&#34;&gt;Victory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Email&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kstenerud/KSCrash/tree/master/Example-Reports/_README.md&#34;&gt;Here are some examples of the reports it can generate.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;What&#39;s New?&lt;/h3&gt; &#xA;&lt;h4&gt;Call for help!&lt;/h4&gt; &#xA;&lt;p&gt;My life has changed enough over the past few years that I can&#39;t keep up with giving KSCrash the love it needs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://c1.staticflickr.com/9/8787/28351252396_eeec9bb146.jpg&#34; alt=&#34;I want you&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m looking for someone to help me maintain this package, make sure issues get handled, merges are properly vetted, and code quality remains high. Please contact me personally (kstenerud at my gmail address) or comment in &lt;a href=&#34;https://github.com/kstenerud/KSCrash/issues/313&#34;&gt;https://github.com/kstenerud/KSCrash/issues/313&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;VERY VERY VERY preliminary Android support.&lt;/h4&gt; &#xA;&lt;p&gt;And I do mean PRELIMINARY. Most stuff doesn&#39;t work, but it does compile. Look in the Android subdir if you want to play around with it.&lt;/p&gt; &#xA;&lt;h4&gt;C++ Exception Handling&lt;/h4&gt; &#xA;&lt;p&gt;That&#39;s right! Normally if your app terminates due to an uncaught C++ exception, all you get is this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Thread 0 name:  Dispatch queue: com.apple.main-thread&#xA;Thread 0 Crashed:&#xA;0   libsystem_kernel.dylib          0x9750ea6a 0x974fa000 + 84586 (__pthread_kill + 10)&#xA;1   libsystem_sim_c.dylib           0x04d56578 0x4d0f000 + 292216 (abort + 137)&#xA;2   libc++abi.dylib                 0x04ed6f78 0x4ed4000 + 12152 (abort_message + 102)&#xA;3   libc++abi.dylib                 0x04ed4a20 0x4ed4000 + 2592 (_ZL17default_terminatev + 29)&#xA;4   libobjc.A.dylib                 0x013110d0 0x130b000 + 24784 (_ZL15_objc_terminatev + 109)&#xA;5   libc++abi.dylib                 0x04ed4a60 0x4ed4000 + 2656 (_ZL19safe_handler_callerPFvvE + 8)&#xA;6   libc++abi.dylib                 0x04ed4ac8 0x4ed4000 + 2760 (_ZSt9terminatev + 18)&#xA;7   libc++abi.dylib                 0x04ed5c48 0x4ed4000 + 7240 (__cxa_rethrow + 77)&#xA;8   libobjc.A.dylib                 0x01310fb8 0x130b000 + 24504 (objc_exception_rethrow + 42)&#xA;9   CoreFoundation                  0x01f2af98 0x1ef9000 + 204696 (CFRunLoopRunSpecific + 360)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No way to track what the exception was or where it was thrown from!&lt;/p&gt; &#xA;&lt;p&gt;Now with KSCrash, you get the uncaught exception type, description, and where it was thrown from:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Application Specific Information:&#xA;*** Terminating app due to uncaught exception &#39;MyException&#39;, reason: &#39;Something bad happened...&#39;&#xA;&#xA;Thread 0 name:  Dispatch queue: com.apple.main-thread&#xA;Thread 0 Crashed:&#xA;0   Crash-Tester                    0x0000ad80 0x1000 + 40320 (-[Crasher throwUncaughtCPPException] + 0)&#xA;1   Crash-Tester                    0x0000842e 0x1000 + 29742 (__32-[AppDelegate(UI) crashCommands]_block_invoke343 + 78)&#xA;2   Crash-Tester                    0x00009523 0x1000 + 34083 (-[CommandEntry executeWithViewController:] + 67)&#xA;3   Crash-Tester                    0x00009c0a 0x1000 + 35850 (-[CommandTVC tableView:didSelectRowAtIndexPath:] + 154)&#xA;4   UIKit                           0x0016f285 0xb4000 + 766597 (-[UITableView _selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:] + 1194)&#xA;5   UIKit                           0x0016f4ed 0xb4000 + 767213 (-[UITableView _userSelectRowAtPendingSelectionIndexPath:] + 201)&#xA;6   Foundation                      0x00b795b3 0xb6e000 + 46515 (__NSFireDelayedPerform + 380)&#xA;7   CoreFoundation                  0x01f45376 0x1efa000 + 308086 (__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 22)&#xA;8   CoreFoundation                  0x01f44e06 0x1efa000 + 306694 (__CFRunLoopDoTimer + 534)&#xA;9   CoreFoundation                  0x01f2ca82 0x1efa000 + 207490 (__CFRunLoopRun + 1810)&#xA;10  CoreFoundation                  0x01f2bf44 0x1efa000 + 204612 (CFRunLoopRunSpecific + 276)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom Crashes &amp;amp; Stack Traces&lt;/h4&gt; &#xA;&lt;p&gt;You can now report your own custom crashes and stack traces (think scripting languages):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void) reportUserException:(NSString*) name&#xA;                  reason:(NSString*) reason&#xA;              lineOfCode:(NSString*) lineOfCode&#xA;              stackTrace:(NSArray*) stackTrace&#xA;        terminateProgram:(BOOL) terminateProgram;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See KSCrash.h for details.&lt;/p&gt; &#xA;&lt;h3&gt;Unstable Features&lt;/h3&gt; &#xA;&lt;p&gt;The following features should be considered &#34;unstable&#34; and are disabled by default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Deadlock detection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Build KSCrash&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Select the &lt;strong&gt;KSCrash&lt;/strong&gt; scheme.&lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;strong&gt;iOS Device&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;Archive&lt;/strong&gt; from the &lt;strong&gt;Products&lt;/strong&gt; menu.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When it has finished building, it will show you the framework in Finder. You can use it like you would any other framework.&lt;/p&gt; &#xA;&lt;h2&gt;How to Use KSCrash&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the framework to your project (or add the KSCrash project as a dependency)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following system frameworks &amp;amp; libraries to your project:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;libc++.dylib (libc++.tbd in newer versions)&lt;/li&gt; &#xA;   &lt;li&gt;libz.dylib (libz.tbd in newer versions)&lt;/li&gt; &#xA;   &lt;li&gt;MessageUI.framework (iOS only)&lt;/li&gt; &#xA;   &lt;li&gt;SystemConfiguration.framework&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the flag &#34;-ObjC&#34; to &lt;strong&gt;Other Linker Flags&lt;/strong&gt; in your &lt;strong&gt;Build Settings&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following to your &lt;strong&gt;[application: didFinishLaunchingWithOptions:]&lt;/strong&gt; method in your app delegate:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;KSCrash/KSCrash.h&amp;gt;&#xA;// Include to use the standard reporter.&#xA;#import &amp;lt;KSCrash/KSCrashInstallationStandard.h&amp;gt;&#xA;// Include to use Quincy or Hockey.&#xA;#import &amp;lt;KSCrash/KSCrashInstallationQuincyHockey.h&amp;gt;&#xA;// Include to use the email reporter.&#xA;#import &amp;lt;KSCrash/KSCrashInstallationEmail.h&amp;gt;&#xA;// Include to use Victory.&#xA;#import &amp;lt;KSCrash/KSCrashInstallationVictory.h&amp;gt;&#xA;&#xA;- (BOOL)application:(UIApplication*) application didFinishLaunchingWithOptions:(NSDictionary*) launchOptions&#xA;{&#xA;KSCrashInstallationStandard* installation = [KSCrashInstallationStandard sharedInstance];&#xA;installation.url = [NSURL URLWithString:@&#34;http://put.your.url.here&#34;];&#xA;&#xA;// OR:&#xA;&#xA;KSCrashInstallationQuincy* installation = [KSCrashInstallationQuincy sharedInstance];&#xA;installation.url = [NSURL URLWithString:@&#34;http://put.your.url.here&#34;];&#xA;&#xA;// OR:&#xA;&#xA;KSCrashInstallationHockey* installation = [KSCrashInstallationHockey sharedInstance];&#xA;installation.appIdentifier = @&#34;PUT_YOUR_HOCKEY_APP_ID_HERE&#34;;&#xA;&#xA;// OR:&#xA;&#xA;KSCrashInstallationEmail* installation = [KSCrashInstallationEmail sharedInstance];&#xA;installation.recipients = @[@&#34;some@email.address&#34;];&#xA;&#xA;// Optional (Email): Send Apple-style reports instead of JSON&#xA;[installation setReportStyle:KSCrashEmailReportStyleApple useDefaultFilenameFormat:YES]; &#xA;&#xA;// Optional: Add an alert confirmation (recommended for email installation)&#xA;[installation addConditionalAlertWithTitle:@&#34;Crash Detected&#34;&#xA;                                 message:@&#34;The app crashed last time it was launched. Send a crash report?&#34;&#xA;                               yesAnswer:@&#34;Sure!&#34;&#xA;                                noAnswer:@&#34;No thanks&#34;];&#xA;&#xA;// OR:&#xA;&#xA;KSCrashInstallationVictory* installation = [KSCrashInstallationVictory sharedInstance];&#xA;installation.url = [NSURL URLWithString:@&#34;https://put.your.url.here/api/v1/crash/&amp;lt;application key&amp;gt;&#34;];&#xA;&#xA;[installation install];&#xA;    …&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the crash monitor system (which intercepts crashes and stores reports to disk). Note that there are other properties you can and probably will want to set for the various installations.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;re ready to send any outstanding crash reports, call the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[installation sendAllReportsWithCompletion:^(NSArray *filteredReports, BOOL completed, NSError *error)&#xA;{&#xA; // Stuff to do when report sending is complete&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Recommended Reading&lt;/h2&gt; &#xA;&lt;p&gt;If possible, you should read the following header files to fully understand what features KSCrash has, and how to use them:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;KSCrash.h&lt;/li&gt; &#xA; &lt;li&gt;KSCrashInstallation.h&lt;/li&gt; &#xA; &lt;li&gt;KSCrashInstallation(SPECIFIC TYPE).h&lt;/li&gt; &#xA; &lt;li&gt;Architecture.md&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Understanding the KSCrash Codebase&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve written a quick code tour &lt;a href=&#34;https://raw.githubusercontent.com/kstenerud/KSCrash/master/CODE_TOUR.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Enabling on-device symbolication&lt;/h3&gt; &#xA;&lt;p&gt;On-device symbolication requires basic symbols to be present in the final build. To enable this, go to your app&#39;s build settings and set &lt;strong&gt;Strip Style&lt;/strong&gt; to &lt;strong&gt;Debugging Symbols&lt;/strong&gt;. Doing so increases your final binary size by about 5%, but you get on-device symbolication.&lt;/p&gt; &#xA;&lt;h3&gt;Enabling advanced functionality:&lt;/h3&gt; &#xA;&lt;p&gt;KSCrash has advanced functionality that can be very useful when examining crash reports in the wild. Some involve minor trade-offs, so most of them are disabled by default.&lt;/p&gt; &#xA;&lt;h4&gt;Custom User Data (userInfo in KSCrash.h)&lt;/h4&gt; &#xA;&lt;p&gt;You can store custom user data to the next crash report by setting the &lt;strong&gt;userInfo&lt;/strong&gt; property in KSCrash.h.&lt;/p&gt; &#xA;&lt;h4&gt;Zombie Tracking (KSCrashMonitorTypeZombie in KSCrashMonitorType.h)&lt;/h4&gt; &#xA;&lt;p&gt;KSCrash has the ability to detect zombie instances (dangling pointers to deallocated objects). It does this by recording the address and class of any object that gets deallocated. It stores these values in a cache, keyed off the deallocated object&#39;s address. This means that the smaller you set the cache size, the greater the chance that a hash collision occurs and you lose information about a previously deallocated object.&lt;/p&gt; &#xA;&lt;p&gt;With zombie tracking enabled, KSCrash will also detect a lost NSException and print its contents. Certain kinds of memory corruption or stack corruption crashes can cause the exception to deallocate early, further twarting efforts to debug your app, so this feature can be quite handy at times.&lt;/p&gt; &#xA;&lt;p&gt;Trade off: Zombie tracking at the cost of adding very slight overhead to object deallocation, and having some memory reserved.&lt;/p&gt; &#xA;&lt;h4&gt;Deadlock Detection (KSCrashMonitorTypeMainThreadDeadlock in KSCrashMonitorType.h)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING WARNING WARNING WARNING WARNING WARNING WARNING&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This feature is UNSTABLE! It can false-positive and crash your app!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your main thread deadlocks, your user interface will become unresponsive, and the user will have to manually shut down the app (for which there will be no crash report). With deadlock detection enabled, a watchdog timer is set up. If anything holds the main thread for longer than the watchdog timer duration, KSCrash will shut down the app and give you a stack trace showing what the main thread was doing at the time.&lt;/p&gt; &#xA;&lt;p&gt;This is wonderful, but you must be careful: App initialization generally occurs on the main thread. If your initialization code takes longer than the watchdog timer, your app will be forcibly shut down during start up! If you enable this feature, you MUST ensure that NONE of your normally running code holds the main thread for longer than the watchdog value! At the same time, you&#39;ll want to set the timer to a low enough value that the user doesn&#39;t become impatient and shut down the app manually before the watchdog triggers!&lt;/p&gt; &#xA;&lt;p&gt;Trade off: Deadlock detection, but you must be a lot more careful about what runs on the main thread!&lt;/p&gt; &#xA;&lt;h4&gt;Memory Introspection (introspectMemory in KSCrash.h)&lt;/h4&gt; &#xA;&lt;p&gt;When an app crashes, there are usually objects and strings in memory that are being referenced by the stack, registers, or even exception messages. When enabled, KSCrash will introspect these memory regions and store their contents in the crash report.&lt;/p&gt; &#xA;&lt;p&gt;You can also specify a list of classes that should not be introspected by setting the &lt;strong&gt;doNotIntrospectClasses&lt;/strong&gt; property in KSCrash.&lt;/p&gt; &#xA;&lt;h4&gt;Custom crash handling code (onCrash in KSCrash.h)&lt;/h4&gt; &#xA;&lt;p&gt;If you want to do some extra processing after a crash occurs (perhaps to add more contextual data to the report), you can do so.&lt;/p&gt; &#xA;&lt;p&gt;However, you must ensure that you only use async-safe code, and above all else never call Objective-C code from that method! There are many cases where you can get away with doing so anyway, but there are certain classes of crashes where handler code that disregards this warning will cause the crash handler to crash! Note that if this happens, KSCrash will detect it and write a full report anyway, though your custom handler code may not fully run.&lt;/p&gt; &#xA;&lt;p&gt;Trade off: Custom crash handling code, but you must be careful what you put in it!&lt;/p&gt; &#xA;&lt;h4&gt;KSCrash log redirection&lt;/h4&gt; &#xA;&lt;p&gt;This takes whatever KSCrash would have printed to the console, and writes it to a file instead. I mostly use this for debugging KSCrash itself, but it could be useful for other purposes, so I&#39;ve exposed an API for it.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The workspace includes some example apps, which demonstrate common KSCrash usage. Please look at the top of AppDelegate.m in each app for a description of what it does.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2012 Karl Stenerud&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in the documentation of any redistributions of the template files themselves (but not in projects built using the templates).&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RestKit/RestKit</title>
    <updated>2022-06-27T01:49:59Z</updated>
    <id>tag:github.com,2022-06-27:/RestKit/RestKit</id>
    <link href="https://github.com/RestKit/RestKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RestKit is a framework for consuming and modeling RESTful web resources on iOS and OS X&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RestKit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/RestKit/RestKit&#34;&gt;&lt;img src=&#34;http://img.shields.io/travis/RestKit/RestKit/development.svg?style=flat&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/RestKit/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/RestKit.svg?style=flat&#34; alt=&#34;Pod Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/RestKit/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/RestKit.svg?style=flat&#34; alt=&#34;Pod Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/l/RestKit.svg?style=flat&#34; alt=&#34;Pod License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kiwiirc.com/client/irc.freenode.net/?nick=rkuser%7C?&amp;amp;theme=basic#RestKit&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/IRC-%23RestKit-green.svg?style=flat&#34; alt=&#34;Visit our IRC channel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;RestKit is a modern Objective-C framework for implementing RESTful web services clients on iOS and Mac OS X. It provides a powerful &lt;a href=&#34;https://github.com/RestKit/RestKit/wiki/Object-mapping&#34;&gt;object mapping&lt;/a&gt; engine that seamlessly integrates with &lt;a href=&#34;http://developer.apple.com/library/mac/#documentation/cocoa/Conceptual/CoreData/cdProgrammingGuide.html&#34;&gt;Core Data&lt;/a&gt; and a simple set of networking primitives for mapping HTTP requests and responses built on top of &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking&#34;&gt;AFNetworking&lt;/a&gt;. It has an elegant, carefully designed set of APIs that make accessing and modeling RESTful resources feel almost magical. For example, here&#39;s how to access the Twitter public timeline and turn the JSON contents into an array of Tweet objects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@interface RKTweet : NSObject&#xA;@property (nonatomic, copy) NSNumber *userID;&#xA;@property (nonatomic, copy) NSString *username;&#xA;@property (nonatomic, copy) NSString *text;&#xA;@end&#xA;&#xA;RKObjectMapping *mapping = [RKObjectMapping mappingForClass:[RKTweet class]];&#xA;[mapping addAttributeMappingsFromDictionary:@{&#xA;    @&#34;user.name&#34;:   @&#34;username&#34;,&#xA;    @&#34;user.id&#34;:     @&#34;userID&#34;,&#xA;    @&#34;text&#34;:        @&#34;text&#34;&#xA;}];&#xA;&#xA;RKResponseDescriptor *responseDescriptor = [RKResponseDescriptor responseDescriptorWithMapping:mapping method:RKRequestMethodAny pathPattern:nil keyPath:nil statusCodes:nil];&#xA;NSURL *url = [NSURL URLWithString:@&#34;http://api.twitter.com/1/statuses/public_timeline.json&#34;];&#xA;NSURLRequest *request = [NSURLRequest requestWithURL:url];&#xA;RKObjectRequestOperation *operation = [[RKObjectRequestOperation alloc] initWithRequest:request responseDescriptors:@[responseDescriptor]];&#xA;[operation setCompletionBlockWithSuccess:^(RKObjectRequestOperation *operation, RKMappingResult *result) {&#xA;    NSLog(@&#34;The public timeline Tweets: %@&#34;, [result array]);&#xA;} failure:nil];&#xA;[operation start];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RestKit/RestKit/releases&#34;&gt;Download RestKit&lt;/a&gt; and play with the &lt;a href=&#34;https://github.com/RestKit/RestKit/tree/development/Examples&#34;&gt;examples&lt;/a&gt; for iPhone and Mac OS X&lt;/li&gt; &#xA; &lt;li&gt;First time with RestKit? Read the &lt;a href=&#34;https://raw.githubusercontent.com/RestKit/RestKit/development/#overview&#34;&gt;&#34;Overview&#34;&lt;/a&gt; section below and then check out the &lt;a href=&#34;https://github.com/RestKit/RKGist/raw/master/TUTORIAL.md&#34;&gt;&#34;Getting Acquainted with RestKit&#34;&lt;/a&gt; tutorial and &lt;a href=&#34;https://github.com/RestKit/RestKit/wiki/Object-mapping&#34;&gt;Object Mapping Reference&lt;/a&gt; documents in the wiki to jump right in.&lt;/li&gt; &#xA; &lt;li&gt;Upgrading from RestKit 0.9.x or 0.10.x? Read the &lt;a href=&#34;https://github.com/RestKit/RestKit/wiki/Upgrading-from-v0.10.x-to-v0.20.0&#34;&gt;&#34;Upgrading to RestKit 0.20.x&#34;&lt;/a&gt; guide in the wiki&lt;/li&gt; &#xA; &lt;li&gt;Adding RestKit to an existing &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking&#34;&gt;AFNetworking&lt;/a&gt; application? Read the &lt;a href=&#34;https://github.com/RestKit/RestKit/wiki/AFNetworking-Integration&#34;&gt;AFNetworking Integration&lt;/a&gt; document to learn details about how the frameworks fit together.&lt;/li&gt; &#xA; &lt;li&gt;Review the &lt;a href=&#34;http://cocoadocs.org/docsets/RestKit/&#34;&gt;source code API documentation&lt;/a&gt; for a detailed look at the classes and API&#39;s in RestKit. A great place to start is &lt;a href=&#34;http://restkit.org/api/latest/Classes/RKObjectManager.html&#34;&gt;RKObjectManager&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Still need some help? Ask questions on &lt;a href=&#34;http://stackoverflow.com/questions/tagged/restkit&#34;&gt;Stack Overflow&lt;/a&gt; or the &lt;a href=&#34;http://groups.google.com/group/restkit&#34;&gt;mailing list&lt;/a&gt;, ping us on &lt;a href=&#34;http://twitter.com/RestKit&#34;&gt;Twitter&lt;/a&gt; or chat with us on &lt;a href=&#34;https://kiwiirc.com/client/irc.freenode.net/?nick=rkuser%7C?&amp;amp;theme=basic#RestKit&#34;&gt;IRC&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;RestKit is designed to be modular and each module strives to maintain a minimal set of dependencies across the framework and with the host platform. At the core of library sits the object mapping engine, which is responsible for transforming objects between representations (such as JSON/XML &amp;lt;-&amp;gt; local domain objects).&lt;/p&gt; &#xA;&lt;h3&gt;Object Mapping Fundamentals&lt;/h3&gt; &#xA;&lt;p&gt;The object mapping engine is built on top of the &lt;a href=&#34;https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/KeyValueCoding/Articles/KeyValueCoding.html&#34;&gt;Key-Value Coding&lt;/a&gt; (KVC) informal protocol that is foundational to numerous Cocoa technologies such as key-value observing, bindings, and Core Data. Object mappings are expressed as pairs of KVC key paths that specify the source and destination attributes or relationships that are to be transformed.&lt;/p&gt; &#xA;&lt;p&gt;RestKit leverages the highly dynamic Objective-C runtime to infer the developers desired intent by examining the type of the source and destination properties and performing appropriate type transformations. For example, given a source key path of &lt;code&gt;created_at&lt;/code&gt; that identifies a string within a parsed JSON document and a destination key path of &lt;code&gt;creationDate&lt;/code&gt; that identifies an &lt;code&gt;NSDate&lt;/code&gt; property on a target object, RestKit will transform the date from a string into an &lt;code&gt;NSDate&lt;/code&gt; using an &lt;code&gt;NSDateFormatter&lt;/code&gt;. Numerous other transformations are provided out of the box and the engine is pluggable to allow the developer to define new transformations or replace an existing transformation with a new implementation.&lt;/p&gt; &#xA;&lt;p&gt;The mapper fully supports both simple attribute as well as relationship mappings in which nested to-one or to-many child objects are mapped recursively. Through relationship mappings, one object mapping can be added to another to compose aggregate mappings that are capable of processing arbitrarily complex source documents.&lt;/p&gt; &#xA;&lt;p&gt;Object mapping is a deep topic and is explored in exhaustive detail in the &lt;a href=&#34;https://github.com/RestKit/RestKit/wiki/Object-mapping&#34;&gt;Object Mapping Guide&lt;/a&gt; on the wiki.&lt;/p&gt; &#xA;&lt;h3&gt;API Quickstart&lt;/h3&gt; &#xA;&lt;p&gt;RestKit is broken into several modules that cleanly separate the mapping engine from the HTTP and Core Data integrations to provide maximum flexibility. Key classes in each module are highlighted below and each module is hyperlinked to the README.md contained within the source code.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th colspan=&#34;2&#34; style=&#34;text-align:center;&#34;&gt;&lt;a href=&#34;https://github.com/RestKit/RestKit/wiki/Object-mapping&#34;&gt;Object Mapping&lt;/a&gt;&lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKObjectMapping.html&#34;&gt;RKObjectMapping&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Encapsulates configuration for transforming object representations as expressed by key-value coding keypaths.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKAttributeMapping.html&#34;&gt;RKAttributeMapping&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies a desired transformation between attributes within an object or entity mapping in terms of a source and destination key path.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKRelationshipMapping.html&#34;&gt;RKRelationshipMapping&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies a desired mapping of a nested to-one or to-many child objects in terms of a source and destination key path and an &lt;tt&gt;RKObjectMapping&lt;/tt&gt; with which to map the attributes of the child object.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKDynamicMapping.html&#34;&gt;RKDynamicMapping&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies a flexible mapping in which the decision about which &lt;tt&gt;RKObjectMapping&lt;/tt&gt; is to be used to process a given document is deferred to run time.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKMapperOperation.html&#34;&gt;RKMapperOperation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provides an interface for mapping a deserialized document into a set of local domain objects.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKMappingOperation.html&#34;&gt;RKMappingOperation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;tt&gt;NSOperation&lt;/tt&gt; that performs a mapping between object representations using an &lt;tt&gt;RKObjectMapping&lt;/tt&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;th colspan=&#34;2&#34; style=&#34;text-align:center;&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RestKit/RestKit/development/Code/Network/README.md&#34;&gt;Networking&lt;/a&gt;&lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKRequestDescriptor.html&#34;&gt;RKRequestDescriptor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Describes a request that can be sent from the application to a remote web application for a given object type.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKResponseDescriptor.html&#34;&gt;RKResponseDescriptor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Describes an object mappable response that may be returned from a remote web application in terms of an object mapping, a key path, a &lt;a href=&#34;http://cocoadocs.org/docsets/SOCKit/&#34;&gt;SOCKit pattern&lt;/a&gt; for matching the URL, and a set of status codes that define the circumstances in which the mapping is appropriate for a given response.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKObjectParameterization.html&#34;&gt;RKObjectParameterization&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Performs mapping of a given object into an &lt;tt&gt;NSDictionary&lt;/tt&gt; representation suitable for use as the parameters of an HTTP request.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKObjectRequestOperation.html&#34;&gt;RKObjectRequestOperation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;tt&gt;NSOperation&lt;/tt&gt; that sends an HTTP request and performs object mapping on the parsed response body using the configurations expressed in a set of &lt;tt&gt;RKResponseDescriptor&lt;/tt&gt; objects.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKResponseMapper.html&#34;&gt;RKResponseMapperOperation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;tt&gt;NSOperation&lt;/tt&gt; that provides support for object mapping an &lt;tt&gt;NSHTTPURLResponse&lt;/tt&gt; using a set of &lt;tt&gt;RKResponseDescriptor&lt;/tt&gt; objects.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKObjectManager.html&#34;&gt;RKObjectManager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Captures the common patterns for communicating with a RESTful web application over HTTP using object mapping including: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Centralizing &lt;tt&gt;RKRequestDescriptor&lt;/tt&gt; and &lt;tt&gt;RKResponseDescriptor&lt;/tt&gt; configurations&lt;/li&gt; &#xA;     &lt;li&gt;Describing URL configuration with an &lt;tt&gt;RKRouter&lt;/tt&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Serializing objects and sending requests with the serialized representations&lt;/li&gt; &#xA;     &lt;li&gt;Sending requests to load remote resources and object mapping the response bodies&lt;/li&gt; &#xA;     &lt;li&gt;Building multi-part form requests for objects&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKRouter.html&#34;&gt;RKRouter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generates &lt;tt&gt;NSURL&lt;/tt&gt; objects from a base URL and a set of &lt;tt&gt;RKRoute&lt;/tt&gt; objects describing relative paths used by the application.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKRoute.html&#34;&gt;RKRoute&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Describes a single relative path for a given object type and HTTP method, the relationship of an object, or a symbolic name.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;th colspan=&#34;2&#34; style=&#34;text-align:center;&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RestKit/RestKit/development/Code/CoreData/README.md&#34;&gt;Core Data&lt;/a&gt;&lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKManagedObjectStore.html&#34;&gt;RKManagedObjectStore&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Encapsulates Core Data configuration including an &lt;tt&gt;NSManagedObjectModel&lt;/tt&gt;, a &lt;tt&gt;NSPersistentStoreCoordinator&lt;/tt&gt;, and a pair of &lt;tt&gt;NSManagedObjectContext&lt;/tt&gt; objects.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKEntityMapping.html&#34;&gt;RKEntityMapping&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Models a mapping for transforming an object representation into a &lt;tt&gt;NSManagedObject&lt;/tt&gt; instance for a given &lt;tt&gt;NSEntityDescription&lt;/tt&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKConnectionDescription.html&#34;&gt;RKConnectionDescription&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Describes a mapping for establishing a relationship between Core Data entities using foreign key attributes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKManagedObjectRequestOperation.html&#34;&gt;RKManagedObjectRequestOperation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;tt&gt;NSOperation&lt;/tt&gt; subclass that sends an HTTP request and performs object mapping on the parsed response body to create &lt;tt&gt;NSManagedObject&lt;/tt&gt; instances, establishes relationships between objects using &lt;tt&gt;RKConnectionDescription&lt;/tt&gt; objects, and cleans up orphaned objects that no longer exist in the remote backend system.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKManagedObjectImporter.html&#34;&gt;RKManagedObjectImporter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provides support for bulk mapping of managed objects using &lt;tt&gt;RKEntityMapping&lt;/tt&gt; objects for two use cases: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Bulk importing of parsed documents into an &lt;tt&gt;NSPersistentStore.&lt;/tt&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Generating a &lt;a href=&#34;Docs for database seeding&#34;&gt;seed database&lt;/a&gt; for initializing an application&#39;s Core Data store with an initial data set upon installation.&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;th colspan=&#34;2&#34; style=&#34;text-align:center;&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RestKit/RestKit/development/Code/Search/README.md&#34;&gt;Search&lt;/a&gt;&lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKSearchIndexer.html&#34;&gt;RKSearchIndexer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provides support for generating a full-text searchable index within Core Data for string attributes of entities within an application.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKSearchPredicate.html&#34;&gt;RKSearchPredicate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generates an &lt;tt&gt;NSCompoundPredicate&lt;/tt&gt; given a string of text that will search an index built with an &lt;tt&gt;RKSearchIndexer&lt;/tt&gt; across any indexed entity.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;th colspan=&#34;2&#34; style=&#34;text-align:center;&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RestKit/RestKit/development/Code/Testing/README.md&#34;&gt;Testing&lt;/a&gt;&lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKMappingTest.html&#34;&gt;RKMappingTest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provides support for unit testing object mapping configurations given a parsed document and an object or entity mapping. Expectations are configured in terms of expected key path mappings and/or expected transformation results.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKTestFixture.html&#34;&gt;RKTestFixture&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provides an interface for easily generating test fixture data for unit testing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://restkit.org/api/latest/Classes/RKTestFactory.html&#34;&gt;RKTestFactory&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provides support for creating objects for use in testing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Object Request&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// GET a single Article from /articles/1234.json and map it into an object&#xA;// JSON looks like {&#34;article&#34;: {&#34;title&#34;: &#34;My Article&#34;, &#34;author&#34;: &#34;Blake&#34;, &#34;body&#34;: &#34;Very cool!!&#34;}}&#xA;RKObjectMapping *mapping = [RKObjectMapping mappingForClass:[Article class]];&#xA;[mapping addAttributeMappingsFromArray:@[@&#34;title&#34;, @&#34;author&#34;, @&#34;body&#34;]];&#xA;NSIndexSet *statusCodes = RKStatusCodeIndexSetForClass(RKStatusCodeClassSuccessful); // Anything in 2xx&#xA;RKResponseDescriptor *responseDescriptor = [RKResponseDescriptor responseDescriptorWithMapping:mapping method:RKRequestMethodAny pathPattern:@&#34;/articles/:articleID&#34; keyPath:@&#34;article&#34; statusCodes:statusCodes];&#xA;&#xA;NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@&#34;http://restkit.org/articles/1234.json&#34;]];&#xA;RKObjectRequestOperation *operation = [[RKObjectRequestOperation alloc] initWithRequest:request responseDescriptors:@[responseDescriptor]];&#xA;[operation setCompletionBlockWithSuccess:^(RKObjectRequestOperation *operation, RKMappingResult *result) {&#xA;    Article *article = [result firstObject];&#xA;&#x9;NSLog(@&#34;Mapped the article: %@&#34;, article);&#xA;} failure:^(RKObjectRequestOperation *operation, NSError *error) {&#xA;&#x9;NSLog(@&#34;Failed with error: %@&#34;, [error localizedDescription]);&#xA;}];&#xA;[operation start];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Managed Object Request&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// GET an Article and its Categories from /articles/888.json and map into Core Data entities&#xA;// JSON looks like {&#34;article&#34;: {&#34;title&#34;: &#34;My Article&#34;, &#34;author&#34;: &#34;Blake&#34;, &#34;body&#34;: &#34;Very cool!!&#34;, &#34;categories&#34;: [{&#34;id&#34;: 1, &#34;name&#34;: &#34;Core Data&#34;]}&#xA;NSManagedObjectModel *managedObjectModel = [NSManagedObjectModel mergedModelFromBundles:nil];&#xA;RKManagedObjectStore *managedObjectStore = [[RKManagedObjectStore alloc] initWithManagedObjectModel:managedObjectModel];&#xA;NSError *error = nil;&#xA;BOOL success = RKEnsureDirectoryExistsAtPath(RKApplicationDataDirectory(), &amp;amp;error);&#xA;if (! success) {&#xA;    RKLogError(@&#34;Failed to create Application Data Directory at path &#39;%@&#39;: %@&#34;, RKApplicationDataDirectory(), error);&#xA;}&#xA;NSString *path = [RKApplicationDataDirectory() stringByAppendingPathComponent:@&#34;Store.sqlite&#34;];&#xA;NSPersistentStore *persistentStore = [managedObjectStore addSQLitePersistentStoreAtPath:path fromSeedDatabaseAtPath:nil withConfiguration:nil options:nil error:&amp;amp;error];&#xA;if (! persistentStore) {&#xA;    RKLogError(@&#34;Failed adding persistent store at path &#39;%@&#39;: %@&#34;, path, error);&#xA;}&#xA;[managedObjectStore createManagedObjectContexts];&#xA;&#xA;RKEntityMapping *categoryMapping = [RKEntityMapping mappingForEntityForName:@&#34;Category&#34; inManagedObjectStore:managedObjectStore];&#xA;[categoryMapping addAttributeMappingsFromDictionary:@{ &#34;id&#34;: &#34;categoryID&#34;, @&#34;name&#34;: &#34;name&#34; }];&#xA;RKEntityMapping *articleMapping = [RKEntityMapping mappingForEntityForName:@&#34;Article&#34; inManagedObjectStore:managedObjectStore];&#xA;[articleMapping addAttributeMappingsFromArray:@[@&#34;title&#34;, @&#34;author&#34;, @&#34;body&#34;]];&#xA;[articleMapping addPropertyMapping:[RKRelationshipMapping relationshipMappingFromKeyPath:@&#34;categories&#34; toKeyPath:@&#34;categories&#34; withMapping:categoryMapping]];&#xA;&#xA;NSIndexSet *statusCodes = RKStatusCodeIndexSetForClass(RKStatusCodeClassSuccessful); // Anything in 2xx&#xA;RKResponseDescriptor *responseDescriptor = [RKResponseDescriptor responseDescriptorWithMapping:articleMapping method:RKRequestMethodAny pathPattern:@&#34;/articles/:articleID&#34; keyPath:@&#34;article&#34; statusCodes:statusCodes];&#xA;&#xA;NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@&#34;http://restkit.org/articles/888.json&#34;]];&#xA;RKManagedObjectRequestOperation *operation = [[RKManagedObjectRequestOperation alloc] initWithRequest:request responseDescriptors:@[responseDescriptor]];&#xA;operation.managedObjectContext = managedObjectStore.mainQueueManagedObjectContext;&#xA;operation.managedObjectCache = managedObjectStore.managedObjectCache;&#xA;[operation setCompletionBlockWithSuccess:^(RKObjectRequestOperation *operation, RKMappingResult *result) {&#xA;  Article *article = [result firstObject];&#xA;&#x9;NSLog(@&#34;Mapped the article: %@&#34;, article);&#xA;&#x9;NSLog(@&#34;Mapped the category: %@&#34;, [article.categories anyObject]);&#xA;} failure:^(RKObjectRequestOperation *operation, NSError *error) {&#xA;&#x9;NSLog(@&#34;Failed with error: %@&#34;, [error localizedDescription]);&#xA;}];&#xA;NSOperationQueue *operationQueue = [NSOperationQueue new];&#xA;[operationQueue addOperation:operation];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Map a Client Error Response to an NSError&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// GET /articles/error.json returns a 422 (Unprocessable Entity)&#xA;// JSON looks like {&#34;errors&#34;: &#34;Some Error Has Occurred&#34;}&#xA;&#xA;// You can map errors to any class, but `RKErrorMessage` is included for free&#xA;RKObjectMapping *errorMapping = [RKObjectMapping mappingForClass:[RKErrorMessage class]];&#xA;// The entire value at the source key path containing the errors maps to the message&#xA;[errorMapping addPropertyMapping:[RKAttributeMapping attributeMappingFromKeyPath:nil toKeyPath:@&#34;errorMessage&#34;]];&#xA;&#xA;NSIndexSet *statusCodes = RKStatusCodeIndexSetForClass(RKStatusCodeClassClientError);&#xA;// Any response in the 4xx status code range with an &#34;errors&#34; key path uses this mapping&#xA;RKResponseDescriptor *errorDescriptor = [RKResponseDescriptor responseDescriptorWithMapping:errorMapping method:RKRequestMethodAny pathPattern:nil keyPath:@&#34;errors&#34; statusCodes:statusCodes];&#xA;&#xA;NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@&#34;http://restkit.org/articles/error.json&#34;]];&#xA;RKObjectRequestOperation *operation = [[RKObjectRequestOperation alloc] initWithRequest:request responseDescriptors:@[errorDescriptor]];&#xA;[operation setCompletionBlockWithSuccess:nil failure:^(RKObjectRequestOperation *operation, NSError *error) {&#xA;    // The `description` method of the class the error is mapped to is used to construct the value of the localizedDescription&#xA;&#x9;NSLog(@&#34;Loaded this error: %@&#34;, [error localizedDescription]);&#xA;&#xA;    // You can access the model object used to construct the `NSError` via the `userInfo`&#xA;    RKErrorMessage *errorMessage =  [[error.userInfo objectForKey:RKObjectMapperErrorObjectsKey] firstObject];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Centralize Configuration in an Object Manager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// Set up Article and Error Response Descriptors&#xA;// Successful JSON looks like {&#34;article&#34;: {&#34;title&#34;: &#34;My Article&#34;, &#34;author&#34;: &#34;Blake&#34;, &#34;body&#34;: &#34;Very cool!!&#34;}}&#xA;RKObjectMapping *mapping = [RKObjectMapping mappingForClass:[Article class]];&#xA;[mapping addAttributeMappingsFromArray:@[@&#34;title&#34;, @&#34;author&#34;, @&#34;body&#34;]];&#xA;NSIndexSet *statusCodes = RKStatusCodeIndexSetForClass(RKStatusCodeClassSuccessful); // Anything in 2xx&#xA;RKResponseDescriptor *articleDescriptor = [RKResponseDescriptor responseDescriptorWithMapping:mapping method:RKRequestMethodAny pathPattern:@&#34;/articles&#34; keyPath:@&#34;article&#34; statusCodes:statusCodes];&#xA;&#xA;// Error JSON looks like {&#34;errors&#34;: &#34;Some Error Has Occurred&#34;}&#xA;RKObjectMapping *errorMapping = [RKObjectMapping mappingForClass:[RKErrorMessage class]];&#xA;// The entire value at the source key path containing the errors maps to the message&#xA;[errorMapping addPropertyMapping:[RKAttributeMapping attributeMappingFromKeyPath:nil toKeyPath:@&#34;errorMessage&#34;]];&#xA;NSIndexSet *statusCodes = RKStatusCodeIndexSetForClass(RKStatusCodeClassClientError);&#xA;// Any response in the 4xx status code range with an &#34;errors&#34; key path uses this mapping&#xA;RKResponseDescriptor *errorDescriptor = [RKResponseDescriptor responseDescriptorWithMapping:errorMapping method:RKRequestMethodAny pathPattern:nil keyPath:@&#34;errors&#34; statusCodes:statusCodes];&#xA;&#xA;// Add our descriptors to the manager&#xA;RKObjectManager *manager = [RKObjectManager managerWithBaseURL:[NSURL URLWithString:@&#34;http://restkit.org&#34;]];&#xA;[manager addResponseDescriptorsFromArray:@[ articleDescriptor, errorDescriptor ]];&#xA;&#xA;[manager getObjectsAtPath:@&#34;/articles/555.json&#34; parameters:nil success:^(RKObjectRequestOperation *operation, RKMappingResult *mappingResult) {&#xA;&#x9;// Handled with articleDescriptor&#xA;} failure:^(RKObjectRequestOperation *operation, NSError *error) {&#xA;&#x9;// Transport error or server error handled by errorDescriptor&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure Core Data Integration with the Object Manager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSManagedObjectModel *managedObjectModel = [NSManagedObjectModel mergedModelFromBundles:nil];&#xA;RKManagedObjectStore *managedObjectStore = [[RKManagedObjectStore alloc] initWithManagedObjectModel:managedObjectModel];&#xA;BOOL success = RKEnsureDirectoryExistsAtPath(RKApplicationDataDirectory(), &amp;amp;error);&#xA;if (! success) {&#xA;    RKLogError(@&#34;Failed to create Application Data Directory at path &#39;%@&#39;: %@&#34;, RKApplicationDataDirectory(), error);&#xA;}&#xA;NSString *path = [RKApplicationDataDirectory() stringByAppendingPathComponent:@&#34;Store.sqlite&#34;];&#xA;NSPersistentStore *persistentStore = [managedObjectStore addSQLitePersistentStoreAtPath:path fromSeedDatabaseAtPath:nil withConfiguration:nil options:nil error:&amp;amp;error];&#xA;if (! persistentStore) {&#xA;    RKLogError(@&#34;Failed adding persistent store at path &#39;%@&#39;: %@&#34;, path, error);&#xA;}&#xA;[managedObjectStore createManagedObjectContexts];&#xA;&#xA;RKObjectManager *manager = [RKObjectManager managerWithBaseURL:[NSURL URLWithString:@&#34;http://restkit.org&#34;]];&#xA;manager.managedObjectStore = managedObjectStore;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load a Collection of Objects at a Path&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;RKObjectManager *manager = [RKObjectManager managerWithBaseURL:[NSURL URLWithString:@&#34;http://restkit.org&#34;]];&#xA;[manager getObjectsAtPath:@&#34;/articles&#34; parameters:nil success:^(RKObjectRequestOperation *operation, RKMappingResult *mappingResult) {&#xA;} failure:^(RKObjectRequestOperation *operation, NSError *error) {&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manage a Queue of Object Request Operations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;RKObjectManager *manager = [RKObjectManager managerWithBaseURL:[NSURL URLWithString:@&#34;http://restkit.org&#34;]];&#xA;&#xA;NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@&#34;http://restkit.org/articles/1234.json&#34;]];&#xA;RKObjectRequestOperation *operation = [[RKObjectRequestOperation alloc] initWithRequest:request responseDescriptors:@[responseDescriptor]];&#xA;&#xA;[manager enqueueObjectRequestOperation:operation];&#xA;[manager cancelAllObjectRequestOperationsWithMethod:RKRequestMethodANY matchingPathPattern:@&#34;/articles/:articleID\\.json&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;POST, PATCH, and DELETE an Object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;RKObjectMapping *responseMapping = [RKObjectMapping mappingForClass:[Article class]];&#xA;[responseMapping addAttributeMappingsFromArray:@[@&#34;title&#34;, @&#34;author&#34;, @&#34;body&#34;]];&#xA;NSIndexSet *statusCodes = RKStatusCodeIndexSetForClass(RKStatusCodeClassSuccessful); // Anything in 2xx&#xA;RKResponseDescriptor *articleDescriptor = [RKResponseDescriptor responseDescriptorWithMapping:responseMapping method:RKRequestMethodAny pathPattern:@&#34;/articles&#34; keyPath:@&#34;article&#34; statusCodes:statusCodes];&#xA;&#xA;RKObjectMapping *requestMapping = [RKObjectMapping requestMapping]; // objectClass == NSMutableDictionary&#xA;[requestMapping addAttributeMappingsFromArray:@[@&#34;title&#34;, @&#34;author&#34;, @&#34;body&#34;]];&#xA;&#xA;// For any object of class Article, serialize into an NSMutableDictionary using the given mapping and nest&#xA;// under the &#39;article&#39; key path&#xA;RKRequestDescriptor *requestDescriptor = [RKRequestDescriptor requestDescriptorWithMapping:requestMapping objectClass:[Article class] rootKeyPath:@&#34;article&#34; method:RKRequestMethodAny];&#xA;&#xA;RKObjectManager *manager = [RKObjectManager managerWithBaseURL:[NSURL URLWithString:@&#34;http://restkit.org&#34;]];&#xA;[manager addRequestDescriptor:requestDescriptor];&#xA;[manager addResponseDescriptor:articleDescriptor];&#xA;&#xA;Article *article = [Article new];&#xA;article.title = @&#34;Introduction to RestKit&#34;;&#xA;article.body = @&#34;This is some text.&#34;;&#xA;article.author = @&#34;Blake&#34;;&#xA;&#xA;// POST to create&#xA;[manager postObject:article path:@&#34;/articles&#34; parameters:nil success:nil failure:nil];&#xA;&#xA;// PATCH to update&#xA;article.body = @&#34;New Body&#34;;&#xA;[manager patchObject:article path:@&#34;/articles/1234&#34; parameters:nil success:nil failure:nil];&#xA;&#xA;// DELETE to destroy&#xA;[manager deleteObject:article path:@&#34;/articles/1234&#34; parameters:nil success:nil failure:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure Logging&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// Log all HTTP traffic with request and response bodies&#xA;RKLogConfigureByName(&#34;RestKit/Network&#34;, RKLogLevelTrace);&#xA;&#xA;// Log debugging info about Core Data&#xA;RKLogConfigureByName(&#34;RestKit/CoreData&#34;, RKLogLevelDebug);&#xA;&#xA;// Raise logging for a block&#xA;RKLogWithLevelWhileExecutingBlock(RKLogLevelTrace, ^{&#xA;    // Do something that generates logs&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure Routing&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;RKObjectManager *manager = [RKObjectManager managerWithBaseURL:[NSURL URLWithString:@&#34;http://restkit.org&#34;]];&#xA;&#xA;// Class Routing&#xA;[manager.router.routeSet addRoute:[RKRoute routeWithClass:[GGSegment class] pathPattern:@&#34;/segments/:segmentID\\.json&#34; method:RKRequestMethodGET]];&#xA;&#xA;// Relationship Routing&#xA;[manager.router.routeSet addRoute:[RKRoute routeWithRelationshipName:@&#34;amenities&#34; objectClass:[GGAirport class] pathPattern:@&#34;/airports/:airportID/amenities.json&#34; method:RKRequestMethodGET]];&#xA;&#xA;// Named Routes&#xA;[manager.router.routeSet addRoute:[RKRoute routeWithName:@&#34;thumbs_down_review&#34; resourcePathPattern:@&#34;/reviews/:reviewID/thumbs_down&#34; method:RKRequestMethodPOST]];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;POST an Object with a File Attachment&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;Article *article = [Article new];&#xA;UIImage *image = [UIImage imageNamed:@&#34;some_image.png&#34;];&#xA;&#xA;// Serialize the Article attributes then attach a file&#xA;NSMutableURLRequest *request = [[RKObjectManager sharedManager] multipartFormRequestWithObject:article method:RKRequestMethodPOST path:nil parameters:nil constructingBodyWithBlock:^(id&amp;lt;AFMultipartFormData&amp;gt; formData) {&#xA;    [formData appendPartWithFileData:UIImagePNGRepresentation(image)&#xA;                                name:@&#34;article[image]&#34;&#xA;                            fileName:@&#34;photo.png&#34;&#xA;                            mimeType:@&#34;image/png&#34;];&#xA;}];&#xA;&#xA;RKObjectRequestOperation *operation = [[RKObjectManager sharedManager] objectRequestOperationWithRequest:request success:nil failure:nil];&#xA;[[RKObjectManager sharedManager] enqueueObjectRequestOperation:operation]; // NOTE: Must be enqueued rather than started&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enqueue a Batch of Object Request Operations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;&#xA;RKObjectManager *manager = [RKObjectManager managerWithBaseURL:[NSURL URLWithString:@&#34;http://restkit.org&#34;]];&#xA;&#xA;Airport *jfk = [Airport new];&#xA;jfk.code = @&#34;jfk&#34;;&#xA;Airport *lga = [Airport new];&#xA;lga.code = @&#34;lga&#34;;&#xA;Airport *rdu = [Airport new];&#xA;rdu.code = @&#34;rdu&#34;;&#xA;&#xA;// Enqueue a GET for &#39;/airports/jfk/weather&#39;, &#39;/airports/lga/weather&#39;, &#39;/airports/rdu/weather&#39;&#xA;RKRoute *route = [RKRoute routeWithName:@&#34;airport_weather&#34; resourcePathPattern:@&#34;/airports/:code/weather&#34; method:RKRequestMethodGET];&#xA;&#xA;[manager enqueueBatchOfObjectRequestOperationsWithRoute:route&#xA;                                                objects:@[ jfk, lga, rdu]&#xA;                                               progress:^(NSUInteger numberOfFinishedOperations, NSUInteger totalNumberOfOperations) {&#xA;                                                   NSLog(@&#34;Finished %d operations&#34;, numberOfFinishedOperations);&#xA;                                               } completion:^ (NSArray *operations) {&#xA;                                                   NSLog(@&#34;All Weather Reports Loaded!&#34;);&#xA;                                               }];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate a Seed Database&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSManagedObjectModel *managedObjectModel = [NSManagedObjectModel mergedModelFromBundles:nil];&#xA;RKManagedObjectStore *managedObjectStore = [[RKManagedObjectStore alloc] initWithManagedObjectModel:managedObjectModel];&#xA;NSError *error = nil;&#xA;BOOL success = RKEnsureDirectoryExistsAtPath(RKApplicationDataDirectory(), &amp;amp;error);&#xA;if (! success) {&#xA;    RKLogError(@&#34;Failed to create Application Data Directory at path &#39;%@&#39;: %@&#34;, RKApplicationDataDirectory(), error);&#xA;}&#xA;NSString *path = [RKApplicationDataDirectory() stringByAppendingPathComponent:@&#34;Store.sqlite&#34;];&#xA;NSPersistentStore *persistentStore = [managedObjectStore addSQLitePersistentStoreAtPath:path fromSeedDatabaseAtPath:nil withConfiguration:nil options:nil error:&amp;amp;error];&#xA;if (! persistentStore) {&#xA;    RKLogError(@&#34;Failed adding persistent store at path &#39;%@&#39;: %@&#34;, path, error);&#xA;}&#xA;[managedObjectStore createManagedObjectContexts];&#xA;&#xA;RKEntityMapping *articleMapping = [RKEntityMapping mappingForEntityForName:@&#34;Article&#34; inManagedObjectStore:managedObjectStore];&#xA;[articleMapping addAttributeMappingsFromArray:@[@&#34;title&#34;, @&#34;author&#34;, @&#34;body&#34;]];&#xA;&#xA;NSString *seedPath = [RKApplicationDataDirectory() stringByAppendingPathComponent:@&#34;MySeedDatabase.sqlite&#34;];&#xA;RKManagedObjectImporter *importer = [[RKManagedObjectImporter alloc] initWithManagedObjectModel:managedObjectStore.managedObjectModel storePath:seedPath];&#xA;&#xA;// Import the files &#34;articles.json&#34; from the Main Bundle using our RKEntityMapping&#xA;// JSON looks like {&#34;articles&#34;: [ {&#34;title&#34;: &#34;Article 1&#34;, &#34;body&#34;: &#34;Text&#34;, &#34;author&#34;: &#34;Blake&#34; ]}&#xA;NSError *error;&#xA;NSBundle *mainBundle = [NSBundle mainBundle];&#xA;[importer importObjectsFromItemAtPath:[mainBundle pathForResource:@&#34;articles&#34; ofType:@&#34;json&#34;]&#xA;                          withMapping:articleMapping&#xA;                              keyPath:@&#34;articles&#34;&#xA;                                error:&amp;amp;error];&#xA;&#xA;BOOL success = [importer finishImporting:&amp;amp;error];&#xA;if (success) {&#xA;&#x9;[importer logSeedingInfo];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Index and Search an Entity&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSManagedObjectModel *managedObjectModel = [NSManagedObjectModel mergedModelFromBundles:nil];&#xA;RKManagedObjectStore *managedObjectStore = [[RKManagedObjectStore alloc] initWithManagedObjectModel:managedObjectModel];&#xA;NSError *error = nil;&#xA;BOOL success = RKEnsureDirectoryExistsAtPath(RKApplicationDataDirectory(), &amp;amp;error);&#xA;if (! success) {&#xA;    RKLogError(@&#34;Failed to create Application Data Directory at path &#39;%@&#39;: %@&#34;, RKApplicationDataDirectory(), error);&#xA;}&#xA;NSString *path = [RKApplicationDataDirectory() stringByAppendingPathComponent:@&#34;Store.sqlite&#34;];&#xA;NSPersistentStore *persistentStore = [managedObjectStore addSQLitePersistentStoreAtPath:path fromSeedDatabaseAtPath:nil withConfiguration:nil options:nil error:&amp;amp;error];&#xA;if (! persistentStore) {&#xA;    RKLogError(@&#34;Failed adding persistent store at path &#39;%@&#39;: %@&#34;, path, error);&#xA;}&#xA;[managedObjectStore createManagedObjectContexts];&#xA;[managedObjectStore addSearchIndexingToEntityForName:@&#34;Article&#34; onAttributes:@[ @&#34;title&#34;, @&#34;body&#34; ]];&#xA;[managedObjectStore addInMemoryPersistentStore:nil];&#xA;[managedObjectStore createManagedObjectContexts];&#xA;[managedObjectStore startIndexingPersistentStoreManagedObjectContext];&#xA;&#xA;Article *article1 = [NSEntityDescription insertNewObjectForEntityForName:@&#34;Article&#34; inManagedObjectContext:managedObjectStore.mainQueueManagedObjectContext];&#xA;article1.title = @&#34;First Article&#34;;&#xA;article1.body = &#34;This should match search&#34;;&#xA;&#xA;Article *article2 = [NSEntityDescription insertNewObjectForEntityForName:@&#34;Article&#34; inManagedObjectContext:managedObjectStore.mainQueueManagedObjectContext];&#xA;article2.title = @&#34;Second Article&#34;;&#xA;article2.body = &#34;Does not&#34;;&#xA;&#xA;BOOL success = [managedObjectStore.mainQueueManagedObjectContext saveToPersistentStore:nil];&#xA;&#xA;RKSearchPredicate *predicate = [RKSearchPredicate searchPredicateWithText:@&#34;Match&#34; type:NSAndPredicateType];&#xA;NSFetchRequest *fetchRequest = [NSFetchRequest fetchRequestWithEntityName:@&#34;Article&#34;];&#xA;fetchRequest.predicate = predicate;&#xA;&#xA;// Contains article1 due to body text containing &#39;match&#39;&#xA;NSArray *matches = [managedObjectStore.mainQueueManagedObjectContext executeFetchRequest:fetchRequest error:nil];&#xA;NSLog(@&#34;Found the matching articles: %@&#34;, matches);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unit Test a Mapping&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// JSON looks like {&#34;article&#34;: {&#34;title&#34;: &#34;My Article&#34;, &#34;author&#34;: &#34;Blake&#34;, &#34;body&#34;: &#34;Very cool!!&#34;}}&#xA;RKObjectMapping *mapping = [RKObjectMapping mappingForClass:[Article class]];&#xA;[mapping addAttributeMappingsFromArray:@[@&#34;title&#34;, @&#34;author&#34;, @&#34;body&#34;]];&#xA;&#xA;NSDictionary *article = @{ @&#34;article&#34;: @{ @&#34;title&#34;: @&#34;My Title&#34;, @&#34;body&#34;: @&#34;The article body&#34;, @&#34;author&#34;: @&#34;Blake&#34; } };&#xA;RKMappingTest *mappingTest = [[RKMappingTest alloc] initWithMapping:mapping sourceObject:article destinationObject:nil];&#xA;&#xA;[mappingTest expectMappingFromKeyPath:@&#34;title&#34; toKeyPath:@&#34;title&#34; value:@&#34;My Title&#34;];&#xA;[mappingTest performMapping];&#xA;[mappingTest verify];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;RestKit requires &lt;a href=&#34;https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS8.html#//apple_ref/doc/uid/TP40014205-SW1&#34;&gt;iOS 8.0&lt;/a&gt; and above or &lt;a href=&#34;https://developer.apple.com/library/mac/releasenotes/MacOSX/WhatsNewInOSX/Articles/MacOSX10_9.html#//apple_ref/doc/uid/TP40013207-CH100&#34;&gt;Mac OS X 10.9&lt;/a&gt; and above.&lt;/p&gt; &#xA;&lt;p&gt;Several third-party open source libraries are used within RestKit, including:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AFNetworking/AFNetworking&#34;&gt;AFNetworking&lt;/a&gt; - Networking Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://0xc0.de/LibComponentLogging&#34;&gt;LibComponentLogging&lt;/a&gt; - Logging Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NimbusKit/sockit&#34;&gt;SOCKit&lt;/a&gt; - String &amp;lt;-&amp;gt; Object Coding&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://boredzo.org/iso8601parser/&#34;&gt;iso8601parser&lt;/a&gt; - Support for parsing and generating ISO-8601 dates&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The following Cocoa frameworks must be linked into the application target for proper compilation:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;CFNetwork.framework&lt;/strong&gt; on iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CoreData.framework&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security.framework&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MobileCoreServices.framework&lt;/strong&gt; on iOS or &lt;strong&gt;CoreServices.framework&lt;/strong&gt; on OS X&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;And the following linker flags must be set:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;-ObjC&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;-all_load&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;ARC&lt;/h3&gt; &#xA;&lt;p&gt;As of &lt;a href=&#34;https://github.com/RestKit/RestKit/wiki/Restkit-0.20.0&#34;&gt;version 0.20.0&lt;/a&gt;, RestKit has migrated the entire codebase to ARC.&lt;/p&gt; &#xA;&lt;p&gt;If you are including the RestKit sources directly into a project that does not yet use &lt;a href=&#34;http://clang.llvm.org/docs/AutomaticReferenceCounting.html&#34;&gt;Automatic Reference Counting&lt;/a&gt;, you will need to set the &lt;code&gt;-fobjc-arc&lt;/code&gt; compiler flag on all of the RestKit source files. To do this in Xcode, go to your active target and select the &#34;Build Phases&#34; tab. Now select all RestKit source files, press Enter, insert &lt;code&gt;-fobjc-arc&lt;/code&gt; and then &#34;Done&#34; to enable ARC for RestKit.&lt;/p&gt; &#xA;&lt;h3&gt;Serialization Formats&lt;/h3&gt; &#xA;&lt;p&gt;RestKit provides a pluggable interface for handling arbitrary serialization formats via the &lt;a href=&#34;http://restkit.org/api/latest/Classes/RKSerialization.html&#34;&gt;&lt;code&gt;RKSerialization&lt;/code&gt;&lt;/a&gt; protocol and the &lt;a href=&#34;http://restkit.org/api/latest/Classes/RKMIMETypeSerialization.html&#34;&gt;&lt;code&gt;RKMIMETypeSerialization&lt;/code&gt;&lt;/a&gt; class. Out of the box, RestKit supports handling the &lt;a href=&#34;http://www.json.org/&#34;&gt;JSON&lt;/a&gt; format for serializing and deserializing object representations via the &lt;a href=&#34;http://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSJSONSerialization_Class/Reference/Reference.html&#34;&gt;&lt;code&gt;NSJSONSerialization&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt; &#xA;&lt;h4&gt;Additional Serializations&lt;/h4&gt; &#xA;&lt;p&gt;Support for additional formats and alternate serialization backends is provided via external modules that can be added to the project. Currently the following serialization implementations are available for use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JSONKit&lt;/li&gt; &#xA; &lt;li&gt;SBJSON&lt;/li&gt; &#xA; &lt;li&gt;YAJL&lt;/li&gt; &#xA; &lt;li&gt;NextiveJson&lt;/li&gt; &#xA; &lt;li&gt;XMLReader + XMLWriter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended approach for installing RestKit is via the &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; package manager, as it provides flexible dependency management and dead simple installation. For best results, it is recommended that you install via CocoaPods &lt;strong&gt;&amp;gt;= 0.19.1&lt;/strong&gt; using Git &lt;strong&gt;&amp;gt;= 1.8.0&lt;/strong&gt; installed via Homebrew.&lt;/p&gt; &#xA;&lt;h3&gt;via CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Install CocoaPods if not already available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ [sudo] gem install cocoapods&#xA;$ pod setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change to the directory of your Xcode project, and Create and Edit your Podfile and add RestKit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /path/to/MyProject&#xA;$ touch Podfile&#xA;$ edit Podfile&#xA;target &#34;YOUR PROJECT&#34; do&#xA;&#x9;platform :ios, &#39;7.0&#39;&#xA;&#x9;# Or platform :osx, &#39;10.7&#39;&#xA;&#x9;pod &#39;RestKit&#39;, &#39;~&amp;gt; 0.24.0&#39;&#xA;end&#xA;# Testing and Search are optional components&#xA;pod &#39;RestKit/Testing&#39;, &#39;~&amp;gt; 0.24.0&#39;&#xA;pod &#39;RestKit/Search&#39;,  &#39;~&amp;gt; 0.24.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install into your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open your project in Xcode from the .xcworkspace file (not the usual project file)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ open MyProject.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that if your installation fails, it may be because you are installing with a version of Git lower than CocoaPods is expecting. Please ensure that you are running Git &lt;strong&gt;&amp;gt;= 1.8.0&lt;/strong&gt; by executing &lt;code&gt;git --version&lt;/code&gt;. You can get a full picture of the installation details by executing &lt;code&gt;pod install --verbose&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From a Release Package or as a Git submodule&lt;/h3&gt; &#xA;&lt;p&gt;Detailed installation instructions are available in the &lt;a href=&#34;https://github.com/RestKit/RestKit/wiki/Installing-RestKit-v0.20.x-as-a-Git-Submodule&#34;&gt;Visual Install Guide&lt;/a&gt; on the Wiki.&lt;/p&gt; &#xA;&lt;h2&gt;Using RestKit in a Swift Project&lt;/h2&gt; &#xA;&lt;p&gt;Install RestKit using one of the above methods. Then add &lt;code&gt;@import RestKit;&lt;/code&gt; (if RestKit is built as a dynamic framework) or &lt;code&gt;#import &amp;lt;RestKit/RestKit.h&amp;gt;&lt;/code&gt; (if RestKit is built as a static library) into the bridging header for your Swift project. To enable the Core Data functionality in RestKit, add &lt;code&gt;@import CoreData;&lt;/code&gt; into your bridging header &lt;em&gt;before&lt;/em&gt; you import RestKit.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;RestKit is licensed under the terms of the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;Apache License, version 2.0&lt;/a&gt;. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/RestKit/RestKit/development/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for full details.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;RestKit is brought to you by &lt;a href=&#34;http://twitter.com/blakewatters&#34;&gt;Blake Watters&lt;/a&gt; and the RestKit team.&lt;/p&gt; &#xA;&lt;p&gt;Support is provided by the following organizations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gateguruapp.com/&#34;&gt;GateGuru&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.twotoasters.com/&#34;&gt;Two Toasters&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ryannair05/Little12</title>
    <updated>2022-06-27T01:49:59Z</updated>
    <id>tag:github.com,2022-06-27:/ryannair05/Little12</id>
    <link href="https://github.com/ryannair05/Little12" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iPhone 12 gestures and more for iOS 14&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Little12&lt;/h1&gt; &#xA;&lt;p&gt;Simulate your older iPhone as an iPhone X by enabling iPhone X fluid gestures.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;iPhone 6S - iPhone X running iOS 14 or later&lt;/p&gt; &#xA;&lt;h2&gt;Features - All can be enabled/disabled in settings* :)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iPhone X fluid gestures.&lt;/li&gt; &#xA; &lt;li&gt;iPhone X and iPad status bar.&lt;/li&gt; &#xA; &lt;li&gt;iPhone X CC Grabber, Keyboard, and Homebar&lt;/li&gt; &#xA; &lt;li&gt;iPhone X Device Spoofing&lt;/li&gt; &#xA; &lt;li&gt;iPad Dock, App Switcher and Multitasking Features&lt;/li&gt; &#xA; &lt;li&gt;FaceID Padlock&lt;/li&gt; &#xA; &lt;li&gt;Reduce Rows&lt;/li&gt; &#xA; &lt;li&gt;iPhone X rounded switcher and corners&lt;/li&gt; &#xA; &lt;li&gt;Battery Percentage in Battery Icon&lt;/li&gt; &#xA; &lt;li&gt;Bottom Inset&lt;/li&gt; &#xA; &lt;li&gt;iPhone X Coversheet Shortcuts&lt;/li&gt; &#xA; &lt;li&gt;iPhone 11 Camera UI [Beta]&lt;/li&gt; &#xA; &lt;li&gt;Lightweight with no battery drain.*&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/theos/theos&#34;&gt;Theos&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Clone the GitHub repository with &lt;code&gt;git clone https://github.com/ryannair05/Little12.git&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;make package&lt;/code&gt; and it will compile the deb in ./packages/ directory.&lt;/p&gt; &#xA;&lt;h2&gt;Info&lt;/h2&gt; &#xA;&lt;p&gt;Little12 is a fork of &lt;a href=&#34;https://github.com/ryannair05/Little11&#34;&gt;Little11 by me&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Developers are free to modify and use the Little11 source in their work in accordance with the GNU General Public License.&lt;/p&gt; &#xA;&lt;p&gt;Little12 is only partially open source, with it being fully open sourced later in time.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VitaTaf | &lt;a href=&#34;https://github.com/VitaTaf/HomeGesture&#34;&gt;HomeGesture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Andrew Wiik | &lt;a href=&#34;https://github.com/andrewwiik/LittleX&#34;&gt;LittleX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;duraidabdul | &lt;a href=&#34;https://github.com/duraidabdul/Neptune&#34;&gt;Neptune&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SniperGER | &lt;a href=&#34;https://github.com/SniperGER/ProudLock2&#34;&gt;ProudLock2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*All tweaks drain battery life, which is something that can not be avoided; however, Little12 drains less battery compared to similar tweaks.&lt;/p&gt;</summary>
  </entry>
</feed>