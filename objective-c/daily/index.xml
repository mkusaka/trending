<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-18T01:35:38Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>button/DeepLinkKit</title>
    <updated>2022-12-18T01:35:38Z</updated>
    <id>tag:github.com,2022-12-18:/button/DeepLinkKit</id>
    <link href="https://github.com/button/DeepLinkKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A splendid route-matching, block-based way to handle your deep links.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/10621371/7642874/8c90f72a-fa62-11e4-9092-dfff96c24f01.png&#34; width=&#34;392&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;DeepLink Kit&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://travis-ci.org/button/DeepLinkKit&#34;&gt;&lt;img src=&#34;http://img.shields.io/travis/button/DeepLinkKit.svg?style=flat&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/button/DeepLinkKit?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/button/DeepLinkKit/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/DeepLinkKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/DeepLinkKit.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/DeepLinkKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/DeepLinkKit.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/DeepLinkKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/DeepLinkKit.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;DeepLink Kit is a splendid route-matching, block-based way to handle your deep links. Rather than decide how to format your URLs, parse them, pass data, and navigate to specific content or perform actions, this library and a few lines of code will get you on your way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/button/DeepLinkKit/wiki/DeepLink-Kit-Integration-Guide&#34;&gt;Full Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.usebutton.com/developers/universal-links/&#34;&gt;Guide to add Universal Links to your app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Check it out&lt;/h2&gt; &#xA;&lt;p&gt;Try the &lt;code&gt;DeepLinkKit&lt;/code&gt; sample project by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod try &#34;DeepLinkKit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;DeepLinkKit is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install the library, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#34;DeepLinkKit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;To install via Carthage, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;github &#34;button/DeepLinkKit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t use CocoaPods or Carthage, you can include all of the source files from the &lt;a href=&#34;https://github.com/button/DeepLinkKit/tree/master/DeepLinkKit&#34;&gt;DeepLinkKit directory&lt;/a&gt; in your project.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add deep link support to your app in 5 minutes or less following these simple steps.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; As of &lt;code&gt;1.0.0&lt;/code&gt;, all imports should be updated to import &lt;code&gt;&amp;lt;DeepLinkKit/DeepLinkKit.h&amp;gt;&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Make sure you have a URL scheme registered for your app in your Info.plist&lt;/strong&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/1057077/5710380/8d913f3e-9a6f-11e4-83a2-49f6564d7a8f.png&#34; width=&#34;410&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Import DeepLinkKit&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;DeepLinkKit/DeepLinkKit.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Create an instance of &lt;code&gt;DPLDeepLinkRouter&lt;/code&gt; in your app delegate&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)application&#xA;        didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {&#xA;&#xA;  self.router = [[DPLDeepLinkRouter alloc] init];&#xA;&#xA;  return YES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Register a route handler&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Objective-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;self.router[@&#34;/log/:message&#34;] = ^(DPLDeepLink *link) {&#xA;  NSLog(@&#34;%@&#34;, link.routeParameters[@&#34;message&#34;]);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.router.register(&#34;/log/:message&#34;) { link in&#xA;    if let link = link {&#xA;        print(&#34;\(link.routeParameters[&#34;message&#34;])&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. Pass incoming URLs to the router&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)application&#xA;            openURL:(NSURL *)url&#xA;  sourceApplication:(NSString *)sourceApplication&#xA;         annotation:(id)annotation {&#xA;&#xA;  return [self.router handleURL:url withCompletion:NULL];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. Passing &lt;code&gt;NSUserActivity&lt;/code&gt; objects to the router&lt;/strong&gt; (optional)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; If your application supports &lt;a href=&#34;https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_2&#34;&gt;Apple&#39;s new universal links&lt;/a&gt;, implement the following in your app delegate:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)application&#xA;        continueUserActivity:(NSUserActivity *)userActivity&#xA;          restorationHandler:(void (^)(NSArray *))restorationHandler {&#xA;&#xA;    return [self.router handleUserActivity:userActivity withCompletion:NULL];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more about the DeepLinkKit by reading our &lt;a href=&#34;https://github.com/button/DeepLinkKit/wiki/DeepLink-Kit-Integration-Guide&#34;&gt;Integration Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Route Registration Examples&lt;/h2&gt; &#xA;&lt;p&gt;URLs coming into your app will be in a similar format to the following: &lt;code&gt;&amp;lt;scheme&amp;gt;://&amp;lt;host&amp;gt;/&amp;lt;path-component&amp;gt;/&amp;lt;path-component&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;When registering routes, it&#39;s important to note that the first forward slash in your registered route determines the start of the path to be matched. A route component before the first forward slash will be considered to be the host.&lt;/p&gt; &#xA;&lt;p&gt;Say you have an incoming URL of &lt;code&gt;twitter://timeline&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;&#xA;// Matches the URL.&#xA;router[@&#34;timeline&#34;] = ^{ … }&#xA;&#xA;// Does not match the URL.&#xA;router[@&#34;/timeline&#34;] = ^{ … }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In another example, a URL of &lt;code&gt;twitter://dpl.com/timeline&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Matches the URL.&#xA;router[@&#34;/timeline&#34;] = ^{ … }&#xA;&#xA;// Does not match the URL.&#xA;router[@&#34;timeline&#34;] = ^{ … }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also be scheme specific. If you support multiple URL schemes in your app, you can register routes specific to those schemes as follows:&lt;/p&gt; &#xA;&lt;p&gt;An incoming URL of &lt;code&gt;scheme-one://timeline&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Matches the URL.&#xA;router[@&#34;scheme-one://timeline&#34;] = ^{ … }&#xA;&#xA;// Does not match the URL.&#xA;router[@&#34;scheme-two://timeline&#34;] = ^{ … }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Regex Route Matching&lt;/h3&gt; &#xA;&lt;p&gt;You can use regex in your route patterns as well to give you maximum flexibility.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Match any url&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The following will match all incoming urls&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;router[@&#34;.*&#34;] ^(DPLDeepLink *link){&#xA;  // This will match all incoming links&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Routes are matched in the order they&#39;re registered so registering this route first will prevent all other more specific routes from matching.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Match any url with a given scheme&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The following will match all incoming links with the scheme, &lt;code&gt;myscheme://&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;router[@&#34;myscheme://.*&#34;] ^(DPLDeepLink *link){&#xA;  // matches all urls with a scheme of `myscheme://`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can name your regex groups too&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The following will match any url with a &lt;code&gt;host&lt;/code&gt; of &lt;code&gt;trycaviar.com&lt;/code&gt; and hand you &lt;code&gt;:path&lt;/code&gt; in the route params.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Given the url ‘https://trycaviar.com/manhattan/nicoletta-297`&#xA;router[@&#34;trycaviar.com/:path(.*)&#34;] ^(DPLDeepLink *link){&#xA;  // `link[@&#34;path&#34;]` =&amp;gt; @&#34;manhattan/nicoletta-297&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Match multiple path components&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;In this example, you&#39;ll get &lt;code&gt;:city&lt;/code&gt; and &lt;code&gt;:restaurant&lt;/code&gt; in the route params.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Given the url ‘https://trycaviar.com/manhattan/nicoletta-297`&#xA;router[@&#34;trycaviar.com/:city([a-zA-Z]+)/:restaurant(.*)&#34;] ^(DPLDeepLink *link){&#xA;  // `link[@&#34;city&#34;]` =&amp;gt; @&#34;manhattan&#34;&#xA;  // `link[@&#34;restaurant&#34;]` =&amp;gt; @&#34;nicoletta-297&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;If the restaurant ids are numbers, you could limit your matches as follows.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Given the url ‘https://trycaviar.com/manhattan/297`&#xA;router[@&#34;trycaviar.com/:city([a-zA-Z]+)/:restaurant([0-9])&#34;] ^(DPLDeepLink *link){&#xA;  // `link[@&#34;city&#34;]` =&amp;gt; @&#34;manhattan&#34;&#xA;  // `link[@&#34;restaurant&#34;]` =&amp;gt; @&#34;297&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Name some groups and not others&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Lets say the url is ‘https://trycaviar.com/manhattan/pizza/nicoletta-297`&#xA;router[@&#34;trycaviar.com/:city([a-zA-Z]+)/[a-z]+/:restaurant(.*)&#34;] ^(DPLDeepLink *link){&#xA;  // `link[@&#34;city&#34;]` =&amp;gt; @&#34;manhattan&#34;&#xA;  // `link[@&#34;restaurant&#34;]` =&amp;gt; @&#34;nicoletta-297&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;The above would match ‘&lt;a href=&#34;https://trycaviar.com/manhattan/pizza/nicoletta-297%E2%80%99&#34;&gt;https://trycaviar.com/manhattan/pizza/nicoletta-297’&lt;/a&gt; but not ‘&lt;a href=&#34;https://trycaviar.com/manhattan/PIZZA/nicoletta-297%E2%80%99&#34;&gt;https://trycaviar.com/manhattan/PIZZA/nicoletta-297’&lt;/a&gt; or ‘&lt;a href=&#34;https://trycaviar.com/manhattan/pizza-places/nicoletta-297%E2%80%99&#34;&gt;https://trycaviar.com/manhattan/pizza-places/nicoletta-297’&lt;/a&gt;, etc&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;AppLinks Support&lt;/h2&gt; &#xA;&lt;p&gt;Does your app support AppLinks? You can easily handle incoming AppLinks by importing the AppLinks category &lt;code&gt;DPLDeepLink+AppLinks&lt;/code&gt;. The AppLinks category provides convenience accessors to all AppLinks 1.0 properties.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;router[@&#34;/timeline&#34;] = ^(DPLDeepLink *link) {&#xA;  NSURL *referrerURL  = link.referralURL;&#xA;  NSString *someValue = link.extras[@&#34;some-key&#34;];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the Demo&lt;/h2&gt; &#xA;&lt;p&gt;To run the example project, run &lt;code&gt;pod try DeepLinkKit&lt;/code&gt; in your terminal. You can also clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the project root. If you don&#39;t have CocoaPods, begin by &lt;a href=&#34;http://guides.cocoapods.org/using/getting-started.html&#34;&gt;follow this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are two demo apps, &lt;code&gt;SenderDemo&lt;/code&gt;, and &lt;code&gt;ReceiverDemo&lt;/code&gt;. &lt;code&gt;ReceiverDemo&lt;/code&gt; has some registered routes that will handle specific deep links. &lt;code&gt;SenderDemo&lt;/code&gt; has a couple actions that will deep link out to &lt;code&gt;ReceiverDemo&lt;/code&gt; for fulfillment.&lt;/p&gt; &#xA;&lt;p&gt;Run the&lt;code&gt;SenderDemo&lt;/code&gt; build scheme first, then stop the simulator and switch the build scheme to &lt;code&gt;ReceiverDemo&lt;/code&gt; and run again. Now you can switch back to the &lt;code&gt;SenderDemo&lt;/code&gt; app in the simulator and tap on one of the actions.&lt;/p&gt; &#xA;&lt;h2&gt;Creating Deep Links&lt;/h2&gt; &#xA;&lt;p&gt;You can also create deep links with &lt;code&gt;DPLMutableDeepLink&lt;/code&gt;. Between two &lt;code&gt;DeepLinkKit&lt;/code&gt; integrated apps, you can pass complex objects via deep link from one app to another app and easily get that object back on the other end.&lt;/p&gt; &#xA;&lt;p&gt;In the first app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;&#xA;DPLMutableDeepLink *link = [[DPLMutableDeepLink alloc] initWithString:@&#34;app-two://categories&#34;];&#xA;link[@&#34;brew-types&#34;] = @[@&#34;Ale&#34;, @&#34;Lager&#34;, @&#34;Stout&#34;, @&#34;Wheat&#34;]&#xA;link[@&#34;beers&#34;] = @{&#xA;  @&#34;ales&#34;: @[&#xA;    @{&#xA;        @&#34;name&#34;: @&#34;Southern Tier Pumking Ale&#34;,&#xA;        @&#34;price&#34;: @799&#xA;    },&#xA;    @{&#xA;        @&#34;name&#34;: @&#34;Sierra Nevada Celebration Ale&#34;,&#xA;        @&#34;price&#34;: @799&#xA;    }&#xA;  ],&#xA;  @&#34;lagers&#34;: @[&#xA;     ...&#xA;  ],&#xA;  ...&#xA;}&#xA;&#xA;[[UIApplication sharedApplication] openURL:link.URL];&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the second app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;router[@&#34;categories&#34;] = ^(DPLDeepLink *link) {&#xA;  NSArray *brewTypes  = link[@&#34;brew-types&#34;];&#xA;  NSDictionary *beers = link[@&#34;beers&#34;];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://twitter.com/ioswes&#34;&gt;Wes Smith&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://twitter.com/chrismaddern&#34;&gt;Chris Maddern&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;DeepLinkKit is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d love to see your ideas for improving this library. The best way to contribute is by submitting a pull request. We&#39;ll do our best to respond to you as soon as possible. You can also submit a new Github issue if you find bugs or have questions. &lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Please make sure to follow our general coding style and add test coverage for new features!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>card-io/card.io-iOS-SDK</title>
    <updated>2022-12-18T01:35:38Z</updated>
    <id>tag:github.com,2022-12-18:/card-io/card.io-iOS-SDK</id>
    <link href="https://github.com/card-io/card.io-iOS-SDK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;card.io provides fast, easy credit card scanning in mobile apps&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.card.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/card-io/card.io-iOS-source/master/Resources/cardio_logo_220.png&#34; alt=&#34;card.io logo&#34; title=&#34;card.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;card.io SDK for iOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.card.io/&#34;&gt;card.io&lt;/a&gt; provides fast, easy credit card scanning in mobile apps.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h4&gt;&lt;em&gt;NEW!!! card.io is now an open-source project!&lt;/em&gt;&lt;/h4&gt; &#xA; &lt;p&gt;As of December 2014, all of the source code for card.io is now available at the &lt;a href=&#34;https://github.com/card-io/card.io-iOS-source&#34;&gt;card.io-iOS-source repo&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;h5&gt;What does this mean for you?&lt;/h5&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;If you simply wish to integrate card.io into your mobile apps, then you can (and probably should) ignore the existence of &lt;a href=&#34;https://github.com/card-io/card.io-iOS-source&#34;&gt;card.io-iOS-source&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;But if you&#39;re curious about how card.io performs its magic, or if you&#39;d like to improve the appearance or behavior of card.io, then come visit &lt;a href=&#34;https://github.com/card-io/card.io-iOS-source&#34;&gt;card.io-iOS-source&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Brought to you by&lt;br&gt; &lt;a href=&#34;https://paypal.com/&#34; title=&#34;PayPal&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/card-io/card.io-iOS-source/master/Resources/pp_h_rgb.png&#34; alt=&#34;PayPal logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Stay up to date&lt;/h2&gt; &#xA;&lt;p&gt;Please keep your app up to date with the latest version of the SDK. All releases follow &lt;a href=&#34;http://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To receive updates about new versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/cardio&#34;&gt;@cardio&lt;/a&gt; (also great to send us feedback)&lt;/li&gt; &#xA; &lt;li&gt;Subscribe to our &lt;a href=&#34;https://groups.google.com/forum/#!forum/card-io-sdk-announce&#34;&gt;card-io-sdk-announce&lt;/a&gt; list&lt;/li&gt; &#xA; &lt;li&gt;&#34;Watch&#34; this GitHub repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find and start technical discussions using the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/card.io&#34;&gt;Stack Overflow card.io tag&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample app&lt;/h2&gt; &#xA;&lt;p&gt;For a quick first look at card.io, we have included a very small sample application that you can build and run.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version of the SDK.&lt;/li&gt; &#xA; &lt;li&gt;Simply open the &lt;code&gt;SampleApp&lt;/code&gt; folder or the &lt;code&gt;SampleApp-Swift&lt;/code&gt; folder and follow the instructions in the &lt;code&gt;README.md&lt;/code&gt; file you find there.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;The card.io iOS SDK includes header files and a single static library. We&#39;ll walk you through integration and usage.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The latest non-beta version of Xcode. (Older or newer versions &lt;em&gt;might&lt;/em&gt; also work.)&lt;/li&gt; &#xA; &lt;li&gt;Supports target deployment of iOS version 6.1+ and instruction set armv7+ (including 64-bit).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;h5&gt;If you use &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, then add this line to your podfile:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;CardIO&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;If you don&#39;t use CocoaPods, then:&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version of the SDK.&lt;/li&gt; &#xA; &lt;li&gt;Add the CardIO directory (containing several .h files, &lt;code&gt;libCardIO.a&lt;/code&gt;, &lt;code&gt;libopencv_core.a&lt;/code&gt;, and &lt;code&gt;libopencv_imgproc.a&lt;/code&gt;) to your Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;In your project&#39;s Build Settings (in the &lt;code&gt;TARGETS&lt;/code&gt; section, not the &lt;code&gt;PROJECTS&lt;/code&gt; section), add &lt;code&gt;-lc++&lt;/code&gt; to &lt;code&gt;Other Linker Flags&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Either:&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add these frameworks to your project. &lt;a href=&#34;http://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/cross_development/Configuring/configuring.html&#34;&gt;Weak linking&lt;/a&gt; is supported. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Accelerate&lt;/li&gt; &#xA;   &lt;li&gt;AudioToolbox&lt;/li&gt; &#xA;   &lt;li&gt;AVFoundation&lt;/li&gt; &#xA;   &lt;li&gt;CoreGraphics&lt;/li&gt; &#xA;   &lt;li&gt;CoreMedia&lt;/li&gt; &#xA;   &lt;li&gt;CoreVideo&lt;/li&gt; &#xA;   &lt;li&gt;Foundation&lt;/li&gt; &#xA;   &lt;li&gt;MobileCoreServices&lt;/li&gt; &#xA;   &lt;li&gt;OpenGLES&lt;/li&gt; &#xA;   &lt;li&gt;QuartzCore&lt;/li&gt; &#xA;   &lt;li&gt;Security&lt;/li&gt; &#xA;   &lt;li&gt;UIKit&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;em&gt;or:&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add only these frameworks to your project (as &lt;code&gt;Optional&lt;/code&gt; [i.e., weak-linked] libraries): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Accelerate&lt;/li&gt; &#xA;   &lt;li&gt;AVFoundation&lt;/li&gt; &#xA;   &lt;li&gt;AudioToolbox&lt;/li&gt; &#xA;   &lt;li&gt;CoreMedia&lt;/li&gt; &#xA;   &lt;li&gt;MobileCoreServices&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;and confirm that these two Build Settings are both enabled: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Enable Modules (C and Objective-C)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Link Frameworks Automatically&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;With or without CocoaPods:&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;a href=&#34;https://raw.githubusercontent.com/card-io/card.io-iOS-SDK/master/acknowledgments.md&#34;&gt;card.io&#39;s open source license acknowledgments&lt;/a&gt; to &lt;a href=&#34;http://stackoverflow.com/questions/3966116/where-to-put-open-source-credit-information-for-an-iphone-app&#34;&gt;your app&#39;s acknowledgments&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Refer to the header files for more usage options and information.&lt;/li&gt; &#xA; &lt;li&gt;You should add the key &lt;a href=&#34;https://developer.apple.com/library/prerelease/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW24&#34;&gt;&lt;code&gt;NSCameraUsageDescription&lt;/code&gt;&lt;/a&gt; to your app&#39;s &lt;code&gt;Info.plist&lt;/code&gt; and set the value to be a string describing why your app needs to use the camera (e.g. &#34;To scan credit cards.&#34;). This string will be displayed when the app initially requests permission to access the camera.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Sample code&lt;/h3&gt; &#xA;&lt;p&gt;You can use card.io in two ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;As a view controller&lt;/strong&gt;: &lt;em&gt;Quick and easy.&lt;/em&gt; Create a &lt;code&gt;CardIOPaymentViewController&lt;/code&gt; and present it modally. The card.io view controller handles all aspects of the UX, including manual entry as a fallback, all transitions, and number confirmation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;As a view&lt;/strong&gt;: &lt;em&gt;More flexible.&lt;/em&gt; Create a &lt;code&gt;CardIOView&lt;/code&gt; to do card scanning only and manage everything else yourself. This enables a broader range of presentations, such as in-place transitions, but requires that you handle the rest of the UI yourself.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Integrate as a View Controller&lt;/h4&gt; &#xA;&lt;p&gt;Create a class (most likely a subclass of &lt;code&gt;UIViewController&lt;/code&gt;) that conforms to &lt;code&gt;CardIOPaymentViewControllerDelegate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.h&#xA;&#xA;#import &#34;CardIO.h&#34;&#xA;@interface SomeViewController : UIViewController&amp;lt;CardIOPaymentViewControllerDelegate&amp;gt;&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make an optional call to speed up the subsequent launch of card.io scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)viewWillAppear:(BOOL)animated {&#xA;  [super viewWillAppear:animated];&#xA;  [CardIOUtilities preloadCardIO];&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start card.io card scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (IBAction)scanCard:(id)sender {&#xA;  CardIOPaymentViewController *scanViewController = [[CardIOPaymentViewController alloc] initWithPaymentDelegate:self];&#xA;  [self presentViewController:scanViewController animated:YES completion:nil];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write delegate methods to receive the card info or a cancellation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)userDidCancelPaymentViewController:(CardIOPaymentViewController *)scanViewController {&#xA;  NSLog(@&#34;User canceled payment info&#34;);&#xA;  // Handle user cancellation here...&#xA;  [scanViewController dismissViewControllerAnimated:YES completion:nil];&#xA;}&#xA;&#xA;- (void)userDidProvideCreditCardInfo:(CardIOCreditCardInfo *)info inPaymentViewController:(CardIOPaymentViewController *)scanViewController {&#xA;  // The full card number is available as info.cardNumber, but don&#39;t log that!&#xA;  NSLog(@&#34;Received card info. Number: %@, expiry: %02i/%i, cvv: %@.&#34;, info.redactedCardNumber, info.expiryMonth, info.expiryYear, info.cvv);&#xA;  // Use the card info...&#xA;  [scanViewController dismissViewControllerAnimated:YES completion:nil];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Integrate as a View&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;CardIOView is new as of card.io Version 3.3.0 (September 2013). We look forward to seeing how creative developers integrate it into their apps. If you do something cool with it, share it with &lt;a href=&#34;https://twitter.com/cardio&#34;&gt;@cardio&lt;/a&gt;! We also look forward to quickly resolving any issues that you may discover.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a class (most likely a subclass of &lt;code&gt;UIViewController&lt;/code&gt;) that conforms to &lt;code&gt;CardIOViewDelegate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.h&#xA;&#xA;#import &#34;CardIO.h&#34;&#xA;@interface SomeViewController : UIViewController&amp;lt;CardIOViewDelegate&amp;gt;&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using a CardIOView provides UI flexibility. Here are two sample integration options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a CardIOView when you need it, and then delete it when its work is finished.&lt;/li&gt; &#xA; &lt;li&gt;Include a hidden CardIOView in your view, show it when you need it, and then hide it when its work is finished.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Option 1: Create a CardIOView when you need it&lt;/h5&gt; &#xA;&lt;p&gt;Confirm that the user&#39;s device is capable of scanning cards:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)viewDidLoad {&#xA;  [super viewDidLoad];&#xA;&#xA;  if (![CardIOUtilities canReadCardWithCamera]) {&#xA;    // Hide your &#34;Scan Card&#34; button, or take other appropriate action...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make an optional call to speed up the subsequent launch of card.io scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)viewWillAppear:(BOOL)animated {&#xA;  [super viewWillAppear:animated];&#xA;  [CardIOUtilities preloadCardIO];&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start card.io card scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (IBAction)scanCard:(id)sender {&#xA;  CardIOView *cardIOView = [[CardIOView alloc] initWithFrame:CGRECT_WITHIN_YOUR_VIEW];&#xA;  cardIOView.delegate = self;&#xA;  &#xA;  [self.view addSubview:cardIOView];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write the delegate method to receive the results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)cardIOView:(CardIOView *)cardIOView didScanCard:(CardIOCreditCardInfo *)info {&#xA;    if (info) {&#xA;    // The full card number is available as info.cardNumber, but don&#39;t log that!&#xA;    NSLog(@&#34;Received card info. Number: %@, expiry: %02i/%i, cvv: %@.&#34;, info.redactedCardNumber, info.expiryMonth, info.expiryYear, info.cvv);&#xA;    // Use the card info...&#xA;  }&#xA;  else {&#xA;    NSLog(@&#34;User cancelled payment info&#34;);&#xA;    // Handle user cancellation here...&#xA;  }&#xA;  &#xA;  [cardIOView removeFromSuperview];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Include a method to cancel card scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (IBAction)cancelScanCard:(id)sender {&#xA;  [cardIOView removeFromSuperview];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Option 2: Include a hidden CardIOView in your view&lt;/h5&gt; &#xA;&lt;p&gt;Make an IBOutlet property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;@interface SomeViewController ()&#xA;@property(nonatomic, strong, readwrite) IBOutlet CardIOView *cardIOView;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your .xib, include a CardIOView, mark it as &lt;code&gt;hidden&lt;/code&gt;, and connect it to the IBOutlet property. (Note: usually you will want to set the background color of the CardIOView to &lt;code&gt;clearColor&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;After confirming that the user&#39;s device is capable of scanning cards, set the &lt;code&gt;delegate&lt;/code&gt; property of the CardIOView:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)viewDidLoad {&#xA;  [super viewDidLoad];&#xA;&#xA;  if (![CardIOUtilities canReadCardWithCamera]) {&#xA;    // Hide your &#34;Scan Card&#34; button, remove the CardIOView from your view, and/or take other appropriate action...&#xA;  } else {&#xA;    self.cardIOView.delegate = self;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make an optional call to speed up the subsequent launch of card.io scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)viewWillAppear:(BOOL)animated {&#xA;  [super viewWillAppear:animated];&#xA;  [CardIOUtilities preloadCardIO];&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start card.io card scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (IBAction)scanCard:(id)sender {&#xA;  self.cardIOView.hidden = NO;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write the delegate method to receive the results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (void)cardIOView:(CardIOView *)cardIOView didScanCard:(CardIOCreditCardInfo *)info {&#xA;    if (info) {&#xA;    // The full card number is available as info.cardNumber, but don&#39;t log that!&#xA;    NSLog(@&#34;Received card info. Number: %@, expiry: %02i/%i, cvv: %@.&#34;, info.redactedCardNumber, info.expiryMonth, info.expiryYear, info.cvv);&#xA;    // Use the card info...&#xA;  }&#xA;  else {&#xA;    NSLog(@&#34;User canceled payment info&#34;);&#xA;    // Handle user cancellation here...&#xA;  }&#xA;&#xA;  cardIOView.hidden = YES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Include a method to cancel card scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// SomeViewController.m&#xA;&#xA;- (IBAction)cancelScanCard:(id)sender {&#xA;  self.cardIOView.hidden = YES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hints &amp;amp; Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Processing images can be memory intensive, so make sure to test that your app properly handles memory warnings.&lt;/li&gt; &#xA; &lt;li&gt;For your users&#39; security, &lt;a href=&#34;https://viaforensics.com/resources/reports/best-practices-ios-android-secure-mobile-development/ios-avoid-cached-application-snapshots/&#34;&gt;obscure your app&#39;s cached screenshots&lt;/a&gt;.&lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; By default, a &lt;code&gt;CardIOPaymentViewController&lt;/code&gt; automatically blurs its own screens when the app is backgrounded. A &lt;code&gt;CardIOView&lt;/code&gt; does not do any automatic blurring.&lt;/li&gt; &#xA; &lt;li&gt;The first time that you create either a &lt;code&gt;CardIOPaymentViewController&lt;/code&gt; or a &lt;code&gt;CardIOView&lt;/code&gt;, the card.io SDK must load resources, which can result in a noticeable delay. To avoid this delay you may optionally call &lt;code&gt;[CardIOUtilities preloadCardIO]&lt;/code&gt; in advance, so that this resource loading occurs in advance on a background thread.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hamcrest/OCHamcrest</title>
    <updated>2022-12-18T01:35:38Z</updated>
    <id>tag:github.com,2022-12-18:/hamcrest/OCHamcrest</id>
    <link href="https://github.com/hamcrest/OCHamcrest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hamcrest for Objective-C: Powerful, combinable, extensible matchers for verification&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;http://hamcrest.org/images/logo.jpg&#34; alt=&#34;ochamcrest&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;OCHamcrest&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hamcrest/OCHamcrest/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/hamcrest/OCHamcrest/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/hamcrest/OCHamcrest&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/hamcrest/OCHamcrest/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/hamcrest/OCHamcrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fhamcrest%2FOCHamcrest%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;Swift Package Index Platform Compatibility&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/OCHamcrest&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/v/OCHamcrest/badge.png&#34; alt=&#34;Cocoapods Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/qcoding&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/qcoding.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OCHamcrest is an Objective-C module providing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a library of &#34;matcher&#34; objects for declaring rules to check whether a given object matches those rules.&lt;/li&gt; &#xA; &lt;li&gt;a framework for writing your own matchers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Matchers can be combined to create flexible expressions of intent in tests. They can also be used for other purposes, such as user input validation.&lt;/p&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#my-first-ochamcrest-test&#34;&gt;My First OCHamcrest Test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#predefined-matchers&#34;&gt;Predefined Matchers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#object&#34;&gt;Object&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#number&#34;&gt;Number&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#text&#34;&gt;Text&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#logical&#34;&gt;Logical&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#collection&#34;&gt;Collection&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#decorator&#34;&gt;Decorator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#syntactic-sugar&#34;&gt;Syntactic Sugar&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#common-questions&#34;&gt;Common Questions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#how-can-i-assert-on-an-asynchronous-call&#34;&gt;How Can I Assert on an Asynchronous Call?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#can-i-add-custom-matchers&#34;&gt;Can I Add Custom Matchers?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#what-about-swift&#34;&gt;What About Swift?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#how-do-i-add-ochamcrest-to-my-project&#34;&gt;How Do I Add OCHamcrest to My Project?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#cocoapods&#34;&gt;CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#prebuilt-framework&#34;&gt;Prebuilt Framework&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#build-your-own&#34;&gt;Build Your Own&lt;/a&gt;&#xA;    &lt;!-- endToc --&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;My First OCHamcrest Test&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ll start by writing a very simple Xcode unit test, but instead of using XCTest&#39;s &lt;code&gt;XCTAssertEqualObjects&lt;/code&gt; function, we&#39;ll use OCHamcrest&#39;s &lt;code&gt;assertThat&lt;/code&gt; construct and a predefined matcher:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;@import OCHamcrest;&#xA;@import XCTest;&#xA;&#xA;@interface BiscuitTest : XCTestCase&#xA;@end&#xA;&#xA;@implementation BiscuitTest&#xA;&#xA;- (void)testEquals&#xA;{&#xA;    Biscuit* theBiscuit = [[Biscuit alloc] initWithName:@&#34;Ginger&#34;];&#xA;    Biscuit* myBiscuit = [[Biscuit alloc] initWithName:@&#34;Ginger&#34;];&#xA;    assertThat(theBiscuit, equalTo(myBiscuit));&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;assertThat&lt;/code&gt; function is a stylized sentence for making a test assertion. In this example, the subject of the assertion is the object &lt;code&gt;theBiscuit&lt;/code&gt;, which is the first method parameter. The second method parameter is a matcher for &lt;code&gt;Biscuit&lt;/code&gt; objects, here a matcher that checks one object is equal to another using the &lt;code&gt;-isEqual:&lt;/code&gt; method. The test passes since the &lt;code&gt;Biscuit&lt;/code&gt; class defines an &lt;code&gt;-isEqual:&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;OCHamcrest&#39;s functions are actually declared with an &#34;HC_&#34; package prefix (such as &lt;code&gt;HC_assertThat&lt;/code&gt; and &lt;code&gt;HC_equalTo&lt;/code&gt;) to avoid name clashes. To make test writing faster and test code more legible, optional short syntax is provided by default. For example, instead of writing &lt;code&gt;HC_assertThat&lt;/code&gt;, simply write &lt;code&gt;assertThat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Predefined Matchers&lt;/h2&gt; &#xA;&lt;p&gt;OCHamcrest comes with a library of useful matchers:&lt;/p&gt; &#xA;&lt;h3&gt;Object&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;conformsTo&lt;/code&gt; - match object that conforms to protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;equalTo&lt;/code&gt; - match equal object&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hasDescription&lt;/code&gt; - match object&#39;s &lt;code&gt;-description&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hasProperty&lt;/code&gt; - match return value of method with given name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;instanceOf&lt;/code&gt; - match object type&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isA&lt;/code&gt; - match object type precisely, no subclasses&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nilValue&lt;/code&gt;, &lt;code&gt;notNilValue&lt;/code&gt; - match &lt;code&gt;nil&lt;/code&gt;, or not &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sameInstance&lt;/code&gt; - match same object&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;throwsException&lt;/code&gt; - match block that throws an exception&lt;/li&gt; &#xA; &lt;li&gt;HCArgumentCaptor - match anything, capturing all values&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Number&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;closeTo&lt;/code&gt; - match number close to a given value&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;greaterThan&lt;/code&gt;, &lt;code&gt;greaterThanOrEqualTo&lt;/code&gt;, &lt;code&gt;lessThan&lt;/code&gt;, &lt;code&gt;lessThanOrEqualTo&lt;/code&gt; - match numeric ordering&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isFalse&lt;/code&gt; - match zero&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isTrue&lt;/code&gt; - match non-zero&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Text&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;containsSubstring&lt;/code&gt; - match part of a string&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;endsWith&lt;/code&gt; - match the end of a string&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;equalToIgnoringCase&lt;/code&gt; - match the complete string but ignore case&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;equalToIgnoringWhitespace&lt;/code&gt; - match the complete string but ignore extra whitespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;startsWith&lt;/code&gt; - match the beginning of a string&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stringContainsInOrder&lt;/code&gt;, &lt;code&gt;stringContainsInOrderIn&lt;/code&gt; - match parts of a string, in relative order&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Logical&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;allOf&lt;/code&gt;, &lt;code&gt;allOfIn&lt;/code&gt; - &#34;and&#34; together all matchers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;anyOf&lt;/code&gt;, &lt;code&gt;anyOfIn&lt;/code&gt; - &#34;or&#34; together all matchers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;anything&lt;/code&gt; - match anything (useful in composite matchers when you don&#39;t care about a particular value)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isNot&lt;/code&gt; - negate the matcher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Collection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;containsIn&lt;/code&gt; - exactly match the entire collection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;containsInAnyOrder&lt;/code&gt;, &lt;code&gt;containsInAnyOrderIn&lt;/code&gt; - match the entire collection, but in any order&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;containsInRelativeOrder&lt;/code&gt;, &lt;code&gt;containsInRelativeOrderIn&lt;/code&gt; - match collection containing items in relative order&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;everyItem&lt;/code&gt; - match if every item in a collection satisfies a given matcher&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hasCount&lt;/code&gt; - match number of elements against another matcher&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hasCountOf&lt;/code&gt; - match collection with given number of elements&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hasEntries&lt;/code&gt; - match dictionary with key-value pairs in a dictionary&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hasEntriesIn&lt;/code&gt; - match dictionary with key-value pairs in a list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hasEntry&lt;/code&gt; - match dictionary containing a key-value pair&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hasItem&lt;/code&gt; - match if given item appears in the collection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hasItems&lt;/code&gt;, &lt;code&gt;hasItemsIn&lt;/code&gt; - match if all given items appear in the collection, in any order&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hasKey&lt;/code&gt; - match dictionary with a key&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hasValue&lt;/code&gt; - match dictionary with a value&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isEmpty&lt;/code&gt; - match empty collection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isIn&lt;/code&gt; - match when object is in given collection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;onlyContains&lt;/code&gt;, &lt;code&gt;onlyContainsIn&lt;/code&gt; - match if collection&#39;s items appear in given list&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Decorator&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;describedAs&lt;/code&gt; - give the matcher a custom failure description&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;is&lt;/code&gt; - decorator to improve readability - see &#34;Syntactic sugar&#34; below&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The arguments for many of these matchers accept not just a matching value, but another matcher, so matchers can be composed for greater flexibility. For example, &lt;code&gt;only_contains(endsWith(@&#34;.&#34;))&lt;/code&gt; will match any collection where every item is a string ending with period.&lt;/p&gt; &#xA;&lt;h3&gt;Syntactic Sugar&lt;/h3&gt; &#xA;&lt;p&gt;OCHamcrest strives to make your tests as readable as possible. For example, the &lt;code&gt;is&lt;/code&gt; matcher is a wrapper that doesn&#39;t add any extra behavior to the underlying matcher. The following assertions are all equivalent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;assertThat(theBiscuit, equalTo(myBiscuit));&#xA;assertThat(theBiscuit, is(equalTo(myBiscuit)));&#xA;assertThat(theBiscuit, is(myBiscuit));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The last form is allowed since &lt;code&gt;is&lt;/code&gt; wraps non-matcher arguments with &lt;code&gt;equalTo&lt;/code&gt;. Other matchers that take matchers as arguments provide similar shortcuts, wrapping non-matcher arguments in &lt;code&gt;equalTo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Common Questions&lt;/h2&gt; &#xA;&lt;h3&gt;How Can I Assert on an Asynchronous Call?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;assertWithTimeout&lt;/code&gt; will keep evaluating an expression until the matcher is satisfied or a timeout is reached. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;assertWithTimeout(5, thatEventually(self.someString), is(@&#34;expected&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This repeatedly checks for this string to evaluate to &#34;expected&#34; before timing out after 5 seconds. &lt;code&gt;thatEventually&lt;/code&gt; is a convenience macro to create a block.&lt;/p&gt; &#xA;&lt;h3&gt;Can I Add Custom Matchers?&lt;/h3&gt; &#xA;&lt;p&gt;OCHamcrest comes bundled with lots of useful matchers, but you&#39;ll probably find that you need to create your own from time to time to fit your testing needs. See the &lt;a href=&#34;https://github.com/hamcrest/OCHamcrest/wiki/Writing-Custom-Matchers&#34;&gt;&#34;Writing Custom Matchers&#34; guide for more information&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What About Swift?&lt;/h3&gt; &#xA;&lt;p&gt;Try the &lt;a href=&#34;https://github.com/nschum/SwiftHamcrest&#34;&gt;native Swift implementation of Hamcrest&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How Do I Add OCHamcrest to My Project?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/hamcrest/OCHamcrest/tree/main/Examples&#34;&gt;Examples&lt;/a&gt; folder shows projects ready to use OCHamcrest via Swift Package Manager, CocoaPods, or through the prebuilt framework.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Include an OCHamcrest package in your Package.swift manifest&#39;s array of &lt;code&gt;dependencies&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;!-- snippet: swiftpm-declare-dependencies --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-swiftpm-declare-dependencies&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(&#xA;        url: &#34;https://github.com/hamcrest/OCHamcrest&#34;,&#xA;        .upToNextMajor(from: &#34;9.0.0&#34;)&#xA;    ),&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/Examples/MacExample-SwiftPackageManager/Package.swift#L13-L20&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#snippet-swiftpm-declare-dependencies&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;Then add OCHamcrest to the dependencies of your &lt;code&gt;.testTarget&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;!-- snippet: swiftpm-use-dependencies --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-swiftpm-use-dependencies&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.testTarget(&#xA;    name: &#34;ExampleTests&#34;,&#xA;    dependencies: [&#xA;        &#34;Example&#34;,&#xA;        &#34;OCHamcrest&#34;,&#xA;    ]&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/Examples/MacExample-SwiftPackageManager/Package.swift#L27-L35&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hamcrest/OCHamcrest/main/#snippet-swiftpm-use-dependencies&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;If you want to add OCHamcrest using Cocoapods then add the following dependency to your Podfile. Most people will want OCHamcrest in their test targets, and not include any pods from their main targets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target &#39;MyTests&#39; do&#xA;  inherit! :search_paths&#xA;  use_frameworks!&#xA;  pod &#39;OCHamcrest&#39;, &#39;~&amp;gt; 9.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;hamcrest/OCHamcrest&#34; ~&amp;gt; 9.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then drag the the built framework from the appropriate Carthage/Build directory into your project, but with &#34;Copy items into destination group&#39;s folder&#34; disabled.&lt;/p&gt; &#xA;&lt;h3&gt;Prebuilt Framework&lt;/h3&gt; &#xA;&lt;p&gt;A prebuilt binary is available on &lt;a href=&#34;https://github.com/hamcrest/OCHamcrest/releases/&#34;&gt;GitHub&lt;/a&gt;. The binary is packaged as OCHamcrest.xcframework, containing these architectures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS&lt;/li&gt; &#xA; &lt;li&gt;Mac Catalyst&lt;/li&gt; &#xA; &lt;li&gt;iOS device&lt;/li&gt; &#xA; &lt;li&gt;iOS simulator&lt;/li&gt; &#xA; &lt;li&gt;tvOS device&lt;/li&gt; &#xA; &lt;li&gt;tvOS simulator&lt;/li&gt; &#xA; &lt;li&gt;watchOS device&lt;/li&gt; &#xA; &lt;li&gt;watchOS simulator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Drag the XCFramework into your project.&lt;/p&gt; &#xA;&lt;h3&gt;Build Your Own&lt;/h3&gt; &#xA;&lt;p&gt;If you want to build OCHamcrest yourself, clone the repo, then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd Source&#xA;$ ./MakeDistribution.sh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>