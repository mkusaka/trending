<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-22T01:35:31Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RepairShopr/react-native-signature-capture</title>
    <updated>2024-07-22T01:35:31Z</updated>
    <id>tag:github.com,2024-07-22:/RepairShopr/react-native-signature-capture</id>
    <link href="https://github.com/RepairShopr/react-native-signature-capture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple modular component for react native (iOS) to capture a signature as an image&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-native-signature-capture&lt;/h1&gt; &#xA;&lt;h2&gt;About this&lt;/h2&gt; &#xA;&lt;p&gt;React Native library for capturing signature&lt;/p&gt; &#xA;&lt;p&gt;User would sign on the app and when you press the save button it returns the base64 encoded png&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;img src=&#34;http://i.giphy.com/3oEduIyWb48Ws3bSuc.gif&#34;&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;img src=&#34;http://i.giphy.com/xT0GUKJFFkdDv25FNC.gif&#34;&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome and are greatly appreciated! Every little bit helps, and credit will always be given. Please read our &lt;a href=&#34;https://github.com/RepairShopr/react-native-signature-capture/wiki/Pull-Request-Guidelines&#34;&gt;Pull request guidelines&lt;/a&gt; before submitting your PR&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;First you need to install react-native-signature-capture:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install react-native-signature-capture --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Second you need to link react-native-signature-capture:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;react-native link react-native-signature-capture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use above &lt;code&gt;react-native link&lt;/code&gt; command to automatically complete the installation, or link manually like so:&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the XCode&#39;s &#34;Project navigator&#34;, right click on your project&#39;s Libraries folder ➜ Add Files to &amp;lt;...&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to node_modules ➜ react-native-signature-capture ➜ ios ➜ select RSSignatureCapture.xcodeproj&lt;/li&gt; &#xA; &lt;li&gt;Add libRSSignatureCapture.a to Build Phases -&amp;gt; Link Binary With Libraries&lt;/li&gt; &#xA; &lt;li&gt;Compile and have fun&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Add these lines in your file: android/settings.gradle&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;...&#xA;&#xA;include &#39;:reactnativesignaturecapture&#39;,&#39;:app&#39;&#xA;project(&#39;:reactnativesignaturecapture&#39;).projectDir = new File(settingsDir, &#39;../node_modules/react-native-signature-capture/android&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add line in your file: android/app/build.gradle&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;...&#xA;&#xA;dependencies {&#xA;    ...&#xA;    compile project(&#39;:reactnativesignaturecapture&#39;) // &amp;lt;-- add this line&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add import and line in your file: android/app/src/main/java/&amp;lt;...&amp;gt;/MainApplication.java&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;...&#xA;&#xA;import com.rssignaturecapture.RSSignatureCapturePackage; // &amp;lt;-- add this import&#xA;&#xA;public class MainApplication extends Application implements ReactApplication {&#xA;&#xA;    private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {&#xA;&#xA;        @Override&#xA;        protected List&amp;lt;ReactPackage&amp;gt; getPackages() {&#xA;            return Arrays.&amp;lt;ReactPackage&amp;gt;asList(&#xA;                new MainReactPackage(),&#xA;                new RSSignatureCapturePackage() // &amp;lt;-- add this line&#xA;            );&#xA;        }&#xA;  }&#xA;&#xA;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Then you can use SignatureCapture component in your react-native&#39;s App, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;...&#xA;import React, {Component} from &#39;react&#39;;&#xA;import SignatureCapture from &#39;react-native-signature-capture&#39;;&#xA;&#xA;class CustomComponent extends Component {&#xA;&#xA;  ...&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;SignatureCapture&#xA;        {...someProps}&#xA;      /&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Properties&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;saveImageFileInExtStorage&lt;/strong&gt; : Make this props true, if you want to save the image file in external storage. Default is false. Warning: Image file will be visible in gallery or any other image browsing app&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;showBorder&lt;/strong&gt; : If this props is made to false, it will hide the dashed border (the border is shown on iOS only).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;showNativeButtons&lt;/strong&gt; : If this props is made to true, it will display the native buttons &#34;Save&#34; and &#34;Reset&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;showTitleLabel&lt;/strong&gt; : If this props is made to true, it will display the &#34;x_ _ _ _ _ _ _ _ _ _ _&#34; placeholder indicating where to sign.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;viewMode&lt;/strong&gt; : &#34;portrait&#34; or &#34;landscape&#34; change the screen orientation based on boolean value&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;maxSize&lt;/strong&gt; : sets the max size of the image maintains aspect ratio, default is 500&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;minStrokeWidth&lt;/strong&gt; : sets the min stroke line width (&lt;em&gt;Android only&lt;/em&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;maxStrokeWidth&lt;/strong&gt; : sets the max stroke line width (&lt;em&gt;Android only&lt;/em&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;backgroundColor&lt;/strong&gt;: Sets the background color of the component. Defaults to white. May be &#39;transparent&#39;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;strokeColor&lt;/strong&gt;: Sets the color of the signature. Defaults to black.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;saveImage()&lt;/strong&gt; : when called it will save the image and returns the base 64 encoded string on onSaveEvent() callback&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;resetImage()&lt;/strong&gt; : when called it will clear the image on the canvas&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Callback Props&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;onSaveEvent&lt;/strong&gt; : Triggered when saveImage() is called, which return Base64 Encoded String and image file path.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;onDragEvent&lt;/strong&gt; : Triggered when user marks his signature on the canvas. This will not be called when the user does not perform any action on canvas.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**&#xA; * Sample React Native App&#xA; * https://github.com/facebook/react-native&#xA; */&#xA;&#xA;var React = require(&#39;react&#39;);&#xA;var ReactNative = require(&#39;react-native&#39;);&#xA;&#xA;var {Component} = React;&#xA;&#xA;var {&#xA;    AppRegistry,&#xA;    StyleSheet,&#xA;    Text,&#xA;    View, TouchableHighlight&#xA;} = ReactNative;&#xA;&#xA;import SignatureCapture from &#39;react-native-signature-capture&#39;;&#xA;&#xA;class RNSignatureExample extends Component {&#xA;    render() {&#xA;        return (&#xA;            &amp;lt;View style={{ flex: 1, flexDirection: &#34;column&#34; }}&amp;gt;&#xA;                &amp;lt;Text style={{alignItems:&#34;center&#34;,justifyContent:&#34;center&#34;}}&amp;gt;Signature Capture Extended &amp;lt;/Text&amp;gt;&#xA;                &amp;lt;SignatureCapture&#xA;                    style={[{flex:1},styles.signature]}&#xA;                    ref=&#34;sign&#34;&#xA;                    onSaveEvent={this._onSaveEvent}&#xA;                    onDragEvent={this._onDragEvent}&#xA;                    saveImageFileInExtStorage={false}&#xA;                    showNativeButtons={false}&#xA;                    showTitleLabel={false}&#xA;                    backgroundColor=&#34;#ff00ff&#34;&#xA;                    strokeColor=&#34;#ffffff&#34;&#xA;                    minStrokeWidth={4}&#xA;                    maxStrokeWidth={4}&#xA;                    viewMode={&#34;portrait&#34;}/&amp;gt;&#xA;&#xA;                &amp;lt;View style={{ flex: 1, flexDirection: &#34;row&#34; }}&amp;gt;&#xA;                    &amp;lt;TouchableHighlight style={styles.buttonStyle}&#xA;                        onPress={() =&amp;gt; { this.saveSign() } } &amp;gt;&#xA;                        &amp;lt;Text&amp;gt;Save&amp;lt;/Text&amp;gt;&#xA;                    &amp;lt;/TouchableHighlight&amp;gt;&#xA;&#xA;                    &amp;lt;TouchableHighlight style={styles.buttonStyle}&#xA;                        onPress={() =&amp;gt; { this.resetSign() } } &amp;gt;&#xA;                        &amp;lt;Text&amp;gt;Reset&amp;lt;/Text&amp;gt;&#xA;                    &amp;lt;/TouchableHighlight&amp;gt;&#xA;&#xA;                &amp;lt;/View&amp;gt;&#xA;&#xA;            &amp;lt;/View&amp;gt;&#xA;        );&#xA;    }&#xA;&#xA;    saveSign() {&#xA;        this.refs[&#34;sign&#34;].saveImage();&#xA;    }&#xA;&#xA;    resetSign() {&#xA;        this.refs[&#34;sign&#34;].resetImage();&#xA;    }&#xA;&#xA;    _onSaveEvent(result) {&#xA;        //result.encoded - for the base64 encoded png&#xA;        //result.pathName - for the file path name&#xA;        console.log(result);&#xA;    }&#xA;    _onDragEvent() {&#xA;         // This callback will be called when the user enters signature&#xA;        console.log(&#34;dragged&#34;);&#xA;    }&#xA;}&#xA;&#xA;const styles = StyleSheet.create({&#xA;    signature: {&#xA;        flex: 1,&#xA;        borderColor: &#39;#000033&#39;,&#xA;        borderWidth: 1,&#xA;    },&#xA;    buttonStyle: {&#xA;        flex: 1, justifyContent: &#34;center&#34;, alignItems: &#34;center&#34;, height: 50,&#xA;        backgroundColor: &#34;#eeeeee&#34;,&#xA;        margin: 10&#xA;    }&#xA;});&#xA;&#xA;AppRegistry.registerComponent(&#39;RNSignatureExample&#39;, () =&amp;gt; RNSignatureExample);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Please checkout the example folder (iOS/Android): &lt;a href=&#34;https://github.com/RepairShopr/react-native-signature-capture/tree/master/Example&#34;&gt;https://github.com/RepairShopr/react-native-signature-capture/tree/master/Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Library used:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jharwig/PPSSignatureView&#34;&gt;https://github.com/jharwig/PPSSignatureView&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gcacace/android-signaturepad&#34;&gt;https://github.com/gcacace/android-signaturepad&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>