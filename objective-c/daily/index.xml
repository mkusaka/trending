<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-31T01:48:04Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PureLayout/PureLayout</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/PureLayout/PureLayout</id>
    <link href="https://github.com/PureLayout/PureLayout" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ultimate API for iOS &amp; OS X Auto Layout — impressively simple, immensely powerful. Objective-C and Swift compatible.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#&#34;&gt;&lt;img src=&#34;https://github.com/PureLayout/PureLayout/raw/master/Images/PureLayout.png?raw=true&#34; alt=&#34;PureLayout&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/PureLayout/PureLayout&#34;&gt;&lt;img src=&#34;https://travis-ci.org/PureLayout/PureLayout.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/PureLayout&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/PureLayout.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/PureLayout&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/PureLayout.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/l/PureLayout.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The ultimate API for iOS &amp;amp; OS X Auto Layout — impressively simple, immensely powerful. PureLayout extends &lt;code&gt;UIView&lt;/code&gt;/&lt;code&gt;NSView&lt;/code&gt;, &lt;code&gt;NSArray&lt;/code&gt;, and &lt;code&gt;NSLayoutConstraint&lt;/code&gt; with a comprehensive Auto Layout API that is modeled after Apple&#39;s own frameworks. PureLayout is a cross-platform Objective-C library that works (and looks!) great in Swift. It is fully backwards-compatible with all versions of iOS and OS X that support Auto Layout.&lt;/p&gt; &#xA;&lt;p&gt;Writing Auto Layout code from scratch isn&#39;t easy. PureLayout provides a fully capable and developer-friendly interface for Auto Layout. It is designed for clarity and simplicity, and takes inspiration from the AutoLayout UI options available in Interface Builder while delivering far more flexibility. The API is also highly efficient, as it adds only a thin layer of third party code and is engineered for maximum performance.&lt;/p&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#api-cheat-sheet&#34;&gt;API Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#sample-code-swift&#34;&gt;Sample Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#example-apps&#34;&gt;Example Apps&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#purelayout-vs-the-rest&#34;&gt;PureLayout vs. the rest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/#problems-suggestions-pull-requests&#34;&gt;Problems, Suggestions, Pull Requests?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;The current release of PureLayout supports all versions of iOS and OS X since the introduction of Auto Layout on each platform, in both Swift and Objective-C, with a single codebase!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Language Support: &lt;strong&gt;Swift&lt;/strong&gt; &lt;em&gt;(any version)&lt;/em&gt;, &lt;strong&gt;Objective-C&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Fully Compatible With: &lt;strong&gt;Xcode 7.0&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Minimum Supported Version: &lt;strong&gt;Xcode 5.0&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;iOS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fully Compatible With: &lt;strong&gt;iOS 9.0&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Minimum Deployment Target: &lt;strong&gt;iOS 6.0&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;OS X &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fully Compatible With: &lt;strong&gt;OS X 10.11&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Minimum Deployment Target: &lt;strong&gt;OS X 10.7&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the pod &lt;code&gt;PureLayout&lt;/code&gt; to your &lt;a href=&#34;http://guides.cocoapods.org/using/the-podfile.html&#34;&gt;Podfile&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;PureLayout&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; from Terminal, then open your app&#39;s &lt;code&gt;.xcworkspace&lt;/code&gt; file to launch Xcode.&lt;/li&gt; &#xA; &lt;li&gt;Import the &lt;code&gt;PureLayout.h&lt;/code&gt; umbrella header.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With &lt;code&gt;use_frameworks!&lt;/code&gt; in your Podfile &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Swift: &lt;code&gt;import PureLayout&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Objective-C: &lt;code&gt;#import &amp;lt;PureLayout/PureLayout.h&amp;gt;&lt;/code&gt; (or with Modules enabled: &lt;code&gt;@import PureLayout;&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Without &lt;code&gt;use_frameworks!&lt;/code&gt; in your Podfile &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Swift: Add &lt;code&gt;#import &#34;PureLayout.h&#34;&lt;/code&gt; to your bridging header.&lt;/li&gt; &#xA;   &lt;li&gt;Objective-C: &lt;code&gt;#import &#34;PureLayout.h&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That&#39;s it - now go write some beautiful Auto Layout code!&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;PureLayout/PureLayout&lt;/code&gt; project to your &lt;a href=&#34;https://github.com/Carthage/Carthage/raw/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;PureLayout/PureLayout&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update&lt;/code&gt;, then follow the &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;additional steps required&lt;/a&gt; to add the framework into your project.&lt;/li&gt; &#xA; &lt;li&gt;Import the PureLayout framework/module.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift: &lt;code&gt;import PureLayout&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Objective-C: &lt;code&gt;#import &amp;lt;PureLayout/PureLayout.h&amp;gt;&lt;/code&gt; (or with Modules enabled: &lt;code&gt;@import PureLayout;&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That&#39;s it - now go write some beautiful Auto Layout code!&lt;/p&gt; &#xA;&lt;h3&gt;Manually from GitHub&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the source files in the &lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/PureLayout/PureLayout&#34;&gt;PureLayout subdirectory&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add the source files to your Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;Import the &lt;code&gt;PureLayout.h&lt;/code&gt; header.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift: Add &lt;code&gt;#import &#34;PureLayout.h&#34;&lt;/code&gt; to your bridging header.&lt;/li&gt; &#xA; &lt;li&gt;Objective-C: &lt;code&gt;#import &#34;PureLayout.h&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That&#39;s it - now go write some beautiful Auto Layout code!&lt;/p&gt; &#xA;&lt;h3&gt;App Extensions&lt;/h3&gt; &#xA;&lt;p&gt;To use PureLayout in an App Extension, you need to do a bit of extra configuration to prevent usage of unavailable APIs. &lt;a href=&#34;https://github.com/PureLayout/PureLayout/wiki/App-Extensions&#34;&gt;Click here&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Releases&lt;/h3&gt; &#xA;&lt;p&gt;Releases are tagged in the git commit history using &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt;. Check out the &lt;a href=&#34;https://github.com/PureLayout/PureLayout/releases&#34;&gt;releases and release notes&lt;/a&gt; for each version.&lt;/p&gt; &#xA;&lt;h2&gt;API Cheat Sheet&lt;/h2&gt; &#xA;&lt;p&gt;This is just a handy overview of the core API methods. Explore the &lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/PureLayout/PureLayout&#34;&gt;header files&lt;/a&gt; for the full API, and find the complete documentation above the implementation of each method in the corresponding .m file. A couple of notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All of the public API methods are namespaced with the prefix &lt;code&gt;auto...&lt;/code&gt;, which also makes it easy for Xcode to autocomplete as you type.&lt;/li&gt; &#xA; &lt;li&gt;Methods that create constraints also automatically install (activate) the constraint(s), then return the new constraint(s) for you to optionally store for later adjustment or removal.&lt;/li&gt; &#xA; &lt;li&gt;Many methods below also have a variant which includes a &lt;code&gt;relation:&lt;/code&gt; parameter to make the constraint an inequality.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Attributes&lt;/h3&gt; &#xA;&lt;p&gt;PureLayout defines view attributes that are used to create auto layout constraints. Here is an &lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/Images/PureLayout-CommonAttributes.png&#34;&gt;illustration of the most common attributes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are 5 specific attribute types, which are used throughout most of the API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ALEdge&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALDimension&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALAxis&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALMargin&lt;/code&gt; &lt;em&gt;available in iOS 8.0 and higher only&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALMarginAxis&lt;/code&gt; &lt;em&gt;available in iOS 8.0 and higher only&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, there is one generic attribute type, &lt;code&gt;ALAttribute&lt;/code&gt;, which is effectively a union of all the specific types. You can think of this as the &#34;supertype&#34; of all of the specific attribute types, which means that it is always safe to cast a specific type to the generic &lt;code&gt;ALAttribute&lt;/code&gt; type. (Note that the reverse is not true -- casting a generic ALAttribute to a specific attribute type is unsafe!)&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/PureLayout/PureLayout/ALView%2BPureLayout.h&#34;&gt;&lt;code&gt;UIView&lt;/code&gt;/&lt;code&gt;NSView&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;- autoSetContent(CompressionResistance|Hugging)PriorityForAxis:&#xA;- autoCenterInSuperview(Margins) // Margins variant iOS 8.0+ only&#xA;- autoAlignAxisToSuperview(Margin)Axis: // Margin variant iOS 8.0+ only&#xA;- autoPinEdgeToSuperview(Edge:|Margin:)(withInset:) // Margin variant iOS 8.0+ only&#xA;- autoPinEdgesToSuperview(Edges|Margins)(WithInsets:)(excludingEdge:) // Margins variant iOS 8.0+ only&#xA;- autoPinEdge:toEdge:ofView:(withOffset:)&#xA;- autoAlignAxis:toSameAxisOfView:(withOffset:|withMultiplier:)&#xA;- autoMatchDimension:toDimension:ofView:(withOffset:|withMultiplier:)&#xA;- autoSetDimension(s)ToSize:&#xA;- autoConstrainAttribute:toAttribute:ofView:(withOffset:|withMultiplier:)&#xA;- autoPinTo(Top|Bottom)LayoutGuideOfViewController:withInset: // iOS only&#xA;- autoPinEdgeToSuperviewSafeArea: // iOS 11.0+ only&#xA;- autoPinEdgeToSuperviewSafeArea:withInset: // iOS 11.0+ only&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/PureLayout/PureLayout/NSArray%2BPureLayout.h&#34;&gt;&lt;code&gt;NSArray&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Arrays of Constraints&#xA;- autoInstallConstraints&#xA;- autoRemoveConstraints&#xA;- autoIdentifyConstraints: // iOS 7.0+, OS X 10.9+ only&#xA;&#xA;// Arrays of Views&#xA;- autoAlignViewsToEdge:&#xA;- autoAlignViewsToAxis:&#xA;- autoMatchViewsDimension:&#xA;- autoSetViewsDimension:toSize:&#xA;- autoSetViewsDimensionsToSize:&#xA;- autoDistributeViewsAlongAxis:alignedTo:withFixedSpacing:(insetSpacing:)(matchedSizes:)&#xA;- autoDistributeViewsAlongAxis:alignedTo:withFixedSize:(insetSpacing:)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/PureLayout/PureLayout/NSLayoutConstraint%2BPureLayout.h&#34;&gt;&lt;code&gt;NSLayoutConstraint&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;+ autoCreateAndInstallConstraints:&#xA;+ autoCreateConstraintsWithoutInstalling:&#xA;+ autoSetPriority:forConstraints:&#xA;+ autoSetIdentifier:forConstraints: // iOS 7.0+, OS X 10.9+ only&#xA;- autoIdentify: // iOS 7.0+, OS X 10.9+ only&#xA;- autoInstall&#xA;- autoRemove&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Sample Code (Swift)&lt;/h3&gt; &#xA;&lt;p&gt;PureLayout dramatically simplifies writing Auto Layout code. Let&#39;s take a quick look at some examples, using PureLayout from Swift.&lt;/p&gt; &#xA;&lt;p&gt;Initialize the view using PureLayout initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let view1 = UIView(forAutoLayout: ())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to use a different initializer (e.g. in &lt;code&gt;UIView&lt;/code&gt; subclass), you can also use &lt;code&gt;configureForAutoLayout&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;view1.configureForAutoLayout() // alternative to UIView.init(forAutoLayout: ())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s a constraint between two views created (and automatically activated) using PureLayout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view1.autoPinEdge(.top, toEdge: .bottom, ofView: view2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without PureLayout, here&#39;s the equivalent code you&#39;d have to write using Apple&#39;s Foundation API directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;NSLayoutConstraint(item: view1, attribute: .top, relatedBy: .equal, toItem: view2, attribute: .bottom, multiplier: 1.0, constant: 0.0).active = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Many APIs of PureLayout create multiple constraints for you under the hood, letting you write highly readable layout code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// 2 constraints created &amp;amp; activated in one line!&#xA;logoImageView.autoCenterInSuperview()&#xA;&#xA;// 4 constraints created &amp;amp; activated in one line!&#xA;textContentView.autoPinEdgesToSuperviewEdges(with insets: UIEdgeInsets(top: 20.0, left: 5.0, bottom: 10.0, right: 5.0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PureLayout always returns the constraints it creates so you have full control:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let constraint = skinnyView.autoMatchDimension(.height, toDimension: .width, ofView: tallView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PureLayout supports safearea with iOS 11.0+:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view2.autoPinEdge(toSuperviewSafeArea: .top)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PureLayout supports all Auto Layout features including inequalities, priorities, layout margins, identifiers, and much more. It&#39;s a comprehensive, developer-friendly way to use Auto Layout.&lt;/p&gt; &#xA;&lt;p&gt;Check out the example apps below for many more demos of PureLayout in use.&lt;/p&gt; &#xA;&lt;h3&gt;Example Apps&lt;/h3&gt; &#xA;&lt;p&gt;Open the project included in the repository (requires Xcode 6 or higher). It contains &lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/PureLayout/Example-iOS&#34;&gt;iOS&lt;/a&gt; (&lt;code&gt;Example-iOS&lt;/code&gt; scheme) and &lt;a href=&#34;https://raw.githubusercontent.com/PureLayout/PureLayout/master/PureLayout/Example-Mac&#34;&gt;OS X&lt;/a&gt; (&lt;code&gt;Example-Mac&lt;/code&gt; scheme) demos of the library being used in various scenarios. The demos in the iOS example app make a great introductory tutorial to PureLayout -- run each demo, review the code used to implement it, then practice by making some changes of your own to the demo code.&lt;/p&gt; &#xA;&lt;p&gt;Each demo in the iOS example app has a Swift and Objective-C version. &lt;strong&gt;To compile &amp;amp; run the Swift demos, you must use Xcode 7.0 or higher (Swift 2.0) and choose the &lt;code&gt;Example-iOS-Xcode7&lt;/code&gt; scheme.&lt;/strong&gt; When you run the example app, you can easily switch between using the Swift and Objective-C versions of the demos. To see the constraints in action while running the iOS demos, try using different device simulators, rotating the device to different orientations, as well as toggling the taller in-call status bar in the iOS Simulator.&lt;/p&gt; &#xA;&lt;p&gt;On OS X, while running the app, press any key to cycle through the demos. You can resize the window to see the constraints in action.&lt;/p&gt; &#xA;&lt;h3&gt;Tips and Tricks&lt;/h3&gt; &#xA;&lt;p&gt;Check out some &lt;a href=&#34;https://github.com/PureLayout/PureLayout/wiki/Tips-and-Tricks&#34;&gt;Tips and Tricks&lt;/a&gt; to keep in mind when using the API.&lt;/p&gt; &#xA;&lt;h2&gt;PureLayout vs. the rest&lt;/h2&gt; &#xA;&lt;p&gt;There are quite a few different ways to implement Auto Layout. Here is a quick overview of the available options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/AppKit/Reference/NSLayoutConstraint_Class/index.html#//apple_ref/occ/clm/NSLayoutConstraint/constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:&#34;&gt;NSLayoutConstraint SDK API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: Raw power&lt;/li&gt; &#xA;   &lt;li&gt;Cons: Extremely verbose; tedious to write; difficult to read&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Apple &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage.html&#34;&gt;Visual Format Language&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: Concise; convenient&lt;/li&gt; &#xA;   &lt;li&gt;Cons: Doesn&#39;t support some use cases; lacks compile-time checking and safety; must learn syntax; hard to debug&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Apple Interface Builder &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: Visual; interactive; provides compile-time layout checking&lt;/li&gt; &#xA;   &lt;li&gt;Cons: Difficult for complex layouts; cannot dynamically set constraints at runtime; encourages hardcoded magic numbers; not always WYSIWYG&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Apple &lt;a href=&#34;https://developer.apple.com/library/prerelease/ios/documentation/AppKit/Reference/NSLayoutAnchor_ClassReference/index.html&#34;&gt;NSLayoutAnchor SDK API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: Clean, readable, and type-safe API for creating individual constraints&lt;/li&gt; &#xA;   &lt;li&gt;Cons: Only available in iOS 9.0 and OS X 10.11 and higher; requires manually activating each constraint; no API for creating multiple constraints at once&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PureLayout&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: Compatible with Objective-C and Swift codebases; consistent with Cocoa API style; cross-platform API and implementation shared across iOS and OS X; fully backwards-compatible to iOS 6 &amp;amp; OS X 10.7; easy to use; type-safe; efficient&lt;/li&gt; &#xA;   &lt;li&gt;Cons: Not the most concise expression of layout code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;High-level Auto Layout Libraries/DSLs (&lt;a href=&#34;https://github.com/robb/Cartography&#34;&gt;Cartography&lt;/a&gt;, &lt;a href=&#34;https://github.com/SnapKit/SnapKit&#34;&gt;SnapKit&lt;/a&gt;, &lt;a href=&#34;https://github.com/iMartinKiss/KeepLayout&#34;&gt;KeepLayout&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: Very clean, concise, and convenient&lt;/li&gt; &#xA;   &lt;li&gt;Cons: Unique API style is foreign to Apple&#39;s APIs; mixed compatibility with Objective-C &amp;amp; Swift; greater dependency on third party code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PureLayout takes a balanced approach to Auto Layout that makes it well suited for any project.&lt;/p&gt; &#xA;&lt;h2&gt;Problems, Suggestions, Pull Requests?&lt;/h2&gt; &#xA;&lt;p&gt;Please open a &lt;a href=&#34;https://github.com/PureLayout/PureLayout/issues/new&#34;&gt;new Issue here&lt;/a&gt; if you run into a problem specific to PureLayout, have a feature request, or want to share a comment. Note that general Auto Layout questions should be asked on &lt;a href=&#34;http://stackoverflow.com&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pull requests are encouraged and greatly appreciated! Please try to maintain consistency with the existing code style. If you&#39;re considering taking on significant changes or additions to the project, please communicate in advance by opening a new Issue. This allows everyone to get onboard with upcoming changes, ensures that changes align with the project&#39;s design philosophy, and avoids duplicated work.&lt;/p&gt; &#xA;&lt;h2&gt;Meta&lt;/h2&gt; &#xA;&lt;p&gt;Originally designed &amp;amp; built by Tyler Fox (&lt;a href=&#34;https://github.com/smileyborg&#34;&gt;@smileyborg&lt;/a&gt;). Currently maintained by Mickey Reiss (&lt;a href=&#34;https://github.com/mickeyreiss&#34;&gt;@mickeyreiss&lt;/a&gt;). Distributed with the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>keycastr/keycastr</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/keycastr/keycastr</id>
    <link href="https://github.com/keycastr/keycastr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KeyCastr, an open-source keystroke visualizer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KeyCastr&lt;/h1&gt; &#xA;&lt;p&gt;KeyCastr, an open source keystroke visualizer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/keycastr/keycastr/main/assets/KeyCastr_header.png&#34; alt=&#34;header image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;KeyCastr enables you to share your keystrokes when creating screencasts, presenting, or collaborating with others. You can choose to display all keystrokes or command keys only, and there is also an option to include mouse clicks.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to develop your own visualizer on top of KeyCastr -- pull requests are welcome!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/keycastr/keycastr/main/assets/mouse-click-visualizer.gif&#34; alt=&#34;display preferences&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest release from &lt;a href=&#34;https://github.com/keycastr/keycastr/releases&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or, install using &lt;a href=&#34;http://brew.sh/&#34;&gt;homebrew&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install --cask keycastr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Granting Permissions&lt;/h2&gt; &#xA;&lt;p&gt;KeyCastr requires your permission to receive events from macOS in order to broadcast your keystrokes and mouse clicks.&lt;/p&gt; &#xA;&lt;p&gt;On newer versions of macOS (10.15+) there is an Input Monitoring menu under Security &amp;amp; Privacy within the System Preferences app, and KeyCastr will appear there automatically the first time you run it. Simply unlock this menu and check the box next to KeyCastr to enable it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/keycastr/keycastr/main/assets/input_monitoring.png&#34; alt=&#34;input_monitoring&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;On older versions of macOS, or if for some reason the app doesn&#39;t appear under the Input Monitoring menu (or if you want to pre-enable it) then you may manually add it to the list of apps in the Accessibility menu.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/keycastr/keycastr/main/assets/accessibility.png&#34; alt=&#34;accessibility&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To add KeyCastr to the list click the &lt;kbd&gt;+&lt;/kbd&gt; button and select KeyCastr from the file system, or drag it in using Finder.&lt;/p&gt; &#xA;&lt;p&gt;If KeyCastr is already in the list you can remove it with the &lt;kbd&gt;−&lt;/kbd&gt; button and add it again in order to be certain that the right copy of the application is specified.&lt;/p&gt; &#xA;&lt;h2&gt;Position on Screen&lt;/h2&gt; &#xA;&lt;p&gt;The default position is on the bottom left of your display. To modify the position of displayed keystrokes, click and drag the text like so:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/keycastr/keycastr/main/assets/reposition.gif&#34; alt=&#34;reposition&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Security Concerns&lt;/h2&gt; &#xA;&lt;p&gt;Any application in the Accessibility or Input Monitoring sections of the Security &amp;amp; Privacy pane in macOS&#39;s Preferences.app is capable of receiving all your input events. We encourage you to inspect these lists carefully, remove applications which you don&#39;t believe need to monitor your input, and ask tough questions of the companies which produce the software you use.&lt;/p&gt; &#xA;&lt;p&gt;KeyCastr is completely free and open source, and does not employ any networking mechanisms other than that included with the ubiquitous &lt;a href=&#34;https://sparkle-project.org/&#34;&gt;Sparkle framework&lt;/a&gt; for managing application updates. KeyCastr will never receive or display your passwords, so long as the website or application you are using treats password entry as secure, e.g. &lt;code&gt;&amp;lt;input type=&#34;password&#34;&amp;gt;&lt;/code&gt; or equivalent.&lt;/p&gt; &#xA;&lt;h2&gt;History and Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdeken&#34;&gt;sdeken&lt;/a&gt; wrote the original version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akitchen&#34;&gt;akitchen&lt;/a&gt; occasional development and maintenance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elia&#34;&gt;elia&lt;/a&gt; created &lt;code&gt;keycastr&lt;/code&gt; organization and forked into it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lqez&#34;&gt;lqez&lt;/a&gt; added a new menu bar icon.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/QuintB&#34;&gt;QuintB&lt;/a&gt; designed an updated application icon to match the icon style in modern versions of macOS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt;BSD 3-Clause&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;KeyCastr has been freely available for the Mac since 2009.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CocoaLumberjack/CocoaLumberjack</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/CocoaLumberjack/CocoaLumberjack</id>
    <link href="https://github.com/CocoaLumberjack/CocoaLumberjack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast &amp; simple, yet powerful &amp; flexible logging framework for Mac and iOS&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/LumberjackLogo.png&#34; title=&#34;Lumberjack logo&#34; float=&#34;left&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;CocoaLumberjack&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/CocoaLumberjack/CocoaLumberjack/workflows/Unit%20Tests/badge.svg?sanitize=true&#34; alt=&#34;Unit Tests&#34;&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/CocoaLumberjack/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/CocoaLumberjack.svg?style=flat&#34; alt=&#34;Pod Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/CocoaLumberjack/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/CocoaLumberjack.svg?style=flat&#34; alt=&#34;Pod Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://opensource.org/licenses/BSD-3-Clause&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/l/CocoaLumberjack.svg?style=flat&#34; alt=&#34;Pod License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/CocoaLumberjack/CocoaLumberjack&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/CocoaLumberjack/CocoaLumberjack/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-cocoalumberjack-cocoalumberjack-master&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/840b714a-c8f3-4936-ada4-363473cd4e6b&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CocoaLumberjack&lt;/strong&gt; is a fast &amp;amp; simple, yet powerful &amp;amp; flexible logging framework for macOS, iOS, tvOS and watchOS.&lt;/p&gt; &#xA;&lt;h2&gt;How to get started&lt;/h2&gt; &#xA;&lt;p&gt;First, install CocoaLumberjack via &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; or manually. Then use &lt;code&gt;DDOSLogger&lt;/code&gt; for iOS 10 and later, or &lt;code&gt;DDTTYLogger&lt;/code&gt; and &lt;code&gt;DDASLLogger&lt;/code&gt; for earlier versions to begin logging messages.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;9.0&#39;&#xA;&#xA;target &#39;SampleTarget&#39; do&#xA;  use_frameworks!&#xA;  pod &#39;CocoaLumberjack/Swift&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;Swift&lt;/code&gt; is a subspec which will include all the Obj-C code plus the Swift one, so this is sufficient. For more details about how to use Swift with Lumberjack, see &lt;a href=&#34;https://github.com/CocoaLumberjack/CocoaLumberjack/issues/405&#34;&gt;this conversation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Objective-C use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;9.0&#39;&#xA;&#xA;target &#39;SampleTarget&#39; do&#xA;    pod &#39;CocoaLumberjack&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Carthage is a lightweight dependency manager for Swift and Objective-C. It leverages CocoaTouch modules and is less invasive than CocoaPods.&lt;/p&gt; &#xA;&lt;p&gt;To install with Carthage, follow the instruction on &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cartfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;CocoaLumberjack/CocoaLumberjack&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;As of CocoaLumberjack 3.6.0, you can use the Swift Package Manager as integration method. If you want to use the Swift Package Manager as integration method, either use Xcode to add the package dependency or add the following dependency to your Package.swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/CocoaLumberjack/CocoaLumberjack.git&#34;, from: &#34;3.7.0&#34;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you may need to add both products, &lt;code&gt;CocoaLumberjack&lt;/code&gt; and &lt;code&gt;CocoaLumberjackSwift&lt;/code&gt; to your target since SPM sometimes fails to detect that &lt;code&gt;CocoaLumerjackSwift&lt;/code&gt; depends on &lt;code&gt;CocoaLumberjack&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install manually&lt;/h3&gt; &#xA;&lt;p&gt;If you want to install CocoaLumberjack manually, read the &lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/GettingStarted.md#manual-installation&#34;&gt;manual installation&lt;/a&gt; guide for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Usage&lt;/h3&gt; &#xA;&lt;p&gt;Usually, you can simply &lt;code&gt;import CocoaLumberjackSwift&lt;/code&gt;. If you installed CocoaLumberjack using CocoaPods, you need to use &lt;code&gt;import CocoaLumberjack&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;DDLog.add(DDOSLogger.sharedInstance) // Uses os_log&#xA;&#xA;let fileLogger: DDFileLogger = DDFileLogger() // File Logger&#xA;fileLogger.rollingFrequency = 60 * 60 * 24 // 24 hours&#xA;fileLogger.logFileManager.maximumNumberOfLogFiles = 7&#xA;DDLog.add(fileLogger)&#xA;&#xA;...&#xA;&#xA;DDLogVerbose(&#34;Verbose&#34;)&#xA;DDLogDebug(&#34;Debug&#34;)&#xA;DDLogInfo(&#34;Info&#34;)&#xA;DDLogWarn(&#34;Warn&#34;)&#xA;DDLogError(&#34;Error&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Obj-C usage&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Lumberjack as a framework, you can &lt;code&gt;@import CocoaLumberjack;&lt;/code&gt;. Otherwise, &lt;code&gt;#import &amp;lt;CocoaLumberjack/CocoaLumberjack.h&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[DDLog addLogger:[DDOSLogger sharedInstance]]; // Uses os_log&#xA;&#xA;DDFileLogger *fileLogger = [[DDFileLogger alloc] init]; // File Logger&#xA;fileLogger.rollingFrequency = 60 * 60 * 24; // 24 hour rolling&#xA;fileLogger.logFileManager.maximumNumberOfLogFiles = 7;&#xA;[DDLog addLogger:fileLogger];&#xA;&#xA;...&#xA;&#xA;DDLogVerbose(@&#34;Verbose&#34;);&#xA;DDLogDebug(@&#34;Debug&#34;);&#xA;DDLogInfo(@&#34;Info&#34;);&#xA;DDLogWarn(@&#34;Warn&#34;);&#xA;DDLogError(@&#34;Error&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Objective-C ARC Semantic Issue&lt;/h3&gt; &#xA;&lt;p&gt;When integrating Lumberjack into an existing Objective-C it is possible to run into &lt;code&gt;Multiple methods named &#39;tag&#39; found with mismatched result, parameter type or attributes&lt;/code&gt; build error.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;#define DD_LEGACY_MESSAGE_TAG 0&lt;/code&gt; before importing CocoaLumberjack or add &lt;code&gt;#define DD_LEGACY_MESSAGE_TAG 0&lt;/code&gt; or add &lt;code&gt;-DDD_LEGACY_MESSAGE_TAG=0&lt;/code&gt; to &lt;em&gt;Other C Flags&lt;/em&gt;/&lt;em&gt;OTHER_CFLAGS&lt;/em&gt; in your Xcode project.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/apple/swift-log&#34;&gt;swift-log&lt;/a&gt; backend&lt;/h2&gt; &#xA;&lt;p&gt;CocoaLumberjack also ships with a backend implementation for &lt;a href=&#34;https://github.com/apple/swift-log&#34;&gt;swift-log&lt;/a&gt;. Simply add CocoaLumberjack as dependency to your SPM target (see above) and also add the &lt;code&gt;CocoaLumberjackSwiftLogBackend&lt;/code&gt; product as dependency to your target.&lt;/p&gt; &#xA;&lt;p&gt;You can then use &lt;code&gt;DDLogHandler&lt;/code&gt; as backend for swift-log, which will forward all messages to CocoaLumberjack&#39;s &lt;code&gt;DDLog&lt;/code&gt;. You will still configure the loggers and log formatters you want via &lt;code&gt;DDLog&lt;/code&gt;, but writing log messages will be done using &lt;code&gt;Logger&lt;/code&gt; from swift-log.&lt;/p&gt; &#xA;&lt;p&gt;In your own log formatters, you can make use of the &lt;code&gt;swiftLogInfo&lt;/code&gt; property on &lt;code&gt;DDLogMessage&lt;/code&gt; to retrieve the details of a message that is logged via swift-log.&lt;/p&gt; &#xA;&lt;p&gt;To use swift-log with CocoaLumberjack, take a look the following code snippet to see how to get started.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Import necessary packages&#xA;import CocoaLumberjackSwift&#xA;import CocoaLumberjackSwiftLogBackend&#xA;import Logging&#xA;&#xA;// In your application&#39;s entry point (e.g. AppDelegate):&#xA;DDLog.add(DDOSLogger.sharedInstance) // Configure loggers&#xA;LoggingSystem.bootstrapWithCocoaLumberjack() // Use CocoaLumberjack as swift-log backend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;read the &lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/GettingStarted.md&#34;&gt;Getting started&lt;/a&gt; guide, check out the &lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/FAQ.md&#34;&gt;FAQ&lt;/a&gt; section or the other &lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/&#34;&gt;docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;if you find issues or want to suggest improvements, create an issue or a pull request&lt;/li&gt; &#xA; &lt;li&gt;for all kinds of questions involving CocoaLumberjack, use the &lt;a href=&#34;https://groups.google.com/group/cocoalumberjack&#34;&gt;Google group&lt;/a&gt; or StackOverflow (use &lt;a href=&#34;https://stackoverflow.com/questions/tagged/lumberjack&#34;&gt;#lumberjack&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CocoaLumberjack 3&lt;/h2&gt; &#xA;&lt;h3&gt;Migrating to 3.x&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To be determined&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Lumberjack is Fast &amp;amp; Simple, yet Powerful &amp;amp; Flexible.&lt;/h3&gt; &#xA;&lt;p&gt;It is similar in concept to other popular logging frameworks such as log4j, yet is designed specifically for Objective-C, and takes advantage of features such as multi-threading, grand central dispatch (if available), lockless atomic operations, and the dynamic nature of the Objective-C runtime.&lt;/p&gt; &#xA;&lt;h3&gt;Lumberjack is Fast&lt;/h3&gt; &#xA;&lt;p&gt;In most cases it is an order of magnitude faster than NSLog.&lt;/p&gt; &#xA;&lt;h3&gt;Lumberjack is Simple&lt;/h3&gt; &#xA;&lt;p&gt;It takes as little as a single line of code to configure lumberjack when your application launches. Then simply replace your NSLog statements with DDLog statements and that&#39;s about it. (And the DDLog macros have the exact same format and syntax as NSLog, so it&#39;s super easy.)&lt;/p&gt; &#xA;&lt;h3&gt;Lumberjack is Powerful:&lt;/h3&gt; &#xA;&lt;p&gt;One log statement can be sent to multiple loggers, meaning you can log to a file and the console simultaneously. Want more? Create your own loggers (it&#39;s easy) and send your log statements over the network. Or to a database or distributed file system. The sky is the limit.&lt;/p&gt; &#xA;&lt;h3&gt;Lumberjack is Flexible:&lt;/h3&gt; &#xA;&lt;p&gt;Configure your logging however you want. Change log levels per file (perfect for debugging). Change log levels per logger (verbose console, but concise log file). Change log levels per xcode configuration (verbose debug, but concise release). Have your log statements compiled out of the release build. Customize the number of log levels for your application. Add your own fine-grained logging. Dynamically change log levels during runtime. Choose how &amp;amp; when you want your log files to be rolled. Upload your log files to a central server. Compress archived log files to save disk space...&lt;/p&gt; &#xA;&lt;h2&gt;This framework is for you if:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You&#39;re looking for a way to track down that impossible-to-reproduce bug that keeps popping up in the field.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re frustrated with the super short console log on the iPhone.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re looking to take your application to the next level in terms of support and stability.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re looking for an enterprise level logging solution for your application (Mac or iPhone).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/GettingStarted.md&#34;&gt;Get started using Lumberjack&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/XcodeTricks.md&#34;&gt;Different log levels for Debug and Release builds&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/PerLoggerLogLevels.md&#34;&gt;Different log levels for each logger&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/XcodeColors.md&#34;&gt;Use colors in the Xcode debugging console&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/CustomFormatters.md&#34;&gt;Write your own custom formatters&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/FAQ.md&#34;&gt;FAQ&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/Performance.md&#34;&gt;Analysis of performance with benchmarks&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/ProblemSolution.md&#34;&gt;Common issues you may encounter and their solutions&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/AppCode-support.md&#34;&gt;AppCode support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/&#34;&gt;Full Lumberjack documentation&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The current version of Lumberjack requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12 or later&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.3 or later&lt;/li&gt; &#xA; &lt;li&gt;iOS 9 or later&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.10 or later&lt;/li&gt; &#xA; &lt;li&gt;watchOS 3 or later&lt;/li&gt; &#xA; &lt;li&gt;tvOS 9 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Backwards compatibility&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for Xcode 11 and Swift up to 5.2, use the 3.6.2 version&lt;/li&gt; &#xA; &lt;li&gt;for Xcode 10 and Swift 4.2, use the 3.5.2 version&lt;/li&gt; &#xA; &lt;li&gt;for iOS 8, use the 3.6.1 version&lt;/li&gt; &#xA; &lt;li&gt;for iOS 6, iOS 7, OS X 10.8, OS X 10.9 and Xcode 9, use the 3.4.2 version&lt;/li&gt; &#xA; &lt;li&gt;for iOS 5 and OS X 10.7, use the 3.3 version&lt;/li&gt; &#xA; &lt;li&gt;for Xcode 8 and Swift 3, use the 3.2 version&lt;/li&gt; &#xA; &lt;li&gt;for Xcode 7.3 and Swift 2.3, use the 2.4.0 version&lt;/li&gt; &#xA; &lt;li&gt;for Xcode 7.3 and Swift 2.2, use the 2.3.0 version&lt;/li&gt; &#xA; &lt;li&gt;for Xcode 7.2 and 7.1, use the 2.2.0 version&lt;/li&gt; &#xA; &lt;li&gt;for Xcode 7.0 or earlier, use the 2.1.0 version&lt;/li&gt; &#xA; &lt;li&gt;for Xcode 6 or earlier, use the 2.0.x version&lt;/li&gt; &#xA; &lt;li&gt;for OS X &amp;lt; 10.7 support, use the 1.6.0 version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&#34;https://stackoverflow.com/questions/tagged/lumberjack&#34;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;lumberjack&#39;)&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&#34;https://stackoverflow.com/questions/tagged/lumberjack&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a pull request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data Collection Practices&lt;/h2&gt; &#xA;&lt;p&gt;Per &lt;a href=&#34;https://developer.apple.com/app-store/app-privacy-details/&#34;&gt;App privacy details on the App Store&lt;/a&gt;, Apple is requesting app developers to provide info about their data collection, us SDK maintainers must provide them with the same data.&lt;/p&gt; &#xA;&lt;h3&gt;Data collection by the framework&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;By default, CocoaLumberjack does NOT collect any data on its own.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoalumberjack.github.io/DataCollection/index.html&#34;&gt;See our Data Collection Practices list.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Indirect data collection through the framework&lt;/h3&gt; &#xA;&lt;p&gt;CocoaLumberjack is a logging framework which makes it easy to send those logs to different platforms.&lt;/p&gt; &#xA;&lt;p&gt;This is why collecting data might happen quite easily, if app developers include any sensitive data into their log messages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important note: app developers are fully responsible for any sensitive data collected through our logging system!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In consequence, you must comply to the Apple&#39;s privacy details policy (mentioned above) and document the ways in which user data is being collected. Since the number of scenarios where data might be indirectly collected through CocoaLumberjack is quite large, it&#39;s up to you, as app developers, to properly review your app&#39;s code and identify those cases. What we can do to help is raise awareness about potential data collection through our framework.&lt;/p&gt; &#xA;&lt;p&gt;Private data includes but isn&#39;t limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;user info (name, email, address, ...)&lt;/li&gt; &#xA; &lt;li&gt;location info&lt;/li&gt; &#xA; &lt;li&gt;contacts&lt;/li&gt; &#xA; &lt;li&gt;identifiers (user id, device id, ...)&lt;/li&gt; &#xA; &lt;li&gt;app usage data&lt;/li&gt; &#xA; &lt;li&gt;performance data&lt;/li&gt; &#xA; &lt;li&gt;health and fitness info&lt;/li&gt; &#xA; &lt;li&gt;financial info&lt;/li&gt; &#xA; &lt;li&gt;sensitive info&lt;/li&gt; &#xA; &lt;li&gt;user content&lt;/li&gt; &#xA; &lt;li&gt;history (browsing, search, ...)&lt;/li&gt; &#xA; &lt;li&gt;purchases&lt;/li&gt; &#xA; &lt;li&gt;diagnostics&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;code&gt;DDLogInfo(&#34;User: \(myUser)&#34;)&lt;/code&gt; will add the &lt;code&gt;myUser&lt;/code&gt; info to the logs, so if those are forwarded to a 3rd party or sent via email, that may qualify as data collection.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robbiehanson&#34;&gt;Robbie Hanson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Love the project? Wanna buy me a coffee? (or a beer :D) &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=UZRA26JPJB3DA&#34;&gt;&lt;img src=&#34;http://www.paypal.com/en_US/i/btn/btn_donate_SM.gif&#34; alt=&#34;donation&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Collaborators&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rivera-ernesto&#34;&gt;Ernesto Rivera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dvor&#34;&gt;Dmitry Vorobyov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bpoplauschi&#34;&gt;Bogdan Poplauschi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MaddTheSane&#34;&gt;C.W. Betts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sushichop&#34;&gt;Koichi Yokota (sushichop)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nrbrook&#34;&gt;Nick Brook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ffried&#34;&gt;Florian Friedrich&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/diederich&#34;&gt;Stephan Diederich&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ksuther&#34;&gt;Kent Sutherland&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lolgear&#34;&gt;Dmitry Lobanov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hhanesand&#34;&gt;Hakon Hanesand&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CocoaLumberjack is available under the BSD 3 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/LICENSE&#34;&gt;LICENSE file&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/s4nchez/LogIO-CocoaLumberjack&#34;&gt;LogIO-CocoaLumberjack&lt;/a&gt; A log.io logger for CocoaLumberjack&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xced/XCDLumberjackNSLogger&#34;&gt;XCDLumberjackNSLogger&lt;/a&gt; CocoaLumberjack logger which sends logs to NSLogger&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/CocoaLumberjackClassDiagram.png&#34; title=&#34;CocoaLumberjack class diagram&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>inket/Autoclick</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/inket/Autoclick</id>
    <link href="https://github.com/inket/Autoclick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple Mac app that simulates mouse clicks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Autoclick 2.0&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/inket/Autoclick/master/screenshot.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;A simple Mac app that simulates mouse clicks when needed. Highly configurable and easy to use.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;By &lt;a href=&#34;https://tars.mahdi.jp/apps/autoclick.zip&#34;&gt;downloading&lt;/a&gt; this app, you agree that it is provided &#34;as is&#34; and that you will receive NO SUPPORT whatsoever. This is a free app made in my free time and I do not owe you anything. Read the FAQ below for more info.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Is it safe?&lt;/h3&gt; &#xA;&lt;p&gt;Yes.&lt;/p&gt; &#xA;&lt;h3&gt;Why does it ask for Accessibility permission?&lt;/h3&gt; &#xA;&lt;p&gt;The system requires it to let the app &#34;click&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;I gave it Accessibility permission, but it doesn&#39;t click&lt;/h3&gt; &#xA;&lt;p&gt;Restart your Mac.&lt;/p&gt; &#xA;&lt;h3&gt;It requires macOS 10.14, but I have 10.13 or whatever&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tars.mahdi.jp/apps/autoclick-1.0.zip&#34;&gt;Download the older version&lt;/a&gt;, then right-click on the app and select &#34;Open&#34; to open it.&lt;/p&gt; &#xA;&lt;h3&gt;It will not let me set a hotkey!&lt;/h3&gt; &#xA;&lt;p&gt;You need to add a modifier to your hotkey like command, alt, or control.&lt;/p&gt; &#xA;&lt;p&gt;Try command+L, it should work.&lt;/p&gt; &#xA;&lt;h3&gt;Can you make it accept just one key for the hotkey?&lt;/h3&gt; &#xA;&lt;p&gt;No, it&#39;s impossible. (and stupid because you won&#39;t be able to use that key anymore)&lt;/p&gt; &#xA;&lt;h3&gt;I want more clicks per second&lt;/h3&gt; &#xA;&lt;p&gt;I found that above 900 the system will freeze so 900 is the limit.&lt;/p&gt; &#xA;&lt;h3&gt;Can you make a Windows version?&lt;/h3&gt; &#xA;&lt;p&gt;No, I can&#39;t. I would have to quit my job, go to school to learn Windows development, then spend months making it, so no. Also, Windows sucks.&lt;/p&gt; &#xA;&lt;h3&gt;Can I suggest a feature?&lt;/h3&gt; &#xA;&lt;p&gt;No.&lt;/p&gt; &#xA;&lt;h3&gt;Can you fix a bug?&lt;/h3&gt; &#xA;&lt;p&gt;No.&lt;/p&gt; &#xA;&lt;h3&gt;Can I contact you for anything about this app?&lt;/h3&gt; &#xA;&lt;p&gt;No. I will not respond.&lt;/p&gt; &#xA;&lt;h3&gt;Is this app still in development?&lt;/h3&gt; &#xA;&lt;p&gt;No.&lt;/p&gt; &#xA;&lt;h3&gt;Why?&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ve had enough of entitled Roblox kids.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;2.0.5 (2022/1/28)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Increase the maximum clicks per second to 900.&lt;/li&gt; &#xA; &lt;li&gt;This is the last version of this app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.4 (2021/9/6)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed app not remembering your settings between restarts&lt;/li&gt; &#xA; &lt;li&gt;App will now check Input Monitoring permission too, to make sure that you can stop the clicking with keyboard shortcuts/FN key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.3 (2021/2/23)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allow hotkeys without modifiers, &lt;a href=&#34;https://github.com/inket/Autoclick/issues/2&#34;&gt;#2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.2 (2021/2/17)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Better fix for multi-monitor setups, &lt;a href=&#34;https://github.com/inket/Autoclick/issues/1&#34;&gt;#1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.1 (2021/2/6)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed cursor jumping in multi-monitor setups, #1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0 (2021)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Codesigned &amp;amp; notarized so that it&#39;s trusted by new versions of macOS&lt;/li&gt; &#xA; &lt;li&gt;Modernized codebase &amp;amp; added Apple Silicon support&lt;/li&gt; &#xA; &lt;li&gt;Will now display the accessibility permission popup if you haven&#39;t allowed it yet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://tars.mahdi.jp/apps/autoclick-1.0.zip&#34;&gt;1.0 (2011)&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initial version&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Giphy/giphy-ios-sdk</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/Giphy/giphy-ios-sdk</id>
    <link href="https://github.com/Giphy/giphy-ios-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Home of the GIPHY SDK iOS example app, along with iOS SDK documentation, issue tracking, &amp; release notes.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;750&#34; height=&#34;150&#34; src=&#34;https://raw.githubusercontent.com/Giphy/giphy-ios-sdk/main/sdk_logo.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;300&#34; height=&#34;483&#34; src=&#34;https://raw.githubusercontent.com/Giphy/giphy-ios-sdk/main/example.gif&#34;&gt; &#xA;&lt;h1&gt;GIPHY SDK for iOS&lt;/h1&gt; &#xA;&lt;p&gt;The fastest and easiest way to bring the full GIPHY experience directly to your app is with the GIPHY SDK. Built with developers and product designers in mind, the GIPHY SDK is a top-to-bottom solution for all things GIF in your app. This includes interfacing with GIPHY API, fetching and caching assets, and displaying GIFs and Stickers on screen in customizable UI templates.&lt;/p&gt; &#xA;&lt;p&gt;With billions of requests a day, it’s safe to say GIPHY knows GIFs. We&#39;re excited to share our best-in-class tools with you so your users can have the best GIF experience possible, with all the same features they&#39;re already enjoying on Facebook, Slack, Instagram, and more – with just a few lines of code.&lt;/p&gt; &#xA;&lt;p&gt;New! GIPHY’s proud to introduce GIPHY Clips, aka GIFs with Sound, to the mix! GIPHY Clips is our newest content format at the intersection of GIFs and Video. Clips combines the expression and entertainment of GIFs, with the added engagement of audio. Integrating the SDK will allow your users to seamlessly express themselves with this new format, all while staying in the experience in your app.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Giphy/giphy-ios-sdk/main/Docs.md&#34;&gt;Get Started&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>londonappbrewery/dicee-flutter</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/londonappbrewery/dicee-flutter</id>
    <link href="https://github.com/londonappbrewery/dicee-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starter code for the Dicee project in the Complete Flutter Bootcamp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/AppBreweryBanner.png&#34; alt=&#34;App Brewery Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Dicee 🎲&lt;/h1&gt; &#xA;&lt;h2&gt;Our Goal&lt;/h2&gt; &#xA;&lt;p&gt;The objective of this tutorial is to introduce you to the core programming concepts that will form the foundation of most of the apps you’ll build in the future. This app will teach you how to make apps with functionality using setState() inside Stateful Flutter widgets.&lt;/p&gt; &#xA;&lt;h2&gt;What you will create&lt;/h2&gt; &#xA;&lt;p&gt;We’re going to make a Las Vegas dice app. You can make the die roll at the press of a button. With this app in your pocket, you’ll be able to settle any score on the go!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/dicee-demo.gif&#34; alt=&#34;Finished App&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What you will learn&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to use Flutter stateless widgets to design the user interface.&lt;/li&gt; &#xA; &lt;li&gt;How to use Flutter stateful widgets to update the user interface.&lt;/li&gt; &#xA; &lt;li&gt;How to change the properties of various widgets.&lt;/li&gt; &#xA; &lt;li&gt;How to use onPressed listeners to detect when buttons are pressed.&lt;/li&gt; &#xA; &lt;li&gt;How to use setState to mark the widget tree as dirty and requiring update on the next render.&lt;/li&gt; &#xA; &lt;li&gt;How to use Expanded to make widgets adapt to screen dimensions.&lt;/li&gt; &#xA; &lt;li&gt;Understand and use string interpolation.&lt;/li&gt; &#xA; &lt;li&gt;Learn about basic dart programming concepts such as data types and functions.&lt;/li&gt; &#xA; &lt;li&gt;Code and use gesture controls.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a companion project to The App Brewery&#39;s Complete Flutter Development Bootcamp, check out the full course at &lt;a href=&#34;https://www.appbrewery.co/&#34;&gt;www.appbrewery.co&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/readme-end-banner.png&#34; alt=&#34;End Banner&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>londonappbrewery/mi_card_flutter</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/londonappbrewery/mi_card_flutter</id>
    <link href="https://github.com/londonappbrewery/mi_card_flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starter code for the Mi Card Project from the Complete Flutter Development Bootcamp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/AppBreweryBanner.png&#34; alt=&#34;App Brewery Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Mi Card&lt;/h1&gt; &#xA;&lt;h2&gt;Our Goal&lt;/h2&gt; &#xA;&lt;p&gt;Now that you&#39;ve seen how to create a Flutter app entirely from scratch, we&#39;re going to go further and learn more about how to design user interfaces for Flutter apps.&lt;/p&gt; &#xA;&lt;h2&gt;What you will create&lt;/h2&gt; &#xA;&lt;p&gt;Mi Card is a personal business card. Imagine every time you wanted to give someone your contact details or your business card but you didn&#39;t have it on you. Well, now you can get them to download your business card as an app.&lt;/p&gt; &#xA;&lt;h2&gt;What you will learn&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to create Stateless Widgets&lt;/li&gt; &#xA; &lt;li&gt;What is the difference between hot reload and hot refresh and running an app from cold&lt;/li&gt; &#xA; &lt;li&gt;How to use Containers to lay out your UI&lt;/li&gt; &#xA; &lt;li&gt;How to use Columns and Rows to position your UI elements&lt;/li&gt; &#xA; &lt;li&gt;How to add custom fonts&lt;/li&gt; &#xA; &lt;li&gt;How to add Material icons&lt;/li&gt; &#xA; &lt;li&gt;How to style Text widgets&lt;/li&gt; &#xA; &lt;li&gt;How to read and use Flutter Documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a companion project to The App Brewery&#39;s Complete Flutter Development Bootcamp, check out the full course at &lt;a href=&#34;https://www.appbrewery.co/&#34;&gt;www.appbrewery.co&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/readme-end-banner.png&#34; alt=&#34;End Banner&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emartech/ios-emarsys-sdk</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/emartech/ios-emarsys-sdk</id>
    <link href="https://github.com/emartech/ios-emarsys-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h4&gt;Contents&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emartech/ios-emarsys-sdk/master/#what-is-the-emarsys-sdk&#34; title=&#34;What is EmarsysSDK?&#34;&gt;What is the Emarsys SDK?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emartech/ios-emarsys-sdk/master/#sample-app&#34; title=&#34;Sample app&#34;&gt;Sample app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emartech/ios-emarsys-sdk/master/#setup&#34; title=&#34;Setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emartech/ios-emarsys-sdk/master/#1-installation-with-cocoapods&#34; title=&#34;CocoaPods&#34;&gt;Installation with CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emartech/ios-emarsys-sdk/master/#2-requirements&#34; title=&#34;Requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk/wiki&#34; title=&#34;Wiki&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk/wiki/deeplink&#34; title=&#34;DeepLink&#34;&gt;DeepLink&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk/wiki/glossary&#34; title=&#34;Glossary&#34;&gt;Glossary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk/wiki/migrate-from-mobile-engage&#34; title=&#34;Migration guide&#34;&gt;Migrate from MobileEngage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk/wiki/rich-push-notifications&#34; title=&#34;Rich Push notifications&#34;&gt;Rich Push Notifications&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is the Emarsys SDK?&lt;/h2&gt; &#xA;&lt;p&gt;The Emarsys SDK enables you to use Mobile Engage and Predict in a very straightforward way. By incorporating the SDK in your app, we, among others, support you in handling credentials, API calls, tracking of opens and events as well as logins and logouts in the app.&lt;/p&gt; &#xA;&lt;p&gt;The Emarsys SDK is open-sourced to enhance transparency and to remove privacy concerns. This also means that you will always be up-to-date with what we are working on.&lt;/p&gt; &#xA;&lt;p&gt;Using the SDK is also beneficial from the product aspect: it simply makes it much easier to send push messages through your app. Please always use the latest version of the SDK in your app.&lt;/p&gt; &#xA;&lt;h2&gt;Sample app&lt;/h2&gt; &#xA;&lt;p&gt;We created a sample application to help in the integration and give an example. Find instructions for the build process &lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk/tree/master/Emarsys%20Sample&#34; title=&#34;Sample app&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;1. Installation with CocoaPods&lt;/h3&gt; &#xA;&lt;h4&gt;1.1 Install CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;CocoaPods is a dependency manager for iOS, which automates and simplifies the process of using 3rd-party libraries. You can install it with the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ gem&amp;nbsp;install&amp;nbsp;cocoapods&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;1.2 Podfile&lt;/h4&gt; &#xA;&lt;p&gt;To integrate the Emarsys SDK into your Xcode project using CocoaPods, specify it in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;11.0&#39;&#xA;&#xA;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;&#xA;target &#34;&amp;lt;TargetName&amp;gt;&#34; do&#xA;&#x9;pod ‘EmarsysSDK’, &#39;~&amp;gt; ‹latest_released_version_of_emarsys-sdk›’&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Wherever you see &#xA;  &lt;targetname&gt;&#xA;    or anything similar in &amp;lt;&amp;gt; brackets, you should change those according to your own naming convention or add a value valid for the context.&#xA;  &lt;/targetname&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;1.3 Install Pods&lt;/h4&gt; &#xA;&lt;p&gt;After creating the Podfile, you need to execute the command below to download dependencies: &lt;code&gt;pod install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Installation with Swift Package Manager&lt;/h3&gt; &#xA;&lt;h4&gt;2.1 Add package in XCode&lt;/h4&gt; &#xA;&lt;p&gt;Select project and under Swift Packages add the package repository url: &lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk.git&#34;&gt;https://github.com/emartech/ios-emarsys-sdk.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Select the desired version of the EmarsysSDK.&lt;/p&gt; &#xA;&lt;p&gt;On the next page select the libraries you want to use and add them to the correct target, for example (based on our SampleApp):&lt;/p&gt; &#xA;&lt;p&gt;EmarsysSDKLibrary and add to target EmarsysSample&lt;/p&gt; &#xA;&lt;p&gt;EmarsysNotificationExtensionLibrary and add to target EMSNotificationService&lt;/p&gt; &#xA;&lt;h3&gt;3. Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The iOS target should be iOS 11 or higher.&lt;/li&gt; &#xA; &lt;li&gt;In order to be able to send push messages to your app, you need to have certifications from Apple Push Notification service (APNs).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;Note&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;For further information about how to use our SDK please visit our &lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk/wiki&#34; title=&#34;Wiki&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>pronebird/UIScrollView-InfiniteScroll</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/pronebird/UIScrollView-InfiniteScroll</id>
    <link href="https://github.com/pronebird/UIScrollView-InfiniteScroll" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UIScrollView ∞ scroll category&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;UIScrollView+InfiniteScroll&lt;/h2&gt; &#xA;&lt;p&gt;Infinite scroll implementation as a category for UIScrollView.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pronebird/UIScrollView-InfiniteScroll/master/README%20images/InfiniteScroll1.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pronebird/UIScrollView-InfiniteScroll/master/README%20images/InfiniteScroll2.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pronebird/UIScrollView-InfiniteScroll/master/README%20images/InfiniteScroll3.gif&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;* The content used in demo app is publicly available and provided by hn.algolia.com and Flickr. Both can be inappropriate.&lt;/p&gt; &#xA;&lt;h3&gt;Swizzling&lt;/h3&gt; &#xA;&lt;p&gt;Be aware that this category &lt;a href=&#34;http://nshipster.com/method-swizzling/&#34;&gt;swizzles&lt;/a&gt; &lt;code&gt;setContentOffset&lt;/code&gt; and &lt;code&gt;setContentSize&lt;/code&gt; on &lt;code&gt;UIScrollView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Just add the following line in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;UIScrollView-InfiniteScroll&#39;, &#39;~&amp;gt; 1.2.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Just add the following line in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;pronebird/UIScrollView-InfiniteScroll&#34; ~&amp;gt; 1.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;This component comes with example app written in Swift and Objective-C.&lt;/p&gt; &#xA;&lt;p&gt;If you use CocoaPods you can try it by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pod try UIScrollView-InfiniteScroll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://pronebird.github.io/UIScrollView-InfiniteScroll/&#34;&gt;http://pronebird.github.io/UIScrollView-InfiniteScroll/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Before using module&lt;/h3&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;p&gt;Import header file in Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;UIScrollView_InfiniteScroll/UIScrollView+InfiniteScroll.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;p&gt;Add the following line in your bridging header file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;UIScrollView_InfiniteScroll/UIScrollView+InfiniteScroll.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basics&lt;/h3&gt; &#xA;&lt;p&gt;In order to enable infinite scroll you have to provide a handler block using &lt;code&gt;addInfiniteScrollWithHandler&lt;/code&gt;. The block you provide is executed each time infinite scroll component detects that more data needs to be provided.&lt;/p&gt; &#xA;&lt;p&gt;The purpose of the handler block is to perform asynchronous task, typically networking or database fetch, and update your scroll view or scroll view subclass.&lt;/p&gt; &#xA;&lt;p&gt;The block itself is called on main queue, therefore make sure you move any long-running tasks to background queue. Once you receive new data, update table view by adding new rows and sections, then call &lt;code&gt;finishInfiniteScroll&lt;/code&gt; to complete infinite scroll animations and reset the state of infinite scroll components.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;viewDidLoad&lt;/code&gt; is a good place to install handler block.&lt;/p&gt; &#xA;&lt;p&gt;Make sure that any interactions with UIKit or methods provided by Infinite Scroll happen on main queue. Use &lt;code&gt;dispatch_async(dispatch_get_main_queue, { ... })&lt;/code&gt; in Objective-C or &lt;code&gt;DispatchQueue.main.async { ... }&lt;/code&gt; in Swift to run UI related calls on main queue.&lt;/p&gt; &#xA;&lt;p&gt;Many people make mistake by using external reference to table view or collection view within the handler block. Don&#39;t do this. This creates a circular retention. Instead use the instance of scroll view or scroll view subclass passed as first argument to handler block.&lt;/p&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// setup infinite scroll&#xA;[tableView addInfiniteScrollWithHandler:^(UITableView* tableView) {&#xA;    // update table view&#xA;    &#xA;    // finish infinite scroll animation&#xA;    [tableView finishInfiniteScroll];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;tableView.addInfiniteScroll { (tableView) -&amp;gt; Void in&#xA;    // update table view&#xA;            &#xA;    // finish infinite scroll animation&#xA;    tableView.finishInfiniteScroll()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collection view quirks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;UICollectionView.reloadData&lt;/code&gt; causes contentOffset to reset. Instead use &lt;code&gt;UICollectionView.performBatchUpdates&lt;/code&gt; when possible.&lt;/p&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self.collectionView addInfiniteScrollWithHandler:^(UICollectionView* collectionView) {    &#xA;    [collectionView performBatchUpdates:^{&#xA;        // update collection view&#xA;    } completion:^(BOOL finished) {&#xA;        // finish infinite scroll animations&#xA;        [collectionView finishInfiniteScroll];&#xA;    }];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;collectionView.addInfiniteScroll { (collectionView) -&amp;gt; Void in&#xA;    collectionView.performBatchUpdates({ () -&amp;gt; Void in&#xA;        // update collection view&#xA;    }, completion: { (finished) -&amp;gt; Void in&#xA;        // finish infinite scroll animations&#xA;        collectionView.finishInfiniteScroll()&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start infinite scroll programmatically&lt;/h3&gt; &#xA;&lt;p&gt;You can reuse infinite scroll flow to load initial data or fetch more using &lt;code&gt;beginInfiniteScroll(forceScroll)&lt;/code&gt;. &lt;code&gt;viewDidLoad&lt;/code&gt; is a good place for loading initial data, however absolutely up to you to decide.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;forceScroll&lt;/code&gt; parameter is positive, Infinite Scroll component will attempt to scroll down to reveal indicator view. Keep in mind that scrolling will not happen if user is interacting with scroll view.&lt;/p&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self.tableView beginInfiniteScroll:YES];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;tableView.beginInfiniteScroll(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prevent infinite scroll&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you need to prevent the infinite scroll from continuing. For example, if your search API has no more results, it does not make sense to keep making the requests or to show the spinner.&lt;/p&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[tableView setShouldShowInfiniteScrollHandler:^BOOL (UITableView *tableView) {&#xA;    // Only show up to 5 pages then prevent the infinite scroll&#xA;    return (weakSelf.currentPage &amp;lt; 5);&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Provide a block to be called right before a infinite scroll event is triggered.  Return YES to allow or NO to prevent it from triggering.&#xA;tableView.setShouldShowInfiniteScrollHandler { _ -&amp;gt; Bool in&#xA;    // Only show up to 5 pages then prevent the infinite scroll&#xA;    return currentPage &amp;lt; 5 &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Seamlessly preload content&lt;/h3&gt; &#xA;&lt;p&gt;Ideally you want your content to flow seamlessly without ever showing a spinner. Infinite scroll offers an option to specify offset in points that will be used to start preloader before user reaches the bottom of scroll view.&lt;/p&gt; &#xA;&lt;p&gt;The proper balance between the number of results you load each time and large enough offset should give your users a decent experience. Most likely you will have to come up with your own formula for the combination of those based on kind of content and device dimensions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Preload more data 500pt before reaching the bottom of scroll view.&#xA;tableView.infiniteScrollTriggerOffset = 500;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom indicator&lt;/h3&gt; &#xA;&lt;p&gt;You can use custom indicator instead of default &lt;code&gt;UIActivityIndicatorView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Custom indicator must be a subclass of &lt;code&gt;UIView&lt;/code&gt; and implement the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)startAnimating;&#xA;- (void)stopAnimating;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;CustomInfiniteIndicator *infiniteIndicator = [[CustomInfiniteIndicator alloc] initWithFrame:CGRectMake(0, 0, 40, 40)];&#xA;self.tableView.infiniteScrollIndicatorView = indicator;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let frame = CGRect(x: 0, y: 0, width: 24, height: 24)&#xA;tableView.infiniteScrollIndicatorView = CustomInfiniteIndicator(frame: frame)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please see example implementation of custom indicator view:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Objective-C: &lt;a href=&#34;https://github.com/pronebird/UIScrollView-InfiniteScroll/raw/master/InfiniteScrollViewDemo/CustomInfiniteIndicator.m&#34;&gt;CustomInfiniteIndicator.m&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Swift: &lt;a href=&#34;https://github.com/pronebird/UIScrollView-InfiniteScroll/raw/master/InfiniteScrollViewDemoSwift/CustomInfiniteIndicator.swift&#34;&gt;CustomInfiniteIndicator.swift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At the moment InfiniteScroll uses indicator&#39;s frame directly so make sure you size custom indicator view beforehand. Such views as &lt;code&gt;UIImageView&lt;/code&gt; or &lt;code&gt;UIActivityIndicatorView&lt;/code&gt; will automatically resize themselves so no need to setup frame for them.&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/pronebird/UIScrollView-InfiniteScroll/raw/master/CHANGES&#34;&gt;CHANGES&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Attributions&lt;/h3&gt; &#xA;&lt;p&gt;Demo app icon by &lt;a href=&#34;http://appicontemplate.com/ios8/&#34;&gt;PixelResort&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>utmapp/UTM</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/utmapp/UTM</id>
    <link href="https://github.com/utmapp/UTM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Virtual machines for iOS and macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UTM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/utmapp/UTM/actions?query=event%3Arelease+workflow%3ABuild&#34;&gt;&lt;img src=&#34;https://github.com/utmapp/UTM/workflows/Build/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is possible to invent a single machine which can be used to compute any computable sequence.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;-- &lt;cite&gt;Alan Turing, 1936&lt;/cite&gt;&lt;/p&gt; &#xA;&lt;p&gt;UTM is a full featured system emulator and virtual machine host for iOS and macOS. It is based off of QEMU. In short, it allows you to run Windows, Linux, and more on your Mac, iPhone, and iPad. More information at &lt;a href=&#34;https://getutm.app/&#34;&gt;https://getutm.app/&lt;/a&gt; and &lt;a href=&#34;https://mac.getutm.app/&#34;&gt;https://mac.getutm.app/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/utmapp/UTM/master/screen.png&#34; alt=&#34;Screenshot of UTM running on iPhone&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full system emulation (MMU, devices, etc) using QEMU&lt;/li&gt; &#xA; &lt;li&gt;30+ processors supported including x86_64, ARM64, and RISC-V&lt;/li&gt; &#xA; &lt;li&gt;VGA graphics mode using SPICE and QXL&lt;/li&gt; &#xA; &lt;li&gt;Text terminal mode&lt;/li&gt; &#xA; &lt;li&gt;USB devices&lt;/li&gt; &#xA; &lt;li&gt;JIT based acceleration using QEMU TCG&lt;/li&gt; &#xA; &lt;li&gt;Frontend designed from scratch for macOS 11 and iOS 11+ using the latest and greatest APIs&lt;/li&gt; &#xA; &lt;li&gt;Create, manage, run VMs directly from your device&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional macOS Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hardware accelerated virtualization using Hypervisor.framework and QEMU&lt;/li&gt; &#xA; &lt;li&gt;Boot macOS guests with Virtualization.framework on macOS 12+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;UTM SE&lt;/h2&gt; &#xA;&lt;p&gt;UTM/QEMU requires dynamic code generation (JIT) for maximum performance. JIT on iOS devices require either a jailbroken device, or one of the various workarounds found for specific versions of iOS (see &#34;Install&#34; for more details).&lt;/p&gt; &#xA;&lt;p&gt;UTM SE (&#34;slow edition&#34;) uses a &lt;a href=&#34;https://github.com/ktemkin/qemu/raw/with_tcti/tcg/aarch64-tcti/README.md&#34;&gt;threaded interpreter&lt;/a&gt; which performs better than a traditional interpreter but still slower than JIT. This technique is similar to what &lt;a href=&#34;https://github.com/ish-app/ish&#34;&gt;iSH&lt;/a&gt; does for dynamic execution. As a result, UTM SE does not require jailbreaking or any JIT workarounds and can be sideloaded as a regular app.&lt;/p&gt; &#xA;&lt;p&gt;To optimize for size and build times, only the following architectures are included in UTM SE: ARM, PPC, RISC-V, and x86 (all with both 32-bit and 64-bit variants).&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;UTM (SE) for iOS: &lt;a href=&#34;https://getutm.app/install/&#34;&gt;https://getutm.app/install/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;UTM is also available for macOS: &lt;a href=&#34;https://mac.getutm.app/&#34;&gt;https://mac.getutm.app/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/utmapp/UTM/master/Documentation/MacDevelopment.md&#34;&gt;macOS Development&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/utmapp/UTM/master/Documentation/iOSDevelopment.md&#34;&gt;iOS Development&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ish-app/ish&#34;&gt;iSH&lt;/a&gt;: emulates a usermode Linux terminal interface for running x86 Linux applications on iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/holzschu/a-shell&#34;&gt;a-shell&lt;/a&gt;: packages common Unix commands and utilities built natively for iOS and accessible through a terminal interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;UTM is distributed under the permissive Apache 2.0 license. However, it uses several (L)GPL components. Most are dynamically linked but the gstreamer plugins are statically linked and parts of the code are taken from qemu. Please be aware of this if you intend on redistributing this application.&lt;/p&gt; &#xA;&lt;p&gt;Some icons made by &lt;a href=&#34;https://www.freepik.com&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;https://www.flaticon.com/&#34;&gt;www.flaticon.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, UTM frontend depends on the following MIT License components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager&#34;&gt;IQKeyboardManager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/migueldeicaza/SwiftTerm&#34;&gt;SwiftTerm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/weichsel/ZIPFoundation&#34;&gt;ZIP Foundation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>expo/expo</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/expo/expo</id>
    <link href="https://github.com/expo/expo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source platform for making universal native apps with React. Expo runs on Android, iOS, and the web.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://expo.dev/&#34;&gt; &lt;img alt=&#34;expo sdk&#34; height=&#34;128&#34; src=&#34;https://raw.githubusercontent.com/expo/expo/main/.github/resources/banner.png&#34;&gt; &lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://expo.dev/&#34;&gt;Expo&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;a href=&#34;https://expo.dev/&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a aria-label=&#34;SDK version&#34; href=&#34;https://www.npmjs.com/package/expo&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Expo SDK version&#34; src=&#34;https://img.shields.io/npm/v/expo.svg?style=flat-square&amp;amp;label=SDK&amp;amp;labelColor=000000&amp;amp;color=4630EB&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Join our forums&#34; href=&#34;https://forums.expo.dev&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Forums&#34; src=&#34;https://img.shields.io/badge/Ask%20Questions%20-blue.svg?style=flat-square&amp;amp;logo=discourse&amp;amp;logoWidth=15&amp;amp;labelColor=000000&amp;amp;color=4630EB&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Join our Discord&#34; href=&#34;https://discord.gg/4gtbPAdpaE&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/695411232856997968.svg?style=flat-square&amp;amp;labelColor=000000&amp;amp;color=4630EB&amp;amp;logo=discord&amp;amp;logoColor=FFFFFF&amp;amp;label=&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Expo is free to use&#34; href=&#34;https://github.com/expo/expo/raw/main/LICENSE&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;License: MIT&#34; src=&#34;https://img.shields.io/badge/License-MIT-success.svg?style=flat-square&amp;amp;color=33CC12&#34; target=&#34;_blank&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;expo downloads&#34; href=&#34;http://www.npmtrends.com/expo&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Downloads&#34; src=&#34;https://img.shields.io/npm/dm/expo.svg?style=flat-square&amp;amp;labelColor=gray&amp;amp;color=33CC12&amp;amp;label=Downloads&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a aria-label=&#34;try expo with snack&#34; href=&#34;https://snack.expo.dev&#34;&gt;&lt;b&gt;Try Expo in the Browser&lt;/b&gt;&lt;/a&gt; | &lt;a aria-label=&#34;expo documentation&#34; href=&#34;https://docs.expo.dev&#34;&gt;Read the Documentation 📚&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt; &lt;a aria-label=&#34;Follow @expo on Twitter&#34; href=&#34;https://twitter.com/intent/follow?screen_name=expo&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Twitter: expo&#34; src=&#34;https://img.shields.io/twitter/follow/expo.svg?style=flat-square&amp;amp;label=Follow%20%40expo&amp;amp;logo=TWITTER&amp;amp;logoColor=FFFFFF&amp;amp;labelColor=00aced&amp;amp;logoWidth=15&amp;amp;color=lightgray&#34; target=&#34;_blank&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Follow Expo on Medium&#34; href=&#34;https://blog.expo.dev&#34;&gt; &lt;img align=&#34;right&#34; alt=&#34;Medium: exposition&#34; src=&#34;https://img.shields.io/badge/Learn%20more%20on%20our%20blog-lightgray.svg?style=flat-square&#34; target=&#34;_blank&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/#-documentation&#34;&gt;📚 Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/#-project-layout&#34;&gt;🗺 Project Layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/#-badges&#34;&gt;🏅 Badges&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/#-contributing&#34;&gt;👏 Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/#-faq&#34;&gt;❓ FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/#-the-team&#34;&gt;💙 The Team&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Expo is an open-source platform for making universal native apps that run on Android, iOS, and the web. It includes a universal runtime and libraries that let you build native apps by writing React and JavaScript. This repository is where the Expo client software is developed, and includes the client apps, modules, apps, and more. The &lt;a href=&#34;https://github.com/expo/expo-cli&#34;&gt;Expo CLI&lt;/a&gt; repository contains the Expo development tools.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://expo.dev/guidelines&#34;&gt;Click here to view the Expo Community Guidelines&lt;/a&gt;. Thank you for helping keep the Expo community open and welcoming!&lt;/p&gt; &#xA;&lt;h2&gt;📚 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Learn about building and deploying universal apps &lt;a aria-label=&#34;expo documentation&#34; href=&#34;https://docs.expo.dev&#34;&gt;in our official docs!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.expo.dev/&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.expo.dev/versions/latest/&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.expo.dev/bare/exploring-bare-workflow/&#34;&gt;Using Custom Native Modules&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🗺 Project Layout&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/packages&#34;&gt;&lt;code&gt;packages&lt;/code&gt;&lt;/a&gt; All the source code for the Unimodules, if you want to edit a library or just see how it works this is where you&#39;ll find it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/apps&#34;&gt;&lt;code&gt;apps&lt;/code&gt;&lt;/a&gt; This is where you can find Expo projects which are linked to the development Unimodules. You&#39;ll do most of your testing in here.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt; The source code for &lt;strong&gt;&lt;a href=&#34;https://docs.expo.dev&#34;&gt;https://docs.expo.dev&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/templates&#34;&gt;&lt;code&gt;templates&lt;/code&gt;&lt;/a&gt; The template projects you get when you run &lt;code&gt;expo start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/react-native-lab&#34;&gt;&lt;code&gt;react-native-lab&lt;/code&gt;&lt;/a&gt; This is our fork of &lt;code&gt;react-native&lt;/code&gt;. We keep this very close to the upstream but sometimes need to add quick fixes locally before they can land.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/guides&#34;&gt;&lt;code&gt;guides&lt;/code&gt;&lt;/a&gt; In-depth tutorials for advanced topics like contributing to the client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/android&#34;&gt;&lt;code&gt;android&lt;/code&gt;&lt;/a&gt; contains the Android project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/home&#34;&gt;&lt;code&gt;home&lt;/code&gt;&lt;/a&gt; contains the JavaScript source code of the app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/ios&#34;&gt;&lt;code&gt;ios&lt;/code&gt;&lt;/a&gt; contains the iOS project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/ios&#34;&gt;&lt;code&gt;ios/Exponent.xcworkspace&lt;/code&gt;&lt;/a&gt; is the Xcode workspace. Always open this instead of &lt;code&gt;Exponent.xcodeproj&lt;/code&gt; because the workspace also loads the CocoaPods dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/tools&#34;&gt;&lt;code&gt;tools&lt;/code&gt;&lt;/a&gt; contains build and configuration tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/template-files&#34;&gt;&lt;code&gt;template-files&lt;/code&gt;&lt;/a&gt; contains templates for files that require private keys. They are populated using the keys in &lt;code&gt;template-files/keys.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/template-files/ios/dependencies.json&#34;&gt;&lt;code&gt;template-files/ios/dependencies.json&lt;/code&gt;&lt;/a&gt; specifies the CocoaPods dependencies of the app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🏅 Badges&lt;/h2&gt; &#xA;&lt;p&gt;Let everyone know your app can be run instantly in the &lt;em&gt;Expo Go&lt;/em&gt; app! &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://expo.dev/client&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&amp;amp;logo=EXPO&amp;amp;labelColor=f3f3f3&amp;amp;logoColor=000&#34; alt=&#34;runs with Expo Go&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://expo.dev/client&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&amp;amp;logo=EXPO&amp;amp;labelColor=f3f3f3&amp;amp;logoColor=000&#34; alt=&#34;runs with Expo Go&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&amp;amp;logo=EXPO&amp;amp;labelColor=f3f3f3&amp;amp;logoColor=000)](https://expo.dev/client)&#xA;&#xA;[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&amp;amp;logo=EXPO&amp;amp;labelColor=f3f3f3&amp;amp;logoColor=000)](https://expo.dev/client)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;👏 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you like Expo and want to help make it better then check out our &lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;! Check out the &lt;a href=&#34;http://github.com/expo/expo-cli&#34;&gt;Expo CLI repo&lt;/a&gt; to work on the Expo CLI, and various other universal development tools.&lt;/p&gt; &#xA;&lt;h2&gt;❓ FAQ&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions about Expo and want answers, then check out our &lt;a href=&#34;https://docs.expo.dev/versions/latest/introduction/faq/&#34;&gt;Frequently Asked Questions&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;If you still have questions you can ask them on our &lt;a href=&#34;https://forums.expo.dev&#34;&gt;forums&lt;/a&gt;, &lt;a href=&#34;https://discord.gg/4gtbPAdpaE&#34;&gt;Discord&lt;/a&gt; or on Twitter &lt;a href=&#34;https://twitter.com/expo&#34;&gt;@Expo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;💙 The Team&lt;/h2&gt; &#xA;&lt;p&gt;Curious about who makes Expo? Here are our &lt;a href=&#34;https://expo.dev/about&#34;&gt;team members&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Expo source code is made available under the &lt;a href=&#34;https://raw.githubusercontent.com/expo/expo/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;. Some of the dependencies are licensed differently, with the BSD license, for example.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SDWebImage/SDWebImage</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/SDWebImage/SDWebImage</id>
    <link href="https://github.com/SDWebImage/SDWebImage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Asynchronous image downloader with cache support as a UIImageView category&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/SDWebImage_logo.png&#34; title=&#34;SDWebImage logo&#34; float=&#34;left&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/SDWebImage/SDWebImage&#34;&gt;&lt;img src=&#34;http://img.shields.io/travis/SDWebImage/SDWebImage/master.svg?style=flat&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/SDWebImage/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/SDWebImage.svg?style=flat&#34; alt=&#34;Pod Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/SDWebImage/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/SDWebImage.svg?style=flat&#34; alt=&#34;Pod Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/l/SDWebImage.svg?style=flat&#34; alt=&#34;Pod License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;SwiftPM compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/documentation/xcode/creating_a_mac_version_of_your_ipad_app/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Catalyst-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Mac Catalyst compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/SDWebImage/SDWebImage&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/SDWebImage/SDWebImage/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library provides an async image downloader with cache support. For convenience, we added categories for UI elements like &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;UIButton&lt;/code&gt;, &lt;code&gt;MKAnnotationView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Categories for &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;UIButton&lt;/code&gt;, &lt;code&gt;MKAnnotationView&lt;/code&gt; adding web image and cache management&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; An asynchronous image downloader&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; An asynchronous memory + disk image caching with automatic cache expiration handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A background image decompression to avoid frame rate drop&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#progressive-animation&#34;&gt;Progressive image loading&lt;/a&gt; (including animated image, like GIF showing in Web browser)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#thumbnail-decoding-550&#34;&gt;Thumbnail image decoding&lt;/a&gt; to save CPU &amp;amp;&amp;amp; Memory for large images&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#custom-coder-420&#34;&gt;Extendable image coder&lt;/a&gt; to support massive image format, like WebP&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#animated-image-50&#34;&gt;Full-stack solution for animated images&lt;/a&gt; which keep a balance between CPU &amp;amp;&amp;amp; Memory&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#transformer-50&#34;&gt;Customizable and composable transformations&lt;/a&gt; can be applied to the images right after download&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#custom-cache-50&#34;&gt;Customizable and multiple caches system&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#custom-loader-50&#34;&gt;Customizable and multiple loaders system&lt;/a&gt; to expand the capabilities, like &lt;a href=&#34;https://github.com/SDWebImage/SDWebImagePhotosPlugin&#34;&gt;Photos Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/How-to-use#use-view-indicator-50&#34;&gt;Image loading indicators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#image-transition-430&#34;&gt;Image loading transition animation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A guarantee that the same URL won&#39;t be downloaded several times&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A guarantee that bogus URLs won&#39;t be retried again and again&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A guarantee that main thread will never be blocked&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Modern Objective-C and better Swift support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Performances!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Image Formats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Image formats supported by Apple system (JPEG, PNG, TIFF, BMP, ...), including &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#gif-coder&#34;&gt;GIF&lt;/a&gt;/&lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#apng-coder&#34;&gt;APNG&lt;/a&gt; animated image&lt;/li&gt; &#xA; &lt;li&gt;HEIC format from iOS 11/macOS 10.13, including animated HEIC from iOS 13/macOS 10.15 via &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#heic-coder&#34;&gt;SDWebImageHEICCoder&lt;/a&gt;. For lower firmware, use coder plugin &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageHEIFCoder&#34;&gt;SDWebImageHEIFCoder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WebP format from iOS 14/macOS 11.0 via &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#awebp-coder&#34;&gt;SDWebImageAWebPCoder&lt;/a&gt;. For lower firmware, use coder plugin &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageWebPCoder&#34;&gt;SDWebImageWebPCoder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support extendable coder plugins for new image formats like BPG, AVIF. And vector format like PDF, SVG. See all the list in &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Coder-Plugin-List&#34;&gt;Image coder plugin List&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional modules and Ecosystem&lt;/h2&gt; &#xA;&lt;p&gt;In order to keep SDWebImage focused and limited to the core features, but also allow extensibility and custom behaviors, during the 5.0 refactoring we focused on modularizing the library. As such, we have moved/built new modules to &lt;a href=&#34;https://github.com/SDWebImage&#34;&gt;SDWebImage org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;SwiftUI&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/xcode/swiftui/&#34;&gt;SwiftUI&lt;/a&gt; is an innovative UI framework written in Swift to build user interfaces across all Apple platforms.&lt;/p&gt; &#xA;&lt;p&gt;We support SwiftUI by building a brand new framework called &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageSwiftUI&#34;&gt;SDWebImageSwiftUI&lt;/a&gt;, which is built on top of SDWebImage core functions (caching, loading and animation).&lt;/p&gt; &#xA;&lt;p&gt;The new framework introduce two View structs &lt;code&gt;WebImage&lt;/code&gt; and &lt;code&gt;AnimatedImage&lt;/code&gt; for SwiftUI world, &lt;code&gt;ImageIndicator&lt;/code&gt; modifier for any View, &lt;code&gt;ImageManager&lt;/code&gt; observable object for data source. Supports iOS 13+/macOS 10.15+/tvOS 13+/watchOS 6+ and Swift 5.1. Have a nice try and provide feedback!&lt;/p&gt; &#xA;&lt;h4&gt;Coders for additional image formats&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageWebPCoder&#34;&gt;SDWebImageWebPCoder&lt;/a&gt; - coder for WebP format. iOS 8+/macOS 10.10+. Based on &lt;a href=&#34;https://chromium.googlesource.com/webm/libwebp&#34;&gt;libwebp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageHEIFCoder&#34;&gt;SDWebImageHEIFCoder&lt;/a&gt; - coder for HEIF format, iOS 8+/macOS 10.10+ support. Based on &lt;a href=&#34;https://github.com/strukturag/libheif&#34;&gt;libheif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageBPGCoder&#34;&gt;SDWebImageBPGCoder&lt;/a&gt; - coder for BPG format. Based on &lt;a href=&#34;https://github.com/mirrorer/libbpg&#34;&gt;libbpg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageFLIFCoder&#34;&gt;SDWebImageFLIFCoder&lt;/a&gt; - coder for FLIF format. Based on &lt;a href=&#34;https://github.com/FLIF-hub/FLIF&#34;&gt;libflif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageAVIFCoder&#34;&gt;SDWebImageAVIFCoder&lt;/a&gt; - coder for AVIF (AV1-based) format. Based on &lt;a href=&#34;https://github.com/AOMediaCodec/libavif&#34;&gt;libavif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImagePDFCoder&#34;&gt;SDWebImagePDFCoder&lt;/a&gt; - coder for PDF vector format. Using built-in frameworks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageSVGCoder&#34;&gt;SDWebImageSVGCoder&lt;/a&gt; - coder for SVG vector format. Using built-in frameworks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageLottieCoder&#34;&gt;SDWebImageLottieCoder&lt;/a&gt; - coder for Lottie animation format. Based on &lt;a href=&#34;https://github.com/Samsung/rlottie&#34;&gt;rlottie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;and more from community!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom Caches&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageYYPlugin&#34;&gt;SDWebImageYYPlugin&lt;/a&gt; - plugin to support caching images with &lt;a href=&#34;https://github.com/ibireme/YYCache&#34;&gt;YYCache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImagePINPlugin&#34;&gt;SDWebImagePINPlugin&lt;/a&gt; - plugin to support caching images with &lt;a href=&#34;https://github.com/pinterest/PINCache&#34;&gt;PINCache&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom Loaders&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImagePhotosPlugin&#34;&gt;SDWebImagePhotosPlugin&lt;/a&gt; - plugin to support loading images from Photos (using &lt;code&gt;Photos.framework&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageLinkPlugin&#34;&gt;SDWebImageLinkPlugin&lt;/a&gt; - plugin to support loading images from rich link url, as well as &lt;code&gt;LPLinkView&lt;/code&gt; (using &lt;code&gt;LinkPresentation.framework&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Integration with 3rd party libraries&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageLottiePlugin&#34;&gt;SDWebImageLottiePlugin&lt;/a&gt; - plugin to support &lt;a href=&#34;https://github.com/airbnb/lottie-ios&#34;&gt;Lottie-iOS&lt;/a&gt;, vector animation rending with remote JSON files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageSVGKitPlugin&#34;&gt;SDWebImageSVGKitPlugin&lt;/a&gt; - plugin to support &lt;a href=&#34;https://github.com/SVGKit/SVGKit&#34;&gt;SVGKit&lt;/a&gt;, SVG rendering using Core Animation, iOS 8+/macOS 10.10+ support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageFLPlugin&#34;&gt;SDWebImageFLPlugin&lt;/a&gt; - plugin to support &lt;a href=&#34;https://github.com/Flipboard/FLAnimatedImage&#34;&gt;FLAnimatedImage&lt;/a&gt; as the engine for animated GIFs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImageYYPlugin&#34;&gt;SDWebImageYYPlugin&lt;/a&gt; - plugin to integrate &lt;a href=&#34;https://github.com/ibireme/YYImage&#34;&gt;YYImage&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/ibireme/YYCache&#34;&gt;YYCache&lt;/a&gt; for image rendering &amp;amp; caching&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Community driven popular libraries&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/firebase/FirebaseUI-iOS&#34;&gt;FirebaseUI&lt;/a&gt; - Firebase Storage binding for query images, based on SDWebImage loader system&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DylanVann/react-native-fast-image&#34;&gt;react-native-fast-image&lt;/a&gt; - React Native fast image component, based on SDWebImage Animated Image solution&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenFlutter/flutter_image_compress&#34;&gt;flutter_image_compress&lt;/a&gt; - Flutter compresses image plugin, based on SDWebImage WebP coder plugin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Make our lives easier&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/libwebp-Xcode&#34;&gt;libwebp-Xcode&lt;/a&gt; - A wrapper for &lt;a href=&#34;https://chromium.googlesource.com/webm/libwebp&#34;&gt;libwebp&lt;/a&gt; + an Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/libheif-Xcode&#34;&gt;libheif-Xcode&lt;/a&gt; - A wrapper for &lt;a href=&#34;https://github.com/strukturag/libheif&#34;&gt;libheif&lt;/a&gt; + an Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/libavif-Xcode&#34;&gt;libavif-Xcode&lt;/a&gt; - A wrapper for &lt;a href=&#34;https://github.com/AOMediaCodec/libavif&#34;&gt;libavif&lt;/a&gt; + an Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;and more third-party C/C++ image codec libraries with CocoaPods/Carthage/SwiftPM support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use those directly, or create similar components of your own, by using the customizable architecture of SDWebImage.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 9.0 or later&lt;/li&gt; &#xA; &lt;li&gt;tvOS 9.0 or later&lt;/li&gt; &#xA; &lt;li&gt;watchOS 2.0 or later&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.11 or later (10.15 for Catalyst)&lt;/li&gt; &#xA; &lt;li&gt;Xcode 11.0 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Backwards compatibility&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For iOS 8, macOS 10.10 or Xcode &amp;lt; 11, use &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/releases/tag/5.9.5&#34;&gt;any 5.x version up to 5.9.5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For iOS 7, macOS 10.9 or Xcode &amp;lt; 8, use &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/releases/tag/4.4.6&#34;&gt;any 4.x version up to 4.4.6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For macOS 10.8, use &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/releases/tag/4.3.0&#34;&gt;any 4.x version up to 4.3.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For iOS 5 and 6, use &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/releases/tag/3.7.6&#34;&gt;any 3.x version up to 3.7.6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For iOS &amp;lt; 5.0, please use the last &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/tree/2.0-compat&#34;&gt;2.0 version&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read this Readme doc&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage#how-to-use&#34;&gt;How to use section&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://sdwebimage.github.io/&#34;&gt;Latest Documentation&lt;/a&gt; and &lt;a href=&#34;http://cocoadocs.org/docsets/SDWebImage/&#34;&gt;CocoaDocs for old version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Try the example by downloading the project from Github or even easier using CocoaPods try &lt;code&gt;pod try SDWebImage&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Installation-Guide&#34;&gt;Installation Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/raw/master/Docs/SDWebImage-5.0-Migration-guide.md&#34;&gt;SDWebImage 5.0 Migration Guide&lt;/a&gt; to get an idea of the changes from 4.x to 5.x&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/raw/master/Docs/SDWebImage-4.0-Migration-guide.md&#34;&gt;SDWebImage 4.0 Migration Guide&lt;/a&gt; to get an idea of the changes from 3.x to 4.x&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Common-Problems&#34;&gt;Common Problems&lt;/a&gt; to find the solution for common problems&lt;/li&gt; &#xA; &lt;li&gt;Go to the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki&#34;&gt;Wiki Page&lt;/a&gt; for more information such as &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage&#34;&gt;Advanced Usage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who Uses It&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Find out &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Who-Uses-SDWebImage&#34;&gt;who uses SDWebImage&lt;/a&gt; and add your app to the list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/sdwebimage&#34;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;sdwebimage&#39;)&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/sdwebimage&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need IRC channel&lt;/strong&gt;, use &lt;a href=&#34;https://gitter.im/SDWebImage/community&#34;&gt;Gitter&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/raw/master/.github/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For &lt;strong&gt;development contribution guide&lt;/strong&gt;, read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/How-to-Contribute&#34;&gt;How-To-Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For &lt;strong&gt;understanding code architecture&lt;/strong&gt;, read the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/5.6-Code-Architecture-Analysis&#34;&gt;Code Architecture Analysis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How To Use&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Objective-C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;SDWebImage/SDWebImage.h&amp;gt;&#xA;...&#xA;[imageView sd_setImageWithURL:[NSURL URLWithString:@&#34;http://www.domain.com/path/to/image.jpg&#34;]&#xA;             placeholderImage:[UIImage imageNamed:@&#34;placeholder.png&#34;]];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SDWebImage&#xA;&#xA;imageView.sd_setImage(with: URL(string: &#34;http://www.domain.com/path/to/image.jpg&#34;), placeholderImage: UIImage(named: &#34;placeholder.png&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For details about how to use the library and clear examples, see &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/raw/master/Docs/HowToUse.md&#34;&gt;The detailed How to use&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Animated Images (GIF) support&lt;/h2&gt; &#xA;&lt;p&gt;In 5.0, we introduced a brand new mechanism for supporting animated images. This includes animated image loading, rendering, decoding, and also supports customizations (for advanced users).&lt;/p&gt; &#xA;&lt;p&gt;This animated image solution is available for &lt;code&gt;iOS&lt;/code&gt;/&lt;code&gt;tvOS&lt;/code&gt;/&lt;code&gt;macOS&lt;/code&gt;. The &lt;code&gt;SDAnimatedImage&lt;/code&gt; is subclass of &lt;code&gt;UIImage/NSImage&lt;/code&gt;, and &lt;code&gt;SDAnimatedImageView&lt;/code&gt; is subclass of &lt;code&gt;UIImageView/NSImageView&lt;/code&gt;, to make them compatible with the common frameworks APIs.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;SDAnimatedImageView&lt;/code&gt; supports the familiar image loading category methods, works like drop-in replacement for &lt;code&gt;UIImageView/NSImageView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t have &lt;code&gt;UIView&lt;/code&gt; (like &lt;code&gt;WatchKit&lt;/code&gt; or &lt;code&gt;CALayer&lt;/code&gt;)? you can still use &lt;code&gt;SDAnimatedPlayer&lt;/code&gt; the player engine for advanced playback and rendering.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#animated-image-50&#34;&gt;Animated Image&lt;/a&gt; for more detailed information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Objective-C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;SDAnimatedImageView *imageView = [SDAnimatedImageView new];&#xA;SDAnimatedImage *animatedImage = [SDAnimatedImage imageNamed:@&#34;image.gif&#34;];&#xA;imageView.image = animatedImage;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let imageView = SDAnimatedImageView()&#xA;let animatedImage = SDAnimatedImage(named: &#34;image.gif&#34;)&#xA;imageView.image = animatedImage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;FLAnimatedImage integration has its own dedicated repo&lt;/h4&gt; &#xA;&lt;p&gt;In order to clean up things and make our core project do less things, we decided that the &lt;code&gt;FLAnimatedImage&lt;/code&gt; integration does not belong here. From 5.0, this will still be available, but under a dedicated repo &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageFLPlugin&#34;&gt;SDWebImageFLPlugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are four ways to use SDWebImage in your project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;using CocoaPods&lt;/li&gt; &#xA; &lt;li&gt;using Carthage&lt;/li&gt; &#xA; &lt;li&gt;using Swift Package Manager&lt;/li&gt; &#xA; &lt;li&gt;manual install (build frameworks or embed Xcode Project)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation with CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Objective-C, which automates and simplifies the process of using 3rd-party libraries in your projects. See the &lt;a href=&#34;http://cocoapods.org/#get_started&#34;&gt;Get Started&lt;/a&gt; section for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Podfile&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;platform :ios, &#39;8.0&#39;&#xA;pod &#39;SDWebImage&#39;, &#39;~&amp;gt; 5.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Swift and static framework&lt;/h5&gt; &#xA;&lt;p&gt;Swift project previously had to use &lt;code&gt;use_frameworks!&lt;/code&gt; to make all Pods into dynamic framework to let CocoaPods work.&lt;/p&gt; &#xA;&lt;p&gt;However, starting with &lt;code&gt;CocoaPods 1.5.0+&lt;/code&gt; (with &lt;code&gt;Xcode 9+&lt;/code&gt;), which supports to build both Objective-C &amp;amp;&amp;amp; Swift code into static framework. You can use modular headers to use SDWebImage as static framework, without the need of &lt;code&gt;use_frameworks!&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;platform :ios, &#39;8.0&#39;&#xA;# Uncomment the next line when you want all Pods as static framework&#xA;# use_modular_headers!&#xA;pod &#39;SDWebImage&#39;, :modular_headers =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more on &lt;a href=&#34;http://blog.cocoapods.org/CocoaPods-1.5.0/&#34;&gt;CocoaPods 1.5.0 — Swift Static Libraries&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If not, you still need to add &lt;code&gt;use_frameworks!&lt;/code&gt; to use SDWebImage as dynamic framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;platform :ios, &#39;8.0&#39;&#xA;use_frameworks!&#xA;pod &#39;SDWebImage&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Subspecs&lt;/h4&gt; &#xA;&lt;p&gt;There are 2 subspecs available now: &lt;code&gt;Core&lt;/code&gt; and &lt;code&gt;MapKit&lt;/code&gt; (this means you can install only some of the SDWebImage modules. By default, you get just &lt;code&gt;Core&lt;/code&gt;, so if you need &lt;code&gt;MapKit&lt;/code&gt;, you need to specify it).&lt;/p&gt; &#xA;&lt;p&gt;Podfile example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;SDWebImage/MapKit&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation with Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a lightweight dependency manager for Swift and Objective-C. It leverages CocoaTouch modules and is less invasive than CocoaPods.&lt;/p&gt; &#xA;&lt;p&gt;To install with carthage, follow the instruction on &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Carthage users can point to this repository and use whichever generated framework they&#39;d like: SDWebImage, SDWebImageMapKit or both.&lt;/p&gt; &#xA;&lt;p&gt;Make the following entry in your Cartfile: &lt;code&gt;github &#34;SDWebImage/SDWebImage&#34;&lt;/code&gt; Then run &lt;code&gt;carthage update&lt;/code&gt; If this is your first time using Carthage in the project, you&#39;ll need to go through some additional steps as explained &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;over at Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: At this time, Carthage does not provide a way to build only specific repository subcomponents (or equivalent of CocoaPods&#39;s subspecs). All components and their dependencies will be built with the above command. However, you don&#39;t need to copy frameworks you aren&#39;t using into your project. For instance, if you aren&#39;t using &lt;code&gt;SDWebImageMapKit&lt;/code&gt;, feel free to delete that framework from the Carthage Build directory after &lt;code&gt;carthage update&lt;/code&gt; completes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Installation with Swift Package Manager (Xcode 11+)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; (SwiftPM) is a tool for managing the distribution of Swift code as well as C-family dependency. From Xcode 11, SwiftPM got natively integrated with Xcode.&lt;/p&gt; &#xA;&lt;p&gt;SDWebImage support SwiftPM from version 5.1.0. To use SwiftPM, you should use Xcode 11 to open your project. Click &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Swift Packages&lt;/code&gt; -&amp;gt; &lt;code&gt;Add Package Dependency&lt;/code&gt;, enter &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage.git&#34;&gt;SDWebImage repo&#39;s URL&lt;/a&gt;. Or you can login Xcode with your GitHub account and just type &lt;code&gt;SDWebImage&lt;/code&gt; to search.&lt;/p&gt; &#xA;&lt;p&gt;After select the package, you can choose the dependency type (tagged version, branch or commit). Then Xcode will setup all the stuff for you.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re a framework author and use SDWebImage as a dependency, update your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;    // 5.1.0 ..&amp;lt; 6.0.0&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/SDWebImage/SDWebImage.git&#34;, from: &#34;5.1.0&#34;)&#xA;    ],&#xA;    // ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual Installation Guide&lt;/h3&gt; &#xA;&lt;p&gt;See more on &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Installation-Guide#manual-installation-guide&#34;&gt;Manual install Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Import headers in your source files&lt;/h3&gt; &#xA;&lt;p&gt;In the source files where you need to use the library, import the umbrella header file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;SDWebImage/SDWebImage.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also recommend to use the module import syntax, available for CocoaPods(enable &lt;code&gt;modular_headers&lt;/code&gt;)/Carthage/SwiftPM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objecitivec&#34;&gt;@import SDWebImage;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build Project&lt;/h3&gt; &#xA;&lt;p&gt;At this point your workspace should build without error. If you are having problem, post to the Issue and the community can help you solve it.&lt;/p&gt; &#xA;&lt;h2&gt;Data Collection Practices&lt;/h2&gt; &#xA;&lt;p&gt;As required by the &lt;a href=&#34;https://developer.apple.com/app-store/app-privacy-details/&#34;&gt;App privacy details on the App Store&lt;/a&gt;, here&#39;s SDWebImage&#39;s list of &lt;a href=&#34;https://sdwebimage.github.io/DataCollection/index.html&#34;&gt;Data Collection Practices&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rs&#34;&gt;Olivier Poitrey&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Collaborators&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mythodeia&#34;&gt;Konstantinos K.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bpoplauschi&#34;&gt;Bogdan Poplauschi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skyline75489&#34;&gt;Chester Liu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dreampiggy&#34;&gt;DreamPiggy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zhongwuzw&#34;&gt;Wu Zhong&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all the people who have already contributed to SDWebImage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/SDWebImage/contributors.svg?width=890&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;All source code is licensed under the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;To learn about SDWebImage&#39;s architecture design for contribution, read &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/5.6-Code-Architecture-Analysis&#34;&gt;The Core of SDWebImage v5.6 Architecture&lt;/a&gt;. Thanks @looseyi for the post and translation.&lt;/p&gt; &#xA;&lt;h4&gt;High Level Diagram&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageHighLevelDiagram.jpeg&#34; title=&#34;SDWebImage high level diagram&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Overall Class Diagram&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageClassDiagram.png&#34; title=&#34;SDWebImage overall class diagram&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Top Level API Diagram&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageTopLevelClassDiagram.png&#34; title=&#34;SDWebImage top level API diagram&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Main Sequence Diagram&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageSequenceDiagram.png&#34; title=&#34;SDWebImage sequence diagram&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;More detailed diagrams&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageManagerClassDiagram.png&#34;&gt;Manager API Diagram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageCodersClassDiagram.png&#34;&gt;Coders API Diagram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageLoaderClassDiagram.png&#34;&gt;Loader API Diagram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageCacheClassDiagram.png&#34;&gt;Cache API Diagram&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>noah-nuebling/mac-mouse-fix</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/noah-nuebling/mac-mouse-fix</id>
    <link href="https://github.com/noah-nuebling/mac-mouse-fix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mac Mouse Fix - A simple way to make your mouse better.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/40808343/112161606-9814af80-8beb-11eb-9d2e-3105b4486bab.png&#34; alt=&#34;gh-header-v2&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- # Mac Mouse Fix --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/noah-nuebling/mac-mouse-fix/total.svg?sanitize=true&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mac Mouse Fix is a simple way to make your mouse better.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://noah-nuebling.github.io/mac-mouse-fix-website&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://github.com/noah-nuebling/mac-mouse-fix/releases&#34;&gt;Releases&lt;/a&gt; | &lt;a href=&#34;https://github.com/noah-nuebling/mac-mouse-fix/issues/new/choose&#34;&gt;Help &amp;amp; Feedback&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/noah-nuebling/mac-mouse-fix/releases/tag/2.0.0&#34;&gt;&lt;strong&gt;Mac Mouse Fix 2&lt;/strong&gt;&lt;/a&gt; now available!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MacPass/MacPass</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/MacPass/MacPass</id>
    <link href="https://github.com/MacPass/MacPass" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A native OS X KeePass client&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/MacPass/MacPass&#34;&gt;&lt;img src=&#34;https://travis-ci.org/MacPass/MacPass.svg?branch=continuous&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;MacPass&lt;/h1&gt; &#xA;&lt;p&gt;There are a lot of iOS KeePass tools around but a distinct lack of a good native macOS version. KeePass can be used via Mono on macOS but lacks vital functionality and feels sluggish and simply out of place.&lt;/p&gt; &#xA;&lt;p&gt;MacPass is an attempt to create a native macOS port of KeePass on a solid open source foundation with a vibrant community pushing it further to become the best KeePass client for macOS.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;All pre-built releases can be found at &lt;a href=&#34;https://github.com/MacPass/MacPass/releases&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An unsigned build of the current continuous tag can be found here: &lt;a href=&#34;https://github.com/MacPass/MacPass/releases/tag/continuous&#34;&gt;Continuous Build&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Due to the nature of the build it might be unstable, however this version contains all the latest changes and bug fixes!&lt;/p&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute by fixing a bug, adding a feature or improving localization you&#39;re awesome!&lt;/p&gt; &#xA;&lt;h2&gt;How to Build&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fetch the source of MacPass&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/MacPass/MacPass --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/Carthage/Carthage#installing-carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install all Dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd MacPass&#xA;carthage bootstrap --platform macOS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that you can build and run in Xcode. The following command will build and make the application available through Spotlight. If you run into signing issues take a look at &lt;a href=&#34;https://github.com/MacPass/MacPass/issues/92&#34;&gt;Issue #92&lt;/a&gt;. Since Sparkle is disabled only on the CI build and in Debug mode, you have to explicitly disable it in Release. Otherwise warnings on unsecure updates will appear.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xcodebuild -scheme MacPass -target MacPass -configuration Release CODE_SIGNING_REQUIRED=NO NO_SPARKLE=NO_SPARKLE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;Some questions might be answered in the &lt;a href=&#34;https://github.com/MacPass/MacPass/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Another place to look is the IRC channel &lt;a href=&#34;irc://irc.freenode.org/macpass&#34;&gt;#macpass&lt;/a&gt; on &lt;a href=&#34;irc://irc.freenode.org&#34;&gt;irc.freenode.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or follow the Twitter account &lt;a href=&#34;https://twitter.com/MacPassApp&#34;&gt;@MacPassApp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;System Requirement&lt;/h2&gt; &#xA;&lt;p&gt;MacPass 0.7 requires macOS 10.10 Yosemite or later. Earlier versions of MacPass require macOS 10.8 Mountain Lion or later.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;The Status can be found on the dedicated &lt;a href=&#34;https://github.com/MacPass/MacPass/wiki/Status&#34;&gt;Wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What does it look like?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/mstarke/MacPass/master/Assets/Screenshots/MacPass.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;More Screenshots in the &lt;a href=&#34;https://github.com/MacPass/MacPass/wiki/Screenshots&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.keepassx.org&#34;&gt;KeePassX&lt;/a&gt; and its fork &lt;a href=&#34;https://github.com/keepassxreboot/keepassxc&#34;&gt;KeePassXC&lt;/a&gt;. Qt based cross plattform port.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.kyuran.be/logiciels/kypass4mac/&#34;&gt;KyPass Companion&lt;/a&gt;. Native macOS client.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://keeweb.info&#34;&gt;KeeWeb&lt;/a&gt;. Electron based cross plattform port. Since it&#39;s browser based you can pretty much run it anywhere.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MacPass, a KeePass compatible Password Manager for OS X Copyright (c) 2012-2017 Michael Starke (HicknHack Software GmbH) and all &lt;a href=&#34;https://github.com/MacPass/MacPass/graphs/contributors&#34;&gt;MacPass contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/p&gt; &#xA;&lt;p&gt;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;App Store&lt;/h2&gt; &#xA;&lt;p&gt;Due to being licensed under GPLv3 it&#39;s not possible to publish a version of MacPass on the App Store. For further details, take a look at the &lt;a href=&#34;https://www.fsf.org/news/2010-05-app-store-compliance&#34;&gt;explanation&lt;/a&gt; of the Free Software Foundation.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;The following list might not be complete, please refer to &lt;a href=&#34;https://github.com/MacPass/MacPass/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr+is%3Aclosed+is%3Amerged&#34;&gt;merged Pull Requests&lt;/a&gt; on GitHub for more details. Please open an issue if you think someone is missing from this list!&lt;/p&gt; &#xA;&lt;h3&gt;Art&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://iiro.jappinen.me&#34;&gt;Iiro Jäppinen&lt;/a&gt; MacPass icon&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/thomscode&#34;&gt;Thom Williams&lt;/a&gt; Document icons&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JoannaOlsen&#34;&gt;Joanna Olsen&lt;/a&gt; Database Icons&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:github.mnms@mamber.net&#34;&gt;ad&lt;/a&gt;, &lt;a href=&#34;mailto:30745465+Arc676@users.noreply.github.com&#34;&gt;Alessandro Vinciguerra&lt;/a&gt;, &lt;a href=&#34;mailto:alex@alexborisov.org&#34;&gt;Alex Borisov&lt;/a&gt;, &lt;a href=&#34;mailto:seeholzer@gmail.com&#34;&gt;Alex Seeholzer&lt;/a&gt;, &lt;a href=&#34;mailto:amd@gurge.com&#34;&gt;amd&lt;/a&gt;, &lt;a href=&#34;mailto:me@andrewschleifer.name&#34;&gt;Andrew Schleifer&lt;/a&gt;, &lt;a href=&#34;mailto:antoine@carrincazeaux.fr&#34;&gt;AntoineCa&lt;/a&gt;, &lt;a href=&#34;mailto:anton@glezman.ru&#34;&gt;Anton Glezman&lt;/a&gt;, &lt;a href=&#34;mailto:b@stbe.at&#34;&gt;Benjamin Steinwender&lt;/a&gt;, &lt;a href=&#34;mailto:bieder.martin@googlemail.com&#34;&gt;binarious&lt;/a&gt;, &lt;a href=&#34;mailto:cansrau@gmail.com&#34;&gt;Can Rau&lt;/a&gt;, &lt;a href=&#34;mailto:ravemir@users.noreply.github.com&#34;&gt;Carlos Filipe Simões&lt;/a&gt;, &lt;a href=&#34;mailto:skyline75489@outlook.com&#34;&gt;Chester Liu&lt;/a&gt;, &lt;a href=&#34;mailto:chhom.seng@gmail.com&#34;&gt;Chhom Seng&lt;/a&gt;, &lt;a href=&#34;mailto:christoph.leimbrock@gmx.de&#34;&gt;Christoph Leimbrock&lt;/a&gt;, &lt;a href=&#34;mailto:cjhutchi@users.noreply.github.com&#34;&gt;Cory Hutchison&lt;/a&gt;, &lt;a href=&#34;mailto:buttcmd@gmail.com&#34;&gt;César Arratia&lt;/a&gt;, &lt;a href=&#34;mailto:daniele.polencic@gmail.com&#34;&gt;Daniele Polencic&lt;/a&gt;, &lt;a href=&#34;mailto:vojta.j@gmail.com&#34;&gt;darnel&lt;/a&gt;, &lt;a href=&#34;mailto:deiwin.sarjas@gmail.com&#34;&gt;Deiwin Sarjas&lt;/a&gt;, &lt;a href=&#34;mailto:denizt@users.noreply.github.com&#34;&gt;Deniz Türkoglu&lt;/a&gt;, &lt;a href=&#34;mailto:git@bolio.nl&#34;&gt;Dennis Bolio&lt;/a&gt;, &lt;a href=&#34;mailto:dylansmith@gmail.com&#34;&gt;Dylan Smith&lt;/a&gt;, &lt;a href=&#34;mailto:37532252+eiermaaaan@users.noreply.github.com&#34;&gt;eiermaaaan&lt;/a&gt;, &lt;a href=&#34;mailto:m+github@kud.io&#34;&gt;Erwann Mest&lt;/a&gt;, &lt;a href=&#34;mailto:filipe@ktorn.com&#34;&gt;Filipe Farinha&lt;/a&gt;, &lt;a href=&#34;mailto:florian.gouy@gmail.com&#34;&gt;floriangouy&lt;/a&gt;, &lt;a href=&#34;mailto:info@francescoservida.ch&#34;&gt;Francesco Servida&lt;/a&gt;, &lt;a href=&#34;mailto:frank.enderle@anamica.de&#34;&gt;Frank Enderle&lt;/a&gt;, &lt;a href=&#34;mailto:FrankKooij@users.noreply.github.com&#34;&gt;Frank Kooij&lt;/a&gt;, &lt;a href=&#34;mailto:gryckeboer@jouve.com&#34;&gt;Gaétan Ryckeboer&lt;/a&gt;, &lt;a href=&#34;mailto:git@geigi.de&#34;&gt;Geigi&lt;/a&gt;, &lt;a href=&#34;mailto:gsnowiii@gmail.com&#34;&gt;George Snow&lt;/a&gt;, &lt;a href=&#34;mailto:henridejong@gmail.com&#34;&gt;Henri de Jong&lt;/a&gt;, &lt;a href=&#34;mailto:jamesrhurst@outlook.com&#34;&gt;James Hurst&lt;/a&gt;, &lt;a href=&#34;mailto:mister.jannick@gmail.com&#34;&gt;Jannick Hemelhof&lt;/a&gt;, &lt;a href=&#34;mailto:jeffrey.ying86@live.com&#34;&gt;Jefftree&lt;/a&gt;, &lt;a href=&#34;mailto:Jellyfrog@users.noreply.github.com&#34;&gt;Jellyfrog&lt;/a&gt;, &lt;a href=&#34;mailto:mail@jessereppin.de&#34;&gt;Jesse Reppin&lt;/a&gt;, &lt;a href=&#34;mailto:jo4flash@gmail.com&#34;&gt;Joanna Olsen&lt;/a&gt;, &lt;a href=&#34;mailto:jhalstead85@gmail.com&#34;&gt;Josh Halstead&lt;/a&gt;, &lt;a href=&#34;mailto:kurt@soapbox-software.com&#34;&gt;Kurt&lt;/a&gt;, &lt;a href=&#34;mailto:laurent22@users.noreply.github.com&#34;&gt;Laurent Cozic&lt;/a&gt;, &lt;a href=&#34;mailto:lenucksi@users.noreply.github.com&#34;&gt;Lenucksi&lt;/a&gt;, &lt;a href=&#34;mailto:lfaoro@users.noreply.github.com&#34;&gt;Leonardo Faoro&lt;/a&gt;, &lt;a href=&#34;mailto:liam.anderson.91@gmail.com&#34;&gt;Liam Anderson&lt;/a&gt;, &lt;a href=&#34;mailto:moises@perez.lt&#34;&gt;m0yP&lt;/a&gt;, &lt;a href=&#34;mailto:m.l.terpstra@student.rug.nl&#34;&gt;Maarten Terpstra&lt;/a&gt;, &lt;a href=&#34;mailto:mariosangiorgio@gmail.com&#34;&gt;Mario Sangiorgio&lt;/a&gt;, &lt;a href=&#34;mailto:michel.bibal@gmail.com&#34;&gt;MBibal&lt;/a&gt;, &lt;a href=&#34;mailto:mbelz@outlook.de&#34;&gt;Michael Belz&lt;/a&gt;, &lt;a href=&#34;mailto:viacheslav.sychov@gmail.com&#34;&gt;MichaelKo&lt;/a&gt;, &lt;a href=&#34;mailto:michalj@webii.pl&#34;&gt;Michal Jaglewicz&lt;/a&gt;, &lt;a href=&#34;mailto:moises@perez.lt&#34;&gt;Moises Perez&lt;/a&gt;, &lt;a href=&#34;mailto:mrdoggy.all@gmail.com&#34;&gt;mrdoggy&lt;/a&gt;, &lt;a href=&#34;mailto:nathanlandis@gmail.com&#34;&gt;Nathan Landis&lt;/a&gt;, &lt;a href=&#34;mailto:nmadura@umich.edu&#34;&gt;Nathaniel Madura&lt;/a&gt;, &lt;a href=&#34;mailto:d.dzieduch@gmail.com&#34;&gt;neuroine&lt;/a&gt;, &lt;a href=&#34;mailto:buddax2@gmail.com&#34;&gt;Oleksandr Yakubchyk&lt;/a&gt;, &lt;a href=&#34;mailto:magebarf@gmail.com&#34;&gt;Patrik Thunström&lt;/a&gt;, &lt;a href=&#34;mailto:rdoering.info@gmail.com&#34;&gt;rdoering&lt;/a&gt;, &lt;a href=&#34;mailto:remi6397@gmail.com&#34;&gt;remi6397&lt;/a&gt;, &lt;a href=&#34;mailto:roman-verchikov@users.noreply.github.com&#34;&gt;Roman Verchikov&lt;/a&gt;, &lt;a href=&#34;mailto:ryan@timewasted.me&#34;&gt;Ryan Rogers&lt;/a&gt;, &lt;a href=&#34;mailto:sitsofe@yahoo.com&#34;&gt;Sitsofe Wheeler&lt;/a&gt;, &lt;a href=&#34;mailto:schtee.taylor@gmail.com&#34;&gt;Stephen Taylor&lt;/a&gt;, &lt;a href=&#34;mailto:45923716+thesoundofom@users.noreply.github.com&#34;&gt;thesoundofom&lt;/a&gt;, &lt;a href=&#34;mailto:thomscode@gmail.com&#34;&gt;Thom&lt;/a&gt;, &lt;a href=&#34;mailto:tjacoby@gmail.com&#34;&gt;Thorsten Jacoby&lt;/a&gt;, &lt;a href=&#34;mailto:git@vhschlenker.de&#34;&gt;Veit-Hendrik Schlenker&lt;/a&gt;, &lt;a href=&#34;mailto:Volcyy@users.noreply.github.com&#34;&gt;Volcyy&lt;/a&gt;, &lt;a href=&#34;mailto:yono@toojuice.com&#34;&gt;Yonatan Mittlefehldt&lt;/a&gt;, &lt;a href=&#34;mailto:l2dy@icloud.com&#34;&gt;Zero King&lt;/a&gt;, &lt;a href=&#34;mailto:patchao2000@gmail.com&#34;&gt;Zhao Peng&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;This Project is based upon the following work:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MacPass/KeePassKit&#34;&gt;KeePassKit&lt;/a&gt; Copyright 2012 HicknHack Software GmbH. All rights reserved. &lt;a href=&#34;https://github.com/mstarke/HNHUi&#34;&gt;HNHUi&lt;/a&gt; Copyright 2012 HicknHack Software GmbH. All rights reserved. &lt;a href=&#34;https://github.com/MiniKeePass/MiniKeePass&#34;&gt;MiniKeePass&lt;/a&gt; Copyright 2011 Jason Rush and John Flanagan. All rights reserved. &lt;a href=&#34;https://github.com/mpowrie/KeePassLib&#34;&gt;KeePass Database Library&lt;/a&gt; Copyright 2010 Qiang Yu. All rights reserved. &lt;a href=&#34;https://github.com/Perspx/PXSourceList&#34;&gt;PXSourceList&lt;/a&gt; Copyright 2011, Alex Rozanski. All rights reserved. &lt;a href=&#34;https://github.com/karelia/SecurityInterface&#34;&gt;KSPasswordField&lt;/a&gt; Copyright 2012 Mike Abdullah, Karelia Software. All rights reserved. &lt;a href=&#34;https://github.com/davedelong/DDHotKey&#34;&gt;DDHotKey&lt;/a&gt; Copyright &lt;a href=&#34;http://www.davedelong.com&#34;&gt;Dave DeLong&lt;/a&gt;. All rights reserved. &lt;a href=&#34;http://sparkle.andymatuschak.org&#34;&gt;Sparkle&lt;/a&gt; Copyright 2006 Andy Matuschak &lt;a href=&#34;https://github.com/mattt/TransformerKit&#34;&gt;TransformerKit&lt;/a&gt; Licensed under MIT license. Copyright 2012 &lt;a href=&#34;http://mattt.me/&#34;&gt;Mattt Thompson&lt;/a&gt;. All rights reserved &lt;a href=&#34;https://github.com/mstarke/MJGFoundation&#34;&gt;MJGFoundation&lt;/a&gt; Licensed under BSD 2-Clause License. Copyright 2011 &lt;a href=&#34;http://www.galloway.me.uk/&#34;&gt;Matt Galloway&lt;/a&gt;. All rights reserved. &lt;a href=&#34;http://wafflesoftware.net/shortcut/&#34;&gt;ShortcutRecorder&lt;/a&gt; Copyright 2006—2013 all &lt;a href=&#34;http://wafflesoftware.net/shortcut/contributors/&#34;&gt;Shortcut Recorder contributors&lt;/a&gt; &lt;a href=&#34;http://jedda.me/2012/03/verifying-plugin-bundles-using-code-signing/&#34;&gt;NSBundle Codesignature Check&lt;/a&gt; Copyright 2014 &lt;a href=&#34;http://jedda.me&#34;&gt;Jedda Wignall&lt;/a&gt;. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;See submodules for additional Licenses&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flattr.com/thing/1550529/mstarkeMacPass-on-GitHub&#34;&gt;&lt;img src=&#34;https://api.flattr.com/button/flattr-badge-large.png&#34; alt=&#34;Flattr this&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FLEXTool/FLEX</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/FLEXTool/FLEX</id>
    <link href="https://github.com/FLEXTool/FLEX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An in-app debugging and exploration tool for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FLEX&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/?q=FLEX&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/FLEX.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Flipboard/FLEX/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/FLEX.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/FLEX.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ryanolsonk&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contact-@ryanolsonk-blue.svg?style=flat&#34; alt=&#34;Twitter: @ryanolsonk&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/Flipboard/FLEX&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Flipboard/FLEX.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;FLEX (Flipboard Explorer) is a set of in-app debugging and exploration tools for iOS development. When presented, FLEX shows a toolbar that lives in a window above your application. From this toolbar, you can view and modify nearly every piece of state in your running application.&lt;/p&gt; &#xA;&lt;img alt=&#34;Demo&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70185687-e842c800-16af-11ea-8ef9-9e071380a462.gif&#34;&gt; &#xA;&lt;h2&gt;Give Yourself Debugging Superpowers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inspect and modify views in the hierarchy.&lt;/li&gt; &#xA; &lt;li&gt;See the properties and ivars on any object.&lt;/li&gt; &#xA; &lt;li&gt;Dynamically modify many properties and ivars.&lt;/li&gt; &#xA; &lt;li&gt;Dynamically call instance and class methods.&lt;/li&gt; &#xA; &lt;li&gt;Observe detailed network request history with timing, headers, and full responses.&lt;/li&gt; &#xA; &lt;li&gt;Add your own simulator keyboard shortcuts.&lt;/li&gt; &#xA; &lt;li&gt;View system log messages (e.g. from &lt;code&gt;NSLog&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Access any live object via a scan of the heap.&lt;/li&gt; &#xA; &lt;li&gt;View the file system within your app&#39;s sandbox.&lt;/li&gt; &#xA; &lt;li&gt;Browse SQLite/Realm databases in the file system.&lt;/li&gt; &#xA; &lt;li&gt;Trigger 3D touch in the simulator using the control, shift, and command keys.&lt;/li&gt; &#xA; &lt;li&gt;Explore all classes in your app and linked systems frameworks (public and private).&lt;/li&gt; &#xA; &lt;li&gt;Quickly access useful objects such as &lt;code&gt;[UIApplication sharedApplication]&lt;/code&gt;, the app delegate, the root view controller on the key window, and more.&lt;/li&gt; &#xA; &lt;li&gt;Dynamically view and modify &lt;code&gt;NSUserDefaults&lt;/code&gt; values.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unlike many other debugging tools, FLEX runs entirely inside your app, so you don&#39;t need to be connected to LLDB/Xcode or a different remote debugging server. It works well in the simulator and on physical devices.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In the iOS simulator, you can use keyboard shortcuts to activate FLEX. &lt;code&gt;f&lt;/code&gt; will toggle the FLEX toolbar. Hit the &lt;code&gt;?&lt;/code&gt; key for a full list of shortcuts. You can also show FLEX programmatically:&lt;/p&gt; &#xA;&lt;p&gt;Short version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Objective-C&#xA;[[FLEXManager sharedManager] showExplorer];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Swift&#xA;FLEXManager.shared.showExplorer()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More complete version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#if DEBUG&#xA;#import &#34;FLEXManager.h&#34;&#xA;#endif&#xA;&#xA;...&#xA;&#xA;- (void)handleSixFingerQuadrupleTap:(UITapGestureRecognizer *)tapRecognizer&#xA;{&#xA;#if DEBUG&#xA;    if (tapRecognizer.state == UIGestureRecognizerStateRecognized) {&#xA;        // This could also live in a handler for a keyboard shortcut, debug menu item, etc.&#xA;        [[FLEXManager sharedManager] showExplorer];&#xA;    }&#xA;#endif&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Aside: tvOS&lt;/h4&gt; &#xA;&lt;p&gt;FLEX itself does not support tvOS out of the box. However, others have taken it upon themselves to port FLEX to tvOS. If you need tvOS support, seek out one of these forks. &lt;a href=&#34;https://github.com/lechium/FLEX/tree/tvos&#34;&gt;Here is one such fork.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feature Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Modify Views&lt;/h3&gt; &#xA;&lt;p&gt;Once a view is selected, you can tap on the info bar below the toolbar to present more details about the view. From there, you can modify properties and call methods.&lt;/p&gt; &#xA;&lt;img alt=&#34;Modify Views&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271816-c5c2b480-176c-11ea-8bf4-2c5a755bc392.gif&#34;&gt; &#xA;&lt;h3&gt;Network History&lt;/h3&gt; &#xA;&lt;p&gt;When enabled, network debugging allows you to view all requests made using NSURLConnection or NSURLSession. Settings allow you to adjust what kind of response bodies get cached and the maximum size limit of the response cache. You can choose to have network debugging enabled automatically on app launch. This setting is persisted across launches.&lt;/p&gt; &#xA;&lt;img alt=&#34;Network History&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271876-e5f27380-176c-11ea-98ef-24170205b706.gif&#34;&gt; &#xA;&lt;h3&gt;All Objects on the Heap&lt;/h3&gt; &#xA;&lt;p&gt;FLEX queries malloc for all the live allocated memory blocks and searches for ones that look like objects. You can see everything from here.&lt;/p&gt; &#xA;&lt;img alt=&#34;Heap/Live Objects Explorer&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271850-d83cee00-176c-11ea-9750-ee3a479c6769.gif&#34;&gt; &#xA;&lt;h3&gt;Explore-at-address&lt;/h3&gt; &#xA;&lt;p&gt;If you get your hands on an arbitrary address, you can try explore the object at that address, and FLEX will open it if it can verify the address points to a valid object. If FLEX isn&#39;t sure, it&#39;ll warn you and refuse to dereference the pointer. If you know better, however, you can choose to explore it anyway by choosing &#34;Unsafe Explore&#34;&lt;/p&gt; &#xA;&lt;img alt=&#34;Address Explorer&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271798-bb081f80-176c-11ea-806d-9d74ac293641.gif&#34;&gt; &#xA;&lt;h3&gt;Simulator Keyboard Shortcuts&lt;/h3&gt; &#xA;&lt;p&gt;Default keyboard shortcuts allow you to activate the FLEX tools, scroll with the arrow keys, and close modals using the escape key. You can also add custom keyboard shortcuts via &lt;code&gt;-[FLEXManager registerSimulatorShortcutWithKey:modifiers:action:description]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;img alt=&#34;Simulator Keyboard Shortcuts&#34; width=&#34;40%&#34; height=&#34;40%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70272984-d3793980-176e-11ea-89a2-66d187d71b4c.png&#34;&gt; &#xA;&lt;h3&gt;File Browser&lt;/h3&gt; &#xA;&lt;p&gt;View the file system within your app&#39;s bundle or sandbox container. FLEX shows file sizes, image previews, and pretty prints &lt;code&gt;.json&lt;/code&gt; and &lt;code&gt;.plist&lt;/code&gt; files. You can rename and delete files and folders. You can &#34;share&#34; any file if you want to inspect them outside of your app.&lt;/p&gt; &#xA;&lt;img alt=&#34;File Browser&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271831-d115e000-176c-11ea-8078-ada291f980f3.gif&#34;&gt; &#xA;&lt;h3&gt;SQLite Browser&lt;/h3&gt; &#xA;&lt;p&gt;SQLite database files (with either &lt;code&gt;.db&lt;/code&gt; or &lt;code&gt;.sqlite&lt;/code&gt; extensions), or &lt;a href=&#34;https://realm.io&#34;&gt;Realm&lt;/a&gt; database files can be explored using FLEX. The database browser lets you view all tables, and individual tables can be sorted by tapping column headers.&lt;/p&gt; &#xA;&lt;img alt=&#34;SQLite Browser&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271881-ea1e9100-176c-11ea-9a42-01618311c869.gif&#34;&gt; &#xA;&lt;h3&gt;3D Touch in the Simulator&lt;/h3&gt; &#xA;&lt;p&gt;Using a combination of the command, control, and shift keys, you can simulate different levels of 3D touch pressure in the simulator. Each key contributes 1/3 of maximum possible force. Note that you need to move the touch slightly to get pressure updates.&lt;/p&gt; &#xA;&lt;img alt=&#34;Simulator 3D Touch&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://cloud.githubusercontent.com/assets/1422245/11786615/5d4ef96c-a23c-11e5-975e-67275341e439.gif&#34;&gt; &#xA;&lt;h3&gt;Explore Loaded Libraries&lt;/h3&gt; &#xA;&lt;p&gt;Go digging for all things public and private. To learn more about a class, you can create an instance of it and explore its default state. You can also type in a class name to jump to that class directly if you know which class you&#39;re looking for.&lt;/p&gt; &#xA;&lt;img alt=&#34;Loaded Libraries Exploration&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271868-dffc9280-176c-11ea-8704-a0c05b75cc5f.gif&#34;&gt; &#xA;&lt;h3&gt;NSUserDefaults Editing&lt;/h3&gt; &#xA;&lt;p&gt;FLEX allows you to edit defaults that are any combination of strings, numbers, arrays, and dictionaries. The input is parsed as &lt;code&gt;JSON&lt;/code&gt;. If other kinds of objects are set for a defaults key (i.e. &lt;code&gt;NSDate&lt;/code&gt;), you can view them but not edit them.&lt;/p&gt; &#xA;&lt;img alt=&#34;NSUserDefaults Editing&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271889-edb21800-176c-11ea-92b4-71e07d2b6ce7.gif&#34;&gt; &#xA;&lt;h3&gt;Learning from Other Apps&lt;/h3&gt; &#xA;&lt;p&gt;The code injection is left as an exercise for the reader. &lt;span&gt;😇&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img alt=&#34;Springboard Lock Screen&#34; width=&#34;25%&#34; height=&#34;25%&#34; src=&#34;https://engineering.flipboard.com/assets/flex/flex-readme-reverse-1.png&#34;&gt; &lt;img alt=&#34;Springboard Home Screen&#34; width=&#34;25%&#34; height=&#34;25%&#34; src=&#34;https://engineering.flipboard.com/assets/flex/flex-readme-reverse-2.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;FLEX requires an app that targets iOS 9 or higher. To run the Example project, open a Terminal window in the Example/ folder and run &lt;code&gt;pod install&lt;/code&gt;, then open the generated workspace.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;FLEX is available on &lt;a href=&#34;https://cocoapods.org/pods/FLEX&#34;&gt;CocoaPods&lt;/a&gt;. Simply add the following line to your podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FLEX&#39;, :configurations =&amp;gt; [&#39;Debug&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;flipboard/FLEX&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Buck&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Buck, you may want to silence some of the warnings emitted by FLEX. You will need to build FLEX as an &lt;code&gt;apple_library&lt;/code&gt; and pass the &lt;code&gt;-Wno-unsupported-availability-guard&lt;/code&gt; flag, as well as the other warning flags below to disable any other warnings FLEX may have.&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Manually add the files in &lt;code&gt;Classes/&lt;/code&gt; to your Xcode project, or just drag in the entire &lt;code&gt;FLEX/&lt;/code&gt; folder. Be sure to exclude FLEX from &lt;code&gt;Release&lt;/code&gt; builds or your app will be rejected.&lt;/p&gt; &#xA;&lt;h5&gt;Silencing warnings&lt;/h5&gt; &#xA;&lt;p&gt;Add the following flags to to &lt;strong&gt;Other Warnings Flags&lt;/strong&gt; in &lt;strong&gt;Build Settings:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-Wno-deprecated-declarations&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Wno-strict-prototypes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Wno-unsupported-availability-guard&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Include the dependency in the &lt;code&gt;depdendencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/FLEXTool/FLEX.git&#34;, .upToNextMajor(from: &#34;4.3.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, include the library in your target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;.target(&#xA;    name: &#34;YourDependency&#34;,&#xA;    dependencies: [&#xA;        &#34;FLEX&#34;&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Excluding FLEX from Release (App Store) Builds&lt;/h2&gt; &#xA;&lt;p&gt;FLEX makes it easy to explore the internals of your app, so it is not something you should expose to your users. Fortunately, it is easy to exclude FLEX files from Release builds. The strategies differ depending on how you integrated FLEX in your project, and are described below.&lt;/p&gt; &#xA;&lt;p&gt;Wrap the places in your code where you integrate FLEX with an &lt;code&gt;#if DEBUG&lt;/code&gt; statement to ensure the tool is only accessible in your &lt;code&gt;Debug&lt;/code&gt; builds and to avoid errors in your &lt;code&gt;Release&lt;/code&gt; builds. For more help with integrating FLEX, see the example project.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;CocoaPods automatically excludes FLEX from release builds if you only specify the Debug configuration for FLEX in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FLEX&#39;, :configurations =&amp;gt; [&#39;Debug&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Do NOT add &lt;code&gt;FLEX.framework&lt;/code&gt; to the embedded binaries of your target, as it would otherwise be included in all builds (therefore also in release ones).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Instead, add &lt;code&gt;$(PROJECT_DIR)/Carthage/Build/iOS&lt;/code&gt; to your target &lt;em&gt;Framework Search Paths&lt;/em&gt; (this setting might already be present if you already included other frameworks with Carthage). This makes it possible to import the FLEX framework from your source files. It does not harm if this setting is added for all configurations, but it should at least be added for the debug one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a &lt;em&gt;Run Script Phase&lt;/em&gt; to your target (inserting it after the existing &lt;code&gt;Link Binary with Libraries&lt;/code&gt; phase, for example), and which will embed &lt;code&gt;FLEX.framework&lt;/code&gt; in debug builds only:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;if [ &#34;$CONFIGURATION&#34; == &#34;Debug&#34; ]; then&#xA;  /usr/local/bin/carthage copy-frameworks&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, add &lt;code&gt;$(SRCROOT)/Carthage/Build/iOS/FLEX.framework&lt;/code&gt; as input file of this script phase.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;75%&#34; height=&#34;75%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70274062-0d4b3f80-1771-11ea-94ea-ca7e7b5ca244.jpg&#34;&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;In Xcode, navigate to &lt;code&gt;Build Settings &amp;gt; Build Options &amp;gt; Excluded Source File Names&lt;/code&gt;. For your &lt;code&gt;Release&lt;/code&gt; configuration, set it to &lt;code&gt;FLEX.o&lt;/code&gt; like this to exclude all files with the &lt;code&gt;FLEX&lt;/code&gt; prefix:&lt;/p&gt; &#xA;&lt;img width=&#34;75%&#34; height=&#34;75%&#34; src=&#34;https://user-images.githubusercontent.com/1234765/98673373-8545c080-2357-11eb-9587-0743998e23ba.png&#34;&gt; &#xA;&lt;h3&gt;FLEX files added manually to a project&lt;/h3&gt; &#xA;&lt;p&gt;In Xcode, navigate to &lt;code&gt;Build Settings &amp;gt; Build Options &amp;gt; Excluded Source File Names&lt;/code&gt;. For your &lt;code&gt;Release&lt;/code&gt; configuration, set it to &lt;code&gt;FLEX*&lt;/code&gt; like this to exclude all files with the &lt;code&gt;FLEX&lt;/code&gt; prefix:&lt;/p&gt; &#xA;&lt;img width=&#34;75%&#34; height=&#34;75%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70281926-e21d1c00-1781-11ea-92eb-aee340791da8.png&#34;&gt; &#xA;&lt;h2&gt;Additional Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When setting fields of type &lt;code&gt;id&lt;/code&gt; or values in &lt;code&gt;NSUserDefaults&lt;/code&gt;, FLEX attempts to parse the input string as &lt;code&gt;JSON&lt;/code&gt;. This allows you to use a combination of strings, numbers, arrays, and dictionaries. If you want to set a string value, it must be wrapped in quotes. For ivars or properties that are explicitly typed as &lt;code&gt;NSStrings&lt;/code&gt;, quotes are not required.&lt;/li&gt; &#xA; &lt;li&gt;You may want to disable the exception breakpoint while using FLEX. Certain functions that FLEX uses throw exceptions when they get input they can&#39;t handle (i.e. &lt;code&gt;NSGetSizeAndAlignment()&lt;/code&gt;). FLEX catches these to avoid crashing, but your breakpoint will get hit if it is active.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks &amp;amp; Credits&lt;/h2&gt; &#xA;&lt;p&gt;FLEX builds on ideas and inspiration from open source tools that came before it. The following resources have been particularly helpful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NSExceptional/MirrorKit&#34;&gt;MirrorKit&lt;/a&gt;: an Objective-C wrapper around the Objective-C runtime.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domesticcatsoftware/DCIntrospect&#34;&gt;DCIntrospect&lt;/a&gt;: view hierarchy debugging for the iOS simulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/PonyDebugger&#34;&gt;PonyDebugger&lt;/a&gt;: network, core data, and view hierarchy debugging using the Chrome Developer Tools interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mikeash.com/pyblog/&#34;&gt;Mike Ash&lt;/a&gt;: well written, informative blog posts on all things obj-c and more. The links below were very useful for this project:&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikeash/MAObjCRuntime&#34;&gt;MAObjCRuntime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mikeash.com/pyblog/friday-qa-2013-02-08-lets-build-key-value-coding.html&#34;&gt;Let&#39;s Build Key Value Coding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mikeash.com/pyblog/friday-qa-2013-09-27-arm64-and-you.html&#34;&gt;ARM64 and You&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/heardrwt/RHObjectiveBeagle&#34;&gt;RHObjectiveBeagle&lt;/a&gt;: a tool for scanning the heap for live objects. It should be noted that the source code of RHObjectiveBeagle was not consulted due to licensing concerns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.opensource.apple.com/source/lldb/lldb-179.1/examples/darwin/heap_find/heap/heap_find.cpp&#34;&gt;heap_find.cpp&lt;/a&gt;: an example of enumerating malloc blocks for finding objects on the heap.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/samdmarshall/17f4e66b5e2e579fd396&#34;&gt;Gist&lt;/a&gt; from &lt;a href=&#34;https://github.com/samdmarshall&#34;&gt;@samdmarshall&lt;/a&gt;: another example of enumerating malloc blocks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sealiesoftware.com/blog/archive/2013/09/24/objc_explain_Non-pointer_isa.html&#34;&gt;Non-pointer isa&lt;/a&gt;: an explanation of changes to the isa field on iOS for ARM64 and mention of the useful &lt;code&gt;objc_debug_isa_class_mask&lt;/code&gt; variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicklockwood/GZIP&#34;&gt;GZIP&lt;/a&gt;: A library for compressing/decompressing data on iOS using libz.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ccgus/fmdb&#34;&gt;FMDB&lt;/a&gt;: This is an Objective-C wrapper around SQLite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/indragiek/InAppViewDebugger&#34;&gt;InAppViewDebugger&lt;/a&gt;: The inspiration and reference implementation for FLEX 4&#39;s 3D view explorer, by @indragiek.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://github.com/Flipboard/FLEX/raw/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift runtime introspection (swift classes, swift objects on the heap, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Add new NSUserDefault key/value pairs on the fly&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>AliSoftware/OHHTTPStubs</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/AliSoftware/OHHTTPStubs</id>
    <link href="https://github.com/AliSoftware/OHHTTPStubs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stub your network requests easily! Test your apps with fake network data and custom response time, response code and headers!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OHHTTPStubs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/OHHTTPStubs&#34;&gt;&lt;img src=&#34;http://cocoapod-badges.herokuapp.com/p/OHHTTPStubs/badge.png&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-2.x%2F3.x%2F4.x%2F5.x-orange.svg?sanitize=true&#34; alt=&#34;Language: Swift-2.x/3.x/4.x/5.x&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/AliSoftware/OHHTTPStubs&#34;&gt;&lt;img src=&#34;https://travis-ci.org/AliSoftware/OHHTTPStubs.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/OHHTTPStubs&#34;&gt;&lt;img src=&#34;http://cocoapod-badges.herokuapp.com/v/OHHTTPStubs/badge.png&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/carthage-supported-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/spm-supported-4BC51D.svg?style=flat&#34; alt=&#34;Swift Package Manager Supported&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is a library designed to stub your network requests very easily. It can help you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;test your apps with &lt;strong&gt;fake network data&lt;/strong&gt; (stubbed from file) and &lt;strong&gt;simulate slow networks&lt;/strong&gt;, to check your application behavior in bad network conditions&lt;/li&gt; &#xA; &lt;li&gt;write &lt;strong&gt;unit tests&lt;/strong&gt; that use fake network data from your fixtures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It works with &lt;code&gt;NSURLConnection&lt;/code&gt;, &lt;code&gt;NSURLSession&lt;/code&gt;, &lt;code&gt;AFNetworking&lt;/code&gt;, &lt;code&gt;Alamofire&lt;/code&gt; or any networking framework that use Cocoa&#39;s URL Loading System.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=TRTU3UEWEHV92&#34; title=&#34;Donate&#34;&gt;&lt;img alt=&#34;Donate&#34; src=&#34;https://www.paypalobjects.com/webstatic/mktg/merchant_portal/button/donate.en.png&#34; height=&#34;32px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Documentation &amp;amp; Usage Examples&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; headers are fully documented using Appledoc-like / Headerdoc-like comments in the header files. You can also &lt;a href=&#34;http://cocoadocs.org/docsets/OHHTTPStubs&#34;&gt;read the &lt;strong&gt;online documentation&lt;/strong&gt; here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Basic example&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;In Objective-C&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[HTTPStubs stubRequestsPassingTest:^BOOL(NSURLRequest *request) {&#xA;  return [request.URL.host isEqualToString:@&#34;mywebservice.com&#34;];&#xA;} withStubResponse:^HTTPStubsResponse*(NSURLRequest *request) {&#xA;  // Stub it with our &#34;wsresponse.json&#34; stub file (which is in same bundle as self)&#xA;  NSString* fixture = OHPathForFile(@&#34;wsresponse.json&#34;, self.class);&#xA;  return [HTTPStubsResponse responseWithFileAtPath:fixture&#xA;            statusCode:200 headers:@{@&#34;Content-Type&#34;:@&#34;application/json&#34;}];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open=&#34;1&#34;&gt; &#xA; &lt;summary&gt;In Swift&lt;/summary&gt; &#xA; &lt;p&gt;This example is using the Swift helpers found in &lt;code&gt;OHHTTPStubsSwift.swift&lt;/code&gt; provided by the &lt;code&gt;OHHTTPStubs/Swift&lt;/code&gt; subspec or &lt;code&gt;OHHTTPStubs&lt;/code&gt; package.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stub(condition: isHost(&#34;mywebservice.com&#34;)) { _ in&#xA;  // Stub it with our &#34;wsresponse.json&#34; stub file (which is in same bundle as self)&#xA;  let stubPath = OHPathForFile(&#34;wsresponse.json&#34;, type(of: self))&#xA;  return fixture(filePath: stubPath!, headers: [&#34;Content-Type&#34;:&#34;application/json&#34;])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you&#39;re using &lt;code&gt;OHHTTPStubs&lt;/code&gt;&#39;s Swiftier API (&lt;code&gt;OHHTTPStubsSwift.swift&lt;/code&gt; and the &lt;code&gt;Swift&lt;/code&gt; subspec or &lt;code&gt;OHTTPStubsSwift&lt;/code&gt; package), you can also compose the matcher functions like this: &lt;code&gt;stub(isScheme(&#34;http&#34;) &amp;amp;&amp;amp; isHost(&#34;myhost&#34;)) { … }&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;More examples &amp;amp; Help Topics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For a lot more examples, see the dedicated &#34;&lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/wiki/Usage-Examples&#34;&gt;Usage Examples&lt;/a&gt;&#34; wiki page.&lt;/li&gt; &#xA; &lt;li&gt;The wiki also contain &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/wiki&#34;&gt;some articles that can help you get started&lt;/a&gt; with (and troubleshoot if needed) &lt;code&gt;OHHTTPStubs&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Recording requests to replay them later&lt;/h2&gt; &#xA;&lt;p&gt;Instead of writing the content of the stubs you want to use manually, you can use tools like &lt;a href=&#34;https://github.com/capitalone/SWHttpTrafficRecorder&#34;&gt;SWHttpTrafficRecorder&lt;/a&gt; to record network requests into files. This way you can later use those files as stub responses.&lt;br&gt; This tool can record all three formats that are supported by &lt;code&gt;OHHTTPStubs&lt;/code&gt; (the &lt;code&gt;HTTPMessage&lt;/code&gt; format, the simple response boby/content file, and the &lt;code&gt;Mocktail&lt;/code&gt; format).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(There are also other ways to perform a similar task, including using &lt;code&gt;curl -is &amp;lt;url&amp;gt; &amp;gt;foo.response&lt;/code&gt; to generate files compatible with the &lt;code&gt;HTTPMessage&lt;/code&gt; format, or using other network recording libraries similar to &lt;code&gt;SWHttpTrafficRecorder&lt;/code&gt;).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Compatibility&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is compatible with &lt;strong&gt;iOS5+&lt;/strong&gt;, &lt;strong&gt;OS X 10.7+&lt;/strong&gt;, &lt;strong&gt;tvOS&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; also works with &lt;code&gt;NSURLSession&lt;/code&gt; as well as any network library wrapping them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is &lt;strong&gt;fully compatible with Swift 3.x, 4.x and Swift 5.x&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://developer.apple.com/swift/blog/?id=25&#34;&gt;Nullability annotations&lt;/a&gt; have also been added to the ObjC API to allow a cleaner API when used from Swift even if you don&#39;t use the dedicated Swift API wrapper provided by &lt;code&gt;OHHTTPStubsSwift.swift&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Updating to Version 9.0+&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;All classes dropped the &lt;code&gt;OH&lt;/code&gt; prefix (&lt;code&gt;OHHHTTPStubs&lt;/code&gt; -&amp;gt; &lt;code&gt;HTTPStubs&lt;/code&gt;, &lt;code&gt;OHHTTPStubsResponse&lt;/code&gt; -&amp;gt; &lt;code&gt;HTTPStubsResponse&lt;/code&gt;, etc).&lt;/li&gt; &#xA;  &lt;li&gt;The &lt;code&gt;OHPathHelpers&lt;/code&gt; class was renamed &lt;code&gt;HTTPStubsPathHelpers&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;No method and module names were changed.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Installing in your projects&lt;/h1&gt; &#xA;&lt;h2&gt;CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://guides.cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is the recommended way.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;intend to use &lt;code&gt;OHHTTPStubs&lt;/code&gt; from Objective-C only&lt;/strong&gt;, add &lt;code&gt;pod &#39;OHHTTPStubs&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;intend to use &lt;code&gt;OHHTTPStubs&lt;/code&gt; from Swift&lt;/strong&gt;, add &lt;code&gt;pod &#39;OHHTTPStubs/Swift&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt; instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;OHHTTPStubs/Swift&#39; # includes the Default subspec, with support for NSURLSession &amp;amp; JSON, and the Swiftier API wrappers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;All available subspecs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is split into subspecs so that when using Cocoapods, you can get only what you need, no more, no less.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The default subspec includes &lt;code&gt;NSURLSession&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt;, and &lt;code&gt;OHPathHelpers&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;Swift&lt;/code&gt; subspec adds the Swiftier API to that default subspec&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HTTPMessage&lt;/code&gt; and &lt;code&gt;Mocktail&lt;/code&gt; are opt-in subspecs: list them explicitly if you need them&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHPathHelpers&lt;/code&gt; doesn&#39;t depend on &lt;code&gt;Core&lt;/code&gt; and can be used independently of &lt;code&gt;OHHTTPStubs&lt;/code&gt; altogether&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;List of all the subspecs &amp;amp; their dependencies&lt;/summary&gt; &#xA; &lt;p&gt;Here&#39;s a list of which subspecs are included for each of the different lines you could use in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Subspec&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Core&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;NSURLSession&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;JSON&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Swift&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;OHPathHelpers&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;HTTPMessage&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Mocktail&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Default&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Swift&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Core&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/NSURLSession&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/JSON&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/OHPathHelpers&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/HTTPMessage&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Mocktail&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Swift Package Manager&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is compatible with Swift Package Manager, and provides 2 targets for consumption: &lt;code&gt;OHHTTPStubs&lt;/code&gt; and &lt;code&gt;OHHTTPStubsSwift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is equivalent to the &lt;code&gt;OHHTTPStubs&lt;/code&gt; subspec.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubsSwift&lt;/code&gt; is equivalent to the &lt;code&gt;OHHTTPStubs/Swift&lt;/code&gt; subspec.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: We currently do not have support for the HTTPMessage or Mocktail subspecs in Swift Package Manager. If you are interested in these, please open an issue to explain your needs.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Carthage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is also compatible with Carthage. Just add it to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The &lt;code&gt;OHHTTPStubs.framework&lt;/code&gt; built with Carthage will include &lt;strong&gt;all&lt;/strong&gt; features of &lt;code&gt;OHHTTPStubs&lt;/code&gt; turned on (in other words, all subspecs of the pod), including &lt;code&gt;NSURLSession&lt;/code&gt; and &lt;code&gt;JSON&lt;/code&gt; support, &lt;code&gt;OHPathHelpers&lt;/code&gt;, &lt;code&gt;HTTPMessage&lt;/code&gt; and &lt;code&gt;Mocktail&lt;/code&gt; support, and the Swiftier API.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using the right Swift version for your project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; supports Swift 3.0 (Xcode 8+), Swift 3.1 (Xcode 8.3+), Swift 3.2 (Xcode 9.0+), Swift 4.0 (Xcode 9.0+), Swift 4.1 (Xcode 9.3+), Swift 4.2 (Xcode 10+), Swift 5.0 (Xcode 10.2), and Swift 5.1 (Xcode 11) however we are only testing Swift 4.x (using Xcode 9.1 and 10.1) and Swift 5.x (using Xcode 10.2 AND 11) in CI.&lt;/p&gt; &#xA;&lt;p&gt;Here are some details about the correct setup you need depending on how you integrated &lt;code&gt;OHHTTPStubs&lt;/code&gt; into your project.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;CocoaPods: nothing to do&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If you use CocoaPods version &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/releases/tag/1.1.0.beta.1&#34;&gt;&lt;code&gt;1.1.0.beta.1&lt;/code&gt;&lt;/a&gt; or later, then CocoaPods will compile &lt;code&gt;OHHTTPStubs&lt;/code&gt; with the right Swift Version matching the one you use for your project automatically. You have nothing to do! 🎉&lt;/p&gt; &#xA; &lt;p&gt;For more info, see &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/pull/5540&#34;&gt;CocoaPods/CocoaPods#5540&lt;/a&gt; and &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/pull/5760&#34;&gt;CocoaPods/CocoaPods#5760&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Carthage: choose the right version&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;The project is set up with &lt;code&gt;SWIFT_VERSION=5.0&lt;/code&gt; on &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;This means that the framework on &lt;code&gt;master&lt;/code&gt; will build using:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Swift 5.1 on Xcode 11&lt;/li&gt; &#xA;  &lt;li&gt;Swift 5.0 on Xcode 10.2&lt;/li&gt; &#xA;  &lt;li&gt;Swift 4.2 on Xcode 10.1&lt;/li&gt; &#xA;  &lt;li&gt;Swift 4.0 on Xcode 9.1&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;If you want Carthage to build the framework with Swift 3.x you can:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;either use an older Xcode version&lt;/li&gt; &#xA;  &lt;li&gt;or use the previous version of &lt;code&gt;OHHTTPStubs&lt;/code&gt; (6.2.0) — whose &lt;code&gt;master&lt;/code&gt; branch uses &lt;code&gt;3.0&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;or fork the repo just to change the &lt;code&gt;SWIFT_VERSION&lt;/code&gt; build setting to &lt;code&gt;3.0&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;or build the framework passing a &lt;code&gt;SWIFT_VERSION&lt;/code&gt; to carthage via &lt;code&gt;XCODE_XCCONFIG_FILE=&amp;lt;config file declaring SWIFT_VERSION&amp;gt; carthage build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Special Considerations&lt;/h1&gt; &#xA;&lt;h2&gt;Using OHHTTPStubs in your unit tests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is ideal to write unit tests that normally would perform network requests. But if you use it in your unit tests, don&#39;t forget to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;remove any stubs you installed after each test — to avoid those stubs to still be installed when executing the next Test Case — by calling &lt;code&gt;[HTTPStubs removeAllStubs]&lt;/code&gt; in your &lt;code&gt;tearDown&lt;/code&gt; method. &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/wiki/Remove-stubs-after-each-test&#34;&gt;see this wiki page for more info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;be sure to wait until the request has received its response before doing your assertions and letting the test case finish (like for any asynchronous test). &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/wiki/OHHTTPStubs-and-asynchronous-tests&#34;&gt;see this wiki page for more info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Automatic loading&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is automatically loaded and installed (at the time the library is loaded in memory), both for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;requests made using &lt;code&gt;NSURLConnection&lt;/code&gt; or &lt;code&gt;[NSURLSession sharedSession]&lt;/code&gt; — &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/raw/master/OHHTTPStubs/Sources/OHHTTPStubs.m#L107-L113&#34;&gt;thanks to this code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;requests made using a &lt;code&gt;NSURLSession&lt;/code&gt; that was created via &lt;code&gt;[NSURLSession sessionWithConfiguration:…]&lt;/code&gt; and using either &lt;code&gt;[NSURLSessionConfiguration defaultSessionConfiguration]&lt;/code&gt; or &lt;code&gt;[NSURLSessionConfiguration ephemeralSessionConfiguration]&lt;/code&gt; configuration — thanks to &lt;a href=&#34;http://nshipster.com/method-swizzling/&#34;&gt;method swizzling&lt;/a&gt; done &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/raw/master/OHHTTPStubs/Sources/NSURLSession/HTTPStubs+NSURLSessionConfiguration.m&#34;&gt;here in the code&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need to disable (and re-enable) &lt;code&gt;OHHTTPStubs&lt;/code&gt; — globally or per &lt;code&gt;NSURLSession&lt;/code&gt; — you can use &lt;code&gt;[HTTPStubs setEnabled:]&lt;/code&gt; / &lt;code&gt;[HTTPStubs setEnabled:forSessionConfiguration:]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; &lt;strong&gt;can&#39;t work on background sessions&lt;/strong&gt; (sessions created using &lt;code&gt;[NSURLSessionConfiguration backgroundSessionConfiguration]&lt;/code&gt;) because background sessions don&#39;t allow the use of custom &lt;code&gt;NSURLProtocols&lt;/code&gt; and are handled by the iOS Operating System itself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; don&#39;t simulate data upload. The &lt;code&gt;NSURLProtocolClient&lt;/code&gt; &lt;code&gt;@protocol&lt;/code&gt; does not provide a way to signal the delegate that data has been &lt;strong&gt;sent&lt;/strong&gt; (only that some has been loaded), so any data in the &lt;code&gt;HTTPBody&lt;/code&gt; or &lt;code&gt;HTTPBodyStream&lt;/code&gt; of an &lt;code&gt;NSURLRequest&lt;/code&gt;, or data provided to &lt;code&gt;-[NSURLSession uploadTaskWithRequest:fromData:];&lt;/code&gt; will be ignored, and more importantly, the &lt;code&gt;-URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:&lt;/code&gt; delegate method will never be called when you stub the request using &lt;code&gt;OHHTTPStubs&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHTTPStubs&lt;/code&gt; &lt;strong&gt;has a known issue with redirects&lt;/strong&gt; that we believe is an Apple bug. It has been discussed &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/issues/230&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/issues/280&#34;&gt;here&lt;/a&gt;. The actual result of this bug is that redirects with a zero second delay may nondeterministically end up with a null response.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;As far as I know, there&#39;s nothing we can do about those three limitations. Please let me know if you know a solution that would make that possible anyway.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Submitting to the App Store&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; &lt;strong&gt;can be used&lt;/strong&gt; on apps submitted &lt;strong&gt;on the App Store&lt;/strong&gt;. It does not use any private API and nothing prevents you from shipping it.&lt;/p&gt; &#xA;&lt;p&gt;But you generally only use stubs during the development phase and want to remove your stubs when submitting to the App Store. So be careful to only include &lt;code&gt;OHHTTPStubs&lt;/code&gt; when needed (only in your test targets, or only inside &lt;code&gt;#if DEBUG&lt;/code&gt; sections, or by using &lt;a href=&#34;https://guides.cocoapods.org/syntax/podfile.html#pod&#34;&gt;per-Build-Configuration pods&lt;/a&gt;) to avoid forgetting to remove it when the time comes that you release for the App Store and you want your requests to hit the real network!&lt;/p&gt; &#xA;&lt;h1&gt;License and Credits&lt;/h1&gt; &#xA;&lt;p&gt;This project and library has been created by Olivier Halligon (&lt;a href=&#34;https://twitter.com/aligatr&#34;&gt;@aligatr&lt;/a&gt; on Twitter) and is under the MIT License.&lt;/p&gt; &#xA;&lt;p&gt;It has been inspired by &lt;a href=&#34;https://web-beta.archive.org/web/20161219003951/http://www.infinite-loop.dk/blog/2011/09/using-nsurlprotocol-for-injecting-test-data/&#34;&gt;this article from InfiniteLoop.dk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I would also like to thank:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sébastien Duperron (&lt;a href=&#34;https://github.com/Liquidsoul&#34;&gt;@Liquidsoul&lt;/a&gt;) for helping me maintaining this library, triaging and responding to issues and PRs&lt;/li&gt; &#xA; &lt;li&gt;Kevin Harwood (&lt;a href=&#34;https://github.com/kcharwood&#34;&gt;@kcharwood&lt;/a&gt;) for migrating the code to &lt;code&gt;NSInputStream&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jinlian Wang (&lt;a href=&#34;https://github.com/JinlianWang&#34;&gt;@JinlianWang&lt;/a&gt;) for adding Mocktail support&lt;/li&gt; &#xA; &lt;li&gt;and everyone else who contributed to this project on GitHub somehow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to support the development of this library, feel free to &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=TRTU3UEWEHV92&#34; title=&#34;Donate&#34;&gt;&lt;img alt=&#34;Donate&#34; src=&#34;https://www.paypalobjects.com/webstatic/mktg/merchant_portal/button/donate.en.png&#34; height=&#34;25px&#34;&gt;&lt;/a&gt;. Thanks to all contributors so far!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nicklockwood/FXBlurView</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/nicklockwood/FXBlurView</id>
    <link href="https://github.com/nicklockwood/FXBlurView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[DEPRECATED]&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h1&gt;WARNING: THIS PROJECT IS DEPRECATED&lt;/h1&gt; &#xA;&lt;p&gt;It will not receive any future updates or bug fixes. If you are using it, please migrate to another solution.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;FXBlurView is a UIView subclass that replicates the iOS 7 realtime background blur effect, but works on iOS 5 and above. It is designed to be as fast and as simple to use as possible. FXBlurView offers two modes of operation: static, where the view is rendered only once when it is added to a superview (though it can be updated by calling &lt;code&gt;setNeedsDisplay&lt;/code&gt; or &lt;code&gt;updateAsynchronously:completion:&lt;/code&gt;) or dynamic, where it will automatically redraw itself on a background thread as often as possible.&lt;/p&gt; &#xA;&lt;h2&gt;Supported iOS &amp;amp; SDK Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supported build target - iOS 8.4 (Xcode 6.4, Apple LLVM compiler 6.1)&lt;/li&gt; &#xA; &lt;li&gt;Earliest supported deployment target - iOS 7.0&lt;/li&gt; &#xA; &lt;li&gt;Earliest compatible deployment target - iOS 4.3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: &#39;Supported&#39; means that the library has been tested with this version. &#39;Compatible&#39; means that the library should work on this iOS version (i.e. it doesn&#39;t rely on any unavailable SDK features) but is no longer being tested for compatibility and may require tweaking or bug fixes to run correctly.&lt;/p&gt; &#xA;&lt;h2&gt;ARC Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;As of version 1.3, FXBlurView requires ARC. If you wish to use FXBlurView in a non-ARC project, just add the -fobjc-arc compiler flag to the FXBlurView.m class. To do this, go to the Build Phases tab in your target settings, open the Compile Sources group, double-click FXBlurView.m in the list and type -fobjc-arc into the popover.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to convert your whole project to ARC, comment out the #error line in FXBlurView.m, then run the Edit &amp;gt; Refactor &amp;gt; Convert to Objective-C ARC... tool in Xcode and make sure all files that you wish to use ARC for (including FXBlurView.m) are checked.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use FXBlurView, just drag the class files into your project and add the Accelerate framework. You can create FXBlurView instances programatically, or create them in Interface Builder by dragging an ordinary UIView into your view and setting its class to FXBlurView.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Interface Builder, to set the custom properties of FXBlurView (ones that are not supported by regular UIViews) either create an IBOutlet for your view and set the properties in code, or use the User Defined Runtime Attributes feature in Interface Builder (introduced in Xcode 4.2 for iOS 5+).&lt;/p&gt; &#xA;&lt;h2&gt;UIImage extensions&lt;/h2&gt; &#xA;&lt;p&gt;FXBlurView extends UIImage with the following method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (UIImage *)blurredImageWithRadius:(CGFloat)radius&#xA;                         iterations:(NSUInteger)iterations&#xA;                          tintColor:(UIColor *)tintColor;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method applies a blur effect and returns the resultant blurred image without modifying the original. The radius property controls the extent of the blur effect. The iterations property controls the number of iterations. More iterations means higher quality. The tintColor is an optional color that will be blended with the resultant image. Note that the alpha component of the tintColor is ignored.&lt;/p&gt; &#xA;&lt;h2&gt;FXBlurView methods&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;+ (void)setBlurEnabled:(BOOL)blurEnabled;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method can be used to globally enable/disable the blur effect on all FXBlurView instances. This is useful for testing, or if you wish to disable blurring on iPhone 4 and below (for consistency with iOS7 blur view behavior). By default blurring is enabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;+ (void)setUpdatesEnabled;&#xA;+ (void)setUpdatesDisabled;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These methods can be used to enable and disable updates for all dynamic FXBlurView instances with a single command. Useful for disabling updates immediately before performing an animation so that the FXBlurView updates don&#39;t cause the animation to stutter. Calls can be nested, but ensure that the enabled/disabled calls are balanced, or the updates will be left permanently enabled or disabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (void)updateAsynchronously:(BOOL)async completion:(void (^)())completion;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method can be used to trigger an update of the blur effect (useful when &lt;code&gt;dynamic = NO&lt;/code&gt;). The async argument controls whether the blur will be redrawn on the main thread or in the background. The completion argument is an optional callback block that will be called when the blur is completed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (void)setNeedsDisplay;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inherited from UIView, this method can be used to trigger a (synchronous) update of the view. Calling this method is more-or-less equivalent to calling &lt;code&gt;[view updateAsynchronously:NO completion:NULL]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FXBlurView properties&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@property (nonatomic, getter = isBlurEnabled) BOOL blurEnabled;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This property toggles blurring on and off for an individual FXBlurView instance. Blurring is enabled by default. Note that if you disable blurring using the &lt;code&gt;+setBlurEnabled&lt;/code&gt; method then that will override this setting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@property (nonatomic, getter = isDynamic) BOOL dynamic;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This property controls whether the FXBlurView updates dynamically, or only once when the view is added to its superview. Defaults to YES. Note that if dynamic is set to NO, you can still force the view to update by calling &lt;code&gt;setNeedsDisplay&lt;/code&gt; or &lt;code&gt;updateAsynchronously:completion:&lt;/code&gt;. Dynamic blurring is extremely cpu-intensive, so you should always disable dynamic views immediately prior to performing an animation to avoid stuttering. However, if you have multiple FXBlurViews on screen then it is simpler to disable updates using the &lt;code&gt;setUpdatesDisabled&lt;/code&gt; method rather than setting the &lt;code&gt;dynamic&lt;/code&gt; property to NO.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@property (nonatomic, assign) NSUInteger iterations;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The number of blur iterations. More iterations improves the quality but reduces the performance. Defaults to 2 iterations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@property (nonatomic, assign) NSTimeInterval updateInterval;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This controls the interval (in seconds) between successive updates when the FXBlurView is operating in dynamic mode. This defaults to zero, which means that the FXBlurView will update as fast as possible. This yields the best frame rate, but is also extremely CPU intensive and may cause the rest of your app&#39;s performance to degrade, especially on older devices. To alleviate this, try increasing the &lt;code&gt;updateInterval&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@property (nonatomic, assign) CGFloat blurRadius;&#x9;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This property controls the radius of the blur effect (in points). Defaults to a 40 point radius, which is similar to the iOS 7 blur effect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@property (nonatomic, strong) UIColor *tintColor;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This in an optional tint color to be applied to the FXBlurView. The RGB components of the color will be blended with the blurred image, resulting in a gentle tint. To vary the intensity of the tint effect, use brighter or darker colors. The alpha component of the tintColor is ignored. If you do not wish to apply a tint, set this value to nil or [UIColor clearColor]. Note that if you are using Xcode 5 or above, FXBlurViews created in Interface Builder will have a blue tint by default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@property (nonatomic, weak) UIView *underlyingView;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This property specifies the view that the FXBlurView will sample to create the blur effect. If set to nil (the default), this will be the superview of the blur view itself, but you can override this if you need to.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Q. Why are my views all blue-tinted on iOS 7?&#xA;A. FXBlurView uses the `UIView` `tintColor` property, which does not exist on iOS 6 and below, but defaults to blue on iOS 7. Just set this property to `[UIColor clearColor]` to disable the tint. To retain iOS 6 compatibility, you can either set this using code, or by using the User Defined Runtime Attributes feature of Interface Builder, which will override the standard `tintColor` value (see the example project nibs for how to do this).&#xA;&#xA;Q. FXBlurView makes my whole app run slowly on [old device], what can I do?&#xA;A. To improve performance, try increasing the `updatePeriod` property, reducing the `iterations` property or disabling `dynamic` unless you really need it. If all else fails, set `blurEnabled` to NO on older devices.&#xA;&#xA;Q. My SpriteKit/OpenGL/Video/3D transformed content isn&#39;t showing up properly when placed underneath an FXBlurView, why not?&#xA;A. This is a limitation of a the `CALayer` `renderInContext:` method used to capture the view contents. There is no workaround for this on iOS 6 and earlier. On iOS 7 you can make use of the `UIView` `drawViewHierarchyInRect:afterScreenUpdates:` method to capture an view and apply the blur effect yourself, but this it too slow for realtime use, so FXBlurView does not use this method by default.&#xA;&#xA;Q. FXBlurView is not capturing some ordinary view content that is behind it, why not?&#xA;A. FXBlurView captures the contents of its immediate superview by default. If the superview is transparent or partially transparent, content shown behind it will not be captured. You can override the `underlyingView` property to capture the contents of a different view if you need to.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;Version 1.6.4&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;blurredImageWithRadius:iterations:tintColor:&lt;/code&gt; now works if image is not in ARGB format&lt;/li&gt; &#xA; &lt;li&gt;Fixed &#34;&#xA;  &lt;error&gt;&#xA;   : CGContextRestoreGState: invalid context 0x0.&#34;&#xA;  &lt;/error&gt;&lt;/li&gt; &#xA; &lt;li&gt;Empty sublayers are now hidden before snapshotting to prevent renderInContext crash on iOS 8&lt;/li&gt; &#xA; &lt;li&gt;FXBlurView now automatically uses slower drawViewHierarchyInRect method when needed to capture content&lt;/li&gt; &#xA; &lt;li&gt;Added Travis integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.6.3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FXBlurView image background is no longer opaque/black, so it can be used as a translucent overlay&lt;/li&gt; &#xA; &lt;li&gt;underlyingView property is now an IBOutlet, so it can be connected in Interface Builder&lt;/li&gt; &#xA; &lt;li&gt;Moved imports into header for better Swift compatibility&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.6.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed crash on iOS 8 when animating blur&lt;/li&gt; &#xA; &lt;li&gt;Fixed issue when using FXBlurView with Swift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.6.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed issue with animation completion block not firing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.6&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is now possible to animate blurRadius&lt;/li&gt; &#xA; &lt;li&gt;Now requires QuartzCore framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.5.6&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed bug introduced in 1.5.4 where snapshot would always be taken from top-left corner of superview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.5.5&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed zero-sized context warning in console when view has no presentationLayer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.5.4&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is now possible to animate the FXBlurView frame using ordinary UIView animations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.5.3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed pixelation issue on non-Retina devices running iOS 6 or earlier&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.5.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed bug where edge of blur could be cropped short when using content modes other than scale to fit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.5.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed bug where completion handler was not called for synchronous blur.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.5&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added underlyingView property to specify source view&lt;/li&gt; &#xA; &lt;li&gt;Added updateAsynchronously:completion: method&lt;/li&gt; &#xA; &lt;li&gt;Fixed glitch with edges on certain views&lt;/li&gt; &#xA; &lt;li&gt;Now conforms to -Weverything warning level&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.4.4&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed pixelation issue on Retina iPads&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.4.3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed error when compiling for iOS 6.1 SDK using Xcode 5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.4.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed issue where shadow or ghosting could appear at edge of blur view&lt;/li&gt; &#xA; &lt;li&gt;Now conforms to -Wextra warning level&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.4.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed minor memory leak in the setUp method&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.4&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More intelligent scheduling when multiple dynamic FXBlurView instances are shown on screen at once&lt;/li&gt; &#xA; &lt;li&gt;Added global and individual methods for disabling blur (e.g. so you can disable blur on iPhone 4 and below for consistency with other apps on iOS 7)&lt;/li&gt; &#xA; &lt;li&gt;Added Multiples views example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.3.3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed console warning when adding an FXBlurView of zero size to the window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.3.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed issue with pixelation on non-Retina devices&lt;/li&gt; &#xA; &lt;li&gt;Tweaked performance/quality tradeoff&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.3.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improved blur quality (1.3 was slightly blocky)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added tintColor property&lt;/li&gt; &#xA; &lt;li&gt;Significant performance improvement by reducing snapshot scale based in proportion to blur radius&lt;/li&gt; &#xA; &lt;li&gt;Views placed in front of the FXBlurView in the hierarchy are no longer included in the blur effect&lt;/li&gt; &#xA; &lt;li&gt;Fixed issue where blurView was sometimes partially transparent&lt;/li&gt; &#xA; &lt;li&gt;Added example showing how to implement an iOS7 control center-style overlay&lt;/li&gt; &#xA; &lt;li&gt;FXBlurView now requires ARC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added +setUpdatesEnabled and +setUpdatesDisabled methods to globally enable/disable dynamic blur updates (e.g. when performing an animation)&lt;/li&gt; &#xA; &lt;li&gt;Added -updateInterval method to control CPU load when updating&lt;/li&gt; &#xA; &lt;li&gt;Changed runloop mode to reduce interference with scrolling, etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added ability to set number of blur iterations&lt;/li&gt; &#xA; &lt;li&gt;Fixed setNeedsDisplay behavior when dynamic = NO&lt;/li&gt; &#xA; &lt;li&gt;Reduced memory allocations in blur algorithm&lt;/li&gt; &#xA; &lt;li&gt;Added dynamic mode toggle to example app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initial release&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>firebase/FirebaseUI-iOS</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/firebase/FirebaseUI-iOS</id>
    <link href="https://github.com/firebase/FirebaseUI-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS UI bindings for Firebase.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FirebaseUI for iOS — UI Bindings for Firebase&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/anonymousauth.yml/badge.svg?sanitize=true&#34; alt=&#34;Anonymous Auth&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/auth.yml/badge.svg?sanitize=true&#34; alt=&#34;Auth&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/database.yml/badge.svg?sanitize=true&#34; alt=&#34;Database&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/emailauth.yml/badge.svg?sanitize=true&#34; alt=&#34;Email Auth&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/facebookauth.yml/badge.svg?sanitize=true&#34; alt=&#34;Facebook Auth&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/firestore.yml/badge.svg?sanitize=true&#34; alt=&#34;Firestore&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/googleauth.yml/badge.svg?sanitize=true&#34; alt=&#34;Google Auth&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/oauth.yml/badge.svg?sanitize=true&#34; alt=&#34;OAuth&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/phoneauth.yml/badge.svg?sanitize=true&#34; alt=&#34;Phone Auth&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/storage.yml/badge.svg?sanitize=true&#34; alt=&#34;Storage&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/sample.yml/badge.svg?sanitize=true&#34; alt=&#34;Samples&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;FirebaseUI is an open-source library for iOS that allows you to quickly connect common UI elements to the &lt;a href=&#34;https://firebase.google.com?utm_source=FirebaseUI-iOS&#34;&gt;Firebase&lt;/a&gt; database for data storage, allowing views to be updated in realtime as they change, and providing simple interfaces for common tasks like displaying lists or collections of items.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, FirebaseUI simplifies Firebase authentication by providing easy to use auth methods that integrate with common identity providers like Facebook, Twitter, and Google as well as allowing developers to use a built in headful UI for ease of development.&lt;/p&gt; &#xA;&lt;p&gt;FirebaseUI clients are also available for &lt;a href=&#34;https://github.com/firebase/FirebaseUI-Android&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://github.com/firebase/firebaseui-web&#34;&gt;web&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/samples/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing FirebaseUI for iOS&lt;/h2&gt; &#xA;&lt;p&gt;FirebaseUI supports iOS 10.0+ and Xcode 11+. We recommend using &lt;a href=&#34;https://cocoapods.org/pods/FirebaseUI&#34;&gt;CocoaPods&lt;/a&gt;, add the following to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FirebaseUI&#39;, &#39;~&amp;gt; 8.0&#39;       # Pull in all Firebase UI features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to use all of FirebaseUI, there are multiple subspecs which can selectively install subsets of the full feature set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Only pull in Firestore features&#xA;pod &#39;FirebaseUI/Firestore&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&#xA;# Only pull in Database features&#xA;pod &#39;FirebaseUI/Database&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&#xA;# Only pull in Storage features&#xA;pod &#39;FirebaseUI/Storage&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&#xA;# Only pull in Auth features&#xA;pod &#39;FirebaseUI/Auth&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&#xA;# Only pull in Facebook login features&#xA;pod &#39;FirebaseUI/Facebook&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&#xA;# Only pull in Google login features&#xA;pod &#39;FirebaseUI/Google&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&#xA;# Only pull in Phone Auth login features&#xA;pod &#39;FirebaseUI/Phone&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re including FirebaseUI in a Swift project, make sure you also have:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;10.0&#39;&#xA;use_frameworks!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, you can include the FirebaseUI Xcode project from this repo in your project. You also need to &lt;a href=&#34;https://firebase.google.com/docs/ios/setup&#34;&gt;add the Firebase framework&lt;/a&gt; to your project.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The READMEs for components of FirebaseUI can be found in their respective project folders.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/Auth/README.md&#34;&gt;Auth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/PhoneAuth/README.md&#34;&gt;PhoneAuth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/Database/README.md&#34;&gt;Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/Firestore/README.md&#34;&gt;Firestore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/Storage/README.md&#34;&gt;Storage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Local Setup&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to FirebaseUI for iOS, you&#39;ll need to run the following commands to get your environment set up:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/firebase/FirebaseUI-iOS.git&#xA;$ cd FirebaseUI-iOS&#xA;$ cd Auth # or PhoneAuth, Database, etc&#xA;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can use &lt;code&gt;pod try FirebaseUI&lt;/code&gt; to install the Objective-C or Swift sample projects.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Project Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll have to configure your Xcode project in order to run the samples.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Your Xcode project should contain a &lt;code&gt;GoogleService-Info.plist&lt;/code&gt;, downloaded from &lt;a href=&#34;https://console.firebase.google.com&#34;&gt;Firebase console&lt;/a&gt; when you add your app to a Firebase project.&lt;br&gt; Copy the &lt;code&gt;GoogleService-Info.plist&lt;/code&gt; into the sample project folder (&lt;code&gt;samples/obj-c/GoogleService-Info.plist&lt;/code&gt; or &lt;code&gt;samples/swift/GoogleService-Info.plist&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update URL Types.&lt;br&gt; Go to &lt;code&gt;Project Settings -&amp;gt; Info tab -&amp;gt; Url Types&lt;/code&gt; and update values for:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;REVERSED_CLIENT_ID&lt;/code&gt; (get value from &lt;code&gt;GoogleService-Info.plist&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;fb{your-app-id}&lt;/code&gt; (put Facebook App Id)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update &lt;code&gt;Info.plist&lt;/code&gt; with Facebook configuration values&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;FacebookAppID -&amp;gt; {your-app-id}&lt;/code&gt; (put Facebook App Id)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Keychain Sharing.&lt;br&gt; Facebook SDK requires keychain sharing.&lt;br&gt; This can be done here: &lt;code&gt;Project Settings -&amp;gt; Capabilities -&amp;gt; KeyChain Sharing -&amp;gt; ON&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Don&#39;t forget to configure your Firebase App Database using &lt;a href=&#34;https://console.firebase.google.com&#34;&gt;Firebase console&lt;/a&gt;.&lt;br&gt; Database should contain appropriate read/write permissions and folders (&lt;code&gt;objc_demo-chat&lt;/code&gt; and &lt;code&gt;swift_demo-chat&lt;/code&gt; respectively)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In Order to use &lt;code&gt;Phone Auth&lt;/code&gt; provider you should &lt;a href=&#34;https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/#configure-apple-push-notifications&#34;&gt;Configure Push Notifications&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Configure Apple Push Notifications&lt;/h4&gt; &#xA;&lt;h5&gt;Enable silent push notifications in Xcode&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Push Notification&lt;/code&gt; - Under &lt;code&gt;Capabilities&lt;/code&gt; tab in your app target choose &lt;code&gt;Push Notifications&lt;/code&gt; and put the switch to the &lt;code&gt;On&lt;/code&gt; position.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Background Mode&lt;/code&gt; - Under &lt;code&gt;Capabilities&lt;/code&gt; tab in your app target choose &lt;code&gt;Background Modes&lt;/code&gt; put the switch to the &lt;code&gt;On&lt;/code&gt; position. In the list of available modes select &lt;code&gt;Background fetch&lt;/code&gt; and &lt;code&gt;Remote notifications&lt;/code&gt; (If available).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Upload APNS Certificate to Firebase&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create your &lt;code&gt;Provisioning APNS SSL Certificates&lt;/code&gt; by following the steps on the following link. &lt;a href=&#34;https://firebase.google.com/docs/cloud-messaging/ios/certs&#34;&gt;https://firebase.google.com/docs/cloud-messaging/ios/certs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Upload your &lt;code&gt;APNS Certificate&lt;/code&gt; to Firebase:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Inside your project in the Firebase console, select the gear icon, select &lt;code&gt;Project Settings&lt;/code&gt;, and then select the &lt;code&gt;Cloud Messaging&lt;/code&gt; tab.&lt;/li&gt; &#xA;   &lt;li&gt;Select the &lt;code&gt;Upload Certificate&lt;/code&gt; button for your development certificate, your production certificate, or both. At least one is required.&lt;/li&gt; &#xA;   &lt;li&gt;For each certificate, select the &lt;code&gt;.p12 file&lt;/code&gt;, and provide the password, if any. Make sure the &lt;code&gt;bundle ID&lt;/code&gt; for this certificate matches the &lt;code&gt;bundle ID&lt;/code&gt; of your app. Select &lt;code&gt;Save&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing to FirebaseUI&lt;/h2&gt; &#xA;&lt;h3&gt;Contributor License Agreements&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;d love to accept your sample apps and patches! Before we can take them, we have to jump a couple of legal hurdles.&lt;/p&gt; &#xA;&lt;p&gt;Please fill out either the individual or corporate Contributor License Agreement (CLA).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are an individual writing original source code and you&#39;re sure you own the intellectual property, then you&#39;ll need to sign an [individual CLA] (&lt;a href=&#34;https://developers.google.com/open-source/cla/individual&#34;&gt;https://developers.google.com/open-source/cla/individual&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If you work for a company that wants to allow you to contribute your work, then you&#39;ll need to sign a [corporate CLA] (&lt;a href=&#34;https://developers.google.com/open-source/cla/corporate&#34;&gt;https://developers.google.com/open-source/cla/corporate&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Follow either of the two links above to access the appropriate CLA and instructions for how to sign and return it. Once we receive it, we&#39;ll be able to accept your pull requests.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution Process&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Submit an issue describing your proposed change to the repo in question.&lt;/li&gt; &#xA; &lt;li&gt;The repo owner will respond to your issue promptly.&lt;/li&gt; &#xA; &lt;li&gt;If your proposed change is accepted, and you haven&#39;t already done so, sign a Contributor License Agreement (see details above).&lt;/li&gt; &#xA; &lt;li&gt;Fork the desired repo, develop and test your code changes.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that your code adheres to the existing style of the library to which you are contributing.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that your code has an appropriate set of unit tests which all pass.&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>getsentry/unity</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/getsentry/unity</id>
    <link href="https://github.com/getsentry/unity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unity SDK UPM package&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://sentry.io&#34; target=&#34;_blank&#34; align=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getsentry/sentry-unity/main/.github/sentry-wordmark-dark-400x119.svg?sanitize=true&#34; width=&#34;280&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://docs.sentry.io/platforms/unity/&#34; target=&#34;_blank&#34; align=&#34;right&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getsentry/sentry-unity/main/.github/unity-verified-logo.svg?sanitize=true&#34; width=&#34;280&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Sentry SDK for Unity&lt;/h1&gt; &#xA;&lt;p&gt;This is the UPM package for the Sentry SDK for Unity.&lt;/p&gt; &#xA;&lt;p&gt;Install it via &lt;code&gt;UPM&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/getsentry/unity.git#0.16.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Source code&lt;/h2&gt; &#xA;&lt;p&gt;The source code for this project is located at: &lt;a href=&#34;https://github.com/getsentry/sentry-unity/&#34;&gt;https://github.com/getsentry/sentry-unity/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sentry.io/platforms/unity/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-sentry.io-green.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.sentry.io/c/sdks&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/forum-sentry-green.svg?sanitize=true&#34; alt=&#34;Forum&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/PXa5Apfe7K&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/621778831602221064?logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/sentry&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stack%20overflow-sentry-green.svg?sanitize=true&#34; alt=&#34;Stack Overflow&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/intent/follow?screen_name=getsentry&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/getsentry?label=getsentry&amp;amp;style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dosdude1/macos-catalina-patcher</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/dosdude1/macos-catalina-patcher</id>
    <link href="https://github.com/dosdude1/macos-catalina-patcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;macOS Catalina Patcher (http://dosdude1.com/catalina)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;http://dosdude1.com/catalina&#34;&gt;macOS Catalina Patcher&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;The easy way to run macOS Catalina on your Unsupported Mac&lt;/h2&gt; &#xA;&lt;p&gt;Use the Xcode Project to build.&lt;/p&gt; &#xA;&lt;p&gt;Excluding patched binary files, this repo is governed by GNU GPL v3&lt;/p&gt; &#xA;&lt;h2&gt;APFS BootROM Support:&lt;/h2&gt; &#xA;&lt;p&gt;If you have a machine that supports High Sierra natively, you MUST ensure you have the latest version of the system&#39;s BootROM installed. If you have NOT previously installed High Sierra, you can download and install &lt;a href=&#34;https://ipfs.io/ipfs/QmZ5KmpG4SeHF8gWrHmoLcG9a3BNAcWWQoERg4q2J1kuQL/OfficialAPFSFWUpdate.zip&#34;&gt;this&lt;/a&gt; package to install the latest BootROM version. When installing, ensure your system is plugged in to power, or the update will not be installed.&lt;/p&gt; &#xA;&lt;h3&gt;Early-2008 or newer Mac Pro, iMac, or MacBook Pro:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacPro3,1&lt;/li&gt; &#xA; &lt;li&gt;MacPro4,1&lt;/li&gt; &#xA; &lt;li&gt;MacPro5,1&lt;/li&gt; &#xA; &lt;li&gt;iMac8,1&lt;/li&gt; &#xA; &lt;li&gt;iMac9,1&lt;/li&gt; &#xA; &lt;li&gt;iMac10,x&lt;/li&gt; &#xA; &lt;li&gt;iMac11,x (systems with AMD Radeon HD 5xxx and 6xxx series GPUs will be almost unusable when running Catalina.)&lt;/li&gt; &#xA; &lt;li&gt;iMac12,x (systems with AMD Radeon HD 5xxx and 6xxx series GPUs will be almost unusable when running Catalina.)&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro4,1&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro5,x&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro6,x&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro7,x&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro8,x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Late-2008 or newer MacBook Air or Aluminum Unibody MacBook:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacBookAir2,1&lt;/li&gt; &#xA; &lt;li&gt;MacBookAir3,x&lt;/li&gt; &#xA; &lt;li&gt;MacBookAir4,x&lt;/li&gt; &#xA; &lt;li&gt;MacBook5,1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Early-2009 or newer Mac Mini or white MacBook:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Macmini3,1&lt;/li&gt; &#xA; &lt;li&gt;Macmini4,1&lt;/li&gt; &#xA; &lt;li&gt;Macmini5,x (systems with AMD Radeon HD 6xxx series GPUs will be almost unusable when running Catalina.)&lt;/li&gt; &#xA; &lt;li&gt;MacBook5,2&lt;/li&gt; &#xA; &lt;li&gt;MacBook6,1&lt;/li&gt; &#xA; &lt;li&gt;MacBook7,1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Early-2008 or newer Xserve:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xserve2,1&lt;/li&gt; &#xA; &lt;li&gt;Xserve3,1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Machines that ARE NOT supported:&lt;/h2&gt; &#xA;&lt;h3&gt;2006-2007 Mac Pros, iMacs, MacBook Pros, and Mac Minis:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacPro1,1&lt;/li&gt; &#xA; &lt;li&gt;MacPro2,1&lt;/li&gt; &#xA; &lt;li&gt;iMac4,1&lt;/li&gt; &#xA; &lt;li&gt;iMac5,x&lt;/li&gt; &#xA; &lt;li&gt;iMac6,1&lt;/li&gt; &#xA; &lt;li&gt;iMac7,1&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro1,1&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro2,1&lt;/li&gt; &#xA; &lt;li&gt;MacBookPro3,1&lt;/li&gt; &#xA; &lt;li&gt;Macmini1,1&lt;/li&gt; &#xA; &lt;li&gt;Macmini2,1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The 2007 iMac 7,1 is compatible if the CPU is upgraded to a Penryn-based Core 2 Duo, such as a T9300.&lt;/h3&gt; &#xA;&lt;h3&gt;2006-2008 MacBooks:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacBook1,1&lt;/li&gt; &#xA; &lt;li&gt;MacBook2,1&lt;/li&gt; &#xA; &lt;li&gt;MacBook3,1&lt;/li&gt; &#xA; &lt;li&gt;MacBook4,1&lt;/li&gt; &#xA; &lt;li&gt;2008 MacBook Air (MacBookAir 1,1)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues:&lt;/h2&gt; &#xA;&lt;h3&gt;AMD/ATI Radeon HD 5xxx and 6xxx series graphics acceleration:&lt;/h3&gt; &#xA;&lt;p&gt;Currently, it is not possible to achieve full graphics acceleration under Catalina on any machines that use a Radeon HD 5xxx or 6xxx series GPU. If you have a machine with one of these GPUs installed, I&#39;d advise upgrading it if possible (can be done in 2010/2011 iMacs, iMac11,x-12,x), disabling the dedicated GPU if using a 2011 15&#34; or 17&#34; MacBook Pro (MacBookPro8,2/8,3, instructions to do so can be found here), or not installing Catalina. Running Catalina without full graphics acceleration will result in extremely poor system performance.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>headkaze/Hackintool</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/headkaze/Hackintool</id>
    <link href="https://github.com/headkaze/Hackintool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Swiss army knife of vanilla Hackintoshing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hackintool&lt;/h1&gt; &#xA;&lt;p&gt;The Swiss army knife of vanilla Hackintoshing&lt;/p&gt; &#xA;&lt;h1&gt;WARNING!&lt;/h1&gt; &#xA;&lt;p&gt;Hackintool is not an automated patching tool that does all the work for you. Knowledge is required on how to patch before using it. Please read the Intel Framebuffer patching using WhateverGreen guide before you download this tool! I also recommend reading @jaymonkey&#39;s An iDiot&#39;s Guide To Lilu and its Plug-ins and @CaseySJ&#39;s General Framebuffer Patching Guide using Hackintool.&lt;/p&gt; &#xA;&lt;h1&gt;Mojave, Lilu + WhateverGreen&lt;/h1&gt; &#xA;&lt;p&gt;You cannot use the Clover&#39;s KextsToPatch for framebuffer patching in Mojave for Skylake and above&lt;/p&gt; &#xA;&lt;h1&gt;Framebuffer Dumps&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There are a few ways to dump your framebuffer data (the second two require WhateverGreen + Lilu debug versions) to read in Hackintool:&lt;/li&gt; &#xA; &lt;li&gt;Use the Framebuffer-&amp;gt;macOS 10.13.6 / Framebuffer-&amp;gt;macOS 10.14 menu to create patches without a framebuffer dump&lt;/li&gt; &#xA; &lt;li&gt;Use the -igfxdump boot flag to dump IGPU framebuffer kext to /AppleIntelFramebuffer_X_Y (root of your boot drive) and then File-&amp;gt;Open menu&lt;/li&gt; &#xA; &lt;li&gt;Use the -igfxfbdump boot flag to dump native and patched framebuffer table to ioreg and then File-&amp;gt;Import-&amp;gt;IOReg Dump menu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports Sandy Bridge, Ivy Bridge, Haswell, Broadwell, Skylake, Kaby Lake, Coffee Lake, Cannon Lake and Ice Lake generations&lt;/li&gt; &#xA; &lt;li&gt;Create All, Connectors or VRAM patches&lt;/li&gt; &#xA; &lt;li&gt;Detect Changes for auto patch creation&lt;/li&gt; &#xA; &lt;li&gt;Create Clover patches in hex, base64 or Devices/Properties formats&lt;/li&gt; &#xA; &lt;li&gt;Displays native GPU and Model identifiers&lt;/li&gt; &#xA; &lt;li&gt;Display and edit Memory Info such as Stolen, Framebuffer, VRAM, Cursor etc.&lt;/li&gt; &#xA; &lt;li&gt;Roll over some items for additional info (Tooltips)&lt;/li&gt; &#xA; &lt;li&gt;Reads &#34;live&#34; data directly from Framebuffer kexts (if available; see Mojave note below)&lt;/li&gt; &#xA; &lt;li&gt;File-&amp;gt;Open framebuffer file generated by WhateverGreen&#39;s -igfxdump boot flag&lt;/li&gt; &#xA; &lt;li&gt;File-&amp;gt;Export-&amp;gt;Clover config.plist / File-&amp;gt;Export-&amp;gt;Framebuffer.txt file&lt;/li&gt; &#xA; &lt;li&gt;Patch audio layout id&lt;/li&gt; &#xA; &lt;li&gt;Add USB port limit patch&lt;/li&gt; &#xA; &lt;li&gt;Plug and unplug USB2 / USB3 devices and set port connector types then generate a USBPorts.kext&lt;/li&gt; &#xA; &lt;li&gt;Advanced patching options (DVMT pre-alloc 32 MB, VRAM 2048 MB, Disable eGPU, Enable HDMI20 (4K), DP -&amp;gt; HDMI, GfxYTile Fix, Reboot Fix, USB port Limit, Spoof Audio Device Id, FB Port Limit, Spoof Gfx Device Id)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Credits &amp;amp; Contributions&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vit9696 for WhateverGreen (full credits), Lilu (full credits), AppleALC (full credits), original USBPorts.kext and additional help&lt;/li&gt; &#xA; &lt;li&gt;vit9696 for IntelFramebuffer.bt with additional work by bcc9, Piker-Alpha and joevt&lt;/li&gt; &#xA; &lt;li&gt;daliansky for Intel Core Platform ID and SMBIOS Quick Reference&lt;/li&gt; &#xA; &lt;li&gt;Clover Development Team for various technical info&lt;/li&gt; &#xA; &lt;li&gt;vandroiy2013 for audio id data from AppleALC&lt;/li&gt; &#xA; &lt;li&gt;RehabMan for the all data patching method, ioreg framebuffer dump and other contributions&lt;/li&gt; &#xA; &lt;li&gt;EDID injection (Andy Vandijck / Marchrius)&lt;/li&gt; &#xA; &lt;li&gt;USB power injection (corpnewt)&lt;/li&gt; &#xA; &lt;li&gt;HDA controllers / codec lists by the VoodooHDA project&lt;/li&gt; &#xA; &lt;li&gt;System Configs compilation (CaseySJ)&lt;/li&gt; &#xA; &lt;li&gt;Clover downloader (Kozlek / JrCs / slice)&lt;/li&gt; &#xA; &lt;li&gt;Kext compiler &amp;amp; installer (Sascha Lamprecht / Gengik84 / LAbyOne)&lt;/li&gt; &#xA; &lt;li&gt;Atheros &amp;amp; SATA kexts (Sascha Lamprecht)&lt;/li&gt; &#xA; &lt;li&gt;DPCIManager (phpdev32 / MuntashirAkon)&lt;/li&gt; &#xA; &lt;li&gt;AppleIntelInfo (Pike R. Alpha)&lt;/li&gt; &#xA; &lt;li&gt;gfxutil (mcmatrix)&lt;/li&gt; &#xA; &lt;li&gt;VDADecoderChecker (Andy Breuhan)&lt;/li&gt; &#xA; &lt;li&gt;iMessageDebug (ElNono / mdmwii / flux84 / sugarface / pokenguyen)&lt;/li&gt; &#xA; &lt;li&gt;macserial (vit9696 / MacInfoPkg team)&lt;/li&gt; &#xA; &lt;li&gt;Model data (everymac.com)&lt;/li&gt; &#xA; &lt;li&gt;Translations: French (Matgen84), German (al6042), Korean (zisqo), Russian / Ukrainian (ctich), Chinese (daliansky, Bat.bat, penghubingzhou)&lt;/li&gt; &#xA; &lt;li&gt;Sparkle framework by Andy Matuschak&lt;/li&gt; &#xA; &lt;li&gt;Icon &amp;amp; UI updates by ultratiem&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Kochava/kochava-tracker-ios-sdk-cocoapod</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/Kochava/kochava-tracker-ios-sdk-cocoapod</id>
    <link href="https://github.com/Kochava/kochava-tracker-ios-sdk-cocoapod" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KochavaTracker iOS SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KochavaTrackeriOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/KochavaTrackeriOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/KochavaTrackeriOS.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Kochava/Apple-SwiftPackage-KochavaTracker/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/kochava/Apple-SwiftPackage-KochavaTracker?include_prereleases&amp;amp;sort=semver&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/KochavaTrackeriOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/KochavaTrackeriOS.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/KochavaTrackeriOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/KochavaTrackeriOS.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://storage.googleapis.com/kochava-web/2016/07/Kochava-horizontal-black-800x154.png&#34; width=&#34;260&#34;&gt; &#xA;&lt;h2&gt;KochavaTracker iOS Module&lt;/h2&gt; &#xA;&lt;p&gt;The KochavaTracker module is an optional module within the Kochava SDK providing install attribution and analytics.&lt;/p&gt; &#xA;&lt;p&gt;The Kochava SDK is a lightweight and easy to integrate SDK written in Objective-C, providing first-class integration with Kochava’s industry leading mobile attribution and analytics platform.&lt;/p&gt; &#xA;&lt;h2&gt;Built on&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 10.3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cocoapods.org/pods/KochavaCoreiOS&#34;&gt;KochavaCore&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/KochavaCoreiOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/KochavaCoreiOS.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Kochava/Apple-SwiftPackage-KochavaCore/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/kochava/Apple-SwiftPackage-KochavaCore?include_prereleases&amp;amp;sort=semver&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;KochavaTrackeriOS is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;KochavaTrackeriOS&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Kochava, &lt;a href=&#34;mailto:support@kochava.com&#34;&gt;support@kochava.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;KochavaTracker is available under the &lt;a href=&#34;https://www.kochava.com/terms-of-service/&#34;&gt;Kochava Terms of Service&lt;/a&gt;. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Default Branch&lt;/h2&gt; &#xA;&lt;p&gt;As of October 1, 2020, github.com uses the branch name ‘main’ when creating the initial default branch for all new repositories. In order to minimize any customizations in our github usage and to support consistent naming conventions, we have made the decision to rename the ‘master’ branch to be called ‘main’ in all Kochava’s github repos.&lt;/p&gt; &#xA;&lt;p&gt;For local copies of the repo, the following steps will update to the new default branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git branch -m master main&#xA;git fetch origin&#xA;git branch -u origin/main main&#xA;git remote set-head origin -a&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mixpanel/mixpanel-iphone</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/mixpanel/mixpanel-iphone</id>
    <link href="https://github.com/mixpanel/mixpanel-iphone" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official iOS (Objective-C) Tracking Library for Mixpanel Analytics&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/mixpanel/mixpanel-iphone&#34;&gt;&lt;img src=&#34;https://travis-ci.org/mixpanel/mixpanel-iphone.svg?branch=yolo-travis-ci&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/mixpanel/mixpanel-iphone&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/mixpanel/mixpanel-iphone.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/mixpanel/mixpanel-iphone&#34; title=&#34;Percentage of issues still open&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/open/mixpanel/mixpanel-iphone.svg?sanitize=true&#34; alt=&#34;Percentage of issues still open&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mixpanel.com&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/Mixpanel.svg?style=flat&#34; alt=&#34;CocoaPods Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mixpanel.com&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/l/Mixpanel.svg?style=flat&#34; alt=&#34;Apache License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;!-- MarkdownTOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#quick-start-guide&#34;&gt;Quick Start Guide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#1-install-mixpanel&#34;&gt;Install Mixpanel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#2-initialize-mixpanel&#34;&gt;Initialize Mixpanel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#3-send-data&#34;&gt;Send Data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#4-check-for-success&#34;&gt;Check for Success&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#complete-code-example&#34;&gt;Complete Code Example&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#i-want-to-know-more&#34;&gt;I want to know more!&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /MarkdownTOC --&gt; &#xA;&lt;p&gt;&lt;a name=&#34;introduction&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;The Mixpanel library for iOS is an open source project, and we&#39;d love to see your contributions! We&#39;d also love for you to come and work with us! Check out &lt;a href=&#34;https://mixpanel.com/jobs/#openings&#34;&gt;https://mixpanel.com/jobs/#openings&lt;/a&gt; for details. If you are using Swift, we recommend our &lt;strong&gt;&lt;a href=&#34;https://github.com/mixpanel/mixpanel-swift&#34;&gt;Swift Library&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://developer.mixpanel.com/docs/ios&#34;&gt;Advanced iOS - Objective-C Guide&lt;/a&gt; for additional advanced configurations and use cases, like setting up your project with European Union data storage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#complete-code-example&#34;&gt;Skip to a complete code example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Start Guide&lt;/h1&gt; &#xA;&lt;p&gt;Caution: From v4.0.0.beta.3 to v4.1.0, we have a bug that events with ampersand(&amp;amp;) will be rejected by the server. We recommend you update to v4.1.1 or above.&lt;/p&gt; &#xA;&lt;h2&gt;1. Install Mixpanel&lt;/h2&gt; &#xA;&lt;p&gt;You can install the Mixpanel iOS - Objective-C library by using CocoaPods or Carthage. You will need your project token for initializing your library. You can get your project token from &lt;a href=&#34;https://mixpanel.com/settings/project&#34;&gt;project settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation Option 1: CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If this is your first time using CocoaPods, Install CocoaPods using &lt;code&gt;gem install cocoapods&lt;/code&gt;. Otherwise, continue to Step 3.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod setup&lt;/code&gt; to create a local CocoaPods spec mirror.&lt;/li&gt; &#xA; &lt;li&gt;Create a Podfile in your Xcode project directory by running &lt;code&gt;pod init&lt;/code&gt; in your terminal, edit the Podfile generated, and add the following line: &lt;code&gt;pod &#39;Mixpanel&#39;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; in your Xcode project directory. CocoaPods should download and install the Mixpanel library, and create a new Xcode workspace. Open up this workspace in Xcode or typing &lt;code&gt;open *.xcworkspace&lt;/code&gt; in your terminal.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Installation Option 2: Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Mixpanel supports Carthage to package your dependencies as a framework. Include the following dependency in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;github &#34;mixpanel/mixpanel-iphone&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/Carthage/Carthage#if-youre-building-for-ios-tvos-or-watchos&#34;&gt;Carthage docs&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Installation Option 3: Swift Package Manager&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In Xcode, select File &amp;gt; Add Packages...&lt;/li&gt; &#xA; &lt;li&gt;Enter the package URL for this &lt;a href=&#34;https://github.com/mixpanel/mixpanel-iphone&#34;&gt;repository&lt;/a&gt; and must select a version greater than or equal to v4.0.0&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;2. Initialize Mixpanel&lt;/h2&gt; &#xA;&lt;p&gt;To initialize the library, add `#Import &#34;Mixpanel/Mixpanel.h&#34; into &#34;AppDelegate.m&#34; and call &lt;a href=&#34;https://mixpanel.github.io/mixpanel-iphone/Classes/Mixpanel.html#//api/name/sharedInstanceWithToken:&#34;&gt;sharedInstanceWithToken:&lt;/a&gt; with your project token as its argument in &lt;a href=&#34;https://developer.apple.com/documentation/uikit/uiapplicationdelegate#//apple_ref/occ/intfm/UIApplicationDelegate/application:willFinishLaunchingWithOptions:&#34;&gt;application:didFinishLaunchingWithOptions:&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &#34;Mixpanel/Mixpanel.h&#34;&#xA;&#xA;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {&#xA;...&#xA;  [Mixpanel sharedInstanceWithToken:@&#34;YOUR_API_TOKEN&#34;];&#xA;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mixpanel.github.io/mixpanel-iphone/Classes/Mixpanel.html&#34;&gt;See all configuration options&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3. Send Data&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s get started by sending event data. You can send an event from anywhere in your application. Better understand user behavior by storing details that are specific to the event (properties). After initializing the library, Mixpanel will &lt;a href=&#34;https://mixpanel.com/help/questions/articles/which-common-mobile-events-can-mixpanel-collect-on-my-behalf-automatically&#34;&gt;automatically collect common mobile events&lt;/a&gt;. You can enable/disable automatic collection through your &lt;a href=&#34;https://help.mixpanel.com/hc/en-us/articles/115004596186#enable-or-disable-common-mobile-events&#34;&gt;project settings&lt;/a&gt;. Also, Mixpanel automatically tracks some properties by default. &lt;a href=&#34;https://help.mixpanel.com/hc/en-us/articles/115004613766-Default-Properties-Collected-by-Mixpanel#iOS&#34;&gt;learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;Mixpanel *mixpanel = [Mixpanel sharedInstance];&#xA;[mixpanel track:@&#34;Sign Up&#34; properties:@{&#xA;  @&#34;source&#34;: @&#34;Pat&#39;s affiliate site&#34;,&#xA;  @&#34;Opted out of email&#34;: @YES&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4. Check for Success&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://mixpanel.com/report/live&#34;&gt;Open up Live View in Mixpanel&lt;/a&gt; to view incoming events.&lt;/p&gt; &#xA;&lt;p&gt;Once data hits our API, it generally takes ~60 seconds for it to be processed, stored, and queryable in your project.&lt;/p&gt; &#xA;&lt;h2&gt;Complete Code Example&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a runnable code example that covers everything in this quickstart guide.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &#34;Mixpanel/Mixpanel.h&#34;&#xA;&#xA;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {&#xA;...&#xA;  Mixpanel *mixpanel = [Mixpanel sharedInstanceWithToken:@&#34;YOUR_API_TOKEN&#34;];&#xA;  [mixpanel track:@&#34;Sign Up&#34; properties:@{&#xA;    @&#34;source&#34;: @&#34;Pat&#39;s affiliate site&#34;,&#xA;    @&#34;Opted out of email&#34;: @YES&#xA;  }];&#xA;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;I want to stop tracking an event/event property in Mixpanel. Is that possible?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yes, in Lexicon, you can intercept and drop incoming events or properties. Mixpanel won’t store any new data for the event or property you select to drop. &lt;a href=&#34;https://help.mixpanel.com/hc/en-us/articles/360001307806#dropping-events-and-properties&#34;&gt;See this article for more information&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;I have a test user I would like to opt out of tracking. How do I do that?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mixpanel’s client-side tracking library contains the &lt;a href=&#34;https://mixpanel.github.io/mixpanel-iphone/Classes/Mixpanel.html#//api/name/optOutTracking&#34;&gt;optOutTracking()&lt;/a&gt; method, which will set the user’s local opt-out state to “true” and will prevent data from being sent from a user’s device. More detailed instructions can be found in the section, &lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/ios#opting-users-out-of-tracking&#34;&gt;Opting users out of tracking&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why aren&#39;t my events showing up?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To preserve battery life and customer bandwidth, the Mixpanel library doesn&#39;t send the events you record immediately. Instead, it sends batches to the Mixpanel servers every 60 seconds while your application is running, as well as when the application transitions to the background. You can call &lt;a href=&#34;https://mixpanel.github.io/mixpanel-iphone/Classes/Mixpanel.html#//api/name/flush&#34;&gt;flush()&lt;/a&gt; manually if you want to force a flush at a particular moment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[mixpanel flush];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your events are still not showing up after 60 seconds, check if you have opted out of tracking. You can also enable Mixpanel debugging and logging, it allows you to see the debug output from the Mixpanel library. To enable it, set &lt;a href=&#34;https://mixpanel.github.io/mixpanel-iphone/Classes/Mixpanel.html#//api/name/enableLogging&#34;&gt;enableLogging&lt;/a&gt; to true.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;mixpanel.enableLogging = YES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Starting with iOS 14.5, do I need to request the user’s permission through the AppTrackingTransparency framework to use Mixpanel?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;No, Mixpanel does not use IDFA so it does not require user permission through the AppTrackingTransparency(ATT) framework.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If I use Mixpanel, how do I answer app privacy questions for the App Store?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please refer to our &lt;a href=&#34;https://mixpanel.com/legal/app-store-privacy-details/&#34;&gt;Apple App Developer Privacy Guidance&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;I want to know more!&lt;/h2&gt; &#xA;&lt;p&gt;No worries, here are some links that you will find useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://developer.mixpanel.com/docs/ios&#34;&gt;Advanced iOS - Objective-C Guide&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/mixpanel/mixpanel-iphone/tree/master/HelloMixpanel&#34;&gt;Sample app&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://mixpanel.github.io/mixpanel-iphone/index.html&#34;&gt;Full API Reference&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Have any questions? Reach out to Mixpanel &lt;a href=&#34;https://help.mixpanel.com/hc/en-us/requests/new&#34;&gt;Support&lt;/a&gt; to speak to someone smart, quickly.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Kochava/kochava-core-ios-cocoapod</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/Kochava/kochava-core-ios-cocoapod</id>
    <link href="https://github.com/Kochava/kochava-core-ios-cocoapod" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KochavaCore iOS Module&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KochavaCoreiOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/KochavaCoreiOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/KochavaCoreiOS.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/KochavaCoreiOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/KochavaCoreiOS.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/KochavaCoreiOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/KochavaCoreiOS.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://storage.googleapis.com/kochava-web/2016/07/Kochava-horizontal-black-800x154.png&#34; width=&#34;260&#34;&gt; &#xA;&lt;h2&gt;Cocoapod KochavaCore&lt;/h2&gt; &#xA;&lt;p&gt;The KochavaCore module provides core support for all modules within the Kochava iOS SDK.&lt;/p&gt; &#xA;&lt;p&gt;The Kochava SDK is a lightweight and easy to integrate SDK written in Objective-C, providing first-class integration with Kochava’s industry leading mobile attribution and analytics platform.&lt;/p&gt; &#xA;&lt;h2&gt;Built on&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 10.3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;None&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;KochavaCoreiOS is available through &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;KochavaCoreiOS&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Kochava, &lt;a href=&#34;mailto:support@kochava.com&#34;&gt;support@kochava.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;KochavaCore is available under the &lt;a href=&#34;https://www.kochava.com/terms-of-service/&#34;&gt;Kochava Terms of Service&lt;/a&gt;. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Default Branch&lt;/h2&gt; &#xA;&lt;p&gt;As of October 1, 2020, github.com uses the branch name ‘main’ when creating the initial default branch for all new repositories. In order to minimize any customizations in our github usage and to support consistent naming conventions, we have made the decision to rename the ‘master’ branch to be called ‘main’ in all Kochava’s github repos.&lt;/p&gt; &#xA;&lt;p&gt;For local copies of the repo, the following steps will update to the new default branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git branch -m master main&#xA;git fetch origin&#xA;git branch -u origin/main main&#xA;git remote set-head origin -a&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>facebookarchive/xctool</title>
    <updated>2022-05-31T01:48:04Z</updated>
    <id>tag:github.com,2022-05-31:/facebookarchive/xctool</id>
    <link href="https://github.com/facebookarchive/xctool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extension for Apple&#39;s xcodebuild that makes it easier to test iOS and macOS apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xctool&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;xctool&lt;/strong&gt; is an extension for Apple&#39;s &lt;strong&gt;xcodebuild&lt;/strong&gt; which makes it easier to test iOS and Mac products. It&#39;s especially helpful for continuous integration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/facebook/xctool&#34;&gt;&lt;img src=&#34;https://travis-ci.org/facebook/xctool.png?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;[ &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#requirements&#34;&gt;Requirements&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#continuous-integration&#34;&gt;Continuous Integration&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#reporters&#34;&gt;Reporters&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#configuration-xctool-args&#34;&gt;Configuration&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#contributing&#34;&gt;Contributing&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#known-issues--tips&#34;&gt;Known Issues &amp;amp; Tips&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#license&#34;&gt;License&lt;/a&gt; ]&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;xctool&lt;/strong&gt; is drop-in replacement for &lt;code&gt;xcodebuild test&lt;/code&gt; that adds a few extra features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Faster, parallelized test runs.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;xctool&lt;/em&gt; can optionally run all of your test bundles in parallel, speeding up your test runs significantly. At Facebook, we&#39;ve seen 2x and 3x speed ups by parallelizing our runs.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;-parallelize&lt;/code&gt; option with &lt;em&gt;run-tests&lt;/em&gt; or &lt;em&gt;test&lt;/em&gt; to enable. See &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#parallelizing-test-runs&#34;&gt;Parallelizing Test Runs&lt;/a&gt; for more info.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Structured output of test results.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;xctool&lt;/em&gt; captures all test results as structured JSON objects. If you&#39;re building a continuous integration system, this means you don&#39;t have to regex parse &lt;em&gt;xcodebuild&lt;/em&gt; output anymore.&lt;/p&gt; &lt;p&gt;Try one of the &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#reporters&#34;&gt;Reporters&lt;/a&gt; to customize the output or get the full event stream with the &lt;code&gt;-reporter json-stream&lt;/code&gt; option.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Human-friendly, ANSI-colored output.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;xcodebuild&lt;/em&gt; is incredibly verbose, printing the full compile command and output for every source file. By default, &lt;em&gt;xctool&lt;/em&gt; is only verbose if something goes wrong, making it much easier to identify where the problems are.&lt;/p&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://fpotter_public.s3.amazonaws.com/xctool-uicatalog.gif&#34; alt=&#34;pretty output&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Written in Objective-C.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;xctool&lt;/em&gt; is written in Objective-C. Mac OS X and iOS developers can easily submit new features and fix any bugs they may encounter without learning a new language. We very much welcome pull requests!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Support for building projects with xctool is deprecated and will not be updated to support future versions of Xcode. We suggest moving to &lt;code&gt;xcodebuild&lt;/code&gt; (with &lt;a href=&#34;https://github.com/supermarin/xcpretty&#34;&gt;xcpretty&lt;/a&gt;) for simple needs, or &lt;a href=&#34;https://github.com/facebook/xcbuild&#34;&gt;xcbuild&lt;/a&gt; for more involved requirements. xctool will continue to support testing (see above).&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 7 or higher&lt;/li&gt; &#xA; &lt;li&gt;You&#39;ll need Xcode&#39;s Command Line Tools installed. From Xcode, install via &lt;em&gt;Xcode → Preferences → Downloads&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;xctool can be installed from homebrew via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install xctool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or can be downloaded and run via the xctool.sh command.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;xctool&#39;s commands and options are mostly a superset of xcodebuild&#39;s. In most cases, you can just swap &lt;strong&gt;xcodebuild&lt;/strong&gt; with &lt;strong&gt;xctool&lt;/strong&gt; and things will run as expected but with more attractive output.&lt;/p&gt; &#xA;&lt;p&gt;You can always get help and a full list of options with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh -help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;xctool&lt;/em&gt; has a &lt;strong&gt;run-tests&lt;/strong&gt; action which knows how to run the tests in your scheme. You can optionally limit what tests are run or change the SDK they&#39;re run against.&lt;/p&gt; &#xA;&lt;p&gt;To run all tests in your scheme, you would use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run just the tests in a specific target, use the &lt;code&gt;-only&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -only SomeTestTarget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can go further and just run a specific test class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -only SomeTestTarget:SomeTestClass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, even further and run just a single test method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -only SomeTestTarget:SomeTestClass/testSomeMethod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify prefix matching for classes or test methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -only SomeTestTarget:SomeTestClassPrefix*,SomeTestClass/testSomeMethodPrefix*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can omit a specific item by prefix matching for classes or test methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -omit SomeTestTarget:SomeTestClass/testSomeMethodPrefix*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run tests against a different SDK:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -test-sdk iphonesimulator5.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally you can specify &lt;code&gt;-testTimeout&lt;/code&gt; when running tests. When an individual test hits this timeout, it is considered a failure rather than waiting indefinitely. This can prevent your test run from deadlocking forever due to misbehaving tests.&lt;/p&gt; &#xA;&lt;p&gt;By default application tests will wait at most 30 seconds for the simulator to launch. If you need to change this timeout, use the &lt;code&gt;-launch-timeout&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;Building Tests&lt;/h4&gt; &#xA;&lt;p&gt;Before running tests you need to build them. You can use &lt;strong&gt;xcodebuild&lt;/strong&gt;, &lt;strong&gt;xcbuild&lt;/strong&gt; or &lt;strong&gt;Buck&lt;/strong&gt; to do that.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xcodebuild \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  build-for-testing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Xcode 7&lt;/h5&gt; &#xA;&lt;p&gt;If you are using Xcode 7 for building you can continue using xctool to build tests using &lt;strong&gt;build-tests&lt;/strong&gt; or just use &lt;strong&gt;test&lt;/strong&gt; actions to run tests.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  build-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally just build a single test target with the &lt;code&gt;-only&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  build-tests -only SomeTestTarget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Parallelizing Test Runs&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;xctool&lt;/em&gt; can optionally run unit tests in parallel, making better use of otherwise idle CPU cores. At Facebook, we&#39;ve seen 2x and 3x gains by parallelizing our test runs.&lt;/p&gt; &#xA;&lt;p&gt;To allow test bundles to run concurrently, use the &lt;code&gt;-parallelize&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -parallelize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above gives you parallelism, but you&#39;re bounded by your slowest test bundle. For example, if you had two test bundles (&#39;A&#39; and &#39;B&#39;), but &#39;B&#39; took 10 times as long to run because it contained 10 times as many tests, then the above parallelism won&#39;t help much.&lt;/p&gt; &#xA;&lt;p&gt;You can get further gains by breaking your test execution into buckets using the &lt;code&gt;-logicTestBucketSize&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -parallelize -logicTestBucketSize 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will break your test execution into buckets of &lt;em&gt;20&lt;/em&gt; test cases each, and those bundles will be run concurrently. If some of your test bundles are much larger than others, this will help even things out and speed up the overall test run.&lt;/p&gt; &#xA;&lt;h3&gt;Building (Xcode 7 only)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Support for building projects with xctool is deprecated and isn&#39;t supported in Xcode 8 and later. We suggest moving to &lt;code&gt;xcodebuild&lt;/code&gt; (with &lt;a href=&#34;https://github.com/supermarin/xcpretty&#34;&gt;xcpretty&lt;/a&gt;) for simple needs, or &lt;a href=&#34;https://github.com/facebook/xcbuild&#34;&gt;xcbuild&lt;/a&gt; for more involved requirements. Alternatively, you can use &lt;a href=&#34;https://buckbuild.com/&#34;&gt;Buck&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Building products with &lt;em&gt;xctool&lt;/em&gt; is the same as building them with &lt;em&gt;xcodebuild&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you use workspaces and schemes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use projects and schemes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -project YourProject.xcodeproj \&#xA;  -scheme YourScheme \&#xA;  build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All of the common options like &lt;code&gt;-configuration&lt;/code&gt;, &lt;code&gt;-sdk&lt;/code&gt;, &lt;code&gt;-arch&lt;/code&gt; work just as they do with &lt;em&gt;xcodebuild&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: &lt;em&gt;xctool&lt;/em&gt; doesn&#39;t support directly building targets using &lt;code&gt;-target&lt;/code&gt;; you must use schemes.&lt;/p&gt; &#xA;&lt;h2&gt;Continuous Integration&lt;/h2&gt; &#xA;&lt;p&gt;xctool is an excellent choice for running your tests under a continuous integration server such as &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; or &lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt;. To run tests within a continuous integration environment, you must create &lt;strong&gt;Shared Schemes&lt;/strong&gt; for your application target and ensure that all dependencies (such as CocoaPods) are added explicitly to the Scheme. To do so:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open up the &lt;strong&gt;Manage Schemes&lt;/strong&gt; sheet by selecting the &lt;strong&gt;Product&lt;/strong&gt; menu &amp;gt; &lt;strong&gt;Schemes&lt;/strong&gt; &amp;gt; &lt;strong&gt;Manage Schemes...&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Locate your application target in the list. Ensure that the &lt;strong&gt;Shared&lt;/strong&gt; checkbox in far right hand column of the sheet is checked.&lt;/li&gt; &#xA; &lt;li&gt;If your application or test targets include cross-project dependencies such as CocoaPods, then you will need to ensure that they have been configured as explicit dependencies. To do so: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Highlight your application target and hit the &lt;strong&gt;Edit...&lt;/strong&gt; button to open the Scheme editing sheet.&lt;/li&gt; &#xA;   &lt;li&gt;Click the &lt;strong&gt;Build&lt;/strong&gt; tab in the left-hand panel of the Scheme editor.&lt;/li&gt; &#xA;   &lt;li&gt;Click the &lt;strong&gt;+&lt;/strong&gt; button and add each dependency to the project. CocoaPods will appear as a static library named &lt;strong&gt;Pods&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Drag the dependency above your application target so that it is built first.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You will now have a new file in the &lt;strong&gt;xcshareddata/xcschemes&lt;/strong&gt; directory underneath your Xcode project. This is the shared Scheme that you just configured. Check this file into your repository and xctool will be able to find and execute your tests on the next CI build.&lt;/p&gt; &#xA;&lt;h3&gt;Example Travis CI Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; is a very popular continuous integration system offered for free to Open Source projects. It integrates well with Github, and it now uses &lt;em&gt;xctool&lt;/em&gt; as the default build and test tool for Objective-C projects. Once you have set up your shared Scheme for use with xctool, you will need to configure a &lt;code&gt;.travis.yml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using workspaces, your &lt;code&gt;.travis.yml&lt;/code&gt; might be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: objective-c&#xA;xcode_workspace: path/to/YourApp.xcworkspace&#xA;xcode_scheme: YourApp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using projects, your &lt;code&gt;.travis.yml&lt;/code&gt; might be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: objective-c&#xA;xcode_project: path/to/YourApp.xcodeproj&#xA;xcode_scheme: YourApp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more flexibility, you can also control how Travis installs and invokes xctool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: objective-c&#xA;before_install:&#xA;    - brew update&#xA;    - brew install xctool&#xA;script: xctool -workspace MyApp.xcworkspace -scheme MyApp test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can learn more about the Travis CI environment for iOS and OS X application by referring to the &lt;a href=&#34;http://about.travis-ci.org/docs/user/osx-ci-environment/&#34;&gt;About OS X Travis CI Environment&lt;/a&gt; document and find in-depth documentation for configuring your project by consulting the &lt;a href=&#34;http://about.travis-ci.org/docs/user/getting-started/&#34;&gt;Getting Started&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Reporters&lt;/h2&gt; &#xA;&lt;p&gt;xctool has reporters that output build and test results in different formats. If you do not specify any reporters yourself, xctool uses the &lt;code&gt;pretty&lt;/code&gt; and &lt;code&gt;user-notifications&lt;/code&gt; reporters by default. xctool also has these special rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overwrite is disabled on the &lt;code&gt;pretty&lt;/code&gt; reporter when xctool does not detect a TTY. This can be overridden by setting &lt;code&gt;XCTOOL_FORCE_TTY&lt;/code&gt; in the environment.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;user-notifications&lt;/code&gt; reporter will not be used if xctool detects that the build is being run by Travis CI, CircleCI, TeamCity, or Jenkins (i.e. &lt;code&gt;TRAVIS=true&lt;/code&gt;, &lt;code&gt;CIRCLECI=true&lt;/code&gt;, &lt;code&gt;TEAMCITY_VERSION&lt;/code&gt;, or &lt;code&gt;JENKINS_URL&lt;/code&gt; in the environment).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can choose your own reporters with the &lt;code&gt;-reporter&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  -reporter plain \&#xA;  build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, reporters output to standard out, but you can also direct the output to a file by adding &lt;code&gt;:OUTPUT_PATH&lt;/code&gt; after the reporter name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  -reporter plain:/path/to/plain-output.txt \&#xA;  build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use as many reporters as you like; just use the &lt;code&gt;-reporter&lt;/code&gt; option multiple times.&lt;/p&gt; &#xA;&lt;h3&gt;Included Reporters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;pretty&lt;/strong&gt;: a text-based reporter that uses ANSI colors and unicode symbols for pretty output (the default).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;plain&lt;/strong&gt;: like &lt;em&gt;pretty&lt;/em&gt;, but with no colors or unicode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;phabricator&lt;/strong&gt;: outputs a JSON array of build/test results which can be fed into the &lt;a href=&#34;http://phabricator.org/&#34;&gt;Phabricator&lt;/a&gt; code-review tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;junit&lt;/strong&gt;: produces a JUnit/xUnit compatible XML file with test results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;json-stream&lt;/strong&gt;: a stream of build/test events as JSON dictionaries, one per line &lt;a href=&#34;https://gist.github.com/fpotter/82ffcc3d9a49d10ee41b&#34;&gt;(example output)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;json-compilation-database&lt;/strong&gt;: outputs a &lt;a href=&#34;http://clang.llvm.org/docs/JSONCompilationDatabase.html&#34;&gt;JSON Compilation Database&lt;/a&gt; of build events which can be used by &lt;a href=&#34;http://clang.llvm.org/docs/LibTooling.html&#34;&gt;Clang Tooling&lt;/a&gt; based tools, e.g. &lt;a href=&#34;http://oclint.org&#34;&gt;OCLint&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;user-notifications&lt;/strong&gt;: sends notification to Notification Center when action is completed &lt;a href=&#34;https://cloud.githubusercontent.com/assets/1044236/2771974/a2715306-ca74-11e3-9889-fa50607cc412.png&#34;&gt;(example notifications)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;teamcity&lt;/strong&gt;: sends service messages to &lt;a href=&#34;http://www.jetbrains.com/teamcity/&#34;&gt;TeamCity&lt;/a&gt; Continuous Integration Server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Implementing Your Own Reporters&lt;/h3&gt; &#xA;&lt;p&gt;You can also implement your own reporters using whatever language you like. Reporters in xctool are separate executables that read JSON objects from STDIN and write formatted results to STDOUT.&lt;/p&gt; &#xA;&lt;p&gt;You can invoke reporters by passing their full path via the &lt;code&gt;-reporter&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  -reporter /path/to/your/reporter \&#xA;  test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, here&#39;s a simple reporter in Python that outputs a &lt;em&gt;period&lt;/em&gt; for every passing test and an &lt;em&gt;exclamation mark&lt;/em&gt; for every failing test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python&#xA;&#xA;import fileinput&#xA;import json&#xA;import sys&#xA;&#xA;for line in fileinput.input():&#xA;    obj = json.loads(line)&#xA;&#xA;    if obj[&#39;event&#39;] == &#39;end-test&#39;:&#xA;        if obj[&#39;succeeded&#39;]:&#xA;            sys.stdout.write(&#39;.&#39;)&#xA;        else:&#xA;            sys.stdout.write(&#39;!&#39;)&#xA;&#xA;sys.stdout.write(&#39;\n&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re writing a reporter in Objective-C, you&#39;ll find the &lt;code&gt;Reporter&lt;/code&gt; class helpful - see &lt;a href=&#34;https://github.com/facebook/xctool/raw/master/Common/Reporter.h&#34;&gt;Reporter.h&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration (.xctool-args)&lt;/h2&gt; &#xA;&lt;p&gt;If you routinely need to pass many arguments to &lt;em&gt;xctool&lt;/em&gt; on the command-line, you can use an &lt;strong&gt;.xctool-args&lt;/strong&gt; file to speed up your workflow. If &lt;em&gt;xctool&lt;/em&gt; finds an &lt;strong&gt;.xctool-args&lt;/strong&gt; file in the current directory, it will automatically pre-populate its arguments from there.&lt;/p&gt; &#xA;&lt;p&gt;The format is just a JSON array of arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;  &#34;-workspace&#34;, &#34;YourWorkspace.xcworkspace&#34;,&#xA;  &#34;-scheme&#34;, &#34;YourScheme&#34;,&#xA;  &#34;-configuration&#34;, &#34;Debug&#34;,&#xA;  &#34;-sdk&#34;, &#34;iphonesimulator&#34;,&#xA;  &#34;-arch&#34;, &#34;i386&#34;&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any extra arguments you pass on the command-line will take precedence over those in the &lt;em&gt;.xctool-args&lt;/em&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug fixes, improvements, and especially new &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#reporters&#34;&gt;Reporter&lt;/a&gt; implementations are welcome. Before submitting a &lt;a href=&#34;https://help.github.com/articles/using-pull-requests&#34;&gt;pull request&lt;/a&gt;, please be sure to sign the &lt;a href=&#34;https://developers.facebook.com/opensource/cla&#34;&gt;Facebook Contributor License Agreement&lt;/a&gt;. We can&#39;t accept pull requests unless it&#39;s been signed.&lt;/p&gt; &#xA;&lt;h4&gt;Workflow&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork.&lt;/li&gt; &#xA; &lt;li&gt;Make a feature branch: &lt;strong&gt;git checkout -b my-feature&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make your feature. Keep things tidy so you have one commit per self-contained change (squashing can help).&lt;/li&gt; &#xA; &lt;li&gt;Push your branch to your fork: &lt;strong&gt;git push -u origin my-feature&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open GitHub, under &#34;Your recently pushed branches&#34;, click &lt;strong&gt;Pull Request&lt;/strong&gt; for &lt;em&gt;my-feature&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Be sure to use a separate feature branch and pull request for every self-contained feature. If you need to make changes from feedback, make the changes in place rather than layering on commits (use interactive rebase to edit your earlier commits). Then use &lt;strong&gt;git push --force origin my-feature&lt;/strong&gt; to update your pull request.&lt;/p&gt; &#xA;&lt;h4&gt;Workflow (for Facebook people, other committers)&lt;/h4&gt; &#xA;&lt;p&gt;Mostly the same, but use branches in the main xctool repo if you prefer. It&#39;s a nice way to keep things together.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make a feature branch: &lt;strong&gt;git checkout -b myusername/my-feature&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Push your branch: &lt;strong&gt;git push -u origin myusername/my-feature&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open GitHub to &lt;a href=&#34;https://github.com/facebook/xctool&#34;&gt;facebook/xctool&lt;/a&gt;, under &#34;Your recently pushed branches&#34;, click &lt;strong&gt;Pull Request&lt;/strong&gt; for &lt;em&gt;myusername/my-feature&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Known Issues &amp;amp; Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use shared schemes and disable the Autocreate Schemes feature.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Xcode has two kinds of schemes: shared, and user. User schemes are the default, and they&#39;re stored under a folder called &lt;code&gt;USERNAME.xcuserdatad&lt;/code&gt;, which most people correctly add to their &lt;em&gt;.gitignore&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Use shared schemes instead, and commit them to your repo. This way everyone on your team (and your build server) are working from the same information, and are building in the same way.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://fpotter_public.s3.amazonaws.com/xctool-shared-schemes.png&#34; alt=&#34;example&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Make sure simulators run in a GUI context&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;If you are running &lt;code&gt;xctool&lt;/code&gt; in continuous integration, the user account calling &lt;code&gt;xctool&lt;/code&gt; &lt;strong&gt;must&lt;/strong&gt; have an active GUI context. If not, the simulator will fail to start with cryptic warnings like:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Tried to install the test host app &#39;com.myapp.test&#39; but failed.&#xA;Preparing test environment failed.&#xA;-[TEST_BUNDLE FAILED_TO_START] &#xA;There was a problem starting the test bundle: Simulator &#39;iPhone 6&#39; was not prepared: Failed for unknown reason.&#xA;Test did not run: Simulator &#39;iPhone 6&#39; was not prepared: Failed for unknown reason.&#xA;2015-01-21 12:02:19.296 xcodebuild[35135:875297]  iPhoneSimulator: Timed out waiting 120 seconds for simulator to boot, current state is 1.&#xA;Testing failed:&#xA;Test target MyProjectTests encountered an error (Timed out waiting 120 seconds for simulator to boot, current state is 1.  &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the same holds true with &lt;code&gt;xcodebuild&lt;/code&gt;...this is not &lt;code&gt;xctool&lt;/code&gt; specific.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href=&#34;http://staxmanade.com/2015/01/setting-jenkins-up-to-run-xctool-and-xcode-simulator-tests/&#34;&gt;this post by Jason Jarrett&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2014-present Facebook&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this work except in compliance with the License. You may obtain a copy of the License in the LICENSE file, or at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
</feed>