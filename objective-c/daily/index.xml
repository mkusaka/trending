<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-31T01:37:10Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tzmax/V2RayXS</title>
    <updated>2022-10-31T01:37:10Z</updated>
    <id>tag:github.com,2022-10-31:/tzmax/V2RayXS</id>
    <link href="https://github.com/tzmax/V2RayXS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GUI for xray-core on macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;V2RayXS: A simple GUI for Xray on macOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/tzmax/V2RayXS&#34; alt=&#34;GitHub release (latest SemVer)&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/tzmax/V2RayXS/latest/total&#34; alt=&#34;GitHub release (latest by date)&#34;&gt; &lt;a href=&#34;https://travis-ci.org/tzmax/V2RayXS&#34;&gt;&lt;img src=&#34;https://travis-ci.org/tzmax/V2RayXS.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Attention&lt;/strong&gt;: If you want to use v2ray-core version please install the original project. &lt;a href=&#34;https://github.com/Cenmrev/V2RayX&#34;&gt;https://github.com/Cenmrev/V2RayX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This repo is based on the &lt;a href=&#34;https://github.com/Cenmrev/V2RayX&#34;&gt;Cenmrev/V2RayX&lt;/a&gt; project for maintenance and update, uses the &lt;a href=&#34;https://github.com/XTLS/Xray-core&#34;&gt;Xray-core&lt;/a&gt; implementation to support the VLESS and XTLS protocol, and the copyright of the application belongs to the original author &lt;a href=&#34;https://github.com/Cenmrev&#34;&gt;@Contents&lt;/a&gt;. Pay tribute to &lt;a href=&#34;https://github.com/Cenmrev&#34;&gt;@Contents&lt;/a&gt;, Thanks to the &lt;a href=&#34;https://github.com/XTLS&#34;&gt;@XTLS&lt;/a&gt; community and all contributors&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;What is V2Ray?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;READ THIS&lt;/strong&gt;: &lt;a href=&#34;http://www.v2ray.com&#34;&gt;Project V2Ray&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;YOU SHOULD READ V2RAY&#39;S OFFICIAL INSTRUCTION BEFORE USING V2RAYX!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;del&gt;Other V2Ray clients on macOS: &lt;a href=&#34;https://github.com/yanue/v2rayu&#34;&gt;V2RayU&lt;/a&gt;. (Not related to or endorsed by authors of this repo. USE AT YOUR OWN RISK. The project may have failed.)&lt;/del&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;What is XTLS? Xray?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;READ THIS&lt;/strong&gt;: &lt;a href=&#34;https://xtls.github.io&#34;&gt;XTLS? Xray? V2Ray?&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;YOU SHOULD READ XTLS&#39;S OFFICIAL INSTRUCTION BEFORE USING V2RAYXS!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download V2RayXS&lt;/h2&gt; &#xA;&lt;p&gt;Download from &lt;a href=&#34;https://github.com/tzmax/V2RayXS/releases&#34;&gt;Releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;V2RayXS.app is built by running one of the following commands in your terminal. You can install this via the command-line with curl.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sh -c &#34;$(curl -fsSL https://raw.githubusercontent.com/tzmax/V2RayXS/master/compilefromsource.sh)&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or step by step:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone --recursive https://github.com/tzmax/V2RayXS.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;open V2RayXS.xcodeproj and use Xcode to build V2RayXS.&lt;/p&gt; &#xA;&lt;h2&gt;How does V2RayXS work&lt;/h2&gt; &#xA;&lt;p&gt;V2RayXS provides a GUI to generate the config file for V2Ray. It includes Xray&#39;s binary executable in the app bundle. V2RayXS starts and stops V2Ray with &lt;code&gt;launchd&lt;/code&gt; of macOS.&lt;/p&gt; &#xA;&lt;p&gt;V2RayXS also allows users to change system proxy settings and switch proxy servers on the macOS menu bar.&lt;/p&gt; &#xA;&lt;p&gt;As default, V2RayXS will open a socks5 proxy at port &lt;code&gt;1081&lt;/code&gt; as the main inbound, as well as a http proxy at port &lt;code&gt;8001&lt;/code&gt; as an inboundDetour.&lt;/p&gt; &#xA;&lt;p&gt;V2RayXS provide three modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Global Mode: V2RayXS asks macOS to route all internet traffic to xray core if the network traffic obeys operating system&#39;s network rules.&lt;/li&gt; &#xA; &lt;li&gt;PAC Mode: macOS will determine the routing based on a pac file and some traffic may be routed to xray core.&lt;/li&gt; &#xA; &lt;li&gt;Manual Mode: V2RayXS will not modify any macOS network settings, but only start or stop xray core.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Options in menu list &lt;code&gt;Routing Rule&lt;/code&gt; determine how xray core deals with incoming traffic. Core routing rules apply to all three modes above.&lt;/p&gt; &#xA;&lt;h3&gt;auto-run on login&lt;/h3&gt; &#xA;&lt;p&gt;Open macOS System Preferences -&amp;gt; Users &amp;amp; Group -&amp;gt; Login Items, add V2RayXS.app to the list.&lt;/p&gt; &#xA;&lt;h3&gt;manually update xray-core&lt;/h3&gt; &#xA;&lt;p&gt;replace &lt;code&gt;V2RayXS.app/Contents/Resources/v2ray&lt;/code&gt; with the newest xray version from &lt;a href=&#34;https://github.com/XTLS/Xray-core/releases&#34;&gt;xray-core repo&lt;/a&gt;. However, compatibility is not guaranteed.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want to use v2ray-core version please install the original project. &lt;a href=&#34;https://github.com/Cenmrev/V2RayX&#34;&gt;https://github.com/Cenmrev/V2RayX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Uninstall&lt;/h3&gt; &#xA;&lt;p&gt;V2RayXS will create the following files and folders:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/Library/Application Support/V2RayXS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/Library/Application Support/V2RayXS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/Library/Preferences/cenmrev.V2RayXS.plist&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So, to totally uninstall V2RayXS, just delete V2RayXS.app and the files above. :)&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledge&lt;/h2&gt; &#xA;&lt;p&gt;V2RayXS uses &lt;a href=&#34;https://github.com/swisspol/GCDWebServer&#34;&gt;GCDWebServer&lt;/a&gt; to provide a local pac server. V2RayXS also uses many ideas and codes from &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-iOS/tree/master&#34;&gt;ShadowsocksX&lt;/a&gt;, especially, the codes of &lt;a href=&#34;https://github.com/tzmax/V2RayXS/raw/master/v2rayx_sysconf/main.m&#34;&gt;v2rays_sysconfig&lt;/a&gt; are simply copied from &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-iOS/raw/master/shadowsocks_sysconf/main.m&#34;&gt;shadowsocks_sysconf&lt;/a&gt; with some modifications.&lt;/p&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;p&gt;If Project V2Ray or V2RayX (V2RayXS) helped you, you can also help us by donation &lt;strong&gt;in your will&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To donate to Project V2Ray, you may refer to &lt;a href=&#34;https://www.v2ray.com/chapter_00/02_donate.html&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To donate to Project Xray, you may refer to &lt;a href=&#34;https://xtls.github.io/#%E5%B8%AE%E5%8A%A9-xray-%E5%8F%98%E5%BE%97%E6%9B%B4%E5%BC%BA&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This tool is mainly for personal usage. For professional users and technique support, commercial software like proxifier is recommended. Please refer to &lt;a href=&#34;https://github.com/tzmax/V2RayXS/issues/60#issuecomment-369531443&#34;&gt;#60&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Maintaining developers need to complete school courses. So V2rayXS will not be updated frequently. Users can replace V2RayXS.app/Contents/Resources/xray with the newest Xray-core downloaded from &lt;a href=&#34;https://github.com/XTLS/Xray-core/releases&#34;&gt;https://github.com/XTLS/Xray-core/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The developer currently does not have enough time to add more features to V2RayXS, nor to merge PRs. However, forking and releasing your own version are always welcome.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RestKit/RKValueTransformers</title>
    <updated>2022-10-31T01:37:10Z</updated>
    <id>tag:github.com,2022-10-31:/RestKit/RKValueTransformers</id>
    <link href="https://github.com/RestKit/RKValueTransformers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful value transformation API extracted from RestKit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RKValueTransformers&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/RestKit/RKValueTransformers&#34;&gt;&lt;img src=&#34;http://img.shields.io/travis/RestKit/RKValueTransformers/master.svg?style=flat&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;http://cocoapod-badges.herokuapp.com/v/RKValueTransformers/badge.png&#34; alt=&#34;Pod Version&#34;&gt; &lt;img src=&#34;http://cocoapod-badges.herokuapp.com/p/RKValueTransformers/badge.png&#34; alt=&#34;Pod Platform&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A simple, powerful Objective-C value transformation API extracted from RestKit&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;RKValueTransformers is a standalone library that provides a simple value transformation API in Objective-C. Value transformation is the process of converting a value between representations and is a core part of any system that requires that data be transmitted and received in a serialization format distinct from the local data model.&lt;/p&gt; &#xA;&lt;p&gt;In the general context of a RESTful API this means the transformation between values encoded in an XML or JSON document and local attributes of your data model. The most familiar and obvious example is the transformation of date and time data encoded as a string in a JSON document and represented locally as an &lt;code&gt;NSDate&lt;/code&gt; attribute of an &lt;code&gt;NSObject&lt;/code&gt; or &lt;code&gt;NSManagedObject&lt;/code&gt; derived class. RKValueTransformers provides a simple, well-designed API for generalizing and simplifying the task of handling an arbitrarily complex set of value transformation requirements for your iOS or Mac OS X application.&lt;/p&gt; &#xA;&lt;p&gt;Value transformation is a core feature of &lt;a href=&#34;http://github.com/RestKit/RestKit&#34;&gt;RestKit&lt;/a&gt; and RKValueTransformers was extracted from the parent project to benefit the larger Cocoa development community. If you are looking for a comprehensive solution for your RESTful API needs then be sure to give RestKit a closer look.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;p&gt;RKValueTransformers is a &#34;batteries included&#34; library that ships with value transformers handling the most common transformations. The core set of transformers can be customized and new transformers are easily implemented to meet the needs of any application.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Includes a rich set of transformers covering the most common transformations: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;NSString&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;NSURL&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;NSNumber&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;NSString&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;NSArray&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;NSOrderedSet&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;NSArray&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;NSSet&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;NSDecimalNumber&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;NSNumber&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;NSDecimalNumber&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;NSString&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;NSNull&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Any class conforming to &lt;code&gt;NSCoding&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;NSData&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;UNIX Time Interval encoded as &lt;code&gt;NSNumber&lt;/code&gt; or &lt;code&gt;NSString&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;NSDate&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;ISO 8601 Timestamp strings &amp;lt;-&amp;gt; &lt;code&gt;NSDate&lt;/code&gt; (Only supports complete timestamp strings. On 32 bit systems such as iOS devices pre-iPhone 5s only years &amp;lt; 2038 are supported)&lt;/li&gt; &#xA;   &lt;li&gt;Any object implementing &lt;code&gt;stringValue&lt;/code&gt; -&amp;gt; &lt;code&gt;NSString&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Any singular object to a collection (&lt;code&gt;NSArray&lt;/code&gt;, &lt;code&gt;NSSet&lt;/code&gt;, &lt;code&gt;NSOrderedSet&lt;/code&gt; and their mutable counterparts)&lt;/li&gt; &#xA;   &lt;li&gt;Any object and an &lt;code&gt;NSDictionary&lt;/code&gt; (object becomes a key for empty nested dictionary)&lt;/li&gt; &#xA;   &lt;li&gt;Any class conforming to &lt;code&gt;NSMutableCoding&lt;/code&gt; -&amp;gt; mutable representation of itself&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;NSString&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;NSDate&lt;/code&gt; via &lt;code&gt;NSDateFormatter&lt;/code&gt;. Default formats include: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;RFC 1123 format&lt;/li&gt; &#xA;     &lt;li&gt;RFC 850 format&lt;/li&gt; &#xA;     &lt;li&gt;ANSI C&#39;s asctime() format&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;NSString&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;NSNumber&lt;/code&gt; via &lt;code&gt;NSNumberFormatter&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Lightweight. Implemented in a single pair or header and implementation files.&lt;/li&gt; &#xA; &lt;li&gt;Fully unit tested and documented.&lt;/li&gt; &#xA; &lt;li&gt;Extensible by implementing the &lt;code&gt;RKValueTransforming&lt;/code&gt; protocol, subclassing &lt;code&gt;RKValueTransformer&lt;/code&gt; or with blocks via &lt;code&gt;RKBlockValueTransformer&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Multiple value transformers can be assembled into a composite transformer via the &lt;code&gt;RKCompoundValueTransformer&lt;/code&gt; class.&lt;/li&gt; &#xA; &lt;li&gt;Transparently improves date transformation performance by providing a cache of date formatters.&lt;/li&gt; &#xA; &lt;li&gt;Fully integrated with RestKit.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;All value transformation is performed via an abstract common interface defined by the &lt;code&gt;RKValueTransforming&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString *stringContainingDecimalNumber = @&#34;3.4593895835&#34;;&#xA;NSError *error = nil;&#xA;NSDecimalNumber *decimalNumber = nil;&#xA;BOOL success = [[RKValueTransformers decimalNumberToStringValueTransformer] transformValue:stringContainingDecimalNumber toValue:&amp;amp;decimalNumber ofClass:[NSDecimalNumber class] error:&amp;amp;error];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;transformValue:toValue:ofClass:error:&lt;/code&gt; method is always the same regardless of the implementation details of the underlying transformation. It is guaranteed to always return a Boolean value indicating if the transformation was successful and value transformers &lt;strong&gt;must&lt;/strong&gt; return an &lt;code&gt;NSError&lt;/code&gt; in the event the transformation could not be performed.&lt;/p&gt; &#xA;&lt;h3&gt;Validating a Transformation&lt;/h3&gt; &#xA;&lt;p&gt;In many cases, whether or not a given transformation can be performed can be determined entirely by the types involved in the transformation. In these cases, a value transformer may implement the optional &lt;code&gt;RKValueTransforming&lt;/code&gt; method &lt;code&gt;validateTransformationFromClass:(Class)inputValueClass toClass:(Class)outputValueClass&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;BOOL isTransformationPossible = [[RKValueTransformers arrayToSetValueTransformer] validateTransformationFromClass:[NSSet class] toClass:[NSArray class]];&#xA;NSAssert(isTransformationPossible == YES, @&#34;Should be `YES`&#34;);&#xA;isTransformationPossible = [[RKValueTransformers arrayToSetValueTransformer] validateTransformationFromClass:[NSSet class] toClass:[NSData class]];&#xA;NSAssert(isTransformationPossible == NO, @&#34;Should be `NO`&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that as this is an optional method you must check that a given instance responds to the validation selector. If it does not then the transformation cannot be validated and a transformation must be attempted to determine success or failure.&lt;/p&gt; &#xA;&lt;h3&gt;Compound Transformers&lt;/h3&gt; &#xA;&lt;p&gt;Individual transformers are very convenient -- they abstract away the need to remember how to implement a given transformation and present a simple interface for transformations. But the real power of RKValueTransformers emerges when you assemble a collection of value transformers into a compound transformer via the &lt;code&gt;RKCompoundValueTransformer&lt;/code&gt; class. Compound value transformers also implement the &lt;code&gt;RKValueTransforming&lt;/code&gt; protocol -- but instead of providing any value transformation and validation themselves they proxy the calls to a collection of underlying value transformers in programmer defined order. This allows you to configure a set of transformers in a specific order such that the first transformer that is capable of performing a given transformation will handle it.&lt;/p&gt; &#xA;&lt;p&gt;Consider for example that a given application may interact with several API&#39;s that return dates as strings in several different formats. We wish to be able to transform any given string value into an &lt;code&gt;NSDate&lt;/code&gt; without worrying about the details. We could configure a compound transformer to handle this task like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSArray *dateFormats = @[ @&#34;MM/dd/yyyy&#34;, @&#34;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;&#34;, @&#34;yyyy-MM-dd&#34; ];&#xA;RKCompoundValueTransformer *compoundValueTransformer = [RKCompoundValueTransformer new];&#xA;for (NSString *dateFormat in dateFormats) {&#xA;    NSDateFormatter *dateFormatter = [NSDateFormatter new];&#xA;    dateFormatter.dateFormat = dateFormat;&#xA;    [compoundValueTransformer addValueTransformer:dateFormatter];&#xA;}&#xA;&#xA;[compoundValueTransformer addValueTransformer:[RKValueTransformer timeIntervalSince1970ToDateValueTransformer]];&#xA;&#xA;NSArray *dateStrings = @[ @&#34;11/27/1982&#34;, @&#34;1378767519.18176508&#34;, @&#34;2013-11-27&#34;, @&#34;2013-04-23T16:29:05Z&#34; ];&#xA;NSError *error = nil;&#xA;for (NSString *dateString in dateStrings) {&#xA;    NSDate *date = nil;&#xA;    BOOL success = [compoundValueTransformer transformValue:dateString toValue:&amp;amp;date ofClass:[NSDate class]];&#xA;    NSLog(@&#34;Transformed value &#39;%@&#39; to value &#39;%@&#39; successfully=%@, error=%@&#34;, dateString, date, success ? @&#34;YES&#34; : @&#34;NO&#34;, error);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Block Value Transformers&lt;/h3&gt; &#xA;&lt;p&gt;RKValueTransformers supports the creation of ad-hoc value transformer instances implemented via blocks. For example, one could implement a value transformer that turns all &lt;code&gt;NSString&lt;/code&gt; instances into uppercase strings like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;RKValueTransformer *uppercaseStringTransformer = [RKBlockValueTransformer valueTransformerWithValidationBlock:^BOOL(__unsafe_unretained Class sourceClass, __unsafe_unretained Class destinationClass) {&#xA;    // We transform a `NSString` into another `NSString`&#xA;    return ([sourceClass isSubclassOfClass:[NSString class]] &amp;amp;&amp;amp; [destinationClass isSubclassOfClass:[NSString class]]);&#xA;} transformationBlock:^BOOL(id inputValue, __autoreleasing id *outputValue, Class outputValueClass, NSError *__autoreleasing *error) {&#xA;&#x9;// Validate the input and output&#xA;    RKValueTransformerTestInputValueIsKindOfClass(inputValue, [NSString class], error);&#xA;    RKValueTransformerTestOutputValueClassIsSubclassOfClass(outputValueClass, [NSString class], error);&#xA;    &#xA;    // Perform the transformation&#xA;    *outputValue = [(NSString *)inputValue uppercaseString];&#xA;    return YES;&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;RKValueTransformers is extremely lightweight and has no direct dependencies outside of the Cocoa Foundation framework. As such, the library can be trivially be installed into any Cocoa project by directly adding the source code. Despite this fact, we recommend installing via CocoaPods as it provides modularity and enables the easy installation of new value transformers that are dependent on RKValueTransformers itself.&lt;/p&gt; &#xA;&lt;h3&gt;Via CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;The recommended approach for installing RKValueTransformers is via the &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; package manager, as it provides flexible dependency management and dead simple installation. For best results, it is recommended that you install via CocoaPods &lt;strong&gt;&amp;gt;= 0.24.0&lt;/strong&gt; using Git &lt;strong&gt;&amp;gt;= 1.8.0&lt;/strong&gt; installed via Homebrew.&lt;/p&gt; &#xA;&lt;p&gt;Install CocoaPods if not already available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ [sudo] gem install cocoapods&#xA;$ pod setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change to the directory of your Xcode project, and Create and Edit your Podfile and add RKValueTransformers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /path/to/MyProject&#xA;$ touch Podfile&#xA;$ edit Podfile&#xA;platform :ios, &#39;5.0&#39; &#xA;# Or platform :osx, &#39;10.7&#39;&#xA;pod &#39;RKValueTransformers&#39;, &#39;~&amp;gt; 1.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install into your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open your project in Xcode from the .xcworkspace file (not the usual project file)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ open MyProject.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Via Source Code&lt;/h3&gt; &#xA;&lt;p&gt;Simply add &lt;code&gt;RKValueTransformers.h&lt;/code&gt; and &lt;code&gt;RKValueTransformers.m&lt;/code&gt; to your project and &lt;code&gt;#import &#34;RKValueTransformers.h&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Design &amp;amp; Implementation Details&lt;/h2&gt; &#xA;&lt;p&gt;RKValueTransformers is designed to be simple to integrate and use. The entire library consists of a single protocol, three classes, and a handful of category implementations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RKValueTransforming&lt;/code&gt; - Defines the value transformation API. Adopted by any class that wishes to act as a value transformer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RKValueTransformer&lt;/code&gt; - An abstract base class that implements &lt;code&gt;RKValueTransforming&lt;/code&gt;. The base class includes static accessors for retrieving singleton instances of the bundled value transformers. Extension libraries can subclass &lt;code&gt;RKValueTransformer&lt;/code&gt; to provide new transformers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RKBlockValueTransformer&lt;/code&gt; - A concrete subclass of &lt;code&gt;RKValueTransformer&lt;/code&gt; that enables the creation of ad-hoc value transformers defined via blocks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RKCompoundValueTransformer&lt;/code&gt; - A concrete implementation of &lt;code&gt;RKValueTransforming&lt;/code&gt; that proxies calls to an underlying collection of value transformers and provides support for composing value transformers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For those implementing value transformers, a few macros are included to simplify the implementation of validation and transformation methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RKValueTransformerTestInputValueIsKindOfClass&lt;/code&gt; - Tests that a given input value is an instance of a given class or one of its subclasses. If the test evaluates negatively, then &lt;code&gt;NO&lt;/code&gt; is returned and an appropriate &lt;code&gt;NSError&lt;/code&gt; is emitted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RKValueTransformerTestOutputValueClassIsSubclassOfClass&lt;/code&gt; - Tests that a given output value class is equal to a given class or is a subclass there of. If the test evaluates negatively, then &lt;code&gt;NO&lt;/code&gt; is returned an appropriate &lt;code&gt;NSError&lt;/code&gt; is emitted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RKValueTransformerTestTransformation&lt;/code&gt; - Tests that a given transformation was successful. If the test evaluates negatively, then &lt;code&gt;NO&lt;/code&gt; is returned an appropriate &lt;code&gt;NSError&lt;/code&gt; is emitted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why not NSValueTransformer?&lt;/h3&gt; &#xA;&lt;p&gt;In developing RKValueTransformers we looked closely at &lt;code&gt;NSValueTransformer&lt;/code&gt; and ultimately determined that it was not a great fit for our needs. Specifically we found the following issues:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;NSValueTransformer&lt;/code&gt; defines a notion of &#39;forward&#39; and &#39;reverse&#39; transformation that doesn&#39;t map cleanly in a system primarilly concerned with type transformations. Which side do you consider forward? This gets worse when you consider transformations that can occur between more than just two types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSValueTransformer&lt;/code&gt; exposes the class of the &#34;output&#34; object via the class method &lt;code&gt;transformedValueClass&lt;/code&gt;. This becomes annoying as you are forced to use inheritance to express type knowledge. This necessitates directly inheriting from &lt;code&gt;NSValueTransformer&lt;/code&gt; or using fancy run-time hackery such as that &lt;a href=&#34;https://github.com/mattt/TransformerKit/raw/master/TransformerKit/NSValueTransformer%2BTransformerKit.m&#34;&gt;utilized by TransformerKit&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSValueTransformer&lt;/code&gt; exposes a single global name based registry for value transformers via the &lt;code&gt;setValueTransformer:forName:&lt;/code&gt; and &lt;code&gt;valueTransformerForName:&lt;/code&gt; methods. Ultimately this is not granular enough to provide necessary flexibility and requires the use of names (as opposed to type information) to look up transformers.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Given all of the above it just made sense to go back to a clean slate and design a solution to the value transformation problem from scratch.&lt;/p&gt; &#xA;&lt;h2&gt;Unit Tests&lt;/h2&gt; &#xA;&lt;p&gt;RKValueTransformers is tested using the &lt;a href=&#34;https://github.com/specta/Expecta&#34;&gt;Expecta&lt;/a&gt; library of unit testing matchers. In order to run the tests, you must do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the dependencies via CocoaPods: &lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the workspace: &lt;code&gt;open RKValueTransformers.xcworkspace&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the specs via the &lt;strong&gt;Product&lt;/strong&gt; menu &amp;gt; &lt;strong&gt;Test&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Blake Watters&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/blakewatters&#34;&gt;http://github.com/blakewatters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/blakewatters&#34;&gt;http://twitter.com/blakewatters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:blakewatters@gmail.com&#34;&gt;blakewatters@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Samuel E. Giddins&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/segiddins&#34;&gt;https://github.com/segiddins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/segiddins&#34;&gt;http://twitter.com/segiddins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:segiddins@segiddins.me&#34;&gt;segiddins@segiddins.me&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;RKValueTransformers is available under the Apache 2 License. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AppsFlyerSDK/segment-appsflyer-ios</title>
    <updated>2022-10-31T01:37:10Z</updated>
    <id>tag:github.com,2022-10-31:/AppsFlyerSDK/segment-appsflyer-ios</id>
    <link href="https://github.com/AppsFlyerSDK/segment-appsflyer-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The AppsFlyer iOS SDK integration with Segment&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://www.appsflyer.com/wp-content/uploads/2016/11/logo-1.svg?sanitize=true&#34; width=&#34;200&#34;&gt; &#xA;&lt;h1&gt;AppsFlyer integration for Segment.&lt;/h1&gt; &#xA;&lt;h2&gt;This is a Segment wrapper for AppsFlyer SDK that is built with iOS SDK v6.8.1.&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/segment-appsflyer-ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/segment-appsflyer-ios.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;🛠 In order for us to provide optimal support, we would kindly ask you to submit any issues to &lt;a href=&#34;mailto:support@appsflyer.com&#34;&gt;support@appsflyer.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;When submitting an issue please specify your AppsFlyer sign-up (account) email , your app ID , production steps, logs, code snippets and any additional relevant information.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of content&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/segment-appsflyer-ios/master/#breaking-changes&#34;&gt;Breaking changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/segment-appsflyer-ios/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/segment-appsflyer-ios/master/#manual&#34;&gt;Manual mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/segment-appsflyer-ios/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/segment-appsflyer-ios/master/#usage-obj-c&#34;&gt;Objective-C&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/segment-appsflyer-ios/master/#usage-swift&#34;&gt;Swift&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/segment-appsflyer-ios/master/#getconversiondata&#34;&gt;Get Conversion Data&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/segment-appsflyer-ios/master/#gcd-obj-c&#34;&gt;Objective-C&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/segment-appsflyer-ios/master/#gcd-swift&#34;&gt;Swift&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/segment-appsflyer-ios/master/#DDL&#34;&gt;Unified Deep linking&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/segment-appsflyer-ios/master/#ddl-swift&#34;&gt;Swift&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/segment-appsflyer-ios/master/#install_attributed&#34;&gt;Install Attributed event&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/segment-appsflyer-ios/master/#additional_setup&#34;&gt;Additional AppsFlyer SDK setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppsFlyerSDK/segment-appsflyer-ios/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;breaking-changes&#34;&gt; ❗ Breaking Changes&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a id=&#34;breaking-changes&#34;&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;From version &lt;code&gt;6.3.2&lt;/code&gt;, we use &lt;code&gt;xcframework&lt;/code&gt; for iOS platform, then you need to use cocoapods version &amp;gt;= 1.10&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;/a&gt;&#xA;&lt;h2&gt;&lt;a id=&#34;breaking-changes&#34;&gt;&lt;/a&gt;&lt;a id=&#34;installation&#34;&gt;Installation&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a id=&#34;installation&#34;&gt; &lt;h3&gt;Cocoapods&lt;/h3&gt; &lt;p&gt;To install the segment-appsflyer-ios integration:&lt;/p&gt; &lt;/a&gt;&#xA;&lt;ol&gt;&#xA; &lt;a id=&#34;installation&#34;&gt; &lt;li&gt;Simply add this line to your &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; &lt;code&gt;Podfile&lt;/code&gt;:&lt;/li&gt;&lt;/a&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Production&lt;/strong&gt; version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;segment-appsflyer-ios&#39;, &#39;6.8.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Strict mode SDK&lt;/strong&gt; version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;segment-appsflyer-ios/Strict&#39;, &#39;6.8.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the strict mode SDK to completely remove IDFA collection functionality and AdSupport framework dependencies (for example, when developing apps for kids).&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod isntall&lt;/code&gt; in the project directory&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate AppsFlyer and Segment into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Production&lt;/strong&gt; version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;AppsFlyerSDK/segment-appsflyer-ios&#34; &#34;6.8.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;In XCode, go to &lt;strong&gt;File&lt;/strong&gt; &amp;gt; &lt;strong&gt;Swift Package&lt;/strong&gt; &amp;gt; &lt;strong&gt;Add Package dependency...&lt;/strong&gt; And add &lt;a href=&#34;https://github.com/AppsFlyerSDK/segment-appsflyer-ios&#34;&gt;https://github.com/AppsFlyerSDK/segment-appsflyer-ios&lt;/a&gt; for the package dependency url.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;manual&#34;&gt; Manual mode&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a id=&#34;manual&#34;&gt; &lt;p&gt;Starting version &lt;code&gt;6.8.0&lt;/code&gt;, we support a manual mode to seperate the initialization of the AppsFlyer SDK and the start of the SDK. In this case, the AppsFlyer SDK won&#39;t start automatically, giving the developper more freedom when to start the AppsFlyer SDK. Please note that in manual mode, the developper is required to implement the API &lt;code&gt;AppsFlyerLib.shared().start()&lt;/code&gt; in order to start the SDK.&lt;/p&gt; &lt;h3&gt;Example:&lt;/h3&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;  [SEGAppsFlyerIntegrationFactory createWithManualMode:YES];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please look at the examples below to see how to use the manual mode with delegate. &lt;br&gt; To start the AppsFlyer SDK, use the &lt;code&gt;start()&lt;/code&gt; API, like the following :&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt; [[AppsFlyerLib shared] start];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h2&gt;&lt;a id=&#34;manual&#34;&gt;&lt;/a&gt;&lt;a id=&#34;usage&#34;&gt; Usage&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a id=&#34;usage&#34;&gt; &lt;p&gt;First of all, you must provide values for AppsFlyer Dev Key, Apple App ID (iTunes) and client secret in Segment&#39;s &lt;strong&gt;dashboard&lt;/strong&gt; for AppsFlyer integration&lt;/p&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a id=&#34;usage&#34;&gt;&lt;/a&gt;&lt;a id=&#34;usage-obj-c&#34;&gt; Usage - Objective-C&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;a id=&#34;usage-obj-c&#34;&gt; &lt;p&gt;Open &lt;code&gt;AppDelegate.h&lt;/code&gt; and add:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;#import &#34;SEGAppsFlyerIntegrationFactory.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In &lt;code&gt;AppDelegate.m&lt;/code&gt; ➜ &lt;code&gt;didFinishLaunchingWithOptions&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;&#xA;    // For ApsFlyer debug logs&#xA;    [AppsFlyerLib shared].isDebug = YES;&#xA;    &#xA;    [[AppsFlyerLib shared] waitForATTUserAuthorizationWithTimeoutInterval:60];&#xA;    /*&#xA;     Based on your needs you can either pass a delegate to process deferred&#xA;     and direct deeplinking callbacks or disregard them.&#xA;     If you choose to use the delegate, see extension to this class below&#xA;     */&#xA;    SEGAppsFlyerIntegrationFactory* factoryNoDelegate = [SEGAppsFlyerIntegrationFactory instance];&#xA;//    SEGAppsFlyerIntegrationFactory* factoryWithDelegate = [SEGAppsFlyerIntegrationFactory createWithLaunchDelegate:self];&#xA;&#xA;// To use the manual mode, use the following method&#xA;//    SEGAppsFlyerIntegrationFactory* factoryNoDelegate = [SEGAppsFlyerIntegrationFactory createWithManualMode:YES];&#xA;//    SEGAppsFlyerIntegrationFactory* factoryWithDelegate = [SEGAppsFlyerIntegrationFactory createWithLaunchDelegate:self andManualMode:YES];&#xA;&#xA;    &#xA;    SEGAnalyticsConfiguration *config = [SEGAnalyticsConfiguration configurationWithWriteKey:@&#34;WYsuyFINOKZuQyQAGn5JQoCgIdhOI146&#34;];&#xA;    [config use:factoryNoDelegate];&#xA;//    [config use:factoryWithDelegate];  // use this if you want to get conversion data in the app. Read more in the integration guide&#xA;    config.enableAdvertisingTracking = YES;       //OPTIONAL&#xA;    config.trackApplicationLifecycleEvents = YES; //OPTIONAL&#xA;    config.trackDeepLinks = YES;                  //OPTIONAL&#xA;    config.trackPushNotifications = YES;          //OPTIONAL&#xA;    config.trackAttributionData = YES;            //OPTIONAL&#xA;    [SEGAnalytics debug:YES];                     //OPTIONAL&#xA;    [SEGAnalytics setupWithConfiguration:config];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In &lt;code&gt;AppDelegate.m&lt;/code&gt; ➜ &lt;code&gt;applicationDidBecomeActive&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)applicationDidBecomeActive:(UIApplication *)application {&#xA;    // Getting user consent dialog. Please read https://dev.appsflyer.com/hc/docs/integrate-ios-sdk#enabling-app-tracking-transparency-att-support&#xA;    if (@available(iOS 14, *)) {&#xA;        [ATTrackingManager requestTrackingAuthorizationWithCompletionHandler:^(ATTrackingManagerAuthorizationStatus status) {&#xA;            //....&#xA;        }];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a id=&#34;usage-obj-c&#34;&gt;&lt;/a&gt;&lt;a id=&#34;usage-swift&#34;&gt; Usage - Swift&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;a id=&#34;usage-swift&#34;&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Open/Create &lt;code&gt;&amp;lt;Your-App-name&amp;gt;-Bridging-Header.h&lt;/code&gt; and add:&lt;/li&gt; &#xA; &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &#34;SEGAppsFlyerIntegrationFactory.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/50541317/90022182-e5768900-dcba-11ea-8bfd-180cc6f28700.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add path to the Bridging header under Build Settings &amp;gt; Swift Compiler - General &amp;gt; Objective-C Bridging Header &lt;img src=&#34;https://user-images.githubusercontent.com/50541317/90022174-e1e30200-dcba-11ea-8785-0303aebe75e2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Open &lt;code&gt;AppDelegate.swift&lt;/code&gt; and add:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Analytics&#xA;import AppsFlyerLib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;4&#34;&gt; &#xA;  &lt;li&gt;In &lt;code&gt;didFinishLaunchingWithOptions&lt;/code&gt; add:&lt;/li&gt; &#xA; &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // For AppsFLyer debug logs uncomment the line below&#xA;    // AppsFlyerLib.shared().isDebug = true&#xA;    AppsFlyerLib.shared().waitForATTUserAuthorization(withTimeoutInterval: 60)&#xA;&#xA;    /*&#xA;     Based on your needs you can either pass a delegate to process deferred&#xA;     and direct deeplinking callbacks or disregard them.&#xA;     If you choose to use the delegate, see extension to this class below&#xA;     */&#xA;//    let factoryWithDelegate : SEGAppsFlyerIntegrationFactory = SEGAppsFlyerIntegrationFactory.create(withLaunch: self)&#xA;    let factoryNoDelegate = SEGAppsFlyerIntegrationFactory()&#xA;    &#xA;    /* If you want to use the manual mode, please use the following methods&#xA;      with or without delegate */&#xA;     //  let factoryWithDelegate : SEGAppsFlyerIntegrationFactory = SEGAppsFlyerIntegrationFactory.create(withLaunch: self, andManualMode:true)&#xA;   // let factoryNoDelegate = SEGAppsFlyerIntegrationFactory.create(withManualMode: true)&#xA;    &#xA;    &#xA;    // Segment initialization&#xA;    let config = AnalyticsConfiguration(writeKey: &#34;SEGMENT_KEY&#34;)&#xA;//    config.use(factoryWithDelegate)  // use this if you want to get conversion data in the app. Read more in the integration guide&#xA;    config.use(factoryNoDelegate)&#xA;    config.enableAdvertisingTracking = true       //OPTIONAL&#xA;    config.trackApplicationLifecycleEvents = true //OPTIONAL&#xA;    config.trackDeepLinks = true                  //OPTIONAL&#xA;    config.trackPushNotifications = true          //OPTIONAL&#xA;    config.trackAttributionData = true            //OPTIONAL&#xA;    &#xA;    Analytics.debug(false)&#xA;    Analytics.setup(with: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In &lt;code&gt;applicationDidBecomeActive&lt;/code&gt; add:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func applicationDidBecomeActive(_ application: UIApplication) {&#xA;    // If you want to collect IDFA, please add the code below and read https://support.appsflyer.com//hc/en-us/articles/207032066#integration-35-support-apptrackingtransparency-att&#xA;    if #available(iOS 14, *) {&#xA;        ATTrackingManager.requestTrackingAuthorization(completionHandler: { (status) in&#xA;            // ...&#xA;        })&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a id=&#34;usage-swift&#34;&gt;AppsFlyer integration responds to &lt;code&gt;identify&lt;/code&gt; call. To read more about it, visit &lt;/a&gt;&lt;a href=&#34;https://segment.com/docs/libraries/ios/#identify&#34;&gt;Segment identify method documentation&lt;/a&gt;. In identify call &lt;code&gt;traits&lt;/code&gt; dictionary &lt;code&gt;setCustomerUserID&lt;/code&gt; and &lt;code&gt;currencyCode&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;getconversiondata&#34;&gt; Get Conversion Data&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a id=&#34;getconversiondata&#34;&gt; &lt;p&gt;In order for Conversion Data to be sent to Segment, make sure you have enabled &#34;Track Attribution Data&#34; and specified App ID in AppsFlyer destination settings:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/50541317/69795158-51b86780-11d4-11ea-9ab3-be3e669e4e3b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a id=&#34;getconversiondata&#34;&gt;&lt;/a&gt;&lt;a id=&#34;gcd-obj-c&#34;&gt; Objective-C&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;a id=&#34;gcd-obj-c&#34;&gt; &lt;p&gt;In order to get Conversion Data you need to:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;SEGAppsFlyerLibDelegate&lt;/code&gt; protocol to your AppDelegate.h (or other) class&lt;/li&gt; &#xA; &lt;/ol&gt; &lt;pre&gt;&lt;code&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&#xA;#import &#34;SEGAppsFlyerIntegrationFactory.h&#34;&#xA;&#xA;@interface AppDelegate : UIResponder &amp;lt;UIApplicationDelegate, SEGAppsFlyerLibDelegate&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;Pass AppDelegate (or other) class when configuring Segment Analytics with AppsFlyer. Change line &lt;code&gt;[config use:[SEGAppsFlyerIntegrationFactory instance]];&lt;/code&gt; to &lt;code&gt;[config use:[SEGAppsFlyerIntegrationFactory createWithLaunchDelegate:self]];&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;In the class passed to the method above (AppDelegate.m by default) implement methods of the &lt;code&gt;SEGAppsFlyerLibDelegate&lt;/code&gt; protocol. See sample code below:&lt;/li&gt; &#xA; &lt;/ol&gt; &lt;pre&gt;&lt;code&gt;#import &#34;AppDelegate.h&#34;&#xA;&#xA;@interface AppDelegate ()&#xA;&#xA;@end&#xA;&#xA;@implementation AppDelegate&#xA;&#xA;-(void)onConversionDataSuccess:(NSDictionary*) installData {&#xA;    BOOL first_launch_flag = [[installData objectForKey:@&#34;is_first_launch&#34;] boolValue];&#xA;    NSString *status = [installData objectForKey:@&#34;af_status&#34;];&#xA;    &#xA;    if(first_launch_flag) {&#xA;        if ([status isEqualToString:@&#34;Non-organic&#34;]){&#xA;            NSString *sourceID = [installData objectForKey:@&#34;media_source&#34;];&#xA;            NSString *campaign = [installData objectForKey:@&#34;campaign&#34;];&#xA;            NSLog(@&#34;This is a non-organic install. Media source: %@ Campaign: %@&#34;, sourceID, campaign);&#xA;        } else {&#xA;            NSLog(@&#34;This is an organic install&#34;);&#xA;        }&#xA;    } else {&#xA;        NSLog(@&#34;Not first launch&#34;);&#xA;    }&#xA;};&#xA;&#xA;/**&#xA; Any errors that occurred during the conversion request.&#xA; */&#xA;-(void)onConversionDataFail:(NSError *) error {&#xA;    NSLog(@&#34;%@&#34;, [error description]);&#xA;};&#xA;&#xA;/**&#xA; `attributionData` contains information about OneLink, deeplink.&#xA; */&#xA;- (void)onAppOpenAttribution:(NSDictionary *)attributionData{&#xA;    NSLog(@&#34;onAppOpenAttribution&#34;);&#xA;    for(id key in attributionData){&#xA;        NSLog(@&#34;onAppOpenAttribution: key=%@ value=%@&#34;, key, [attributionData objectForKey:key]);&#xA;    }&#xA;};&#xA;&#xA;/**&#xA; Any errors that occurred during the attribution request.&#xA; */&#xA;- (void)onAppOpenAttributionFailure:(NSError *)error{&#xA;    NSLog(@&#34;%@&#34;, [error description]);&#xA;};&#xA;&#xA;// Rest of your AppDelegate code&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a id=&#34;gcd-obj-c&#34;&gt;&lt;/a&gt;&lt;a id=&#34;gcd-swift&#34;&gt; Swift&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;a id=&#34;gcd-swift&#34;&gt; &lt;p&gt;In order to get Conversion Data you need to:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;SEGAppsFlyerLibDelegate&lt;/code&gt; protocol to your AppDelegate (or other) class&lt;/li&gt; &#xA;  &lt;li&gt;Pass AppDelegate (or other) class when configuring Segment Analytics with AppsFlyer. If you use sample code from above, change line &lt;code&gt;config.use(factoryNoDelegate)&lt;/code&gt; to &lt;code&gt;config.use(factoryWithDelegate)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Implement methods of the protocol in the class, passed as a delegate. See sample code below where AppDelegate is used for that:&lt;/li&gt; &#xA; &lt;/ol&gt; &lt;pre&gt;&lt;code&gt;class AppDelegate: UIResponder, UIApplicationDelegate, SEGAppsFlyerLibDelegate {&#xA;  &#xA;  var window: UIWindow?&#xA;  &#xA;  func onConversionDataSuccess(_ conversionInfo: [AnyHashable : Any]) {&#xA;      guard let first_launch_flag = conversionInfo[&#34;is_first_launch&#34;] as? Int else {&#xA;          return&#xA;      }&#xA;      &#xA;      guard let status = conversionInfo[&#34;af_status&#34;] as? String else {&#xA;          return&#xA;      }&#xA;      &#xA;      if(first_launch_flag == 1) {&#xA;          if(status == &#34;Non-organic&#34;) {&#xA;              if let media_source = conversionInfo[&#34;media_source&#34;] , let campaign = conversionInfo[&#34;campaign&#34;]{&#xA;                  print(&#34;This is a Non-Organic install. Media source: \(media_source) Campaign: \(campaign)&#34;)&#xA;              }&#xA;          } else {&#xA;              print(&#34;This is an organic install.&#34;)&#xA;          }&#xA;      } else {&#xA;          print(&#34;Not First Launch&#34;)&#xA;      }&#xA;  }&#xA;  &#xA;  func onAppOpenAttribution(_ attributionData: [AnyHashable : Any]) {&#xA;      print(&#34;Deep Link Data goes here:&#34;)&#xA;      if let data = attributionData{&#xA;        print(&#34;\(data)&#34;)&#xA;      }&#xA;  }&#xA;&#xA; func onConversionDataFail(_ error: Error) {&#xA;      }&#xA;&#xA;  func onAppOpenAttributionFailure(_ error: Error?) {&#xA;  }&#xA;  //rest of you AppDelegate code&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h2&gt;&lt;a id=&#34;gcd-swift&#34;&gt;&lt;/a&gt;&lt;a id=&#34;DDL&#34;&gt; Unified Deep linking&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a id=&#34;DDL&#34;&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a id=&#34;DDL&#34;&gt;&lt;/a&gt;&lt;a id=&#34;ddl-swift&#34;&gt; Swift&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;a id=&#34;ddl-swift&#34;&gt; &lt;p&gt;In order to use Unified Deep linking you need to:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;SEGAppsFlyerDeepLinkDelegate&lt;/code&gt; protocol to your AppDelegate (or other) class&lt;/li&gt; &#xA;  &lt;li&gt;Pass AppDelegate (or other) class when configuring Segment Analytics with AppsFlyer. From the sample code above, change factoryWithDelegate to :&lt;/li&gt; &#xA; &lt;/ol&gt; &lt;pre&gt;&lt;code&gt;let factoryWithDelegate: SEGAppsFlyerIntegrationFactory = SEGAppsFlyerIntegrationFactory.create(withLaunch: self, andDeepLinkDelegate: self)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;Implement methods of the protocol in the class, passed as a delegate. See sample code below where AppDelegate is used for that:&lt;/li&gt; &#xA; &lt;/ol&gt; &lt;pre&gt;&lt;code&gt;extension AppDelegate: SEGAppsFlyerDeepLinkDelegate {&#xA;    func didResolveDeepLink(_ result: DeepLinkResult) {&#xA;        print(result)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h2&gt;&lt;a id=&#34;ddl-swift&#34;&gt;&lt;/a&gt;&lt;a id=&#34;install_attributed&#34;&gt; Install Attributed event&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a id=&#34;install_attributed&#34;&gt; &lt;p&gt;If you are working with networks that don&#39;t allow passing user level data to 3rd parties, you will need to apply code to filter out these networks before calling&lt;/p&gt; &lt;pre&gt;&lt;code&gt;// [self.analytics track:@&#34;Install Attributed&#34; properties:[properties copy]];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h2&gt;&lt;a id=&#34;install_attributed&#34;&gt;&lt;/a&gt;&lt;a id=&#34;additional_setup&#34;&gt; Additional AppsFlyer SDK setup&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a id=&#34;additional_setup&#34;&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@import AppsFlyerLib;&#xA;&#xA;...&#xA;@implementation AppDelegate&#xA;&#xA;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {&#xA;    &#xA;    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(integrationDidStart:) name:SEGAnalyticsIntegrationDidStart object:nil];&#xA;    ...&#xA;}&#xA;&#xA;...&#xA;&#xA;- (void)integrationDidStart:(nonnull NSNotification *)notification {&#xA;    NSString *integration = notification.object;&#xA;    if ([integration isEqualToString:@&#34;AppsFlyer&#34;]) {&#xA;        /// Additional AppsFlyer SDK setup goes below&#xA;        /// All setup is optional&#xA;        /// To set Apple App ID and AppsFlyer Dev Key use Segment dashboard&#xA;        /// ...&#xA;        /// Enable ESP support for specific URLs&#xA;        [[AppsFlyerLib shared] setResolveDeepLinkURLs:@[@&#34;afsdktests.com&#34;]];&#xA;        /// Disable printing SDK messages to the console log&#xA;        [[AppsFlyerLib shared]  setIsDebug:NO];&#xA;        /// `OneLink ID` from OneLink configuration&#xA;        [[AppsFlyerLib shared]  setAppInviteOneLink:@&#34;one_link_id&#34;];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h2&gt;&lt;a id=&#34;additional_setup&#34;&gt;&lt;/a&gt;&lt;a id=&#34;examples&#34;&gt; Examples&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a id=&#34;examples&#34;&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a id=&#34;examples&#34;&gt;This project has &lt;/a&gt;&lt;a href=&#34;https://github.com/AppsFlyerSDK/segment-appsflyer-ios/tree/master/examples&#34;&gt;4 examples&lt;/a&gt; for objective-C and Swift (with troubleshooting). To give it a try , clone this repo and from each example first run &lt;code&gt;pod install&lt;/code&gt; to install project dependancies.&lt;/p&gt;</summary>
  </entry>
</feed>