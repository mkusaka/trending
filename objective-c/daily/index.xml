<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-14T01:35:41Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>0x36/weightBufs</title>
    <updated>2022-11-14T01:35:41Z</updated>
    <id>tag:github.com,2022-11-14:/0x36/weightBufs</id>
    <link href="https://github.com/0x36/weightBufs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ANE kernel r/w exploit for iOS 15 and macOS 12&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WeightBufs:&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;WeightBufs&lt;/code&gt; is a kernel r/w exploit for all Apple devices with Neural Engine support. Bugs and Exploit by &lt;a href=&#34;https://twitter.com/_simo36&#34;&gt;@&lt;em&gt;simo36&lt;/em&gt;&lt;/a&gt;, you can read my &lt;a href=&#34;https://github.com/0x36/weightBufs/raw/main/attacking_ane_poc2022.pdf&#34;&gt;presentation slides at POC&lt;/a&gt; for more details about the vulnerabilities and the exploitation techniques.&lt;/p&gt; &#xA;&lt;p&gt;The exploit doesn&#39;t rely on any hardcoded address or offset, and it should work AS IS on macOS12 up to 12.4 and *OS 15 up to 15.5.&lt;/p&gt; &#xA;&lt;p&gt;The kernel vulerabilties affect all iOS 15 versions (up to 16.0), however the sandbox escape has been fixed on iOS 15.6. As a result, breaking the exploit chain and another sandbox escape is required to get things working again on iOS 15.6/15.7. Although I have another sandbox escape that works up to iOS 16.1, I&#39;m not sure if the kernel exploit techniques are still usable on iOS 15.6+.&lt;/p&gt; &#xA;&lt;h1&gt;Vulnerabilities:&lt;/h1&gt; &#xA;&lt;p&gt;The exploit chains 4 vulnerabilities which I independently discovered and reported to Apple:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CVE-2022-32845&lt;/code&gt; : aned signature check bypass for model.hwx.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CVE-2022-32948&lt;/code&gt; : DeCxt::FileIndexToWeight() OOB Read due to lack of array index validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CVE-2022-42805&lt;/code&gt; : ZinComputeProgramUpdateMutables() potential arbitrary read due to Integer overflow issue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CVE-2022-32899&lt;/code&gt; : DeCxt::RasterizeScaleBiasData() Buffer underflow due to integer overflow issue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Tested devices:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iPhone12 Pro (iPhone13,3) with iOS 15.5.&lt;/li&gt; &#xA; &lt;li&gt;iPad Pro (iPad8,10) with iPadOS 15.5.&lt;/li&gt; &#xA; &lt;li&gt;iPhone11 Pro (iPhone12,3) with iOS 15.4.1.&lt;/li&gt; &#xA; &lt;li&gt;MacBookAir10,1 M1 with macOS 12.4.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Notes:&lt;/h1&gt; &#xA;&lt;p&gt;There are some situations where the exploit may fail:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The target &lt;em&gt;IOSurface&lt;/em&gt; or &lt;em&gt;IOSurfaceClient&lt;/em&gt; object address is upper to the mutable kernel buffer &lt;code&gt;MUTK&lt;/code&gt;,however the exploit detects the failure early, preventing the device from crashing. It&#39;s sufficient to run the exploit again and it should succeed on the second attempt.&lt;/li&gt; &#xA; &lt;li&gt;If the exploit frequently crashes the device at stage 2 or stage 3, that means it must be tuned to the tested device, make sure to read &lt;code&gt;DEBUG_EXPLOIT_STAGE_2_KERN_PANIC&lt;/code&gt; and &lt;code&gt;DEBUG_EXPLOIT_STAGE_3_KERN_PANIC&lt;/code&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;The target device needs to be in an idle state, and it&#39;s preferable to reboot it before using the exploit, even better if the airplane mode is turned on.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;WeightBufs is released under the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alwx/react-native-photo-view</title>
    <updated>2022-11-14T01:35:41Z</updated>
    <id>tag:github.com,2022-11-14:/alwx/react-native-photo-view</id>
    <link href="https://github.com/alwx/react-native-photo-view" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pinch-to-zoom view for React Native (both iOS and Android)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-native-photo-view&lt;/h1&gt; &#xA;&lt;p&gt;Provides custom Image view for React Native that allows to perform pinch-to-zoom on images. Works on both iOS and Android.&lt;/p&gt; &#xA;&lt;p&gt;This component uses &lt;a href=&#34;https://github.com/ongakuer/PhotoDraweeView&#34;&gt;PhotoDraweeView&lt;/a&gt; for Android and &lt;a href=&#34;https://github.com/mwaterfall/MWPhotoBrowser&#34;&gt;MWPhotobrowser&lt;/a&gt; on iOS.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import PhotoView from &#39;react-native-photo-view&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;PhotoView&#xA;  source={{uri: &#39;https://facebook.github.io/react/img/logo_og.png&#39;}}&#xA;  minimumZoomScale={0.5}&#xA;  maximumZoomScale={3}&#xA;  androidScaleType=&#34;center&#34;&#xA;  onLoad={() =&amp;gt; console.log(&#34;Image loaded!&#34;)}&#xA;  style={{width: 300, height: 300}} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Properties&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;source&lt;/td&gt; &#xA;   &lt;td&gt;Object&lt;/td&gt; &#xA;   &lt;td&gt;same as source for other React images&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;loadingIndicatorSource&lt;/td&gt; &#xA;   &lt;td&gt;Object&lt;/td&gt; &#xA;   &lt;td&gt;source for loading indicator&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fadeDuration&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;duration of image fade (in ms)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimumZoomScale&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;The minimum allowed zoom scale. The default value is 1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maximumZoomScale&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;The maximum allowed zoom scale. The default value is 3.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;showsHorizontalScrollIndicator&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;iOS only&lt;/strong&gt;: When true, shows a horizontal scroll indicator. The default value is true.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;showsVerticalScrollIndicator&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;iOS only&lt;/strong&gt;: When true, shows a vertical scroll indicator. The default value is true.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;scale&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;Set zoom scale programmatically&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;androidZoomTransitionDuration&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Android only&lt;/strong&gt;: Double-tap zoom transition duration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;androidScaleType&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Android only&lt;/strong&gt;: One of the default &lt;em&gt;Android&lt;/em&gt; scale types: &#34;center&#34;, &#34;centerCrop&#34;, &#34;centerInside&#34;, &#34;fitCenter&#34;, &#34;fitStart&#34;, &#34;fitEnd&#34;, &#34;fitXY&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onLoadStart&lt;/td&gt; &#xA;   &lt;td&gt;func&lt;/td&gt; &#xA;   &lt;td&gt;Callback function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onLoad&lt;/td&gt; &#xA;   &lt;td&gt;func&lt;/td&gt; &#xA;   &lt;td&gt;Callback function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onLoadEnd&lt;/td&gt; &#xA;   &lt;td&gt;func&lt;/td&gt; &#xA;   &lt;td&gt;Callback function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onProgress&lt;/td&gt; &#xA;   &lt;td&gt;func&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;iOS only&lt;/strong&gt;: Callback function, invoked on download progress with {nativeEvent: {loaded, total}}.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onTap&lt;/td&gt; &#xA;   &lt;td&gt;func&lt;/td&gt; &#xA;   &lt;td&gt;Callback function (called on image tap)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onViewTap&lt;/td&gt; &#xA;   &lt;td&gt;func&lt;/td&gt; &#xA;   &lt;td&gt;Callback function (called on tap outside of image)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onScale&lt;/td&gt; &#xA;   &lt;td&gt;func&lt;/td&gt; &#xA;   &lt;td&gt;Callback function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Compared to &lt;a href=&#34;https://github.com/Anthonyzou/react-native-image-zoom&#34;&gt;react-native-image-zoom&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;react-native-image-zoom functionality is similar, but there are several major differencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PhotoView is based on PhotoDraweeView which is the &#34;PhotoView For Fresco&#34;. It works better, it supports several important callbacks out-of-box and it is, actually, recommended by Chris Banes, because his &lt;a href=&#34;https://github.com/chrisbanes/PhotoView&#34;&gt;PhotoView&lt;/a&gt; (base for react-native-image-zoom) doesn&#39;t completely support Facebook Fresco;&lt;/li&gt; &#xA; &lt;li&gt;PhotoView has more options like fadeDuration and minimumZoomScale/maximumZoomScale and more important callbacks;&lt;/li&gt; &#xA; &lt;li&gt;PhotoView is written in the same manner as default React Image, and it supports most of the features Image has (the goal is to be fully compaitable with Image and support absolutely everything);&lt;/li&gt; &#xA; &lt;li&gt;It is possible to use PhotoView as a container (currently iOS only)!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Automatic installation&lt;/h2&gt; &#xA;&lt;p&gt;Just two simple steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;npm install --save react-native-photo-view&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;react-native link react-native-photo-view&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manual installation&lt;/h2&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add these lines to &lt;code&gt;android/settings.gradle&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;include &#39;:react-native-photo-view&#39;&#xA;project(&#39;:react-native-photo-view&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/react-native-photo-view/android&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add one more dependency to &lt;code&gt;android/app/build.gradle&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies {&#xA;    compile project(&#39;:react-native-photo-view&#39;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Add it to your &lt;code&gt;MainActivity.java&lt;/code&gt; for RN &amp;lt; 0.29 and to your &lt;code&gt;MainApplication.java&lt;/code&gt; for RN &amp;gt;=0.29&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To register &lt;code&gt;PhotoViewPackage&lt;/code&gt;, you need to change the &lt;code&gt;MainActivity&lt;/code&gt; or &lt;code&gt;MainApplication&lt;/code&gt; depending on React Native version of your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.reactnative.photoview.PhotoViewPackage;&#xA;&#xA;// ...&#xA;&#xA;public class MainActivity extends ReactActivity {&#xA;    // ...&#xA;&#xA;    @Override&#xA;    protected List&amp;lt;ReactPackage&amp;gt; getPackages() {&#xA;      return Arrays.&amp;lt;ReactPackage&amp;gt;asList(&#xA;          new MainReactPackage(),&#xA;          new PhotoViewPackage() // add this manager&#xA;      );&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;IOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add this line to your podfile&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;  pod &#39;react-native-photo-view&#39;, path: &#39;./node_modules/react-native-photo-view&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>opa334/TrollNonce</title>
    <updated>2022-11-14T01:35:41Z</updated>
    <id>tag:github.com,2022-11-14:/opa334/TrollNonce</id>
    <link href="https://github.com/opa334/TrollNonce" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Boot nonce utility for TrollStore (15.0 - 15.5b4)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TrollNonce&lt;/h1&gt; &#xA;&lt;p&gt;Nonce Setter for 15.0 - 15.1.1 (A10-A15) and 15.2-15.5b4 (A12+, not all device / version combinations supported atm), only works when installed through TrollStore 1.0.9 or newer.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/potmdehex/multicast_bytecopy&#34;&gt;https://github.com/potmdehex/multicast_bytecopy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/0x36/weightBufs&#34;&gt;https://github.com/0x36/weightBufs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/0x7ff/dimentio&#34;&gt;https://github.com/0x7ff/dimentio&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>