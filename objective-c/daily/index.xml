<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-14T01:36:22Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DavydLiu/DLRadioButton</title>
    <updated>2023-11-14T01:36:22Z</updated>
    <id>tag:github.com,2023-11-14:/DavydLiu/DLRadioButton</id>
    <link href="https://github.com/DavydLiu/DLRadioButton" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Radio Button for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DLRadioButton&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/DLRadioButton&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/DLRadioButton.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/DLRaidoButton&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/DLRadioButton.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/DLRadioButton&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/DLRadioButton.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;DLRadioButton&lt;/code&gt; is an easy to use and highly customizable radio buttons control for iOS. It&#39;s a subclass of &lt;code&gt;UIButton&lt;/code&gt;, and works smoothly with both &lt;code&gt;Objective-C&lt;/code&gt; and &lt;code&gt;Swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Since its release, DLRadioButton has become the most popular radio buttons control for iOS 🎉. Thank you for all the great feedback and making it better for all of us 👏.&lt;/p&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DavydLiu/DLRadioButton/master/Images/DLRadioButton_screenshot1.png&#34; alt=&#34;screenshot1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h4&gt;To install:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Option 1: simply put &lt;code&gt;DLRadioButton.h&lt;/code&gt; and &lt;code&gt;DLRadiobutton.m&lt;/code&gt; in your project.&lt;/li&gt; &#xA; &lt;li&gt;Option 2: add &lt;code&gt;pod &#39;DLRadioButton&#39;, &#39;~&amp;gt; 1.4&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Option 3: add &lt;code&gt;github &#34;DavydLiu/DLRadioButton&#34; ~&amp;gt; 1.4&lt;/code&gt; to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;To add radio buttons in interface builder:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Put some UIButtons onto a View and change the UIButtons&#39; type to &#34;custom&#34;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DavydLiu/DLRadioButton/master/Images/change_UIButton_type.png&#34; alt=&#34;change UIButton Type&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the UIButtons&#39; class to &#34;DLRadioButton&#34;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DavydLiu/DLRadioButton/master/Images/change_UIButton_class.png&#34; alt=&#34;change UIButton Class&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set &#34;otherButtons&#34; outlet.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DavydLiu/DLRadioButton/master/Images/set_otherButtons_outlet.png&#34; alt=&#34;set otherButtons outlet&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;To customize DLRadiobutton:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Simply set properties directly in Interface Builder.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DavydLiu/DLRadioButton/master/Images/design_DLRadioButton.png&#34; alt=&#34;design DLButton&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Property reference:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DavydLiu/DLRadioButton/master/Images/DLRadioButton.png&#34; alt=&#34;DLRadioButton&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;To add radio buttons programmatically, please refer to the example project.&lt;/h4&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;ARC, iOS 6.0&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;David Liu. For help or any questions, feel free to &lt;a href=&#34;https://github.com/DavydLiu/DLRadioButton/issues/new&#34;&gt;open an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;DLRadioButton is available under the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ZhongTaoTian/Hardest</title>
    <updated>2023-11-14T01:36:22Z</updated>
    <id>tag:github.com,2023-11-14:/ZhongTaoTian/Hardest</id>
    <link href="https://github.com/ZhongTaoTian/Hardest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;史上最困难的游戏-By Objective-C&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#iOS游戏开发没有你想的那么难--Hardest&lt;/p&gt; &#xA;&lt;p&gt;##和大家聊聊天 有段日子没有发布过任何文字和代码了,之前的文章下很多网友留言也没有回复,其实每条评论我都有认真看.只是最近整个人有点迷茫,望大家理解.其实我很期盼大家和我聊聊天,但不要总是聊技术...&lt;/p&gt; &#xA;&lt;p&gt;##关于项目(代码下载地址在文章最下面点击GitHub链接) 项目说明:考虑到许多不会使用Cocos2D-X和Swift的朋友，此次项目采用Objective-C并且基于UIKit框架实现的.意思就是你会使用UIView,就可以尝试开发游戏了,嘿嘿!&lt;/p&gt; &#xA;&lt;p&gt;原生项目是采用Cocos2D-X开发的,所以在对图片的动画处理时,有些地方会没有原生显得那么流畅(如切割图片,对图片的变形处理,图片快速替换等),并且在性能上来说,UIKit也不如Cocos2D-X流畅,毕竟术业有专攻.如果是要开发游戏来上架的话,最好采用专门的游戏引擎来搭建项目(Cocos-2D,Unity3D,Sprite Kit等).&lt;/p&gt; &#xA;&lt;p&gt;开发语言:&lt;code&gt;Objective-C&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;开发工具:&lt;code&gt;Xcode7.1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;编译环境:&lt;code&gt;大于Xcode7.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;辅助工具:&lt;code&gt;Photoshop CS6&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;项目讲解: 把整个项目用文字带着大家过一遍有点不现实.这里我将项目的大体结构和一些主要逻辑,以及主要对象提供的接口功能下面列举出来.建议同学们先看代码,配合代码再来看这篇文章,顺着代码和文字搞懂项目主体逻辑.当需要学习具体功能如何实现时,在看&lt;code&gt;.m&lt;/code&gt;文件下的实现代码学习如何实现功能,如果有哪些地方不清楚,在简书下面留言或者微博留言.&lt;/p&gt; &#xA;&lt;p&gt;学习建议:最好使用真机来进行运行调试,有些关卡需要使用加速计与陀螺仪等功能,模拟器是没有的.当遇到实在无法过去的关卡时,点击首页的有些手柄按钮,点击解锁下一关或者在代码启动时,手动写入关卡得分信息即可.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/mw690/0068uRu1jw1f4wx92ccj9j30aj0ipgq8.jpg&#34; alt=&#34;Hardest&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;##主体架构&lt;/p&gt; &#xA;&lt;h3&gt;音效和背景音乐&lt;/h3&gt; &#xA;&lt;p&gt;音效和背景音乐采用了&lt;code&gt;AVFoundation&lt;/code&gt;框架封装了一个&lt;code&gt;WNXSoundToolManager&lt;/code&gt;的单利对象,背景音乐采用&lt;code&gt;AVAudioPlayer&lt;/code&gt;,背景音效采用&lt;code&gt;AudioServicesPlaySystemSound&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;提供以下方法和属性供全局调用或修改,通过修改&lt;code&gt;bgMusicType&lt;/code&gt;和&lt;code&gt;soundType&lt;/code&gt;可以控制背景音乐和音效声音的大小,通过&lt;code&gt;playSoundWithSoundName:&lt;/code&gt;方法根据音效名称设置播放不同的音效.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 音效或背景音乐播放声音打大小枚举&#xA;typedef NS_ENUM(NSInteger, SoundPlayType) {&#xA;    SoundPlayTypeHight = 0,&#xA;    SoundPlayTypeMiddle,&#xA;    SoundPlayTypeLow,&#xA;    SoundPlayTypeMute&#xA;};&#xA;&#xA;@interface WNXSoundToolManager : NSObject&#xA;&#xA;// 背景音乐声音大小Type&#xA;@property (nonatomic, assign) SoundPlayType bgMusicType;&#xA;// 音效声音大小Type&#xA;@property (nonatomic, assign) SoundPlayType soundType;&#xA;&#xA;// 暂停背景音乐&#xA;- (void)pauseBgMusic;&#xA;// 停止播放背景音乐&#xA;- (void)stopBgMusic;&#xA;// 重新播放背景音乐&#xA;- (void)playBgMusicWihtPlayAgain:(BOOL)playAgain;&#xA;// 播放音效:音效名称&#xA;- (void)playSoundWithSoundName:(NSString *)soundName;&#xA;// 设置背景音乐音量:音量大小0~1&#xA;- (void)setBackgroundMusicVolume:(float)volume;&#xA;&#xA;// 获取SoundManager单利对象&#xA;+ (instancetype)sharedSoundToolManager;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;保存和读取玩家关卡记录(WNXStageInfoManager)&lt;/h3&gt; &#xA;&lt;p&gt;如何持久化存储玩家过关信息和每关的得分记录.本项目采用归档和解档的方案. 拿到&lt;code&gt;WNXStageInfoManager&lt;/code&gt;的单例对象,通过调用Save和Read方法保存或读取关卡信息,当游戏关卡进入结算得分控制器后,判断新记录是否需要保存,如果需要调用保存接口.具体实现代码请参照&lt;code&gt;WNXStageInfoManager.m&lt;/code&gt;文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 单例方法&#xA;+ (instancetype)sharedStageInfoManager;&#xA;&#xA;// 保存关卡信息&#xA;- (BOOL)saveStageInfo:(WNXStageInfo *)stageInfo;&#xA;// 读取指定关卡编号的关卡信息&#xA;- (WNXStageInfo *)stageInfoWithNumber:(int)number;&#xA;&#xA;// 这个接口是当游戏无法过关时,在RootViewController点击手柄按钮,解锁下一关卡使用(**秘籍~慎用**)&#xA;- (BOOL)unlockNextStage;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;启动页动画&lt;/h3&gt; &#xA;&lt;p&gt;启动页动画是目前App比较常见的功能(顺丰优选,顺手付,顺丰海淘等都有).其实这里有一种假象,在AppDelegate的&lt;code&gt;didFinishLaunchingWithOptions()&lt;/code&gt;方法中,添加一个与启动图片完全一样的AnimVC,将AnimVC设置为keyWindow的rootViewController,在AnimVC的&lt;code&gt;viewDidApper()&lt;/code&gt;方法中执行动画,当动画完成后通过Block切换keyWindow的rootViewController为首页VC就OK了.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {&#xA;    &#xA;    [[UIApplication sharedApplication] setStatusBarHidden:YES];&#xA;    &#xA;    [NSThread sleepForTimeInterval:1.0];&#xA;    &#xA;    [self setKeyWindow];&#xA;    &#xA;    return YES;&#xA;}&#xA;&#xA;- (void)setKeyWindow {&#xA;    __weak typeof(self) weakSelf = self;&#xA;&#xA;    WNXLaunchAnimationViewController *launchAnimationVC = [[WNXLaunchAnimationViewController alloc] init];&#xA;    launchAnimationVC.animationFinish = ^{&#xA;        UIStoryboard *sb = [UIStoryboard storyboardWithName:@&#34;Main&#34; bundle:nil];&#xA;        WNXBaseNavigationController *rootNav = (WNXBaseNavigationController *)[sb instantiateViewControllerWithIdentifier:@&#34;RootNavigationController&#34;];&#xA;        weakSelf.window.rootViewController = rootNav;&#xA;    };&#xA;    &#xA;    self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];&#xA;    self.window.rootViewController = launchAnimationVC;&#xA;    [self.window makeKeyAndVisible];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;关于动画这里我就不讲什么了,有兴趣的朋友可以自己参考工程代码研究下.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww2.sinaimg.cn/mw690/0068uRu1jw1f4wx8obnmmg307u0dxb2b.gif&#34; alt=&#34;启动页动画&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;首页(WNXRootViewController)&lt;/h3&gt; &#xA;&lt;p&gt;首页其实就是一张图片,通过判断当前设备屏幕尺寸,读取当前设备尺寸对应按钮的Plist文件,拿到首页6个按钮位置的Frame,在&lt;code&gt;touchesBegan()&lt;/code&gt;方法中,通过&lt;code&gt;CGRectContainsPoint&lt;/code&gt;方法判断当前点击位置时候在指定的Frame内,符合条件时做出对应 的操作,具体代码&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 加载当前设备对应首页按钮Frame&#xA;- (void)loadHomeButtonFrame {&#xA;    NSString *framePath = [[NSBundle mainBundle] pathForResource:@&#34;home.plist&#34; ofType:nil];&#xA;    NSDictionary *frameDic = [NSDictionary dictionaryWithContentsOfFile:framePath];&#xA;    &#xA;    NSDictionary *dict;&#xA;    &#xA;    if (iPhone5) {&#xA;        dict = frameDic[@&#34;iphone5&#34;];&#xA;    } else {&#xA;        dict = frameDic[@&#34;iphone4&#34;];&#xA;    }&#xA;    &#xA;    _settingFrame = CGRectFromString(dict[@&#34;btn_setting_frame&#34;]);&#xA;    _languageFrame = CGRectFromString(dict[@&#34;btn_language_frame&#34;]);&#xA;    _moreFrame = CGRectFromString(dict[@&#34;btn_more_frame&#34;]);&#xA;    _rankFrame = CGRectFromString(dict[@&#34;btn_rank_frame&#34;]);&#xA;    _playFrame = CGRectFromString(dict[@&#34;btn_play_frame&#34;]);&#xA;    _getFrame = CGRectFromString(dict[@&#34;btn_get_frame&#34;]);&#xA;}&#xA;&#xA;// 判断点击点是否在对应的Frame内&#xA;- (void)touchesBegan:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)event {&#xA;    UITouch *touch = [touches anyObject];&#xA;    &#xA;    CGPoint touchPoint = [touch locationInView:touch.view];&#xA;    &#xA;    [[WNXSoundToolManager sharedSoundToolManager] playSoundWithSoundName: kSoundCliclName];&#xA;    &#xA;    if (CGRectContainsPoint(_settingFrame, touchPoint)) {&#xA;        &#xA;        [self performSegueWithIdentifier:@&#34;Setting&#34; sender:nil];&#xA;        &#xA;    } else if (CGRectContainsPoint(_languageFrame, touchPoint)) {&#xA;        &#xA;        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:kBlogURL]];&#xA;        &#xA;    } else if (CGRectContainsPoint(_moreFrame, touchPoint)) {&#xA;        &#xA;        [self performSegueWithIdentifier:@&#34;Rare&#34; sender:nil];&#xA;        &#xA;    } else if (CGRectContainsPoint(_rankFrame, touchPoint)) {&#xA;        &#xA;        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:kWeiBoURL]];&#xA;        &#xA;    } else if (CGRectContainsPoint(_playFrame, touchPoint)) {&#xA;        &#xA;        [self performSegueWithIdentifier:@&#34;PlayGame&#34; sender:nil];&#xA;        &#xA;    } else if (CGRectContainsPoint(_getFrame, touchPoint)) {&#xA;        &#xA;        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:kGithubUrl]];&#xA;        &#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;关卡选择控制器(WNXSelectStageViewController)&lt;/h3&gt; &#xA;&lt;p&gt;关卡选择控制器采用UIScrollView实现,在scrollView放入24个&lt;code&gt;WNXStageListView&lt;/code&gt;(当然这里也可以自己创建缓存池复用,个人觉得没必要),每个&lt;code&gt;WNXStageListView&lt;/code&gt;都有对应的一个关卡信息模型&lt;code&gt;stageModel&lt;/code&gt;,模型属性从工程-&amp;gt;Resources-&amp;gt;Plist-&amp;gt;stages.plist文件中读取,根据&lt;code&gt;model&lt;/code&gt;里的成员变量,加载关卡对应的信息,如关卡图片,是否解锁,玩家历史得分以及Rank标记等.&lt;/p&gt; &#xA;&lt;p&gt;每个&lt;code&gt;WNXStageListView&lt;/code&gt;,根据ID设置不同的Tag,并且提供单击手势,在&lt;code&gt;stageView&lt;/code&gt;的点击事件中.调用导航控制器,Push到&lt;code&gt;WNXPrepareViewController&lt;/code&gt;控制器,并将选择关卡的stageModel作为参数传过去,&lt;code&gt;WNXPrepareViewController&lt;/code&gt;做出相应的展示即可. 选择关卡效果如下图所示&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww3.sinaimg.cn/mw690/0068uRu1jw1f4wx95nud0g307u0dx1l2.gif&#34; alt=&#34;选择关卡效果图&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;关卡准备开始控制器(WNXPrepareViewController)&lt;/h3&gt; &#xA;&lt;p&gt;每个关卡开始游戏前,都会以动画的形式出现本关游戏名称,过关规则,以及历史得分等一系列功能.都是由这个控制器完成的.通过选择关卡时传入的&lt;code&gt;stageModel&lt;/code&gt;,展示&lt;code&gt;model&lt;/code&gt;内对应的数据,当用户点击&lt;code&gt;Play&lt;/code&gt;按钮时,使用&lt;code&gt;WNXGameControllerViewManager&lt;/code&gt;单例对象,根据传入的&lt;code&gt;stageModel&lt;/code&gt;,返回对应的关卡ViewController,然后Push到返回的ViewController游戏关卡即可.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/mw690/0068uRu1jw1f4wx8zuea7g307u0dxhdw.gif&#34; alt=&#34;准备开始控制器效果图&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;关卡控制器&lt;/h3&gt; &#xA;&lt;p&gt;24关,每关都有很多重复的功能,这里我们按照不同关卡的属性抽取出几种公共的父类,每个关卡根据自己的需求选择继承相应的控制器,并且在&lt;code&gt;ViewDidLoad&lt;/code&gt;函数中初始化每个关卡不同的属性,具体分类效果如下图所示&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww2.sinaimg.cn/mw690/0068uRu1jw1f4wx91rcmjj30so0lhjwm.jpg&#34; alt=&#34;逻辑图&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;####WNXBaseGameViewController --&amp;gt; UIViewController&lt;/p&gt; &#xA;&lt;p&gt;WNXBaseGameViewController是所有关卡ViewController的基类控制器,提供每个游戏关卡的基本属性设置,并且每个关卡的初始化操作都封装在了这里,每个关卡只需要在自己的ViewDidLoad方法中调用&lt;code&gt;buildStageInfo()&lt;/code&gt;函数,添加构建自己的UI即可,重写父类的方法,完成每关不同的操作.&lt;/p&gt; &#xA;&lt;p&gt;公有属性&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WNXGameGuideType guideType&lt;/code&gt;每关第一次进入关卡,本关游戏手势提示样式&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WNXGameGuideTypeNone&lt;/code&gt;无提示&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WNXGameGuideTypeOneFingerClick&lt;/code&gt;单个手指头点击&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WNXGameGuideTypeReplaceClick&lt;/code&gt;左右按钮交替点击&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WNXGameGuideTypeMultiPointClick&lt;/code&gt;多个手指同时点击&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/mw690/0068uRu1jw1f4wx8i2msgg307u0dx7l1.gif&#34; alt=&#34;单个手指头点击效果&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww2.sinaimg.cn/mw690/0068uRu1jw1f4wx8jmfatg307u0dxayb.gif&#34; alt=&#34;左右按钮交替点击效果&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/mw690/0068uRu1jw1f4wx8itzmog307u0dx4qp.gif&#34; alt=&#34;多个手指同时点击效果样式&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WNXStage *stage&lt;/code&gt;每关关卡信息model(model详情)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WNXScoreboardType&lt;/code&gt;每关计分板样式&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WNXScoreboardTypeNone&lt;/code&gt;无计分板&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WNXScoreboardTypeCountPTS&lt;/code&gt; &lt;img src=&#34;&#34; alt=&#34;WNXScoreboardTypeCountPTS&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WNXScoreboardTypeTimeMS&lt;/code&gt; &lt;img src=&#34;&#34; alt=&#34;WNXScoreboardTypeTimeMS&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WNXScoreboardTypeSecondAndMS&lt;/code&gt; &lt;img src=&#34;&#34; alt=&#34;WNXScoreboardTypeSecondAndMS&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/mw690/0068uRu1jw1f4wx90hrdtj308w03ojrp.jpg&#34; alt=&#34;WNXScoreboardTypeCountPTS计分板样式&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww2.sinaimg.cn/mw690/0068uRu1jw1f4wx90s1euj309t03l3yv.jpg&#34; alt=&#34;WNXScoreboardTypeTimeMS计分板样式&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww3.sinaimg.cn/mw690/0068uRu1jw1f4wx9149p4j307s03u0t4.jpg&#34; alt=&#34;WNXScoreboardTypeSecondAndMS计分板样式&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;UIView *countScoreView&lt;/code&gt;计分板(考虑有多种样式,使用了UIView,每个关卡在用的时候根据自己类型进行强制转换)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WNXStateView *stateView&lt;/code&gt;关卡提示状态View&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;UIButton *playAgainButton&lt;/code&gt; 重新开始游戏按钮&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;UIButton *pauseButton&lt;/code&gt;暂停按钮&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;公有方法&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)beginGame; // 开始游戏&#xA;- (void)endGame;   // 结束游戏&#xA;- (void)beginRedayGoView; // 开始显示RedayGo动画&#xA;- (void)readyGoAnimationFinish; // RedayGo动画显示结束&#xA;- (void)pauseGame;    // 暂停游戏&#xA;- (void)continueGame; // 继续游戏&#xA;- (void)playAgainGame; // 重新开始游戏&#xA;- (void)showGameFail; //  游戏失败(部分关卡有, 进入失败ViewController)&#xA;&#xA;// 显示关卡游戏结果&#xA;- (void)showResultControllerWithNewScroe:(double)scroe // 玩家得分&#xA;                                    unit:(NSString *)unil  // 本关计分器显示单位&#xA;                                   stage:(WNXStage *)stage // 关卡信息&#xA;                              isAddScore:(BOOL)isAddScroe; // 是否是添加分数(这里偷了个懒,只做了添加动画,应该有分数增长加动画或者减少动画)&#xA;&#xA;// 构建关卡信息&#xA;- (void)buildStageInfo;&#xA;&#xA;// 将广告,重新开始,暂停按钮放到最上层&#xA;- (void)bringPauseAndPlayAgainToFront;&#xA;&#xA;// 构建显示状态View&#xA;- (void)buildStageView;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;####WNXRYBViewController --&amp;gt; WNXBaseGameViewController WNXRYBViewController,继承至WNXBaseGameViewController,底部拥有三个按钮,并且默认有三条红黄蓝背景条(拥有高亮时图片),底部按钮默认Tag为0,1,2,游戏大部分关卡为这种样式&lt;/p&gt; &#xA;&lt;p&gt;公有属性&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@property (strong, nonatomic) UIImageView *redImageView;&#xA;@property (strong, nonatomic) UIImageView *yellowImageView;&#xA;@property (strong, nonatomic) UIImageView *blueImageView;&#xA;&#xA;@property (strong, nonatomic) UIButton    *redButton;&#xA;@property (strong, nonatomic) UIButton    *yellowButton;&#xA;@property (strong, nonatomic) UIButton    *blueButton;&#xA;&#xA;@property (nonatomic, strong) NSMutableArray *buttons;&#xA;@property (nonatomic, strong) NSArray *buttonImageNames;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;公有方法&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)setButtonsIsActivate:(BOOL)isActivate; // 设置全部按钮是否可以点击&#xA;&#xA;- (void)setButtonImage:(UIImage *)image // 当底部按钮图片相同时,设置底部按钮图片&#xA;      contenEdgeInsets:(UIEdgeInsets)insets; // 图片的contenEdgeInsets&#xA;&#xA;- (void)removeAllImageView; // 有写关卡不需要红黄蓝背景图片时,删除三个UIImageView&#xA;&#xA;// 底部按钮Action&#xA;- (void)addButtonsActionWithTarget:(id)target &#xA;                            action:(SEL)action&#xA;                  forControlEvents:(UIControlEvents)forControlEvents;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;####WNXTwoButtonViewController --&amp;gt; WNXBaseGameViewController WNXTwoButtonViewController,底部拥有俩个按钮关卡,并且默认带有背景ImageView.&lt;/p&gt; &#xA;&lt;p&gt;公有属性&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@property (nonatomic, strong) UIImageView *backgroundIV;&#xA;&#xA;@property (nonatomic, strong) UIButton *leftButton;&#xA;@property (nonatomic, strong) UIButton *rightButton;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;公有方法&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 统一设置按钮是否可以被点击,部分关卡按钮点击后,不允许再次点击&#xA;- (void)setButtonActivate:(BOOL)isActivate;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;####WNXBackgroundViewController --&amp;gt; WNXBaseGameViewController 只带有背景图关卡,项目中有些关卡是采用陀螺仪和加速计的关卡.&lt;/p&gt; &#xA;&lt;p&gt;关于每一关如何实现,我这里就不一一列举了,有点太多了,但是都并不复杂,写个2~3关基本就能掌握套路了,就个别关卡使用了加速计和陀螺仪,具体实现的代码我都在工程中写的很明白了,在Stage文件夹下,大家自行参考即可.&lt;/p&gt; &#xA;&lt;h3&gt;分数结算控制器(WNXResultViewController)&lt;/h3&gt; &#xA;&lt;p&gt;当每个关卡游戏结束后,都会进入分数结算控制器,这里通过在&lt;code&gt;WNXBaseGameViewController&lt;/code&gt;中封装了一个方法以保证每个关卡控制器都可以直接调用计算得分,当关卡游戏结束后,调用当前关卡的下面函数即可,这里小熊偷了个懒,只实现了相加的功能,不过相信通过参考相加的功能,大家实现相减的功能也是小csae啦~&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)showResultControllerWithNewScroe:(double)scroe&#xA;                                    unit:(NSString *)unil&#xA;                                   stage:(WNXStage *)stage&#xA;                              isAddScore:(BOOL)isAddScroe;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;说明下&lt;code&gt;isAddScore&lt;/code&gt;的作用&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;有些关卡是得分越高越好.这总关卡在显示结果的时候分数是从0一点点网上加的,这种情况isAddScore传入YES&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;有些关卡是得分越少越好,这总卡在显示结果的时候分数是从大网小一点点减少的,这种情况isAddScore传入NO&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;当结算分数完成后,会出现以下几种情况,跟据不同的得分情况执行不同的逻辑即可,具体逻辑如下所示 ####状态一: 游戏失败(当得分小于等于F,不保存得分),出现下图 &lt;img src=&#34;http://ww4.sinaimg.cn/mw690/0068uRu1jw1f4wx8m2glbg307u0dxhdw.gif&#34; alt=&#34;得分不够,显示失败&#34;&gt; ####状态二: 游戏成功&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;当前关卡无得分记录,并且得分大于F,保存玩家得分,正常显示得分结果,并且解锁下一关.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/mw690/0068uRu1jw1f4x0t937k1g307u0dxqva.gif&#34; alt=&#34;成功状态1&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;当前关卡有记录,但是本次游戏得分没有超越历史记录,正常显示得分结果,不保存本次游戏得分.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/mw690/0068uRu1jw1f4wx8taxk5g307u0dxqv8.gif&#34; alt=&#34;成功状态2&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;当前关卡有记录,并且本次游戏得分超越历史记录,显示超越历史得分动画,并且讲本次得分替换掉上一次得分.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww3.sinaimg.cn/mw690/0068uRu1jw1f4x0oj1dbfg307u0dxb2c.gif&#34; alt=&#34;成功状态3&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;失败(WNXFailViewController)&lt;/h3&gt; &#xA;&lt;p&gt;部分关卡会有在游戏中失败的情况,如下图&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/mw690/0068uRu1jw1f4wx8qjpf7g307u0dxnpf.gif&#34; alt=&#34;游戏失败&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;这里也是在&lt;code&gt;WNXBaseGameViewController&lt;/code&gt;中封装了一个方法,当关卡失败后,直接调用&lt;code&gt;showGameFail()&lt;/code&gt;方法,Push到失败控制器即可.&lt;/p&gt; &#xA;&lt;p&gt;如果需要失败时执行一些操作,如停止计时,停止动画等,在当前关卡重写&lt;code&gt;showGameFail()&lt;/code&gt;方法,在调用父类方法前调用需要执行的相应代码即可,如下&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)showGameFail {&#xA;    // 需要在游戏失败时执行的相应代码&#xA;    // do something&#xA;    &#xA;    [super showGameFail];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;暂停控制器(WNXPauseViewController)&lt;/h3&gt; &#xA;&lt;p&gt;每个游戏关卡都有暂停的功能,所以将暂停的功能封装到&lt;code&gt;WNXBaseGameViewController&lt;/code&gt;中,并且提供两个接口供子控制器调用,分别为&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(void)pauseGame; 暂停游戏&lt;/li&gt; &#xA; &lt;li&gt;(void)continueGame; 继续游戏&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;在每个游戏关卡重写上面两个方法,当玩家点击暂停按钮时,回调用暂停方法,点击返回时,会调用继续方法,具体实现如下&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 玩家点击暂停按钮&#xA;- (void)pauseGame {&#xA;    // 关卡暂停,本关需要执行的相应操作,如暂停计时器,动画等.&#xA;&#xA;    [super pauseGame];&#xA;}&#xA;&#xA;- (void)continueGame {&#xA;    [super continueGame];&#xA;    &#xA;    // 继续游戏,继续执行暂停前的操作&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/mw690/0068uRu1jw1f4wx8xiesbg307u0dxqv6.gif&#34; alt=&#34;暂停控制器效果图&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;项目总结&lt;/h3&gt; &#xA;&lt;p&gt;项目写的比较匆忙,基本每天晚上抽空写点,写完也没有回头CodeReview,说实话,这是一个非常非常不好的习惯,大家一定要养成定期回头看看自己写过代码的习惯.随着越网后写,发现前面有很多地方可以修改,我吧有点懒,So你懂的...&lt;/p&gt; &#xA;&lt;p&gt;感觉光靠文字来讲述一个项目实在是太困难.希望大家还是参考工程代码,当遇到无法看懂或者不理解的时候参考下我写的Blog应该会更好一些.这个游戏项目说实话还是比较简单的,相信大家仔细研究下都可以实现的.游戏还有24关,有兴趣的同学可以尝试自己将剩下的24关自己实现下~&lt;/p&gt; &#xA;&lt;p&gt;有段日子没使用OC写项目了,如果有任何建议可在简书留言,或者私信,或者在微博留言都可以,我都会看的.&lt;/p&gt; &#xA;&lt;p&gt;这个项目完事后,可能会很长一段时间,不再写这种大型的开源项目了,因为我个人准备开发一款游戏上架到AppStore,从设计到UI设计以及需求实现都是我一人完成,工作量比较大.PS(现在连做什么都不知道呢...).&lt;/p&gt; &#xA;&lt;p&gt;以后我会分享一些有意思的小功能,小动画等给大家.希望朋友继续关注维尼的小熊.&lt;/p&gt; &#xA;&lt;h3&gt;代码下载地址(如果觉得有帮助,请点击Star★)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ZhongTaoTian&#34;&gt;代码下载地址,记得Star★和Follow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;小熊的技术博客&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/users/5fe7513c7a57/latest_articles&#34;&gt;点击链接我的博客,欢迎关注&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;小熊的新浪微博&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://weibo.com/5622363113/profile?topnav=1&amp;amp;wvr=6&#34;&gt;我的新浪微博,欢迎关注&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;本文为作者原著,转载请注明作者出处,仅供学习交流,严禁用于商业用途&lt;/h4&gt;</summary>
  </entry>
  <entry>
    <title>ZhongTaoTian/WNXHuntForCity</title>
    <updated>2023-11-14T01:36:22Z</updated>
    <id>tag:github.com,2023-11-14:/ZhongTaoTian/WNXHuntForCity</id>
    <link href="https://github.com/ZhongTaoTian/WNXHuntForCity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;城觅By-Objective-C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iOS高仿城觅项目（开发思路和代码）&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww3.sinaimg.cn/mw690/0068uRu1gw1euafbypbwfg307r0eanpd.gif&#34; alt=&#34;抽屉&#34;&gt; &lt;img src=&#34;http://ww2.sinaimg.cn/mw690/0068uRu1gw1euafbuoga1g307r0ea4qq.gif&#34; alt=&#34;首页部分效果&#34;&gt; &lt;img src=&#34;http://ww3.sinaimg.cn/mw690/0068uRu1gw1euafcdouwvg307r0ea7lo.gif&#34; alt=&#34;首页效果&#34;&gt; &lt;img src=&#34;http://ww1.sinaimg.cn/mw690/0068uRu1gw1euafd13tbjg307r0eau0y.gif&#34; alt=&#34;部分效果&#34;&gt; &lt;img src=&#34;http://ww1.sinaimg.cn/mw690/0068uRu1gw1euafcmh1l6g307r0eae81.gif&#34; alt=&#34;发现&#34;&gt; &lt;img src=&#34;http://ww2.sinaimg.cn/mw690/0068uRu1gw1eu74j4wthpg307r0ea7j8.gif&#34; alt=&#34;消息&#34;&gt; &lt;img src=&#34;http://ww2.sinaimg.cn/mw690/0068uRu1gw1eu79mzig0xg307r0eadix.gif&#34; alt=&#34;搜索&#34;&gt; &lt;img src=&#34;http://ww3.sinaimg.cn/mw690/0068uRu1gw1euafcuka9ug307r0eatdy.gif&#34; alt=&#34;设置&#34;&gt; &lt;img src=&#34;http://ww3.sinaimg.cn/mw690/0068uRu1gw1euag0qdr3yg307i0dpb29.gif&#34; alt=&#34;模糊效果&#34;&gt; &lt;img src=&#34;http://ww4.sinaimg.cn/mw690/0068uRu1gw1eu74eo2alej31kw0yx7oy.jpg&#34; alt=&#34;代码注释展示&#34;&gt; &lt;img src=&#34;http://ww3.sinaimg.cn/mw690/0068uRu1gw1eu74egddlqj31kw0yn18a.jpg&#34; alt=&#34;代码注释展示&#34;&gt; 还有很多细节就不一一展示了,大家将代码运行下自己查看即可.&lt;/p&gt; &#xA;&lt;p&gt;###文章链接&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;http://www.jianshu.com/p/8b0d694d1c69&#34;&gt;城觅,点击链接当前博客&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;#####如有任何问题都可以在博客下留言，我会逐一回复&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;http://www.jianshu.com/p/d5ea6c9d65fd&#34;&gt;点击链接gitHub&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h5&gt;希望小手能顺便点一下右上角的⭐️Star ^_^，朋友的鼓励和支持是我继续分享的动力&lt;/h5&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;http://weibo.com/5622363113/profile?rightmod=1&amp;amp;wvr=6&amp;amp;mod=personinfo&#34;&gt;我的微博&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;####请直接打开&lt;code&gt;WNXHuntForCity.xcworkspace&lt;/code&gt;运行工程&lt;img src=&#34;http://ww4.sinaimg.cn/mw690/0068uRu1gw1eu7cyp74l7j307k06eaac.jpg&#34; alt=&#34;打开&#34;&gt;而不要打开&lt;code&gt;WNXHuntForCity.xcodeproj&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>