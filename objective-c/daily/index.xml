<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-21T01:34:32Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>EvgenyKarkan/EKAlgorithms</title>
    <updated>2023-08-21T01:34:32Z</updated>
    <id>tag:github.com,2023-08-21:/EvgenyKarkan/EKAlgorithms</id>
    <link href="https://github.com/EvgenyKarkan/EKAlgorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EKAlgorithms contains some well known CS algorithms &amp; data structures.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/EvgenyKarkan/EKAlgorithms&#34;&gt;&lt;img src=&#34;https://travis-ci.org/EvgenyKarkan/EKAlgorithms.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;EKAlgorithms&lt;/h1&gt; &#xA;&lt;p&gt;EKAlgorithms is a set of computer exercises implemented in Objective-C. Data structures, well known algorithms, CS curiosities, you name it!&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget to &lt;em&gt;watch&lt;/em&gt; the repository; Its content will be expanded and updated frequently.&lt;/p&gt; &#xA;&lt;h2&gt;Arrays and Lists&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Index of maximum element in array.&lt;/li&gt; &#xA; &lt;li&gt;Indexes of maximum and minimum elements simultaneously.&lt;/li&gt; &#xA; &lt;li&gt;Find longest string in array of strings.&lt;/li&gt; &#xA; &lt;li&gt;Find shortest string in array of strings.&lt;/li&gt; &#xA; &lt;li&gt;Array reverse.&lt;/li&gt; &#xA; &lt;li&gt;Intersection of two arrays.&lt;/li&gt; &#xA; &lt;li&gt;Union of two arrays (with remove duplicates).&lt;/li&gt; &#xA; &lt;li&gt;Union of two arrays (with remove duplicates) for some key.&lt;/li&gt; &#xA; &lt;li&gt;Find duplicates.&lt;/li&gt; &#xA; &lt;li&gt;Array with N unique/not unique random objects.&lt;/li&gt; &#xA; &lt;li&gt;Check if array is sorted.&lt;/li&gt; &#xA; &lt;li&gt;Array shuffle (Fisher-Yates).&lt;/li&gt; &#xA; &lt;li&gt;Sum of array elements.&lt;/li&gt; &#xA; &lt;li&gt;N of occurences of each element in array.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Search Algorithms&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Linear search.&lt;/li&gt; &#xA; &lt;li&gt;Binary search.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Sorting Algorithms&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Bubble sort.&lt;/li&gt; &#xA; &lt;li&gt;Shell sort.&lt;/li&gt; &#xA; &lt;li&gt;Merge sort.&lt;/li&gt; &#xA; &lt;li&gt;Quick sort.&lt;/li&gt; &#xA; &lt;li&gt;Insertion sort.&lt;/li&gt; &#xA; &lt;li&gt;Selection sort.&lt;/li&gt; &#xA; &lt;li&gt;Radix Sort.&lt;/li&gt; &#xA; &lt;li&gt;Partial selection sort.&lt;/li&gt; &#xA; &lt;li&gt;Heap sort.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Selection Algorithms&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Quickselect.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Strings&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Palindrome or not.&lt;/li&gt; &#xA; &lt;li&gt;String reverse.&lt;/li&gt; &#xA; &lt;li&gt;Words count.&lt;/li&gt; &#xA; &lt;li&gt;Permutations of string.&lt;/li&gt; &#xA; &lt;li&gt;Occurrences of each character (a - z).&lt;/li&gt; &#xA; &lt;li&gt;Count &#34;needles&#34; in a &#34;haystack&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Random string.&lt;/li&gt; &#xA; &lt;li&gt;Concatenation of two strings.&lt;/li&gt; &#xA; &lt;li&gt;Find 1st occurrence of &#34;needle&#34; in a &#34;haystack&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Last occurrence of &#34;needle&#34; in a &#34;haystack&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Longest common subsequence.&lt;/li&gt; &#xA; &lt;li&gt;Levenshtein distance.&lt;/li&gt; &#xA; &lt;li&gt;KMP (Knuth–Morris–Pratt).&lt;/li&gt; &#xA; &lt;li&gt;Boyer–Moore string search algorithm.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Numeric Algorithms&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Sieve of Eratosthenes.&lt;/li&gt; &#xA; &lt;li&gt;Great common divisor (GCD).&lt;/li&gt; &#xA; &lt;li&gt;Least common multiple (LCM).&lt;/li&gt; &#xA; &lt;li&gt;Factorial.&lt;/li&gt; &#xA; &lt;li&gt;Fibonacci numbers (5 algos).&lt;/li&gt; &#xA; &lt;li&gt;Sum of digits.&lt;/li&gt; &#xA; &lt;li&gt;Binary to decimal conversion.&lt;/li&gt; &#xA; &lt;li&gt;Decimal to binary conversion.&lt;/li&gt; &#xA; &lt;li&gt;Fast exponentiation.&lt;/li&gt; &#xA; &lt;li&gt;Number reverse.&lt;/li&gt; &#xA; &lt;li&gt;Even/odd check.&lt;/li&gt; &#xA; &lt;li&gt;Leap year check.&lt;/li&gt; &#xA; &lt;li&gt;Armstrong number check.&lt;/li&gt; &#xA; &lt;li&gt;Prime number check.&lt;/li&gt; &#xA; &lt;li&gt;Find Nth prime.&lt;/li&gt; &#xA; &lt;li&gt;Swap the value of two NSInteger pointers.&lt;/li&gt; &#xA; &lt;li&gt;Square root using Newton-Raphson method.&lt;/li&gt; &#xA; &lt;li&gt;Convert integer to another numeral system (2, 8, 12, 16).&lt;/li&gt; &#xA; &lt;li&gt;Fast inverse square root.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Data Structures&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Stack (LIFO).&lt;/li&gt; &#xA; &lt;li&gt;Queue (FIFO).&lt;/li&gt; &#xA; &lt;li&gt;Deque.&lt;/li&gt; &#xA; &lt;li&gt;Linked list.&lt;/li&gt; &#xA; &lt;li&gt;Graph: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DFS (depth-first search);&lt;/li&gt; &#xA;   &lt;li&gt;BFS (breadth-first search);&lt;/li&gt; &#xA;   &lt;li&gt;MST (minimum spanning tree - Prim&#39;s algorithm);&lt;/li&gt; &#xA;   &lt;li&gt;MST (minimum spanning tree - Kruskal&#39;s algorithm);&lt;/li&gt; &#xA;   &lt;li&gt;Shortest path (Dijkstra&#39;s algorithm);&lt;/li&gt; &#xA;   &lt;li&gt;Topsort.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Tree.&lt;/li&gt; &#xA; &lt;li&gt;Binary tree: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pre-order traversal;&lt;/li&gt; &#xA;   &lt;li&gt;In-order traversal;&lt;/li&gt; &#xA;   &lt;li&gt;Post-order traversal.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Binary search tree (BST).&lt;/li&gt; &#xA; &lt;li&gt;AVL tree.&lt;/li&gt; &#xA; &lt;li&gt;Binary heap.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Problems&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Josephus Problem.&lt;/li&gt; &#xA; &lt;li&gt;Modulo bias.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Geometry&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Array of sorted locations according to a distance to a given location.&lt;/li&gt; &#xA; &lt;li&gt;Cartesian quadrant selection algorithms&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Recursion&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Tower of Hanoi.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome! But if you want to do a contribution, open an issue first.&lt;/p&gt; &#xA;&lt;p&gt;Originally, the compiled exercises are for educational purposes only and have no intention of being the ultimate solution complexity-wise, but they do intend to be used by you as a starting point of a deeper study on algorithms and their optimization.&lt;/p&gt; &#xA;&lt;h2&gt;Important Note&lt;/h2&gt; &#xA;&lt;p&gt;The Foundation framework already includes tools and methods for most of the exercises contained here. Kudos to Apple on that! But... this. is. SPARTA! So lets get our hands dirty and try to implement cool CS stuff with minimal use of existing APIs.&lt;/p&gt; &#xA;&lt;p&gt;Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;Similar repositories&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sagivo/algorithms&#34;&gt;algorithms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;algorithms playground for common questions (Ruby language)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/waynewbishop/SwiftStructures&#34;&gt;SwiftStructures&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Examples of commonly used data structures and algorithms in Swift. (Swift)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hollance/swift-algorithm-club&#34;&gt;swift-algorithm-club&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Algorithms and data structures in Swift, with explanations!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to these guys for their contributions to the project&#39;s development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stanislaw&#34;&gt;@stanislaw&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vittoriom&#34;&gt;@vittoriom &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AustinChou&#34;&gt;@AustinChou&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Discontinuity-srl/DSGraphicsKit</title>
    <updated>2023-08-21T01:34:32Z</updated>
    <id>tag:github.com,2023-08-21:/Discontinuity-srl/DSGraphicsKit</id>
    <link href="https://github.com/Discontinuity-srl/DSGraphicsKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Objective-C utilities for common and advanced graphics operations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DSGraphicsKit&lt;/h1&gt; &#xA;&lt;p&gt;Utilities for common and advanced graphics operations.&lt;/p&gt; &#xA;&lt;p&gt;DSGraphicsKit provides support to quickly perform the following operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Images: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create icons with fills, glows and shadows from the alpha channel of an image.&lt;/li&gt; &#xA;   &lt;li&gt;Resize with corner rounding.&lt;/li&gt; &#xA;   &lt;li&gt;Render a layer to an image.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Views: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add a 3d rotation along the y axis.&lt;/li&gt; &#xA;   &lt;li&gt;Add a reflection.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Animations: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add a pop up animation to a layer.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods&#34;&gt;CocoaPods&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;DSGraphicsKit&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Discontinuity-srl/DSGraphicsKit/raw/master/README/Screenshots.png&#34;&gt;&lt;img src=&#34;https://github.com/Discontinuity-srl/DSGraphicsKit/raw/master/README/Screenshots.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Rotating and adding a reflection to a view:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;UIView *view;&#xA;[view setYRotation:25.0f];&#xA;[view addReflectionToSuperLayer];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Icons:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;UIImage *source;&#xA;UIImage *fill;&#xA;UIColor *color1;&#xA;UIColor *color2;&#xA;&#xA;UIImage *icon0 = [source gradientIconWithRGBColors:[NSArray arrayWithObjects:color1, color2, nil]];&#xA;UIImage *icon1 = [fill applyAlphaFromImage:source glowWidth:5.0f offset:CGSizeZero color:color1];&#xA;UIImage *icon2 = [source iconWithForeground:fill background:[UIColor colorWithWhite:0.1 alpha:1.0] radius:4.0];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Images resizing with corners rounding:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;UIImage *original;&#xA;UIImage *new = [original imageResizedToSize:CGSizeMake(160, 160)&#xA;                           withCornerRadius:24.0f&#xA;                                    corners:DSCornerTopLeft | DSCornerBottomRight&#xA;                               transparency:NO];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Animations:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;UIView *view;&#xA;[view.layer addPopUpAnimation];&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>matehat/Objective-LevelDB</title>
    <updated>2023-08-21T01:34:32Z</updated>
    <id>tag:github.com,2023-08-21:/matehat/Objective-LevelDB</id>
    <link href="https://github.com/matehat/Objective-LevelDB" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Objective-C database library built over Google&#39;s LevelDB&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/matehat/Objective-LevelDB&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/matehat/Objective-LevelDB.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;An Objective-C database library built over &lt;a href=&#34;http://code.google.com/p/leveldb&#34;&gt;Google&#39;s LevelDB&lt;/a&gt;, a fast embedded key-value store written by Google.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;By far, the easiest way to integrate this library in your project is by using &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Have &lt;a href=&#34;http://cocoapods.org&#34;&gt;Cocoapods&lt;/a&gt; installed, if you don&#39;t already&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your Podfile, add the line&lt;/p&gt; &lt;pre&gt;&lt;code&gt; pod &#39;Objective-LevelDB&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;pod install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make something awesome.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h4&gt;Creating/Opening a database file on disk&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;LevelDB *ldb = [LevelDB databaseInLibraryWithName:@&#34;test.ldb&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Setup Encoder/Decoder blocks&lt;/h5&gt; &#xA;&lt;p&gt;By default, any object you store will be encoded and decoded using &lt;code&gt;NSKeyedArchiver&lt;/code&gt;/&lt;code&gt;NSKeyedUnarchiver&lt;/code&gt;. You can customize this by providing &lt;code&gt;encoder&lt;/code&gt; and &lt;code&gt;decoder&lt;/code&gt; blocks, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;ldb.encoder = ^ NSData * (LevelDBKey *key, id object) {&#xA;  // return some data, given an object&#xA;}&#xA;ldb.decoder = ^ id (LevelDBKey *key, NSData * data) {&#xA;  // return an object, given some data&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;NSMutableDictionary-like API&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;ldb[@&#34;string_test&#34;] = @&#34;laval&#34;; // same as:&#xA;[ldb setObject:@&#34;laval&#34; forKey:@&#34;string_test&#34;];&#xA;&#xA;NSLog(@&#34;String Value: %@&#34;, ldb[@&#34;string_test&#34;]); // same as:&#xA;NSLog(@&#34;String Value: %@&#34;, [ldb objectForKey:@&#34;string_test&#34;]);&#xA;&#xA;[ldb setObject:@{@&#34;key1&#34; : @&#34;val1&#34;, @&#34;key2&#34; : @&#34;val2&#34;} forKey:@&#34;dict_test&#34;];&#xA;NSLog(@&#34;Dictionary Value: %@&#34;, [ldb objectForKey:@&#34;dict_test&#34;]);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All available methods can be found in its &lt;a href=&#34;https://github.com/matehat/Objective-LevelDB/raw/master/Classes/LevelDB.h&#34;&gt;header file&lt;/a&gt; (documented).&lt;/p&gt; &#xA;&lt;h5&gt;Enumeration&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[ldb enumerateKeysAndObjectsUsingBlock:^(LevelDBKey *key, id value, BOOL *stop) {&#xA;    // This step is necessary since the key could be a string or raw data (use NSDataFromLevelDBKey in that case)&#xA;    NSString *keyString = NSStringFromLevelDBKey(key); // Assumes UTF-8 encoding&#xA;    // Do something clever&#xA;}];&#xA;&#xA;// Enumerate with options&#xA;[ldb enumerateKeysAndObjectsBackward:TRUE&#xA;                              lazily:TRUE       // Block below will have a block(void) instead of id argument for value&#xA;                       startingAtKey:someKey    // Start iteration there (NSString or NSData)&#xA;                 filteredByPredicate:predicate  // Only iterate over values matching NSPredicate&#xA;                           andPrefix:prefix     // Only iterate over keys prefixed with something &#xA;                          usingBlock:^(LevelDBKey *key, void(^valueGetter)(void), BOOL *stop) {&#xA;                             &#xA;    NSString *keyString = NSStringFromLevelDBKey(key);&#xA;    &#xA;    // If we had wanted the value directly instead of a valueGetter block, we would&#39;ve set the &#xA;    // above &#39;lazily&#39; argument to FALSE&#xA;    id value = valueGetter();&#xA;}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More iteration methods are available, just have a look at the &lt;a href=&#34;https://github.com/matehat/Objective-LevelDB/raw/master/Classes/LevelDB.h&#34;&gt;header section&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Snapshots, NSDictionary-like API (immutable)&lt;/h5&gt; &#xA;&lt;p&gt;A snapshot is a readonly interface to the database, permanently reflecting the state of the database when it was created, even if the database changes afterwards.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;LDBSnapshot *snap = [ldb newSnapshot]; // You get ownership of this variable, so in non-ARC projects,&#xA;                                       // you&#39;ll need to release/autorelease it eventually&#xA;[ldb removeObjectForKey:@&#34;string_test&#34;];&#xA;&#xA;// The result of these calls will reflect the state of ldb when the snapshot was taken&#xA;NSLog(@&#34;String Value: %@&#34;, [snap objectForKey:@&#34;string_test&#34;]);&#xA;NSLog(@&#34;Dictionary Value: %@&#34;, [ldb objectForKey:@&#34;dict_test&#34;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All available methods can be found in its &lt;a href=&#34;https://github.com/matehat/Objective-LevelDB/raw/master/Classes/LDBSnapshot.h&#34;&gt;header file&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Write batches, atomic sets of updates&lt;/h5&gt; &#xA;&lt;p&gt;Write batches are a mutable proxy to a &lt;code&gt;LevelDB&lt;/code&gt; database, accumulating updates without applying them, until you do using &lt;code&gt;-[LDBWritebatch apply]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;LDBWritebatch *wb = [ldb newWritebatch];&#xA;[wb setObject:@{ @&#34;foo&#34; : @&#34;bar&#34; } forKey: @&#34;another_test&#34;];&#xA;[wb removeObjectForKey:@&#34;dict_test&#34;];&#xA;&#xA;// Those changes aren&#39;t yet applied to ldb&#xA;// To apply them in batch, &#xA;[wb apply];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All available methods can be found in its &lt;a href=&#34;https://github.com/matehat/Objective-LevelDB/raw/master/Classes/LDBWriteBatch.h&#34;&gt;header file&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;LevelDB options&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// The following values are the default&#xA;LevelDBOptions options = [LevelDB makeOptions];&#xA;options.createIfMissing = true;&#xA;options.errorIfExists   = false;&#xA;options.paranoidCheck   = false;&#xA;options.compression     = true;&#xA;options.filterPolicy    = 0;      // Size in bits per key, allocated for a bloom filter, used in testing presence of key&#xA;options.cacheSize       = 0;      // Size in bytes, allocated for a LRU cache used for speeding up lookups&#xA;&#xA;// Then, you can provide it when initializing a db instance.&#xA;LevelDB *ldb = [LevelDB databaseInLibraryWithName:@&#34;test.ldb&#34; andOptions:options];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Per-request options&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;db.safe = true; // Make sure to data was actually written to disk before returning from write operations.&#xA;[ldb setObject:@&#34;laval&#34; forKey:@&#34;string_test&#34;];&#xA;[ldb setObject:[NSDictionary dictionaryWithObjectsAndKeys:@&#34;val1&#34;, @&#34;key1&#34;, @&#34;val2&#34;, @&#34;key2&#34;, nil] forKey:@&#34;dict_test&#34;];&#xA;db.safe = false; // Switch back to default&#xA;&#xA;db.useCache = false; // Do not use DB cache when reading data (default to true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Concurrency&lt;/h5&gt; &#xA;&lt;p&gt;As &lt;a href=&#34;http://leveldb.googlecode.com/svn/trunk/doc/index.html&#34;&gt;Google&#39;s documentation states&lt;/a&gt;, updates and reads from a leveldb instance do not require external synchronization to be thread-safe. Write batches do, and we&#39;ve taken care of it, by isolating every &lt;code&gt;LDBWritebatch&lt;/code&gt; it inside a serial dispatch queue, and making every request dispatch &lt;em&gt;synchronously&lt;/em&gt; to it. So use it from wherever you want, it&#39;ll just work.&lt;/p&gt; &#xA;&lt;p&gt;However, if you are using something like JSONKit for encoding data to JSON in the database, and you are clever enough to preallocate a &lt;code&gt;JSONDecoder&lt;/code&gt; instance for all data decoding, beware that this particular object is &lt;em&gt;not&lt;/em&gt; thread-safe, and you will need to take care of it manually.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;If you want to run the tests, you will need Xcode 5, as the test suite uses the new XCTest.&lt;/p&gt; &#xA;&lt;p&gt;Clone this repository and, once in it,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./setup-test.sh&#xA;cd Tests &amp;amp;&amp;amp; open Objective-LevelDB.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, all tests were setup to work with the iOS test suite.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Distributed under the &lt;a href=&#34;https://raw.githubusercontent.com/matehat/Objective-LevelDB/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>