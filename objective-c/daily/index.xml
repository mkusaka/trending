<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-12T01:48:13Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>transistorsoft/react-native-background-geolocation</title>
    <updated>2022-08-12T01:48:13Z</updated>
    <id>tag:github.com,2022-08-12:/transistorsoft/react-native-background-geolocation</id>
    <link href="https://github.com/transistorsoft/react-native-background-geolocation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sophisticated, battery-conscious background-geolocation with motion-detection&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Background Geolocation for React Native · &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/react-native-background-geolocation.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-native-background-geolocation.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.transistorsoft.com&#34;&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/s/nm4s5ltlug63vv8/logo-150-print.png?dl=1&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;em&gt;most&lt;/em&gt; sophisticated background &lt;strong&gt;location-tracking &amp;amp; geofencing&lt;/strong&gt; module with battery-conscious motion-detection intelligence for &lt;strong&gt;iOS&lt;/strong&gt; and &lt;strong&gt;Android&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The plugin&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/wiki/Philosophy-of-Operation&#34;&gt;Philosophy of Operation&lt;/a&gt; is to use &lt;strong&gt;motion-detection&lt;/strong&gt; APIs (using accelerometer, gyroscope and magnetometer) to detect when the device is &lt;em&gt;moving&lt;/em&gt; and &lt;em&gt;stationary&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When the device is detected to be &lt;strong&gt;moving&lt;/strong&gt;, the plugin will &lt;em&gt;automatically&lt;/em&gt; start recording a location according to the configured &lt;code&gt;distanceFilter&lt;/code&gt; (meters).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When the device is detected be &lt;strong&gt;stationary&lt;/strong&gt;, the plugin will automatically turn off location-services to conserve energy.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also available for &lt;a href=&#34;https://github.com/transistorsoft/flutter_background_geolocation&#34;&gt;Flutter&lt;/a&gt;, &lt;a href=&#34;https://github.com/transistorsoft/cordova-background-geolocation-lt&#34;&gt;Cordova&lt;/a&gt;, &lt;a href=&#34;https://github.com/transistorsoft/nativescript-background-geolocation-lt&#34;&gt;NativeScript&lt;/a&gt; and pure native apps.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;a href=&#34;http://www.transistorsoft.com/shop/products/react-native-background-geolocation&#34;&gt;Android module&lt;/a&gt;&lt;/strong&gt; requires &lt;a href=&#34;http://www.transistorsoft.com/shop/products/react-native-background-geolocation&#34;&gt;purchasing a license&lt;/a&gt;. However, it &lt;em&gt;will&lt;/em&gt; work for &lt;strong&gt;DEBUG&lt;/strong&gt; builds. It will &lt;strong&gt;not&lt;/strong&gt; work with &lt;strong&gt;RELEASE&lt;/strong&gt; builds &lt;a href=&#34;http://www.transistorsoft.com/shop/products/react-native-background-geolocation&#34;&gt;without purchasing a license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(2018) This plugin is supported &lt;strong&gt;full-time&lt;/strong&gt; and field-tested &lt;strong&gt;daily&lt;/strong&gt; since 2013.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.transistorsoft.backgroundgeolocation.react&#34;&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/s/80rf906x0fheb26/google-play-icon.png?dl=1&#34; alt=&#34;Google Play&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/s/wa43w1n3xhkjn0i/home-framed-350.png?dl=1&#34; alt=&#34;Home&#34;&gt; &lt;img src=&#34;https://dl.dropboxusercontent.com/s/8oad228siog49kt/settings-framed-350.png?dl=1&#34; alt=&#34;Settings&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;😫 &lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/wiki/Help&#34;&gt;Help!&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;span&gt;📚&lt;/span&gt; &lt;a href=&#34;https://transistorsoft.github.io/react-native-background-geolocation&#34;&gt;API Documentation&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/react-native-background-geolocation/master/#large_blue_diamond-installing-the-plugin&#34;&gt;Installing the Plugin&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/react-native-background-geolocation/master/#large_blue_diamond-setup-guides&#34;&gt;Setup Guides&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/react-native-background-geolocation/master/#large_blue_diamond-configure-your-license&#34;&gt;Configure your License&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/react-native-background-geolocation/master/#large_blue_diamond-using-the-plugin&#34;&gt;Using the plugin&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/react-native-background-geolocation/master/#large_blue_diamond-example&#34;&gt;Example&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/wiki/Debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/react-native-background-geolocation/master/#large_blue_diamond-demo-application&#34;&gt;Demo Application&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/react-native-background-geolocation/master/#large_blue_diamond-simple-testing-server&#34;&gt;Testing Server&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/react-native-background-geolocation/master/help/PRIVACY_POLICY.md&#34;&gt;Privacy Policy&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔷&lt;/span&gt; Installing the Plugin&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; If you have a previous version of &lt;strong&gt;&lt;code&gt;react-native-background-geolocation &amp;lt; 3.2.0&lt;/code&gt;&lt;/strong&gt; installed into &lt;strong&gt;&lt;code&gt;react-native &amp;gt;= 0.60&lt;/code&gt;&lt;/strong&gt;, you should first &lt;code&gt;unlink&lt;/code&gt; your previous version as &lt;code&gt;react-native link&lt;/code&gt; is no longer required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ react-native unlink react-native-background-geolocation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;With &lt;code&gt;yarn&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add react-native-background-geolocation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With &lt;code&gt;npm&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm install react-native-background-geolocation --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔷&lt;/span&gt; Setup Guides&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;react-native &amp;gt;= 0.60&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/react-native-background-geolocation/master/help/INSTALL-IOS-AUTO.md&#34;&gt;Auto-linking Setup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/react-native-background-geolocation/master/help/INSTALL-ANDROID-AUTO.md&#34;&gt;Auto-linking Setup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔷&lt;/span&gt; Configure your license&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Login to Customer Dashboard to generate an application key: &lt;a href=&#34;http://www.transistorsoft.com/shop/customers&#34;&gt;www.transistorsoft.com/shop/customers&lt;/a&gt; &lt;img src=&#34;https://gallery.mailchimp.com/e932ea68a1cb31b9ce2608656/images/b2696718-a77e-4f50-96a8-0b61d8019bac.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add your license-key to &lt;code&gt;android/app/src/main/AndroidManifest.xml&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;&amp;lt;manifest xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#xA;    package=&#34;com.transistorsoft.backgroundgeolocation.react&#34;&amp;gt;&#xA;&#xA;  &amp;lt;application&#xA;    android:name=&#34;.MainApplication&#34;&#xA;    android:allowBackup=&#34;true&#34;&#xA;    android:label=&#34;@string/app_name&#34;&#xA;    android:icon=&#34;@mipmap/ic_launcher&#34;&#xA;    android:theme=&#34;@style/AppTheme&#34;&amp;gt;&#xA;&#xA;    &amp;lt;!-- react-native-background-geolocation licence --&amp;gt;&#xA;+     &amp;lt;meta-data android:name=&#34;com.transistorsoft.locationmanager.license&#34; android:value=&#34;YOUR_LICENCE_KEY_HERE&#34; /&amp;gt;&#xA;    .&#xA;    .&#xA;    .&#xA;  &amp;lt;/application&amp;gt;&#xA;&amp;lt;/manifest&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔷&lt;/span&gt; Using the plugin&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import BackgroundGeolocation from &#34;react-native-background-geolocation&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://facebook.github.io/react-native/blog/2018/05/07/using-typescript-with-react-native&#34;&gt;Typescript&lt;/a&gt; API:&lt;/h3&gt; &#xA;&lt;p&gt;For those using &lt;a href=&#34;https://facebook.github.io/react-native/blog/2018/05/07/using-typescript-with-react-native&#34;&gt;Typescript&lt;/a&gt; (&lt;strong&gt;recommended&lt;/strong&gt;), you can also &lt;code&gt;import&lt;/code&gt; the interfaces:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import BackgroundGeolocation, {&#xA;  State,&#xA;  Config,&#xA;  Location,&#xA;  LocationError,&#xA;  Geofence,&#xA;  GeofenceEvent,&#xA;  GeofencesChangeEvent,&#xA;  HeartbeatEvent,&#xA;  HttpEvent,&#xA;  MotionActivityEvent,&#xA;  MotionChangeEvent,&#xA;  ProviderChangeEvent,&#xA;  ConnectivityChangeEvent&#xA;} from &#34;react-native-background-geolocation&#34;;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://medium.com/@transistorsoft/new-feature-typescript-api-4a160a2c853b&#34;&gt;this blog post&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔷&lt;/span&gt; Example&lt;/h2&gt; &#xA;&lt;p&gt;There are three main steps to using &lt;code&gt;BackgroundGeolocation&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Wire up event-listeners.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.ready(config)&lt;/code&gt; the plugin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.start()&lt;/code&gt; the plugin.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Do not execute &lt;em&gt;any&lt;/em&gt; API method which will require accessing location-services until the &lt;strong&gt;&lt;code&gt;.ready(config)&lt;/code&gt;&lt;/strong&gt; method resolves (eg: &lt;code&gt;#getCurrentPosition&lt;/code&gt;, &lt;code&gt;#watchPosition&lt;/code&gt;, &lt;code&gt;#start&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// NO!  .ready() has not resolved.&#xA;BackgroundGeolocation.getCurrentPosition(options);&#xA;BackgroundGeolocation.start();&#xA;&#xA;BackgroundGeolocation.ready(config).then((state) =&amp;gt; {&#xA;  // YES -- .ready() has now resolved.&#xA;  BackgroundGeolocation.getCurrentPosition(options);&#xA;  BackgroundGeolocation.start();  &#xA;});&#xA;&#xA;// NO!  .ready() has not resolved.&#xA;BackgroundGeolocation.getCurrentPosition(options);&#xA;BackgroundGeolocation.start();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 1. — React &lt;em&gt;Functional Component&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show Source&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#xA;import React from &#39;react&#39;;&#xA;import {&#xA;  Switch,&#xA;  Text,&#xA;  View,&#xA;} from &#39;react-native&#39;;&#xA;&#xA;import BackgroundGeolocation, {&#xA;  Location,&#xA;  Subscription&#xA;} from &#34;react-native-background-geolocation&#34;;&#xA;&#xA;const HelloWorld = () =&amp;gt; {&#xA;  const [enabled, setEnabled] = React.useState(false);&#xA;  const [location, setLocation] = React.useState(&#39;&#39;);&#xA;&#xA;  React.useEffect(() =&amp;gt; {&#xA;    /// 1.  Subscribe to events.&#xA;    const onLocation:Subscription = BackgroundGeolocation.onLocation((location) =&amp;gt; {&#xA;      console.log(&#39;[onLocation]&#39;, location);&#xA;      setLocation(JSON.stringify(location, null, 2));&#xA;    })&#xA;&#xA;    const onMotionChange:Subscription = BackgroundGeolocation.onMotionChange((event) =&amp;gt; {&#xA;      console.log(&#39;[onMotionChange]&#39;, event);&#xA;    });&#xA;&#xA;    const onActivityChange:Subscription = BackgroundGeolocation.onActivityChange((event) =&amp;gt; {&#xA;      console.log(&#39;[onMotionChange]&#39;, event);&#xA;    })&#xA;&#xA;    const onProviderChange:Subscription = BackgroundGeolocation.onProviderChange((event) =&amp;gt; {&#xA;      console.log(&#39;[onProviderChange]&#39;, event);&#xA;    })&#xA;&#xA;    /// 2. ready the plugin.&#xA;    BackgroundGeolocation.ready({&#xA;      // Geolocation Config&#xA;      desiredAccuracy: BackgroundGeolocation.DESIRED_ACCURACY_HIGH,&#xA;      distanceFilter: 10,&#xA;      // Activity Recognition&#xA;      stopTimeout: 5,&#xA;      // Application config&#xA;      debug: true, // &amp;lt;-- enable this hear sounds for background-geolocation life-cycle.&#xA;      logLevel: BackgroundGeolocation.LOG_LEVEL_VERBOSE,&#xA;      stopOnTerminate: false,   // &amp;lt;-- Allow the background-service to continue tracking when user closes the app.&#xA;      startOnBoot: true,        // &amp;lt;-- Auto start tracking when device is powered-up.&#xA;      // HTTP / SQLite config&#xA;      url: &#39;http://yourserver.com/locations&#39;,&#xA;      batchSync: false,       // &amp;lt;-- [Default: false] Set true to sync locations to server in a single HTTP request.&#xA;      autoSync: true,         // &amp;lt;-- [Default: true] Set true to sync each location to server as it arrives.&#xA;      headers: {              // &amp;lt;-- Optional HTTP headers&#xA;        &#34;X-FOO&#34;: &#34;bar&#34;&#xA;      },&#xA;      params: {               // &amp;lt;-- Optional HTTP params&#xA;        &#34;auth_token&#34;: &#34;maybe_your_server_authenticates_via_token_YES?&#34;&#xA;      }&#xA;    }).then((state) =&amp;gt; {&#xA;      setEnabled(state.enabled)&#xA;      console.log(&#34;- BackgroundGeolocation is configured and ready: &#34;, state.enabled);&#xA;    });&#xA;&#xA;    return () =&amp;gt; {&#xA;      // Remove BackgroundGeolocation event-subscribers when the View is removed or refreshed&#xA;      // during development live-reload.  Without this, event-listeners will accumulate with&#xA;      // each refresh during live-reload.&#xA;      onLocation.remove();&#xA;      onMotionChange.remove();&#xA;      onActivityChange.remove();&#xA;      onProviderChange.remove();&#xA;    }&#xA;  }, []);&#xA;&#xA;  /// 3. start / stop BackgroundGeolocation&#xA;  React.useEffect(() =&amp;gt; {&#xA;    if (enabled) {&#xA;      BackgroundGeolocation.start();&#xA;    } else {&#xA;      BackgroundGeolocation.stop();&#xA;      setLocation(&#39;&#39;);&#xA;    }&#xA;  }, [enabled]);&#xA;&#xA;  return (&#xA;    &amp;lt;View style={{alignItems:&#39;center&#39;}}&amp;gt;&#xA;      &amp;lt;Text&amp;gt;Click to enable BackgroundGeolocation&amp;lt;/Text&amp;gt;&#xA;      &amp;lt;Switch value={enabled} onValueChange={setEnabled} /&amp;gt;&#xA;      &amp;lt;Text style={{fontFamily:&#39;monospace&#39;, fontSize:12}}&amp;gt;{location}&amp;lt;/Text&amp;gt;&#xA;    &amp;lt;/View&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;export default HelloWorld;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Example 2. — React &lt;em&gt;Class Component&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show Source&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;;&#xA;import {&#xA;  Switch,&#xA;  Text,&#xA;  View,&#xA;} from &#39;react-native&#39;;&#xA;&#xA;import BackgroundGeolocation, {&#xA;  Location,&#xA;  Subscription&#xA;} from &#34;react-native-background-geolocation&#34;;&#xA;&#xA;export default class HelloWorld extends React.Component {&#xA;  subscriptions:Subscription[] = [];&#xA;  state:any = {};&#xA;  constructor(props:any) {&#xA;    super(props);&#xA;    this.state = {&#xA;      enabled: false,&#xA;      location: &#39;&#39;&#xA;    }&#xA;  }&#xA;&#xA;  componentDidMount() {&#xA;    /// 1.  Subscribe to BackgroundGeolocation events.&#xA;    this.subscriptions.push(BackgroundGeolocation.onLocation((location) =&amp;gt; {&#xA;      console.log(&#39;[onLocation]&#39;, location);&#xA;      this.setState({location: JSON.stringify(location, null, 2)})&#xA;    }, (error) =&amp;gt; {&#xA;      console.log(&#39;[onLocation] ERROR:&#39;, error);&#xA;    }))&#xA;&#xA;    this.subscriptions.push(BackgroundGeolocation.onMotionChange((event) =&amp;gt; {&#xA;      console.log(&#39;[onMotionChange]&#39;, event);&#xA;    }))&#xA;&#xA;    this.subscriptions.push(BackgroundGeolocation.onActivityChange((event) =&amp;gt; {&#xA;      console.log(&#39;[onActivityChange]&#39;, event);&#xA;    }))&#xA;&#xA;    this.subscriptions.push(BackgroundGeolocation.onProviderChange((event) =&amp;gt; {&#xA;      console.log(&#39;[onProviderChange]&#39;, event);&#xA;    }))&#xA;&#xA;    /// 2. ready the plugin.&#xA;    BackgroundGeolocation.ready({&#xA;      // Geolocation Config&#xA;      desiredAccuracy: BackgroundGeolocation.DESIRED_ACCURACY_HIGH,&#xA;      distanceFilter: 10,&#xA;      // Activity Recognition&#xA;      stopTimeout: 5,&#xA;      // Application config&#xA;      debug: true, // &amp;lt;-- enable this hear sounds for background-geolocation life-cycle.&#xA;      logLevel: BackgroundGeolocation.LOG_LEVEL_VERBOSE,&#xA;      stopOnTerminate: false,   // &amp;lt;-- Allow the background-service to continue tracking when user closes the app.&#xA;      startOnBoot: true,        // &amp;lt;-- Auto start tracking when device is powered-up.&#xA;      // HTTP / SQLite config&#xA;      url: &#39;http://yourserver.com/locations&#39;,&#xA;      batchSync: false,       // &amp;lt;-- [Default: false] Set true to sync locations to server in a single HTTP request.&#xA;      autoSync: true,         // &amp;lt;-- [Default: true] Set true to sync each location to server as it arrives.&#xA;      headers: {              // &amp;lt;-- Optional HTTP headers&#xA;        &#34;X-FOO&#34;: &#34;bar&#34;&#xA;      },&#xA;      params: {               // &amp;lt;-- Optional HTTP params&#xA;        &#34;auth_token&#34;: &#34;maybe_your_server_authenticates_via_token_YES?&#34;&#xA;      }&#xA;    }).then((state) =&amp;gt; {&#xA;      this.setState({enabled: state.enabled});&#xA;      console.log(&#34;- BackgroundGeolocation is configured and ready: &#34;, state.enabled);&#xA;    })&#xA;  }&#xA;&#xA;  /// When view is destroyed (or refreshed during development live-reload),&#xA;  /// remove BackgroundGeolocation event subscriptions.&#xA;  componentWillUnmount() {&#xA;    this.subscriptions.forEach((subscription) =&amp;gt; subscription.remove());&#xA;  }&#xA;&#xA;  onToggleEnabled(value:boolean) {&#xA;    console.log(&#39;[onToggleEnabled]&#39;, value);&#xA;    this.setState({enabled: value})&#xA;    if (value) {&#xA;      BackgroundGeolocation.start();&#xA;    } else {&#xA;      this.setState({location: &#39;&#39;});&#xA;      BackgroundGeolocation.stop();&#xA;    }&#xA;  }&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;View style={{alignItems:&#39;center&#39;}}&amp;gt;&#xA;        &amp;lt;Text&amp;gt;Click to enable BackgroundGeolocation&amp;lt;/Text&amp;gt;&#xA;        &amp;lt;Switch value={this.state.enabled} onValueChange={this.onToggleEnabled.bind(this)} /&amp;gt;&#xA;        &amp;lt;Text style={{fontFamily:&#39;monospace&#39;, fontSize:12}}&amp;gt;{this.state.location}&amp;lt;/Text&amp;gt;&#xA;      &amp;lt;/View&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Promise API&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;BackgroundGeolocation&lt;/code&gt; Javascript API supports &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promises&lt;/a&gt; for &lt;em&gt;nearly&lt;/em&gt; every method (the exceptions are &lt;strong&gt;&lt;code&gt;#watchPosition&lt;/code&gt;&lt;/strong&gt; and adding event-listeners via &lt;strong&gt;&lt;code&gt;#onXXX&lt;/code&gt;&lt;/strong&gt; method (eg: &lt;code&gt;onLocation&lt;/code&gt;). For more information, see the &lt;a href=&#34;https://transistorsoft.github.io/react-native-background-geolocation-android&#34;&gt;API Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;BackgroundGeolocation.ready({&#xA;  desiredAccuracy: BackgroundGeolocation.DESIRED_ACCURACY_HIGH, &#xA;  distanceFilter: 50&#xA;}).then(state =&amp;gt; {&#xA;  console.log(&#39;- BackgroundGeolocation is ready: &#39;, state);&#xA;}).catch(error =&amp;gt; {&#xA;  console.warn(&#39;- BackgroundGeolocation error: &#39;, error);&#xA;});&#xA;&#xA;// Or use await in an async function&#xA;try {&#xA;  const state = await BackgroundGeolocation.ready({&#xA;    desiredAccuracy: BackgroundGeolocation.DESIRED_ACCURACY_HIGH, &#xA;    distanceFilter: 50&#xA;  })&#xA;  console.log(&#39;- BackgroundGeolocation is ready: &#39;, state);&#xA;} catch (error) {&#xA;  console.warn(&#39;- BackgroundGeolocation error: &#39;, error);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔷&lt;/span&gt; &lt;a href=&#34;https://github.com/transistorsoft/rn-background-geolocation-demo&#34;&gt;Demo Application&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;A fully-featured &lt;a href=&#34;https://github.com/transistorsoft/rn-background-geolocation-demo&#34;&gt;Demo App&lt;/a&gt; is available in its own public repo. After first cloning that repo, follow the installation instructions in the &lt;strong&gt;README&lt;/strong&gt; there. This demo-app includes a settings-screen allowing you to quickly experiment with all the different settings available for each platform.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/s/wa43w1n3xhkjn0i/home-framed-350.png?dl=1&#34; alt=&#34;Home&#34;&gt; &lt;img src=&#34;https://dl.dropboxusercontent.com/s/8oad228siog49kt/settings-framed-350.png?dl=1&#34; alt=&#34;Settings&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔷&lt;/span&gt; &lt;a href=&#34;https://github.com/transistorsoft/background-geolocation-console&#34;&gt;Simple Testing Server&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;A simple Node-based &lt;a href=&#34;https://github.com/transistorsoft/background-geolocation-console&#34;&gt;web-application&lt;/a&gt; with SQLite database is available for field-testing and performance analysis. If you&#39;re familiar with Node, you can have this server up-and-running in about &lt;strong&gt;one minute&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/s/px5rzz7wybkv8fs/background-geolocation-console-map.png?dl=1&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/s/tiy5b2oivt0np2y/background-geolocation-console-grid.png?dl=1&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2018 Chris Scott, Transistor Software&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CoderMJLee/MJRefresh</title>
    <updated>2022-08-12T01:48:13Z</updated>
    <id>tag:github.com,2022-08-12:/CoderMJLee/MJRefresh</id>
    <link href="https://github.com/CoderMJLee/MJRefresh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An easy way to use pull-to-refresh.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;MJRefresh&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-supported-4BC51D.svg?style=flat&#34; alt=&#34;SPM supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/MJRefresh&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/MJRefresh.svg?sanitize=true&#34; alt=&#34;podversion&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An easy way to use pull-to-refresh&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CoderMJLee/MJRefresh/releases&#34;&gt;📜✍🏻&lt;strong&gt;Release Notes&lt;/strong&gt;: more details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New Features &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#dynamic_i18n_switching&#34;&gt;Dynamic i18n Switching&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#spm_supported&#34;&gt;SPM Supported&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#swift_chaining_grammar_supported&#34;&gt;Swift Chaining Grammar Supported&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting Started &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#Support_what_kinds_of_controls_to_refresh&#34;&gt;Features【Support what kinds of controls to refresh】&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#How_to_use_MJRefresh&#34;&gt;Installation【How to use MJRefresh】&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#More_than_hundreds_of_Apps_are_using_MJRefresh&#34;&gt;Who&#39;s using【More than hundreds of Apps are using MJRefresh】&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_Class_Structure_Chart_of_MJRefresh&#34;&gt;Classes【The Class Structure Chart of MJRefresh】&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Comment API &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#MJRefreshComponent.h&#34;&gt;MJRefreshComponent.h&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#MJRefreshHeader.h&#34;&gt;MJRefreshHeader.h&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#MJRefreshFooter.h&#34;&gt;MJRefreshFooter.h&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#MJRefreshAutoFooter.h&#34;&gt;MJRefreshAutoFooter.h&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#MJRefreshTrailer.h&#34;&gt;MJRefreshTrailer.h&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Examples &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#Reference&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_drop-down_refresh_01-Default&#34;&gt;The drop-down refresh 01-Default&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_drop-down_refresh_02-Animation_image&#34;&gt;The drop-down refresh 02-Animation image&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_drop-down_refresh_03-Hide_the_time&#34;&gt;The drop-down refresh 03-Hide the time&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_drop-down_refresh_04-Hide_status_and_time&#34;&gt;The drop-down refresh 04-Hide status and time&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_drop-down_refresh_05-DIY_title&#34;&gt;The drop-down refresh 05-DIY title&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_drop-down_refresh_06-DIY_the_control_of_refresh&#34;&gt;The drop-down refresh 06-DIY the control of refresh&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_pull_to_refresh_01-Default&#34;&gt;The pull to refresh 01-Default&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_pull_to_refresh_02-Animation_image&#34;&gt;The pull to refresh 02-Animation image&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_pull_to_refresh_03-Hide_the_title_of_refresh_status&#34;&gt;The pull to refresh 03-Hide the title of refresh status&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_pull_to_refresh_04-All_loaded&#34;&gt;The pull to refresh 04-All loaded&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_pull_to_refresh_05-DIY_title&#34;&gt;The pull to refresh 05-DIY title&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_pull_to_refresh_06-Hidden_After_loaded&#34;&gt;The pull to refresh 06-Hidden After loaded&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_pull_to_refresh_07-Automatic_back_of_the_pull01&#34;&gt;The pull to refresh 07-Automatic back of the pull01&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_pull_to_refresh_08-Automatic_back_of_the_pull02&#34;&gt;The pull to refresh 08-Automatic back of the pull02&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_pull_to_refresh_09-DIY_the_control_of_refresh(Automatic_refresh)&#34;&gt;The pull to refresh 09-DIY the control of refresh(Automatic refresh)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#The_pull_to_refresh_10-DIY_the_control_of_refresh(Automatic_back)&#34;&gt;The pull to refresh 10-DIY the control of refresh(Automatic back)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#UICollectionView01-The_pull_and_drop-down_refresh&#34;&gt;UICollectionView01-The pull and drop-down refresh&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#UICollectionView02-The_trailer_refresh&#34;&gt;UICollectionView02-The trailer refresh&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#WKWebView01-The_drop-down_refresh&#34;&gt;WKWebView01-The drop-down refresh&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/#Hope&#34;&gt;Hope&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;New Features&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;dynamic_i18n_switching&#34;&gt;&lt;/a&gt;Dynamic i18n Switching&lt;/h3&gt; &#xA;&lt;p&gt;Now &lt;code&gt;MJRefresh components&lt;/code&gt; will be rerendered automatically with &lt;code&gt;MJRefreshConfig.default.language&lt;/code&gt; setting.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;Go &lt;code&gt;i18n&lt;/code&gt; folder and see lots of cases. Simulator example is behind &lt;code&gt;i18n tab&lt;/code&gt; in right-top corner.&lt;/p&gt; &#xA;&lt;h4&gt;Setting language&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;MJRefreshConfig.default.language = &#34;zh-hans&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Setting i18n file name&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;MJRefreshConfig.default.i18nFilename = &#34;i18n File Name(not include type&amp;lt;.strings&amp;gt;)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Setting i18n language bundle&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;MJRefreshConfig.default.i18nBundle = &amp;lt;i18n Bundle&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adopting the feature in your DIY component&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Just override &lt;code&gt;i18nDidChange&lt;/code&gt; function and reset texts.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// must use this localization methods&#xA;Bundle.mj_localizedString(forKey: &#34;&#34;)&#xA;// or&#xA;Bundle.mj_localizedString(forKey: &#34;&#34;, value:&#34;&#34;)&#xA;&#xA;override func i18nDidChange() {&#xA;    // Reset texts function&#xA;    setupTexts()&#xA;    // Make sure to call super after resetting texts. It will call placeSubViews for applying new layout.&#xA;    super.i18nDidChange()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Receiving &lt;code&gt;MJRefreshDidChangeLanguageNotification&lt;/code&gt; notification.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;spm_supported&#34;&gt;&lt;/a&gt;SPM Supported&lt;/h3&gt; &#xA;&lt;p&gt;Released from &lt;a href=&#34;https://github.com/CoderMJLee/MJRefresh/releases/tag/3.7.1&#34;&gt;&lt;code&gt;3.7.1&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;swift_chaining_grammar_supported&#34;&gt;&lt;/a&gt;Swift Chaining Grammar Supported&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  // Example as MJRefreshNormalHeader&#xA;  func addRefreshHeader() {&#xA;      MJRefreshNormalHeader { [weak self] in&#xA;  &#x9;  // load some data&#xA;      }.autoChangeTransparency(true)&#xA;      .link(to: tableView)&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;Support_what_kinds_of_controls_to_refresh&#34;&gt;&lt;/a&gt;Support what kinds of controls to refresh&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;UIScrollView&lt;/code&gt;、&lt;code&gt;UITableView&lt;/code&gt;、&lt;code&gt;UICollectionView&lt;/code&gt;、&lt;code&gt;WKWebView&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;How_to_use_MJRefresh&#34;&gt;&lt;/a&gt;How to use MJRefresh&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation with CocoaPods：&lt;code&gt;pod &#39;MJRefresh&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Installation with &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;：&lt;code&gt;github &#34;CoderMJLee/MJRefresh&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Manual import： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Drag All files in the &lt;code&gt;MJRefresh&lt;/code&gt; folder to project&lt;/li&gt; &#xA;   &lt;li&gt;Import the main file：&lt;code&gt;#import &#34;MJRefresh.h&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;Base                        Custom&#xA;MJRefresh.bundle            MJRefresh.h&#xA;MJRefreshConst.h            MJRefreshConst.m&#xA;UIScrollView+MJExtension.h  UIScrollView+MJExtension.m&#xA;UIScrollView+MJRefresh.h    UIScrollView+MJRefresh.m&#xA;UIView+MJExtension.h        UIView+MJExtension.m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;More_than_hundreds_of_Apps_are_using_MJRefresh&#34;&gt;&lt;/a&gt;More than hundreds of Apps are using MJRefresh&lt;/h2&gt; &#xA;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141212365041650.png&#34; width=&#34;200&#34; height=&#34;300&#34;&gt; * More information of App can focus on：[M了个J-博客园](http://www.cnblogs.com/mjios/p/4409853.html) &#xA;&lt;h2&gt;&lt;a id=&#34;The_Class_Structure_Chart_of_MJRefresh&#34;&gt;&lt;/a&gt;The Class Structure Chart of MJRefresh&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/132232456139177.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;The class of red text&lt;/code&gt; in the chart：You can use them directly&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The drop-down refresh control types &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Normal：&lt;code&gt;MJRefreshNormalHeader&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Gif：&lt;code&gt;MJRefreshGifHeader&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;The pull to refresh control types &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Auto refresh &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Normal：&lt;code&gt;MJRefreshAutoNormalFooter&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;Gif：&lt;code&gt;MJRefreshAutoGifFooter&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Auto Back &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Normal：&lt;code&gt;MJRefreshBackNormalFooter&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;Gif：&lt;code&gt;MJRefreshBackGifFooter&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;The class of non-red text&lt;/code&gt; in the chart：For inheritance，to use DIY the control of refresh&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;About how to DIY the control of refresh，You can refer the Class in below Chart&lt;br&gt;&lt;/p&gt; &lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141358159107893.png&#34; width=&#34;30%&#34; height=&#34;30%&#34;&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;MJRefreshComponent.h&#34;&gt;&lt;/a&gt;MJRefreshComponent.h&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;/** The Base Class of refresh control */&#xA;@interface MJRefreshComponent : UIView&#xA;#pragma mark -  Control the state of Refresh &#xA;&#xA;/** BeginRefreshing */&#xA;- (void)beginRefreshing;&#xA;/** EndRefreshing */&#xA;- (void)endRefreshing; &#xA;/** IsRefreshing */&#xA;- (BOOL)isRefreshing;&#xA;&#xA;#pragma mark - Other&#xA;/** According to the drag ratio to change alpha automatically */&#xA;@property (assign, nonatomic, getter=isAutomaticallyChangeAlpha) BOOL automaticallyChangeAlpha;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;MJRefreshHeader.h&#34;&gt;&lt;/a&gt;MJRefreshHeader.h&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface MJRefreshHeader : MJRefreshComponent&#xA;/** Creat header */&#xA;+ (instancetype)headerWithRefreshingBlock:(MJRefreshComponentRefreshingBlock)refreshingBlock;&#xA;/** Creat header */&#xA;+ (instancetype)headerWithRefreshingTarget:(id)target refreshingAction:(SEL)action;&#xA;&#xA;/** This key is used to storage the time that the last time of drown-down successfully */&#xA;@property (copy, nonatomic) NSString *lastUpdatedTimeKey;&#xA;/** The last time of drown-down successfully */&#xA;@property (strong, nonatomic, readonly) NSDate *lastUpdatedTime;&#xA;&#xA;/** Ignored scrollView contentInset top */&#xA;@property (assign, nonatomic) CGFloat ignoredScrollViewContentInsetTop;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;MJRefreshFooter.h&#34;&gt;&lt;/a&gt;MJRefreshFooter.h&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface MJRefreshFooter : MJRefreshComponent&#xA;/** Creat footer */&#xA;+ (instancetype)footerWithRefreshingBlock:(MJRefreshComponentRefreshingBlock)refreshingBlock;&#xA;/** Creat footer */&#xA;+ (instancetype)footerWithRefreshingTarget:(id)target refreshingAction:(SEL)action;&#xA;&#xA;/** NoticeNoMoreData */&#xA;- (void)noticeNoMoreData;&#xA;/** ResetNoMoreData（Clear the status of NoMoreData ） */&#xA;- (void)resetNoMoreData;&#xA;&#xA;/** Ignored scrollView contentInset bottom */&#xA;@property (assign, nonatomic) CGFloat ignoredScrollViewContentInsetBottom;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;MJRefreshAutoFooter.h&#34;&gt;&lt;/a&gt;MJRefreshAutoFooter.h&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface MJRefreshAutoFooter : MJRefreshFooter&#xA;/** Is Automatically Refresh(Default is Yes) */&#xA;@property (assign, nonatomic, getter=isAutomaticallyRefresh) BOOL automaticallyRefresh;&#xA;&#xA;/** When there is much at the bottom of the control is automatically refresh(Default is 1.0，Is at the bottom of the control appears in full, will refresh automatically) */&#xA;@property (assign, nonatomic) CGFloat triggerAutomaticallyRefreshPercent;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;MJRefreshTrailer.h&#34;&gt;&lt;/a&gt; MJRefreshTrailer.h&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface MJRefreshTrailer : MJRefreshComponent&#xA;&#xA;/** 创建trailer */&#xA;+ (instancetype)trailerWithRefreshingBlock:(MJRefreshComponentAction)refreshingBlock;&#xA;/** 创建trailer */&#xA;+ (instancetype)trailerWithRefreshingTarget:(id)target refreshingAction:(SEL)action;&#xA;&#xA;/** 忽略多少scrollView的contentInset的right */&#xA;@property (assign, nonatomic) CGFloat ignoredScrollViewContentInsetRight;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;Reference&#34;&gt;&lt;/a&gt;Reference&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;* Due to there are more functions of this framework，Don&#39;t write specific text describe its usage&#xA;* You can directly reference examples MJTableViewController、MJCollectionViewController、MJWebViewController，More intuitive and fast.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141345470048120.png&#34; width=&#34;30%&#34; height=&#34;30%&#34;&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_drop-down_refresh_01-Default&#34;&gt;&lt;/a&gt;The drop-down refresh 01-Default&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;self.tableView.mj_header = [MJRefreshNormalHeader headerWithRefreshingBlock:^{&#xA;   //Call this Block When enter the refresh status automatically &#xA;}];&#xA;或&#xA;// Set the callback（Once you enter the refresh status，then call the action of target，that is call [self loadNewData]）&#xA;self.tableView.mj_header = [MJRefreshNormalHeader headerWithRefreshingTarget:self refreshingAction:@selector(loadNewData)];&#xA;&#xA;// Enter the refresh status immediately&#xA;[self.tableView.mj_header beginRefreshing];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141204343486151.gif&#34; alt=&#34;(下拉刷新01-普通)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_drop-down_refresh_02-Animation_image&#34;&gt;&lt;/a&gt;The drop-down refresh 02-Animation image&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Set the callback（一Once you enter the refresh status，then call the action of target，that is call [self loadNewData]）&#xA;MJRefreshGifHeader *header = [MJRefreshGifHeader headerWithRefreshingTarget:self refreshingAction:@selector(loadNewData)];&#xA;// Set the ordinary state of animated images&#xA;[header setImages:idleImages forState:MJRefreshStateIdle];&#xA;// Set the pulling state of animated images（Enter the status of refreshing as soon as loosen）&#xA;[header setImages:pullingImages forState:MJRefreshStatePulling];&#xA;// Set the refreshing state of animated images&#xA;[header setImages:refreshingImages forState:MJRefreshStateRefreshing];&#xA;// Set header&#xA;self.tableView.mj_header = header;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141204402238389.gif&#34; alt=&#34;(下拉刷新02-动画图片)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_drop-down_refresh_03-Hide_the_time&#34;&gt;&lt;/a&gt;The drop-down refresh 03-Hide the time&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Hide the time&#xA;header.lastUpdatedTimeLabel.hidden = YES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141204456132944.gif&#34; alt=&#34;(下拉刷新03-隐藏时间)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_drop-down_refresh_04-Hide_status_and_time&#34;&gt;&lt;/a&gt;The drop-down refresh 04-Hide status and time&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Hide the time&#xA;header.lastUpdatedTimeLabel.hidden = YES;&#xA;&#xA;// Hide the status&#xA;header.stateLabel.hidden = YES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141204508639539.gif&#34; alt=&#34;(下拉刷新04-隐藏状态和时间0)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_drop-down_refresh_05-DIY_title&#34;&gt;&lt;/a&gt;The drop-down refresh 05-DIY title&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Set title&#xA;[header setTitle:@&#34;Pull down to refresh&#34; forState:MJRefreshStateIdle];&#xA;[header setTitle:@&#34;Release to refresh&#34; forState:MJRefreshStatePulling];&#xA;[header setTitle:@&#34;Loading ...&#34; forState:MJRefreshStateRefreshing];&#xA;&#xA;// Set font&#xA;header.stateLabel.font = [UIFont systemFontOfSize:15];&#xA;header.lastUpdatedTimeLabel.font = [UIFont systemFontOfSize:14];&#xA;&#xA;// Set textColor&#xA;header.stateLabel.textColor = [UIColor redColor];&#xA;header.lastUpdatedTimeLabel.textColor = [UIColor blueColor];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141204563633593.gif&#34; alt=&#34;(下拉刷新05-自定义文字)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_drop-down_refresh_06-DIY_the_control_of_refresh&#34;&gt;&lt;/a&gt;The drop-down refresh 06-DIY the control of refresh&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;self.tableView.mj_header = [MJDIYHeader headerWithRefreshingTarget:self refreshingAction:@selector(loadNewData)];&#xA;// Implementation reference to MJDIYHeader.h和MJDIYHeader.m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141205019261159.gif&#34; alt=&#34;(下拉刷新06-自定义刷新控件)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_pull_to_refresh_01-Default&#34;&gt;&lt;/a&gt;The pull to refresh 01-Default&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;self.tableView.mj_footer = [MJRefreshAutoNormalFooter footerWithRefreshingBlock:^{&#xA;    //Call this Block When enter the refresh status automatically&#xA;}];&#xA;或&#xA;// Set the callback（Once you enter the refresh status，then call the action of target，that is call [self loadMoreData]）&#xA;self.tableView.mj_footer = [MJRefreshAutoNormalFooter footerWithRefreshingTarget:self refreshingAction:@selector(loadMoreData)];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141205090047696.gif&#34; alt=&#34;(上拉刷新01-默认)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_pull_to_refresh_02-Animation_image&#34;&gt;&lt;/a&gt;The pull to refresh 02-Animation image&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Set the callback（Once you enter the refresh status，then call the action of target，that is call [self loadMoreData]）&#xA;MJRefreshAutoGifFooter *footer = [MJRefreshAutoGifFooter footerWithRefreshingTarget:self refreshingAction:@selector(loadMoreData)];&#xA;&#xA;// Set the refresh image&#xA;[footer setImages:refreshingImages forState:MJRefreshStateRefreshing];&#xA;&#xA;// Set footer&#xA;self.tableView.mj_footer = footer;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141205141445793.gif&#34; alt=&#34;(上拉刷新02-动画图片)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_pull_to_refresh_03-Hide_the_title_of_refresh_status&#34;&gt;&lt;/a&gt;The pull to refresh 03-Hide the title of refresh status&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Hide the title of refresh status&#xA;footer.refreshingTitleHidden = YES;&#xA;// If does have not above method，then use footer.stateLabel.hidden = YES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141205200985774.gif&#34; alt=&#34;(上拉刷新03-隐藏刷新状态的文字)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_pull_to_refresh_04-All_loaded&#34;&gt;&lt;/a&gt;The pull to refresh 04-All loaded&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//Become the status of NoMoreData&#xA;[footer noticeNoMoreData];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141205248634686.gif&#34; alt=&#34;(上拉刷新04-全部加载完毕)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_pull_to_refresh_05-DIY_title&#34;&gt;&lt;/a&gt;The pull to refresh 05-DIY title&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Set title&#xA;[footer setTitle:@&#34;Click or drag up to refresh&#34; forState:MJRefreshStateIdle];&#xA;[footer setTitle:@&#34;Loading more ...&#34; forState:MJRefreshStateRefreshing];&#xA;[footer setTitle:@&#34;No more data&#34; forState:MJRefreshStateNoMoreData];&#xA;&#xA;// Set font&#xA;footer.stateLabel.font = [UIFont systemFontOfSize:17];&#xA;&#xA;// Set textColor&#xA;footer.stateLabel.textColor = [UIColor blueColor];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141205295511153.gif&#34; alt=&#34;(上拉刷新05-自定义文字)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_pull_to_refresh_06-Hidden_After_loaded&#34;&gt;&lt;/a&gt;The pull to refresh 06-Hidden After loaded&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//Hidden current control of the pull to refresh&#xA;self.tableView.mj_footer.hidden = YES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141205343481821.gif&#34; alt=&#34;(上拉刷新06-加载后隐藏)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_pull_to_refresh_07-Automatic_back_of_the_pull01&#34;&gt;&lt;/a&gt;The pull to refresh 07-Automatic back of the pull01&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;self.tableView.mj_footer = [MJRefreshBackNormalFooter footerWithRefreshingTarget:self refreshingAction:@selector(loadMoreData)];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141205392239231.gif&#34; alt=&#34;(上拉刷新07-自动回弹的上拉01)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_pull_to_refresh_08-Automatic_back_of_the_pull02&#34;&gt;&lt;/a&gt;The pull to refresh 08-Automatic back of the pull02&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;MJRefreshBackGifFooter *footer = [MJRefreshBackGifFooter footerWithRefreshingTarget:self refreshingAction:@selector(loadMoreData)];&#xA;&#xA;// Set the normal state of the animated image&#xA;[footer setImages:idleImages forState:MJRefreshStateIdle];&#xA;//  Set the pulling state of animated images（Enter the status of refreshing as soon as loosen）&#xA;[footer setImages:pullingImages forState:MJRefreshStatePulling];&#xA;// Set the refreshing state of animated images&#xA;[footer setImages:refreshingImages forState:MJRefreshStateRefreshing];&#xA;&#xA;// Set footer&#xA;self.tableView.mj_footer = footer;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141205441443628.gif&#34; alt=&#34;(上拉刷新07-自动回弹的上拉02)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_pull_to_refresh_09-DIY_the_control_of_refresh(Automatic_refresh)&#34;&gt;&lt;/a&gt;The pull to refresh 09-DIY the control of refresh(Automatic refresh)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;self.tableView.mj_footer = [MJDIYAutoFooter footerWithRefreshingTarget:self refreshingAction:@selector(loadMoreData)];&#xA;// Implementation reference to MJDIYAutoFooter.h和MJDIYAutoFooter.m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141205500195866.gif&#34; alt=&#34;(上拉刷新09-自定义刷新控件(自动刷新))&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;The_pull_to_refresh_10-DIY_the_control_of_refresh(Automatic_back)&#34;&gt;&lt;/a&gt;The pull to refresh 10-DIY the control of refresh(Automatic back)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;self.tableView.mj_footer = [MJDIYBackFooter footerWithRefreshingTarget:self refreshingAction:@selector(loadMoreData)];&#xA;// Implementation reference to MJDIYBackFooter.h和MJDIYBackFooter.m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141205560666819.gif&#34; alt=&#34;(上拉刷新10-自定义刷新控件(自动回弹))&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;UICollectionView01-The_pull_and_drop-down_refresh&#34;&gt;&lt;/a&gt;UICollectionView01-The pull and drop-down refresh&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// The drop-down refresh&#xA;self.collectionView.mj_header = [MJRefreshNormalHeader headerWithRefreshingBlock:^{&#xA;   //Call this Block When enter the refresh status automatically &#xA;}];&#xA;&#xA;// The pull to refresh&#xA;self.collectionView.mj_footer = [MJRefreshAutoNormalFooter footerWithRefreshingBlock:^{&#xA;   //Call this Block When enter the refresh status automatically&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141206021603758.gif&#34; alt=&#34;(UICollectionView01-上下拉刷新)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;UICollectionView02-The_trailer_refresh&#34;&gt;&lt;/a&gt;UICollectionView02-The trailer refresh&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// The trailer refresh&#xA;self.collectionView.mj_trailer = [MJRefreshNormalTrailer trailerWithRefreshingBlock:^{&#xA;   //Call this Block When enter the refresh status automatically &#xA;}];&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CoderMJLee/MJRefresh/master/Gif/trailer_refresh.gif&#34; alt=&#34;(UICollectionView02-左拉刷新)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;WKWebView01-The_drop-down_refresh&#34;&gt;&lt;/a&gt;WKWebView01-The drop-down refresh&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//Add the control of The drop-down refresh&#xA;self.webView.scrollView.mj_header = [MJRefreshNormalHeader headerWithRefreshingBlock:^{&#xA;   //Call this Block When enter the refresh status automatically&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images0.cnblogs.com/blog2015/497279/201506/141206080514524.gif&#34; alt=&#34;(UICollectionView01-上下拉刷新)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Remind&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ARC&lt;/li&gt; &#xA; &lt;li&gt;iOS&amp;gt;=9.0&lt;/li&gt; &#xA; &lt;li&gt;iPhone \ iPad screen anyway&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;寻求志同道合的小伙伴&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;因本人工作忙，没有太多时间去维护MJRefresh，在此向广大框架使用者说声：非常抱歉！😞&lt;/li&gt; &#xA; &lt;li&gt;现寻求志同道合的小伙伴一起维护此框架，有兴趣的小伙伴可以&lt;a href=&#34;mailto:richermj123go@vip.qq.com&#34;&gt;发邮件&lt;/a&gt;给我，非常感谢😊&lt;/li&gt; &#xA; &lt;li&gt;如果一切OK，我将开放框架维护权限（github、pod等）&lt;/li&gt; &#xA; &lt;li&gt;目前已经找到3位小伙伴(＾－＾)V&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>