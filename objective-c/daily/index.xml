<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-30T01:37:37Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>samuelclay/NewsBlur</title>
    <updated>2022-08-30T01:37:37Z</updated>
    <id>tag:github.com,2022-08-30:/samuelclay/NewsBlur</id>
    <link href="https://github.com/samuelclay/NewsBlur" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NewsBlur is a personal news reader that brings people together to talk about the world. A new sound of an old instrument.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NewsBlur&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NewsBlur is a personal news reader bringing people together to talk about the world. A new sound of an old instrument.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.newsblur.com&#34;&gt;www.newsblur.com&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Created by &lt;a href=&#34;http://www.samuelclay.com&#34;&gt;Samuel Clay&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;http://twitter.com/samuelclay&#34;&gt;@samuelclay&lt;/a&gt; and &lt;a href=&#34;http://twitter.com/newsblur&#34;&gt;@newsblur&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://f-droid.org/repository/browse/?fdid=com.newsblur&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://f-droid.org/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;80&#34;&gt;&lt;/a&gt; &#xA;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.newsblur&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en-play-badge.png&#34; alt=&#34;Get it on Google Play&#34; height=&#34;80&#34;&gt;&lt;/a&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Shows the original site (you have to see it to believe it).&lt;/li&gt; &#xA; &lt;li&gt;Hides stories you don&#39;t want to read based on tags, keywords, authors, etc.&lt;/li&gt; &#xA; &lt;li&gt;Highlights stories you want to read, based on the same criteria.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Technologies&lt;/h2&gt; &#xA;&lt;h3&gt;Server-side&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.python.org&#34;&gt;Python 3.7+&lt;/a&gt;: The language of choice.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.djangoproject.com&#34;&gt;Django&lt;/a&gt;: Web framework written in Python, used to serve all pages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ask.github.com/celery&#34;&gt;Celery&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://www.rabbitmq.com&#34;&gt;RabbitMQ&lt;/a&gt;: Asynchronous queueing server, used to fetch and parse RSS feeds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mongodb.com&#34;&gt;MongoDB&lt;/a&gt;, &lt;a href=&#34;https://pypi.python.org/pypi/pymongo&#34;&gt;Pymongo&lt;/a&gt;, &amp;amp; &lt;a href=&#34;http://www.github.com/hmarr/mongoengine&#34;&gt;Mongoengine&lt;/a&gt;: Non-relational database, used to store stories, read stories, feed/page fetch histories, and proxied sites.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.postgresql.com&#34;&gt;PostgreSQL&lt;/a&gt;: Relational database, used to store feeds, subscriptions, and user accounts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://redis.io&#34;&gt;Redis&lt;/a&gt;: Programmer&#39;s database, used to assemble stories for the river, store story ids, manage feed fetching schedules, and the minuscule bit of caching that NewsBlur uses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://elasticsearch.org&#34;&gt;Elasticsearch&lt;/a&gt;: Search database, use for searching stories. Optional.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Client-side and design&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jquery.com&#34;&gt;jQuery&lt;/a&gt;: Cross-browser compliant JavaScript code. IE works without effort.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://underscorejs.org/&#34;&gt;Underscore.js&lt;/a&gt;: Functional programming for JavaScript. Indispensable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone.js&lt;/a&gt;: Framework for the web app. Also indispensable.&lt;/li&gt; &#xA; &lt;li&gt;Miscellaneous jQuery Plugins: Everything from resizable layouts, to progress bars, sortables, date handling, colors, corners, JSON, animations. &lt;a href=&#34;https://github.com/samuelclay/NewsBlur/tree/master/media/js&#34;&gt;See the complete list&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Docker&#xA;* Docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation Instructions&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repo&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make nb&lt;/code&gt; to build all of the NewsBlur containers. This will set up all necessary databases, front-end django apps, celery tasks, node apps, flask database monitor and metrics, nginx, and a haproxy load balancer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; https://localhost&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: You will be warned that you are using a self signed certificate. In order to get around this warning you must type &#34;thisisunsafe&#34; as per &lt;a href=&#34;https://dblazeski.medium.com/chrome-bypass-net-err-cert-invalid-for-development-daefae43eb12&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using a custom domain&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the custom domain script&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bash ./utils/custom_domain.sh &amp;lt;domain name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This script will do the following:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Change &lt;code&gt;NEWSBLUR_URL&lt;/code&gt; and &lt;code&gt;SESSION_COOKIE_DOMAIN&lt;/code&gt; in &lt;code&gt;newsblur_web/docker_local_settings.py&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Change the domain in &lt;code&gt;config/fixtures/bootstrap.json&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can also change domains: &lt;code&gt;bash ./utils/custom_domain.sh &amp;lt;old domain&amp;gt; &amp;lt;new domain&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re using a custom subdomain, you&#39;ll also want to add it to &lt;code&gt;ALLOWED_SUBDOMAINS&lt;/code&gt; in &lt;code&gt;apps/reader/views.py&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A way to make sure you updated all the correct places:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Go to the website address in your browser&lt;/li&gt; &#xA;   &lt;li&gt;Open developer tools and look at the network tab&lt;/li&gt; &#xA;   &lt;li&gt;Try to login&lt;/li&gt; &#xA;   &lt;li&gt;Look again at the developer tools, there should be a POST call to /login&lt;/li&gt; &#xA;   &lt;li&gt;Observe the Response headers for that call&lt;/li&gt; &#xA;   &lt;li&gt;The value of the &#34;set-cookie&#34; header should contain a &#34;Domain=&#34; string&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;If the string after &lt;code&gt;Domain=&lt;/code&gt; is not the domain you are using to access the website, then your configuration still needs your custom domain.&lt;/p&gt; &lt;p&gt;You can also confirm that there is a domain name mismatch in the database by running &lt;code&gt;make shell&lt;/code&gt; &amp;amp; typing &lt;code&gt;Site.objects.all()[0]&lt;/code&gt; to show the domain that NewsBlur is expecting.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Making docker-compose work with your existing database&lt;/h2&gt; &#xA;&lt;p&gt;To make docker-compose work with your database, upgrade your local database to the docker-compose version and then volumize the database data path by changing the &lt;code&gt;./docker/volumes/&lt;/code&gt; part of the volume directive in the service to point to your local database&#39;s data directory.&lt;/p&gt; &#xA;&lt;p&gt;To make docker-compose work with an older database version, change the image version for the database service in the docker-compose file.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Instructions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Making Changes:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To apply changes to the Python or JavaScript code, use the &lt;code&gt;make&lt;/code&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;To apply changes to the docker-compose.yml file, use the &lt;code&gt;make rebuild&lt;/code&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;To apply changes to the docker/haproxy/haproxy.conf file, node packages, or any new database migrations you will need to use the &lt;code&gt;make nb&lt;/code&gt; command.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Adding Python packages: Currently, the docker-compose.yml file uses the newsblur/newsblur_python3 image. It is built using the Dockerfile found in &lt;code&gt;docker/newsblur_base_image.Dockerfile&lt;/code&gt;. Because of how the docker image is set up, you will need to create your own image and direct your docker-compose.yml file to use it. Please follow the following steps to do so.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Add your new site-packages to config/requirements.txt.&lt;/li&gt; &#xA;   &lt;li&gt;Add the following lines of code to your docker-compose.yml file to replace anywhere where it says &lt;code&gt;image: newsblur/newsblur_python3&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;code&gt; build: context: . dockerfile: docker/newsblur_base_image.Dockerfile &lt;/code&gt; &#xA;  &lt;ol start=&#34;3&#34;&gt; &#xA;   &lt;li&gt;Run the &lt;code&gt;make nb&lt;/code&gt; command to rebuild your docker-compose containers&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Debugging Python&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To debug your code, drop &lt;code&gt;import pdb; pdb.set_trace()&lt;/code&gt; into the Python code where you would like to start debugging and run &lt;code&gt;make&lt;/code&gt; and then &lt;code&gt;make debug&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using Django shell within Docker&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Make sure your docker containers are up and run &lt;code&gt;make shell&lt;/code&gt; to open the Django shell within the newsblur_web container.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running unit and integration tests&lt;/h3&gt; &#xA;&lt;p&gt;NewsBlur comes complete with a test suite that tests the functionality of the rss_feeds, reader, and feed importer. To run the test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;`make test`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a performance test&lt;/h3&gt; &#xA;&lt;p&gt;Performance tests use the locust performance testing tool. To run performance tests via CLI, use &lt;code&gt;make perf-cli users=1 rate=1 host=https://localhost&lt;/code&gt;. Feel free to change the users, rate, and host variables in the command to meet you needs.&lt;/p&gt; &#xA;&lt;p&gt;You can also run locust performance tests using a UI by running &lt;code&gt;make perf-ui&lt;/code&gt; and then navigating to &lt;a href=&#34;http://127.0.0.1:8089&#34;&gt;http://127.0.0.1:8089&lt;/a&gt;. This allows you to chart and export your performance data.&lt;/p&gt; &#xA;&lt;p&gt;To run locust using docker, just run &lt;code&gt;make perf-docker&lt;/code&gt; and navigate to &lt;a href=&#34;http://127.0.0.1:8089&#34;&gt;http://127.0.0.1:8089&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Created by &lt;a href=&#34;http://www.samuelclay.com&#34;&gt;Samuel Clay&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Email address: &lt;a href=&#34;mailto:samuel@newsblur.com&#34;&gt;samuel@newsblur.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/samuelclay&#34;&gt;@samuelclay&lt;/a&gt; on Twitter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;NewsBlur is licensed under the MIT License. (See LICENSE)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>squarefrog/UIDeviceIdentifier</title>
    <updated>2022-08-30T01:37:37Z</updated>
    <id>tag:github.com,2022-08-30:/squarefrog/UIDeviceIdentifier</id>
    <link href="https://github.com/squarefrog/UIDeviceIdentifier" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UIDeviceHardware is a class which allows querying of the current users device, and returns a human formatted string.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;UIDeviceHardware is a class originally created in a &lt;a href=&#34;https://gist.github.com/1323251&#34;&gt;gist&lt;/a&gt; by &lt;a href=&#34;https://github.com/Jaybles&#34;&gt;Jaybles&lt;/a&gt;. It allows querying of the current users device, and returns a human formatted string.&lt;/p&gt; &#xA;&lt;p&gt;It is written as a class method, to allow use without direct instantiation.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;&#xA;// &#34;iPhone 5C (GSM)&#34;&#xA;NSString *platformString = [UIDeviceHardware platformString];&#xA;    &#xA;// &#34;iPhone 5C&#34;&#xA;NSString *simpleString = [UIDeviceHardware platformStringSimple];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This class can be installed with &lt;strong&gt;Swift Package Manager&lt;/strong&gt;, &lt;strong&gt;Cocoapods&lt;/strong&gt;, or by &lt;strong&gt;directly copying the files&lt;/strong&gt; into your source code.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Add the package to your Package.swift file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/squarefrog/UIDeviceIdentifier&#34;, .upToNextMajor(from: &#34;1.7.0&#34;))&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then import as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// ObjC&#xA;@import UIDeviceIdentifier;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Swift&#xA;import UIDeviceIdentifier&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;Add the cocoapod to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;UIDeviceIdentifier&#39;, :git =&amp;gt; &#39;https://github.com/squarefrog/UIDeviceIdentifier.git&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import the file into your Objective-C file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// ObjC&#xA;#import &amp;lt;UIDeviceIdentifier/UIDeviceHardware.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Copying the files&lt;/h3&gt; &#xA;&lt;p&gt;Copy &lt;code&gt;UIDeviceHardware.{h/m}&lt;/code&gt; into your project. Then just import the header:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &#34;UIDeviceHardware.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;UIDeviceHardware is available under the MIT licence. See the LICENCE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>devxoul/UITextView-Placeholder</title>
    <updated>2022-08-30T01:37:37Z</updated>
    <id>tag:github.com,2022-08-30:/devxoul/UITextView-Placeholder</id>
    <link href="https://github.com/devxoul/UITextView-Placeholder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A missing placeholder for UITextView&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UITextView+Placeholder&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/devxoul/UITextView-Placeholder&#34;&gt;&lt;img src=&#34;https://travis-ci.org/devxoul/UITextView-Placeholder.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/?q=name%3AUITextView%2BPlaceholder&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/UITextView+Placeholder.svg?style=flat&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A missing placeholder for UITextView.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;UITextView+Placeholder&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Import Dynamic Framework&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;e.g. If you&#39;re using CocoaPods with &lt;code&gt;use_frameworks!&lt;/code&gt; flag.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@import UITextView_Placeholder;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Import Static Library&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;UITextView+Placeholder/UITextView+Placeholder.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then create &lt;code&gt;UITextView&lt;/code&gt; and set &lt;code&gt;placeholder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Implement Objective-C&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;UITextView *textView = [[UITextView alloc] init];&#xA;textView.placeholder = @&#34;How are you?&#34;;&#xA;textView.placeholderColor = [UIColor lightGrayColor]; // optional&#xA;textView.attributedPlaceholder = ... // NSAttributedString (optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Implement Swift&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let textView = UITextView()&#xA;textView.placeholder = &#34;How are you?&#34;&#xA;textView.placeholderColor = UIColor.lightGray // optional&#xA;textView.attributedPlaceholder = ... // NSAttributedString (optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Congratulations! You&#39;re done. 🎉&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;UITextView+Placeholder is under MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/devxoul/UITextView-Placeholder/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more information.&lt;/p&gt;</summary>
  </entry>
</feed>