<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-15T01:49:09Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>eczarny/spectacle</title>
    <updated>2022-06-15T01:49:09Z</updated>
    <id>tag:github.com,2022-06-15:/eczarny/spectacle</id>
    <link href="https://github.com/eczarny/spectacle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spectacle allows you to organize your windows without using a mouse.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spectacle&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/eczarny/spectacle&#34;&gt;&lt;img src=&#34;https://travis-ci.org/eczarny/spectacle.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Easily organize windows without using a mouse.&lt;/p&gt; &#xA;&lt;h2&gt;Important Note&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;This project is not being actively maintained.&lt;/strong&gt; Unfortunately, after almost a decade of on-and-off development I can no longer dedicate the time needed to be a responsible maintainer of this project. Spectacle will remain available for download but please use at your own risk. The source code will continue to be free and open to anyone, so feel free to make Spectacle your own.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to all the folks that have made Spectacle the first app they install a new Mac!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Spectacle users have recommended &lt;a href=&#34;https://github.com/rxhanson/Rectangle&#34;&gt;Rectangle&lt;/a&gt; as an open source alternative.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;System requirements&lt;/h2&gt; &#xA;&lt;p&gt;Spectacle &lt;a href=&#34;https://s3.amazonaws.com/spectacle/downloads/Spectacle+0.8.6.zip&#34;&gt;0.8.6&lt;/a&gt; is the last version to support Mac OS X 10.7; future releases will only support 10.9 or greater. Folks wishing to stay on 10.7 should download &lt;a href=&#34;https://s3.amazonaws.com/spectacle/downloads/Spectacle+0.8.6.zip&#34;&gt;0.8.6&lt;/a&gt;. Those looking for a version of Spectacle that supports 10.6 can still download &lt;a href=&#34;https://s3.amazonaws.com/spectacle/downloads/Spectacle+0.7.zip&#34;&gt;0.7&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Keyboard Shortcuts&lt;/h2&gt; &#xA;&lt;p&gt;Spectacle makes use of several &lt;a href=&#34;http://support.apple.com/kb/ht1343&#34;&gt;keyboard shortcuts&lt;/a&gt; that trigger specific &lt;em&gt;window actions&lt;/em&gt;. A window action is nothing more than a command that tells Spectacle how to change the size and/or position of a particular window.&lt;/p&gt; &#xA;&lt;p&gt;A keyboard shortcut consists of one or more modifier keys paired with a character key. The common modifier keys Spectacle takes advantage of are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Symbol&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Key&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⌘&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Command Key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⌃&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Control Key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⌥&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Option Key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⇧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Shift Key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The default keyboard shortcuts can be changed at any time. Use new key combinations to trigger window actions, or clear particular keyboard shortcuts to disable window actions entirely.&lt;/p&gt; &#xA;&lt;h3&gt;Basic window actions&lt;/h3&gt; &#xA;&lt;p&gt;To move a window to the center of the screen use the ⌥⌘C keyboard shortcut. Centered windows will &lt;strong&gt;not&lt;/strong&gt; have their size altered. Maximize a window using the ⌥⌘F shortcut.&lt;/p&gt; &#xA;&lt;p&gt;Windows can be moved to a number of predefined regions of the screen:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the left half&lt;/em&gt; — ⌥⌘←&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the right half&lt;/em&gt; — ⌥⌘→&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the top half&lt;/em&gt; — ⌥⌘↑&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the bottom half&lt;/em&gt; — ⌥⌘↓ &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the upper left&lt;/em&gt; — ⌃⌘←&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the lower left&lt;/em&gt; — ⌃⇧⌘←&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the upper right&lt;/em&gt; — ⌃⌘→&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Move to the lower right&lt;/em&gt; — ⌃⇧⌘→&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Windows may also be resized between thirds using any of the shortcuts above. For example, to have a window resized between 1/3 and 2/3 of the left region of the screen simply activate the &lt;em&gt;left half&lt;/em&gt; ⌥⌘← keyboard shortcut more than once. Each time the shortcut is activated Spectacle will move the window between 1/3, 2/3, and back to 1/2 of the left side of the screen. This feature also applies to the upper left, lower left, upper right, and lower right shortcuts.&lt;/p&gt; &#xA;&lt;p&gt;Spectacle can also move windows between horizontal and vertical thirds of the screen. The ⌃⌥→ keyboard shortcut will move a window to the next third of the screen, starting with the horizontal third region on the left of the screen. ⌃⌥← will move a window to the previous third of the screen.&lt;/p&gt; &#xA;&lt;p&gt;Resizing a window is just as easy. To make a window a bit larger use the ⌃⌥⇧→ keyboard shortcut; ⌃⌥⇧← can be used to make a window smaller. Spectacle will always attempt to maintain contact between the edges of a window and the edges of the screen when resizing.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple displays&lt;/h3&gt; &#xA;&lt;p&gt;The ⌃⌥⌘→ keyboard shortcut will move a window to the next available display. ⌃⌥⌘← can be used to move a window to the previous display.&lt;/p&gt; &#xA;&lt;h3&gt;Window action history&lt;/h3&gt; &#xA;&lt;p&gt;Spectacle remembers where every window was prior to executing a window action. To undo a window action use the ⌥⌘Z keyboard shortcut. Use the ⌥⇧⌘Z shortcut to redo the window action once again.&lt;/p&gt; &#xA;&lt;h2&gt;Common Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Spectacle is requesting access to use accessibility features&lt;/h3&gt; &#xA;&lt;p&gt;Apple&#39;s &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Accessibility/Conceptual/AccessibilityMacOSX/OSXAXmodel.html&#34;&gt;OS X Accessibility Protocol&lt;/a&gt; makes Spectacle possible. This protocol allows assistive applications to &lt;em&gt;drive the user interface of another application running in OS X&lt;/em&gt;. In order to do its job Spectacle must be granted access to use these accessibility features. Instructions to do so will be displayed if Spectacle determines it does not have sufficient privileges.&lt;/p&gt; &#xA;&lt;h3&gt;Spectacle does not resize a particular window as expected&lt;/h3&gt; &#xA;&lt;p&gt;OS X allows applications to place constraints on the size of its windows. This allows application developers to design their user interfaces without needing to worry about supporting every possible window dimension. In these cases Spectacle will not be able to resize those windows to fit into the exact dimensions intended by the shortcut used.&lt;/p&gt; &#xA;&lt;p&gt;As an example suppose a display has a 2880x1800 resolution and a window is being resized to fit the left half of the display. If the window has specified a minimum allowable width of 1600 pixels Spectacle will not be able to resize the window to fit the expected 1440 pixels. The constraints placed on windows will always be respected despite leading to potentially unexpected results; in this example Spectacle will resize the window&#39;s width to 1600 pixels.&lt;/p&gt; &#xA;&lt;h3&gt;Spectacle behaves strangely with Terminal windows&lt;/h3&gt; &#xA;&lt;p&gt;Terminal (and other terminal emulation applications like iTerm 2) place constraints on how windows are resized so entire rows and columns are always visible. This behavior works great since it guarantees no rows or columns are truncated. Unfortunately it does mean that Spectacle needs to do some extra work to make these windows fit.&lt;/p&gt; &#xA;&lt;p&gt;To work around the limitations imposed on Terminal windows Spectacle will first try to resize a window to match the desired dimensions. If a window cannot be resized to fit Spectacle will immediately try to make the window a little smaller. This process is repeated until the window can be made to fit with its constraints still in place. The result is a window that is centered within the desired dimensions at the cost of a slightly jittery experience.&lt;/p&gt; &#xA;&lt;h3&gt;Spectacle does not work with all applications&lt;/h3&gt; &#xA;&lt;p&gt;Most applications built with the Cocoa frameworks can be readily manipulated via the &lt;em&gt;OS X Accessibility Protocol&lt;/em&gt;; allowing Spectacle to interact with nearly every window it encounters. Unfortunately this is not always the case. Spectacle will be unable to manipulate the windows of applications that build their user interfaces in unexpected ways.&lt;/p&gt; &#xA;&lt;h2&gt;Building and running&lt;/h2&gt; &#xA;&lt;p&gt;Spectacle uses &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;. Before building Spectacle in Xcode run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ carthage bootstrap --platform Mac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Carthage builds Spectacle&#39;s dependencies open the Xcode project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ open Spectacle.xcodeproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After Xcode finishes loading the workspace press ⌘R to run Spectacle.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2017 Eric Czarny.&lt;/p&gt; &#xA;&lt;p&gt;Spectacle should be accompanied by a LICENSE file containing the license relevant to this distribution.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TimOliver/TOCropViewController</title>
    <updated>2022-06-15T01:49:09Z</updated>
    <id>tag:github.com,2022-06-15:/TimOliver/TOCropViewController</id>
    <link href="https://github.com/TimOliver/TOCropViewController" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A view controller for iOS that allows users to crop portions of UIImage objects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TOCropViewController&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/TimOliver/TOCropViewController/raw/main/Images/screenshot.png&#34; width=&#34;840&#34; style=&#34;margin:0 auto&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TimOliver/TOCropViewController/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/TimOliver/TOCropViewController/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/TOCropViewController&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/TOCropViewController.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/TimOliver/TOCropViewController/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/TOCropViewController&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/TOCropViewController.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;TOCropViewController&lt;/code&gt; is an open-source &lt;code&gt;UIViewController&lt;/code&gt; subclass to crop out sections of &lt;code&gt;UIImage&lt;/code&gt; objects, as well as perform basic rotations. It is excellent for things like editing profile pictures, or sharing parts of a photo online. It has been designed with the iOS Photos app editor in mind, and as such, behaves in a way that should already feel familiar to users of iOS.&lt;/p&gt; &#xA;&lt;p&gt;For Swift developers, &lt;code&gt;CropViewController&lt;/code&gt; is a Swift wrapper that completely encapsulates &lt;code&gt;TOCropViewController&lt;/code&gt; and provides a much more native, Swiftier interface.&lt;/p&gt; &#xA;&lt;h4&gt;Proudly powering apps by&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/TimOliver/TOCropViewController/raw/main/Images/users.png&#34; width=&#34;840&#34; style=&#34;margin:0 auto&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Looking for something more? If &lt;code&gt;TOCropViewController&lt;/code&gt; doesn&#39;t meet your exact requirements, please consider &lt;a href=&#34;https://img.ly/?via=tim&#34;&gt;IMG.LY&lt;/a&gt; with video editing and photo filter capabilities instead! (Disclaimer: Affiliate Link)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Crop images by dragging the edges of a grid overlay.&lt;/li&gt; &#xA; &lt;li&gt;Optionally, crop circular copies of images.&lt;/li&gt; &#xA; &lt;li&gt;Rotate images in 90-degree segments.&lt;/li&gt; &#xA; &lt;li&gt;Clamp the crop box to a specific aspect ratio.&lt;/li&gt; &#xA; &lt;li&gt;A reset button to completely undo all changes.&lt;/li&gt; &#xA; &lt;li&gt;iOS 7/8 translucency to make it easier to view the cropped region.&lt;/li&gt; &#xA; &lt;li&gt;The choice of having the controller return the cropped image to a delegate, or immediately pass it to a &lt;code&gt;UIActivityViewController&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A custom animation and layout when the device is rotated to landscape mode.&lt;/li&gt; &#xA; &lt;li&gt;Custom &#39;opening&#39; and &#39;dismissal&#39; animations.&lt;/li&gt; &#xA; &lt;li&gt;Localized in 28 languages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;iOS 8.0 or above&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;CocoaPods&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;p&gt;Add the following to your Podfile:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;TOCropViewController&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;p&gt;Add the following to your Podfile:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;CropViewController&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Swift Package Manager&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Add the following to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;  // ...&#xA;  .package(url: &#34;https://github.com/TimOliver/TOCropViewController.git&#34;),&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Carthage&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Add the following to your Cartfile:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code&gt;github &#34;TimOliver/TOCropViewController&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;From the &lt;code&gt;Carthage/Build&lt;/code&gt; folder, import one of the two frameworks into your Xcode project. For Objective-C projects, import just &lt;code&gt;TOCropViewController.framework&lt;/code&gt; and for Swift, import &lt;code&gt;CropViewController.framework&lt;/code&gt; instead. Each framework is separate; you do not need to import both.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Follow the remaining steps on &lt;a href=&#34;https://github.com/Carthage/Carthage#getting-started&#34;&gt;Getting Started with Carthage&lt;/a&gt; to finish integrating the framework.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Manual Installation&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;All of the necessary source and resource files for &lt;code&gt;TOCropViewController&lt;/code&gt; are in &lt;code&gt;Objective-C/TOCropViewController&lt;/code&gt;, and all of the necessary Swift files are in &lt;code&gt;Swift/CropViewController&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;For Objective-C projects, copy just the &lt;code&gt;TOCropViewController&lt;/code&gt; directory to your Xcode project. For Swift projects, copy both &lt;code&gt;TOCropViewController&lt;/code&gt; and &lt;code&gt;CropViewController&lt;/code&gt; to your project.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;TOCropViewController&lt;/code&gt; is very straightforward. Simply create a new instance passing the &lt;code&gt;UIImage&lt;/code&gt; object you wish to crop, and then present it modally on the screen.&lt;/p&gt; &#xA;&lt;p&gt;While &lt;code&gt;TOCropViewController&lt;/code&gt; prefers to be presented modally, it can also be pushed to a &lt;code&gt;UINavigationController&lt;/code&gt; stack.&lt;/p&gt; &#xA;&lt;p&gt;For a complete working example, check out the sample apps included in this repo.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Basic Implementation&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func presentCropViewController() {&#xA;  let image: UIImage = ... //Load an image&#xA;  &#xA;  let cropViewController = CropViewController(image: image)&#xA;  cropViewController.delegate = self&#xA;  present(cropViewController, animated: true, completion: nil)&#xA;}&#xA;&#xA;func cropViewController(_ cropViewController: CropViewController, didCropToImage image: UIImage, withRect cropRect: CGRect, angle: Int) {&#xA;        // &#39;image&#39; is the newly cropped version of the original image&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)presentCropViewController&#xA;{&#xA;  UIImage *image = ...; // Load an image&#xA;  &#xA;  TOCropViewController *cropViewController = [[TOCropViewController alloc] initWithImage:image];&#xA;  cropViewController.delegate = self;&#xA;  [self presentViewController:cropViewController animated:YES completion:nil];&#xA;}&#xA;&#xA;- (void)cropViewController:(TOCropViewController *)cropViewController didCropToImage:(UIImage *)image withRect:(CGRect)cropRect angle:(NSInteger)angle&#xA;{&#xA;  // &#39;image&#39; is the newly cropped version of the original image&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Similar to many &lt;code&gt;UIKit&lt;/code&gt; &lt;code&gt;UIViewController&lt;/code&gt; subclasses, like &lt;code&gt;MFMailComposeViewController&lt;/code&gt;, the class responsible for presenting view controller should also take care of dismissing it upon cancellation. To dismiss &lt;code&gt;TOCropViewController&lt;/code&gt;, implement the &lt;code&gt;cropViewController:didFinishCancelled:&lt;/code&gt; delegate method, and call &lt;code&gt;dismissViewController:animated:&lt;/code&gt; from there.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Making a Circular Cropped Image&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func presentCropViewController() {&#xA;    var image: UIImage? // Load an image&#xA;    let cropViewController = CropViewController(croppingStyle: .circular, image: image)&#xA;    cropViewController.delegate = self&#xA;    self.present(cropViewController, animated: true, completion: nil)&#xA;}&#xA;&#xA;func cropViewController(_ cropViewController: TOCropViewController?, didCropToCircularImage image: UIImage?, with cropRect: CGRect, angle: Int) {&#xA;    // &#39;image&#39; is the newly cropped, circular version of the original image&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)presentCropViewController&#xA;{&#xA;UIImage *image = ...; // Load an image&#xA;&#xA;TOCropViewController *cropViewController = [[TOCropViewController alloc] initWithCroppingStyle:TOCropViewCroppingStyleCircular image:image];&#xA;cropViewController.delegate = self;&#xA;[self presentViewController:cropViewController animated:YES completion:nil];&#xA;}&#xA;&#xA;- (void)cropViewController:(TOCropViewController *)cropViewController didCropToCircularImage:(UIImage *)image withRect:(CGRect)cropRect angle:(NSInteger)angle&#xA;{&#xA;// &#39;image&#39; is the newly cropped, circular version of the original image&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Sharing Cropped Images Via a Share Sheet&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func presentCropViewController() {&#xA;    var image: UIImage? // Load an image&#xA;    let cropViewController = CropViewController(image: image)&#xA;    cropViewController.showActivitySheetOnDone = true&#xA;    self.present(cropViewController, animated: true, completion: nil)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)presentCropViewController&#xA;{&#xA;  UIImage *image = ...; // Load an image&#xA;  &#xA;  TOCropViewController *cropViewController = [[TOCropViewController alloc] initWithImage:image];&#xA;  cropViewController.showActivitySheetOnDone = YES;&#xA;  [self presentViewController:cropViewController animated:YES completion:nil];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Presenting With a Custom Animation&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Optionally, &lt;code&gt;TOCropViewController&lt;/code&gt; also supports a custom presentation animation where an already-visible copy of the image will zoom in to fill the screen.&lt;/p&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;func presentCropViewController() {&#xA;    var image: UIImage? // Load an image&#xA;    var imageView = UIImageView(image: image)&#xA;    var frame: CGRect = view.convert(imageView.frame, to: view)&#xA;    &#xA;    let cropViewController = CropViewController(image: image)&#xA;    cropViewController.delegate = self&#xA;    self.present(cropViewController, animated: true, completion: nil)&#xA;    cropViewController.presentAnimated(fromParentViewController: self, fromFrame: frame, completion: nil)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)presentCropViewController&#xA;{&#xA;  UIImage *image = ...;&#xA;  UIImageView *imageView = [[UIImageView alloc] initWithImage:image];&#xA;  CGRect frame = [self.view convertRect:imageView.frame toView:self.view];&#xA;  &#xA;  TOCropViewController *cropViewController = [[TOCropViewController alloc] initWithImage:image];&#xA;  cropViewController.delegate = self;&#xA;  [self presentViewController:cropViewController animated:YES completion:nil];&#xA;  [cropViewController presentAnimatedFromParentViewController:self fromFrame:frame completion:nil];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Architecture of &lt;code&gt;TOCropViewController&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;While traditional cropping UI implementations will usually just have a dimming view with a square hole cut out of the middle, &lt;code&gt;TOCropViewController&lt;/code&gt; goes about its implementation a little differently.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TimOliver/TOCropViewController/master/breakdown.jpg&#34; width=&#34;702&#34; style=&#34;margin:0 auto&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Since there are two views that are overlaid over the image (A dimming view and a translucency view), trying to cut a hole open in both of them would be rather complex. Instead, an image view is placed in a scroll view in the background, and a copy of the image view is placed on top, inside a container view that is clipped to the designated cropping size. The size and position of the foreground image is then made to match the background view, creating the illusion that there is a hole in the dimming views, and minimising the number of views onscreen.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;TOCropViewController&lt;/code&gt; was originally created by &lt;a href=&#34;http://twitter.com/TimOliverAU&#34;&gt;Tim Oliver&lt;/a&gt; as a component for &lt;a href=&#34;http://icomics.co&#34;&gt;iComics&lt;/a&gt;, a comic reader app for iOS.&lt;/p&gt; &#xA;&lt;p&gt;Thanks also goes to &lt;code&gt;TOCropViewController&lt;/code&gt;&#39;s growing list of &lt;a href=&#34;https://github.com/TimOliver/TOCropViewController/graphs/contributors&#34;&gt;contributors&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;iOS Device mockups used in the screenshot created by &lt;a href=&#34;http://www.pixeden.com&#34;&gt;Pixeden&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;TOCropViewController is licensed under the MIT License, please see the &lt;a href=&#34;https://raw.githubusercontent.com/TimOliver/TOCropViewController/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jellyfin/Swiftfin</title>
    <updated>2022-06-15T01:49:09Z</updated>
    <id>tag:github.com,2022-06-15:/jellyfin/Swiftfin</id>
    <link href="https://github.com/jellyfin/Swiftfin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Native Jellyfin Client for iOS and tvOS&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Swiftfin&#34; height=&#34;125&#34; src=&#34;https://github.com/jellyfin/Swiftfin/raw/main/Swiftfin/Assets.xcassets/AppIcon.appiconset/152.png&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;Swiftfin&lt;/h2&gt; &#xA;&lt;a href=&#34;https://translate.jellyfin.org/engage/swiftfin/&#34;&gt; &lt;img src=&#34;https://translate.jellyfin.org/widgets/swiftfin/-/svg-badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://matrix.to/#/+jellyfin:matrix.org&#34;&gt; &lt;img src=&#34;https://img.shields.io/matrix/jellyfin:matrix.org&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://discord.gg/zHBxVSXdBV&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Talk%20on-Discord-brightgreen&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Swiftfin&lt;/b&gt; is a modern video client for the &lt;a href=&#34;https://github.com/jellyfin/jellyfin&#34;&gt;Jellyfin&lt;/a&gt; media server. Redesigned in Swift to maximize direct play with the power of &lt;b&gt;VLC&lt;/b&gt; and look &lt;b&gt;native&lt;/b&gt; on all classes of Apple devices. &lt;/p&gt; &#xA;&lt;h2&gt;⚡️ TestFlight&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;✨New! Updated TestFlight Link&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://testflight.apple.com/join/oZd0QzWv&#34;&gt;&lt;img height=&#34;70&#34; alt=&#34;Join the Beta on TestFlight&#34; src=&#34;https://anotherlens.app/testflight-badge.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For Apple TV (without an iOS/iPadOS device)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have an Apple TV and do not own an iOS device, please use this &lt;a href=&#34;https://forms.gle/U5CczbfQzm8MbpJX9&#34;&gt;Google Form&lt;/a&gt; to get an invitation code.&lt;/p&gt; &#xA;&lt;h2&gt;📚 Translations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t see Swiftfin in your language?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://translate.jellyfin.org/projects/swiftfin/&#34;&gt;Weblate instance&lt;/a&gt; to help translate Swiftfin and other projects.&lt;/p&gt; &#xA;&lt;a href=&#34;https://translate.jellyfin.org/engage/swiftfin/&#34;&gt; &lt;img src=&#34;https://translate.jellyfin.org/widgets/swiftfin/-/multi-auto.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;⚙️ Development&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for your interest in Swiftfin! Please check out the &lt;a href=&#34;https://github.com/jellyfin/Swiftfin/raw/main/contributing.md&#34;&gt;Contribution Guidelines&lt;/a&gt; to get started.&lt;/p&gt;</summary>
  </entry>
</feed>