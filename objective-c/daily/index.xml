<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-16T01:43:39Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ionic-team/cordova-plugin-ionic-webview</title>
    <updated>2023-06-16T01:43:39Z</updated>
    <id>tag:github.com,2023-06-16:/ionic-team/cordova-plugin-ionic-webview</id>
    <link href="https://github.com/ionic-team/cordova-plugin-ionic-webview" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Web View plugin for Cordova, specialized for Ionic apps.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/semantic-release/semantic-release&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?sanitize=true&#34; alt=&#34;semantic-release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dependabot.com&#34;&gt;&lt;img src=&#34;https://api.dependabot.com/badges/status?host=github&amp;amp;identifier=104773211&#34; alt=&#34;Dependabot Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/cordova-plugin-ionic-webview&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/cordova-plugin-ionic-webview.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Ionic Web View for Cordova&lt;/h1&gt; &#xA;&lt;p&gt;A Web View plugin for Cordova, focused on providing the highest performance experience for Ionic apps (but can be used with any Cordova app).&lt;/p&gt; &#xA;&lt;p&gt;This plugin uses WKWebView on iOS and the latest evergreen webview on Android. Additionally, this plugin makes it easy to use HTML5 style routing that web developers expect for building single-page apps.&lt;/p&gt; &#xA;&lt;p&gt;Note: This repo and its documentation are for &lt;code&gt;cordova-plugin-ionic-webview&lt;/code&gt; @ &lt;code&gt;5.x&lt;/code&gt;, which uses the new features that may not work with all apps. See &lt;a href=&#34;https://raw.githubusercontent.com/ionic-team/cordova-plugin-ionic-webview/master/#plugin-requirements&#34;&gt;Requirements&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ionic-team/cordova-plugin-ionic-webview/master/#migrating-to-5x&#34;&gt;Migrating to 5.x&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;2.x documentation can be found &lt;a href=&#34;https://github.com/ionic-team/cordova-plugin-ionic-webview/raw/2.x/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ“–&lt;/span&gt; &lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;https://beta.ionicframework.com/docs/building/webview&#34;&gt;https://beta.ionicframework.com/docs/building/webview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ“£&lt;/span&gt; &lt;strong&gt;Support/Questions?&lt;/strong&gt; Please see our &lt;a href=&#34;https://ionicframework.com/support&#34;&gt;Support Page&lt;/a&gt; for general support questions. The issues on GitHub should be reserved for bug reports and feature requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ’–&lt;/span&gt; &lt;strong&gt;Want to contribute?&lt;/strong&gt; Please see &lt;a href=&#34;https://github.com/ionic-team/cordova-plugin-ionic-webview/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;This plugin has several configuration options that can be set in &lt;code&gt;config.xml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Android and iOS Preferences&lt;/h3&gt; &#xA;&lt;p&gt;Preferences available for both iOS and Android&lt;/p&gt; &#xA;&lt;h4&gt;Hostname&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;preference name=&#34;Hostname&#34; value=&#34;app&#34; /&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default value is &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example &lt;code&gt;ionic://app&lt;/code&gt; on iOS, &lt;code&gt;http://app&lt;/code&gt; on Android.&lt;/p&gt; &#xA;&lt;p&gt;If you change it, you&#39;ll need to add a new &lt;code&gt;allow-navigation&lt;/code&gt; entry in the &lt;code&gt;config.xml&lt;/code&gt; for the configured url (i.e &lt;code&gt;&amp;lt;allow-navigation href=&#34;http://app/*&#34;/&amp;gt;&lt;/code&gt; if &lt;code&gt;Hostname&lt;/code&gt; is set to &lt;code&gt;app&lt;/code&gt;). This is only needed for the Android url when using &lt;code&gt;http://&lt;/code&gt;, &lt;code&gt;https://&lt;/code&gt; or a custom scheme. All &lt;code&gt;ionic://&lt;/code&gt; urls are whitelisted by the plugin.&lt;/p&gt; &#xA;&lt;h3&gt;Android Preferences&lt;/h3&gt; &#xA;&lt;p&gt;Preferences only available Android platform&lt;/p&gt; &#xA;&lt;h4&gt;Scheme&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;preference name=&#34;Scheme&#34; value=&#34;https&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default value is &lt;code&gt;http&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Configures the Scheme the app uses to load the content.&lt;/p&gt; &#xA;&lt;h4&gt;ResolveServiceWorkerRequests&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;preference name=&#34;ResolveServiceWorkerRequests&#34; value=&#34;true&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default value is &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enable to resolve requests made by Service Workers through the local server.&lt;/p&gt; &#xA;&lt;h4&gt;MixedContentMode&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;preference name=&#34;MixedContentMode&#34; value=&#34;2&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configures the WebView&#39;s behavior when an origin attempts to load a resource from a different origin.&lt;/p&gt; &#xA;&lt;p&gt;Default value is &lt;code&gt;0&lt;/code&gt; (&lt;code&gt;MIXED_CONTENT_ALWAYS_ALLOW&lt;/code&gt;), which allows loading resources from other origins.&lt;/p&gt; &#xA;&lt;p&gt;Other possible values are &lt;code&gt;1&lt;/code&gt; (&lt;code&gt;MIXED_CONTENT_NEVER_ALLOW&lt;/code&gt;) and &lt;code&gt;2&lt;/code&gt; (&lt;code&gt;MIXED_CONTENT_COMPATIBILITY_MODE&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.android.com/reference/android/webkit/WebSettings.html#setMixedContentMode(int)&#34;&gt;Android documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;iOS Preferences&lt;/h3&gt; &#xA;&lt;p&gt;Preferences only available for iOS platform&lt;/p&gt; &#xA;&lt;h4&gt;iosScheme&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;preference name=&#34;iosScheme&#34; value=&#34;httpsionic&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default value is &lt;code&gt;ionic&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Configures the Scheme the app uses to load the content.&lt;/p&gt; &#xA;&lt;p&gt;Values like &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt; or &lt;code&gt;file&lt;/code&gt; are not valid and will use default value instead.&lt;/p&gt; &#xA;&lt;p&gt;If you change it, you&#39;ll need to add a new &lt;code&gt;allow-navigation&lt;/code&gt; entry in the &lt;code&gt;config.xml&lt;/code&gt; for the configured scheme (i.e &lt;code&gt;&amp;lt;allow-navigation href=&#34;httpsionic://*&#34;/&amp;gt;&lt;/code&gt; if &lt;code&gt;iosScheme&lt;/code&gt; is set to &lt;code&gt;httpsionic&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;WKSuspendInBackground&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;preference name=&#34;WKSuspendInBackground&#34; value=&#34;false&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default value is &lt;code&gt;true&lt;/code&gt; (suspend).&lt;/p&gt; &#xA;&lt;p&gt;Set to false to stop WKWebView suspending in background too eagerly.&lt;/p&gt; &#xA;&lt;h4&gt;KeyboardAppearanceDark&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;preference name=&#34;KeyboardAppearanceDark&#34; value=&#34;false&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whether to use a dark styled keyboard on iOS&lt;/p&gt; &#xA;&lt;h4&gt;ScrollEnabled&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;preference name=&#34;ScrollEnabled&#34; value=&#34;true&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ionic apps work better if the WKWebView is not scrollable, so the scroll is disabled by default, but can be enabled with this preference. This only affects the main ScrollView of the WKWebView, so only affects the body, not other scrollable components.&lt;/p&gt; &#xA;&lt;h2&gt;Plugin Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cordova CLI&lt;/strong&gt;: 7.1.0+&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;iOS&lt;/strong&gt;: iOS 11+ and &lt;code&gt;cordova-ios&lt;/code&gt; 4+&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Android&lt;/strong&gt;: Android 5+ and &lt;code&gt;cordova-android&lt;/code&gt; 6.4+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Migrating to 5.x&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove and re-add the Web View plugin:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cordova plugin rm cordova-plugin-ionic-webview&#xA;cordova plugin add cordova-plugin-ionic-webview@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If using &lt;code&gt;cordova-android&lt;/code&gt; &amp;lt; 9, make sure you have &lt;code&gt;&amp;lt;preference name=&#34;android-minSdkVersion&#34; value=&#34;21&#34; /&amp;gt;&lt;/code&gt; in the config.xml as this version of the plugin only supports Android 5+ (SDK 21+). If using &lt;code&gt;cordova-android&lt;/code&gt; &amp;gt;= 9 is not neccessary as &lt;code&gt;cordova-android&lt;/code&gt; 9 only supports Android 5.1+ (SDK 22+)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since version 2, apps are served from HTTP on Android by default.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The default origin for requests from the Android WebView is &lt;code&gt;http://localhost&lt;/code&gt;. If &lt;code&gt;Hostname&lt;/code&gt; and &lt;code&gt;Scheme&lt;/code&gt; preferences are set, then origin will be &lt;code&gt;schemeValue://HostnameValue&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since version 3, apps are served from &lt;code&gt;ionic://&lt;/code&gt; scheme on iOS by default.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The default origin for requests from the iOS WebView is &lt;code&gt;ionic://localhost&lt;/code&gt;. If &lt;code&gt;Hostname&lt;/code&gt; and &lt;code&gt;iosScheme&lt;/code&gt; preferences are set, then origin will be &lt;code&gt;iosSchemeValue://HostnameValue&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The WebView is not able to display images, videos or other files from file or content protocols or if it doesn&#39;t have protocol at all. For those cases use &lt;code&gt;window.Ionic.WebView.convertFileSrc()&lt;/code&gt; to get the proper url.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Replace any usages of &lt;code&gt;window.Ionic.normalizeURL()&lt;/code&gt; and &lt;code&gt;window.wkRewriteURL()&lt;/code&gt; with &lt;code&gt;window.Ionic.WebView.convertFileSrc()&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;For Ionic Angular projects, there is an &lt;a href=&#34;https://beta.ionicframework.com/docs/native/ionic-webview&#34;&gt;Ionic Native wrapper&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npm install @ionic-native/ionic-webview@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>zxingify/zxingify-objc</title>
    <updated>2023-06-16T01:43:39Z</updated>
    <id>tag:github.com,2023-06-16:/zxingify/zxingify-objc</id>
    <link href="https://github.com/zxingify/zxingify-objc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Objective-C Port of ZXing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;zxingify-objc&lt;/h1&gt; &#xA;&lt;p&gt;ZXingObjC is a full Objective-C port of &lt;a href=&#34;https://github.com/zxing/zxing&#34;&gt;ZXing&lt;/a&gt; (&#34;Zebra Crossing&#34;), a Java barcode image processing library. It is designed to be used on both iOS devices and in Mac applications.&lt;/p&gt; &#xA;&lt;p&gt;The following barcodes are currently supported for both encoding and decoding:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UPC-A and UPC-E&lt;/li&gt; &#xA; &lt;li&gt;EAN-8 and EAN-13&lt;/li&gt; &#xA; &lt;li&gt;Code 39&lt;/li&gt; &#xA; &lt;li&gt;Code 93&lt;/li&gt; &#xA; &lt;li&gt;Code 128&lt;/li&gt; &#xA; &lt;li&gt;ITF&lt;/li&gt; &#xA; &lt;li&gt;Codabar&lt;/li&gt; &#xA; &lt;li&gt;RSS-14 (all variants)&lt;/li&gt; &#xA; &lt;li&gt;QR Code&lt;/li&gt; &#xA; &lt;li&gt;Data Matrix&lt;/li&gt; &#xA; &lt;li&gt;Maxicode&lt;/li&gt; &#xA; &lt;li&gt;Aztec (&#39;beta&#39; quality)&lt;/li&gt; &#xA; &lt;li&gt;PDF 417 (&#39;beta&#39; quality)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ZXingObjC currently has feature parity with ZXing version 3.3.3.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;ZXingObjC requires Xcode 8.3.3 and above, targeting either iOS 8.0 and above, or Mac OS X 10.8 Mountain Lion and above.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Encoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSError *error = nil;&#xA;ZXMultiFormatWriter *writer = [ZXMultiFormatWriter writer];&#xA;ZXBitMatrix* result = [writer encode:@&#34;A string to encode&#34;&#xA;                              format:kBarcodeFormatQRCode&#xA;                               width:500&#xA;                              height:500&#xA;                               error:&amp;amp;error];&#xA;if (result) {&#xA;  CGImageRef image = CGImageRetain([[ZXImage imageWithMatrix:result] cgimage]);&#xA;&#xA;  // This CGImageRef image can be placed in a UIImage, NSImage, or written to a file.&#xA;  &#xA;  CGImageRelease(image);&#xA;} else {&#xA;  NSString *errorMessage = [error localizedDescription];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Decoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;CGImageRef imageToDecode;  // Given a CGImage in which we are looking for barcodes&#xA;&#xA;ZXLuminanceSource *source = [[[ZXCGImageLuminanceSource alloc] initWithCGImage:imageToDecode] autorelease];&#xA;ZXBinaryBitmap *bitmap = [ZXBinaryBitmap binaryBitmapWithBinarizer:[ZXHybridBinarizer binarizerWithSource:source]];&#xA;&#xA;NSError *error = nil;&#xA;&#xA;// There are a number of hints we can give to the reader, including&#xA;// possible formats, allowed lengths, and the string encoding.&#xA;ZXDecodeHints *hints = [ZXDecodeHints hints];&#xA;&#xA;ZXMultiFormatReader *reader = [ZXMultiFormatReader reader];&#xA;ZXResult *result = [reader decode:bitmap&#xA;                            hints:hints&#xA;                            error:&amp;amp;error];&#xA;if (result) {&#xA;  // The coded result as a string. The raw data can be accessed with&#xA;  // result.rawBytes and result.length.&#xA;  NSString *contents = result.text;&#xA;&#xA;  // The barcode format, such as a QR code or UPC-A&#xA;  ZXBarcodeFormat format = result.barcodeFormat;&#xA;} else {&#xA;  // Use error to determine why we didn&#39;t get a result, such as a barcode&#xA;  // not being found, an invalid checksum, or a format inconsistency.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We highly recommend Carthage as module manager.&lt;/p&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;ZXingObjC can be installed using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;. After installing Carthage just add ZXingObjC to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;TheLevelUp/ZXingObjC&#34; ~&amp;gt; 3.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Swift and Objective-C Cocoa projects. After installing CocoaPods add ZXingObjC to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;8.0&#39;&#xA;pod &#39;ZXingObjC&#39;, &#39;~&amp;gt; 3.6.4&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;ZXingObjC includes several example applications found in &#34;examples&#34; folder:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BarcodeScanner - An iOS application that captures video from the camera, scans for barcodes and displays results on screen.&lt;/li&gt; &#xA; &lt;li&gt;BarcodeScannerSwift - An iOS application that captures video from the camera, scans for barcodes and displays results on screen, completely rewritten in Swift.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Kudos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cwalcott&#34;&gt;cwalcott&lt;/a&gt; initial creator of this project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neacao&#34;&gt;neacao&lt;/a&gt; for his unparalleled support lately&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/claybridges&#34;&gt;claybridges&lt;/a&gt; for all the help regarding the project move&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ZXingObjC is available under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>