<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-29T01:34:36Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jhftss/POC</title>
    <updated>2022-12-29T01:34:36Z</updated>
    <id>tag:github.com,2022-12-29:/jhftss/POC</id>
    <link href="https://github.com/jhftss/POC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A public collection of POCs &amp; Exploits for the vulnerabilities I discovered&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;POC&lt;/h1&gt; &#xA;&lt;p&gt;A public collection of POCs &amp;amp; Exploits for the vulnerabilities I discovered.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For research purposes only!&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chrismiles/CMPopTipView</title>
    <updated>2022-12-29T01:34:36Z</updated>
    <id>tag:github.com,2022-12-29:/chrismiles/CMPopTipView</id>
    <link href="https://github.com/chrismiles/CMPopTipView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Custom UIView for iOS that pops up an animated &#34;bubble&#34; pointing at a button or other view. Useful for popup tips.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CMPopTipView&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/chrismiles/CMPopTipView&#34;&gt;&lt;img src=&#34;https://travis-ci.org/chrismiles/CMPopTipView.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An iOS UIView subclass that displays a rounded rect &#34;bubble&#34;, containing a text message, pointing at a specified button or view.&lt;/p&gt; &#xA;&lt;p&gt;A CMPopTipView will automatically position itself within the view so that it is pointing at the specified button or view, positioning the &#34;pointer&#34; as necessary.&lt;/p&gt; &#xA;&lt;p&gt;A CMPopTipView can be pointed at any UIView within the containing view. It can also be pointed at a UIBarButtonItem within either a UINavigationBar or a UIToolbar and it will automatically position itself to point at the target.&lt;/p&gt; &#xA;&lt;p&gt;The background and text colors can be customised if the defaults are not suitable.&lt;/p&gt; &#xA;&lt;p&gt;Two animation options are available for when a CMPopTipView is presented: &#34;slide&#34; and &#34;pop&#34;.&lt;/p&gt; &#xA;&lt;p&gt;A CMPopTipView can be dismissed by the user tapping on it. It can also be dismissed programatically.&lt;/p&gt; &#xA;&lt;p&gt;CMPopTipView is rendered entirely by Core Graphics.&lt;/p&gt; &#xA;&lt;p&gt;The source includes a universal (iPhone/iPad) demo app.&lt;/p&gt; &#xA;&lt;p&gt;一个泡泡风格的提示框开源控件, 继承自UIView。iPad,iPhone通用&lt;/p&gt; &#xA;&lt;h2&gt;URLs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chrismiles/CMPopTipView&#34;&gt;https://github.com/chrismiles/CMPopTipView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://chrismiles-tech.blogspot.com/2010/12/cmpoptipview-custom-popup-view-for-ios.html&#34;&gt;http://chrismiles-tech.blogspot.com/2010/12/cmpoptipview-custom-popup-view-for-ios.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://chrismiles-tech.blogspot.com/2011/05/cmpoptipview-new-animation-option.html&#34;&gt;http://chrismiles-tech.blogspot.com/2011/05/cmpoptipview-new-animation-option.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Used in apps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;River Level &lt;a href=&#34;http://itunes.apple.com/au/app/river-level/id356158594?mt=8&#34;&gt;http://itunes.apple.com/au/app/river-level/id356158594?mt=8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The Happiest Hour &lt;a href=&#34;http://itunes.apple.com/au/app/the-happiest-hour/id414453120?mt=8&#34;&gt;http://itunes.apple.com/au/app/the-happiest-hour/id414453120?mt=8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;I-Sea &lt;a href=&#34;http://www.i-sea.no/&#34;&gt;http://www.i-sea.no/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Petunia &lt;a href=&#34;https://itunes.apple.com/us/app/petunia/id716806296?mt=8&#34;&gt;https://itunes.apple.com/us/app/petunia/id716806296?mt=8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sitecity &lt;a href=&#34;https://itunes.apple.com/us/app/sitecity/id925455900&#34;&gt;https://itunes.apple.com/us/app/sitecity/id925455900&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Many many more apps&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Your app here ...?&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://farm5.static.flickr.com/4005/5191641030_2b93a4a559.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://farm5.static.flickr.com/4112/5191046667_109a98dfc7.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://farm6.static.flickr.com/5170/5266199718_4720c56384.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Videos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=nul9VA_QsGI&#34;&gt;http://www.youtube.com/watch?v=nul9VA_QsGI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Example 1 - point at a UIBarButtonItem in a nav bar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Present a CMPopTipView pointing at a UIBarButtonItem in the nav bar&#xA;CMPopTipView *navBarLeftButtonPopTipView = [[CMPopTipView alloc] initWithMessage:@&#34;A Message&#34;];&#xA;navBarLeftButtonPopTipView.delegate = self;&#xA;[navBarLeftButtonPopTipView presentPointingAtBarButtonItem:self.navigationItem.leftBarButtonItem animated:YES];&#xA;&#xA;// Dismiss a CMPopTipView&#xA;[navBarLeftButtonPopTipView dismissAnimated:YES];&#xA;&#xA;// CMPopTipViewDelegate method&#xA;- (void)popTipViewWasDismissedByUser:(CMPopTipView *)popTipView {&#xA;    // any code&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example 2 - pointing at a UIButton, with custom color scheme::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (IBAction)buttonAction:(id)sender {&#xA;    // Toggle popTipView when a standard UIButton is pressed&#xA;    if (nil == self.roundRectButtonPopTipView) {&#xA;        self.roundRectButtonPopTipView = [[CMPopTipView alloc] initWithMessage:@&#34;My message&#34;];&#xA;        self.roundRectButtonPopTipView.delegate = self;&#xA;        self.roundRectButtonPopTipView.backgroundColor = [UIColor lightGrayColor];&#xA;        self.roundRectButtonPopTipView.textColor = [UIColor darkTextColor];&#xA;&#xA;        UIButton *button = (UIButton *)sender;&#xA;        [self.roundRectButtonPopTipView presentPointingAtView:button inView:self.view animated:YES];&#xA;    }&#xA;    else {&#xA;        // Dismiss&#xA;        [self.roundRectButtonPopTipView dismissAnimated:YES];&#xA;        self.roundRectButtonPopTipView = nil;&#xA;    }&#xA;}&#xA;&#xA;#pragma mark CMPopTipViewDelegate methods&#xA;- (void)popTipViewWasDismissedByUser:(CMPopTipView *)popTipView {&#xA;    // User can tap CMPopTipView to dismiss it&#xA;    self.roundRectButtonPopTipView = nil;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;id &amp;lt; CMPopTipViewDelegate &amp;gt;&lt;/strong&gt; delegate&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UIColor&lt;/strong&gt; *backgroundColor&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BOOL&lt;/strong&gt; disableTapToDismiss&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BOOL&lt;/strong&gt; dismissTapAnywhere&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NSString&lt;/strong&gt; *title&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NSString&lt;/strong&gt; *message&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UIView&lt;/strong&gt; *customView&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;id&lt;/strong&gt; targetObject&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UIColor&lt;/strong&gt; *titleColor&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UIFont&lt;/strong&gt; *titleFont&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UIColor&lt;/strong&gt; *textColor&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UIFont&lt;/strong&gt; *textFont&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NSTextAlignment&lt;/strong&gt; titleAlignment&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NSTextAlignment&lt;/strong&gt; textAlignment&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BOOL&lt;/strong&gt; has3DStyle&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UIColor&lt;/strong&gt; *borderColor&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CGFloat&lt;/strong&gt; cornerRadius&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CGFloat&lt;/strong&gt; borderWidth&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BOOL&lt;/strong&gt; hasShadow&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CMPopTipAnimation&lt;/strong&gt; animation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CGFloat&lt;/strong&gt; maxWidth&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PointDirection&lt;/strong&gt; preferredPointDirection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BOOL&lt;/strong&gt; hasGradientBackground&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BOOL&lt;/strong&gt; showFromCenter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CGFloat&lt;/strong&gt; sidePadding&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CGFloat&lt;/strong&gt; topMargin&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CGFloat&lt;/strong&gt; pointerSize&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CGFloat&lt;/strong&gt; bubblePaddingX&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CGFloat&lt;/strong&gt; bubblePaddingY&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BOOL&lt;/strong&gt; dismissAlongWithUserInteraction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ARC&lt;/h2&gt; &#xA;&lt;p&gt;The CMPopTipView Master branch uses ARC as of version 2.0.&lt;/p&gt; &#xA;&lt;p&gt;If you want a non-ARC version you should look at tag 1.3.0.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;CMPopTipView is provided open source with no warranty and no guarantee of support. However, best effort is made to address issues raised on Github &lt;a href=&#34;https://github.com/chrismiles/CMPopTipView/issues&#34;&gt;https://github.com/chrismiles/CMPopTipView/issues&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;If you would like assistance with integrating CMPopTipView or modifying it for your needs, contact the author Chris Miles &lt;a href=&#34;mailto:miles.chris@gmail.com&#34;&gt;miles.chris@gmail.com&lt;/a&gt; for consulting opportunities.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;CMPopTipView is Copyright (c) 2010-2015 Chris Miles and released open source under a MIT license:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in&#xA;all copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN&#xA;THE SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>MortimerGoro/MGSwipeTableCell</title>
    <updated>2022-12-29T01:34:36Z</updated>
    <id>tag:github.com,2022-12-29:/MortimerGoro/MGSwipeTableCell</id>
    <link href="https://github.com/MortimerGoro/MGSwipeTableCell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An easy to use UITableViewCell subclass that allows to display swippable buttons with a variety of transitions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MGSwipeTableCell&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MGSwipeTableCell is an easy to use UITableViewCell subclass that allows to display swipeable buttons with a variety of transitions.&lt;/p&gt; &#xA;&lt;p&gt;This library is compatible with all the different ways to create a UITableViewCell: system predefined styles, programmatically created cells, cells loaded from a xib and prototype cells within a storyboard. You can use autolayout if you want.&lt;/p&gt; &#xA;&lt;p&gt;Works on iOS &amp;gt;= 5.0. Tested on all iOS versions on iPhone and iPad: iOS 7, iOS 8, iOS 9, iOS 10, iOS 11, iOS 12, iOS 13, iOS 14.&lt;/p&gt; &#xA;&lt;h2&gt;Transitions demo&lt;/h2&gt; &#xA;&lt;h3&gt;Border transition&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/readme-assets/border.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Clip transition&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/readme-assets/clip.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3D transition&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/readme-assets/3d.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Static transition&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/readme-assets/static.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Drag transition&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/readme-assets/drag.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API Reference&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/MGSwipeTableCell/MGSwipeTableCell.h&#34;&gt;&lt;code&gt;MGSwipeTableCell.h&lt;/code&gt;&lt;/a&gt; header file for a complete overview of the capabilities of the class.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/demo/MailAppDemo&#34;&gt;&lt;code&gt;MailAppDemo&lt;/code&gt;&lt;/a&gt; for a complete project which mimics Apple&#39;s Mail App (written in Objective-C)&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/demo/MailAppDemoSwift&#34;&gt;&lt;code&gt;MailAppDemoSwift&lt;/code&gt;&lt;/a&gt; for a complete project which mimics Apple&#39;s Mail App (Written in Swift)&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/demo/SpotifyDemo&#34;&gt;&lt;code&gt;SpotifyDemo&lt;/code&gt;&lt;/a&gt; for a complete project which mimics Spotify App swipe style&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/demo/MGSwipeDemo&#34;&gt;&lt;code&gt;MGSwipeDemo&lt;/code&gt;&lt;/a&gt; for a complete project where you can test the variety of transitions on a real device/simulator.&lt;/p&gt; &#xA;&lt;h2&gt;Setup your project&lt;/h2&gt; &#xA;&lt;p&gt;You can use CocoaPods to include MGSwipeTableCell into you project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;MGSwipeTableCell&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use Carthage to include MGSwipeTableCell into your project. Just add this dependency to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;MortimerGoro/MGSwipeTableCell&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use Swift Package Manager to include MGSwipeTableCell into you project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.package(url: &#34;https://github.com/MortimerGoro/MGSwipeTableCell.git&#34;, from: &#34;1.6.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Basic&lt;/h3&gt; &#xA;&lt;p&gt;Integrating MGSwipeTableCell in your project is very easy. Basically, you only have to inherit from MGSwipeTableCell instead of UITableViewCell, or directly instantiate MGSwipeTableCell instances with iOS predefined cell styles. You can layout your cell content as you are used to do, MGSwipeTableCell doesn&#39;t force you to change layouts.&lt;/p&gt; &#xA;&lt;p&gt;Here is a example of a MGSwipeTableCell using iOS predefined styles. You can set an array of buttons to cell.leftButtons and/or cell.rightButtons properties. MGSwipeButton is a convenience class, you are not forced to use it. You can use your own UIButtons or UIViews. You can configure transitions (and swipe thresholds) with the leftSwipeSettings and/or rightSwipeSettings properties&lt;/p&gt; &#xA;&lt;h5&gt;Objective-C&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#xA;{&#xA;    static NSString * reuseIdentifier = @&#34;programmaticCell&#34;;&#xA;    MGSwipeTableCell * cell = [self.tableView dequeueReusableCellWithIdentifier:reuseIdentifier];&#xA;    if (!cell) {&#xA;        cell = [[MGSwipeTableCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:reuseIdentifier];&#xA;    }&#xA;&#xA;    cell.textLabel.text = @&#34;Title&#34;;&#xA;    cell.detailTextLabel.text = @&#34;Detail text&#34;;&#xA;    cell.delegate = self; //optional&#xA;&#xA;&#xA;    //configure left buttons&#xA;    cell.leftButtons = @[[MGSwipeButton buttonWithTitle:@&#34;&#34; icon:[UIImage imageNamed:@&#34;check.png&#34;] backgroundColor:[UIColor greenColor]],&#xA;                          [MGSwipeButton buttonWithTitle:@&#34;&#34; icon:[UIImage imageNamed:@&#34;fav.png&#34;] backgroundColor:[UIColor blueColor]]];&#xA;    cell.leftSwipeSettings.transition = MGSwipeTransition3D;&#xA;&#xA;    //configure right buttons&#xA;    cell.rightButtons = @[[MGSwipeButton buttonWithTitle:@&#34;Delete&#34; backgroundColor:[UIColor redColor]],&#xA;                           [MGSwipeButton buttonWithTitle:@&#34;More&#34; backgroundColor:[UIColor lightGrayColor]]];&#xA;    cell.rightSwipeSettings.transition = MGSwipeTransition3D;&#xA;    return cell;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Swift&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell&#xA;{&#xA;    let reuseIdentifier = &#34;programmaticCell&#34;&#xA;    var cell = tableView.dequeueReusableCell(withIdentifier: reuseIdentifier, for: indexPath) as! MGSwipeTableCell&#xA;&#xA;    cell.textLabel!.text = &#34;Title&#34;&#xA;    cell.detailTextLabel!.text = &#34;Detail text&#34;&#xA;    cell.delegate = self //optional&#xA;&#xA;    //configure left buttons&#xA;    cell.leftButtons = [MGSwipeButton(title: &#34;&#34;, icon: UIImage(named:&#34;check.png&#34;), backgroundColor: .green),&#xA;                        MGSwipeButton(title: &#34;&#34;, icon: UIImage(named:&#34;fav.png&#34;), backgroundColor: .blue)]&#xA;    cell.leftSwipeSettings.transition = .rotate3D&#xA;&#xA;    //configure right buttons&#xA;    cell.rightButtons = [MGSwipeButton(title: &#34;Delete&#34;, backgroundColor: .red),&#xA;                         MGSwipeButton(title: &#34;More&#34;,backgroundColor: .lightGray)]&#xA;    cell.rightSwipeSettings.transition = .rotate3D&#xA;&#xA;    return cell&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to listen for button click events you can implement the optional MGSwipeTableCellDelegate, or if you are too lazy to do that, the MGSwipeButton class comes with a convenience block callback ;)&lt;/p&gt; &#xA;&lt;h5&gt;Objective-c&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[MGSwipeButton buttonWithTitle:@&#34;More&#34; backgroundColor:[UIColor lightGrayColor] callback:^BOOL(MGSwipeTableCell *sender) {&#xA;      NSLog(@&#34;Convenience callback for swipe buttons!&#34;);&#xA;}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Swift&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;MGSwipeButton(title: &#34;Delete&#34;, backgroundColor: .red) {&#xA;      (sender: MGSwipeTableCell!) -&amp;gt; Bool in&#xA;      print(&#34;Convenience callback for swipe buttons!&#34;)&#xA;      return true&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delegate&lt;/h3&gt; &#xA;&lt;p&gt;MGSwipeTableCellDelegate is an optional delegate to configure swipe buttons or to receive triggered actions or another events. Buttons can be configured inline when the cell is created instead of using this delegate, but using the delegate improves memory usage since buttons are only created on demand.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@protocol MGSwipeTableCellDelegate &amp;lt;NSObject&amp;gt;&#xA;&#xA;@optional&#xA;/**&#xA; * Delegate method to enable/disable swipe gestures&#xA; * @return YES if swipe is allowed&#xA; **/&#xA;-(BOOL) swipeTableCell:(MGSwipeTableCell*) cell canSwipe:(MGSwipeDirection) direction;&#xA;/**&#xA; * Delegate method invoked when the current swipe state changes&#xA; @param state the current Swipe State&#xA; @param gestureIsActive YES if the user swipe gesture is active. No if the uses has already ended the gesture&#xA; **/&#xA;-(void) swipeTableCell:(MGSwipeTableCell*) cell didChangeSwipeState:(MGSwipeState) state gestureIsActive:(BOOL) gestureIsActive;&#xA;/**&#xA; * Called when the user clicks a swipe button or when a expandable button is automatically triggered&#xA; * @return YES to autohide the current swipe buttons&#xA; **/&#xA;-(BOOL) swipeTableCell:(MGSwipeTableCell*) cell tappedButtonAtIndex:(NSInteger) index direction:(MGSwipeDirection)direction fromExpansion:(BOOL) fromExpansion;&#xA;/**&#xA; * Delegate method to setup the swipe buttons and swipe/expansion settings&#xA; * Buttons can be any kind of UIView but it&#39;s recommended to use the convenience MGSwipeButton class&#xA; * Setting up buttons with this delegate instead of using cell properties improves memory usage because buttons are only created in demand&#xA; * @param swipeTableCell the UITableViewCell to configure. You can get the indexPath using [tableView indexPathForCell:cell]&#xA; * @param direction The swipe direction (left to right or right to left)&#xA; * @param swipeSettings instance to configure the swipe transition and setting (optional)&#xA; * @param expansionSettings instance to configure button expansions (optional)&#xA; * @return Buttons array&#xA; **/&#xA;-(NSArray*) swipeTableCell:(MGSwipeTableCell*) cell swipeButtonsForDirection:(MGSwipeDirection)direction&#xA;             swipeSettings:(MGSwipeSettings*) swipeSettings expansionSettings:(MGSwipeExpansionSettings*) expansionSettings;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expandable buttons&lt;/h3&gt; &#xA;&lt;p&gt;Buttons are not expandable by default. You can set up expandable buttons using cell.leftExpansion and cell.rightExpansion properties&lt;/p&gt; &#xA;&lt;p&gt;Expandable button events are triggered automatically when the user ends the swipe gesture and the expansion is active (configurable via threshold value). Triggered expandable buttons can bounce back to their initial position or fill the entire UITableViewCell, you can select the desired animation using fillOnTrigger property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface MGSwipeExpansionSettings: NSObject&#xA;/** index of the expandable button (in the left or right buttons arrays) */&#xA;@property (nonatomic, assign) NSInteger buttonIndex;&#xA;/** if true the button fills the cell on trigger, else it bounces back to its initial position */&#xA;@property (nonatomic, assign) BOOL fillOnTrigger;&#xA;/** Size proportional threshold to trigger the expansion button. Default value 1.5 */&#xA;@property (nonatomic, assign) CGFloat threshold;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rounded corners and swipe buttons&lt;/h3&gt; &#xA;&lt;p&gt;MGSwipeTableCell supports rounded corners. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;cell.layer.cornerRadius = 50&#xA;cell.backgroundColor = UIColor.gray&#xA;cell.clipsToBounds = true&#xA;cell.swipeBackgroundColor = UIColor.gray&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/MortimerGoro/MGSwipeTableCell/raw/master/readme-assets/RoundTableViewCell.png&#34; width=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2014 Imanol Fernandez @MortimerGoro&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
</feed>