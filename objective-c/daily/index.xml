<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-18T01:36:44Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Kochava/Apple-SwiftPackage-KochavaTracker</title>
    <updated>2022-10-18T01:36:44Z</updated>
    <id>tag:github.com,2022-10-18:/Kochava/Apple-SwiftPackage-KochavaTracker</id>
    <link href="https://github.com/Kochava/Apple-SwiftPackage-KochavaTracker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apple Swift-Package KochavaTracker&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apple-SwiftPackage-KochavaTracker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Kochava/Apple-SwiftPackage-KochavaTracker/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/kochava/Apple-SwiftPackage-KochavaTracker?include_prereleases&amp;amp;sort=semver&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://storage.googleapis.com/kochava-web/2016/07/Kochava-horizontal-black-800x154.png&#34; width=&#34;260&#34;&gt; &#xA;&lt;h2&gt;Apple Swift-Package KochavaTracker&lt;/h2&gt; &#xA;&lt;p&gt;The KochavaTracker swift package is an optional module within the Kochava SDK providing install attribution and analytics.&lt;/p&gt; &#xA;&lt;p&gt;The Kochava SDK is a lightweight and easy to integrate SDK written in Objective-C and Swift, providing first-class integration with Kochava’s industry leading mobile attribution and analytics platform.&lt;/p&gt; &#xA;&lt;h2&gt;Built on&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 10.3&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.14&lt;/li&gt; &#xA; &lt;li&gt;tvOS 10.2&lt;/li&gt; &#xA; &lt;li&gt;watchOS 3.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kochava/Apple-SwiftPackage-KochavaCore&#34;&gt;KochavaCore&lt;/a&gt; &lt;a href=&#34;https://github.com/Kochava/Apple-SwiftPackage-KochavaCore/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/kochava/Apple-SwiftPackage-KochavaCore?include_prereleases&amp;amp;sort=semver&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integration&lt;/h2&gt; &#xA;&lt;p&gt;KochavaTracker is a Swift package. To install it, simply add this package as a dependency.&lt;/p&gt; &#xA;&lt;p&gt;In Xcode, see File &amp;gt; Swift Packages &amp;gt; Add Package Dependency ... &amp;gt; and enter the URL for this package repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://support.kochava.com/sdk-integration/sdk-kochavatracker-ios&#34;&gt;Kochava Apple SDK Integration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Kochava, &lt;a href=&#34;mailto:support@kochava.com&#34;&gt;support@kochava.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;KochavaTracker is available under the &lt;a href=&#34;https://www.kochava.com/terms-of-service/&#34;&gt;Kochava Terms of Service&lt;/a&gt;. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Default Branch&lt;/h2&gt; &#xA;&lt;p&gt;As of October 1, 2020, github.com uses the branch name ‘main’ when creating the initial default branch for all new repositories. In order to minimize any customizations in our github usage and to support consistent naming conventions, we have made the decision to rename the ‘master’ branch to be called ‘main’ in all Kochava’s github repos.&lt;/p&gt; &#xA;&lt;p&gt;For local copies of the repo, the following steps will update to the new default branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git branch -m master main&#xA;git fetch origin&#xA;git branch -u origin/main main&#xA;git remote set-head origin -a&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>material-motion/motion-interchange-objc</title>
    <updated>2022-10-18T01:36:44Z</updated>
    <id>tag:github.com,2022-10-18:/material-motion/motion-interchange-objc</id>
    <link href="https://github.com/material-motion/motion-interchange-objc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A standard format for representing animation traits in Objective-C and Swift.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/material-motion/motion-interchange-objc/develop/img/motion-interchange-banner.gif&#34; alt=&#34;Motion Interchange Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A standard format for representing animation traits in Objective-C and Swift.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/material-motion/motion-interchange-objc&#34;&gt;&lt;img src=&#34;https://travis-ci.org/material-motion/motion-interchange-objc.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/material-motion/motion-interchange-objc&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/material-motion/motion-interchange-objc/branch/develop/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/MotionInterchange&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/MotionInterchange.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/MotionInterchange&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/MotionInterchange.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#34;Magic numbers&#34; — those lonely, abandoned values without a home — are often one of the first things targeted in code review for cleanup. And yet, numbers related to animations may go unnoticed and left behind, scattered throughout a code base with little to no organizational diligence. These forgotten metrics form the backbone of mobile interactions and are often the ones needing the most care - so why are we ok leaving them scattered throughout a code base?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Let&#39;s play &#34;find the magic number&#34;: how many magic numbers are hidden in this code?&#xA;[UIView animateWithDuration:0.230&#xA;                      delay:0&#xA;                      options:UIViewAnimationOptionCurveEaseOut&#xA;                      animations:^{&#xA;                        myButton.position = updatedPosition;&#xA;                      }&#xA;                      completion:nil];&#xA;// Hint: the answer is not &#34;one, the number 0.230&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The challenge with extracting animation magic numbers is that we often don&#39;t have a clear definition of &lt;em&gt;what an animation is composed of&lt;/em&gt;. An animation is not simply determined by its duration, in the same way that a color is not simply determined by how red it is.&lt;/p&gt; &#xA;&lt;p&gt;The traits of an animation — like the red, green, and blue components of a color — include the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Delay.&lt;/li&gt; &#xA; &lt;li&gt;Duration.&lt;/li&gt; &#xA; &lt;li&gt;Timing curve.&lt;/li&gt; &#xA; &lt;li&gt;Repetition.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Within this library you will find simple data types for storing and representing animation traits so that the magic numbers that define your animations can find a place to call home.&lt;/p&gt; &#xA;&lt;p&gt;Welcome home, lost numbers.&lt;/p&gt; &#xA;&lt;h2&gt;Sibling library: Motion Animator&lt;/h2&gt; &#xA;&lt;p&gt;While it is possible to use the Motion Interchange as a standalone library, the Motion Animator is designed to be the primary consumer of Motion Interchange data types. Consider using these libraries together, with MotionAnimator as your primary dependency.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;MDMAnimationTraits *animationTraits =&#xA;    [[MDMAnimationTraits alloc] initWithDuration:0.230&#xA;                              timingFunctionName:kCAMediaTimingFunctionEaseInEaseOut];&#xA;&#xA;MDMMotionAnimator *animator = [[MDMMotionAnimator alloc] init];&#xA;[animator animateWithTraits:animationTraits animations:^{&#xA;  view.alpha = 0;&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To learn more, visit the MotionAnimator GitHub page:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/material-motion/motion-animator-objc&#34;&gt;https://github.com/material-motion/motion-animator-objc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Installation with CocoaPods&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CocoaPods is a dependency manager for Objective-C and Swift libraries. CocoaPods automates the process of using third-party libraries in your projects. See &lt;a href=&#34;https://guides.cocoapods.org/using/getting-started.html&#34;&gt;the Getting Started guide&lt;/a&gt; for more information. You can install it with the following command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;gem install cocoapods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Add &lt;code&gt;MotionInterchange&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;MotionInterchange&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Import the framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@import MotionInterchange;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will now have access to all of the APIs.&lt;/p&gt; &#xA;&lt;h2&gt;Example apps/unit tests&lt;/h2&gt; &#xA;&lt;p&gt;Check out a local copy of the repo to access&amp;nbsp;the Catalog application by running the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/material-motion/motion-interchange-objc.git&#xA;cd motion-interchange-objc&#xA;pod install&#xA;open MotionInterchange.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Guides&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/material-motion/motion-interchange-objc/develop/#animation-traits&#34;&gt;Animation traits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/material-motion/motion-interchange-objc/develop/#timing-curves&#34;&gt;Timing curves&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Animation traits&lt;/h3&gt; &#xA;&lt;p&gt;The primary data type you&#39;ll make use of is &lt;code&gt;MDMAnimationTraits&lt;/code&gt;. This class can store all of the necessary traits that make up an animation, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Delay.&lt;/li&gt; &#xA; &lt;li&gt;Duration.&lt;/li&gt; &#xA; &lt;li&gt;Timing curve.&lt;/li&gt; &#xA; &lt;li&gt;Repetition.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In Objective-C, you initialize a simple ease in/out cubic bezier instance like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;MDMAnimationTraits *traits = [[MDMAnimationTraits alloc] initWithDuration:0.5];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let traits = MDMAnimationTraits(duration: 0.5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many more ways to initialize animation traits. Read the &lt;a href=&#34;https://raw.githubusercontent.com/material-motion/motion-interchange-objc/develop/src/MDMAnimationTraits.h&#34;&gt;header documentation&lt;/a&gt; to see all of the available initializers.&lt;/p&gt; &#xA;&lt;h3&gt;Timing curves&lt;/h3&gt; &#xA;&lt;p&gt;A timing curve describes how quickly an animation progresses over time. Two types of timing curves are supported by Core Animation, and therefore by the MotionInterchange:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cubic bezier&lt;/li&gt; &#xA; &lt;li&gt;Spring&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cubic beziers&lt;/strong&gt; are represented by the CAMediaTimingFunction object. To define an animation trait with a cubic bezier curve in Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;CAMediaTimingFunction *timingCurve =&#xA;    [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];&#xA;MDMAnimationTraits *traits =&#xA;    [[MDMAnimationTraits alloc] initWithDelay:0 duration:0.5 timingCurve:timingCurve];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let timingCurve = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)&#xA;let traits = MDMAnimationTraits(delay: 0, duration: 0.5, timingCurve: timingCurve)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the UIViewAnimationCurve type to initialize a timing curve in Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;MDMAnimationTraits *traits =&#xA;    [[MDMAnimationTraits alloc] initWithDuration:0.5 animationCurve:UIViewAnimationCurveEaseIn];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let traits = MDMAnimationTraits(duration: 0.5, animationCurve: .easeIn)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Springs&lt;/strong&gt; are represented with the custom &lt;code&gt;MDMSpringTimingCurve&lt;/code&gt; type. To define an animation trait with a spring curve in Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;MDMSpringTimingCurve *timingCurve =&#xA;    [[MDMSpringTimingCurve alloc] initWithMass:1 tension:100 friction:10];&#xA;MDMAnimationTraits *traits =&#xA;    [[MDMAnimationTraits alloc] initWithDelay:0 duration:0.5 timingCurve:timingCurve];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let timingCurve = MDMSpringTimingCurve(mass: 1, tension: 100, friction: 10)&#xA;let traits = MDMAnimationTraits(delay: 0, duration: 0.5, timingCurve: timingCurve)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Springs can also be initialized using UIKit&#39;s &lt;a href=&#34;https://developer.apple.com/documentation/uikit/uiview/1622594-animatewithduration&#34;&gt;damping ratio concept&lt;/a&gt;. The &lt;code&gt;MDMSpringTimingCurveGenerator&lt;/code&gt; type generates &lt;code&gt;MDMSpringTimingCurve&lt;/code&gt; instances when needed. A spring timing curve generator can be stored as the &lt;code&gt;timingCurve&lt;/code&gt; of an &lt;code&gt;MDMAnimationTraits&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;MDMSpringTimingCurveGenerator *timingCurve =&#xA;    [[MDMSpringTimingCurveGenerator alloc] initWithDuration:&amp;lt;#(NSTimeInterval)#&amp;gt; dampingRatio:&amp;lt;#(CGFloat)#&amp;gt;];&#xA;MDMAnimationTraits *traits =&#xA;    [[MDMAnimationTraits alloc] initWithDelay:0 duration:0.5 timingCurve:timingCurve];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let timingCurve = MDMSpringTimingCurveGenerator(duration: 0.5, dampingRatio: 0.5)&#xA;let traits = MDMAnimationTraits(delay: 0, duration: 0.5, timingCurve: timingCurve)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions!&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://github.com/material-motion/motion-interchange-objc/milestones&#34;&gt;upcoming milestones&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://material-motion.github.io/material-motion/team/&#34;&gt;our team&lt;/a&gt;, &lt;a href=&#34;https://material-motion.github.io/material-motion/team/community/&#34;&gt;our community&lt;/a&gt;, and our &lt;a href=&#34;https://material-motion.github.io/material-motion/team/essentials/&#34;&gt;contributor essentials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the Apache 2.0 license. See LICENSE for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>material-motion/motion-animator-objc</title>
    <updated>2022-10-18T01:36:44Z</updated>
    <id>tag:github.com,2022-10-18:/material-motion/motion-animator-objc</id>
    <link href="https://github.com/material-motion/motion-animator-objc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Motion Animator creates performant, interruptible iOS animations from motion specs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/material-motion/motion-animator-objc/develop/img/motion-animator-banner.gif&#34; alt=&#34;Motion Animator Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An animator for iOS 9+ that combines the best aspects of modern UIView and CALayer animation APIs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/material-motion/motion-animator-objc&#34;&gt;&lt;img src=&#34;https://travis-ci.org/material-motion/motion-animator-objc.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/material-motion/motion-animator-objc&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/material-motion/motion-animator-objc/branch/develop/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/MotionAnimator&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/MotionAnimator.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/MotionAnimator&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/MotionAnimator.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;🎉&lt;/td&gt;&#xA;   &lt;td&gt;Implicit and explicit additive animations.&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;🎉&lt;/td&gt;&#xA;   &lt;td&gt;Parameterized motion with the &lt;a href=&#34;https://github.com/material-motion/motion-interchange-objc&#34;&gt;Interchange&lt;/a&gt;.&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;🎉&lt;/td&gt;&#xA;   &lt;td&gt;Provide velocity to animations directly from gesture recognizers.&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;🎉&lt;/td&gt;&#xA;   &lt;td&gt;Maximize frame rates by relying more on Core Animation.&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;🎉&lt;/td&gt;&#xA;   &lt;td&gt;Animatable properties are Swift enum types.&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;🎉&lt;/td&gt;&#xA;   &lt;td&gt;Consistent model layer value expectations.&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;The following properties can be implicitly animated using the MotionAnimator on iOS 9 and up:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;anchorPoint&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;backgroundColor&lt;/tt&gt;&lt;/td&gt;&#xA;   &lt;td&gt;UIView &lt;tt&gt;backgroundColor&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;bounds&lt;/tt&gt;&lt;/td&gt;&#xA;   &lt;td&gt;UIView &lt;tt&gt;bounds&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;borderWidth&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;borderColor&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;cornerRadius&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;height&lt;/tt&gt;&lt;/td&gt;&#xA;   &lt;td&gt;UIView &lt;tt&gt;height&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;opacity&lt;/tt&gt;&lt;/td&gt;&#xA;   &lt;td&gt;UIView &lt;tt&gt;alpha&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;position&lt;/tt&gt;&lt;/td&gt;&#xA;   &lt;td&gt;UIView &lt;tt&gt;center&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;rotation&lt;/tt&gt;&lt;/td&gt;&#xA;   &lt;td&gt;UIView &lt;tt&gt;rotation&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;scale&lt;/tt&gt;&lt;/td&gt;&#xA;   &lt;td&gt;UIView &lt;tt&gt;scale&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;shadowColor&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;shadowOffset&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;shadowOpacity&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;shadowRadius&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;transform&lt;/tt&gt;&lt;/td&gt;&#xA;   &lt;td&gt;UIView &lt;tt&gt;transform&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;width&lt;/tt&gt;&lt;/td&gt;&#xA;   &lt;td&gt;UIView &lt;tt&gt;width&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;x&lt;/tt&gt;&lt;/td&gt;&#xA;   &lt;td&gt;UIView &lt;tt&gt;x&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;y&lt;/tt&gt;&lt;/td&gt;&#xA;   &lt;td&gt;UIView &lt;tt&gt;y&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CALayer &lt;tt&gt;z&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CAShapeLayer &lt;tt&gt;strokeStart&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CAShapeLayer &lt;tt&gt;strokeEnd&lt;/tt&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note: any animatable property can also be animated with MotionAnimator&#39;s explicit animation APIs, even if it&#39;s not listed in the table above.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Is a property missing from this list? &lt;a href=&#34;https://github.com/material-motion/motion-animator-objc/edit/develop/src/MDMAnimatableKeyPaths.h&#34;&gt;We welcome pull requests&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;MotionAnimator: a drop-in replacement&lt;/h2&gt; &#xA;&lt;p&gt;UIView&#39;s implicit animation APIs are also available on the MotionAnimator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Animating implicitly with UIView APIs&#xA;UIView.animate(withDuration: 1.0, animations: {&#xA;  view.alpha = 0.5&#xA;})&#xA;&#xA;// Equivalent MotionAnimator API&#xA;MotionAnimator.animate(withDuration: 1.0, animations: {&#xA;  view.alpha = 0.5&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But the MotionAnimator allows you to animate more properties — and on more iOS versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;UIView.animate(withDuration: 1.0, animations: {&#xA;  view.layer.cornerRadius = 10 // Only works on iOS 11 and up&#xA;})&#xA;&#xA;MotionAnimator.animate(withDuration: 1.0, animations: {&#xA;  view.layer.cornerRadius = 10 // Works on iOS 9 and up&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MotionAnimator makes use of the &lt;a href=&#34;https://github.com/material-motion/motion-interchange-objc&#34;&gt;MotionInterchange&lt;/a&gt;, a standardized format for representing animation traits. This makes it possible to tweak the traits of an animation without rewriting the code that ultimately creates the animation, useful for building tweaking tools and making motion &#34;stylesheets&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Want to change a trait of your animation? You&#39;ll need to use a different function altogether&#xA;// to do so:&#xA;UIView.animate(withDuration: 1.0, animations: {&#xA;  view.alpha = 0.5&#xA;})&#xA;UIView.animate(withDuration: 1.0, delay: 0.5, options: [], animations: {&#xA;  view.alpha = 0.5&#xA;}, completion: nil)&#xA;&#xA;// But with the MotionInterchange, you can create and manipulate the traits of an animation&#xA;// separately from its execution.&#xA;let traits = MDMAnimationTraits(duration: 1.0)&#xA;traits.delay = 0.5&#xA;&#xA;let animator = MotionAnimator()&#xA;animator.animate(with: traits, animations: {&#xA;  view.alpha = 0.5&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The MotionAnimator can also be used to replace explicit Core Animation code with additive explicit animations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let from = 0&#xA;let to = 10&#xA;// Animating expicitly with Core Animation APIs&#xA;let animation = CABasicAnimation(keyPath: &#34;cornerRadius&#34;)&#xA;animation.fromValue = (from - to)&#xA;animation.toValue = 0&#xA;animation.isAdditive = true&#xA;animation.duration = 1.0&#xA;view.layer.add(animation, forKey: animation.keyPath)&#xA;view.layer.cornerRadius = to&#xA;&#xA;// Equivalent implicit MotionAnimator API. cornerRadius will be animated additively by default.&#xA;view.layer.cornerRadius = 0&#xA;MotionAnimator.animate(withDuration: 1, animations: {&#xA;  view.layer.cornerRadius = 10&#xA;})&#xA;&#xA;// Equivalent explicit MotionAnimator API&#xA;// Note that this API will also set the final animation value to the layer&#39;s model layer, similar&#xA;// to how implicit animations work, and unlike the explicit pure Core Animation implementation&#xA;// above.&#xA;let animator = MotionAnimator()&#xA;animator.animate(with: MDMAnimationTraits(duration: 1.0),&#xA;                 between: [0, 10],&#xA;                 layer: view.layer,&#xA;                 keyPath: .cornerRadius)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Springs on iOS require an initial velocity that&#39;s normalized by the displacement of the animation. MotionAnimator calculates this for you so that you can directly provide gesture recognizer velocity values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Common variables&#xA;let gestureYVelocity = gestureRecognizer.velocity(in: someContainerView).y&#xA;let destinationY = 75&#xA;&#xA;// Animating springs implicitly with UIView APIs&#xA;let displacement = destinationY - view.position.y&#xA;UIView.animate(withDuration: 1.0,&#xA;               delay: 0,&#xA;               usingSpringWithDamping: 1.0,&#xA;               initialSpringVelocity: gestureYVelocity / displacement,&#xA;               options: [],&#xA;               animations: {&#xA;                 view.layer.position = CGPoint(x: view.position.x, y: destinationY)&#xA;               },&#xA;               completion: nil)&#xA;&#xA;// Equivalent MotionAnimator API&#xA;let animator = MotionAnimator()&#xA;let traits = MDMAnimationTraits(duration: 1.0)&#xA;traits.timingCurve = MDMSpringTimingCurveGenerator(duration: traits.duration,&#xA;                                                   dampingRatio: 1.0,&#xA;                                                   initialVelocity: gestureYVelocity)&#xA;animator.animate(with: traits,&#xA;                 between: [view.layer.position.y, destinationY],&#xA;                 layer: view.layer,&#xA;                 keyPath: .y)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API snippets&lt;/h2&gt; &#xA;&lt;h3&gt;Implicit animations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;MotionAnimator.animate(withDuration: &amp;lt;#T##TimeInterval#&amp;gt;) {&#xA;  &amp;lt;#code#&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;MotionAnimator.animate(withDuration: &amp;lt;#T##TimeInterval#&amp;gt;,&#xA;                       delay: &amp;lt;#T##TimeInterval#&amp;gt;,&#xA;                       options: &amp;lt;#T##UIViewAnimationOptions#&amp;gt;,&#xA;                       animations: {&#xA;  &amp;lt;#code#&amp;gt;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Explicit animations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let traits = MDMAnimationTraits(delay: &amp;lt;#T##TimeInterval#&amp;gt;,&#xA;                                duration: &amp;lt;#T##TimeInterval#&amp;gt;,&#xA;                                animationCurve: &amp;lt;#T##UIViewAnimationCurve#&amp;gt;)&#xA;let animator = MotionAnimator()&#xA;animator.animate(with: &amp;lt;#T##MDMAnimationTraits#&amp;gt;,&#xA;                 between: [&amp;lt;#T##[From (Any)]#&amp;gt;, &amp;lt;#T##[To (Any)]#&amp;gt;],&#xA;                 layer: &amp;lt;#T##CALayer#&amp;gt;,&#xA;                 keyPath: &amp;lt;#T##AnimatableKeyPath#&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Animating transitions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let animator = MotionAnimator()&#xA;animator.shouldReverseValues = transition.direction == .backwards&#xA;&#xA;let traits = MDMAnimationTraits(delay: &amp;lt;#T##TimeInterval#&amp;gt;,&#xA;                                duration: &amp;lt;#T##TimeInterval#&amp;gt;,&#xA;                                animationCurve: &amp;lt;#T##UIViewAnimationCurve#&amp;gt;)&#xA;animator.animate(with: &amp;lt;#T##MDMAnimationTraits#&amp;gt;,&#xA;                 between: [&amp;lt;#T##[From (Any)]#&amp;gt;, &amp;lt;#T##[To (Any)]#&amp;gt;],&#xA;                 layer: &amp;lt;#T##CALayer#&amp;gt;,&#xA;                 keyPath: &amp;lt;#T##AnimatableKeyPath#&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating motion specifications&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MotionSpec {&#xA;  static let chipWidth = MDMAnimationTraits(delay: 0.000, duration: 0.350)&#xA;  static let chipHeight = MDMAnimationTraits(delay: 0.000, duration: 0.500)&#xA;}&#xA;&#xA;let animator = MotionAnimator()&#xA;animator.shouldReverseValues = transition.direction == .backwards&#xA;&#xA;animator.animate(with: MotionSpec.chipWidth,&#xA;                 between: [&amp;lt;#T##[From (Any)]#&amp;gt;, &amp;lt;#T##[To (Any)]#&amp;gt;],&#xA;                 layer: &amp;lt;#T##CALayer#&amp;gt;,&#xA;                 keyPath: &amp;lt;#T##AnimatableKeyPath#&amp;gt;)&#xA;animator.animate(with: MotionSpec.chipHeight,&#xA;                 between: [&amp;lt;#T##[From (Any)]#&amp;gt;, &amp;lt;#T##[To (Any)]#&amp;gt;],&#xA;                 layer: &amp;lt;#T##CALayer#&amp;gt;,&#xA;                 keyPath: &amp;lt;#T##AnimatableKeyPath#&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Animating from the current state&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Will animate any non-additive animations from their current presentation layer value&#xA;animator.beginFromCurrentState = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugging animations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;animator.addCoreAnimationTracer { layer, animation in&#xA;  print(animation.debugDescription)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stopping animations in reaction to a gesture recognizer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if gesture.state == .began {&#xA;  animator.stopAllAnimations()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Removing all animations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;animator.removeAllAnimations()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Main thread animations vs Core Animation&lt;/h2&gt; &#xA;&lt;p&gt;Animation systems on iOS can be split into two general categories: main thread-based and Core Animation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Main thread&lt;/strong&gt;-based animation systems include UIDynamics, Facebook&#39;s &lt;a href=&#34;https://github.com/facebook/pop&#34;&gt;POP&lt;/a&gt;, or anything driven by a CADisplayLink. These animation systems share CPU time with your app&#39;s main thread, meaning they&#39;re sharing resources with UIKit, text rendering, and any other main-thread bound processes. This also means the animations are subject to &lt;em&gt;main thread jank&lt;/em&gt;, in other words: dropped frames of animation or &#34;stuttering&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Core Animation&lt;/strong&gt; makes use of the &lt;em&gt;render server&lt;/em&gt;, an operating system-wide process for animations on iOS. This independence from an app&#39;s process allows the render server to avoid main thread jank altogether.&lt;/p&gt; &#xA;&lt;p&gt;The primary benefit of main thread animations over Core Animation is that Core Animation&#39;s list of animatable properties is small and unchangeable, while main thread animations can animate anything in your application. A good example of this is using POP to animate a &#34;time&#34; property, and to map that time to the hands of a clock. This type of behavior cannot be implemented in Core Animation without moving code out of the render server and in to the main thread.&lt;/p&gt; &#xA;&lt;p&gt;The primary benefit of Core Animation over main thread animations, on the other hand, is that your animations will be much less likely to drop frames simply because your app is busy on its main thread.&lt;/p&gt; &#xA;&lt;p&gt;When evaluating whether to use a main thread-based animation system or not, check first whether the same animations can be performed in Core Animation instead. If they can, you may be able to offload the animations from your app&#39;s main thread by using Core Animation, saving you valuable processing time for other main thread-bound operations.&lt;/p&gt; &#xA;&lt;p&gt;MotionAnimator is a purely Core Animation-based animator. If you are looking for main thread solutions then check out the following technologies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/uikit/animation_and_haptics/uikit_dynamics&#34;&gt;UIDynamics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/pop&#34;&gt;POP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/quartzcore/cadisplaylink&#34;&gt;CADisplayLink&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Core Animation: a deep dive&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Recommended reading:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;http://asciiwwdc.com/2010/sessions/123&#34;&gt;Building Animation Driven Interfaces&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;http://asciiwwdc.com/2010/sessions/424&#34;&gt;Core Animation in Practice, Part 1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;http://asciiwwdc.com/2010/sessions/425&#34;&gt;Core Animation in Practice, Part 2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;http://asciiwwdc.com/2014/sessions/236&#34;&gt;Building Interruptible and Responsive Interactions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;http://asciiwwdc.com/2014/sessions/419&#34;&gt;Advanced Graphics and Animations for iOS Apps&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;http://asciiwwdc.com/2016/sessions/216&#34;&gt;Advances in UIKit Animations and Transitions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/CreatingBasicAnimations/CreatingBasicAnimations.html&#34;&gt;Animating Layer Content&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/AdvancedAnimationTricks/AdvancedAnimationTricks.html&#34;&gt;Advanced Animation Tricks&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/&#34;&gt;Additive animations: animateWithDuration in iOS 8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There are two primary ways to animate with Core Animation on iOS:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;implicitly&lt;/strong&gt;, with the UIView &lt;code&gt;animateWithDuration:&lt;/code&gt; APIs, or by setting properties on standalone CALayer instances (those that are &lt;strong&gt;not&lt;/strong&gt; backing a UIView), and&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;explicitly&lt;/strong&gt;, with the CALayer &lt;code&gt;addAnimation:forKey:&lt;/code&gt; APIs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A subset of UIView&#39;s and CALayer&#39;s public APIs is animatable by Core Animation. Of these animatable properties, some are implicitly animatable while some are not. Whether a property is animatable or not depends on the context within which it&#39;s being animated, and whether an animation is additive or not depends on which animation API is being used. With this matrix of conditions it&#39;s understandable that it can sometimes be difficult to know how to effectively make use of Core Animation.&lt;/p&gt; &#xA;&lt;p&gt;The following quiz helps illustrate that the UIKit and Core Animation APIs can often lead to unintuitive behavior. Try to guess which of the following snippets will generate an animation and, if they do, what the generated animation&#39;s duration will be:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Imagine that each code snippet is a standalone unit test (because &lt;a href=&#34;https://raw.githubusercontent.com/material-motion/motion-animator-objc/develop/tests/unit/HeadlessLayerImplicitAnimationTests.swift&#34;&gt;they are&lt;/a&gt;!).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let view = UIView()&#xA;UIView.animate(withDuration: 0.8, animations: {&#xA;  view.alpha = 0.5&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see the answer&lt;/summary&gt; Generates an animation with duration of 0.8. &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let view = UIView()&#xA;UIView.animate(withDuration: 0.8, animations: {&#xA;  view.layer.opacity = 0.5&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see the answer&lt;/summary&gt; Generates an animation with duration of 0.8. &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let view = UIView()&#xA;UIView.animate(withDuration: 0.8, animations: {&#xA;  view.layer.cornerRadius = 3&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see the answer&lt;/summary&gt; On iOS 11 and up, generates an animation with duration of 0.8. Older operating systems will not generate an animation. &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let view = UIView()&#xA;view.alpha = 0.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see the answer&lt;/summary&gt; Does not generate an animation. &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let view = UIView()&#xA;view.layer.opacity = 0.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see the answer&lt;/summary&gt; Does not generate an animation. &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let layer = CALayer()&#xA;layer.opacity = 0.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see the answer&lt;/summary&gt; Does not generate an animation. &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let view = UIView()&#xA;window.addSubview(view)&#xA;let layer = CALayer()&#xA;view.layer.addSublayer(layer)&#xA;&#xA;// Pump the run loop once.&#xA;RunLoop.main.run(mode: .defaultRunLoopMode, before: .distantFuture)&#xA;&#xA;layer.opacity = 0.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see the answer&lt;/summary&gt; Generates an animation with duration of 0.25. &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let view = UIView()&#xA;window.addSubview(view)&#xA;let layer = CALayer()&#xA;view.layer.addSublayer(layer)&#xA;&#xA;// Pump the run loop once.&#xA;RunLoop.main.run(mode: .defaultRunLoopMode, before: .distantFuture)&#xA;&#xA;UIView.animate(withDuration: 0.8, animations: {&#xA;  layer.opacity = 0.5&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see the answer&lt;/summary&gt; Generates an animation with duration of 0.25. This isn&#39;t a typo: standalone layers read from the current CATransaction rather than UIView&#39;s parameters when implicitly animating, even when the change happens within a UIView animation block. &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;What properties can be explicitly animated?&lt;/h3&gt; &#xA;&lt;p&gt;For a full list of animatable CALayer properties, see the &lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/AnimatableProperties/AnimatableProperties.html&#34;&gt;Apple documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;MotionAnimator&#39;s explicit APIs can be used to animate any property that is animatable by Core Animation.&lt;/p&gt; &#xA;&lt;h3&gt;What properties can be implicitly animated?&lt;/h3&gt; &#xA;&lt;p&gt;UIKit and Core Animation have different rules about when and how a property can be implicitly animated.&lt;/p&gt; &#xA;&lt;p&gt;UIView properties generate implicit animations &lt;strong&gt;only&lt;/strong&gt; when they are changed within an &lt;code&gt;animateWithDuration:&lt;/code&gt; animation block.&lt;/p&gt; &#xA;&lt;p&gt;CALayer properties generate implicit animations &lt;strong&gt;only&lt;/strong&gt; when they are changed under either of the following conditions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;if the CALayer is backing a UIView, the CALayer property is a supported implicitly animatable property (this is not documented anywhere), and the property is changed within an &lt;code&gt;animateWithDuration:&lt;/code&gt; block, or&lt;/li&gt; &#xA; &lt;li&gt;if: the CALayer is &lt;strong&gt;not&lt;/strong&gt; backing a UIView (an &#34;unhosted layer&#34;), the layer has been around for at least one CATransaction flush — either by invoking &lt;code&gt;CATransaction.flush()&lt;/code&gt; or by letting the run loop pump at least once — and the property is changed at all.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This behavior can be somewhat difficult to reason through, most notably when trying to animate CALayer properties using the UIView &lt;code&gt;animateWithDuration:&lt;/code&gt; APIs. For example, CALayer&#39;s cornerRadius was not animatable using &lt;code&gt;animateWithDuration:&lt;/code&gt; up until iOS 11, and many other CALayer properties are still not implicitly animatable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// This doesn&#39;t work until iOS 11.&#xA;UIView.animate(withDuration: 0.8, animations: {&#xA;  view.layer.borderWidth = 10&#xA;}, completion: nil)&#xA;&#xA;// This works back to iOS 9.&#xA;MotionAnimator.animate(withDuration: 0.8, animations: {&#xA;  view.layer.borderWidth = 10&#xA;}, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The MotionAnimator provides a more consistent implicit animation API with a well-defined set of supported properties.&lt;/p&gt; &#xA;&lt;h3&gt;In general, when will changing a property cause an implicit animation?&lt;/h3&gt; &#xA;&lt;p&gt;The following charts describe when changing a property on a given object will cause an implicit animation to be generated.&lt;/p&gt; &#xA;&lt;h4&gt;UIView&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let view = UIView()&#xA;&#xA;// inside animation block&#xA;UIView.animate(withDuration: 0.8, animations: {&#xA;  view.alpha = 0.5 // Will generate an animation with a duration of 0.8&#xA;})&#xA;&#xA;// outside animation block&#xA;view.alpha = 0.5 // Will not animate&#xA;&#xA;// inside MotionAnimator animation block&#xA;MotionAnimator.animate(withDuration: 0.8, animations: {&#xA;  view.alpha = 0.5 // Will generate an animation with a duration of 0.8&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;UIVIew key path&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;inside animation block&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;outside animation block&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;inside MotionAnimator animation block&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;backgroundColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bounds&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bounds.size.height&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bounds.size.width&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;center&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;center.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;center.y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;transform.rotation.z&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;transform.scale&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Backing CALayer&lt;/h4&gt; &#xA;&lt;p&gt;Every UIView has a backing CALayer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let view = UIView()&#xA;&#xA;// inside animation block&#xA;UIView.animate(withDuration: 0.8, animations: {&#xA;  view.layer.opacity = 0.5 // Will generate an animation with a duration of 0.8&#xA;})&#xA;&#xA;// outside animation block&#xA;view.layer.opacity = 0.5 // Will not animate&#xA;&#xA;// inside MotionAnimator animation block&#xA;MotionAnimator.animate(withDuration: 0.8, animations: {&#xA;  view.layer.opacity = 0.5 // Will generate an animation with a duration of 0.8&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;CALayer key path&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;inside animation block&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;outside animation block&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;inside MotionAnimator animation block&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;anchorPoint&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓ (starting in iOS 11)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;backgroundColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bounds&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;borderWidth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;borderColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;cornerRadius&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓ (starting in iOS 11)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bounds.size.height&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;opacity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;transform.rotation.z&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;transform.scale&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;shadowColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;shadowOffset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;shadowOpacity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;shadowRadius&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;strokeStart&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;strokeEnd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bounds.size.width&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;position.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;position.y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;zPosition&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Unflushed, unhosted CALayer&lt;/h4&gt; &#xA;&lt;p&gt;CALayers are unflushed until the next &lt;code&gt;CATransaction.flush()&lt;/code&gt; invocation, which can happen either directly or at the end of the current run loop.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let layer = CALayer()&#xA;&#xA;// inside animation block&#xA;UIView.animate(withDuration: 0.8, animations: {&#xA;  layer.opacity = 0.5 // Will not animate&#xA;})&#xA;&#xA;// outside animation block&#xA;layer.opacity = 0.5 // Will not animate&#xA;&#xA;// inside MotionAnimator animation block&#xA;MotionAnimator.animate(withDuration: 0.8, animations: {&#xA;  layer.opacity = 0.5 // Will generate an animation with a duration of 0.8&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;CALayer key path&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;inside animation block&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;outside animation block&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;inside MotionAnimator animation block&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;anchorPoint&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;backgroundColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bounds&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;borderWidth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;borderColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;cornerRadius&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bounds.size.height&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;opacity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;transform.rotation.z&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;transform.scale&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;shadowColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;shadowOffset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;shadowOpacity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;shadowRadius&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;strokeStart&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;strokeEnd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bounds.size.width&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;position.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;position.y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;zPosition&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Flushed, unhosted CALayer&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let layer = CALayer()&#xA;&#xA;// It&#39;s usually unnecessary to flush the transaction, unless you want to be able to implicitly&#xA;// animate it without using a MotionAnimator.&#xA;CATransaction.flush()&#xA;&#xA;// inside animation block&#xA;UIView.animate(withDuration: 0.8, animations: {&#xA;  // Will generate an animation with a duration of 0.25 because it uses the CATransaction duration&#xA;  // rather than the UIKit duration.&#xA;  layer.opacity = 0.5&#xA;})&#xA;&#xA;// outside animation block&#xA;// Will generate an animation with a duration of 0.25&#xA;layer.opacity = 0.5&#xA;&#xA;// inside MotionAnimator animation block&#xA;MotionAnimator.animate(withDuration: 0.8, animations: {&#xA;  layer.opacity = 0.5 // Will generate an animation with a duration of 0.8&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;CALayer key path&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;inside animation block&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;outside animation block&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;inside MotionAnimator animation block&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;anchorPoint&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;backgroundColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bounds&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;borderWidth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;borderColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;cornerRadius&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bounds.size.height&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;opacity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;transform.rotation.z&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;transform.scale&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;shadowColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;shadowOffset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;shadowOpacity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;shadowRadius&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;strokeStart&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;strokeEnd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bounds.size.width&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;position.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;position.y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;zPosition&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Example apps/unit tests&lt;/h2&gt; &#xA;&lt;p&gt;Check out a local copy of the repo to access the Catalog application by running the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/material-motion/motion-animator-objc.git&#xA;cd motion-animator-objc&#xA;pod install&#xA;open MotionAnimator.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Installation with CocoaPods&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CocoaPods is a dependency manager for Objective-C and Swift libraries. CocoaPods automates the process of using third-party libraries in your projects. See &lt;a href=&#34;https://guides.cocoapods.org/using/getting-started.html&#34;&gt;the Getting Started guide&lt;/a&gt; for more information. You can install it with the following command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;gem install cocoapods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Add &lt;code&gt;motion-animator&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;MotionAnimator&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Import the framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@import MotionAnimator;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will now have access to all of the APIs.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions!&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://github.com/material-motion/motion-animator-objc/milestones&#34;&gt;upcoming milestones&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://material-motion.github.io/material-motion/team/&#34;&gt;our team&lt;/a&gt;, &lt;a href=&#34;https://material-motion.github.io/material-motion/team/community/&#34;&gt;our community&lt;/a&gt;, and our &lt;a href=&#34;https://material-motion.github.io/material-motion/team/essentials/&#34;&gt;contributor essentials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the Apache 2.0 license. See LICENSE for details.&lt;/p&gt;</summary>
  </entry>
</feed>