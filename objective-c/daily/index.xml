<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-19T01:43:08Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>marlkiller/dylib_dobby_hook</title>
    <updated>2024-01-19T01:43:08Z</updated>
    <id>tag:github.com,2024-01-19:/marlkiller/dylib_dobby_hook</id>
    <link href="https://github.com/marlkiller/dylib_dobby_hook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;该项目是一个集成了 Dobby Hook 框架的 macOS dylib 项目，通过使用 Dobby Hook 框架实现对应用程序的钩子函数，以实现跨平台破解软件的效果。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;前记&lt;/h2&gt; &#xA;&lt;p&gt;xcode 开发 dylib , 基于跨平台的 dobby HOOK 框架来构建跨平台的通杀补丁.&lt;br&gt; 你妈再也不用担心你只能跑 Rosetta 了..&lt;/p&gt; &#xA;&lt;p&gt;开发环境:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;xcode 15.2&lt;/li&gt; &#xA; &lt;li&gt;dobby&lt;/li&gt; &#xA; &lt;li&gt;insert_dylib&lt;/li&gt; &#xA; &lt;li&gt;hopper | ida&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;项目搭建&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;xcode 新建一个 MacOS &amp;gt; Library 项目&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;稍微做一些配置: -- 关掉代码优化: Optimization Level -&amp;gt; None 这个东西开了的话 hook 或者 写内联汇编会出问题&lt;/p&gt; &#xA;&lt;p&gt;-- 跨平台构建打开: Build Active Architecture Only &amp;gt; No 这个东西开了的话, m系列代码 编译出来的 x86/arm 都可以用,跨平台必备&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;项目中引入 dobby 动态库 &amp;lt; libdobby.dylib &amp;gt;, 并且 引入 dobby.h 头文件&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;编写 hook 代码&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;hook 代码&lt;/h2&gt; &#xA;&lt;p&gt;关键 hook 函数,可以参考帖子(以 TabpePlus 该软件为例) : &lt;a href=&#34;https://www.52pojie.cn/thread-1881366-1-1.html&#34;&gt;https://www.52pojie.cn/thread-1739112-1-1.html&lt;br&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;代码优化&lt;/h3&gt; &#xA;&lt;p&gt;基础代码已经完成, 为了兼容更多的 app 补丁, 我们对代码做一些重构优化。 使用适配器模式来扩展&lt;/p&gt; &#xA;&lt;h3&gt;定义 Hack 接口&lt;/h3&gt; &#xA;&lt;p&gt;接口定义几个方法, 比如教研app名称/版本号,以及执行 hack&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@protocol HackProtocol&#xA;&#xA;- (NSString *)getAppName;&#xA;- (NSString *)getSupportAppVersion;&#xA;- (BOOL)hack;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;定义实现类(已当前 TablePlus 为例)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&#xA;#import &#34;TablePlusHack.h&#34;&#xA;#import &amp;lt;objc/runtime.h&amp;gt;&#xA;&#xA;@implementation TablePlusHack&#xA;&#xA;&#xA;- (NSString *)getAppName {&#xA;    return @&#34;com.tinyapp.TablePlus&#34;;&#xA;}&#xA;&#xA;- (NSString *)getSupportAppVersion {    &#xA;    return @&#34;5.8.2&#34;;&#xA;}&#xA;&#xA;&#xA;#if defined(__arm64__) || defined(__aarch64__)&#xA;&#xA;&#xA;- (BOOL)hack {&#xA;    // do arm something..&#xA;    return YES;&#xA;}&#xA;    &#xA;#elif defined(__x86_64__)&#xA;&#xA;- (BOOL)hack {&#xA;    // do x86 something..&#xA;    return YES;&#xA;}&#xA;&#xA;#endif&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;dylib 入口函数&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;+ (void) load {&#xA;    NSAlert *alert = [[NSAlert alloc] init];&#xA;    [alert setMessageText:@&#34;Please confirm if the app has been backed up.\nIf there are any issues, please restore it yourself!&#34;];&#xA;    [alert addButtonWithTitle:@&#34;Confirm&#34;];&#xA;    [alert addButtonWithTitle:@&#34;Cancel&#34;];&#xA;    NSInteger response = [alert runModal];&#xA;    if (response == NSAlertFirstButtonReturn) {&#xA;        [Constant doHack];&#xA;    } else {&#xA;        return;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;build 注入&lt;/h2&gt; &#xA;&lt;p&gt;编译后, 会得到一个我们的 dylib 补丁&lt;br&gt; 然后编写 shell 脚本,来注入&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;current_path=$PWD&#xA;echo &#34;当前路径：$current_path&#34;&#xA;&#xA;app_name=&#34;TablePlus&#34;&#xA;&#xA;dylib_name=&#34;dylib_dobby_hook&#34;&#xA;prefix=&#34;lib&#34;&#xA;&#xA;insert_dylib=&#34;${current_path}/../tools/insert_dylib&#34;&#xA;&#xA;# 我们的 release 补丁路径&#xA;BUILT_PRODUCTS_DIR=&#34;${current_path}/../Release&#34;&#xA;&#xA;app_bundle_path=&#34;/Applications/${app_name}.app/Contents/MacOS/&#34;&#xA;&#xA;cp -f &#34;${insert_dylib}&#34; &#34;${app_bundle_path}/&#34;   &#xA;&#xA;app_bundle_framework=&#34;/Applications/${app_name}.app/Contents/Frameworks&#34;&#xA;app_executable_path=&#34;${app_bundle_path}/${app_name}&#34;&#xA;app_executable_backup_path=&#34;${app_executable_path}_Backup&#34;&#xA;&#xA;# 第一次注入的之后备份源文件&#xA;if [ ! -f &#34;$app_executable_backup_path&#34; ]; &#xA;then&#xA;    cp &#34;$app_executable_path&#34; &#34;$app_executable_backup_path&#34;&#xA;fi&#xA;&#xA;&#xA;# 把补丁 与 补丁依赖的 dobby hook 框架都复制到目标程序下&#xA;cp -R &#34;${BUILT_PRODUCTS_DIR}/${prefix}${dylib_name}.dylib&#34; ${app_bundle_framework}&#xA;cp -R &#34;${BUILT_PRODUCTS_DIR}/libdobby.dylib&#34; ${app_bundle_framework}&#xA;&#xA;# 用 insert_dylib 来向目标程序注入&#xA;&#34;${app_bundle_path}/insert_dylib&#34; --weak --all-yes &#34;@rpath/${prefix}${dylib_name}.dylib&#34; &#34;$app_executable_backup_path&#34; &#34;$app_executable_path&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;至此,代码重构优化结束,如果补丁要支持新的 app ,只需要添加一个 HackProtocol 实现类即可,&lt;br&gt; 对别的地方的代码, 零入侵.&lt;/p&gt; &#xA;&lt;h2&gt;Ref&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[MacOS逆向] MacOS TablePlus dylib注入 HOOK x86/arm 双插 完美破解 &lt;a href=&#34;https://www.52pojie.cn/thread-1881366-1-1.html&#34;&gt;https://www.52pojie.cn/thread-1739112-1-1.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[C&amp;amp;C++ 原创] C++ 跨平台 内联汇编集成 (MacOS,Linux,Windows) &lt;a href=&#34;https://www.52pojie.cn/thread-1653689-1-1.html&#34;&gt;https://www.52pojie.cn/thread-1653689-1-1.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;jmpews/Dobby &lt;a href=&#34;https://github.com/jmpews/Dobby&#34;&gt;https://github.com/jmpews/Dobby&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Release&lt;/h2&gt; &#xA;&lt;p&gt;项目已经打包 github,可以直接用 xcode 打开 : &lt;a href=&#34;https://github.com/marlkiller/dylib_dobby_hook&#34;&gt;https://github.com/marlkiller/dylib_dobby_hook&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;目录:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;libs: 项目依赖的开源 dobby 库&lt;/li&gt; &#xA; &lt;li&gt;release: build 后的成品&lt;/li&gt; &#xA; &lt;li&gt;script: 里面有个 hack.sh, 可以直接sudo sh 执行一键注入脚本&lt;/li&gt; &#xA; &lt;li&gt;tools: insert_dylib 开源注入工具&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;集成&amp;lt;特征码&amp;gt;搜索&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>