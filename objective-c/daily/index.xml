<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-19T01:51:21Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fpillet/NSLogger</title>
    <updated>2022-07-19T01:51:21Z</updated>
    <id>tag:github.com,2022-07-19:/fpillet/NSLogger</id>
    <link href="https://github.com/fpillet/NSLogger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern, flexible logging tool&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/fpillet/NSLogger/raw/master/Desktop/Resources/Icon/1290083967_Console.png&#34; title=&#34;NSLogger&#34; width=&#34;128&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;NSLogger&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dashboard.buddybuild.com/apps/5914439af77e0000015a7b82/build/latest?branch=master&#34;&gt;&lt;img src=&#34;https://dashboard.buddybuild.com/api/statusImage?appID=5914439af77e0000015a7b82&amp;amp;branch=master&amp;amp;build=latest&#34; alt=&#34;BuddyBuild&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/NSLogger/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/NSLogger.svg?style=flat&#34; alt=&#34;Pod Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/NSLogger/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/NSLogger.svg?style=flat&#34; alt=&#34;Pod Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://opensource.org/licenses/BSD-3-Clause&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/l/NSLogger.svg?style=flat&#34; alt=&#34;Pod License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.versioneye.com/objective-c/nslogger/references&#34;&gt;&lt;img src=&#34;https://www.versioneye.com/objective-c/nslogger/reference_badge.svg?style=flat&#34; alt=&#34;Reference Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NSLogger&lt;/strong&gt; is a high performance logging utility which displays traces emitted by client applications running on &lt;em&gt;macOS&lt;/em&gt;, &lt;em&gt;iOS&lt;/em&gt; and &lt;em&gt;Android&lt;/em&gt;. It replaces traditional console logging traces (&lt;em&gt;NSLog()&lt;/em&gt;, Java &lt;em&gt;Log&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;NSLogger Viewer&lt;/strong&gt; runs on macOS and replaces &lt;em&gt;Xcode&lt;/em&gt;, &lt;em&gt;Android Studio&lt;/em&gt; or &lt;em&gt;Eclipse&lt;/em&gt; consoles. It provides powerful additions like display filtering, defining log domain and level, image and binary logging, message coloring, traces buffering, timing information, link with source code, etc.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/fpillet/NSLogger/master/Screenshots/mainwindow.png&#34; title=&#34;Desktop Viewer (main window)&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NSLogger&lt;/strong&gt; feature summary:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;View logs using the desktop application&lt;/li&gt; &#xA; &lt;li&gt;Logs can be sent from device or simulator&lt;/li&gt; &#xA; &lt;li&gt;Accept connections from local network clients (using &lt;em&gt;Bonjour&lt;/em&gt;) or remote clients connecting directly over the internet&lt;/li&gt; &#xA; &lt;li&gt;Online (application running and connected to &lt;em&gt;NSLogger&lt;/em&gt;) and offline (saved logs) log viewing&lt;/li&gt; &#xA; &lt;li&gt;Buffer all traces in memory or in a file, send them over to viewer when a connection is acquired&lt;/li&gt; &#xA; &lt;li&gt;Define a log domain (app, view, model, controller, network…) and an importance level (error, warning, debug, noise…)&lt;/li&gt; &#xA; &lt;li&gt;Color the log messages using regexp&lt;/li&gt; &#xA; &lt;li&gt;Log images or raw binary data&lt;/li&gt; &#xA; &lt;li&gt;Secure logging (connections use SSL by default)&lt;/li&gt; &#xA; &lt;li&gt;Advanced log filtering options&lt;/li&gt; &#xA; &lt;li&gt;Save viewer logs to share them and/or review them later&lt;/li&gt; &#xA; &lt;li&gt;Export logs to text files&lt;/li&gt; &#xA; &lt;li&gt;Open raw buffered traces files that you brought back from client applications not directly connected to the log viewer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is what it looks like in action:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/MonsieurDart/NSLogger/raw/swiftiosclient/Screenshots/demo_video.gif&#34; title=&#34;Viewer Demo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;And with macOS Mojave and later&#39;s dark mode:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/fpillet/NSLogger/master/Screenshots/mainwindow-dark.png&#34; title=&#34;Desktop Viewer (main window)&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Basic Usage&lt;/h1&gt; &#xA;&lt;p&gt;Without any change to your code, all the &lt;code&gt;NSLog()&lt;/code&gt; logs from your application are redirected to the NSLogger desktop viewer. The viewer is found automatically on your network, using Bonjour.&lt;/p&gt; &#xA;&lt;p&gt;A rich API lets you log messages, binary data or images with a lot of detail. Simple wrappers are available for your convenience:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift&lt;/strong&gt; wrapper API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import NSLogger&#xA;&#xA;[…]&#xA;&#xA;// logging some messages&#xA;Logger.shared.log(.network, .info, &#34;Checking paper level…&#34;)&#xA;&#xA;// logging image&#xA;Logger.shared.log(.view, .noise, myPrettyImage)&#xA;&#xA;// logging data&#xA;Logger.shared.log(.custom(&#34;My Domain&#34;), .noise, someDataObject)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Objective-C&lt;/strong&gt; wrapper API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;NSLogger/NSLogger.h&amp;gt;&#xA;&#xA;[…]&#xA;&#xA;LoggerApp(1, @&#34;Hello world! Today is: %@&#34;, [self myDate]);&#xA;LoggerNetwork(1, @&#34;Hello world! Today is: %@&#34;, [self myDate]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; Download the &lt;a href=&#34;https://github.com/fpillet/NSLogger/releases&#34;&gt;&lt;em&gt;NSLogger desktop app&lt;/em&gt;&lt;/a&gt; on your Mac.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; Add the &lt;em&gt;NSLogger framework&lt;/em&gt; to your project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Step 3.&lt;/strong&gt; There is no step 3…&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Desktop Viewer Download&lt;/h2&gt; &#xA;&lt;p&gt;Download the pre-built, signed version of the &lt;a href=&#34;https://github.com/fpillet/NSLogger/releases&#34;&gt;NSLogger desktop viewer&lt;/a&gt; for macOS. Don&#39;t forget to launch the application on your Mac. It won&#39;t show a window until a client connects to it and starts logging.&lt;/p&gt; &#xA;&lt;h2&gt;Client Framework Install&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods Install&lt;/h3&gt; &#xA;&lt;p&gt;If your project is configured to use &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;, just add this line to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#34;NSLogger&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above only includes C and Obj-C APIs and is suitable for use in applications without any Swift code. Swift syntactic sugar APIs are added with the &lt;code&gt;Swift&lt;/code&gt; subspec. If you&#39;re developing code in Swift or a mixed Swift / Obj-C environment, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#34;NSLogger/Swift&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you don&#39;t strictly need to include the &lt;code&gt;/Swift&lt;/code&gt; variant for your Swift applications. You can perfectly develop your own extensions that call into NSLogger&#39;s C APIs without using the basic provided ones.&lt;/p&gt; &#xA;&lt;p&gt;Finally if you are using frameworks or libraries that may use NSLogger, then you can use the &lt;code&gt;NoStrip&lt;/code&gt; variant which forces the linker to keep all NSLogger functions in the final build, even those that your code doesn&#39;t use. Since linked in frameworks may dynamically check for the presence of NSLogger functions, this is required as the linker wouldn&#39;t see this use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#34;NSLogger/NoStrip&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage Install&lt;/h3&gt; &#xA;&lt;p&gt;NSLogger is Carthage-compatible. It builds two frameworks: &lt;code&gt;NSLogger&lt;/code&gt; and &lt;code&gt;NSLoggerSwift&lt;/code&gt;. You&#39;ll need to pick either one (but not both) to use in your application. Both can be used with Swift, the &lt;code&gt;NSLoggerSwift&lt;/code&gt; variant adds a simple Swift layer to make NSLogger easier to use from Swift code. You can perfectly develop your own extensions that call into NSLogger&#39;s C APIs without using the basic provided ones, and just use the &lt;code&gt;NSLogger&lt;/code&gt; framework.&lt;/p&gt; &#xA;&lt;p&gt;Depending on the framework you choose, your code will need to &lt;code&gt;import NSLogger&lt;/code&gt; or &lt;code&gt;import NSLoggerSwift&lt;/code&gt;. This is a difference with Cocoapods support where you always &lt;code&gt;import NSLogger&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;fpillet/NSLogger&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Again, the &lt;code&gt;NSLogger.xcodeproj&lt;/code&gt; top-level project offers two targets (&lt;code&gt;NSLogger&lt;/code&gt; and &lt;code&gt;NSLoggerSwift&lt;/code&gt;). Add the built framework that suits your needs.&lt;/p&gt; &#xA;&lt;h1&gt;Advanced Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Using NSLogger on a Shared Network&lt;/h2&gt; &#xA;&lt;p&gt;The first log sent by NSLogger will start the logger, by default on the first &lt;em&gt;Bonjour&lt;/em&gt; service encountered. But when multiple NSLogger users share the same network, logger connections can get mixed.&lt;/p&gt; &#xA;&lt;p&gt;To avoid confusion between users, just add this when you app starts (for example, in the &lt;code&gt;applicationDidFinishLaunching&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;LoggerSetupBonjourForBuildUser();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in the &lt;em&gt;Preferences&lt;/em&gt; pane of the NSLogger.app desktop viewer, go to the &lt;code&gt;Network&lt;/code&gt; tab. Type your user name (i.e. &lt;code&gt;$USER&lt;/code&gt;) in the &#34;&lt;em&gt;Bonjour service name&lt;/em&gt;&#34; text field.&lt;/p&gt; &#xA;&lt;p&gt;This will allow the traces to be received only by the computer of the user who compiled the app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This only work when NSLogger has been added to your project using CocoaPods&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Set up logger options&lt;/h2&gt; &#xA;&lt;p&gt;For example if you don&#39;t want to disable OS_ACTIVITY_MODE for your scheme because you need that logs. And you wanna have only your logs in NSLogger in Swift call init function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func LoggerInit() {&#xA;    let pointer = LoggerGetDefaultLogger()&#xA;    var options = LoggerGetOptions(pointer)&#xA;    &#xA;    options ^= UInt32(kLoggerOption_CaptureSystemConsole) // disable that option&#xA;    &#xA;    LoggerSetOptions(pointer, options)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manual Framework Install&lt;/h2&gt; &#xA;&lt;p&gt;When using NSLogger without CocoaPods, add &lt;code&gt;LoggerClient.h&lt;/code&gt;, &lt;code&gt;LoggerClient.m&lt;/code&gt; and &lt;code&gt;LoggerCommon.h&lt;/code&gt; (as well as add the &lt;code&gt;CFNetwork.framework&lt;/code&gt; and &lt;code&gt;SystemConfiguration.framework&lt;/code&gt; frameworks) to your iOS or Mac OS X application, then replace your &lt;em&gt;NSLog()&lt;/em&gt; calls with &lt;em&gt;LogMessageCompat()&lt;/em&gt; calls. We recommend using a macro, so you can turn off logs when building the distribution version of your application.&lt;/p&gt; &#xA;&lt;h2&gt;How Does the Connection Work?&lt;/h2&gt; &#xA;&lt;p&gt;For automatic discovery of the desktop viewer, your application must run on a device that is on the same network as your Mac. When your app starts logging, the NSLogger framework automatically (by default) looks for the desktop viewer using &lt;em&gt;Bonjour&lt;/em&gt;. As soon as traces start coming, a new window will open on your Mac.&lt;/p&gt; &#xA;&lt;p&gt;Advanced users can setup a Remote Host / Port to log from a client to a specific host), or specify a Bonjour name in case there are multiple viewers on the network.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Desktop Viewer Features&lt;/h2&gt; &#xA;&lt;p&gt;The desktop viewer application provides tools like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filters (with &lt;a href=&#34;https://github.com/fpillet/NSLogger/wiki/Tips-and-tricks&#34;&gt;regular expression matching&lt;/a&gt;) that let your perform data mining in your logs&lt;/li&gt; &#xA; &lt;li&gt;Timing information: each message displays the time elapsed since the previous message in the filtered display, so you can get a sense of time between events in your application.&lt;/li&gt; &#xA; &lt;li&gt;Image and binary data display directly in the log window&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fpillet/NSLogger/wiki/Tips-and-tricks&#34;&gt;Markers&lt;/a&gt; (when a client is connected, place a marker at the end of a log to clearly see what happens afterwards, for example place a marker before pressing a button in your application)&lt;/li&gt; &#xA; &lt;li&gt;Fast navigation in your logs&lt;/li&gt; &#xA; &lt;li&gt;Display and export all your logs as text&lt;/li&gt; &#xA; &lt;li&gt;Optional display of file, line and function for uncluttered display&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Your logs can be saved to a &lt;code&gt;.nsloggerdata&lt;/code&gt; file, and reloaded later. When logging to a file, name your log file with extension &lt;code&gt;.rawnsloggerdata&lt;/code&gt; so NSLogger can reopen and process it. You can have clients remotely generating raw logger data files, then send them to you so you can investigate post-mortem.&lt;/p&gt; &#xA;&lt;p&gt;Note that the NSLogger Mac OS X viewer requires &lt;strong&gt;Mac OS X 10.6 or later&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/fpillet/NSLogger/raw/master/Screenshots/filtereditor.png&#34; title=&#34;Filter Editor&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Advanced Colors Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Apply colors to tags and messages using regular expressions.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/fpillet/NSLogger/raw/master/Screenshots/advanced_colors_prefs.png&#34; title=&#34;Advanced Colors Preferences&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;To define the color, you can use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A standard NSColor name, for example: &lt;code&gt;blue&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hex colors, for example: &lt;code&gt;#DEAD88&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can add the prefix &lt;code&gt;bold&lt;/code&gt;, for example: &lt;code&gt;bold red&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;High Performance, Low Overhead&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;NSLogger&lt;/em&gt; framework runs in its own thread in your application. It tries hard to consume as few CPU and memory as possible. If the desktop viewer has not been found yet, your traces can be buffered in memory until a connection is acquired. This allows for tracing in difficult situations, for example device wakeup times when the network connection is not up and running.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;NSLogger is Copyright (c) 2010-2018 Florent Pillet, All Rights Reserved, All Wrongs Revenged. Released under the &lt;a href=&#34;http://opensource.org/licenses/bsd-license.php&#34;&gt;New BSD Licence&lt;/a&gt;. The NSLogger icon is Copyright (c) &lt;a href=&#34;http://harboe.me/&#34;&gt;Louis Harboe&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>firebase/FirebaseUI-iOS</title>
    <updated>2022-07-19T01:51:21Z</updated>
    <id>tag:github.com,2022-07-19:/firebase/FirebaseUI-iOS</id>
    <link href="https://github.com/firebase/FirebaseUI-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS UI bindings for Firebase.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FirebaseUI for iOS — UI Bindings for Firebase&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/anonymousauth.yml/badge.svg?sanitize=true&#34; alt=&#34;Anonymous Auth&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/auth.yml/badge.svg?sanitize=true&#34; alt=&#34;Auth&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/database.yml/badge.svg?sanitize=true&#34; alt=&#34;Database&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/emailauth.yml/badge.svg?sanitize=true&#34; alt=&#34;Email Auth&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/facebookauth.yml/badge.svg?sanitize=true&#34; alt=&#34;Facebook Auth&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/firestore.yml/badge.svg?sanitize=true&#34; alt=&#34;Firestore&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/googleauth.yml/badge.svg?sanitize=true&#34; alt=&#34;Google Auth&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/oauth.yml/badge.svg?sanitize=true&#34; alt=&#34;OAuth&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/phoneauth.yml/badge.svg?sanitize=true&#34; alt=&#34;Phone Auth&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/storage.yml/badge.svg?sanitize=true&#34; alt=&#34;Storage&#34;&gt; &lt;img src=&#34;https://github.com/firebase/FirebaseUI-iOS/actions/workflows/sample.yml/badge.svg?sanitize=true&#34; alt=&#34;Samples&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;FirebaseUI is an open-source library for iOS that allows you to quickly connect common UI elements to the &lt;a href=&#34;https://firebase.google.com?utm_source=FirebaseUI-iOS&#34;&gt;Firebase&lt;/a&gt; database for data storage, allowing views to be updated in realtime as they change, and providing simple interfaces for common tasks like displaying lists or collections of items.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, FirebaseUI simplifies Firebase authentication by providing easy to use auth methods that integrate with common identity providers like Facebook, Twitter, and Google as well as allowing developers to use a built in headful UI for ease of development.&lt;/p&gt; &#xA;&lt;p&gt;FirebaseUI clients are also available for &lt;a href=&#34;https://github.com/firebase/FirebaseUI-Android&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://github.com/firebase/firebaseui-web&#34;&gt;web&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/samples/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing FirebaseUI for iOS&lt;/h2&gt; &#xA;&lt;p&gt;FirebaseUI supports iOS 10.0+ and Xcode 11+. We recommend using &lt;a href=&#34;https://cocoapods.org/pods/FirebaseUI&#34;&gt;CocoaPods&lt;/a&gt;, add the following to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FirebaseUI&#39;, &#39;~&amp;gt; 8.0&#39;       # Pull in all Firebase UI features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to use all of FirebaseUI, there are multiple subspecs which can selectively install subsets of the full feature set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Only pull in Firestore features&#xA;pod &#39;FirebaseUI/Firestore&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&#xA;# Only pull in Database features&#xA;pod &#39;FirebaseUI/Database&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&#xA;# Only pull in Storage features&#xA;pod &#39;FirebaseUI/Storage&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&#xA;# Only pull in Auth features&#xA;pod &#39;FirebaseUI/Auth&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&#xA;# Only pull in Facebook login features&#xA;pod &#39;FirebaseUI/Facebook&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&#xA;# Only pull in Google login features&#xA;pod &#39;FirebaseUI/Google&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&#xA;# Only pull in Phone Auth login features&#xA;pod &#39;FirebaseUI/Phone&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re including FirebaseUI in a Swift project, make sure you also have:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;10.0&#39;&#xA;use_frameworks!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, you can include the FirebaseUI Xcode project from this repo in your project. You also need to &lt;a href=&#34;https://firebase.google.com/docs/ios/setup&#34;&gt;add the Firebase framework&lt;/a&gt; to your project.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The READMEs for components of FirebaseUI can be found in their respective project folders.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/Auth/README.md&#34;&gt;Auth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/PhoneAuth/README.md&#34;&gt;PhoneAuth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/Database/README.md&#34;&gt;Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/Firestore/README.md&#34;&gt;Firestore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/Storage/README.md&#34;&gt;Storage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Local Setup&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to FirebaseUI for iOS, you&#39;ll need to run the following commands to get your environment set up:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/firebase/FirebaseUI-iOS.git&#xA;$ cd FirebaseUI-iOS&#xA;$ cd Auth # or PhoneAuth, Database, etc&#xA;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can use &lt;code&gt;pod try FirebaseUI&lt;/code&gt; to install the Objective-C or Swift sample projects.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Project Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll have to configure your Xcode project in order to run the samples.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Your Xcode project should contain a &lt;code&gt;GoogleService-Info.plist&lt;/code&gt;, downloaded from &lt;a href=&#34;https://console.firebase.google.com&#34;&gt;Firebase console&lt;/a&gt; when you add your app to a Firebase project.&lt;br&gt; Copy the &lt;code&gt;GoogleService-Info.plist&lt;/code&gt; into the sample project folder (&lt;code&gt;samples/obj-c/GoogleService-Info.plist&lt;/code&gt; or &lt;code&gt;samples/swift/GoogleService-Info.plist&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update URL Types.&lt;br&gt; Go to &lt;code&gt;Project Settings -&amp;gt; Info tab -&amp;gt; Url Types&lt;/code&gt; and update values for:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;REVERSED_CLIENT_ID&lt;/code&gt; (get value from &lt;code&gt;GoogleService-Info.plist&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;fb{your-app-id}&lt;/code&gt; (put Facebook App Id)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update &lt;code&gt;Info.plist&lt;/code&gt; with Facebook configuration values&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;FacebookAppID -&amp;gt; {your-app-id}&lt;/code&gt; (put Facebook App Id)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Keychain Sharing.&lt;br&gt; Facebook SDK requires keychain sharing.&lt;br&gt; This can be done here: &lt;code&gt;Project Settings -&amp;gt; Capabilities -&amp;gt; KeyChain Sharing -&amp;gt; ON&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Don&#39;t forget to configure your Firebase App Database using &lt;a href=&#34;https://console.firebase.google.com&#34;&gt;Firebase console&lt;/a&gt;.&lt;br&gt; Database should contain appropriate read/write permissions and folders (&lt;code&gt;objc_demo-chat&lt;/code&gt; and &lt;code&gt;swift_demo-chat&lt;/code&gt; respectively)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In Order to use &lt;code&gt;Phone Auth&lt;/code&gt; provider you should &lt;a href=&#34;https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/#configure-apple-push-notifications&#34;&gt;Configure Push Notifications&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Configure Apple Push Notifications&lt;/h4&gt; &#xA;&lt;h5&gt;Enable silent push notifications in Xcode&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Push Notification&lt;/code&gt; - Under &lt;code&gt;Capabilities&lt;/code&gt; tab in your app target choose &lt;code&gt;Push Notifications&lt;/code&gt; and put the switch to the &lt;code&gt;On&lt;/code&gt; position.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Background Mode&lt;/code&gt; - Under &lt;code&gt;Capabilities&lt;/code&gt; tab in your app target choose &lt;code&gt;Background Modes&lt;/code&gt; put the switch to the &lt;code&gt;On&lt;/code&gt; position. In the list of available modes select &lt;code&gt;Background fetch&lt;/code&gt; and &lt;code&gt;Remote notifications&lt;/code&gt; (If available).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Upload APNS Certificate to Firebase&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create your &lt;code&gt;Provisioning APNS SSL Certificates&lt;/code&gt; by following the steps on the following link. &lt;a href=&#34;https://firebase.google.com/docs/cloud-messaging/ios/certs&#34;&gt;https://firebase.google.com/docs/cloud-messaging/ios/certs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Upload your &lt;code&gt;APNS Certificate&lt;/code&gt; to Firebase:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Inside your project in the Firebase console, select the gear icon, select &lt;code&gt;Project Settings&lt;/code&gt;, and then select the &lt;code&gt;Cloud Messaging&lt;/code&gt; tab.&lt;/li&gt; &#xA;   &lt;li&gt;Select the &lt;code&gt;Upload Certificate&lt;/code&gt; button for your development certificate, your production certificate, or both. At least one is required.&lt;/li&gt; &#xA;   &lt;li&gt;For each certificate, select the &lt;code&gt;.p12 file&lt;/code&gt;, and provide the password, if any. Make sure the &lt;code&gt;bundle ID&lt;/code&gt; for this certificate matches the &lt;code&gt;bundle ID&lt;/code&gt; of your app. Select &lt;code&gt;Save&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing to FirebaseUI&lt;/h2&gt; &#xA;&lt;h3&gt;Contributor License Agreements&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;d love to accept your sample apps and patches! Before we can take them, we have to jump a couple of legal hurdles.&lt;/p&gt; &#xA;&lt;p&gt;Please fill out either the individual or corporate Contributor License Agreement (CLA).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are an individual writing original source code and you&#39;re sure you own the intellectual property, then you&#39;ll need to sign an [individual CLA] (&lt;a href=&#34;https://developers.google.com/open-source/cla/individual&#34;&gt;https://developers.google.com/open-source/cla/individual&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If you work for a company that wants to allow you to contribute your work, then you&#39;ll need to sign a [corporate CLA] (&lt;a href=&#34;https://developers.google.com/open-source/cla/corporate&#34;&gt;https://developers.google.com/open-source/cla/corporate&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Follow either of the two links above to access the appropriate CLA and instructions for how to sign and return it. Once we receive it, we&#39;ll be able to accept your pull requests.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution Process&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Submit an issue describing your proposed change to the repo in question.&lt;/li&gt; &#xA; &lt;li&gt;The repo owner will respond to your issue promptly.&lt;/li&gt; &#xA; &lt;li&gt;If your proposed change is accepted, and you haven&#39;t already done so, sign a Contributor License Agreement (see details above).&lt;/li&gt; &#xA; &lt;li&gt;Fork the desired repo, develop and test your code changes.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that your code adheres to the existing style of the library to which you are contributing.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that your code has an appropriate set of unit tests which all pass.&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>MatthewYork/DateTools</title>
    <updated>2022-07-19T01:51:21Z</updated>
    <id>tag:github.com,2022-07-19:/MatthewYork/DateTools</id>
    <link href="https://github.com/MatthewYork/DateTools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dates and times made easy in iOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MatthewYork/Resources/master/DateTools/DateToolsHeader2.png&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;DateTools&lt;/h2&gt; &#xA;&lt;p&gt;DateTools was written to streamline date and time handling in iOS. Classes and concepts from other languages served as an inspiration for DateTools, especially the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110).aspx&#34;&gt;DateTime&lt;/a&gt; structure and &lt;a href=&#34;http://www.codeproject.com/Articles/168662/Time-Period-Library-for-NET&#34;&gt;Time Period Library&lt;/a&gt; for .NET. Through these classes and others, DateTools removes the boilerplate required to access date components, handles more nuanced date comparisons, and serves as the foundation for entirely new concepts like Time Periods and their collections.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/MatthewYork/DateTools&#34;&gt;&lt;img src=&#34;https://travis-ci.org/MatthewYork/DateTools.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/?q=datetools&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/v/DateTools/badge.png&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/?q=datetoolsswift&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/v/DateToolsSwift/badge.png&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Featured In&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://itunes.apple.com/hk/app/yahoo-livetext-video-messenger/id995121875?mt=8&#34;&gt;&lt;img src=&#34;http://a4.mzstatic.com/us/r30/Purple2/v4/7c/1b/11/7c1b11f3-2a73-b655-751e-b21b2e8bc6f7/icon100x100.png&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://itunes.apple.com/app/id547436543&#34;&gt;&lt;img src=&#34;http://a5.mzstatic.com/us/r30/Purple5/v4/1f/7b/a5/1f7ba545-038e-353e-18a0-b6472eef1913/icon100x100.jpeg&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://itunes.apple.com/us/app/aldi-usa/id429396645?mt=8&#34;&gt;&lt;img src=&#34;http://a4.mzstatic.com/us/r30/Purple7/v4/a7/63/20/a76320db-2de4-62ad-b620-efaab8a179dc/icon100x100.jpeg&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://itunes.apple.com/us/app/guidebook/id428713847?mt=8&#34;&gt;&lt;img src=&#34;http://a5.mzstatic.com/us/r30/Purple7/v4/e4/af/db/e4afdbc1-9ceb-c403-4d06-299e7e693120/icon100x100.png&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://itunes.apple.com/us/app/youtube-music/id1017492454?mt=8&#34;&gt;&lt;img src=&#34;http://is1.mzstatic.com/image/thumb/Purple128/v4/e7/95/2c/e7952c89-2642-0e3c-eacc-482a95d73318/source/100x100bb.jpg&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://itunes.apple.com/us/app/khan-academy/id469863705?mt=8&#34;&gt;&lt;img src=&#34;http://is2.mzstatic.com/image/thumb/Purple118/v4/da/b2/55/dab255a6-80b5-c4fb-f5c4-b4c143b8d4a8/source/100x100bb.jpg&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yahoo! Livetext&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;My Disney Experience&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ALDI&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Guidebook&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Youtube Music&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Khan Academy&lt;/td&gt; &#xA;  &lt;/tr&gt;  &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Donate&lt;/h4&gt; &#xA;&lt;p&gt;&lt;span&gt;&lt;img width=&#34;13px&#34; src=&#34;https://i.pinimg.com/originals/c2/9e/0c/c29e0cba21b01826ab5d87187bd2c793.png&#34;&gt; &lt;/span&gt;&lt;span&gt;&lt;b&gt;bitcoin:&lt;/b&gt; 17ZEBFw5peuoUwYaEJeGkpoJwP1htViLUY &lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;CocoaPods&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pod &#39;DateToolsSwift&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Objective-C (Legacy)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pod &#39;DateTools&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Manual Installation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;All the classes required for DateTools are located in the DateTools folder in the root of this repository. They are listed below:&lt;/p&gt; &#xA;&lt;p&gt;Swift (Found in DateToolsSwift/DateTools)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Constants.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Date+Bundle.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Date+Comparators.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Date+Components.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Date+Format.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Date+Inits.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Date+Manipulations.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Date+TimeAgo.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DateTools.bundle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Enums.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Integer.DateTools.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TimeChunk.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TimePeriod.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TimePeriodChain.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TimePeriodCollection.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TimePeriodGroup.swift&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Objective-C (Found in DateTools/DateTools)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DateTools.h&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSDate+DateTools.{h,m}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DTConstants.h&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DTError.{h,m}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DTTimePeriod.{h,m}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DTTimePeriodGroup.{h,m}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DTTimePeriodCollection.{h,m}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DTTimePeriodChain.{h,m}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following bundle is necessary if you would like to support internationalization or would like to use the &#34;Time Ago&#34; functionality. You can add localizations at the &lt;code&gt;Localizations&lt;/code&gt; subheading under &lt;code&gt;Info&lt;/code&gt; in the &lt;code&gt;Project&lt;/code&gt; menu.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DateTools.bundle&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;DateTools.h&lt;/code&gt; contains the headers for all the other files. Import this if you want to link to the entire framework.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#datetools&#34;&gt;&lt;strong&gt;DateTools&lt;/strong&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#time-ago&#34;&gt;Time Ago&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#date-components&#34;&gt;Date Components&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#date-editing&#34;&gt;Date Editing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#date-comparison&#34;&gt;Date Comparison&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#formatted-date-strings&#34;&gt;Formatted Date Strings&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#time-periods&#34;&gt;&lt;strong&gt;Time Periods&lt;/strong&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#initialization&#34;&gt;Initialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#time-period-info&#34;&gt;Time Period Info&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#manipulation&#34;&gt;Manipulation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#relationships&#34;&gt;Relationships&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#time-period-groups&#34;&gt;&lt;strong&gt;Time Period Groups&lt;/strong&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#time-period-collections&#34;&gt;Time Period Collections&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#time-period-chains&#34;&gt;Time Period Chains&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#unit-tests&#34;&gt;&lt;strong&gt;Unit Tests&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#credits&#34;&gt;&lt;strong&gt;Credits&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MatthewYork/DateTools/master/#license&#34;&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;DateTools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Full code documentation can be found &lt;a href=&#34;http://cocoadocs.org/docsets/DateToolsSwift/2.0.0/&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;One of the missions of DateTools was to make Date feel more complete. There are many other languages that allow direct access to information about dates from their date classes, but Date (sadly) does not. It safely works only in the Unix time offsets through the &lt;code&gt;timeIntervalSince...&lt;/code&gt; methods for building dates and remains calendar agnostic. But that&#39;s not &lt;i&gt;always&lt;/i&gt; what we want to do. Sometimes, we want to work with dates based on their date components (like year, month, day, etc) at a more abstract level. This is where DateTools comes in.&lt;/p&gt; &#xA;&lt;h4&gt;Time Ago&lt;/h4&gt; &#xA;&lt;p&gt;No date library would be complete without the ability to quickly make an NSString based on how much earlier a date is than now. DateTools has you covered. These &#34;time ago&#34; strings come in a long and short form, with the latter closely resembling Twitter. You can get these strings like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let timeAgoDate = 2.days.earlier&#xA;print(&#34;Time Ago: &#34;, timeAgoDate.timeAgoSinceNow)&#xA;print(&#34;Time Ago: &#34;, timeAgoDate.shortTimeAgoSinceNow)&#xA;&#xA;//Output:&#xA;//Time Ago: 2 days ago&#xA;//Time Ago: 2d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assuming you have added the localization to your project, &lt;code&gt;DateTools&lt;/code&gt; currently supports the following languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ar (Arabic)&lt;/li&gt; &#xA; &lt;li&gt;bg (Bulgarian)&lt;/li&gt; &#xA; &lt;li&gt;ca (Catalan)&lt;/li&gt; &#xA; &lt;li&gt;zh_Hans (Chinese Simplified)&lt;/li&gt; &#xA; &lt;li&gt;zh_Hant (Chinese Traditional)&lt;/li&gt; &#xA; &lt;li&gt;cs (Czech)&lt;/li&gt; &#xA; &lt;li&gt;da (Danish)&lt;/li&gt; &#xA; &lt;li&gt;nl (Dutch)&lt;/li&gt; &#xA; &lt;li&gt;en (English)&lt;/li&gt; &#xA; &lt;li&gt;fi (Finnish)&lt;/li&gt; &#xA; &lt;li&gt;fr (French)&lt;/li&gt; &#xA; &lt;li&gt;de (German)&lt;/li&gt; &#xA; &lt;li&gt;gre (Greek)&lt;/li&gt; &#xA; &lt;li&gt;gu (Gujarati)&lt;/li&gt; &#xA; &lt;li&gt;he (Hebrew)&lt;/li&gt; &#xA; &lt;li&gt;hi (Hindi)&lt;/li&gt; &#xA; &lt;li&gt;hu (Hungarian)&lt;/li&gt; &#xA; &lt;li&gt;is (Icelandic)&lt;/li&gt; &#xA; &lt;li&gt;id (Indonesian)&lt;/li&gt; &#xA; &lt;li&gt;it (Italian)&lt;/li&gt; &#xA; &lt;li&gt;ja (Japanese)&lt;/li&gt; &#xA; &lt;li&gt;ko (Korean)&lt;/li&gt; &#xA; &lt;li&gt;lv (Latvian)&lt;/li&gt; &#xA; &lt;li&gt;ms (Malay)&lt;/li&gt; &#xA; &lt;li&gt;nb (Norwegian)&lt;/li&gt; &#xA; &lt;li&gt;pl (Polish)&lt;/li&gt; &#xA; &lt;li&gt;pt (Portuguese)&lt;/li&gt; &#xA; &lt;li&gt;ro (Romanian)&lt;/li&gt; &#xA; &lt;li&gt;ru (Russian)&lt;/li&gt; &#xA; &lt;li&gt;sl (Slovenian)&lt;/li&gt; &#xA; &lt;li&gt;es (Spanish)&lt;/li&gt; &#xA; &lt;li&gt;sv (Swedish)&lt;/li&gt; &#xA; &lt;li&gt;th (Thai)&lt;/li&gt; &#xA; &lt;li&gt;tr (Turkish)&lt;/li&gt; &#xA; &lt;li&gt;uk (Ukrainian)&lt;/li&gt; &#xA; &lt;li&gt;vi (Vietnamese)&lt;/li&gt; &#xA; &lt;li&gt;cy (Welsh)&lt;/li&gt; &#xA; &lt;li&gt;hr (Croatian)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you know a language not listed here, please consider submitting a translation. &lt;a href=&#34;http://stackoverflow.com/questions/3040677/locale-codes-for-iphone-lproj-folders&#34;&gt;Localization codes by language&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project is user driven (by people like you). Pull requests close faster than issues (merged or rejected).&lt;/p&gt; &#xA;&lt;p&gt;Thanks to Kevin Lawler for his work on &lt;a href=&#34;https://github.com/kevinlawler/NSDate-TimeAgo&#34;&gt;NSDate+TimeAgo&lt;/a&gt;, which has been officially merged into this library.&lt;/p&gt; &#xA;&lt;h4&gt;Date Components&lt;/h4&gt; &#xA;&lt;p&gt;There is a lot of boilerplate associated with getting date components from an Date. You have to set up a calendar, use the desired flags for the components you want, and finally extract them out of the calendar.&lt;/p&gt; &#xA;&lt;p&gt;With DateTools, this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//Create calendar&#xA;let calendar = Calendar(identifier: .gregorian)&#xA;let dateComponents = calendar.dateComponents(Set&amp;lt;Calendar.Component&amp;gt;([.month,.year]), from: Date())&#xA;        &#xA;//Get components&#xA;let year = dateComponents.year!&#xA;let month = dateComponents.month!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...becomes this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let year = Date().year&#xA;let month = Date().month&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Date Editing&lt;/h4&gt; &#xA;&lt;p&gt;The date editing methods in DateTools makes it easy to shift a date earlier or later by adding and subtracting date components. For instance, if you would like a date that is 1 year later from a given date, simply call the method &lt;code&gt;dateByAddingYears&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With DateTools, this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//Create calendar&#xA;NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:[NSDate defaultCalendar]];&#xA;NSDateComponents *components = [[NSDateComponents alloc] init];&#xA;&#xA;//Make changes&#xA;[components setYear:1];&#xA;&#xA;//Get new date with updated year&#xA;NSDate *newDate = [calendar dateByAddingComponents:components toDate:date options:0];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...becomes this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSDate *newDate = [date dateByAddingYears:1];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Subtraction of date components is also fully supported through the &lt;code&gt;dateBySubtractingYears&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Date Comparison&lt;/h4&gt; &#xA;&lt;p&gt;Another mission of the DateTools category is to greatly increase the flexibility of date comparisons. Date gives you four basic methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;isEqualToDate:&lt;/li&gt; &#xA; &lt;li&gt;earlierDate:&lt;/li&gt; &#xA; &lt;li&gt;laterDate:&lt;/li&gt; &#xA; &lt;li&gt;compare:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;earlierDate:&lt;/code&gt; and &lt;code&gt;laterDate:&lt;/code&gt; are great, but it would be nice to have a boolean response to help when building logic in code; to easily ask &#34;is this date earlier than that one?&#34;. DateTools has a set of proxy methods that do just that as well as a few other methods for extended flexibility. The new methods are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;isEarlierThan&lt;/li&gt; &#xA; &lt;li&gt;isEarlierThanOrEqualTo&lt;/li&gt; &#xA; &lt;li&gt;isLaterThan&lt;/li&gt; &#xA; &lt;li&gt;isLaterThanOrEqualTo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These methods are great for comparing dates in a boolean fashion, but what if we want to compare the dates and return some meaningful information about how far they are apart? Date comes with two methods &lt;code&gt;timeIntervalSinceDate:&lt;/code&gt; and &lt;code&gt;timeIntervalSinceNow&lt;/code&gt; which gives you a &lt;code&gt;double&lt;/code&gt; offset representing the number of seconds between the two dates. This is great and all, but there are times when one wants to know how many years or days are between two dates. For this, DateTools goes back to the ever-trusty NSCalendar and abstracts out all the necessary code for you.&lt;/p&gt; &#xA;&lt;p&gt;With Date Tools, this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:[NSDate defaultCalendar]];&#xA;NSDate *earliest = [firstDate earlierDate:secondDate];&#xA;NSDate *latest = (secondDate == firstDate) ? secondDate : firstDate;&#xA;NSInteger multiplier = (secondDate == firstDate) ? -1 : 1;&#xA;NSDateComponents *components = [calendar components:allCalendarUnitFlags fromDate:earliest toDate:latest options:0];&#xA;NSInteger yearsApart = multiplier*(components.month + 12*components.year);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;..becomes this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSInteger yearsApart = [firstDate yearsFrom:secondDate];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Methods for comparison in this category include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yearsFrom:&lt;/code&gt;, &lt;code&gt;yearsUntil&lt;/code&gt;, &lt;code&gt;yearsAgo&lt;/code&gt;, &lt;code&gt;yearsEarlierThan:&lt;/code&gt;, &lt;code&gt;yearsLaterThan:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;monthsFrom:&lt;/code&gt;, &lt;code&gt;monthsUntil&lt;/code&gt;, &lt;code&gt;monthsAgo&lt;/code&gt;, &lt;code&gt;monthsEarlierThan:&lt;/code&gt;, &lt;code&gt;monthsLaterThan:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;weeksFrom:&lt;/code&gt;, &lt;code&gt;weeksUntil&lt;/code&gt;, &lt;code&gt;weeksAgo&lt;/code&gt;, &lt;code&gt;weeksEarlierThan:&lt;/code&gt;, &lt;code&gt;weeksLaterThan:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;daysFrom:&lt;/code&gt;, &lt;code&gt;daysUntil&lt;/code&gt;, &lt;code&gt;daysAgo&lt;/code&gt;, &lt;code&gt;daysEarlierThan:&lt;/code&gt;, &lt;code&gt;daysLaterThan:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hoursFrom:&lt;/code&gt;, &lt;code&gt;hoursUntil&lt;/code&gt;, &lt;code&gt;hoursAgo&lt;/code&gt;, &lt;code&gt;hoursEarlierThan:&lt;/code&gt;, &lt;code&gt;hoursLaterThan:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;minutesFrom:&lt;/code&gt;, &lt;code&gt;minutesUntil&lt;/code&gt;, &lt;code&gt;minutesAgo&lt;/code&gt;, &lt;code&gt;minutesEarlierThan:&lt;/code&gt;, &lt;code&gt;minutesLaterThan:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;secondsFrom:&lt;/code&gt;, &lt;code&gt;secondsUntil&lt;/code&gt;, &lt;code&gt;secondsAgo&lt;/code&gt;, &lt;code&gt;secondsEarlierThan:&lt;/code&gt;, &lt;code&gt;secondsLaterThan:&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Formatted Date Strings&lt;/h4&gt; &#xA;&lt;p&gt;Just for kicks, DateTools has a few convenience methods for quickly creating strings from dates. Those two methods are &lt;code&gt;formattedDateWithStyle:&lt;/code&gt; and &lt;code&gt;formattedDateWithFormat:&lt;/code&gt;. The current locale is used unless otherwise specified by additional method parameters. Again, just for kicks, really.&lt;/p&gt; &#xA;&lt;h2&gt;Time Periods&lt;/h2&gt; &#xA;&lt;p&gt;Dates are important, but the real world is a little less discrete than that. Life is made up of spans of time, like an afternoon appointment or a weeklong vacation. In DateTools, time periods are represented by the TimePeriod class and come with a suite of initializaiton, manipulation, and comparison methods to make working with them a breeze.&lt;/p&gt; &#xA;&lt;h4&gt;Initialization&lt;/h4&gt; &#xA;&lt;p&gt;Time peroids consist of an Date start date and end date. To initialize a time period, call the init function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;DTTimePeriod *timePeriod = [[DTTimePeriod alloc] initWithStartDate:startDate endDate:endDate];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, if you would like to create a time period of a known length that starts or ends at a certain time, try out a few other init methods. The method below, for example, creates a time period starting at the current time that is exactly 5 hours long.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;DTTimePeriod *timePeriod = [DTTimePeriod timePeriodWithSize:DTTimePeriodSizeHour amount:5 startingAt:[NSDate date]];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Time Period Info&lt;/h4&gt; &#xA;&lt;p&gt;A host of methods have been extended to give information about an instance of TimePeriod. A few are listed below&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;hasStartDate&lt;/code&gt; - Returns true if the period has a start date&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hasEndDate&lt;/code&gt; - Returns true if the period has an end date&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isMoment&lt;/code&gt; - Returns true if the period has the same start and end date&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;durationIn....&lt;/code&gt; - Returns the length of the time period in the requested units&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Manipulation&lt;/h4&gt; &#xA;&lt;p&gt;Time periods may also be manipulated. They may be shifted earlier or later as well as expanded and contracted.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shifting&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When a time period is shifted, the start dates and end dates are both moved earlier or later by the amounts requested. To shift a time period earlier, call &lt;code&gt;shiftEarlierWithSize:amount:&lt;/code&gt; and to shift it later, call &lt;code&gt;shiftLaterWithSize:amount:&lt;/code&gt;. The amount field serves as a multipler, just like in the above initializaion method.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Lengthening/Shortening&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When a time periods is lengthened or shortened, it does so anchoring one date of the time period and then changing the other one. There is also an option to anchor the centerpoint of the time period, changing both the start and end dates.&lt;/p&gt; &#xA;&lt;p&gt;An example of lengthening a time period is shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;DTTimePeriod *timePeriod  = [DTTimePeriod timePeriodWithSize:DTTimePeriodSizeMinute endingAt:[NSDate date]];&#xA;[timePeriod lengthenWithAnchorDate:DTTimePeriodAnchorEnd size:DTTimePeriodSizeMinute amount:1];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This doubles a time period of duration 1 minute to duration 2 minutes. The end date of &#34;now&#34; is retained and only the start date is shifted 1 minute earlier.&lt;/p&gt; &#xA;&lt;h4&gt;Relationships&lt;/h4&gt; &#xA;&lt;p&gt;There may come a need, say when you are making a scheduling app, when it might be good to know how two time periods relate to one another. Are they the same? Is one inside of another? All these questions may be asked using the relationship methods of TimePeriod.&lt;/p&gt; &#xA;&lt;p&gt;Below is a chart of all the possible relationships between two time periods: &lt;img src=&#34;https://raw.githubusercontent.com/MatthewYork/Resources/master/DateTools/PeriodRelations.png&#34; alt=&#34;TimePeriods&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A suite of methods have been extended to check for the basic relationships. They are listed below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;isEqualToPeriod:&lt;/li&gt; &#xA; &lt;li&gt;isInside:&lt;/li&gt; &#xA; &lt;li&gt;contains:&lt;/li&gt; &#xA; &lt;li&gt;overlapsWith:&lt;/li&gt; &#xA; &lt;li&gt;intersects:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also check for the official relationship (like those shown in the chart) with the following method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;-(DTTimePeriodRelation)relationToPeriod:(DTTimePeriod *)period;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All of the possible relationships have been enumerated in the TimePeriodRelation enum.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For a better grasp on how time periods relate to one another, check out the &#34;Time Periods&#34; tab in the example application. Here you can slide a few time periods around and watch their relationships change.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MatthewYork/Resources/master/DateTools/TimePeriodsDemo.gif&#34; alt=&#34;TimePeriods&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Time Period Groups&lt;/h2&gt; &#xA;&lt;p&gt;Time period groups are the final abstraction of date and time in DateTools. Here, time periods are gathered and organized into something useful. There are two main types of time period groups, &lt;code&gt;TimePeriodCollection&lt;/code&gt; and &lt;code&gt;TimePeriodChain&lt;/code&gt;. At a high level, think about a collection as a loose group where overlaps may occur and a chain a more linear, tight group where overlaps are not allowed.&lt;/p&gt; &#xA;&lt;p&gt;Both collections and chains operate like an NSArray. You may add,insert and remove TimePeriod objects from them just as you would objects in an array. The difference is how these periods are handled under the hood.&lt;/p&gt; &#xA;&lt;h3&gt;Time Period Collections&lt;/h3&gt; &#xA;&lt;p&gt;Time period collections serve as loose sets of time periods. They are unorganized unless you decide to sort them, and have their own characteristics like a StartDate and EndDate that are extrapolated from the time periods within. Time period collections allow overlaps within their set of time periods.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MatthewYork/Resources/master/DateTools/TimePeriodCollection.png&#34; alt=&#34;TimePeriodCollections&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To make a new collection, call the class method like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//Create collection&#xA;DTTimePeriodCollection *collection = [DTTimePeriodCollection collection];&#xA;&#xA;//Create a few time periods&#xA; DTTimePeriod *firstPeriod = [DTTimePeriod timePeriodWithStartDate:[dateFormatter dateFromString:@&#34;2014 11 05 18:15:12.000&#34;] endDate:[dateFormatter dateFromString:@&#34;2015 11 05 18:15:12.000&#34;]];&#xA;    DTTimePeriod *secondPeriod = [DTTimePeriod timePeriodWithStartDate:[dateFormatter dateFromString:@&#34;2015 11 05 18:15:12.000&#34;] endDate:[dateFormatter dateFromString:@&#34;2016 11 05 18:15:12.000&#34;]];&#xA;&#xA;//Add time periods to the colleciton&#xA;[collection addTimePeriod:firstPeriod];&#xA;[collection addTimePeriod:secondPeriod];&#xA;&#xA;//Retreive collection items&#xA;DTTimePeriod *firstPeriod = collection[0];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sorting&lt;/strong&gt; Sorting time periods in a collection is easy, just call one of the sort methods. There are a total of three sort options, listed below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start Date&lt;/strong&gt; - &lt;code&gt;sortByStartAscending&lt;/code&gt;, &lt;code&gt;sortByStartDescending&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;End Date&lt;/strong&gt; - &lt;code&gt;sortByEndAscending&lt;/code&gt;, &lt;code&gt;sortByEndDescending&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Time Period Duration&lt;/strong&gt; - &lt;code&gt;sortByDurationAscending&lt;/code&gt;, &lt;code&gt;sortByDurationDescending&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Operations&lt;/strong&gt; It is also possible to check an Date&#39;s or TimePeriod&#39;s relationship to the collection. For instance, if you would like to see all the time periods that intersect with a certain date, you can call the &#xA; &lt;cdoe&gt;&#xA;  periodsIntersectedByDate: method. The result is a new TimePeriodCollection with all those periods that intersect the provided date. There are a host of other methods to try out as well, including a full equality check between two collections.&#xA; &lt;/cdoe&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MatthewYork/Resources/master/DateTools/TimePeriodCollectionOperations.png&#34; alt=&#34;TimePeriodCollectionOperations&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Time Period Chains&lt;/h3&gt; &#xA;&lt;p&gt;Time period chains serve as a tightly coupled set of time periods. They are always organized by start and end date, and have their own characteristics like a StartDate and EndDate that are extrapolated from the time periods within. Time period chains do not allow overlaps within their set of time periods. This type of group is ideal for modeling schedules like sequential meetings or appointments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MatthewYork/Resources/master/DateTools/TimePeriodChain.png&#34; alt=&#34;TimePeriodChains&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To make a new chain, call the class method like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//Create chain&#xA;DTTimePeriodChain *chain = [DTTimePeriodChain chain];&#xA;&#xA;//Create a few time periods&#xA; DTTimePeriod *firstPeriod = [DTTimePeriod timePeriodWithStartDate:[dateFormatter dateFromString:@&#34;2014 11 05 18:15:12.000&#34;] endDate:[dateFormatter dateFromString:@&#34;2015 11 05 18:15:12.000&#34;]];&#xA;DTTimePeriod *secondPeriod = [DTTimePeriod timePeriodWithStartDate:[dateFormatter dateFromString:@&#34;2015 11 05 18:15:12.000&#34;] endDate:[dateFormatter dateFromString:@&#34;2016 11 05 18:15:12.000&#34;]];&#xA;&#xA;//Add test periods&#xA;[chain addTimePeriod:firstPeriod];&#xA;[chain addTimePeriod:secondPeriod];&#xA;&#xA;//Retreive chain items&#xA;DTTimePeriod *firstPeriod = chain[0];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any time a date is added to the time chain, it retains its duration, but is modified to have its StartDate be the same as the latest period in the chain&#39;s EndDate. This helps keep the tightly coupled structure of the chain&#39;s time periods. Inserts (besides those at index 0) shift dates after insertion index by the duration of the new time period while leaving those at indexes before untouched. Insertions at index 0 shift the start date of the collection by the duration of the new time period. A full list of operations can be seen below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Operations&lt;/strong&gt; Like collections, chains have an equality check and the ability to be shifted earlier and later. Here is a short list of other operations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MatthewYork/Resources/master/DateTools/TimePeriodChainOperations.png&#34; alt=&#34;TimePeriodChainOperations&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;All methods and variables have been documented and are available for option+click inspection, just like the SDK classes. This includes an explanation of the methods as well as what their input and output parameters are for. Please raise an issue if you ever feel documentation is confusing or misleading and we will get it fixed up!&lt;/p&gt; &#xA;&lt;h2&gt;Unit Tests&lt;/h2&gt; &#xA;&lt;p&gt;Unit tests were performed on all the major classes in the library for quality assurance. You can find theses under the &#34;Tests&#34; folder at the top of the library. There are over 300 test cases in all!&lt;/p&gt; &#xA;&lt;p&gt;If you ever find a test case that is incomplete, please open an issue so we can get it fixed.&lt;/p&gt; &#xA;&lt;p&gt;Continuous integration testing is performed by Travis CI: &lt;a href=&#34;https://travis-ci.org/MatthewYork/DateTools&#34;&gt;&lt;img src=&#34;https://travis-ci.org/MatthewYork/DateTools.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to &lt;a href=&#34;https://github.com/GraysonWebster&#34;&gt;Grayson Webster&lt;/a&gt; for helping rethink DateTools for Swift and crank out the necessary code!&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/kevinlawler&#34;&gt;Kevin Lawler&lt;/a&gt; for his initial work on NSDate+TimeAgo. It laid the foundation for DateTools&#39; timeAgo methods. You can find this great project &lt;a href=&#34;https://github.com/kevinlawler/NSDate-TimeAgo&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Many thanks to the .NET team for their DateTime class and a major thank you to &lt;a href=&#34;http://www.codeproject.com/Members/Jani-Giannoudis&#34;&gt;Jani Giannoudis&lt;/a&gt; for his work on ITimePeriod.&lt;/p&gt; &#xA;&lt;p&gt;Images were first published through itenso.com through &lt;a href=&#34;http://www.codeproject.com/Articles/168662/Time-Period-Library-for-NET&#34;&gt;Code Project&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I would also like to thank &lt;strong&gt;God&lt;/strong&gt; through whom all things live and move and have their being. &lt;a href=&#34;http://www.biblegateway.com/passage/?search=Acts+17%3A16-34&amp;amp;version=NIV&#34;&gt;Acts 17:28&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2014 Matthew York&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
</feed>