<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-09T01:33:15Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>m1entus/MZFormSheetPresentationController</title>
    <updated>2024-07-09T01:33:15Z</updated>
    <id>tag:github.com,2024-07-09:/m1entus/MZFormSheetPresentationController</id>
    <link href="https://github.com/m1entus/MZFormSheetPresentationController" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MZFormSheetPresentationController provides an alternative to the native iOS UIModalPresentationFormSheet, adding support for iPhone and additional opportunities to setup UIPresentationController size and feel form sheet.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://inspace.io&#34;&gt;&lt;img src=&#34;http://inspace.io/github-cover.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;MZFormSheetPresentationController&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;MZFormSheetPresentationController&lt;/code&gt; provides an alternative to the native iOS UIModalPresentationFormSheet, adding support for iPhone and additional opportunities to setup controller size and feel form sheet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MZFormSheetPresentationController&lt;/code&gt; also has a number of predefined transitions so you can customize whether the modal form slides in, fades in, bounces in or you can create your own custom transition. There are also a number of properties for customizing the exact look and position of the form. It support also pan gesture dismissing.&lt;/p&gt; &#xA;&lt;p&gt;This project is continuation of &lt;a href=&#34;https://github.com/m1entus/MZFormSheetController&#34;&gt;&lt;code&gt;MZFormSheetController&lt;/code&gt;&lt;/a&gt; which allow you to make form sheet when deployment target is set to &amp;gt;iOS5 but use some tricky UIWindow hacks.&lt;/p&gt; &#xA;&lt;p&gt;Here are a couple of images showing &lt;code&gt;MZFormSheetPresentationController&lt;/code&gt; in action:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.github.com/m1entus/MZFormSheetPresentationController/master/Screens/animation2.gif&#34;&gt;&lt;img src=&#34;https://raw.github.com/m1entus/MZFormSheetPresentationController/master/Screens/animation2.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.github.com/m1entus/MZFormSheetPresentationController/master/Screens/animation1.gif&#34;&gt;&lt;img src=&#34;https://raw.github.com/m1entus/MZFormSheetPresentationController/master/Screens/animation1.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.github.com/m1entus/MZFormSheetPresentationController/master/Screens/screen2.png&#34;&gt;&lt;img src=&#34;https://raw.github.com/m1entus/MZFormSheetPresentationController/master/Screens/screen2.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.github.com/m1entus/MZFormSheetPresentationController/master/Screens/screen1.png&#34;&gt;&lt;img src=&#34;https://raw.github.com/m1entus/MZFormSheetPresentationController/master/Screens/screen1.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2.x Change Log:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully tested and certified for iOS 9&lt;/li&gt; &#xA; &lt;li&gt;Support for tvOS&lt;/li&gt; &#xA; &lt;li&gt;Fixed issue with text size based on size class&lt;/li&gt; &#xA; &lt;li&gt;Fixed autolayout issues&lt;/li&gt; &#xA; &lt;li&gt;Added dissmisal pan gesture on each direction&lt;/li&gt; &#xA; &lt;li&gt;Rewritten &lt;code&gt;MZFormSheetPresentationController&lt;/code&gt; to use &lt;code&gt;UIPresentationController&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for adding shadow to content view&lt;/li&gt; &#xA; &lt;li&gt;Added frame configuration handler which allow you to change frame during rotation and animations&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;shouldCenterHorizontally&lt;/code&gt; property&lt;/li&gt; &#xA; &lt;li&gt;Allowed make your custom animator to support native transitions&lt;/li&gt; &#xA; &lt;li&gt;Allow to make dynamic contentViewSize depents on displayed UIViewController&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Upgrade from 1.x&lt;/h2&gt; &#xA;&lt;p&gt;As a major version change, the API introduced in 2.0 is not backward compatible with 1.x integrations. Upgrading is straightforward.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;MZFormSheetPresentationViewController&lt;/code&gt; instead of &lt;code&gt;MZFormSheetPresentationController&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;MZFormSheetPresentationController&lt;/code&gt; now inherits from &lt;code&gt;UIPresentationController&lt;/code&gt; and manage presentation of popup&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;MZFormSheetPresentationViewController&lt;/code&gt; have property &lt;code&gt;presentationController&lt;/code&gt; which allows you customization presented content view&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;MZFormSheetPresentationController registerTransitionClass&lt;/code&gt; is now &lt;code&gt;MZTransition registerTransitionClass&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;func entryFormSheetControllerTransition(formSheetController: MZFormSheetPresentationController, completionHandler: MZTransitionCompletionHandler)&lt;/code&gt; changed to &lt;code&gt;func entryFormSheetControllerTransition(formSheetController: UIViewController, completionHandler: MZTransitionCompletionHandler)&lt;/code&gt; which formSheetController frame is equal to contentViewSize with view origin.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;MZFormSheetPresentationController requires either iOS 8.x and above.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;###&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;github &#34;m1entus/MZFormSheetPresentationController&#34; &#34;master&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;carthage update --no-use-binaries&lt;/code&gt; or just &lt;code&gt;carthage update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After building the framework you will need to add it to your project and import it using the Framework header:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#import &amp;lt;MZFormSheetPresentationController/MZFormSheetPresentationControllerFramework.h&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For further details on the installation and usage of Carthage, visit &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;it&#39;s project page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;###&lt;a href=&#34;https://github.com/CocoaPods/CocoaPods&#34;&gt;CocoaPods&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the following line to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Uncomment this line to define a global platform for your project&#xA;platform :ios, &#39;8.0&#39;&#xA;# Uncomment this line if you&#39;re using Swift&#xA;use_frameworks!&#xA;&#xA;target &#39;ProjectName&#39; do&#xA;    pod &#39;MZFormSheetPresentationController&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;pod install --verbose&lt;/code&gt; or just &lt;code&gt;pod install&lt;/code&gt;. For details of the installation and usage of CocoaPods, visit &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods&#34;&gt;it&#39;s project page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How To Use&lt;/h2&gt; &#xA;&lt;p&gt;There are two example projects, one is for Objective-C second is for Swift.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s start with a simple example&lt;/p&gt; &#xA;&lt;p&gt;Objective-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;UINavigationController *navigationController = [self.storyboard instantiateViewControllerWithIdentifier:@&#34;formSheetController&#34;];&#xA;MZFormSheetPresentationViewController *formSheetController = [[MZFormSheetPresentationViewController alloc] initWithContentViewController:navigationController];&#xA;formSheetController.presentationController.contentViewSize = CGSizeMake(250, 250); // or pass in UILayoutFittingCompressedSize to size automatically with auto-layout&#xA;&#xA;[self presentViewController:formSheetController animated:YES completion:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let navigationController = self.storyboard!.instantiateViewController(withIdentifier: &#34;formSheetController&#34;) as! UINavigationController&#xA;let formSheetController = MZFormSheetPresentationViewController(contentViewController: navigationController)&#xA;formSheetController.presentationController?.contentViewSize = CGSize(width: 250, height: 250)  // or pass in UILayoutFittingCompressedSize to size automatically with auto-layout&#xA;&#xA;self.present(formSheetController, animated: true, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will display view controller inside form sheet container.&lt;/p&gt; &#xA;&lt;p&gt;If you want to dismiss form sheet controller, use default dismissing view controller action.&lt;/p&gt; &#xA;&lt;p&gt;Objective-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[self dismissViewControllerAnimated:YES completion:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.dismiss(animated: true, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Easy right ?!&lt;/p&gt; &#xA;&lt;h2&gt;Passing data&lt;/h2&gt; &#xA;&lt;p&gt;If you want to pass data to presenting view controller, you are doing it like normal. Just remember that IBOutlets are initialized after viewDidLoad, if you don&#39;t want to create additional properies, you can always use completion handler &lt;code&gt;willPresentContentViewControllerHandler&lt;/code&gt; to pass data directly to outlets. It is called after viewWillAppear and before &lt;code&gt;MZFormSheetPresentationViewController&lt;/code&gt; animation.&lt;/p&gt; &#xA;&lt;p&gt;Objective-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MZFormSheetPresentationViewController *formSheetController = [[MZFormSheetPresentationViewController alloc] initWithContentViewController:navigationController];&#xA;&#xA;PresentedTableViewController *presentedViewController = [navigationController.viewControllers firstObject];&#xA;presentedViewController.textFieldBecomeFirstResponder = YES;&#xA;presentedViewController.passingString = @&#34;PASSSED DATA!!&#34;;&#xA;&#xA;formSheetController.willPresentContentViewControllerHandler = ^(UIViewController *vc) {&#xA;    UINavigationController *navigationController = (id)vc;&#xA;    PresentedTableViewController *presentedViewController = [navigationController.viewControllers firstObject];&#xA;    [presentedViewController.view layoutIfNeeded];&#xA;    presentedViewController.textField.text = @&#34;PASS DATA DIRECTLY TO OUTLET!!&#34;;&#xA;};&#xA;&#xA;[self presentViewController:formSheetController animated:YES completion:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let formSheetController = MZFormSheetPresentationViewController(contentViewController: navigationController)&#xA;&#xA;let presentedViewController = navigationController.viewControllers.first as! PresentedTableViewController&#xA;presentedViewController.textFieldBecomeFirstResponder = true&#xA;presentedViewController.passingString = &#34;PASSED DATA&#34;&#xA;&#xA;formSheetController.willPresentContentViewControllerHandler = { vc in&#xA;    let navigationController = vc as! UINavigationController&#xA;    let presentedViewController = navigationController.viewControllers.first as! PresentedTableViewController&#xA;    presentedViewController.view?.layoutIfNeeded()&#xA;    presentedViewController.textField?.text = &#34;PASS DATA DIRECTLY TO OUTLET!!&#34;&#xA;}&#xA;&#xA;self.present(formSheetController, animated: true, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using pan gesture to dismiss&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;typedef NS_OPTIONS(NSUInteger, MZFormSheetPanGestureDismissDirection) {&#xA;    MZFormSheetPanGestureDismissDirectionNone = 0,&#xA;    MZFormSheetPanGestureDismissDirectionUp = 1 &amp;lt;&amp;lt; 0,&#xA;    MZFormSheetPanGestureDismissDirectionDown = 1 &amp;lt;&amp;lt; 1,&#xA;    MZFormSheetPanGestureDismissDirectionLeft = 1 &amp;lt;&amp;lt; 2,&#xA;    MZFormSheetPanGestureDismissDirectionRight = 1 &amp;lt;&amp;lt; 3,&#xA;    MZFormSheetPanGestureDismissDirectionAll = MZFormSheetPanGestureDismissDirectionUp | MZFormSheetPanGestureDismissDirectionDown | MZFormSheetPanGestureDismissDirectionLeft | MZFormSheetPanGestureDismissDirectionRight&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;UINavigationController *navigationController = [self formSheetControllerWithNavigationController];&#xA;MZFormSheetPresentationViewController *formSheetController = [[MZFormSheetPresentationViewController alloc] initWithContentViewController:navigationController];&#xA;&#xA;formSheetController.interactivePanGestureDissmisalDirection = MZFormSheetPanGestureDismissDirectionAll;&#xA;&#xA;[self presentViewController:formSheetController animated:YES completion:nil];&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Blur background effect&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to display blurry background, you can set &lt;code&gt;MZFormSheetPresentationController&lt;/code&gt; default appearance or directly to &lt;code&gt;MZFormSheetPresentationController&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Objective-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// Blur will be applied to all MZFormSheetPresentationControllers by default&#xA;[[MZFormSheetPresentationController appearance] setShouldApplyBackgroundBlurEffect:YES];&#xA;&#xA;or&#xA;&#xA;// This will set to only one instance&#xA;formSheetController.shouldApplyBackgroundBlurEffect = YES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Blur will be applied to all MZFormSheetPresentationControllers by default&#xA;MZFormSheetPresentationController.appearance().shouldApplyBackgroundBlurEffect = true&#xA;&#xA;or&#xA;&#xA;// This will set to only one instance&#xA;formSheetController.shouldApplyBackgroundBlurEffect = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Transitions&lt;/h2&gt; &#xA;&lt;p&gt;MZFormSheetPresentationViewController has predefined couple transitions.&lt;/p&gt; &#xA;&lt;p&gt;Objective-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;typedef NS_ENUM(NSInteger, MZFormSheetPresentationTransitionStyle) {&#xA; MZFormSheetPresentationTransitionStyleSlideFromTop = 0,&#xA; MZFormSheetPresentationTransitionStyleSlideFromBottom,&#xA; MZFormSheetPresentationTransitionStyleSlideFromLeft,&#xA; MZFormSheetPresentationTransitionStyleSlideFromRight,&#xA; MZFormSheetPresentationTransitionStyleSlideAndBounceFromTop,&#xA; MZFormSheetPresentationTransitionStyleSlideAndBounceFromBottom,&#xA; MZFormSheetPresentationTransitionStyleSlideAndBounceFromLeft,&#xA; MZFormSheetPresentationTransitionStyleSlideAndBounceFromRight,&#xA; MZFormSheetPresentationTransitionStyleFade,&#xA; MZFormSheetPresentationTransitionStyleBounce,&#xA; MZFormSheetPresentationTransitionStyleDropDown,&#xA; MZFormSheetPresentationTransitionStyleCustom,&#xA; MZFormSheetPresentationTransitionStyleNone,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use them you will have to just assign &lt;code&gt;contentViewControllerTransitionStyle&lt;/code&gt; property&lt;/p&gt; &#xA;&lt;p&gt;Objective-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;formSheetController.contentViewControllerTransitionStyle = MZFormSheetPresentationTransitionStyleFade;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create your own transition by implementing &lt;code&gt;MZFormSheetPresentationViewControllerTransitionProtocol&lt;/code&gt; protocol and register your transition class as a custom style.&lt;/p&gt; &#xA;&lt;p&gt;Objective-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@interface CustomTransition : NSObject &amp;lt;MZFormSheetPresentationViewControllerTransitionProtocol&amp;gt;&#xA;@end&#xA;&#xA;[MZTransition registerTransitionClass:[CustomTransition class] forTransitionStyle:MZFormSheetTransitionStyleCustom];&#xA;&#xA;formSheetController.contentViewControllerTransitionStyle = MZFormSheetTransitionStyleCustom;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class CustomTransition: NSObject, MZFormSheetPresentationViewControllerTransitionProtocol {&#xA;}&#xA;&#xA;MZTransition.registerClass(CustomTransition.self, for: .custom)&#xA;&#xA;formSheetController.contentViewControllerTransitionStyle = .custom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you are creating own transition you have to call completionBlock at the end of animation.&lt;/p&gt; &#xA;&lt;p&gt;Objective-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)exitFormSheetControllerTransition:(nonnull UIViewController *)presentingViewController&#xA;                        completionHandler:(nonnull MZTransitionCompletionHandler)completionHandler {&#xA;    CGRect formSheetRect = presentingViewController.view.frame;&#xA;    formSheetRect.origin.x = [UIScreen mainScreen].bounds.size.width;&#xA;&#xA;    [UIView animateWithDuration:0.3&#xA;                          delay:0&#xA;                        options:UIViewAnimationOptionCurveEaseIn&#xA;                     animations:^{&#xA;                         presentingViewController.view.frame = formSheetRect;&#xA;                     }&#xA;                     completion:^(BOOL finished) {&#xA;                         completionHandler();&#xA;                     }];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func exitFormSheetControllerTransition(_ presentingViewController: UIViewController, completionHandler: @escaping MZTransitionCompletionHandler) {&#xA;    var formSheetRect = presentingViewController.view.frame&#xA;    formSheetRect.origin.x = UIScreen.main.bounds.width&#xA;&#xA;    UIView.animate(withDuration: 0.3, delay: 0.0, options: UIView.AnimationOptions.curveEaseIn, animations: {&#xA;        presentingViewController.view.frame = formSheetRect&#xA;    }, completion: {(value: Bool)  -&amp;gt; Void in&#xA;        completionHandler()&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Transparent Touch Background&lt;/h2&gt; &#xA;&lt;p&gt;If you want to have access to the controller that is below MZFormSheetPresentationController, you can set property &lt;code&gt;transparentTouchEnabled&lt;/code&gt; and background view controller will get all touches.&lt;/p&gt; &#xA;&lt;p&gt;Objective-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MZFormSheetPresentationViewController *formSheetController = [[MZFormSheetPresentationViewController alloc] initWithContentViewController:viewController];&#xA;formSheetController.presentationController.transparentTouchEnabled = YES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let formSheetController = MZFormSheetPresentationViewController(contentViewController: viewController)&#xA;formSheetController.presentationController?.isTransparentTouchEnabled = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Completion Blocks&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;/**&#xA; The handler to call when presented form sheet is before entry transition and its view will show on window.&#xA; */&#xA;@property (nonatomic, copy, nullable) MZFormSheetPresentationViewControllerCompletionHandler willPresentContentViewControllerHandler;&#xA;&#xA;/**&#xA; The handler to call when presented form sheet is after entry transition animation.&#xA; */&#xA;@property (nonatomic, copy, nullable) MZFormSheetPresentationViewControllerCompletionHandler didPresentContentViewControllerHandler;&#xA;&#xA;/**&#xA; The handler to call when presented form sheet will be dismiss, this is called before out transition animation.&#xA; */&#xA;@property (nonatomic, copy, nullable) MZFormSheetPresentationViewControllerCompletionHandler willDismissContentViewControllerHandler;&#xA;&#xA;/**&#xA; The handler to call when presented form sheet is after dismiss.&#xA; */&#xA;@property (nonatomic, copy, nullable) MZFormSheetPresentationViewControllerCompletionHandler didDismissContentViewControllerHandler;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Autolayout&lt;/h2&gt; &#xA;&lt;p&gt;MZFormSheetPresentationController supports autolayout.&lt;/p&gt; &#xA;&lt;h2&gt;Storyboard&lt;/h2&gt; &#xA;&lt;p&gt;MZFormSheetPresentationController supports storyboard.&lt;/p&gt; &#xA;&lt;p&gt;MZFormSheetPresentationViewControllerSegue is a custom storyboard segue which use default MZFormSheetPresentationController settings.&lt;/p&gt; &#xA;&lt;p&gt;If you want to get acces to form sheet controller and pass data using storyboard segue, the code will look like this:&lt;/p&gt; &#xA;&lt;p&gt;Objective-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {&#xA;    if ([segue.identifier isEqualToString:@&#34;segue&#34;]) {&#xA;        MZFormSheetPresentationControllerSegue *presentationSegue = (id)segue;&#xA;        presentationSegue.formSheetPresentationController.presentationController.shouldApplyBackgroundBlurEffect = YES;&#xA;        UINavigationController *navigationController = (id)presentationSegue.formSheetPresentationController.contentViewController;&#xA;        PresentedTableViewController *presentedViewController = [navigationController.viewControllers firstObject];&#xA;        presentedViewController.textFieldBecomeFirstResponder = YES;&#xA;        presentedViewController.passingString = @&#34;PASSSED DATA!!&#34;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override func prepare(for segue: UIStoryboardSegue, sender: Any?) {&#xA;    if let identifier = segue.identifier {&#xA;        if identifier == &#34;segue&#34; {&#xA;            let presentationSegue = segue as! MZFormSheetPresentationViewControllerSegue&#xA;            presentationSegue.formSheetPresentationController.presentationController?.shouldApplyBackgroundBlurEffect = true&#xA;            let navigationController = presentationSegue.formSheetPresentationController.contentViewController as! UINavigationController&#xA;            let presentedViewController = navigationController.viewControllers.first as! PresentedTableViewController&#xA;            presentedViewController.textFieldBecomeFirstResponder = true&#xA;            presentedViewController.passingString = &#34;PASSED DATA&#34;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ARC&lt;/h2&gt; &#xA;&lt;p&gt;MZFormSheetPresentationController uses ARC.&lt;/p&gt; &#xA;&lt;h2&gt;App Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Some position calculations access [UIApplication sharedApplication] which is not permitted in application extensions. If you want to use MZFormSheetPresentationController in extensions add the MZ_APP_EXTENSIONS=1 preprocessor macro in the corresponding target.&lt;/p&gt; &#xA;&lt;p&gt;If you use Cocoapods you can use a post install hook to do that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post_install do |installer|&#xA;    installer.pods_project.targets.each do |target|&#xA;        if target.name == &#34;MZFormSheetPresentationController&#34;&#xA;            target.build_configurations.each do |config|&#xA;                config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] ||= [&#39;$(inherited)&#39;]&#xA;                config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] &amp;lt;&amp;lt; &#39;MZ_APP_EXTENSIONS=1&#39;&#xA;            end&#xA;        end&#xA;    end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://github.com/m1entus&#34;&gt;Michal Zaborowski&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/iMientus&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>