<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-23T01:42:35Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ibireme/YYModel</title>
    <updated>2022-08-23T01:42:35Z</updated>
    <id>tag:github.com,2022-08-23:/ibireme/YYModel</id>
    <link href="https://github.com/ibireme/YYModel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High performance model framework for iOS/OSX.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;YYModel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibireme/YYModel/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green.svg?style=flat&#34; alt=&#34;License MIT&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;http://cocoapods.org/pods/YYModel&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/YYModel.svg?style=flat&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;http://cocoadocs.org/docsets/YYModel&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/YYModel.svg?style=flat&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://travis-ci.org/ibireme/YYModel&#34;&gt;&lt;img src=&#34;https://travis-ci.org/ibireme/YYModel.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://codecov.io/github/ibireme/YYModel?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/ibireme/YYModel/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;High performance model framework for iOS/OSX.&lt;br&gt; (It&#39;s a component of &lt;a href=&#34;https://github.com/ibireme/YYKit&#34;&gt;YYKit&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;p&gt;Time cost (process GithubUser 10000 times on iPhone 6):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/ibireme/YYModel/master/Benchmark/Result.png&#34; alt=&#34;Benchmark result&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;Benchmark/ModelBenchmark.xcodeproj&lt;/code&gt; for more benchmark case.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;High performance&lt;/strong&gt;: The conversion performance is close to handwriting code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatic type conversion&lt;/strong&gt;: The object types can be automatically converted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type Safe&lt;/strong&gt;: All data types will be verified to ensure type-safe during the conversion process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Non-intrusive&lt;/strong&gt;: There is no need to make the model class inherit from other base class.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lightwight&lt;/strong&gt;: This library contains only 5 files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docs and unit testing&lt;/strong&gt;: 100% docs coverage, 99.6% code coverage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h3&gt;Simple model json convert&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON:&#xA;{&#xA;    &#34;uid&#34;:123456,&#xA;    &#34;name&#34;:&#34;Harry&#34;,&#xA;    &#34;created&#34;:&#34;1965-07-31T00:00:00+0000&#34;&#xA;}&#xA;&#xA;// Model:&#xA;@interface User : NSObject&#xA;@property UInt64 uid;&#xA;@property NSString *name;&#xA;@property NSDate *created;&#xA;@end&#xA;@implementation User&#xA;@end&#xA;&#xA;&#x9;&#xA;// Convert json to model:&#xA;User *user = [User yy_modelWithJSON:json];&#xA;&#x9;&#xA;// Convert model to json:&#xA;NSDictionary *json = [user yy_modelToJSONObject];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the type of an object in JSON/Dictionary cannot be matched to the property of the model, the following automatic conversion is performed. If the automatic conversion failed, the value will be ignored.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;JSON/Dictionary&lt;/th&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSString&lt;/td&gt; &#xA;   &lt;td&gt;NSNumber,NSURL,SEL,Class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSNumber&lt;/td&gt; &#xA;   &lt;td&gt;NSString&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSString/NSNumber&lt;/td&gt; &#xA;   &lt;td&gt;C number (BOOL,int,float,NSUInteger,UInt64,...)&lt;br&gt; NaN and Inf will be ignored&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSString&lt;/td&gt; &#xA;   &lt;td&gt;NSDate parsed with these formats:&lt;br&gt; yyyy-MM-dd&lt;br&gt; yyyy-MM-dd HH:mm:ss&lt;br&gt; yyyy-MM-dd&#39;T&#39;HH:mm:ss&lt;br&gt; yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&lt;br&gt; EEE MMM dd HH:mm:ss Z yyyy &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSDate&lt;/td&gt; &#xA;   &lt;td&gt;NSString formatted with ISO8601:&lt;br&gt; &#34;YYYY-MM-dd&#39;T&#39;HH:mm:ssZ&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSValue&lt;/td&gt; &#xA;   &lt;td&gt;struct (CGRect,CGSize,...)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSNull&lt;/td&gt; &#xA;   &lt;td&gt;nil,0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;no&#34;,&#34;false&#34;,...&lt;/td&gt; &#xA;   &lt;td&gt;@(NO),0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;yes&#34;,&#34;true&#34;,...&lt;/td&gt; &#xA;   &lt;td&gt;@(YES),1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Match model property to different JSON key&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON:&#xA;{&#xA;    &#34;n&#34;:&#34;Harry Pottery&#34;,&#xA;    &#34;p&#34;: 256,&#xA;    &#34;ext&#34; : {&#xA;        &#34;desc&#34; : &#34;A book written by J.K.Rowing.&#34;&#xA;    },&#xA;    &#34;ID&#34; : 100010&#xA;}&#xA;&#xA;// Model:&#xA;@interface Book : NSObject&#xA;@property NSString *name;&#xA;@property NSInteger page;&#xA;@property NSString *desc;&#xA;@property NSString *bookID;&#xA;@end&#xA;@implementation Book&#xA;+ (NSDictionary *)modelCustomPropertyMapper {&#xA;    return @{@&#34;name&#34; : @&#34;n&#34;,&#xA;             @&#34;page&#34; : @&#34;p&#34;,&#xA;             @&#34;desc&#34; : @&#34;ext.desc&#34;,&#xA;             @&#34;bookID&#34; : @[@&#34;id&#34;,@&#34;ID&#34;,@&#34;book_id&#34;]};&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can map a json key (key path) or an array of json key (key path) to one or multiple property name. If there&#39;s no mapper for a property, it will use the property&#39;s name as default.&lt;/p&gt; &#xA;&lt;h3&gt;Nested model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON&#xA;{&#xA;    &#34;author&#34;:{&#xA;        &#34;name&#34;:&#34;J.K.Rowling&#34;,&#xA;        &#34;birthday&#34;:&#34;1965-07-31T00:00:00+0000&#34;&#xA;    },&#xA;    &#34;name&#34;:&#34;Harry Potter&#34;,&#xA;    &#34;pages&#34;:256&#xA;}&#xA;&#xA;// Model: (no need to do anything)&#xA;@interface Author : NSObject&#xA;@property NSString *name;&#xA;@property NSDate *birthday;&#xA;@end&#xA;@implementation Author&#xA;@end&#xA;&#x9;&#xA;@interface Book : NSObject&#xA;@property NSString *name;&#xA;@property NSUInteger pages;&#xA;@property Author *author;&#xA;@end&#xA;@implementation Book&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Container property&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@class Shadow, Border, Attachment;&#xA;&#xA;@interface Attributes&#xA;@property NSString *name;&#xA;@property NSArray *shadows; //Array&amp;lt;Shadow&amp;gt;&#xA;@property NSSet *borders; //Set&amp;lt;Border&amp;gt;&#xA;@property NSMutableDictionary *attachments; //Dict&amp;lt;NSString,Attachment&amp;gt;&#xA;@end&#xA;&#xA;@implementation Attributes&#xA;+ (NSDictionary *)modelContainerPropertyGenericClass {&#xA;&#x9;// value should be Class or Class name.&#xA;    return @{@&#34;shadows&#34; : [Shadow class],&#xA;             @&#34;borders&#34; : Border.class,&#xA;             @&#34;attachments&#34; : @&#34;Attachment&#34; };&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Whitelist and blacklist&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface User&#xA;@property NSString *name;&#xA;@property NSUInteger age;&#xA;@end&#xA;&#x9;&#xA;@implementation Attributes&#xA;+ (NSArray *)modelPropertyBlacklist {&#xA;    return @[@&#34;test1&#34;, @&#34;test2&#34;];&#xA;}&#xA;+ (NSArray *)modelPropertyWhitelist {&#xA;    return @[@&#34;name&#34;];&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data validate and custom transform&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON:&#xA;{&#xA;&#x9;&#34;name&#34;:&#34;Harry&#34;,&#xA;&#x9;&#34;timestamp&#34; : 1445534567&#xA;}&#xA;&#x9;&#xA;// Model:&#xA;@interface User&#xA;@property NSString *name;&#xA;@property NSDate *createdAt;&#xA;@end&#xA;&#xA;@implementation User&#xA;- (BOOL)modelCustomTransformFromDictionary:(NSDictionary *)dic {&#xA;    NSNumber *timestamp = dic[@&#34;timestamp&#34;];&#xA;    if (![timestamp isKindOfClass:[NSNumber class]]) return NO;&#xA;    _createdAt = [NSDate dateWithTimeIntervalSince1970:timestamp.floatValue];&#xA;    return YES;&#xA;}&#xA;- (BOOL)modelCustomTransformToDictionary:(NSMutableDictionary *)dic {&#xA;    if (!_createdAt) return NO;&#xA;    dic[@&#34;timestamp&#34;] = @(n.timeIntervalSince1970);&#xA;    return YES;&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Coding/Copying/hash/equal/description&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface YYShadow :NSObject &amp;lt;NSCoding, NSCopying&amp;gt;&#xA;@property (nonatomic, copy) NSString *name;&#xA;@property (nonatomic, assign) CGSize size;&#xA;@end&#xA;&#xA;@implementation YYShadow&#xA;- (void)encodeWithCoder:(NSCoder *)aCoder { [self yy_modelEncodeWithCoder:aCoder]; }&#xA;- (id)initWithCoder:(NSCoder *)aDecoder { self = [super init]; return [self yy_modelInitWithCoder:aDecoder]; }&#xA;- (id)copyWithZone:(NSZone *)zone { return [self yy_modelCopy]; }&#xA;- (NSUInteger)hash { return [self yy_modelHash]; }&#xA;- (BOOL)isEqual:(id)object { return [self yy_modelIsEqual:object]; }&#xA;- (NSString *)description { return [self yy_modelDescription]; }&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;pod &#39;YYModel&#39;&lt;/code&gt; to your Podfile.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; or &lt;code&gt;pod update&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Import &amp;lt;YYModel/YYModel.h&amp;gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;github &#34;ibireme/YYModel&#34;&lt;/code&gt; to your Cartfile.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update --platform ios&lt;/code&gt; and add the framework to your project.&lt;/li&gt; &#xA; &lt;li&gt;Import &amp;lt;YYModel/YYModel.h&amp;gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download all the files in the YYModel subdirectory.&lt;/li&gt; &#xA; &lt;li&gt;Add the source files to your Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;Import &lt;code&gt;YYModel.h&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Full API documentation is available on &lt;a href=&#34;http://cocoadocs.org/docsets/YYModel/&#34;&gt;CocoaDocs&lt;/a&gt;.&lt;br&gt; You can also install documentation locally using &lt;a href=&#34;https://github.com/tomaz/appledoc&#34;&gt;appledoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;This library requires &lt;code&gt;iOS 6.0+&lt;/code&gt; and &lt;code&gt;Xcode 8.0+&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;YYModel is provided under the MIT license. See LICENSE file for details.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;br&gt;&lt;br&gt;&lt;/h2&gt; &#xA;&lt;h1&gt;中文介绍&lt;/h1&gt; &#xA;&lt;p&gt;高性能 iOS/OSX 模型转换框架。&lt;br&gt; (该项目是 &lt;a href=&#34;https://github.com/ibireme/YYKit&#34;&gt;YYKit&lt;/a&gt; 组件之一)&lt;/p&gt; &#xA;&lt;h1&gt;性能&lt;/h1&gt; &#xA;&lt;p&gt;处理 GithubUser 数据 10000 次耗时统计 (iPhone 6):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/ibireme/YYModel/master/Benchmark/Result.png&#34; alt=&#34;Benchmark result&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;更多测试代码和用例见 &lt;code&gt;Benchmark/ModelBenchmark.xcodeproj&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h1&gt;特性&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;高性能&lt;/strong&gt;: 模型转换性能接近手写解析代码。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;自动类型转换&lt;/strong&gt;: 对象类型可以自动转换，详情见下方表格。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;类型安全&lt;/strong&gt;: 转换过程中，所有的数据类型都会被检测一遍，以保证类型安全，避免崩溃问题。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;无侵入性&lt;/strong&gt;: 模型无需继承自其他基类。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;轻量&lt;/strong&gt;: 该框架只有 5 个文件 (包括.h文件)。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;文档和单元测试&lt;/strong&gt;: 文档覆盖率100%, 代码覆盖率99.6%。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;使用方法&lt;/h1&gt; &#xA;&lt;h3&gt;简单的 Model 与 JSON 相互转换&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON:&#xA;{&#xA;    &#34;uid&#34;:123456,&#xA;    &#34;name&#34;:&#34;Harry&#34;,&#xA;    &#34;created&#34;:&#34;1965-07-31T00:00:00+0000&#34;&#xA;}&#xA;&#xA;// Model:&#xA;@interface User : NSObject&#xA;@property UInt64 uid;&#xA;@property NSString *name;&#xA;@property NSDate *created;&#xA;@end&#xA;@implementation User&#xA;@end&#xA;&#xA;&#x9;&#xA;// 将 JSON (NSData,NSString,NSDictionary) 转换为 Model:&#xA;User *user = [User yy_modelWithJSON:json];&#xA;&#x9;&#xA;// 将 Model 转换为 JSON 对象:&#xA;NSDictionary *json = [user yy_modelToJSONObject];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当 JSON/Dictionary 中的对象类型与 Model 属性不一致时，YYModel 将会进行如下自动转换。自动转换不支持的值将会被忽略，以避免各种潜在的崩溃问题。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;JSON/Dictionary&lt;/th&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSString&lt;/td&gt; &#xA;   &lt;td&gt;NSNumber,NSURL,SEL,Class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSNumber&lt;/td&gt; &#xA;   &lt;td&gt;NSString&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSString/NSNumber&lt;/td&gt; &#xA;   &lt;td&gt;基础类型 (BOOL,int,float,NSUInteger,UInt64,...)&lt;br&gt; NaN 和 Inf 会被忽略&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSString&lt;/td&gt; &#xA;   &lt;td&gt;NSDate 以下列格式解析:&lt;br&gt; yyyy-MM-dd&lt;br&gt; yyyy-MM-dd HH:mm:ss&lt;br&gt; yyyy-MM-dd&#39;T&#39;HH:mm:ss&lt;br&gt; yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&lt;br&gt; EEE MMM dd HH:mm:ss Z yyyy &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSDate&lt;/td&gt; &#xA;   &lt;td&gt;NSString 格式化为 ISO8601:&lt;br&gt; &#34;YYYY-MM-dd&#39;T&#39;HH:mm:ssZ&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSValue&lt;/td&gt; &#xA;   &lt;td&gt;struct (CGRect,CGSize,...)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSNull&lt;/td&gt; &#xA;   &lt;td&gt;nil,0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;no&#34;,&#34;false&#34;,...&lt;/td&gt; &#xA;   &lt;td&gt;@(NO),0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;yes&#34;,&#34;true&#34;,...&lt;/td&gt; &#xA;   &lt;td&gt;@(YES),1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Model 属性名和 JSON 中的 Key 不相同&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON:&#xA;{&#xA;    &#34;n&#34;:&#34;Harry Pottery&#34;,&#xA;    &#34;p&#34;: 256,&#xA;    &#34;ext&#34; : {&#xA;        &#34;desc&#34; : &#34;A book written by J.K.Rowing.&#34;&#xA;    },&#xA;    &#34;ID&#34; : 100010&#xA;}&#xA;&#xA;// Model:&#xA;@interface Book : NSObject&#xA;@property NSString *name;&#xA;@property NSInteger page;&#xA;@property NSString *desc;&#xA;@property NSString *bookID;&#xA;@end&#xA;@implementation Book&#xA;//返回一个 Dict，将 Model 属性名对映射到 JSON 的 Key。&#xA;+ (NSDictionary *)modelCustomPropertyMapper {&#xA;    return @{@&#34;name&#34; : @&#34;n&#34;,&#xA;             @&#34;page&#34; : @&#34;p&#34;,&#xA;             @&#34;desc&#34; : @&#34;ext.desc&#34;,&#xA;             @&#34;bookID&#34; : @[@&#34;id&#34;,@&#34;ID&#34;,@&#34;book_id&#34;]};&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;你可以把一个或一组 json key (key path) 映射到一个或多个属性。如果一个属性没有映射关系，那默认会使用相同属性名作为映射。&lt;/p&gt; &#xA;&lt;p&gt;在 json-&amp;gt;model 的过程中：如果一个属性对应了多个 json key，那么转换过程会按顺序查找，并使用第一个不为空的值。&lt;/p&gt; &#xA;&lt;p&gt;在 model-&amp;gt;json 的过程中：如果一个属性对应了多个 json key (key path)，那么转换过程仅会处理第一个 json key (key path)；如果多个属性对应了同一个 json key，则转换过过程会使用其中任意一个不为空的值。&lt;/p&gt; &#xA;&lt;h3&gt;Model 包含其他 Model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON&#xA;{&#xA;    &#34;author&#34;:{&#xA;        &#34;name&#34;:&#34;J.K.Rowling&#34;,&#xA;        &#34;birthday&#34;:&#34;1965-07-31T00:00:00+0000&#34;&#xA;    },&#xA;    &#34;name&#34;:&#34;Harry Potter&#34;,&#xA;    &#34;pages&#34;:256&#xA;}&#xA;&#xA;// Model: 什么都不用做，转换会自动完成&#xA;@interface Author : NSObject&#xA;@property NSString *name;&#xA;@property NSDate *birthday;&#xA;@end&#xA;@implementation Author&#xA;@end&#xA;&#x9;&#xA;@interface Book : NSObject&#xA;@property NSString *name;&#xA;@property NSUInteger pages;&#xA;@property Author *author; //Book 包含 Author 属性&#xA;@end&#xA;@implementation Book&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;容器类属性&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@class Shadow, Border, Attachment;&#xA;&#xA;@interface Attributes&#xA;@property NSString *name;&#xA;@property NSArray *shadows; //Array&amp;lt;Shadow&amp;gt;&#xA;@property NSSet *borders; //Set&amp;lt;Border&amp;gt;&#xA;@property NSMutableDictionary *attachments; //Dict&amp;lt;NSString,Attachment&amp;gt;&#xA;@end&#xA;&#xA;@implementation Attributes&#xA;// 返回容器类中的所需要存放的数据类型 (以 Class 或 Class Name 的形式)。&#xA;+ (NSDictionary *)modelContainerPropertyGenericClass {&#xA;    return @{@&#34;shadows&#34; : [Shadow class],&#xA;             @&#34;borders&#34; : Border.class,&#xA;             @&#34;attachments&#34; : @&#34;Attachment&#34; };&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;黑名单与白名单&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface User&#xA;@property NSString *name;&#xA;@property NSUInteger age;&#xA;@end&#xA;&#x9;&#xA;@implementation Attributes&#xA;// 如果实现了该方法，则处理过程中会忽略该列表内的所有属性&#xA;+ (NSArray *)modelPropertyBlacklist {&#xA;    return @[@&#34;test1&#34;, @&#34;test2&#34;];&#xA;}&#xA;// 如果实现了该方法，则处理过程中不会处理该列表外的属性。&#xA;+ (NSArray *)modelPropertyWhitelist {&#xA;    return @[@&#34;name&#34;];&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;数据校验与自定义转换&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// JSON:&#xA;{&#xA;&#x9;&#34;name&#34;:&#34;Harry&#34;,&#xA;&#x9;&#34;timestamp&#34; : 1445534567&#xA;}&#xA;&#x9;&#xA;// Model:&#xA;@interface User&#xA;@property NSString *name;&#xA;@property NSDate *createdAt;&#xA;@end&#xA;&#xA;@implementation User&#xA;// 当 JSON 转为 Model 完成后，该方法会被调用。&#xA;// 你可以在这里对数据进行校验，如果校验不通过，可以返回 NO，则该 Model 会被忽略。&#xA;// 你也可以在这里做一些自动转换不能完成的工作。&#xA;- (BOOL)modelCustomTransformFromDictionary:(NSDictionary *)dic {&#xA;    NSNumber *timestamp = dic[@&#34;timestamp&#34;];&#xA;    if (![timestamp isKindOfClass:[NSNumber class]]) return NO;&#xA;    _createdAt = [NSDate dateWithTimeIntervalSince1970:timestamp.floatValue];&#xA;    return YES;&#xA;}&#xA;&#x9;&#xA;// 当 Model 转为 JSON 完成后，该方法会被调用。&#xA;// 你可以在这里对数据进行校验，如果校验不通过，可以返回 NO，则该 Model 会被忽略。&#xA;// 你也可以在这里做一些自动转换不能完成的工作。&#xA;- (BOOL)modelCustomTransformToDictionary:(NSMutableDictionary *)dic {&#xA;    if (!_createdAt) return NO;&#xA;    dic[@&#34;timestamp&#34;] = @(n.timeIntervalSince1970);&#xA;    return YES;&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Coding/Copying/hash/equal/description&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface YYShadow :NSObject &amp;lt;NSCoding, NSCopying&amp;gt;&#xA;@property (nonatomic, copy) NSString *name;&#xA;@property (nonatomic, assign) CGSize size;&#xA;@end&#xA;&#xA;@implementation YYShadow&#xA;// 直接添加以下代码即可自动完成&#xA;- (void)encodeWithCoder:(NSCoder *)aCoder { [self yy_modelEncodeWithCoder:aCoder]; }&#xA;- (id)initWithCoder:(NSCoder *)aDecoder { self = [super init]; return [self yy_modelInitWithCoder:aDecoder]; }&#xA;- (id)copyWithZone:(NSZone *)zone { return [self yy_modelCopy]; }&#xA;- (NSUInteger)hash { return [self yy_modelHash]; }&#xA;- (BOOL)isEqual:(id)object { return [self yy_modelIsEqual:object]; }&#xA;- (NSString *)description { return [self yy_modelDescription]; }&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;安装&lt;/h1&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在 Podfile 中添加 &lt;code&gt;pod &#39;YYModel&#39;&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;执行 &lt;code&gt;pod install&lt;/code&gt; 或 &lt;code&gt;pod update&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;导入 &amp;lt;YYModel/YYModel.h&amp;gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在 Cartfile 中添加 &lt;code&gt;github &#34;ibireme/YYModel&#34;&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;执行 &lt;code&gt;carthage update --platform ios&lt;/code&gt; 并将生成的 framework 添加到你的工程。&lt;/li&gt; &#xA; &lt;li&gt;导入 &amp;lt;YYModel/YYModel.h&amp;gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;手动安装&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;下载 YYModel 文件夹内的所有内容。&lt;/li&gt; &#xA; &lt;li&gt;将 YYModel 内的源文件添加(拖放)到你的工程。&lt;/li&gt; &#xA; &lt;li&gt;导入 &lt;code&gt;YYModel.h&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;文档&lt;/h1&gt; &#xA;&lt;p&gt;你可以在 &lt;a href=&#34;http://cocoadocs.org/docsets/YYModel/&#34;&gt;CocoaDocs&lt;/a&gt; 查看在线 API 文档，也可以用 &lt;a href=&#34;https://github.com/tomaz/appledoc&#34;&gt;appledoc&lt;/a&gt; 本地生成文档。&lt;/p&gt; &#xA;&lt;h1&gt;系统要求&lt;/h1&gt; &#xA;&lt;p&gt;该项目最低支持 &lt;code&gt;iOS 6.0&lt;/code&gt; 和 &lt;code&gt;Xcode 8.0&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h1&gt;许可证&lt;/h1&gt; &#xA;&lt;p&gt;YYModel 使用 MIT 许可证，详情见 LICENSE 文件。&lt;/p&gt; &#xA;&lt;h1&gt;相关链接&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.ibireme.com/2015/10/23/ios_model_framework_benchmark/&#34;&gt;iOS JSON 模型转换库评测&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Mantle/Mantle</title>
    <updated>2022-08-23T01:42:35Z</updated>
    <id>tag:github.com,2022-08-23:/Mantle/Mantle</id>
    <link href="https://github.com/Mantle/Mantle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Model framework for Cocoa and Cocoa Touch&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mantle&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/v/Mantle.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Mantle.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-compatible-4BC51D.svg?style=flat&#34; alt=&#34;SPM compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/Mantle&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/Mantle.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mantle makes it easy to write a simple model layer for your Cocoa or Cocoa Touch application.&lt;/p&gt; &#xA;&lt;h2&gt;The Typical Model Object&lt;/h2&gt; &#xA;&lt;p&gt;What&#39;s wrong with the way model objects are usually written in Objective-C?&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s use the &lt;a href=&#34;http://developer.github.com&#34;&gt;GitHub API&lt;/a&gt; for demonstration. How would one typically represent a &lt;a href=&#34;http://developer.github.com/v3/issues/#get-a-single-issue&#34;&gt;GitHub issue&lt;/a&gt; in Objective-C?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;typedef enum : NSUInteger {&#xA;    GHIssueStateOpen,&#xA;    GHIssueStateClosed&#xA;} GHIssueState;&#xA;&#xA;@interface GHIssue : NSObject &amp;lt;NSCoding, NSCopying&amp;gt;&#xA;&#xA;@property (nonatomic, copy, readonly) NSURL *URL;&#xA;@property (nonatomic, copy, readonly) NSURL *HTMLURL;&#xA;@property (nonatomic, copy, readonly) NSNumber *number;&#xA;@property (nonatomic, assign, readonly) GHIssueState state;&#xA;@property (nonatomic, copy, readonly) NSString *reporterLogin;&#xA;@property (nonatomic, copy, readonly) NSDate *updatedAt;&#xA;@property (nonatomic, strong, readonly) GHUser *assignee;&#xA;@property (nonatomic, copy, readonly) NSDate *retrievedAt;&#xA;&#xA;@property (nonatomic, copy) NSString *title;&#xA;@property (nonatomic, copy) NSString *body;&#xA;&#xA;- (id)initWithDictionary:(NSDictionary *)dictionary;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@implementation GHIssue&#xA;&#xA;+ (NSDateFormatter *)dateFormatter {&#xA;    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];&#xA;    dateFormatter.locale = [[NSLocale alloc] initWithLocaleIdentifier:@&#34;en_US_POSIX&#34;];&#xA;    dateFormatter.dateFormat = @&#34;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;&#34;;&#xA;    return dateFormatter;&#xA;}&#xA;&#xA;- (id)initWithDictionary:(NSDictionary *)dictionary {&#xA;    self = [self init];&#xA;    if (self == nil) return nil;&#xA;&#xA;    _URL = [NSURL URLWithString:dictionary[@&#34;url&#34;]];&#xA;    _HTMLURL = [NSURL URLWithString:dictionary[@&#34;html_url&#34;]];&#xA;    _number = dictionary[@&#34;number&#34;];&#xA;&#xA;    if ([dictionary[@&#34;state&#34;] isEqualToString:@&#34;open&#34;]) {&#xA;        _state = GHIssueStateOpen;&#xA;    } else if ([dictionary[@&#34;state&#34;] isEqualToString:@&#34;closed&#34;]) {&#xA;        _state = GHIssueStateClosed;&#xA;    }&#xA;&#xA;    _title = [dictionary[@&#34;title&#34;] copy];&#xA;    _retrievedAt = [NSDate date];&#xA;    _body = [dictionary[@&#34;body&#34;] copy];&#xA;    _reporterLogin = [dictionary[@&#34;user&#34;][@&#34;login&#34;] copy];&#xA;    _assignee = [[GHUser alloc] initWithDictionary:dictionary[@&#34;assignee&#34;]];&#xA;&#xA;    _updatedAt = [self.class.dateFormatter dateFromString:dictionary[@&#34;updated_at&#34;]];&#xA;&#xA;    return self;&#xA;}&#xA;&#xA;- (id)initWithCoder:(NSCoder *)coder {&#xA;    self = [self init];&#xA;    if (self == nil) return nil;&#xA;&#xA;    _URL = [coder decodeObjectForKey:@&#34;URL&#34;];&#xA;    _HTMLURL = [coder decodeObjectForKey:@&#34;HTMLURL&#34;];&#xA;    _number = [coder decodeObjectForKey:@&#34;number&#34;];&#xA;    _state = [coder decodeUnsignedIntegerForKey:@&#34;state&#34;];&#xA;    _title = [coder decodeObjectForKey:@&#34;title&#34;];&#xA;    _retrievedAt = [NSDate date];&#xA;    _body = [coder decodeObjectForKey:@&#34;body&#34;];&#xA;    _reporterLogin = [coder decodeObjectForKey:@&#34;reporterLogin&#34;];&#xA;    _assignee = [coder decodeObjectForKey:@&#34;assignee&#34;];&#xA;    _updatedAt = [coder decodeObjectForKey:@&#34;updatedAt&#34;];&#xA;&#xA;    return self;&#xA;}&#xA;&#xA;- (void)encodeWithCoder:(NSCoder *)coder {&#xA;    if (self.URL != nil) [coder encodeObject:self.URL forKey:@&#34;URL&#34;];&#xA;    if (self.HTMLURL != nil) [coder encodeObject:self.HTMLURL forKey:@&#34;HTMLURL&#34;];&#xA;    if (self.number != nil) [coder encodeObject:self.number forKey:@&#34;number&#34;];&#xA;    if (self.title != nil) [coder encodeObject:self.title forKey:@&#34;title&#34;];&#xA;    if (self.body != nil) [coder encodeObject:self.body forKey:@&#34;body&#34;];&#xA;    if (self.reporterLogin != nil) [coder encodeObject:self.reporterLogin forKey:@&#34;reporterLogin&#34;];&#xA;    if (self.assignee != nil) [coder encodeObject:self.assignee forKey:@&#34;assignee&#34;];&#xA;    if (self.updatedAt != nil) [coder encodeObject:self.updatedAt forKey:@&#34;updatedAt&#34;];&#xA;&#xA;    [coder encodeUnsignedInteger:self.state forKey:@&#34;state&#34;];&#xA;}&#xA;&#xA;- (id)copyWithZone:(NSZone *)zone {&#xA;    GHIssue *issue = [[self.class allocWithZone:zone] init];&#xA;    issue-&amp;gt;_URL = self.URL;&#xA;    issue-&amp;gt;_HTMLURL = self.HTMLURL;&#xA;    issue-&amp;gt;_number = self.number;&#xA;    issue-&amp;gt;_state = self.state;&#xA;    issue-&amp;gt;_reporterLogin = self.reporterLogin;&#xA;    issue-&amp;gt;_assignee = self.assignee;&#xA;    issue-&amp;gt;_updatedAt = self.updatedAt;&#xA;&#xA;    issue.title = self.title;&#xA;    issue-&amp;gt;_retrievedAt = [NSDate date];&#xA;    issue.body = self.body;&#xA;&#xA;    return issue;&#xA;}&#xA;&#xA;- (NSUInteger)hash {&#xA;    return self.number.hash;&#xA;}&#xA;&#xA;- (BOOL)isEqual:(GHIssue *)issue {&#xA;    if (![issue isKindOfClass:GHIssue.class]) return NO;&#xA;&#xA;    return [self.number isEqual:issue.number] &amp;amp;&amp;amp; [self.title isEqual:issue.title] &amp;amp;&amp;amp; [self.body isEqual:issue.body];&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whew, that&#39;s a lot of boilerplate for something so simple! And, even then, there are some problems that this example doesn&#39;t address:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There&#39;s no way to update a &lt;code&gt;GHIssue&lt;/code&gt; with new data from the server.&lt;/li&gt; &#xA; &lt;li&gt;There&#39;s no way to turn a &lt;code&gt;GHIssue&lt;/code&gt; &lt;em&gt;back&lt;/em&gt; into JSON.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GHIssueState&lt;/code&gt; shouldn&#39;t be encoded as-is. If the enum changes in the future, existing archives might break.&lt;/li&gt; &#xA; &lt;li&gt;If the interface of &lt;code&gt;GHIssue&lt;/code&gt; changes down the road, existing archives might break.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why Not Use Core Data?&lt;/h2&gt; &#xA;&lt;p&gt;Core Data solves certain problems very well. If you need to execute complex queries across your data, handle a huge object graph with lots of relationships, or support undo and redo, Core Data is an excellent fit.&lt;/p&gt; &#xA;&lt;p&gt;It does, however, come with a couple of pain points:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;There&#39;s still a lot of boilerplate.&lt;/strong&gt; Managed objects reduce some of the boilerplate seen above, but Core Data has plenty of its own. Correctly setting up a Core Data stack (with a persistent store and persistent store coordinator) and executing fetches can take many lines of code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;It&#39;s hard to get right.&lt;/strong&gt; Even experienced developers can make mistakes when using Core Data, and the framework is not forgiving.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re just trying to access some JSON objects, Core Data can be a lot of work for little gain.&lt;/p&gt; &#xA;&lt;p&gt;Nonetheless, if you&#39;re using or want to use Core Data in your app already, Mantle can still be a convenient translation layer between the API and your managed model objects.&lt;/p&gt; &#xA;&lt;h2&gt;MTLModel&lt;/h2&gt; &#xA;&lt;p&gt;Enter &lt;strong&gt;&lt;a href=&#34;https://github.com/github/Mantle/raw/master/Mantle/MTLModel.h&#34;&gt;MTLModel&lt;/a&gt;&lt;/strong&gt;. This is what &lt;code&gt;GHIssue&lt;/code&gt; looks like inheriting from &lt;code&gt;MTLModel&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;typedef enum : NSUInteger {&#xA;    GHIssueStateOpen,&#xA;    GHIssueStateClosed&#xA;} GHIssueState;&#xA;&#xA;@interface GHIssue : MTLModel &amp;lt;MTLJSONSerializing&amp;gt;&#xA;&#xA;@property (nonatomic, copy, readonly) NSURL *URL;&#xA;@property (nonatomic, copy, readonly) NSURL *HTMLURL;&#xA;@property (nonatomic, copy, readonly) NSNumber *number;&#xA;@property (nonatomic, assign, readonly) GHIssueState state;&#xA;@property (nonatomic, copy, readonly) NSString *reporterLogin;&#xA;@property (nonatomic, strong, readonly) GHUser *assignee;&#xA;@property (nonatomic, copy, readonly) NSDate *updatedAt;&#xA;&#xA;@property (nonatomic, copy) NSString *title;&#xA;@property (nonatomic, copy) NSString *body;&#xA;&#xA;@property (nonatomic, copy, readonly) NSDate *retrievedAt;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@implementation GHIssue&#xA;&#xA;+ (NSDateFormatter *)dateFormatter {&#xA;    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];&#xA;    dateFormatter.locale = [[NSLocale alloc] initWithLocaleIdentifier:@&#34;en_US_POSIX&#34;];&#xA;    dateFormatter.dateFormat = @&#34;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;&#34;;&#xA;    return dateFormatter;&#xA;}&#xA;&#xA;+ (NSDictionary *)JSONKeyPathsByPropertyKey {&#xA;    return @{&#xA;        @&#34;URL&#34;: @&#34;url&#34;,&#xA;        @&#34;HTMLURL&#34;: @&#34;html_url&#34;,&#xA;        @&#34;number&#34;: @&#34;number&#34;,&#xA;        @&#34;state&#34;: @&#34;state&#34;,&#xA;        @&#34;reporterLogin&#34;: @&#34;user.login&#34;,&#xA;        @&#34;assignee&#34;: @&#34;assignee&#34;,&#xA;        @&#34;updatedAt&#34;: @&#34;updated_at&#34;&#xA;    };&#xA;}&#xA;&#xA;+ (NSValueTransformer *)URLJSONTransformer {&#xA;    return [NSValueTransformer valueTransformerForName:MTLURLValueTransformerName];&#xA;}&#xA;&#xA;+ (NSValueTransformer *)HTMLURLJSONTransformer {&#xA;    return [NSValueTransformer valueTransformerForName:MTLURLValueTransformerName];&#xA;}&#xA;&#xA;+ (NSValueTransformer *)stateJSONTransformer {&#xA;    return [NSValueTransformer mtl_valueMappingTransformerWithDictionary:@{&#xA;        @&#34;open&#34;: @(GHIssueStateOpen),&#xA;        @&#34;closed&#34;: @(GHIssueStateClosed)&#xA;    }];&#xA;}&#xA;&#xA;+ (NSValueTransformer *)assigneeJSONTransformer {&#xA;    return [MTLJSONAdapter dictionaryTransformerWithModelClass:GHUser.class];&#xA;}&#xA;&#xA;+ (NSValueTransformer *)updatedAtJSONTransformer {&#xA;    return [MTLValueTransformer transformerUsingForwardBlock:^id(NSString *dateString, BOOL *success, NSError *__autoreleasing *error) {&#xA;        return [self.dateFormatter dateFromString:dateString];&#xA;    } reverseBlock:^id(NSDate *date, BOOL *success, NSError *__autoreleasing *error) {&#xA;        return [self.dateFormatter stringFromDate:date];&#xA;    }];&#xA;}&#xA;&#xA;- (instancetype)initWithDictionary:(NSDictionary *)dictionaryValue error:(NSError **)error {&#xA;    self = [super initWithDictionary:dictionaryValue error:error];&#xA;    if (self == nil) return nil;&#xA;&#xA;    // Store a value that needs to be determined locally upon initialization.&#xA;    _retrievedAt = [NSDate date];&#xA;&#xA;    return self;&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notably absent from this version are implementations of &lt;code&gt;&amp;lt;NSCoding&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;NSCopying&amp;gt;&lt;/code&gt;, &lt;code&gt;-isEqual:&lt;/code&gt;, and &lt;code&gt;-hash&lt;/code&gt;. By inspecting the &lt;code&gt;@property&lt;/code&gt; declarations you have in your subclass, &lt;code&gt;MTLModel&lt;/code&gt; can provide default implementations for all these methods.&lt;/p&gt; &#xA;&lt;p&gt;The problems with the original example all happen to be fixed as well:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There&#39;s no way to update a &lt;code&gt;GHIssue&lt;/code&gt; with new data from the server.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;MTLModel&lt;/code&gt; has an extensible &lt;code&gt;-mergeValuesForKeysFromModel:&lt;/code&gt; method, which makes it easy to specify how new model data should be integrated.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There&#39;s no way to turn a &lt;code&gt;GHIssue&lt;/code&gt; &lt;em&gt;back&lt;/em&gt; into JSON.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This is where reversible transformers really come in handy. &lt;code&gt;+[MTLJSONAdapter JSONDictionaryFromModel:error:]&lt;/code&gt; can transform any model object conforming to &lt;code&gt;&amp;lt;MTLJSONSerializing&amp;gt;&lt;/code&gt; back into a JSON dictionary. &lt;code&gt;+[MTLJSONAdapter JSONArrayFromModels:error:]&lt;/code&gt; is the same but turns an array of model objects into an JSON array of dictionaries.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If the interface of &lt;code&gt;GHIssue&lt;/code&gt; changes down the road, existing archives might break.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;MTLModel&lt;/code&gt; automatically saves the version of the model object that was used for archival. When unarchiving, &lt;code&gt;-decodeValueForKey:withCoder:modelVersion:&lt;/code&gt; will be invoked if overridden, giving you a convenient hook to upgrade old data.&lt;/p&gt; &#xA;&lt;h2&gt;MTLJSONSerializing&lt;/h2&gt; &#xA;&lt;p&gt;In order to serialize your model objects from or into JSON, you need to implement &lt;code&gt;&amp;lt;MTLJSONSerializing&amp;gt;&lt;/code&gt; in your &lt;code&gt;MTLModel&lt;/code&gt; subclass. This allows you to use &lt;code&gt;MTLJSONAdapter&lt;/code&gt; to convert your model objects from JSON and back:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSError *error = nil;&#xA;XYUser *user = [MTLJSONAdapter modelOfClass:XYUser.class fromJSONDictionary:JSONDictionary error:&amp;amp;error];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSError *error = nil;&#xA;NSDictionary *JSONDictionary = [MTLJSONAdapter JSONDictionaryFromModel:user error:&amp;amp;error];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;+JSONKeyPathsByPropertyKey&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The dictionary returned by this method specifies how your model object&#39;s properties map to the keys in the JSON representation, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;&#xA;@interface XYUser : MTLModel&#xA;&#xA;@property (readonly, nonatomic, copy) NSString *name;&#xA;@property (readonly, nonatomic, strong) NSDate *createdAt;&#xA;&#xA;@property (readonly, nonatomic, assign, getter = isMeUser) BOOL meUser;&#xA;@property (readonly, nonatomic, strong) XYHelper *helper;&#xA;&#xA;@end&#xA;&#xA;@implementation XYUser&#xA;&#xA;+ (NSDictionary *)JSONKeyPathsByPropertyKey {&#xA;    return @{&#xA;        @&#34;name&#34;: @&#34;name&#34;,&#xA;        @&#34;createdAt&#34;: @&#34;created_at&#34;&#xA;    };&#xA;}&#xA;&#xA;- (instancetype)initWithDictionary:(NSDictionary *)dictionaryValue error:(NSError **)error {&#xA;    self = [super initWithDictionary:dictionaryValue error:error];&#xA;    if (self == nil) return nil;&#xA;&#xA;    _helper = [XYHelper helperWithName:self.name createdAt:self.createdAt];&#xA;&#xA;    return self;&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, the &lt;code&gt;XYUser&lt;/code&gt; class declares four properties that Mantle handles in different ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt; is mapped to a key of the same name in the JSON representation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;createdAt&lt;/code&gt; is converted to its snake case equivalent.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;meUser&lt;/code&gt; is not serialized into JSON.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helper&lt;/code&gt; is initialized exactly once after JSON deserialization.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use &lt;code&gt;-[NSDictionary mtl_dictionaryByAddingEntriesFromDictionary:]&lt;/code&gt; if your model&#39;s superclass also implements &lt;code&gt;MTLJSONSerializing&lt;/code&gt; to merge their mappings.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to map all properties of a Model class to themselves, you can use the &lt;code&gt;+[NSDictionary mtl_identityPropertyMapWithModel:]&lt;/code&gt; helper method.&lt;/p&gt; &#xA;&lt;p&gt;When deserializing JSON using &lt;code&gt;+[MTLJSONAdapter modelOfClass:fromJSONDictionary:error:]&lt;/code&gt;, JSON keys that don&#39;t correspond to a property name or have an explicit mapping are ignored:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSDictionary *JSONDictionary = @{&#xA;    @&#34;name&#34;: @&#34;john&#34;,&#xA;    @&#34;created_at&#34;: @&#34;2013/07/02 16:40:00 +0000&#34;,&#xA;    @&#34;plan&#34;: @&#34;lite&#34;&#xA;};&#xA;&#xA;XYUser *user = [MTLJSONAdapter modelOfClass:XYUser.class fromJSONDictionary:JSONDictionary error:&amp;amp;error];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, the &lt;code&gt;plan&lt;/code&gt; would be ignored since it neither matches a property name of &lt;code&gt;XYUser&lt;/code&gt; nor is it otherwise mapped in &lt;code&gt;+JSONKeyPathsByPropertyKey&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;+JSONTransformerForKey:&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Implement this optional method to convert a property from a different type when deserializing from JSON.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;+ (NSValueTransformer *)JSONTransformerForKey:(NSString *)key {&#xA;    if ([key isEqualToString:@&#34;createdAt&#34;]) {&#xA;        return [NSValueTransformer valueTransformerForName:XYDateValueTransformerName];&#xA;    }&#xA;&#xA;    return nil;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;key&lt;/code&gt; is the key that applies to your model object; not the original JSON key. Keep this in mind if you transform the key names using &lt;code&gt;+JSONKeyPathsByPropertyKey&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For added convenience, if you implement &lt;code&gt;+&amp;lt;key&amp;gt;JSONTransformer&lt;/code&gt;, &lt;code&gt;MTLJSONAdapter&lt;/code&gt; will use the result of that method instead. For example, dates that are commonly represented as strings in JSON can be transformed to &lt;code&gt;NSDate&lt;/code&gt;s like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;    return [MTLValueTransformer transformerUsingForwardBlock:^id(NSString *dateString, BOOL *success, NSError *__autoreleasing *error) {&#xA;        return [self.dateFormatter dateFromString:dateString];&#xA;    } reverseBlock:^id(NSDate *date, BOOL *success, NSError *__autoreleasing *error) {&#xA;        return [self.dateFormatter stringFromDate:date];&#xA;    }];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the transformer is reversible, it will also be used when serializing the object into JSON.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;+classForParsingJSONDictionary:&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you are implementing a class cluster, implement this optional method to determine which subclass of your base class should be used when deserializing an object from JSON.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface XYMessage : MTLModel&#xA;&#xA;@end&#xA;&#xA;@interface XYTextMessage: XYMessage&#xA;&#xA;@property (readonly, nonatomic, copy) NSString *body;&#xA;&#xA;@end&#xA;&#xA;@interface XYPictureMessage : XYMessage&#xA;&#xA;@property (readonly, nonatomic, strong) NSURL *imageURL;&#xA;&#xA;@end&#xA;&#xA;@implementation XYMessage&#xA;&#xA;+ (Class)classForParsingJSONDictionary:(NSDictionary *)JSONDictionary {&#xA;    if (JSONDictionary[@&#34;image_url&#34;] != nil) {&#xA;        return XYPictureMessage.class;&#xA;    }&#xA;&#xA;    if (JSONDictionary[@&#34;body&#34;] != nil) {&#xA;        return XYTextMessage.class;&#xA;    }&#xA;&#xA;    NSAssert(NO, @&#34;No matching class for the JSON dictionary &#39;%@&#39;.&#34;, JSONDictionary);&#xA;    return self;&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;MTLJSONAdapter&lt;/code&gt; will then pick the class based on the JSON dictionary you pass in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSDictionary *textMessage = @{&#xA;    @&#34;id&#34;: @1,&#xA;    @&#34;body&#34;: @&#34;Hello World!&#34;&#xA;};&#xA;&#xA;NSDictionary *pictureMessage = @{&#xA;    @&#34;id&#34;: @2,&#xA;    @&#34;image_url&#34;: @&#34;http://example.com/lolcat.gif&#34;&#xA;};&#xA;&#xA;XYTextMessage *messageA = [MTLJSONAdapter modelOfClass:XYMessage.class fromJSONDictionary:textMessage error:NULL];&#xA;&#xA;XYPictureMessage *messageB = [MTLJSONAdapter modelOfClass:XYMessage.class fromJSONDictionary:pictureMessage error:NULL];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Persistence&lt;/h2&gt; &#xA;&lt;p&gt;Mantle doesn&#39;t automatically persist your objects for you. However, &lt;code&gt;MTLModel&lt;/code&gt; does conform to &lt;code&gt;&amp;lt;NSCoding&amp;gt;&lt;/code&gt;, so model objects can be archived to disk using &lt;code&gt;NSKeyedArchiver&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need something more powerful, or want to avoid keeping your whole model in memory at once, Core Data may be a better choice.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Mantle supports the following platform deployment targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS 10.10+&lt;/li&gt; &#xA; &lt;li&gt;iOS 9.0+&lt;/li&gt; &#xA; &lt;li&gt;tvOS 9.0+&lt;/li&gt; &#xA; &lt;li&gt;watchOS 2.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Importing Mantle&lt;/h2&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;To add Mantle to your application:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the Mantle repository as a submodule of your application&#39;s repository.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; from within the Mantle folder.&lt;/li&gt; &#xA; &lt;li&gt;Drag and drop &lt;code&gt;Mantle.xcodeproj&lt;/code&gt; into your application&#39;s Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;On the &#34;General&#34; tab of your application target, add &lt;code&gt;Mantle.framework&lt;/code&gt; to the &#34;Embedded Binaries&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you’re instead developing Mantle on its own, use the &lt;code&gt;Mantle.xcworkspace&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Simply add Mantle to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;Mantle/Mantle&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://cocoapods.org/pods/Mantle&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Add Mantle to your &lt;code&gt;Podfile&lt;/code&gt; under the build target they want it used in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;target &#39;MyAppOrFramework&#39; do&#xA;  pod &#39;Mantle&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run a &lt;code&gt;pod install&lt;/code&gt; within Terminal or the &lt;a href=&#34;https://cocoapods.org/app&#34;&gt;CocoaPods app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://swift.org/package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you are writing an application, add Mantle to your project dependencies &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;directly within Xcode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are writing a package that requires Mantle as dependency, add it to the &lt;code&gt;dependencies&lt;/code&gt; list in its &lt;code&gt;Package.swift&lt;/code&gt; manifest, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/Mantle/Mantle.git&#34;, .upToNextMajor(from: &#34;2.0.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Mantle is released under the MIT license. See &lt;a href=&#34;https://github.com/github/Mantle/raw/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;More Info&lt;/h2&gt; &#xA;&lt;p&gt;Have a question? Please &lt;a href=&#34;https://github.com/Mantle/Mantle/issues/new&#34;&gt;open an issue&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alan-ai/alan-sdk-ios</title>
    <updated>2022-08-23T01:42:35Z</updated>
    <id>tag:github.com,2022-08-23:/alan-ai/alan-sdk-ios</id>
    <link href="https://github.com/alan-ai/alan-sdk-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Voice assistant SDK to build a voice interface for iOS applications (Swift, Objective-C)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alan AI: In-app voice assistant SDK for iOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://alan.app/&#34;&gt;Alan Platform&lt;/a&gt; • &lt;a href=&#34;https://studio.alan.app/register&#34;&gt;Alan Studio&lt;/a&gt; • &lt;a href=&#34;https://alan.app/docs&#34;&gt;Docs&lt;/a&gt; • &lt;a href=&#34;https://alan.app/docs/usage/additional/faq&#34;&gt;FAQ&lt;/a&gt; • &lt;a href=&#34;https://alan.app/blog/&#34;&gt;Blog&lt;/a&gt; • &lt;a href=&#34;https://twitter.com/alanvoiceai&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alan-ai/alan-sdk-ios/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/alan-ai/alan-sdk-ios&#34; alt=&#34;GitHub release (latest by date)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/alan-ai/alan-sdk-ios&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/alan-ai/alan-sdk-ios.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Quickly add voice to your app with the Alan Platform. Create an in-app voice assistant to enable human-like conversations and provide a personalized voice experience for every user.&lt;/p&gt; &#xA;&lt;img src=&#34;https://storage.googleapis.com/alan-public-images/github/phone-finance.gif&#34; height=&#34;325px&#34; align=&#34;right&#34;&gt; &#xA;&lt;h2&gt;Alan is a Voice AI Platform&lt;/h2&gt; &#xA;&lt;p&gt;Alan is a conversational voice AI platform that lets you create an intelligent voice assistant for your app. It offers all necessary tools to design, embed and host your voice solutions:&lt;/p&gt; &#xA;&lt;h4&gt;Alan Studio&lt;/h4&gt; &#xA;&lt;p&gt;A powerful web-based IDE where you can write, test and debug dialog scenarios for your voice assistant or chatbot.&lt;/p&gt; &#xA;&lt;h4&gt;Alan Client SDKs&lt;/h4&gt; &#xA;&lt;p&gt;Alan&#39;s lightweight SDKs to quickly embed a voice assistant to your app.&lt;/p&gt; &#xA;&lt;h4&gt;Alan Cloud&lt;/h4&gt; &#xA;&lt;p&gt;Alan&#39;s AI-backend powered by the industry’s best Automatic Speech Recognition (ASR), Natural Language Understanding (NLU) and Speech Synthesis. The Alan Cloud provisions and handles the infrastructure required to maintain your voice deployments and perform all the voice processing tasks.&lt;/p&gt; &#xA;&lt;p&gt;To get more details on how Alan works, see &lt;a href=&#34;https://alan.app/platform&#34; target=&#34;_blank&#34;&gt;Alan Platform&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why Alan?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No or minimum changes to your UI&lt;/strong&gt;: To voice enable your app, you only need to get the Alan Client SDK and drop it to your app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Serverless environment&lt;/strong&gt;: No need to plan for, deploy and maintain any infrastructure or speech components - the Alan Platform does the bulk of the work.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;On-the-fly updates&lt;/strong&gt;: All changes to the dialogs become available immediately.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Voice flow testing and analytics&lt;/strong&gt;: Alan Studio provides advanced tools for testing your dialog flows and getting the analytics data on users&#39; interactions, all in the same console.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to start&lt;/h2&gt; &#xA;&lt;p&gt;To create a voice assistant for your iOS app written in Swift or Objective-C:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://studio.alan.app/register&#34; target=&#34;_blank&#34;&gt;Sign up for Alan Studio&lt;/a&gt; to build voice scripts in JavaScript and test them.&lt;/li&gt; &#xA; &lt;li&gt;Use the Alan iOS SDK to embed a voice assistant to your application. For details, see &lt;a href=&#34;https://alan.app/docs/client-api/ios/ios-api&#34; target=&#34;_blank&#34;&gt;Alan AI documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cocoapods.org/pods/AlanSDK-iOS&#34;&gt;Alan iOS SDK on CocoaPods.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alan-ai/alan-sdk-ios/releases&#34;&gt;Alan iOS SDK releases&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example apps&lt;/h2&gt; &#xA;&lt;p&gt;In the &lt;a href=&#34;https://github.com/alan-ai/alan-sdk-ios/tree/master/examples&#34;&gt;Examples&lt;/a&gt; folder, you can find example apps integrated with the Alan voice SDK for iOS. Launch the app, tap the Alan button and start giving voice commands. For example, in the Food Delivery app you can ask: &#34;What is it?&#34; or &#34;What do you have?&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Other platforms&lt;/h2&gt; &#xA;&lt;p&gt;You may also want to try Alan Client SDKs for the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alan-ai/alan-sdk-web&#34; target=&#34;_blank&#34;&gt;Web&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alan-ai/alan-sdk-android&#34; target=&#34;_blank&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alan-ai/alan-sdk-flutter&#34; target=&#34;_blank&#34;&gt;Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alan-ai/alan-sdk-ionic&#34; target=&#34;_blank&#34;&gt;Ionic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alan-ai/alan-sdk-cordova&#34; target=&#34;_blank&#34;&gt;Apache Cordova&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alan-ai/alan-sdk-reactnative&#34; target=&#34;_blank&#34;&gt;React Native&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alan-ai/alan-sdk-pcf&#34; target=&#34;_blank&#34;&gt;PowerApps&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Have questions?&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions or something is missing in the documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join &lt;a href=&#34;https://app.slack.com/client/TL55N530A&#34;&gt;Alan AI Slack community&lt;/a&gt; for support&lt;/li&gt; &#xA; &lt;li&gt;Contact us at &lt;a href=&#34;mailto:support@alan.app&#34;&gt;support@alan.app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>