<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-16T01:39:41Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Weebly/Try</title>
    <updated>2024-01-16T01:39:41Z</updated>
    <id>tag:github.com,2024-01-16:/Weebly/Try</id>
    <link href="https://github.com/Weebly/Try" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Handle Objective-C Exceptions with Swift&#39;s error handling system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Try&lt;/h1&gt; &#xA;&lt;p&gt;Try allows you to handle Objective-C exceptions using Swift error handling. There are a lot of APIs in Objective-C that can throw exceptions that are simply unhandable in Swift. For example, NSKeyedUnarchiver can throw an exception if you attempt to coerce a value to an incompatible type.&lt;/p&gt; &#xA;&lt;p&gt;In the below example, we&#39;ll decode an &lt;code&gt;int&lt;/code&gt; that was written by an &lt;code&gt;NSKeyedArchiver&lt;/code&gt;. If this data actually encoded a &lt;code&gt;float&lt;/code&gt; the &lt;code&gt;decodeIntForKey(_:)&lt;/code&gt; method would normally throw an exception, but with Try it throws a Swift error, and we can handle it gracefully. The method will handle the error in a more Swift-friendly way by returning &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func decodeCountFromData(data: Data) -&amp;gt; Int? {&#xA;&#x9;let archiver = NSKeyedUnarchiver(forReadingWith: data)&#xA;&#x9;defer { archiver.finishDecoding() }&#xA;&#x9;&#xA;&#x9;do {&#xA;&#x9;    try trap {&#xA;&#x9;    &#x9;return archiver.decodeInteger(forKey: &#34;count&#34;)&#xA;&#x9;    }&#xA;&#x9;} catch let error as NSError {&#xA;&#x9;    if let exception = error.userInfo[tryExceptionErrorKey] as? NSException {&#xA;&#x9;        dlog(&#34;ERROR: Exception decoding count: \(exception)&#34;)&#xA;&#x9;    } else {&#xA;&#x9;        dlog(&#34;ERROR: Unknown decoding error: \(error)&#34;)&#xA;&#x9;    }&#xA;&#x9;&#xA;&#x9;    return nil&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;The concept &amp;amp; original implementation was done by &lt;a href=&#34;https://github.com/jberkman&#34;&gt;Jacob Berkman&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>