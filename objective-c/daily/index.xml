<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-28T01:48:37Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>londonappbrewery/bmi-calculator-flutter</title>
    <updated>2022-06-28T01:48:37Z</updated>
    <id>tag:github.com,2022-06-28:/londonappbrewery/bmi-calculator-flutter</id>
    <link href="https://github.com/londonappbrewery/bmi-calculator-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learn to Code While Building Apps - The Complete Flutter Development Bootcamp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/AppBreweryBanner.png&#34; alt=&#34;App Brewery Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BMI Calculator ðŸ’ª&lt;/h1&gt; &#xA;&lt;h2&gt;Our Goal&lt;/h2&gt; &#xA;&lt;p&gt;The objective of this tutorial is to look at how we can customise Flutter Widgets to achieve our own beautiful user interface designs. If you have a designer on board, no matter how unconventional their designs are, we can create them using Flutter.&lt;/p&gt; &#xA;&lt;h2&gt;What you will create&lt;/h2&gt; &#xA;&lt;p&gt;Weâ€™re going to make a Body Mass Index Calculator inspired by the beautiful designs made by &lt;a href=&#34;https://dribbble.com/shots/4585382-Simple-BMI-Calculator&#34;&gt;Ruben Vaalt&lt;/a&gt;. It will be a multi screen app with simple functionality but full-on custom styling.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/bmi-calc-demo.gif&#34; alt=&#34;Finished App&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What you will learn&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to use Flutter themes to create coherent branding.&lt;/li&gt; &#xA; &lt;li&gt;How to create multi-page apps using Flutter Routes and Navigator.&lt;/li&gt; &#xA; &lt;li&gt;How to extract and refactor Flutter Widgets with a click of the button.&lt;/li&gt; &#xA; &lt;li&gt;How to pass functions as parameters and fields.&lt;/li&gt; &#xA; &lt;li&gt;How to use the GestureDetector Widget to detect more than just a tap.&lt;/li&gt; &#xA; &lt;li&gt;How to use custom colour palettes by using hex codes.&lt;/li&gt; &#xA; &lt;li&gt;How to customise Flutter Widgets to achieve a specific design style.&lt;/li&gt; &#xA; &lt;li&gt;Understand Dart Enums and the Ternary Operator.&lt;/li&gt; &#xA; &lt;li&gt;Learn about composition vs. inheritance and the Flutter way of creating custom UI.&lt;/li&gt; &#xA; &lt;li&gt;Understand the difference between const and final in Dart and when to use each.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a companion project to The App Brewery&#39;s Complete Flutter Development Bootcamp, check out the full course at &lt;a href=&#34;https://www.appbrewery.co/&#34;&gt;www.appbrewery.co&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/readme-end-banner.png&#34; alt=&#34;End Banner&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>radarlabs/radar-sdk-ios</title>
    <updated>2022-06-28T01:48:37Z</updated>
    <id>tag:github.com,2022-06-28:/radarlabs/radar-sdk-ios</id>
    <link href="https://github.com/radarlabs/radar-sdk-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS SDK for Radar, the leading geofencing and location tracking platform&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/radarlabs/radar-sdk-ios/master/logo.png&#34; alt=&#34;Radar&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/RadarSDK&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/RadarSDK.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?sanitize=true&#34; alt=&#34;Carthage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://radar.com&#34;&gt;Radar&lt;/a&gt; is the leading geofencing and location tracking platform.&lt;/p&gt; &#xA;&lt;p&gt;The Radar SDK abstracts away cross-platform differences between location services, allowing you to add geofencing, location tracking, trip tracking, geocoding, and search to your apps with just a few lines of code.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the Radar overview documentation &lt;a href=&#34;https://radar.com/documentation&#34;&gt;here&lt;/a&gt;. See the Radar SDK documentation &lt;a href=&#34;https://radar.com/documentation/sdk&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also see a detailed SDK reference &lt;a href=&#34;https://radarlabs.github.io/radar-sdk-ios/Classes/Radar.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Migrating&lt;/h2&gt; &#xA;&lt;p&gt;See migration guides in &lt;code&gt;MIGRATION.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;See a Swift example app in &lt;code&gt;Example/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run the example app, clone this repository, add your publishable API key in &lt;code&gt;AppDelegate.swift&lt;/code&gt;, and build the app.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Have questions? We&#39;re here to help! Email us at &lt;a href=&#34;mailto:support@radar.io&#34;&gt;support@radar.io&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SDWebImage/SDWebImageSVGCoder</title>
    <updated>2022-06-28T01:48:37Z</updated>
    <id>tag:github.com,2022-06-28:/SDWebImage/SDWebImageSVGCoder</id>
    <link href="https://github.com/SDWebImage/SDWebImageSVGCoder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A SVG coder plugin for SDWebImage, using Apple&#39;s built-in framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SDWebImageSVGCoder&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/SDWebImage/SDWebImageSVGCoder&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/SDWebImage/SDWebImageSVGCoder.svg?style=flat&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SDWebImageSVGCoder&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SDWebImageSVGCoder.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SDWebImageSVGCoder&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/SDWebImageSVGCoder.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SDWebImageSVGCoder&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/SDWebImageSVGCoder.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageSVGCoder&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s for&lt;/h2&gt; &#xA;&lt;p&gt;SDWebImageSVGCoder is a SVG coder plugin for &lt;a href=&#34;https://github.com/rs/SDWebImage/&#34;&gt;SDWebImage&lt;/a&gt; framework, which provide the image loading support for &lt;a href=&#34;https://en.wikipedia.org/wiki/Scalable_Vector_Graphics&#34;&gt;SVG&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The SVG rendering is done using Apple&#39;s framework CoreSVG.framework (introduced in iOS 13/macOS 10.15).&lt;/p&gt; &#xA;&lt;h2&gt;Note for SVGKit user&lt;/h2&gt; &#xA;&lt;p&gt;Previously before 1.0.0 version, this SVG Coder is powered by third party library &lt;a href=&#34;https://github.com/SVGKit/SVGKit&#34;&gt;SVGKit&lt;/a&gt;. Which support iOS 8+(macOS 10.10+) as well.&lt;/p&gt; &#xA;&lt;p&gt;However, due to the lack support of that third party library, which contains massive issues without community&#39;s help, no clarity of version release, makes a pain for us to maintain. So, We decide to deprecate SVGKit support and move it into another repo: &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageSVGKitPlugin&#34;&gt;SDWebImageSVGKitPlugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;User who use SVGKit or have to support iOS 8+(macOS 10.10+) can still use that SDWebImageSVGKitPlugin instead. You can also mix these two SVG coders at the same time. But since Apple already provide a built-in framework support, we prefer to use that instead, which can reduce complicated dependency, code size, and get polished from Apple&#39;s system upgrade.&lt;/p&gt; &#xA;&lt;h2&gt;Note for CoreSVG framework&lt;/h2&gt; &#xA;&lt;p&gt;So far (Xcode 11.4 &amp;amp;&amp;amp; iOS 13.4), the CoreSVG.framework is still in private framework. I&#39;ve already send the feedback radar to ask for the public for this framework. If you want, please help us to fire radars and request to Apple as well: &lt;a href=&#34;https://feedbackassistant.apple.com/&#34;&gt;https://feedbackassistant.apple.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The CoreSVG.framework API is stable and match the same concept as CoreGraphics&#39;s PDF API, so it&#39;s no reason to keep private. And we&#39;ve already submitted Apps which use the CoreSVG to render the vector images on App Store.&lt;/p&gt; &#xA;&lt;p&gt;All the SPI access here we use the runtime access and early check, even if future OS upgrade break the function, this framework will not crash your App and just load failed. I&#39;ll keep update to the latest changes for each firmware update.&lt;/p&gt; &#xA;&lt;p&gt;If you still worry about the SPI usage, you can use &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageSVGKitPlugin&#34;&gt;SDWebImageSVGKitPlugin&lt;/a&gt;. But we may not response to any parser or rendering issue related to &lt;a href=&#34;https://github.com/SVGKit/SVGKit&#34;&gt;SVGKit&lt;/a&gt;, because it&#39;s already no longer maintained.&lt;/p&gt; &#xA;&lt;p&gt;There is also another solution: &lt;a href=&#34;https://w3c.github.io/svgwg/specs/svg-native/index.html&#34;&gt;SVG-Native&lt;/a&gt;, a new W3C standard from Adobe, which is a subset of SVG/1.1. Both Apple/Google/Microsoft already join the agreement for this standard, you can try to write your own coder using code from &lt;a href=&#34;https://github.com/adobe/svg-native-viewer/raw/master/svgnative/example/testCocoaCG/SVGNSView.mm&#34;&gt;SVG-native-viewer&lt;/a&gt; and adopt SVG-native for vector images.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt; &#xA;&lt;p&gt;You can modify the code or use some other SVG files to check the compatibility.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 13+&lt;/li&gt; &#xA; &lt;li&gt;tvOS 13+&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.15+&lt;/li&gt; &#xA; &lt;li&gt;watchOS 6+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;SDWebImageSVGCoder is available through &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SDWebImageSVGCoder&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;SDWebImageSVGCoder is available through &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;SDWebImage/SDWebImageSVGCoder&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;SDWebImageSVGCoder is available through &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/SDWebImage/SDWebImageSVGCoder.git&#34;, from: &#34;1.4&#34;)&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Render SVG as vector image&lt;/h3&gt; &#xA;&lt;p&gt;To use SVG coder, you should firstly add the &lt;code&gt;SDImageSVGCoder&lt;/code&gt; to the coders manager. Then you can call the View Category method to start load SVG images. See &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#coder-usage&#34;&gt;Wiki - Coder Usage&lt;/a&gt; here for these steps.&lt;/p&gt; &#xA;&lt;p&gt;Note SVG is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Vector_graphics&#34;&gt;vector image&lt;/a&gt; format, and UIImageView/NSImageView support rendering vector image as well. Which means you can change the size without losing any details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Objective-C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;// register coder, on AppDelegate&#xA;SDImageSVGCoder *SVGCoder = [SDImageSVGCoder sharedCoder];&#xA;[[SDImageCodersManager sharedManager] addCoder:SVGCoder];&#xA;// load SVG url&#xA;UIImageView *imageView;&#xA;[imageView sd_setImageWithURL:url]&#xA;// Changing size&#xA;CGRect rect = imageView.frame;&#xA;rect.size.width = 200;&#xA;rect.size.height = 200;&#xA;imageView.frame = rect;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// register coder, on AppDelegate&#xA;let SVGCoder = SDImageSVGCoder.shared&#xA;SDImageCodersManager.shared.addCoder(SVGCoder)&#xA;// load SVG url&#xA;let imageView: UIImageView&#xA;imageView.sd_setImage(with: url)&#xA;// Changing size&#xA;var rect = imageView.frame&#xA;rect.size.width = 200&#xA;rect.size.height = 200&#xA;imageView.frame = rect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note since UIImageView/NSImageView support this vector rendering, it means this coder plugin can be compatible for &lt;a href=&#34;https://developer.apple.com/xcode/swiftui/&#34;&gt;SwiftUI&lt;/a&gt;. Check &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageSwiftUI/issues/50&#34;&gt;SDWebImageSwiftUI&lt;/a&gt; for usage.&lt;/p&gt; &#xA;&lt;p&gt;Note: for watchOS, which does not support UIKit, so you can not use vector image format. (including both SVG and PDF)&lt;/p&gt; &#xA;&lt;h3&gt;Render SVG as bitmap image&lt;/h3&gt; &#xA;&lt;p&gt;In most cases, vector SVG is preferred. But however, sometimes you may want the bitmap form of SVG, used for image processing or watchOS.&lt;/p&gt; &#xA;&lt;p&gt;By default it use the SVG viewBox size. You can also specify a desired size during image loading using &lt;code&gt;.imageThumbnailPixelSize&lt;/code&gt; context option. And you can specify whether or not to keep aspect ratio during scale using &lt;code&gt;.imagePreserveAspectRatio&lt;/code&gt; context option.&lt;/p&gt; &#xA;&lt;p&gt;Note: When using &lt;code&gt;imageThumbnailPixelSize&lt;/code&gt;, pass 0 for width or height will remove the limit of this length. For example, given a SVG image which original size is &lt;code&gt;(40,50)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;preserve aspect ratio&lt;/th&gt; &#xA;   &lt;th&gt;width&lt;/th&gt; &#xA;   &lt;th&gt;height&lt;/th&gt; &#xA;   &lt;th&gt;effect&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;(40,50)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;(80,100)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;(20,25)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;(40,50)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;(50,50)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;(40,100)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;(20,50)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;(40,50)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note: Once you pass the &lt;code&gt;imageThumbnailPixelSize&lt;/code&gt;, we will always generate the bitmap representation. If you do want the vector format, do not pass them, let &lt;code&gt;UIImageView&lt;/code&gt; to dynamically stretch the SVG.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Objective-C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;UIImageView *imageView;&#xA;CGSize bitmapSize = CGSizeMake(500, 500);&#xA;[imageView sd_setImageWithURL:url placeholderImage:nil options:0 context:@{SDWebImageContextThumbnailPixelSize: @(bitmapSize)];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let imageView: UIImageView&#xA;let bitmapSize = CGSize(width: 500, height: 500)&#xA;imageView.sd_setImage(with: url, placeholderImage: nil, options: [], context: [.imageThumbnailPixelSize : bitmapSize])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Export SVG data&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SDWebImageSVGCoder&lt;/code&gt; provide an easy way to export the SVG image generated by this coder plugin, to the original SVG data.&lt;/p&gt; &#xA;&lt;p&gt;Note: The bitmap form of SVG does not support SVG data export.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Objective-C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;UIImage *svgImage; // UIImage with vector image, or NSImage contains `NSSVGImageRep`&#xA;if (svgImage.sd_isVector) { // This API available in SDWebImage 5.6.0&#xA;    NSData *svgData = [svgImage sd_imageDataAsFormat:SDImageFormatSVG];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let svgImage: UIImage // UIImage with vector image, or NSImage contains `NSSVGImageRep`&#xA;if svgImage.sd_isVector { // This API available in SDWebImage 5.6.0&#xA;    let svgData = svgImage.sd_imageData(as: .SVG)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compatibility for CoreSVG framework&lt;/h2&gt; &#xA;&lt;h4&gt;The CSS &lt;code&gt;opacity&lt;/code&gt; can not been applied when &lt;code&gt;fill&lt;/code&gt; color exists&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;path d=&#34;M399.8,68.2c77.3,3.1,160.6,32.1&#34; opacity=&#34;0.15&#34; fill=&#34;rgb(29,36,60)&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Behavior&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;App Crash.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Workaround: Use CSS &lt;code&gt;rgba&lt;/code&gt; to set the opacity instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;path d=&#34;M399.8,68.2c77.3,3.1,160.6,32.1&#34; fill=&#34;rgba(29,36,60,0.15)&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Backward Deployment&lt;/h2&gt; &#xA;&lt;p&gt;This framework supports backward deployment on iOS 12-/macOS 10.14-. And you can combine both &lt;code&gt;SDWebImageSVGCoder&lt;/code&gt; for higher firmware version, use &lt;code&gt;SDWebImageSVGKitPlugin&lt;/code&gt; for lower firmware version.&lt;/p&gt; &#xA;&lt;p&gt;For CocoaPods user, you can skip the platform version validation in Podfile with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;13.0&#39; # This does not effect your App Target&#39;s deployment target version, just a hint for CocoaPods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pay attention, you should always use the runtime version check to ensure those symbols are available, you should mark all the classes use public API with &lt;code&gt;API_AVAILABLE&lt;/code&gt; annotation as well. See below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;if (@available(iOS 13, *)) {&#xA;    [SDImageCodersManager.sharedCoder addCoder:SDImageSVGCoder.sharedCoder];&#xA;} else {&#xA;    [SDImageCodersManager.sharedCoder addCoder:SDImageSVGKCoder.sharedCoder];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImageSVGCoder/master/Example/Screenshot/SVGDemo.png&#34; width=&#34;300&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImageSVGCoder/master/Example/Screenshot/SVGDemo-macOS.png&#34; width=&#34;600&#34;&gt; &#xA;&lt;p&gt;These SVG images are from &lt;a href=&#34;https://commons.wikimedia.org/wiki/Main_Page&#34;&gt;wikimedia&lt;/a&gt;, you can try the demo with your own SVG image as well.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;DreamPiggy&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SDWebImageSVGCoder is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>