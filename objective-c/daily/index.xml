<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-12T01:32:58Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>johnno1962/injectionforxcode</title>
    <updated>2023-09-12T01:32:58Z</updated>
    <id>tag:github.com,2023-09-12:/johnno1962/injectionforxcode</id>
    <link href="https://github.com/johnno1962/injectionforxcode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Runtime Code Injection for Objective-C &amp; Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;http://injectionforxcode.johnholdsworth.com/injection.png&#34; alt=&#34;Icon&#34;&gt; Injection Plugin for Xcode&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) John Holdsworth 2012-19&lt;/p&gt; &#xA;&lt;h1&gt;TLDR:&lt;/h1&gt; &#xA;&lt;p&gt;Xcode is an integrated development environment (IDE) for macOS containing a suite of software development tools developed by Apple for developing software for macOS, iOS, iPadOS, watchOS, and tvOS. Injection for Xcode is an Xcode plugin (available via &lt;a href=&#34;http://alcatraz.io/&#34;&gt;Alcatraz&lt;/a&gt;) or &lt;a href=&#34;https://raw.githubusercontent.com/johnno1962/injectionforxcode/master/#user-content-use-with-appcode&#34;&gt;AppCode&lt;/a&gt; that dynamically inserts new Swift / Objective-C code into a running app in order to speed up your build process. It does this without making &lt;em&gt;any&lt;/em&gt; changes to your project.&lt;/p&gt; &#xA;&lt;p&gt;An up-to-date overview by Rob Norback of &lt;a href=&#34;https://medium.com/@robnorback/the-secret-to-1-second-compile-times-in-xcode-9de4ec8345a1&#34;&gt;how to incorporate it into your workflow is here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This repo is no longer maintained&lt;/em&gt;. The current version of Injection is &lt;a href=&#34;https://github.com/johnno1962/InjectionIII&#34;&gt;InjectionIII&lt;/a&gt; in the Mac App Store.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/johnno1962/injectionforxcode/master/documentation/images/injected.gif&#34; alt=&#34;Injection Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Announcements of major additions to the project will be made on twitter &lt;a href=&#34;https://twitter.com/@Injection4Xcode&#34;&gt;@Injection4Xcode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Stop Press&lt;/h3&gt; &#xA;&lt;p&gt;If you know the trick which I won&#39;t detail here plugins still load in Xcode 8 GM and injection has been updated for it and Swift 3. Patched injection works fine and unpatched injection works if the &#34;InjectionLoader&#34; bundle is codesigned for the simulator. This is done in a &#34;Run Script&#34; build phase in this project if you need to update the code signing identity to dis-ambiguate it. Please raise issues with any problems or look at &lt;a href=&#34;https://johntmcintosh.com/blog/2016/10/03/code-injection-ios&#34;&gt;this blog&lt;/a&gt;. One thing I have noticed is you can no longer add methods using injection which was proably never a particularly good idea in Swift.&lt;/p&gt; &#xA;&lt;h3&gt;Stop Stop Press&lt;/h3&gt; &#xA;&lt;p&gt;Injection is now available as a standalone app rather than have to build the plugin which you can download &lt;a href=&#34;http://johnholdsworth.com/injection.html&#34;&gt;here&lt;/a&gt;. As injection no longer works on the deivce due to sandboxing in iOS10 this is the recommended route going forward. For more information consult the &lt;a href=&#34;https://johnno1962.github.io/InjectionApp/injectionfaq.html&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For TDD, there is a interesting fork of the injection plugin you can download &lt;a href=&#34;https://github.com/polac24/injectionforxcode/tree/tdd&#34;&gt;here&lt;/a&gt;. It runs all tests covering a source file each time you inject. It&#39;s on the &#39;tdd&#39; branch.&lt;/p&gt; &#xA;&lt;h2&gt;How to Use Injection for Xcode&lt;/h2&gt; &#xA;&lt;p&gt;For installation and usage for AppCode &lt;a href=&#34;https://raw.githubusercontent.com/johnno1962/injectionforxcode/master/#user-content-use-with-appcode&#34;&gt;see below&lt;/a&gt;. If you&#39;re a visual learner, you may appreciate &lt;a href=&#34;http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/&#34;&gt;this video post&lt;/a&gt; from &lt;a href=&#34;https://twitter.com/@orta&#34;&gt;@Orta&lt;/a&gt; covering the basics.&lt;/p&gt; &#xA;&lt;p&gt;With Xcode, either install via Alcatraz, or install by cloning this repo and build &lt;code&gt;InjectionPluginLite/InjectionPlugin.xcodeproj&lt;/code&gt;. If you are building locally, note that you need to restart Xcode to load the plugin. A popup should appear asking to confirm loading a plugin not signed by Apple, that signals that the plugin is set up.&lt;/p&gt; &#xA;&lt;p&gt;The plugin can be removed either via Alcatraz, or by running: &lt;code&gt;rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/InjectionPlugin.xcplugin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Simple Proof of Concept Once Installed&lt;/h3&gt; &#xA;&lt;p&gt;Once it is installed, compile and run a project as normal. From here you should take any class that would exist when your app is loaded, add a new function &lt;code&gt;- injected&lt;/code&gt; and add a breakpoint on that line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)injected&#xA;{&#xA;    NSLog(@&#34;I&#39;ve been injected: %@&#34;, self);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@objc func injected() {&#xA;    print(&#34;I&#39;ve been injected: \(self)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;=&lt;/kbd&gt;, and you&#39;ll see Xcode stop at the breakpoint. You&#39;ve just injected new code into a running app. &lt;strong&gt;Awesome right?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Callbacks in Your Code&lt;/h3&gt; &#xA;&lt;p&gt;You can build on top of Injection from three callbacks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;- (void)injected&lt;/code&gt; as an instance method, which gives you the chance to re-update an object with new contexts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;+ (void)injected&lt;/code&gt; as a class method, making it possible to update globals with new information&lt;/li&gt; &#xA; &lt;li&gt;Listening for &lt;code&gt;INJECTION_BUNDLE_NOTIFICATION&lt;/code&gt;, allowing other classes to listen out for injection calls, this is useful for providing &lt;a href=&#34;https://github.com/artsy/eigen/pull/1236&#34;&gt;app level changes&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are interested in diving even deeper into callbacks, check out &lt;a href=&#34;https://raw.githubusercontent.com/johnno1962/injectionforxcode/master/documentation/tunable_parameters.md&#34;&gt;Tunable Parameters&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/johnno1962/injectionforxcode/master/documentation/images/injection_tunable.gif&#34; alt=&#34;Tunable Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Swift Support&lt;/h2&gt; &#xA;&lt;p&gt;Swift support works great when working with a collection of classes. However, there are a number of cases where re-injection won&#39;t work elegantly with Swift:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Making changes to Structs.&lt;/li&gt; &#xA; &lt;li&gt;Changing &lt;code&gt;func&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt;es that are marked as &lt;code&gt;final&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Global &lt;code&gt;func&lt;/code&gt; or variables that are not constrained into a class.&lt;/li&gt; &#xA; &lt;li&gt;Compiler optimisations can stop injection working. If so, build DEBUG.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In day-to-day development against Cocoa/UIKit, it&#39;s rare, but possible to hit these cases, for more information see &lt;a href=&#34;https://raw.githubusercontent.com/johnno1962/injectionforxcode/master/#what-happens-with-swift&#34;&gt;What Happens With Swift?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it Works&lt;/h2&gt; &#xA;&lt;p&gt;Injection for Xcode is an extension to the Xcode IDE that allows you to patch the implementation of a class&#39;s method without having to restart the application.&lt;/p&gt; &#xA;&lt;p&gt;It performs this by parsing the build logs of the application to determine how a source file was last compiled. With this it wraps the result of re-compiling into a bundle which is injected into the application using the dynamic loader. At this point there are two versions of a class in the app, the original and a new modified version from the bundle. The modified version is then &#34;swizzled&#34; onto the original class so changes take effect.&lt;/p&gt; &#xA;&lt;p&gt;This swizzling takes advantage of the fact that Objective-C binds method invocations to implementations at run time. This can also be performed on Swift classes provided that the method or class is not final or private (i.e. the method can be overridden) by patching the class&#39; &#34;vtable&#34;. This excludes the injection of methods of structs.&lt;/p&gt; &#xA;&lt;h2&gt;What Else Does This Plugin Do?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It has file watcher that can inject when a file is saved from whichever editor you use. Enable this in the preferences pane accessed on menu item &#34;Product/Injection Plugin/Tunable Parameters&#34;: &#34;File Watcher&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is support for working specifically with &lt;a href=&#34;https://raw.githubusercontent.com/johnno1962/injectionforxcode/master/documentation/storyboards.md&#34;&gt;Storyboard-based iOS projects&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The plugin offers a way to quickly change a &lt;a href=&#34;https://raw.githubusercontent.com/johnno1962/injectionforxcode/master/documentation/tunable_parameters.md&#34;&gt;collection of tunable parameters&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Xcode is given a badge, showing the number of active Injection connections to apps.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When you start using Injection, a new Xcode Project is added to the same folder as your project (either &lt;code&gt;iOSInjectionProject&lt;/code&gt; or &lt;code&gt;OSXInjectionProject&lt;/code&gt;.) This is the xcode project base for the changes which are injected into your project, it is recommended to add this to your &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Each time a project is injected, &lt;code&gt;injectionCount.txt&lt;/code&gt; in the injection project&#39;s directory (above) is incremented. This can give you a sense of how much time you save (number of injections * amount saved per injection = a happier you).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The injection key command can be customised from &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;=&lt;/kbd&gt; in the &#34;Tunable App Parameters&#34; panel.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Works on a device, if you apply a &lt;a href=&#34;https://raw.githubusercontent.com/johnno1962/injectionforxcode/master/documentation/patching_injection.md&#34;&gt;patch to your project.&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Perform unit tests that cover your Swift class/struct/enum. For details see &lt;a href=&#34;https://raw.githubusercontent.com/johnno1962/injectionforxcode/master/documentation/tdd.md&#34;&gt;TDD with Injection for Xcode&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What Happens with Swift?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://injectionforxcode.johnholdsworth.com/injection2.png&#34; alt=&#34;Icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swift, presents a few more stumbling blocks for the uninitiated. Provided that methods are of a non final class and are non final (this excludes structs alas) they can be injected. In this example the &lt;code&gt;sharedInstance&lt;/code&gt; variable is declared &lt;code&gt;static&lt;/code&gt; rather than &#34;class&#34; to make sure it is not injected to ensure there is only ever one singleton. For the &#34;injected&#34; methods to work your class &lt;em&gt;must&lt;/em&gt; inherit from NSObject.&lt;/p&gt; &#xA;&lt;p&gt;More problematic is the more common use of variables or functions outside a class which are referred to across the files of a bundle. Swift 1.2+ takes the view these &#34;internal&#34; scope symbols should not be available across bundles and are made &#34;private extern&#34; in their object file making them unavailable at run time. This means that the above code will inject but injecting another file referring to the dispatch_on_main function will fail with obscure dynamic loading errors.&lt;/p&gt; &#xA;&lt;p&gt;The simplest solution is to make these variables and functions public though, for a framework, this may be unsatisfactory. The alternative is to patch the object files of the project to remove the private extern flag and relink the bundle. In order to do this a script &lt;code&gt;~/bin/unhide.sh&lt;/code&gt; is created by the plugin build which should be called as an additional &#34;Run Script&#34; build phase after linking your app to perform this patch and relink.&lt;/p&gt; &#xA;&lt;h2&gt;Use with AppCode&lt;/h2&gt; &#xA;&lt;p&gt;Injection can be used from inside AppCode provided the application &lt;a href=&#34;https://raw.githubusercontent.com/johnno1962/injectionforxcode/master/documentation/patching_injection.md&#34;&gt;has been patched&lt;/a&gt; and you have previously injected that project from inside Xcode to set up a link to the build logs.&lt;/p&gt; &#xA;&lt;p&gt;To install, download the jar file &lt;code&gt;InjectionPluginAppCode/Injection.jar&lt;/code&gt; from this repo and go to AppCode preferences, choose &#34;Install plugin from disk&#34; and locate the .jar. Then restart the IDE. Now you will get new menu options under the Run menu. You’ll need to re-patch the project from inside AppCode as it uses a different port number to connect.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations of Injection&lt;/h2&gt; &#xA;&lt;p&gt;There are limitations of course, largely centering around static variables, static or global functions and their Swift equivalents. Consider the following Objective-C code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://injectionforxcode.johnholdsworth.com/injection1.png&#34; alt=&#34;Icon&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;One potential problem is when the new version of the class is loaded, it comes with it&#39;s own versions of static variables such as &lt;code&gt;sharedInstance&lt;/code&gt; and the &lt;code&gt;once&lt;/code&gt; token. After injection has occurred, this would generate a new singleton instance.&lt;/p&gt; &lt;p&gt;To prevent this, class methods with the prefix &#34;shared&#34; are not swizzled on injection to support this common idiom.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It can be tough to look through all of the memory of a running application. In order to determine the classes and instances to call the &lt;code&gt;injected&lt;/code&gt; callbacks on, Injection performs a &#34;sweep&#34; to find all objects in memory. Roughly, this involves looking at an object, then recursively looking through objects which it refers to. For example, the object&#39;s instance variables and properties.&lt;/p&gt; &lt;p&gt;This process is seeded using the application&#39;s delegate and all windows. Once all the in-memory reference are collected, Injection will then filter these references to ones that it has compiled and injected. Then sending them the messages referenced in the &lt;a href=&#34;##user-content-callbacks-in-your-code&#34;&gt;callbacks section&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If no references are found, Injection will look through all objects that are referred to via &lt;code&gt;sharedInstance&lt;/code&gt;. If that fails, well, Injection couldn&#39;t find your instance. This is one way in which you may miss callbacks in your app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The function &lt;code&gt;dispatch_on_main&lt;/code&gt; does not inject, as it has been statically linked into the application. It does however, inject by proxy in the case shown via the &lt;code&gt;doSomething&lt;/code&gt; method. &lt;code&gt;dispatch_on_main&lt;/code&gt; will have been linked locally to a version in the object file being injected.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>epam/road-ios-framework</title>
    <updated>2023-09-12T01:32:58Z</updated>
    <id>tag:github.com,2023-09-12:/epam/road-ios-framework</id>
    <link href="https://github.com/epam/road-ios-framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ROAD – Rapid Objective-C Applications Development&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://opensource.org/licenses/BSD-3-Clause&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/l/ROADFramework/badge.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/epam/road-ios-framework/&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/p/ROADFramework/badge.png&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/epam/road-ios-framework/&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/v/ROADFramework/badge.png&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/epam/road-ios-framework?branch=master&#34;&gt;&lt;img src=&#34;http://img.shields.io/coveralls/epam/road-ios-framework/master.svg?style=flat&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/epam/road-ios-framework&#34;&gt;&lt;img src=&#34;http://img.shields.io/travis/epam/road-ios-framework/master.svg?style=flat&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A set of reusable components taking advantage of extra dimension &lt;a href=&#34;https://en.wikipedia.org/wiki/Attribute-oriented_programming&#34;&gt;Attribute-Oriented Programming&lt;/a&gt; adds.&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Core&lt;/strong&gt; - support for attributes, reflection and helper-extensions on Foundation classes.&lt;br&gt; &lt;strong&gt;Services&lt;/strong&gt; - implementation of Service Locator pattern, centralized replacement for singletons.&lt;br&gt; &lt;strong&gt;Serialization&lt;/strong&gt; - attribute-based JSON and XML parsers for easy DOM (de)serializations.&lt;br&gt; &lt;strong&gt;Web Services&lt;/strong&gt; - attribute-based HTTP client API.&lt;/p&gt; &#xA;&lt;h2&gt;Snippet&lt;/h2&gt; &#xA;&lt;p&gt;Connection to the test HTTP server, that returns JSON from headers you send, could look as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RF_ATTRIBUTE(RFWebService, serviceRoot = @&#34;http://headers.jsontest.com/&#34;)&#xA;@interface JsonTestWebClient : RFWebServiceClient&#xA;&#xA;RF_ATTRIBUTE(RFWebServiceCall, method = @&#34;GET&#34;, prototypeClass = [MyWebServiceResponse class])&#xA;RF_ATTRIBUTE(RFWebServiceHeader, headerFields = @{@&#34;Text&#34; : @&#34;A lot of text&#34;,&#xA;                                                   @&#34;Number&#34; : [@1434252.234 stringValue],&#xA;                                                   @&#34;Date&#34; : [[NSDate dateWithTimeIntervalSince1970:100000000] description]})&#xA;- (id&amp;lt;RFWebServiceCancellable&amp;gt;)echoRequestHeadersAsJSONWithSuccess:(void(^)(MyWebServiceResponse result))successBlock failure:(void(^)(NSError *error))failureBlock;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then we define the model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RF_ATTRIBUTE(RFSerializable)&#xA;@interface MyWebServiceResponse : NSObject&#xA;&#xA;RF_ATTRIBUTE(RFSerializable, serializationKey = @&#34;Text&#34;)&#xA;@property NSString *text;&#xA;&#xA;RF_ATTRIBUTE(RFSerializable, serializationKey = @&#34;Number&#34;)&#xA;@property NSNumber *number;&#xA;&#xA;RF_ATTRIBUTE(RFSerializable, serializationKey = @&#34;Date&#34;)&#xA;RF_ATTRIBUTE(RFSerializableDate, format = @&#34;yyyy-MM-dd HH:mm:ss Z&#34;)&#xA;@property NSDate *date;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and make singleton instance of JsonTestWebClient accessible through RFServiceProvider:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@interface RFServiceProvider (JsonTestWebClient)&#xA;&#xA;RF_ATTRIBUTE(RFService, serviceClass = [JsonTestWebClient class])&#xA;+ (JsonTestWebClient *)jsonTestWebClient;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[RFServiceProvider jsonTestWebClient] echoRequestHeadersAsJSONWithSuccess:^(MyWebServiceResponse *result) {&#xA;    NSLog(@&#34;%@&#34;, result);&#xA;} failure:^(NSError *error) {&#xA;    NSLog(@&#34;Something terrible happened! Here are details : %@&#34;, error);&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;ROAD requires &lt;strong&gt;iOS 5.0&lt;/strong&gt; and above. The compatibility with &lt;strong&gt;4.3&lt;/strong&gt; and older is not tested.&lt;/p&gt; &#xA;&lt;p&gt;ROAD initially designed to use &lt;strong&gt;ARC&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Jump Start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is the only recommended way of ROAD integration. Besides the standard configuration of pod dependencies, pod_install hook is required as shown below. A typical Podfile will look as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;ROADFramework&#39;&#xA;&#xA;post_install do |installer|&#xA;    require File.expand_path(&#39;ROADConfigurator.rb&#39;, &#39;./Pods/libObjCAttr/libObjCAttr/Resources/&#39;)&#xA;    ROADConfigurator::post_install(installer)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you want to get rid of warning from Xcodeproj gem, copy-paste and run in terminal next command before running &lt;code&gt;pod install&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export COCOAPODS_DISABLE_DETERMINISTIC_UUIDS=YES&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using components separately&lt;/strong&gt;&lt;br&gt; If you&#39;d like to embed only specific components from the framework it can be done with CocoaPods as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;ROADFramework/ROADServices&#39;&#xA;pod &#39;ROADFramework/ROADWebService&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detailed information on internals of ROAD integration as well as advanced topics like integration with predefined workspace, multiple projects or targets is available in &lt;a href=&#34;https://raw.githubusercontent.com/epam/road-ios-framework/master/Documents/Configuration/Cocoapods.md&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;User documentation for the following components is available in &lt;strong&gt;Documents&lt;/strong&gt; folder:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/epam/road-ios-framework/master/Documents/ROADCore.md&#34;&gt;Core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/epam/road-ios-framework/master/Documents/ROADServices.md&#34;&gt;Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/epam/road-ios-framework/master/Documents/ROADSerialization.md&#34;&gt;Serialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/epam/road-ios-framework/master/Documents/ROADWebService.md&#34;&gt;Web Services&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Classes reference is available in &lt;a href=&#34;http://cocoadocs.org/docsets/ROADFramework/&#34;&gt;cocoadocs.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ROAD is made available under the terms of the &lt;a href=&#34;http://opensource.org/licenses/BSD-3-Clause&#34;&gt;BSD-3&lt;/a&gt;. Open the LICENSE file that accompanies this distribution in order to see the full text of the license.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;There are three ways you can help us:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Raise an issue.&lt;/strong&gt; You found something that does not work as expected? Let us know about it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Suggest a feature.&lt;/strong&gt; It&#39;s even better if you come up with a new feature and write us about it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Write some code.&lt;/strong&gt; We would love to see more pull requests to our framework, just make sure you have the latest sources. For more information, check out &lt;a href=&#34;https://raw.githubusercontent.com/epam/road-ios-framework/master/Contributing.md&#34;&gt;the guidelines for contributing&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>GeeTeam/gt3-ios-sdk</title>
    <updated>2023-09-12T01:32:58Z</updated>
    <id>tag:github.com,2023-09-12:/GeeTeam/gt3-ios-sdk</id>
    <link href="https://github.com/GeeTeam/gt3-ios-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Geetest 3.0 iOS Objective-C SDK&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;本仓库已停止维护。通过依赖管理或手动方式获取最新 SDK 请访问 &lt;a href=&#34;https://docs.geetest.com/sensebot/deploy/client/ios#%E5%AE%89%E8%A3%85&#34;&gt;iOS SDK 及 Demo 下载地址&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;GT3Captcha Project&lt;/h1&gt; &#xA;&lt;h2&gt;概述&lt;/h2&gt; &#xA;&lt;p&gt;极验验证 3.0 iOS SDK 提供给集成 iOS 原生客户端开发的开发者使用, SDK 不依赖任何第三方库.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bitcode 版本&lt;/strong&gt;在 &lt;code&gt;Bitcode&lt;/code&gt; 目录下的 &lt;code&gt;GT3Captcha.framework&lt;/code&gt;及&lt;code&gt;GT3Captcha.Bundle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;非 Bitcode 版本&lt;/strong&gt;在 &lt;code&gt;GT3Example&lt;/code&gt; 目录下的 &lt;code&gt;GT3Captcha.framework&lt;/code&gt;及&lt;code&gt;GT3Captcha.Bundle&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;环境需求&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;条目&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;开发目标&lt;/td&gt; &#xA;   &lt;td&gt;兼容 iOS7, 推荐 iOS8+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;开发环境&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 8.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;系统依赖&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Webkit.framework&lt;/code&gt;, &lt;code&gt;JavaScriptCore.framework&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SDK 三方依赖&lt;/td&gt; &#xA;   &lt;td&gt;无&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;资源依赖&lt;/td&gt; &#xA;   &lt;td&gt;依赖 &lt;code&gt;GT3Captcha.Bundle&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;获取 SDK&lt;/h2&gt; &#xA;&lt;h3&gt;使用 &lt;code&gt;git&lt;/code&gt; 命令从 Github 获取&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/GeeTeam/gt3-ios-objc.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;手动下载获取&lt;/h3&gt; &#xA;&lt;p&gt;使用从 github 下载&lt;code&gt;.zip&lt;/code&gt;文件获取最新的 SDK.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/GeeTeam/gt3-ios-SDK&#34;&gt;Github: gt3-ios-objc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用&lt;/h2&gt; &#xA;&lt;h3&gt;引入 &lt;code&gt;GT3Captcha.framework&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;使用 &lt;code&gt;Linked Frameworks and Libraries&lt;/code&gt; 方式引入 &lt;code&gt;GT3Captcha.framework&lt;/code&gt;. &lt;code&gt;GT3Captcha.framework&lt;/code&gt; 是 &lt;code&gt;Static Library&lt;/code&gt;, 支持 iOS7+.&lt;/p&gt; &#xA;&lt;h3&gt;引入 &lt;code&gt;GT3Captcha.Bundle&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;把仓库中的 &lt;code&gt;GT3Captcha.Bundle&lt;/code&gt; 拖入项目中. iOS7 不支持 &lt;code&gt;Dynamic Library&lt;/code&gt;, 无法使用 &lt;code&gt;embedded binaries&lt;/code&gt;. 而 &lt;code&gt;Dynamic Library&lt;/code&gt; 无法获取 &lt;code&gt;.strings&lt;/code&gt; 等资源文件, 这里以 bundle 外嵌的方式单独管理 SDK 所需资源文件.&lt;/p&gt; &#xA;&lt;p&gt;如需自定义按钮的标题请查阅 &lt;a href=&#34;https://github.com/GeeTeam/gt3-ios-SDK/raw/develop/gt3-ios-dev-doc.md#tipsdict&#34;&gt;&lt;code&gt;tipsDict&lt;/code&gt;&lt;/a&gt; 相关定义&lt;/p&gt; &#xA;&lt;h3&gt;Demo 提供的示例场景&lt;/h3&gt; &#xA;&lt;p&gt;使用参见根部目录下的 &lt;code&gt;GT3Example&lt;/code&gt; Demo 工程, Demo 包含以下场景:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在登录使用 SDK 默认封装接口 &lt;code&gt;LoginViewController&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;在注册使用 SDK 默认封装接口&lt;code&gt;RegisterViewController&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;在自定义按钮下使用 SDK 默认封装接口 &lt;code&gt;CustomButton&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;在自定义按钮下使用自定义接口 &lt;code&gt;AsyncButton&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;语言环境配置&lt;/h3&gt; &#xA;&lt;p&gt;Demo 以 iOS8 作为示例, 语言默认支持中文简体、中文繁体、英文，但需要在 &lt;code&gt;.plist&lt;/code&gt; 里添加如下属性(已存在的不用再次添加):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;CFBundleLocalizations&amp;lt;/key&amp;gt;&#xA;&#x9;&amp;lt;array&amp;gt;&#xA;&#x9;&#x9;&amp;lt;string&amp;gt;en&amp;lt;/string&amp;gt;&#xA;&#x9;&#x9;&amp;lt;string&amp;gt;zh_CN&amp;lt;/string&amp;gt;&#xA;&#x9;&#x9;&amp;lt;string&amp;gt;zh_TW&amp;lt;/string&amp;gt;&#xA;&#x9;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SDK 及产品详情&lt;/h3&gt; &#xA;&lt;p&gt;极验验证 3.0 服务介绍 &lt;a href=&#34;http://docs.geetest.com/install/overview/&#34;&gt;服务介绍&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SDK 安装教程见 &lt;a href=&#34;http://docs.geetest.com/install/client/ios/&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SDK 接口文档见 &lt;a href=&#34;https://github.com/GeeTeam/gt3-ios-SDK/raw/develop/gt3-ios-dev-doc.md&#34;&gt;接口文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;接口&lt;/h2&gt; &#xA;&lt;p&gt;集成前需要先了解极验验证 3.0 的&lt;a href=&#34;http://docs.geetest.com/install/overview/#%E4%BA%A7%E5%93%81%E7%BB%93%E6%9E%84&#34;&gt;产品结构&lt;/a&gt;, 并且必须要先在您的后端搭建相应的&lt;strong&gt;服务端 SDK&lt;/strong&gt;，并配置从 &lt;a href=&#34;https://account.geetest.com/login&#34;&gt;极验后台&lt;/a&gt; 获取的 &lt;code&gt;&amp;lt;gt_captcha_id&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;geetest_key&amp;gt;&lt;/code&gt;用来配置您集成了极验服务端 SDK 的后台.&lt;/p&gt; &#xA;&lt;p&gt;其中 iOS SDK 主要提供以下接口:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;配置验证初始化&lt;/li&gt; &#xA; &lt;li&gt;启动验证&lt;/li&gt; &#xA; &lt;li&gt;验证生命周期的代理方法 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;错误处理&lt;/li&gt; &#xA;   &lt;li&gt;结果处理&lt;/li&gt; &#xA;   &lt;li&gt;流程控制&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;更新日志&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.10.2:&lt;/strong&gt; 新增日语支持; 优化内部流程;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.10.1:&lt;/strong&gt; 优化网络模块; 优化内部状态控制; 功能增强; 新增印尼语支持; 其它问题修复;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.9.0:&lt;/strong&gt; 添加 &lt;code&gt;GT3Captcha.Bundle&lt;/code&gt;, 为 &lt;code&gt;Static Library&lt;/code&gt; 单独管理图片、文件等资源;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.8.10:&lt;/strong&gt; 修复潜在 bug; 增强统计接口;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.8.8:&lt;/strong&gt; 修复潜在的 crash 问题; 修复内存泄漏; 增加 debug 代理;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.8.6:&lt;/strong&gt; 紧急修复 &lt;code&gt;openURL:&lt;/code&gt; 在 iOS11 上导致的 crash 问题;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.8.5:&lt;/strong&gt; 优化高度获取方案; 其他问题修复;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.8.1:&lt;/strong&gt; 修复 iOS8+ 网络 bug; 细节优化;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.7.10:&lt;/strong&gt; 错误统一; UI 逻辑调整;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.7.6:&lt;/strong&gt; 改善数据; 其他问题修复;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.7.2:&lt;/strong&gt; 改善数据交互; 增加 forbidden 事件;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.6.3:&lt;/strong&gt; 修复 onepass 下没有图形提示的问题; 修复因状态不一致导致的 server 返回 &#39;runtime error&#39;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.6.2:&lt;/strong&gt; 解决 0.6.1 版在部分情况下, 执行动画导致 CPU 高消费; 解决已发现在数据层面导致的服务端返回 &#39;runtime error&#39; 的问题;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.6.1:&lt;/strong&gt; 针对按钮绑定集成验证优化；针对反馈提供更多新接口；改善初始化体验；提供更详实的演示 Demo;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.5.7:&lt;/strong&gt; 修正 &lt;code&gt;NSBundle&lt;/code&gt; 在非 embedded binaries 中的问题;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.5.6:&lt;/strong&gt; 修改提示文案；&lt;code&gt;GTCaptchaManagerViewDelegate&lt;/code&gt; 方法更新；验证成功后再次验证只需要点击一次;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.5.5:&lt;/strong&gt; 对 &lt;code&gt;GT3CaptchaButton&lt;/code&gt; 增加可选的代理方法;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.5.4:&lt;/strong&gt; 完善验证管理器生命周期;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.5.3:&lt;/strong&gt; 修复在未检测到传感器的情况下的表现行为；优化销毁逻辑;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.5.2:&lt;/strong&gt; 修改多交互逻辑, 界面适配修正;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.5.0:&lt;/strong&gt; 变更为静态库以支持 iOS7；支持静默验证；少量修复和改善;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>