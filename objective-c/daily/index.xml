<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-17T01:36:36Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>renjinkui2719/DIS_KVC_KVO</title>
    <updated>2022-10-17T01:36:36Z</updated>
    <id>tag:github.com,2022-10-17:/renjinkui2719/DIS_KVC_KVO</id>
    <link href="https://github.com/renjinkui2719/DIS_KVC_KVO" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Objective-C KVC, KVO的实现源码，根据 Foundation.framework汇编反写而来,还原iOS对KVO,KVC的真实实现&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DIS_KVC_KVO&lt;/h1&gt; &#xA;&lt;p&gt;根据IOS Foundation框架汇编反写的KVC,KVO实现，可以在mac, IOS环境下运行调试, KVC与KVO实现机制密不可分，所以将它们作为一个工程。&lt;/p&gt; &#xA;&lt;p&gt;主要用作学习与研究，加深对KVC,KVO机制的理解，理解oc runtime在这些机制实现中的重要作用.&lt;/p&gt; &#xA;&lt;p&gt;为了在xcode里正确编译调试,工程代码命名遵循一个规则:&lt;br&gt; 和系统冲突的地方全部用D或者d_前缀修饰. 比如:&lt;/p&gt; &#xA;&lt;p&gt;Category &lt;code&gt;NSObject+NSKeyValueCoding&lt;/code&gt;, 在工程实现中改名为&lt;code&gt;NSObject+DSKeyValueCoding&lt;/code&gt;&lt;br&gt; 同理:&lt;br&gt; 方法 &lt;code&gt;- (id)valueForKey:(NSString *)key&lt;/code&gt; ==&amp;gt; &lt;code&gt;- (id)d_valueForKey:(NSString *)key&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;方法 &lt;code&gt;- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context&lt;/code&gt; ==&amp;gt; &lt;code&gt;- (void)d_addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;...&lt;/p&gt; &#xA;&lt;p&gt;类&lt;code&gt;NSKeyValueObservance&lt;/code&gt; ==&amp;gt; &lt;code&gt;DSKeyValueObservance&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;类&lt;code&gt;NSKeyValueChangeDictionary&lt;/code&gt; ==&amp;gt; &lt;code&gt;DSKeyValueChangeDictionary&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;...&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>googleads/googleads-consent-sdk-ios</title>
    <updated>2022-10-17T01:36:36Z</updated>
    <id>tag:github.com,2022-10-17:/googleads/googleads-consent-sdk-ios</id>
    <link href="https://github.com/googleads/googleads-consent-sdk-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Consent SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google Mobile Ads Consent SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;This SDK is no longer being maintained. We recommend using the &lt;a href=&#34;https://developers.google.com/admob/ump/ios/quick-start&#34;&gt;User Messaging Platform SDK&lt;/a&gt; instead.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Under the Google &lt;a href=&#34;https://raw.githubusercontent.com/google.com/about/company/consentstaging.html&#34;&gt;EU User Consent Policy&lt;/a&gt;, you must make certain disclosures to your users in the European Economic Area (EEA) and obtain their consent to use cookies or other local storage, where legally required, and to use personal data (such as AdID) to serve ads. This policy reflects the requirements of the EU ePrivacy Directive and the General Data Protection Regulation (GDPR). To support publishers in meeting their duties under this policy, Google offers this Consent SDK.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For additional documentation on the Google Mobile Ads Consent SDK, refer to the Consent SDK &lt;a href=&#34;https://raw.githubusercontent.com/developers.google.com/admob/ios/eu-consent&#34;&gt;developer docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;Apache 2.0 License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mikebuss/MTBBarcodeScanner</title>
    <updated>2022-10-17T01:36:36Z</updated>
    <id>tag:github.com,2022-10-17:/mikebuss/MTBBarcodeScanner</id>
    <link href="https://github.com/mikebuss/MTBBarcodeScanner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight, easy-to-use barcode scanning library for iOS 8+&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;This library is no longer actively maintained. If you are interested in maintaining it, please contact &lt;a href=&#34;mailto:mike@mikebuss.com&#34;&gt;the original author&lt;/a&gt;.&lt;/h1&gt; &#xA;&lt;h1&gt;MTBBarcodeScanner&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/MTBBarcodeScanner&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/MTBBarcodeScanner.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/MTBBarcodeScanner&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/MTBBarcodeScanner.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/MTBBarcodeScanner&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/MTBBarcodeScanner.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A lightweight, easy-to-use barcode scanning library for iOS 8+. This library is built on top of Apple&#39;s excellent AVFoundation framework, and will continue to receive updates as Apple releases them.&lt;/p&gt; &#xA;&lt;p&gt;With this library you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supply a custom UIView for displaying camera input&lt;/li&gt; &#xA; &lt;li&gt;Read any number of barcodes before stopping&lt;/li&gt; &#xA; &lt;li&gt;Read multiple codes on the screen at the same time (2D barcodes only)&lt;/li&gt; &#xA; &lt;li&gt;Easily read codes with a block, including the string value and position in the preview&lt;/li&gt; &#xA; &lt;li&gt;Easily flip from the back to the front camera&lt;/li&gt; &#xA; &lt;li&gt;Toggle the device&#39;s torch on and off&lt;/li&gt; &#xA; &lt;li&gt;Freeze and unfreeze capture to display a still image from the camera&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See demo project for examples of capturing one code, multiple codes, or highlighting codes as valid or invalid in the live preview.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mikebuss/MTBBarcodeScanner/develop/Assets/MTBBarcodeScanner.png&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt; &#xA;&lt;h4&gt;Sample Barcodes&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mikebuss/MTBBarcodeScanner/develop/Assets/sample-barcodes.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;MTBBarcodeScanner can be installed via &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; by adding the following line to your Podfile:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pod &#34;MTBBarcodeScanner&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate MTBBarcodeScanner into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;mikebuss/MTBBarcodeScanner&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; to build the framework and drag the built &lt;code&gt;MTBBarcodeScanner.framework&lt;/code&gt; into your Xcode project.&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d prefer not to use a dependency manager, you can download &lt;a href=&#34;https://github.com/mikebuss/MTBBarcodeScanner/tree/master/Classes/ios/Scanners&#34;&gt;these two files&lt;/a&gt; and add them to your project:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mikebuss/MTBBarcodeScanner/raw/master/Classes/ios/Scanners/MTBBarcodeScanner.h&#34;&gt;&lt;code&gt;MTBBarcodeScanner.h&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mikebuss/MTBBarcodeScanner/raw/master/Classes/ios/Scanners/MTBBarcodeScanner.m&#34;&gt;&lt;code&gt;MTBBarcodeScanner.m&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage in Objective-C Projects&lt;/h2&gt; &#xA;&lt;p&gt;To import the library: &lt;code&gt;#import &#34;MTBBarcodeScanner.h&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Initialization&lt;/h4&gt; &#xA;&lt;p&gt;To initialize an instance of &lt;code&gt;MTBBarcodeScanner&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;scanner = [[MTBBarcodeScanner alloc] initWithPreviewView:self.previewView];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;previewView&lt;/code&gt; is the &lt;code&gt;UIView&lt;/code&gt; in which the camera input will be displayed.&lt;/p&gt; &#xA;&lt;p&gt;If you only want to scan for certain MetaObjectTypes, you can initialize with the &lt;code&gt;initWithMetadataObjectTypes:previewView:&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;s = [[MTBBarcodeScanner alloc] initWithMetadataObjectTypes:@[AVMetadataObjectTypeQRCode]&#xA;                                               previewView:self.previewView];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;iOS 10 and later&lt;/h4&gt; &#xA;&lt;p&gt;If you are using the &lt;code&gt;MTBBarcodeScanner&lt;/code&gt; library on iOS 10 and later, you need to include the following &lt;code&gt;Info.plist&lt;/code&gt; key in order to request camera access or the application will crash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;NSCameraUsageDescription&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;Can we access your camera in order to scan barcodes?&amp;lt;/string&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course you can also set your own (localized) message here. To find out more about privacy-keys in iOS, check the &lt;a href=&#34;https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html&#34;&gt;official Apple documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Scanning&lt;/h4&gt; &#xA;&lt;p&gt;To read the first code and stop scanning:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To avoid a delay in the camera feed, start scanning in &lt;code&gt;viewDidAppear&lt;/code&gt; and not &lt;code&gt;viewDidLoad&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[MTBBarcodeScanner requestCameraPermissionWithSuccess:^(BOOL success) {&#xA;    if (success) {&#xA;&#xA;        NSError *error = nil;&#xA;        [self.scanner startScanningWithResultBlock:^(NSArray *codes) {&#xA;            AVMetadataMachineReadableCodeObject *code = [codes firstObject];&#xA;            NSLog(@&#34;Found code: %@&#34;, code.stringValue);&#xA;&#xA;            [self.scanner stopScanning];&#xA;        } error:&amp;amp;error];&#xA;&#xA;    } else {&#xA;        // The user denied access to the camera&#xA;    }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the camera is pointed at more than one 2-dimensional code, you can read all of them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSError *error = nil;&#xA;[self.scanner startScanningWithResultBlock:^(NSArray *codes) {&#xA;    for (AVMetadataMachineReadableCodeObject *code in codes) {&#xA;        NSLog(@&#34;Found code: %@&#34;, code.stringValue);&#xA;    }&#xA;    [self.scanner stopScanning];&#xA;} error:&amp;amp;error];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This only applies to 2-dimensional barcodes as 1-dimensional barcodes can only be read one at a time. See &lt;a href=&#34;https://developer.apple.com/library/ios/technotes/tn2325/_index.html&#34;&gt;relevant Apple document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To continuously read and only output unique codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSError *error = nil;&#xA;[self.scanner startScanningWithResultBlock:^(NSArray *codes) {&#xA;    for (AVMetadataMachineReadableCodeObject *code in codes) {&#xA;        if ([self.uniqueCodes indexOfObject:code.stringValue] == NSNotFound) {&#xA;            [self.uniqueCodes addObject:code.stringValue];&#xA;            NSLog(@&#34;Found unique code: %@&#34;, code.stringValue);&#xA;        }&#xA;    }&#xA;} error:&amp;amp;error];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Callback Blocks&lt;/h4&gt; &#xA;&lt;p&gt;An alternative way to setup MTBBarcodeScanner is to configure the blocks directly, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;self.scanner.didStartScanningBlock = ^{&#xA;    NSLog(@&#34;The scanner started scanning! We can now hide any activity spinners.&#34;);&#xA;};&#xA;&#xA;self.scanner.resultBlock = ^(NSArray *codes){&#xA;    NSLog(@&#34;Found these codes: %@&#34;, codes);&#xA;};&#xA;&#xA;self.scanner.didTapToFocusBlock = ^(CGPoint point){&#xA;    NSLog(@&#34;The user tapped the screen to focus. \&#xA;          Here we could present a view at %@&#34;, NSStringFromCGPoint(point));&#xA;};&#xA;&#xA;[self.scanner startScanning];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful if you would like to present a spinner while MTBBarcodeScanner is initializing.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to reference &lt;code&gt;self&lt;/code&gt; in one of these blocks, remember to use a weak reference to avoid a retain cycle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;__weak MyViewController *weakSelf = self;&#xA;self.scanner.resultBlock = ^(NSArray *codes){&#xA;    [weakSelf drawOverlaysOnCodes:codes];&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage in Swift 3+ Projects&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;code&gt;SwiftExampleViewController.swift&lt;/code&gt; file in the repository for a working example of this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UIKit&#xA;import MTBBarcodeScanner&#xA;&#xA;class SwiftExampleViewController: UIViewController {&#xA;    &#xA;    @IBOutlet var previewView: UIView!&#xA;    var scanner: MTBBarcodeScanner?&#xA;    &#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        &#xA;        scanner = MTBBarcodeScanner(previewView: previewView)&#xA;&#xA;        // Alternatively, limit the type of codes you can scan:&#xA;        // scanner = MTBBarcodeScanner(metadataObjectTypes: [AVMetadataObject.ObjectType.qr.rawValue], previewView: previewView)&#xA;    }&#xA;    &#xA;    override func viewDidAppear(_ animated: Bool) {&#xA;        super.viewDidAppear(animated)&#xA;        &#xA;        MTBBarcodeScanner.requestCameraPermission(success: { success in&#xA;            if success {&#xA;                do {&#xA;                    try self.scanner?.startScanning(resultBlock: { codes in&#xA;                        if let codes = codes {&#xA;                            for code in codes {&#xA;                                let stringValue = code.stringValue!&#xA;                                print(&#34;Found code: \(stringValue)&#34;)&#xA;                            }&#xA;                        }&#xA;                    })&#xA;                } catch {&#xA;                    NSLog(&#34;Unable to start scanning&#34;)&#xA;                }&#xA;            } else {&#xA;                UIAlertView(title: &#34;Scanning Unavailable&#34;, message: &#34;This app does not have permission to access the camera&#34;, delegate: nil, cancelButtonTitle: nil, otherButtonTitles: &#34;Ok&#34;).show()&#xA;            }&#xA;        })&#xA;        &#xA;    }&#xA;    &#xA;    override func viewWillDisappear(_ animated: Bool) {&#xA;        self.scanner?.stopScanning()&#xA;        &#xA;        super.viewWillDisappear(animated)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start scanning with a particular camera (front or back):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try self.scanner?.startScanning(with: .front,&#xA;    resultBlock: { codes in&#xA;        if let codes = codes {&#xA;            for code in codes {&#xA;                let stringValue = code.stringValue!&#xA;                print(&#34;Found code: \(stringValue)&#34;)&#xA;            }&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage in Swift 2.3 Projects&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UIKit&#xA;import MTBBarcodeScanner&#xA;&#xA;class ViewController: UIViewController {&#xA;&#xA;    var scanner: MTBBarcodeScanner?&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;&#xA;        scanner = MTBBarcodeScanner(previewView: self.view)&#xA;    }&#xA;    &#xA;    override func viewDidAppear(animated: Bool) {&#xA;        super.viewDidAppear(animated)&#xA;&#xA;        scanner?.startScanningWithResultBlock({ (codes) in&#xA;&#x9;            for code in codes {&#xA;&#x9;                print(code)&#xA;&#x9;            }&#xA;            }, error: nil)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Tap to Focus&lt;/h2&gt; &#xA;&lt;p&gt;By default, MTBBarcodeScanner will allow the user to tap the screen to focus the camera. To disable this functionality, set the &lt;code&gt;allowTapToFocus&lt;/code&gt; property to NO. To be notified when the user taps the screen, provide a block for the &lt;code&gt;didTapToFocusBlock&lt;/code&gt; property, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;self.scanner.didTapToFocusBlock = ^(CGPoint point){&#xA;    NSLog(@&#34;The user tapped the screen to focus. \&#xA;          Here we could present a view at %@&#34;, NSStringFromCGPoint(point));&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Switching Cameras&lt;/h2&gt; &#xA;&lt;p&gt;Switch to the opposite camera with the &lt;code&gt;flipCamera&lt;/code&gt; method on the scanner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;&#xA;- (IBAction)switchCameraTapped:(id)sender {&#xA;    [self.scanner flipCamera];&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or specify the camera directly using &lt;code&gt;setCamera:error&lt;/code&gt;, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;&#xA;NSError *error = nil;&#xA;MTBBarcodeScanner *scanner = [[MTBBarcodeScanner alloc] initWithPreviewView:_previewView];&#xA;[scanner setCamera:MTBCameraFront error:&amp;amp;error];&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Examples for these are in the demo project.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Freezing Capture&lt;/h2&gt; &#xA;&lt;p&gt;Under some circumstances you may want to freeze the video feed when capturing barcodes. To do this, call the &lt;code&gt;freezeCapture&lt;/code&gt; and &lt;code&gt;unfreezeCapture&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Limiting the Scan Zone&lt;/h2&gt; &#xA;&lt;p&gt;To limit the section of the screen that barcodes can be scanned in, set the &lt;code&gt;scanRect&lt;/code&gt; property on MTBBarcodeScanner inside the &lt;code&gt;didStartScanning&lt;/code&gt; callback block. See &lt;code&gt;MTBAdvancedExampleViewController&lt;/code&gt; for a working example of this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;__weak MTBAdvancedExampleViewController *weakSelf = self;&#xA;self.scanner.didStartScanningBlock = ^{&#xA;    weakSelf.scanner.scanRect = weakSelf.viewOfInterest.frame;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Controlling the Torch&lt;/h2&gt; &#xA;&lt;p&gt;To control the torch, set the &lt;code&gt;torchMode&lt;/code&gt; property or call the &lt;code&gt;toggleTorch&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;Available values include:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MTBTorchModeOff,&#xA;MTBTorchModeOn,&#xA;MTBTorchModeAuto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Capturing Still Images&lt;/h2&gt; &#xA;&lt;p&gt;To capture a still image, call the &lt;code&gt;captureStillImage:&lt;/code&gt; method after you&#39;ve started scanning.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Design Considerations&lt;/h2&gt; &#xA;&lt;p&gt;The primary goals of this library are to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provide an easy-to-use interface for barcode scanning&lt;/li&gt; &#xA; &lt;li&gt;Make as few assumptions about the scanning process as possible &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Don&#39;t assume the user wants to scan one code at a time&lt;/li&gt; &#xA;   &lt;li&gt;Don&#39;t assume the camera input view should be a particular size&lt;/li&gt; &#xA;   &lt;li&gt;Don&#39;t assume the scanning process will have it&#39;s own view controller&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer&lt;/h2&gt; &#xA;&lt;p&gt;Mike Buss&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mikebuss.com&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikebuss&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/michaeltbuss&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:mike@mikebuss.com&#34;&gt;Email&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MTBBarcodeScanner is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>