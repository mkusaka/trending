<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-08T01:37:12Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MelonCTech/Meproc</title>
    <updated>2023-11-08T01:37:12Z</updated>
    <id>tag:github.com,2023-11-08:/MelonCTech/Meproc</id>
    <link href="https://github.com/MelonCTech/Meproc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is not an Objective-C project. Meproc is a cross-platform process management and supervision service written in Melang.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MelonCTech/Meproc/master/docs/logo.png&#34; style=&#34;width:500px;&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Meproc&lt;/strong&gt; is a process management service that can start, stop, and restart specified programs in a specified manner through an HTTP API.&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support Restful API to start, stop, restart process groups, and view currently running process groups&lt;/li&gt; &#xA; &lt;li&gt;Support some simple dependencies between process groups&lt;/li&gt; &#xA; &lt;li&gt;Support cron jobs&lt;/li&gt; &#xA; &lt;li&gt;Support one-time tasks&lt;/li&gt; &#xA; &lt;li&gt;Support setting execution users and user groups for processes&lt;/li&gt; &#xA; &lt;li&gt;Support multiple platforms: Windows, Linux, MacOS, etc.&lt;/li&gt; &#xA; &lt;li&gt;The project only needs to pre-install the Melang interpreter, and no more others need to be installed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Meproc is written in &lt;a href=&#34;https://github.com/Water-Melon/Melang&#34;&gt;Melang&lt;/a&gt; language, which means that you need to install and only install Melang, then Meproc can be started up.&lt;/p&gt; &#xA;&lt;p&gt;You can pull the built docker image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull melonc/meproc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Start Meproc&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;melang meproc.m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can see the output that Meproc service listening address.&lt;/p&gt; &#xA;&lt;p&gt;The default IP is &lt;code&gt;127.0.0.1&lt;/code&gt; and port is &lt;code&gt;8606&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Start process&lt;/h3&gt; &#xA;&lt;p&gt;Here is a simple example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -v -XPUT http://127.1:8606/proc -d &#39;{&#34;name&#34;: &#34;sleep1&#34;, &#34;cmd&#34;: &#34;sleep 5&#34;, &#34;type&#34;: &#34;once&#34;, &#34;replica&#34;: 2, &#34;user&#34;: &#34;guest&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using a PUT HTTP request to start up a new process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;name&lt;/code&gt; is the task name. One task is a group of same processes. In this example, we will start up two process to run &lt;code&gt;sleep 5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;once&lt;/code&gt; means that the processes in this task will only be executed once. And there are three values of &lt;code&gt;type&lt;/code&gt; field:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;once&lt;/code&gt; means this task will only be executed once even if it exits unexpectedly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;daemon&lt;/code&gt; means this task is a daemon, so if this process exits in any reason, it will be restarted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cron&lt;/code&gt; means this task is a cron job, it will contain a field named &lt;code&gt;cron&lt;/code&gt; in task JSON.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;user&lt;/code&gt; indicates the user of the new process. Please make sure that Meproc has the permission to do this. &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;group&lt;/code&gt; are NOT working on Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let&#39;s take a look at another example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -v -XPUT http://127.1:8606/proc -d &#39;{&#34;name&#34;: &#34;sleep2&#34;, &#34;cmd&#34;: &#34;sleep 5&#34;, &#34;type&#34;: &#34;once&#34;, &#34;replica&#34;: 2, &#34;deps&#34;: [&#34;sleep1&#34;]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;deps&lt;/code&gt; indicates the list of task names that this task depends on.&lt;/p&gt; &#xA;&lt;p&gt;The meaning of &#34;dependency&#34; is that when a task is going to be executed, if it finds that the tasks in the &lt;code&gt;deps&lt;/code&gt; field are already running, it will wait for those tasks to finish before being executed. If the task in the &lt;code&gt;deps&lt;/code&gt; field of this task has never been executed, it will not prevent this task from being executed.&lt;/p&gt; &#xA;&lt;p&gt;A cron job example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -v -XPUT http://127.1:8606/proc -d &#39;{&#34;name&#34;: &#34;sleep2&#34;, &#34;cmd&#34;: &#34;sleep 5&#34;, &#34;type&#34;: &#34;cron&#34;, &#34;cron&#34;: &#34;* * * * *&#34;, &#34;replica&#34;: 2}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This task will be executed every minute.&lt;/p&gt; &#xA;&lt;h3&gt;Stop process&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s stop out &lt;code&gt;sleep1&lt;/code&gt; task.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -v -XDELETE http://127.1:8606/proc?name=sleep1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Restart process&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s restart task &lt;code&gt;sleep2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -v -XPOST http://127.1:8606/proc?name=sleep2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Restart will stop this task and start it again. And restart is only working on the tasks those are not stopped by &lt;code&gt;curl -v -XDELETE http://127.1:8606/proc?name=&amp;lt;proc_name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;List all tasks and processes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -v -XGET http://127.1:8606/proc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An HTTP response with a JSON body will be returned.&lt;/p&gt; &#xA;&lt;h3&gt;Change configuration&lt;/h3&gt; &#xA;&lt;p&gt;Configuration file is &lt;code&gt;conf/conf.m&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Conf = [&#xA;    &#39;ip&#39;: &#39;127.0.0.1&#39;,&#xA;    &#39;port&#39;: &#39;8606&#39;,&#xA;    &#39;log_level&#39;: &#39;debug&#39;,&#xA;    &#39;log_path&#39;: &#39;/tmp/Meproc.log&#39;,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Conf&lt;/code&gt; is a variable that contains all configurations that Meproc needs. And the name &lt;code&gt;Conf&lt;/code&gt; can not be changed and it is also case-sensitive.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;We start up Meproc, and run the commands that given below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -v -XPUT http://127.1:8606/proc -d &#39;{&#34;name&#34;: &#34;sleep1&#34;, &#34;cmd&#34;: &#34;sleep 5&#34;, &#34;type&#34;: &#34;once&#34;, &#34;replica&#34;: 2}&#39;&#xA;&#xA;curl -v -XPUT http://127.1:8606/proc -d &#39;{&#34;name&#34;: &#34;sleep2&#34;, &#34;cmd&#34;: &#34;sleep 5&#34;, &#34;type&#34;: &#34;once&#34;, &#34;replica&#34;: 2, &#34;deps&#34;: [&#34;sleep1&#34;]}&#39;&#xA;&#xA;curl -v -XPUT http://127.1:8606/proc -d &#39;{&#34;name&#34;: &#34;sleep3&#34;, &#34;cmd&#34;: &#34;sleep 5&#34;, &#34;type&#34;: &#34;once&#34;, &#34;replica&#34;: 2, &#34;deps&#34;: [&#34;sleep1&#34;, &#34;sleep2&#34;]}&#39;&#xA;&#xA;curl -v http://127.1:8606/proc&#xA;&#xA;curl -v -XDELETE http://127.1:8606/proc?name=sleep1&#xA;&#xA;curl -v -XPUT http://127.1:8606/proc -d &#39;{&#34;name&#34;: &#34;sleep1&#34;, &#34;cmd&#34;: &#34;sleep 5&#34;, &#34;type&#34;: &#34;once&#34;, &#34;replica&#34;: 2}&#39;&#xA;&#xA;curl -v -XPOST http://127.1:8606/proc?name=sleep1&#xA;&#xA;curl -v -XPUT http://127.1:8606/proc -d &#39;{&#34;name&#34;: &#34;sleep4&#34;, &#34;cmd&#34;: &#34;sleep 5&#34;, &#34;type&#34;: &#34;cron&#34;, &#34;cron&#34;: &#34;* * * * *&#34;, &#34;replica&#34;: 2}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We will see the output of Meproc like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;11/01/2023 10:28:28 UTC [INFO]: Listen: 127.0.0.1:8606&#xA;11/01/2023 10:28:31 UTC [INFO]: Task sleep1 started&#xA;11/01/2023 10:28:31 UTC [INFO]: Task sleep1 stopped&#xA;11/01/2023 10:28:31 UTC [INFO]: Task sleep2 started&#xA;11/01/2023 10:28:32 UTC [INFO]: Task sleep1 started&#xA;11/01/2023 10:28:32 UTC [INFO]: Task sleep1 stopped&#xA;11/01/2023 10:28:32 UTC [INFO]: Task sleep1 started&#xA;11/01/2023 10:28:37 UTC [INFO]: Process 1533616 (sleep2:1) exit&#xA;11/01/2023 10:28:37 UTC [INFO]: Process 1533615 (sleep2:0) exit&#xA;11/01/2023 10:28:37 UTC [INFO]: Process 1533626 (sleep1:1) exit&#xA;11/01/2023 10:28:37 UTC [INFO]: Process 1533624 (sleep1:0) exit&#xA;11/01/2023 10:28:37 UTC [INFO]: Task sleep3 started&#xA;11/01/2023 10:28:42 UTC [INFO]: Process 1533685 (sleep3:0) exit&#xA;11/01/2023 10:28:42 UTC [INFO]: Process 1533686 (sleep3:1) exit&#xA;11/01/2023 10:28:45 UTC [INFO]: Task sleep4 started&#xA;11/01/2023 10:28:50 UTC [INFO]: Process 1533747 (sleep4:0) exit&#xA;11/01/2023 10:28:50 UTC [INFO]: Process 1533748 (sleep4:1) exit&#xA;11/01/2023 10:30:00 UTC [INFO]: Task sleep4 started&#xA;11/01/2023 10:30:05 UTC [INFO]: Process 1534633 (sleep4:0) exit&#xA;11/01/2023 10:30:05 UTC [INFO]: Process 1534634 (sleep4:1) exit&#xA;11/01/2023 10:30:20 UTC [INFO]: Task sleep4 stopped&#xA;11/01/2023 10:30:20 UTC [INFO]: Task sleep4 started&#xA;11/01/2023 10:30:25 UTC [INFO]: Process 1534878 (sleep4:0) exit&#xA;11/01/2023 10:30:25 UTC [INFO]: Process 1534879 (sleep4:1) exit&#xA;11/01/2023 10:30:32 UTC [INFO]: Task sleep4 stopped&#xA;11/01/2023 10:30:32 UTC [INFO]: Task sleep4 started&#xA;11/01/2023 10:30:37 UTC [INFO]: Process 1534999 (sleep4:0) exit&#xA;11/01/2023 10:30:37 UTC [INFO]: Process 1535000 (sleep4:1) exit&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Water-Melon/Melang/raw/master/LICENSE&#34;&gt;BSD-3-Clause License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2023-present, &lt;a href=&#34;https://github.com/MelonCTech&#34;&gt;MelonCTech&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kgaddyEHI/BigNerdRanch</title>
    <updated>2023-11-08T01:37:12Z</updated>
    <id>tag:github.com,2023-11-08:/kgaddyEHI/BigNerdRanch</id>
    <link href="https://github.com/kgaddyEHI/BigNerdRanch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BigNerdRanchHomeWork&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BigNerdRanch&lt;/h1&gt; &#xA;&lt;p&gt;BigNerdRanchHomeWork&lt;/p&gt;</summary>
  </entry>
</feed>