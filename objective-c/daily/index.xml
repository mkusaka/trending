<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-22T01:36:17Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>getsentry/unity</title>
    <updated>2022-11-22T01:36:17Z</updated>
    <id>tag:github.com,2022-11-22:/getsentry/unity</id>
    <link href="https://github.com/getsentry/unity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unity SDK UPM package&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://sentry.io&#34; target=&#34;_blank&#34; align=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getsentry/sentry-unity/main/.github/sentry-wordmark-dark-400x119.svg?sanitize=true&#34; width=&#34;280&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://docs.sentry.io/platforms/unity/&#34; target=&#34;_blank&#34; align=&#34;right&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getsentry/sentry-unity/main/.github/unity-verified-logo.svg?sanitize=true&#34; width=&#34;280&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Sentry SDK for Unity&lt;/h1&gt; &#xA;&lt;p&gt;This is the UPM package for the Sentry SDK for Unity.&lt;/p&gt; &#xA;&lt;p&gt;Install it via &lt;code&gt;UPM&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/getsentry/unity.git#0.26.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Source code&lt;/h2&gt; &#xA;&lt;p&gt;The source code for this project is located at: &lt;a href=&#34;https://github.com/getsentry/sentry-unity/&#34;&gt;https://github.com/getsentry/sentry-unity/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sentry.io/platforms/unity/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-sentry.io-green.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-unity/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/getsentry/sentry-unity.svg?sanitize=true&#34; alt=&#34;Discussions&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/PXa5Apfe7K&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/621778831602221064?logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/sentry&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stack%20overflow-sentry-green.svg?sanitize=true&#34; alt=&#34;Stack Overflow&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/intent/follow?screen_name=getsentry&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/getsentry?label=getsentry&amp;amp;style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Appboy/appboy-segment-ios</title>
    <updated>2022-11-22T01:36:17Z</updated>
    <id>tag:github.com,2022-11-22:/Appboy/appboy-segment-ios</id>
    <link href="https://github.com/Appboy/appboy-segment-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Braze&#39;s side-by-side iOS SDK integration with Segment.IO&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/Appboy/appboy-segment-ios/raw/master/braze-logo.png&#34; alt=&#34;Braze Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Braze iOS Segment SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/Segment-Appboy&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Segment-Appboy.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Segment-Appboy&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Segment-Appboy.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Braze integration for analytics-ios.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Analytics is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; and &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;To install the Braze integration through Cocoapods, simply add the following line to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#34;Segment-Appboy&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to use the &lt;code&gt;Appboy-iOS-SDK/Core&lt;/code&gt; subspec instead of the full &lt;code&gt;Appboy-iOS-SDK&lt;/code&gt; pod, edit your &lt;code&gt;Podfile&lt;/code&gt; entry to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#34;Segment-Appboy/Core&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;To install the Braze integration through Carthage, add the following lines to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;segmentio/analytics-ios&#34;&#xA;github &#34;appboy/appboy-segment-ios&#34;&#xA;github &#34;appboy/appboy-ios-sdk&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Follow the standard procedure to add the frameworks built/retrieved by Carthage to your project (see &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;Adding frameworks to an application&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;To install the Braze integration through Swift Package Manager, follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select &lt;code&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In the search bar, enter &lt;a href=&#34;https://github.com/Appboy/appboy-segment-ios&#34;&gt;https://github.com/Appboy/appboy-segment-ios&lt;/a&gt;. Select either &lt;code&gt;AppboySegment&lt;/code&gt; or &lt;code&gt;AppboySegmentCore&lt;/code&gt;, depending on your use case.&lt;/li&gt; &#xA; &lt;li&gt;In your app&#39;s target, under &lt;code&gt;Build Settings &amp;gt; Other Linker Flags&lt;/code&gt;, add the &lt;code&gt;-ObjC&lt;/code&gt; linker flag.&lt;/li&gt; &#xA; &lt;li&gt;In the Xcode menu, click &lt;code&gt;Product &amp;gt; Scheme &amp;gt; Edit Scheme...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click the expand ▶️ next to &lt;code&gt;Build&lt;/code&gt; and select &lt;code&gt;Post-actions&lt;/code&gt;. Press &lt;code&gt;+&lt;/code&gt; and select &lt;code&gt;New Run Script Action&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In the dropdown next to &lt;code&gt;Provide build settings from&lt;/code&gt;, select your app&#39;s target.&lt;/li&gt; &#xA; &lt;li&gt;Copy this script into the open field:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash &#34;$BUILT_PRODUCTS_DIR/Appboy_iOS_SDK_AppboyKit.bundle/Appboy.bundle/appboy-spm-cleanup.sh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;After adding the dependency, you must register the integration with our SDK. To do this, import the Braze integration in your AppDelegate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#import &#34;SEGAppboyIntegrationFactory.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When using Swift Package Manager, you will need to import the SDK using &lt;code&gt;import AppboySegment&lt;/code&gt; or &lt;code&gt;import AppboySegmentCore&lt;/code&gt; depending on which package you are using.&lt;/p&gt; &#xA;&lt;p&gt;And add the following lines:&lt;/p&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;NSString *const SEGMENT_WRITE_KEY = @&#34; ... &#34;;&#xA;SEGAnalyticsConfiguration *config = [SEGAnalyticsConfiguration configurationWithWriteKey:SEGMENT_WRITE_KEY];&#xA;&#xA;[config use:[SEGAppboyIntegrationFactory instance]];&#xA;&#xA;[SEGAnalytics setupWithConfiguration:config];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;let SEGMENT_WRITE_KEY = &#34; ... &#34;&#xA;let config = SEGAnalyticsConfiguration(writeKey: SEGMENT_WRITE_KEY)&#xA;&#xA;config.use(SEGAppboyIntegrationFactory.instance())&#xA;&#xA;SEGAnalytics.setup(with: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://segment.com/docs/integrations/appboy/#ios&#34;&gt;our documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Endpoint Customization&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You must set your endpoint via the &lt;code&gt;ABKEndpointKey&lt;/code&gt; inside the &lt;code&gt;appboyOptions&lt;/code&gt; parameter passed to &lt;code&gt;startWithApiKey:inApplication:withLaunchOptions:withAppboyOptions:&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set the value to your custom endpoint URL’s authority (for example, &lt;code&gt;sdk.iad-01.braze.com&lt;/code&gt;, not &lt;code&gt;https://sdk.iad-01.braze.com&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;WWWWWW||WWWWWW&#xA; W W W||W W W&#xA;      ||&#xA;    ( OO )__________&#xA;     /  |           \&#xA;    /o o|    MIT     \&#xA;    \___/||_||__||_|| *&#xA;         || ||  || ||&#xA;        _||_|| _||_||&#xA;       (__|__|(__|__|&#xA;&#xA;The MIT License (MIT)&#xA;&#xA;Copyright (c) 2014 Segment, Inc.&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mattt/InflectorKit</title>
    <updated>2022-11-22T01:36:17Z</updated>
    <id>tag:github.com,2022-11-22:/mattt/InflectorKit</id>
    <link href="https://github.com/mattt/InflectorKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Efficiently Singularize and Pluralize Strings&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;InflectorKit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mattt/InflectorKit/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;InflectorKit is a port of the string inflection functionality from &lt;a href=&#34;https://github.com/rails/rails/raw/master/activesupport/lib/active_support/inflector/inflections.rb&#34;&gt;Rails ActiveSupport&lt;/a&gt; for Swift and Objective-C.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;InflectorKit joins &lt;a href=&#34;https://github.com/mattt/FormatterKit&#34;&gt;FormatterKit&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/mattt/TransformerKit&#34;&gt;TransformerKit&lt;/a&gt; in providing well-designed APIs for manipulating user-facing content.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Swift&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import InflectorKit&#xA;&#xA;for singular in [&#34;person&#34;, &#34;tomato&#34;, &#34;matrix&#34;, &#34;octopus&#34;, &#34;fish&#34;] {&#xA;    print(&#34;\(singular) → \(singular.pluralized)&#34;)&#xA;}&#xA;/*&#xA;Prints:&#xA;person → people&#xA;tomato → tomatoes&#xA;matrix → matrices&#xA;octopus → octopi&#xA;fish → fish&#xA;*/&#xA;&#xA;// You can also add pluralization rules,&#xA;// including irregular and uncountable words:&#xA;&#xA;let inflector = StringInflector.default&#xA;inflector.addPluralRule(#&#34;^i(Pod|Pad)( Mini)?$&#34;#, replacement: #&#34;i$1s$2&#34;#)&#xA;inflector.addIrregular(singular: &#34;lol&#34;, plural: &#34;lolz&#34;)&#xA;inflector.addUncountable(&#34;Herokai&#34;)&#xA;&#xA;for singular in [&#34;iPad Mini&#34;, &#34;lol&#34;, &#34;Herokai&#34;] {&#xA;    print(&#34;\(singular) → \(singular.pluralized)&#34;)&#xA;}&#xA;/*&#xA;Prints:&#xA;iPad Mini → iPads Mini&#xA;lol → lolz&#xA;Herokai → Herokai&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Objective-C&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &#34;NSString+InflectorKit.h&#34;&#xA;&#xA;for (NSString *singular in @[@&#34;person&#34;, @&#34;tomato&#34;, @&#34;matrix&#34;, @&#34;octopus&#34;, @&#34;fish&#34;]) {&#xA;  NSLog(@&#34;%@ → %@&#34;, singular, [singular pluralizedString]);&#xA;}&#xA;&#xA;/*&#xA;Prints:&#xA;person → people&#xA;tomato → tomatoes&#xA;matrix → matrices&#xA;octopus → octopi&#xA;fish → fish&#xA;*/&#xA;&#xA;// You can also add pluralization rules,&#xA;// including irregular and uncountable words:&#xA;&#xA;TTTStringInflector *inflector = [TTTStringInflector defaultInflector];&#xA;[inflector addPluralRule:@&#34;^i(Pod|Pad)( Mini)?$&#34; withReplacement:@&#34;i$1s$2&#34;];&#xA;[inflector addIrregularWithSingular:@&#34;lol&#34; plural:@&#34;lolz&#34;];&#xA;[inflector addUncountable:@&#34;Herokai&#34;];&#xA;&#xA;for (NSString *singular in @[@&#34;iPad Mini&#34;, @&#34;lol&#34;, @&#34;Herokai&#34;]) {&#xA;  NSLog(@&#34;%@ → %@&#34;, singular, [singular pluralizedString]);&#xA;}&#xA;&#xA;/*&#xA;Prints:&#xA;iPad Mini → iPads Mini&#xA;lol → lolz&#xA;Herokai → Herokai&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Add the InflectorKit package to your target dependencies in &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;YourProject&#34;,&#xA;  dependencies: [&#xA;    .package(&#xA;        url: &#34;https://github.com/mattt/InflectorKit&#34;,&#xA;        from: &#34;1.0.0&#34;&#xA;    ),&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the &lt;code&gt;swift build&lt;/code&gt; command to build your project.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;InflectorKit&lt;/code&gt; via CocoaPods, by adding the following line to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;InflectorKit&#39;, &#39;~&amp;gt; 1.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the &lt;code&gt;pod install&lt;/code&gt; command to download the library and integrate it into your Xcode project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Mattt (&lt;a href=&#34;https://twitter.com/mattt&#34;&gt;@mattt&lt;/a&gt;)&lt;/p&gt;</summary>
  </entry>
</feed>