<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-06T01:33:48Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>qasim/Airstream</title>
    <updated>2025-06-06T01:33:48Z</updated>
    <id>tag:github.com,2025-06-06:/qasim/Airstream</id>
    <link href="https://github.com/qasim/Airstream" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A framework for streaming audio between Apple devices using AirPlay.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Airstream&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An iOS / macOS framework for streaming audio between Apple devices using AirPlay.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s15.postimg.org/sdw8gr0bf/screen_recording.gif&#34; alt=&#34;An example gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use Airstream to start an AirPlay server in your iOS or macOS applications. Then, any Apple device can stream audio to your application via AirPlay, with no extra software required.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qasim/Airstream/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qasim/Airstream/master/#carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qasim/Airstream/master/#basic-usage&#34;&gt;Basic usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qasim/Airstream/master/#api-reference&#34;&gt;API reference&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qasim/Airstream/master/#airstream-1&#34;&gt;Airstream&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qasim/Airstream/master/#airstreamdelegate&#34;&gt;AirstreamDelegate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qasim/Airstream/master/#airstreamremote&#34;&gt;AirstreamRemote&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qasim/Airstream/master/#shairplay&#34;&gt;Shairplay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qasim/Airstream/master/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qasim/Airstream/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Airstream can be installed by using either Carthage or just simply cloning this repository and its submodules in your project.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager for Cocoa.&lt;/p&gt; &#xA;&lt;p&gt;You can install it using &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, to include Airstream in your project, specify it in your &lt;code&gt;Cartfile&lt;/code&gt; (make sure it&#39;s in the same directory as your &lt;code&gt;.xcodeproj&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;qasim/Airstream&#34; ~&amp;gt; 0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can install Airstream:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now see a &lt;code&gt;Carthage/Builds&lt;/code&gt; directory. From there, you can drag the built &lt;code&gt;Airstream.framework&lt;/code&gt; for your platform of choice into your Xcode project, and then add it as an embedded binary in your project&#39;s settings.&lt;/p&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;First, initialize and start Airstream somewhere (make sure that it&#39;s retained). You&#39;ll also want to set its delegate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let airstream = Airstream(name: &#34;My Airstream&#34;)&#xA;&#xA;airstream.delegate = self&#xA;airstream.startServer()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Your own AirPlay server is now up and running. You can gracefully shut it down as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;airstream.stopServer()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Implement any of the delegate methods to actually make use of Airstream&#39;s features, like retrieving a song&#39;s album artwork:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func airstream(airstream: Airstream, didSetCoverart coverart: NSData) {&#xA;  // Coverart for the item that&#39;s currently streaming&#xA;  let image = NSImage(data: coverart)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more detailed example on how to use Airstream, you can refer to the example projects which implement Airstream with the streamed audio output going directly to speakers via CoreAudio:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qasim/Airstream/tree/master/Examples/Airstream%20iOS%20Example&#34;&gt;iOS Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qasim/Airstream/tree/master/Examples/Airstream%20macOS%20Example&#34;&gt;macOS Example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API reference&lt;/h2&gt; &#xA;&lt;h3&gt;Airstream&lt;/h3&gt; &#xA;&lt;p&gt;This is the main class, from which you can start and stop the AirPlay server.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func init()&#xA;func init(name: String?)&#xA;func init(name: String?, password: String?)&#xA;func init(name: String?, password: String?, port: UInt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basic initializers for the Airstream.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func startServer()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starts the AirPlay server and begins broadcasting.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func stopServer()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Gracefully shuts down the AirPlay server.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var name: String&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The AirPlay server&#39;s receiver name. This is what is shown to devices when they go to connect to your AirPlay server. &lt;code&gt;&#34;My Airstream&#34;&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var password: String?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The AirPlay server&#39;s receiver password. You can set this to prompt any Apple devices that wish to connect to your AirPlay server with a password challenge.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var port: UInt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The port where the AirPlay server should broadcast to. &lt;code&gt;5000&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var running: Bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Determines whether the server is currently running or not.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var remote: AirstreamRemote?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The reference to this Airstream&#39;s remote control object, which can be used to send commands to the connected device. This variable may not be set until the delegate has called &lt;code&gt;airstream:didGainAccessToRemote:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var volume: Float?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The connected Apple device&#39;s volume, between &lt;code&gt;0.0&lt;/code&gt; (no volume) and &lt;code&gt;1.0&lt;/code&gt; (maximum volume).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var metadata: [String: String]?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The metadata for the current item being streamed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var coverart: Data?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The JPEG artwork (in binary) for the current item being streamed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var position: UInt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The position (in seconds) of the current item being streamed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var duration: UInt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The total duration (in seconds) of the current item being streamed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;AirstreamDelegate&lt;/h3&gt; &#xA;&lt;p&gt;This is the delegate class for &lt;a href=&#34;https://raw.githubusercontent.com/qasim/Airstream/master/#airstream-1&#34;&gt;Airstream&lt;/a&gt;. By conforming to this protocol, you can listen for changes in AirPlay server status and be notified when data changes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;optional func airstream(_ airstream: Airstream, willStartStreamingWithStreamFormat streamFormat: AudioStreamBasicDescription)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Called right after a device has connected and is about to stream audio. &lt;a href=&#34;https://developer.apple.com/reference/coreaudio/audiostreambasicdescription&#34;&gt;AudioStreamBasicDescription&lt;/a&gt; is a struct outlining the details of the audio output.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;optional func airstreamDidStopStreaming(_ airstream: Airstream)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Called right after a device has disconnected.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;optional func airstream(_ airstream: Airstream, didGainAccessToRemote remote: AirstreamRemote)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Called right after the remote control connection has been setup.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;optional func airstream(_ airstream: Airstream, processAudio buffer: UnsafeMutablePointer&amp;lt;Int8&amp;gt;, length: Int32)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Process linear PCM audio streamed from a device. &lt;code&gt;buffer&lt;/code&gt; is a pointer to the audio data, and &lt;code&gt;length&lt;/code&gt; is the number of bytes stored there.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;optional func airstreamFlushAudio(_ airstream: Airstream)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reset any audio output buffers you may be using, as the source has either changed or been disrupted.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;optional func airstream(_ airstream: Airstream, didSetVolume volume: Float)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Called when a device&#39;s volume was changed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;optional func airstream(_ airstream: Airstream, didSetMetadata metadata: [String: String])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Called when a device&#39;s metadata for the current item being streamed was changed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;optional func airstream(_ airstream: Airstream, didSetCoverart coverart: Data)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Called when a device&#39;s artwork for the current item being streamed was changed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;optional func airstream(_ airstream: Airstream, didSetPosition position: UInt, duration: UInt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Called when a device&#39;s current position or duration for the current item being streamed was changed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;AirstreamRemote&lt;/h3&gt; &#xA;&lt;p&gt;This is the remote control object. If this is present on the &lt;a href=&#34;https://raw.githubusercontent.com/qasim/Airstream/master/#airstream-1&#34;&gt;Airstream&lt;/a&gt; object, then you will be able to send commands to the device connected to your AirPlay server.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func play()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start playback.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func pause()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pause playback.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func stop()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Stop playback.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func playPause()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Toggle between starting and pausing playback.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func playResume()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Play after fast forwarding or rewinding.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func forward()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Begin fast forward.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func rewind()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Begin rewind.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func nextItem()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Play next item in playlist.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func previousItem()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Play previous item in playlist.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func shuffle()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shuffle items in playlist.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func increaseVolume()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Turn audio volume up.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func decreaseVolume()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Turn audio volume down.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func toggleMute()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Toggle mute status.&lt;/p&gt; &#xA;&lt;h2&gt;Shairplay&lt;/h2&gt; &#xA;&lt;p&gt;Airstream works by depending on a C library called &lt;a href=&#34;https://github.com/juhovh/shairplay&#34;&gt;shairplay&lt;/a&gt;, which is a free portable AirPlay server implementation. You can also visit &lt;a href=&#34;https://github.com/qasim/shairplay&#34;&gt;qasim/shairplay&lt;/a&gt; for the fork of shairplay that is used by Airstream, which compiles on both iOS and macOS.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This framework is really meant for educational purposes only. I hold no guarantee that integrating this framework into your application will allow you to pass Apple&#39;s app review process.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Airstream is released under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/qasim/Airstream/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>