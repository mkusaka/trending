<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-28T01:38:08Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Lision/LSAnimator</title>
    <updated>2024-10-28T01:38:08Z</updated>
    <id>tag:github.com,2024-10-28:/Lision/LSAnimator</id>
    <link href="https://github.com/Lision/LSAnimator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⛓ Easy to Read and Write Multi-chain Animations Lib in Objective-C and Swift.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/LSAnimatorLogo.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/documentation/objectivec&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Objective--C-7D6FFF.svg?sanitize=true&#34; alt=&#34;language&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/apple/swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Swift-6986FF.svg?sanitize=true&#34; alt=&#34;language&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;http://cocoapods.org/pods/LSAnimator&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/LSAnimator.svg?style=flat&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://travis-ci.org/Lision/LSAnimator&#34;&gt;&lt;img src=&#34;https://api.travis-ci.org/Lision/LSAnimator.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green.svg?style=flat&#34; alt=&#34;License MIT&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;http://cocoadocs.org/docsets/LSAnimator&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/LSAnimator.svg?style=flat&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://www.apple.com/nl/ios/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/support-iOS%209%2B%20-orange.svg?style=flat&#34; alt=&#34;Support&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/Lision/LSAnimator/raw/master/README_ZH-CN.md&#34;&gt;中文介绍&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This project is inspired by &lt;a href=&#34;https://github.com/jhurray/JHChainableAnimations&#34;&gt;JHChainableAnimations&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Why Choose LSAnimator &amp;amp; CoreAnimator?&lt;/h1&gt; &#xA;&lt;p&gt;You can write complex and easy-to-maintain animations in just a few lines of code by use LSAnimator(Objective-C) or CoreAnimator(Swift).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/LSAnimatorDemo.gif&#34; alt=&#34;Objective-C&#34;&gt;&amp;nbsp; &lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/CoreAnimatorDemo.gif&#34; alt=&#34;Swift&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What&#39;s The Multi-chain Animations?&lt;/h1&gt; &#xA;&lt;p&gt;CAAnimations and UIView animations are extremely powerful, but it is very hard to read when the animation is complicated.&lt;/p&gt; &#xA;&lt;p&gt;Say I want to move myView 100 pixels to the right with spring and then incre 30 pixels to the width with inward easing when the movement has finished:&lt;/p&gt; &#xA;&lt;h3&gt;The Old Way&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;[UIView animateWithDuration:2.0&#xA;                          delay:0.0&#xA;         usingSpringWithDamping:0.8&#xA;          initialSpringVelocity:1.0&#xA;                        options:0&#xA;                     animations:^{&#xA;                         CGPoint newPosition = self.myView.frame.origin;&#xA;                         newPosition.x += 100;&#xA;                         self.myView.frame = CGRectMake(newPosition.x, newPosition.y, self.myView.frame.size.width, self.myView.frame.size.height);&#xA;                     } completion:^(BOOL finished) {&#xA;                         [UIView animateWithDuration:2.0&#xA;                                               delay:0.0&#xA;                                             options:UIViewAnimationOptionCurveEaseIn&#xA;                                          animations:^{&#xA;                                              CGSize newSize = self.myView.frame.size;&#xA;                                              newSize.width += 30;&#xA;                                              self.myView.frame = CGRectMake(self.myView.frame.origin.x, self.myView.frame.origin.y, newSize.width, newSize.height);&#xA;                                          } completion:nil];&#xA;                     }];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Thats pretty gross huh... With LSAnimator it is one line of code.&lt;/p&gt; &#xA;&lt;h3&gt;Using LSAnimator&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/SingleChainDemo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;LSAnimator *animator = [LSAnimator animatorWithView:self.myView];&#xA;animator.moveX(100).spring.thenAfter(2).increWidth(30).easeIn.animate(2);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Emmmmm...There is an animation library called JHChainableAnimations can also do this.&lt;/p&gt; &#xA;&lt;h2&gt;Whats wrong with JHChainableAnimations?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jhurray/JHChainableAnimations&#34;&gt;JHChainableAnimations&lt;/a&gt; has powerful chainable animations AND easy to read/write syntax, but it does not support for Multi-chain Animations.&lt;/p&gt; &#xA;&lt;p&gt;Following the example above, assume now that the whole animation chain above needs to change the transparency of myView to zero at the same time:&lt;/p&gt; &#xA;&lt;h3&gt;Using LSAnimator&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/LSAnimatorEffect.gif&#34; alt=&#34;LSAnimator&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;With LSAnimator it is just need to add one line of code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;LSAnimator *animator = [LSAnimator animatorWithView:self.myView];&#xA;animator.moveX(100).spring.thenAfter(2).increWidth(30).easeIn.animate(2);&#xA;animator.concurrent.makeOpacity(0).animate(4);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using JHChainableAnimations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/JHChainableAnimationsEffect.gif&#34; alt=&#34;JHChainableAnimations&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emmmmm...With JHChainableAnimations it is can not finished task. Trying to add the following code will cause the animation bug or crash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;JHChainableAnimator *animator = [[JHChainableAnimator alloc] initWithView:self.myView];&#xA;animator.moveX(100).spring.thenAfter(2).moveWidth(30).easeIn.animate(2);&#xA;animator.makeOpacity(0).animate(4);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;LSAnimator VS JHChainableAnimations&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-chain Animations:&lt;/strong&gt; Can complete all animation design needs, More flexible than JHChainableAnimations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CALayer Support:&lt;/strong&gt; Support CALayer initialization, JHChainableAnimations only supports UIView.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parameter Auto-completion:&lt;/strong&gt; Support parameter auto-completion, JHChainableAnimations does not support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;LSAnimator support parameter auto-completion, &lt;strong&gt;including the number of parameters and parameter types&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/PACLSAnimator.gif&#34; alt=&#34;LSAnimator&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;JHChainableAnimations is not friendly when actually writing code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/PACJHChainableAnimations.gif&#34; alt=&#34;JHChainableAnimations&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;JHChainableAnimations is still a really good animation library and LSAnimator is standing on the shoulders of it.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Swift Support:&lt;/strong&gt; Swift 3.2 ~ 4 Support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Friendly Swift Interface:&lt;/strong&gt; Added friendly Swift interface in separate framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-chain Animations:&lt;/strong&gt; Can complete all animation design needs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CALayer Support:&lt;/strong&gt; Support CALayer initialization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parameter Auto-completion:&lt;/strong&gt; Support parameter auto-completion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support for Animation Hooks:&lt;/strong&gt; Added pre-animation and post-animation hooks for each animation step. Added a final completion hook that fires when all animation chains have completed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Non-intrusive:&lt;/strong&gt; There is no need to make the view/layer class inherit from other base class.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h3&gt;Creating an Animator&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// UIView initialization&#xA;LSAnimator *viewAnimator = [LSAnimator animatorWithView:self.myView];&#xA;LSAnimator *viewAnimator = [[LSAnimator alloc] initWithView:self.myView];&#xA;&#xA;// CALayer initialization&#xA;LSAnimator *layerAnimator = [LSAnimator animatorWithLayer:self.myLayer];&#xA;LSAnimator *layerAnimator = [[LSAnimator alloc] initWithLayer:self.myLayer];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Animating&lt;/h3&gt; &#xA;&lt;p&gt;Chainable properties like &lt;code&gt;moveX(x)&lt;/code&gt; must come between the animator and the &lt;code&gt;animate(t)&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Below is an example of how to double an objects size over the course of one second.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;animator.makeScale(2.0).animate(1.0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/UsageDemo/AnimatingDemo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Combining Animations&lt;/h3&gt; &#xA;&lt;p&gt;If you want to move the view while you scale it, add another chainable property. Order is not important.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;animator.makeScale(2.0).moveXY(100, 50).animate(1.0);&#xA;// the same as animator.moveXY(100, 50).makeScale(2.0).animate(1.0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/UsageDemo/CombiningAnimationsDemo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Combining Animations works only for the animation that needs to be done in the same step.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If the animations have different durations. When they &lt;strong&gt;can not be done in the same animation step&lt;/strong&gt;, they need to use &lt;strong&gt;Multi-chain Animations&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A full list of chainable properties can be found &lt;a href=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/#chainable-properties&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Chaining Animations&lt;/h3&gt; &#xA;&lt;p&gt;To chain animations seperate the chains with the &lt;code&gt;thenAfter(t)&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Below is an example of how to scale and object for 0.5 seconds, and then move it for 1 second when that is done.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;animator.makeScale(2.0).thenAfter(0.5).moveXY(100, 50).animate(1.0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/UsageDemo/ChainingAnimationsDemo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Animation Effects&lt;/h3&gt; &#xA;&lt;p&gt;Animation Effects To add an animation effect, call the effect method after the chainable property you want it to apply to.&lt;/p&gt; &#xA;&lt;p&gt;Below is an example of scaling a view with a spring effect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;animator.makeScale(2.0).spring.animate(1.0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/UsageDemo/AnimationEffectsDemo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you add 2 to the same chainable property the second will cancel the first out.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;animator.makeScale(2.0).bounce.spring.animate(1.0);&#xA;// The same as animator.makeScale(2.0).spring.animate(1.0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A full list of animation effect properties can be found &lt;a href=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/#animation-effects-1&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Anchoring&lt;/h3&gt; &#xA;&lt;p&gt;To anchor your view call an achoring method at some point in an animation chain. Like effects, calling one after another in the same chain will cancel the first out.&lt;/p&gt; &#xA;&lt;p&gt;Below is an example of rotating a view around different anchor points.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;animator.rotateZ(180).anchorTopLeft.thenAfter(1.0).rotateZ(90).anchorCenter.animate(1.0);&#xA;// animator.rotateZ(90).anchorTopLeft.anchorCenter == animator.rotateZ(90).anchorCenter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/UsageDemo/AnchoringDemo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A full list of anchor properties can be found &lt;a href=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/#anchoring-1&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Delays&lt;/h3&gt; &#xA;&lt;p&gt;To delay an animation call the &lt;code&gt;wait(t)&lt;/code&gt; or &lt;code&gt;delay(t)&lt;/code&gt; chainable property.&lt;/p&gt; &#xA;&lt;p&gt;Below is an example of moving a view after a delay of 0.5 seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;animator.moveXY(100, 50).wait(0.5).animate(1.0);&#xA;// The same as animator.moveXY(100, 50).delay(0.5).animate(1.0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Completion&lt;/h3&gt; &#xA;&lt;p&gt;To run code after an animation finishes call the &lt;code&gt;animateWithCompletion(t, completion)*&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;animator.makeX(0).animateWithCompletion(1.0, ^{&#xA;&#x9;NSLog(@&#34;Animation Done&#34;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Repeating Animations&lt;/h3&gt; &#xA;&lt;p&gt;You can repeat an animation by replacing the &lt;code&gt;thenAfter(time)&lt;/code&gt; method with the &lt;code&gt;repeat(time, count)&lt;/code&gt; method. This will repeat the previously defined animations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;animator.increWidth(30).spring.repeat(0.5, 3).moveXY(100, 50).animate(1.0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/UsageDemo/RepeatingAnimationsDemo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can repeat the last part of an animation by calling &lt;code&gt;animateWithRepeat(time, count)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;animator.increWidth(30).spring.animateWithRepeat(0.5, 3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/UsageDemo/RepeatingAnimationsDemo_01.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Callbacks&lt;/h3&gt; &#xA;&lt;p&gt;You can hook into the different steps of the animation process by calling the &lt;code&gt;preAnimationBlock(block)&lt;/code&gt; and &lt;code&gt;postAnimationBlock(block)&lt;/code&gt; methods. All take a simple block &lt;code&gt;void(^block)(void)&lt;/code&gt; as an argument. Order of calling these in the animation chain does not matter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;animator.moveX(10).preAnimationBlock(^{&#xA;    NSLog(@&#34;before the first animation&#34;);&#xA;}).thenAfter(1.0).postAnimationBlock(^{&#xA;    NSLog(@&#34;After the second animation&#34;);&#xA;}).moveY(10).animate(1.0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bezier Paths&lt;/h3&gt; &#xA;&lt;p&gt;You can also animate a view along a &lt;a href=&#34;https://developer.apple.com/library/content/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html&#34;&gt;UIBezierPath&lt;/a&gt;. Create a &lt;code&gt;UIBezierPath *&lt;/code&gt; instance, then add points or curves or lines to it and use it in a chainable property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;UIBezierPath *path = [UIBezierPath bezierPath];&#xA;[path moveToPoint:self.myView.center];&#xA;[path addLineToPoint:CGPointMake(25, 400)];&#xA;[path addLineToPoint:CGPointMake(300, 500)];&#xA;animator.moveOnPath(path).animate(1.0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/UsageDemo/BezierPathsDemo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using with Auto Layout&lt;/h2&gt; &#xA;&lt;h3&gt;Transforms&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;strong&gt;transform&lt;/strong&gt; chainable properties. These are better for views constrained with Autolayout. You should not mix these with other chainable properties.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;animatorForViewWithConstraints.transformX(50).transformScale(2).animate(1.0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using with Swift&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;LSAnimator&lt;/code&gt; with &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;Swift&lt;/a&gt; is now a little more readable in version 2.x. I created a separate framework for swift that provides a class called &lt;code&gt;CoreAnimator&lt;/code&gt;. This is a thin wrapper over &lt;code&gt;LSAnimator&lt;/code&gt; that has a slightly more readable syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let animator = CoreAnimator(view: myView)&#xA;animator.move(x: 60).thenAfter(t: 1.0).rotate(angle: 360).bounce.animate(t: 1.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/UsageDemo/SwiftDemo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Chainable Properties&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;#pragma mark - Animations&#xA;// Makes&#xA;// Affects views position and bounds&#xA;@property (nonatomic, copy, readonly) LSAnimatorRect makeFrame;&#xA;@property (nonatomic, copy, readonly) LSAnimatorRect makeBounds;&#xA;@property (nonatomic, copy, readonly) LSAnimatorSize makeSize;&#xA;@property (nonatomic, copy, readonly) LSAnimatorPoint makeOrigin;&#xA;@property (nonatomic, copy, readonly) LSAnimatorPoint makePosition;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat makeX;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat makeY;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat makeWidth;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat makeHeight;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat makeOpacity;&#xA;@property (nonatomic, copy, readonly) LSAnimatorColor makeBackground;&#xA;@property (nonatomic, copy, readonly) LSAnimatorColor makeBorderColor;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat makeBorderWidth;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat makeCornerRadius;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat makeScale;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat makeScaleX;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat makeScaleY;&#xA;@property (nonatomic, copy, readonly) LSAnimatorPoint makeAnchor;&#xA;&#xA;// Moves&#xA;// Affects views position and bounds&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat moveX;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat moveY;&#xA;@property (nonatomic, copy, readonly) LSAnimatorPoint moveXY;&#xA;@property (nonatomic, copy, readonly) LSAnimatorPolarCoordinate movePolar;&#xA;&#xA;// Increments&#xA;// Affects views position and bounds&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat increWidth;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat increHeight;&#xA;@property (nonatomic, copy, readonly) LSAnimatorSize increSize;&#xA;&#xA;// Transforms&#xA;// Affects views transform property NOT position and bounds&#xA;// These should be used for AutoLayout&#xA;// These should NOT be mixed with properties that affect position and bounds&#xA;- (LSAnimator *)transformIdentity;&#xA;@property (nonatomic, copy, readonly) LSAnimatorDegrees rotate; // Same as rotateZ&#xA;@property (nonatomic, copy, readonly) LSAnimatorDegrees rotateX;&#xA;@property (nonatomic, copy, readonly) LSAnimatorDegrees rotateY;&#xA;@property (nonatomic, copy, readonly) LSAnimatorDegrees rotateZ;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat transformX;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat transformY;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat transformZ;&#xA;@property (nonatomic, copy, readonly) LSAnimatorPoint transformXY;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat transformScale; // x and y equal&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat transformScaleX;&#xA;@property (nonatomic, copy, readonly) LSAnimatorFloat transformScaleY;&#xA;&#xA;&#xA;#pragma mark - Bezier Paths&#xA;// Animation effects dont apply&#xA;@property (nonatomic, copy, readonly) LSAnimatorBezierPath moveOnPath;&#xA;@property (nonatomic, copy, readonly) LSAnimatorBezierPath moveAndRotateOnPath;&#xA;@property (nonatomic, copy, readonly) LSAnimatorBezierPath moveAndReverseRotateOnPath;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Animation Effects&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;- (LSAnimator *)easeIn;&#xA;- (LSAnimator *)easeOut;&#xA;- (LSAnimator *)easeInOut;&#xA;- (LSAnimator *)easeBack;&#xA;- (LSAnimator *)spring;&#xA;- (LSAnimator *)bounce;&#xA;- (LSAnimator *)easeInQuad;&#xA;- (LSAnimator *)easeOutQuad;&#xA;- (LSAnimator *)easeInOutQuad;&#xA;- (LSAnimator *)easeInCubic;&#xA;- (LSAnimator *)easeOutCubic;&#xA;- (LSAnimator *)easeInOutCubic;&#xA;- (LSAnimator *)easeInQuart;&#xA;- (LSAnimator *)easeOutQuart;&#xA;- (LSAnimator *)easeInOutQuart;&#xA;- (LSAnimator *)easeInQuint;&#xA;- (LSAnimator *)easeOutQuint;&#xA;- (LSAnimator *)easeInOutQuint;&#xA;- (LSAnimator *)easeInSine;&#xA;- (LSAnimator *)easeOutSine;&#xA;- (LSAnimator *)easeInOutSine;&#xA;- (LSAnimator *)easeInExpo;&#xA;- (LSAnimator *)easeOutExpo;&#xA;- (LSAnimator *)easeInOutExpo;&#xA;- (LSAnimator *)easeInCirc;&#xA;- (LSAnimator *)easeOutCirc;&#xA;- (LSAnimator *)easeInOutCirc;&#xA;- (LSAnimator *)easeInElastic;&#xA;- (LSAnimator *)easeOutElastic;&#xA;- (LSAnimator *)easeInOutElastic;&#xA;- (LSAnimator *)easeInBack;&#xA;- (LSAnimator *)easeOutBack;&#xA;- (LSAnimator *)easeInOutBack;&#xA;- (LSAnimator *)easeInBounce;&#xA;- (LSAnimator *)easeOutBounce;&#xA;- (LSAnimator *)easeInOutBounce;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/AnimationCurves.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A quick look at these funcs can be found &lt;a href=&#34;http://easings.net/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;These animation functions were taken from a cool keyframe animation library that can be found &lt;a href=&#34;https://github.com/NachoSoto/NSBKeyframeAnimation&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;They are based off of JQuery easing functions that can be found &lt;a href=&#34;http://gsgd.co.uk/sandbox/jquery/easing/jquery.easing.1.3.js&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Anchoring&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;- (LSAnimator *)anchorDefault;&#xA;- (LSAnimator *)anchorCenter;&#xA;- (LSAnimator *)anchorTop;&#xA;- (LSAnimator *)anchorBottom;&#xA;- (LSAnimator *)anchorLeft;&#xA;- (LSAnimator *)anchorRight;&#xA;- (LSAnimator *)anchorTopLeft;&#xA;- (LSAnimator *)anchorTopRight;&#xA;- (LSAnimator *)anchorBottomLeft;&#xA;- (LSAnimator *)anchorBottomRight;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Multi-chain Animations&lt;/h2&gt; &#xA;&lt;p&gt;You can add a new animation chain by calling the &lt;code&gt;concurrency&lt;/code&gt; method. It does not affect the previous animation chains.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;animator.increWidth(20).spring.animateWithRepeat(0.5, 3);&#xA;animator.concurrent.makeBackground([UIColor orangeColor]).animate(1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/UsageDemo/MultichainAnimationsDemo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Do not change the properties of the animation chain before the new animation chain operates at the same time.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// Do not do this&#xA;animator.moveX(20).animate(1.0);&#xA;animator.concurrent.moveX(-20).animate(1.0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/Resources/UsageDemo/DoNotDoThisDemo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;To Do&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Constraint animator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;pod &#39;LSAnimator&#39;, &#39;~&amp;gt; 2.1.5&#39;&lt;/code&gt; to your Podfile.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; or &lt;code&gt;pod update&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;#import &amp;lt;LSAnimator/LSAnimator.h&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;pod &#39;CoreAnimator&#39;, &#39;~&amp;gt; 2.1.5&#39;&lt;/code&gt; to your Podfile.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; or &lt;code&gt;pod update&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;import CoreAnimator&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;github &#34;Lision/LSAnimator&#34; ~&amp;gt; 2.1.5&lt;/code&gt; to your Cartfile.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update --platform ios&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;LSAnimator&lt;/code&gt; framework to your project.&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;CoreAnimator&lt;/code&gt; framework to your project.&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;Either clone the repo and manually add the Files in &lt;a href=&#34;https://github.com/Lision/LSAnimator/tree/master/LSAnimator&#34;&gt;LSAnimator&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LSAnimator requires &lt;code&gt;iOS 7.0+&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;CoreAnimator requires &lt;code&gt;iOS 9.0+&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;mailto:lisionmail@gmail.com&#34;&gt;lisionmail@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sina: &lt;a href=&#34;https://weibo.com/5071795354/profile&#34;&gt;@Lision&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/LisionChat&#34;&gt;@Lision&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lision/LSAnimator/master/LICENSE&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/5e085da09b057cc65da38f334ab63f0c2705f46a/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f662f66382f4c6963656e73655f69636f6e2d6d69742d38387833312d322e7376672f31323870782d4c6963656e73655f69636f6e2d6d69742d38387833312d322e7376672e706e67&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;LSAnimator is provided under the MIT license. See LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Azure/azure-notificationhubs-ios</title>
    <updated>2024-10-28T01:38:08Z</updated>
    <id>tag:github.com,2024-10-28:/Azure/azure-notificationhubs-ios</id>
    <link href="https://github.com/Azure/azure-notificationhubs-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Azure Notification Hubs SDK for Apple&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Azure/azure-notificationhubs-ios/actions?query=workflow%3Aframework-docs&#34;&gt;&lt;img src=&#34;https://github.com/Azure/azure-notificationhubs-ios/workflows/framework-docs/badge.svg?sanitize=true&#34; alt=&#34;framework-docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Azure/azure-notificationhubs-ios/actions?query=workflow%3Aanalyze-test&#34;&gt;&lt;img src=&#34;https://github.com/Azure/azure-notificationhubs-ios/workflows/analyze-test/badge.svg?sanitize=true&#34; alt=&#34;analyze-test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Microsoft Azure Notification Hubs SDK for Apple&lt;/h1&gt; &#xA;&lt;p&gt;Microsoft Azure Notification Hubs provide a multiplatform, scaled-out push infrastructure that enables you to send mobile push notifications from any backend (in the cloud or on-premises) to any mobile platform. To learn more, visit our &lt;a href=&#34;https://azure.microsoft.com/en-us/documentation/services/notification-hubs&#34;&gt;Developer Center&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Azure Notification Hubs SDK for Apple provides capabilities for registering your device and receive push notifications on macOS and iOS including platforms including tvOS, watchOS and Mac Catalyst.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The Azure Notification Hubs can be added to your app via Cocoapods, Carthage, Swift Package Manager, or by manually adding the binaries to your project. We have a number of sample applications available written in both Swift and Objective-C to help you get started for both iOS with Mac Catalyst support, and a macOS sample, and SwiftUI coming soon.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This introduces a new API as of version 3.0, and the usage of &lt;code&gt;SBNotificationHub&lt;/code&gt; with registrations is still supported, but discouraged as we have the new &lt;code&gt;MSNotificationHub&lt;/code&gt; which uses the Installation API and modern Apple APIs.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;NH Sample App for iOS/Mac Catalyst (&lt;a href=&#34;https://raw.githubusercontent.com/Azure/azure-notificationhubs-ios/main/SampleNHAppSwift&#34;&gt;Swift&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Azure/azure-notificationhubs-ios/main/SampleNHAppObjC&#34;&gt;Objective-C&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;NH Sample App for macOS (&lt;a href=&#34;https://raw.githubusercontent.com/Azure/azure-notificationhubs-ios/main/SampleNHAppMacSwift&#34;&gt;Swift&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Azure/azure-notificationhubs-ios/main/SampleNHAppMacObjC&#34;&gt;Objective-C&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;NH Sample App for SwiftUI (&lt;a href=&#34;https://raw.githubusercontent.com/Azure/azure-notificationhubs-ios/main/SampleNHAppSwiftUI&#34;&gt;iOS&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Azure/azure-notificationhubs-ios/main/SampleNHAppMacSwiftUI&#34;&gt;macOS&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;NH Sample Legacy App using Legacy APIs (&lt;a href=&#34;https://raw.githubusercontent.com/Azure/azure-notificationhubs-ios/main/SampleNHAppLegacySwift&#34;&gt;Swift&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Azure/azure-notificationhubs-ios/main/SampleNHAppLegacyObjC&#34;&gt;Objective-C&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Integration with Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;Add the following into your &lt;code&gt;podfile&lt;/code&gt; to pull in the Azure Notification Hubs SDK:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;AzureNotificationHubs-iOS&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;pod install&lt;/code&gt; to install the pod and then open your project workspace in Xcode.&lt;/p&gt; &#xA;&lt;h3&gt;Integration with Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Below are the steps on how to integrate the Azure Notification Huds SDK in your Xcode project using Carthage version 0.30 or higher. Add the following to your &lt;code&gt;Cartfile&lt;/code&gt; to include GitHub repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gets the latest release&#xA;github &#34;Azure/azure-notificationhubs-ios&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify a specific version of the Azure Notification Hubs SDK such as 3.1.4.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Get version in the format of X.X.X such as 3.1.4&#xA;github &#34;Azure/azure-notificationhubs-ios&#34; ~&amp;gt; 3.1.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have this, run &lt;code&gt;carthage update&lt;/code&gt;. This will fetch the SDK and put it into the &lt;code&gt;Carthage/Checkouts&lt;/code&gt; folder. Open Xcode and drag the &lt;code&gt;WindowsAzureMessaging.framework&lt;/code&gt; from the &lt;code&gt;Carthage/Builds/iOS&lt;/code&gt; for iOS or &lt;code&gt;Carthage/Builds/macOS&lt;/code&gt; for macOS. Ensure the app target is checked during the import.&lt;/p&gt; &#xA;&lt;h3&gt;Integration via Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The Azure Notification Hubs SDK also supports the Swift Package Manager. To integrate, use the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From the Xcode menu click File &amp;gt; Swift Packages &amp;gt; Add Package Dependency.&lt;/li&gt; &#xA; &lt;li&gt;In the dialog, enter the repository URL: &lt;code&gt;http://github.com/Azure/azure-notificationhubs-ios.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the Version, select Up to Next Major and take the default option.&lt;/li&gt; &#xA; &lt;li&gt;Choose WindowsAzureMessaging in the Package Product column.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Integration via copying binaries&lt;/h3&gt; &#xA;&lt;p&gt;The Azure Notification Hubs SDK can also be added manually by downloading the release from GitHub on the &lt;a href=&#34;https://github.com/Azure/azure-notificationhubs-ios/releases&#34;&gt;Azure Notification Hubs SDK Releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The SDK supports the use of XCframework. If you want to integrate XCframeworks into your project, download the WindowsAzureMessaging-SDK-Apple-XCFramework.zip from the releases page and unzip it. Resulting folder contents are not platform-specific, instead it contains the XCframework.&lt;/p&gt; &#xA;&lt;p&gt;Unzip the file and you will see a folder called WindowsAzureMessaging-SDK-Apple that contains the framework files each platform folder. Copy the framework to a desired location and then add to Xcode. Ensure the app target is checked during the import.&lt;/p&gt; &#xA;&lt;h3&gt;Initializing the SDK&lt;/h3&gt; &#xA;&lt;p&gt;To get started with the SDK, you need to configure your Azure Notification Hub with your Apple credentials. To integrate the SDK, you will need the name of the hub as well as a connection string from your Access Policies. Note that you only need the &#34;Listen&#34; permission to intercept push notifications.&lt;/p&gt; &#xA;&lt;p&gt;You can then import the headers for Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import WindowsAzureMessaging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And Objective-C as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;WindowsAzureMessaging/WindowsAzureMessaging.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then we can initialize the SDK with our hub name and connection string. This will automatically register the device using the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/notification-hubs/notification-hubs-push-notification-registration-management#installations&#34;&gt;Installation API&lt;/a&gt; with your device token.&lt;/p&gt; &#xA;&lt;p&gt;Using Swift, we can use the &lt;code&gt;start&lt;/code&gt; method, which then starts the installation and device registration process for push notifications.&lt;/p&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let connectionString = &#34;&amp;lt;connection-string&amp;gt;&#34;&#xA;let hubName = &#34;&amp;lt;hub-name&amp;gt;&#34;&#xA;&#xA;MSNotificationHub.start(connectionString: connectionString!, hubName: hubName!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With Objective-C, it is largely the same with calling the &lt;code&gt;startWithConnectionString&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString *connectionString = @&#34;&amp;lt;connection-string&amp;gt;&#34;;&#xA;NSString *hubName = @&#34;&amp;lt;hub-name&amp;gt;&#34;;&#xA;&#xA;[MSNotificationHub startWithConnectionString:connectionString hubName:hubName];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the SDK will initialize with the &lt;code&gt;UNAuthorizationOptions&lt;/code&gt; for alert, badge and sound, however, if you wish to change that, you can use the &lt;code&gt;startWithConnectionString:hubName:options&lt;/code&gt; method specifying which options you wish to use.&lt;/p&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create with alert, badge and sound&#xA;let hubOptions = MSNotificationHubOptions(withOptions: [.alert, .badge, .sound])&#xA;&#xA;// Start SDK&#xA;MSNotificationHub.start(connectionString: connectionString!, hubName: hubName!, options: hubOptions!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Create with alert, badge and sound&#xA;MSNotificationHubOptions *hubOptions = [[MSNotificationHubOptions alloc] initWithAuthorizationOptions:(UNAuthorizationOptions)(UNAuthorizationOptionAlert | UNAuthorizationOptionSound | UNAuthorizationOptionBadge)];&#xA;&#xA;// Start SDK&#xA;[MSNotificationHub startWithConnectionString:connectionString hubName:hubName options:hubOptions];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Intercepting Push Notifications&lt;/h3&gt; &#xA;&lt;p&gt;You can set up a delegate to be notified whenever a push notification is received in foreground or a background push notification has been tapped by the user. To get started with intercepting push notifications, implement the &lt;code&gt;MSNotificationHubDelegate&lt;/code&gt;, and use the &lt;code&gt;MSNotificationHub.setDelegate&lt;/code&gt; method to set the delegate implementation.&lt;/p&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class SetupViewController: MSNotificationHubDelegate // And other imports&#xA;&#xA;// Set up the delegate&#xA;MSNotificationHub.setDelegate(self)&#xA;&#xA;// Implement the method&#xA;func notificationHub(_ notificationHub: MSNotificationHub!, didReceivePushNotification notification: MSNotificationHubMessage!) {&#xA;&#xA;    let title = notification.title ?? &#34;&#34;&#xA;    let body = notification.body ?? &#34;&#34;&#xA;&#xA;    if (UIApplication.shared.applicationState == .background) {&#xA;        NSLog(&#34;Notification received in background: title:\&#34;\(title)\&#34; body:\&#34;\(body)\&#34;&#34;)&#xA;    } else {&#xA;        let alertController = UIAlertController(title: title, message: body, preferredStyle: .alert)&#xA;        alertController.addAction(UIAlertAction(title: &#34;OK&#34;, style: .cancel))&#xA;&#xA;        self.present(alertController, animated: true)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface SetupViewController &amp;lt;MSNotificationHubDelegate /* Other protocols */&amp;gt;&#xA;&#xA;// Set up the delegate&#xA;[MSNotificationHub setDelegate:self];&#xA;&#xA;// Implement the method&#xA;- (void)notificationHub:(MSNotificationHub *)notificationHub didReceivePushNotification:(MSNotificationHubMessage *)notification {&#xA;    NSString *title = notification.title ?: @&#34;&#34;;&#xA;    NSString *body = notification.body ?: @&#34;&#34;;&#xA;&#xA;    if ([[UIApplication sharedApplication] applicationState] == UIApplicationStateBackground) {&#xA;        NSLog(@&#34;Notification received in the background: title: %@ body: %@&#34;, title, body);&#xA;    } else {&#xA;        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:notification.title&#xA;                        message:notification.body&#xA;                 preferredStyle:UIAlertControllerStyleAlert];&#xA;        [alertController addAction:[UIAlertAction actionWithTitle:@&#34;OK&#34; style:UIAlertActionStyleCancel handler:nil]];&#xA;&#xA;        [self presentViewController:alertController animated:YES completion:nil];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tag Management&lt;/h3&gt; &#xA;&lt;p&gt;One of the ways to target a device or set of devices is through the use of &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/notification-hubs/notification-hubs-tags-segment-push-message#tags&#34;&gt;tags&lt;/a&gt;, where you can target a specific tag, or a tag expression. The Azure Notification Hub SDK for Apple handles this through top level methods that allow you to add, clear, remove and get all tags for the current installation. In this example, we can add some recommended tags such as the app language preference, and device country code.&lt;/p&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Get language and country code for common tag values&#xA;let language = Bundle.main.preferredLocalizations.first!&#xA;let countryCode = NSLocale.current.regionCode!&#xA;&#xA;// Create tags with type_value format&#xA;let languageTag = &#34;language_&#34; + language&#xA;let countryCodeTag = &#34;country_&#34; + countryCode&#xA;&#xA;MSNotificationHub.addTags([languageTag, countryCodeTag])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Get language and country code for common tag values&#xA;NSString *language = [[[NSBundle mainBundle] preferredLocalizations] objectAtIndex:0];&#xA;NSString *countryCode = [[NSLocale currentLocale] countryCode];&#xA;&#xA;// Create tags with type_value format&#xA;NSString *languageTag = [NSString stringWithFormat:@&#34;language_%@&#34;, language];&#xA;NSString *countryCodeTag = [NSString stringWithFormat:@&#34;country_%@&#34;, countryCode];&#xA;&#xA;[MSNotificationHub addTags:@[languageTag, countryCodeTag]];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Template Management&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/notification-hubs/notification-hubs-templates-cross-platform-push-messages&#34;&gt;Azure Notification Hub Templates&lt;/a&gt;, you can enable a client application to specify the exact format of the notifications it wants to receive. This is useful when you want to create a more personalized notification, with string replacement to fill the values. The Installation API &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/notification-hubs/notification-hubs-push-notification-registration-management#templates&#34;&gt;allows multiple templates&lt;/a&gt; for each installation which gives you greater power to target your users with rich messages.&lt;/p&gt; &#xA;&lt;p&gt;For example, we can create a template with a body, some headers, and some tags.&lt;/p&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Get language and country code for common tag values&#xA;let language = Bundle.main.preferredLocalizations.first!&#xA;let countryCode = NSLocale.current.regionCode!&#xA;&#xA;// Create tags with type_value format&#xA;let languageTag = &#34;language_&#34; + language&#xA;let countryCodeTag = &#34;country_&#34; + countryCode&#xA;&#xA;let body = &#34;{\&#34;aps\&#34;: {\&#34;alert\&#34;: \&#34;$(message)\&#34;}}&#34;&#xA;let template = MSInstallationTemplate()&#xA;template.body = body&#xA;template.addTags([languageTag, countryCodeTag])&#xA;&#xA;MSNotificationHub.setTemplate(template, forKey: &#34;template1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString *language = [[[NSBundle mainBundle] preferredLocalizations] objectAtIndex:0];&#xA;NSString *countryCode = [[NSLocale currentLocale] countryCode];&#xA;&#xA;// Create tags with type_value format&#xA;NSString *languageTag = [NSString stringWithFormat:@&#34;language_%@&#34;, language];&#xA;NSString *countryCodeTag = [NSString stringWithFormat:@&#34;country_%@&#34;, countryCode];&#xA;&#xA;NSString *body = @&#34;{\&#34;aps\&#34;: {\&#34;alert\&#34;: \&#34;$(message)\&#34;}}&#34;;&#xA;&#xA;MSInstallationTemplate *template = [MSInstallationTemplate new];&#xA;template.body = body;&#xA;&#xA;[template addTags:@[languageTag, countryCodeTag]];&#xA;&#xA;[MSNotificationHub setTemplate:template forKey:@&#34;template1&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Push to User Management&lt;/h3&gt; &#xA;&lt;p&gt;The SDK supports the ability to associate a user with an installation. This allows you to be able to target all devices associated with a particular User ID. The user&#39;s identity set through the SDK can be whatever the developer wants it to be: the user&#39;s name, email address, phone number, or some other unique identifier. This is supported through the &lt;code&gt;MSNotificationHub&lt;/code&gt; and the &lt;code&gt;setUserId&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let userId = &#34;iosUser123&#34;&#xA;MSNotificationHub.setUserId(userId);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString *userId = @&#34;iosUser123&#34;;&#xA;[MSNotificationHub setUserId:userId];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To target a particular user on the backend, you can specify a tag such as &lt;code&gt;$UserId:{VALUE}&lt;/code&gt; where VALUE is the user name you have specified, just as you can target an installation using the &lt;code&gt;$InstallationId:{VALUE}&lt;/code&gt; tag.&lt;/p&gt; &#xA;&lt;h3&gt;Intercepting Installation Management&lt;/h3&gt; &#xA;&lt;p&gt;The SDK will handle saving the installation for you, however, we provide hooks where you can intercept both the successful installation or any failure through the &lt;code&gt;MSInstallationLifecycleDelegate&lt;/code&gt;. This has two methods, &lt;code&gt;didSaveInstallation&lt;/code&gt; for successful saves, and &lt;code&gt;didFailToSaveInstallation&lt;/code&gt; for any failures. We can implement this to have our own logging for example.&lt;/p&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Set the delegate&#xA;MSNotificationHub.setLifecycleDelegate(self)&#xA;&#xA;// Handle success&#xA;func notificationHub(_ notificationHub: MSNotificationHub!, didSave installation: MSInstallation!) {&#xA;    let installationId = installation.installationId;&#xA;    NSLog(&#34;Successful save with Installation ID: \&#34;\(installationId)\&#34;&#34;)&#xA;}&#xA;&#xA;// Handle failure&#xA;func notificationHub(_ notificationHub: MSNotificationHub!, didFailToSave installation: MSInstallation!, withError error: Error!) {&#xA;    NSLog(&#34;Failed to save installation&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Set the delegate&#xA;[MSNotificationHub setLifecycleDelegate:self];&#xA;&#xA;// Handle successes&#xA;- (void)notificationHub:(MSNotificationHub *)notificationHub didSaveInstallation:(MSInstallation *)installation {&#xA;    NSLog(@&#34;Successful save with Installation ID: %@&#34;, installation.installationId);&#xA;}&#xA;&#xA;// Handle failure&#xA;- (void)notificationHub:(MSNotificationHub *)notificationHub&#xA;    didFailToSaveInstallation:(MSInstallation *)installation&#xA;                    withError:(NSError *)error {&#xA;    NSLog(@&#34;Failed to save installation with error %@&#34;, [error localizedDescription]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enriching Installations&lt;/h3&gt; &#xA;&lt;p&gt;The SDK will update the installation on the device any time you change its properties such as adding a tag or adding an installation template. Before the installation is sent to the backend, you can intercept this installation to modify anything before it goes to the backend, for example, if you wish to add or modify tags. This is implemented in the &lt;code&gt;MSInstallationEnrichmentDelegate&lt;/code&gt; protocol with a single method of &lt;code&gt;willEnrichInstallation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Set the delegate&#xA;MSNotificationHub.setEnrichmentDelegate(self)&#xA;&#xA;// Handle the enrichment&#xA;func notificationHub(_ notificationHub: MSNotificationHub!, willEnrichInstallation installation: MSInstallation!) {&#xA;    installation.addTag(&#34;customTag&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Set the delegate&#xA;[MSNotificationHub setEnrichmentDelegate:self];&#xA;&#xA;// Handle the enrichment&#xA;- (void)notificationHub:(MSNotificationHub *)notificationHub willEnrichInstallation:(MSInstallation *)installation {&#xA;    // Add another tag&#xA;    [installation addTag:@&#34;customTag&#34;];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Saving Installations to a Custom Backend&lt;/h3&gt; &#xA;&lt;p&gt;The Azure Notification Hubs SDK will save the installation to our backend by default. If, however, you wish to skip our backend and store it on your backend, we support that through the &lt;code&gt;MSInstallationManagementDelegate&lt;/code&gt; protocol. This has a method to save the installation &lt;code&gt;willUpsertInstallation&lt;/code&gt;, passing in the installation, and then a completion handler is called with either an error if unsuccessful, or nil if successful. To set the delegate, instead of specifying the connection string and hub name, you specify the installation manager with &lt;code&gt;startWithInstallationManagement&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Set the delegate&#xA;MSNotificationHub.startWithInstallationManagement(self)&#xA;&#xA;func notificationHub(_ notificationHub: MSNotificationHub!, willUpsertInstallation installation: MSInstallation!, withCompletionHandler completionHandler: @escaping (NSError?) -&amp;gt; Void) {&#xA;    // Save to your own backend&#xA;    // Call the completion handler with no error if successful&#xA;    completionHandler(nil);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Set the delegate&#xA;[MSNotificationHub startWithInstallationManagement:self];&#xA;&#xA;// Save to your own backend&#xA;- (void)notificationHub:(MSNotificationHub *)notificationHub&#xA;    willUpsertInstallation:(MSInstallation *)installation&#xA;         completionHandler:(void (^)(NSError *_Nullable))completionHandler {&#xA;    // Save to your own backend&#xA;    // Call the completion handler with no error if successful&#xA;    completionHandler(nil);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disabling Automatic Swizzling&lt;/h3&gt; &#xA;&lt;p&gt;By default, the SDK will swizzle methods to automatically intercept calls to &lt;code&gt;UIApplicationDelegate&lt;/code&gt;/&lt;code&gt;NSApplicationDelegate&lt;/code&gt; for calls to registering and intercepting push notifications, as well as &lt;code&gt;UNUserNotificationCenterDelegate&lt;/code&gt; methods. Note this is only available for iOS, watchOS, and Mac Catalyst. This is not supported on macOS and tvOS.&lt;/p&gt; &#xA;&lt;h4&gt;Disabling UIApplicationDelegate/NSApplicationDelegate&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the project&#39;s Info.plist&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;NHAppDelegateForwarderEnabled&lt;/code&gt; key and set the value to 0. This disables the UIApplicationDelegate/NSApplicationDelegate auto-forwarding to MSNotificaitonHub.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement the &lt;code&gt;MSApplicationDelegate&lt;/code&gt;/&lt;code&gt;NSApplicationDelegate&lt;/code&gt; methods for push notifications.&lt;/p&gt; &lt;p&gt;Implement the application:didRegisterForRemoteNotificationsWithDeviceToken: callback and the application:didFailToRegisterForRemoteNotificationsWithError: callback in your AppDelegate to register for Push notifications. In the code below, if on macOS, not Mac Catalyst, replace &lt;code&gt;UIApplication&lt;/code&gt; with &lt;code&gt;NSApplication&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Swift:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {&#xA;&#xA;    // Pass the device token to MSNotificationHub&#xA;    MSNotificationHub.didRegisterForRemoteNotifications(withDeviceToken: deviceToken)&#xA;}&#xA;&#xA;func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {&#xA;&#xA;    // Pass the error to MSNotificationHub&#xA;    MSNotificationHub.didFailToRegisterForRemoteNotificationsWithError(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Objective-C:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {&#xA;    // Pass the device token to MSNotificationHub&#xA;    [MSNotificationHub didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];&#xA;}&#xA;&#xA;- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {&#xA;    // Pass the error to MSNotificationHub&#xA;    [MSNotificationHub didFailToRegisterForRemoteNotificationsWithError:error];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement the callback to receive push notifications&lt;/p&gt; &lt;p&gt;Implement the application:didReceiveRemoteNotification:fetchCompletionHandler callback to forward push notifications to MSNotificationHub In the code below, if on macOS, not Mac Catalyst, replace &lt;code&gt;UIApplication&lt;/code&gt; with &lt;code&gt;NSApplication&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Swift:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -&amp;gt; Void) {&#xA;&#xA;    // Forward to MSNotificationHub&#xA;    MSNotificationHub.didReceiveRemoteNotification(userInfo)&#xA;&#xA;    // Complete handling the notification&#xA;    completionHandler(.noData)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Objective-C:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)application:(UIApplication *)application&#xA;    didReceiveRemoteNotification:(NSDictionary *)userInfo&#xA;          fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {&#xA;&#xA;    // Forward to MSNotificationHub&#xA;    [MSNotificationHub didReceiveRemoteNotification:userInfo];&#xA;&#xA;    // Complete handling the notification&#xA;    completionHandler(UIBackgroundFetchResultNoData);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Disabling UNUserNotificationCenterDelegate&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the project&#39;s Info.plist&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;NHUserNotificationCenterDelegateForwarderEnabled&lt;/code&gt; key and set the value to 0. This disables the UNUserNotificationCenterDelegate auto-forwarding to MSNotificaitonHub.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement UNUserNotificationCenterDelegate callbacks and pass the notification&#39;s payload to &lt;code&gt;MSNotificationHub&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Swift:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@available(iOS 10.0, *)&#xA;func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -&amp;gt; Void) {&#xA;&#xA;    //...&#xA;&#xA;    // Pass the notification payload to MSNotificationHub&#xA;    MSNotificationHub.didReceiveRemoteNotification(notification.request.content.userInfo)&#xA;&#xA;    // Complete handling the notification&#xA;    completionHandler([])&#xA;}&#xA;&#xA;@available(iOS 10.0, *)&#xA;func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -&amp;gt; Void) {&#xA;&#xA;    //...&#xA;&#xA;    // Pass the notification payload to MSNotificationHub&#xA;    MSNotificationHub.didReceiveRemoteNotification(response.notification.request.content.userInfo)&#xA;&#xA;    // Complete handling the notification&#xA;    completionHandler()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Objective-C:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)userNotificationCenter:(UNUserNotificationCenter *)center&#xA;      willPresentNotification:(UNNotification *)notification&#xA;        withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler&#xA;        API_AVAILABLE(ios(10.0), tvos(10.0), watchos(3.0)) {&#xA;&#xA;    //...&#xA;&#xA;    // Pass the notification payload to MSNotificationHub&#xA;    [MSNotificationHub didReceiveRemoteNotification:notification.request.content.userInfo];&#xA;&#xA;    // Complete handling the notification&#xA;    completionHandler(UNNotificationPresentationOptionNone);&#xA;}&#xA;&#xA;- (void)userNotificationCenter:(UNUserNotificationCenter *)center&#xA;   didReceiveNotificationResponse:(UNNotificationResponse *)response&#xA;            withCompletionHandler:(void (^)(void))completionHandler API_AVAILABLE(ios(10.0), tvos(10.0), watchos(3.0)) {&#xA;&#xA;    //...&#xA;    [MSNotificationHub didReceiveRemoteNotification:response.notification.request.content.userInfo];&#xA;&#xA;    // Complete handling the notification&#xA;    completionHandler();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Useful Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tutorials and product overview are available at &lt;a href=&#34;https://azure.microsoft.com/en-us/documentation/services/notification-hubs&#34;&gt;Microsoft Azure Notification Hubs Developer Center&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Our product team actively monitors the &lt;a href=&#34;http://social.msdn.microsoft.com/Forums/en-US/notificationhubs/&#34;&gt;Notification Hubs Developer Forum&lt;/a&gt; to assist you with any troubles.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;All Objective-C files follow LLVM coding style (with a few exceptions) and are formatted accordingly. To format your changes, make sure you have the clang-format tool. It can be installed with Homebrew using the command &lt;code&gt;brew install clang-format&lt;/code&gt;. Once you have installed clang-format, run &lt;code&gt;./clang-format-changed-files.sh&lt;/code&gt; from the repository root - this will format all files that have changes against the remote &lt;code&gt;main&lt;/code&gt; branch (it will also perform a git fetch).&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
</feed>