<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-02T01:34:41Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jpsim/JPSVolumeButtonHandler</title>
    <updated>2024-04-02T01:34:41Z</updated>
    <id>tag:github.com,2024-04-02:/jpsim/JPSVolumeButtonHandler</id>
    <link href="https://github.com/jpsim/JPSVolumeButtonHandler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JPSVolumeButtonHandler provides an easy block interface to hardware volume buttons on iOS devices. Perfect for camera apps!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JPSVolumeButtonHandler&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;JPSVolumeButtonHandler&lt;/code&gt; provides an easy block interface to hardware volume buttons on iOS devices. Perfect for camera apps! Used in &lt;a href=&#34;https://github.com/jpsim/JPSImagePickerController&#34;&gt;&lt;code&gt;JPSImagePickerController&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run blocks whenever a hardware volume button is pressed&lt;/li&gt; &#xA; &lt;li&gt;Volume button presses don&#39;t affect system audio&lt;/li&gt; &#xA; &lt;li&gt;Hide the HUD typically displayed on volume button presses&lt;/li&gt; &#xA; &lt;li&gt;Works even when the system audio level is at its maximum or minimum, even when muted&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager (SPM)&lt;/h3&gt; &#xA;&lt;p&gt;Add: &lt;code&gt;https://github.com/jpsim/JPSVolumeButtonHandler.git&lt;/code&gt; (&lt;code&gt;master&lt;/code&gt; branch) to your &#34;Package Dependencies&#34; in XCode.&lt;/p&gt; &#xA;&lt;p&gt;Or add: &lt;code&gt;.package(url: &#34;https://github.com/jpsim/JPSVolumeButtonHandler.git&#34;, branch: &#34;master&#34;)&lt;/code&gt; to your swift package file.&lt;/p&gt; &#xA;&lt;h3&gt;From CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;pod &#39;JPSVolumeButtonHandler&#39;&lt;/code&gt; to your Podfile.&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;Drag the &lt;code&gt;JPSVolumeButtonHandler&lt;/code&gt; folder into your project and link the MediaPlayer and AVFoundation frameworks to your project.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Set your blocks to be run when the volume buttons are pressed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;self.volumeButtonHandler = [JPSVolumeButtonHandler volumeButtonHandlerWithUpBlock:^{&#xA;&#x9;// Volume Up Button Pressed&#xA;} downBlock:^{&#xA;&#x9;// Volume Down Button Pressed&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable/disable the handler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// Start&#xA;[self.volumeButtonHandler startHandler:YES]; &#xA;// Stop&#xA;[self.volumeButtonHandler stopHandler];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change audio session category (by default &lt;code&gt;AVAudioSessionCategoryPlayAndRecord&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// Set category&#xA;self.volumeButtonHandler.sessionCategory = AVAudioSessionCategoryAmbient; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the audio session category options (by default &lt;code&gt;AVAudioSessionCategoryOptionMixWithOthers&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;self.volumeButtonHandler.sessionOptions = AVAudioSessionCategoryOptionAllowBluetooth|AVAudioSessionCategoryOptionMixWithOthers;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that not all options are compatible with all category options. See &lt;code&gt;AVAudioSession&lt;/code&gt; documentation for details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is under the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>moengage/MoEngage-iOS-InApps</title>
    <updated>2024-04-02T01:34:41Z</updated>
    <id>tag:github.com,2024-04-02:/moengage/MoEngage-iOS-InApps</id>
    <link href="https://github.com/moengage/MoEngage-iOS-InApps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/moengage/MoEngage-iOS-InApps/raw/master/Images/moe_logo_blue.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;MoEngageInApps&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/MoEngageInApp&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/MoEngageInApp.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/MoEngageInApp&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/MoEngageInApp.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MoEngage provides a platform which enables companies to deliver personalized interactions to their users through push notifications, in-app campaigns, email campaigns and other re-targeting channels.&lt;/p&gt; &#xA;&lt;h2&gt;Integration&lt;/h2&gt; &#xA;&lt;h3&gt;Integration through CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;CocoaPods is a dependency manager for Objective C &amp;amp; Swift projects and makes integration easier.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don&#39;t have CocoaPods installed, you can do it by executing the following line in your terminal.&lt;/p&gt; &lt;p&gt;&lt;code&gt;sudo gem install cocoapods&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don&#39;t have a Podfile, create a plain text file named Podfile in the Xcode project directory with the following content, making sure to set the platform and version that matches your app.&lt;/p&gt; &lt;p&gt;&lt;code&gt;pod &#39;MoEngageInApp&#39;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install MoEngageInApp SDK by executing the following in the Xcode project directory.&lt;/p&gt; &lt;p&gt;&lt;code&gt;pod install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, open your project workspace and check if MoEngageInApp SDK is properly added.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Thats it!! SDK is successfully integrated in the project, and ready to use.&lt;/p&gt; &#xA;&lt;h2&gt;Developer Docs&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to our developer docs to know how to make use of our InApp feature: &lt;a href=&#34;https://developers.moengage.com/hc/en-us/articles/4404155127828-In-App-NATIV-SDK-Version-6-0-0-and-above-#integrating-inapp-0-0&#34;&gt;link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/moengage/MoEngage-iOS-InApps/raw/master/CHANGELOG.md&#34;&gt;SDK Change Log&lt;/a&gt; for information on every released version.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;For any issues you face with the SDK and for any help with the integration contact us at &lt;code&gt;support@moengage.com&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>