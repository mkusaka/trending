<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-05T01:48:20Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ridvanaltun/react-native-deepar</title>
    <updated>2022-07-05T01:48:20Z</updated>
    <id>tag:github.com,2022-07-05:/ridvanaltun/react-native-deepar</id>
    <link href="https://github.com/ridvanaltun/react-native-deepar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Snapchat-like filters, AR lenses, and real-time facial animations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-native-deepar &#xA; &lt;!-- omit in toc --&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://npmjs.com/package/react-native-deepar&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-native-deepar.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/ridvanaltun/react-native-deepar/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/ridvanaltun/react-native-deepar/tree/master.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://commitizen.github.io/cz-cli/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/commitizen-friendly-brightgreen.svg?sanitize=true&#34; alt=&#34;Commitizen friendly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ridvanaltun/react-native-deepar/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/react-native-deepar.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Snapchat-like filters, AR lenses, and real-time facial animations.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;React-Native wrapper for &lt;a href=&#34;https://www.deepar.ai/&#34;&gt;DeepAR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Table of Contents &#xA; &lt;!-- omit in toc --&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#what-is-deepar&#34;&gt;What is DeepAR?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#other-required-steps&#34;&gt;Other Required Steps&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#android&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#ios&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#requesting-permissions&#34;&gt;Requesting Permissions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#compatibility&#34;&gt;Compatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#installing-ar-models&#34;&gt;Installing AR Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#using-ar-models-over-internet&#34;&gt;Using AR Models over Internet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#api&#34;&gt;API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#props&#34;&gt;Props&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#events&#34;&gt;Events&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#methods&#34;&gt;Methods&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#general&#34;&gt;General&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#camera-control&#34;&gt;Camera Control&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#video-recording&#34;&gt;Video Recording&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#change-parameters&#34;&gt;Change Parameters&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#background-segmentation&#34;&gt;Background Segmentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#face-painting&#34;&gt;Face Painting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#example-app&#34;&gt;Example App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#limitations&#34;&gt;Limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is DeepAR?&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/docs/preview.gif&#34; alt=&#34;Preview Image&#34; width=&#34;600&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;This GIF taken from DeepAR offical site.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;DeepAR is an infrastructure where you can make AR applications in ease. DeepAR is not free, but you can create applications that can be used by up to 10 people for testing purposes for free.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check pricing from &lt;a href=&#34;https://developer.deepar.ai/pricing&#34;&gt;Pricing Page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In order to use DeepAR, you need to generate an API key. You can generate the API key from the &lt;a href=&#34;https://developer.deepar.ai/&#34;&gt;Developer Panel&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;With the &lt;a href=&#34;https://www.store.deepar.ai/&#34;&gt;Asset Store&lt;/a&gt;, you can buy ready to use AR content.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re looking for free filters, here is some: &lt;a href=&#34;https://help.deepar.ai/en/articles/3580432-free-filter-pack&#34;&gt;Free Filter Pack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;With the &lt;a href=&#34;https://www.deepar.ai/creator-studio&#34;&gt;DeepAR Studio&lt;/a&gt;, you can create, edit and fine tune your own AR content.&lt;/li&gt; &#xA; &lt;li&gt;To learn DeepAR Studio, visit &lt;a href=&#34;https://help.deepar.ai/en/&#34;&gt;DeepAR Help Center&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;DeepAR Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.deepar.ai/face-filters-lenses-masks&#34;&gt;Face Filters, Effects and Masks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.deepar.ai/beauty-and-makeup&#34;&gt;AR Beauty &amp;amp; Makeup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.deepar.ai/hair-coloring&#34;&gt;Realtime Hair Color Segmentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.deepar.ai/background-removal&#34;&gt;Background Removal and Segmentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.deepar.ai/emotion-detection&#34;&gt;Realtime Emotion Detection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can visit &lt;a href=&#34;https://www.deepar.ai/&#34;&gt;DeepAR&#39;s offical site&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; This library under development, if you found a bug, please open an issue from &lt;a href=&#34;https://github.com/ridvanaltun/react-native-deepar/issues/new&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; It only works on physical devices, not will work with simulator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install react-native-deepar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Required Steps&lt;/h3&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open your project&#39;s &lt;code&gt;AndroidManifest.xml&lt;/code&gt; and add the following lines:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-permission android:name=&#34;android.permission.CAMERA&#34; /&amp;gt;&#xA;&#xA;&amp;lt;!-- optionally, if you want to record audio: --&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.RECORD_AUDIO&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Update your &lt;code&gt;minSdkVersion&lt;/code&gt; version minimum &lt;code&gt;21&lt;/code&gt; from &lt;code&gt;android/build.gradle&lt;/code&gt; file, like below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;buildscript {&#xA;    ext {&#xA;        buildToolsVersion = &#34;31.0.0&#34;&#xA;-        minSdkVersion = 20&#xA;+        minSdkVersion = 21&#xA;        compileSdkVersion = 31&#xA;        targetSdkVersion = 31&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open your project&#39;s &lt;code&gt;Info.plist&lt;/code&gt; and add the following lines:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;NSCameraUsageDescription&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;$(PRODUCT_NAME) needs access to your Camera.&amp;lt;/string&amp;gt;&#xA;&#xA;&amp;lt;!-- optionally, if you want to record audio: --&amp;gt;&#xA;&amp;lt;key&amp;gt;NSMicrophoneUsageDescription&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;$(PRODUCT_NAME) needs access to your Microphone.&amp;lt;/string&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Open your &lt;code&gt;ios/YourProject.xcworkspace&lt;/code&gt; file in Xcode and update your iOS version to 11 minimum, like below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Setting iOS Version from Xcode&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/docs/setting-ios-version.png&#34; alt=&#34;Xcode Setting iOS Version&#34; width=&#34;800&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Follow steps in the picture.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Don&#39;t forget install Pods for iOS and rebuild your app.&lt;/p&gt; &#xA;&lt;h3&gt;Requesting Permissions&lt;/h3&gt; &#xA;&lt;p&gt;You need to ask necessary permissions for &lt;strong&gt;Android&lt;/strong&gt; before render the DeepAR component, if you not, app crash. On iOS, the required permissions are automatically asked during rendering.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example for requesting required permissions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React, {useState, useEffect} from &#39;react&#39;;&#xA;import {Platform, PermissionsAndroid} from &#39;react-native&#39;;&#xA;&#xA;const IS_IOS = Platform.OS === &#39;ios&#39;;&#xA;const IS_ANDROID = Platform.OS === &#39;android&#39;;&#xA;&#xA;const askAndroidPermissions = () =&amp;gt;&#xA;  PermissionsAndroid.requestMultiple([&#xA;    PermissionsAndroid.PERMISSIONS.CAMERA,&#xA;    PermissionsAndroid.PERMISSIONS.RECORD_AUDIO,&#xA;  ]).then((result) =&amp;gt; {&#xA;    return (&#xA;      result[&#39;android.permission.CAMERA&#39;] === &#39;granted&#39; &amp;amp;&amp;amp;&#xA;      result[&#39;android.permission.RECORD_AUDIO&#39;] === &#39;granted&#39;&#xA;    );&#xA;  });&#xA;&#xA;const App = () =&amp;gt; {&#xA;  const [permsGranted, setPermsGranted] = useState(IS_IOS);&#xA;&#xA;  useEffect(() =&amp;gt; {&#xA;    if (IS_ANDROID) {&#xA;      askAndroidPermissions().then((isGranted) =&amp;gt; {&#xA;        setPermsGranted(isGranted);&#xA;      });&#xA;    }&#xA;  }, []);&#xA;&#xA;  // ...&#xA;};&#xA;&#xA;export default App;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;DeepAR SDK&lt;/th&gt; &#xA;   &lt;th&gt;lib version&lt;/th&gt; &#xA;   &lt;th&gt;Required React Native Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.4.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;react-native-deepar&lt;/code&gt; &lt;code&gt;&amp;gt;= 0.1.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;unknown&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installing AR Models&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Put your AR models into a desired destination&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;react-native.config.js&lt;/code&gt; like below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {&#xA;  assets: [&#39;./assets/effects&#39;], // &amp;lt;-- example destination&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Add a NPM script like below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;+   &#34;asset&#34;: &#34;./node_modules/.bin/react-native-deepar-link&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run the script to link your AR models&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run asset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you remove an AR model, you can run the same command for unlinking removed asset.&lt;/p&gt; &#xA;&lt;h2&gt;Using AR Models over Internet&lt;/h2&gt; &#xA;&lt;p&gt;You don&#39;t have to install AR models in your app, you can use AR models over Internet.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/joltup/rn-fetch-blob&#34;&gt;rn-fetch-blob&lt;/a&gt; to your project&lt;/li&gt; &#xA; &lt;li&gt;You can use AR models over internet like below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import RNFetchBlob from &#39;rn-fetch-blob&#39;;&#xA;&#xA;RNFetchBlob.config({&#xA;  fileCache: true,&#xA;})&#xA;  .fetch(&#39;GET&#39;, &#39;http://betacoins.magix.net/public/deepar-filters/8bitHearts&#39;)&#xA;  .then((res) =&amp;gt; {&#xA;    deepARRef?.current?.switchEffectWithPath({&#xA;      path: res.path(),&#xA;      slot: &#39;effect&#39;,&#xA;    });&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Make registration to DeepAR and get an API key from &lt;a href=&#34;https://developer.deepar.ai/&#34;&gt;Developer Panel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import React, {useRef} from &#39;react&#39;;&#xA;import DeepAR, {IDeepARHandle} from &#39;react-native-deepar&#39;;&#xA;&#xA;const App = () =&amp;gt; {&#xA;  const deepARRef = useRef&amp;lt;IDeepARHandle&amp;gt;(null);&#xA;&#xA;  return (&#xA;    &amp;lt;DeepAR&#xA;      ref={deepARRef}&#xA;      apiKey=&#34;your-api-key&#34;&#xA;      style={{flex: 1}}&#xA;      onInitialized={() =&amp;gt; {&#xA;        // ..&#xA;      }}&#xA;    /&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;DeepAR&amp;gt;&lt;/code&gt; component can take a number of inputs to customize it as needed. They are outlined below:&lt;/p&gt; &#xA;&lt;h3&gt;Props&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Required&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;apiKey&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;undefined&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;true&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make registration to DeepAR and get an API key from &lt;a href=&#34;https://developer.deepar.ai/&#34;&gt;Developer Panel&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;These are various events that you can hook into and fire functions on in the component:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Callback&lt;/th&gt; &#xA;   &lt;th&gt;Callback Params&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onInitialized&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;center&#34;&gt;&#xA;     -&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when the DeepAR is initialized. DeepAR methods should not be called before the initialization is completed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onEffectSwitched&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;slot&lt;/b&gt;: String)&lt;/td&gt; &#xA;   &lt;td&gt;Called when an effect has been switched.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onScreenshotTaken&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;path&lt;/b&gt;: String)&lt;/td&gt; &#xA;   &lt;td&gt;Called when the screen capture is finished.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onVideoRecordingPrepared&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;center&#34;&gt;&#xA;     -&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when the video recording is prepared.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onVideoRecordingStarted&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;center&#34;&gt;&#xA;     -&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The start of the video recording process is not synchronous, so this method will be called when the video recording is started.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onVideoRecordingFinished&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;path&lt;/b&gt;: String)&lt;/td&gt; &#xA;   &lt;td&gt;Called when the video recording is finished.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onCameraSwitched&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;facing&lt;/b&gt;: CameraFacing)&lt;/td&gt; &#xA;   &lt;td&gt;Called when camera switched.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onFaceVisibilityChanged&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;visible&lt;/b&gt;: Boolean)&lt;/td&gt; &#xA;   &lt;td&gt;Called when the user&#39;s face becomes visible or invisible.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onImageVisibilityChanged&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;visible&lt;/b&gt;: Boolean, &lt;b&gt;gameObject&lt;/b&gt;?: String)&lt;/td&gt; &#xA;   &lt;td&gt;Called when a natural image is being tracked and the visibility has changed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onError&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;text&lt;/b&gt;: String, &lt;b&gt;type&lt;/b&gt;: ErrorTypes,)&lt;/td&gt; &#xA;   &lt;td&gt;Called when an error occur, like the model path not found or the effect file failed to load.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;p&gt;These are the various methods.&lt;/p&gt; &#xA;&lt;h4&gt;General&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Params&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;switchEffect&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;params&lt;/b&gt;: ISwitchEffect)&lt;/td&gt; &#xA;   &lt;td&gt;The method used to switch any effect in the scene. Effects are places in slots. Every slot is identified by its unique name and can hold one effect at any given moment. Every subsequent call to this method removes the effect that was previously displayed in this slot.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;switchEffectWithPath&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;params&lt;/b&gt;: ISwitchEffectWithPath)&lt;/td&gt; &#xA;   &lt;td&gt;Same as &lt;code&gt;switchEffect&lt;/code&gt; but with path.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fireTrigger&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;trigger&lt;/b&gt;: String)&lt;/td&gt; &#xA;   &lt;td&gt;This method allows the user to fire a custom animation trigger for model animations from code. To fire a custom trigger, the trigger string must match the custom trigger set in the Studio when creating the effect.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;takeScreenshot&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;center&#34;&gt;&#xA;     -&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Captures a screenshot of the current screen. When a screenshot is done &lt;code&gt;onScreenshotTaken&lt;/code&gt; will be called with a resulting screenshot.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;setTouchMode&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;enabled&lt;/b&gt;: Boolean)&lt;/td&gt; &#xA;   &lt;td&gt;This method enable or disable the detection of touches over DeepAR view, it is necessary if your effect has ability to detect touches.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Camera Control&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Params&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;switchCamera&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;center&#34;&gt;&#xA;     -&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Switches the camera, back and front.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;setFlashOn&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;enabled&lt;/b&gt;: Boolean)&lt;/td&gt; &#xA;   &lt;td&gt;Toggle flash.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Video Recording&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Params&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;startRecording&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;center&#34;&gt;&#xA;     -&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Starts video recording of the camera preview.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pauseRecording&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;center&#34;&gt;&#xA;     -&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pauses video recording.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;resumeRecording&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;center&#34;&gt;&#xA;     -&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Resumes video recording after it has been paused with &lt;code&gt;pauseRecording&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;finishRecording&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;center&#34;&gt;&#xA;     -&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stops video recording and starts the process of saving the recorded video to the file system. When the file is saved, the method &lt;code&gt;onVideoRecordingFinished&lt;/code&gt; will be called.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;setAudioMute&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;enabled&lt;/b&gt;: Boolean)&lt;/td&gt; &#xA;   &lt;td&gt;Mutes/unmutes the audio while video recording.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Change Parameters&lt;/h4&gt; &#xA;&lt;p&gt;For more details about changeParameter API read this article &lt;a href=&#34;https://help.deepar.ai/en/articles/3732006-changing-filter-parameters-from-code&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Params&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;changeParameterFloat&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;params&lt;/b&gt;: IChangeParamaterFloat)&lt;/td&gt; &#xA;   &lt;td&gt;This method allows the user to change the value of blendshape parameters during runtime.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;changeParameterVec4&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;params&lt;/b&gt;: IChangeParamaterVec4)&lt;/td&gt; &#xA;   &lt;td&gt;This method is used to change the certain color of a Game Object at runtime.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;changeParameterVec3&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;params&lt;/b&gt;: IChangeParamaterVec3)&lt;/td&gt; &#xA;   &lt;td&gt;This method is used to change the transform of a Game Object at runtime, so here you can change the object position, rotation or scale.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;changeParameterBool&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;params&lt;/b&gt;: IChangeParamaterBool)&lt;/td&gt; &#xA;   &lt;td&gt;Let say you want to put a button in your app that enables or disables Game Object at runtime. (let&#39;s say you want your filter character to put their glasses on or take them off) This function helps you to enable/disable the value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;changeParameterString&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;params&lt;/b&gt;: IChangeParamaterString)&lt;/td&gt; &#xA;   &lt;td&gt;Change a string parameter on a game object. The most common use for this override is to change blend mode and culling mode properties of a game object. &lt;strong&gt;Note:&lt;/strong&gt; Only available in iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;changeParameterTexture&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;params&lt;/b&gt;: IChangeParamaterTexture)&lt;/td&gt; &#xA;   &lt;td&gt;This method allows the user to load an image and set it as a texture during runtime. This can be useful if you want to leverage our background segmentation feature, and change the background in your filter.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Core&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Params&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pause&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;center&#34;&gt;&#xA;     -&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pauses the rendering. This method will not release any resources and should be used only for temporary pause (e.g. user goes to the next screen).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;resume&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;center&#34;&gt;&#xA;     -&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Resumes the rendering if it was previously paused, otherwise doesn&#39;t do anything.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;setLiveMode&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;enabled&lt;/b&gt;: Boolean)&lt;/td&gt; &#xA;   &lt;td&gt;This is an optimization method and it allows the user to indicate the DeepAR in which mode it should operate. If called with true value, DeepAR will expect a continuous flow of new frames and it will optimize its inner processes for such workload. An example of this is the typical use case of processing the frames from the camera stream. If called with false it will optimize for preserving resources and memory by pausing the rendering after each processed frame. A typical use case for this is when the user needs to process just one image.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;setFaceDetectionSensitivity&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;sensitivity&lt;/b&gt;: Number)&lt;/td&gt; &#xA;   &lt;td&gt;This method allows the user to change face detection sensitivity. The sensitivity parameter can range from 0 to 3, where 0 is the fastest but might not recognize smaller (further away) faces, and 3 is the slowest but will find smaller faces. By default, this parameter is set to 1.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;showStats&lt;/td&gt; &#xA;   &lt;td&gt;(&lt;b&gt;enabled&lt;/b&gt;: Boolean)&lt;/td&gt; &#xA;   &lt;td&gt;Display debugging stats on screen.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Background Segmentation&lt;/h2&gt; &#xA;&lt;p&gt;DeepAR has &lt;a href=&#34;https://www.deepar.ai/background-removal&#34;&gt;Background Segmentation&lt;/a&gt; feature, with this feature you can change your background in real-time.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Background Segmentation Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/docs/background-segmentation.png&#34; alt=&#34;Background Segmentation&#34; width=&#34;500&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;This image taken from DeepAR offical site.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;There is a filter called &lt;code&gt;Background&lt;/code&gt; from &lt;a href=&#34;https://help.deepar.ai/en/articles/3580432-free-filter-pack&#34;&gt;Free Filter Pack&lt;/a&gt; and you can use this filter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How change background image?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Switch the &lt;code&gt;Background&lt;/code&gt; effect and apply new background image like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import {TextureSourceTypes} from &#39;react-native-deepar&#39;;&#xA;import RNFetchBlob from &#39;rn-fetch-blob&#39;;&#xA;&#xA;RNFetchBlob.config({})&#xA;  .fetch(&#39;GET&#39;, &#39;https://random.imagecdn.app/450/800&#39;)&#xA;  .then((res) =&amp;gt; {&#xA;    deepARRef?.current?.changeParameterTexture({&#xA;      gameObject: &#39;Background&#39;,&#xA;      component: &#39;MeshRenderer&#39;,&#xA;      parameter: &#39;s_texColor&#39;,&#xA;      type: TextureSourceTypes.BASE64,&#xA;      value: res.base64(),&#xA;    });&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Face Painting&lt;/h2&gt; &#xA;&lt;p&gt;You can detect touches in your effects if the effect customized for detecting touches. For an example; DeepAR has a filter called Face Painting, with this effect you can paint your face in real-time with touches.&lt;/p&gt; &#xA;&lt;p&gt;For more details about face painting effect read this article &lt;a href=&#34;https://help.deepar.ai/en/articles/5608765-face-painting-effect-tutorial&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Face Painting Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/docs/face-painting.jpeg&#34; alt=&#34;Face Painting&#34; width=&#34;500&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;This image taken from DeepAR offical site.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you want to be able to detect touches on the screen, you need to use the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;// If you switch to the face painting effect, use below code to ability detect touches over DeepAR view&#xA;deepARRef?.current?.setTouchMode(true);&#xA;&#xA;// If you not use face painting effect, use below code to disable detecting touches over DeepAR view&#xA;deepARRef?.current?.setTouchMode(false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example App&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# clone the project&#xA;git clone https://github.com/ridvanaltun/react-native-deepar.git&#xA;&#xA;# go into the project&#xA;cd react-native-deepar&#xA;&#xA;# make project ready&#xA;npm run bootstrap&#xA;&#xA;# go into the example&#xA;cd example&#xA;&#xA;# copy environment file and set your api keys (bundle id is com.example.reactnativedeepar)&#xA;cp .env.example .env&#xA;&#xA;# run for android&#xA;npm run android&#xA;&#xA;# or&#xA;&#xA;# run for ios&#xA;npm run ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Background Segmantation filter only works iPhone 7 and newer devices for iOS&lt;/li&gt; &#xA; &lt;li&gt;Hair Segmantation filter not supported on Android and only works iPhone 7 and newer devices for iOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Learn more about limitations from &lt;a href=&#34;https://help.deepar.ai/en/articles/5789913-features-by-platform&#34;&gt;features by platform &lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to learn how to contribute to the repository and the development workflow.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt; - see the &lt;a href=&#34;https://raw.githubusercontent.com/ridvanaltun/react-native-deepar/master/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>danielamitay/DACircularProgress</title>
    <updated>2022-07-05T01:48:20Z</updated>
    <id>tag:github.com,2022-07-05:/danielamitay/DACircularProgress</id>
    <link href="https://github.com/danielamitay/DACircularProgress" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DACircularProgress is a UIView subclass with circular UIProgressView properties.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;DACircularProgress&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;DACircularProgress&lt;/code&gt; is a &lt;code&gt;UIView&lt;/code&gt; subclass with circular &lt;code&gt;UIProgressView&lt;/code&gt; properties.&lt;/p&gt; &#xA;&lt;p&gt;It was originally built to be an imitation of Facebook&#39;s photo progress indicator.&lt;/p&gt; &#xA;&lt;p&gt;View the included example project for a demonstration.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/danielamitay/DACircularProgress/master/screenshot.png&#34; width=&#34;375&#34; height=&#34;668&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use &lt;code&gt;DACircularProgress&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy over the &lt;code&gt;DACircularProgress&lt;/code&gt; folder to your project folder.&lt;/li&gt; &#xA; &lt;li&gt;Make sure that your project includes &lt;code&gt;&amp;lt;QuartzCore.framework&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#import &#34;DACircularProgressView.h&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example Code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;&#xA;self.progressView = [[DACircularProgressView alloc] initWithFrame:CGRectMake(140.0f, 30.0f, 40.0f, 40.0f)];&#xA;self.progressView.roundedCorners = YES;&#xA;self.progressView.trackTintColor = [UIColor clearColor];&#xA;[self.view addSubview:self.progressView];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can also use Interface Builder by adding a &lt;code&gt;UIView&lt;/code&gt; element and setting its class to &lt;code&gt;DACircularProgress&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;iOS5.0+&lt;/p&gt; &#xA;&lt;h3&gt;Automatic Reference Counting (ARC) support&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;DACircularProgress&lt;/code&gt; was made with ARC enabled by default.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://danielamitay.com&#34;&gt;Personal website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/danielamitay&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/danielamitay&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.linkedin.com/in/danielamitay&#34;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielamitay/DACircularProgress/master/hello@danielamitay.com&#34;&gt;Email&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use/enjoy &lt;code&gt;DACircularProgress&lt;/code&gt;, let me know!&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;DACircularProgress&lt;/code&gt; is brought to you by &lt;a href=&#34;http://www.amitay.us&#34;&gt;Daniel Amitay&lt;/a&gt; and &lt;a href=&#34;https://github.com/danielamitay/DACircularProgress/contributors&#34;&gt;contributors to the project&lt;/a&gt;. A special thanks to &lt;a href=&#34;https://github.com/0xced&#34;&gt;Cédric Luthi&lt;/a&gt; for a significant amount of changes. If you have feature suggestions or bug reports, feel free to help out by sending pull requests or by &lt;a href=&#34;https://github.com/danielamitay/DACircularProgress/issues/new&#34;&gt;creating new issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;h3&gt;MIT License&lt;/h3&gt; &#xA;&lt;p&gt;Copyright (c) 2013 Daniel Amitay (&lt;a href=&#34;http://danielamitay.com&#34;&gt;http://danielamitay.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shinydevelopment/SimulatorStatusMagic</title>
    <updated>2022-07-05T01:48:20Z</updated>
    <id>tag:github.com,2022-07-05:/shinydevelopment/SimulatorStatusMagic</id>
    <link href="https://github.com/shinydevelopment/SimulatorStatusMagic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean up your status bar for taking screenshots on the iOS simulator.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Simulator Status Magic&lt;/h2&gt; &#xA;&lt;p&gt;Modify the iOS Simulator so that it has a perfect status bar, then run your app and take perfect screenshots every time. The modifications made are designed to match the images you see on the Apple site and are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;9:41 AM is displayed for the time.&lt;/li&gt; &#xA; &lt;li&gt;The battery is full and shows 100%.&lt;/li&gt; &#xA; &lt;li&gt;5 bars of cellular signal and full WiFi bars are displayed.&lt;/li&gt; &#xA; &lt;li&gt;Tue Jan 9 is displayed for the date (iPad only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Can&#39;t I just use &lt;code&gt;xcrun simctl status_bar&lt;/code&gt;? 🚀&lt;/h2&gt; &#xA;&lt;p&gt;Starting in Xcode 11, the &lt;code&gt;simctl&lt;/code&gt; command line tool includes a &lt;code&gt;status_bar&lt;/code&gt; option that allows you to override the appearance of the status bar in the simulator. Hopefully this will eventually supercede the need for SimulatorStatusMagic, but at the moment it still has holes that make this project continue to be relevant. In particular, &lt;code&gt;simctl status_bar&lt;/code&gt; does not currently provide a way to add localized date and time strings in the status bar.&lt;/p&gt; &#xA;&lt;h3&gt;How do I use it?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repository.&lt;/li&gt; &#xA; &lt;li&gt;Open SimulatorStatusMagic.xcodeproj with Xcode 6 (or above).&lt;/li&gt; &#xA; &lt;li&gt;Run the app target &lt;code&gt;SimulatorStatusMagic&lt;/code&gt; (not &lt;code&gt;SimulatorStatusMagiciOS&lt;/code&gt;) on whichever simulator type you would like to modify (it works with every device).&lt;/li&gt; &#xA; &lt;li&gt;Once the app launches, press the only button on the screen :)&lt;/li&gt; &#xA; &lt;li&gt;That&#39;s it, you&#39;re done! Now just run your app and take screenshots.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I remove the customisations?&lt;/h3&gt; &#xA;&lt;p&gt;Run the app again and click &#34;Restore Default Status Bar&#34;. Resetting the iOS Simulator using the normal menu option also works.&lt;/p&gt; &#xA;&lt;h3&gt;I have a script to take my screenshots, can I automate this?&lt;/h3&gt; &#xA;&lt;p&gt;Yes! SimulatorStatusMagic is available via &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, Swift Package Manager and as a standalone source release. &lt;a href=&#34;https://github.com/shinydevelopment/SimulatorStatusMagic/raw/master/INSTALLATION.md&#34;&gt;Installation instructions&lt;/a&gt; are available.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cocoapods/Carthage&lt;/strong&gt; It is recommended to &lt;strong&gt;only&lt;/strong&gt; include &lt;code&gt;SDStatusBarManager&lt;/code&gt; in your debug configuration so that the code is &lt;strong&gt;never&lt;/strong&gt; included in release builds. When you want to apply a perfect status bar, call &lt;code&gt;[[SDStatusBarManager sharedInstance] enableOverrides]&lt;/code&gt;. To restore the standard status bar, call &lt;code&gt;[[SDStatusBarManager sharedInstance] disableOverrides]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift Package Manager&lt;/strong&gt; SPM does not yet support conditionally linking packages based on build configuration. The recommended approach when using SPM is to link to your UI test target only, and enable the overrides from that target instead.&lt;/p&gt; &#xA;&lt;h3&gt;What about automation of the sample app?&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d prefer to automate the app itself to automatically enable or disable the overrides, this can be done with environment variables.&lt;/p&gt; &#xA;&lt;p&gt;Run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SIMULATOR_STATUS_MAGIC_OVERRIDES = enable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SIMULATOR_STATUS_MAGIC_OVERRIDES = disable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The overrides will be automatically enabled or disabled on launch.&lt;/p&gt; &#xA;&lt;h3&gt;Does this work on device?&lt;/h3&gt; &#xA;&lt;p&gt;No. The status bar server is blocked on devices. However, macOS includes the facility to include a perfect status bar when recording your device screen with QuickTime (&lt;a href=&#34;https://appadvice.com/appnn/2014/08/quicktime-in-os-x-yosemite-reveals-that-apple-cares-about-status-bars&#34;&gt;Read more&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;How does this work?&lt;/h3&gt; &#xA;&lt;p&gt;The best idea is to check &lt;a href=&#34;https://github.com/shinydevelopment/SimulatorStatusMagic/raw/master/SDStatusBarManager/SDStatusBarManager.m&#34;&gt;the source code&lt;/a&gt; which should get you started with how it works :)&lt;/p&gt; &#xA;&lt;h2&gt;Updating for new versions of iOS&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s a general pattern for updating this project to support a new version of iOS, although this could change if Apple changes something in the future.&lt;/p&gt; &#xA;&lt;h3&gt;Prepare the new files.&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy the previous release&#39;s &lt;code&gt;SDStatusBarOverriderPostXX_Y.{h,m}&lt;/code&gt; files, and update them to the new version.&lt;/li&gt; &#xA; &lt;li&gt;Update SDStatusBarManager.m to refer to the new overrider if detecting the new operating system version.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Find the updated structs in the runtime headers.&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version of the &lt;a href=&#34;https://github.com/DerekSelander/dsdump&#34;&gt;dsdump&lt;/a&gt; tool.&lt;/li&gt; &#xA; &lt;li&gt;Run dsdump against the UIKitCore framework binary, to generate the private runtime headers.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./dsdump --objc -a x86_64 --verbose=5 /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore --defined &amp;gt; ~/Desktop/UIKitCore.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Find &lt;code&gt;UIStatusBarServerListener&lt;/code&gt; in the output.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Update the structs in the new overrider.&lt;/h3&gt; &#xA;&lt;p&gt;There are two structs, StatusBarRawData and StatusBarOverrideData, that need to be updated. Each corresponds to a line in the runtime header output for UIStatusBarServerListener. It should be pretty easy to figure out the mapping if you study it for a minute.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Update StatusBarRawData and StatusBarOverrideData to match any changes to the structs in the runtime headers.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Check if it works&lt;/h3&gt; &#xA;&lt;p&gt;That should be it!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the sample app, and verify that the status bar is updated correctly.&lt;/li&gt; &#xA; &lt;li&gt;If anything new has been added to the status bar that needs to be adjusted, make additional changes to your new SDStatusBarOverrider.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d love contributions! Found a bug? If you report it with a pull request attached then you get a gold star :)&lt;/p&gt; &#xA;&lt;p&gt;However, the scope of this project is intentionally limited. We&#39;re not planning to add options to this to allow ultimate customisation of the status bar. It&#39;s intended to do just one job really well, change the status bar to match &lt;a href=&#34;http://www.apple.com/ios/&#34;&gt;Apple&#39;s marketing materials&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>