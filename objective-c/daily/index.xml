<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-03T01:49:18Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/plcrashreporter</title>
    <updated>2022-07-03T01:49:18Z</updated>
    <id>tag:github.com,2022-07-03:/microsoft/plcrashreporter</id>
    <link href="https://github.com/microsoft/plcrashreporter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reliable, open-source crash reporting for iOS, macOS and tvOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/PLCrashReporter&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/PLCrashReporter.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?sanitize=true&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;SwiftPM compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PLCrashReporter&lt;/h1&gt; &#xA;&lt;p&gt;PLCrashReporter is a reliable open source library that provides an in-process live crash reporting framework for use on iOS, macOS and tvOS. The library detects crashes and generates reports to help your investigation and troubleshooting with the information of application, system, process, thread, etc. as well as stack traces.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to use PLCrashReporter is by using &lt;a href=&#34;https://appcenter.ms&#34;&gt;AppCenter&lt;/a&gt;. However, if you want to use PLCrashReporter directly, grab the latest release at &lt;a href=&#34;https://github.com/microsoft/plcrashreporter/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uses only supported and public APIs/ABIs for crash reporting.&lt;/li&gt; &#xA; &lt;li&gt;The most accurate stack unwinding available, using DWARF and Apple Compact Unwind frame data.&lt;/li&gt; &#xA; &lt;li&gt;First released in 2008, and used in hundreds of thousands of apps. PLCrashReporter has seen a tremendous amount of user testing.&lt;/li&gt; &#xA; &lt;li&gt;Does not interfere with debugging in lldb/gdb&lt;/li&gt; &#xA; &lt;li&gt;Backtraces for all active threads are provided.&lt;/li&gt; &#xA; &lt;li&gt;Provides full register state for the crashed thread.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 11 or above.&lt;/li&gt; &#xA; &lt;li&gt;Minimum supported platforms: iOS 9, macOS 10.9, tvOS 9, Mac Catalyst 13.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Decoding Crash Reports&lt;/h2&gt; &#xA;&lt;p&gt;Crash reports are output as protobuf-encoded messages, and may be decoded using the CrashReporter library or any &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Google Protocol Buffers&lt;/a&gt; decoder.&lt;/p&gt; &#xA;&lt;p&gt;In addition to the in-library decoding support, you may use the included &lt;code&gt;plcrashutil&lt;/code&gt; binary to convert crash reports to apple&#39;s standard iPhone text format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;plcrashutil convert --format=iphone example_report.plcrash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;atos&lt;/code&gt; command-line tool to symbolicate the output. For more information about this tool, see &lt;a href=&#34;https://developer.apple.com/documentation/Xcode/adding-identifiable-symbol-names-to-a-crash-report&#34;&gt;Adding Identifiable Symbol Names to a Crash Report&lt;/a&gt;. Future library releases may include built-in re-usable formatters, for outputting alternative formats directly from the phone.&lt;/p&gt; &#xA;&lt;h2&gt;Adding PLCrashReporter to your project&lt;/h2&gt; &#xA;&lt;p&gt;PLCrashReporter can be added to your app via &lt;a href=&#34;https://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://github.com/Carthage/Carthage#quick-start&#34;&gt;Carthage&lt;/a&gt;, &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;Swift Package Manager&lt;/a&gt;, or by manually adding the binaries to your project.&lt;/p&gt; &#xA;&lt;h3&gt;Integration via Cocoapods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the following line to your &lt;code&gt;Podfile&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;PLCrashReporter&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; to install your newly defined pod and open the project&#39;s &lt;code&gt;.xcworkspace&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Integration via Swift Package Manager&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From the Xcode menu, click &lt;strong&gt;File&lt;/strong&gt; &amp;gt; &lt;strong&gt;Swift Packages&lt;/strong&gt; &amp;gt; &lt;strong&gt;Add Package Dependency&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In the dialog that appears, enter the repository URL: &lt;a href=&#34;https://github.com/microsoft/plcrashreporter.git&#34;&gt;https://github.com/microsoft/plcrashreporter.git&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In Version, select &lt;strong&gt;Up to Next Major&lt;/strong&gt; and take the default option.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Integration via Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;microsoft/plcrashreporter&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt; to fetch dependencies.&lt;/li&gt; &#xA; &lt;li&gt;In Xcode, open your application target&#39;s &lt;strong&gt;General&lt;/strong&gt; settings tab. Drag and drop &lt;strong&gt;CrashReporter.xcframework&lt;/strong&gt; from the &lt;strong&gt;Carthage/Build&lt;/strong&gt; folder into the &lt;code&gt;Frameworks, Libraries and Embedded Content&lt;/code&gt; section. For iOS and tvOS, set &lt;code&gt;Embed&lt;/code&gt; to &lt;code&gt;Do not embed&lt;/code&gt;. For macoS, set &lt;code&gt;Embed&lt;/code&gt; to &lt;code&gt;Embed and Sign&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Carthage integration doesn&#39;t build the dependency correctly in Xcode 12 with flag &#34;--no-use-binaries&#34; or from a specific branch. To make it work, refer to &lt;a href=&#34;https://github.com/Carthage/Carthage/raw/master/Documentation/Xcode12Workaround.md&#34;&gt;this instruction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Integration by copying the binaries into your project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/Microsoft/plcrashreporter/releases&#34;&gt;PLCrashReporter&lt;/a&gt; frameworks provided as a zip file.&lt;/li&gt; &#xA; &lt;li&gt;Unzip the file and you&#39;ll see a folder called &lt;strong&gt;PLCrashReporter&lt;/strong&gt; that contains subfolders for all supported platforms.&lt;/li&gt; &#xA; &lt;li&gt;Add PLCrashReporter to the project in Xcode: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Make sure the Project Navigator is visible (⌘+1).&lt;/li&gt; &#xA;   &lt;li&gt;Now drag &amp;amp; drop &lt;strong&gt;PLCrashReporter.framework&lt;/strong&gt; (or &lt;strong&gt;PLCrashReporter.xcframework&lt;/strong&gt;) from the Finder into Xcode&#39;s Project Navigator.&lt;/li&gt; &#xA;   &lt;li&gt;A dialog will appear, make sure your app target is checked and click &lt;strong&gt;Finish&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; PLCrashReporter xcframework contains static binaries for iOS and tvOS, and dynamic binaries for macOS. When adding the framework to your project make sure that in &lt;code&gt;Frameworks, Libraries and Embedded Content&lt;/code&gt; section &lt;code&gt;Embed&lt;/code&gt; is selected to &lt;code&gt;Do not embed&lt;/code&gt; for iOS and tvOS and &lt;code&gt;Embed and Sign&lt;/code&gt; for macOS. &lt;code&gt;PLCrashReporter-Static-{version}.zip&lt;/code&gt; is an exception - it contains static frameworks for all platforms.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;The following example shows a way how to initialize crash reporter. Please note that enabling in-process crash reporting will conflict with any attached debuggers so make sure the &lt;strong&gt;debugger isn&#39;t attached&lt;/strong&gt; when you crash the app.&lt;/p&gt; &#xA;&lt;h3&gt;Objective-c&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@import CrashReporter;&#xA;&#xA;...&#xA;&#xA;// Uncomment and implement isDebuggerAttached to safely run this code with a debugger.&#xA;// See: https://github.com/microsoft/plcrashreporter/blob/2dd862ce049e6f43feb355308dfc710f3af54c4d/Source/Crash%20Demo/main.m#L96&#xA;// if (![self isDebuggerAttached]) {&#xA;&#xA;// It is strongly recommended that local symbolication only be enabled for non-release builds.&#xA;// Use PLCrashReporterSymbolicationStrategyNone for release versions.&#xA;PLCrashReporterConfig *config = [[PLCrashReporterConfig alloc] initWithSignalHandlerType: PLCrashReporterSignalHandlerTypeMach&#xA;                                                                   symbolicationStrategy: PLCrashReporterSymbolicationStrategyAll];&#xA;PLCrashReporter *crashReporter = [[PLCrashReporter alloc] initWithConfiguration: config];&#xA;&#xA;// Enable the Crash Reporter.&#xA;NSError *error;&#xA;if (![crashReporter enableCrashReporterAndReturnError: &amp;amp;error]) {&#xA;    NSLog(@&#34;Warning: Could not enable crash reporter: %@&#34;, error);&#xA;}&#xA;// }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checking collected crash report can be done in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;if ([crashReporter hasPendingCrashReport]) {&#xA;    NSError *error;&#xA;&#xA;    // Try loading the crash report.&#xA;    NSData *data = [crashReporter loadPendingCrashReportDataAndReturnError: &amp;amp;error];&#xA;    if (data == nil) {&#xA;        NSLog(@&#34;Failed to load crash report data: %@&#34;, error);&#xA;        return;&#xA;    }&#xA;&#xA;    // Retrieving crash reporter data.&#xA;    PLCrashReport *report = [[PLCrashReport alloc] initWithData: data error: &amp;amp;error];&#xA;    if (report == nil) {&#xA;        NSLog(@&#34;Failed to parse crash report: %@&#34;, error);&#xA;        return;&#xA;    }&#xA;&#xA;    // We could send the report from here, but we&#39;ll just print out some debugging info instead.&#xA;    NSString *text = [PLCrashReportTextFormatter stringValueForCrashReport: report withTextFormat: PLCrashReportTextFormatiOS];&#xA;    NSLog(@&#34;%@&#34;, text);&#xA;&#xA;    // Purge the report.&#xA;    [crashReporter purgePendingCrashReport];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import CrashReporter&#xA;&#xA;...&#xA;// Uncomment and implement isDebuggerAttached to safely run this code with a debugger.&#xA;// See: https://github.com/microsoft/plcrashreporter/blob/2dd862ce049e6f43feb355308dfc710f3af54c4d/Source/Crash%20Demo/main.m#L96&#xA;// if (!isDebuggerAttached()) {&#xA;&#xA;  // It is strongly recommended that local symbolication only be enabled for non-release builds.&#xA;  // Use [] for release versions.&#xA;  let config = PLCrashReporterConfig(signalHandlerType: .mach, symbolicationStrategy: .all)&#xA;  guard let crashReporter = PLCrashReporter(configuration: config) else {&#xA;    print(&#34;Could not create an instance of PLCrashReporter&#34;)&#xA;    return&#xA;  }&#xA;&#xA;  // Enable the Crash Reporter.&#xA;  do {&#xA;    try crashReporter.enableAndReturnError()&#xA;  } catch let error {&#xA;    print(&#34;Warning: Could not enable crash reporter: \(error)&#34;)&#xA;  }&#xA;// }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checking collected crash report can be done in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  // Try loading the crash report.&#xA;  if crashReporter.hasPendingCrashReport() {&#xA;    do {&#xA;      let data = try crashReporter.loadPendingCrashReportDataAndReturnError()&#xA;&#xA;      // Retrieving crash reporter data.&#xA;      let report = try PLCrashReport(data: data)&#xA;&#xA;      // We could send the report from here, but we&#39;ll just print out some debugging info instead.&#xA;      if let text = PLCrashReportTextFormatter.stringValue(for: report, with: PLCrashReportTextFormatiOS) { &#xA;        print(text)&#xA;      } else {&#xA;        print(&#34;CrashReporter: can&#39;t convert report to text&#34;)&#xA;      }&#xA;    } catch let error {&#xA;      print(&#34;CrashReporter failed to load and parse with error: \(error)&#34;)&#xA;    }&#xA;  }&#xA;&#xA;  // Purge the report.&#xA;  crashReporter.purgePendingCrashReport()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Mac running macOS compliant with Xcode requirements.&lt;/li&gt; &#xA; &lt;li&gt;Xcode 11 or above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, next optional tools are used to build additional resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Doxygen to generate the documentation. See &lt;a href=&#34;https://github.com/doxygen/doxygen&#34;&gt;the official Doxygen repository&lt;/a&gt; for more information or use &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; to install it.&lt;/li&gt; &#xA; &lt;li&gt;GraphViz to generate the documentation. See &lt;a href=&#34;https://www.graphviz.org/download/&#34;&gt;the official GraphViz website&lt;/a&gt; for more information or use &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; to install it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protobuf-c&lt;/code&gt; to convert Protocol Buffer &lt;code&gt;.proto&lt;/code&gt; files to C descriptor code. See &lt;a href=&#34;https://github.com/protobuf-c/protobuf-c&#34;&gt;the official protobuf-c repository&lt;/a&gt; for more information or use &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; to install it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a new window for your Terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to PLCrashReporter&#39;s root folder and run&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xcodebuild -configuration Release -target &#39;CrashReporter&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to create binaries for all platforms.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are looking forward to your contributions via pull requests.&lt;/p&gt; &#xA;&lt;p&gt;To contribute to PLCrashReporter, you need the tools mentioned above to build PLCrashReporter for all architectures and &lt;code&gt;protobuf-c&lt;/code&gt; to convert Protocol Buffer &lt;code&gt;.proto&lt;/code&gt; files to C descriptor code.&lt;/p&gt; &#xA;&lt;h3&gt;Code of Conduct&lt;/h3&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zhanghao5683934/MeihuBeautifyFilter</title>
    <updated>2022-07-03T01:49:18Z</updated>
    <id>tag:github.com,2022-07-03:/zhanghao5683934/MeihuBeautifyFilter</id>
    <link href="https://github.com/zhanghao5683934/MeihuBeautifyFilter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;美狐美颜sdk，支持美颜滤镜(Beauty Filter)、面具特效(Mask the special effects)、贴纸(Software/Hardware Encoder) 、滤镜(LUTs)&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://images.gitee.com/uploads/images/2021/0807/140824_628c2001_9236797.png&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://images.gitee.com/uploads/images/2021/0807/140839_fa112ac1_9236797.png&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h3&gt;美狐美颜开源版（如果对你有用，请给个star！)&lt;/h3&gt; &#xA;&lt;h3&gt;Meihu beauty open source version (if it is useful to you, please give a star!)&lt;/h3&gt; &#xA;&lt;h3&gt;演示Demo&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;美颜演示下载地址Beauty demo download address: &lt;a target=&#34;_blank&#34; href=&#34;http://fir.facegl.com/yetc&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://fir.facegl.com/yetc&#34;&gt;http://fir.facegl.com/yetc&lt;/a&gt; 演示demo：&lt;img src=&#34;https://images.gitee.com/uploads/images/2021/0611/133433_ea131003_2073279.png&#34; width=&#34;400&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;接入说明 Access instructions&lt;/h3&gt; &#xA;&lt;p&gt;下载项目后 用Xcode打开 真机运行即可展示效果 After downloading the project, open it with Xcode and run it on the real machine to show the effect&lt;/p&gt; &#xA;&lt;h3&gt;项目介绍 Project Introduction&lt;/h3&gt; &#xA;&lt;p&gt;美狐美颜sdk，是以人脸识别技术为核心，提供专业级实时美颜、大眼瘦脸、美颜滤镜、动态贴纸等滤镜的移动端sdk，以打造多功能视频美颜软件为目标，充分满足客户在直播美颜、短视频美颜等众多音视频软件业务场景的美化需求。现推出开源版本iOS版，Android开源版本正在研发中敬请期待！ Meihu beauty sdk is a mobile sdk with face recognition technology as the core, providing professional-grade real-time beauty, big eyes and face reduction, beauty filters, dynamic stickers and other filters, to create a multi-functional video beauty software The goal is to fully meet the beautification needs of customers in many audio and video software business scenarios such as live beauty and short video beauty. The open source version is now available for iOS, and the Android open source version is under development, so stay tuned!&lt;/p&gt; &#xA;&lt;h3&gt;功能展示&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zhanghao5683934/Meihu-FaceBeauty-Live/raw/main/meihumeiyan.png?raw=true&#34; alt=&#34;输入图片说明&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;版本对比&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gitee.com/MeiHuSDK/meihu-meiyan/raw/master/QQ%E5%9B%BE%E7%89%8720220323170228.png&#34; alt=&#34;输入图片说明&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;开源版使用须知&lt;/h3&gt; &#xA;&lt;h3&gt;Instructions for using the open source version&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;允许用于个人学习、教学案例&lt;/li&gt; &#xA; &lt;li&gt;Allowed for personal study, teaching case&lt;/li&gt; &#xA; &lt;li&gt;开源版不适合商用，商用请购买商业版&lt;/li&gt; &#xA; &lt;li&gt;The open source version is not suitable for commercial use, please purchase the commercial version for commercial use&lt;/li&gt; &#xA; &lt;li&gt;禁止将本项目的代码和资源进行任何形式的出售，产生的一切任何后果责任由侵权者自负&lt;/li&gt; &#xA; &lt;li&gt;It is prohibited to sell the code and resources of this project in any form, and the infringer shall be responsible for all consequences arising therefrom&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;商业合作 Business cooperation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;美狐sdk非开源版拥有更加完善的功能、性能更高、更稳定，支持目前主流的云服务平台&lt;/li&gt; &#xA; &lt;li&gt;The non-open source version of Meihu SDK has more complete functions, higher performance and more stability, and supports the current mainstream cloud service platforms&lt;/li&gt; &#xA; &lt;li&gt;如果您想使用功能更完善的美颜sdk，请联系QQ客服：2770722087，获取其它版本&lt;/li&gt; &#xA; &lt;li&gt;If you want to use the beauty sdk with more complete functions, please contact QQ customer service: 2770722087 to obtain other versions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;交流互动（加客服经理微信或加入开源群）&lt;/h3&gt; &#xA;&lt;h3&gt;Communication and interaction (add customer service manager WeChat or join open source group)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2021/0916/185939_2e66c575_9236797.png&#34; alt=&#34;输入图片说明&#34; title=&#34;wxer1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;点击链接加入群聊【美狐开源学习交流群】Click the link to join the group chat [Meihu Open Source Learning Exchange Group]：&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=8b8WsWFE&#34;&gt;https://jq.qq.com/?_wv=1027&amp;amp;k=8b8WsWFE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2021/0916/173830_95d0c197_9236797.png&#34; alt=&#34;输入图片说明&#34; title=&#34;美狐开源学习交流群群聊二维码.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;美颜开源QQ群：101672457&lt;/p&gt;</summary>
  </entry>
</feed>