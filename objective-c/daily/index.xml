<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-10T01:42:33Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>navermaps/NMapsMap</title>
    <updated>2023-01-10T01:42:33Z</updated>
    <id>tag:github.com,2023-01-10:/navermaps/NMapsMap</id>
    <link href="https://github.com/navermaps/NMapsMap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>cynthia/WorldWideWeb</title>
    <updated>2023-01-10T01:42:33Z</updated>
    <id>tag:github.com,2023-01-10:/cynthia/WorldWideWeb</id>
    <link href="https://github.com/cynthia/WorldWideWeb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Last publicly available revision of the world&#39;s first web browser. This is a source import from 0.15 for NextStep. Originally written by @timbl.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WorldWideWeb&lt;/h1&gt; &#xA;&lt;p&gt;This is the first web browser, originally written by Tim Berners-Lee. For further details, refer to this &lt;a href=&#34;https://www.w3.org/People/Berners-Lee/WorldWideWeb.html&#34;&gt;wikipedia article&lt;/a&gt; or the &lt;a href=&#34;https://www.w3.org/People/Berners-Lee/WorldWideWeb.html&#34;&gt;original website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The original source was obtained from &lt;a href=&#34;http://browsers.evolt.org/browsers/archive/worldwideweb/NeXT&#34;&gt;this site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;I have no idea how to make this compile or run. This repository was created as a means of archiving a piece of history. The original software was written on a NextStep computer, using NextStep specific APIs. (And no, they are not compatible with Cocoa. I checked.)&lt;/p&gt; &#xA;&lt;p&gt;It may be possible to build and run this on a NextStep emulator such as &lt;a href=&#34;http://previous.alternative-system.com&#34;&gt;Previous&lt;/a&gt;, but I don&#39;t know if anyone has tried and succeeded.&lt;/p&gt; &#xA;&lt;p&gt;If you ever do get this to run, please let me know!&lt;/p&gt; &#xA;&lt;h2&gt;Original Readme&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;IMPORTANT: Get and read the files COPYRIGHT and CERN before downloading &#xA;other files.&#xA;&#xA;This directory contains binaries for the NeXTSTEP Web browser&#xA;application.&#xA;________________________________________________________________________&#xA;&#xA;&#x9;THE EDITOR&#xA;&#xA;WorldWideWeb_0.16.tar.Z is the only wysiwyg hypertext editor for the&#xA;NeXT.  It has limitations and bugs -- it can&#39;t access Gopher, FTP sites,&#xA;etc.  But it is a hypertext editor!&#xA;&#xA;Note this app is compiled for NextStep 3.0 and won&#39;t work with 2.1.&#xA;There is no way round this; don&#39;t ask!  (The Project file is&#xA;converted by the ProjectBuilder to a version 3 project file&#xA;when you first compile for version 3.  The version 3 project&#xA;file won&#39;t work with 2.0 (Interface builder and project builder&#xA;shared a file and an app in 2.x), and so there is no going back!&#xA;The 3.x app won&#39;t work under 2.x as it needs 3.x shared libaries.)&#xA;&#xA;&#xA;&#x9;THE BROWSER&#xA;&#xA;The file labelled 1.0 is a pre-alpha browser which uses the libwww&#xA;library, so you can get multimedia files etc etc.  Does doc&#xA;format conversion, etc.  &#xA;&#xA;THE EDITOR DOES NOT WORK.  NOT SUPPORTED....&#xA;It can&#39;t edit -- try and it will destroy your files!&#xA;Only for the curious.  This DOES handle Gopher, FTP, etc.&#xA;&#xA;Sorry they have the same icon now ... can be very confusing&#xA;if you use both.&#xA;&#xA;timbl&#xA;________________________________________________________________________&#xA;&#xA;  [Also, note that the WorldWideWeb_2.01* and WWW.app_2.02* files untar&#xA;  into an application called Nexus.app, rather than WorldWideWeb.app .&#xA;  ---Jay Sekora &amp;lt;js@w3.org&amp;gt;, August 1995]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Original License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 1995 by: Massachusetts Institute of Technology (MIT), CERN&#xA;&#xA;This W3C software is being provided by the copyright holders under the&#xA;following license. By obtaining, using and/or copying this software,&#xA;you agree that you have read, understood, and will comply with the&#xA;following terms and conditions:&#xA;&#xA;Permission to use, copy, modify, and distribute this software and its&#xA;documentation for any purpose and without fee or royalty is hereby&#xA;granted, provided that the full text of this NOTICE appears on ALL&#xA;copies of the software and documentation or portions thereof, including&#xA;modifications, that you make.&#xA;&#xA;THIS SOFTWARE IS PROVIDED &#34;AS IS,&#34; AND COPYRIGHT HOLDERS MAKE NO&#xA;REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF EXAMPLE,&#xA;BUT NOT LIMITATION, COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR&#xA;WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR&#xA;THAT THE USE OF THE SOFTWARE OR DOCUMENTATION WILL NOT INFRINGE ANY&#xA;THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.  COPYRIGHT&#xA;HOLDERS WILL BEAR NO LIABILITY FOR ANY USE OF THIS SOFTWARE OR&#xA;DOCUMENTATION.&#xA;&#xA;The name and trademarks of copyright holders may NOT be used in&#xA;advertising or publicity pertaining to the software without specific,&#xA;written prior permission.  Title to copyright in this software and any&#xA;associated documentation will at all times remain with copyright&#xA;holders.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CERN Acknowledgment&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;This product includes computer software created and made available&#xA;by CERN.  This acknowledgment shall be mentioned in full in any&#xA;product which includes the CERN computer software included herein or&#xA;parts thereof.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jsonmodel/jsonmodel</title>
    <updated>2023-01-10T01:42:33Z</updated>
    <id>tag:github.com,2023-01-10:/jsonmodel/jsonmodel</id>
    <link href="https://github.com/jsonmodel/jsonmodel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Magical Data Modeling Framework for JSON - allows rapid creation of smart data models. You can use it in your iOS, macOS, watchOS and tvOS apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JSONModel - Magical Data Modeling Framework for JSON&lt;/h1&gt; &#xA;&lt;p&gt;JSONModel allows rapid creation of smart data models. You can use it in your iOS, macOS, watchOS and tvOS apps. Automatic introspection of your model classes and JSON input drastically reduces the amount of code you have to write.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jsonmodel/jsonmodel/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for details on changes.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;JSONModel&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;jsonmodel/jsonmodel&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;download the JSONModel repository&lt;/li&gt; &#xA; &lt;li&gt;copy the JSONModel sub-folder into your Xcode project&lt;/li&gt; &#xA; &lt;li&gt;link your app to SystemConfiguration.framework&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Consider you have JSON like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &#34;id&#34;: 10, &#34;country&#34;: &#34;Germany&#34;, &#34;dialCode&#34;: 49, &#34;isInEurope&#34;: true }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;create a JSONModel subclass for your data model&lt;/li&gt; &#xA; &lt;li&gt;declare properties in your header file with the name of the JSON keys:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface CountryModel : JSONModel&#xA;@property (nonatomic) NSInteger id;&#xA;@property (nonatomic) NSString *country;&#xA;@property (nonatomic) NSString *dialCode;&#xA;@property (nonatomic) BOOL isInEurope;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s no need to do anything in the implementation (&lt;code&gt;.m&lt;/code&gt;) file.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;initialize your model with data:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSError *error;&#xA;CountryModel *country = [[CountryModel alloc] initWithString:myJson error:&amp;amp;error];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the validation of the JSON passes. you have all the corresponding properties in your model populated from the JSON. JSONModel will also try to convert as much data to the types you expect. In the example above it will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;convert &lt;code&gt;id&lt;/code&gt; from string (in the JSON) to an &lt;code&gt;int&lt;/code&gt; for your class&lt;/li&gt; &#xA; &lt;li&gt;copy the &lt;code&gt;country&lt;/code&gt; value&lt;/li&gt; &#xA; &lt;li&gt;convert &lt;code&gt;dialCode&lt;/code&gt; from a number (in the JSON) to an &lt;code&gt;NSString&lt;/code&gt; value&lt;/li&gt; &#xA; &lt;li&gt;copy the &lt;code&gt;isInEurope&lt;/code&gt; value&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All you have to do is define the properties and their expected types.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Automatic name based mapping&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;id&#34;: 123,&#xA;&#x9;&#34;name&#34;: &#34;Product name&#34;,&#xA;&#x9;&#34;price&#34;: 12.95&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface ProductModel : JSONModel&#xA;@property (nonatomic) NSInteger id;&#xA;@property (nonatomic) NSString *name;&#xA;@property (nonatomic) float price;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model cascading (models including other models)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;orderId&#34;: 104,&#xA;&#x9;&#34;totalPrice&#34;: 13.45,&#xA;&#x9;&#34;product&#34;: {&#xA;&#x9;&#x9;&#34;id&#34;: 123,&#xA;&#x9;&#x9;&#34;name&#34;: &#34;Product name&#34;,&#xA;&#x9;&#x9;&#34;price&#34;: 12.95&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface ProductModel : JSONModel&#xA;@property (nonatomic) NSInteger id;&#xA;@property (nonatomic) NSString *name;&#xA;@property (nonatomic) float price;&#xA;@end&#xA;&#xA;@interface OrderModel : JSONModel&#xA;@property (nonatomic) NSInteger orderId;&#xA;@property (nonatomic) float totalPrice;&#xA;@property (nonatomic) ProductModel *product;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model collections&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;orderId&#34;: 104,&#xA;&#x9;&#34;totalPrice&#34;: 103.45,&#xA;&#x9;&#34;products&#34;: [&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#34;id&#34;: 123,&#xA;&#x9;&#x9;&#x9;&#34;name&#34;: &#34;Product #1&#34;,&#xA;&#x9;&#x9;&#x9;&#34;price&#34;: 12.95&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#34;id&#34;: 137,&#xA;&#x9;&#x9;&#x9;&#34;name&#34;: &#34;Product #2&#34;,&#xA;&#x9;&#x9;&#x9;&#34;price&#34;: 82.95&#xA;&#x9;&#x9;}&#xA;&#x9;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@protocol ProductModel;&#xA;&#xA;@interface ProductModel : JSONModel&#xA;@property (nonatomic) NSInteger id;&#xA;@property (nonatomic) NSString *name;&#xA;@property (nonatomic) float price;&#xA;@end&#xA;&#xA;@interface OrderModel : JSONModel&#xA;@property (nonatomic) NSInteger orderId;&#xA;@property (nonatomic) float totalPrice;&#xA;@property (nonatomic) NSArray &amp;lt;ProductModel&amp;gt; *products;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: the angle brackets after &lt;code&gt;NSArray&lt;/code&gt; contain a protocol. This is not the same as the Objective-C generics system. They are not mutually exclusive, but for JSONModel to work, the protocol must be in place.&lt;/p&gt; &#xA;&lt;p&gt;Also property can have generics info for compiler&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface OrderModel : JSONModel&#xA;@property (nonatomic) NSInteger orderId;&#xA;@property (nonatomic) float totalPrice;&#xA;@property (nonatomic) NSArray&amp;lt;ProductModel *&amp;gt; &amp;lt;ProductModel&amp;gt; *products;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nested key mapping&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;orderId&#34;: 104,&#xA;&#x9;&#34;orderDetails&#34;: {&#xA;&#x9;&#x9;&#34;name&#34;: &#34;Product #1&#34;,&#xA;&#x9;&#x9;&#34;price&#34;: {&#xA;&#x9;&#x9;&#x9;&#34;usd&#34;: 12.95&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface OrderModel : JSONModel&#xA;@property (nonatomic) NSInteger id;&#xA;@property (nonatomic) NSString *productName;&#xA;@property (nonatomic) float price;&#xA;@end&#xA;&#xA;@implementation OrderModel&#xA;&#xA;+ (JSONKeyMapper *)keyMapper&#xA;{&#xA;&#x9;return [[JSONKeyMapper alloc] initWithModelToJSONDictionary:@{&#xA;&#x9;&#x9;@&#34;id&#34;: @&#34;orderId&#34;,&#xA;&#x9;&#x9;@&#34;productName&#34;: @&#34;orderDetails.name&#34;,&#xA;&#x9;&#x9;@&#34;price&#34;: @&#34;orderDetails.price.usd&#34;&#xA;&#x9;}];&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Map automatically to snake_case&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;order_id&#34;: 104,&#xA;&#x9;&#34;order_product&#34;: &#34;Product #1&#34;,&#xA;&#x9;&#34;order_price&#34;: 12.95&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface OrderModel : JSONModel&#xA;@property (nonatomic) NSInteger orderId;&#xA;@property (nonatomic) NSString *orderProduct;&#xA;@property (nonatomic) float orderPrice;&#xA;@end&#xA;&#xA;@implementation OrderModel&#xA;&#xA;+ (JSONKeyMapper *)keyMapper&#xA;{&#xA;&#x9;return [JSONKeyMapper mapperForSnakeCase];&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional properties (i.e. can be missing or null)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;id&#34;: 123,&#xA;&#x9;&#34;name&#34;: null,&#xA;&#x9;&#34;price&#34;: 12.95&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface ProductModel : JSONModel&#xA;@property (nonatomic) NSInteger id;&#xA;@property (nonatomic) NSString &amp;lt;Optional&amp;gt; *name;&#xA;@property (nonatomic) float price;&#xA;@property (nonatomic) NSNumber &amp;lt;Optional&amp;gt; *uuid;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ignored properties (i.e. JSONModel completely ignores them)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;id&#34;: 123,&#xA;&#x9;&#34;name&#34;: null&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface ProductModel : JSONModel&#xA;@property (nonatomic) NSInteger id;&#xA;@property (nonatomic) NSString &amp;lt;Ignore&amp;gt; *customProperty;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Making scalar types optional&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;id&#34;: null&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface ProductModel : JSONModel&#xA;@property (nonatomic) NSInteger id;&#xA;@end&#xA;&#xA;@implementation ProductModel&#xA;&#xA;+ (BOOL)propertyIsOptional:(NSString *)propertyName&#xA;{&#xA;&#x9;if ([propertyName isEqualToString:@&#34;id&#34;])&#xA;&#x9;&#x9;return YES;&#xA;&#xA;&#x9;return NO;&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Export model to &lt;code&gt;NSDictionary&lt;/code&gt; or JSON&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ProductModel *pm = [ProductModel new];&#xA;pm.name = @&#34;Some Name&#34;;&#xA;&#xA;// convert to dictionary&#xA;NSDictionary *dict = [pm toDictionary];&#xA;&#xA;// convert to json&#xA;NSString *string = [pm toJSONString];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom data transformers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface JSONValueTransformer (CustomTransformer)&#xA;@end&#xA;&#xA;@implementation JSONValueTransformer (CustomTransformer)&#xA;&#xA;- (NSDate *)NSDateFromNSString:(NSString *)string&#xA;{&#xA;&#x9;NSDateFormatter *formatter = [NSDateFormatter new];&#xA;&#x9;formatter.dateFormat = APIDateFormat;&#xA;&#x9;return [formatter dateFromString:string];&#xA;}&#xA;&#xA;- (NSString *)JSONObjectFromNSDate:(NSDate *)date&#xA;{&#xA;&#x9;NSDateFormatter *formatter = [NSDateFormatter new];&#xA;&#x9;formatter.dateFormat = APIDateFormat;&#xA;&#x9;return [formatter stringFromDate:date];&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom getters/setters&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface ProductModel : JSONModel&#xA;@property (nonatomic) NSInteger id;&#xA;@property (nonatomic) NSString *name;&#xA;@property (nonatomic) float price;&#xA;@property (nonatomic) NSLocale *locale;&#xA;@end&#xA;&#xA;@implementation ProductModel&#xA;&#xA;- (void)setLocaleWithNSString:(NSString *)string&#xA;{&#xA;&#x9;self.locale = [NSLocale localeWithLocaleIdentifier:string];&#xA;}&#xA;&#xA;- (void)setLocaleWithNSDictionary:(NSDictionary *)dictionary&#xA;{&#xA;&#x9;self.locale = [NSLocale localeWithLocaleIdentifier:dictionary[@&#34;identifier&#34;]];&#xA;}&#xA;&#xA;- (NSString *)JSONObjectForLocale&#xA;{&#xA;&#x9;return self.locale.localeIdentifier;&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom JSON validation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;&#xA;@interface ProductModel : JSONModel&#xA;@property (nonatomic) NSInteger id;&#xA;@property (nonatomic) NSString *name;&#xA;@property (nonatomic) float price;&#xA;@property (nonatomic) NSLocale *locale;&#xA;@property (nonatomic) NSNumber &amp;lt;Ignore&amp;gt; *minNameLength;&#xA;@end&#xA;&#xA;@implementation ProductModel&#xA;&#xA;- (BOOL)validate:(NSError **)error&#xA;{&#xA;&#x9;if (![super validate:error])&#xA;&#x9;&#x9;return NO;&#xA;&#xA;&#x9;if (self.name.length &amp;lt; self.minNameLength.integerValue)&#xA;&#x9;{&#xA;&#x9;&#x9;*error = [NSError errorWithDomain:@&#34;me.mycompany.com&#34; code:1 userInfo:nil];&#xA;&#x9;&#x9;return NO;&#xA;&#x9;}&#xA;&#xA;&#x9;return YES;&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT licensed - see &lt;a href=&#34;https://raw.githubusercontent.com/jsonmodel/jsonmodel/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We love pull requests! See &lt;a href=&#34;https://raw.githubusercontent.com/jsonmodel/jsonmodel/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for full details.&lt;/p&gt;</summary>
  </entry>
</feed>