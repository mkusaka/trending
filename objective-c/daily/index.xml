<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-22T01:42:22Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dpettigrew/DPStopwatchTimer</title>
    <updated>2024-04-22T01:42:22Z</updated>
    <id>tag:github.com,2024-04-22:/dpettigrew/DPStopwatchTimer</id>
    <link href="https://github.com/dpettigrew/DPStopwatchTimer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple stopwatch class with start, stop, reset and lap functions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DPStopwatchTimer&lt;/h1&gt; &#xA;&lt;p&gt;A simple stopwatch class with start, stop, reset and lap functions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CoderMJLee/MJExtension</title>
    <updated>2024-04-22T01:42:22Z</updated>
    <id>tag:github.com,2024-04-22:/CoderMJLee/MJExtension</id>
    <link href="https://github.com/CoderMJLee/MJExtension" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast, convenient and nonintrusive conversion framework between JSON and model. Your model class doesn&#39;t need to extend any base class. You don&#39;t need to modify any model file.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MJExtension&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-supported-4BC51D.svg?style=flat&#34; alt=&#34;SPM supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/MJExtension&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/MJExtension.svg?sanitize=true&#34; alt=&#34;podversion&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/MJExtension.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A fast, convenient and nonintrusive conversion framework between JSON and model.&lt;/li&gt; &#xA; &lt;li&gt;转换速度快、使用简单方便的字典转模型框架&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CoderMJLee/MJExtension/releases&#34;&gt;📜✍🏻&lt;strong&gt;Release Notes&lt;/strong&gt;: more details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#Getting_Started&#34;&gt;Getting Started 【开始使用】&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#Features&#34;&gt;Features 【能做什么】&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#Installation&#34;&gt;Installation 【安装】&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#Examples&#34;&gt;Examples 【示例】&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#usage_in_swift&#34;&gt;Usage in Swift&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#JSON_Model&#34;&gt;JSON -&amp;gt; Model&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#JSONString_Model&#34;&gt;JSONString -&amp;gt; Model&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#Model_contains_model&#34;&gt;Model contains model&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#Model_contains_model_array&#34;&gt;Model contains model-array&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#Model_name_JSON_key_mapping&#34;&gt;Model name - JSON key mapping&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#JSON_array_model_array&#34;&gt;JSON array -&amp;gt; model array&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#Model_JSON&#34;&gt;Model -&amp;gt; JSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#Model_array_JSON_array&#34;&gt;Model array -&amp;gt; JSON array&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#Core_Data&#34;&gt;Core Data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#Coding&#34;&gt;Coding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#SecureCoding&#34;&gt;Secure Coding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#Camel_underline&#34;&gt;Camel -&amp;gt; underline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#NSString_NSDate&#34;&gt;NSString -&amp;gt; NSDate, nil -&amp;gt; @&#34;&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#NSDate_NSString&#34;&gt;NSDate -&amp;gt; NSString&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/#More_use_cases&#34;&gt;More use cases&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;Getting_Started&#34;&gt;&lt;/a&gt; Getting Started【开始使用】&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Features&#34;&gt;&lt;/a&gt; Features【能做什么】&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MJExtension是一套字典和模型之间互相转换的超轻量级框架&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;JSON&lt;/code&gt; --&amp;gt; &lt;code&gt;Model&lt;/code&gt;、&lt;code&gt;Core Data Model&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JSONString&lt;/code&gt; --&amp;gt; &lt;code&gt;Model&lt;/code&gt;、&lt;code&gt;Core Data Model&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Model&lt;/code&gt;、&lt;code&gt;Core Data Model&lt;/code&gt; --&amp;gt; &lt;code&gt;JSON&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JSON Array&lt;/code&gt; --&amp;gt; &lt;code&gt;Model Array&lt;/code&gt;、&lt;code&gt;Core Data Model Array&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JSONString&lt;/code&gt; --&amp;gt; &lt;code&gt;Model Array&lt;/code&gt;、&lt;code&gt;Core Data Model Array&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Model Array&lt;/code&gt;、&lt;code&gt;Core Data Model Array&lt;/code&gt; --&amp;gt; &lt;code&gt;JSON Array&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Coding all properties of a model with only one line of code. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;只需要一行代码，就能实现模型的所有属性进行Coding / SecureCoding（归档和解档）&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Installation&#34;&gt;&lt;/a&gt; Installation【安装】&lt;/h3&gt; &#xA;&lt;h4&gt;CocoaPods【使用CocoaPods】&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;MJExtension&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;CoderMJLee/MJExtension&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;Released from &lt;a href=&#34;https://github.com/CoderMJLee/MJExtension/releases/&#34;&gt;&lt;code&gt;3.4.0&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Manually【手动导入】&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag all source files under folder &lt;code&gt;MJExtension&lt;/code&gt; to your project.【将&lt;code&gt;MJExtension&lt;/code&gt;文件夹中的所有源代码拽入项目中】&lt;/li&gt; &#xA; &lt;li&gt;Import the main header file：&lt;code&gt;#import &#34;MJExtension.h&#34;&lt;/code&gt;【导入主头文件：&lt;code&gt;#import &#34;MJExtension.h&#34;&lt;/code&gt;】&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;Examples&#34;&gt;&lt;/a&gt; Examples【示例】&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Add &lt;code&gt;MJKeyValue&lt;/code&gt; protocol to your model if needed【如果有需要, 请在模型中加入 &lt;code&gt;MJKeyValue&lt;/code&gt; 协议】&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;usage_in_swift&#34;&gt;&lt;/a&gt; Usage in Swift [关于在Swift中使用MJExtension] ‼️&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Example:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/MJExtensionTests/SwiftModel/MJTester.swift&#34;&gt;Model - MJTester.swift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CoderMJLee/MJExtension/master/MJExtensionTests/SwiftModelTests.swift&#34;&gt;Usage - SwiftModelTests.swift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@objc(MJTester)&#xA;@objcMembers&#xA;class MJTester: NSObject {&#xA;    // make sure to use `dynamic` attribute for basic type &amp;amp; must use as Non-Optional &amp;amp; must set initial value&#xA;    dynamic var isSpecialAgent: Bool = false&#xA;    dynamic var age: Int = 0&#xA;    &#xA;    var name: String?&#xA;    var identifier: String?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;@objc&lt;/code&gt; or &lt;code&gt;@objcMembers&lt;/code&gt; attributes should be added to class or property for declaration of Objc accessibility [在 Swift4 之后, 请在属性前加 &lt;code&gt;@objc&lt;/code&gt; 修饰或在类前增加 &lt;code&gt;@objcMembers&lt;/code&gt;. 以保证 Swift 的属性能够暴露给 Objc 使用. ]&lt;/li&gt; &#xA; &lt;li&gt;If you let &lt;code&gt;Bool&lt;/code&gt; &amp;amp; &lt;code&gt;Int&lt;/code&gt; as property type, make sure that using &lt;code&gt;dynamic&lt;/code&gt; to attribute it. It must be &lt;code&gt;Non-Optional&lt;/code&gt; type and assign &lt;code&gt;a default value&lt;/code&gt;.[如果要使用 &lt;code&gt;Bool&lt;/code&gt; 和 &lt;code&gt;Int&lt;/code&gt; 等 Swfit 专用基本类型, 请使用 &lt;code&gt;dynamic&lt;/code&gt; 关键字修饰, 类型为 &lt;code&gt;Non-Optional&lt;/code&gt;, 並且给定初始值.]&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;纯Swift版的JSON与Model转换框架已经开源上架&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/kakaopensource/KakaJSON&#34;&gt;KakaJSON&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/mjios/p/11352776.html&#34;&gt;中文教程&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;如果你的项目是用Swift写的Model，墙裂推荐使用&lt;a href=&#34;https://github.com/kakaopensource/KakaJSON&#34;&gt;KakaJSON&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;已经对各种常用的数据场景进行了大量的单元测试&lt;/li&gt; &#xA;    &lt;li&gt;简单易用、功能丰富、转换快速&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;JSON_Model&#34;&gt;&lt;/a&gt; The most simple JSON -&amp;gt; Model【最简单的字典转模型】&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;typedef enum {&#xA;    SexMale,&#xA;    SexFemale&#xA;} Sex;&#xA;&#xA;@interface User : NSObject&#xA;@property (copy, nonatomic) NSString *name;&#xA;@property (copy, nonatomic) NSString *icon;&#xA;@property (assign, nonatomic) unsigned int age;&#xA;@property (copy, nonatomic) NSString *height;&#xA;@property (strong, nonatomic) NSNumber *money;&#xA;@property (assign, nonatomic) Sex sex;&#xA;@property (assign, nonatomic, getter=isGay) BOOL gay;&#xA;@end&#xA;&#xA;/***********************************************/&#xA;&#xA;NSDictionary *dict = @{&#xA;    @&#34;name&#34; : @&#34;Jack&#34;,&#xA;    @&#34;icon&#34; : @&#34;lufy.png&#34;,&#xA;    @&#34;age&#34; : @20,&#xA;    @&#34;height&#34; : @&#34;1.55&#34;,&#xA;    @&#34;money&#34; : @100.9,&#xA;    @&#34;sex&#34; : @(SexFemale),&#xA;    @&#34;gay&#34; : @&#34;true&#34;&#xA;//   @&#34;gay&#34; : @&#34;1&#34;&#xA;//   @&#34;gay&#34; : @&#34;NO&#34;&#xA;};&#xA;&#xA;// JSON -&amp;gt; User&#xA;User *user = [User mj_objectWithKeyValues:dict];&#xA;&#xA;NSLog(@&#34;name=%@, icon=%@, age=%zd, height=%@, money=%@, sex=%d, gay=%d&#34;, user.name, user.icon, user.age, user.height, user.money, user.sex, user.gay);&#xA;// name=Jack, icon=lufy.png, age=20, height=1.550000, money=100.9, sex=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;JSONString_Model&#34;&gt;&lt;/a&gt; JSONString -&amp;gt; Model【JSON字符串转模型】&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 1.Define a JSONString&#xA;NSString *jsonString = @&#34;{\&#34;name\&#34;:\&#34;Jack\&#34;, \&#34;icon\&#34;:\&#34;lufy.png\&#34;, \&#34;age\&#34;:20}&#34;;&#xA;&#xA;// 2.JSONString -&amp;gt; User&#xA;User *user = [User mj_objectWithKeyValues:jsonString];&#xA;&#xA;// 3.Print user&#39;s properties&#xA;NSLog(@&#34;name=%@, icon=%@, age=%d&#34;, user.name, user.icon, user.age);&#xA;// name=Jack, icon=lufy.png, age=20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Model_contains_model&#34;&gt;&lt;/a&gt; Model contains model【模型中嵌套模型】&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface Status : NSObject&#xA;@property (copy, nonatomic) NSString *text;&#xA;@property (strong, nonatomic) User *user;&#xA;@property (strong, nonatomic) Status *retweetedStatus;&#xA;@end&#xA;&#xA;/***********************************************/&#xA;&#xA;NSDictionary *dict = @{&#xA;    @&#34;text&#34; : @&#34;Agree!Nice weather!&#34;,&#xA;    @&#34;user&#34; : @{&#xA;        @&#34;name&#34; : @&#34;Jack&#34;,&#xA;        @&#34;icon&#34; : @&#34;lufy.png&#34;&#xA;    },&#xA;    @&#34;retweetedStatus&#34; : @{&#xA;        @&#34;text&#34; : @&#34;Nice weather!&#34;,&#xA;        @&#34;user&#34; : @{&#xA;            @&#34;name&#34; : @&#34;Rose&#34;,&#xA;            @&#34;icon&#34; : @&#34;nami.png&#34;&#xA;        }&#xA;    }&#xA;};&#xA;&#xA;// JSON -&amp;gt; Status&#xA;Status *status = [Status mj_objectWithKeyValues:dict];&#xA;&#xA;NSString *text = status.text;&#xA;NSString *name = status.user.name;&#xA;NSString *icon = status.user.icon;&#xA;NSLog(@&#34;text=%@, name=%@, icon=%@&#34;, text, name, icon);&#xA;// text=Agree!Nice weather!, name=Jack, icon=lufy.png&#xA;&#xA;NSString *text2 = status.retweetedStatus.text;&#xA;NSString *name2 = status.retweetedStatus.user.name;&#xA;NSString *icon2 = status.retweetedStatus.user.icon;&#xA;NSLog(@&#34;text2=%@, name2=%@, icon2=%@&#34;, text2, name2, icon2);&#xA;// text2=Nice weather!, name2=Rose, icon2=nami.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Model_contains_model_array&#34;&gt;&lt;/a&gt; Model contains model-array【模型中有个数组属性，数组里面又要装着其他模型】&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface Ad : NSObject&#xA;@property (copy, nonatomic) NSString *image;&#xA;@property (copy, nonatomic) NSString *url;&#xA;@end&#xA;&#xA;@interface StatusResult : NSObject&#xA;/** Contatins status model */&#xA;@property (strong, nonatomic) NSMutableArray *statuses;&#xA;/** Contatins ad model */&#xA;@property (strong, nonatomic) NSArray *ads;&#xA;@property (strong, nonatomic) NSNumber *totalNumber;&#xA;@end&#xA;&#xA;/***********************************************/&#xA;&#xA;// Tell MJExtension what type of model will be contained in statuses and ads.&#xA;[StatusResult mj_setupObjectClassInArray:^NSDictionary *{&#xA;    return @{&#xA;               @&#34;statuses&#34; : @&#34;Status&#34;,&#xA;               // @&#34;statuses&#34; : [Status class],&#xA;               @&#34;ads&#34; : @&#34;Ad&#34;&#xA;               // @&#34;ads&#34; : [Ad class]&#xA;           };&#xA;}];&#xA;// Equals: StatusResult.m implements +mj_objectClassInArray method.&#xA;&#xA;NSDictionary *dict = @{&#xA;    @&#34;statuses&#34; : @[&#xA;                      @{&#xA;                          @&#34;text&#34; : @&#34;Nice weather!&#34;,&#xA;                          @&#34;user&#34; : @{&#xA;                              @&#34;name&#34; : @&#34;Rose&#34;,&#xA;                              @&#34;icon&#34; : @&#34;nami.png&#34;&#xA;                          }&#xA;                      },&#xA;                      @{&#xA;                          @&#34;text&#34; : @&#34;Go camping tomorrow!&#34;,&#xA;                          @&#34;user&#34; : @{&#xA;                              @&#34;name&#34; : @&#34;Jack&#34;,&#xA;                              @&#34;icon&#34; : @&#34;lufy.png&#34;&#xA;                          }&#xA;                      }&#xA;                  ],&#xA;    @&#34;ads&#34; : @[&#xA;                 @{&#xA;                     @&#34;image&#34; : @&#34;ad01.png&#34;,&#xA;                     @&#34;url&#34; : @&#34;http://www.ad01.com&#34;&#xA;                 },&#xA;                 @{&#xA;                     @&#34;image&#34; : @&#34;ad02.png&#34;,&#xA;                     @&#34;url&#34; : @&#34;http://www.ad02.com&#34;&#xA;                 }&#xA;             ],&#xA;    @&#34;totalNumber&#34; : @&#34;2014&#34;&#xA;};&#xA;&#xA;// JSON -&amp;gt; StatusResult&#xA;StatusResult *result = [StatusResult mj_objectWithKeyValues:dict];&#xA;&#xA;NSLog(@&#34;totalNumber=%@&#34;, result.totalNumber);&#xA;// totalNumber=2014&#xA;&#xA;// Printing&#xA;for (Status *status in result.statuses) {&#xA;    NSString *text = status.text;&#xA;    NSString *name = status.user.name;&#xA;    NSString *icon = status.user.icon;&#xA;    NSLog(@&#34;text=%@, name=%@, icon=%@&#34;, text, name, icon);&#xA;}&#xA;// text=Nice weather!, name=Rose, icon=nami.png&#xA;// text=Go camping tomorrow!, name=Jack, icon=lufy.png&#xA;&#xA;// Printing&#xA;for (Ad *ad in result.ads) {&#xA;    NSLog(@&#34;image=%@, url=%@&#34;, ad.image, ad.url);&#xA;}&#xA;// image=ad01.png, url=http://www.ad01.com&#xA;// image=ad02.png, url=http://www.ad02.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Model_name_JSON_key_mapping&#34;&gt;&lt;/a&gt; Model name - JSON key mapping【模型中的属性名和字典中的key不相同(或者需要多级映射)】&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface Bag : NSObject&#xA;@property (copy, nonatomic) NSString *name;&#xA;@property (assign, nonatomic) double price;&#xA;@end&#xA;&#xA;@interface Student : NSObject&#xA;@property (copy, nonatomic) NSString *ID;&#xA;@property (copy, nonatomic) NSString *desc;&#xA;@property (copy, nonatomic) NSString *nowName;&#xA;@property (copy, nonatomic) NSString *oldName;&#xA;@property (copy, nonatomic) NSString *nameChangedTime;&#xA;@property (strong, nonatomic) Bag *bag;&#xA;@end&#xA;&#xA;/***********************************************/&#xA;&#xA;// How to map&#xA;[Student mj_setupReplacedKeyFromPropertyName:^NSDictionary *{&#xA;    return @{&#xA;               @&#34;ID&#34; : @&#34;id&#34;,&#xA;               @&#34;desc&#34; : @&#34;description&#34;,&#xA;               @&#34;oldName&#34; : @&#34;name.oldName&#34;,&#xA;               @&#34;nowName&#34; : @&#34;name.newName&#34;,&#xA;               @&#34;nameChangedTime&#34; : @&#34;name.info[1].nameChangedTime&#34;,&#xA;               @&#34;bag&#34; : @&#34;other.bag&#34;&#xA;           };&#xA;}];&#xA;// Equals: Student.m implements +mj_replacedKeyFromPropertyName method.&#xA;&#xA;NSDictionary *dict = @{&#xA;    @&#34;id&#34; : @&#34;20&#34;,&#xA;    @&#34;description&#34; : @&#34;kids&#34;,&#xA;    @&#34;name&#34; : @{&#xA;        @&#34;newName&#34; : @&#34;lufy&#34;,&#xA;        @&#34;oldName&#34; : @&#34;kitty&#34;,&#xA;        @&#34;info&#34; : @[&#xA;        &#x9;&#x9; @&#34;test-data&#34;,&#xA;        &#x9;&#x9; @{&#xA;            &#x9;             @&#34;nameChangedTime&#34; : @&#34;2013-08&#34;&#xA;                         }&#xA;                  ]&#xA;    },&#xA;    @&#34;other&#34; : @{&#xA;        @&#34;bag&#34; : @{&#xA;            @&#34;name&#34; : @&#34;a red bag&#34;,&#xA;            @&#34;price&#34; : @100.7&#xA;        }&#xA;    }&#xA;};&#xA;&#xA;// JSON -&amp;gt; Student&#xA;Student *stu = [Student mj_objectWithKeyValues:dict];&#xA;&#xA;// Printing&#xA;NSLog(@&#34;ID=%@, desc=%@, oldName=%@, nowName=%@, nameChangedTime=%@&#34;,&#xA;      stu.ID, stu.desc, stu.oldName, stu.nowName, stu.nameChangedTime);&#xA;// ID=20, desc=kids, oldName=kitty, nowName=lufy, nameChangedTime=2013-08&#xA;NSLog(@&#34;bagName=%@, bagPrice=%f&#34;, stu.bag.name, stu.bag.price);&#xA;// bagName=a red bag, bagPrice=100.700000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;JSON_array_model_array&#34;&gt;&lt;/a&gt; JSON array -&amp;gt; model array【将一个字典数组转成模型数组】&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSArray *dictArray = @[&#xA;                         @{&#xA;                             @&#34;name&#34; : @&#34;Jack&#34;,&#xA;                             @&#34;icon&#34; : @&#34;lufy.png&#34;&#xA;                         },&#xA;                         @{&#xA;                             @&#34;name&#34; : @&#34;Rose&#34;,&#xA;                             @&#34;icon&#34; : @&#34;nami.png&#34;&#xA;                         }&#xA;                     ];&#xA;&#xA;// JSON array -&amp;gt; User array&#xA;NSArray *userArray = [User mj_objectArrayWithKeyValuesArray:dictArray];&#xA;&#xA;// Printing&#xA;for (User *user in userArray) {&#xA;    NSLog(@&#34;name=%@, icon=%@&#34;, user.name, user.icon);&#xA;}&#xA;// name=Jack, icon=lufy.png&#xA;// name=Rose, icon=nami.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Model_JSON&#34;&gt;&lt;/a&gt; Model -&amp;gt; JSON【将一个模型转成字典】&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// New model&#xA;User *user = [[User alloc] init];&#xA;user.name = @&#34;Jack&#34;;&#xA;user.icon = @&#34;lufy.png&#34;;&#xA;&#xA;Status *status = [[Status alloc] init];&#xA;status.user = user;&#xA;status.text = @&#34;Nice mood!&#34;;&#xA;&#xA;// Status -&amp;gt; JSON&#xA;NSDictionary *statusDict = status.mj_keyValues;&#xA;NSLog(@&#34;%@&#34;, statusDict);&#xA;/*&#xA; {&#xA; text = &#34;Nice mood!&#34;;&#xA; user =     {&#xA; icon = &#34;lufy.png&#34;;&#xA; name = Jack;&#xA; };&#xA; }&#xA; */&#xA;&#xA;// More complex situation&#xA;Student *stu = [[Student alloc] init];&#xA;stu.ID = @&#34;123&#34;;&#xA;stu.oldName = @&#34;rose&#34;;&#xA;stu.nowName = @&#34;jack&#34;;&#xA;stu.desc = @&#34;handsome&#34;;&#xA;stu.nameChangedTime = @&#34;2018-09-08&#34;;&#xA;&#xA;Bag *bag = [[Bag alloc] init];&#xA;bag.name = @&#34;a red bag&#34;;&#xA;bag.price = 205;&#xA;stu.bag = bag;&#xA;&#xA;NSDictionary *stuDict = stu.mj_keyValues;&#xA;NSLog(@&#34;%@&#34;, stuDict);&#xA;/*&#xA;{&#xA;    ID = 123;&#xA;    bag =     {&#xA;        name = &#34;\U5c0f\U4e66\U5305&#34;;&#xA;        price = 205;&#xA;    };&#xA;    desc = handsome;&#xA;    nameChangedTime = &#34;2018-09-08&#34;;&#xA;    nowName = jack;&#xA;    oldName = rose;&#xA;}&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Model_array_JSON_array&#34;&gt;&lt;/a&gt; Model array -&amp;gt; JSON array【将一个模型数组转成字典数组】&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// New model array&#xA;User *user1 = [[User alloc] init];&#xA;user1.name = @&#34;Jack&#34;;&#xA;user1.icon = @&#34;lufy.png&#34;;&#xA;&#xA;User *user2 = [[User alloc] init];&#xA;user2.name = @&#34;Rose&#34;;&#xA;user2.icon = @&#34;nami.png&#34;;&#xA;&#xA;NSArray *userArray = @[user1, user2];&#xA;&#xA;// Model array -&amp;gt; JSON array&#xA;NSArray *dictArray = [User mj_keyValuesArrayWithObjectArray:userArray];&#xA;NSLog(@&#34;%@&#34;, dictArray);&#xA;/*&#xA; (&#xA; {&#xA; icon = &#34;lufy.png&#34;;&#xA; name = Jack;&#xA; },&#xA; {&#xA; icon = &#34;nami.png&#34;;&#xA; name = Rose;&#xA; }&#xA; )&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Core_Data&#34;&gt;&lt;/a&gt; Core Data&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func json2CoreDataObject() {&#xA;    context.performAndWait {&#xA;        let object = MJCoreDataTester.mj_object(withKeyValues: Values.testJSONObject, context: context)&#xA;        // use the object&#xA;    }&#xA;}&#xA;&#xA;func coreDataObject2JSON() {&#xA;    context.performAndWait {        &#xA;        let dict = coreDataObject.mj_keyValues()&#xA;        // use dict&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Coding&#34;&gt;&lt;/a&gt; Coding (Archive &amp;amp; Unarchive methods are deprecated in iOS 12)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &#34;MJExtension.h&#34;&#xA;&#xA;@implementation MJBag&#xA;// NSCoding Implementation&#xA;MJCodingImplementation&#xA;@end&#xA;&#xA;/***********************************************/&#xA;&#xA;// what properties not to be coded&#xA;[MJBag mj_setupIgnoredCodingPropertyNames:^NSArray *{&#xA;    return @[@&#34;name&#34;];&#xA;}];&#xA;// Equals: MJBag.m implements +mj_ignoredCodingPropertyNames method.&#xA;&#xA;// Create model&#xA;MJBag *bag = [[MJBag alloc] init];&#xA;bag.name = @&#34;Red bag&#34;;&#xA;bag.price = 200.8;&#xA;&#xA;NSString *file = [NSHomeDirectory() stringByAppendingPathComponent:@&#34;Desktop/bag.data&#34;];&#xA;// Encoding by archiving&#xA;[NSKeyedArchiver archiveRootObject:bag toFile:file];&#xA;&#xA;// Decoding by unarchiving&#xA;MJBag *decodedBag = [NSKeyedUnarchiver unarchiveObjectWithFile:file];&#xA;NSLog(@&#34;name=%@, price=%f&#34;, decodedBag.name, decodedBag.price);&#xA;// name=(null), price=200.800000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;SecureCoding&#34;&gt;&lt;/a&gt; Secure Coding&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;MJSecureCodingImplementation(class, isSupport)&lt;/code&gt; macro.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@import MJExtension;&#xA;&#xA;// NSSecureCoding Implementation&#xA;MJSecureCodingImplementation(MJBag, YES)&#xA;&#xA;@implementation MJBag&#xA;@end&#xA;&#xA; /***********************************************/&#xA;&#xA;// what properties not to be coded&#xA;[MJBag mj_setupIgnoredCodingPropertyNames:^NSArray *{&#xA;    return @[@&#34;name&#34;];&#xA;}];&#xA;// Equals: MJBag.m implements +mj_ignoredCodingPropertyNames method.&#xA;&#xA;// Create model&#xA;MJBag *bag = [[MJBag alloc] init];&#xA;bag.name = @&#34;Red bag&#34;;&#xA;bag.price = 200.8;&#xA;bag.isBig = YES;&#xA;bag.weight = 200;&#xA;&#xA;NSString *file = [NSTemporaryDirectory() stringByAppendingPathComponent:@&#34;bag.data&#34;];&#xA;&#xA;NSError *error = nil;&#xA;// Encoding by archiving&#xA;NSData *data = [NSKeyedArchiver archivedDataWithRootObject:bag requiringSecureCoding:YES error:&amp;amp;error];&#xA;[data writeToFile:file atomically:true];&#xA;&#xA;// Decoding by unarchiving&#xA;NSData *readData = [NSFileManager.defaultManager contentsAtPath:file];&#xA;error = nil;&#xA;MJBag *decodedBag = [NSKeyedUnarchiver unarchivedObjectOfClass:MJBag.class fromData:readData error:&amp;amp;error];&#xA;MJExtensionLog(@&#34;name=%@, price=%f&#34;, decodedBag.name, decodedBag.price);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Camel_underline&#34;&gt;&lt;/a&gt; Camel -&amp;gt; underline【统一转换属性名（比如驼峰转下划线）】&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Dog&#xA;#import &#34;MJExtension.h&#34;&#xA;&#xA;@implementation Dog&#xA;+ (NSString *)mj_replacedKeyFromPropertyName121:(NSString *)propertyName&#xA;{&#xA;    // nickName -&amp;gt; nick_name&#xA;    return [propertyName mj_underlineFromCamel];&#xA;}&#xA;@end&#xA;&#xA;// NSDictionary&#xA;NSDictionary *dict = @{&#xA;                       @&#34;nick_name&#34; : @&#34;旺财&#34;,&#xA;                       @&#34;sale_price&#34; : @&#34;10.5&#34;,&#xA;                       @&#34;run_speed&#34; : @&#34;100.9&#34;&#xA;                       };&#xA;// NSDictionary -&amp;gt; Dog&#xA;Dog *dog = [Dog mj_objectWithKeyValues:dict];&#xA;&#xA;// printing&#xA;NSLog(@&#34;nickName=%@, scalePrice=%f runSpeed=%f&#34;, dog.nickName, dog.salePrice, dog.runSpeed);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;NSString_NSDate&#34;&gt;&lt;/a&gt; NSString -&amp;gt; NSDate, nil -&amp;gt; @&#34;&#34;【过滤字典的值（比如字符串日期处理为NSDate、字符串nil处理为@&#34;&#34;）】&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Book&#xA;#import &#34;MJExtension.h&#34;&#xA;&#xA;@implementation Book&#xA;- (id)mj_newValueFromOldValue:(id)oldValue property:(MJProperty *)property&#xA;{&#xA;    if ([property.name isEqualToString:@&#34;publisher&#34;]) {&#xA;        if (oldValue == nil) return @&#34;&#34;;&#xA;    } else if (property.type.typeClass == [NSDate class]) {&#xA;        NSDateFormatter *fmt = [[NSDateFormatter alloc] init];&#xA;        fmt.dateFormat = @&#34;yyyy-MM-dd&#34;;&#xA;        return [fmt dateFromString:oldValue];&#xA;    }&#xA;&#xA;    return oldValue;&#xA;}&#xA;@end&#xA;&#xA;// NSDictionary&#xA;NSDictionary *dict = @{&#xA;                       @&#34;name&#34; : @&#34;5分钟突破iOS开发&#34;,&#xA;                       @&#34;publishedTime&#34; : @&#34;2011-09-10&#34;&#xA;                       };&#xA;// NSDictionary -&amp;gt; Book&#xA;Book *book = [Book mj_objectWithKeyValues:dict];&#xA;&#xA;// printing&#xA;NSLog(@&#34;name=%@, publisher=%@, publishedTime=%@&#34;, book.name, book.publisher, book.publishedTime);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;NSDate_NSString&#34;&gt;&lt;/a&gt; NSDate -&amp;gt; NSString【模型转字典时, 修改 Date 类型至 String】&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)mj_objectDidConvertToKeyValues:(NSMutableDictionary *)keyValues {&#xA;    // NSDateFormatter *formatter = [[NSDateFormatter alloc] init];&#xA;    // formatter.dateFormat = @&#34;yyy-MM-dd&#34;;&#xA;    // should use sharedFormatter for better performance  &#xA;    keyValues[@&#34;publishedTime&#34;] = [sharedFormatter stringFromDate:self.publishedTime];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;More_use_cases&#34;&gt;&lt;/a&gt; More use cases【更多用法】&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please reference to &lt;code&gt;NSObject+MJKeyValue.h&lt;/code&gt; and &lt;code&gt;NSObject+MJCoding.h&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;期待&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果在使用过程中遇到BUG，希望你能Issues我，谢谢（或者尝试下载最新的框架代码看看BUG修复没有）&lt;/li&gt; &#xA; &lt;li&gt;如果在使用过程中发现功能不够用，希望你能Issues我，我非常想为这个框架增加更多好用的功能，谢谢&lt;/li&gt; &#xA; &lt;li&gt;如果你想为MJExtension输出代码，请拼命Pull Requests我&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>