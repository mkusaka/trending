<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-28T01:41:56Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PerimeterX/px-iOS-Framework</title>
    <updated>2023-03-28T01:41:56Z</updated>
    <id>tag:github.com,2023-03-28:/PerimeterX/px-iOS-Framework</id>
    <link href="https://github.com/PerimeterX/px-iOS-Framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PerimeterX iOS framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/perimeterx-logos/primary_logo_red_cropped.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;About &lt;a href=&#34;https://www.perimeterx.com/&#34;&gt;PerimeterX&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;PerimeterX is the leading provider of application security solutions that keep your business safe in the digital world. Delivered as a service, the company’s Bot Defender, Code Defender and Page Defender solutions detect risks to your web applications and proactively manage them, freeing you to focus on growth and innovation. The world’s largest and most reputable websites and mobile applications count on PerimeterX to safeguard their consumers’ digital experience. PerimeterX is headquartered in San Mateo, California and at &lt;a href=&#34;https://www.perimeterx.com&#34;&gt;www.perimeterx.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Integration with the SDK&lt;/h2&gt; &#xA;&lt;p&gt;The PerimeterX iOS SDK works by constantly profiling and evaluating device behavior to ensure that the connections to your mobile APIs and services are genuine.&lt;/p&gt; &#xA;&lt;p&gt;This process is complex and detailed yet only requires initialization to manage a set of secure HTTP headers which are added to all HTTP and HTTPS requests made by the mobile application to the origin server. These HTTP headers are refreshed on a regular basis by the SDK as it is profiling the end-user’s mobile device.&lt;/p&gt; &#xA;&lt;p&gt;The full documentation can be found &lt;a href=&#34;https://docs.perimeterx.com/pxconsole/docs/sdk-ios&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>samvermette/SVPullToRefresh</title>
    <updated>2023-03-28T01:41:56Z</updated>
    <id>tag:github.com,2023-03-28:/samvermette/SVPullToRefresh</id>
    <link href="https://github.com/samvermette/SVPullToRefresh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Give pull-to-refresh &amp; infinite scrolling to any UIScrollView with 1 line of code.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SVPullToRefresh + SVInfiniteScrolling&lt;/h1&gt; &#xA;&lt;p&gt;These UIScrollView categories makes it super easy to add pull-to-refresh and infinite scrolling fonctionalities to any UIScrollView (or any of its subclass). Instead of relying on delegates and/or subclassing &lt;code&gt;UIViewController&lt;/code&gt;, SVPullToRefresh uses the Objective-C runtime to add the following 3 methods to &lt;code&gt;UIScrollView&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)addPullToRefreshWithActionHandler:(void (^)(void))actionHandler;&#xA;- (void)addPullToRefreshWithActionHandler:(void (^)(void))actionHandler position:(SVPullToRefreshPosition)position;&#xA;- (void)addInfiniteScrollingWithActionHandler:(void (^)(void))actionHandler;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;From CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;pod &#39;SVPullToRefresh&#39;&lt;/code&gt; to your Podfile or &lt;code&gt;pod &#39;SVPullToRefresh&#39;, :head&lt;/code&gt; if you&#39;re feeling adventurous.&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Important note if your project doesn&#39;t use ARC&lt;/strong&gt;: you must add the &lt;code&gt;-fobjc-arc&lt;/code&gt; compiler flag to &lt;code&gt;UIScrollView+SVPullToRefresh.m&lt;/code&gt; and &lt;code&gt;UIScrollView+SVInfiniteScrolling.m&lt;/code&gt; in Target Settings &amp;gt; Build Phases &amp;gt; Compile Sources.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag the &lt;code&gt;SVPullToRefresh/SVPullToRefresh&lt;/code&gt; folder into your project.&lt;/li&gt; &#xA; &lt;li&gt;Add the &lt;strong&gt;QuartzCore&lt;/strong&gt; framework to your project.&lt;/li&gt; &#xA; &lt;li&gt;Import &lt;code&gt;UIScrollView+SVPullToRefresh.h&lt;/code&gt; and/or &lt;code&gt;UIScrollView+SVInfiniteScrolling.h&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;(see sample Xcode project in &lt;code&gt;/Demo&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Adding Pull to Refresh&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[tableView addPullToRefreshWithActionHandler:^{&#xA;    // prepend data to dataSource, insert cells at top of table view&#xA;    // call [tableView.pullToRefreshView stopAnimating] when done&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you want pull to refresh from the bottom&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[tableView addPullToRefreshWithActionHandler:^{&#xA;    // prepend data to dataSource, insert cells at top of table view&#xA;    // call [tableView.pullToRefreshView stopAnimating] when done&#xA;} position:SVPullToRefreshPositionBottom];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you’d like to programmatically trigger the refresh (for instance in &lt;code&gt;viewDidAppear:&lt;/code&gt;), you can do so with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[tableView triggerPullToRefresh];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can temporarily hide the pull to refresh view by setting the &lt;code&gt;showsPullToRefresh&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;tableView.showsPullToRefresh = NO;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customization&lt;/h4&gt; &#xA;&lt;p&gt;The pull to refresh view can be customized using the following properties/methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@property (nonatomic, strong) UIColor *arrowColor;&#xA;@property (nonatomic, strong) UIColor *textColor;&#xA;@property (nonatomic, readwrite) UIActivityIndicatorViewStyle activityIndicatorViewStyle;&#xA;&#xA;- (void)setTitle:(NSString *)title forState:(SVPullToRefreshState)state;&#xA;- (void)setSubtitle:(NSString *)subtitle forState:(SVPullToRefreshState)state;&#xA;- (void)setCustomView:(UIView *)view forState:(SVPullToRefreshState)state;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access these properties through your scroll view&#39;s &lt;code&gt;pullToRefreshView&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;For instance, you would set the &lt;code&gt;arrowColor&lt;/code&gt; property using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;tableView.pullToRefreshView.arrowColor = [UIColor whiteColor];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding Infinite Scrolling&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[tableView addInfiniteScrollingWithActionHandler:^{&#xA;    // append data to data source, insert new cells at the end of table view&#xA;    // call [tableView.infiniteScrollingView stopAnimating] when done&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you’d like to programmatically trigger the loading (for instance in &lt;code&gt;viewDidAppear:&lt;/code&gt;), you can do so with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[tableView triggerInfiniteScrolling];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can temporarily hide the infinite scrolling view by setting the &lt;code&gt;showsInfiniteScrolling&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;tableView.showsInfiniteScrolling = NO;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customization&lt;/h4&gt; &#xA;&lt;p&gt;The infinite scrolling view can be customized using the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)setActivityIndicatorViewStyle:(UIActivityIndicatorViewStyle)activityIndicatorViewStyle;&#xA;- (void)setCustomView:(UIView *)view forState:(SVInfiniteScrollingState)state;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access these properties through your scroll view&#39;s &lt;code&gt;infiniteScrollingView&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;h2&gt;Under the hood&lt;/h2&gt; &#xA;&lt;p&gt;SVPullToRefresh extends &lt;code&gt;UIScrollView&lt;/code&gt; by adding new public methods as well as a dynamic properties.&lt;/p&gt; &#xA;&lt;p&gt;It uses key-value observing to track the scrollView&#39;s &lt;code&gt;contentOffset&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;SVPullToRefresh is brought to you by &lt;a href=&#34;http://samvermette.com&#34;&gt;Sam Vermette&lt;/a&gt; and &lt;a href=&#34;https://github.com/samvermette/SVPullToRefresh/contributors&#34;&gt;contributors to the project&lt;/a&gt;. If you have feature suggestions or bug reports, feel free to help out by sending pull requests or by &lt;a href=&#34;https://github.com/samvermette/SVPullToRefresh/issues/new&#34;&gt;creating new issues&lt;/a&gt;. If you&#39;re using SVPullToRefresh in your project, attribution would be nice.&lt;/p&gt; &#xA;&lt;p&gt;Big thanks to &lt;a href=&#34;http://twitter.com/seb_morel&#34;&gt;@seb_morel&lt;/a&gt; for his &lt;a href=&#34;http://cocoaheadsmtl.s3.amazonaws.com/demistifying-runtime.pdf&#34;&gt;Demistifying the Objective-C runtime&lt;/a&gt; talk which really helped for this project.&lt;/p&gt; &#xA;&lt;p&gt;Hat tip to &lt;a href=&#34;http://twitter.com/lorenb&#34;&gt;Loren Brichter&lt;/a&gt; for inventing pull-to-refresh.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebookarchive/xctool</title>
    <updated>2023-03-28T01:41:56Z</updated>
    <id>tag:github.com,2023-03-28:/facebookarchive/xctool</id>
    <link href="https://github.com/facebookarchive/xctool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extension for Apple&#39;s xcodebuild that makes it easier to test iOS and macOS apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xctool&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;xctool&lt;/strong&gt; is an extension for Apple&#39;s &lt;strong&gt;xcodebuild&lt;/strong&gt; which makes it easier to test iOS and Mac products. It&#39;s especially helpful for continuous integration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/facebook/xctool&#34;&gt;&lt;img src=&#34;https://travis-ci.org/facebook/xctool.png?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;[ &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#requirements&#34;&gt;Requirements&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#continuous-integration&#34;&gt;Continuous Integration&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#reporters&#34;&gt;Reporters&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#configuration-xctool-args&#34;&gt;Configuration&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#contributing&#34;&gt;Contributing&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#known-issues--tips&#34;&gt;Known Issues &amp;amp; Tips&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#license&#34;&gt;License&lt;/a&gt; ]&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;xctool&lt;/strong&gt; is drop-in replacement for &lt;code&gt;xcodebuild test&lt;/code&gt; that adds a few extra features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Faster, parallelized test runs.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;xctool&lt;/em&gt; can optionally run all of your test bundles in parallel, speeding up your test runs significantly. At Facebook, we&#39;ve seen 2x and 3x speed ups by parallelizing our runs.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;-parallelize&lt;/code&gt; option with &lt;em&gt;run-tests&lt;/em&gt; or &lt;em&gt;test&lt;/em&gt; to enable. See &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#parallelizing-test-runs&#34;&gt;Parallelizing Test Runs&lt;/a&gt; for more info.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Structured output of test results.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;xctool&lt;/em&gt; captures all test results as structured JSON objects. If you&#39;re building a continuous integration system, this means you don&#39;t have to regex parse &lt;em&gt;xcodebuild&lt;/em&gt; output anymore.&lt;/p&gt; &lt;p&gt;Try one of the &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#reporters&#34;&gt;Reporters&lt;/a&gt; to customize the output or get the full event stream with the &lt;code&gt;-reporter json-stream&lt;/code&gt; option.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Human-friendly, ANSI-colored output.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;xcodebuild&lt;/em&gt; is incredibly verbose, printing the full compile command and output for every source file. By default, &lt;em&gt;xctool&lt;/em&gt; is only verbose if something goes wrong, making it much easier to identify where the problems are.&lt;/p&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://fpotter_public.s3.amazonaws.com/xctool-uicatalog.gif&#34; alt=&#34;pretty output&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Written in Objective-C.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;xctool&lt;/em&gt; is written in Objective-C. Mac OS X and iOS developers can easily submit new features and fix any bugs they may encounter without learning a new language. We very much welcome pull requests!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Support for building projects with xctool is deprecated and will not be updated to support future versions of Xcode. We suggest moving to &lt;code&gt;xcodebuild&lt;/code&gt; (with &lt;a href=&#34;https://github.com/supermarin/xcpretty&#34;&gt;xcpretty&lt;/a&gt;) for simple needs, or &lt;a href=&#34;https://github.com/facebook/xcbuild&#34;&gt;xcbuild&lt;/a&gt; for more involved requirements. xctool will continue to support testing (see above).&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 7 or higher&lt;/li&gt; &#xA; &lt;li&gt;You&#39;ll need Xcode&#39;s Command Line Tools installed. From Xcode, install via &lt;em&gt;Xcode → Preferences → Downloads&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;xctool can be installed from homebrew via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install xctool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or can be downloaded and run via the xctool.sh command.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;xctool&#39;s commands and options are mostly a superset of xcodebuild&#39;s. In most cases, you can just swap &lt;strong&gt;xcodebuild&lt;/strong&gt; with &lt;strong&gt;xctool&lt;/strong&gt; and things will run as expected but with more attractive output.&lt;/p&gt; &#xA;&lt;p&gt;You can always get help and a full list of options with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh -help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;xctool&lt;/em&gt; has a &lt;strong&gt;run-tests&lt;/strong&gt; action which knows how to run the tests in your scheme. You can optionally limit what tests are run or change the SDK they&#39;re run against.&lt;/p&gt; &#xA;&lt;p&gt;To run all tests in your scheme, you would use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run just the tests in a specific target, use the &lt;code&gt;-only&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -only SomeTestTarget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can go further and just run a specific test class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -only SomeTestTarget:SomeTestClass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, even further and run just a single test method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -only SomeTestTarget:SomeTestClass/testSomeMethod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify prefix matching for classes or test methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -only SomeTestTarget:SomeTestClassPrefix*,SomeTestClass/testSomeMethodPrefix*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can omit a specific item by prefix matching for classes or test methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -omit SomeTestTarget:SomeTestClass/testSomeMethodPrefix*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run tests against a different SDK:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -test-sdk iphonesimulator5.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally you can specify &lt;code&gt;-testTimeout&lt;/code&gt; when running tests. When an individual test hits this timeout, it is considered a failure rather than waiting indefinitely. This can prevent your test run from deadlocking forever due to misbehaving tests.&lt;/p&gt; &#xA;&lt;p&gt;By default application tests will wait at most 30 seconds for the simulator to launch. If you need to change this timeout, use the &lt;code&gt;-launch-timeout&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;Building Tests&lt;/h4&gt; &#xA;&lt;p&gt;Before running tests you need to build them. You can use &lt;strong&gt;xcodebuild&lt;/strong&gt;, &lt;strong&gt;xcbuild&lt;/strong&gt; or &lt;strong&gt;Buck&lt;/strong&gt; to do that.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xcodebuild \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  build-for-testing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Xcode 7&lt;/h5&gt; &#xA;&lt;p&gt;If you are using Xcode 7 for building you can continue using xctool to build tests using &lt;strong&gt;build-tests&lt;/strong&gt; or just use &lt;strong&gt;test&lt;/strong&gt; actions to run tests.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  build-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally just build a single test target with the &lt;code&gt;-only&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  build-tests -only SomeTestTarget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Parallelizing Test Runs&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;xctool&lt;/em&gt; can optionally run unit tests in parallel, making better use of otherwise idle CPU cores. At Facebook, we&#39;ve seen 2x and 3x gains by parallelizing our test runs.&lt;/p&gt; &#xA;&lt;p&gt;To allow test bundles to run concurrently, use the &lt;code&gt;-parallelize&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -parallelize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above gives you parallelism, but you&#39;re bounded by your slowest test bundle. For example, if you had two test bundles (&#39;A&#39; and &#39;B&#39;), but &#39;B&#39; took 10 times as long to run because it contained 10 times as many tests, then the above parallelism won&#39;t help much.&lt;/p&gt; &#xA;&lt;p&gt;You can get further gains by breaking your test execution into buckets using the &lt;code&gt;-logicTestBucketSize&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  run-tests -parallelize -logicTestBucketSize 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will break your test execution into buckets of &lt;em&gt;20&lt;/em&gt; test cases each, and those bundles will be run concurrently. If some of your test bundles are much larger than others, this will help even things out and speed up the overall test run.&lt;/p&gt; &#xA;&lt;h3&gt;Building (Xcode 7 only)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Support for building projects with xctool is deprecated and isn&#39;t supported in Xcode 8 and later. We suggest moving to &lt;code&gt;xcodebuild&lt;/code&gt; (with &lt;a href=&#34;https://github.com/supermarin/xcpretty&#34;&gt;xcpretty&lt;/a&gt;) for simple needs, or &lt;a href=&#34;https://github.com/facebook/xcbuild&#34;&gt;xcbuild&lt;/a&gt; for more involved requirements. Alternatively, you can use &lt;a href=&#34;https://buckbuild.com/&#34;&gt;Buck&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Building products with &lt;em&gt;xctool&lt;/em&gt; is the same as building them with &lt;em&gt;xcodebuild&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you use workspaces and schemes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use projects and schemes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -project YourProject.xcodeproj \&#xA;  -scheme YourScheme \&#xA;  build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All of the common options like &lt;code&gt;-configuration&lt;/code&gt;, &lt;code&gt;-sdk&lt;/code&gt;, &lt;code&gt;-arch&lt;/code&gt; work just as they do with &lt;em&gt;xcodebuild&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: &lt;em&gt;xctool&lt;/em&gt; doesn&#39;t support directly building targets using &lt;code&gt;-target&lt;/code&gt;; you must use schemes.&lt;/p&gt; &#xA;&lt;h2&gt;Continuous Integration&lt;/h2&gt; &#xA;&lt;p&gt;xctool is an excellent choice for running your tests under a continuous integration server such as &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; or &lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt;. To run tests within a continuous integration environment, you must create &lt;strong&gt;Shared Schemes&lt;/strong&gt; for your application target and ensure that all dependencies (such as CocoaPods) are added explicitly to the Scheme. To do so:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open up the &lt;strong&gt;Manage Schemes&lt;/strong&gt; sheet by selecting the &lt;strong&gt;Product&lt;/strong&gt; menu &amp;gt; &lt;strong&gt;Schemes&lt;/strong&gt; &amp;gt; &lt;strong&gt;Manage Schemes...&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Locate your application target in the list. Ensure that the &lt;strong&gt;Shared&lt;/strong&gt; checkbox in far right hand column of the sheet is checked.&lt;/li&gt; &#xA; &lt;li&gt;If your application or test targets include cross-project dependencies such as CocoaPods, then you will need to ensure that they have been configured as explicit dependencies. To do so: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Highlight your application target and hit the &lt;strong&gt;Edit...&lt;/strong&gt; button to open the Scheme editing sheet.&lt;/li&gt; &#xA;   &lt;li&gt;Click the &lt;strong&gt;Build&lt;/strong&gt; tab in the left-hand panel of the Scheme editor.&lt;/li&gt; &#xA;   &lt;li&gt;Click the &lt;strong&gt;+&lt;/strong&gt; button and add each dependency to the project. CocoaPods will appear as a static library named &lt;strong&gt;Pods&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Drag the dependency above your application target so that it is built first.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You will now have a new file in the &lt;strong&gt;xcshareddata/xcschemes&lt;/strong&gt; directory underneath your Xcode project. This is the shared Scheme that you just configured. Check this file into your repository and xctool will be able to find and execute your tests on the next CI build.&lt;/p&gt; &#xA;&lt;h3&gt;Example Travis CI Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; is a very popular continuous integration system offered for free to Open Source projects. It integrates well with Github, and it now uses &lt;em&gt;xctool&lt;/em&gt; as the default build and test tool for Objective-C projects. Once you have set up your shared Scheme for use with xctool, you will need to configure a &lt;code&gt;.travis.yml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using workspaces, your &lt;code&gt;.travis.yml&lt;/code&gt; might be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: objective-c&#xA;xcode_workspace: path/to/YourApp.xcworkspace&#xA;xcode_scheme: YourApp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using projects, your &lt;code&gt;.travis.yml&lt;/code&gt; might be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: objective-c&#xA;xcode_project: path/to/YourApp.xcodeproj&#xA;xcode_scheme: YourApp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more flexibility, you can also control how Travis installs and invokes xctool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: objective-c&#xA;before_install:&#xA;    - brew update&#xA;    - brew install xctool&#xA;script: xctool -workspace MyApp.xcworkspace -scheme MyApp test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can learn more about the Travis CI environment for iOS and OS X application by referring to the &lt;a href=&#34;http://about.travis-ci.org/docs/user/osx-ci-environment/&#34;&gt;About OS X Travis CI Environment&lt;/a&gt; document and find in-depth documentation for configuring your project by consulting the &lt;a href=&#34;http://about.travis-ci.org/docs/user/getting-started/&#34;&gt;Getting Started&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Reporters&lt;/h2&gt; &#xA;&lt;p&gt;xctool has reporters that output build and test results in different formats. If you do not specify any reporters yourself, xctool uses the &lt;code&gt;pretty&lt;/code&gt; and &lt;code&gt;user-notifications&lt;/code&gt; reporters by default. xctool also has these special rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overwrite is disabled on the &lt;code&gt;pretty&lt;/code&gt; reporter when xctool does not detect a TTY. This can be overridden by setting &lt;code&gt;XCTOOL_FORCE_TTY&lt;/code&gt; in the environment.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;user-notifications&lt;/code&gt; reporter will not be used if xctool detects that the build is being run by Travis CI, CircleCI, TeamCity, or Jenkins (i.e. &lt;code&gt;TRAVIS=true&lt;/code&gt;, &lt;code&gt;CIRCLECI=true&lt;/code&gt;, &lt;code&gt;TEAMCITY_VERSION&lt;/code&gt;, or &lt;code&gt;JENKINS_URL&lt;/code&gt; in the environment).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can choose your own reporters with the &lt;code&gt;-reporter&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  -reporter plain \&#xA;  build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, reporters output to standard out, but you can also direct the output to a file by adding &lt;code&gt;:OUTPUT_PATH&lt;/code&gt; after the reporter name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  -reporter plain:/path/to/plain-output.txt \&#xA;  build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use as many reporters as you like; just use the &lt;code&gt;-reporter&lt;/code&gt; option multiple times.&lt;/p&gt; &#xA;&lt;h3&gt;Included Reporters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;pretty&lt;/strong&gt;: a text-based reporter that uses ANSI colors and unicode symbols for pretty output (the default).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;plain&lt;/strong&gt;: like &lt;em&gt;pretty&lt;/em&gt;, but with no colors or unicode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;phabricator&lt;/strong&gt;: outputs a JSON array of build/test results which can be fed into the &lt;a href=&#34;http://phabricator.org/&#34;&gt;Phabricator&lt;/a&gt; code-review tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;junit&lt;/strong&gt;: produces a JUnit/xUnit compatible XML file with test results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;json-stream&lt;/strong&gt;: a stream of build/test events as JSON dictionaries, one per line &lt;a href=&#34;https://gist.github.com/fpotter/82ffcc3d9a49d10ee41b&#34;&gt;(example output)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;json-compilation-database&lt;/strong&gt;: outputs a &lt;a href=&#34;http://clang.llvm.org/docs/JSONCompilationDatabase.html&#34;&gt;JSON Compilation Database&lt;/a&gt; of build events which can be used by &lt;a href=&#34;http://clang.llvm.org/docs/LibTooling.html&#34;&gt;Clang Tooling&lt;/a&gt; based tools, e.g. &lt;a href=&#34;http://oclint.org&#34;&gt;OCLint&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;user-notifications&lt;/strong&gt;: sends notification to Notification Center when action is completed &lt;a href=&#34;https://cloud.githubusercontent.com/assets/1044236/2771974/a2715306-ca74-11e3-9889-fa50607cc412.png&#34;&gt;(example notifications)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;teamcity&lt;/strong&gt;: sends service messages to &lt;a href=&#34;http://www.jetbrains.com/teamcity/&#34;&gt;TeamCity&lt;/a&gt; Continuous Integration Server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Implementing Your Own Reporters&lt;/h3&gt; &#xA;&lt;p&gt;You can also implement your own reporters using whatever language you like. Reporters in xctool are separate executables that read JSON objects from STDIN and write formatted results to STDOUT.&lt;/p&gt; &#xA;&lt;p&gt;You can invoke reporters by passing their full path via the &lt;code&gt;-reporter&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;path/to/xctool.sh \&#xA;  -workspace YourWorkspace.xcworkspace \&#xA;  -scheme YourScheme \&#xA;  -reporter /path/to/your/reporter \&#xA;  test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, here&#39;s a simple reporter in Python that outputs a &lt;em&gt;period&lt;/em&gt; for every passing test and an &lt;em&gt;exclamation mark&lt;/em&gt; for every failing test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python&#xA;&#xA;import fileinput&#xA;import json&#xA;import sys&#xA;&#xA;for line in fileinput.input():&#xA;    obj = json.loads(line)&#xA;&#xA;    if obj[&#39;event&#39;] == &#39;end-test&#39;:&#xA;        if obj[&#39;succeeded&#39;]:&#xA;            sys.stdout.write(&#39;.&#39;)&#xA;        else:&#xA;            sys.stdout.write(&#39;!&#39;)&#xA;&#xA;sys.stdout.write(&#39;\n&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re writing a reporter in Objective-C, you&#39;ll find the &lt;code&gt;Reporter&lt;/code&gt; class helpful - see &lt;a href=&#34;https://github.com/facebook/xctool/raw/master/Common/Reporter.h&#34;&gt;Reporter.h&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration (.xctool-args)&lt;/h2&gt; &#xA;&lt;p&gt;If you routinely need to pass many arguments to &lt;em&gt;xctool&lt;/em&gt; on the command-line, you can use an &lt;strong&gt;.xctool-args&lt;/strong&gt; file to speed up your workflow. If &lt;em&gt;xctool&lt;/em&gt; finds an &lt;strong&gt;.xctool-args&lt;/strong&gt; file in the current directory, it will automatically pre-populate its arguments from there.&lt;/p&gt; &#xA;&lt;p&gt;The format is just a JSON array of arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;  &#34;-workspace&#34;, &#34;YourWorkspace.xcworkspace&#34;,&#xA;  &#34;-scheme&#34;, &#34;YourScheme&#34;,&#xA;  &#34;-configuration&#34;, &#34;Debug&#34;,&#xA;  &#34;-sdk&#34;, &#34;iphonesimulator&#34;,&#xA;  &#34;-arch&#34;, &#34;i386&#34;&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any extra arguments you pass on the command-line will take precedence over those in the &lt;em&gt;.xctool-args&lt;/em&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug fixes, improvements, and especially new &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/xctool/master/#reporters&#34;&gt;Reporter&lt;/a&gt; implementations are welcome. Before submitting a &lt;a href=&#34;https://help.github.com/articles/using-pull-requests&#34;&gt;pull request&lt;/a&gt;, please be sure to sign the &lt;a href=&#34;https://developers.facebook.com/opensource/cla&#34;&gt;Facebook Contributor License Agreement&lt;/a&gt;. We can&#39;t accept pull requests unless it&#39;s been signed.&lt;/p&gt; &#xA;&lt;h4&gt;Workflow&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork.&lt;/li&gt; &#xA; &lt;li&gt;Make a feature branch: &lt;strong&gt;git checkout -b my-feature&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make your feature. Keep things tidy so you have one commit per self-contained change (squashing can help).&lt;/li&gt; &#xA; &lt;li&gt;Push your branch to your fork: &lt;strong&gt;git push -u origin my-feature&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open GitHub, under &#34;Your recently pushed branches&#34;, click &lt;strong&gt;Pull Request&lt;/strong&gt; for &lt;em&gt;my-feature&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Be sure to use a separate feature branch and pull request for every self-contained feature. If you need to make changes from feedback, make the changes in place rather than layering on commits (use interactive rebase to edit your earlier commits). Then use &lt;strong&gt;git push --force origin my-feature&lt;/strong&gt; to update your pull request.&lt;/p&gt; &#xA;&lt;h4&gt;Workflow (for Facebook people, other committers)&lt;/h4&gt; &#xA;&lt;p&gt;Mostly the same, but use branches in the main xctool repo if you prefer. It&#39;s a nice way to keep things together.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make a feature branch: &lt;strong&gt;git checkout -b myusername/my-feature&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Push your branch: &lt;strong&gt;git push -u origin myusername/my-feature&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open GitHub to &lt;a href=&#34;https://github.com/facebook/xctool&#34;&gt;facebook/xctool&lt;/a&gt;, under &#34;Your recently pushed branches&#34;, click &lt;strong&gt;Pull Request&lt;/strong&gt; for &lt;em&gt;myusername/my-feature&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Known Issues &amp;amp; Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use shared schemes and disable the Autocreate Schemes feature.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Xcode has two kinds of schemes: shared, and user. User schemes are the default, and they&#39;re stored under a folder called &lt;code&gt;USERNAME.xcuserdatad&lt;/code&gt;, which most people correctly add to their &lt;em&gt;.gitignore&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Use shared schemes instead, and commit them to your repo. This way everyone on your team (and your build server) are working from the same information, and are building in the same way.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://fpotter_public.s3.amazonaws.com/xctool-shared-schemes.png&#34; alt=&#34;example&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Make sure simulators run in a GUI context&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;If you are running &lt;code&gt;xctool&lt;/code&gt; in continuous integration, the user account calling &lt;code&gt;xctool&lt;/code&gt; &lt;strong&gt;must&lt;/strong&gt; have an active GUI context. If not, the simulator will fail to start with cryptic warnings like:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Tried to install the test host app &#39;com.myapp.test&#39; but failed.&#xA;Preparing test environment failed.&#xA;-[TEST_BUNDLE FAILED_TO_START] &#xA;There was a problem starting the test bundle: Simulator &#39;iPhone 6&#39; was not prepared: Failed for unknown reason.&#xA;Test did not run: Simulator &#39;iPhone 6&#39; was not prepared: Failed for unknown reason.&#xA;2015-01-21 12:02:19.296 xcodebuild[35135:875297]  iPhoneSimulator: Timed out waiting 120 seconds for simulator to boot, current state is 1.&#xA;Testing failed:&#xA;Test target MyProjectTests encountered an error (Timed out waiting 120 seconds for simulator to boot, current state is 1.  &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the same holds true with &lt;code&gt;xcodebuild&lt;/code&gt;...this is not &lt;code&gt;xctool&lt;/code&gt; specific.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href=&#34;http://staxmanade.com/2015/01/setting-jenkins-up-to-run-xctool-and-xcode-simulator-tests/&#34;&gt;this post by Jason Jarrett&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2014-present Facebook&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this work except in compliance with the License. You may obtain a copy of the License in the LICENSE file, or at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
</feed>