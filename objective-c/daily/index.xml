<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-06T01:54:17Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Cenmrev/V2RayX</title>
    <updated>2022-06-06T01:54:17Z</updated>
    <id>tag:github.com,2022-06-06:/Cenmrev/V2RayX</id>
    <link href="https://github.com/Cenmrev/V2RayX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GUI for v2ray-core on macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;V2RayX: A simple GUI for V2Ray on macOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/Cenmrev/V2RayX&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Cenmrev/V2RayX.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is V2Ray?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;READ THIS&lt;/strong&gt;: &lt;a href=&#34;http://www.v2ray.com&#34;&gt;Project V2Ray&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;YOU SHOULD READ V2RAY&#39;S OFFICIAL INSTRUCTION BEFORE USING V2RAYX!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other V2Ray clients on macOS: &lt;a href=&#34;https://github.com/yanue/v2rayu&#34;&gt;V2RayU&lt;/a&gt;. (Not related to or endorsed by authors of this repo. USE AT YOUR OWN RISK.)&lt;/p&gt; &#xA;&lt;h2&gt;Download V2RayX&lt;/h2&gt; &#xA;&lt;p&gt;Download from &lt;a href=&#34;https://github.com/Cenmrev/V2RayX/releases&#34;&gt;Releases&lt;/a&gt;. (compiled by &lt;a href=&#34;https://travis-ci.org/Cenmrev/V2RayX&#34;&gt;travis-ci.org&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;By &lt;a href=&#34;https://caskroom.github.io/&#34;&gt;Homebrew-Cask&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew cask install v2rayx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;V2RayX.app is built by running one of the following commands in your terminal. You can install this via the command-line with curl.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sh -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Cenmrev/V2RayX/master/compilefromsource.sh)&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or step by step:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone --recursive https://github.com/Cenmrev/V2RayX.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;open V2RayX.xcodeproj and use Xcode to build V2RayX.&lt;/p&gt; &#xA;&lt;h2&gt;How does V2RayX work&lt;/h2&gt; &#xA;&lt;p&gt;V2RayX provides a GUI to generate the config file for V2Ray. It includes V2Ray&#39;s binary executable in the app bundle. V2RayX starts and stops V2Ray with &lt;code&gt;launchd&lt;/code&gt; of macOS.&lt;/p&gt; &#xA;&lt;p&gt;V2RayX also allows users to change system proxy settings and switch proxy servers on the macOS menu bar.&lt;/p&gt; &#xA;&lt;p&gt;As default, V2RayX will open a socks5 proxy at port &lt;code&gt;1081&lt;/code&gt; as the main inbound, as well as a http proxy at port &lt;code&gt;8001&lt;/code&gt; as an inboundDetour.&lt;/p&gt; &#xA;&lt;p&gt;V2RayX provide three modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Global Mode: V2RayX asks macOS to route all internet traffic to v2ray core if the network traffic obeys operating system&#39;s network rules.&lt;/li&gt; &#xA; &lt;li&gt;PAC Mode: macOS will determine the routing based on a pac file and some traffic may be routed to v2ray core.&lt;/li&gt; &#xA; &lt;li&gt;Manual Mode: V2RayX will not modify any macOS network settings, but only start or stop v2ray core.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Options in menu list &lt;code&gt;Routing Rule&lt;/code&gt; determine how v2ray core deals with incoming traffic. Core routing rules apply to all three modes above.&lt;/p&gt; &#xA;&lt;h3&gt;auto-run on login&lt;/h3&gt; &#xA;&lt;p&gt;Open macOS System Preferences -&amp;gt; Users &amp;amp; Group -&amp;gt; Login Items, add V2RayX.app to the list.&lt;/p&gt; &#xA;&lt;h3&gt;manually update v2ray-core&lt;/h3&gt; &#xA;&lt;p&gt;replace &lt;code&gt;V2RayX.app/Contents/Resources/v2ray&lt;/code&gt; with the newest v2ray version from &lt;a href=&#34;https://github.com/v2ray/v2ray-core/releases&#34;&gt;v2ray-core repo&lt;/a&gt;. However, compatibility is not guaranteed.&lt;/p&gt; &#xA;&lt;h3&gt;Uninstall&lt;/h3&gt; &#xA;&lt;p&gt;V2RayX will create the following files and folders:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/Library/Application Support/V2RayX&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/Library/Application Support/V2RayX&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/Library/Preferences/cenmrev.V2RayX.plist&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So, to totally uninstall V2RayX, just delete V2RayX.app and the files above. :)&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledge&lt;/h2&gt; &#xA;&lt;p&gt;V2RayX uses &lt;a href=&#34;https://github.com/swisspol/GCDWebServer&#34;&gt;GCDWebServer&lt;/a&gt; to provide a local pac server. V2RayX also uses many ideas and codes from &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-iOS/tree/master&#34;&gt;ShadowsocksX&lt;/a&gt;, especially, the codes of &lt;a href=&#34;https://github.com/Cenmrev/V2RayX/raw/master/v2rayx_sysconf/main.m&#34;&gt;v2rays_sysconfig&lt;/a&gt; are simply copied from &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-iOS/raw/master/shadowsocks_sysconf/main.m&#34;&gt;shadowsocks_sysconf&lt;/a&gt; with some modifications.&lt;/p&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;p&gt;If Project V2Ray or V2RayX helped you, you can also help us by donation &lt;strong&gt;in your will&lt;/strong&gt;. To donate to Project V2Ray, you may refer to &lt;a href=&#34;https://www.v2ray.com/chapter_00/02_donate.html&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This tool is mainly for personal usage. For professional users and technique support, commercial software like proxifier is recommended. Please refer to &lt;a href=&#34;https://github.com/Cenmrev/V2RayX/issues/60#issuecomment-369531443&#34;&gt;#60&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The developer does not major in CS nor Software Engineer and currently is busy with grad school courses. So V2rayX will not be updated frequently. Users can replace V2RayX.app/Contents/Resources/v2ray with the newest v2ray-core downloaded from &lt;a href=&#34;https://github.com/v2ray/v2ray-core/releases&#34;&gt;https://github.com/v2ray/v2ray-core/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The developer currently does not have enough time to add more features to V2RayX, nor to merge PRs. However, forking and releasing your own version are always welcome.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>headkaze/Hackintool</title>
    <updated>2022-06-06T01:54:17Z</updated>
    <id>tag:github.com,2022-06-06:/headkaze/Hackintool</id>
    <link href="https://github.com/headkaze/Hackintool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Swiss army knife of vanilla Hackintoshing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hackintool&lt;/h1&gt; &#xA;&lt;p&gt;The Swiss army knife of vanilla Hackintoshing&lt;/p&gt; &#xA;&lt;h1&gt;WARNING!&lt;/h1&gt; &#xA;&lt;p&gt;Hackintool is not an automated patching tool that does all the work for you. Knowledge is required on how to patch before using it. Please read the Intel Framebuffer patching using WhateverGreen guide before you download this tool! I also recommend reading @jaymonkey&#39;s An iDiot&#39;s Guide To Lilu and its Plug-ins and @CaseySJ&#39;s General Framebuffer Patching Guide using Hackintool.&lt;/p&gt; &#xA;&lt;h1&gt;Mojave, Lilu + WhateverGreen&lt;/h1&gt; &#xA;&lt;p&gt;You cannot use the Clover&#39;s KextsToPatch for framebuffer patching in Mojave for Skylake and above&lt;/p&gt; &#xA;&lt;h1&gt;Framebuffer Dumps&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There are a few ways to dump your framebuffer data (the second two require WhateverGreen + Lilu debug versions) to read in Hackintool:&lt;/li&gt; &#xA; &lt;li&gt;Use the Framebuffer-&amp;gt;macOS 10.13.6 / Framebuffer-&amp;gt;macOS 10.14 menu to create patches without a framebuffer dump&lt;/li&gt; &#xA; &lt;li&gt;Use the -igfxdump boot flag to dump IGPU framebuffer kext to /AppleIntelFramebuffer_X_Y (root of your boot drive) and then File-&amp;gt;Open menu&lt;/li&gt; &#xA; &lt;li&gt;Use the -igfxfbdump boot flag to dump native and patched framebuffer table to ioreg and then File-&amp;gt;Import-&amp;gt;IOReg Dump menu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports Sandy Bridge, Ivy Bridge, Haswell, Broadwell, Skylake, Kaby Lake, Coffee Lake, Cannon Lake and Ice Lake generations&lt;/li&gt; &#xA; &lt;li&gt;Create All, Connectors or VRAM patches&lt;/li&gt; &#xA; &lt;li&gt;Detect Changes for auto patch creation&lt;/li&gt; &#xA; &lt;li&gt;Create Clover patches in hex, base64 or Devices/Properties formats&lt;/li&gt; &#xA; &lt;li&gt;Displays native GPU and Model identifiers&lt;/li&gt; &#xA; &lt;li&gt;Display and edit Memory Info such as Stolen, Framebuffer, VRAM, Cursor etc.&lt;/li&gt; &#xA; &lt;li&gt;Roll over some items for additional info (Tooltips)&lt;/li&gt; &#xA; &lt;li&gt;Reads &#34;live&#34; data directly from Framebuffer kexts (if available; see Mojave note below)&lt;/li&gt; &#xA; &lt;li&gt;File-&amp;gt;Open framebuffer file generated by WhateverGreen&#39;s -igfxdump boot flag&lt;/li&gt; &#xA; &lt;li&gt;File-&amp;gt;Export-&amp;gt;Clover config.plist / File-&amp;gt;Export-&amp;gt;Framebuffer.txt file&lt;/li&gt; &#xA; &lt;li&gt;Patch audio layout id&lt;/li&gt; &#xA; &lt;li&gt;Add USB port limit patch&lt;/li&gt; &#xA; &lt;li&gt;Plug and unplug USB2 / USB3 devices and set port connector types then generate a USBPorts.kext&lt;/li&gt; &#xA; &lt;li&gt;Advanced patching options (DVMT pre-alloc 32 MB, VRAM 2048 MB, Disable eGPU, Enable HDMI20 (4K), DP -&amp;gt; HDMI, GfxYTile Fix, Reboot Fix, USB port Limit, Spoof Audio Device Id, FB Port Limit, Spoof Gfx Device Id)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Credits &amp;amp; Contributions&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vit9696 for WhateverGreen (full credits), Lilu (full credits), AppleALC (full credits), original USBPorts.kext and additional help&lt;/li&gt; &#xA; &lt;li&gt;vit9696 for IntelFramebuffer.bt with additional work by bcc9, Piker-Alpha and joevt&lt;/li&gt; &#xA; &lt;li&gt;daliansky for Intel Core Platform ID and SMBIOS Quick Reference&lt;/li&gt; &#xA; &lt;li&gt;Clover Development Team for various technical info&lt;/li&gt; &#xA; &lt;li&gt;vandroiy2013 for audio id data from AppleALC&lt;/li&gt; &#xA; &lt;li&gt;RehabMan for the all data patching method, ioreg framebuffer dump and other contributions&lt;/li&gt; &#xA; &lt;li&gt;EDID injection (Andy Vandijck / Marchrius)&lt;/li&gt; &#xA; &lt;li&gt;USB power injection (corpnewt)&lt;/li&gt; &#xA; &lt;li&gt;HDA controllers / codec lists by the VoodooHDA project&lt;/li&gt; &#xA; &lt;li&gt;System Configs compilation (CaseySJ)&lt;/li&gt; &#xA; &lt;li&gt;Clover downloader (Kozlek / JrCs / slice)&lt;/li&gt; &#xA; &lt;li&gt;Kext compiler &amp;amp; installer (Sascha Lamprecht / Gengik84 / LAbyOne)&lt;/li&gt; &#xA; &lt;li&gt;Atheros &amp;amp; SATA kexts (Sascha Lamprecht)&lt;/li&gt; &#xA; &lt;li&gt;DPCIManager (phpdev32 / MuntashirAkon)&lt;/li&gt; &#xA; &lt;li&gt;AppleIntelInfo (Pike R. Alpha)&lt;/li&gt; &#xA; &lt;li&gt;gfxutil (mcmatrix)&lt;/li&gt; &#xA; &lt;li&gt;VDADecoderChecker (Andy Breuhan)&lt;/li&gt; &#xA; &lt;li&gt;iMessageDebug (ElNono / mdmwii / flux84 / sugarface / pokenguyen)&lt;/li&gt; &#xA; &lt;li&gt;macserial (vit9696 / MacInfoPkg team)&lt;/li&gt; &#xA; &lt;li&gt;Model data (everymac.com)&lt;/li&gt; &#xA; &lt;li&gt;Translations: French (Matgen84), German (al6042), Korean (zisqo), Russian / Ukrainian (ctich), Chinese (daliansky, Bat.bat, penghubingzhou)&lt;/li&gt; &#xA; &lt;li&gt;Sparkle framework by Andy Matuschak&lt;/li&gt; &#xA; &lt;li&gt;Icon &amp;amp; UI updates by ultratiem&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>auth0/SimpleKeychain</title>
    <updated>2022-06-06T01:54:17Z</updated>
    <id>tag:github.com,2022-06-06:/auth0/SimpleKeychain</id>
    <link href="https://github.com/auth0/SimpleKeychain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Keychain helper for iOS to make it very simple to store/obtain values from iOS Keychain&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SimpleKeychain&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/auth0/SimpleKeychain/tree/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/auth0/SimpleKeychain.svg?style=flat-square&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/auth0/SimpleKeychain&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/auth0/SimpleKeychain/master.svg?style=flat-square&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SimpleKeychain&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SimpleKeychain.svg?style=flat-square&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SimpleKeychain&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/SimpleKeychain.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SimpleKeychain&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/SimpleKeychain.svg?style=flat-square&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A wrapper to make it really easy to deal with iOS Keychain and store your user&#39;s credentials securely.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple interface&lt;/strong&gt; to store user&#39;s credentials (e.g. JWT) in the Keychain.&lt;/li&gt; &#xA; &lt;li&gt;Store credentials under an &lt;strong&gt;Access Group to enable Keychain Sharing&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TouchID/FaceID integration&lt;/strong&gt; with a reusable &lt;code&gt;LAContext&lt;/code&gt; instance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/auth0/SimpleKeychain/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/auth0/SimpleKeychain/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/auth0/SimpleKeychain/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/auth0/SimpleKeychain/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/auth0/SimpleKeychain/master/#what-is-auth0&#34;&gt;What is Auth0?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/auth0/SimpleKeychain/master/#create-a-free-auth0-account&#34;&gt;Create a Free Auth0 Account&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/auth0/SimpleKeychain/master/#issue-reporting&#34;&gt;Issue Reporting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/auth0/SimpleKeychain/master/#author&#34;&gt;Author&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/auth0/SimpleKeychain/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 9.0+ / macOS 10.11+ / tvOS 9.0+ / watchOS 2.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 12.x / 13.x&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.x / 5.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://cocoapods.org&#34;&gt;Cocoapods&lt;/a&gt;, add this line to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#34;SimpleKeychain&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For more information on Cocoapods, check &lt;a href=&#34;https://guides.cocoapods.org/using/getting-started.html&#34;&gt;their official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;auth0/SimpleKeychain&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;carthage bootstrap --use-xcframeworks&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For more information about Carthage usage, check &lt;a href=&#34;https://github.com/Carthage/Carthage#if-youre-building-for-ios-tvos-or-watchos&#34;&gt;their official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;SPM&lt;/h4&gt; &#xA;&lt;p&gt;If you are using the Swift Package Manager, open the following menu item in Xcode:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;File &amp;gt; Add Packages...&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;strong&gt;Search or Enter Package URL&lt;/strong&gt; search box enter this url:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/auth0/SimpleKeychain.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then select the dependency rule and press &lt;strong&gt;Add Package&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For further reference on SPM, check &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app&#34;&gt;its official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Save a JWT token or password&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let jwt = // user&#39;s JWT token obtained after login&#xA;A0SimpleKeychain().setString(jwt, forKey: &#34;auth0-user-jwt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Obtain a JWT token or password&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let jwt = A0SimpleKeychain().string(forKey: &#34;auth0-user-jwt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Share a JWT Token with other apps using iOS Access Group&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let jwt = // user&#39;s JWT token obtained after login&#xA;let keychain = A0SimpleKeychain(service: &#34;Auth0&#34;, accessGroup: &#34;ABCDEFGH.com.mydomain.myaccessgroup&#34;)&#xA;keychain.setString(jwt, forKey: &#34;auth0-user-jwt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Store and retrieve a JWT token using TouchID/FaceID&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s save the JWT first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let jwt = // user&#39;s JWT token obtained after login&#xA;let keychain = A0SimpleKeychain()&#xA;keychain.useAccessControl = true&#xA;keychain.defaultAccessiblity = .whenPasscodeSetThisDeviceOnly&#xA;keychain.setTouchIDAuthenticationAllowableReuseDuration(5.0)&#xA;keychain.setString(jwt, forKey: &#34;auth0-user-jwt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If there is an existent value under the key &lt;code&gt;auth0-user-jwt&lt;/code&gt; saved with AccessControl and &lt;code&gt;A0SimpleKeychainItemAccessibleWhenPasscodeSetThisDeviceOnly&lt;/code&gt;, iOS will prompt the user to enter their passcode or fingerprint before updating the value.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Then let&#39;s obtain the value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let message = NSLocalizedString(&#34;Please enter your passcode/fingerprint to login with awesome App!.&#34;, comment: &#34;Prompt TouchID message&#34;)&#xA;let keychain = A0SimpleKeychain()&#xA;let jwt = keychain.string(forKey: &#34;auth0-user-jwt&#34;, promptMessage: message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remove a JWT token or password&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;A0SimpleKeychain().deleteEntry(forKey: &#34;auth0-user-jwt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remove all entries&lt;/h3&gt; &#xA;&lt;p&gt;Useful for testing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;A0SimpleKeychain().clearAll()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Just clone the repo, run &lt;code&gt;carthage bootstrap&lt;/code&gt; and you&#39;re ready to contribute!&lt;/p&gt; &#xA;&lt;h2&gt;What is Auth0?&lt;/h2&gt; &#xA;&lt;p&gt;Auth0 helps you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add authentication with &lt;a href=&#34;https://auth0.com/docs/identityproviders&#34;&gt;multiple sources&lt;/a&gt;, either social identity providers such as &lt;strong&gt;Google, Facebook, Microsoft Account, LinkedIn, GitHub, Twitter, Box, Salesforce&lt;/strong&gt; (amongst others), or enterprise identity systems like &lt;strong&gt;Windows Azure AD, Google Apps, Active Directory, ADFS, or any SAML Identity Provider&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add authentication through more traditional &lt;strong&gt;&lt;a href=&#34;https://auth0.com/docs/connections/database/custom-db&#34;&gt;username/password databases&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add support for &lt;strong&gt;&lt;a href=&#34;https://auth0.com/docs/link-accounts&#34;&gt;linking different user accounts&lt;/a&gt;&lt;/strong&gt; with the same user.&lt;/li&gt; &#xA; &lt;li&gt;Support for generating signed &lt;a href=&#34;https://auth0.com/docs/tokens/concepts/jwts&#34;&gt;JSON Web Tokens&lt;/a&gt; to call your APIs and &lt;strong&gt;flow the user identity&lt;/strong&gt; securely.&lt;/li&gt; &#xA; &lt;li&gt;Analytics of how, when, and where users are logging in.&lt;/li&gt; &#xA; &lt;li&gt;Pull data from other sources and add it to the user profile through &lt;a href=&#34;https://auth0.com/docs/rules&#34;&gt;JavaScript rules&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Create a Free Auth0 Account&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://auth0.com&#34;&gt;Auth0&lt;/a&gt; and click &lt;strong&gt;Sign Up&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use Google, GitHub, or Microsoft Account to login.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Issue Reporting&lt;/h2&gt; &#xA;&lt;p&gt;If you have found a bug or to request a feature, please &lt;a href=&#34;https://github.com/auth0/simplekeychain/issues&#34;&gt;raise an issue&lt;/a&gt;. Please do not report security vulnerabilities on the public GitHub issue tracker. The &lt;a href=&#34;https://auth0.com/responsible-disclosure-policy&#34;&gt;Responsible Disclosure Program&lt;/a&gt; details the procedure for disclosing security issues.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://auth0.com&#34;&gt;Auth0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/auth0/SimpleKeychain/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>