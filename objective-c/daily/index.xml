<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-08T01:47:24Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mixpanel/mixpanel-iphone</title>
    <updated>2022-08-08T01:47:24Z</updated>
    <id>tag:github.com,2022-08-08:/mixpanel/mixpanel-iphone</id>
    <link href="https://github.com/mixpanel/mixpanel-iphone" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official iOS (Objective-C) Tracking Library for Mixpanel Analytics&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/mixpanel/mixpanel-iphone&#34;&gt;&lt;img src=&#34;https://travis-ci.org/mixpanel/mixpanel-iphone.svg?branch=yolo-travis-ci&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/mixpanel/mixpanel-iphone&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/mixpanel/mixpanel-iphone.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/mixpanel/mixpanel-iphone&#34; title=&#34;Percentage of issues still open&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/open/mixpanel/mixpanel-iphone.svg?sanitize=true&#34; alt=&#34;Percentage of issues still open&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mixpanel.com&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/Mixpanel.svg?style=flat&#34; alt=&#34;CocoaPods Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mixpanel.com&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/l/Mixpanel.svg?style=flat&#34; alt=&#34;Apache License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;!-- MarkdownTOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#quick-start-guide&#34;&gt;Quick Start Guide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#1-install-mixpanel&#34;&gt;Install Mixpanel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#2-initialize-mixpanel&#34;&gt;Initialize Mixpanel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#3-send-data&#34;&gt;Send Data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#4-check-for-success&#34;&gt;Check for Success&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#complete-code-example&#34;&gt;Complete Code Example&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#i-want-to-know-more&#34;&gt;I want to know more!&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /MarkdownTOC --&gt; &#xA;&lt;p&gt;&lt;a name=&#34;introduction&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;The Mixpanel library for iOS is an open source project, and we&#39;d love to see your contributions! We&#39;d also love for you to come and work with us! Check out &lt;a href=&#34;https://mixpanel.com/jobs/#openings&#34;&gt;https://mixpanel.com/jobs/#openings&lt;/a&gt; for details. If you are using Swift, we recommend our &lt;strong&gt;&lt;a href=&#34;https://github.com/mixpanel/mixpanel-swift&#34;&gt;Swift Library&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://developer.mixpanel.com/docs/ios&#34;&gt;Advanced iOS - Objective-C Guide&lt;/a&gt; for additional advanced configurations and use cases, like setting up your project with European Union data storage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/#complete-code-example&#34;&gt;Skip to a complete code example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Start Guide&lt;/h1&gt; &#xA;&lt;p&gt;Caution: From v4.0.0.beta.3 to v4.1.0, we have a bug that events with ampersand(&amp;amp;) will be rejected by the server. We recommend you update to v4.1.1 or above.&lt;/p&gt; &#xA;&lt;h2&gt;1. Install Mixpanel&lt;/h2&gt; &#xA;&lt;p&gt;You can install the Mixpanel iOS - Objective-C library by using CocoaPods or Carthage. You will need your project token for initializing your library. You can get your project token from &lt;a href=&#34;https://mixpanel.com/settings/project&#34;&gt;project settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation Option 1: CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If this is your first time using CocoaPods, Install CocoaPods using &lt;code&gt;gem install cocoapods&lt;/code&gt;. Otherwise, continue to Step 3.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod setup&lt;/code&gt; to create a local CocoaPods spec mirror.&lt;/li&gt; &#xA; &lt;li&gt;Create a Podfile in your Xcode project directory by running &lt;code&gt;pod init&lt;/code&gt; in your terminal, edit the Podfile generated, and add the following line: &lt;code&gt;pod &#39;Mixpanel&#39;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; in your Xcode project directory. CocoaPods should download and install the Mixpanel library, and create a new Xcode workspace. Open up this workspace in Xcode or typing &lt;code&gt;open *.xcworkspace&lt;/code&gt; in your terminal.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Installation Option 2: Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Mixpanel supports Carthage to package your dependencies as a framework. Include the following dependency in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;github &#34;mixpanel/mixpanel-iphone&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/Carthage/Carthage#if-youre-building-for-ios-tvos-or-watchos&#34;&gt;Carthage docs&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Installation Option 3: Swift Package Manager&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In Xcode, select File &amp;gt; Add Packages...&lt;/li&gt; &#xA; &lt;li&gt;Enter the package URL for this &lt;a href=&#34;https://github.com/mixpanel/mixpanel-iphone&#34;&gt;repository&lt;/a&gt; and must select a version greater than or equal to v4.0.0&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;2. Initialize Mixpanel&lt;/h2&gt; &#xA;&lt;p&gt;To initialize the library, add `#Import &#34;Mixpanel/Mixpanel.h&#34; into &#34;AppDelegate.m&#34; and call &lt;a href=&#34;https://mixpanel.github.io/mixpanel-iphone/Classes/Mixpanel.html#//api/name/sharedInstanceWithToken:&#34;&gt;sharedInstanceWithToken:&lt;/a&gt; with your project token as its argument in &lt;a href=&#34;https://developer.apple.com/documentation/uikit/uiapplicationdelegate#//apple_ref/occ/intfm/UIApplicationDelegate/application:willFinishLaunchingWithOptions:&#34;&gt;application:didFinishLaunchingWithOptions:&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &#34;Mixpanel/Mixpanel.h&#34;&#xA;&#xA;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {&#xA;...&#xA;  [Mixpanel sharedInstanceWithToken:@&#34;YOUR_API_TOKEN&#34;];&#xA;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mixpanel.github.io/mixpanel-iphone/Classes/Mixpanel.html&#34;&gt;See all configuration options&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3. Send Data&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s get started by sending event data. You can send an event from anywhere in your application. Better understand user behavior by storing details that are specific to the event (properties). After initializing the library, Mixpanel will &lt;a href=&#34;https://mixpanel.com/help/questions/articles/which-common-mobile-events-can-mixpanel-collect-on-my-behalf-automatically&#34;&gt;automatically collect common mobile events&lt;/a&gt;. You can enable/disable automatic collection through your &lt;a href=&#34;https://help.mixpanel.com/hc/en-us/articles/115004596186#enable-or-disable-common-mobile-events&#34;&gt;project settings&lt;/a&gt;. Also, Mixpanel automatically tracks some properties by default. &lt;a href=&#34;https://help.mixpanel.com/hc/en-us/articles/115004613766-Default-Properties-Collected-by-Mixpanel#iOS&#34;&gt;learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;Mixpanel *mixpanel = [Mixpanel sharedInstance];&#xA;[mixpanel track:@&#34;Sign Up&#34; properties:@{&#xA;  @&#34;source&#34;: @&#34;Pat&#39;s affiliate site&#34;,&#xA;  @&#34;Opted out of email&#34;: @YES&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4. Check for Success&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://mixpanel.com/report/live&#34;&gt;Open up Live View in Mixpanel&lt;/a&gt; to view incoming events.&lt;/p&gt; &#xA;&lt;p&gt;Once data hits our API, it generally takes ~60 seconds for it to be processed, stored, and queryable in your project.&lt;/p&gt; &#xA;&lt;h2&gt;Complete Code Example&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a runnable code example that covers everything in this quickstart guide.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &#34;Mixpanel/Mixpanel.h&#34;&#xA;&#xA;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {&#xA;...&#xA;  Mixpanel *mixpanel = [Mixpanel sharedInstanceWithToken:@&#34;YOUR_API_TOKEN&#34;];&#xA;  [mixpanel track:@&#34;Sign Up&#34; properties:@{&#xA;    @&#34;source&#34;: @&#34;Pat&#39;s affiliate site&#34;,&#xA;    @&#34;Opted out of email&#34;: @YES&#xA;  }];&#xA;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;I want to stop tracking an event/event property in Mixpanel. Is that possible?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yes, in Lexicon, you can intercept and drop incoming events or properties. Mixpanel won’t store any new data for the event or property you select to drop. &lt;a href=&#34;https://help.mixpanel.com/hc/en-us/articles/360001307806#dropping-events-and-properties&#34;&gt;See this article for more information&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;I have a test user I would like to opt out of tracking. How do I do that?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mixpanel’s client-side tracking library contains the &lt;a href=&#34;https://mixpanel.github.io/mixpanel-iphone/Classes/Mixpanel.html#//api/name/optOutTracking&#34;&gt;optOutTracking()&lt;/a&gt; method, which will set the user’s local opt-out state to “true” and will prevent data from being sent from a user’s device. More detailed instructions can be found in the section, &lt;a href=&#34;https://raw.githubusercontent.com/mixpanel/mixpanel-iphone/master/ios#opting-users-out-of-tracking&#34;&gt;Opting users out of tracking&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why aren&#39;t my events showing up?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To preserve battery life and customer bandwidth, the Mixpanel library doesn&#39;t send the events you record immediately. Instead, it sends batches to the Mixpanel servers every 60 seconds while your application is running, as well as when the application transitions to the background. You can call &lt;a href=&#34;https://mixpanel.github.io/mixpanel-iphone/Classes/Mixpanel.html#//api/name/flush&#34;&gt;flush()&lt;/a&gt; manually if you want to force a flush at a particular moment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[mixpanel flush];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your events are still not showing up after 60 seconds, check if you have opted out of tracking. You can also enable Mixpanel debugging and logging, it allows you to see the debug output from the Mixpanel library. To enable it, set &lt;a href=&#34;https://mixpanel.github.io/mixpanel-iphone/Classes/Mixpanel.html#//api/name/enableLogging&#34;&gt;enableLogging&lt;/a&gt; to true.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;mixpanel.enableLogging = YES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Starting with iOS 14.5, do I need to request the user’s permission through the AppTrackingTransparency framework to use Mixpanel?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;No, Mixpanel does not use IDFA so it does not require user permission through the AppTrackingTransparency(ATT) framework.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If I use Mixpanel, how do I answer app privacy questions for the App Store?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please refer to our &lt;a href=&#34;https://mixpanel.com/legal/app-store-privacy-details/&#34;&gt;Apple App Developer Privacy Guidance&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;I want to know more!&lt;/h2&gt; &#xA;&lt;p&gt;No worries, here are some links that you will find useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://developer.mixpanel.com/docs/ios&#34;&gt;Advanced iOS - Objective-C Guide&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/mixpanel/mixpanel-iphone/tree/master/HelloMixpanel&#34;&gt;Sample app&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://mixpanel.github.io/mixpanel-iphone/index.html&#34;&gt;Full API Reference&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Have any questions? Reach out to Mixpanel &lt;a href=&#34;https://help.mixpanel.com/hc/en-us/requests/new&#34;&gt;Support&lt;/a&gt; to speak to someone smart, quickly.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>opa334/libSandy</title>
    <updated>2022-08-08T01:47:24Z</updated>
    <id>tag:github.com,2022-08-08:/opa334/libSandy</id>
    <link href="https://github.com/opa334/libSandy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Securely extend the sandbox of system processes and user applications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libSandy&lt;/h1&gt; &#xA;&lt;p&gt;libSandy is a developer library that allows developers to extend the sandbox of applications and system processes on jailbroken iOS in a secure way.&lt;/p&gt; &#xA;&lt;h2&gt;Sandbox extensions explained&lt;/h2&gt; &#xA;&lt;p&gt;Any process can use sandbox APIs (See sandbox.h) to issue extension tokens for everything it itself has access to.&lt;/p&gt; &#xA;&lt;p&gt;A token is just a string. This string can be consumed by any other process in order to apply the associated extension to itself.&lt;/p&gt; &#xA;&lt;p&gt;In order for an extension to have any effect, it needs to be defined in the seatbelt profile of the process that consumes the token.&lt;/p&gt; &#xA;&lt;p&gt;Sandbox extensions are available in the kernel and there is multiple syscalls, libsystem_sandbox.dylib provides the userspace API, but Apple unfortunately only implemented the functions they specifically need.&lt;/p&gt; &#xA;&lt;p&gt;By default, every process running on iOS has a sandbox profile associated to it, additional extensions can also given through entitlements.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately there is no documentation whatsoever of sandbox extensions, so take all of the above information with a grain of salt.&lt;/p&gt; &#xA;&lt;p&gt;The problem is that when hooking system processes, entitlements aren&#39;t an option as you cannot change them on existing processes. So when you want to hook an existing process (instead of creating a new binary entirely), the only way to get sandbox extensions is to retrieve them from another process and then consume them, this is what libSandy internally does.&lt;/p&gt; &#xA;&lt;h2&gt;How libSandy uses sandbox extensions&lt;/h2&gt; &#xA;&lt;p&gt;By default, all processes can only message XPC services allowed by their sandbox, libSandy hooks MobileGestaltHelper because it is unsanboxed and can be accessed by all other processes.&lt;/p&gt; &#xA;&lt;p&gt;The sandbox extensions are issued on demand inside the MobileGestaltHelper hook and then returned to the calling process, where libSandy consumes them.&lt;/p&gt; &#xA;&lt;h2&gt;Sandbox &#34;Profiles&#34; (implemented in libSandy) explained&lt;/h2&gt; &#xA;&lt;p&gt;In order to be secure, libSandy uses a specific profile format that&#39;s stored in a root owned path (&lt;code&gt;(/var/jb)/Library/libSandy/&amp;lt;Profile Name&amp;gt;.plist&lt;/code&gt;). These profiles are pre defined and need to be included in a package, it is recommended to use the layout directory of theos in order to add it to your project.&lt;/p&gt; &#xA;&lt;p&gt;A libSandy profile mainly defines which extensions should be issued to the process wanting to apply it, the exact formalities and available options are detailed below.&lt;/p&gt; &#xA;&lt;p&gt;Secondly, a libSandy profile also contains a whitelist of process signing identifiers that can apply them. If you can&#39;t figure out how to get the signing identifier of your process, compile a debug build of libSandy and try consuming a profile the process doesn&#39;t have access to, the signing identifier should be logged to console.&lt;/p&gt; &#xA;&lt;p&gt;Thirdly and least importantly, it is also possible to define conditions under which a libSandy profile may be applied. The only condition currently implemented is file existance, meaning that the profile can only be applied when a certain file (does not (when negated is true)) exist on the file system. I mainly implemented this functionalitly in order to give Safari Plus users an option to use it sandboxed without any security concerns.&lt;/p&gt; &#xA;&lt;h3&gt;Profile Plist Structure&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;AllowedProcesses&lt;/code&gt;: Array of the process signing identifiers that can apply the profile, a single &lt;code&gt;*&lt;/code&gt; means all processes are allowed&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Conditions&lt;/code&gt;: Array of conditions that have to be met&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Extensions&lt;/code&gt;: Array of the extensions (dictionaries) included in the profile&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Condition Format&lt;/h3&gt; &#xA;&lt;p&gt;A condition is a dictionary with the following keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ConditionType&lt;/code&gt;: Type of condition to be met (String). As explained, only &lt;code&gt;FileExistance&lt;/code&gt; currently exists.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;FilePath&lt;/code&gt;: Path of file to be checked for existance&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Negated&lt;/code&gt;: When &lt;code&gt;true&lt;/code&gt;, check if the file does not exist&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Extension Format&lt;/h3&gt; &#xA;&lt;p&gt;There is multiple types of extensions, essentially any sandbox extension supported by iOS can be included in a libSandy profile, the majority of types is never really used in iOS tho so the main useful ones are &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;mach&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt;: String, type of the extension as explained above (&lt;code&gt;file&lt;/code&gt; / &lt;code&gt;mach&lt;/code&gt; / &lt;code&gt;generic&lt;/code&gt; / &lt;code&gt;iokit_registry&lt;/code&gt; / &lt;code&gt;iokit_user_client&lt;/code&gt; / &lt;code&gt;posix_name&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;File&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;extension_class&lt;/code&gt;: String, either &lt;code&gt;com.apple.app-sandbox.read&lt;/code&gt; for read or &lt;code&gt;com.apple.app-sandbox.read-write&lt;/code&gt; for read-write access&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;path&lt;/code&gt;: String, path to the file or directory to allow access to, directories are recursive so if you use &lt;code&gt;/&lt;/code&gt; then that means access to the entire file system&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Mach&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;extension_class&lt;/code&gt;: String, should be &lt;code&gt;com.apple.app-sandbox.mach&lt;/code&gt; for applications or &lt;code&gt;com.apple.security.exception.mach-lookup.global-name&lt;/code&gt; for system daemons&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mach_name&lt;/code&gt;: String, name of mach service to allow access to&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The other sandbox types are really not that relevant so not listed here, really the key names of the dictionary always have the same names as the arguments passed to the issue functions in sandbox.h.&lt;/p&gt; &#xA;&lt;h2&gt;Functions provided by libSandy&lt;/h2&gt; &#xA;&lt;p&gt;In order to call these functions, you will have to run the &lt;code&gt;install_to_theos.sh&lt;/code&gt; script in this repo and then add &lt;code&gt;sandy&lt;/code&gt; to &lt;code&gt;&amp;lt;your_project&amp;gt;_LIBRARIES&lt;/code&gt; in your Makefile.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;int libSandy_applyProfile(const char* profileName)&lt;/code&gt;: attempts to apply a libSandy profile to the calling process. For return codes see &lt;a href=&#34;https://raw.githubusercontent.com/opa334/libSandy/main/libSandy.h#L5&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;bool libSandy_works(void);&lt;/code&gt;: checks if libSandy correctly works, do not bother calling this before libSandy_applyProfile as that will just return &lt;code&gt;kLibSandyErrorXPCFailure&lt;/code&gt; when libSandy doesn&#39;t work. The reason for this functions existance is when you need to check whether libSandy works from a different process (In Crane many system daemons use libSandy to apply profiles but SpringBoard needs to know whether that worked, therefore it calls libSandy_works). When this returns false you can be almost sure that either libSandy is not compatible with the installed iOS version or that the user has disabled libSandySupport.dylib via Choicy, iCleaner Pro or similar.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Accessing Preferences&lt;/h2&gt; &#xA;&lt;p&gt;Accessing preferences from sandboxed processes was always problematic and most tweaks use Cephei to do it which redirects all accesses to SpringBoard.&lt;/p&gt; &#xA;&lt;p&gt;In at least iOS 11 and higher, it is possible to instead use libSandy to access preferences in /var/mobile/Library/Preferences using NSUserDefaults.&lt;/p&gt; &#xA;&lt;p&gt;First, you need to give yourself read/write access to the plist path via a libSandy profile, then you can initialize NSUserDefaults as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NSUserDefaults* yourUserDefaults = [[NSUserDefaults alloc] initWithSuiteName:@&#34;/var/mobile/Library/Preferences/your.pref.file.plist&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will work like a normal NSUserDefaults object. Note that this doesn&#39;t work on iOS 10-ish and below.&lt;/p&gt; &#xA;&lt;p&gt;It may also be possible to give yourself the &lt;code&gt;com.apple.security.exception.shared-preference.read-write&lt;/code&gt; extension to use NSUserDefaults normally like apple would (e.g. &lt;code&gt;[[NSUserDefaults alloc] initWithSuiteName:@&#34;your.pref.file&#34;]&lt;/code&gt;), unfortunately preference extensions aren&#39;t implemented by libsystem_sandbox.dylib and I could not find out how to properly generate them (with my attempts they would be generated and consumed but nothing would happen, sandbox_check would still fail), if anyone wants to look into it, the code with what I tried is still there but commented out.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opa334/SafariPlus/tree/master/layout/Library/libSandy/SafariPlus_FileAccess.plist&#34;&gt;Profile example (Safari Plus)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opa334/SafariPlus/raw/master/MobileSafari/Classes/SPFileManager.mm#L118&#34;&gt;Apply example (Safari Plus)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opa334/SafariPlus/raw/master/MobileSafari/Classes/SPPreferenceManager.mm#L279&#34;&gt;NSUserDefaults example (Safari Plus)&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>otakeda/emergencyfx</title>
    <updated>2022-08-08T01:47:24Z</updated>
    <id>tag:github.com,2022-08-08:/otakeda/emergencyfx</id>
    <link href="https://github.com/otakeda/emergencyfx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>