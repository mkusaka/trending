<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-23T01:39:16Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>treasure-data/td-ios-sdk</title>
    <updated>2024-01-23T01:39:16Z</updated>
    <id>tag:github.com,2024-01-23:/treasure-data/td-ios-sdk</id>
    <link href="https://github.com/treasure-data/td-ios-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS SDK for Treasure Data&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Treasure Data iOS SDK&lt;/h1&gt; &#xA;&lt;p&gt;iOS and tvOS SDK for &lt;a href=&#34;http://www.treasuredata.com/&#34;&gt;Treasure Data&lt;/a&gt;. With this SDK, you can import the events on your applications into Treasure Data easily. As of 0.9.0, this SDK support iOS 12 and up as well as support tvOS 12 and up.&lt;/p&gt; &#xA;&lt;p&gt;Also, there is an alternative SDK written in Swift &lt;a href=&#34;https://github.com/recruit-lifestyle/TreasureDataSDK&#34;&gt;https://github.com/recruit-lifestyle/TreasureDataSDK&lt;/a&gt;. Note, however, that it does not support current GDPR functionality in the mainstream TD SDKs.&lt;/p&gt; &#xA;&lt;h2&gt;Migration to version 1&lt;/h2&gt; &#xA;&lt;p&gt;Version 1 has major changes that are not backward compatible with previous versions. If you are upgrading from version 0.9.0 or earlier, your code will not run correctly without doing these following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API endpoint has changed to Ingestion Endpoint. The default value is &lt;a href=&#34;https://us01.records.in.treasuredata.com&#34;&gt;https://us01.records.in.treasuredata.com&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;initializeApiEndpoint:&lt;/code&gt; API is no longer available, please use &lt;code&gt;initializeWithApiKey:apiEndpoint:&lt;/code&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;Server side upload timestamp feature is removed. If you need this feature, please contact our support team.&lt;/li&gt; &#xA; &lt;li&gt;New &lt;code&gt;enableAutoAppendLocalTimestamp&lt;/code&gt; and &lt;code&gt;disableAutoAppendLocalTimestamp&lt;/code&gt; to help automatically track local timestamp.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uuid&lt;/code&gt; is now reserved column name. If you try to add value to event&#39;s &lt;code&gt;uuid&lt;/code&gt; key, you won&#39;t see the column show up in the database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are several ways to install the library.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; is needed to set up the SDK. If you&#39;ve not installed it yet, install it at first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install cocoapods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add this line in your Podfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;TreasureData-iOS-SDK&#39;, &#39;= 1.1.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add this line to your Podfile (usually at the beginning of the file).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use_frameworks!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, execute &#39;pod install&#39;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember to reopen your project by opening .xcworkspace file instead of .xcodeproj file&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;You can install either via Xcode: File &amp;gt; Swift Packages &amp;gt; Add Package Dependency and enter &lt;code&gt;https://github.com/treasure-data/td-ios-sdk.git&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or add this line to &lt;code&gt;dependencies&lt;/code&gt; array in Package.swift file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.package(url: &#34;https://github.com/treasure-data/td-ios-sdk.git&#34;, .upToNextMajor(from: &#34;1.1.0&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Framework&lt;/h3&gt; &#xA;&lt;p&gt;From 0.9.0, we no longer support standalone framework.&lt;/p&gt; &#xA;&lt;h2&gt;Usage in Objective-C&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.treasuredata.com/display/public/PD/iOS+SDK&#34;&gt;Treasure Data&#39;s Guide&lt;/a&gt; (most parts overlap with this README)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://treasure-data.github.io/td-ios-sdk/Classes/TreasureData.html&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Import SDK header file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;#import &amp;lt;TreasureData-iOS-SDK/TreasureData.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Register your TreasureData API key&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {&#xA;    [TreasureData initializeWithApiKey:@&#34;your_api_key&#34;];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommend to use a write-only API key for the SDK. To obtain one, please:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Login into the Treasure Data Console at &lt;a href=&#34;http://console.treasuredata.com&#34;&gt;http://console.treasuredata.com&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Visit your Profile page at &lt;a href=&#34;http://console.treasuredata.com/users/current&#34;&gt;http://console.treasuredata.com/users/current&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Insert your password under the &#39;API Keys&#39; panel;&lt;/li&gt; &#xA; &lt;li&gt;In the bottom part of the panel, under &#39;Write-Only API keys&#39;, either copy the API key or click on &#39;Generate New&#39; and copy the new API key.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Add an event to local buffer&lt;/h3&gt; &#xA;&lt;p&gt;To add an event to local buffer, you can call &lt;code&gt;TreasureData&lt;/code&gt;&#39;s &lt;code&gt;addEvent&lt;/code&gt; or &lt;code&gt;addEventWithCallback&lt;/code&gt; API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (IBAction)clickButton:(id)sender {&#xA;    [[TreasureData sharedInstance] addEventWithCallback:@{&#xA;                       @&#34;name&#34;: @&#34;boo bar&#34;,&#xA;                       @&#34;age&#34;: @42,&#xA;                       @&#34;comment&#34;: @&#34;hello world&#34;&#xA;                   }&#xA;                   database:@&#34;testdb&#34;&#xA;                      table:@&#34;demotbl&#34;&#xA;                  onSuccess:^(){&#xA;                      NSLog(@&#34;addEvent: success&#34;);&#xA;                  }&#xA;                    onError:^(NSString* errorCode, NSString* message) {&#xA;                        NSLog(@&#34;addEvent: error. errorCode=%@, message=%@&#34;, errorCode, message);&#xA;                    }];&#xA;                    &#xA;    // Or, simply...&#xA;    //   [[TreasureData sharedInstance] addEvent:@{&#xA;    //                     @&#34;name&#34;: @&#34;boo bar&#34;,&#xA;    //                     @&#34;age&#34;: @42,&#xA;    //                     @&#34;comment&#34;: @&#34;hello world&#34;&#xA;    //                 }&#xA;    //                 database:@&#34;testdb&#34;&#xA;    //                    table:@&#34;demotbl&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specify the database and table to which you want to import the events. The total length of database and table must be shorter than 129 chars. Each table will cache no more than 10000 events.&lt;/p&gt; &#xA;&lt;p&gt;On top of that, the length of key in event must not exceed 256 chars and the length of value in event must not exceed 10000 chars.&lt;/p&gt; &#xA;&lt;h3&gt;Upload buffered events to TreasureData&lt;/h3&gt; &#xA;&lt;p&gt;To upload events buffered events to Treasure Data, you can call &lt;code&gt;TreasureData&lt;/code&gt;&#39;s &lt;code&gt;uploadEvents&lt;/code&gt; or &lt;code&gt;uploadEventsWithCallback&lt;/code&gt; API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (void)applicationDidEnterBackground:(UIApplication *)application {&#xA;&#x9;__block UIBackgroundTaskIdentifier bgTask = [application beginBackgroundTaskWithExpirationHandler:^{&#xA;&#x9;&#x9;[application endBackgroundTask:bgTask];&#xA;&#x9;&#x9;bgTask = UIBackgroundTaskInvalid;&#xA;&#x9;}];&#xA;&#xA;    // You can call this API to uplaod buffered events whenever you want.&#xA;&#x9;[[TreasureData sharedInstance] uploadEventsWithCallback:^() {&#xA;&#x9;&#x9;&#x9;[application endBackgroundTask:bgTask];&#xA;&#x9;&#x9;&#x9;bgTask = UIBackgroundTaskInvalid;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;onError:^(NSString *code, NSString *msg) {&#xA;&#x9;&#x9;&#x9;[application endBackgroundTask:bgTask];&#xA;&#x9;&#x9;&#x9;bgTask = UIBackgroundTaskInvalid;&#xA;&#x9;&#x9;}&#xA;&#x9;];&#xA;&#xA;    // Or, simply...&#xA;    //  [[TreasureData sharedInstance] uploadEvents];&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It depends on the characteristic of your application when to upload and how often to upload buffered events. But we recommend the followings at least as good timings to upload.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When the current screen is closing or moving to background&lt;/li&gt; &#xA; &lt;li&gt;When closing the application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The sent events is going to be buffered for a few minutes before they get imported into Treasure Data storage.&lt;/p&gt; &#xA;&lt;p&gt;In tvOS, cache storage is stored in cache directory which can be purged at any time. It is highly recommended to call upload events APIs as requently as possible to prevent loss of data.&lt;/p&gt; &#xA;&lt;h3&gt;Retry uploading and deduplication&lt;/h3&gt; &#xA;&lt;p&gt;This SDK imports events in exactly once style with the combination of these features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This SDK keeps buffered events with adding unique keys and retries to upload them until confirming the events are uploaded and stored on server side (at least once)&lt;/li&gt; &#xA; &lt;li&gt;The server side remembers the unique keys of all events within the past 1 hours by default and prevents duplicated imports (at most once)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As for the deduplication window is 1 hour by default, so it&#39;s important not to keep buffered events more than 1 hour to avoid duplicated events.&lt;/p&gt; &#xA;&lt;h3&gt;Default values&lt;/h3&gt; &#xA;&lt;p&gt;Set a default value if you want an event added to a table, a database, or any table or database to automatically set value for a key. If you have multiple default values set to the same key, newly added event will have the default value applied and override in following order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Default value targeting all table and database will be applied first.&lt;/li&gt; &#xA; &lt;li&gt;Default value targeting all table in a database will then be applied.&lt;/li&gt; &#xA; &lt;li&gt;Default value targeting the table to which the event is added will then be applied.&lt;/li&gt; &#xA; &lt;li&gt;Default value targeting the table and database to which the event is added will then be applied.&lt;/li&gt; &#xA; &lt;li&gt;Finally, if the event has a value for the key, that value will override all default values.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To set default value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[TreasureData sharedInstance] setDefaultValue:@&#34;Value&#34; forKey:@&#34;key&#34; database:nil table:nil]; // Targeting all databases and tables&#xA;[[TreasureData sharedInstance] setDefaultValue:@&#34;Value&#34; forKey:@&#34;key&#34; database:&#34;database_name&#34; table:nil]; // Targeting all tables of database &#34;database_name&#34;&#xA;[[TreasureData sharedInstance] setDefaultValue:@&#34;Value&#34; forKey:@&#34;key&#34; database:nil table:&#34;table_name&#34;]; // Targeting all tables with &#34;table_name&#34;&#xA;[[TreasureData sharedInstance] setDefaultValue:@&#34;Value&#34; forKey:@&#34;key&#34; database:&#34;database_name&#34; table:&#34;table_name&#34;]; // Targeting table &#34;table_name&#34; of database &#34;database_name&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get default value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NSString *defaultValue = [[TreasureData sharedInstance] defaultValueForKey:@&#34;key&#34; database:&#34;database_name&#34; table:&#34;table_name&#34;]; // Get default value for key targeting database &#34;database_name&#34; and table &#34;table_name&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To remove default value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[TreasureData sharedInstance] removeDefaultValueForKey:@&#34;key&#34; database:&#34;database_name&#34; table:&#34;table_name&#34;]; // Only remove default values targeting database &#34;database_name&#34; and table &#34;table_name&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start/End session&lt;/h3&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;startSession&lt;/code&gt; method, the SDK generates a session ID that&#39;s kept until &lt;code&gt;endSession&lt;/code&gt; is called. The session id is outputs as a column name &#34;td_session_id&#34;. Also, &lt;code&gt;startSession&lt;/code&gt; and &lt;code&gt;endSession&lt;/code&gt; methods add an event that includes &lt;code&gt;{&#34;td_session_event&#34;:&#34;start&#34; or &#34;end&#34;}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&#xA;{&#xA;&#x9;[TreasureData initializeWithApiKey:@&#34;your_api_key&#34;];&#xA;&#x9;[[TreasureData sharedInstance] setDefaultDatabase:@&#34;testdb&#34;];&#xA;&#x9;[[TreasureData sharedInstance] startSession:@&#34;demotbl&#34;];&#xA;}&#xA;&#xA;- (void)applicationDidEnterBackground:(UIApplication *)application&#xA;{&#xA;&#x9;[[TreasureData sharedInstance] endSession:@&#34;demotbl&#34;];&#xA;&#xA;&#x9;__block UIBackgroundTaskIdentifier bgTask = [application beginBackgroundTaskWithExpirationHandler:^{&#xA;&#x9;&#x9;[application endBackgroundTask:bgTask];&#xA;&#x9;&#x9;bgTask = UIBackgroundTaskInvalid;&#xA;&#x9;}];&#xA;&#xA;&#x9;[[TreasureData sharedInstance] uploadEventsWithCallback:^() {&#xA;&#x9;&#x9;&#x9;[application endBackgroundTask:bgTask];&#xA;&#x9;&#x9;&#x9;bgTask = UIBackgroundTaskInvalid;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;onError:^(NSString *code, NSString *msg) {&#xA;&#x9;&#x9;&#x9;[application endBackgroundTask:bgTask];&#xA;&#x9;&#x9;&#x9;bgTask = UIBackgroundTaskInvalid;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;// Outputs =&amp;gt;&amp;gt;&#xA;&#x9;&#x9;//   [{&#34;td_session_id&#34;:&#34;cad88260-67b4-0242-1329-2650772a66b1&#34;,&#xA;&#x9;&#x9;//&#x9;&#x9;&#34;td_session_event&#34;:&#34;start&#34;, &#34;time&#34;:1418880000},&#xA;&#x9;&#x9;//&#xA;&#x9;&#x9;//    {&#34;td_session_id&#34;:&#34;cad88260-67b4-0242-1329-2650772a66b1&#34;,&#xA;&#x9;&#x9;//&#x9;&#x9;&#34;td_session_event&#34;:&#34;end&#34;, &#34;time&#34;:1418880123}&#xA;&#x9;&#x9;//    ]&#xA;&#x9;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to handle the following case, use a pair of class methods &lt;code&gt;startSession&lt;/code&gt; and &lt;code&gt;endSession&lt;/code&gt; for global session tracking&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User opens the application and starts session tracking using &lt;code&gt;startSession&lt;/code&gt;. Let&#39;s call this session session#0&lt;/li&gt; &#xA; &lt;li&gt;User moves to home screen and finishes the session using &lt;code&gt;endSession&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;User reopens the application and restarts session tracking within default 10 seconds. But you want to deal with this new session as the same session as session#0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (void)applicationDidBecomeActive:(UIApplication *)application&#xA;{&#xA;&#x9;[TreasureData startSession];&#xA;}&#xA;&#xA;- (void)applicationDidEnterBackground:(UIApplication *)application&#xA;{&#xA;&#x9;[TreasureData endSession];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, you can get the current session ID using &lt;code&gt;getSessionId&lt;/code&gt; class method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (void)applicationDidBecomeActive:(UIApplication *)application&#xA;{&#xA;&#x9;[TreasureData startSession];&#xA;    NSLog(@&#34;Session ID=%@&#34;, [TreasureData getSessionId]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Detect if it&#39;s the first running&lt;/h3&gt; &#xA;&lt;p&gt;You can detect if it&#39;s the first running or not easily using &lt;code&gt;isFirstRun&lt;/code&gt; method and then clear the flag with &lt;code&gt;clearFirstRun&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&#xA;&#x9;&#x9;:&#xA;    if ([[TreasureData sharedInstance] isFirstRun]) {&#xA;        [[TreasureData sharedInstance] addEventWithCallback:@{ @&#34;event&#34;: @&#34;installed&#34; }&#xA;                               database:@&#34;testdb&#34;&#xA;                                  table:@&#34;demotbl&#34;&#xA;                              onSuccess:^(){&#xA;                                  [[TreasureData sharedInstance] uploadEventsWithCallback:^() {&#xA;                                      [[TreasureData sharedInstance] clearFirstRun];&#xA;                                    }&#xA;                                    onError:^(NSString* errorCode, NSString* message) {&#xA;                                      NSLog(@&#34;uploadEvents: error. errorCode=%@, message=%@&#34;, errorCode, message);&#xA;                                    }&#xA;                                   ];&#xA;                                }&#xA;                                onError:^(NSString* errorCode, NSString* message) {&#xA;                                    NSLog(@&#34;addEvent: error. errorCode=%@, message=%@&#34;, errorCode, message);&#xA;                                }];&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About Error code&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;addEventWithCallback&lt;/code&gt; and &lt;code&gt;uploadEventsWithCallback&lt;/code&gt; methods call back &lt;code&gt;onError&lt;/code&gt; block with &lt;code&gt;errorCode&lt;/code&gt; argument. This argument is useful to know the cause type of the error. There are the following error codes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;init_error&lt;/code&gt; : The initialization failed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;invalid_param&lt;/code&gt; : The parameter passed to the API was invalid&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;invalid_event&lt;/code&gt; : The event was invalid&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data_conversion&lt;/code&gt; : Failed to convert the data to/from JSON&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;storage_error&lt;/code&gt; : Failed to read/write data in the storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;network_error&lt;/code&gt; : Failed to communicate with the server due to network problem&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server_response&lt;/code&gt; : The server returned an error response&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Endpoint&lt;/h3&gt; &#xA;&lt;p&gt;The API endpoint (default: &lt;a href=&#34;https://us01.records.in.treasuredata.com&#34;&gt;https://us01.records.in.treasuredata.com&lt;/a&gt;) can be specify using &lt;code&gt;+[TreasureData initializeWithApiKey:apiEndpoint]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[TreasureData initializeWithApiKey:@&#34;your_api_key&#34; apiEndpoint: @&#34;https://specifying-another-endpoint.com&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encryption key&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;ve set an encryption key via &lt;code&gt;initializeEncryptionKey&lt;/code&gt; class method, our SDK saves the events data as encrypted when called &lt;code&gt;addEvent&lt;/code&gt; or &lt;code&gt;addEventWithCallback&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[TreasureData initializeEncryptionKey:@&#34;hello world&#34;];&#xA;&#xA;[[TreasureData sharedInstance] addEventWithCallback: ....];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default database&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[TreasureData sharedInstance] setDefaultDatabase:@&#34;testdb&#34;];&#xA;&#xA;[[TreasureData sharedInstance] addEventWithCallback:@{ @&#34;event&#34;: @&#34;clicked&#34; } table:@&#34;demotbl&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding UUID of the device to each event automatically&lt;/h3&gt; &#xA;&lt;p&gt;UUID of the device will be added to each event automatically if you call &lt;code&gt;enableAutoAppendUniqId&lt;/code&gt;. This value won&#39;t change until the application is uninstalled or &lt;code&gt;resetUniqId&lt;/code&gt; is called.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[TreasureData sharedInstance] enableAutoAppendUniqId];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It outputs the value as a column name &lt;code&gt;td_uuid&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Get UUID and Reset UUID&lt;/h3&gt; &#xA;&lt;p&gt;You can get current UUID (&lt;code&gt;td_uuid&lt;/code&gt;) at any time using following API. Remember that this UUID will change if &lt;code&gt;resetUniqId&lt;/code&gt; is called.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NSString *td_uuid = [[TreasureData sharedInstance] getUUID];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also reset UUID (&lt;code&gt;td_uuid&lt;/code&gt;) at any time using following API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[TreasureData sharedInstance] resetUniqId];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding local time to each even record automatically (enabled by default)&lt;/h3&gt; &#xA;&lt;p&gt;By default, local timestamp will be added to event&#39;s &lt;code&gt;time&lt;/code&gt; key automatically. If you &lt;code&gt;disableAutoAppendLocalTimestamp&lt;/code&gt; without adding &lt;code&gt;time&lt;/code&gt; key to the event yourself, the server will add server side timestamp to &lt;code&gt;time&lt;/code&gt; column. You can also auto track local time with custom column. If so, the &lt;code&gt;time&lt;/code&gt; column will have server side timestamp.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Use local time as `time` column&#xA;[[TreasureData sharedInstance] enableAutoAppendLocalTimestamp];&#xA;&#xA;// Add local time as a customized column name&#xA;[[TreasureData sharedInstance] enableAutoAppendLocalTimestamp:@&#34;clientside_time&#34;];&#xA;&#xA;// Disable auto append local time&#xA;[[TreasureData sharedInstance] disableAutoAppendLocalTimestamp];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding an UUID to each event record automatically&lt;/h3&gt; &#xA;&lt;p&gt;UUID will be added to each event record automatically if you call &lt;code&gt;enableAutoAppendRecordUUID&lt;/code&gt;. Each event has different UUID.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[TreasureData sharedInstance] enableAutoAppendRecordUUID];&#xA;&#xA;// If you want to customize the column name, pass it to the API&#xA;[[TreasureData sharedInstance] enableAutoAppendRecordUUID:@&#34;my_record_uuid&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It outputs the value as a column name &lt;code&gt;record_uuid&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;h3&gt;Adding Advertising Id to each event record automatically&lt;/h3&gt; &#xA;&lt;p&gt;Advertising Id will be added to each event record automatically if you call &lt;code&gt;enableAutoAppendAdvertisingIdentifier&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You must link Ad Support framework in Link Binary With Libraries build phase for this feature to work. User must also not turn on Limit Ad Tracking feature in their iOS device, otherwise Treasure Data will send zero filled string as the advertising id (the value we get from Ad Support framework).&lt;/p&gt; &#xA;&lt;p&gt;Starting in iOS 14, you will have to explicitly request user&#39;s permission for advertising identifier using AppTrackingTransparency framework. Consult Apple official documentation for AppTrackingTransparency on how to implement this requirement.&lt;/p&gt; &#xA;&lt;p&gt;If you turn on this feature, keep in mind that you will have to declare correct reason for getting advertising identifier when you submit your app for review to the App Store.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[TreasureData sharedInstance] enableAutoAppendAdvertisingIdentifier];&#xA;&#xA;// If you want to customize the column name, pass it to the API&#xA;[[TreasureData sharedInstance] enableAutoAppendAdvertisingIdentifier:@&#34;custom_ad_id_column&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It outputs the value as a column name &lt;code&gt;td_maid&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;h3&gt;Adding the device model information to each event automatically&lt;/h3&gt; &#xA;&lt;p&gt;Device model infromation will be added to each event automatically if you call &lt;code&gt;enableAutoAppendModelInformation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[TreasureData sharedInstance] enableAutoAppendModelInformation];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It outputs the following column names and values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;td_device&lt;/code&gt; : UIDevice.model&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;td_model&lt;/code&gt; : UIDevice.model&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;td_os_ver&lt;/code&gt; : UIDevice.model.systemVersion&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;td_os_type&lt;/code&gt; : &#34;iOS&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Adding application version information to each event automatically&lt;/h3&gt; &#xA;&lt;p&gt;Application version infromation will be added to each event automatically if you call &lt;code&gt;enableAutoAppendAppInformation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[TreasureData sharedInstance] enableAutoAppendAppInformation];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It outputs the following column names and values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;td_app_ver&lt;/code&gt; : Core Foundation key &lt;code&gt;CFBundleShortVersionString&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;td_app_ver_num&lt;/code&gt; : Core Foundation key &lt;code&gt;CFBundleVersion&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Adding locale configuration information to each event automatically&lt;/h3&gt; &#xA;&lt;p&gt;Locale configuration infromation will be added to each event automatically if you call &lt;code&gt;enableAutoAppendLocaleInformation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[TreasureData sharedInstance] enableAutoAppendLocaleInformation];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It outputs the following column names and values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;td_locale_country&lt;/code&gt; : &lt;code&gt;[[NSLocale currentLocale] objectForKey: NSLocaleCountryCode]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;td_locale_lang&lt;/code&gt; : &lt;code&gt;[[NSLocale currentLocale] objectForKey: NSLocaleLanguageCode]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Enable/Disable debug log&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;[TreasureData enableLogging];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;[TreasureData disableLogging];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automatically tracked events&lt;/h3&gt; &#xA;&lt;p&gt;Notes that all of these are *&lt;em&gt;disabled by default&lt;/em&gt;, you have to explicitly enable it for each category.&lt;/p&gt; &#xA;&lt;h4&gt;App Lifecycle Events&lt;/h4&gt; &#xA;&lt;p&gt;Could be enabled with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[TreasureData sharedInstance] enableAppLifecycleEvent];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are 3 type of app lifecycle events that are tracked: &lt;code&gt;TD_IOS_APP_OPEN&lt;/code&gt;, &lt;code&gt;TD_IOS_APP_INSTALL&lt;/code&gt; and &lt;code&gt;TD_IOS_APP_UPDATE&lt;/code&gt; (is written to &lt;code&gt;td_ios_event&lt;/code&gt; column).&lt;/p&gt; &#xA;&lt;p&gt;Example of a tracked install event:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;td_ios_event&#34; = &#34;TD_IOS_APP_INSTALL&#34;;&#xA;&#34;td_app_ver&#34; = &#34;1.1&#34;;&#xA;&#34;td_app_ver_num&#34; = 2;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;In-App Purchase Events&lt;/h4&gt; &#xA;&lt;p&gt;TreasureData SDK is able to automatically track IAP &lt;code&gt;SKPaymentTransactionStatePurchased&lt;/code&gt; event without having to write your own transaction observer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[TreasureData sharedInstance] enableInAppPurchaseEvent];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is disabled by default. There is a subtle difference between this and &lt;code&gt;appLifecycleEvent&lt;/code&gt;, &lt;code&gt;customEvent&lt;/code&gt;. The other two, for a historical reason, are persistent settings, meaning their statuses are saved across app launches. &lt;code&gt;inAppPurchaseEvent&lt;/code&gt; behaves like an ordinary object option and is not saved. You have to enable it after initialize your new &lt;code&gt;TreasureData&lt;/code&gt; instance (probably only the &lt;code&gt;sharedInstance&lt;/code&gt; with &lt;code&gt;initializeWithApiKey&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;An example of a IAP event:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;td_ios_event&#34;: &#34;TD_IOS_IN_APP_PURCHASE&#34;,&#xA;&#34;td_iap_transaction_identifier&#34;: &#34;1000000514091400&#34;,&#xA;&#34;td_iap_transaction_date&#34;: &#34;2019-03-28T08:44:12+07:00&#34;,&#xA;&#34;td_iap_quantity&#34;: 1,&#xA;&#34;td_iap_product_identifier&#34;: &#34;com.yourcompany.yourapp.yourproduct&#34;, ,&#xA;&#34;td_iap_product_price&#34;: 0.99,&#xA;&#34;td_iap_product_localized_title&#34;: &#34;Your Product Title&#34;,&#xA;&#34;td_iap_product_localized_description&#34;: &#34;Your Product Description&#34;,&#xA;&#34;td_iap_product_currency_code&#34;: &#34;USD&#34;,  // this is only available on iOS 10 and above&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We will do a separated &lt;code&gt;SKProductsRequest&lt;/code&gt; to get full product&#39;s information. If the request is failed somehow, fields with &#34;td_iap_product_&#34; prefix will be null. Also note that that the &lt;code&gt;currency_code&lt;/code&gt; is only available from iOS 10 onwards.&lt;/p&gt; &#xA;&lt;h4&gt;Profile API&lt;/h4&gt; &#xA;&lt;h5&gt;fetchUserSegments&lt;/h5&gt; &#xA;&lt;p&gt;This feature is not enabled on accounts by default, please contact support for more information. Important! You must set cdpEndpoint property of TreasureData&#39;s sharedInstance. Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Set cdpEndpoint when initialize TreasureData  &#xA;[[TreasureData sharedInstance] setCdpEnpoint: @&#34;[your cdp endpoint goes here]&#34;]&#xA;&#xA;// Call fetchUserSegments to get user segments as NSArray&#xA;&#xA;NSArray *audienceTokens = @[@&#34;Your Profile API (Audience) Token here&#34;];&#xA;NSDictionary *keys = @{@&#34;your_key&#34;: @&#34;your_value&#34;};&#xA;NSDictionary&amp;lt;TDRequestOptionsKey, id&amp;gt; *options = @{&#xA;    TDRequestOptionsTimeoutIntervalKey: [NSNumber numberWithInteger: 10],&#xA;    TDRequestOptionsCachePolicyKey: [NSNumber numberWithUnsignedInteger: NSURLRequestReloadIgnoringCacheData]&#xA;};&#xA;[[TreasureData sharedInstance] fetchUserSegments:audienceTokens&#xA;                                            keys:keys&#xA;                                         options:options&#xA;                               completionHandler:^(NSArray * _Nullable jsonResponse, NSError * _Nullable error) {&#xA;   NSLog(@&#34;fetchUserSegments jsonResponse: %@&#34;, jsonResponse);&#xA;   NSLog(@&#34;fetchUserSegments error: %@&#34;, error);&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GDPR Compliance&lt;/h2&gt; &#xA;&lt;p&gt;The SDK provide some convenient methods to easily opt-out of tracking the device entirely without having to resort to many cluttered if-else statements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Opt-out of your own events&#xA;[[TreasureData sharedInstance] disableCustomEvent];&#xA;// Opt-out of TD generated events&#xA;[[TreasureData sharedInstance] disableAppLifecycleEvent];&#xA;[[TreasureData sharedInstance] disableInAppPurchaseEvent];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These can be opted back in by calling &lt;code&gt;enableCustomEvent&lt;/code&gt; or &lt;code&gt;enableAppLifecycleEvent&lt;/code&gt;. Note that these settings are saved persistently, so it survives across app launches. Generally these methods should be called when reflecting your user&#39;s choice, not on every time initializing the SDK. By default custom events are enabled and app lifecycles events are disabled.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;resetUniqId&lt;/code&gt; to reset the identification of device on subsequent events. &lt;code&gt;td_uuid&lt;/code&gt; will be randomized to another value and an extra event is captured with &lt;code&gt;{&#34;td_ios_event&#34;: &#34;forget_device_id&#34;, &#34;td_uuid&#34;: &amp;lt;old_uuid&amp;gt;}&lt;/code&gt; to the &lt;code&gt;defaultTable&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;tvOS&lt;/h2&gt; &#xA;&lt;p&gt;This SDK supports Apple tvOS version 12 and up. APIs and their behaviors are largely the same as being used in iOS application, except:&lt;/p&gt; &#xA;&lt;p&gt;! In tvOS, cache storage is stored in cache directory which can be purged at any time. It is highly recommended to call upload events APIs as requently as possible to prevent loss of data.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h4&gt;With &#34;Data Protection&#34; enabled, TD iOS SDK occasionally crashes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If your app calls the SDK&#39;s API such as &lt;code&gt;TreasureData#endSession&lt;/code&gt; in &lt;code&gt;UIApplicationDelegate applicationDidEnterBackground&lt;/code&gt;, check if it&#39;s likely the app calls the SDK&#39;s API several seconds after iOS is locked. If so, please make other tasks that takes time and is called prior to the SDK&#39;s API run in background.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (void)applicationWillResignActive:(UIApplication *)application&#xA;{&#xA;    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{&#xA;        // Some tasks that can take more than 10 seconds.&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage in Swift&lt;/h2&gt; &#xA;&lt;p&gt;See this example project (&lt;a href=&#34;https://github.com/treasure-data/td-ios-sdk/tree/master/TreasureDataExampleSwift&#34;&gt;https://github.com/treasure-data/td-ios-sdk/tree/master/TreasureDataExampleSwift&lt;/a&gt;) for details.&lt;/p&gt; &#xA;&lt;h2&gt;Xcode Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;The current version has been built and tested with XCode v10.2.&lt;/p&gt; &#xA;&lt;h2&gt;Supported OS versions&lt;/h2&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;iOS Version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;v0.8.0&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;v0.9.0&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;v1.0.1&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;v1.1.0&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;not tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;tvOS&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;tvOS Version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;v0.8.0&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;v0.9.0&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;v1.0.1&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;v1.1.0&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;12 and up&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>PoomSmart/TrollLEDs</title>
    <updated>2024-01-23T01:39:16Z</updated>
    <id>tag:github.com,2024-01-23:/PoomSmart/TrollLEDs</id>
    <link href="https://github.com/PoomSmart/TrollLEDs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A TrollStore application to control individual flashlight LEDs for iOS devices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TrollLEDs&lt;/h1&gt; &#xA;&lt;p&gt;A TrollStore application to control individual flashlight LEDs for iOS devices.&lt;/p&gt; &#xA;&lt;p&gt;When used on a jailbroken device, remove Amber tweak becase this app will simply be overridden by it.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Devices&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 12 or higher (Tested on iOS 12, 14, 15, 16, 17), lower versions are not supported/tested&lt;/li&gt; &#xA; &lt;li&gt;iPhone or iPad with multiple of different flashlight LEDs (e.g. amber and regular white)&lt;/li&gt; &#xA; &lt;li&gt;Devices with single-color flashlight LED(s) are not supported, such as iPhone 4s and iPhone 5&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;iPhone 14 series and higher are not supported&lt;/strong&gt;, as &lt;a href=&#34;https://appleinsider.com/articles/22/09/20/how-iphone-14-pro-adaptive-true-tone-flash-creates-perfect-light-for-your-photos&#34;&gt;Apple has completely redesigned the flashlight LEDs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage (Quad-LEDs Devices)&lt;/h2&gt; &#xA;&lt;p&gt;Quad-LEDs devices are devices with four programmatically configurable flashlight LEDs, two white and two amber. This includes the devices such as iPhone 11 and iPad Pro 3rd generation.&lt;/p&gt; &#xA;&lt;p&gt;There are four sliders in the app:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;Cool LED 0&lt;/code&gt; - The brightness of the first white LED&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Cool LED 1&lt;/code&gt; - The brightness of the second white LED&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Warm LED 0&lt;/code&gt; - The brightness of the first amber LED&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Warm LED 1&lt;/code&gt; - The brightness of the second amber LED&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Each slider can be adjusted independently. The more the value, the more brightness of the LED will get. If the value is set to 0, the LED will be off. If all sliders are set to 0, all LEDs will be off.&lt;/p&gt; &#xA;&lt;p&gt;Devices with four physical LEDs such as iPad Pro 3rd generation will get the maximum brightness of the LEDs when all sliders are set to 100%. However, devices with two physical LEDs such as iPhone 11 will get the maximum brightness of the LEDs when &lt;code&gt;Cool LED 0&lt;/code&gt; and &lt;code&gt;Warm LED 0&lt;/code&gt; are set to 100%, while the others are set to 0%. The &lt;code&gt;Cool LED 1&lt;/code&gt; and &lt;code&gt;Warm LED 1&lt;/code&gt; sliders only act as a low brightness mode for their &lt;code&gt;LED 0&lt;/code&gt; equivalent.&lt;/p&gt; &#xA;&lt;h2&gt;Usage (Dual-LEDs Devices)&lt;/h2&gt; &#xA;&lt;p&gt;Dual-LEDs devices are devices with two programmatically configurable flashlight LEDs, such as iPhone 5s and iPhone SE 1st generation.&lt;/p&gt; &#xA;&lt;p&gt;There are two sliders in the app:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;Torch Level&lt;/code&gt; - The brightness of the LEDs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Warmth&lt;/code&gt; - The &#34;warmth&#34; of the light color&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Unlike &lt;a href=&#34;https://github.com/PoomSmart/Amber&#34;&gt;Amber tweak&lt;/a&gt;, this app cannot force the two LEDs to be on at the same time. You can use &lt;code&gt;Torch Level&lt;/code&gt; slider to control the brightness of the LEDs just as you can from the Control Center, but the &lt;code&gt;Warmth&lt;/code&gt; slider will only set the warm percentile of the scene. The more the value, the more brightness of the amber LED will get, resulting in a warmer light color. If &lt;code&gt;Warmth&lt;/code&gt; is set to the max, only the amber LED will be on.&lt;/p&gt; &#xA;&lt;h2&gt;Limitation&lt;/h2&gt; &#xA;&lt;p&gt;TrollLEDs utilizes the &lt;code&gt;mediaserverd&lt;/code&gt;-exclusive &lt;code&gt;BWFigCaptureDeviceVendor&lt;/code&gt; class to control the flashlight LEDs. This creates an instance of &lt;code&gt;BWFigCaptureDevice&lt;/code&gt; (or &lt;code&gt;OpaqueFigCaptureDeviceRef&lt;/code&gt;). There can only be one instance at a time, so if there is another app that creates it (i.e., &lt;code&gt;mediaserverd&lt;/code&gt;), TrollLEDs will not be able to control the flashlight LEDs. This is why there is a switch at the top of the app to lock the flashlight LEDs to TrollLEDs only. If you want to use the LEDs (or use the Camera app) from somewhere else, you can either turn off the switch (and wait few seconds) or kill the app.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;As &lt;code&gt;.tipa&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make package FINALPACKAGE=1 PACKAGE_FORMAT=ipa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;AS &lt;code&gt;.deb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make package FINALPACKAGE=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Future Plans&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;More accessible sliders (are they too small?)&lt;/li&gt; &#xA; &lt;li&gt;Better error handling?&lt;/li&gt; &#xA; &lt;li&gt;Refactor code (well, a lot of them were suggested by GPT/Copilot and I don&#39;t usually write an iOS app)&lt;/li&gt; &#xA; &lt;li&gt;See if we can get a better app icon (I&#39;m not a designer and the current one is evently generated by AI)&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>kanyun-inc/YTKNetwork</title>
    <updated>2024-01-23T01:39:16Z</updated>
    <id>tag:github.com,2024-01-23:/kanyun-inc/YTKNetwork</id>
    <link href="https://github.com/kanyun-inc/YTKNetwork" rel="alternate"></link>
    <summary type="html">&lt;p&gt;YTKNetwork is a high level request util based on AFNetworking.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;YTKNetwork&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000&#34; alt=&#34;License MIT&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/v/YTKNetwork.svg?style=flat&#34; alt=&#34;Pod version&#34;&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/YTKNetwork&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/YTKNetwork.svg?style=flat&#34; alt=&#34;Platform info&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/yuantiku/YTKNetwork&#34;&gt;&lt;img src=&#34;https://api.travis-ci.org/yuantiku/YTKNetwork.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&lt;/h2&gt; &#xA;&lt;p&gt;YTKNetwork is a high level request util based on &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking&#34;&gt;AFNetworking&lt;/a&gt;. It&#39;s developed by the iOS Team of YuanTiKu. It provides a High Level API for&amp;nbsp;network request.&lt;/p&gt; &#xA;&lt;p&gt;YTKNetwork is used in all products of YuanTiKu, including: &lt;a href=&#34;http://www.yuantiku.com&#34;&gt;YuanTiKu&lt;/a&gt;, &lt;a href=&#34;http://www.yuansouti.com/&#34;&gt;YuanSoTi&lt;/a&gt;, &lt;a href=&#34;http://www.yuanfudao.com&#34;&gt;YuanFuDao&lt;/a&gt;, &lt;a href=&#34;http://ke.fenbi.com/&#34;&gt;FenBiZhiBoKe&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kanyun-inc/YTKNetwork/master/Docs/README_cn.md&#34;&gt;&lt;strong&gt;中文说明&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Response can be cached by expiration time&lt;/li&gt; &#xA; &lt;li&gt;Response can be cached by version number&lt;/li&gt; &#xA; &lt;li&gt;Set common base URL and CDN URL&lt;/li&gt; &#xA; &lt;li&gt;Validate JSON response&lt;/li&gt; &#xA; &lt;li&gt;Resume download&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;block&lt;/code&gt; and &lt;code&gt;delegate&lt;/code&gt; callback&lt;/li&gt; &#xA; &lt;li&gt;Batch requests (see &lt;code&gt;YTKBatchRequest&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Chain requests (see &lt;code&gt;YTKChainRequest&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;URL filter, replace part of URL, or append common parameter&amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;Plugin mechanism, handle request start and finish. A plugin for show &#34;Loading&#34; HUD is provided&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who&lt;/h2&gt; &#xA;&lt;p&gt;YTKNetowrk is suitable for a slightly more complex project, not for a simple personal project.&lt;/p&gt; &#xA;&lt;p&gt;YTKNetwork is helpful if you want to cache requests, manage the dependences of requests, or validate the JSON response. And if you want to cache requests based on request version, this is one of the greatest advantages of YTKNetwork.&lt;/p&gt; &#xA;&lt;h2&gt;Why&amp;nbsp;&lt;/h2&gt; &#xA;&lt;p&gt;YTKNetwork provides YTKRequest to handle every network request. You should inherit it and override some methods to define custom requests in your project.&lt;/p&gt; &#xA;&lt;p&gt;The main idea is use the Command Pattern. The benefits are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your code is decoupled to detail network request framework, it&#39;s easy to replace it. Actually, YTKNetwork is originally based on ASIHttpRequest, we just spent two days to switch to AFNetworking.&lt;/li&gt; &#xA; &lt;li&gt;Handle common logic in base class.&lt;/li&gt; &#xA; &lt;li&gt;Easier Persistence&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But YTKNetwork is not suitable if your project is very simple. You can use AFNetworking directly in controller.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use YTKNetwork add the following to your Podfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;YTKNetwork&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or add this in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;yuantiku/YTKNetwork&#34; ~&amp;gt; 3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;YTKNetwork Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AFNetworking Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Minimum iOS Target&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 9&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 11+ is required.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 7+ is required.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 6&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;n/a&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;YTKNetwork is based on AFNetworking. You can find more detail about version compatibility at &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking&#34;&gt;AFNetworking README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Guide &amp;amp; Demo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kanyun-inc/YTKNetwork/master/Docs/BasicGuide_en.md&#34;&gt;Basic Usage Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kanyun-inc/YTKNetwork/master/Docs/2.0_MigrationGuide_cn.md&#34;&gt;YTKNetwork 2.0 Migration Guide(Simplified Chinese)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lancy&#34;&gt;lancy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maojj&#34;&gt;maojj&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/veecci&#34;&gt;veecci&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tangqiaoboy&#34;&gt;tangqiaoboy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skyline75489&#34;&gt;skyline75489&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joeshang&#34;&gt;joeshang&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AFNetworking/AFNetworking&#34;&gt;AFNetworking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/steipete/AFDownloadRequestOperation&#34;&gt;AFDownloadRequestOperation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks for their great work.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;YTKNetwork is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;!-- external links --&gt;</summary>
  </entry>
</feed>