<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-22T01:36:06Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ivanlisovyi/InputValidators</title>
    <updated>2023-08-22T01:36:06Z</updated>
    <id>tag:github.com,2023-08-22:/ivanlisovyi/InputValidators</id>
    <link href="https://github.com/ivanlisovyi/InputValidators" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Objective-C text validation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;InputValidators&lt;/h1&gt; &#xA;&lt;p&gt;Simple Objective-C solution for text validation.&lt;/p&gt; &#xA;&lt;p&gt;Currently available validators:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Required validator&lt;/li&gt; &#xA; &lt;li&gt;Email validator&lt;/li&gt; &#xA; &lt;li&gt;Alpha validator&lt;/li&gt; &#xA; &lt;li&gt;Numeric validator&lt;/li&gt; &#xA; &lt;li&gt;Length validator&lt;/li&gt; &#xA; &lt;li&gt;Regex validator&lt;/li&gt; &#xA; &lt;li&gt;Multiple validator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Important&lt;/h2&gt; &#xA;&lt;p&gt;The latest version &lt;code&gt;1.0.0&lt;/code&gt; contains breaking changes and it is &lt;strong&gt;not backward compatible&lt;/strong&gt; with previous latests version &lt;code&gt;0.3.3&lt;/code&gt;. In case if you need a support for pre iOS7 versions use previous latest version &lt;code&gt;0.3.3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 7.0 or higher&lt;/li&gt; &#xA; &lt;li&gt;iOS 7.0 or higher&lt;/li&gt; &#xA; &lt;li&gt;ARC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;The recommended approach for installating &lt;code&gt;InputValidators&lt;/code&gt; is via the &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; package manager.&lt;/p&gt; &#xA;&lt;p&gt;Edit your Podfile and add InputValidators:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pod &#39;InputValidators&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install into your Xcode project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open your project in Xcode from the .xcworkspace file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ open MyProject.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual Install&lt;/h3&gt; &#xA;&lt;p&gt;All you need to do is drop &lt;code&gt;InputValidators&lt;/code&gt; files into your project, and add &lt;code&gt;#import &#34;LKValidators.h&#34;&lt;/code&gt; to the top of classes that will use it.&lt;/p&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Text Validation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSString *email = @&#34;email@example.com&#34;&#xA;&#xA;InputValidator *validator = [LKEmailValidator validator];&#xA;NSError *error = nil;&#xA;BOOL isValid = [validator validate:email error:&amp;amp;error];&#xA;&#xA;if (!isValid) {&#xA;  NSLog(@&#34;%@&#34;, [error localizedFailureReason]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Text Validation with multiple validators&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSString *email = @&#34;email@example.com&#34;&#xA;&#xA;LKValidator *validator = [LKMultipleValidator validator];&#xA;validator.validators = [[LKRequiredInputValidator validator], [LKEmailInputValidator validator]];&#xA;NSError *error = nil;&#xA;BOOL isValid = [LKValidator validate:email error:&amp;amp;error];&#xA;&#xA;if (!isValid) {&#xA;  NSLog(@&#34;%@&#34;, [error localizedFailureReason]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;InputValidators is available under the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;Copyright Â© 2013-2015 Ivan Lisovyi, Denis Kotenko.&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gnustep/libs-base</title>
    <updated>2023-08-22T01:36:06Z</updated>
    <id>tag:github.com,2023-08-22:/gnustep/libs-base</id>
    <link href="https://github.com/gnustep/libs-base" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The GNUstep Base Library is a library of general-purpose, non-graphical Objective C objects.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GNUstep Base Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gnustep/libs-base/actions/workflows/main.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/gnustep/libs-base/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The GNUstep Base Library is a library of general-purpose, non-graphical Objective C objects. For example, it includes classes for strings, object collections, byte streams, typed coders, invocations, notifications, notification dispatchers, moments in time, network ports, remote object messaging support (distributed objects), and event loops.&lt;/p&gt; &#xA;&lt;p&gt;It provides functionality that aims to implement the non-graphical portion of the Apple&#39;s Cocoa frameworks (the Foundation library) which came from the OpenStep standard.&lt;/p&gt; &#xA;&lt;h2&gt;Initial reading&lt;/h2&gt; &#xA;&lt;p&gt;The file &lt;a href=&#34;https://raw.githubusercontent.com/gnustep/libs-base/master/NEWS&#34;&gt;NEWS&lt;/a&gt; has the library&#39;s feature history.&lt;/p&gt; &#xA;&lt;p&gt;The files &lt;a href=&#34;https://raw.githubusercontent.com/gnustep/libs-base/master/INSTALL&#34;&gt;INSTALL&lt;/a&gt; or &lt;a href=&#34;http://www.gnustep.org/resources/documentation/User/GNUstep/gnustep-howto.pdf&#34;&gt;GNUstep-HOWTO&lt;/a&gt; (from the web site) gives instructions for installing the library.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The GNUstep libraries and library resources are covered under the GNU Lesser Public License. This means you can use these libraries in any program (even non-free programs). If you distribute the libraries along with your program, you must make the improvements you have made to the libraries freely available. You should read the COPYING.LIB file for more information. All files in the &#39;Source&#39;, &#39;Headers&#39;, &#39;NSCharacterSets&#39;, &#39;NSTimeZones&#39;, and &#39;Resources&#39; directories and subdirectories under this are covered under the LGPL.&lt;/p&gt; &#xA;&lt;p&gt;GNUstep tools, test programs, and other files are covered under the GNU Public License. This means if you make changes to these programs, you cannot charge a fee, other than distribution fees, for others to use the program. You should read the COPYING file for more information. All files in the &#39;Documentation&#39;, &#39;Examples&#39;, &#39;Tools&#39;, &#39;config&#39;, and &#39;macosx&#39; directories are covered under the GPL.&lt;/p&gt; &#xA;&lt;p&gt;With GNUstep-Base, we strongly recommend the use of the ffcall libraries, which provides stack frame handling for NSInvocation and NSConnection. &#34;Ffcall is under GNU GPL. As a special exception, if used in GNUstep or in derivate works of GNUstep, the included parts of ffcall are under GNU LGPL&#34; (Text in quotes provided by the author of ffcall).&lt;/p&gt; &#xA;&lt;h2&gt;How can you help?&lt;/h2&gt; &#xA;&lt;p&gt;Give us feedback! Tell us what you like; tell us what you think could be better.&lt;/p&gt; &#xA;&lt;p&gt;Please log bug reports on the &lt;a href=&#34;https://github.com/gnustep/libs-base/issues&#34;&gt;GitHub issues page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Happy hacking!&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2005 Free Software Foundation&lt;/p&gt; &#xA;&lt;p&gt;Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>robbiehanson/XMPPFramework</title>
    <updated>2023-08-22T01:36:06Z</updated>
    <id>tag:github.com,2023-08-22:/robbiehanson/XMPPFramework</id>
    <link href="https://github.com/robbiehanson/XMPPFramework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An XMPP Framework in Objective-C for Mac and iOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/robbiehanson/XMPPFramework/master/xmppframework.png&#34; alt=&#34;XMPPFramework&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;XMPPFramework&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/robbiehanson/XMPPFramework&#34;&gt;&lt;img src=&#34;https://travis-ci.org/robbiehanson/XMPPFramework.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/robbiehanson/XMPPFramework&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/XMPPFramework.svg?style=flat&#34; alt=&#34;Version Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/?q=XMPPFramework&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/XMPPFramework.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://opensource.org/licenses/BSD-3-Clause&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD%203--Clause-orange.svg?style=flat&#34; alt=&#34;License (3-Clause BSD)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An XMPP Framework in Objective-C for the Mac and iOS development community.&lt;/p&gt; &#xA;&lt;h3&gt;Abstract&lt;/h3&gt; &#xA;&lt;p&gt;XMPPFramework provides a core implementation of RFC-3920 (the XMPP standard), along with the tools needed to read &amp;amp; write XML. It comes with multiple popular extensions (XEP&#39;s), all built atop a modular architecture, allowing you to plug-in any code needed for the job. Additionally the framework is massively parallel and thread-safe. Structured using GCD, this framework performs well regardless of whether it&#39;s being run on an old iPhone, or on a 12-core Mac Pro. (And it won&#39;t block the main thread... at all)&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;The minimum deployment target is iOS 8.0 / macOS 10.9 / tvOS 9.0.&lt;/p&gt; &#xA;&lt;h3&gt;Migration from 3.7 to 4.0&lt;/h3&gt; &#xA;&lt;p&gt;There have been a number of changes to the public API of XMPPFramework in an attempt to improve the ergnomics and safety when used with Swift. Most Objective-C projects should require no changes, with a few minor exceptions. Many (simple) changes will be required for pure Swift projects, mostly due to the new nullability annotations. The process is still not complete so please submit issues and help if possible to minimize future breaking changes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Swift Support in XMPPFrameworkSwift.framework and XMPPFramework/Swift subspec&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Modern Objective-C Syntax: Nullability annotations and generics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Most of Core, Authentication, Categories, and Utilities have been audited. Additional help is needed for Extensions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;XMPPJID &lt;code&gt;bareJID&lt;/code&gt; is now imported into Swift as &lt;code&gt;bareJID&lt;/code&gt; instead of &lt;code&gt;bare&lt;/code&gt; to prevent conflict with &lt;code&gt;bare&lt;/code&gt; String. Also applies to &lt;code&gt;domainJID&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;XMPPPresence &lt;code&gt;intShow&lt;/code&gt; has been renamed &lt;code&gt;showValue&lt;/code&gt; and is now an &lt;code&gt;XMPPPresenceShow&lt;/code&gt; enum instead of &lt;code&gt;int&lt;/code&gt;. This will be a warning in 4.0 but will be removed in 4.1.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The XMPPMessage &lt;code&gt;chatState&lt;/code&gt; string value is now imported into Swift as a native Swift String enum when using the Swift extensions. A new &lt;code&gt;chatStateValue&lt;/code&gt; property is provided for accessing the raw String value in both Swift and Obj-C.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Readonly properties are used instead of getter methods where applicable. Getter naming overrides for properties have been removed to reflect Apple&#39;s approach.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The following modules still need an audit. If you use these modules please help out and contribute some time to audit them and submit a pull request, otherwise their API may contain breaking changes in future releases.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;XEP-0191 Blocking&lt;/li&gt; &#xA;   &lt;li&gt;XEP-0199 Ping&lt;/li&gt; &#xA;   &lt;li&gt;XEP-0202 Time&lt;/li&gt; &#xA;   &lt;li&gt;XEP-0136 Archiving&lt;/li&gt; &#xA;   &lt;li&gt;XEP-0115 Capabilities (CoreDataStorage unaudited)&lt;/li&gt; &#xA;   &lt;li&gt;XEP-0045 MUC (Storage unaudited)&lt;/li&gt; &#xA;   &lt;li&gt;XEP-0054 vCardTemp (CoreDataStorage unaudited)&lt;/li&gt; &#xA;   &lt;li&gt;XEP-0016 Privacy&lt;/li&gt; &#xA;   &lt;li&gt;XEP-0012 Last Activity&lt;/li&gt; &#xA;   &lt;li&gt;XEP-0009 RPC&lt;/li&gt; &#xA;   &lt;li&gt;Roster (Storage unaudited)&lt;/li&gt; &#xA;   &lt;li&gt;XMPPGoogleSharedStatus&lt;/li&gt; &#xA;   &lt;li&gt;FileTransfer&lt;/li&gt; &#xA;   &lt;li&gt;CoreDataStorage&lt;/li&gt; &#xA;   &lt;li&gt;BandwidthMonitor&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Swift Support&lt;/h3&gt; &#xA;&lt;p&gt;XMPPFramework is now accepting contributions written in Swift, with some limitations. Swift code must be isolated in the &lt;code&gt;Swift/&lt;/code&gt; folder, and none of the existing or future Obj-C code may depend upon it. All public APIs written in Swift must be Obj-C compatible and marked with &lt;code&gt;@objc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the Contributing section below for more details.&lt;/p&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;The easiest way to install XMPPFramework is using CocoaPods.&lt;/p&gt; &#xA;&lt;p&gt;To install only the Objective-C portion of the framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;XMPPFramework&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the new Swift additions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use_frameworks!&#xA;pod &#39;XMPPFramework/Swift&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After &lt;code&gt;pod install&lt;/code&gt; open the &lt;code&gt;.xcworkspace&lt;/code&gt; and import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@import XMPPFramework;   // Objective-C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import XMPPFramework     // Swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;To integrate XMPPFramework into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;robbiehanson/XMPPFramework&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage&lt;/code&gt; to build the framework and drag the built &lt;code&gt;XMPPFramework.framework&lt;/code&gt; into your Xcode project. If you&#39;d like to include new features written in Swift, drag &lt;code&gt;XMPPFrameworkSwift.framework&lt;/code&gt; into your project as well. You&#39;ll need to manually &lt;code&gt;import XMPPFrameworkSwift&lt;/code&gt; in your headers.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Pull requests are welcome! If you are planning a larger feature, please open an issue first for community input. Please use modern Objective-C syntax, including nullability annotations and generics. Here&#39;s some tips to make the process go more smoothly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure to add any new files to the iOS, macOS, and tvOS targets for &lt;code&gt;XMPPFramework.framework&lt;/code&gt; in &lt;code&gt;XMPPFramework.xcodeproj&lt;/code&gt;, and ensure any applicable header files are set to public.&lt;/li&gt; &#xA; &lt;li&gt;Please try to write your code in a way that&#39;s testable. Using &lt;code&gt;XMPPMockStream&lt;/code&gt; makes testing pretty easy. Look at examples in &lt;code&gt;Testing-Shared&lt;/code&gt; for inspiration.&lt;/li&gt; &#xA; &lt;li&gt;You will need both CocoaPods and Carthage to work on tests. Run &lt;code&gt;carthage checkout&lt;/code&gt; in the root of the repository, and &lt;code&gt;bundle install &amp;amp;&amp;amp; bundle exec pod install&lt;/code&gt; in the &lt;code&gt;Testing-iOS&lt;/code&gt; and &lt;code&gt;Testing-macOS&lt;/code&gt; folders.&lt;/li&gt; &#xA; &lt;li&gt;Create your test files to the &lt;code&gt;Testing-Shared&lt;/code&gt; folder, and then add them to the iOS, macOS, and tvOS targets in &lt;code&gt;Testing-Carthage/XMPPFrameworkTests.xcodeproj&lt;/code&gt;, &lt;code&gt;Testing-macOS/XMPPFrameworkTests.xcworkspace&lt;/code&gt; and &lt;code&gt;Testing-iOS/XMPPFrameworkTests.xcworkspace&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you plan on writing Swift code, please keep it isolated in the &lt;code&gt;Swift/&lt;/code&gt; folder, and ensure none of the pure Obj-C code has dependencies on it. All public APIs must be Obj-C compatible and marked with &lt;code&gt;@objc&lt;/code&gt;. Remember to add your files to the &lt;code&gt;XMPPFrameworkSwift.framework&lt;/code&gt; target. Ensure that all your unit tests pass for both the CocoaPods and Carthage integrations. For an example, look at &lt;code&gt;Testing-Carthage/XMPPFrameworkSwiftTests.xcodeproj&lt;/code&gt;, &lt;code&gt;Testing-Swift/SwiftOnlyTest.swift&lt;/code&gt;, and the &lt;code&gt;XMPPFrameworkSwiftTests&lt;/code&gt; targets within &lt;code&gt;Testing-macOS&lt;/code&gt; and &lt;code&gt;Testing-iOS&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Looking to help but don&#39;t know where to start?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A large portion of the framework is not yet annotated for nullability and generics.&lt;/li&gt; &#xA; &lt;li&gt;Adding more test coverage is always appreciated&lt;/li&gt; &#xA; &lt;li&gt;Modernizing the old Examples projects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Security Issues&lt;/h4&gt; &#xA;&lt;p&gt;If you find a security problem, please do not open a public issue on GitHub. Instead, email one of the maintainers directly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:chris@chatsecure.org&#34;&gt;chris@chatsecure.org&lt;/a&gt; &lt;a href=&#34;https://chatsecure.org/assets/pubkeys/50F7D255.asc&#34;&gt;&lt;code&gt;GPG 50F7D255&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Wiki:&lt;/h3&gt; &#xA;&lt;p&gt;For more info please take a look at the wiki.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robbiehanson/XMPPFramework/wiki/IntroToFramework&#34;&gt;Overview of the XMPP Framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robbiehanson/XMPPFramework/wiki/GettingStarted_Mac&#34;&gt;Getting started using XMPPFramework on Mac OS X&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robbiehanson/XMPPFramework/wiki/GettingStarted_iOS&#34;&gt;Getting started using XMPPFramework on iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robbiehanson/XMPPFramework/wiki/XEPs&#34;&gt;XEPs supported by the XMPPFramework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robbiehanson/XMPPFramework/wiki&#34;&gt;Learn more about XMPPFramework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Can&#39;t find the answer to your question in any of the &lt;a href=&#34;https://github.com/robbiehanson/XMPPFramework/wiki&#34;&gt;wiki&lt;/a&gt; articles? Try the &lt;a href=&#34;http://groups.google.com/group/xmppframework&#34;&gt;mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Donation:&lt;/h3&gt; &#xA;&lt;p&gt;Love the project? Wanna buy me a âï¸? (or a ðº ð):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://onename.com/robbiehanson&#34;&gt;&lt;img src=&#34;https://bitpay.com/img/donate-sm.png&#34; alt=&#34;donation-bitcoin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=CV6XGZTPQU9HY&#34;&gt;&lt;img src=&#34;https://www.paypal.com/en_US/i/btn/btn_donate_SM.gif&#34; alt=&#34;donation-paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>