<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-30T01:47:30Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AFNetworking/AFNetworking</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/AFNetworking/AFNetworking</id>
    <link href="https://github.com/AFNetworking/AFNetworking" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A delightful networking framework for iOS, macOS, watchOS, and tvOS.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.github.com/AFNetworking/AFNetworking/assets/afnetworking-logo.png&#34; alt=&#34;AFNetworking&#34; title=&#34;AFNetworking&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AFNetworking/AFNetworking/actions&#34;&gt;&lt;img src=&#34;https://github.com/AFNetworking/AFNetworking/workflows/AFNetworking%20CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/v/AFNetworking.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/AFNetworking.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/AFNetworking&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/AFNetworking.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://twitter.com/AFNetworking&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-@AFNetworking-blue.svg?style=flat&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AFNetworking is a delightful networking library for iOS, macOS, watchOS, and tvOS. It&#39;s built on top of the &lt;a href=&#34;https://developer.apple.com/documentation/foundation/url_loading_system&#34;&gt;Foundation URL Loading System&lt;/a&gt;, extending the powerful high-level networking abstractions built into Cocoa. It has a modular architecture with well-designed, feature-rich APIs that are a joy to use.&lt;/p&gt; &#xA;&lt;p&gt;Perhaps the most important feature of all, however, is the amazing community of developers who use and contribute to AFNetworking every day. AFNetworking powers some of the most popular and critically-acclaimed apps on the iPhone, iPad, and Mac.&lt;/p&gt; &#xA;&lt;h2&gt;How To Get Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AFNetworking/AFNetworking/archive/master.zip&#34;&gt;Download AFNetworking&lt;/a&gt; and try out the included Mac and iPhone example apps&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking/wiki/Getting-Started-with-AFNetworking&#34;&gt;&#34;Getting Started&#34; guide&lt;/a&gt;, &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking/wiki/AFNetworking-FAQ&#34;&gt;FAQ&lt;/a&gt;, or &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking/wiki&#34;&gt;other articles on the Wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/afnetworking&#34;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;afnetworking&#39;)&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/afnetworking&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, &lt;em&gt;and can provide steps to reliably reproduce it&lt;/em&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a pull request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;AFNetworking supports multiple methods for installing the library in a project.&lt;/p&gt; &#xA;&lt;h2&gt;Installation with CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;To integrate AFNetworking into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;AFNetworking&#39;, &#39;~&amp;gt; 4.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation with Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Once you have your Swift package set up, adding AFNetworking as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/AFNetworking/AFNetworking.git&#34;, .upToNextMajor(from: &#34;4.0.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: AFNetworking&#39;s Swift package does not include it&#39;s UIKit extensions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Installation with Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate AFNetworking, add the following to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;AFNetworking/AFNetworking&#34; ~&amp;gt; 4.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AFNetworking Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Minimum iOS Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Minimum macOS Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Minimum watchOS Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Minimum tvOS Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS 10.10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;watchOS 2.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tvOS 9.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 11+ is required.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;OS X 10.9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;watchOS 2.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tvOS 9.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 7+ is required. &lt;code&gt;NSURLConnectionOperation&lt;/code&gt; support has been removed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.6 -&amp;gt; 2.6.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;OS X 10.9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;watchOS 2.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 7+ is required.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.0 -&amp;gt; 2.5.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;OS X 10.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 5+ is required. &lt;code&gt;NSURLSession&lt;/code&gt; subspec requires iOS 7 or OS X 10.9.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mac OS X 10.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.10.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS 4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mac OS X 10.6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;(macOS projects must support &lt;a href=&#34;https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtVersionsPlatforms.html&#34;&gt;64-bit with modern Cocoa runtime&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Programming in Swift? Try &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt; for a more conventional set of APIs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;h3&gt;NSURLSession&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AFURLSessionManager&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AFHTTPSessionManager&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Serialization&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;AFURLRequestSerialization&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFHTTPRequestSerializer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFJSONRequestSerializer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFPropertyListRequestSerializer&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;AFURLResponseSerialization&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFHTTPResponseSerializer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFJSONResponseSerializer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFXMLParserResponseSerializer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFXMLDocumentResponseSerializer&lt;/code&gt; &lt;em&gt;(macOS)&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFPropertyListResponseSerializer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFImageResponseSerializer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AFCompoundResponseSerializer&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional Functionality&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AFSecurityPolicy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AFNetworkReachabilityManager&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;AFURLSessionManager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;AFURLSessionManager&lt;/code&gt; creates and manages an &lt;code&gt;NSURLSession&lt;/code&gt; object based on a specified &lt;code&gt;NSURLSessionConfiguration&lt;/code&gt; object, which conforms to &lt;code&gt;&amp;lt;NSURLSessionTaskDelegate&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;NSURLSessionDataDelegate&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;NSURLSessionDownloadDelegate&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;NSURLSessionDelegate&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Creating a Download Task&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];&#xA;AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];&#xA;&#xA;NSURL *URL = [NSURL URLWithString:@&#34;http://example.com/download.zip&#34;];&#xA;NSURLRequest *request = [NSURLRequest requestWithURL:URL];&#xA;&#xA;NSURLSessionDownloadTask *downloadTask = [manager downloadTaskWithRequest:request progress:nil destination:^NSURL *(NSURL *targetPath, NSURLResponse *response) {&#xA;    NSURL *documentsDirectoryURL = [[NSFileManager defaultManager] URLForDirectory:NSDocumentDirectory inDomain:NSUserDomainMask appropriateForURL:nil create:NO error:nil];&#xA;    return [documentsDirectoryURL URLByAppendingPathComponent:[response suggestedFilename]];&#xA;} completionHandler:^(NSURLResponse *response, NSURL *filePath, NSError *error) {&#xA;    NSLog(@&#34;File downloaded to: %@&#34;, filePath);&#xA;}];&#xA;[downloadTask resume];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Creating an Upload Task&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];&#xA;AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];&#xA;&#xA;NSURL *URL = [NSURL URLWithString:@&#34;http://example.com/upload&#34;];&#xA;NSURLRequest *request = [NSURLRequest requestWithURL:URL];&#xA;&#xA;NSURL *filePath = [NSURL fileURLWithPath:@&#34;file://path/to/image.png&#34;];&#xA;NSURLSessionUploadTask *uploadTask = [manager uploadTaskWithRequest:request fromFile:filePath progress:nil completionHandler:^(NSURLResponse *response, id responseObject, NSError *error) {&#xA;    if (error) {&#xA;        NSLog(@&#34;Error: %@&#34;, error);&#xA;    } else {&#xA;        NSLog(@&#34;Success: %@ %@&#34;, response, responseObject);&#xA;    }&#xA;}];&#xA;[uploadTask resume];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Creating an Upload Task for a Multi-Part Request, with Progress&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSMutableURLRequest *request = [[AFHTTPRequestSerializer serializer] multipartFormRequestWithMethod:@&#34;POST&#34; URLString:@&#34;http://example.com/upload&#34; parameters:nil constructingBodyWithBlock:^(id&amp;lt;AFMultipartFormData&amp;gt; formData) {&#xA;        [formData appendPartWithFileURL:[NSURL fileURLWithPath:@&#34;file://path/to/image.jpg&#34;] name:@&#34;file&#34; fileName:@&#34;filename.jpg&#34; mimeType:@&#34;image/jpeg&#34; error:nil];&#xA;    } error:nil];&#xA;&#xA;AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]];&#xA;&#xA;NSURLSessionUploadTask *uploadTask;&#xA;uploadTask = [manager&#xA;              uploadTaskWithStreamedRequest:request&#xA;              progress:^(NSProgress * _Nonnull uploadProgress) {&#xA;                  // This is not called back on the main queue.&#xA;                  // You are responsible for dispatching to the main queue for UI updates&#xA;                  dispatch_async(dispatch_get_main_queue(), ^{&#xA;                      //Update the progress view&#xA;                      [progressView setProgress:uploadProgress.fractionCompleted];&#xA;                  });&#xA;              }&#xA;              completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) {&#xA;                  if (error) {&#xA;                      NSLog(@&#34;Error: %@&#34;, error);&#xA;                  } else {&#xA;                      NSLog(@&#34;%@ %@&#34;, response, responseObject);&#xA;                  }&#xA;              }];&#xA;&#xA;[uploadTask resume];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Creating a Data Task&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];&#xA;AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];&#xA;&#xA;NSURL *URL = [NSURL URLWithString:@&#34;http://httpbin.org/get&#34;];&#xA;NSURLRequest *request = [NSURLRequest requestWithURL:URL];&#xA;&#xA;NSURLSessionDataTask *dataTask = [manager dataTaskWithRequest:request completionHandler:^(NSURLResponse *response, id responseObject, NSError *error) {&#xA;    if (error) {&#xA;        NSLog(@&#34;Error: %@&#34;, error);&#xA;    } else {&#xA;        NSLog(@&#34;%@ %@&#34;, response, responseObject);&#xA;    }&#xA;}];&#xA;[dataTask resume];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Request Serialization&lt;/h3&gt; &#xA;&lt;p&gt;Request serializers create requests from URL strings, encoding parameters as either a query string or HTTP body.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSString *URLString = @&#34;http://example.com&#34;;&#xA;NSDictionary *parameters = @{@&#34;foo&#34;: @&#34;bar&#34;, @&#34;baz&#34;: @[@1, @2, @3]};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Query String Parameter Encoding&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[[AFHTTPRequestSerializer serializer] requestWithMethod:@&#34;GET&#34; URLString:URLString parameters:parameters error:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET http://example.com?foo=bar&amp;amp;baz[]=1&amp;amp;baz[]=2&amp;amp;baz[]=3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;URL Form Parameter Encoding&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[[AFHTTPRequestSerializer serializer] requestWithMethod:@&#34;POST&#34; URLString:URLString parameters:parameters error:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST http://example.com/&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;foo=bar&amp;amp;baz[]=1&amp;amp;baz[]=2&amp;amp;baz[]=3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JSON Parameter Encoding&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[[AFJSONRequestSerializer serializer] requestWithMethod:@&#34;POST&#34; URLString:URLString parameters:parameters error:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST http://example.com/&#xA;Content-Type: application/json&#xA;&#xA;{&#34;foo&#34;: &#34;bar&#34;, &#34;baz&#34;: [1,2,3]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Network Reachability Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;AFNetworkReachabilityManager&lt;/code&gt; monitors the reachability of domains, and addresses for both WWAN and WiFi network interfaces.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do not use Reachability to determine if the original request should be sent. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You should try to send it.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can use Reachability to determine when a request should be automatically retried. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Although it may still fail, a Reachability notification that the connectivity is available is a good time to retry something.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Network reachability is a useful tool for determining why a request might have failed. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;After a network request has failed, telling the user they&#39;re offline is better than giving them a more technical but accurate error, such as &#34;request timed out.&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2012-706/&#34;&gt;WWDC 2012 session 706, &#34;Networking Best Practices.&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Shared Network Reachability&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {&#xA;    NSLog(@&#34;Reachability: %@&#34;, AFStringFromNetworkReachabilityStatus(status));&#xA;}];&#xA;&#xA;[[AFNetworkReachabilityManager sharedManager] startMonitoring];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Security Policy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;AFSecurityPolicy&lt;/code&gt; evaluates server trust against pinned X.509 certificates and public keys over secure connections.&lt;/p&gt; &#xA;&lt;p&gt;Adding pinned SSL certificates to your app helps prevent man-in-the-middle attacks and other vulnerabilities. Applications dealing with sensitive customer data or financial information are strongly encouraged to route all communication over an HTTPS connection with SSL pinning configured and enabled.&lt;/p&gt; &#xA;&lt;h4&gt;Allowing Invalid SSL Certificates&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];&#xA;manager.securityPolicy.allowInvalidCertificates = YES; // not recommended for production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Unit Tests&lt;/h2&gt; &#xA;&lt;p&gt;AFNetworking includes a suite of unit tests within the Tests subdirectory. These tests can be run simply be executed the test action on the platform framework you would like to test.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;AFNetworking is owned and maintained by the &lt;a href=&#34;http://alamofire.org&#34;&gt;Alamofire Software Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;AFNetworking was originally created by &lt;a href=&#34;https://github.com/sco/&#34;&gt;Scott Raymond&lt;/a&gt; and &lt;a href=&#34;https://github.com/mattt/&#34;&gt;Mattt Thompson&lt;/a&gt; in the development of &lt;a href=&#34;http://en.wikipedia.org/wiki/Gowalla&#34;&gt;Gowalla for iPhone&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;AFNetworking&#39;s logo was designed by &lt;a href=&#34;http://www.alandefibaugh.com/&#34;&gt;Alan Defibaugh&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And most of all, thanks to AFNetworking&#39;s &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking/contributors&#34;&gt;growing list of contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Security Disclosure&lt;/h3&gt; &#xA;&lt;p&gt;If you believe you have identified a security vulnerability with AFNetworking, you should report it as soon as possible via email to &lt;a href=&#34;mailto:security@alamofire.org&#34;&gt;security@alamofire.org&lt;/a&gt;. Please do not post it to a public issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;AFNetworking is released under the MIT license. See &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>inket/Autoclick</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/inket/Autoclick</id>
    <link href="https://github.com/inket/Autoclick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple Mac app that simulates mouse clicks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Autoclick 2.0&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/inket/Autoclick/master/screenshot.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;A simple Mac app that simulates mouse clicks when needed. Highly configurable and easy to use.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;By &lt;a href=&#34;https://tars.mahdi.jp/apps/autoclick.zip&#34;&gt;downloading&lt;/a&gt; this app, you agree that it is provided &#34;as is&#34; and that you will receive NO SUPPORT whatsoever. This is a free app made in my free time and I do not owe you anything. Read the FAQ below for more info.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Is it safe?&lt;/h3&gt; &#xA;&lt;p&gt;Yes.&lt;/p&gt; &#xA;&lt;h3&gt;Why does it ask for Accessibility permission?&lt;/h3&gt; &#xA;&lt;p&gt;The system requires it to let the app &#34;click&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;I gave it Accessibility permission, but it doesn&#39;t click&lt;/h3&gt; &#xA;&lt;p&gt;Restart your Mac.&lt;/p&gt; &#xA;&lt;h3&gt;It requires macOS 10.14, but I have 10.13 or whatever&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tars.mahdi.jp/apps/autoclick-1.0.zip&#34;&gt;Download the older version&lt;/a&gt;, then right-click on the app and select &#34;Open&#34; to open it.&lt;/p&gt; &#xA;&lt;h3&gt;It will not let me set a hotkey!&lt;/h3&gt; &#xA;&lt;p&gt;You need to add a modifier to your hotkey like command, alt, or control.&lt;/p&gt; &#xA;&lt;p&gt;Try command+L, it should work.&lt;/p&gt; &#xA;&lt;h3&gt;Can you make it accept just one key for the hotkey?&lt;/h3&gt; &#xA;&lt;p&gt;No, it&#39;s impossible. (and stupid because you won&#39;t be able to use that key anymore)&lt;/p&gt; &#xA;&lt;h3&gt;I want more clicks per second&lt;/h3&gt; &#xA;&lt;p&gt;I found that above 900 the system will freeze so 900 is the limit.&lt;/p&gt; &#xA;&lt;h3&gt;Can you make a Windows version?&lt;/h3&gt; &#xA;&lt;p&gt;No, I can&#39;t. I would have to quit my job, go to school to learn Windows development, then spend months making it, so no. Also, Windows sucks.&lt;/p&gt; &#xA;&lt;h3&gt;Can I suggest a feature?&lt;/h3&gt; &#xA;&lt;p&gt;No.&lt;/p&gt; &#xA;&lt;h3&gt;Can you fix a bug?&lt;/h3&gt; &#xA;&lt;p&gt;No.&lt;/p&gt; &#xA;&lt;h3&gt;Can I contact you for anything about this app?&lt;/h3&gt; &#xA;&lt;p&gt;No. I will not respond.&lt;/p&gt; &#xA;&lt;h3&gt;Is this app still in development?&lt;/h3&gt; &#xA;&lt;p&gt;No.&lt;/p&gt; &#xA;&lt;h3&gt;Why?&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ve had enough of entitled Roblox kids.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;2.0.5 (2022/1/28)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Increase the maximum clicks per second to 900.&lt;/li&gt; &#xA; &lt;li&gt;This is the last version of this app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.4 (2021/9/6)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed app not remembering your settings between restarts&lt;/li&gt; &#xA; &lt;li&gt;App will now check Input Monitoring permission too, to make sure that you can stop the clicking with keyboard shortcuts/FN key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.3 (2021/2/23)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allow hotkeys without modifiers, &lt;a href=&#34;https://github.com/inket/Autoclick/issues/2&#34;&gt;#2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.2 (2021/2/17)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Better fix for multi-monitor setups, &lt;a href=&#34;https://github.com/inket/Autoclick/issues/1&#34;&gt;#1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.1 (2021/2/6)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed cursor jumping in multi-monitor setups, #1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0 (2021)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Codesigned &amp;amp; notarized so that it&#39;s trusted by new versions of macOS&lt;/li&gt; &#xA; &lt;li&gt;Modernized codebase &amp;amp; added Apple Silicon support&lt;/li&gt; &#xA; &lt;li&gt;Will now display the accessibility permission popup if you haven&#39;t allowed it yet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://tars.mahdi.jp/apps/autoclick-1.0.zip&#34;&gt;1.0 (2011)&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initial version&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>utmapp/UTM</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/utmapp/UTM</id>
    <link href="https://github.com/utmapp/UTM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Virtual machines for iOS and macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UTM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/utmapp/UTM/actions?query=event%3Arelease+workflow%3ABuild&#34;&gt;&lt;img src=&#34;https://github.com/utmapp/UTM/workflows/Build/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is possible to invent a single machine which can be used to compute any computable sequence.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;-- &lt;cite&gt;Alan Turing, 1936&lt;/cite&gt;&lt;/p&gt; &#xA;&lt;p&gt;UTM is a full featured system emulator and virtual machine host for iOS and macOS. It is based off of QEMU. In short, it allows you to run Windows, Linux, and more on your Mac, iPhone, and iPad. More information at &lt;a href=&#34;https://getutm.app/&#34;&gt;https://getutm.app/&lt;/a&gt; and &lt;a href=&#34;https://mac.getutm.app/&#34;&gt;https://mac.getutm.app/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/utmapp/UTM/master/screen.png&#34; alt=&#34;Screenshot of UTM running on iPhone&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full system emulation (MMU, devices, etc) using QEMU&lt;/li&gt; &#xA; &lt;li&gt;30+ processors supported including x86_64, ARM64, and RISC-V&lt;/li&gt; &#xA; &lt;li&gt;VGA graphics mode using SPICE and QXL&lt;/li&gt; &#xA; &lt;li&gt;Text terminal mode&lt;/li&gt; &#xA; &lt;li&gt;USB devices&lt;/li&gt; &#xA; &lt;li&gt;JIT based acceleration using QEMU TCG&lt;/li&gt; &#xA; &lt;li&gt;Frontend designed from scratch for macOS 11 and iOS 11+ using the latest and greatest APIs&lt;/li&gt; &#xA; &lt;li&gt;Create, manage, run VMs directly from your device&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional macOS Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hardware accelerated virtualization using Hypervisor.framework and QEMU&lt;/li&gt; &#xA; &lt;li&gt;Boot macOS guests with Virtualization.framework on macOS 12+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;UTM SE&lt;/h2&gt; &#xA;&lt;p&gt;UTM/QEMU requires dynamic code generation (JIT) for maximum performance. JIT on iOS devices require either a jailbroken device, or one of the various workarounds found for specific versions of iOS (see &#34;Install&#34; for more details).&lt;/p&gt; &#xA;&lt;p&gt;UTM SE (&#34;slow edition&#34;) uses a &lt;a href=&#34;https://github.com/ktemkin/qemu/raw/with_tcti/tcg/aarch64-tcti/README.md&#34;&gt;threaded interpreter&lt;/a&gt; which performs better than a traditional interpreter but still slower than JIT. This technique is similar to what &lt;a href=&#34;https://github.com/ish-app/ish&#34;&gt;iSH&lt;/a&gt; does for dynamic execution. As a result, UTM SE does not require jailbreaking or any JIT workarounds and can be sideloaded as a regular app.&lt;/p&gt; &#xA;&lt;p&gt;To optimize for size and build times, only the following architectures are included in UTM SE: ARM, PPC, RISC-V, and x86 (all with both 32-bit and 64-bit variants).&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;UTM (SE) for iOS: &lt;a href=&#34;https://getutm.app/install/&#34;&gt;https://getutm.app/install/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;UTM is also available for macOS: &lt;a href=&#34;https://mac.getutm.app/&#34;&gt;https://mac.getutm.app/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/utmapp/UTM/master/Documentation/MacDevelopment.md&#34;&gt;macOS Development&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/utmapp/UTM/master/Documentation/iOSDevelopment.md&#34;&gt;iOS Development&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ish-app/ish&#34;&gt;iSH&lt;/a&gt;: emulates a usermode Linux terminal interface for running x86 Linux applications on iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/holzschu/a-shell&#34;&gt;a-shell&lt;/a&gt;: packages common Unix commands and utilities built natively for iOS and accessible through a terminal interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;UTM is distributed under the permissive Apache 2.0 license. However, it uses several (L)GPL components. Most are dynamically linked but the gstreamer plugins are statically linked and parts of the code are taken from qemu. Please be aware of this if you intend on redistributing this application.&lt;/p&gt; &#xA;&lt;p&gt;Some icons made by &lt;a href=&#34;https://www.freepik.com&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;https://www.flaticon.com/&#34;&gt;www.flaticon.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, UTM frontend depends on the following MIT License components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager&#34;&gt;IQKeyboardManager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/migueldeicaza/SwiftTerm&#34;&gt;SwiftTerm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/weichsel/ZIPFoundation&#34;&gt;ZIP Foundation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>londonappbrewery/mi_card_flutter</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/londonappbrewery/mi_card_flutter</id>
    <link href="https://github.com/londonappbrewery/mi_card_flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starter code for the Mi Card Project from the Complete Flutter Development Bootcamp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/AppBreweryBanner.png&#34; alt=&#34;App Brewery Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Mi Card&lt;/h1&gt; &#xA;&lt;h2&gt;Our Goal&lt;/h2&gt; &#xA;&lt;p&gt;Now that you&#39;ve seen how to create a Flutter app entirely from scratch, we&#39;re going to go further and learn more about how to design user interfaces for Flutter apps.&lt;/p&gt; &#xA;&lt;h2&gt;What you will create&lt;/h2&gt; &#xA;&lt;p&gt;Mi Card is a personal business card. Imagine every time you wanted to give someone your contact details or your business card but you didn&#39;t have it on you. Well, now you can get them to download your business card as an app.&lt;/p&gt; &#xA;&lt;h2&gt;What you will learn&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to create Stateless Widgets&lt;/li&gt; &#xA; &lt;li&gt;What is the difference between hot reload and hot refresh and running an app from cold&lt;/li&gt; &#xA; &lt;li&gt;How to use Containers to lay out your UI&lt;/li&gt; &#xA; &lt;li&gt;How to use Columns and Rows to position your UI elements&lt;/li&gt; &#xA; &lt;li&gt;How to add custom fonts&lt;/li&gt; &#xA; &lt;li&gt;How to add Material icons&lt;/li&gt; &#xA; &lt;li&gt;How to style Text widgets&lt;/li&gt; &#xA; &lt;li&gt;How to read and use Flutter Documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a companion project to The App Brewery&#39;s Complete Flutter Development Bootcamp, check out the full course at &lt;a href=&#34;https://www.appbrewery.co/&#34;&gt;www.appbrewery.co&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/readme-end-banner.png&#34; alt=&#34;End Banner&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pronebird/UIScrollView-InfiniteScroll</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/pronebird/UIScrollView-InfiniteScroll</id>
    <link href="https://github.com/pronebird/UIScrollView-InfiniteScroll" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UIScrollView ∞ scroll category&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;UIScrollView+InfiniteScroll&lt;/h2&gt; &#xA;&lt;p&gt;Infinite scroll implementation as a category for UIScrollView.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pronebird/UIScrollView-InfiniteScroll/master/README%20images/InfiniteScroll1.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pronebird/UIScrollView-InfiniteScroll/master/README%20images/InfiniteScroll2.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pronebird/UIScrollView-InfiniteScroll/master/README%20images/InfiniteScroll3.gif&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;* The content used in demo app is publicly available and provided by hn.algolia.com and Flickr. Both can be inappropriate.&lt;/p&gt; &#xA;&lt;h3&gt;Swizzling&lt;/h3&gt; &#xA;&lt;p&gt;Be aware that this category &lt;a href=&#34;http://nshipster.com/method-swizzling/&#34;&gt;swizzles&lt;/a&gt; &lt;code&gt;setContentOffset&lt;/code&gt; and &lt;code&gt;setContentSize&lt;/code&gt; on &lt;code&gt;UIScrollView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Just add the following line in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;UIScrollView-InfiniteScroll&#39;, &#39;~&amp;gt; 1.2.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Just add the following line in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;pronebird/UIScrollView-InfiniteScroll&#34; ~&amp;gt; 1.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;This component comes with example app written in Swift and Objective-C.&lt;/p&gt; &#xA;&lt;p&gt;If you use CocoaPods you can try it by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pod try UIScrollView-InfiniteScroll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://pronebird.github.io/UIScrollView-InfiniteScroll/&#34;&gt;http://pronebird.github.io/UIScrollView-InfiniteScroll/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Before using module&lt;/h3&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;p&gt;Import header file in Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;UIScrollView_InfiniteScroll/UIScrollView+InfiniteScroll.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;p&gt;Add the following line in your bridging header file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;UIScrollView_InfiniteScroll/UIScrollView+InfiniteScroll.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basics&lt;/h3&gt; &#xA;&lt;p&gt;In order to enable infinite scroll you have to provide a handler block using &lt;code&gt;addInfiniteScrollWithHandler&lt;/code&gt;. The block you provide is executed each time infinite scroll component detects that more data needs to be provided.&lt;/p&gt; &#xA;&lt;p&gt;The purpose of the handler block is to perform asynchronous task, typically networking or database fetch, and update your scroll view or scroll view subclass.&lt;/p&gt; &#xA;&lt;p&gt;The block itself is called on main queue, therefore make sure you move any long-running tasks to background queue. Once you receive new data, update table view by adding new rows and sections, then call &lt;code&gt;finishInfiniteScroll&lt;/code&gt; to complete infinite scroll animations and reset the state of infinite scroll components.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;viewDidLoad&lt;/code&gt; is a good place to install handler block.&lt;/p&gt; &#xA;&lt;p&gt;Make sure that any interactions with UIKit or methods provided by Infinite Scroll happen on main queue. Use &lt;code&gt;dispatch_async(dispatch_get_main_queue, { ... })&lt;/code&gt; in Objective-C or &lt;code&gt;DispatchQueue.main.async { ... }&lt;/code&gt; in Swift to run UI related calls on main queue.&lt;/p&gt; &#xA;&lt;p&gt;Many people make mistake by using external reference to table view or collection view within the handler block. Don&#39;t do this. This creates a circular retention. Instead use the instance of scroll view or scroll view subclass passed as first argument to handler block.&lt;/p&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// setup infinite scroll&#xA;[tableView addInfiniteScrollWithHandler:^(UITableView* tableView) {&#xA;    // update table view&#xA;    &#xA;    // finish infinite scroll animation&#xA;    [tableView finishInfiniteScroll];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;tableView.addInfiniteScroll { (tableView) -&amp;gt; Void in&#xA;    // update table view&#xA;            &#xA;    // finish infinite scroll animation&#xA;    tableView.finishInfiniteScroll()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collection view quirks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;UICollectionView.reloadData&lt;/code&gt; causes contentOffset to reset. Instead use &lt;code&gt;UICollectionView.performBatchUpdates&lt;/code&gt; when possible.&lt;/p&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self.collectionView addInfiniteScrollWithHandler:^(UICollectionView* collectionView) {    &#xA;    [collectionView performBatchUpdates:^{&#xA;        // update collection view&#xA;    } completion:^(BOOL finished) {&#xA;        // finish infinite scroll animations&#xA;        [collectionView finishInfiniteScroll];&#xA;    }];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;collectionView.addInfiniteScroll { (collectionView) -&amp;gt; Void in&#xA;    collectionView.performBatchUpdates({ () -&amp;gt; Void in&#xA;        // update collection view&#xA;    }, completion: { (finished) -&amp;gt; Void in&#xA;        // finish infinite scroll animations&#xA;        collectionView.finishInfiniteScroll()&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start infinite scroll programmatically&lt;/h3&gt; &#xA;&lt;p&gt;You can reuse infinite scroll flow to load initial data or fetch more using &lt;code&gt;beginInfiniteScroll(forceScroll)&lt;/code&gt;. &lt;code&gt;viewDidLoad&lt;/code&gt; is a good place for loading initial data, however absolutely up to you to decide.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;forceScroll&lt;/code&gt; parameter is positive, Infinite Scroll component will attempt to scroll down to reveal indicator view. Keep in mind that scrolling will not happen if user is interacting with scroll view.&lt;/p&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self.tableView beginInfiniteScroll:YES];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;tableView.beginInfiniteScroll(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prevent infinite scroll&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you need to prevent the infinite scroll from continuing. For example, if your search API has no more results, it does not make sense to keep making the requests or to show the spinner.&lt;/p&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[tableView setShouldShowInfiniteScrollHandler:^BOOL (UITableView *tableView) {&#xA;    // Only show up to 5 pages then prevent the infinite scroll&#xA;    return (weakSelf.currentPage &amp;lt; 5);&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Provide a block to be called right before a infinite scroll event is triggered.  Return YES to allow or NO to prevent it from triggering.&#xA;tableView.setShouldShowInfiniteScrollHandler { _ -&amp;gt; Bool in&#xA;    // Only show up to 5 pages then prevent the infinite scroll&#xA;    return currentPage &amp;lt; 5 &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Seamlessly preload content&lt;/h3&gt; &#xA;&lt;p&gt;Ideally you want your content to flow seamlessly without ever showing a spinner. Infinite scroll offers an option to specify offset in points that will be used to start preloader before user reaches the bottom of scroll view.&lt;/p&gt; &#xA;&lt;p&gt;The proper balance between the number of results you load each time and large enough offset should give your users a decent experience. Most likely you will have to come up with your own formula for the combination of those based on kind of content and device dimensions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Preload more data 500pt before reaching the bottom of scroll view.&#xA;tableView.infiniteScrollTriggerOffset = 500;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom indicator&lt;/h3&gt; &#xA;&lt;p&gt;You can use custom indicator instead of default &lt;code&gt;UIActivityIndicatorView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Custom indicator must be a subclass of &lt;code&gt;UIView&lt;/code&gt; and implement the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)startAnimating;&#xA;- (void)stopAnimating;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;CustomInfiniteIndicator *infiniteIndicator = [[CustomInfiniteIndicator alloc] initWithFrame:CGRectMake(0, 0, 40, 40)];&#xA;self.tableView.infiniteScrollIndicatorView = indicator;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let frame = CGRect(x: 0, y: 0, width: 24, height: 24)&#xA;tableView.infiniteScrollIndicatorView = CustomInfiniteIndicator(frame: frame)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please see example implementation of custom indicator view:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Objective-C: &lt;a href=&#34;https://github.com/pronebird/UIScrollView-InfiniteScroll/raw/master/InfiniteScrollViewDemo/CustomInfiniteIndicator.m&#34;&gt;CustomInfiniteIndicator.m&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Swift: &lt;a href=&#34;https://github.com/pronebird/UIScrollView-InfiniteScroll/raw/master/InfiniteScrollViewDemoSwift/CustomInfiniteIndicator.swift&#34;&gt;CustomInfiniteIndicator.swift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At the moment InfiniteScroll uses indicator&#39;s frame directly so make sure you size custom indicator view beforehand. Such views as &lt;code&gt;UIImageView&lt;/code&gt; or &lt;code&gt;UIActivityIndicatorView&lt;/code&gt; will automatically resize themselves so no need to setup frame for them.&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/pronebird/UIScrollView-InfiniteScroll/raw/master/CHANGES&#34;&gt;CHANGES&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Attributions&lt;/h3&gt; &#xA;&lt;p&gt;Demo app icon by &lt;a href=&#34;http://appicontemplate.com/ios8/&#34;&gt;PixelResort&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>michaeleisel/JJLISO8601DateFormatter</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/michaeleisel/JJLISO8601DateFormatter</id>
    <link href="https://github.com/michaeleisel/JJLISO8601DateFormatter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A 10x+ faster drop-in replacement for NSISO8601DateFormatter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JJLISO8601DateFormatter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;JJLISO8601DateFormatter&lt;/code&gt; is a thread-safe, feature complete, drop-in replacement for &lt;code&gt;NSISO8601DateFormatter&lt;/code&gt; that is 10x or more faster for both conversion to and from dates.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Date to string: &lt;strong&gt;12x+&lt;/strong&gt; faster&lt;/li&gt; &#xA; &lt;li&gt;String to date: &lt;strong&gt;10x&lt;/strong&gt; faster&lt;/li&gt; &#xA; &lt;li&gt;Object creation: &lt;strong&gt;10x&lt;/strong&gt; faster&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More info on how the benchmark was done is &lt;a href=&#34;https://github.com/michaeleisel/JJLISO8601DateFormatter#how-is-the-benchmarking-done&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Because it is drop-in, you can simply replace the word &lt;code&gt;NSISO8601DateFormatter&lt;/code&gt; with &lt;code&gt;JJLISO8601DateFormatter&lt;/code&gt; and add the header include, &lt;code&gt;#import &amp;lt;JJLISODateFormatter/JJLISODateFormatter.h&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 10.0+&lt;/li&gt; &#xA; &lt;li&gt;MacOS 10.13+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;JJLISO8601DateFormatter is available through &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;JJLISO8601DateFormatter&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h5&gt;How does this date formatting library stay up-to-date with new changes in time zones?&lt;/h5&gt; &#xA;&lt;p&gt;It uses the time zone files provided by the system, the same ones that POSIX functions like &lt;code&gt;localtime&lt;/code&gt; use. If it can&#39;t find them, it will fall back to using Apple&#39;s date formatting libraries.&lt;/p&gt; &#xA;&lt;h5&gt;Why is it so much faster?&lt;/h5&gt; &#xA;&lt;p&gt;There&#39;s nothing special about the library. It is written in straight-forward C and tries to avoid unnecessary allocations, locking, etc. It uses versions of &lt;code&gt;mktime&lt;/code&gt; and &lt;code&gt;localtime&lt;/code&gt; from &lt;code&gt;tzdb&lt;/code&gt;. A better question is, why is Apple&#39;s so much slower? Apple&#39;s date formatting classes are built on top of &lt;a href=&#34;http://site.icu-project.org/home&#34;&gt;ICU&lt;/a&gt;, which although reliable, is a fairly slow library. It&#39;s hard from a glance to say exactly why, but it seems to have a lot of extra abstraction, needless copying, etc., and in general doesn&#39;t prioritize performance as much.&lt;/p&gt; &#xA;&lt;h5&gt;Date formatting is &lt;a href=&#34;http://yourcalendricalfallacyis.com/&#34;&gt;hard&lt;/a&gt;. How does this library ensure correctness?&lt;/h5&gt; &#xA;&lt;p&gt;Although date formatting is difficult, this library has an extensive set of unit tests that cover edge cases like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All different format options&lt;/li&gt; &#xA; &lt;li&gt;All different time zones&lt;/li&gt; &#xA; &lt;li&gt;Leap seconds (neither us nor Apple actually handle them)&lt;/li&gt; &#xA; &lt;li&gt;Leap days&lt;/li&gt; &#xA; &lt;li&gt;Concurrent usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Things are also easier because, for ISO 8601, we only need to support Gregorian calendar.&lt;/p&gt; &#xA;&lt;h5&gt;Is it literally the same for everything?&lt;/h5&gt; &#xA;&lt;p&gt;For nonsensical format options (week of year but no year) and malformed date strings, the behavior is slightly different. But for all intents and purposes, it is the exact same. Feel free to submit a ticket if you find otherwise.&lt;/p&gt; &#xA;&lt;h5&gt;Why is the prefix &#34;JJL&#34;?&lt;/h5&gt; &#xA;&lt;p&gt;Because it&#39;s easy to type with the left pinky on the shift key.&lt;/p&gt; &#xA;&lt;h5&gt;Are there other Apple libraries ripe for optimization?&lt;/h5&gt; &#xA;&lt;p&gt;Yes, there are a lot, the question is which ones are worth optimizing. Feel free to request optimizations for libraries that are causing performance issues for you.&lt;/p&gt; &#xA;&lt;h3&gt;How is the benchmarking done?&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s done by timing many date to string and string to date conversions across two ranges (15 days before now to 15 days after, from 1970 to now), three time zones, and &lt;code&gt;NSISO8601DateFormatOptionsWithInternetDateTime | NSISO8601DateFormatWithFractionalSeconds&lt;/code&gt; for the format options. The benchmark code is located in &lt;code&gt;-viewDidLoad&lt;/code&gt; of the Example project&#39;s &lt;a href=&#34;https://github.com/michaeleisel/JJLISO8601DateFormatter/raw/master/Example/JJLISO8601DateFormatterApp/ViewController.m&#34;&gt;view controller&lt;/a&gt;, and you can get nice benchmarking output yourself by running that project. I normally do testing on my iPhone 8, with the occasional double check on other devices. Obviously the numbers can vary.&lt;/p&gt; &#xA;&lt;h2&gt;Future Improvements and Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributors are always welcome. Here are some possible improvements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift version of the library with no Objective-C code&lt;/li&gt; &#xA; &lt;li&gt;Full rewrite of NSDateFormatter (doable but is it worth it?)&lt;/li&gt; &#xA; &lt;li&gt;Method that returns a &lt;code&gt;char *&lt;/code&gt; instead of an &lt;code&gt;NSString&lt;/code&gt; for going from date to string.&lt;/li&gt; &#xA; &lt;li&gt;watchOS and tvOS support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Michael Eisel, &lt;a href=&#34;mailto:michael.eisel@gmail.com&#34;&gt;michael.eisel@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;JJLISO8601DateFormatter is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>felixhageloh/uebersicht</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/felixhageloh/uebersicht</id>
    <link href="https://github.com/felixhageloh/uebersicht" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ˈyːbɐˌzɪçt&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Übersicht&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Keep an eye on what&#39;s happening on your machine and in the world.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For general info check out the &lt;a href=&#34;http://tracesof.net/uebersicht&#34;&gt;Übersicht website.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Writing Widgets&lt;/h2&gt; &#xA;&lt;p&gt;In essence, widgets are JavaScript modules that expose a few key properties and methods. They need to be defined in a single file with a &lt;code&gt;.jsx&lt;/code&gt; extension for Übersicht to pick them up. Previously, widgets could be written in CoffeeScript and are still supported. Check &lt;a href=&#34;https://raw.githubusercontent.com/felixhageloh/uebersicht/master/ClassicWidgets.md&#34;&gt;the old documentation&lt;/a&gt; for details. Übersicht will listen to file changes inside your widget directory, so you can edit widgets and see the result live.&lt;/p&gt; &#xA;&lt;p&gt;Widget rendering is done using &lt;a href=&#34;https://reactjs.org&#34;&gt;React&lt;/a&gt; and its &lt;a href=&#34;https://reactjs.org/docs/introducing-jsx.html&#34;&gt;JSX&lt;/a&gt; syntax. Simple widget state is managed for you by Übersicht, but for more advanced widgets you can manage state using a Redux-like pattern. You &lt;code&gt;dispatch&lt;/code&gt; events, which get processed by a single &lt;code&gt;updateState&lt;/code&gt; function which returns the new state, which is passed to the render function of your widget.&lt;/p&gt; &#xA;&lt;p&gt;State is kept when you modify your widget, which allows for live coding. Any changes to the UI of your widget will be immediately visible. One drawback (at least with the current implementation) is that if you change the shape of your state you might have to &#39;Refresh all Widgets&#39; from the app menu for your widget to work.&lt;/p&gt; &#xA;&lt;p&gt;You can also include node modules and split your widget into separate files using &lt;a href=&#34;http://2ality.com/2014/09/es6-modules-final.html&#34;&gt;ESM syntax&lt;/a&gt;. Any file that is in a directory called &lt;code&gt;/node_modules&lt;/code&gt;, &lt;code&gt;/lib&lt;/code&gt; or &lt;code&gt;/src&lt;/code&gt; will be treated as a module and will not show up as a separate widget.&lt;/p&gt; &#xA;&lt;p&gt;The following properties and methods are supported:&lt;/p&gt; &#xA;&lt;h3&gt;command&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;strong&gt;string&lt;/strong&gt; containing the shell command to be executed, or&lt;br&gt; a &lt;strong&gt;function(dispatch : function)&lt;/strong&gt; which eventually dispatches an event, or &lt;strong&gt;undefined&lt;/strong&gt; meaning that no command will be executed for this widget.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const command = &#34;echo Hello World&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Watch out for quotes inside commands. Often they need to properly escaped, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const command = &#34;ps axo \&#34;rss,pid,ucomm\&#34; | sort -nr | head -n3&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example using a command function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const command = (dispatch) =&amp;gt;&#xA;  fetch(&#39;some/url.json)&#39;)&#xA;    .then((response) =&amp;gt; {&#xA;      dispatch({ type: &#39;FETCH_SUCCEDED&#39;, data: response.json() });&#xA;    })&#xA;    .catch((error) =&amp;gt; {&#xA;      dispatch({ type: &#39;FETCH_FAILED&#39;, error: error });&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first and only argument passed to a command function is a &lt;code&gt;dispatch&lt;/code&gt; function, which you can use to dispatch plain JasvaScript objects, called events, to be picked up by your &lt;code&gt;updateState&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;h3&gt;refreshFrequency&lt;/h3&gt; &#xA;&lt;p&gt;An &lt;strong&gt;number&lt;/strong&gt; specifying how often the above command is executed.&lt;/p&gt; &#xA;&lt;p&gt;It defines the delay in milliseconds between consecutive commands executions. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;export const refreshFrequency = 1000; // widget will run command once a second&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default is 1000 (1s). If set to &lt;code&gt;false&lt;/code&gt; the widget won&#39;t refresh automatically.&lt;/p&gt; &#xA;&lt;h3&gt;className&lt;/h3&gt; &#xA;&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; or &lt;strong&gt;string&lt;/strong&gt; defining the CSS rules to applied to the root of your widget.&lt;/p&gt; &#xA;&lt;p&gt;It is most commonly used control the position of your widget. It is converted to a CSS class name using the &lt;a href=&#34;https://emotion.sh/docs/css&#34;&gt;Emotion CSS-in-JS library&lt;/a&gt;. Read more about &lt;a href=&#34;https://raw.githubusercontent.com/felixhageloh/uebersicht/master/#styling-widgets&#34;&gt;styling your widgets here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const className = {&#xA;  top: 0,&#xA;  left: 0,&#xA;  color: &#39;#fff&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const className = `&#xA;  top: 0;&#xA;  left: 0;&#xA;  color: #fff;&#xA;`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that widgets are positioned absolute in relation to the screen (minus the menu bar), so a widget with &lt;code&gt;top: 0&lt;/code&gt; and &lt;code&gt;left: 0&lt;/code&gt; will be positioned in the top left corner of the screen, just below the menu bar.&lt;/p&gt; &#xA;&lt;h3&gt;render : props&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;strong&gt;function(props : object)&lt;/strong&gt; to render your widget.&lt;/p&gt; &#xA;&lt;p&gt;If you know &lt;a href=&#34;https://reactjs.org/docs/components-and-props.html&#34;&gt;React functional components&lt;/a&gt; you know how render works. The &lt;code&gt;props&lt;/code&gt; passed to this function is whatever state your &lt;code&gt;updateState&lt;/code&gt; function returns. If you don&#39;t provide your own &lt;code&gt;updateState&lt;/code&gt; function, the default props that are passed are &lt;code&gt;output&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;, containing the output your command produced and any error that might have occurred.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const render = ({output, error}) =&amp;gt; {&#xA;  return error ? (&#xA;    &amp;lt;div&amp;gt;Something went wrong: &amp;lt;strong&amp;gt;{String(error)}&amp;lt;/strong&amp;gt;&amp;lt;/div&amp;gt;&#xA;  ) : (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;h1&amp;gt;We got some output!&amp;lt;/h1&amp;gt;&#xA;      &amp;lt;p&amp;gt;{output}&amp;lt;/p&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default implementation of render just returns &lt;code&gt;output&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;updateState : event, previousState&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;strong&gt;function(event : object, previousState : object)&lt;/strong&gt; implementing the state update behavior of this widget.&lt;/p&gt; &#xA;&lt;p&gt;When provided, this function must return the next state, which will be passed as &lt;code&gt;props&lt;/code&gt; to your render function. The default function will return &lt;code&gt;output&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; from the event object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const updateState = (event, previousState) =&amp;gt; {&#xA;  if (event.error) {&#xA;    return { ...previousState, warning: `We got an error: ${event.error}` };&#xA;  }&#xA;  const [cpuPct, processName] = event.output.split(&#39;,&#39;);&#xA;  return {&#xA;    cpuPct: parseFloat(cpuPct),&#xA;    processName&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will pass a props object containing &lt;code&gt;cpuPct&lt;/code&gt; and &lt;code&gt;processName&lt;/code&gt; to the render function. If an error occurred, it will pass the previous state plus a warning message.&lt;/p&gt; &#xA;&lt;p&gt;If your widget has more complex state logic, for example because it is fetching data from several different sources, it is a good idea to add a &lt;code&gt;type&lt;/code&gt; property to your events. You can use this type to decide how to update your state. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const updateState = (event, previousState) =&amp;gt; {&#xA;  switch(event.type) {&#xA;    case &#39;CO2_FETCHED&#39;: return updateCo2(event.output, previousState);&#xA;    case &#39;TEMPERATURE_FETCHED&#39;: return updateTemp(event.output, previousState);&#xA;    default: {&#xA;      return previousState;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example also shows that you can make use of functions to further break down your state update logic.&lt;/p&gt; &#xA;&lt;h3&gt;initialState&lt;/h3&gt; &#xA;&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; with the initial state of your widget.&lt;/p&gt; &#xA;&lt;p&gt;If you provide a custom &lt;code&gt;updateState&lt;/code&gt; function you might need to define the initial state that gets passed on initial render of the widget. before any command has been run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const initialState = { output: &#39;fetching data...&#39; };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default initial state is &lt;code&gt;{ output: &#39;&#39; }&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;init : dispatch&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;strong&gt;function(dispatch : function)&lt;/strong&gt; that is called the first time your widget loads. Many widgets won&#39;t need this, but you can use this function to perform any initial setup for more advanced use cases. For example, instead of relying on periodic shell commands, you might want to open and listen to WebSocket events to update your widget.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const init = (dispatch) =&amp;gt; {&#xA;  const socket = new WebSocket(&#39;ws://localhost:8080&#39;);&#xA;&#xA;  socket.addEventListener(&#39;message&#39;,  (event) =&amp;gt; {&#xA;    dispatch({type: &#39;MESSAGE_RECEIVED&#39;, data: event.data});&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Styling Widgets&lt;/h2&gt; &#xA;&lt;p&gt;Uebersicht comes bundled with &lt;a href=&#34;https://emotion.sh&#34;&gt;Emotion &lt;/a&gt; (version 9). It exposes it&#39;s &lt;code&gt;css&lt;/code&gt; and &lt;code&gt;styled&lt;/code&gt; functions via the &lt;code&gt;uebersicht&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;As described above, you can use &lt;code&gt;className&lt;/code&gt; to style and position the root node of your widget. For further styling you can do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { css } from &#34;uebersicht&#34;&#xA;&#xA;const header = css`&#xA;  font-family: Ubuntu;&#xA;  font-size: 20px;&#xA;  text-align: center;&#xA;  color: white;&#xA;`&#xA;&#xA;const boxes = css`&#xA;  display: flex;&#xA;  justify-content: center;&#xA;`&#xA;&#xA;const box = css({&#xA;  height: &#34;40px&#34;,&#xA;  width: &#34;40px&#34;,&#xA;  &#34;&amp;amp; + &amp;amp;&#34;: {&#xA;    marginLeft: &#34;5px&#34;&#xA;  }&#xA;})&#xA;&#xA;export const className = `&#xA;  left: 20px;&#xA;  top: 20px;&#xA;  width: 200px;&#xA;`&#xA;&#xA;export const initialState = { colors: [&#34;DeepPink&#34;, &#34;DeepSkyBlue&#34;, &#34;Coral&#34;] }&#xA;&#xA;export const render = ({ colors }) =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;h1 className={header}&amp;gt;Some colored boxes&amp;lt;/h1&amp;gt;&#xA;      &amp;lt;div className={boxes}&amp;gt;&#xA;        {colors.map((color, idx) =&amp;gt; (&#xA;          &amp;lt;div className={`${box} ${css({ background: color })}`} key={idx} /&amp;gt;&#xA;        ))}&#xA;      &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can also make use of Emotion&#39;s styles components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { styled } from &#34;uebersicht&#34;&#xA;&#xA;const Header = styled(&#34;h1&#34;)`&#xA;  font-family: Ubuntu;&#xA;  font-size: 20px;&#xA;  text-align: center;&#xA;  color: white;&#xA;`&#xA;&#xA;const Boxes = styled(&#34;div&#34;)`&#xA;  display: flex;&#xA;  justify-content: center;&#xA;`&#xA;&#xA;const Box = styled(&#34;div&#34;)(props =&amp;gt; ({&#xA;  height: &#34;40px&#34;,&#xA;  width: &#34;40px&#34;,&#xA;  background: props.color,&#xA;  marginRight: &#34;5px&#34;&#xA;}))&#xA;&#xA;export const className = `&#xA;  left: 20px;&#xA;  top: 20px;&#xA;  width: 200px;&#xA;`&#xA;&#xA;export const initialState = { colors: [&#34;DeepPink&#34;, &#34;DeepSkyBlue&#34;, &#34;Coral&#34;] }&#xA;&#xA;export const render = ({ colors }) =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;Header&amp;gt;Some colored boxes&amp;lt;/Header&amp;gt;&#xA;      &amp;lt;Boxes&amp;gt;&#xA;        {colors.map((color, idx) =&amp;gt; (&#xA;          &amp;lt;Box color={color} key={idx} /&amp;gt;&#xA;        ))}&#xA;      &amp;lt;/Boxes&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, since you can also install and import any module you like, you can use your favorite styling library instead.&lt;/p&gt; &#xA;&lt;h2&gt;Running Shell Commands&lt;/h2&gt; &#xA;&lt;p&gt;If need to run extra shell commands without using the &lt;a href=&#34;https://raw.githubusercontent.com/felixhageloh/uebersicht/master/#command&#34;&gt;command&lt;/a&gt; property, you can import the &lt;code&gt;run&lt;/code&gt; function from the &lt;code&gt;uebersicht&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;It returns a Promise, which will resolve to the output of the command (stdout) or reject if any error occurred.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { run } from &#39;uebersicht&#39;&#xA;&#xA;export const render =&amp;gt; (props, dispatch) {&#xA;  return (&#xA;    &amp;lt;button&#xA;      onClick={() =&amp;gt; {&#xA;        run(&#39;echo &#34;new output&#34;&#39;)&#xA;          .then((output) =&amp;gt; dispatch({type: &#39;OUTPUT_UPDATED&#39;, output}))&#xA;      }}&#xA;    &amp;gt;&#xA;      Update&#xA;    &amp;lt;/button&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that in order to receive click events you need to configure an interaction shortcut and give Übersicht accessibility access.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Geolocation API&lt;/h2&gt; &#xA;&lt;p&gt;While the WebView used by Übersicht seems to provide the standard HTML5 geolocation API, it is not functional and there seems to be no way to enable it. Übersicht now provides a custom implementation, which tries to follow the standard implementation as closely as possible. However, so far it provides only the basics and might still be somewhat unstable. The api can be found under &lt;code&gt;window.geolocation&lt;/code&gt; (instead of &lt;code&gt;window.navigator.geolocation&lt;/code&gt;). And supports the following methods&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;geolocation.getCurrentPosition(callback)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;geolocation.watchPosition(callback)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;geolocation.clearWatch(watchId)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Geolocation&#34;&gt;documentation&lt;/a&gt; for details on how to use these methods. The main difference to the standard API is that none of them accept options (the accuracy for position data is always set to the highest) and error reporting has not be implemented yet.&lt;/p&gt; &#xA;&lt;p&gt;However, in a addition to the standard &lt;code&gt;Position&lt;/code&gt; object provided by the standard API, Übersicht provides an extra &lt;code&gt;address&lt;/code&gt; property with the following fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Street&lt;/li&gt; &#xA; &lt;li&gt;City&lt;/li&gt; &#xA; &lt;li&gt;ZIP&lt;/li&gt; &#xA; &lt;li&gt;Country&lt;/li&gt; &#xA; &lt;li&gt;State&lt;/li&gt; &#xA; &lt;li&gt;CountryCode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Built In Proxy Server&lt;/h2&gt; &#xA;&lt;p&gt;If you like you make Ajax requests to an external site without using a command, you can make use of the built in proxy server. It is running on &lt;code&gt;http://127.0.0.1:41417&lt;/code&gt; and can be used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;command: (callback) -&amp;gt;&#xA;  proxy = &#34;http://127.0.0.1:41417/&#34;&#xA;  server = &#34;http://example.com:8080&#34;&#xA;  path = &#34;/getsomejson&#34;&#xA;  $.get proxy + server + path, (json) -&amp;gt;&#xA;    callback null, json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scripting Support&lt;/h2&gt; &#xA;&lt;p&gt;Übersicht has AppleScript support since version 1.1.45. To get detailed information on what you can script, open the Script Editor and add Übersicht to the Library (use Window -&amp;gt; Library to show). Here are a few examples of what you can do with AppleScript. (Note that the examples all use the application id instead of the app name. This is because typing the umlaut Ü can be tricky):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tell application id &#34;tracesOf.Uebersicht&#34; to refresh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;refreshes all widgets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tell application id &#34;tracesOf.Uebersicht&#34; to refresh widget id &#34;my-widget&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;refreshes widget with id &#34;my-widget&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tell application id &#34;tracesOf.Uebersicht&#34; to every widget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;lists all widgets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tell application id &#34;tracesOf.Uebersicht&#34; to set hidden of widget id &#34;top-cpu-coffee&#34; to false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;hides the widget with ID &#34;top-cpu-coffee&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Building Übersicht&lt;/h2&gt; &#xA;&lt;p&gt;To build Übersicht you will need to have NodeJS and a few dependencies installed:&lt;/p&gt; &#xA;&lt;h3&gt;setup&lt;/h3&gt; &#xA;&lt;p&gt;Currently, the project supports node 8.&lt;/p&gt; &#xA;&lt;p&gt;If you already have node, you&#39;ll have to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew unlink node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, install node 8 using homebrew&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install node@8 &amp;amp;&amp;amp; brew link --force node@8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;git and unicode characters&lt;/h3&gt; &#xA;&lt;p&gt;Git might not like the umlaut (ü) in some of the path names and will constantly show them as untracked files. To get rid of this issue, I had to use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config core.precomposeunicode false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, the common advice is to set this to &lt;code&gt;true&lt;/code&gt;. It might depend on the OS and git version which one to use.&lt;/p&gt; &#xA;&lt;h3&gt;building&lt;/h3&gt; &#xA;&lt;p&gt;The code base consists of two parts, a cocoa app and a NodeJS app inside &lt;code&gt;server/&lt;/code&gt;. To build the node app separately, use &lt;code&gt;npm run release&lt;/code&gt;. This happens automatically every time you build using XCode.&lt;/p&gt; &#xA;&lt;p&gt;The node app can be run standalone using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;coffee server/server.coffee -d &amp;lt;path/to/widget/dir&amp;gt; -p &amp;lt;port&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Building in Xcode&lt;/h1&gt; &#xA;&lt;p&gt;The first time opening the project in Xcode you might see this message when trying to build: &#34;The run destination My Mac is not valid for Running the scheme &#39;Übersicht&#39;.&#34;&lt;/p&gt; &#xA;&lt;p&gt;Click on &lt;code&gt;Uebersicht&lt;/code&gt; in the project navigator and then select the menu &lt;code&gt;Editor &amp;gt; Validate Settings...&lt;/code&gt; and click &lt;code&gt;Perform Changes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can then attempt to build, you may then be presented with code sign issues, click &lt;code&gt;Fix Issue&lt;/code&gt; to continue.&lt;/p&gt; &#xA;&lt;p&gt;Now you need to remove the code signing shell script, select the &lt;code&gt;Übersicht&lt;/code&gt; target and under &lt;code&gt;Build Phases&lt;/code&gt; remove the code in the &lt;code&gt;Code Sign Frameworks&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;You should now be able to build successfully.&lt;/p&gt; &#xA;&lt;p&gt;There is one last step on the Node.js side to complete. For the sake of brevity, this link will solve your problem:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http&#34;&gt;http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Legal&lt;/h1&gt; &#xA;&lt;p&gt;The source for Übersicht is released under the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;© 2019 Felix Hageloh&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>videolan/vlckit</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/videolan/vlckit</id>
    <link href="https://github.com/videolan/vlckit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;libvlc bindings for OS X, iOS and tvOS in Objective-C, official mirror&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://www.videolan.org/images/vlckit/logo.svg?sanitize=true&#34; alt=&#34;VLCKit logo&#34; height=&#34;140&#34;&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;VLCKit&lt;/strong&gt; is a generic multimedia library for any audio or video playback needs on macOS, iOS and tvOS.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Cocoapods&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VLCKit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/VLCKit.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cocoapods.org/pods/VLCKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/VLCKit.svg?sanitize=true&#34; alt=&#34;VLCKit is CocoaPods Compatible&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MobileVLCKit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/MobileVLCKit.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cocoapods.org/pods/MobileVLCKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/MobileVLCKit.svg?sanitize=true&#34; alt=&#34;MobileVLCKit is CocoaPods Compatible&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TVVLCKit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/TVVLCKit.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cocoapods.org/pods/TVVLCKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/TVVLCKit.svg?sanitize=true&#34; alt=&#34;TVVLCKit is CocoaPods Compatible&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Table of content&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#use-case&#34;&gt;Use-case&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#cocoapods&#34;&gt;Cocoapods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#build&#34;&gt;Build&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#default&#34;&gt;Default&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#build-with-your-own-vlc-repository&#34;&gt;Build with your own VLC repository&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#contribute&#34;&gt;Contribute&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#pull-request&#34;&gt;Pull Request&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#gitlab-issues&#34;&gt;GitLab Issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#patches&#34;&gt;Patches&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#communication&#34;&gt;Communication&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#forum&#34;&gt;Forum&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#issues&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#irc&#34;&gt;IRC&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/#further-reading&#34;&gt;Further reading&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wrapper of &lt;strong&gt;libVLC&lt;/strong&gt;, the engine of the popular media player &lt;em&gt;VLC&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Supports playback, active streaming, and media to file conversations on the Mac.&lt;/li&gt; &#xA; &lt;li&gt;Open-source software licensed under &lt;a href=&#34;http://opensource.org/licenses/LGPL-2.1/&#34;&gt;LGPLv2.1&lt;/a&gt; or later, available in source code and binary form from &lt;a href=&#34;http://www.videolan.org/&#34;&gt;VideoLAN&#39;s website&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Easily integratable via &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use-case&lt;/h2&gt; &#xA;&lt;p&gt;When will you need VLCKit?&lt;/p&gt; &#xA;&lt;p&gt;Frankly, you will need it whenever you need to play media not supported by QuickTime / AVFoundation or if you require more flexibility.&lt;/p&gt; &#xA;&lt;p&gt;Here are some other common use-cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Playing something else besides H264/AAC files or HLS streams.&lt;/li&gt; &#xA; &lt;li&gt;Need subtitles beyond QuickTime’s basic support for Closed Captions.&lt;/li&gt; &#xA; &lt;li&gt;Your media source is neither your mobile device nor a basic HTTP server, but a live stream hailing from some weird media server or even a raw DVB signal broadcasted on a local network.&lt;/li&gt; &#xA; &lt;li&gt;and more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 8.4 + / macOS 10.9+ / tvOS 10.2+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 9.0+&lt;/li&gt; &#xA; &lt;li&gt;Cocoapods 1.4+&lt;/li&gt; &#xA; &lt;li&gt;Python 3.7 (compile time only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. You can install it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install cocoapods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate the latest VLCKit into your project, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;&#xA;target &#39;&amp;lt;macOS Target&amp;gt;&#39; do&#xA;    platform :macos, &#39;10.9&#39;&#xA;    pod &#39;VLCKit&#39;, &#39;~&amp;gt;3.3.0&#39;&#xA;end&#xA;&#xA;target &#39;&amp;lt;iOS Target&amp;gt;&#39; do&#xA;    platform :ios, &#39;8.4&#39;&#xA;    pod &#39;MobileVLCKit&#39;, &#39;~&amp;gt;3.3.0&#39;&#xA;end&#xA;&#xA;target &#39;&amp;lt;tvOS Target&amp;gt;&#39; do&#xA;    platform :tvos, &#39;10.2&#39;&#xA;    pod &#39;TVVLCKit&#39;, &#39;~&amp;gt;3.3.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a way to add frameworks to your Cocoa application. You can install it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate VLCKit into your project, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;. The URL depends on your target OS.&lt;/p&gt; &#xA;&lt;p&gt;iOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;binary &#34;https://code.videolan.org/videolan/VLCKit/raw/master/Packaging/MobileVLCKit.json&#34; ~&amp;gt; 3.3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;macOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;binary &#34;https://code.videolan.org/videolan/VLCKit/raw/master/Packaging/VLCKit.json&#34; ~&amp;gt; 3.3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;tvOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;binary &#34;https://code.videolan.org/videolan/VLCKit/raw/master/Packaging/TVVLCKit.json&#34; ~&amp;gt; 3.3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the following system dependencies are required and need to be linked into the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AudioToolbox.framework&lt;/li&gt; &#xA; &lt;li&gt;AVFoundation.framework&lt;/li&gt; &#xA; &lt;li&gt;CFNetwork.framework&lt;/li&gt; &#xA; &lt;li&gt;CoreFoundation.framework&lt;/li&gt; &#xA; &lt;li&gt;CoreGraphics.framework&lt;/li&gt; &#xA; &lt;li&gt;CoreMedia.framework&lt;/li&gt; &#xA; &lt;li&gt;CoreText.framework&lt;/li&gt; &#xA; &lt;li&gt;CoreVideo.framework&lt;/li&gt; &#xA; &lt;li&gt;Foundation.framework&lt;/li&gt; &#xA; &lt;li&gt;libbz2.tbd&lt;/li&gt; &#xA; &lt;li&gt;libc++.tbd&lt;/li&gt; &#xA; &lt;li&gt;libiconv.tbd&lt;/li&gt; &#xA; &lt;li&gt;libxml2.tbd&lt;/li&gt; &#xA; &lt;li&gt;OpenGLES.framework&lt;/li&gt; &#xA; &lt;li&gt;QuartzCore.framework&lt;/li&gt; &#xA; &lt;li&gt;Security.framework&lt;/li&gt; &#xA; &lt;li&gt;VideoToolbox.framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On iOS and tvOS, you also need to link:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UIKit.framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;API documentation of VLCKit is available &lt;a href=&#34;https://videolan.videolan.me/VLCKit&#34;&gt;online&lt;/a&gt; and within both the source code as well as binary downloads. Except as indicated, all the APIs are the same on macOS, iOS and tvOS.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h3&gt;Default&lt;/h3&gt; &#xA;&lt;p&gt;Make sure that Python 3.7 is installed. Get the package from &lt;a href=&#34;https://www.python.org&#34;&gt;https://www.python.org&lt;/a&gt; - do NOT use homebrew for installation as it will be ignored by VLC&#39;s build process.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;compileAndBuildVLCKit.sh&lt;/code&gt; with the &lt;code&gt;-a ${ARCH}&lt;/code&gt; option to specify the target architecture.&lt;/p&gt; &#xA;&lt;p&gt;More information can be found under &lt;code&gt;./compileAndBuildVLCKit.sh -h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build with your own VLC repository&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Put a VLC repository inside &lt;code&gt;libvlc/vlc&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;code&gt;mkdir libvlc &amp;amp;&amp;amp; cd libvlc &amp;amp;&amp;amp; ln -s &#34;PATH_TO_VLC&#34;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Apply VLC patches needed for VLCKit.&lt;/p&gt; &lt;p&gt;&lt;code&gt;cd vlc&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;git am ../libvlc/patches/*&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;run &lt;code&gt;compileAndBuildVLCKit.sh&lt;/code&gt; with the &lt;code&gt;-n&lt;/code&gt; option.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;As VLCKit is an open-source project hosted by VideoLAN, we happily welcome all kinds of contributions.&lt;/p&gt; &#xA;&lt;h3&gt;Pull Request&lt;/h3&gt; &#xA;&lt;p&gt;Pull requests are more than welcome! If you do submit one, please make sure to use a descriptive title and description.&lt;/p&gt; &#xA;&lt;h3&gt;GitLab Issues&lt;/h3&gt; &#xA;&lt;p&gt;You can look through the currently open &lt;a href=&#34;https://code.videolan.org/videolan/vlckit/issues/&#34;&gt;issues on GitLab&lt;/a&gt; and choose the one that interests you the most.&lt;/p&gt; &#xA;&lt;h3&gt;Patches&lt;/h3&gt; &#xA;&lt;p&gt;If you like the more classic approach, you can submit patches!&lt;/p&gt; &#xA;&lt;p&gt;For detailed explanation on how to do so, please read our wiki page on &lt;a href=&#34;https://wiki.videolan.org/Sending_Patches_VLC/&#34;&gt;how to send patches&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Q. Since this isn&#39;t under the MIT license, is there something special I should know?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;http://opensource.org/licenses/LGPL-2.1/&#34;&gt;LGPLv2.1&lt;/a&gt; allows our software to be included in proprietary apps, &lt;em&gt;as long as you follow the license.&lt;/em&gt; Here are some key points you should be aware of.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure to publish any potential changes you do to our software&lt;/li&gt; &#xA; &lt;li&gt;Make sure that the end-user is aware that VLCKit is embedded within your greater work&lt;/li&gt; &#xA; &lt;li&gt;Make sure that the end-user is aware of the gained rights and is granted access to our code as well as to your additions to our work&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For further details, please read the license and consult your lawyer with any questions you might have.&lt;/p&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;h3&gt;Forum&lt;/h3&gt; &#xA;&lt;p&gt;If you ever need help, feel free to reach out. The &lt;a href=&#34;http://forum.videolan.org/&#34;&gt;forum&lt;/a&gt; is always there for you.&lt;/p&gt; &#xA;&lt;h3&gt;Issues&lt;/h3&gt; &#xA;&lt;p&gt;Did you find a bug and want to report it to us? You can create an issue on &lt;a href=&#34;https://code.videolan.org/videolan/vlckit/issues/&#34;&gt;GitLab&lt;/a&gt; or on our &lt;a href=&#34;https://trac.videolan.org/vlc/&#34;&gt;bug tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;IRC&lt;/h3&gt; &#xA;&lt;p&gt;Do you have a pressing question or just want to talk? Reach out to us via our IRC channel on the &lt;a href=&#34;http://www.freenode.net/&#34;&gt;freenode&lt;/a&gt; network&#39;s &lt;strong&gt;#videolan&lt;/strong&gt; channel.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have an IRC client at hand, use the &lt;a href=&#34;http://webchat.freenode.net/&#34;&gt;freenode webchat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Discord&lt;/h3&gt; &#xA;&lt;p&gt;For matters related to the VLCKit and LibVLC APIs, join our LibVLC bindings Community Discord Server!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/3h3K3JF&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/716939396464508958?label=discord&#34; alt=&#34;Join the chat at https://discord.gg/3h3K3JF&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;VLCKit is under the &lt;a href=&#34;http://opensource.org/licenses/LGPL-2.1/&#34;&gt;LGPLv2.1&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlckit/master/COPYING&#34;&gt;COPYING&lt;/a&gt; for more license info.&lt;/p&gt; &#xA;&lt;h2&gt;Further reading&lt;/h2&gt; &#xA;&lt;p&gt;You can find more documentation on the &lt;a href=&#34;https://wiki.videolan.org/VLCKit/&#34;&gt;VideoLAN wiki&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Cenmrev/V2RayX</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/Cenmrev/V2RayX</id>
    <link href="https://github.com/Cenmrev/V2RayX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GUI for v2ray-core on macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;V2RayX: A simple GUI for V2Ray on macOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/Cenmrev/V2RayX&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Cenmrev/V2RayX.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is V2Ray?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;READ THIS&lt;/strong&gt;: &lt;a href=&#34;http://www.v2ray.com&#34;&gt;Project V2Ray&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;YOU SHOULD READ V2RAY&#39;S OFFICIAL INSTRUCTION BEFORE USING V2RAYX!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other V2Ray clients on macOS: &lt;a href=&#34;https://github.com/yanue/v2rayu&#34;&gt;V2RayU&lt;/a&gt;. (Not related to or endorsed by authors of this repo. USE AT YOUR OWN RISK.)&lt;/p&gt; &#xA;&lt;h2&gt;Download V2RayX&lt;/h2&gt; &#xA;&lt;p&gt;Download from &lt;a href=&#34;https://github.com/Cenmrev/V2RayX/releases&#34;&gt;Releases&lt;/a&gt;. (compiled by &lt;a href=&#34;https://travis-ci.org/Cenmrev/V2RayX&#34;&gt;travis-ci.org&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;By &lt;a href=&#34;https://caskroom.github.io/&#34;&gt;Homebrew-Cask&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew cask install v2rayx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;V2RayX.app is built by running one of the following commands in your terminal. You can install this via the command-line with curl.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sh -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Cenmrev/V2RayX/master/compilefromsource.sh)&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or step by step:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone --recursive https://github.com/Cenmrev/V2RayX.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;open V2RayX.xcodeproj and use Xcode to build V2RayX.&lt;/p&gt; &#xA;&lt;h2&gt;How does V2RayX work&lt;/h2&gt; &#xA;&lt;p&gt;V2RayX provides a GUI to generate the config file for V2Ray. It includes V2Ray&#39;s binary executable in the app bundle. V2RayX starts and stops V2Ray with &lt;code&gt;launchd&lt;/code&gt; of macOS.&lt;/p&gt; &#xA;&lt;p&gt;V2RayX also allows users to change system proxy settings and switch proxy servers on the macOS menu bar.&lt;/p&gt; &#xA;&lt;p&gt;As default, V2RayX will open a socks5 proxy at port &lt;code&gt;1081&lt;/code&gt; as the main inbound, as well as a http proxy at port &lt;code&gt;8001&lt;/code&gt; as an inboundDetour.&lt;/p&gt; &#xA;&lt;p&gt;V2RayX provide three modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Global Mode: V2RayX asks macOS to route all internet traffic to v2ray core if the network traffic obeys operating system&#39;s network rules.&lt;/li&gt; &#xA; &lt;li&gt;PAC Mode: macOS will determine the routing based on a pac file and some traffic may be routed to v2ray core.&lt;/li&gt; &#xA; &lt;li&gt;Manual Mode: V2RayX will not modify any macOS network settings, but only start or stop v2ray core.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Options in menu list &lt;code&gt;Routing Rule&lt;/code&gt; determine how v2ray core deals with incoming traffic. Core routing rules apply to all three modes above.&lt;/p&gt; &#xA;&lt;h3&gt;auto-run on login&lt;/h3&gt; &#xA;&lt;p&gt;Open macOS System Preferences -&amp;gt; Users &amp;amp; Group -&amp;gt; Login Items, add V2RayX.app to the list.&lt;/p&gt; &#xA;&lt;h3&gt;manually update v2ray-core&lt;/h3&gt; &#xA;&lt;p&gt;replace &lt;code&gt;V2RayX.app/Contents/Resources/v2ray&lt;/code&gt; with the newest v2ray version from &lt;a href=&#34;https://github.com/v2ray/v2ray-core/releases&#34;&gt;v2ray-core repo&lt;/a&gt;. However, compatibility is not guaranteed.&lt;/p&gt; &#xA;&lt;h3&gt;Uninstall&lt;/h3&gt; &#xA;&lt;p&gt;V2RayX will create the following files and folders:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/Library/Application Support/V2RayX&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/Library/Application Support/V2RayX&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/Library/Preferences/cenmrev.V2RayX.plist&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So, to totally uninstall V2RayX, just delete V2RayX.app and the files above. :)&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledge&lt;/h2&gt; &#xA;&lt;p&gt;V2RayX uses &lt;a href=&#34;https://github.com/swisspol/GCDWebServer&#34;&gt;GCDWebServer&lt;/a&gt; to provide a local pac server. V2RayX also uses many ideas and codes from &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-iOS/tree/master&#34;&gt;ShadowsocksX&lt;/a&gt;, especially, the codes of &lt;a href=&#34;https://github.com/Cenmrev/V2RayX/raw/master/v2rayx_sysconf/main.m&#34;&gt;v2rays_sysconfig&lt;/a&gt; are simply copied from &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-iOS/raw/master/shadowsocks_sysconf/main.m&#34;&gt;shadowsocks_sysconf&lt;/a&gt; with some modifications.&lt;/p&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;p&gt;If Project V2Ray or V2RayX helped you, you can also help us by donation &lt;strong&gt;in your will&lt;/strong&gt;. To donate to Project V2Ray, you may refer to &lt;a href=&#34;https://www.v2ray.com/chapter_00/02_donate.html&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This tool is mainly for personal usage. For professional users and technique support, commercial software like proxifier is recommended. Please refer to &lt;a href=&#34;https://github.com/Cenmrev/V2RayX/issues/60#issuecomment-369531443&#34;&gt;#60&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The developer does not major in CS nor Software Engineer and currently is busy with grad school courses. So V2rayX will not be updated frequently. Users can replace V2RayX.app/Contents/Resources/v2ray with the newest v2ray-core downloaded from &lt;a href=&#34;https://github.com/v2ray/v2ray-core/releases&#34;&gt;https://github.com/v2ray/v2ray-core/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The developer currently does not have enough time to add more features to V2RayX, nor to merge PRs. However, forking and releasing your own version are always welcome.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>johnno1962/InjectionIII</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/johnno1962/InjectionIII</id>
    <link href="https://github.com/johnno1962/InjectionIII" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Re-write of Injection for Xcode in (mostly) Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;InjectionIII - overdue Swift rewrite of InjectionForXcode&lt;/h1&gt; &#xA;&lt;p&gt;Chinese language README &amp;amp; Tutorial: &lt;a href=&#34;https://github.com/johnno1962/InjectionIII/raw/main/README_Chinese.md&#34;&gt;中文集成指南&lt;/a&gt;，&lt;a href=&#34;https://juejin.cn/post/6990285526901522463&#34;&gt;掘金教程&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://johnholdsworth.com/Syringe_128.png&#34; alt=&#34;Icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Code injection allows you to update the implementation of functions and any method of a class, struct or enum incrementally in the iOS simulator without having to rebuild or restart your application. This saves the developer a significant amount of time tweaking code or iterating over a design. This start-over implementation of &lt;a href=&#34;https://github.com/johnno1962/injectionforxcode&#34;&gt;Injection for Xcode&lt;/a&gt; has been built into a standalone app: &lt;code&gt;InjectionIII.app&lt;/code&gt; which runs in the status bar and is &lt;a href=&#34;https://itunes.apple.com/app/injectioniii/id1380446739?mt=12&#34;&gt;available from the Mac App Store&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stop Press:&lt;/strong&gt; The functionality of InjectionIII is now available as a Swift Package in the &lt;a href=&#34;https://github.com/johnno1962/HotReloading&#34;&gt;HotReloading Project&lt;/a&gt; which also supports dynamic code updates on a device. No need to download the app, just add this project to yours and add a short &#34;Run Script&#34; &#34;Build Phase&#34; as described in the README.md. &lt;em&gt;Do not release your app with the HotReloading package included!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This README includes descriptions of some newer features that are only available in more recent releases of the InjectionIII.app &lt;a href=&#34;https://github.com/johnno1962/InjectionIII/releases&#34;&gt;available on github&lt;/a&gt;. You should use one of these releases for Apple Silicon or if you have upgraded to macOS Monterey or Xcode 13.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://johnholdsworth.com/InjectionUI.gif&#34; alt=&#34;Icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;InjectionIII.app&lt;/code&gt; needs an Xcode 10.2 or greater at the path &lt;code&gt;/Applications/Xcode.app&lt;/code&gt; , works for &lt;code&gt;Swift&lt;/code&gt;, &lt;code&gt;Objective-C&lt;/code&gt; and since 3.2.2 &lt;code&gt;C++&lt;/code&gt; and can be used alongside &lt;a href=&#34;https://www.jetbrains.com/help/objc/create-a-swiftui-application.html&#34;&gt;AppCode&lt;/a&gt; or by using the &lt;a href=&#34;https://github.com/johnno1962/InjectionIII/raw/master/AppCodePlugin/INSTALL.md&#34;&gt;AppCode Plugin&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;To understand how InjectionIII works and the techniques it uses consult the book &lt;a href=&#34;http://books.apple.com/us/book/id1551005489&#34;&gt;Swift Secrets&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Managing Expectations&lt;/h3&gt; &#xA;&lt;p&gt;By rights, InjectionIII shouldn&#39;t work and this seems to be a common perception for those who haven&#39;t actually tried it and yet it does. It relies on documented features of Apple&#39;s dynamic linker which have proven to be reliable for over a year now. That said, you can&#39;t just inject &lt;em&gt;any&lt;/em&gt; source file. For example, it&#39;s best not to try to inject a file containing a protocol definition. Keep in mind though the worst case is that your application might crash during debugging and you&#39;ll have to restart it as you would have had to anyway. Gaining trust in the changes you can inject builds with experience and with it, the amount of time you save. The &lt;code&gt;iOSInjection.bundle&lt;/code&gt; is only loaded during development in the simulator and cannot affect your application when it is deployed into production.&lt;/p&gt; &#xA;&lt;p&gt;Always remember to add &lt;code&gt;&#34;Other Linker Flags&#34;&lt;/code&gt;, &lt;code&gt;&#34;-Xlinker -interposable&#34;&lt;/code&gt; to your project or due to details of how a method is dispatched you may find InjectionIII half works for classes and classes and not for structs. Also, go easy on access control. For example, InjectionIII is unable to inject methods in a private extension as the symbols are not exported to the object file.&lt;/p&gt; &#xA;&lt;p&gt;To reason about your app while you are using injection, separate data and program in your mind. You can&#39;t inject changes to the way data is laid out in memory by adding properties or methods on the fly but apart from that exchanging method implementations is performed on the main thread and generally reliable. A common question for new users is: I injected a new version of the code, why can&#39;t I see the changes on the screen? To have effect, the new code needs to be actually executed and it&#39;s up to the user to use either an &lt;code&gt;@objc func injected()&lt;/code&gt; method or a notification to reload a view controller or refresh a table view to see changes or perform some user action that forces a redisplay.&lt;/p&gt; &#xA;&lt;p&gt;If you try InjectionIII and you think it doesn&#39;t work, please, please file an issue so we can either explain what is going on, improve the documentation or try to resolve the particular edge case you have encountered. The project is quite mature now and provided you&#39;re holding it correctly and don&#39;t ask too much of it, it should &#34;just work&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;To use injection, download the app from the App Store and run it. Then, you need to add &#34;-Xlinker -interposable&#34; (without the double quotes) to the &#34;Other Linker Flags&#34; of all targets in your project for the Debug configuration (qualified by the simulator SDK to avoid complications with bitcode). Finally, add one of the following to your application delegate&#39;s &lt;code&gt;applicationDidFinishLaunching:&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Xcode 10.2 and later (Swift 5+):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;#if DEBUG&#xA;Bundle(path: &#34;/Applications/InjectionIII.app/Contents/Resources/iOSInjection.bundle&#34;)?.load()&#xA;//for tvOS:&#xA;Bundle(path: &#34;/Applications/InjectionIII.app/Contents/Resources/tvOSInjection.bundle&#34;)?.load()&#xA;//Or for macOS:&#xA;Bundle(path: &#34;/Applications/InjectionIII.app/Contents/Resources/macOSInjection.bundle&#34;)?.load()&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding one of these lines loads a bundle included in the &lt;code&gt;InjectionIII.app&lt;/code&gt;&#39;s resources which connects over a localhost socket to the InjectionIII app which runs on the task bar. Once injection is connected, you&#39;ll be prompted to select the directory containing the project file for the app you wish to inject. This starts a &lt;code&gt;file watcher&lt;/code&gt; for that directory inside the Mac app so whenever you save to disk a Swift (or Objective-C) source in the project, the target app is messaged through the socket to compile, link, dynamically load and update the implementation of methods in the file being injected.&lt;/p&gt; &#xA;&lt;p&gt;If your project is organised across multiple directories or the project file is not at the root of the source tree you can add other directories to be watched for file changes using the &#34;Add Directory&#34; menu item. This list resets when you select a new project.&lt;/p&gt; &#xA;&lt;p&gt;The file watcher can be disabled &amp;amp; enabled while the app is running using the status bar menu. While the file watcher is disabled you can still force injections through manually using a hotkey &lt;code&gt;ctrl-=&lt;/code&gt; (remember to save the file first!)&lt;/p&gt; &#xA;&lt;p&gt;If you inject a subclass of &lt;code&gt;XCTest&lt;/code&gt; InjectionIII will try running that individual test inside your application provided has been compiled at some time in the past and doesn&#39;t require test specific support code. If the menu item &#34;Enable TDD&#34; is enabled, when you inject a file InjectionIII will search for test sources containing that filename, inject them and run the test.&lt;/p&gt; &#xA;&lt;p&gt;You can detect when a &lt;em&gt;class&lt;/em&gt; has been injected in your code (to reload a view controller for example) by adding an &lt;code&gt;@objc func injected()&lt;/code&gt; class or instance method. The instance &lt;code&gt;@objc func injected()&lt;/code&gt; method relies on a &#34;sweep&#34; of all objects in your application to find those of the class you have just injected which can be unreliable when using &lt;code&gt;unowned&lt;/code&gt; instance variables. If you encounter problems, remove the injected() method and subscribe to the &lt;code&gt;&#34;INJECTION_BUNDLE_NOTIFICATION&#34;&lt;/code&gt; instead along the lines of the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;NotificationCenter.default.addObserver(self,&#xA;    selector: #selector(configureView),&#xA;    name: Notification.Name(&#34;INJECTION_BUNDLE_NOTIFICATION&#34;), object: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Included in this release is &#34;Xprobe&#34; which allows you to browse and inspect the objects in your application through a web-like interface and execute code against them. Enter text into the search textfield to locate objects quickly by class name.&lt;/p&gt; &#xA;&lt;p&gt;If you want to build this project from source (which you may need to do to use injection with macOS apps) you&#39;ll need to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/johnno1962/InjectionIII --recurse-submodules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To replicate one of the &lt;a href=&#34;https://github.com/johnno1962/InjectionIII/releases&#34;&gt;github releases&lt;/a&gt;, turn the App sandbox off in the entitlements file.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking to understand how the app works it&#39;s magic, it&#39;s not a short story but the staring point is the &lt;a href=&#34;https://raw.githubusercontent.com/johnno1962/InjectionIII/main/ROADMAP.md&#34;&gt;ROADMAP.md&lt;/a&gt; file in this repo.&lt;/p&gt; &#xA;&lt;h3&gt;Available downloads&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Xcode 10.2+&lt;/th&gt; &#xA;   &lt;th&gt;Monterey &amp;amp; Xcode 13&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://itunes.apple.com/app/injectioniii/id1380446739?mt=12&#34;&gt;Mac app store&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/johnno1962/InjectionIII/releases&#34;&gt;Github Releases&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Variations on using the InjectionIII app:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/app/injectioniii/id1380446739?mt=12&#34;&gt;App Store version&lt;/a&gt;: load the injection bundle and you can perform code injection in the simulator.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/johnno1962/InjectionIII/releases&#34;&gt;Binary Releases&lt;/a&gt;: These are often slightly more up to date than the App Store release and compile outside the App sandbox which avoids compilcations with case insensitve filesystems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/johnno1962/HotReloading&#34;&gt;HotReloading Project&lt;/a&gt;: A version of InjectionIII that works just by adding this Swift Package to your project (and adding the -interposable linker flag). See the repo README for details. Remember not to leave this package configured into your project for a release build or it will bloat your app binary!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;On-Device Injection&lt;/strong&gt;: Instead of loading the &lt;code&gt;iOSInjection.bundle&lt;/code&gt;, add the &lt;a href=&#34;https://github.com/johnno1962/HotReloading&#34;&gt;HotReloading&lt;/a&gt; Swift Package to your project and add a &#34;Build Phase&#34; in the README to run the &lt;code&gt;injectiond&lt;/code&gt; daemon version of the InjectionIII.app and you should be able to perform injection on a iOS or tvOS device. For more detail and the limitations of this new feature, see the README of the &lt;a href=&#34;https://github.com/johnno1962/HotReloading&#34;&gt;HotReloading&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h3&gt;Limitations/FAQ&lt;/h3&gt; &#xA;&lt;p&gt;New releases of InjectionIII use a &lt;a href=&#34;http://johnholdsworth.com/dyld_dynamic_interpose.html&#34;&gt;different patching technique&lt;/a&gt; than previous versions in that you can now update the implementations of class, struct and enum methods (final or not) provided they have not been inlined which shouldn&#39;t be the case for a debug build. You can&#39;t however alter the layout of a class or struct in the course of an injection i.e. add or rearrange properties with storage or add or move methods of a non-final class or your app will likely crash. Also, see the notes below for injecting &lt;code&gt;SwiftUI&lt;/code&gt; views and how they require type erasure.&lt;/p&gt; &#xA;&lt;p&gt;If you have a complex project including Objective-C or C dependancies, using the &lt;code&gt;-interposable&lt;/code&gt; flag may provoke undefined symbols or the following error on linking:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Can&#39;t find ordinal for imported symbol for architecture x86_64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If this is the case, add the following additional &#34;Other linker Flags&#34; and it should go away.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-Xlinker -undefined -Xlinker dynamic_lookup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a project using extensive bridging &amp;amp; Objective-C it&#39;s recommended to use one of the &lt;a href=&#34;https://github.com/johnno1962/InjectionIII/releases&#34;&gt;binary github releases&lt;/a&gt; that have the sandbox turned off. This is because the App Store version operates in a case sensitive file system which can create problems if filenames in your project do not have the identical casing as the actual filename on disk.&lt;/p&gt; &#xA;&lt;p&gt;If you inject code which calls a function with default arguments you may get an error starting as follows reporting an undefined symbol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;💉 *** dlopen() error: dlopen(/var/folders/nh/gqmp6jxn4tn2tyhwqdcwcpkc0000gn/T/com.johnholdsworth.InjectionIII/eval101.dylib, 2): Symbol not found: _$s13TestInjection15QTNavigationRowC4text10detailText4icon6object13customization6action21accessoryButtonActionACyxGSS_AA08QTDetailG0OAA6QTIconOSgypSgySo15UITableViewCellC_AA5QTRow_AA0T5StyleptcSgyAaT_pcSgAWtcfcfA1_&#xA; Referenced from: /var/folders/nh/gqmp6jxn4tn2tyhwqdcwcpkc0000gn/T/com.johnholdsworth.InjectionIII/eval101.dylib&#xA; Expected in: flat namespace&#xA;in /var/folders/nh/gqmp6jxn4tn2tyhwqdcwcpkc0000gn/T/com.johnholdsworth.InjectionIII/eval101.dylib ***&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter this problem, restart your app and you should find this issue disappears due to a background task &lt;a href=&#34;https://github.com/johnno1962/unhide&#34;&gt;unhide&lt;/a&gt; which is integrated into InjectionIII.&lt;/p&gt; &#xA;&lt;p&gt;As injection needs to know how to compile Swift files individually it is not compatible with building using &lt;code&gt;Whole Module Optimisation&lt;/code&gt;. A workaround for this is to build with &lt;code&gt;WMO&lt;/code&gt; switched off so there are logs of individual compiles available then switching &lt;code&gt;WMO&lt;/code&gt; back on if it suits your workflow better.&lt;/p&gt; &#xA;&lt;h3&gt;Resolving issues&lt;/h3&gt; &#xA;&lt;p&gt;Versions &amp;gt; 4.1.1 of InjectionIII have the following environment variables that can be added to your Xcode launch scheme to customise its behavour or to get a better idea what InjectionIII is doing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;INJECTION_PRESERVE_STATICS&lt;/strong&gt; This allows you to decide whether top level variables and static member should be re-initialised if they are in a file that is injected or they should retain their values.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;INJECTION_DYNAMIC_CAST&lt;/strong&gt; This allows you to opt into a slightly more speculative fix for when you dynamic cast (as? in Swift) to a type which has been injected and therefore its type identifier may have changed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;INJECTION_DETAIL&lt;/strong&gt; Providing any value for this variable in the your scheme will produce detailed output of how InjectionIII is stitching your new implementations into your application. &#34;Swizzling&#34; is the legacy Objective-C way of rebinding symbols though the runtime API. &#34;Patching&#34; is where the &#34;vtable&#34; of a class is overridden to rebind non-final methods to their new dynamically loaded implementation. &#34;Interposing&#34; uses a low level dynamic linker feature to effectively re-link call sites to the newly loaded versions (provided the &#34;-Xlinker -interposable&#34; &#34;Other Linker Flag&#34; build setting has been supplied).&lt;/p&gt; &#xA;&lt;p&gt;In order to implement the &lt;code&gt;@objc func injected()&lt;/code&gt; call to your class when an instance is injected, a sweep of all live objects in your app is performed. This has two limitations. The instance needs to be &#34;seen&#34; by a reference to a reference to a reference from an initial set of seed instances e.g. appDelegate, rootViewController. Secondly, technically this is ambitious and can crash for some app states or if you use &lt;code&gt;unowned&lt;/code&gt; properties. If you encounter this, provide a value for the environment variable &lt;strong&gt;INJECTION_SWEEP_DETAIL&lt;/strong&gt; and, as it sweeps it will print the type name of the object about to be swept. If you see a crash, from version 3.2.2 you can exclude the type shown just before the crash using the &lt;strong&gt;INJECTION_SWEEP_EXCLUDE&lt;/strong&gt; environment variable (which can be a regular expression).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;INJECTION_OF_GENERICS&lt;/strong&gt; It is possible to inject the methods of generic classes but this requires a &#34;sweep&#34; of live objects to find the specializations in use (as they each have their own vtables) so the feature has been made opt-in.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;INJECTION_UNHIDE&lt;/strong&gt; Allows users to opt-into the legacy processing of defualt arguments symbols using the &#34;unhide&#34; which may be required for larger projects. Otherwise it will still occur &#34;on demand&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;INJECTION_PROJECT_ROOT&lt;/strong&gt; This allows you to specify the source root of your project in it&#39;s scheme automatiically messaging the InjectionIII app to change the scope of the file watcher as you switch between projects.&lt;/p&gt; &#xA;&lt;h3&gt;SwiftUI Injection&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to inject &lt;code&gt;SwiftUI&lt;/code&gt; interfaces but it requires some minor code changes. This is because when you add elements to an interface or use modifiers that change their type, this changes the return type of the body properties&#39; &lt;code&gt;Content&lt;/code&gt; across the injection which causes a crash. To avoid this you need to erase the return type. The easiest way to do this is to add the code below to your source somewhere then add the modifier &lt;code&gt;.eraseToAnyView()&lt;/code&gt; at the very end of any declaration of a view&#39;s body property that you want to inject:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;#if DEBUG&#xA;private var loadInjection: () = {&#xA;    #if os(macOS)&#xA;    let bundleName = &#34;macOSInjection.bundle&#34;&#xA;    #elseif os(tvOS)&#xA;    let bundleName = &#34;tvOSInjection.bundle&#34;&#xA;    #elseif targetEnvironment(simulator)&#xA;    let bundleName = &#34;iOSInjection.bundle&#34;&#xA;    #else&#xA;    let bundleName = &#34;maciOSInjection.bundle&#34;&#xA;    #endif&#xA;    Bundle(path: &#34;/Applications/InjectionIII.app/Contents/Resources/&#34;+bundleName)!.load()&#xA;}()&#xA;&#xA;import Combine&#xA;&#xA;public let injectionObserver = InjectionObserver()&#xA;&#xA;public class InjectionObserver: ObservableObject {&#xA;    @Published var injectionNumber = 0&#xA;    var cancellable: AnyCancellable? = nil&#xA;    let publisher = PassthroughSubject&amp;lt;Void, Never&amp;gt;()&#xA;    init() {&#xA;        cancellable = NotificationCenter.default.publisher(for:&#xA;            Notification.Name(&#34;INJECTION_BUNDLE_NOTIFICATION&#34;))&#xA;            .sink { [weak self] change in&#xA;            self?.injectionNumber += 1&#xA;            self?.publisher.send()&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;extension View {&#xA;    public func eraseToAnyView() -&amp;gt; some View {&#xA;        _ = loadInjection&#xA;        return AnyView(self)&#xA;    }&#xA;    public func onInjection(bumpState: @escaping () -&amp;gt; ()) -&amp;gt; some View {&#xA;        return self&#xA;            .onReceive(injectionObserver.publisher, perform: bumpState)&#xA;            .eraseToAnyView()&#xA;    }&#xA;}&#xA;#else&#xA;extension View {&#xA;    public func eraseToAnyView() -&amp;gt; some View { return self }&#xA;    public func onInjection(bumpState: @escaping () -&amp;gt; ()) -&amp;gt; some View {&#xA;        return self&#xA;    }&#xA;}&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To have the view you are working on redisplay automatically when it is injected it&#39;s sufficient to add an &lt;code&gt;@ObservedObject&lt;/code&gt;, initialised to the &lt;code&gt;injectionObserver&lt;/code&gt; instance as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;        .eraseToAnyView()&#xA;    }&#xA;&#xA;    #if DEBUG&#xA;    @ObservedObject var iO = injectionObserver&#xA;    #endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can make all these changes automatically once you&#39;ve opened a project using the &lt;code&gt;&#34;Prepare Project&#34;&lt;/code&gt; menu item. If you&#39;d like to execute some code each time your interface is injected, use the &lt;code&gt;.onInjection { ... }&lt;/code&gt; modifier instead of .&lt;code&gt;eraseToAnyView()&lt;/code&gt;. As an alternative, this code is available in the &lt;a href=&#34;https://github.com/johnno1962/HotSwiftUI&#34;&gt;HotSwiftUI&lt;/a&gt; Swift Package though you would have to remember to load the &lt;code&gt;iOSInjection.bundle&lt;/code&gt; separately by using the &lt;code&gt;.loadInjection()&lt;/code&gt; modifier on a view struct somewhere in your app. Another alternative from someone who has considerably more experience in iOS development than I do check out the &lt;a href=&#34;https://github.com/krzysztofzablocki/Inject&#34;&gt;Inject&lt;/a&gt; Swift Package introduced by this &lt;a href=&#34;https://merowing.info/2022/04/hot-reloading-in-swift/&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;InjectionIII and &#34;The Composable Architecture&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Applications written using &#34;TCA&#34; can have the &#34;reducer&#34; functions update their implementations without having to restart the application. You&#39;ll need to use a &lt;a href=&#34;https://github.com/thebrowsercompany/swift-composable-architecture/tree/develop&#34;&gt;slightly modified version of TCA&lt;/a&gt; and wrap all initialisers of top level reducer variables in a call to the global function &lt;code&gt;ARCInjectable()&lt;/code&gt; defined in that repo.&lt;/p&gt; &#xA;&lt;h3&gt;macOS Injection&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to use injection with a macOS/Catalyst project but it is getting progressively more difficult with each release of the OS. You need to make sure to turn off the &#34;App Sandbox&#34; and also &#34;Disable Library Validation&#34; under the &#34;Hardened Runtime&#34; options for your project while you inject. On an M1 Mac, if you &#34;Disable Library Validation&#34; and your app has web content you will likely also have to enable &#34;Allow execution of JIT-compiled code&#34;.&lt;/p&gt; &#xA;&lt;p&gt;With an Apple Silicon Mac it is possible to run your iOS application natively on macOS. You can use injection with these apps but as you can&#39;t turn off library validation it&#39;s a little involved. You need re-codesign the maciOSInjection.bundle contained in the InjectionIII app package using the signing identity used by your target app which you can determine from the &lt;code&gt;Sign&lt;/code&gt; phase in your app&#39;s build logs. You will also need to set a user default with the path to your project file as the name and the signing identity as the value so injected code changes can be signed properly as you can not turn off library validation.&lt;/p&gt; &#xA;&lt;p&gt;All this is best done by adding the following as a build phase to your target project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Type a script or drag a script file from your workspace to insert its path.&#xA;export CODESIGN_ALLOCATE\=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/codesign_allocate&#xA;INJECTION_APP_RESOURCES=/Applications/InjectionIII.app/Contents/Resources&#xA;/usr/bin/codesign --force --sign $EXPANDED_CODE_SIGN_IDENTITY  $INJECTION_APP_RESOURCES/maciOSInjection.bundle/maciOSInjection&#xA;/usr/bin/codesign --force --sign $EXPANDED_CODE_SIGN_IDENTITY  $INJECTION_APP_RESOURCES/maciOSSwiftUISupport.bundle/maciOSSwiftUISupport&#xA;/usr/bin/codesign --force --sign $EXPANDED_CODE_SIGN_IDENTITY $INJECTION_APP_RESOURCES/maciOSInjection.bundle/Frameworks/SwiftTrace.framework/SwiftTrace&#xA;defaults write com.johnholdsworth.InjectionIII &#34;$PROJECT_FILE_PATH&#34; $EXPANDED_CODE_SIGN_IDENTITY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Storyboard injection&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes when you are iterating over a UI it is useful to be able to inject storyboards. This works slightly differently from code injection. To inject changes to a storyboard scene, make your changes then &lt;em&gt;build&lt;/em&gt; the project instead of saving the storyboard. The &#34;nib&#34; of the currently displayed view controlled should be reloaded and viewDidLoad etc. will be called.&lt;/p&gt; &#xA;&lt;h3&gt;Vaccine&lt;/h3&gt; &#xA;&lt;p&gt;Injection now includes the higher level &lt;code&gt;Vaccine&lt;/code&gt; functionality, for more information consult the &lt;a href=&#34;https://github.com/zenangst/Vaccine&#34;&gt;project README&lt;/a&gt; or one of the &lt;a href=&#34;https://medium.com/itch-design-no/code-injection-in-swift-c49be095414c&#34;&gt;following&lt;/a&gt; &lt;a href=&#34;https://medium.com/@robnorback/the-secret-to-1-second-compile-times-in-xcode-9de4ec8345a1&#34;&gt;references&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Method Tracing menu item (SwiftTrace)&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to inject tracing aspects into your program implemented by the package &lt;a href=&#34;https://github.com/johnno1962/SwiftTrace&#34;&gt;SwiftTrace&lt;/a&gt; that don&#39;t affect its operation but should log every method call. Where possible it will also decorate their arguments. You can add logging to all methods in your app&#39;s main bundle or the frameworks it uses or trace calls to system frameworks such as UIKit or SwiftUI. If you opt into &#34;Type Lookup&#34;, custom types in your application can also be decorated using the CustomStringConvertable conformance or the default formatter for structs.&lt;/p&gt; &#xA;&lt;h3&gt;Remote Control&lt;/h3&gt; &#xA;&lt;p&gt;Newer versions of InjectionIII contain a server that allows you to control your development device from your desktop once the service has been started. The UI allows you to record and replay macros of UI actions then verify the device screen against snapshots for end-to-end testing.&lt;/p&gt; &#xA;&lt;p&gt;To use, import the Swift Package &lt;a href=&#34;https://github.com/johnno1962/Remote.git&#34;&gt;https://github.com/johnno1962/Remote.git&lt;/a&gt; and it should connect automatically to your desktop provided you have selected the &#34;Remote Control/Start Server&#34; menu item in InjectionIII to start its server. Your app should connect to this server when you next run it and will pop up a window showing the device display and accepting tap events. Events can be saved as &lt;code&gt;macros&lt;/code&gt; and replayed. If you include a snapshot in a macro this will be compared against the device display (within a tolerance) when you replay the macro for automated testing. Remote can also be used to capture videos of your app in operation but, as it operates over the network, it isn&#39;t fast enough to capture animated transitions.&lt;/p&gt; &#xA;&lt;h2&gt;SwiftEval - Yes, it&#39;s eval() for Swift&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://courses.cs.washington.edu/courses/cse190m/10su/lectures/slides/images/drevil.png&#34; alt=&#34;Icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;InjectionIII started out as the SwiftEval class which is a &lt;a href=&#34;https://raw.githubusercontent.com/johnno1962/InjectionIII/main/InjectionBundle/SwiftEval.swift&#34;&gt;single Swift source&lt;/a&gt; that can be added to your iOS simulator or macOS projects to implement an eval function inside classes that inherit from NSObject. There is a generic form which has the following signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;extension NSObject {&#xA;    public func eval&amp;lt;T&amp;gt;(_ expression: String, type: T.Type) -&amp;gt; T&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This takes a Swift expression as a String and returns an entity of the type specified. There is also a shorthand function for expressions of type String which accepts the contents of the String literal as it&#39;s argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;public func swiftEvalString(contents: String) -&amp;gt; String {&#xA;    return eval(&#34;\&#34;&#34; + expression + &#34;\&#34;&#34;, String.self)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An example of how it is used can be found in the EvalApp example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;@IBAction func performEval(_: Any) {&#xA;    textView.string = swiftEvalString(contents: textField.stringValue)&#xA;}&#xA;&#xA;@IBAction func closureEval(_: Any) {&#xA;    _ = swiftEval(code: closureText.stringValue+&#34;()&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The code works by adding an extension to your class source containing the expression. It then compiles and loads this new version of the class &#34;swizzling&#34; this extension onto the original class. The expression can refer to instance members in the class containing the eval class and global variables &amp;amp; functions in other class sources.&lt;/p&gt; &#xA;&lt;h3&gt;Acknowledgements:&lt;/h3&gt; &#xA;&lt;p&gt;This project includes code from &lt;a href=&#34;https://github.com/rentzsch/mach_inject&#34;&gt;rentzsch/mach_inject&lt;/a&gt;, &lt;a href=&#34;https://github.com/erwanb/MachInjectSample&#34;&gt;erwanb/MachInjectSample&lt;/a&gt;, &lt;a href=&#34;https://github.com/davedelong/DDHotKey&#34;&gt;davedelong/DDHotKey&lt;/a&gt; and &lt;a href=&#34;https://github.com/acj/TimeLapseBuilder-Swift&#34;&gt;acj/TimeLapseBuilder-Swift&lt;/a&gt; under their respective licenses.&lt;/p&gt; &#xA;&lt;p&gt;The App Tracing functionality uses the &lt;a href=&#34;https://github.com/OliverLetterer/imp_implementationForwardingToSelector&#34;&gt;OliverLetterer/imp_implementationForwardingToSelector&lt;/a&gt; trampoline implementation via the &lt;a href=&#34;https://github.com/johnno1962/SwiftTrace&#34;&gt;SwiftTrace&lt;/a&gt; project under an MIT license.&lt;/p&gt; &#xA;&lt;p&gt;SwiftTrace uses the very handy &lt;a href=&#34;https://github.com/facebook/fishhook&#34;&gt;https://github.com/facebook/fishhook&lt;/a&gt;. See the project source and header file included in the app bundle for licensing details.&lt;/p&gt; &#xA;&lt;p&gt;This release includes a very slightly modified version of the excellent &lt;a href=&#34;https://code.google.com/p/canviz/&#34;&gt;canviz&lt;/a&gt; library to render &#34;dot&#34; files in an HTML canvas which is subject to an MIT license. The changes are to pass through the ID of the node to the node label tag (line 212), to reverse the rendering of nodes and the lines linking them (line 406) and to store edge paths so they can be coloured (line 66 and 303) in &#34;canviz-0.1/canviz.js&#34;.&lt;/p&gt; &#xA;&lt;p&gt;It also includes &lt;a href=&#34;http://codemirror.net/&#34;&gt;CodeMirror&lt;/a&gt; JavaScript editor for the code to be evaluated using injection under an MIT license.&lt;/p&gt; &#xA;&lt;p&gt;The fabulous app icon is thanks to Katya of &lt;a href=&#34;http://pixel-mixer.com/&#34;&gt;pixel-mixer.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;$Date: 2022/04/23 $&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nicklockwood/FXBlurView</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/nicklockwood/FXBlurView</id>
    <link href="https://github.com/nicklockwood/FXBlurView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[DEPRECATED]&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h1&gt;WARNING: THIS PROJECT IS DEPRECATED&lt;/h1&gt; &#xA;&lt;p&gt;It will not receive any future updates or bug fixes. If you are using it, please migrate to another solution.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;FXBlurView is a UIView subclass that replicates the iOS 7 realtime background blur effect, but works on iOS 5 and above. It is designed to be as fast and as simple to use as possible. FXBlurView offers two modes of operation: static, where the view is rendered only once when it is added to a superview (though it can be updated by calling &lt;code&gt;setNeedsDisplay&lt;/code&gt; or &lt;code&gt;updateAsynchronously:completion:&lt;/code&gt;) or dynamic, where it will automatically redraw itself on a background thread as often as possible.&lt;/p&gt; &#xA;&lt;h2&gt;Supported iOS &amp;amp; SDK Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supported build target - iOS 8.4 (Xcode 6.4, Apple LLVM compiler 6.1)&lt;/li&gt; &#xA; &lt;li&gt;Earliest supported deployment target - iOS 7.0&lt;/li&gt; &#xA; &lt;li&gt;Earliest compatible deployment target - iOS 4.3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: &#39;Supported&#39; means that the library has been tested with this version. &#39;Compatible&#39; means that the library should work on this iOS version (i.e. it doesn&#39;t rely on any unavailable SDK features) but is no longer being tested for compatibility and may require tweaking or bug fixes to run correctly.&lt;/p&gt; &#xA;&lt;h2&gt;ARC Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;As of version 1.3, FXBlurView requires ARC. If you wish to use FXBlurView in a non-ARC project, just add the -fobjc-arc compiler flag to the FXBlurView.m class. To do this, go to the Build Phases tab in your target settings, open the Compile Sources group, double-click FXBlurView.m in the list and type -fobjc-arc into the popover.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to convert your whole project to ARC, comment out the #error line in FXBlurView.m, then run the Edit &amp;gt; Refactor &amp;gt; Convert to Objective-C ARC... tool in Xcode and make sure all files that you wish to use ARC for (including FXBlurView.m) are checked.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use FXBlurView, just drag the class files into your project and add the Accelerate framework. You can create FXBlurView instances programatically, or create them in Interface Builder by dragging an ordinary UIView into your view and setting its class to FXBlurView.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Interface Builder, to set the custom properties of FXBlurView (ones that are not supported by regular UIViews) either create an IBOutlet for your view and set the properties in code, or use the User Defined Runtime Attributes feature in Interface Builder (introduced in Xcode 4.2 for iOS 5+).&lt;/p&gt; &#xA;&lt;h2&gt;UIImage extensions&lt;/h2&gt; &#xA;&lt;p&gt;FXBlurView extends UIImage with the following method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (UIImage *)blurredImageWithRadius:(CGFloat)radius&#xA;                         iterations:(NSUInteger)iterations&#xA;                          tintColor:(UIColor *)tintColor;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method applies a blur effect and returns the resultant blurred image without modifying the original. The radius property controls the extent of the blur effect. The iterations property controls the number of iterations. More iterations means higher quality. The tintColor is an optional color that will be blended with the resultant image. Note that the alpha component of the tintColor is ignored.&lt;/p&gt; &#xA;&lt;h2&gt;FXBlurView methods&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;+ (void)setBlurEnabled:(BOOL)blurEnabled;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method can be used to globally enable/disable the blur effect on all FXBlurView instances. This is useful for testing, or if you wish to disable blurring on iPhone 4 and below (for consistency with iOS7 blur view behavior). By default blurring is enabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;+ (void)setUpdatesEnabled;&#xA;+ (void)setUpdatesDisabled;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These methods can be used to enable and disable updates for all dynamic FXBlurView instances with a single command. Useful for disabling updates immediately before performing an animation so that the FXBlurView updates don&#39;t cause the animation to stutter. Calls can be nested, but ensure that the enabled/disabled calls are balanced, or the updates will be left permanently enabled or disabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (void)updateAsynchronously:(BOOL)async completion:(void (^)())completion;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method can be used to trigger an update of the blur effect (useful when &lt;code&gt;dynamic = NO&lt;/code&gt;). The async argument controls whether the blur will be redrawn on the main thread or in the background. The completion argument is an optional callback block that will be called when the blur is completed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (void)setNeedsDisplay;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inherited from UIView, this method can be used to trigger a (synchronous) update of the view. Calling this method is more-or-less equivalent to calling &lt;code&gt;[view updateAsynchronously:NO completion:NULL]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FXBlurView properties&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@property (nonatomic, getter = isBlurEnabled) BOOL blurEnabled;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This property toggles blurring on and off for an individual FXBlurView instance. Blurring is enabled by default. Note that if you disable blurring using the &lt;code&gt;+setBlurEnabled&lt;/code&gt; method then that will override this setting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@property (nonatomic, getter = isDynamic) BOOL dynamic;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This property controls whether the FXBlurView updates dynamically, or only once when the view is added to its superview. Defaults to YES. Note that if dynamic is set to NO, you can still force the view to update by calling &lt;code&gt;setNeedsDisplay&lt;/code&gt; or &lt;code&gt;updateAsynchronously:completion:&lt;/code&gt;. Dynamic blurring is extremely cpu-intensive, so you should always disable dynamic views immediately prior to performing an animation to avoid stuttering. However, if you have multiple FXBlurViews on screen then it is simpler to disable updates using the &lt;code&gt;setUpdatesDisabled&lt;/code&gt; method rather than setting the &lt;code&gt;dynamic&lt;/code&gt; property to NO.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@property (nonatomic, assign) NSUInteger iterations;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The number of blur iterations. More iterations improves the quality but reduces the performance. Defaults to 2 iterations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@property (nonatomic, assign) NSTimeInterval updateInterval;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This controls the interval (in seconds) between successive updates when the FXBlurView is operating in dynamic mode. This defaults to zero, which means that the FXBlurView will update as fast as possible. This yields the best frame rate, but is also extremely CPU intensive and may cause the rest of your app&#39;s performance to degrade, especially on older devices. To alleviate this, try increasing the &lt;code&gt;updateInterval&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@property (nonatomic, assign) CGFloat blurRadius;&#x9;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This property controls the radius of the blur effect (in points). Defaults to a 40 point radius, which is similar to the iOS 7 blur effect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@property (nonatomic, strong) UIColor *tintColor;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This in an optional tint color to be applied to the FXBlurView. The RGB components of the color will be blended with the blurred image, resulting in a gentle tint. To vary the intensity of the tint effect, use brighter or darker colors. The alpha component of the tintColor is ignored. If you do not wish to apply a tint, set this value to nil or [UIColor clearColor]. Note that if you are using Xcode 5 or above, FXBlurViews created in Interface Builder will have a blue tint by default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@property (nonatomic, weak) UIView *underlyingView;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This property specifies the view that the FXBlurView will sample to create the blur effect. If set to nil (the default), this will be the superview of the blur view itself, but you can override this if you need to.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Q. Why are my views all blue-tinted on iOS 7?&#xA;A. FXBlurView uses the `UIView` `tintColor` property, which does not exist on iOS 6 and below, but defaults to blue on iOS 7. Just set this property to `[UIColor clearColor]` to disable the tint. To retain iOS 6 compatibility, you can either set this using code, or by using the User Defined Runtime Attributes feature of Interface Builder, which will override the standard `tintColor` value (see the example project nibs for how to do this).&#xA;&#xA;Q. FXBlurView makes my whole app run slowly on [old device], what can I do?&#xA;A. To improve performance, try increasing the `updatePeriod` property, reducing the `iterations` property or disabling `dynamic` unless you really need it. If all else fails, set `blurEnabled` to NO on older devices.&#xA;&#xA;Q. My SpriteKit/OpenGL/Video/3D transformed content isn&#39;t showing up properly when placed underneath an FXBlurView, why not?&#xA;A. This is a limitation of a the `CALayer` `renderInContext:` method used to capture the view contents. There is no workaround for this on iOS 6 and earlier. On iOS 7 you can make use of the `UIView` `drawViewHierarchyInRect:afterScreenUpdates:` method to capture an view and apply the blur effect yourself, but this it too slow for realtime use, so FXBlurView does not use this method by default.&#xA;&#xA;Q. FXBlurView is not capturing some ordinary view content that is behind it, why not?&#xA;A. FXBlurView captures the contents of its immediate superview by default. If the superview is transparent or partially transparent, content shown behind it will not be captured. You can override the `underlyingView` property to capture the contents of a different view if you need to.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;Version 1.6.4&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;blurredImageWithRadius:iterations:tintColor:&lt;/code&gt; now works if image is not in ARGB format&lt;/li&gt; &#xA; &lt;li&gt;Fixed &#34;&#xA;  &lt;error&gt;&#xA;   : CGContextRestoreGState: invalid context 0x0.&#34;&#xA;  &lt;/error&gt;&lt;/li&gt; &#xA; &lt;li&gt;Empty sublayers are now hidden before snapshotting to prevent renderInContext crash on iOS 8&lt;/li&gt; &#xA; &lt;li&gt;FXBlurView now automatically uses slower drawViewHierarchyInRect method when needed to capture content&lt;/li&gt; &#xA; &lt;li&gt;Added Travis integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.6.3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FXBlurView image background is no longer opaque/black, so it can be used as a translucent overlay&lt;/li&gt; &#xA; &lt;li&gt;underlyingView property is now an IBOutlet, so it can be connected in Interface Builder&lt;/li&gt; &#xA; &lt;li&gt;Moved imports into header for better Swift compatibility&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.6.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed crash on iOS 8 when animating blur&lt;/li&gt; &#xA; &lt;li&gt;Fixed issue when using FXBlurView with Swift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.6.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed issue with animation completion block not firing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.6&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is now possible to animate blurRadius&lt;/li&gt; &#xA; &lt;li&gt;Now requires QuartzCore framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.5.6&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed bug introduced in 1.5.4 where snapshot would always be taken from top-left corner of superview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.5.5&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed zero-sized context warning in console when view has no presentationLayer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.5.4&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is now possible to animate the FXBlurView frame using ordinary UIView animations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.5.3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed pixelation issue on non-Retina devices running iOS 6 or earlier&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.5.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed bug where edge of blur could be cropped short when using content modes other than scale to fit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.5.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed bug where completion handler was not called for synchronous blur.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.5&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added underlyingView property to specify source view&lt;/li&gt; &#xA; &lt;li&gt;Added updateAsynchronously:completion: method&lt;/li&gt; &#xA; &lt;li&gt;Fixed glitch with edges on certain views&lt;/li&gt; &#xA; &lt;li&gt;Now conforms to -Weverything warning level&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.4.4&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed pixelation issue on Retina iPads&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.4.3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed error when compiling for iOS 6.1 SDK using Xcode 5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.4.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed issue where shadow or ghosting could appear at edge of blur view&lt;/li&gt; &#xA; &lt;li&gt;Now conforms to -Wextra warning level&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.4.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed minor memory leak in the setUp method&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.4&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More intelligent scheduling when multiple dynamic FXBlurView instances are shown on screen at once&lt;/li&gt; &#xA; &lt;li&gt;Added global and individual methods for disabling blur (e.g. so you can disable blur on iPhone 4 and below for consistency with other apps on iOS 7)&lt;/li&gt; &#xA; &lt;li&gt;Added Multiples views example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.3.3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed console warning when adding an FXBlurView of zero size to the window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.3.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed issue with pixelation on non-Retina devices&lt;/li&gt; &#xA; &lt;li&gt;Tweaked performance/quality tradeoff&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.3.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improved blur quality (1.3 was slightly blocky)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added tintColor property&lt;/li&gt; &#xA; &lt;li&gt;Significant performance improvement by reducing snapshot scale based in proportion to blur radius&lt;/li&gt; &#xA; &lt;li&gt;Views placed in front of the FXBlurView in the hierarchy are no longer included in the blur effect&lt;/li&gt; &#xA; &lt;li&gt;Fixed issue where blurView was sometimes partially transparent&lt;/li&gt; &#xA; &lt;li&gt;Added example showing how to implement an iOS7 control center-style overlay&lt;/li&gt; &#xA; &lt;li&gt;FXBlurView now requires ARC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added +setUpdatesEnabled and +setUpdatesDisabled methods to globally enable/disable dynamic blur updates (e.g. when performing an animation)&lt;/li&gt; &#xA; &lt;li&gt;Added -updateInterval method to control CPU load when updating&lt;/li&gt; &#xA; &lt;li&gt;Changed runloop mode to reduce interference with scrolling, etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added ability to set number of blur iterations&lt;/li&gt; &#xA; &lt;li&gt;Fixed setNeedsDisplay behavior when dynamic = NO&lt;/li&gt; &#xA; &lt;li&gt;Reduced memory allocations in blur algorithm&lt;/li&gt; &#xA; &lt;li&gt;Added dynamic mode toggle to example app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initial release&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>google/EarlGrey</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/google/EarlGrey</id>
    <link href="https://github.com/google/EarlGrey" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🍵 iOS UI Automation Test Framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Deprecation: EarlGrey 1.0 is deprecated in favor of EarlGrey 2.0 which integrates it with XCUITest. Please look at the &lt;a href=&#34;https://github.com/google/EarlGrey/tree/earlgrey2&#34;&gt;earlgrey2&lt;/a&gt; branch. EarlGrey 1.0 is not being maintained internally with iOS 13.&lt;/p&gt; &#xA;&lt;h1&gt;EarlGrey&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-lightgrey.svg?style=flat&#34; alt=&#34;Apache License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/EarlGrey/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-CC%20BY%204.0-lightgrey.svg?sanitize=true&#34; alt=&#34;CC-BY 4.0 License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/google/EarlGrey&#34;&gt;&lt;img src=&#34;https://travis-ci.org/google/EarlGrey.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/EarlGrey&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/EarlGrey.svg?maxAge=2592000&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/earlgrey&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/earlgrey.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For EarlGrey 2, please go to &lt;a href=&#34;https://github.com/google/EarlGrey/tree/earlgrey2&#34;&gt;earlgrey2 branch&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;EarlGrey is a native iOS UI automation test framework that enables you to write clear, concise tests.&lt;/p&gt; &#xA;&lt;p&gt;With the EarlGrey framework, you have access to enhanced synchronization features. EarlGrey automatically synchronizes with the UI, network requests, and various queues; but still allows you to manually implement customized timings, if needed.&lt;/p&gt; &#xA;&lt;p&gt;EarlGrey’s synchronization features help to ensure that the UI is in a steady state before actions are performed. This greatly increases test stability and makes tests highly repeatable.&lt;/p&gt; &#xA;&lt;p&gt;EarlGrey works in conjunction with the XCTest framework and integrates with Xcode’s Test Navigator so you can run tests directly from Xcode or the command line (using xcodebuild).&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The EarlGrey documentation for users is located in the &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs&#34;&gt;EarlGrey/docs&lt;/a&gt; folder. To get started, review the EarlGrey features, check for backward compatibility, and then install/run EarlGrey with your test target. After everything is configured, take a look at the EarlGrey API and start writing your own tests.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/features.md&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/backward-compatibility.md&#34;&gt;Backward Compatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/install-and-run.md&#34;&gt;Install and Run&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/api.md&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/cheatsheet/cheatsheet.png&#34;&gt;Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;If you need help, several resources are available. First check the &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/faq.md&#34;&gt;FAQ&lt;/a&gt;. If you have more questions after reading the FAQ, see &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/known-issues.md&#34;&gt;Known Issues&lt;/a&gt;. You can bring more specific issues to our attention by asking them on &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/earlgrey&#34;&gt;#earlgrey tag&lt;/a&gt;. You can also start new discussions with us on our &lt;a href=&#34;https://groups.google.com/forum/#!forum/earlgrey-discuss&#34;&gt;Google group&lt;/a&gt; or request to join our &lt;a href=&#34;https://googleoss.slack.com/messages/earlgrey&#34;&gt;slack channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/faq.md&#34;&gt;FAQ - Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/ifaq.md&#34;&gt;IFAQ - Infrequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/docs/known-issues.md&#34;&gt;Known Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/earlgrey&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://googleoss.slack.com/messages/earlgrey&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/earlgrey-discuss&#34;&gt;Google Group&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Analytics&lt;/h2&gt; &#xA;&lt;p&gt;To prioritize and improve EarlGrey, the framework collects usage data and uploads it to Google Analytics. More specifically, the framework collects the &lt;strong&gt;MD5 hash&lt;/strong&gt; of &lt;em&gt;Bundle ID&lt;/em&gt;, &lt;em&gt;Test Class Names&lt;/em&gt; and &lt;em&gt;Test Method Names&lt;/em&gt;. This information allows us to measure the volume of usage. For more detailed information about our analytics collection, please peruse the &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/EarlGrey/Common/GREYAnalytics.m&#34;&gt;GREYAnalytics.m&lt;/a&gt; file which contains the implementation details. If they wish, users can choose to opt out by disabling the Analytics config setting in their test’s &lt;code&gt;- (void)setUp&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;p&gt;In Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Disable analytics.&#xA;[[GREYConfiguration sharedInstance] setValue:@(NO) forConfigKey:kGREYConfigKeyAnalyticsEnabled];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Disable analytics.&#xA;GREYConfiguration.sharedInstance().setValue(false, forConfigKey: kGREYConfigKeyAnalyticsEnabled)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;For Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Please make sure you’ve followed the guidelines in &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before making any contributions.&lt;/p&gt; &#xA;&lt;h3&gt;Setup an EarlGrey Project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the EarlGrey repository from GitHub:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/EarlGrey.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;After you have cloned the EarlGrey repository, download all the dependencies using &lt;a href=&#34;https://github.com/google/EarlGrey/tree/master/Scripts/setup-earlgrey.sh&#34;&gt;&lt;strong&gt;setup-earlgrey.sh&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;After the script completes successfully, open &lt;code&gt;EarlGrey.xcodeproj&lt;/code&gt; and ensure that all the targets build.&lt;/li&gt; &#xA; &lt;li&gt;You can now use &lt;code&gt;EarlGrey.xcodeproj&lt;/code&gt; to make changes to the framework.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Add and Run Tests&lt;/h3&gt; &#xA;&lt;h4&gt;Unit Tests&lt;/h4&gt; &#xA;&lt;p&gt;To add unit tests for EarlGrey, use &lt;code&gt;UnitTests.xcodeproj&lt;/code&gt; located at &lt;code&gt;Tests/UnitTests&lt;/code&gt;. To run all unit tests, select the &lt;strong&gt;UnitTests&lt;/strong&gt; Scheme and press Cmd+U.&lt;/p&gt; &#xA;&lt;h4&gt;Functional Tests&lt;/h4&gt; &#xA;&lt;p&gt;To add functional tests for EarlGrey, use the &lt;code&gt;FunctionalTests.xcodeproj&lt;/code&gt; located at &lt;code&gt;Tests/FunctionalTests&lt;/code&gt;. To run all functional tests, select the &lt;strong&gt;FunctionalTests&lt;/strong&gt; Scheme and press Cmd+U.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zendesk/sdk_logger_ios</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/zendesk/sdk_logger_ios</id>
    <link href="https://github.com/zendesk/sdk_logger_ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A swift module for handling logging in a project.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;em&gt;Use of this software is subject to important terms and conditions as set forth in the License file&lt;/em&gt; &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ZendeskSDKLogger for iOS&lt;/h1&gt; &#xA;&lt;p&gt;The ZendeskSDKLogger library is used to provide a simple API to have performant and formatted logging in iOS projects.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find our documentation on &lt;a href=&#34;https://developer.zendesk.com/embeddables&#34;&gt;https://developer.zendesk.com/embeddables&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feature requests and issues&lt;/h2&gt; &#xA;&lt;p&gt;All feature requests and issues are welcomed. Please see our &lt;a href=&#34;https://raw.githubusercontent.com/zendesk/sdk_logger_ios/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; to find out how to contact us.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright and license&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2020 Zendesk&lt;/p&gt; &#xA;&lt;p&gt;By downloading or using the Zendesk ZendeskSDKLogger SDK, You agree to the Zendesk Master Subscription Agreement &lt;a href=&#34;https://www.zendesk.com/company/customers-partners/#master-subscription-agreement&#34;&gt;https://www.zendesk.com/company/customers-partners/#master-subscription-agreement&lt;/a&gt; and Application Developer and API License Agreement &lt;a href=&#34;https://www.zendesk.com/company/customers-partners/#application-developer-api-license-agreement&#34;&gt;https://www.zendesk.com/company/customers-partners/#application-developer-api-license-agreement&lt;/a&gt; and acknowledge that such terms govern Your use of and access to the ZendeskSDKLogger SDK.&lt;/p&gt; &#xA;&lt;p&gt;If You make any Contributions (defined below) to the ZendeskSDKLogger SDK, You hereby grant Zendesk a royalty-free, worldwide, transferable, sub-licensable, irrevocable and perpetual license to incorporate into the Service or the Zendesk API or otherwise use and commercially exploit any Contributions. “Contribution” shall mean any work of authorship, including any modifications or additions to the Mobile SDK or derivative works thereof, that is submitted to Zendesk by You.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Giphy/giphy-ios-sdk</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/Giphy/giphy-ios-sdk</id>
    <link href="https://github.com/Giphy/giphy-ios-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Home of the GIPHY SDK iOS example app, along with iOS SDK documentation, issue tracking, &amp; release notes.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;750&#34; height=&#34;150&#34; src=&#34;https://raw.githubusercontent.com/Giphy/giphy-ios-sdk/main/sdk_logo.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;300&#34; height=&#34;483&#34; src=&#34;https://raw.githubusercontent.com/Giphy/giphy-ios-sdk/main/example.gif&#34;&gt; &#xA;&lt;h1&gt;GIPHY SDK for iOS&lt;/h1&gt; &#xA;&lt;p&gt;The fastest and easiest way to bring the full GIPHY experience directly to your app is with the GIPHY SDK. Built with developers and product designers in mind, the GIPHY SDK is a top-to-bottom solution for all things GIF in your app. This includes interfacing with GIPHY API, fetching and caching assets, and displaying GIFs and Stickers on screen in customizable UI templates.&lt;/p&gt; &#xA;&lt;p&gt;With billions of requests a day, it’s safe to say GIPHY knows GIFs. We&#39;re excited to share our best-in-class tools with you so your users can have the best GIF experience possible, with all the same features they&#39;re already enjoying on Facebook, Slack, Instagram, and more – with just a few lines of code.&lt;/p&gt; &#xA;&lt;p&gt;New! GIPHY’s proud to introduce GIPHY Clips, aka GIFs with Sound, to the mix! GIPHY Clips is our newest content format at the intersection of GIFs and Video. Clips combines the expression and entertainment of GIFs, with the added engagement of audio. Integrating the SDK will allow your users to seamlessly express themselves with this new format, all while staying in the experience in your app.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Giphy/giphy-ios-sdk/main/Docs.md&#34;&gt;Get Started&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>Hammerspoon/hammerspoon</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/Hammerspoon/hammerspoon</id>
    <link href="https://github.com/Hammerspoon/hammerspoon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Staggeringly powerful macOS desktop automation with Lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hammerspoon&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.irccloud.com/invite?channel=%23hammerspoon&amp;amp;hostname=irc.libera.chat&amp;amp;port=6697&amp;amp;ssl=1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/IRC-%23hammerspoon-1e72ff.svg?style=flat&#34; alt=&#34;IRC&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Hammerspoon/hammerspoon/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/Hammerspoon/hammerspoon/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/Hammerspoon/hammerspoon?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/Hammerspoon/hammerspoon/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Hammerspoon/hammerspoon/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/Hammerspoon/hammerspoon/latest/total.svg?sanitize=true&#34; alt=&#34;Downloads current release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Hammerspoon/hammerspoon/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/Hammerspoon/hammerspoon/total.svg?maxAge=2592000&#34; alt=&#34;Downloads all releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Hammerspoon/hammerspoon/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/Hammerspoon/hammerspoon.svg?sanitize=true&#34; alt=&#34;Latest tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Hammerspoon/hammerspoon/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Hammerspoon/hammerspoon.svg?sanitize=true&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Hammerspoon?&lt;/h2&gt; &#xA;&lt;p&gt;This is a tool for powerful automation of OS X. At its core, Hammerspoon is just a bridge between the operating system and a Lua scripting engine.&lt;/p&gt; &#xA;&lt;p&gt;What gives Hammerspoon its power is a set of extensions that expose specific pieces of system functionality, to the user. With these, you can write Lua scripts to control many aspects of your OS X environment.&lt;/p&gt; &#xA;&lt;h2&gt;How do I install it?&lt;/h2&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/Hammerspoon/hammerspoon/releases/latest&#34;&gt;latest release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Drag &lt;code&gt;Hammerspoon.app&lt;/code&gt; from your &lt;code&gt;Downloads&lt;/code&gt; folder to &lt;code&gt;Applications&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;brew install hammerspoon --cask&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What next?&lt;/h2&gt; &#xA;&lt;p&gt;Out of the box, Hammerspoon does nothing - you will need to create &lt;code&gt;~/.hammerspoon/init.lua&lt;/code&gt; and fill it with useful code. There are several resources which can help you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hammerspoon.org/go/&#34;&gt;Getting Started Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hammerspoon.org/docs/&#34;&gt;API docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hammerspoon.org/faq/&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Hammerspoon/hammerspoon/wiki/Sample-Configurations&#34;&gt;Sample Configurations&lt;/a&gt; supplied by various users&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Hammerspoon/hammerspoon/raw/master/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt; for developers looking to get involved&lt;/li&gt; &#xA; &lt;li&gt;An IRC channel for general chat/support/development (#hammerspoon on Libera)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/hammerspoon/&#34;&gt;Google Group&lt;/a&gt; for support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is the history of the project?&lt;/h2&gt; &#xA;&lt;p&gt;Hammerspoon is a fork of &lt;a href=&#34;https://github.com/sdegutis/mjolnir&#34;&gt;Mjolnir&lt;/a&gt; by Steven Degutis. Mjolnir aims to be a very minimal application, with its extensions hosted externally and managed using a Lua package manager. We wanted to provide a more integrated experience.&lt;/p&gt; &#xA;&lt;h2&gt;What is the future of the project?&lt;/h2&gt; &#xA;&lt;p&gt;Our intentions for Hammerspoon broadly fall into these categories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ever wider coverage of system APIs in Extensions&lt;/li&gt; &#xA; &lt;li&gt;Tighter integration between extensions&lt;/li&gt; &#xA; &lt;li&gt;Smoother user experience&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>razorpay/razorpay-pod</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/razorpay/razorpay-pod</id>
    <link href="https://github.com/razorpay/razorpay-pod" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📱 CocoaPod implementation of Razorpay&#39;s Payment SDK. Refer for instructions:&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;razorpay-pod&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/razorpay-pod&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/razorpay-pod.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/razorpay-pod&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/razorpay-pod.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/razorpay-pod&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/razorpay-pod.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository implements pod for Razorpay&#39;s iOS Framework.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt; &#xA;&lt;h2&gt;Installation | Docs&lt;/h2&gt; &#xA;&lt;h3&gt;Note:&lt;/h3&gt; &#xA;&lt;p&gt;If your integrating this on Objective-C please replace the line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#import &amp;lt;Razorpay/Razorpay.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# import &amp;lt;Razorpay/Razorpay-Swift.h&amp;gt; in your viewcontroller.m file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;razorpay-pod is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;razorpay-pod&#39;, &#39;1.2.5&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Note:&lt;/h3&gt; &#xA;&lt;p&gt;for older cocoapod versions check &lt;a href=&#34;https://github.com/razorpay/razorpay-pod/raw/1.1.12/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the documentation from &lt;a href=&#34;https://razorpay.com/docs/payment-gateway/ios-integration/standard/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/razorpay/razorpay-pod/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document. Thank you, &lt;a href=&#34;https://github.com/razorpay/razorpay-pod/graphs/contributors&#34;&gt;contributors&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;razorpay-pod is free software, and may be redistributed under the terms specified in the &lt;a href=&#34;https://raw.githubusercontent.com/razorpay/razorpay-pod/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;We &lt;span&gt;❤️&lt;/span&gt; open source software! See &lt;a href=&#34;https://razorpay.com/integrations&#34; title=&#34;List of our supported integrations&#34;&gt;our other supported plugins / SDKs&lt;/a&gt; or [contact us](mailto:&lt;a href=&#34;mailto:integrations@razorpay.com&#34;&gt;integrations@razorpay.com&lt;/a&gt;?subject=Help with iOS Integration using CocoaPods) to help you with integrations.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Kochava/kochava-tracker-ios-sdk-cocoapod</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/Kochava/kochava-tracker-ios-sdk-cocoapod</id>
    <link href="https://github.com/Kochava/kochava-tracker-ios-sdk-cocoapod" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KochavaTracker iOS SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KochavaTrackeriOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/KochavaTrackeriOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/KochavaTrackeriOS.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Kochava/Apple-SwiftPackage-KochavaTracker/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/kochava/Apple-SwiftPackage-KochavaTracker?include_prereleases&amp;amp;sort=semver&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/KochavaTrackeriOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/KochavaTrackeriOS.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/KochavaTrackeriOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/KochavaTrackeriOS.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://storage.googleapis.com/kochava-web/2016/07/Kochava-horizontal-black-800x154.png&#34; width=&#34;260&#34;&gt; &#xA;&lt;h2&gt;KochavaTracker iOS Module&lt;/h2&gt; &#xA;&lt;p&gt;The KochavaTracker module is an optional module within the Kochava SDK providing install attribution and analytics.&lt;/p&gt; &#xA;&lt;p&gt;The Kochava SDK is a lightweight and easy to integrate SDK written in Objective-C, providing first-class integration with Kochava’s industry leading mobile attribution and analytics platform.&lt;/p&gt; &#xA;&lt;h2&gt;Built on&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 10.3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cocoapods.org/pods/KochavaCoreiOS&#34;&gt;KochavaCore&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/KochavaCoreiOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/KochavaCoreiOS.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Kochava/Apple-SwiftPackage-KochavaCore/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/kochava/Apple-SwiftPackage-KochavaCore?include_prereleases&amp;amp;sort=semver&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;KochavaTrackeriOS is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;KochavaTrackeriOS&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Kochava, &lt;a href=&#34;mailto:support@kochava.com&#34;&gt;support@kochava.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;KochavaTracker is available under the &lt;a href=&#34;https://www.kochava.com/terms-of-service/&#34;&gt;Kochava Terms of Service&lt;/a&gt;. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Default Branch&lt;/h2&gt; &#xA;&lt;p&gt;As of October 1, 2020, github.com uses the branch name ‘main’ when creating the initial default branch for all new repositories. In order to minimize any customizations in our github usage and to support consistent naming conventions, we have made the decision to rename the ‘master’ branch to be called ‘main’ in all Kochava’s github repos.&lt;/p&gt; &#xA;&lt;p&gt;For local copies of the repo, the following steps will update to the new default branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git branch -m master main&#xA;git fetch origin&#xA;git branch -u origin/main main&#xA;git remote set-head origin -a&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>applanga/sdk-ios</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/applanga/sdk-ios</id>
    <link href="https://github.com/applanga/sdk-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;With the Applanga iOS Localization SDK you can automate the iOS app translation process. You do not need to convert .string files to excel or xliff. Once the sdk is integrated you can translate your iOS app over the air and manage all the strings in the dashboard. iOS app localization has never been easier! https://www.applanga.com&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Applanga SDK for iOS Localization&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;Version:&lt;/em&gt; 2.0.159&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Website:&lt;/em&gt; &lt;a href=&#34;https://www.applanga.com&#34;&gt;https://www.applanga.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Changelog:&lt;/em&gt; &lt;a href=&#34;https://www.applanga.com/changelog/ios&#34;&gt;https://www.applanga.com/changelog/ios&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/applanga/sdk-ios/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/applanga/sdk-ios/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/applanga/sdk-ios/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/applanga/sdk-ios/master/#optional-settings&#34;&gt;Optional settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/applanga/sdk-ios/master/#automatic-push-notification-localization-and-infoplist-strings&#34;&gt;Localize Push Notifications &amp;amp; Info.plist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/applanga/sdk-ios/master/#swiftui&#34;&gt;SwiftUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/applanga/sdk-ios/master/#watchos&#34;&gt;WatchOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/applanga/sdk-ios/master/#macos&#34;&gt;MacOS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Automatic Push Notification Localization and InfoPlist.strings&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;CocoaPods [&lt;a href=&#34;http://cocoapods.org&#34;&gt;?&lt;/a&gt;]&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Refer to CocoaPod’s &lt;a href=&#34;http://cocoapods.org/#getstarted&#34;&gt;Getting Started Guide&lt;/a&gt; for detailed instructions about CocoaPods.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After you have created your Podfile, insert this line of code: &lt;code&gt;pod &#39;Applanga&#39;&lt;/code&gt;, to be able to do screenshots during ui tests insert &lt;code&gt;pod &#39;ApplangaUITest&#39;&lt;/code&gt; for your ui test target.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once you have done so, re-run &lt;strong&gt;pod install&lt;/strong&gt; from the command line.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Carthage [&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;?&lt;/a&gt;]&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are new to Carthage, please refer to their &lt;a href=&#34;https://github.com/Carthage/Carthage#installing-carthage&#34;&gt;documentation&lt;/a&gt; first.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following line to your Cartfile:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;binary &#34;https://raw.githubusercontent.com/applanga/sdk-ios/master/Applanga.json&#34; ~&amp;gt; 2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; from the command line and link the &lt;em&gt;&lt;strong&gt;Applanga.framework&lt;/strong&gt;&lt;/em&gt; to your project as it is described in the carthage documentation: &lt;a href=&#34;https://github.com/Carthage/Carthage#if-youre-building-for-ios-tvos-or-watchos&#34;&gt;Getting started for iOS&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Swift Package Manager [&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;?&lt;/a&gt;]&lt;/h4&gt; &#xA;&lt;h5&gt;NOTE: This is only supported in Xcode versions 12+&lt;/h5&gt; &#xA;&lt;p&gt;1: Simply add the repo url &lt;a href=&#34;https://github.com/applanga/sdk-ios&#34;&gt;https://github.com/applanga/sdk-ios&lt;/a&gt; as a swift package dependency, and select the latest release tag&lt;/p&gt; &#xA;&lt;h4&gt;Manual (zero-code)&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to translate your iOS app download the latest release of the Applanga iOS SDK from &lt;a href=&#34;https://github.com/applanga/sdk-ios/releases&#34;&gt;Github&lt;/a&gt;. Unzip it, then drag and drop Applanga.framework into into the &lt;code&gt;Embedded Binaries&lt;/code&gt; section of your target and check the &#34;Copy items into destination group’s folder (if needed)&#34; option.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Under the &lt;em&gt;&lt;strong&gt;Build Settings&lt;/strong&gt;&lt;/em&gt; tab, you need to change &lt;em&gt;&lt;strong&gt;Basic&lt;/strong&gt;&lt;/em&gt; to &lt;em&gt;&lt;strong&gt;All&lt;/strong&gt;&lt;/em&gt; and search for &lt;em&gt;&lt;strong&gt;Other Linker Flags&lt;/strong&gt;&lt;/em&gt;. Double click on the white space to the right of Other Linker Flags and a popup will open. Click the plus (+), and add &lt;em&gt;&lt;strong&gt;-ObjC, -lsqlite3, -lz&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To be able to properly upload your app to iTunesConnect you need to work around an App Store submission bug triggered by universal binaries. To do that add a new &lt;code&gt;Run Script Phase&lt;/code&gt; in your target’s &lt;code&gt;Build Phases&lt;/code&gt;. &lt;strong&gt;IMPORTANT:&lt;/strong&gt; Make sure this &lt;code&gt;Run Script Phase&lt;/code&gt; is below the &lt;code&gt;Embed Frameworks&lt;/code&gt; build phase. You can drag and drop build phases to rearrange them. Paste the following line in this &lt;code&gt;Run Script Phase&lt;/code&gt;&#39;s script text field:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &#34;$BUILT_PRODUCTS_DIR/$FRAMEWORKS_FOLDER_PATH/Applanga.framework/strip-framework.sh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;To start iOS Localization with Applanga download the &lt;em&gt;Applanga Settings File&lt;/em&gt; for your app from the Project Overview in the dashboard by clicking the &lt;em&gt;&lt;strong&gt;[Prepare Release]&lt;/strong&gt;&lt;/em&gt; button and then clicking &lt;em&gt;&lt;strong&gt;[Get Settings File]&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;em&gt;Applanga Settings File&lt;/em&gt; to your apps resources. It will be automatically loaded.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, if you start your app you should see a log message that confirms that Applanga was initialized or a warning in case of a missing configuration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To make sure your settings file is always up to date for every build see the doc section about &lt;strong&gt;Automatic Applanga Settings File update&lt;/strong&gt; in the &lt;strong&gt;Optional settings&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h6&gt;&lt;em&gt;NOTE: To have native iOS dialogs properly translated and to show your supported languages on the Appstore you need to have atleast one .strings file bundled with your app for every language. (The file can be empty)&lt;/em&gt;&lt;/h6&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Basic:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Once Applanga is integrated and configured it synchronizes your local strings with the Applanga dashboard every time you start your app in &lt;a href=&#34;https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/debugging_with_xcode/chapters/debugging_tools.html&#34;&gt;Debug Mode&lt;/a&gt; or &lt;a href=&#34;https://www.applanga.com/docs/translation-management-dashboard/draft_on-device-testing&#34;&gt;Draft Mode&lt;/a&gt; if new missing strings are found. Translations that you have stored in your &lt;em&gt;&#34;Localizable.strings&#34;&lt;/em&gt; file or in &lt;em&gt;&#34;.strings&#34;&#34;&lt;/em&gt; that belong to storyboard or xib files of your app will be sent to the dashboard immediately. Applanga also auto detects your strings in storyboards and in the code once they are used. Storyboards should be enabled for &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/MacOSX/Conceptual/BPInternational/InternationalizingYourUserInterface/InternationalizingYourUserInterface.html#//apple_ref/doc/uid/10000171i-CH3-SW4&#34;&gt;Base Localization&lt;/a&gt;. If you have additional &lt;em&gt;&#34;.strings&#34;&lt;/em&gt; files that should be automatically uploaded you can add them in your Info.plist with the key &lt;strong&gt;ApplangaAdditionalStringFiles&lt;/strong&gt; &amp;amp; if you have parts of your code in additional &lt;em&gt;&#34;.framework&#34;&lt;/em&gt; bundles you can add them with the key &lt;strong&gt;ApplangaAdditionalFrameworks&lt;/strong&gt; as a comma seperated lists. You don’t need to use any special code. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;With &lt;em&gt;&lt;strong&gt;Objective-C&lt;/strong&gt;&lt;/em&gt; use the native method &lt;em&gt;&lt;strong&gt;&lt;a href=&#34;https://developer.apple.com/reference/foundation/nslocalizedstringwithdefaultvalue?language=objc&#34;&gt;NSLocalizedStringWithDefaultValue(@&#34;APPLANGA_ID&#34;, nil, NSBundle.mainBundle, @&#34;default value&#34;, @&#34;&#34;)&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;With &lt;em&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/em&gt; use &lt;em&gt;&lt;strong&gt;&lt;a href=&#34;https://developer.apple.com/reference/foundation/1418095-nslocalizedstring&#34;&gt;NSLocalizedString(&#34;APPLANGA_ID&#34;, value: &#34;default value&#34;, comment: &#34;&#34;)&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt; like you are used to do.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h6&gt;&lt;em&gt;NOTE: If you do not specifiy a default value the string will not be created on the Applanga dashboard.&lt;/em&gt;&lt;/h6&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Extended:&lt;/h3&gt; &#xA;&lt;p&gt;Besides the Basic usage Applanga offers support for &lt;em&gt;&lt;strong&gt;named arguments&lt;/strong&gt;&lt;/em&gt; in your strings, &lt;em&gt;&lt;strong&gt;pluralisation&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;partial updates&lt;/strong&gt;&lt;/em&gt; to save space and bandwith as well as translation of html and javascript content in &lt;code&gt;UIWebView&lt;/code&gt; instances.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Code Localization&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;1.1 &lt;strong&gt;Strings&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//objc&#xA;// get translated string for the current device locale&#xA;[Applanga localizedStringForKey:@&#34;APPLANGA_ID&#34; withDefaultValue:@&#34;default value&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//swift&#xA;Applanga.localizedString(forKey: &#34;APPLANGA_ID&#34;, withDefaultValue: &#34;default value&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;1.2 &lt;strong&gt;Named Arguments&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//objc&#xA;// if you pass a string:string dictionary you can get translated string&#xA;// with named arguments. %{someArg} %{anotherArg} etc.&#xA;NSDictionary* args = @{@&#34;someArg&#34;: @&#34;awesome&#34;,@&#34;anotherArg&#34;: @&#34;crazy&#34;};&#xA;[Applanga localizedStringForKey:@&#34;APPLANGA_ID&#34; withDefaultValue:@&#34;default value&#34; andArguments:args]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//swift&#xA;var args: [String: String] = [&#34;someArg&#34;: &#34;awesome&#34;, &#34;anotherArg&#34;: &#34;crazy&#34;];&#xA;Applanga.localizedString(forKey: &#34;APPLANGA_ID&#34;, withDefaultValue: &#34;default&#34;, andArguments: args)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;p&gt;&lt;em&gt;APPLANGA_ID&lt;/em&gt; = &lt;em&gt;&#34;This value of the argument called someArg is %{someArg} and the value of anotherArg is &lt;strong&gt;%{anotherArg}&lt;/strong&gt;. You can reuse arguments multiple times in your text wich is &lt;strong&gt;%{someArg}&lt;/strong&gt;, &lt;strong&gt;%{anotherArg}&lt;/strong&gt; and &lt;strong&gt;%{someArg}.&lt;/strong&gt;&#34;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;gets converted to:&lt;/p&gt; &lt;p&gt;&lt;em&gt;&#34;This value of the argument called someArg is awesome and the value of anotherArg is crazy. You can reuse arguments multiple times in your text wich is awesome, crazy and awesome.&#34;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;1.3 &lt;strong&gt;Pluralisation&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//objc&#xA;// get translated string in given pluralisation rule (one)&#xA;[Applanga localizedStringForKey:@&#34;APPLANGA_ID&#34; withDefaultValue:@&#34;default value&#34; andArguments:nil andPluralRule:ALPluralRuleOne]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//swift&#xA;Applanga.localizedString(forKey: &#34;no default&#34;, withDefaultValue: &#34;default&#34;, andArguments: nil, andPluralRule: ALPluralRule.one)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Available pluralisation rules:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//objc&#xA;ALPluralRuleZero,&#xA;ALPluralRuleOne,&#xA;ALPluralRuleTwo,&#xA;ALPluralRuleFew,&#xA;ALPluralRuleMany,&#xA;ALPluralRuleOther&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//swift&#xA;ALPluralRule.zero,&#xA;ALPluralRule.one,&#xA;ALPluralRule.two,&#xA;ALPluralRule.few,&#xA;ALPluralRule.many,&#xA;ALPluralRule.other&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;you can also specify a quantity and Applanga will pick the best pluralisation rule based on: &lt;a href=&#34;http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html&#34;&gt;http://unicode.org/.../language_plural_rules.html &lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//objc&#xA;// get a string in the given quantity&#xA;[Applanga localizedStringForKey:@&#34;APPLANGA_ID&#34; withDefaultValue:@&#34;default value&#34; andArguments:nil andPluralRule:ALPluralRuleForQuantity(quantity)]&#xA;&#xA;// or get a formatted string with the given quantity&#xA;[NSString localizedStringWithFormat:[Applanga localizedStringForKey:@&#34;APPLANGA_ID&#34; withDefaultValue:@&#34;default value&#34; andArguments:nil andPluralRule:ALPluralRuleForQuantity(quantity)], quantity]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//swift&#xA;// get a string in the given quantity&#xA;Applanga.localizedString(forKey: &#34;APPLANGA_ID&#34;, withDefaultValue: &#34;default value&#34;, andArguments: nil, andPluralRule: ALPluralRuleForQuantity(quantity))&#xA;&#xA;//or get a formatted string with the given quantity&#xA;NSString.localizedStringWithFormat(NSString(string:(Applanga.localizedString(forKey: &#34;APPLANGA_ID&#34;, withDefaultValue: &#34;default&#34;, andArguments: nil, andPluralRule: ALPluralRuleForQuantity(quantity)))), quantity)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the dashboard you create a &lt;strong&gt;puralized ID&lt;/strong&gt; by appending the Pluralisation rule to your &lt;strong&gt;ID&lt;/strong&gt; in the following format: &lt;code&gt;[zero]&lt;/code&gt;, &lt;code&gt;[one]&lt;/code&gt;,&lt;code&gt;[two]&lt;/code&gt;,&lt;code&gt;[few]&lt;/code&gt;,&lt;code&gt;[many]&lt;/code&gt;, &lt;code&gt;[other]&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;So the &lt;em&gt;&lt;strong&gt;zero&lt;/strong&gt;&lt;/em&gt; pluralized ID for &lt;em&gt;&lt;strong&gt;&#34;APPLANGA_ID&#34;&lt;/strong&gt;&lt;/em&gt; is &lt;em&gt;&lt;strong&gt;&#34;APPLANGA_ID[zero]&#34;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Update Content&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;To trigger an update call:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//objc&#xA;[Applanga updateWithCompletionHandler:^(BOOL success) {&#xA;&#x9;//called if update is complete&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//swift&#xA;Applanga.update { (success: Bool) in&#xA;&#x9;//called if update is complete&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will request the baselanguage, the development language and the long and short versions of the device&#39;s current language. If you are using groups, be aware that this will only update the &lt;strong&gt;main&lt;/strong&gt; group.&lt;/p&gt; &lt;p&gt;To trigger an update for a specific set of groups and languages call:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//objc&#xA;NSArray* groups = @[@&#34;GroupA&#34;, @&#34;GroupB&#34;];&#xA;NSArray* languages = @[@&#34;en&#34;, @&#34;de&#34;, @&#34;fr&#34;];&#xA; &#x9;&#xA;[Applanga updateGroups:groups andLanguages:languages withCompletionHandler:^(BOOL success) {&#xA;&#x9;//called if update is complete&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//swift&#xA;var groups: [String] = [&#34;GroupA&#34;, &#34;GroupB&#34;]&#xA;var languages: [String] = [&#34;en&#34;, &#34;de&#34;, &#34;fr&#34;]&#xA;&#xA;Applanga.updateGroups(groups, andLanguages: languages, withCompletionHandler:  {(success: Bool) in&#xA;&#x9;//called if update is complete&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Change Language&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You can change your app&#39;s language at runtime using the following call:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//objc&#xA;BOOL success = [Applanga setLanguage: language];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//swift&#xA;var success: Bool = Applanga.setLanguage(language)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;language&lt;/em&gt; must be the iso string of a language that has been added in the dashboard. The return value will be &lt;em&gt;YES&lt;/em&gt; if the language could be set, or if it already was the current language, otherwise it will be &lt;em&gt;NO&lt;/em&gt;. The set language will be saved, to reset to the device language call:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//objc&#xA;Applanga.setLanguage(nil); &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//swift&#xA;Applanga.setLanguage(nil);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After a successful call you need to reinitialize your UI for the changes to take effect, for example you might recreate the root Storyboard controller and present it.&lt;/p&gt; &lt;p&gt;The &lt;em&gt;language&lt;/em&gt; parameter is expected in the format &lt;strong&gt;[language]-[region]&lt;/strong&gt; or &lt;strong&gt;[language]_[region]&lt;/strong&gt; with region being optional. Examples: &#34;fr_CA&#34;, &#34;en-us&#34;, &#34;de&#34;.&lt;/p&gt; &lt;p&gt;If you have problems switching to a specific language you can update your settings file or specifically request that language within an update content call (see &lt;strong&gt;2. Update Content&lt;/strong&gt;). You can also specify the language as a default language to have it requested on each update call (see &lt;strong&gt;Optional settings&lt;/strong&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;+ (void) changeAppLanguage:(NSString *)language {&#xA;&#x9;&#x9;[Applanga updateGroups:nil andLanguages:@[language] withCompletionHandler:^( BOOL updateSuccess ){&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(updateSuccess){&#xA;&#x9;&#x9;&#x9;&#x9;BOOL languageChangedSuccess = [Applanga setLanguage:language];&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if(languageChangedSuccess) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//recreate ui&#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;} &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;WebViews&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Applanga can also translate content in your WebViews if it is enabled.&lt;/p&gt; &lt;p&gt;Add &lt;code&gt;ApplangaTranslateWebViews&lt;/code&gt; set to &lt;code&gt;YES&lt;/code&gt; to your Info.plist to enable translation support for all WebViews.&lt;/p&gt; &lt;p&gt;There are some differences if you use the deprecated &lt;code&gt;UIWebView&lt;/code&gt; or the newer &lt;code&gt;WKWebView&lt;/code&gt; whereas direct Applanga calls in &lt;code&gt;UIWebView&lt;/code&gt; ar synchronous but in &lt;code&gt;WKWebView&lt;/code&gt; the need to be async.&lt;/p&gt; &lt;p&gt;To initalize Applanga for your webcontent in a &lt;code&gt;UIWebView&lt;/code&gt; you need to initialize Applanga from JavaScript like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34;&amp;gt;&#xA;&#x9;window.initApplanga = function() {&#xA;&#x9;&#x9;if(typeof window.ApplangaNative !== &#39;undefined&#39;) { window.ApplangaNative.loadScript();&#xA;  &#x9;&#x9;} else { setTimeout(window.initApplanga, 180); } &#xA;  &#x9;}; window.initApplanga();&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is not needed if you use a &lt;code&gt;WKWebView&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;4.1 &lt;strong&gt;Strings&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The inner text and html of tags wich have a &lt;code&gt;applanga-text=&#34;APPLANGA_ID&#34;&lt;/code&gt; attribute will be replaced with the translated value of &lt;em&gt;&lt;strong&gt;APPLANGA_ID&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div applanga-text=&#34;APPLANGA_ID&#34;&amp;gt;&#xA;&#x9;&#x9;***This will be replaced with the value of APPLANGA_ID***&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Alternatively you can call &lt;code&gt;Applanga.getString&lt;/code&gt; directly like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//UIWebView&#xA;translation = Applanga.getString(&#39;APPLANGA_ID&#39;)&#xA;//WKWebView&#xA;Applanga.getString(&#39;APPLANGA_ID&#39;, undefined, undefined,  undefined, undefined, undefined, &#xA; function(translation) {&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;4.2 &lt;strong&gt;Arguments&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You can pass arguments with the &lt;code&gt;applanga-args&lt;/code&gt; attribute. By default the arguments are parsed as a comma seperated list wich then will replace fields as %{arrayIndex}.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div applanga-text=&#34;APPLANGA_ID&#34; applanga-args=&#34;arg1,arg2,etc&#34;&amp;gt;&#xA;&#x9;***This will be replaced with the value of APPLANGA_ID***&#xA;&#x9;***and formatted with arguments***&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Direct call:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//UIWebView&#xA;translation = Applanga.getString(&#39;APPLANGA_ID&#39;, &#39;arg1,arg2,etc&#39;)&#xA;//WKWebView&#xA;Applanga.getString(&#39;APPLANGA_ID&#39;, &#39;arg1,arg2,etc&#39;, undefined,  undefined, undefined, undefined, &#xA; function(translation) {&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To define a different separator instead of &lt;code&gt;,&lt;/code&gt; e.g. if your arguments contain commas use &lt;code&gt;applanga-args-separator&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div applanga-text=&#34;APPLANGA_ID&#34; &#xA;&#x9;applanga-args=&#34;arg1;arg2;etc&#34;&#xA;&#x9;applanga-args-separator=&#34;;&#34;&amp;gt;&#xA;&#x9;&#x9;***This will be replaced with the value of APPLANGA_ID***&#xA;&#x9;&#x9;***and formatted with arguments***&#xA;&amp;lt;/div&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Direct call:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//UIWebView&#xA;translation = Applanga.getString(&#39;APPLANGA_ID&#39;, &#39;arg1,arg2,etc&#39;, &#39;;&#39;)&#xA;//WKWebView&#xA;Applanga.getString(&#39;APPLANGA_ID&#39;, &#39;arg1,arg2,etc&#39;, &#39;;&#39;,  undefined,  undefined,  undefined, &#xA; function(translation) {&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;One Dimensional &lt;strong&gt;JSON&lt;/strong&gt; Objects can also be used as &lt;em&gt;&lt;strong&gt;Named Arguments&lt;/strong&gt;&lt;/em&gt; if you add &lt;code&gt;applanga-args-separator=&#34;json&#34;&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div applanga-text=&#34;APPLANGA_ID&#34; &#xA;&#x9; applanga-args=&#34;{&#39;arg1&#39;:&#39;value1&#39;, &#39;arg2&#39;:&#39;value2&#39;, &#39;arg3&#39;:&#39;etc&#39;}&#34;&#xA;&#x9; applanga-args-separator=&#34;json&#34;&amp;gt;&#xA;&#x9;&#x9;***This will be replaced with the value of APPLANGA_ID***&#xA;&#x9;&#x9;***and formatted with json arguments***&#xA;&amp;lt;/div&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Direct call:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//UIWebView&#xA;translation = Applanga.getString(&#39;APPLANGA_ID&#39;, &#34;{&#39;arg1&#39;:&#39;value1&#39;, &#39;arg2&#39;:&#39;value2&#39;, &#39;arg3&#39;:&#39;etc&#39;}&#34;, &#39;json&#39;)&#xA;//WKWebView&#xA;Applanga.getString(&#39;APPLANGA_ID&#39;, &#34;{&#39;arg1&#39;:&#39;value1&#39;, &#39;arg2&#39;:&#39;value2&#39;, &#39;arg3&#39;:&#39;etc&#39;}&#34;, &#39;json&#39;,  undefined,  undefined,  undefined, &#xA; function(translation) {&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;4.3 &lt;strong&gt;Pluralisation&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;To pluralize a html tag you can pass the &lt;code&gt;applanga-plural-rule&lt;/code&gt; attribute with the value &lt;code&gt;zero&lt;/code&gt;, &lt;code&gt;one&lt;/code&gt;, &lt;code&gt;two&lt;/code&gt;, &lt;code&gt;few&lt;/code&gt;, &lt;code&gt;many&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div applanga-text=&#34;APPLANGA_ID&#34; applanga-plural-rule=&#34;one&#34;&amp;gt;&#xA;&#x9;***This will be replaced with the pluralized value of APPLANGA_ID***&#xA;&amp;lt;/div&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Direct call:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//UIWebView&#xA;translation = Applanga.getPluralString(&#39;APPLANGA_ID&#39;, &#39;one&#39;)&#xA;//WKWebView&#xA;Applanga.getPluralString(&#39;APPLANGA_ID&#39;, &#39;one&#39;, undefined, undefined,&#xA; function(translation) {&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or with arguments:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//UIWebView&#xA;translation = Applanga.getPluralString(&#39;APPLANGA_ID&#39;, &#39;one&#39;, &#39;arg1;arg2;etc&#39;, &#39;;&#39;)&#xA;//WKWebView&#xA;Applanga.getPluralString(&#39;APPLANGA_ID&#39;, &#39;one&#39;, &#39;arg1;arg2;etc&#39;, &#39;;&#39;, &#xA; function(translation) {&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also pluralize by quantity via &lt;code&gt;applanga-plural-quantity&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div applanga-text=&#34;APPLANGA_ID&#34; applanga-plural-quantity=42&amp;gt;&#xA;&#x9;***This will be replaced with the pluralized value of APPLANGA_ID***&#xA;&amp;lt;/div&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Direct call:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//UIWebView&#xA;translation = Applanga.getQuantityString(&#39;APPLANGA_ID&#39;, 42)&#xA;//WKWebView&#xA;Applanga.getQuantityString(&#39;APPLANGA_ID&#39;, 42,  undefined, undefined, &#xA; function(translation) {&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or with arguments:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//UIWebView&#xA;translation = Applanga.getQuantityString(&#39;APPLANGA_ID&#39;, 42, &#39;arg1;arg2;etc&#39;, &#39;;&#39;)&#xA;//WKWebView&#xA;Applanga.getQuantityString(&#39;APPLANGA_ID&#39;, 42, &#39;arg1;arg2;etc&#39;, &#39;;&#39;, &#xA; function(translation) {&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;4.4 &lt;strong&gt;Update Content&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;To trigger a content update from a WebView use javascript:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Applanga.updateGroups(&#34;GroupA, GroupB&#34;, &#34;de, en, fr&#34;, function(success){&#xA;&#x9;//called if update is complete&#xA;});&#x9;&#x9;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;4.5 &lt;strong&gt;Enable Show ID Mode&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Applanga.setShowIdModeEnabled(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If Show ID Mode is enabled, applanga will return your string ids instead of you localisations. This can become important for screenshots (especially SwiftUI as stated in automated screenshots with SwiftUI below). For instance if you have an argument string or any string which changes at runtime it is possible that this specific string won&#39;t be collected on a Screenshot. If Show ID Mode is activated, applanga can make an exact match of the string id so the screenshot string collection will be accurate.&lt;/p&gt; &lt;p&gt;Don&#39;t use this flag in Production. To be able to the see changes you have to reload your UI after changing this flag.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatic Screenshot Upload&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;To give translators some context for translating strings, the Applanga SDK offers the functionality to upload screenshots of your app, while collecting meta data such as the currrent language, resolution and the Applanga translated strings that are visible, including their positions. Each screenshot will be assigned to a tag. A tag may have multiple screenshots with differing core meta data: language, app version, device, platform, OS and resolution. You can read more here : &lt;a href=&#34;https://applanga.com/docs#manage_tags&#34;&gt;Manage Tags&lt;/a&gt; and here: &lt;a href=&#34;https://applanga.com/docs#uploading_screenshots&#34;&gt;Uploading screenshots&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;5.1 &lt;strong&gt;Make screenshots manually&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;To manually make a screenshot you first have to set your app into &lt;a href=&#34;https://www.applanga.com/docs/translation-management-dashboard/draft_on-device-testing&#34;&gt;draft mode&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;With your app in draft mode, all you have to do is to make a two finger swipe downwards. This will show the screenshot menu and load a list of &lt;a href=&#34;https://applanga.com/docs#manage_tags&#34;&gt;tags&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can now choose a tag and press &lt;em&gt;capture screenshot&lt;/em&gt; to capture and upload a screenshot including all meta data for the currently visible screen and assign it to the selected tag. Tags have to be created in the dashboard before they are available in the screenshot menu.&lt;/p&gt; &lt;p&gt;5.2 &lt;strong&gt;Display screenshot menu programmatically&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You also have the option to open the screenshot menu programmatically, this also requires the app to be in draft mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//objc&#xA;[Applanga setScreenShotMenuVisible:YES]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//swift&#xA;Applanga.setScreenShotMenuVisible(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;5.3 &lt;strong&gt;Make screenshots programmatically&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;To create a screenshot programmatically you call the following function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//objc&#xA;NSString* tag = @&#34;MainMenu&#34;;&#xA;NSArray* applangaIDs = [NSArrayarrayWithObjects:@&#34;String1&#34;,@&#34;String2&#34;,@&#34;String3&#34;,nil];&#xA;[Applanga captureScreenshotWithTag:tag andIDs:applangaIDs];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//swift&#xA;var tag:String = &#34;MainMenu&#34;&#xA;var applangaIDs:[String] = [&#34;String1&#34;, &#34;String2&#34;, &#34;String3&#34;]&#xA;Applanga.captureScreenshot(withTag: tag, andIDs: applangaIDs)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;if for some reason a text is not tagged or the sdk cannot find the correct tag, you may take a screenshot programmatically using the enableOcr param like so.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//objc&#xA;NSString* tag = @&#34;MainMenu&#34;;&#xA;[Applanga captureScreenshotWithTag:tag andIDs:nil useOcr:true];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//swift&#xA;Applanga.captureScreenshot(withTag: tag, andIDs: null, useOcr: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please note: in most cases enabling OCR is not necessary and will slow down the processing of screenshots for the dashboard, so please only use if needed. Feel free to reach out to applanga support for more info.&lt;/p&gt; &lt;p&gt;The Applanga SDK tries to find all IDs on the screen but you can also pass additional IDs in the &lt;strong&gt;applangaIDs&lt;/strong&gt; parameter.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note: It&#39;s not possible to make the screenshot like this in UI-Tests. The reason is, that in UI-Tests you don&#39;t have access to the real Applanga instance. See the alternative in the next Section: &lt;code&gt;Automated during UI Tests&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;5.4 &lt;strong&gt;Automated during UITests&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;To be able to use applanga test features add &lt;code&gt;ApplangaUITest&lt;/code&gt; to your project and do the import as below. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/applanga/sdk-ios/master/#Installation&#34;&gt;Installation&lt;/a&gt; how to add the test package to your project.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import ApplangaUITest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To capture screenshots from UITests running in Xcode you first have to initialize applanga with the current app instance so it can set specific launch arguments before starting the tests:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let app = XCUIApplication()&#xA;let applangaUITest = ApplangaUITest(app: app)&#xA;app.launch()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To take a screenshot specify a tag and wait for it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;wait(for: [applangaUITest!.takeScreenshot(tag: &#34;Home&#34;)], timeout: 10.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Full example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import ApplangaUITest&#xA;class AutomatedScreenshotsTest: XCTestCase {&#xA;    let app = XCUIApplication()&#xA;    var applangaUITest: ApplangaUITest?&#xA;&#xA;    func testScreenshot() {&#xA;        // enable show id mode if you are using swift ui so the string id will be linked to the tag name correctly&#xA;        // after that repeat the screenshot without show id mode&#xA;        applangaUITest = ApplangaUITest(app: app, enableShowIdMode: false) &#xA;        app.launch()&#xA;        wait(for: [applangaUITest!.takeScreenshot(tag: &#34;ScreentagName&#34;)], timeout: 10.0)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Optional settings&lt;/h2&gt; &#xA;&lt;p&gt;You can specify a set of default groups and languages in your plist, which will be updated on every Applanga.update() or Applanga.updateGroups() call. These groups and languages will be added to any that are specified in the call itself, they will &lt;em&gt;always&lt;/em&gt; be requested. The Parameter value must be a string, with a list of groups or languages separated by commata.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Specify default groups&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;...&#xA;&amp;lt;key&amp;gt;ApplangaUpdateGroups&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;turorial,chapter1,chapter2&amp;lt;/string&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Specify default languages&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;...&#xA;&amp;lt;key&amp;gt;ApplangaUpdateLanguages&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;en,de-at,fr&amp;lt;/string&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Disable upload of storyboard strings&lt;/strong&gt; You have the option to disable the collection of storyboard strings, by setting this value to false. This will not prevent the upload of localized .strings files that you may have created for your storyboard, but will stop the default upload of the cryptic string ids that are created for text ui elements in the storyboard.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;...&#xA;&amp;lt;key&amp;gt;ApplangaCollectStoryBoardStrings&amp;lt;/key&amp;gt;&#xA;&amp;lt;false/&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatic Applanga Settings File update&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In case your app&#39;s user has no internet connection, new translation updates can&#39;t be fetched, so the Applanga SDK falls back to the last locally cached version. If the app was started for the first time, there are no strings locally cached yet so Applanga SDK falls back to the Applanga Settings File which contains all strings from the moment it was generated, downloaded and integrated into your app before release.&lt;/p&gt; &lt;p&gt;The Applanga SDK comes with a python (2.7) script called &lt;code&gt;settingsfile_update.py&lt;/code&gt; which makes sure your app has always the latest settings file version. The script searches recursively for &lt;code&gt;*.applanga&lt;/code&gt; files in your project and checks if a newer version is available. If so it replaces the old file with the newer Applanga Settings File from the Applanga backend.&lt;/p&gt; &lt;p&gt;In XCode you go to &lt;code&gt;Build Phases&lt;/code&gt; and &lt;code&gt;New Run Script Phase&lt;/code&gt; and add the following line (if you are using CocoaPods):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bash &#34;$SOURCE_ROOT/Pods/Applanga/Applanga.framework/update-settingsfile.sh&#34; &#34;$SOURCE_ROOT/$TARGET_NAME&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or if you are using Carthage:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bash &#34;$SOURCE_ROOT/Carthage/Checkouts/sdk-ios/Applanga.framework/update-settingsfile.sh&#34; &#34;$SOURCE_ROOT/$TARGET_NAME&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or if you are using Swift Package Manager:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bash &#34;${BUILD_DIR}/../../SourcePackages/checkouts/sdk-ios/Applanga.xcframework/update-settingsfile.sh&#34; &#34;$SOURCE_ROOT/$TARGET_NAME&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or if you are integrated the Applanga SDK manually:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bash &#34;$BUILT_PRODUCTS_DIR/$FRAMEWORKS_FOLDER_PATH/Applanga.framework/update-settingsfile.sh&#34; &#34;$SOURCE_ROOT/$TARGET_NAME&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;--&lt;/p&gt; &lt;p&gt;Optionally you can also run the update script manually from the command line. Navigate to the &lt;code&gt;Applanga.framework&lt;/code&gt; directory, where &lt;code&gt;settingsfile_update.py&lt;/code&gt; is located and run:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bash update-settingsfile.sh ${YOUR TARGET DIRECTORY PATH}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To make sure that the script is running and to see when it does or doesnt update, check the build report in the report navigator window in xcode. There you will find logs for each update step.&lt;/p&gt; &lt;p&gt;If the file is update successfully you shoudl see the log &#34;Settingsfile updated!&#34;. If it is already up to date you will see the log &#34;Settingsfile up-to-date&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Disable automatic string update on init&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;If you wish to stop the sdk from automatically updating your strings on app launch you can set the following&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;...&#xA;&amp;lt;key&amp;gt;ApplangaInitialUpdate&amp;lt;/key&amp;gt;&#xA;&amp;lt;false/&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You will still be able to call Applanga.Update() at any time to update your strings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Disable Draft Mode&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;If you wish to create a build that cannot enable draft mode at any time, you can include the following setting to your plist.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;...&#xA;&amp;lt;key&amp;gt;ApplangaDraftModeEnabled&amp;lt;/key&amp;gt;&#xA;&amp;lt;false/&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also use the following method at runtime&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Applanga.setDraftModelEnabled(bool);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will overide the setting in the plist, but it will not override draft mode being disabled in the applanga dashboard.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Convert Placeholder&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;To convert placeholders between iOS and Android style you need to enable the following in your plist:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;...&#xA;&amp;lt;key&amp;gt;ApplangaConvertPlaceholders&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Common placeholder&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;These placeholder will not be converted as they are supported on iOS and Android.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Scientific notation &lt;code&gt;%e&lt;/code&gt; and &lt;code&gt;%E&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;%c&lt;/code&gt; and &lt;code&gt;%C&lt;/code&gt; Unicode Characters&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;%f&lt;/code&gt; floating point number&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;%g&lt;/code&gt; and &lt;code&gt;%G&lt;/code&gt; computerized scientific notation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;%a&lt;/code&gt; and &lt;code&gt;%A&lt;/code&gt; Floating point numbers&lt;/li&gt; &#xA;   &lt;li&gt;Octal integer &lt;code&gt;%o&lt;/code&gt; (for &lt;code&gt;%O&lt;/code&gt; see Android to iOS conversion)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;%x&lt;/code&gt; and &lt;code&gt;%X&lt;/code&gt; hexadecimal presentation using lowercase letters (&lt;code&gt;%x&lt;/code&gt;) or uppercase letters (&lt;code&gt;%X&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;%d&lt;/code&gt; will remain &lt;code&gt;%d&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Positional placeholder as &lt;code&gt;%1$s&lt;/code&gt; are converted to &lt;code&gt;%1$@&lt;/code&gt; and vice-versa&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Android placeholder&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;All instances of &lt;code&gt;%s&lt;/code&gt; and &lt;code&gt;%S&lt;/code&gt; will be converted to &lt;code&gt;%@&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Unsupported conversion types such as &lt;code&gt;%h&lt;/code&gt; and &lt;code&gt;%tY&lt;/code&gt; will convert to default &lt;code&gt;%@&lt;/code&gt; type.&lt;/li&gt; &#xA;   &lt;li&gt;Boolean types &lt;code&gt;%b&lt;/code&gt; and &lt;code&gt;%B&lt;/code&gt; will be converted to &lt;code&gt;%@&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;%h&lt;/code&gt; and &lt;code&gt;%H&lt;/code&gt; are converted to &lt;code&gt;%@&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Positional strings using &#39;&amp;lt;&#39; are supported. &#34;Duke&#39;s Birthday: &lt;code&gt;%1$tm&lt;/code&gt; &lt;code&gt;%&amp;lt;te&lt;/code&gt;,&lt;code&gt;%&amp;lt;tY&lt;/code&gt;&#34; results in &#34;Duke&#39;s Birthday: &lt;code&gt;%1$@&lt;/code&gt; &lt;code&gt;%1$@&lt;/code&gt;,&lt;code&gt;%1$@&lt;/code&gt;&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Language Mapping&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You can map a locale to another locale. For example if you don&#39;t have &lt;code&gt;es-CL&lt;/code&gt; added to your dashboard it usually has a fallback to &lt;code&gt;es&lt;/code&gt;. But if you want to treat &lt;code&gt;es-CL&lt;/code&gt; as &lt;code&gt;es-MX&lt;/code&gt; then you could add it to the map. Watch out for the log:&lt;/p&gt; &lt;p&gt;&lt;code&gt;ApplangaLanguageMap: es-CL is mapped to es-MX&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;...&#xA;&amp;lt;key&amp;gt;ApplangaLanguageMap&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;zh-Hant-HK=zh-HK,es-CL=es-MX&amp;lt;/string&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Automatic Push Notification Localization and InfoPlist strings&lt;/h2&gt; &#xA;&lt;p&gt;With the Applanga SDK you can only localize local notifications because remote notifications, the app display name (CFBundleDisplayName) as well as the several other NS*UsageDescription etc strings defined in your Info.plist are not using the app runtime and therefore can not be localized at runtime with a SDK. For these kind of strings you can use the &lt;a href=&#34;https://www.applanga.com/docs-integration/cli&#34;&gt;Applanga Command Line Interface&lt;/a&gt; to manage the strings on the &lt;a href=&#34;https://dashboard.applanga.com&#34;&gt;Applanga Dashboard&lt;/a&gt; and update the InfoPlist.strings files whenever you create a new build.&lt;/p&gt; &#xA;&lt;p&gt;For more details on that please have a look at our blogpost on &lt;a href=&#34;https://www.applanga.com/blog/infoplist-strings-and-ios-push-notification-localization-automation/&#34;&gt;Translating Push Notifications and Info.plist localization&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SwiftUI&lt;/h2&gt; &#xA;&lt;p&gt;Although not all Applanga features are supported yet in SwiftUI, you can easily localise your text components using this extention:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#x9;//First add this extention to your project:&#xA;&#x9;extension Text {&#xA;&#x9;    init(applangaKey : String){&#xA;&#x9;        self.init(NSLocalizedString(applangaKey, tableName: nil, bundle: Bundle.main, value: &#34;&#34;, comment:&#34;&#34;))&#xA;&#x9;    }&#xA;&#x9;    init(applangaKey : String, defaultValue : String){&#xA;&#x9;        self.init(NSLocalizedString(applangaKey, tableName: nil, bundle: Bundle.main, value: defaultValue, comment:&#34;&#34;))&#xA;    &#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;//Then localise a text like so:&#xA;&#x9;&#xA;&#x9;Text(applangaKey: &#34;hello_world&#34;)&#xA;&#x9;&#xA;&#x9;//or&#xA;&#x9;&#xA;   &#x9;Text(applangaKey: &#34;hello_world&#34;, defaultValue: &#34;Hello World&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SwiftUI Screenshots&lt;/h3&gt; &#xA;&lt;p&gt;The best method to take screenshots for your translations with SwiftUI is doing your screenshots within UITests as described in &lt;a href=&#34;https://raw.githubusercontent.com/applanga/sdk-ios/master/#Automated-during-UITests&#34;&gt;Automated during UITests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To enable the collection of string positions on your screen with SwiftUI you need to enable the applanga ID mode, which means that every string will shown by its ID and not by its localization. This is the only method to be 100% accurate on linking the correct ids with their positions to the screenshot. To enable the applanga show ID mode pass the parameter to your ApplangaUITest instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    let app = XCUIApplication()&#xA;    let applangaUITest = ApplangaUITest(app: app, enableShowIdMode: true)&#xA;    app.launch()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A good practice is to take all your screenshots with show id mode enabled once and then take all screenshots without the show id mode. Then all screenshots have the correct translations linked to them and you still can see the screenshot with the actual translations.&lt;/p&gt; &#xA;&lt;h2&gt;WatchOS&lt;/h2&gt; &#xA;&lt;p&gt;While screenshots and the draft mode menu are not availble, string upload and automatic storyboard translation work in WatchOS targets, just follow these extra steps to get it working.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;a.&lt;/strong&gt; When installing with cocoa pods or SPM you must also apply the applanga sdk to the watch target that ends with the word &#34;extension&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;b.&lt;/strong&gt; Make sure that any storyboard or string file you want to localise is also a member of the extension target.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;c.&lt;/strong&gt; Add the name of the string file or storyboard that you want to localise to the info.plist of the extension target. For example if you are localising the Interface.storyboard, then add it like so: &lt;code&gt;key=&#34;ApplangaAdditionalStringFiles&#34; value=&#34;Interface&#34;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;d.&lt;/strong&gt; In the info.plist of your watch extension target, add the following entry: &lt;code&gt;key=&#34;ApplangaAdditionalFrameworks&#34; value=&#34;NAME OF YOUR PROJECT WatchKit App&#34;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;MacOS&lt;/h2&gt; &#xA;&lt;p&gt;While screenshots and the draft mode menu are not availble, string upload and automatic storyboard translation work in MacOS targets, just install as you would the iOS sdk and use as normal.&lt;/p&gt; &#xA;&lt;h2&gt;TV OS&lt;/h2&gt; &#xA;&lt;p&gt;Automatic translations and draft mode will work on TV OS without requiring any special changes.&lt;/p&gt; &#xA;&lt;p&gt;The only feature not avalabile currently is the draft mode screenshot menu.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>muxinc/stats-sdk-objc</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/muxinc/stats-sdk-objc</id>
    <link href="https://github.com/muxinc/stats-sdk-objc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mux Stats SDK for iOS and tvOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;stats-sdk-objc&lt;/h1&gt; &#xA;&lt;p&gt;Hosts the core library for Mux for objective-c based integrations as of v2.x. The integration with &lt;code&gt;AVPlayer&lt;/code&gt;/&lt;code&gt;AVPlayerItem&lt;/code&gt; has been moved to a &lt;a href=&#34;https://github.com/muxinc/mux-stats-sdk-avplayer&#34;&gt;new repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Previous Versions&lt;/h1&gt; &#xA;&lt;p&gt;Versions 0.x of this library included the full &lt;code&gt;AVPlayer&lt;/code&gt; integration, see &lt;a href=&#34;https://docs.mux.com/docs/ios-integration-guide&#34;&gt;our docs&lt;/a&gt; for integration instructions. If you currently use the cocoapod for this library as your integration, do &lt;em&gt;not&lt;/em&gt; upgrade above 0.x of this library.&lt;/p&gt; &#xA;&lt;h1&gt;Release&lt;/h1&gt; &#xA;&lt;p&gt;To support the Carthage packaging, run the &lt;code&gt;carthage-archive.sh&lt;/code&gt; when making a new release. Then attach the output to the release.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/muxinc/mux-stats-sdk-avplayer&#34;&gt;this repository&lt;/a&gt; for the updated &lt;code&gt;AVPlayer&lt;/code&gt; integration.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AzureAD/azure-activedirectory-library-for-objc</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/AzureAD/azure-activedirectory-library-for-objc</id>
    <link href="https://github.com/AzureAD/azure-activedirectory-library-for-objc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ADAL SDK for Objective C gives you the ability to add support for Work Accounts to your iOS and macOS applications with just a few lines of additional code. This SDK gives your application the full functionality of Microsoft Azure AD, including industry standard protocol support for OAuth2, Web API integration with user level consent, and tw…&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;p&gt;This library, ADAL for iOS and macOS, will no longer receive new feature improvements. Instead, use the new library &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc&#34;&gt;MSAL for iOS and macOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are starting a new project, you can get started with the &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/wiki&#34;&gt;MSAL for iOS and macOS docs&lt;/a&gt; for details about the scenarios, usage, and relevant concepts.&lt;/li&gt; &#xA; &lt;li&gt;If your application is using the previous ADAL for iOS and macOS library, you can follow this &lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/develop/migrate-objc-adal-msal&#34;&gt;migration guide&lt;/a&gt; to update to MSAL for iOS and macOS.&lt;/li&gt; &#xA; &lt;li&gt;Existing applications relying on ADAL for iOS and macOS will continue to work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Microsoft Azure Active Directory Authentication Library (ADAL) for iOS and macOS&lt;/h1&gt; &#xA;&lt;p&gt;=====================================&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/azure-samples?utf8=%E2%9C%93&amp;amp;q=active-directory-ios&#34;&gt;Code Samples&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/ADAL/&#34;&gt;Reference Docs&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://aka.ms/aaddev&#34;&gt;Developer Guide&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Release Versions&lt;/h2&gt; &#xA;&lt;p&gt;We recommend remaining up-to-date with the latest version of ADAL. The best place to check what the most recent version is is the &lt;a href=&#34;https://github.com/AzureAD/azure-activedirectory-library-for-objc/releases&#34;&gt;releases page&lt;/a&gt; on GitHub, you can also subscribe the the &lt;a href=&#34;https://github.com/AzureAD/azure-activedirectory-library-for-objc/releases.atom&#34;&gt;Atom Feed&lt;/a&gt; from GitHub, or use a 3rd party tool like &lt;a href=&#34;https://sibbell.com/about/&#34;&gt;Sibbell&lt;/a&gt; to receive emails when a new version is released.&lt;/p&gt; &#xA;&lt;p&gt;The only approved way to get the latest version is through a tagged release on GitHub, or a tool that relies on that data. Tools like &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; can make it easier to set up your project dependencies and update to the latest release. ADAL follows the &lt;a href=&#34;http://danielkummer.github.io/git-flow-cheatsheet/&#34;&gt;GitFlow branching model&lt;/a&gt;. You should never pull an ADAL version for release from any branch other then master, any other branch is for versions of ADAL still in development or testing, and are subject to change.&lt;/p&gt; &#xA;&lt;p&gt;NOTE:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To work with iOS 15, you must have at least version 5.0.0. However, we recommend switching to version 6.0.0 since 5.0.0 won&#39;t be maintained.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To work with iOS 10-11.3 you must have at least version 2.2.5.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To work with iOS 11.3-12.4 you must have at least version 2.6.3.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To work with iOS 13+ (when built with Xcode 11) you must have at least version 2.7.14 or 4.0.2&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ADAL supports iOS 10+ and macOS 10.11+. iOS 9 and macOS 10.10 support was dropped in ADAL 4.0.0 release.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h1&gt;WKWebView drops network connection if device got locked on iOS 12. It is by design and not configurable.&lt;/h1&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/AzureAD/azure-activedirectory-library-for-objc&#34;&gt;&lt;img src=&#34;https://travis-ci.org/AzureAD/azure-activedirectory-library-for-objc.svg?branch=1.2.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The ADAL SDK for iOS and macOS gives you the ability to add support for Work Accounts to your application with just a few lines of additional code. This SDK gives your application the full functionality of Microsoft Azure AD, including industry standard protocol support for OAuth2, Web API integration with user level consent, and two factor authentication support. Best of all, it’s FOSS (Free and Open Source Software) so that you can participate in the development process as we build these libraries.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://waffle.io/AzureAD/azure-activedirectory-library-for-objc&#34;&gt;&lt;img src=&#34;https://badge.waffle.io/AzureAD/azure-activedirectory-library-for-objc.png?label=ready&amp;amp;title=Ready&#34; alt=&#34;Stories in Ready&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://waffle.io/AzureAD/azure-activedirectory-library-for-objc/metrics&#34;&gt;&lt;img src=&#34;https://graphs.waffle.io/AzureAD/azure-activedirectory-library-for-objc/throughput.svg?sanitize=true&#34; alt=&#34;Throughput Graph&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Samples and Documentation&lt;/h2&gt; &#xA;&lt;p&gt;We provide a full suite of &lt;a href=&#34;https://github.com/AzureADSamples&#34;&gt;sample applications&lt;/a&gt; and &lt;a href=&#34;http://cocoadocs.org/docsets/ADAL/&#34;&gt;documentation&lt;/a&gt; on GitHub to help you get started with learning the Azure Identity system. This includes tutorials for native clients such as Windows, Windows Phone, iOS, macOS, Android, and Linux. We also provide full walkthroughs for authentication flows such as OAuth2, OpenID Connect, Graph API, and other awesome features.&lt;/p&gt; &#xA;&lt;p&gt;Azure Identity samples for iOS is here: &lt;a href=&#34;https://github.com/AzureADSamples/NativeClient-iOS&#34;&gt;https://github.com/AzureADSamples/NativeClient-iOS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community Help and Support&lt;/h2&gt; &#xA;&lt;p&gt;We leverage &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; to work with the community on supporting Azure Active Directory and its SDKs, including this one! We highly recommend you ask your questions on Stack Overflow (we&#39;re all on there!) Also browser existing issues to see if someone has had your question before.&lt;/p&gt; &#xA;&lt;p&gt;We recommend you use the &#34;adal&#34; tag so we can see it! Here is the latest Q&amp;amp;A on Stack Overflow for ADAL: &lt;a href=&#34;http://stackoverflow.com/questions/tagged/adal&#34;&gt;http://stackoverflow.com/questions/tagged/adal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;SSO and Conditional Access Support&lt;/h2&gt; &#xA;&lt;p&gt;This library allows your application to support our &lt;a href=&#34;https://www.microsoft.com/en-us/cloud-platform/enterprise-mobility-security&#34;&gt;Enterprise Mobility Suite&lt;/a&gt;, including &lt;a href=&#34;https://www.microsoft.com/en-us/cloud-platform/conditional-access&#34;&gt;Conditional Access&lt;/a&gt;, so businesses can use your application in their secure environment.&lt;/p&gt; &#xA;&lt;p&gt;To configure your application to support these scenarios, please read this document: &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-sso-ios&#34;&gt;How to enable cross-app SSO on iOS using ADAL&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Security Reporting&lt;/h2&gt; &#xA;&lt;p&gt;If you find a security issue with our libraries or services please report it to &lt;a href=&#34;mailto:secure@microsoft.com&#34;&gt;secure@microsoft.com&lt;/a&gt; with as much detail as possible. Your submission may be eligible for a bounty through the &lt;a href=&#34;http://aka.ms/bugbounty&#34;&gt;Microsoft Bounty&lt;/a&gt; program. Please do not post security issues to GitHub Issues or any other public site. We will contact you shortly upon receiving the information. We encourage you to get notifications of when security incidents occur by visiting &lt;a href=&#34;https://technet.microsoft.com/en-us/security/dd252948&#34;&gt;this page&lt;/a&gt; and subscribing to Security Advisory Alerts.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All code is licensed under the MIT license and we triage actively on GitHub. We enthusiastically welcome contributions and feedback. You can clone the repo and start contributing now.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository to your machine&lt;/li&gt; &#xA; &lt;li&gt;Build the library or framework&lt;/li&gt; &#xA; &lt;li&gt;Add the ADAL library or framework your project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve made it easy for you to have multiple options to use this library in your iOS project:&lt;/p&gt; &#xA;&lt;h3&gt;Option 1: Git Submodule&lt;/h3&gt; &#xA;&lt;p&gt;If your project is managed in a git repository you can include ADAL as a git submodule. First check the &lt;a href=&#34;https://github.com/AzureAD/azure-activedirectory-library-for-objc/releases&#34;&gt;GitHub Releases Page&lt;/a&gt; for the latest release tag. Replace &lt;code&gt;&amp;lt;latest_release_tag&amp;gt;&lt;/code&gt; with that version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/AzureAD/azure-activedirectory-library-for-objc adal&#xA;cd adal&#xA;git checkout tags/&amp;lt;latest_release_tag&amp;gt;&#xA;cd ..&#xA;git add adal&#xA;git commit -m &#34;Use ADAL git submodule at &amp;lt;latest_release_tag&amp;gt;&#34;&#xA;git push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommend only syncing to specific release tags to make sure you&#39;re at a known good point. We will not support versions of ADAL between release tags.&lt;/p&gt; &#xA;&lt;h3&gt;Option 2: Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;You can use CocoaPods to remain up to date with ADAL within a specific major version. Include the following line in your podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;ADAL&#39;, &#39;~&amp;gt; 6.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You then you can run either &lt;code&gt;pod install&lt;/code&gt; (if it&#39;s a new PodFile) or &lt;code&gt;pod update&lt;/code&gt; (if it&#39;s an existing PodFile) to get the latest version of ADAL. Subsequent calls to &lt;code&gt;pod update&lt;/code&gt; will update to the latest released version of ADAL as well.&lt;/p&gt; &#xA;&lt;p&gt;ADAL is using submodules, so if you&#39;re using a specific branch of ADAL in your Podfile, you need to enable submodules, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;ADAL&#39;, :git =&amp;gt; &#39;https://github.com/AzureAD/azure-activedirectory-library-for-objc&#39;, :branch =&amp;gt; &#39;branch-name&#39;, :submodules =&amp;gt; true&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; for more information on setting up a PodFile&lt;/p&gt; &#xA;&lt;h3&gt;Option 3: Source Zip&lt;/h3&gt; &#xA;&lt;p&gt;To download a copy of the source code, first make sure you&#39;re on the &#34;master&#34; branch and click &#34;Clone or download&#34; then &#34;Download ZIP&#34; in the upper right hand corner, or you can download it &lt;a href=&#34;https://github.com/AzureAD/azure-activedirectory-library-for-objc/archive/master.zip&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is not recommended, as it leaves no infrastructure in place for being able to easily update to the latest version.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Caching&lt;/h3&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;h5&gt;Keychain Setup&lt;/h5&gt; &#xA;&lt;p&gt;Click on your project in the Navigator pane in Xcode. Click on your application target and then the &#34;Capabilities&#34; tab. Scroll down to &#34;Keychain Sharing&#34; and flip the switch on. Add &#34;com.microsoft.adalcache&#34; to that list.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can disable keychain sharing by setting the keychain sharing group to nil or your application&#39;s bundle id.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;    [[ADALAuthenticationSettings sharedInstance] setDefaultKeychainGroup:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Inspecting the Cache&lt;/h5&gt; &#xA;&lt;p&gt;If you need to inspect the cache in your app, you can do it through the ADKeychainTokenCache interface.&lt;/p&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;p&gt;Keychain is not directly supported by ADAL on macOS. The default caching implementation will keep around tokens for the life time of the process, but they will not be persisted. If you wish to persist tokens you must implement the ADALTokenCacheDelegate and provide it on AuthenticationContext creation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;@protocol ADALTokenCacheDelegate &amp;lt;NSObject&amp;gt;&#xA;&#xA;- (void)willAccessCache:(nonnull ADALTokenCache *)cache;&#xA;- (void)didAccessCache:(nonnull ADALTokenCache *)cache;&#xA;- (void)willWriteCache:(nonnull ADALTokenCache *)cache;&#xA;- (void)didWriteCache:(nonnull ADALTokenCache *)cache;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this delegate you can call -serialize and -deserialize on the cache object to save or update the cache in the form of an NSData binary blob.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;p&gt;The starting point for the API is in ADALAuthenticationContext.h header. ADALAuthenticationContext is the main class used for obtaining, caching and supplying access tokens.&lt;/p&gt; &#xA;&lt;h4&gt;How to quickly get a token from the SDK:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;&#xA;+ (void)getToken:(void (^)(NSString*))completionBlock;&#xA;{&#xA;    ADALAuthenticationError *error = nil;&#xA;    authContext = [ADALAuthenticationContext authenticationContextWithAuthority:@&#34;https://login.microsoftonline.com/common&#34;&#xA;                                                                        error:&amp;amp;error];&#xA;        &#xA;    [authContext acquireTokenWithResource:@&#34;https://graph.windows.net&#34;                 &#xA;                                 clientId:@&#34;&amp;lt;Your Client ID&amp;gt;&#34;                          // Comes from App Portal&#xA;                              redirectUri:[NSURL URLWithString:@&#34;&amp;lt;Your Redirect URI&amp;gt;&#34;] // Comes from App Portal&#xA;                          completionBlock:^(ADALAuthenticationResult *result)&#xA;    {&#xA;        if (AD_SUCCEEDED != result.status){&#xA;            // display error on the screen&#xA;            [self showError:result.error.errorDetails];&#xA;        }&#xA;        else{&#xA;            completionBlock(result.accessToken);&#xA;        }&#xA;    }];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adding the Token to the authHeader to access APIs:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;&#xA;    NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:yourAppURL];&#xA;    NSString *authHeader = [NSString stringWithFormat:@&#34;Bearer %@&#34;, accessToken];&#xA;    [request addValue:authHeader forHTTPHeaderField:@&#34;Authorization&#34;];&#xA;            &#xA;    NSOperationQueue *queue = [[NSOperationQueue alloc] init];&#xA;            &#xA;    [NSURLConnection sendAsynchronousRequest:request&#xA;                                       queue:queue&#xA;                           completionHandler:^(NSURLResponse *response, NSData *data, NSError *error)&#xA;    {&#xA;    &#x9;// Process Response Here&#xA;    }];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Brokered Authentication&lt;/h3&gt; &#xA;&lt;p&gt;If your app requires conditional access or certificate authentication (currently in preview) support, you must set up your AuthenticationContext and redirectURI to be able to talk to the Azure Authenticator app.&lt;/p&gt; &#xA;&lt;h4&gt;Enable Broker Mode on Your Context&lt;/h4&gt; &#xA;&lt;p&gt;Broker is enabled on a per-authentication-context basis. You must set your credentials type if you wish ADAL to call to broker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;/*! See the ADCredentialsType enumeration definition for details */&#xA;@property ADALCredentialsType credentialsType;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The AD_CREDENTIALS_AUTO setting will allow ADAL to try to call out to the broker, AD_CREDENTIALS_EMBEDDED will prevent ADAL from calling to the broker.&lt;/p&gt; &#xA;&lt;h4&gt;Registering a URL Scheme&lt;/h4&gt; &#xA;&lt;p&gt;ADAL uses URLs to invoke the broker and then return back to your app. To finish that round trip you need a URL scheme registered for your app. We recommend making the URL scheme fairly unique to minimize the chances of another app using the same URL scheme.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;    &amp;lt;dict&amp;gt;&#xA;        &amp;lt;key&amp;gt;CFBundleTypeRole&amp;lt;/key&amp;gt;&#xA;        &amp;lt;string&amp;gt;Editor&amp;lt;/string&amp;gt;&#xA;        &amp;lt;key&amp;gt;CFBundleURLName&amp;lt;/key&amp;gt;&#xA;        &amp;lt;string&amp;gt;com.MSOpenTech.MyTestiOSApp&amp;lt;/string&amp;gt;&#xA;        &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;&#xA;        &amp;lt;array&amp;gt;&#xA;            &amp;lt;string&amp;gt;x-msauth-mytestiosapp&amp;lt;/string&amp;gt;&#xA;        &amp;lt;/array&amp;gt;&#xA;    &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;LSApplicationQueriesSchemes&lt;/h4&gt; &#xA;&lt;p&gt;ADAL uses –canOpenURL: to check if the broker is installed on the device. in iOS 9 Apple locked down what schemes an application can query for. You will need to add “msauth” and &#34;msauthv3&#34; to the LSApplicationQueriesSchemes section of your info.plist file. Note that &#34;msauthv3&#34; scheme is needed when compiling with Xcode 11+.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;LSApplicationQueriesSchemes&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;     &amp;lt;string&amp;gt;msauth&amp;lt;/string&amp;gt;&#xA;     &amp;lt;string&amp;gt;msauthv3&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Redirect URI&lt;/h4&gt; &#xA;&lt;p&gt;This adds extra requirements on your redirect URI. Your redirect URI must be in the proper form.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;app-scheme&amp;gt;://&amp;lt;your.bundle.id&amp;gt;&#xA;ex: x-msauth-mytestiosapp://com.microsoft.mytestiosapp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This Redirect URI needs to be registered on the app portal as a valid redirect URI. Additionally a second &#34;msauth&#34; form needs to be registered to handle certificate authentication in Azure Authenticator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;msauth://code/&amp;lt;broker-redirect-uri-in-url-encoded-form&amp;gt;&#xA;ex: msauth://code/x-msauth-mytestiosapp%3A%2F%2Fcom.microsoft.mytestiosapp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;iOS 13 support&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you adopted UISceneDelegate, you must also add an ADAL callback into the &lt;code&gt;scene:openURLContexts:&lt;/code&gt; method&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is needed so that ADAL can get a response from the Microsoft Authenticator application.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt; - (void)scene:(UIScene *)scene openURLContexts:(NSSet&amp;lt;UIOpenURLContext *&amp;gt; *)URLContexts&#xA; {&#xA;     UIOpenURLContext *context = URLContexts.anyObject;&#xA;     NSURL *url = context.URL;&#xA;     NSString *sourceApplication = context.options.sourceApplication;&#xA;     &#xA;     [ADALAuthenticationContext handleADALResponse:url sourceApplication:sourceApplication];&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not using UISceneDelegate functionality yet, you can ignore this step.&lt;/p&gt; &#xA;&lt;h3&gt;Diagnostics&lt;/h3&gt; &#xA;&lt;h4&gt;Logs&lt;/h4&gt; &#xA;&lt;p&gt;ADAL relies heavily on logging to diagnose issues. It is highly recommended that you set an ADAL logging callback and provide a way for users to submit logs when they are having authentication issues.&lt;/p&gt; &#xA;&lt;h5&gt;Logging Callback&lt;/h5&gt; &#xA;&lt;p&gt;You can set a callback to capture ADAL logging and incorporate it in your own application&#39;s logging:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;/*!&#xA;    The LogCallback block for the ADAL logger&#xA; &#xA;    @param  logLevel        The level of the log message&#xA;    @param  message         A short log message describing the event that occurred, this string will not contain PII.&#xA;    @param  additionalInfo  A longer message that may contain PII and other details relevant to the event.&#xA;    @param  errorCode       An integer error code if the log message is an error.&#xA;    @param  userInfo        A dictionary with other information relevant to the log message. The information varies,&#xA;                            for most error messages the error object will be in the &#34;error&#34; key.&#xA; */&#xA;typedef void (^LogCallback)(ADAL_LOG_LEVEL logLevel,&#xA;                            NSString *message,&#xA;                            NSString *additionalInfo,&#xA;                            NSInteger errorCode,&#xA;                            NSDictionary *userInfo);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise ADAL outputs to NSLog by default, which will print messages on the console.&lt;/p&gt; &#xA;&lt;h5&gt;Example Log Message&lt;/h5&gt; &#xA;&lt;p&gt;The message portion of ADAL iOS are in the format of ADALiOS [timestamp - correlation_id] message&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ADAL [2015-06-22 19:42:53 - 1030CB25-798F-4A6F-97DF-04A3A3E9DFF2] ADAL API call [Version - 2.1.0]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Providing correlation IDs and timestamps are tremendously in tracking down issues. The only reliable place to retrieve them is from ADAL logging.&lt;/p&gt; &#xA;&lt;h5&gt;Logging Levels&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ADAL_LOG_LEVEL_NO_LOG (Disable all logging)&lt;/li&gt; &#xA; &lt;li&gt;ADAL_LOG_LEVEL_ERROR (Default level, prints out information only when errors occur)&lt;/li&gt; &#xA; &lt;li&gt;ADAL_LOG_LEVEL_WARNING (Warning)&lt;/li&gt; &#xA; &lt;li&gt;ADAL_LOG_LEVEL_INFO (Library entry points, with parameters and various keychain operations)&lt;/li&gt; &#xA; &lt;li&gt;ADAL_LOG_LEVEL_Verbose (API tracing )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To set the logging level in your application call +[ADALLogger setLevel:]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;[ADALLogger setLevel:ADAL_LOG_LEVEL_INFO]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Network Traces&lt;/h4&gt; &#xA;&lt;p&gt;You can use various tools to capture the HTTP traffic that ADAL generates. This is most useful if you are familiar with the OAuth protocol or if you need to provide diagnostic information to Microsoft or other support channels.&lt;/p&gt; &#xA;&lt;p&gt;Charles is the easiest HTTP tracing tool in OSX. Use the following links to setup it up to correctly record ADAL network traffic. In order to be useful it is necessary to configure Charles, to record unencrypted SSL traffic. NOTE: Traces generated in this way may contain highly privileged information such as access tokens, usernames and passwords.&lt;br&gt; If you are using production accounts, do not share these traces with 3rd parties. If you need to supply a trace to someone in order to get support, reproduce the issue with a temporary account with usernames and passwords that you don&#39;t mind sharing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.charlesproxy.com/documentation/faqs/ssl-connections-from-within-iphone-applications/&#34;&gt;Setting Up SSL For iOS Simulator or Devices&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ADALAuthenticationError&lt;/h4&gt; &#xA;&lt;p&gt;ADALAuthenticationErrors are provided in all callbacks in the ADALAuthenticationResult&#39;s error property when an error occurs. They can be used to have the application display more more informative errors to the user, however ADAL Error messages are not localized. All ADAuthenticationErrors are logged with the ADAL logger as well.&lt;/p&gt; &#xA;&lt;p&gt;##Common problems&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Application, using the ADAL library crashes with the following exception:&lt;/strong&gt;&lt;br&gt; *** Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;, reason: &#39;+[NSString isStringNilOrBlank:]: unrecognized selector sent to class 0x13dc800&#39;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; Make sure that you add the -ObjC flag to &#34;Other Linker Flags&#34; build setting of the application. For more information, see Apple documentation for using static libraries:&lt;br&gt; &lt;a href=&#34;https://developer.apple.com/library/ios/technotes/iOSStaticLibraries/Articles/configuration.html#//apple_ref/doc/uid/TP40012554-CH3-SW1&#34;&gt;https://developer.apple.com/library/ios/technotes/iOSStaticLibraries/Articles/configuration.html#//apple_ref/doc/uid/TP40012554-CH3-SW1&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Log ins are not persisting, Cache always returns empty&lt;/strong&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; Either add the &#34;com.microsoft.adalcache&#34; keychain sharing entitlement to your application, or disable keychain sharing by passing in your application&#39;s bundle id in ADAuthenticationSettings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;    [[ADALAuthenticationSettings sharedInstance] setDefaultKeychainGroup:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;ADAL keeps returning SSL errors in iOS 9 and later&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;iOS 9 added App Transport Security (ATS). ATS restricts apps from accessing the internet unless they meet several security requirements including TLS 1.2 and SHA-256. It also prevents network traces that rely on self signed certs to crack SSL from working. Disabling ATS must be done in the Application&#39;s info.plist file, see &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33&#34;&gt;documentation on the NSAppTransport info.plist key&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT License (the &#34;License&#34;);&lt;/p&gt; &#xA;&lt;h2&gt;We Value and Adhere to the Microsoft Open Source Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emartech/ios-emarsys-sdk</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/emartech/ios-emarsys-sdk</id>
    <link href="https://github.com/emartech/ios-emarsys-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h4&gt;Contents&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emartech/ios-emarsys-sdk/master/#what-is-the-emarsys-sdk&#34; title=&#34;What is EmarsysSDK?&#34;&gt;What is the Emarsys SDK?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emartech/ios-emarsys-sdk/master/#sample-app&#34; title=&#34;Sample app&#34;&gt;Sample app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emartech/ios-emarsys-sdk/master/#setup&#34; title=&#34;Setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emartech/ios-emarsys-sdk/master/#1-installation-with-cocoapods&#34; title=&#34;CocoaPods&#34;&gt;Installation with CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emartech/ios-emarsys-sdk/master/#2-requirements&#34; title=&#34;Requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk/wiki&#34; title=&#34;Wiki&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk/wiki/deeplink&#34; title=&#34;DeepLink&#34;&gt;DeepLink&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk/wiki/glossary&#34; title=&#34;Glossary&#34;&gt;Glossary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk/wiki/migrate-from-mobile-engage&#34; title=&#34;Migration guide&#34;&gt;Migrate from MobileEngage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk/wiki/rich-push-notifications&#34; title=&#34;Rich Push notifications&#34;&gt;Rich Push Notifications&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is the Emarsys SDK?&lt;/h2&gt; &#xA;&lt;p&gt;The Emarsys SDK enables you to use Mobile Engage and Predict in a very straightforward way. By incorporating the SDK in your app, we, among others, support you in handling credentials, API calls, tracking of opens and events as well as logins and logouts in the app.&lt;/p&gt; &#xA;&lt;p&gt;The Emarsys SDK is open-sourced to enhance transparency and to remove privacy concerns. This also means that you will always be up-to-date with what we are working on.&lt;/p&gt; &#xA;&lt;p&gt;Using the SDK is also beneficial from the product aspect: it simply makes it much easier to send push messages through your app. Please always use the latest version of the SDK in your app.&lt;/p&gt; &#xA;&lt;h2&gt;Sample app&lt;/h2&gt; &#xA;&lt;p&gt;We created a sample application to help in the integration and give an example. Find instructions for the build process &lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk/tree/master/Emarsys%20Sample&#34; title=&#34;Sample app&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;1. Installation with CocoaPods&lt;/h3&gt; &#xA;&lt;h4&gt;1.1 Install CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;CocoaPods is a dependency manager for iOS, which automates and simplifies the process of using 3rd-party libraries. You can install it with the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ gem&amp;nbsp;install&amp;nbsp;cocoapods&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;1.2 Podfile&lt;/h4&gt; &#xA;&lt;p&gt;To integrate the Emarsys SDK into your Xcode project using CocoaPods, specify it in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;11.0&#39;&#xA;&#xA;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;&#xA;target &#34;&amp;lt;TargetName&amp;gt;&#34; do&#xA;&#x9;pod ‘EmarsysSDK’, &#39;~&amp;gt; ‹latest_released_version_of_emarsys-sdk›’&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Wherever you see &#xA;  &lt;targetname&gt;&#xA;    or anything similar in &amp;lt;&amp;gt; brackets, you should change those according to your own naming convention or add a value valid for the context.&#xA;  &lt;/targetname&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;1.3 Install Pods&lt;/h4&gt; &#xA;&lt;p&gt;After creating the Podfile, you need to execute the command below to download dependencies: &lt;code&gt;pod install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Installation with Swift Package Manager&lt;/h3&gt; &#xA;&lt;h4&gt;2.1 Add package in XCode&lt;/h4&gt; &#xA;&lt;p&gt;Select project and under Swift Packages add the package repository url: &lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk.git&#34;&gt;https://github.com/emartech/ios-emarsys-sdk.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Select the desired version of the EmarsysSDK.&lt;/p&gt; &#xA;&lt;p&gt;On the next page select the libraries you want to use and add them to the correct target, for example (based on our SampleApp):&lt;/p&gt; &#xA;&lt;p&gt;EmarsysSDKLibrary and add to target EmarsysSample&lt;/p&gt; &#xA;&lt;p&gt;EmarsysNotificationExtensionLibrary and add to target EMSNotificationService&lt;/p&gt; &#xA;&lt;h3&gt;3. Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The iOS target should be iOS 11 or higher.&lt;/li&gt; &#xA; &lt;li&gt;In order to be able to send push messages to your app, you need to have certifications from Apple Push Notification service (APNs).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;Note&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;For further information about how to use our SDK please visit our &lt;a href=&#34;https://github.com/emartech/ios-emarsys-sdk/wiki&#34; title=&#34;Wiki&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>wix/AppleSimulatorUtils</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/wix/AppleSimulatorUtils</id>
    <link href="https://github.com/wix/AppleSimulatorUtils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of command-line utils for Apple simulators.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AppleSimulatorUtils&lt;/h1&gt; &#xA;&lt;p&gt;A collection of utils for Apple simulators.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://brew.sh&#34;&gt;brew&lt;/a&gt;, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap wix/brew&#xA;brew install applesimutils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;A collection of utils for Apple simulators.&#xA;&#xA;Usage Examples:&#xA;    applesimutils --byId &amp;lt;simulator UDID&amp;gt; --bundle &amp;lt;bundle identifier&amp;gt; --setPermissions &#34;&amp;lt;permission1&amp;gt;, &amp;lt;permission2&amp;gt;, ...&#34;&#xA;    applesimutils --byName &amp;lt;simulator name&amp;gt; --byOS &amp;lt;simulator OS&amp;gt; --bundle &amp;lt;bundle identifier&amp;gt; --setPermissions &#34;&amp;lt;permission1&amp;gt;, &amp;lt;permission2&amp;gt;, ...&#34;&#xA;    applesimutils --list [--byName &amp;lt;simulator name&amp;gt;] [--byOS &amp;lt;simulator OS&amp;gt;] [--byType &amp;lt;simulator device type&amp;gt;] [--maxResults &amp;lt;int&amp;gt;]&#xA;    applesimutils --booted --biometricEnrollment &amp;lt;YES/NO&amp;gt;&#xA;    applesimutils --booted --biometricMatch&#xA;&#xA;Options:&#xA;    --byId, -id                   Filters simulators by unique device identifier (UDID)&#xA;    --byName, -n                  Filters simulators by name&#xA;    --byType, -t                  Filters simulators by device type&#xA;    --byOS, -o                    Filters simulators by operating system&#xA;    --booted, -bt                 Filters simulators by booted status&#xA;&#xA;    --list, -l                    Lists available simulators&#xA;    --bundle, -b                  The app bundle identifier&#xA;    --maxResults                  Limits the number of results returned from --list&#xA;&#xA;    --setPermissions, -sp         Sets the specified permissions and restarts SpringBoard for the changes to take effect&#xA;    --clearKeychain, -ck          Clears the simulator&#39;s keychain&#xA;    --clearMedia, -cm             Clears the simulator&#39;s media&#xA;    --restartSB, -sb              Restarts SpringBoard&#xA;&#xA;    --biometricEnrollment, -be    Enables or disables biometric (Face ID/Touch ID) enrollment.&#xA;    --biometricMatch, -bm         Approves a biometric authentication request with a matching biometric feature (e.g. face or finger)&#xA;    --biometricNonmatch, -bnm     Fails a biometric authentication request with a non-matching biometric feature (e.g. face or finger)&#xA;&#xA;    --version, -v                 Prints version&#xA;    --help, -h                    Prints usage&#xA;&#xA;Available Permissions:&#xA;    calendar=YES|NO|unset&#xA;    camera=YES|NO|unset&#xA;    contacts=YES|NO|unset&#xA;    faceid=YES|NO|unset&#xA;    health=YES|NO|unset (iOS/tvOS 12.0 and above)&#xA;    homekit=YES|NO|unset&#xA;    location=always|inuse|never|unset&#xA;    medialibrary=YES|NO|unset&#xA;    microphone=YES|NO|unset&#xA;    motion=YES|NO|unset&#xA;    notifications=YES|NO|unset&#xA;    photos=YES|NO|limited|unset (“limited” supported on iOS/tvOS 14.0 and above)&#xA;    reminders=YES|NO|unset&#xA;    siri=YES|NO|unset&#xA;    speech=YES|NO|unset&#xA;    userTracking=YES|NO|unset (iOS/tvOS 14.0 and above)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In case an installation fails, make sure to update your command line tools in the System Update system preference pane of your Mac&lt;/li&gt; &#xA; &lt;li&gt;If Homebrew complains about a conflict in the &lt;code&gt;wix/brew&lt;/code&gt; tap, run &lt;code&gt;brew untap wix/brew &amp;amp;&amp;amp; brew tap wix/brew&lt;/code&gt; and try installing again&lt;/li&gt; &#xA; &lt;li&gt;If installation still fails, &lt;strong&gt;run &lt;code&gt;brew doctor&lt;/code&gt; and fix all issues &amp;amp; warnings&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>luisobo/Nocilla</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/luisobo/Nocilla</id>
    <link href="https://github.com/luisobo/Nocilla" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Testing HTTP requests has never been easier. Nocilla: Stunning HTTP stubbing for iOS and Mac OS X.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nocilla &lt;a href=&#34;https://travis-ci.org/luisobo/Nocilla&#34;&gt;&lt;img src=&#34;http://img.shields.io/travis/luisobo/Nocilla.svg?style=flat&amp;amp;branch=master&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/Nocilla&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Nocilla.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/Nocilla&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Nocilla.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/Nocilla&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/Nocilla.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Stunning HTTP stubbing for iOS and OS X. Testing HTTP requests has never been easier.&lt;/p&gt; &#xA;&lt;p&gt;This library was inspired by &lt;a href=&#34;https://github.com/bblimke/webmock&#34;&gt;WebMock&lt;/a&gt; and it&#39;s using &lt;a href=&#34;http://www.infinite-loop.dk/blog/2011/09/using-nsurlprotocol-for-injecting-test-data/&#34;&gt;this approach&lt;/a&gt; to stub the requests.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stub HTTP and HTTPS requests in your unit tests.&lt;/li&gt; &#xA; &lt;li&gt;Supports NSURLConnection, NSURLSession and ASIHTTPRequest.&lt;/li&gt; &#xA; &lt;li&gt;Awesome DSL that will improve the readability and maintainability of your tests.&lt;/li&gt; &#xA; &lt;li&gt;Match requests with regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;Stub requests with errors.&lt;/li&gt; &#xA; &lt;li&gt;Tested.&lt;/li&gt; &#xA; &lt;li&gt;Fast.&lt;/li&gt; &#xA; &lt;li&gt;Extendable to support more HTTP libraries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;As a &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPod&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Just add this to your Podfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Nocilla&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other approaches&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You should be able to add Nocilla to you source tree. If you are using git, consider using a &lt;code&gt;git submodule&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Yes, the following code is valid Objective-C, or at least, it should be&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following examples are described using &lt;a href=&#34;https://github.com/kiwi-bdd/Kiwi&#34;&gt;Kiwi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Common parts&lt;/h3&gt; &#xA;&lt;p&gt;Until Nocilla can hook directly into Kiwi, you will have to include the following snippet in the specs you want to use Nocilla:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &#34;Kiwi.h&#34;&#xA;#import &#34;Nocilla.h&#34;&#xA;SPEC_BEGIN(ExampleSpec)&#xA;beforeAll(^{&#xA;  [[LSNocilla sharedInstance] start];&#xA;});&#xA;afterAll(^{&#xA;  [[LSNocilla sharedInstance] stop];&#xA;});&#xA;afterEach(^{&#xA;  [[LSNocilla sharedInstance] clearStubs];&#xA;});&#xA;&#xA;it(@&#34;should do something&#34;, ^{&#xA;  // Stub here!&#xA;});&#xA;SPEC_END&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stubbing requests&lt;/h3&gt; &#xA;&lt;h4&gt;Stubbing a simple request&lt;/h4&gt; &#xA;&lt;p&gt;It will return the default response, which is a 200 and an empty body.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;GET&#34;, @&#34;http://www.google.com&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Stubbing requests with regular expressions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;GET&#34;, @&#34;^http://(.*?)\\.example\\.com/v1/dogs\\.json&#34;.regex);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Stubbing a request with a particular header&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;GET&#34;, @&#34;https://api.example.com&#34;).&#xA;withHeader(@&#34;Accept&#34;, @&#34;application/json&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Stubbing a request with multiple headers&lt;/h4&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;withHeaders&lt;/code&gt; method makes sense with the Objective-C literals, but it accepts an NSDictionary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;GET&#34;, @&#34;https://api.example.com/dogs.json&#34;).&#xA;withHeaders(@{@&#34;Accept&#34;: @&#34;application/json&#34;, @&#34;X-CUSTOM-HEADER&#34;: @&#34;abcf2fbc6abgf&#34;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Stubbing a request with a particular body&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;POST&#34;, @&#34;https://api.example.com/dogs.json&#34;).&#xA;withHeaders(@{@&#34;Accept&#34;: @&#34;application/json&#34;, @&#34;X-CUSTOM-HEADER&#34;: @&#34;abcf2fbc6abgf&#34;}).&#xA;withBody(@&#34;{\&#34;name\&#34;:\&#34;foo\&#34;}&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;NSData&lt;/code&gt; for the request body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;POST&#34;, @&#34;https://api.example.com/dogs.json&#34;).&#xA;withHeaders(@{@&#34;Accept&#34;: @&#34;application/json&#34;, @&#34;X-CUSTOM-HEADER&#34;: @&#34;abcf2fbc6abgf&#34;}).&#xA;withBody([@&#34;foo&#34; dataUsingEncoding:NSUTF8StringEncoding]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It even works with regular expressions!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;POST&#34;, @&#34;https://api.example.com/dogs.json&#34;).&#xA;withHeaders(@{@&#34;Accept&#34;: @&#34;application/json&#34;, @&#34;X-CUSTOM-HEADER&#34;: @&#34;abcf2fbc6abgf&#34;}).&#xA;withBody(@&#34;^The body start with this&#34;.regex);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Returning a specific status code&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;GET&#34;, @&#34;http://www.google.com&#34;).andReturn(404);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Returning a specific status code and header&lt;/h4&gt; &#xA;&lt;p&gt;The same approch here, you can use &lt;code&gt;withHeader&lt;/code&gt; or &lt;code&gt;withHeaders&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;POST&#34;, @&#34;https://api.example.com/dogs.json&#34;).&#xA;andReturn(201).&#xA;withHeaders(@{@&#34;Content-Type&#34;: @&#34;application/json&#34;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Returning a specific status code, headers and body&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;GET&#34;, @&#34;https://api.example.com/dogs.json&#34;).&#xA;andReturn(201).&#xA;withHeaders(@{@&#34;Content-Type&#34;: @&#34;application/json&#34;}).&#xA;withBody(@&#34;{\&#34;ok\&#34;:true}&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;NSData&lt;/code&gt; for the response body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;GET&#34;, @&#34;https://api.example.com/dogs.json&#34;).&#xA;andReturn(201).&#xA;withHeaders(@{@&#34;Content-Type&#34;: @&#34;application/json&#34;}).&#xA;withBody([@&#34;bar&#34; dataUsingEncoding:NSUTF8StringEncoding]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Returning raw responses recorded with &lt;code&gt;curl -is&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;curl -is http://api.example.com/dogs.json &amp;gt; /tmp/example_curl_-is_output.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;GET&#34;, @&#34;https://api.example.com/dogs.json&#34;).&#xA;andReturnRawResponse([NSData dataWithContentsOfFile:@&#34;/tmp/example_curl_-is_output.txt&#34;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;All together&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;POST&#34;, @&#34;https://api.example.com/dogs.json&#34;).&#xA;withHeaders(@{@&#34;Accept&#34;: @&#34;application/json&#34;, @&#34;X-CUSTOM-HEADER&#34;: @&#34;abcf2fbc6abgf&#34;}).&#xA;withBody(@&#34;{\&#34;name\&#34;:\&#34;foo\&#34;}&#34;).&#xA;andReturn(201).&#xA;withHeaders(@{@&#34;Content-Type&#34;: @&#34;application/json&#34;}).&#xA;withBody(@&#34;{\&#34;ok\&#34;:true}&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Making a request fail&lt;/h4&gt; &#xA;&lt;p&gt;This will call the failure handler (callback, delegate... whatever your HTTP client uses) with the specified error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;POST&#34;, @&#34;https://api.example.com/dogs.json&#34;).&#xA;withHeaders(@{@&#34;Accept&#34;: @&#34;application/json&#34;, @&#34;X-CUSTOM-HEADER&#34;: @&#34;abcf2fbc6abgf&#34;}).&#xA;withBody(@&#34;{\&#34;name\&#34;:\&#34;foo\&#34;}&#34;).&#xA;andFailWithError([NSError errorWithDomain:@&#34;foo&#34; code:123 userInfo:nil]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Replacing a request stub&lt;/h4&gt; &#xA;&lt;p&gt;If you need to change the response of a single request, simply re-stub the request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;stubRequest(@&#34;POST&#34;, @&#34;https://api.example.com/authorize/&#34;).&#xA;andReturn(401);&#xA;&#xA;// Some test expectation...&#xA;&#xA;stubRequest(@&#34;POST&#34;, @&#34;https://api.example.com/authorize/&#34;).&#xA;andReturn(200);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unexpected requests&lt;/h3&gt; &#xA;&lt;p&gt;If some request is made but it wasn&#39;t stubbed, Nocilla won&#39;t let that request hit the real world. In that case your test should fail. At this moment Nocilla will raise an exception with a meaningful message about the error and how to solve it, including a snippet of code on how to stub the unexpected request.&lt;/p&gt; &#xA;&lt;h3&gt;Testing asynchronous requests&lt;/h3&gt; &#xA;&lt;p&gt;When testing asynchrounous requests your request will be sent on a different thread from the one on which your test is executed. It is important to keep this in mind, and design your test in such a way that is has enough time to finish. For instance &lt;code&gt;tearDown()&lt;/code&gt; when using &lt;code&gt;XCTest&lt;/code&gt; and &lt;code&gt;afterEach()&lt;/code&gt; when using &lt;a href=&#34;https://github.com/Quick/Quick&#34;&gt;Quick&lt;/a&gt; and &lt;a href=&#34;https://github.com/Quick/Nimble&#34;&gt;Nimble&lt;/a&gt; will cause the request never to complete.&lt;/p&gt; &#xA;&lt;h2&gt;Who uses Nocilla.&lt;/h2&gt; &#xA;&lt;h3&gt;Submit a PR to add your company here!&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.messagebird.com&#34;&gt;MessageBird&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.groupon.com&#34;&gt;Groupon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.pixable.com&#34;&gt;Pixable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jackthreads.com&#34;&gt;Jackthreads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.shopkeep.com&#34;&gt;ShopKeep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.venmo.com&#34;&gt;Venmo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.lighthouselabs.co.uk&#34;&gt;Lighthouse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ge.com/digital/&#34;&gt;GE Digital&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jobandtalent.com&#34;&gt;Jobandtalent&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/InfiniteLoopDK/ILTesting&#34;&gt;ILTesting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs&#34;&gt;OHHTTPStubs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch&lt;/li&gt; &#xA; &lt;li&gt;Create new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>muxinc/mux-stats-sdk-avplayer</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/muxinc/mux-stats-sdk-avplayer</id>
    <link href="https://github.com/muxinc/mux-stats-sdk-avplayer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mux integration with `AVPlayer` for iOS Native Applications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mux-stats-sdk-avplayer&lt;/h1&gt; &#xA;&lt;p&gt;Mux integration with &lt;code&gt;AVPlayer&lt;/code&gt; and &lt;code&gt;AVPlayerLayer&lt;/code&gt; for iOS native applications.&lt;/p&gt; &#xA;&lt;p&gt;This integration is built on top of &lt;a href=&#34;https://github.com/muxinc/stats-sdk-objc&#34;&gt;Mux&#39;s core Objective-C library&lt;/a&gt;, allowing thinner wrappers for each new player, such as any third-party players that do not use (or expose) an underlying &lt;code&gt;AVPlayer&lt;/code&gt; and/or &lt;code&gt;AVPlayerLayer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Integration Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Full integration instructions can be found here: &lt;a href=&#34;https://docs.mux.com/docs/avplayer-integration-guide&#34;&gt;https://docs.mux.com/docs/avplayer-integration-guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample apps&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;apps/DemoApp - Objective C demo&lt;/li&gt; &#xA; &lt;li&gt;apps/video-demo - Swift demo&lt;/li&gt; &#xA; &lt;li&gt;apps/TvDemoApp - Apple TV demo&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wix/DTXLoggingInfra</title>
    <updated>2022-05-30T01:47:30Z</updated>
    <id>tag:github.com,2022-05-30:/wix/DTXLoggingInfra</id>
    <link href="https://github.com/wix/DTXLoggingInfra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Logging infrastructure for Apple platforms&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DTXLoggingInfra&lt;/h1&gt; &#xA;&lt;p&gt;Logging infrastructure for Apple platforms&lt;/p&gt;</summary>
  </entry>
</feed>