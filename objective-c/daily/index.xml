<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-25T01:37:41Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joeldev/JLRoutes</title>
    <updated>2022-10-25T01:37:41Z</updated>
    <id>tag:github.com,2022-10-25:/joeldev/JLRoutes</id>
    <link href="https://github.com/joeldev/JLRoutes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;URL routing library for iOS with a simple block-based API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JLRoutes&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/JLRoutes&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/JLRoutes.svg?style=flat&#34; alt=&#34;Platforms&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/JLRoutes&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/JLRoutes.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/joeldev/JLRoutes&#34;&gt;&lt;img src=&#34;https://travis-ci.org/joeldev/JLRoutes.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/JLRoutes&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/at/JLRoutes.svg?maxAge=2592000&#34; alt=&#34;Apps&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;What is it?&lt;/h3&gt; &#xA;&lt;p&gt;JLRoutes is a URL routing library with a simple block-based API. It is designed to make it very easy to handle complex URL schemes in your application with minimal code.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;JLRoutes is available for installation using &lt;a href=&#34;https://cocoapods.org/pods/JLRoutes&#34;&gt;CocoaPods&lt;/a&gt; or Carthage (add &lt;code&gt;github &#34;joeldev/JLRoutes&#34;&lt;/code&gt; to your &lt;code&gt;Cartfile&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;JLRoutes 2.x require iOS 8.0+ or macOS 10.10+. If you need to support iOS 7 or macOS 10.9, please use version 1.6.4 (which is the last 1.x release).&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Documentation is available &lt;a href=&#34;http://cocoadocs.org/docsets/JLRoutes/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html#//apple_ref/doc/uid/TP40007072-CH6-SW2&#34;&gt;Configure your URL schemes in Info.plist.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&#xA;{&#xA;  JLRoutes *routes = [JLRoutes globalRoutes];&#xA;&#xA;  [routes addRoute:@&#34;/user/view/:userID&#34; handler:^BOOL(NSDictionary *parameters) {&#xA;    NSString *userID = parameters[@&#34;userID&#34;]; // defined in the route by specifying &#34;:userID&#34;&#xA;&#xA;    // present UI for viewing user with ID &#39;userID&#39;&#xA;&#xA;    return YES; // return YES to say we have handled the route&#xA;  }];&#xA;&#xA;  return YES;&#xA;}&#xA;&#xA;- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&amp;lt;NSString *, id&amp;gt; *)options&#xA;{&#xA;  return [JLRoutes routeURL:url];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Routes can also be registered with subscripting syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;JLRoutes.globalRoutes[@&#34;/user/view/:userID&#34;] = ^BOOL(NSDictionary *parameters) {&#xA;  // ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After adding a route for &lt;code&gt;/user/view/:userID&lt;/code&gt;, the following call will cause the handler block to be called with a dictionary containing &lt;code&gt;@&#34;userID&#34;: @&#34;joeldev&#34;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSURL *viewUserURL = [NSURL URLWithString:@&#34;myapp://user/view/joeldev&#34;];&#xA;[JLRoutes routeURL:viewUserURL];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The Parameters Dictionary&lt;/h3&gt; &#xA;&lt;p&gt;The parameters dictionary always contains at least the following three keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;JLRouteURL&#34;:  &#34;(the NSURL that caused this block to be fired)&#34;,&#xA;  &#34;JLRoutePattern&#34;: &#34;(the actual route pattern string)&#34;,&#xA;  &#34;JLRouteScheme&#34;: &#34;(the route scheme, defaults to JLRoutesGlobalRoutesScheme)&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The JLRouteScheme key refers to the scheme that the matched route lives in. &lt;a href=&#34;https://github.com/joeldev/JLRoutes#scheme-namespaces&#34;&gt;Read more about schemes.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See JLRoutes.h for the list of constants.&lt;/p&gt; &#xA;&lt;h3&gt;Handler Block Chaining&lt;/h3&gt; &#xA;&lt;p&gt;The handler block is expected to return a boolean for if it has handled the route or not. If the block returns &lt;code&gt;NO&lt;/code&gt;, JLRoutes will behave as if that route is not a match and it will continue looking for a match. A route is considered to be a match if the pattern string matches &lt;strong&gt;and&lt;/strong&gt; the block returns &lt;code&gt;YES&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is also important to note that if you pass nil for the handler block, an internal handler block will be created that simply returns &lt;code&gt;YES&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Global Configuration&lt;/h3&gt; &#xA;&lt;p&gt;There are multiple global configuration options available to help customize JLRoutes behavior for a particular use-case. All options only take affect for the next operation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;/// Configures verbose logging. Defaults to NO.&#xA;+ (void)setVerboseLoggingEnabled:(BOOL)loggingEnabled;&#xA;&#xA;/// Configures if &#39;+&#39; should be replaced with spaces in parsed values. Defaults to YES.&#xA;+ (void)setShouldDecodePlusSymbols:(BOOL)shouldDecode;&#xA;&#xA;/// Configures if URL host is always considered to be a path component. Defaults to NO.&#xA;+ (void)setAlwaysTreatsHostAsPathComponent:(BOOL)treatsHostAsPathComponent;&#xA;&#xA;/// Configures the default class to use when creating route definitions. Defaults to JLRRouteDefinition.&#xA;+ (void)setDefaultRouteDefinitionClass:(Class)routeDefinitionClass;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are all configured at the &lt;code&gt;JLRoutes&lt;/code&gt; class level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[JLRoutes setAlwaysTreatsHostAsPathComponent:YES];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More Complex Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[[JLRoutes globalRoutes] addRoute:@&#34;/:object/:action/:primaryKey&#34; handler:^BOOL(NSDictionary *parameters) {&#xA;  NSString *object = parameters[@&#34;object&#34;];&#xA;  NSString *action = parameters[@&#34;action&#34;];&#xA;  NSString *primaryKey = parameters[@&#34;primaryKey&#34;];&#xA;  // stuff&#xA;  return YES;&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This route would match things like &lt;code&gt;/user/view/joeldev&lt;/code&gt; or &lt;code&gt;/post/edit/123&lt;/code&gt;. Let&#39;s say you called &lt;code&gt;/post/edit/123&lt;/code&gt; with some URL params as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSURL *editPost = [NSURL URLWithString:@&#34;myapp://post/edit/123?debug=true&amp;amp;foo=bar&#34;];&#xA;[JLRoutes routeURL:editPost];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The parameters dictionary that the handler block receives would contain the following key/value pairs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;object&#34;: &#34;post&#34;,&#xA;  &#34;action&#34;: &#34;edit&#34;,&#xA;  &#34;primaryKey&#34;: &#34;123&#34;,&#xA;  &#34;debug&#34;: &#34;true&#34;,&#xA;  &#34;foo&#34;: &#34;bar&#34;,&#xA;  &#34;JLRouteURL&#34;: &#34;myapp://post/edit/123?debug=true&amp;amp;foo=bar&#34;,&#xA;  &#34;JLRoutePattern&#34;: &#34;/:object/:action/:primaryKey&#34;,&#xA;  &#34;JLRouteScheme&#34;: &#34;JLRoutesGlobalRoutesScheme&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Schemes&lt;/h3&gt; &#xA;&lt;p&gt;JLRoutes supports setting up routes within a specific URL scheme. Routes that are set up within a scheme can only be matched by URLs that use a matching URL scheme. By default, all routes go into the global scheme.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[[JLRoutes globalRoutes] addRoute:@&#34;/foo&#34; handler:^BOOL(NSDictionary *parameters) {&#xA;  // This block is called if the scheme is not &#39;thing&#39; or &#39;stuff&#39; (see below)&#xA;  return YES;&#xA;}];&#xA;&#xA;[[JLRoutes routesForScheme:@&#34;thing&#34;] addRoute:@&#34;/foo&#34; handler:^BOOL(NSDictionary *parameters) {&#xA;  // This block is called for thing://foo&#xA;  return YES;&#xA;}];&#xA;&#xA;[[JLRoutes routesForScheme:@&#34;stuff&#34;] addRoute:@&#34;/foo&#34; handler:^BOOL(NSDictionary *parameters) {&#xA;  // This block is called for stuff://foo&#xA;  return YES;&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example shows that you can declare the same routes in different schemes and handle them with different callbacks on a per-scheme basis.&lt;/p&gt; &#xA;&lt;p&gt;Continuing with this example, if you were to add the following route:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[[JLRoutes globalRoutes] addRoute:@&#34;/global&#34; handler:^BOOL(NSDictionary *parameters) {&#xA;  return YES;&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then try to route the URL &lt;code&gt;thing://global&lt;/code&gt;, it would not match because that route has not been declared within the &lt;code&gt;thing&lt;/code&gt; scheme but has instead been declared within the global scheme (which we&#39;ll assume is how the developer wants it). However, you can easily change this behavior by setting the following property to &lt;code&gt;YES&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[JLRoutes routesForScheme:@&#34;thing&#34;].shouldFallbackToGlobalRoutes = YES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This tells JLRoutes that if a URL cannot be routed within the &lt;code&gt;thing&lt;/code&gt; scheme (aka, it starts with &lt;code&gt;thing:&lt;/code&gt; but no appropriate route can be found), try to recover by looking for a matching route in the global routes scheme as well. After setting that property to &lt;code&gt;YES&lt;/code&gt;, the URL &lt;code&gt;thing://global&lt;/code&gt; would be routed to the &lt;code&gt;/global&lt;/code&gt; handler block.&lt;/p&gt; &#xA;&lt;h3&gt;Wildcards&lt;/h3&gt; &#xA;&lt;p&gt;JLRoutes supports setting up routes that will match an arbitrary number of path components at the end of the routed URL. An array containing the additional path components will be added to the parameters dictionary with the key &lt;code&gt;JLRouteWildcardComponentsKey&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following route would be triggered for any URL that started with &lt;code&gt;/wildcard/&lt;/code&gt;, but would be rejected by the handler if the next component wasn&#39;t &lt;code&gt;joker&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[[JLRoutes globalRoutes] addRoute:@&#34;/wildcard/*&#34; handler:^BOOL(NSDictionary *parameters) {&#xA;  NSArray *pathComponents = parameters[JLRouteWildcardComponentsKey];&#xA;  if (pathComponents.count &amp;gt; 0 &amp;amp;&amp;amp; [pathComponents[0] isEqualToString:@&#34;joker&#34;]) {&#xA;    // the route matched; do stuff&#xA;    return YES;&#xA;  }&#xA;&#xA;  // not interested unless &#39;joker&#39; is in it&#xA;  return NO;&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional Routes&lt;/h3&gt; &#xA;&lt;p&gt;JLRoutes supports setting up routes with optional parameters. At the route registration moment, JLRoute will register multiple routes with all combinations of the route with the optional parameters and without the optional parameters. For example, for the route &lt;code&gt;/the(/foo/:a)(/bar/:b)&lt;/code&gt;, it will register the following routes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/the/foo/:a/bar/:b&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/the/foo/:a&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/the/bar/:b&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/the&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Querying Routes&lt;/h3&gt; &#xA;&lt;p&gt;There are multiple ways to query routes for programmatic uses (such as powering a debug UI). There&#39;s a method to get the full set of routes across all schemes and another to get just the specific list of routes for a given scheme. One note, you&#39;ll have to import &lt;code&gt;JLRRouteDefinition.h&lt;/code&gt; as it is forward-declared.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;/// All registered routes, keyed by scheme&#xA;+ (NSDictionary &amp;lt;NSString *, NSArray &amp;lt;JLRRouteDefinition *&amp;gt; *&amp;gt; *)allRoutes;&#xA;&#xA;/// Return all registered routes in the receiving scheme namespace.&#xA;- (NSArray &amp;lt;JLRRouteDefinition *&amp;gt; *)routes;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handler Block Helper&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;JLRRouteHandler&lt;/code&gt; is a helper class for creating handler blocks intended to be passed to an addRoute: call.&lt;/p&gt; &#xA;&lt;p&gt;This is specifically useful for cases in which you want a separate object or class to be the handler for a deeplink route. An example might be a view controller that you want to instantiate and present in response to a deeplink being opened.&lt;/p&gt; &#xA;&lt;p&gt;In order to take advantage of this helper, your target class must conform to the &lt;code&gt;JLRRouteHandlerTarget&lt;/code&gt; protocol. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface MyTargetViewController : UIViewController &amp;lt;JLRRouteHandlerTarget&amp;gt;&#xA;&#xA;@property (nonatomic, copy) NSDictionary &amp;lt;NSString *, id&amp;gt; *parameters;&#xA;&#xA;@end&#xA;&#xA;&#xA;@implementation MyTargetViewController&#xA;&#xA;- (instancetype)initWithRouteParameters:(NSDictionary &amp;lt;NSString *, id&amp;gt; *)parameters&#xA;{&#xA;  self = [super init];&#xA;&#xA;  _parameters = [parameters copy]; // hold on to do something with later on&#xA;&#xA;  return self;&#xA;}&#xA;&#xA;- (void)viewDidLoad&#xA;{&#xA;  [super viewDidLoad];&#xA;  // do something interesting with self.parameters, initialize views, etc...&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To hook this up via &lt;code&gt;JLRRouteHandler&lt;/code&gt;, you could do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;id handlerBlock = [JLRRouteHandler handlerBlockForTargetClass:[MyTargetViewController class] completion:^BOOL (MyTargetViewController *viewController) {&#xA;  // Push the created view controller onto the nav controller&#xA;  [self.navigationController pushViewController:viewController animated:YES];&#xA;  return YES;&#xA;}];&#xA;&#xA;[[JLRoutes globalRoutes] addRoute:@&#34;/some/route&#34; handler:handlerBlock];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s also a &lt;code&gt;JLRRouteHandler&lt;/code&gt; convenience method for easily routing to an existing instance of an object vs creating a new instance. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;MyTargetViewController *rootController = ...; // some object that exists and conforms to JLRRouteHandlerTarget.&#xA;id handlerBlock = [JLRRouteHandler handlerBlockForWeakTarget:rootController];&#xA;&#xA;[[JLRoutes globalRoutes] addRoute:@&#34;/some/route&#34; handler:handlerBlock];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the route is matched, it will call a method on the target object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)handleRouteWithParameters:(NSDictionary&amp;lt;NSString *, id&amp;gt; *)parameters;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These two mechanisms (weak target and class target) provide a few other ways to organize deep link handlers without writing boilerplate code for each handler or otherwise having to solve that for each app that integrates JLRoutes.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Route Parsing&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to control how routes are parsed by subclassing &lt;code&gt;JLRRouteDefinition&lt;/code&gt; and using the &lt;code&gt;addRoute:&lt;/code&gt; method to add instances of your custom subclass.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Custom route defintion that always matches&#xA;@interface AlwaysMatchRouteDefinition : JLRRouteDefinition&#xA;@end&#xA;&#xA;&#xA;@implementation AlwaysMatchRouteDefinition&#xA;&#xA;- (JLRRouteResponse *)routeResponseForRequest:(JLRRouteRequest *)request&#xA;{&#xA;  // This method is called when JLRoutes is trying to determine if we are a match for the given request object.&#xA;&#xA;  // Create the parameters dictionary&#xA;  NSDictionary *variables = [self routeVariablesForRequest:request];&#xA;  NSDictionary *matchParams = [self matchParametersForRequest:request routeVariables:variables];&#xA;&#xA;  // Return a valid match!&#xA;  return [JLRRouteResponse validMatchResponseWithParameters:matchParams];&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This route can now be created an added:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;id handlerBlock = ... // assume exists&#xA;AlwaysMatchRouteDefinition *alwaysMatch = [[AlwaysMatchRouteDefinition alloc] initWithPattern:@&#34;/foo&#34; priority:0 handlerBlock:handlerBlock];&#xA;[[JLRoutes globalRoutes] addRoute:alwaysMatch];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, if you&#39;ve written a custom route definition and want JLRoutes to always use it when adding a route (using one of the &lt;code&gt;addRoute:&lt;/code&gt; methods that takes in raw parameters), use &lt;code&gt;+setDefaultRouteDefinitionClass:&lt;/code&gt; to configure it as the routing definition class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[JLRoutes setDefaultRouteDefinitionClass:[MyCustomRouteDefinition class]];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;BSD 3-clause. See the &lt;a href=&#34;https://raw.githubusercontent.com/joeldev/JLRoutes/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Salesforce-Async-Messaging/Swift-Package-ServiceChat</title>
    <updated>2022-10-25T01:37:41Z</updated>
    <id>tag:github.com,2022-10-25:/Salesforce-Async-Messaging/Swift-Package-ServiceChat</id>
    <link href="https://github.com/Salesforce-Async-Messaging/Swift-Package-ServiceChat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift packages for the Embedded Services Chat SDK.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Service Chat Package File&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages&#34;&gt;Swift package file&lt;/a&gt; for use with the Chat component of the &lt;a href=&#34;https://developer.salesforce.com/docs/atlas.en-us.service_sdk_ios.meta/service_sdk_ios/servicesdk_ios_dev_guide.htm&#34;&gt;Embedded Service SDK&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Countly/countly-sdk-ios</title>
    <updated>2022-10-25T01:37:41Z</updated>
    <id>tag:github.com,2022-10-25:/Countly/countly-sdk-ios</id>
    <link href="https://github.com/Countly/countly-sdk-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Countly Product Analytics iOS SDK with macOS, watchOS and tvOS support.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Countly iOS SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://support.count.ly/hc/en-us/articles/360037753511-iOS-watchOS-tvOS-macOS#supported-system-versions&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/Countly.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Countly/countly-sdk-ios/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-lightgrey.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Countly/countly-sdk-ios/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Countly/countly-sdk-ios.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://support.count.ly/hc/en-us/articles/360037753511-iOS-watchOS-tvOS-macOS#cocoapods&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Countly.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://support.count.ly/hc/en-us/articles/360037753511-iOS-watchOS-tvOS-macOS#carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Countly?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://count.ly&#34;&gt;Countly&lt;/a&gt; is a product analytics solution and innovation enabler that helps teams track product performance and customer journey and behavior across &lt;a href=&#34;https://count.ly/mobile-analytics&#34;&gt;mobile&lt;/a&gt;, &lt;a href=&#34;http://count.ly/web-analytics&#34;&gt;web&lt;/a&gt;, and &lt;a href=&#34;https://count.ly/desktop-analytics&#34;&gt;desktop&lt;/a&gt; applications. &lt;a href=&#34;https://count.ly/your-data-your-rules&#34;&gt;Ensuring privacy by design&lt;/a&gt;, Countly allows you to innovate and enhance your products to provide personalized and customized customer experiences, and meet key business and revenue goals.&lt;/p&gt; &#xA;&lt;p&gt;Track, measure, and take action - all without leaving Countly.&lt;/p&gt; &#xA;&lt;h2&gt;About this SDK&lt;/h2&gt; &#xA;&lt;p&gt;This repository includes Countly iOS SDK with watchOS, tvOS &amp;amp; macOS support. The minimum deployment targets are &lt;code&gt;iOS 10.0&lt;/code&gt;, &lt;code&gt;watchOS 4.0&lt;/code&gt;, &lt;code&gt;tvOS 10.0&lt;/code&gt; , &lt;code&gt;macOS 10.14&lt;/code&gt;, and it requires &lt;code&gt;Xcode 13.0+&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://support.count.ly/hc/en-us/articles/360037753511-iOS-watchOS-tvOS-macOS&#34;&gt;Countly iOS SDK documentation&lt;/a&gt; for integration and details.&lt;/p&gt; &#xA;&lt;h2&gt;Sample iOS Application&lt;/h2&gt; &#xA;&lt;p&gt;We also have a useful &lt;a href=&#34;https://github.com/Countly/countly-sample-ios&#34;&gt;sample iOS application&lt;/a&gt; which demonstrates how to use this SDK in depth.&lt;br&gt; It includes iOS (both Objective-C and Swift), watchOS, tvOS and macOS sample projects.&lt;br&gt; Feel free to use them as a reference while you develop your application and also for easily testing your Countly Server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://count.ly/github/countly-ios-sample-app.png&#34; alt=&#34;iOS-sample-app&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Security is very important to us. If you discover any issue regarding security, please disclose the information responsibly by sending an email to &lt;a href=&#34;mailto:security@count.ly&#34;&gt;security@count.ly&lt;/a&gt; and &lt;strong&gt;not by creating a GitHub issue&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Other Countly Resources&lt;/h2&gt; &#xA;&lt;p&gt;This SDK needs one of the following counterpart Countly Server editions to work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Countly/countly-server&#34;&gt;Countly Community Edition&lt;/a&gt; (downloadable from GitHub)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://count.ly/product&#34;&gt;Countly Enterprise Edition&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information about Countly Enterprise Edition, please see &lt;a href=&#34;https://count.ly/pricing#compare-editions&#34;&gt;comparison of Countly editions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are also other &lt;a href=&#34;https://support.count.ly/hc/en-us/articles/360037236571-Downloading-Installing-SDKs&#34;&gt;Countly SDK repositories&lt;/a&gt; both official and community supported.&lt;/p&gt; &#xA;&lt;h2&gt;How can I help you with your efforts?&lt;/h2&gt; &#xA;&lt;p&gt;Glad you asked. We need ideas, feedbacks and constructive comments.&lt;br&gt; All your suggestions will be taken care with upmost importance.&lt;br&gt; We are on &lt;a href=&#34;https://twitter.com/gocountly&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://www.facebook.com/Countly&#34;&gt;Facebook&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/user/GoCountly&#34;&gt;YouTube&lt;/a&gt; if you would like to keep up with our fast progress!&lt;/p&gt; &#xA;&lt;h2&gt;Badges&lt;/h2&gt; &#xA;&lt;p&gt;If you like Countly, &lt;a href=&#34;https://count.ly/brand-assets&#34;&gt;why not use one of our badges&lt;/a&gt; and give a link back to us, so others could know about this wonderful platform?&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://count.ly/f/badge&#34; rel=&#34;nofollow&#34;&gt;&lt;img style=&#34;width:145px;height:60px&#34; src=&#34;https://count.ly/badges/dark.svg?v2&#34; alt=&#34;Countly - Product Analytics&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&#34;https://count.ly/f/badge&#34; rel=&#34;nofollow&#34;&amp;gt;&amp;lt;img style=&#34;width:145px;height:60px&#34; src=&#34;https://count.ly/badges/dark.svg&#34; alt=&#34;Countly - Product Analytics&#34; /&amp;gt;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://count.ly/f/badge&#34; rel=&#34;nofollow&#34;&gt;&lt;img style=&#34;width:145px;height:60px&#34; src=&#34;https://count.ly/badges/light.svg?v2&#34; alt=&#34;Countly - Product Analytics&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&#34;https://count.ly/f/badge&#34; rel=&#34;nofollow&#34;&amp;gt;&amp;lt;img style=&#34;width:145px;height:60px&#34; src=&#34;https://count.ly/badges/light.svg&#34; alt=&#34;Countly - Product Analytics&#34; /&amp;gt;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Have any questions?&lt;br&gt; Visit &lt;a href=&#34;https://support.count.ly/hc/en-us/community/topics&#34; title=&#34;Countly Community Area&#34;&gt;Countly Community Area&lt;/a&gt; or join our &lt;a href=&#34;https://slack.count.ly&#34;&gt;Slack community&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>