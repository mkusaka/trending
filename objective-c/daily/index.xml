<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-12T01:34:28Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Overcoat/Overcoat</title>
    <updated>2024-02-12T01:34:28Z</updated>
    <id>tag:github.com,2024-02-12:/Overcoat/Overcoat</id>
    <link href="https://github.com/Overcoat/Overcoat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The perfect accessory for Mantle and AFNetworking.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Overcoat&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/Overcoat/Overcoat&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Overcoat/Overcoat.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Overcoat&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Overcoat.svg?sanitize=true&#34; alt=&#34;Cocoapods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;We are finding maintainers, contact @sodastsai :)&lt;/h3&gt; &#xA;&lt;p&gt;Overcoat is a small but powerful library that makes creating REST clients simple and fun. It provides a simple API for making requests and mapping responses to model objects.&lt;/p&gt; &#xA;&lt;p&gt;Overcoat is built on top of &lt;a href=&#34;https://github.com/AFNetworking/AFNetworking&#34;&gt;AFNetworking&lt;/a&gt; and uses &lt;a href=&#34;https://github.com/Mantle/Mantle&#34;&gt;Mantle&lt;/a&gt; to map responses into plain or Core Data model objects.&lt;/p&gt; &#xA;&lt;p&gt;If you need to learn more about Mantle, we recommend these resources:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mantle/Mantle/raw/master/README.md&#34;&gt;Introduction&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/gonzalezreal/better-web-clients-with-mantle-and-afnetworking&#34;&gt;Better Web Clients with Mantle and AFNetworking&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Overcoat 4.0&lt;/strong&gt; is the latest major release and introduces several API-breaking changes to support envelop and error responses, Core Data serialization, and a new method to specify how to map responses to model objects.&lt;/p&gt; &#xA;&lt;p&gt;If you are upgraded from Overcoat 3.x, check &lt;a href=&#34;https://github.com/Overcoat/Overcoat/raw/master/CHANGELOG.md#migrate-from-3x&#34;&gt;the migration note&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check who&#39;s using Overcoat &lt;a href=&#34;https://github.com/Overcoat/Overcoat/wiki/Who-uses-Overcoat&#34;&gt;here&lt;/a&gt;. You&#39;re welcome to add your project/app into this wiki page.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Overcoat supports OS X 10.9+ and iOS 7.0+.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;Podfile&lt;/code&gt; and run &lt;code&gt;$ pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Overcoat&#39;, &#39;~&amp;gt; 4.0.0-beta.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t have CocoaPods installed or integrated into your project, you can learn how to do so &lt;a href=&#34;http://cocoapods.org&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;Cartfile&lt;/code&gt; and run &lt;code&gt;$ carthage update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;Overcoat/Overcoat&#34; &#34;4.0.0-beta.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t have Carthage installed or integrated into your project, you can learn how to do so &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Code&lt;/h2&gt; &#xA;&lt;p&gt;Overcoat includes a simple &lt;a href=&#34;https://dev.twitter.com/docs/api/1.1&#34;&gt;Twitter&lt;/a&gt; client that shows some new features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mapping model classes to resource paths.&lt;/li&gt; &#xA; &lt;li&gt;Specifying an error model class.&lt;/li&gt; &#xA; &lt;li&gt;Core Data serialization.&lt;/li&gt; &#xA; &lt;li&gt;Promises.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find the sample code &lt;a href=&#34;https://github.com/Overcoat/TwitterTimelineExample&#34;&gt;here&lt;/a&gt;. Note that you&#39;ll need to run &lt;code&gt;pod install&lt;/code&gt; to install all the dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Creating a Client Class&lt;/h3&gt; &#xA;&lt;p&gt;Overcoat provides 2 different classes to subclass when creating your own clients:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Class&lt;/th&gt; &#xA;   &lt;th&gt;Usage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OVCHTTPSessionManager&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Using with NSURLSession and Mantle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OVCManagedHTTPSessionManager&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Using with NSURLSession, Mantle, and CoreData. This is also a subclass of &lt;code&gt;OVCHTTPSessionManager&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Both classes have identical APIs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;Overcoat/Overcoat.h&amp;gt;&#xA;&#xA;@interface TwitterClient : OVCHTTPSessionManager&#xA;...&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specifying Model Classes&lt;/h3&gt; &#xA;&lt;p&gt;To specify how responses should be mapped to model classes you must override &lt;code&gt;+modelClassesByResourcePath&lt;/code&gt; and return a dictionary mapping resource paths to model classes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;+ (NSDictionary *)modelClassesByResourcePath {&#xA;    return @{&#xA;        @&#34;statuses/*&#34;: [Tweet class],&#xA;        @&#34;users/*&#34;: [TwitterUser class],&#xA;        @&#34;friends/ids.json&#34;: [UserIdentifierCollection class],&#xA;        @&#34;followers/ids.json&#34;: [UserIdentifierCollection class]&#xA;    };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You don&#39;t need to specify the full path, and you can use &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; to match any text or &lt;code&gt;#&lt;/code&gt; to match only digits.&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt;, they are &lt;strong&gt;strict path matchings&lt;/strong&gt;, so &lt;strong&gt;the number of path components must be equal&lt;/strong&gt;. The &lt;code&gt;**&lt;/code&gt; just matches any text and has no path components number limitation.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Match String&lt;/th&gt; &#xA;   &lt;th&gt;Path&lt;/th&gt; &#xA;   &lt;th&gt;Result&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/user_timeline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Matched&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/#&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/user_timeline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Missed (wrong type, the path component after &lt;code&gt;statuses&lt;/code&gt; should be dights only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/retweets/12345&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Missed (wrong number of path components, there should be only one path component after &lt;code&gt;statuses&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/*/*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/retweets/12345&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Matched&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/**&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/retweets/12345&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Matched&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/**&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/retweets/12345/extra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Matched (the number of path components doesn&#39;t matter)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/retweets/*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/retweets/12345&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Matched&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/retweets/#&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;statuses/retweets/12345&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Matched&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Also you can specify different model classes by request method or response status code, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;+ (NSDictionary *)modelClassesByResourcePath {&#xA;    return @{&#xA;        @&#34;statuses/*&#34;: [Tweet class],&#xA;        @&#34;users/*&#34;: @{&#xA;            @&#34;PUT&#34;: [UpdatedTwitterUser class],  // For PUT request method,&#xA;            @&#34;201&#34;: [NewCreatedTwitterUser class],  // For 201 response status code&#xA;            @&#34;*&#34;: [TwitterUser class],  // For all other cases, as fallback&#xA;        },&#xA;        @&#34;friends/ids.json&#34;: [UserIdentifierCollection class],&#xA;        @&#34;followers/ids.json&#34;: [UserIdentifierCollection class]&#xA;    };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the documentation of &lt;code&gt;OVCURLMatcherNode&lt;/code&gt; for further explaination.&lt;/p&gt; &#xA;&lt;h3&gt;Envelop and Error Responses&lt;/h3&gt; &#xA;&lt;p&gt;Different REST APIs have different ways of dealing with status and other metadata.&lt;/p&gt; &#xA;&lt;p&gt;Pure REST services like &lt;strong&gt;Twitter&lt;/strong&gt; use HTTP status codes and a specific JSON response to communicate errors; and HTTP headers for other metadata like rate limits. For these kind of services, you may want to override &lt;code&gt;+errorModelClassesByResourcePath&lt;/code&gt; to map error responses into your own model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;+ (Class)errorModelClassesByResourcePath {&#xA;    return @{@&#34;**&#34;: [TwitterErrorResponse class]};&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other services like &lt;strong&gt;App.net&lt;/strong&gt; use an envelop response, which is a top level JSON response containing the data requested and additional metadata. For these kind of services, you must create your own &lt;code&gt;OVCResponse&lt;/code&gt; subclass and specify the data key path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface AppDotNetResponse : OVCResponse&#xA;...&#xA;@end&#xA;&#xA;@implementation AppDotNetResponse&#xA;+ (NSString *)resultKeyPathForJSONDictionary:(NSDictionary *)JSONDictionary {&#xA;    return @&#34;data&#34;;&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then specify which response class to use in your client by overriding &lt;code&gt;+responseClassesByResourcePath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;+ (Class)responseClassesByResourcePath {&#xA;    return @{@&#34;**&#34;: [AppDotNetResponse class]};&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Core Data Serialization&lt;/h3&gt; &#xA;&lt;p&gt;To support CoreData serialization, you have to use &lt;code&gt;Overcoat+CoreData&lt;/code&gt; extension if you&#39;re using CocoaPods&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Overcoat+CoreData&#39;, &#39;~&amp;gt; 4.0&#39;  # Use this,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you are using Carthage, you also have to add &lt;code&gt;OvercoatCoreData.framework&lt;/code&gt; to your project.&lt;/p&gt; &#xA;&lt;p&gt;And the main classes would be changed to &lt;code&gt;OVCManaged&lt;/code&gt; prefixed one. (For instance, &lt;code&gt;OVCHTTPSessionManager&lt;/code&gt; -&amp;gt; &lt;code&gt;OVCManagedHTTPSessionManager&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;If you initialize your client with a valid &lt;code&gt;NSManagedObjectContext&lt;/code&gt;, it will automatically persist any model object(s) parsed from a response, if the model supports Core Data serialization (that is, implements &lt;code&gt;MTLManagedObjectSerializing&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Note that, if you provide a context with an &lt;code&gt;NSMainQueueConcurrencyType&lt;/code&gt;, a private context will be created to perform insertions in the background.&lt;/p&gt; &#xA;&lt;p&gt;You can see Core Data Serialization in action in the &lt;a href=&#34;https://github.com/Overcoat/TwitterTimelineExample&#34;&gt;provided example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Making HTTP Requests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Lookup Twitter users&#xA;NSDictionary *parameters = @{&#xA;    @&#34;screen_name&#34;: @&#34;gonzalezreal&#34;,&#xA;    @&#34;user_id&#34;: @&#34;42,3141592&#34;&#xA;};&#xA;&#xA;[twitterClient GET:@&#34;users/lookup.json&#34; parameters:parameters completion:^(OVCResponse *response, NSError *error) {&#xA;    NSArray *users = response.result; // This is an array of TwitterUser objects!&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that Overcoat automatically parses the JSON into model objects, that is, in this case &lt;code&gt;response.result&lt;/code&gt; contains an array of &lt;code&gt;TwitterUser&lt;/code&gt; objects.&lt;/p&gt; &#xA;&lt;h4&gt;ReactiveCocoa&lt;/h4&gt; &#xA;&lt;p&gt;From 2.0, Overcoat adds support for &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa&#34;&gt;ReactiveCocoa&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add ReactiveCocoa support, you have to use &lt;code&gt;Overcoat+ReactiveCocoa&lt;/code&gt; podspec if you&#39;re using CocoaPods. Or if you&#39;re using Carthage, add &lt;code&gt;OvercoatReactiveCocoa.framework&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now you can make HTTP requests and get cold signals to handle responses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;OvercoatReactiveCocoa/OvercoatReactiveCocoa.h&amp;gt;&#xA;...&#xA;[[twitterClient rac_GET:@&#34;users/lookup.json&#34; parameters:parameters] subscribeNext:^(OVCResponse *response) {&#xA;    ...&#xA;} error:^(NSError *e) {&#xA;    ...&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;PromiseKit&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re looking for a better way to handle asynchronous calls but you&#39;re not ready to embrace ReactiveCocoa, you may try &lt;a href=&#34;http://promisekit.org&#34;&gt;PromiseKit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add PromiseKit support, you have to use &lt;code&gt;Overcoat+PromiseKit&lt;/code&gt; podspec if you&#39;re using CocoaPods. Or if you&#39;re using Carthage, add &lt;code&gt;OvercoatPromiseKit.framework&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now you can get &lt;code&gt;PMKPromise&lt;/code&gt; objects when making HTTP requests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;OvercoatPromiseKit/OvercoatPromiseKit.h&amp;gt;&#xA;...&#xA;[twitterClient pmk_GET:@&#34;users/lookup.json&#34; parameters:parameters].then(^(OVCResponse *response) {&#xA;    return response.result;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing the library&lt;/h2&gt; &#xA;&lt;p&gt;In order to build the library and run unit tests, you will first need to install 2 tools: &lt;code&gt;cocoapods&lt;/code&gt; and &lt;code&gt;xctool&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cocoapods: &lt;a href=&#34;https://cocoapods.org&#34;&gt;https://cocoapods.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;xctool: &lt;a href=&#34;https://github.com/facebook/xctool&#34;&gt;https://github.com/facebook/xctool&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After you setup these tools (or you already have these tools), you could run tests via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;code&gt;Makefile&lt;/code&gt; to run other test target.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gonzalezreal&#34;&gt;Guillermo Gonzalez&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/gonzalezreal&#34;&gt;@gonzalezreal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sodastsai&#34;&gt;sodastsai&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/sodastsai&#34;&gt;@sodastsai&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Overcoat is available under the MIT license. See &lt;a href=&#34;https://github.com/gonzalezreal/Overcoat/raw/master/LICENSE&#34;&gt;LICENSE.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sumup/sumup-ios-sdk</title>
    <updated>2024-02-12T01:34:28Z</updated>
    <id>tag:github.com,2024-02-12:/sumup/sumup-ios-sdk</id>
    <link href="https://github.com/sumup/sumup-ios-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SumUp mPOS SDK - iOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#prerequisites&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platform-iOS-lightgrey.svg?style=flat-square&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sumup.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20by-SumUp-blue.svg?style=flat-square&#34; alt=&#34;Created&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Requires-iOS%2010+-red.svg?style=flat-square&#34; alt=&#34;Supports&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/CHANGELOG.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Version-4.4.0-yellowgreen.svg?style=flat-square&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-SumUp-brightgreen.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SumUpSDK.svg?style=flat-square&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository provides a native iOS SDK that enables you to integrate SumUp&#39;s proprietary card terminal(s) and its payment platform to accept credit and debit card payments (incl. VISA, MasterCard, American Express and more). SumUp&#39;s SDK communicates transparently to the card terminal(s) via Bluetooth (BLE 4.0) or an audio cable connection. Upon initiating a checkout, the SDK guides your user using appropriate screens through each step of the payment process. As part of the process, SumUp also provides the card terminal setup screen, along with the cardholder signature verification screen. The checkout result is returned with the relevant data for your records.&lt;/p&gt; &#xA;&lt;p&gt;No sensitive card data is ever passed through to or stored on the merchant’s phone. All data is encrypted by the card terminal, which has been fully certified to the highest industry standards (PCI, EMV I &amp;amp; II, Visa, MasterCard &amp;amp; Amex).&lt;/p&gt; &#xA;&lt;p&gt;For more information, please refer to &lt;a href=&#34;https://developer.sumup.com/&#34;&gt;SumUp API documentation.&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Registered for a merchant account via SumUp&#39;s &lt;a href=&#34;https://sumup.com/&#34;&gt;country websites&lt;/a&gt; (or received a test account).&lt;/li&gt; &#xA; &lt;li&gt;Received SumUp card terminal: Solo, Air, Air Lite, PIN+ terminal, Chip &amp;amp; Signature reader, or SumUp Air Register.&lt;/li&gt; &#xA; &lt;li&gt;Requested an Affiliate (Access) Key via &lt;a href=&#34;https://me.sumup.com/developers&#34;&gt;SumUp Dashboard&lt;/a&gt; for Developers.&lt;/li&gt; &#xA; &lt;li&gt;Deployment Target iOS 14.0 or later.&lt;/li&gt; &#xA; &lt;li&gt;Recommended to use on Xcode 14.2 and iOS SDK 15 or later.&lt;/li&gt; &#xA; &lt;li&gt;iPhone, iPad or iPod touch.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Starting with firmware version 1.0.1.84, Air card readers with serial numbers starting with 108, 109 or later require iOS SDK 4.3.0 and later. Please update to the latest iOS SDK version if you need to support these readers.&lt;/li&gt; &#xA; &lt;li&gt;From version 4.4.0 of the SDK, iOS 14 or later is required&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tipping&lt;/h3&gt; &#xA;&lt;p&gt;There are three modes for tipping:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;No tipping. Leave tipAmount set to nil when creating the SMPCheckoutRequest object.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Programmatic tipping via the tipAmount property. Ask the user in your own UI for an appropriate tip amount and then set the tipAmount property on SMPCheckoutRequest. This will be added to the total amount, but will be displayed to the user separately during checkout.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tip on Card Reader. TCR prompts the customer directly on the card reader&#39;s display for a tip amount, rather than prompting for a tip amount on the iPhone or iPad display.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Tip on Card Reader (TCR)&lt;/h4&gt; &#xA;&lt;p&gt;Important: Not all card readers support this feature. To find out if the feature is supported for the last-used card reader, you should always check SMPSumUpSDK.isTipOnCardReaderAvailable. You must handle this case yourself in order to avoid no tip from being prompted.&lt;/p&gt; &#xA;&lt;p&gt;To do this:&lt;/p&gt; &#xA;&lt;p&gt;Before calling SMPSumUpSDK checkoutWithRequest:fromViewController:completion:, check SMPSumUpSDK.isTipOnCardReaderAvailable:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If NO, you should prompt the user for a tip amount yourself and set tipAmount on SMPCheckoutRequest&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If YES, you may set tipOnCardReaderIfAvailable on SMPCheckoutRequest to YES. Do not prompt the user for a tip amount or set tipAmount if you do this.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#manual-integration&#34;&gt;Manual Integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#integration-via-cocoapods&#34;&gt;Integration via CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#integration-via-carthage&#34;&gt;Integration via Carthage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#integration-via-swift-pm&#34;&gt;Integration via Swift PM&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#supported-device-orientation&#34;&gt;Supported device orientation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#privacy-info-plist-keys&#34;&gt;Privacy Info plist keys&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#import-the-sdk&#34;&gt;Import the SDK&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#authenticate-app&#34;&gt;Authenticate app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#login&#34;&gt;Login&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#accept-card-payments&#34;&gt;Accept card payments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#update-checkout-preferences&#34;&gt;Update checkout preferences&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#out-of-scope&#34;&gt;Out of Scope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you want to support the SumUp Air Register, please also read our additional &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/AirRegister/README.md&#34;&gt;Air Register setup guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manual Integration&lt;/h3&gt; &#xA;&lt;p&gt;The SumUp SDK is provided as an XCFramework &lt;code&gt;SumUpSDK.xcframework&lt;/code&gt; that contains the headers and bundles bundles containing resources such as images and localizations. Please follow the steps below to prepare your project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Drag and drop the &lt;code&gt;SumUpSDK.xcframework&lt;/code&gt; to your Xcode project&#39;s &#34;Frameworks, Libraries, and Embedded Content&#34; on the General settings tab.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#privacy-info-plist-keys&#34;&gt;required Info.plist keys&lt;/a&gt; are present.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: You can use the &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/SampleApp/SumUpSDKSampleApp&#34;&gt;sample app&lt;/a&gt; that is provided with the SumUp SDK as a reference project. The Xcode project contains sample apps written in Objective-C and Swift. See &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#test-your-integration&#34;&gt;Test your integration&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Integration via CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;The SumUp SDK can be integrated via CocoaPods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target &#39;&amp;lt;Your Target Name&amp;gt;&#39; do&#xA;    pod &#39;SumUpSDK&#39;, &#39;~&amp;gt; 4.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure the &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#privacy-info-plist-keys&#34;&gt;required Info.plist keys&lt;/a&gt; are present.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about setting up your project for CocoaPods, please refer to the &lt;a href=&#34;https://cocoapods.org/#install&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Integration via Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Distributing XCFrameworks with the latest Carthage version (0.35.0) is not yet available. There is an open issue (&lt;a href=&#34;https://github.com/Carthage/Carthage/issues/2799&#34;&gt;#2799&lt;/a&gt;) to solve this. Once that issue is fixed, we expect Carthage to work again.&lt;/p&gt; &#xA;&lt;p&gt;The SumUp SDK can be integrated with Carthage by following the steps below:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; github &#34;sumup/sumup-ios-sdk&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update sumup-ios-sdk&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Drag and drop the &lt;code&gt;Carthage/Build/iOS/SumUpSDK.xcframework&lt;/code&gt; to your Xcode project&#39;s &#34;Frameworks, Libraries, and Embedded Content&#34; on the General settings tab.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure the &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#privacy-info-plist-keys&#34;&gt;required Info.plist keys&lt;/a&gt; are present.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To learn more about setting up your project for Carthage, please refer to the &lt;a href=&#34;https://github.com/Carthage/Carthage#if-youre-building-for-ios-tvos-or-watchos&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: See &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#test-your-integration&#34;&gt;Test your integration&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Integration via Swift PM&lt;/h3&gt; &#xA;&lt;p&gt;The latest Swift Package Manager version added support to &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages/distributing_binary_frameworks_as_swift_packages&#34;&gt;distribute binary frameworks as Swift Packages&lt;/a&gt;. Unfortunately there is a bug (&lt;a href=&#34;https://bugs.swift.org/browse/SR-13343&#34;&gt;Bug Report SR-13343&lt;/a&gt;), that adds the framework as a static library, not as an embedded dynamic framework. Follow this workaround to manage SumUp SDK versions via Swift PM:&lt;/p&gt; &#xA;&lt;p&gt;Requirement: Xcode 12 beta 6 (swift-tools-version:5.3)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the package dependency to the repository &lt;code&gt;https://github.com/sumup/sumup-ios-sdk&lt;/code&gt; (&lt;em&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency...&lt;/em&gt;) with the version &lt;code&gt;Up to Next Major: 4.0.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Leave the checkbox unchecked for the SumUpSDK at the integration popup (&lt;em&gt;Add Package to ...:&lt;/em&gt;) &lt;img src=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/README/setup_swiftpm_skipautointegrate.png&#34; alt=&#34;Swift PM - do not auto-integrate SDK&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;From the Project Navigator, drag and drop the &lt;code&gt;SumUpSDK/Referenced Binaries/SumUpSDK.xcframework&lt;/code&gt; to your Xcode project&#39;s &#34;Frameworks, Libraries, and Embedded Content&#34; on the General settings tab.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#privacy-info-plist-keys&#34;&gt;required Info.plist keys&lt;/a&gt; are present.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To learn more about adding Swift Package dependencies, please refer to the &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Test your integration&lt;/h3&gt; &#xA;&lt;p&gt;In your debug setup you can call &lt;code&gt;+[SMPSumUpSDK testSDKIntegration]&lt;/code&gt;. It will run various checks and print its findings to the console. Please do not call it in your Release build.&lt;/p&gt; &#xA;&lt;h3&gt;Supported device orientation&lt;/h3&gt; &#xA;&lt;p&gt;The SDK supports all device orientations on iPad and portrait on iPhone. Feel free to support other orientations on iPhone but please keep in mind that the SDK&#39;s UI will be presented in portrait on iPhone. See &lt;code&gt;UISupportedInterfaceOrientations&lt;/code&gt; in the sample app&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/SampleApp/SumUpSDKSampleApp/SumUpSDKSampleApp-Info.plist#L54-L65&#34;&gt;Info.plist&lt;/a&gt; or the &#34;General&#34; tab in Xcode&#39;s Target Editor.&lt;/p&gt; &#xA;&lt;h3&gt;Privacy Info plist keys&lt;/h3&gt; &#xA;&lt;p&gt;The SumUp SDK requires access to the user&#39;s location and Bluetooth peripherals. If your app has not asked for the user&#39;s permission, the SumUp SDK will ask at the time of the first login or checkout attempt. Please add the following keys to your info plist file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    NSLocationWhenInUseUsageDescription&#xA;    NSBluetoothAlwaysUsageDescription&#xA;    NSBluetoothPeripheralUsageDescription (unless your deployment target is at least iOS 13)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Please refer to the sample app&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/SampleApp/SumUpSDKSampleApp/SumUpSDKSampleApp-Info.plist#L38-L43&#34;&gt;Info.plist&lt;/a&gt; for more information regarding the listed permissions required.&lt;/li&gt; &#xA;  &lt;li&gt;You can provide localization by providing a localized &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/SampleApp/SumUpSDKSampleApp/en.lproj/InfoPlist.strings&#34;&gt;InfoPlist.strings&lt;/a&gt; file.&lt;/li&gt; &#xA;  &lt;li&gt;For further information, see the iOS Developer Library on &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW26&#34;&gt;location usage on iOS 8 and later&lt;/a&gt;, &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW20&#34;&gt;Bluetooth peripheral usage&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Import the SDK&lt;/h3&gt; &#xA;&lt;p&gt;To import the SDK in Objective-C source files, you can use &lt;code&gt;#import &amp;lt;SumUpSDK/SumUpSDK.h&amp;gt;&lt;/code&gt;. If module support is enabled in your project, you can use &lt;code&gt;@import SumUpSDK;&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;In Swift, use &lt;code&gt;import SumUpSDK&lt;/code&gt;. You do not have to add any headers to your bridging header.&lt;/p&gt; &#xA;&lt;h3&gt;Authenticate app&lt;/h3&gt; &#xA;&lt;p&gt;Before calling any additional feature of the SumUp SDK, you are required to set up the SDK with your Affiliate (Access) Key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[SMPSumUpSDK setupWithAPIKey:@&#34;MyAPIKey&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: &lt;code&gt;setupWithAPIKey:&lt;/code&gt; checks for the user&#39;s location permission. Consequently, do not call this method as part of the app launch. This method must be called on the main queue.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Login&lt;/h3&gt; &#xA;&lt;p&gt;Following app authentication, a registered SumUp merchant account needs to be logged in. Present a login screen from your &lt;code&gt;UIViewController&lt;/code&gt;, using the following method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[SMPSumUpSDK presentLoginFromViewController:vc&#xA;                                   animated:YES&#xA;                            completionBlock:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: It is also possible to login an account with a token, without the user entering their SumUp login credentials in the SDK. Please refer to section &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/#transparent-authentication&#34;&gt;Transparent Authentication&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;To log out of the SDK, please refer to &lt;code&gt;logoutWithCompletionBlock:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Accept card payments&lt;/h3&gt; &#xA;&lt;p&gt;Once logged in, you can start using the SumUp SDK to accept card payments.&lt;/p&gt; &#xA;&lt;h4&gt;Prepare checkout request&lt;/h4&gt; &#xA;&lt;p&gt;Prepare a checkout request that encapsulates the information regarding the transaction.&lt;/p&gt; &#xA;&lt;p&gt;For this, you will need to create an instance of &lt;code&gt;SMPCheckoutRequest&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;SMPCheckoutRequest *request = [SMPCheckoutRequest requestWithTotal:[NSDecimalNumber decimalNumberWithString:@&#34;10.00&#34;]&#xA;                                                             title:@&#34;your title&#34;&#xA;                                                      currencyCode:[[SMPSumUpSDK currentMerchant] currencyCode]];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that you need to pass an &lt;code&gt;NSDecimalNumber&lt;/code&gt; as the total value. While &lt;code&gt;NSDecimalNumber&lt;/code&gt; is a subclass of &lt;code&gt;NSNumber&lt;/code&gt; it is not advised to use the convenience method of &lt;code&gt;NSNumber&lt;/code&gt; to create an &lt;code&gt;NSDecimalNumber&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Additional checkout parameters&lt;/h4&gt; &#xA;&lt;p&gt;When setting up the &lt;code&gt;SMPCheckoutRequest&lt;/code&gt; object, the following optional parameters can be included:&lt;/p&gt; &#xA;&lt;h5&gt;Tip amount&lt;/h5&gt; &#xA;&lt;p&gt;A tip amount can be processed in addition to the &lt;code&gt;totalAmount&lt;/code&gt; using the &lt;code&gt;tipAmount&lt;/code&gt; parameter. The tip amount will then be shown during the checkout process and be included in the response. Please note that a tip amount cannot be changed during/after the checkout. Just like the &lt;code&gt;totalAmount&lt;/code&gt; it is an &lt;code&gt;NSDecimalNumber&lt;/code&gt; so make sure to not accidentally pass an &lt;code&gt;NSNumber&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Transaction identifier&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;foreignTransactionID&lt;/code&gt; identifier will be associated with the transaction and can be used to retrieve details related to the transaction. See &lt;a href=&#34;https://docs.sumup.com/rest-api/#tag/Transactions&#34;&gt;API documentation&lt;/a&gt; for details. Please make sure that this ID is unique within the scope of the SumUp merchant account and sub-accounts. It must not be longer than 128 characters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// set an optional identifier&#xA;[request setForeignTransactionID:@&#34;my-unique-id&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Skip success screen&lt;/h5&gt; &#xA;&lt;p&gt;To skip the screen shown at the end of a successful transaction, the &lt;code&gt;SMPSkipScreenOptionSuccess&lt;/code&gt; option can be used. When setting this option your application is responsible for displaying the transaction result to the customer. In combination with the Receipts API, your application can also send your own receipts, see &lt;a href=&#34;https://docs.sumup.com/rest-api/#tag/Transactions&#34;&gt;API documentation&lt;/a&gt; for details. Please note that success screens will still be shown when using the SumUp Air Lite readers.&lt;/p&gt; &#xA;&lt;h5&gt;Skip failed screen&lt;/h5&gt; &#xA;&lt;p&gt;To skip the screen shown at the end of a failed transaction, the &lt;code&gt;SMPSkipScreenOptionFailed&lt;/code&gt; option can be used. When setting this option your application is responsible for displaying the transaction result to the customer. Please note that failed screens will still be shown when using the SumUp Air Lite readers.&lt;/p&gt; &#xA;&lt;h3&gt;Prepare the SumUp Card terminal in advance&lt;/h3&gt; &#xA;&lt;p&gt;In order to prepare a SumUp card terminal for checkout, &lt;code&gt;prepareForCheckout&lt;/code&gt; can be called in advance. A registered SumUp merchant account needs to be logged in, and the card terminal must already be setup. You should use this method to let the SDK know that the user is most likely starting a checkout attempt soon; for example when entering an amount or adding products to a shopping cart. This allows the SDK to take appropriate measures, like attempting to wake a connected card terminal.&lt;/p&gt; &#xA;&lt;h3&gt;Transparent Authentication&lt;/h3&gt; &#xA;&lt;p&gt;To authenticate an account without the user typing in their SumUp credentials each time, you can generate an access token using OAuth2.0 and use it to transparently login to the SumUp SDK.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[SMPSumUpSDK loginWithToken:@&#34;MY_ACCESS_TOKEN&#34; &#xA;                 completion:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For information about how to obtain a token, please see the &lt;a href=&#34;https://developer.sumup.com/docs/authorization/&#34;&gt;API Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the token is invalid, &lt;code&gt;SMPSumUpSDKErrorInvalidAccessToken&lt;/code&gt; will be returned.&lt;/p&gt; &#xA;&lt;h4&gt;Initiate Checkout Request&lt;/h4&gt; &#xA;&lt;p&gt;Start a payment by using the checkout request below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[SMPSumUpSDK checkoutWithRequest:request&#xA;              fromViewController:vc&#xA;                      completion:^(SMPCheckoutResult *result, NSError *error) {&#xA;                      // handle completed and failed payments here&#xA;                      // retrieve information via result.additionalInfo&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Checkout Error Codes&lt;/h4&gt; &#xA;&lt;p&gt;Possible values of &lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/SumUpSDK.xcframework/ios-armv7_arm64/SumUpSDK.framework/Headers/SMPSumUpSDK.h#L155&#34;&gt;error code&lt;/a&gt; received in the &lt;code&gt;checkoutWithRequest:&lt;/code&gt; completion block.&lt;/p&gt; &#xA;&lt;h3&gt;Update checkout preferences&lt;/h3&gt; &#xA;&lt;p&gt;When logged in you can let merchants check and update their checkout preferences. Merchants can select their preferred card terminal and set up a new one if needed. The preferences available to a merchant depend on their respective account settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[SMPSumUpSDK presentCheckoutPreferencesFromViewController:self&#xA;                                                 animated:YES&#xA;                                               completion:^(BOOL success, NSError * _Nullable error) {&#xA;                                                 if (!success) {&#xA;                                                   // there was a problem presenting the preferences&#xA;                                                 } else {&#xA;                                                   // next checkout will reflect the merchant&#39;s changes.&#xA;                                                 }&#xA;                                               }];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Out of Scope&lt;/h2&gt; &#xA;&lt;p&gt;The following functions are handled by the &lt;a href=&#34;http://docs.sumup.com/rest-api/&#34;&gt;SumUp APIs&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sumup.com/rest-api/#tag/Refunds&#34;&gt;Refunds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sumup.com/rest-api/#tag/Transactions&#34;&gt;Transaction history&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sumup.com/rest-api/#tag/Receipts&#34;&gt;Receipts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sumup.com/rest-api/#tag/Account-Details&#34;&gt;Account management&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Questions?&lt;/strong&gt; Get in contact with our integration team by sending an email to &lt;a href=&#34;mailto:integration@sumup.com&#34;&gt;integration@sumup.com&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Found a bug?&lt;/strong&gt; &lt;a href=&#34;https://github.com/sumup/sumup-ios-sdk/issues/new&#34;&gt;Open an issue&lt;/a&gt;. Please provide as much information as possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/CHANGELOG.md&#34;&gt;SumUp iOS SDK Changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumup/sumup-ios-sdk/master/LICENSE&#34;&gt;SumUp iOS SDK License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>