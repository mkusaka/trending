<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-12-31T01:35:05Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cooperka/react-native-snackbar</title>
    <updated>2025-12-31T01:35:05Z</updated>
    <id>tag:github.com,2025-12-31:/cooperka/react-native-snackbar</id>
    <link href="https://github.com/cooperka/react-native-snackbar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üç¨ Material Design &#34;Snackbar&#34; component for Android and iOS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Native Snackbar&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/cooperka/react-native-snackbar&#34;&gt;&lt;img src=&#34;https://travis-ci.org/cooperka/react-native-snackbar.svg?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/react-native-snackbar&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/react-native-snackbar.svg?sanitize=true&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/react-native-snackbar&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-native-snackbar.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cooperka/react-native-snackbar&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/cooperka/react-native-snackbar.svg?sanitize=true&#34; alt=&#34;Latest GitHub tag&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Material Design &#34;Snackbar&#34; component for Android and iOS. Supports custom colors, fonts, and languages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cooperka/react-native-snackbar/main/example/screenshots/snackbar.png&#34; alt=&#34;Snackbar screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Snackbars are used for displaying a brief message to the user, along with an optional action. They animate up from the bottom of the screen and then disappear shortly afterward.&lt;/p&gt; &#xA;&lt;p&gt;See Google&#39;s &lt;a href=&#34;https://material.io/guidelines/components/snackbars-toasts.html&#34;&gt;Material Design guidelines&lt;/a&gt; for more info on Snackbars and when to use them.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Snackbar.show({&#xA;  text: &#39;Hello world&#39;,&#xA;  duration: Snackbar.LENGTH_SHORT,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, to include an action button:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Snackbar.show({&#xA;  text: &#39;Hello world&#39;,&#xA;  duration: Snackbar.LENGTH_INDEFINITE,&#xA;  action: {&#xA;    text: &#39;UNDO&#39;,&#xA;    textColor: &#39;green&#39;,&#xA;    onPress: () =&amp;gt; { /* Do something. */ },&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using &lt;a href=&#34;https://www.npmjs.com/#getting-started&#34;&gt;npm&lt;/a&gt;: &lt;code&gt;npm install react-native-snackbar --save&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Using &lt;a href=&#34;https://yarnpkg.com/&#34;&gt;Yarn&lt;/a&gt;: &lt;code&gt;yarn add react-native-snackbar&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://facebook.github.io/react-native/docs/linking-libraries-ios.html&#34;&gt;Link&lt;/a&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;RN &amp;gt;= 0.60 supports &lt;a href=&#34;https://github.com/react-native-community/cli/raw/master/docs/autolinking.md&#34;&gt;autolinking&lt;/a&gt;: first &lt;code&gt;cd ios &amp;amp;&amp;amp; pod install &amp;amp;&amp;amp; cd ..&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;RN &amp;lt; 0.60: &lt;code&gt;react-native link react-native-snackbar&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Or if that fails, link manually using &lt;a href=&#34;https://github.com/cooperka/react-native-snackbar/wiki/Manual-Installation&#34;&gt;these steps&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Note that because this is a native module, Expo does not support it -- to use with Expo you need to &lt;a href=&#34;https://docs.expo.io/versions/latest/expokit/eject/&#34;&gt;eject to ExpoKit&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Import it in your JS:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Snackbar from &#39;react-native-snackbar&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Snackbar.show(options)&lt;/h3&gt; &#xA;&lt;p&gt;Shows a Snackbar, dismissing any existing Snackbar first. Accepts an object with the following options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Data type&lt;/th&gt; &#xA;   &lt;th&gt;Default value?&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Required.&lt;/td&gt; &#xA;   &lt;td&gt;The message to show.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;duration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See below&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Snackbar.LENGTH_SHORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How long to display the Snackbar.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;numberOfLines&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The max number of text lines to allow before ellipsizing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;marginBottom&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Margin from bottom.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;textColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; or &lt;code&gt;style&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;white&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The color of the message text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;backgroundColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; or &lt;code&gt;style&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;undefined&lt;/code&gt; (dark gray)&lt;/td&gt; &#xA;   &lt;td&gt;The background color for the whole Snackbar.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fontFamily&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[Android only] The basename of a &lt;code&gt;.ttf&lt;/code&gt; font from &lt;code&gt;assets/fonts/&lt;/code&gt; (see &lt;a href=&#34;https://github.com/facebook/react-native/issues/25852&#34;&gt;setup guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/cooperka/react-native-snackbar/main/example&#34;&gt;example app&lt;/a&gt;, remember to &lt;code&gt;react-native link&lt;/code&gt; after).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[Android only, API 17+] Whether the Snackbar should render right-to-left (requires &lt;code&gt;android:supportsRtl=&#34;true&#34;&lt;/code&gt;, see &lt;a href=&#34;https://android-developers.googleblog.com/2013/03/native-rtl-support-in-android-42.html&#34;&gt;setup guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/cooperka/react-native-snackbar/main/example&#34;&gt;example app&lt;/a&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;action&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;object&lt;/code&gt; (described below)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;undefined&lt;/code&gt; (no button)&lt;/td&gt; &#xA;   &lt;td&gt;Optional config for the action button (described below).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Where &lt;code&gt;duration&lt;/code&gt; can be one of the following (timing may vary based on device):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Snackbar.LENGTH_SHORT&lt;/code&gt; (just over a second)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Snackbar.LENGTH_LONG&lt;/code&gt; (about three seconds)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Snackbar.LENGTH_INDEFINITE&lt;/code&gt; (stays on screen until dismissed, replaced, or action button is tapped)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;action&lt;/code&gt; object can contain the following options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Data type&lt;/th&gt; &#xA;   &lt;th&gt;Default value?&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Required.&lt;/td&gt; &#xA;   &lt;td&gt;The button text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;textColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; or &lt;code&gt;style&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;white&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The color of the button text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onPress&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;undefined&lt;/code&gt; (Snackbar is simply dismissed)&lt;/td&gt; &#xA;   &lt;td&gt;A callback for when the user taps the button.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Deprecation note: The old keys &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; have been replaced by &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;textColor&lt;/code&gt; for consistency. The old keys will continue to work for now but are deprecated and may be removed at any time.&lt;/p&gt; &#xA;&lt;h3&gt;Snackbar.dismiss()&lt;/h3&gt; &#xA;&lt;p&gt;Dismisses any existing Snackbars.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced usage&lt;/h2&gt; &#xA;&lt;h3&gt;Snackbar events&lt;/h3&gt; &#xA;&lt;p&gt;You can have information on snackbar visibility.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  componentDidMount() {&#xA;    const SnackbarEventEmitter = new NativeEventEmitter(&#xA;      NativeModules.RNSnackbar,&#xA;    );&#xA;    this.eventListener = SnackbarEventEmitter.addListener(&#39;onSnackbarVisibility&#39;, (event) =&amp;gt; {&#xA;      console.log(event.event);&#xA;    });&#xA;  }&#xA;&#xA;  componentWillUnmount() {&#xA;    this.eventListener.remove();&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, with functional components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  useEffect(() =&amp;gt; {&#xA;    const subscription = new NativeEventEmitter(&#xA;      NativeModules.RNSnackbar,&#xA;    ).addListener(&#39;onSnackbarVisibility&#39;, event =&amp;gt; {&#xA;      console.log(event.event);&#xA;    });&#xA;    return () =&amp;gt; {&#xA;      subscription.remove();&#xA;    };&#xA;  }, []);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where event is one of the following options :&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Data type&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Snackbar.DISMISS_EVENT_SWIPE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Indicates that the Snackbar was dismissed via a swipe.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Snackbar.DISMISS_EVENT_ACTION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Indicates that the Snackbar was dismissed via an action click.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Snackbar.DISMISS_EVENT_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Indicates that the Snackbar was dismissed via a timeout.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Snackbar.DISMISS_EVENT_MANUAL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Indicates that the Snackbar was dismissed via Snackbar.dismiss() call.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Snackbar.DISMISS_EVENT_CONSECUTIVE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;Indicates that the Snackbar was dismissed from a new Snackbar being shown.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Snackbar.SHOW_EVENT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;Indicates that Snackbar appears&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Mocking via jest&lt;/h2&gt; &#xA;&lt;p&gt;This package uses NativeModules, which &lt;code&gt;jest&lt;/code&gt; does not have access to.&lt;/p&gt; &#xA;&lt;p&gt;You can use the provided mocks in your &lt;code&gt;jest.setup.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import mockSnackbar from &#39;react-native-snackbar/jest/snackbar-mock.js&#39;&#xA;&#xA;jest.mock(&#39;react-native-snackbar&#39;, () =&amp;gt; mockSnackbar);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h4&gt;Snackbar not appearing [Android]&lt;/h4&gt; &#xA;&lt;p&gt;The Snackbar is designed to attach to whatever view is on top of your screen when &lt;code&gt;show&lt;/code&gt; is called. If that view happens to be a temporary alert modal or some other view that goes away, you&#39;ll never see the Snackbar.&lt;/p&gt; &#xA;&lt;p&gt;A workaround in some cases is to use &lt;code&gt;setTimeout&lt;/code&gt; to show the Snackbar a few seconds later after the modal is gone. See &lt;a href=&#34;https://github.com/cooperka/react-native-snackbar/issues/28&#34;&gt;issue #28&lt;/a&gt; for further discussion. If you want to submit a PR to improve the view-finding logic, feel free.&lt;/p&gt; &#xA;&lt;h4&gt;Undefined import&lt;/h4&gt; &#xA;&lt;p&gt;If you see errors similar to &lt;code&gt;Cannot read property &#39;LENGTH_LONG&#39; of undefined&lt;/code&gt; or &lt;code&gt;Undefined not an object (NativeModules.RNSnackbar)&lt;/code&gt;, please refer to &lt;a href=&#34;https://github.com/cooperka/react-native-snackbar/issues/43&#34;&gt;issue #43&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;h4&gt;Compiling [Android]&lt;/h4&gt; &#xA;&lt;p&gt;If you have issues compiling for Android after linking this library, please try updating your Gradle and Android configs to the latest versions. For example:&lt;/p&gt; &#xA;&lt;p&gt;In your &lt;code&gt;android/build.gradle&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;com.android.tools.build:gradle:3.4.1&lt;/code&gt; (or higher)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In your &lt;code&gt;android/app/build.gradle&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;compileSdkVersion 28&lt;/code&gt; (or higher)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buildToolsVersion &#34;28.0.3&#34;&lt;/code&gt; (or higher)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Compiling [iOS]&lt;/h4&gt; &#xA;&lt;p&gt;Make sure your Deployment Target is iOS 9.0 or above.&lt;/p&gt; &#xA;&lt;h2&gt;Software development&lt;/h2&gt; &#xA;&lt;p&gt;If you want to help contribute to this library, here are local setup steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this git repo&lt;/li&gt; &#xA; &lt;li&gt;Install main dependencies: &lt;code&gt;yarn install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up the example app too: &lt;code&gt;cd example &amp;amp;&amp;amp; yarn install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Within the example directory, &lt;code&gt;react-native run-android&lt;/code&gt; to run it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The example app will update automatically when changing JS code. To see your changes in the example app after updating native library code, reinstall it via:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn add file:.. &amp;amp;&amp;amp; react-native run-android&lt;/code&gt; in the example directory&lt;/li&gt; &#xA; &lt;li&gt;Type &#34;rr&#34; in the app to trigger a reload&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>forcedotcom/SalesforceMobileSDK-iOS</title>
    <updated>2025-12-31T01:35:05Z</updated>
    <id>tag:github.com,2025-12-31:/forcedotcom/SalesforceMobileSDK-iOS</id>
    <link href="https://github.com/forcedotcom/SalesforceMobileSDK-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS SDK for Salesforce&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Salesforce.com Mobile SDK for iOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/forcedotcom/SalesforceMobileSDK-iOS/tree/dev&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/forcedotcom/SalesforceMobileSDK-iOS/tree/dev.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snyk.io/test/github/forcedotcom/SalesforceMobileSDK-iOS&#34;&gt;&lt;img src=&#34;https://snyk.io/test/github/forcedotcom/SalesforceMobileSDK-iOS/badge.svg?sanitize=true&#34; alt=&#34;Known Vulnerabilities&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/forcedotcom/SalesforceMobileSDK-iOS?sort=semver&#34; alt=&#34;GitHub release (latest SemVer)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You have arrived at the source repository for the Salesforce Mobile SDK for iOS. Welcome! There are two ways you can choose to work with the Mobile SDK:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you&#39;d like to work with the source code of the SDK itself, you&#39;ve come to the right place! You can browse sample app source code and debug down through the layers to get a feel for how everything works under the covers. Read on for instructions on how to get started with the SDK in your development environment.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re just eager to start developing your own new application, the quickest way is to use our npm distribution package, called &lt;a href=&#34;https://npmjs.org/package/forceios&#34;&gt;forceios&lt;/a&gt;, which is hosted on &lt;a href=&#34;https://npmjs.org/&#34;&gt;npmjs.org&lt;/a&gt;. Getting started is as simple as installing the npm package and launching your template app. You&#39;ll find more details on the forceios package page.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation (do this first - really)&lt;/h1&gt; &#xA;&lt;p&gt;Working with this repository requires working with git. Any workflow that leaves you with a functioning git clone of this repository should set you up for success. Downloading the ZIP file from GitHub, on the other hand, is likely to put you at a dead end.&lt;/p&gt; &#xA;&lt;h2&gt;Setting up the repo&lt;/h2&gt; &#xA;&lt;p&gt;First, clone the repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the Terminal App&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd&lt;/code&gt; to the parent directory where the repo directory will live&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/forcedotcom/SalesforceMobileSDK-iOS.git&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After cloning the repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cd SalesforceMobileSDK-iOS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./install.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This script pulls the submodule dependencies from GitHub, to finalize setup of the workspace. You can then work with the Mobile SDK by opening &lt;code&gt;SalesforceMobileSDK.xcworkspace&lt;/code&gt; from Xcode.&lt;/p&gt; &#xA;&lt;p&gt;The Salesforce Mobile SDK for iOS requires iOS 15.0 or greater. The install.sh script checks for this, and aborts if the configured SDK version is incorrect.&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;h3&gt;What&#39;s New in 13.0.0&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/forcedotcom/SalesforceMobileSDK-iOS/releases&#34;&gt;release notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Native Applications&lt;/h3&gt; &#xA;&lt;p&gt;The Salesforce Mobile SDK provides the essential libraries for quickly building native mobile apps that interact with the Salesforce cloud platform. The OAuth2 library abstracts away the complexity of securely storing the refresh token or fetching a new session ID when it expires. The SDK also provides wrappers for the Salesforce REST API that you can use from both Swift and Objective-C.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://forcedotcom.github.io/SalesforceMobileSDK-iOS/Documentation/SalesforceSDKCommon/html/index.html&#34;&gt;SalesforceSDKCommon Library Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://forcedotcom.github.io/SalesforceMobileSDK-iOS/Documentation/SalesforceAnalytics/html/index.html&#34;&gt;SalesforceAnalytics Library Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://forcedotcom.github.io/SalesforceMobileSDK-iOS/Documentation/SalesforceSDKCore/html/index.html&#34;&gt;SalesforceSDKCore Library Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://forcedotcom.github.io/SalesforceMobileSDK-iOS/Documentation/SmartStore/html/index.html&#34;&gt;SmartStore Library Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://forcedotcom.github.io/SalesforceMobileSDK-iOS/Documentation/MobileSync/html/index.html&#34;&gt;MobileSync Library Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Salesforce Mobile SDK Development Guide -- &lt;a href=&#34;https://developer.salesforce.com/docs/atlas.en-us.mobile_sdk.meta/mobile_sdk/preface_intro.htm&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trailhead.salesforce.com/en/content/learn/trails/start-ios-appdev&#34;&gt;Mobile SDK Trail&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Discussion&lt;/h1&gt; &#xA;&lt;p&gt;If you would like to make suggestions, have questions, or encounter any issues, we&#39;d love to hear from you. Post any feedback you have on the &lt;a href=&#34;https://trailhead.salesforce.com/en/trailblazer-community/groups/0F94S000000kH0HSAU?tab=discussion&amp;amp;sort=LAST_MODIFIED_DATE_DESC&#34;&gt;Mobile SDK Trailblazer Community&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>