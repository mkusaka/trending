<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-08T01:41:31Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>avohq/ios-analytics-debugger-spm</title>
    <updated>2023-07-08T01:41:31Z</updated>
    <id>tag:github.com,2023-07-08:/avohq/ios-analytics-debugger-spm</id>
    <link href="https://github.com/avohq/ios-analytics-debugger-spm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IosAnalyticsDebugger&lt;/h1&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This is the Swift Package Manager repo, you can also use Analytics Debugger via &lt;a href=&#34;https://github.com/avohq/ios-analytics-debugger&#34;&gt;CocoaPods&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Create the debugger instance&lt;/h1&gt; &#xA;&lt;p&gt;Obj-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AnalyticsDebugger * debugger = [AnalyticsDebugger new];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;let debugger = AnalyticsDebugger()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Debugger instance management&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The debugger object maintains the history of your analytics events, so to share the history between different screens you should use the same debugger instance. We recommend to have a singleton that you provide or inject to your screens. A simple example can be found &lt;a href=&#34;https://github.com/avohq/ios-analytics-debugger/raw/master/Example/IosAnalyticsDebugger/AVOAppDelegate.m#L12&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Even if your app only has one screen (common case in PoC apps), remember to keep a reference to the &lt;code&gt;AnalyticsDebugger&lt;/code&gt; instance somewhere. Otherwise it will become unresponsive to touches.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Show the debugger&lt;/h1&gt; &#xA;&lt;p&gt;Obj-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[debugger showBubbleDebugger];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[debugger showBarDebugger];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;debugger.showBubble()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;debugger.showBarDebugger()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Hide the debugger&lt;/h1&gt; &#xA;&lt;p&gt;Obj-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[debugger hideDebugger];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;debugger.hide()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Post an event&lt;/h1&gt; &#xA;&lt;p&gt;Obj-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[self.debugger debugEvent:@&#34;Test Event&#34; eventParams: @{&#xA;    @&#34;Parameter 0&#34; : @&#34;Value 0&#34;,&#xA;    @&#34;Parameter 1&#34; : @&#34;Value 1&#34;&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;debugger.debugEvent(&#34;Test Event&#34;, eventParams: [&#xA;    &#34;Parameter 0&#34;: &#34;Value 0&#34;, &#xA;    &#34;Parameter 1&#34;: &#34;Value 1&#34;&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Using with Avo Inspector&lt;/h1&gt; &#xA;&lt;p&gt;We suggest to include the Analytics Debugger to you development and staging builds and call it alongside Inspector.&lt;/p&gt; &#xA;&lt;p&gt;Place the &lt;code&gt;debugger.debugEvent&lt;/code&gt; call right after the &lt;code&gt;inspector.trackSchemaFromEvent&lt;/code&gt; call. The parameters of the calls are the same, so you can do&lt;/p&gt; &#xA;&lt;p&gt;Obj-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[self.inspector trackSchemaFromEvent:eventName eventParams:params];&#xA;[self.debugger debugEvent:eventName eventParams:params];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;inspector.trackSchema(fromEvent:eventName, eventParams:params)&#xA;debugger.debugEvent(eventName, eventParams:params)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Using with Avo Codegen&lt;/h1&gt; &#xA;&lt;p&gt;When using Avo generated code you&#39;ll be calling the &lt;code&gt;init&lt;/code&gt; methods. Actual interface of the methods depends on your schema setup, but there will be init or constructor method with &lt;code&gt;debugger&lt;/code&gt; parameter, where you can pass an instance of &lt;code&gt;AnalyticsDebugger&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Obj-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Avo initAvoWithEnv:AVOEnvDev ... debugger:debugger];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;avo = Avo(env: .dev, ..., debugger: debugger)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that all events from Avo function calls will be automatically accessable in the debugger UI.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Avo (&lt;a href=&#34;https://www.avo.app&#34;&gt;https://www.avo.app&lt;/a&gt;), &lt;a href=&#34;mailto:friends@avo.app&#34;&gt;friends@avo.app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;IosAnalyticsDebugger is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>