<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-05T01:36:32Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>carloandaya/BNR_HypnoTime</title>
    <updated>2022-12-05T01:36:32Z</updated>
    <id>tag:github.com,2022-12-05:/carloandaya/BNR_HypnoTime</id>
    <link href="https://github.com/carloandaya/BNR_HypnoTime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BigNerdRanch UIViewController tutorial&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>sunnyyoung/WeChatTweak-macOS</title>
    <updated>2022-12-05T01:36:32Z</updated>
    <id>tag:github.com,2022-12-05:/sunnyyoung/WeChatTweak-macOS</id>
    <link href="https://github.com/sunnyyoung/WeChatTweak-macOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A dynamic library tweak for WeChat macOS - 首款微信 macOS 客户端撤回拦截与多开 🔨&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WeChatTweak-macOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sunnyyoung/WeChatTweak-macOS/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sunnyyoung/WeChatTweak-macOS/master/README-English.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/README-English-blue.svg?sanitize=true&#34; alt=&#34;README&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sunnyyoung/WeChatTweak-macOS/master/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/README-%E4%B8%AD%E6%96%87-blue.svg?sanitize=true&#34; alt=&#34;README&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/wechattweak&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-WeChatTweak-brightgreen.svg?sanitize=true&#34; alt=&#34;README&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;微信 macOS 客户端增强 Tweak 动态库。&lt;/p&gt; &#xA;&lt;h2&gt;功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;阻止消息撤回 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;消息列表通知&lt;/li&gt; &#xA;   &lt;li&gt;系统通知&lt;/li&gt; &#xA;   &lt;li&gt;正常撤回自己发出的消息&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;客户端无限多开 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;右键 Dock icon 登录新的微信账号&lt;/li&gt; &#xA;   &lt;li&gt;命令行执行：&lt;code&gt;open -n /Applications/WeChat.app&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;消息处理增强 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;支持任意表情导出&lt;/li&gt; &#xA;   &lt;li&gt;支持二维码识别&lt;/li&gt; &#xA;   &lt;li&gt;支持右键直接复制链接&lt;/li&gt; &#xA;   &lt;li&gt;支持由系统默认浏览器直接打开&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;重新打开应用无需手机认证&lt;/del&gt;（官方已经支持）&lt;/li&gt; &#xA; &lt;li&gt;UI界面设置面板&lt;/li&gt; &#xA; &lt;li&gt;支持 Alfred workflow&lt;/li&gt; &#xA; &lt;li&gt;支持 Launchbar action&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;首次使用&lt;/strong&gt;安装 &lt;a href=&#34;https://github.com/Sunnyyoung/WeChatTweak-CLI&#34;&gt;WeChatTweak-CLI&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install sunnyyoung/repo/wechattweak-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装/更新/卸载 Tweak:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo wechattweak-cli install   # 安装/更新&#xA;$ sudo wechattweak-cli uninstall # 卸载&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;截图&lt;/h2&gt; &#xA;&lt;h3&gt;整体预览&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sunnyyoung/WeChatTweak-macOS/master/Screenshot/0x01.png&#34; alt=&#34;Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Alfred workflow&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sunnyyoung/WeChatTweak-macOS/master/Screenshot/0x02.png&#34; alt=&#34;Alfred&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;LaunchBar action&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sunnyyoung/WeChatTweak-macOS/master/Screenshot/0x03.png&#34; alt=&#34;LaunchBar&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;功能失效？&lt;br&gt; 请提交 &lt;strong&gt;issue&lt;/strong&gt; 然后等待，或提交 &lt;strong&gt;pull request&lt;/strong&gt; 一起发电。&lt;/li&gt; &#xA; &lt;li&gt;Issue 没有响应 or 回复？&lt;br&gt; 开源项目，用爱发电，耐心等。&lt;/li&gt; &#xA; &lt;li&gt;兼容旧版本客户端吗？&lt;br&gt; 不，为了降低维护成本和保证更新速度，默认只支持&lt;strong&gt;最新&lt;/strong&gt;版本客户端。&lt;/li&gt; &#xA; &lt;li&gt;会封号吗？&lt;br&gt; 在&lt;strong&gt;只使用该工具&lt;/strong&gt;的情况下&lt;strong&gt;没有&lt;/strong&gt;出现过封号/风险提示，若有&lt;strong&gt;使用过其他同类工具&lt;/strong&gt;则有可能会出现封号/风险提示，因此风险自负。&lt;/li&gt; &#xA; &lt;li&gt;安装出现 &lt;code&gt;codesign_allocate helper tool cannot be found or used&lt;/code&gt; 错误？&lt;br&gt; 该错误为系统问题，暂未清楚原因，一般情况下重新执行安装操作即可。&lt;/li&gt; &#xA; &lt;li&gt;安装完打开微信客户端提示 &lt;code&gt;没有权限打开应用程序&lt;/code&gt;？&lt;br&gt; 先卸载，再重新安装一次即可，如仍无法解决请重启电脑。实在搞不定的，到 &lt;a href=&#34;https://github.com/Sunnyyoung/WeChatTweak-macOS/issues?q=&#34;&gt;issues&lt;/a&gt; 里找找类似问题并尝试解决。&lt;/li&gt; &#xA; &lt;li&gt;截图失效？&lt;br&gt; 系统偏好设置 -&amp;gt; 隐私 -&amp;gt; 删除微信并重新添加 -&amp;gt; 重启微信客户端。&lt;/li&gt; &#xA; &lt;li&gt;理性讨论。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;参考&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.sunnyyoung.net/wei-xin-macos-ke-hu-duan-wu-xian-duo-kai-gong-neng-shi-jian/&#34;&gt;微信 macOS 客户端无限多开功能实践&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.sunnyyoung.net/wei-xin-macos-ke-hu-duan-lan-jie-che-hui-gong-neng-shi-jian/&#34;&gt;微信 macOS 客户端拦截撤回功能实践&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.sunnyyoung.net/rang-wei-xin-macos-ke-hu-duan-zhi-chi-alfred/&#34;&gt;让微信 macOS 客户端支持 Alfred&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;贡献者&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/sunnyyoung/WeChatTweak-macOS/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;].&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Sunnyyoung/WeChatTweak-macOS/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/WeChatTweak-macOS/contributors.svg?width=890&amp;amp;button=false&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/sunnyyoung/WeChatTweak-macOS/master/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bugfender/BugfenderSDK-iOS</title>
    <updated>2022-12-05T01:36:32Z</updated>
    <id>tag:github.com,2022-12-05:/bugfender/BugfenderSDK-iOS</id>
    <link href="https://github.com/bugfender/BugfenderSDK-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bugfender SDK for iOS, a remote logger tailor-made for mobile&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bugfender SDK for iOS &lt;a href=&#34;https://travis-ci.com/bugfender/BugfenderSDK-iOS&#34;&gt;&lt;img src=&#34;https://travis-ci.com/bugfender/BugfenderSDK-iOS.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugfender.github.io/BugfenderSDK-iOS/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-%E2%9C%93-blue.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Bugfender is a cloud service to collect mobile application logs. Developers can control log sending programmatically and manually for each device. Logs are available at the &lt;a href=&#34;https://dashboard.bugfender.com/&#34;&gt;Bugfender dashboard&lt;/a&gt;. You&#39;ll need an account.&lt;/p&gt; &#xA;&lt;p&gt;BugfenderSDK 1.10 works for iOS 10.0 and newer. For iOS 8 support you can still use the BugfenderSDK 1.8.&lt;/p&gt; &#xA;&lt;h1&gt;Installing the SDK&lt;/h1&gt; &#xA;&lt;p&gt;First of all you will need to add the framework to your project.&lt;/p&gt; &#xA;&lt;h2&gt;Using CocoaPods&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a Podfile if you don&#39;t have one: &lt;code&gt;pod init&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add Bugfender to your Podfile: &lt;pre&gt;&lt;code&gt;pod &#39;BugfenderSDK&#39;, &#39;~&amp;gt; 1.10&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Save the file and run: &lt;code&gt;pod install&lt;/code&gt;. This creates an &lt;code&gt;.xcworkspace&lt;/code&gt; file for your app. Use this file for all future development on your application.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using Swift Package Manager&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In Xcode go to the target&#39;s &lt;code&gt;General&lt;/code&gt; tab and press on the icon to add a new library &lt;img src=&#34;https://github.com/bugfender/BugfenderSDK-iOS/raw/master/readme-images/spm/spm1.png?raw=true&#34; width=&#34;400&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the popover choose &lt;code&gt;Add Other&lt;/code&gt; and then &lt;code&gt;Add Package Dependency...&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://github.com/bugfender/BugfenderSDK-iOS/raw/master/readme-images/spm/spm2.png?raw=true&#34; width=&#34;300&#34;&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Paste the GitHub url from the Bugfender iOS repository &lt;code&gt;https://github.com/bugfender/BugfenderSDK-iOS&lt;/code&gt; in the textfield and press &lt;code&gt;Next&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://github.com/bugfender/BugfenderSDK-iOS/raw/master/readme-images/spm/spm3.png?raw=true&#34; width=&#34;400&#34;&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Leave the first option checked and press &lt;code&gt;Next&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://github.com/bugfender/BugfenderSDK-iOS/raw/master/readme-images/spm/spm4.png?raw=true&#34; width=&#34;400&#34;&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Xcode will download the Bugfender files and you will be prompted with the following menu. Ensure BugfenderSDK is selected and press Finish&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://github.com/bugfender/BugfenderSDK-iOS/raw/master/readme-images/spm/spm5.png?raw=true&#34; width=&#34;400&#34;&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Import &lt;code&gt;SystemConfiguration.framework&lt;/code&gt;, &lt;code&gt;Security.framework&lt;/code&gt;, &lt;code&gt;CoreServices.framework&lt;/code&gt;, &lt;code&gt;CoreGraphics.framework&lt;/code&gt; and &lt;code&gt;libc++.tbd&lt;/code&gt; as well.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;There is a &lt;a href=&#34;https://bugs.swift.org/browse/SR-13343&#34;&gt;known issue&lt;/a&gt; in Xcode12 failing to launch apps in a physical device when debugging. At the moment of writing this docs, the issue is still not fixed in Xcode12.3 Beta. The issue should not affect release or simulator versions. But, if you get a &lt;code&gt;No code signature found&lt;/code&gt; or &lt;code&gt;A valid provisioning profile for this executable was not found&lt;/code&gt; we recommend to use the &lt;a href=&#34;https://pspdfkit.com/guides/ios/current/knowledge-base/library-not-found-swiftpm/&#34;&gt;workaround proposed by the PSPDFKit&lt;/a&gt; team.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using Carthage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Update to at least Carthage 0.38.0&lt;/li&gt; &#xA; &lt;li&gt;Add to your Cartfile: &lt;pre&gt;&lt;code&gt;github &#34;bugfender/BugfenderSDK-iOS&#34; ~&amp;gt;1.10&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Save the file and run &lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Import &lt;code&gt;Carthage/Build/BugfenderSDK.xcframework&lt;/code&gt; to your &lt;code&gt;Linked Frameworks and Libraries&lt;/code&gt; (or drag-n-drop the file to your project).&lt;/li&gt; &#xA; &lt;li&gt;Make sure to select the option &#34;Embed framework&#34; (or list the framework in &lt;code&gt;input.xcfilelist&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Import &lt;code&gt;SystemConfiguration.framework&lt;/code&gt;, &lt;code&gt;Security.framework&lt;/code&gt;, &lt;code&gt;CoreServices.framework&lt;/code&gt;, &lt;code&gt;CoreGraphics.framework&lt;/code&gt; and &lt;code&gt;libc++.tbd&lt;/code&gt; as well.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Manual&lt;/h2&gt; &#xA;&lt;p&gt;If you prefer to install the SDK manually you can use the provided xcframework in the corresponding &lt;a href=&#34;https://github.com/bugfender/BugfenderSDK-iOS/releases&#34;&gt;release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to your &lt;strong&gt;Project&lt;/strong&gt; &amp;gt; &lt;strong&gt;Your Target&lt;/strong&gt; &amp;gt; &lt;strong&gt;General&lt;/strong&gt; &amp;gt; &lt;strong&gt;Frameworks, Libraries, and Embedded Content&lt;/strong&gt; and drag &lt;code&gt;BugfenderSDK.xcframework&lt;/code&gt; there.&lt;/li&gt; &#xA; &lt;li&gt;Make sure to select the option &#34;Embed framework&#34;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have &lt;code&gt;SystemConfiguration.framework&lt;/code&gt;, &lt;code&gt;Security.framework&lt;/code&gt;, &lt;code&gt;CoreServices.framework&lt;/code&gt;, &lt;code&gt;CoreGraphics.framework&lt;/code&gt; and &lt;code&gt;libc++.tbd&lt;/code&gt; there as well.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Using Bugfender&lt;/h1&gt; &#xA;&lt;p&gt;Once you have the framework in your project, using it is as easy as using &lt;code&gt;BFLog()&lt;/code&gt; instead of &lt;code&gt;NSLog()&lt;/code&gt; or &lt;code&gt;bfprint()&lt;/code&gt; instead &lt;code&gt;print()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Swift&lt;/h2&gt; &#xA;&lt;p&gt;If your application uses SwiftUI and doesn&#39;t have an AppDelegate, you might need to create one like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;@main&#xA;struct YourAppNameApp: App {&#xA;&#xA;    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate&#xA;&#xA;    var body: some Scene {&#xA;        WindowGroup {&#xA;            ContentView()&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;class AppDelegate: NSObject, UIApplicationDelegate {&#xA;    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -&amp;gt; Bool {&#xA;        // your Bugfender init code here&#xA;&#xA;        return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your AppDelegate class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;@_exported import BugfenderSDK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add the following to &lt;code&gt;application(_:didFinishLaunchingWithOptions:)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;Bugfender.activateLogger(&#34;YOUR_APP_KEY&#34;)&#xA;Bugfender.enableUIEventLogging() // optional, log user interactions automatically&#xA;Bugfender.enableCrashReporting() // optional, log crashes automatically&#xA;bfprint(&#34;Hello world!&#34;) // use bfprint() as you would use print()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you may use &lt;code&gt;BFLog&lt;/code&gt; as you would normally use &lt;code&gt;NSLog&lt;/code&gt; or &lt;code&gt;print&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also want to specify a logging level by using the following helper functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Bugfender.print(...)&lt;/code&gt;: Default log.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bugfender.warning(...)&lt;/code&gt;: Warning log.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bugfender.error(...)&lt;/code&gt;: Error log.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Objective-C&lt;/h2&gt; &#xA;&lt;p&gt;Make Bugfender available project-wide by adding the following line to the &lt;code&gt;.pch&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;BugfenderSDK/BugfenderSDK.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get an API key from the &lt;a href=&#34;https://app.bugfender.com/&#34;&gt;Bugfender console&lt;/a&gt;. In your &lt;code&gt;AppDelegate&lt;/code&gt; call &lt;a href=&#34;http://cocoadocs.org/docsets/BugfenderSDK/0.3.9/Classes/Bugfender.html#//api/name/activateLogger:&#34;&gt;activateLogger&lt;/a&gt; when the application starts, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&#xA;{&#xA;    ...&#xA;    // Activate the remote logger with an App Key.&#xA;    [Bugfender activateLogger:@&#34;YOUR_APP_KEY&#34;];&#xA;    [Bugfender enableUIEventLogging]; // optional, log user interactions automatically&#xA;    [Bugfender enableCrashReporting]; // optional, log crashes automatically&#xA;    BFLog(&#34;Hello world!&#34;) // use BFLog as you would use NSLog&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you may use &lt;code&gt;BFLog&lt;/code&gt; as you would normally use &lt;code&gt;NSLog&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also want to specify a logging level by using the following macros:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BFLog(...)&lt;/code&gt;: Default log.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BFLogWarn(...)&lt;/code&gt;: Warning log.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BFLogErr(...)&lt;/code&gt;: Error log.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Advanced features&lt;/h1&gt; &#xA;&lt;h2&gt;Sending issues&lt;/h2&gt; &#xA;&lt;p&gt;Bugfender allows you to send issues to the server. An issue is similar to a session but they are showed in the &lt;code&gt;issues&lt;/code&gt; section and you can send issues any time from the app, even if the device is not enabled in the system. Issues are useful to keep track of important errors that you can detect in your code.&lt;/p&gt; &#xA;&lt;p&gt;For sending an issue you can use the following function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Bugfender.sendIssueReturningUrl(withTitle: &#34;Issue title&#34;, text: &#34;Description of the issue&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Nothice that &lt;code&gt;text&lt;/code&gt; supports Markdown notation on the server. You can add some style to the text.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Bugfender.sendIssueReturningUrl(withTitle: &#34;App Error&#34;, text: &#34;We have found an **Error**, we need to check it&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Send issue returns an URL pointing to the issue in the Dashboard of Bugfender. You can use that URL to create automations.&lt;/p&gt; &#xA;&lt;h2&gt;Having your app decide when to send logs&lt;/h2&gt; &#xA;&lt;p&gt;In some special circumstances you may want to send logs, regardless of the enabled state of the device in the Bugfender console, for example in a custom exception handler. Use &lt;code&gt;forceSendOnce&lt;/code&gt; to force sending the logs once, and use &lt;code&gt;setForceEnabled:&lt;/code&gt; to force it for some period of time.&lt;/p&gt; &#xA;&lt;h2&gt;Device associated data&lt;/h2&gt; &#xA;&lt;p&gt;You can associate information to a device as if it were a dictionary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Bugfender.setDeviceString(&#34;value&#34;, forKey: &#34;key&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more information in our blog post &lt;a href=&#34;https://bugfender.com/blog/associated-device-information/&#34;&gt;Associated device information&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Log buffer size&lt;/h2&gt; &#xA;&lt;p&gt;Bugfender keeps up to 5 MB worth of log data in the device. This way Bugfender can work offline, and you can get some log data from the past when enabling a device. You can change that limit with &lt;code&gt;setMaximumLocalStorageSize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Setting maximum cache size to 1 Mb&#xA;Bugfender.setMaximumLocalStorageSize(1024*1024)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get Device Link&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you want to integrate Bugfender with a third party tool. For this purpose, the SDK provides a method that returns the URL for the current device. You can send it to the third party tool and easily navigate back to the logs of the device from the other tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Bugfender.deviceIdentifierUrl();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get Session Link&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you want to integrate Bugfender with a third party tool. For this purpose, the SDK provides a method that returns the URL for the session. You can send it to the third party tool to easily go to the logs of the current session from the other tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;Bugfender.sessionIdentifierUrl();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Collecting User feedback&lt;/h1&gt; &#xA;&lt;p&gt;Getting feedback from the final users is one of the most important things for an app developer. Good user feedback allows you detect errors in your app and helps you to understand better your product.&lt;/p&gt; &#xA;&lt;p&gt;Starting from version 1.6, Bugfender provides a new feature to easily collect app feedback from final users. It takes only two minutes and a few lines of code to integrate. You can think about the User Feedback as a special kind of Issue, every time your users submit their feedback you will get a new issue in Bugfender.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bugfender/BugfenderSDK-iOS/master/docs/User-feedback-default.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to implement Bugfender User Feedback is using the customizable User Feedback View Controller. It provides a convenient view controller with two text fields, one short for the subject and another bigger for the feedback. Both text fields grow autommatically.&lt;/p&gt; &#xA;&lt;h2&gt;Using default UI&lt;/h2&gt; &#xA;&lt;p&gt;Using the convenient UI provided by Bugfender requires only creating a new View Controller and presenting it modally. All you need is to call the following method and complete the required parameters with the title and placeholders for your UI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Instantiate new User Feedback&#xA;&#xA;let nvc = Bugfender.userFeedbackViewController(withTitle: &#34;Navigation bar title&#34;,&#xA;                                               hint: &#34;Give some instructions to your users&#34;,&#xA;                                               subjectPlaceholder: &#34;Placeholder for subject textfield&#34;,&#xA;                                               messagePlaceholder: &#34;Placeholder for message textfield&#34;,&#xA;                                               sendButtonTitle: &#34;Send&#34;,&#xA;                                               cancelButtonTitle: &#34;Cancel&#34;) { (feedbackSent, url) in&#xA;    if (feedbackSent) {&#xA;        // Say thanks!&#xA;        // url is a direct link to the dashboard&#xA;        // Use it to create automations or send it to your server&#xA;    } else {&#xA;        // User decided to not send feedback&#xA;    }&#xA;}&#xA;&#xA;// Present modally&#xA;self.present(nvc, animated: true, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, if you require more customization you can configure the view controller prior to presenting it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note BFUserFeedbackNavigationController is a subclass of navigation controller. You need to access the view controller using the public property feedbackViewController.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Access the root view controller.&#xA;let feedbackViewController: BFUserFeedbackViewController = nvc.feedbackViewController&#xA;&#xA;// Change the background colors&#xA;feedbackViewController.mainBackgroundColor = UIColor.lightGray&#xA;feedbackViewController.secondaryBackgroundColor = UIColor.white&#xA;&#xA;// Change the font of the hint text&#xA;feedbackViewController.hintFont = UIFont(name: &#34;Avenir&#34;, size: 14)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bugfender/BugfenderSDK-iOS/master/docs/User-feedback-custom.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a complete list of customizable attributes you can inspect &#34;BFUserFeedbackViewController.h&#34; or &lt;a href=&#34;http://bugfender.github.io/BugfenderSDK-iOS/&#34;&gt;read the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using a custom UI&lt;/h2&gt; &#xA;&lt;p&gt;If you need further customization than provided by BFUserFeedbackViewController you can implement your own UI. All you have to do is collect your user feedback as you wish and send it to Bugfender using &lt;code&gt;sendUserFeedback&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let feedbackUrl = Bugfender.sendUserFeedbackReturningUrl(withSubject: &#34;Title of the feedback&#34;, message: &#34;message of the feedback&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The returned URL is a direct link to the Bugfender&#39;s dashboard. Use it to create automations or to keep a reference in your servers.&lt;/p&gt; &#xA;&lt;h2&gt;Updating from BugfenderSDK prior to 1.8 and ObjC only projects&lt;/h2&gt; &#xA;&lt;p&gt;BugfenderSDK is now a dynamic framework and you will need to check the &#34;embed framework&#34; option when adding it to your project manually or using Carthage. &lt;br&gt; Additionally, the Bugfender.swift helper class is not needed anymore and can be safely deleted, however, Swift must be available in your project. If you are installing Bugfender manually or using Carthage ensure that &lt;em&gt;Build Settings -&amp;gt; Always Embed Swift Standard Libraries&lt;/em&gt; is set to &lt;em&gt;YES&lt;/em&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>