<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-25T01:40:14Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>raffael/RMSkinnedView</title>
    <updated>2023-04-25T01:40:14Z</updated>
    <id>tag:github.com,2023-04-25:/raffael/RMSkinnedView</id>
    <link href="https://github.com/raffael/RMSkinnedView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Subclass of NSView with a NSImage as background pattern. Interface Builder properties can be used to directly set the image path.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RMSkinnedView&lt;/h1&gt; &#xA;&lt;p&gt;This subclass of NSView uses a NSImage as pattern or a NSColor to fill its background. The view will be filled using &lt;strong&gt;NSCompositeSourceOver&lt;/strong&gt;, so that layers beneath it stay visible when using transparency effects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/raffael/RMSkinnedView/raw/master/preview.png?raw=true&#34; alt=&#34;RMSkinnedView Preview&#34; title=&#34;Custom NSView subclass with background image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The core feature of &lt;strong&gt;RMSkinnedWindow&lt;/strong&gt; is the ability to define certain properties directly in the Interface builder, which reduces the amount of code required to build beautiful applications. To do this, drag a new &lt;code&gt;NSView&lt;/code&gt; to your UI and choose &lt;code&gt;RMSkinnedView&lt;/code&gt; as its class. In the same view of Interface Builder (Identity Inspector), add properties according to the following rules to the &lt;strong&gt;User Defined Runtime Attributes&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;backgroundPatternImageName (STRING)&lt;/strong&gt; The name of the image in your ressources you want to use as a background pattern for the view. The image can contain transparency effects. The image will be loaded using &lt;code&gt;[NSImage imageNamed:];&lt;/code&gt;. A specified color will be ignored if the pattern image exists.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;offsetString (STRING)&lt;/strong&gt; A string defining a two-dimensional offset for the background pattern drawing. Since the pattern depends on the window&#39;s size, you just have to code-and-try until it fits your needs!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;colorString (STRING)&lt;/strong&gt; An RGBa string that defines the color you want to use, if you do not want to make use of pattern images. The format of the RGBa string is &lt;code&gt;[0-255][0-255][0-255][0.0-1.0]&lt;/code&gt;, e.g. &lt;code&gt;255,128,0,0.5&lt;/code&gt;. The color will be ignored if a pattern image has been set.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;cornerRadius (NUMBER)&lt;/strong&gt; A number defining the radius for all four corners of the View. You have to enable each corner manually using the following settings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;roundedTopLeft (BOOL)&lt;/strong&gt;, &lt;strong&gt;roundedTopRight (BOOL)&lt;/strong&gt;, &lt;strong&gt;roundedBottomLeft (BOOL)&lt;/strong&gt;, &lt;strong&gt;roundedBottomRight (BOOL)&lt;/strong&gt; Flags to enable corner-wise the rounded corners.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/raffael/RMSkinnedView/raw/master/settings.png?raw=true&#34; alt=&#34;RMSkinnedView Settings&#34; title=&#34;Custom NSView subclass with background image and its settings in Interface Builder&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Scenario&lt;/h2&gt; &#xA;&lt;p&gt;Often, one would have to subclass NSView to give it a custom background pattern image and keep a reference to the NSView instance to set the image. With this class, one can simply define the image path (as you would with &lt;code&gt;+(NSImage *) imageNamed:;)&lt;/code&gt; in the Interface Builder object properties.&lt;/p&gt; &#xA;&lt;p&gt;In our projects, we often use RMSkinnedView as the Title Bar view of &lt;em&gt;INAppStoreWindow&lt;/em&gt; windows. The top left and the top right radius allows as to perfectly match the window&#39;s corner radius.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Usage should be clear once you see the annotated header file.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Raffael Hannemann&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.twitter.com/raffael_me/&#34;&gt;@raffael_me&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.raffael.me/&#34;&gt;http://www.raffael.me/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2013 Raffael Hannemann Under BSD License.&lt;/p&gt; &#xA;&lt;h2&gt;Want more?&lt;/h2&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;http://www.twitter.com/raffael_me/&#34;&gt;@raffael_me&lt;/a&gt; for similar releases.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sureJiang/MSRotationTabBar</title>
    <updated>2023-04-25T01:40:14Z</updated>
    <id>tag:github.com,2023-04-25:/sureJiang/MSRotationTabBar</id>
    <link href="https://github.com/sureJiang/MSRotationTabBar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UITabBar Rotation Animation Demo&lt;/p&gt;&lt;hr&gt;&lt;p&gt;UITabBar Rotation Animation Demo uses Core Animation and Response Chain&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sureJiang/MSRotationTabBar/master/MSRotationTabBar.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ibireme/YYImage</title>
    <updated>2023-04-25T01:40:14Z</updated>
    <id>tag:github.com,2023-04-25:/ibireme/YYImage</id>
    <link href="https://github.com/ibireme/YYImage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Image framework for iOS to display/encode/decode animated WebP, APNG, GIF, and more.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;YYImage&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibireme/YYImage/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green.svg?style=flat&#34; alt=&#34;License MIT&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;http://cocoapods.org/pods/YYImage&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/YYImage.svg?style=flat&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;http://cocoadocs.org/docsets/YYImage&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/YYImage.svg?style=flat&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://www.apple.com/nl/ios/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/support-iOS%206%2B%20-blue.svg?style=flat&#34; alt=&#34;Support&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://travis-ci.org/ibireme/YYImage&#34;&gt;&lt;img src=&#34;https://travis-ci.org/ibireme/YYImage.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Image framework for iOS to display/encode/decode animated WebP, APNG, GIF, and more.&lt;br&gt; (It&#39;s a component of &lt;a href=&#34;https://github.com/ibireme/YYKit&#34;&gt;YYKit&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/ibireme/YYImage/master/Demo/YYImageDemo/niconiconi@2x.gif&#34; alt=&#34;niconiconi~&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Display/encode/decode animated image with these types:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WebP, APNG, GIF.&lt;/li&gt; &#xA; &lt;li&gt;Display/encode/decode still image with these types:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WebP, PNG, GIF, JPEG, JP2, TIFF, BMP, ICO, ICNS.&lt;/li&gt; &#xA; &lt;li&gt;Baseline/progressive/interlaced image decode with these types:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PNG, GIF, JPEG, BMP.&lt;/li&gt; &#xA; &lt;li&gt;Display frame based image animation and sprite sheet animation.&lt;/li&gt; &#xA; &lt;li&gt;Dynamic memory buffer for lower memory usage.&lt;/li&gt; &#xA; &lt;li&gt;Fully compatible with UIImage and UIImageView class.&lt;/li&gt; &#xA; &lt;li&gt;Extendable protocol for custom image animation.&lt;/li&gt; &#xA; &lt;li&gt;Fully documented.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h3&gt;Display animated image&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// File: ani@3x.gif&#xA;UIImage *image = [YYImage imageNamed:@&#34;ani.gif&#34;];&#xA;UIImageView *imageView = [[YYAnimatedImageView alloc] initWithImage:image];&#xA;[self.view addSubview:imageView];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Display frame animation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Files: frame1.png, frame2.png, frame3.png&#xA;NSArray *paths = @[@&#34;/ani/frame1.png&#34;, @&#34;/ani/frame2.png&#34;, @&#34;/ani/frame3.png&#34;];&#xA;NSArray *times = @[@0.1, @0.2, @0.1];&#xA;UIImage *image = [YYFrameImage alloc] initWithImagePaths:paths frameDurations:times repeats:YES];&#xA;UIImageView *imageView = [YYAnimatedImageView alloc] initWithImage:image];&#xA;[self.view addSubview:imageView];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Display sprite sheet animation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 8 * 12 sprites in a single sheet image&#xA;UIImage *spriteSheet = [UIImage imageNamed:@&#34;sprite-sheet&#34;];&#xA;NSMutableArray *contentRects = [NSMutableArray new];&#xA;NSMutableArray *durations = [NSMutableArray new];&#xA;for (int j = 0; j &amp;lt; 12; j++) {&#xA;   for (int i = 0; i &amp;lt; 8; i++) {&#xA;       CGRect rect;&#xA;       rect.size = CGSizeMake(img.size.width / 8, img.size.height / 12);&#xA;       rect.origin.x = img.size.width / 8 * i;&#xA;       rect.origin.y = img.size.height / 12 * j;&#xA;       [contentRects addObject:[NSValue valueWithCGRect:rect]];&#xA;       [durations addObject:@(1 / 60.0)];&#xA;   }&#xA;}&#xA;YYSpriteSheetImage *sprite;&#xA;sprite = [[YYSpriteSheetImage alloc] initWithSpriteSheetImage:img&#xA;                                                contentRects:contentRects&#xA;                                              frameDurations:durations&#xA;                                                   loopCount:0];&#xA;YYAnimatedImageView *imageView = [YYAnimatedImageView new];&#xA;imageView.size = CGSizeMake(img.size.width / 8, img.size.height / 12);&#xA;imageView.image = sprite;&#xA;[self.view addSubview:imageView];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Animation control&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;YYAnimatedImageView *imageView = ...;&#xA;// pause:&#xA;[imageView stopAnimating];&#xA;// play:&#xA;[imageView startAnimating];&#xA;// set frame index:&#xA;imageView.currentAnimatedImageIndex = 12;&#xA;// get current status&#xA;image.currentIsPlayingAnimation;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Image decoder&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Decode single frame:&#xA;NSData *data = [NSData dataWithContentsOfFile:@&#34;/tmp/image.webp&#34;];&#xA;YYImageDecoder *decoder = [YYImageDecoder decoderWithData:data scale:2.0];&#xA;UIImage image = [decoder frameAtIndex:0 decodeForDisplay:YES].image;&#xA;&#x9;&#xA;// Progressive:&#xA;NSMutableData *data = [NSMutableData new];&#xA;YYImageDecoder *decoder = [[YYImageDecoder alloc] initWithScale:2.0];&#xA;while(newDataArrived) {&#xA;   [data appendData:newData];&#xA;   [decoder updateData:data final:NO];&#xA;   if (decoder.frameCount &amp;gt; 0) {&#xA;       UIImage image = [decoder frameAtIndex:0 decodeForDisplay:YES].image;&#xA;       // progressive display...&#xA;   }&#xA;}&#xA;[decoder updateData:data final:YES];&#xA;UIImage image = [decoder frameAtIndex:0 decodeForDisplay:YES].image;&#xA;// final display...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Image encoder&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Encode still image:&#xA;YYImageEncoder *jpegEncoder = [[YYImageEncoder alloc] initWithType:YYImageTypeJPEG];&#xA;jpegEncoder.quality = 0.9;&#xA;[jpegEncoder addImage:image duration:0];&#xA;NSData jpegData = [jpegEncoder encode];&#xA; &#xA;// Encode animated image:&#xA;YYImageEncoder *webpEncoder = [[YYImageEncoder alloc] initWithType:YYImageTypeWebP];&#xA;webpEncoder.loopCount = 5;&#xA;[webpEncoder addImage:image0 duration:0.1];&#xA;[webpEncoder addImage:image1 duration:0.15];&#xA;[webpEncoder addImage:image2 duration:0.2];&#xA;NSData webpData = [webpEncoder encode];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Image type detection&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Get image type from image data&#xA;YYImageType type = YYImageDetectType(data); &#xA;if (type == YYImageTypePNG) ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Update cocoapods to the latest version.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;pod &#39;YYImage&#39;&lt;/code&gt; to your Podfile.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; or &lt;code&gt;pod update&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Import &amp;lt;YYImage/YYImage.h&amp;gt;.&lt;/li&gt; &#xA; &lt;li&gt;Notice: it doesn&#39;t include WebP subspec by default, if you want to support WebP format, you may add &lt;code&gt;pod &#39;YYImage/WebP&#39;&lt;/code&gt; to your Podfile.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;github &#34;ibireme/YYImage&#34;&lt;/code&gt; to your Cartfile.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update --platform ios&lt;/code&gt; and add the framework to your project.&lt;/li&gt; &#xA; &lt;li&gt;Import &amp;lt;YYImage/YYImage.h&amp;gt;.&lt;/li&gt; &#xA; &lt;li&gt;Notice: carthage framework doesn&#39;t include WebP component, if you want to support WebP format, use CocoaPods or install manually.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download all the files in the YYImage subdirectory.&lt;/li&gt; &#xA; &lt;li&gt;Add the source files to your Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;Link with required frameworks: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;UIKit&lt;/li&gt; &#xA;   &lt;li&gt;CoreFoundation&lt;/li&gt; &#xA;   &lt;li&gt;QuartzCore&lt;/li&gt; &#xA;   &lt;li&gt;AssetsLibrary&lt;/li&gt; &#xA;   &lt;li&gt;ImageIO&lt;/li&gt; &#xA;   &lt;li&gt;Accelerate&lt;/li&gt; &#xA;   &lt;li&gt;MobileCoreServices&lt;/li&gt; &#xA;   &lt;li&gt;libz&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Import &lt;code&gt;YYImage.h&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Notice: if you want to support WebP format, you may add &lt;code&gt;Vendor/WebP.framework&lt;/code&gt;(static library) to your Xcode project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: Why I can&#39;t display WebP image?&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: Make sure you added the &lt;code&gt;WebP.framework&lt;/code&gt; in your project. You may call &lt;code&gt;YYImageWebPAvailable()&lt;/code&gt; to check whether the WebP subspec is installed correctly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: Why I can&#39;t play APNG animation?&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: You should disable the &lt;code&gt;Compress PNG Files&lt;/code&gt; and &lt;code&gt;Remove Text Metadata From PNG Files&lt;/code&gt; in your project&#39;s build settings. Or you can rename your APNG file&#39;s extension name with &lt;code&gt;apng&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Full API documentation is available on &lt;a href=&#34;http://cocoadocs.org/docsets/YYImage/&#34;&gt;CocoaDocs&lt;/a&gt;.&lt;br&gt; You can also install documentation locally using &lt;a href=&#34;https://github.com/tomaz/appledoc&#34;&gt;appledoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;This library requires &lt;code&gt;iOS 6.0+&lt;/code&gt; and &lt;code&gt;Xcode 8.0+&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;YYImage is provided under the MIT license. See LICENSE file for details.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;br&gt;&lt;br&gt;&lt;/h2&gt; &#xA;&lt;h1&gt;中文介绍&lt;/h1&gt; &#xA;&lt;p&gt;YYImage: 功能强大的 iOS 图像框架。&lt;br&gt; (该项目是 &lt;a href=&#34;https://github.com/ibireme/YYKit&#34;&gt;YYKit&lt;/a&gt; 组件之一)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/ibireme/YYImage/master/Demo/YYImageDemo/niconiconi@2x.gif&#34; alt=&#34;niconiconi~&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;特性&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;支持以下类型动画图像的播放/编码/解码:&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WebP, APNG, GIF。&lt;/li&gt; &#xA; &lt;li&gt;支持以下类型静态图像的显示/编码/解码:&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WebP, PNG, GIF, JPEG, JP2, TIFF, BMP, ICO, ICNS。&lt;/li&gt; &#xA; &lt;li&gt;支持以下类型图片的渐进式/逐行扫描/隔行扫描解码:&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PNG, GIF, JPEG, BMP。&lt;/li&gt; &#xA; &lt;li&gt;支持多张图片构成的帧动画播放，支持单张图片的 sprite sheet 动画。&lt;/li&gt; &#xA; &lt;li&gt;高效的动态内存缓存管理，以保证高性能低内存的动画播放。&lt;/li&gt; &#xA; &lt;li&gt;完全兼容 UIImage 和 UIImageView，使用方便。&lt;/li&gt; &#xA; &lt;li&gt;保留可扩展的接口，以支持自定义动画。&lt;/li&gt; &#xA; &lt;li&gt;每个类和方法都有完善的文档注释。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;用法&lt;/h1&gt; &#xA;&lt;h3&gt;显示动画类型的图片&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 文件: ani@3x.gif&#xA;UIImage *image = [YYImage imageNamed:@&#34;ani.gif&#34;];&#xA;UIImageView *imageView = [[YYAnimatedImageView alloc] initWithImage:image];&#xA;[self.view addSubview:imageView];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;播放帧动画&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 文件: frame1.png, frame2.png, frame3.png&#xA;NSArray *paths = @[@&#34;/ani/frame1.png&#34;, @&#34;/ani/frame2.png&#34;, @&#34;/ani/frame3.png&#34;];&#xA;NSArray *times = @[@0.1, @0.2, @0.1];&#xA;UIImage *image = [YYFrameImage alloc] initWithImagePaths:paths frameDurations:times repeats:YES];&#xA;UIImageView *imageView = [YYAnimatedImageView alloc] initWithImage:image];&#xA;[self.view addSubview:imageView];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;播放 sprite sheet 动画&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 8 * 12 sprites in a single sheet image&#xA;UIImage *spriteSheet = [UIImage imageNamed:@&#34;sprite-sheet&#34;];&#xA;NSMutableArray *contentRects = [NSMutableArray new];&#xA;NSMutableArray *durations = [NSMutableArray new];&#xA;for (int j = 0; j &amp;lt; 12; j++) {&#xA;   for (int i = 0; i &amp;lt; 8; i++) {&#xA;       CGRect rect;&#xA;       rect.size = CGSizeMake(img.size.width / 8, img.size.height / 12);&#xA;       rect.origin.x = img.size.width / 8 * i;&#xA;       rect.origin.y = img.size.height / 12 * j;&#xA;       [contentRects addObject:[NSValue valueWithCGRect:rect]];&#xA;       [durations addObject:@(1 / 60.0)];&#xA;   }&#xA;}&#xA;YYSpriteSheetImage *sprite;&#xA;sprite = [[YYSpriteSheetImage alloc] initWithSpriteSheetImage:img&#xA;                                                contentRects:contentRects&#xA;                                              frameDurations:durations&#xA;                                                   loopCount:0];&#xA;YYAnimatedImageView *imageView = [YYAnimatedImageView new];&#xA;imageView.size = CGSizeMake(img.size.width / 8, img.size.height / 12);&#xA;imageView.image = sprite;&#xA;[self.view addSubview:imageView];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;动画播放控制&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;YYAnimatedImageView *imageView = ...;&#xA;// 暂停:&#xA;[imageView stopAnimating];&#xA;// 播放:&#xA;[imageView startAnimating];&#xA;// 设置播放进度:&#xA;imageView.currentAnimatedImageIndex = 12;&#xA;// 获取播放状态:&#xA;image.currentIsPlayingAnimation;&#xA;//上面两个属性都支持 KVO。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;图片解码&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 解码单帧图片:&#xA;NSData *data = [NSData dataWithContentsOfFile:@&#34;/tmp/image.webp&#34;];&#xA;YYImageDecoder *decoder = [YYImageDecoder decoderWithData:data scale:2.0];&#xA;UIImage image = [decoder frameAtIndex:0 decodeForDisplay:YES].image;&#xA;&#x9;&#xA;// 渐进式图片解码 (可用于图片下载显示):&#xA;NSMutableData *data = [NSMutableData new];&#xA;YYImageDecoder *decoder = [[YYImageDecoder alloc] initWithScale:2.0];&#xA;while(newDataArrived) {&#xA;   [data appendData:newData];&#xA;   [decoder updateData:data final:NO];&#xA;   if (decoder.frameCount &amp;gt; 0) {&#xA;       UIImage image = [decoder frameAtIndex:0 decodeForDisplay:YES].image;&#xA;       // progressive display...&#xA;   }&#xA;}&#xA;[decoder updateData:data final:YES];&#xA;UIImage image = [decoder frameAtIndex:0 decodeForDisplay:YES].image;&#xA;// final display...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;图片编码&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 编码静态图 (支持各种常见图片格式):&#xA;YYImageEncoder *jpegEncoder = [[YYImageEncoder alloc] initWithType:YYImageTypeJPEG];&#xA;jpegEncoder.quality = 0.9;&#xA;[jpegEncoder addImage:image duration:0];&#xA;NSData jpegData = [jpegEncoder encode];&#xA; &#xA;// 编码动态图 (支持 GIF/APNG/WebP):&#xA;YYImageEncoder *webpEncoder = [[YYImageEncoder alloc] initWithType:YYImageTypeWebP];&#xA;webpEncoder.loopCount = 5;&#xA;[webpEncoder addImage:image0 duration:0.1];&#xA;[webpEncoder addImage:image1 duration:0.15];&#xA;[webpEncoder addImage:image2 duration:0.2];&#xA;NSData webpData = [webpEncoder encode];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;图片类型探测&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 获取图片类型&#xA;YYImageType type = YYImageDetectType(data); &#xA;if (type == YYImageTypePNG) ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;安装&lt;/h1&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;将 cocoapods 更新至最新版本.&lt;/li&gt; &#xA; &lt;li&gt;在 Podfile 中添加 &lt;code&gt;pod &#39;YYImage&#39;&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;执行 &lt;code&gt;pod install&lt;/code&gt; 或 &lt;code&gt;pod update&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;导入 &amp;lt;YYImage/YYImage.h&amp;gt;。&lt;/li&gt; &#xA; &lt;li&gt;注意：pod 配置并没有包含 WebP 组件, 如果你需要支持 WebP，可以在 Podfile 中添加 &lt;code&gt;pod &#39;YYImage/WebP&#39;&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在 Cartfile 中添加 &lt;code&gt;github &#34;ibireme/YYImage&#34;&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;执行 &lt;code&gt;carthage update --platform ios&lt;/code&gt; 并将生成的 framework 添加到你的工程。&lt;/li&gt; &#xA; &lt;li&gt;导入 &amp;lt;YYImage/YYImage.h&amp;gt;。&lt;/li&gt; &#xA; &lt;li&gt;注意：carthage framework 并没有包含 WebP 组件。如果你需要支持 WebP，可以用 CocoaPods 安装，或者手动安装。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;手动安装&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;下载 YYImage 文件夹内的所有内容。&lt;/li&gt; &#xA; &lt;li&gt;将 YYImage 内的源文件添加(拖放)到你的工程。&lt;/li&gt; &#xA; &lt;li&gt;链接以下 frameworks: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;UIKit&lt;/li&gt; &#xA;   &lt;li&gt;CoreFoundation&lt;/li&gt; &#xA;   &lt;li&gt;QuartzCore&lt;/li&gt; &#xA;   &lt;li&gt;AssetsLibrary&lt;/li&gt; &#xA;   &lt;li&gt;ImageIO&lt;/li&gt; &#xA;   &lt;li&gt;Accelerate&lt;/li&gt; &#xA;   &lt;li&gt;MobileCoreServices&lt;/li&gt; &#xA;   &lt;li&gt;libz&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;导入 &lt;code&gt;YYImage.h&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;注意：如果你需要支持 WebP，可以将 &lt;code&gt;Vendor/WebP.framework&lt;/code&gt;(静态库) 加入你的工程。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;常见问题&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: 为什么我不能显示 WebP 图片？&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: 确保 &lt;code&gt;WebP.framework&lt;/code&gt; 已经被添加到你的工程内了。你可以调用 &lt;code&gt;YYImageWebPAvailable()&lt;/code&gt; 来检查一下 WebP 组件是否被正确安装。&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: 为什么我不能播放 APNG 动画？&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: 你应该禁用 Build Settings 中的 &lt;code&gt;Compress PNG Files&lt;/code&gt; 和 &lt;code&gt;Remove Text Metadata From PNG Files&lt;/code&gt;. 或者你也可以把 APNG 文件的扩展名改为&lt;code&gt;apng&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;文档&lt;/h1&gt; &#xA;&lt;p&gt;你可以在 &lt;a href=&#34;http://cocoadocs.org/docsets/YYImage/&#34;&gt;CocoaDocs&lt;/a&gt; 查看在线 API 文档，也可以用 &lt;a href=&#34;https://github.com/tomaz/appledoc&#34;&gt;appledoc&lt;/a&gt; 本地生成文档。&lt;/p&gt; &#xA;&lt;h1&gt;系统要求&lt;/h1&gt; &#xA;&lt;p&gt;该项目最低支持 &lt;code&gt;iOS 6.0&lt;/code&gt; 和 &lt;code&gt;Xcode 8.0&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h1&gt;许可证&lt;/h1&gt; &#xA;&lt;p&gt;YYImage 使用 MIT 许可证，详情见 LICENSE 文件。&lt;/p&gt; &#xA;&lt;h1&gt;相关链接&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.ibireme.com/2015/11/02/mobile_image_benchmark/&#34;&gt;移动端图片格式调研&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.ibireme.com/2015/11/02/ios_image_tips/&#34;&gt;iOS 处理图片的一些小 Tip&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>