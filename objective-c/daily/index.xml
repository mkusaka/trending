<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-16T01:50:59Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>toamitkumar/iOS5-UI-Customization</title>
    <updated>2022-08-16T01:50:59Z</updated>
    <id>tag:github.com,2022-08-16:/toamitkumar/iOS5-UI-Customization</id>
    <link href="https://github.com/toamitkumar/iOS5-UI-Customization" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS5-UI-Customization&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>sureJiang/MSCrashProtector</title>
    <updated>2022-08-16T01:50:59Z</updated>
    <id>tag:github.com,2022-08-16:/sureJiang/MSCrashProtector</id>
    <link href="https://github.com/sureJiang/MSCrashProtector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Global protection scheme..&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MSCrashProtector&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apple.com/nl/ios/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/YYKit.svg?style=flat&#34; alt=&#34;platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JZJJZJ/MSCrashProtector/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?style=flat&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JZJJZJ/MSCrashProtector.git&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/AFNetworking.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JZJJZJ/MSCrashProtector.git&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/badges/shields.svg?style=social&amp;amp;logo=github&amp;amp;label=Stars&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An Global protection scheme..&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Cocoapods(Recommended)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;pod &#39;MSCrashProtector&#39;&lt;/code&gt; to your Podfile.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add all files under &lt;code&gt;MSCrashProtector&lt;/code&gt; to your project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 5.0 and greater&lt;/li&gt; &#xA; &lt;li&gt;ARC/MRC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How To Use&lt;/h2&gt; &#xA;&lt;h3&gt;Objective-C&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;&#xA;    #import &#34;MSCrashProtector.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;        &#xA;    //NSArray&#xA;    NSArray* arr = @[@&#34;1&#34;];&#xA;    [arr objectAtIndexSafe:10];&#xA;    id obj = [arr objectAtIndex:0 kindOfClass:[NSString class]];&#xA;    NSLog(@&#34;%@&#34;,obj);&#xA;    &#xA;    //NSMutableArray&#xA;    NSMutableArray* marr = [NSMutableArray array];&#xA;    [marr addObjectSafe:nil];&#xA;    [marr removeObjectAtIndexInBoundary:100];&#xA;    [marr insertObject:@111 atIndexInBoundary:100];&#xA;&#xA;    &#xA;    //NSDictionary&#xA;    NSDictionary* dic = [NSDictionary dictionary];&#xA;    [dic objectForKey:nil defaultValue:@&#34;test&#34;];&#xA;&#xA;    //NSMutableDictionary&#xA;    NSMutableDictionary* mdic = [NSMutableDictionary dictionary];&#xA;    [mdic setObjectSafe:nil forKey:nil];&#xA;    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MSCrashProtector is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wuba/WBBlades</title>
    <updated>2022-08-16T01:50:59Z</updated>
    <id>tag:github.com,2022-08-16:/wuba/WBBlades</id>
    <link href="https://github.com/wuba/WBBlades" rel="alternate"></link>
    <summary type="html">&lt;p&gt;基于Mach-O解析技术的包大小占比分析、基于反汇编的Objective-C &amp; Swift无用代码（冗余类）检测、点对点崩溃解析 (Technology app size analysis tool based on Mach-O, unused code (unused class) detection tool based on __text disassembly, point-to-point crash analysis tool based on dSYM or without dSYM.)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuba/WBBlades/master/README_CN.md&#34;&gt;简体中文&lt;/a&gt; | &lt;strong&gt;English&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;WBBlades is a tool set based on &lt;code&gt;Mach-O&lt;/code&gt; file parsing, including useless code detection (supports &lt;code&gt;OC&lt;/code&gt; and &lt;code&gt;Swift&lt;/code&gt;), package size analysis (supports a single static library/dynamic library), point-to-point crash analysis ( analyse system crash log, based on symbol file and without symbol files). It mainly uses __Text assembly code analysis, architecture extraction, DYSM file stripping, symbol table stripping, crash file (ips) analysis technology.&lt;/p&gt; &#xA;&lt;p&gt;Version 3.0 implements a comprehensive visual implementation of the toolset based on the original command-line-based operation of the above tools, and is designed for R&amp;amp;D efficiency improvement. In addition, in the analysis of difficult crashes, for some crashes that are not easy to reproduce and cannot be collected by general tools (the app process is directly killed by the operating system), a point-to-point crash analysis is provided.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/wuba/WBBlades.git&#xA;$ cd WBBlades&#xA;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage of Visualization Tool&lt;/h3&gt; &#xA;&lt;p&gt;Target selects &#34;WBBladesCrashApp&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Click the button on the left function area, select a tool such as Useless Classes Detection,Application Size Analysis,etc., and operate according to the prompts in the tool, and the result will be output to the text box;&lt;/p&gt; &#xA;&lt;h3&gt;Usage for Mac Command Line&lt;/h3&gt; &#xA;&lt;p&gt;Target selects &#34;WBBlades&#34;，Compile and build to generate command line tools Copy the generated product &#34;blades&#34; to /usr/local/bin，as follows： sudo cp ${Your_BUILD_DIR}/blades /usr/local/bin&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Unused Code Detection ObjC &amp;amp; Swift&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ blades -unused xxx.app -from xxx.a xxx.a ....&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;-from indicating that only the unused code in the following static libraries is analyzed. Without this parameter, the default is all classes in the APP.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;App Size Analysis (Directly measure the size of .a or .framework after linking)&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ blades -size xxx.a xxx.framework ....&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Supporting input a folder path, all static libraries under the folder will be analyzed.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Log Recovery without dSYM File (In the case of missing dSYM file, try &lt;code&gt;ObjC&lt;/code&gt; crash stack symbolization, &lt;code&gt;Swift&lt;/code&gt; is not supported)&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ blades -symbol xxx.app -logPath xxx.ips&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tool Features&lt;/h2&gt; &#xA;&lt;h3&gt;Unused code (unused class) detection support range&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Support&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Code Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ObjC classes&#39;s static call&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[MyClass new]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ObjC classes&#39;s dynamic call&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;NSClassFromString(@&#34;MyClass&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ObjC dynamic call througn string concatenation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;NSClassFromString(@&#34;My&#34; + @&#34;Class&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ObjC load method&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;+load{...} &lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ObjC &amp;amp; Swift being inherited&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;SomClass : MyClass&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ObjC &amp;amp; Swift being properties&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;@property (strong,atomic) MyClass *obj;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift class direct call&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;MyClass.init()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift call using runtime&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;objc_getClass(&#34;Demo.MyClass&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift generic parameters&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;SomeClass&amp;lt;MyClass&amp;gt;.init()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swfit class dynamic call in ObjC&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;NSClassFromString(&#34;Demo.MyClass&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift type declaration in the container&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;var array:[MyClass]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift multiple nesting&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt; class SomeClass {class MyClass {...} ...}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;App Size Analysis Tool&lt;/h3&gt; &#xA;&lt;p&gt;Supports quick detection of the linked size of a static library. No need to compile and link. &lt;strong&gt;For example: If you want to know how much app size will increase when an SDK is imported or updated, you can use &lt;code&gt;blades -size&lt;/code&gt; to estimate the size&lt;/strong&gt;, without the need to connect the SDK to compile and link successfully to calculate.&lt;/p&gt; &#xA;&lt;h3&gt;Crash Log Symbolization Tool Without dSYM File&lt;/h3&gt; &#xA;&lt;p&gt;In the case of losing the dSYM file, try to restore the log via &lt;code&gt;blades -symbol&lt;/code&gt;. **For example, in an app packaging, the dSYM file is cleared after a period of time, but the app file is retained. In this case, you can consider using blades for symbolization. **Before using the tool, pay attention to a few points:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If your app is a debug package or a package that does not strip the symbol table, you can use &lt;code&gt;dsymutil app -o xx.dSYM &lt;/code&gt;to extract the symbol table. Then use the symbol table to symbolize the log.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This tool only supports ObjC, and its principle is to determine the function of the crash by analyzing the address of the ObjC method in Mach-O. Therefore, it is not suitable for Swfit, C, and C++. In addition, tools are not omnipotent, and are only used as emergency supplementary technical means. In daily situations, it is recommended to use symbol tables for log symbolization.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing &amp;amp; Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We sincerely hope that developers can provide valuable comments and suggestions, and developers can provide feedback on suggestions and problems by submitting PR or Issue.&lt;/p&gt; &#xA;&lt;h2&gt;Related Technical Articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/HWJArO5y9G20jb2pqaAQWQ&#34;&gt;Open Source｜WBBlades：APP Analysis Tool Set Based on Mach-O File Analysis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/tXxhnDKerobyxoWuEBGjNQ&#34;&gt;Important Updates - Designed to Improve Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/tGvE-2flzhm4skkrfbUIBA&#34;&gt;Point to Point Analyze and Governance of Crashes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/csdnnews/article/details/100354658/&#34;&gt;58tongcheng Size Analysis and Statistics for iOS Client Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/c41ad330e81c&#34;&gt;Unused Class Detection Based on Mach-O Disassembly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/ef0ff6ee6bc6&#34;&gt;The Storage Difference between Swift and ObjC from the Perspective of Mach-O&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/mjwOVdPZUlEMgLUNdT6o9g&#34;&gt;New Approach to Swift Hook - Virtual Method Table&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;GitHub: &lt;a href=&#34;https://github.com/aquynh/capstone&#34; title=&#34;GitHub for capstone&#34;&gt;https://github.com/aquynh/capstone&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub: &lt;a href=&#34;https://github.com/Sunnyyoung/SYFlatButton&#34; title=&#34;GitHub for SYFlatButton&#34;&gt;https://github.com/Sunnyyoung/SYFlatButton&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DWARF: &lt;a href=&#34;https://www.prevanders.net/dwarf.html#releases&#34; title=&#34;Source Code for DWARF&#34;&gt;https://www.prevanders.net/dwarf.html#releases&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>