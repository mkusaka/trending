<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-27T01:40:43Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>questbeat/QBImagePicker</title>
    <updated>2022-09-27T01:40:43Z</updated>
    <id>tag:github.com,2022-09-27:/questbeat/QBImagePicker</id>
    <link href="https://github.com/questbeat/QBImagePicker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A clone of UIImagePickerController with multiple selection support.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;QBImagePicker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A clone of UIImagePickerController with multiple selection support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/questbeat/QBImagePicker/master/screenshot01.png&#34; alt=&#34;screenshot01.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/questbeat/QBImagePicker/master/screenshot02.png&#34; alt=&#34;screenshot02.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allows multiple selection of photos and videos&lt;/li&gt; &#xA; &lt;li&gt;Fast and memory-efficient scrolling&lt;/li&gt; &#xA; &lt;li&gt;Provides similar user interface to the built-in image picker&lt;/li&gt; &#xA; &lt;li&gt;Customizable (grid size, navigation message, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Supports both portrait mode and landscape mode&lt;/li&gt; &#xA; &lt;li&gt;Compatible with iPhone 6/6Plus, and iPad&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version &lt;code&gt;&amp;gt;= 3.0.0&lt;/code&gt; : iOS 8 or later (Using PhotoKit)&lt;/li&gt; &#xA; &lt;li&gt;Version &lt;code&gt;&amp;lt; 3.0.0&lt;/code&gt; : iOS 6 or later (Using AssetsLibrary)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBImagePickerController *imagePickerController = [QBImagePickerController new];&#xA;imagePickerController.delegate = self;&#xA;imagePickerController.allowsMultipleSelection = YES;&#xA;imagePickerController.maximumNumberOfSelection = 6;&#xA;imagePickerController.showsNumberOfSelectedAssets = YES;&#xA;&#xA;[self presentViewController:imagePickerController animated:YES completion:NULL];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;pod &#34;QBImagePickerController&#34;&lt;/code&gt; to Podfile&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;#import &amp;lt;QBImagePickerController/QBImagePickerController.h&amp;gt;&lt;/code&gt; to your code&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;github &#34;questbeat/QBImagePicker&#34;&lt;/code&gt; to Cartfile&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;#import &amp;lt;QBImagePicker/QBImagePicker.h&amp;gt;&lt;/code&gt; to your code&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Basic&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement &lt;code&gt;QBImagePickerControllerDelegate&lt;/code&gt; methods&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create &lt;code&gt;QBImagePickerController&lt;/code&gt; object&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;self&lt;/code&gt; to the &lt;code&gt;delegate&lt;/code&gt; property&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Show the picker by using &lt;code&gt;presentViewController:animated:completion:&lt;/code&gt;&lt;/p&gt; &lt;p&gt;QBImagePickerController *imagePickerController = [QBImagePickerController new]; imagePickerController.delegate = self;&lt;/p&gt; &lt;p&gt;[self presentViewController:imagePickerController animated:YES completion:NULL];&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Delegate Methods&lt;/h3&gt; &#xA;&lt;h4&gt;Getting the selected assets&lt;/h4&gt; &#xA;&lt;p&gt;Implement &lt;code&gt;qb_imagePickerController:didFinishPickingAssets:&lt;/code&gt; to get the assets selected by the user.&lt;br&gt; This method will be called when the user finishes picking assets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (void)qb_imagePickerController:(QBImagePickerController *)imagePickerController didFinishPickingAssets:(NSArray *)assets {&#xA;    for (PHAsset *asset in assets) {&#xA;        // Do something with the asset&#xA;    }&#xA;&#xA;    [self dismissViewControllerAnimated:YES completion:NULL];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Getting notified when the user cancels&lt;/h4&gt; &#xA;&lt;p&gt;Implement &lt;code&gt;qb_imagePickerControllerDidCancel:&lt;/code&gt; to get notified when the user hits &#34;Cancel&#34; button.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (void)qb_imagePickerControllerDidCancel:(QBImagePickerController *)imagePickerController {&#xA;    [self dismissViewControllerAnimated:YES completion:NULL];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Getting notified when the selection is changed&lt;/h4&gt; &#xA;&lt;p&gt;You can handle the change of user&#39;s selection by implementing these methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (BOOL)qb_imagePickerController:(QBImagePickerController *)imagePickerController shouldSelectAsset:(PHAsset *)asset;&#xA;- (void)qb_imagePickerController:(QBImagePickerController *)imagePickerController didSelectAsset:(PHAsset *)asset;&#xA;- (void)qb_imagePickerController:(QBImagePickerController *)imagePickerController didDeselectAsset:(PHAsset *)asset;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;h4&gt;Selection mode&lt;/h4&gt; &#xA;&lt;p&gt;When &lt;code&gt;allowsMultipleSelection&lt;/code&gt; is &lt;code&gt;YES&lt;/code&gt;, the user can select multiple photos.&lt;br&gt; The default value is &lt;code&gt;NO&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;imagePickerController.allowsMultipleSelection = YES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can limit the number of selection by using &lt;code&gt;minimumNumberOfSelection&lt;/code&gt; and &lt;code&gt;maximumNumberOfSelection&lt;/code&gt; property.&lt;br&gt; The default value is &lt;code&gt;0&lt;/code&gt;, which means the number of selection is unlimited.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;imagePickerController.minimumNumberOfSelection = 3;&#xA;imagePickerController.maximumNumberOfSelection = 6;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Specify the albums to be shown&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;assetCollectionSubtypes&lt;/code&gt; property to specify the albums to be shown.&lt;br&gt; The code below shows the default value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;imagePickerController.assetCollectionSubtypes = @[&#xA;    @(PHAssetCollectionSubtypeSmartAlbumUserLibrary), // Camera Roll&#xA;    @(PHAssetCollectionSubtypeAlbumMyPhotoStream), // My Photo Stream&#xA;    @(PHAssetCollectionSubtypeSmartAlbumPanoramas), // Panoramas&#xA;    @(PHAssetCollectionSubtypeSmartAlbumVideos), // Videos&#xA;    @(PHAssetCollectionSubtypeSmartAlbumBursts) // Bursts&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The albums will be ordered as you specified.&lt;br&gt; User&#39;s albums are always shown after the smart albums.&lt;/p&gt; &#xA;&lt;h4&gt;Specify the media type to be shown&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;mediaType&lt;/code&gt; to filter the assets to be shown.&lt;br&gt; The default value is &lt;code&gt;QBImagePickerMediaTypeAny&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;imagePickerController.mediaType = QBImagePickerMediaTypeVideo;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Showing information&lt;/h4&gt; &#xA;&lt;p&gt;There are some properties to show helpful information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;imagePickerController.prompt = @&#34;Select the photos you want to upload!&#34;;&#xA;imagePickerController.showsNumberOfSelectedAssets = YES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Grid size&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;numberOfColumnsInPortrait&lt;/code&gt; and &lt;code&gt;numberOfColumnsInLandscape&lt;/code&gt; to change the grid size.&lt;br&gt; The code below shows the default value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;imagePickerController.numberOfColumnsInPortrait = 4;&#xA;imagePickerController.numberOfColumnsInLandscape = 7;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2015 Katsuma Tanaka&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JonasGessner/JGProgressHUD</title>
    <updated>2022-09-27T01:40:43Z</updated>
    <id>tag:github.com,2022-09-27:/JonasGessner/JGProgressHUD</id>
    <link href="https://github.com/JonasGessner/JGProgressHUD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An elegant and simple progress HUD for iOS and tvOS, compatible with Swift and ObjC.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;JGProgressHUD&lt;/h2&gt; &#xA;&lt;p&gt;An elegant and simple progress HUD for iOS and tvOS. &lt;strong&gt;Supports Swift and Objective-C!&lt;/strong&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/JonasGessner/JGProgressHUD/raw/master/Examples/Screenshots/Presentation.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The ultimate progress HUD for iOS and tvOS is here: JGProgressHUD!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Plug and play: Simple integration, easy to use, few lines of code required.&lt;/li&gt; &#xA; &lt;li&gt;Easily customizable (custom animations, indicator views and more).&lt;/li&gt; &#xA; &lt;li&gt;Uses &lt;code&gt;UIVisualEffectView&lt;/code&gt; and &lt;code&gt;UIMotionEffect&lt;/code&gt; for a native look.&lt;/li&gt; &#xA; &lt;li&gt;Uses AutoLayout to provide a fully dynamic layout.&lt;/li&gt; &#xA; &lt;li&gt;Detects and repositions when keyboard appears/disappears.&lt;/li&gt; &#xA; &lt;li&gt;Dark mode support — automatically changes appearance.&lt;/li&gt; &#xA; &lt;li&gt;Well documented and maintained.&lt;/li&gt; &#xA; &lt;li&gt;Voice Over/&lt;code&gt;UIAccessibility&lt;/code&gt; support.&lt;/li&gt; &#xA; &lt;li&gt;Backward compatibility to iOS 8.&lt;/li&gt; &#xA; &lt;li&gt;Can be used with Swift and Objective-C.&lt;/li&gt; &#xA; &lt;li&gt;And most importantly, it looks good!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Download the source code and open the &lt;a href=&#34;https://raw.githubusercontent.com/JonasGessner/JGProgressHUD/master/Examples&#34;&gt;Examples&lt;/a&gt; project to try JGProgressHUD and see all of its features in action!&lt;/p&gt; &#xA;&lt;p&gt;JGProgressHUD can also be used with SwiftUI. See &lt;a href=&#34;https://github.com/JonasGessner/JGProgressHUD-SwiftUI&#34;&gt;JGProgressHUD-SwiftUI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JonasGessner/JGProgressHUD/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/JonasGessner/JGProgressHUD.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/JGProgressHUD&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/JGProgressHUD.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-Compatible-brightgreen&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/JonasGessner/JGProgressHUD/raw/master/Examples/Screenshots/demo1.gif&#34; width=&#34;250&#34;&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;img src=&#34;https://github.com/JonasGessner/JGProgressHUD/raw/master/Examples/Screenshots/demo2.gif&#34; width=&#34;250&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Showing indeterminate progress:&lt;/h4&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;JGProgressHUD *HUD = [[JGProgressHUD alloc] init];&#xA;HUD.textLabel.text = @&#34;Loading&#34;;&#xA;[HUD showInView:self.view];&#xA;[HUD dismissAfterDelay:3.0];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let hud = JGProgressHUD()&#xA;hud.textLabel.text = &#34;Loading&#34;&#xA;hud.show(in: self.view)&#xA;hud.dismiss(afterDelay: 3.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This displays a dark HUD with an activity indicator and the title &#34;Loading&#34;. The HUD is presented with a fade animation and is dismissed after 3 seconds with a fade animation.&lt;/p&gt; &#xA;&lt;h4&gt;Showing an error message:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;JGProgressHUD *HUD = [[JGProgressHUD alloc] init];&#xA;HUD.textLabel.text = @&#34;Error&#34;;&#xA;HUD.indicatorView = [[JGProgressHUDErrorIndicatorView alloc] init]; //JGProgressHUDSuccessIndicatorView is also available&#xA;[HUD showInView:self.view];&#xA;[HUD dismissAfterDelay:3.0];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Showing determinate progress:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;JGProgressHUD *HUD = [[JGProgressHUD alloc] init];&#xA;HUD.indicatorView = [[JGProgressHUDPieIndicatorView alloc] init]; //Or JGProgressHUDRingIndicatorView&#xA;HUD.progress = 0.5f;&#xA;[HUD showInView:self.view];&#xA;[HUD dismissAfterDelay:3.0];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;For more examples, including in Swift, see &lt;a href=&#34;https://raw.githubusercontent.com/JonasGessner/JGProgressHUD/master/Examples&#34;&gt;Examples&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; You should always show &lt;code&gt;JGProgressHUD&lt;/code&gt; in a &lt;code&gt;UIViewController&lt;/code&gt; view.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h3&gt;Styles:&lt;/h3&gt; &#xA;&lt;p&gt;JGProgressHUD can be displayed in 3 styles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extra Light&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Light&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dark&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The style can also be set automatically according to the current &lt;code&gt;UITraitCollection&lt;/code&gt; (dark mode). Use the initializer &lt;code&gt;[[JGProgressHUD alloc] init]&lt;/code&gt;/&lt;code&gt;JGProgressHUD()&lt;/code&gt; to take advantage of the automatic style.&lt;/p&gt; &#xA;&lt;h3&gt;Indicator Views:&lt;/h3&gt; &#xA;&lt;p&gt;By default a HUD will display an indeterminate progress indicator. The indicator view can be completely hidden by setting the &lt;code&gt;indicatorView&lt;/code&gt; property to &lt;code&gt;nil&lt;/code&gt;. These indicator views are available by default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Indeterminate progress indicator&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pie progress indicator&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ring progress indicator&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Success indicator&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Error indicator&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Image indicator&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Custom indicator views can be created by subclassing &lt;code&gt;JGProgressHUDIndicatorView&lt;/code&gt;.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Animations:&lt;/h3&gt; &#xA;&lt;p&gt;By default a HUD will use a fade animation. Several parameters can be altered such as animation duration or animation curve. A HUD can be displayed without animation and different animations can be used. These animations are available by default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fade&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zoom and Fade&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Custom animations can be created by subclassing &lt;code&gt;JGProgressHUDAnimation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To dim the content behind the HUD set your dim color as &lt;code&gt;backgroundColor&lt;/code&gt; of your &lt;code&gt;JGProgressHUD&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager:&lt;/h3&gt; &#xA;&lt;p&gt;In Xcode, use the menu File &amp;gt; Swift Packages &amp;gt; Add Package Dependency... and enter the package URL &lt;code&gt;https://github.com/JonasGessner/JGProgressHUD.git&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is the recommended way of installing JGProgressHUD.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage:&lt;/h3&gt; &#xA;&lt;p&gt;In your &lt;code&gt;Cartfile&lt;/code&gt; add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;JonasGessner/JGProgressHUD&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods:&lt;/h3&gt; &#xA;&lt;p&gt;In your &lt;code&gt;Podfile&lt;/code&gt; add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;JGProgressHUD&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual Installation:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Drag the &lt;code&gt;JGProgressHUD.xcodeproj&lt;/code&gt; file into your Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;JGProgressHUD.framework&lt;/code&gt; to &#34;Embedded Binaries&#34; in the &#34;General&#34; tab of your target.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;After installing import the module where you want to use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@import JGProgressHUD;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import JGProgressHUD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/JonasGessner/JGProgressHUD/master/Examples&#34;&gt;Examples&lt;/a&gt; project for an example implementation of JGProgressHUD as framework.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Base SDK of iOS/tvOS/macCatalyst 13.0 or higher.&lt;/li&gt; &#xA; &lt;li&gt;Deployment target of iOS 8.0, tvOS 9.0, macCatalyst 13.0, or higher.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;JGProgressHUD can also be used by projects written in Swift. See &lt;a href=&#34;https://github.com/JonasGessner/JGProgressHUD#installation&#34;&gt;Installation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Detailed documentation can be found on &lt;a href=&#34;http://jonasgessner.github.io/JGProgressHUD/&#34;&gt;here&lt;/a&gt;.&lt;br&gt;&lt;br&gt; Each class and method is well documented, making it easy to quickly get a good overview. To start, see &lt;a href=&#34;https://raw.githubusercontent.com/JonasGessner/JGProgressHUD/master/JGProgressHUD/JGProgressHUD/include/JGProgressHUD.h&#34;&gt;JGProgressHUD.h&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License.&lt;br&gt; © 2014-2020, Jonas Gessner.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Created and maintained by Jonas Gessner, © 2014-2020.&lt;br&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>moengage/MoEngage-iOS-SDK</title>
    <updated>2022-09-27T01:40:43Z</updated>
    <id>tag:github.com,2022-09-27:/moengage/MoEngage-iOS-SDK</id>
    <link href="https://github.com/moengage/MoEngage-iOS-SDK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS SDK for app integrations&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/moengage/MoEngage-iOS-SDK/raw/master/Images/moe_logo_blue.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;MoEngage-iOS-SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/MoEngage-iOS-SDK&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/MoEngage-iOS-SDK.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/MoEngage-iOS-SDK&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/MoEngage-iOS-SDK.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MoEngage provides a platform which enables companies to deliver personalized interactions to their users through push notifications, in-app campaigns, email campaigns and other re-targeting channels.&lt;/p&gt; &#xA;&lt;h2&gt;Integration&lt;/h2&gt; &#xA;&lt;h3&gt;Integration through CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;CocoaPods is a dependency manager for Objective C &amp;amp; Swift projects and makes integration easier.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don&#39;t have CocoaPods installed, you can do it by executing the following line in your terminal.&lt;/p&gt; &lt;p&gt;&lt;code&gt;sudo gem install cocoapods&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don&#39;t have a Podfile, create a plain text file named Podfile in the Xcode project directory with the following content, making sure to set the platform and version that matches your app.&lt;/p&gt; &lt;p&gt;&lt;code&gt;pod &#39;MoEngage-iOS-SDK&#39;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install MoEngage SDK by executing the following in the Xcode project directory.&lt;/p&gt; &lt;p&gt;&lt;code&gt;pod install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, open your project workspace and check if MoEngage SDK is properly added.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;SDK Initialization&lt;/h2&gt; &#xA;&lt;p&gt;Login to your MoEngage account, go to &lt;strong&gt;Settings&lt;/strong&gt; in the left panel of the dashboard. Under App Settings, you will find your &lt;strong&gt;APP ID&lt;/strong&gt;. Provide this APP ID while initializing the SDK with &lt;strong&gt;initializeDefaultTestInstanceWithConfig:&lt;/strong&gt; and &lt;strong&gt;initializeDefaultLiveInstanceWithConfig:&lt;/strong&gt; methods as shown below.&lt;/p&gt; &#xA;&lt;h3&gt;In Objective-C:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {&#xA;&#xA;    //Create a config object&#xA;    MOSDKConfig *sdkConfig = [[MOSDKConfig alloc] initWithAppID:@&#34;Your APP ID&#34;];&#xA;    &#xA;    // Separate initialization methods for Test and Live Environments&#xA;    #ifdef DEBUG&#xA;       [[MoEngage sharedInstance] initializeDefaultTestInstanceWithConfig:sdkConfig andLaunchOptions:nil];&#xA;    #else&#xA;       [[MoEngage sharedInstance] initializeDefaultLiveInstanceWithConfig:sdkConfig andLaunchOptions:nil];&#xA;    #endif&#xA;    &#xA;    //Rest of the implementation of method&#xA;    //-------&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;In Swift:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions:     [UIApplicationLaunchOptionsKey: Any]?) -&amp;gt; Bool {&#xA;&#xA;    //Create a config object&#xA;    let sdkConfig = MOSDKConfig(withAppID: &#34;Your App ID&#34;)&#xA;    &#xA;    // Separate initialization methods for Test and Live Environments&#xA;    #if DEBUG&#xA;        MoEngage.sharedInstance().initializeDefaultTestInstance(with: sdkConfig, andLaunchOptions: launchOptions)&#xA;    #else&#xA;        MoEngage.sharedInstance().initializeDefaultLiveInstance(with: sdkConfig, andLaunchOptions: launchOptions)&#xA;    #endif&#xA;    &#xA;    //Rest of the implementation of method&#xA;    //-------&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Thats it!! SDK is successfully integrated and initialized in the project, and ready to use.&lt;/p&gt; &#xA;&lt;h2&gt;Developer Docs&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to our developer docs to know how to make use of our SDK to track Events and User Attributes, to implement Push Notification and InApps: &lt;a href=&#34;https://docs.moengage.com/docs/sdk-integration&#34;&gt;link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/moengage/MoEngage-iOS-SDK/raw/master/CHANGELOG.md&#34;&gt;SDK Change Log&lt;/a&gt; for information on every released version.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;For any issues you face with the SDK and for any help with the integration contact us at &lt;code&gt;support@moengage.com&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>