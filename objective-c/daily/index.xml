<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-09T01:48:32Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LeoNatan/LNPopupController</title>
    <updated>2022-08-09T01:48:32Z</updated>
    <id>tag:github.com,2022-08-09:/LeoNatan/LNPopupController</id>
    <link href="https://github.com/LeoNatan/LNPopupController" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LNPopupController is a framework for presenting view controllers as popups of other view controllers, much like the Apple Music and Podcasts apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LNPopupController&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;LNPopupController&lt;/code&gt; is a framework for presenting view controllers as popups of other view controllers, much like the Apple Music and Podcasts apps.&lt;/p&gt; &#xA;&lt;p&gt;For SwiftUI, check out my &lt;a href=&#34;https://github.com/LeoNatan/LNPopupUI&#34;&gt;LNPopupUI library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LeoNatan/LNPopupController/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/LeoNatan/LNPopupController.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LeoNatan/LNPopupController/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/LeoNatan/LNPopupController.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;span class=&#34;badge-paypal&#34;&gt;&lt;a href=&#34;https://paypal.me/LeoNatan25&#34; title=&#34;Donate to this project using PayPal&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/paypal-donate-yellow.svg?style=flat&#34; alt=&#34;PayPal Donation Button&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LeoNatan/LNPopupController/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-raw/LeoNatan/LNPopupController.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LeoNatan/LNPopupController/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/LeoNatan/LNPopupController.svg?sanitize=true&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift%20package%20manager-compatible-green&#34; alt=&#34;Swift Package Manager compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/open_modern_popup.gif&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See a video of the modern popup look &amp;amp; feel &lt;a href=&#34;https://vimeo.com/194064291&#34;&gt;here&lt;/a&gt; and a video of the classic popup look &amp;amp; feel &lt;a href=&#34;https://vimeo.com/137020302&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once a popup bar is presented with a content view controller, the user can swipe or tap the popup bar at any point to present the popup. After finishing, the user dismisses the popup by either swiping or tapping the popup close button.&lt;/p&gt; &#xA;&lt;p&gt;The framework is intended to be very generic and work in most situations, so it is implemented as a category over &lt;code&gt;UIViewController&lt;/code&gt;. Each view controller can present a popup bar, docked to a bottom view. For &lt;code&gt;UITabBarController&lt;/code&gt; subclasses, the default docking view is the tab bar. For &lt;code&gt;UINavigationController&lt;/code&gt; subclasses, the default docking view is the toolbar. For other classes, the popup bar is presented at the bottom of the screen. View controller subclasses can provide their own docking views.&lt;/p&gt; &#xA;&lt;p&gt;The framework correctly maintains the safe area insets of the container controller’s view and its child controllers, as the popup bar is presented and dismissed.&lt;/p&gt; &#xA;&lt;p&gt;The information displayed on the popup bar is provided dynamically with popup item objects (instances of the &lt;code&gt;LNPopupItem&lt;/code&gt; class) associated with the popup content view controllers. To change this information, update the popup item of the view controller.&lt;/p&gt; &#xA;&lt;p&gt;Generally, it is recommended to present the popup bar on the outermost container controller. So if you have a view controller contained in a navigation controller, which is in turn contained in a tab bar controller, it is recommended to present the popup bar on the tab bar controller.&lt;/p&gt; &#xA;&lt;p&gt;Check the demo project for many common use cases of the framework in various scenarios. It contains examples in Swift and Objective C.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available for iOS 13 and above, as an Xcode framework or an SPM package&lt;/li&gt; &#xA; &lt;li&gt;Good citizen in modern UIKit world&lt;/li&gt; &#xA; &lt;li&gt;Modern Objective C syntax and great Swift interoperability&lt;/li&gt; &#xA; &lt;li&gt;For SwiftUI, check out my &lt;a href=&#34;https://github.com/LeoNatan/LNPopupUI&#34;&gt;LNPopupUI library&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Adding to Your Project&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Swift Package Manager is the recommended way to integrate &lt;code&gt;LNPopupController&lt;/code&gt; in your project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LNPopupController&lt;/code&gt; supports SPM versions 5.1.0 and above. To use SPM, you should use Xcode 11 to open your project. Click &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Swift Packages&lt;/code&gt; -&amp;gt; &lt;code&gt;Add Package Dependency&lt;/code&gt;, enter &lt;code&gt;https://github.com/LeoNatan/LNPopupController&lt;/code&gt;. Select the version you’d like to use.&lt;/p&gt; &#xA;&lt;p&gt;You can also manually add the package to your Package.swift file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/LeoNatan/LNPopupController.git&#34;, from: &#34;2.9.2&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the dependency in your target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(name: &#34;BestExampleApp&#34;, dependencies: [&#34;LNPopupController&#34;]),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your Cartfile:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;github &#34;LeoNatan/LNPopupController&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure you follow the Carthage integration instructions &lt;a href=&#34;https://github.com/Carthage/Carthage#if-youre-building-for-ios-tvos-or-watchos&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Drag the &lt;code&gt;LNPopupController.xcodeproj&lt;/code&gt; project to your project, and add &lt;code&gt;LNPopupController.framework&lt;/code&gt; to &lt;strong&gt;Embedded Binaries&lt;/strong&gt; in your project target&#39;s &lt;strong&gt;General&lt;/strong&gt; tab. Xcode should sort everything else on its own.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;CocoaPods is not supported. There are many reasons for this. Instead of CocoaPods, use Swift Package Manager from within Xcode. You can continue using CocoaPods for for your other dependencies and Swift Package Manager for &lt;code&gt;LNPopupController&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using the Framework&lt;/h2&gt; &#xA;&lt;h3&gt;Swift&lt;/h3&gt; &#xA;&lt;p&gt;While the framework is written in Objective C, it uses modern Objective C syntax, so using the framework in Swift is very easy and intuitive.&lt;/p&gt; &#xA;&lt;h3&gt;Project Integration&lt;/h3&gt; &#xA;&lt;p&gt;Import the module in your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import LNPopupController&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Popup Items&lt;/h3&gt; &#xA;&lt;p&gt;A popup item should always reflect the popup information about the view controller with which it is associated. The popup item should provide a title and subtitles to display in the popup bar, when the view controller is presented as a popup content controller. In addition, the item may contain additional buttons to display on the leading and/or trailing edges of the popup bar using &lt;code&gt;leadingBarButtonItems&lt;/code&gt; and &lt;code&gt;trailingBarButtonItems&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Managing the Popup Bar&lt;/h3&gt; &#xA;&lt;p&gt;To present the popup bar, create a content controller, update its popup item and present the popup bar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let demoVC = DemoPopupContentViewController()&#xA;demoVC.view.backgroundColor = .red&#xA;demoVC.popupItem.title = &#34;Hello World&#34;&#xA;demoVC.popupItem.subtitle = &#34;And a subtitle!&#34;&#xA;demoVC.popupItem.progress = 0.34&#xA;&#x9;&#xA;tabBarController?.presentPopupBar(withContentViewController: demoVC, animated: true, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can present a new content controller while the popup bar is presented and when the popup itself is open.&lt;/p&gt; &#xA;&lt;p&gt;To open and close the popup programatically, use &lt;code&gt;openPopup(animated:completion:)&lt;/code&gt; and &lt;code&gt;closePopup(animated:completion:)&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;tabBarController?.openPopup(animated: true, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can present the popup bar and open the popup in one animation, using &lt;code&gt;presentPopupBar(withContentViewController:openPopup:animated:completion:)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;tabBarController?.presentPopupBar(withContentViewController: demoVC, openPopup:true, animated: true, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To dismiss the popup bar, use &lt;code&gt;dismissPopupBarAnimated:completion:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;tabBarController?.dismissPopupBar(animated: true, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the popup is open when dismissing the popup bar, the popup content will also be dismissed.&lt;/p&gt; &#xA;&lt;h3&gt;Popup Container View Controllers&lt;/h3&gt; &#xA;&lt;p&gt;Any &lt;code&gt;UIViewController&lt;/code&gt; subclasses can be popup container view controllers. The popup bar is attached to a bottom docking view. By default, &lt;code&gt;UITabBarController&lt;/code&gt; and &lt;code&gt;UINavigationController&lt;/code&gt; subclasses return their bottom bars as docking view, while other controllers return a hidden 0pt height view on the bottom of the view. In your subclass, override &lt;code&gt;bottomDockingViewForPopupBar&lt;/code&gt; and &lt;code&gt;defaultFrameForBottomDockingView&lt;/code&gt; and return your view and frame accordingly. &lt;strong&gt;The returned view must be attached to the bottom of the view controller&#39;s view, or results are undefined.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override var bottomDockingViewForPopupBar: UIView? {&#xA;  return myCoolBottomView&#xA;}&#xA;&#xA;override var defaultFrameForBottomDockingView: CGRect {&#xA;  var bottomViewFrame = myCoolBottomView.frame&#xA;  &#xA;  if isMyCoolBottomViewHidden {&#xA;    bottomViewFrame.origin = CGPoint(x: bottomViewFrame.x, y: view.bounds.height)&#xA;  } else {&#xA;    bottomViewFrame.origin = CGPoint(x: bottomViewFrame.x, y: view.bounds.height - bottomViewFrame.height)&#xA;  }&#xA;  &#xA;  return bottomViewFrame&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Appearance and Behavior&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;LNPopupController&lt;/code&gt; provides two distinct styles of popup look and feel, one based on modern Music app look and feel, and one based on the previous, iOS 9-style look and feel. Popup bar styles are arbitrarily labeled &#34;prominent&#34; for modern style popup bar and &#34;compact&#34; for iOS 9-style. Popup interaction styles are labeled &#34;snap&#34; for modern style snapping popups and &#34;drag&#34; for iOS 9 interactive popup interaction. Popup close buttons styles are labeled &#34;chevron&#34; for modern style chevron close button and &#34;round&#34; for iOS 9-style close buttons. For each, there is a &#34;default&#34; style for choosing the most suitable one for the current platform and operating system version.&lt;/p&gt; &#xA;&lt;p&gt;The defaults are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prominent bar style&lt;/li&gt; &#xA; &lt;li&gt;Snap interaction style&lt;/li&gt; &#xA; &lt;li&gt;Chevron close button style&lt;/li&gt; &#xA; &lt;li&gt;No progress view style&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also present completely custom popup bars. For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/#custom-popup-bars&#34;&gt;Custom Popup Bars&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, for navigation and tab bar container controllers, the appearance of the popup bar is determined according to the bottom bar&#39;s appearance. For other container controllers, a default appearance is used, most suitable for the current environment.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/modern_bar_style.gif&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To disable inheriting the bottom bar’s appearance, set the &lt;code&gt;inheritsAppearanceFromDockingView&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Bar Style&lt;/h4&gt; &#xA;&lt;p&gt;Customizing the popup bar style is achieved by setting the popup bar&#39;s &lt;code&gt;barStyle&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;navigationController?.popupBar.barStyle = .compact&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/modern_no_scroll.gif&#34; width=&#34;360&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/scroll.gif&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Interaction Style&lt;/h4&gt; &#xA;&lt;p&gt;Customizing the popup interaction style is achieved by setting the popup presentation containing controller&#39;s &lt;code&gt;popupInteractionStyle&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;navigationController?.popupInteractionStyle = .drag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/interaction_snap.gif&#34; width=&#34;360&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/interaction_drag.gif&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Progress View Style&lt;/h4&gt; &#xA;&lt;p&gt;Customizing the popup bar progress view style is achieved by setting the popup bar&#39;s &lt;code&gt;progressViewStyle&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;navigationController?.popupBar.progressViewStyle = .top&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To hide the progress view, set the &lt;code&gt;progressViewStyle&lt;/code&gt; property to &lt;code&gt;LNPopupBarProgressViewStyle.none&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/progress_view_none.png&#34; width=&#34;360&#34;&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/progress_view_top.png&#34; width=&#34;360&#34;&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/progress_view_bottom.png&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Close Button Style&lt;/h4&gt; &#xA;&lt;p&gt;Customizing the popup close button style is achieved by setting the popup content view&#39;s &lt;code&gt;popupCloseButtonStyle&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;navigationController.popupContentView.popupCloseButtonStyle = .round&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To hide the popup close button, set the &lt;code&gt;popupCloseButtonStyle&lt;/code&gt; property to &lt;code&gt;LNPopupCloseButtonStyle.none&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/close_button_none.png&#34; width=&#34;360&#34;&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/close_button_chevron.png&#34; width=&#34;360&#34;&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/close_button_round.png&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Text Marquee Scroll&lt;/h4&gt; &#xA;&lt;p&gt;Supplying long text for the title and/or subtitle will result in a scrolling text, if text marquee is enabled. Otherwise, the text will be truncated.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/modern_no_scroll.gif&#34; width=&#34;360&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/scroll.gif&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Popup Bar Customization&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;LNPopupBar&lt;/code&gt; exposes API to customize the default popup bar&#39;s appearance, either through &lt;code&gt;UIAppearance&lt;/code&gt; API or directly on a specific popup bar object. Use &lt;code&gt;LNPopupBarAppearance&lt;/code&gt; objects to define the standard appearance of the bar.&lt;/p&gt; &#xA;&lt;p&gt;Remember to set the &lt;code&gt;inheritsAppearanceFromDockingView&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt;, or your customization is likely to be overridden by the bottom bar’s appearance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let appearance = LNPopupBarAppearance()&#xA;appearance.titleTextAttributes = [.font: UIFont(name: &#34;Chalkduster&#34;, size: 14)!, .foregroundColor: UIColor.yellow]&#xA;appearance.subtitleTextAttributes = [.font: UIFont(name: &#34;Chalkduster&#34;, size: 12)!, .foregroundColor: UIColor.green]&#xA;appearance.backgroundEffect = UIBlurEffect(style: .systemChromeMaterialDark)&#xA;&#xA;let appearanceProxy = LNPopupBar.appearance(whenContainedInInstancesOf: [UINavigationController.self])&#xA;appearanceProxy.inheritsAppearanceFromDockingView = false&#xA;appearanceProxy.standardAppearance = appearance&#xA;appearanceProxy.tintColor = .yellow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/modern_custom.png&#34; width=&#34;360&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/custom1.png&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Custom Popup Bars&lt;/h4&gt; &#xA;&lt;p&gt;The framework supports implementing custom popup bars.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/custom_bar.png&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To implement a custom popup bar, you subclass &lt;code&gt;LNPopupCustomBarViewController&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In your &lt;code&gt;LNPopupCustomBarViewController&lt;/code&gt; subclass, build your popup bar&#39;s view hierarchy and set the controller&#39;s &lt;code&gt;preferredContentSize&lt;/code&gt; property with the preferred popup bar height. Override any of the &lt;code&gt;wantsDefaultTapGestureRecognizer&lt;/code&gt;, &lt;code&gt;wantsDefaultPanGestureRecognizer&lt;/code&gt; and/or &lt;code&gt;wantsDefaultHighlightGestureRecognizer&lt;/code&gt; properties to disable the default gesture recognizers functionality in your custom popup bar.&lt;/p&gt; &#xA;&lt;p&gt;In your subclass, implement the &lt;code&gt;popupItemDidUpdate()&lt;/code&gt; method to be notified of updates to the popup content view controller&#39;s item, or when a new popup content view controller is presented (with a new popup item). You must call the &lt;code&gt;super&lt;/code&gt; implementation of this method.&lt;/p&gt; &#xA;&lt;p&gt;Finally, set the &lt;code&gt;customBarViewController&lt;/code&gt; property of the popup bar object to an instance of your &lt;code&gt;LNPopupCustomBarViewController&lt;/code&gt; subclass. This will change the bar style to &lt;code&gt;LNPopupBarStyle.custom&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The included demo project includes two example custom popup bar scenes.&lt;/p&gt; &#xA;&lt;h4&gt;System Interactions&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;hidesBottomBarWhenPushed&lt;/code&gt; property is supported for navigation and tab bar controllers. When set to &lt;code&gt;true&lt;/code&gt;, the popup bar will transition to the bottom of the pushed controller&#39;s view. Setting &lt;code&gt;isToolbarHidden = true&lt;/code&gt; and calling &lt;code&gt;setToolbarHidden(_:animated:)&lt;/code&gt; are also supported.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/hidesBottomBar_TabBar.gif&#34; width=&#34;360&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/hidesBottomBar_Toolbar.gif&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Status bar management of the popup content view controller is respected and applied when appropriate.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/statusbar_style.gif&#34; width=&#34;360&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/statusbar_hidden.gif&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Context menus are supported. Add a &lt;code&gt;UIContextMenuInteraction&lt;/code&gt; interaction object to the popup bar, and it will behave as expected.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/popup_bar_context_menu.png&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pointer interactions are supported, and a default implementation is provided for system bar styles.&lt;/p&gt; &#xA;&lt;p&gt;For custom popup bar controllers, the &lt;code&gt;LNPopupCustomBarViewController&lt;/code&gt; class implements the &lt;code&gt;UIPointerInteractionDelegate&lt;/code&gt; protocol. Implement the protocol&#39;s methods inside your subclass to implement custom pointer interactions.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/pointer_interaction.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Starting with iOS 15, scroll edge appearance is automatically disabled for toolbars and tab bars when a popup bar is presented, regardless of the scroll position of the content. Once the popup bar is dismissed, the scroll edge appearance is restored.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/scroll_edge_appearance.gif&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;ProMotion Support&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;LNPopupController&lt;/code&gt; fully supports ProMotion on iPhone and iPad.&lt;/p&gt; &#xA;&lt;p&gt;For iPhone 13 Pro and above, you need to add the &lt;code&gt;CADisableMinimumFrameDurationOnPhone&lt;/code&gt; key to your Info.plist and set it to &lt;code&gt;true&lt;/code&gt;. See &lt;a href=&#34;https://developer.apple.com/documentation/quartzcore/optimizing_promotion_refresh_rates_for_iphone_13_pro_and_ipad_pro?language=objc&#34;&gt;Optimizing ProMotion Refresh Rates for iPhone 13 Pro and iPad Pro&lt;/a&gt; for more information. &lt;code&gt;LNPopupController&lt;/code&gt; will log a single warning message in the console if this key is missing, or is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Interaction Gesture Recognizer&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;LNPopupContentView&lt;/code&gt; exposes access to the popup interaction gesture recognizer in the way of the &lt;code&gt;popupInteractionGestureRecognizer&lt;/code&gt; property. This gesture recognizer is shared between opening the popup content, by panning the popup bar up (when the popup bar is closed), and closing the popup content, by panning the popup content view (when the popup bar is open).&lt;/p&gt; &#xA;&lt;p&gt;When opening the popup, the system queries the &lt;code&gt;viewForPopupInteractionGestureRecognizer&lt;/code&gt; property of the popup content view controller to determine to which view to add the interaction gesture recognizer. By default, the property returns the controller&#39;s root view. Override the property&#39;s getter to change this behavior.&lt;/p&gt; &#xA;&lt;p&gt;You can implement the delegate of the interaction gesture recognizer in order to influence its behavior, such as preventing popup interaction when the user is interacting with other controls or views inside the popup content.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you disable the gesture recognizer after opening the popup, you must monitor the state of the popup and reenable the gesture recognizer once closed by the user or through code. Instead, consider implementing the gesture recognizer&#39;s delegate and providing custom logic to disable the interaction.&lt;/p&gt; &#xA;&lt;h4&gt;Full Right-to-Left Support&lt;/h4&gt; &#xA;&lt;p&gt;The framework has full right-to-left support.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/rtl_english.png&#34; width=&#34;360&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/rtl_hebrew.png&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, the popup bar will follow the system&#39;s user interface layout direction, but will preserve the bar button items&#39; order. To customize this behavior, modify the popup bar&#39;s &lt;code&gt;semanticContentAttribute&lt;/code&gt; and &lt;code&gt;barItemsSemanticContentAttribute&lt;/code&gt; properties.&lt;/p&gt; &#xA;&lt;h4&gt;Accessibility&lt;/h4&gt; &#xA;&lt;p&gt;The framework supports accessibility and will honor accessibility labels, hints and values. By default, the accessibility label of the popup bar is the title and subtitle provided by the popup item.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/Supplements/default_bar_accessibility_label.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To modify the accessibility label and hint of the popup bar, set the &lt;code&gt;accessibilityLabel&lt;/code&gt; and &lt;code&gt;accessibilityHint&lt;/code&gt; properties of the &lt;code&gt;LNPopupItem&lt;/code&gt; object of the popup content view controller.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;demoVC.popupItem.accessibilityLabel = NSLocalizedString(&#34;Custom popup bar accessibility label&#34;, comment: &#34;&#34;)&#xA;demoVC.popupItem.accessibilityHint = NSLocalizedString(&#34;Custom popup bar accessibility hint&#34;, comment: &#34;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To add accessibility labels and hints to buttons, set the &lt;code&gt;accessibilityLabel&lt;/code&gt; and &lt;code&gt;accessibilityHint&lt;/code&gt; properties of the &lt;code&gt;UIBarButtonItem&lt;/code&gt; objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let upNext = UIBarButtonItem(image: UIImage(named: &#34;next&#34;), style: .plain, target: self, action: #selector(nextItem))&#xA;upNext.accessibilityLabel = NSLocalizedString(&#34;Up Next&#34;, comment: &#34;&#34;)&#xA;upNext.accessibilityHint = NSLocalizedString(&#34;Double tap to show up next list&#34;, comment: &#34;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To modify the accessibility label and hint of the popup close button, set the &lt;code&gt;accessibilityLabel&lt;/code&gt; and &lt;code&gt;accessibilityHint&lt;/code&gt; properties of the &lt;code&gt;LNPopupCloseButton&lt;/code&gt; object of the popup container view controller.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;tabBarController?.popupContentView.popupCloseButton.accessibilityLabel = NSLocalizedString(&#34;Custom popup close button accessibility label&#34;, comment: &#34;&#34;)&#xA;tabBarController?.popupContentView.popupCloseButton.accessibilityHint = NSLocalizedString(&#34;Custom popup close button accessibility hint&#34;, comment: &#34;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To modify the accessibility label and value of the popup bar progress view, set the &lt;code&gt;accessibilityProgressLabel&lt;/code&gt; and &lt;code&gt;accessibilityProgressValue&lt;/code&gt; properties of the &lt;code&gt;LNPopupItem&lt;/code&gt; object of the popup content view controller.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;demoVC.popupItem.accessibilityImageLabel = NSLocalizedString(&#34;Custom image label&#34;, comment: &#34;&#34;)&#xA;demoVC.popupItem.accessibilityProgressLabel = NSLocalizedString(&#34;Custom accessibility progress label&#34;, comment: &#34;&#34;)&#xA;demoVC.popupItem.accessibilityProgressValue = &#34;\(accessibilityDateComponentsFormatter.stringFromTimeInterval(NSTimeInterval(popupItem.progress) * totalTime)!) \(NSLocalizedString(&#34;of&#34;, comment: &#34;&#34;)) \(accessibilityDateComponentsFormatter.stringFromTimeInterval(totalTime)!)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Legacy non-translucent tab bar and toolbars are not supported and can cause visual artifacts or layout glitches. Apple has many problem with such bars, and supporting those is not a priority for &lt;code&gt;LNPopupController&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The correct way to achieve an opaque bar is to use the &lt;code&gt;UIBarAppearance.configureWithOpaqueBackground()&lt;/code&gt; API, which is supported by &lt;code&gt;LNPopupController&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Manually setting bottom bar properties, such as setting a tab bar’s or a toolbar’s &lt;code&gt;isHidden = true&lt;/code&gt; &lt;strong&gt;is explicitly discouraged by Apple and not supported by the framework&lt;/strong&gt;; it will lead to undefined behavior by the framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;The framework uses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cbpowell/MarqueeLabel&#34;&gt;MarqueeLabel&lt;/a&gt; Copyright (c) 2011-2020 Charles Powell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, the demo project uses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukaskubanek/LoremIpsum&#34;&gt;LoremIpsum&lt;/a&gt; Copyright (c) 2013 Lukas Kubanek&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>blakewatters/ISO8601DateFormatterValueTransformer</title>
    <updated>2022-08-09T01:48:32Z</updated>
    <id>tag:github.com,2022-08-09:/blakewatters/ISO8601DateFormatterValueTransformer</id>
    <link href="https://github.com/blakewatters/ISO8601DateFormatterValueTransformer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small Objective-C library that integrates Peter Hosey&#39;s ISO8601DateFormatter with RKValueTransformers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ISO8601DateFormatterValueTransformer&lt;/h1&gt; &#xA;&lt;p&gt;A small Objective-C library that integrates Peter Hosey&#39;s &lt;a href=&#34;https://github.com/boredzo/iso-8601-date-formatter&#34;&gt;ISO8601DateFormatter&lt;/a&gt; with &lt;a href=&#34;https://github.com/RestKit/RKValueTransformers&#34;&gt;RKValueTransformers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The implementation is done by adding &lt;code&gt;RKValueTransforming&lt;/code&gt; conformance to the &lt;code&gt;ISO8601DateFormatter&lt;/code&gt; via a category.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Basic usage is identical to all other &lt;code&gt;RKValueTransforming&lt;/code&gt; classes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &#34;ISO8601DateValueTransformer.h&#34;&#xA;&#xA;RKISO8601DateFormatter *dateFormatter = [RKISO8601DateFormatter defaultISO8601DateFormatter];&#xA;&#xA;// Transforming NSDate -&amp;gt; String&#xA;NSString *dateString = nil;&#xA;NSError *error = nil;&#xA;BOOL success = [dateFormatter transformValue:[NSDate date] toValue:&amp;amp;dateString ofClass:[NSDate class] error:&amp;amp;error];&#xA;&#xA;// Transforming NSString -&amp;gt; NSDate&#xA;NSDate *date = nil;&#xA;success = [dateFormatter transformValue:@&#34;2013-09-12T07:24:56-04:00&#34; toValue:&amp;amp;dateString ofClass:[NSDate class] error:&amp;amp;error];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration as Default Date Transformer&lt;/h3&gt; &#xA;&lt;p&gt;Adding the date formatter to the default value transformer at position 0 ensures that it is used ahead of all other &lt;code&gt;NSString&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;NSDate&lt;/code&gt; value transformers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &#34;ISO8601DateValueTransformer.h&#34;&#xA;&#xA;RKISO8601DateFormatter *dateFormatter = [RKISO8601DateFormatter defaultISO8601DateFormatter];&#xA;[[RKValueTransformer defaultValueTransformer] insertValueTransformer:dateFormatter atIndex:0];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Blake Watters&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/blakewatters&#34;&gt;http://github.com/blakewatters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/blakewatters&#34;&gt;http://twitter.com/blakewatters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:blakewatters@gmail.com&#34;&gt;blakewatters@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ISO8601DateFormatterValueTransformer is available under the Apache 2 License. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>felixhageloh/uebersicht</title>
    <updated>2022-08-09T01:48:32Z</updated>
    <id>tag:github.com,2022-08-09:/felixhageloh/uebersicht</id>
    <link href="https://github.com/felixhageloh/uebersicht" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ˈyːbɐˌzɪçt&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Übersicht&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Keep an eye on what&#39;s happening on your machine and in the world.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For general info check out the &lt;a href=&#34;http://tracesof.net/uebersicht&#34;&gt;Übersicht website.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Writing Widgets&lt;/h2&gt; &#xA;&lt;p&gt;In essence, widgets are JavaScript modules that expose a few key properties and methods. They need to be defined in a single file with a &lt;code&gt;.jsx&lt;/code&gt; extension for Übersicht to pick them up. Previously, widgets could be written in CoffeeScript and are still supported. Check &lt;a href=&#34;https://raw.githubusercontent.com/felixhageloh/uebersicht/master/ClassicWidgets.md&#34;&gt;the old documentation&lt;/a&gt; for details. Übersicht will listen to file changes inside your widget directory, so you can edit widgets and see the result live.&lt;/p&gt; &#xA;&lt;p&gt;Widget rendering is done using &lt;a href=&#34;https://reactjs.org&#34;&gt;React&lt;/a&gt; and its &lt;a href=&#34;https://reactjs.org/docs/introducing-jsx.html&#34;&gt;JSX&lt;/a&gt; syntax. Simple widget state is managed for you by Übersicht, but for more advanced widgets you can manage state using a Redux-like pattern. You &lt;code&gt;dispatch&lt;/code&gt; events, which get processed by a single &lt;code&gt;updateState&lt;/code&gt; function which returns the new state, which is passed to the render function of your widget.&lt;/p&gt; &#xA;&lt;p&gt;State is kept when you modify your widget, which allows for live coding. Any changes to the UI of your widget will be immediately visible. One drawback (at least with the current implementation) is that if you change the shape of your state you might have to &#39;Refresh all Widgets&#39; from the app menu for your widget to work.&lt;/p&gt; &#xA;&lt;p&gt;You can also include node modules and split your widget into separate files using &lt;a href=&#34;http://2ality.com/2014/09/es6-modules-final.html&#34;&gt;ESM syntax&lt;/a&gt;. Any file that is in a directory called &lt;code&gt;/node_modules&lt;/code&gt;, &lt;code&gt;/lib&lt;/code&gt; or &lt;code&gt;/src&lt;/code&gt; will be treated as a module and will not show up as a separate widget.&lt;/p&gt; &#xA;&lt;p&gt;The following properties and methods are supported:&lt;/p&gt; &#xA;&lt;h3&gt;command&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;strong&gt;string&lt;/strong&gt; containing the shell command to be executed, or&lt;br&gt; a &lt;strong&gt;function(dispatch : function)&lt;/strong&gt; which eventually dispatches an event, or &lt;strong&gt;undefined&lt;/strong&gt; meaning that no command will be executed for this widget.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const command = &#34;echo Hello World&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Watch out for quotes inside commands. Often they need to properly escaped, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const command = &#34;ps axo \&#34;rss,pid,ucomm\&#34; | sort -nr | head -n3&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example using a command function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const command = (dispatch) =&amp;gt;&#xA;  fetch(&#39;some/url.json)&#39;)&#xA;    .then((response) =&amp;gt; {&#xA;      dispatch({ type: &#39;FETCH_SUCCEDED&#39;, data: response.json() });&#xA;    })&#xA;    .catch((error) =&amp;gt; {&#xA;      dispatch({ type: &#39;FETCH_FAILED&#39;, error: error });&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first and only argument passed to a command function is a &lt;code&gt;dispatch&lt;/code&gt; function, which you can use to dispatch plain JasvaScript objects, called events, to be picked up by your &lt;code&gt;updateState&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;h3&gt;refreshFrequency&lt;/h3&gt; &#xA;&lt;p&gt;An &lt;strong&gt;number&lt;/strong&gt; specifying how often the above command is executed.&lt;/p&gt; &#xA;&lt;p&gt;It defines the delay in milliseconds between consecutive commands executions. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;export const refreshFrequency = 1000; // widget will run command once a second&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default is 1000 (1s). If set to &lt;code&gt;false&lt;/code&gt; the widget won&#39;t refresh automatically.&lt;/p&gt; &#xA;&lt;h3&gt;className&lt;/h3&gt; &#xA;&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; or &lt;strong&gt;string&lt;/strong&gt; defining the CSS rules to applied to the root of your widget.&lt;/p&gt; &#xA;&lt;p&gt;It is most commonly used control the position of your widget. It is converted to a CSS class name using the &lt;a href=&#34;https://emotion.sh/docs/css&#34;&gt;Emotion CSS-in-JS library&lt;/a&gt;. Read more about &lt;a href=&#34;https://raw.githubusercontent.com/felixhageloh/uebersicht/master/#styling-widgets&#34;&gt;styling your widgets here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const className = {&#xA;  top: 0,&#xA;  left: 0,&#xA;  color: &#39;#fff&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const className = `&#xA;  top: 0;&#xA;  left: 0;&#xA;  color: #fff;&#xA;`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that widgets are positioned absolute in relation to the screen (minus the menu bar), so a widget with &lt;code&gt;top: 0&lt;/code&gt; and &lt;code&gt;left: 0&lt;/code&gt; will be positioned in the top left corner of the screen, just below the menu bar.&lt;/p&gt; &#xA;&lt;h3&gt;render : props&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;strong&gt;function(props : object)&lt;/strong&gt; to render your widget.&lt;/p&gt; &#xA;&lt;p&gt;If you know &lt;a href=&#34;https://reactjs.org/docs/components-and-props.html&#34;&gt;React functional components&lt;/a&gt; you know how render works. The &lt;code&gt;props&lt;/code&gt; passed to this function is whatever state your &lt;code&gt;updateState&lt;/code&gt; function returns. If you don&#39;t provide your own &lt;code&gt;updateState&lt;/code&gt; function, the default props that are passed are &lt;code&gt;output&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;, containing the output your command produced and any error that might have occurred.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const render = ({output, error}) =&amp;gt; {&#xA;  return error ? (&#xA;    &amp;lt;div&amp;gt;Something went wrong: &amp;lt;strong&amp;gt;{String(error)}&amp;lt;/strong&amp;gt;&amp;lt;/div&amp;gt;&#xA;  ) : (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;h1&amp;gt;We got some output!&amp;lt;/h1&amp;gt;&#xA;      &amp;lt;p&amp;gt;{output}&amp;lt;/p&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default implementation of render just returns &lt;code&gt;output&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;updateState : event, previousState&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;strong&gt;function(event : object, previousState : object)&lt;/strong&gt; implementing the state update behavior of this widget.&lt;/p&gt; &#xA;&lt;p&gt;When provided, this function must return the next state, which will be passed as &lt;code&gt;props&lt;/code&gt; to your render function. The default function will return &lt;code&gt;output&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; from the event object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const updateState = (event, previousState) =&amp;gt; {&#xA;  if (event.error) {&#xA;    return { ...previousState, warning: `We got an error: ${event.error}` };&#xA;  }&#xA;  const [cpuPct, processName] = event.output.split(&#39;,&#39;);&#xA;  return {&#xA;    cpuPct: parseFloat(cpuPct),&#xA;    processName&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will pass a props object containing &lt;code&gt;cpuPct&lt;/code&gt; and &lt;code&gt;processName&lt;/code&gt; to the render function. If an error occurred, it will pass the previous state plus a warning message.&lt;/p&gt; &#xA;&lt;p&gt;If your widget has more complex state logic, for example because it is fetching data from several different sources, it is a good idea to add a &lt;code&gt;type&lt;/code&gt; property to your events. You can use this type to decide how to update your state. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const updateState = (event, previousState) =&amp;gt; {&#xA;  switch(event.type) {&#xA;    case &#39;CO2_FETCHED&#39;: return updateCo2(event.output, previousState);&#xA;    case &#39;TEMPERATURE_FETCHED&#39;: return updateTemp(event.output, previousState);&#xA;    default: {&#xA;      return previousState;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example also shows that you can make use of functions to further break down your state update logic.&lt;/p&gt; &#xA;&lt;h3&gt;initialState&lt;/h3&gt; &#xA;&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; with the initial state of your widget.&lt;/p&gt; &#xA;&lt;p&gt;If you provide a custom &lt;code&gt;updateState&lt;/code&gt; function you might need to define the initial state that gets passed on initial render of the widget. before any command has been run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const initialState = { output: &#39;fetching data...&#39; };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default initial state is &lt;code&gt;{ output: &#39;&#39; }&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;init : dispatch&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;strong&gt;function(dispatch : function)&lt;/strong&gt; that is called the first time your widget loads. Many widgets won&#39;t need this, but you can use this function to perform any initial setup for more advanced use cases. For example, instead of relying on periodic shell commands, you might want to open and listen to WebSocket events to update your widget.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export const init = (dispatch) =&amp;gt; {&#xA;  const socket = new WebSocket(&#39;ws://localhost:8080&#39;);&#xA;&#xA;  socket.addEventListener(&#39;message&#39;,  (event) =&amp;gt; {&#xA;    dispatch({type: &#39;MESSAGE_RECEIVED&#39;, data: event.data});&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Styling Widgets&lt;/h2&gt; &#xA;&lt;p&gt;Uebersicht comes bundled with &lt;a href=&#34;https://emotion.sh&#34;&gt;Emotion &lt;/a&gt; (version 9). It exposes it&#39;s &lt;code&gt;css&lt;/code&gt; and &lt;code&gt;styled&lt;/code&gt; functions via the &lt;code&gt;uebersicht&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;As described above, you can use &lt;code&gt;className&lt;/code&gt; to style and position the root node of your widget. For further styling you can do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { css } from &#34;uebersicht&#34;&#xA;&#xA;const header = css`&#xA;  font-family: Ubuntu;&#xA;  font-size: 20px;&#xA;  text-align: center;&#xA;  color: white;&#xA;`&#xA;&#xA;const boxes = css`&#xA;  display: flex;&#xA;  justify-content: center;&#xA;`&#xA;&#xA;const box = css({&#xA;  height: &#34;40px&#34;,&#xA;  width: &#34;40px&#34;,&#xA;  &#34;&amp;amp; + &amp;amp;&#34;: {&#xA;    marginLeft: &#34;5px&#34;&#xA;  }&#xA;})&#xA;&#xA;export const className = `&#xA;  left: 20px;&#xA;  top: 20px;&#xA;  width: 200px;&#xA;`&#xA;&#xA;export const initialState = { colors: [&#34;DeepPink&#34;, &#34;DeepSkyBlue&#34;, &#34;Coral&#34;] }&#xA;&#xA;export const render = ({ colors }) =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;h1 className={header}&amp;gt;Some colored boxes&amp;lt;/h1&amp;gt;&#xA;      &amp;lt;div className={boxes}&amp;gt;&#xA;        {colors.map((color, idx) =&amp;gt; (&#xA;          &amp;lt;div className={`${box} ${css({ background: color })}`} key={idx} /&amp;gt;&#xA;        ))}&#xA;      &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can also make use of Emotion&#39;s styles components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { styled } from &#34;uebersicht&#34;&#xA;&#xA;const Header = styled(&#34;h1&#34;)`&#xA;  font-family: Ubuntu;&#xA;  font-size: 20px;&#xA;  text-align: center;&#xA;  color: white;&#xA;`&#xA;&#xA;const Boxes = styled(&#34;div&#34;)`&#xA;  display: flex;&#xA;  justify-content: center;&#xA;`&#xA;&#xA;const Box = styled(&#34;div&#34;)(props =&amp;gt; ({&#xA;  height: &#34;40px&#34;,&#xA;  width: &#34;40px&#34;,&#xA;  background: props.color,&#xA;  marginRight: &#34;5px&#34;&#xA;}))&#xA;&#xA;export const className = `&#xA;  left: 20px;&#xA;  top: 20px;&#xA;  width: 200px;&#xA;`&#xA;&#xA;export const initialState = { colors: [&#34;DeepPink&#34;, &#34;DeepSkyBlue&#34;, &#34;Coral&#34;] }&#xA;&#xA;export const render = ({ colors }) =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;Header&amp;gt;Some colored boxes&amp;lt;/Header&amp;gt;&#xA;      &amp;lt;Boxes&amp;gt;&#xA;        {colors.map((color, idx) =&amp;gt; (&#xA;          &amp;lt;Box color={color} key={idx} /&amp;gt;&#xA;        ))}&#xA;      &amp;lt;/Boxes&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, since you can also install and import any module you like, you can use your favorite styling library instead.&lt;/p&gt; &#xA;&lt;h2&gt;Running Shell Commands&lt;/h2&gt; &#xA;&lt;p&gt;If need to run extra shell commands without using the &lt;a href=&#34;https://raw.githubusercontent.com/felixhageloh/uebersicht/master/#command&#34;&gt;command&lt;/a&gt; property, you can import the &lt;code&gt;run&lt;/code&gt; function from the &lt;code&gt;uebersicht&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;It returns a Promise, which will resolve to the output of the command (stdout) or reject if any error occurred.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { run } from &#39;uebersicht&#39;&#xA;&#xA;export const render =&amp;gt; (props, dispatch) {&#xA;  return (&#xA;    &amp;lt;button&#xA;      onClick={() =&amp;gt; {&#xA;        run(&#39;echo &#34;new output&#34;&#39;)&#xA;          .then((output) =&amp;gt; dispatch({type: &#39;OUTPUT_UPDATED&#39;, output}))&#xA;      }}&#xA;    &amp;gt;&#xA;      Update&#xA;    &amp;lt;/button&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that in order to receive click events you need to configure an interaction shortcut and give Übersicht accessibility access.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Geolocation API&lt;/h2&gt; &#xA;&lt;p&gt;While the WebView used by Übersicht seems to provide the standard HTML5 geolocation API, it is not functional and there seems to be no way to enable it. Übersicht now provides a custom implementation, which tries to follow the standard implementation as closely as possible. However, so far it provides only the basics and might still be somewhat unstable. The api can be found under &lt;code&gt;window.geolocation&lt;/code&gt; (instead of &lt;code&gt;window.navigator.geolocation&lt;/code&gt;). And supports the following methods&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;geolocation.getCurrentPosition(callback)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;geolocation.watchPosition(callback)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;geolocation.clearWatch(watchId)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Geolocation&#34;&gt;documentation&lt;/a&gt; for details on how to use these methods. The main difference to the standard API is that none of them accept options (the accuracy for position data is always set to the highest) and error reporting has not be implemented yet.&lt;/p&gt; &#xA;&lt;p&gt;However, in a addition to the standard &lt;code&gt;Position&lt;/code&gt; object provided by the standard API, Übersicht provides an extra &lt;code&gt;address&lt;/code&gt; property with the following fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Street&lt;/li&gt; &#xA; &lt;li&gt;City&lt;/li&gt; &#xA; &lt;li&gt;ZIP&lt;/li&gt; &#xA; &lt;li&gt;Country&lt;/li&gt; &#xA; &lt;li&gt;State&lt;/li&gt; &#xA; &lt;li&gt;CountryCode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Built In Proxy Server&lt;/h2&gt; &#xA;&lt;p&gt;If you like you make Ajax requests to an external site without using a command, you can make use of the built in proxy server. It is running on &lt;code&gt;http://127.0.0.1:41417&lt;/code&gt; and can be used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;command: (callback) -&amp;gt;&#xA;  proxy = &#34;http://127.0.0.1:41417/&#34;&#xA;  server = &#34;http://example.com:8080&#34;&#xA;  path = &#34;/getsomejson&#34;&#xA;  $.get proxy + server + path, (json) -&amp;gt;&#xA;    callback null, json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scripting Support&lt;/h2&gt; &#xA;&lt;p&gt;Übersicht has AppleScript support since version 1.1.45. To get detailed information on what you can script, open the Script Editor and add Übersicht to the Library (use Window -&amp;gt; Library to show). Here are a few examples of what you can do with AppleScript. (Note that the examples all use the application id instead of the app name. This is because typing the umlaut Ü can be tricky):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tell application id &#34;tracesOf.Uebersicht&#34; to refresh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;refreshes all widgets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tell application id &#34;tracesOf.Uebersicht&#34; to refresh widget id &#34;my-widget&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;refreshes widget with id &#34;my-widget&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tell application id &#34;tracesOf.Uebersicht&#34; to every widget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;lists all widgets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tell application id &#34;tracesOf.Uebersicht&#34; to set hidden of widget id &#34;top-cpu-coffee&#34; to false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;hides the widget with ID &#34;top-cpu-coffee&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Building Übersicht&lt;/h2&gt; &#xA;&lt;p&gt;To build Übersicht you will need to have NodeJS and a few dependencies installed:&lt;/p&gt; &#xA;&lt;h3&gt;setup&lt;/h3&gt; &#xA;&lt;p&gt;Currently, the project supports node 8.&lt;/p&gt; &#xA;&lt;p&gt;If you already have node, you&#39;ll have to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew unlink node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, install node 8 using homebrew&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install node@8 &amp;amp;&amp;amp; brew link --force node@8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;git and unicode characters&lt;/h3&gt; &#xA;&lt;p&gt;Git might not like the umlaut (ü) in some of the path names and will constantly show them as untracked files. To get rid of this issue, I had to use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config core.precomposeunicode false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, the common advice is to set this to &lt;code&gt;true&lt;/code&gt;. It might depend on the OS and git version which one to use.&lt;/p&gt; &#xA;&lt;h3&gt;building&lt;/h3&gt; &#xA;&lt;p&gt;The code base consists of two parts, a cocoa app and a NodeJS app inside &lt;code&gt;server/&lt;/code&gt;. To build the node app separately, use &lt;code&gt;npm run release&lt;/code&gt;. This happens automatically every time you build using XCode.&lt;/p&gt; &#xA;&lt;p&gt;The node app can be run standalone using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;coffee server/server.coffee -d &amp;lt;path/to/widget/dir&amp;gt; -p &amp;lt;port&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Building in Xcode&lt;/h1&gt; &#xA;&lt;p&gt;The first time opening the project in Xcode you might see this message when trying to build: &#34;The run destination My Mac is not valid for Running the scheme &#39;Übersicht&#39;.&#34;&lt;/p&gt; &#xA;&lt;p&gt;Click on &lt;code&gt;Uebersicht&lt;/code&gt; in the project navigator and then select the menu &lt;code&gt;Editor &amp;gt; Validate Settings...&lt;/code&gt; and click &lt;code&gt;Perform Changes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can then attempt to build, you may then be presented with code sign issues, click &lt;code&gt;Fix Issue&lt;/code&gt; to continue.&lt;/p&gt; &#xA;&lt;p&gt;Now you need to remove the code signing shell script, select the &lt;code&gt;Übersicht&lt;/code&gt; target and under &lt;code&gt;Build Phases&lt;/code&gt; remove the code in the &lt;code&gt;Code Sign Frameworks&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;You should now be able to build successfully.&lt;/p&gt; &#xA;&lt;p&gt;There is one last step on the Node.js side to complete. For the sake of brevity, this link will solve your problem:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http&#34;&gt;http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Legal&lt;/h1&gt; &#xA;&lt;p&gt;The source for Übersicht is released under the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;© 2019 Felix Hageloh&lt;/p&gt;</summary>
  </entry>
</feed>