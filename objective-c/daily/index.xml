<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-03T01:34:30Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>trunkmaster/nextspace</title>
    <updated>2024-01-03T01:34:30Z</updated>
    <id>tag:github.com,2024-01-03:/trunkmaster/nextspace</id>
    <link href="https://github.com/trunkmaster/nextspace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NeXTSTEP-like desktop environment for Linux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NEXTSPACE&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.circleci.com/pipelines/github/trunkmaster/nextspace/&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/trunkmaster/nextspace.svg?style=svg&#34; alt=&#34;trunkmaster&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;NEXTSPACE is a desktop environment that brings a &lt;a href=&#34;https://en.wikipedia.org/wiki/NeXTSTEP&#34;&gt;NeXTSTEP&lt;/a&gt; look and feel to Linux. I try to keep the user experience as close as possible to the original NeXT OS. It is developed according to the &lt;a href=&#34;http://www.gnustep.org/resources/documentation/OpenStepUserInterfaceGuidelines.pdf&#34;&gt;&#34;OpenStep User Interface Guidelines&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An explanation of the NeXTSTEP / NextStep naming convention is discussed in further detail &lt;a href=&#34;https://raw.githubusercontent.com/trunkmaster/nextspace/master/Documentation/OpenStep%20Confusion.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trunkmaster/nextspace/master/Documentation/NEXTSPACE_Screenshot.png&#34; alt=&#34;NEXTSPACE example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;I want to create a fast, elegant, reliable, and easy to use desktop environment with maximum attention to user experience (usability) and visual maturity. I would like it to become a platform where applications will be running with a taste of NeXT&#39;s OS. Core applications such as Login, Workspace, and Preferences are the base for future application development and examples of visual style and application integration methods.&lt;/p&gt; &#xA;&lt;p&gt;NEXTSPACE is not just a set of applications tightly integrated to each other. It is a core OS with frameworks, mouse cursors, fonts, colors, animations, and everything I think will help users to be effective and happy.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;I like the look, feel, and design principles of NeXTSTEP.&lt;/li&gt; &#xA; &lt;li&gt;I believe it will become an interesting environment for developers and comfortable (fast, easy to use, feature-rich) for users.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Unlike other &#39;real&#39; and &#39;serious&#39; projects, I have not yet defined a target audience for NEXTSPACE. I intentionally left aside modern UI design trends (fancy animations, shadows, gray blurry lines, flat controls, acid colors, transparency). I like the accurate, clear, grayish, and &#34;boring&#34; UI that helps, not hinder, to get my job done.&lt;/p&gt; &#xA;&lt;h2&gt;Not planned&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Porting to other Linux distributions and operating systems. For now, I want a fast, accurate, and stable version for RedHat-based Linux distributions. Currently these are CentOS 7, CentOS Stream and Fedora. However, NEXTSPACE was designed to be portable and thus this point may be changed in future.&lt;/li&gt; &#xA; &lt;li&gt;GNOME, KDE, macOS rival in terms of visual effects, modern design principles, look and feel.&lt;/li&gt; &#xA; &lt;li&gt;Implementing a macOS-like desktop paradigm. There is another good place for this -- see &lt;a href=&#34;http://etoileos.com&#34;&gt;Étoilé&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Installation is based off CentOS 7&#39;s minimal install, you can find &lt;a href=&#34;https://github.com/trunkmaster/nextspace/wiki/Install-Guide&#34;&gt;full directions in the installation guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Applications&lt;/h2&gt; &#xA;&lt;p&gt;Below is a brief description of core applications. More information about application functionality will be added in the future.&lt;/p&gt; &#xA;&lt;h3&gt;Login&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trunkmaster/nextspace/projects/6&#34;&gt;Status of implementation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple login panel where you enter your user name and password. No screenshot - it&#39;s an exact copy of NeXTSTEP&#39;s &lt;code&gt;loginwindow&lt;/code&gt; in terms of look and feel.&lt;/p&gt; &#xA;&lt;h3&gt;Workspace&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trunkmaster/nextspace/projects/4&#34;&gt;Status of implementation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A fast and elegant Workspace Manager using multithreading to provide maximum smoothness for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File system navigation, file management (create, copy, move, link files/directories).&lt;/li&gt; &#xA; &lt;li&gt;Seamless application, process, and window management (start, autostart, close, resize, move, maximize, miniaturize, hide).&lt;/li&gt; &#xA; &lt;li&gt;macOS-style window resizing: the cursor stops moving when the maximum/minimum size of a window has been reached, and the cursor changes its image to give a hint for available directions.&lt;/li&gt; &#xA; &lt;li&gt;Virtual desktops, Dock, applications and window icons.&lt;/li&gt; &#xA; &lt;li&gt;Media management - automatically mounting removable media, providing menu items to eject/mount/unmount removables.&lt;/li&gt; &#xA; &lt;li&gt;Background processes - all file and media management operations have status indicators with controls (stop, pause, cancel).&lt;/li&gt; &#xA; &lt;li&gt;Launcher - a panel to run commands with autocompletion and history.&lt;/li&gt; &#xA; &lt;li&gt;Recycler - support for drag-and-drop and the ability to restore recycled objects to their original location with a single click.&lt;/li&gt; &#xA; &lt;li&gt;Other: inspectors for various types of contents, finder, console messages and preferences for various parts of Workspace.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Workspace is NOT:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;WindowMaker with some patches&lt;/li&gt; &#xA;  &lt;li&gt;WindowMaker with some good configuration defaults only&lt;/li&gt; &#xA;  &lt;li&gt;Another implementation of WindowMaker.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Workspace is written from scratch. Some WindowMaker code is a part of Workspace (as well as configuration defaults) to provide window management functions. The code is tightly coupled with Workspace to provide seamless intergation. Configurable parameters of the integrated WindowMaker are spread across Workspace&#39;s Preferences and Preferences application.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trunkmaster/nextspace/master/Documentation/Workspace.png&#34; alt=&#34;Workspace&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Preferences&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trunkmaster/nextspace/projects/2&#34;&gt;Status of implementation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Settings for locale, fonts, displays (size, brightness, contrast (gamma correction), desktop background, displays arrangement), keyboard (repeat, layouts, numpad behaviour, modifiers), mouse (delay, threshold, scrollwheel settings, mouse buttons configutation), sound, network, power management.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trunkmaster/nextspace/master/Documentation/Preferences-Display.png&#34; alt=&#34;Display&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/trunkmaster/nextspace/master/Documentation/Preferences-Screen.png&#34; alt=&#34;Screen&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/trunkmaster/nextspace/master/Documentation/Preferences-Mouse.png&#34; alt=&#34;Mouse&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/trunkmaster/nextspace/master/Documentation/Preferences-Keyboard.png&#34; alt=&#34;Keypard&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Terminal&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trunkmaster/nextspace/projects/3&#34;&gt;Status of implementation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A terminal with Linux console emulation. I&#39;ve started with the version created by Alexander Malmberg and made numerous fixes and enhancements. The original application can be found on the &lt;a href=&#34;http://www.nongnu.org/gap/terminal/index.html&#34;&gt;GNUstep Application Project&lt;/a&gt; site. Enhancements to the original application are numerous. Some of them are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Preferences and Services panels rewritten from scratch.&lt;/li&gt; &#xA; &lt;li&gt;Numerous fixes and enhancements in: color management (background/foreground elements can be set to any color), cursor placement fixes on scrolling and window resizing, and the addition of &#39;Clear Buffer&#39; and &#39;Set Title&#39; menu items.&lt;/li&gt; &#xA; &lt;li&gt;Search through the text displayed in the terminal window (Find panel).&lt;/li&gt; &#xA; &lt;li&gt;Session management: you can save a window with all its settings that are set in the preferences panel (including any running shells/commands) to a file and then open it. Configuration with multiple windows is supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trunkmaster/nextspace/master/Documentation/Terminals.png&#34; alt=&#34;Terminals&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;For developers&lt;/h2&gt; &#xA;&lt;p&gt;For those who are eager to know &#34;How it&#39;s done?&#34; can find information on development tasks, goals, solutions, implementation details, and build instructions on the &lt;a href=&#34;https://github.com/trunkmaster/nextspace/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebookarchive/Shimmer</title>
    <updated>2024-01-03T01:34:30Z</updated>
    <id>tag:github.com,2024-01-03:/facebookarchive/Shimmer</id>
    <link href="https://github.com/facebookarchive/Shimmer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An easy way to add a simple, shimmering effect to any view in an iOS app.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shimmer&lt;/h1&gt; &#xA;&lt;p&gt;Shimmer is an easy way to add a shimmering effect to any view in your app. It&#39;s useful as an unobtrusive loading indicator.&lt;/p&gt; &#xA;&lt;p&gt;Shimmer was originally developed to show loading status in &lt;a href=&#34;http://facebook.com/paper&#34;&gt;Paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/facebook/Shimmer/raw/master/shimmer.gif?raw=true&#34; alt=&#34;Shimmer&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use Shimmer, create a &lt;code&gt;FBShimmeringView&lt;/code&gt; or &lt;code&gt;FBShimmeringLayer&lt;/code&gt; and add your content. To start shimmering, set the &lt;code&gt;shimmering&lt;/code&gt; property to &lt;code&gt;YES&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example of making a label shimmer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;FBShimmeringView *shimmeringView = [[FBShimmeringView alloc] initWithFrame:self.view.bounds];&#xA;[self.view addSubview:shimmeringView];&#xA;&#xA;UILabel *loadingLabel = [[UILabel alloc] initWithFrame:shimmeringView.bounds];&#xA;loadingLabel.textAlignment = NSTextAlignmentCenter;&#xA;loadingLabel.text = NSLocalizedString(@&#34;Shimmer&#34;, nil);&#xA;shimmeringView.contentView = loadingLabel;&#xA;&#xA;// Start shimmering.&#xA;shimmeringView.shimmering = YES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s also an example project. In the example, you can swipe horizontally and vertically to try various shimmering parameters, or tap to start or stop shimmering. (To build the example locally, you&#39;ll need to open &lt;code&gt;FBShimmering.xcworkpace&lt;/code&gt; rather than the &lt;code&gt;.xcodeproj&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are two options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Shimmer is available as &lt;code&gt;Shimmer&lt;/code&gt; in &lt;a href=&#34;http://cocoapods.org&#34;&gt;Cocoapods&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Manually add the files into your Xcode project. Slightly simpler, but updates are also manual.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Shimmer requires iOS 6 or later.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Shimmer uses the &lt;code&gt;-[CALayer mask]&lt;/code&gt; property to enable shimmering, similar to what&#39;s described in John Harper&#39;s 2009 WWDC talk (unfortunately no longer online). Shimmer uses CoreAnimation&#39;s timing features to smoothly transition &#34;on-beat&#34; when starting and stopping the shimmer.&lt;/p&gt; &#xA;&lt;h2&gt;Other Platforms&lt;/h2&gt; &#xA;&lt;p&gt;We have a version of Shimmer for Android, too! It&#39;s &lt;a href=&#34;https://github.com/facebook/shimmer-android&#34;&gt;also available on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the CONTRIBUTING file for how to help out.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Shimmer is BSD-licensed.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SBJson/SBJson</title>
    <updated>2024-01-03T01:34:30Z</updated>
    <id>tag:github.com,2024-01-03:/SBJson/SBJson</id>
    <link href="https://github.com/SBJson/SBJson" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This framework implements a strict JSON parser and generator in Objective-C.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SBJson 5&lt;/h1&gt; &#xA;&lt;p&gt;Chunk-based JSON parsing and generation in Objective-C.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/SBJson/SBJson&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/SBJson/SBJson.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.repostatus.org/#inactive&#34;&gt;&lt;img src=&#34;http://www.repostatus.org/badges/0.1.0/inactive.svg?sanitize=true&#34; alt=&#34;Project Status: Inactive - The project has reached a stable, usable state but is no longer being actively developed; support/maintenance will be provided as time allows.&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;SBJson&#39;s number one feature is stream/chunk-based operation. Feed the parser one or more chunks of UTF8-encoded data and it will call a block you provide with each root-level document or array. Or, optionally, for each top-level entry in each root-level array.&lt;/p&gt; &#xA;&lt;p&gt;With this you can reduce the apparent latency for each download/parse cycle of documents over a slow connection. You can start parsing &lt;em&gt;and return chunks of the parsed document&lt;/em&gt; before the full document has downloaded. You can also parse massive documents bit by bit so you don&#39;t have to keep them all in memory.&lt;/p&gt; &#xA;&lt;p&gt;SBJson maps JSON types to Objective-C types in the following way:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;JSON Type&lt;/th&gt; &#xA;   &lt;th&gt;Objective-C Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;NSNull&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;NSString&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;   &lt;td&gt;NSMutableArray&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;object&lt;/td&gt; &#xA;   &lt;td&gt;NSMutableDictionary&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;-[NSNumber numberWithBool: YES]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;-[NSNumber numberWithBool: NO]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;NSNumber&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Booleans roundtrip properly even though Objective-C doesn&#39;t have a dedicated class for boolean values.&lt;/li&gt; &#xA; &lt;li&gt;Integers use either &lt;code&gt;long long&lt;/code&gt; or &lt;code&gt;unsigned long long&lt;/code&gt; if they fit, to avoid rounding errors. For all other numbers we use the &lt;code&gt;double&lt;/code&gt; type, with all the potential rounding errors that entails.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&#34;Plain&#34; Chunk Based Parsing&lt;/h2&gt; &#xA;&lt;p&gt;First define a simple block &amp;amp; an error handler. (These are just minimal examples. You should strive to do something better that makes sense in your application!)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;SBJson5ValueBlock block = ^(id v, BOOL *stop) {&#xA;    BOOL isArray = [v isKindOfClass:[NSArray class]];&#xA;    NSLog(@&#34;Found: %@&#34;, isArray ? @&#34;Array&#34; : @&#34;Object&#34;);&#xA;};&#xA;&#xA;SBJson5ErrorBlock eh = ^(NSError* err) {&#xA;    NSLog(@&#34;OOPS: %@&#34;, err);&#xA;    exit(1);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then create a parser and add data to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;id parser = [SBJson5Parser parserWithBlock:block&#xA;                              errorHandler:eh];&#xA;&#xA;id data = [@&#34;[true,&#34; dataWithEncoding:NSUTF8StringEncoding];&#xA;[parser parse:data]; // returns SBJson5ParserWaitingForData&#xA;&#xA;// block is not called yet...&#xA;&#xA;// ok, now we add another value and close the array&#xA;&#xA;data = [@&#34;false]&#34; dataWithEncoding:NSUTF8StringEncoding];&#xA;[parser parse:data]; // returns SBJson5ParserComplete&#xA;&#xA;// the above -parse: method calls your block before returning.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alright! Now let&#39;s look at something slightly more interesting.&lt;/p&gt; &#xA;&lt;h2&gt;Handling multiple documents&lt;/h2&gt; &#xA;&lt;p&gt;This is useful for something like Twitter&#39;s feed, which gives you one JSON document per line. Here is an example of parsing many consequtive JSON documents, where your block will be called once for each document:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;id parser = [SBJson5Parser multiRootParserWithBlock:block&#xA;                                       errorHandler:eh];&#xA;&#xA;// Note that this input contains multiple top-level JSON documents&#xA;id data = [@&#34;[]{}&#34; dataWithEncoding:NSUTF8StringEncoding];&#xA;[parser parse:data];&#xA;[parser parse:data];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above example will print:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Found: Array&#xA;Found: Object&#xA;Found: Array&#xA;Found: Object&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unwrapping a gigantic top-level array&lt;/h2&gt; &#xA;&lt;p&gt;Often you won&#39;t have control over the input you&#39;re parsing, so can&#39;t use a multiRootParser. But, all is not lost: if you are parsing a long array you can get the same effect by using an unwrapRootArrayParser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;id parser = [SBJson5Parser unwrapRootArrayParserWithBlock:block&#xA;                                             errorHandler:eh];&#xA;&#xA;// Note that this input contains A SINGLE top-level document&#xA;id data = [@&#34;[[],{},[],{}]&#34; dataWithEncoding:NSUTF8StringEncoding];&#xA;[parser parse:data];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For safety there is a max nesting level for all input. This defaults to 32, but is configurable.&lt;/li&gt; &#xA; &lt;li&gt;The writer can sort dictionary keys so output is consistent across writes.&lt;/li&gt; &#xA; &lt;li&gt;The writer can create human-readable output, with newlines and indents.&lt;/li&gt; &#xA; &lt;li&gt;You can install SBJson v3, v4 and v5 side-by-side in the same application. (This is possible because all classes &amp;amp; public symbols contains the major version number.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;A word of warning&lt;/h2&gt; &#xA;&lt;p&gt;Stream based parsing does mean that you lose some of the correctness verification you would have with a parser that considered the entire input before returning an answer. It is technically possible to have some parts of a document returned &lt;em&gt;as if they were correct&lt;/em&gt; but then encounter an error in a later part of the document. You should keep this in mind when considering whether it would suit your application.&lt;/p&gt; &#xA;&lt;h1&gt;American Fuzzy Lop&lt;/h1&gt; &#xA;&lt;p&gt;I&#39;ve run &lt;a href=&#34;http://lcamtuf.coredump.cx/afl/&#34;&gt;AFL&lt;/a&gt; on the sbjson binary for over 24 hours, with no crashes found. (I cannot reproduce the hangs reported when attempting to parse them manually.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                       american fuzzy lop 2.35b (sbjson)&#xA;&#xA;┌─ process timing ─────────────────────────────────────┬─ overall results ─────┐&#xA;│        run time : 1 days, 0 hrs, 45 min, 26 sec      │  cycles done : 2      │&#xA;│   last new path : 0 days, 0 hrs, 5 min, 24 sec       │  total paths : 555    │&#xA;│ last uniq crash : none seen yet                      │ uniq crashes : 0      │&#xA;│  last uniq hang : 0 days, 2 hrs, 11 min, 43 sec      │   uniq hangs : 19     │&#xA;├─ cycle progress ────────────────────┬─ map coverage ─┴───────────────────────┤&#xA;│  now processing : 250* (45.05%)     │    map density : 0.70% / 1.77%         │&#xA;│ paths timed out : 0 (0.00%)         │ count coverage : 3.40 bits/tuple       │&#xA;├─ stage progress ────────────────────┼─ findings in depth ────────────────────┤&#xA;│  now trying : auto extras (over)    │ favored paths : 99 (17.84%)            │&#xA;│ stage execs : 603/35.6k (1.70%)     │  new edges on : 116 (20.90%)           │&#xA;│ total execs : 20.4M                 │ total crashes : 0 (0 unique)           │&#xA;│  exec speed : 481.9/sec             │   total hangs : 44 (19 unique)         │&#xA;├─ fuzzing strategy yields ───────────┴───────────────┬─ path geometry ────────┤&#xA;│   bit flips : 320/900k, 58/900k, 5/899k             │    levels : 8          │&#xA;│  byte flips : 0/112k, 4/112k, 3/112k                │   pending : 385        │&#xA;│ arithmetics : 66/6.24M, 0/412k, 0/35                │  pend fav : 1          │&#xA;│  known ints : 5/544k, 0/3.08M, 0/4.93M              │ own finds : 554        │&#xA;│  dictionary : 0/0, 0/0, 29/1.83M                    │  imported : n/a        │&#xA;│       havoc : 64/300k, 0/0                          │ stability : 100.00%    │&#xA;│        trim : 45.19%/56.5k, 0.00%                   ├────────────────────────┘&#xA;^C────────────────────────────────────────────────────┘             [cpu: 74%]&#xA;&#xA;+++ Testing aborted by user +++&#xA;[+] We&#39;re done here. Have a nice day!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;API Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;http://cocoadocs.org/docsets/SBJson&#34;&gt;API Documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;The preferred way to use SBJson is by using &lt;a href=&#34;http://cocoapods.org/?q=sbjson&#34;&gt;CocoaPods&lt;/a&gt;. In your Podfile use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;SBJson&#39;, &#39;~&amp;gt; 5.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Carthage&lt;/h2&gt; &#xA;&lt;p&gt;SBJson is compatible with &lt;em&gt;Carthage&lt;/em&gt;. Follow the &lt;a href=&#34;https://github.com/Carthage/Carthage#if-youre-building-for-ios-tvos-or-watchos&#34;&gt;Getting Started Guide for iOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;SBJson/SBJson&#34; == 5.0.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bundle the source files&lt;/h2&gt; &#xA;&lt;p&gt;An alternative that I no longer recommend is to copy all the source files (the contents of the &lt;code&gt;Classes&lt;/code&gt; folder) into your own Xcode project.&lt;/p&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SBJson/ChunkedDelivery&#34;&gt;https://github.com/SBJson/ChunkedDelivery&lt;/a&gt; - a toy example showing how one can use &lt;code&gt;NSURLSessionDataDelegate&lt;/code&gt; to do chunked delivery.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SBJson/DisplayPretty&#34;&gt;https://github.com/SBJson/DisplayPretty&lt;/a&gt; - a very brief example using SBJson 4 to reflow JSON on OS X.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Review (or create) StackOverflow questions &lt;a href=&#34;http://stackoverflow.com/questions/tagged/sbjson&#34;&gt;tagged with &lt;code&gt;SBJson&lt;/code&gt;&lt;/a&gt; if you have questions about how to use the library.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;a href=&#34;http://github.com/SBJson/SBJson/issues&#34;&gt;issue tracker&lt;/a&gt; if you have found a bug.&lt;/li&gt; &#xA; &lt;li&gt;I regret I&#39;m only able to support the current major release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Philosophy on backwards compatibility&lt;/h2&gt; &#xA;&lt;p&gt;SBJson practice &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;, which means we do not break the API in major releases. If something requires a backwards-incompatible change, we release a new major version. (Hence why a library of less than 1k lines has more major versions than Emacs.)&lt;/p&gt; &#xA;&lt;p&gt;I also try support a gradual migration from one major version to the other by allowing the last three major versions to co-exist in the same app without conflicts. The way to do this is putting the major version number in all the library&#39;s symbols and file names. So if v6 ever comes out, the &lt;code&gt;SBJson5Parser&lt;/code&gt; class would become &lt;code&gt;SBJson6Parser&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;BSD. See &lt;a href=&#34;https://raw.githubusercontent.com/SBJson/SBJson/trunk/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>