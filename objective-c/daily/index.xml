<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T01:49:33Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zhuowei/HvDecompile</title>
    <updated>2022-06-02T01:49:33Z</updated>
    <id>tag:github.com,2022-06-02:/zhuowei/HvDecompile</id>
    <link href="https://github.com/zhuowei/HvDecompile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Decompiling macOS Hypervisor.framework by hand&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>google/promises</title>
    <updated>2022-06-02T01:49:33Z</updated>
    <id>tag:github.com,2022-06-02:/google/promises</id>
    <link href="https://github.com/google/promises" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Promises is a modern framework that provides a synchronization construct for Swift and Objective-C.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/google/promises.svg?sanitize=true&#34; alt=&#34;Apache License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/google/promises&#34;&gt;&lt;img src=&#34;https://api.travis-ci.org/google/promises.svg?branch=master&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/google/promises&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/google/promises.svg?sanitize=true&#34; alt=&#34;Gitter Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/platforms-macOS%20%7C%20iOS%20%7C%20tvOS%20%7C%20watchOS-blue.svg?longCache=true&amp;amp;style=flat&#34; alt=&#34;Platforms&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/languages-Swift%20%7C%20ObjC-orange.svg?longCache=true&amp;amp;style=flat&#34; alt=&#34;Languages&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/supports-Bazel%20%7C%20SwiftPM%20%7C%20CocoaPods%20%7C%20Carthage-yellow.svg?longCache=true&amp;amp;style=flat&#34; alt=&#34;Package Managers&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Promises&lt;/h1&gt; &#xA;&lt;p&gt;Promises is a modern framework that provides a synchronization construct for Objective-C and Swift to facilitate writing asynchronous code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md&#34;&gt;Introduction&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#the-problem-with-async-code&#34;&gt;The problem with async code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#promises-to-the-rescue&#34;&gt;Promises to the rescue&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#what-is-a-promise&#34;&gt;What is a promise?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#framework&#34;&gt;Framework&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#benchmark&#34;&gt;Benchmark&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#add-dependency&#34;&gt;Add dependency&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#import&#34;&gt;Import&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#adopt&#34;&gt;Adopt&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#basics&#34;&gt;Basics&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#creating-promises&#34;&gt;Creating promises&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#async&#34;&gt;Async&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#do&#34;&gt;Do&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#pending&#34;&gt;Pending&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#create-a-resolved-promise&#34;&gt;Resolved&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#observing-fulfillment&#34;&gt;Observing fulfillment&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#then&#34;&gt;Then&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#observing-rejection&#34;&gt;Observing rejection&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#catch&#34;&gt;Catch&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#extensions&#34;&gt;Extensions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#all&#34;&gt;All&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#always&#34;&gt;Always&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#awaitpromise&#34;&gt;AwaitPromise&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#delay&#34;&gt;Delay&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#race&#34;&gt;Race&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#recover&#34;&gt;Recover&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#reduce&#34;&gt;Reduce&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#retry&#34;&gt;Retry&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#timeout&#34;&gt;Timeout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#validate&#34;&gt;Validate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#wrap&#34;&gt;Wrap&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#advanced-topics&#34;&gt;Advanced topics&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#default-dispatch-queue&#34;&gt;Default dispatch queue&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#ownership-and-retain-cycles&#34;&gt;Ownership and retain cycles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#objective-c---swift-interoperability&#34;&gt;Objective-C &amp;lt;-&amp;gt; Swift interoperability&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#dot-syntax-in-objective-c&#34;&gt;Dot-syntax in Objective-C&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#anti-patterns&#34;&gt;Anti-patterns&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#broken-chain&#34;&gt;Broken chain&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#nested-promises&#34;&gt;Nested promises&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>googlemaps/google-maps-ios-utils</title>
    <updated>2022-06-02T01:49:33Z</updated>
    <id>tag:github.com,2022-06-02:/googlemaps/google-maps-ios-utils</id>
    <link href="https://github.com/googlemaps/google-maps-ios-utils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google Maps SDK for iOS Utility Library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/googlemaps/google-maps-ios-utils/workflows/Run%20unit%20tests/badge.svg?sanitize=true&#34; alt=&#34;Run unit tests&#34;&gt; &lt;a href=&#34;https://cocoapods.org/pods/Google-Maps-iOS-Utils&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Google-Maps-iOS-Utils.svg?sanitize=true&#34; alt=&#34;pod&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/googlemaps/google-maps-ios-utils&#34; alt=&#34;GitHub contributors&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-Apache-blue&#34; alt=&#34;Apache-2.0&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Google Maps SDK for iOS Utility Library&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This open-source library contains classes that are useful for a wide range of applications using the &lt;a href=&#34;https://developers.google.com/maps/documentation/ios-sdk&#34;&gt;Google Maps SDK for iOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Geometry libraries&lt;/strong&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/docs/GeometryRendering.md&#34;&gt;KML and GeoJSON rendering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Geometry utilities&lt;/strong&gt; - Handy spherical &lt;a href=&#34;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/docs/GeometryUtils.md&#34;&gt;geometry utility&lt;/a&gt; functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Heatmaps&lt;/strong&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/docs/HeatmapRendering.md&#34;&gt;Heatmap rendering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Marker clustering&lt;/strong&gt; — handles the display of a large number of points&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Marker customization&lt;/strong&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/docs/CustomMarkers.md&#34;&gt;display custom markers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Quadtree data structure&lt;/strong&gt; - indexes 2D geometry points and performs 2D range queries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;“80%&amp;quot;&#34; vspace=&#34;“10&amp;quot;&#34; src=&#34;https://cloud.githubusercontent.com/assets/16808355/16646253/77feeb96-446c-11e6-9ec1-19e12a7fb3ae.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 11.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;&#xA;target &#39;TARGET_NAME&#39; do&#xA;    pod &#39;Google-Maps-iOS-Utils&#39;, &#39;~&amp;gt; 4.1.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;TARGET_NAME&lt;/code&gt; and then, in the &lt;code&gt;Podfile&lt;/code&gt; directory, type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;googlemaps/google-maps-ios-utils&#34; ~&amp;gt; 4.1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/docs/Carthage.md&#34;&gt;Carthage doc&lt;/a&gt; for further installation instructions.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This feature is only available with Swift 5.3 (Xcode 12) or later.&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies: [&#xA;  .package(&#xA;    url: &#34;https://github.com/googlemaps/google-maps-ios-utils.git&#34;,&#xA;    .upToNextMinor(from: &#34;4.1.0&#34;)&#xA;  )&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to this, you will also have to include the &lt;code&gt;GoogleMaps&lt;/code&gt; dependency using one of the available installation options (CocoaPods, Carthage, or manual)&lt;/p&gt; &#xA;&lt;h2&gt;Samples and Example Usage&lt;/h2&gt; &#xA;&lt;p&gt;e.g. Displaying KML data&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GoogleMapsUtils&#xA;&#xA;func renderKml() {&#xA;    // Parse KML&#xA;    let path: String = // Path to your KML file...&#xA;    let kmlUrl = URL(fileURLWithPath: path)&#xA;    let kmlParser = GMUKmlParser(url: kmlUrl)&#xA;    kmlParser.parse()&#xA;&#xA;    // Render parsed KML&#xA;    let renderer = GMUGeometryRenderer(&#xA;        map: mapView,&#xA;        geometries: kmlParser.placemarks,&#xA;        styles: kmlParser.styles,&#xA;        styleMaps: kmlParser.styleMaps&#xA;    )&#xA;    renderer.render()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see more example usages in our &lt;a href=&#34;https://github.com/googlemaps/google-maps-ios-utils/tree/master/samples&#34;&gt;sample&lt;/a&gt; projects.&lt;/p&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update --platform iOS --use-xcframeworks&lt;/code&gt; at the root of the repository&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;GoogleMapsUtils.xcodeproj&lt;/code&gt; file on Xcode and run one of the targets&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Encounter an issue while using this library?&lt;/p&gt; &#xA;&lt;p&gt;If you find a bug or have a feature request, please file an &lt;a href=&#34;https://github.com/googlemaps/google-maps-ios-utils/issues&#34;&gt;issue&lt;/a&gt;. Or, if you&#39;d like to contribute, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; and our &lt;a href=&#34;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also reach us on our &lt;a href=&#34;https://discord.gg/9fwRNWg&#34;&gt;Discord channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information, check out the detailed guide on the &lt;a href=&#34;https://developers.google.com/maps/documentation/ios-sdk/utility/&#34;&gt;Google Developers site&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>londonappbrewery/mi_card_flutter</title>
    <updated>2022-06-02T01:49:33Z</updated>
    <id>tag:github.com,2022-06-02:/londonappbrewery/mi_card_flutter</id>
    <link href="https://github.com/londonappbrewery/mi_card_flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starter code for the Mi Card Project from the Complete Flutter Development Bootcamp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/AppBreweryBanner.png&#34; alt=&#34;App Brewery Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Mi Card&lt;/h1&gt; &#xA;&lt;h2&gt;Our Goal&lt;/h2&gt; &#xA;&lt;p&gt;Now that you&#39;ve seen how to create a Flutter app entirely from scratch, we&#39;re going to go further and learn more about how to design user interfaces for Flutter apps.&lt;/p&gt; &#xA;&lt;h2&gt;What you will create&lt;/h2&gt; &#xA;&lt;p&gt;Mi Card is a personal business card. Imagine every time you wanted to give someone your contact details or your business card but you didn&#39;t have it on you. Well, now you can get them to download your business card as an app.&lt;/p&gt; &#xA;&lt;h2&gt;What you will learn&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to create Stateless Widgets&lt;/li&gt; &#xA; &lt;li&gt;What is the difference between hot reload and hot refresh and running an app from cold&lt;/li&gt; &#xA; &lt;li&gt;How to use Containers to lay out your UI&lt;/li&gt; &#xA; &lt;li&gt;How to use Columns and Rows to position your UI elements&lt;/li&gt; &#xA; &lt;li&gt;How to add custom fonts&lt;/li&gt; &#xA; &lt;li&gt;How to add Material icons&lt;/li&gt; &#xA; &lt;li&gt;How to style Text widgets&lt;/li&gt; &#xA; &lt;li&gt;How to read and use Flutter Documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a companion project to The App Brewery&#39;s Complete Flutter Development Bootcamp, check out the full course at &lt;a href=&#34;https://www.appbrewery.co/&#34;&gt;www.appbrewery.co&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/readme-end-banner.png&#34; alt=&#34;End Banner&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Instagram/IGListKit</title>
    <updated>2022-06-02T01:49:33Z</updated>
    <id>tag:github.com,2022-06-02:/Instagram/IGListKit</id>
    <link href="https://github.com/Instagram/IGListKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A data-driven UICollectionView framework for building fast and flexible lists.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Instagram/IGListKit/master/Resources/logo-animation.gif&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://travis-ci.org/Instagram/IGListKit&#34;&gt; &lt;img src=&#34;https://travis-ci.org/Instagram/IGListKit.svg?branch=master&amp;amp;style=flat&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/Instagram/IGListKit?branch=master&#34;&gt; &lt;img src=&#34;https://coveralls.io/repos/github/Instagram/IGListKit/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/IGListKit&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/v/IGListKit.svg?style=flat&#34; alt=&#34;Pods Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://instagram.github.io/IGListKit/&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/IGListKit.svg?style=flat&#34; alt=&#34;Platforms&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;A data-driven &lt;code&gt;UICollectionView&lt;/code&gt; framework for building fast and flexible lists.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Main Features&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🙅&lt;/td&gt; &#xA;   &lt;td&gt;Never call &lt;code&gt;performBatchUpdates(_:, completion:)&lt;/code&gt; or &lt;code&gt;reloadData()&lt;/code&gt; again&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🏠&lt;/td&gt; &#xA;   &lt;td&gt;Better architecture with reusable cells and components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔠&lt;/td&gt; &#xA;   &lt;td&gt;Create collections with multiple data types&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔑&lt;/td&gt; &#xA;   &lt;td&gt;Decoupled diffing algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Fully unit tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔍&lt;/td&gt; &#xA;   &lt;td&gt;Customize your diffing behavior for your models&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📱&lt;/td&gt; &#xA;   &lt;td&gt;Simply &lt;code&gt;UICollectionView&lt;/code&gt; at its core&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🚀&lt;/td&gt; &#xA;   &lt;td&gt;Extendable API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🐦&lt;/td&gt; &#xA;   &lt;td&gt;Written in Objective-C with full Swift interop support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;IGListKit&lt;/code&gt; is built and maintained with ❤️ by &lt;a href=&#34;https://engineering.instagram.com/&#34;&gt;Instagram engineering&lt;/a&gt;. We use the open source version &lt;code&gt;master&lt;/code&gt; branch in the Instagram app.&lt;/p&gt; &#xA;&lt;h2&gt;Multilingual translation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Instagram/IGListKit/main/README.zh.md&#34;&gt;Chinese README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 9.0+&lt;/li&gt; &#xA; &lt;li&gt;iOS 9.0+&lt;/li&gt; &#xA; &lt;li&gt;tvOS 9.0+&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.11+ &lt;em&gt;(diffing algorithm components only)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interoperability with Swift 3.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;The preferred installation method is with &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. Add the following to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;IGListKit&#39;, &#39;~&amp;gt; 4.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, add the following to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;Instagram/IGListKit&#34; ~&amp;gt; 4.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To integrate using Xcode:&#xA;&#xA;File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency&#xA;&#xA;Enter package URL: https://github.com/Instagram/IGListKit, and select the latest release.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For advanced usage, see our &lt;a href=&#34;https://instagram.github.io/IGListKit/installation.html&#34;&gt;Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/Instagram/IGListKit.git&#xA;$ cd IGListKit/&#xA;$ ./scripts/setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://instagram.github.io/IGListKit/getting-started.html&#34;&gt;Getting Started guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ray Wenderlich&#39;s &lt;a href=&#34;https://www.raywenderlich.com/147162/iglistkit-tutorial-better-uicollectionviews&#34;&gt;IGListKit Tutorial: Better UICollectionViews&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://github.com/Instagram/IGListKit/tree/master/Examples&#34;&gt;example projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ryan Nystrom&#39;s &lt;a href=&#34;https://academy.realm.io/posts/tryswift-ryan-nystrom-refactoring-at-scale-lessons-learned-rewriting-instagram-feed/&#34;&gt;talk at try! Swift NYC&lt;/a&gt;(Note: this talk was for an earlier version. Some APIs have changed.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/cocoaacademymag/iglistkit-migrating-an-uitableview-to-iglistkitcollectionview-65a30cf9bac9&#34;&gt;Migrating an UITableView to IGListCollectionView&lt;/a&gt;, by Rodrigo Cavalcante&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://overflow.buffer.com/2017/04/10/keeping-data-fresh-buffer-ios-asyncdisplaykit-iglistkit-pusher/&#34;&gt;Keeping data fresh in Buffer for iOS with AsyncDisplayKit, IGListKit &amp;amp; Pusher&lt;/a&gt;, Andy Yates, Buffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find &lt;a href=&#34;https://instagram.github.io/IGListKit&#34;&gt;the docs here&lt;/a&gt;. Documentation is generated with &lt;a href=&#34;https://github.com/realm/jazzy&#34;&gt;jazzy&lt;/a&gt; and hosted on &lt;a href=&#34;https://pages.github.com&#34;&gt;GitHub-Pages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To regenerate docs, run &lt;code&gt;./scripts/build_docs.sh&lt;/code&gt; from the root directory in the repo.&lt;/p&gt; &#xA;&lt;h2&gt;Vision&lt;/h2&gt; &#xA;&lt;p&gt;For the long-term goals and &#34;vision&#34; of &lt;code&gt;IGListKit&lt;/code&gt;, please read our &lt;a href=&#34;https://github.com/Instagram/IGListKit/raw/master/Guides/VISION.md&#34;&gt;Vision&lt;/a&gt; doc.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/Instagram/IGListKit/raw/master/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; file for how to help. At Instagram, we sync the open source version of &lt;code&gt;IGListKit&lt;/code&gt; daily, so we&#39;re always testing the latest changes. But that requires all changes be thoroughly tested and follow our style guide.&lt;/p&gt; &#xA;&lt;p&gt;We have a set of &lt;a href=&#34;https://github.com/Instagram/IGListKit/issues?q=is%3Aissue+is%3Aopen+label%3Astarter-task&#34;&gt;starter tasks&lt;/a&gt; that are great for beginners to jump in on and start contributing.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;IGListKit&lt;/code&gt; is &lt;a href=&#34;https://raw.githubusercontent.com/Instagram/IGListKit/main/LICENSE.md&#34;&gt;MIT-licensed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The files in the &lt;code&gt;/Examples/&lt;/code&gt; directory are licensed under a separate license as specified in each file. Documentation is licensed &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC-BY-4.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AzureAD/microsoft-authentication-library-for-objc</title>
    <updated>2022-06-02T01:49:33Z</updated>
    <id>tag:github.com,2022-06-02:/AzureAD/microsoft-authentication-library-for-objc</id>
    <link href="https://github.com/AzureAD/microsoft-authentication-library-for-objc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Microsoft Authentication Library (MSAL) for iOS and macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Microsoft Authentication Library for iOS and macOS&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/develop/quickstart-v2-ios&#34;&gt;Get Started&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/Azure-Samples/active-directory-ios-swift-native-v2&#34;&gt;iOS Sample Code&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/Azure-Samples/active-directory-macOS-swift-native-v2&#34;&gt;macOS Sample Code&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/Azure-Samples/active-directory-b2c-ios-swift-native-msal&#34;&gt;&lt;u&gt;B2C Sample Code&lt;/u&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://azuread.github.io/microsoft-authentication-library-for-objc/&#34;&gt;Library reference&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/raw/dev/README.md#community-help-and-support&#34;&gt;Support&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://forms.office.com/r/xuBV0CzEih&#34;&gt;Feedback&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The MSAL library for iOS and macOS gives your app the ability to begin using the &lt;a href=&#34;https://aka.ms/aaddev&#34;&gt;Microsoft Identity platform&lt;/a&gt; by supporting &lt;a href=&#34;https://azure.microsoft.com/en-us/services/active-directory/&#34;&gt;Azure Active Directory&lt;/a&gt; and &lt;a href=&#34;https://account.microsoft.com&#34;&gt;Microsoft Accounts&lt;/a&gt; in a converged experience using industry standard OAuth2 and OpenID Connect. The library also supports &lt;a href=&#34;https://azure.microsoft.com/services/active-directory-b2c/&#34;&gt;Azure AD B2C&lt;/a&gt; for those using our hosted identity management service.&lt;/p&gt; &#xA;&lt;h2&gt;Quick sample&lt;/h2&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let config = MSALPublicClientApplicationConfig(clientId: &#34;&amp;lt;your-client-id-here&amp;gt;&#34;)&#xA;let scopes = [&#34;your-scope1-here&#34;, &#34;your-scope2-here&#34;]&#xA;        &#xA;if let application = try? MSALPublicClientApplication(configuration: config) {&#xA;            &#xA;&#x9;#if os(iOS)&#xA;&#x9;let viewController = ... // Pass a reference to the view controller that should be used when getting a token interactively&#xA;&#x9;let webviewParameters = MSALWebviewParameters(authPresentationViewController: viewController)&#xA;&#x9;#else&#xA;&#x9;let webviewParameters = MSALWebviewParameters()&#xA;&#x9;#endif&#xA;&#x9;&#xA;&#x9;let interactiveParameters = MSALInteractiveTokenParameters(scopes: scopes, webviewParameters: webviewParameters)&#xA;&#x9;application.acquireToken(with: interactiveParameters, completionBlock: { (result, error) in&#xA;                &#xA;&#x9;guard let authResult = result, error == nil else {&#xA;&#x9;&#x9;print(error!.localizedDescription)&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;                &#xA;&#x9;// Get access token from result&#xA;&#x9;let accessToken = authResult.accessToken&#xA;                &#xA;&#x9;// You&#39;ll want to get the account identifier to retrieve and reuse the account for later acquireToken calls&#xA;&#x9;let accountIdentifier = authResult.account.identifier&#xA;&#x9;})&#xA;}&#xA;else {&#xA;&#x9;print(&#34;Unable to create application.&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;NSError *msalError = nil;&#xA;    &#xA;MSALPublicClientApplicationConfig *config = [[MSALPublicClientApplicationConfig alloc] initWithClientId:@&#34;&amp;lt;your-client-id-here&amp;gt;&#34;];&#xA;NSArray&amp;lt;NSString *&amp;gt; *scopes = @[@&#34;your-scope1-here&#34;, @&#34;your-scope2-here&#34;];&#xA;    &#xA;MSALPublicClientApplication *application = [[MSALPublicClientApplication alloc] initWithConfiguration:config error:&amp;amp;msalError];&#xA;    &#xA;#if TARGET_OS_IPHONE&#xA;    UIViewController *viewController = ...; // Pass a reference to the view controller that should be used when getting a token interactively&#xA;    MSALWebviewParameters *webParameters = [[MSALWebviewParameters alloc] initWithAuthPresentationViewController:viewController];&#xA;#else&#xA;    MSALWebviewParameters *webParameters = [MSALWebviewParameters new];&#xA;#endif&#xA;    &#xA;MSALInteractiveTokenParameters *interactiveParams = [[MSALInteractiveTokenParameters alloc] initWithScopes:scopes webviewParameters:webParameters];&#xA;[application acquireTokenWithParameters:interactiveParams completionBlock:^(MSALResult *result, NSError *error) {&#xA;    if (!error)&#xA;    {&#xA;        // You&#39;ll want to get the account identifier to retrieve and reuse the account&#xA;        // for later acquireToken calls&#xA;        NSString *accountIdentifier = result.account.identifier;&#xA;            &#xA;        NSString *accessToken = result.accessToken;&#xA;    }&#xA;    else&#xA;    {&#xA;        // Check the error&#xA;    }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; to install &lt;code&gt;MSAL&lt;/code&gt; by adding it to your &lt;code&gt;Podfile&lt;/code&gt; under target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use_frameworks!&#xA; &#xA;target &#39;your-target-here&#39; do&#xA;&#x9;pod &#39;MSAL&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Carthage&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; to install &lt;code&gt;MSAL&lt;/code&gt; by adding it to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;AzureAD/microsoft-authentication-library-for-objc&#34; &#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Swift Packages&lt;/h3&gt; &#xA;&lt;p&gt;You can add &lt;code&gt;MSAL&lt;/code&gt; as a &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages/distributing_binary_frameworks_as_swift_packages&#34;&gt;swift package dependency&lt;/a&gt;. For MSAL version 1.1.14 and above, distribution of MSAL binary framework as a Swift package is available.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;For your project in Xcode, click File → Swift Packages → Add Package Dependency...&lt;/li&gt; &#xA; &lt;li&gt;Choose project to add dependency in&lt;/li&gt; &#xA; &lt;li&gt;Enter : &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc&#34;&gt;https://github.com/AzureAD/microsoft-authentication-library-for-objc&lt;/a&gt; as the package repository URL&lt;/li&gt; &#xA; &lt;li&gt;Choose package options with : &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Rules → Branch : master (For latest MSAL release)&lt;/li&gt; &#xA;   &lt;li&gt;Rules → Version → Exact : [release version &amp;gt;= 1.1.14] (For a particular release version)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For any issues, please check if there is an outstanding SPM/Xcode bug. Workarounds for some bugs we encountered :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have a plugin in your project you might encounter &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/issues/737#issuecomment-767311138&#34;&gt;CFBundleIdentifier collision. Each bundle must have a unique bundle identifier&lt;/a&gt; error. &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/issues/737#issuecomment-767990771&#34;&gt;Workaround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;While archiving, error : “IPA processing failed” UserInfo={NSLocalizedDescription=IPA processing failed}. &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/issues/737#issuecomment-767990771&#34;&gt;Workaround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For a macOS app, “Command CodeSign failed with a nonzero exit code” error. &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/issues/737#issuecomment-770056675&#34;&gt;Workaround&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;You can also use Git Submodule or check out the latest release and use as framework in your application.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring MSAL&lt;/h2&gt; &#xA;&lt;h3&gt;Adding MSAL to your project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Register your app in the &lt;a href=&#34;https://aka.ms/MobileAppReg&#34;&gt;Azure portal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you register a redirect URI for your application. It should be in the following format:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;msauth.$(PRODUCT_BUNDLE_IDENTIFIER)://auth&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Add a new keychain group to your project Capabilities. Keychain group should be &lt;code&gt;com.microsoft.adalcache&lt;/code&gt; on iOS and &lt;code&gt;com.microsoft.identity.universalstorage&lt;/code&gt; on macOS.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AzureAD/microsoft-authentication-library-for-objc/dev/Images/keychain_example.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See more information about &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-v2-keychain-objc&#34;&gt;keychain groups&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/single-sign-on-macos-ios&#34;&gt;Silent SSO for MSAL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;iOS only steps:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add your application&#39;s redirect URI scheme to your &lt;code&gt;Info.plist&lt;/code&gt; file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;    &amp;lt;dict&amp;gt;&#xA;        &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;&#xA;        &amp;lt;array&amp;gt;&#xA;            &amp;lt;string&amp;gt;msauth.$(PRODUCT_BUNDLE_IDENTIFIER)&amp;lt;/string&amp;gt;&#xA;        &amp;lt;/array&amp;gt;&#xA;    &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add &lt;code&gt;LSApplicationQueriesSchemes&lt;/code&gt; to allow making call to Microsoft Authenticator if installed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note that “msauthv3” scheme is needed when compiling your app with Xcode 11 and later.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;LSApplicationQueriesSchemes&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;&#x9;&amp;lt;string&amp;gt;msauthv2&amp;lt;/string&amp;gt;&#xA;&#x9;&amp;lt;string&amp;gt;msauthv3&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more info about &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/reply-url&#34;&gt;configuring redirect uri for MSAL&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;To handle a callback, add the following to &lt;code&gt;appDelegate&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -&amp;gt; Bool {&#xA;        &#xA;&#x9;return MSALPublicClientApplication.handleMSALResponse(url, sourceApplication: options[UIApplication.OpenURLOptionsKey.sourceApplication] as? String)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;- (BOOL)application:(UIApplication *)app&#xA;            openURL:(NSURL *)url&#xA;            options:(NSDictionary&amp;lt;UIApplicationOpenURLOptionsKey,id&amp;gt; *)options&#xA;{&#xA;    return [MSALPublicClientApplication handleMSALResponse:url &#xA;                                         sourceApplication:options[UIApplicationOpenURLOptionsSourceApplicationKey]];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note, that if you adopted UISceneDelegate on iOS 13+&lt;/strong&gt;, MSAL callback needs to be placed into the appropriate delegate method of UISceneDelegate instead of AppDelegate. MSAL &lt;code&gt;handleMSALResponse:sourceApplication:&lt;/code&gt; must be called only once for each URL. If you support both UISceneDelegate and UIApplicationDelegate for compatibility with older iOS, MSAL callback would need to be placed into both files.&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func scene(_ scene: UIScene, openURLContexts URLContexts: Set&amp;lt;UIOpenURLContext&amp;gt;) {&#xA;        &#xA;        guard let urlContext = URLContexts.first else {&#xA;            return&#xA;        }&#xA;        &#xA;        let url = urlContext.url&#xA;        let sourceApp = urlContext.options.sourceApplication&#xA;        &#xA;        MSALPublicClientApplication.handleMSALResponse(url, sourceApplication: sourceApp)&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)scene:(UIScene *)scene openURLContexts:(NSSet&amp;lt;UIOpenURLContext *&amp;gt; *)URLContexts&#xA;{&#xA;    UIOpenURLContext *context = URLContexts.anyObject;&#xA;    NSURL *url = context.URL;&#xA;    NSString *sourceApplication = context.options.sourceApplication;&#xA;    &#xA;    [MSALPublicClientApplication handleMSALResponse:url sourceApplication:sourceApplication];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS only steps:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure your application is signed with a valid development certificate. While MSAL will still work in the unsigned mode, it will behave differently around cache persistence.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using MSAL&lt;/h2&gt; &#xA;&lt;h3&gt;Creating an Application Object&lt;/h3&gt; &#xA;&lt;p&gt;Use the client ID from your app listing when initializing your MSALPublicClientApplication object:&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let config = MSALPublicClientApplicationConfig(clientId: &#34;&amp;lt;your-client-id-here&amp;gt;&#34;)&#xA;let application = try? MSALPublicClientApplication(configuration: config) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;NSError *msalError = nil;&#xA;    &#xA;MSALPublicClientApplicationConfig *config = [[MSALPublicClientApplicationConfig alloc] initWithClientId:@&#34;&amp;lt;your-client-id-here&amp;gt;&#34;];&#xA;MSALPublicClientApplication *application = [[MSALPublicClientApplication alloc] initWithConfiguration:config error:&amp;amp;msalError];&#xA;    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Acquiring Your First Token interactively&lt;/h3&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if os(iOS)&#xA;&#x9;let viewController = ... // Pass a reference to the view controller that should be used when getting a token interactively&#xA;&#x9;let webviewParameters = MSALWebviewParameters(authPresentationViewController: viewController)&#xA;#else&#xA;&#x9;let webviewParameters = MSALWebviewParameters()&#xA;#endif&#xA;let interactiveParameters = MSALInteractiveTokenParameters(scopes: scopes, webviewParameters: webviewParameters)&#xA;application.acquireToken(with: interactiveParameters, completionBlock: { (result, error) in&#xA;                &#xA;&#x9;guard let authResult = result, error == nil else {&#xA;&#x9;&#x9;print(error!.localizedDescription)&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;                &#xA;&#x9;// Get access token from result&#xA;&#x9;let accessToken = authResult.accessToken&#xA;                &#xA;&#x9;// You&#39;ll want to get the account identifier to retrieve and reuse the account for later acquireToken calls&#xA;&#x9;let accountIdentifier = authResult.account.identifier&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;#if TARGET_OS_IPHONE&#xA;    UIViewController *viewController = ...; // Pass a reference to the view controller that should be used when getting a token interactively&#xA;    MSALWebviewParameters *webParameters = [[MSALWebviewParameters alloc] initWithAuthPresentationViewController:viewController];&#xA;#else&#xA;    MSALWebviewParameters *webParameters = [MSALWebviewParameters new];&#xA;#endif &#xA;&#xA;MSALInteractiveTokenParameters *interactiveParams = [[MSALInteractiveTokenParameters alloc] initWithScopes:scopes webviewParameters:webParameters];&#xA;[application acquireTokenWithParameters:interactiveParams completionBlock:^(MSALResult *result, NSError *error) {&#xA;&#x9;if (!error)&#x9;&#xA;&#x9;{&#xA;&#x9;&#x9;// You&#39;ll want to get the account identifier to retrieve and reuse the account&#xA;&#x9;&#x9;// for later acquireToken calls&#xA;&#x9;&#x9;NSString *accountIdentifier = result.account.identifier;&#xA;            &#xA;&#x9;&#x9;NSString *accessToken = result.accessToken;&#xA;&#x9;}&#xA;  &#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;// Check the error&#xA;&#x9;}&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Our library uses the ASWebAuthenticationSession for authentication on iOS 12 by default. See more information about &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/customize-webviews&#34;&gt;default values, and support for other iOS versions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Silently Acquiring an Updated Token&lt;/h3&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;guard let account = try? application.account(forIdentifier: accountIdentifier) else { return }&#xA;let silentParameters = MSALSilentTokenParameters(scopes: scopes, account: account)&#xA;application.acquireTokenSilent(with: silentParameters) { (result, error) in&#xA;            &#xA;&#x9;guard let authResult = result, error == nil else {&#xA;                &#xA;&#x9;let nsError = error! as NSError&#xA;                &#xA;&#x9;&#x9;if (nsError.domain == MSALErrorDomain &amp;amp;&amp;amp;&#xA;&#x9;&#x9;&#x9;nsError.code == MSALError.interactionRequired.rawValue) {&#xA;                    &#xA;&#x9;&#x9;&#x9;// Interactive auth will be required&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;            &#xA;&#x9;// Get access token from result&#xA;&#x9;let accessToken = authResult.accessToken&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSError *error = nil;&#xA;MSALAccount *account = [application accountForIdentifier:accountIdentifier error:&amp;amp;error];&#xA;if (!account)&#xA;{&#xA;    // handle error&#xA;    return;&#xA;}&#xA;    &#xA;MSALSilentTokenParameters *silentParams = [[MSALSilentTokenParameters alloc] initWithScopes:scopes account:account];&#xA;[application acquireTokenSilentWithParameters:silentParams completionBlock:^(MSALResult *result, NSError *error) {&#xA;    if (!error)&#xA;    {&#xA;        NSString *accessToken = result.accessToken;&#xA;    }&#xA;    else&#xA;    {&#xA;        // Check the error&#xA;        if ([error.domain isEqual:MSALErrorDomain] &amp;amp;&amp;amp; error.code == MSALErrorInteractionRequired)&#xA;        {&#xA;            // Interactive auth will be required&#xA;        }&#xA;            &#xA;        // Other errors may require trying again later, or reporting authentication problems to the user&#xA;    }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Responding to an Interaction Required Error&lt;/h3&gt; &#xA;&lt;p&gt;Occasionally user interaction will be required to get a new access token, when this occurs you will receive a &lt;code&gt;MSALErrorInteractionRequired&lt;/code&gt; error when trying to silently acquire a new token. In those cases call &lt;code&gt;acquireToken:&lt;/code&gt; with the same account and scopes as the failing &lt;code&gt;acquireTokenSilent:&lt;/code&gt; call. It is recommended to display a status message to the user in an unobtrusive way before invoking interactive &lt;code&gt;acquireToken:&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please see &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-handling-exceptions&#34;&gt;MSAL error handling guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Microsoft Enterprise SSO plug-in for Apple devices&lt;/h3&gt; &#xA;&lt;p&gt;Microsoft has recently released a new plug-in that uses the newly announced Apple feature called &lt;a href=&#34;https://developer.apple.com/documentation/authenticationservices&#34;&gt;Enterprise Single Sign-On&lt;/a&gt;. Microsoft Enterprise SSO plug-in for Apple devices offers the following benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comes delivered in Microsoft Authenticator app automatically and can be enabled by any MDM.&lt;/li&gt; &#xA; &lt;li&gt;Provides seamless SSO for Active Directory joined accounts across all applications that support Apple&#39;s Enterprise Single Sign-On feature.&lt;/li&gt; &#xA; &lt;li&gt;COMING SOON: Provides seamless SSO across Safari browsers and applications on the device.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;MSAL 1.1.0 and above will use Microsoft Enterprise SSO plug-in automatically instead of the Microsoft Authenticator app when it is active on the device. To use Microsoft Enterprise SSO plug-in in your tenant, you need to enable it in your MDM profile.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/apple-sso-plugin&#34;&gt;more information&lt;/a&gt; about configuring Microsoft Enterprise SSO plug-in for your device &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/apple-sso-plugin&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Single Account Mode&lt;/h3&gt; &#xA;&lt;p&gt;If your app needs to support just one signed-in user at a time, MSAL provides a simple way to read the signed in account. This API must be also used when you are building an application to run on devices that are configured as shared devices - meaning that a single corporate device is shared between multiple employees. Employees can sign in to their devices and access customer information quickly. When they are finished with their shift or task, they will be able to sign-out of all apps on the shared device.&lt;/p&gt; &#xA;&lt;p&gt;Here is a code snippet that shows how you can retrieve current account. You must call API every time when your app comes to foreground or before performing a sensitive operation to detect any signed-in account changes.&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let msalParameters = MSALParameters()&#xA;msalParameters.completionBlockQueue = DispatchQueue.main&#xA;                &#xA;application.getCurrentAccount(with: msalParameters, completionBlock: { (currentAccount, previousAccount, error) in&#xA;            &#xA;&#x9;// currentAccount is the currently signed in account&#xA;&#x9;// previousAccount is the previously signed in account if any&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MSALParameters *parameters = [MSALParameters new];&#xA;parameters.completionBlockQueue = dispatch_get_main_queue();&#xA;        &#xA;[application getCurrentAccountWithParameters:parameters&#xA;                             completionBlock:^(MSALAccount * _Nullable account, MSALAccount * _Nullable previousAccount, NSError * _Nullable error)&#xA;{&#xA;&#x9;// currentAccount is the currently signed in account&#xA;&#x9;// previousAccount is the previously signed in account if any&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Accounts Mode&lt;/h3&gt; &#xA;&lt;p&gt;MSAL also provides a public API to query multiple accounts, granted that they exist in the MSAL cache.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure the umbrella header MSAL-umbrella.h is imported (just MSAL for Swift)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create config, then use it to initialize an application object&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Also initialize MSALAccountEnumerationParameters object with the account identifier. Each MSALAccount object has a parameter called “identifier”, which represents the unique account identifier associated with the given MSALAccount object. We recommend using it as the primary search criterion.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then invoke the API &#34;accountsFromDeviceForParameters&#34; from the application object using the enumeration parameter. If you have multiple accounts in MSAL cache, it will return an array containing MSALAccounts that have the account identifier you specified in the previous step.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once the MSAL account is retrieved, invoke acquire token silent operation&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#import MSAL //Make sure to import MSAL  &#xA;&#xA;let config = MSALPublicClientApplicationConfig(clientId:clientId&#xA;                                           &#x9;redirectUri:redirectUri&#xA;                                            &#x9;authority:authority)&#xA;guard let application = MSALPublicClientApplication(configuration: config) else { return }&#xA;&#xA;let accountIdentifier = &#34;9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca&#34;&#xA;let parameters = MSALAccountEnumerationParameters(identifier:accountIdentifier)&#xA;&#xA;var scopeArr = [&#34;https://graph.microsoft.com/.default&#34;]&#xA;&#xA;if #available(iOS 13.0, macOS 10.15, *)&#xA;{&#xA;&#x9; application.accountsFromDeviceForParameters(with: parameters, completionBlock:{(accounts, error) in&#xA;         if let error = error &#xA;         {&#xA;            //Handle error&#xA;         }&#xA;         &#xA;         guard let accountObjs = accounts else {return}&#xA;         &#xA;         let tokenParameters = MSALSilentTokenParameters(scopes:scopeArr, account: accountObjs[0]);&#xA;                                                                                                   &#xA;         application.acquireTokenSilentWithParameters(with: tokenParameters, completionBlock:{(result, error) in &#xA;                     if let error = error&#xA;                     {&#xA;                         //handle error&#xA;                     }&#xA;                                       &#xA;                     guard let resp = result else {return} //process result&#xA;                                                                                             &#xA;         })                                                               &#xA;                                                                                                                                                             &#xA;   })&#xA;  &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;//import other key libraries  &#xA;#import &#34;MSAL-umbrella.h&#34; //Make sure to import umbrella file &#xA;&#xA;    MSALPublicClientApplicationConfig *config = [[MSALPublicClientApplicationConfig alloc] initWithClientId:clientId&#xA;     redirectUri:redirectUri&#xA;       authority:authority];&#xA;&#xA;    MSALPublicClientApplication *application = [[MSALPublicClientApplication alloc] initWithConfiguration:config error:&amp;amp;error];&#xA;    MSALAccountEnumerationParameters *parameters = [[MSALAccountEnumerationParameters alloc] initWithIdentifier:@&#34;9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca&#34;]; //init with account identifier&#xA;&#xA;    NSArray&amp;lt;NSString *&amp;gt; *scopeArr = [[NSArray alloc] initWithObjects: @&#34;https://graph.microsoft.com/.default&#34;,nil]; //define scope&#xA;&#xA;    if (@available(iOS 13.0, macOS 10.15, *)) //Currently, this public API requires iOS version 13 or greater.&#xA;    {&#xA;        [application accountsFromDeviceForParameters:parameters&#xA;                                     completionBlock:^(NSArray&amp;lt;MSALAccount *&amp;gt; * _Nullable accounts, __unused NSError * _Nullable error)&#xA;        {&#xA;            if (error)&#xA;            {&#xA;              //Log error &amp;amp; return &#xA;            }&#xA;          &#xA;            if (accounts)&#xA;            {&#xA;                NSLog(@&#34;hi there&#34;);&#xA;                MSALSilentTokenParameters *tokenParameters = [[MSALSilentTokenParameters alloc] initWithScopes:scopeArr account:accounts[0]];&#xA;&#xA;                [application acquireTokenSilentWithParameters:tokenParameters&#xA;                                completionBlock:^(MSALResult * _Nullable result, NSError * _Nullable error)&#xA;                 {&#xA;                    if (error)&#xA;                    {&#xA;                        //Log Error &amp;amp; return &#xA;                    }&#xA;                    if (result)&#xA;                    {&#xA;                        //process result&#xA;                    }&#xA;                }&#xA;                 ];&#xA;            }&#xA;     &#xA;        }];&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Detect shared device mode&lt;/h3&gt; &#xA;&lt;p&gt;Use following code to read current device configuration, including whether device is configured as shared:&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;application.getDeviceInformation(with: nil, completionBlock: { (deviceInformation, error) in&#xA;                &#xA;&#x9;guard let deviceInfo = deviceInformation else {&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;                &#xA;&#x9;let isSharedDevice = deviceInfo.deviceMode == .shared&#xA;&#x9;// Change your app UX if needed&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[application getDeviceInformationWithParameters:nil&#xA;                                completionBlock:^(MSALDeviceInformation * _Nullable deviceInformation, NSError * _Nullable error)&#xA;{&#xA;&#x9;if (!deviceInformation)&#xA;&#x9;{&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;            &#xA;&#x9;BOOL isSharedDevice = deviceInformation.deviceMode == MSALDeviceModeShared;&#xA;&#x9;// Change your app UX if needed&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Implement signout&lt;/h3&gt; &#xA;&lt;p&gt;To signout account from your app, call MSAL&#39;s signout API. You can also optionally sign out from the browser. When MSAL is running on a shared device, signout API will signout globally from all apps on user&#39;s device.&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let account = .... /* account retrieved above */&#xA;&#xA;let signoutParameters = MSALSignoutParameters(webviewParameters: self.webViewParameters!)&#xA;signoutParameters.signoutFromBrowser = false&#xA;            &#xA;application.signout(with: account, signoutParameters: signoutParameters, completionBlock: {(success, error) in&#xA;                &#xA;&#x9;if let error = error {&#xA;&#x9;&#x9;// Signout failed&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;                &#xA;&#x9;// Sign out completed successfully&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MSALAccount *account = ... /* account retrieved above */;&#xA;        &#xA;MSALSignoutParameters *signoutParameters = [[MSALSignoutParameters alloc] initWithWebviewParameters:webViewParameters];&#xA;signoutParameters.signoutFromBrowser = NO;&#xA;        &#xA;[application signoutWithAccount:account signoutParameters:signoutParameters completionBlock:^(BOOL success, NSError * _Nullable error)&#xA;{&#xA;&#x9;if (!success)&#xA;&#x9;{&#xA;&#x9;&#x9;// Signout failed&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;            &#xA;&#x9;// Sign out completed successfully&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Versions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;iOS&lt;/strong&gt; - MSAL supports iOS 11 and above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt; - MSAL supports macOS (OSX) 10.12 and above.&lt;/p&gt; &#xA;&lt;h2&gt;Migrating from ADAL Objective-C&lt;/h2&gt; &#xA;&lt;p&gt;MSAL Objective-C is designed to support smooth migration from ADAL Objective-C library. For detailed design and instructions, follow this &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/migrate-objc-adal-msal&#34;&gt;guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Additional guidance&lt;/h2&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/wiki&#34;&gt;wiki&lt;/a&gt; is intended to document common patterns, error handling and debugging, functionality (e.g. logging, telemetry), and active bugs. You can find it &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/wiki&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community Help and Support&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/msal&#34;&gt;Stack Overflow&lt;/a&gt; with the community to provide support. We highly recommend you ask your questions on Stack Overflow first and browse existing issues to see if someone has asked your question before.&lt;/p&gt; &#xA;&lt;p&gt;If you find a bug or have a feature request, please raise the issue on &lt;a href=&#34;https://raw.githubusercontent.com/AzureAD/issues&#34;&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To provide a recommendation, visit our &lt;a href=&#34;https://feedback.azure.com/forums/169401-azure-active-directory&#34;&gt;User Voice page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Submit Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d like your thoughts on this library. Please complete &lt;a href=&#34;https://forms.office.com/r/xuBV0CzEih&#34;&gt;this short survey.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We enthusiastically welcome contributions and feedback. You can clone the repo and start contributing now.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Security Library&lt;/h2&gt; &#xA;&lt;p&gt;This library controls how users sign-in and access services. We recommend you always take the latest version of our library in your app when possible. We use &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt;, so you can control the risk associated with updating your app. As an example, always downloading the latest minor version number (e.g. x.&lt;em&gt;y&lt;/em&gt;.x) ensures you get the latest security and feature enhancements, but our API surface remains the same. You can always see the latest version and release notes under the Releases tab of GitHub.&lt;/p&gt; &#xA;&lt;h3&gt;Security Reporting&lt;/h3&gt; &#xA;&lt;p&gt;If you find a security issue with our libraries or services please report it to &lt;a href=&#34;mailto:secure@microsoft.com&#34;&gt;secure@microsoft.com&lt;/a&gt; with as much detail as possible. Your submission may be eligible for a bounty through the &lt;a href=&#34;http://aka.ms/bugbounty&#34;&gt;Microsoft Bounty&lt;/a&gt; program. Please do not post security issues to GitHub Issues or any other public site. We will contact you shortly upon receiving the information. We encourage you to get notifications of when security incidents occur by visiting &lt;a href=&#34;https://technet.microsoft.com/en-us/security/dd252948&#34;&gt;this page&lt;/a&gt; and subscribing to Security Advisory Alerts.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © Microsoft Corporation. All rights reserved. Licensed under the MIT License (the “License”).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pujiaxin33/JXPagingView</title>
    <updated>2022-06-02T01:49:33Z</updated>
    <id>tag:github.com,2022-06-02:/pujiaxin33/JXPagingView</id>
    <link href="https://github.com/pujiaxin33/JXPagingView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;类似微博主页、简书主页等效果。多页面嵌套，既可以上下滑动，也可以左右滑动切换页面。支持HeaderView悬浮、支持下拉刷新、上拉加载更多。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JXPagingView&lt;/h1&gt; &#xA;&lt;p&gt;类似微博主页、简书主页、QQ联系人页面等效果。多页面嵌套，既可以上下滑动，也可以左右滑动切换页面。支持HeaderView悬浮、支持下拉刷新、上拉加载更多。&lt;/p&gt; &#xA;&lt;h2&gt;功能特点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;支持OC与Swift;&lt;/li&gt; &#xA; &lt;li&gt;支持列表懒加载，等到列表真正显示的时候才加载，而不是一次性加载所有列表；&lt;/li&gt; &#xA; &lt;li&gt;支持首页下拉刷新、列表视图下拉刷新、列表视图上拉加载更多；&lt;/li&gt; &#xA; &lt;li&gt;支持悬浮SectionHeader的垂直位置调整；&lt;/li&gt; &#xA; &lt;li&gt;支持从顶部用力往上滚动，下面的列表会跟着滚动，而不会突然卡主，需要使用&lt;code&gt;JXPagerSmoothView&lt;/code&gt;类；&lt;/li&gt; &#xA; &lt;li&gt;列表封装简洁，只要遵从&lt;code&gt;JXPagingViewListViewDelegate&lt;/code&gt;协议即可。UIView、UIViewController等都可以；&lt;/li&gt; &#xA; &lt;li&gt;使用JXCategoryView/JXSegmentedView分类控制器，几乎支持所有主流效果、高度自定义、可灵活扩展；&lt;/li&gt; &#xA; &lt;li&gt;支持横竖屏切换；&lt;/li&gt; &#xA; &lt;li&gt;支持点击状态栏滚动当前列表到顶部；&lt;/li&gt; &#xA; &lt;li&gt;支持列表显示和消失的生命周期方法；&lt;/li&gt; &#xA; &lt;li&gt;isListHorizontalScrollEnabled属性控制列表是否可以左右滑动，默认YES；&lt;/li&gt; &#xA; &lt;li&gt;支持&lt;code&gt;FDFullscreenPopGesture&lt;/code&gt;等全屏手势兼容处理；&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;预览&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;效果&lt;/th&gt; &#xA;   &lt;th&gt;预览图&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;头图缩放&lt;/strong&gt; &lt;br&gt;参考&lt;a href=&#34;https://github.com/pujiaxin33/JXPagingView/tree/master/Examples/JXPagerViewExample-OC/JXPagerViewExample-OC/Example/Zoom/ZoomViewController.m&#34;&gt;ZoomViewController&lt;/a&gt;类&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/pujiaxin33/JXExampleImages/raw/master/JXPaingView/Zoom.gif&#34; alt=&#34;Zoom&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;主页下拉刷新&amp;amp;列表上拉加载更多&lt;/strong&gt; &lt;br&gt;参考&lt;a href=&#34;https://github.com/pujiaxin33/JXPagingView/tree/master/Examples/JXPagerViewExample-OC/JXPagerViewExample-OC/Example/Refresh/RefreshViewController.m&#34;&gt;RefreshViewController&lt;/a&gt;类&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/pujiaxin33/JXExampleImages/raw/master/JXPaingView/Refresh.gif&#34; alt=&#34;Refresh&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;列表下拉刷新&lt;/strong&gt; &lt;br&gt;参考&lt;a href=&#34;https://github.com/pujiaxin33/JXPagingView/tree/master/Examples/JXPagerViewExample-OC/JXPagerViewExample-OC/Example/Refresh/ListRefreshViewController.m&#34;&gt;ListRefreshViewController&lt;/a&gt;类&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/pujiaxin33/JXExampleImages/raw/master/JXPaingView/ListRefresh.gif&#34; alt=&#34;Refresh&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;悬浮sectionHeader位置调整&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/pujiaxin33/JXExampleImages/raw/master/JXPaingView/PinSectionHeaderPosition.gif&#34; alt=&#34;Refresh&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;导航栏隐藏&lt;/strong&gt; &lt;br&gt; 参考&lt;a href=&#34;https://github.com/pujiaxin33/JXPagingView/tree/master/Examples/JXPagerViewExample-OC/JXPagerViewExample-OC/Example/NavigationBarHidden/NaviBarHiddenViewController.m&#34;&gt;NaviBarHiddenViewController&lt;/a&gt;类&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/pujiaxin33/JXExampleImages/raw/master/JXPaingView/NaviHidden.gif&#34; alt=&#34;Refresh&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;CollectionView列表示例&lt;/strong&gt;&lt;br&gt;参考&lt;a href=&#34;https://github.com/pujiaxin33/JXPagingView/tree/master/Examples/JXPagingViewExample/JXPagingViewExample/Example/CollectionView/CollectionViewViewController.swift&#34;&gt;CollectionViewViewController.swift&lt;/a&gt;类 &lt;br&gt; 只有swift的demo工程有该示例&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/pujiaxin33/JXExampleImages/raw/master/JXPaingView/CollectionViewList.gif&#34; alt=&#34;Refresh&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;HeaderView更新高度示例&lt;/strong&gt;&lt;br&gt; 参考&lt;a href=&#34;https://github.com/pujiaxin33/JXPagingView/tree/master/Examples/JXPagingViewExample/JXPagingViewExample/Example/HeightChange/HeightChangeAnimationViewController.swift&#34;&gt;HeightChangeAnimationViewController.swift&lt;/a&gt;类 &lt;br&gt; 只有swift demo工程才有该示例&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/pujiaxin33/JXExampleImages/raw/master/JXPaingView/HeaderViewHeightChange.gif&#34; alt=&#34;Refresh&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;PagingView嵌套CategoryView&lt;/strong&gt; &lt;br&gt; 参考&lt;a href=&#34;https://github.com/pujiaxin33/JXPagingView/tree/master/Examples/JXPagerViewExample-OC/JXPagerViewExample-OC/Example/Nest/NestViewController.m&#34;&gt;NestViewController&lt;/a&gt;类 &lt;br&gt; 只有 &lt;strong&gt;OC!OC!OC!&lt;/strong&gt; 的demo工程才有该示例 &lt;br&gt; 操作比较特殊，如果需要此效果，&lt;br&gt; 请认真参考源码，有问题多试试 &lt;br&gt; 参考NestViewController.h类&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/pujiaxin33/JXExampleImages/raw/master/JXPaingView/Nest.gif&#34; alt=&#34;Nest&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;CategoryView嵌套PagingView&lt;/strong&gt; &lt;br&gt; 参考&lt;a href=&#34;https://github.com/pujiaxin33/JXPagingView/tree/master/Examples/JXPagingViewExample/JXPagingViewExample/Example/CategoryNestPaging/NestViewController.swift&#34;&gt;NestViewController.swift&lt;/a&gt;类 &lt;br&gt; 只有 &lt;strong&gt;Swift!Swift!Swift!&lt;/strong&gt; 的demo工程才有该示例 &lt;br&gt; 操作比较特殊，如果需要此效果，&lt;br&gt; 请认真参考源码，有问题多试试 &lt;br&gt; 参考NestViewController.swift类&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/pujiaxin33/JXExampleImages/raw/master/JXPaingView/CategoryNestPaging.gif&#34; alt=&#34;Nest&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;点击状态栏&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/pujiaxin33/JXExampleImages/raw/master/JXPaingView/StatusBarClicked.gif&#34; alt=&#34;Zoom&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;横竖屏旋转&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/pujiaxin33/JXExampleImages/raw/master/JXPaingView/ScreenRotate.gif&#34; alt=&#34;Zoom&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JXPageListView&lt;/strong&gt;&lt;br&gt; 顶部需要自定义cell的场景，类似于电商APP首页，滑动到列表最底部才是分类控制器 &lt;br&gt; 该效果是另一个库，点击查看&lt;a href=&#34;https://github.com/pujiaxin33/JXPageListView&#34;&gt;JXPageListView&lt;/a&gt; &lt;br&gt; 该效果是另一个库，点击查看&lt;a href=&#34;https://github.com/pujiaxin33/JXPageListView&#34;&gt;JXPageListView&lt;/a&gt; &lt;br&gt; 该效果是另一个库，点击查看&lt;a href=&#34;https://github.com/pujiaxin33/JXPageListView&#34;&gt;JXPageListView&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/pujiaxin33/JXPageListView/raw/master/JXPageListView/Gif/headerLoading.gif&#34; alt=&#34;list&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JXPagerSmoothView&lt;/strong&gt;&lt;br&gt; 类似淘宝、转转首页 &lt;br&gt; 从顶部用力往上滚动，下面的列表会继续滚动&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/pujiaxin33/JXExampleImages/raw/master/JXPaingView/smooth.gif&#34; alt=&#34;smooth&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;安装&lt;/h2&gt; &#xA;&lt;h3&gt;手动&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift版本：&lt;/strong&gt; Clone代码，拖入JXPagingView-Swift文件夹，使用&lt;code&gt;JXPagingView&lt;/code&gt;类；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OC版本：&lt;/strong&gt; Clone代码，拖入JXPagerView文件夹，使用&lt;code&gt;JXPagerView&lt;/code&gt;类；&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Swift版本&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;支持swift版本：5.0+&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target &#39;&amp;lt;Your Target Name&amp;gt;&#39; do&#xA;    pod &#39;JXPagingView/Paging&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OC版本&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target &#39;&amp;lt;Your Target Name&amp;gt;&#39; do&#xA;    pod &#39;JXPagingView/Pager&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift与OC的仓库地址不一样，请注意选择！&lt;/p&gt; &#xA;&lt;p&gt;先&lt;code&gt;pod repo update&lt;/code&gt;然后再&lt;code&gt;pod install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用&lt;/h2&gt; &#xA;&lt;p&gt;swift版本使用类似，只是类名及相关API更改为&lt;code&gt;JXPagingView&lt;/code&gt;，具体细节请查看Swfit工程。&lt;/p&gt; &#xA;&lt;h3&gt;1、初始化&lt;code&gt;JXCategoryTitleView&lt;/code&gt;和&lt;code&gt;JXPagerView&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;self.categoryView = [[JXCategoryTitleView alloc] initWithFrame:frame];&#xA;//配置categoryView，细节参考源码&#xA;&#xA;self.pagerView = [[JXPagerView alloc] initWithDelegate:self];&#xA;[self.view addSubview:self.pagerView];&#xA;&#xA;//⚠️⚠️⚠️将pagerView的listContainerView和categoryView.listContainer进行关联，这样列表就可以和categoryView联动了。⚠️⚠️⚠️&#xA;self.categoryView.listContainer = (id&amp;lt;JXCategoryViewListContainer&amp;gt;)self.pagerView.listContainerView;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift版本列表关联代码&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;//给JXPagingListContainerView添加extension，表示遵从JXSegmentedViewListContainer的协议&#xA;extension JXPagingListContainerView: JXSegmentedViewListContainer {}&#xA;//⚠️⚠️⚠️将pagingView的listContainerView和segmentedView.listContainer进行关联，这样列表就可以和categoryView联动了。⚠️⚠️⚠️&#xA;segmentedView.listContainer = pagingView.listContainerView&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2、实现&lt;code&gt;JXPagerViewDelegate&lt;/code&gt;协议&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;/**&#xA; 返回tableHeaderView的高度，因为内部需要比对判断，只能是整型数&#xA; */&#xA;- (NSUInteger)tableHeaderViewHeightInPagerView:(JXPagerView *)pagerView {&#xA;    return JXTableHeaderViewHeight;&#xA;}&#xA;&#xA;/**&#xA; 返回tableHeaderView&#xA; */&#xA;- (UIView *)tableHeaderViewInPagerView:(JXPagerView *)pagerView {&#xA;    return self.userHeaderView;&#xA;}&#xA;&#xA;&#xA;/**&#xA; 返回悬浮HeaderView的高度，因为内部需要比对判断，只能是整型数&#xA; */&#xA;- (NSUInteger)heightForPinSectionHeaderInPagerView:(JXPagerView *)pagerView {&#xA;    return JXheightForHeaderInSection;&#xA;}&#xA;&#xA;&#xA;/**&#xA; 返回悬浮HeaderView&#xA; */&#xA;- (UIView *)viewForPinSectionHeaderInPagerView:(JXPagerView *)pagerView {&#xA;    return self.categoryView;&#xA;}&#xA;&#xA;/**&#xA; 返回列表的数量&#xA; */&#xA;- (NSInteger)numberOfListsInPagerView:(JXPagerView *)pagerView {&#xA;    //和categoryView的item数量一致&#xA;    return self.titles.count;&#xA;}&#xA;&#xA;/**&#xA; 根据index初始化一个对应列表实例。注意：一定要是新生成的实例！！！&#xA; 只要遵循JXPagerViewListViewDelegate即可，无论你返回的是UIView还是UIViewController都可以。&#xA; */&#xA;- (id&amp;lt;JXPagerViewListViewDelegate&amp;gt;)pagerView:(JXPagerView *)pagerView initListAtIndex:(NSInteger)index {&#xA;    TestListBaseView *listView = [[TestListBaseView alloc] init];&#xA;    if (index == 0) {&#xA;        listView.dataSource = @[@&#34;橡胶火箭&#34;, @&#34;橡胶火箭炮&#34;, @&#34;橡胶机关枪&#34;...].mutableCopy;&#xA;    }else if (index == 1) {&#xA;        listView.dataSource = @[@&#34;吃烤肉&#34;, @&#34;吃鸡腿肉&#34;, @&#34;吃牛肉&#34;, @&#34;各种肉&#34;].mutableCopy;&#xA;    }else {&#xA;        listView.dataSource = @[@&#34;【剑士】罗罗诺亚·索隆&#34;, @&#34;【航海士】娜美&#34;, @&#34;【狙击手】乌索普&#34;...].mutableCopy;&#xA;    }&#xA;    [listView beginFirstRefresh];&#xA;    return listView;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3、实现&lt;code&gt;JXPagerViewListViewDelegate&lt;/code&gt;协议&lt;/h3&gt; &#xA;&lt;p&gt;列表可以是任意类，UIView、UIViewController等等都可以，只要实现了&lt;code&gt;JXPagerViewListViewDelegate&lt;/code&gt;协议就行。&lt;/p&gt; &#xA;&lt;p&gt;⚠️⚠️⚠️一定要保证&lt;code&gt;scrollCallback&lt;/code&gt;的正确回调，许多朋友都容易疏忽这一点，导致异常，务必重点注意！&lt;/p&gt; &#xA;&lt;p&gt;下面的使用代码参考的是&lt;code&gt;TestListBaseView&lt;/code&gt;类&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;/**&#xA; 返回listView。如果是vc包裹的就是vc.view；如果是自定义view包裹的，就是自定义view自己。&#xA; */&#xA;- (UIView *)listView {&#xA;    return self;&#xA;}&#xA;&#xA;/**&#xA; 返回listView内部持有的UIScrollView或UITableView或UICollectionView&#xA; 主要用于mainTableView已经显示了header，listView的contentOffset需要重置时，内部需要访问到外部传入进来的listView内的scrollView&#xA; */&#xA;- (UIScrollView *)listScrollView {&#xA;    return self.tableView;&#xA;}&#xA;&#xA;&#xA;/**&#xA; 当listView内部持有的UIScrollView或UITableView或UICollectionView的代理方法`scrollViewDidScroll`回调时，需要调用该代理方法传入的callback&#xA; */&#xA;- (void)listViewDidScrollCallback:(void (^)(UIScrollView *))callback {&#xA;    self.scrollCallback = callback;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4、列表回调处理&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;TestListBaseView&lt;/code&gt;在其&lt;code&gt;tableView&lt;/code&gt;的滚动回调中，通过调用上面持有的scrollCallback，把列表的滚动事件回调给JXPagerView内部。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;- (void)scrollViewDidScroll:(UIScrollView *)scrollView {&#xA;    !self.scrollCallback ?: self.scrollCallback(scrollView);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;实现原理&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pujiaxin33/JXPagingView/raw/master/Document/JXPagingView%E5%8E%9F%E7%90%86.md&#34;&gt;实现原理&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;JXPagerSmoothView&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;如果你需要类似于&lt;strong&gt;淘宝&lt;/strong&gt;、&lt;strong&gt;转转&lt;/strong&gt;首页从顶部header用力往上滚动之后，下面的列表会跟着滚动的效果。因为&lt;code&gt;JXPagerView&lt;/code&gt;的实现原理限制，当用户从顶部header的位置用力往上滚动，&lt;code&gt;JXPagerView&lt;/code&gt;会在&lt;code&gt;JXCategoryView&lt;/code&gt;刚好在顶部的时候突然停住。这个时候就需要使用&lt;code&gt;JXPagerSmoothView&lt;/code&gt;，swift版本叫&lt;code&gt;JXPagingSmoothView&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;因为与&lt;code&gt;JXPagerView&lt;/code&gt;的原理完全不同，所以各自会有一些特性的区别，但是从使用体验来说，是完全一致的。具体使用细节请参考demo示例。&lt;/p&gt; &#xA;&lt;p&gt;实现原理参考&lt;a href=&#34;https://juejin.im/post/5ddb2fe4f265da7def5424c7&#34;&gt;JXPagerSmoothView文章解析&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;特殊说明&lt;/h2&gt; &#xA;&lt;h3&gt;JXCategoryView、JXSegmentedView&lt;/h3&gt; &#xA;&lt;p&gt;悬浮的HeaderView，用的是我写的：&lt;a href=&#34;https://github.com/pujiaxin33/JXCategoryView&#34;&gt;OC版本-JXCategoryView&lt;/a&gt; 、&lt;a href=&#34;https://github.com/pujiaxin33/JXSegmentedView&#34;&gt;Swift版本-JXSegmentedView&lt;/a&gt;。几乎实现了所有主流效果，而且非常容易自定义扩展，强烈推荐阅读。&lt;/p&gt; &#xA;&lt;h3&gt;头图缩放说明&lt;/h3&gt; &#xA;&lt;p&gt;头图缩放原理，参考这个库：&lt;a href=&#34;https://github.com/pujiaxin33/JXTableViewZoomHeaderImageView&#34;&gt;JXTableViewZoomHeaderImageView&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;列表下拉刷新说明&lt;/h3&gt; &#xA;&lt;p&gt;需要使用&lt;code&gt;JXPagerListRefreshView&lt;/code&gt;类（是&lt;code&gt;JXPagerView&lt;/code&gt;的子类）&lt;/p&gt; &#xA;&lt;h3&gt;JXPagerListContainerType说明&lt;/h3&gt; &#xA;&lt;p&gt;UIScrollView：优势：没有其他副作用。劣势：实时的视图内存占用相对大一点，因为所有加载之后的列表视图都在视图层级里面。 UICollectionView：优势：因为列表被添加到cell上，实时的视图内存占用更少，适合内存要求特别高的场景。劣势：因为cell重用机制的问题，导致列表被移除屏幕外之后，会被放入缓存区，而不存在于视图层级中。如果刚好你的列表使用了下拉刷新视图，在快速切换过程中，就会导致下拉刷新回调不成功的问题。（使用MJRefresh会出现此问题）一句话概括：使用CollectionView的时候，就不要让列表使用下拉刷新加载。&lt;/p&gt; &#xA;&lt;h3&gt;关于下方列表视图的代理方法&lt;code&gt;- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath&lt;/code&gt;有时候需要点击两次才回调&lt;/h3&gt; &#xA;&lt;p&gt;出现步骤：当手指放在下方列表视图往下拉，直到TableHeaderView完全显示。&lt;/p&gt; &#xA;&lt;p&gt;原因：经过上面的步骤之后，手指已经离开屏幕且列表视图已经完全静止，UIScrollView的isDragging属性却依然是true。就导致了后续的第一次点击，让系统认为当前UIScrollView依然在滚动，该点击就让UIScrollView停止下来，没有继续转发给UITableView，就没有转化成didSelectRow事件。&lt;/p&gt; &#xA;&lt;p&gt;解决方案：经过N种尝试之后，还是没有回避掉系统的&lt;code&gt;isDragging&lt;/code&gt;异常为true的bug。大家可以在自定义cell最下方放置一个与cell同大小的button，把button的touchUpInside事件当做&lt;code&gt;didSelectRow&lt;/code&gt;的回调。因为UIButton在响应链中的优先级要高于UIGestureRecognizer。&lt;/p&gt; &#xA;&lt;p&gt;代码：请参考&lt;code&gt;TestTableViewCell&lt;/code&gt;类的配置。&lt;/p&gt; &#xA;&lt;h3&gt;指定默认选中index&lt;/h3&gt; &#xA;&lt;p&gt;默认显示index=2的列表，代码如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;self.pagerView.defaultSelectedIndex = 2;&#xA;self.categoryView.defaultSelectedIndex = 2;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;顶部轮播图手势处理&lt;/h3&gt; &#xA;&lt;p&gt;如果TableHeaderView添加了轮播图，获取其他可以横向滚动的UIScrollView。如果不处理，就会出现左右滚动轮播图的时候又可以触发整个页面的上下滚动。为了规避该问题，请参考示例仓库中&lt;code&gt;BannerViewController&lt;/code&gt;类的处理方法。即可同一时间只允许左右滚动或者上下滚动。&lt;/p&gt; &#xA;&lt;h3&gt;关于列表用UIViewController封装且要支持横竖屏的tips&lt;/h3&gt; &#xA;&lt;p&gt;在列表UIViewController类里面一定要加上下面这段代码：(不要问我为什么，我也不知道，谁知道系统内部是怎么操作的，反正加上就没毛病了)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- (void)loadView {&#xA;    self.view = [[UIView alloc] init];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;JXPagerSmoothView&lt;/code&gt; header有UITextField或者&lt;code&gt;UITextView&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;详情参考OC版本示例【滚动延续 Header有输入框】&lt;/p&gt; &#xA;&lt;p&gt;列表自定义子类化&lt;code&gt;UITableView&lt;/code&gt;或者&lt;code&gt;UICollectionView&lt;/code&gt;，然后重载&lt;code&gt;scrollRectToVisible&lt;/code&gt;方法，示例代码如下。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Object-C&#34;&gt;@implementation TestTableView&#xA;- (void)scrollRectToVisible:(CGRect)rect animated:(BOOL)animated {&#xA;    [self setContentOffset:CGPointMake(self.contentOffset.x, rect.origin.y) animated:animated];&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;FDFullscreenPopGesture&lt;/code&gt;等全屏手势兼容处理&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pujiaxin33/JXPagingView/raw/master/Document/%E5%85%A8%E5%B1%8F%E6%89%8B%E5%8A%BF%E5%A4%84%E7%90%86.md&#34;&gt;全屏手势兼容处理文档，点击查看 ❗️❗️❗️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;迁移指南&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.0.9版本&lt;/strong&gt;：将下面两个API的返回值修改为了NSUInteger(swift版本为Int)，之前版本是CGFloat，升级为0.0.9及以上的时候，记得修改一下使用地方的返回值类型，不然会引起crash。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;- (NSUInteger)heightForPinSectionHeaderInPagerView:(JXPagerView *)pagerView&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;- (NSUInteger)tableHeaderViewHeightInPagerView:(JXPagerView *)pagerView&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;1.0.0版本&lt;/strong&gt;： 删除代理方法&lt;code&gt;- (NSArray &amp;lt;id&amp;lt;JXPagerViewListViewDelegate&amp;gt;&amp;gt; *)listViewsInPagerView:(JXPagerView *)pagerView;&lt;/code&gt;，请参考示例使用下面两个代理方法: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;- (NSInteger)numberOfListsInPagerView:(JXPagerView *)pagerView;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;- (id&amp;lt;JXPagerViewListViewDelegate&amp;gt;)pagerView:(JXPagerView *)pagerView initListAtIndex:(NSInteger)index;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2.0.0版本&lt;/strong&gt;：&lt;code&gt;JXPagerListContainerView&lt;/code&gt;进行了重构，列表拥有了完整的生命周期方法。列表是&lt;code&gt;UIViewController&lt;/code&gt;类，&lt;code&gt;viewWillAppear&lt;/code&gt;等生命周期方法将会正确触发。&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;删除了collectionView，用&lt;code&gt;scrollView&lt;/code&gt;属性替换。&lt;/li&gt; &#xA;   &lt;li&gt;和&lt;code&gt;CategoryView&lt;/code&gt;的联动绑定代码更新为&lt;code&gt;self.categoryView.listContainer = (id&amp;lt;JXCategoryViewListContainer&amp;gt;)self.pagerView.listContainerView;&lt;/code&gt;。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;JXPagerView&lt;/code&gt;新增&lt;code&gt;- (instancetype)initWithDelegate:(id&amp;lt;JXPagerViewDelegate&amp;gt;)delegate listContainerType:(JXPagerListContainerType)type&lt;/code&gt;初始化方法，可以指定列表容器为&lt;code&gt;UIScrollView&lt;/code&gt;或者&lt;code&gt;UICollectionView&lt;/code&gt;；&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;补充&lt;/h2&gt; &#xA;&lt;p&gt;有不明白的地方，建议多看下源码。再有疑问的，欢迎提Issue交流🤝&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/GoogleDataTransport</title>
    <updated>2022-06-02T01:49:33Z</updated>
    <id>tag:github.com,2022-06-02:/google/GoogleDataTransport</id>
    <link href="https://github.com/google/GoogleDataTransport" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/GoogleDataTransport&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/GoogleDataTransport.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/GoogleDataTransport&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/GoogleDataTransport.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/GoogleDataTransport&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/GoogleDataTransport.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/firebase/firebase-ios-sdk/actions&#34;&gt;&lt;img src=&#34;https://github.com/firebase/firebase-ios-sdk/workflows/datatransport/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;GoogleDataTransport&lt;/h1&gt; &#xA;&lt;p&gt;This library is for internal Google use only. It allows the logging of data and telemetry from Google SDKs.&lt;/p&gt; &#xA;&lt;h2&gt;Integration Testing&lt;/h2&gt; &#xA;&lt;p&gt;These instructions apply to minor and patch version updates. Major versions need a customized adaptation.&lt;/p&gt; &#xA;&lt;p&gt;After the CI is green:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Determine the next version for release by checking the &lt;a href=&#34;https://github.com/google/GoogleDataTransport/tags&#34;&gt;tagged releases&lt;/a&gt;. Ensure that the next release version keeps the Swift PM and CocoaPods versions in sync.&lt;/li&gt; &#xA; &lt;li&gt;Verify that the releasing version is the latest entry in the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;, updating it if necessary.&lt;/li&gt; &#xA; &lt;li&gt;Update the version in the podspec to match the latest entry in the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Checkout the &lt;code&gt;main&lt;/code&gt; branch and ensure it is up to date. &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git checkout main&#xA;git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add the CocoaPods tag (&lt;code&gt;{version}&lt;/code&gt; will be the latest version in the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/GoogleDataTransport.podspec#L3&#34;&gt;podspec&lt;/a&gt;) &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git tag CocoaPods-{version}&#xA;git push origin CocoaPods-{version}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Push the podspec to the designated repo &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;If this version of GDT is intended to launch &lt;strong&gt;before or with&lt;/strong&gt; the next Firebase release:&lt;/p&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Push to &lt;b&gt;SpecsStaging&lt;/b&gt;&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo push --skip-tests staging GoogleDataTransport.podspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;p&gt;If the command fails with &lt;code&gt;Unable to find the &#39;staging&#39; repo.&lt;/code&gt;, add the staging repo with:&lt;/p&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo add staging git@github.com:firebase/SpecsStaging.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Otherwise:&lt;/p&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Push to &lt;b&gt;SpecsDev&lt;/b&gt;&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo push --skip-tests dev GoogleDataTransport.podspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;p&gt;If the command fails with &lt;code&gt;Unable to find the &#39;dev&#39; repo.&lt;/code&gt;, add the dev repo with:&lt;/p&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod repo add dev git@github.com:firebase/SpecsDev.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run Firebase CI by waiting until next nightly or adding a PR that touches &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On google3, create a workspace and new CL. Then copybara and run a global TAP. &lt;pre&gt;&#xA;/google/data/ro/teams/copybara/copybara third_party/firebase/ios/Releases/GoogleDataTransport/copy.bara.sky \&#xA;--piper-description-behavior=OVERWRITE \&#xA;--destination-cl=&lt;b&gt;YOUR_CL&lt;/b&gt; gdt&#xA;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Publishing&lt;/h2&gt; &#xA;&lt;p&gt;The release process is as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/#swift-package-manager&#34;&gt;Tag and release for Swift PM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/#cocoapods&#34;&gt;Publish to CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/#create-github-release&#34;&gt;Create GitHub Release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/#post-release-cleanup&#34;&gt;Perform post release cleanup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;By creating and &lt;a href=&#34;https://github.com/google/GoogleDataTransport/tags&#34;&gt;pushing a tag&lt;/a&gt; for Swift PM, the newly tagged version will be immediately released for public use. Given this, please verify the intended time of release for Swift PM.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a version tag for Swift PM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git tag {version}&#xA;git push origin {version}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Ensure that any inflight PRs that depend on the new &lt;code&gt;GoogleDataTransport&lt;/code&gt; version are updated to point to the newly tagged version rather than a checksum.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Publish the newly versioned pod to CocoaPods&lt;/p&gt; &lt;p&gt;It&#39;s recommended to point to the &lt;code&gt;GoogleDataTransport.podspec&lt;/code&gt; in &lt;code&gt;staging&lt;/code&gt; to make sure the correct spec is being published.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pod trunk push ~/.cocoapods/repos/staging/GoogleDataTransport/{version}/GoogleDataTransport.podspec --skip-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The pod push was successful if the above command logs: &lt;code&gt;🚀 GoogleDataTransport ({version}) successfully published&lt;/code&gt;. In addition, a new commit that publishes the new version (co-authored by &lt;a href=&#34;https://github.com/CocoaPodsAtGoogle&#34;&gt;CocoaPodsAtGoogle&lt;/a&gt;) should appear in the &lt;a href=&#34;https://github.com/CocoaPods/Specs&#34;&gt;CocoaPods specs repo&lt;/a&gt;. Last, the latest version should be displayed on &lt;a href=&#34;https://cocoapods.org/pods/GoogleDataTransport&#34;&gt;GoogleDataTransport&#39;s CocoaPods page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/google/GoogleDataTransport/releases/new/&#34;&gt;Create GitHub Release&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Update the &lt;a href=&#34;https://github.com/google/GoogleDataTransport/releases/new/&#34;&gt;release template&lt;/a&gt;&#39;s &lt;strong&gt;Tag version&lt;/strong&gt; and &lt;strong&gt;Release title&lt;/strong&gt; fields with the latest version. In addition, reference the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/CHANGELOG.md&#34;&gt;Release Notes&lt;/a&gt; in the release&#39;s description.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/google/GoogleDataTransport/releases/edit/9.0.1&#34;&gt;this release&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Don&#39;t forget to perform the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/#post-release-cleanup&#34;&gt;post release cleanup&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Post Release Cleanup&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Clean up &lt;b&gt;SpecsStaging&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pwd=$(pwd)&#xA;mkdir -p /tmp/release-cleanup &amp;amp;&amp;amp; cd $_&#xA;git clone git@github.com:firebase/SpecsStaging.git&#xA;cd SpecsStaging/&#xA;git rm -rf GoogleDataTransport/&#xA;git commit -m &#34;Post publish cleanup&#34;&#xA;git push origin master&#xA;rm -rf /tmp/release-cleanup&#xA;cd $pwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Set logging level&lt;/h2&gt; &#xA;&lt;h3&gt;Swift&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Import &lt;code&gt;GoogleDataTransport&lt;/code&gt; module: &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GoogleDataTransport&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set logging level global variable to the desired value before calling &lt;code&gt;FirebaseApp.configure()&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;GDTCORConsoleLoggerLoggingLevel = GDTCORLoggingLevel.debug.rawValue&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Objective-C&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Import &lt;code&gt;GoogleDataTransport&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;GoogleDataTransport/GoogleDataTransport.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set logging level global variable to the desired value before calling &lt;code&gt;-[FIRApp configure]&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;GDTCORConsoleLoggerLoggingLevel = GDTCORLoggingLevelDebug;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prereqs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gem install --user cocoapods cocoapods-generate&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brew install protobuf nanopb-generator&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;easy_install --user protobuf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;To develop&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./GoogleDataTransport/generate_project.sh&lt;/code&gt; after installing the prereqs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;When adding new logging endpoint&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use commands similar to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;python -c &#34;line=&#39;https://www.firebase.com&#39;; print line[0::2]&#34; &lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;python -c &#34;line=&#39;https://www.firebase.com&#39;; print line[1::2]&#34; &lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;When adding internal code that shouldn&#39;t be easily usable on github&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consider using go/copybara-library/scrubbing#cc_scrub&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Ensure that you have at least the following software:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.0 (or later)&lt;/li&gt; &#xA; &lt;li&gt;CocoaPods 1.10.0 (or later)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/cocoapods-generate&#34;&gt;CocoaPods generate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the pod that you want to develop:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pod gen GoogleDataTransport.podspec --local-sources=./ --auto-open --platforms=ios&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: If the CocoaPods cache is out of date, you may need to run &lt;code&gt;pod repo update&lt;/code&gt; before the &lt;code&gt;pod gen&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Note: Set the &lt;code&gt;--platforms&lt;/code&gt; option to &lt;code&gt;macos&lt;/code&gt; or &lt;code&gt;tvos&lt;/code&gt; to develop/test for those platforms. Since 10.2, Xcode does not properly handle multi-platform CocoaPods workspaces.&lt;/p&gt; &#xA;&lt;h3&gt;Development for Catalyst&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pod gen GoogleDataTransport.podspec --local-sources=./ --auto-open --platforms=ios&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check the Mac box in the App-iOS Build Settings&lt;/li&gt; &#xA; &lt;li&gt;Sign the App in the Settings Signing &amp;amp; Capabilities tab&lt;/li&gt; &#xA; &lt;li&gt;Click Pods in the Project Manager&lt;/li&gt; &#xA; &lt;li&gt;Add Signing to the iOS host app and unit test targets&lt;/li&gt; &#xA; &lt;li&gt;Select the Unit-unit scheme&lt;/li&gt; &#xA; &lt;li&gt;Run it to build and test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively disable signing in each target:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to Build Settings tab&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;+&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Add User-Defined Setting&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;CODE_SIGNING_REQUIRED&lt;/code&gt; setting with a value of &lt;code&gt;NO&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code Formatting&lt;/h3&gt; &#xA;&lt;p&gt;To ensure that the code is formatted consistently, run the script &lt;a href=&#34;https://github.com/firebase/firebase-ios-sdk/raw/master/scripts/check.sh&#34;&gt;./scripts/check.sh&lt;/a&gt; before creating a PR.&lt;/p&gt; &#xA;&lt;p&gt;GitHub Actions will verify that any code changes are done in a style compliant way. Install &lt;code&gt;clang-format&lt;/code&gt; and &lt;code&gt;mint&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install clang-format@14&#xA;brew install mint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Unit Tests&lt;/h3&gt; &#xA;&lt;p&gt;Select a scheme and press Command-u to build a component and run its unit tests.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleDataTransport/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for more information on contributing to the Firebase iOS SDK.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The contents of this repository is licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>