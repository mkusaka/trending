<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-08T01:40:03Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rbaumbach/Swizzlean</title>
    <updated>2023-08-08T01:40:03Z</updated>
    <id>tag:github.com,2023-08-08:/rbaumbach/Swizzlean</id>
    <link href="https://github.com/rbaumbach/Swizzlean" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swizzlean, an Objective-C Swizzle Helper Class.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swizzlean &lt;a href=&#34;https://app.bitrise.io/app/805069fee450821d&#34;&gt;&lt;img src=&#34;https://app.bitrise.io/app/805069fee450821d/status.svg?token=DSHtzhY3hCKTrW_H41JyIA&amp;amp;branch=master&#34; alt=&#34;Bitrise&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Swizzlean&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Swizzlean.svg?sanitize=true&#34; alt=&#34;Cocoapod Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/?q=Swizzlean&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/platform-iOS-blue.svg?sanitize=true&#34; alt=&#34;Cocoapod Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rbaumbach/Swizzlean/raw/master/MIT-LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/dub/l/vibe-d.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A quick and &#34;lean&#34; way to swizzle methods for your Objective-C development needs.&lt;/p&gt; &#xA;&lt;h2&gt;Adding Swizzlean to your project&lt;/h2&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is the recommended way to add &lt;code&gt;Swizzlean&lt;/code&gt; to your project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add Swizzlean to your Podfile &lt;code&gt;pod &#39;Swizzlean&#39;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install the pod(s) by running &lt;code&gt;pod install&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add Swizzlean to your files with &lt;code&gt;#import &amp;lt;Swizzlean/Swizzlean.h&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Swift Package Manager (SPM)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; can be used to add &lt;code&gt;Swizzlean&lt;/code&gt; the to your project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;.package(url: &#34;https://github.com/rbaumbach/Swizzlean&#34;, from: &#34;1.1.0&#34;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swift.org/getting-started/#using-the-package-manager&#34;&gt;Follow intructions to add&lt;/a&gt; the &lt;code&gt;Swizzlean&lt;/code&gt; package to your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;You can also use &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; to manually add the &lt;code&gt;Swizzlean&lt;/code&gt; framework to your project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;github &#34;rbaumbach/Swizzlean&#34;&lt;/code&gt; to your &lt;a href=&#34;https://github.com/Carthage/Carthage/raw/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;Follow instructions to manually add&lt;/a&gt; Swizzlean dynamic framework to your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Clone from Github&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone repository from github and copy files directly, or add it as a git submodule.&lt;/li&gt; &#xA; &lt;li&gt;Add Swizzlean and RuntimeUtils (.h and .m) files to your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How To&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create an instance of &lt;strong&gt;Swizzlean&lt;/strong&gt; passing in the class of the methods you want to swizzle.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;swizzleInstanceMethod:withReplacementImplementation:&lt;/code&gt; for an instance method passing in the selector of the method to be swizzled with the replacement implementation. When passing in the replacement implementation block, the first parameter is always &lt;code&gt;id _self&lt;/code&gt; (pointer to the &#39;Class&#39; being swizzled), and the followed by any other parameters for the method being swizzled.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;swizzleClassMethod:withReplacementImplementation:&lt;/code&gt; for a class method passing in the selector of the method to be swizzled with the replacement implementation.&lt;/li&gt; &#xA; &lt;li&gt;You can check the current instance/class method that is swizzled by using the &lt;code&gt;currentInstanceMethodSwizzled&lt;/code&gt; and &lt;code&gt;currentClassMethodSwizzled&lt;/code&gt; methods.&lt;/li&gt; &#xA; &lt;li&gt;The status of the swizzled methods can be seen by calling &lt;code&gt;isInstanceMethodSwizzled&lt;/code&gt; and &lt;code&gt;isClassMethodSwizzled&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use reset methods to unswizzle the instance/class methods that are currently being swizzled.&lt;/li&gt; &#xA; &lt;li&gt;Methods are automatically reset when the Swizzlean object is deallocated. If you would like to keep the methods swizzled after &lt;code&gt;dealloc&lt;/code&gt; is called, set the property &lt;code&gt;resetWhenDeallocated = NO&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;Swizzlean *swizzle = [[Swizzlean alloc] initWithClassToSwizzle:[NSString class]];&#xA;[swizzle swizzleInstanceMethod:@selector(intValue) withReplacementImplementation:^(id _self) {&#xA;    return 42;&#xA;}];&#xA;NSString *number7 = @&#34;7&#34;;&#xA;NSLog(@&#34;The int value for number7 is: %d&#34;, [number7 intValue]);&#xA;// returns - The int value for number7 is: 42&#xA;[swizzle resetSwizzledInstanceMethod];&#xA;NSLog(@&#34;The int value for number7 is: %d&#34;, [number7 intValue]);&#xA;// returns - The int value for number7 is: 7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prerequisites: &lt;a href=&#34;https://github.com/sstephenson/rbenv&#34;&gt;ruby&lt;/a&gt;, &lt;a href=&#34;https://rubygems.org/pages/download&#34;&gt;ruby gems&lt;/a&gt;, &lt;a href=&#34;http://bundler.io&#34;&gt;bundler&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project has been setup to use &lt;a href=&#34;https://fastlane.tools&#34;&gt;fastlane&lt;/a&gt; to run the specs.&lt;/p&gt; &#xA;&lt;p&gt;First, run the &lt;code&gt;setup.sh&lt;/code&gt; script to bundle required gems and &lt;code&gt;Cocoapods&lt;/code&gt; when in the project directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then use &lt;code&gt;fastlane&lt;/code&gt; to run all the specs on the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec fastlane specs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Version History&lt;/h2&gt; &#xA;&lt;p&gt;Version history can be found &lt;a href=&#34;https://github.com/rbaumbach/Swizzlean/releases&#34;&gt;on releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Suggestions, requests, feedback and acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for checking out &lt;code&gt;Swizzlean&lt;/code&gt; for your swizzling needs. Any feedback can be can be sent to: &lt;a href=&#34;mailto:github@ryan.codes&#34;&gt;github@ryan.codes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to the following contributors for keeping &lt;code&gt;Swizzlean&lt;/code&gt; Swizzletastic: &lt;a href=&#34;https://github.com/estromlund&#34;&gt;Erik Stromlund&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/aaronkoop&#34;&gt;Aaron Koop&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ChangbaDevs/KTVCocoaHTTPServer</title>
    <updated>2023-08-08T01:40:03Z</updated>
    <id>tag:github.com,2023-08-08:/ChangbaDevs/KTVCocoaHTTPServer</id>
    <link href="https://github.com/ChangbaDevs/KTVCocoaHTTPServer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>huangwenjunlovedy/ConvenientRentalHouse</title>
    <updated>2023-08-08T01:40:03Z</updated>
    <id>tag:github.com,2023-08-08:/huangwenjunlovedy/ConvenientRentalHouse</id>
    <link href="https://github.com/huangwenjunlovedy/ConvenientRentalHouse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;本人自己独立开发的租房APP，功能如下:1.用户注册时可通过短信、邮箱进行验证。2.随过上传房源，管理员&#34;我&#34;可以在leanCloud后台进行审核。3.APP还具有定位功能，可以自动定位你所处城市。4.可以查看全国各地的房源。点击相应房源可以查看详细信息，例如百度地图中显示房屋具体位置，房屋数据等。6.用户还可以查看系统消息。7.用户通过签到获取积分，可通过积分兑换相应奖品。8.房主可以查看自己上传的房源，包括房源是否通过审核，修改上传房屋的数据等。9.搜索功能，可以按地区、房型、价格搜索出相应房屋。10、最新房源推荐，管理员&#34;我&#34;可以在后台中推荐出一些好的房源供用户查看。&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>