<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-24T01:34:55Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NimbusKit/sockit</title>
    <updated>2024-06-24T01:34:55Z</updated>
    <id>tag:github.com,2024-06-24:/NimbusKit/sockit</id>
    <link href="https://github.com/NimbusKit/sockit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;String &lt;-&gt; Object Coder for Objective-C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SOCKit&lt;/h1&gt; &#xA;&lt;p&gt;String &amp;lt;-&amp;gt; Object Coding for Objective-C. Rhymes with &#34;socket&#34;.&lt;/p&gt; &#xA;&lt;p&gt;With SOCKit and &lt;a href=&#34;https://github.com/jverkoey/sockit/raw/master/SOCKit.h&#34;&gt;SOCPattern&lt;/a&gt; you can easily transform objects into strings and vice versa.&lt;/p&gt; &#xA;&lt;h3&gt;Two examples, cuz devs love examples.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;SOCPattern* pattern = [SOCPattern patternWithString:@&#34;api.github.com/users/:username/gists&#34;];&#xA;[pattern stringFromObject:githubUser];&#xA;&amp;gt; @&#34;api.github.com/users/jverkoey/gists&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;SOCPattern* pattern = [SOCPattern patternWithString:@&#34;github.com/:username&#34;];&#xA;[pattern performSelector:@selector(initWithUsername:) onObject:[GithubUser class] sourceString:@&#34;github.com/jverkoey&#34;];&#xA;&amp;gt; &amp;lt;GithubUser&amp;gt; username = jverkoey&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hey, this is really similar to defining routes in Rails.&lt;/h3&gt; &#xA;&lt;p&gt;Damn straight it is.&lt;/p&gt; &#xA;&lt;h3&gt;And isn&#39;t this kind of like Three20&#39;s navigator?&lt;/h3&gt; &#xA;&lt;p&gt;Except hella better. It&#39;s also entirely incompatible with Three20 routes. This kinda blows if you&#39;ve already invested a ton of energy into Three20&#39;s routing tech, but here are a few reasons why SOCKit is better:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;Selectors are not defined in the pattern&lt;/em&gt;. The fact that Three20 requires that you define selectors in the pattern is scary as hell: rename a method in one of your controllers and your URL routing will silently break. No warnings, just broke. With SOCKit you define the selectors using @selector notation and SOCKit infers the parameters from the pattern definition. This way you can depend on the compiler to fire a warning if the selector isn&#39;t defined anywhere.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Parameters are encoded using true KVC&lt;/em&gt;. You now have full access to &lt;a href=&#34;http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/KeyValueCoding/Articles/CollectionOperators.html#//apple_ref/doc/uid/20002176-BAJEAIEE&#34;&gt;KVC collection operators&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;SOCKit is fully unit tested and documented&lt;/em&gt;. Not much more to be said here.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Here&#39;s a quick breakdown of the differences between Three20 and SOCKit, if SOCKit were used as the backend for Three20&#39;s URL routing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Three20: [map from:@&#34;twitter://tweet/(initWithTweetId:)&#34; toViewController:[TweetController class]];&#xA;SOCKit:  [map from:@&#34;twitter://tweet/:id&#34; toViewController:[TweetController class] selector:@selector(initWithTweetId:)];&#xA;&#xA;Three20: [map from:[Tweet class] name:@&#34;thread&#34; toURL:@&#34;twitter://tweet/(id)/thread&#34;];&#xA;SOCKit:  [map from:[Tweet class] name:@&#34;thread&#34; toURL:@&#34;twitter://tweet/:id/thread&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Where it&#39;s being used&lt;/h2&gt; &#xA;&lt;p&gt;SOCKit is a sibling project to &lt;a href=&#34;http://jverkoey.github.com/nimbus&#34;&gt;Nimbus&lt;/a&gt;, a light-weight and modular framework that makes it easy to blaze a trail with your iOS apps.&lt;/p&gt; &#xA;&lt;p&gt;Users of RESTKit will notice that SOCKit provides similar functionality to RESTKit&#39;s &lt;a href=&#34;https://github.com/RestKit/RestKit/raw/master/Code/Network/RKClient.m#L37&#34;&gt;RKMakePathWithObject&lt;/a&gt;. In fact, both &lt;code&gt;RKMakePathWithObject&lt;/code&gt; and the underlying &lt;code&gt;RKPathMatcher&lt;/code&gt; class rely on SOCKit behind the scenes.&lt;/p&gt; &#xA;&lt;h2&gt;Adding SOCKit to your project&lt;/h2&gt; &#xA;&lt;p&gt;This lightweight library is built to be a dead-simple airdrop directly into your project. Contained in SOCKit.h and SOCKit.m is all of the functionality you will need in order to start mapping Strings &amp;lt;-&amp;gt; Objects. To start using SOCKit, simply download or &lt;code&gt;git checkout&lt;/code&gt; the SOCKit repo and drag SOCKit.h and SOCKit.m to your project&#39;s source tree. &lt;code&gt;#import &#34;SOCKit.h&#34;&lt;/code&gt; where you want to use SOCKit and start pumping out some mad String &amp;lt;-&amp;gt; Object coding.&lt;/p&gt; &#xA;&lt;h2&gt;Some cool things&lt;/h2&gt; &#xA;&lt;p&gt;When coding objects into strings you define parameters by prefixing the property name with a colon. So if you have a Tweet object with a &lt;code&gt;tweetId&lt;/code&gt; property, the pattern parameter name would look like &lt;code&gt;:tweetId&lt;/code&gt;. Simple enough.&lt;/p&gt; &#xA;&lt;p&gt;But now let&#39;s say you have a Tweet object that contains a reference to a TwitterUser object via the &lt;code&gt;user&lt;/code&gt; property, and that TwitterUser object has a &lt;code&gt;username&lt;/code&gt; property. Check this out: &lt;code&gt;:user.username&lt;/code&gt;. If this was one of my tweets and I encoded the Tweet object using a SOCKit pattern the resulting string would be &lt;code&gt;@&#34;featherless&#34;&lt;/code&gt;. KVC rocks.&lt;/p&gt; &#xA;&lt;h2&gt;Learning more&lt;/h2&gt; &#xA;&lt;p&gt;In-depth documentation can be found in the &lt;a href=&#34;https://github.com/jverkoey/sockit/raw/master/SOCKit.h&#34;&gt;SOCKit.h&lt;/a&gt; header file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you find a bug in SOCKit please file an issue on the Github &lt;a href=&#34;https://github.com/jverkoey/sockit/issues&#34;&gt;SOCKit issue tracker&lt;/a&gt;. Even better: if you have a solution for the bug then fork the project and make a pull request.&lt;/p&gt;</summary>
  </entry>
</feed>