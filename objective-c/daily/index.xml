<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-12T01:33:49Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>matej/MBPullDownController</title>
    <updated>2023-08-12T01:33:49Z</updated>
    <id>tag:github.com,2023-08-12:/matej/MBPullDownController</id>
    <link href="https://github.com/matej/MBPullDownController" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MBPullDownController, an iOS container view controller for pullable scroll view interfaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MBPullDownController &lt;a href=&#34;https://travis-ci.org/matej/MBPullDownController&#34;&gt;&lt;img src=&#34;https://travis-ci.org/matej/MBPullDownController.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;MBPullDownController accepts two view controllers, which it presents one above the other. The front view controller is configured to accept a pull interaction which it utilizes to show or hide back view controller.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/91322/41988402-4549121e-7a3c-11e8-87e6-b2c46ed7c294.png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/91322/41988403-4569061e-7a3c-11e8-83f2-6f6fb2961654.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://user-images.githubusercontent.com/91322/41988404-45856e6c-7a3c-11e8-9bfe-0a96ff5251b0.png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/91322/41988403-4569061e-7a3c-11e8-83f2-6f6fb2961654.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://user-images.githubusercontent.com/91322/41988406-45b91384-7a3c-11e8-855b-ce271919820a.png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/91322/41988408-45d373aa-7a3c-11e8-9bc2-b87b87d35e5a.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://vimeo.com/user2382859/mbpulldowncontroller&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/91322/41988409-45ecbb58-7a3c-11e8-9573-7175e7ba361e.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;MBPullDownController requires iOS 5 or newer and uses ARC. It depends on the following Apple frameworks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Foundation.framework&lt;/li&gt; &#xA; &lt;li&gt;UIKit.framework&lt;/li&gt; &#xA; &lt;li&gt;QuartzCore.framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You will need LLVM 3.0 or later in order to build MBPullDownController.&lt;/p&gt; &#xA;&lt;h2&gt;Adding MBPullDownController to your project&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is the recommended way to add MBPullDownController to your project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add a pod entry for MBPullDownController to your Podfile &lt;code&gt;pod &#39;MBPullDownController&#39;, &#39;~&amp;gt; 1.0&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the pod(s) by running &lt;code&gt;pod install&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Include MBPullDownController wherever you need it with &lt;code&gt;#import &#34;MBPullDownController.h&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Source files&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively you can directly add the &lt;code&gt;MBPullDownController.h&lt;/code&gt; and &lt;code&gt;MBPullDownController.m&lt;/code&gt; source files to your project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/matej/MBPullDownController/archive/master.zip&#34;&gt;latest code version&lt;/a&gt; or add the repository as a git submodule to your git-tracked project.&lt;/li&gt; &#xA; &lt;li&gt;Open your project in Xcode, than drag and drop &lt;code&gt;MBPullDownController.h&lt;/code&gt; and &lt;code&gt;MBPullDownController.m&lt;/code&gt; from the &lt;code&gt;MBPullDownController&lt;/code&gt; directory onto your project (use the &#34;Product Navigator view&#34;). Make sure to select Copy items when asked if you extracted the code archive outside of your project.&lt;/li&gt; &#xA; &lt;li&gt;Include MBPullDownController wherever you need it with &lt;code&gt;#import &#34;MBPullDownController.h&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Static library&lt;/h3&gt; &#xA;&lt;p&gt;You can also add MBPullDownController as a static library to your project or workspace.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/matej/MBPullDownController/archive/master.zip&#34;&gt;latest code version&lt;/a&gt; or add the repository as a git submodule to your git-tracked project.&lt;/li&gt; &#xA; &lt;li&gt;Open your project in Xcode, than drag and drop &lt;code&gt;MBPullDownController.xcodeproj&lt;/code&gt; onto your project or workspace (use the &#34;Product Navigator view&#34;).&lt;/li&gt; &#xA; &lt;li&gt;Select your target and go to the Build phases tab. In the Link Binary With Libraries section select the add button. On the sheet find and add &lt;code&gt;libMBPullDownController.a&lt;/code&gt;. You might also need to add &lt;code&gt;MBPullDownController&lt;/code&gt; to the Target Dependencies list.&lt;/li&gt; &#xA; &lt;li&gt;Include MBPullDownController wherever you need it with &lt;code&gt;#import &amp;lt;MBPullDownController/MBPullDownController.h&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Initialize a MBPullDownController with a front and back view controller, than add the controller to your controller hierarchy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;UITableViewController *front = [[UITableViewController new];&#xA;UIViewController *back = [[UIViewController new];&#xA;MBPullDownController *pullDownController = [[MBPullDownController alloc] initWithFrontController:front backController:back];&#xA;[self.navigationController pushViewController:pullDownController animated:NO];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The front controller&#39;s view must be a UIScrollView subclass. See the demo application for further details and check out &lt;a href=&#34;https://github.com/matej/MBPullDownController/raw/master/MBPullDownController/MBPullDownController.h&#34;&gt;MBPullDownController.h&lt;/a&gt; for API options.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is distributed under the terms and conditions of the &lt;a href=&#34;https://raw.githubusercontent.com/matej/MBPullDownController/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>avohq/ios-avo-inspector</title>
    <updated>2023-08-12T01:33:49Z</updated>
    <id>tag:github.com,2023-08-12:/avohq/ios-avo-inspector</id>
    <link href="https://github.com/avohq/ios-avo-inspector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Avo Inspector iOS SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AvoInspector&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/AvoInspector&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/AvoInspector.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/AvoInspector&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/AvoInspector.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/AvoInspector&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/AvoInspector.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Avo documentation&lt;/h1&gt; &#xA;&lt;p&gt;This is a quick start guide. For more information about the Inspector project please read the &lt;a href=&#34;https://www.avo.app/docs/implementation/inspector/sdk/ios&#34;&gt;Avo documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;You can include Inspector with SPM from &lt;a href=&#34;https://github.com/avohq/ios-avo-inspector-spm&#34;&gt;this repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;AvoInspector is available through &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;AvoInspector&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The latest version can be found in GitHub releases tab.&lt;/p&gt; &#xA;&lt;h1&gt;Import&lt;/h1&gt; &#xA;&lt;p&gt;Obj-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;#import &amp;lt;AvoInspector/AvoInspector.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import AvoInspector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Initialization&lt;/h1&gt; &#xA;&lt;p&gt;Obtain the API key at &lt;a href=&#34;https://www.avo.app/welcome&#34;&gt;Avo.app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Obj-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;AvoInspector *avoInspector = [[AvoInspector alloc] initWithApiKey:@&#34;apiKey&#34; env: AvoInspectorEnvDev];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let avoInspector = AvoInspector(apiKey: &#34;apiKey&#34;, env: AvoInspectorEnv.dev)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Enabling logs&lt;/h1&gt; &#xA;&lt;p&gt;Logs are enabled by default in the dev mode and disabled in prod mode based on the init flag.&lt;/p&gt; &#xA;&lt;p&gt;Obj-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;[AvoInspector setLogging:YES];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AvoInspector.setLogging(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Integrating with Avo Codegen&lt;/h1&gt; &#xA;&lt;p&gt;The setup is lightweight and is covered &lt;a href=&#34;https://www.avo.app/docs/implementation/start-using-inspector-with-avo-functions&#34;&gt;in this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Every event sent with Avo Function after this integration will automatically be sent to Inspector.&lt;/p&gt; &#xA;&lt;h1&gt;Sending event schemas for events reported outside of Codegen&lt;/h1&gt; &#xA;&lt;p&gt;Whenever you send tracking event call one of the following methods:&lt;/p&gt; &#xA;&lt;p&gt;Read more in the &lt;a href=&#34;https://www.avo.app/docs/implementation/devs-101#inspecting-events&#34;&gt;Avo documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;1.&lt;/h3&gt; &#xA;&lt;p&gt;This methods get actual tracking event parameters, extract schema automatically and send it to Inspector backend. It is the easiest way to use the library, just call this method at the same place you call your analytics tools&#39; track methods with the same parameters.&lt;/p&gt; &#xA;&lt;p&gt;Obj-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;[avoInspector trackSchemaFromEvent:@&#34;Event Name&#34; eventParams:@{@&#34;id&#34;: @&#34;sdf-334fsg-334f&#34;, @&#34;number&#34;: @41}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;avoInspector.trackSchema(fromEvent: &#34;Event Name&#34;, eventParams: [&#34;id&#34;: &#34;sdf-334fsg-334f&#34;, &#34;number&#34;: 41])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to extract data schema manually you would use this method.&lt;/p&gt; &#xA;&lt;p&gt;Obj-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;[avoInspector trackSchema:@&#34;Event Name&#34; eventSchema:@{@&#34;id&#34;: [[AvoString alloc] init], @&#34;number&#34;: [[AvoInt alloc] init]}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;avoInspector.trackSchema(&#34;Event Name&#34;, eventSchema: [&#34;id&#34;: AvoString(), &#34;number&#34;: AvoInt()])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Extracting event schema manually&lt;/h1&gt; &#xA;&lt;p&gt;Obj-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;NSDictionary * schema = [avoInspector extractSchema:@{@&#34;id&#34;: @&#34;sdf-334fsg-334f&#34;, @&#34;number&#34;: @41}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let schema = avoInspector.extractSchema([&#34;id&#34;: &#34;sdf-334fsg-334f&#34;, &#34;number&#34;: 41])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Batching control&lt;/h1&gt; &#xA;&lt;p&gt;In order to ensure our SDK doesn&#39;t have a large impact on performance or battery life it supports event schemas batching.&lt;/p&gt; &#xA;&lt;p&gt;Default batch size is 30 and default batch flush timeout is 30 seconds. In debug mode default batch flush timeout is 1 second, i.e. the SDK batches schemas of events sent withing one second.&lt;/p&gt; &#xA;&lt;p&gt;Obj-C&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;[AvoInspector setBatchSize:15];&#xA;[AvoInspector setBatchFlushSeconds:10];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AvoInspector.setBatchSize(15)&#xA;AvoInspector.setBatchFlushSeconds(10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Example App&lt;/h1&gt; &#xA;&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Avo (&lt;a href=&#34;https://www.avo.app&#34;&gt;https://www.avo.app&lt;/a&gt;), &lt;a href=&#34;mailto:friends@avo.app&#34;&gt;friends@avo.app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;AvoInspector is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>