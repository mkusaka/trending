<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-18T01:40:59Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dataxpress/UICountingLabel</title>
    <updated>2023-01-18T01:40:59Z</updated>
    <id>tag:github.com,2023-01-18:/dataxpress/UICountingLabel</id>
    <link href="https://github.com/dataxpress/UICountingLabel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Adds animated counting support to UILabel.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UICountingLabel&lt;/h1&gt; &#xA;&lt;p&gt;Adds animated counting support to &lt;code&gt;UILabel&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dataxpress/UICountingLabel/raw/master/demo.gif&#34; alt=&#34;alt text&#34; title=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;UICountingLabel is available on CocoaPods. Add this to your Podfile:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pod &#39;UICountingLabel&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;And then run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ pod install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Simply initialize a &lt;code&gt;UICountingLabel&lt;/code&gt; the same way you set up a regular &lt;code&gt;UILabel&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;UICountingLabel* myLabel = [[UICountingLabel alloc] initWithFrame:CGRectMake(10, 10, 100, 40)];&#xA;[self.view addSubview:myLabel];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add it to your XIB file, just make sure you set the class type to &lt;code&gt;UICountingLabel&lt;/code&gt; instead of &lt;code&gt;UILabel&lt;/code&gt; and be sure to &lt;code&gt;#import &#34;UICountingLabel.h&#34;&lt;/code&gt; in the header file.&lt;/p&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;p&gt;Set the format of your label. This will be filled with a single int or float (depending on how you format it) when it updates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;myLabel.format = @&#34;%d&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can provide a &lt;code&gt;UICountingLabelFormatBlock&lt;/code&gt;, which permits greater control over how the text is formatted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;myLabel.formatBlock = ^NSString* (CGFloat value) {    &#xA;    NSInteger years = value / 12;&#xA;    NSInteger months = (NSInteger)value % 12;&#xA;    if (years == 0) {&#xA;        return [NSString stringWithFormat: @&#34;%ld months&#34;, (long)months];&#xA;    }&#xA;    else {&#xA;        return [NSString stringWithFormat: @&#34;%ld years, %ld months&#34;, (long)years, (long)months];&#xA;    }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a &lt;code&gt;UICountingLabelAttributedFormatBlock&lt;/code&gt; to use an attributed string. If the &lt;code&gt;formatBlock&lt;/code&gt; is specified, it takes precedence over the &lt;code&gt;format&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Optionally, set the mode. The default is &lt;code&gt;UILabelCountingMethodEaseInOut&lt;/code&gt;, which will start slow, speed up, and then slow down as it reaches the end. Other options are described below in the Methods section.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;myLabel.method = UILabelCountingMethodLinear;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want the label to start counting, just call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[myLabel countFrom:50 to:100];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify the duration. The default is 2.0 seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[myLabel countFrom:50 to:100 withDuration:5.0f];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, there is &lt;code&gt;animationDuration&lt;/code&gt; property which you can use to override the default animation duration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;myLabel.animationDuration = 1.0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use common convinient methods for counting, such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[myLabel countFromCurrentValueTo:100];&#xA;[myLabel countFromZeroTo:100];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Behind the scenes, these convinient methods use one base method, which has the following full signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[myLabel     countFrom:(float)startValue&#xA;                    to:(float)endValue&#xA;          withDuration:(NSTimeInterval)duration];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get current value of your label using &lt;code&gt;-currentValue&lt;/code&gt; method (works correctly in the process of animation too):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CGFloat currentValue = [myLabel currentValue];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, you can specify a &lt;code&gt;completionBlock&lt;/code&gt; to perform an acton when the label has finished counting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;myLabel.completionBlock = ^{&#xA;    NSLog(@&#34;finished counting&#34;);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Formats&lt;/h2&gt; &#xA;&lt;p&gt;When you set the &lt;code&gt;format&lt;/code&gt; property, the label will look for the presence of &lt;code&gt;%(.*)d&lt;/code&gt; or &lt;code&gt;%(.*)i&lt;/code&gt;, and if found, will cast the value to &lt;code&gt;int&lt;/code&gt; before formatting the string. Otherwise, it will format it using a &lt;code&gt;float&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using a &lt;code&gt;float&lt;/code&gt; value, it&#39;s recommended to limit the number of digits with a format string, such as &lt;code&gt;@&#34;%.1f&#34;&lt;/code&gt; for one decimal place.&lt;/p&gt; &#xA;&lt;p&gt;Because it uses the standard &lt;code&gt;stringWithFormat:&lt;/code&gt; method, you can also include arbitrary text in your format, such as &lt;code&gt;@&#34;Points: %i&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Modes&lt;/h2&gt; &#xA;&lt;p&gt;There are currently four modes of counting.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;UILabelCountingMethodLinear&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Counts linearly from the start to the end.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;UILabelCountingMethodEaseIn&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Ease In starts out slow and speeds up counting as it gets to the end, stopping suddenly at the final value.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;UILabelCountingMethodEaseOut&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Ease Out starts out fast and slows down as it gets to the destination value.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;UILabelCountingMethodEaseInOut&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Ease In/Out starts out slow, speeds up towards the middle, and then slows down as it approaches the destination. It is a nice, smooth curve that looks great, and is the default method.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;以下是中文教程&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;为 &lt;code&gt;UILabel&lt;/code&gt; 添加计数动画支持.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dataxpress/UICountingLabel/raw/master/demo.gif&#34; alt=&#34;alt text&#34; title=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;UICountingLabel 可以使用cocoaPods导入, 添加以下代码到你的Podfile文件:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pod &#39;UICountingLabel&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;然后运行以下命令:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ pod install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;设置&lt;/h2&gt; &#xA;&lt;p&gt;初始化 &lt;code&gt;UICountingLabel&lt;/code&gt; 的方式和普通的 &lt;code&gt;UILabel&lt;/code&gt;是一样的:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;UICountingLabel* myLabel = [[UICountingLabel alloc] initWithFrame:CGRectMake(10, 10, 100, 40)];&#xA;[self.view addSubview:myLabel];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;你也可以用在 XIB 文件中, 前提是你在头文件中引入了 &lt;code&gt;UICountingLabel&lt;/code&gt;的头文件并且使用 &lt;code&gt;UICountingLabel&lt;/code&gt;替换掉了原生的&lt;code&gt;UILabel&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;使用方式&lt;/h2&gt; &#xA;&lt;p&gt;设置标签格式. 设置标签格式后，标签会在更新数值的时候以你设置的方式填充，默认是显示float类型的数值，也可以设置成显示int类型的数值，比如下面的代码:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;myLabel.format = @&#34;%d&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;另外，你也可以使用 &lt;code&gt;UICountingLabelFormatBlock&lt;/code&gt;, 这个可以对显示的文本格式进行更加高度的自定义:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 举例：把显示的月份数变成几年零几个月的样式&#xA;myLabel.formatBlock = ^NSString* (CGFloat value) {    &#xA;    NSInteger years = value / 12;&#xA;    NSInteger months = (NSInteger)value % 12;&#xA;    if (years == 0) {&#xA;        return [NSString stringWithFormat: @&#34;%ld months&#34;, (long)months];&#xA;    }&#xA;    else {&#xA;        return [NSString stringWithFormat: @&#34;%ld years, %ld months&#34;, (long)years, (long)months];&#xA;    }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;除此之外还有一个 &lt;code&gt;UICountingLabelAttributedFormatBlock&lt;/code&gt; 用于设置属性字符串的格式,用法和上面的block类似. 如果指定了以上两个 &lt;code&gt;formatBlock&lt;/code&gt;中的任意一个 , 它将会覆盖掉 &lt;code&gt;format&lt;/code&gt;属性,因为block的优先级更高.&lt;/p&gt; &#xA;&lt;p&gt;可选项, 设置动画样式. 默认的动画样式是 &lt;code&gt;UILabelCountingMethodEaseInOut&lt;/code&gt;, 这个样式是开始时速度比较慢,然后加速,将要结束时减速. 以下将介绍其他动画样式及用法.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;myLabel.method = UILabelCountingMethodLinear; // 线性变化&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;需要计数时只需要使用以下方法即可:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[myLabel countFrom:50 to:100];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可以指定动画的时长，默认时长是2.0秒.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[myLabel countFrom:50 to:100 withDuration:5.0f];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;另外也可以使用 &lt;code&gt;animationDuration&lt;/code&gt; 属性去设置动画时长.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;myLabel.animationDuration = 1.0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可以使用便利方法计数，例如:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[myLabel countFromCurrentValueTo:100];&#xA;[myLabel countFromZeroTo:100];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;本质上,这些便利方法都是基于一个总方法封装的, 以下就是这个方法完整的声明:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[myLabel     countFrom:(float)startValue&#xA;                    to:(float)endValue&#xA;          withDuration:(NSTimeInterval)duration];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可以使用 &lt;code&gt;-currentValue&lt;/code&gt; 方法获得当前数据, (即使在动画过程中也可以正常获得):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CGFloat currentValue = [myLabel currentValue];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可以使用 &lt;code&gt;completionBlock&lt;/code&gt; 获得动画结束的事件:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;myLabel.completionBlock = ^{&#xA;    NSLog(@&#34;finished counting&#34;);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;格式&lt;/h2&gt; &#xA;&lt;p&gt;当设置&lt;code&gt;format&lt;/code&gt;属性后, 标签会检测是否有&lt;code&gt;%(.*)d&lt;/code&gt;或者&lt;code&gt;%(.*)i&lt;/code&gt;格式, 如果能找到, 就会将内容以&lt;code&gt;int&lt;/code&gt;类型展示. 否则, 将会使用默认的&lt;code&gt;float&lt;/code&gt;类型展示.&lt;/p&gt; &#xA;&lt;p&gt;假如你需要以&lt;code&gt;float&lt;/code&gt;类型展示, 最好设置小数点位数限制, 例如使用&lt;code&gt;@&#34;%.1f&#34;&lt;/code&gt;来限制只显示一位小数.&lt;/p&gt; &#xA;&lt;p&gt;因为使用了标准的&lt;code&gt;stringWithFormat:&lt;/code&gt;方法, 可以按照自己的意愿自定义格式,例如:&lt;code&gt;@&#34;Points: %i&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;动画类型&lt;/h2&gt; &#xA;&lt;p&gt;当前有四种技术动画样式.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;UILabelCountingMethodLinear&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;匀速计数动画.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;UILabelCountingMethodEaseIn&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;开始比较缓慢,快结束时加速,结束时突然停止.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;UILabelCountingMethodEaseOut&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;开始速度很快,快结束时变得缓慢.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;UILabelCountingMethodEaseInOut&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;开始时比较缓慢，中间加速，快结束时减速.动画速度是一个平滑的曲线,是默认采用的动画样式。&lt;/p&gt;</summary>
  </entry>
</feed>