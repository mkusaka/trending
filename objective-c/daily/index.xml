<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-11T01:37:12Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>qiniu/happy-dns-objc</title>
    <updated>2023-09-11T01:37:12Z</updated>
    <id>tag:github.com,2023-09-11:/qiniu/happy-dns-objc</id>
    <link href="https://github.com/qiniu/happy-dns-objc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;dns library for objective c&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Happy DNS for Objective-C&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://weibo.com/qiniutek&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/weibo-%40qiniutek-blue.svg?sanitize=true&#34; alt=&#34;@qiniu on weibo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/qiniu/happy-dns-objc/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/qiniu/happy-dns-objc.svg?sanitize=true&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/qiniu/happy-dns-objc&#34;&gt;&lt;img src=&#34;https://travis-ci.org/qiniu/happy-dns-objc.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/qiniu/happy-dns-objc/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/qiniu/happy-dns-objc.svg?label=release&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/qiniu/happy-dns-objc&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/qiniu/happy-dns-objc/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;img src=&#34;http://img.shields.io/cocoapods/p/HappyDNS.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;用途&lt;/h2&gt; &#xA;&lt;p&gt;调用系统底层Dns解析库，可以使用114 等第三方dns解析，可以使用 Doh 协议的 Dns 解析方案，也可以集成dnspod等httpdns。另外也有丰富的hosts 域名配置。&lt;/p&gt; &#xA;&lt;h2&gt;安装&lt;/h2&gt; &#xA;&lt;p&gt;通过CocoaPods&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#34;HappyDNS&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;通过 Swift Package Manager (Xcode 11+)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;App 对接:&#xA;File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency，输入 HappyDNS 库链接，选择相应版本即可&#xA;库链接: https://github.com/qiniu/happy-dns-objc&#xA;&#xA;库对接:&#xA;let package = Package(&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/qiniu/happy-dns-objc&#34;, from: &#34;1.0.3&#34;)&#xA;    ],&#xA;    // ...&#xA;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;运行环境&lt;/h2&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;p&gt;＊ 返回IP列表&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; NSMutableArray *array = [[NSMutableArray alloc] init];&#xA;[array addObject:[QNResolver systemResolver]];&#xA;[array addObject:[[QNResolver alloc] initWithAddress:@&#34;119.29.29.29&#34;]];&#xA;[array addObject:[QNDohResolver resolverWithServer:@&#34;https://dns.alidns.com/dns-query&#34;]];&#xA;QNDnsManager *dns = [[QNDnsManager alloc] init:array networkInfo:[QNNetworkInfo normal]];&#xA;NSArray &amp;lt;QNRecord *&amp;gt; *records = [dns queryRecords:@&#34;www.qiniu.com&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;＊ url 请求，返回一个IP 替换URL 里的domain&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NSMutableArray *array = [[NSMutableArray alloc] init];&#xA;[array addObject:[QNResolver systemResolver]];&#xA;[array addObject:[[QNResolver alloc] initWithAddress:@&#34;119.29.29.29&#34;]];&#xA;QNDnsManager *dns = [[QNDnsManager alloc] init:array networkInfo:[QNNetworkInfo normal]];&#xA;NSURL *u = [[NSURL alloc] initWithString:@&#34;rtmp://www.qiniu.com/abc?q=1&#34;];&#xA;NSURL *u2 = [dns queryAndReplaceWithIP:u];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;兼容 getaddrinfo, 方便底层C代码接入&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;static QNDnsManager *dns = nil;&#xA;dns = [[QNDnsManager alloc] init:@[ [QNResolver systemResolver] ] networkInfo:nil];&#xA;[QNDnsManager setGetAddrInfoBlock:^NSArray *(NSString *host) {&#xA;        return [dns query:host];&#xA;    }];&#xA;struct addrinfo hints = {0};&#xA;struct addrinfo *ai = NULL;&#xA;int x = qn_getaddrinfo(host, &#34;http&#34;, &amp;amp;hints, &amp;amp;ai);&#xA;qn_freeaddrinfo(ai); // 也可以用系统的freeaddrinfo, 代码一致，不过最好用这个&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;运行测试&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xctool -workspace HappyDNS.xcworkspace -scheme &#34;HappyDNS_Mac&#34; -sdk macosx -configuration Release test -test-sdk macosx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;指定测试&lt;/h3&gt; &#xA;&lt;p&gt;可以在单元测试上修改，熟悉使用&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果碰到其他编译错误，请参考 CocoaPods 的 &lt;a href=&#34;http://guides.cocoapods.org/using/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;httpdns 在&lt;strong&gt;ios8&lt;/strong&gt; 时不支持 nat64 模式下 IP 直接访问url，原因是 NSUrlConnection 不支持。无论是用&lt;a href=&#34;http://119.29.29.29/d&#34;&gt;http://119.29.29.29/d&lt;/a&gt; 还是http://[64:ff9b::771d:1d1d]/d 都不行，此时可以使用localdns方式。&lt;/li&gt; &#xA; &lt;li&gt;如果软件有国外的使用情况时，建议初始化程序采取这样的方式&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;QNDnsManager *dns;&#xA;if([QNDnsManager needHttpDns]){&#xA;    NSMutableArray *array = [[NSMutableArray alloc] init];&#xA;    [array addObject:[[QNResolver alloc] initWithAddress:@&#34;119.29.29.29&#34;]];&#xA;    [array addObject:[QNResolver systemResolver]];&#xA;    dns = [[QNDnsManager alloc] init:array networkInfo:[QNNetworkInfo normal]];&#xA;}else{&#xA;    NSMutableArray *array = [[NSMutableArray alloc] init];&#xA;    [array addObject:[QNResolver systemResolver]];&#xA;    [array addObject:[[QNResolver alloc] initWithAddress:@&#34;114.114.114.114&#34;]];&#xA;    dns = [[QNDnsManager alloc] init:array networkInfo:[QNNetworkInfo normal]];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;代码贡献&lt;/h2&gt; &#xA;&lt;p&gt;详情参考&lt;a href=&#34;https://github.com/qiniu/happy-dns-objc/raw/master/CONTRIBUTING.md&#34;&gt;代码提交指南&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;贡献记录&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qiniu/happy-dns-objc/contributors&#34;&gt;所有贡献者&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;联系我们&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果有什么问题，可以到问答社区提问，&lt;a href=&#34;http://qiniu.segmentfault.com/&#34;&gt;问答社区&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;如果发现了bug， 欢迎提交 &lt;a href=&#34;https://github.com/qiniu/happy-dns-objc/issues&#34;&gt;issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;如果有功能需求，欢迎提交 &lt;a href=&#34;https://github.com/qiniu/happy-dns-objc/issues&#34;&gt;issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;如果要提交代码，欢迎提交 pull request&lt;/li&gt; &#xA; &lt;li&gt;欢迎关注我们的&lt;a href=&#34;http://www.qiniu.com/#weixin&#34;&gt;微信&lt;/a&gt; &lt;a href=&#34;http://weibo.com/qiniutek&#34;&gt;微博&lt;/a&gt;，及时获取动态信息。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;代码许可&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT).详情见 &lt;a href=&#34;https://github.com/qiniu/happy-dns-objc/raw/master/LICENSE&#34;&gt;License文件&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spotify/ios-sdk</title>
    <updated>2023-09-11T01:37:12Z</updated>
    <id>tag:github.com,2023-09-11:/spotify/ios-sdk</id>
    <link href="https://github.com/spotify/ios-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spotify SDK for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spotify iOS SDK&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The Spotify iOS framework allows your application to interact with the Spotify app running in the background on a user&#39;s device. Capabilities include authorizing, getting metadata for the currently playing track and context, as well as issuing playback commands.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; By using Spotify developer tools you accept our &lt;a href=&#34;https://beta.developer.spotify.com/terms/&#34;&gt;Developer Terms of Use&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Spotify iOS SDK is a set of lightweight objects that connect with the Spotify app and let you control it while all the heavy lifting of playback is offloaded to the Spotify app itself. The Spotify app takes care of playback, networking, offline caching and OS music integration, leaving you to focus on your user experience. Moving from your app to the Spotify app and vice versa is a streamlined experience where playback and metadata always stay in sync.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spotify/ios-sdk/master/#key-features&#34;&gt;Key Features&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spotify/ios-sdk/master/#filing-bugs&#34;&gt;Filing Bugs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spotify/ios-sdk/master/#components&#34;&gt;Components&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spotify/ios-sdk/master/#how-app-remote-calls-work&#34;&gt;How Do App Remote Calls Work?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spotify/ios-sdk/master/#terms-of-use&#34;&gt;Terms of Use&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spotify/ios-sdk/master/#tutorial&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spotify/ios-sdk/master/#frequently-asked-questions&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Key Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Playback is always in sync with Spotify app&lt;/li&gt; &#xA; &lt;li&gt;Playback, networking, and caching is all accounted for by the Spotify app&lt;/li&gt; &#xA; &lt;li&gt;Works offline and online and does not require Web API calls to get metadata for player state&lt;/li&gt; &#xA; &lt;li&gt;Allows authentication through the Spotify app so users don&#39;t have to type in their credentials&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Filing Bugs&lt;/h3&gt; &#xA;&lt;p&gt;We love feedback from the developer community, so please feel free to file missing features or bugs over at our &lt;a href=&#34;https://github.com/spotify/ios-app-remote-sdk/issues&#34;&gt;issue tracker&lt;/a&gt;. Make sure you search existing issues before creating new ones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spotify/ios-app-remote-sdk/labels/bug&#34;&gt;Open bug tickets&lt;/a&gt; | &lt;a href=&#34;https://github.com/spotify/ios-app-remote-sdk/labels/feature%20request&#34;&gt;Open feature requests&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;The Spotify iOS framework requires a deployment target of iOS 9 or higher. The following architectures are supported: &lt;code&gt;armv7&lt;/code&gt;, &lt;code&gt;armv7s&lt;/code&gt; and &lt;code&gt;arm64&lt;/code&gt; for devices, &lt;code&gt;i386&lt;/code&gt; and &lt;code&gt;x86_64&lt;/code&gt; for the iOS Simulator. Bitcode is also supported.&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;h3&gt;Models&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SPTAppRemoteAlbum&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPTAppRemoteArtist&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPTAppRemoteLibraryState&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPTAppRemotePlaybackRestrictions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPTAppRemotePlaybackOptions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPTAppRemotePlayerState&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPTAppRemoteTrack&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPTAppRemoteContentItem&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPTAppRemoteUserCapabilities&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPTAppRemoteImageRepresentable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPTConfiguration&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SPTAppRemote&lt;/h3&gt; &#xA;&lt;p&gt;The main entry point to connect to the Spotify app and retrieve API components. Use this to establish, monitor, and terminate the connection.&lt;/p&gt; &#xA;&lt;h3&gt;SPTAppRemotePlayerAPI&lt;/h3&gt; &#xA;&lt;p&gt;Send playback related commands such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Play track by URI&lt;/li&gt; &#xA; &lt;li&gt;Resume/pause playback&lt;/li&gt; &#xA; &lt;li&gt;Skip forwards and backwards&lt;/li&gt; &#xA; &lt;li&gt;Seek to position&lt;/li&gt; &#xA; &lt;li&gt;Set shuffle on/off&lt;/li&gt; &#xA; &lt;li&gt;Request player state&lt;/li&gt; &#xA; &lt;li&gt;Request player context&lt;/li&gt; &#xA; &lt;li&gt;Subscribe to player state&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SPTAppRemoteImagesAPI&lt;/h3&gt; &#xA;&lt;p&gt;Fetch an image for a &lt;code&gt;SPTAppRemoteImageRepresentable&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;SPTAppRemoteUserAPI&lt;/h3&gt; &#xA;&lt;p&gt;Fetch/subscribe/set user-related data such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fetch and/or subscribe to &lt;code&gt;SPTAppRemoteUserCapabilities&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Determine if a user can play songs on demand (Premium vs Free)&lt;/li&gt; &#xA; &lt;li&gt;Add/remove/check if a song is in a user&#39;s library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SPTAppRemoteContentAPI&lt;/h3&gt; &#xA;&lt;p&gt;Fetch recommended content for the user.&lt;/p&gt; &#xA;&lt;h2&gt;How App Remote calls work&lt;/h2&gt; &#xA;&lt;p&gt;When you interact with any of the App Remote APIs you pass in a &lt;code&gt;SPTAppRemoteCallback&lt;/code&gt; block that gets invoked with either the expected result item or an &lt;code&gt;NSError&lt;/code&gt; if the operation failed. The block is triggered after the command was received by the Spotify app (or if the connection could not be made).&lt;/p&gt; &#xA;&lt;p&gt;Here is an example using the &lt;code&gt;SPTRemotePlayerAPI&lt;/code&gt; to skip a song:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[appRemote.playerAPI skipToNext:^(id  _Nullable result, NSError * _Nullable error) {&#xA;    if (error) {&#xA;        // Operation failed&#xA;    } else {&#xA;        // Operation succeeded&#xA;    }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tutorial and Examples&lt;/h3&gt; &#xA;&lt;p&gt;We provide a few sample projects to help you get started with the iOS Framework in the DemoProjects folder. See the &lt;a href=&#34;https://raw.githubusercontent.com/spotify/ios-sdk/master/DemoProjects/README.md&#34;&gt;Readme&lt;/a&gt; in the DemoProjects folder for more information on what each sample does.&lt;/p&gt; &#xA;&lt;h3&gt;Authentication and Authorization&lt;/h3&gt; &#xA;&lt;p&gt;To communicate with the Spotify app your application will need to get a user&#39;s permission to control playback first by using built-in authorization for App Remote. To do that you will need to request authorization view when connecting to Spotify. The framework will automatically request the &lt;code&gt;app-remote-control&lt;/code&gt; scope and show the auth view if user hasn&#39;t agreed to it yet.&lt;/p&gt; &#xA;&lt;h2&gt;Terms of Use&lt;/h2&gt; &#xA;&lt;p&gt;Note that by using Spotify developer tools, you accept our &lt;a href=&#34;https://beta.developer.spotify.com/terms/&#34;&gt;Developer Terms of Use&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Included Open Source Libraries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gabriel/MPMessagePack&#34;&gt;MPMessagePack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;This tutorial leads you step-by-step through the creation of a simple app that uses the Spotify iOS SDK to play an audio track and subscribe to player state. It will walk through the authorization flow.&lt;/p&gt; &#xA;&lt;h3&gt;Prepare Your Environment&lt;/h3&gt; &#xA;&lt;p&gt;Follow these steps to make sure you are prepared to start coding.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the Spotify iOS framework from the &#34;Clone or download&#34; button at the top of this page, and unzip it.&lt;/li&gt; &#xA; &lt;li&gt;Install the latest version of Spotify from the App Store onto the device you will be using for development. Run the Spotify app and login or sign up. &lt;strong&gt;Note:&lt;/strong&gt; A &lt;strong&gt;Spotify Premium&lt;/strong&gt; account will be required to play a track on-demand for a uri.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.developer.spotify.com/documentation/general/guides/app-settings/#register-your-app&#34;&gt;Register Your Application&lt;/a&gt;. You will need to register your application at &lt;a href=&#34;https://beta.developer.spotify.com/dashboard/&#34;&gt;My Applications&lt;/a&gt; and obtain a client ID. When you register your app you will also need to whitelist a redirect URI that the Spotify app will use to callback to your app after authorization.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Add Dependencies&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the SpotifyiOS package to your project. You can either do this through Swift Package Manager (SPM), or by adding &lt;code&gt;SpotifyiOS.framework&lt;/code&gt; or &lt;code&gt;SpotifyiOS.xcframework&lt;/code&gt; to your Xcode project directly.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/spotify/ios-sdk/master/img/import_sdk.png&#34; alt=&#34;Import SpotifyiOS.framework&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your info.plist add your redirect URI you registered at &lt;a href=&#34;https://beta.developer.spotify.com/dashboard/&#34;&gt;My Applications&lt;/a&gt;. You will need to add your redirect URI under &#34;URL types&#34; and &#34;URL Schemes&#34;. Be sure to set a unique &#34;URL identifier&#34; as well. &lt;a href=&#34;https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html#//apple_ref/doc/uid/TP40007072-CH6-SW1&#34;&gt;More info on URL Schemes&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/spotify/ios-sdk/master/img/info_plist.png&#34; alt=&#34;Info.plist&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;#import &amp;lt;SpotifyiOS/SpotifyiOS.h&amp;gt;&lt;/code&gt; to your source files to import necessary headers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Check if Spotify is Active&lt;/h3&gt; &#xA;&lt;p&gt;If a user is already using Spotify, but has not authorized your application, you can use the following check to prompt them to start the authorization process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[SPTAppRemote checkIfSpotifyAppIsActive:^(BOOL active) {&#xA;    if (active) {&#xA;        // Prompt the user to connect Spotify here&#xA;    }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Authorize Your Application&lt;/h3&gt; &#xA;&lt;p&gt;To be able to use the playback control part of the SDK the user needs to authorize your application. If they haven&#39;t, the connection will fail with a &lt;code&gt;No token provided&lt;/code&gt; error. To allow the user to authorize your app, you can use the built-in authorization flow.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Initialize &lt;code&gt;SPTConfiguration&lt;/code&gt; with your client ID and redirect URI.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;SPTConfiguration *configuration =&#xA;    [[SPTConfiguration alloc] initWithClientID:@&#34;your_client_id&#34; redirectURL:[NSURL urlWithString:@&#34;your_redirect_uri&#34;]];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Initialize &lt;code&gt;SPTAppRemote&lt;/code&gt; with your &lt;code&gt;SPTConfiguration&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;self.appRemote = [[SPTAppRemote alloc] initWithConfiguration:configuration logLevel:SPTAppRemoteLogLevelDebug];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Initiate the authentication flow (for other ways to detect if Spotify is installed, as well as attributing installs, please see our &lt;a href=&#34;https://beta.developer.spotify.com/documentation/general/guides/content-linking-guide/&#34;&gt;Content Linking Guide&lt;/a&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// Note: A blank string will play the user&#39;s last song or pick a random one.&#xA;BOOL spotifyInstalled = [self.appRemote authorizeAndPlayURI:@&#34;spotify:track:69bp2EbF7Q2rqc5N3ylezZ&#34;];&#xA;if (!spotifyInstalled) {&#xA;    /*&#xA;    * The Spotify app is not installed.&#xA;    * Use SKStoreProductViewController with [SPTAppRemote spotifyItunesItemIdentifier] to present the user&#xA;    * with a way to install the Spotify app.&#xA;    */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure your &lt;code&gt;AppDelegate&lt;/code&gt; to parse out the accessToken in &lt;code&gt;application:openURL:options:&lt;/code&gt; and set it on the &lt;code&gt;SPTAppRemote&lt;/code&gt; connectionParameters.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&amp;lt;UIApplicationOpenURLOptionsKey,id&amp;gt; *)options&#xA;{&#xA;    NSDictionary *params = [self.appRemote authorizationParametersFromURL:url];&#xA;    NSString *token = params[SPTAppRemoteAccessTokenKey];&#xA;    if (token) {&#xA;        self.appRemote.connectionParameters.accessToken = token;&#xA;    } else if (params[SPTAppRemoteErrorDescriptionKey]) {&#xA;        NSLog(@&#34;%@&#34;, params[SPTAppRemoteErrorDescriptionKey]);&#xA;    }&#xA;    return YES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you are using UIScene then you need to use appropriate method in your scene delegate.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func scene(_ scene: UIScene, openURLContexts URLContexts: Set&amp;lt;UIOpenURLContext&amp;gt;) {&#xA;    guard let url = URLContexts.first?.url else {&#xA;        return&#xA;    }&#xA;&#xA;    let parameters = appRemote.authorizationParameters(from: url);&#xA;&#xA;    if let access_token = parameters?[SPTAppRemoteAccessTokenKey] {&#xA;        appRemote.connectionParameters.accessToken = access_token&#xA;        self.accessToken = access_token&#xA;    } else if let error_description = parameters?[SPTAppRemoteErrorDescriptionKey] {&#xA;        // Show the error&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Connect and Subscribe to Player State&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set your connection delegate and attempt to connect.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;self.appRemote.delegate = self;&#xA;[self.appRemote connect];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;&#xA;- (void)appRemoteDidEstablishConnection:(SPTAppRemote *)appRemote&#xA;{&#xA;    // Connection was successful, you can begin issuing commands&#xA;}&#xA;&#xA;- (void)appRemote:(SPTAppRemote *)appRemote didFailConnectionAttemptWithError:(NSError *)error&#xA;{&#xA;    // Connection failed&#xA;}&#xA;&#xA;- (void)appRemote:(SPTAppRemote *)appRemote didDisconnectWithError:(nullable NSError *)error&#xA;{&#xA;    // Connection disconnected&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set a delegate and subscribe to player state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;appRemote.playerAPI.delegate = self;&#xA;&#xA;[appRemote.playerAPI subscribeToPlayerState:^(id  _Nullable result, NSError * _Nullable error) {&#xA;    // Handle Errors&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)playerStateDidChange:(id&amp;lt;SPTAppRemotePlayerState&amp;gt;)playerState&#xA;{&#xA;    NSLog(@&#34;Track name: %@&#34;, playerState.track.name);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Connection handling&lt;/h3&gt; &#xA;&lt;p&gt;As a courtesy you should always disconnect App Remote when your app enters a background state. This tells Spotify that it&#39;s safe to disable the active stream. If your app does not properly call disconnect Spotify has no way of knowing that it should not maintain the connection, and this may result in future connection issues.&lt;/p&gt; &#xA;&lt;p&gt;If you want your app to automatically reconnect after disruption events like incoming calls or Siri interactions you may use the &lt;code&gt;willResignActive&lt;/code&gt; and &lt;code&gt;didBecomeActive&lt;/code&gt; callbacks to safely disconnect and reconnect. If you don&#39;t wish to reconnect directly, it&#39;s typically enough to close the connection in &lt;code&gt;didEnterBackground&lt;/code&gt; callbacks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)applicationWillResignActive:(UIApplication *)application&#xA;{&#xA;    [self.appRemote disconnect];&#xA;}&#xA;- (void)applicationDidBecomeActive:(UIApplication *)application&#xA;{&#xA;    [self.appRemote connect];&#xA;}&#xA;// If you&#39;re using UIWindowSceneDelegate&#xA;- (void)sceneDidBecomeActive:(UIScene *)scene&#xA;{&#xA;    [self.appRemote connect];&#xA;}&#xA;- (void)sceneWillResignActive:(UIScene *)scene&#xA;{&#xA;    [self.appRemote disconnect];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why does music need to be playing to connect with &lt;code&gt;SPTAppRemote&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Music must be playing when you connect with &lt;code&gt;SPTAppRemote&lt;/code&gt; to ensure the Spotify app is not suspended in the background. iOS applications can only stay active in the background for a few seconds unless they are actively doing something like navigation or playing music.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Is SpotifyiOS.framework thread safe?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;No, the framework currently expects to be called from the main thread. It will offload most of its work to a background thread internally but callbacks to your code will also occur on the main thread.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What if I need to authorize without starting playback?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is an alternative authorization method. You can find more information about that &lt;a href=&#34;https://raw.githubusercontent.com/spotify/ios-sdk/master/docs/auth.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LIFX/LIFXKit</title>
    <updated>2023-09-11T01:37:12Z</updated>
    <id>tag:github.com,2023-09-11:/LIFX/LIFXKit</id>
    <link href="https://github.com/LIFX/LIFXKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The LIFX SDK for Objective-C.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LIFX&lt;/h1&gt; &#xA;&lt;p&gt;LIFX will no longer be supporting LIFXKit. This has been done in order to better support developers by focusing instead on releasing documentation for the LAN protocol itself and enabling SDKs to be produced in any language. We have also published a HTTP API cloud-based light control from anywhere.&lt;/p&gt; &#xA;&lt;p&gt;Our Developer Zone is available if you have any questions about using the newly released documentation. You can find it at &lt;a href=&#34;https://community.lifx.com/&#34;&gt;https://community.lifx.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We sincerely hope that someone decides to fork this repository and continues maintaining it. If you do this please feel free to let us know on the Developer Zone or by email at &lt;a href=&#34;mailto:developers@lifx.com&#34;&gt;developers@lifx.com&lt;/a&gt;. We will do our best to support your efforts.&lt;/p&gt; &#xA;&lt;p&gt;We hope that our new commitment to support public documentation allows better quality libraries than we have the resources to support alone.&lt;/p&gt;</summary>
  </entry>
</feed>