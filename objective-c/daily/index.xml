<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-27T01:41:17Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zekunyan/TTGTagCollectionView</title>
    <updated>2023-03-27T01:41:17Z</updated>
    <id>tag:github.com,2023-03-27:/zekunyan/TTGTagCollectionView</id>
    <link href="https://github.com/zekunyan/TTGTagCollectionView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Useful for showing text or custom view tags in a vertical or horizontal scrollable view and support Autolayout at the same time. It is highly customizable that most features of the text tag can be configured. 标签流显示控件，同时支持文字或自定义View&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TTGTagCollectionView&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/zekunyan/TTGTagCollectionView&#34;&gt;&lt;img src=&#34;http://img.shields.io/travis/zekunyan/TTGTagCollectionView.svg?style=flat&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/TTGTagCollectionView&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/TTGTagCollectionView.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/TTGTagCollectionView&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/TTGTagCollectionView.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/TTGTagCollectionView&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/TTGTagCollectionView.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zekunyan/TTGTagCollectionView&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Apps%20Using-%3E%201,096-blue.svg?sanitize=true&#34; alt=&#34;Apps Using&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zekunyan/TTGTagCollectionView&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Total%20Download-%3E%2068,461-blue.svg?sanitize=true&#34; alt=&#34;Total Download&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zekunyan/TTGTagCollectionView/raw/master/Resources/screen_shot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zekunyan/TTGTagCollectionView/raw/master/Resources/alignment_type.png&#34; alt=&#34;Alignment Type&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;TTGTagCollectionView&lt;/code&gt; is useful for showing different size tag views in a vertical or horizontal scrollable view. And if you only want to show text tags, you can use &lt;code&gt;TTGTextTagCollectionView&lt;/code&gt; instead, which has more simple api. At the same time, It is highly customizable that many features of the text tag can be configured, like the tag font size and the background color.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Both rich style text tag and custom view tag supported.&lt;/li&gt; &#xA; &lt;li&gt;Highly customizable, each text tag can be configured.&lt;/li&gt; &#xA; &lt;li&gt;Vertical and horizontal scrollable.&lt;/li&gt; &#xA; &lt;li&gt;Support &lt;code&gt;NSAttributedString&lt;/code&gt; rich text tag.&lt;/li&gt; &#xA; &lt;li&gt;Support different kinds of alignment types.&lt;/li&gt; &#xA; &lt;li&gt;Support specifying number of lines.&lt;/li&gt; &#xA; &lt;li&gt;Support Autolayout &lt;code&gt;intrinsicContentSize&lt;/code&gt; to auto determine height based on content size.&lt;/li&gt; &#xA; &lt;li&gt;Support pull to refresh, like &lt;code&gt;SVPullToRefresh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt; to set available width like UIlabel.&lt;/li&gt; &#xA; &lt;li&gt;Support &lt;code&gt;CocoaPods&lt;/code&gt; and &lt;code&gt;Swift Package Manager&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;You can find demos in the &lt;code&gt;Example-&amp;gt;TTGTagCollectionView.xcworkspace&lt;/code&gt; or &lt;code&gt;ExampleSwift-&amp;gt;TTGTagSwiftExample.xcworkspace&lt;/code&gt; project. Run &lt;code&gt;pod update&lt;/code&gt; before try it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zekunyan/TTGTagCollectionView/raw/master/Resources/demo_example.jpeg&#34; alt=&#34;Example project&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code Structure&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zekunyan/TTGTagCollectionView/raw/master/Resources/code_structure.png&#34; alt=&#34;Example project&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;iOS 9 and later.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods for Objective-C&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#34;TTGTagCollectionView&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods for Swift&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;pod &#34;TTGTagCollectionView&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Add by &lt;code&gt;git@github.com:zekunyan/TTGTagCollectionView.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;TTGTextTagCollectionView&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;TTGTextTagCollectionView&lt;/code&gt; to show text tags.&lt;/p&gt; &#xA;&lt;h4&gt;Basic usage&lt;/h4&gt; &#xA;&lt;h5&gt;Swift&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// import&#xA;import TTGTags&#xA;// Create TTGTextTagCollectionView view&#xA;let tagView = TTGTextTagCollectionView.init(frame: CGRect(x: 20, y: 100, width: 200, height: 200))&#xA;self.view .addSubview(tagView)&#xA;// Create TTGTextTag object&#xA;let textTag = TTGTextTag(content: TTGTextTagStringContent(text: &#34;tutuge&#34;), style: TTGTextTagStyle())&#xA;// Add tag&#xA;tagView.addTag(textTag)&#xA;// !!! Never forget this !!!&#xA;tagView.reload()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Objective-C&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;// import&#xA;#import &amp;lt;TTGTags/TTGTextTagCollectionView.h&amp;gt;&#xA;// Create TTGTextTagCollectionView view&#xA;TTGTextTagCollectionView *tagCollectionView = [[TTGTextTagCollectionView alloc] initWithFrame:CGRectMake(20, 20, 200, 200)];&#xA;[self.view addSubview:tagCollectionView];&#xA;// Create TTGTextTag object&#xA;TTGTextTag *textTag = [TTGTextTag tagWithContent:[TTGTextTagStringContent contentWithText:@&#34;Some text&#34;] style:[TTGTextTagStyle new]];&#xA;// Add tag&#xA;[tagCollectionView addTag:textTag];&#xA;// !!! Never forget this !!!&#xA;[tagCollectionView reload];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Delegate&lt;/h4&gt; &#xA;&lt;p&gt;Conform the &lt;code&gt;TTGTextTagCollectionViewDelegate&lt;/code&gt; protocol to get callback when you select the tag or content height changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;@protocol TTGTextTagCollectionViewDelegate &amp;lt;NSObject&amp;gt;&#xA;@optional&#xA;- (BOOL)textTagCollectionView:(TTGTextTagCollectionView *)textTagCollectionView&#xA;                    canTapTag:(TTGTextTag *)tag&#xA;                      atIndex:(NSUInteger)index;&#xA;&#xA;- (void)textTagCollectionView:(TTGTextTagCollectionView *)textTagCollectionView&#xA;                    didTapTag:(TTGTextTag *)tag&#xA;                      atIndex:(NSUInteger)index;&#xA;&#xA;- (void)textTagCollectionView:(TTGTextTagCollectionView *)textTagCollectionView&#xA;            updateContentSize:(CGSize)contentSize;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customization&lt;/h4&gt; &#xA;&lt;p&gt;Each tag can be configured.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;@interface TTGTextTag : NSObject &amp;lt;NSCopying&amp;gt;&#xA;&#xA;/// ID&#xA;@property (nonatomic, assign, readonly) NSUInteger tagId; // Auto increase. The only identifier and main key for a tag&#xA;&#xA;/// Attachment object. You can use this to bind any object you want to each tag.&#xA;@property (nonatomic, strong) id _Nullable attachment;&#xA;&#xA;/// Normal state content and style&#xA;@property (nonatomic, copy) TTGTextTagContent * _Nonnull content;&#xA;@property (nonatomic, copy) TTGTextTagStyle * _Nonnull style;&#xA;&#xA;/// Selected state content and style&#xA;@property (nonatomic, copy) TTGTextTagContent * _Nullable selectedContent;&#xA;@property (nonatomic, copy) TTGTextTagStyle * _Nullable selectedStyle;&#xA;&#xA;/// Selection state&#xA;@property (nonatomic, assign) BOOL selected;&#xA;&#xA;///...Other things...&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;TTGTextTagContent&lt;/code&gt; has two sub classes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;// Normal Text&#xA;@interface TTGTextTagStringContent : TTGTextTagContent&#xA;/// Text&#xA;@property (nonatomic, copy) NSString * _Nonnull text;&#xA;/// Text font&#xA;@property (nonatomic, copy) UIFont * _Nonnull textFont;&#xA;/// Text color&#xA;@property (nonatomic, copy) UIColor * _Nonnull textColor;&#xA;@end&#xA;&#xA;// NSAttributedString Text&#xA;@interface TTGTextTagAttributedStringContent : TTGTextTagContent&#xA;/// Attributed text&#xA;@property (nonatomic, copy) NSAttributedString * _Nonnull attributedText;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Config &lt;code&gt;TTGTextTagStyle&lt;/code&gt; if you want to change tag styles.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;@interface TTGTextTagStyle : NSObject &amp;lt;NSCopying&amp;gt;&#xA;&#xA;/// Background color&#xA;@property (nonatomic, copy) UIColor * _Nonnull backgroundColor; // Default is [UIColor lightGrayColor]&#xA;&#xA;/// Text alignment&#xA;@property (nonatomic, assign) NSTextAlignment textAlignment; // Default is NSTextAlignmentCenter&#xA;&#xA;/// Gradient background color&#xA;@property (nonatomic, assign) BOOL enableGradientBackground; // Default is NO&#xA;@property (nonatomic, copy) UIColor * _Nonnull gradientBackgroundStartColor;&#xA;@property (nonatomic, copy) UIColor * _Nonnull gradientBackgroundEndColor;&#xA;@property (nonatomic, assign) CGPoint gradientBackgroundStartPoint;&#xA;@property (nonatomic, assign) CGPoint gradientBackgroundEndPoint;&#xA;&#xA;/// Corner radius&#xA;@property (nonatomic, assign) CGFloat cornerRadius; // Default is 4&#xA;@property (nonatomic, assign) Boolean cornerTopRight;&#xA;@property (nonatomic, assign) Boolean cornerTopLeft;&#xA;@property (nonatomic, assign) Boolean cornerBottomRight;&#xA;@property (nonatomic, assign) Boolean cornerBottomLeft;&#xA;&#xA;/// Border&#xA;@property (nonatomic, assign) CGFloat borderWidth; // Default is [UIColor whiteColor]&#xA;@property (nonatomic, copy) UIColor * _Nonnull borderColor; // Default is 1&#xA;&#xA;/// Shadow.&#xA;@property (nonatomic, copy) UIColor * _Nonnull shadowColor;    // Default is [UIColor blackColor]&#xA;@property (nonatomic, assign) CGSize shadowOffset;   // Default is (2, 2)&#xA;@property (nonatomic, assign) CGFloat shadowRadius;  // Default is 2f&#xA;@property (nonatomic, assign) CGFloat shadowOpacity; // Default is 0.3f&#xA;&#xA;/// Extra space in width and height, will expand each tag&#39;s size&#xA;@property (nonatomic, assign) CGSize extraSpace;&#xA;&#xA;/// Max width for a text tag. 0 and below means no max width.&#xA;@property (nonatomic, assign) CGFloat maxWidth;&#xA;/// Min width for a text tag. 0 and below means no min width.&#xA;@property (nonatomic, assign) CGFloat minWidth;&#xA;&#xA;/// Max height for a text tag. 0 and below means no max height.&#xA;@property (nonatomic, assign) CGFloat maxHeight;&#xA;/// Min height for a text tag. 0 and below means no min height.&#xA;@property (nonatomic, assign) CGFloat minHeight;&#xA;&#xA;/// Exact width. 0 and below means no work&#xA;@property (nonatomic, assign) CGFloat exactWidth;&#xA;/// Exact height. 0 and below means no work&#xA;@property (nonatomic, assign) CGFloat exactHeight;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also configure scroll direction, alignment, lines limit, spacing and inset.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;// TTGTextTagCollectionView.h&#xA;// Define if the tag can be selected.&#xA;@property (assign, nonatomic) BOOL enableTagSelection;&#xA;&#xA;// Tags scroll direction, default is vertical.&#xA;@property (nonatomic, assign) TTGTagCollectionScrollDirection scrollDirection;&#xA;&#xA;// Tags layout alignment, default is left.&#xA;@property (nonatomic, assign) TTGTagCollectionAlignment alignment;&#xA;&#xA;// Number of lines. 0 means no limit, default is 0 for vertical and 1 for horizontal.&#xA;@property (nonatomic, assign) NSUInteger numberOfLines;&#xA;&#xA;// Tag selection limit, default is 0, means no limit&#xA;@property (nonatomic, assign) NSUInteger selectionLimit;&#xA;&#xA;// Horizontal and vertical space between tags, default is 4.&#xA;@property (assign, nonatomic) CGFloat horizontalSpacing;&#xA;@property (assign, nonatomic) CGFloat verticalSpacing;&#xA;&#xA;// Content inset, default is UIEdgeInsetsMake(2, 2, 2, 2).&#xA;@property (nonatomic, assign) UIEdgeInsets contentInset;&#xA;&#xA;// The true tags content size, readonly&#xA;@property (nonatomic, assign, readonly) CGSize contentSize;&#xA;&#xA;// Manual content height&#xA;// Default = NO, set will update content&#xA;@property (nonatomic, assign) BOOL manualCalculateHeight;&#xA;// Default = 0, set will update content&#xA;@property (nonatomic, assign) CGFloat preferredMaxLayoutWidth;&#xA;&#xA;// Scroll indicator&#xA;@property (nonatomic, assign) BOOL showsHorizontalScrollIndicator;&#xA;@property (nonatomic, assign) BOOL showsVerticalScrollIndicator;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alignment types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;typedef NS_ENUM(NSInteger, TTGTagCollectionAlignment) {&#xA;    TTGTagCollectionAlignmentLeft = 0,                           // Default&#xA;    TTGTagCollectionAlignmentCenter,                             // Center&#xA;    TTGTagCollectionAlignmentRight,                              // Right&#xA;    TTGTagCollectionAlignmentFillByExpandingSpace,               // Expand horizontal spacing and fill&#xA;    TTGTagCollectionAlignmentFillByExpandingWidth,               // Expand width and fill&#xA;    TTGTagCollectionAlignmentFillByExpandingWidthExceptLastLine, // Expand width and fill, except last line&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Modify tags&lt;/h4&gt; &#xA;&lt;p&gt;Add tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;// TTGTextTagCollectionView.h&#xA;/// Add&#xA;- (void)addTag:(TTGTextTag *)tag;&#xA;- (void)addTags:(NSArray &amp;lt;TTGTextTag *&amp;gt; *)tags;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Insert tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;// TTGTextTagCollectionView.h&#xA;/// Insert&#xA;- (void)insertTag:(TTGTextTag *)tag atIndex:(NSUInteger)index;&#xA;- (void)insertTags:(NSArray &amp;lt;TTGTextTag *&amp;gt; *)tags atIndex:(NSUInteger)index;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;// TTGTextTagCollectionView.h&#xA;/// Update&#xA;- (void)updateTagAtIndex:(NSUInteger)index selected:(BOOL)selected;&#xA;- (void)updateTagAtIndex:(NSUInteger)index withNewTag:(TTGTextTag *)tag;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;// TTGTextTagCollectionView.h&#xA;// Remove tag&#xA;- (void)removeTag:(TTGTextTag *)tag;&#xA;- (void)removeTagById:(NSUInteger)tagId;&#xA;- (void)removeTagAtIndex:(NSUInteger)index;&#xA;- (void)removeAllTags;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get tags.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;// TTGTextTagCollectionView.h&#xA;/// Get tag&#xA;- (TTGTextTag *)getTagAtIndex:(NSUInteger)index;&#xA;- (NSArray &amp;lt;TTGTextTag *&amp;gt; *)getTagsInRange:(NSRange)range;&#xA;&#xA;/// Get all&#xA;- (NSArray &amp;lt;TTGTextTag *&amp;gt; *)allTags;&#xA;- (NSArray &amp;lt;TTGTextTag *&amp;gt; *)allSelectedTags;&#xA;- (NSArray &amp;lt;TTGTextTag *&amp;gt; *)allNotSelectedTags;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Reload&lt;/h4&gt; &#xA;&lt;p&gt;You can reload tags programmatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;// TTGTextTagCollectionView.h&#xA;- (void)reload;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Index at point&lt;/h4&gt; &#xA;&lt;p&gt;Returns the index of the tag located at the specified point.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;// TTGTextTagCollectionView.h&#xA;- (NSInteger)indexOfTagAt:(CGPoint)point;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TTGTagCollectionView&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;TTGTagCollectionView&lt;/code&gt; to show custom tag views.&lt;/p&gt; &#xA;&lt;h4&gt;DataSource and Delegate&lt;/h4&gt; &#xA;&lt;p&gt;Just like the UITableView, you must conform and implement the required methods of &lt;code&gt;TTGTagCollectionViewDelegate&lt;/code&gt; and &lt;code&gt;TTGTagCollectionViewDataSource&lt;/code&gt; to get &lt;code&gt;TTGTagCollectionView&lt;/code&gt; work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;DataSource&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;@protocol TTGTagCollectionViewDataSource &amp;lt;NSObject&amp;gt;&#xA;@required&#xA;- (NSUInteger)numberOfTagsInTagCollectionView:(TTGTagCollectionView *)tagCollectionView;&#xA;&#xA;- (UIView *)tagCollectionView:(TTGTagCollectionView *)tagCollectionView tagViewForIndex:(NSUInteger)index;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Delegate&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;@protocol TTGTagCollectionViewDelegate &amp;lt;NSObject&amp;gt;&#xA;@required&#xA;- (CGSize)tagCollectionView:(TTGTagCollectionView *)tagCollectionView sizeForTagAtIndex:(NSUInteger)index;&#xA;&#xA;@optional&#xA;- (BOOL)tagCollectionView:(TTGTagCollectionView *)tagCollectionView shouldSelectTag:(UIView *)tagView atIndex:(NSUInteger)index;&#xA;&#xA;- (void)tagCollectionView:(TTGTagCollectionView *)tagCollectionView didSelectTag:(UIView *)tagView atIndex:(NSUInteger)index;&#xA;&#xA;- (void)tagCollectionView:(TTGTagCollectionView *)tagCollectionView updateContentSize:(CGSize)contentSize;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customization&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;// TTGTagCollectionView.h&#xA;// Tags scroll direction, default is vertical.&#xA;@property (nonatomic, assign) TTGTagCollectionScrollDirection scrollDirection;&#xA;&#xA;// Tags layout alignment, default is left.&#xA;@property (nonatomic, assign) TTGTagCollectionAlignment alignment;&#xA;&#xA;// Number of lines. 0 means no limit, default is 0 for vertical and 1 for horizontal.&#xA;@property (nonatomic, assign) NSUInteger numberOfLines;&#xA;&#xA;// Horizontal and vertical space between tags, default is 4.&#xA;@property (nonatomic, assign) CGFloat horizontalSpacing;&#xA;@property (nonatomic, assign) CGFloat verticalSpacing;&#xA;&#xA;// Content inset, default is UIEdgeInsetsMake(2, 2, 2, 2).&#xA;@property (nonatomic, assign) UIEdgeInsets contentInset;&#xA;&#xA;// The true tags content size, readonly&#xA;@property (nonatomic, assign, readonly) CGSize contentSize;&#xA;&#xA;// Manual content height&#xA;// Default = NO, set will update content&#xA;@property (nonatomic, assign) BOOL manualCalculateHeight;&#xA;// Default = 0, set will update content&#xA;@property (nonatomic, assign) CGFloat preferredMaxLayoutWidth;&#xA;&#xA;// Scroll indicator&#xA;@property (nonatomic, assign) BOOL showsHorizontalScrollIndicator;&#xA;@property (nonatomic, assign) BOOL showsVerticalScrollIndicator;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Reload&lt;/h4&gt; &#xA;&lt;p&gt;You can reload tags programmatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;// TTGTagCollectionView.h&#xA;- (void)reload;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Index at point&lt;/h4&gt; &#xA;&lt;p&gt;Returns the index of the tag located at the specified point.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;// TTGTagCollectionView.h&#xA;- (NSInteger)indexOfTagAt:(CGPoint)point;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fix&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;UITableViewAutomaticDimension&lt;/code&gt; may not work when using tagView in tableViewCell. You should reload your tableView in the &lt;code&gt;viewDidAppear&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;zekunyan, &lt;a href=&#34;mailto:zekunyan@163.com&#34;&gt;zekunyan@163.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;TTGTagCollectionView is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>