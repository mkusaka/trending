<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-28T01:36:37Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pinterest/PINOperation</title>
    <updated>2022-12-28T01:36:37Z</updated>
    <id>tag:github.com,2022-12-28:/pinterest/PINOperation</id>
    <link href="https://github.com/pinterest/PINOperation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PINOperation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/PINOperation/&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/PINOperation.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pinterest/PINOperation/actions?query=workflow%3ACI+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/pinterest/PINOperation/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Fast, concurrency-limited task queue for iOS and macOS.&lt;/h2&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pinterest/PINOperation/tags&#34;&gt;Download the latest tag&lt;/a&gt; and drag the &lt;code&gt;PINOperation&lt;/code&gt; folder into your Xcode project.&lt;/p&gt; &#xA;&lt;p&gt;Install the docs by double clicking the &lt;code&gt;.docset&lt;/code&gt; file under &lt;code&gt;docs/&lt;/code&gt;, or view them online at &lt;a href=&#34;http://cocoadocs.org/docsets/PINOperation/&#34;&gt;cocoadocs.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Git Submodule&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/pinterest/PINOperation.git&#xA;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;http://cocoapods.org/?q=name%3APINOperation&#34;&gt;PINOperation&lt;/a&gt; to your &lt;code&gt;Podfile&lt;/code&gt; and run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add the following line to your &lt;code&gt;Cartfile&lt;/code&gt; and run &lt;code&gt;carthage update --platform ios&lt;/code&gt;. Then follow &lt;a href=&#34;https://github.com/carthage/carthage#adding-frameworks-to-unit-tests-or-a-framework&#34;&gt;this instruction of Carthage&lt;/a&gt; to embed the framework.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;github &#34;pinterest/PINOperation&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;PINOperation&lt;/strong&gt; requires iOS 8.0, tvOS 9.0, macOS 10.8 or watchOS 2.0 and greater.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:garrett@pinterest.com&#34;&gt;Garrett Moon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2013 Tumblr, Inc. Copyright 2015 Pinterest, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/PINOperation/master/LICENSE.txt&#34;&gt;See the License&lt;/a&gt; for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pubnub/objective-c</title>
    <updated>2022-12-28T01:36:37Z</updated>
    <id>tag:github.com,2022-12-28:/pubnub/objective-c</id>
    <link href="https://github.com/pubnub/objective-c" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PubNub Objective-C based APIs for iOS and OS X&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PubNub 5.1.3 for iOS 9+&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/PubNub&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-%40PubNub-blue.svg?style=flat&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/PubNubRelease&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-%40PubNubRelease-blue.svg?style=flat&#34; alt=&#34;Twitter Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/license/pubnub/objective-c.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/pubnub/objective-c.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/v/PubNub.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/PubNub.svg?style=flat&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/p/PubNub.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/PubNub.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/metrics/doc-percent/PubNub.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/metrics/doc-percent/PubNub.svg?style=flat&#34; alt=&#34;Docs Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/pubnub/objective-c&#34;&gt;&lt;img src=&#34;https://travis-ci.com/pubnub/objective-c.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the official PubNub Objective-C SDK repository.&lt;/p&gt; &#xA;&lt;p&gt;PubNub takes care of the infrastructure and APIs needed for the realtime communication layer of your application. Work on your app&#39;s logic and let PubNub handle sending and receiving data across the world in less than 100ms.&lt;/p&gt; &#xA;&lt;h2&gt;Get keys&lt;/h2&gt; &#xA;&lt;p&gt;You will need the publish and subscribe keys to authenticate your app. Get your keys from the &lt;a href=&#34;https://dashboard.pubnub.com/login&#34;&gt;Admin Portal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configure PubNub&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the latest &lt;a href=&#34;https://guides.cocoapods.org/using/getting-started.html&#34;&gt;&lt;code&gt;cocoapods&lt;/code&gt;&lt;/a&gt; gem by running the &lt;code&gt;gem install cocoapods&lt;/code&gt; command. If you already have this gem, make sure to update to the latest version by running the &lt;code&gt;gem update cocoapods&lt;/code&gt; command.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new Xcode project and create a &lt;code&gt;Podfile&lt;/code&gt; in the root folder of the project:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pod init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;platform :ios, &#39;9.0&#39;&#xA;&#xA;target &#39;application-target-name&#39; do&#xA;    use_frameworks!&#xA;&#xA;    pod &#34;PubNub&#34;, &#34;~&amp;gt; 4&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want to include additional pods or add other targets, add their entries to this Podfile as well. Refer to the &lt;a href=&#34;https://guides.cocoapods.org/syntax/podfile.html#target&#34;&gt;CocoaPods documentation&lt;/a&gt; for more information on Podfile configuration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install your pods by running the &lt;code&gt;pod install&lt;/code&gt; command from the directory which contains your Podfile. After installing your Pods, you should work with the CocoaPods-generated workspace and not the original project file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Import the PubNub headers in the classes where you want to use PubNub:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;#import &amp;lt;PubNub/PubNub.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure your keys:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;// Initialize and configure PubNub client instance&#xA;PNConfiguration *configuration = [PNConfiguration configurationWithPublishKey: @&#34;myPublishKey&#34; subscribeKey:@&#34;mySubscribeKey&#34;];&#xA;configuration.uuid = @&#34;myUniqueUUID&#34;;&#xA;&#xA;self.client = [PubNub clientWithConfiguration:configuration];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Add event listeners&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;// Listener&#39;s class should conform to `PNEventsListener` protocol&#xA;// in order to have access to available callbacks.&#xA;&#xA;// Adding listener.&#xA;[pubnub addListener:self];&#xA;&#xA;// Callbacks listed below.&#xA;&#xA;- (void)client:(PubNub *)pubnub didReceiveMessage:(PNMessageResult *)message {&#xA;    NSString *channel = message.data.channel; // Channel on which the message has been published&#xA;    NSString *subscription = message.data.subscription; // Wild-card channel or channel on which PubNub client actually subscribed&#xA;    NSNumber *timetoken = message.data.timetoken; // Publish timetoken&#xA;    id msg = message.data.message; // Message payload&#xA;    NSString *publisher = message.data.publisher; // Message publisher&#xA;}&#xA;&#xA;- (void)client:(PubNub *)pubnub didReceiveSignal:(PNSignalResult *)signal {&#xA;    NSString *channel = message.data.channel; // Channel on which the signal has been published&#xA;    NSString *subscription = message.data.subscription; // Wild-card channel or channel on which PubNub client actually subscribed&#xA;    NSNumber *timetoken = message.data.timetoken; // Signal timetoken&#xA;    id msg = message.data.message; // Signal payload&#xA;    NSString *publisher = message.data.publisher; // Signal publisher&#xA;}&#xA;&#xA;- (void)client:(PubNub *)pubnub didReceiveMessageAction:(PNMessageActionResult *)action {&#xA;    NSString *channel = action.data.channel; // Channel on which the message has been published&#xA;    NSString *subscription = action.data.subscription; // Wild-card channel or channel on which PubNub client actually subscribed&#xA;    NSString *event = action.data.event; // Can be: added or removed&#xA;    NSString *type = action.data.action.type; // Message action type&#xA;    NSString *value = action.data.action.value; // Message action value&#xA;    NSNumber *messageTimetoken = action.data.action.messageTimetoken; // Timetoken of the original message&#xA;    NSNumber *actionTimetoken = action.data.action.actionTimetoken; // Timetoken of the message action&#xA;    NSString *uuid = action.data.action.uuid; // UUID of user which added / removed message action&#xA;}&#xA;&#xA;- (void)client:(PubNub *)pubnub didReceivePresenceEvent:(PNPresenceEventResult *)event {&#xA;    NSString *channel = message.data.channel; // Channel on which presence changes&#xA;    NSString *subscription = message.data.subscription; // Wild-card channel or channel on which PubNub client actually subscribed&#xA;    NSString *presenceEvent = event.data.presenceEvent; // Can be: join, leave, state-change, timeout or interval&#xA;    NSNumber *occupancy = event.data.presence.occupancy; // Number of users subscribed to the channel (not available for state-change event)&#xA;    NSNumber *timetoken = event.data.presence.timetoken; // Presence change timetoken&#xA;    NSString *uuid = event.data.presence.uuid; // UUID of user for which presence change happened&#xA;&#xA;    // Only for &#39;state-change&#39; event&#xA;    NSDictionary *state = event.data.presence.state; // User state (only for state-change event)&#xA;&#xA;    // Only for &#39;interval&#39; event&#xA;    NSArray&amp;lt;NSString *&amp;gt; *join = event.data.presence.join; // UUID of users which recently joined channel&#xA;    NSArray&amp;lt;NSString *&amp;gt; *leave = event.data.presence.leave; // UUID of users which recently leaved channel&#xA;    NSArray&amp;lt;NSString *&amp;gt; *timeout = event.data.presence.timeout; // UUID of users which recently timed out on channel&#xA;}&#xA;&#xA;- (void)client:(PubNub *)pubnub didReceiveObjectEvent:(PNObjectEventResult *)event {&#xA;    NSString *channel = event.data.channel; // Channel to which the event belongs&#xA;    NSString *subscription = event.data.subscription; // Wild-card channel or channel on which PubNub client actually subscribed&#xA;    NSString *event = event.data.event; // Can be: set or delete&#xA;    NSString *type = event.data.type; // Entity type: channel, uuid or membership&#xA;    NSNumber *timestamp = event.data.timestamp; // Event timestamp&#xA;&#xA;    PNChannelMetadata *channelMetadata = event.data.channelMetadata; // Updated channel metadata (only for channel entity type)&#xA;    PNUUIDMetadata *uuidMetadata = event.data.uuidMetadata; // Updated channel metadata (only for uuid entity type)&#xA;    PNMembership *membership = event.data.membership; // Updated channel metadata (only for membership entity type)&#xA;}&#xA;&#xA;- (void)client:(PubNub *)pubnub didReceiveFileEvent:(PNFileEventResult *)event {&#xA;    NSString *channel = event.data.channel; // Channel to which file has been uploaded&#xA;    NSString *subscription = event.data.subscription; // Wild-card channel or channel on which PubNub client actually subscribed&#xA;    id message = event.data.message; // Message added for uploaded file&#xA;    NSString *publisher = event.data.publisher; // UUID of file uploader&#xA;    NSURL *fileDownloadURL = event.data.file.downloadURL; // URL which can be used to download file&#xA;    NSString *fileIdentifier = event.data.file.identifier; // Unique file identifier&#xA;    NSString *fileName = event.data.file.name; // Name with which file has been stored remotely&#xA;}&#xA;&#xA;- (void)client:(PubNub *)pubnub didReceiveStatus:(PNStatus *)status {&#xA;    PNStatusCategory category = status.category; // One of PNStatusCategory fields to identify status of operation processing&#xA;    PNOperationType operation = status.operation; // One of PNOperationType fields to identify for which operation status received&#xA;    BOOL isError = status.isError; // Whether any kind of error happened.&#xA;    NSInteger statusCode = status.statusCode; // Related request processing status code&#xA;    BOOL isTLSEnabled = status.isTLSEnabled; // Whether secured connection enabled&#xA;    NSString *uuid = status.uuid; // UUID which configured for passed client&#xA;    NSString *authKey = status.authKey; // Auth key configured for passed client&#xA;    NSString *origin = status.origin; // Origin against which request has been sent&#xA;    NSURLRequest *clientRequest = status.clientRequest; // Request which has been used to send last request (may be nil)&#xA;    BOOL willAutomaticallyRetry = status.willAutomaticallyRetry; // Whether client will try to perform automatic retry&#xA;&#xA;    // Following is available when operation == PNSubscribeOperation,&#xA;    // because status is PNSubscribeStatus instance in this case&#xA;    PNSubscribeStatus *subscribeStatus = (PNSubscribeStatus *)status;&#xA;    NSNumber *currentTimetoken = subscribeStatus.currentTimetoken; // Timetoken which has been used for current subscribe request&#xA;    NSNumber *lastTimeToken = subscribeStatus.lastTimeToken; // Timetoken which has been used for previous subscribe request&#xA;    NSArray&amp;lt;NSString *&amp;gt; *subscribedChannels = subscribeStatus.subscribedChannels; // List of channels on which client currently subscribed&#xA;    NSArray&amp;lt;NSString *&amp;gt; *subscribedChannelGroups = subscribeStatus.subscribedChannelGroups; // List of channel groups on which client currently subscribed&#xA;    NSString *channel = subscribeStatus.data.channel; // Name of channel to which status has been received&#xA;    NSString *subscription = subscribeStatus.data.subscription; // Wild-card channel or channel on which PubNub client actually subscribed&#xA;    NSNumber *timetoken = subscribeStatus.data.timetoken; // Timetoken at which event arrived&#xA;    NSDictionary *userMetadata = subscribeStatus.data.userMetadata; // Metadata / envelope which has been passed along with event&#xA;&#xA;    // Following is available when isError == YES,&#xA;    // because status is PNErrorStatus instance in this case&#xA;    PNErrorStatus *errorStatus = (PNErrorStatus *)status;&#xA;    id associatedObject = errorStatus.associatedObject; // Data which may contain related information (not decrypted message for example)&#xA;    NSArray&amp;lt;NSString *&amp;gt; *erroredChannels = errorStatus.errorData.channels; // List of channels for which error reported (mostly because of PAM)&#xA;    NSArray&amp;lt;NSString *&amp;gt; *erroredChannelGroups = errorStatus.errorData.channelGroups; // List of channel groups for which error reported (mostly because of PAM)&#xA;    NSString *errorInformation = errorStatus.errorData.information; // Stringified information about error&#xA;    id errorData = errorStatus.errorData.data; // Additional error information from PubNub service&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Publish/subscribe&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;[self.client publish:@{ @ &#34;msg&#34;: @&#34;hello&#34; } toChannel:targetChannel &#xA;      withCompletion:^(PNPublishStatus *publishStatus) {&#xA;          if (!publishStatus.isError) {&#xA;              // Message successfully published to specified channel.&#xA;          } else {&#xA;              /**&#xA;               * Handle message publish error. Check &#39;category&#39; property to find out&#xA;               * possible reason because of which request did fail.&#xA;               * Review &#39;errorData&#39; property (which has PNErrorData data type) of status&#xA;               * object to get additional information about issue.&#xA;               *&#xA;               * Request can be resent using: [publishStatus retry];&#xA;               */&#xA;          }&#xA;}];&#xA;&#xA;[self.client subscribeToChannels: @[@&#34;hello-world-channel&#34;] withPresence:YES];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pubnub.com/docs/ios-objective-c/pubnub-objective-c-sdk&#34;&gt;API reference for Objective-C (iOS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pubnub.com/docs/cocoa-objective-c/pubnub-objective-c-sdk&#34;&gt;API reference for Objective-C (Cocoa)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you &lt;strong&gt;need help&lt;/strong&gt; or have a &lt;strong&gt;general question&lt;/strong&gt;, contact &lt;a href=&#34;mailto:support@pubnub.com&#34;&gt;support@pubnub.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/cordova-plugin-network-information</title>
    <updated>2022-12-28T01:36:37Z</updated>
    <id>tag:github.com,2022-12-28:/apache/cordova-plugin-network-information</id>
    <link href="https://github.com/apache/cordova-plugin-network-information" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Cordova Plugin network-information&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;title: Network Information description: Get information about wireless connectivity.&lt;/h2&gt; &#xA;&lt;!--&#xA;# license: Licensed to the Apache Software Foundation (ASF) under one&#xA;#         or more contributor license agreements.  See the NOTICE file&#xA;#         distributed with this work for additional information&#xA;#         regarding copyright ownership.  The ASF licenses this file&#xA;#         to you under the Apache License, Version 2.0 (the&#xA;#         &#34;License&#34;); you may not use this file except in compliance&#xA;#         with the License.  You may obtain a copy of the License at&#xA;#&#xA;#           http://www.apache.org/licenses/LICENSE-2.0&#xA;#&#xA;#         Unless required by applicable law or agreed to in writing,&#xA;#         software distributed under the License is distributed on an&#xA;#         &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY&#xA;#         KIND, either express or implied.  See the License for the&#xA;#         specific language governing permissions and limitations&#xA;#         under the License.&#xA;--&gt; &#xA;&lt;h1&gt;cordova-plugin-network-information&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/android.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/android.yml/badge.svg?sanitize=true&#34; alt=&#34;Android Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/chrome.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/chrome.yml/badge.svg?sanitize=true&#34; alt=&#34;Chrome Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/ios.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/ios.yml/badge.svg?sanitize=true&#34; alt=&#34;iOS Testsuite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/cordova-plugin-network-information/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Lint Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugin provides an implementation of an old version of the &lt;a href=&#34;http://www.w3.org/TR/2011/WD-netinfo-api-20110607/&#34;&gt;Network Information API&lt;/a&gt;. It provides information about the device&#39;s cellular and wifi connection, and whether the device has an internet connection.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To get a few ideas how to use the plugin, check out the &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-network-information/master/#sample&#34;&gt;sample&lt;/a&gt; at the bottom of this page or go straight to the &lt;a href=&#34;https://raw.githubusercontent.com/apache/cordova-plugin-network-information/master/#reference&#34;&gt;reference&lt;/a&gt; content.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cordova plugin add cordova-plugin-network-information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Browser&lt;/li&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Connection&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;connection&lt;/code&gt; object, exposed via &lt;code&gt;navigator.connection&lt;/code&gt;, provides information about the device&#39;s cellular and wifi connection.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Properties&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;connection.type&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Constants&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connection.UNKNOWN&lt;/li&gt; &#xA; &lt;li&gt;Connection.ETHERNET&lt;/li&gt; &#xA; &lt;li&gt;Connection.WIFI&lt;/li&gt; &#xA; &lt;li&gt;Connection.CELL_2G&lt;/li&gt; &#xA; &lt;li&gt;Connection.CELL_3G&lt;/li&gt; &#xA; &lt;li&gt;Connection.CELL_4G&lt;/li&gt; &#xA; &lt;li&gt;Connection.CELL&lt;/li&gt; &#xA; &lt;li&gt;Connection.NONE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;connection.type&lt;/h2&gt; &#xA;&lt;p&gt;This property offers a fast way to determine the device&#39;s network connection state, and type of connection.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function checkConnection() {&#xA;    var networkState = navigator.connection.type;&#xA;&#xA;    var states = {};&#xA;    states[Connection.UNKNOWN]  = &#39;Unknown connection&#39;;&#xA;    states[Connection.ETHERNET] = &#39;Ethernet connection&#39;;&#xA;    states[Connection.WIFI]     = &#39;WiFi connection&#39;;&#xA;    states[Connection.CELL_2G]  = &#39;Cell 2G connection&#39;;&#xA;    states[Connection.CELL_3G]  = &#39;Cell 3G connection&#39;;&#xA;    states[Connection.CELL_4G]  = &#39;Cell 4G connection&#39;;&#xA;    states[Connection.CELL]     = &#39;Cell generic connection&#39;;&#xA;    states[Connection.NONE]     = &#39;No network connection&#39;;&#xA;&#xA;    alert(&#39;Connection type: &#39; + states[networkState]);&#xA;}&#xA;&#xA;checkConnection();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS Quirks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&amp;lt;iOS7 can&#39;t detect the type of cellular network connection. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;navigator.connection.type&lt;/code&gt; is set to &lt;code&gt;Connection.CELL&lt;/code&gt; for all cellular data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows Quirks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When running in the Phone 8.1 emulator, always detects &lt;code&gt;navigator.connection.type&lt;/code&gt; as &lt;code&gt;Connection.ETHERNET&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Browser Quirks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Browser can&#39;t detect the type of network connection. &lt;code&gt;navigator.connection.type&lt;/code&gt; is always set to &lt;code&gt;Connection.UNKNOWN&lt;/code&gt; when online.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Network-related Events&lt;/h1&gt; &#xA;&lt;h2&gt;offline&lt;/h2&gt; &#xA;&lt;p&gt;The event fires when an application goes offline, and the device is not connected to the Internet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;document.addEventListener(&#34;offline&#34;, yourCallbackFunction, false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Details&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;offline&lt;/code&gt; event fires when a previously connected device loses a network connection so that an application can no longer access the Internet. It relies on the same information as the Connection API, and fires when the value of &lt;code&gt;connection.type&lt;/code&gt; becomes &lt;code&gt;NONE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Applications typically should use &lt;code&gt;document.addEventListener&lt;/code&gt; to attach an event listener once the &lt;code&gt;deviceready&lt;/code&gt; event fires.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;document.addEventListener(&#34;offline&#34;, onOffline, false);&#xA;&#xA;function onOffline() {&#xA;    // Handle the offline event&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quirks&lt;/h3&gt; &#xA;&lt;p&gt;This plugin is unable to broadcast events while in the background. Use &lt;code&gt;navigator.connection.type&lt;/code&gt; to check connection status on the &lt;a href=&#34;https://cordova.apache.org/docs/en/latest/cordova/events/events.html#resume&#34;&gt;resume&lt;/a&gt; event instead.&lt;/p&gt; &#xA;&lt;h3&gt;iOS Quirks&lt;/h3&gt; &#xA;&lt;p&gt;During initial startup, the first offline event (if applicable) takes at least a second to fire.&lt;/p&gt; &#xA;&lt;h2&gt;online&lt;/h2&gt; &#xA;&lt;p&gt;This event fires when an application goes online, and the device becomes connected to the Internet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;document.addEventListener(&#34;online&#34;, yourCallbackFunction, false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Details&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;online&lt;/code&gt; event fires when a previously unconnected device receives a network connection to allow an application access to the Internet. It relies on the same information as the Connection API, and fires when the &lt;code&gt;connection.type&lt;/code&gt; changes from &lt;code&gt;NONE&lt;/code&gt; to any other value.&lt;/p&gt; &#xA;&lt;p&gt;Applications typically should use &lt;code&gt;document.addEventListener&lt;/code&gt; to attach an event listener once the &lt;code&gt;deviceready&lt;/code&gt; event fires.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;document.addEventListener(&#34;online&#34;, onOnline, false);&#xA;&#xA;function onOnline() {&#xA;    // Handle the online event&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quirks&lt;/h3&gt; &#xA;&lt;p&gt;This plugin is unable to broadcast events while in the background. Use &lt;code&gt;navigator.connection.type&lt;/code&gt; to check connection status on the &lt;a href=&#34;https://cordova.apache.org/docs/en/latest/cordova/events/events.html#resume&#34;&gt;resume&lt;/a&gt; event instead.&lt;/p&gt; &#xA;&lt;h3&gt;iOS Quirks&lt;/h3&gt; &#xA;&lt;p&gt;During initial startup, the first &lt;code&gt;online&lt;/code&gt; event (if applicable) takes at least a second to fire, prior to which &lt;code&gt;connection.type&lt;/code&gt; is &lt;code&gt;UNKNOWN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample: Upload a File Depending on your Network State &lt;a name=&#34;sample&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The code examples in this section show examples of changing app behavior using the online and offline events and your network connection status.&lt;/p&gt; &#xA;&lt;p&gt;To start with, create a new FileEntry object (data.txt) to use for sample data. Call this function from the &lt;code&gt;deviceready&lt;/code&gt; handler.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt; This code example requires the File plugin.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var dataFileEntry;&#xA;&#xA;function createSomeData() {&#xA;&#xA;    window.requestFileSystem(window.TEMPORARY, 5 * 1024 * 1024, function (fs) {&#xA;&#xA;        console.log(&#39;file system open: &#39; + fs.name);&#xA;        // Creates a new file or returns an existing file.&#xA;        fs.root.getFile(&#34;data.txt&#34;, { create: true, exclusive: false }, function (fileEntry) {&#xA;&#xA;          dataFileEntry = fileEntry;&#xA;&#xA;        }, onErrorCreateFile);&#xA;&#xA;    }, onErrorLoadFs);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add listeners for the online and offline events in the &lt;code&gt;deviceready&lt;/code&gt; handler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;document.addEventListener(&#34;offline&#34;, onOffline, false);&#xA;document.addEventListener(&#34;online&#34;, onOnline, false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The app&#39;s &lt;code&gt;onOnline&lt;/code&gt; function handles the online event. In the event handler, check the current network state. In this app, treat any connection type as good except Connection.NONE. If you have a connection, you try to upload a file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function onOnline() {&#xA;    // Handle the online event&#xA;    var networkState = navigator.connection.type;&#xA;&#xA;    if (networkState !== Connection.NONE) {&#xA;        if (dataFileEntry) {&#xA;            tryToUploadFile();&#xA;        }&#xA;    }&#xA;    display(&#39;Connection type: &#39; + networkState);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the online event fires in the preceding code, call the app&#39;s &lt;code&gt;tryToUploadFile&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;If the upload fails, then call the app&#39;s &lt;code&gt;offlineWrite&lt;/code&gt; function to save the current data somewhere.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt; For simplicity, file reading &amp;amp; writing was omitted. Refer to the &lt;a href=&#34;https://github.com/apache/cordova-plugin-file#cordova-plugin-file&#34;&gt;cordova-plugin-file&lt;/a&gt; documentation for more information on file handling.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function tryToUploadFile() {&#xA;    // !! Assumes variable fileURL contains a valid URL to a text file on the device,&#xA;    var fileURL = getDataFileEntry().toURL();&#xA;    &#xA;    getFileBlobSomehow(fileURL, function(fileBlob) {&#xA;        var success = function (r) {&#xA;            console.log(&#34;Response = &#34; + r.response);&#xA;            display(&#34;Uploaded. Response: &#34; + r.response);&#xA;        };&#xA;&#xA;        var fail = function (error) {&#xA;            console.log(&#34;An error has occurred: Code = &#34; + error.code || error.status);&#xA;            offlineWrite(&#34;Failed to upload: some offline data&#34;);&#xA;        }&#xA;&#xA;        var xhr = new XMLHttpRequest();&#xA;&#xA;        xhr.onerror = fail;&#xA;        xhr.ontimeout = fail;&#xA;        xhr.onload = function() {&#xA;            // If the response code was successful...&#xA;            if (xhr.status &amp;gt;= 200 &amp;amp;&amp;amp; xhr.status &amp;lt; 400) {&#xA;                success(xhr);&#xA;            }&#xA;            else {&#xA;                fail(xhr)&#xA;            }&#xA;        }&#xA;&#xA;        // Make sure you add the domain of your server URL to the&#xA;        // Content-Security-Policy &amp;lt;meta&amp;gt; element in index.html.&#xA;        xhr.open(&#34;POST&#34;, encodeURI(SERVER));&#xA;&#xA;        xhr.setRequestHeader(&#34;Content-Type&#34;, &#34;text/plain&#34;);&#xA;&#xA;        // The server request handler could read this header to&#xA;        // set the filename.&#xA;        xhr.setRequestHeader(&#34;X-Filename&#34;, fileURL.substr(fileURL.lastIndexOf(&#34;/&#34;) + 1));&#xA;&#xA;        xhr.send(fileBlob);&#xA;    });&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the code for the &lt;code&gt;offlineWrite&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt; This code examples requires the File plugin.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function offlineWrite(offlineData) {&#xA;    // Create a FileWriter object for our FileEntry.&#xA;    dataFileEntry.createWriter(function (fileWriter) {&#xA;&#xA;        fileWriter.onwriteend = function () {&#xA;            console.log(&#34;Successful file write...&#34;);&#xA;            display(offlineData);&#xA;        };&#xA;&#xA;        fileWriter.onerror = function (e) {&#xA;            console.log(&#34;Failed file write: &#34; + e.toString());&#xA;        };&#xA;&#xA;        fileWriter.write(offlineData);&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the offline event occurs, just do something like notify the user (for this example, just log it).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function onOffline() {&#xA;    // Handle the offline event&#xA;    console.log(&#34;lost connection&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>