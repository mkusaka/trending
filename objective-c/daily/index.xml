<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-03T01:36:36Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PrideChung/FontAwesomeKit</title>
    <updated>2023-01-03T01:36:36Z</updated>
    <id>tag:github.com,2023-01-03:/PrideChung/FontAwesomeKit</id>
    <link href="https://github.com/PrideChung/FontAwesomeKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Icon font library for iOS. Currently supports Font-Awesome, Foundation icons, Zocial, and ionicons.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FontAwesomeKit &lt;img src=&#34;https://img.shields.io/cocoapods/v/FontAwesomeKit.svg?style=flat&#34; alt=&#34;Cocoapods Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/FontAwesomeKit.svg?style=flat&#34; alt=&#34;Platform&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/l/FontAwesomeKit.svg?style=flat&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Icon font library for iOS. Currently supports Font-Awesome, Foundation icons, Zocial, and ionicons.&lt;/p&gt; &#xA;&lt;h2&gt;Version 2.2 Notable Changes&lt;/h2&gt; &#xA;&lt;h3&gt;Not Just Awesome. New Icon Fonts Added&lt;/h3&gt; &#xA;&lt;p&gt;Currently FontAwesomeKit supports &lt;strong&gt;6&lt;/strong&gt; different icon fonts.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://fontawesome.io&#34;&gt;FontAwesome 4.7&lt;/a&gt; Our old friend, contains &lt;strong&gt;675&lt;/strong&gt; icons&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://zurb.com/playground/foundation-icon-fonts-3&#34;&gt;Foundation icons&lt;/a&gt; Contains &lt;strong&gt;283&lt;/strong&gt; icons.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://zocial.smcllns.com/&#34;&gt;Zocial&lt;/a&gt; Contains &lt;strong&gt;99&lt;/strong&gt; social icons.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ionicons.com/&#34;&gt;ionicons 2.0.0&lt;/a&gt; Contains &lt;strong&gt;733&lt;/strong&gt; icons, lots of iOS 7 style outlined icons.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://octicons.github.com/&#34;&gt;Octicons 2.4.1&lt;/a&gt; Contains &lt;strong&gt;206&lt;/strong&gt; icons, built with love by &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google.github.io/material-design-icons/&#34;&gt;Material 2.0.0&lt;/a&gt; Contains &lt;strong&gt;743&lt;/strong&gt; icons, built by Google for Material design.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;API Reforged, Take Advantage of NSAttributedString&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to &lt;code&gt;NSAttributedString&lt;/code&gt; the API is more clean and object oriented. All hail &lt;code&gt;NSAttributedString&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;h3&gt;Notes on FontAwesome&lt;/h3&gt; &#xA;&lt;p&gt;Please notice that FontAwesome has renamed lots of it&#39;s icons in the recent 4.0 release, make sure to change you code accordingly if you&#39;re using FontAwesomeKit 2.1 version.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 5&lt;/li&gt; &#xA; &lt;li&gt;iOS 6.0 +&lt;/li&gt; &#xA; &lt;li&gt;tvOS 9.0&lt;/li&gt; &#xA; &lt;li&gt;ARC enabled&lt;/li&gt; &#xA; &lt;li&gt;CoreText framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install with CocoaPods (Strongly Recommended)&lt;/h3&gt; &#xA;&lt;p&gt;FontAwesomeKit now supports sub spec, only get the fonts you need.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;pod &#39;FontAwesomeKit&#39;, &#39;~&amp;gt; 2.2.0&#39;&lt;/code&gt; to Podfile to install all icon fonts.&lt;/p&gt; &#xA;&lt;p&gt;Or select icon fonts with:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pod &#39;FontAwesomeKit/FontAwesome&#39;&lt;/code&gt;&lt;br&gt; &lt;code&gt;pod &#39;FontAwesomeKit/FoundationIcons&#39;&lt;/code&gt;&lt;br&gt; &lt;code&gt;pod &#39;FontAwesomeKit/Zocial&#39;&lt;/code&gt;&lt;br&gt; &lt;code&gt;pod &#39;FontAwesomeKit/IonIcons&#39;&lt;/code&gt; &lt;code&gt;pod &#39;FontAwesomeKit/Octicons&#39;&lt;/code&gt; &lt;code&gt;pod &#39;FontAwesomeKit/Material&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;pod install&lt;/code&gt; or &lt;code&gt;pod update&lt;/code&gt; to install selected icon fonts.&lt;/p&gt; &#xA;&lt;h4&gt;Importing Headers&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;#import FontAwesomeKit/FontAwesomeKit.h&lt;/code&gt; If you installed all available icon fonts.&lt;/p&gt; &#xA;&lt;p&gt;Or import icon fonts you installed with sub specs&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#import FontAwesomeKit/FAKFontAwesome.h&lt;/code&gt;&lt;br&gt; &lt;code&gt;#import FontAwesomeKit/FAKFoundationIcons.h&lt;/code&gt;&lt;br&gt; &lt;code&gt;#import FontAwesomeKit/FAKZocial.h&lt;/code&gt;&lt;br&gt; &lt;code&gt;#import FontAwesomeKit/FAKIonIcons.h&lt;/code&gt; &lt;code&gt;#import FontAwesomeKit/FAKOcticons.h&lt;/code&gt; &lt;code&gt;#import FontAwesomeKit/FAKMaterialIcons.h&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;#####&lt;em&gt;important:&lt;/em&gt; If you deleted a sub spec in Podfile, please delete Xcode&#39;s derived data in organizer(command+shift+2 to bring up). Otherwise Xcode will keep copying font files those supposed to be deleted to the app bundle.&lt;/p&gt; &#xA;&lt;h3&gt;Install with Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;github &#34;PrideChung/FontAwesomeKit&#34;&lt;/code&gt; to Cartfile to install all icon fonts.&lt;/p&gt; &#xA;&lt;h3&gt;Install Manually&lt;/h3&gt; &#xA;&lt;p&gt;Download source code, then drag the folder &lt;code&gt;FontAwesomeKit&lt;/code&gt; into your project, add CoreText framework to you project.&lt;/p&gt; &#xA;&lt;p&gt;##Example Usage&lt;/p&gt; &#xA;&lt;h3&gt;Creating Icons&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;FAKFontAwesome *starIcon = [FAKFontAwesome starIconWithSize:15];&#xA;FAKFoundationIcons *bookmarkIcon = [FAKFoundationIcons bookmarkIconWithSize:15];&#xA;FAKZocial *twitterIcon = [FAKZocial twitterIconWithSize:15];  &#xA;FAKIonIcons *mailIcon = [FAKIonIcons ios7EmailIconWithSize:48];&#xA;FAKOcticons *repoIcon = [FAKOcticons repoIconWithSize:48];&#xA;FAKMaterialIcons *androidIcon = [FAKMaterialIcons androidIconWithSize:48];&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let starIcon = FAKFontAwesome.starIcon(withSize: 15)&#xA;let bookmarkIcon = FAKFoundationIcons.bookmarkIcon(withSize: 15)&#xA;let twitterIcon = FAKZocial.twitterIcon(withSize: 15)&#xA;let mailIcon = FAKIonIcons.ios7EmailIcon(withSize: 48)&#xA;let repoIcon = FAKOcticons.repoIcon(withSize: 48)&#xA;let androidIcon = FAKMaterialIcons.androidIcon(withSize: 48)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can use these class methods and pass in the font size instead of finding an icon with constants. Corresponding icon fonts will automatically setup for you.&lt;/p&gt; &#xA;&lt;h4&gt;Creating icons using identifiers&lt;/h4&gt; &#xA;&lt;p&gt;It is now possible to use identifiers to create icons. Check each documentation to get the appropriate identifier. Also, make sure you use an existing identifier, else the method will return nil and an error will be set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSError *error;&#xA;FAKFontAwesome *starIcon = [FAKFontAwesome  iconWithIdentifier:@&#34;fa-star&#34; size:15 error:error];&#xA;FAKFoundationIcons *bookmarkIcon = [FAKFoundationIcons iconWithIdentifier:@&#34;fi-bookmark&#34; size:15 error:error];&#xA;FAKZocial *twitterIcon = [FAKZocial iconWithIdentifier:@&#34;zocial.twitter&#34; size:15 error:error];&#xA;FAKIonIcons *mailIcon = [FAKIonIcons iconWithIdentifier:@&#34;ion-ios-email&#34; size:48 error:error];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let starIcon: FAKFontAwesome?&#xA;do {&#xA;  starIcon = try FAKFontAwesome.init(identifier: &#34;er&#34;, size: 15)&#xA;} catch let error as NSError {&#xA;  print(error.localizedDescription)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting Attributes for An Icon&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[starIcon addAttribute:NSForegroundColorAttributeName value:[UIColor&#xA;whiteColor]];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;starIcon.addAttribute(NSForegroundColorAttributeName, UIColor.white)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;NSAttributedString&lt;/code&gt; did all the magics behind the scene. So you can set those attributes supported by &lt;code&gt;NSAttributedString&lt;/code&gt; to an icon. For all available attributes, see &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/UIKit/Reference/NSAttributedString_UIKit_Additions/Reference/Reference.html#//apple_ref/doc/uid/TP40011688-CH1-SW16&#34;&gt;NSAttributedString UIKit Additions Reference&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;#####&lt;em&gt;important:&lt;/em&gt; Some attributes apparently makes no sense for icon fonts, like &lt;code&gt;NSLigatureAttributeName&lt;/code&gt; and &lt;code&gt;NSKernAttributeName&lt;/code&gt;. You should not use these attributes, otherwise you app might crash. And you should not set the value of &lt;code&gt;NSFontAttributeName&lt;/code&gt;, if you want to change the size of an icon, set it&#39;s &lt;code&gt;iconFontSize&lt;/code&gt; property instead.&lt;/p&gt; &#xA;&lt;h3&gt;Other Methods for Setting or Getting Attributes&lt;/h3&gt; &#xA;&lt;p&gt;These methods in fact are just shorthand versions for the standard &lt;code&gt;NSAttributedString&lt;/code&gt; API, should be pretty straightforward.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;[starIcon setAttributes:attributes];&lt;/code&gt; &lt;code&gt;starIcon.setAttributes(attributes)&lt;/code&gt; &lt;em&gt;Sets attributes with a dictionary, will override current attribute if there&#39;re different values for a same key.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;[starIcon removeAttribute:NSForegroundColorAttributeName];&lt;/code&gt; &lt;code&gt;starIcon.removeAttribute(NSForegroundColorAttributeName)&lt;/code&gt; &lt;em&gt;Removes an attribute by name.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;[starIcon attributes];&lt;/code&gt; &lt;code&gt;starIcon.attributes()&lt;/code&gt; &lt;em&gt;Returns an dictionary contains the attribute values for the icon.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;[starIcon attribute:NSForegroundColorAttributeName];&lt;/code&gt; &lt;code&gt;starIcon.attribute(NSForegroundColorAttributeName)&lt;/code&gt; &lt;em&gt;Returns the attribute value for a given key.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Get The Attributed String&lt;/h3&gt; &#xA;&lt;p&gt;After you done setting attributes, you can get the attributed string by calling &lt;code&gt;[starIcon attributedString]&lt;/code&gt; &lt;code&gt;starIcon.attributedString()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;So you can use the icon on a label with one line of code:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;self.label.attributedText = [starIcon attributedString];&lt;/code&gt; &lt;code&gt;self.label.attributedText = starIcon.attributedString()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t need to set the label&#39;s &lt;code&gt;font&lt;/code&gt; property, it&#39;s already been taken care of.&lt;/p&gt; &#xA;&lt;h3&gt;Drawing The Icon on Image&lt;/h3&gt; &#xA;&lt;h4&gt;Basic Drawing&lt;/h4&gt; &#xA;&lt;p&gt;Instead of getting the attributed string, you can draw the icon onto an image like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;UIImage *iconImage = [starIcon imageWithSize:CGSizeMake(15, 15)];&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;let iconImage = starIcon.image(with: CGSize(width: 15, height: 15))&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will use the attributes you&#39;ve set to draw that image, you only need to specify a size for the image.&lt;/p&gt; &#xA;&lt;h4&gt;Drawing Offset&lt;/h4&gt; &#xA;&lt;p&gt;By default the icon is centered horizontally and vertically. I believe that&#39;s 99% what you want. However, if it&#39;s not centered properly, you can set the &lt;code&gt;drawingPositionAdjustment&lt;/code&gt; property for the icon, like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;starIcon.drawingPositionAdjustment = UIOffsetMake(2, 2);&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Background Color&lt;/h4&gt; &#xA;&lt;p&gt;You can set the background color for the image like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;starIcon.drawingBackgroundColor = [UIColor blackColor];&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;starIcon.drawingBackgroundColor = UIColor.black&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default the background is transparent. As the name implies, this property only takes effect while drawing on image. You can specify a gradient color to create a gradient background, check the example project for details.&lt;/p&gt; &#xA;&lt;h3&gt;Those Controls Doesn&#39;t Support Attributed String&lt;/h3&gt; &#xA;&lt;p&gt;Some UI elements doesn&#39;t have an attributed string property, using images might be a better idea. Take UIBarButtonItem as an example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;FAKFontAwesome *cogIcon = [FAKFontAwesome cogIconWithSize:20];&#xA;[cogIcon addAttribute:NSForegroundColorAttributeName value:[UIColor whiteColor]];&#xA;UIImage *leftImage = [cogIcon imageWithSize:CGSizeMake(20, 20)];&#xA;cogIcon.iconFontSize = 15;&#xA;UIImage *leftLandscapeImage = [cogIcon imageWithSize:CGSizeMake(15, 15)];&#xA;self.navigationItem.leftBarButtonItem =&#xA;[[UIBarButtonItem alloc] initWithImage:leftImage&#xA;                   landscapeImagePhone:leftLandscapeImage&#xA;                                 style:UIBarButtonItemStylePlain&#xA;                                target:nil&#xA;                                action:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let cogIcon = FAKFontAwesome.cogIcon(withSize: 20)&#xA;cogIcon?.addAttribute(NSForegroundColorAttributeName, value: UIColor.white)&#xA;let leftImage = cogIcon?.image(with: CGSize(width: 20, height: 20))&#xA;cogIcon?.iconFontSize = 15&#xA;let leftLandscapeImage = cogIcon?.image(with: CGSize(width: 15, height: 15))&#xA;self.navigationItem.leftBarButtonItem = UIBarButtonItem(&#xA;  image: leftImage,&#xA;  landscapeImagePhone: leftLandscapeImage,&#xA;  style: .plain,&#xA;  target: nil,&#xA;  action: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same idea can be applied to tab bar or segmented control.&lt;/p&gt; &#xA;&lt;h3&gt;Generating Image with Stacked Icons (Since V2.1.5)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/examples/#stacked&#34;&gt;Stacked icons is a feature of Font-Awesome&lt;/a&gt; and now has been ported to FontAwesomeKit. You can generate an image with multiple icons stacked together.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[UIImage imageWithStackedIcons:@[[FAKFontAwesome twitterIconWithSize:35], [FAKFontAwesome squareOIconWithSize:70]],&#xA;                     imageSize:CGSizeMake(80, 80)];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let image = UIImage(stackedIcons: [FAKFontAwesome.twitterIcon(withSize: 35), FAKFontAwesome.squareOIcon(withSize: 70)], imageSize: CGSize(width: 80, height: 80))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first icon in the array will be draw on the bottom.&lt;/p&gt; &#xA;&lt;h3&gt;More Examples&lt;/h3&gt; &#xA;&lt;p&gt;Please clone the master repo and take a look at the example project, everything is in it, all public methods and properties are documented. Feel free to open an issue if you went into trouble.&lt;/p&gt; &#xA;&lt;h2&gt;Using Custom Icon Font&lt;/h2&gt; &#xA;&lt;p&gt;You can use some web applications like &lt;a href=&#34;https://fontastic.me&#34;&gt;fontastic.me&lt;/a&gt; to generate your own icon font to reduce font file size. In this case, you need to implement your own &lt;code&gt;FAKIcon&lt;/code&gt; subclass, here&#39;s a complete demo: &lt;a href=&#34;https://github.com/PrideChung/FontAwesomeKitCustomFont&#34;&gt;PrideChung / FontAwesomeKitCustomFont&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/PrideChung/FontAwesomeKit/raw/master/KnownIssues.md&#34;&gt;Known Issuses&lt;/a&gt; if you ran into strange crashes.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/PrideChung/FontAwesomeKit/raw/master/CHANGES.md&#34;&gt;CHANGES.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alladinian&#34;&gt;Vasilis Akoinoglou&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/isaksky&#34;&gt;Isak Sky&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dominikgrygiel&#34;&gt;Dominik Grygiel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PrideChung/FontAwesomeKit/pull/12&#34;&gt;Alex Shepard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;FontAwesomeKit is available under the MIT license. See the LICENSE file for more information. Attribution isn&#39;t required but is much appreciated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please notice that each icon font has it&#39;s own license agreement.&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>strongbox-password-safe/Strongbox</title>
    <updated>2023-01-03T01:36:36Z</updated>
    <id>tag:github.com,2023-01-03:/strongbox-password-safe/Strongbox</id>
    <link href="https://github.com/strongbox-password-safe/Strongbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A KeePass/Password Safe Client for iOS and OS X&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Strongbox&lt;/h1&gt; &#xA;&lt;p&gt;A Personal Password Manager for iOS &amp;amp; OSX that can be found on the Apple App Store here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apps.apple.com/app/strongbox-password-safe/id897283731&#34;&gt;https://apps.apple.com/app/strongbox-password-safe/id897283731&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Strongbox supports the open source Password Safe (version 3) and KeePass file formats (KeePass 1 and 2, i.e. KDB, KDBX (3.1 and 4)). Strongbox uses open source encryption algoritms likes TwoFish, Argon2d, ChaCha20, Aes, Salsa20 and various other cryptographic techniques (SHA256s, HMACs, CSPRNGs) to store groups and entries, containing various secrets, mostly designed around password storage. You can also store File Attachments in KeePass format safes. YubiKey is also supported!&lt;/p&gt; &#xA;&lt;h1&gt;Beta Testers Wanted&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;d like to beta test new versions of Strongbox before they are released to the general public please just email &lt;a href=&#34;mailto:support@strongboxsafe.com&#34;&gt;support@strongboxsafe.com&lt;/a&gt;. You&#39;ll need to be fairly technically competent and have a good backup process in place (just in case).&lt;/p&gt; &#xA;&lt;h1&gt;Localization - Help Wanted&lt;/h1&gt; &#xA;&lt;p&gt;Localization and translation is managed through the parallel Babel project here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/strongbox-password-safe/babel&#34;&gt;https://github.com/strongbox-password-safe/babel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is managed under the MIT licence to avoid issues with the Apple&#39;s App Store and ownership. There are some efforts underway right now but if you would like to see Strongbox translated into your language just get in touch and we&#39;ll try to set you up. Currently we are using Crowd In to manage things and it seems to be working well. Get in touch to get an invite to that system and being work on your language.&lt;/p&gt; &#xA;&lt;p&gt;You can submit Pull Requests any way you choose, and it will be much appreciated, but please get in touch first so I can make sure the Repo is setup correctly for your language.&lt;/p&gt; &#xA;&lt;p&gt;Big thank you to all the localization contributors&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chinese - GY &amp;amp; Attis &amp;amp; Anonymous&lt;/li&gt; &#xA; &lt;li&gt;Czech - S474N&lt;/li&gt; &#xA; &lt;li&gt;Dutch - Wishes to remain anonymous&lt;/li&gt; &#xA; &lt;li&gt;French - Charles-Ivan Chesneau&lt;/li&gt; &#xA; &lt;li&gt;German - @Slummi&lt;/li&gt; &#xA; &lt;li&gt;Italian - Marco Ermini&lt;/li&gt; &#xA; &lt;li&gt;Japanese - Anonymous&lt;/li&gt; &#xA; &lt;li&gt;Norwegian - Ole Aldric&lt;/li&gt; &#xA; &lt;li&gt;Polish - Łukasz Oryński&lt;/li&gt; &#xA; &lt;li&gt;Portuguese (PT-BR) - Wolfgang Marcos&lt;/li&gt; &#xA; &lt;li&gt;Russian - Wishes to remain anonymous&lt;/li&gt; &#xA; &lt;li&gt;Spanish - Wishes to remain anonymous&lt;/li&gt; &#xA; &lt;li&gt;Swedish - Jari Häkkinen&lt;/li&gt; &#xA; &lt;li&gt;Ukrainian - Artem Polivanchuk&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License Notes&lt;/h1&gt; &#xA;&lt;p&gt;This software provided here on Github is licensed under the GNU AGPL by default, except for translations of Strings files which are managed under the MIT Licence in the Babel sub project. Copyright/Ownership is held by Mark McGuill. Strongbox is licensed to Apple under a different license which is compatible with the App Store.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in using the code, commercially, or in some other fashion for which the GPL is unsuitable, or if you would simply like to discuss an alternative licence or custom builds for your organization, then please get in touch.&lt;/p&gt; &#xA;&lt;h1&gt;Supporting Development&lt;/h1&gt; &#xA;&lt;p&gt;There are several ways you can help support continuous development. Obviously if you purchase a subscription or lifetime licence that&#39;s really helpful. But there are a few other options if you like the app and you are feeling generous... You can help by contributing financially here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Patreon: &lt;a href=&#34;https://www.patreon.com/strongboxpasswordsafe&#34;&gt;https://www.patreon.com/strongboxpasswordsafe&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you like the app, you can always help out by leaving a &lt;em&gt;5 star review&lt;/em&gt; in the App Store. This is very helpful, and helps get the word out about Strongbox. If you can, please leave a positive comment too. You can review the App here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apps.apple.com/app/strongbox-password-safe/id897283731&#34;&gt;https://apps.apple.com/app/strongbox-password-safe/id897283731&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Of course it is also great if you can tell your friends and family about the App, spread the word on Twitter, Reddit or otherwise.&lt;/p&gt; &#xA;&lt;h1&gt;Help / Tech Support&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re having trouble, please checkout the following sources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://strongboxsafe.com/support/&#34;&gt;Online Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/StrongboxSafe&#34; title=&#34;@StrongboxSafe&#34;&gt;Twitter @StrongboxSafe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/strongbox/&#34; title=&#34;r/strongbox&#34;&gt;Reddit r/strongbox&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Another important step is to restart your device, it&#39;s surprising how often this can fix issues. If you are having iCloud trouble, then signing in and out of iCloud/iCloud Drive can help.&lt;/p&gt; &#xA;&lt;h1&gt;Build Issues&lt;/h1&gt; &#xA;&lt;p&gt;The code is provided here for reasons of security, transparency and openness. Anyone can view the code and verify that everything is above board, the algorithms are correct and there are no backdoors or other malicious features present. You will need Google Drive, OneDrive and Dropbox developer accounts (with keys/secrets) before building. Familiarity with Cocoapods and other build tools is a prerequisite. Please do not file issues about build issues, I can&#39;t guarantee what is here will build in your environment. What is here is all of the functional code used in building Strongbox. XCode Interface Builder UI files, XCode project/solution/workspace, and other non functional code files may be removed to hinder copy cat apps. Translation strings files are managed in the separate Babel repository.&lt;/p&gt; &#xA;&lt;p&gt;If instead of examining the code, you simply want to use the app, please download from the App Store, the free version is more than functional. Lastly, if you are attempting to bypass built-in Pro/Free limitations for your own app usage, I would ask you to keep that app to yourself and not distribute it. Also, please consider your actions, and consider supporting further development by contributing via the official application (In-App Purchase upgrade). It will be very much appreciated. Finally, if you really need all the Pro features and cannot afford the upgrade, just drop me a mail and I&#39;ll help you out.&lt;/p&gt; &#xA;&lt;h1&gt;Contributions or Pull Requests&lt;/h1&gt; &#xA;&lt;p&gt;I cannot accept outside pull requests from the community for licensing reasons. To release to Apple&#39;s App Store I have to manage Strongbox under a dual licence. The code here is under the GPL which Apple will not allow in the App Store. As mentioned above the code is provided here for transparency and openness, something I consider a prerequisite for a Password Manager. I need to maintain full ownership of the code so that I can licence to Apple separately, and also any outside/other licencing that might come along, commercial or otherwise. Accepting contributions (no matter how awesome) would involve the contributer signing their life and probably first born child away... There is probably a way to do this but I believe it will involve legally binding documents and other bureaucracies so to keep things simple I&#39;m just going to manage the development myself. Other people&#39;s code sucks anyway, right?&lt;/p&gt; &#xA;&lt;p&gt;Sorry... :(&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;The crypto is mostly from TomCrypt and libsodium. PasswordSafe &amp;amp; KeePass DB parsing/navigation/UI/Cloud interaction is my own work.&lt;/p&gt; &#xA;&lt;p&gt;The official PasswordSafe github repository is here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pwsafe&#34;&gt;https://github.com/pwsafe&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Kudos to Rony Shapiro, Bruce Schneier and all the Password Safe team for their amazing work and the original Password Safe format and application.&lt;/p&gt; &#xA;&lt;p&gt;The official KeePass site is here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://keepass.info/&#34;&gt;https://keepass.info/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Kudos to Dominik Reichl and all the KeePass team for their incredible technical skill, for coming up with a great format, and their seminal KeePass app.&lt;/p&gt; &#xA;&lt;p&gt;Hats off to the KeePassXC team for their fantastic cross platform apps.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://keepassxc.org/&#34;&gt;https://keepassxc.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Another great project is KeeWeb, a fully javascript based client which works cross-platform basically everywhere! Major props to @antelle&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/keeweb/keeweb&#34;&gt;https://github.com/keeweb/keeweb&lt;/a&gt; &lt;a href=&#34;https://keeweb.info/&#34;&gt;https://keeweb.info/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Have I Been Pwned ** The &lt;a href=&#34;https://haveibeenpwned.com/&#34;&gt;&#39;Have I Been Pwned?&#39;&lt;/a&gt; service is provided by Troy Hunt. Strongbox uses the Pwned Passwords API there. Many thanks for some amazing work. Please consider donating to him to keep the service running &lt;a href=&#34;https://haveibeenpwned.com/Donate&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** zxcvbn Password Strength by Dan Wheeler ** You can read more about this library &lt;a href=&#34;https://dropbox.tech/security/zxcvbn-realistic-password-strength-estimation&#34;&gt;here&lt;/a&gt;. Strongbox uses the C port by tsyrogit &lt;a href=&#34;https://github.com/tsyrogit/zxcvbn-c&#34;&gt;here&lt;/a&gt;. The original CoffeeScript version by Dan Wheeler is available &lt;a href=&#34;https://github.com/dropbox/zxcvbn&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I use many different libraries in the app here are just a few:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dropbox-iOS-SDK&lt;/li&gt; &#xA; &lt;li&gt;Google-API-Client&lt;/li&gt; &#xA; &lt;li&gt;SVProgressHUD&lt;/li&gt; &#xA; &lt;li&gt;Reachability&lt;/li&gt; &#xA; &lt;li&gt;ISMessages&lt;/li&gt; &#xA; &lt;li&gt;libsodium&lt;/li&gt; &#xA; &lt;li&gt;DAVKit&lt;/li&gt; &#xA; &lt;li&gt;NMSSH&lt;/li&gt; &#xA; &lt;li&gt;FavIcon&lt;/li&gt; &#xA; &lt;li&gt;KSPasswordField&lt;/li&gt; &#xA; &lt;li&gt;RMStore (&lt;a href=&#34;https://github.com/robotmedia/RMStore&#34;&gt;https://github.com/robotmedia/RMStore&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;GZIP (&lt;a href=&#34;https://github.com/nicklockwood/GZIP&#34;&gt;https://github.com/nicklockwood/GZIP&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TPKeyboardAvoiding (&lt;a href=&#34;https://github.com/michaeltyson/TPKeyboardAvoiding&#34;&gt;https://github.com/michaeltyson/TPKeyboardAvoiding&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;StaticDataTableViewController (&lt;a href=&#34;https://github.com/peterpaulis/StaticDataTableViewController&#34;&gt;https://github.com/peterpaulis/StaticDataTableViewController&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Diceware Wordlists: (&lt;a href=&#34;https://github.com/micahflee/passphrases&#34;&gt;https://github.com/micahflee/passphrases&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;GCDWebServer (&lt;a href=&#34;https://github.com/swisspol/GCDWebServer&#34;&gt;https://github.com/swisspol/GCDWebServer&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;NameDatabases (&lt;a href=&#34;https://github.com/smashew/NameDatabases&#34;&gt;https://github.com/smashew/NameDatabases&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;WSTagsField (&lt;a href=&#34;https://github.com/whitesmith/WSTagsField&#34;&gt;https://github.com/whitesmith/WSTagsField&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Common Passwords List from &lt;a href=&#34;https://github.com/danielmiessler/SecLists&#34;&gt;https://github.com/danielmiessler/SecLists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Finnish &amp;amp; Icelandic diceware word lists - SmirGel&lt;/li&gt; &#xA; &lt;li&gt;Down (Swift Markdown library) - &lt;a href=&#34;https://github.com/johnxnguyen/Down&#34;&gt;https://github.com/johnxnguyen/Down&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OTPAuth - &lt;a href=&#34;https://github.com/hectorm/otpauth&#34;&gt;https://github.com/hectorm/otpauth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SwiftDomainParser - &lt;a href=&#34;https://github.com/Dashlane/SwiftDomainParser&#34;&gt;https://github.com/Dashlane/SwiftDomainParser&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>braintree/braintree-ios-drop-in</title>
    <updated>2023-01-03T01:36:36Z</updated>
    <id>tag:github.com,2023-01-03:/braintree/braintree-ios-drop-in</id>
    <link href="https://github.com/braintree/braintree-ios-drop-in" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Braintree Drop-in for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Braintree iOS Drop-in SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Swift Package Manager compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/BraintreeDropIn&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/BraintreeDropIn.svg?style=flat&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/braintree/braintree-ios-drop-in/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/braintree/braintree-ios-drop-in/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to Braintree&#39;s Drop-in SDK for iOS!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/braintree/braintree-ios-drop-in/master/Images/client-sdk-ios-series-light.png&#34; alt=&#34;Drop-in light theme&#34; title=&#34;Drop-in light theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The Braintree iOS Drop-in SDK permits a deployment target of iOS 12.0 or higher.&lt;/strong&gt; It requires Xcode 12+ and Swift 5.1+.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/braintree/braintree-ios-drop-in/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/braintree/braintree-ios-drop-in/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/braintree/braintree-ios-drop-in/master/#versions&#34;&gt;Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/braintree/braintree-ios-drop-in/master/#demo&#34;&gt;Demo App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/braintree/braintree-ios-drop-in/master/#help&#34;&gt;Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/braintree/braintree-ios-drop-in/master/#feedback&#34;&gt;Feedback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/braintree/braintree-ios-drop-in/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; or &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods&#34;&gt;CocoaPods&lt;/a&gt; to integrate the Braintree Drop-in SDK with your project.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;This feature is only available in v9. v9.Y.0 requires Xcode 12.5+.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To add the &lt;code&gt;BraintreeDropIn&lt;/code&gt; package to your Xcode project, select File &amp;gt; Swift Packages &amp;gt; Add Package Dependency and enter &lt;code&gt;https://github.com/braintree/braintree-ios-drop-in&lt;/code&gt; as the repository URL. Tick the checkbox for &lt;code&gt;BraintreeDropIn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you look at your app target, you will see that the &lt;code&gt;BraintreeDropIn&lt;/code&gt; library is automatically linked as a framework to your app (see General &amp;gt; Frameworks, Libraries, and Embedded Content).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: There is a &lt;a href=&#34;https://forums.swift.org/t/swift-package-binary-framework-issue/41922&#34;&gt;known SPM issue&lt;/a&gt; for apps with app extensions that use Swift Packages with binary dependencies. The issue occurs when uploading a build to App Store Connect. You can read the report on Swift Forums and follow &lt;a href=&#34;https://github.com/braintree/braintree-ios-drop-in/issues/317#issuecomment-815005747&#34;&gt;this workaround&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Add to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;BraintreeDropIn&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://github.com/braintree/braintree-ios-drop-in/raw/master/BraintreeDropIn.podspec&#34;&gt;&lt;code&gt;Podspec&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you are using version 8.x.x of the Braintree Drop-in iOS SDK in Xcode 12, you may see the warning &lt;code&gt;The iOS Simulator deployment target is set to 8.0, but the range of supported deployment target versions is 9.0 to 14.0.99&lt;/code&gt;. This will not prevent your app from compiling. This is a &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/issues/7314&#34;&gt;CocoaPods issue&lt;/a&gt; with a known workaround.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Import BraintreeDropIn&lt;/h3&gt; &#xA;&lt;p&gt;Add the below import statement to any class where you are using BraintreeDropIn.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import BraintreeDropIn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Show Drop-in&lt;/h3&gt; &#xA;&lt;p&gt;Present &lt;code&gt;BTDropInController&lt;/code&gt; to collect the customer&#39;s payment information and receive the &lt;code&gt;nonce&lt;/code&gt; to send to your server. Saved payment methods will appear if you specified a &lt;code&gt;customer_id&lt;/code&gt; when creating your client token.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func showDropIn(clientTokenOrTokenizationKey: String) {&#xA;    let request =  BTDropInRequest()&#xA;    let dropIn = BTDropInController(authorization: clientTokenOrTokenizationKey, request: request)&#xA;    { (controller, result, error) in&#xA;        if (error != nil) {&#xA;            print(&#34;ERROR&#34;)&#xA;        } else if (result?.isCanceled == true) {&#xA;            print(&#34;CANCELED&#34;)&#xA;        } else if let result = result {&#xA;            // Use the BTDropInResult properties to update your UI&#xA;            let selectedPaymentMethodType = result.paymentMethodType&#xA;            let selectedPaymentMethod = result.paymentMethod&#xA;            let selectedPaymentMethodIcon = result.paymentIcon&#xA;            let selectedPaymentMethodDescription = result.paymentDescription&#xA;        }&#xA;        controller.dismiss(animated: true, completion: nil)&#xA;    }&#xA;    self.present(dropIn!, animated: true, completion: nil)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Apple Pay + Drop-in&lt;/h3&gt; &#xA;&lt;p&gt;Apple Pay is enabled by default in Drop-in. Drop-in will show Apple Pay as a payment option as long as it is enabled in the control panel and the device supports it. To opt out, set &lt;code&gt;applePayDisabled = true&lt;/code&gt; on your &lt;code&gt;BTDropInRequest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; If your customer selects Apple Pay as their preferred payment method then &lt;code&gt;result.paymentMethodType == .applePay&lt;/code&gt; and the &lt;code&gt;result.paymentMethod&lt;/code&gt; will be &lt;code&gt;nil&lt;/code&gt;. Selecting Apple Pay does not display the Apple Pay sheet or create a nonce. After you receive the &lt;code&gt;BTDropInResult&lt;/code&gt;, you will need to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Display a &lt;code&gt;PKPaymentButton&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Present a &lt;code&gt;PKPaymentAuthorizationViewController&lt;/code&gt; when the customer taps the button.&lt;/li&gt; &#xA; &lt;li&gt;Tokenize the &lt;code&gt;PKPayment&lt;/code&gt; and send the resulting nonce to your server to create a transaction.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Use &lt;code&gt;BTApplePayClient&lt;/code&gt; to tokenize the customer&#39;s Apple Pay information - &lt;a href=&#34;https://developer.paypal.com/braintree/docs/guides/apple-pay/client-side/ios/v5&#34;&gt;view our official docs for more information&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;3D Secure + Drop-in&lt;/h3&gt; &#xA;&lt;p&gt;The Drop-in supports 3D Secure verification. You must have 3D Secure enabled in the Control Panel. Create a &lt;code&gt;BTThreeDSecureRequest&lt;/code&gt;, setting as many fields on it as possible; the more fields that are set, the less likely it is that a user will be be presented with a challenge. Set the &lt;code&gt;BTThreeDSecureRequest&lt;/code&gt; on &lt;code&gt;BTDropInRequest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = BTDropInRequest()&#xA;&#xA;let threeDSecureRequest = BTThreeDSecureRequest()&#xA;threeDSecureRequest.threeDSecureRequestDelegate = self&#xA;&#xA;threeDSecureRequest.amount = 1.00&#xA;threeDSecureRequest.email = &#34;test@example.com&#34;&#xA;threeDSecureRequest.requested = .version2&#xA;&#xA;let address = BTThreeDSecurePostalAddress()&#xA;address.givenName = &#34;Jill&#34;&#xA;address.surname = &#34;Doe&#34;&#xA;address.phoneNumber = &#34;5551234567&#34;&#xA;address.streetAddress = &#34;555 Smith St&#34;&#xA;address.extendedAddress = &#34;#2&#34;&#xA;address.locality = &#34;Chicago&#34;&#xA;address.region = &#34;IL&#34;&#xA;address.postalCode = &#34;12345&#34;&#xA;address.countryCodeAlpha2 = &#34;US&#34;&#xA;threeDSecureRequest.billingAddress = address&#xA;&#xA;// Optional additional information.&#xA;// For best results, provide as many of these elements as possible.&#xA;let additionalInformation = BTThreeDSecureAdditionalInformation()&#xA;additionalInformation.shippingAddress = address&#xA;threeDSecureRequest.additionalInformation = additionalInformation&#xA;&#xA;request.threeDSecureRequest = threeDSecureRequest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Managing payment methods&lt;/h3&gt; &#xA;&lt;p&gt;By default, if you initialize the Drop-in with a client token generated with a customer ID, Drop-in will add payment methods to that customer within the Braintree Vault. You can optionally allow the deletion of payment methods for that customer by enabling &lt;code&gt;vaultManager&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request =  BTDropInRequest()&#xA;request.vaultManager = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fetch most recent payment method&lt;/h3&gt; &#xA;&lt;p&gt;If your user already has an existing payment method, you may not need to show the Drop-in UI. You can check if they have an existing payment method using &lt;code&gt;BTDropInResult.mostRecentPaymentMethod&lt;/code&gt;. Note that you must use a client token that was created with a &lt;code&gt;customer_id&lt;/code&gt;. &lt;code&gt;BTDropInResult&lt;/code&gt; makes it easy to get a description and icon of the payment method.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/braintree/braintree-ios-drop-in/master/Images/saved-single-payment-method.png&#34; alt=&#34;Example payment method icon and description&#34; title=&#34;Example payment method icon and description&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;BTDropInResult.mostRecentPaymentMethod(forClientToken: authorization) { result, error in&#xA;  guard let result = result, error == nil else {&#xA;    // either an error occurred or the customer doesn&#39;t have any vaulted payment methods&#xA;    return&#xA;  }&#xA;&#xA;  if result.paymentOptionType == .applePay {&#xA;    // Apple Pay is the most recently selected option&#xA;    // Note that result.paymentMethod will be nil in this case; display Apple Pay button and tokenize using `BTApplePayClient`&#xA;  }&#xA;&#xA;  // Update your UI&#xA;  let type = result.paymentMethodType&#xA;  let icon = result.paymentIcon&#xA;  let description = result.paymentDescription&#xA;&#xA;  // Use the payment method to transact&#xA;  let paymentMethod = result.paymentMethod&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Localization&lt;/h3&gt; &#xA;&lt;p&gt;Drop-in is currently localized for &lt;a href=&#34;https://github.com/braintree/braintree-ios-drop-in/tree/master/Sources/BraintreeDropIn/Resources&#34;&gt;22 languages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Color Schemes&lt;/h3&gt; &#xA;&lt;p&gt;Drop-in is fully customizable, but we also provide &lt;code&gt;Light&lt;/code&gt;, &lt;code&gt;Dark&lt;/code&gt; and &lt;code&gt;Dynamic&lt;/code&gt; color schemes. The dynamic color scheme will switch between light and dark based on whether the device is in light or dark mode. The &lt;code&gt;Dynamic&lt;/code&gt; scheme is only available in iOS 13 or higher. Drop-in will use the &lt;code&gt;Light&lt;/code&gt; color scheme by default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let uiCustomization = BTDropInUICustomization(colorScheme: .dark)&#xA;&#xA;let dropInRequest = BTDropInRequest()&#xA;dropInRequest.uiCustomization = uiCustomization&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/braintree/braintree-ios-drop-in/master/Images/client-sdk-ios-series-dark.png&#34; alt=&#34;Drop-in dark theme&#34; title=&#34;Drop-in dark theme&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;BTDropInUICustomization&lt;/code&gt; to customize the appearance of Drop-in.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let uiCustomization = BTDropInUICustomization(colorScheme: .dynamic)&#xA;uiCustomization.fontFamily = &#34;Helvetica&#34;&#xA;uiCustomization.boldFontFamily = &#34;Helvetica Bold&#34;&#xA;&#xA;let dropInRequest = BTDropInRequest()&#xA;dropInRequest.uiCustomization = uiCustomization&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accessibility&lt;/h3&gt; &#xA;&lt;h4&gt;Dynamic Type&lt;/h4&gt; &#xA;&lt;p&gt;Dynamic type is enabled by default for both system and custom fonts. We strongly encourage you to leave this feature on, but if you wish to disable it, you may do so by setting &lt;code&gt;disableDynamicType&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; on &lt;code&gt;BTDropInUICustomization&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let uiCustomization = BTDropInUICustomization(colorScheme: .light)&#xA;uiCustomization.disableDynamicType = true&#xA;&#xA;let dropInRequest = BTDropInRequest()&#xA;dropInRequest.uiCustomization = uiCustomization&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;VoiceOver&lt;/h4&gt; &#xA;&lt;p&gt;Drop-in UI elements support VoiceOver.&lt;/p&gt; &#xA;&lt;h4&gt;SwiftUI&lt;/h4&gt; &#xA;&lt;p&gt;Drop-in does not officially support SwiftUI at this time.&lt;/p&gt; &#xA;&lt;h3&gt;More Information&lt;/h3&gt; &#xA;&lt;p&gt;Start with &lt;a href=&#34;https://developer.paypal.com/braintree/docs/start/hello-client/ios/v5&#34;&gt;&lt;strong&gt;&#39;Hello, Client!&#39;&lt;/strong&gt;&lt;/a&gt; for instructions on basic setup and usage.&lt;/p&gt; &#xA;&lt;p&gt;Also see our &lt;a href=&#34;https://braintree.github.io/braintree-ios-drop-in/current/&#34;&gt;&lt;strong&gt;reference documentation&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;This SDK abides by our Client SDK Deprecation Policy. For more information on the potential statuses of an SDK check our &lt;a href=&#34;https://developer.paypal.com/braintree/docs/guides/client-sdk/deprecation-policy/ios/v5&#34;&gt;developer docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Major version number&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Released&lt;/th&gt; &#xA;   &lt;th&gt;Deprecated&lt;/th&gt; &#xA;   &lt;th&gt;Unsupported&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9.x.x&lt;/td&gt; &#xA;   &lt;td&gt;Active&lt;/td&gt; &#xA;   &lt;td&gt;April 2021&lt;/td&gt; &#xA;   &lt;td&gt;TBA&lt;/td&gt; &#xA;   &lt;td&gt;TBA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8.x.x&lt;/td&gt; &#xA;   &lt;td&gt;Inactive&lt;/td&gt; &#xA;   &lt;td&gt;Februrary 2020&lt;/td&gt; &#xA;   &lt;td&gt;April 2022&lt;/td&gt; &#xA;   &lt;td&gt;TBA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7.x.x&lt;/td&gt; &#xA;   &lt;td&gt;Deprecated&lt;/td&gt; &#xA;   &lt;td&gt;December 2018&lt;/td&gt; &#xA;   &lt;td&gt;April 2021&lt;/td&gt; &#xA;   &lt;td&gt;April 2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Versions 6 and below are unsupported.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;A demo app is included in this project. Running the demo app requires Xcode 13+. Open BraintreeDropIn.xcworkspace and run the Demo scheme to view it.&lt;/p&gt; &#xA;&lt;p&gt;The demo app uses Swift Package Manager to fetch dependencies. Xcode will download dependencies automatically when you open the workspace. Deleting derived data will delete the dependencies. Go to &lt;strong&gt;File -&amp;gt; Swift Packages -&amp;gt; Resolve Package Versions&lt;/strong&gt; to re-download them.&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the headers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.paypal.com/braintree/docs/start/hello-client/ios/v5&#34;&gt;Read the docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Find a bug? &lt;a href=&#34;https://github.com/braintree/braintree-ios-drop-in/issues&#34;&gt;Open an issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Want to contribute? &lt;a href=&#34;https://help.github.com/articles/creating-a-pull-request&#34;&gt;submit a pull request&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;The Braintree iOS Drop-in SDK is in active development, we welcome your feedback!&lt;/p&gt; &#xA;&lt;p&gt;Here are a few ways to get in touch:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/braintree/braintree-ios-drop-in/issues&#34;&gt;GitHub Issues&lt;/a&gt; - For generally applicable issues and feedback&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.braintreepayments.com&#34;&gt;Braintree Support&lt;/a&gt; - For personal support at any phase of integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Braintree iOS Drop-in SDK is open source and available under the MIT license. See the &lt;a href=&#34;https://github.com/braintree/braintree-ios-drop-in/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>