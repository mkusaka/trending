<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-17T01:52:08Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>peter-iakovlev/Telegram</title>
    <updated>2022-08-17T01:52:08Z</updated>
    <id>tag:github.com,2022-08-17:/peter-iakovlev/Telegram</id>
    <link href="https://github.com/peter-iakovlev/Telegram" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Telegram Messenger for iOS&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>tonymillion/Reachability</title>
    <updated>2022-08-17T01:52:08Z</updated>
    <id>tag:github.com,2022-08-17:/tonymillion/Reachability</id>
    <link href="https://github.com/tonymillion/Reachability" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ARC and GCD Compatible Reachability Class for iOS and MacOS. Drop in replacement for Apple Reachability&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.versioneye.com/objective-c/reachability/references&#34;&gt;&lt;img src=&#34;https://www.versioneye.com/objective-c/reachability/reference_badge.svg?style=flat&#34; alt=&#34;Reference Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;strong&gt;WARNING&lt;/strong&gt; there have been reports of apps being rejected when Reachability is used in a framework. The only solution to this so far is to rename the class.&lt;/h1&gt; &#xA;&lt;h1&gt;Reachability&lt;/h1&gt; &#xA;&lt;p&gt;This is a drop-in replacement for Apple&#39;s &lt;code&gt;Reachability&lt;/code&gt; class. It is ARC-compatible, and it uses the new GCD methods to notify of network interface changes.&lt;/p&gt; &#xA;&lt;p&gt;In addition to the standard &lt;code&gt;NSNotification&lt;/code&gt;, it supports the use of blocks for when the network becomes reachable and unreachable.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can specify whether a WWAN connection is considered &#34;reachable&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;DO NOT OPEN BUGS UNTIL YOU HAVE TESTED ON DEVICE&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;BEFORE YOU OPEN A BUG ABOUT iOS6/iOS5 build errors, use Tag 3.2 or 3.1 as they support assign types&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Once you have added the &lt;code&gt;.h/m&lt;/code&gt; files to your project, simply:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to the &lt;code&gt;Project-&amp;gt;TARGETS-&amp;gt;Build Phases-&amp;gt;Link Binary With Libraries&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Press the plus in the lower left of the list.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;SystemConfiguration.framework&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Boom, you&#39;re done.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Block Example&lt;/h3&gt; &#xA;&lt;p&gt;This sample uses blocks to notify when the interface state has changed. The blocks will be called on a &lt;strong&gt;BACKGROUND THREAD&lt;/strong&gt;, so you need to dispatch UI updates onto the main thread.&lt;/p&gt; &#xA;&lt;h4&gt;In Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Allocate a reachability object&#xA;Reachability* reach = [Reachability reachabilityWithHostname:@&#34;www.google.com&#34;];&#xA;&#xA;// Set the blocks&#xA;reach.reachableBlock = ^(Reachability*reach)&#xA;{&#xA;    // keep in mind this is called on a background thread&#xA;    // and if you are updating the UI it needs to happen&#xA;    // on the main thread, like this:&#xA;&#xA;    dispatch_async(dispatch_get_main_queue(), ^{&#xA;        NSLog(@&#34;REACHABLE!&#34;);&#xA;    });&#xA;};&#xA;&#xA;reach.unreachableBlock = ^(Reachability*reach)&#xA;{&#xA;    NSLog(@&#34;UNREACHABLE!&#34;);&#xA;};&#xA;&#xA;// Start the notifier, which will cause the reachability object to retain itself!&#xA;[reach startNotifier];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;In Swift 3&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Reachability&#xA;&#xA;var reach: Reachability?&#xA;&#xA;func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&amp;gt; Bool {&#xA;        // Allocate a reachability object&#xA;        self.reach = Reachability.forInternetConnection()&#xA;        &#xA;        // Set the blocks&#xA;        self.reach!.reachableBlock = {&#xA;            (reach: Reachability?) -&amp;gt; Void in&#xA;            &#xA;            // keep in mind this is called on a background thread&#xA;            // and if you are updating the UI it needs to happen&#xA;            // on the main thread, like this:&#xA;            DispatchQueue.main.async {&#xA;                print(&#34;REACHABLE!&#34;)&#xA;            }&#xA;        }&#xA;        &#xA;        self.reach!.unreachableBlock = {&#xA;            (reach: Reachability?) -&amp;gt; Void in&#xA;            print(&#34;UNREACHABLE!&#34;)&#xA;        }&#xA;        &#xA;        self.reach!.startNotifier()&#xA;    &#xA;        return true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;NSNotification&lt;/code&gt; Example&lt;/h3&gt; &#xA;&lt;p&gt;This sample will use &lt;code&gt;NSNotification&lt;/code&gt;s to notify when the interface has changed. They will be delivered on the &lt;strong&gt;MAIN THREAD&lt;/strong&gt;, so you &lt;em&gt;can&lt;/em&gt; do UI updates from within the function.&lt;/p&gt; &#xA;&lt;p&gt;In addition, it asks the &lt;code&gt;Reachability&lt;/code&gt; object to consider the WWAN (3G/EDGE/CDMA) as a non-reachable connection (you might use this if you are writing a video streaming app, for example, to save the user&#39;s data plan).&lt;/p&gt; &#xA;&lt;h4&gt;In Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Allocate a reachability object&#xA;Reachability* reach = [Reachability reachabilityWithHostname:@&#34;www.google.com&#34;];&#xA;&#xA;// Tell the reachability that we DON&#39;T want to be reachable on 3G/EDGE/CDMA&#xA;reach.reachableOnWWAN = NO;&#xA;&#xA;// Here we set up a NSNotification observer. The Reachability that caused the notification&#xA;// is passed in the object parameter&#xA;[[NSNotificationCenter defaultCenter] addObserver:self&#xA;                                         selector:@selector(reachabilityChanged:)&#xA;                                             name:kReachabilityChangedNotification&#xA;                                           object:nil];&#xA;&#xA;[reach startNotifier];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;In Swift 3&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Reachability&#xA;&#xA;var reach: Reachability?&#xA;&#xA;func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&amp;gt; Bool {&#xA;    // Allocate a reachability object&#xA;    self.reach = Reachability.forInternetConnection()&#xA;    &#xA;    // Tell the reachability that we DON&#39;T want to be reachable on 3G/EDGE/CDMA&#xA;    self.reach!.reachableOnWWAN = false&#xA;    &#xA;    // Here we set up a NSNotification observer. The Reachability that caused the notification&#xA;    // is passed in the object parameter&#xA;    NotificationCenter.default.addObserver(&#xA;        self,&#xA;        selector: #selector(reachabilityChanged),&#xA;        name: NSNotification.Name.reachabilityChanged,&#xA;        object: nil&#xA;    )&#xA;    &#xA;    self.reach!.startNotifier()&#xA;    &#xA;    return true&#xA;}&#xA;        &#xA;func reachabilityChanged(notification: NSNotification) {&#xA;    if self.reach!.isReachableViaWiFi() || self.reach!.isReachableViaWWAN() {&#xA;        print(&#34;Service available!!!&#34;)&#xA;    } else {&#xA;        print(&#34;No service available!!!&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tell the world&lt;/h2&gt; &#xA;&lt;p&gt;Head over to &lt;a href=&#34;https://github.com/tonymillion/Reachability/wiki/Projects-using-Reachability&#34;&gt;Projects using Reachability&lt;/a&gt; and add your project for &#34;Maximum Wins!&#34;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>reproio/repro-ios-sdk</title>
    <updated>2022-08-17T01:52:08Z</updated>
    <id>tag:github.com,2022-08-17:/reproio/repro-ios-sdk</id>
    <link href="https://github.com/reproio/repro-ios-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repro iOS SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;repro-ios-sdk&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/Repro&#34;&gt;&lt;img src=&#34;http://cocoapod-badges.herokuapp.com/v/Repro/badge.png&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/Repro&#34;&gt;&lt;img src=&#34;http://cocoapod-badges.herokuapp.com/p/Repro/badge.png&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repro.io&#34;&gt;Repro&lt;/a&gt; is a mobile analytics tool that lets you have much deeper understanding of your users.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.repro.io/en/dev/sdk/getstarted/ios.html&#34;&gt;EN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.repro.io/ja/dev/sdk/getstarted/ios.html&#34;&gt;JA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.repro.io/en/releases/sdk/ios/releases.html&#34;&gt;EN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.repro.io/ja/releases/sdk/ios/releases.html&#34;&gt;JA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;http://docs.repro.io&#34;&gt;the documentation&lt;/a&gt; for further information&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Repro, Inc.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;(c) 2016 Repro Inc.&lt;/p&gt;</summary>
  </entry>
</feed>