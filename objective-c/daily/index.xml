<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-04T01:36:30Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mwaterfall/MWPhotoBrowser</title>
    <updated>2022-10-04T01:36:30Z</updated>
    <id>tag:github.com,2022-10-04:/mwaterfall/MWPhotoBrowser</id>
    <link href="https://github.com/mwaterfall/MWPhotoBrowser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple iOS photo and video browser with grid view, captions and selections.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MWPhotoBrowser&lt;/h1&gt; &#xA;&lt;!--[![CI Status](http://img.shields.io/travis/Michael Waterfall/MWPhotoBrowser.svg?style=flat)](https://travis-ci.org/Michael Waterfall/MWPhotoBrowser)--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/MWPhotoBrowser&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/MWPhotoBrowser.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/MWPhotoBrowser&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/MWPhotoBrowser.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/MWPhotoBrowser&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/MWPhotoBrowser.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flattr.com/submit/auto?user_id=mwaterfall&amp;amp;url=https://github.com/mwaterfall/MWPhotoBrowser&amp;amp;title=MWPhotoBrowser&amp;amp;language=&amp;amp;tags=github&amp;amp;category=software&#34;&gt;&lt;img src=&#34;http://api.flattr.com/button/flattr-badge-large.png&#34; alt=&#34;Flattr this git repo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;A simple iOS photo and video browser with optional grid view, captions and selections.&lt;/h2&gt; &#xA;&lt;p&gt;MWPhotoBrowser can display one or more images or videos by providing either &lt;code&gt;UIImage&lt;/code&gt; objects, &lt;code&gt;PHAsset&lt;/code&gt; objects, or URLs to library assets, web images/videos or local files. The photo browser handles the downloading and caching of photos from the web seamlessly. Photos can be zoomed and panned, and optional (customisable) captions can be displayed.&lt;/p&gt; &#xA;&lt;p&gt;The browser can also be used to allow the user to select one or more photos using either the grid or main image view.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.github.com/mwaterfall/MWPhotoBrowser/master/Screenshots/MWPhotoBrowser1.png&#34;&gt;&lt;img src=&#34;https://raw.github.com/mwaterfall/MWPhotoBrowser/master/Screenshots/MWPhotoBrowser1t.png&#34; alt=&#34;Alt&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.github.com/mwaterfall/MWPhotoBrowser/master/Screenshots/MWPhotoBrowser2.png&#34;&gt;&lt;img src=&#34;https://raw.github.com/mwaterfall/MWPhotoBrowser/master/Screenshots/MWPhotoBrowser2t.png&#34; alt=&#34;Alt&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.github.com/mwaterfall/MWPhotoBrowser/master/Screenshots/MWPhotoBrowser3.png&#34;&gt;&lt;img src=&#34;https://raw.github.com/mwaterfall/MWPhotoBrowser/master/Screenshots/MWPhotoBrowser3t.png&#34; alt=&#34;Alt&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.github.com/mwaterfall/MWPhotoBrowser/master/Screenshots/MWPhotoBrowser4.png&#34;&gt;&lt;img src=&#34;https://raw.github.com/mwaterfall/MWPhotoBrowser/master/Screenshots/MWPhotoBrowser4t.png&#34; alt=&#34;Alt&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.github.com/mwaterfall/MWPhotoBrowser/master/Screenshots/MWPhotoBrowser5.png&#34;&gt;&lt;img src=&#34;https://raw.github.com/mwaterfall/MWPhotoBrowser/master/Screenshots/MWPhotoBrowser5t.png&#34; alt=&#34;Alt&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.github.com/mwaterfall/MWPhotoBrowser/master/Screenshots/MWPhotoBrowser6.png&#34;&gt;&lt;img src=&#34;https://raw.github.com/mwaterfall/MWPhotoBrowser/master/Screenshots/MWPhotoBrowser6t.png&#34; alt=&#34;Alt&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Works on iOS 7+. All strings are localisable so they can be used in apps that support multiple languages.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;MWPhotoBrowser is designed to be presented within a navigation controller. Simply set the delegate (which must conform to &lt;code&gt;MWPhotoBrowserDelegate&lt;/code&gt;) and implement the 2 required delegate methods to provide the photo browser with the data in the form of &lt;code&gt;MWPhoto&lt;/code&gt; objects. You can create an &lt;code&gt;MWPhoto&lt;/code&gt; object by providing a &lt;code&gt;UIImage&lt;/code&gt; object, &lt;code&gt;PHAsset&lt;/code&gt; object, or a URL containing the path to a file, an image online or an asset from the asset library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MWPhoto&lt;/code&gt; objects handle caching, file management, downloading of web images, and various optimisations for you. If however you would like to use your own data model to represent photos you can simply ensure your model conforms to the &lt;code&gt;MWPhoto&lt;/code&gt; protocol. You can then handle the management of caching, downloads, etc, yourself. More information on this can be found in &lt;code&gt;MWPhotoProtocol.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the code snippet below for an example of how to implement the photo browser. There is also a simple demo app within the project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;// Create array of MWPhoto objects&#xA;self.photos = [NSMutableArray array];&#xA;&#xA;// Add photos&#xA;[photos addObject:[MWPhoto photoWithURL:[NSURL fileURLWithPath:[[NSBundle mainBundle] pathForResource:@&#34;photo2l&#34; ofType:@&#34;jpg&#34;]]]];&#xA;[photos addObject:[MWPhoto photoWithURL:[NSURL URLWithString:@&#34;http://farm4.static.flickr.com/3629/3339128908_7aecabc34b.jpg&#34;]]];&#xA;[photos addObject:[MWPhoto photoWithURL:[NSURL URLWithString:@&#34;http://farm4.static.flickr.com/3590/3329114220_5fbc5bc92b.jpg&#34;]]];&#xA;&#xA;// Add video with poster photo&#xA;MWPhoto *video = [MWPhoto photoWithURL:[NSURL URLWithString:@&#34;https://scontent.cdninstagram.com/hphotos-xpt1/t51.2885-15/e15/11192696_824079697688618_1761661_n.jpg&#34;]];&#xA;video.videoURL = [[NSURL alloc] initWithString:@&#34;https://scontent.cdninstagram.com/hphotos-xpa1/t50.2886-16/11200303_1440130956287424_1714699187_n.mp4&#34;];&#xA;[photos addObject:video];&#xA;&#xA;// Create browser (must be done each time photo browser is&#xA;// displayed. Photo browser objects cannot be re-used)&#xA;MWPhotoBrowser *browser = [[MWPhotoBrowser alloc] initWithDelegate:self];&#xA;&#xA;// Set options&#xA;browser.displayActionButton = YES; // Show action button to allow sharing, copying, etc (defaults to YES)&#xA;browser.displayNavArrows = NO; // Whether to display left and right nav arrows on toolbar (defaults to NO)&#xA;browser.displaySelectionButtons = NO; // Whether selection buttons are shown on each image (defaults to NO)&#xA;browser.zoomPhotosToFill = YES; // Images that almost fill the screen will be initially zoomed to fill (defaults to YES)&#xA;browser.alwaysShowControls = NO; // Allows to control whether the bars and controls are always visible or whether they fade away to show the photo full (defaults to NO)&#xA;browser.enableGrid = YES; // Whether to allow the viewing of all the photo thumbnails on a grid (defaults to YES)&#xA;browser.startOnGrid = NO; // Whether to start on the grid of thumbnails instead of the first photo (defaults to NO)&#xA;browser.autoPlayOnAppear = NO; // Auto-play first video&#xA;&#xA;// Customise selection images to change colours if required&#xA;browser.customImageSelectedIconName = @&#34;ImageSelected.png&#34;;&#xA;browser.customImageSelectedSmallIconName = @&#34;ImageSelectedSmall.png&#34;;&#xA;&#xA;// Optionally set the current visible photo before displaying&#xA;[browser setCurrentPhotoIndex:1];&#xA;&#xA;// Present&#xA;[self.navigationController pushViewController:browser animated:YES];&#xA;&#xA;// Manipulate&#xA;[browser showNextPhotoAnimated:YES];&#xA;[browser showPreviousPhotoAnimated:YES];&#xA;[browser setCurrentPhotoIndex:10];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then respond to the required delegate methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;- (NSUInteger)numberOfPhotosInPhotoBrowser:(MWPhotoBrowser *)photoBrowser {&#xA;    return self.photos.count;&#xA;}&#xA;&#xA;- (id &amp;lt;MWPhoto&amp;gt;)photoBrowser:(MWPhotoBrowser *)photoBrowser photoAtIndex:(NSUInteger)index {&#xA;    if (index &amp;lt; self.photos.count) {&#xA;        return [self.photos objectAtIndex:index];&#xA;    }&#xA;    return nil;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can present the browser modally simply by wrapping it in a new navigation controller and presenting that. The demo app allows you to toggle between the two presentation types.&lt;/p&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;p&gt;You can represent videos in MWPhoto objects by providing a standard MWPhoto image object with a &lt;code&gt;videoURL&lt;/code&gt;. You can also use a &lt;code&gt;PHAsset&lt;/code&gt; object or a URL to an assets library video.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;&#xA;// Video with URL including poster photo&#xA;MWPhoto *video = [MWPhoto photoWithURL:[NSURL URLWithString:@&#34;https://scontent.cdninstagram.com/hphotos-xpt1/t51.2885-15/e15/11192696_824079697688618_1761661_n.jpg&#34;]];&#xA;video.videoURL = [NSURL URLWithString:@&#34;https://scontent.cdninstagram.com/hphotos-xpa1/t50.2886-16/11200303_1440130956287424_1714699187_n.mp4&#34;];&#xA;&#xA;// Video with PHAsset&#xA;MWPhoto *video = [MWPhoto photoWithAsset:asset targetSize:[UIScreen mainScreen].bounds.size]; // Example sizing&#xA;&#xA;// Video with ALAsset&#xA;MWPhoto *video = [MWPhoto photoWithURL:asset.defaultRepresentation.url];&#xA;if ([asset valueForProperty:ALAssetPropertyType] == ALAssetTypeVideo) {&#xA;    photo.videoURL = asset.defaultRepresentation.url;&#xA;}&#xA;&#xA;// Video with no poster photo&#xA;MWPhoto *video = [MWPhoto videoWithURL:[NSURL URLWithString:@&#34;https://scontent.cdninstagram.com/hphotos-xfa1/t50.2886-16/11237510_945154435524423_2137519922_n.mp4&#34;]];&#xA;&#xA;// Video grid thumbnail&#xA;MWPhoto *videoThumb = [MWPhoto photoWithURL:[NSURL URLWithString:@&#34;https://scontent.cdninstagram.com/hphotos-xaf1/t51.2885-15/s150x150/e15/11240463_963135443745570_1519872157_n.jpg&#34;]];&#xA;videoThumb.isVideo = YES;&#xA;&#xA;// Video grid thumbnail for video with no poster photo&#xA;MWPhoto *videoThumb = [MWPhoto new];&#xA;videoThumb.isVideo = YES;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Grid&lt;/h3&gt; &#xA;&lt;p&gt;In order to properly show the grid of thumbnails, you must ensure the property &lt;code&gt;enableGrid&lt;/code&gt; is set to &lt;code&gt;YES&lt;/code&gt;, and implement the following delegate method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;- (id &amp;lt;MWPhoto&amp;gt;)photoBrowser:(MWPhotoBrowser *)photoBrowser thumbPhotoAtIndex:(NSUInteger)index;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The photo browser can also start on the grid by enabling the &lt;code&gt;startOnGrid&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;h3&gt;Actions&lt;/h3&gt; &#xA;&lt;p&gt;By default, if the action button is visible then the image (and caption if it exists) are sent to a UIActivityViewController.&lt;/p&gt; &#xA;&lt;p&gt;You can provide a custom action by implementing the following delegate method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;- (void)photoBrowser:(MWPhotoBrowser *)photoBrowser actionButtonPressedForPhotoAtIndex:(NSUInteger)index {&#xA;    // Do your thing!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Photo Captions&lt;/h3&gt; &#xA;&lt;p&gt;Photo captions can be displayed simply by setting the &lt;code&gt;caption&lt;/code&gt; property on specific photos:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;MWPhoto *photo = [MWPhoto photoWithURL:[NSURL URLWithString:@&#34;http://farm4.static.flickr.com/3629/3339128908_7aecabc34b.jpg&#34;]];&#xA;photo.caption = @&#34;Campervan&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No caption will be displayed if the caption property is not set.&lt;/p&gt; &#xA;&lt;h4&gt;Custom Captions&lt;/h4&gt; &#xA;&lt;p&gt;By default, the caption is a simple black transparent view with a label displaying the photo&#39;s caption in white. If you want to implement your own caption view, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Optionally use a subclass of &lt;code&gt;MWPhoto&lt;/code&gt; for your photos so you can store more data than a simple caption string.&lt;/li&gt; &#xA; &lt;li&gt;Subclass &lt;code&gt;MWCaptionView&lt;/code&gt; and override &lt;code&gt;-setupCaption&lt;/code&gt; and &lt;code&gt;-sizeThatFits:&lt;/code&gt; (and any other UIView methods you see fit) to layout your own view and set it&#39;s size. More information on this can be found in &lt;code&gt;MWCaptionView.h&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Implement the &lt;code&gt;-photoBrowser:captionViewForPhotoAtIndex:&lt;/code&gt; MWPhotoBrowser delegate method (shown below).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example delegate method for custom caption view:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;- (MWCaptionView *)photoBrowser:(MWPhotoBrowser *)photoBrowser captionViewForPhotoAtIndex:(NSUInteger)index {&#xA;    MWPhoto *photo = [self.photos objectAtIndex:index];&#xA;    MyMWCaptionViewSubclass *captionView = [[MyMWCaptionViewSubclass alloc] initWithPhoto:photo];&#xA;    return captionView;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Selections&lt;/h4&gt; &#xA;&lt;p&gt;The photo browser can display check boxes allowing the user to select one or more of the photos. To use this feature, simply enable the &lt;code&gt;displaySelectionButtons&lt;/code&gt; property, and implement the following delegate methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;- (BOOL)photoBrowser:(MWPhotoBrowser *)photoBrowser isPhotoSelectedAtIndex:(NSUInteger)index {&#xA;    return [[_selections objectAtIndex:index] boolValue];&#xA;}&#xA;&#xA;- (void)photoBrowser:(MWPhotoBrowser *)photoBrowser photoAtIndex:(NSUInteger)index selectedChanged:(BOOL)selected {&#xA;    [_selections replaceObjectAtIndex:index withObject:[NSNumber numberWithBool:selected]];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;MWPhotoBrowser is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#34;MWPhotoBrowser&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt; &#xA;&lt;p&gt;Then import the photo browser into your source files (or into your bridging header if you&#39;re using with Swift and not using frameworks with Cocoapods):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;#import &#34;MWPhotoBrowser.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using Swift and frameworks, then you can just import the browser into your Swift source file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import MWPhotoBrowser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Michael Waterfall, &lt;a href=&#34;mailto:michael@d3i.com&#34;&gt;michael@d3i.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MWPhotoBrowser is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;Demo photos kindly provided by &lt;a href=&#34;http://twitter.com/oliverwaters&#34;&gt;Oliver Waters&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lokalise/lokalise-ios-framework</title>
    <updated>2022-10-04T01:36:30Z</updated>
    <id>tag:github.com,2022-10-04:/lokalise/lokalise-ios-framework</id>
    <link href="https://github.com/lokalise/lokalise-ios-framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lokalise iOS SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lokalise iOS SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://lokalise.com&#34;&gt;Lokalise&lt;/a&gt;&lt;/strong&gt; lets you manage keys and translations of your app, game, or website – either on your own or with a team of collaborators. Built for developers, Lokalise offers neat features including inline suggestions, project chat, export webhooks, and an API, so you can easily integrate with the workflow of your project.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Over-the-air (OTA) localization&lt;/li&gt; &#xA; &lt;li&gt;Instant UI language switching&lt;/li&gt; &#xA; &lt;li&gt;Test localizations (using prerelease bundles)&lt;/li&gt; &#xA; &lt;li&gt;NSBundle swizzling for transparent integration&lt;/li&gt; &#xA; &lt;li&gt;XIB and storyboard localization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12+&lt;/li&gt; &#xA; &lt;li&gt;iOS 9.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;To install using &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;a. Add through &lt;strong&gt;File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency...&lt;/strong&gt; action in Xcode. Use &lt;code&gt;https://github.com/lokalise/lokalise-ios-framework.git&lt;/code&gt; repository URL and the &lt;strong&gt;Version: Up to Next Minor&lt;/strong&gt; starting with &lt;code&gt;0.10.2&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;b. Add this line to &lt;code&gt;dependencies&lt;/code&gt; section of your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.package(name: &#34;Lokalise&#34;, url: &#34;https://github.com/lokalise/lokalise-ios-framework.git&#34;, .upToNextMinor(from: &#34;0.10.2&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;To install using &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add these line to your Podfile&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;use_frameworks!&#xA;pod &#39;Lokalise&#39;, &#39;~&amp;gt; 0.10.2&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;To install using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add this line to your Cartfile&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;binary &#34;https://raw.githubusercontent.com/lokalise/lokalise-ios-framework/master/LokaliseCarthage.json&#34; ~&amp;gt; 0.10.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Link &lt;strong&gt;c++ (libc++.tbd)&lt;/strong&gt; and &lt;strong&gt;z (libz.tbd)&lt;/strong&gt; libraries to your targets.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Manual &lt;em&gt;(.framework)&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To install manually:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;strong&gt;Lokalise.framework&lt;/strong&gt; from this repository and add it to your project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add it to your targets (embed and link).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Link &lt;strong&gt;c++ (libc++.tbd)&lt;/strong&gt; and &lt;strong&gt;z (libz.tbd)&lt;/strong&gt; libraries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;strong&gt;Run Script&lt;/strong&gt; to your &lt;strong&gt;Build Phases&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash &#34;${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}/Lokalise.framework/strip-frameworks.sh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual &lt;em&gt;(.xcframework)&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To install &lt;strong&gt;.xcframework&lt;/strong&gt; manualy:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the &lt;a href=&#34;https://github.com/lokalise/lokalise-ios-framework/releases/download/0.10.2/Lokalise.xcframework.0.10.2.zip&#34;&gt;Zip archive&lt;/a&gt; containing the &lt;strong&gt;.xcframework&lt;/strong&gt;, extract it, and add it to your project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add it to your targets (embed and link).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Read &lt;strong&gt;&lt;a href=&#34;https://docs.lokalise.com/en/articles/1400656-lokalise-ios-sdk&#34;&gt;documentation page&lt;/a&gt;&lt;/strong&gt; for detailed integration guide.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Please contact us through our live support chat for support and bug reports. It is available at every page on &lt;strong&gt;&lt;a href=&#34;https://lokalise.com&#34;&gt;lokalise.com&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mutualmobile/MMWormhole</title>
    <updated>2022-10-04T01:36:30Z</updated>
    <id>tag:github.com,2022-10-04:/mutualmobile/MMWormhole</id>
    <link href="https://github.com/mutualmobile/MMWormhole" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Message passing between iOS apps and extensions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MMWormhole&lt;/h1&gt; &#xA;&lt;p&gt;MMWormhole creates a bridge between an iOS or OS X extension and its containing application. The wormhole is meant to be used to pass data or commands back and forth between the two locations. Messages are archived to files which are written to the application&#39;s shared App Group. The effect closely resembles interprocess communication between the app and the extension, though true interprocess communication does not exist between extensions and containing apps.&lt;/p&gt; &#xA;&lt;p&gt;The wormhole also supports CFNotificationCenter Darwin Notifications in an effort to support realtime change notifications. When a message is passed to the wormhole, interested parties can listen and be notified of these changes on either side of the wormhole. The effect is nearly instant updates on either side when a message is sent through the wormhole.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mutualmobile/MMWormhole/master/MMWormhole.gif&#34; ) alt=&#34;Example App&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[self.wormhole passMessageObject:@{@&#34;buttonNumber&#34; : @(1)} identifier:@&#34;button&#34;];&#xA;&#xA;[self.wormhole listenForMessageWithIdentifier:@&#34;button&#34; &#xA;  listener:^(id messageObject) {&#xA;    self.numberLabel.text = [messageObject[@&#34;buttonNumber&#34;] stringValue];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install MMWormhole via CocoaPods or by downloading the Source files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html&#34;&gt;Configure your App and Extension to support App Groups&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Begin using MMWormhole to pass messages between your App and Extension&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;The MMWormhole Example app will only work with your shared App Group identifiers and Entitlements and is meant purely for reference&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installing MMWormhole&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/v/MMWormhole/badge.png&#34;&gt;&lt;br&gt; You can install Wormhole in your project by using &lt;a href=&#34;https://github.com/cocoapods/cocoapods&#34;&gt;CocoaPods&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Ruby&#34;&gt;pod &#39;MMWormhole&#39;, &#39;~&amp;gt; 2.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;br&gt; MMWormhole also supports Carthage.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;MMWormhole is designed to make it easy to share very basic information and commands between an extension and it&#39;s containing application. The wormhole should remain stable whether the containing app is running or not, but notifications will only be triggered in the containing app if the app is awake in the background. This makes MMWormhole ideal for cases where the containing app is already running via some form of background modes.&lt;/p&gt; &#xA;&lt;p&gt;A good way to think of the wormhole is a collection of shared mailboxes. An identifier is essentially a unique mailbox you can send messages to. You know where a message will be delivered to because of the identifier you associate with it, but not necessarily when the message will be picked up by the recipient. If the app or extension are in the background, they may not receive the message immediately. By convention, sending messages should be done from one side to another, not necessarily from yourself to yourself. It&#39;s also a good practice to check the contents of your mailbox when your app or extension wakes up, in case any messages have been left there while you were away.&lt;/p&gt; &#xA;&lt;p&gt;MMWormhole uses NSKeyedArchiver as a serialization medium, so any object that is NSCoding compliant can work as a message. For many apps, sharing simple strings, numbers, or JSON objects is sufficient to drive the UI of a Widget or Apple Watch app. Messages can be sent and persisted easily as archive files and read later when the app or extension is woken up later.&lt;/p&gt; &#xA;&lt;p&gt;Using MMWormhole is extremely straightforward. The only real catch is that your app and it&#39;s extensions must support shared app groups. The group will be used for writing the archive files that represent each message. While larger files and structures, including a whole Core Data database, can be shared using App Groups, MMWormhole is designed to use it&#39;s own directory simply to pass messages. Because of that, a best practice is to initialize MMWormhole with a directory name that it will use within your app&#39;s shared App Group.&lt;/p&gt; &#xA;&lt;h3&gt;Initialization&lt;/h3&gt; &#xA;&lt;p&gt;Initialize MMWormhole with your App Group identifier and an optional directory name&lt;/p&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;self.wormhole = [[MMWormhole alloc] initWithApplicationGroupIdentifier:@&#34;group.com.mutualmobile.wormhole&#34;&#xA;                                                     optionalDirectory:@&#34;wormhole&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let wormhole = MMWormhole(applicationGroupIdentifier: &#34;group.com.mutualmobile.wormhole&#34;, optionalDirectory: &#34;wormhole&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Passing a Message&lt;/h3&gt; &#xA;&lt;p&gt;Pass a message with an identifier for the message and a NSCoding compliant object as the message itself&lt;/p&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[self.wormhole passMessageObject:@{@&#34;titleString&#34; : title} &#xA;                      identifier:@&#34;messageIdentifier&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;wormhole.passMessageObject(&#34;titleString&#34;, identifier: &#34;messageIdentifier&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reading a Message&lt;/h3&gt; &#xA;&lt;p&gt;You have two options for reading a message. You can obtain the message for an identifier at any time by asking the wormhole for the message.&lt;/p&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;id messageObject = [self.wormhole messageWithIdentifier:@&#34;messageIdentifier&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also listen for changes to that message and be notified when that message is updated.&lt;/p&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[self.wormhole listenForMessageWithIdentifier:@&#34;messageIdentifier&#34; &#xA; listener:^(id messageObject) {&#xA;    // Do Something&#xA;}];&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;wormhole.listenForMessageWithIdentifier(&#34;messageIdentifier&#34;, listener: { (messageObject) -&amp;gt; Void in&#xA;    if let message: AnyObject = messageObject {&#xA;        // Do something&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Designing Your Communication Scheme&lt;/h3&gt; &#xA;&lt;p&gt;You can think of message passing between apps and extensions sort of like a web service. The web service has endpoints that you can read and write. The message identifiers for your MMWormhole messages can be thought of in much the same way. A great practice is to design very clear message identifiers so that you immediately know when reading your code who sent the message and why, and what the possible contents of the message might be. Just like you would design a web service with clear semantics, you should do the same with your wormhole messaging scheme.&lt;/p&gt; &#xA;&lt;h3&gt;Communication with WatchConnectivity&lt;/h3&gt; &#xA;&lt;p&gt;The design of your communication scheme is even more important when you need to support watchOS 2. MMWormhole supports the &lt;a href=&#34;https://developer.apple.com/library/prerelease/watchos/documentation/WatchConnectivity/Reference/WatchConnectivity_framework/index.html#//apple_ref/doc/uid/TP40015269&#34;&gt;WatchConnectivity&lt;/a&gt; framework provided by Apple as an easy way to get up and running quickly with a basic implementation of WatchConnectivity. This support is not intended to replace WatchConnectivity entirely, and it&#39;s important to carefully consider your watch app&#39;s communication system to see where MMWormhole will fit best.&lt;/p&gt; &#xA;&lt;p&gt;Here are two things you need to know if you want to use WatchConnectivity support in your app:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/MMWormhole/2.0.0/Classes/MMWormholeSession.html&#34;&gt;MMWormholeSession&lt;/a&gt; is a singleton subclass of MMWormhole that supports listening for WatchConnectivity messages. It should be used as the listener for all MMWormhole messages you expect to receive from the WatchConnectivity framework. Be sure to activate the session once your listeners are set so that you can begin receiving message notifications.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the MMWormholeSessionTransiting types described below when creating your wormholes, but be careful not to send too many messages at once. You can easily overload the pipeline by sending too many messages at once.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Message Transiting Options&lt;/h3&gt; &#xA;&lt;p&gt;The mechanism by which data flows through MMWormhole is defined by the &lt;a href=&#34;http://cocoadocs.org/docsets/MMWormhole/2.0.0/Classes/MMWormholeTransiting.html&#34;&gt;MMWormholeTransiting&lt;/a&gt; protocol. The default implementation of the protocol is called &lt;a href=&#34;http://cocoadocs.org/docsets/MMWormhole/2.0.0/Classes/MMWormholeFileTransiting.html&#34;&gt;MMWormholeFileTransiting&lt;/a&gt;, which reads and writes messages as archived data files in the app groups shared container. Users of MMWormhole can implement their own version of this protocol to change the message passing behavior.&lt;/p&gt; &#xA;&lt;p&gt;There are three new implementations of the MMWormholeTransiting protocol that support the WCSession application context, message, and file transfer systems. You may only use one form of transiting with a wormhole at a time, so you need to consider which type of messaging system best fits a given part of your application.&lt;/p&gt; &#xA;&lt;p&gt;Most apps will find the application context system to be a good balance between real time messaging and simple persistence, so we recommend &lt;a href=&#34;http://cocoadocs.org/docsets/MMWormhole/2.0.0/Classes/MMWormholeSessionContextTransiting.html&#34;&gt;MMWormholeSessionContextTransiting&lt;/a&gt; as the best place to start. Check out the &lt;a href=&#34;https://developer.apple.com/library/prerelease/watchos/documentation/WatchConnectivity/Reference/WatchConnectivity_framework/index.html#//apple_ref/doc/uid/TP40015269&#34;&gt;documentation&lt;/a&gt; and header comments for descriptions about the other messaging types.&lt;/p&gt; &#xA;&lt;p&gt;You can get started quickly with a wormhole using one of the built in transiting types by calling the optional initializer to set up an instance with the right transiting type for your use case.&lt;/p&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;self.wormhole = [[MMWormhole alloc] initWithApplicationGroupIdentifier:@&#34;group.com.mutualmobile.wormhole&#34;&#xA;                                                     optionalDirectory:@&#34;wormhole&#34;&#xA;                                                     &#x9;transitingType:MMWormholeTransitingTypeSessionContext];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let wormhole = MMWormhole(applicationGroupIdentifier: &#34;group.com.mutualmobile.wormhole&#34;, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   optionalDirectory: &#34;wormhole&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;      transitingType: .SessionContext)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;MMWormhole requires iOS 7.0 or higher or OS X 10.10 or higher. MMWormholeSession requires iOS 9.0 or higher.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If messages are not received on the other end, check Project-&amp;gt;Capabilities-&amp;gt;App Groups.&lt;br&gt; Three checkmarks should be displayed in the steps section.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mutualmobile/MMWormhole/master/MMWormhole_correct.png&#34; ) alt=&#34;Correct App Group Capabilities&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mutualmobile/MMWormhole/master/MMWormhole_incorrect.png&#34; ) alt=&#34;Incorrect App Group Capabilities&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;MMWormhole was created by &lt;a href=&#34;http://conradstoll.com&#34;&gt;Conrad Stoll&lt;/a&gt; at &lt;a href=&#34;http://www.mutualmobile.com&#34;&gt;Mutual Mobile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Credit also to &lt;a href=&#34;https://devforums.apple.com/people/mindsaspire&#34;&gt;Wade Spires&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/atomicbird&#34;&gt;Tom Harrington&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/rcachatx&#34;&gt;Rene Cacheaux&lt;/a&gt; for work and inspiration surrounding notifications between the containing app and it&#39;s extensions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MMWormhole is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>