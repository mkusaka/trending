<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-05T01:51:47Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AliSoftware/OHHTTPStubs</title>
    <updated>2022-06-05T01:51:47Z</updated>
    <id>tag:github.com,2022-06-05:/AliSoftware/OHHTTPStubs</id>
    <link href="https://github.com/AliSoftware/OHHTTPStubs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stub your network requests easily! Test your apps with fake network data and custom response time, response code and headers!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OHHTTPStubs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/OHHTTPStubs&#34;&gt;&lt;img src=&#34;http://cocoapod-badges.herokuapp.com/p/OHHTTPStubs/badge.png&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-2.x%2F3.x%2F4.x%2F5.x-orange.svg?sanitize=true&#34; alt=&#34;Language: Swift-2.x/3.x/4.x/5.x&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/AliSoftware/OHHTTPStubs&#34;&gt;&lt;img src=&#34;https://travis-ci.org/AliSoftware/OHHTTPStubs.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/OHHTTPStubs&#34;&gt;&lt;img src=&#34;http://cocoapod-badges.herokuapp.com/v/OHHTTPStubs/badge.png&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/carthage-supported-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/spm-supported-4BC51D.svg?style=flat&#34; alt=&#34;Swift Package Manager Supported&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is a library designed to stub your network requests very easily. It can help you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;test your apps with &lt;strong&gt;fake network data&lt;/strong&gt; (stubbed from file) and &lt;strong&gt;simulate slow networks&lt;/strong&gt;, to check your application behavior in bad network conditions&lt;/li&gt; &#xA; &lt;li&gt;write &lt;strong&gt;unit tests&lt;/strong&gt; that use fake network data from your fixtures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It works with &lt;code&gt;NSURLConnection&lt;/code&gt;, &lt;code&gt;NSURLSession&lt;/code&gt;, &lt;code&gt;AFNetworking&lt;/code&gt;, &lt;code&gt;Alamofire&lt;/code&gt; or any networking framework that use Cocoa&#39;s URL Loading System.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=TRTU3UEWEHV92&#34; title=&#34;Donate&#34;&gt;&lt;img alt=&#34;Donate&#34; src=&#34;https://www.paypalobjects.com/webstatic/mktg/merchant_portal/button/donate.en.png&#34; height=&#34;32px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Documentation &amp;amp; Usage Examples&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; headers are fully documented using Appledoc-like / Headerdoc-like comments in the header files. You can also &lt;a href=&#34;http://cocoadocs.org/docsets/OHHTTPStubs&#34;&gt;read the &lt;strong&gt;online documentation&lt;/strong&gt; here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Basic example&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;In Objective-C&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[HTTPStubs stubRequestsPassingTest:^BOOL(NSURLRequest *request) {&#xA;  return [request.URL.host isEqualToString:@&#34;mywebservice.com&#34;];&#xA;} withStubResponse:^HTTPStubsResponse*(NSURLRequest *request) {&#xA;  // Stub it with our &#34;wsresponse.json&#34; stub file (which is in same bundle as self)&#xA;  NSString* fixture = OHPathForFile(@&#34;wsresponse.json&#34;, self.class);&#xA;  return [HTTPStubsResponse responseWithFileAtPath:fixture&#xA;            statusCode:200 headers:@{@&#34;Content-Type&#34;:@&#34;application/json&#34;}];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open=&#34;1&#34;&gt; &#xA; &lt;summary&gt;In Swift&lt;/summary&gt; &#xA; &lt;p&gt;This example is using the Swift helpers found in &lt;code&gt;OHHTTPStubsSwift.swift&lt;/code&gt; provided by the &lt;code&gt;OHHTTPStubs/Swift&lt;/code&gt; subspec or &lt;code&gt;OHHTTPStubs&lt;/code&gt; package.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stub(condition: isHost(&#34;mywebservice.com&#34;)) { _ in&#xA;  // Stub it with our &#34;wsresponse.json&#34; stub file (which is in same bundle as self)&#xA;  let stubPath = OHPathForFile(&#34;wsresponse.json&#34;, type(of: self))&#xA;  return fixture(filePath: stubPath!, headers: [&#34;Content-Type&#34;:&#34;application/json&#34;])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you&#39;re using &lt;code&gt;OHHTTPStubs&lt;/code&gt;&#39;s Swiftier API (&lt;code&gt;OHHTTPStubsSwift.swift&lt;/code&gt; and the &lt;code&gt;Swift&lt;/code&gt; subspec or &lt;code&gt;OHTTPStubsSwift&lt;/code&gt; package), you can also compose the matcher functions like this: &lt;code&gt;stub(isScheme(&#34;http&#34;) &amp;amp;&amp;amp; isHost(&#34;myhost&#34;)) { â€¦ }&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;More examples &amp;amp; Help Topics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For a lot more examples, see the dedicated &#34;&lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/wiki/Usage-Examples&#34;&gt;Usage Examples&lt;/a&gt;&#34; wiki page.&lt;/li&gt; &#xA; &lt;li&gt;The wiki also contain &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/wiki&#34;&gt;some articles that can help you get started&lt;/a&gt; with (and troubleshoot if needed) &lt;code&gt;OHHTTPStubs&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Recording requests to replay them later&lt;/h2&gt; &#xA;&lt;p&gt;Instead of writing the content of the stubs you want to use manually, you can use tools like &lt;a href=&#34;https://github.com/capitalone/SWHttpTrafficRecorder&#34;&gt;SWHttpTrafficRecorder&lt;/a&gt; to record network requests into files. This way you can later use those files as stub responses.&lt;br&gt; This tool can record all three formats that are supported by &lt;code&gt;OHHTTPStubs&lt;/code&gt; (the &lt;code&gt;HTTPMessage&lt;/code&gt; format, the simple response boby/content file, and the &lt;code&gt;Mocktail&lt;/code&gt; format).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(There are also other ways to perform a similar task, including using &lt;code&gt;curl -is &amp;lt;url&amp;gt; &amp;gt;foo.response&lt;/code&gt; to generate files compatible with the &lt;code&gt;HTTPMessage&lt;/code&gt; format, or using other network recording libraries similar to &lt;code&gt;SWHttpTrafficRecorder&lt;/code&gt;).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Compatibility&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is compatible with &lt;strong&gt;iOS5+&lt;/strong&gt;, &lt;strong&gt;OS X 10.7+&lt;/strong&gt;, &lt;strong&gt;tvOS&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; also works with &lt;code&gt;NSURLSession&lt;/code&gt; as well as any network library wrapping them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is &lt;strong&gt;fully compatible with Swift 3.x, 4.x and Swift 5.x&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://developer.apple.com/swift/blog/?id=25&#34;&gt;Nullability annotations&lt;/a&gt; have also been added to the ObjC API to allow a cleaner API when used from Swift even if you don&#39;t use the dedicated Swift API wrapper provided by &lt;code&gt;OHHTTPStubsSwift.swift&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Updating to Version 9.0+&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;All classes dropped the &lt;code&gt;OH&lt;/code&gt; prefix (&lt;code&gt;OHHHTTPStubs&lt;/code&gt; -&amp;gt; &lt;code&gt;HTTPStubs&lt;/code&gt;, &lt;code&gt;OHHTTPStubsResponse&lt;/code&gt; -&amp;gt; &lt;code&gt;HTTPStubsResponse&lt;/code&gt;, etc).&lt;/li&gt; &#xA;  &lt;li&gt;The &lt;code&gt;OHPathHelpers&lt;/code&gt; class was renamed &lt;code&gt;HTTPStubsPathHelpers&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;No method and module names were changed.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Installing in your projects&lt;/h1&gt; &#xA;&lt;h2&gt;CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://guides.cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is the recommended way.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;intend to use &lt;code&gt;OHHTTPStubs&lt;/code&gt; from Objective-C only&lt;/strong&gt;, add &lt;code&gt;pod &#39;OHHTTPStubs&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;intend to use &lt;code&gt;OHHTTPStubs&lt;/code&gt; from Swift&lt;/strong&gt;, add &lt;code&gt;pod &#39;OHHTTPStubs/Swift&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt; instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;OHHTTPStubs/Swift&#39; # includes the Default subspec, with support for NSURLSession &amp;amp; JSON, and the Swiftier API wrappers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;All available subspecs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is split into subspecs so that when using Cocoapods, you can get only what you need, no more, no less.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The default subspec includes &lt;code&gt;NSURLSession&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt;, and &lt;code&gt;OHPathHelpers&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;Swift&lt;/code&gt; subspec adds the Swiftier API to that default subspec&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HTTPMessage&lt;/code&gt; and &lt;code&gt;Mocktail&lt;/code&gt; are opt-in subspecs: list them explicitly if you need them&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHPathHelpers&lt;/code&gt; doesn&#39;t depend on &lt;code&gt;Core&lt;/code&gt; and can be used independently of &lt;code&gt;OHHTTPStubs&lt;/code&gt; altogether&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;List of all the subspecs &amp;amp; their dependencies&lt;/summary&gt; &#xA; &lt;p&gt;Here&#39;s a list of which subspecs are included for each of the different lines you could use in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Subspec&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Core&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;NSURLSession&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;JSON&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Swift&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;OHPathHelpers&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;HTTPMessage&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Mocktail&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Default&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Swift&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Core&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/NSURLSession&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/JSON&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/OHPathHelpers&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/HTTPMessage&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Mocktail&#39;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Swift Package Manager&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is compatible with Swift Package Manager, and provides 2 targets for consumption: &lt;code&gt;OHHTTPStubs&lt;/code&gt; and &lt;code&gt;OHHTTPStubsSwift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is equivalent to the &lt;code&gt;OHHTTPStubs&lt;/code&gt; subspec.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubsSwift&lt;/code&gt; is equivalent to the &lt;code&gt;OHHTTPStubs/Swift&lt;/code&gt; subspec.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: We currently do not have support for the HTTPMessage or Mocktail subspecs in Swift Package Manager. If you are interested in these, please open an issue to explain your needs.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Carthage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is also compatible with Carthage. Just add it to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The &lt;code&gt;OHHTTPStubs.framework&lt;/code&gt; built with Carthage will include &lt;strong&gt;all&lt;/strong&gt; features of &lt;code&gt;OHHTTPStubs&lt;/code&gt; turned on (in other words, all subspecs of the pod), including &lt;code&gt;NSURLSession&lt;/code&gt; and &lt;code&gt;JSON&lt;/code&gt; support, &lt;code&gt;OHPathHelpers&lt;/code&gt;, &lt;code&gt;HTTPMessage&lt;/code&gt; and &lt;code&gt;Mocktail&lt;/code&gt; support, and the Swiftier API.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using the right Swift version for your project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; supports Swift 3.0 (Xcode 8+), Swift 3.1 (Xcode 8.3+), Swift 3.2 (Xcode 9.0+), Swift 4.0 (Xcode 9.0+), Swift 4.1 (Xcode 9.3+), Swift 4.2 (Xcode 10+), Swift 5.0 (Xcode 10.2), and Swift 5.1 (Xcode 11) however we are only testing Swift 4.x (using Xcode 9.1 and 10.1) and Swift 5.x (using Xcode 10.2 AND 11) in CI.&lt;/p&gt; &#xA;&lt;p&gt;Here are some details about the correct setup you need depending on how you integrated &lt;code&gt;OHHTTPStubs&lt;/code&gt; into your project.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;CocoaPods: nothing to do&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If you use CocoaPods version &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/releases/tag/1.1.0.beta.1&#34;&gt;&lt;code&gt;1.1.0.beta.1&lt;/code&gt;&lt;/a&gt; or later, then CocoaPods will compile &lt;code&gt;OHHTTPStubs&lt;/code&gt; with the right Swift Version matching the one you use for your project automatically. You have nothing to do! ðŸŽ‰&lt;/p&gt; &#xA; &lt;p&gt;For more info, see &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/pull/5540&#34;&gt;CocoaPods/CocoaPods#5540&lt;/a&gt; and &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/pull/5760&#34;&gt;CocoaPods/CocoaPods#5760&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Carthage: choose the right version&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;The project is set up with &lt;code&gt;SWIFT_VERSION=5.0&lt;/code&gt; on &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;This means that the framework on &lt;code&gt;master&lt;/code&gt; will build using:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Swift 5.1 on Xcode 11&lt;/li&gt; &#xA;  &lt;li&gt;Swift 5.0 on Xcode 10.2&lt;/li&gt; &#xA;  &lt;li&gt;Swift 4.2 on Xcode 10.1&lt;/li&gt; &#xA;  &lt;li&gt;Swift 4.0 on Xcode 9.1&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;If you want Carthage to build the framework with Swift 3.x you can:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;either use an older Xcode version&lt;/li&gt; &#xA;  &lt;li&gt;or use the previous version of &lt;code&gt;OHHTTPStubs&lt;/code&gt; (6.2.0) â€” whose &lt;code&gt;master&lt;/code&gt; branch uses &lt;code&gt;3.0&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;or fork the repo just to change the &lt;code&gt;SWIFT_VERSION&lt;/code&gt; build setting to &lt;code&gt;3.0&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;or build the framework passing a &lt;code&gt;SWIFT_VERSION&lt;/code&gt; to carthage via &lt;code&gt;XCODE_XCCONFIG_FILE=&amp;lt;config file declaring SWIFT_VERSION&amp;gt; carthage build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Special Considerations&lt;/h1&gt; &#xA;&lt;h2&gt;Using OHHTTPStubs in your unit tests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is ideal to write unit tests that normally would perform network requests. But if you use it in your unit tests, don&#39;t forget to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;remove any stubs you installed after each test â€” to avoid those stubs to still be installed when executing the next Test Case â€” by calling &lt;code&gt;[HTTPStubs removeAllStubs]&lt;/code&gt; in your &lt;code&gt;tearDown&lt;/code&gt; method. &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/wiki/Remove-stubs-after-each-test&#34;&gt;see this wiki page for more info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;be sure to wait until the request has received its response before doing your assertions and letting the test case finish (like for any asynchronous test). &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/wiki/OHHTTPStubs-and-asynchronous-tests&#34;&gt;see this wiki page for more info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Automatic loading&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is automatically loaded and installed (at the time the library is loaded in memory), both for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;requests made using &lt;code&gt;NSURLConnection&lt;/code&gt; or &lt;code&gt;[NSURLSession sharedSession]&lt;/code&gt; â€” &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/raw/master/OHHTTPStubs/Sources/OHHTTPStubs.m#L107-L113&#34;&gt;thanks to this code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;requests made using a &lt;code&gt;NSURLSession&lt;/code&gt; that was created via &lt;code&gt;[NSURLSession sessionWithConfiguration:â€¦]&lt;/code&gt; and using either &lt;code&gt;[NSURLSessionConfiguration defaultSessionConfiguration]&lt;/code&gt; or &lt;code&gt;[NSURLSessionConfiguration ephemeralSessionConfiguration]&lt;/code&gt; configuration â€” thanks to &lt;a href=&#34;http://nshipster.com/method-swizzling/&#34;&gt;method swizzling&lt;/a&gt; done &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/raw/master/OHHTTPStubs/Sources/NSURLSession/HTTPStubs+NSURLSessionConfiguration.m&#34;&gt;here in the code&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need to disable (and re-enable) &lt;code&gt;OHHTTPStubs&lt;/code&gt; â€” globally or per &lt;code&gt;NSURLSession&lt;/code&gt; â€” you can use &lt;code&gt;[HTTPStubs setEnabled:]&lt;/code&gt; / &lt;code&gt;[HTTPStubs setEnabled:forSessionConfiguration:]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; &lt;strong&gt;can&#39;t work on background sessions&lt;/strong&gt; (sessions created using &lt;code&gt;[NSURLSessionConfiguration backgroundSessionConfiguration]&lt;/code&gt;) because background sessions don&#39;t allow the use of custom &lt;code&gt;NSURLProtocols&lt;/code&gt; and are handled by the iOS Operating System itself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; don&#39;t simulate data upload. The &lt;code&gt;NSURLProtocolClient&lt;/code&gt; &lt;code&gt;@protocol&lt;/code&gt; does not provide a way to signal the delegate that data has been &lt;strong&gt;sent&lt;/strong&gt; (only that some has been loaded), so any data in the &lt;code&gt;HTTPBody&lt;/code&gt; or &lt;code&gt;HTTPBodyStream&lt;/code&gt; of an &lt;code&gt;NSURLRequest&lt;/code&gt;, or data provided to &lt;code&gt;-[NSURLSession uploadTaskWithRequest:fromData:];&lt;/code&gt; will be ignored, and more importantly, the &lt;code&gt;-URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:&lt;/code&gt; delegate method will never be called when you stub the request using &lt;code&gt;OHHTTPStubs&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OHTTPStubs&lt;/code&gt; &lt;strong&gt;has a known issue with redirects&lt;/strong&gt; that we believe is an Apple bug. It has been discussed &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/issues/230&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/AliSoftware/OHHTTPStubs/issues/280&#34;&gt;here&lt;/a&gt;. The actual result of this bug is that redirects with a zero second delay may nondeterministically end up with a null response.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;As far as I know, there&#39;s nothing we can do about those three limitations. Please let me know if you know a solution that would make that possible anyway.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Submitting to the App Store&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; &lt;strong&gt;can be used&lt;/strong&gt; on apps submitted &lt;strong&gt;on the App Store&lt;/strong&gt;. It does not use any private API and nothing prevents you from shipping it.&lt;/p&gt; &#xA;&lt;p&gt;But you generally only use stubs during the development phase and want to remove your stubs when submitting to the App Store. So be careful to only include &lt;code&gt;OHHTTPStubs&lt;/code&gt; when needed (only in your test targets, or only inside &lt;code&gt;#if DEBUG&lt;/code&gt; sections, or by using &lt;a href=&#34;https://guides.cocoapods.org/syntax/podfile.html#pod&#34;&gt;per-Build-Configuration pods&lt;/a&gt;) to avoid forgetting to remove it when the time comes that you release for the App Store and you want your requests to hit the real network!&lt;/p&gt; &#xA;&lt;h1&gt;License and Credits&lt;/h1&gt; &#xA;&lt;p&gt;This project and library has been created by Olivier Halligon (&lt;a href=&#34;https://twitter.com/aligatr&#34;&gt;@aligatr&lt;/a&gt; on Twitter) and is under the MIT License.&lt;/p&gt; &#xA;&lt;p&gt;It has been inspired by &lt;a href=&#34;https://web-beta.archive.org/web/20161219003951/http://www.infinite-loop.dk/blog/2011/09/using-nsurlprotocol-for-injecting-test-data/&#34;&gt;this article from InfiniteLoop.dk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I would also like to thank:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SÃ©bastien Duperron (&lt;a href=&#34;https://github.com/Liquidsoul&#34;&gt;@Liquidsoul&lt;/a&gt;) for helping me maintaining this library, triaging and responding to issues and PRs&lt;/li&gt; &#xA; &lt;li&gt;Kevin Harwood (&lt;a href=&#34;https://github.com/kcharwood&#34;&gt;@kcharwood&lt;/a&gt;) for migrating the code to &lt;code&gt;NSInputStream&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jinlian Wang (&lt;a href=&#34;https://github.com/JinlianWang&#34;&gt;@JinlianWang&lt;/a&gt;) for adding Mocktail support&lt;/li&gt; &#xA; &lt;li&gt;and everyone else who contributed to this project on GitHub somehow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to support the development of this library, feel free to &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=TRTU3UEWEHV92&#34; title=&#34;Donate&#34;&gt;&lt;img alt=&#34;Donate&#34; src=&#34;https://www.paypalobjects.com/webstatic/mktg/merchant_portal/button/donate.en.png&#34; height=&#34;25px&#34;&gt;&lt;/a&gt;. Thanks to all contributors so far!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>inket/Autoclick</title>
    <updated>2022-06-05T01:51:47Z</updated>
    <id>tag:github.com,2022-06-05:/inket/Autoclick</id>
    <link href="https://github.com/inket/Autoclick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple Mac app that simulates mouse clicks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Autoclick 2.0&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/inket/Autoclick/master/screenshot.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;A simple Mac app that simulates mouse clicks when needed. Highly configurable and easy to use.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;By &lt;a href=&#34;https://tars.mahdi.jp/apps/autoclick.zip&#34;&gt;downloading&lt;/a&gt; this app, you agree that it is provided &#34;as is&#34; and that you will receive NO SUPPORT whatsoever. This is a free app made in my free time and I do not owe you anything. Read the FAQ below for more info.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Is it safe?&lt;/h3&gt; &#xA;&lt;p&gt;Yes.&lt;/p&gt; &#xA;&lt;h3&gt;Why does it ask for Accessibility permission?&lt;/h3&gt; &#xA;&lt;p&gt;The system requires it to let the app &#34;click&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;I gave it Accessibility permission, but it doesn&#39;t click&lt;/h3&gt; &#xA;&lt;p&gt;Restart your Mac.&lt;/p&gt; &#xA;&lt;h3&gt;It requires macOS 10.14, but I have 10.13 or whatever&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tars.mahdi.jp/apps/autoclick-1.0.zip&#34;&gt;Download the older version&lt;/a&gt;, then right-click on the app and select &#34;Open&#34; to open it.&lt;/p&gt; &#xA;&lt;h3&gt;It will not let me set a hotkey!&lt;/h3&gt; &#xA;&lt;p&gt;You need to add a modifier to your hotkey like command, alt, or control.&lt;/p&gt; &#xA;&lt;p&gt;Try command+L, it should work.&lt;/p&gt; &#xA;&lt;h3&gt;Can you make it accept just one key for the hotkey?&lt;/h3&gt; &#xA;&lt;p&gt;No, it&#39;s impossible. (and stupid because you won&#39;t be able to use that key anymore)&lt;/p&gt; &#xA;&lt;h3&gt;I want more clicks per second&lt;/h3&gt; &#xA;&lt;p&gt;I found that above 900 the system will freeze so 900 is the limit.&lt;/p&gt; &#xA;&lt;h3&gt;Can you make a Windows version?&lt;/h3&gt; &#xA;&lt;p&gt;No, I can&#39;t. I would have to quit my job, go to school to learn Windows development, then spend months making it, so no. Also, Windows sucks.&lt;/p&gt; &#xA;&lt;h3&gt;Can I suggest a feature?&lt;/h3&gt; &#xA;&lt;p&gt;No.&lt;/p&gt; &#xA;&lt;h3&gt;Can you fix a bug?&lt;/h3&gt; &#xA;&lt;p&gt;No.&lt;/p&gt; &#xA;&lt;h3&gt;Can I contact you for anything about this app?&lt;/h3&gt; &#xA;&lt;p&gt;No. I will not respond.&lt;/p&gt; &#xA;&lt;h3&gt;Is this app still in development?&lt;/h3&gt; &#xA;&lt;p&gt;No.&lt;/p&gt; &#xA;&lt;h3&gt;Why?&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ve had enough of entitled Roblox kids.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;2.0.5 (2022/1/28)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Increase the maximum clicks per second to 900.&lt;/li&gt; &#xA; &lt;li&gt;This is the last version of this app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.4 (2021/9/6)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed app not remembering your settings between restarts&lt;/li&gt; &#xA; &lt;li&gt;App will now check Input Monitoring permission too, to make sure that you can stop the clicking with keyboard shortcuts/FN key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.3 (2021/2/23)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allow hotkeys without modifiers, &lt;a href=&#34;https://github.com/inket/Autoclick/issues/2&#34;&gt;#2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.2 (2021/2/17)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Better fix for multi-monitor setups, &lt;a href=&#34;https://github.com/inket/Autoclick/issues/1&#34;&gt;#1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.1 (2021/2/6)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed cursor jumping in multi-monitor setups, #1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0 (2021)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Codesigned &amp;amp; notarized so that it&#39;s trusted by new versions of macOS&lt;/li&gt; &#xA; &lt;li&gt;Modernized codebase &amp;amp; added Apple Silicon support&lt;/li&gt; &#xA; &lt;li&gt;Will now display the accessibility permission popup if you haven&#39;t allowed it yet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://tars.mahdi.jp/apps/autoclick-1.0.zip&#34;&gt;1.0 (2011)&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initial version&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>utmapp/UTM</title>
    <updated>2022-06-05T01:51:47Z</updated>
    <id>tag:github.com,2022-06-05:/utmapp/UTM</id>
    <link href="https://github.com/utmapp/UTM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Virtual machines for iOS and macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UTM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/utmapp/UTM/actions?query=event%3Arelease+workflow%3ABuild&#34;&gt;&lt;img src=&#34;https://github.com/utmapp/UTM/workflows/Build/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is possible to invent a single machine which can be used to compute any computable sequence.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;-- &lt;cite&gt;Alan Turing, 1936&lt;/cite&gt;&lt;/p&gt; &#xA;&lt;p&gt;UTM is a full featured system emulator and virtual machine host for iOS and macOS. It is based off of QEMU. In short, it allows you to run Windows, Linux, and more on your Mac, iPhone, and iPad. More information at &lt;a href=&#34;https://getutm.app/&#34;&gt;https://getutm.app/&lt;/a&gt; and &lt;a href=&#34;https://mac.getutm.app/&#34;&gt;https://mac.getutm.app/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/utmapp/UTM/master/screen.png&#34; alt=&#34;Screenshot of UTM running on iPhone&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full system emulation (MMU, devices, etc) using QEMU&lt;/li&gt; &#xA; &lt;li&gt;30+ processors supported including x86_64, ARM64, and RISC-V&lt;/li&gt; &#xA; &lt;li&gt;VGA graphics mode using SPICE and QXL&lt;/li&gt; &#xA; &lt;li&gt;Text terminal mode&lt;/li&gt; &#xA; &lt;li&gt;USB devices&lt;/li&gt; &#xA; &lt;li&gt;JIT based acceleration using QEMU TCG&lt;/li&gt; &#xA; &lt;li&gt;Frontend designed from scratch for macOS 11 and iOS 11+ using the latest and greatest APIs&lt;/li&gt; &#xA; &lt;li&gt;Create, manage, run VMs directly from your device&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional macOS Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hardware accelerated virtualization using Hypervisor.framework and QEMU&lt;/li&gt; &#xA; &lt;li&gt;Boot macOS guests with Virtualization.framework on macOS 12+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;UTM SE&lt;/h2&gt; &#xA;&lt;p&gt;UTM/QEMU requires dynamic code generation (JIT) for maximum performance. JIT on iOS devices require either a jailbroken device, or one of the various workarounds found for specific versions of iOS (see &#34;Install&#34; for more details).&lt;/p&gt; &#xA;&lt;p&gt;UTM SE (&#34;slow edition&#34;) uses a &lt;a href=&#34;https://github.com/ktemkin/qemu/raw/with_tcti/tcg/aarch64-tcti/README.md&#34;&gt;threaded interpreter&lt;/a&gt; which performs better than a traditional interpreter but still slower than JIT. This technique is similar to what &lt;a href=&#34;https://github.com/ish-app/ish&#34;&gt;iSH&lt;/a&gt; does for dynamic execution. As a result, UTM SE does not require jailbreaking or any JIT workarounds and can be sideloaded as a regular app.&lt;/p&gt; &#xA;&lt;p&gt;To optimize for size and build times, only the following architectures are included in UTM SE: ARM, PPC, RISC-V, and x86 (all with both 32-bit and 64-bit variants).&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;UTM (SE) for iOS: &lt;a href=&#34;https://getutm.app/install/&#34;&gt;https://getutm.app/install/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;UTM is also available for macOS: &lt;a href=&#34;https://mac.getutm.app/&#34;&gt;https://mac.getutm.app/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/utmapp/UTM/master/Documentation/MacDevelopment.md&#34;&gt;macOS Development&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/utmapp/UTM/master/Documentation/iOSDevelopment.md&#34;&gt;iOS Development&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ish-app/ish&#34;&gt;iSH&lt;/a&gt;: emulates a usermode Linux terminal interface for running x86 Linux applications on iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/holzschu/a-shell&#34;&gt;a-shell&lt;/a&gt;: packages common Unix commands and utilities built natively for iOS and accessible through a terminal interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;UTM is distributed under the permissive Apache 2.0 license. However, it uses several (L)GPL components. Most are dynamically linked but the gstreamer plugins are statically linked and parts of the code are taken from qemu. Please be aware of this if you intend on redistributing this application.&lt;/p&gt; &#xA;&lt;p&gt;Some icons made by &lt;a href=&#34;https://www.freepik.com&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;https://www.flaticon.com/&#34;&gt;www.flaticon.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, UTM frontend depends on the following MIT License components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager&#34;&gt;IQKeyboardManager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/migueldeicaza/SwiftTerm&#34;&gt;SwiftTerm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/weichsel/ZIPFoundation&#34;&gt;ZIP Foundation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>