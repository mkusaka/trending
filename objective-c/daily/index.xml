<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-27T01:41:52Z</updated>
  <subtitle>Daily Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>intercom/intercom-ios</title>
    <updated>2022-08-27T01:41:52Z</updated>
    <id>tag:github.com,2022-08-27:/intercom/intercom-ios</id>
    <link href="https://github.com/intercom/intercom-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üì± Intercom for iOS, for integrating Intercom into your iOS application.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/Intercom&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platforms-iOS-orange.svg?maxAge=2592000&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/intercom/intercom-ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/languages-OjbC%20%7C%20%20Swift-orange.svg?maxAge=2592000&#34; alt=&#34;Languages&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Intercom&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Intercom.svg?maxAge=2592000&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-APACHE2-blue.svg?style=flat&#34; alt=&#34;Apache License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/6392766/92717163-af7b0200-f357-11ea-9dc3-6f86d0c21d96.png&#34; width=&#34;297&#34; height=&#34;76&#34;&gt; &#xA;&lt;h2&gt;Onboard, retain and support mobile users at scale&lt;/h2&gt; &#xA;&lt;p&gt;Engage customers with email, push, and in‚Äëapp messages and support them with an integrated knowledge base and help desk.&lt;/p&gt; &#xA;&lt;h3&gt;The Intercom Messenger&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.intercom.com/help/en/articles/316-the-intercom-messenger-in-your-product-and-on-your-website&#34;&gt;Intercom Messenger&lt;/a&gt; is the home for the conversations your customers have with you via Intercom, and the place where they can self-serve for support or to learn more about your product.&lt;/p&gt; &#xA;&lt;p&gt;The Messenger works for both logged in and logged out users. It‚Äôs worth reading the detailed instructions in our &lt;a href=&#34;https://developers.intercom.com/installing-intercom/docs/intercom-for-ios&#34;&gt;developer docs&lt;/a&gt; on user management before you get started.&lt;/p&gt; &#xA;&lt;p&gt;You can open the Intercom Messenger from a button in your app, programmatically when someone does something, or from a persistent button that sits over your app‚Äôs UI.&lt;/p&gt; &#xA;&lt;p&gt;When you trigger the Intercom Messenger, your customer is presented with a home screen. This is configurable inside Intercom to change how it looks and what‚Äôs presented.&lt;/p&gt; &#xA;&lt;p&gt;From there, your customer can search for help articles or start a conversation. A conversation goes to your inbox inside Intercom, and replies in both directions happen in real time. You can also send push notifications to your customers to let them know they have a reply after they‚Äôve left your app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3185423/84803321-c5e41c80-aff9-11ea-89b0-514332887066.jpg&#34; alt=&#34;iOSREadme1&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.intercom.com/mobile-carousels&#34;&gt;Outbound messaging features&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can send messages to your customers from Intercom, and the mobile SDK will present them in your app. Messages can be targeted at specific users or groups of users, and can be scheduled to be sent during specific time windows.&lt;/p&gt; &#xA;&lt;p&gt;Companies use this for many use cases, including onboarding new users, announcing features, proactive support, important notices etc.&lt;/p&gt; &#xA;&lt;p&gt;The mobile SDK supports many different message formats, all of which can be created and configured inside Intercom. These include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Push notifications&lt;/strong&gt; - these can open your app or follow a deep link.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chats&lt;/strong&gt; - messages from someone in your team to your customer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mobile Carousels&lt;/strong&gt; - highly customizable, multi-screen messages with calls to action and device permissions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Small posts&lt;/strong&gt; - a short announcement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Large posts&lt;/strong&gt; - a full screen announcement.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We check for new messages when your app opens and whenever your customer or your app interacts with Intercom.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3185423/84890387-4191a800-b092-11ea-821e-e920ba7ef6a5.png&#34; alt=&#34;iOS - Content types&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Intercom for iOS supports iOS 13+. Xcode 13 is required to build Intercom iOS SDK. The binary size for Intercom is &lt;strong&gt;2.3MB&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Cocoapods 1.10 is required to install Intercom. Add the Intercom pod into your Podfile and run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    target :YourTargetName do&#xA;      pod &#39;Intercom&#39;&#xA;    end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;https://github.com/intercom/intercom-ios&lt;/code&gt; as a Swift Package Repository in Xcode and follow the instructions to add &lt;code&gt;Intercom&lt;/code&gt; as a Swift Package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3185423/104470769-fac94980-55b1-11eb-80e5-929e77bc5558.png&#34; alt=&#34;spm&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intercom/intercom-ios/archive/master.zip&#34;&gt;Download Intercom for iOS&lt;/a&gt; and extract the zip.&lt;/li&gt; &#xA; &lt;li&gt;Drag &lt;code&gt;Intercom.xcframework&lt;/code&gt; into your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;258&#34; alt=&#34;xcframework_drag&#34; src=&#34;https://user-images.githubusercontent.com/3185423/102403528-4ce07480-3fde-11eb-9147-bf3f6a7fbf2c.png&#34;&gt; &#xA;&lt;p&gt;Make sure &#34;Copy items if needed&#34; is selected and click Finish.&lt;/p&gt; &#xA;&lt;img width=&#34;451&#34; alt=&#34;copy_items&#34; src=&#34;https://user-images.githubusercontent.com/3185423/102404075-19521a00-3fdf-11eb-9ddd-2cf8d2efa657.png&#34;&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;In the target settings for your app, set the Intercom.xcframework to ‚ÄúEmbed &amp;amp; Sign‚Äù. This can be found in the ‚ÄúFrameworks, Libraries, and Embedded Content‚Äù section of the ‚ÄúGeneral‚Äù tab.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;613&#34; alt=&#34;embed_sign&#34; src=&#34;https://user-images.githubusercontent.com/3185423/102403646-7e594000-3fde-11eb-89e6-0dc280bf24b2.png&#34;&gt; &#xA;&lt;h2&gt;Update Info.plist&lt;/h2&gt; &#xA;&lt;h4&gt;Photo Library usage:&lt;/h4&gt; &#xA;&lt;p&gt;With the exception of apps that &lt;em&gt;only&lt;/em&gt; support iOS 14+, when installing Intercom, you&#39;ll need to make sure that you have a &lt;code&gt;NSPhotoLibraryUsageDescription&lt;/code&gt; entry in your &lt;code&gt;Info.plist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For apps that support iOS 13, this is &lt;a href=&#34;https://developer.apple.com/library/content/qa/qa1937/_index.html&#34;&gt;required by Apple&lt;/a&gt; to access the photo library. It is necessary when installing Intercom due to the image upload functionality. Users will be prompted for the photo library permission only when they tap the image upload button.&lt;/p&gt; &#xA;&lt;p&gt;On iOS 14+, Intercom uses the new &lt;code&gt;PHPickerViewController&lt;/code&gt; API which does not require requesting users for photo library permission.&lt;/p&gt; &#xA;&lt;h2&gt;Example app&lt;/h2&gt; &#xA;&lt;p&gt;There are example apps provided &lt;a href=&#34;https://github.com/intercom/intercom-ios/tree/master/Examples&#34;&gt;here&lt;/a&gt; for Objective-C and Swift, as well as an example built with SwiftUI.&lt;/p&gt; &#xA;&lt;h2&gt;Setup and Configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://developers.intercom.com/docs/ios-installation&#34;&gt;installation guide&lt;/a&gt; contains full setup and initialisation instructions.&lt;/li&gt; &#xA; &lt;li&gt;Read &lt;a href=&#34;https://developers.intercom.com/docs/ios-configuration&#34;&gt;&#34;Configuring Intercom for iOS&#34;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Read our guide on &lt;a href=&#34;https://developers.intercom.com/docs/ios-push-notifications&#34;&gt;Push Notifications&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Please contact us on &lt;a href=&#34;https://intercom.io&#34;&gt;Intercom&lt;/a&gt; with any questions you may have, we&#39;re only a message away!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customer Support&lt;/h2&gt; &#xA;&lt;p&gt;üëã Contact us with any issues at our &lt;a href=&#34;https://developers.intercom.com/docs/intercom-mobile-installation?utm_source=github&amp;amp;utm_campaign=ios-help&#34;&gt;Intercom Developer Hub available here&lt;/a&gt;. If you bump into any problems or need more support, just start a conversation using Intercom there and it will be immediately routed to our Customer Support Engineers.&lt;/p&gt; &#xA;&lt;h2&gt;Cordova/Phonegap Support&lt;/h2&gt; &#xA;&lt;p&gt;Looking for Cordova/Phonegap support? We have a &lt;a href=&#34;https://github.com/intercom/intercom-cordova&#34;&gt;Cordova Plugin&lt;/a&gt; for Intercom üéâ&lt;/p&gt; &#xA;&lt;h2&gt;What about events, push notifications, company and user data?&lt;/h2&gt; &#xA;&lt;p&gt;Intercom for iOS has support for all these things. For full details please read our &lt;a href=&#34;https://developers.intercom.com/docs/ios-configuration&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Adyen/adyen-wechatpay-ios</title>
    <updated>2022-08-27T01:41:52Z</updated>
    <id>tag:github.com,2022-08-27:/Adyen/adyen-wechatpay-ios</id>
    <link href="https://github.com/Adyen/adyen-wechatpay-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Adyen WeChat Pay SDK Wrapper&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AdyenWeChatPayInternal&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://developers.weixin.qq.com/doc/oplatform/en/Downloads/iOS_Resource.html&#34;&gt;WeChat Pay SDK&lt;/a&gt; is a static &lt;code&gt;.a&lt;/code&gt; library. This repository provides an XCFramework around the static library for more convenient importing of the WeChat Pay SDK. This is especially useful when using Swift Package Manager.&lt;/p&gt; &#xA;&lt;p&gt;Embeded WeChat SDK versions: 1.9.2&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ùó&lt;/span&gt; WeChat SDK versions 1.8.6.1 and below contain UIKit symbols and cause rejection during App Store Review: &#34;ITMS-90809: Deprecated API Usage&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For embedding the XCFramework into an Xcode project, Xcode 11+ is required.&lt;/li&gt; &#xA; &lt;li&gt;For integrating through Swift Package Manager, Xcode 12+ is required.&lt;/li&gt; &#xA; &lt;li&gt;Supports iOS 10+.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Embedding XCFramework.&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Drag the XCFramework into your Frameworks folder.&lt;/li&gt; &#xA; &lt;li&gt;Make sure to Select ‚ÄúCopy items if needed‚Äù and ‚ÄúCreate groups‚Äù options when adding the XCFramework file.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to your project settings, then General tab, under ‚ÄúFrameworks, Libraries and Embedded Content‚Äù, make sure to select ‚ÄúEmbed &amp;amp; Sign‚Äù for your newly added XCFramework.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow Apple&#39;s &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;Adding Package Dependencies to Your App&lt;/a&gt; guide on how to add a Swift Package dependency.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;https://github.com/Adyen/adyen-wechatpay-ios&lt;/code&gt; as the repository URL.&lt;/li&gt; &#xA; &lt;li&gt;Specify the version to be at least &lt;code&gt;2.0.0&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;em&gt;Please make sure to use Xcode 12.0+ when adding &lt;code&gt;AdyenWeChatPayInternal&lt;/code&gt; using Swift Package Manager.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;em&gt;Swift Package Manager for Xcode 12.0 and 12.1 has a &lt;a href=&#34;https://bugs.swift.org/browse/SR-13343&#34;&gt;know issue&lt;/a&gt; when it comes to importing binary dependencies. A workaround is described &lt;a href=&#34;https://forums.swift.org/t/swiftpm-binarytarget-dependency-and-code-signing/38953&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;pod &#39;AdyenWeChatPayInternal&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;github &#34;adyen/adyen-wechatpay-ios&#34;&lt;/code&gt; to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Link the framework with your target as described in &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;Carthage Readme&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: for non-M1 mac use workarounds from &lt;a href=&#34;https://github.com/Carthage/Carthage/issues/3019#issuecomment-665136323&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;AdyenWeChatPayInternal is just a wrapper around &lt;a href=&#34;https://developers.weixin.qq.com/doc/oplatform/en/Downloads/iOS_Resource.html&#34;&gt;the original WeChat Pay SDK&lt;/a&gt;, with a few minor improvements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handles the importing of the dependent system frameworks and libraries.&lt;/li&gt; &#xA; &lt;li&gt;Removes the need for adding &lt;code&gt;-Objc and -all_load&lt;/code&gt; other linker flags to the your project build settings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other than these improvements, the framework works in the same way as the original WeChat Pay SDK.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; WeChat &lt;code&gt;.a&lt;/code&gt; static library does not support simulator for &lt;code&gt;arm64&lt;/code&gt; architecture. To debug on simulator use debug flags&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if !(targetEnvironment(simulator))&#xA;&#xA;// Code that calls WeChat SDK&#xA;&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://developers.weixin.qq.com/doc/oplatform/en/Mobile_App/Access_Guide/iOS.html&#34;&gt;original documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you have a feature request, or spotted a bug or a technical problem regarding the XCFramework wrapper, create a GitHub issue. For other questions or issues regarding the SDK, contact &lt;a href=&#34;https://developers.weixin.qq.com/doc/oplatform/en/Mobile_App/Access_Guide/iOS.html&#34;&gt;WeChat Pay iOS SDK support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT license. For more information, see the LICENSE file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebookincubator/SocketRocket</title>
    <updated>2022-08-27T01:41:52Z</updated>
    <id>tag:github.com,2022-08-27:/facebookincubator/SocketRocket</id>
    <link href="https://github.com/facebookincubator/SocketRocket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A conforming Objective-C WebSocket client library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SocketRocket&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/SocketRocket.svg?style=flat&#34; alt=&#34;Platforms&#34;&gt; &lt;a href=&#34;https://github.com/facebook/SocketRocket/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD-lightgrey.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/SocketRocket&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SocketRocket.svg?sanitize=true&#34; alt=&#34;Podspec&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/facebookincubator/SocketRocket/main/carthage-link&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/facebook/SocketRocket/branches&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/facebook/SocketRocket/master.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A conforming WebSocket (&lt;a href=&#34;https://tools.ietf.org/html/rfc6455%3E&#34;&gt;RFC 6455&lt;/a&gt;) client library for iOS, macOS and tvOS.&lt;/p&gt; &#xA;&lt;p&gt;Test results for SocketRocket &lt;a href=&#34;http://facebook.github.io/SocketRocket/results/&#34;&gt;here&lt;/a&gt;. You can compare to what modern browsers look like &lt;a href=&#34;http://autobahn.ws/testsuite/reports/clients/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SocketRocket currently conforms to all core ~300 of &lt;a href=&#34;http://autobahn.ws/testsuite/%3E&#34;&gt;Autobahn&lt;/a&gt;&#39;s fuzzing tests (aside from two UTF-8 ones where it is merely &lt;em&gt;non-strict&lt;/em&gt; tests 6.4.2 and 6.4.4).&lt;/p&gt; &#xA;&lt;h2&gt;Features/Design&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TLS (wss) support, including self-signed certificates.&lt;/li&gt; &#xA; &lt;li&gt;Seems to perform quite well.&lt;/li&gt; &#xA; &lt;li&gt;Supports HTTP Proxies.&lt;/li&gt; &#xA; &lt;li&gt;Supports IPv4/IPv6.&lt;/li&gt; &#xA; &lt;li&gt;Supports SSL certificate pinning.&lt;/li&gt; &#xA; &lt;li&gt;Sends &lt;code&gt;ping&lt;/code&gt; and can process &lt;code&gt;pong&lt;/code&gt; events.&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous and non-blocking. Most of the work is done on a background thread.&lt;/li&gt; &#xA; &lt;li&gt;Supports iOS, macOS, tvOS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;There are a few options. Choose one, or just figure it out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SocketRocket&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;pod install&lt;/code&gt;, and you are all set.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/carthage/carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add the following line to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;facebook/SocketRocket&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt;, and you should now have the latest version of &lt;code&gt;SocketRocket&lt;/code&gt; in your &lt;code&gt;Carthage&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using SocketRocket as a sub-project&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You can also include &lt;code&gt;SocketRocket&lt;/code&gt; as a subproject inside of your application if you&#39;d prefer, although we do not recommend this, as it will increase your indexing time significantly. To do so, just drag and drop the &lt;code&gt;SocketRocket.xcodeproj&lt;/code&gt; file into your workspace.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;SRWebSocket&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The Web Socket.&lt;/p&gt; &#xA;&lt;h4&gt;Note:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;SRWebSocket&lt;/code&gt; will retain itself between &lt;code&gt;-(void)open&lt;/code&gt; and when it closes, errors, or fails. This is similar to how &lt;code&gt;NSURLConnection&lt;/code&gt; behaves (unlike &lt;code&gt;NSURLConnection&lt;/code&gt;, &lt;code&gt;SRWebSocket&lt;/code&gt; won&#39;t retain the delegate).&lt;/p&gt; &#xA;&lt;h4&gt;Interface&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@interface SRWebSocket : NSObject&#xA;&#xA;// Make it with this&#xA;- (instancetype)initWithURLRequest:(NSURLRequest *)request;&#xA;&#xA;// Set this before opening&#xA;@property (nonatomic, weak) id &amp;lt;SRWebSocketDelegate&amp;gt; delegate;&#xA;&#xA;// Open with this&#xA;- (void)open;&#xA;&#xA;// Close it with this&#xA;- (void)close;&#xA;&#xA;// Send a Data&#xA;- (void)sendData:(nullable NSData *)data error:(NSError **)error;&#xA;&#xA;// Send a UTF8 String&#xA;- (void)sendString:(NSString *)string error:(NSError **)error;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;SRWebSocketDelegate&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You implement this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@protocol SRWebSocketDelegate &amp;lt;NSObject&amp;gt;&#xA;&#xA;@optional&#xA;&#xA;- (void)webSocketDidOpen:(SRWebSocket *)webSocket;&#xA;&#xA;- (void)webSocket:(SRWebSocket *)webSocket didReceiveMessageWithString:(NSString *)string;&#xA;- (void)webSocket:(SRWebSocket *)webSocket didReceiveMessageWithData:(NSData *)data;&#xA;&#xA;- (void)webSocket:(SRWebSocket *)webSocket didFailWithError:(NSError *)error;&#xA;- (void)webSocket:(SRWebSocket *)webSocket didCloseWithCode:(NSInteger)code reason:(nullable NSString *)reason wasClean:(BOOL)wasClean;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Included are setup scripts for the python testing environment. It comes packaged with vitualenv so all the dependencies are installed in userland.&lt;/p&gt; &#xA;&lt;p&gt;To run the short test from the command line, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run all the tests, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  make test_all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The short tests don&#39;t include the performance tests (the test harness is actually the bottleneck, not SocketRocket).&lt;/p&gt; &#xA;&lt;p&gt;The first time this is run, it may take a while to install the dependencies. It will be smooth sailing after that.&lt;/p&gt; &#xA;&lt;p&gt;You can also run tests inside Xcode, which runs the same thing, but makes it easier to debug.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Choose the &lt;code&gt;SocketRocketTests&lt;/code&gt; target&lt;/li&gt; &#xA; &lt;li&gt;Make sure your running destination is either your Mac or any Simulator&lt;/li&gt; &#xA; &lt;li&gt;Run the test action (&lt;code&gt;‚åò+U&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TestChat Demo Application&lt;/h3&gt; &#xA;&lt;p&gt;SocketRocket includes a demo app, TestChat. It will &#34;chat&#34; with a listening websocket on port 9900.&lt;/p&gt; &#xA;&lt;h4&gt;TestChat Server&lt;/h4&gt; &#xA;&lt;p&gt;The sever takes a message and broadcasts it to all other connected clients.&lt;/p&gt; &#xA;&lt;p&gt;It requires some dependencies though to run. We also want to reuse the virtualenv we made when we ran the tests. If you haven&#39;t run the tests yet, go into the SocketRocket root directory and type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will set up your &lt;a href=&#34;https://pypi.python.org/pypi/virtualenv&#34;&gt;virtualenv&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now, in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source .env/bin/activate&#xA;pip install git+https://github.com/tornadoweb/tornado.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the same terminal session, start the chatroom server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python TestChatServer/py/chatroom.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s also a Go implementation (with the latest weekly) where you can:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd TestChatServer/go&#xA;go run chatroom.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Chatting&lt;/h4&gt; &#xA;&lt;p&gt;Now, start TestChat.app (just run the target in the Xcode project). If you had it started already you can hit the refresh button to reconnect. It should say &#34;Connected!&#34; on top.&lt;/p&gt; &#xA;&lt;p&gt;To talk with the app, open up your browser to &lt;a href=&#34;http://localhost:9000&#34;&gt;http://localhost:9000&lt;/a&gt; and start chatting.&lt;/p&gt; &#xA;&lt;h2&gt;WebSocket Server Implementation Recommendations&lt;/h2&gt; &#xA;&lt;p&gt;SocketRocket has been used with the following libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tornadoweb/tornado&#34;&gt;Tornado&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go&#39;s &lt;a href=&#34;https://godoc.org/golang.org/x/net/websocket&#34;&gt;WebSocket package&lt;/a&gt; or Gorilla&#39;s &lt;a href=&#34;http://www.gorillatoolkit.org/pkg/websocket&#34;&gt;version&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://autobahn.ws/testsuite/&#34;&gt;Autobahn&lt;/a&gt; (using its fuzzing client).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Tornado one is dirt simple and works like a charm. (&lt;a href=&#34;http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html&#34;&gt;IPython notebook&lt;/a&gt; uses it too). It&#39;s much easier to configure handlers and routes than in Autobahn/twisted.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We‚Äôre glad you‚Äôre interested in SocketRocket, and we‚Äôd love to see where you take it. Please read our &lt;a href=&#34;https://github.com/facebook/SocketRocket/raw/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; prior to submitting a Pull Request.&lt;/p&gt;</summary>
  </entry>
</feed>