<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-01T01:48:25Z</updated>
  <subtitle>Monthly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kif-framework/KIF</title>
    <updated>2025-05-01T01:48:25Z</updated>
    <id>tag:github.com,2025-05-01:/kif-framework/KIF</id>
    <link href="https://github.com/kif-framework/KIF" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Keep It Functional - An iOS Functional Testing Framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kif-framework/KIF&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kif-framework/KIF.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/KIF.svg?style=flat&#34; alt=&#34;CocoaPod Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT! Even though KIF is used to test your UI, you need to add it to your Unit Test target, &lt;em&gt;not&lt;/em&gt; your UI Test target. The magic of KIF is that it allows you to drive your UI from your unit tests and reap all the advantages of testing in-process.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;KIF iOS Integration Testing Framework&lt;/h1&gt; &#xA;&lt;p&gt;KIF, which stands for Keep It Functional, is an iOS integration test framework. It allows for easy automation of iOS apps by leveraging the accessibility attributes that the OS makes available for those with visual disabilities.&lt;/p&gt; &#xA;&lt;p&gt;KIF builds and performs the tests using a standard &lt;code&gt;XCTest&lt;/code&gt; testing target. Testing is conducted synchronously in the main thread (running the run loop to force the passage of time) allowing for more complex logic and composition. This also allows KIF to take advantage of the Xcode Test Navigator, command line build tools, and Bot test reports.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;KIF uses undocumented Apple APIs.&lt;/strong&gt; This is true of most iOS testing frameworks, and is safe for testing purposes, but it&#39;s important that KIF does not make it into production code, as it will get your app submission denied by Apple. Follow the instructions below to ensure that KIF is configured correctly for your project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Actively supports Xcode 11.6 and iOS 11-13 if you need support for an earlier version please use &lt;a href=&#34;https://github.com/kif-framework/KIF/releases/tag/v3.7.9&#34;&gt;v3.7.9&lt;/a&gt; or an &lt;a href=&#34;https://github.com/kif-framework/KIF/releases&#34;&gt;earlier release&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h4&gt;Minimizes Indirection&lt;/h4&gt; &#xA;&lt;p&gt;All of the tests for KIF are written in Objective-C. This allows for maximum integration with your code while minimizing the number of layers you have to build.&lt;/p&gt; &#xA;&lt;h4&gt;Easy Configuration&lt;/h4&gt; &#xA;&lt;p&gt;KIF integrates directly into your Xcode project, so there&#39;s no need to run an additional web server or install any additional packages.&lt;/p&gt; &#xA;&lt;h4&gt;Wide OS and Xcode coverage&lt;/h4&gt; &#xA;&lt;p&gt;KIF&#39;s test suite is being run against iOS 8+ and Xcode 7+. Lower versions will likely still work, but your mileage may vary. We do our best to retain backwards compatibility as much as possible.&lt;/p&gt; &#xA;&lt;h4&gt;Test Like a User&lt;/h4&gt; &#xA;&lt;p&gt;KIF attempts to imitate actual user input. Automation is done using tap events wherever possible.&lt;/p&gt; &#xA;&lt;h4&gt;Automatic Integration with Xcode Testing Tools&lt;/h4&gt; &#xA;&lt;p&gt;You can easily run a single KIF test with the Test Navigator or kick off nightly acceptance tests with Bots.&lt;/p&gt; &#xA;&lt;h2&gt;See KIF in Action&lt;/h2&gt; &#xA;&lt;p&gt;KIF uses techniques described below to validate its internal functionality. You can see a test suite that exercises its entire functionality by simply building and testing the KIF scheme with ⌘U. Look at the tests in the &#34;Tests&#34; group for ideas on how to build your own tests.&lt;/p&gt; &#xA;&lt;h2&gt;Installation (with CocoaPods)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; are the easiest way to get set up with KIF.&lt;/p&gt; &#xA;&lt;p&gt;The first thing you will want to do is set up a test target you will be using for KIF. You may already have one named &lt;em&gt;MyApplication&lt;/em&gt;_Tests if you selected to automatically create unit tests. If you did, you can keep using it if you aren&#39;t using it for unit tests. Otherwise, follow these directions to create a new one.&lt;/p&gt; &#xA;&lt;p&gt;Select your project in Xcode and click on &#34;Add Target&#34; in the bottom left corner of the editor. Select iOS -&amp;gt; Test -&amp;gt; iOS Unit Testing Bundle. Give it a product name like &#34;Acceptance Tests&#34;, &#34;UI Tests&#34;, or something that indicates the intent of your testing process.&lt;/p&gt; &#xA;&lt;p&gt;The testing target will add a header and implementation file, likely &#34;Acceptance_Tests.m/h&#34; to match your target name. Delete those.&lt;/p&gt; &#xA;&lt;p&gt;Once your test target set up, add the following to your Podfile file. Use your target&#39;s name as appropriate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Ruby&#34;&gt;target &#39;Your Apps&#39; do&#xA;  ...&#xA;end&#xA;&#xA;target &#39;Acceptance Tests&#39; do&#xA;  pod &#39;KIF&#39;, :configurations =&amp;gt; [&#39;Debug&#39;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running &lt;code&gt;pod install&lt;/code&gt; complete the tasks in &lt;a href=&#34;https://raw.githubusercontent.com/kif-framework/KIF/master/#final-test-target-configurations&#34;&gt;&lt;strong&gt;Final Test Target Configurations&lt;/strong&gt;&lt;/a&gt; below for the final details on getting your tests to run.&lt;/p&gt; &#xA;&lt;h2&gt;Installation (from GitHub)&lt;/h2&gt; &#xA;&lt;p&gt;To install KIF, you&#39;ll need to link the libKIF static library directly into your application. Download the source from the &lt;a href=&#34;https://github.com/kif-framework/KIF/&#34;&gt;kif-framework/KIF&lt;/a&gt; and follow the instructions below. The screenshots are from Xcode 6 on Yosemite, but the instructions should be the same for Xcode 5 or later on any OS version.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll be using a simple project as an example, and you can find it in &lt;code&gt;Documentation/Examples/Testable Swift&lt;/code&gt; in this repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/kif-framework/KIF/raw/master/Documentation/Images/Simple%20App.png&#34; alt=&#34;Simple App&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Add KIF to your project files&lt;/h3&gt; &#xA;&lt;p&gt;The first step is to add the KIF project into the ./Frameworks/KIF subdirectory of your existing app. If your project uses Git for version control, you can use submodules to make updating in the future easier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /path/to/MyApplicationSource&#xA;mkdir Frameworks&#xA;git submodule add https://github.com/kif-framework/KIF.git Frameworks/KIF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not using Git, simply download the source and copy it into the &lt;code&gt;./Frameworks/KIF&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Add KIF to Your Workspace&lt;/h3&gt; &#xA;&lt;p&gt;Let your project know about KIF by adding the KIF project into a workspace along with your main project. Find the &lt;code&gt;KIF.xcodeproj&lt;/code&gt; file in Finder and drag it into the Project Navigator (⌘1).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/kif-framework/KIF/raw/master/Documentation/Images/Added%20KIF%20to%20Project.png&#34; alt=&#34;Added KIF to the project&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Create a Testing Target&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need to create a test target for your app. You may already have one named &lt;em&gt;MyApplication&lt;/em&gt;Tests if you selected to automatically create unit tests when you created the project. If you did, you can keep using it if you aren&#39;t using it for unit tests. Otherwise, follow these directions to create a new one.&lt;/p&gt; &#xA;&lt;p&gt;Select your project in Xcode and click on &#34;Add Target&#34; in the bottom left corner of the editor. Select iOS -&amp;gt; Test -&amp;gt; iOS Unit Testing Bundle. Give it a product name like &#34;Acceptance Tests&#34;, &#34;UI Tests&#34;, or something that indicates the intent of your testing process.&lt;/p&gt; &#xA;&lt;p&gt;The testing target will add a header and implementation file, likely &#34;Acceptance_Tests.m/h&#34; to match your target name. Delete those.&lt;/p&gt; &#xA;&lt;h3&gt;Configure the Testing Target&lt;/h3&gt; &#xA;&lt;p&gt;Now that you have a target for your tests, add the tests to that target. With the project settings still selected in the Project Navigator, and the new integration tests target selected in the project settings, select the &#34;Build Phases&#34; tab. Under the &#34;Link Binary With Libraries&#34; section, hit the &#34;+&#34; button. In the sheet that appears, select &#34;libKIF.a&#34; and click &#34;Add&#34;. Repeat the process for CoreGraphics.framework and QuartzCore.framework.&lt;/p&gt; &#xA;&lt;p&gt;KIF requires the IOKit.framework, but it is not located with the other system frameworks. To link to it, add &#34;-framework IOKit&#34; to the &#34;Other Linker Flags&#34; build setting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/kif-framework/KIF/raw/master/Documentation/Images/Add%20Library.png&#34; alt=&#34;Add libKIF library screen shot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/kif-framework/KIF/raw/master/Documentation/Images/Add%20Library%20Sheet.png&#34; alt=&#34;Add libKIF library screen shot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;KIF takes advantage of Objective C&#39;s ability to add categories on an object, but this isn&#39;t enabled for static libraries by default. To enable this, add the &lt;code&gt;-ObjC&lt;/code&gt; flag to the &#34;Other Linker Flags&#34; build setting on your test bundle target as shown below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/kif-framework/KIF/raw/master/Documentation/Images/Add%20Category%20Linker%20Flags.png&#34; alt=&#34;Add category linker flags screen shot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read &lt;strong&gt;Final Test Target Configurations&lt;/strong&gt; below for the final details on getting your tests to run.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Accessibility Identifier Tests&lt;/h2&gt; &#xA;&lt;p&gt;Normally you identify a UI element via its accessibility label so that KIF simulates the interactions of a real user as closely as possible. In some cases, however, you may have to use accessibility identifiers, which are not exposed to users. If using CocoaPods, install the additional identifier-based Tests via the Identifier CocoaPods subspec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;KIF/IdentifierTests&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If not using CocoaPods, the identifier-based Tests can be added by including &#34;KIFUITestActor-IdentifierTests.h&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Final Test Target Configurations&lt;/h2&gt; &#xA;&lt;p&gt;You need your tests to run hosted in your application. &lt;strong&gt;Xcode does this for you by default&lt;/strong&gt; when creating a new testing bundle target, but if you&#39;re migrating an older bundle, follow the steps below.&lt;/p&gt; &#xA;&lt;p&gt;First add your application by selecting &#34;Build Phases&#34;, expanding the &#34;Target Dependencies&#34; section, clicking on the &#34;+&#34; button, and in the new sheet that appears selecting your application target and clicking &#34;Add&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Next, configure your bundle loader. In &#34;Build Settings&#34;, expand &#34;Linking&#34; and edit &#34;Bundle Loader&#34; to be &lt;code&gt;$(TEST_HOST)&lt;/code&gt;. Expand the &#34;Testing&#34; section and edit &#34;Test Host&#34; to be &lt;code&gt;$(BUILT_PRODUCTS_DIR)/MyApplication.app/MyApplication&lt;/code&gt; where &lt;code&gt;MyApplication&lt;/code&gt; is the name of your app. Also make sure that &#34;Wrapper Extension&#34; is set to &lt;code&gt;xctest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The last step is to configure your unit tests to run when you trigger a test (⌘U). Click on your scheme name and select &#34;Edit Scheme…&#34;. Click on &#34;Test&#34; in the sidebar followed by the &#34;+&#34; in the bottom left corner. Select your testing target and click &#34;OK&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Example test cases&lt;/h2&gt; &#xA;&lt;p&gt;With your project configured to use KIF, it&#39;s time to start writing tests. There are two main classes used in KIF testing: the test case (&lt;code&gt;KIFTestCase&lt;/code&gt;, subclass of &lt;code&gt;XCTestCase&lt;/code&gt;) and the UI test actor (&lt;code&gt;KIFUITestActor&lt;/code&gt;). The XCTest test runner loads the test case classes and executes their test. Inside these tests, the tester performs the UI operations which generally imitate a user interaction. Three of the most common tester actions are &#34;tap this view,&#34; &#34;enter text into this view,&#34; and &#34;wait for this view.&#34; These steps are included as factory methods on &lt;code&gt;KIFUITestActor&lt;/code&gt; in the base KIF implementation.&lt;/p&gt; &#xA;&lt;p&gt;KIF relies on the built-in accessibility of iOS to perform its test steps. As such, it&#39;s important that your app is fully accessible. This is also a great way to ensure that your app is usable by everyone. Giving your views reasonable labels is usually a good place to start when making your application accessible. More details are available in &lt;a href=&#34;http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/iPhoneAccessibility/Making_Application_Accessible/Making_Application_Accessible.html%23//apple_ref/doc/uid/TP40008785-CH102-SW5&#34;&gt;Apple&#39;s Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The first step is to create a test class to test some functionality. In our case, we will create a login test (&lt;code&gt;LoginTests&lt;/code&gt;). Create a new class that inherits from KIFTestCase. You may have to update the import to point to &lt;code&gt;&amp;lt;KIF/KIF.h&amp;gt;&lt;/code&gt;. The test method name provides a unique identifier. Your &lt;code&gt;KIFTestCase&lt;/code&gt; subclass should look something like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;LoginTestCase.h&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;KIF/KIF.h&amp;gt;&#xA;&#xA;@interface LoginTests : KIFTestCase&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;LoginTestCase.m&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &#34;LoginTests.h&#34;&#xA;#import &#34;KIFUITestActor+EXAdditions.h&#34;&#xA;&#xA;@implementation LoginTests&#xA;&#xA;- (void)beforeEach&#xA;{&#xA;    [tester navigateToLoginPage];&#xA;}&#xA;&#xA;- (void)afterEach&#xA;{&#xA;    [tester returnToLoggedOutHomeScreen];&#xA;}&#xA;&#xA;- (void)testSuccessfulLogin&#xA;{&#xA;    [tester enterText:@&#34;user@example.com&#34; intoViewWithAccessibilityLabel:@&#34;Login User Name&#34;];&#xA;    [tester enterText:@&#34;thisismypassword&#34; intoViewWithAccessibilityLabel:@&#34;Login Password&#34;];&#xA;    [tester tapViewWithAccessibilityLabel:@&#34;Log In&#34;];&#xA;&#xA;    // Verify that the login succeeded&#xA;    [tester waitForTappableViewWithAccessibilityLabel:@&#34;Welcome&#34;];&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most of the tester actions in the test are already defined by the KIF framework, but &lt;code&gt;-navigateToLoginPage&lt;/code&gt; and &lt;code&gt;-returnToLoggedOutHomeScreen&lt;/code&gt; are not. These are examples of custom actions which are specific to your application. Adding such steps is easy, and is done using a factory method in a category of &lt;code&gt;KIFUITestActor&lt;/code&gt;, similar to how we added the scenario.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;KIFUITestActor+EXAdditions.h&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;KIF/KIF.h&amp;gt;&#xA;&#xA;@interface KIFUITestActor (EXAdditions)&#xA;&#xA;- (void)navigateToLoginPage;&#xA;- (void)returnToLoggedOutHomeScreen;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;KIFUITestActor+EXAdditions.m&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &#34;KIFUITestActor+EXAdditions.h&#34;&#xA;&#xA;@implementation KIFUITestActor (EXAdditions)&#xA;&#xA;- (void)navigateToLoginPage&#xA;{&#xA;    [self tapViewWithAccessibilityLabel:@&#34;Login/Sign Up&#34;];&#xA;    [self tapViewWithAccessibilityLabel:@&#34;Skip this ad&#34;];&#xA;}&#xA;&#xA;- (void)returnToLoggedOutHomeScreen&#xA;{&#xA;    [self tapViewWithAccessibilityLabel:@&#34;Logout&#34;];&#xA;    [self tapViewWithAccessibilityLabel:@&#34;Logout&#34;]; // Dismiss alert.&#xA;}&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Everything should now be configured. When you run the integration tests using the test button, ⌘U, or the Xcode Test Navigator (⌘5).&lt;/p&gt; &#xA;&lt;h2&gt;Use with other testing frameworks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;KIFTestCase&lt;/code&gt; is not necessary for running Tests. Tests can run directly in &lt;code&gt;XCTestCase&lt;/code&gt; or any subclass. The basic requirement is that when you call &lt;code&gt;tester&lt;/code&gt; or &lt;code&gt;system&lt;/code&gt;, &lt;code&gt;self&lt;/code&gt; must be an instance of &lt;code&gt;XCTestCase&lt;/code&gt; and you must call &lt;code&gt;KIFEnableAccessibility&lt;/code&gt; in &lt;code&gt;setUp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following &lt;a href=&#34;https://github.com/specta/specta&#34;&gt;Specta&lt;/a&gt; test works without any changes to KIF or Specta:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;Specta.h&amp;gt;&#xA;#import &amp;lt;KIF.h&amp;gt;&#xA;&#xA;SpecBegin(App)&#xA;&#xA;describe(@&#34;Tab controller&#34;, ^{&#xA;&#xA;  it(@&#34;should show second view when I tap on the second tab&#34;, ^{&#xA;    [tester tapViewWithAccessibilityLabel:@&#34;Second&#34; traits:UIAccessibilityTraitButton];&#xA;    [tester waitForViewWithAccessibilityLabel:@&#34;Second View&#34;];&#xA;  });&#xA;&#xA;});&#xA;&#xA;SpecEnd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use KIF with a test runner that does not subclass &lt;code&gt;XCTestCase&lt;/code&gt;, your runner class just needs to implement the &lt;code&gt;KIFTestActorDelegate&lt;/code&gt; protocol which contains two required methods.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(void)failWithException:(NSException *)exception stopTest:(BOOL)stop;&lt;/li&gt; &#xA; &lt;li&gt;(void)failWithExceptions:(NSArray *)exceptions stopTest:(BOOL)stop;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the first case, the test runner should log the exception and halt the test execution if &lt;code&gt;stop&lt;/code&gt; is &lt;code&gt;YES&lt;/code&gt;. In the second, the runner should log all the exceptions and halt the test execution if &lt;code&gt;stop&lt;/code&gt; is &lt;code&gt;YES&lt;/code&gt;. The exceptions take advantage of KIF&#39;s extensions to &lt;code&gt;NSException&lt;/code&gt; that include the &lt;code&gt;lineNumber&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt; in the exception&#39;s &lt;code&gt;userData&lt;/code&gt; to record the error&#39;s origin.&lt;/p&gt; &#xA;&lt;h2&gt;Use with Swift&lt;/h2&gt; &#xA;&lt;p&gt;Since it&#39;s easy to combine Swift and Objective-C code in a single project, KIF is fully capable of testing apps written in both Objective-C and Swift.&lt;/p&gt; &#xA;&lt;p&gt;If you want to write your test cases in Swift, you&#39;ll need to keep two things in mind.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your test bundle&#39;s bridging header will need to &lt;code&gt;#import &amp;lt;KIF/KIF.h&amp;gt;&lt;/code&gt;, since KIF is a static library and not a header.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;tester&lt;/code&gt; and &lt;code&gt;system&lt;/code&gt; keywords are C preprocessor macros which aren&#39;t available in Swift. You can easily write a small extension to &lt;code&gt;XCTestCase&lt;/code&gt; or any other class to access them:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension XCTestCase {&#xA;    func tester(file : String = #file, _ line : Int = #line) -&amp;gt; KIFUITestActor {&#xA;        return KIFUITestActor(inFile: file, atLine: line, delegate: self)&#xA;    }&#xA;&#xA;    func system(file : String = #file, _ line : Int = #line) -&amp;gt; KIFSystemTestActor {&#xA;        return KIFSystemTestActor(inFile: file, atLine: line, delegate: self)&#xA;    }&#xA;}&#xA;&#xA;extension KIFTestActor {&#xA;    func tester(file : String = #file, _ line : Int = #line) -&amp;gt; KIFUITestActor {&#xA;        return KIFUITestActor(inFile: file, atLine: line, delegate: self)&#xA;    }&#xA;&#xA;    func system(file : String = #file, _ line : Int = #line) -&amp;gt; KIFSystemTestActor {&#xA;        return KIFSystemTestActor(inFile: file, atLine: line, delegate: self)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See Documentation/Examples/Testable Swift for sample code.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Simulator launches but app doesn&#39;t appear, steps time out after 10 seconds&lt;/h3&gt; &#xA;&lt;p&gt;This issue occurs when XCTest does not have a valid Test Host. Reread the instructions above with regards to the &#34;Bundle Loader&#34; and &#34;Test Host&#34; settings. You may have missed something.&lt;/p&gt; &#xA;&lt;h3&gt;Step fails because a view cannot be found&lt;/h3&gt; &#xA;&lt;p&gt;If KIF is failing to find a view, the most likely cause is that the view doesn&#39;t have its accessibility label set. If the view is defined in a xib, then the label can be set using the inspector. If it&#39;s created programmatically, simply set the accessibilityLabel attribute to the desired label.&lt;/p&gt; &#xA;&lt;p&gt;If the label is definitely set correctly, take a closer look at the error given by KIF. This error should tell you more specifically why the view was not accessible. If you are using &lt;code&gt;-waitForTappableViewWithAccessibilityLabel:&lt;/code&gt;, then make sure the view is actually tappable. For items such as labels which cannot become the first responder, you may need to use &lt;code&gt;-waitForViewWithAccessibilityLabel:&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h3&gt;Unrecognized selector when first trying to run&lt;/h3&gt; &#xA;&lt;p&gt;If the first time you try to run KIF you get the following error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2011-06-13 13:54:53.295 Testable (Integration Tests)[12385:207] -[NSFileManager createUserDirectory:]: unrecognized selector sent to instance 0x4e02830&#xA;2011-06-13 13:54:53.298 Testable (Integration Tests)[12385:207] *** Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;, reason: &#39;-[NSFileManager createUserDirectory:]: unrecognized selector sent to instance 0x4e02830&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you get another &#34;unrecognized selector&#34; error inside the KIF code, make sure that you&#39;ve properly set the -ObjC flag as described above. Without this flag your app can&#39;t access the category methods that are necessary for KIF to work properly.&lt;/p&gt; &#xA;&lt;h2&gt;Continuous Integration&lt;/h2&gt; &#xA;&lt;p&gt;A continuous integration (CI) process is highly recommended and is extremely useful in ensuring that your application stays functional. The easiest way to do this will be with Xcode, either using Bots, or Jenkins or another tool that uses xcodebuild. For tools using xcodebuild, review the manpage for instructions on using test destinations.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re glad you&#39;re interested in KIF, and we&#39;d love to see where you take it.&lt;/p&gt; &#xA;&lt;p&gt;Any contributors to the master KIF repository must sign the &lt;a href=&#34;https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&amp;amp;ndplr=1&#34;&gt;Individual Contributor License Agreement (CLA)&lt;/a&gt;. It&#39;s a short form that covers our bases and makes sure you&#39;re eligible to contribute.&lt;/p&gt; &#xA;&lt;p&gt;When you have a change you&#39;d like to see in the master repository, &lt;a href=&#34;https://github.com/kif-framework/KIF/pulls&#34;&gt;send a pull request&lt;/a&gt;. Before we merge your request, we&#39;ll make sure you&#39;re in the list of people who have signed a CLA.&lt;/p&gt; &#xA;&lt;p&gt;Thanks, and happy testing!&lt;/p&gt;</summary>
  </entry>
</feed>