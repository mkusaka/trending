<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-01T02:06:27Z</updated>
  <subtitle>Monthly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>londonappbrewery/mi_card_flutter</title>
    <updated>2024-02-01T02:06:27Z</updated>
    <id>tag:github.com,2024-02-01:/londonappbrewery/mi_card_flutter</id>
    <link href="https://github.com/londonappbrewery/mi_card_flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starter code for the Mi Card Project from the Complete Flutter Development Bootcamp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/AppBreweryBanner.png&#34; alt=&#34;App Brewery Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Mi Card&lt;/h1&gt; &#xA;&lt;h2&gt;Our Goal&lt;/h2&gt; &#xA;&lt;p&gt;Now that you&#39;ve seen how to create a Flutter app entirely from scratch, we&#39;re going to go further and learn more about how to design user interfaces for Flutter apps.&lt;/p&gt; &#xA;&lt;h2&gt;What you will create&lt;/h2&gt; &#xA;&lt;p&gt;Mi Card is a personal business card. Imagine every time you wanted to give someone your contact details or your business card but you didn&#39;t have it on you. Well, now you can get them to download your business card as an app.&lt;/p&gt; &#xA;&lt;h2&gt;What you will learn&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to create Stateless Widgets&lt;/li&gt; &#xA; &lt;li&gt;What is the difference between hot reload and hot refresh and running an app from cold&lt;/li&gt; &#xA; &lt;li&gt;How to use Containers to lay out your UI&lt;/li&gt; &#xA; &lt;li&gt;How to use Columns and Rows to position your UI elements&lt;/li&gt; &#xA; &lt;li&gt;How to add custom fonts&lt;/li&gt; &#xA; &lt;li&gt;How to add Material icons&lt;/li&gt; &#xA; &lt;li&gt;How to style Text widgets&lt;/li&gt; &#xA; &lt;li&gt;How to read and use Flutter Documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a companion project to The App Brewery&#39;s Complete Flutter Development Bootcamp, check out the full course at &lt;a href=&#34;https://www.appbrewery.co/&#34;&gt;www.appbrewery.co&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/londonappbrewery/Images/raw/master/readme-end-banner.png&#34; alt=&#34;End Banner&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nakst/gf</title>
    <updated>2024-02-01T02:06:27Z</updated>
    <id>tag:github.com,2024-02-01:/nakst/gf</id>
    <link href="https://github.com/nakst/gf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A GDB frontend for Linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;gf&lt;/strong&gt; â€“ A GDB Frontend&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/nakst/gf/ci.yml?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nakst/cdn/main/gf2.png&#34; alt=&#34;Screenshot of the debugger&#39;s interface, showing the source view, breakpoints list, call stack, bitmap viewer, and command prompt.&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/nakst/cdn/main/gf1.png&#34; alt=&#34;Another screenshot, showing the watch window and different color scheme.&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/nakst/cdn/main/gf3.png&#34; alt=&#34;Another screenshot, showing the disassembly and register windows.&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Download this project&#39;s source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/nakst/gf.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And compile the application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# linux&#xA;./build.sh&#xA;&#xA;# freebsd&#xA;./build_freebsd.sh&#xA;&#xA;# netbsd&#xA;./build_netbsd.sh&#xA;&#xA;# openbsd&#xA;./build_openbsd.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please read the rest of this file to learn about using and configuring &lt;code&gt;gf&lt;/code&gt;. If you&#39;re new to GDB, see &lt;a href=&#34;https://handmade.network/forums/articles/t/2883-gdb&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to make a debug build of &lt;code&gt;gf&lt;/code&gt;, use a command like &lt;code&gt;g++ gf2.cpp -g -lX11 -pthread&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can run the application with &lt;code&gt;./gf2&lt;/code&gt;. Any additional command line arguments passed to &lt;code&gt;gf&lt;/code&gt; will be forwarded to GDB.&lt;/li&gt; &#xA; &lt;li&gt;Press Ctrl+Shift+P to synchronize your working directory with GDB after you start your target executable. This is necessary if you open &lt;code&gt;gf&lt;/code&gt; in a different directory to the one you compile in.&lt;/li&gt; &#xA; &lt;li&gt;To view RGBA bitmaps, select the &lt;code&gt;Data&lt;/code&gt; tab and then select &lt;code&gt;Add bitmap...&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ctrl+Click a line in the source view to run &#34;until&#34; that line. Shift+Click a line in the source view to skip to it without executing the code in between.&lt;/li&gt; &#xA; &lt;li&gt;Press Shift+F10 to step out of a block, and press Shift+F11 to step out a function.&lt;/li&gt; &#xA; &lt;li&gt;Press Tab while entering a watch expression to auto-complete it.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;/&lt;/code&gt; with a watch expression highlighted to change the format specifier. For example, &lt;code&gt;/x&lt;/code&gt; switches to hexadecimal view.&lt;/li&gt; &#xA; &lt;li&gt;Press backtick to enter line inspect mode. This mode evaluates all expressions on the current line.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;gf2 --rr-replay&lt;/code&gt; for replaying a trace recorded by &lt;a href=&#34;https://rr-project.org/&#34;&gt;rr&lt;/a&gt;. Use Ctrl+Shift+(F5/F10/F11) for reverse continue and step.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may want to add the following commands to your &lt;code&gt;~/.gdbinit&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set breakpoint pending on&#xA;set disassembly-flavor intel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;p&gt;On startup, settings are loaded from &lt;code&gt;~/.config/gf2_config.ini&lt;/code&gt;, followed by &lt;code&gt;.project.gf&lt;/code&gt;. This is an INI-style file.&lt;/p&gt; &#xA;&lt;h3&gt;GDB configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can pass additional arguments to GDB in the &lt;code&gt;[gdb]&lt;/code&gt; section. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[gdb]&#xA;arguments=-nx -ex record&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change the location of the GDB executable. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[gdb]&#xA;path=/home/a/opt/gdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can direct all output from GDB to be sent to the &#34;Log&#34; window, if you have one in your layout string. This will work even if you haven&#39;t setup a log pipe. This can be used to view the stderr output from your target dynamically as it is running.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[gdb]&#xA;log_all_output=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can disable the confirmation dialogs for the kill (F3) and connect (F4) commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[gdb]&#xA;confirm_command_kill=0&#xA;confirm_command_connect=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can limit the number of stack frames in the stack window (the default is 50).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[gdb]&#xA;backtrace_count_limit=50&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom keyboard shortcuts&lt;/h3&gt; &#xA;&lt;p&gt;Keyboard shortcuts are placed in the &lt;code&gt;[shortcuts]&lt;/code&gt; section. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[shortcuts]&#xA;Ctrl+I=print i&#xA;Ctrl+Shift+F10=reverse-next&#xA;Ctrl+Shift+F11=reverse-step&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use any standard GDB command, or any of the commands listed in &#34;Special commands&#34; below.&lt;/p&gt; &#xA;&lt;h3&gt;User interface&lt;/h3&gt; &#xA;&lt;p&gt;You can change the font and user interface scaling in the &lt;code&gt;[ui]&lt;/code&gt; section. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[ui]&#xA;scale=1.5&#xA;font_path=/usr/share/fonts/TTF/DejaVuSansMono.ttf&#xA;font_size_interface=17&#xA;font_size_code=20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the font, FreeType must have been available when you compiled gf. You can enable subpixel font rendering by recompiling with &lt;code&gt;extra_flags=-DUI_FREETYPE_SUBPIXEL ./build.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also configure the interface layout, with the &lt;code&gt;layout&lt;/code&gt; parameter. Use &lt;code&gt;h(position,left,right)&lt;/code&gt; to create a horizontal split, &lt;code&gt;v(position,left,right)&lt;/code&gt; to create a vertical split, and &lt;code&gt;t(...)&lt;/code&gt; to create a tab pane. This value should not contain any whitespace. Please note this value is not validated, so make sure it is formatted correctly!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;layout=h(75,v(75,Source,Console),v(50,t(Watch,Breakpoints,Commands,Struct,Exe),t(Stack,Files,Registers,Data,Thread))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB: Horizontal and vertical splits must have exactly two children.&lt;/strong&gt; Instead, you can nest them to create more complex layouts.&lt;/p&gt; &#xA;&lt;p&gt;You can maximize the window at startup with &lt;code&gt;maximize=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can request for the expressions in the watch window to be saved and restored by setting &lt;code&gt;restore_watch_window=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can allow selecting text in the source window by setting &lt;code&gt;selectable_source=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Themes&lt;/h3&gt; &#xA;&lt;p&gt;You can change the theme in the &lt;code&gt;theme&lt;/code&gt; section. See &lt;a href=&#34;https://github.com/nakst/gf/wiki/Themes&#34;&gt;https://github.com/nakst/gf/wiki/Themes&lt;/a&gt; for a list of examples.&lt;/p&gt; &#xA;&lt;h3&gt;Preset commands&lt;/h3&gt; &#xA;&lt;p&gt;You can create a list of quickly accessible commands, available in the &#34;Commands&#34; tab in the UI. Separate individual commands using a semicolon. Each command in the list is run one after another; to run the final command asynchronously, put a &lt;code&gt;&amp;amp;&lt;/code&gt; at the end. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[commands]&#xA;Compile=shell gcc -o bin/app src/main.c&#xA;Run normal=file bin/app;run&amp;amp;&#xA;Run tests=file bin/app;run test_cases.txt&amp;amp;&#xA;Set breakpoints=b main;b LoadFile;b AssertionFailure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use any standard GDB command, or any of the commands listed in &#34;Special commands&#34; below.&lt;/p&gt; &#xA;&lt;h3&gt;Vim integration&lt;/h3&gt; &#xA;&lt;p&gt;You can change the server name with the &lt;code&gt;server_name&lt;/code&gt; key in the &lt;code&gt;vim&lt;/code&gt; section. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[vim]&#xA;server_name=MyVimServer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Control pipe&lt;/h2&gt; &#xA;&lt;p&gt;You can change the loaded file and line by sending commands to the control pipe.&lt;/p&gt; &#xA;&lt;p&gt;First, you must set the location of the control pipe. In the &lt;code&gt;[pipe]&lt;/code&gt; section of the configuration file, set the &lt;code&gt;control&lt;/code&gt; key to the absolute path where you want the control pipe to be.&lt;/p&gt; &#xA;&lt;p&gt;Then, you can send commands to the pipe. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Load the specified file (must be a full path).&#xA;echo f /home/a/test.c &amp;gt; /home/a/control_pipe.dat&#xA;&#xA;# Go to line 123.&#xA;echo l 123 &amp;gt; /home/a/control_pipe.dat&#xA;&#xA;# Send a GDB command.&#xA;echo c file myapp &amp;gt; /home/a/control_pipe.dat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be used for text editor integration.&lt;/p&gt; &#xA;&lt;h2&gt;Log window&lt;/h2&gt; &#xA;&lt;p&gt;You can show messages send to a pipe using the log window.&lt;/p&gt; &#xA;&lt;p&gt;First, you must set the location of the log pipe. In the &lt;code&gt;[pipe]&lt;/code&gt; section of the configuration file, set the &lt;code&gt;log&lt;/code&gt; key to the absolute path where you want the log pipe to be. Next, you must add the &#34;Log&#34; window somewhere in your layout string (see the &#34;User interface&#34; section above). Once configured, you can then send messages to the pipe and they will appear in the log window.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of how to send messages to the pipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define LOG(...) do { fprintf(logFile, __VA_ARGS__); fflush(logFile); } while (0)&#xA;#define LOG_OPEN(path) logFile = fopen(path, &#34;w&#34;)&#xA;FILE *logFile;&#xA;&#xA;...&#xA;&#xA;LOG_OPEN(&#34;...&#34;);&#xA;LOG(&#34;Hello, world!\n&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Special commands&lt;/h2&gt; &#xA;&lt;h3&gt;gf-step&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-step&lt;/code&gt; either steps a single line (&lt;code&gt;step&lt;/code&gt;) or single instruction (&lt;code&gt;stepi&lt;/code&gt;), depending whether disassembly view is active.&lt;/p&gt; &#xA;&lt;h3&gt;gf-next&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-next&lt;/code&gt; either steps over a single line (&lt;code&gt;next&lt;/code&gt;) or single instruction (&lt;code&gt;nexti&lt;/code&gt;), depending whether disassembly view is active.&lt;/p&gt; &#xA;&lt;h3&gt;gf-step-out-of-block&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-step-out-of-block&lt;/code&gt; steps out of the current block. That is, it steps to the next line after the first unmatched &lt;code&gt;}&lt;/code&gt;, starting from the current line.&lt;/p&gt; &#xA;&lt;h3&gt;gf-restart-gdb&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-restart-gdb&lt;/code&gt; restarts the GDB process immediately. Any state such as loaded symbol files or breakpoints will be lost.&lt;/p&gt; &#xA;&lt;h3&gt;gf-get-pwd&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-get-pwd&lt;/code&gt; asks GDB for the working directory in which the current executable file was compiled. This ensures the source view tries to load files from the correct directory.&lt;/p&gt; &#xA;&lt;h3&gt;gf-switch-to&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-switch-to &amp;lt;window-name&amp;gt;&lt;/code&gt; switches to a specific window. The window names are the same as given in the layout string, as seen in the &#34;User interface&#34; section.&lt;/p&gt; &#xA;&lt;h3&gt;gf-command&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-command &amp;lt;name&amp;gt;&lt;/code&gt; runs the command(s) corresponding to &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; in the &lt;code&gt;[commands]&lt;/code&gt; section of your configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;gf-inspect-line&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-inspect-line&lt;/code&gt; toggles inspect line mode. By default, this is bound to the backtick key.&lt;/p&gt; &#xA;&lt;h2&gt;Watch window hooks&lt;/h2&gt; &#xA;&lt;p&gt;You can customize the behaviour of the watch window when displaying specific types using Python. When the watch window wants to display the fields of a value, it will look a hook function at &lt;code&gt;gf_hooks[type_of_value]&lt;/code&gt;. The hook function should take two arguments, &lt;code&gt;item&lt;/code&gt; and &lt;code&gt;field&lt;/code&gt;. If the hook function exists, it will be called in one of two ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When the watch window needs a list of the fields in the value, it calls the hook with &lt;code&gt;item&lt;/code&gt; set to an opaque handle and &lt;code&gt;field&lt;/code&gt; set to &lt;code&gt;None&lt;/code&gt;. You should print out a list of all the names of the fields in the value, one on each line. You can print out all the standard fields by calling &lt;code&gt;_gf_fields_recurse(item)&lt;/code&gt;. &lt;strong&gt;When adding custom fields, their names must be enclosed by &lt;code&gt;[]&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;When the watch window needs to get the value of a specific custom field in the value, it calls the hook with &lt;code&gt;item&lt;/code&gt; set to a &lt;code&gt;gdb.Value&lt;/code&gt; for the value, and &lt;code&gt;field&lt;/code&gt; to the name of the custom field that was added. &lt;strong&gt;The hook is not called for standard fields.&lt;/strong&gt; You should return a &lt;code&gt;gdb.Value&lt;/code&gt; that gives the value of the field.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example, the following hook add a width and height custom field for a rectangle type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def RectangleHook(item, field):&#xA;    if field:&#xA;        if field == &#39;[width]&#39;:  &#xA;            # item[&#39;...&#39;] looks up a field in the struct, returned as a gdb.Value&#xA;            # int(...) converts the gdb.Value to an int so we can do arithmetic on it&#xA;            # gdb.Value(...) converts the result back to a gdb.Value&#xA;            return gdb.Value(int(item[&#39;right&#39;]) - item[&#39;left&#39;])&#xA;        if field == &#39;[height]&#39;: &#xA;            # do something similar for the height&#xA;            return gdb.Value(int(item[&#39;bottom&#39;]) - item[&#39;top&#39;])&#xA;    else:&#xA;        print(&#39;[width]&#39;)         # add the width custom field&#xA;        print(&#39;[height]&#39;)        # add the height custom field&#xA;        _gf_fields_recurse(item) # add the fields actually in the struct&#xA;&#xA;gf_hooks = { &#39;Rectangle&#39;: RectangleHook } # create the hook dictionary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to create a custom dynamic array type, instead of printing field names, print &lt;code&gt;(d_arr)&lt;/code&gt; followed by the number of array items. The fields will then be automatically populated in the form of &lt;code&gt;[%d]&lt;/code&gt;, where &lt;code&gt;%d&lt;/code&gt; is the index. For example, given the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct MyArray {&#xA;&#x9;int length;&#xA;&#x9;float *items;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the hook definition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def MyArrayHook(item, field):&#xA;&#x9;if field: return item[&#39;items&#39;][int(field[1:-1])]&#xA;&#x9;else: print(&#39;(d_arr)&#39;, int(item[&#39;length&#39;]))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Templates are removed from the name of the type. For example, &lt;code&gt;Array&amp;lt;int&amp;gt;&lt;/code&gt;, &lt;code&gt;Array&amp;lt;char *&amp;gt;&lt;/code&gt; and &lt;code&gt;Array&amp;lt;float&amp;gt;&lt;/code&gt; would all use the &lt;code&gt;Array&lt;/code&gt; hook.&lt;/p&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;There is a simple plugin system. Make a file called &lt;code&gt;plugins.cpp&lt;/code&gt; in the source code folder. It will be found automatically, and #included in the compilation of the main translation unit.&lt;/p&gt; &#xA;&lt;p&gt;gf uses the Luigi UI library. It is documented here: &lt;a href=&#34;https://github.com/nakst/luigi/raw/main/README.md&#34;&gt;https://github.com/nakst/luigi/blob/main/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can register new windows, command and data viewers in a constructor function. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;__attribute__((constructor)) &#xA;void MyPluginRegister() {&#xA;&#x9;interfaceWindows.Add({ &#xA;&#x9;&#x9;&#34;Hello&#34;, // The window&#39;s name. Used to match it against the UI layout string.&#xA;&#x9;&#x9;MyPluginHelloWindowCreate, // The callback to create an instance of the window.&#xA;&#x9;&#x9;MyPluginHelloWindowUpdate // The callback to update an instance of the window (called every time the target pauses/steps).&#xA;&#x9;});&#xA;&#xA;&#x9;interfaceDataViewers.Add({ &#xA;&#x9;&#x9;&#34;Add test...&#34;, // The label of the button to show in the Data tab.&#xA;&#x9;&#x9;MyPluginTestViewerCreate // The callback to create the data viewer.&#xA;&#x9;});&#xA;&#xA;&#x9;interfaceCommands.Add({ &#xA;&#x9;&#x9;&#34;My command&#34;, // The label to show in the application menu.&#xA;&#x9;&#x9;{ /* UIShortcut */ } &#xA;&#x9;});&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The interface window creation callback is passed the parent UIElement and should return the UIElement it creates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;UIElement *MyPluginHelloWindowCreate(UIElement *parent) {&#xA;&#x9;UIPanel *panel = UIPanelCreate(parent, UI_PANEL_GRAY | UI_PANEL_EXPAND);&#xA;&#x9;UILabelCreate(&amp;amp;panel-&amp;gt;e, 0, &#34;Hello, world!&#34;, -1);&#xA;&#x9;return &amp;amp;panel-&amp;gt;e;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The interface window update callback is passed the output of GDB from the most recent step, and the UIElement returned by the creation callback.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void MyPluginHelloWindowUpdate(const char *gdbOutput, UIElement *element) {&#xA;&#x9;// TODO Update the window.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The interface data viewer creation callback should create a MDI child of the data tab as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void MyPluginTestViewerCreate(void *unused) {&#xA;&#x9;UIMDIChild *window = UIMDIChildCreate(&amp;amp;dataWindow-&amp;gt;e, UI_MDI_CHILD_CLOSE_BUTTON, UI_RECT_1(0), &#34;Title&#34;, -1);&#xA;&#x9;// TODO Configure the viewer.&#xA;&#x9;UIElementRefresh(&amp;amp;dataWindow-&amp;gt;e);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For communicating with GDB, there are the following functions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// Evaluate an expression. The result is overwritten between calls!&#xA;const char *EvaluateExpression(const char *expression, const char *format = nullptr);&#xA;&#xA;// Send and run a command in GDB. Set `echo` to log the command in the console window. &#xA;// If `synchronous` is set the function will wait for the command to complete before it returns.&#xA;void DebuggerSend(const char *string, bool echo, bool synchronous);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many examples of how to do these things in &lt;code&gt;windows.cpp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;nakst&#xA;Philippe Mongeau phmongeau &#xA;Jimmy &#34;Keeba&#34; Lefevre JimmyLefevre &#xA;John Blat johnblat64 &#xA;IWouldRatherUsePasteBin&#xA;Gavin Beatty gavinbeatty&#xA;Michael Stopa StomyPX&#xA;Anders Kaare sqaxomonophonen&#xA;Arseniy Khvorov khvorov45&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extension pack&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nakst/cdn/main/unknown2.png&#34; alt=&#34;A screenshot showing the embedded profiler, which is displaying a multi-colored flame graph.&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/nakst/cdn/main/%20memory%20window%20and%20extended%20view%20window.png&#34; alt=&#34;A screenshot showing the memory window and extended watch expression view.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;~~All tiers on my Patreon, &lt;a href=&#34;https://www.patreon.com/nakst&#34;&gt;https://www.patreon.com/nakst&lt;/a&gt;, get access to the extension pack. ~~&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is now available to all; see the folder &lt;code&gt;extensions_v5&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This currently includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Embedded tracing profiler&lt;/li&gt; &#xA; &lt;li&gt;Memory window&lt;/li&gt; &#xA; &lt;li&gt;Extended watch expression view (for strings, matrices and base conversion)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nakst/cdn/main/waveform_viewer.mp4&#34;&gt;Waveform viewer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Full source code for the pack&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure you use the latest version of the extension pack with the latest commit of &lt;code&gt;gf&lt;/code&gt;, otherwise you&#39;ll likely run into compile or runtime errors!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>roothide/Bootstrap</title>
    <updated>2024-02-01T02:06:27Z</updated>
    <id>tag:github.com,2024-02-01:/roothide/Bootstrap</id>
    <link href="https://github.com/roothide/Bootstrap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A full featured bootstrap for ios14.0~17.0 (A8~A17,M1+M2)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bootstrap&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/roothide/Bootstrap/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/roothide/Bootstrap?style=social&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A full featured bootstrap for iOS 14.0-17.0 A8-A17 &amp;amp; M1+M2 using the arm64e deb architecture providing amazing support for jailbreak detection. (Currently only tested tested on iOS 15.0-17.0)&lt;/p&gt; &#xA;&lt;h5&gt;&lt;em&gt;WARNING:&lt;/em&gt; By using this software, you take full responsibility for what you do with it. Any modification to your device may cause irreparable damage.&lt;/h5&gt; &#xA;&lt;p&gt;This software is available to download on its &lt;a href=&#34;https://github.com/roothide/Bootstrap/releases&#34;&gt;Releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;If you do not have MacOS, check the FAQ in the Usage section of this README to build with GitHub Actions instead.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll need MacOS to build, as you require Xcode. Simply having Xcode Command Line Tools is &lt;em&gt;insufficient&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will need Homebrew installed. If you don&#39;t have Homebrew installed, run the following command in your terminal:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Update/Install Theos with roothide support&lt;/p&gt; &lt;p&gt;&lt;code&gt;bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/roothide/theos/master/bin/install-theos)&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This build of Theos is consistently updated.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install make&lt;/p&gt; &lt;p&gt;&lt;code&gt;brew install make&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the GitHub repository and enter directory&lt;/p&gt; &lt;p&gt;&lt;code&gt;git clone https://github.com/roothide/Bootstrap/ &amp;amp;&amp;amp; cd Bootstrap&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build &lt;code&gt;Bootstrap.tipa&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;gmake -j$(sysctl -n hw.ncpu) package&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Transfer &lt;code&gt;Bootstrap.tipa&lt;/code&gt; from &lt;code&gt;./packages/&lt;/code&gt; to your device and install it with TrollStore!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The latest version of TrollStore is required as the bootstrap is built around the CoreTrust bug. Developer mode also needs to be enabled, so use TrollStore version 2.0.9 or later to automatically enable it.&lt;/p&gt; &#xA;&lt;p&gt;Once you open the Bootstrap app, press Bootstrap. This will install the necessary apps and files.&lt;/p&gt; &#xA;&lt;p&gt;You can add various sources and install tweaks through Sileo, like other jailbreaks. You may need to convert tweaks to be roothide compatible if they aren&#39;t already converted or developed for this bootstrap.&lt;/p&gt; &#xA;&lt;p&gt;By default, tweaks are not injected into any apps. To enable tweak injection, click App List in the Bootstrap app, and toggle on an app you want to enable your tweaks in. You &lt;strong&gt;cannot&lt;/strong&gt; inject into SpringBoard (com.apple.springboard) at the moment by any official means, though refer to the FAQ for tools you can use to enable this functionality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A frequently updated FAQ&lt;/strong&gt; is currently available &lt;a href=&#34;https://github.com/dleovl/Bootstrap/raw/faq/README.md&#34;&gt;here&lt;/a&gt;, and can assist with tweak conversion along with answering other questions you may have.&lt;/p&gt; &#xA;&lt;h2&gt;Develop tweaks&lt;/h2&gt; &#xA;&lt;p&gt;Rootful and rootless tweaks aren&#39;t out-of-the-box compatible with this bootstrap, so you&#39;ll need to develop them specifically to support it. You can refer to the developer documentation &lt;a href=&#34;https://github.com/roothide/Developer&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Discord&lt;/h2&gt; &#xA;&lt;p&gt;You can join our Discord for support or general talk &lt;a href=&#34;https://discord.com/invite/scqCkumAYp&#34;&gt;here&lt;/a&gt;. There&#39;s a FAQ channel if you need any more information.&lt;/p&gt; &#xA;&lt;h2&gt;The &#34;Our Table&#34; Icon&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TheAlphaStream&#34;&gt;Alpha&lt;/a&gt; is the one who made the ProcursusTeam logo in the first place, and then edited by @sourcelocation&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Huge thanks to these people, we couldn&#39;t have completed this project without their help!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;absidue: &lt;a href=&#34;https://github.com/absidue&#34;&gt;https://github.com/absidue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;akusio: &lt;a href=&#34;https://twitter.com/akusio_rr&#34;&gt;https://twitter.com/akusio_rr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alfie: &lt;a href=&#34;https://alfiecg.uk&#34;&gt;https://alfiecg.uk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Amy While: &lt;a href=&#34;http://github.com/elihwyma&#34;&gt;http://github.com/elihwyma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Barron: &lt;a href=&#34;https://tweaksdev22.github.io&#34;&gt;https://tweaksdev22.github.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;BomberFish: &lt;a href=&#34;https://twitter.com/bomberfish77&#34;&gt;https://twitter.com/bomberfish77&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;bswbw: &lt;a href=&#34;https://twitter.com/bswbw&#34;&gt;https://twitter.com/bswbw&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Capt Inc: &lt;a href=&#34;http://github.com/captinc&#34;&gt;http://github.com/captinc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CKatri: &lt;a href=&#34;https://procursus.social/@cameron&#34;&gt;https://procursus.social/@cameron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clarity: &lt;a href=&#34;http://github.com/TheRealClarity&#34;&gt;http://github.com/TheRealClarity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cryptic: &lt;a href=&#34;http://github.com/Cryptiiiic&#34;&gt;http://github.com/Cryptiiiic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;dxcool223x: &lt;a href=&#34;https://twitter.com/dxcool223x&#34;&gt;https://twitter.com/dxcool223x&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dhinakg: &lt;a href=&#34;http://github.com/dhinakg&#34;&gt;http://github.com/dhinakg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DuyKhanhTran: &lt;a href=&#34;https://twitter.com/TranKha50277352&#34;&gt;https://twitter.com/TranKha50277352&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;dleovl: &lt;a href=&#34;https://github.com/dleovl&#34;&gt;https://github.com/dleovl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elias Sfeir: &lt;a href=&#34;https://twitter.com/eliassfeir1&#34;&gt;https://twitter.com/eliassfeir1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ellie: &lt;a href=&#34;https://twitter.com/elliessurviving&#34;&gt;https://twitter.com/elliessurviving&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;EquationGroups: &lt;a href=&#34;https://twitter.com/equationgroups&#34;&gt;https://twitter.com/equationgroups&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ã‰velyne: &lt;a href=&#34;http://github.com/evelyneee&#34;&gt;http://github.com/evelyneee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GeoSnOw: &lt;a href=&#34;https://twitter.com/fce365&#34;&gt;https://twitter.com/fce365&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;G3n3sis: &lt;a href=&#34;https://twitter.com/G3nNuk_e&#34;&gt;https://twitter.com/G3nNuk_e&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;hayden: &lt;a href=&#34;https://procursus.social/@hayden&#34;&gt;https://procursus.social/@hayden&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Huy Nguyen: &lt;a href=&#34;https://twitter.com/little_34306&#34;&gt;https://twitter.com/little_34306&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;iAdam1n: &lt;a href=&#34;https://twitter.com/iAdam1n&#34;&gt;https://twitter.com/iAdam1n&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;iarrays: &lt;a href=&#34;https://iarrays.com&#34;&gt;https://iarrays.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;iDownloadBlog: &lt;a href=&#34;https://twitter.com/idownloadblog&#34;&gt;https://twitter.com/idownloadblog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;iExmo: &lt;a href=&#34;https://twitter.com/iexmojailbreak&#34;&gt;https://twitter.com/iexmojailbreak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;iRaMzi: &lt;a href=&#34;https://twitter.com/iramzi7&#34;&gt;https://twitter.com/iramzi7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jonathan: &lt;a href=&#34;https://twitter.com/jontelang&#34;&gt;https://twitter.com/jontelang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kevin: &lt;a href=&#34;https://github.com/iodes&#34;&gt;https://github.com/iodes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;kirb: &lt;a href=&#34;http://github.com/kirb&#34;&gt;http://github.com/kirb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;laileld: &lt;a href=&#34;https://twitter.com/h_h_x_t&#34;&gt;https://twitter.com/h_h_x_t&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Leptos: &lt;a href=&#34;https://github.com/leptos-null&#34;&gt;https://github.com/leptos-null&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;limneos: &lt;a href=&#34;https://twitter.com/limneos&#34;&gt;https://twitter.com/limneos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lightmann: &lt;a href=&#34;https://github.com/L1ghtmann&#34;&gt;https://github.com/L1ghtmann&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linus Henze: &lt;a href=&#34;http://github.com/LinusHenze&#34;&gt;http://github.com/LinusHenze&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MasterMike: &lt;a href=&#34;https://ios.cfw.guide&#34;&gt;https://ios.cfw.guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Misty: &lt;a href=&#34;https://twitter.com/miscmisty&#34;&gt;https://twitter.com/miscmisty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Muirey03: &lt;a href=&#34;https://twitter.com/Muirey03&#34;&gt;https://twitter.com/Muirey03&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nathan: &lt;a href=&#34;https://github.com/verygenericname&#34;&gt;https://github.com/verygenericname&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nebula: &lt;a href=&#34;https://itsnebula.net&#34;&gt;https://itsnebula.net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;niceios: &lt;a href=&#34;https://twitter.com/niceios&#34;&gt;https://twitter.com/niceios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nightwind: &lt;a href=&#34;https://twitter.com/NightwindDev&#34;&gt;https://twitter.com/NightwindDev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nick Chan: &lt;a href=&#34;https://nickchan.lol&#34;&gt;https://nickchan.lol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;nzhaonan: &lt;a href=&#34;https://twitter.com/nzhaonan&#34;&gt;https://twitter.com/nzhaonan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;omrkujman: &lt;a href=&#34;https://twitter.com/omrkujman&#34;&gt;https://twitter.com/omrkujman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;opa334: &lt;a href=&#34;http://github.com/opa334&#34;&gt;http://github.com/opa334&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;onejailbreak: &lt;a href=&#34;https://twitter.com/onejailbreak_&#34;&gt;https://twitter.com/onejailbreak_&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Phuc Do: &lt;a href=&#34;https://twitter.com/dobabaophuc&#34;&gt;https://twitter.com/dobabaophuc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PoomSmart: &lt;a href=&#34;https://twitter.com/poomsmart&#34;&gt;https://twitter.com/poomsmart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ProcursusTeam: &lt;a href=&#34;https://procursus.social/@team&#34;&gt;https://procursus.social/@team&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;roothide: &lt;a href=&#34;http://github.com/roothide&#34;&gt;http://github.com/roothide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sam Bingner: &lt;a href=&#34;http://github.com/sbingner&#34;&gt;http://github.com/sbingner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shadow-: &lt;a href=&#34;http://iosjb.top/&#34;&gt;http://iosjb.top/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Snail: &lt;a href=&#34;https://twitter.com/somnusix&#34;&gt;https://twitter.com/somnusix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SquidGesture: &lt;a href=&#34;https://twitter.com/lclrc&#34;&gt;https://twitter.com/lclrc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;sourcelocation: &lt;a href=&#34;http://github.com/sourcelocation&#34;&gt;http://github.com/sourcelocation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SeanIsTethered: &lt;a href=&#34;https://github.com/jailbreakmerebooted&#34;&gt;http://github.com/jailbreakmerebooted&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TheosTeam: &lt;a href=&#34;https://theos.dev&#34;&gt;https://theos.dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tigisoftware: &lt;a href=&#34;https://twitter.com/tigisoftware&#34;&gt;https://twitter.com/tigisoftware&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tihmstar: &lt;a href=&#34;https://twitter.com/tihmstar&#34;&gt;https://twitter.com/tihmstar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;xina520: &lt;a href=&#34;https://twitter.com/xina520&#34;&gt;https://twitter.com/xina520&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;xybp888: &lt;a href=&#34;https://twitter.com/xybp888&#34;&gt;https://twitter.com/xybp888&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;xsf1re: &lt;a href=&#34;https://twitter.com/xsf1re&#34;&gt;https://twitter.com/xsf1re&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;yandevelop: &lt;a href=&#34;https://twitter.com/yandevelop&#34;&gt;https://twitter.com/yandevelop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YourRepo: &lt;a href=&#34;https://twitter.com/yourepo&#34;&gt;https://twitter.com/yourepo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>