<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-01T01:56:07Z</updated>
  <subtitle>Monthly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>segmentio/analytics-ios</title>
    <updated>2025-08-01T01:56:07Z</updated>
    <id>tag:github.com,2025-08-01:/segmentio/analytics-ios</id>
    <link href="https://github.com/segmentio/analytics-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The hassle-free way to integrate analytics into any iOS application.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;‚ö†Ô∏è End-of-Support Announcement for Analytics-iOS - March 2026 ‚ö†Ô∏è&lt;/h2&gt; &#xA;&lt;p&gt;The end-of-support (EoS) for the Analytics-iOS SDK is scheduled for March 2026.&lt;/p&gt; &#xA;&lt;p&gt;Segment&#39;s future development efforts concentrate on the new &lt;a href=&#34;https://segment.com/docs/connections/sources/catalog/libraries/mobile/apple/&#34;&gt;Analytics-Swift&lt;/a&gt; SDK. If you&#39;d like to migrate to Analytics-Swift, see the &lt;a href=&#34;https://segment.com/docs/connections/sources/catalog/libraries/mobile/apple/migration/&#34;&gt;migration guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Analytics&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/segmentio/analytics-ios&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/segmentio/analytics-ios.svg?style=shield&amp;amp;circle-token=31c5b3e5edeb404b30141ead9dcef3eb37d16d4d&#34; alt=&#34;Circle CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org//pods/Analytics&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Analytics.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Analytics&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Analytics.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/segmentio/analytics-ios&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/segmentio/analytics-ios/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-Compatible-F05138.svg?sanitize=true&#34; alt=&#34;SwiftPM Compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;analytics-ios is an iOS client for Segment.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/tonyxiao&#34;&gt;Tony Xiao&lt;/a&gt;, &lt;a href=&#34;https://github.com/lhasiuk&#34;&gt;Lee Hasiuk&lt;/a&gt; and &lt;a href=&#34;https://github.com/cristianbica&#34;&gt;Cristian Bica&lt;/a&gt; for their contributions to the library!&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/16131737/53752615-e66b8000-3e63-11e9-98f6-f478c7076537.png&#34;&gt; &#xA; &lt;p&gt;&lt;b&gt;&lt;i&gt;You can&#39;t fix what you can&#39;t measure&lt;/i&gt;&lt;/b&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Analytics helps you measure your users, product, and business. It unlocks insights into your app&#39;s funnel, core business metrics, and whether you have product-market fit.&lt;/p&gt; &#xA;&lt;h2&gt;How to get started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Collect analytics data&lt;/strong&gt; from your app(s). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The top 200 Segment companies collect data from 5+ source types (web, mobile, server, CRM, etc.).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Send the data to analytics tools&lt;/strong&gt; (for example, Google Analytics, Amplitude, Mixpanel). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Over 250+ Segment companies send data to eight categories of destinations such as analytics tools, warehouses, email marketing and remarketing systems, session recording, and more.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Explore your data&lt;/strong&gt; by creating metrics (for example, new signups, retention cohorts, and revenue generation). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The best Segment companies use retention cohorts to measure product market fit. Netflix has 70% paid retention after 12 months, 30% after 7 years.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://segment.com&#34;&gt;Segment&lt;/a&gt; collects analytics data and allows you to send it to more than 250 apps (such as Google Analytics, Mixpanel, Optimizely, Facebook Ads, Slack, Sentry) just by flipping a switch. You only need one Segment code snippet, and you can turn integrations on and off at will, with no additional code. &lt;a href=&#34;https://app.segment.com/signup&#34;&gt;Sign up with Segment today&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Why?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Power all your analytics apps with the same data&lt;/strong&gt;. Instead of writing code to integrate all of your tools individually, send data to Segment, once.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install tracking for the last time&lt;/strong&gt;. We&#39;re the last integration you&#39;ll ever need to write. You only need to instrument Segment once. Reduce all of your tracking code and advertising tags into a single set of API calls.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send data from anywhere&lt;/strong&gt;. Send Segment data from any device, and we&#39;ll transform and send it on to any tool.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Query your data in SQL&lt;/strong&gt;. Slice, dice, and analyze your data in detail with Segment SQL. We&#39;ll transform and load your customer behavioral data directly from your apps into Amazon Redshift, Google BigQuery, or Postgres. Save weeks of engineering time by not having to invent your own data warehouse and ETL pipeline.&lt;/p&gt; &lt;p&gt;For example, you can capture data on any app:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;analytics.track(&#39;Order Completed&#39;, { price: 99.84 })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then, query the resulting data in SQL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from app.order_completed&#xA;order by price desc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;üöÄ Startup Program&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://segment.com/startups&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16131737/53128952-08d3d400-351b-11e9-9730-7da35adda781.png&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; If you are part of a new startup (&amp;lt;$5M raised, &amp;lt;2 years since founding), we just launched a new startup program for you. You can get a Segment Team plan (up to &#xA;&lt;b&gt;$25,000 value&lt;/b&gt; in Segment credits) for free up to 2 years ‚Äî &#xA;&lt;a href=&#34;https://segment.com/startups/&#34;&gt;apply here&lt;/a&gt;! &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Analytics is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; and &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#34;Analytics&#34;, &#34;3.7.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Segment &lt;em&gt;strongly&lt;/em&gt; recommends that you use a dynamic framework to manage your project dependencies. If you prefer static libraries, you can add &lt;code&gt;use_modular_headers!&lt;/code&gt; or &lt;code&gt;use_frameworks! :linkage =&amp;gt; :static&lt;/code&gt; in your Podfile. However, you must then &lt;em&gt;manually update&lt;/em&gt; all of your dependencies on a regular schedule.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;segmentio/analytics-ios&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager (SPM)&lt;/h3&gt; &#xA;&lt;p&gt;To add analytics-ios via Swift Package Mangaer, it is possible to add it one of two ways:&lt;/p&gt; &#xA;&lt;h4&gt;Xcode&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/917994/119199146-69765200-ba3f-11eb-9173-93cfb5f3cabd.png&#34; alt=&#34;Xcode Add SPM Package&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/917994/119199143-68ddbb80-ba3f-11eb-9bf2-5dc11c208abd.png&#34; alt=&#34;ChoosePackageRepository&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/917994/119199139-67ac8e80-ba3f-11eb-9941-fc541030f3df.png&#34; alt=&#34;ChoosePackageOptions&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Package.swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;MyApplication&#34;,&#xA;    dependencies: [&#xA;        // Add a package containing Analytics as the name along with the git url&#xA;        .package(&#xA;            name: &#34;Segment&#34;,&#xA;            url: &#34;git@github.com:segmentio/analytics-ios.git&#34;&#xA;        )&#xA;    ],&#xA;    targets: [&#xA;        name: &#34;MyApplication&#34;,&#xA;        dependencies: [&#34;Segment&#34;] // Add Analytics as a dependency of your application&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Segment recommends that you use Xcode to add your package.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the Quickstart documentation at &lt;a href=&#34;https://segment.com/docs/libraries/ios/quickstart/&#34;&gt;https://segment.com/docs/libraries/ios/quickstart&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;More detailed documentation is available at &lt;a href=&#34;https://segment.com/docs/libraries/ios/&#34;&gt;https://segment.com/docs/libraries/ios&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>okta/okta-oidc-ios</title>
    <updated>2025-08-01T01:56:07Z</updated>
    <id>tag:github.com,2025-08-01:/okta/okta-oidc-ios</id>
    <link href="https://github.com/okta/okta-oidc-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Okta with AppAuth&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://devforum.okta.com/&#34;&gt;&lt;img src=&#34;https://aws1.discourse-cdn.com/standard14/uploads/oktadev/original/1X/0c6402653dfb70edc661d4976a43a46f33e5e919.png&#34; align=&#34;right&#34; width=&#34;256px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/okta/okta-oidc-ios&#34;&gt;&lt;img src=&#34;https://github.com/okta/okta-oidc-ios/actions/workflows/okta-oidc.yml/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/OktaOidc&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/OktaOidc.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/OktaOidc&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/OktaOidc.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/OktaOidc&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platforms-ios%20%7C%20osx-lightgrey&#34; alt=&#34;Platforms&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5.0-orange.svg?style=flat&#34; alt=&#34;Swift&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Okta Open ID Connect Library&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a new version of this SDK, the new pod name is &lt;a href=&#34;https://cocoapods.org/pods/OktaOidc&#34;&gt;OktaOidc&lt;/a&gt;. The old &lt;a href=&#34;https://cocoapods.org/pods/OktaAuth&#34;&gt;OktaAuth&lt;/a&gt; pod is now deprecated.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This library is a Swift wrapper around the &lt;a href=&#34;https://github.com/openid/AppAuth-iOS&#34;&gt;AppAuth-iOS&lt;/a&gt; Objective-C code for communicating with Okta as an OAuth 2.0 + OpenID Connect provider, and follows current best practice for native apps using &lt;a href=&#34;https://developer.okta.com/authentication-guide/implementing-authentication/auth-code-pkce&#34;&gt;Authorization Code Flow + PKCE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can learn more on the &lt;a href=&#34;https://developer.okta.com/code/ios/&#34;&gt;Okta + iOS&lt;/a&gt; page in our documentation. You can also download our &lt;a href=&#34;https://github.com/okta/samples-ios/tree/master/browser-sign-in&#34;&gt;sample application&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;!-- TOC depthFrom:2 depthTo:3 --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#supported-platforms&#34;&gt;Supported Platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#usage-guide&#34;&gt;Usage Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#configuration-reference&#34;&gt;Configuration Reference&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#create-oidc-object&#34;&gt;Create OIDC object&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#property-list&#34;&gt;Property list&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#configuration-object&#34;&gt;Configuration object&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#how-to-use-in-objective-c-project&#34;&gt;How to use in Objective-C project&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#api-reference&#34;&gt;API Reference&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#signInWithBrowser&#34;&gt;signInWithBrowser&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#signoutofokta&#34;&gt;signOutOfOkta&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#stateManager&#34;&gt;stateManager&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#introspect&#34;&gt;introspect&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#renew&#34;&gt;renew&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#revoke&#34;&gt;revoke&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#getuser&#34;&gt;getUser&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#development&#34;&gt;Development&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#running-tests&#34;&gt;Running Tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#modify-network-requests&#34;&gt;Modify network requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#migration&#34;&gt;Migration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#known-issues&#34;&gt;Known issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Installing the OktaOidc SDK into your project is simple. The easiest way to include this library into your project is through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An Okta account, called an &lt;em&gt;organization&lt;/em&gt; (sign up for a free &lt;a href=&#34;https://developer.okta.com/signup/&#34;&gt;developer organization&lt;/a&gt; if you need one).&lt;/li&gt; &#xA; &lt;li&gt;An Okta Application, configured as a Native App. This is done from the Okta Developer Console and you can find instructions &lt;a href=&#34;https://developer.okta.com/authentication-guide/implementing-authentication/auth-code-pkce&#34;&gt;here&lt;/a&gt;. When following the wizard, use the default properties. They are designed to work with our sample applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you would like to use your own in-app user interface instead of the web browser, you can do so by using our &lt;a href=&#34;https://github.com/okta/okta-auth-swift&#34;&gt;Swift Authentication SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;Okta OIDC supports iOS 11 and above.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Okta OIDC supports macOS (OS X) 10.14 and above. Library supports both custom schemes; a loopback HTTP redirects via a small embedded server.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to the &lt;code&gt;dependencies&lt;/code&gt; attribute defined in your &lt;code&gt;Package.swift&lt;/code&gt; file. You can select the version using the &lt;code&gt;majorVersion&lt;/code&gt; and &lt;code&gt;minor&lt;/code&gt; parameters. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    dependencies: [&#xA;        .Package(url: &#34;https://github.com/okta/okta-oidc-ios.git&#34;, majorVersion: &amp;lt;majorVersion&amp;gt;, minor: &amp;lt;minor&amp;gt;)&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;Simply add the following line to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;OktaOidc&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install it into your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pod install --repo-update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;To integrate this SDK into your Xcode project using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, specify it in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;okta/okta-oidc-ios&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install it into your project:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure Carthage version is 0.37.0 or higher. Otherwise, Carthage can fail.&lt;/p&gt; &#xA;&lt;h2&gt;Usage Guide&lt;/h2&gt; &#xA;&lt;p&gt;For an overview of this library&#39;s features and authentication flows, check out &lt;a href=&#34;https://developer.okta.com/code/ios&#34;&gt;our developer docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!--&#xA;TODO: Once the developer site provides code walkthroughs, update this with a bulleted list of possible flows.&#xA;--&gt; &#xA;&lt;p&gt;You can also browse the full &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#api-reference&#34;&gt;API reference documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Reference&lt;/h2&gt; &#xA;&lt;h3&gt;Create OIDC object&lt;/h3&gt; &#xA;&lt;p&gt;Before using this SDK you have to create a new object of &lt;code&gt;OktaOidc&lt;/code&gt;. You can instantiate &lt;code&gt;OktaOidc&lt;/code&gt; w/o parameters that means that SDK will use &lt;code&gt;Okta.plist&lt;/code&gt; for configuration values. Alternatively you can create &lt;code&gt;OktaOidc&lt;/code&gt; with custom configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import OktaOidc&#xA;&#xA;// Use the default Okta.plist configuration&#xA;let oktaOidc = OktaOidc()&#xA;&#xA;// Use configuration from another resource&#xA;let config = OktaOidcConfig(/* plist */)&#xA;let config = OktaOidcConfig(/* dictionary */)&#xA;&#xA;// Instantiate OktaOidc with custom configuration object&#xA;let oktaOidc = OktaOidc(configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Need a refresh token?&lt;/strong&gt; A refresh token is a special token that is used to generate additional access and ID tokens. Make sure to include the &lt;code&gt;offline_access&lt;/code&gt; scope in your configuration to silently renew the user&#39;s session in your application!&lt;/p&gt; &#xA;&lt;h3&gt;Property list&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way is to create a property list in your application&#39;s bundle. By default, this library checks for the existence of the file &lt;code&gt;Okta.plist&lt;/code&gt;. However any property list file can be used to create configuration object. Ensure one is created with the following fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;  &amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;issuer&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;https://{yourOktaDomain}.com/oauth2/default&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;clientId&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;{clientId}&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;redirectUri&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;{redirectUri}&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;logoutRedirectUri&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;{logoutRedirectUri}&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;scopes&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;openid profile offline_access&amp;lt;/string&amp;gt;&#xA;  &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration object&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can create a configuration object (&lt;code&gt;OktaOidcConfig&lt;/code&gt;) from dictionary with the required values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let configuration = OktaOidcConfig(with: [&#xA;  &#34;issuer&#34;: &#34;https://{yourOktaDomain}/oauth2/default&#34;,&#xA;  &#34;clientId&#34;: &#34;{clientID}&#34;,&#xA;  &#34;redirectUri&#34;: &#34;{redirectUri}&#34;,&#xA;  &#34;logoutRedirectUri&#34;: &#34;{logoutRedirectUri}&#34;,&#xA;  &#34;scopes&#34;: &#34;openid profile offline_access&#34;,&#xA;  // Custom parameters&#xA;  &#34;login_hint&#34;: &#34;username@email.com&#34;&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disable Single Sign-On for the authentication session&lt;/h3&gt; &#xA;&lt;p&gt;You can disable SSO capabilities by setting &lt;code&gt;noSSO&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;OktaOidcConfig&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let configuration = OktaOidcConfig(with: {YourOidcConfiguration})&#xA;if #available(iOS 13.0, *) {&#xA;    configuration?.noSSO = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/em&gt; Flag is available on iOS 13 and above versions&lt;/p&gt; &#xA;&lt;h3&gt;Token Time Validation&lt;/h3&gt; &#xA;&lt;p&gt;Custom token time validation is possible by adopting to &lt;code&gt;OKTTokenValidator&lt;/code&gt; protocol and then setting &lt;code&gt;tokenValidator&lt;/code&gt; variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;configuration?.tokenValidator = self&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default &lt;code&gt;OKTDefaultTokenValidator&lt;/code&gt; object is set.&lt;/p&gt; &#xA;&lt;h3&gt;How to use in Objective-C project&lt;/h3&gt; &#xA;&lt;p&gt;To use this SDK in Objective-C project, you should do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;use_frameworks!&lt;/code&gt; in your Pod file.&lt;/li&gt; &#xA; &lt;li&gt;Add project setting &lt;code&gt;SWIFT_VERSION = 5.0&lt;/code&gt;. To do this open Build Settings in Xcode, select Edit -&amp;gt; Add Build setting -&amp;gt; Add User-Defined Setting. Specify &lt;code&gt;SWIFT_VERSION&lt;/code&gt; and &lt;code&gt;5.0&lt;/code&gt; as setting name and value correspondently.&lt;/li&gt; &#xA; &lt;li&gt;Include autogenerated header &lt;code&gt;OktaOidc/OktaOidc-Swift.h&lt;/code&gt; into your source code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API Reference&lt;/h2&gt; &#xA;&lt;h3&gt;signInWithBrowser&lt;/h3&gt; &#xA;&lt;p&gt;Start the authorization flow by simply calling &lt;code&gt;signInWithBrowser&lt;/code&gt;. In case of successful authorization, this operation will return valid &lt;code&gt;OktaOidcStateManager&lt;/code&gt; in its callback. Clients are responsible for further storage and maintenance of the manager.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: IDP can be passed by specifying an argument with the idp parameter.&lt;/p&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;oktaOidc.signInWithBrowser(from: viewController, additionalParameters: [&#34;idp&#34;: &#34;your_idp_here&#34;]) { stateManager, error in&#xA;  if let error = error {&#xA;    // Error&#xA;    return&#xA;  }&#xA;&#xA;  // stateManager.accessToken&#xA;  // stateManager.idToken&#xA;  // stateManager.refreshToken&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/WelcomeViewController.swift#L35-L46&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create redirect server configuration and start local HTTP server if you don&#39;t want to use custom schemes&#xA;let serverConfig = OktaRedirectServerConfiguration.default&#xA;serverConfig.port = 63875&#xA;oktaOidc.signInWithBrowser(redirectServerConfiguration: serverConfig, additionalParameters: [&#34;idp&#34;: &#34;your_idp_here&#34;]) { stateManager, error in&#xA;  if let error = error {&#xA;    // Error&#xA;    return&#xA;  }&#xA;&#xA;  // stateManager.accessToken&#xA;  // stateManager.idToken&#xA;  // stateManager.refreshToken&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;signOutOfOkta&lt;/h3&gt; &#xA;&lt;p&gt;This method ends the user&#39;s Okta session in the browser. The method deletes Okta&#39;s persistent cookie and disables SSO capabilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: This method &lt;strong&gt;does not&lt;/strong&gt; clear or revoke tokens minted by Okta. Use the &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#revoke&#34;&gt;&lt;code&gt;revoke&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#clear&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt; methods of &lt;code&gt;OktaOidcStateManager&lt;/code&gt; to terminate the user&#39;s local session in your application.&lt;/p&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Redirects to the configured &#39;logoutRedirectUri&#39; specified in Okta.plist.&#xA;oktaOidc.signOutOfOkta(authStateManager, from: viewController) { error in&#xA;  if let error = error {&#xA;    // Error&#xA;    return&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/SignInViewController.swift#L62-L74&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create redirect server configuration and start local HTTP server if you don&#39;t want to use custom schemes&#xA;let serverConfig = OktaRedirectServerConfiguration.default&#xA;serverConfig.port = 63875&#xA;// Redirects to the configured &#39;logoutRedirectUri&#39; specified in Okta.plist.&#xA;oktaOidc.signOutOfOkta(authStateManager: authStateManager, redirectServerConfiguration: serverConfig) { error in&#xA;  if let error = error {&#xA;    // Error&#xA;    return&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;signOut&lt;/h3&gt; &#xA;&lt;p&gt;This method helps to perform a multi-step sign-out flow. The method provides options that you want to perform and the SDK runs the options as a batch. The available options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;revokeAccessToken&lt;/code&gt; - SDK revokes access token&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;revokeRefreshToken&lt;/code&gt; - SDK revokes refresh token&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;removeTokensFromStorage&lt;/code&gt; - SDK removes tokens from the secure storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;signOutFromOkta&lt;/code&gt; - SDK calls &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#signoutofokta&#34;&gt;&lt;code&gt;signOutOfOkta&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;revokeTokensOptions&lt;/code&gt; - revokes access and refresh tokens&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allOptions&lt;/code&gt; - revokes tokens, signs out from Okta, and removes tokens from the secure storage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The order of operations performed by the SDK:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Revoke the access token, if the option is set. If this step fails step 3 will be omitted.&lt;/li&gt; &#xA; &lt;li&gt;Revoke the refresh token, if the option is set. If this step fails step 3 will be omitted.&lt;/li&gt; &#xA; &lt;li&gt;Remove tokens from the secure storage, if the option is set.&lt;/li&gt; &#xA; &lt;li&gt;Browser sign out, if the option is set.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let options: OktaSignOutOptions = .revokeTokensOptions&#xA;options.insert(.signOutFromOkta)&#xA;oktaOidc?.signOut(authStateManager: authStateManager, from: viewController, progressHandler: { currentOption in&#xA;    if currentOption.contains(.revokeAccessToken) {&#xA;        // update progress&#xA;    } else if currentOption.contains(.revokeRefreshToken) {&#xA;        // update progress&#xA;    } else if currentOption.contains(.signOutFromOkta) {&#xA;        // update progress&#xA;    }&#xA;}, completionHandler: { success, failedOptions in&#xA;    if !success {&#xA;        // handle error&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create redirect server configuration and start local HTTP server if you don&#39;t want to use custom schemes&#xA;let serverConfig = OktaRedirectServerConfiguration.default&#xA;serverConfig.port = 63875&#xA;let options: OktaSignOutOptions = .revokeTokensOptions&#xA;options.insert(.signOutFromOkta)&#xA;oktaOidc?.signOut(authStateManager: authStateManager,&#xA;                  redirectServerConfiguration: serverConfig,&#xA;                  progressHandler: { currentOption in&#xA;    if currentOption.contains(.revokeAccessToken) {&#xA;        // update progress&#xA;    } else if currentOption.contains(.revokeRefreshToken) {&#xA;        // update progress&#xA;    } else if currentOption.contains(.signOutFromOkta) {&#xA;        // update progress&#xA;    }&#xA;}, completionHandler: { success, failedOptions in&#xA;    if !success {&#xA;        // handle error&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;authenticate&lt;/h3&gt; &#xA;&lt;p&gt;If you already signed in to Okta and have a valid session token, you can complete authorization by calling &lt;code&gt;authenticate(withSessionToken:)&lt;/code&gt;. Upon successful authorization, this operation returns a valid &lt;code&gt;OktaOidcStateManager&lt;/code&gt; in the callback. Clients are responsible for further storage and maintenance of the manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;oktaOidc.authenticate(withSessionToken: token) { stateManager, error in&#xA;  self.hideProgress()&#xA;  if let error = error {&#xA;    // Error&#xA;    return&#xA;  }&#xA;&#xA;  // stateManager.accessToken&#xA;  // stateManager.idToken&#xA;  // stateManager.refreshToken&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/custom-sign-in/OktaNativeLogin/UserProfile/UserProfileViewController.swift#L39-L50&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;stateManager&lt;/h3&gt; &#xA;&lt;p&gt;Tokens are securely stored in the Keychain and can be retrieved by accessing the OktaOidcStateManager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stateManager?.accessToken&#xA;stateManager?.idToken&#xA;stateManager?.refreshToken&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;User is responsible for storing OktaAuthStateManager returned by &lt;code&gt;signInWithBrowser&lt;/code&gt; or &lt;code&gt;authenticate&lt;/code&gt; operation. To store manager call the &lt;code&gt;writeToSecureStorage&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;oktaOidc.signInWithBrowser(from: self) { stateManager, error in&#xA;  stateManager.writeToSecureStorage()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/WelcomeViewController.swift#L44&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To retrieve stored manager call &lt;code&gt;readFromSecureStorage(for:)&lt;/code&gt; and pass here Okta configuration that corresponds to a manager you are interested in.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;guard let stateManager = OktaOidcStateManager.readFromSecureStorage(for: oktaConfig) else {&#xA;    // unauthenticated&#xA;}&#xA;&#xA;//authenticated &#xA;// stateManager.accessToken&#xA;// stateManager.idToken&#xA;// stateManager.refreshToken&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/AppDelegate.swift#L32&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In OktaOidc SDK 3.0 we added support for multiple Oauth 2.0 accounts. So developer can use Okta endpoint, social endpoint and others in one application. Therefore &lt;code&gt;OktaOidcStateManager&lt;/code&gt; is stored in keychain using composite key constructed based on configuration. For backward compatibility there is a method &lt;code&gt;readFromSecureStorage()&lt;/code&gt; that tries to read &lt;code&gt;OktaOidcStateManager&lt;/code&gt; stored on a legacy way, so user could retrieve previously stored &lt;code&gt;OktaOidcStateManager&lt;/code&gt; after switching to a newer version of SDK.&lt;/p&gt; &#xA;&lt;h4&gt;introspect&lt;/h4&gt; &#xA;&lt;p&gt;Calls the introspection endpoint to inspect the validity of the specified token.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stateManager?.introspect(token: accessToken, callback: { payload, error in&#xA;  guard let isValid = payload[&#34;active&#34;] as? Bool else {&#xA;    // Error&#xA;    return&#xA;  }&#xA;&#xA;  print(&#34;Is token valid? \(isValid)&#34;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/TokensViewController.swift#L38-L47&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;renew&lt;/h4&gt; &#xA;&lt;p&gt;Since access tokens are traditionally short-lived, you can renew expired tokens by exchanging a refresh token for new ones. See the &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#configuration-reference&#34;&gt;configuration reference&lt;/a&gt; to ensure your app is configured properly for this flow.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stateManager?.renew { newAccessToken, error in&#xA;  if let error = error else {&#xA;    // Error&#xA;    return&#xA;  }&#xA;&#xA;  // renewed TokenManager&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/TokensViewController.swift#L51-L59&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;revoke&lt;/h4&gt; &#xA;&lt;p&gt;Calls the revocation endpoint to revoke the specified token.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stateManager?.revoke(accessToken) { response, error in&#xA;  if let error = error else {&#xA;    // Error&#xA;    return&#xA;  }&#xA;&#xA;  // Token was revoked&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/TokensViewController.swift#L65-L75&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;getUser&lt;/h4&gt; &#xA;&lt;p&gt;Calls the OpenID Connect UserInfo endpoint with the stored access token to return user claim information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stateManager?.getUser { response, error in&#xA;  if let error = error {&#xA;    // Error&#xA;    return&#xA;  }&#xA;&#xA;  // JSON response&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/SignInViewController.swift#L28-L38&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;clear&lt;/h4&gt; &#xA;&lt;p&gt;Removes the local authentication state by removing cached tokens in the keychain.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; SDK deletes all keychain items accessible to an application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;stateManager.clear()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample app &lt;a href=&#34;https://github.com/okta/samples-ios/raw/master/browser-sign-in/OktaBrowserSignIn/SignInViewController.swift#L70&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;p&gt;To perform an end-to-end test, update the &lt;code&gt;Okta.plist&lt;/code&gt; file to match your configuration as specified in the &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/#prerequisites&#34;&gt;prerequisites&lt;/a&gt;. Next, export the following environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export USERNAME={username}&#xA;export PASSWORD={password}&#xA;export CLIENT_ID={clientId}&#xA;export ISSUER=https://{yourOktaDomain}/oauth2/default&#xA;export REDIRECT_URI={redirectUri}&#xA;export LOGOUT_REDIRECT_URI={logoutRedirectUri}&#xA;&#xA;# Run E2E end Unit tests&#xA;bash ./scripts/build-and-test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;You may need to update the emulator device to match your Xcode version.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Modify network requests&lt;/h2&gt; &#xA;&lt;p&gt;You can track and modify network requests made by &lt;code&gt;OktaOidc&lt;/code&gt;. In order to do this, create an object conforming to the &lt;code&gt;OktaNetworkRequestCustomizationDelegate&lt;/code&gt; protocol and set it to the &lt;code&gt;requestCustomizationDelegate&lt;/code&gt; property on an &lt;code&gt;OktaOidcConfig&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let configuration = OktaOidcConfig(with: {YourOidcConfiguration})&#xA;configuration.requestCustomizationDelegate = {YourDelegateInstance}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, delegate could be implemented as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension SomeNSObject: OktaNetworkRequestCustomizationDelegate {&#xA;&#xA;    func customizableURLRequest(_ request: URLRequest?) -&amp;gt; URLRequest? {&#xA;        guard var modifiedRequest = request else {&#xA;            return nil&#xA;        }&#xA;        modifiedRequest.setValue(&#34;Some value&#34;, forHTTPHeaderField: &#34;custom-header-field&#34;)&#xA;        print(&#34;Okta OIDC network request: \(modifiedRequest)&#34;)&#xA;        return modifiedRequest&#xA;    }&#xA;&#xA;    func didReceive(_ response: URLResponse?) {&#xA;        guard let response = response else {&#xA;            return&#xA;        }&#xA;        print(&#34;Okta OIDC network response: \(response)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; It is highly recommended to copy all of the existing parameters from the original URLRequest object to modified request without any changes. Altering of this data could lead network request to fail. If &lt;code&gt;customizableURLRequest(_:)&lt;/code&gt; method returns &lt;code&gt;nil&lt;/code&gt; default request will be used.&lt;/p&gt; &#xA;&lt;h2&gt;Migration&lt;/h2&gt; &#xA;&lt;h3&gt;Migrating from 3.10.x to 3.11.x&lt;/h3&gt; &#xA;&lt;p&gt;The SDK &lt;code&gt;okta-oidc-ios&lt;/code&gt; has a major changes in error handling. Consider these guidelines to update your code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;APIError&lt;/code&gt; is renamed as &lt;code&gt;api&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;api&lt;/code&gt; error has the additional parameter &lt;code&gt;underlyingError&lt;/code&gt;, it&#39;s an optional and indicates the origin of the error.&lt;/li&gt; &#xA; &lt;li&gt;Introduced a new error &lt;code&gt;authorization(error:description:)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;authorization&lt;/code&gt; error appears when authorization server fails due to errors during authorization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unexpectedAuthCodeResponse(statusCode:)&lt;/code&gt; has an error code parameter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OktaOidcError&lt;/code&gt; conforms to &lt;code&gt;CustomNSError&lt;/code&gt; protocol. It means you can convert the error to &lt;code&gt;NSError&lt;/code&gt; and get &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;userInfo&lt;/code&gt;, &lt;code&gt;domain&lt;/code&gt;, &lt;code&gt;underlyingErrors&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OktaOidcError&lt;/code&gt; conforms to &lt;code&gt;Equatable&lt;/code&gt; protocol. The errors can be compared for equality using the operator &lt;code&gt;==&lt;/code&gt; or inequality using the operator &lt;code&gt;!=&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;h3&gt;iOS shows permission dialog(&lt;code&gt;{App} Wants to Use {Auth Domain} to Sign In&lt;/code&gt;) for Okta Sign Out flows&lt;/h3&gt; &#xA;&lt;p&gt;Known iOS issue where iOS doesn&#39;t provide any good ways to terminate active authentication session and delete SSO cookies. The only proper way for now is to use &lt;code&gt;ASWebAuthenticationSession&lt;/code&gt; class to terminate the session. &lt;code&gt;ASWebAuthenticationSession&lt;/code&gt; deletes all SSO cookies however shows &lt;code&gt;Sign In&lt;/code&gt; persmissions dialog ü§Ø&lt;/p&gt; &#xA;&lt;p&gt;You can also consider the following workarounds:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;noSSO&lt;/code&gt; option in OIDC configuration object if you don&#39;t need SSO capabilites. Also note that this option works only on iOS 13+ versions&lt;/li&gt; &#xA; &lt;li&gt;Fork repository and change user-agent implementation(&lt;code&gt;OIDExternalUserAgentIOS.m&lt;/code&gt;) to use &lt;code&gt;SFSafariViewController&lt;/code&gt; only. Some pitfalls of this approach described &lt;a href=&#34;https://github.com/okta/okta-oidc-ios/issues/181&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to all of our open-source packages. Please, see the &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-oidc-ios/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; to understand how to structure a contribution.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>uber/ios-snapshot-test-case</title>
    <updated>2025-08-01T01:56:07Z</updated>
    <id>tag:github.com,2025-08-01:/uber/ios-snapshot-test-case</id>
    <link href="https://github.com/uber/ios-snapshot-test-case" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Snapshot view unit tests for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iOSSnapshotTestCase (previously &lt;a href=&#34;https://github.com/facebookarchive/ios-snapshot-test-case&#34;&gt;FBSnapshotTestCase&lt;/a&gt;)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case/actions&#34;&gt;&lt;img src=&#34;https://github.com/uber/ios-snapshot-test-case/actions/workflows/main.yml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/v/iOSSnapshotTestCase.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/iOSSnapshotTestCase.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&#34; alt=&#34;Swift Package Manager&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What it does&lt;/h2&gt; &#xA;&lt;p&gt;A &#34;snapshot test case&#34; takes a configured &lt;code&gt;UIView&lt;/code&gt; or &lt;code&gt;CALayer&lt;/code&gt; and uses the necessary UIKit or Core Animation methods to generate an image snapshot of its contents. It compares this snapshot to a &#34;reference image&#34; stored in your source code repository and fails the test if the two images don&#39;t match.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;We write a lot of UI code. There are a lot of edge cases that we want to handle correctly when you are creating &lt;code&gt;UIView&lt;/code&gt; instances:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What if there is more text than can fit in the space available?&lt;/li&gt; &#xA; &lt;li&gt;What if an image doesn&#39;t match the size of an image view?&lt;/li&gt; &#xA; &lt;li&gt;What should the highlighted state look like?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s straightforward to test logic code, but less obvious how you should test views. You can do a lot of rectangle asserts, but these are hard to understand or visualize. Looking at an image diff shows you exactly what changed and how it will look to users.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;iOSSnapshotTestCase&lt;/code&gt; was developed to make snapshot tests easy.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Step 1: Add iOSSnapshotTestCase to your project&lt;/h3&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;Add the following lines to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target &#34;Tests&#34; do&#xA;  use_frameworks!&#xA;  pod &#39;iOSSnapshotTestCase&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your test target is Objective-C only use &lt;code&gt;iOSSnapshotTestCase/Core&lt;/code&gt; instead, which doesn&#39;t contain Swift support.&lt;/p&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;Add the following line to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-carthage&#34;&gt;github &#34;uber/ios-snapshot-test-case&#34; ~&amp;gt; 8.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;Add the following line to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-spm&#34;&gt;dependencies: [&#xA;  .package(url: &#34;https://github.com/uber/ios-snapshot-test-case.git&#34;, from: &#34;8.0.0&#34;),&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...or integrate with Xcode via &lt;code&gt;File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency...&lt;/code&gt; using the URL of the repository. We recommend using &#34;Up to Next Major&#34; with the Version field, as we use Semantic Versioning and only put breaking changes in major versions.&lt;/p&gt; &#xA;&lt;h3&gt;Step 2: Setup Test Scheme&lt;/h3&gt; &#xA;&lt;p&gt;Replace &#34;Tests&#34; with the name of your test project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;There are &lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case/raw/main/src/iOSSnapshotTestCaseCore/Public/FBSnapshotTestCase.h#L17-L31&#34;&gt;three ways&lt;/a&gt; of setting reference image directories, the recommended one is to define &lt;code&gt;FB_REFERENCE_IMAGE_DIR&lt;/code&gt; in your scheme. This should point to the directory where you want reference images to be stored. We normally use this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;FB_REFERENCE_IMAGE_DIR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;$(SOURCE_ROOT)/$(PROJECT_NAME)Tests/ReferenceImages&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;IMAGE_DIFF_DIR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;$(SOURCE_ROOT)/$(PROJECT_NAME)Tests/FailureDiffs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Define the &lt;code&gt;IMAGE_DIFF_DIR&lt;/code&gt; to the directory where you want to store diffs of failed snapshots. There are also &lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case/raw/main/src/iOSSnapshotTestCaseCore/Public/FBSnapshotTestCase.h#L33-L45&#34;&gt;three ways&lt;/a&gt; to set failed image diff directories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/uber/ios-snapshot-test-case/main/FBSnapshotTestCaseDemo/Scheme_FB_REFERENCE_IMAGE_DIR.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Creating a snapshot test&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Subclass &lt;code&gt;FBSnapshotTestCase&lt;/code&gt; instead of &lt;code&gt;XCTestCase&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;From within your test, use &lt;code&gt;FBSnapshotVerifyView&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the test once with &lt;code&gt;self.recordMode = YES;&lt;/code&gt; in the test&#39;s &lt;code&gt;-setUp&lt;/code&gt; method. (This creates the reference images on disk.)&lt;/li&gt; &#xA; &lt;li&gt;Remove the line enabling record mode and run the test.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically names reference images on disk according to test class and selector.&lt;/li&gt; &#xA; &lt;li&gt;Prints a descriptive error message to the console on failure. (Bonus: failure message includes a one-line command to see an image diff if you have &lt;a href=&#34;http://www.kaleidoscopeapp.com&#34;&gt;Kaleidoscope&lt;/a&gt; installed.)&lt;/li&gt; &#xA; &lt;li&gt;Supply an optional &#34;identifier&#34; if you want to perform multiple snapshots in a single test method.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;code&gt;CALayer&lt;/code&gt; via &lt;code&gt;FBSnapshotVerifyLayer&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;usesDrawViewHierarchyInRect&lt;/code&gt; to handle cases like &lt;code&gt;UIVisualEffect&lt;/code&gt;, &lt;code&gt;UIAppearance&lt;/code&gt; and Size Classes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fileNameOptions&lt;/code&gt; to control appending the device model (&lt;code&gt;iPhone&lt;/code&gt;, &lt;code&gt;iPad&lt;/code&gt;, &lt;code&gt;iPod Touch&lt;/code&gt;, etc), OS version, screen size and screen scale to the images (allowing to have multiple tests for the same ¬´snapshot¬ª for different &lt;code&gt;OS&lt;/code&gt;s and devices).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;Your unit tests &lt;em&gt;should&lt;/em&gt; be inside an &#34;application&#34; bundle, not a &#34;logic/library&#34; test bundle. (That is, it should be run within the Simulator so that it has access to UIKit.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;However&lt;/em&gt;, if you are writing snapshot tests inside a library/framework, you might want to keep your test bundle as a library test bundle without a Test Host.&lt;/p&gt; &#xA;&lt;p&gt;Read more on this &lt;a href=&#34;https://raw.githubusercontent.com/uber/ios-snapshot-test-case/main/docs/LibraryVsApplicationTestBundles.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;iOSSnapshotTestCase&lt;/code&gt; was written at Facebook by Jonathan Dann with significant contributions by Todd Krabach.&lt;/p&gt; &#xA;&lt;p&gt;Today it is maintained by &lt;a href=&#34;https://github.com/uber&#34;&gt;Uber&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;iOSSnapshotTestCase&lt;/code&gt; is MIT‚Äìlicensed. See &lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case/raw/master/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>