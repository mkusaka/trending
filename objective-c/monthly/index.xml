<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-01T01:53:06Z</updated>
  <subtitle>Monthly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FLEXTool/FLEX</title>
    <updated>2022-09-01T01:53:06Z</updated>
    <id>tag:github.com,2022-09-01:/FLEXTool/FLEX</id>
    <link href="https://github.com/FLEXTool/FLEX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An in-app debugging and exploration tool for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FLEX&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/?q=FLEX&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/FLEX.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Flipboard/FLEX/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/FLEX.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/FLEX.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ryanolsonk&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contact-@ryanolsonk-blue.svg?style=flat&#34; alt=&#34;Twitter: @ryanolsonk&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/Flipboard/FLEX&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Flipboard/FLEX.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;FLEX (Flipboard Explorer) is a set of in-app debugging and exploration tools for iOS development. When presented, FLEX shows a toolbar that lives in a window above your application. From this toolbar, you can view and modify nearly every piece of state in your running application.&lt;/p&gt; &#xA;&lt;img alt=&#34;Demo&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70185687-e842c800-16af-11ea-8ef9-9e071380a462.gif&#34;&gt; &#xA;&lt;h2&gt;Give Yourself Debugging Superpowers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inspect and modify views in the hierarchy.&lt;/li&gt; &#xA; &lt;li&gt;See the properties and ivars on any object.&lt;/li&gt; &#xA; &lt;li&gt;Dynamically modify many properties and ivars.&lt;/li&gt; &#xA; &lt;li&gt;Dynamically call instance and class methods.&lt;/li&gt; &#xA; &lt;li&gt;Observe detailed network request history with timing, headers, and full responses.&lt;/li&gt; &#xA; &lt;li&gt;Add your own simulator keyboard shortcuts.&lt;/li&gt; &#xA; &lt;li&gt;View system log messages (e.g. from &lt;code&gt;NSLog&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Access any live object via a scan of the heap.&lt;/li&gt; &#xA; &lt;li&gt;View the file system within your app&#39;s sandbox.&lt;/li&gt; &#xA; &lt;li&gt;Browse SQLite/Realm databases in the file system.&lt;/li&gt; &#xA; &lt;li&gt;Trigger 3D touch in the simulator using the control, shift, and command keys.&lt;/li&gt; &#xA; &lt;li&gt;Explore all classes in your app and linked systems frameworks (public and private).&lt;/li&gt; &#xA; &lt;li&gt;Quickly access useful objects such as &lt;code&gt;[UIApplication sharedApplication]&lt;/code&gt;, the app delegate, the root view controller on the key window, and more.&lt;/li&gt; &#xA; &lt;li&gt;Dynamically view and modify &lt;code&gt;NSUserDefaults&lt;/code&gt; values.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unlike many other debugging tools, FLEX runs entirely inside your app, so you don&#39;t need to be connected to LLDB/Xcode or a different remote debugging server. It works well in the simulator and on physical devices.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In the iOS simulator, you can use keyboard shortcuts to activate FLEX. &lt;code&gt;f&lt;/code&gt; will toggle the FLEX toolbar. Hit the &lt;code&gt;?&lt;/code&gt; key for a full list of shortcuts. You can also show FLEX programmatically:&lt;/p&gt; &#xA;&lt;p&gt;Short version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Objective-C&#xA;[[FLEXManager sharedManager] showExplorer];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Swift&#xA;FLEXManager.shared.showExplorer()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More complete version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#if DEBUG&#xA;#import &#34;FLEXManager.h&#34;&#xA;#endif&#xA;&#xA;...&#xA;&#xA;- (void)handleSixFingerQuadrupleTap:(UITapGestureRecognizer *)tapRecognizer&#xA;{&#xA;#if DEBUG&#xA;    if (tapRecognizer.state == UIGestureRecognizerStateRecognized) {&#xA;        // This could also live in a handler for a keyboard shortcut, debug menu item, etc.&#xA;        [[FLEXManager sharedManager] showExplorer];&#xA;    }&#xA;#endif&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Aside: tvOS&lt;/h4&gt; &#xA;&lt;p&gt;FLEX itself does not support tvOS out of the box. However, others have taken it upon themselves to port FLEX to tvOS. If you need tvOS support, seek out one of these forks. &lt;a href=&#34;https://github.com/lechium/FLEX/tree/tvos&#34;&gt;Here is one such fork.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feature Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Modify Views&lt;/h3&gt; &#xA;&lt;p&gt;Once a view is selected, you can tap on the info bar below the toolbar to present more details about the view. From there, you can modify properties and call methods.&lt;/p&gt; &#xA;&lt;img alt=&#34;Modify Views&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271816-c5c2b480-176c-11ea-8bf4-2c5a755bc392.gif&#34;&gt; &#xA;&lt;h3&gt;Network History&lt;/h3&gt; &#xA;&lt;p&gt;When enabled, network debugging allows you to view all requests made using NSURLConnection or NSURLSession. Settings allow you to adjust what kind of response bodies get cached and the maximum size limit of the response cache. You can choose to have network debugging enabled automatically on app launch. This setting is persisted across launches.&lt;/p&gt; &#xA;&lt;img alt=&#34;Network History&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271876-e5f27380-176c-11ea-98ef-24170205b706.gif&#34;&gt; &#xA;&lt;h3&gt;All Objects on the Heap&lt;/h3&gt; &#xA;&lt;p&gt;FLEX queries malloc for all the live allocated memory blocks and searches for ones that look like objects. You can see everything from here.&lt;/p&gt; &#xA;&lt;img alt=&#34;Heap/Live Objects Explorer&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271850-d83cee00-176c-11ea-9750-ee3a479c6769.gif&#34;&gt; &#xA;&lt;h3&gt;Explore-at-address&lt;/h3&gt; &#xA;&lt;p&gt;If you get your hands on an arbitrary address, you can try explore the object at that address, and FLEX will open it if it can verify the address points to a valid object. If FLEX isn&#39;t sure, it&#39;ll warn you and refuse to dereference the pointer. If you know better, however, you can choose to explore it anyway by choosing &#34;Unsafe Explore&#34;&lt;/p&gt; &#xA;&lt;img alt=&#34;Address Explorer&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271798-bb081f80-176c-11ea-806d-9d74ac293641.gif&#34;&gt; &#xA;&lt;h3&gt;Simulator Keyboard Shortcuts&lt;/h3&gt; &#xA;&lt;p&gt;Default keyboard shortcuts allow you to activate the FLEX tools, scroll with the arrow keys, and close modals using the escape key. You can also add custom keyboard shortcuts via &lt;code&gt;-[FLEXManager registerSimulatorShortcutWithKey:modifiers:action:description]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;img alt=&#34;Simulator Keyboard Shortcuts&#34; width=&#34;40%&#34; height=&#34;40%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70272984-d3793980-176e-11ea-89a2-66d187d71b4c.png&#34;&gt; &#xA;&lt;h3&gt;File Browser&lt;/h3&gt; &#xA;&lt;p&gt;View the file system within your app&#39;s bundle or sandbox container. FLEX shows file sizes, image previews, and pretty prints &lt;code&gt;.json&lt;/code&gt; and &lt;code&gt;.plist&lt;/code&gt; files. You can rename and delete files and folders. You can &#34;share&#34; any file if you want to inspect them outside of your app.&lt;/p&gt; &#xA;&lt;img alt=&#34;File Browser&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271831-d115e000-176c-11ea-8078-ada291f980f3.gif&#34;&gt; &#xA;&lt;h3&gt;SQLite Browser&lt;/h3&gt; &#xA;&lt;p&gt;SQLite database files (with either &lt;code&gt;.db&lt;/code&gt; or &lt;code&gt;.sqlite&lt;/code&gt; extensions), or &lt;a href=&#34;https://realm.io&#34;&gt;Realm&lt;/a&gt; database files can be explored using FLEX. The database browser lets you view all tables, and individual tables can be sorted by tapping column headers.&lt;/p&gt; &#xA;&lt;img alt=&#34;SQLite Browser&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271881-ea1e9100-176c-11ea-9a42-01618311c869.gif&#34;&gt; &#xA;&lt;h3&gt;3D Touch in the Simulator&lt;/h3&gt; &#xA;&lt;p&gt;Using a combination of the command, control, and shift keys, you can simulate different levels of 3D touch pressure in the simulator. Each key contributes 1/3 of maximum possible force. Note that you need to move the touch slightly to get pressure updates.&lt;/p&gt; &#xA;&lt;img alt=&#34;Simulator 3D Touch&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://cloud.githubusercontent.com/assets/1422245/11786615/5d4ef96c-a23c-11e5-975e-67275341e439.gif&#34;&gt; &#xA;&lt;h3&gt;Explore Loaded Libraries&lt;/h3&gt; &#xA;&lt;p&gt;Go digging for all things public and private. To learn more about a class, you can create an instance of it and explore its default state. You can also type in a class name to jump to that class directly if you know which class you&#39;re looking for.&lt;/p&gt; &#xA;&lt;img alt=&#34;Loaded Libraries Exploration&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271868-dffc9280-176c-11ea-8704-a0c05b75cc5f.gif&#34;&gt; &#xA;&lt;h3&gt;NSUserDefaults Editing&lt;/h3&gt; &#xA;&lt;p&gt;FLEX allows you to edit defaults that are any combination of strings, numbers, arrays, and dictionaries. The input is parsed as &lt;code&gt;JSON&lt;/code&gt;. If other kinds of objects are set for a defaults key (i.e. &lt;code&gt;NSDate&lt;/code&gt;), you can view them but not edit them.&lt;/p&gt; &#xA;&lt;img alt=&#34;NSUserDefaults Editing&#34; width=&#34;36%&#34; height=&#34;36%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70271889-edb21800-176c-11ea-92b4-71e07d2b6ce7.gif&#34;&gt; &#xA;&lt;h3&gt;Learning from Other Apps&lt;/h3&gt; &#xA;&lt;p&gt;The code injection is left as an exercise for the reader. &lt;span&gt;😇&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img alt=&#34;Springboard Lock Screen&#34; width=&#34;25%&#34; height=&#34;25%&#34; src=&#34;https://engineering.flipboard.com/assets/flex/flex-readme-reverse-1.png&#34;&gt; &lt;img alt=&#34;Springboard Home Screen&#34; width=&#34;25%&#34; height=&#34;25%&#34; src=&#34;https://engineering.flipboard.com/assets/flex/flex-readme-reverse-2.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;FLEX requires an app that targets iOS 9 or higher. To run the Example project, open a Terminal window in the Example/ folder and run &lt;code&gt;pod install&lt;/code&gt;, then open the generated workspace.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;FLEX is available on &lt;a href=&#34;https://cocoapods.org/pods/FLEX&#34;&gt;CocoaPods&lt;/a&gt;. Simply add the following line to your podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FLEX&#39;, :configurations =&amp;gt; [&#39;Debug&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;flipboard/FLEX&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Buck&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Buck, you may want to silence some of the warnings emitted by FLEX. You will need to build FLEX as an &lt;code&gt;apple_library&lt;/code&gt; and pass the &lt;code&gt;-Wno-unsupported-availability-guard&lt;/code&gt; flag, as well as the other warning flags below to disable any other warnings FLEX may have.&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Manually add the files in &lt;code&gt;Classes/&lt;/code&gt; to your Xcode project, or just drag in the entire &lt;code&gt;FLEX/&lt;/code&gt; folder. Be sure to exclude FLEX from &lt;code&gt;Release&lt;/code&gt; builds or your app will be rejected.&lt;/p&gt; &#xA;&lt;h5&gt;Silencing warnings&lt;/h5&gt; &#xA;&lt;p&gt;Add the following flags to to &lt;strong&gt;Other Warnings Flags&lt;/strong&gt; in &lt;strong&gt;Build Settings:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-Wno-deprecated-declarations&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Wno-strict-prototypes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Wno-unsupported-availability-guard&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Include the dependency in the &lt;code&gt;depdendencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/FLEXTool/FLEX.git&#34;, .upToNextMajor(from: &#34;4.3.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, include the library in your target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;.target(&#xA;    name: &#34;YourDependency&#34;,&#xA;    dependencies: [&#xA;        &#34;FLEX&#34;&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Excluding FLEX from Release (App Store) Builds&lt;/h2&gt; &#xA;&lt;p&gt;FLEX makes it easy to explore the internals of your app, so it is not something you should expose to your users. Fortunately, it is easy to exclude FLEX files from Release builds. The strategies differ depending on how you integrated FLEX in your project, and are described below.&lt;/p&gt; &#xA;&lt;p&gt;Wrap the places in your code where you integrate FLEX with an &lt;code&gt;#if DEBUG&lt;/code&gt; statement to ensure the tool is only accessible in your &lt;code&gt;Debug&lt;/code&gt; builds and to avoid errors in your &lt;code&gt;Release&lt;/code&gt; builds. For more help with integrating FLEX, see the example project.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;CocoaPods automatically excludes FLEX from release builds if you only specify the Debug configuration for FLEX in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FLEX&#39;, :configurations =&amp;gt; [&#39;Debug&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Do NOT add &lt;code&gt;FLEX.framework&lt;/code&gt; to the embedded binaries of your target, as it would otherwise be included in all builds (therefore also in release ones).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Instead, add &lt;code&gt;$(PROJECT_DIR)/Carthage/Build/iOS&lt;/code&gt; to your target &lt;em&gt;Framework Search Paths&lt;/em&gt; (this setting might already be present if you already included other frameworks with Carthage). This makes it possible to import the FLEX framework from your source files. It does not harm if this setting is added for all configurations, but it should at least be added for the debug one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a &lt;em&gt;Run Script Phase&lt;/em&gt; to your target (inserting it after the existing &lt;code&gt;Link Binary with Libraries&lt;/code&gt; phase, for example), and which will embed &lt;code&gt;FLEX.framework&lt;/code&gt; in debug builds only:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;if [ &#34;$CONFIGURATION&#34; == &#34;Debug&#34; ]; then&#xA;  /usr/local/bin/carthage copy-frameworks&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, add &lt;code&gt;$(SRCROOT)/Carthage/Build/iOS/FLEX.framework&lt;/code&gt; as input file of this script phase.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;75%&#34; height=&#34;75%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70274062-0d4b3f80-1771-11ea-94ea-ca7e7b5ca244.jpg&#34;&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;In Xcode, navigate to &lt;code&gt;Build Settings &amp;gt; Build Options &amp;gt; Excluded Source File Names&lt;/code&gt;. For your &lt;code&gt;Release&lt;/code&gt; configuration, set it to &lt;code&gt;FLEX.o&lt;/code&gt; like this to exclude all files with the &lt;code&gt;FLEX&lt;/code&gt; prefix:&lt;/p&gt; &#xA;&lt;img width=&#34;75%&#34; height=&#34;75%&#34; src=&#34;https://user-images.githubusercontent.com/1234765/98673373-8545c080-2357-11eb-9587-0743998e23ba.png&#34;&gt; &#xA;&lt;h3&gt;FLEX files added manually to a project&lt;/h3&gt; &#xA;&lt;p&gt;In Xcode, navigate to &lt;code&gt;Build Settings &amp;gt; Build Options &amp;gt; Excluded Source File Names&lt;/code&gt;. For your &lt;code&gt;Release&lt;/code&gt; configuration, set it to &lt;code&gt;FLEX*&lt;/code&gt; like this to exclude all files with the &lt;code&gt;FLEX&lt;/code&gt; prefix:&lt;/p&gt; &#xA;&lt;img width=&#34;75%&#34; height=&#34;75%&#34; src=&#34;https://user-images.githubusercontent.com/8371943/70281926-e21d1c00-1781-11ea-92eb-aee340791da8.png&#34;&gt; &#xA;&lt;h2&gt;Additional Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When setting fields of type &lt;code&gt;id&lt;/code&gt; or values in &lt;code&gt;NSUserDefaults&lt;/code&gt;, FLEX attempts to parse the input string as &lt;code&gt;JSON&lt;/code&gt;. This allows you to use a combination of strings, numbers, arrays, and dictionaries. If you want to set a string value, it must be wrapped in quotes. For ivars or properties that are explicitly typed as &lt;code&gt;NSStrings&lt;/code&gt;, quotes are not required.&lt;/li&gt; &#xA; &lt;li&gt;You may want to disable the exception breakpoint while using FLEX. Certain functions that FLEX uses throw exceptions when they get input they can&#39;t handle (i.e. &lt;code&gt;NSGetSizeAndAlignment()&lt;/code&gt;). FLEX catches these to avoid crashing, but your breakpoint will get hit if it is active.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks &amp;amp; Credits&lt;/h2&gt; &#xA;&lt;p&gt;FLEX builds on ideas and inspiration from open source tools that came before it. The following resources have been particularly helpful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NSExceptional/MirrorKit&#34;&gt;MirrorKit&lt;/a&gt;: an Objective-C wrapper around the Objective-C runtime.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domesticcatsoftware/DCIntrospect&#34;&gt;DCIntrospect&lt;/a&gt;: view hierarchy debugging for the iOS simulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/PonyDebugger&#34;&gt;PonyDebugger&lt;/a&gt;: network, core data, and view hierarchy debugging using the Chrome Developer Tools interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mikeash.com/pyblog/&#34;&gt;Mike Ash&lt;/a&gt;: well written, informative blog posts on all things obj-c and more. The links below were very useful for this project:&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikeash/MAObjCRuntime&#34;&gt;MAObjCRuntime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mikeash.com/pyblog/friday-qa-2013-02-08-lets-build-key-value-coding.html&#34;&gt;Let&#39;s Build Key Value Coding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mikeash.com/pyblog/friday-qa-2013-09-27-arm64-and-you.html&#34;&gt;ARM64 and You&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/heardrwt/RHObjectiveBeagle&#34;&gt;RHObjectiveBeagle&lt;/a&gt;: a tool for scanning the heap for live objects. It should be noted that the source code of RHObjectiveBeagle was not consulted due to licensing concerns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.opensource.apple.com/source/lldb/lldb-179.1/examples/darwin/heap_find/heap/heap_find.cpp&#34;&gt;heap_find.cpp&lt;/a&gt;: an example of enumerating malloc blocks for finding objects on the heap.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/samdmarshall/17f4e66b5e2e579fd396&#34;&gt;Gist&lt;/a&gt; from &lt;a href=&#34;https://github.com/samdmarshall&#34;&gt;@samdmarshall&lt;/a&gt;: another example of enumerating malloc blocks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sealiesoftware.com/blog/archive/2013/09/24/objc_explain_Non-pointer_isa.html&#34;&gt;Non-pointer isa&lt;/a&gt;: an explanation of changes to the isa field on iOS for ARM64 and mention of the useful &lt;code&gt;objc_debug_isa_class_mask&lt;/code&gt; variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicklockwood/GZIP&#34;&gt;GZIP&lt;/a&gt;: A library for compressing/decompressing data on iOS using libz.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ccgus/fmdb&#34;&gt;FMDB&lt;/a&gt;: This is an Objective-C wrapper around SQLite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/indragiek/InAppViewDebugger&#34;&gt;InAppViewDebugger&lt;/a&gt;: The inspiration and reference implementation for FLEX 4&#39;s 3D view explorer, by @indragiek.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://github.com/Flipboard/FLEX/raw/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift runtime introspection (swift classes, swift objects on the heap, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Add new NSUserDefault key/value pairs on the fly&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>firebase/firebase-ios-sdk</title>
    <updated>2022-09-01T01:53:06Z</updated>
    <id>tag:github.com,2022-09-01:/firebase/firebase-ios-sdk</id>
    <link href="https://github.com/firebase/firebase-ios-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Firebase iOS SDK&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/Firebase&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Firebase.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Firebase&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Firebase.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Firebase&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/Firebase.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Firebase Apple Open Source Development&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains all Apple platform Firebase SDK source except FirebaseAnalytics.&lt;/p&gt; &#xA;&lt;p&gt;Firebase is an app development platform with tools to help you build, grow and monetize your app. More information about Firebase can be found on the &lt;a href=&#34;https://firebase.google.com&#34;&gt;official Firebase website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See the subsections below for details about the different installation methods. Where available, it&#39;s recommended to install any libraries with a &lt;code&gt;Swift&lt;/code&gt; suffix to get the best experience when writing your app in Swift.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/#standard-pod-install&#34;&gt;Standard pod install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/#installing-from-github&#34;&gt;Installing from the GitHub repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/#carthage-ios-only&#34;&gt;Experimental Carthage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Standard pod install&lt;/h3&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://firebase.google.com/docs/ios/setup&#34;&gt;https://firebase.google.com/docs/ios/setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Instructions for &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; support can be found at &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/SwiftPackageManager.md&#34;&gt;SwiftPackageManager&lt;/a&gt; Markdown file.&lt;/p&gt; &#xA;&lt;h3&gt;Installing from GitHub&lt;/h3&gt; &#xA;&lt;p&gt;These instructions can be used to access the Firebase repo at other branches, tags, or commits.&lt;/p&gt; &#xA;&lt;h4&gt;Background&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://guides.cocoapods.org/syntax/podfile.html#pod&#34;&gt;the Podfile Syntax Reference&lt;/a&gt; for instructions and options about overriding pod source locations.&lt;/p&gt; &#xA;&lt;h4&gt;Accessing Firebase Source Snapshots&lt;/h4&gt; &#xA;&lt;p&gt;All of the official releases are tagged in this repo and available via CocoaPods. To access a local source snapshot or unreleased branch, use Podfile directives like the following:&lt;/p&gt; &#xA;&lt;p&gt;To access FirebaseFirestore via a branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FirebaseCore&#39;, :git =&amp;gt; &#39;https://github.com/firebase/firebase-ios-sdk.git&#39;, :branch =&amp;gt; &#39;master&#39;&#xA;pod &#39;FirebaseFirestore&#39;, :git =&amp;gt; &#39;https://github.com/firebase/firebase-ios-sdk.git&#39;, :branch =&amp;gt; &#39;master&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To access FirebaseMessaging via a checked out version of the firebase-ios-sdk repo do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FirebaseCore&#39;, :path =&amp;gt; &#39;/path/to/firebase-ios-sdk&#39;&#xA;pod &#39;FirebaseMessaging&#39;, :path =&amp;gt; &#39;/path/to/firebase-ios-sdk&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage (iOS only)&lt;/h3&gt; &#xA;&lt;p&gt;Instructions for the experimental Carthage distribution are at &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/Carthage.md&#34;&gt;Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using Firebase from a Framework or a library&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/docs/firebase_in_libraries.md&#34;&gt;Using Firebase from a Framework or a library&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To develop Firebase software in this repository, ensure that you have at least the following software:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 13.3.1 (or later)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CocoaPods is still the canonical way to develop, but much of the repo now supports development with Swift Package Manager.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Install&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CocoaPods 1.10.0 (or later)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/cocoapods-generate&#34;&gt;CocoaPods generate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the pod that you want to develop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod gen Firebase{name here}.podspec --local-sources=./ --auto-open --platforms=ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If the CocoaPods cache is out of date, you may need to run &lt;code&gt;pod repo update&lt;/code&gt; before the &lt;code&gt;pod gen&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Note: Set the &lt;code&gt;--platforms&lt;/code&gt; option to &lt;code&gt;macos&lt;/code&gt; or &lt;code&gt;tvos&lt;/code&gt; to develop/test for those platforms. Since 10.2, Xcode does not properly handle multi-platform CocoaPods workspaces.&lt;/p&gt; &#xA;&lt;p&gt;Firestore has a self contained Xcode project. See &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/Firestore/README.md&#34;&gt;Firestore/README&lt;/a&gt; Markdown file.&lt;/p&gt; &#xA;&lt;h4&gt;Development for Catalyst&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pod gen {name here}.podspec --local-sources=./ --auto-open --platforms=ios&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check the Mac box in the App-iOS Build Settings&lt;/li&gt; &#xA; &lt;li&gt;Sign the App in the Settings Signing &amp;amp; Capabilities tab&lt;/li&gt; &#xA; &lt;li&gt;Click Pods in the Project Manager&lt;/li&gt; &#xA; &lt;li&gt;Add Signing to the iOS host app and unit test targets&lt;/li&gt; &#xA; &lt;li&gt;Select the Unit-unit scheme&lt;/li&gt; &#xA; &lt;li&gt;Run it to build and test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively disable signing in each target:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to Build Settings tab&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;+&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Add User-Defined Setting&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;CODE_SIGNING_REQUIRED&lt;/code&gt; setting with a value of &lt;code&gt;NO&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To enable test schemes: &lt;code&gt;./scripts/setup_spm_tests.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;open Package.swift&lt;/code&gt; or double click &lt;code&gt;Package.swift&lt;/code&gt; in Finder.&lt;/li&gt; &#xA; &lt;li&gt;Xcode will open the project &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Choose a scheme for a library to build or test suite to run&lt;/li&gt; &#xA;   &lt;li&gt;Choose a target platform by selecting the run destination along with the scheme&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Adding a New Firebase Pod&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/AddNewPod.md&#34;&gt;AddNewPod&lt;/a&gt; Markdown file.&lt;/p&gt; &#xA;&lt;h3&gt;Managing Headers and Imports&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/HeadersImports.md&#34;&gt;HeadersImports&lt;/a&gt; Markdown file.&lt;/p&gt; &#xA;&lt;h3&gt;Code Formatting&lt;/h3&gt; &#xA;&lt;p&gt;To ensure that the code is formatted consistently, run the script &lt;a href=&#34;https://github.com/firebase/firebase-ios-sdk/raw/master/scripts/check.sh&#34;&gt;./scripts/check.sh&lt;/a&gt; before creating a PR.&lt;/p&gt; &#xA;&lt;p&gt;GitHub Actions will verify that any code changes are done in a style compliant way. Install &lt;code&gt;clang-format&lt;/code&gt; and &lt;code&gt;mint&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install clang-format@14&#xA;brew install mint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Unit Tests&lt;/h3&gt; &#xA;&lt;p&gt;Select a scheme and press Command-u to build a component and run its unit tests.&lt;/p&gt; &#xA;&lt;h3&gt;Running Sample Apps&lt;/h3&gt; &#xA;&lt;p&gt;In order to run the sample apps and integration tests, you&#39;ll need a valid &lt;code&gt;GoogleService-Info.plist&lt;/code&gt; file. The Firebase Xcode project contains dummy plist files without real values, but can be replaced with real plist files. To get your own &lt;code&gt;GoogleService-Info.plist&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to the &lt;a href=&#34;https://console.firebase.google.com/&#34;&gt;Firebase Console&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a new Firebase project, if you don&#39;t already have one&lt;/li&gt; &#xA; &lt;li&gt;For each sample app you want to test, create a new Firebase app with the sample app&#39;s bundle identifier (e.g. &lt;code&gt;com.google.Database-Example&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Download the resulting &lt;code&gt;GoogleService-Info.plist&lt;/code&gt; and add it to the Xcode project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Coverage Report Generation&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/scripts/code_coverage_report/README.md&#34;&gt;scripts/code_coverage_report/README&lt;/a&gt; Markdown file.&lt;/p&gt; &#xA;&lt;h2&gt;Specific Component Instructions&lt;/h2&gt; &#xA;&lt;p&gt;See the sections below for any special instructions for those components.&lt;/p&gt; &#xA;&lt;h3&gt;Firebase Auth&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re doing specific Firebase Auth development, see &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/FirebaseAuth/Tests/Sample/README.md&#34;&gt;the Auth Sample README&lt;/a&gt; for instructions about building and running the FirebaseAuth pod along with various samples and tests.&lt;/p&gt; &#xA;&lt;h3&gt;Firebase Database&lt;/h3&gt; &#xA;&lt;p&gt;The Firebase Database Integration tests can be run against a locally running Database Emulator or against a production instance.&lt;/p&gt; &#xA;&lt;p&gt;To run against a local emulator instance, invoke &lt;code&gt;./scripts/run_database_emulator.sh start&lt;/code&gt; before running the integration test.&lt;/p&gt; &#xA;&lt;p&gt;To run against a production instance, provide a valid GoogleServices-Info.plist and copy it to &lt;code&gt;FirebaseDatabase/Tests/Resources/GoogleService-Info.plist&lt;/code&gt;. Your Security Rule must be set to &lt;a href=&#34;https://firebase.google.com/docs/database/security/quickstart&#34;&gt;public&lt;/a&gt; while your tests are running.&lt;/p&gt; &#xA;&lt;h3&gt;Firebase Performance Monitoring&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re doing specific Firebase Performance Monitoring development, see &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/FirebasePerformance/README.md&#34;&gt;the Performance README&lt;/a&gt; for instructions about building the SDK and &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/FirebasePerformance/Tests/TestApp/README.md&#34;&gt;the Performance TestApp README&lt;/a&gt; for instructions about integrating Performance with the dev test App.&lt;/p&gt; &#xA;&lt;h3&gt;Firebase Storage&lt;/h3&gt; &#xA;&lt;p&gt;To run the Storage Integration tests, follow the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/FirebaseStorageInternal/Tests/Integration/FIRStorageIntegrationTests.m&#34;&gt;FIRStorageIntegrationTests.m&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Push Notifications&lt;/h4&gt; &#xA;&lt;p&gt;Push notifications can only be delivered to specially provisioned App IDs in the developer portal. In order to actually test receiving push notifications, you will need to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Change the bundle identifier of the sample app to something you own in your Apple Developer account, and enable that App ID for push notifications.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;ll also need to &lt;a href=&#34;https://firebase.google.com/docs/cloud-messaging/ios/certs&#34;&gt;upload your APNs Provider Authentication Key or certificate to the Firebase Console&lt;/a&gt; at &lt;strong&gt;Project Settings &amp;gt; Cloud Messaging &amp;gt; [Your Firebase App]&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ensure your iOS device is added to your Apple Developer portal as a test device.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;iOS Simulator&lt;/h4&gt; &#xA;&lt;p&gt;The iOS Simulator cannot register for remote notifications, and will not receive push notifications. In order to receive push notifications, you&#39;ll have to follow the steps above and run the app on a physical device.&lt;/p&gt; &#xA;&lt;h2&gt;Building with Firebase on Apple platforms&lt;/h2&gt; &#xA;&lt;p&gt;Firebase 8.9.0 introduced official beta support for macOS, Catalyst, and tvOS. watchOS continues to be community supported. Thanks to community contributions for many of the multi-platform PRs.&lt;/p&gt; &#xA;&lt;p&gt;At this time, most of Firebase&#39;s products are available across Apple platforms. There are still a few gaps, especially on watchOS. For details about the current support matrix, see &lt;a href=&#34;https://firebase.google.com/docs/ios/learn-more#firebase_library_support_by_platform&#34;&gt;this chart&lt;/a&gt; in Firebase&#39;s documentation.&lt;/p&gt; &#xA;&lt;h3&gt;watchOS&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to contributions from the community, many of Firebase SDKs now compile, run unit tests, and work on watchOS. See the &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/Example/watchOSSample&#34;&gt;Independent Watch App Sample&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that watchOS is not officially supported by Firebase. While we can catch basic unit test issues with GitHub Actions, there may be some changes where the SDK no longer works as expected on watchOS. If you encounter this, please &lt;a href=&#34;https://github.com/firebase/firebase-ios-sdk/issues&#34;&gt;file an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;During app setup in the console, you may get to a step that mentions something like &#34;Checking if the app has communicated with our servers&#34;. This relies on Analytics and will not work on watchOS. &lt;strong&gt;It&#39;s safe to ignore the message and continue&lt;/strong&gt;, the rest of the SDKs will work as expected.&lt;/p&gt; &#xA;&lt;h4&gt;Additional Crashlytics Notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;watchOS has limited support. Due to watchOS restrictions, mach exceptions and signal crashes are not recorded. (Crashes in SwiftUI are generated as mach exceptions, so will not be recorded)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Combine&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to contributions from the community, &lt;em&gt;FirebaseCombineSwift&lt;/em&gt; contains support for Apple&#39;s Combine framework. This module is currently under development, and not yet supported for use in production environments. Fore more details, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/FirebaseCombineSwift/README.md&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/ROADMAP.md&#34;&gt;Roadmap&lt;/a&gt; for more about the Firebase Apple SDK Open Source plans and directions.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/firebase/firebase-ios-sdk/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for more information on contributing to the Firebase Apple SDK.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The contents of this repository are licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Your use of Firebase is governed by the &lt;a href=&#34;https://firebase.google.com/terms/&#34;&gt;Terms of Service for Firebase Services&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/GoogleSignIn-iOS</title>
    <updated>2022-09-01T01:53:06Z</updated>
    <id>tag:github.com,2022-09-01:/google/GoogleSignIn-iOS</id>
    <link href="https://github.com/google/GoogleSignIn-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Enables iOS and macOS apps to sign in with Google.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/GoogleSignIn&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/GoogleSignIn.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/GoogleSignIn&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/GoogleSignIn.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/GoogleSignIn&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/GoogleSignIn.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/GoogleSignIn-iOS/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/google/GoogleSignIn-iOS/actions/workflows/tests.yml/badge.svg?event=push&#34; alt=&#34;tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Google Sign-In for iOS and macOS&lt;/h1&gt; &#xA;&lt;p&gt;Get users into your apps quickly and securely, using a registration system they already use and trust—their Google account.&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://developers.google.com/identity/sign-in/ios/&#34;&gt;our developer site&lt;/a&gt; for integration instructions, documentation, support information, and terms of service.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Try either the &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/ObjC&#34;&gt;Objective-C&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/Swift&#34;&gt;Swift&lt;/a&gt; sample app. For example, to demo the Objective-C sample project, you have three options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;&#39;s &lt;code&gt;try&lt;/code&gt; method:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod try GoogleSignIn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, this will default to providing you with the Objective-C sample app.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Using CocoaPod&#39;s &lt;code&gt;install&lt;/code&gt; method:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/GoogleSignIn-iOS&#xA;cd GoogleSignIn-iOS/Samples/ObjC/SignInSample/&#xA;pod install&#xA;open SignInSampleForPod.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/GoogleSignIn-iOS&#xA;open GoogleSignIn-iOS/Samples/ObjC/SignInSample/SignInSample.xcodeproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to see a Swift example, take a look at &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/Swift/DaysUntilBirthday&#34;&gt;Samples/Swift/DaysUntilBirthday&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add Google Sign-In to your own app by following our &lt;a href=&#34;https://developers.google.com/identity/sign-in/ios/start-integrating&#34;&gt;getting started guides&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Take a look at the &lt;a href=&#34;https://developers.google.com/identity/sign-in/ios/api/&#34;&gt;API reference&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Google Sign-In on macOS&lt;/h2&gt; &#xA;&lt;p&gt;Google Sign-In allows your users to sign-in to your native macOS app using their Google account and default browser. When building for macOS, the &lt;code&gt;signInWithConfiguration:&lt;/code&gt; and &lt;code&gt;addScopes:&lt;/code&gt; methods take a &lt;code&gt;presentingWindow:&lt;/code&gt; parameter in place of &lt;code&gt;presentingViewController:&lt;/code&gt;. Note that in order for your macOS app to store credientials via the Keychain on macOS, you will need to &lt;a href=&#34;https://developer.apple.com/support/code-signing/&#34;&gt;sign your app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Mac Catalyst&lt;/h3&gt; &#xA;&lt;p&gt;Google Sign-In also supports iOS apps that are built for macOS via &lt;a href=&#34;https://developer.apple.com/mac-catalyst/&#34;&gt;Mac Catalyst&lt;/a&gt;. In order for your Mac Catalyst app to store credientials via the Keychain on macOS, you will need to &lt;a href=&#34;https://developer.apple.com/support/code-signing/&#34;&gt;sign your app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using the Google Sign-In Button&lt;/h2&gt; &#xA;&lt;p&gt;There are several ways to add a &#39;Sign in with Google&#39; button to your app, which path you choose will depend on your UI framework and target platform.&lt;/p&gt; &#xA;&lt;h3&gt;SwiftUI (iOS and macOS)&lt;/h3&gt; &#xA;&lt;p&gt;Creating a &#39;Sign in with Google&#39; button in SwiftUI can be as simple as this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GoogleSignInButton {&#xA;  GIDSignIn.sharedInstance.signIn(&#xA;    with: configuration, &#xA;    presenting: yourViewController) { user, error in&#xA;      // check `error`; do something with `user`&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example takes advantage of the initializer&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/GoogleSignInSwift/Sources/GoogleSignInButton.swift#L39&#34;&gt;default argument for the view model&lt;/a&gt;. The default arguments for the view model will use the light scheme, the standard button style, and the normal button state. You can supply an instance of &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/GoogleSignInSwift/Sources/GoogleSignInButtonViewModel.swift&#34;&gt;&lt;code&gt;GoogleSignInButtonViewModel&lt;/code&gt;&lt;/a&gt; with different values for these properties to customize the button. &lt;a href=&#34;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/GoogleSignInSwift/Sources/GoogleSignInButton.swift#L56&#34;&gt;This convenience initializer&lt;/a&gt; provides parameters that you can use to set these values as needed.&lt;/p&gt; &#xA;&lt;h3&gt;UIKit (iOS)&lt;/h3&gt; &#xA;&lt;p&gt;If you are not using SwiftUI to build your user interfaces, you can either create &lt;code&gt;GIDSignInButton&lt;/code&gt; programmatically, or in a Xib/Storyboard. If you are writing programmatic UI code, it will look something like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;let button = GIDSignInButton(frame: CGRect(&amp;lt;YOUR_RECT&amp;gt;))&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;AppKit (macOS)&lt;/h3&gt; &#xA;&lt;p&gt;Given that &lt;code&gt;GIDSignInButton&lt;/code&gt; is implemented as a subclass of &lt;code&gt;UIControl&lt;/code&gt;, it will not be available on macOS. You can instead use the SwiftUI Google sign-in button. Doing so will require that you wrap the SwiftUI button in a hosting view so that it will be available for use in AppKit.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;let signInButton = GoogleSignInButton {&#xA;  GIDSignIn.sharedInstance.signIn(&#xA;    with: configuration, &#xA;    presenting: yourViewController) { user, error in&#xA;      // check `error`; do something with `user`&#xA;  }&#xA;}&#xA;let hostedButton = NSHostingView(rootView: signInButton)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>