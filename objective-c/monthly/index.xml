<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-01T01:57:26Z</updated>
  <subtitle>Monthly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>opa334/TrollStore</title>
    <updated>2022-11-01T01:57:26Z</updated>
    <id>tag:github.com,2022-11-01:/opa334/TrollStore</id>
    <link href="https://github.com/opa334/TrollStore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jailed iOS app that can install IPAs permanently with arbitary entitlements and root helpers because it trolls Apple&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TrollStore&lt;/h1&gt; &#xA;&lt;p&gt;TrollStore is a permasigned jailed app that can permanently install any IPA you open in it.&lt;/p&gt; &#xA;&lt;p&gt;It works because of an AMFI/CoreTrust bug where iOS doesn&#39;t verify whether or not a root certificate used to sign a binary is legit.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;TrollStore works on &lt;strong&gt;iOS 14.0 - 15.4.1&lt;/strong&gt;, on &lt;strong&gt;iOS 15.5 beta 1 - iOS 15.5 beta 4&lt;/strong&gt; and on &lt;strong&gt;iOS 15.6 beta 1 - iOS 15.6 beta 5&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;iOS 15.5 RC / full build is &lt;strong&gt;NOT&lt;/strong&gt; supported.&lt;/p&gt; &#xA;&lt;p&gt;Anything higher than iOS 15.6 beta 5 (including iOS 15.6 RC / full build) is &lt;strong&gt;NOT&lt;/strong&gt; supported.&lt;/p&gt; &#xA;&lt;p&gt;Anything lower than iOS 14.0 is &lt;strong&gt;NOT&lt;/strong&gt; supported.&lt;/p&gt; &#xA;&lt;p&gt;Anything not supported right now will &lt;strong&gt;&lt;em&gt;NEVER&lt;/em&gt;&lt;/strong&gt; be supported, TrollStore is a one time thing, it will not receive compatibility updates in the future, please &lt;strong&gt;stop asking&lt;/strong&gt; about it, GitHub issues regarding version support will be &lt;strong&gt;closed without an answer&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing TrollStore (No Jailbreak)&lt;/h2&gt; &#xA;&lt;h3&gt;Installation Links&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://api.jailbreaks.app/troll&#34;&gt;TrollHelperOTA Link 1 - Supports all devices on iOS 15 and up&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://api.jailbreaks.app/troll64e&#34;&gt;TrollHelperOTA Link 2 - Supports all arm64e (A12 - A15) devices on iOS 14 and up&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please refer to &#34;Compatibility&#34; above to check whether your version is compatible, if it&#39;s not, these links will not work.&lt;/p&gt; &#xA;&lt;p&gt;This installation method unfortunately does &lt;strong&gt;NOT&lt;/strong&gt; work on arm64 (A8 - A11) iOS 14 devices. &lt;strong&gt;HOWEVER&lt;/strong&gt;, for these devices, you can jailbreak with checkra1n and then use the jailbroken installation guide below.&lt;/p&gt; &#xA;&lt;h3&gt;Guide (No Jailbreak)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Based on what device you are using, pick one of the two links above and open it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An alert should appear, tap &#34;Install&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When the installation is finished, you will find a &#34;GTA Car Tracker&#34; application on your device.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If this app has not appeared, that&#39;s a stock iOS bug, reboot your device and the app will appear.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch the app, tap &#34;Install TrollStore&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Wait a few seconds, your device should respring and TrollStore will be installed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can now either delete the &#34;GTA Car Tracker&#34; app, or register it as the persistence helper by opening it and tapping the option at the bottom. If you do this, don&#39;t delete the app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the TrollStore app and press &#34;Install ldid&#34; in the Settings tab, then read the information under &#34;Persistence&#34;, and install the Persistence Helper into a system app if you want persistence (not needed if you registered the GTA Car Tracker app as the persistence helper in step 7).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Done, you can now share IPA files with TrollStore and they will be permanently installed on your device.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installing TrollStore (Jailbreak)&lt;/h2&gt; &#xA;&lt;p&gt;Supports jailbroken devices running 14.0 and above.&lt;/p&gt; &#xA;&lt;h3&gt;Guide&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open your package manager, and make sure &lt;a href=&#34;https://havoc.app&#34;&gt;Havoc repo&lt;/a&gt; is added under Sources, then search for &#34;TrollStore Helper&#34; and install it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After the installation, respring and the &#34;TrollHelper&#34; app should have appeared on your home screen.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch the app, tap &#34;Install TrollStore&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Wait a few seconds, your device should respring and TrollStore will be installed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the TrollStore app and press &#34;Install ldid&#34; in the Settings tab, then read the information under &#34;Persistence&#34;, the TrollHelper app on the home screen will be your persistence helper.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Done, you can now share IPA files with TrollStore and they will be permanently installed on your device.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Unjailbreaking while retaining TrollStore&lt;/h3&gt; &#xA;&lt;p&gt;Some people might prefer to use TrollStore in an unjailbroken environment, if that applies to you, follow this guide.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Uninstall TrollHelper from your package manager&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now when you launch TrollStore, it will have an option to install the persistence helper into a System app like on iOS 15, do so.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now restore rootFS through your jailbreak app, afterwards use the System app to refresh app registrations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Done, your device will be jailed, but TrollStore will still work.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Updating TrollStore&lt;/h2&gt; &#xA;&lt;p&gt;When a new TrollStore update is available, a button to install it will appear at the top in the TrollStore settings. After tapping the button, TrollStore will automatically download the update, install it, and respring.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively (if anything goes wrong), you can download the TrollStore.tar file under Releases and open it in TrollStore, TrollStore will install the update and respring.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstalling an app&lt;/h2&gt; &#xA;&lt;p&gt;Apps installed from TrollStore can only be uninstalled from TrollStore itself, tap an app or swipe it to the right in the &#39;Apps&#39; tab to delete it.&lt;/p&gt; &#xA;&lt;h2&gt;Persistence Helper&lt;/h2&gt; &#xA;&lt;p&gt;The CoreTrust bug used in TrollStore is only enough to install &#34;System&#34; apps, this is because FrontBoard has an additional security check (it calls libmis) every time before a user app is launched. Unfortunately it is not possible to install new &#34;System&#34; apps that stay through an icon cache reload. Therefore, when iOS reloads the icon cache, all TrollStore installed apps including TrollStore itself will revert back to &#34;User&#34; state and will no longer launch.&lt;/p&gt; &#xA;&lt;p&gt;The only way to work around this is to install a persistence helper into a system app, this helper can then be used to reregister TrollStore and its installed apps as &#34;System&#34; so that they become launchable again, an option for this is available in TrollStore settings.&lt;/p&gt; &#xA;&lt;p&gt;On jailbroken iOS 14 when TrollHelper is used for installation, it is located in /Applications and will persist as a &#34;System&#34; app through icon cache reloads, therefore TrollHelper is used as the persistence helper on iOS 14.&lt;/p&gt; &#xA;&lt;h2&gt;URL Scheme&lt;/h2&gt; &#xA;&lt;p&gt;As of version 1.3, TrollStore replaces the system URL scheme &#34;apple-magnifier&#34; (this is done so &#34;jailbreak&#34; detections can&#39;t detect TrollStore like they could if TrollStore had a unique URL scheme). This URL scheme can be used to install applications right from the browser, the format goes as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;apple-magnifier://install?url=&amp;lt;URL_to_IPA&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;On devices that don&#39;t have TrollStore (1.3+) installed, this will just open the magnifier app.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;The binaries inside an IPA can have arbitrary entitlements, fakesign them with ldid and the entitlements you want (&lt;code&gt;ldid -S&amp;lt;path/to/entitlements.plist&amp;gt; &amp;lt;path/to/binary&amp;gt;&lt;/code&gt;) and TrollStore will preserve the entitlements when resigning them with the fake root certificate on installation. This gives you a lot of possibilities, some of which are explained below.&lt;/p&gt; &#xA;&lt;h3&gt;Banned entitlements&lt;/h3&gt; &#xA;&lt;p&gt;iOS 15 on A12+ has banned the following three entitlements related to running unsigned code, these are impossible to get without a PPL bypass, apps signed with them will crash on launch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;com.apple.private.cs.debugger&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dynamic-codesigning&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;com.apple.private.skip-library-validation&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Unsandboxing&lt;/h3&gt; &#xA;&lt;p&gt;Your app can run unsandboxed using one of the following entitlements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;com.apple.private.security.container-required&amp;lt;/key&amp;gt;&#xA;&amp;lt;false/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;com.apple.private.security.no-container&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;com.apple.private.security.no-sandbox&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The third one is recommended if you still want a sandbox container for your application.&lt;/p&gt; &#xA;&lt;p&gt;You might also need the platform-application entitlement in order for these to work properly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;platform-application&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that the platform-application entitlement causes side effects such as some parts of the sandbox becoming tighter, so you may need additional private entitlements to circumvent that. (For example afterwards you need an exception entitlement for every single IOKit user client class you want to access).&lt;/p&gt; &#xA;&lt;h3&gt;Root Helpers&lt;/h3&gt; &#xA;&lt;p&gt;When your app is not sandboxed, you can spawn other binaries using posix_spawn, you can also spawn binaries as root with the following entitlement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;com.apple.private.persona-mgmt&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add your own binaries into your app bundle.&lt;/p&gt; &#xA;&lt;p&gt;Afterwards you can use the &lt;a href=&#34;https://raw.githubusercontent.com/opa334/TrollStore/main/Shared/TSUtil.m#L74&#34;&gt;spawnRoot function in TSUtil.m&lt;/a&gt; to spawn the binary as root.&lt;/p&gt; &#xA;&lt;h3&gt;Things that are not possible using TrollStore&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting proper platformization / &lt;code&gt;CS_PLATFORMIZED&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Spawning a launch daemon (Would need &lt;code&gt;CS_PLATFORMIZED&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Injecting a tweak into a system process (Would need &lt;code&gt;CS_PLATFORMIZED&lt;/code&gt;, a userland PAC bypass and a PMAP trust level bypass)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits and Further Reading&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/LinusHenze/&#34;&gt;@LinusHenze&lt;/a&gt; - Found the CoreTrust bug that allows TrollStore to work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/NIyKNjNNB5Q?t=3046&#34;&gt;Fugu15 Presentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://worthdoingbadly.com/coretrust/&#34;&gt;Write-Up on the CoreTrust bug with more information&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BandarHL/BHTwitter</title>
    <updated>2022-11-01T01:57:26Z</updated>
    <id>tag:github.com,2022-11-01:/BandarHL/BHTwitter</id>
    <link href="https://github.com/BandarHL/BHTwitter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Awesome tweak for Twitter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BHTwitter&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Awesome tweak for Twitter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download Videos (even if account private).&lt;/li&gt; &#xA; &lt;li&gt;Custom Tab Bar&lt;/li&gt; &#xA; &lt;li&gt;Video zoom feature.&lt;/li&gt; &#xA; &lt;li&gt;No history feature.&lt;/li&gt; &#xA; &lt;li&gt;Hide topics tweet feature.&lt;/li&gt; &#xA; &lt;li&gt;Disable video layer caption.&lt;/li&gt; &#xA; &lt;li&gt;Padlock.&lt;/li&gt; &#xA; &lt;li&gt;Font changer.&lt;/li&gt; &#xA; &lt;li&gt;Enable the new UI of DM search.&lt;/li&gt; &#xA; &lt;li&gt;Auto load photos in highest quality feature.&lt;/li&gt; &#xA; &lt;li&gt;Undo tweet feature.&lt;/li&gt; &#xA; &lt;li&gt;Theme (like Twitter Bule).&lt;/li&gt; &#xA; &lt;li&gt;Twitter Circle feature.&lt;/li&gt; &#xA; &lt;li&gt;Copying profile information feature.&lt;/li&gt; &#xA; &lt;li&gt;Save tweet as an image.&lt;/li&gt; &#xA; &lt;li&gt;Hide spaces bar.&lt;/li&gt; &#xA; &lt;li&gt;Disable RTL.&lt;/li&gt; &#xA; &lt;li&gt;Always open in Safari.&lt;/li&gt; &#xA; &lt;li&gt;Translate bio.&lt;/li&gt; &#xA; &lt;li&gt;Reader mode feature.&lt;/li&gt; &#xA; &lt;li&gt;Disable new tweet style (A.K.A edge to edge tweet)&lt;/li&gt; &#xA; &lt;li&gt;Enable voice tweet and voice message in DM.&lt;/li&gt; &#xA; &lt;li&gt;Hide promoted tweet from the timeline.&lt;/li&gt; &#xA; &lt;li&gt;Confirm alert when hit the tweet button.&lt;/li&gt; &#xA; &lt;li&gt;Confirm alert when hit like button.&lt;/li&gt; &#xA; &lt;li&gt;Confirm alert when hit follow button.&lt;/li&gt; &#xA; &lt;li&gt;FLEX for debugging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;screen shot 2017-08-07 at 12 18 15 pm&#34; src=&#34;https://raw.githubusercontent.com/BandarHL/BHTwitter/master/1.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;screen shot 2017-08-07 at 12 18 15 pm&#34; src=&#34;https://raw.githubusercontent.com/BandarHL/BHTwitter/master/2.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;screen shot 2017-08-07 at 12 18 15 pm&#34; src=&#34;https://raw.githubusercontent.com/BandarHL/BHTwitter/master/3.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;screen shot 2017-08-07 at 12 18 15 pm&#34; src=&#34;https://raw.githubusercontent.com/BandarHL/BHTwitter/master/4.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;How to build the project&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;install &lt;a href=&#34;https://github.com/theos/theos&#34;&gt;Theos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;install &lt;a href=&#34;https://github.com/AloneMonkey/MonkeyDev&#34;&gt;MonkeyDev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open BHTwitter.xcodeproj&lt;/li&gt; &#xA; &lt;li&gt;Make sure you&#39;re selecting (Any iOS Device)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you get Code sign error, add an developer account to xcode and then Go to Build settings and select &#34;All&#34; tab then search for &#34;Sign&#34;, you should find &#34;Code Signing Identity&#34; chnage it to iOS developer and chnage &#34;Developer Team&#34; to match you&#39;re developer account&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;for jailbreak devices&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Just press Run button of the project or command+b from you&#39;re keyboard&lt;/li&gt; &#xA; &lt;li&gt;Wait until the build finished&lt;/li&gt; &#xA; &lt;li&gt;You should find deb file in Packages folder of the project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;for non-jailbreak devices&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to the Build settings and scroll down to &#39;user-Defined&#39; section and change &#34;MonkeyDevInstallOnAnyBuild&#34; value to NO&lt;/li&gt; &#xA; &lt;li&gt;Select BHTwitter.xm and scoll down to 1237 line or &#39;Fix login keychain in non-JB (IPA).&#39; section and enable the code below it&lt;/li&gt; &#xA; &lt;li&gt;Press Run button of the project or command+b from you&#39;re keyboard&lt;/li&gt; &#xA; &lt;li&gt;Wait until the build finished&lt;/li&gt; &#xA; &lt;li&gt;You should find the BHTwitter.dylib in LatestBuild dir of the project&lt;/li&gt; &#xA; &lt;li&gt;To inject the tweak with IPA correctly, you need: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;BHTwitter.dylib&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://1drv.ms/u/s!AkvDoVwju6c4gTL7_d-H3nmegFop?e=OqFpok&#34;&gt;libcephei SDK&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;BHTwitter.bundle (You can find it in BHTwitter project &#39;BHTwitter/Package/Library/Application Support/BHT/BHTwitter.bundle&#39;&lt;/li&gt; &#xA;   &lt;li&gt;Twitter.ipa&lt;/li&gt; &#xA;   &lt;li&gt;Use &lt;a href=&#34;https://github.com/Al4ise/Azule&#34;&gt;Azule&lt;/a&gt; to inject all these. &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;exmaple command: azule -n BHTwitter -i /Users/bandarhelal/Desktop/Twitter.ipa -o /Users/bandarhelal/Desktop/ -r -f /Users/bandarhelal/Library/Developer/Xcode/DerivedData/BHTwitter-axvjvuqbopwuevhafqossnmzlzcm/Build/Products/Debug-iphoneos/BHTwitter.dylib /Users/bandarhelal/Desktop/libcephei/Cephei.framework /Users/bandarhelal/Desktop/libcephei/CepheiPrefs.framework /Users/bandarhelal/Desktop/libcephei/CepheiUI.framework /Users/bandarhelal/Documents/GitHub/BHTwitter/BHTwitter/Package/Library/Application\ Support/BHT/BHTwitter.bundle&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>realm/realm-swift</title>
    <updated>2022-11-01T01:57:26Z</updated>
    <id>tag:github.com,2022-11-01:/realm/realm-swift</id>
    <link href="https://github.com/realm/realm-swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Realm is a mobile database: a replacement for Core Data &amp; SQLite&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/realm/realm-swift/raw/master/logo.png&#34; alt=&#34;Realm&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Realm is a mobile database that runs directly inside phones, tablets or wearables. This repository holds the source code for the iOS, macOS, tvOS &amp;amp; watchOS versions of Realm Swift &amp;amp; Realm Objective-C.&lt;/p&gt; &#xA;&lt;h2&gt;Why Use Realm&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intuitive to Developers:&lt;/strong&gt; Realm’s object-oriented data model is simple to learn, doesn’t need an ORM, and lets you write less code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Built for Mobile:&lt;/strong&gt; Realm is fully-featured, lightweight, and efficiently uses memory, disk space, and battery life.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Designed for Offline Use:&lt;/strong&gt; Realm’s local database persists data on-disk, so apps work as well offline as they do online.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.mongodb.com/atlas/app-services/device-sync&#34;&gt;Device Sync&lt;/a&gt;&lt;/strong&gt;: Makes it simple to keep data in sync across users, devices, and your backend in real-time. &lt;a href=&#34;http://mongodb.com/realm/register?utm_medium=github_atlas_CTA&amp;amp;utm_source=realm_swift_github&#34;&gt;Get started&lt;/a&gt; for free with a template application that includes a cloud backend and Sync.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Object-Oriented: Streamline Your Code&lt;/h2&gt; &#xA;&lt;p&gt;Realm was built for mobile developers, with simplicity in mind. The idiomatic, object-oriented data model can save you thousands of lines of code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Define your models like regular Swift classes&#xA;class Dog: Object {&#xA;    @Persisted var name: String&#xA;    @Persisted var age: Int&#xA;}&#xA;class Person: Object {&#xA;    @Persisted(primaryKey: true) var _id: String&#xA;    @Persisted var name: String&#xA;    @Persisted var age: Int&#xA;    // Create relationships by pointing an Object field to another Class&#xA;    @Persisted var dogs: List&amp;lt;Dog&amp;gt;&#xA;}&#xA;// Use them like regular Swift objects&#xA;let dog = Dog()&#xA;dog.name = &#34;Rex&#34;&#xA;dog.age = 1&#xA;print(&#34;name of dog: \(dog.name)&#34;)&#xA;&#xA;// Get the default Realm&#xA;let realm = try! Realm()&#xA;// Persist your data easily with a write transaction &#xA;try! realm.write {&#xA;    realm.add(dog)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Live Objects: Build Reactive Apps&lt;/h2&gt; &#xA;&lt;p&gt;Realm’s live objects mean data updated anywhere is automatically updated everywhere.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Open the default realm.&#xA;let realm = try! Realm()&#xA;&#xA;var token: NotificationToken?&#xA;&#xA;let dog = Dog()&#xA;dog.name = &#34;Max&#34;&#xA;&#xA;// Create a dog in the realm.&#xA;try! realm.write {&#xA;    realm.add(dog)&#xA;}&#xA;&#xA;//  Set up the listener &amp;amp; observe object notifications.&#xA;token = dog.observe { change in&#xA;    switch change {&#xA;    case .change(let properties):&#xA;        for property in properties {&#xA;            print(&#34;Property &#39;\(property.name)&#39; changed to &#39;\(property.newValue!)&#39;&#34;);&#xA;        }&#xA;    case .error(let error):&#xA;        print(&#34;An error occurred: (error)&#34;)&#xA;    case .deleted:&#xA;        print(&#34;The object was deleted.&#34;)&#xA;    }&#xA;}&#xA;&#xA;// Update the dog&#39;s name to see the effect.&#xA;try! realm.write {&#xA;    dog.name = &#34;Wolfie&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SwiftUI&lt;/h3&gt; &#xA;&lt;p&gt;Realm integrates directly with SwiftUI, updating your views so you don&#39;t have to.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContactsView: View {&#xA;    @ObservedResults(Person.self) var persons&#xA;    &#xA;    var body: some View {&#xA;        List {&#xA;            ForEach(persons) { person in&#xA;                Text(person.name)&#xA;            }&#xA;            .onMove(perform: $persons.move)&#xA;            .onDelete(perform: $persons.remove)&#xA;        }.navigationBarItems(trailing:&#xA;            Button(&#34;Add&#34;) {&#xA;                $persons.append(Person())&#xA;            }&#xA;        )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fully Encrypted&lt;/h2&gt; &#xA;&lt;p&gt;Data can be encrypted in-flight and at-rest, keeping even the most sensitive data secure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Generate a random encryption key&#xA;var key = Data(count: 64)&#xA;_ = key.withUnsafeMutableBytes { bytes in&#xA;    SecRandomCopyBytes(kSecRandomDefault, 64, bytes)&#xA;}&#xA;&#xA;// Add the encryption key to the config and open the realm&#xA;let config = Realm.Configuration(encryptionKey: key)&#xA;let realm = try Realm(configuration: config)&#xA;&#xA;// Use the Realm as normal&#xA;let dogs = realm.objects(Dog.self).filter(&#34;name contains &#39;Fido&#39;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;We support installing Realm via Swift Package Manager, CocoaPods, Carthage, or by importing a dynamic XCFramework.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see the detailed instructions in our &lt;a href=&#34;https://docs.mongodb.com/realm/sdk/ios/install/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Interested in getting started for free with a template application that includes a cloud backend and Sync? &lt;a href=&#34;http://mongodb.com/realm/register?utm_medium=github_atlas_CTA&amp;amp;utm_source=realm_swift_github&#34;&gt;Create a MongoDB Atlas Account&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation can be found at &lt;a href=&#34;https://docs.mongodb.com/realm/sdk/ios/&#34;&gt;docs.mongodb.com/realm/sdk/ios/&lt;/a&gt;.&lt;br&gt; The API reference is located at &lt;a href=&#34;https://docs.mongodb.com/realm-sdks/swift/latest/&#34;&gt;docs.mongodb.com/realm-sdks/swift/latest/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Need help with your code?&lt;/strong&gt;: Look for previous questions with the&lt;a href=&#34;https://stackoverflow.com/questions/tagged/realm?sort=newest&#34;&gt;&lt;code&gt;realm&lt;/code&gt; tag&lt;/a&gt; on Stack Overflow or &lt;a href=&#34;https://stackoverflow.com/questions/ask?tags=realm&#34;&gt;ask a new question&lt;/a&gt;. For general discussion that might be considered too broad for Stack Overflow, use the &lt;a href=&#34;https://developer.mongodb.com/community/forums/tags/c/realm-sdks/58/swift/&#34;&gt;Community Forum&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Have a bug to report?&lt;/strong&gt; &lt;a href=&#34;https://github.com/realm/realm-swift/issues/new&#34;&gt;Open a GitHub issue&lt;/a&gt;. If possible, include the version of Realm, a full log, the Realm file, and a project that shows the issue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Have a feature request?&lt;/strong&gt; &lt;a href=&#34;https://github.com/realm/realm-swift/issues/new&#34;&gt;Open a GitHub issue&lt;/a&gt;. Tell us what the feature should do and why you want the feature.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Realm&lt;/h2&gt; &#xA;&lt;p&gt;In case you don&#39;t want to use the precompiled version, you can build Realm yourself from source.&lt;/p&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Building Realm requires Xcode 11.x or newer.&lt;/li&gt; &#xA; &lt;li&gt;Building Realm documentation requires &lt;a href=&#34;https://github.com/realm/jazzy&#34;&gt;jazzy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have all the necessary prerequisites, building Realm.framework just takes a single command: &lt;code&gt;sh build.sh build&lt;/code&gt;. You&#39;ll need an internet connection the first time you build Realm to download the core binary.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;sh build.sh help&lt;/code&gt; to see all the actions you can perform (build ios/osx, generate docs, test, etc.).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/realm/realm-swift/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details!&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project adheres to the &lt;a href=&#34;https://www.mongodb.com/community-code-of-conduct&#34;&gt;MongoDB Code of Conduct&lt;/a&gt;. By participating, you are expected to uphold this code. Please report unacceptable behavior to &lt;a href=&#34;mailto:community-conduct@mongodb.com&#34;&gt;community-conduct@mongodb.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Realm Objective-C &amp;amp; Realm Swift are published under the Apache 2.0 license.&lt;br&gt; Realm Core is also published under the Apache 2.0 license and is available &lt;a href=&#34;https://github.com/realm/realm-core&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;If you use Realm and are happy with it, please consider sending out a tweet mentioning &lt;a href=&#34;https://twitter.com/realm&#34;&gt;@realm&lt;/a&gt; to share your thoughts!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;And if you don&#39;t like it, please let us know what you would like improved, so we can fix it!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img style=&#34;width: 0px; height: 0px;&#34; src=&#34;https://3eaz4mshcd.execute-api.us-east-1.amazonaws.com/prod?s=https://github.com/realm/realm-swift#README.md&#34;&gt;</summary>
  </entry>
</feed>