<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:47:38Z</updated>
  <subtitle>Monthly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ivpusic/react-native-image-crop-picker</title>
    <updated>2022-06-02T02:47:38Z</updated>
    <id>tag:github.com,2022-06-02:/ivpusic/react-native-image-crop-picker</id>
    <link href="https://github.com/ivpusic/react-native-image-crop-picker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS/Android image picker with support for camera, video, configurable compression, multiple images and cropping&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-native-image-crop-picker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivpusic/react-native-image-crop-picker/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ivpusic/react-native-image-crop-picker/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ivpusic/react-native-image-crop-picker/master/svg.svg?sanitize=true&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &#xA;&lt;p&gt;iOS/Android image picker with support for camera, video, configurable compression, multiple images and cropping&lt;/p&gt; &#xA;&lt;h2&gt;Result&lt;/h2&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img width=&#34;200&#34; title=&#34;iOS Single Pick&#34; src=&#34;https://github.com/ivpusic/react-native-image-crop-picker/raw/master/images/ios_single_pick_v2.png&#34;&gt; &lt;img width=&#34;200&#34; title=&#34;iOS Multiple Pick&#34; src=&#34;https://github.com/ivpusic/react-native-image-crop-picker/raw/master/images/ios_multiple_pick_v2.png&#34;&gt; &lt;img width=&#34;200&#34; title=&#34;iOS Crop Normal&#34; src=&#34;https://github.com/ivpusic/react-native-image-crop-picker/raw/master/images/ios_normal_crop.png&#34;&gt; &lt;img width=&#34;200&#34; title=&#34;iOS Crop Circular&#34; src=&#34;https://github.com/ivpusic/react-native-image-crop-picker/raw/master/images/ios_circular_crop.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Important note&lt;/h2&gt; &#xA;&lt;p&gt;If you are using react-native &amp;gt;= 0.60 use react-native-image-crop-picker version &amp;gt;= 0.25.0. Otherwise use version &amp;lt; 0.25.0.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Import library&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import ImagePicker from &#39;react-native-image-crop-picker&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Select from gallery&lt;/h3&gt; &#xA;&lt;p&gt;Call single image picker with cropping&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ImagePicker.openPicker({&#xA;  width: 300,&#xA;  height: 400,&#xA;  cropping: true&#xA;}).then(image =&amp;gt; {&#xA;  console.log(image);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call multiple image picker&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ImagePicker.openPicker({&#xA;  multiple: true&#xA;}).then(images =&amp;gt; {&#xA;  console.log(images);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Select video only from gallery&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ImagePicker.openPicker({&#xA;  mediaType: &#34;video&#34;,&#xA;}).then((video) =&amp;gt; {&#xA;  console.log(video);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Android: The prop &#39;cropping&#39; has been known to cause videos not to be displayed in the gallery on Android. Please do not set cropping to true when selecting videos.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Select from camera&lt;/h3&gt; &#xA;&lt;h4&gt;Image&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ImagePicker.openCamera({&#xA;  width: 300,&#xA;  height: 400,&#xA;  cropping: true,&#xA;}).then(image =&amp;gt; {&#xA;  console.log(image);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Video&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ImagePicker.openCamera({&#xA;  mediaType: &#39;video&#39;,&#xA;}).then(image =&amp;gt; {&#xA;  console.log(image);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Crop picture&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ImagePicker.openCropper({&#xA;  path: &#39;my-file-path.jpg&#39;,&#xA;  width: 300,&#xA;  height: 400&#xA;}).then(image =&amp;gt; {&#xA;  console.log(image);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional cleanup&lt;/h3&gt; &#xA;&lt;p&gt;Module is creating tmp images which are going to be cleaned up automatically somewhere in the future. If you want to force cleanup, you can use &lt;code&gt;clean&lt;/code&gt; to clean all tmp files, or &lt;code&gt;cleanSingle(path)&lt;/code&gt; to clean single tmp file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ImagePicker.clean().then(() =&amp;gt; {&#xA;  console.log(&#39;removed all tmp images from tmp directory&#39;);&#xA;}).catch(e =&amp;gt; {&#xA;  alert(e);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Request Object&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropping&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable or disable cropping&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;width&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Width of result image when used with &lt;code&gt;cropping&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;height&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Height of result image when used with &lt;code&gt;cropping&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;multiple&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable or disable multiple image selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;writeTempFile (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default true)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When set to false, does not write temporary files for the selected images. This is useful to improve performance when you are retrieving file contents with the &lt;code&gt;includeBase64&lt;/code&gt; option and don&#39;t need to read files from disk.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;includeBase64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When set to true, the image file content will be available as a base64-encoded string in the &lt;code&gt;data&lt;/code&gt; property. Hint: To use this string as an image source, use it like: &lt;code&gt;&amp;lt;Image source={{uri: `data:${image.mime};base64,${image.data}`}} /&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;includeExif&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Include image exif data in the response&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;avoidEmptySpaceAroundImage (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default true)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When set to true, the image will always fill the mask space.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperActiveWidgetColor (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default &lt;code&gt;&#34;#424242&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When cropping image, determines ActiveWidget color.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperStatusBarColor (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default &lt;code&gt;#424242&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When cropping image, determines the color of StatusBar.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperToolbarColor (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default &lt;code&gt;#424242&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When cropping image, determines the color of Toolbar.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperToolbarWidgetColor (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default &lt;code&gt;darker orange&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When cropping image, determines the color of Toolbar text and buttons.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;freeStyleCropEnabled&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enables user to apply custom rectangle area for cropping&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperToolbarTitle&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default &lt;code&gt;Edit Photo&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When cropping image, determines the title of Toolbar.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperCircleOverlay&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable or disable circular cropping mask.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;disableCropperColorSetters (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When cropping image, disables the color setters for cropping library.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minFiles (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number (default 1)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Min number of files to select when using &lt;code&gt;multiple&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maxFiles (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number (default 5)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Max number of files to select when using &lt;code&gt;multiple&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;waitAnimationEnd (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default true)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Promise will resolve/reject once ViewController &lt;code&gt;completion&lt;/code&gt; block is called&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;smartAlbums (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;array (&lt;a href=&#34;https://github.com/ivpusic/react-native-image-crop-picker/raw/master/README.md#smart-album-types-ios&#34;&gt;supported values&lt;/a&gt;) (default [&#39;UserLibrary&#39;, &#39;PhotoStream&#39;, &#39;Panoramas&#39;, &#39;Videos&#39;, &#39;Bursts&#39;])&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of smart albums to choose from&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;useFrontCamera&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to default to the front/&#39;selfie&#39; camera when opened. Please note that not all Android devices handle this parameter, see &lt;a href=&#34;https://github.com/ivpusic/react-native-image-crop-picker/issues/1058&#34;&gt;issue #1058&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;compressVideoPreset (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default MediumQuality)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Choose which preset will be used for video compression&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;compressImageMaxWidth&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number (default none)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compress image with maximum width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;compressImageMaxHeight&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number (default none)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compress image with maximum height&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;compressImageQuality&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number (default 1 (Android)/0.8 (iOS))&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compress image with quality (from 0 to 1, where 1 is best quality). On iOS, values larger than 0.8 don&#39;t produce a noticeable quality increase in most images, while a value of 0.8 will reduce the file size by about half or less compared to a value of 1.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;loadingLabelText (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default &#34;Processing assets...&#34;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Text displayed while photo is loading in picker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mediaType&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default any)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Accepted mediaType for image selection, can be one of: &#39;photo&#39;, &#39;video&#39;, or &#39;any&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;showsSelectedCount (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default true)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to show the number of selected assets&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sortOrder (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default &#39;none&#39;, supported values: &#39;asc&#39;, &#39;desc&#39;, &#39;none&#39;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Applies a sort order on the creation date on how media is displayed within the albums/detail photo views when opening the image picker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;forceJpg (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to convert photos to JPG. This will also convert any Live Photo into its JPG representation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;showCropGuidelines (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default true)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to show the 3x3 grid on top of the image during cropping&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;showCropFrame (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default true)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to show crop frame during cropping&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hideBottomControls (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to display bottom controls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enableRotationGesture (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to enable rotating the image by hand gesture&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperChooseText (ios only)&amp;nbsp;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; string (default choose) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Choose button text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperCancelText (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default Cancel)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Cancel button text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperRotateButtonsHidden (ios only)&amp;nbsp;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bool (default false) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable or disable cropper rotate buttons&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Smart Album Types (ios)&lt;/h4&gt; &#xA;&lt;p&gt;NOTE: Some of these types may not be available on all iOS versions. Be sure to check this to avoid issues.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[&#39;PhotoStream&#39;, &#39;Generic&#39;, &#39;Panoramas&#39;, &#39;Videos&#39;, &#39;Favorites&#39;, &#39;Timelapses&#39;, &#39;AllHidden&#39;, &#39;RecentlyAdded&#39;, &#39;Bursts&#39;, &#39;SlomoVideos&#39;, &#39;UserLibrary&#39;, &#39;SelfPortraits&#39;, &#39;Screenshots&#39;, &#39;DepthEffect&#39;, &#39;LivePhotos&#39;, &#39;Animated&#39;, &#39;LongExposure&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Response Object&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;path&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected image location. This is null when the &lt;code&gt;writeTempFile&lt;/code&gt; option is set to false.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;localIdentifier(ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected images&#39; localidentifier, used for PHAsset searching&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sourceURL(ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected images&#39; source path, do not have write access&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;filename(ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected images&#39; filename&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;width&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected image width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;height&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected image height&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mime&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected image MIME type (image/jpeg, image/png)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;size&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected image size in bytes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;duration&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Video duration time in milliseconds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;data&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;base64&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Optional base64 selected file representation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;exif&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;object&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Extracted exif data from image. Response format is platform specific&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropRect&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;object&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Cropped image rectangle (width, height, x, y)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;creationDate (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UNIX timestamp when image was created&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;modificationDate&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UNIX timestamp when image was last modified&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h2&gt;Step 1&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i react-native-image-crop-picker --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Step 2&lt;/h2&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ios&#xA;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Step 3&lt;/h2&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;h4&gt;Step 1&lt;/h4&gt; &#xA;&lt;p&gt;In Xcode open Info.plist and add string key &lt;code&gt;NSPhotoLibraryUsageDescription&lt;/code&gt; with value that describes why you need access to user photos. More info here &lt;a href=&#34;https://forums.developer.apple.com/thread/62229&#34;&gt;https://forums.developer.apple.com/thread/62229&lt;/a&gt;. Depending on what features you use, you also may need &lt;code&gt;NSCameraUsageDescription&lt;/code&gt; and &lt;code&gt;NSMicrophoneUsageDescription&lt;/code&gt; keys.&lt;/p&gt; &#xA;&lt;h4&gt;(Optional) Step 2 - To localizate the camera / gallery / cropper text buttons&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open your Xcode project&lt;/li&gt; &#xA; &lt;li&gt;Go to your project settings by opening the project name on the Navigation (left side)&lt;/li&gt; &#xA; &lt;li&gt;Select your project in the project list&lt;/li&gt; &#xA; &lt;li&gt;Should be into the Info tab and add in Localizations the language your app was missing throughout the +&lt;/li&gt; &#xA; &lt;li&gt;Rebuild and you should now have your app camera and gallery with the classic ios text in the language you added.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;VERY IMPORTANT&lt;/strong&gt; Add the following to your &lt;code&gt;build.gradle&lt;/code&gt;&#39;s repositories section. (android/build.gradle)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;allprojects {&#xA;    repositories {&#xA;      mavenLocal()&#xA;      jcenter()&#xA;      maven { url &#34;$rootDir/../node_modules/react-native/android&#34; }&#xA;&#xA;      // ADD THIS&#xA;      maven { url &#39;https://maven.google.com&#39; }&#xA;&#xA;      // ADD THIS&#xA;      maven { url &#34;https://www.jitpack.io&#34; }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;useSupportLibrary&lt;/code&gt; (android/app/build.gradle)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;android {&#xA;    ...&#xA;&#xA;    defaultConfig {&#xA;        ...&#xA;        vectorDrawables.useSupportLibrary = true&#xA;        ...&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use Android SDK &amp;gt;= 26 (android/app/build.gradle)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;android {&#xA;    compileSdkVersion 27&#xA;    buildToolsVersion &#34;27.0.3&#34;&#xA;    ...&#xA;    &#xA;    defaultConfig {&#xA;      ...&#xA;      targetSdkVersion 27&#xA;      ...&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimum Gradle version if you are using react-native-image-crop-picker &amp;gt;= 0.35.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;3.3.3&#xA;3.4.3&#xA;3.5.4&#xA;3.6.4&#xA;4.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reference for more details &lt;a href=&#34;https://github.com/ivpusic/react-native-image-crop-picker/issues/1406&#34;&gt;https://github.com/ivpusic/react-native-image-crop-picker/issues/1406&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[Optional] If you want to use camera picker in your project, add following to &lt;code&gt;app/src/main/AndroidManifest.xml&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&#34;android.permission.CAMERA&#34;/&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Optional] If you want to use front camera, also add following to &lt;code&gt;app/src/main/ AndroidManifest.xml&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;uses-feature android:name=&#34;android.hardware.camera&#34; android:required=&#34;false&#34; /&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;uses-feature android:name=&#34;android.hardware.camera.front&#34; android:required=&#34;false&#34; /&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TO DO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; [Android] Standardize multiple select&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; [Android] Video compression&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&#34;https://raw.githubusercontent.com/ivpusic/react-native-image-crop-picker/master/CONTRIBUTING.md&#34;&gt;[Contribute]&lt;/a&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/ivpusic/react-native-image-crop-picker/master/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/contributors.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;MIT&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kstenerud/KSCrash</title>
    <updated>2022-06-02T02:47:38Z</updated>
    <id>tag:github.com,2022-06-02:/kstenerud/KSCrash</id>
    <link href="https://github.com/kstenerud/KSCrash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Ultimate iOS Crash Reporter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KSCrash&lt;/h1&gt; &#xA;&lt;h4&gt;The Ultimate Crash Reporter&lt;/h4&gt; &#xA;&lt;h3&gt;Another crash reporter? Why?&lt;/h3&gt; &#xA;&lt;p&gt;Because while the existing crash reporters do report crashes, there&#39;s a heck of a lot more that they COULD do. Here are some key features of KSCrash:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On-device symbolication in a way that supports re-symbolication offline (necessary for iOS versions where many functions have been redacted).&lt;/li&gt; &#xA; &lt;li&gt;Generates full Apple reports, with every field filled in.&lt;/li&gt; &#xA; &lt;li&gt;32-bit and 64-bit mode.&lt;/li&gt; &#xA; &lt;li&gt;Supports all Apple devices, including Apple Watch.&lt;/li&gt; &#xA; &lt;li&gt;Handles errors that can only be caught at the mach level, such as stack overflow.&lt;/li&gt; &#xA; &lt;li&gt;Tracks the REAL cause of an uncaught C++ exception.&lt;/li&gt; &#xA; &lt;li&gt;Handles a crash in the crash handler itself (or in the user crash handler callback).&lt;/li&gt; &#xA; &lt;li&gt;Detects zombie (deallocated) object access attempts.&lt;/li&gt; &#xA; &lt;li&gt;Recovers lost NSException messages in cases of zombies or memory corruption.&lt;/li&gt; &#xA; &lt;li&gt;Introspects objects in registers and on the stack (C strings and Objective-C objects, including ivars).&lt;/li&gt; &#xA; &lt;li&gt;Extracts information about objects referenced by an exception (such as &#34;unrecognized selector sent to instance 0xa26d9a0&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Its pluggable server reporting architecture makes it easy to adapt to any API service.&lt;/li&gt; &#xA; &lt;li&gt;Dumps the stack contents.&lt;/li&gt; &#xA; &lt;li&gt;Diagnoses crash causes (Crash Doctor).&lt;/li&gt; &#xA; &lt;li&gt;Records lots of information beyond what the Apple crash report can, in a JSON format.&lt;/li&gt; &#xA; &lt;li&gt;Supports including extra data that the programmer supplies (before and during a crash).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;KSCrash handles the following kinds of crashes:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mach kernel exceptions&lt;/li&gt; &#xA; &lt;li&gt;Fatal signals&lt;/li&gt; &#xA; &lt;li&gt;C++ exceptions&lt;/li&gt; &#xA; &lt;li&gt;Objective-C exceptions&lt;/li&gt; &#xA; &lt;li&gt;Main thread deadlock (experimental)&lt;/li&gt; &#xA; &lt;li&gt;Custom crashes (e.g. from scripting languages)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;KSCrash can report to the following servers:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hockeyapp.net/&#34;&gt;Hockey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheRealKerni/QuincyKit&#34;&gt;QuincyKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kelp404/Victory&#34;&gt;Victory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Email&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kstenerud/KSCrash/tree/master/Example-Reports/_README.md&#34;&gt;Here are some examples of the reports it can generate.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;What&#39;s New?&lt;/h3&gt; &#xA;&lt;h4&gt;Call for help!&lt;/h4&gt; &#xA;&lt;p&gt;My life has changed enough over the past few years that I can&#39;t keep up with giving KSCrash the love it needs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://c1.staticflickr.com/9/8787/28351252396_eeec9bb146.jpg&#34; alt=&#34;I want you&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m looking for someone to help me maintain this package, make sure issues get handled, merges are properly vetted, and code quality remains high. Please contact me personally (kstenerud at my gmail address) or comment in &lt;a href=&#34;https://github.com/kstenerud/KSCrash/issues/313&#34;&gt;https://github.com/kstenerud/KSCrash/issues/313&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;VERY VERY VERY preliminary Android support.&lt;/h4&gt; &#xA;&lt;p&gt;And I do mean PRELIMINARY. Most stuff doesn&#39;t work, but it does compile. Look in the Android subdir if you want to play around with it.&lt;/p&gt; &#xA;&lt;h4&gt;C++ Exception Handling&lt;/h4&gt; &#xA;&lt;p&gt;That&#39;s right! Normally if your app terminates due to an uncaught C++ exception, all you get is this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Thread 0 name:  Dispatch queue: com.apple.main-thread&#xA;Thread 0 Crashed:&#xA;0   libsystem_kernel.dylib          0x9750ea6a 0x974fa000 + 84586 (__pthread_kill + 10)&#xA;1   libsystem_sim_c.dylib           0x04d56578 0x4d0f000 + 292216 (abort + 137)&#xA;2   libc++abi.dylib                 0x04ed6f78 0x4ed4000 + 12152 (abort_message + 102)&#xA;3   libc++abi.dylib                 0x04ed4a20 0x4ed4000 + 2592 (_ZL17default_terminatev + 29)&#xA;4   libobjc.A.dylib                 0x013110d0 0x130b000 + 24784 (_ZL15_objc_terminatev + 109)&#xA;5   libc++abi.dylib                 0x04ed4a60 0x4ed4000 + 2656 (_ZL19safe_handler_callerPFvvE + 8)&#xA;6   libc++abi.dylib                 0x04ed4ac8 0x4ed4000 + 2760 (_ZSt9terminatev + 18)&#xA;7   libc++abi.dylib                 0x04ed5c48 0x4ed4000 + 7240 (__cxa_rethrow + 77)&#xA;8   libobjc.A.dylib                 0x01310fb8 0x130b000 + 24504 (objc_exception_rethrow + 42)&#xA;9   CoreFoundation                  0x01f2af98 0x1ef9000 + 204696 (CFRunLoopRunSpecific + 360)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No way to track what the exception was or where it was thrown from!&lt;/p&gt; &#xA;&lt;p&gt;Now with KSCrash, you get the uncaught exception type, description, and where it was thrown from:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Application Specific Information:&#xA;*** Terminating app due to uncaught exception &#39;MyException&#39;, reason: &#39;Something bad happened...&#39;&#xA;&#xA;Thread 0 name:  Dispatch queue: com.apple.main-thread&#xA;Thread 0 Crashed:&#xA;0   Crash-Tester                    0x0000ad80 0x1000 + 40320 (-[Crasher throwUncaughtCPPException] + 0)&#xA;1   Crash-Tester                    0x0000842e 0x1000 + 29742 (__32-[AppDelegate(UI) crashCommands]_block_invoke343 + 78)&#xA;2   Crash-Tester                    0x00009523 0x1000 + 34083 (-[CommandEntry executeWithViewController:] + 67)&#xA;3   Crash-Tester                    0x00009c0a 0x1000 + 35850 (-[CommandTVC tableView:didSelectRowAtIndexPath:] + 154)&#xA;4   UIKit                           0x0016f285 0xb4000 + 766597 (-[UITableView _selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:] + 1194)&#xA;5   UIKit                           0x0016f4ed 0xb4000 + 767213 (-[UITableView _userSelectRowAtPendingSelectionIndexPath:] + 201)&#xA;6   Foundation                      0x00b795b3 0xb6e000 + 46515 (__NSFireDelayedPerform + 380)&#xA;7   CoreFoundation                  0x01f45376 0x1efa000 + 308086 (__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 22)&#xA;8   CoreFoundation                  0x01f44e06 0x1efa000 + 306694 (__CFRunLoopDoTimer + 534)&#xA;9   CoreFoundation                  0x01f2ca82 0x1efa000 + 207490 (__CFRunLoopRun + 1810)&#xA;10  CoreFoundation                  0x01f2bf44 0x1efa000 + 204612 (CFRunLoopRunSpecific + 276)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom Crashes &amp;amp; Stack Traces&lt;/h4&gt; &#xA;&lt;p&gt;You can now report your own custom crashes and stack traces (think scripting languages):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void) reportUserException:(NSString*) name&#xA;                  reason:(NSString*) reason&#xA;              lineOfCode:(NSString*) lineOfCode&#xA;              stackTrace:(NSArray*) stackTrace&#xA;        terminateProgram:(BOOL) terminateProgram;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See KSCrash.h for details.&lt;/p&gt; &#xA;&lt;h3&gt;Unstable Features&lt;/h3&gt; &#xA;&lt;p&gt;The following features should be considered &#34;unstable&#34; and are disabled by default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Deadlock detection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Build KSCrash&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Select the &lt;strong&gt;KSCrash&lt;/strong&gt; scheme.&lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;strong&gt;iOS Device&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;Archive&lt;/strong&gt; from the &lt;strong&gt;Products&lt;/strong&gt; menu.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When it has finished building, it will show you the framework in Finder. You can use it like you would any other framework.&lt;/p&gt; &#xA;&lt;h2&gt;How to Use KSCrash&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the framework to your project (or add the KSCrash project as a dependency)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following system frameworks &amp;amp; libraries to your project:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;libc++.dylib (libc++.tbd in newer versions)&lt;/li&gt; &#xA;   &lt;li&gt;libz.dylib (libz.tbd in newer versions)&lt;/li&gt; &#xA;   &lt;li&gt;MessageUI.framework (iOS only)&lt;/li&gt; &#xA;   &lt;li&gt;SystemConfiguration.framework&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the flag &#34;-ObjC&#34; to &lt;strong&gt;Other Linker Flags&lt;/strong&gt; in your &lt;strong&gt;Build Settings&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following to your &lt;strong&gt;[application: didFinishLaunchingWithOptions:]&lt;/strong&gt; method in your app delegate:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;KSCrash/KSCrash.h&amp;gt;&#xA;// Include to use the standard reporter.&#xA;#import &amp;lt;KSCrash/KSCrashInstallationStandard.h&amp;gt;&#xA;// Include to use Quincy or Hockey.&#xA;#import &amp;lt;KSCrash/KSCrashInstallationQuincyHockey.h&amp;gt;&#xA;// Include to use the email reporter.&#xA;#import &amp;lt;KSCrash/KSCrashInstallationEmail.h&amp;gt;&#xA;// Include to use Victory.&#xA;#import &amp;lt;KSCrash/KSCrashInstallationVictory.h&amp;gt;&#xA;&#xA;- (BOOL)application:(UIApplication*) application didFinishLaunchingWithOptions:(NSDictionary*) launchOptions&#xA;{&#xA;KSCrashInstallationStandard* installation = [KSCrashInstallationStandard sharedInstance];&#xA;installation.url = [NSURL URLWithString:@&#34;http://put.your.url.here&#34;];&#xA;&#xA;// OR:&#xA;&#xA;KSCrashInstallationQuincy* installation = [KSCrashInstallationQuincy sharedInstance];&#xA;installation.url = [NSURL URLWithString:@&#34;http://put.your.url.here&#34;];&#xA;&#xA;// OR:&#xA;&#xA;KSCrashInstallationHockey* installation = [KSCrashInstallationHockey sharedInstance];&#xA;installation.appIdentifier = @&#34;PUT_YOUR_HOCKEY_APP_ID_HERE&#34;;&#xA;&#xA;// OR:&#xA;&#xA;KSCrashInstallationEmail* installation = [KSCrashInstallationEmail sharedInstance];&#xA;installation.recipients = @[@&#34;some@email.address&#34;];&#xA;&#xA;// Optional (Email): Send Apple-style reports instead of JSON&#xA;[installation setReportStyle:KSCrashEmailReportStyleApple useDefaultFilenameFormat:YES]; &#xA;&#xA;// Optional: Add an alert confirmation (recommended for email installation)&#xA;[installation addConditionalAlertWithTitle:@&#34;Crash Detected&#34;&#xA;                                 message:@&#34;The app crashed last time it was launched. Send a crash report?&#34;&#xA;                               yesAnswer:@&#34;Sure!&#34;&#xA;                                noAnswer:@&#34;No thanks&#34;];&#xA;&#xA;// OR:&#xA;&#xA;KSCrashInstallationVictory* installation = [KSCrashInstallationVictory sharedInstance];&#xA;installation.url = [NSURL URLWithString:@&#34;https://put.your.url.here/api/v1/crash/&amp;lt;application key&amp;gt;&#34;];&#xA;&#xA;[installation install];&#xA;    …&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the crash monitor system (which intercepts crashes and stores reports to disk). Note that there are other properties you can and probably will want to set for the various installations.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;re ready to send any outstanding crash reports, call the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[installation sendAllReportsWithCompletion:^(NSArray *filteredReports, BOOL completed, NSError *error)&#xA;{&#xA; // Stuff to do when report sending is complete&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Recommended Reading&lt;/h2&gt; &#xA;&lt;p&gt;If possible, you should read the following header files to fully understand what features KSCrash has, and how to use them:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;KSCrash.h&lt;/li&gt; &#xA; &lt;li&gt;KSCrashInstallation.h&lt;/li&gt; &#xA; &lt;li&gt;KSCrashInstallation(SPECIFIC TYPE).h&lt;/li&gt; &#xA; &lt;li&gt;Architecture.md&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Understanding the KSCrash Codebase&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve written a quick code tour &lt;a href=&#34;https://raw.githubusercontent.com/kstenerud/KSCrash/master/CODE_TOUR.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Enabling on-device symbolication&lt;/h3&gt; &#xA;&lt;p&gt;On-device symbolication requires basic symbols to be present in the final build. To enable this, go to your app&#39;s build settings and set &lt;strong&gt;Strip Style&lt;/strong&gt; to &lt;strong&gt;Debugging Symbols&lt;/strong&gt;. Doing so increases your final binary size by about 5%, but you get on-device symbolication.&lt;/p&gt; &#xA;&lt;h3&gt;Enabling advanced functionality:&lt;/h3&gt; &#xA;&lt;p&gt;KSCrash has advanced functionality that can be very useful when examining crash reports in the wild. Some involve minor trade-offs, so most of them are disabled by default.&lt;/p&gt; &#xA;&lt;h4&gt;Custom User Data (userInfo in KSCrash.h)&lt;/h4&gt; &#xA;&lt;p&gt;You can store custom user data to the next crash report by setting the &lt;strong&gt;userInfo&lt;/strong&gt; property in KSCrash.h.&lt;/p&gt; &#xA;&lt;h4&gt;Zombie Tracking (KSCrashMonitorTypeZombie in KSCrashMonitorType.h)&lt;/h4&gt; &#xA;&lt;p&gt;KSCrash has the ability to detect zombie instances (dangling pointers to deallocated objects). It does this by recording the address and class of any object that gets deallocated. It stores these values in a cache, keyed off the deallocated object&#39;s address. This means that the smaller you set the cache size, the greater the chance that a hash collision occurs and you lose information about a previously deallocated object.&lt;/p&gt; &#xA;&lt;p&gt;With zombie tracking enabled, KSCrash will also detect a lost NSException and print its contents. Certain kinds of memory corruption or stack corruption crashes can cause the exception to deallocate early, further twarting efforts to debug your app, so this feature can be quite handy at times.&lt;/p&gt; &#xA;&lt;p&gt;Trade off: Zombie tracking at the cost of adding very slight overhead to object deallocation, and having some memory reserved.&lt;/p&gt; &#xA;&lt;h4&gt;Deadlock Detection (KSCrashMonitorTypeMainThreadDeadlock in KSCrashMonitorType.h)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING WARNING WARNING WARNING WARNING WARNING WARNING&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This feature is UNSTABLE! It can false-positive and crash your app!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your main thread deadlocks, your user interface will become unresponsive, and the user will have to manually shut down the app (for which there will be no crash report). With deadlock detection enabled, a watchdog timer is set up. If anything holds the main thread for longer than the watchdog timer duration, KSCrash will shut down the app and give you a stack trace showing what the main thread was doing at the time.&lt;/p&gt; &#xA;&lt;p&gt;This is wonderful, but you must be careful: App initialization generally occurs on the main thread. If your initialization code takes longer than the watchdog timer, your app will be forcibly shut down during start up! If you enable this feature, you MUST ensure that NONE of your normally running code holds the main thread for longer than the watchdog value! At the same time, you&#39;ll want to set the timer to a low enough value that the user doesn&#39;t become impatient and shut down the app manually before the watchdog triggers!&lt;/p&gt; &#xA;&lt;p&gt;Trade off: Deadlock detection, but you must be a lot more careful about what runs on the main thread!&lt;/p&gt; &#xA;&lt;h4&gt;Memory Introspection (introspectMemory in KSCrash.h)&lt;/h4&gt; &#xA;&lt;p&gt;When an app crashes, there are usually objects and strings in memory that are being referenced by the stack, registers, or even exception messages. When enabled, KSCrash will introspect these memory regions and store their contents in the crash report.&lt;/p&gt; &#xA;&lt;p&gt;You can also specify a list of classes that should not be introspected by setting the &lt;strong&gt;doNotIntrospectClasses&lt;/strong&gt; property in KSCrash.&lt;/p&gt; &#xA;&lt;h4&gt;Custom crash handling code (onCrash in KSCrash.h)&lt;/h4&gt; &#xA;&lt;p&gt;If you want to do some extra processing after a crash occurs (perhaps to add more contextual data to the report), you can do so.&lt;/p&gt; &#xA;&lt;p&gt;However, you must ensure that you only use async-safe code, and above all else never call Objective-C code from that method! There are many cases where you can get away with doing so anyway, but there are certain classes of crashes where handler code that disregards this warning will cause the crash handler to crash! Note that if this happens, KSCrash will detect it and write a full report anyway, though your custom handler code may not fully run.&lt;/p&gt; &#xA;&lt;p&gt;Trade off: Custom crash handling code, but you must be careful what you put in it!&lt;/p&gt; &#xA;&lt;h4&gt;KSCrash log redirection&lt;/h4&gt; &#xA;&lt;p&gt;This takes whatever KSCrash would have printed to the console, and writes it to a file instead. I mostly use this for debugging KSCrash itself, but it could be useful for other purposes, so I&#39;ve exposed an API for it.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The workspace includes some example apps, which demonstrate common KSCrash usage. Please look at the top of AppDelegate.m in each app for a description of what it does.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2012 Karl Stenerud&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in the documentation of any redistributions of the template files themselves (but not in projects built using the templates).&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SVProgressHUD/SVProgressHUD</title>
    <updated>2022-06-02T02:47:38Z</updated>
    <id>tag:github.com,2022-06-02:/SVProgressHUD/SVProgressHUD</id>
    <link href="https://github.com/SVProgressHUD/SVProgressHUD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A clean and lightweight progress HUD for your iOS and tvOS app.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SVProgressHUD&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SVProgressHUD.svg?style=flat&#34; alt=&#34;Pod Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/SVProgressHUD.svg?style=flat&#34; alt=&#34;Pod Platform&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/l/SVProgressHUD.svg?style=flat&#34; alt=&#34;Pod License&#34;&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-green.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CocoaPods-compatible-green.svg?style=flat&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SVProgressHUD&lt;/code&gt; is a clean and easy-to-use HUD meant to display the progress of an ongoing task on iOS and tvOS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://f.cl.ly/items/2G1F1Z0M0k0h2U3V1p39/SVProgressHUD.gif&#34; alt=&#34;SVProgressHUD&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Try &lt;code&gt;SVProgressHUD&lt;/code&gt; on &lt;a href=&#34;https://appetize.io/app/p8r2cvy8kq74x7q7tjqf5gyatr&#34;&gt;Appetize.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;From CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Objective-C, which automates and simplifies the process of using 3rd-party libraries like &lt;code&gt;SVProgressHUD&lt;/code&gt; in your projects. First, add the following line to your &lt;a href=&#34;http://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;Podfile&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SVProgressHUD&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the latest features of &lt;code&gt;SVProgressHUD&lt;/code&gt; use normal external source dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SVProgressHUD&#39;, :git =&amp;gt; &#39;https://github.com/SVProgressHUD/SVProgressHUD.git&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This pulls from the &lt;code&gt;master&lt;/code&gt; branch directly.&lt;/p&gt; &#xA;&lt;p&gt;Second, install &lt;code&gt;SVProgressHUD&lt;/code&gt; into your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate &lt;code&gt;SVProgressHUD&lt;/code&gt; into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;SVProgressHUD/SVProgressHUD&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage bootstrap&lt;/code&gt; to build the framework in your repository&#39;s Carthage directory. You can then include it in your target&#39;s &lt;code&gt;carthage copy-frameworks&lt;/code&gt; build phase. For more information on this, please see &lt;a href=&#34;https://github.com/carthage/carthage#if-youre-building-for-ios-tvos-or-watchos&#34;&gt;Carthage&#39;s documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag the &lt;code&gt;SVProgressHUD/SVProgressHUD&lt;/code&gt; folder into your project.&lt;/li&gt; &#xA; &lt;li&gt;Take care that &lt;code&gt;SVProgressHUD.bundle&lt;/code&gt; is added to &lt;code&gt;Targets-&amp;gt;Build Phases-&amp;gt;Copy Bundle Resources&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add the &lt;strong&gt;QuartzCore&lt;/strong&gt; framework to your project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Swift&lt;/h2&gt; &#xA;&lt;p&gt;Even though &lt;code&gt;SVProgressHUD&lt;/code&gt; is written in Objective-C, it can be used in Swift with no hassle. If you use &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; add the following line to your &lt;a href=&#34;http://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;Podfile&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you added &lt;code&gt;SVProgressHUD&lt;/code&gt; manually, just add a &lt;a href=&#34;https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html&#34;&gt;bridging header&lt;/a&gt; file to your project with the &lt;code&gt;SVProgressHUD&lt;/code&gt; header included.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;(see sample Xcode project in &lt;code&gt;/Demo&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SVProgressHUD&lt;/code&gt; is created as a singleton (i.e. it doesn&#39;t need to be explicitly allocated and instantiated; you directly call &lt;code&gt;[SVProgressHUD method]&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;SVProgressHUD&lt;/code&gt; wisely! Only use it if you absolutely need to perform a task before taking the user forward. Bad use case examples: pull to refresh, infinite scrolling, sending message.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;SVProgressHUD&lt;/code&gt; in your app will usually look as simple as this (using Grand Central Dispatch):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[SVProgressHUD show];&#xA;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{&#xA;    // time-consuming task&#xA;    dispatch_async(dispatch_get_main_queue(), ^{&#xA;        [SVProgressHUD dismiss];&#xA;    });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Showing the HUD&lt;/h3&gt; &#xA;&lt;p&gt;You can show the status of indeterminate tasks using one of the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;+ (void)show;&#xA;+ (void)showWithStatus:(NSString*)string;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like the HUD to reflect the progress of a task, use one of these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;+ (void)showProgress:(CGFloat)progress;&#xA;+ (void)showProgress:(CGFloat)progress status:(NSString*)status;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dismissing the HUD&lt;/h3&gt; &#xA;&lt;p&gt;The HUD can be dismissed using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;+ (void)dismiss;&#xA;+ (void)dismissWithDelay:(NSTimeInterval)delay;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to stack HUDs, you can balance out every show call using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;+ (void)popActivity;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The HUD will get dismissed once the popActivity calls will match the number of show calls.&lt;/p&gt; &#xA;&lt;p&gt;Or show a confirmation glyph before before getting dismissed a little bit later. The display time depends on &lt;code&gt;minimumDismissTimeInterval&lt;/code&gt; and the length of the given string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;+ (void)showInfoWithStatus:(NSString*)string;&#xA;+ (void)showSuccessWithStatus:(NSString*)string;&#xA;+ (void)showErrorWithStatus:(NSString*)string;&#xA;+ (void)showImage:(UIImage*)image status:(NSString*)string;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SVProgressHUD&lt;/code&gt; can be customized via the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;+ (void)setDefaultStyle:(SVProgressHUDStyle)style;                  // default is SVProgressHUDStyleLight&#xA;+ (void)setDefaultMaskType:(SVProgressHUDMaskType)maskType;         // default is SVProgressHUDMaskTypeNone&#xA;+ (void)setDefaultAnimationType:(SVProgressHUDAnimationType)type;   // default is SVProgressHUDAnimationTypeFlat&#xA;+ (void)setContainerView:(UIView*)containerView;                    // default is window level&#xA;+ (void)setMinimumSize:(CGSize)minimumSize;                         // default is CGSizeZero, can be used to avoid resizing&#xA;+ (void)setRingThickness:(CGFloat)width;                            // default is 2 pt&#xA;+ (void)setRingRadius:(CGFloat)radius;                              // default is 18 pt&#xA;+ (void)setRingNoTextRadius:(CGFloat)radius;                        // default is 24 pt&#xA;+ (void)setCornerRadius:(CGFloat)cornerRadius;                      // default is 14 pt&#xA;+ (void)setBorderColor:(nonnull UIColor*)color;                     // default is nil&#xA;+ (void)setBorderWidth:(CGFloat)width;                              // default is 0&#xA;+ (void)setFont:(UIFont*)font;                                      // default is [UIFont preferredFontForTextStyle:UIFontTextStyleSubheadline]&#xA;+ (void)setForegroundColor:(UIColor*)color;                         // default is [UIColor blackColor], only used for SVProgressHUDStyleCustom&#xA;+ (void)setForegroundImageColor:(nullable UIColor*)color;           // default is the same as foregroundColor&#xA;+ (void)setBackgroundColor:(UIColor*)color;                         // default is [UIColor whiteColor], only used for SVProgressHUDStyleCustom&#xA;+ (void)setBackgroundLayerColor:(UIColor*)color;                    // default is [UIColor colorWithWhite:0 alpha:0.4], only used for SVProgressHUDMaskTypeCustom&#xA;+ (void)setImageViewSize:(CGSize)size;                              // default is 28x28 pt&#xA;+ (void)setShouldTintImages:(BOOL)shouldTintImages;                 // default is YES&#xA;+ (void)setInfoImage:(UIImage*)image;                               // default is the bundled info image provided by Freepik&#xA;+ (void)setSuccessImage:(UIImage*)image;                            // default is bundled success image from Freepik&#xA;+ (void)setErrorImage:(UIImage*)image;                              // default is bundled error image from Freepik&#xA;+ (void)setViewForExtension:(UIView*)view;                          // default is nil, only used if #define SV_APP_EXTENSIONS is set&#xA;+ (void)setGraceTimeInterval:(NSTimeInterval)interval;              // default is 0 seconds&#xA;+ (void)setMinimumDismissTimeInterval:(NSTimeInterval)interval;     // default is 5.0 seconds&#xA;+ (void)setMaximumDismissTimeInterval:(NSTimeInterval)interval;     // default is CGFLOAT_MAX&#xA;+ (void)setFadeInAnimationDuration:(NSTimeInterval)duration;        // default is 0.15 seconds&#xA;+ (void)setFadeOutAnimationDuration:(NSTimeInterval)duration;       // default is 0.15 seconds&#xA;+ (void)setMaxSupportedWindowLevel:(UIWindowLevel)windowLevel;      // default is UIWindowLevelNormal&#xA;+ (void)setHapticsEnabled:(BOOL)hapticsEnabled;                     // default is NO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally &lt;code&gt;SVProgressHUD&lt;/code&gt; supports the &lt;code&gt;UIAppearance&lt;/code&gt; protocol for most of the above methods.&lt;/p&gt; &#xA;&lt;h3&gt;Hint&lt;/h3&gt; &#xA;&lt;p&gt;As standard &lt;code&gt;SVProgressHUD&lt;/code&gt; offers two preconfigured styles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SVProgressHUDStyleLight&lt;/code&gt;: White background with black spinner and text&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SVProgressHUDStyleDark&lt;/code&gt;: Black background with white spinner and text&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to use custom colors use &lt;code&gt;setForegroundColor&lt;/code&gt; and &lt;code&gt;setBackgroundColor:&lt;/code&gt;. These implicitly set the HUD&#39;s style to &lt;code&gt;SVProgressHUDStyleCustom&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Haptic Feedback&lt;/h2&gt; &#xA;&lt;p&gt;For users with newer devices (starting with the iPhone 7), &lt;code&gt;SVProgressHUD&lt;/code&gt; can automatically trigger haptic feedback depending on which HUD is being displayed. The feedback maps as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;showSuccessWithStatus:&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;UINotificationFeedbackTypeSuccess&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;showInfoWithStatus:&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;UINotificationFeedbackTypeWarning&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;showErrorWithStatus:&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;UINotificationFeedbackTypeError&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To enable this functionality, use &lt;code&gt;setHapticsEnabled:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Users with devices prior to iPhone 7 will have no change in functionality.&lt;/p&gt; &#xA;&lt;h2&gt;Notifications&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SVProgressHUD&lt;/code&gt; posts four notifications via &lt;code&gt;NSNotificationCenter&lt;/code&gt; in response to being shown/dismissed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SVProgressHUDWillAppearNotification&lt;/code&gt; when the show animation starts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SVProgressHUDDidAppearNotification&lt;/code&gt; when the show animation completes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SVProgressHUDWillDisappearNotification&lt;/code&gt; when the dismiss animation starts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SVProgressHUDDidDisappearNotification&lt;/code&gt; when the dismiss animation completes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each notification passes a &lt;code&gt;userInfo&lt;/code&gt; dictionary holding the HUD&#39;s status string (if any), retrievable via &lt;code&gt;SVProgressHUDStatusUserInfoKey&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SVProgressHUD&lt;/code&gt; also posts &lt;code&gt;SVProgressHUDDidReceiveTouchEventNotification&lt;/code&gt; when users touch on the overall screen or &lt;code&gt;SVProgressHUDDidTouchDownInsideNotification&lt;/code&gt; when a user touches on the HUD directly. For this notifications &lt;code&gt;userInfo&lt;/code&gt; is not passed but the object parameter contains the &lt;code&gt;UIEvent&lt;/code&gt; that related to the touch.&lt;/p&gt; &#xA;&lt;h2&gt;App Extensions&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;SVProgressHUD&lt;/code&gt; in an App Extension, &lt;code&gt;#define SV_APP_EXTENSIONS&lt;/code&gt; to avoid using unavailable APIs. Additionally call &lt;code&gt;setViewForExtension:&lt;/code&gt; from your extensions view controller with &lt;code&gt;self.view&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to this project&lt;/h2&gt; &#xA;&lt;p&gt;If you have feature requests or bug reports, feel free to help out by sending pull requests or by &lt;a href=&#34;https://github.com/SVProgressHUD/SVProgressHUD/issues/new&#34;&gt;creating new issues&lt;/a&gt;. Please take a moment to review the guidelines written by &lt;a href=&#34;https://github.com/necolas&#34;&gt;Nicolas Gallagher&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/necolas/issue-guidelines/raw/master/CONTRIBUTING.md#bugs&#34;&gt;Bug reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/necolas/issue-guidelines/raw/master/CONTRIBUTING.md#features&#34;&gt;Feature requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/necolas/issue-guidelines/raw/master/CONTRIBUTING.md#pull-requests&#34;&gt;Pull requests&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SVProgressHUD&lt;/code&gt; is distributed under the terms and conditions of the &lt;a href=&#34;https://github.com/SVProgressHUD/SVProgressHUD/raw/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;. The success, error and info icons are made by &lt;a href=&#34;http://www.freepik.com&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;http://www.flaticon.com&#34;&gt;Flaticon&lt;/a&gt; and are licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;Creative Commons BY 3.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SVProgressHUD&lt;/code&gt; is brought to you by &lt;a href=&#34;http://samvermette.com&#34;&gt;Sam Vermette&lt;/a&gt;, &lt;a href=&#34;http://tiemerding.com&#34;&gt;Tobias Tiemerding&lt;/a&gt; and &lt;a href=&#34;https://github.com/SVProgressHUD/SVProgressHUD/contributors&#34;&gt;contributors to the project&lt;/a&gt;. If you&#39;re using &lt;code&gt;SVProgressHUD&lt;/code&gt; in your project, attribution would be very appreciated.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ccgus/fmdb</title>
    <updated>2022-06-02T02:47:38Z</updated>
    <id>tag:github.com,2022-06-02:/ccgus/fmdb</id>
    <link href="https://github.com/ccgus/fmdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Cocoa / Objective-C wrapper around SQLite&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FMDB v2.7&lt;/h1&gt; &#xA;&lt;!--[![Platform](https://img.shields.io/cocoapods/p/FMDB.svg?style=flat)](http://cocoadocs.org/docsets/Alamofire)--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://img.shields.io/cocoapods/v/FMDB.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/FMDB.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an Objective-C wrapper around &lt;a href=&#34;https://sqlite.org/&#34;&gt;SQLite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The FMDB Mailing List:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/group/fmdb&#34;&gt;https://groups.google.com/group/fmdb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Read the SQLite FAQ:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.sqlite.org/faq.html&#34;&gt;https://www.sqlite.org/faq.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since FMDB is built on top of SQLite, you&#39;re going to want to read this page top to bottom at least once. And while you&#39;re there, make sure to bookmark the SQLite Documentation page: &lt;a href=&#34;https://www.sqlite.org/docs.html&#34;&gt;https://www.sqlite.org/docs.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Do you have an awesome idea that deserves to be in FMDB? You might consider pinging ccgus first to make sure he hasn&#39;t already ruled it out for some reason. Otherwise pull requests are great, and make sure you stick to the local coding conventions. However, please be patient and if you haven&#39;t heard anything from ccgus for a week or more, you might want to send a note asking what&#39;s up.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;FMDB can be installed using &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you haven&#39;t done so already, you might want to initialize the project, to have it produce a &lt;code&gt;Podfile&lt;/code&gt; template for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pod init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, edit the &lt;code&gt;Podfile&lt;/code&gt;, adding &lt;code&gt;FMDB&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Uncomment the next line to define a global platform for your project&#xA;# platform :ios, &#39;9.0&#39;&#xA;&#xA;target &#39;MyApp&#39; do&#xA;    # Comment the next line if you&#39;re not using Swift and don&#39;t want to use dynamic frameworks&#xA;    use_frameworks!&#xA;&#xA;    # Pods for MyApp2&#xA;&#xA;    pod &#39;FMDB&#39;&#xA;    # pod &#39;FMDB/FTS&#39;   # FMDB with FTS&#xA;    # pod &#39;FMDB/standalone&#39;   # FMDB with latest SQLite amalgamation source&#xA;    # pod &#39;FMDB/standalone/FTS&#39;   # FMDB with latest SQLite amalgamation source and FTS&#xA;    # pod &#39;FMDB/SQLCipher&#39;   # FMDB with SQLCipher&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install the pods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open the &lt;code&gt;.xcworkspace&lt;/code&gt; rather than the &lt;code&gt;.xcodeproj&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information on Cocoapods visit &lt;a href=&#34;https://cocoapods.org&#34;&gt;https://cocoapods.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If using FMDB with &lt;a href=&#34;https://www.zetetic.net/sqlcipher/&#34;&gt;SQLCipher&lt;/a&gt; you must use the FMDB/SQLCipher subspec. The FMDB/SQLCipher subspec declares SQLCipher as a dependency, allowing FMDB to be compiled with the &lt;code&gt;-DSQLITE_HAS_CODEC&lt;/code&gt; flag.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Once you make sure you have &lt;a href=&#34;https://github.com/Carthage/Carthage/releases&#34;&gt;the latest version of Carthage&lt;/a&gt;, you can open up a command line terminal, navigate to your project&#39;s main directory, and then do the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ echo &#39; github &#34;ccgus/fmdb&#34; &#39; &amp;gt; ./Cartfile&#xA;$ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then configure your project as outlined in Carthage&#39;s &lt;a href=&#34;https://github.com/Carthage/Carthage#getting-started&#34;&gt;Getting Started&lt;/a&gt; (i.e. for iOS, adding the framework to the &#34;Link Binary with Libraries&#34; in your target and adding the &lt;code&gt;copy-frameworks&lt;/code&gt; script; in macOS, adding the framework to the list of &#34;Embedded Binaries&#34;).&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Declare FMDB as a package dependency.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(&#xA;    name: &#34;FMDB&#34;, &#xA;    url: &#34;https://github.com/ccgus/fmdb&#34;, &#xA;    .upToNextMinor(from: &#34;2.7.8&#34;)),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use FMDB in target dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.product(name: &#34;FMDB&#34;, package: &#34;FMDB&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FMDB Class Reference:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ccgus.github.io/fmdb/html/index.html&#34;&gt;https://ccgus.github.io/fmdb/html/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Automatic Reference Counting (ARC) or Manual Memory Management?&lt;/h2&gt; &#xA;&lt;p&gt;You can use either style in your Cocoa project. FMDB will figure out which you are using at compile time and do the right thing.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s New in FMDB 2.7&lt;/h2&gt; &#xA;&lt;p&gt;FMDB 2.7 attempts to support a more natural interface. This represents a fairly significant change for Swift developers (audited for nullability; shifted to properties in external interfaces where possible rather than methods; etc.). For Objective-C developers, this should be a fairly seamless transition (unless you were using the ivars that were previously exposed in the public interface, which you shouldn&#39;t have been doing, anyway!).&lt;/p&gt; &#xA;&lt;h3&gt;Nullability and Swift Optionals&lt;/h3&gt; &#xA;&lt;p&gt;FMDB 2.7 is largely the same as prior versions, but has been audited for nullability. For Objective-C users, this simply means that if you perform a static analysis of your FMDB-based project, you may receive more meaningful warnings as you review your project, but there are likely to be few, if any, changes necessary in your code.&lt;/p&gt; &#xA;&lt;p&gt;For Swift users, this nullability audit results in changes that are not entirely backward compatible with FMDB 2.6, but is a little more Swifty. Before FMDB was audited for nullability, Swift was forced to defensively assume that variables were optional, but the library now more accurately knows which properties and method parameters are optional, and which are not.&lt;/p&gt; &#xA;&lt;p&gt;This means, though, that Swift code written for FMDB 2.7 may require changes. For example, consider the following Swift 3/Swift 4 code for FMDB 2.6:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;queue.inTransaction { db, rollback in&#xA;    do {&#xA;        guard let db == db else {&#xA;            // handle error here&#xA;            return&#xA;        }&#xA;&#xA;        try db.executeUpdate(&#34;INSERT INTO foo (bar) VALUES (?)&#34;, values: [1])&#xA;        try db.executeUpdate(&#34;INSERT INTO foo (bar) VALUES (?)&#34;, values: [2])&#xA;    } catch {&#xA;        rollback?.pointee = true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because FMDB 2.6 was not audited for nullability, Swift inferred that &lt;code&gt;db&lt;/code&gt; and &lt;code&gt;rollback&lt;/code&gt; were optionals. But, now, in FMDB 2.7, Swift now knows that, for example, neither &lt;code&gt;db&lt;/code&gt; nor &lt;code&gt;rollback&lt;/code&gt; above can be &lt;code&gt;nil&lt;/code&gt;, so they are no longer optionals. Thus it becomes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;queue.inTransaction { db, rollback in&#xA;    do {&#xA;        try db.executeUpdate(&#34;INSERT INTO foo (bar) VALUES (?)&#34;, values: [1])&#xA;        try db.executeUpdate(&#34;INSERT INTO foo (bar) VALUES (?)&#34;, values: [2])&#xA;    } catch {&#xA;        rollback.pointee = true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Functions&lt;/h3&gt; &#xA;&lt;p&gt;In the past, when writing custom functions, you would have to generally include your own &lt;code&gt;@autoreleasepool&lt;/code&gt; block to avoid problems when writing functions that scanned through a large table. Now, FMDB will automatically wrap it in an autorelease pool, so you don&#39;t have to.&lt;/p&gt; &#xA;&lt;p&gt;Also, in the past, when retrieving the values passed to the function, you had to drop down to the SQLite C API and include your own &lt;code&gt;sqlite3_value_XXX&lt;/code&gt; calls. There are now &lt;code&gt;FMDatabase&lt;/code&gt; methods, &lt;code&gt;valueInt&lt;/code&gt;, &lt;code&gt;valueString&lt;/code&gt;, etc., so you can stay within Swift and/or Objective-C, without needing to call the C functions yourself. Likewise, when specifying the return values, you no longer need to call &lt;code&gt;sqlite3_result_XXX&lt;/code&gt; C API, but rather you can use &lt;code&gt;FMDatabase&lt;/code&gt; methods, &lt;code&gt;resultInt&lt;/code&gt;, &lt;code&gt;resultString&lt;/code&gt;, etc. There is a new &lt;code&gt;enum&lt;/code&gt; for &lt;code&gt;valueType&lt;/code&gt; called &lt;code&gt;SqliteValueType&lt;/code&gt;, which can be used for checking the type of parameter passed to the custom function.&lt;/p&gt; &#xA;&lt;p&gt;Thus, you can do something like (as of Swift 3):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;db.makeFunctionNamed(&#34;RemoveDiacritics&#34;, arguments: 1) { context, argc, argv in&#xA;    guard db.valueType(argv[0]) == .text || db.valueType(argv[0]) == .null else {&#xA;        db.resultError(&#34;Expected string parameter&#34;, context: context)&#xA;        return&#xA;    }&#xA;&#xA;    if let string = db.valueString(argv[0])?.folding(options: .diacriticInsensitive, locale: nil) {&#xA;        db.resultString(string, context: context)&#xA;    } else {&#xA;        db.resultNull(context: context)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you can then use that function in your SQL (in this case, matching both &#34;Jose&#34; and &#34;José&#34;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM employees WHERE RemoveDiacritics(first_name) LIKE &#39;jose&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, the method &lt;code&gt;makeFunctionNamed:maximumArguments:withBlock:&lt;/code&gt; has been renamed to &lt;code&gt;makeFunctionNamed:arguments:block:&lt;/code&gt;, to more accurately reflect the functional intent of the second parameter.&lt;/p&gt; &#xA;&lt;h3&gt;API Changes&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the &lt;code&gt;makeFunctionNamed&lt;/code&gt; noted above, there are a few other API changes. Specifically,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To become consistent with the rest of the API, the methods &lt;code&gt;objectForColumnName&lt;/code&gt; and &lt;code&gt;UTF8StringForColumnName&lt;/code&gt; have been renamed to &lt;code&gt;objectForColumn&lt;/code&gt; and &lt;code&gt;UTF8StringForColumn&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Note, the &lt;code&gt;objectForColumn&lt;/code&gt; (and the associted subscript operator) now returns &lt;code&gt;nil&lt;/code&gt; if an invalid column name/index is passed to it. It used to return &lt;code&gt;NSNull&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To avoid confusion with &lt;code&gt;FMDatabaseQueue&lt;/code&gt; method &lt;code&gt;inTransaction&lt;/code&gt;, which performs transactions, the &lt;code&gt;FMDatabase&lt;/code&gt; method to determine whether you are in a transaction or not, &lt;code&gt;inTransaction&lt;/code&gt;, has been replaced with a read-only property, &lt;code&gt;isInTransaction&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Several functions have been converted to properties, namely, &lt;code&gt;databasePath&lt;/code&gt;, &lt;code&gt;maxBusyRetryTimeInterval&lt;/code&gt;, &lt;code&gt;shouldCacheStatements&lt;/code&gt;, &lt;code&gt;sqliteHandle&lt;/code&gt;, &lt;code&gt;hasOpenResultSets&lt;/code&gt;, &lt;code&gt;lastInsertRowId&lt;/code&gt;, &lt;code&gt;changes&lt;/code&gt;, &lt;code&gt;goodConnection&lt;/code&gt;, &lt;code&gt;columnCount&lt;/code&gt;, &lt;code&gt;resultDictionary&lt;/code&gt;, &lt;code&gt;applicationID&lt;/code&gt;, &lt;code&gt;applicationIDString&lt;/code&gt;, &lt;code&gt;userVersion&lt;/code&gt;, &lt;code&gt;countOfCheckedInDatabases&lt;/code&gt;, &lt;code&gt;countOfCheckedOutDatabases&lt;/code&gt;, and &lt;code&gt;countOfOpenDatabases&lt;/code&gt;. For Objective-C users, this has little material impact, but for Swift users, it results in a slightly more natural interface. Note: For Objective-C developers, previously versions of FMDB exposed many ivars (but we hope you weren&#39;t using them directly, anyway!), but the implmentation details for these are no longer exposed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;URL Methods&lt;/h3&gt; &#xA;&lt;p&gt;In keeping with Apple&#39;s shift from paths to URLs, there are now &lt;code&gt;NSURL&lt;/code&gt; renditions of the various &lt;code&gt;init&lt;/code&gt; methods, previously only accepting paths.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;There are three main classes in FMDB:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;FMDatabase&lt;/code&gt; - Represents a single SQLite database. Used for executing SQL statements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FMResultSet&lt;/code&gt; - Represents the results of executing a query on an &lt;code&gt;FMDatabase&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FMDatabaseQueue&lt;/code&gt; - If you&#39;re wanting to perform queries and updates on multiple threads, you&#39;ll want to use this class. It&#39;s described in the &#34;Thread Safety&#34; section below.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Database Creation&lt;/h3&gt; &#xA;&lt;p&gt;An &lt;code&gt;FMDatabase&lt;/code&gt; is created with a path to a SQLite database file. This path can be one of these three:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A file system path. The file does not have to exist on disk. If it does not exist, it is created for you.&lt;/li&gt; &#xA; &lt;li&gt;An empty string (&lt;code&gt;@&#34;&#34;&lt;/code&gt;). An empty database is created at a temporary location. This database is deleted when the &lt;code&gt;FMDatabase&lt;/code&gt; connection is closed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NULL&lt;/code&gt;. An in-memory database is created. This database will be destroyed when the &lt;code&gt;FMDatabase&lt;/code&gt; connection is closed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;(For more information on temporary and in-memory databases, read the sqlite documentation on the subject: &lt;a href=&#34;https://www.sqlite.org/inmemorydb.html&#34;&gt;https://www.sqlite.org/inmemorydb.html&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString *path = [NSTemporaryDirectory() stringByAppendingPathComponent:@&#34;tmp.db&#34;];&#xA;FMDatabase *db = [FMDatabase databaseWithPath:path];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Opening&lt;/h3&gt; &#xA;&lt;p&gt;Before you can interact with the database, it must be opened. Opening fails if there are insufficient resources or permissions to open and/or create the database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;if (![db open]) {&#xA;    // [db release];   // uncomment this line in manual referencing code; in ARC, this is not necessary/permitted&#xA;    db = nil;&#xA;    return;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Executing Updates&lt;/h3&gt; &#xA;&lt;p&gt;Any sort of SQL statement which is not a &lt;code&gt;SELECT&lt;/code&gt; statement qualifies as an update. This includes &lt;code&gt;CREATE&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;ALTER&lt;/code&gt;, &lt;code&gt;COMMIT&lt;/code&gt;, &lt;code&gt;BEGIN&lt;/code&gt;, &lt;code&gt;DETACH&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;DROP&lt;/code&gt;, &lt;code&gt;END&lt;/code&gt;, &lt;code&gt;EXPLAIN&lt;/code&gt;, &lt;code&gt;VACUUM&lt;/code&gt;, and &lt;code&gt;REPLACE&lt;/code&gt; statements (plus many more). Basically, if your SQL statement does not begin with &lt;code&gt;SELECT&lt;/code&gt;, it is an update statement.&lt;/p&gt; &#xA;&lt;p&gt;Executing updates returns a single value, a &lt;code&gt;BOOL&lt;/code&gt;. A return value of &lt;code&gt;YES&lt;/code&gt; means the update was successfully executed, and a return value of &lt;code&gt;NO&lt;/code&gt; means that some error was encountered. You may invoke the &lt;code&gt;-lastErrorMessage&lt;/code&gt; and &lt;code&gt;-lastErrorCode&lt;/code&gt; methods to retrieve more information.&lt;/p&gt; &#xA;&lt;h3&gt;Executing Queries&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;SELECT&lt;/code&gt; statement is a query and is executed via one of the &lt;code&gt;-executeQuery...&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;p&gt;Executing queries returns an &lt;code&gt;FMResultSet&lt;/code&gt; object if successful, and &lt;code&gt;nil&lt;/code&gt; upon failure. You should use the &lt;code&gt;-lastErrorMessage&lt;/code&gt; and &lt;code&gt;-lastErrorCode&lt;/code&gt; methods to determine why a query failed.&lt;/p&gt; &#xA;&lt;p&gt;In order to iterate through the results of your query, you use a &lt;code&gt;while()&lt;/code&gt; loop. You also need to &#34;step&#34; from one record to the other. With FMDB, the easiest way to do that is like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;FMResultSet *s = [db executeQuery:@&#34;SELECT * FROM myTable&#34;];&#xA;while ([s next]) {&#xA;    //retrieve values for each record&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You must always invoke &lt;code&gt;-[FMResultSet next]&lt;/code&gt; before attempting to access the values returned in a query, even if you&#39;re only expecting one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;FMResultSet *s = [db executeQuery:@&#34;SELECT COUNT(*) FROM myTable&#34;];&#xA;if ([s next]) {&#xA;    int totalCount = [s intForColumnIndex:0];&#xA;}&#xA;[s close];  // Call the -close method on the FMResultSet if you cannot confirm whether the result set is exhausted.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;FMResultSet&lt;/code&gt; has many methods to retrieve data in an appropriate format:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;intForColumn:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;longForColumn:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;longLongIntForColumn:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;boolForColumn:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doubleForColumn:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stringForColumn:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dateForColumn:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dataForColumn:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dataNoCopyForColumn:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UTF8StringForColumn:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;objectForColumn:&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each of these methods also has a &lt;code&gt;{type}ForColumnIndex:&lt;/code&gt; variant that is used to retrieve the data based on the position of the column in the results, as opposed to the column&#39;s name.&lt;/p&gt; &#xA;&lt;p&gt;Typically, there&#39;s no need to &lt;code&gt;-close&lt;/code&gt; an &lt;code&gt;FMResultSet&lt;/code&gt; yourself, since that happens when either the result set is exhausted. However, if you only pull out a single request or any other number of requests which don&#39;t exhaust the result set, you will need to call the &lt;code&gt;-close&lt;/code&gt; method on the &lt;code&gt;FMResultSet&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Closing&lt;/h3&gt; &#xA;&lt;p&gt;When you have finished executing queries and updates on the database, you should &lt;code&gt;-close&lt;/code&gt; the &lt;code&gt;FMDatabase&lt;/code&gt; connection so that SQLite will relinquish any resources it has acquired during the course of its operation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[db close];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Transactions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FMDatabase&lt;/code&gt; can begin and commit a transaction by invoking one of the appropriate methods or executing a begin/end transaction statement.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple Statements and Batch Stuff&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;FMDatabase&lt;/code&gt;&#39;s executeStatements:withResultBlock: to do multiple statements in a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString *sql = @&#34;create table bulktest1 (id integer primary key autoincrement, x text);&#34;&#xA;                 &#34;create table bulktest2 (id integer primary key autoincrement, y text);&#34;&#xA;                 &#34;create table bulktest3 (id integer primary key autoincrement, z text);&#34;&#xA;                 &#34;insert into bulktest1 (x) values (&#39;XXX&#39;);&#34;&#xA;                 &#34;insert into bulktest2 (y) values (&#39;YYY&#39;);&#34;&#xA;                 &#34;insert into bulktest3 (z) values (&#39;ZZZ&#39;);&#34;;&#xA;&#xA;success = [db executeStatements:sql];&#xA;&#xA;sql = @&#34;select count(*) as count from bulktest1;&#34;&#xA;       &#34;select count(*) as count from bulktest2;&#34;&#xA;       &#34;select count(*) as count from bulktest3;&#34;;&#xA;&#xA;success = [self.db executeStatements:sql withResultBlock:^int(NSDictionary *dictionary) {&#xA;    NSInteger count = [dictionary[@&#34;count&#34;] integerValue];&#xA;    XCTAssertEqual(count, 1, @&#34;expected one record for dictionary %@&#34;, dictionary);&#xA;    return 0;&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data Sanitization&lt;/h3&gt; &#xA;&lt;p&gt;When providing a SQL statement to FMDB, you should not attempt to &#34;sanitize&#34; any values before insertion. Instead, you should use the standard SQLite binding syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO myTable VALUES (?, ?, ?, ?)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; character is recognized by SQLite as a placeholder for a value to be inserted. The execution methods all accept a variable number of arguments (or a representation of those arguments, such as an &lt;code&gt;NSArray&lt;/code&gt;, &lt;code&gt;NSDictionary&lt;/code&gt;, or a &lt;code&gt;va_list&lt;/code&gt;), which are properly escaped for you.&lt;/p&gt; &#xA;&lt;p&gt;And, to use that SQL with the &lt;code&gt;?&lt;/code&gt; placeholders from Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSInteger identifier = 42;&#xA;NSString *name = @&#34;Liam O&#39;Flaherty (\&#34;the famous Irish author\&#34;)&#34;;&#xA;NSDate *date = [NSDate date];&#xA;NSString *comment = nil;&#xA;&#xA;BOOL success = [db executeUpdate:@&#34;INSERT INTO authors (identifier, name, date, comment) VALUES (?, ?, ?, ?)&#34;, @(identifier), name, date, comment ?: [NSNull null]];&#xA;if (!success) {&#xA;    NSLog(@&#34;error = %@&#34;, [db lastErrorMessage]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Fundamental data types, like the &lt;code&gt;NSInteger&lt;/code&gt; variable &lt;code&gt;identifier&lt;/code&gt;, should be as a &lt;code&gt;NSNumber&lt;/code&gt; objects, achieved by using the &lt;code&gt;@&lt;/code&gt; syntax, shown above. Or you can use the &lt;code&gt;[NSNumber numberWithInt:identifier]&lt;/code&gt; syntax, too.&lt;/p&gt; &#xA; &lt;p&gt;Likewise, SQL &lt;code&gt;NULL&lt;/code&gt; values should be inserted as &lt;code&gt;[NSNull null]&lt;/code&gt;. For example, in the case of &lt;code&gt;comment&lt;/code&gt; which might be &lt;code&gt;nil&lt;/code&gt; (and is in this example), you can use the &lt;code&gt;comment ?: [NSNull null]&lt;/code&gt; syntax, which will insert the string if &lt;code&gt;comment&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;, but will insert &lt;code&gt;[NSNull null]&lt;/code&gt; if it is &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In Swift, you would use &lt;code&gt;executeUpdate(values:)&lt;/code&gt;, which not only is a concise Swift syntax, but also &lt;code&gt;throws&lt;/code&gt; errors for proper error handling:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let identifier = 42&#xA;    let name = &#34;Liam O&#39;Flaherty (\&#34;the famous Irish author\&#34;)&#34;&#xA;    let date = Date()&#xA;    let comment: String? = nil&#xA;&#xA;    try db.executeUpdate(&#34;INSERT INTO authors (identifier, name, date, comment) VALUES (?, ?, ?, ?)&#34;, values: [identifier, name, date, comment ?? NSNull()])&#xA;} catch {&#xA;    print(&#34;error = \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Swift, you don&#39;t have to wrap fundamental numeric types like you do in Objective-C. But if you are going to insert an optional string, you would probably use the &lt;code&gt;comment ?? NSNull()&lt;/code&gt; syntax (i.e., if it is &lt;code&gt;nil&lt;/code&gt;, use &lt;code&gt;NSNull&lt;/code&gt;, otherwise use the string).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Alternatively, you may use named parameters syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO authors (identifier, name, date, comment) VALUES (:identifier, :name, :date, :comment)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The parameters &lt;em&gt;must&lt;/em&gt; start with a colon. SQLite itself supports other characters, but internally the dictionary keys are prefixed with a colon, do &lt;strong&gt;not&lt;/strong&gt; include the colon in your dictionary keys.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSDictionary *arguments = @{@&#34;identifier&#34;: @(identifier), @&#34;name&#34;: name, @&#34;date&#34;: date, @&#34;comment&#34;: comment ?: [NSNull null]};&#xA;BOOL success = [db executeUpdate:@&#34;INSERT INTO authors (identifier, name, date, comment) VALUES (:identifier, :name, :date, :comment)&#34; withParameterDictionary:arguments];&#xA;if (!success) {&#xA;    NSLog(@&#34;error = %@&#34;, [db lastErrorMessage]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The key point is that one should not use &lt;code&gt;NSString&lt;/code&gt; method &lt;code&gt;stringWithFormat&lt;/code&gt; to manually insert values into the SQL statement, itself. Nor should one Swift string interpolation to insert values into the SQL. Use &lt;code&gt;?&lt;/code&gt; placeholders for values to be inserted into the database (or used in &lt;code&gt;WHERE&lt;/code&gt; clauses in &lt;code&gt;SELECT&lt;/code&gt; statements).&lt;/p&gt; &#xA;&lt;h2 id=&#34;threads&#34;&gt;Using FMDatabaseQueue and Thread Safety.&lt;/h2&gt; &#xA;&lt;p&gt;Using a single instance of &lt;code&gt;FMDatabase&lt;/code&gt; from multiple threads at once is a bad idea. It has always been OK to make a &lt;code&gt;FMDatabase&lt;/code&gt; object &lt;em&gt;per thread&lt;/em&gt;. Just don&#39;t share a single instance across threads, and definitely not across multiple threads at the same time. Bad things will eventually happen and you&#39;ll eventually get something to crash, or maybe get an exception, or maybe meteorites will fall out of the sky and hit your Mac Pro. &lt;em&gt;This would suck&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;So don&#39;t instantiate a single &lt;code&gt;FMDatabase&lt;/code&gt; object and use it across multiple threads.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Instead, use &lt;code&gt;FMDatabaseQueue&lt;/code&gt;. Instantiate a single &lt;code&gt;FMDatabaseQueue&lt;/code&gt; and use it across multiple threads. The &lt;code&gt;FMDatabaseQueue&lt;/code&gt; object will synchronize and coordinate access across the multiple threads. Here&#39;s how to use it:&lt;/p&gt; &#xA;&lt;p&gt;First, make your queue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:aPath];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[queue inDatabase:^(FMDatabase *db) {&#xA;    [db executeUpdate:@&#34;INSERT INTO myTable VALUES (?)&#34;, @1];&#xA;    [db executeUpdate:@&#34;INSERT INTO myTable VALUES (?)&#34;, @2];&#xA;    [db executeUpdate:@&#34;INSERT INTO myTable VALUES (?)&#34;, @3];&#xA;&#xA;    FMResultSet *rs = [db executeQuery:@&#34;select * from foo&#34;];&#xA;    while ([rs next]) {&#xA;        …&#xA;    }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An easy way to wrap things up in a transaction can be done like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[queue inTransaction:^(FMDatabase *db, BOOL *rollback) {&#xA;    [db executeUpdate:@&#34;INSERT INTO myTable VALUES (?)&#34;, @1];&#xA;    [db executeUpdate:@&#34;INSERT INTO myTable VALUES (?)&#34;, @2];&#xA;    [db executeUpdate:@&#34;INSERT INTO myTable VALUES (?)&#34;, @3];&#xA;&#xA;    if (whoopsSomethingWrongHappened) {&#xA;        *rollback = YES;&#xA;        return;&#xA;    }&#xA;&#xA;    // etc ...&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Swift equivalent would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;queue.inTransaction { db, rollback in&#xA;    do {&#xA;        try db.executeUpdate(&#34;INSERT INTO myTable VALUES (?)&#34;, values: [1])&#xA;        try db.executeUpdate(&#34;INSERT INTO myTable VALUES (?)&#34;, values: [2])&#xA;        try db.executeUpdate(&#34;INSERT INTO myTable VALUES (?)&#34;, values: [3])&#xA;&#xA;        if whoopsSomethingWrongHappened {&#xA;            rollback.pointee = true&#xA;            return&#xA;        }&#xA;&#xA;        // etc ...&#xA;    } catch {&#xA;        rollback.pointee = true&#xA;        print(error)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note, as of Swift 3, use &lt;code&gt;pointee&lt;/code&gt;. But in Swift 2.3, use &lt;code&gt;memory&lt;/code&gt; rather than &lt;code&gt;pointee&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FMDatabaseQueue&lt;/code&gt; will run the blocks on a serialized queue (hence the name of the class). So if you call &lt;code&gt;FMDatabaseQueue&lt;/code&gt;&#39;s methods from multiple threads at the same time, they will be executed in the order they are received. This way queries and updates won&#39;t step on each other&#39;s toes, and every one is happy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The calls to &lt;code&gt;FMDatabaseQueue&lt;/code&gt;&#39;s methods are blocking. So even though you are passing along blocks, they will &lt;strong&gt;not&lt;/strong&gt; be run on another thread.&lt;/p&gt; &#xA;&lt;h2&gt;Making custom sqlite functions, based on blocks.&lt;/h2&gt; &#xA;&lt;p&gt;You can do this! For an example, look for &lt;code&gt;-makeFunctionNamed:&lt;/code&gt; in main.m&lt;/p&gt; &#xA;&lt;h2&gt;Swift&lt;/h2&gt; &#xA;&lt;p&gt;You can use FMDB in Swift projects too.&lt;/p&gt; &#xA;&lt;p&gt;To do this, you must:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy the relevant &lt;code&gt;.m&lt;/code&gt; and &lt;code&gt;.h&lt;/code&gt; files from the FMDB &lt;code&gt;src&lt;/code&gt; folder into your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can copy all of them (which is easiest), or only the ones you need. Likely you will need &lt;a href=&#34;https://ccgus.github.io/fmdb/html/Classes/FMDatabase.html&#34;&gt;&lt;code&gt;FMDatabase&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://ccgus.github.io/fmdb/html/Classes/FMResultSet.html&#34;&gt;&lt;code&gt;FMResultSet&lt;/code&gt;&lt;/a&gt; at a minimum. &lt;a href=&#34;https://ccgus.github.io/fmdb/html/Categories/FMDatabase+FMDatabaseAdditions.html&#34;&gt;&lt;code&gt;FMDatabaseAdditions&lt;/code&gt;&lt;/a&gt; provides some very useful convenience methods, so you will likely want that, too. If you are doing multithreaded access to a database, &lt;a href=&#34;https://ccgus.github.io/fmdb/html/Classes/FMDatabaseQueue.html&#34;&gt;&lt;code&gt;FMDatabaseQueue&lt;/code&gt;&lt;/a&gt; is quite useful, too. If you choose to not copy all of the files from the &lt;code&gt;src&lt;/code&gt; directory, though, you may want to update &lt;code&gt;FMDB.h&lt;/code&gt; to only reference the files that you included in your project.&lt;/p&gt; &#xA;&lt;p&gt;Note, if you&#39;re copying all of the files from the &lt;code&gt;src&lt;/code&gt; folder into to your project (which is recommended), you may want to drag the individual files into your project, not the folder, itself, because if you drag the folder, you won&#39;t be prompted to add the bridging header (see next point).&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;If prompted to create a &#34;bridging header&#34;, you should do so. If not prompted and if you don&#39;t already have a bridging header, add one.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information on bridging headers, see &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_76&#34;&gt;Swift and Objective-C in the Same Project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;In your bridging header, add a line that says:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &#34;FMDB.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the variations of &lt;code&gt;executeQuery&lt;/code&gt; and &lt;code&gt;executeUpdate&lt;/code&gt; with the &lt;code&gt;sql&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; parameters with &lt;code&gt;try&lt;/code&gt; pattern, as shown below. These renditions of &lt;code&gt;executeQuery&lt;/code&gt; and &lt;code&gt;executeUpdate&lt;/code&gt; both &lt;code&gt;throw&lt;/code&gt; errors in true Swift fashion.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you do the above, you can then write Swift code that uses &lt;code&gt;FMDatabase&lt;/code&gt;. For example, as of Swift 3:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let fileURL = try! FileManager.default&#xA;    .url(for: .applicationSupportDirectory, in: .userDomainMask, appropriateFor: nil, create: true)&#xA;    .appendingPathComponent(&#34;test.sqlite&#34;)&#xA;&#xA;let database = FMDatabase(url: fileURL)&#xA;&#xA;guard database.open() else {&#xA;    print(&#34;Unable to open database&#34;)&#xA;    return&#xA;}&#xA;&#xA;do {&#xA;    try database.executeUpdate(&#34;create table test(x text, y text, z text)&#34;, values: nil)&#xA;    try database.executeUpdate(&#34;insert into test (x, y, z) values (?, ?, ?)&#34;, values: [&#34;a&#34;, &#34;b&#34;, &#34;c&#34;])&#xA;    try database.executeUpdate(&#34;insert into test (x, y, z) values (?, ?, ?)&#34;, values: [&#34;e&#34;, &#34;f&#34;, &#34;g&#34;])&#xA;&#xA;    let rs = try database.executeQuery(&#34;select x, y, z from test&#34;, values: nil)&#xA;    while rs.next() {&#xA;        if let x = rs.string(forColumn: &#34;x&#34;), let y = rs.string(forColumn: &#34;y&#34;), let z = rs.string(forColumn: &#34;z&#34;) {&#xA;            print(&#34;x = \(x); y = \(y); z = \(z)&#34;)&#xA;        }&#xA;    }&#xA;} catch {&#xA;    print(&#34;failed: \(error.localizedDescription)&#34;)&#xA;}&#xA;&#xA;database.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;The history and changes are availbe on its &lt;a href=&#34;https://github.com/ccgus/fmdb&#34;&gt;GitHub page&lt;/a&gt; and are summarized in the &#34;CHANGES_AND_TODO_LIST.txt&#34; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;The contributors to FMDB are contained in the &#34;Contributors.txt&#34; file.&lt;/p&gt; &#xA;&lt;h2&gt;Additional projects using FMDB, which might be interesting to the discerning developer.&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FMDBMigrationManager, A SQLite schema migration management system for FMDB: &lt;a href=&#34;https://github.com/layerhq/FMDBMigrationManager&#34;&gt;https://github.com/layerhq/FMDBMigrationManager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;FCModel, An alternative to Core Data for people who like having direct SQL access: &lt;a href=&#34;https://github.com/marcoarment/FCModel&#34;&gt;https://github.com/marcoarment/FCModel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick notes on FMDB&#39;s coding style&lt;/h2&gt; &#xA;&lt;p&gt;Spaces, not tabs. Square brackets, not dot notation. Look at what FMDB already does with curly brackets and such, and stick to that style.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Reduce your bug down to the smallest amount of code possible. You want to make it super easy for the developers to see and reproduce your bug. If it helps, pretend that the person who can fix your bug is active on shipping 3 major products, works on a handful of open source projects, has a newborn baby, and is generally very very busy.&lt;/p&gt; &#xA;&lt;p&gt;And we&#39;ve even added a template function to main.m (FMDBReportABugFunction) in the FMDB distribution to help you out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open up fmdb project in Xcode.&lt;/li&gt; &#xA; &lt;li&gt;Open up main.m and modify the FMDBReportABugFunction to reproduce your bug. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Setup your table(s) in the code.&lt;/li&gt; &#xA;   &lt;li&gt;Make your query or update(s).&lt;/li&gt; &#xA;   &lt;li&gt;Add some assertions which demonstrate the bug.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then you can bring it up on the FMDB mailing list by showing your nice and compact FMDBReportABugFunction, or you can report the bug via the github FMDB bug reporter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Figure out where the bug is, fix it, and send a patch in or bring that up on the mailing list. Make sure all the other tests run after your modifications.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;The support channels for FMDB are the mailing list (see above), filing a bug here, or maybe on Stack Overflow. So that is to say, support is provided by the community and on a voluntary basis.&lt;/p&gt; &#xA;&lt;p&gt;FMDB development is overseen by Gus Mueller of Flying Meat. If FMDB been helpful to you, consider purchasing an app from FM or telling all your friends about it.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The license for FMDB is contained in the &#34;License.txt&#34; file.&lt;/p&gt; &#xA;&lt;p&gt;If you happen to come across either Gus Mueller or Rob Ryan in a bar, you might consider purchasing a drink of their choosing if FMDB has been useful to you.&lt;/p&gt; &#xA;&lt;p&gt;(The drink is for them of course, shame on you for trying to keep it.)&lt;/p&gt;</summary>
  </entry>
</feed>